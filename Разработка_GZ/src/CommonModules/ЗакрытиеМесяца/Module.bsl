#Область ПрограммныйИнтерфейс

// Предоставляет сведения о видах регламентных операций.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, колонки:
//  * ВидОперации - ПеречислениеСсылка.ВидыРегламентныхОпераций
//  * НомерГруппы - Число
//  * ПоОрганизацииВЦелом - Булево
//  * ДокументРегламентнаяОперация - Булево, Истина для операций, выполняемых документом РегламентнаяОперация
//
Функция ВсеВидыОпераций() Экспорт
	
	ВидыОпераций = Новый ТаблицаЗначений;
	ВидыОпераций.Колонки.Добавить("ВидОперации",                  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРегламентныхОпераций"));
	ВидыОпераций.Колонки.Добавить("НомерГруппы",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
	ВидыОпераций.Колонки.Добавить("ПоОрганизацииВЦелом",          Новый ОписаниеТипов("Булево"));
	ВидыОпераций.Колонки.Добавить("ДокументРегламентнаяОперация", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ВидОперации Из Перечисления.ВидыРегламентныхОпераций Цикл
		НоваяСтрока = ВидыОпераций.Добавить();
		НоваяСтрока.ВидОперации                  = ВидОперации;
		НоваяСтрока.НомерГруппы                  = ГруппаПоВидуОперации(ВидОперации);
		НоваяСтрока.ПоОрганизацииВЦелом          = ГруппаВыполняетсяПоОрганизацииВЦелом(НоваяСтрока.НомерГруппы);
		НоваяСтрока.ДокументРегламентнаяОперация = ЗакрытиеМесяцаКлиентСервер.ИспользуетсяДокументРегламентнаяОперация(ВидОперации);
	КонецЦикла;
	
	Возврат ВидыОпераций;
	
КонецФункции

// Определяет "базовую" периодичность регламентной операции - чаще которой выполнять ее не имеет смысла.
//
// Параметры:
//  ВидОперации - ПеречислениеСсылка.ВидыРегламентныхОпераций
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.Периодичность
//
Функция ПериодичностьРегламентнойОперации(ВидОперации) Экспорт
	
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеНДС 
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеНМАДляУСН
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеОСДляУСН
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеТаможенныхПлатежейДляУСН
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТорговогоСбора
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНДФЛДляИП
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП Тогда
		
		Возврат Перечисления.Периодичность.Квартал;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса Тогда
		
		Возврат Перечисления.Периодичность.Год;
		
	Иначе
		
		Возврат Перечисления.Периодичность.Месяц;
		
	КонецЕсли;
	
КонецФункции

#Область УстаревшийПрограммныйИнтерфейс

// Устарела. Следует использовать Перечисления.ВидыРегламентныхОпераций.НомерГруппы
//
// Параметры:
//  ВидОперации - ПеречислениеСсылка.ВидыРегламентныхОпераций
// 
// Возвращаемое значение:
//  Число - номер группы, от 1 до 4.
//
Функция ГруппаПоВидуОперации(ВидОперации) Экспорт
	
	Возврат Перечисления.ВидыРегламентныхОпераций.НомерГруппы(ВидОперации);
	
КонецФункции

#КонецОбласти

#КонецОбласти

// ОБЩИЕ СОГЛАШЕНИЯ

Функция ВидДокументаНачисленияЗарплаты(Организация) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		Возврат "НачислениеЗарплаты";
	Иначе
		ИспользоватьФорматОбменаЗУП25 = ПолучитьФункциональнуюОпцию(
			"ИспользоватьФорматОбменаЗУП25", 
			Новый Структура("Организация", Организация));
		Если ИспользоватьФорматОбменаЗУП25 Тогда
			Возврат "ОтражениеЗарплатыВУчете";
		Иначе
			Возврат "ОтражениеЗарплатыВБухучете";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеОперацииНачислениеЗарплаты(Организация) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		Возврат НСтр("ru = 'Начисление зарплаты'");
	Иначе
		Возврат НСтр("ru = 'Отражение зарплаты в учете'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеОперацииПерепроведениеДокументов(КодЯзыка = "") Экспорт
	
	Возврат НСтр("ru = 'Перепроведение документов'", КодЯзыка);
	
КонецФункции

Функция ПредставлениеОперацииПереносГраницы(КодЯзыка = "") Экспорт
	
	Возврат НСтр("ru = 'Перенос границы'", КодЯзыка);
	
КонецФункции

Функция ГруппаВыполняетсяПоОрганизацииВЦелом(НомерГруппы) Экспорт
	
	Возврат НомерГруппы = 2 ИЛИ НомерГруппы = 4;
	
КонецФункции

// ПОЛУЧЕНИЕ СТАТУСА ЗАКРЫТИЯ МЕСЯЦА

// Создает временную таблицу ДетальныйСтатусЗакрытияМесяца с колонками
// - Организация
// - ВидОперации
// - Требуется
// - Состояние
// - РучнаяКорректировка
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - в нем будет создана таблица
//  Период					 - Дата
//  Организация				 - СправочникСсылка.Организации - по ней строится статус
//  ОтборОрганизаций		 - Массив из СправочникСсылка.Организации - в детальный статус может потребоваться
//                                      включить операции не только по организации, переданной в Организация,
//                                      но и другие филиалы. Это может потребоваться при выполнении двух условий:
//                                      1. в структуре организации есть филиалы, выделенные на отдельный баланс
//                                      2. исходя из состава видов операций важно знать, выполнены ли предшествующие операции в каждом из филиалов.
//                                         Так, перед выполнением операций, которые выполняются по организации в целом, 
//                                         важно, чтобы предшествующие операции были выполнены в каждом из филиалов.
//                                      Определение того, требуется в ОтборОрганизаций включать всю организацию или нет, должно быть выполнено снаружи функции.
//                           - Неопределено - допускается передавать, если статус строится только по одной организации, указанной в Организация.
//  ВидыОпераций             - Массив из ПеречислениеСсылка.ВидыРегламентныхОпераций - виды операций, которые следует включить в детальный статус.
//                           - ТаблицаЗначений - см. ЗакрытиеМесяца.ВсеВидыОпераций - таблица с видами операций,
//                                               которые необходимо включить в статус, и их свойствами.
//                           - Неопределено - в детальный статус следует включить операции всех видов.
//
Процедура СоздатьДетальныйСтатусЗакрытияМесяца(
	МенеджерВременныхТаблиц, Период, Организация, Знач ОтборОрганизаций = Неопределено,
		 Знач ВидыОпераций = Неопределено) Экспорт
	
	Если ВидыОпераций = Неопределено Тогда
		ВидыОпераций = ВсеВидыОпераций();
	ИначеЕсли ТипЗнч(ВидыОпераций) = Тип("Массив") Тогда
		ВсеВидыОпераций = ВсеВидыОпераций();
		ОтборВидыОпераций = ВсеВидыОпераций.СкопироватьКолонки();
		Для Каждого СтрокаВидОперации Из ВсеВидыОпераций Цикл
			Если ВидыОпераций.Найти(СтрокаВидОперации.ВидОперации) <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ОтборВидыОпераций.Добавить(), СтрокаВидОперации);
			КонецЕсли;
		КонецЦикла;
		ВидыОпераций = ОтборВидыОпераций;
	КонецЕсли;
	
	Если ОтборОрганизаций = Неопределено Тогда
		ОтборОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	КонецЕсли;
	
	СоздатьВидыОпераций(МенеджерВременныхТаблиц, ВидыОпераций);
	
	// Получим данные об операциях, которые требуется выполнить исходя из данных учетной политики и первичных документов
	СоздатьОперацииКВыполнению(МенеджерВременныхТаблиц, ВидыОпераций, Период, Организация, ОтборОрганизаций);

	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	
	// Получим данные регламентных операций
	СоздатьДанныеРегламентныхОпераций(МенеджерВременныхТаблиц, Период, Организация, ОтборОрганизаций);
	
	// Получим все данные в одной таблице
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ОтборОрганизаций", ОтборОрганизаций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ВидыОпераций.ВидОперации КАК ВидОперации,
	|	ВидыОпераций.НомерГруппы КАК НомерГруппы,
	|	ВидыОпераций.ПоОрганизацииВЦелом КАК ПоОрганизацииВЦелом,
	|	ВидыОпераций.ДокументРегламентнаяОперация КАК ДокументРегламентнаяОперация
	|ПОМЕСТИТЬ ВсеОперации
	|ИЗ
	|	Справочник.Организации КАК Организации,
	|	ВидыОпераций КАК ВидыОпераций
	|ГДЕ
	|	НЕ ВидыОпераций.ПоОрганизацииВЦелом
	|	И Организации.Ссылка В(&ОтборОрганизаций)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&ГоловнаяОрганизация,
	|	ВидыОпераций.ВидОперации,
	|	ВидыОпераций.НомерГруппы,
	|	ВидыОпераций.ПоОрганизацииВЦелом,
	|	ВидыОпераций.ДокументРегламентнаяОперация
	|ИЗ
	|	ВидыОпераций КАК ВидыОпераций
	|ГДЕ
	|	ВидыОпераций.ПоОрганизацииВЦелом
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОперации.Организация КАК Организация,
	|	ВсеОперации.ВидОперации КАК ВидОперации,
	|	ВсеОперации.НомерГруппы КАК НомерГруппы,
	|	ВсеОперации.ПоОрганизацииВЦелом КАК ПоОрганизацииВЦелом,
	|	ВЫБОР
	|		КОГДА ОперацииКВыполнению.ВидОперации ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Требуется,
	|	ВЫБОР
	|		КОГДА ОперацииКВыполнению.ВидОперации ЕСТЬ NULL
	|				И ЕСТЬNULL(РегламентныеОперации.Ссылка, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)
	|		ИНАЧЕ ЕСТЬNULL(РегламентныеОперации.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено))
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА ВсеОперации.ДокументРегламентнаяОперация = ИСТИНА
	|			ТОГДА ЕСТЬNULL(РегламентныеОперации.РучнаяКорректировка, ЛОЖЬ)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РучнаяКорректировка,
	|	ЕСТЬNULL(РегламентныеОперации.Устарела, ЛОЖЬ) КАК Устарела,
	|	ЕСТЬNULL(РегламентныеОперации.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка
	|ПОМЕСТИТЬ ДетальныйСтатусЗакрытияМесяца
	|ИЗ
	|	ВсеОперации КАК ВсеОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРегламентныхОпераций КАК РегламентныеОперации
	|		ПО ВсеОперации.Организация = РегламентныеОперации.Организация
	|			И ВсеОперации.ВидОперации = РегламентныеОперации.ВидОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОперацииКВыполнению КАК ОперацииКВыполнению
	|		ПО ВсеОперации.Организация = ОперацииКВыполнению.Организация
	|			И ВсеОперации.ВидОперации = ОперацииКВыполнению.ВидОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации";
	
	// Если регламентная операция не требуется, то ее можем считать выполненной только тогда,
	// когда известна ссылка на регламентный документ, который ее выполнил.
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает таблицу значений с перечнем регламентных операций, 
// относящихся к предыдущим группам закрытия месяца.
//
// Структура таблицы формируется в процедуре СоздатьДетальныйСтатусЗакрытияМесяца(). 
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица со структурой, формируемой в процедуре
//					  СоздатьДетальныйСтатусЗакрытияМесяца()
//	Неопределено - если нет операций из предыдущих групп
//
Функция ДетальныйСтатусПредыдущихГрупп(Период, Организация, ВидОперации) Экспорт

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если НЕ СоздатьДетальныйСтатусПредыдущихГрупп(МенеджерВременныхТаблиц, Период, Организация, ВидОперации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДетальныйСтатусЗакрытияМесяца.Организация,
	|	ДетальныйСтатусЗакрытияМесяца.ВидОперации,
	|	ДетальныйСтатусЗакрытияМесяца.ВидОперации.Порядок КАК ПорядокВидаОперации,
	|	ДетальныйСтатусЗакрытияМесяца.НомерГруппы,
	|	ДетальныйСтатусЗакрытияМесяца.ПоОрганизацииВЦелом,
	|	ДетальныйСтатусЗакрытияМесяца.Требуется,
	|	ДетальныйСтатусЗакрытияМесяца.Состояние,
	|	ДетальныйСтатусЗакрытияМесяца.РучнаяКорректировка,
	|	ДетальныйСтатусЗакрытияМесяца.Устарела,
	|	ДетальныйСтатусЗакрытияМесяца.Ссылка
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК ДетальныйСтатусЗакрытияМесяца
	|УПОРЯДОЧИТЬ ПО
	|	НомерГруппы,
	|	ПорядокВидаОперации
	|";
		
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Функция-конструктор для параметра ОтборОпераций в СоздатьУстаревшиеОперации().
//
Функция ОтборУстаревшихОпераций() Экспорт

	ОтборОпераций = Новый Структура;
	ОтборОпераций.Вставить("Период",                          '00010101');
	ОтборОпераций.Вставить("ГоловнаяОрганизация",             Справочники.Организации.ПустаяСсылка());
	ОтборОпераций.Вставить("ВидыОпераций",                    Новый Массив);
	ОтборОпераций.Вставить("ВидыОперацийПоОрганизацииВцелом", Новый Массив);
	ОтборОпераций.Вставить("Организации",                     Новый Массив);
	Возврат ОтборОпераций;

КонецФункции // ОтборУстаревшихОпераций()

// Создаём временную таблицу УстаревшиеОперации.
//
// Параметры:
//  МенеджерВременныхТаблиц - менеджер, в котором будет создана таблица
//  ОтборОпераций - Структура - задаёт отборы для формирования операций:
//                      * Период - месяц операций
//                      * Организации - список организаций
//                      * ВидыОпераций - список видов операций
//                      * ГоловнаяОрганизация - головная организация (или сама организация, если нет головной)
//                      * ВидыОперацийПоОрганизацииВцелом - список операций, выполняемых по головной организации
//
Процедура СоздатьУстаревшиеОперации(МенеджерВременныхТаблиц, ОтборОпераций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ОтборОпераций.Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(ОтборОпераций.Период));
	Запрос.УстановитьПараметр("ВидыОпераций",  ОтборОпераций.ВидыОпераций);
	
	ОрганизацияНеИмеетФилиалов = ОтборОпераций.Организации.Количество() = 1
		И ОтборОпераций.Организации[0] = ОтборОпераций.ГоловнаяОрганизация;
	Если ОрганизацияНеИмеетФилиалов Тогда
		Запрос.УстановитьПараметр("Организация", ОтборОпераций.Организации[0]);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УстаревшиеОперации.Организация КАК Организация,
		|	УстаревшиеОперации.ВидОперации КАК ВидОперации
		|ПОМЕСТИТЬ ВТ_ДанныеРегистраУстаревшиеОперации
		|ИЗ
		|	РегистрСведений.НеактуальныеРегламентныеОперации КАК УстаревшиеОперации
		|ГДЕ
		|	УстаревшиеОперации.Организация = &Организация
		|	И УстаревшиеОперации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И УстаревшиеОперации.ВидОперации В(&ВидыОпераций)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ВидОперации";
	Иначе
		Запрос.УстановитьПараметр("Организации",         ОтборОпераций.Организации);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОтборОпераций.ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("ВидыОперацийПоОрганизацииВцелом", ОтборОпераций.ВидыОперацийПоОрганизацииВцелом);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УстаревшиеОперации.Организация КАК Организация,
		|	УстаревшиеОперации.ВидОперации КАК ВидОперации
		|ПОМЕСТИТЬ ВТ_ДанныеРегистраУстаревшиеОперации
		|ИЗ
		|	РегистрСведений.НеактуальныеРегламентныеОперации КАК УстаревшиеОперации
		|ГДЕ
		|	УстаревшиеОперации.Организация = &ГоловнаяОрганизация
		|	И УстаревшиеОперации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И УстаревшиеОперации.ВидОперации В(&ВидыОперацийПоОрганизацииВцелом)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УстаревшиеОперации.Организация,
		|	УстаревшиеОперации.ВидОперации
		|ИЗ
		|	РегистрСведений.НеактуальныеРегламентныеОперации КАК УстаревшиеОперации
		|ГДЕ
		|	УстаревшиеОперации.Организация В(&Организации)
		|	И УстаревшиеОперации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И УстаревшиеОперации.ВидОперации В(&ВидыОпераций)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ВидОперации";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УстаревшиеОперации.Организация КАК Организация,
	|	УстаревшиеОперации.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ УстаревшиеОперации
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистраУстаревшиеОперации КАК УстаревшиеОперации
	|		ПО РегламентнаяОперация.Организация = УстаревшиеОперации.Организация
	|			И РегламентнаяОперация.ВидОперации = УстаревшиеОперации.ВидОперации
	|ГДЕ
	|	НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегламентнаяОперация.ВидОперации В(&ВидыОпераций)
	|	И РегламентнаяОперация.Организация В (&ГоловнаяОрганизация, &Организации)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДанныеРегистраУстаревшиеОперации";
	
	Если ОрганизацияНеИмеетФилиалов Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "В (&ГоловнаяОрганизация, &Организации)", "= &Организация");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

// Данные о документах РегламентнаяОперация и приравненных к ним
Процедура СоздатьДанныеРегламентныхОпераций(
	МенеджерВременныхТаблиц, Период, Организация, ОтборОрганизаций) Экспорт
	
	СпискиВидовОпераций = СпискиВидовОперацийОбщийИПоОрганизацииВцелом(МенеджерВременныхТаблиц);
	
	// Создаём список операций, которые устарели
	
	ОтборОпераций = ОтборУстаревшихОпераций();
	ОтборОпераций.Период                          = Период;
	ОтборОпераций.ГоловнаяОрганизация             = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	ОтборОпераций.ВидыОпераций                    = СпискиВидовОпераций.ВидыОпераций;
	ОтборОпераций.ВидыОперацийПоОрганизацииВцелом = СпискиВидовОпераций.ПоОрганизацииВцелом;
	ОтборОпераций.Организации                     = ОтборОрганизаций;
	
	СоздатьУстаревшиеОперации(МенеджерВременныхТаблиц, ОтборОпераций);
	
	// Получаем данные регламентных операций.
	НачислениеЗарплатыОтключено         = Не ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии"); // операция никогда не нужна
	НеобходимоНачислениеЗарплаты        = Не НачислениеЗарплатыОтключено                                             // операция нужна в данный момент 
										 И ОтборОпераций.ВидыОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.НачислениеЗарплаты) <> Неопределено;
	НеобходимоНачислениеРезерваОтпусков = ОтборОпераций.ВидыОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков) <> Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода",                      НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",                       КонецМесяца(Период));
	Запрос.УстановитьПараметр("ПериодРегОперацийНДС",               НачалоКвартала(Период));
	Запрос.УстановитьПараметр("Организации",                        ОтборОпераций.Организации);
	Запрос.УстановитьПараметр("ВидыОпераций",                       ОтборОпераций.ВидыОпераций);
	Запрос.УстановитьПараметр("ВидыОперацийПоОрганизацииВцелом",    ОтборОпераций.ВидыОперацийПоОрганизацииВцелом);
	Запрос.УстановитьПараметр("НачислениеЗарплатыОтключено",        НачислениеЗарплатыОтключено);
	Запрос.УстановитьПараметр("НеобходимоНачислениеЗарплаты",       НеобходимоНачислениеЗарплаты);
	Запрос.УстановитьПараметр("НеобходимоНачислениеРезерваОтпусков",НеобходимоНачислениеРезерваОтпусков);
	Запрос.УстановитьПараметр("НедоступныеРегламентныеОперации",    Перечисления.ВидыРегламентныхОпераций.НедоступныеРегламентныеОперации());
	// Операции группы 2 и 4 следует искать у головной организации
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",                ОтборОпераций.ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.ВидОперации КАК ВидОперации,
	|	РегламентнаяОперация.Состояние КАК Состояние,
	|	РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	|	РегламентнаяОперация.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.РучнаяКорректировка
	|			ТОГДА 0
	|		ИНАЧЕ 10
	|	КОНЕЦ + ВЫБОР
	|		КОГДА РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|			ТОГДА 0
	|		КОГДА РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено)
	|			ТОГДА 1
	|		КОГДА РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ДанныеДокументовРегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегламентнаяОперация.Организация КАК Организация,
	|		РегламентнаяОперация.ВидОперации КАК ВидОперации,
	|		РегламентнаяОперация.Состояние КАК Состояние,
	|		РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	|		РегламентнаяОперация.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|	ГДЕ
	|		РегламентнаяОперация.Организация В(&Организации)
	|		И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И РегламентнаяОперация.ВидОперации В(&ВидыОпераций)
	|		И НЕ РегламентнаяОперация.ПометкаУдаления
	|		И НЕ РегламентнаяОперация.ВидОперации В (&НедоступныеРегламентныеОперации)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		РегламентнаяОперация.Организация,
	|		РегламентнаяОперация.ВидОперации,
	|		РегламентнаяОперация.Состояние,
	|		РегламентнаяОперация.РучнаяКорректировка,
	|		РегламентнаяОперация.Ссылка
	|	ИЗ
	|		Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|	ГДЕ
	|		РегламентнаяОперация.Организация = &ГоловнаяОрганизация
	|		И НЕ &ГоловнаяОрганизация В (&Организации)
	|		И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И РегламентнаяОперация.ВидОперации В(&ВидыОперацийПоОрганизацииВцелом)
	|		И НЕ РегламентнаяОперация.ПометкаУдаления) КАК РегламентнаяОперация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.ВидОперации КАК ВидОперации,
	|	МИНИМУМ(РегламентнаяОперация.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_УникальныеРегламентныеОперации
	|ИЗ
	|	ВТ_ДанныеДокументовРегламентнаяОперация КАК РегламентнаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	РегламентнаяОперация.Организация,
	|	РегламентнаяОперация.ВидОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.ВидОперации КАК ВидОперации,
	|	МАКСИМУМ(ДанныеДокументов.Состояние) КАК Состояние,
	|	МАКСИМУМ(ДанныеДокументов.РучнаяКорректировка) КАК РучнаяКорректировка,
	|	МАКСИМУМ(ДанныеДокументов.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДанныеДокументов
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегламентнаяОперация.Организация КАК Организация,
	|		РегламентнаяОперация.ВидОперации КАК ВидОперации,
	|		РегламентнаяОперация.Состояние КАК Состояние,
	|		РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	|		РегламентнаяОперация.Ссылка КАК Ссылка
	|	ИЗ
	|		ВТ_УникальныеРегламентныеОперации КАК УникальныеРегламентныеОперации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДокументовРегламентнаяОперация КАК РегламентнаяОперация
	|			ПО УникальныеРегламентныеОперации.Организация = РегламентнаяОперация.Организация
	|				И УникальныеРегламентныеОперации.ВидОперации = РегламентнаяОперация.ВидОперации
	|				И УникальныеРегламентныеОперации.Приоритет = РегламентнаяОперация.Приоритет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачислениеЗарплаты.Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеЗарплаты),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено),
	|		ИСТИНА,
	|		НачислениеЗарплаты.Ссылка
	|	ИЗ
	|		Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|	ГДЕ
	|		&НеобходимоНачислениеЗарплаты
	|		И НачислениеЗарплаты.Организация В(&Организации)
	|		И НачислениеЗарплаты.МесяцНачисления МЕЖДУ &НачалоПериода И &КонецПериода
	|		И НачислениеЗарплаты.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Организации.Ссылка,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеЗарплаты),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено),
	|		ИСТИНА,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		&НачислениеЗарплатыОтключено
	|		И Организации.Ссылка В(&Организации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Организации.Ссылка,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено),
	|		ИСТИНА,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.Ссылка В(&Организации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачислениеОценочныхОбязательствПоОтпускам.Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено),
	|		ИСТИНА,
	|		НачислениеОценочныхОбязательствПоОтпускам.Ссылка
	|	ИЗ
	|		Документ.НачислениеОценочныхОбязательствПоОтпускам КАК НачислениеОценочныхОбязательствПоОтпускам
	|	ГДЕ
	|		&НеобходимоНачислениеРезерваОтпусков
	|		И &НеобходимоНачислениеЗарплаты
	|		И НачислениеОценочныхОбязательствПоОтпускам.Организация В(&Организации)
	|		И НачислениеОценочныхОбязательствПоОтпускам.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	|		И НачислениеОценочныхОбязательствПоОтпускам.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Организации.Ссылка,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено),
	|		ИСТИНА,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		&НеобходимоНачислениеРезерваОтпусков
	|		И &НачислениеЗарплатыОтключено
	|		И Организации.Ссылка В(&Организации)) КАК ДанныеДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.ВидОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.ВидОперации КАК ВидОперации,
	|	ДанныеДокументов.Состояние КАК Состояние,
	|	ДанныеДокументов.РучнаяКорректировка КАК РучнаяКорректировка,
	|	ВЫБОР
	|		КОГДА УстаревшиеОперации.Организация ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Устарела,
	|	ДанныеДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДанныеРегламентныхОпераций
	|ИЗ
	|	ВТ_ДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ УстаревшиеОперации КАК УстаревшиеОперации
	|		ПО ДанныеДокументов.Организация = УстаревшиеОперации.Организация
	|			И ДанныеДокументов.ВидОперации = УстаревшиеОперации.ВидОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДанныеДокументовРегламентнаяОперация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДанныеДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ УстаревшиеОперации";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВидыОпераций(МенеджерВременныхТаблиц, Знач ВидыОпераций = Неопределено) Экспорт
	
	Если ВидыОпераций = Неопределено Тогда
		ВидыОпераций = ВсеВидыОпераций();
	КонецЕсли;
	
	// Поместим ВидыОпераций во временную таблицу
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОпераций.ВидОперации КАК ВидОперации,
	|	ВидыОпераций.НомерГруппы КАК НомерГруппы,
	|	ВидыОпераций.ПоОрганизацииВЦелом КАК ПоОрганизацииВЦелом,
	|	ВидыОпераций.ДокументРегламентнаяОперация КАК ДокументРегламентнаяОперация
	|ПОМЕСТИТЬ ВидыОпераций
	|ИЗ
	|	&ВидыОпераций КАК ВидыОпераций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОперации";
	Запрос.Выполнить();
	
КонецПроцедуры

// Создаёт два массива: всех видов операций и операций только по головной организации.
//
// Параметры:
//  МенеджерВременныхТаблиц - содержит таблицу ВидыОпераций с колонками
//                            * ВидОперации - ПеречислениеСсылка.ВидыРегламентныхОпераций
//                            * ПоОрганизацииВцелом - Булево
//
// Возвращаемое значение:
//   Структура   - содержит два массива видов операций:
//                  * ВидыОпераций - все, что были в колонке ВидОперации.
//                  * ПоОрганизацииВцелом - из тех строк, где ПоОрганизацииВцелом = Истина.
//
Функция СпискиВидовОперацийОбщийИПоОрганизацииВцелом(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОпераций.ВидОперации,
	|	ВидыОпераций.ПоОрганизацииВцелом
	|ИЗ
	|	ВидыОпераций КАК ВидыОпераций";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВидыОпераций = Новый Массив;
	ПоОрганизацииВцелом = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		ВидыОпераций.Добавить(Выборка.ВидОперации);
		Если Выборка.ПоОрганизацииВцелом Тогда
			ПоОрганизацииВцелом.Добавить(Выборка.ВидОперации);
		КонецЕсли;
		
	КонецЦикла;
	
	СпискиВидовОпераций = Новый Структура;
	СпискиВидовОпераций.Вставить("ВидыОпераций", ВидыОпераций);
	СпискиВидовОпераций.Вставить("ПоОрганизацииВцелом", ПоОрганизацииВцелом);
	
	Возврат СпискиВидовОпераций;
	
КонецФункции

Процедура СоздатьОперацииКВыполнению(МенеджерВременныхТаблиц, ВидыОпераций, Период, Организация, ОтборОрганизаций)
	
	Если Не ЭтоПериодВеденияУчета(Период, Организация) Тогда
		// Никакие операции не требуется выполнять, вне зависимости от учетных данных
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПустаяСсылка) КАК ВидОперации
		|ПОМЕСТИТЬ ОперацииКВыполнению
		|ГДЕ
		|	ЛОЖЬ";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	// Эти параметры могут использоваться в УсловиеВыполненияРегламентнойОперации()
	УстановитьОбщиеПараметрыЗапросовПроверкиУсловийВыполненияРегламентныхОпераций(Запрос, ОтборОрганизаций, ГоловнаяОрганизация, Период);
	
	// Ниже циклом проверим простые условия и составим тексты запросов проверки более сложнх условий
	
	ПровереныПростыеУсловия = Новый ТаблицаЗначений;
	ПровереныПростыеУсловия.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПровереныПростыеУсловия.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРегламентныхОпераций"));
	
	ЗапросыДляОбъединения = Новый Массив;
	ВременныеТаблицы      = Новый Структура;// Выполняются перед ЗапросыДляОбъединения
	
	КешУсловийОпераций = Новый Структура;
	ОднаОрганизация = ОтборОрганизаций.Количество() = 1;
	Для Каждого СтрокаВидОперации Из ВидыОпераций Цикл
		
		Условие = УсловиеВыполненияРегламентнойОперации(
			СтрокаВидОперации.ВидОперации,
			Организация, // это организация для определения учетной политики и подобных свойств, см. также ОтборОрганизаций
			Период,
			ОднаОрганизация, // если организация одна, то запрос можно выполнить оптимальнее
			КешУсловийОпераций);
		
		Если Условие = Ложь Тогда   // условие уже проверено
			
			Продолжить;
			
		ИначеЕсли Условие = Истина Тогда   // условие уже проверено

			Если СтрокаВидОперации.ПоОрганизацииВЦелом Тогда
				
				НоваяСтрока = ПровереныПростыеУсловия.Добавить();
				НоваяСтрока.Организация = ГоловнаяОрганизация;
				НоваяСтрока.ВидОперации = СтрокаВидОперации.ВидОперации;
				
			Иначе
				
				Для Каждого ТекущаяОрганизация Из ОтборОрганизаций Цикл
					
					НоваяСтрока = ПровереныПростыеУсловия.Добавить();
					НоваяСтрока.Организация = ТекущаяОрганизация;
					НоваяСтрока.ВидОперации = СтрокаВидОперации.ВидОперации;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// остальные условия проверить сложнее - нужен запрос
		
		ЗапросыДляОбъединения.Добавить(Условие.ТекстЗапроса);
		
		// Необходимо предварительно создать временную таблицу для выполнения запроса, определяющего нужна ли операция в текущем месяце.
 		Для Каждого ТекстЗапроса Из Условие.ВременныеТаблицы Цикл
			ВременныеТаблицы.Вставить(ТекстЗапроса.Ключ, ТекстЗапроса.Значение);
		КонецЦикла;
			
		// Необходимо предварительно установить параметры запроса, определяющего нужна ли операция в данном месяце.
		Для Каждого ПараметрЗапроса Из Условие.ПараметрыЗапросов Цикл
			// Ниже эти параметры модифицируются - см. БухгалтерскийУчет.РазвернутьПараметрыДоСубсчетов()
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
			
	КонецЦикла;
	
	// В УсловиеВыполненияРегламентнойОперации() можно устанавливать в качестве параметров запроса массивы предопределенных счетов
	// и использовать условие "В", а не "В ИЕРАРХИИ".
	// При выполнении запроса такие параметры дополняются субсчетами.
	// Это делается вне УсловиеВыполненияРегламентнойОперации() из соображений эффективности:
	// заменить все оптом дешевле, чем по одному.
	БухгалтерскийУчет.РазвернутьПараметрыДоСубсчетов(Запрос);
	
	// На выходе получим таблицу ОперацииКВыполнению, которая по каждой операции из ОперацииКВыполнению включает
	// результаты проверки всех условий - простых и сложных.
	// Эта таблица формируется одним запросом, состоящим из нескольких объединенных запросов.
	//
	// Прежде чем выполнять этот запрос, нужно создать для него необходимые временные таблицы,
	// в том числе, содержащую результат проверки простых условий (ОперацииКВыполнениюБезусловные).
	//
	// Все эти действия выполняем одним пакетом.
	
	ПакетЗапросов = Новый Массив;
	
	// поместим ПровереныПростыеУсловия во временную таблицу
	Запрос.УстановитьПараметр("ОперацииКВыполнению", ПровереныПростыеУсловия);
	ВременныеТаблицы.Вставить(
		"ОперацииКВыполнениюБезусловные",
		"ВЫБРАТЬ
		|	ОперацииКВыполнению.Организация,
		|	ОперацииКВыполнению.ВидОперации
		|ПОМЕСТИТЬ ОперацииКВыполнениюБезусловные
		|ИЗ
		|	&ОперацииКВыполнению КАК ОперацииКВыполнению");
	
	// включим в пакет временные таблицы, требующиеся в ЗапросыДляОбъединения
	Для Каждого ВременнаяТаблица Из ВременныеТаблицы Цикл
		ПакетЗапросов.Добавить(ВременнаяТаблица.Значение);
	КонецЦикла;
	
	// последний запрос в пакете - объединение подзапросов:
	// - первый подзапрос - уже проверенные простые условия
	// - остальные        - сложные условия
	ЗапросыДляОбъединения.Вставить(
		0,
		"ВЫБРАТЬ
		|	ОперацииКВыполнениюБезусловные.Организация КАК Организация,
		|	ОперацииКВыполнениюБезусловные.ВидОперации КАК ВидОперации
		|ПОМЕСТИТЬ ОперацииКВыполнению
		|ИЗ
		|	ОперацииКВыполнениюБезусловные КАК ОперацииКВыполнениюБезусловные");
	
	ПакетЗапросов.Добавить(СтрСоединить(ЗапросыДляОбъединения, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС));
	
	// уничтожим все временные таблицы
	Для Каждого ВременнаяТаблица Из ВременныеТаблицы Цикл
		ПакетЗапросов.Добавить("УНИЧТОЖИТЬ " + ВременнаяТаблица.Ключ);
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ПакетЗапросов, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СоздатьДетальныйСтатусПредыдущихГрупп(
	МенеджерВременныхТаблиц, Период, Организация, ВидОперации)
	
	НомерГруппы = ГруппаПоВидуОперации(ВидОперации);
	
	Если ГруппаВыполняетсяПоОрганизацииВЦелом(НомерГруппы) Тогда
		// Должны быть выполнены операции предыдущих групп по всем организациям
		ОтборОрганизаций = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(Организация);
	Иначе
		ОтборОрганизаций = Новый Массив;
		ОтборОрганизаций.Добавить(Организация);
	КонецЕсли;
		
	// Отберем операции предыдущих групп
	ВсеВидыОпераций = ВсеВидыОпераций();
	ВидыОпераций = ВсеВидыОпераций.СкопироватьКолонки();
	Для Каждого ОписаниеВидОперации Из ВсеВидыОпераций Цикл
		Если ОписаниеВидОперации.НомерГруппы < НомерГруппы Тогда
			ЗаполнитьЗначенияСвойств(ВидыОпераций.Добавить(), ОписаниеВидОперации);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидыОпераций.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СоздатьДетальныйСтатусЗакрытияМесяца(
		МенеджерВременныхТаблиц,
		Период,
		Организация,
		ОтборОрганизаций,
		ВидыОпераций);
		
	Возврат Истина;
		
КонецФункции

// УСЛОВИЯ ВЫПОЛНЕНИЯ РЕГЛАМЕНТНЫХ ОПЕРАЦИЙ

// Определяет условия, надо ли выполнять регламентную операцию:
// - либо сразу проверяет (если условие простое для проверки)
// - либо возвращает описание запроса, с помощью которого можно проверить.
//
// При этом в описании запроса могут быть использованы
// - параметры, определяемые как внутри этой функции, так и в 
//   УстановитьОбщиеПараметрыЗапросовПроверкиУсловийВыполненияРегламентныхОпераций().
//   При этом допускается устанавливать в качестве параметров запроса массивы предопределенных счетов
//   и использовать для них условия "В", а не "В ИЕРАРХИИ".
//   Имена таких параметров должны начинаться со слова "Счета"
//   При выполнении запроса такие параметры будут дополнены субсчетами - см. БухгалтерскийУчет.РазвернутьПараметрыДоСубсчетов()
// - временные таблицы, определяемые внутри этой функции. 
//   При этом одна и та же временная таблица может использоваться для проверки разных условий.
//   Для этого она должна быть определена для всех таких условий.
//
// Параметры:
//  ВидОперации - ПеречислениеСсылка.ВидыРегламентныхОпераций
//  Организации - СправочникСсылка.Организации
//  Период      - Дата - любая дата из закрываемого месяца
//  ОднаОрганизация - Булево - Истина, если запросы строятся заведомо по одной организации; позволяет оптимизировать выполнение запросов
//  КешНастроек - Структура - следует передавать пустую структуру; используется внутри УсловиеВыполненияРегламентнойОперации для оптимизации.
//
// Возвращаемое значение:
//               - Истина, если операцию следует выполнить
//               - Ложь, если операцию не надо выполнять
//               - Структура - см. НовыйСложноеУсловиеВыполненияРегламентнойОперации()
//
Функция УсловиеВыполненияРегламентнойОперации(ВидОперации, Организация, Период, ОднаОрганизация, КешНастроек)
	
	// "Простые" условия (Истина и Ложь) возвращаем сразу,
	// сложное (структуру) - в конце функции
	
	Периодичность = ПериодичностьРегламентнойОперации(ВидОперации);
	Если Периодичность = Перечисления.Периодичность.Квартал
		И Месяц(Период)%3 <> 0 Тогда
		Возврат Ложь;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год
		И Месяц(Период) <> 12 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СложноеУсловие = НовыйСложноеУсловиеВыполненияРегламентнойОперации();
	
	// ГРУППА 1
	
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеЗарплаты Тогда
		
		Если Не ЗначениеНастройки(КешНастроек, "ИспользуетсяПодсистемаУчетаЗарплатыИКадров") Тогда
			Возврат Ложь;
		Иначе
			Возврат Не ЗначениеНастройки(КешНастроек, "УчетЗарплатыИКадровСредствамиБухгалтерии") 
				Или ЗначениеНастройки(КешНастроек, "НеобходимоНачислятьЗарплату", Организация, Период, Периодичность);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков Тогда
		
		Если НЕ ЗначениеНастройки(КешНастроек, "ИспользуетсяПодсистемаУчетаЗарплатыИКадров") Тогда
			Возврат Ложь;
		Иначе
			Возврат ЗначениеНастройки(КешНастроек, "ВедетсяУчетРезервовОтпусков", Организация, Период, Периодичность);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеНДС Тогда
		
		// Периодичность задана в ПериодичностьРегламентнойОперации()
		
		Возврат ЗначениеНастройки(КешНастроек, "СистемаНалогообложенияОбщая", Организация, Период, Периодичность);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияИИзносОС Тогда
		
		Если Не ЗначениеНастройки(КешНастроек, "ВедетсяУчетОсновныхСредств") Тогда
			Возврат Ложь;
		КонецЕсли;
				
		СчетаОсновныхСредств = Новый Массив;
		СчетаОсновныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);     // 01
		СчетаОсновныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ); // 03
		СложноеУсловие.ПараметрыЗапросов.Вставить("СчетаОсновныхСредств", СчетаОсновныхСредств);
		
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АмортизацияОС.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияИИзносОС)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В (&СчетаОсновныхСредств), , Организация В (&Организации)) КАК АмортизацияОС
		|ГДЕ
		|	(АмортизацияОС.СуммаОстаток <> 0
		|			ИЛИ АмортизацияОС.СуммаНУОстаток <> 0)";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей Тогда
		
		Если Не ЗначениеНастройки(КешНастроек, "ПлательщикНалогаНаПрибыль", Организация, Период, Периодичность)
		 Или Не ЗначениеНастройки(КешНастроек, "ВедетсяУчетОсновныхСредств") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СчетаЛизинговыхПлатежей = Новый Массив;
		СчетаЛизинговыхПлатежей.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательства);    // 76.07.1
		СчетаЛизинговыхПлатежей.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал); // 76.27.1
		СчетаЛизинговыхПлатежей.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ);  // 76.37.1
		СложноеУсловие.ПараметрыЗапросов.Вставить("СчетаЛизинговыхПлатежей", СчетаЛизинговыхПлатежей);
		
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сводный.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей)
		|ИЗ
		|	(ВЫБРАТЬ
		|		АрендныеОбязательства.Организация КАК Организация
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В (&СчетаЛизинговыхПлатежей), , Организация В (&Организации)) КАК АрендныеОбязательства
		|	ГДЕ
		|		АрендныеОбязательства.СуммаОстаток <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		АрендныеОбязательства.Организация
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериодаВключительно, Счет В (&СчетаЛизинговыхПлатежей), , Организация В (&Организации)) КАК АрендныеОбязательства
		|	ГДЕ
		|		АрендныеОбязательства.СуммаОстаток <> 0) КАК Сводный";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР Тогда
		
		Если Не ЗначениеНастройки(КешНастроек, "ВедетсяУчетНМА") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СчетаНематериальныхАктивов = Новый Массив;
		СчетаНематериальныхАктивов.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);             // 04
		СчетаНематериальныхАктивов.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов); // 05
		
		СложноеУсловие.ПараметрыЗапросов.Вставить("СчетаНематериальныхАктивов", СчетаНематериальныхАктивов);
		
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сводный.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР)
		|ИЗ
		|	(ВЫБРАТЬ
		|		АмортизацияНМА.Организация КАК Организация
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В (&СчетаНематериальныхАктивов), , Организация В (&Организации)) КАК АмортизацияНМА
		|	ГДЕ
		|		АмортизацияНМА.СуммаОстаток <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		АмортизацияНМА.Организация
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В (&СчетаНематериальныхАктивов), , Организация В (&Организации)) КАК АмортизацияНМА
		|	ГДЕ
		|		АмортизацияНМА.СуммаНУОстаток <> 0) КАК Сводный";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВЭксплуатации Тогда
		
		Если Не ЗначениеНастройки(КешНастроек, "ВедетсяУчетСпецодеждыСпецоснастки") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СчетаСпецодежды = Новый Массив;
		СчетаСпецодежды.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе);      // 10.10
		СчетаСпецодежды.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации); // 10.11
		
		СложноеУсловие.ПараметрыЗапросов.Вставить("СчетаСпецодежды", СчетаСпецодежды);
		
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПогашениеСтоимостиСпецодежды.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВЭксплуатации)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В (&СчетаСпецодежды), , Организация В (&Организации)) КАК ПогашениеСтоимостиСпецодежды
		|ГДЕ
		|	ПогашениеСтоимостиСпецодежды.СуммаОстаток <> 0";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредств Тогда
		
		Если Не ЗначениеНастройки(КешНастроек, "ИспользоватьВалютныйУчет") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Подзапрос дает нам информацию о наличии валютных остатков с детализацией до субконто, хотя в целом по всем валютным
		// счетам организации остаток может быть нулевым.
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПереоценкаВалютныхСредств.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредств)
		|ИЗ
		|	(ВЫБРАТЬ
		|		Остатки.Организация КАК Организация,
		|		Остатки.Счет КАК Счет,
		|		Остатки.Подразделение КАК Подразделение,
		|		Остатки.Субконто1 КАК Субконто1,
		|		Остатки.Субконто2 КАК Субконто2,
		|		Остатки.Субконто3 КАК Субконто3,
		|		Остатки.СуммаОстатокДт КАК СуммаОстатокДт,
		|		Остатки.СуммаОстатокКт КАК СуммаОстатокКт
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериодаВключительно, Счет.Валютный, , Организация В (&Организации)) КАК Остатки) КАК ПереоценкаВалютныхСредств";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТорговойНаценкиПоПроданнымТоварам Тогда
		
		СчетаТоварыВРозничнойТорговле = Новый Массив;
		СчетаТоварыВРозничнойТорговле.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);   // 41.11
		СчетаТоварыВРозничнойТорговле.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);   // 41.12
		СложноеУсловие.ПараметрыЗапросов.Вставить("СчетаТоварыВРозничнойТорговле", СчетаТоварыВРозничнойТорговле);
		
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХозрасчетныйОбороты.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетТорговойНаценкиПоПроданнымТоварам)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В (&СчетаТоварыВРозничнойТорговле), , Организация В (&Организации), , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.СуммаОборотКт <> 0";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета97 Тогда
		
		СчетаРасходыБудущихПериодов = БухгалтерскийУчет.СчетаУчетаРасходовБудущихПериодов();
		
		СложноеУсловие.ПараметрыЗапросов.Вставить("СчетаРасходыБудущихПериодов", СчетаРасходыБудущихПериодов);
		СложноеУсловие.ПараметрыЗапросов.Вставить("СтатьиУбытковПрошлыхЛет",     ЗначениеНастройки(КешНастроек, "СтатьиУбытковПрошлыхЛет"));
		
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗакрытиеСчета97.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчета97)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			,
		|			Счет В (&СчетаРасходыБудущихПериодов),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов),
		|			Организация В (&Организации)
		|				И НЕ Субконто1 В (&СтатьиУбытковПрошлыхЛет)) КАК ЗакрытиеСчета97
		|ГДЕ
		|	НЕ(ЗакрытиеСчета97.СуммаКонечныйОстатокДт = 0
		|				И ЗакрытиеСчета97.СуммаНУКонечныйОстатокДт = 0
		|				И ЗакрытиеСчета97.СуммаПРКонечныйОстатокДт = 0
		|				И ЗакрытиеСчета97.СуммаОборотКт = 0
		|				И ЗакрытиеСчета97.СуммаНУОборотКт = 0
		|				И ЗакрытиеСчета97.СуммаПРОборотКт = 0)";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры Тогда
		
		Возврат Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество Тогда
		
		Если Период < '20140101'
		 Или Не ЗначениеНастройки(КешНастроек, "ВедетсяУчетОсновныхСредств") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОСНО = ЗначениеНастройки(КешНастроек, "СистемаНалогообложенияОбщая", Организация, Период, Периодичность);
		
		Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		 Или Не ОСНО И Период < '20140701'
		 Или Месяц(Период)%3 <> 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Месяц(Период) <> 12 И Месяц(Период)%3 = 0 Тогда
			Если ОднаОрганизация Тогда
				ИмяНастройки = "ОрганизацииУплачивающиеАвансыПоНалогуНаИмуществоОднаОрганизация";
			Иначе
				ИмяНастройки = "ОрганизацииУплачивающиеАвансыПоНалогуНаИмущество";
			КонецЕсли;
			ОрганизацииУплачивающиеАвансыПоНалогуНаИмущество = ЗначениеНастройки(КешНастроек, ИмяНастройки, Организация, Период, Периодичность);
				
			Если ОрганизацииУплачивающиеАвансыПоНалогуНаИмущество.Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ОСНО Тогда
			
			СчетаОсновныхСредств = Новый Массив;
			СчетаОсновныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);     // 01
			СчетаОсновныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ); // 03
			
			СложноеУсловие.ПараметрыЗапросов.Вставить("СчетаОсновныхСредств", СчетаОсновныхСредств);
			
			// Используется начало календарного года, потому что налог на имущество рассчитывается за календарный год
			// вне зависимости от даты регистрации организации.
			СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сводный.Организация,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество)
			|ИЗ
			|	(ВЫБРАТЬ
			|		АмортизацияОС.Организация КАК Организация
			|	ИЗ
			|		РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоКалендарногоГода, Счет В (&СчетаОсновныхСредств), , Организация В (&Организации)) КАК АмортизацияОС
			|	ГДЕ
			|		АмортизацияОС.СуммаОстаток <> 0
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ХозрасчетныйОбороты.Организация
			|	ИЗ
			|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоКалендарногоГода, &КонецПериода, , Счет В (&СчетаОсновныхСредств), , Организация В (&Организации), , ) КАК ХозрасчетныйОбороты
			|	ГДЕ
			|		ХозрасчетныйОбороты.СуммаОборот <> 0
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.Организация
			|	ИЗ
			|		РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.СрезПоследних(
			|				&КонецПериода,
			|				Организация В (&Организации)
			|					И НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних) КАК Сводный";
				
		Иначе
			
			СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.Организация,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество)
			|ИЗ
			|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.СрезПоследних(
			|			&КонецПериода,
			|			Организация В (&Организации)
			|				И НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних";
			
		КонецЕсли;
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
		Если Месяц(Период) <> 12 И Месяц(Период)%3 = 0 Тогда
			СложноеУсловие.ТекстЗапроса = СтрЗаменить(СложноеУсловие.ТекстЗапроса, "&Организации", "&ОрганизацииУплачивающиеАвансыПоНалогуНаИмущество");	
			СложноеУсловие.ПараметрыЗапросов.Вставить(
				"ОрганизацииУплачивающиеАвансыПоНалогуНаИмущество", ОрганизацииУплачивающиеАвансыПоНалогуНаИмущество);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТранспортногоНалога Тогда
		
		Если Период < '20140101'
		 Или Не ЗначениеНастройки(КешНастроек, "ВедетсяУчетОсновныхСредств")
		 Или НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Месяц(Период) = 12 Тогда
			РасчетЗаГод = Истина;
		ИначеЕсли Месяц(Период)%3 = 0 Тогда
			РасчетЗаГод = Ложь;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		Если Месяц(Период) <> 12 И Месяц(Период)%3 = 0 Тогда
			Если ОднаОрганизация Тогда
				ИмяНастройки = "ОрганизацииУплачивающиеАвансыПоТранспортномуНалогуОднаОрганизация";
			Иначе
				ИмяНастройки = "ОрганизацииУплачивающиеАвансыПоТранспортномуНалогу";
			КонецЕсли;
			ОрганизацииУплачивающиеАвансыПоТранспортномуНалогу = ЗначениеНастройки(КешНастроек, ИмяНастройки, Организация, Период, Периодичность);
				
			Если ОрганизацииУплачивающиеАвансыПоТранспортномуНалогу.Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сводный.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетТранспортногоНалога)
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РегистрацияТранспортныхСредствСрезПоследних.Организация КАК Организация
		|	ИЗ
		|		РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(
		|				&ДоНачалаПериодаРасчетаТранспортногоНалога,
		|				Организация В (&Организации)
		|					И ВключатьВНалоговуюБазу) КАК РегистрацияТранспортныхСредствСрезПоследних
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РегистрацияТранспортныхСредств.Организация
		|	ИЗ
		|		РегистрСведений.РегистрацияТранспортныхСредств КАК РегистрацияТранспортныхСредств
		|	ГДЕ
		|		РегистрацияТранспортныхСредств.ВключатьВНалоговуюБазу
		|		И РегистрацияТранспортныхСредств.Период МЕЖДУ &НачалоПериодаРасчетаТранспортногоНалога И &КонецПериода
		|		И РегистрацияТранспортныхСредств.Организация В(&Организации)) КАК Сводный";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
		НачалоПериодаРасчетаТранспортногоНалога = ?(РасчетЗаГод, НачалоГода(Период), НачалоКвартала(Период));
		СложноеУсловие.ПараметрыЗапросов.Вставить("НачалоПериодаРасчетаТранспортногоНалога", НачалоПериодаРасчетаТранспортногоНалога);
		СложноеУсловие.ПараметрыЗапросов.Вставить("ДоНачалаПериодаРасчетаТранспортногоНалога", НачалоПериодаРасчетаТранспортногоНалога - 1);
		
		Если Месяц(Период) <> 12 И Месяц(Период)%3 = 0 Тогда
			СложноеУсловие.ТекстЗапроса = СтрЗаменить(СложноеУсловие.ТекстЗапроса, "&Организации", "&ОрганизацииУплачивающиеАвансыПоТранспортномуНалогу");	
			СложноеУсловие.ПараметрыЗапросов.Вставить(
				"ОрганизацииУплачивающиеАвансыПоТранспортномуНалогу", ОрганизацииУплачивающиеАвансыПоТранспортномуНалогу);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетЗемельногоНалога Тогда
		
		Если Не ЗначениеНастройки(КешНастроек, "ВедетсяУчетОсновныхСредств")
		 Или Период < '20140101'
		 Или Период >= '20150101' И НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если Месяц(Период) = 12 Тогда
			РасчетЗаГод = Истина;
		ИначеЕсли Месяц(Период)%3 = 0 Тогда
			РасчетЗаГод = Ложь;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		Если Месяц(Период) <> 12 И Месяц(Период)%3 = 0 Тогда
			Если ОднаОрганизация Тогда
				ИмяНастройки = "ОрганизацииУплачивающиеАвансыПоЗемельномуНалогуОднаОрганизация";
			Иначе
				ИмяНастройки = "ОрганизацииУплачивающиеАвансыПоЗемельномуНалогу";
			КонецЕсли;
			ОрганизацииУплачивающиеАвансыПоЗемельномуНалогу = ЗначениеНастройки(КешНастроек, ИмяНастройки, Организация, Период, Периодичность);
				
			Если ОрганизацииУплачивающиеАвансыПоЗемельномуНалогу.Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сводный.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетЗемельногоНалога)
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РегистрацияЗемельныхУчастковСрезПоследних.Организация КАК Организация
		|	ИЗ
		|		РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(
		|				&ДоНачалаПериодаРасчетаЗемельногоНалога,
		|				Организация В (&Организации)
		|					И ВключатьВНалоговуюБазу) КАК РегистрацияЗемельныхУчастковСрезПоследних
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РегистрацияЗемельныхУчастков.Организация
		|	ИЗ
		|		РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
		|	ГДЕ
		|		РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу
		|		И РегистрацияЗемельныхУчастков.Период МЕЖДУ &НачалоПериодаРасчетаЗемельногоНалога И &КонецПериода
		|		И РегистрацияЗемельныхУчастков.Организация В(&Организации)) КАК Сводный";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
		НачалоПериодаРасчетаЗемельногоНалога = ?(РасчетЗаГод, НачалоГода(Период), НачалоКвартала(Период));
		СложноеУсловие.ПараметрыЗапросов.Вставить("НачалоПериодаРасчетаЗемельногоНалога", НачалоПериодаРасчетаЗемельногоНалога);
		СложноеУсловие.ПараметрыЗапросов.Вставить("ДоНачалаПериодаРасчетаЗемельногоНалога", НачалоПериодаРасчетаЗемельногоНалога - 1);
		
		Если Месяц(Период) <> 12 И Месяц(Период)%3 = 0 Тогда
			СложноеУсловие.ТекстЗапроса = СтрЗаменить(СложноеУсловие.ТекстЗапроса, "&Организации", "&ОрганизацииУплачивающиеАвансыПоЗемельномуНалогу");	
			СложноеУсловие.ПараметрыЗапросов.Вставить(
				"ОрганизацииУплачивающиеАвансыПоЗемельномуНалогу", ОрганизацииУплачивающиеАвансыПоЗемельномуНалогу);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ИсключениеНЗПИзСоставаМатериальныхРасходовДляУСН Тогда
		
		Возврат ЗначениеНастройки(КешНастроек, "УСНДоходыМинусРасходы", Организация, Период, Периодичность)
			И (УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Организация, Период) = Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеОСДляУСН Тогда
		
		// Периодичность задана в ПериодичностьРегламентнойОперации()
		
		Если НЕ ЗначениеНастройки(КешНастроек, "УСНДоходыМинусРасходыНаКонецПериода", Организация, Период, Периодичность)
			ИЛИ ЗначениеНастройки(КешНастроек, "НалоговыйПериодУСНПропущен", Организация, Период, Периодичность) Тогда
			Возврат Ложь;
		КонецЕсли;

		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОСНалоговыйУчетУСН.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеОСДляУСН)
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(&КонецПериода, Организация В (&Организации)) КАК ОСНалоговыйУчетУСН
		|ГДЕ
		|	ОСНалоговыйУчетУСН.Активность";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеНМАДляУСН Тогда
		
		// Периодичность задана в ПериодичностьРегламентнойОперации()
		
		Если НЕ ЗначениеНастройки(КешНастроек, "УСНДоходыМинусРасходыНаКонецПериода", Организация, Период, Периодичность)
			ИЛИ ЗначениеНастройки(КешНастроек, "НалоговыйПериодУСНПропущен", Организация, Период, Периодичность) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НМАНалоговыйУчетУСН.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеНМАДляУСН)
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчетУСН.СрезПоследних(&КонецПериода, Организация В (&Организации)) КАК НМАНалоговыйУчетУСН
		|ГДЕ
		|	НМАНалоговыйУчетУСН.Активность";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН Тогда
		
		// Периодичность задана в ПериодичностьРегламентнойОперации()
		
		Если НЕ ЗначениеНастройки(КешНастроек, "УСНДоходыМинусРасходы", Организация, Период, Периодичность)
			ИЛИ ЗначениеНастройки(КешНастроек, "НалоговыйПериодУСНПропущен", Организация, Период, Периодичность) Тогда
			Возврат Ложь;
		КонецЕсли;
			
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходыПриУСН.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН)
		|ИЗ
		|	РегистрНакопления.РасходыПриУСН.Остатки(
		|			&КонецПериодаВключительно,
		|			Организация В (&Организации)
		|				И ВидРасхода = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходы)) КАК РасходыПриУСН
		|ГДЕ
		|	РасходыПриУСН.СуммаОстаток <> 0";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеТаможенныхПлатежейДляУСН Тогда
		
		// Периодичность задана в ПериодичностьРегламентнойОперации()
		
		Если НЕ ЗначениеНастройки(КешНастроек, "УСНДоходыМинусРасходы", Организация, Период, Периодичность)
			ИЛИ ЗначениеНастройки(КешНастроек, "НалоговыйПериодУСНПропущен", Организация, Период, Периодичность) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходыПриУСН.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.СписаниеТаможенныхПлатежейДляУСН)
		|ИЗ
		|	РегистрНакопления.РасходыПриУСН.Остатки(
		|			&КонецПериодаВключительно,
		|			Организация В (&Организации)
		|				И ВидРасхода = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежи)) КАК РасходыПриУСН
		|ГДЕ
		|	РасходыПриУСН.СуммаОстаток <> 0";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТорговогоСбора Тогда
		
		Возврат ЗначениеНастройки(КешНастроек, "ПлательщикТорговогоСбораЗаПериод", Организация, Период, Периодичность);
		
	// ГРУППА 2
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда
		
		Возврат Истина;
		
	// ГРУППА 3
	
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		
		Если ЗначениеНастройки(КешНастроек, "ТребуетсяРасчетСебестоимости", Организация, Период, Периодичность) Тогда
			Возврат Истина;
		КонецЕсли;
		
		СложноеУсловие.ПараметрыЗапросов.Вставить("СчетаЗатратПоОсновнойДеятельности", УчетЗатрат.ПредопределенныеСчетаРасходов());
		
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Хозрасчетный.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Организация В(&Организации)
		|	И Хозрасчетный.СчетДт В(&СчетаЗатратПоОсновнойДеятельности)
		|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Хозрасчетный.Активность
		|	И (Хозрасчетный.Сумма <> 0
		|			ИЛИ Хозрасчетный.СуммаНУДт <> 0)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Хозрасчетный.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Организация В(&Организации)
		|	И Хозрасчетный.СчетКт В(&СчетаЗатратПоОсновнойДеятельности)
		|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Хозрасчетный.Активность
		|	И (Хозрасчетный.Сумма <> 0
		|			ИЛИ Хозрасчетный.СуммаНУКт <> 0)";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		
		Возврат Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРезервовПоСомнительнымДолгам Тогда
		
		 Возврат ЗначениеНастройки(КешНастроек, "ФормироватьРезервыПоСомнительнымДолгам", Организация, Период, Периодичность);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН Тогда
		
		// Периодичность задана в ПериодичностьРегламентнойОперации()
		
		Если НЕ ЗначениеНастройки(КешНастроек, "УСНДоходыМинусРасходы", Организация, Период, Периодичность) Тогда
			Возврат Ложь;
			
		ИначеЕсли НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
			И ЗначениеНастройки(КешНастроек, "ПлательщикЕНВД", Организация, Период, Периодичность) Тогда
			// У ИП на УСН страховые взносы начисляются ежеквартально. При совмещении с ЕНВД возникают распределяемые расходы.
			Возврат Истина;
			
		КонецЕсли;
		
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходыПриУСН.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН)
		|ИЗ
		|	РегистрНакопления.РасходыПриУСН.Остатки(
		|			&КонецПериодаВключительно,
		|			Организация В (&Организации)
		|				И СтатусыОплатыРасходовУСН = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходовУСН.НеРаспределено)) КАК РасходыПриУСН
		|ГДЕ
		|	РасходыПриУСН.СуммаОстаток <> 0";
		
		Если НачалоГода(Период) <> НачалоКвартала(Период)
			И ЗначениеНастройки(КешНастроек, "МетодРаспределенияРасходовУСН", Организация, Период, Периодичность) = Перечисления.МетодыРаспределенияРасходовУСНПоВидамДеятельности.НарастающимИтогомСНачалаГода Тогда
			
			// При распределении расходов нарастающим итогом с начала года требуется скорректировать распределение предыдущих кварталов,
			// даже если в текущем квартале распределяемые расходы не регистрировались.
			ОписаниеНалоговогоПериода = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
				Организация,
				Период,
				Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре);
				
			КонецПредыдущегоКвартала = НачалоКвартала(Период) - 1;
			
			Если ОписаниеНалоговогоПериода.Начало < КонецПредыдущегоКвартала Тогда
				
				СложноеУсловие.ПараметрыЗапросов.Вставить("НачалоНалоговогоПериода",  ОписаниеНалоговогоПериода.Начало);
				СложноеУсловие.ПараметрыЗапросов.Вставить("КонецПредыдущегоКвартала", КонецПредыдущегоКвартала);
				СложноеУсловие.ТекстЗапроса = СложноеУсловие.ТекстЗапроса +
				"
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	РегламентнаяОперация.Организация,
				|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН)
				|ИЗ
				|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
				|ГДЕ
				|	НЕ РегламентнаяОперация.ПометкаУдаления
				|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоНалоговогоПериода И &КонецПредыдущегоКвартала
				|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН)
				|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)"
				;
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляИП Тогда
		
		Возврат ЗначениеНастройки(КешНастроек, "ПлательщикНДФЛ", Организация, Период, Периодичность);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП
		И Период < УчетДоходовИРасходовПредпринимателя.НачалоВключенияАвансовПокупателейВДоходыПоквартально() Тогда
		
		ДатаИзменения = Неопределено;
		ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Организация, КонецМесяца(Период), ДатаИзменения);
		Если Не ПлательщикНДФЛ И ДатаИзменения >= НачалоМесяца(Период) Тогда // Перестал платить НДФЛ раньше текущего периода
			ПлательщикНДФЛвПрошлом = УчетнаяПолитика.ПлательщикНДФЛ(Организация, НачалоДня(ДатаИзменения) - 1);
		Иначе
			ПлательщикНДФЛвПрошлом = ПлательщикНДФЛ;
		КонецЕсли;
		
		Если Не ПлательщикНДФЛ И Не ПлательщикНДФЛвПрошлом Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НалоговыйПериод = УчетДоходовИРасходовПредпринимателя.НалоговыйПериод(Организация, Период);
		
		Если ПлательщикНДФЛвПрошлом И Не ПлательщикНДФЛ Тогда // Изменился статус плательщика в текущем периоде
			Если (НачалоДня(ДатаИзменения) = НалоговыйПериод.Начало) Тогда
				// Если прекращено применение ОСНО с начала года, выполнять операцию не нужно,
				// все авансы уже включили в доходы в конце прошлого года
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат (КонецМесяца(Период) = НалоговыйПериод.Конец); // В конце налогового периода
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП Тогда
		
		Если НачалоДня(Период) >= УчетСтраховыхВзносовИП.ДатаНачалаУчетаСтраховыхВзносовИП()
			И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
			
			Если УчетСтраховыхВзносовИП.ПериодичностьНачисления(Организация, Период) = Перечисления.Периодичность.Квартал Тогда
				Возврат (Месяц(Период)%3 = 0) // Раз в квартал
					И УчетнаяПолитика.ПлательщикФиксированныхВзносовЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период))
			Иначе
				Возврат (Месяц(Период) = 12)
					И УчетнаяПолитика.ПлательщикФиксированныхВзносовЗаПериод(Организация, НачалоГода(Период), КонецГода(Период));
			КонецЕсли;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги Тогда
		
		// периодичность задана в ПериодичностьРегламентнойОперации()
		Возврат ЗначениеНастройки(КешНастроек, "УСНДоходы", Организация, Период, Периодичность)
			Или (Период >= УчетЕНВД.ДатаНачалаПоддержкиЕНВД()
				И ЗначениеНастройки(КешНастроек, "ПлательщикЕНВД", Организация, Период, Периодичность))
			Или (Период >= УчетПСНКлиентСервер.ДатаНачалаУменьшенияПСННаСтраховыеВзносы()
				И ЗначениеНастройки(КешНастроек, "ПрименяетсяПСН", Организация, Период, Периодичность))
			Или УчетЕНВД.РасходыПериодаУменьшаютЕНВДПослеОтмены(Организация, Период);
		
	// ГРУППА 4
	
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91 Тогда
		
		Возврат Истина;
	
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
		
		Возврат ЗначениеНастройки(КешНастроек, "ПлательщикНалогаНаПрибыль", Организация, Период, Периодичность);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетОтложенногоНалога Тогда
		
		Если Не ЗначениеНастройки(КешНастроек, "ПлательщикНалогаНаПрибыль", Организация, Период, Периодичность) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ВариантУчетаОтложенногоНалога = НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(Период, Организация);
		
		Возврат Перечисления.ВариантыУчетаОтложенногоНалога.ЭтоБалансовыйМетод(ВариантУчетаОтложенногоНалога);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН Тогда
		
		Возврат ЗначениеНастройки(КешНастроек, "ПрименяетсяУСН", Организация, Период, Периодичность)
			И НЕ ЗначениеНастройки(КешНастроек, "НалоговыйПериодУСНПропущен", Организация, Период, Периодичность); // Периодичность задана в ПериодичностьРегламентнойОперации()
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД Тогда
		
		Возврат Период >= УчетЕНВД.ДатаНачалаПоддержкиЕНВД()
				И ЗначениеНастройки(КешНастроек, "ПлательщикЕНВД", Организация, Период, Периодичность)
			Или УчетЕНВД.РасходыПериодаУменьшаютЕНВДПослеОтмены(Организация, Период); // Периодичность задана в ПериодичностьРегламентнойОперации()
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНДФЛДляИП
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП
		И Период >= УчетДоходовИРасходовПредпринимателя.НачалоВключенияАвансовПокупателейВДоходыПоквартально() Тогда
		
		Возврат ЗначениеНастройки(КешНастроек, "ПлательщикНДФЛ", Организация, Период, Периодичность); // Периодичность задана в ПериодичностьРегламентнойОперации()
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет Тогда
		
		Если НЕ ЗначениеНастройки(КешНастроек, "ПлательщикНалогаНаПрибыль", Организация, Период, Периодичность) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СчетаРасходыБудущихПериодов = БухгалтерскийУчет.СчетаУчетаРасходовБудущихПериодов();
		
		СложноеУсловие.ПараметрыЗапросов.Вставить("СчетаРасходыБудущихПериодов", СчетаРасходыБудущихПериодов);
		СложноеУсловие.ПараметрыЗапросов.Вставить("СтатьиУбытковПрошлыхЛет",     ЗначениеНастройки(КешНастроек, "СтатьиУбытковПрошлыхЛет"));
		
		// Различия между началом календарного года и налогового периода несущественны,
		// потому что за годы, предшествующие году создания организации, никаких убытков быть не должно
		// (а если они ошибочно отражены, то правильнее их списать).
		СложноеУсловие.ТекстЗапроса = // Текст запроса может быть модифицирован - см. ОптимизироватьЗапросДляОднойОрганизации
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХозрасчетныйОстатки.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&НачалоКалендарногоГода,
		|			Счет В (&СчетаРасходыБудущихПериодов),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов),
		|			Организация = &ГоловнаяОрганизация
		|				И Субконто1 В (&СтатьиУбытковПрошлыхЛет)) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаНУОстатокДт > 0";
		
		ОптимизироватьЗапросДляОднойОрганизации(СложноеУсловие.ТекстЗапроса, ОднаОрганизация);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ОбесценениеЗапасов Тогда
		
		Возврат УчетнаяПолитика.ОбесценениеЗапасов(Организация, Период);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса Тогда
		
		Возврат Истина; // Периодичность задана в ПериодичностьРегламентнойОперации()
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Вернем сложное условие
	Возврат СложноеУсловие;
	
КонецФункции // УсловиеВыполненияРегламентнойОперации()

// Возвращаемое значение:
//   - Структура - Содержит описание запроса, который позволет понять, надо выполнять конкретную регламентную операцию или нет.
//     Состав и описание свойств см. в коде функции.
Функция НовыйСложноеУсловиеВыполненияРегламентнойОперации()
	
	ОписаниеУсловия = Новый Структура;
	ОписаниеУсловия.Вставить("ТекстЗапроса",      ""); // выбирает два поля: Организация и ВидОперации (именно в таком порядке, чтобы можно было объединять)
	ОписаниеУсловия.Вставить("ВременныеТаблицы",  Новый Структура); // ключ = имя таблицы, значение = тексты запросов, создающих временные таблицы для ТекстЗапроса.
	ОписаниеУсловия.Вставить("ПараметрыЗапросов", Новый Структура); // ключ = имя параметра, значение = параметры для ТекстЗапроса.
	
	Возврат ОписаниеУсловия;
	
КонецФункции

Процедура УстановитьОбщиеПараметрыЗапросовПроверкиУсловийВыполненияРегламентныхОпераций(Запрос, Организации, ГоловнаяОрганизация, Период)
	
	Запрос.УстановитьПараметр("Организации",              Организации);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",      ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("НачалоПериода",            НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",             КонецМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериодаВключительно", Новый Граница(КонецМесяца(Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоКалендарногоГода",   НачалоГода(Период));
	
КонецПроцедуры

// Запросы в УсловиеВыполненияРегламентнойОперации() всегда выбирают перечень организаций и могут использовать ВЫБРАТЬ РАЗЛИЧНЫЕ.
// Однако, очень часто этот перечень состоит заведомо не более чем из одной организации.
// В таких случаях оптимальнее будет вместо ВЫБРАТЬ РАЗЛИЧНЫЕ использовать ВЫБРАТЬ ПЕРВЫЕ 1
//
// Параметры:
//  ТекстЗапроса	 - Строка 
//  ОднаОрганизация	 - Булево
//
Процедура ОптимизироватьЗапросДляОднойОрганизации(ТекстЗапроса, ОднаОрганизация)
	
	Если ОднаОрганизация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ ПЕРВЫЕ 1");
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеНастройки(КешНастроек, ИмяНастройки, Организация = Неопределено, Период = Неопределено, Периодичность = Неопределено)
	
	Перем ДатаИзменения;
	
	Значение = Неопределено;
	Если КешНастроек.Свойство(ИмяНастройки, Значение) Тогда
		Возврат Значение;
	КонецЕсли;
	
	НачалоПериода = ОбщегоНазначенияБПКлиентСервер.НачалоПериода(Период, Периодичность);
	КонецПериода = ОбщегоНазначенияБПКлиентСервер.КонецПериода(Период, Периодичность);
	
	Если ИмяНастройки = "ИспользуетсяПодсистемаУчетаЗарплатыИКадров" Тогда
		Значение = УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров();
	ИначеЕсли ИмяНастройки = "НеобходимоНачислятьЗарплату" Тогда
		Значение = УчетЗарплаты.НеобходимоНачислятьЗарплату(Организация, Период);
	ИначеЕсли ИмяНастройки = "ВедетсяУчетРезервовОтпусков" Тогда
		Значение = УчетЗарплаты.ВедетсяУчетРезервовОтпусков(Организация, Период);
	ИначеЕсли ИмяНастройки = "ТребуетсяРасчетСебестоимости" Тогда
		Значение = (УчетПроизводства.ИспользоватьВыпускПродукции() И УчетнаяПолитика.ВедетсяПроизводственнаяДеятельность(Организация, Период))
			Или УчетнаяПолитика.РасходыОбслуживающихПроизводствВключатьВПрочиеРасходы(Организация, Период);
	ИначеЕсли ИмяНастройки = "ПлательщикНалогаНаПрибыль" Тогда
		Значение = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, КонецМесяца(Период));
	ИначеЕсли ИмяНастройки = "ПлательщикНДФЛ" Тогда
		Значение = УчетнаяПолитика.ПлательщикНДФЛ(Организация, КонецПериода, ДатаИзменения);
		Если Не Значение И ДатаИзменения > НачалоПериода Тогда // Учетная политика изменилась в текущем периоде
			Значение = УчетнаяПолитика.ПлательщикНДФЛ(Организация, НачалоДня(ДатаИзменения) - 1);
		КонецЕсли;
	ИначеЕсли ИмяНастройки = "ПлательщикЕНВД" Тогда
		Значение = УчетнаяПолитика.ПлательщикЕНВД(Организация, КонецПериода, ДатаИзменения);
		Если Не Значение И ДатаИзменения > НачалоПериода Тогда // Учетная политика изменилась в текущем периоде
			Значение = УчетнаяПолитика.ПлательщикЕНВД(Организация, НачалоДня(ДатаИзменения) - 1);
		КонецЕсли;
	ИначеЕсли ИмяНастройки = "СистемаНалогообложенияОбщая" Тогда
		СистемаНалогообложения = УчетнаяПолитика.СистемаНалогообложения(Организация, КонецПериода, ДатаИзменения);
		Если СистемаНалогообложения <> Перечисления.СистемыНалогообложения.Общая
			И ДатаИзменения > НачалоПериода Тогда // Учетная политика изменилась в текущем периоде
			СистемаНалогообложения = УчетнаяПолитика.СистемаНалогообложения(Организация, НачалоДня(ДатаИзменения) - 1);
		КонецЕсли;
		Значение = (СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая);
	ИначеЕсли ИмяНастройки = "УСНДоходы" Тогда
		Значение = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, КонецПериода, ДатаИзменения);
		Если Не Значение И ДатаИзменения > НачалоПериода Тогда // Учетная политика изменилась в текущем периоде
			Значение = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, НачалоДня(ДатаИзменения) - 1);
		КонецЕсли;
	ИначеЕсли ИмяНастройки = "УСНДоходыМинусРасходы" Тогда
		Значение = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, КонецПериода, ДатаИзменения);
		Если Не Значение И ДатаИзменения > НачалоПериода Тогда // Учетная политика изменилась в текущем периоде
			Значение = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, НачалоДня(ДатаИзменения) - 1);
		КонецЕсли;
	ИначеЕсли ИмяНастройки = "УСНДоходыМинусРасходыНаКонецПериода" Тогда
		Значение = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, КонецПериода);
	ИначеЕсли ИмяНастройки = "ПлательщикТорговогоСбораЗаПериод" Тогда
		Значение = УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(Организация, НачалоПериода, КонецПериода);
	ИначеЕсли ИмяНастройки = "ПрименяетсяУСН" Тогда
		Значение = УчетнаяПолитика.ПрименяетсяУСН(Организация, КонецПериода, ДатаИзменения);
		Если Не Значение И ДатаИзменения > НачалоПериода Тогда // Учетная политика изменилась в текущем периоде
			Значение = УчетнаяПолитика.ПрименяетсяУСН(Организация, НачалоДня(ДатаИзменения) - 1);
		КонецЕсли;
	ИначеЕсли ИмяНастройки = "ПрименяетсяПСН" Тогда
		Значение = УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Организация, НачалоПериода, КонецПериода);
	ИначеЕсли ИмяНастройки = "НалоговыйПериодУСНПропущен" Тогда
		Значение = ЗначениеНастройки(КешНастроек, "ПрименяетсяУСН", Организация, Период, Периодичность)
			И УчетУСН.НалоговыйПериодПропущен(Организация, Период);
	ИначеЕсли ИмяНастройки = "МетодРаспределенияРасходовУСН" Тогда
		Значение = УчетнаяПолитика.МетодРаспределенияРасходовУСНПоВидамДеятельности(Организация, Период);
	ИначеЕсли ИмяНастройки = "ОрганизацииУплачивающиеАвансыПоНалогуНаИмущество" Тогда
		Значение = РасчетИмущественныхНалогов.ОрганизацииУплачивающиеАвансы(Организация, Период, "НалогНаИмущество", Ложь);
	ИначеЕсли ИмяНастройки = "ОрганизацииУплачивающиеАвансыПоНалогуНаИмуществоОднаОрганизация" Тогда
		Значение = РасчетИмущественныхНалогов.ОрганизацииУплачивающиеАвансы(Организация, Период, "НалогНаИмущество");
	ИначеЕсли ИмяНастройки = "ОрганизацииУплачивающиеАвансыПоТранспортномуНалогу" Тогда
		Значение = РасчетИмущественныхНалогов.ОрганизацииУплачивающиеАвансы(Организация, Период, "ТранспортныйНалог", Ложь);
	ИначеЕсли ИмяНастройки = "ОрганизацииУплачивающиеАвансыПоТранспортномуНалогуОднаОрганизация" Тогда
		Значение = РасчетИмущественныхНалогов.ОрганизацииУплачивающиеАвансы(Организация, Период, "ТранспортныйНалог");
	ИначеЕсли ИмяНастройки = "ОрганизацииУплачивающиеАвансыПоЗемельномуНалогу" Тогда
		Значение = РасчетИмущественныхНалогов.ОрганизацииУплачивающиеАвансы(Организация, Период, "ЗемельныйНалог", Ложь);
	ИначеЕсли ИмяНастройки = "ОрганизацииУплачивающиеАвансыПоЗемельномуНалогуОднаОрганизация" Тогда
		Значение = РасчетИмущественныхНалогов.ОрганизацииУплачивающиеАвансы(Организация, Период, "ЗемельныйНалог");
	ИначеЕсли ИмяНастройки = "ФормироватьРезервыПоСомнительнымДолгам" Тогда
		Значение = УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамБУ(Организация, Период)
			Или УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамНУ(Организация, Период);
	ИначеЕсли ИмяНастройки = "СтатьиУбытковПрошлыхЛет" Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РасходыБудущихПериодов.Ссылка КАК СтатьяРБП
		|ИЗ
		|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
		|ГДЕ
		|	РасходыБудущихПериодов.ВидРБП = ЗНАЧЕНИЕ(Перечисление.ВидыРБП.УбыткиПрошлыхЛет)");
		Значение = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтатьяРБП");
	Иначе
		// ВедетсяУчетНМА, ВедетсяУчетОсновныхСредств, ВедетсяУчетСпецодеждыСпецоснастки,
		// ИспользоватьВалютныйУчет, НеИспользоватьНесколькоОрганизаций, УчетЗарплатыИКадровСредствамиБухгалтерии
		Значение = ПолучитьФункциональнуюОпцию(ИмяНастройки);
	КонецЕсли;
	
	КешНастроек.Вставить(ИмяНастройки, Значение);
		
	Возврат Значение;
	
КонецФункции

// Проверяет необходимость выполнения регламентной операции после выполнения отложенных расчетов с контрагентами. 
//
// Параметры:
//	ВидОперации - ПеречислениеСсылка.ВидыРегламентныхОпераций - вид операции, которую требуется  проверить.
//	Период - Дата - Дата месяца, в котором проверяется выполнение регламентной операции.
//	Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//	Булево - Истина, если после выполнения отложенных расчетов с контрагентами
// 		требуется повторно выполнить регламентную операцию.
//
Функция ОперацияТребуетВыполнениеПослеАктуализацииРасчетовСКонтрагентами(ВидОперации, Период, Организация) Экспорт

	// Отложенные расчеты с контрагентами влияют на регламентную операцию
	// "Расчет резервов по сомнительным долгам" и следующие за ней.

	ФормироватьРезервыПоСомнительнымДолгамБУ = УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамБУ(Организация, Период);
	ФормироватьРезервыПоСомнительнымДолгамНУ = УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамНУ(Организация, Период);

	Если НЕ ФормироватьРезервыПоСомнительнымДолгамБУ И НЕ ФормироватьРезервыПоСомнительнымДолгамНУ Тогда
		Возврат Ложь;
	КонецЕсли;

	ИндексОперации = Перечисления.ВидыРегламентныхОпераций.Индекс(ВидОперации);

	ИндексРасчетРезервовПоСомнительнымДолгам = Перечисления.ВидыРегламентныхОпераций.Индекс(
		Перечисления.ВидыРегламентныхОпераций.РасчетРезервовПоСомнительнымДолгам);
	
	Возврат ИндексОперации >= ИндексРасчетРезервовПоСомнительнымДолгам;

КонецФункции

// ЕДИНСТВО ИНТЕРФЕЙСА

// Организацию следует передавать, если эта организация - не та, в контексте которой выявлена ошибка.
Функция ТекстОшибкиРаноВыполнятьОперацию(ВидОперации, Период, Устарела, Организация = Неопределено) Экспорт
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Период",      Формат(Период, "ДФ='MMММ yyyy ""г.""'"));
	ПараметрыТекста.Вставить("Организация", Организация);
	
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеЗарплаты Тогда
		ПараметрыТекста.Вставить("ВидОперации", ПредставлениеОперацииНачислениеЗарплаты(Организация));
	Иначе
		ПараметрыТекста.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	
	ПараметрыТекста.Вставить("РазделИнтерфейса", НСтр("ru = 'Операции'"));
	
	Если Устарела Тогда
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ШаблонТекста = НСтр("ru = 'Нарушена последовательность регламентных операций.
				|Ожидается изменение результатов выполнения операции ""[ВидОперации]"" за [Период] по организации [Организация].
				|Выполните операцию повторно.
				|Полный отчет о выполнении операций в обособленных подразделениях можно получить из формы ""Закрытие месяца""
				|(раздел ""[РазделИнтерфейса]"" - ""Закрытие месяца"").'");
		Иначе
			ШаблонТекста = НСтр("ru = 'Нарушена последовательность регламентных операций.
				|Ожидается изменение результатов выполнения операции ""[ВидОперации]"" за [Период]
				|Выполните операцию повторно (раздел ""[РазделИнтерфейса]"" - ""Закрытие месяца"").'");
		КонецЕсли;
		
	Иначе // Не выполнена
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ШаблонТекста = НСтр("ru = 'Не выполнена операция ""[ВидОперации]"" за [Период] по организации [Организация].
				|Выполните операцию.
				|Полный отчет о выполнении операций в обособленных подразделениях можно получить из формы ""Закрытие месяца""
				|(раздел ""[РазделИнтерфейса]"" - ""Закрытие месяца"").'");
		Иначе
			ШаблонТекста = НСтр("ru = 'Не выполнена операция ""[ВидОперации]"" за [Период]
				|Выполните операцию (раздел ""[РазделИнтерфейса]"" - ""Закрытие месяца"").'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
	
КонецФункции

// ПРОВЕРКА, ЧТО ПРЕДЫДУЩИЕ ОПЕРАЦИИ ВЫПОЛНЕНЫ

// Ошибки - может содержать Неопределено или коллекцию, созданную функцией 
//                 ВыводСообщенийОбОшибках.НовыйДетальнаяИнформацияОбОшибках().
//                 В последнем случае коллекция будет заполнена.
Функция ПредыдущиеОперацииВыполнены(Период, Организация, ВидОперации, Ошибки = Неопределено) Экспорт
	
	Если Не ВыполненаОперацияПредыдущегоМесяца(Период, Организация, ВидОперации, Ошибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВыполненыОперацииПредыдущихГрупп(Период, Организация, ВидОперации, Ошибки);
	
КонецФункции

// Определяет, вёлся ли в предыдущем периоде учет по организации.
//
// Параметры:
//  Период       - Дата - дата начала проверяемого месяца.
//  Организация  - СправочникСсылка.Организации - проверяемая организация.
//
// Возвращаемое значение:
//   Булево      - Истина, если работа с Организация началась только в Период или позже
//
Функция ЭтоПервыйМесяцВеденияУчета(Знач Период, Организация) Экспорт

	Период = НачалоМесяца(Период);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("Период",           Период);
	Запрос.УстановитьПараметр("ПредыдущийПериод", ДобавитьМесяц(Период, - 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДатыВводаНачальныхОстатков.Организация
	|ИЗ
	|	РегистрСведений.ДатыВводаНачальныхОстатков КАК ДатыВводаНачальныхОстатков
	|ГДЕ
	|	ДатыВводаНачальныхОстатков.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков, МЕСЯЦ) = &ПредыдущийПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЖурналОпераций.Ссылка
	|ИЗ
	|	ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
	|ГДЕ
	|	ЖурналОпераций.Организация = &Организация
	|	И ЖурналОпераций.Дата < &Период
	|	И ЖурналОпераций.Проведен
	|	И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.ВводНачальныхОстатков";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Если Не Результаты[0].Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Результаты[1].Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоПериодВеденияУчета(Период, Организация)
	
	ДатаВводаНачальныхОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
	
	Если ДатаВводаНачальныхОстатков = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДатаНачалаВеденияУчета = КонецДня(ДатаВводаНачальныхОстатков) + 1;
	
	Если ДатаНачалаВеденияУчета <= Период Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыполненаОперацияПредыдущегоМесяца(Период, Организация, ВидОперации, Ошибки = Неопределено) Экспорт
	
	Если ЭтоПервыйМесяцВеденияУчета(Период, Организация) Тогда
		Возврат Истина;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВидыОпераций = ВсеВидыОпераций();
	ВидыОпераций = ВидыОпераций.Скопировать(Новый Структура("ВидОперации", ВидОперации));
	
	ПроверяемыйПериод = НачалоМесяца(Период) - 1;
	
	СоздатьДетальныйСтатусЗакрытияМесяца(
		МенеджерВременныхТаблиц,
		ПроверяемыйПериод,
		Организация,
		Неопределено,// Только одна организация
		ВидыОпераций);
		
	Возврат Не НайтиОшибкиВыполненияПредыдущихОпераций(МенеджерВременныхТаблиц, Ошибки, ПроверяемыйПериод, Организация);
	
КонецФункции

Функция ВыполненыОперацииПредыдущихГрупп(Период, Организация, ВидОперации, Ошибки, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если НЕ СоздатьДетальныйСтатусПредыдущихГрупп(МенеджерВременныхТаблиц, Период, Организация, ВидОперации) Тогда
		Возврат Истина;
	КонецЕсли;
		
	Возврат Не НайтиОшибкиВыполненияПредыдущихОпераций(МенеджерВременныхТаблиц, Ошибки, Период, Организация);
	
КонецФункции

Функция НайтиОшибкиВыполненияПредыдущихОпераций(МенеджерВременныхТаблиц, Ошибки, Период, Организация)
	
	// МенеджерВременныхТаблиц содержит ДетальныйСтатусЗакрытияМесяца
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = // аналогичную проверку см. в ПоследняяДоступнаяДляВыполненияОперация()
	"ВЫБРАТЬ
	|	Статус.Организация КАК Организация,
	|	Статус.ВидОперации КАК ВидОперации,
	|	Статус.Устарела КАК Устарела,
	|	Статус.Ссылка КАК Ссылка
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|ГДЕ
	|	Статус.Требуется
	|	И (Статус.Устарела
	|			ИЛИ Статус.Состояние В (ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено), ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статус.ВидОперации.Порядок";
    Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Заполним информацию об ошибках
	Если Ошибки <> Неопределено Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Описание = ТекстОшибкиРаноВыполнятьОперацию(
				Выборка.ВидОперации, 
				Период, 
				Выборка.Устарела, 
				?(Организация = Выборка.Организация, Неопределено, Выборка.Организация));
				
			ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(
				Ошибки, 
				Описание, 
				Выборка.Ссылка);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

// Определяет последний доступный вид операции согласно принципу: если в прошлом месяце есть невыполненная операция,
// то в текущем месяце мы можем выполнить операции не далее чем в прошлом месяце.
//
// Параметры:
//  Период       - Дата - начало месяца, который закрывается.
//  Организация  - СправочникСсылка.Организации 
//  ВидОперации  - ПеречениеСсылка.ВидыРегламентныхОпераций - последняя из операций, которые требуется выполнить.
//                                             Неопределено - проверка возможности полного закрытия месяца.
//
// Возвращаемое значение:
//   * ПеречислениеСсылка.ВидыРегламентныхОпераций - последняя из операций, возможных для выполнения в текущем месяце.
//                                                   Если пустая ссылка, то вообще нет ни одной доступной операции.
//   * Неопределено - невыполненные операции предыдущего месяца не мешают текущему месяцу.
//
Функция ПоследняяДоступнаяДляВыполненияОперация(Знач Период, Знач Организация, ВидОперации = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоПервыйМесяцВеденияУчета(Период, Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Период           = НачалоМесяца(Период);
	ПредыдущийПериод = ДобавитьМесяц(Период, - 1);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Будем проверять выполнение операций по всей организации (головной и филиалам)
	ОтборОрганизаций = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(Организация);
	
	// Анализируем предыдущий месяц.	
	СоздатьДетальныйСтатусЗакрытияМесяца(МенеджерВременныхТаблиц, ПредыдущийПериод, Организация, ОтборОрганизаций);
	
	// Определяем первую невыполненную операцию, предшествующую ВидОперации. Состав видов операций текущего и предыдущего
	// месяца может различаться, поэтому нельзя быть уверенным в наличии в предыдущем месяце ВидОперации из текущего месяца.
	// При анализе предыдущего месяца нам важна не группа операций, которые могут параллельно выполняться, а граница,
	// до которой мы можем дойти в текущем месяце.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации); // ограничение на список операций
	Запрос.Текст = // аналогичную проверку см. в НайтиОшибкиВыполненияПредыдущихОпераций()
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДетальныйСтатусЗакрытияМесяца.ВидОперации
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК ДетальныйСтатусЗакрытияМесяца
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ВидыРегламентныхОпераций КАК ВидыРегламентныхОпераций
	|		ПО ДетальныйСтатусЗакрытияМесяца.ВидОперации = ВидыРегламентныхОпераций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыРегламентныхОпераций КАК ВидыРегламентныхОпераций_Ограничение
	|		ПО (ВидыРегламентныхОпераций_Ограничение.Ссылка = &ВидОперации)
	|			И (ВидыРегламентныхОпераций_Ограничение.Порядок <= ВидыРегламентныхОпераций.Порядок)
	|ГДЕ
	|	ДетальныйСтатусЗакрытияМесяца.Требуется
	|	И (ДетальныйСтатусЗакрытияМесяца.Устарела
	|			ИЛИ ДетальныйСтатусЗакрытияМесяца.Состояние В (ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками), ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)))
	|	И ВидыРегламентныхОпераций_Ограничение.Порядок ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыРегламентныхОпераций.Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		// Невыполненные операции предыдущего месяца не мешают текущему месяцу.
		Возврат Неопределено;
	КонецЕсли;
		
	ПрепятствующаяОперация = Выборка.ВидОперации;
	
	// Пересоздаем все таблицы для анализа другого - текущего - месяца.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Будем проверять выполнение операций по данной конкретной организации, операции которой пользователь видит на форме
	ОтборОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	
	// Анализируем текущий месяц.
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	СоздатьДетальныйСтатусЗакрытияМесяца(МенеджерВременныхТаблиц, Период, Организация, ОтборОрганизаций);
	
	// Определяем последнюю требуемую операцию.
	Запрос.УстановитьПараметр("ПрепятствующаяОперация", ПрепятствующаяОперация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДетальныйСтатусЗакрытияМесяца.ВидОперации
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК ДетальныйСтатусЗакрытияМесяца
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ВидыРегламентныхОпераций КАК ВидыРегламентныхОпераций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ВидыРегламентныхОпераций КАК ВидыРегламентныхОпераций_Ограничение
	|			ПО (ВидыРегламентныхОпераций_Ограничение.Ссылка = &ПрепятствующаяОперация)
	|				И (ВидыРегламентныхОпераций_Ограничение.Порядок > ВидыРегламентныхОпераций.Порядок)
	|		ПО ДетальныйСтатусЗакрытияМесяца.ВидОперации = ВидыРегламентныхОпераций.Ссылка
	|			И (ДетальныйСтатусЗакрытияМесяца.Требуется)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыРегламентныхОпераций.Порядок УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий()
	 Или Не ЗакрытиеМесяцаКлиентСервер.ИспользуетсяДокументРегламентнаяОперация(Выборка.ВидОперации)
		И ГруппаПоВидуОперации(Выборка.ВидОперации) = 1 Тогда
		// Нет операций текущего месяца, выполнению которых ничего из прошлого месяца не препятствует -
		// т.е. тех, которые мы могли бы предложить пользователю выполнить.
		// Потому что в предыдущем месяце не выполнено ни одной операции, среди тех, которые надо выполнять в текущем.
		// Значит, пользователь в текущем месяце ничего уже не может сделать и ему придется выполнять операции предыдущего месяца.
		// Сообщение об этом выдаст регламентная операция - см. ВыполнитьОперацию() в модуле документа РегламентнаяОперация.
		Возврат Перечисления.ВидыРегламентныхОпераций.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Выборка.ВидОперации;
		
КонецФункции

// РАСШИРЕНИЕ ПОДСИСТЕМЫ "ДЛИТЕЛЬНЫЕ ОПЕРАЦИИ"

Функция ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно;
	
КонецФункции

// Запускает выполнение процедуры в фоновом задании. Отличается от ДлительныеОперации.ЗапуститьВыполнениеВФоне()
// поведением по отношению к другим фоновым заданиям. Задание, запускаемое данной функцией, встает в очередь, а не
// начинает выполняться в основном потоке.
// 
// Параметры:
//  ИдентификаторФормы  - УникальныйИдентификатор - идентификатор формы, из которой выполняется запуск длительной операции.
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, которую необходимо выполнить в фоне.
//  Параметры           - Структура - все необходимые параметры для выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания - Строка - наименование фонового задания.
//  КлючЗадания         - Строка - уникальное имя выполнения запускаемой процедуры. Может быть не задано.
//
// Возвращаемое значение:
//  Структура           - параметры выполнения задания: 
//   * АдресХранилища   - Строка - адрес временного хранилища, в которое будет помещен результат работы задания;
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, Знач Параметры,
								 Знач НаименованиеЗадания, Знач КлючЗадания = "") Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ОбщегоНазначения.РежимОтладки() Тогда // в командной строке /CРежимОтладки
		
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Результат.ЗаданиеВыполнено = Истина;
		
	Иначе
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		ПараметрыВыполнения.КлючФоновогоЗадания = КлючЗадания;
		Задание = ДлительныеОперации.ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяЭкспортнойПроцедуры,
			ПараметрыВыполнения, ПараметрыЭкспортнойПроцедуры);
			
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);	
		Задание = Задание.ОжидатьЗавершенияВыполнения(ПараметрыВыполнения.ОжидатьЗавершение);
		
		Результат.ЗаданиеВыполнено = Задание.Состояние <> СостояниеФоновогоЗадания.Активно;
		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СПРАВКИ-РАСЧЕТЫ
//

Функция ПолучитьСписокСправокРасчетовПоВидуОперации(Знач ВидОперации,Знач Организация,Знач ПериодРегистрации = Неопределено) Экспорт
	
	Если ТипЗнч(ВидОперации) <> Тип("Массив") Тогда
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(ВидОперации);
	Иначе
		МассивОпераций = ВидОперации;
	КонецЕсли;
	
	ПериодРегистрации                      = ?(ПериодРегистрации = Неопределено,ТекущаяДата(),ПериодРегистрации);
	ПлательщикНалогаНаПрибыль              = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ПериодРегистрации);
	
	Если Не ПлательщикНалогаНаПрибыль Тогда
		ПрименяетсяЗатратныйМетодПБУ18           = Ложь;
	Иначе
		ВариантУчетаОтложенногоНалога = НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(
			ПериодРегистрации,
			Организация);
		ПрименяетсяЗатратныйМетодПБУ18 =
			(ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод);
	КонецЕсли;
	
	Список = Новый СписокЗначений;

	//Операции Группы 1
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков) <> Неопределено Тогда
		Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
			И УчетЗарплаты.РасчетЗарплатыДляНебольшихОрганизаций()
			И УчетЗарплаты.ВедетсяУчетРезервовОтпусков(Организация, ПериодРегистрации) Тогда
			Список.Добавить("СправкаРасчетРезервыОтпусков","Резервы отпусков");
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.АмортизацияИИзносОС) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетАмортизации","Амортизация");
		
		Если ПлательщикНалогаНаПрибыль Тогда
			Список.Добавить("СправкаРасчетАмортизационнойПремии","Амортизационная премия");
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетПризнаниеРасходовПоОСПоступившимВЛизинг", "Признание расходов по ОС, поступившим в лизинг");
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР) <> Неопределено Тогда
		Если Список.НайтиПоЗначению("СправкаРасчетАмортизации") = Неопределено Тогда
			Список.Добавить("СправкаРасчетАмортизации","Амортизация");
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета97) <> Неопределено Тогда	
		Список.Добавить("СправкаРасчетСписаниеРБП","Списание расходов будущих периодов");
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредств) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетПереоценкаВалютныхСредств","Переоценка валютных средств");
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетТорговойНаценкиПоПроданнымТоварам) <> Неопределено  Тогда
		Если Список.НайтиПоЗначению("СправкаРасчетТорговойНаценки") = Неопределено Тогда
			Список.Добавить("СправкаРасчетТорговойНаценки","Списание торговой наценки по проданным товарам");
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетНалогаНаИмущество", "Расчет налога на имущество");
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетТранспортногоНалога) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетТранспортногоНалога", "Расчет транспортного налога");
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетЗемельногоНалога) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетЗемельногоНалога", "Расчет земельного налога");
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетТорговогоСбора) <> Неопределено Тогда	
		Список.Добавить("СправкаРасчетТорговогоСбора","Расчет торгового сбора");
	КонецЕсли;
	
	//Операции Группы 2
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов) <> Неопределено Тогда
		
		Если ПлательщикНалогаНаПрибыль Тогда
			Список.Добавить("СправкаРасчетНормированияРасходов","Нормирование расходов");
		КонецЕсли;
		
	КонецЕсли;
	
	//Операции группы 3
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетКалькуляцияСебестоимости","Калькуляция себестоимости");	
		Список.Добавить("СправкаРасчетСебестоимостиПродукции","Себестоимость выпущеной продукции");	
		Список.Добавить("СправкаРасчетРаспределенияКосвенныхРасходов","Распределение косвенных расходов");
		Список.Добавить("СправкаРасчетСписанияКосвенныхРасходов", "Списание косвенных расходов");
	КонецЕсли;	
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44) <> Неопределено Тогда
		
		Если Список.НайтиПоЗначению("СправкаРасчетСписанияКосвенныхРасходов") = Неопределено Тогда
			Список.Добавить("СправкаРасчетСписанияКосвенныхРасходов","Списание косвенных расходов");
		КонецЕсли;
		
		Список.Добавить("СправкаРасчетТранспортныхРасходов","Транспортные расходы");
		
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги) <> Неопределено Тогда
		Периодичность =
			ПериодичностьРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги);
		НачалоПериода = ОбщегоНазначенияБПКлиентСервер.НачалоПериода(ПериодРегистрации, Периодичность);
		КонецПериода = ОбщегоНазначенияБПКлиентСервер.КонецПериода(ПериодРегистрации, Периодичность);
		
		ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходыЗаПериод(Организация, НачалоПериода, КонецПериода);
		ПрименяетсяПСН = УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Организация, НачалоПериода, КонецПериода);
		ПрименяетсяЕНВД = УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоПериода, КонецПериода);
		УменьшениеЕНВДПослеОтмены = УчетЕНВД.РасходыПериодаУменьшаютЕНВДПослеОтмены(Организация, ПериодРегистрации);
		
		Если ПрименяетсяУСНДоходы Тогда
			Список.Добавить("СправкаРасчетРасходовУменьшающихНалогУСН", НСтр("ru = 'Расходы, уменьшающие налог УСН'"));
		КонецЕсли;
		
		Если ПрименяетсяПСН И НачалоПериода >= УчетПСНКлиентСервер.ДатаНачалаУменьшенияПСННаСтраховыеВзносы() Тогда
			Список.Добавить("СправкаРасчетРасходовУменьшающихПСН", НСтр("ru = 'Расходы, уменьшающие налог ПСН'"));
		КонецЕсли;
		
		Если ПрименяетсяЕНВД Тогда
			Список.Добавить("СправкаРасчетРасходовУменьшающихЕНВД", НСтр("ru = 'Расходы, уменьшающие ЕНВД'"));
		ИначеЕсли УменьшениеЕНВДПослеОтмены Тогда
			Список.Добавить("СправкаРасчетРасходовУменьшающихЕНВД",
				СтрШаблон(НСтр("ru = 'Расходы, уменьшающие ЕНВД за %1'"),
					УчетЕНВДКлиентСервер.ПредставлениеПоследнегоНалоговогоПериодаЕНВД()));
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.ОбесценениеЗапасов) <> Неопределено Тогда
		
		Список.Добавить("СправкаРасчетОбесцененияЗапасов", НСтр("ru = 'Обесценение запасов'"));
		
	КонецЕсли;
	
	//Операции группы 4
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетРезервовПоСомнительнымДолгам) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетРезервыПоСомнительнымДолгам","Резервы по сомнительным долгам");
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль) <> Неопределено Тогда
		
		Список.Добавить("СправкаРасчетНалогаНаПрибыль","Расчет налога на прибыль");
		
		Если ПлательщикНалогаНаПрибыль Тогда
			НалоговыйУчетОбособленныхПодразделений.ДополнитьСписокСправокРасчетов(Список);
			Если ПрименяетсяЗатратныйМетодПБУ18 Тогда
				Список.Добавить("СправкаРасчетПостоянныхИВременныхРазниц","Налоговые активы и обязательства");
				
				ПрименяютсяРазныеСтавкиНалогаНаПрибыль = УчетнаяПолитика.ПрименяютсяРазныеСтавкиНалогаНаПрибыль(
					Организация,
					ПериодРегистрации);
					
				Если ПрименяютсяРазныеСтавкиНалогаНаПрибыль Тогда
					Список.Добавить("СправкаРасчетПересчетСтоимостиОтложенныхНалоговыхАктивовИОбязательств","Пересчет стоимости отложенных налоговых активов и обязательств");
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетОтложенногоНалога) <> Неопределено Тогда
		НалогНаПрибыльБухгалтерскийУчет.ДобавитьСправкиРасчеты(Список);
		Если Список.НайтиПоЗначению("СправкаРасчетНалогаНаПрибыль") = Неопределено Тогда
			Список.Добавить("СправкаРасчетНалогаНаПрибыль","Расчет налога на прибыль");
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет) <> Неопределено Тогда
		Если ПлательщикНалогаНаПрибыль Тогда
			Список.Добавить("СправкаРасчетУбытковПрошлыхЛет","Списание убытков прошлых лет");
		КОнецЕсли;
	КонецЕсли;
		
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса) <> Неопределено 
		И Список.НайтиПоЗначению("СправкаРасчетПересчетСтоимостиОтложенныхНалоговыхАктивовИОбязательств") = Неопределено
		И ПрименяетсяЗатратныйМетодПБУ18 Тогда
		Список.Добавить("СправкаРасчетПересчетСтоимостиОтложенныхНалоговыхАктивовИОбязательств","Пересчет стоимости отложенных налоговых активов и обязательств");
	КонецЕсли;
	
	Если ПлательщикНалогаНаПрибыль И МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91) <> Неопределено Тогда
		Если Список.НайтиПоЗначению("СправкаРасчетНалогаНаПрибыль") = Неопределено Тогда
			Список.Добавить("СправкаРасчетНалогаНаПрибыль","Расчет налога на прибыль");
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН) <> Неопределено Тогда
		Периодичность = ПериодичностьРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН);
		НачалоПериода = ОбщегоНазначенияБПКлиентСервер.НачалоПериода(ПериодРегистрации, Периодичность);
		КонецПериода = ОбщегоНазначенияБПКлиентСервер.КонецПериода(ПериодРегистрации, Периодичность);
		
		ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСНЗаПериод(Организация, НачалоПериода, КонецПериода);
		Если ПрименяетсяУСН Тогда
			Список.Добавить("СправкаРасчетНалогаУСН", "Расчет налога УСН");
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД) <> Неопределено Тогда
		Периодичность = ПериодичностьРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД);
		НачалоПериода = ОбщегоНазначенияБПКлиентСервер.НачалоПериода(ПериодРегистрации, Периодичность);
		КонецПериода = ОбщегоНазначенияБПКлиентСервер.КонецПериода(ПериодРегистрации, Периодичность);
		
		ПрименяетсяЕНВД = УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоПериода, КонецПериода);
		
		Если ПрименяетсяЕНВД Тогда
			Список.Добавить("СправкаРасчетЕдиногоНалогаНаВмененныйДоход","Расчет ЕНВД");
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетНДФЛДляИП) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетНДФЛДляИП","Расчет НДФЛ для ИП");
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция СуществуетСправкаРасчет(ВидОперации) Экспорт
	
	Если  ВидОперации = Перечисления.ВидыРегламентныхОпераций.ИсключениеНЗПИзСоставаМатериальныхРасходовДляУСН
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВэксплуатации
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеНМАДляУСН
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеОСДляУСН
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляИП
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН 
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеТаможенныхПлатежейДляУСН
		Тогда
		Возврат Ложь
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАКРЫТИЯ МЕСЯЦА

// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьПараметрыТаблицаРеквизиты(ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"       // <Дата>
	+ "Организация"   // <СправочникСсылка.Организации>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыТаблицаРеквизиты()

Процедура ИзменитьИменаКолонокВТаблицеЗначений(ТаблицаДляРС, СоответствиеКолонок) Экспорт
	
	Для каждого ЭлементСтруктуры Из СоответствиеКолонок Цикл
		Если ТипЗнч(ЭлементСтруктуры.Ключ) <> Тип("Строка")
				ИЛИ ТипЗнч(ЭлементСтруктуры.Значение) <> Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДляРС.Колонки[ЭлементСтруктуры.Ключ].Имя = ЭлементСтруктуры.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет запись в регистры информации параметров расчетов по рег.операциям
// по данным которых будут построены справки - расчеты
//
Процедура ЗаписьВоВспомогательныеРегистрыСведений(Движения, ДанныеДляЗаписи, ТаблицаРеквизиты,
										ИмяРегистра, Группировать = Ложь, Знач СтрокаГруппировки = Неопределено, Знач СтрокаСуммирования = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписи)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ВспомогательныйРасчет = Движения[ИмяРегистра];
	Параметры = ПодготовитьПараметрыТаблицаРеквизиты(ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если ДанныеДляЗаписи.Колонки.Найти("Организация") = Неопределено Тогда
		ДанныеДляЗаписи.Колонки.Добавить("Организация",
			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	
	ДанныеДляЗаписи.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	Если Группировать Тогда
		Если СтрокаГруппировки = Неопределено Или СтрокаСуммирования = Неопределено Тогда
			// Группируем все ресурсы по всем измерениям
			МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
			СтрокаГруппировки  = ИменаРеквизитовСтрокой(МетаданныеРегистра, "Измерения", ДанныеДляЗаписи.Колонки);
			СтрокаСуммирования = ИменаРеквизитовСтрокой(МетаданныеРегистра, "Ресурсы",   ДанныеДляЗаписи.Колонки);
		КонецЕсли;
		ДанныеДляЗаписи.Свернуть(СтрокаГруппировки, СтрокаСуммирования);
	КонецЕсли;
	
	КолонкиПериода = Новый Структура;
	КолонкиПериода.Вставить("ПериодРасчета", Реквизиты.Период);
	КолонкиПериода.Вставить("Период",        Реквизиты.Период);
	
	Для Каждого СтрокаТаблицы Из ДанныеДляЗаписи Цикл
		ВспомогательныйРасчетЗапись = ВспомогательныйРасчет.Добавить();
		ЗаполнитьЗначенияСвойств(ВспомогательныйРасчетЗапись, КолонкиПериода);
		ЗаполнитьЗначенияСвойств(ВспомогательныйРасчетЗапись, СтрокаТаблицы);
	КонецЦикла;
	
	ВспомогательныйРасчет.Записывать = Истина;
	
КонецПроцедуры

Функция РеквизитыЗаписиВоВспомогательныеРегистрыСведений(Период, Организация) Экспорт
	
	РеквизитыДляЗаписиВоВспомогательныеРегистрыСведений = Новый ТаблицаЗначений;
	РеквизитыДляЗаписиВоВспомогательныеРегистрыСведений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	РеквизитыДляЗаписиВоВспомогательныеРегистрыСведений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Запись = РеквизитыДляЗаписиВоВспомогательныеРегистрыСведений.Добавить();
		
	Запись.Период      = Период;
	Запись.Организация = Организация;
	
	Возврат РеквизитыДляЗаписиВоВспомогательныеРегистрыСведений;
	
КонецФункции

Функция ИменаРеквизитовСтрокой(МетаданныеРегистра, ВидРеквизита, Колонки)
	
	ИменаРеквизитов = Новый Массив;
	
	Для Каждого ОписаниеРеквизита Из МетаданныеРегистра[ВидРеквизита] Цикл
		
		Если Колонки.Найти(ОписаниеРеквизита.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИменаРеквизитов.Добавить(ОписаниеРеквизита.Имя);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ИменаРеквизитов, ",");
	
КонецФункции


// РАСЧЕТ ТОРГОВОЙ НАЦЕНКИ ПО ПРОДАННЫМ ТОВАРАМ

Процедура СформироватьДвиженияРасчетТорговойНаценки(ТаблицаРасчетНаценки, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРасчетНаценки) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРасчетТорговойНаценки(ТаблицаРасчетНаценки, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаРасчетНаценки Из Параметры.ТаблицаПроводокРасчетНаценки Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);
		Проводка.СчетДт = СтрокаРасчетНаценки.СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаРасчетНаценки.НоменклатурныеГруппы);
		
		Проводка.СчетКт = СтрокаРасчетНаценки.СчетКт;
		Если СтрокаРасчетНаценки.ВидСклада = "НТТ" Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаРасчетНаценки.Склады);
			Если СтрокаРасчетНаценки.ЕстьСтавкиНДС Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаРасчетНаценки.СтавкиНДС);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаРасчетНаценки.СтавкиНДС);
			КонецЕсли;
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаРасчетНаценки.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаРасчетНаценки.Склады);
			Если СтрокаРасчетНаценки.ЕстьПартии Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаРасчетНаценки.Партии);
			КонецЕсли;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаРасчетНаценки.СуммаНаценки;
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтрокаРасчетНаценки.Подразделение, СтрокаРасчетНаценки.Подразделение);
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
			СтрокаРасчетНаценки.СуммаНаценкиНУ, СтрокаРасчетНаценки.СуммаНаценкиНУ, СтрокаРасчетНаценки.СуммаНаценкиПР,
			СтрокаРасчетНаценки.СуммаНаценкиПР, СтрокаРасчетНаценки.СуммаНаценкиВР, СтрокаРасчетНаценки.СуммаНаценкиВР,
			Проводка);
		
	КонецЦикла;
	
	// Формируем записи для регистров формирования справки-расчета
	СписокРесурсов = ""
	+ "ПродажнаяСтоимостьРеализация,"
	+ "ПродажнаяСтоимостьОстаток,"
	+ "ТорговаяНаценкаОстаток,"
	+ "ТорговаяНаценкаОстатокНУ,"
	+ "ТорговаяНаценкаОстатокПР,"
	+ "ТорговаяНаценкаОстатокВР,"
	+ "ПроцентСкидкиНакидки,"
	+ "ПроцентСкидкиНакидкиНУ,"
	+ "ПроцентСкидкиНакидкиПР,"
	+ "ПроцентСкидкиНакидкиВР,"
	+ "СуммаНаценки,"
	+ "СуммаНаценкиНУ,"
	+ "СуммаНаценкиПР,"
	+ "СуммаНаценкиВР";
	
	ТаблицаДвиженийРегистраРасчетНаценкиНТТ = Параметры.ТаблицаДвиженийРегистраРасчетНаценки.Скопировать(Новый Структура("ВидСклада", "НТТ"));
	ТаблицаДвиженийРегистраРасчетНаценкиНТТ.Свернуть("СтавкиНДС, Склады, СчетКт", СписокРесурсов);
	
	Если ТаблицаДвиженийРегистраРасчетНаценкиНТТ.Количество() > 0 Тогда
		Движения.РасчетТорговойНаценкиНТТ.Записывать = Истина;
	КонецЕсли; 
	
	Для каждого СтрокаРасчетНаценки Из ТаблицаДвиженийРегистраРасчетНаценкиНТТ Цикл
		ЗаписьРегистраНТТ 							= Движения.РасчетТорговойНаценкиНТТ.Добавить();
		ЗаписьРегистраНТТ.ПериодРасчета 			= Реквизиты.Период;
		ЗаписьРегистраНТТ.СчетУчетаТорговойНаценки 	= СтрокаРасчетНаценки.СчетКт;
		ЗаполнитьЗначенияСвойств(ЗаписьРегистраНТТ, Реквизиты);
		ЗаполнитьЗначенияСвойств(ЗаписьРегистраНТТ, СтрокаРасчетНаценки);
	КонецЦикла; 
	
	СписокРесурсов = ""
	+ "ПродажнаяСтоимостьРеализация,"
	+ "СуммаНаценки,"
	+ "СуммаНаценкиНУ,"
	+ "СуммаНаценкиПР,"
	+ "СуммаНаценкиВР";
	
	ТаблицаДвиженийРегистраРасчетНаценкиАТТ = Параметры.ТаблицаДвиженийРегистраРасчетНаценки.Скопировать(Новый Структура("ВидСклада", "АТТ"));
	ТаблицаДвиженийРегистраРасчетНаценкиАТТ.Свернуть(""
		+"Номенклатура," 
		+"Партии,"
		+"Склады,"
		+"СчетКт,"
		+"ПродажнаяСтоимостьОстаток," 
		+"ТорговаяНаценкаОстаток,"
		+"ТорговаяНаценкаОстатокНУ,"
		+"ТорговаяНаценкаОстатокПР,"
		+"ТорговаяНаценкаОстатокВР,"
		+"ПроцентСкидкиНакидки,"
		+"ПроцентСкидкиНакидкиНУ,"
		+"ПроцентСкидкиНакидкиПР,"
		+"ПроцентСкидкиНакидкиВР"
		,СписокРесурсов);
	
	Если ТаблицаДвиженийРегистраРасчетНаценкиАТТ.Количество() > 0 Тогда
		Движения.РасчетТорговойНаценкиАТТ.Записывать = Истина;
	КонецЕсли; 
	
	Для каждого СтрокаРасчетНаценки Из ТаблицаДвиженийРегистраРасчетНаценкиАТТ Цикл
		
		ЗаписьРегистраАТТ = Движения.РасчетТорговойНаценкиАТТ.Добавить();
		ЗаписьРегистраАТТ.ПериодРасчета = Реквизиты.Период;
		ЗаписьРегистраАТТ.СчетУчетаТорговойНаценки 	= СтрокаРасчетНаценки.СчетКт;
		
		ЗаполнитьЗначенияСвойств(ЗаписьРегистраАТТ, Реквизиты);
		ЗаполнитьЗначенияСвойств(ЗаписьРегистраАТТ, СтрокаРасчетНаценки);
	КонецЦикла; 
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры 

Функция ПодготовитьТаблицуРасчетТорговойНаценки(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаРасчетНаценки = ПолучитьТаблицаРасчетНаценки();
	Параметры = ПодготовитьПараметрыРасчетТорговойНаценки(ТаблицаРасчетНаценки, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаПроводокРасчетНаценки    = Параметры.ТаблицаПроводокРасчетНаценки;
	РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(
		Реквизиты.Организация, Реквизиты.КонДата);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ)
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС)";
	
	РазделятьПоСтавкамНДС = НЕ Запрос.Выполнить().Пустой();
	
	//НТТ
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоСтавкамНДС Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ ВТ_Счета9002
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродаж))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПорядокНалогообложенияТорговыхТочек.ОсобыйПорядокНалогообложения
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
		|	КОНЕЦ КАК СчетРасходовОтРеализации,
		|	ПорядокНалогообложенияТорговыхТочек.Склад КАК ТорговаяТочка
		|ПОМЕСТИТЬ ВТ_СчетаУчетаВНТТ
		|ИЗ
		|	РегистрСведений.ПорядокНалогообложенияТорговыхТочек.СрезПоследних(&КонДата, ) КАК ПорядокНалогообложенияТорговыхТочек
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Хозрасчетный.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.Склады) КАК Субконто1,
		|	ВЫРАЗИТЬ(Хозрасчетный.Субконто2 КАК Перечисление.СтавкиНДС) КАК Субконто2,
		|	Хозрасчетный.СуммаОстатокКт КАК СуммаОстатокКт,
		|	Хозрасчетный.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
		|	Хозрасчетный.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
		|	Хозрасчетный.СуммаВРОстатокКт КАК СуммаВРОстатокКт
		|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиТН
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаНТТ), &ВидыСубконто, Организация = &Организация) КАК Хозрасчетный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Субконто2,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Хозрасчетный.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.Склады) КАК Субконто1,
		|	ВЫРАЗИТЬ(Хозрасчетный.Субконто2 КАК Перечисление.СтавкиНДС) КАК Субконто2,
		|	Хозрасчетный.СуммаОстатокДт КАК СуммаОстатокДт
		|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиПС
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ), &ВидыСубконто, Организация = &Организация) КАК Хозрасчетный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Субконто2,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеКт, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Склады) КАК СубконтоКт1,
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Перечисление.СтавкиНДС) КАК СубконтоКт2,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
		|ПОМЕСТИТЬ ВТ_ХозрасчетныйОборотыДтКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачДата,
		|			&КонДата,
		|			,
		|			СчетДт В
		|				(ВЫБРАТЬ
		|					ВТ_Счета9002.Счет
		|				ИЗ
		|					ВТ_Счета9002),
		|			,
		|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ),
		|			&ВидыСубконто,
		|			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СубконтоКт1,
		|	СубконтоКт2,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ХозрасчетныйОстаткиТН.Подразделение КАК Подразделение,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1 КАК Склады,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто2 КАК СтавкиНДС,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаОстатокКт) КАК ТорговаяНаценкаОстаток,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаНУОстатокКт) КАК ТорговаяНаценкаОстатокНУ,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаПРОстатокКт) КАК ТорговаяНаценкаОстатокПР,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаВРОстатокКт) КАК ТорговаяНаценкаОстатокВР,
		|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) КАК ПродажнаяСтоимостьРеализация,
		|	СУММА(ЕСТЬNULL(ВТ_ХозрасчетныйОстаткиПС.СуммаОстатокДт, 0)) КАК ПродажнаяСтоимостьОстаток,
		|	ВЫБОР
		|		КОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
		|				И ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
		|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
		|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
		|			КОНЕЦ
		|	КОНЕЦ КАК СчетСебестоимости
		|ИЗ
		|	ВТ_ХозрасчетныйОстаткиТН КАК ВТ_ХозрасчетныйОстаткиТН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОборотыДтКт КАК ВТ_ХозрасчетныйОборотыДтКт
		|		ПО ВТ_ХозрасчетныйОстаткиТН.Подразделение = ВТ_ХозрасчетныйОборотыДтКт.Подразделение
		|			И ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_ХозрасчетныйОборотыДтКт.СубконтоКт1
		|			И ВТ_ХозрасчетныйОстаткиТН.Субконто2 = ВТ_ХозрасчетныйОборотыДтКт.СубконтоКт2
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОстаткиПС КАК ВТ_ХозрасчетныйОстаткиПС
		|		ПО ВТ_ХозрасчетныйОстаткиТН.Подразделение = ВТ_ХозрасчетныйОстаткиПС.Подразделение
		|			И ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_ХозрасчетныйОстаткиПС.Субконто1
		|			И ВТ_ХозрасчетныйОстаткиТН.Субконто2 = ВТ_ХозрасчетныйОстаткиПС.Субконто2
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаУчетаВНТТ КАК ВТ_СчетаУчетаВНТТ
		|		ПО ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_СчетаУчетаВНТТ.ТорговаяТочка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1.НоменклатурнаяГруппа,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто2,
		|	ВТ_ХозрасчетныйОстаткиТН.Подразделение,
		|	ВЫБОР
		|		КОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
		|				И ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
		|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
		|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
		|			КОНЕЦ
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) + СУММА(ЕСТЬNULL(ВТ_ХозрасчетныйОстаткиПС.СуммаОстатокДт, 0)) <> 0 И
		|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) <> 0 И
		|	(СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаОстатокКт) > 0
		|		ИЛИ СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаНУОстатокКт) > 0
		|		ИЛИ СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаПРОстатокКт) > 0
		|		ИЛИ СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаВРОстатокКт) > 0)
		|ИТОГИ
		|	МАКСИМУМ(НоменклатурнаяГруппа)
		|ПО
		|	Склады,
		|	СтавкиНДС,
		|	Подразделение";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ ВТ_Счета9002
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродаж))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПорядокНалогообложенияТорговыхТочек.ОсобыйПорядокНалогообложения
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
		|	КОНЕЦ КАК СчетРасходовОтРеализации,
		|	ПорядокНалогообложенияТорговыхТочек.Склад КАК ТорговаяТочка
		|ПОМЕСТИТЬ ВТ_СчетаУчетаВНТТ
		|ИЗ
		|	РегистрСведений.ПорядокНалогообложенияТорговыхТочек.СрезПоследних(&КонДата, ) КАК ПорядокНалогообложенияТорговыхТочек
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Хозрасчетный.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.Склады) КАК Субконто1,
		|	Хозрасчетный.СуммаОстатокКт КАК СуммаОстатокКт,
		|	Хозрасчетный.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
		|	Хозрасчетный.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
		|	Хозрасчетный.СуммаВРОстатокКт КАК СуммаВРОстатокКт
		|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиТН
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаНТТ), &ВидыСубконто, Организация = &Организация) КАК Хозрасчетный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Хозрасчетный.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.Склады) КАК Субконто1,
		|	Хозрасчетный.СуммаОстатокДт КАК СуммаОстатокДт
		|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиПС
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ), &ВидыСубконто, Организация = &Организация) КАК Хозрасчетный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеКт, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Склады) КАК СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
		|ПОМЕСТИТЬ ВТ_ХозрасчетныйОборотыДтКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачДата,
		|			&КонДата,
		|			,
		|			СчетДт В
		|				(ВЫБРАТЬ
		|					ВТ_Счета9002.Счет
		|				ИЗ
		|					ВТ_Счета9002),
		|			,
		|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ),
		|			&ВидыСубконто,
		|			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СубконтоКт1,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ХозрасчетныйОстаткиТН.Подразделение КАК Подразделение,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1 КАК Склады,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаОстатокКт) КАК ТорговаяНаценкаОстаток,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаНУОстатокКт) КАК ТорговаяНаценкаОстатокНУ,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаПРОстатокКт) КАК ТорговаяНаценкаОстатокПР,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаВРОстатокКт) КАК ТорговаяНаценкаОстатокВР,
		|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) КАК ПродажнаяСтоимостьРеализация,
		|	СУММА(ЕСТЬNULL(ВТ_ХозрасчетныйОстаткиПС.СуммаОстатокДт, 0)) КАК ПродажнаяСтоимостьОстаток,
		|	ВЫБОР
		|		КОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
		|				И ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
		|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
		|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
		|			КОНЕЦ
		|	КОНЕЦ КАК СчетСебестоимости
		|ИЗ
		|	ВТ_ХозрасчетныйОстаткиТН КАК ВТ_ХозрасчетныйОстаткиТН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОборотыДтКт КАК ВТ_ХозрасчетныйОборотыДтКт
		|		ПО ВТ_ХозрасчетныйОстаткиТН.Подразделение = ВТ_ХозрасчетныйОборотыДтКт.Подразделение
		|			И ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_ХозрасчетныйОборотыДтКт.СубконтоКт1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОстаткиПС КАК ВТ_ХозрасчетныйОстаткиПС
		|		ПО ВТ_ХозрасчетныйОстаткиТН.Подразделение = ВТ_ХозрасчетныйОстаткиПС.Подразделение
		|			И ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_ХозрасчетныйОстаткиПС.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаУчетаВНТТ КАК ВТ_СчетаУчетаВНТТ
		|		ПО ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_СчетаУчетаВНТТ.ТорговаяТочка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1.НоменклатурнаяГруппа,
		|	ВТ_ХозрасчетныйОстаткиТН.Подразделение,
		|	ВЫБОР
		|		КОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
		|				И ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
		|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
		|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
		|			КОНЕЦ
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) + СУММА(ЕСТЬNULL(ВТ_ХозрасчетныйОстаткиПС.СуммаОстатокДт, 0)) <> 0 И
		|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) <> 0 И
		|	(СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаОстатокКт) > 0
		|		ИЛИ СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаНУОстатокКт) > 0
		|		ИЛИ СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаПРОстатокКт) > 0
		|		ИЛИ СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаВРОстатокКт) > 0)
		|ИТОГИ
		|	МАКСИМУМ(НоменклатурнаяГруппа)
		|ПО
		|	Склады,
		|	Подразделение";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД);
	Запрос.УстановитьПараметр("НачДата",      Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",      Реквизиты.КонДата);
	Запрос.УстановитьПараметр("КонГраница",   Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	// Заменим обращение к реквизитам склада через переопределяемые функции.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
								"ВТ_ХозрасчетныйОстаткиТН.Субконто1.НоменклатурнаяГруппа",
								БухгалтерскийУчетПереопределяемый.ТекстЗапросаНоменклатурнаяГруппаСклада("ВТ_ХозрасчетныйОстаткиТН.Субконто1"));
	
	Запрос.Текст     = ТекстЗапроса;
	ВыборкаПоСкладам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склады");
	
	Пока ВыборкаПоСкладам.Следующий() Цикл
		
		НоменклатурнаяГруппаВыручки = ВыборкаПоСкладам.НоменклатурнаяГруппа;
		ВыборкаПоПодразделениям     = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
		
		Пока ВыборкаПоПодразделениям.Следующий() Цикл
			//Формируем проводку по списанию торговой наценки
						
			//Расчет торговой наценки
			Если РазделятьПоСтавкамНДС Тогда
				ВыборкаПоСтавкамНДС = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтавкиНДС");
				Пока ВыборкаПоСтавкамНДС.Следующий() Цикл
					ВыборкаДетальная = ВыборкаПоСтавкамНДС.Выбрать();
					Пока ВыборкаДетальная.Следующий() Цикл
						Запись = ТаблицаПроводокРасчетНаценки.Добавить();
						Запись.ЕстьСтавкиНДС = РазделятьПоСтавкамНДС;
						Запись.СчетКт        = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
						Запись.ВидСклада     = "НТТ";
						
						ТН    = ВыборкаДетальная.ТорговаяНаценкаОстаток;
						ТН_НУ = ВыборкаДетальная.ТорговаяНаценкаОстатокНУ;
						ТН_ПР = ВыборкаДетальная.ТорговаяНаценкаОстатокПР;
						ТН_ВР = ВыборкаДетальная.ТорговаяНаценкаОстатокВР;
						ПС    = ВыборкаДетальная.ПродажнаяСтоимостьОстаток;
						ОБ    = ВыборкаДетальная.ПродажнаяСтоимостьРеализация;
						
						СуммаНаценки   	= ТН * ОБ / (ПС + ОБ);
						СуммаНаценкиНУ 	= ТН_НУ * ОБ / (ПС + ОБ);
						СуммаНаценкиПР 	= ТН_ПР * ОБ / (ПС + ОБ);
						СуммаНаценкиВР  = ТН_ВР * ОБ / (ПС + ОБ);
						ПроцентСкидки  	= ТН / (ПС + ОБ) * 100;
						ПроцентСкидкиНУ = ТН_НУ / (ПС + ОБ) * 100;
						ПроцентСкидкиПР = ТН_ПР / (ПС + ОБ) * 100;
						ПроцентСкидкиВР = ТН_ВР / (ПС + ОБ) * 100;
						
						Запись.СчетДт               		= ВыборкаДетальная.СчетСебестоимости;
						Запись.СтавкиНДС            		= ВыборкаДетальная.СтавкиНДС;
						Запись.НоменклатурныеГруппы 		= НоменклатурнаяГруппаВыручки;
						Запись.Склады               		= ВыборкаДетальная.Склады;
						Запись.Подразделение        		= ВыборкаДетальная.Подразделение;
						Запись.ТорговаяНаценкаОстаток 		= ВыборкаДетальная.ТорговаяНаценкаОстаток;
						Запись.ТорговаяНаценкаОстатокНУ 	= ВыборкаДетальная.ТорговаяНаценкаОстатокНУ;
						Запись.ТорговаяНаценкаОстатокПР 	= ВыборкаДетальная.ТорговаяНаценкаОстатокПР;
						Запись.ТорговаяНаценкаОстатокВР 	= ВыборкаДетальная.ТорговаяНаценкаОстатокВР;
						Запись.ПродажнаяСтоимостьОстаток 	= ВыборкаДетальная.ПродажнаяСтоимостьОстаток;
						Запись.ПродажнаяСтоимостьРеализация = ВыборкаДетальная.ПродажнаяСтоимостьРеализация;
						Запись.ПроцентСкидкиНакидки 		= ПроцентСкидки;
						Запись.ПроцентСкидкиНакидкиНУ 		= ПроцентСкидкиНУ;
						Запись.ПроцентСкидкиНакидкиПР 		= ПроцентСкидкиПР;
						Запись.ПроцентСкидкиНакидкиВР 		= ПроцентСкидкиВР;
						Запись.СуммаНаценки         		= -СуммаНаценки;
						Запись.СуммаНаценкиНУ       		= -СуммаНаценкиНУ;
						Запись.СуммаНаценкиПР       		= -СуммаНаценкиПР;
						Запись.СуммаНаценкиВР       		= -СуммаНаценкиВР;
					КонецЦикла;
				КонецЦикла;
			Иначе
				ВыборкаДетальная = ВыборкаПоПодразделениям.Выбрать();
				Пока ВыборкаДетальная.Следующий() Цикл
					Запись = ТаблицаПроводокРасчетНаценки.Добавить();
					Запись.ЕстьСтавкиНДС = РазделятьПоСтавкамНДС;
					Запись.СчетКт        = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
					Запись.ВидСклада     = "НТТ";
					
					ТН 	  = ВыборкаДетальная.ТорговаяНаценкаОстаток;
					ТН_НУ = ВыборкаДетальная.ТорговаяНаценкаОстатокНУ;
					ТН_ПР = ВыборкаДетальная.ТорговаяНаценкаОстатокПР;
					ТН_ВР = ВыборкаДетальная.ТорговаяНаценкаОстатокВР;
					ПС 	  = ВыборкаДетальная.ПродажнаяСтоимостьОстаток;
					ОБ 	  = ВыборкаДетальная.ПродажнаяСтоимостьРеализация;
					
					СуммаНаценки   = ТН * ОБ / (ПС + ОБ);
					СуммаНаценкиНУ = ТН_НУ * ОБ / (ПС + ОБ);
					СуммаНаценкиПР = ТН_ПР * ОБ / (ПС + ОБ);
					СуммаНаценкиВР = ТН_ВР * ОБ / (ПС + ОБ);
					ПроцентСкидки  	= ТН / (ПС + ОБ) * 100;
					ПроцентСкидкиНУ = ТН_НУ / (ПС + ОБ) * 100;
					ПроцентСкидкиПР = ТН_ПР / (ПС + ОБ) * 100;
					ПроцентСкидкиВР = ТН_ВР / (ПС + ОБ) * 100;
					
					Запись.СчетДт               		= ВыборкаДетальная.СчетСебестоимости;
					Запись.НоменклатурныеГруппы 		= НоменклатурнаяГруппаВыручки;
					Запись.Склады               		= ВыборкаДетальная.Склады;
					Запись.Подразделение        		= ВыборкаДетальная.Подразделение;
					Запись.ТорговаяНаценкаОстаток 		= ВыборкаДетальная.ТорговаяНаценкаОстаток;
					Запись.ТорговаяНаценкаОстатокНУ 	= ВыборкаДетальная.ТорговаяНаценкаОстатокНУ;
					Запись.ТорговаяНаценкаОстатокПР 	= ВыборкаДетальная.ТорговаяНаценкаОстатокПР;
					Запись.ТорговаяНаценкаОстатокВР 	= ВыборкаДетальная.ТорговаяНаценкаОстатокВР;
					Запись.ПродажнаяСтоимостьОстаток 	= ВыборкаДетальная.ПродажнаяСтоимостьОстаток;
					Запись.ПродажнаяСтоимостьРеализация = ВыборкаДетальная.ПродажнаяСтоимостьРеализация;
					Запись.СуммаНаценки         		= -СуммаНаценки;
					Запись.СуммаНаценкиНУ       		= -СуммаНаценкиНУ;
					Запись.СуммаНаценкиПР       		= -СуммаНаценкиПР;
					Запись.СуммаНаценкиВР       		= -СуммаНаценкиВР;
					Запись.ПроцентСкидкиНакидки 		= ПроцентСкидки;
					Запись.ПроцентСкидкиНакидкиНУ 		= ПроцентСкидкиНУ;
					Запись.ПроцентСкидкиНакидкиПР 		= ПроцентСкидкиПР;
					Запись.ПроцентСкидкиНакидкиВР 		= ПроцентСкидкиВР;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//АТТ
	РазделятьПоПартиям = БухгалтерскийУчет.НаСчетеВедетсяПартионныйУчет(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ)
						 И УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.КонДата) <> Перечисления.СпособыОценки.ПоСредней;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоПартиям Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",      Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",      Реквизиты.КонДата);
	Запрос.УстановитьПараметр("КонГраница",   Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_Счета9002
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродаж))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Хозрасчетный.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.Номенклатура) КАК Субконто1,
	|	ВЫРАЗИТЬ(Хозрасчетный.Субконто2 КАК Справочник.Склады) КАК Субконто2,
	// Код для замены. Начало
	|	Хозрасчетный.Субконто3 КАК Субконто3,
	// Код для замены. Конец
	|	Хозрасчетный.СуммаОстатокКт КАК СуммаОстатокКт,
	|	Хозрасчетный.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	Хозрасчетный.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	Хозрасчетный.СуммаВРОстатокКт КАК СуммаВРОстатокКт
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиТН
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаАТТ), &ВидыСубконто, Организация = &Организация) КАК Хозрасчетный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	Субконто1,
	// Код для замены. Начало
	|	Субконто3,
	// Код для замены. Конец
	|	Субконто2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Хозрасчетный.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.Номенклатура) КАК Субконто1,
	|	ВЫРАЗИТЬ(Хозрасчетный.Субконто2 КАК Справочник.Склады) КАК Субконто2,
	// Код для замены. Начало
	|	Хозрасчетный.Субконто3 КАК Субконто3,
	// Код для замены. Конец
	|	Хозрасчетный.СуммаОстатокДт КАК СуммаОстатокДт
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиПС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ), &ВидыСубконто, Организация = &Организация) КАК Хозрасчетный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	Субконто1,
	// Код для замены. Начало
	|	Субконто3,
	// Код для замены. Конец
	|	Субконто2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеКт, &ПустоеПодразделение) КАК ПодразделениеКт,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Справочник.НоменклатурныеГруппы) КАК НоменклатурнаяГруппа,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Номенклатура) КАК СубконтоКт1,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Справочник.Склады) КАК СубконтоКт2,
	// Код для замены. Начало
	|	ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК Субконто3,
	// Код для замены. Конец
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОборотыДтКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			СчетДт В
	|				(ВЫБРАТЬ
	|					ВТ_Счета9002.Счет
	|				ИЗ
	|					ВТ_Счета9002),
	|			,
	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ),
	|			&ВидыСубконто,
	|			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПодразделениеКт,
	|	СубконтоКт1,
	// Код для замены. Начало
	|	Субконто3,
	// Код для замены. Конец
	|	СубконтоКт2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ХозрасчетныйОстаткиТН.Подразделение КАК Подразделение,
	|	ВТ_ХозрасчетныйОстаткиТН.Субконто1 КАК Номенклатура,
	|	ВТ_ХозрасчетныйОстаткиТН.Субконто2 КАК Склады,
	// Код для замены. Начало
	|	ВТ_ХозрасчетныйОстаткиТН.Субконто3 КАК Партия,
	// Код для замены. Конец
	|	ВТ_ХозрасчетныйОборотыДтКт.СчетДт КАК СубСчет90_02,
	|	ВТ_ХозрасчетныйОборотыДтКт.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	МАКСИМУМ(ВТ_ХозрасчетныйОстаткиТН.СуммаОстатокКт) КАК ТорговаяНаценкаОстаток,
	|	МАКСИМУМ(ВТ_ХозрасчетныйОстаткиТН.СуммаНУОстатокКт) КАК ТорговаяНаценкаОстатокНУ,
	|	МАКСИМУМ(ВТ_ХозрасчетныйОстаткиТН.СуммаПРОстатокКт) КАК ТорговаяНаценкаОстатокПР,
	|	МАКСИМУМ(ВТ_ХозрасчетныйОстаткиТН.СуммаВРОстатокКт) КАК ТорговаяНаценкаОстатокВР,
	|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) КАК ПродажнаяСтоимостьРеализация,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_ХозрасчетныйОстаткиПС.СуммаОстатокДт, 0)) КАК ПродажнаяСтоимостьОстаток
	|ИЗ
	|	ВТ_ХозрасчетныйОстаткиТН КАК ВТ_ХозрасчетныйОстаткиТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОборотыДтКт КАК ВТ_ХозрасчетныйОборотыДтКт
	|		ПО ВТ_ХозрасчетныйОстаткиТН.Подразделение = ВТ_ХозрасчетныйОборотыДтКт.ПодразделениеКт
	|			И ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_ХозрасчетныйОборотыДтКт.СубконтоКт1
	|			И ВТ_ХозрасчетныйОстаткиТН.Субконто2 = ВТ_ХозрасчетныйОборотыДтКт.СубконтоКт2
	// Код для замены. Начало
	|			И ВТ_ХозрасчетныйОстаткиТН.Субконто3 = ВТ_ХозрасчетныйОборотыДтКт.Субконто3
	// Код для замены. Конец
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОстаткиПС КАК ВТ_ХозрасчетныйОстаткиПС
	|		ПО ВТ_ХозрасчетныйОстаткиТН.Подразделение = ВТ_ХозрасчетныйОстаткиПС.Подразделение
	|			И ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_ХозрасчетныйОстаткиПС.Субконто1
	|			И ВТ_ХозрасчетныйОстаткиТН.Субконто2 = ВТ_ХозрасчетныйОстаткиПС.Субконто2
	// Код для замены. Начало
	|			И ВТ_ХозрасчетныйОстаткиТН.Субконто3 = ВТ_ХозрасчетныйОстаткиПС.Субконто3
	// Код для замены. Конец
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ХозрасчетныйОстаткиТН.Подразделение,
	|	ВТ_ХозрасчетныйОстаткиТН.Субконто1,
	|	ВТ_ХозрасчетныйОстаткиТН.Субконто2,
	// Код для замены. Начало
	|	ВТ_ХозрасчетныйОстаткиТН.Субконто3,
	// Код для замены. Конец
	|	ВТ_ХозрасчетныйОборотыДтКт.СчетДт,
	|	ВТ_ХозрасчетныйОборотыДтКт.НоменклатурнаяГруппа
	|
	|ИТОГИ ПО
	|	Подразделение,
	|	Номенклатура,
	|	Склады,
	|	Партия,
	|	СубСчет90_02,
	|	НоменклатурнаяГруппа";
	
	Если НЕ РазделятьПоПартиям Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ВТ_ХозрасчетныйОстаткиТН.Субконто3 = ВТ_ХозрасчетныйОборотыДтКт.Субконто3", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ВТ_ХозрасчетныйОстаткиТН.Субконто3 = ВТ_ХозрасчетныйОстаткиПС.Субконто3",   "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК Субконто3,",                        "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	Хозрасчетный.Субконто3 КАК Субконто3,",                                     "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ХозрасчетныйОстаткиТН.Субконто3 КАК Партия", "НЕОПРЕДЕЛЕНО КАК Партия");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ХозрасчетныйОстаткиТН.Субконто3,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	Субконто3,",                        "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаПоПодразделениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		ВыборкаПоНоменклатуре = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			ВыборкаПоСкладам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склады");
			Пока ВыборкаПоСкладам.Следующий() Цикл
				ВыборкаПоПартиям = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,  "Партия");
				Пока ВыборкаПоПартиям.Следующий() Цикл
					
					ТН 		 = ВыборкаПоПартиям.ТорговаяНаценкаОстаток;
					ТН_НУ 	 = ВыборкаПоПартиям.ТорговаяНаценкаОстатокНУ;
					ТН_ПР 	 = ВыборкаПоПартиям.ТорговаяНаценкаОстатокПР;
					ТН_ВР 	 = ВыборкаПоПартиям.ТорговаяНаценкаОстатокВР;
					ПС 		 = ВыборкаПоПартиям.ПродажнаяСтоимостьОстаток;
					ОБ_Всего = ВыборкаПоПартиям.ПродажнаяСтоимостьРеализация;
					
					ВыборкаПоСчетам = ВыборкаПоПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СубСчет90_02");
					Пока ВыборкаПоСчетам.Следующий() Цикл
						ВыборкаПоНГ = ВыборкаПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатурнаяГруппа");
						Пока ВыборкаПоНГ.Следующий() Цикл
							//Расчет торговой наценки
							
							ОБ = ВыборкаПоНГ.ПродажнаяСтоимостьРеализация;
							
							Если ПС + ОБ_Всего = 0 Тогда
								Продолжить;
							Иначе
								СуммаНаценки   	= ТН * ОБ / (ПС + ОБ_Всего);
								СуммаНаценкиНУ 	= ТН_НУ * ОБ / (ПС + ОБ_Всего);
								СуммаНаценкиПР 	= ТН_ПР * ОБ / (ПС + ОБ_Всего);
								СуммаНаценкиВР 	= ТН_ВР * ОБ / (ПС + ОБ_Всего);
								ПроцентСкидки  	= ТН / (ПС + ОБ_Всего) * 100;
								ПроцентСкидкиНУ = ТН_НУ / (ПС + ОБ_Всего) * 100;
								ПроцентСкидкиПР = ТН_ПР / (ПС + ОБ_Всего) * 100;
								ПроцентСкидкиВР = ТН_ВР / (ПС + ОБ_Всего) * 100;
							КонецЕсли;
							
							Если (СуммаНаценки <> 0) ИЛИ (СуммаНаценкиНУ <> 0) ИЛИ (СуммаНаценкиПР <> 0) ИЛИ (СуммаНаценкиВР <> 0) Тогда
								
								//Формируем проводку по списанию торговой наценки
								Запись = ТаблицаПроводокРасчетНаценки.Добавить();
								Запись.СчетДт         				= ВыборкаПоНГ.СубСчет90_02;
								Запись.НоменклатурныеГруппы 		= ВыборкаПоНГ.НоменклатурнаяГруппа;
								Запись.СчетКт         				= ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
								Запись.ВидСклада      				= "АТТ";
								Запись.ЕстьПартии     				= РазделятьПоПартиям;
								Запись.Номенклатура   				= ВыборкаПоПартиям.Номенклатура;
								Запись.Склады         				= ВыборкаПоПартиям.Склады;
								Запись.Подразделение 				= ВыборкаПоПартиям.Подразделение;
								Запись.СуммаНаценки	 	 			= -СуммаНаценки;
								Запись.СуммаНаценкиНУ 				= -СуммаНаценкиНУ;
								Запись.СуммаНаценкиПР 				= -СуммаНаценкиПР;
								Запись.СуммаНаценкиВР 				= -СуммаНаценкиВР;
								Запись.ПроцентСкидкиНакидки 		= ПроцентСкидки;
								Запись.ПроцентСкидкиНакидкиНУ 		= ПроцентСкидкиНУ;
								Запись.ПроцентСкидкиНакидкиПР 		= ПроцентСкидкиПР;
								Запись.ПроцентСкидкиНакидкиВР 		= ПроцентСкидкиВР;
								Запись.ТорговаяНаценкаОстаток 		= ВыборкаПоНГ.ТорговаяНаценкаОстаток;
								Запись.ТорговаяНаценкаОстатокНУ 	= ВыборкаПоНГ.ТорговаяНаценкаОстатокНУ;
								Запись.ТорговаяНаценкаОстатокПР 	= ВыборкаПоНГ.ТорговаяНаценкаОстатокПР;
								Запись.ТорговаяНаценкаОстатокВР 	= ВыборкаПоНГ.ТорговаяНаценкаОстатокВР;
								Запись.ПродажнаяСтоимостьОстаток 	= ВыборкаПоНГ.ПродажнаяСтоимостьОстаток;
								Запись.ПродажнаяСтоимостьРеализация = ВыборкаПоНГ.ПродажнаяСтоимостьРеализация;
								
								Если РазделятьПоПартиям Тогда
									Запись.Партии     = ВыборкаПоПартиям.Партия;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПроводокРасчетНаценки;
	
КонецФункции // ПодготовитьТаблицуРасчетТорговойНаценки()

Функция ПолучитьТаблицаРасчетНаценки()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТипаЧисла15_8 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 8);
	ОписаниеТипаСчетХозр  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	ОписаниеТипаБулево    = Новый ОписаниеТипов("Булево");
	
	ТаблицаРасчетНаценки = Новый ТаблицаЗначений;
	ТаблицаРасчетНаценки.Колонки.Добавить("ПродажнаяСтоимостьРеализация",	ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("ПродажнаяСтоимостьОстаток",   	ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("ТорговаяНаценкаОстаток", 		ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("ТорговаяНаценкаОстатокНУ",   	ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("ТорговаяНаценкаОстатокПР",   	ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("ТорговаяНаценкаОстатокВР", 		ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("ПроцентСкидкиНакидки",	 		ОписаниеТипаЧисла15_8);
	ТаблицаРасчетНаценки.Колонки.Добавить("ПроцентСкидкиНакидкиНУ",	 		ОписаниеТипаЧисла15_8);
	ТаблицаРасчетНаценки.Колонки.Добавить("ПроцентСкидкиНакидкиПР",	 		ОписаниеТипаЧисла15_8);
	ТаблицаРасчетНаценки.Колонки.Добавить("ПроцентСкидкиНакидкиВР",	 		ОписаниеТипаЧисла15_8);
	ТаблицаРасчетНаценки.Колонки.Добавить("СуммаНаценки",         			ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("СуммаНаценкиНУ",       			ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("СуммаНаценкиПР",       			ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("СуммаНаценкиВР",       			ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("СчетДт",               			ОписаниеТипаСчетХозр);
	ТаблицаРасчетНаценки.Колонки.Добавить("СчетКт",               			ОписаниеТипаСчетХозр);
	ТаблицаРасчетНаценки.Колонки.Добавить("ВидСклада",            			ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ТаблицаРасчетНаценки.Колонки.Добавить("ЕстьПартии",           			ОписаниеТипаБулево);
	ТаблицаРасчетНаценки.Колонки.Добавить("ЕстьСтавкиНДС",        			ОписаниеТипаБулево);
	ТаблицаРасчетНаценки.Колонки.Добавить("Склады",               			Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаРасчетНаценки.Колонки.Добавить("Партии");
	ТаблицаРасчетНаценки.Колонки.Добавить("СтавкиНДС",            			Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаРасчетНаценки.Колонки.Добавить("Номенклатура",         			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРасчетНаценки.Колонки.Добавить("НоменклатурныеГруппы", 			БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповНоменклатурнойГруппы());
	ТаблицаРасчетНаценки.Колонки.Добавить("Подразделение",        			БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	
	Возврат ТаблицаРасчетНаценки;
	
КонецФункции

Функция ПодготовитьПараметрыРасчетТорговойНаценки(ТаблицаРасчетНаценки, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаПроводокРасчетНаценки
	
	СписокОбязательныхКолонок = ""
	+ "ПродажнаяСтоимостьРеализация,"         // <Число, 15, 2>
	+ "ПродажнаяСтоимостьОстаток,"         // <Число, 15, 2>
	+ "ТорговаяНаценкаОстаток,"  // <Число, 15, 2>
	+ "ТорговаяНаценкаОстатокНУ,"  // <Число, 15, 2>
	+ "ТорговаяНаценкаОстатокПР,"  // <Число, 15, 2>
	+ "ТорговаяНаценкаОстатокВР,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидки,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидкиНУ,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидкиПР,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидкиВР,"  // <Число, 15, 2>
	+ "СуммаНаценки,"         // <Число, 15, 2>
	+ "СуммаНаценкиНУ,"       // <Число, 15, 2>
	+ "СуммаНаценкиПР,"       // <Число, 15, 2>
	+ "СуммаНаценкиВР,"       // <Число, 15, 2>
	+ "СчетДт,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетКт,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВидСклада,"            // <Строка, 3>
	+ "ЕстьПартии,"           // <Булево>
	+ "ЕстьСтавкиНДС,"        // <Булево>
	+ "Склады,"               // <СправочникСсылка.Склады>
	+ "Партии,"
	+ "СтавкиНДС,"            // <ПеречислениеСсылка.СтавкиНДС>
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "НоменклатурныеГруппы," // <СправочникСсылка.НоменклатурныеГруппы>
	+ "Подразделение"         // <Ссылка на справочник подразделений>
	;
	
	Параметры.Вставить("ТаблицаПроводокРасчетНаценки", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетНаценки, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "ПродажнаяСтоимостьРеализация,"         // <Число, 15, 2>
	+ "ПродажнаяСтоимостьОстаток,"         // <Число, 15, 2>
	+ "ТорговаяНаценкаОстаток,"  // <Число, 15, 2>
	+ "ТорговаяНаценкаОстатокНУ,"  // <Число, 15, 2>
	+ "ТорговаяНаценкаОстатокПР,"  // <Число, 15, 2>
	+ "ТорговаяНаценкаОстатокВР,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидки,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидкиНУ,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидкиПР,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидкиВР,"  // <Число, 15, 2>
	+ "СуммаНаценки,"         // <Число, 15, 2>
	+ "СуммаНаценкиНУ,"       // <Число, 15, 2>
	+ "СуммаНаценкиПР,"       // <Число, 15, 2>
	+ "СуммаНаценкиВР,"       // <Число, 15, 2>
	+ "ВидСклада,"            // <Строка, 3>
	+ "СчетКт,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "Склады,"               // <СправочникСсылка.Склады>
	+ "Партии,"
	+ "СтавкиНДС,"            // <ПеречислениеСсылка.СтавкиНДС>
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "Подразделение"         // <Ссылка на справочник подразделений>
	;
	
	Параметры.Вставить("ТаблицаДвиженийРегистраРасчетНаценки", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетНаценки, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                          // <Дата>
	+ "НачДата,"                         // <Дата>
	+ "КонДата,"                         // <Дата>
	+ "Организация,"                     // <СправочникСсылка.Организации>
	+ "Регистратор,"                     // <ДокументСсылка.*>
	+ "Содержание"                       // <Строка, 150>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыРасчетТорговойНаценки()

// СПИСАНИЕ УБЫТКОВ ПРОШЛЫХ ЛЕТ

Процедура СформироватьДвиженияСписаниеУбытков(ТаблицаУбытков, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры       = ПодготовитьПараметрыСписаниеУбытков(ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ПоддержкаПБУ18  = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
		
	Для каждого УбытокПрошлогоПериода Из ТаблицаУбытков Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период                            = Реквизиты.Период;
		Проводка.Организация                       = Реквизиты.Организация;
		Проводка.СчетДт                            = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		Проводка.СубконтоДт.ПрибылиИУбытки         = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Проводка.СчетКт                            = УбытокПрошлогоПериода.Счет;
		Проводка.СубконтоКт.РасходыБудущихПериодов = УбытокПрошлогоПериода.РБП;
		Проводка.Содержание                        = Реквизиты.Содержание;
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
			УбытокПрошлогоПериода.СуммаНУ, УбытокПрошлогоПериода.СуммаНУ, 0, 0,
			-УбытокПрошлогоПериода.СуммаНУ, -УбытокПрошлогоПериода.СуммаНУ, 
			Проводка, ПоддержкаПБУ18); 
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвиженияСписаниеУбытков()

Функция ПодготовитьТаблицуУбытков(ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыСписаниеУбытков(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	// В данном случае речь заведомо не о первом налоговом периоде,
	// поэтому особенности определения первого налогового периода не учитываем
	НачалоНалоговогоПериода = НачалоГода(Реквизиты.НачДата); 
	
	ТаблицаПереносаУбытков = Новый ТаблицаЗначений;
	ТаблицаПереносаУбытков.Колонки.Добавить("Счет", 	Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПереносаУбытков.Колонки.Добавить("РБП", 		Новый ОписаниеТипов("СправочникСсылка.РасходыБудущихПериодов"));
	ТаблицаПереносаУбытков.Колонки.Добавить("СуммаНУ", 	ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	// Получим сумму распределяемого убытка
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода",  НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонДата",     Реквизиты.КонДата);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияСписания", НачалоДня(Реквизиты.КонДата));
	Запрос.УстановитьПараметр("Счета99",     БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД));
	Запрос.УстановитьПараметр("Счета97",     БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов));
	
	// До налогового периода 2017 года можно было списывать убытки за 10 предыдущих лет
	// С 2017 года этот период зафиксирован "снизу" (401-ФЗ): 
	// можно списывать убытки прошлых лет, начиная с 2007 года, бессрочно
	Если Реквизиты.КонДата < '2017-01-01' Тогда
		// Здесь проверяем только, что срок списания убытка не истек 
		Запрос.УстановитьПараметр("ДатаНачалаСписания", '0001-01-01');
		Запрос.УстановитьПараметр("ПродолжительностьСписанияУбытковОграничена", Истина);
	Иначе
		// Убытки 2007 года списываются начиная с 01.01.2008
		Запрос.УстановитьПараметр("ДатаНачалаСписания", '2008-01-01');
		Запрос.УстановитьПараметр("ПродолжительностьСписанияУбытковОграничена", Ложь);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка КАК Ссылка,
	|	РасходыБудущихПериодов.ДатаНачалаСписания КАК ДатаНачалаСписания
	|ПОМЕСТИТЬ СправочникРБП
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|ГДЕ
	|	РасходыБудущихПериодов.ВидРБП = ЗНАЧЕНИЕ(Перечисление.ВидыРБП.УбыткиПрошлыхЛет)
	|	И РасходыБудущихПериодов.ДатаНачалаСписания МЕЖДУ &ДатаНачалаСписания И &НачалоГода
	|	И (НЕ &ПродолжительностьСписанияУбытковОграничена
	|			ИЛИ РасходыБудущихПериодов.ДатаОкончанияСписания >= &ДатаОкончанияСписания)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК РБП,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК СуммаНУ,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУКонечныйОстаток) КАК Остаток
	|ПОМЕСТИТЬ ХозрасчетныйОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоГода,
	|			&КонДата,
	|			,
	|			,
	|			Счет В (&Счета97),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СправочникРБП.Ссылка
	|					ИЗ
	|						СправочникРБП КАК СправочникРБП)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникРБП.Ссылка КАК РБП,
	|	СправочникРБП.ДатаНачалаСписания КАК Год,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.СуммаНУ КАК УбыткаСписано,
	|	ХозрасчетныйОбороты.Остаток КАК ОстатокУбытка
	|ИЗ
	|	ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправочникРБП КАК СправочникРБП
	|		ПО ХозрасчетныйОбороты.РБП = СправочникРБП.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год";
	
	ТаблицаУбытков = Запрос.Выполнить().Выгрузить();
	
	СписанныйРанееУбыток 	= ТаблицаУбытков.Итог("УбыткаСписано");
	ВсегоОстатокУбытков 	= ТаблицаУбытков.Итог("ОстатокУбытка");
	
	ПрибыльНУ = РасчетНалогаНаПрибыль.НалоговаяБаза(НачалоНалоговогоПериода, Реквизиты.КонДата, Реквизиты.Организация);
	
	Если ПрибыльНУ <= 0 И СписанныйРанееУбыток = 0 Тогда
		Возврат ТаблицаПереносаУбытков;
	КонецЕсли;
	
	// ПрибыльНУ может включать убытки, которые в прошлых отчетных периодах уменьшили налогооблагаемую базу текущего налогового периода
	// Для расчета ограничения списания убытков 
	// рассчитаем прибыль текущего периода (с начала года по конец отчетного месяца) без учета признанных убытков прошлых лет
	ПрибыльНУТекущегоПериода = ПрибыльНУ + СписанныйРанееУбыток;
		
	// Если есть прибыль без учета списанных ранее убытков прошлых лет, то считаем ограничение на сумму переноса убытков в текущем периоде
	// Если в текущем периоде получен убыток (или прибыль = 0), то убытки прошлых лет списывать нельзя - 
	// нужно сторнировать перенесенные ранее суммы убытков
	СписаниеУбытка = 0;
	Если ПрибыльНУТекущегоПериода > 0 Тогда
		КоэффициентОграниченияУбытков =  НалоговыйУчет.МаксимальнаяДоляУменьшенияПрибылиЗаСчетУбытковПрошлыхЛет(Реквизиты.КонДата);
		Если КоэффициентОграниченияУбытков < 1 Тогда
			ЛимитСписанияУбытка = Цел(ПрибыльНУТекущегоПериода * КоэффициентОграниченияУбытков);
		Иначе
			ЛимитСписанияУбытка = ПрибыльНУТекущегоПериода;
		КонецЕсли;		
		СписаниеУбытка = Мин(ВсегоОстатокУбытков + СписанныйРанееУбыток, ЛимитСписанияУбытка);		
	КонецЕсли;
	
	СуммаСписания = СписаниеУбытка - СписанныйРанееУбыток;
	
	Если СуммаСписания < 0 Тогда
		// В первую очередь сторнируем убытки наиболее поздних периодов
		ТаблицаУбытков.Сортировать("Год Убыв");
	КонецЕсли;
	
	// Заполним итоговую таблицу убытков для формирования проводок
	Для Каждого УбытокПрошлогоПериода Из ТаблицаУбытков Цикл
		
		Если СуммаСписания = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПереносУбытка = ТаблицаПереносаУбытков.Добавить();
		ЗаполнитьЗначенияСвойств(ПереносУбытка, УбытокПрошлогоПериода, "Счет, РБП");
		
		Если СуммаСписания > 0 Тогда 
			СуммаУбыткаМожноСписать = Мин(СуммаСписания, УбытокПрошлогоПериода.ОстатокУбытка);
		Иначе
			СуммаУбыткаМожноСписать = Макс(СуммаСписания, -УбытокПрошлогоПериода.УбыткаСписано);
		КонецЕсли;
		
		ПереносУбытка.СуммаНУ = СуммаУбыткаМожноСписать;
		СуммаСписания         = СуммаСписания - СуммаУбыткаМожноСписать;
					
	КонецЦикла;	
	
	Возврат ТаблицаПереносаУбытков;
	
КонецФункции

Функция ПодготовитьПараметрыСписаниеУбытков(ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"       // <Дата>
	+ "НачДата,"      // <Дата>
	+ "КонДата,"      // <Дата>
	+ "Организация,"  // <СправочникСсылка.Организации>
	+ "Регистратор,"  // <ДокументСсылка.*>
	+ "Содержание"   // <Строка, 150>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыСписаниеУбытков()

// ЗАКРЫТИЕ СЧЕТОВ 90, 91

#Область ВыявлениеФинансовогоРезультата

#Область Счета90и91

Процедура СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(Движения, Проводки, Период, Организация) Экспорт
	
	СодержаниеПроводки = НСтр("ru = 'Определение финансовых результатов'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
	
	ПоддержкаПБУ18  = УчетнаяПолитика.ПоддержкаПБУ18(Организация, Период);
	
	Для Каждого Запись Из Проводки Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.СчетДт      = Запись.СчетДт;
		Проводка.СчетКт      = Запись.СчетКт;
		
		Если Запись.ЭтоПрибыль Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
											"ПрибылиИУбытки", Запись.ПрибылиИУбытки);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
											"ПрибылиИУбытки", Запись.ПрибылиИУбытки);
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, Запись.Подразделение, Запись.Подразделение);
		
		Проводка.Сумма = Запись.Сумма;
		СуммаНУ        = Запись.СуммаНУ;
		СуммаПР        = Запись.СуммаПР;
		СуммаВР        = Запись.СуммаВР;
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ, СуммаНУ, СуммаПР, СуммаПР,
								СуммаВР, СуммаВР, Проводка, ПоддержкаПБУ18);
		Проводка.Содержание = СодержаниеПроводки;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91()

Функция ПолучитьТаблицаЗакрытияСчетов90_91()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТипаСчетХозр  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	
	ТаблицаЗакрытияСчетов90_91 = Новый ТаблицаЗначений;
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СчетДт",         ОписаниеТипаСчетХозр);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СчетКт",         ОписаниеТипаСчетХозр);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("Сумма",          ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаНУ",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаПР",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаВР",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("ЭтоПрибыль",     Новый ОписаниеТипов("Булево"));
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("ПрибылиИУбытки", Новый ОписаниеТипов("ПеречислениеСсылка.ПрибылиИУбытки"));
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("Подразделение",  БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	
	Возврат ТаблицаЗакрытияСчетов90_91;
	
КонецФункции

Функция ПодготовитьПараметрыЗакрытиеСчетов90_91(ТаблицаПроводок, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаЗакрытияСчетов90_91
	
	СписокОбязательныхКолонок = ""
	+ "Сумма,"          // <Число, 15, 2>
	+ "СуммаНУ,"        // <Число, 15, 2>
	+ "СуммаПР,"        // <Число, 15, 2>
	+ "СуммаВР,"        // <Число, 15, 2>
	+ "СчетДт,"         // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетКт,"         // <ПланСчетовСсылка.Хозрасчетный>
	+ "ЭтоПрибыль,"     // <Булево>
	+ "ПрибылиИУбытки," // <ПеречислениеСсылка.ПрибылиИУбытки>
	+ "Подразделение"   // <Ссылка на справочник подразделений>
	;
	
	Параметры.Вставить("ТаблицаЗакрытияСчетов90_91", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПроводок, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"          // <Дата>
	+ "НачДата,"         // <Дата>
	+ "КонДата,"         // <Дата>
	+ "Организация,"     // <СправочникСсылка.Организации>
	+ "Регистратор,"     // <ДокументСсылка.*>
	+ "КоэффициентЕНВД," // <Число, 15, 2>
	+ "Содержание"       // <Строка, 150>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыЗакрытиеСчетов90_91()

#КонецОбласти

#Область Счет90

Функция ПроводкиЗакрытиеСчета90(Период, Организация) Экспорт
	
	НачалоПериода = НачалоМесяца(Период);
	КонецПериода  = КонецМесяца(Период);
	Организации   = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	
	Проводки = ПолучитьТаблицаЗакрытияСчетов90_91();
	
	Прибыль = ПрибыльОтПродаж(НачалоПериода, КонецПериода, Организации);
	ДополнитьТаблицаЗакрытияСчетов90_91ПрибыльюОтПродаж(Проводки, Прибыль);
	
	ОписаниеСумм = НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм(Истина, Истина);
	
	РанееСформированныеПроводки = РанееСформированныеПроводкиПрибыльОтПродаж(НачалоПериода, КонецПериода, Организации);
	
	// Вычтем РанееСформированныеПроводки из Проводки
	Для Каждого ПроводкаСторно Из РанееСформированныеПроводки Цикл
		Проводка = Проводки.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, ПроводкаСторно, , КоллекцииСумм.ИменаСвойствСтрокой(ОписаниеСумм));
		КоллекцииСумм.Вычесть(Проводка, ПроводкаСторно, ОписаниеСумм);
	КонецЦикла;
	
	// Свернем
	КолонкиСумм        = КоллекцииСумм.ИменаСвойств(ОписаниеСумм);
	КолонкиГруппировок = Новый Массив;
	Для Каждого Колонка Из Проводки.Колонки Цикл
		Если КолонкиСумм.Найти(Колонка.Имя) = Неопределено Тогда
			КолонкиГруппировок.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
			
	Проводки.Свернуть(СтрСоединить(КолонкиГруппировок, ","), КоллекцииСумм.ИменаСвойствСтрокой(ОписаниеСумм));
	
	// Удалим пустые проводки
	КоличествоПроводок = Проводки.Количество();
	Для НомерСКонца = 1 По КоличествоПроводок Цикл
		Проводка = Проводки[КоличествоПроводок - НомерСКонца];
		Если КоллекцииСумм.Пустая(Проводка, ОписаниеСумм) Тогда
			Проводки.Удалить(Проводка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Проводки;
	
КонецФункции

Функция НовыйПрибыльОтПродаж(ОписаниеКоллекцииСумм = Неопределено)
	
	Если ОписаниеКоллекцииСумм = Неопределено Тогда
		ОписаниеКоллекцииСумм = НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм(Истина, Истина); // Всегда включаем все четыре суммы
	КонецЕсли;
	
	Прибыль = Новый ТаблицаЗначений;
	Прибыль.Колонки.Добавить("ОсновнаяСистемаНалогообложения", Новый ОписаниеТипов("Булево"));
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Прибыль, ОписаниеКоллекцииСумм);
	
	Возврат Прибыль;
	
КонецФункции

Функция ПрибыльОтПродаж(НачалоПериода, КонецПериода, Организации)
	
	ОписаниеКоллекцииСумм = НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм(Истина, Истина);
	
	Прибыль = НовыйПрибыльОтПродаж(ОписаниеКоллекцииСумм);
	
	Счет90 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Продажи);
	// На счете 90 есть субсчета 
	// - "накопительные" - для учета доходов и расходов в течение периода (90.01, 90.02 и т.д.)
	// - "закрывающий" - для учета финансового результата по окончании периода (90.09)
	// Финансовый результат определяется сопоставлением оборотов по накопительным счетам.
	// При этом следует исключить обороты между "накопительными" и "закрывающим" счетами, которые могут быть сформированы при закрытии года.
	НакопительныеСубсчетаСчета90 = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		Счет90,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж));// 90.09
		
	// Получим список счетов, предназначенных для учета доходов и расходов деятельности с особым порядком налогообложения
	ПрименяетсяОсобыйПорядокНалогообложения = Ложь;
	Для Каждого Организация Из Организации Цикл
		
		ПрименяетсяОсобыйПорядокНалогообложения = Не УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложенияЗаПериод(
			Организация,
			НачалоПериода,
			КонецПериода);
			
		Если ПрименяетсяОсобыйПорядокНалогообложения Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПрименяетсяОсобыйПорядокНалогообложения Тогда
		СчетаОсобыйПорядокНалогообложения = Новый Массив;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НакопительныеСубсчетаСчета90", НакопительныеСубсчетаСчета90);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаДоходовИРасходовЕНВД.Счет
		|ИЗ
		|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
		|ГДЕ
		|	СчетаДоходовИРасходовЕНВД.Счет В(&НакопительныеСубсчетаСчета90)";
		СчетаОсобыйПорядокНалогообложения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",                     НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",                      КонецПериода);
	Запрос.УстановитьПараметр("Организации",                       Организации);
	Запрос.УстановитьПараметр("НакопительныеСубсчетаСчета90",      НакопительныеСубсчетаСчета90);
	Запрос.УстановитьПараметр("СчетаОсобыйПорядокНалогообложения", СчетаОсобыйПорядокНалогообложения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НЕ Хозрасчетный.Счет В (&СчетаОсобыйПорядокНалогообложения) КАК ОсновнаяСистемаНалогообложения,
	|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0)) КАК СуммаВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&НакопительныеСубсчетаСчета90), , Организация В (&Организации), КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж), ) КАК Хозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	НЕ Хозрасчетный.Счет В (&СчетаОсобыйПорядокНалогообложения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнаяСистемаНалогообложения УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Прибыль.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Прибыль;
	
КонецФункции

Функция РанееСформированныеПроводкиПрибыльОтПродаж(НачалоПериода, КонецПериода, Организации)
	
	// Обратное преобразование к СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91()
	
	Проводки = ПолучитьТаблицаЗакрытияСчетов90_91();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организации",   Организации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЭтоПрибыль,
	|	Прибыль.Подразделение КАК Подразделение,
	|	Прибыль.Субконто1 КАК ПрибылиИУбытки,
	|	Прибыль.Счет КАК СчетКт,
	|	Прибыль.КорСчет КАК СчетДт,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаОборотКт, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаНУОборотКт, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаПРОборотКт, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаВРОборотКт, 0)) КАК СуммаВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД)), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки), Организация В (&Организации), КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж), ) КАК Прибыль
	|
	|СГРУППИРОВАТЬ ПО
	|	Прибыль.Счет,
	|	Прибыль.КорСчет,
	|	Прибыль.Подразделение,
	|	Прибыль.Субконто1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	Убыток.Подразделение,
	|	Убыток.Субконто1,
	|	Убыток.КорСчет,
	|	Убыток.Счет,
	|	СУММА(ЕСТЬNULL(Убыток.СуммаОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаНУОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаПРОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаВРОборотДт, 0))
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД)), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки), Организация В (&Организации), КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж), ) КАК Убыток
	|
	|СГРУППИРОВАТЬ ПО
	|	Убыток.Счет,
	|	Убыток.КорСчет,
	|	Убыток.Подразделение,
	|	Убыток.Субконто1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Проводки.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Проводки;
	
КонецФункции

Процедура ДополнитьТаблицаЗакрытияСчетов90_91ПрибыльюОтПродаж(Проводки, Прибыль)
	
	// См. также РанееВыявленнаяПрибыльОтПродаж()
	
	ОписаниеКоллекции = НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм(Истина, Истина);
	
	Для Каждого ЗаписьПрибыль Из Прибыль Цикл
		
		Если КоллекцииСумм.Пустая(ЗаписьПрибыль, ОписаниеКоллекции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаписьПрибыль.ОсновнаяСистемаНалогообложения Тогда
			СчетПрибылиЗаМесяц = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		Иначе
			СчетПрибылиЗаМесяц = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
		КонецЕсли;
		
		ОписаниеПроводки = Проводки.Добавить();
		Если ЗаписьПрибыль.Сумма > 0 Или (ЗаписьПрибыль.Сумма = 0 И ЗаписьПрибыль.СуммаНУ > 0) Тогда
			// Прибыль
			ОписаниеПроводки.ЭтоПрибыль     = Истина;
			ОписаниеПроводки.СчетДт         = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
			ОписаниеПроводки.СчетКт         = СчетПрибылиЗаМесяц;
			ОписаниеПроводки.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
			КоллекцииСумм.Заполнить(ОписаниеПроводки, ЗаписьПрибыль, ОписаниеКоллекции);
		Иначе
			// Убыток
			ОписаниеПроводки.ЭтоПрибыль     = Ложь;
			ОписаниеПроводки.СчетДт         = СчетПрибылиЗаМесяц;
			ОписаниеПроводки.СчетКт         = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
			ОписаниеПроводки.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
			Убыток = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеКоллекции);
			КоллекцииСумм.Вычесть(Убыток, ЗаписьПрибыль, ОписаниеКоллекции); // Поменяем знак
			КоллекцииСумм.Заполнить(ОписаниеПроводки, Убыток, ОписаниеКоллекции);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Счет91

Функция ПодготовитьТаблицыЗакрытиеСчета91(ТаблицаРеквизиты, СписокОрганизаций, Отказ) Экспорт
	
	ЗакрытиеСчетов90_91 = ПолучитьТаблицаЗакрытияСчетов90_91();
	Параметры = ПодготовитьПараметрыЗакрытиеСчетов90_91(ЗакрытиеСчетов90_91, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаПроводок = Параметры.ТаблицаЗакрытияСчетов90_91;
	
	ПрименяетсяОсобыйПорядокНалогообложения = Ложь;
	
	Для Каждого ЭлементСписка Из СписокОрганизаций Цикл
		
		ПрименяетсяОсобыйПорядокНалогообложения = Не УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложенияЗаПериод(
			ЭлементСписка.Значение,
			Реквизиты.НачДата,
			Реквизиты.КонДата);
			
		Если ПрименяетсяОсобыйПорядокНалогообложения Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",           Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",           Реквизиты.КонДата);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("КоэффициентЕНВД",   Реквизиты.КоэффициентЕНВД);
	Запрос.УстановитьПараметр("Счета91",           БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы));
	
	Если ПрименяетсяОсобыйПорядокНалогообложения Тогда
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД) КАК СчетПрибылейИУбытков,
		|	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
		|	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
		|	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
		|	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
		|ПОМЕСТИТЬ ВТ_Закрытие91_НеЕНВД
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачДата,
		|			&КонДата,
		|			,
		|			Счет В (&Счета91),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
		|			Организация В (&СписокОрганизаций)
		|				И (ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
		|					ИЛИ Субконто1 = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)),
		|			НЕ КорСчет В (&Счета91),
		|			) КАК Хозрасчетный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
		|	(ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0)) * (1 - &КоэффициентЕНВД),
		|	(ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0)) * (1 - &КоэффициентЕНВД),
		|	(ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0)) * (1 - &КоэффициентЕНВД),
		|	(ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)) * (1 - &КоэффициентЕНВД)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачДата,
		|			&КонДата,
		|			,
		|			Счет В (&Счета91),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
		|			Организация В (&СписокОрганизаций)
		|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты),
		|			,
		|			) КАК Хозрасчетный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД) КАК СчетПрибылейИУбытков,
		|	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
		|	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
		|	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
		|	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
		|ПОМЕСТИТЬ ВТ_Закрытие91_ЕНВД
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачДата,
		|			&КонДата,
		|			,
		|			Счет В (&Счета91),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
		|			Организация В (&СписокОрганизаций)
		|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения),
		|			НЕ КорСчет В (&Счета91),
		|			) КАК Хозрасчетный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД),
		|	(ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0)) * &КоэффициентЕНВД,
		|	(ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0)) * &КоэффициентЕНВД,
		|	(ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0)) * &КоэффициентЕНВД,
		|	(ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)) * &КоэффициентЕНВД
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачДата,
		|			&КонДата,
		|			,
		|			Счет В (&Счета91),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
		|			Организация В (&СписокОрганизаций)
		|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты),
		|			,
		|			) КАК Хозрасчетный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Закрытие91_НеЕНВД.СчетПрибылейИУбытков КАК СчетПрибылейИУбытков,
		|	СУММА(ВТ_Закрытие91_НеЕНВД.Прибыль) КАК Прибыль,
		|	СУММА(ВТ_Закрытие91_НеЕНВД.ПрибыльПР) КАК ПрибыльПР,
		|	СУММА(ВТ_Закрытие91_НеЕНВД.ПРибыльВР) КАК ПРибыльВР,
		|	СУММА(ВТ_Закрытие91_НеЕНВД.ПрибыльНУ) КАК ПрибыльНУ
		|ИЗ
		|	ВТ_Закрытие91_НеЕНВД КАК ВТ_Закрытие91_НеЕНВД
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Закрытие91_НеЕНВД.СчетПрибылейИУбытков
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Закрытие91_ЕНВД.СчетПрибылейИУбытков,
		|	ВТ_Закрытие91_ЕНВД.Прибыль,
		|	ВТ_Закрытие91_ЕНВД.ПрибыльПР,
		|	ВТ_Закрытие91_ЕНВД.ПРибыльВР,
		|	ВТ_Закрытие91_ЕНВД.ПрибыльНУ
		|ИЗ
		|	ВТ_Закрытие91_ЕНВД КАК ВТ_Закрытие91_ЕНВД";
		
	Иначе
		
		// Если нет совмещения с необлагаемой деятельностью, все прочие доходы и расходы
		// отражаются по основной системе налогообложения.
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД) КАК СчетПрибылейИУбытков,
		|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0)) КАК Прибыль,
		|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0)) КАК ПрибыльПР,
		|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0)) КАК ПРибыльВР,
		|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)) КАК ПрибыльНУ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, , Счет В (&Счета91), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы), Организация В (&СписокОрганизаций), НЕ КорСчет В (&Счета91), ) КАК Хозрасчетный";
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Прибыль = 0 ИЛИ НЕ Выборка.ПрибыльНУ = 0 ИЛИ НЕ Выборка.ПрибыльПР = 0 ИЛИ НЕ Выборка.ПрибыльВР = 0 Тогда
			Запись = ТаблицаПроводок.Добавить();
			Если Выборка.Прибыль >= 0 Тогда
				Запись.ЭтоПрибыль = Истина;
				Запись.СчетДт         = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Запись.СчетКт         = Выборка.СчетПрибылейИУбытков;
				Запись.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
				Запись.Сумма          = Выборка.Прибыль;
				Запись.СуммаНУ        = Выборка.ПрибыльНУ;
				Запись.СуммаПР        = Выборка.ПрибыльПР;
				Запись.СуммаВР        = Выборка.ПрибыльВР;
			КонецЕсли;
			
			Если Выборка.Прибыль < 0 Тогда
				Запись.ЭтоПрибыль     = Ложь;
				Запись.СчетДт         = Выборка.СчетПрибылейИУбытков;
				Запись.СчетКт         = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Запись.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
				Запись.Сумма          = -Выборка.Прибыль;
				Запись.СуммаНУ        = -Выборка.ПрибыльНУ;
				Запись.СуммаПР        = -Выборка.ПрибыльПР;
				Запись.СуммаВР        = -Выборка.ПрибыльВР;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПроводок;
	
КонецФункции // ПодготовитьТаблицыЗакрытиеСчета91()

#КонецОбласти

#КонецОбласти

#Область ОкруглениеНДС

Процедура СформироватьДвиженияПоОкруглениюНДС(ТаблицаРеквизиты, СписокОрганизаций, Движения) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ОкруглениеНДС(Реквизиты, СписокОрганизаций, Движения);
	ОкруглениеНДСНалоговогоАгента(Реквизиты, СписокОрганизаций, Движения);
	
КонецПроцедуры

Процедура ОкруглениеНДС(Реквизиты, СписокОрганизаций, Движения)
	
	Запрос = Новый Запрос;
	
	СубконтоВидыПлатежейВБюджет = Новый Массив;
	СубконтоВидыПлатежейВБюджет.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	Запрос.УстановитьПараметр("НачДата",                     Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",                     Реквизиты.КонДата);
	Запрос.УстановитьПараметр("СубконтоВидыПлатежейВБюджет", СубконтоВидыПлатежейВБюджет);
	Запрос.УстановитьПараметр("СписокОрганизаций",           СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("НалогНачисленУплачен",        Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Счет,
	|	СУММА(Хозрасчетный.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(Хозрасчетный.СуммаОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС),
	|			&СубконтоВидыПлатежейВБюджет,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 = &НалогНачисленУплачен,
	|			НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|				И НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)),
	|			) КАК Хозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Счет";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НДСКВозмещению = Ложь;
		ОстатокОкругления = 0;
		
		ПоказателиДекларацииНДС = УчетНДСФормированиеОтчетности.ПоказателиДекларацииНДС(
			Реквизиты.Организация,
			СписокОрганизаций.ВыгрузитьЗначения(),
			Реквизиты.НачДата,
			Реквизиты.КонДата);
			
		Если ПоказателиДекларацииНДС.КУплате > 0 Тогда
				
			НДСПо68_02 = Выборка.СуммаОборотКт - Выборка.СуммаОборотДт;
			ОстатокОкругления = НДСПо68_02
				- ПоказателиДекларацииНДС.КУплате
				+ ПоказателиДекларацииНДС.ВычетПоЭкспорту
				- ПоказателиДекларацииНДС.НачислениеПоЭкспорту;
				
		ИначеЕсли ПоказателиДекларацииНДС.КВозмещению > 0 Тогда
				
			НДСКВозмещению = Истина;
			НДСПо68_02 = Выборка.СуммаОборотДт - Выборка.СуммаОборотКт;
			ОстатокОкругления = НДСПо68_02
				- ПоказателиДекларацииНДС.КВозмещению
				- ПоказателиДекларацииНДС.ВычетПоЭкспорту
				+ ПоказателиДекларацииНДС.НачислениеПоЭкспорту;
		КонецЕсли;
		
		Если ОстатокОкругления = 0 
			ИЛИ ОстатокОкругления > 0.99
			ИЛИ ОстатокОкругления < -0.99 Тогда // Если остаток округления больше рубля, проводку по округлению не формируем
			Возврат;
		Иначе 
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
			Проводка.СчетКт      = Выборка.Счет;
			Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			
			Если НЕ НДСКВозмещению Тогда
				Проводка.Сумма = - ОстатокОкругления;
			Иначе
				Проводка.Сумма = ОстатокОкругления;
			КонецЕсли;
			
			Проводка.Содержание = Реквизиты.Содержание;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОкруглениеНДСНалоговогоАгента(Реквизиты, СписокОрганизаций, Движения)
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",           Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",           Реквизиты.КонДата);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ВидыСубконто",      ВидыСубконто);
	Запрос.УстановитьПараметр("ВидыДоговоровТребующиеОкругленияНалога", 
		Перечисления.ВидыАгентскихДоговоров.МассивВидовДоговоровТребующихОкругленияНалога());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК ДокументРасчетовСКонтрагентами,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента),
	|			&ВидыСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто2.ВидАгентскогоДоговора В (&ВидыДоговоровТребующиеОкругленияНалога)) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт <> 0";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОкрСумма = Окр(Выборка.СуммаОборотКт);
			ОстатокОкругления = ОкрСумма - Выборка.СуммаОборотКт;
			
			Если ОстатокОкругления = 0 Тогда 
				Продолжить;
			Иначе
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
				Проводка.СчетКт      = Выборка.Счет;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКТ,
					"Контрагенты", Выборка.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКТ,
					"Договоры", Выборка.Договор);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКТ,
					"ДокументыРасчетовСКонтрагентами", Выборка.ДокументРасчетовСКонтрагентами);
				
				Проводка.Сумма      = ОстатокОкругления;
				Проводка.Содержание = Реквизиты.Содержание;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ПРИ ИЗМЕНЕНИИ СТАВКИ НАЛОГА НА ПРИБЫЛЬ

Функция ПолучитьТекстСообщенияОНеобходимостиРеформации(Период, Организация = Неопределено) Экспорт
	
	ДатаРеформации = НачалоДня(Период) - 1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон", ДатаРеформации);
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	Запрос.УстановитьПараметр("Счета", Массив);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Организация КАК Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счета), , Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаКон, ) КАК УчетнаяПолитикаСрезПоследних
	|		ПО ХозрасчетныйОстатки.Организация = УчетнаяПолитикаСрезПоследних.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&ДатаКон, ) КАК НастройкиСистемыНалогообложенияСрезПоследних
	|		ПО ХозрасчетныйОстатки.Организация = НастройкиСистемыНалогообложенияСрезПоследних.Организация
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток <> 0
	|	И УчетнаяПолитикаСрезПоследних.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод)
	|	И НастройкиСистемыНалогообложенияСрезПоследних.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Организация.Наименование";
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация.ЮридическоеФизическоеЛицо", "Организация = &Организация И Организация.ЮридическоеФизическоеЛицо");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат "";
		
	Иначе
		
		СписокОрганизаций = "";
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций = СписокОрганизаций + "
			|" + Выборка.Организация.ПолноеНаименование();
		КонецЦикла;
		
		ПредставлениеПериода = Формат(Год(ДатаРеформации), "ЧГ=");
		
		РазделИнтерфейса = НСтр("ru = 'Операции'");
		
		ТекстСообщения = НСтр("ru = 'Изменена ставка налога на прибыль.
			|Рекомендуется выполнить регламентную операцию ""Реформация баланса"" закрытия месяца
			|за декабрь %1 года (раздел ""%2"" - ""Регламентные операции"") для следующих организаций: %3'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			ПредставлениеПериода, РазделИнтерфейса, СписокОрганизаций);
		
		Возврат ТекстСообщения;
		
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеОперацииРасчетРасходовУменьшающихОтдельныеНалоги(Организация, Период) Экспорт
	
	Периодичность =
		ПериодичностьРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги);
	НачалоПериода = ОбщегоНазначенияБПКлиентСервер.НачалоПериода(Период, Периодичность);
	КонецПериода = ОбщегоНазначенияБПКлиентСервер.КонецПериода(Период, Периодичность);
	
	УменьшениеУСН = УчетнаяПолитика.ПрименяетсяУСНДоходыЗаПериод(Организация, НачалоПериода, КонецПериода);
	УменьшениеПСН = НачалоПериода >= УчетПСНКлиентСервер.ДатаНачалаУменьшенияПСННаСтраховыеВзносы()
		И УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Организация, НачалоПериода, КонецПериода);
	УменьшениеЕНВД = УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоПериода, КонецПериода);
	УменьшениеЕНВДПослеОтмены = УчетЕНВД.РасходыПериодаУменьшаютЕНВДПослеОтмены(Организация, Период);
	
	НазванияНалогов = Новый Массив;
	
	Если УменьшениеУСН Тогда
		НазванияНалогов.Добавить(НСтр("ru = 'УСН'"));
	КонецЕсли;
	
	Если УменьшениеПСН Тогда
		НазванияНалогов.Добавить(НСтр("ru = 'ПСН'"));
	КонецЕсли;
	
	Если УменьшениеЕНВД Тогда
		НазванияНалогов.Добавить(НСтр("ru = 'ЕНВД'"));
	ИначеЕсли УменьшениеЕНВДПослеОтмены Тогда
		НазванияНалогов.Добавить(
			СтрШаблон(НСтр("ru = 'ЕНВД (за %1)'"),
				УчетЕНВДКлиентСервер.ПредставлениеПоследнегоНалоговогоПериодаЕНВД()));
	КонецЕсли;
	
	ЗаголовокОперации = "";
	
	Если НазванияНалогов.Количество() = 1 Тогда
		
		Если УменьшениеУСН Или УменьшениеПСН Тогда
			ЗаголовокОперации = СтрШаблон(Нстр("ru = 'Расчет расходов, уменьшающих налог %1'"), НазванияНалогов[0]);
		Иначе
			ЗаголовокОперации = СтрШаблон(Нстр("ru = 'Расчет расходов, уменьшающих %1'"), НазванияНалогов[0]);
		КонецЕсли;
		
	ИначеЕсли НазванияНалогов.Количество() = 2 Тогда
		
		Если УменьшениеУСН И УменьшениеПСН Тогда
			ЗаголовокОперации = СтрШаблон(Нстр("ru = 'Расчет расходов, уменьшающих налоги %1 и %2'"), 
				НазванияНалогов[0], НазванияНалогов[1]);
		Иначе
			ЗаголовокОперации = СтрШаблон(Нстр("ru = 'Расчет расходов, уменьшающих налог %1 и %2'"),
				НазванияНалогов[0], НазванияНалогов[1]);
		КонецЕсли;
	
	ИначеЕсли НазванияНалогов.Количество() = 3 Тогда
		
		ЗаголовокОперации = СтрШаблон(Нстр("ru = 'Расчет расходов, уменьшающих налоги %1, %2 и %3'"),
			НазванияНалогов[0], НазванияНалогов[1], НазванияНалогов[2]);
		
	КонецЕсли;
	
	Возврат ЗаголовокОперации;
	
КонецФункции

Функция ПредставлениеОперацииРасчетЕНВД(Организация, Период) Экспорт
	
	Если УчетЕНВД.РасходыПериодаУменьшаютЕНВДПослеОтмены(Организация, Период) Тогда
		Возврат СтрШаблон(НСтр("ru = 'Перерасчет ЕНВД за %1'"),
			УчетЕНВДКлиентСервер.ПредставлениеПоследнегоНалоговогоПериодаЕНВД());
	КонецЕсли;
	
	Возврат НСтр("ru = 'Расчет ЕНВД'");
	
КонецФункции

Функция НовыйЗаписиВспомогательногоРегистраСведений(МетаданныеРегистраСведений) Экспорт
	
	Записи = Новый ТаблицаЗначений;
	
	Для Каждого Измерение Из МетаданныеРегистраСведений.Измерения Цикл
		
		Если Измерение.Имя = "ПериодРасчета" Или Измерение.Имя = "Организация" Тогда
			Продолжить;
		КонецЕсли;
		
		Записи.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
		
	КонецЦикла;
	
	Для Каждого Ресурс Из МетаданныеРегистраСведений.Ресурсы Цикл
		Записи.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеРегистраСведений.Реквизиты Цикл
		Записи.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Возврат Записи;

КонецФункции
