///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроверкаКонтрагентовВДокументах

// Формирование описания расположения счета-фактуры в документе.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма документа-основания, для которого необходимо получить описание счета-фактуры.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание счета-фактуры.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
//
//@skip-warning
Процедура СформироватьОписаниеДокументовСоСчетомФактуройВПодвале(Форма, Описание) Экспорт
	
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
		
		СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			Элемент 		= Форма.Элементы.НадписьСчетФактура; 
			ЭлементРодитель = Форма.Элементы.СчетФактураСсылка;
			
			ПроверкаКонтрагентов.ДополнитьОписание(
				Описание,
				СчетФактура, 
				Элемент,
				Неопределено,
				ЭлементРодитель);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирование описания расположения контрагента, находящегося в шапке документа.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма документа, для которой необходимо получить описание расположения контрагента.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание контрагентов.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
//
//@skip-warning
Процедура СформироватьОписаниеДокументовСКонтрагентомВШапке(Форма, Описание) Экспорт
	
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	// Заполнение данных по контрагенту в шапке
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) Тогда
		
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание,
			ДокументСсылка, 
			Форма.Элементы.Контрагент,
			ДокументОбъект.Контрагент,
			Форма.Элементы.ГруппаКонтрагент);
			
	КонецЕсли;
	
КонецПроцедуры

// Формирование описания  расположения контрагентов, находящихся в табличной части документа.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма документа, для которой необходимо получить описание.
//  Описание - ТаблицаЗначений - Таблица с описанием расположения контрагентов в табличной части документа.
//				Структура колонок указана в функции ШаблонТаблицыОписанияТабличныхЧастей модуля ПроверкаКонтрагентов.
//
//@skip-warning
Процедура СформироватьОписаниеДокументовСТабличнымиЧастями(Форма, Описание) Экспорт
	
	Если Не ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание,"Товары", "ТоварыПоставщик","ТоварыДатаСФ");
			
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "ВозвратнаяТара", "ВозвратнаяТараКонтрагент","");
			
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "ОплатаПоставщикам", "ОплатаПоставщикамКонтрагент","");
			
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "Прочее", "ПрочееПоставщик","ПрочееДатаСФ");
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "Товары", "ТоварыКонтрагент","");
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "Товары", "ТоварыКонтрагент","");
			
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "АгентскиеУслуги", "АгентскиеУслугиКонтрагент","");
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "АгентскиеУслуги", "АгентскиеУслугиКонтрагент","");
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "Контрагенты","КонтрагентыКонтрагент","");
			
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "СчетаФактуры","СчетаФактурыКонтрагент","");
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "Покупатели","ПокупателиТоварыПокупатель","ПокупателиТоварыДатаСФ");
			
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "Возвраты","ВозвратыПокупатель","ВозвратыДатаСФ");
			
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "ДенежныеСредства","ДенежныеСредстваПокупатель","ДенежныеСредстваДатаСобытия");
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ЭтоФормаДокументаОПродажах = Найти(Форма.ИмяФормы, "ФормаДокументаОПродажах") <> 0;
		Если ЭтоФормаДокументаОПродажах Тогда
			
			ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
				Форма, Описание, "Товары", "ТоварыПокупатель","ТоварыДатаРеализации");
				
			ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
				Форма, Описание, "ДенежныеСредства", "ДенежныеСредстваПокупатель", "ДенежныеСредстваДатаСобытия");
				
		Иначе
			
			ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
				Форма, Описание, "Поставщики", "ПоставщикиПоставщик", "ПоставщикиДатаСФ");
				
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		И Найти(Форма.ИмяФормы, "ФормаДокументаОбщая") <> 0 Тогда
		
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание,"Товары","ТоварыКонтрагент","");
			
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание,"АгентскиеУслуги","АгентскиеУслугиКонтрагент","");
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И Найти(Форма.ИмяФормы, "ФормаДокументаОбщая") <> 0 Тогда
		
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание,"АгентскиеУслуги","АгентскиеУслугиКонтрагент","");
			
	КонецЕсли;
	
КонецПроцедуры

// Формирование описания расположения контрагентов в счете-фактуре.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма счета-фактуры, для которой необходимо получить описание.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание контрагентов.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
//
//@skip-warning
Процедура СформироватьОписаниеСчетовФактур(Форма, Описание) Экспорт
	
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	// Заполнение данных для счета-фактуры
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		
		// Контрагент
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание,
			ДокументСсылка,
			Форма.Элементы.Контрагент,
			ДокументОбъект.Контрагент,
			Форма.Элементы.ГруппаКонтрагент);
		
		Если Форма.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокументаНаАванс"
			ИЛИ Форма.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокументаНалоговыйАгент"
			ИЛИ Форма.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокументаНаАванс" Тогда
			
			// Комитент
			ПроверкаКонтрагентов.ДополнитьОписание(
				Описание,
				ДокументСсылка,
				Форма.Элементы.Комитент,
				ДокументОбъект.Комитент,
				Форма.Элементы.ГруппаКомитент);
			
		КонецЕсли;
		
		Если Форма.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокументаНаРеализацию"
			ИЛИ Форма.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокументаНаАванс"
			ИЛИ Форма.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокументаКорректировочный"
			ИЛИ Форма.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокументаНаПоступление"
			ИЛИ Форма.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокументаНаАванс" 
			ИЛИ Форма.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокументаКорректировочный" Тогда
			// Продавец
			ПроверкаКонтрагентов.ДополнитьОписание(
				Описание,
				ДокументСсылка,
				Форма.Элементы.Продавец,
				ДокументОбъект.Продавец,
				Форма.Элементы.ГруппаПродавец);
		КонецЕсли;
		
		Если Форма.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокументаНаПоступление"
			ИЛИ Форма.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокументаНаАванс" Тогда
			// Субкомиссионер
			ПроверкаКонтрагентов.ДополнитьОписание(
				Описание,
				ДокументСсылка,
				Форма.Элементы.Субкомиссионер,
				ДокументОбъект.Субкомиссионер,
				Форма.Элементы.ГруппаСубкомиссионер);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Возвращает массив имен реквизитов счета-фактуры, содержащих контрагентов.
//
// Параметры:
//  Тип	 			- Тип - Тип счета-фактуры, для которой необходимо получить описание.
//  ИменаРеквизитов	- Массив из Строка - массив имен реквизитов счета-фактуры, содержащих контрагентов.
//
//@skip-warning
Процедура ПолучитьИменаРеквизитовКонтрагентовВСчетеФактуре(Тип, ИменаРеквизитов) Экспорт
	
	ИменаРеквизитов.Добавить("Контрагент");
	ИменаРеквизитов.Добавить("Комитент");
	ИменаРеквизитов.Добавить("Продавец");
	Если Тип = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ИменаРеквизитов.Добавить("Субкомиссионер");
	КонецЕсли;

КонецПроцедуры

// Получение даты документа, в котором используется проверка контрагентов.
// 		Проверка контрагентов будет выполняться по состоянию на эту дату. 
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект - Документ, в котором используется проверка контрагентов.
//  Дата			 - Дата - Результат получения даты документа.
//
//@skip-warning
Процедура ОпределитьДатуВДокументе(ДокументОбъект, Дата) Экспорт
	
	Дата = НачалоДня(ДокументОбъект.Дата);
	
КонецПроцедуры

// Определение даты в счете-фактуре.
//
// Параметры:
//  СчетФактураОбъект	 - ДанныеФормыСтруктура, ДокументОбъект - Счет-фактура, чью дату необходимо получить.
//  Дата				 - Дата - Результат, дата счета-фактуры.
//
//@skip-warning
Процедура ОпределитьДатуВСчетеФактуре(СчетФактураОбъект, Дата) Экспорт
	
	Если ТипЗнч(СчетФактураОбъект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Если ОбщегоНазначения.СсылкаСуществует(СчетФактураОбъект) Тогда
			ДанныеСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СчетФактураОбъект, "Исправление, ДатаИсправления, ДатаВходящегоДокумента");
			Если ДанныеСчетаФактуры.Исправление Тогда
				Дата = ДанныеСчетаФактуры.ДатаИсправления;
			Иначе
				Дата = ДанныеСчетаФактуры.ДатаВходящегоДокумента;
			КонецЕсли;
		Иначе
			Дата = '00010101';
		КонецЕсли;
	ИначеЕсли ТипЗнч(СчетФактураОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Если ОбщегоНазначения.СсылкаСуществует(СчетФактураОбъект) Тогда
			Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактураОбъект, "Дата");
		Иначе
			Дата = '00010101';
		КонецЕсли;
	Иначе
		// В процедуру передан Объект
		ДокументСсылка = СчетФактураОбъект.Ссылка;
		// Дата, на которую будет выполняться проверка
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			Если СчетФактураОбъект.Исправление Тогда
				Дата = СчетФактураОбъект.ДатаИсправления;
			Иначе
				Дата = СчетФактураОбъект.ДатаВходящегоДокумента;
			КонецЕсли;
		Иначе
			Дата = СчетФактураОбъект.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Дата = НачалоДня(Дата);
	
КонецПроцедуры

// Возможность переопределить стандартное заполнение данных о контрагентах в счет-фактурах, созданных на основании документа.
//
// Параметры:
//  СтандартнаяОбработка - Булево - необходимо установить в Ложь, если стандартная обработка переопределяется.
//  ДокументОбъект       - Произвольный - данные содержащие информацию о счет-фактурах.
//  ДанныеКонтрагентов   - ТаблицаЗначений - подготавливаемая таблица с данными о контрагентах.
//  Форма                - ФормаКлиентскогоПриложения, Неопределено - Форма из которой выполняется вызов.
//
//@skip-warning
Процедура ЗаполнитьДанныеКонтрагентовВСчетеФактуре(СтандартнаяОбработка, ДокументОбъект, ДанныеКонтрагентов, Форма) Экспорт
	
	
	
КонецПроцедуры

// Возможность переопределить стандартное сохранение результатов проверки контрагентов счет-фактур, выписанных на основании
//             документа основания в форме документа основания. 
//
// Параметры:
//  СтандартнаяОбработка - Булево - необходимо установить в Ложь, если стандартная обработка переопределяется.
//  ДанныеКонтрагентов   - ТаблицаЗначений - подготавливаемая таблица с данными о контрагентах.
//  Форма                - ФормаКлиентскогоПриложения, Неопределено - Форма из которой выполняется вызов.
//
//@skip-warning
Процедура ЗапомнитьРезультатПроверкиКонтрагентовСчетФактурыВДокументе(СтандартнаяОбработка, ДанныеКонтрагентов, Форма) Экспорт
	
	
	
КонецПроцедуры

// Возможность дополнить структуру РеквизитыПроверкиКонтрагентов при создании в форме документа.
//
// Параметры:
//   Форма          - ФормаКлиентскогоПриложения, Неопределено - Форма из которой выполняется вызов.
//   НовыеРеквизиты - Структура - сформированная структура дополнительных реквизитов документа, которая может быть дополнена.
//
//@skip-warning
Процедура ДополнитьРеквизитыФормыДокумент(Форма, НовыеРеквизиты) Экспорт


КонецПроцедуры

// Возможность переопределить сохраняемые результаты проверки контрагентов в документе.
//
// Параметры:
//  СтандартнаяОбработка - Булево - необходимо установить в Ложь, если стандартная обработка переопределяется.
//  СохраняемоеЗначение  - Соответствие - сохраняемые данные.
//  Форма                - ФормаКлиентскогоПриложения, Неопределено - Форма из которой выполняется вызов.
//
//@skip-warning
Процедура СохраняемыеРезультатыПроверкиСчетФактурыВДокументе(СтандартнаяОбработка, СохраняемоеЗначение, Форма) Экспорт
	
	
	
КонецПроцедуры

// Отображения результата проверки контрагента в документе.
//
// Параметры:
//  Форма	 				- ФормаКлиентскогоПриложения - Форма документа, для которого выводится результат проверки контрагента.
//		Результат проверки хранится в реквизите РеквизитыПроверкиКонтрагентов(Структура) формы документа.
//		Структуру полей РеквизитыПроверкиКонтрагентов см. процедуре ИнициализироватьРеквизитыФормыДокумент ОМ
//		ПроверкаКонтрагентов.
//  СтандартнаяОбработка	- Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                  процедуре.
//
//@skip-warning
Процедура ОтобразитьРезультатПроверкиКонтрагентаВДокументе(Форма, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Прорисовать состояния контрагентов в документе.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма документа, в котором выполняется проверка контрагентов.
//  СостояниеПроверки		 - Перечисления.СостоянияПроверкиКонтрагентов	 - Указывает, в каком состояние проверка:
//  	завершилась, не завершилась, выполняется или отсутствует доступ к веб-сервису.
//  ДополнительныеПараметры	 - Неопределено, Структура - Параметры, показывающие в каком элементе формы произошло
//  												изменение и это изменение вызвало запуск проверки контрагента. Описание структуры см в
//  												ПроверкаКонтрагентовКлиентСервер.ПараметрыФоновогоЗадания.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//  										процедуре.
//  										Пример см в ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе.
//
//@skip-warning
Процедура ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, СостояниеПроверки, ДополнительныеПараметры = Неопределено, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

// Установка условного оформления в форме выбора или списка документов.
//
// Параметры:
//  Список				 	 - ДинамическийСписок - Динамический список формы выбора или списка документов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
//
//@skip-warning
Процедура УстановитьУсловноеОформлениеСпискаДокументов(Список, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

// Установка условного оформления в табличной части документа.
//
// Параметры:
//  Форма				 	 - ФормаКлиентскогоПриложения - Форма документа, в котором выполняется проверка контрагентов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
//
//@skip-warning
Процедура УстановитьУсловноеОформлениеТабличнойЧастиДокумента(Форма, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

// Добавление колонки с результатом проверки контрагента в таблицу формы документа.
//
// Параметры:
//  Форма				 	 - ФормаКлиентскогоПриложения - Форма документа, в котором выполняется проверка контрагентов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
//
//@skip-warning
Процедура ДобавитьКолонкиТаблицыФормыСРезультатамиПроверкиВТабличныеЧасти(Форма, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

// Добавление строки с данными проверяемого контрагента при проверке контрагентов в документе.
//
// Параметры:
//	СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
//		Значение по умолчанию - Истина;
//	Ссылка - ДокументСсылка - ссылка на документ, в котором выполняется проверка контрагентов;
//	ДанныеКонтрагентов - ТаблицаЗначений - содержит данные проверяемых контрагентов.
//		Структуру колонок таблицы см. в функции ШаблонТаблицыДанныеКонтрагента;
//	Контрагент - ОпределяемыйТип.КонтрагентБИП - проверяемый контрагент, ссылка на
//		элемент справочника контрагентов;
//	Дата - Дата - дата, на которую выполняется проверка;
//	Состояние - ПеречислениеСсылка.СостоянияПроверкиКонтрагентов - текущее состояние
//		проверки существования контрагента.
//
//@skip-warning
Процедура ДобавитьСтрокуВДанныеКонтрагентовВДокументе(
	СтандартнаяОбработка,
	Ссылка,
	ДанныеКонтрагентов,
	Контрагент,
	Дата,
	Состояние = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеКонтрагента = Справочники.Контрагенты.СведенияОКонтрагенте(Контрагент, Дата);
	
	СтрокаОписания            = ДанныеКонтрагентов.Добавить();
	СтрокаОписания.Ссылка     = Ссылка;
	СтрокаОписания.Контрагент = Контрагент;
	СтрокаОписания.Дата       = Дата;
	СтрокаОписания.Состояние  = Состояние;
	
	СтрокаОписания.ИНН        = ДанныеКонтрагента.ИНН;
	СтрокаОписания.КПП        = ДанныеКонтрагента.КПП;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВОтчетах

// Выделение контрагента с ошибкой в строке отчета.
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - Табличный документ отчета, в котором выделяется строка с некорректным
//                                           контрагентом.
//  НомерСтроки			 - Число - Номер строки табличного документа, в которой находится некорректный контрагент.
//
//@skip-warning
Процедура ВыделитьКонтрагентаСОшибкойВСтрокеОтчета(ТабличныйДокумент, НомерСтроки) Экспорт
	
	Область = ТабличныйДокумент.Область(НомерСтроки, 1, НомерСтроки, ТабличныйДокумент.ШиринаТаблицы);
	Область.ЦветФона = ЦветаСтиля.ЦветФонаНекорректногоКонтрагентаВДокументе;
	
КонецПроцедуры

// Предназначена для формирования отчета, в котором используется проверка контрагентов, из общего модуля.
//
// Параметры:
//  ПараметрыФормированияОтчета	 - Структура - Параметры, с которыми необходимо сформировать отчет.
//  Отчет						 - ТабличныйДокумент - результат формирования отчета.
//
//@skip-warning
Процедура СформироватьОтчет(ПараметрыФормированияОтчета, Отчет = Неопределено) Экспорт
	
	Если ПараметрыФормированияОтчета.Свойство("ЭтоКнигаПродаж") Тогда
		
		Отчеты.КнигаПродаж.ПодготовитьОтчет(ПараметрыФормированияОтчета);
		
	КонецЕсли;
	
	Если ПараметрыФормированияОтчета.Свойство("ЭтоКнигаПокупок") Тогда
		
		Отчеты.КнигаПокупок.ПодготовитьОтчет(ПараметрыФормированияОтчета);
		
	КонецЕсли;
	
	Если ПараметрыФормированияОтчета.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		
		ВременныйАдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
		Отчеты.ЖурналУчетаСчетовФактур.СформироватьОтчет(ПараметрыФормированияОтчета, ВременныйАдресХранилища);
		Результат = ПолучитьИзВременногоХранилища(ВременныйАдресХранилища);
		
		Отчет = Результат.СформированныйЖурнал;
		
	КонецЕсли;
	
КонецПроцедуры 

// Вывод результата проверки контрагента в поле табличного документа.
//
// Параметры:
//  Форма				 		 - ФормаКлиентскогоПриложения - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы - поле, в которое необходимо выводить отчет.
//  РезультатФормированияОтчета	 - ТабличныйДокумент - Документ, предназначенный для вывода в поле формы.
//  СтандартнаяОбработка		 - Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                    стандартную обработку.
//
//@skip-warning
Процедура ВывестиОтчет(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета, СтандартнаяОбработка) Экспорт
	
	ПараметрыФормированияОтчета = Форма.РеквизитыПроверкиКонтрагентов;
	
КонецПроцедуры

// Вывод раздела отчета с проверкой контрагента в поле табличного документа.
//
// Параметры:
//  Форма				 		 - ФормаКлиентскогоПриложения - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы - поле, в которое необходимо выводить отчет.
//  НомерРаздела	 			 - Число - Номер раздела отчета.
//  СтандартнаяОбработка		 - Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                    стандартную обработку.
//
//@skip-warning
Процедура ВывестиРазделОтчета(Форма, ПолеТабличногоДокумента, НомерРаздела, СтандартнаяОбработка) Экспорт

	

КонецПроцедуры

// Определяет, нужно ли выводить данную строку в отчете по некорректным контрагентам.
// 	Пример см. в ПроверкаКонтрагентов.ВыводитьСтрокуОтчета.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  Контрагент				- СправочникСсылка - Проверяемый контрагент в строке отчета.
//  ИНН						- Строка - ИНН контрагента.
//  КПП						- Строка - ИНН контрагента.
//  Дата					- Дата - Дата, на которую необходимо выполнять проверку контрагента.
//  СтандартнаяОбработка	- Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                  стандартную обработку.
//  Результат				- Булево - Определяет, нужно ли выводить строку.
//
//@skip-warning
Процедура ОпределитьНужноЛиВыводитьСтрокуОтчета(СтруктураПараметров, Контрагент, ИНН, КПП, Дата, Результат, СтандартнаяОбработка) Экспорт
	
	Если СтруктураПараметров.Свойство("ЭтоКнигаПродаж") Тогда
		
		Если СтруктураПараметров.Свойство("ЭтоИтог") И СтруктураПараметров.ЭтоИтог Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
			НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
			
			Результат = НедействующиеКонтрагенты.НайтиСтроки(Новый Структура("Контрагент", Контрагент)).Количество() > 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ЭтоКнигаПокупок") Тогда
		
		Если СтруктураПараметров.Свойство("ЭтоИтог") И СтруктураПараметров.ЭтоИтог Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
			НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
			
			Результат = НедействующиеКонтрагенты.НайтиСтроки(Новый Структура("Контрагент", Контрагент)).Количество() > 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		
		Если СтруктураПараметров.Свойство("ЭтоИтог") И СтруктураПараметров.ЭтоИтог Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
			НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
			
			Результат = НедействующиеКонтрагенты.НайтиСтроки(Новый Структура("Контрагент", Контрагент)).Количество() > 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет, нужно ли проверять контрагентов в разделе отчета.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  НомерРаздела			- Число - Номер раздела отчета.
//  ДополнительныеПараметры	- Произвольный - Дополнительная информация, связанная с разделом.
//  СтандартнаяОбработка	- Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                  стандартную обработку.
//
//@skip-warning
Процедура ОпределитьНужноЛиПроверятьКонтрагентовВРазделеОтчета(СтруктураПараметров, НомерРаздела, ДополнительныеПараметры, СтандартнаяОбработка) Экспорт
	
	Если СтруктураПараметров.Свойство("ЭтоКнигаПродаж") Тогда
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ЭтоДопЛист") Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.Свойство("ЭтоКнигаПокупок") Тогда
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ЭтоДопЛист") Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Отображения результата проверки контрагента в отчете.
//
// Параметры:
//  Форма	 				- ФормаКлиентскогоПриложения - Форма отчета, для которого выводится результат проверки контрагента.
//		Результат проверки хранится в реквизите РеквизитыПроверкиКонтрагентов(Структура),
//		ПроверкаКонтрагентовНедействующиеКонтрагенты формы отчета.
//		Структуру полей РеквизитыПроверкиКонтрагентов см. процедуре ИнициализироватьРеквизитыФормыОтчета ОМ
//		ПроверкаКонтрагентов.
//  СтандартнаяОбработка	- Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                  процедуре.
//
//@skip-warning
Процедура ОтобразитьРезультатПроверкиКонтрагентаВОтчете(Форма, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Установка условного оформления в форме выбора или списка справочника контрагентов.
//
// Параметры:
//  Список				 	 - ДинамическийСписок - Динамический список формы выбора или списка справочника контрагентов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
//
//@skip-warning
Процедура УстановитьУсловноеОформлениеСпискаКонтрагентов(Список, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВСправочнике

// Важно: заполнение реализации метода обязательно.
// Определяет свойства справочников контрагентов.
// Параметры:
//	СвойстваСправочников - ТаблицаЗначений - в таблице заполняется список
//		справочников контрагентов и их свойства. Колонки таблицы:
//		* Имя - Строка - имя справочника;
//		* Иерархический - Булево - справочник является иерархическим;
//		* РеквизитИНН - Строка- имя реквизита ИНН;
//		* РеквизитКПП - Строка- имя реквизита КПП;
//		* ОтключитьСозданиеИзДосьеКонтрагента - Булево - если Истина,
//			тогда не будет предлагаться создание элемента справочника из
//			отчета "Досье контрагента".
//
//@skip-warning
Процедура ПриОпределенииСвойствСправочниковКонтрагентов(СвойстваСправочников) Экспорт
	
	СвойствоСправочника = СвойстваСправочников.Добавить();
	СвойствоСправочника.Имя           = "Контрагенты";
	СвойствоСправочника.Иерархический = Истина;
	СвойствоСправочника.РеквизитИНН   = "ИНН";
	СвойствоСправочника.РеквизитКПП   = "КПП";
	СвойствоСправочника.ОтключитьСозданиеИзДосьеКонтрагента = Ложь;
	
КонецПроцедуры

// Определяет, является ли контрагент физическим или юридическим лицом.
//
// Параметры:
//  СтандартнаяОбработка  - Булево - если стандартный механизм переопределяется, то должно быть установлено значение "Ложь".
//  ЭтоЮрЛицо             - Булево - Истина, если юридическое лицо, и Ложь, если физическое.
//  ДанныеКонтрагента     - Структура - структура, которая содержит данные обрабатываемого контрагента.
//
//@skip-warning
Процедура ПриОпределенииВидаКонтрагента(СтандартнаяОбработка, ЭтоЮрЛицо, ДанныеКонтрагента) Экспорт
	
	Если ДанныеКонтрагента.ДополнительныеПараметры.Свойство("ЭтоЮридическоеЛицо") Тогда
		ЭтоЮрЛицо = ДанныеКонтрагента.ДополнительныеПараметры.ЭтоЮридическоеЛицо;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяется, является ли контрагент иностранным.
//
// Параметры:
//  ДанныеКонтрагента   - СтрокаТаблицыЗначений - Содержит информацию о контрагенте. 
//      Подробнее о колонках таблицы можно узнать в описании к процедуре ПроверкаКонтрагентов.ШаблонТаблицыДанныеКонтрагента().
//  ЯвляетсяИностранным - Булево - Результат проверки.
//
//@skip-warning
Процедура ПриОпределенииКонтрагентЯвляетсяИностранным(ДанныеКонтрагента, ЯвляетсяИностранным) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) Тогда
		ЯвляетсяИностранным = Ложь;
	Иначе
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) Тогда
			ЯвляетсяИностранным = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента.Контрагент, "СтранаРегистрации") <> Справочники.СтраныМира.Россия;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возможность дополнить структуру РеквизитыПроверкиКонтрагентов для формы справочника. 
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма, для которой дополняется структура РеквизитыПроверкиКонтрагентов.
//  НовыеРеквизиты  - Структура - структура, которая транслируется в реквизит формы РеквизитыПроверкиКонтрагентов.
//
//@skip-warning
Процедура ДополнитьРеквизитыФормыКонтрагент(Форма, НовыеРеквизиты) Экспорт
	
	НовыеРеквизиты.ЭтоИностранныйКонтрагент =
		ЗначениеЗаполнено(Форма.Объект.СтранаРегистрации)
		И Форма.Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
		
	НовыеРеквизиты.ЭтоЮридическоеЛицо =
		Форма.Объект.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеИнформацииДляДосьеКонтрагента

// Определение состава и порядка вывода в отчет "Досье контрагента" данных из информационной базы.
//
// Параметры:
//  ТаблицаОписания - ТаблицаЗначений - описание см. Отчеты.ДосьеКонтрагента.НоваяТаблицаОписаниеДанныхПрограммы.
//
//@skip-warning
Процедура ЗаполнитьОписаниеДанныхПрограммы(ТаблицаОписания) Экспорт
	
	РаботаСКонтрагентамиБП.ЗаполнитьОписаниеДанныхПрограммыДосье(ТаблицаОписания);
	
КонецПроцедуры

// Заполнение информации о контрагенте по данным информационной базы для отчета "Досье контрагента".
//
// Параметры:
//  ИнформацияОСвязях  - Структура - описание см. РаботаСКонтрагентами.НоваяИнформацияОСвязяхЮридическогоЛица
//                 и РаботаСКонтрагентами.НоваяИнформацияОСвязяхПредпринимателя.
//                 При заполнении в структуру ИнформацияОСвязях.ДанныеПрограммы добавляются данные о контрагенте.
//                 Ключи структуры должны соответствовать полям ИмяДанных таблицы, заполненной 
//                 в процедуре ЗаполнитьОписаниеДанныхПрограммы.
//  Контрагент  - ОпределяемыйТип.КонтрагентБИП - ссылка на контрагента в информационной базе.
//                 Если при вызове процедуры ссылка пустая, необходимо найти контрагента до данным,
//                 содержащимся в структуре ИнформацияОСвязях.
//
//@skip-warning
Процедура ДополнитьИнформациюДаннымиПрограммы(ИнформацияОСвязях, Контрагент) Экспорт
	
	РаботаСКонтрагентамиБП.ДополнитьИнформациюДосьеДаннымиПрограммы(ИнформацияОСвязях, Контрагент);
	
КонецПроцедуры 

// Заполнение идентификатора конфигурации для статистики переходов по ссылкам сервиса 1С:Контрагент.
//
// Параметры:
//  ИдентификаторКонфигурации  - Строка - идентификатор. 
//                 Рекомендуется использовать латинские строчные буквы и цифры.
//
//@skip-warning
Процедура ЗаполнитьИдентификаторКонфигурации(ИдентификаторКонфигурации) Экспорт
	
	ИдентификаторКонфигурации = "bp30";
	
КонецПроцедуры

#КонецОбласти 

#Область ПрочиеПроцедуры

// Определение цветов выделения результатов проверки контрагентов.
// 		Для примера см. функцию ЦветаРезультатовПроверки ОМ ПроверкаКонтрагентовКлиентСервер.
//
// Параметры:
//  Цвета	 - Структура - Имена ключей - это названия цветов, которые необходимо определить.
// 		Список ключей см ПроверкаКонтрагентовВызовСервера.ЦветаРезультатовПроверки().
//
//@skip-warning
Процедура ПриОпределенииЦветовРезультатовПроверки(Цвета) Экспорт
	
КонецПроцедуры

// Заполнение значений колонок ЭтоЮридическоеЛицо и ЭтоИностранныйКонтрагент 
//		в таблице с данными контрагента.
//		Заполнять следует запросом и только те строки, в которых значения не заполнены.
//
// Параметры:
//  ДанныеКонтрагентов	 - ТаблицаЗначений - Таблица с данными контрагентов.
//  СтандартнаяОбработка - Булево - Если Истина, то заполнение будет выполнено стандартным 
// 		образом путем перебора каждой строки таблицы.
//
//@skip-warning
Процедура ДополнитьДанныеКонтрагентов(ДанныеКонтрагентов, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		ИЛИ НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// При определении реквизитов ЭтоЮридическоеЛицо и ЭтоИностранныйКонтрагент есть ветки,
		// когда соответствующий элемент справочника может отсутствовать (ДанныеКонтрагентов.Ссылка IS NULL).
		// Такое может возникнуть, когда 
		// - проверяется объект (ссылки еще нет)
		// - в Досье контрагента, когда при проверке используется только ИНН и КПП, с самой
		// ссылки нет.
		// - при использовании функций ПроверитьКонтрагента и СостояниеКонтрагента ОМ
		// ПроверкаКонтрагентов извне как API без указания ссылки в параметре запуска.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ДанныеКонтрагентов.ЭтоЮридическоеЛицо,
			|	ДанныеКонтрагентов.ЭтоИностранныйКонтрагент,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние
			|ПОМЕСТИТЬ ДанныеКонтрагентов
			|ИЗ
			|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ВЫБОР
			|		КОГДА ДанныеКонтрагентов.ЭтоЮридическоеЛицо = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВЫБОР
			|					КОГДА Контрагенты.ЮридическоеФизическоеЛицо ЕСТЬ NULL 
			|						ТОГДА ВЫБОР
			|								КОГДА ПОДСТРОКА(ДанныеКонтрагентов.ИНН, 12, 1) <> """"
			|									ТОГДА ЛОЖЬ
			|								ИНАЧЕ ИСТИНА
			|							КОНЕЦ
			|					ИНАЧЕ ВЫБОР
			|							КОГДА Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
			|								ТОГДА ИСТИНА
			|							ИНАЧЕ ЛОЖЬ
			|						КОНЕЦ
			|				КОНЕЦ
			|		ИНАЧЕ ДанныеКонтрагентов.ЭтоЮридическоеЛицо
			|	КОНЕЦ КАК ЭтоЮридическоеЛицо,
			|	ВЫБОР
			|		КОГДА ДанныеКонтрагентов.ЭтоИностранныйКонтрагент = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВЫБОР
			|					КОГДА Контрагенты.СтранаРегистрации ЕСТЬ NULL 
			|						ТОГДА ЛОЖЬ
			|					ИНАЧЕ ВЫБОР
			|							КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|								ТОГДА ЛОЖЬ
			|							ИНАЧЕ ИСТИНА
			|						КОНЕЦ
			|				КОНЕЦ
			|		ИНАЧЕ ДанныеКонтрагентов.ЭтоИностранныйКонтрагент
			|	КОНЕЦ КАК ЭтоИностранныйКонтрагент,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние
			|ИЗ
			|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО ДанныеКонтрагентов.Контрагент = Контрагенты.Ссылка";
			
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
		КонецЕсли;
			
		Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
