
#Область СлужебныйПрограммныйИнтерфейс

Функция ВключеноИспользованиеМоихЗадач() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьБизнесПроцессыИЗадачи = Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИспользоватьБизнесПроцессыИЗадачи;
	
КонецФункции

Функция МоиЗадачиДоступны() Экспорт
	
	Если Не МоиЗадачи.ВключеноИспользованиеМоихЗадач() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Задачи.ЗадачаИсполнителя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьПравоВключатьМоиЗадачи() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Константы.ИспользоватьБизнесПроцессыИЗадачи);
	
КонецФункции

Процедура МоиЗадачиПриИзмененииОпцииПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФункциональнуюОпциюИнтерфейсаМоиЗадачи();
	
КонецПроцедуры

Процедура УстановитьФункциональнуюОпциюИнтерфейсаМоиЗадачи() Экспорт
	
	МоиЗадачиВключены = ВключеноИспользованиеМоихЗадач();
	
	Константы.МоиЗадачиПолныйИнтерфейс.Установить(МоиЗадачиВключены И ОбщегоНазначенияБП.ЭтоПолныйИнтерфейс());
	
	Константы.МоиЗадачиПростойИнтерфейс.Установить(МоиЗадачиВключены И ОбщегоНазначенияБП.ЭтоПростойИнтерфейс());
	
КонецПроцедуры

Функция ДанныеМоиЗадачи() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("Задачи", НоваяТаблицаЗадачИнформационнойПанели());
	
	ЗаполнитьМоиЗадачи(Данные);
	
	Возврат Данные;
	
КонецФункции

Процедура НастроитьФормуОрганайзер(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Элементы.ГруппаБизнесПроцессыИЗадачи.Заголовок = НСтр("ru = 'Мои задачи'");
	Элементы.ГруппаБизнесПроцессыИЗадачи.ЗаголовокСвернутогоОтображения = НСтр("ru = 'Мои задачи'");
	
	Элементы.ГруппаИспользоватьПодчиненныеБизнесПроцессы.Видимость = Ложь;
	Элементы.ГруппаИспользоватьДатуНачалаЗадач.Видимость = Ложь;
	Элементы.ГруппаОткрытьРолиИИсполнителиБизнесПроцессов.Видимость = Ложь;
	Элементы.ГруппаИзменятьЗаданияЗаднимЧислом.Видимость = Ложь;
	Элементы.ГруппаИспользоватьДатуИВремяВСрокахЗадач.Видимость = Ложь;
	
	Элементы.ИспользоватьБизнесПроцессыИЗадачи.Заголовок = НСтр("ru = 'Мои задачи'");
	Элементы.ИспользоватьБизнесПроцессыИЗадачиРасширеннаяПодсказка.Заголовок =
		НСтр("ru = 'Работа с задачами для пользователей'");
	
	Если Форма.Параметры.Свойство("ОткрытьМоиЗадачи") Тогда
		Если Форма.Элементы.ГруппаБизнесПроцессыИЗадачи.Скрыта() Тогда
			Форма.Элементы.ГруппаБизнесПроцессыИЗадачи.Показать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИспользоватьБизнесПроцессыИЗадачиПриИзменении(Форма) Экспорт
	
	Если Форма.Элементы.Найти("НадписьВсеЗадачи") <> Неопределено Тогда
		Форма.Элементы.НадписьВсеЗадачи.Доступность = ВключеноИспользованиеМоихЗадач();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьБлокМоиЗадачиДляВсехПользователей() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
			Если Пользователь <> Неопределено Тогда
				
				ВключитьБлокМоиЗадачиДляПользователя(Пользователь.Имя);
				
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		ИначеЕсли НЕ ОбщегоНазначения.РазделениеВключено() Тогда
			
			ВключитьБлокМоиЗадачиДляПользователя(Неопределено);
			
		КонецЕсли;
		
	КонецЦикла;

	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаЗадачИнформационнойПанели()
	
	НоваяТаблица = Новый ТаблицаЗначений;
	НоваяТаблица.Колонки.Добавить("Задача",                   Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя"));
	НоваяТаблица.Колонки.Добавить("Наименование",             ОбщегоНазначения.ОписаниеТипаСтрока(100));
	НоваяТаблица.Колонки.Добавить("Срок",                     ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	НоваяТаблица.Колонки.Добавить("Просрочена",               Новый ОписаниеТипов("Булево"));
	НоваяТаблица.Колонки.Добавить("Важная",               Новый ОписаниеТипов("Булево"));
	НоваяТаблица.Колонки.Добавить("ОтносительныйСрок",        ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Возврат НоваяТаблица;
	
КонецФункции

Процедура ЗаполнитьМоиЗадачи(Данные)
	
	ДатаПолученияДанных = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.Параметры.Вставить("НачалоТекущегоДня", ДатаПолученияДанных);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиПоИсполнителю.Ссылка КАК Задача,
	|	ВЫБОР
	|		КОГДА ЗадачиПоИсполнителю.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СортировкаПоСроку,
	|	ЗадачиПоИсполнителю.СрокИсполнения КАК Срок,
	|	ЗадачиПоИсполнителю.Наименование КАК Наименование,
	|	ЗадачиПоИсполнителю.СрокИсполнения < &НачалоТекущегоДня КАК Просрочена,
	|	ЗадачиПоИсполнителю.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая) КАК Важная
	|ИЗ
	|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(
	|			,
	|			СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
	|				И НЕ Выполнена
	|				И НЕ ПометкаУдаления) КАК ЗадачиПоИсполнителю
	|
	|УПОРЯДОЧИТЬ ПО
	|	СортировкаПоСроку,
	|	ЗадачиПоИсполнителю.СрокИсполнения,
	|	ЗадачиПоИсполнителю.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МояЗадача = Данные.Задачи.Добавить();
		ЗаполнитьЗначенияСвойств(МояЗадача, Выборка);
		Если ЗначениеЗаполнено(МояЗадача.Срок) Тогда
			МояЗадача.ОтносительныйСрок = ОтносительныйСрок(ДатаПолученияДанных, МояЗадача.Срок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОтносительныйСрок(ИсходнаяДата, Срок)
	
	СекундВДне = 24 * 60 * 60;
	
	РазницаВДнях = Цел((НачалоДня(Срок) - НачалоДня(ИсходнаяДата))/ СекундВДне);
	
	Если РазницаВДнях = 0 Тогда
		Возврат НСтр("ru = 'Сегодня'");
	ИначеЕсли РазницаВДнях = 1 Тогда
		Возврат НСтр("ru = 'Завтра'");
	ИначеЕсли РазницаВДнях = -1 Тогда
		Возврат НСтр("ru = 'Вчера'");
	КонецЕсли;
	
	РазницаВДняхБезУчетаЗнака = ?(РазницаВДнях > 0, РазницаВДнях, -РазницаВДнях);
	
	ПериодСтрокой = ПериодСтрокойПоРазницеВДнях(РазницаВДняхБезУчетаЗнака);
	Если Не ЗначениеЗаполнено(ПериодСтрокой) Тогда
		Если Год(Срок) = Год(ИсходнаяДата) Тогда
			ПериодСтрокой = Формат(Срок, "ДФ='dd MMMM'");
		Иначе
			ПериодСтрокой = Формат(Срок, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		Возврат СтрШаблон(НСтр("ru = '%1'"),
			ОбщегоНазначенияБПКлиентСервер.КапитализироватьСтроку(ПериодСтрокой));
	КонецЕсли;
	
	Если РазницаВДнях > 0 Тогда
		Возврат СтрШаблон(НСтр("ru = 'Через %1'"),
			ОбщегоНазначенияБПКлиентСервер.ДекапитализироватьСтроку(ПериодСтрокой));
	Иначе
		Возврат СтрШаблон(НСтр("ru = '%1 назад'"),
			ОбщегоНазначенияБПКлиентСервер.КапитализироватьСтроку(ПериодСтрокой));
	КонецЕсли;
	
КонецФункции

Функция ПериодСтрокойПоРазницеВДнях(РазницаВДнях)
	
	Если РазницаВДнях > 0 И РазницаВДнях < 7 Тогда
		Возврат СтрокаСЧислом(";%1 день;;%1 дня;%1 дней;%1 дня",
					РазницаВДнях,
					ВидЧисловогоЗначения.Количественное,
					"L=ru");
	ИначеЕсли РазницаВДнях >= 7 И РазницаВДнях < 14 Тогда
		Возврат НСтр("ru = 'Неделю'");
	ИначеЕсли РазницаВДнях >= 14 И РазницаВДнях < 28 Тогда
		КоличествоНедель = Цел(РазницаВДнях/7);
		Возврат СтрокаСЧислом(";%1 неделя;;%1 недели;%1 недель;%1 недели",
					КоличествоНедель,
					ВидЧисловогоЗначения.Количественное,
					"L=ru");
	ИначеЕсли РазницаВДнях >= 28 И РазницаВДнях < 56 Тогда
		Возврат НСтр("ru = 'Месяц'");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ВключитьБлокМоиЗадачиДляПользователя(ИмяПользователя)
	
	НастройкаБлоков = ИнформационнаяПанель.ПрочитатьНастройки(ИмяПользователя);
	Если ТипЗнч(НастройкаБлоков) <> Тип("Структура") Тогда
		// У пользователя настройка по умолчанию, виджет и так будет выводится по умолчанию.
		Возврат;
	КонецЕсли;
	
	ИнформационнаяПанель.ВставитьБлокВНастройки(НастройкаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаМоиЗадачи(),
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаЗадачи());
	
	ИнформационнаяПанель.СохранитьНастройки(НастройкаБлоков, ИмяПользователя);
	
КонецПроцедуры

#КонецОбласти