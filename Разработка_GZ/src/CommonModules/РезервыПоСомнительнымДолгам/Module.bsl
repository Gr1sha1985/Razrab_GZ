#Область ПрограммныйИнтерфейс

// Рассчитывает сумму резерва по сомнительным долгам для целей налогового учета за налоговый период (с начала фискального года),
// но без ограничения, предусмотренного п. 4 ст. 266 НК РФ.
//
// Параметры:
//  ОтчетныйПериод	 - Дата - Характеризует отчетный период - любая дата последнего месяца отчетного периода. 
//  Организация		 - СправочникСсылка.Организации - организация, по данным которой рассчитывается сумма резерва
// 
// Возвращаемое значение:
//  Число - сумма резерва
//
Функция СуммаРезерваНУ(ОтчетныйПериод, Организация) Экспорт
	
	Если Не УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамНУ(Организация, ОтчетныйПериод) Тогда
		Возврат  0;
	КонецЕсли;
	
	ОтчетнаяДата = КонецМесяца(ОтчетныйПериод) + 1;
	Организации  = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	
	Если Не ЗначениеЗаполнено(Организации) Тогда
		Возврат 0;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ДанныеДляНачисленияРезерва = ДанныеДляНачисленияРезерва(ОтчетнаяДата, Организации, МенеджерВременныхТаблиц);
	РасчетРезерва = РассчитатьРезерв(ДанныеДляНачисленияРезерва, ОтчетнаяДата, МенеджерВременныхТаблиц);
	
	Возврат РасчетРезерва.Итог("РезервНУ");
	
КонецФункции

// Начисляет суммы резерва по каждой задолженности отдельно в соответствии с учетной политикой.
// При начислении сумм для целей налогового учета, может учитываться ограничение, предусмотренное п. 4 ст. 266 НК РФ.
// Такое ограничение должно быть рассчитано ранее, выражено в виде доли и записано в регистр сведений ДолиСписанияКосвенныхРасходов.
//
// Параметры:
//  ОтчетныйПериод	 - Дата - Характеризует отчетный период - любая дата последнего месяца отчетного периода. 
//  Организация		 - СправочникСсылка.Организации - организация, по данным которой рассчитывается сумма резерва
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НовыйНачислениеРезерваПоСомнительнымДолгам()
//
Функция НачислитьРезерв(ОтчетныйПериод, Организация) Экспорт
	
	ФормироватьБУ = УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамБУ(Организация, ОтчетныйПериод);
	ФормироватьНУ = УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамНУ(Организация, ОтчетныйПериод);
	
	Если Не ФормироватьБУ И Не ФормироватьНУ Тогда
		Возврат НовыйНачислениеРезерваПоСомнительнымДолгам();
	КонецЕсли;
	
	ОтчетнаяДата = КонецМесяца(ОтчетныйПериод) + 1;
	
	Если Не ФормироватьБУ Тогда
		ПрименятьПункт70Приказа34н = Ложь;
	Иначе
		НачалоСледующегоОтчетногоПериода = БухгалтерскийУчет.НачалоОтчетногоГода(ОтчетнаяДата, Организация);
		ПрименятьПункт70Приказа34н = (ОтчетнаяДата = НачалоСледующегоОтчетногоПериода); // см. ниже - выполнение формальных требований приказа
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ДанныеДляНачисленияРезерва = ДанныеДляНачисленияРезерва(
		ОтчетнаяДата,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация),
		МенеджерВременныхТаблиц,
		Истина, // нужны данные о состоянии резерва
		ПрименятьПункт70Приказа34н);
	
	РасчетРезервов = РассчитатьРезерв(ДанныеДляНачисленияРезерва, ОтчетнаяДата, МенеджерВременныхТаблиц);
		
	НачислениеРезерва = НовыйНачислениеРезерваПоСомнительнымДолгам(РасчетРезервов);
	
	// Ограничим суммы резервов для исчисления налога на прибыль
	// (п. 4 ст. 266 НК РФ)
	
	Если ФормироватьНУ Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(ОтчетныйПериод));
		Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(ОтчетныйПериод));
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляРезервовПоСомнительнымДолгамНУ КАК КоэффициентОграничения
		|ИЗ
		|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК РасчетДолейСписанияКосвенныхРасходов
		|ГДЕ
		|	РасчетДолейСписанияКосвенныхРасходов.Организация = &ГоловнаяОрганизация
		|	И РасчетДолейСписанияКосвенныхРасходов.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КоэффициентОграничения = Выборка.КоэффициентОграничения;
		Иначе
			КоэффициентОграничения = 1;
		КонецЕсли;
		
		Если КоэффициентОграничения >= 1 Тогда
			НачислениеРезерва.ЗагрузитьКолонку(НачислениеРезерва.ВыгрузитьКолонку("РезервНУ"), "РезервНУВПределахОграничения");
		Иначе
			РезервНУВПределахОграничения = Окр(НачислениеРезерва.Итог("РезервНУ") * КоэффициентОграничения, 2);
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				РезервНУВПределахОграничения,
				НачислениеРезерва,
				"РезервНУВПределахОграничения",
				"РезервНУ");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Запись Из НачислениеРезерва Цикл
		
		// Если отключено формирование резервов в БУ, то не начисляем и не восстанавливаем резервы.
		// Восстановление резервов не делаем, т.к. большинство тех, кто отключает резервы в БУ,
		// на самом деле вносят проводки по БУ вручную.
		Если ФормироватьБУ Тогда
			// В соответствии с п. ПБУ 21 изменение оценочного значения включается в доходы или расходы.
			Изменение = Запись.Резерв - Запись.ОстатокРезерваПредыдущегоПериода;
			Если Изменение > 0 Тогда
				Запись.Расходы = Изменение;
			Иначе	
				Запись.Доходы  = - Изменение;
			КонецЕсли;
		КонецЕсли;
			
		// В соответствии с п. 5 ст. 266 НК РФ разница в оценке резерва на отчетную дату и предыдущую отчетную дату 
		// включается в состав доходов или расходов.
		
		Разница = Запись.РезервНУВПределахОграничения - Запись.ОстатокРезерваПредыдущегоПериодаНУ;
		
		Если Разница > 0 Тогда
			Если ФормироватьНУ Тогда
				Запись.РасходыНУ = Разница;
			КонецЕсли;
		Иначе	
			Запись.ДоходыНУ  = - Разница;
		КонецЕсли;
			
		// п. 70 Положения по ведению бухгалтерского учета (Приказ Минфина РФ от 29.07.1998 N 34н)
		// Если до конца отчетного года, следующего за годом создания резерва сомнительных долгов, 
		// этот резерв в какой-либо части не будет использован,
		// то неизрасходованные суммы присоединяются при составлении бухгалтерского баланса на конец отчетного года к финансовым результатам.
		
		Если ПрименятьПункт70Приказа34н Тогда
		
			Запись.НеизрасходованныеСуммыРезерваПрошлогоГода = Мин( // Неотрицательное
				Запись.ОстатокРезерваПредыдущегоГода,
				Запись.ОстатокРезерваПредыдущегоПериода,
				Запись.Резерв);
				
		КонецЕсли;
	КонецЦикла;
	
	// Заполним реквизиты для совместимости
	Для Каждого ОписаниеКолонки Из КолонкиДляСовместимости() Цикл
		НачислениеРезерва.ЗагрузитьКолонку(НачислениеРезерва.ВыгрузитьКолонку(ОписаниеКолонки.Значение), ОписаниеКолонки.Ключ);
	КонецЦикла;

	Возврат НачислениеРезерва;
	
КонецФункции

// Формирует проводки по начислению резерва, его восстановлению или присоединению к доходам и расходам.
//
// Параметры:
//  НаборЗаписейХозрасчетный - наборов записей проводок, который будет дополнен
//  НачислениеРезерва	     - см. НовыйНачислениеРезерваПоСомнительнымДолгам() - исходные данные для проводок
//  Период				     - Дата - период записи проводок
//  Организация			     - СправочникСсылка.Организация - организация, проводки которой записываются
//
Процедура СформироватьПроводки(НаборЗаписейХозрасчетный, НачислениеРезерва, Период, Организация) Экспорт

	ПрименениеПБУ18  = УчетнаяПолитика.ПоддержкаПБУ18(Организация, Период);
	
	ОсновнойВидРазниц = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(Период, Организация);
	
	СчетРезервыПоСомнительнымДолгам = ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам;
	СчетПрочиеДоходы                = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	СчетПрочиеРасходы               = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	
	СтатьяДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("РезервыПоСомнительнымДолгам");
	ВидСубконтоПрочиеДоходыИРасходы            = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	ВидСубконтоКонтрагенты                     = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоДоговоры                        = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	ВидСубконтоДокументыРасчетовСКонтрагентами = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
	
	Для Каждого Запись Из НачислениеРезерва Цикл
		
		Если Запись.НачисленоБУ <> 0 Или Запись.НачисленоНУ <> 0 Тогда
			
			Проводка                = НаборЗаписейХозрасчетный.Добавить();
			Проводка.Период         = Период;
			Проводка.Организация    = Организация;
			
			Проводка.Содержание     = НСтр("ru = 'Начислены резервы по сомнительным долгам'", Метаданные.ОсновнойЯзык.КодЯзыка);
			
			Проводка.СчетДт         = СчетПрочиеРасходы;
			Проводка.СубконтоДт.Вставить(ВидСубконтоПрочиеДоходыИРасходы, СтатьяДоходовРасходов);
			
			Проводка.СчетКт         = СчетРезервыПоСомнительнымДолгам;
			Проводка.СубконтоКт.Вставить(ВидСубконтоКонтрагенты,                     Запись.Контрагент);
			Проводка.СубконтоКт.Вставить(ВидСубконтоДоговоры,                        Запись.ДоговорКонтрагента);
			Проводка.СубконтоКт.Вставить(ВидСубконтоДокументыРасчетовСКонтрагентами, Запись.ДокументРасчетовСКонтрагентом);
			
			Проводка.Сумма = Запись.НачисленоБУ;
			
			ЗаполнитьНалоговыеСуммыПроводки(
				Проводка,
				Запись.НачисленоНУ,
				ПрименениеПБУ18,
				ОсновнойВидРазниц);
			
		КонецЕсли;
		
		Если Запись.ВосстановленоБУ <> 0 Или Запись.ВосстановленоНУ <> 0 Тогда
			
			Проводка                = НаборЗаписейХозрасчетный.Добавить();
			Проводка.Период         = Период;
			Проводка.Организация    = Организация;
			
			Проводка.Содержание     = НСтр("ru = 'Восстановлены резервы по сомнительным долгам'", Метаданные.ОсновнойЯзык.КодЯзыка);
			
			Проводка.СчетДт         = СчетРезервыПоСомнительнымДолгам;
			Проводка.СубконтоДт.Вставить(ВидСубконтоКонтрагенты,                     Запись.Контрагент);
			Проводка.СубконтоДт.Вставить(ВидСубконтоДоговоры,                        Запись.ДоговорКонтрагента);
			Проводка.СубконтоДт.Вставить(ВидСубконтоДокументыРасчетовСКонтрагентами, Запись.ДокументРасчетовСКонтрагентом);
			
			Проводка.СчетКт         = СчетПрочиеДоходы;
			Проводка.СубконтоКт.Вставить(ВидСубконтоПрочиеДоходыИРасходы, СтатьяДоходовРасходов);
			
			Проводка.Сумма = Запись.ВосстановленоБУ;
			
			ЗаполнитьНалоговыеСуммыПроводки(
				Проводка,
				Запись.ВосстановленоНУ,
				ПрименениеПБУ18,
				ОсновнойВидРазниц);
				
		КонецЕсли;
		
		Если Запись.ПрисоединеноБУ <> 0 Тогда
			
			// к доходам
			Проводка                = НаборЗаписейХозрасчетный.Добавить();
			Проводка.Период         = Период;
			Проводка.Организация    = Организация;
			
			Проводка.Содержание     = НСтр("ru = 'Присоединение резерва к доходам'", Метаданные.ОсновнойЯзык.КодЯзыка);
			
			Проводка.СчетДт       	= СчетРезервыПоСомнительнымДолгам;
			Проводка.СубконтоДт.Вставить(ВидСубконтоКонтрагенты,                     Запись.Контрагент);
			Проводка.СубконтоДт.Вставить(ВидСубконтоДоговоры,                        Запись.ДоговорКонтрагента);
			Проводка.СубконтоДт.Вставить(ВидСубконтоДокументыРасчетовСКонтрагентами, Запись.ДокументРасчетовСКонтрагентом);
			
			Проводка.СчетКт         = СчетПрочиеДоходы;
			Проводка.СубконтоКт.Вставить(ВидСубконтоПрочиеДоходыИРасходы, СтатьяДоходовРасходов);
			
			Проводка.Сумма = Запись.ПрисоединеноБУ;
			ЗаполнитьНалоговыеСуммыПроводки(
				Проводка,
				0, // Не отражается в налоговом учете
				ПрименениеПБУ18,
				ОсновнойВидРазниц);
			
			// к расходам
			Проводка                = НаборЗаписейХозрасчетный.Добавить();
			Проводка.Период         = Период;
			Проводка.Организация    = Организация;
			
			Проводка.Содержание     = НСтр("ru = 'Присоединение резерва к расходам'", Метаданные.ОсновнойЯзык.КодЯзыка);
			
			Проводка.СчетДт         = СчетПрочиеРасходы;
			Проводка.СубконтоДт.Вставить(ВидСубконтоПрочиеДоходыИРасходы, СтатьяДоходовРасходов);
			
			Проводка.СчетКт       	= СчетРезервыПоСомнительнымДолгам;
			Проводка.СубконтоКт.Вставить(ВидСубконтоКонтрагенты,                     Запись.Контрагент);
			Проводка.СубконтоКт.Вставить(ВидСубконтоДоговоры,                        Запись.ДоговорКонтрагента);
			Проводка.СубконтоКт.Вставить(ВидСубконтоДокументыРасчетовСКонтрагентами, Запись.ДокументРасчетовСКонтрагентом);
			
			Проводка.Сумма = Запись.ПрисоединеноБУ;
			ЗаполнитьНалоговыеСуммыПроводки(
				Проводка,
				0, // Не отражается в налоговом учете
				ПрименениеПБУ18,
				ОсновнойВидРазниц);
			
		КонецЕсли;
		
		Если ПрименениеПБУ18 
			И ОсновнойВидРазниц <> Перечисления.ВидыРазницПБУ18.ПР 
			И Запись.ОстатокРезерваПредыдущегоПериодаПР <> 0 Тогда
			
			// Ранее признанные постоянные разницы следует переквалифицировать во временные
			Проводка                = НаборЗаписейХозрасчетный.Добавить();
			Проводка.Период         = Период;
			Проводка.Организация    = Организация;
			
			Проводка.Содержание     = НСтр("ru = 'Признание временной разницы'", Метаданные.ОсновнойЯзык.КодЯзыка);
			
			Проводка.СчетДт         = СчетПрочиеРасходы;
			Проводка.СубконтоДт.Вставить(ВидСубконтоПрочиеДоходыИРасходы, СтатьяДоходовРасходов);
			
			Проводка.СчетКт         = СчетРезервыПоСомнительнымДолгам;
			Проводка.СубконтоКт.Вставить(ВидСубконтоКонтрагенты,                     Запись.Контрагент);
			Проводка.СубконтоКт.Вставить(ВидСубконтоДоговоры,                        Запись.ДоговорКонтрагента);
			Проводка.СубконтоКт.Вставить(ВидСубконтоДокументыРасчетовСКонтрагентами, Запись.ДокументРасчетовСКонтрагентом);
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				0, 0,
				-Запись.ОстатокРезерваПредыдущегоПериодаПР, -Запись.ОстатокРезерваПредыдущегоПериодаПР,// ПР
				Запись.ОстатокРезерваПредыдущегоПериодаПР, Запись.ОстатокРезерваПредыдущегоПериодаПР, // ВР
				Проводка,
				ПрименениеПБУ18);
				
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписейХозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьНалоговыеСуммыПроводки(Проводка, СуммаНУ, ПрименениеПБУ18, ОсновнойВидРазниц)
	
	Разница = Проводка.Сумма - СуммаНУ;
	
	Если ОсновнойВидРазниц = Перечисления.ВидыРазницПБУ18.ПР Тогда
		// Ранее к временным разницам относили только те, для которых известен срок погашения.
		СуммаПР = Разница;
		СуммаВР = 0;
	Иначе
		// Разница будет погашена при возврате долга или признании его безнадежным.
		СуммаПР = 0;
		СуммаВР = Разница;
	КонецЕсли;
	
	НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
		СуммаНУ, СуммаНУ,
		СуммаПР, СуммаПР,
		СуммаВР, СуммаВР,
		Проводка,
		ПрименениеПБУ18);
	
КонецПроцедуры
			
#КонецОбласти

#Область РасчетРезервов

// Получает из информационной базы данные для расчета и (если необходимо) начисления резервов.
// Для расчета резервов нужны данные о задолженности.
// Для начисления дополнительно могут быть нужны данные о состоянии ранее начисленных резервов на отчетную дату и начало отчетного периода.
//
// Параметры:
//  ОтчетнаяДата                         - Дата - дата, на которую начисляется резерв. Обычно первое число месяца.
//  Организации	                         - Массив - организации (филиалы), по данным которых начисляется резерв.
//                                         Коллекция должна быть не пустой.
//  МенеджерВременныхТаблиц	  			 - МенеджерВременныхТаблиц - используется для сохранения временных таблиц, 
//										   которые далее используются для отбора данных - см. ДанныеВстречнойЗадолженности().
//  ПолучатьСостояниеРезерва			 - Булево - нужны ли для дальнейшего расчета данные о состоянии резерва. Данные определяются на отчетную дату.
//  ПолучатьСостояниеРезерваНачалоГода	 - Булево - нужны ли, в дополнение к данным на отчетную дату, данные о состоянии резерва на начало отчетного года.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса
//
Функция ДанныеДляНачисленияРезерва(ОтчетнаяДата, Организации, МенеджерВременныхТаблиц, ПолучатьСостояниеРезерва = Ложь, ПолучатьСостояниеРезерваНачалоГода = Ложь)
	
	// Определим счета расчетов.
	// Резервы рассчитываются только по задолженности покупателей, номинированной в рублях.
	// Отбираются счета 
	// - 62 (за исключением 62.02)
	// - 76.06
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками))
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным))
	|	И НЕ Хозрасчетный.Валютный";
	СчетаРасчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"); // Перечень счетов передается далее в запрос через параметр, так как это эффективнее, чем использование временной таблицы в параметрах виртуальной таблицы.
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Получение данных о дебиторской задолженности.
	
	ВидыСубконтоРасчетов = Новый Массив;
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	ИзмеренияРасчета = Метаданные.РегистрыСведений.РасчетРезервовПоСомнительнымДолгам.Измерения;
	Запрос.УстановитьПараметр("ТипыКонтрагенты",                     ИзмеренияРасчета.Контрагент.Тип.Типы());
	Запрос.УстановитьПараметр("ТипыДоговорыКонтрагентов",            ИзмеренияРасчета.ДоговорКонтрагента.Тип.Типы());
	Запрос.УстановитьПараметр("ТипыДокументыРасчетовСКонтрагентами", ИзмеренияРасчета.ДокументРасчетовСКонтрагентом.Тип.Типы());
	
	Запрос.УстановитьПараметр("ОтчетнаяДата",  ОтчетнаяДата);
	Запрос.УстановитьПараметр("Организации",   Организации);
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконтоРасчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеРегистраХозрасчетный.Организация КАК Организация,
	|	ДанныеРегистраХозрасчетный.Контрагент КАК Контрагент,
	|	ДанныеРегистраХозрасчетный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеРегистраХозрасчетный.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	СУММА(ДанныеРегистраХозрасчетный.Задолженность) КАК Задолженность,
	|	СУММА(ДанныеРегистраХозрасчетный.ЗадолженностьНУ) КАК ЗадолженностьНУ,
	|	СУММА(ДанныеРегистраХозрасчетный.ОстатокРезерваПредыдущегоПериода) КАК ОстатокРезерваПредыдущегоПериода,
	|	СУММА(ДанныеРегистраХозрасчетный.ОстатокРезерваПредыдущегоПериодаНУ) КАК ОстатокРезерваПредыдущегоПериодаНУ,
	|	СУММА(ДанныеРегистраХозрасчетный.ОстатокРезерваПредыдущегоПериодаПР) КАК ОстатокРезерваПредыдущегоПериодаПР,
	|	СУММА(ДанныеРегистраХозрасчетный.ОстатокРезерваПредыдущегоГода) КАК ОстатокРезерваПредыдущегоГода
	|ПОМЕСТИТЬ ДанныеРегистраХозрасчетный
	|ИЗ
	|	(ВЫБРАТЬ
	|		Задолженность.Организация КАК Организация,
	|		Задолженность.Субконто1 КАК Контрагент,
	|		Задолженность.Субконто2 КАК ДоговорКонтрагента,
	|		Задолженность.Субконто3 КАК ДокументРасчетовСКонтрагентом,
	|		ЕСТЬNULL(Задолженность.СуммаОстатокДт, 0) КАК Задолженность,
	|		ЕСТЬNULL(Задолженность.СуммаНУОстатокДт, 0) КАК ЗадолженностьНУ,
	|		0 КАК ОстатокРезерваПредыдущегоПериода,
	|		0 КАК ОстатокРезерваПредыдущегоПериодаНУ,
	|		0 КАК ОстатокРезерваПредыдущегоПериодаПР,
	|		0 КАК ОстатокРезерваПредыдущегоГода
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ОтчетнаяДата,
	|				Счет В (&СчетаРасчетов),
	|				&ВидыСубконто,
	|				Организация В (&Организации)
	|					И ТИПЗНАЧЕНИЯ(Субконто1) В (&ТипыКонтрагенты)
	|					И ТИПЗНАЧЕНИЯ(Субконто2) В (&ТипыДоговорыКонтрагентов)
	|					И ТИПЗНАЧЕНИЯ(Субконто3) В (&ТипыДокументыРасчетовСКонтрагентами)
	|					И Субконто3 <> НЕОПРЕДЕЛЕНО) КАК Задолженность
	|	ГДЕ
	|		Задолженность.СуммаОстатокДт > 0
	|
	|%ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ%
	|
	|) КАК ДанныеРегистраХозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистраХозрасчетный.Организация,
	|	ДанныеРегистраХозрасчетный.Контрагент,
	|	ДанныеРегистраХозрасчетный.ДоговорКонтрагента,
	|	ДанныеРегистраХозрасчетный.ДокументРасчетовСКонтрагентом
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДокументРасчетовСКонтрагентом";
	
	Если Не ПолучатьСостояниеРезерва Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ%", "");
	Иначе
		
		ТекстЗапросаДополнительныхДанных = 
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|" + // следующий фрагмент можно редактировать конструктором запроса
		"ВЫБРАТЬ
		|	ОстаткиРезервов.Организация КАК Организация,
		|	ОстаткиРезервов.Субконто1 КАК Контрагент,
		|	ОстаткиРезервов.Субконто2 КАК ДоговорКонтрагента,
		|	ОстаткиРезервов.Субконто3 КАК ДокументРасчетовСКонтрагентом,
		|	0 КАК Задолженность,
		|	0 КАК ЗадолженностьНУ,
		|	ОстаткиРезервов.СуммаОстатокКт КАК ОстатокРезерваПредыдущегоПериода,
		|	ОстаткиРезервов.СуммаНУОстатокКт КАК ОстатокРезерваПредыдущегоПериодаНУ,
		|	ОстаткиРезервов.СуммаПРОстатокКт КАК ОстатокРезерваПредыдущегоПериодаПР,
		|	0 КАК ОстатокРезерваПредыдущегоГода
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ОтчетнаяДата,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам),
		|			&ВидыСубконто,
		|			Организация В (&Организации)
		|				И ТИПЗНАЧЕНИЯ(Субконто1) В (&ТипыКонтрагенты)
		|				И ТИПЗНАЧЕНИЯ(Субконто2) В (&ТипыДоговорыКонтрагентов)
		|				И ТИПЗНАЧЕНИЯ(Субконто3) В (&ТипыДокументыРасчетовСКонтрагентами)
		|				И Субконто3 <> НЕОПРЕДЕЛЕНО) КАК ОстаткиРезервов";
		
		Если ПолучатьСостояниеРезерваНачалоГода Тогда
			
			НачалоОтчетногоГода = БухгалтерскийУчет.НачалоОтчетногоГода(ОтчетнаяДата - 1, Организации[0]);
			Если ЗначениеЗаполнено(НачалоОтчетногоГода) Тогда
			
				// Следующий запрос отличается периодом и именем полей, в которые помещаются суммы
				
				Запрос.УстановитьПараметр("НачалоГода", НачалоОтчетногоГода);
				
				ТекстЗапросаДополнительныхДанных = ТекстЗапросаДополнительныхДанных + 
				"
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|" + // следующий фрагмент можно редактировать конструктором запроса
				"ВЫБРАТЬ
				|	ОстаткиРезервов.Организация КАК Организация,
				|	ОстаткиРезервов.Субконто1 КАК Контрагент,
				|	ОстаткиРезервов.Субконто2 КАК ДоговорКонтрагента,
				|	ОстаткиРезервов.Субконто3 КАК ДокументРасчетовСКонтрагентом,
				|	0 КАК Задолженность,
				|	0 КАК ЗадолженностьНУ,
				|	0 КАК ОстатокРезерваПредыдущегоПериода,
				|	0 КАК ОстатокРезерваПредыдущегоПериодаНУ,
				|	0 КАК ОстатокРезерваПредыдущегоПериодаПР,
				|	ОстаткиРезервов.СуммаОстатокКт КАК ОстатокРезерваПредыдущегоГода
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Остатки(
				|			&НачалоГода,
				|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам),
				|			&ВидыСубконто,
				|			Организация В (&Организации)
				|				И ТИПЗНАЧЕНИЯ(Субконто1) В (&ТипыКонтрагенты)
				|				И ТИПЗНАЧЕНИЯ(Субконто2) В (&ТипыДоговорыКонтрагентов)
				|				И ТИПЗНАЧЕНИЯ(Субконто3) В (&ТипыДокументыРасчетовСКонтрагентами)
				|				И Субконто3 <> НЕОПРЕДЕЛЕНО) КАК ОстаткиРезервов";
				
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ%", ТекстЗапросаДополнительныхДанных);
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	// Сохраним выбранные данные во временную таблицу - для выбора встречного долга (см. ДанныеВстречнойЗадолженности())  
	// Дополним данные о задолженности и резервах показателями договоров и документов
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистраХозрасчетный.Организация КАК Организация,
	|	ДанныеРегистраХозрасчетный.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ Контрагенты
	|ИЗ
	|	ДанныеРегистраХозрасчетный КАК ДанныеРегистраХозрасчетный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистраХозрасчетный.Организация КАК Организация,
	|	ДанныеРегистраХозрасчетный.Контрагент КАК Контрагент,
	|	ДанныеРегистраХозрасчетный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеРегистраХозрасчетный.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК ДатаПризнанияЗадолженности,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.УстановленСрокОплаты, ЛОЖЬ) КАК СрокОплатыУстановленДоговором,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.СрокОплаты, 0) КАК СрокОплатыПоДоговору,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ДатаОплаты, ДатаВремя(1, 1, 1)) КАК ДатаОплатыПоДоговору,
	|	ДанныеРегистраХозрасчетный.Задолженность КАК Задолженность,
	|	ДанныеРегистраХозрасчетный.ЗадолженностьНУ КАК ЗадолженностьНУ,
	|	ДанныеРегистраХозрасчетный.ОстатокРезерваПредыдущегоПериода КАК ОстатокРезерваПредыдущегоПериода,
	|	ДанныеРегистраХозрасчетный.ОстатокРезерваПредыдущегоПериодаНУ КАК ОстатокРезерваПредыдущегоПериодаНУ,
	|	ДанныеРегистраХозрасчетный.ОстатокРезерваПредыдущегоПериодаПР КАК ОстатокРезерваПредыдущегоПериодаПР,
	|	ДанныеРегистраХозрасчетный.ОстатокРезерваПредыдущегоГода КАК ОстатокРезерваПредыдущегоГода
	|ИЗ
	|	ДанныеРегистраХозрасчетный КАК ДанныеРегистраХозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ДанныеРегистраХозрасчетный.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДанныеРегистраХозрасчетный.Организация = ДанныеПервичныхДокументов.Организация
	|			И ДанныеРегистраХозрасчетный.ДокументРасчетовСКонтрагентом = ДанныеПервичныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ДокументРасчетовСКонтрагентом";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Получает из информационной базы данные по встречной (кредиторской) задолженности перед контрагентами.
// Данные используются для расчета резервов.
// Ст. 266 НК РФ (с 01.01.2017):
// При наличии у налогоплательщика перед контрагентом встречного обязательства (кредиторской задолженности) 
// сомнительным долгом признается соответствующая задолженность перед налогоплательщиком в той части,
// которая превышает указанную кредиторскую задолженность налогоплательщика перед этим контрагентом.
//
// Параметры:
//  ОтчетнаяДата              - Дата - дата, на которую начисляется резерв. Обычно первое число месяца.
//  МенеджерВременныхТаблиц	  - МенеджерВременныхТаблиц - содержит временные таблицы, используемые для отбора данных.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса
//
Функция ДанныеВстречнойЗадолженности(ОтчетнаяДата, МенеджерВременныхТаблиц)
	
	// Определим счета расчетов.
	// Кредиторская задолженность перед контрагентами может числиться как:
	// - задолженность перед поставщиками на 60-х счетах
	// - авансы покупателей на счетах 62.02
	// - прочая задолженность перед поставщиками и покупателями
	// - задолженность по полученным кредитам и займам
	// Выбирается только кредиторская задолженность, номинированная в рублях.
	// Отбираются счета 
	// - 60 (за исключением 60.02)
	// - 62.02
	// - 66
	// - 67
	// - 76.02
	// - 76.05
	// - 76.06
	// - 76.09
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|	(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками),
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным),
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам),
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам),
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям),
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками), 
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками), 
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами))
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
	|	И НЕ Хозрасчетный.Валютный";
		
	СчетаРасчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Получение данных о дебиторской задолженности.
			
	Запрос.УстановитьПараметр("ОтчетнаяДата",  	ОтчетнаяДата);
	Запрос.УстановитьПараметр("СчетаРасчетов", 	СчетаРасчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Субконто1 КАК Контрагент,
	|	СУММА(ЕСТЬNULL(Задолженность.СуммаОстатокКт, 0)) КАК Задолженность,
	|	СУММА(ЕСТЬNULL(Задолженность.СуммаНУОстатокКт, 0)) КАК ЗадолженностьНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ОтчетнаяДата,
	|			Счет В (&СчетаРасчетов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			(Организация, Субконто1) В
	|				(ВЫБРАТЬ
	|					Контрагенты.Организация,
	|					Контрагенты.Контрагент
	|				ИЗ
	|					Контрагенты КАК Контрагенты)) КАК Задолженность
	|ГДЕ
	|	Задолженность.СуммаОстатокКт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Задолженность.Организация,
	|	Задолженность.Субконто1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Контрагент";
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Рассчитывает резерв по сомнительным долгам по данным о задолженности покупателей,
// отраженной в бухгалтерском и налоговом учете.
// Эти данные должны быть предварительно получены с помощью ДанныеДляНачисленияРезерва().
// Для целей налогового учета не учитывается ограничение, предусмотренное п. 4 ст. 266 НК РФ.
//
// Параметры:
//  ДанныеДляНачисленияРезерва - см. ДанныеДляНачисленияРезерва()
//  ОтчетнаяДата               - Дата - дата, на которую начисляется резерв. Обычно первое число месяца.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, см. НовыйРасчетРезерваПоСомнительнымДолгам() - содержит детальный расчет резерва.
//
Функция РассчитатьРезерв(ДанныеДляНачисленияРезерва, ОтчетнаяДата, МенеджерВременныхТаблиц)
	
	ОбщийСрокОплаты = Константы.СрокОплатыПокупателей.Получить();
	
	РасчетРезерва = НовыйРасчетРезерваПоСомнительнымДолгам();
	
	ПродолжительностьСуток = 86400; // Секунд в сутках: 60 * 60 * 24
	
	Пока ДанныеДляНачисленияРезерва.Следующий() Цикл
		
		Запись = РасчетРезерва.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДляНачисленияРезерва);
		
		// Отчетная дата - это день, следующий за окончанием отчетного периода.
		// Поэтому из расчета срока вычитается один день.
		Запись.СрокЗадолженности =
			(ОтчетнаяДата - Запись.ДатаПризнанияЗадолженности) / ПродолжительностьСуток - 1; // В календарных днях
		
		Если Запись.СрокОплатыУстановленДоговором Тогда
			Если ЗначениеЗаполнено(Запись.ДатаОплатыПоДоговору) Тогда
				
				Запись.СрокОплаты = (Запись.ДатаОплатыПоДоговору - Запись.ДатаПризнанияЗадолженности) / ПродолжительностьСуток;
				Если Запись.СрокОплаты < 0 Тогда
					Запись.СрокОплаты = 0;
				КонецЕсли;
				
			Иначе
				Запись.СрокОплаты = Запись.СрокОплатыПоДоговору;
			КонецЕсли;
		Иначе
			Запись.СрокОплаты = ОбщийСрокОплаты;
		КонецЕсли;
		
		Если Запись.СрокЗадолженности < Запись.СрокОплаты Тогда
			Продолжить;
		КонецЕсли;
		
		Запись.Просрочка = Запись.СрокЗадолженности - Запись.СрокОплаты;
		
		Запись.ДатаПризнанияЗадолженностиПросроченной =
			Запись.ДатаПризнанияЗадолженности + Запись.СрокОплаты * ПродолжительностьСуток;
		
	КонецЦикла;
	
	// С 2017 года законом 401-ФЗ от 30.11.2016 внесена поправка в определение сомнительных долгов.
	// Если есть сомнительные долги, то нужно их уменьшить на суммы встречной задолженности перед контрагентом.
	Если ОтчетнаяДата > '2017-01-01' И РасчетРезерва.Итог("Просрочка") > 0 Тогда
		ДанныеВстречнойЗадолженности = ДанныеВстречнойЗадолженности(ОтчетнаяДата, МенеджерВременныхТаблиц);
		РаспределитьВстречнуюЗадолженностьНаСомнительныеДолгиКонтрагентов(РасчетРезерва, ДанныеВстречнойЗадолженности);
	КонецЕсли;
	
	Для каждого Запись Из РасчетРезерва Цикл
		
		// КоэффициентРезервирования - это доля от суммы задолженности, на которую формируется резерв.
		// Коэффициент зависит от срока просрочки - чем более просроченная задолженность, тем больше резерв.
		// Если долг пока еще не вызывает сомнения, то и резерв не формируется (K = 0)
		Если Запись.Просрочка > 90 Тогда
			Запись.КоэффициентРезервирования = 1;
		ИначеЕсли Запись.Просрочка >= 45 Тогда
			Запись.КоэффициентРезервирования = 0.5;
		Иначе
			Запись.КоэффициентРезервирования = 0;	
		КонецЕсли;
		
		Запись.Резерв   = Макс(Запись.Задолженность - Запись.ВстречнаяЗадолженность, 0) * Запись.КоэффициентРезервирования;
		Запись.РезервНУ = Макс(Запись.ЗадолженностьНУ - Запись.ВстречнаяЗадолженностьНУ, 0) * Запись.КоэффициентРезервирования;
			
	КонецЦикла;
	
	Возврат РасчетРезерва;
	
КонецФункции

Процедура РаспределитьВстречнуюЗадолженностьНаСомнительныеДолгиКонтрагентов(РасчетРезерва, ДанныеВстречнойЗадолженности)
	
	ТаблицаСомнительныхДолговКонтрагента = РасчетРезерва.СкопироватьКолонки(
		"ДатаПризнанияЗадолженности,
		|Задолженность,
		|ЗадолженностьНУ");
	ТаблицаСомнительныхДолговКонтрагента.Колонки.Добавить("СтрокаРасчета");
	
	РасчетРезерва.Индексы.Добавить("Организация, Контрагент");
	
	Отбор = Новый Структура("Организация, Контрагент");
	Пока ДанныеВстречнойЗадолженности.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, ДанныеВстречнойЗадолженности); 
		ЗаполнитьТаблицуСомнительныхДолговКонтрагента(РасчетРезерва, ТаблицаСомнительныхДолговКонтрагента, Отбор);
		
		// Распределение встречной задолженности в БУ
		РаспределяемаяСумма = ДанныеВстречнойЗадолженности.Задолженность;
		Если ТаблицаСомнительныхДолговКонтрагента.Итог("Задолженность") > РаспределяемаяСумма Тогда
			
			Для каждого СомнительныйДолг Из ТаблицаСомнительныхДолговКонтрагента Цикл
			
				Если РаспределяемаяСумма = 0 Тогда
					Прервать;
				КонецЕсли; 
				
				СомнительныйДолг.СтрокаРасчета.ВстречнаяЗадолженность = Мин(СомнительныйДолг.Задолженность, РаспределяемаяСумма);
				РаспределяемаяСумма = РаспределяемаяСумма - СомнительныйДолг.СтрокаРасчета.ВстречнаяЗадолженность;
			
			КонецЦикла; 
			
		Иначе	
							
			Для каждого СомнительныйДолг Из ТаблицаСомнительныхДолговКонтрагента Цикл
				СомнительныйДолг.СтрокаРасчета.ВстречнаяЗадолженность = СомнительныйДолг.Задолженность;
			КонецЦикла; 
				
		КонецЕсли;	
		
		// Распределение встречной задолженности в НУ
		РаспределяемаяСумма = ДанныеВстречнойЗадолженности.ЗадолженностьНУ;
		Если ТаблицаСомнительныхДолговКонтрагента.Итог("ЗадолженностьНУ") > РаспределяемаяСумма Тогда
			
			Для каждого СомнительныйДолг Из ТаблицаСомнительныхДолговКонтрагента Цикл
			
				Если РаспределяемаяСумма = 0 Тогда
					Прервать;
				КонецЕсли; 
				
				СомнительныйДолг.СтрокаРасчета.ВстречнаяЗадолженностьНУ = Мин(СомнительныйДолг.ЗадолженностьНУ, РаспределяемаяСумма);
				РаспределяемаяСумма = РаспределяемаяСумма - СомнительныйДолг.СтрокаРасчета.ВстречнаяЗадолженностьНУ;
			
			КонецЦикла; 
			
		Иначе	
							
			Для каждого СомнительныйДолг Из ТаблицаСомнительныхДолговКонтрагента Цикл
				СомнительныйДолг.СтрокаРасчета.ВстречнаяЗадолженностьНУ = СомнительныйДолг.ЗадолженностьНУ;
			КонецЦикла; 
				
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьТаблицуСомнительныхДолговКонтрагента(РасчетРезерва, ТаблицаСомнительныхДолговКонтрагента, Отбор)
	
	ТаблицаСомнительныхДолговКонтрагента.Очистить();
	Долги = РасчетРезерва.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДолга Из Долги Цикл
		
		Если СтрокаДолга.Просрочка = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ТаблицаСомнительныхДолговКонтрагента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДолга);
		НоваяСтрока.СтрокаРасчета = СтрокаДолга;
		
	КонецЦикла; 
	
	ТаблицаСомнительныхДолговКонтрагента.Сортировать("ДатаПризнанияЗадолженности");
		
КонецПроцедуры

#КонецОбласти

#Область Коллекции

Функция НовыйРасчетРезерваПоСомнительнымДолгам()
	
	ТипСрок  = ОбщегоНазначения.ОписаниеТипаЧисло(5,  0, ДопустимыйЗнак.Неотрицательный); // сроки исчисляем в календарных днях
	ТипСумма = Метаданные.РегистрыБухгалтерии.Хозрасчетный.Ресурсы.Сумма.Тип;
	
	РасчетРезерва = Новый ТаблицаЗначений;
	РасчетРезерва.Колонки.Добавить("Организация",                            Новый ОписаниеТипов("СправочникСсылка.Организации"));
	РасчетРезерва.Колонки.Добавить("Контрагент",                             ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения);
	РасчетРезерва.Колонки.Добавить("ДоговорКонтрагента",                     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения);
	РасчетРезерва.Колонки.Добавить("ДокументРасчетовСКонтрагентом",          ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения);
	РасчетРезерва.Колонки.Добавить("ДатаПризнанияЗадолженности",             ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РасчетРезерва.Колонки.Добавить("СрокЗадолженности",                      ТипСрок);
	РасчетРезерва.Колонки.Добавить("СрокОплатыУстановленДоговором",          Новый ОписаниеТипов("Булево"));
	РасчетРезерва.Колонки.Добавить("СрокОплатыПоДоговору",                   ТипСрок);
	РасчетРезерва.Колонки.Добавить("ДатаОплатыПоДоговору",                   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РасчетРезерва.Колонки.Добавить("СрокОплаты",                             ТипСрок);
	РасчетРезерва.Колонки.Добавить("ДатаПризнанияЗадолженностиПросроченной", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РасчетРезерва.Колонки.Добавить("Просрочка",                              ТипСрок);
	РасчетРезерва.Колонки.Добавить("КоэффициентРезервирования",              ОбщегоНазначения.ОписаниеТипаЧисло(2, 1, ДопустимыйЗнак.Неотрицательный));
	РасчетРезерва.Колонки.Добавить("Задолженность",                          ТипСумма);
	РасчетРезерва.Колонки.Добавить("ЗадолженностьНУ",                        ТипСумма);
	РасчетРезерва.Колонки.Добавить("ВстречнаяЗадолженность",              	 ТипСумма);
	РасчетРезерва.Колонки.Добавить("ВстречнаяЗадолженностьНУ",               ТипСумма);
	РасчетРезерва.Колонки.Добавить("Резерв",                                 ТипСумма);
	РасчетРезерва.Колонки.Добавить("РезервНУ",                               ТипСумма);
	
	// следующие колонки не имеют отношения к начислению резерва, но нужны только для того, чтобы с меньшими затратами,
	// заранее получить данные, нужные для начисления резерва
	РасчетРезерва.Колонки.Добавить("ОстатокРезерваПредыдущегоПериода",       ТипСумма);
	РасчетРезерва.Колонки.Добавить("ОстатокРезерваПредыдущегоПериодаНУ",     ТипСумма);
	РасчетРезерва.Колонки.Добавить("ОстатокРезерваПредыдущегоПериодаПР",     ТипСумма);
	РасчетРезерва.Колонки.Добавить("ОстатокРезерваПредыдущегоГода",          ТипСумма);
		
	Возврат РасчетРезерва;
	
КонецФункции

Функция НовыйНачислениеРезерваПоСомнительнымДолгам(РасчетРезерва = Неопределено)
	
	ТипСумма = Метаданные.РегистрыБухгалтерии.Хозрасчетный.Ресурсы.Сумма.Тип;
	
	Если РасчетРезерва = Неопределено Тогда
		НачислениеРезерва = НовыйРасчетРезерваПоСомнительнымДолгам();
	Иначе
		НачислениеРезерва = РасчетРезерва.Скопировать();
	КонецЕсли;
	
	// см. п. 70 Приказа Минфина 34н с учетом письма Минфина России от 12.07.2004 г. № 03-03-05/3/55
	КвалификаторыНеотрицательнаяСумма = Новый КвалификаторыЧисла(
		ТипСумма.КвалификаторыЧисла.Разрядность,
		ТипСумма.КвалификаторыЧисла.РазрядностьДробнойЧасти,
		ДопустимыйЗнак.Неотрицательный);
	ТипНеотрицательнаяСумма = Новый ОписаниеТипов(ТипСумма,,,КвалификаторыНеотрицательнаяСумма);
	НачислениеРезерва.Колонки.Добавить("НеизрасходованныеСуммыРезерваПрошлогоГода", ТипНеотрицательнаяСумма);
		
	НачислениеРезерва.Колонки.Добавить("РезервНУВПределахОграничения",              ТипСумма); // см. п. 4 ст. 266 НК РФ
	
	НачислениеРезерва.Колонки.Добавить("Расходы",                                   ТипСумма);
	НачислениеРезерва.Колонки.Добавить("Доходы",                                    ТипСумма);
	НачислениеРезерва.Колонки.Добавить("РасходыНУ",                                 ТипСумма);
	НачислениеРезерва.Колонки.Добавить("ДоходыНУ",                                  ТипСумма);
	
	// Для совместимости:
	
	Для Каждого ОписаниеКолонки Из КолонкиДляСовместимости() Цикл
		Если НачислениеРезерва.Колонки.Найти(ОписаниеКолонки.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НачислениеРезерва.Колонки.Добавить(ОписаниеКолонки.Ключ, НачислениеРезерва.Колонки[ОписаниеКолонки.Значение].ТипЗначения);
	КонецЦикла;
	
	Возврат НачислениеРезерва;
	
КонецФункции

Функция КолонкиДляСовместимости()
	
	// В регистре сведений РасчетРезервовПоСомнительнымДолгам хранятся не все данные расчета,
	// поэтому некоторые имена колонок могут оказаться неоднозначными.
	// Соответствие таких неоднозначных имен должно храниться только здесь.
	
	Колонки = Новый Структура; // Ключ - имя колонки для совместимости; Значение - актуальное имя колонки
	
	Колонки.Вставить("СуммаЗадолженности",                 "Задолженность");
	Колонки.Вставить("НачисленоРанееБУ",                   "ОстатокРезерваПредыдущегоПериода");
	Колонки.Вставить("НачисленоБУ",                        "Расходы");
	Колонки.Вставить("ВосстановленоБУ",                    "Доходы");
	
	Колонки.Вставить("СуммаЗадолженностиНУ",               "ЗадолженностьНУ");
	Колонки.Вставить("НачисленоРанееНУ",                   "ОстатокРезерваПредыдущегоПериодаНУ");
	Колонки.Вставить("НачисленоНУ",                        "РасходыНУ");
	Колонки.Вставить("ВосстановленоНУ",                    "ДоходыНУ");
	
	Колонки.Вставить("ПрисоединеноБУ",                     "НеизрасходованныеСуммыРезерваПрошлогоГода");
	Колонки.Вставить("НачисленоСНачалаГодаНУ",             "РезервНУВПределахОграничения");
	
	Колонки.Вставить("ДатаВозникновенияЗадолженности",     "ДатаПризнанияЗадолженностиПросроченной");
	Колонки.Вставить("СрокЗадолженности",                  "Просрочка");
	
	Возврат Колонки;
	
КонецФункции

#КонецОбласти
