#Область ПрограммныйИнтерфейс

// Инициализирует коллекцию, содержащую описание порядка расчета показателей отчетности - "расшифровку".
// Вывод расшифровки предполагается с помощью общей формы РасшифровкаПоказателейРегламентированныхОтчетов
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. содержимое функции
//
Функция НовыйРасшифровка() Экспорт
	
	Расшифровка = Новый ТаблицаЗначений;
	Расшифровка.Колонки.Добавить("ИмяПоказателя"); // Как правило - номер ячейки БРО, включая префикс "П"
	Расшифровка.Колонки.Добавить("ИмяРаздела");
	Расшифровка.Колонки.Добавить("НаименованиеПоказателя");
	Расшифровка.Колонки.Добавить("ЗнакОперации");
	Расшифровка.Колонки.Добавить("НаименованиеСлагаемого");
	Расшифровка.Колонки.Добавить("Сумма");
	Расшифровка.Колонки.Добавить("ДополнительныеПараметры");
	
	Возврат Расшифровка;
	
КонецФункции

// Инициализирует коллекцию, содержащую детальные записи расчета показателя.
// Вывод расшифровки предполагается с помощью общей формы РасшифровкаПоказателейРегламентированныхОтчетов
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. содержимое функции
//
Функция НовыйДетальныеЗаписиРасчета() Экспорт
	
	ДетальныеЗаписи = Новый ТаблицаЗначений;
	ДетальныеЗаписи.Колонки.Добавить("Организация");
	ДетальныеЗаписи.Колонки.Добавить("Аналитика");
	ДетальныеЗаписи.Колонки.Добавить("Сумма");
	ДетальныеЗаписи.Колонки.Добавить("ИмяПоказателя");
	ДетальныеЗаписи.Колонки.Добавить("Ссылка"); // для расшифровки
	
	Возврат ДетальныеЗаписи;
	
КонецФункции

// Добавляет описание строки расшифровки в таблицу расшифровок.
// В случае, если таблица расшифровок не инициализирована, выполняется ее инициализация.
//
Процедура ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТаблицаРасшифровок = Неопределено Тогда
		ТаблицаРасшифровок = НовыйРасшифровка();
	КонецЕсли;
	
	НоваяСтрокаРасшифровки = ТаблицаРасшифровок.Добавить();
	НоваяСтрокаРасшифровки.ИмяПоказателя           = ИмяПоказателя;
	НоваяСтрокаРасшифровки.НаименованиеПоказателя  = НаименованиеПоказателя;
	НоваяСтрокаРасшифровки.ЗнакОперации            = ЗнакОперации;
	НоваяСтрокаРасшифровки.НаименованиеСлагаемого  = НаименованиеСлагаемого;
	НоваяСтрокаРасшифровки.Сумма                   = Сумма;
	НоваяСтрокаРасшифровки.ИмяРаздела              = ИмяРаздела;
	НоваяСтрокаРасшифровки.ДополнительныеПараметры = ДополнительныеПараметры;
	
КонецПроцедуры

// Обеспечивает наличие заполненной колонки Организация.
// В некоторых случаях предполагается, что в расшифровках нет колонки Организация,
// а в других - что она есть и заполнена.
// При инициализации расшифровки в ходе вызова ДобавитьСтрокуРасшифровки колонка Организация отсутствует.
// Если важно ее наличие, следует обеспечить ее наличие и заполнение после заполнения расшифровки.
//
// Параметры:
//  ТаблицаРасшифровок	 - ТаблицаЗначений - см. НовыйРасшифровка()
//  Организация			 - СправочникСсылка.Организации - организация для заполнения
//
Процедура ЗаполнитьКолонкуОрганизация(ТаблицаРасшифровок, Организация) Экспорт
	
	Если ТаблицаРасшифровок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаРасшифровок.Колонки.Найти("Организация") = Неопределено Тогда
		ТаблицаРасшифровок.Колонки.Добавить("Организация");
		ТаблицаРасшифровок.ЗаполнитьЗначения(Организация, "Организация");
	Иначе
		Для Каждого Запись Из ТаблицаРасшифровок Цикл
			Если ЗначениеЗаполнено(Запись.Организация) Тогда
				Продолжить;
			КонецЕсли;
			Запись.Организация = Организация;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область СтандартныеОтчеты

// Готовит настройки отчета в формате, понятном форме РасшифровкаПоказателейРегламентированныхОтчетов
//
// Параметры:
//  ВидОтчета		 - Строка - имя отчета, используемого для расшифровки. 
//                     Поддерживаются:
//                     * ОборотноСальдоваяВедомостьПоСчету
//                     * АнализСчета
//                     * ОтчетПоПроводкам
//                     * ОборотыМеждуСубконто
//                     * ОборотыСчета
//  Организация		 - СправочникСсылка.Организации - организация, по которой формируется отчет
//  НачалоПериода	 - Дата	 - начало периода, за который формируется отчет
//  КонецПериода	 - Дата	 - конец периода, за который формируется отчет
//  Счет			 - ПланСчетовСсылка.Хозрасчетный - счет, по которому формируется отчет
//  ОписаниеСумм	 - Структура - см. КоллекцииСумм.НовыйОписаниеКоллекцииСумм, набор сумм которые должны быть выведены в отчете
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйНастройкиОтчетаПоРегиструБухгалтерии(ВидОтчета, Организация, НачалоПериода, КонецПериода, Счет, ОписаниеСумм) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("Организация", Организация);
	Настройки.Вставить("Отчет", Новый Структура);
	Настройки.Отчет.Вставить("ИмяОтчета", "Отчет." + ВидОтчета + ".Форма.ФормаОтчета");
	
	Настройки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	Настройки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки",        Истина);
	Настройки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки",          2); // Из параметров формы
	Настройки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Настройки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", Новый Массив);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);
	
	Если Справочники.Организации.ЕстьОбособленныеПодразделения(Организация) Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Истина);
	КонецЕсли;
	
	ИменаСумм = Новый Соответствие;
	ИменаСумм.Вставить("Сумма",   "ПоказательБУ");
	ИменаСумм.Вставить("СуммаНУ", "ПоказательНУ");
	ИменаСумм.Вставить("СуммаСверкаНУ", "ПоказательСверкаНУ");
	ИменаСумм.Вставить("СуммаПР", "ПоказательПР");
	ИменаСумм.Вставить("СуммаВР", "ПоказательВР");
	
	Для Каждого КлючИЗначение Из ИменаСумм Цикл
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(КлючИЗначение.Значение, Ложь);
	КонецЦикла;
	
	Для Каждого ИмяСуммы Из КоллекцииСумм.ИменаСвойств(ОписаниеСумм) Цикл
		ИмяСвойства = ИменаСумм[ИмяСуммы];
		Если ИмяСвойства <> Неопределено Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(ИмяСвойства, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКонтроль", Ложь);
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ВидОтчета = "ОборотыМеждуСубконто" Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокВидовСубконто",    Новый СписокЗначений);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокВидовКорСубконто", Новый СписокЗначений);
	ИначеЕсли ВидОтчета = "АнализСчета" Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетамКорСчетов",   Истина);
	ИначеЕсли ВидОтчета = "ОборотыСчета" Тогда
		// См. также НастроитьОборотыСчета
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СальдоНаНачалоДт",     Ложь);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СальдоНаНачалоКт",     Ложь);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОборотыДт",            Ложь);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОборотыКт",            Ложь);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОборотыСоСчетамиДт",   Истина);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОборотыСоСчетамиКт",   Истина);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СальдоНаКонецДт",      Ложь);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СальдоНаКонецКт",      Ложь);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетамКорСчетов", Ложь);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам",          Истина);
	КонецЕсли;
	
	Возврат Настройки;

КонецФункции

// Готовит настройки отчета "Расходы по статьям затрат"
//
// Параметры:
//  Организация		 - СправочникСсылка.Организации - организация, по которой формируется отчет
//  НачалоПериода	 - Дата	 - начало периода, за который формируется отчет
//  КонецПериода	 - Дата	 - конец периода, за который формируется отчет
//  Счет			 - ПланСчетовСсылка.Хозрасчетный - счет, по которому формируется отчет
//
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйНастройкиОтчетаРасходыПоСтатьямЗатрат(Организация, НачалоПериода, КонецПериода, Счет) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("Организация", Организация);
	Настройки.Вставить("Отчет", Новый Структура);
	Настройки.Отчет.Вставить("ИмяОтчета", "Отчет.РасходыПоСтатьямЗатрат.Форма.ФормаОтчета");
	
	Настройки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	
	Настройки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	Настройки.Отчет.ПараметрыФормы.Вставить("Счет", Счет);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Настройки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	Если Справочники.Организации.ЕстьОбособленныеПодразделения(Организация) Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Истина);
	КонецЕсли;
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Возврат Настройки;

КонецФункции

// Добавляет отбор в настройки стандартного отчета, расшифровывающего регламентированный отчет.
//
// Параметры:
//  Настройки	 - Структура - см. НовыйНастройкиОтчетаПоРегиструБухгалтерии, заполняемые настройки отчета
//  ИмяПоля		 - Строка - имя поля группировки в терминах отчета. Может быть определено с помощью ОписаниеСубконтоСчета
//	Значение     - Произвольный - Значение отбора
//	ВидСравнения - ВидСравненияКомпоновкиДанных - Вид сравнений компоновки данных (по умолчанию: Равно)
// 
// Возвращаемое значение:
//	ЭлементОтбораКомпоновкиДанных - Добавленный элемент отбора
//
Функция ДобавитьОтборВНастройкиОтчета(Настройки, ИмяПоля, Значение, ВидСравнения = Неопределено) Экспорт
	
	Отбор = ОтборНастроекОтчета(Настройки);
	
	ЭлементОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
		Отбор,
		ИмяПоля,
		Значение,
		ВидСравнения,
		Истина,
		Истина);
		
	Возврат ЭлементОтбора;
	
КонецФункции

// Предоставляет доступ к настройке отбора настраиваемого отчета.
//
// Параметры:
//  Настройки	 - Структура - см. НовыйНастройкиОтчетаПоРегиструБухгалтерии, выполняемые настройки отчета
// 
// Возвращаемое значение:
//  ОтборКомпоновкиДанных - настройки отбора
//
Функция ОтборНастроекОтчета(Настройки) Экспорт
	
	Возврат Настройки.Отчет.ПользовательскиеНастройки.Элементы.Найти("Отбор");
	
КонецФункции

// Добавляет группировку в настройки стандартного отчета - в том виде, который принят в стандартных отчетах.
// А именно:
//  - настройка группировки представлена в виде массива структур
//  - элемент массива соответствует строке таблицы группировок в отчете
//  - структура содержит ключи и значения:
//    -- Использование, 	Булево (здесь Истина)
//    -- Поле, 				Строка (имя поля группировки в терминах отчета)
//    -- Представление, 	Строка (представление группировки (поля))
//    -- ТипГруппировки, 	Число  (0 - Без групп, 1 - С группами, 2 - Только группы)
//
// Параметры:
//  Настройки		 - Структура - см. НовыйНастройкиОтчетаПоРегиструБухгалтерии, заполняемые настройки отчета
//  ИмяПоля			 - Строка - имя поля группировки в терминах отчета. Может быть определено с помощью ОписаниеСубконтоСчета
//  Представление	 - Строка - представление поля группировки. Может быть определено с помощью ОписаниеСубконтоСчета
//  ТипГруппировки	 - Число - 0: Без групп, 1: С группами, 2: Только группы
//
Процедура ДобавитьГруппировкуВНастройкиОтчета(Настройки, ИмяПоля, Представление, ТипГруппировки = 0) Экспорт
	
	НастройкаГруппировки = Неопределено;
	Если Настройки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Группировка", НастройкаГруппировки) Тогда
		
		СтрокаНастройкиГруппировки = Новый Структура;
		СтрокаНастройкиГруппировки.Вставить("Использование",  Истина);
		СтрокаНастройкиГруппировки.Вставить("Поле",           ИмяПоля);
		СтрокаНастройкиГруппировки.Вставить("Представление",  Представление);
		СтрокаНастройкиГруппировки.Вставить("ТипГруппировки", ТипГруппировки);
		
		НастройкаГруппировки.Добавить(СтрокаНастройкиГруппировки);
		
	КонецЕсли;
	
	
КонецПроцедуры

// Определяет описание поля субконто в виде структуры для использования в методах настройки отчетов.
//
// Параметры:
//  ПолеВиртуальнойТаблицы	 - Строка - имя поля виртуальной таблицы, лежащей в основе отчета
//  Счет					 - ПланСчетовСсылка.Хозрасчетный - счет, по которому формируется отчет
//  ВидИлиНомерСубконто		 - Число - порядковый номер субконто на счете
//                           - ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - субконто счета, по которому формируется отчет
// 
// Возвращаемое значение:
//  Структура - описание субконто
//    * "Имя" - Строка - Имя поля отчета, соответствующее запрошенному субконто
//    * "Представление" -  Строка - Пользовательское представление вида субконто
//
Функция ОписаниеСубконтоСчета(ПолеВиртуальнойТаблицы, Счет, ВидИлиНомерСубконто) Экспорт
	
	// Определим номер субконто на счете
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет",        Счет);
	Если ТипЗнч(ВидИлиНомерСубконто) = Тип("Число") Тогда
		Запрос.УстановитьПараметр("НомерСубконто", ВидИлиНомерСубконто);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыСубконто.НомерСтроки КАК НомерСтроки,
		|	ВидыСубконто.ВидСубконто.Представление
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
		|ГДЕ
		|	ВидыСубконто.НомерСтроки = &НомерСубконто
		|	И ВидыСубконто.Ссылка = &Счет";
	Иначе
		Запрос.УстановитьПараметр("ВидСубконто", ВидИлиНомерСубконто);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыСубконто.НомерСтроки КАК НомерСтроки,
		|	ВидыСубконто.ВидСубконто.Представление
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
		|ГДЕ
		|	ВидыСубконто.ВидСубконто = &ВидСубконто
		|	И ВидыСубконто.Ссылка = &Счет";
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеСубконто = Новый Структура;
	ОписаниеСубконто.Вставить("Имя",           ПолеВиртуальнойТаблицы + Выборка.НомерСтроки);
	ОписаниеСубконто.Вставить("Номер",         Выборка.НомерСтроки);
	ОписаниеСубконто.Вставить("Представление", Выборка.Представление);
	
	Возврат ОписаниеСубконто;
	
КонецФункции

// Настраивает состав показателей отчета "ОборотыСчета"
//
// Параметры:
//  Настройки		 - Структура - см. НовыйНастройкиОтчетаПоРегиструБухгалтерии, заполняемые настройки отчета
//  ДебетКредит		 - Строка - "Дт" - включить данные по дебету счета, "Кт" - по кредиту, "" (пустая строка) - по обеим сторонам
//  СальдоНаНачало	 - Булево - выводить в отчете начальное сальдо
//  СальдоНаКонец	 - Булево - выводить в отчете конечное сальдо
//  Обороты			 - Булево - выводить в отчете обороты - сводно
//  ОборотыСоСчетами - Булево - выводить в отчете обороты - детально по счетам
//
Процедура НастроитьОборотыСчета(Настройки, ДебетКредит = "", СальдоНаНачало = Ложь, СальдоНаКонец = Ложь, Обороты = Ложь, ОборотыСоСчетами = Истина) Экспорт
	
	СвойстваОтчета = Настройки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	ЗначенияСвойств = Новый Структура;
	ЗначенияСвойств.Вставить("СальдоНаНачало",   СальдоНаНачало);
	ЗначенияСвойств.Вставить("Обороты",          Обороты);
	ЗначенияСвойств.Вставить("ОборотыСоСчетами", ОборотыСоСчетами);
	ЗначенияСвойств.Вставить("СальдоНаКонец",    СальдоНаКонец);
	
	ВыводитьИзменениеСальдо = (СальдоНаНачало И СальдоНаКонец);
	
	СтороныСчета = Новый Структура;
	СтороныСчета.Вставить("Дт", Истина);
	СтороныСчета.Вставить("Кт", Истина);
	Если ДебетКредит = "Дт" Тогда
		СтороныСчета.Кт = Ложь;
	ИначеЕсли ДебетКредит = "Кт" Тогда
		СтороныСчета.Дт = Ложь;
	КонецЕсли;
	
	Для Каждого ОписаниеСвойства Из ЗначенияСвойств Цикл
		
		Для Каждого ОписаниеСтороныСчета Из СтороныСчета Цикл
			
			ПолноеИмяСвойства = ОписаниеСвойства.Ключ + ОписаниеСтороныСчета.Ключ;
			
			Если ВыводитьИзменениеСальдо И ОписаниеСвойства.Ключ <> "СальдоНаНачало" И ОписаниеСвойства.Ключ <> "СальдоНаКонец" Тогда
				ВыводитьСторонуСчета = Истина;
			Иначе
				ВыводитьСторонуСчета = ОписаниеСтороныСчета.Значение;
			КонецЕсли;
			
			СвойстваОтчета[ПолноеИмяСвойства] = ОписаниеСвойства.Значение И ВыводитьСторонуСчета;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
