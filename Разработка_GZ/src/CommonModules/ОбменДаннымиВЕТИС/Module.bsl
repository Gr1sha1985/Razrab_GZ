////////////////////////////////////////////////////////////////////////////////
// Механизмы обмена данными с ВЕТИС.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ВыгрузкаДанных

Процедура ЗаполнитьОбъект_Delivery(Шапка, СтрокаТовары, ВспомогательныеДанные, ДополнительныеПараметры, DeliveryXDTO, СообщениеXML) Экспорт
	
	// Дата оформления входящей партии.
	ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(DeliveryXDTO, "deliveryDate", Шапка.Дата, ВспомогательныеДанные.ХранилищеВременныхДат);
	
	// Сведения об отправителе (владельце).
	СведенияОбОтправителе = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "consignor");
	ЗаполнитьОбъект_BusinessMember(Шапка, ДополнительныеПараметры.Грузоотправитель, СведенияОбОтправителе, СообщениеXML);
	
	// Сведения о получателе продукции.
	СведенияОПолучателе = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "consignee");
	ЗаполнитьОбъект_BusinessMember(Шапка, ДополнительныеПараметры.Грузополучатель, СведенияОПолучателе, СообщениеXML);
	
	// Сведения о партии продукции или группе животных.
	Если ЗначениеЗаполнено(СтрокаТовары[ДополнительныеПараметры.ПолеКоличество]) Тогда
		
		СведенияОПартииПродукции = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(DeliveryXDTO, "consignment");
		
		ДополнительныеДанные = Новый Структура;
		ДополнительныеДанные.Вставить("СтраныМира", ВспомогательныеДанные.СтраныМира);
		ДополнительныеДанные.Вставить("ШтрихкодыУпаковок", ВспомогательныеДанные.ШтрихкодыУпаковок);
		
		Если ВспомогательныеДанные.Свойство("Производители") Тогда
			СтруктураПоиска = Новый Структура("ВСД", СтрокаТовары.ВСД);
			ПроизводителиНайденныеСтроки = ВспомогательныеДанные.Производители.НайтиСтроки(СтруктураПоиска);
			ДополнительныеДанные.Вставить("Производители", ПроизводителиНайденныеСтроки);
		КонецЕсли;
		
		Если ВспомогательныеДанные.Свойство("ПроизводственныеПартии") Тогда
			СтруктураПоиска = Новый Структура("ВСД", СтрокаТовары.ВСД);
			ПроизводственныеПартииНайденныеСтроки = ВспомогательныеДанные.ПроизводственныеПартии.НайтиСтроки(СтруктураПоиска);
			ДополнительныеДанные.Вставить("ПроизводственныеПартии", ПроизводственныеПартииНайденныеСтроки);
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТовары", СтрокаТовары.ИдентификаторСтроки);
		УпаковкиНайденныеСтроки = ВспомогательныеДанные.Упаковки.НайтиСтроки(СтруктураПоиска);
		ДополнительныеДанные.Вставить("Упаковки", УпаковкиНайденныеСтроки);
		
		ЗаполнитьОбъект_Batch(СтрокаТовары, ДополнительныеПараметры.ПолеКоличество, ДополнительныеДанные, СведенияОПартииПродукции, СообщениеXML);
		
		Если ЗначениеЗаполнено(СтрокаТовары.ЗаписьСкладскогоЖурнала_Идентификатор) Тогда
			ЗаписьСкладскогоЖурнала = СоздатьОбъектXDTOПоИмениТипа(СведенияОПартииПродукции, "sourceStockEntry");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ЗаписьСкладскогоЖурнала,
				"guid",
				СтрокаТовары.ЗаписьСкладскогоЖурнала_Идентификатор,
				СообщениеXML);
		КонецЕсли;
		
		DeliveryXDTO.consignment.Добавить(СведенияОПартииПродукции);
	
	КонецЕсли; 
	
	// Фирма-посредник (перевозчик продукции).
	Перевозчик = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "broker");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		Перевозчик,
		"guid",
		Шапка.ПеревозчикХозяйствующийСубъект_Идентификатор,
		СообщениеXML);
	
	// Информация о транспорте.
	Если ЗначениеЗаполнено(Шапка.ТипТранспорта) Тогда
		ИнформацияОТранспорте = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "transportInfo");
		ЗаполнитьОбъект_TransportInfo(Шапка, ВспомогательныеДанные, ИнформацияОТранспорте, СообщениеXML);
	КонецЕсли; 
	
	// Способ хранения продукции при перевозке.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		DeliveryXDTO,
		"transportStorageType",
		ПродукцияВЕТИСВызовСервера.СпособХраненияПриТранспортировке(Шапка.СпособХранения),
		СообщениеXML);
	
	// Сведения о маршруте следования (пунктах перегрузки).
	Если ДополнительныеПараметры.Маршрут.Количество() <> 0 Тогда
		МаршрутПеревозки = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "shipmentRoute");
		ЗаполнитьОбъект_ShipmentRoute(ДополнительныеПараметры.Маршрут, ВспомогательныеДанные, МаршрутПеревозки, СообщениеXML);
	КонецЕсли; 
	
	// Сопроводительные документы
	СопроводительныеДокументы = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "accompanyingForms");
	
	Если Шапка.ТТНУказан Тогда
		ДопСведенияТТН = СоздатьОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "waybill");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "issueSeries", Шапка.СерияТТН, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "issueNumber", Шапка.НомерТТН, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "issueDate",   Шапка.ДатаТТН, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "type",        ИнтеграцияВЕТИСПовтИсп.КодДокумента(Шапка.ТипТТН), СообщениеXML);
	КонецЕсли; 
	
	Если ТипЗнч(СтрокаТовары.ВСД_Идентификатор) = Тип("Массив") Тогда
		
		Для каждого ВСД_Идентификатор Из СтрокаТовары.ВСД_Идентификатор Цикл
			
			ВСД = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "vetCertificate");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ВСД, "uuid", ВСД_Идентификатор, СообщениеXML);
			СопроводительныеДокументы.vetCertificate.Добавить(ВСД);
			
		КонецЦикла;
		
	Иначе
		
		ВСД = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "vetCertificate");
		
		Если ЗначениеЗаполнено(СтрокаТовары.ВСД_Идентификатор) Тогда
			// Электронный ВСД
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ВСД, "uuid", СтрокаТовары.ВСД_Идентификатор, СообщениеXML);
		Иначе
			// Бумажный ВСД - нужно передать его данные
			ЗаполнитьОбъект_VetDocument(СтрокаТовары, Шапка, ВспомогательныеДанные, ДополнительныеПараметры, ВСД, СообщениеXML);
		КонецЕсли;
		
		СопроводительныеДокументы.vetCertificate.Добавить(ВСД);
		
	КонецЕсли;
	
	// Связанные документы
	Если ВспомогательныеДанные.Свойство("СвязанныеДокументы") Тогда
		
		Для каждого ДанныеСвязанногоДокумента Из ВспомогательныеДанные.СвязанныеДокументы Цикл
			
			СвязанныйДокумент = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "relatedDocument");
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "issueSeries", ДанныеСвязанногоДокумента.Серия, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "issueNumber", ДанныеСвязанногоДокумента.Номер, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "issueDate", ДанныеСвязанногоДокумента.Дата, СообщениеXML);
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				СвязанныйДокумент, 
				"type", 
				ИнтеграцияВЕТИСПовтИсп.КодДокумента(ДанныеСвязанногоДокумента.ТипДокумента), 
				СообщениеXML);
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "relationshipType", 6, СообщениеXML);
			
			СопроводительныеДокументы.relatedDocument.Добавить(СвязанныйДокумент);
		
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьОбъект_DeliveryПакетом(Шапка, ДанныеОТоваре, ВспомогательныеДанные, ДополнительныеПараметры, DeliveryXDTO, СообщениеXML) Экспорт
	
	// Дата оформления входящей партии.
	ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(DeliveryXDTO, "deliveryDate", Шапка.Дата, ВспомогательныеДанные.ХранилищеВременныхДат);
	
	// Сведения об отправителе (владельце).
	СведенияОбОтправителе = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "consignor");
	ЗаполнитьОбъект_BusinessMember(Шапка, ДополнительныеПараметры.Грузоотправитель, СведенияОбОтправителе, СообщениеXML);
	
	// Сведения о получателе продукции.
	СведенияОПолучателе = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "consignee");
	ЗаполнитьОбъект_BusinessMember(Шапка, ДополнительныеПараметры.Грузополучатель, СведенияОПолучателе, СообщениеXML);
	
	// Сведения о партии продукции или группе животных.
	Для каждого СтрокаТовары Из ДанныеОТоваре Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары[ДополнительныеПараметры.ПолеКоличество]) Тогда
			
			СведенияОПартииПродукции = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(DeliveryXDTO, "consignment");
			
			ДопДанные = Новый Структура;
			ДопДанные.Вставить("СтраныМира", ВспомогательныеДанные.СтраныМира);
			ДопДанные.Вставить("ШтрихкодыУпаковок", ВспомогательныеДанные.ШтрихкодыУпаковок);
			
			Если ВспомогательныеДанные.Свойство("Производители") Тогда
				СтруктураПоиска = Новый Структура("ВСД", СтрокаТовары.ВСД);
				ПроизводителиНайденныеСтроки = ВспомогательныеДанные.Производители.НайтиСтроки(СтруктураПоиска);
				ДопДанные.Вставить("Производители", ПроизводителиНайденныеСтроки);
			КонецЕсли; 
			
			Если ВспомогательныеДанные.Свойство("ПроизводственныеПартии") Тогда
				СтруктураПоиска = Новый Структура("ВСД", СтрокаТовары.ВСД);
				ПроизводственныеПартииНайденныеСтроки = ВспомогательныеДанные.ПроизводственныеПартии.НайтиСтроки(СтруктураПоиска);
				ДопДанные.Вставить("ПроизводственныеПартии", ПроизводственныеПартииНайденныеСтроки);
			КонецЕсли; 
			
			СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТовары", СтрокаТовары.ИдентификаторСтроки);
			УпаковкиНайденныеСтроки = ВспомогательныеДанные.Упаковки.НайтиСтроки(СтруктураПоиска);
			ДопДанные.Вставить("Упаковки", УпаковкиНайденныеСтроки);
			
			Если ВспомогательныеДанные.Свойство("СведенияОНаименованииОпциональны") Тогда
				ДопДанные.Вставить("СведенияОНаименованииОпциональны");
			КонецЕсли;
			
			ЗаполнитьОбъект_Batch(СтрокаТовары, ДополнительныеПараметры.ПолеКоличество, ДопДанные, СведенияОПартииПродукции, СообщениеXML);
			
			Если ЗначениеЗаполнено(СтрокаТовары.ЗаписьСкладскогоЖурнала_Идентификатор) Тогда
				ЗаписьСкладскогоЖурнала = СоздатьОбъектXDTOПоИмениТипа(СведенияОПартииПродукции, "sourceStockEntry");
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ЗаписьСкладскогоЖурнала,
				"guid",
				СтрокаТовары.ЗаписьСкладскогоЖурнала_Идентификатор,
				СообщениеXML);
			КонецЕсли;
			
			СведенияОПартииПродукции.id = "id"+Формат(СтрокаТовары.НомерСтроки, "ЧГ=0");
			
			DeliveryXDTO.consignment.Добавить(СведенияОПартииПродукции);
			
			// Заполнение сведений о записи журнала.
			ДобавитьЗаписьСкладскогоЖурналаВСообщениеXML(СтрокаТовары, СообщениеXML);
			
		КонецЕсли;
	КонецЦикла;
	
	// Фирма-посредник (перевозчик продукции).
	Если ЗначениеЗаполнено(Шапка.ПеревозчикХозяйствующийСубъект_Идентификатор) Тогда
		Перевозчик = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "broker");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
			Перевозчик,
			"guid",
			Шапка.ПеревозчикХозяйствующийСубъект_Идентификатор,
			СообщениеXML);
	КонецЕсли;
	
	// Информация о транспорте.
	Если ЗначениеЗаполнено(Шапка.ТипТранспорта) Тогда
		ИнформацияОТранспорте = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "transportInfo");
		ЗаполнитьОбъект_TransportInfo(Шапка, ВспомогательныеДанные, ИнформацияОТранспорте, СообщениеXML);
	КонецЕсли;
	
	// Способ хранения продукции при перевозке.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		DeliveryXDTO,
		"transportStorageType",
		ПродукцияВЕТИСВызовСервера.СпособХраненияПриТранспортировке(Шапка.СпособХранения),
		СообщениеXML);
	
	// Сведения о маршруте следования (пунктах перегрузки).
	Если ДополнительныеПараметры.Маршрут.Количество() <> 0 Тогда
		МаршрутПеревозки = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "shipmentRoute");
		ЗаполнитьОбъект_ShipmentRoute(ДополнительныеПараметры.Маршрут, ВспомогательныеДанные, МаршрутПеревозки, СообщениеXML);
	КонецЕсли;
	
	// Сопроводительные документы
		
	СопроводительныеДокументы = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "accompanyingForms");
	
	Если Шапка.ТТНУказан Тогда
		ДопСведенияТТН = СоздатьОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "waybill");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "issueSeries", Шапка.СерияТТН, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "issueNumber", Шапка.НомерТТН, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "issueDate",   Шапка.ДатаТТН, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "type",        ИнтеграцияВЕТИСПовтИсп.КодДокумента(Шапка.ТипТТН), СообщениеXML);
	КонецЕсли;
	
	Для каждого СтрокаТовары Из ДанныеОТоваре Цикл
		
		ВСД = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "vetCertificate");
		
		Если ЗначениеЗаполнено(СтрокаТовары.ВСД_Идентификатор) Тогда
			// Электронный ВСД
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ВСД, "uuid", СтрокаТовары.ВСД_Идентификатор, СообщениеXML);
		Иначе
			// Бумажный ВСД - нужно передать его данные
			ЗаполнитьОбъект_VetDocument(СтрокаТовары, Шапка, ВспомогательныеДанные, ДополнительныеПараметры, ВСД, СообщениеXML);
		КонецЕсли;
		
		ВСД.for = "id"+Формат(СтрокаТовары.НомерСтроки, "ЧГ=0");
		
		СопроводительныеДокументы.vetCertificate.Добавить(ВСД);
		
	КонецЦикла;
	
	// Связанные документы
	Если ВспомогательныеДанные.Свойство("СвязанныеДокументы") Тогда
		
		Для каждого ДанныеСвязанногоДокумента Из ВспомогательныеДанные.СвязанныеДокументы Цикл
			
			СвязанныйДокумент = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "relatedDocument");
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "issueSeries", ДанныеСвязанногоДокумента.Серия, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "issueNumber", ДанныеСвязанногоДокумента.Номер, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "issueDate", ДанныеСвязанногоДокумента.Дата, СообщениеXML);
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				СвязанныйДокумент, 
				"type", 
				ИнтеграцияВЕТИСПовтИсп.КодДокумента(ДанныеСвязанногоДокумента.ТипДокумента), 
				СообщениеXML);
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "relationshipType", 6, СообщениеXML);
			
			СопроводительныеДокументы.relatedDocument.Добавить(СвязанныйДокумент);
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбъект_BusinessMember(Данные, ПрефиксРеквизита, ОбъектXDTO, СообщениеXML) Экспорт

	// Информация о хозяйствующем субъекте-отправителе транспортной партии.
	ХозяйствующийСубъект = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "businessEntity");
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		ХозяйствующийСубъект,
		"guid",
		Данные[ПрефиксРеквизита + "ХозяйствующийСубъект_Идентификатор"],
		СообщениеXML); 
	
	// Информация о предприятии-отправителе транспортной партии.
	СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "enterprise");
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		ОбъектXDTO.enterprise,
		"guid",
		Данные[ПрефиксРеквизита + "Предприятие_Идентификатор"],
		СообщениеXML);
		
КонецПроцедуры

Процедура ЗаполнитьОбъект_TransportInfo(Данные, ВспомогательныеДанные, ОбъектXDTO, СообщениеXML)

	// Тип транспортного средства.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		ОбъектXDTO,
		"transportType",
		ПродукцияВЕТИСВызовСервера.ТипТранспорта(Данные.ТипТранспорта),
		СообщениеXML);
	
	// Номера транспортного средства.
	Если ЗначениеЗаполнено(Данные.НомерТранспортногоСредства) Тогда
		
		НомерТранспорта = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "transportNumber");
		Если Данные.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.Автомобиль Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "vehicleNumber", Данные.НомерТранспортногоСредства, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "trailerNumber", Данные.НомерАвтомобильногоПрицепа, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "containerNumber", Данные.НомерАвтомобильногоКонтейнера, СообщениеXML);
			
		ИначеЕсли Данные.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.ЖелезнодорожныйВагон Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "wagonNumber", Данные.НомерТранспортногоСредства, СообщениеXML);
			
		ИначеЕсли Данные.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.Авиарейс Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "flightNumber", Данные.НомерТранспортногоСредства, СообщениеXML);
			
		ИначеЕсли Данные.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.МорскойКонтейнер Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "shipName", Данные.НомерТранспортногоСредства, СообщениеXML);
			
		ИначеЕсли Данные.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.МорскойТрюм Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "shipName", Данные.НомерТранспортногоСредства, СообщениеXML);
			
		ИначеЕсли Данные.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.Речной Тогда
		
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "shipName", Данные.НомерТранспортногоСредства, СообщениеXML);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбъект_ShipmentRoute(Маршрут, ВспомогательныеДанные, ОбъектXDTO, СообщениеXML) Экспорт
	
	Для каждого ДанныеСтроки Из Маршрут Цикл
		
		// Сведения о точке маршрута.
		ТочкаМаршрута = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "routePoint");
		
		// Порядковый номер точки маршрута.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ТочкаМаршрута, "sqnId", ДанныеСтроки.НомерСтроки - 1, СообщениеXML);
		
		// Сведения о пункте перегрузки.
		Если ЗначениеЗаполнено(ДанныеСтроки.Предприятие_Идентификатор) Тогда
			ПунктПерегрузки = СоздатьОбъектXDTOПоИмениТипа(ТочкаМаршрута, "enterprise");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ПунктПерегрузки, "guid", ДанныеСтроки.Предприятие_Идентификатор, СообщениеXML);
		Иначе
			АдресПунктаПерегрузки = СоздатьОбъектXDTOПоИмениТипа(ТочкаМаршрута, "location");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(АдресПунктаПерегрузки, "name", ДанныеСтроки.АдресПредставление, СообщениеXML);
			ИнтеграцияВЕТИС.УстановитьАдрес(АдресПунктаПерегрузки, ДанныеСтроки.ДанныеАдреса.Получить());
		КонецЕсли; 
		
		// Признак того, осуществляется ли в данной точке перегрузка.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ТочкаМаршрута, "transshipment", ДанныеСтроки.СПерегрузкой, СообщениеXML);
		
		// Сведения о дальнейшем транспорте.
		Если ДанныеСтроки.СПерегрузкой Тогда
			СледующееТранспортноеСредствоXDTO = СоздатьОбъектXDTOПоИмениТипа(ТочкаМаршрута, "nextTransport");
			ЗаполнитьОбъект_TransportInfo(ДанныеСтроки, ВспомогательныеДанные, СледующееТранспортноеСредствоXDTO, СообщениеXML);
		КонецЕсли;
		
		ОбъектXDTO.routePoint.Добавить(ТочкаМаршрута);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОбъект_Период(ПериодXDTO, Данные, ИмяПоля, СообщениеXML)
	
	ИмяПоляСтрокой            = ИмяПоля + "Строка";
	ИмяПоляНачалоПериода      = ИмяПоля + "НачалоПериода";
	ИмяПоляКонецПериода       = ИмяПоля + "КонецПериода";
	ИмяПоляТочностьЗаполнения = ИмяПоля + "ТочностьЗаполнения";
	
	ТочностьЗаполненияБезДаты = ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(Данные[ИмяПоляТочностьЗаполнения]);
	Если НЕ ЗначениеЗаполнено(Данные[ИмяПоляСтрокой])
		И НЕ ЗначениеЗаполнено(Данные[ИмяПоляНачалоПериода])
		И НЕ ТочностьЗаполненияБезДаты Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные[ИмяПоляСтрокой]) Тогда
		
		ПериодXDTO.informalDate = Данные[ИмяПоляСтрокой];
		
	ИначеЕсли ТочностьЗаполненияБезДаты Тогда
		
		Если Данные[ИмяПоляТочностьЗаполнения] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.Неизвестно Тогда
			ПериодXDTO.informalDate = "НЕИЗВЕСТНО";
		ИначеЕсли Данные[ИмяПоляТочностьЗаполнения] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.СрокГодностиНеОграничен Тогда
			ПериодXDTO.informalDate = "НЕ ОГРАНИЧЕН";
		КонецЕсли;
		
	Иначе
		
		firstDate = СоздатьОбъектXDTOПоИмениТипа(ПериодXDTO, "firstDate");
		firstDate.year  = Год(Данные[ИмяПоляНачалоПериода]);
		firstDate.month = Месяц(Данные[ИмяПоляНачалоПериода]);
		Если ТребуетсяУказаниеДняПериода(Данные, ИмяПоля) Тогда
			firstDate.day = День(Данные[ИмяПоляНачалоПериода]);
		КонецЕсли;
		Если ТребуетсяУказаниеЧасаПериода(Данные, ИмяПоля) Тогда
			firstDate.hour = Час(Данные[ИмяПоляНачалоПериода]);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Данные[ИмяПоляКонецПериода])
			И Данные[ИмяПоляКонецПериода] <> Данные[ИмяПоляНачалоПериода] Тогда
			
			secondDate = СоздатьОбъектXDTOПоИмениТипа(ПериодXDTO, "secondDate");
			secondDate.year  = Год(Данные[ИмяПоляКонецПериода]);
			secondDate.month = Месяц(Данные[ИмяПоляКонецПериода]);
			Если ТребуетсяУказаниеДняПериода(Данные, ИмяПоля) Тогда
				secondDate.day = День(Данные[ИмяПоляКонецПериода]);
			КонецЕсли;
			Если ТребуетсяУказаниеЧасаПериода(Данные, ИмяПоля) Тогда
				secondDate.hour = Час(Данные[ИмяПоляКонецПериода]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбъект_Batch(Данные, ПолеКоличество, ВспомогательныеДанные, ОбъектXDTO, СообщениеXML) Экспорт
	
	СтраныМира = ВспомогательныеДанные.СтраныМира;
	
	// Тип продукции. Первый уровень иерархического справочника продукции ИС Меркурий.
	КодТипаПродукции = ПродукцияВЕТИСВызовСервера.ТипПродукции(Данные.ТипПродукции);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "productType", КодТипаПродукции, СообщениеXML);
	
	// Продукция. Второй уровень иерархического справочника продукции ИС Меркурий.
	Продукция = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "product");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Продукция, "guid", Данные.ПродукцияПродукция_Идентификатор, СообщениеXML);
	
	// Вид продукции. Третий уровень иерархического справочника продукции ИС Меркурий.
	ВидПродукции = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "subProduct");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ВидПродукции, "guid", Данные.ВидПродукции_Идентификатор, СообщениеXML);
	
	// Для исходящей транспортной операции без смены GUID продукции часть с указанием продукции не заполняется
	Если Не ВспомогательныеДанные.Свойство("СведенияОНаименованииОпциональны") Или Данные.ПродукцияОтличается Тогда
		
		// Наименование продукции.
		НаименованиеПродукции = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "productItem");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НаименованиеПродукции, "guid", Данные.Продукция_Идентификатор, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НаименованиеПродукции, "name", Данные.Продукция_Наименование, СообщениеXML);
		
		Если ТипЗнч(СообщениеXML.Документ) = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС")
			И ЗначениеЗаполнено(Данные.ВСД_ПродукцияИдентификаторВерсии) 
			И Данные.Продукция = Данные.ВСД_Продукция Тогда
		
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НаименованиеПродукции, "uuid", Данные.ВСД_ПродукцияИдентификаторВерсии, СообщениеXML);
		КонецЕсли;
	
		// Произвольная продукция
		Если Не ЗначениеЗаполнено(Данные.Продукция_Идентификатор) Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НаименованиеПродукции, "code",     Данные.Продукция_Артикул, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НаименованиеПродукции, "globalID", Данные.Продукция_GTIN, СообщениеXML);
			
			Если ЗначениеЗаполнено(Данные.Продукция_ФасовкаЕдиницаИзмерения)
				Или ЗначениеЗаполнено(Данные.Продукция_ФасовкаКоличествоЕдиницВУпаковке)
				Или ЗначениеЗаполнено(Данные.Продукция_ФасовкаКоличествоУпаковок)
				Или ЗначениеЗаполнено(Данные.Продукция_ФасовкаУпаковка) Тогда
				
				packaging = СоздатьОбъектXDTOПоИмениТипа(НаименованиеПродукции, "packaging");
				
				Если ЗначениеЗаполнено(Данные.Продукция_ФасовкаУпаковка) Тогда
					packagingType = СоздатьОбъектXDTOПоИмениТипа(packaging, "packagingType");
					packagingType.guid = Данные.Продукция_ФасовкаУпаковка_Идентификатор;
				КонецЕсли;
				
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(packaging, "quantity", Данные.Продукция_ФасовкаКоличествоУпаковок, СообщениеXML);
				
				Если ЗначениеЗаполнено(Данные.Продукция_ФасовкаЕдиницаИзмерения) Тогда
					unit = СоздатьОбъектXDTOПоИмениТипа(packaging, "unit");
					unit.guid = Данные.Продукция_ФасовкаЕдиницаИзмерения_Идентификатор;
				КонецЕсли;
				
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(packaging, "volume", Данные.Продукция_ФасовкаКоличествоЕдиницВУпаковке, СообщениеXML);
				
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
					СтрШаблон(
						НСтр("ru = 'Для продукции ""%1"" указана фасовка.
						           |К сожалению, ФГИС Меркурий больше не поддерживает такую возможность.
						           |Удалите сведения о фасовке из продукции и повторите операцию.'"), Данные.Продукция_Наименование));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Объём принимаемой продукции.
	ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ОбъектXDTO, "volume", Данные[ПолеКоличество], СообщениеXML);
	
	// Единица измерения объема партии продукции.
	ЕдиницаИзмерения = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "unit");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "guid", Данные.ЕдиницаИзмеренияВЕТИС_Идентификатор, СообщениеXML);
	
	// Дата выработки продукции.
	Если ЗначениеЗаполнено(Данные.ДатаПроизводстваСтрока)
		Или ЗначениеЗаполнено(Данные.ДатаПроизводстваНачалоПериода)
		Или ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(Данные.ДатаПроизводстваТочностьЗаполнения) Тогда
		ДатаВыработки = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "dateOfProduction");
		ЗаполнитьОбъект_Период(ДатаВыработки, Данные, "ДатаПроизводства", СообщениеXML);
	КонецЕсли;
	
	// Дата окончания срока годности.
	Если ЗначениеЗаполнено(Данные.СрокГодностиСтрока)
		Или ЗначениеЗаполнено(Данные.СрокГодностиНачалоПериода)
		Или ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(Данные.СрокГодностиТочностьЗаполнения) Тогда
		
		Если Данные.СрокГодностиТочностьЗаполнения <> Перечисления.ТочностьЗаполненияПериодаВЕТИС.Неприменимо Тогда
			
			СрокГодности = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "expiryDate");
			ЗаполнитьОбъект_Период(СрокГодности, Данные, "СрокГодности", СообщениеXML);

		КонецЕсли;
		
	КонецЕсли;
	
	// Идентификатор производственной партии продукции.
	Если ВспомогательныеДанные.Свойство("ПроизводственныеПартии") Тогда
		Для каждого ДанныеПартии Из ВспомогательныеДанные.ПроизводственныеПартии Цикл
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "batchID", ДанныеПартии.ИдентификаторПартии, СообщениеXML);
		КонецЦикла;
	КонецЕсли;
	
	// Флаг: является ли продукция скоропортящейся.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		ОбъектXDTO,
		"perishable",
		?(?(Данные.СкоропортящаясяПродукция = Null, Ложь, Данные.СкоропортящаясяПродукция), "true", "false"),
		СообщениеXML);
	
	// Сведения о происхождении продукции.
	Если ЗначениеЗаполнено(Данные.СтранаПроизводства) Тогда
		ДанныеСтраныМира = ПрочиеКлассификаторыВЕТИСВызовСервера.ДанныеСтраныМира(Данные.СтранаПроизводства, СтраныМира);
		СведенияОПроисхождении = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "origin");
		СтранаПроисхождения = СоздатьОбъектXDTOПоИмениТипа(СведенияОПроисхождении, "country");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СтранаПроисхождения, "guid", ДанныеСтраныМира.Идентификатор, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СтранаПроисхождения, "name", ДанныеСтраныМира.Наименование, СообщениеXML);
	Иначе
		СведенияОПроисхождении = Неопределено;
	КонецЕсли;
	
	Если ВспомогательныеДанные.Свойство("Производители") Тогда
		
		Для Каждого ПроизводителиНайденнаяСтрока Из ВспомогательныеДанные.Производители Цикл
			
			Если СведенияОПроисхождении = Неопределено Тогда
				СведенияОПроисхождении = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "origin");
			КонецЕсли;
			
			ПроизводительПартии = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(СведенияОПроисхождении, "producer");
			
			ИнформацияОПроизводителе = СоздатьОбъектXDTOПоИмениТипа(ПроизводительПартии, "enterprise");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ИнформацияОПроизводителе, "guid", ПроизводителиНайденнаяСтрока.Производитель_Идентификатор, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ИнформацияОПроизводителе, "name", ПроизводителиНайденнаяСтрока.ПроизводительНаименование, СообщениеXML);
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ПроизводительПартии,
				"role",
				ИнтеграцияВЕТИСПовтИсп.РольПредприятия(ПроизводителиНайденнаяСтрока.РольПредприятия),
				СообщениеXML);
			
			СведенияОПроисхождении.producer.Добавить(ПроизводительПартии);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Флаг: является ли груз некачественным.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		ОбъектXDTO,
		"lowGradeCargo",
		?(?(Данные.НизкокачественнаяПродукция = Null, Ложь, Данные.НизкокачественнаяПродукция), "true", "false"),
		СообщениеXML);
		
	Если ВспомогательныеДанные.Упаковки.Количество() <> 0 Тогда
		СписокУпаковок = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "packageList");
		ЗаполнитьОбъект_PackageList(ВспомогательныеДанные.Упаковки, ВспомогательныеДанные, СписокУпаковок, СообщениеXML);
	КонецЕсли; 
	
	// Дополнительные характеристики партии.
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Данные, "ТипПроисхождения")
	   И ЗначениеЗаполнено(Данные.ТипПроисхождения) Тогда
		ДополнительныеХарактеристики = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "applicableClassifications");
		
		ТипПроисхождения  = ПродукцияВЕТИСВызовСервера.ТипПроисхожденияНепищевойПродукции(Данные.ТипПроисхождения);
		
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДополнительныеХарактеристики, "nonFoodSource", ТипПроисхождения, СообщениеXML);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбъект_VetDocument(Данные, Шапка, ВспомогательныеДанные, ДополнительныеПараметры, ОбъектXDTO, СообщениеXML) Экспорт

	// Серия бланка строгой отчётности.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "issueSeries", Данные.ВСД_СерияБланкаСтрогойОтчетности, СообщениеXML);
	
	// Номер бланка строгой отчётности.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "issueNumber", Данные.ВСД_НомерБланкаСтрогойОтчетности, СообщениеXML);

	// Дата оформления ветеринарного сопроводительного документа.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "issueDate", Данные.ВСД_Дата, СообщениеXML);
	
	// При указании данных бумажного ВСД для оформления инвентаризации дополнительных полей не требуется
	Если ДополнительныеПараметры.Свойство("ДляИнвентаризации") Тогда
		Возврат;
	КонецЕсли;
	
	// Форма ветеринарного сопроводительного документа.
	Если ЗначениеЗаполнено(Данные.ВСД_Форма) Тогда
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
			ОбъектXDTO, 
			"vetDForm", 
			ОбщегоНазначения.ИмяЗначенияПеречисления(Данные.ВСД_Форма),
			СообщениеXML);
	КонецЕсли; 
	
	// Сертифицированная партия.
	#Область certifiedConsignment
	
	Если ЗначениеЗаполнено(Данные.ВСД_ГрузоотправительПредприятие_Идентификатор) Тогда
		
		ПартияВСД = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "certifiedConsignment");
		
		// Сведения об отправителе (владельце).
		СведенияОбОтправителе = СоздатьОбъектXDTOПоИмениТипа(ПартияВСД, "consignor");
		ЗаполнитьОбъект_BusinessMember(Данные, "ВСД_Грузоотправитель", СведенияОбОтправителе, СообщениеXML);
		
		// Сведения о получателе продукции.
		СведенияОПолучателе = СоздатьОбъектXDTOПоИмениТипа(ПартияВСД, "consignee");
		ЗаполнитьОбъект_BusinessMember(Данные, "ВСД_Грузополучатель", СведенияОПолучателе, СообщениеXML);
		
		// Фирма-посредник (перевозчик продукции).
		Если ЗначениеЗаполнено(Данные.ВСД_ПеревозчикХозяйствующийСубъект_Идентификатор) Тогда
			Посредник = СоздатьОбъектXDTOПоИмениТипа(ПартияВСД, "broker");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				Посредник, 
				"guid", 
				Данные.ВСД_ПеревозчикХозяйствующийСубъект_Идентификатор,
				СообщениеXML);
		КонецЕсли; 
		
		// Информация о транспорте.
		ИнформацияОТранспорте = СоздатьОбъектXDTOПоИмениТипа(ПартияВСД, "transportInfo");
		ЗаполнитьОбъект_TransportInfo(Шапка, ВспомогательныеДанные, ИнформацияОТранспорте, СообщениеXML);
		
		// Способ хранения продукции при перевозке.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
			ПартияВСД, 
			"transportStorageType", 
			ПродукцияВЕТИСВызовСервера.СпособХраненияПриТранспортировке(Шапка.СпособХранения),
			СообщениеXML);
		
		// Сведения о партии продукции.
		СведенияОПартииПродукции = СоздатьОбъектXDTOПоИмениТипа(ПартияВСД, "batch");
		ЗаполнитьОбъект_Batch(Данные, ДополнительныеПараметры.ПолеКоличество, ВспомогательныеДанные, СведенияОПартииПродукции, СообщениеXML);
	
	КонецЕсли; 
	
	#КонецОбласти
	
	// Результаты осмотра/исследований партии. Заключение ветеринарного врача/специалиста.
	#Область authentication
	
	РезультатыИсследованийПартии = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "authentication");
	
	// Цель. Назначение груза.
	ЦельГруза = СоздатьОбъектXDTOПоИмениТипа(РезультатыИсследованийПартии, "purpose");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		ЦельГруза, 
		"guid", 
		Данные.ВСД_Цель_Идентификатор, 
		СообщениеXML);
	
	// Осуществлен ли контроль гос.ветврачом на соответствие требованиям.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		РезультатыИсследованийПартии, 
		"cargoInspected", 
		Данные.ВСД_ЭкспертизаВыполнена, 
		СообщениеXML);
	
	Если Не ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(Данные.Продукция) Тогда
		// Проводилась ли ветсанэкспертиза.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
			РезультатыИсследованийПартии,
			"cargoExpertized",
			ИнтеграцияВЕТИСВызовСервера.КодРезультатаЛабораторныхИсследований(Данные.ВСД_ЭкспертизаРезультат),
			СообщениеXML);
	КонецЕсли;
	
	// Благополучие местности.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		РезультатыИсследованийПартии,
		"locationProsperity",
		Данные.ВСД_БлагополучиеМестности,
		СообщениеXML);
	
	// Период нахождения животных на территории ТС.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		РезультатыИсследованийПартии,
		"animalSpentPeriod",
		ИнтеграцияВЕТИСПовтИсп.ПериодНахожденияЖивотныхНаТерриторииТС(Данные.ВСД_ПериодНахожденияЖивотныхНаТерриторииТС),
		СообщениеXML);
	
	// Кол-во месяцев нахождения животных на территории ТС.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		РезультатыИсследованийПартии,
		"monthsSpent",
		Данные.ВСД_КоличествоПериодовНахожденияЖивотныхНаТерриторииТС,
		СообщениеXML);
	
	// Сведения о карантинировании.
	Если ЗначениеЗаполнено(Данные.ВСД_МестоДляКарантинирования) Тогда
		
		СведенияОКарантинировании = СоздатьОбъектXDTOПоИмениТипа(РезультатыИсследованийПартии, "quarantine");
		
		// Место проведения мероприятия.
		МестоПроведенияМероприятия = СоздатьОбъектXDTOПоИмениТипа(СведенияОКарантинировании, "location");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
			МестоПроведенияМероприятия,
			"name",
			Данные.ВСД_МестоДляКарантинирования,
			СообщениеXML);
		
		// Срок действия карантина. Указывается количество дней.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
			СведенияОКарантинировании, 
			"duration",
			Данные.ВСД_КоличествоДнейДляКарантинирования,
			СообщениеXML);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Регионализация") Тогда
		Для каждого ДанныеРегионализации Из ДополнительныеПараметры.Регионализация Цикл
			
			Регионализация = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(РезультатыИсследованийПартии, "r13nClause");
			
			// Условие регионализации, соблюдаемое при перевозке груза.
			УсловиеРегионализации = СоздатьОбъектXDTOПоИмениТипа(Регионализация, "condition");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				УсловиеРегионализации, 
				"guid",
				ДанныеРегионализации.УсловиеРегионализации_Идентификатор,
				СообщениеXML);
			
			РезультатыИсследованийПартии.r13nClause.Добавить(Регионализация);
			
		КонецЦикла;
	КонецЕсли;
	
	// Сведения о проведенных лабораторных исследованиях.
	#Область laboratoryResearch
	Если ДополнительныеПараметры.Свойство("ЛабораторныеИсследования") Тогда
		
		СтруктураПоиска = Новый Структура("ВСД", Данные.ВСД);
		СписокСтрок = ДополнительныеПараметры.ЛабораторныеИсследования.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеИсследований Из СписокСтрок Цикл
			
			ДанныеИсследованийXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(РезультатыИсследованийПартии, "laboratoryResearch");
			
			// Дата события.
			ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
				ДанныеИсследованийXDTO, 
				"actualDateTime", 
				ДанныеИсследований.ДатаПолученияРезультата, 
				ВспомогательныеДанные.ХранилищеВременныхДат);
			
			// Организация-оператор, осуществляющий мероприятие.
			Лаборатория = СоздатьОбъектXDTOПоИмениТипа(ДанныеИсследованийXDTO, "operator");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				Лаборатория, 
				"name", 
				ДанныеИсследований.НаименованиеЛаборатории,
				СообщениеXML);
				
			// Номер экспертизы.
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ДанныеИсследованийXDTO, 
				"expertiseID", 
				ДанныеИсследований.НомерЭкспертизы,
				СообщениеXML);
			
			// Показатель безопасности.
			НаименованиеПоказателя = СоздатьОбъектXDTOПоИмениТипа(ДанныеИсследованийXDTO, "indicator");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				НаименованиеПоказателя, 
				"name", 
				ДанныеИсследований.НаименованиеПоказателя,
				СообщениеXML);
			
			// Метод исследования.
			Если ЗначениеЗаполнено(ДанныеИсследований.МетодИсследования) Тогда
				МетодИсследования = СоздатьОбъектXDTOПоИмениТипа(ДанныеИсследованийXDTO, "method");
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
					МетодИсследования, 
					"name", 
					ДанныеИсследований.МетодИсследования,
					СообщениеXML);
			КонецЕсли; 
			
			// Результат исследования.
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ДанныеИсследованийXDTO, 
				"result", 
				ИнтеграцияВЕТИСВызовСервера.КодРезультатаЛабораторныхИсследований(ДанныеИсследований.РезультатИсследования),
				СообщениеXML);
			
			// Заключение.
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ДанныеИсследованийXDTO, 
				"conclusion", 
				ДанныеИсследований.Заключение,
				СообщениеXML);
			
			РезультатыИсследованийПартии.laboratoryResearch.Добавить(ДанныеИсследованийXDTO);
		
		КонецЦикла;
	
	КонецЕсли;
	#КонецОбласти
	
	// Сведения о проведенной обработке/иммунизации животных.
	#Область immunization
	Если ДополнительныеПараметры.Свойство("Иммунизация") Тогда
		
		СтруктураПоиска = Новый Структура("ВСД", Данные.ВСД);
		СписокСтрок = ДополнительныеПараметры.Иммунизация.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеОбработки Из СписокСтрок Цикл
			
			ДанныеОбработкиXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(РезультатыИсследованийПартии, "immunization");
			
			// Дата события.
			ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
				ДанныеОбработкиXDTO, 
				"actualDateTime", 
				ДанныеОбработки.ДатаПроведенияИммунизацииОбработки, 
				ВспомогательныеДанные.ХранилищеВременныхДат);

			// Заболевание.
			Заболевание = СоздатьОбъектXDTOПоИмениТипа(ДанныеОбработкиXDTO, "disease");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				Заболевание, 
				"name", 
				ДанныеОбработки.НаименованиеБолезниПаразита,
				СообщениеXML);

			// Препарат.
			Препарат = СоздатьОбъектXDTOПоИмениТипа(ДанныеОбработкиXDTO, "medicinalDrug");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				Препарат, 
				"name", 
				ДанныеОбработки.НазваниеИПроизводительВакциныПрепарата,
				СообщениеXML);
				
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				Препарат, 
				"series", 
				ДанныеОбработки.НомерСерииВакциныПрепарата,
				СообщениеXML);

			// Срок действия препарата/вакцины.
			Если ЗначениеЗаполнено(ДанныеОбработки.ДатаОкончанияДействияВакциныПрепарата) Тогда
				ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
					ДанныеОбработкиXDTO, 
					"effectiveBeforeDate", 
					ДанныеОбработки.ДатаОкончанияДействияВакциныПрепарата, 
					ВспомогательныеДанные.ХранилищеВременныхДат);
			КонецЕсли;

			РезультатыИсследованийПартии.immunization.Добавить(ДанныеОбработкиXDTO);
			
		КонецЦикла; 

	КонецЕсли; 
	#КонецОбласти
	
	// Особые отметки для ВСД.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		РезультатыИсследованийПартии, 
		"specialMarks", 
		Данные.ВСД_ОсобыеОтметки,
		СообщениеXML);

	#КонецОбласти

	// Сведения об установлении статуса ветеринарного документа.
	#Область statusChange
	Если ВспомогательныеДанные.Свойство("ИсторияСтатусов") Тогда
		
		// Нельзя использовать НайтиСтроки, т.к. результат должен быть упорядочен.
		Для каждого ДанныеСтатуса Из ВспомогательныеДанные.ИсторияСтатусов Цикл
			
			Если ДанныеСтатуса.ВСД <> Данные.ВСД Тогда
				Продолжить;
			КонецЕсли;
			
			СтатусВСД = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "statusChange");
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				СтатусВСД, 
				"status", 
				ИнтеграцияВЕТИСПовтИсп.СтатусВетеринарноСопроводительногоДокумента(ДанныеСтатуса.Статус), 
				СообщениеXML);
			
			ИзменилСтатус = СоздатьОбъектXDTOПоИмениТипа(СтатусВСД, "specifiedPerson");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ИзменилСтатус, "fio", ДанныеСтатуса.ФИО, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ИзменилСтатус, "post", ДанныеСтатуса.Должность, СообщениеXML);
			
			ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
				СтатусВСД,
				"actualDateTime",
				ДанныеСтатуса.ДатаИзменения,
				ВспомогательныеДанные.ХранилищеВременныхДат);
			
			ОбъектXDTO.statusChange.Добавить(СтатусВСД);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьОбъект_PackageList(Упаковки, ВспомогательныеДанные, ОбъектXDTO, СообщениеXML) Экспорт

	Для каждого ДанныеУпаковки Из Упаковки Цикл
	
		// Описание упаковки.
		ОписаниеУпаковки = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "package");
		
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
			ОписаниеУпаковки, 
			"level", 
			ИнтеграцияВЕТИСПовтИсп.УровеньУпаковки(ДанныеУпаковки.УровеньУпаковки), 
			СообщениеXML);
			
		// Тип упаковки.
		ТипУпаковки = СоздатьОбъектXDTOПоИмениТипа(ОписаниеУпаковки, "packingType");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ТипУпаковки, "globalID", ДанныеУпаковки.УпаковкаВЕТИС_КодЕЭК, СообщениеXML);
		
		// Количество единиц упаковки.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ОписаниеУпаковки, "quantity", ДанныеУпаковки.КоличествоУпаковокВЕТИС, СообщениеXML);

		// Маркировка партии продукции.
		Если ВспомогательныеДанные.Свойство("ШтрихкодыУпаковок") Тогда
			
			ИмяПоляИдентификатораСтроки = "ИдентификаторСтроки";
			СтруктураПоиска = Новый Структура("ИдентификаторСтрокиУпаковки", ДанныеУпаковки[ИмяПоляИдентификатораСтроки]);
			СписокСтрок = ВспомогательныеДанные.ШтрихкодыУпаковок.НайтиСтроки(СтруктураПоиска);
			Для каждого ДанныеШтрихкода Из СписокСтрок Цикл
				
				Штрихкод = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОписаниеУпаковки, "productMarks");
				ТипМаркировки = ПродукцияВЕТИСВызовСервера.ТипМаркировкиУпаковки(ДанныеШтрихкода.ТипМаркировки);
				
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Штрихкод, "class",     ТипМаркировки, СообщениеXML);
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Штрихкод, "__content", ДанныеШтрихкода.Штрихкод, СообщениеXML);
				
				ОписаниеУпаковки.productMarks.Добавить(Штрихкод);
				
			КонецЦикла;
			
		КонецЕсли;
	
		ОбъектXDTO.package.Добавить(ОписаниеУпаковки);
		
	КонецЦикла; 
	
КонецПроцедуры

Функция СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, ИмяСвойства) Экспорт

	ОбъектXDTO[ИмяСвойства] = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, ИмяСвойства);
	
	Возврат ОбъектXDTO[ИмяСвойства];
	
КонецФункции

Процедура ДобавитьЗаписьСкладскогоЖурналаВСообщениеXML(Данные, СообщениеXML) Экспорт
	
	Если ИнтеграцияВЕТИСПовтИсп.ИспользоватьОчередьПередачиЗаписейСкладскогоЖурналаВЕТИС() Тогда
		Если СообщениеXML.ЗаписиСкладскогоЖурнала = Неопределено Тогда
			СообщениеXML.ЗаписиСкладскогоЖурнала = Новый Соответствие;
		КонецЕсли;
		
		ДанныеРезервирования = Новый Структура;
		ДанныеРезервирования.Вставить("КоличествоВЕТИС",       Данные.КоличествоВЕТИС);
		ДанныеРезервирования.Вставить("ЕдиницаИзмеренияВЕТИС", Данные.ЕдиницаИзмеренияВЕТИС);
		ДанныеРезервирования.Вставить("Продукция",             Данные.Продукция);
		
		СообщениеXML.ЗаписиСкладскогоЖурнала.Вставить(Данные.ЗаписьСкладскогоЖурнала, ДанныеРезервирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьЗаписиСкладскогоЖурналаПоРезультатамЗапросаВЕТИС(ДанныеЗаписейСкладскогоЖурнала, ТабличнаяЧасть, Документ) Экспорт
	
	РеквизитыТЧ = Документ.Метаданные().ТабличныеЧасти.Товары.Реквизиты;
	
	ЕстьКолонкаСкоропортящаясяПродукция    = (РеквизитыТЧ.Найти("СкоропортящаясяПродукция") <> Неопределено);
	ЕстьКолонкаДатаПроизводства            = (РеквизитыТЧ.Найти("ДатаПроизводстваТочностьЗаполнения") <> Неопределено);
	ЕстьКолонкаВозвращаемоеКоличествоВЕТИС = (РеквизитыТЧ.Найти("ВозвращаемоеКоличествоВЕТИС") <> Неопределено);
	
	Для Каждого ДанныеЗаписиСкладскогоЖурнала Из ДанныеЗаписейСкладскогоЖурнала Цикл
		
		ЗаписьСкладскогоЖурналаСсылка = ДанныеЗаписиСкладскогоЖурнала.Ссылка;
		ЗаписьСкладскогоЖурналаОбъект = ДанныеЗаписиСкладскогоЖурнала.Объект;
		
		ДанныеСтроки = ТабличнаяЧасть.Найти(ЗаписьСкладскогоЖурналаСсылка, "ЗаписьСкладскогоЖурнала");
		Если ДанныеСтроки <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаписьСкладскогоЖурналаОбъект.ВетеринарноСопроводительныеДокументы.Количество() > 0 Тогда
			
			Для Каждого ЭлементДанныхВСД Из ЗаписьСкладскогоЖурналаОбъект.ВетеринарноСопроводительныеДокументы Цикл
				
				ДанныеСтроки = ТабличнаяЧасть.Найти(
					ЭлементДанныхВСД.ВетеринарноСопроводительныйДокумент,
					"ВетеринарноСопроводительныйДокумент");
				Если ДанныеСтроки <> Неопределено Тогда
					ДанныеСтроки.ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурналаСсылка;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДанныеСтроки = Неопределено Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Продукция",             ЗаписьСкладскогоЖурналаОбъект.Продукция);
			ПараметрыОтбора.Вставить("КоличествоВЕТИС",       ДанныеЗаписиСкладскогоЖурнала.КоличествоВЕТИС);
			ПараметрыОтбора.Вставить("ЕдиницаИзмеренияВЕТИС", ДанныеЗаписиСкладскогоЖурнала.ЕдиницаИзмеренияВЕТИС);
			
			Если ЕстьКолонкаДатаПроизводства
				И (ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваСтрока)
				Или ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваНачалоПериода)
				Или ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваКонецПериода)) Тогда
				
				ПараметрыОтбора.Вставить("ДатаПроизводстваСтрока",             ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваСтрока);
				ПараметрыОтбора.Вставить("ДатаПроизводстваТочностьЗаполнения", ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваТочностьЗаполнения);
				ПараметрыОтбора.Вставить("ДатаПроизводстваНачалоПериода",      ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваНачалоПериода);
				ПараметрыОтбора.Вставить("ДатаПроизводстваКонецПериода",       ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваКонецПериода);
				
			КонецЕсли;
			
			Если Не ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(ЗаписьСкладскогоЖурналаОбъект.Продукция) Тогда
				
				Если ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаОбъект.СрокГодностиСтрока)
					Или ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаОбъект.СрокГодностиНачалоПериода)
					Или ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаОбъект.СрокГодностиКонецПериода) Тогда
					
					ПараметрыОтбора.Вставить("СрокГодностиСтрока",             ЗаписьСкладскогоЖурналаОбъект.СрокГодностиСтрока);
					ПараметрыОтбора.Вставить("СрокГодностиТочностьЗаполнения", ЗаписьСкладскогоЖурналаОбъект.СрокГодностиТочностьЗаполнения);
					ПараметрыОтбора.Вставить("СрокГодностиНачалоПериода",      ЗаписьСкладскогоЖурналаОбъект.СрокГодностиНачалоПериода);
					ПараметрыОтбора.Вставить("СрокГодностиКонецПериода",       ЗаписьСкладскогоЖурналаОбъект.СрокГодностиКонецПериода);
					
				КонецЕсли;
				
				Если ЕстьКолонкаСкоропортящаясяПродукция Тогда
					ПараметрыОтбора.Вставить("СкоропортящаясяПродукция", ЗаписьСкладскогоЖурналаОбъект.СкоропортящаясяПродукция);
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыОтбора.Вставить("ЗаписьСкладскогоЖурнала", Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
			
			НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ДанныеСтроки = НайденныеСтроки[0];
				ДанныеСтроки.ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурналаСсылка;
			Иначе
				// Запись могла быть образована в результате возврата.
				// В таком случае нельзя искать количество методом "НайтиСтроки".
				Если ЕстьКолонкаВозвращаемоеКоличествоВЕТИС Тогда
					
					ПараметрыОтбора.Удалить("КоличествоВЕТИС");
					
					НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора);
					Для Каждого СтрокаТЧ из НайденныеСтроки Цикл
						Если ДанныеЗаписиСкладскогоЖурнала.КоличествоВЕТИС = СтрокаТЧ.КоличествоВЕТИС
							- СтрокаТЧ.ВозвращаемоеКоличествоВЕТИС Тогда
							
							ДанныеСтроки = СтрокаТЧ;
							ДанныеСтроки.ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурналаСсылка;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеСтроки = Неопределено Тогда
			
			ТекстОшибки = НСтр("ru = 'При заполнении записи складского журнала по документу %1 не удалось найти позицию документа по продукции %2 (количество %3 %4; дата производства %5; срок годности %6)'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, 
				Документ,
				ЗаписьСкладскогоЖурналаОбъект.Продукция,
				ДанныеЗаписиСкладскогоЖурнала.КоличествоВЕТИС,
				ДанныеЗаписиСкладскогоЖурнала.ЕдиницаИзмеренияВЕТИС,
				ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваСтрока,
				ЗаписьСкладскогоЖурналаОбъект.СрокГодностиСтрока);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанных

// Преобразует список измененных записей складского журнала в таблицу значений
// и добавляет ее в "ПараметрыОбмена" (ТаблицаЭлементовПоДатам).
//
// Параметры:
//  Список           - Массив Из Структура - результат выполнения запроса к ВЕТИС "GetStockEntryChangesList",
//                     См. http://help.vetrf.ru/wiki/GetStockEntryChangesListOperation_v2.0
//  ПараметрыОбмена  - См. ИнтеграцияВЕТИС.ПараметрыОбмена - параметры обмена.
//  ПараметрыЗапроса - Структура - Параметры сообщения, переданного в ВЕТИС.
//  ДокументДляВосстановления - ДокументСсылка, Неопределено - восстанавливаемый по данным сервиса документ.
//
Процедура ЗаполнитьТаблицуЭлементовПоДате(Список, ПараметрыОбмена, ПараметрыЗапроса, ДокументДляВосстановления = Неопределено) Экспорт
	
	ТипУникальныйИдентификаторИС = Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип;
	ТипЧисло     = Новый ОписаниеТипов("Число");
	ТипБулево    = Новый ОписаниеТипов("Булево");
	ТипСтруктура = Новый ОписаниеТипов("Структура");
	
	// Таблица элементов с одной датой изменения.
	ТаблицаЭлементовШаблон = Новый ТаблицаЗначений;
	ТаблицаЭлементовШаблон.Колонки.Добавить("Идентификатор",                 ТипУникальныйИдентификаторИС);
	ТаблицаЭлементовШаблон.Колонки.Добавить("ИдентификаторВерсии",           ТипУникальныйИдентификаторИС);
	ТаблицаЭлементовШаблон.Колонки.Добавить("ИдентификаторВСД",              ТипУникальныйИдентификаторИС);
	ТаблицаЭлементовШаблон.Колонки.Добавить("ИдентификаторЕдиницыИзмерения", ТипУникальныйИдентификаторИС);
	ТаблицаЭлементовШаблон.Колонки.Добавить("ЭлементДанных",                 ТипСтруктура);
	ТаблицаЭлементовШаблон.Колонки.Добавить("ЭлементДанныхСледующий",        ТипСтруктура);
	ТаблицаЭлементовШаблон.Колонки.Добавить("ЭлементДанныхПредыдущий",       ТипСтруктура);
	ТаблицаЭлементовШаблон.Колонки.Добавить("КоличествоВЕТИС",               ТипЧисло);
	ТаблицаЭлементовШаблон.Колонки.Добавить("Статус",                        ТипЧисло);
	ТаблицаЭлементовШаблон.Колонки.Добавить("СинхронизированРанее",          ТипБулево);
	
	// Преобразуем "Список" в таблицу значений для обработки.
	ТаблицаИдентификаторов = ИнтеграцияВЕТИС.НоваяТаблицаДляСравненияИдентификаторов();
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторЕдиницыИзмерения", ТипУникальныйИдентификаторИС);
	ТаблицаИдентификаторов.Колонки.Добавить("ЭлементДанных",                 ТипСтруктура);
	
	Индекс = -1;
	// Заполним таблицу идентификаторов.
	Для Каждого ЭлементДанных Из Список Цикл
		Индекс = Индекс + 1;
		
		СтрокаТЧ = ТаблицаИдентификаторов.Добавить();
		СтрокаТЧ.Идентификатор       = ЭлементДанных.guid;
		СтрокаТЧ.ИдентификаторВерсии = ЭлементДанных.uuid;
		СтрокаТЧ.ДатаИзменения       = ЭлементДанных.createDate;
		СтрокаТЧ.ЭлементДанных       = ЭлементДанных;
		СтрокаТЧ.Индекс              = Индекс;
		
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Индекс              КАК Индекс,
	|	Т.Идентификатор       КАК Идентификатор,
	|	Т.ИдентификаторВерсии КАК ИдентификаторВерсии,
	|	Т.ДатаИзменения       КАК ДатаИзменения
	|ПОМЕСТИТЬ ВтИдентификаторы
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ДокументДляВосстановления = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВтИдентификаторы.Индекс              КАК Индекс,
			|	ВтИдентификаторы.Идентификатор       КАК Идентификатор,
			|	ВтИдентификаторы.ИдентификаторВерсии КАК ИдентификаторВерсии,
			|	ВтИдентификаторы.ДатаИзменения       КАК ДатаИзменения,
			|	ВЫБОР
			|		КОГДА СинхронизацияОбъектовВЕТИС.ИдентификаторВерсии ЕСТЬ NULL
			|				И ВтИдентификаторы.ДатаИзменения >= &НачалоПериода
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК СинхронизированРанее
			|ИЗ
			|	ВтИдентификаторы КАК ВтИдентификаторы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СинхронизацияОбъектовВЕТИС КАК СинхронизацияОбъектовВЕТИС
			|		ПО ВтИдентификаторы.Идентификатор = СинхронизацияОбъектовВЕТИС.Идентификатор
			|			И ВтИдентификаторы.ИдентификаторВерсии = СинхронизацияОбъектовВЕТИС.ИдентификаторВерсии
			|			И (СинхронизацияОбъектовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ЗаписиСкладскогоЖурнала))
			|УПОРЯДОЧИТЬ ПО
			|	ДатаИзменения,
			|	Индекс УБЫВ
			|ИТОГИ ПО
			|	ДатаИзменения
			|";
	Иначе
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВтИдентификаторы.Индекс              КАК Индекс,
			|	ВтИдентификаторы.Идентификатор       КАК Идентификатор,
			|	ВтИдентификаторы.ИдентификаторВерсии КАК ИдентификаторВерсии,
			|	ВтИдентификаторы.ДатаИзменения       КАК ДатаИзменения,
			|	ЛОЖЬ                                 КАК СинхронизированРанее
			|ИЗ
			|	ВтИдентификаторы КАК ВтИдентификаторы
			|УПОРЯДОЧИТЬ ПО
			|	ДатаИзменения,
			|	Индекс УБЫВ
			|ИТОГИ ПО
			|	ДатаИзменения
			|";
	КонецЕсли;
	
	// В запрос будем передавать таблицу идентификаторов без элементов данных.
	Таблица = ТаблицаИдентификаторов.Скопировать();
	Таблица.ЗаполнитьЗначения(Неопределено, "ЭлементДанных");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура")
		И ПараметрыЗапроса.Свойство("Интервал") Тогда
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.Интервал.НачалоПериода);
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", Дата(1, 1, 1));
	КонецЕсли;
	
	ИдентификаторыИсключения = Новый Соответствие;
	
	ВыборкаДатаИзменения = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДатаИзменения.Следующий() Цикл
		
		ЭлементыПоДате = ПараметрыОбмена.ТаблицаЭлементовПоДатам.Найти(ВыборкаДатаИзменения.ДатаИзменения);
		Если ЭлементыПоДате = Неопределено Тогда
			ЭлементыПоДате = ПараметрыОбмена.ТаблицаЭлементовПоДатам.Добавить();
			ЭлементыПоДате.Дата = ВыборкаДатаИзменения.ДатаИзменения;
		КонецЕсли;
		
		Если ЭлементыПоДате.ТаблицаЭлементов = Неопределено Тогда
			ЭлементыПоДате.ТаблицаЭлементов = ТаблицаЭлементовШаблон.СкопироватьКолонки();
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Идентификатор, ИдентификаторВерсии");
		Выборка = ВыборкаДатаИзменения.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			МассивСтрок = ЭлементыПоДате.ТаблицаЭлементов.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока = ЭлементыПоДате.ТаблицаЭлементов.Добавить();
			Иначе
				НоваяСтрока = МассивСтрок[0];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ЭлементДанных = Список[Выборка.Индекс];
			
			// Заполним идентификатор единицы измерения ВЕТИС.
			НоваяСтрока.ИдентификаторЕдиницыИзмерения = НоваяСтрока.ЭлементДанных.batch.unit.guid;
			
			Статус = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(НоваяСтрока.ЭлементДанных.status);
			
			// Заполним статус.
			НоваяСтрока.Статус = НоваяСтрока.ЭлементДанных.status;
			
			// Заполним идентификатор ВСД.
			МассивВСД = НоваяСтрока.ЭлементДанных.vetDocument;
			Если МассивВСД.Количество() >= 1
				И Не Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеОперацииСписания Тогда
				НоваяСтрока.ИдентификаторВСД = МассивВСД[МассивВСД.Количество()-1].uuid;
			КонецЕсли;
			
			// Заполним "ЭлементДанныхСледующий".
			Если Не ПустаяСтрока(НоваяСтрока.ЭлементДанных.next) Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Идентификатор",       НоваяСтрока.ЭлементДанных.guid);
				ПараметрыОтбора.Вставить("ИдентификаторВерсии", НоваяСтрока.ЭлементДанных.next);
				
				НайденныеСтроки = ТаблицаИдентификаторов.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					// Для операций:
					//  - удаления записи в результате объединения
					//  - удаления записи в результате присоединения
					// в графе "next"
					// указывается uuid результирующей продукции, а не uuid текущей записи.
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("ИдентификаторВерсии", НоваяСтрока.ЭлементДанных.next);
					НайденныеСтроки = ТаблицаИдентификаторов.НайтиСтроки(ПараметрыОтбора);
					
				КонецЕсли;
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					НоваяСтрока.ЭлементДанныхСледующий = НайденныеСтроки[0].ЭлементДанных;
				КонецЕсли;
				
			КонецЕсли;
			
			// Заполним "ЭлементДанныхПредыдущий".
			Если Не ПустаяСтрока(НоваяСтрока.ЭлементДанных.previous) Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Идентификатор",       НоваяСтрока.ЭлементДанных.guid);
				ПараметрыОтбора.Вставить("ИдентификаторВерсии", НоваяСтрока.ЭлементДанных.previous);
				
				НайденныеСтроки = ТаблицаИдентификаторов.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					// Для операций:
					//  - удаления записи в результате объединения
					//  - удаления записи в результате присоединения
					// в графе "previous"
					// указывается uuid предыдущей продукции, а не uuid текущей записи.
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("ИдентификаторВерсии", НоваяСтрока.ЭлементДанных.previous);
					НайденныеСтроки = ТаблицаИдентификаторов.НайтиСтроки(ПараметрыОтбора);
					
				КонецЕсли;
				
				Если НайденныеСтроки.Количество() > 0 Тогда	
					НоваяСтрока.ЭлементДанныхПредыдущий  = НайденныеСтроки[0].ЭлементДанных;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеПрисоединения
				И ЗначениеЗаполнено(НоваяСтрока.ЭлементДанныхСледующий)
				И ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(НоваяСтрока.ЭлементДанныхСледующий.status) = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединенияАвтоматически Тогда
				ИдентификаторыИсключения.Вставить(НоваяСтрока.ЭлементДанных, НоваяСтрока.ЭлементДанныхСледующий);
			КонецЕсли;
			
			// Заполним количество ВЕТИС.
			Если Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединенияАвтоматически
				И ЗначениеЗаполнено(НоваяСтрока.ЭлементДанныхПредыдущий) Тогда
				НоваяСтрока.КоличествоВЕТИС = НоваяСтрока.ЭлементДанных.batch.volume - НоваяСтрока.ЭлементДанныхПредыдущий.batch.volume;
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.ЭлементДанныхПредыдущий) Тогда
				НоваяСтрока.КоличествоВЕТИС = НоваяСтрока.ЭлементДанныхПредыдущий.batch.volume - НоваяСтрока.ЭлементДанных.batch.volume;
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.ЭлементДанныхСледующий)
				И ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(НоваяСтрока.ЭлементДанныхСледующий.status) = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеПрисоединения
				И ИдентификаторыИсключения[НоваяСтрока.ЭлементДанныхСледующий] <> Неопределено Тогда
				НоваяСтрока.КоличествоВЕТИС = 0;
			Иначе
				НоваяСтрока.КоличествоВЕТИС = НоваяСтрока.ЭлементДанных.batch.volume;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет идентификаторы синхронизированных объектов
// в регистр сведений "СинхронизацияОбъектовВЕТИС".
//
// Параметры:
//  ТаблицаИдентификаторов - ТаблицаЗначений  - идентификаторы синхронизированных объектов, содержит колонками:
//    * Идентификатор       - Строка - идентификатор объекта
//    * ИдентификаторВерсии - Строка - идентификатор версии.
//  ТипВЕТИС               - ПеречислениеСсылка.ТипыВЕТИС - тип объекта.
//
Процедура ЗарегистрироватьСинхронизациюОбъектов(ТаблицаИдентификаторов, ТипВЕТИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЧ из ТаблицаИдентификаторов Цикл
		
		МенеджерЗаписи = РегистрыСведений.СинхронизацияОбъектовВЕТИС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЧ);
		МенеджерЗаписи.ТипВЕТИС = ТипВЕТИС;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЧ);
			МенеджерЗаписи.ТипВЕТИС = ТипВЕТИС;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные сопоставленния продукции по регистру "СоответствиеНоменклатурыВЕТИС" для табличной части документа.
//
//Параметры:
//   ТЧТовары - ТабличнаяЧасть - табличная часть "Товары" документа ВЕТИС.
//
//Возвращаемое значение:
//   РезультатЗапроса - содержащий номер строки ТЧ и сопоставленные товары.
//
Функция ПолучитьТоварыСопоставленныеПоЗаписи(ТЧТовары) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", ТЧТовары.Выгрузить(,"НомерСтроки, ЗаписьСкладскогоЖурнала, Продукция, Номенклатура, Характеристика, Серия"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	Товары.Продукция КАК Продукция,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары";
	
	ДополнитьЗапросСопоставлениемТоваров(Запрос);
	
	Запрос.Текст = Запрос.Текст +
	"
	|
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТовары.НомерСтроки КАК НомерСтроки,
	|	втНоменклатураСопоставленная.Номенклатура КАК Номенклатура,
	|	втНоменклатураСопоставленная.Характеристика КАК Характеристика,
	|	втНоменклатураСопоставленная.Серия КАК Серия
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатураСопоставленная КАК втНоменклатураСопоставленная
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = втНоменклатураСопоставленная.ЗаписьСкладскогоЖурнала";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#Область ФормированиеДокументов

// Формирует документы ВЕТИС на основании таблицы измененных записей складского журнала.
//
// Параметры:
//  ДанныеДляОбработки - Массив Из Структура - данные для формирования документов по датам. Элементы структуры:
//    * ХозяйствующийСубъект - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - хозяйствующий субъект (обмена).
//    * Предприятие          - СправочникСсылка.ПредприятияВЕТИС           - предприятие (обмена)
//    * Дата                 - Дата                                        - дата версии изменений,
//    * ТаблицаЭлементов     - ТаблицаЗначений  - (См. ОбменДаннымиВЕТИС.ЗаполнитьТаблицуЭлементовПоДате):
//      ** Идентификатор                 - Строка - идентификатор записи журнала ВетИС
//      ** ИдентификаторВерсии           - Строка - идентификатор версии записи
//      ** ИдентификаторВСД              - Строка - идентификатор связанного ВСД
//      ** ИдентификаторЕдиницыИзмерения - Строка - идентификатор единицы измерения ВетИС в изменении записи
//      ** КоличествоВЕТИС               - Число  - изменение количества
//      ** Статус                        - Число  - статус изменения записи
//      ** СинхронизированРанее          - Булево - признак обработанной строки.
//  ПараметрыОбмена - См. ИнтеграцияВЕТИС.ПараметрыОбмена
//  ДокументДляВосстановления - ДокументСсылка, Неопределено - восстанавливаемый документ.
//
//Возвращаемое значение:
//   Массив Из ОпределяемыйТип.ДокументыВЕТИС - сформированные документы.
//
Функция СформироватьДокументы(ДанныеДляОбработки, ПараметрыОбмена, ДокументДляВосстановления) Экспорт
	
	Если Не ПараметрыОбмена.ЗагружатьДокументыСозданныеЧерезWeb Тогда
		
		ТребуетсяВосстановление = Ложь;
		
		Если ПараметрыОбмена.ДокументыДляВосстановления <> Неопределено Тогда
			
			Для Каждого КлючИЗначение Из ПараметрыОбмена.ДокументыДляВосстановления Цикл
				ДокументыДляВосстановления = КлючИЗначение.Значение;
				Если ДокументыДляВосстановления <> Неопределено
					И ДокументыДляВосстановления.Количество() <> 0 Тогда
					ТребуетсяВосстановление = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДокументДляВосстановления <> Неопределено Тогда
			ТребуетсяВосстановление = Истина;
		КонецЕсли;
		
		Если Не ТребуетсяВосстановление Тогда
			Возврат Новый Массив;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Шаблон таблицы для хранения транспортных операций
	ТипСпособыХранения       = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыХраненияПриТранспортировкеВЕТИС");
	ТипХозяйствующиеСубъекты = Новый ОписаниеТипов("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС");
	ТипПредприятия           = Новый ОписаниеТипов("СправочникСсылка.ПредприятияВЕТИС");
	ТипТТН                   = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовВЕТИС");
	
	ТранспортныеОперации = Новый ТаблицаЗначений;
	ТранспортныеОперации.Колонки.Добавить("ДокументОбъект");
	ТранспортныеОперации.Колонки.Добавить("ПеревозчикХозяйствующийСубъект",       ТипХозяйствующиеСубъекты);
	ТранспортныеОперации.Колонки.Добавить("СпособХранения",                       ТипСпособыХранения);
	ТранспортныеОперации.Колонки.Добавить("СерияТТН",                             Новый ОписаниеТипов("Строка"));
	ТранспортныеОперации.Колонки.Добавить("НомерТТН",                             Новый ОписаниеТипов("Строка"));
	ТранспортныеОперации.Колонки.Добавить("ДатаТТН",                              Новый ОписаниеТипов("Дата"));
	ТранспортныеОперации.Колонки.Добавить("ТипТТН",                               ТипТТН);
	ТранспортныеОперации.Колонки.Добавить("ГрузополучательХозяйствующийСубъект",  ТипХозяйствующиеСубъекты);
	ТранспортныеОперации.Колонки.Добавить("ГрузополучательПредприятие",           ТипПредприятия);
	ТранспортныеОперации.Колонки.Добавить("ГрузоотправительХозяйствующийСубъект", ТипХозяйствующиеСубъекты);
	ТранспортныеОперации.Колонки.Добавить("ГрузоотправительПредприятие",          ТипПредприятия);
	
	// Шаблон таблицы для хранения производственных операций
	ПроизводственныеОперации = Новый ТаблицаЗначений;
	ПроизводственныеОперации.Колонки.Добавить("ДокументОбъект");
	ПроизводственныеОперации.Колонки.Добавить("Дата",           Новый ОписаниеТипов("Дата"));
	
	// Шаблон таблицы для хранения инвентаризаций.
	ИнвентаризацииПродукции = Новый ТаблицаЗначений;
	ИнвентаризацииПродукции.Колонки.Добавить("ДокументОбъект");
	ИнвентаризацииПродукции.Колонки.Добавить("Дата",           Новый ОписаниеТипов("Дата"));
	
	// Шаблон таблицы для хранения объединений записей складского журнала.
	ОбъединениеЗаписейСкладскогоЖурнала = Новый ТаблицаЗначений;
	ОбъединениеЗаписейСкладскогоЖурнала.Колонки.Добавить("ДокументОбъект");
	ОбъединениеЗаписейСкладскогоЖурнала.Колонки.Добавить("ХозяйствующийСубъект",    ТипХозяйствующиеСубъекты);
	ОбъединениеЗаписейСкладскогоЖурнала.Колонки.Добавить("Предприятие",             ТипПредприятия);
	ОбъединениеЗаписейСкладскогоЖурнала.Колонки.Добавить("Дата",                    Новый ОписаниеТипов("Дата"));
	ОбъединениеЗаписейСкладскогоЖурнала.Колонки.Добавить("ВидПродукции",            Новый ОписаниеТипов("СправочникСсылка.ПродукцияВЕТИС"));
	ОбъединениеЗаписейСкладскогоЖурнала.Колонки.Добавить("ЕдиницаИзмерения",        Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмеренияВЕТИС"));
	ОбъединениеЗаписейСкладскогоЖурнала.Колонки.Добавить("ЗаписьСкладскогоЖурнала", Новый ОписаниеТипов("СправочникСсылка.ЗаписиСкладскогоЖурналаВЕТИС"));
	ОбъединениеЗаписейСкладскогоЖурнала.Колонки.Добавить("СпособОбъединения",       Новый ОписаниеТипов("ПеречислениеСсылка.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС"));
	
	КСозданиюДокументов = Новый Структура;
	КСозданиюДокументов.Вставить("ВходящаяТранспортнаяОперацияВЕТИС",        ТранспортныеОперации);
	КСозданиюДокументов.Вставить("ИсходящаяТранспортнаяОперацияВЕТИС",       ТранспортныеОперации.СкопироватьКолонки());
	
	КСозданиюДокументов.Вставить("ИнвентаризацияПродукцииВЕТИС",             ИнвентаризацииПродукции);
	КСозданиюДокументов.Вставить("ПроизводственнаяОперацияВЕТИС",            ПроизводственныеОперации);
	КСозданиюДокументов.Вставить("ОбъединениеЗаписейСкладскогоЖурналаВЕТИС", ОбъединениеЗаписейСкладскогоЖурнала);
	
	СтруктураПоиска = Новый Структура("Идентификатор, ИдентификаторВерсии");
	
	Для Каждого ОбщиеДанные Из ДанныеДляОбработки Цикл
		
		// Получим данные для формирования документов по идентификаторам.
		ТаблицаДанныеДокументов = ПолучитьДанныеДляФормированияДокументов(ОбщиеДанные);
		ТаблицаДанныеДокументов.Индексы.Добавить("Идентификатор, ИдентификаторВерсии");
		
		Для Каждого СтрокаТЧ Из ОбщиеДанные.ТаблицаЭлементов Цикл
			
			// Если объект был синхронизирован ранее, пропустим его для обработки
			// и будем использовать только для анализа.
			Если СтрокаТЧ.СинхронизированРанее Тогда
				Продолжить;
			КонецЕсли;
			
			Статус = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(СтрокаТЧ.ЭлементДанных.status);
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ); 
			МассивСтрокДанныеДокумента = ТаблицаДанныеДокументов.НайтиСтроки(СтруктураПоиска);
			
			// Количество может быть равно 0 в случае получения изменений, связанных с незавершенным производством
			// и операцией присоединения (ИзмененВРезультатеПрисоединенияАвтоматически).
			Если МассивСтрокДанныеДокумента.Количество() = 0
				И СтрокаТЧ.КоличествоВЕТИС = 0 Тогда
				СтрокаТЧ.СинхронизированРанее = Истина;
				Продолжить;
			ИначеЕсли МассивСтрокДанныеДокумента.Количество() = 0
				И СтрокаТЧ.КоличествоВЕТИС <> 0 Тогда
				ТекстОшибки = НСтр("ru = 'Загрузка измененных записей складского журнала ВетИС завершилась с ошибкой.
				                         |В базе данных не обнаружена запись с идентификатором %1'");
				ТекстОшибки = СтрШаблон(
					ТекстОшибки,
					СтрокаТЧ.Идентификатор);
				
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			СтрокаДанныеДокументов = МассивСтрокДанныеДокумента[0];
			
			ПараметрыВосстановления = Новый Структура;
			ПараметрыВосстановления.Вставить("ОбщиеДанные",               ОбщиеДанные);
			ПараметрыВосстановления.Вставить("КСозданиюДокументов",       КСозданиюДокументов);
			ПараметрыВосстановления.Вставить("СтрокаТаблицыЭлементов",    СтрокаТЧ);
			ПараметрыВосстановления.Вставить("СтрокаДанныеДокументов",    СтрокаДанныеДокументов);
			ПараметрыВосстановления.Вставить("ДокументДляВосстановления", ДокументДляВосстановления);
			
			НезавершенноеПроизводство = Ложь;
			Если Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеПрисоединения Тогда
				
				Если ЗначениеЗаполнено(СтрокаТЧ.ЭлементДанныхСледующий)
					И ЗначениеЗаполнено(СтрокаТЧ.ЭлементДанныхПредыдущий)
					И ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(СтрокаТЧ.ЭлементДанныхПредыдущий.status) = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеПроизводственнойОперации
					И ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(СтрокаТЧ.ЭлементДанныхСледующий.status) = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединенияАвтоматически Тогда
					НезавершенноеПроизводство = Истина;
				КонецЕсли;
				
			ИначеЕсли Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединенияАвтоматически Тогда
				
				НезавершенноеПроизводство = (СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Производственный);
				
			КонецЕсли;
			
			Если     Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОбъединения
				Или  Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения
				Или  Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединения
				Или (Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеПрисоединения И Не НезавершенноеПроизводство)
				Или (Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединенияАвтоматически И Не НезавершенноеПроизводство) Тогда
				
				ЗаписьИспользована = ВосстановитьДокументОбъединениеЗаписейСкладскогоЖурналаВЕТИС(
					ПараметрыВосстановления, ПараметрыОбмена, Статус);
				
				Если Не ЗаписьИспользована И ДокументДляВосстановления = Неопределено
					И ПараметрыОбмена.ЗагружатьДокументыСозданныеЧерезWeb Тогда
					
					// Запись создана в результате объединения записей.
					СформироватьДокументОбъединениеЗаписейСкладскогоЖурналаВЕТИС(
						ПараметрыВосстановления, ПараметрыОбмена, Статус);
					
				КонецЕсли;
				
				СтрокаТЧ.СинхронизированРанее = Истина;
				
			ИначеЕсли Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеПроизводственнойОперации
				Или   Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданПоСправкеОБлагополучииНаМолочнойФерме
				Или  (Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединенияАвтоматически И НезавершенноеПроизводство)
				Или  (Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Создан
					И СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Производственный) Тогда
				
				ЗаписьИспользована = ВосстановитьДокументПроизводственнаяОперацияВЕТИС(
					ПараметрыВосстановления, ПараметрыОбмена);
				
				Если Не ЗаписьИспользована И ДокументДляВосстановления = Неопределено
					И ПараметрыОбмена.ЗагружатьДокументыСозданныеЧерезWeb Тогда
					
					// Запись создана в результате производственной операции.
					СформироватьДокументПроизводственнаяОперацияВЕТИС(
						ПараметрыВосстановления, ПараметрыОбмена);
					
				КонецЕсли;
				
				СтрокаТЧ.СинхронизированРанее = Истина;
				
			ИначеЕсли Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОперацииГашения
				Или Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОперацииГашенияИмпорт Тогда
				
				Если Не СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный Тогда
					
					ОбработатьДокументВходящаяТранспортнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, ДокументДляВосстановления);
					
				КонецЕсли;
				
				СтрокаТЧ.СинхронизированРанее = Истина;
				
			ИначеЕсли Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеОперацииСписания Тогда
				
				// Исходящая транзакция может быть оформлена в вебинтерфейсе на нескольких получателей
				ОстатокДляОформленияИнвентаризации = 0;
				СтрокиКУдалениюИзТаблицы = Новый Массив;
				
				Для Каждого СтрокаДанныеДокументов Из МассивСтрокДанныеДокумента Цикл
					
					ПараметрыВосстановления.СтрокаДанныеДокументов = СтрокаДанныеДокументов;
					Если ЗначениеЗаполнено(СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент) Тогда
					
						Если СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный Тогда
							ОбработатьДокументВходящаяТранспортнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, ДокументДляВосстановления);
						Иначе
							ОбработатьДокументИсходящаяТранспортнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, ДокументДляВосстановления);
						КонецЕсли;
					
						СтрокаТЧ.СинхронизированРанее = Истина;
						СтрокиКУдалениюИзТаблицы.Добавить(СтрокаДанныеДокументов);
						
					Иначе
						ОстатокДляОформленияИнвентаризации = СтрокаДанныеДокументов.КоличествоВЕТИС;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтрокаТЧ.СинхронизированРанее И ЗначениеЗаполнено(ОстатокДляОформленияИнвентаризации) Тогда
					
					СтрокаТЧ.СинхронизированРанее = Ложь;
					СтрокаТЧ.КоличествоВЕТИС = ОстатокДляОформленияИнвентаризации;
					Для Каждого ОформленнаяСтрокаВСД Из СтрокиКУдалениюИзТаблицы Цикл
						ТаблицаДанныеДокументов.Удалить(ОформленнаяСтрокаВСД);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Сохраним для исключения повторного запроса
		ОбщиеДанные.Вставить("ТаблицаДанныеДокументов", ТаблицаДанныеДокументов);
		
	КонецЦикла;
	
	Для Каждого ОбщиеДанные Из ДанныеДляОбработки Цикл
		
		// Получим данные для формирования документов по идентификаторам.
		ТаблицаДанныеДокументов = ОбщиеДанные.ТаблицаДанныеДокументов;
		ОбщиеДанные.Удалить("ТаблицаДанныеДокументов");
		
		Для Каждого СтрокаТЧ Из ОбщиеДанные.ТаблицаЭлементов Цикл
			
			// Если объект был синхронизирован ранее, пропустим его для обработки
			// и будем использовать только для анализа.
			Если СтрокаТЧ.СинхронизированРанее Тогда
				Продолжить;
			КонецЕсли;
			
			Статус = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(СтрокаТЧ.ЭлементДанных.status);
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ); 
			МассивСтрокДанныеДокумента = ТаблицаДанныеДокументов.НайтиСтроки(СтруктураПоиска);
			
			// Количество может быть равно 0 в случае получения изменений, связанных с незавершенным производством
			// и операцией присоединения (ИзмененВРезультатеПрисоединенияАвтоматически).
			Если МассивСтрокДанныеДокумента.Количество() = 0
				И СтрокаТЧ.КоличествоВЕТИС = 0 Тогда
				Продолжить;
			ИначеЕсли МассивСтрокДанныеДокумента.Количество() = 0
				И СтрокаТЧ.КоличествоВЕТИС <> 0 Тогда
				ТекстОшибки = НСтр("ru = 'Загрузка измененных записей складского журнала ВетИС завершилась с ошибкой.
				                         |В базе данных не обнаружена запись с идентификатором %1'");
				ТекстОшибки = СтрШаблон(
					ТекстОшибки,
					СтрокаТЧ.Идентификатор);
				
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			СтрокаДанныеДокументов = МассивСтрокДанныеДокумента[0];
			
			ПараметрыВосстановления = Новый Структура;
			ПараметрыВосстановления.Вставить("ОбщиеДанные",               ОбщиеДанные);
			ПараметрыВосстановления.Вставить("КСозданиюДокументов",       КСозданиюДокументов);
			ПараметрыВосстановления.Вставить("СтрокаТаблицыЭлементов",    СтрокаТЧ);
			ПараметрыВосстановления.Вставить("СтрокаДанныеДокументов",    СтрокаДанныеДокументов);
			ПараметрыВосстановления.Вставить("ДокументДляВосстановления", ДокументДляВосстановления);
			
			Если Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Создан Тогда
				
				// Запись создана в результате инвентаризации (Операция: Добавление) или внесения бумажного документа.
				Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление;
				
				ОбработатьДокументИнвентаризацияПродукцииВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, Операция, ДокументДляВосстановления);
				
			ИначеЕсли Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Изменен Тогда
				
				// Изменение количества в 0 интерпретируем как удаление.
				Если СтрокаТЧ.ЭлементДанных.batch.volume = 0 Тогда
					Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление;
				Иначе
					Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение;
				КонецЕсли;
				
				ОбработатьДокументИнвентаризацияПродукцииВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, Операция, ДокументДляВосстановления);
				
			ИначеЕсли Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеОперацииСписания Тогда
				
				// Запись создана в результате инвентаризации
				// или при списания сырья в производственной операции.
				ЗаписьИспользована = ВосстановитьДополнитьСырьеПроизводственнаяОперацияВЕТИС(
					ПараметрыВосстановления, ПараметрыОбмена);
				
				Если Не ЗаписьИспользована Тогда
					
					// Изменение количества в 0 интерпретируем как удаление.
					Если СтрокаТЧ.ЭлементДанных.batch.volume = 0 Тогда
						Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление;
					Иначе
						Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение;
					КонецЕсли;
					
					ОбработатьДокументИнвентаризацияПродукцииВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, Операция, ДокументДляВосстановления);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗарегистрироватьСинхронизациюОбъектов(ОбщиеДанные.ТаблицаЭлементов, Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала);
		
	КонецЦикла;
	
	ИзмененныеОбъекты = Новый Массив;
	
	// Запись частично восстановленных документов.
	// Полностью восстановленные документы удаляются из очереди сразу после восстановления.
	Для Каждого КлючИЗначение Из ПараметрыОбмена.ДокументыДляВосстановления Цикл
		
		Если ПараметрыОбмена.ДокументыДляВосстановления[КлючИЗначение.Ключ] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ПараметрыОбмена.ДокументыДляВосстановления[КлючИЗначение.Ключ] Цикл
			
			Если СтрокаТЧ.ДокументОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТЧ.ДокументПолностьюВосстановлен
				Или СтрокаТЧ.ДокументЧастичноВосстановлен Тогда
				
				ПересчитатьПрикладныеРеквизитыДокумента(СтрокаТЧ.ДокументОбъект);
				
				ПровестиЗаписатьДокумент(СтрокаТЧ.ДокументОбъект);
				
				Если ИзмененныеОбъекты.Найти(СтрокаТЧ.Документ) = Неопределено Тогда
					ИзмененныеОбъекты.Добавить(СтрокаТЧ.Документ);
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.ДокументПолностьюВосстановлен Тогда
				
				Если ТипЗнч(СтрокаТЧ.ДокументОбъект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
					НовыйСтатус = Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ВСДОформлены;
				ИначеЕсли ТипЗнч(СтрокаТЧ.ДокументОбъект) = Тип("ДокументОбъект.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС") Тогда
					НовыйСтатус = Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.Выполнен;
				ИначеЕсли ТипЗнч(СтрокаТЧ.ДокументОбъект) = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
					НовыйСтатус = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ВСДОформлены;
				ИначеЕсли ТипЗнч(СтрокаТЧ.ДокументОбъект) = Тип("ДокументОбъект.ИнвентаризацияПродукцииВЕТИС") Тогда
					НовыйСтатус = Перечисления.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС.Выполнен;
				ИначеЕсли ТипЗнч(СтрокаТЧ.ДокументОбъект) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
					НовыйСтатус = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ВСДПогашены;
				КонецЕсли;
				
				ДальнейшиеДействия = Новый Массив;
				ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
					НовыйСтатус,
					ДальнейшиеДействия);
				РегистрыСведений.СтатусыДокументовВЕТИС.ЗаписатьСтатус(СтрокаТЧ.Документ, ПараметрыОбновления);
				
				ДокументыДляВосстановления = ПараметрыОбмена.ДокументыДляВосстановления[КлючИЗначение.Ключ];
				Если ДокументыДляВосстановления <> Неопределено Тогда
					
					ИнтеграцияВЕТИС.УдалитьСообщениеВиртуальнойОчереди(
						СтрокаТЧ.Документ,
						ПараметрыОбмена);
					
					ДокументыДляВосстановления.Удалить(СтрокаТЧ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Запись документов, созданных через Web.
	Для Каждого КлючИЗначение Из КСозданиюДокументов Цикл
		Для Каждого СтрокаТЧ из КСозданиюДокументов[КлючИЗначение.Ключ] Цикл
			
			Если СтрокаТЧ.ДокументОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПересчитатьПрикладныеРеквизитыДокумента(СтрокаТЧ.ДокументОбъект);
			
			ПровестиЗаписатьДокумент(СтрокаТЧ.ДокументОбъект);
			
			Если ТипЗнч(СтрокаТЧ.ДокументОбъект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
				НовыйСтатус = Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ВСДОформленыЧерезWeb;
			ИначеЕсли ТипЗнч(СтрокаТЧ.ДокументОбъект) = Тип("ДокументОбъект.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС") Тогда
				НовыйСтатус = Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.ВыполненЧерезWeb;
			ИначеЕсли ТипЗнч(СтрокаТЧ.ДокументОбъект) = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
				НовыйСтатус = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ВСДОформленыЧерезWeb;
			ИначеЕсли ТипЗнч(СтрокаТЧ.ДокументОбъект) = Тип("ДокументОбъект.ИнвентаризацияПродукцииВЕТИС") Тогда
				НовыйСтатус = Перечисления.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС.ВыполненЧерезWeb;
			ИначеЕсли ТипЗнч(СтрокаТЧ.ДокументОбъект) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
				НовыйСтатус = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ВСДПогашеныЧерезWeb;
			КонецЕсли;
			
			ДальнейшиеДействия = Новый Массив;
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
				НовыйСтатус,
				ДальнейшиеДействия);
			
			РегистрыСведений.СтатусыДокументовВЕТИС.ЗаписатьСтатус(СтрокаТЧ.ДокументОбъект.Ссылка, ПараметрыОбновления);
			
			Если ИзмененныеОбъекты.Найти(СтрокаТЧ.ДокументОбъект.Ссылка) = Неопределено Тогда
				ИзмененныеОбъекты.Добавить(СтрокаТЧ.ДокументОбъект.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИзмененныеОбъекты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РегламентныеЗадания

// Процедура запуска регламентного задания ОбменДаннымиВЕТИС.
//
Процедура ОбменДаннымиРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхВЕТИС);
	
	ПараметрыОбмена = ИнтеграцияВЕТИС.ПараметрыОбмена(Неопределено, Неопределено, Истина);
	
	ИнтеграцияВЕТИС.ПостроитьОчередьСообщений(ПараметрыОбмена);
	
	ИнтеграцияВЕТИСВызовСервера.ВыполнитьОбменУниверсально(ПараметрыОбмена);
	
	ИнтеграцияВЕТИСВызовСервера.ВыполнитьСинхронизациюКлассификаторов(Неопределено, ПараметрыОбмена);
	
КонецПроцедуры

#КонецОбласти

// Позволяет определить есть ли в табличной части документа строки с одинаковыми
// значениями заданных реквизитов (всех одновременно).
// При нахождении дублей формирует сообщения пользователю.
//
// Параметры
//  Объект            - Объект ссылочного типа
//  ИмяТабличнойЧасти - Имя табличной части, в которой нужно искать дубли
//  ПоляПроверки      - Структура с перечнем реквизитов, по которым нужно искать дубли.
//                      Ключ структуры - имя реквизита, значение - признак необходимости
//                      поиска дублей в том числе по пустым значениям. Истина - искать
//                      дубли по пустым значениям реквизита, любое другое значение - 
//                      игнорировать строки, в которых реквизит не заполнен
//  Отказ             - Признак отказа от дальнейшей обработки. В случае нахождения дублей
//                      выставляется в Истина.
//
// Возвращаемое значение:
//   Булево - Истина - ошибок (дублей) не обнаружено, Ложь - в противном случае.
//
Функция ПроверитьОтсутствиеДублейВТабличнойЧасти(Объект, ИмяТабличнойЧасти, ПоляПроверки, Отказ) Экспорт
	
	СтруктураОтбора = Новый Структура;
	
	ПоляПроверкиСтрокой = "";
	Для Каждого КлючИЗначение Из ПоляПроверки Цикл
		ПоляПроверкиСтрокой = ПоляПроверкиСтрокой + ", " + КлючИЗначение.Ключ;
		СтруктураОтбора.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ПоляПроверкиСтрокой = Сред(ПоляПроверкиСтрокой, 3);
	
	НаборыЗначений = Объект[ИмяТабличнойЧасти].Выгрузить(, ПоляПроверкиСтрокой);
	НаборыЗначений.Колонки.Добавить("__КоличествоВхождений", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	НаборыЗначений.ЗаполнитьЗначения(1, "__КоличествоВхождений");
	НаборыЗначений.Свернуть(ПоляПроверкиСтрокой, "__КоличествоВхождений");
	
	НайденыДубли = Ложь;
	
	Если ПоляПроверки.Количество() > 1 Тогда
		ШаблонСообщенияОбОшибке = НСтр("ru = 'Значения %1 повторяются в строках %2.'");
	Иначе
		ШаблонСообщенияОбОшибке = НСтр("ru = 'Значение %1 повторяется в строках %2.'");
	КонецЕсли;
	ТекстСообщения = "";
	
	Если НаборыЗначений.Количество() <> Объект[ИмяТабличнойЧасти].Количество() Тогда
		// Есть дубли
		Для Каждого НаборЗначений Из НаборыЗначений Цикл
			Если НаборЗначений.__КоличествоВхождений = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначенияСтрокой = "";
			
			ПропуститьНаборЗначений = Ложь;
			Для Каждого КлючИЗначение Из ПоляПроверки Цикл
				Если КлючИЗначение.Значение <> Истина Тогда
					Если НЕ ЗначениеЗаполнено(НаборЗначений[КлючИЗначение.Ключ]) Тогда
						ПропуститьНаборЗначений = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				ЗначенияСтрокой = ЗначенияСтрокой + ", """ + НаборЗначений[КлючИЗначение.Ключ] + """";
			КонецЦикла;
			Если ПропуститьНаборЗначений Тогда
				Продолжить;
			КонецЕсли;
			
			НайденыДубли = Истина;
			
			ЗначенияСтрокой = Сред(ЗначенияСтрокой, 3);
			
			НомераСтрок = "";
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, НаборЗначений);
			СтрокиДубли = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДубль Из СтрокиДубли Цикл
				НомераСтрок = НомераСтрок + ", " + Формат(СтрокаДубль.НомерСтроки, "ЧГ=");
			КонецЦикла;
			НомераСтрок = Сред(НомераСтрок, 3);
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщенияОбОшибке, ЗначенияСтрокой, НомераСтрок);
		КонецЦикла;
	КонецЕсли;
	
	Если НайденыДубли Тогда
		ПредставленияРеквизитов = "";
		МетаданныеТабличнойЧасти = Объект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти];
		Для Каждого КлючИЗначение Из ПоляПроверки Цикл
			ПредставленияРеквизитов = ПредставленияРеквизитов + ", """
				+ МетаданныеТабличнойЧасти.Реквизиты[КлючИЗначение.Ключ].Представление() + """";
		КонецЦикла;
		ПредставленияРеквизитов = Сред(ПредставленияРеквизитов, 3);
		
		Если ПоляПроверки.Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru = 'Значения в колонках %1 не должны повторяться.'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'Значения в колонке %1 не должны повторяться.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПредставленияРеквизитов)
			+ ТекстСообщения;
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("СПИСОК", "КОРРЕКТНОСТЬ", , ,
			МетаданныеТабличнойЧасти.Представление(), ТекстСообщения);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ИмяТабличнойЧасти);
		
		Отказ = Истина;
	КонецЕсли;
	
	Возврат НЕ НайденыДубли;
	
КонецФункции // ПроверитьОтсутствиеДублейВТабличнойЧасти()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеДокументов

//Сопоставляет измененные в указанную дату ВСД и записи журнала для создания транспортных и производственных 
//   операций ВетИС при получении данных сформированных в web от сервиса.
//Ограничение: предполагается, что каждой ВСД может соответствовать не более одной измененной записи журнала
//Если есть зарегистрированная в указанный период ВСД без соответствующего количества - она будет перераспределена на 
//   первую подходящую измененную запись складского журнала без ВСД.
//
Функция ПолучитьДанныеДляФормированияДокументов(ОбщиеДанные)
	
	ПереченьКолонок = "Идентификатор, ИдентификаторВерсии, ИдентификаторВСД, ИдентификаторЕдиницыИзмерения, КоличествоВЕТИС, Статус";
	Таблица = ОбщиеДанные.ТаблицаЭлементов.Скопировать(Новый Структура("СинхронизированРанее",Ложь),ПереченьКолонок);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаИзменения", ОбщиеДанные.Дата);
	Запрос.УстановитьПараметр("Таблица",       Таблица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Идентификатор                 КАК Идентификатор,
	|	Т.ИдентификаторВерсии           КАК ИдентификаторВерсии,
	|	Т.ИдентификаторВСД              КАК ИдентификаторВСД,
	|	Т.ИдентификаторЕдиницыИзмерения КАК ИдентификаторЕдиницыИзмерения,
	|	Т.КоличествоВЕТИС               КАК КоличествоВЕТИС,
	|	Т.Статус                        КАК Статус
	|ПОМЕСТИТЬ ВтТаблицаИдентификаторов
	|ИЗ
	|	&Таблица КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка                               КАК Ссылка,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Продукция                            КАК Продукция,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СкоропортящаясяПродукция             КАК СкоропортящаясяПродукция,
	|	ВетеринарноСопроводительныйДокументВЕТИС.НизкокачественнаяПродукция           КАК НизкокачественнаяПродукция,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваНачалоПериода        КАК ДатаПроизводстваНачалоПериода,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваКонецПериода         КАК ДатаПроизводстваКонецПериода,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СрокГодностиНачалоПериода            КАК СрокГодностиНачалоПериода,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СрокГодностиКонецПериода             КАК СрокГодностиКонецПериода,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительПредприятие          КАК Предприятие,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧастьИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВетеринарныхДокументовВЕТИС.Аннулирован) ТОГДА
	|			-1
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ * ВетеринарноСопроводительныйДокументВЕТИС.КоличествоВЕТИС КАК КоличествоВЕТИС,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ЕдиницаИзмеренияВЕТИС.Идентификатор  КАК ИдентификаторЕдиницыИзмерения,
	|	ТабличнаяЧастьИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВетеринарныхДокументовВЕТИС.Оформлен) КАК Оформлен
	|ПОМЕСТИТЬ втВСД
	|ИЗ
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ИсторияСтатусов КАК ТабличнаяЧастьИсторияСтатусов
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
	|		ПО ВетеринарноСопроводительныйДокументВЕТИС.Ссылка = ТабличнаяЧастьИсторияСтатусов.Ссылка
	|ГДЕ
	|	ТабличнаяЧастьИсторияСтатусов.ДатаИзменения = &ДатаИзменения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Продукция,
	|	СкоропортящаясяПродукция,
	|	НизкокачественнаяПродукция,
	|	ДатаПроизводстваНачалоПериода,
	|	ДатаПроизводстваКонецПериода,
	|	СрокГодностиНачалоПериода,
	|	СрокГодностиКонецПериода,
	|	ХозяйствующийСубъект,
	|	Предприятие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВСД.КоличествоВЕТИС,
	|	втВСД.Ссылка КАК ВетеринарноСопроводительныйДокументВЕТИС,
	|	МАКСИМУМ(ЗаписиСкладскогоЖурналаВЕТИС.Ссылка) КАК ЗаписьСкладскогоЖурналаВЕТИС
	|ПОМЕСТИТЬ втЗаписиВСДТочноеСоответствие
	|ИЗ
	|	ВтТаблицаИдентификаторов КАК ВтТаблицаИдентификаторов
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|		ПО ВтТаблицаИдентификаторов.Идентификатор = ЗаписиСкладскогоЖурналаВЕТИС.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВСД КАК втВСД
	|		ПО ЗаписиСкладскогоЖурналаВЕТИС.Продукция = втВСД.Продукция
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.СкоропортящаясяПродукция = втВСД.СкоропортящаясяПродукция
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.НизкокачественнаяПродукция = втВСД.НизкокачественнаяПродукция
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваНачалоПериода = втВСД.ДатаПроизводстваНачалоПериода
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваКонецПериода = втВСД.ДатаПроизводстваКонецПериода
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиНачалоПериода = втВСД.СрокГодностиНачалоПериода
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиКонецПериода = втВСД.СрокГодностиКонецПериода
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.ХозяйствующийСубъект = втВСД.ХозяйствующийСубъект
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.Предприятие = втВСД.Предприятие
	|		 И ВтТаблицаИдентификаторов.ИдентификаторЕдиницыИзмерения = втВСД.ИдентификаторЕдиницыИзмерения
	|		 И ВтТаблицаИдентификаторов.КоличествоВЕТИС = втВСД.КоличествоВЕТИС
	|		 И ВЫБОР
	|				КОГДА ВтТаблицаИдентификаторов.Статус = 202 И ВтТаблицаИдентификаторов.КоличествоВЕТИС > 0 ТОГДА
	|					втВСД.Оформлен
	|				ИНАЧЕ
	|					ИСТИНА
	|			КОНЕЦ
	|ГДЕ
	|	ВтТаблицаИдентификаторов.ИдентификаторВСД = """"
	|СГРУППИРОВАТЬ ПО
	|	втВСД.КоличествоВЕТИС,
	|	втВСД.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ВетеринарноСопроводительныйДокументВЕТИС,
	|	ЗаписьСкладскогоЖурналаВЕТИС
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаписиВСДТочноеСоответствие.КоличествоВЕТИС,
	|	втЗаписиВСДТочноеСоответствие.ВетеринарноСопроводительныйДокументВЕТИС,
	|	втЗаписиВСДТочноеСоответствие.ЗаписьСкладскогоЖурналаВЕТИС
	|ПОМЕСТИТЬ втЗаписиВСД
	|ИЗ
	|	втЗаписиВСДТочноеСоответствие КАК втЗаписиВСДТочноеСоответствие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВтТаблицаИдентификаторов.КоличествоВЕТИС >= 0 ТОГДА
	|			1
	|		ИНАЧЕ
	|			-1
	|	КОНЕЦ * втВСД.КоличествоВЕТИС,
	|	втВСД.Ссылка КАК ВетеринарноСопроводительныйДокументВЕТИС,
	|	МАКСИМУМ(ЗаписиСкладскогоЖурналаВЕТИС.Ссылка) КАК ЗаписьСкладскогоЖурналаВЕТИС
	|ИЗ
	|	ВтТаблицаИдентификаторов КАК ВтТаблицаИдентификаторов
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|		ПО ВтТаблицаИдентификаторов.Идентификатор = ЗаписиСкладскогоЖурналаВЕТИС.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВСД КАК втВСД
	|		ПО ЗаписиСкладскогоЖурналаВЕТИС.Продукция = втВСД.Продукция
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.СкоропортящаясяПродукция = втВСД.СкоропортящаясяПродукция
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.НизкокачественнаяПродукция = втВСД.НизкокачественнаяПродукция
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваНачалоПериода = втВСД.ДатаПроизводстваНачалоПериода
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваКонецПериода = втВСД.ДатаПроизводстваКонецПериода
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиНачалоПериода = втВСД.СрокГодностиНачалоПериода
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиКонецПериода = втВСД.СрокГодностиКонецПериода
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.ХозяйствующийСубъект = втВСД.ХозяйствующийСубъект
	|		 И ЗаписиСкладскогоЖурналаВЕТИС.Предприятие = втВСД.Предприятие
	|		 И ВтТаблицаИдентификаторов.ИдентификаторЕдиницыИзмерения = втВСД.ИдентификаторЕдиницыИзмерения
	|		 И ВЫБОР
	|				КОГДА ВтТаблицаИдентификаторов.Статус = 202 ТОГДА
	|					втВСД.Оформлен
	|				ИНАЧЕ
	|					ИСТИНА
	|			КОНЕЦ
	|ГДЕ
	|	ВтТаблицаИдентификаторов.ИдентификаторВСД = """"
	|	И НЕ втВСД.Ссылка В (ВЫБРАТЬ Т.ВетеринарноСопроводительныйДокументВЕТИС ИЗ втЗаписиВСДТочноеСоответствие КАК Т)
	|	И НЕ ЗаписиСкладскогоЖурналаВЕТИС.Ссылка В (ВЫБРАТЬ Т.ЗаписьСкладскогоЖурналаВЕТИС ИЗ втЗаписиВСДТочноеСоответствие КАК Т)
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВтТаблицаИдентификаторов.КоличествоВЕТИС >= 0 ТОГДА
	|			1
	|		ИНАЧЕ
	|			-1
	|	КОНЕЦ * втВСД.КоличествоВЕТИС,
	|	втВСД.Ссылка
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаписьСкладскогоЖурналаВЕТИС
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаписиВСД.ЗаписьСкладскогоЖурналаВЕТИС,
	|	СУММА(втЗаписиВСД.КоличествоВЕТИС)
	|ПОМЕСТИТЬ ИспользованоНаВСД
	|ИЗ
	|	втЗаписиВСД КАК втЗаписиВСД
	|СГРУППИРОВАТЬ ПО
	|	втЗаписиВСД.ЗаписьСкладскогоЖурналаВЕТИС
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаписьСкладскогоЖурналаВЕТИС
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТаблицаИдентификаторов.Идентификатор                 КАК Идентификатор,
	|	ВтТаблицаИдентификаторов.ИдентификаторВерсии           КАК ИдентификаторВерсии,
	|	ВтТаблицаИдентификаторов.ИдентификаторВСД              КАК ИдентификаторВСД,
	|	ВтТаблицаИдентификаторов.ИдентификаторЕдиницыИзмерения КАК ИдентификаторЕдиницыИзмерения,
	|	ВтТаблицаИдентификаторов.КоличествоВЕТИС - ЕСТЬNULL(ИспользованоНаВСД.КоличествоВЕТИС,0) КАК КоличествоВЕТИС,
	|	ЗаписиСкладскогоЖурналаВЕТИС.Ссылка                    КАК ЗаписьСкладскогоЖурнала,
	|	ЗаписиСкладскогоЖурналаВЕТИС.Продукция                 КАК Продукция,
	|	ЗНАЧЕНИЕ(Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка) КАК ВетеринарноСопроводительныйДокументВЕТИС
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	ВтТаблицаИдентификаторов КАК ВтТаблицаИдентификаторов
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|		ПО ВтТаблицаИдентификаторов.Идентификатор = ЗаписиСкладскогоЖурналаВЕТИС.Идентификатор
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользованоНаВСД КАК ИспользованоНаВСД
	|		ПО ИспользованоНаВСД.ЗаписьСкладскогоЖурналаВЕТИС = ЗаписиСкладскогоЖурналаВЕТИС.Ссылка
	|		
	|ГДЕ
	|	ВтТаблицаИдентификаторов.ИдентификаторВСД = """"
	|	И ВтТаблицаИдентификаторов.КоличествоВЕТИС <> ЕСТЬNULL(ИспользованоНаВСД.КоличествоВЕТИС,0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТаблицаИдентификаторов.Идентификатор,
	|	ВтТаблицаИдентификаторов.ИдентификаторВерсии,
	|	ВтТаблицаИдентификаторов.ИдентификаторВСД,
	|	ВтТаблицаИдентификаторов.ИдентификаторЕдиницыИзмерения,
	|	втЗаписиВСД.КоличествоВЕТИС,
	|	ЗаписиСкладскогоЖурналаВЕТИС.Ссылка,
	|	ЗаписиСкладскогоЖурналаВЕТИС.Продукция,
	|	втЗаписиВСД.ВетеринарноСопроводительныйДокументВЕТИС
	|ИЗ
	|	ВтТаблицаИдентификаторов КАК ВтТаблицаИдентификаторов
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|		ПО ВтТаблицаИдентификаторов.Идентификатор = ЗаписиСкладскогоЖурналаВЕТИС.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗаписиВСД КАК втЗаписиВСД
	|		ПО втЗаписиВСД.ЗаписьСкладскогоЖурналаВЕТИС = ЗаписиСкладскогоЖурналаВЕТИС.Ссылка
	|		
	|ГДЕ
	|	ВтТаблицаИдентификаторов.ИдентификаторВСД = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТаблицаИдентификаторов.Идентификатор,
	|	ВтТаблицаИдентификаторов.ИдентификаторВерсии,
	|	ВтТаблицаИдентификаторов.ИдентификаторВСД,
	|	ВтТаблицаИдентификаторов.ИдентификаторЕдиницыИзмерения,
	|	ВтТаблицаИдентификаторов.КоличествоВЕТИС,
	|	ЗаписиСкладскогоЖурналаВЕТИС.Ссылка,
	|	ЗаписиСкладскогоЖурналаВЕТИС.Продукция,
	|	ЕСТЬNULL(ВетеринарноСопроводительныйДокументВЕТИС.Ссылка, ЗНАЧЕНИЕ(Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка))
	|ИЗ
	|	ВтТаблицаИдентификаторов КАК ВтТаблицаИдентификаторов
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|		ПО ВтТаблицаИдентификаторов.Идентификатор = ЗаписиСкладскогоЖурналаВЕТИС.Идентификатор
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
	|		ПО ВтТаблицаИдентификаторов.ИдентификаторВСД = ВетеринарноСопроводительныйДокументВЕТИС.Идентификатор
	|		И ВетеринарноСопроводительныйДокументВЕТИС.Идентификатор <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЗаписиВСДТочноеСоответствие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЗаписиВСД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИспользованоНаВСД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтВСД
	|";
	
	ДополнитьЗапросСопоставлениемТоваров(Запрос);
	
	Запрос.Текст = Запрос.Текст +
	"
	|
	|;
	|ВЫБРАТЬ
	|	втТовары.Идентификатор КАК Идентификатор,
	|	втТовары.ИдентификаторВерсии КАК ИдентификаторВерсии,
	|	втТовары.ИдентификаторВСД КАК ИдентификаторВСД,
	|	втТовары.ИдентификаторЕдиницыИзмерения КАК ИдентификаторЕдиницыИзмерения,
	|	втТовары.КоличествоВЕТИС КАК КоличествоВЕТИС,
	|	втТовары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	втТовары.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокумент,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ПеревозчикХозяйствующийСубъект КАК ПеревозчикХозяйствующийСубъект,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.СпособХранения КАК СпособХранения,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ДатаТТН КАК ДатаТТН,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.НомерТТН КАК НомерТТН,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.СерияТТН КАК СерияТТН,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ТипТТН КАК ТипТТН,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ГрузоотправительХозяйствующийСубъект КАК ГрузоотправительХозяйствующийСубъект,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ГрузоотправительПредприятие КАК ГрузоотправительПредприятие,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ГрузополучательХозяйствующийСубъект КАК ГрузополучательХозяйствующийСубъект,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ГрузополучательПредприятие КАК ГрузополучательПредприятие,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.Тип КАК ТипВСД,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ЭкспертизаРезультат КАК ЭкспертизаРезультат,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.БлагополучиеМестности КАК БлагополучиеМестности,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.Цель КАК Цель,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.Статус КАК Статус,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ТипПроисхождения КАК ТипПроисхождения,
	|	втНоменклатураСопоставленная.Номенклатура КАК Номенклатура,
	|	втНоменклатураСопоставленная.Характеристика КАК Характеристика,
	|	втНоменклатураСопоставленная.Серия КАК Серия,
	|	втТовары.Продукция КАК Продукция,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СтранаПроизводства КАК СтранаПроизводства,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция,
	|	ЗаписиСкладскогоЖурналаВЕТИС.НизкокачественнаяПродукция КАК НизкокачественнаяПродукция,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваСтрока КАК ДатаПроизводстваСтрока,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваТочностьЗаполнения КАК ДатаПроизводстваТочностьЗаполнения,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваНачалоПериода КАК ДатаПроизводстваНачалоПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваКонецПериода КАК ДатаПроизводстваКонецПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиСтрока КАК СрокГодностиСтрока,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиТочностьЗаполнения КАК СрокГодностиТочностьЗаполнения,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиНачалоПериода КАК СрокГодностиНачалоПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиКонецПериода КАК СрокГодностиКонецПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.УпаковкиВЕТИС.(
	|		ИдентификаторСтроки     КАК ИдентификаторСтроки,
	|		УровеньУпаковки         КАК УровеньУпаковки,
	|		УпаковкаВЕТИС           КАК УпаковкаВЕТИС,
	|		КоличествоУпаковокВЕТИС КАК КоличествоУпаковокВЕТИС
	|	) КАК УпаковкиВЕТИС,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ШтрихкодыУпаковок.(
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		Штрихкод            КАК Штрихкод,
	|		ТипМаркировки       КАК ТипМаркировки
	|	) КАК ШтрихкодыУпаковок,
	|	ЗаписиСкладскогоЖурналаВЕТИС.Производители.(
	|		Производитель   КАК Производитель,
	|		РольПредприятия КАК РольПредприятия
	|	) КАК Производители,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ПроизводственныеПартии.(
	|		ИдентификаторПартии КАК ИдентификаторПартии
	|	) КАК ПроизводственныеПартии
	|ИЗ
	|	втТовары КАК втТовары
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = ЗаписиСкладскогоЖурналаВЕТИС.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныеДокументыВЕТИС
	|		ПО втТовары.ВетеринарноСопроводительныйДокументВЕТИС = ВетеринарноСопроводительныеДокументыВЕТИС.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураСопоставленная КАК втНоменклатураСопоставленная
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = втНоменклатураСопоставленная.ЗаписьСкладскогоЖурнала
	|		
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втТовары.Идентификатор,
	|	втТовары.ИдентификаторВерсии,
	|	втТовары.ИдентификаторВСД,
	|	втТовары.ИдентификаторЕдиницыИзмерения,
	|	втТовары.КоличествоВЕТИС,
	|	втТовары.ЗаписьСкладскогоЖурнала,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	втНоменклатураСопоставленная.Номенклатура,
	|	втНоменклатураСопоставленная.Характеристика,
	|	втНоменклатураСопоставленная.Серия,
	|	втТовары.Продукция,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СтранаПроизводства,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СкоропортящаясяПродукция,
	|	ЗаписиСкладскогоЖурналаВЕТИС.НизкокачественнаяПродукция,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваСтрока,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваТочностьЗаполнения,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваНачалоПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваКонецПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиСтрока,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиТочностьЗаполнения,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиНачалоПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиКонецПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.УпаковкиВЕТИС.(
	|		ИдентификаторСтроки,
	|		УровеньУпаковки,
	|		УпаковкаВЕТИС,
	|		КоличествоУпаковокВЕТИС
	|	),
	|	ЗаписиСкладскогоЖурналаВЕТИС.ШтрихкодыУпаковок.(
	|		ИдентификаторСтроки,
	|		Штрихкод,
	|		ТипМаркировки
	|	),
	|	ЗаписиСкладскогоЖурналаВЕТИС.Производители.(
	|		Производитель   КАК Производитель,
	|		РольПредприятия КАК РольПредприятия
	|	),
	|	ЗаписиСкладскогоЖурналаВЕТИС.ПроизводственныеПартии.(
	|		ИдентификаторПартии
	|	)
	|ИЗ
	|	втТовары КАК втТовары
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = ЗаписиСкладскогоЖурналаВЕТИС.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураСопоставленная КАК втНоменклатураСопоставленная
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = втНоменклатураСопоставленная.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	втТовары.ВетеринарноСопроводительныйДокументВЕТИС = ЗНАЧЕНИЕ(Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Добавляет в запрос формирование временной таблицы "втНоменклатураСопоставленная".
//
// Параметры:
//  Запрос - формируемый запрос, в котором ранее определяется таблица "втТовары",
//    для которой будут сопоставлены товары (должна содержать колонки "ЗаписьСкладскогоЖурнала", "Продукция")
//
Процедура ДополнитьЗапросСопоставлениемТоваров(Запрос)
	
	Запрос.УстановитьПараметр("ПустаяСерия", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатурыВЕТИС"));
	Запрос.Текст = Запрос.Текст + 
	"
	|
	|;
	|ВЫБРАТЬ
	|	втТовары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	МАКСИМУМ(СоответствиеНоменклатурыВЕТИС.Номенклатура) КАК Номенклатура,
	|	МАКСИМУМ(СоответствиеНоменклатурыВЕТИС.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(СоответствиеНоменклатурыВЕТИС.Серия) КАК Серия
	|ПОМЕСТИТЬ втНоменклатураСопоставленнаяПоЗаписи
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = СоответствиеНоменклатурыВЕТИС.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	втТовары.ЗаписьСкладскогоЖурнала <>ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	втТовары.ЗаписьСкладскогоЖурнала
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатурыВЕТИС.Номенклатура) = 1
	|	И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатурыВЕТИС.Характеристика) < 2
	|	И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатурыВЕТИС.Серия) < 2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаписьСкладскогоЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТовары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыВЕТИС.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыВЕТИС.Серия КАК Серия
	|ПОМЕСТИТЬ втНоменклатураСопоставленнаяПоПродукции
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО втТовары.Продукция = СоответствиеНоменклатурыВЕТИС.Продукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураСопоставленнаяПоЗаписи КАК втНоменклатураСопоставленнаяПоЗаписи
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = втНоменклатураСопоставленнаяПоЗаписи.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	втНоменклатураСопоставленнаяПоЗаписи.ЗаписьСкладскогоЖурнала ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаписьСкладскогоЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураСопоставленнаяПоПродукции.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНоменклатураСопоставленнаяПоПродукции.Номенклатура) КАК НоменклатураКоличество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНоменклатураСопоставленнаяПоПродукции.Характеристика) КАК ХарактеристикаКоличество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНоменклатураСопоставленнаяПоПродукции.Серия) КАК СерияКоличество
	|ПОМЕСТИТЬ втНоменклатураСопоставленнаяПоПродукцииКоличество
	|ИЗ
	|	втНоменклатураСопоставленнаяПоПродукции КАК втНоменклатураСопоставленнаяПоПродукции
	|
	|СГРУППИРОВАТЬ ПО
	|	втНоменклатураСопоставленнаяПоПродукции.ЗаписьСкладскогоЖурнала
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаписьСкладскогоЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураСопоставленнаяПоЗаписи.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	втНоменклатураСопоставленнаяПоЗаписи.Номенклатура КАК Номенклатура,
	|	втНоменклатураСопоставленнаяПоЗаписи.Характеристика КАК Характеристика,
	|	втНоменклатураСопоставленнаяПоЗаписи.Серия КАК Серия
	|ПОМЕСТИТЬ втНоменклатураСопоставленная
	|ИЗ
	|	втНоменклатураСопоставленнаяПоЗаписи КАК втНоменклатураСопоставленнаяПоЗаписи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втНоменклатураСопоставленнаяПоПродукции.ЗаписьСкладскогоЖурнала,
	|	втНоменклатураСопоставленнаяПоПродукции.Номенклатура,
	|	втНоменклатураСопоставленнаяПоПродукции.Характеристика,
	|	ВЫБОР
	|		КОГДА втНоменклатураСопоставленнаяПоПродукцииКоличество.СерияКоличество < 2
	|			ТОГДА втНоменклатураСопоставленнаяПоПродукции.Серия
	|		ИНАЧЕ &ПустаяСерия
	|	КОНЕЦ
	|ИЗ
	|	втНоменклатураСопоставленнаяПоПродукции КАК втНоменклатураСопоставленнаяПоПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатураСопоставленнаяПоПродукцииКоличество КАК втНоменклатураСопоставленнаяПоПродукцииКоличество
	|		ПО втНоменклатураСопоставленнаяПоПродукции.ЗаписьСкладскогоЖурнала = втНоменклатураСопоставленнаяПоПродукцииКоличество.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	втНоменклатураСопоставленнаяПоПродукцииКоличество.НоменклатураКоличество = 1
	|	И втНоменклатураСопоставленнаяПоПродукцииКоличество.ХарактеристикаКоличество < 2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаписьСкладскогоЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНоменклатураСопоставленнаяПоЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНоменклатураСопоставленнаяПоПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНоменклатураСопоставленнаяПоПродукцииКоличество";
	
КонецПроцедуры

#Область ИнвентаризацияПродукцииВЕТИС

Процедура ОбработатьДокументИнвентаризацияПродукцииВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, Операция, ДокументДляВосстановления)
	
	ЗаписьИспользована = ВосстановитьДокументИнвентаризацияПродукцииВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, Операция);
	
	Если Не ЗаписьИспользована И ДокументДляВосстановления = Неопределено
		И ПараметрыОбмена.ЗагружатьДокументыСозданныеЧерезWeb Тогда
		СформироватьДокументИнвентаризацияПродукцииВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, Операция);
	КонецЕсли;
	
КонецПроцедуры

Функция ВосстановитьДокументИнвентаризацияПродукцииВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, Операция)
	
	ОбщиеДанные            = ПараметрыВосстановления.ОбщиеДанные;
	СтрокаТаблицыЭлементов = ПараметрыВосстановления.СтрокаТаблицыЭлементов;
	СтрокаДанныеДокументов = ПараметрыВосстановления.СтрокаДанныеДокументов;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДокументПолностьюВосстановлен", Ложь);
	Если ПараметрыВосстановления.ДокументДляВосстановления = Неопределено Тогда
		Отбор.Вставить("ХозяйствующийСубъект", ОбщиеДанные.ХозяйствующийСубъект);
		Отбор.Вставить("Предприятие",          ОбщиеДанные.Предприятие);
	Иначе
		Отбор.Вставить("Документ", ПараметрыВосстановления.ДокументДляВосстановления);
	КонецЕсли;
	
	// Подбор документа при ошибках сервиса.
	ЗаписьИспользованаВОперацииВосстановления = Ложь;
	ДанныеДокументовДляВосстановления = ДокументДляВосстановления(
		ОбщиеДанные.Дата,
		Отбор,
		ПараметрыОбмена,
		"ИнвентаризацияПродукцииВЕТИС");
	
	Если ДанныеДокументовДляВосстановления <> Неопределено Тогда
		
		Для Каждого ДанныеДокументаДляВосстановления Из ДанныеДокументовДляВосстановления Цикл
			
			Если ДанныеДокументаДляВосстановления.ДокументОбъект = Неопределено Тогда
				ДанныеДокументаДляВосстановления.ДокументОбъект = ДанныеДокументаДляВосстановления.Документ.ПолучитьОбъект();
			КонецЕсли;
			
			ДокументОбъект = ДанныеДокументаДляВосстановления.ДокументОбъект;
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			Отбор = Новый Структура;
			Отбор.Вставить("Операция",                 Операция);
			Отбор.Вставить("Продукция",                СтрокаДанныеДокументов.Продукция);
			Отбор.Вставить("КоличествоИзменениеВЕТИС", СтрокаДанныеДокументов.КоличествоВЕТИС);
			Отбор.Вставить("ЕдиницаИзмеренияВЕТИС",    ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена));
			
			Если ЗначениеЗаполнено(СтрокаДанныеДокументов.ДатаПроизводстваСтрока)
				Или ЗначениеЗаполнено(СтрокаДанныеДокументов.ДатаПроизводстваНачалоПериода)
				Или ЗначениеЗаполнено(СтрокаДанныеДокументов.ДатаПроизводстваКонецПериода) Тогда
				
				Отбор.Вставить("ДатаПроизводстваСтрока",             СтрокаДанныеДокументов.ДатаПроизводстваСтрока);
				Отбор.Вставить("ДатаПроизводстваТочностьЗаполнения", СтрокаДанныеДокументов.СрокГодностиТочностьЗаполнения);
				Отбор.Вставить("ДатаПроизводстваНачалоПериода",      СтрокаДанныеДокументов.ДатаПроизводстваНачалоПериода);
				Отбор.Вставить("ДатаПроизводстваКонецПериода",       СтрокаДанныеДокументов.ДатаПроизводстваКонецПериода);
				
			КонецЕсли;
			
			Если Не ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(СтрокаДанныеДокументов.Продукция) Тогда
				
				Если ЗначениеЗаполнено(СтрокаДанныеДокументов.СрокГодностиСтрока)
					Или ЗначениеЗаполнено(СтрокаДанныеДокументов.СрокГодностиНачалоПериода)
					Или ЗначениеЗаполнено(СтрокаДанныеДокументов.СрокГодностиКонецПериода) Тогда
					
					Отбор.Вставить("СрокГодностиСтрока",             СтрокаДанныеДокументов.СрокГодностиСтрока);
					Отбор.Вставить("СрокГодностиТочностьЗаполнения", СтрокаДанныеДокументов.СрокГодностиТочностьЗаполнения);
					Отбор.Вставить("СрокГодностиНачалоПериода",      СтрокаДанныеДокументов.СрокГодностиНачалоПериода);
					Отбор.Вставить("СрокГодностиКонецПериода",       СтрокаДанныеДокументов.СрокГодностиКонецПериода);
					
					Отбор.Вставить("СкоропортящаясяПродукция", СтрокаДанныеДокументов.СкоропортящаясяПродукция);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Отбор.Вставить("СтранаПроизводства", СтрокаДанныеДокументов.СтранаПроизводства);
			
			Если Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление Тогда
				
				Отбор.Вставить("ЗаписьСкладскогоЖурнала", Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
				
				НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					ТоварыСтрокаТЧ = НайденныеСтроки[0];
					ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала = СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала;
					
					ЗаписьИспользованаВОперацииВосстановления = Истина;
					
				КонецЕсли;
				
			ИначеЕсли (Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение
				Или Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление)
				И ЗначениеЗаполнено(СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий) Тогда
				
				Отбор.Вставить("ЗаписьСкладскогоЖурнала",      СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала);
				Отбор.Вставить("ЗаписьСкладскогоЖурналаАрхив", Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
				
				НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					ТоварыСтрокаТЧ = НайденныеСтроки[0];
					
					// Попробуем найти архивную запись по идентификатору версии
					// и актуальной записи.
					АрхивнаяЗапись = ИнтеграцияВЕТИС.АрхивнаяЗаписьСкладскогоЖурнала(
						ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала,
						СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.uuid);
					
					ДополнительныеПараметры = ИнтеграцияВЕТИС.ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала();
					ДополнительныеПараметры.РегистрироватьСинхронизацию       = Ложь;
					ДополнительныеПараметры.АктуальнаяЗаписьСкладскогоЖурнала = ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала;
					ДополнительныеПараметры.ПроверятьАктуальностьЗаписи       = Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала);
					
					ДанныеЗаписиСкладскогоЖурналаАрхив = ИнтеграцияВЕТИС.ЗагрузитьЗаписьСкладскогоЖурнала(
						СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий,
						АрхивнаяЗапись,
						ОбщиеДанные.ХозяйствующийСубъект,
						ОбщиеДанные.Предприятие,
						ПараметрыОбмена, ДополнительныеПараметры);
					
					ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурналаАрхив = ДанныеЗаписиСкладскогоЖурналаАрхив.Ссылка;
					
					ЗаписьИспользованаВОперацииВосстановления = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗаписьИспользованаВОперацииВосстановления Тогда
				
				ДокументПолностьюВосстановлен = Истина;
				Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
					Если СтрокаТЧ.Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление
						И Не ЗначениеЗаполнено(СтрокаТЧ.ЗаписьСкладскогоЖурнала) Тогда
						ДокументПолностьюВосстановлен = Ложь;
						Прервать;
					ИначеЕсли (СтрокаТЧ.Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение
						Или СтрокаТЧ.Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление)
						И Не ЗначениеЗаполнено(СтрокаТЧ.ЗаписьСкладскогоЖурналаАрхив) Тогда
						ДокументПолностьюВосстановлен = Ложь;
					КонецЕсли;
				КонецЦикла;
				
				ДанныеДокументаДляВосстановления.ДокументПолностьюВосстановлен = ДокументПолностьюВосстановлен;
				ДанныеДокументаДляВосстановления.ДокументЧастичноВосстановлен  = Истина;
				
				Прервать;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗаписьИспользованаВОперацииВосстановления;
	
КонецФункции

Процедура СформироватьДокументИнвентаризацияПродукцииВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, Операция)
	
	ОбщиеДанные            = ПараметрыВосстановления.ОбщиеДанные;
	КСозданиюДокументов    = ПараметрыВосстановления.КСозданиюДокументов;
	СтрокаТаблицыЭлементов = ПараметрыВосстановления.СтрокаТаблицыЭлементов;
	СтрокаДанныеДокументов = ПараметрыВосстановления.СтрокаДанныеДокументов;
	
	ДокументОбъект = Неопределено;
	
	Если КСозданиюДокументов.ИнвентаризацияПродукцииВЕТИС.Количество() > 0 Тогда
		
		// Последний созданный в рамках текущей транзакции документ
		Индекс = КСозданиюДокументов.ИнвентаризацияПродукцииВЕТИС.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			ДанныеПоследнегоДокумента = КСозданиюДокументов.ИнвентаризацияПродукцииВЕТИС[Индекс];
			Если ОбщиеДанные.Дата - ДанныеПоследнегоДокумента.Дата <= 15 Тогда
				// Последний созданный в рамках текущей транзакции документ
				ДокументОбъект = ДанныеПоследнегоДокумента.ДокументОбъект;
				Прервать;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		
		// Новый документ
		ДокументОбъект = Документы.ИнвентаризацияПродукцииВЕТИС.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Ответственный = Неопределено;
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ОбщиеДанные);
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			ДокументОбъект.ХозяйствующийСубъект, ДокументОбъект.Предприятие);
		
		ДокументОбъект.ТорговыйОбъект = ПредставленияСопоставлений.ТорговыйОбъект.Ссылка;
		
		ДанныеПоследнегоДокумента = КСозданиюДокументов.ИнвентаризацияПродукцииВЕТИС.Добавить();
		ДанныеПоследнегоДокумента.Дата           = ОбщиеДанные.Дата;
		ДанныеПоследнегоДокумента.ДокументОбъект = ДокументОбъект;
		
	КонецЕсли;
	
	ТоварыСтрокаТЧ = ДокументОбъект.Товары.Добавить();
	ТоварыСтрокаТЧ.Операция            = Операция;
	ТоварыСтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(ТоварыСтрокаТЧ, СтрокаДанныеДокументов);
	
	ЭлементДанных = СтрокаТаблицыЭлементов.ЭлементДанных;
	Если ЗначениеЗаполнено(СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий) Тогда
		ТоварыСтрокаТЧ.КоличествоИзменениеВЕТИС = ЭлементДанных.batch.volume - СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.batch.volume;
	Иначе
		ТоварыСтрокаТЧ.КоличествоИзменениеВЕТИС = ЭлементДанных.batch.volume;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС) Тогда
		ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена);
	КонецЕсли;
	
	// Для операций "Изменение" и "Удаление" создадим архивные версии
	// записей журнала и поместим их в поле табличной части.
	Если (Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение
		Или Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление)
		И ЗначениеЗаполнено(СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий) Тогда
		
		// Попробуем найти архивную запись по идентификатору версии
		// и актуальной записи.
		АрхивнаяЗапись = ИнтеграцияВЕТИС.АрхивнаяЗаписьСкладскогоЖурнала(
			ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала,
			СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.uuid);
		
		ДополнительныеПараметры = ИнтеграцияВЕТИС.ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала();
		ДополнительныеПараметры.РегистрироватьСинхронизацию       = Ложь;
		ДополнительныеПараметры.АктуальнаяЗаписьСкладскогоЖурнала = ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала;
		ДополнительныеПараметры.ПроверятьАктуальностьЗаписи       = Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала);
		
		ДанныеЗаписиСкладскогоЖурналаАрхив = ИнтеграцияВЕТИС.ЗагрузитьЗаписьСкладскогоЖурнала(
			СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий,
			АрхивнаяЗапись,
			ОбщиеДанные.ХозяйствующийСубъект,
			ОбщиеДанные.Предприятие,
			ПараметрыОбмена, ДополнительныеПараметры);
		
		ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурналаАрхив = ДанныеЗаписиСкладскогоЖурналаАрхив.Ссылка;
		
	КонецЕсли;
	
	// Производственные партии
	Для Каждого СтрокаТЧ Из СтрокаДанныеДокументов.ПроизводственныеПартии Цикл
		ПроизводственныеПартииСтрокаТЧ = ДокументОбъект.ПроизводственныеПартии.Добавить();
		ПроизводственныеПартииСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(ПроизводственныеПартииСтрокаТЧ, СтрокаТЧ);
	КонецЦикла;
	
	// Производители
	Для Каждого СтрокаТЧ Из СтрокаДанныеДокументов.Производители Цикл
		ПроизводителиСтрокаТЧ = ДокументОбъект.Производители.Добавить();
		ПроизводителиСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(ПроизводителиСтрокаТЧ, СтрокаТЧ);
	КонецЦикла;
	
	// УпаковкиВЕТИС
	Для Каждого СтрокаТЧ Из СтрокаДанныеДокументов.УпаковкиВЕТИС Цикл
		УпаковкиСтрокаТЧ = ДокументОбъект.УпаковкиВЕТИС.Добавить();
		УпаковкиСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(УпаковкиСтрокаТЧ, СтрокаТЧ);
	КонецЦикла;
	
	// ШтрихкодыУпаковок
	Для Каждого СтрокаТЧ Из СтрокаДанныеДокументов.ШтрихкодыУпаковок Цикл
		ШтрихкодыУпаковокСтрокаТЧ = ДокументОбъект.ШтрихкодыУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(ШтрихкодыУпаковокСтрокаТЧ, СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводственнаяОперацияВЕТИС

Функция ВосстановитьДополнитьСырьеПроизводственнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена)
	
	ОбщиеДанные            = ПараметрыВосстановления.ОбщиеДанные;
	КСозданиюДокументов    = ПараметрыВосстановления.КСозданиюДокументов;
	СтрокаТаблицыЭлементов = ПараметрыВосстановления.СтрокаТаблицыЭлементов;
	СтрокаДанныеДокументов = ПараметрыВосстановления.СтрокаДанныеДокументов;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДокументПолностьюВосстановлен", Ложь);
	Если ПараметрыВосстановления.ДокументДляВосстановления = Неопределено Тогда
		Отбор.Вставить("ХозяйствующийСубъект", ОбщиеДанные.ХозяйствующийСубъект);
		Отбор.Вставить("Предприятие",          ОбщиеДанные.Предприятие);
	Иначе
		Отбор.Вставить("Документ", ПараметрыВосстановления.ДокументДляВосстановления);
	КонецЕсли;
	
	// Подбор документа при ошибках сервиса.
	ЗаписьИспользованаВОперацииВосстановления = Ложь;
	ДанныеДокументовДляВосстановления = ДокументДляВосстановления(
		ОбщиеДанные.Дата,
		Отбор,
		ПараметрыОбмена,
		"ПроизводственнаяОперацияВЕТИС");
	
	Если ДанныеДокументовДляВосстановления <> Неопределено Тогда
		
		Для Каждого ДанныеДокументаДляВосстановления Из ДанныеДокументовДляВосстановления Цикл
			
			Если ДанныеДокументаДляВосстановления.ДокументОбъект = Неопределено Тогда
				ДанныеДокументаДляВосстановления.ДокументОбъект = ДанныеДокументаДляВосстановления.Документ.ПолучитьОбъект();
			КонецЕсли;
			
			ДокументОбъект = ДанныеДокументаДляВосстановления.ДокументОбъект;
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			Отбор = Новый Структура;
			Отбор.Вставить("Продукция",                    СтрокаДанныеДокументов.Продукция);
			Отбор.Вставить("КоличествоВЕТИС",              СтрокаДанныеДокументов.КоличествоВЕТИС);
			Отбор.Вставить("ЕдиницаИзмеренияВЕТИС",        ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена));
			Отбор.Вставить("ЗаписьСкладскогоЖурнала",      СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала);
			Отбор.Вставить("ЗаписьСкладскогоЖурналаАрхив", Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
			
			НайденныеСтроки = ДокументОбъект.Сырье.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ТоварыСтрокаТЧ = НайденныеСтроки[0];
				
				// Попробуем найти архивную запись по идентификатору версии
				// и актуальной записи.
				АрхивнаяЗапись = ИнтеграцияВЕТИС.АрхивнаяЗаписьСкладскогоЖурнала(
					ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала,
					СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.uuid);
				
				ДополнительныеПараметры = ИнтеграцияВЕТИС.ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала();
				ДополнительныеПараметры.РегистрироватьСинхронизацию       = Ложь;
				ДополнительныеПараметры.АктуальнаяЗаписьСкладскогоЖурнала = ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала;
				ДополнительныеПараметры.ПроверятьАктуальностьЗаписи       = Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала);
				
				ДанныеЗаписиСкладскогоЖурналаАрхив = ИнтеграцияВЕТИС.ЗагрузитьЗаписьСкладскогоЖурнала(
					СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий,
					АрхивнаяЗапись,
					ОбщиеДанные.ХозяйствующийСубъект,
					ОбщиеДанные.Предприятие,
					ПараметрыОбмена, ДополнительныеПараметры);
				
				ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурналаАрхив = ДанныеЗаписиСкладскогоЖурналаАрхив.Ссылка;
				
				ЗаписьИспользованаВОперацииВосстановления = Истина;
				
			КонецЕсли;
			
			Если ЗаписьИспользованаВОперацииВосстановления Тогда
				
				ДокументПолностьюВосстановлен = Истина;
				
				Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
					Если Не ЗначениеЗаполнено(СтрокаТЧ.ЗаписьСкладскогоЖурнала)
						Или Не ЗначениеЗаполнено(СтрокаТЧ.ВетеринарноСопроводительныйДокумент) Тогда
						ДокументПолностьюВосстановлен = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаТЧ Из ДокументОбъект.Сырье Цикл
					Если Не ЗначениеЗаполнено(СтрокаТЧ.ЗаписьСкладскогоЖурналаАрхив) Тогда
						ДокументПолностьюВосстановлен = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ДанныеДокументаДляВосстановления.ДокументПолностьюВосстановлен = ДокументПолностьюВосстановлен;
				ДанныеДокументаДляВосстановления.ДокументЧастичноВосстановлен  = Истина;
				
				Прервать;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЗаписьИспользованаВОперацииВосстановления Тогда
		
		ДокументОбъект = Неопределено;
		Если КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС.Количество() > 0 Тогда
			
			// Сырье из ранее созданной в текущей транзакции производственной операции.
			Индекс = КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС.Количество() - 1;
			Пока Индекс >= 0 Цикл
				
				ДанныеПоследнегоДокумента = КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС[Индекс];
				Если ОбщиеДанные.Дата - ДанныеПоследнегоДокумента.Дата <= 15 Тогда
					// Последний созданный в рамках текущей транзакции документ
					ДокументОбъект = ДанныеПоследнегоДокумента.ДокументОбъект;
				КонецЕсли;
				
				Индекс = Индекс - 1;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДокументОбъект <> Неопределено
			И ЗначениеЗаполнено(СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий) Тогда
			
			ТоварыСтрокаТЧ = ДокументОбъект.Сырье.Добавить();
			ТоварыСтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			ЗаполнитьЗначенияСвойств(ТоварыСтрокаТЧ, СтрокаДанныеДокументов);
			
			ТоварыСтрокаТЧ.КоличествоВЕТИС = СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.batch.volume - СтрокаТаблицыЭлементов.ЭлементДанных.batch.volume;
			
			Если Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС) Тогда
				ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена);
			КонецЕсли;
			
			ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала = СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала;
			
			Если СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.batch.packageList <> Неопределено
				И СтрокаТаблицыЭлементов.ЭлементДанных.batch.packageList <> Неопределено Тогда
				
				// Таблица для свертки упаковок. Табличная часть не подходит, так как поле КоличествоУпаковокВЕТИС может быть < 0
				УпаковкиВЕТИС = Новый ТаблицаЗначений;
				УпаковкиВЕТИС.Колонки.Добавить("ИдентификаторСтрокиТовары");
				УпаковкиВЕТИС.Колонки.Добавить("УровеньУпаковки");
				УпаковкиВЕТИС.Колонки.Добавить("УпаковкаВЕТИС");
				УпаковкиВЕТИС.Колонки.Добавить("КоличествоУпаковокВЕТИС");
				
				Для Каждого УпаковкиЭлементДанных Из СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.batch.packageList.package Цикл
					
					УпаковкиСтрокаТЧ = УпаковкиВЕТИС.Добавить();
					УпаковкиСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
					УпаковкиСтрокаТЧ.УровеньУпаковки = ИнтеграцияВЕТИСПовтИсп.УровеньУпаковки(УпаковкиЭлементДанных.level);
					
					Если УпаковкиЭлементДанных.packingType <> Неопределено Тогда
						УпаковкиСтрокаТЧ.УпаковкаВЕТИС = ИнтеграцияВЕТИС.Упаковка(УпаковкиЭлементДанных.packingType, ПараметрыОбмена);
					КонецЕсли;
					
					УпаковкиСтрокаТЧ.КоличествоУпаковокВЕТИС = УпаковкиЭлементДанных.quantity;
					
				КонецЦикла;
				
				Для Каждого УпаковкиЭлементДанных Из СтрокаТаблицыЭлементов.ЭлементДанных.batch.packageList.package Цикл
					
					УпаковкиСтрокаТЧ = УпаковкиВЕТИС.Добавить();
					УпаковкиСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
					УпаковкиСтрокаТЧ.УровеньУпаковки = ИнтеграцияВЕТИСПовтИсп.УровеньУпаковки(УпаковкиЭлементДанных.level);
					
					Если УпаковкиЭлементДанных.packingType <> Неопределено Тогда
						УпаковкиСтрокаТЧ.УпаковкаВЕТИС = ИнтеграцияВЕТИС.Упаковка(УпаковкиЭлементДанных.packingType, ПараметрыОбмена);
					КонецЕсли;
					
					УпаковкиСтрокаТЧ.КоличествоУпаковокВЕТИС = -УпаковкиЭлементДанных.quantity;
					
				КонецЦикла;
				
				УпаковкиВЕТИС.Свернуть("ИдентификаторСтрокиТовары, УровеньУпаковки, УпаковкаВЕТИС", "КоличествоУпаковокВЕТИС");
				
				Для Каждого СтрокаТЧ Из УпаковкиВЕТИС Цикл
					
					УпаковкиСтрокаТЧ = ДокументОбъект.УпаковкиВЕТИС.Добавить();
					УпаковкиСтрокаТЧ.ИдентификаторСтрокиТовары = СтрокаТЧ.ИдентификаторСтрокиТовары;
					УпаковкиСтрокаТЧ.ИдентификаторСтроки       = Строка(Новый УникальныйИдентификатор);
					УпаковкиСтрокаТЧ.УровеньУпаковки           = СтрокаТЧ.УровеньУпаковки;
					УпаковкиСтрокаТЧ.УпаковкаВЕТИС             = СтрокаТЧ.УпаковкаВЕТИС;
					УпаковкиСтрокаТЧ.КоличествоУпаковокВЕТИС   = СтрокаТЧ.КоличествоУпаковокВЕТИС;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ЗаписьИспользованаВОперацииВосстановления = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаписьИспользованаВОперацииВосстановления;
	
КонецФункции

Функция ВосстановитьДокументПроизводственнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена)
	
	СтрокаТаблицыЭлементов = ПараметрыВосстановления.СтрокаТаблицыЭлементов;
	СтрокаДанныеДокументов = ПараметрыВосстановления.СтрокаДанныеДокументов;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДокументПолностьюВосстановлен", Ложь);
	Если ПараметрыВосстановления.ДокументДляВосстановления = Неопределено Тогда
		Отбор.Вставить("ХозяйствующийСубъект", ПараметрыВосстановления.ОбщиеДанные.ХозяйствующийСубъект);
		Отбор.Вставить("Предприятие",          ПараметрыВосстановления.ОбщиеДанные.Предприятие);
	Иначе
		Отбор.Вставить("Документ", ПараметрыВосстановления.ДокументДляВосстановления);
	КонецЕсли;
	
	// Подбор документа при ошибках сервиса.
	ЗаписьИспользованаВОперацииВосстановления = Ложь;
	ДанныеДокументовДляВосстановления = ДокументДляВосстановления(
		ПараметрыВосстановления.ОбщиеДанные.Дата,
		Отбор,
		ПараметрыОбмена,
		"ПроизводственнаяОперацияВЕТИС");
	
	Если ДанныеДокументовДляВосстановления <> Неопределено Тогда
		
		Для Каждого ДанныеДокументаДляВосстановления Из ДанныеДокументовДляВосстановления Цикл
			
			Если ДанныеДокументаДляВосстановления.ДокументОбъект = Неопределено Тогда
				ДанныеДокументаДляВосстановления.ДокументОбъект = ДанныеДокументаДляВосстановления.Документ.ПолучитьОбъект();
			КонецЕсли;
			
			ДокументОбъект = ДанныеДокументаДляВосстановления.ДокументОбъект;
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			Отбор = Новый Структура;
			Отбор.Вставить("Продукция",             СтрокаДанныеДокументов.Продукция);
			Отбор.Вставить("КоличествоВЕТИС",       СтрокаДанныеДокументов.КоличествоВЕТИС);
			Отбор.Вставить("ЕдиницаИзмеренияВЕТИС", ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена));
			
			Если ЗначениеЗаполнено(СтрокаДанныеДокументов.ДатаПроизводстваСтрока)
				Или ЗначениеЗаполнено(СтрокаДанныеДокументов.ДатаПроизводстваНачалоПериода)
				Или ЗначениеЗаполнено(СтрокаДанныеДокументов.ДатаПроизводстваКонецПериода) Тогда
				
				Отбор.Вставить("ДатаПроизводстваСтрока",             СтрокаДанныеДокументов.ДатаПроизводстваСтрока);
				Отбор.Вставить("ДатаПроизводстваТочностьЗаполнения", СтрокаДанныеДокументов.СрокГодностиТочностьЗаполнения);
				Отбор.Вставить("ДатаПроизводстваНачалоПериода",      СтрокаДанныеДокументов.ДатаПроизводстваНачалоПериода);
				Отбор.Вставить("ДатаПроизводстваКонецПериода",       СтрокаДанныеДокументов.ДатаПроизводстваКонецПериода);
				
			КонецЕсли;
			
			Если Не ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(СтрокаДанныеДокументов.Продукция) Тогда
				
				Если ЗначениеЗаполнено(СтрокаДанныеДокументов.СрокГодностиСтрока)
					Или ЗначениеЗаполнено(СтрокаДанныеДокументов.СрокГодностиНачалоПериода)
					Или ЗначениеЗаполнено(СтрокаДанныеДокументов.СрокГодностиКонецПериода) Тогда
					
					Отбор.Вставить("СрокГодностиСтрока",             СтрокаДанныеДокументов.СрокГодностиСтрока);
					Отбор.Вставить("СрокГодностиТочностьЗаполнения", СтрокаДанныеДокументов.СрокГодностиТочностьЗаполнения);
					Отбор.Вставить("СрокГодностиНачалоПериода",      СтрокаДанныеДокументов.СрокГодностиНачалоПериода);
					Отбор.Вставить("СрокГодностиКонецПериода",       СтрокаДанныеДокументов.СрокГодностиКонецПериода);
					
					Отбор.Вставить("СкоропортящаясяПродукция", СтрокаДанныеДокументов.СкоропортящаясяПродукция);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Отбор.Вставить("ЗаписьСкладскогоЖурнала",             Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
			Отбор.Вставить("ВетеринарноСопроводительныйДокумент", Справочники.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка());
			
			НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ТоварыСтрокаТЧ = НайденныеСтроки[0];
				
				ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала             = СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала;
				ТоварыСтрокаТЧ.ВетеринарноСопроводительныйДокумент = СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент;
				
				ЗаписьИспользованаВОперацииВосстановления = Истина;
				
			КонецЕсли;
			
			Если ЗаписьИспользованаВОперацииВосстановления Тогда
				
				ДокументПолностьюВосстановлен = Истина;
				
				Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
					Если Не ЗначениеЗаполнено(СтрокаТЧ.ЗаписьСкладскогоЖурнала)
						Или Не ЗначениеЗаполнено(СтрокаТЧ.ВетеринарноСопроводительныйДокумент) Тогда
						ДокументПолностьюВосстановлен = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаТЧ Из ДокументОбъект.Сырье Цикл
					Если Не ЗначениеЗаполнено(СтрокаТЧ.ЗаписьСкладскогоЖурналаАрхив) Тогда
						ДокументПолностьюВосстановлен = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ДанныеДокументаДляВосстановления.ДокументПолностьюВосстановлен = ДокументПолностьюВосстановлен;
				ДанныеДокументаДляВосстановления.ДокументЧастичноВосстановлен  = Истина;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗаписьИспользованаВОперацииВосстановления;
	
КонецФункции

Процедура СформироватьДокументПроизводственнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена)
	
	ОбщиеДанные            = ПараметрыВосстановления.ОбщиеДанные;
	КСозданиюДокументов    = ПараметрыВосстановления.КСозданиюДокументов;
	СтрокаТаблицыЭлементов = ПараметрыВосстановления.СтрокаТаблицыЭлементов;
	СтрокаДанныеДокументов = ПараметрыВосстановления.СтрокаДанныеДокументов;
	
	ДокументОбъект = Неопределено;
	
	Если КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС.Количество() > 0 Тогда
		
		// Последний созданный в рамках текущей транзакции документ
		Индекс = КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			ДанныеПоследнегоДокумента = КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС[Индекс];
			Если ОбщиеДанные.Дата - ДанныеПоследнегоДокумента.Дата <= 15 Тогда
				// Последний созданный в рамках текущей транзакции документ
				ДокументОбъект = ДанныеПоследнегоДокумента.ДокументОбъект;
				Прервать;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
	
		// Новый документ
		ДокументОбъект = Документы.ПроизводственнаяОперацияВЕТИС.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ОбщиеДанные);
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			ДокументОбъект.ХозяйствующийСубъект,
			ДокументОбъект.Предприятие);
		
		ДокументОбъект.ТорговыйОбъект = ПредставленияСопоставлений.ТорговыйОбъект.Ссылка;
		
		ДанныеПоследнегоДокумента = КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС.Добавить();
		ДанныеПоследнегоДокумента.Дата           = ОбщиеДанные.Дата;
		ДанныеПоследнегоДокумента.ДокументОбъект = ДокументОбъект;
		
	КонецЕсли;
	
	Если СтрокаДанныеДокументов.КоличествоВЕТИС <> 0 Тогда
		
		ТоварыСтрокаТЧ = ДокументОбъект.Товары.Добавить();
		ТоварыСтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		ЗаполнитьЗначенияСвойств(ТоварыСтрокаТЧ, СтрокаДанныеДокументов);
		
		Если Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС) Тогда
			ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена);
		КонецЕсли;
		
		// Производственные партии
		Если СтрокаДанныеДокументов.ПроизводственныеПартии.Количество() = 1 Тогда
			ТоварыСтрокаТЧ.ИдентификаторПартии = СтрокаДанныеДокументов.ПроизводственныеПартии[0].ИдентификаторПартии;
		КонецЕсли;
		
		// УпаковкиВЕТИС
		Для Каждого СтрокаТЧ Из СтрокаДанныеДокументов.УпаковкиВЕТИС Цикл
			УпаковкиСтрокаТЧ = ДокументОбъект.УпаковкиВЕТИС.Добавить();
			УпаковкиСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
			ЗаполнитьЗначенияСвойств(УпаковкиСтрокаТЧ, СтрокаТЧ);
		КонецЦикла;
		
		// ШтрихкодыУпаковок
		Для Каждого СтрокаТЧ Из СтрокаДанныеДокументов.ШтрихкодыУпаковок Цикл
			ШтрихкодыУпаковокСтрокаТЧ = ДокументОбъект.ШтрихкодыУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(ШтрихкодыУпаковокСтрокаТЧ, СтрокаТЧ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВходящаяТранспортнаяОперацияВЕТИС

Процедура ОбработатьДокументВходящаяТранспортнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, ДокументДляВосстановления)

	ЗаписьИспользована = ВосстановитьДокументВходящаяТранспортнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена);
	
	Если Не ЗаписьИспользована И ДокументДляВосстановления = Неопределено
		И ПараметрыОбмена.ЗагружатьДокументыСозданныеЧерезWeb Тогда
		СформироватьДокументВходящаяТранспортнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена);
	КонецЕсли;
	
КонецПроцедуры

Функция ВосстановитьДокументВходящаяТранспортнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена)
	
	СтрокаТаблицыЭлементов = ПараметрыВосстановления.СтрокаТаблицыЭлементов;
	СтрокаДанныеДокументов = ПараметрыВосстановления.СтрокаДанныеДокументов;
	
	Если СтрокаТаблицыЭлементов.ЭлементДанныхСледующий.Количество() Тогда
		Если ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(СтрокаТаблицыЭлементов.ЭлементДанныхСледующий.status) =
			Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеОперацииСписания Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДокументПолностьюВосстановлен", Ложь);
	Если ПараметрыВосстановления.ДокументДляВосстановления = Неопределено Тогда
		Отбор.Вставить("ПеревозчикХозяйствующийСубъект",       СтрокаДанныеДокументов.ПеревозчикХозяйствующийСубъект);
		Отбор.Вставить("СпособХранения",                       СтрокаДанныеДокументов.СпособХранения);
		Отбор.Вставить("СерияТТН",                             СтрокаДанныеДокументов.СерияТТН);
		Отбор.Вставить("НомерТТН",                             СтрокаДанныеДокументов.НомерТТН);
		Отбор.Вставить("ДатаТТН",                              СтрокаДанныеДокументов.ДатаТТН);
		Отбор.Вставить("ТипТТН",                               СтрокаДанныеДокументов.ТипТТН);
		
		Если СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный Тогда
			Отбор.Вставить("ГрузополучательХозяйствующийСубъект",  СтрокаДанныеДокументов.ГрузоотправительХозяйствующийСубъект);
			Отбор.Вставить("ГрузополучательПредприятие",           СтрокаДанныеДокументов.ГрузоотправительПредприятие);
			Отбор.Вставить("ГрузоотправительХозяйствующийСубъект", СтрокаДанныеДокументов.ГрузополучательХозяйствующийСубъект);
			Отбор.Вставить("ГрузоотправительПредприятие",          СтрокаДанныеДокументов.ГрузополучательПредприятие);
		Иначе
			Отбор.Вставить("ГрузополучательХозяйствующийСубъект",  СтрокаДанныеДокументов.ГрузополучательХозяйствующийСубъект);
			Отбор.Вставить("ГрузополучательПредприятие",           СтрокаДанныеДокументов.ГрузополучательПредприятие);
			Отбор.Вставить("ГрузоотправительХозяйствующийСубъект", СтрокаДанныеДокументов.ГрузоотправительХозяйствующийСубъект);
			Отбор.Вставить("ГрузоотправительПредприятие",          СтрокаДанныеДокументов.ГрузоотправительПредприятие);
		КонецЕсли;
	Иначе
		Отбор.Вставить("Документ", ПараметрыВосстановления.ДокументДляВосстановления);
	КонецЕсли;
	
	// Подбор документа при ошибках сервиса.
	ЗаписьИспользованаВОперацииВосстановления = Ложь;
	ДанныеДокументовДляВосстановления = ДокументДляВосстановления(
		ПараметрыВосстановления.ОбщиеДанные.Дата,
		Отбор,
		ПараметрыОбмена,
		"ВходящаяТранспортнаяОперацияВЕТИС",
		СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный);
	
	Если ДанныеДокументовДляВосстановления <> Неопределено Тогда
		
		Для Каждого ДанныеДокументаДляВосстановления Из ДанныеДокументовДляВосстановления Цикл
			
			Если ДанныеДокументаДляВосстановления.ДокументОбъект = Неопределено Тогда
				ДанныеДокументаДляВосстановления.ДокументОбъект = ДанныеДокументаДляВосстановления.Документ.ПолучитьОбъект();
			КонецЕсли;
			
			ДокументОбъект = ДанныеДокументаДляВосстановления.ДокументОбъект;
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			Если СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный Тогда
				
				Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	Т.ВетеринарноСопроводительныйДокумент КАК ВетеринарноСопроводительныйДокумент
				|ПОМЕСТИТЬ ВтВетеринарноСопроводительныеДокументы
				|ИЗ
				|	Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ВетеринарноСопроводительныеДокументы КАК Т
				|ГДЕ
				|	Т.Ссылка = &ЗаписьСкладскогоЖурнала
				|;
				|
				|ВЫБРАТЬ
				|	Т.Ссылка КАК ЗаписьСкладскогоЖурнала
				|ИЗ
				|	Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ВетеринарноСопроводительныеДокументы КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВетеринарноСопроводительныеДокументы КАК ВтВетеринарноСопроводительныеДокументы
				|		ПО ВтВетеринарноСопроводительныеДокументы.ВетеринарноСопроводительныйДокумент = Т.ВетеринарноСопроводительныйДокумент
				|		И Т.Ссылка <> &ЗаписьСкладскогоЖурнала
				|");
				
				Запрос.Параметры.Вставить("ЗаписьСкладскогоЖурнала", СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				ТоварыСтрокаТЧ = Неопределено;
				Пока Выборка.Следующий() Цикл
					
					ЗаписьСкладскогоЖурнала = Выборка.ЗаписьСкладскогоЖурнала;
					
					Отбор = Новый Структура;
					Отбор.Вставить("ЗаписьСкладскогоЖурнала", ЗаписьСкладскогоЖурнала);
					
					НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						ТоварыСтрокаТЧ = НайденныеСтроки[0];
						ТоварыСтрокаТЧ.ВетеринарноСопроводительныйДокументНаВозврат = СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент;
					
						ЗаписьИспользованаВОперацииВосстановления = Истина;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Отбор = Новый Структура;
				Отбор.Вставить("ВетеринарноСопроводительныйДокумент", СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент);
				
				НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					СтрокаТЧ = НайденныеСтроки[0];
					СтрокаТЧ.ЗаписьСкладскогоЖурнала = СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала;
					
					ЗаписьИспользованаВОперацииВосстановления = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗаписьИспользованаВОперацииВосстановления Тогда
				
				ДокументПолностьюВосстановлен = Истина;
				Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
					Если Не ЗначениеЗаполнено(СтрокаТЧ.ЗаписьСкладскогоЖурнала) Тогда
						ДокументПолностьюВосстановлен = Ложь;
						Прервать;
					ИначеЕсли СтрокаТЧ.ВозвращаемоеКоличествоВЕТИС > 0
						И Не ЗначениеЗаполнено(СтрокаТЧ.ВетеринарноСопроводительныйДокументНаВозврат) Тогда
						ДокументПолностьюВосстановлен = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ДанныеДокументаДляВосстановления.ДокументПолностьюВосстановлен = ДокументПолностьюВосстановлен;
				ДанныеДокументаДляВосстановления.ДокументЧастичноВосстановлен  = Истина;
				
				Прервать;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗаписьИспользованаВОперацииВосстановления;
	
КонецФункции

Процедура СформироватьДокументВходящаяТранспортнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена)
	
	ОбщиеДанные            = ПараметрыВосстановления.ОбщиеДанные;
	КСозданиюДокументов    = ПараметрыВосстановления.КСозданиюДокументов;
	СтрокаТаблицыЭлементов = ПараметрыВосстановления.СтрокаТаблицыЭлементов;
	СтрокаДанныеДокументов = ПараметрыВосстановления.СтрокаДанныеДокументов;
	
	Если СтрокаТаблицыЭлементов.ЭлементДанныхСледующий.Количество() Тогда
		Если ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(СтрокаТаблицыЭлементов.ЭлементДанныхСледующий.status) =
			Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеОперацииСписания Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ПеревозчикХозяйствующийСубъект",       СтрокаДанныеДокументов.ПеревозчикХозяйствующийСубъект);
	Реквизиты.Вставить("СпособХранения",                       СтрокаДанныеДокументов.СпособХранения);
	Реквизиты.Вставить("СерияТТН",                             СтрокаДанныеДокументов.СерияТТН);
	Реквизиты.Вставить("НомерТТН",                             СтрокаДанныеДокументов.НомерТТН);
	Реквизиты.Вставить("ДатаТТН",                              СтрокаДанныеДокументов.ДатаТТН);
	Реквизиты.Вставить("ТипТТН",                               СтрокаДанныеДокументов.ТипТТН);
	
	Если СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный Тогда
		Реквизиты.Вставить("ГрузополучательХозяйствующийСубъект",  СтрокаДанныеДокументов.ГрузоотправительХозяйствующийСубъект);
		Реквизиты.Вставить("ГрузополучательПредприятие",           СтрокаДанныеДокументов.ГрузоотправительПредприятие);
		Реквизиты.Вставить("ГрузоотправительХозяйствующийСубъект", СтрокаДанныеДокументов.ГрузополучательХозяйствующийСубъект);
		Реквизиты.Вставить("ГрузоотправительПредприятие",          СтрокаДанныеДокументов.ГрузополучательПредприятие);
	Иначе
		Реквизиты.Вставить("ГрузополучательХозяйствующийСубъект",  СтрокаДанныеДокументов.ГрузополучательХозяйствующийСубъект);
		Реквизиты.Вставить("ГрузополучательПредприятие",           СтрокаДанныеДокументов.ГрузополучательПредприятие);
		Реквизиты.Вставить("ГрузоотправительХозяйствующийСубъект", СтрокаДанныеДокументов.ГрузоотправительХозяйствующийСубъект);
		Реквизиты.Вставить("ГрузоотправительПредприятие",          СтрокаДанныеДокументов.ГрузоотправительПредприятие);
	КонецЕсли;
	
	ДокументОбъект = Неопределено;
	Если КСозданиюДокументов.ВходящаяТранспортнаяОперацияВЕТИС.Количество() > 0 Тогда
		
		НайденныеСтроки = КСозданиюДокументов.ВходящаяТранспортнаяОперацияВЕТИС.НайтиСтроки(Реквизиты);
		Индекс = НайденныеСтроки.Количество() - 1;
		Если Индекс>=0 Тогда
			ДанныеПоследнегоДокумента = НайденныеСтроки[Индекс];
			ДокументОбъект = ДанныеПоследнегоДокумента.ДокументОбъект;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		Если СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		
		// Новый документ
		ДокументОбъект = Документы.ВходящаяТранспортнаяОперацияВЕТИС.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата                                = ОбщиеДанные.Дата;
		ДокументОбъект.ГрузополучательХозяйствующийСубъект = ОбщиеДанные.ХозяйствующийСубъект;
		ДокументОбъект.ГрузополучательПредприятие          = ОбщиеДанные.Предприятие;
		
		ПредставленияГрузополучателя = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			ДокументОбъект.ГрузополучательХозяйствующийСубъект,
			ДокументОбъект.ГрузополучательПредприятие, "Грузополучатель");
		
		ДокументОбъект.ТорговыйОбъект = ПредставленияГрузополучателя.ТорговыйОбъект.Ссылка;
		
		Если ЗначениеЗаполнено(СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент) Тогда
			
			ЗаполнитьЗначенияСвойств(
				ДокументОбъект, СтрокаДанныеДокументов,,
				"ГрузополучательХозяйствующийСубъект, ГрузополучательПредприятие, ГрузоотправительХозяйствующийСубъект, ГрузоотправительПредприятие");
			
			Если СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный Тогда
				ДокументОбъект.ГрузополучательХозяйствующийСубъект  = СтрокаДанныеДокументов.ГрузоотправительХозяйствующийСубъект;
				ДокументОбъект.ГрузополучательПредприятие           = СтрокаДанныеДокументов.ГрузоотправительПредприятие;
				ДокументОбъект.ГрузоотправительХозяйствующийСубъект = СтрокаДанныеДокументов.ГрузополучательХозяйствующийСубъект;
				ДокументОбъект.ГрузоотправительПредприятие          = СтрокаДанныеДокументов.ГрузополучательПредприятие;
			Иначе
				ДокументОбъект.ГрузополучательХозяйствующийСубъект  = СтрокаДанныеДокументов.ГрузополучательХозяйствующийСубъект;
				ДокументОбъект.ГрузополучательПредприятие           = СтрокаДанныеДокументов.ГрузополучательПредприятие;
				ДокументОбъект.ГрузоотправительХозяйствующийСубъект = СтрокаДанныеДокументов.ГрузоотправительХозяйствующийСубъект;
				ДокументОбъект.ГрузоотправительПредприятие          = СтрокаДанныеДокументов.ГрузоотправительПредприятие;
			КонецЕсли;
			
			РеквизитыВСД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент,
				"СвязанныеДокументы, Маршрут");
			
			// Перенесем связанные документы из ВСД в документ.
			СвязанныеДокументы = РеквизитыВСД.СвязанныеДокументы.Выгрузить();
			Если СвязанныеДокументы.Количество() > 0 Тогда
				ДокументОбъект.СвязанныеДокументы.Загрузить(СвязанныеДокументы);
				
				// Заполним документ-основание.
				ДокументОснование = ЗаполнениеДокументовВЕТИС.ДокументОснованиеПоДаннымСвязанныхДокументов(СвязанныеДокументы);
				Если Не ДокументОснование = Неопределено Тогда
					ДокументОбъект.ДокументОснование = ДокументОснование;
				КонецЕсли;
			КонецЕсли;
			
			// Перенесем маршрут из ВСД в документ.
			Маршрут = РеквизитыВСД.Маршрут.Выгрузить();
			Если Маршрут.Количество() > 0 Тогда
				ДокументОбъект.Маршрут.Загрузить(Маршрут);
			КонецЕсли;
			
			ДанныеПоследнегоТранспорта = Неопределено;
			Для Каждого СтрокаТЧ Из Маршрут Цикл
				Если Маршрут.Индекс(СтрокаТЧ) = 0 Или СтрокаТЧ.СПерегрузкой Тогда
					ДанныеПоследнегоТранспорта = СтрокаТЧ;
				КонецЕсли;
			КонецЦикла;
			
			Если ДанныеПоследнегоТранспорта <> Неопределено Тогда
				ДокументОбъект.ТипТранспорта                 = ДанныеПоследнегоТранспорта.ТипТранспорта;
				ДокументОбъект.НомерТранспортногоСредства    = ДанныеПоследнегоТранспорта.НомерТранспортногоСредства;
				ДокументОбъект.НомерАвтомобильногоПрицепа    = ДанныеПоследнегоТранспорта.НомерАвтомобильногоПрицепа;
				ДокументОбъект.НомерАвтомобильногоКонтейнера = ДанныеПоследнегоТранспорта.НомерАвтомобильногоКонтейнера;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.НомерТТН) Тогда
			ДокументОбъект.ТТНУказан = Истина;
		КонецЕсли;
		
		ДанныеПоследнегоДокумента = КСозданиюДокументов.ВходящаяТранспортнаяОперацияВЕТИС.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеПоследнегоДокумента, Реквизиты);
		ДанныеПоследнегоДокумента.ДокументОбъект = ДокументОбъект;
		
	КонецЕсли;
	
	Если СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.ВетеринарноСопроводительныйДокумент КАК ВетеринарноСопроводительныйДокумент
		|ПОМЕСТИТЬ ВтВетеринарноСопроводительныеДокументы
		|ИЗ
		|	Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ВетеринарноСопроводительныеДокументы КАК Т
		|ГДЕ
		|	Т.Ссылка = &ЗаписьСкладскогоЖурнала
		|;
		|
		|ВЫБРАТЬ
		|	Т.Ссылка КАК ЗаписьСкладскогоЖурнала
		|ИЗ
		|	Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ВетеринарноСопроводительныеДокументы КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВетеринарноСопроводительныеДокументы КАК ВтВетеринарноСопроводительныеДокументы
		|		ПО ВтВетеринарноСопроводительныеДокументы.ВетеринарноСопроводительныйДокумент = Т.ВетеринарноСопроводительныйДокумент
		|		И Т.Ссылка <> &ЗаписьСкладскогоЖурнала
		|");
		
		Запрос.Параметры.Вставить("ЗаписьСкладскогоЖурнала", СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТоварыСтрокаТЧ          = Неопределено;
		ЗаписьСкладскогоЖурнала = Неопределено;
		Пока Выборка.Следующий() Цикл
			
			ЗаписьСкладскогоЖурнала = Выборка.ЗаписьСкладскогоЖурнала;
			
			Отбор = Новый Структура;
			Отбор.Вставить("ЗаписьСкладскогоЖурнала", ЗаписьСкладскогоЖурнала);
			
			НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ТоварыСтрокаТЧ = НайденныеСтроки[0];
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТоварыСтрокаТЧ = Неопределено Тогда
			
			ТоварыСтрокаТЧ = ДокументОбъект.Товары.Добавить();
			ТоварыСтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			
			ЗаполнитьЗначенияСвойств(
				ТоварыСтрокаТЧ, СтрокаДанныеДокументов,,
				"ВетеринарноСопроводительныйДокумент, КоличествоВЕТИС, ЗаписьСкладскогоЖурнала");
			
			Если Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС) Тогда
				ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена);
			КонецЕсли;
			
		КонецЕсли;
		
		ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала                      = ЗаписьСкладскогоЖурнала;
		ТоварыСтрокаТЧ.ВетеринарноСопроводительныйДокументНаВозврат = СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент;
		ТоварыСтрокаТЧ.ВозвращаемоеКоличествоВЕТИС                  = СтрокаДанныеДокументов.КоличествоВЕТИС;
		ТоварыСтрокаТЧ.КоличествоВЕТИС                              = СтрокаДанныеДокументов.КоличествоВЕТИС + ТоварыСтрокаТЧ.ВозвращаемоеКоличествоВЕТИС;
		
		Если ДокументОбъект.МаршрутВозврата.Количество() = 0
			Или ДокументОбъект.СвязанныеДокументыВозврата.Количество() = 0 Тогда
			
			// Заполнить маршрут возврата
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Т.Идентификатор,
			|	Т.Предприятие,
			|	Т.Адрес,
			|	Т.АдресПредставление,
			|	Т.ДанныеАдреса,
			|	Т.СПерегрузкой,
			|	Т.ТипТранспорта,
			|	Т.НомерТранспортногоСредства,
			|	Т.НомерАвтомобильногоПрицепа,
			|	Т.НомерАвтомобильногоКонтейнера
			|ИЗ
			|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.Маршрут КАК Т
			|ГДЕ
			|	Т.Ссылка = &ВетеринарноСопроводительныйДокумент
			|;
			|
			|///////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.ТипДокумента,
			|	Т.Серия,
			|	Т.Номер,
			|	Т.Дата
			|ИЗ
			|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.СвязанныеДокументы КАК Т
			|ГДЕ
			|	Т.Ссылка = &ВетеринарноСопроводительныйДокумент
			|");
			
			Запрос.Параметры.Вставить("ВетеринарноСопроводительныйДокумент", СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент);
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			ДокументОбъект.МаршрутВозврата.Загрузить(РезультатЗапроса[0].Выгрузить());
			
			ДокументОбъект.СвязанныеДокументыВозврата.Загрузить(РезультатЗапроса[1].Выгрузить());
			
		КонецЕсли;
		
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("ЗаписьСкладскогоЖурнала", СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала);
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ТоварыСтрокаТЧ = НайденныеСтроки[0];
			
		Иначе
			
			ТоварыСтрокаТЧ = ДокументОбъект.Товары.Добавить();
			ТоварыСтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			ЗаполнитьЗначенияСвойств(
				ТоварыСтрокаТЧ, СтрокаДанныеДокументов,,
				"ВетеринарноСопроводительныйДокумент, КоличествоВЕТИС");
			
			Если Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС) Тогда
				ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена);
			КонецЕсли;
			
		КонецЕсли;
		
		ТоварыСтрокаТЧ.ВетеринарноСопроводительныйДокумент = СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент;
		ТоварыСтрокаТЧ.КоличествоВЕТИС                     = СтрокаДанныеДокументов.КоличествоВЕТИС + ТоварыСтрокаТЧ.ВозвращаемоеКоличествоВЕТИС;
		
		// Производственные партии
		Для Каждого СтрокаТЧ Из СтрокаДанныеДокументов.ПроизводственныеПартии Цикл
			ЕстьУточнения = СтрокаДанныеДокументов.ПроизводственныеПартии.Количество() > 1;
			ПроизводственныеПартииСтрокаТЧ = ?(ЕстьУточнения, ДокументОбъект.ТоварыУточнение.Добавить(), ТоварыСтрокаТЧ);
			Если ЕстьУточнения Тогда
				ПроизводственныеПартииСтрокаТЧ.ИдентификаторСтроки = ТоварыСтрокаТЧ.ИдентификаторСтроки;
			КонецЕсли;
			ПроизводственныеПартииСтрокаТЧ.ИдентификаторПартии = СтрокаТЧ.ИдентификаторПартии;
		КонецЦикла;
		
		// УпаковкиВЕТИС
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.ИдентификаторСтроки,
		|	Т.УровеньУпаковки,
		|	Т.УпаковкаВЕТИС,
		|	Т.КоличествоУпаковокВЕТИС
		|ИЗ
		|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.УпаковкиВЕТИС КАК Т
		|ГДЕ
		|	Т.Ссылка = &ВетеринарноСопроводительныйДокумент
		|");
		
		Запрос.Параметры.Вставить("ВетеринарноСопроводительныйДокумент", СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент);
		
		УпаковкиИзВСД = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТЧ Из СтрокаДанныеДокументов.УпаковкиВЕТИС Цикл
			
			УпаковкиСтрокаТЧ = ДокументОбъект.УпаковкиВЕТИС.Добавить();
			УпаковкиСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
			ЗаполнитьЗначенияСвойств(
				УпаковкиСтрокаТЧ, СтрокаТЧ,,
				"КоличествоУпаковокВЕТИС");
			УпаковкиСтрокаТЧ.КоличествоУпаковокФактВЕТИС = СтрокаТЧ.КоличествоУпаковокВЕТИС;
			
			Отбор = Новый Структура;
			Отбор.Вставить("УровеньУпаковки", УпаковкиСтрокаТЧ.УровеньУпаковки);
			Отбор.Вставить("УпаковкаВЕТИС",   УпаковкиСтрокаТЧ.УпаковкаВЕТИС);
			НайденныеСтроки = УпаковкиИзВСД.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаТЧУпаковкиИзВСД = НайденныеСтроки[0];
				
				УпаковкиСтрокаТЧ.КоличествоУпаковокВЕТИС = СтрокаТЧУпаковкиИзВСД.КоличествоУпаковокВЕТИС;
				
				УпаковкиИзВСД.Удалить(СтрокаТЧУпаковкиИзВСД);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// ШтрихкодыУпаковок
		Для Каждого СтрокаТЧ Из СтрокаДанныеДокументов.ШтрихкодыУпаковок Цикл
			ШтрихкодыУпаковокСтрокаТЧ = ДокументОбъект.ШтрихкодыУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(ШтрихкодыУпаковокСтрокаТЧ, СтрокаТЧ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсходящаяТранспортнаяОперацияВЕТИС

Процедура ОбработатьДокументИсходящаяТранспортнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, ДокументДляВосстановления)
	
	ЗаписьИспользована = ВосстановитьДокументИсходящаяТранспортнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена);
	
	Если Не ЗаписьИспользована И ПараметрыВосстановления.СтрокаДанныеДокументов.КоличествоВЕТИС < 0 Тогда
		ЗаписьИспользована = Истина;
		ОбновитьСтатусДляИсходящейТранспортнойОперацииПоАннулированномуВСД(ПараметрыВосстановления, ПараметрыОбмена);
	КонецЕсли;
	
	Если Не ЗаписьИспользована И ДокументДляВосстановления = Неопределено
		И ПараметрыОбмена.ЗагружатьДокументыСозданныеЧерезWeb Тогда
		СформироватьДокументИсходящаяТранспортнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтатусДляИсходящейТранспортнойОперацииПоАннулированномуВСД(ПараметрыВосстановления, ПараметрыОбмена)
	
	СтрокаДанныеДокументов = ПараметрыВосстановления.СтрокаДанныеДокументов;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИсходящаяТранспортнаяОперация
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК Товары
	|ГДЕ
	|	Товары.ВетеринарноСопроводительныйДокумент = &ВетеринарноСопроводительныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходящаяТранспортнаяОперация.Ссылка КАК Ссылка,
	|	Товары.Ссылка ЕСТЬ NULL КАК ВсяОперацияАннулирована
	|ИЗ
	|	ИсходящаяТранспортнаяОперация КАК ИсходящаяТранспортнаяОперация
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК Товары
	|	ПО Товары.Ссылка = ИсходящаяТранспортнаяОперация.Ссылка
	|	И Товары.ВетеринарноСопроводительныйДокумент.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВетеринарныхДокументовВЕТИС.Аннулирован)";
	Запрос.УстановитьПараметр("ВетеринарноСопроводительныйДокумент", СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РасчетСтатусовОформленияВЕТИС.РассчитатьСтатусыОформленияВЕТИС(Выборка.Ссылка);
		Если Выборка.ВсяОперацияАннулирована Тогда
			ДокументыКАрхивированию = Новый Массив;
			ДокументыКАрхивированию.Добавить(Выборка.Ссылка);
			ИнтеграцияВЕТИСВызовСервера.АрхивироватьДокументы(ДокументыКАрхивированию);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВосстановитьДокументИсходящаяТранспортнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена)
	
	СтрокаТаблицыЭлементов = ПараметрыВосстановления.СтрокаТаблицыЭлементов;
	СтрокаДанныеДокументов = ПараметрыВосстановления.СтрокаДанныеДокументов;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДокументПолностьюВосстановлен", Ложь);
	Если ПараметрыВосстановления.ДокументДляВосстановления = Неопределено Тогда
		Отбор.Вставить("ПеревозчикХозяйствующийСубъект",       СтрокаДанныеДокументов.ПеревозчикХозяйствующийСубъект);
		Отбор.Вставить("СпособХранения",                       СтрокаДанныеДокументов.СпособХранения);
		Отбор.Вставить("СерияТТН",                             СтрокаДанныеДокументов.СерияТТН);
		Отбор.Вставить("НомерТТН",                             СтрокаДанныеДокументов.НомерТТН);
		Отбор.Вставить("ДатаТТН",                              СтрокаДанныеДокументов.ДатаТТН);
		Отбор.Вставить("ТипТТН",                               СтрокаДанныеДокументов.ТипТТН);
		Отбор.Вставить("ГрузополучательХозяйствующийСубъект",  СтрокаДанныеДокументов.ГрузополучательХозяйствующийСубъект);
		Отбор.Вставить("ГрузополучательПредприятие",           СтрокаДанныеДокументов.ГрузополучательПредприятие);
		Отбор.Вставить("ГрузоотправительХозяйствующийСубъект", СтрокаДанныеДокументов.ГрузоотправительХозяйствующийСубъект);
		Отбор.Вставить("ГрузоотправительПредприятие",          СтрокаДанныеДокументов.ГрузоотправительПредприятие);
	Иначе
		Отбор.Вставить("Документ", ПараметрыВосстановления.ДокументДляВосстановления);
	КонецЕсли;
	
	// Подбор документа при ошибках сервиса.
	ДанныеДокументовДляВосстановления = ДокументДляВосстановления(
		ПараметрыВосстановления.ОбщиеДанные.Дата,
		Отбор,
		ПараметрыОбмена,
		"ИсходящаяТранспортнаяОперацияВЕТИС");
	
	Если ДанныеДокументовДляВосстановления <> Неопределено Тогда
		
		ЭтоАннулированиеВСД = Ложь;
		КоличествоПоСтроке = СтрокаДанныеДокументов.КоличествоВЕТИС;
		Если КоличествоПоСтроке < 0 Тогда
			КоличествоПоСтроке = - КоличествоПоСтроке;
			ЭтоАннулированиеВСД = Истина;
		КонецЕсли;
		
		Для Каждого ДанныеДокументаДляВосстановления Из ДанныеДокументовДляВосстановления Цикл
			
			Если ДанныеДокументаДляВосстановления.ДокументОбъект = Неопределено Тогда
				ДанныеДокументаДляВосстановления.ДокументОбъект = ДанныеДокументаДляВосстановления.Документ.ПолучитьОбъект();
			КонецЕсли;
			
			ДокументОбъект = ДанныеДокументаДляВосстановления.ДокументОбъект;
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			Отбор = Новый Структура;
			Отбор.Вставить("Продукция",               СтрокаДанныеДокументов.Продукция);
			Отбор.Вставить("КоличествоВЕТИС",         КоличествоПоСтроке);
			Отбор.Вставить("ЕдиницаИзмеренияВЕТИС",   ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена));
			Отбор.Вставить("ЗаписьСкладскогоЖурнала", СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала);
			
			НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаТЧ = НайденныеСтроки[0];
				
				Если ЭтоАннулированиеВСД 
					И СтрокаТЧ.ВетеринарноСопроводительныйДокумент = СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент Тогда
					
					// При отмене операции / аннулировании ВСД на сервере
					РасчетСтатусовОформленияВЕТИС.РассчитатьСтатусыОформленияВЕТИС(ДанныеДокументаДляВосстановления.Документ);
					
				Иначе
					// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
					// Документ будет получен в следующий итерации загрузки данных.
					ДокументОбъект.Заблокировать();
					
					СтрокаТЧ.ВетеринарноСопроводительныйДокумент = СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент;
					
					ДокументПолностьюВосстановлен = Истина;
					Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
						Если Не ЗначениеЗаполнено(СтрокаТЧ.ВетеринарноСопроводительныйДокумент) Тогда
							ДокументПолностьюВосстановлен = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					ДанныеДокументаДляВосстановления.ДокументПолностьюВосстановлен = ДокументПолностьюВосстановлен;
					ДанныеДокументаДляВосстановления.ДокументЧастичноВосстановлен  = Истина;
					
				КонецЕсли;
				
				Возврат Истина;
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура СформироватьДокументИсходящаяТранспортнаяОперацияВЕТИС(ПараметрыВосстановления, ПараметрыОбмена)
	
	ОбщиеДанные            = ПараметрыВосстановления.ОбщиеДанные;
	КСозданиюДокументов    = ПараметрыВосстановления.КСозданиюДокументов;
	СтрокаТаблицыЭлементов = ПараметрыВосстановления.СтрокаТаблицыЭлементов;
	СтрокаДанныеДокументов = ПараметрыВосстановления.СтрокаДанныеДокументов;
	
	//По аннулированному на момент создания ВСД лишних действий не требуется
	Если СтрокаДанныеДокументов.Статус = Перечисления.СтатусыВетеринарныхДокументовВЕТИС.Аннулирован Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ПеревозчикХозяйствующийСубъект",       СтрокаДанныеДокументов.ПеревозчикХозяйствующийСубъект);
	Реквизиты.Вставить("СпособХранения",                       СтрокаДанныеДокументов.СпособХранения);
	Реквизиты.Вставить("СерияТТН",                             СтрокаДанныеДокументов.СерияТТН);
	Реквизиты.Вставить("НомерТТН",                             СтрокаДанныеДокументов.НомерТТН);
	Реквизиты.Вставить("ДатаТТН",                              СтрокаДанныеДокументов.ДатаТТН);
	Реквизиты.Вставить("ТипТТН",                               СтрокаДанныеДокументов.ТипТТН);
	Реквизиты.Вставить("ГрузополучательХозяйствующийСубъект",  СтрокаДанныеДокументов.ГрузополучательХозяйствующийСубъект);
	Реквизиты.Вставить("ГрузополучательПредприятие",           СтрокаДанныеДокументов.ГрузополучательПредприятие);
	Реквизиты.Вставить("ГрузоотправительХозяйствующийСубъект", СтрокаДанныеДокументов.ГрузоотправительХозяйствующийСубъект);
	Реквизиты.Вставить("ГрузоотправительПредприятие",          СтрокаДанныеДокументов.ГрузоотправительПредприятие);
	
	ДокументОбъект = Неопределено;
	Если КСозданиюДокументов.ИсходящаяТранспортнаяОперацияВЕТИС.Количество() > 0 Тогда
		
		НайденныеСтроки = КСозданиюДокументов.ИсходящаяТранспортнаяОперацияВЕТИС.НайтиСтроки(Реквизиты);
		
		Индекс = НайденныеСтроки.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			ДанныеПоследнегоДокумента = НайденныеСтроки[Индекс];
			ДокументОбъект = ДанныеПоследнегоДокумента.ДокументОбъект;
			Прервать;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	// Стандартное создание, заполнение документа.
	Если ДокументОбъект = Неопределено Тогда
		
		// Создадим новый документ.
		ДокументОбъект = Документы.ИсходящаяТранспортнаяОперацияВЕТИС.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.ГрузоотправительХозяйствующийСубъект = ОбщиеДанные.ХозяйствующийСубъект;
		ДокументОбъект.Дата                                 = ОбщиеДанные.Дата;
		ДокументОбъект.ГрузоотправительПредприятие          = ОбщиеДанные.Предприятие;
		
		ИнформацияГрузоотправителя = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			ДокументОбъект.ГрузоотправительХозяйствующийСубъект, ДокументОбъект.ГрузоотправительПредприятие, "Грузоотправитель");
			
		ДокументОбъект.ТорговыйОбъект = ИнформацияГрузоотправителя.ТорговыйОбъект.Ссылка;
		
		Если ЗначениеЗаполнено(СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент) Тогда
			
			ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДанныеДокументов,,
				"ГрузоотправительХозяйствующийСубъект, ГрузоотправительПредприятие");
			
			РеквизитыВСД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент,
				"СвязанныеДокументы, Маршрут");
			
			// Перенесем связанные документы из ВСД в документ.
			СвязанныеДокументы = РеквизитыВСД.СвязанныеДокументы.Выгрузить();
			Если СвязанныеДокументы.Количество() > 0 Тогда
				ДокументОбъект.СвязанныеДокументы.Загрузить(СвязанныеДокументы);
				
				// Заполним документ-основание.
				ДокументОснование = ЗаполнениеДокументовВЕТИС.ДокументОснованиеПоДаннымСвязанныхДокументов(СвязанныеДокументы);
				Если Не ДокументОснование = Неопределено Тогда
					ДокументОбъект.ДокументОснование = ДокументОснование;
				КонецЕсли;
			КонецЕсли;
			
			// Перенесем маршрут из ВСД в документ.
			Маршрут = РеквизитыВСД.Маршрут.Выгрузить();
			Если Маршрут.Количество() > 0 Тогда
				ДокументОбъект.Маршрут.Загрузить(Маршрут);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.НомерТТН) Тогда
			ДокументОбъект.ТТНУказан = Истина;
		КонецЕсли;
		
		ДанныеПоследнегоДокумента = КСозданиюДокументов.ИсходящаяТранспортнаяОперацияВЕТИС.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеПоследнегоДокумента, Реквизиты);
		ДанныеПоследнегоДокумента.ДокументОбъект = ДокументОбъект;
		
	КонецЕсли;
	
	ТоварыСтрокаТЧ = ДокументОбъект.Товары.Добавить();
	ТоварыСтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(ТоварыСтрокаТЧ, СтрокаДанныеДокументов);
	
	Если Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС) Тогда
		ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена);
	КонецЕсли;
	
	// УпаковкиВЕТИС
	Если ЗначениеЗаполнено(СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий)
		И СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.batch.packageList <> Неопределено
		И СтрокаТаблицыЭлементов.ЭлементДанных.batch.packageList <> Неопределено Тогда
		
		// Таблица для свертки упаковок. Табличная часть не подходит, так как поле КоличествоУпаковокВЕТИС может быть < 0
		УпаковкиВЕТИС = Новый ТаблицаЗначений;
		УпаковкиВЕТИС.Колонки.Добавить("ИдентификаторСтрокиТовары");
		УпаковкиВЕТИС.Колонки.Добавить("УровеньУпаковки");
		УпаковкиВЕТИС.Колонки.Добавить("УпаковкаВЕТИС");
		УпаковкиВЕТИС.Колонки.Добавить("КоличествоУпаковокВЕТИС");
		
		Для Каждого УпаковкиЭлементДанных Из СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.batch.packageList.package Цикл
			
			УпаковкиСтрокаТЧ = УпаковкиВЕТИС.Добавить();
			УпаковкиСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
			УпаковкиСтрокаТЧ.УровеньУпаковки = ИнтеграцияВЕТИСПовтИсп.УровеньУпаковки(УпаковкиЭлементДанных.level);
			
			Если УпаковкиЭлементДанных.packingType <> Неопределено Тогда
				УпаковкиСтрокаТЧ.УпаковкаВЕТИС = ИнтеграцияВЕТИС.Упаковка(УпаковкиЭлементДанных.packingType, ПараметрыОбмена);
			КонецЕсли;
			
			УпаковкиСтрокаТЧ.КоличествоУпаковокВЕТИС = УпаковкиЭлементДанных.quantity;
			
		КонецЦикла;
		
		Для Каждого УпаковкиЭлементДанных Из СтрокаТаблицыЭлементов.ЭлементДанных.batch.packageList.package Цикл
			
			УпаковкиСтрокаТЧ = УпаковкиВЕТИС.Добавить();
			УпаковкиСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
			УпаковкиСтрокаТЧ.УровеньУпаковки = ИнтеграцияВЕТИСПовтИсп.УровеньУпаковки(УпаковкиЭлементДанных.level);
			
			Если УпаковкиЭлементДанных.packingType <> Неопределено Тогда
				УпаковкиСтрокаТЧ.УпаковкаВЕТИС = ИнтеграцияВЕТИС.Упаковка(УпаковкиЭлементДанных.packingType, ПараметрыОбмена);
			КонецЕсли;
			
			УпаковкиСтрокаТЧ.КоличествоУпаковокВЕТИС = -УпаковкиЭлементДанных.quantity;
			
		КонецЦикла;
		
		УпаковкиВЕТИС.Свернуть("ИдентификаторСтрокиТовары, УровеньУпаковки, УпаковкаВЕТИС", "КоличествоУпаковокВЕТИС");
		
		Для Каждого СтрокаТЧ Из УпаковкиВЕТИС Цикл
			
			УпаковкиСтрокаТЧ = ДокументОбъект.УпаковкиВЕТИС.Добавить();
			УпаковкиСтрокаТЧ.ИдентификаторСтрокиТовары = СтрокаТЧ.ИдентификаторСтрокиТовары;
			УпаковкиСтрокаТЧ.ИдентификаторСтроки       = Строка(Новый УникальныйИдентификатор);
			УпаковкиСтрокаТЧ.УровеньУпаковки           = СтрокаТЧ.УровеньУпаковки;
			УпаковкиСтрокаТЧ.УпаковкаВЕТИС             = СтрокаТЧ.УпаковкаВЕТИС;
			УпаковкиСтрокаТЧ.КоличествоУпаковокВЕТИС   = СтрокаТЧ.КоличествоУпаковокВЕТИС;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбъединениеЗаписейСкладскогоЖурналаВЕТИС

Функция ВосстановитьДокументОбъединениеЗаписейСкладскогоЖурналаВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, Статус)
	
	ОбщиеДанные            = ПараметрыВосстановления.ОбщиеДанные;
	СтрокаТаблицыЭлементов = ПараметрыВосстановления.СтрокаТаблицыЭлементов;
	СтрокаДанныеДокументов = ПараметрыВосстановления.СтрокаДанныеДокументов;
	
	Если ЗначениеЗаполнено(СтрокаТаблицыЭлементов.ЭлементДанныхСледующий)
		И (Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения
		Или Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеПрисоединения) Тогда
		// Получим создаваемую запись журнала.
		ЗаписьСкладскогоЖурнала = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(
			ПараметрыОбмена,
			"ЗаписиСкладскогоЖурналаВЕТИС",
			СтрокаТаблицыЭлементов.ЭлементДанныхСледующий.guid);
		ЕдиницаИзмерения = ИнтеграцияВЕТИС.ЕдиницаИзмерения(
			СтрокаТаблицыЭлементов.ЭлементДанныхСледующий.batch.unit.guid,
			ПараметрыОбмена);
	Иначе
		ЗаписьСкладскогоЖурнала = СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала;
		ЕдиницаИзмерения = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена);
	КонецЕсли;
	
	ВидПродукции = ЗаписьСкладскогоЖурнала.Продукция.ВидПродукции;
	
	Если Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОбъединения
		Или Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения Тогда
		СпособОбъединения = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Объединить;
	ИначеЕсли Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединения
		Или Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединенияАвтоматически
		Или Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеПрисоединения Тогда
		СпособОбъединения = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Присоединить;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДокументПолностьюВосстановлен", Ложь);
	Если ПараметрыВосстановления.ДокументДляВосстановления = Неопределено Тогда
		Отбор.Вставить("ХозяйствующийСубъект", ОбщиеДанные.ХозяйствующийСубъект);
		Отбор.Вставить("Предприятие",          ОбщиеДанные.Предприятие);
		Отбор.Вставить("ВидПродукции",         ВидПродукции);
		Отбор.Вставить("ЕдиницаИзмерения",     ЕдиницаИзмерения);
		Отбор.Вставить("СпособОбъединения",    СпособОбъединения);
		Если СпособОбъединения = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Присоединить Тогда
			Отбор.Вставить("ЗаписьСкладскогоЖурнала", ЗаписьСкладскогоЖурнала);
		КонецЕсли;
	Иначе
		Отбор.Вставить("Документ", ПараметрыВосстановления.ДокументДляВосстановления);
	КонецЕсли;
	
	// Подбор документа при ошибках сервиса.
	ЗаписьИспользованаВОперацииВосстановления = Ложь;
	ДанныеДокументовДляВосстановления = ДокументДляВосстановления(
		ОбщиеДанные.Дата,
		Отбор,
		ПараметрыОбмена,
		"ОбъединениеЗаписейСкладскогоЖурналаВЕТИС");
	
	Если ДанныеДокументовДляВосстановления <> Неопределено Тогда
		
		Для Каждого ДанныеДокументаДляВосстановления Из ДанныеДокументовДляВосстановления Цикл
			
			Если ДанныеДокументаДляВосстановления.ДокументОбъект = Неопределено Тогда
				ДанныеДокументаДляВосстановления.ДокументОбъект = ДанныеДокументаДляВосстановления.Документ.ПолучитьОбъект();
			КонецЕсли;
			
			ДокументОбъект = ДанныеДокументаДляВосстановления.ДокументОбъект;
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			Если ДокументОбъект.СпособОбъединения = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Объединить Тогда
				
				Если Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОбъединения
					И Не ЗначениеЗаполнено(ДокументОбъект.ЗаписьСкладскогоЖурнала) Тогда
					
					ДокументОбъект.ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурнала;
					
					ЗаписьИспользованаВОперацииВосстановления = Истина;
					
				ИначеЕсли Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения Тогда
					
					ОтборЗаписей = Новый Структура("ЗаписьСкладскогоЖурнала", СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала);
					НайденныеСтроки = ДокументОбъект.ОбъединяемыеЗаписиСкладскогоЖурнала.НайтиСтроки(ОтборЗаписей);
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						СтрокаТЧ = НайденныеСтроки[0];
						
						// Попробуем найти архивную запись по идентификатору версии
						// и актуальной записи.
						АрхивнаяЗапись = ИнтеграцияВЕТИС.АрхивнаяЗаписьСкладскогоЖурнала(
							СтрокаТЧ.ЗаписьСкладскогоЖурнала,
							СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.uuid);
						
						ДополнительныеПараметры = ИнтеграцияВЕТИС.ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала();
						ДополнительныеПараметры.РегистрироватьСинхронизацию       = Ложь;
						ДополнительныеПараметры.АктуальнаяЗаписьСкладскогоЖурнала = СтрокаТЧ.ЗаписьСкладскогоЖурнала;
						ДополнительныеПараметры.ПроверятьАктуальностьЗаписи       = Не ЗначениеЗаполнено(СтрокаТЧ.ЗаписьСкладскогоЖурнала);
						
						ДанныеЗаписиСкладскогоЖурналаАрхив = ИнтеграцияВЕТИС.ЗагрузитьЗаписьСкладскогоЖурнала(
							СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий,
							АрхивнаяЗапись,
							ОбщиеДанные.ХозяйствующийСубъект,
							ОбщиеДанные.Предприятие,
							ПараметрыОбмена, ДополнительныеПараметры);
						
						СтрокаТЧ.ЗаписьСкладскогоЖурналаАрхив = ДанныеЗаписиСкладскогоЖурналаАрхив.Ссылка;
						
						ЗаписьИспользованаВОперацииВосстановления = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ДокументОбъект.СпособОбъединения = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Присоединить Тогда
				
				Если Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединения
					Или Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединенияАвтоматически Тогда
					
					// Попробуем найти архивную запись по идентификатору версии
					// и актуальной записи.
					АрхивнаяЗапись = ИнтеграцияВЕТИС.АрхивнаяЗаписьСкладскогоЖурнала(
						ДокументОбъект.ЗаписьСкладскогоЖурнала,
						СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.uuid);
					
					ДополнительныеПараметры = ИнтеграцияВЕТИС.ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала();
					ДополнительныеПараметры.РегистрироватьСинхронизацию       = Ложь;
					ДополнительныеПараметры.АктуальнаяЗаписьСкладскогоЖурнала = ДокументОбъект.ЗаписьСкладскогоЖурнала;
					ДополнительныеПараметры.ПроверятьАктуальностьЗаписи       = Не ЗначениеЗаполнено(ДокументОбъект.ЗаписьСкладскогоЖурнала);
					
					ДанныеЗаписиСкладскогоЖурналаАрхив = ИнтеграцияВЕТИС.ЗагрузитьЗаписьСкладскогоЖурнала(
						СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий,
						АрхивнаяЗапись,
						ОбщиеДанные.ХозяйствующийСубъект,
						ОбщиеДанные.Предприятие,
						ПараметрыОбмена, ДополнительныеПараметры);
					
					ДокументОбъект.ЗаписьСкладскогоЖурналаАрхив = ДанныеЗаписиСкладскогоЖурналаАрхив.Ссылка;
					
					ЗаписьИспользованаВОперацииВосстановления = Истина;
					
				ИначеЕсли Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеПрисоединения Тогда
					
					ОтборЗаписей = Новый Структура("ЗаписьСкладскогоЖурнала", СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала);
					НайденныеСтроки = ДокументОбъект.ОбъединяемыеЗаписиСкладскогоЖурнала.НайтиСтроки(ОтборЗаписей);
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						СтрокаТЧ = НайденныеСтроки[0];
						
						// Попробуем найти архивную запись по идентификатору версии
						// и актуальной записи.
						АрхивнаяЗапись = ИнтеграцияВЕТИС.АрхивнаяЗаписьСкладскогоЖурнала(
							СтрокаТЧ.ЗаписьСкладскогоЖурнала,
							СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.uuid);
						
						ДополнительныеПараметры = ИнтеграцияВЕТИС.ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала();
						ДополнительныеПараметры.РегистрироватьСинхронизацию       = Ложь;
						ДополнительныеПараметры.АктуальнаяЗаписьСкладскогоЖурнала = СтрокаТЧ.ЗаписьСкладскогоЖурнала;
						ДополнительныеПараметры.ПроверятьАктуальностьЗаписи       = Не ЗначениеЗаполнено(СтрокаТЧ.ЗаписьСкладскогоЖурнала);
						
						ДанныеЗаписиСкладскогоЖурналаАрхив = ИнтеграцияВЕТИС.ЗагрузитьЗаписьСкладскогоЖурнала(
							СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий,
							АрхивнаяЗапись,
							ОбщиеДанные.ХозяйствующийСубъект,
							ОбщиеДанные.Предприятие,
							ПараметрыОбмена, ДополнительныеПараметры);
						
						СтрокаТЧ.ЗаписьСкладскогоЖурналаАрхив = ДанныеЗаписиСкладскогоЖурналаАрхив.Ссылка;
						
						ЗаписьИспользованаВОперацииВосстановления = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗаписьИспользованаВОперацииВосстановления Тогда
				
				ДокументПолностьюВосстановлен = Истина;
				Для Каждого СтрокаТЧ Из ДокументОбъект.ОбъединяемыеЗаписиСкладскогоЖурнала Цикл
					Если Не ЗначениеЗаполнено(СтрокаТЧ.ЗаписьСкладскогоЖурналаАрхив) Тогда
						ДокументПолностьюВосстановлен = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ДокументОбъект.СпособОбъединения = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Объединить Тогда
					
					Если Не ЗначениеЗаполнено(ДокументОбъект.ЗаписьСкладскогоЖурнала) Тогда
						ДокументПолностьюВосстановлен = Ложь;
						Прервать;
					КонецЕсли;
					
				ИначеЕсли ДокументОбъект.СпособОбъединения = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Присоединить Тогда
					
					Если Не ЗначениеЗаполнено(ДокументОбъект.ЗаписьСкладскогоЖурналаАрхив) Тогда
						ДокументПолностьюВосстановлен = Ложь;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
				ДанныеДокументаДляВосстановления.ДокументПолностьюВосстановлен = ДокументПолностьюВосстановлен;
				ДанныеДокументаДляВосстановления.ДокументЧастичноВосстановлен  = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗаписьИспользованаВОперацииВосстановления;
	
КонецФункции

Процедура СформироватьДокументОбъединениеЗаписейСкладскогоЖурналаВЕТИС(ПараметрыВосстановления, ПараметрыОбмена, Статус)
	
	ОбщиеДанные            = ПараметрыВосстановления.ОбщиеДанные;
	КСозданиюДокументов    = ПараметрыВосстановления.КСозданиюДокументов;
	СтрокаТаблицыЭлементов = ПараметрыВосстановления.СтрокаТаблицыЭлементов;
	СтрокаДанныеДокументов = ПараметрыВосстановления.СтрокаДанныеДокументов;
	
	Если ЗначениеЗаполнено(СтрокаТаблицыЭлементов.ЭлементДанныхСледующий)
		И (Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения
		Или Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеПрисоединения) Тогда
		// Получим создаваемую запись журнала.
		ЗаписьСкладскогоЖурнала = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(
			ПараметрыОбмена,
			"ЗаписиСкладскогоЖурналаВЕТИС",
			СтрокаТаблицыЭлементов.ЭлементДанныхСледующий.guid);
		ЕдиницаИзмерения = ИнтеграцияВЕТИС.ЕдиницаИзмерения(
			СтрокаТаблицыЭлементов.ЭлементДанныхСледующий.batch.unit.guid,
			ПараметрыОбмена);
	Иначе
		ЗаписьСкладскогоЖурнала = СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала;
		ЕдиницаИзмерения = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена);
	КонецЕсли;
	
	ВидПродукции = ЗаписьСкладскогоЖурнала.Продукция.ВидПродукции;
	
	Если Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОбъединения
		Или Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения Тогда
		СпособОбъединения = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Объединить;
	ИначеЕсли Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединения
		Или Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединенияАвтоматически
		Или Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеПрисоединения Тогда
		СпособОбъединения = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Присоединить;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ХозяйствующийСубъект", ОбщиеДанные.ХозяйствующийСубъект);
	Реквизиты.Вставить("Предприятие",          ОбщиеДанные.Предприятие);
	Реквизиты.Вставить("СпособОбъединения",    СпособОбъединения);
	Реквизиты.Вставить("ВидПродукции",         ВидПродукции);
	Реквизиты.Вставить("ЕдиницаИзмерения",     ЕдиницаИзмерения);
	Если СпособОбъединения = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Присоединить Тогда
		Реквизиты.Вставить("ЗаписьСкладскогоЖурнала", ЗаписьСкладскогоЖурнала);
	КонецЕсли;
	
	ДокументОбъект = Неопределено;
	Если КСозданиюДокументов.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС.Количество() > 0 Тогда
		
		НайденныеСтроки = КСозданиюДокументов.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС.НайтиСтроки(Реквизиты);
		
		Индекс = НайденныеСтроки.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			ДанныеПоследнегоДокумента = НайденныеСтроки[Индекс];
			
			Если ((ЗначениеЗаполнено(ДанныеПоследнегоДокумента.ДокументОбъект.ЗаписьСкладскогоЖурнала)
				И ДанныеПоследнегоДокумента.ДокументОбъект.ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурнала)
				Или (Не ЗначениеЗаполнено(ДанныеПоследнегоДокумента.ДокументОбъект.ЗаписьСкладскогоЖурнала)))
				И ОбщиеДанные.Дата - ДанныеПоследнегоДокумента.Дата <= 15 Тогда
				// Последний созданный в рамках текущей транзакции документ
				ДокументОбъект = ДанныеПоследнегоДокумента.ДокументОбъект;
				Прервать;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		
		// Новый документ
		ДокументОбъект = Документы.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ОбщиеДанные);
		
		ДокументОбъект.СпособОбъединения = СпособОбъединения;
		
		ДанныеПоследнегоДокумента = КСозданиюДокументов.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеПоследнегоДокумента, Реквизиты);
		ДанныеПоследнегоДокумента.Дата              = ОбщиеДанные.Дата;
		ДанныеПоследнегоДокумента.ДокументОбъект    = ДокументОбъект;
		
	КонецЕсли;
	
	ДокументОбъект.СпособОбъединения       = СпособОбъединения;
	ДокументОбъект.ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурнала;
	ДокументОбъект.Продукция               = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьСкладскогоЖурнала, "Продукция");
	ДокументОбъект.ЕдиницаИзмерения        = ЕдиницаИзмерения;

	Если Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ЗаписьСкладскогоЖурнала", СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала);
		
		НайденныеСтроки = ДокументОбъект.ОбъединяемыеЗаписиСкладскогоЖурнала.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТЧ = ДокументОбъект.ОбъединяемыеЗаписиСкладскогоЖурнала.Добавить();
			СтрокаТЧ.ЗаписьСкладскогоЖурнала = СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//Подбирает подходящий документ из таблиц документов для восстановления по правилам:
//   * Совпадает тип восстанавливаемого документа.
//   * Совпадают ключевые поля восстанавливаемого документа.
//   * Дата создания документа расходится с датой запроса не более чем на 15 секунд.
//
//Параметры:
//   ДатаЭлемента    - Дата      - Дата запроса на оформление документа.
//   Отбор           - Структура - параметры отбора для поиска подходящих документов для восстановления.
//   ПараметрыОбмена - Структура - (см. ИнтеграцияВЕТИС.ПараметрыОбмена).
//   ТипДокумента    - Строка    - тип подбираемого документа.
//  БезОграниченияДатыНазад - Булево - если Истина, то выполняется поиск подходящего документа без ограничения в 15 
//    секунд от даты операции (для возвратного ВСД ищем входящую операцию которая может быть раньше).
//
// Возвращаемое значение:
//  Неопределено, Массив Из ДокументСсылка - Документ, который требуется заполнить данными не полученными из-за ошибки сервиса.
//
Функция ДокументДляВосстановления(ДатаЭлемента, Отбор, ПараметрыОбмена, ТипДокумента, БезОграниченияДатыНазад = Ложь) Экспорт
	
	Если ПараметрыОбмена.ДокументыДляВосстановления[ТипДокумента] = Неопределено
		Или ПараметрыОбмена.ДокументыДляВосстановления[ТипДокумента].Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПодходящиеДокументы = Новый ТаблицаЗначений;
	ПодходящиеДокументы.Колонки.Добавить("Дельта");
	ПодходящиеДокументы.Колонки.Добавить("ЭлементДанных");
	
	НайденныеСтроки = ПараметрыОбмена.ДокументыДляВосстановления[ТипДокумента].НайтиСтроки(Отбор);
	Для Каждого ЭлементДанных Из НайденныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементДанных.ДатаСоздания) Тогда
			ДанныеФормированияРезультата = ИнтеграцияВЕТИС.ДатаФормированияРезультатаПоСсылке(ЭлементДанных.Документ, ПараметрыОбмена);
			Если ДанныеФормированияРезультата = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЭлементДанных.ДатаСоздания = МестноеВремя(ДанныеФормированияРезультата.Дата);
		КонецЕсли;
		
		Дельта = ЭлементДанных.ДатаСоздания - ДатаЭлемента - ПараметрыОбмена.ОтклонениеВремениМеждуСерверами;
		Если Дельта < 0 Тогда
			Дельта = -Дельта;
		КонецЕсли;
		
		Если Дельта <= 15 Или (БезОграниченияДатыНазад И ЭлементДанных.ДатаСоздания < ДатаЭлемента) Тогда
			СтрокаТЧ = ПодходящиеДокументы.Добавить();
			СтрокаТЧ.Дельта        = Дельта;
			СтрокаТЧ.ЭлементДанных = ЭлементДанных;
		КонецЕсли;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение = Неопределено;
	Если ПодходящиеДокументы.Количество() Тогда
		
		ПодходящиеДокументы.Сортировать("Дельта ВОЗР");
		
		ВозвращаемоеЗначение = Новый Массив;
		Для Каждого СтрокаТЧ Из ПодходящиеДокументы Цикл
			ВозвращаемоеЗначение.Добавить(СтрокаТЧ.ЭлементДанных);
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПроводитьДокументКомментарий(ДокументОбъект)
	
	// Контроль заполнения полей "Количество" и "Количество (ВЕТИС)"
	ИмяТЧ = "Товары";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, ИмяТЧ) Тогда
		
		ПредставлениеТЧ = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТЧ].Синоним;
		ШаблонСообщения =
		НСтр("ru = 'Должны быть заполнены оба поля ""%1"" и ""%2"" для продукции ""%3"" в строке %4 списка ""%5"" в документе'");
		
		Если ДокументОбъект[ИмяТЧ].Количество() Тогда
			ЕстьКоличество = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			    ДокументОбъект[ИмяТЧ][0], "Количество");
			ЕстьКоличествоИзменение = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			    ДокументОбъект[ИмяТЧ][0], "КоличествоИзменение");
			ЕстьКоличествоВЕТИС = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			    ДокументОбъект[ИмяТЧ][0], "КоличествоВЕТИС");
			ЕстьКоличествоИзменениеВЕТИС = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			    ДокументОбъект[ИмяТЧ][0], "КоличествоИзменениеВЕТИС");
		КонецЕсли;
		
		Для каждого ТекущаяСтрока Из ДокументОбъект[ИмяТЧ] Цикл
			
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения,
				НСтр("ru = 'Количество'"),
				НСтр("ru = 'Количество (ВетИС)'"),
				ТекущаяСтрока.Продукция,
				ТекущаяСтрока.НомерСтроки,
				ПредставлениеТЧ);
			
			Если ЕстьКоличество И ЕстьКоличествоВЕТИС Тогда	
				Если Не (ЗначениеЗаполнено(ТекущаяСтрока.Количество) И ЗначениеЗаполнено(ТекущаяСтрока.КоличествоВЕТИС)) Тогда
					
					Возврат ТекстСообщения;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьКоличествоИзменение И ЕстьКоличествоИзменениеВЕТИС Тогда
				Если Не (ЗначениеЗаполнено(ТекущаяСтрока.КоличествоИзменение)
					И ЗначениеЗаполнено(ТекущаяСтрока.КоличествоИзменениеВЕТИС)) Тогда
					
					Возврат ТекстСообщения;
					
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат "";

КонецФункции

Процедура ПровестиЗаписатьДокумент(ДокументОбъект)
	
	Попытка
		ПроводитьДокументКомментарий = ПроводитьДокументКомментарий(ДокументОбъект);
		
		ДокументОбъект.Записать(
			?(ПроводитьДокументКомментарий = "", РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	Исключение
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ТекстОшибки = НСтр("ru = 'При проведении документа %1, произошла ошибка:
		                         |%2'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(ТекстОшибки,
				ДокументОбъект.Ссылка,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		ИнтеграцияВЕТИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтрШаблон(ТекстОшибки,
				ДокументОбъект.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ТребуетсяУказаниеДняПериода(Данные, ИмяПоля)
	
	Если Данные[ИмяПоля + "ТочностьЗаполнения"] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Данные[ИмяПоля + "ТочностьЗаполнения"] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ТребуетсяУказаниеЧасаПериода(Данные, ИмяПоля)
	
	Если Данные[ИмяПоля + "ТочностьЗаполнения"] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПереопределяемоеЗаполнениеРеквизитов

// Заполняет в табличных частях документы Количество, Статус указания серий
//
// Параметры:
//   ДокументОбъект - ДокументОбъект - заполняемый объект
//
Процедура ПересчитатьПрикладныеРеквизитыДокумента(ДокументОбъект)
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		
		ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИСВТаблице(ДокументОбъект.Сырье);
		ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИСВТаблице(ДокументОбъект.Товары);
		
		ПараметрыУказанияСерий = Документы.ПроизводственнаяОперацияВЕТИС.ПараметрыУказанияСерий(ДокументОбъект);
		Если ПараметрыУказанияСерий <> Неопределено Тогда
			ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.Сырье);
			ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.Товары);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИСВТаблице(ДокументОбъект.Товары);
		
		ПараметрыУказанияСерий = Документы.ИсходящаяТранспортнаяОперацияВЕТИС.ПараметрыУказанияСерий(ДокументОбъект);
		
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИнвентаризацияПродукцииВЕТИС") Тогда
		
		ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИСВТаблице(ДокументОбъект.Товары, "Изменение");
		
		ПараметрыУказанияСерий = Документы.ИнвентаризацияПродукцииВЕТИС.ПараметрыУказанияСерий(ДокументОбъект);
		
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИСВТаблице(ДокументОбъект.Товары);
		
		ПараметрыУказанияСерий = Документы.ВходящаяТранспортнаяОперацияВЕТИС.ПараметрыУказанияСерий(ДокументОбъект);
		
		Если ПараметрыУказанияСерий <> Неопределено Тогда
			ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.Товары);
			ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.ТоварыУточнение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти