#Область СлужебныйПрограммныйИнтерфейс

// Посылает стандартное оповещение всем созданным формам о записи элемента справочника Организации.
// Следует использовать после записи организации из форм.
//
// Параметры:
//  Организация		 - СправочникСсылка.Организации - записанный элемент справочника
//  ПараметрыЗаписи	 - Структура - параметры записи, заданные при вызове метода Записать() формы организации
//
Процедура ОповеститьОЗаписи(Организация, ПараметрыЗаписи) Экспорт
	
	Оповестить("Запись_Организации", ПараметрыЗаписи, Организация);
	
КонецПроцедуры

#Область ЗаполнениеДаннымиЕГР

// Подключаемый обработчик результата запроса сведений об организации из открытых данных (ЕГР).
// Запрос следует выполнять с помощью ЗапроситьДанныеЕГР().
//
// Подключать обработчик следует при изменении поля поиска по ИНН.
//
// Обработчик инициализирует диалог с пользователем и фактическое заполнение данными из ЕГР,
// если до его срабатывания пользователь не нажал явно команду заполнения,
// обрабатываемую в ЗаполнитьРеквизитыПоПолюПоискаИНН().
//
// Так обеспечивается, что заполнение инициируется любым из двух способов
// - просто по вводу ИНН в поле поиска
// - по вводу ИНН и нажатию команды "Заполнить"
//
// Параметры:
//  ПоискИННОтвет		 - см. НовыйОтветДанныхЕГР() - результат запроса сведений из открытых данных
//  ОписаниеОповещения	 - ОписаниеОповещения - 
//                         процедура модуля формы, обеспечивающая контекстный вызов процедуры заполнения 
//                         полученными открытыми данными реквизитов формы.
//                         Эта процедура должна вызвать функцию ЗакончитьЗаполнениеДаннымиЕГР(),
//                         а затем может выполнить контекстный вызов, в котором вызвать ЗаполнитьДаннымиЕГР()
//
Процедура ОбработатьРезультатПоискаИННПриИзмененииПоляПоиска(ПоискИННОтвет, ОписаниеОповещения, ПоказыватьОшибкиИнтернетПоддержки = Ложь) Экспорт
	
	ОбработатьРезультатПоискаЕГР(
		ПоискИННОтвет,
		ОписаниеОповещения,
		Ложь, // Заполнение без нажатия кнопки, поэтому поменьше говорим с пользователем
		ПоказыватьОшибкиИнтернетПоддержки);
	
КонецПроцедуры

// Обработчик команды заполнения сведений об организации из открытых данных (ЕГР), связанной с полем поиска.
// Подробнее см. ОбработатьРезультатПоискаИННПриИзмененииПоляПоиска()
//
// Параметры:
//  ПоискИННЗапрос		 - см. НовыйЗапросДанныхЕГР() - сведения, введенные в форме и позволяющие идентифицировать организацию, данные которой запрошены
//  ПоискИННОтвет		 - см. НовыйОтветДанныхЕГР() - результат запроса сведений из открытых данных.
//                         Данные могут быть запрошены предварительно в ОбработатьРезультатПоискаИННПриИзмененииПоляПоиска()
//                         Если не были запрошены, то будут запрошены в этой процедуре; результат запроса будет помещен в ПоискИННОтвет
//  ОписаниеОповещения	 - ОписаниеОповещения - см. одноименный параметр в ОбработатьРезультатПоискаИННПриИзмененииПоляПоиска()
//  ТекущийЭлемент		 - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - значение свойства ТекущийЭлемент управляемой формы.
//                         Может быть изменен - текущим может быть установлен элемент формы для ввода ИНН
//  ЭлементПолеВводаИНН	 - ПолеВвода - элемент формы для ввода ИНН, по которому выполняется запрос
//
Процедура ЗаполнитьРеквизитыПоПолюПоискаИНН(ПоискИННЗапрос, ПоискИННОтвет, ОписаниеОповещения, ТекущийЭлемент, ЭлементПолеВводаИНН) Экспорт
	
	Если ЗначениеЗаполнено(ПоискИННОтвет) Тогда
		ОбработатьРезультатПоискаЕГР(ПоискИННОтвет, ОписаниеОповещения, Истина, Истина);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоИНН(ПоискИННЗапрос, ПоискИННОтвет, ОписаниеОповещения, ТекущийЭлемент, ЭлементПолеВводаИНН);
	
КонецПроцедуры

// Обработчик команды заполнения сведений об организации из открытых данных (ЕГР), не связанной с полем поиска.
//
// Начинает запрос данных для заполнения, затем передает управление в ОписаниеОповещения.
//
// Описание параметров см. в ЗаполнитьРеквизитыПоПолюПоискаИНН()
// Требования к ОписаниеОповещения см. в ОбработатьРезультатПоискаИННПриИзмененииПоляПоиска()
//
Процедура ЗаполнитьРеквизитыПоИНН(ПоискИННЗапрос, ПоискИННОтвет, ОписаниеОповещения, ТекущийЭлемент, ЭлементПолеВводаИНН) Экспорт
	
	Если ПустаяСтрока(ПоискИННЗапрос.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Введите ИНН'"));
		ТекущийЭлемент = ЭлементПолеВводаИНН;
		Возврат;
	КонецЕсли;
	
	ПоискИННОтвет = ОрганизацииФормыДляОтчетностиВызовСервера.ЗапроситьДанныеЕГР(ПоискИННЗапрос);
	ОбработатьРезультатПоискаЕГР(ПоискИННОтвет, ОписаниеОповещения, Истина, Истина);
	
КонецПроцедуры

// Клиентская часть обработчика заполнения организации данными, полученными из гос.реестра.
// См. также НачатьЗаполнениеДаннымиЕГР()
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения - форма справочника Организации: 
//                                 РеквизитыОрганизацииДляОтчетности или РеквизитыПредпринимателяДляОтчетности
//  ЮридическоеФизическоеЛицо	 - ПеречислениеСсылка.ЮридическоеФизическоеЛицо - вид организации,
//                                 редактировавшейся в форме.
//                                 По виду проверяется, подходит ли открытая форма для заполнения полученными данными.
//                                 Если не подходит, то открывается другая форма.
//  Ответ						 - КодВозвратаДиалога - результат выбора пользователя в НачатьЗаполнениеДаннымиЕГР()
//  ПараметрыЗаполнения			 - Структура - результат запроса данных; 
//                                 должна содержать свойство ПоискИННОтвет (см. ПоискИННОтвет()).
//                                 Оборачивание в структуру выполнено в НачатьЗаполнениеДаннымиЕГР()
//                                 для передачи данных через обработчик оповещения в диалоге с пользователем.
// 
// Возвращаемое значение:
//  Булево - Истина, если целесообразно продолжить заполнение на сервере - выполнить контекстный вызов с ЗаполнитьДаннымиЕГР()
//
Функция ЗакончитьЗаполнениеДаннымиЕГР(Форма, ЮридическоеФизическоеЛицо, Ответ, ПараметрыЗаполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаполнения.Свойство("ПоискИННОтвет") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоискИННОтвет = ПараметрыЗаполнения.ПоискИННОтвет;
	
	Если ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) 
		И ПоискИННОтвет.КраткиеДанные.ЮридическоеФизическоеЛицо <> ЮридическоеФизическоеЛицо Тогда
		
		// Откроем другую форму
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",          Форма.Объект.Ссылка);
		ПараметрыФормы.Вставить("Назначение",    "ДляОтчетности");
		ПараметрыФормы.Вставить("ПоискИННОтвет", ПоискИННОтвет);
		ОткрытьФорму(
			"Справочник.Организации.ФормаОбъекта",
			ПараметрыФормы,
			Форма.ВладелецФормы,
			Форма.УникальныйИдентификатор);
			
		// А эту - закроем
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина; // Требуется контекстный вызов, который должен быть реализован в форме
	
КонецФункции

// Повторно начинает заполнение реквизитов по ИНН после подключения интернет-поддержки.
//
// Параметры:
//  РезультатПодключения - см. ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей()
//  ПараметрыЗаполнения	 - Структура - Содержит ключи:
//    * Запрос - см. ПоискИННЗапрос()
//    * ОбработчикЗавершенияЗаполнения - обработчик формы, который передаст управление на сервер для заполнения объекта
//
Процедура ПовторноЗаполнитьРеквизитыПоИНН(РезультатПодключения, ПараметрыЗаполнения) Экспорт
	
	Если РезультатПодключения.ПовторитьДействие Тогда
		
		ПоискИННОтвет = ОрганизацииФормыДляОтчетностиВызовСервера.ЗапроситьДанныеЕГР(ПараметрыЗаполнения.Запрос);
		
		ОбработатьРезультатПоискаЕГР(ПоискИННОтвет, ПараметрыЗаполнения.ОбработчикЗавершенияЗаполнения, Истина, Истина);
		
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыЗаполнения.ОбработчикЗавершенияЗаполнения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеКлассификаторы

// Обработчик начала выбора кода из классификатора:
// - открывает форму выбора
// - после выбора в форме вызывает ВыбратьКодИзКлассификатораЗавершение(),
//   который заполняет выбранным значением код и наименование по классификатору
//
// Параметры:
//  ИмяКлассификатора		 - Строка - имя классификатора: ОКФС, ОКОПФ, ОКВЭД, ОКВЭД2
//  ИмяРеквизитаКод			 - Строка - имя реквизита Объекта, в котором хранится код по классификатору
//  ИмяРеквизитаНаименование - Строка - имя реквизита Объекта, в котором хранится наименование по классификатору
//  Форма					 - ФормаКлиентскогоПриложения - форма, отображающая Объект (при успешном выборе в ней будет установлена модифицированность)
//  Объект					 - ДанныеФормыКоллекция - данные формы, отображающие элемент справочника Организации
//  СтандартнаяОбработка	 - Булево - соответствующий параметр обработчика события
//	ОбработчикВыбора         - ОписаниеОповещения - Обработчик, вызываемый после выбора значения кода.
//								Параметры:
//									* Результат - Строка - Выбранный код.
//									* ДополнительныеПараметры - Произвольный - Дополнительные параметры обработчика.
//
Процедура ВыбратьКодИзКлассификатора(ИмяКлассификатора, ИмяРеквизитаКод, ИмяРеквизитаНаименование, Форма, Объект, СтандартнаяОбработка, ОбработчикВыбора = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
 	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта",      "Справочник");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "Организации");
	ПараметрыФормы.Вставить("НазваниеМакета",  ИмяКлассификатора);
	ПараметрыФормы.Вставить("ТекущийПериод",   ТекущаяДата());
	ПараметрыФормы.Вставить("ТекущийКод",      Объект[ИмяРеквизитаКод]);
	
	ПараметрыЗавершенияВыбора = Новый Структура;
	ПараметрыЗавершенияВыбора.Вставить("Форма",                    Форма);
	ПараметрыЗавершенияВыбора.Вставить("Объект",                   Объект);
	ПараметрыЗавершенияВыбора.Вставить("ИмяКлассификатора",        ИмяКлассификатора);
	ПараметрыЗавершенияВыбора.Вставить("ИмяРеквизитаКод",          ИмяРеквизитаКод);
	ПараметрыЗавершенияВыбора.Вставить("ИмяРеквизитаНаименование", ИмяРеквизитаНаименование);
	ПараметрыЗавершенияВыбора.Вставить("ОбработчикВыбора",         ОбработчикВыбора);
		
	ОповещениеОВыборе = Новый ОписаниеОповещения(
		"ВыбратьКодИзКлассификатораЗавершение",
		ОрганизацииФормыДляОтчетностиКлиент,
		ПараметрыЗавершенияВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,, ОповещениеОВыборе);
	
КонецПроцедуры

// Обработчик выбора - подключается в ВыбратьКодИзКлассификатора()
//
Процедура ВыбратьКодИзКлассификатораЗавершение(ВыбранныйКод, ПараметрыЗавершенияВыбора) Экспорт
	
	Если ВыбранныйКод <> Неопределено Тогда
		ПараметрыЗавершенияВыбора.Форма.ПодсказкаОКВЭД2 = "";
		ПараметрыЗавершенияВыбора.Форма.Модифицированность = Истина;
		
		ПараметрыЗавершенияВыбора.Объект[ПараметрыЗавершенияВыбора.ИмяРеквизитаКод]          = ВыбранныйКод;
		ПараметрыЗавершенияВыбора.Объект[ПараметрыЗавершенияВыбора.ИмяРеквизитаНаименование] = 
			ОрганизацииФормыДляОтчетностиВызовСервера.НаименованиеПоКлассификатору(
				ПараметрыЗавершенияВыбора.ИмяКлассификатора,
				ВыбранныйКод);
	КонецЕсли;
		
	Если ПараметрыЗавершенияВыбора.ОбработчикВыбора <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыЗавершенияВыбора.ОбработчикВыбора, ВыбранныйКод);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СистемаНалогообложения

// Обработчик начала изменения системы налогообложения:
// - открывает форму выбора
// - после выбора в форме вызывает ЗавершитьИзменениеСистемыНалогообложения(),
//   который заполняет переданный реквизит формы новым представлением системы налогообложения.
//
// Параметры:
//  Организация		          - СправочникСсылка.Организации - организация, систему налогообложения которой нужно поменять
//  Форма					  - ФормаКлиентскогоПриложения - форма, отображающая представление системы налогообложения
//  ИмяРеквизитаПредставление - Строка - имя реквизита Формы, хранящего представление системы налогообложения
//  СтандартнаяОбработка	  - Булево - соответствующий параметр обработчика события
//
Процедура НачатьИзменениеСистемыНалогообложения(Организация, Форма, ИмяРеквизитаПредставление, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Организация);
	ПараметрыФормы.Вставить("РежимНастройки",   Истина);
	ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
	
	ПараметрыЗавершенияВыбора = Новый Структура;
	ПараметрыЗавершенияВыбора.Вставить("Форма",                     Форма);
	ПараметрыЗавершенияВыбора.Вставить("ИмяРеквизитаПредставление", ИмяРеквизитаПредставление);
	ПараметрыЗавершенияВыбора.Вставить("Организация",               Организация);
	
	ОповещениеОВыборе = Новый ОписаниеОповещения(
		"ЗавершитьИзменениеСистемыНалогообложения",
		ОрганизацииФормыДляОтчетностиКлиент,
		ПараметрыЗавершенияВыбора);
	
	ОткрытьФорму("ОбщаяФорма.НалогиИОтчеты", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор, , , ОповещениеОВыборе);
		
КонецПроцедуры

// Обработчик выбора - подключается в НачатьИзменениеСистемыНалогообложения()
//
Процедура ЗавершитьИзменениеСистемыНалогообложения(ВыбранноеЗначение, ПараметрыЗавершенияВыбора) Экспорт
	
	ПараметрыЗавершенияВыбора.Форма[ПараметрыЗавершенияВыбора.ИмяРеквизитаПредставление] = 
		ОрганизацииФормыКлиентСервер.ПредставлениеСистемыНалогообложения(ПараметрыЗавершенияВыбора.Организация);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДаннымиЕГР

Процедура ОбработатьРезультатПоискаЕГР(ПоискИННОтвет, ЗакончитьЗаполнениеДаннымиЕГР, АктивныйДиалогСПользователем, ПоказыватьОшибкиИнтернетПоддержки)

	Если ТипЗнч(ПоискИННОтвет) <> Тип("Структура") Тогда
		// Результат уже обработан
		Возврат;
	КонецЕсли;
	
	НачатьЗаполнениеДаннымиЕГР(
		ПоискИННОтвет,
		ЗакончитьЗаполнениеДаннымиЕГР,
		АктивныйДиалогСПользователем,
		ПоказыватьОшибкиИнтернетПоддержки);
	
	ПоискИННОтвет = Неопределено;

КонецПроцедуры 

Процедура НачатьЗаполнениеДаннымиЕГР(ПоискИННОтвет, ЗакончитьЗаполнениеДаннымиЕГР, АктивныйДиалогСПользователем, ПоказыватьОшибкиИнтернетПоддержки)
	
	Если Не ПустаяСтрока(ПоискИННОтвет.Ошибка.Код) Тогда
		
		// Коды ошибок - из ЗапроситьДанныеЕГР()
		Если ПоискИННОтвет.Ошибка.Код = "НеСоответствуетТребованиям" Тогда
			
			Если АктивныйДиалогСПользователем Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Введите корректный ИНН'"));
			КонецЕсли;
			
		ИначеЕсли ПоказыватьОшибкиИнтернетПоддержки Тогда
			
			ОбработатьОшибкуИнтернетПоддержки(ПоискИННОтвет.Ошибка.Код, ПоискИННОтвет, ЗакончитьЗаполнениеДаннымиЕГР);
			
		КонецЕсли;
		
	ИначеЕсли Не ПустаяСтрока(ПоискИННОтвет.Ошибка.Описание) Тогда
		
		Если ПоказыватьОшибкиИнтернетПоддержки Тогда
			ПоказатьПредупреждение(, ПоискИННОтвет.Ошибка.Описание);
		КонецЕсли;
		
	Иначе
		
		ЗакончитьЗаполнениеДаннымиЕГР.ДополнительныеПараметры.Вставить("ПоискИННОтвет", ПоискИННОтвет);
		
		Если Не ПоискИННОтвет.Запрос.ОбъектЗаполнен Тогда
		
			// Заполняем без диалога с пользователем
			ВыполнитьОбработкуОповещения(ЗакончитьЗаполнениеДаннымиЕГР, КодВозвратаДиалога.Да);
		
		Иначе
		
			Если ПоискИННОтвет.КраткиеДанные.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
				ФормаОрганизацииБизнеса = НСтр("ru='предпринимателя'");
			Иначе
				ФормаОрганизацииБизнеса = НСтр("ru='юридического лица'");
			КонецЕсли;
			
			ТекстВопроса =
				СтрШаблон(НСтр("ru='Заполнить по ИНН %1 %2?'"), 
				ФормаОрганизацииБизнеса,
				ПоискИННОтвет.КраткиеДанные.НаименованиеОрганизации);
				
			ПоказатьВопрос(ЗакончитьЗаполнениеДаннымиЕГР, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработатьОшибкуИнтернетПоддержки(ОписаниеОшибки, ПоискИННОтвет, ОбработчикЗавершенияЗаполнения) Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Запрос",                         ПоискИННОтвет.Запрос);
	ПараметрыЗаполнения.Вставить("ОбработчикЗавершенияЗаполнения", ОбработчикЗавершенияЗаполнения);
	ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
		"ПовторноЗаполнитьРеквизитыПоИНН",
		ОрганизацииФормыДляОтчетностиКлиент,
		ПараметрыЗаполнения);
	
	ДополнительныеПараметрыОбработкиОшибки =
		РаботаСКонтрагентамиКлиент.НовыйДополнительныеПараметрыОбработкиОшибки();
	ДополнительныеПараметрыОбработкиОшибки.ПредставлениеДействия    = НСтр("ru = 'Автоматическое заполнение реквизитов организации'");
	ДополнительныеПараметрыОбработкиОшибки.ИдентификаторМестаВызова = "organizaciya";
	
	РаботаСКонтрагентамиКлиент.ОбработатьОшибку(
		ОписаниеОшибки,
		ОбработчикЗавершенияОбработкиОшибки,
		ДополнительныеПараметрыОбработкиОшибки);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
