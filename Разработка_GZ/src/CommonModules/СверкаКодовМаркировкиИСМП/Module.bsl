#Область ПрограммныйИнтерфейс

#Область СобытияФормИСМП

// Модифицирует прикладные формы: добавляет необходимые реквизиты, команды ГосИС
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - модифицируемая форма
//   ПараметрыИнтеграции - Соответствие - настройки модификации формы
//   ДобавляемыеРеквизиты - Массив - массив добавляемых реквизитов
Процедура МодификацияРеквизитовФормы(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты) Экспорт
	
	ПараметрыИнтеграцииФормыСверки = ПараметрыИнтеграцииФормыСверкиКодовМаркировки(Форма);
	ПараметрыИнтеграцииФормыСверки.Вставить("ИмяКомандыРасхожденияПоКодамМаркировки", "РезультатыСверкиКодовМаркировки");
	
	Если ЗначениеЗаполнено(ПараметрыИнтеграцииФормыСверки.ИмяРеквизитаФормы) Тогда
		ПараметрыИнтеграции.Вставить("ФормаСверкиИСМП", ПараметрыИнтеграцииФормыСверки);
		
		Если ПараметрыИнтеграцииФормыСверки.ИспользоватьКолонкуРасхожденияПоКодамМаркировки Тогда
			
			ПутьКРеквизиту = ПараметрыИнтеграцииФормыСверки.ИмяРеквизитаФормыОбъект+"."+ПараметрыИнтеграцииФормыСверки.ИмяТабличнойЧастиТовары;
			ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграции, ПутьКРеквизиту, ДобавляемыеРеквизиты);
			
			Реквизит = Новый РеквизитФормы(
				ПараметрыИнтеграцииФормыСверки.ИмяРеквизитаФормыТребуетсяОбработкаКодовМаркировки,
				Новый ОписаниеТипов("Булево"),,
				НСтр("ru = 'Требуется обработка кодов маркировки'"));
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
		КонецЕсли;
		
		ПараметрыИнтеграцииИСМП = ПараметрыИнтеграцииГиперссылкиСостояниеОбменаИСМП(Форма);
		
		Если ЗначениеЗаполнено(ПараметрыИнтеграцииИСМП.ИмяРеквизитаФормы) Тогда
			ПараметрыИнтеграции.Вставить("ФормаСверкиИСМП.СостояниеОбменаИСМП", ПараметрыИнтеграцииИСМП);
			Реквизит = Новый РеквизитФормы(
				ПараметрыИнтеграцииИСМП.ИмяРеквизитаФормы,
				Новый ОписаниеТипов("ФорматированнаяСтрока"),,
				ПараметрыИнтеграцииИСМП.Заголовок);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции реквизитов ИС МП
//   в прикладные формы конфигураци - потребителя библиотеки ГосИС. Если передана форма - сразу заполняет ее
//   специфику в переопределяемом модуле.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - форма для которой возвращаются параметры интеграции
//
// ВозвращаемоеЗначение:
//   Структура - (См. СобытияФормИС.ПараметрыИнтеграцииДляДокументаОснования).
//
Функция ПараметрыИнтеграцииГиперссылкиСостояниеОбменаИСМП(Форма = Неопределено)
	
	ПараметрыНадписи = СобытияФормИС.ПараметрыИнтеграцииДляДокументаОснования();
	
	Если Не (Форма = Неопределено) Тогда
		СверкаКодовМаркировкиИСМППереопределяемый.ПриОпределенииПараметровИнтеграцииГиперссылкиСостояниеОбменаИСМП(Форма, ПараметрыНадписи);
	КонецЕсли;
	
	Возврат ПараметрыНадписи;
	
КонецФункции

// Дополняет табличную часть товары реквизитами.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - модифицируемая форма
//   ПараметрыИнтеграции - Соответствие - настройки модификации формы
//   ПутьКРеквизиту - Строка - Имя табличной части товары
//   ДобавляемыеРеквизиты - Массив - массив добавляемых реквизитов.
//
Процедура ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграции, ПутьКРеквизиту, ДобавляемыеРеквизиты) Экспорт
	
	Колонка = Новый РеквизитФормы(
		"МаркируемаяПродукция",
		Новый ОписаниеТипов("Булево"),
		ПутьКРеквизиту, 
		НСтр("ru = 'Маркируемая продукция'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Колонка = Новый РеквизитФормы(
		"ВидПродукцииИС",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"),
		ПутьКРеквизиту, 
		НСтр("ru = 'Вид продукции'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Колонка = Новый РеквизитФормы(
		"РасхожденияПоКодамМаркировки",
		Новый ОписаниеТипов("Строка"),
		ПутьКРеквизиту, 
		НСтр("ru = 'Расхождения по кодам маркировки'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
КонецПроцедуры

// Модифицирует прикладные формы: добавляет необходимые элементы, командную панель ГосИС
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - модифицируемая форма
//
Процедура МодификацияЭлементовФормы(Форма) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП");
	Если ПараметрыИнтеграции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = Форма.ПараметрыИнтеграцииГосИС.Получить("ФормаСверкиИСМП");
	
	Если Настройки = Неопределено Тогда
		Возврат;
	ИначеЕсли Не Настройки.РазмещатьЭлементыИнтерфейса Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКоманднуюПанельСверкиКодовМаркировки(Форма, Настройки);
	ДобавитьКнопкуСверкиКодовМаркировки(Форма, Настройки);
	ДобавитьКолонкуРасхожденияПоКодамМаркировки(Форма, Настройки);
	ВстроитьСтрокуСостояниеОбменаИСМП(Форма, "ФормаСверкиИСМП.СостояниеОбменаИСМП");
	
КонецПроцедуры

// Добавляет на форму гиперссылку состояние обмена по кодам маркировки. 
// Отображается, если есть расхождения по кодам  между полученным УКД и ТОРГ-2.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - модифицируемая форма.
//   Настройки - Строка - Имя ключа параметров интеграции ГосИС, содержащего параметры интеграции для добавления элемента формы.
//
Процедура ВстроитьСтрокуСостояниеОбменаИСМП(Форма, Настройки) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить(Настройки);
	Если ПараметрыИнтеграции = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяЭлементаФормы) Тогда
		Возврат;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, ПараметрыИнтеграции.ИмяЭлементаФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаИнтеграцииГосИС = СобытияФормИС.ДобавитьПолучитьГруппуИнтеграцииНаФормуДокументаОснования(Форма, ПараметрыИнтеграции);
	
	СобытияФормИС.ДобавитьПолеИнтеграцииНаФормуДокументаОснования(Форма, ПараметрыИнтеграции, ГруппаИнтеграцииГосИС);
	
КонецПроцедуры

// Добавляет на форму командную панель для встраивания гиперссылки.
// 
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения - форма для встраивания гиперссылок проверки и подбора.
//   ПараметрыИнтеграции - Структура        - параметры интеграции прикладной формы.
//
Процедура ДобавитьКоманднуюПанельСверкиКодовМаркировки(Форма, ПараметрыИнтеграции) Экспорт
	
	Если ПараметрыИнтеграции.ЭтоКорректировкаПриобретения Тогда
		Возврат;
	КонецЕсли;
	ЭлементыФормы = Форма.Элементы;
	Если ЭлементыФормы.Найти("КоманднаяПанельСверкаКодовМаркировкиПродукцииГосИС")<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоследующийЭлемент = ?(ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяПоследующегоЭлементаФормы),
		ЭлементыФормы[ПараметрыИнтеграции.ИмяПоследующегоЭлементаФормы],
		Неопределено);
		
	ПанельСканированиеИПроверка = ЭлементыФормы.Вставить(
		"КоманднаяПанельСверкаКодовМаркировкиПродукцииГосИС",
		Тип("ГруппаФормы"),
		ЭлементыФормы[ПараметрыИнтеграции.ИмяРодительскойГруппыФормы],
		ПоследующийЭлемент);
	ПанельСканированиеИПроверка.Вид = ВидГруппыФормы.КоманднаяПанель;	
	
КонецПроцедуры

// Добавляет на форму кнопку открытия формы сверки кодов маркировки.
// 
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения - форма для встраивания гиперссылок проверки и подбора
//   ПараметрыИнтеграции - Структура                  - параметры интеграции прикладной формы.
//
Процедура ДобавитьКнопкуСверкиКодовМаркировки(Форма, ПараметрыИнтеграции) Экспорт
	
	Если ПараметрыИнтеграции.ЭтоКорректировкаПриобретения Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКомандыРасхожденияПоКодамМаркировки = ПараметрыИнтеграции.ИмяКомандыРасхожденияПоКодамМаркировки;
	
	Если Форма.Команды.Найти(ИмяКомандыРасхожденияПоКодамМаркировки)<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыРасхожденияПоКодамМаркировки);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = ПараметрыИнтеграции.Заголовок;
	
	Кнопка = Форма.Элементы.Вставить(
		ИмяКомандыРасхожденияПоКодамМаркировки,
		Тип("КнопкаФормы"),
		Форма.Элементы["КоманднаяПанельСверкаКодовМаркировкиПродукцииГосИС"]);
	Кнопка.ИмяКоманды = ИмяКомандыРасхожденияПоКодамМаркировки;
	Кнопка.Вид = ВидКнопкиФормы.ГиперссылкаКоманднойПанели;
	Кнопка.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиГосИС;
	Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	Кнопка.Отображение = ОтображениеКнопки.Текст;
	Кнопка.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
	Кнопка.Шрифт = Новый Шрифт(Кнопка.Шрифт, , , , , Истина, , );
	
КонецПроцедуры

#КонецОбласти

#Область ИнтегарцияЭлементовФорм

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции формы сверки кодов маркировки
//   в прикладные документы конфигураци - потребителя библиотеки ГосИС. Если передана форма - сразу заполняет ее
//   специфику в переопределяемом модуле.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, Неопределено - форма для которой возвращаются параметры интеграции
//
// Возвращаемое значение:
//  Структура - значения, используемые для интеграции формы проверки и подбора:
//   * ЭтоКорректировкаПриобретения - Булево - признак документа, определяющий, что документ является корректировочным документом приобретения, загруженным по ЭДО.
//   * ЕстьЭлектронныйДокумент                    - Булево - признак наличия ЭДО по объекту
//   * ЗавершенОбменПоЭДО                         - Булево - признак завершения ЭДО по объекту
//   * ДоступноСогласованиеРасхождений            - Булево - признак, что в документе используется функционал согласования расхождений, требующий действий пользователя (например, для документов, загруженных из ТОРГ-2)
//   * ИмяРеквизитаФормыОбъект                    - Строка - имя реквизита формы, содержащего объект документа
//   * ИмяТабличнойЧастиТовары                    - Строка - имя табличной части документа, содержащей номенклатуру
//   * ИмяТабличнойЧастиСерии                     - Строка - имя табличной части документа, содержащей данные по сериям
//   * ИмяТабличнойЧастиШтрихкодыУпаковок         - Строка - имя табличной части документа, содержащей штрихкоды упаковок номенклатуры
//   * ИмяКолонкиШтрихкодУпаковки                 - Строка - имя колонки табличной части штрихкодов содержащей штрихкоды упаковок номенклатуры
//   * РазмещатьЭлементыИнтерфейса                - Булево - необходимость размещения гиперссылок проверки и подбора;
//   * ИмяРеквизитаФормы                          - Строка - имя реквизита формы для вывода гиперссылки проверки/подбора
//   * ИмяРодительскойГруппыФормы                 - Строка - имя элемента-группы формы документа, в которую необходимо добавить гиперссылку для открытия формы проверки
//   * ИмяПоследующегоЭлементаФормы               - Строка - имя элемента формы, перед которым необходимо добавить гиперссылку для открытия формы проверки
//   * ИмяЭлементаФормыТовары                     - Строка - имя элемента формы документа, в котором выводится табличная часть с номенклатурой
//   * ИмяСледующейКолонки                        - Строка - имя колонки, перед которой необходимо вставить колонку для отображения статуса проверки товара
//   * ИмяСледующейКолонкиРасхождения             - Строка - имя колонки, перед которой необходимо вставить колонку для отображения расхождений по кодам маркировки
//   * ИспользоватьБезМаркируемойПродукции        - Булево - признак показа гиперссылки в форме документа без маркируемой продукции
//   * ИспользоватьКолонкуСтатусаПроверкиПодбора  - Булево - признак использования специальной колонки в таблице товаров для отображения статуса проверки товара
//   * ИспользоватьКолонкуРасхожденияПоКодамМаркировки - Булево - специальной колонки в таблице товаров для отображения расхождений по кодам маркировки.
//   * Заголовок                                  - Строка - представление заголовка кнопки для пользователя.
//
Функция ПараметрыИнтеграцииФормыСверкиКодовМаркировки(Форма = Неопределено) Экспорт
	
	ПараметрыИнтеграции = Новый Структура();
	
	#Область СвойстваФормыИОбъектаВстраивания
	
	ПараметрыИнтеграции.Вставить("ЭтоКорректировкаПриобретения",       Ложь);
	ПараметрыИнтеграции.Вставить("ЕстьЭлектронныйДокумент",            Ложь);
	ПараметрыИнтеграции.Вставить("ЗавершенОбменПоЭДО",                 Ложь);
	ПараметрыИнтеграции.Вставить("ДоступноСогласованиеРасхождений",    Ложь);
	
	ПараметрыИнтеграции.Вставить("ИмяРеквизитаФормыОбъект",            "Объект");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиТовары",            "Товары");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиСерии",             "Серии");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок", "ШтрихкодыУпаковок");
	ПараметрыИнтеграции.Вставить("ИмяКолонкиШтрихкодУпаковки",         "ШтрихкодУпаковки");
	
	ПараметрыИнтеграции.Вставить("РазмещатьЭлементыИнтерфейса", Ложь);
	ПараметрыИнтеграции.Вставить("ИмяРеквизитаФормы",           "ТекстПроверкаПодбор");
	
	ПараметрыИнтеграции.Вставить("ИмяРодительскойГруппыФормы",   "СтраницаТовары");
	ПараметрыИнтеграции.Вставить("ИмяПоследующегоЭлементаФормы", "Товары");
	ПараметрыИнтеграции.Вставить("ИмяЭлементаФормыТовары",       "Товары");
	ПараметрыИнтеграции.Вставить("ИмяСледующейКолонки",          "ТоварыНоменклатура");
	ПараметрыИнтеграции.Вставить("ИмяСледующейКолонкиРасхождения","ТоварыНоменклатура");
	
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковокРасхождения", "ШтрихкодыУпаковок");
	ПараметрыИнтеграции.Вставить("ИмяКолонкиРасхождения",                         "РасхожденияПоКодамМаркировки");
	ПараметрыИнтеграции.Вставить("ИмяРеквизитаФормыТребуетсяОбработкаКодовМаркировки", "ТребуетсяОбработкаКодовМаркировки");
	
	#КонецОбласти
	
	#Область НастройкиИнтеграцииФормыСверки
	
	ПараметрыИнтеграции.Вставить("ИспользоватьБезМаркируемойПродукции",        Ложь);
	ПараметрыИнтеграции.Вставить("ИспользоватьКолонкуСтатусаПроверкиПодбора",  Истина);
	ПараметрыИнтеграции.Вставить("ИспользоватьКолонкуРасхожденияПоКодамМаркировки", Ложь);

	#КонецОбласти
	
	#Область ОбщиеНастройкиСистемы
	
	ПараметрыИнтеграции.Вставить("ХарактеристикиИспользуются", ИнтеграцияИС.ХарактеристикиИспользуются());
	ПараметрыИнтеграции.Вставить("СерииИспользуются",          ИнтеграцияИС.СерииИспользуются());
	ПараметрыИнтеграции.Вставить("ЕстьПравоИзменение",      Ложь);
	
	#КонецОбласти
	
	#Область Тексты
	
	ПараметрыИнтеграции.Вставить("Заголовок", НСтр("ru = 'Результаты сверки поступившей продукции'"));
	
	#КонецОбласти
	
	Если Форма <> Неопределено Тогда
		СверкаКодовМаркировкиИСМППереопределяемый.ПриОпределенииПараметровИнтеграцииФормыСверкиПоКодамМаркировки(
			Форма, ПараметрыИнтеграции);
	КонецЕсли;
	
	Возврат ПараметрыИнтеграции;
	
КонецФункции

// Добавляет на форму колонку расхождения по кодам маркировки в табличной части
//
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения - форма для встраивания
//   ПараметрыИнтеграции - Структура                  - параметры интеграции прикладной формы
//
Процедура ДобавитьКолонкуРасхожденияПоКодамМаркировки(Форма, ПараметрыИнтеграции) Экспорт
	
	Если ПараметрыИнтеграции.ИспользоватьКолонкуРасхожденияПоКодамМаркировки Тогда
		
		ПутьКРеквизиту = ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект+"."+ПараметрыИнтеграции.ИмяТабличнойЧастиТовары;
		ПутьКРеквизиту = ПутьКРеквизиту + "." + ПараметрыИнтеграции.ИмяКолонкиРасхождения;
		ИмяКолонкиРеквизита = СтрШаблон("%1РасхожденияПоКодамМаркировки",ПараметрыИнтеграции.ИмяТабличнойЧастиТовары);
		
		Если Форма.Элементы.Найти(ИмяКолонкиРеквизита) = Неопределено Тогда
		
			КолонкаИнтерфейса = Форма.Элементы.Вставить(
				ИмяКолонкиРеквизита,
				Тип("ПолеФормы"),
				Форма.Элементы[ПараметрыИнтеграции.ИмяЭлементаФормыТовары],
				Форма.Элементы[ПараметрыИнтеграции.ИмяСледующейКолонкиРасхождения]);
			КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
			КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеНадписи;
			КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
			КолонкаИнтерфейса.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
			КолонкаИнтерфейса.КартинкаШапки = БиблиотекаКартинок.МаркируемаяПродукцияШапка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СверкаРезультатов

// Инициализирует параметры для сверки кодов маркировки.
// 
// Возвращаемое значение:
//  Структура - структура параметров:
//   * ЭтоПродукцияМОТП - Булево - признак использования групповых упаковок в сверяемых кодах
//   * ТоварыПринятыеБезРасхождений - Неопределено, ТаблицаЗначений - товары, принятые без расхождений, которыми будет дополнено дерево сверки.
//   * СохраненнаяДетализацияСтруктурыХранения - Неопределено, ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - сохраненная детализация отображения структуры упаковок.
//
Функция ИнициализироватьПараметрыСверки() Экспорт
	
	ПараметрыСверки = Новый Структура;
	ПараметрыСверки.Вставить("ТоварыПринятыеБезРасхождений", Неопределено);
	ПараметрыСверки.Вставить("ЭтоПродукцияМОТП", Ложь);
	ПараметрыСверки.Вставить("СохраненнаяДетализацияСтруктурыХранения", Неопределено);
	Возврат ПараметрыСверки;
	
КонецФункции

// Заполняет данные о расхождениях по результатам проверки и подбора кодов маркировки поступившей продукции
// 
// Параметры:
//  ДеревоУпаковокФакт - ДеревоЗначений - См ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок.
//  ДеревоУпаковокПлан - См. ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыПоДаннымИСМП.
//  ШтрихкодыБрак - (См. ШтрихкодированиеИС.ЗначенияНедопустимыхШтрихкодовИзДереваМаркируемойПродукции).
//  ПараметрыСверки - См. ИнициализироватьПараметрыСверки.
// 
// Возвращаемое значение:
//  Структура:
//  * ШтрихкодыУпаковокФактЭДО - см. ИнициализацияТаблицыПриемки
//  * ШтрихкодыУпаковокПланЭДО - см. ИнициализацияТаблицыПриемки.
//
Функция ТаблицыРасхожденийПоДаннымЭДО(ДеревоУпаковокФакт, ДеревоУпаковокПлан, ШтрихкодыБрак, ПараметрыСверки) Экспорт
	
	ДополнитьКолонкиДереваУпаковок(ДеревоУпаковокПлан);
	ДополнитьКолонкиДереваУпаковок(ДеревоУпаковокФакт);
	
	ДополнитьФактическимиДаннымиДеревоЭДО(ДеревоУпаковокФакт, ДеревоУпаковокПлан);
	
	Если ПараметрыСверки.ЭтоПродукцияМОТП Тогда
		Результат = СверкаКодовМаркировкиИСМП.ТаблицыТОРГ2ПланФактПоДеревуУпаковокМОТП(
			ДеревоУпаковокПлан,
			ШтрихкодыБрак,
			Истина,
			ПараметрыСверки.ТоварыПринятыеБезРасхождений,
			ПараметрыСверки.СохраненнаяДетализацияСтруктурыХранения);
	Иначе
		Результат = СверкаКодовМаркировкиИСМП.ТаблицыТОРГ2ПланФактПоДеревуУпаковокИСМП(
			ДеревоУпаковокПлан,
			ШтрихкодыБрак,
			Истина,
			ПараметрыСверки.ТоварыПринятыеБезРасхождений);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АктРасхожденияхТОРГ2

// Заполняет данные по расхождениям кодов маркировки в переданной коллекции.
//
// Параметры:
//  Товары - ДанныеФормыКоллекция, ТаблицаЗначений - Таблица, в которой необходимо заполнить реквизиты. Обязательные колонки:
//    * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика номенклатуры
//    * ИмяКолонкиЗаполнения - ФорматированнаяСтрока - колонка для заполнения данных о расхождениях. Имя определяется в 3м параметре процедуры.
//  ДанныеПоРасхождениям - ДанныеФормыКоллекция, ТаблицаЗначений - Таблица, содержащая данные по расхождениям.
//    * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура.
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика номенклатуры.
//    * ТипРасхождения - ОпределяемыйТип.ТипРасхожденияИСМП - тип расхождения кодов маркировки.
//    * Количество - Число - количество единиц.
//    * Признан - ОпределяемыйТип.ВариантДействийПоРасхождениямКодовМаркировкиИСМП - Обязательная колонка, если 4й параметр Истина. Вариант действия для строки расхождения.
//  ИмяКолонкиЗаполнения - Строка - Имя колонки для заполнения данных о расхождениях.
//  ДоступноСогласованиеРасхождений  -Булево - Истина, если заполняются данные в документе, загруженном по  данным ЭДО ТОРГ-2.
// 
Процедура ЗаполнитьКолонкуРасхожденияПоКодамМаркировки(Товары, ДанныеПоРасхождениям,
													   ИмяКолонкиЗаполнения, ДоступноСогласованиеРасхождений) Экспорт
	
	СверкаКодовМаркировкиИСМППереопределяемый.ЗаполнитьКолонкуРасхожденияПоКодамМаркировки(Товары, ДанныеПоРасхождениям,ИмяКолонкиЗаполнения, ДоступноСогласованиеРасхождений);
	
КонецПроцедуры

// Возвращает основание проверяемого документа.
//
// Параметры:
//   ДокументСсылка - ДокументСсылка - ссылка на документ, для которого необходимо получить основание.
//
// Возвращаемое значение:
//   ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ВозвратТоваровПоставщику, ДокументСсылка.АктОРасхожденияхПослеОтгрузки, Неопределено - документ-основание, Неопределено - если документ-основание отсутствует.
//
Функция ОпределитьДокументОснованиеСверкиКодов(ДокументСсылка) Экспорт
	
	ДокументОснование = Неопределено;
	СверкаКодовМаркировкиИСМППереопределяемый.ПриОпределенииДокументОснованиеСверкиКодов(ДокументСсылка, ДокументОснование);
	Возврат ДокументОснование;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеМаркируемойПродукцииДокумента

// Возвращает для переданного документа таблицу его товаров, являющихся маркируемой продукцией требуемого вида.
//
// Параметры:
//  Контекст - ДокументСсылка - документ, маркируемую продукцию которого необходимо получить.
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с маркируемой продукцией переданного документа:
//   * Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
//   * ВидПродукции   - ПеречислениеСсылка.ВидыПродукцииИС         - вид продукции.
//
Функция ТаблицаМаркируемойПродукцииДокумента(Контекст) Экспорт
	
	ТаблицаМаркируемойПродукции = НоваяТаблицаМаркируемойПродукции();
	
	СверкаКодовМаркировкиИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		Контекст, ТаблицаМаркируемойПродукции);
	
	Возврат ТаблицаМаркируемойПродукции;
	
КонецФункции

// Заполняет товары, принятые без расхождений при загрузке формы результатов сверки по кодам маркировки.
// 
// Параметры:
//  ДокументОснование - ДокументСсылка - документ основание, с которым производится сверка кодов из входящего электронного документа.
//  НоменклатураПоДаннымЭДО - Массив - массив из ОпределяемыйТип.Номенклатура, полученный из входящего электронного документа.
//  ВидыМаркируемойПродукции - Массив, ПеречислениеСсылка.ВидыПродукцииИС - виды продукции
//
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//  * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура.
//
Функция СформироватьТаблицуПродукцииПринятойБезРасхождений(ДокументОснование, НоменклатураПоДаннымЭДО, ВидыМаркируемойПродукции) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	
	СверкаКодовМаркировкиИСМППереопределяемый.ПриОпеределенииТаблицыПродукцииПринятойБезРасхождений(ДокументОснование, НоменклатураПоДаннымЭДО, ВидыМаркируемойПродукции, Результат);
	
	Возврат Результат;
	
КонецФункции

// Заполняет таблицу значений штрихкодов в разрезе продукции по документу
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, содержащий значения штрихкодов и продукции
//  ТаблицаТоваровЗначенийШтрихкодов - См. ИнициализироватьТаблицуТоваровЗначенийШтрихкодов.
Процедура ЗаполнитьТаблицуЗначенияШтрихкодовПродукцииПоДокументу(Документ, ТаблицаТоваровЗначенийШтрихкодов) Экспорт
	
	СверкаКодовМаркировкиИСМППереопределяемый.ПриЗаполненииЗначенияШтрихкодовПродукцииПоДокументу(Документ, ТаблицаТоваровЗначенийШтрихкодов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтрефейс

#Область ТаблицыРасхождений

// Получает полную таблицу по кодам маркировки по переданным таблицам план/факт с указанием типа расхождений: Излишек, Недостача, Брак, БезРасхождений.
// 
// Параметры:
//  ПараметрыЗаполнения - Структура - (См СверкаКодовМаркировкиИСМП.ТаблицыТОРГ2ПланФактПоДеревуУпаковокИСМП)
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица определяющая состав кодов маркировки и расхождений:
//    Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура
//    Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
//    ЗначениеШтрихкода - Строка - значение штрихкода
//    КоличествоВНаличии - Число - количество без расхождений
//    КоличествоНедостача - Число - количество недостача
//    КоличествоИзлишек - Число - количество излишек
//    ТипРасхождения - ОпределяемыйТип.ТипРасхожденияИСМП - тип расхождения по строке.
//
Функция ТаблицаРасхожденийШтриховыхКодовПолная(ПараметрыЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихкодыУпаковокПланЭДО", ПараметрыЗаполнения.ШтрихкодыУпаковокПланЭДО);
	Запрос.УстановитьПараметр("ШтрихкодыУпаковокФактЭДО", ПараметрыЗаполнения.ШтрихкодыУпаковокФактЭДО);
	Запрос.УстановитьПараметр("Излишек",                  ИнтеграцияИСМП.ТипРасхожденияИСМПИзлишек());
	Запрос.УстановитьПараметр("Недостача",                ИнтеграцияИСМП.ТипРасхожденияИСМПНедостача());
	Запрос.УстановитьПараметр("Брак",                     ИнтеграцияИСМП.ТипРасхожденияИСМПБрак());
	Запрос.УстановитьПараметр("БезРасхождений",           ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ТипРасхожденияИСМП"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокПланЭДО.Номенклатура        КАК Номенклатура,
		|	ШтрихкодыУпаковокПланЭДО.Характеристика      КАК Характеристика,
		|	ШтрихкодыУпаковокПланЭДО.ЗначениеШтрихкода   КАК ЗначениеШтрихкода,
		|	ШтрихкодыУпаковокПланЭДО.КоличествоПринято   КАК КоличествоПринято,
		|	ШтрихкодыУпаковокПланЭДО.КоличествоНедостача КАК КоличествоНедостача
		|ПОМЕСТИТЬ втПлан
		|ИЗ
		|	&ШтрихкодыУпаковокПланЭДО КАК ШтрихкодыУпаковокПланЭДО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ЗначениеШтрихкода
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыУпаковокФактЭДО.Номенклатура      КАК Номенклатура,
		|	ШтрихкодыУпаковокФактЭДО.Характеристика    КАК Характеристика,
		|	ШтрихкодыУпаковокФактЭДО.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ШтрихкодыУпаковокФактЭДО.КоличествоПринято КАК КоличествоПринято,
		|	ШтрихкодыУпаковокФактЭДО.КоличествоИзлишек КАК КоличествоИзлишек,
		|	ШтрихкодыУпаковокФактЭДО.КоличествоБрак    КАК КоличествоБрак,
		|	ШтрихкодыУпаковокФактЭДО.Брак              КАК Брак
		|ПОМЕСТИТЬ втФакт
		|ИЗ
		|	&ШтрихкодыУпаковокФактЭДО КАК ШтрихкодыУпаковокФактЭДО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ЗначениеШтрихкода
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПлан.Номенклатура        КАК Номенклатура,
		|	втПлан.Характеристика      КАК Характеристика,
		|	втПлан.ЗначениеШтрихкода   КАК ЗначениеШтрихкода,
		|	втПлан.КоличествоПринято   КАК КоличествоВНаличии,
		|	&Недостача                 КАК ТипРасхождения,
		|	втПлан.КоличествоНедостача КАК КоличествоНедостача,
		|	0                          КАК КоличествоИзлишек
		|ИЗ
		|	втПлан КАК втПлан
		|		ЛЕВОЕ СОЕДИНЕНИЕ втФакт КАК втФакт
		|		ПО втПлан.Номенклатура = втФакт.Номенклатура
		|		И втПлан.Характеристика = втФакт.Характеристика
		|		И втПлан.ЗначениеШтрихкода = втФакт.ЗначениеШтрихкода
		|ГДЕ
		|	втФакт.Номенклатура ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втФакт.Номенклатура,
		|	втФакт.Характеристика,
		|	втФакт.ЗначениеШтрихкода,
		|	втФакт.КоличествоПринято,
		|	&Излишек,
		|	0,
		|	втФакт.КоличествоИзлишек
		|ИЗ
		|	втФакт КАК втФакт
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПлан КАК втПлан
		|		ПО (втПлан.Номенклатура = втФакт.Номенклатура)
		|		И (втПлан.Характеристика = втФакт.Характеристика)
		|		И (втПлан.ЗначениеШтрихкода = втФакт.ЗначениеШтрихкода)
		|ГДЕ
		|	втПлан.Номенклатура ЕСТЬ NULL 
		|		И втФакт.КоличествоИзлишек > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втФакт.Номенклатура,
		|	втФакт.Характеристика,
		|	втФакт.ЗначениеШтрихкода,
		|	втФакт.КоличествоПринято,
		|	&Брак,
		|	втФакт.КоличествоБрак,
		|	0
		|ИЗ
		|	втФакт КАК втФакт
		|ГДЕ
		|	втФакт.Брак ИЛИ втФакт.КоличествоБрак > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втФакт.Номенклатура,
		|	втФакт.Характеристика,
		|	втФакт.ЗначениеШтрихкода,
		|	втФакт.КоличествоПринято,
		|	&БезРасхождений,
		|	0,
		|	0
		|ИЗ
		|	втФакт КАК втФакт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПлан КАК втПлан
		|		ПО (втПлан.Номенклатура = втФакт.Номенклатура)
		|		И (втПлан.Характеристика = втФакт.Характеристика)
		|		И (втПлан.ЗначениеШтрихкода = втФакт.ЗначениеШтрихкода)
		|		И (НЕ втФакт.Брак И втФакт.КоличествоБрак = 0)
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика";
	
	ТаблицаШтрихкодыУпаковокРасхождения = Запрос.Выполнить().Выгрузить();
	ЭлектронноеВзаимодействиеИСМП.НормализоватьТаблицуЗначений(ТаблицаШтрихкодыУпаковокРасхождения);
	Возврат ТаблицаШтрихкодыУпаковокРасхождения;
	
КонецФункции

#КонецОбласти

#Область Инициализация

// Инициализирует таблицу товаров по кодам маркировки. Используется при получении данных по кодам маркировки из документов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит следующие колонки:
//  * Номенклатура      - ОпределяемыйТип.Номенклатура - Номекнлатура.
//  * Характеристика    - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//  * ЗначениеШтрихкода - Строка - значение штрихкода.
//  * ВидПродукции   - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции.
Функция ИнициализироватьТаблицуТоваровЗначенийШтрихкодов() Экспорт
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура",      Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТовары.Колонки.Добавить("Характеристика",    Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("ЗначениеШтрихкода", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаТовары.Колонки.Добавить("ВидПродукции",      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Возврат ТаблицаТовары;
	
Конецфункции

// Инициализирует таблицу расхождений по кодам маркировки. Используется при загрузке и сохранении данных в форме результаты сверки по кодам маркировки.
//
// Параметры:
//  ИспользоватьРасхождения - Булево - Истина, если требуется дополнить таблицу колонками для учета расхождений
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит следующие колонки:
//  * Номенклатура      - ОпределяемыйТип.Номенклатура - Номекнлатура.
//  * Характеристика    - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//  * ЗначениеШтрихкода - Строка - значение штрихкода.
//  * Количество        - Число - количество по документу.
//  * ТипРасхождения    - ОпределяемыйТип.ТипРасхожденияИСМП - тип расхождения.
//  * Признан           - ОпределяемыйТип.ВариантДействийПоРасхождениямКодовМаркировкиИСМП - варинаты действий по расхождениям.
//
Функция ИнициализацияТаблицыШтрихкодыУпаковок(ИспользоватьРасхождения = Ложь) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура",      Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТЗ.Колонки.Добавить("Характеристика",    Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТЗ.Колонки.Добавить("ЗначениеШтрихкода", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТЗ.Колонки.Добавить("Количество",        Новый ОписаниеТипов("Число"));
	
	Если ИспользоватьРасхождения Тогда
		ТЗ.Колонки.Добавить("ТипРасхождения", Метаданные.ОпределяемыеТипы.ТипРасхожденияИСМП.Тип);
		ТЗ.Колонки.Добавить("Признан",        Метаданные.ОпределяемыеТипы.ВариантДействийПоРасхождениямКодовМаркировкиИСМП.Тип);
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

// Инициализирует таблицу расхождений по кодам маркировки. Используется при загрузке данных в форме результаты сверки по кодам маркировки.
//
// Параметры:
//  ИспользоватьРасхождения - Булево - Истина, если требуется дополнить таблицу колонками для учета расхождений.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - содержит следующие колонки:
//  * Номенклатура        - ОпределяемыйТип.Номенклатура - Номекнлатура.
//  * Характеристика      - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//  * ЗначениеШтрихкода   - Строка - значение штрихкода.
//  * КоличествоВНаличии  - Число - количество по документу.
//  * КоличествоИзлишек   - Число - количество по документу.
//  * КоличествоНедостача - Число - количество по документу.
//  * ТипРасхождения    - ОпределяемыйТип.ТипРасхожденияИСМП - тип расхождения.
//
Функция ИнициализацияТаблицыШтрихкодыУпаковокПринятоИзлишекНедостача() Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТЗ.Колонки.Добавить("Характеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТЗ.Колонки.Добавить("ЗначениеШтрихкода",   ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТЗ.Колонки.Добавить("КоличествоВНаличии",  Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КоличествоИзлишек",   Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КоличествоНедостача", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ТипРасхождения",      Метаданные.ОпределяемыеТипы.ТипРасхожденияИСМП.Тип);
	
	Возврат ТЗ;
	
КонецФункции

// Инициализирует пустую таблицу маркируемой продукции
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица определяющая состав маркируемой продукции документа:
//    Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура
//    Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
//    ВидПродукции   - ПеречислениеСсылка.ВидыПродукцииИС         - вид продукции.
//
Функция НоваяТаблицаМаркируемойПродукции()
	
	ТаблицаМаркируемойПродукции = Новый ТаблицаЗначений();
	ТаблицаМаркируемойПродукции.Колонки.Добавить("ВидПродукции",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	
	Возврат ТаблицаМаркируемойПродукции;
	
КонецФункции

#КонецОбласти

#Область СравнениеДеревьев

// Дополняет дерево упаковок служебными колонками перед расчетом расхождений
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок
Процедура ДополнитьКолонкиДереваУпаковок(ДеревоУпаковок) Экспорт
	
	ДеревоУпаковок.Колонки.Добавить("НарушенСостав",       Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("Принята",             Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("Излишек",             Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("Недостача",           Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("Брак",          	   Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("ЕстьПринятыеТовары",  Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("ЕстьНедостачиТовары", Новый ОписаниеТипов("Булево"));
	
	ИмяКолонки = "ПредставлениеПроверкиКодаМаркировки";
	Если ДеревоУпаковок.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ДеревоУпаковок.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	ИмяКолонки = "НедопустимыйКодМаркировки";
	Если ДеревоУпаковок.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ДеревоУпаковок.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	ИмяКолонки = "СодержимоеНедоступно";
	Если ДеревоУпаковок.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ДеревоУпаковок.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет сверку ДереваЗначений1 и ДереваЗначений2, сохраняет результаты сверки в ДеревоЗначений2,
//  заполняет служебные реквизиты Принята и Излишек, и добавляет новые строки в ДеревоЗначений2.
// 
// Параметры:
//  ДеревоЗначений1 - ДеревоЗначений - дерево значений с фактическими результатами проверки.
//  ДеревоЗначений2 - ДеревоЗначений - дерево значений с плановыми данными (данные сервиса).
//  ДеревоПроверкиИсходное - Неопределено, ДеревоЗначений - служебный параметр, при первом вызове передавать Неопределено.
//  ТекущаяСтрокаИзлишекДерева2 - Неопределено, СтрокаДереваЗначений - служебный параметр, при первом вызове передавать Неопределено.
//
Процедура ДополнитьФактическимиДаннымиДеревоЭДО(ДеревоЗначений1, ДеревоЗначений2, 
	ДеревоПроверкиИсходное = Неопределено, ТекущаяСтрокаИзлишекДерева2 = Неопределено) Экспорт
	
	Если ДеревоПроверкиИсходное = Неопределено Тогда
		ДеревоПроверкиИсходное = ДеревоЗначений2;
	КонецЕсли;
	
	Для Каждого СтрокаДерева1 Из ДеревоЗначений1.Строки Цикл
		
		НайденнаяСтрокаДерева2 = ДеревоЗначений2.Строки.Найти(СтрокаДерева1.НормализованныйШтрихкод, "НормализованныйШтрихкод");
		Если НайденнаяСтрокаДерева2 = Неопределено Тогда
			
			НайденнаяСтрокаДерева2 = ИнтеграцияИСМПСлужебный.НайтиСтрокиВИсходномДереве(СтрокаДерева1, ДеревоПроверкиИсходное);
			
			Если НайденнаяСтрокаДерева2 <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НайденнаяСтрокаДерева2, СтрокаДерева1, "Номенклатура, Характеристика");
				
				НайденнаяСтрокаДерева2.Принята = Истина;
				
				Если ТипЗнч(ДеревоЗначений2) = Тип("СтрокаДереваЗначений") Тогда
					ДеревоЗначений2.НарушенСостав = Истина;
				КонецЕсли;
				
				Если НайденнаяСтрокаДерева2.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
					ДополнитьФактическимиДаннымиДеревоЭДО(СтрокаДерева1, НайденнаяСтрокаДерева2, 
						ДеревоПроверкиИсходное);
				КонецЕсли;
				
			Иначе
				
				Если ТекущаяСтрокаИзлишекДерева2 = Неопределено Тогда
					СтрокаИзлишек = ДеревоПроверкиИсходное.Строки.Добавить();
				Иначе
					СтрокаИзлишек = ТекущаяСтрокаИзлишекДерева2.Строки.Добавить();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаИзлишек, СтрокаДерева1);
				СтрокаИзлишек.Принята = Истина;
				СтрокаИзлишек.Излишек = Истина;
				
				Если СтрокаДерева1.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
					ДополнитьФактическимиДаннымиДеревоЭДО(СтрокаДерева1, ДеревоЗначений2,
						ДеревоПроверкиИсходное, СтрокаИзлишек);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(НайденнаяСтрокаДерева2, СтрокаДерева1, "Номенклатура, Характеристика");
			НайденнаяСтрокаДерева2.Принята = Истина;
			
			Если СтрокаДерева1.Строки.Количество() Тогда
				ДополнитьФактическимиДаннымиДеревоЭДО(СтрокаДерева1, НайденнаяСтрокаДерева2,
					ДеревоПроверкиИсходное);
			ИначеЕсли СтрокаДерева1.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
				ОтметитьВложенныеУпаковкиКакПринятые(НайденнаяСтрокаДерева2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные вложенных строк по данным строки верхнего уровня.
//
// Параметры:
//  СтрокаВерхнегоУровня - СтрокаДереваЗначений - строка дерева значений для обработки вложенных строк.
//
Процедура ОтметитьВложенныеУпаковкиКакПринятые(СтрокаВерхнегоУровня)
	
	Для Каждого ПодчиненнаяСтрока из СтрокаВерхнегоУровня.Строки Цикл
		
		ЗаполнитьЗначенияСвойств(
			ПодчиненнаяСтрока,
			СтрокаВерхнегоУровня,
			"Номенклатура, Характеристика, Принята, Излишек, Недостача");
		
		Если ПодчиненнаяСтрока.Строки.Количество() Тогда
			ОтметитьВложенныеУпаковкиКакПринятые(ПодчиненнаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицы план/факт по дереву упаковок ИСМП по результатм сверки кодов маркировки
// 
// Параметры:
//  ДеревоМаркированнойПродукции - ДеревоЗначений - дерево значений, содержащее данные о результатах сверки.
//  НедопустимыеШтрихкоды - (См. ШтрихкодированиеИС.ЗначенияНедопустимыхШтрихкодовИзДереваМаркируемойПродукции).
//  ПерваяИтерация - Булево - Служебный параметр, передавать Истина при первом вызове.
//  ТоварыПринятыеБезРасхождений - ТаблицаЗначений - таблица товаров, принятых без расхождений. Колонки:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   
//  Возвращаемое значение:
//   Структура:
//    * ШтрихкодыУпаковокФактЭДО - (См. ИнициализацияТаблицыПриемки).
//    * ШтрихкодыУпаковокПланЭДО - (См. ИнициализацияТаблицыПриемки).
//    * НарушенСостав - Булево - служебное свойство, признак наличия расхождений.
//
Функция ТаблицыТОРГ2ПланФактПоДеревуУпаковокИСМП(ДеревоМаркированнойПродукции, НедопустимыеШтрихкоды,
	ПерваяИтерация = Ложь, ТоварыПринятыеБезРасхождений = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НарушенСостав",  Ложь);
	
	ШтрихкодыУпаковокФактЭДО = ИнициализацияТаблицыПриемки();
	ШтрихкодыУпаковокПланЭДО = ИнициализацияТаблицыПриемки();
	
	КолонкиГруппировки = КолонкиГруппировкиТаблицыТОРГ2();
	КолонкиИтогов      = КолонкиИтоговТаблицыТОРГ2();
	
	Результат.Вставить("ШтрихкодыУпаковокФактЭДО", ШтрихкодыУпаковокФактЭДО);
	Результат.Вставить("ШтрихкодыУпаковокПланЭДО", ШтрихкодыУпаковокПланЭДО);
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.Строки Цикл
		
		ЗначениеШтрихкода =  СтрокаДерева.Штрихкод;
		
		Если СтрокаДерева.Излишек Тогда
			
			Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				ДополнитьТаблицыТОРГ2(ШтрихкодыУпаковокФактЭДО, СтрокаДерева, ЗначениеШтрихкода, Ложь, Истина);
			Иначе
				ВложенныйРезультат = ТаблицыТОРГ2ПланФактПоДеревуУпаковокИСМП(
					СтрокаДерева, НедопустимыеШтрихкоды,, ТоварыПринятыеБезРасхождений);
				
				Для Каждого СтрокаТаблицы Из ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО Цикл
					СтрокаТаблицы.ЗначениеШтрихкода = ЗначениеШтрихкода;
					СтрокаТаблицы.ВидУпаковки = СтрокаДерева.ВидУпаковки;
				КонецЦикла;
				
				ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО.Свернуть(КолонкиГруппировки, КолонкиИтогов);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
					ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО, ШтрихкодыУпаковокФактЭДО);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			Если СтрокаДерева.Принята Тогда
				ДополнитьТаблицыТОРГ2(ШтрихкодыУпаковокФактЭДО, СтрокаДерева, ЗначениеШтрихкода, Истина, Ложь);
				ДополнитьТаблицыТОРГ2(ШтрихкодыУпаковокПланЭДО, СтрокаДерева, ЗначениеШтрихкода, Истина, Ложь);
			Иначе
				
				НедопустимыйКодМаркировки = НедопустимыеШтрихкоды.Получить(СтрокаДерева.НормализованныйШтрихкод);
				Если НедопустимыйКодМаркировки = Неопределено Тогда
					Если ТоварыПринятыеБезРасхождений = Неопределено
						Или ТоварыПринятыеБезРасхождений.Найти(СтрокаДерева.Номенклатура) = Неопределено Тогда
						Результат.НарушенСостав = Истина;
						ДополнитьТаблицыТОРГ2(ШтрихкодыУпаковокПланЭДО, СтрокаДерева, ЗначениеШтрихкода, Ложь, Ложь);
					Иначе
						СтрокаДерева.Принята = Истина;
						ДополнитьТаблицыТОРГ2(ШтрихкодыУпаковокФактЭДО, СтрокаДерева, ЗначениеШтрихкода, Истина, Ложь);
						ДополнитьТаблицыТОРГ2(ШтрихкодыУпаковокПланЭДО, СтрокаДерева, ЗначениеШтрихкода, Истина, Ложь);
					КонецЕсли;
				Иначе
					
					Результат.НарушенСостав = Истина;
					
					СтрокаДерева.НедопустимыйКодМаркировки = Истина;
					СтрокаДерева.ПредставлениеПроверкиКодаМаркировки = "Брак";
					ДополнитьТаблицыТОРГ2(ШтрихкодыУпаковокПланЭДО, СтрокаДерева, ЗначениеШтрихкода, Ложь, Ложь, Истина);
					ДополнитьТаблицыТОРГ2(ШтрихкодыУпаковокФактЭДО, СтрокаДерева, ЗначениеШтрихкода, Ложь, Ложь, Истина);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если СтрокаДерева.СодержимоеНедоступно Тогда
				
				Результат.НарушенСостав = Истина;
				СтрокаДерева.НедопустимыйКодМаркировки = Истина;
				СтрокаДерева.ПредставлениеПроверкиКодаМаркировки = "Расформирован";
				ДополнитьТаблицыТОРГ2(ШтрихкодыУпаковокПланЭДО, СтрокаДерева, ЗначениеШтрихкода, Ложь, Ложь, Истина);
				ДополнитьТаблицыТОРГ2(ШтрихкодыУпаковокФактЭДО, СтрокаДерева, ЗначениеШтрихкода, Ложь, Ложь, Истина);
				
			Иначе
				
				НедопустимыйКодМаркировки = НедопустимыеШтрихкоды.Получить(СтрокаДерева.НормализованныйШтрихкод);
				Если НедопустимыйКодМаркировки <> Неопределено Тогда
					СтрокаДерева.НедопустимыйКодМаркировки = Истина;
					СтрокаДерева.ПредставлениеПроверкиКодаМаркировки = "Брак";
				КонецЕсли;
				
				ВложенныйРезультат = ТаблицыТОРГ2ПланФактПоДеревуУпаковокИСМП(СтрокаДерева, НедопустимыеШтрихкоды, ,ТоварыПринятыеБезРасхождений);
				
				Если ВложенныйРезультат.НарушенСостав Тогда
					
					Результат.НарушенСостав = Истина;
					Для Каждого СтрокаТаблицы Из ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО Цикл
						СтрокаТаблицы.КоличествоИзлишек = СтрокаТаблицы.КоличествоПринято;
						СтрокаТаблицы.КоличествоПринято = 0;
					КонецЦикла;
				Иначе
					
					СтрокаДерева.Принята = Истина;
					
					// Для вложенных строк перезаполнить код на код родительской упаковки
					Для Каждого СтрокаТаблицы Из ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО Цикл
						СтрокаТаблицы.ЗначениеШтрихкода = ЗначениеШтрихкода;
						СтрокаТаблицы.ВидУпаковки = СтрокаДерева.ВидУпаковки;
					КонецЦикла;
					
					ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО.Свернуть(КолонкиГруппировки, КолонкиИтогов);
					
				КонецЕсли;
				
				Для Каждого СтрокаТаблицы Из ВложенныйРезультат.ШтрихкодыУпаковокПланЭДО Цикл
					СтрокаТаблицы.ЗначениеШтрихкода = ЗначениеШтрихкода;
					СтрокаТаблицы.ВидУпаковки = СтрокаДерева.ВидУпаковки;
					// Для планового количество по ЭДО, если в коробе найдены бракованные коды маркировки, то количество Брак перенести в Недостачу короба
					СтрокаТаблицы.КоличествоНедостача = СтрокаТаблицы.КоличествоНедостача + СтрокаТаблицы.КоличествоБрак;
					СтрокаТаблицы.КоличествоБрак = 0;
				КонецЦикла;
				
				ВложенныйРезультат.ШтрихкодыУпаковокПланЭДО.Свернуть(КолонкиГруппировки, КолонкиИтогов);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО, ШтрихкодыУпаковокФактЭДО);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВложенныйРезультат.ШтрихкодыУпаковокПланЭДО, ШтрихкодыУпаковокПланЭДО);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПерваяИтерация Тогда
			
			Результат.НарушенСостав = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.ШтрихкодыУпаковокФактЭДО = ШтрихкодыУпаковокФактЭДО;
	Результат.ШтрихкодыУпаковокПланЭДО = ШтрихкодыУпаковокПланЭДО;
	
	Возврат Результат;
	
КонецФункции

// Заполняет таблицы план/факт по дереву упаковок МОТП по результатм сверки кодов маркировки
// 
// Параметры:
//  ДеревоМаркированнойПродукции - ДеревоЗначений - дерево значений, содержащее данные о результатах сверки.
//  НедопустимыеШтрихкоды - (См. ШтрихкодированиеИС.ЗначенияНедопустимыхШтрихкодовИзДереваМаркируемойПродукции).
//  ПерваяИтерация - Булево - Служебный параметр, передавать Истина при первом вызове.
//  ТоварыПринятыеБезРасхождений - ТаблицаЗначений - таблица товаров, принятых без расхождений. Колонки:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//  Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - сохраненная детализация.
//  
//  Возвращаемое значение:
//   Структура:
//    * ШтрихкодыУпаковокФактЭДО - (См. ИнициализацияТаблицыПриемки).
//    * ШтрихкодыУпаковокПланЭДО - (См. ИнициализацияТаблицыПриемки).
//    * НарушенСостав - Булево - служебное свойство, признак наличия расхождений.
//
Функция ТаблицыТОРГ2ПланФактПоДеревуУпаковокМОТП(ДеревоМаркированнойПродукции, НедопустимыеШтрихкоды, ПерваяИтерация = Ложь, ТоварыПринятыеБезРасхождений = Неопределено, Детализация = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НарушенСостав",  Ложь);
	
	ШтрихкодыУпаковокФактЭДО = ИнициализацияТаблицыПриемки();
	ШтрихкодыУпаковокПланЭДО = ИнициализацияТаблицыПриемки();
	
	КолонкиГруппировки = КолонкиГруппировкиТаблицыТОРГ2();
	КолонкиИтогов      = КолонкиИтоговТаблицыТОРГ2();
	
	Результат.Вставить("ШтрихкодыУпаковокФактЭДО", ШтрихкодыУпаковокФактЭДО);
	Результат.Вставить("ШтрихкодыУпаковокПланЭДО", ШтрихкодыУпаковокПланЭДО);
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.Строки Цикл
		
		ЗначениеШтрихкода =  СтрокаДерева.Штрихкод;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			И (Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
			Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками) Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДеревоМаркированнойПродукции, "Родитель")
				И ДеревоМаркированнойПродукции.Родитель <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДерева, ДеревоМаркированнойПродукции, "Принята, Излишек");
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДерева.Излишек Тогда
			Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или СтрокаДерева.Строки.Количество() = 0 Тогда
				ДополнитьТаблицыТОРГ2МОТП(ШтрихкодыУпаковокФактЭДО, СтрокаДерева, ЗначениеШтрихкода, Ложь, Истина);
			Иначе
				ВложенныйРезультат = ТаблицыТОРГ2ПланФактПоДеревуУпаковокМОТП(
					СтрокаДерева, НедопустимыеШтрихкоды, , ТоварыПринятыеБезРасхождений, Детализация);
				
				Для Каждого СтрокаТаблицы Из ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО Цикл
					СтрокаТаблицы.ЗначениеШтрихкода = ЗначениеШтрихкода;
					СтрокаТаблицы.ВидУпаковки = СтрокаДерева.ВидУпаковки;
				КонецЦикла;
				ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО.Свернуть(КолонкиГруппировки, КолонкиИтогов);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
					ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО, ШтрихкодыУпаковокФактЭДО);
			
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или СтрокаДерева.Строки.Количество() = 0 Тогда
			
			Если СтрокаДерева.Принята Тогда
				ДополнитьТаблицыТОРГ2МОТП(ШтрихкодыУпаковокФактЭДО, СтрокаДерева, ЗначениеШтрихкода, Истина, Ложь);
				ДополнитьТаблицыТОРГ2МОТП(ШтрихкодыУпаковокПланЭДО, СтрокаДерева, ЗначениеШтрихкода, Истина, Ложь);
			Иначе
				
				НедопустимыйКодМаркировки = НедопустимыеШтрихкоды.Получить(СтрокаДерева.НормализованныйШтрихкод);
				Если НедопустимыйКодМаркировки = Неопределено Тогда
					Если ТоварыПринятыеБезРасхождений = Неопределено
						Или ТоварыПринятыеБезРасхождений.Найти(СтрокаДерева.Номенклатура) = Неопределено Тогда
						Результат.НарушенСостав = Истина;
						ДополнитьТаблицыТОРГ2МОТП(ШтрихкодыУпаковокПланЭДО, СтрокаДерева, ЗначениеШтрихкода, Ложь, Ложь);
					Иначе
						СтрокаДерева.Принята = Истина;
						ДополнитьТаблицыТОРГ2МОТП(ШтрихкодыУпаковокФактЭДО, СтрокаДерева, ЗначениеШтрихкода, Истина, Ложь);
						ДополнитьТаблицыТОРГ2МОТП(ШтрихкодыУпаковокПланЭДО, СтрокаДерева, ЗначениеШтрихкода, Истина, Ложь);
					КонецЕсли;
				Иначе
					
					Результат.НарушенСостав = Истина;
					
					СтрокаДерева.НедопустимыйКодМаркировки = Истина;
					СтрокаДерева.ПредставлениеПроверкиКодаМаркировки = "Брак";
					ДополнитьТаблицыТОРГ2МОТП(ШтрихкодыУпаковокПланЭДО, СтрокаДерева, ЗначениеШтрихкода, Ложь, Ложь, Истина);
					ДополнитьТаблицыТОРГ2МОТП(ШтрихкодыУпаковокФактЭДО, СтрокаДерева, ЗначениеШтрихкода, Ложь, Ложь, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ВложенныйРезультат = ТаблицыТОРГ2ПланФактПоДеревуУпаковокМОТП(
				СтрокаДерева, НедопустимыеШтрихкоды, , ТоварыПринятыеБезРасхождений, Детализация);
			Если ВложенныйРезультат.НарушенСостав Тогда
				
				Результат.НарушенСостав = Истина;
				Для Каждого СтрокаТаблицы Из ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО Цикл
					СтрокаТаблицы.КоличествоИзлишек = СтрокаТаблицы.КоличествоПринято;
					СтрокаТаблицы.КоличествоПринято = 0;
				КонецЦикла;
			ИначеЕсли СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
				
				СтрокаДерева.Принята = Истина;
				
				// Для вложенных строк перезаполнить код на код родительской упаковки
				Для Каждого СтрокаТаблицы Из ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО Цикл
					СтрокаТаблицы.ЗначениеШтрихкода = ЗначениеШтрихкода;
					СтрокаТаблицы.ВидУпаковки = СтрокаДерева.ВидУпаковки;
				КонецЦикла;
				
				ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО.Свернуть(КолонкиГруппировки, КолонкиИтогов);
				
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из ВложенныйРезультат.ШтрихкодыУпаковокПланЭДО Цикл
				СтрокаТаблицы.ЗначениеШтрихкода = ЗначениеШтрихкода;
				СтрокаТаблицы.ВидУпаковки = СтрокаДерева.ВидУпаковки;
			КонецЦикла;
			
			ВложенныйРезультат.ШтрихкодыУпаковокПланЭДО.Свернуть(КолонкиГруппировки, КолонкиИтогов);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВложенныйРезультат.ШтрихкодыУпаковокФактЭДО, ШтрихкодыУпаковокФактЭДО);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВложенныйРезультат.ШтрихкодыУпаковокПланЭДО, ШтрихкодыУпаковокПланЭДО);
			
		КонецЕсли;
		
		Если ПерваяИтерация Тогда
			
			Результат.НарушенСостав = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.ШтрихкодыУпаковокФактЭДО = ШтрихкодыУпаковокФактЭДО;
	Результат.ШтрихкодыУпаковокПланЭДО = ШтрихкодыУпаковокПланЭДО;
	
	Возврат Результат;
	
КонецФункции

// Инициализирует пустую таблицу маркируемой продукции.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица определяющая состав маркируемой продукции документа:
//    Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура.
//    Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика.
//    ЗначениеШтрихкода - Строка - значение штрихкода.
//    КоличествоПринято - Число - количество принятой продукции.
//    КоличествоИзлишек - Число - количество продукции принятой сверх плана.
//    КоличествоНедостача - Число - количество недопоставленной продукции.
//    КоличествоБрак - Число - количество бракованной продукции (код маркировки не соответствует условиям проверок).
//    Брак - Булево - флаг. Истина, если код макировки в строке бракованный.
//
Функция ИнициализацияТаблицыПриемки() Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура",       Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТЗ.Колонки.Добавить("Характеристика",     Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТЗ.Колонки.Добавить("ЗначениеШтрихкода",  ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТЗ.Колонки.Добавить("ВидУпаковки",        Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ТЗ.Колонки.Добавить("КоличествоПринято",  Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КоличествоИзлишек",  Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КоличествоНедостача",Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КоличествоБрак",     Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Брак",               Новый ОписаниеТипов("Булево"));
	
	Возврат ТЗ;
	
КонецФункции

Функция КолонкиГруппировкиТаблицыТОРГ2()
	Возврат "Номенклатура, Характеристика, ЗначениеШтрихкода, ВидУпаковки, Брак";
КонецФункции

Функция КолонкиИтоговТаблицыТОРГ2()
	Возврат "КоличествоПринято, КоличествоИзлишек, КоличествоНедостача, КоличествоБрак";
КонецФункции
// Добавляет строку в приемник, заполняет совпадающие свойства новой строки по данным источника, заполняет количество по строке.
// 
// Параметры:
//  ТаблицаПриемник - См. ИнициализацияТаблицыПриемки.
//  СтрокаИсточник - СтрокаДереваЗначений - строка источник
//  Принята - Булево - флаг, истина, если количество по строке нужно сохранить как КоличествоПринято.
//  Излишек - Булево - флаг, истина, если количество по строке нужно сохранить как КоличествоИзлишек.
//  Брак - Булево - флаг, истина, если количество по строке нужно сохранить как КоличествоБрак.
//
Процедура ДополнитьТаблицыТОРГ2(ТаблицаПриемник, СтрокаИсточник, ЗначениеШтрихкода, Принята, Излишек, Брак = Ложь)
	
	СтрокаПриемник = ТаблицаПриемник.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	СтрокаПриемник.ЗначениеШтрихкода = ЗначениеШтрихкода;
	Количество = Макс(СтрокаИсточник.КоличествоВложенныхЕдиниц, 1);
	
	Если Принята Тогда
		СтрокаПриемник.КоличествоПринято = Количество;
	ИначеЕсли Излишек Тогда
		СтрокаПриемник.КоличествоИзлишек = Количество;
	ИначеЕсли Брак Тогда
		СтрокаПриемник.КоличествоБрак = Количество;
		СтрокаПриемник.Брак = Истина;
	Иначе
		СтрокаПриемник.КоличествоНедостача = Количество;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет строку в приемник, заполняет совпадающие свойства новой строки по данным источника, заполняет количество по строке.
// 
// Параметры:
//  ТаблицаПриемник - См. ИнициализацияТаблицыПриемки.
//  СтрокаИсточник - СтрокаДереваЗначений - строка источник
//  Принята - Булево - флаг, истина, если количество по строке нужно сохранить как КоличествоПринято.
//  Излишек - Булево - флаг, истина, если количество по строке нужно сохранить как КоличествоИзлишек.
//  Брак - Булево - флаг, истина, если количество по строке нужно сохранить как КоличествоБрак.
//
Процедура ДополнитьТаблицыТОРГ2МОТП(ТаблицаПриемник, СтрокаИсточник, ЗначениеШтрихкода, Принята, Излишек, Брак = Ложь)
	
	СтрокаПриемник = ТаблицаПриемник.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	СтрокаПриемник.ЗначениеШтрихкода = ЗначениеШтрихкода;
	
	Количество = СтрокаИсточник.КоличествоПачек;
	Если Принята Тогда
		СтрокаПриемник.КоличествоПринято = Количество;
	ИначеЕсли Излишек Тогда
		СтрокаПриемник.КоличествоИзлишек = Количество;
	ИначеЕсли Брак Или Количество = 0 Тогда
		Если Количество = 0 Тогда
			Количество = СтрокаИсточник.КоличествоБлоков * СтрокаИсточник.Коэффициент;
		КонецЕсли;
		СтрокаПриемник.КоличествоБрак = Количество;
		СтрокаПриемник.Брак = Истина;
	Иначе
		СтрокаПриемник.КоличествоНедостача = Количество;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеРезультатовСверки

// Фиксирует результаты сверки кодов маркировки в документе, из которого она была вызвана.
//
// Параметры:
//   РезультатСверки - Структура - (См. ПараметрыОкончанияПроверки()).
//
Процедура ЗафиксироватьРезультатСверки(РезультатСверки) Экспорт
	
	СверкаКодовМаркировкиИСМППереопределяемый.ОтразитьРезультатыСверкиВДокументе(РезультатСверки);
	
КонецПроцедуры

// Инициализирует структуру параметров завершения сверки кодов маркировки (ИС МП)
// 
// Возвращаемое значение:
//   Структура - содержит следующие поля:
//     * ПроверяемыйДокумент             - ДокументСсылка - документ, для которого выполнялась сверка кодов.
//     * ТаблицаШтрихкодовВерхнегоУровня - ТаблицаЗначений - содержит следующие колонки:
//        ** ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод упаковки
//        ** Штрихкод - Строка - Значение штрихкода
//     * ТаблицаРасхожденийКодовМаркировки - ТаблицаЗначений - содержит следующие колонки:
//        ** Номенклатура        - ОпределяемыйТип.Номенклатура - Номекнлатура
//        ** Характеристика      - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика
//        ** Серия               - ОпределяемыйТип.СерияНоменклатуры - Серия
//        ** Количество          - Число - количество по документу
//        ** КоличествоПодобрано - Число - фактическое количество по результатам проверки и подбора
//
Функция ПараметрыОкончанияПроверки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПроверяемыйДокумент");
	Результат.Вставить("ТаблицаШтрихкодовВерхнегоУровня");
	Результат.Вставить("ТаблицаРасхожденийКодовМаркировки");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОпределениеХозяйственнойОперации

// Определяет соответствие вида корректировки хозяйственной операции "Корректировка по согласовнию", 
// результат возвращает через второй параметр.
//
// Параметры:
//  Контекст - ДокументСсылка - Контекст для определения типа документа.
//
// Возвращаемое значение:
//  Булево - Истина, если условие выполнено.
Функция ЭтоДокументКорректировкаПриобретенияПоСогласованиюСторон(Контекст) Экспорт
	
	Результат = Ложь;
	
	СверкаКодовМаркировкиИСМППереопределяемый.ЭтоДокументКорректировкаПриобретения(Контекст, Результат);
	
	Если Результат Тогда
		СверкаКодовМаркировкиИСМППереопределяемый.ЭтоКорректировкаПриобретенияПоСогласованию(Контекст, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти