

////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиКлиентПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму выбора пользователей информационной базы.
//
// Параметры:
//  ВладелецФормы - Объект - владелец формы выбора;
//  ТекущийПользователь - СправочникСсылка.Пользователи - ссылка на текущего пользователя в справочнике "Пользователи".
//
Процедура ОткрытьФормуВыбораПользователей(ВладелецФормы, ТекущийПользователь) Экспорт
	
	Параметры = Новый Структура("Ключ", ТекущийПользователь);
	Параметры.Вставить("РежимВыбора",             Истина);
	Параметры.Вставить("ТекущаяСтрока",           ТекущийПользователь);
	Параметры.Вставить("ВыборГруппПользователей", Ложь);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Параметры, ЭтотОбъект);
	
КонецПроцедуры

// Проверяет на модифицированность объект в случае обычного приложения.
//
// Параметры:
//  Объект - ДокументОбъект - Основной реквизит формы, модифицированность которого надо проверить;
//  Форма - Форма - форма объекта, модифицированность которого надо проверить.
//  Результат - Булево - результат проверки модифицированности формы объекта.
//
Процедура ОбъектМодифицирован(Объект, Форма, Результат) Экспорт
	
КонецПроцедуры

// Заполняет адрес хранилища с таблицей значений - каталога товаров.
//
// Параметры:
//  ИдентификаторФормы   - УникальныйИдентификатор - уникальный  идентификатор формы, вызвавшей функцию. Форма должна
//                                                   возвращать адрес хранилища значения, содержащего таблицу товаров,
//                                                   либо Неопределено, если была вызвана отмена операции.
//  ОбработкаПродолжения - ОписаниеОповещения - содержит описание процедуры,
//                            которая будет вызвана после закрытия формы подбора.
//
Процедура ОткрытьФормуПодбораТоваров(ИдентификаторФормы, ОбработкаПродолжения) Экспорт
	
КонецПроцедуры

// Проверяет на использование в прикладном решении библиотеки интернет поддержки пользователей.
//
// Параметры:
//  Использование - булево - признак использования библиотеки БИП.
//
Процедура ПроверитьИспользованиеИнтернетПоддержкаПользователей(Использование) Экспорт
	
	Если СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().РазделениеВключено
		ИЛИ НЕ ПолучитьФункциональнуюОпциюИнтерфейса("РаботаВЛокальномРежиме") Тогда
		Использование = Ложь;
	Иначе
		Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Лицензионное соглашение

// Вспомогательная процедура для запуска механизма согласия пользователя с условиями лицензионного соглашения.
//
// Параметры:
//  СогласенСУсловиями - Булево - если возвращает Ложь, то пользователь не согласен с условиями.
//
Процедура ЗапроситьСогласиеСУсловиямиЛицензионногоСоглашения(СогласенСУсловиями) Экспорт
	
КонецПроцедуры

#Область ОтражениеВУчете

// Выполняется при подборе (выборе) учетного документа.
// Позволяет отказаться от стандартного ввода значения, открыв необходимую форму.
//
// Параметры:
//  Настройки - Структура - настройки подбора учетного документа.
//   * ИмяОбъектаМетаданных - Строка - полное имя объекта метаданных для выбора.
//   * ИмяТипаСсылки - Строка - имя типа ссылки для выбора. Например, "ДокументСсылка.ПоступлениеТоваровУслуг".
//   * Контрагент - ОпределяемыйТип.УчастникЭДО - контрагент по электронному документу.
//   * Организация - ОпределяемыйТип.Организация - организация по электронному документу.
//  ОповещениеОВыборе - ОписаниеОповещения - оповещение, которое необходимо выполнить с результатом выбора пользователя.
//                                           Если пользователь отказался от выбора, то выполнить со значением Неопределено.
//  СтандартнаяОбработка - Булево - признак открытия стандартного выбора значения.
//                                  Если процедура переопределяется, то следует установить Ложь.
//
// Пример:
//  // Открываем форму выбора с установленным отбором по контрагенту и организации.
//  СтандартнаяОбработка = Ложь;
//  ПараметрыФормы = Новый Структура("РежимВыбора,ЗакрыватьПриВыборе", Истина, Истина);
//  Отбор = Новый Структура("Контрагент,Организация", Настройки.Контрагент, Настройки.Организация);
//  ПараметрыФормы.Вставить("Отбор", Отбор);
//  ОткрытьФорму(Настройки.ИмяОбъектаМетаданных + ".ФормаВыбора", ПараметрыФормы,,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//
Процедура ПриПодбореУчетногоДокумента(Знач Настройки, Знач ОповещениеОВыборе, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Открывает форму редактирования кода налогового органа, если он хранится в конфигурации
//
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - обработчик оповещения о завершении.
//      В обработчик оповещения возвращается значение:
//			Неопределено - при нажатии пользователем кнопки Отмена;
//			Число        - Номер налогового органа введенного пользователем
//  СтандартнаяОбработка - Булево - начальное значение Истина; если установить Ложь, 
//                то открытие стандартного окна ввода номера налогового органа не произойдет.
//
Процедура ЗаполнитьКодНалоговогоОргана(ОповещениеОЗавершении, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Открывает форму выбора договора контрагента.
//
// Параметры:
//  Параметры - Структура - параметры формы.
//     * Организация - ОпределяемыйТип.Организация - ссылка на организацию.
//     * Контрагент  - ОпределяемыйТип.КонтрагентБЭД - ссылка на контрагента.
//  Владелец - ФормаКлиентскогоПриложения, ПолеФормы - форма или элемент управления другой формы.
//  ОповещениеОЗакрытии - ОписаниеОповещения - описание оповещения о закрытии, с которым нужно открыть форму.
//  СтандартнаяОбработка - Булево - признак использования стандартной формы выбора без дополнительного отбора.
//
Процедура ОткрытьФормуВыбораДоговора(Параметры, Владелец, ОповещениеОЗакрытии, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

#Область ПереопределениеФормПодсистемы

// Общие замечания для методов области "ПереопределениеФормПодсистемы".
// Поддерживается переопределение форм со следующим назначением и стандартными элементами:
// * "СопоставлениеНоменклатуры" - форма сопоставления номенклатуры.
//  ** "Характеристика" - колонка характеристики ИБ таблицы сопоставления.
//  ** "Упаковка" - колонка упаковки ИБ таблицы сопоставления.
// Описание параметра "Контекст" для всех методов области:
//  * Назначение - Строка - назначение формы (см. выше).
//  * Форма - ФормаКлиентскогоПриложения - форма, для которой вызвано событие.
//  * Префикс - Строка - префикс имен для новых реквизитов, команд и элементов формы.
//  * СтандартныйЭлемент - Строка - идентификатор стандартного элемента (см. выше), для которого вызвано событие.
//                       - Неопределено - событие вызвано для элемента, добавленного в переопределяемой части.

// Устарела. Следует использовать ЭлектронноеВзаимодействиеКлиентПереопределяемый.ПриОткрытииФормыПодсистемы.
// Выполняется при открытии формы подсистемы.
// Позволяет выполнить дополнительные действия с формой на клиенте.
//
// Параметры:
//  Контекст - ФиксированнаяСтруктура - контекст создания формы. См. общие замечания области "ПереопределениеФормПодсистемы".
//  Отказ - Булево - аналогичен параметру обработчика события "ПриОткрытии" управляемой формы.
//
// Пример:
//  Если ВРег(Контекст.Назначение) = ВРег("СопоставлениеНоменклатуры") Тогда
//  	// действия с формой на клиенте...
//  КонецЕсли;
//
Процедура ПриОткрытииФормыПодсистемы(Контекст, Отказ) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать ЭлектронноеВзаимодействиеКлиентПереопределяемый.ЭлементФормыПодсистемыПриИзменении
// Обработчик события ПриИзменении элемента формы подсистемы.
//
// Параметры:
//  Контекст - Структура - контекст выполнения метода. См. общие замечания области "ПереопределениеФормПодсистемы".
//  Элемент - ЭлементФормы - см. описание параметра события элемента формы.
//
Процедура ЭлементФормыПодсистемыПриИзменении(Контекст, Элемент) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать ЭлектронноеВзаимодействиеКлиентПереопределяемый.ЭлементФормыПодсистемыНачалоВыбора
// Обработчик события НачалоВыбора элемента формы подсистемы.
//
// Параметры:
//  Контекст - Структура - контекст выполнения метода. См. общие замечания области "ПереопределениеФормПодсистемы".
//  Элемент - ЭлементФормы - см. описание параметра события элемента формы.
//  ДанныеВыбора - СписокЗначений - см. описание параметра события элемента формы.
//  СтандартнаяОбработка - Булево - см. описание параметра события элемента формы.
//
Процедура ЭлементФормыПодсистемыНачалоВыбора(Контекст, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать ЭлектронноеВзаимодействиеКлиентПереопределяемый.ЭлементФормыПодсистемыНачалоВыбораИзСписка
// Обработчик события НачалоВыбораИзСписка элемента формы подсистемы.
//
// Параметры:
//  Контекст - Структура - контекст выполнения метода. См. общие замечания области "ПереопределениеФормПодсистемы".
//  Элемент - ЭлементФормы - см. описание параметра события элемента формы.
//  СтандартнаяОбработка - Булево - см. описание параметра события элемента формы.
//
Процедура ЭлементФормыПодсистемыНачалоВыбораИзСписка(Контекст, Элемент, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать ЭлектронноеВзаимодействиеКлиентПереопределяемый.ЭлементФормыПодсистемыОчистка
// Обработчик события Очистка элемента формы подсистемы.
//
// Параметры:
//  Контекст - Структура - контекст выполнения метода. См. общие замечания области "ПереопределениеФормПодсистемы".
//  Элемент - ЭлементФормы - см. описание параметра события элемента формы.
//  СтандартнаяОбработка - Булево - см. описание параметра события элемента формы.
//
Процедура ЭлементФормыПодсистемыОчистка(Контекст, Элемент, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать ЭлектронноеВзаимодействиеКлиентПереопределяемый.ЭлементФормыПодсистемыСоздание
// Обработчик события Создание элемента формы подсистемы.
//
// Параметры:
//  Контекст - Структура - контекст выполнения метода. См. общие замечания области "ПереопределениеФормПодсистемы".
//  Элемент - ЭлементФормы - см. описание параметра события элемента формы.
//  СтандартнаяОбработка - Булево - см. описание параметра события элемента формы.
//
Процедура ЭлементФормыПодсистемыСоздание(Контекст, Элемент, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать ЭлектронноеВзаимодействиеКлиентПереопределяемый.ЭлементФормыПодсистемыОбработкаВыбора
// Обработчик события ОбработкаВыбора элемента формы подсистемы.
//
// Параметры:
//  Контекст - Структура - контекст выполнения метода. См. общие замечания области "ПереопределениеФормПодсистемы".
//  Элемент - ЭлементФормы - см. описание параметра события элемента формы.
//  ВыбранноеЗначение - Произвольный - см. описание параметра события элемента формы.
//  СтандартнаяОбработка - Булево - см. описание параметра события элемента формы.
//
Процедура ЭлементФормыПодсистемыОбработкаВыбора(Контекст, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать ЭлектронноеВзаимодействиеКлиентПереопределяемый.ЭлементФормыПодсистемыИзменениеТекстаРедактирования
// Обработчик события ИзменениеТекстаРедактирования элемента формы подсистемы.
//
// Параметры:
//  Контекст - Структура - контекст выполнения метода. См. общие замечания области "ПереопределениеФормПодсистемы".
//  Элемент - ЭлементФормы - см. описание параметра события элемента формы.
//  Текст - Строка - см. описание параметра события элемента формы.
//  СтандартнаяОбработка - Булево - см. описание параметра события элемента формы.
//
Процедура ЭлементФормыПодсистемыИзменениеТекстаРедактирования(Контекст, Элемент, Текст, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать ЭлектронноеВзаимодействиеКлиентПереопределяемый.ЭлементФормыПодсистемыАвтоПодбор
// Обработчик события АвтоПодбор элемента формы подсистемы.
//
// Параметры:
//  Контекст - Структура - контекст выполнения метода. См. общие замечания области "ПереопределениеФормПодсистемы".
//  Элемент - ЭлементФормы - см. описание параметра события элемента формы.
//  Текст - Строка - см. описание параметра события элемента формы.
//  ДанныеВыбора - СписокЗначений  - см. описание параметра события элемента формы.
//  ПараметрыПолученияДанных - Структура, Неопределено - см. описание параметра события элемента формы.
//  Ожидание - Число - см. описание параметра события элемента формы.
//  СтандартнаяОбработка - Булево - см. описание параметра события элемента формы.
//
Процедура ЭлементФормыПодсистемыАвтоПодбор(Контекст, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать ЭлектронноеВзаимодействиеКлиентПереопределяемый.ЭлементФормыПодсистемыОкончаниеВводаТекста
// Обработчик события ОкончаниеВводаТекста элемента формы подсистемы.
//
// Параметры:
//  Контекст - Структура - контекст выполнения метода. См. общие замечания области "ПереопределениеФормПодсистемы".
//  Элемент - ЭлементФормы - см. описание параметра события элемента формы.
//  Текст - Строка - см. описание параметра события элемента формы.
//  ДанныеВыбора - СписокЗначений  - см. описание параметра события элемента формы.
//  ПараметрыПолученияДанных - Структура, Неопределено - см. описание параметра события элемента формы.
//  СтандартнаяОбработка - Булево - см. описание параметра события элемента формы.
//
Процедура ЭлементФормыПодсистемыОкончаниеВводаТекста(Контекст, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать ЭлектронноеВзаимодействиеКлиентПереопределяемый.ЭлементФормыПодсистемыНажатие
// Обработчик события Нажатие элемента формы подсистемы.
//
// Параметры:
//  Контекст - Структура - контекст выполнения метода. См. общие замечания области "ПереопределениеФормПодсистемы".
//  Элемент - ЭлементФормы - см. описание параметра события элемента формы.
//
Процедура ЭлементФормыПодсистемыНажатие(Контекст, Элемент) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать ЭлектронноеВзаимодействиеКлиентПереопределяемый.ЭлементФормыПодсистемыОбработкаНавигационнойСсылки
// Обработчик события ОбработкаНавигационнойСсылки элемента формы подсистемы.
//
// Параметры:
//  Контекст - Структура - контекст выполнения метода. См. общие замечания области "ПереопределениеФормПодсистемы".
//  Элемент - ЭлементФормы - см. описание параметра события элемента формы.
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - см. описание параметра события элемента формы.
//  СтандартнаяОбработка - Булево - см. описание параметра события элемента формы.
//
Процедура ЭлементФормыПодсистемыОбработкаНавигационнойСсылки(Контекст, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать ЭлектронноеВзаимодействиеКлиентПереопределяемый.КомандаФормыПодсистемыДействие
// Выполняет действие команды формы подсистемы.
//
// Параметры:
//  Контекст - Структура - контекст выполнения метода. См. общие замечания области "ПереопределениеФормПодсистемы".
//  Команда - КомандаФормы - см. описание параметра действия команды формы.
//
Процедура КомандаФормыПодсистемыДействие(Контекст, Команда) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатуры

// Устарела. Следует использовать СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.ОткрытьФормуНоменклатуры.
// Открывает форму элемента номенклатуры.
//
// Параметры:
//  Параметры - Структура - параметры формы.
//  Владелец - ФормаКлиентскогоПриложения - владелец формы.
//  Уникальность - Произвольный - ключ уникальности формы.
//  ОповещениеОЗакрытии - ОписаниеОповещения - описание оповещения о закрытии, с которым нужно открыть форму.
//
// Пример:
//  ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Параметры, Владелец, Уникальность);
//
Процедура ОткрытьФормуНоменклатуры(Знач Параметры, Знач Владелец, Знач Уникальность, Знач ОповещениеОЗакрытии) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.ОткрытьФормуВыбораНоменклатуры.
// Открывает форму выбора элемента номенклатуры.
//
// Параметры:
//  Параметры - Структура - параметры формы.
//  Владелец - ФормаКлиентскогоПриложения - владелец формы.
//  Уникальность - Произвольный - ключ уникальности формы.
//
// Пример:
//  ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", Параметры, Владелец, Уникальность);
//
Процедура ОткрытьФормуВыбораНоменклатуры(Знач Параметры, Знач Владелец, Знач Уникальность) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.ПриСозданииНоменклатурыПоДаннымКонтрагента.
// Выполняется при создании номенклатуры информационной базы по данным контрагента.
//
// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив - номенклатура контрагентов, по которой нужно создать номенклатуру информационной базы.
//                                           См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента.
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое нужно выполнить после создания номенклатуры с результатом,
//                                               представляющим массив структур со свойствами:
//   * НоменклатураКонтрагента - Структура - элемент из параметра НаборНоменклатурыКонтрагентов, для которого удалось создать номенклатуру.
//   * НоменклатураИБ - Структура - описание созданной номенклатуры. См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//  СтандартнаяОбработка - Булево - если метод реализован, то необходимо установить значение Ложь.
//
Процедура ПриСозданииНоменклатурыПоДаннымКонтрагента(Знач НаборНоменклатурыКонтрагентов, Знач ОповещениеОЗавершении, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
