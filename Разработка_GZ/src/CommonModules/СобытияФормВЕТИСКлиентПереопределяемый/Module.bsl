#Область Локализация

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Возврат;
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - ЭлементФормы     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиКоманд

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма                   - УправляемаяФорма   - форма, в которой вызывается команда открытия обработки сопоставления;
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора,
//  ПараметрыПодбора        - Структура          - параметры открытия формы подбора товаров, состав полей определен в функции
//													ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ПараметрыФормыПодбораТоваров.
//
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено, ПараметрыПодбора = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Открывает форму выбора характеристики номенклатуры.
//
// Параметры:
//  Форма                   - УправляемаяФорма   - форма, в которой вызывается команда выбора номенклатуры,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора,
//  ПараметрыХарактеристики - Структура          - параметры создания характеристики номенклатуры из формы выбора.
//
Процедура ОткрытьФормуВыбораХарактеристикиНоменклатуры(Форма, ОповещениеПриЗавершении, ПараметрыХарактеристики = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Открывает форму выбора характеристики номенклатуры.
//
// Параметры:
//  Форма                 - УправляемаяФорма - форма, в которой вызывается команда выбора номенклатуры,
//  ПараметрыНоменклатуры - Структура        - параметры создания номенклатуры из формы выбора номенклатуры
//										(см. описание ИнтеграцияВЕТИСВызовСервера.ПараметрыНоменклатуры).
//
Процедура ОткрытьФормуВыбораНоменклатуры(Форма, ПараметрыНоменклатуры = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ПодконтрольнаяПродукцияВЕТИС", Истина));
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Открывает форму создания номенклатуры.
//
// Параметры:
//  Форма                 - УправляемаяФорма                       - форма, в которой вызывается команда создания номенклатуры,
//  ПараметрыНоменклатуры - Структура                              - параметры создания номенклатуры
//										(см. описание ИнтеграцияВЕТИСВызовСервера.ПараметрыНоменклатуры),
//  ЕдиницаИзмеренияВЕТИС - СправочникСсылка.ЕдиницыИзмеренияВЕТИС - единица измерения ВЕТИС, на основании которой 
//																		создается номенклатура.
//
Процедура ОткрытьФормуСозданияНоменклатуры(Форма, ПараметрыНоменклатуры, ЕдиницаИзмеренияВЕТИС) Экспорт
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(ПараметрыНоменклатуры) Тогда
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("Наименование",       ПараметрыНоменклатуры.НаименованиеВЕТИС);
		ЗначенияЗаполнения.Вставить("НаименованиеПолное", ПараметрыНоменклатуры.НаименованиеВЕТИС);
		ЗначенияЗаполнения.Вставить("ЕдиницаИзмерения",   ИнтеграцияВЕТИСБПВызовСервера.ПолучитьЕдиницуИзмерения(ЕдиницаИзмеренияВЕТИС));
		ЗначенияЗаполнения.Вставить("ПодконтрольнаяПродукцияВЕТИС", Истина);
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Открывает форму создания нового контрагента.
//
// Параметры:
//  ФормаВладелец - УправляемаяФорма - форма-владелец.
//  Реквизиты     - Структура        - данные заполнения нового контрагента:
//   * Наименование            - Строка - наименование контрагента,
//   * СокращенноеНаименование - Строка - сокращенное наименование контрагента,
//   * ИНН                     - Строка - ИНН контрагента,
//   * КПП                     - Строка - КПП контрагента.
//
Процедура ОткрытьФормуСозданияКонтрагента(ФормаВладелец, Реквизиты) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	
	Основание.Вставить("НаименованиеПолное",      Реквизиты.СокращенноеНаименование);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Открывает форму выбора контрагента.
//
// Параметры:
//  ФормаВладелец - УправляемаяФорма - форма, из которой осуществляется выбор.
//  Реквизиты     - Структура        - данные для заполнения отбора:
//   * Наименование            - Строка - наименование контрагента,
//   * СокращенноеНаименование - Строка - сокращенное наименование контрагента,
//   * ИНН                     - Строка - ИНН контрагента,
//   * КПП                     - Строка - КПП контрагента.
//
Процедура ОткрытьФормуВыбораКонтрагента(ФормаВладелец, Реквизиты) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Выполняет действия при изменении номенклатуры в таблице Товары.
//
// Параметры:
//  Форма                  - УправляемаяФорма            - форма, в которой произошло событие.
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - строка таблицы товаров.
//  КэшированныеЗначения   - Структура                   - сохраненные значения параметров, используемых при обработке строки таблицы.
//  ПараметрыЗаполнения    - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//  ПараметрыУказанияСерий - Структура                   - состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Процедура ПриИзмененииНоменклатуры(Форма,
								ТекущаяСтрока,
								КэшированныеЗначения,
								ПараметрыЗаполнения,
								ПараметрыУказанияСерий = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении характеристики в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура                   - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения  - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при создании характеристики в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент              - ПолеФормы                   - поле, в котором происходит создание характеристики,
//  СтандартнаяОбработка - Булево                      - признак отказа от стандартной обработки события.
//
Процедура ХарактеристикаСоздание(Форма, ТекущаяСтрока, Элемент, СтандартнаяОбработка) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении серии в таблице Товары.
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма, в которой произошло событие,
//  ПараметрыУказанияСерий - Структура        - состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий,
//  ТекущиеДанные          - ДанныеФормыЭлементКоллекции, Структура - строка таблицы товаров,
//  КэшированныеЗначения   - Структура        - сохраненные значения параметров, используемых при обработке строки таблицы,
//  ПараметрыЗаполнения    - Структура        - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииСерии(Форма,
							ПараметрыУказанияСерий,
							ТекущиеДанные,
							КэшированныеЗначения = Неопределено,
							ПараметрыЗаполнения = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении единицы измерения ВЕТИС в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура                   - сохраненные значения параметров, используемых при обработке строки таблицы,
//  ПараметрыЗаполнения  - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииЕдиницыИзмеренияВЕТИС(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении количества ВЕТИС в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура                   - сохраненные значения параметров, используемых при обработке строки таблицы,
//  ПараметрыЗаполнения  - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииКоличестваВЕТИС(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	Перем СообщениеОбОшибке;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС 
		И СтрНайти(Форма.ИмяФормы, "ВходящаяТранспортнаяОперацияВЕТИС") > 0 Тогда
		
		ИмяПоляКоличество      = "Количество" + ПараметрыЗаполнения.Суффикс;
		ИмяПоляКоличествоВЕТИС = "Количество" + ПараметрыЗаполнения.Суффикс + "ВЕТИС";
		
		Если ТекущаяСтрока.Свойство(ИмяПоляКоличество) И ТекущаяСтрока.Свойство(ИмяПоляКоличествоВЕТИС) Тогда
			Если ТекущаяСтрока.Свойство("Номенклатура") Тогда
				НовоеКоличество = ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ПересчитатьКоличествоЕдиниц(
					 ТекущаяСтрока[ИмяПоляКоличествоВЕТИС], ТекущаяСтрока.Номенклатура, ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, СообщениеОбОшибке);
				Если НовоеКоличество <> Неопределено Тогда
					ТекущаяСтрока[ИмяПоляКоличество] = НовоеКоличество;
				Иначе
					ТекущаяСтрока[ИмяПоляКоличество] = ТекущаяСтрока[ИмяПоляКоличествоВЕТИС];
				КонецЕсли; 
			Иначе
				ТекущаяСтрока[ИмяПоляКоличество] = ТекущаяСтрока[ИмяПоляКоличествоВЕТИС];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении количества в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура                   - сохраненные значения параметров, используемых при обработке строки таблицы,
//  ПараметрыЗаполнения  - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	Перем СообщениеОбОшибке;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС
		И СтрНайти(Форма.ИмяФормы, "ВходящаяТранспортнаяОперацияВЕТИС") = 0 Тогда
		
		ИмяПоляКоличество      = "Количество" + ПараметрыЗаполнения.Суффикс;
		ИмяПоляКоличествоВЕТИС = "Количество" + ПараметрыЗаполнения.Суффикс + "ВЕТИС";
		
		Если ТекущаяСтрока.Свойство(ИмяПоляКоличество) И ТекущаяСтрока.Свойство(ИмяПоляКоличествоВЕТИС) Тогда
			Если ТекущаяСтрока.Свойство("Номенклатура") Тогда
				НовоеКоличество = ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ПересчитатьКоличествоЕдиницВЕТИС(
					 ТекущаяСтрока[ИмяПоляКоличество], ТекущаяСтрока.Номенклатура, ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, СообщениеОбОшибке);
					 
				Если НовоеКоличество <> Неопределено Тогда
					ТекущаяСтрока[ИмяПоляКоличествоВЕТИС] = НовоеКоличество;
				Иначе
					ТекущаяСтрока[ИмяПоляКоличествоВЕТИС] = ТекущаяСтрока[ИмяПоляКоличество];
				КонецЕсли; 
			Иначе
				ТекущаяСтрока[ИмяПоляКоличествоВЕТИС] = ТекущаяСтрока[ИмяПоляКоличество];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

// Выполняет действия при начале выбора характеристики в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент              - ПолеВвода                   - элемент формы Характеристика,
//  ДанныеВыбора         - СписокЗначений              - в обработчике можно сформировать и передать в этом параметре данные для выбора,
//  СтандартнаяОбработка - Булево                      - признак выполнения стандартной (системной) обработки события.
//
Процедура НачалоВыбораХарактеристики(Форма, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывает процедуру обработки выбора номенклатуры, если произошел выбор из формы выбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения выбора номенклатуры,
//  ВыбранноеЗначение       - Произвольный       - результат выбора,
//  ИсточникВыбора          - УправляемаяФорма   - форма, в которой осуществлен выбор номенклатуры.
//
Процедура ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру обработки получения данных выбора номенклатуры, если произошло окончание ввода текста.
//
// Параметры:
//  ДанныеВыбора             - СписокЗначений - данные выбора номенклатуры, параметр события "ОкончаниеВводаТекста" поля формы,
//  ПараметрыПолученияДанных - Структура      - структура получения данных номенклатуры, параметр события "ОкончаниеВводаТекста" поля формы,
//  СтандартнаяОбработка     - Булево         - признак стандартной обработки выбора номенклатуры, параметр события "ОкончаниеВводаТекста" поля формы.
//
Процедура ОбработкаПолученияДанныхВыбораНоменклатуры(ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Вызывает процедуру обработки выбора серии, если произошел выбор из формы подбора.
//
// Параметры:
//	Форма                  - УправляемаяФорма - форма, в которой произошло событие,
//	ПараметрыУказанияСерий - Структура        - состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий,
//	ВыбраннаяСерия         - ОпределяемыйТип.СерияНоменклатурыВЕТИС - обрабатываемое значение серии,
//	ИсточникВыбора         - УправляемаяФорма - форма, в которой осуществлен выбор,
//	ПараметрыЗаполнения    - Структура        - параметры обработки выбора серии.
//
Процедура ОбработкаВыбораСерии(Форма,
								ПараметрыУказанияСерий,
								ВыбраннаяСерия,
								ИсточникВыбора,
								ПараметрыЗаполнения = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

