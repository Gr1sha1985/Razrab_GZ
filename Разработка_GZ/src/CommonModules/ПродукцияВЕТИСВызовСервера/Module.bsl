#Область СлужебныйПрограммныйИнтерфейс

#Область СпособыХраненияПриТранспортировке

// Переводит значение перечисления в строку и обратно, для обмена с ВетИС
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.СпособыХраненияПриТранспортировкеВЕТИС - значение для перекодировки
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.СпособыХраненияПриТранспортировкеВЕТИС - значение после перекодировки
//
Функция СпособХраненияПриТранспортировке(ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "FROZEN" Тогда
		Возврат Перечисления.СпособыХраненияПриТранспортировкеВЕТИС.Замороженный;
	ИначеЕсли ЗначениеПоиска = "CHILLED" Тогда
		Возврат Перечисления.СпособыХраненияПриТранспортировкеВЕТИС.Охлажденный;
	ИначеЕсли ЗначениеПоиска = "COOLED" Тогда
		Возврат Перечисления.СпособыХраненияПриТранспортировкеВЕТИС.Охлаждаемый;
	ИначеЕсли ЗначениеПоиска = "VENTILATED" Тогда
		Возврат Перечисления.СпособыХраненияПриТранспортировкеВЕТИС.Вентилируемый;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыХраненияПриТранспортировкеВЕТИС.Замороженный Тогда
		Возврат "FROZEN";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыХраненияПриТранспортировкеВЕТИС.Охлажденный Тогда
		Возврат "CHILLED";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыХраненияПриТранспортировкеВЕТИС.Охлаждаемый Тогда
		Возврат "COOLED";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыХраненияПриТранспортировкеВЕТИС.Вентилируемый Тогда
		Возврат "VENTILATED";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


// Определяет, содержит ли запись складского учета продукцию четвертого уровня.
// 
// Параметры:
// 	ЗаписьСкладскогоЖурнала - СправочникСсылка.ЗаписиСкладскогоЖурналаВЕТИС - проверяемая запись
// Возвращаемое значение:
// 	Булево - Возвращает истину, если запись складского журнала содержит продукцию четвертого уровня
//
Функция ЗаписьЖурналаСодержитПродукциюЧетвертогоУровня(ЗаписьСкладскогоЖурнала) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаписиСкладскогоЖурналаВЕТИС.Ссылка
	|ИЗ
	|	Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|ГДЕ
	|	ЗаписиСкладскогоЖурналаВЕТИС.Ссылка = &Ссылка
	|	И НЕ ЗаписиСкладскогоЖурналаВЕТИС.ПродукцияПроизводителя.Ссылка ЕСТЬ NULL
	|	И ЗаписиСкладскогоЖурналаВЕТИС.ПродукцияПроизводителя.Идентификатор <> """"";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаписьСкладскогоЖурнала);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает массив номеров строк из ТЧ Товары, содержащих продукцию третьего уровня.
// 
// Параметры:
//  Товары - ТаблицаЗначений - таблица для проверки
//   * НомерСтроки             - Число                                         - Номер строки в ТЧ
//   * ЗаписьСкладскогоЖурнала - СправочникСсылка.ЗаписиСкладскогоЖурналаВЕТИС - Запись складского журнала из ТЧ
//   * Продукция               - СправочникСсылка.ПродукцияВЕТИС               - Продукция из ТЧ
// Возвращаемое значение:
// 	Массив - список номеров строк, содержащих продукцию третьего уровня.
//
Функция СтрокиТоваровСПродукциейТретьегоУровня(Товары) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки             КАК НомерСтроки,
	|	Товары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	Товары.Продукция               КАК Продукция
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|/////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Товары КАК Товары
	|ГДЕ 
	|	(Товары.ЗаписьСкладскогоЖурнала.ПродукцияПроизводителя.Ссылка ЕСТЬ NULL
	|	ИЛИ Товары.ЗаписьСкладскогоЖурнала.ПродукцияПроизводителя.Идентификатор = """")
	|	И Товары.Продукция.Идентификатор = """"";
	
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерСтроки");
	
КонецФункции

#КонецОбласти

#Область ТипыПродукции

// Возвращает соответствие типов продукции ВетИС.
//
// Возвращаемое значение:
//  Соответствие - Соответствие типов продукции.
//
Функция ТипыПродукции() Экспорт
	
	Результат = Новый Соответствие;
	Для Индекс = 1 По 8 Цикл
		Результат.Вставить(Индекс, ТипПродукции(Индекс));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Переводит значение перечисления в число и обратно, для обмена с ВетИС
//
// Параметры:
//  ЗначениеПоиска - Число, СправочникСсылка.ПродукцияВЕТИС - значение для перекодировки
// 
// Возвращаемое значение:
//  Число, СправочникСсылка.ПродукцияВЕТИС - значение после перекодировки
//
Функция ТипПродукции(ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("СправочникСсылка.ПродукцияВЕТИС") Тогда
		
		Если ЗначениеПоиска = ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.МясоИМясопродукты") Тогда
			Возврат 1;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.КормаИКормовыеДобавки") Тогда
			Возврат 2;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ЖивыеЖивотные") Тогда
			Возврат 3;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ЛекарственныеСредства") Тогда
			Возврат 4;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ПищевыеПродукты") Тогда
			Возврат 5;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.НепищевыеПродуктыИДругое") Тогда
			Возврат 6;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.РыбаИМорепродукты") Тогда
			Возврат 7;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ПродукцияНеТребующаяРазрешения") Тогда
			Возврат 8;
		КонецЕсли;
		
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип продукции ВетИС: %1'"),
				ЗначениеПоиска);
		
	Иначе
		
		Если ЗначениеПоиска = 1 Тогда
			Возврат ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.МясоИМясопродукты");
		ИначеЕсли ЗначениеПоиска = 2 Тогда
			Возврат ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.КормаИКормовыеДобавки");
		ИначеЕсли ЗначениеПоиска = 3 Тогда
			Возврат ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ЖивыеЖивотные");
		ИначеЕсли ЗначениеПоиска = 4 Тогда
			Возврат ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ЛекарственныеСредства");
		ИначеЕсли ЗначениеПоиска = 5 Тогда
			Возврат ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ПищевыеПродукты");
		ИначеЕсли ЗначениеПоиска = 6 Тогда
			Возврат ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.НепищевыеПродуктыИДругое");
		ИначеЕсли ЗначениеПоиска = 7 Тогда
			Возврат ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.РыбаИМорепродукты");
		ИначеЕсли ЗначениеПоиска = 8 Тогда
			Возврат ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ПродукцияНеТребующаяРазрешения");
		КонецЕсли;
		
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный код типа продукции ВетИС: %1'"),
				ЗначениеПоиска);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТипыТранспорта

// Переводит значение перечисления в число и обратно, для обмена с ВетИС
//
// Параметры:
//  ЗначениеПоиска - Число, ПеречислениеСсылка.ТипыТранспортаВЕТИС - значение для перекодировки
// 
// Возвращаемое значение:
//  Число, СправочникСсылка.ПродукцияВЕТИС - значение после перекодировки
//
Функция ТипТранспорта(ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("ПеречислениеСсылка.ТипыТранспортаВЕТИС") Тогда
		
		Если ЗначениеПоиска = Перечисления.ТипыТранспортаВЕТИС.Автомобиль Тогда
			Возврат 1;
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыТранспортаВЕТИС.ЖелезнодорожныйВагон Тогда
			Возврат 2;
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыТранспортаВЕТИС.Авиарейс Тогда
			Возврат 3;
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыТранспортаВЕТИС.МорскойКонтейнер Тогда
			Возврат 4;
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыТранспортаВЕТИС.МорскойТрюм Тогда
			Возврат 5;
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыТранспортаВЕТИС.Речной Тогда
			Возврат 6;
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыТранспортаВЕТИС.ПерегонСкота Тогда
			Возврат 7;
		КонецЕсли;
		
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип транспорта: %1'"),
				ЗначениеПоиска);
		
	Иначе
		
		Если ЗначениеПоиска = 1 Тогда
			Возврат Перечисления.ТипыТранспортаВЕТИС.Автомобиль;
		ИначеЕсли ЗначениеПоиска = 2 Тогда
			Возврат Перечисления.ТипыТранспортаВЕТИС.ЖелезнодорожныйВагон;
		ИначеЕсли ЗначениеПоиска = 3 Тогда
			Возврат Перечисления.ТипыТранспортаВЕТИС.Авиарейс;
		ИначеЕсли ЗначениеПоиска = 4 Тогда
			Возврат Перечисления.ТипыТранспортаВЕТИС.МорскойКонтейнер;
		ИначеЕсли ЗначениеПоиска = 5 Тогда
			Возврат Перечисления.ТипыТранспортаВЕТИС.МорскойТрюм;
		ИначеЕсли ЗначениеПоиска = 6 Тогда
			Возврат Перечисления.ТипыТранспортаВЕТИС.Речной;
		ИначеЕсли ЗначениеПоиска = 7 Тогда
			Возврат Перечисления.ТипыТранспортаВЕТИС.ПерегонСкота;
		КонецЕсли;
		
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный код типа транспорта: %1'"),
				ЗначениеПоиска);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТипыМаркировкиУпаковок

// Переводит значение перечисления в строку и обратно, для обмена с ВетИС
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ТипыМаркировкиУпаковокВЕТИС - значение для перекодировки
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ТипыМаркировкиУпаковокВЕТИС - значение после перекодировки
//
Функция ТипМаркировкиУпаковки(ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("ПеречислениеСсылка.ТипыМаркировкиУпаковокВЕТИС") Тогда
		
		Если ЗначениеПоиска = Перечисления.ТипыМаркировкиУпаковокВЕТИС.Произвольная
			Или ЗначениеПоиска = Перечисления.ТипыМаркировкиУпаковокВЕТИС.ПустаяСсылка() Тогда
			Возврат "UNDEFINED";
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыМаркировкиУпаковокВЕТИС.НомерПартии Тогда
			Возврат "BN";
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыМаркировкиУпаковокВЕТИС.SSCC Тогда
			Возврат "SSCC";
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыМаркировкиУпаковокВЕТИС.EAN8 Тогда
			Возврат "EAN8";
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыМаркировкиУпаковокВЕТИС.EAN13 Тогда
			Возврат "EAN13";
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыМаркировкиУпаковокВЕТИС.EAN128 Тогда
			Возврат "EAN128";
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыМаркировкиУпаковокВЕТИС.КодРодительскойУпаковки Тогда
			Возврат "BUNDLE";
		КонецЕсли;
		
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип маркировки упаковок ВетИС: %1'"),
				ЗначениеПоиска);
		
	Иначе
		
		Если ЗначениеПоиска = "UNDEFINED" Тогда
			Возврат Перечисления.ТипыМаркировкиУпаковокВЕТИС.Произвольная;
		ИначеЕсли ЗначениеПоиска = "BN" Тогда
			Возврат Перечисления.ТипыМаркировкиУпаковокВЕТИС.НомерПартии;
		ИначеЕсли ЗначениеПоиска = "SSCC" Тогда
			Возврат Перечисления.ТипыМаркировкиУпаковокВЕТИС.SSCC;
		ИначеЕсли ЗначениеПоиска = "EAN8" Тогда
			Возврат Перечисления.ТипыМаркировкиУпаковокВЕТИС.EAN8;
		ИначеЕсли ЗначениеПоиска = "EAN13" Тогда
			Возврат Перечисления.ТипыМаркировкиУпаковокВЕТИС.EAN13;
		ИначеЕсли ЗначениеПоиска = "EAN128" Тогда
			Возврат Перечисления.ТипыМаркировкиУпаковокВЕТИС.EAN128;
		ИначеЕсли ЗначениеПоиска = "BUNDLE" Тогда
			Возврат Перечисления.ТипыМаркировкиУпаковокВЕТИС.КодРодительскойУпаковки;
		КонецЕсли;
		
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный код типа маркировки упаковок ВетИС: %1'"),
				ЗначениеПоиска);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТипыПроисхождения

// Переводит значение перечисления в строку и обратно, для обмена с ВетИС
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ТипыПроисхожденияНепищевойПродукцииВЕТИС - значение для перекодировки
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ТипыПроисхожденияНепищевойПродукцииВЕТИС - значение после перекодировки
//
Функция ТипПроисхожденияНепищевойПродукции(ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("ПеречислениеСсылка.ТипыПроисхожденияНепищевойПродукцииВЕТИС") Тогда
		
		Если ЗначениеПоиска = Перечисления.ТипыПроисхожденияНепищевойПродукцииВЕТИС.Боенское Тогда
			Возврат "CATTLE_SLAUGHTER";
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыПроисхожденияНепищевойПродукцииВЕТИС.Палое Тогда
			Возврат "LOSS_OF_CATTLE";
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыПроисхожденияНепищевойПродукцииВЕТИС.Промышленное Тогда
			Возврат "MANUFACTURED";
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыПроисхожденияНепищевойПродукцииВЕТИС.Сборное Тогда
			Возврат "MIXED";
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыПроисхожденияНепищевойПродукцииВЕТИС.ПолученноеОтЗдоровыхЖивотных Тогда
			Возврат "FROM_HEALTHY_ANIMALS";
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыПроисхожденияНепищевойПродукцииВЕТИС.ПолученноеОтБольныхЖивотных Тогда
			Возврат "FROM_SICK_ANIMALS";
		КонецЕсли;
		
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип происхождения непищевой продукции ВетИС: %1'"),
				ЗначениеПоиска);
		
	Иначе
		
		Если ЗначениеПоиска = "CATTLE_SLAUGHTER" Тогда
			Возврат Перечисления.ТипыПроисхожденияНепищевойПродукцииВЕТИС.Боенское;
		ИначеЕсли ЗначениеПоиска = "LOSS_OF_CATTLE" Тогда
			Возврат Перечисления.ТипыПроисхожденияНепищевойПродукцииВЕТИС.Палое;
		ИначеЕсли ЗначениеПоиска = "MANUFACTURED" Тогда
			Возврат Перечисления.ТипыПроисхожденияНепищевойПродукцииВЕТИС.Промышленное;
		ИначеЕсли ЗначениеПоиска = "MIXED" Тогда
			Возврат Перечисления.ТипыПроисхожденияНепищевойПродукцииВЕТИС.Сборное;
		ИначеЕсли ЗначениеПоиска = "FROM_HEALTHY_ANIMALS" Тогда
			Возврат Перечисления.ТипыПроисхожденияНепищевойПродукцииВЕТИС.ПолученноеОтЗдоровыхЖивотных;
		ИначеЕсли ЗначениеПоиска = "FROM_SICK_ANIMALS" Тогда
			Возврат Перечисления.ТипыПроисхожденияНепищевойПродукцииВЕТИС.ПолученноеОтБольныхЖивотных;
		КонецЕсли;
		
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный код типа происхождения непищевой продукции ВетИС: %1'"),
				ЗначениеПоиска);
		
	КонецЕсли;
	
КонецФункции

Функция ТребуетсяУказаниеТипаПроисхождения(Продукция) Экспорт
	
	ТребуетсяТипПроисхождения = Ложь;
	
	Если ЗначениеЗаполнено(Продукция) Тогда
		ТипПродукции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукция, "ТипПродукции");
		ТребуетсяТипПроисхождения = ТребованиеТипаПроисхожденияПоТипуПродукции(ТипПродукции);
	КонецЕсли;
	
	Возврат ТребуетсяТипПроисхождения;
	
КонецФункции

Функция ТребованиеТипаПроисхожденияПоТипуПродукции(ТипПродукции) Экспорт
	
	Если ТипПродукции = Справочники.ПродукцияВЕТИС.КормаИКормовыеДобавки
	 ИЛИ ТипПродукции = Справочники.ПродукцияВЕТИС.ЛекарственныеСредства
	 ИЛИ ТипПродукции = Справочники.ПродукцияВЕТИС.НепищевыеПродуктыИДругое Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Продукция

// Возвращает продукцию по идентификатору.
//
// Параметры:
//  Идентификатор - ОпределяемыйТип.УникальныйИдентификаторИС - Идентификатор.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементаКлассификатора().
//
Функция ПродукцияПоGUID(Идентификатор, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементаКлассификатораПродукцииПоИдентификаторуXML(
		ИнтеграцияВЕТИС.ИмяИдентификатораОбъекта(), Идентификатор);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементаКлассификатора(Запрос,, ПараметрыОбмена);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает продукцию по идентификатору.
//
// Параметры:
//  Идентификатор - ОпределяемыйТип.УникальныйИдентификаторИС - Идентификатор.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементаКлассификатора().
//
Функция ПродукцияПоUUID(Идентификатор, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементаКлассификатораПродукцииПоИдентификаторуXML(
		ИнтеграцияВЕТИС.ИмяИдентификатораВерсии(), Идентификатор);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементаКлассификатора(Запрос,, ПараметрыОбмена);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает список продукции.
//
// Параметры:
//  КодТипаПродукции - Число - Код типа продукции.
//  НомерСтраницы - Число - Номер страницы.
//  ПоискСсылок - Булево - Поиск существующих ссылок в ИБ.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция СписокПродукции(КодТипаПродукции, НомерСтраницы = 1, ПоискСсылок = Ложь) Экспорт
	
	Запрос = ЗапросЭлементовКлассификатораПродукцииXML(КодТипаПродукции, НомерСтраницы);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос);
	
	Если ПоискСсылок Тогда
		ОпределитьНаличиеПродукцииВИнформационнойБазе(РезультатВыполненияЗапроса);
	КонецЕсли;
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает список измененных за период элементов продукции.
//
// Параметры:
//  Интервал - Структура - Структура со свойствами:
//   * НачалоПериода - Дата - Дата начала периода.
//   * КонецПериода - Дата - Дата окончания периода.
//  НомерСтраницы - Число - Номер страницы.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция ИсторияИзмененийПродукции(Интервал, НомерСтраницы = 1,
	КоличествоЭлементовНаСтранице = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросИзмененныхЭлементовКлассификатораПродукцииXML(Интервал, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос,, ПараметрыОбмена);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

#КонецОбласти

#Область ВидыПродукции

// Возвращает вид продукции по идентификатору.
//
// Параметры:
//  Идентификатор - ОпределяемыйТип.УникальныйИдентификаторИС - Идентификатор.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементаКлассификатора().
//
Функция ВидПродукцииПоGUID(Идентификатор, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементаКлассификатораВидовПродукцииПоИдентификаторуXML(
		ИнтеграцияВЕТИС.ИмяИдентификатораОбъекта(), Идентификатор);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементаКлассификатора(Запрос,, ПараметрыОбмена);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает вид продукции по идентификатору.
//
// Параметры:
//  Идентификатор - ОпределяемыйТип.УникальныйИдентификаторИС - Идентификатор.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементаКлассификатора().
//
Функция ВидПродукцииПоUUID(Идентификатор, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементаКлассификатораВидовПродукцииПоИдентификаторуXML(
		ИнтеграцияВЕТИС.ИмяИдентификатораВерсии(), Идентификатор);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементаКлассификатора(Запрос,, ПараметрыОбмена);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает список видов продукции.
//
// Параметры:
//  НомерСтраницы - Число - Номер страницы.
//  ПоискСсылок - Булево - Поиск существующих ссылок в ИБ.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция СписокВидовПродукции(GUIDПродукции, НомерСтраницы = 1, ПоискСсылок = Ложь) Экспорт
	
	Запрос = ЗапросЭлементовКлассификатораВидовПродукцииXML(GUIDПродукции, НомерСтраницы);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос);
	
	Если ПоискСсылок Тогда
		ОпределитьНаличиеПродукцииВИнформационнойБазе(РезультатВыполненияЗапроса);
	КонецЕсли;
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает список измененных за период видов продукции.
//
// Параметры:
//  Интервал - Структура - Структура со свойствами:
//   * НачалоПериода - Дата - Дата начала периода.
//   * КонецПериода - Дата - Дата окончания периода.
//  НомерСтраницы - Число - Номер страницы.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция ИсторияИзмененийВидовПродукции(Интервал, НомерСтраницы = 1,
	КоличествоЭлементовНаСтранице = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросИзмененныхЭлементовКлассификатораВидовПродукцииXML(Интервал, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос,, ПараметрыОбмена);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

#КонецОбласти

#Область НаименованияПродукции

// Возвращает наименование продукции по идентификатору.
//
// Параметры:
//  Идентификатор - ОпределяемыйТип.УникальныйИдентификаторИС - Идентификатор.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементаКлассификатора().
//
Функция НаименованиеПродукцииПоGUID(Идентификатор, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементаКлассификатораНаименованийПродукцииПоИдентификаторуXML(
		ИнтеграцияВЕТИС.ИмяИдентификатораОбъекта(), Идентификатор);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементаКлассификатора(Запрос,, ПараметрыОбмена);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает наименование продукции по идентификатору.
//
// Параметры:
//  Идентификатор - ОпределяемыйТип.УникальныйИдентификаторИС - Идентификатор.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементаКлассификатора().
//
Функция НаименованиеПродукцииПоUUID(Идентификатор, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементаКлассификатораНаименованийПродукцииПоИдентификаторуXML(
		ИнтеграцияВЕТИС.ИмяИдентификатораВерсии(), Идентификатор);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементаКлассификатора(Запрос,, ПараметрыОбмена);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает список наименований продукции.
//
// Параметры:
//  НомерСтраницы - Число - Номер страницы.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция СписокНаименованийПродукции(ПараметрыОтбора, НомерСтраницы = 1) Экспорт
	
	Запрос = ЗапросЭлементовКлассификатораНаименованийПродукцииXML(ПараметрыОтбора, НомерСтраницы);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает список измененных за период наименований продукции.
//
// Параметры:
//  Интервал - Структура - Структура со свойствами:
//   * НачалоПериода - Дата - Дата начала периода.
//   * КонецПериода - Дата - Дата окончания периода.
//  НомерСтраницы - Число - Номер страницы.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция ИсторияИзмененийНаименованийПродукции(Интервал, НомерСтраницы = 1,
	КоличествоЭлементовНаСтранице = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросИзмененныхЭлементовКлассификатораНаименованийПродукцииXML(Интервал, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос,, ПараметрыОбмена);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

Функция ИдентификаторыТипаВидаПродукцииПоНаименованиюПродукции(ПродукцияСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродукцияВЕТИС.Ссылка КАК Ссылка,
		|	ПродукцияВЕТИС.Идентификатор КАК Идентификатор,
		|	ПродукцияВЕТИС.ТипПродукции.Идентификатор КАК ТипПродукцииИдентификатор,
		|	ПродукцияВЕТИС.Продукция.Идентификатор КАК ПродукцияИдентификатор,
		|	ВЫБОР
		|		КОГДА ПродукцияВЕТИС.ВидПродукции.Идентификатор ЕСТЬ NULL ТОГДА
		|			ПродукцияВЕТИС.Идентификатор
		|		ИНАЧЕ
		|			ПродукцияВЕТИС.ВидПродукции.Идентификатор
		|	КОНЕЦ КАК ВидПродукцииИдентификатор,
		|	ПродукцияВЕТИС.ТипПродукции КАК ТипПродукции,
		|	ПродукцияВЕТИС.Продукция КАК Продукция,
		|	ВЫБОР
		|		КОГДА ПродукцияВЕТИС.ВидПродукции.Идентификатор ЕСТЬ NULL ТОГДА
		|			ПродукцияВЕТИС.Ссылка
		|		ИНАЧЕ
		|			ПродукцияВЕТИС.ВидПродукции
		|	КОНЕЦ КАК ВидПродукции
		|ИЗ
		|	Справочник.ПродукцияВЕТИС КАК ПродукцияВЕТИС
		|ГДЕ
		|	ПродукцияВЕТИС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПродукцияСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка= РезультатЗапроса.Выбрать();
	Результат = Неопределено;
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ИнформацияОВидеТипеПродукции(Знач ТипПродукции, Знач Продукция, Знач ВидПродукции, ДобавитьВЗаголовокПолныйПуть = Истина) Экспорт

	Если ЗначениеЗаполнено(ТипПродукции) Тогда
		
		ОписаниеПродукции = "";
		
		Если ДобавитьВЗаголовокПолныйПуть 
			ИЛИ НЕ ЗначениеЗаполнено(Продукция) 
				И НЕ ЗначениеЗаполнено(ВидПродукции) Тогда
			
			ОписаниеПродукции = Новый ФорматированнаяСтрока(Строка(ТипПродукции) + " > ");
		КонецЕсли; 
		
		Подсказка = Строка(ТипПродукции);
		
		Если ЗначениеЗаполнено(Продукция) Тогда
			
			СтрокаПродукция = Строка(Продукция);
			
			Если ДобавитьВЗаголовокПолныйПуть 
				ИЛИ НЕ ЗначениеЗаполнено(ВидПродукции) Тогда
			
				ДлиннаяСтрока = СтрДлина(СтрокаПродукция)>30;
				СтрокаСсылка = Новый ФорматированнаяСтрока(
						Лев(СтрокаПродукция,30),
						Новый Шрифт(,,,,Истина),
						,,
						"ОткрытьПродукция");
						
				ОписаниеПродукции = Новый ФорматированнаяСтрока(ОписаниеПродукции, СтрокаСсылка, ?(ДлиннаяСтрока,"...",""), " > ");
				
			КонецЕсли; 
				
			Подсказка = Подсказка + " > " + СтрокаПродукция;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидПродукции) Тогда
			
			СтрокаВидПродукции = Строка(ВидПродукции);
			ДлиннаяСтрока = СтрДлина(СтрокаВидПродукции)>30;
			СтрокаСсылка = Новый ФорматированнаяСтрока(
					Лев(СтрокаВидПродукции,30),
					Новый Шрифт(,,,,Истина),
					,,
					"ОткрытьВидПродукции");
			ОписаниеПродукции = Новый ФорматированнаяСтрока(ОписаниеПродукции, СтрокаСсылка, ?(ДлиннаяСтрока,"...",""), "   ");
			Подсказка = Подсказка + " > " + СтрокаВидПродукции;
			
		КонецЕсли;
		
		СтрокаСсылка = Новый ФорматированнаяСтрока(
			НСтр("ru='(изменить)'"),
			Новый Шрифт(,,,,Истина),
			,,
			"ИзменитьВидПродукции");
			
		Текст = Новый ФорматированнаяСтрока(ОписаниеПродукции, СтрокаСсылка, "   ");
		
	Иначе
		
		Текст = Новый ФорматированнаяСтрока(
			НСтр("ru='Выбрать вид продукции'"),
			Новый Шрифт(,,,,Истина),
			,,
			"ИзменитьВидПродукции");
		
	КонецЕсли;

	Возврат Новый Структура("Текст,Подсказка", Текст, Подсказка);
	
КонецФункции
 
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗапросЭлементаКлассификатораПродукцииПоИдентификаторуXML(ИмяИдентификатора, ЗначениеИдентификатора)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементаКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getProductBy" + ТРег(ИмяИдентификатора);
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.КлассификаторыПродукции;
	ПараметрыЗапроса.ИмяЭлемента      = "product";
	ПараметрыЗапроса.Представление    = СтрШаблон(НСтр("ru = 'запрос продукции по идентификатору %1 %2'"), ИмяИдентификатора, ЗначениеИдентификатора);
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	Запрос[ИмяИдентификатора] = ЗначениеИдентификатора;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросЭлементовКлассификатораПродукцииXML(КодТипаПродукции, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getProductByTypeList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.КлассификаторыПродукции;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "product";
	ПараметрыЗапроса.ИмяСписка        = "productList";
	ПараметрыЗапроса.Представление    = НСтр("ru = 'запрос списка продукции'");
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы);
	
	Запрос.productType = КодТипаПродукции;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросИзмененныхЭлементовКлассификатораПродукцииXML(Интервал, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getProductChangesList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.КлассификаторыПродукции;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "product";
	ПараметрыЗапроса.ИмяСписка        = "productList";
	ПараметрыЗапроса.Представление    = НСтр("ru = 'запрос измененных элементов списка продукции'");
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	ИнтеграцияВЕТИС.УстановитьИнтервалЗапросаИзменений(Запрос, Интервал, ХранилищеВременныхДат);
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции


Функция ЗапросЭлементаКлассификатораВидовПродукцииПоИдентификаторуXML(ИмяИдентификатора, ЗначениеИдентификатора)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементаКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getSubProductBy" + ТРег(ИмяИдентификатора);
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.КлассификаторыПродукции;
	ПараметрыЗапроса.ИмяЭлемента      = "subProduct";
	ПараметрыЗапроса.Представление    = СтрШаблон(НСтр("ru = 'запрос вида продукции по идентификатору %1 %2'"), ИмяИдентификатора, ЗначениеИдентификатора);
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	Запрос[ИмяИдентификатора] = ЗначениеИдентификатора;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросЭлементовКлассификатораВидовПродукцииXML(GUIDПродукции, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getSubProductByProductList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.КлассификаторыПродукции;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "subProduct";
	ПараметрыЗапроса.ИмяСписка        = "subProductList";
	ПараметрыЗапроса.Представление    = НСтр("ru = 'запрос списка видов продукции'");
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы);
	
	Запрос.productGuid = GUIDПродукции;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросИзмененныхЭлементовКлассификатораВидовПродукцииXML(Интервал, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getSubProductChangesList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.КлассификаторыПродукции;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "subProduct";
	ПараметрыЗапроса.ИмяСписка        = "subProductList";
	ПараметрыЗапроса.Представление    = НСтр("ru = 'запрос измененных элементов списка видов продукции'");
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	ИнтеграцияВЕТИС.УстановитьИнтервалЗапросаИзменений(Запрос, Интервал, ХранилищеВременныхДат);
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции


Функция ЗапросЭлементаКлассификатораНаименованийПродукцииПоИдентификаторуXML(ИмяИдентификатора, ЗначениеИдентификатора)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементаКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getProductItemBy" + ТРег(ИмяИдентификатора);
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.КлассификаторыПродукции;
	ПараметрыЗапроса.ИмяЭлемента      = "productItem";
	ПараметрыЗапроса.Представление    = СтрШаблон(НСтр("ru = 'запрос продукции по идентификатору %1 %2'"), ИмяИдентификатора, ЗначениеИдентификатора);
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	Запрос[ИмяИдентификатора] = ЗначениеИдентификатора;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросЭлементовКлассификатораНаименованийПродукцииXML(ПараметрыОтбора, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getProductItemList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.КлассификаторыПродукции;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "productItem";
	ПараметрыЗапроса.ИмяСписка        = "productItemList";
	ПараметрыЗапроса.Представление    = НСтр("ru = 'запрос списка продукции'");
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы);
	
	Если ПараметрыОтбора.Свойство("ТипПродукции") Тогда
		Запрос.productType = ПараметрыОтбора.ТипПродукции;
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("Продукция") Тогда
		Запрос.product = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "product");
		Запрос.product.guid = ПараметрыОтбора.Продукция;
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("ВидПродукции") Тогда
		Запрос.subProduct = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "subProduct");
		Запрос.subProduct.guid = ПараметрыОтбора.ВидПродукции;
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("ХозяйствующийСубъект") Тогда
		Запрос.businessEntity = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "businessEntity");
		Запрос.businessEntity.guid = ПараметрыОтбора.ХозяйствующийСубъект;
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("Предприятие") Тогда
		Запрос.enterprise = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "enterprise");
		Запрос.enterprise.guid = ПараметрыОтбора.Предприятие;
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("ПроизводительХозяйствующийСубъект")
	 ИЛИ ПараметрыОтбора.Свойство("ПроизводительПредприятие") Тогда
		ЭлементProducer = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "producer");
		
		Если ПараметрыОтбора.Свойство("ПроизводительХозяйствующийСубъект") Тогда
			ЭлементProducer.businessEntity = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементProducer, "businessEntity");
			ЭлементProducer.businessEntity.guid = ПараметрыОтбора.ПроизводительХозяйствующийСубъект;
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("ПроизводительПредприятие") Тогда
			ЭлементProducer.enterprise = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементProducer, "enterprise");
			ЭлементProducer.enterprise.guid = ПараметрыОтбора.ПроизводительПредприятие;
		КонецЕсли;
		
		ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос, "producer", ЭлементProducer);
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("GTIN") Тогда
		Запрос.globalId = ПараметрыОтбора.GTIN;
	КонецЕсли;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросИзмененныхЭлементовКлассификатораНаименованийПродукцииXML(Интервал, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getProductItemChangesList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.КлассификаторыПродукции;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "productItem";
	ПараметрыЗапроса.ИмяСписка        = "productItemList";
	ПараметрыЗапроса.Представление    = НСтр("ru = 'запрос измененных элементов списка продукции'");
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	ИнтеграцияВЕТИС.УстановитьИнтервалЗапросаИзменений(Запрос, Интервал, ХранилищеВременныхДат);
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура ОпределитьНаличиеПродукцииВИнформационнойБазе(РезультатВыполненияЗапроса)
	
	Если НЕ ЗначениеЗаполнено(РезультатВыполненияЗапроса.Список) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	Для Каждого СтрокаТЧ Из РезультатВыполненияЗапроса.Список Цикл
		СтрокаТЧ.Вставить("Ссылка", Неопределено);
		МассивИдентификаторов.Добавить(СтрокаТЧ.GUID);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПродукцияВЕТИС.Идентификатор КАК Идентификатор,
	|	ПродукцияВЕТИС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПродукцияВЕТИС КАК ПродукцияВЕТИС
	|ГДЕ
	|	ПродукцияВЕТИС.Идентификатор В(&МассивИдентификаторов)";
	
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаСсылок = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаСсылок.Индексы.Добавить("Идентификатор");
	
	Для Каждого СтрокаТЧ Из РезультатВыполненияЗапроса.Список Цикл
		НайденнаяСтрока = ТаблицаСсылок.Найти(СтрокаТЧ.GUID, "Идентификатор");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаТЧ.Ссылка = НайденнаяСтрока.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти