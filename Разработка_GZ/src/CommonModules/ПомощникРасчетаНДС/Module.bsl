////////////////////////////////////////////////////////////////////////////////
// <Общий модуль ПомощникРасчетаНДС:
//  серверные процедуры и функции используются для автоматического расчета НДС.>
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Функция составляет ключ фонового задания
//
// Параметры:
//         Организация - СправочникСсылка.Организации - организация
//         ТекущийПользователь - СправочникСсылка.Пользователи - текущий пользователь
//         Префикс - Строка - префикс - см. ПомощникРасчетаНДС.ПрефиксыКлючаФоновыхЗаданий()
//         ДатаОкончания - Дата - дата окончания расчета налога 
//         МоментНачала - Дата - момент нарушения последовательности документов
//
// Возвращаемые параметры:
//         Строка - составленная строка
//
Функция СобратьКлючЗаданияДляФоновогоЗадания(
		Организация, ТекущийПользователь, Префикс, ДатаОкончания, МоментНачала = Неопределено) Экспорт
	
	КлючЗадания = "%1:%2:%3:%4:%5";
	КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КлючЗадания,
		Префикс,
		Организация.УникальныйИдентификатор(),
		ТекущийПользователь.УникальныйИдентификатор(),
		Формат(ДатаОкончания, "ДФ=yyyyMMdd"),
		?(МоментНачала = Неопределено, "00010101", Формат(МоментНачала, "ДФ=yyyyMMdd; ДП=00010101")));

	Возврат КлючЗадания;
КонецФункции

// Функция содержит префиксы фоновых заданий расчета НДС
//
// Возвращаемые параметры:
//         Структура - Префиксы ключей фоновых заданий расчета НДС
//
Функция ПрефиксыКлючаФоновыхЗаданий() Экспорт
	
	Префиксы = Новый Структура("Проведение,РасчетНалога",
		"ПроведениеДокументов", "РасчетНалога");
	
	Возврат Префиксы;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДоступенАвтоматическийРасчетНДС(Организация, Период) Экспорт

	// Автоматический расчет доступен с 4 кв. 2018 года
	Если НачалоКвартала(Период) < '20181001' Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РассчитыватьНДСВручную(Организация)
		ИЛИ Не ФормироватьДекларациюВПомощнике(Организация, Период)
		ИЛИ ЕстьРучныеКорректировкиНДС(Организация, Период)
		ИЛИ ЕстьДопЛисты(Организация, Период) 
		ИЛИ ЕстьКорректировочныеДекларации(Организация, Период)
		ИЛИ УчетнаяПолитика.РаздельныйУчетНДС(Организация, Период)
		ИЛИ Справочники.Организации.ЕстьОбособленныеПодразделения(Организация)
		ИЛИ ЕстьИмпортТоваров(Организация)
		ИЛИ ЕстьВвозИзЕАЭС(Организация)
		ИЛИ ЕстьЭкспорт(Организация)
		ИЛИ ЕстьДоговорыСКомитентом(Организация)
		ИЛИ ЕстьДоговорыНА(Организация)
		ИЛИ ЕстьСМРХозспособом(Организация)
		ИЛИ УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Организация, Период) Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция РассчитыватьНДСВручную(Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиРасчетаНДС.РассчитыватьНДСВручную КАК РассчитыватьНДСВручную
	|ИЗ
	|	РегистрСведений.НастройкиРасчетаНДС КАК НастройкиРасчетаНДС
	|ГДЕ
	|	НастройкиРасчетаНДС.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.РассчитыватьНДСВручную;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает признак возможности формирования декларации НДС в форме помощника расчета НДС.
// Помощник расчета применяется только для плательщиков НДС, а формирование декларации 
// через помощник расчета НДС искусственно ограничено отчетностью за 1 кв. 2018 года (не ранее).
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, по которой необходимо сформировать декларацию по НДС.
//   Период - Дата - дата внутри квартала (налогового периода), за который необходимо сформировать декларацию по НДС.
// Возвращаемые параметры:
//   Булево - Истина если декларацию необходимо формировать в форме помощника.
Функция ФормироватьДекларациюВПомощнике(Организация, Период) Экспорт
	
	Возврат УчетнаяПолитика.ПлательщикНДС(Организация, Период)
		И Период >= '20180101'
		И Не ЭтоОбособленноеПодразделение(Организация); // для случая консолидации отчетности не используем помощник
	
КонецФункции

Функция ПричиныНедоступностиАвтоматическогоРасчета(Организация, Период) Экспорт
	
	ПричиныНедоступности = Новый Массив;
	
	// Дата
	
	Если НачалоКвартала(Период) < '20181001' Тогда
		ПричиныНедоступности.Добавить("Период");
		Возврат ПричиныНедоступности;
	КонецЕсли;
	
	// Функциональность
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям")
	   И (ЭтоОбособленноеПодразделение(Организация)
	 ИЛИ Справочники.Организации.ЕстьОбособленныеПодразделения(Организация)) Тогда
		ПричиныНедоступности.Добавить("Подразделения");
	КонецЕсли;
		
	Если УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Организация, Период) Тогда
		ПричиныНедоступности.Добавить("ОсвобождениеОтНДС");
	КонецЕсли;
	
	Если УчетнаяПолитика.РаздельныйУчетНДС(Организация, Период) Тогда
		ПричиныНедоступности.Добавить("РаздельныйУчетНДС");
	КонецЕсли;
		
	Если ЕстьИмпортТоваров(Организация) Тогда
		ПричиныНедоступности.Добавить("ИмпортТоваров");
	КонецЕсли;
	
	Если ЕстьВвозИзЕАЭС(Организация) Тогда
		ПричиныНедоступности.Добавить("ВвозИзЕАЭС");
	КонецЕсли;
	
	Если ЕстьЭкспорт(Организация) Тогда
		ПричиныНедоступности.Добавить("Экспорт");
	КонецЕсли;
	
	Если ЕстьДоговорыСКомитентом(Организация, Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		ПричиныНедоступности.Добавить("КомиссияПродажа");
	КонецЕсли;
	
	Если ЕстьДоговорыСКомитентом(Организация, Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку) Тогда
		ПричиныНедоступности.Добавить("КомиссияЗакупка");
	КонецЕсли;

	Если ЕстьДоговорыНА(Организация) Тогда
		ПричиныНедоступности.Добавить("НалоговыйАгент");
	КонецЕсли;

	Если ЕстьСМРХозспособом(Организация) Тогда
		ПричиныНедоступности.Добавить("СМРХозспособом");
	КонецЕсли;
		
	Если ПричиныНедоступности.Количество() <> 0 Тогда
		Возврат ПричиныНедоступности;
	КонецЕсли; 
	
	// Корректировочная декларация

	Если ЕстьДопЛисты(Организация, Период) 
	 ИЛИ ЕстьКорректировочныеДекларации(Организация, Период) Тогда
		ПричиныНедоступности.Добавить("КорректировочнаяДекларация");
		Возврат ПричиныНедоступности;
	КонецЕсли;
	
	// Ручные корректировки
	
	Если ЕстьРучныеКорректировкиНДС(Организация, Период) Тогда
		ПричиныНедоступности.Добавить("РучныеКорректировки");
		Возврат ПричиныНедоступности;
	КонецЕсли;
	
	Возврат ПричиныНедоступности;
	
КонецФункции

Функция ЕстьРегламентныеДокументыСозданныеВручную(Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(Период));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеЗаписейКнигиПокупок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок КАК ФормированиеЗаписейКнигиПокупок
	|ГДЕ
	|	ФормированиеЗаписейКнигиПокупок.Проведен
	|	И ФормированиеЗаписейКнигиПокупок.Организация = &Организация
	|	И ФормированиеЗаписейКнигиПокупок.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ ФормированиеЗаписейКнигиПокупок.ДокументСозданВПомощнике
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеЗаписейКнигиПродаж.Ссылка
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж КАК ФормированиеЗаписейКнигиПродаж
	|ГДЕ
	|	ФормированиеЗаписейКнигиПродаж.Проведен
	|	И ФормированиеЗаписейКнигиПродаж.Организация = &Организация
	|	И ФормированиеЗаписейКнигиПродаж.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ ФормированиеЗаписейКнигиПродаж.ДокументСозданВПомощнике";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПараметрыРегламентныхДокументов(Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецКвартала(Период));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеРегламентныхДокументов.ДокументСозданВПомощнике) КАК ДокументСозданВПомощнике,
	|	МАКСИМУМ(ДанныеРегламентныхДокументов.ДокументСозданВручную) КАК ДокументСозданВручную
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ДокументСозданВПомощнике,
	|		ЛОЖЬ КАК ДокументСозданВручную
	|	ИЗ
	|		Документ.ФормированиеЗаписейКнигиПокупок КАК ФормированиеЗаписейКнигиПокупок
	|	ГДЕ
	|		ФормированиеЗаписейКнигиПокупок.Проведен
	|		И ФормированиеЗаписейКнигиПокупок.Организация = &Организация
	|		И ФормированиеЗаписейКнигиПокупок.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ФормированиеЗаписейКнигиПокупок.ДокументСозданВПомощнике
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ФормированиеЗаписейКнигиПродаж КАК ФормированиеЗаписейКнигиПродаж
	|	ГДЕ
	|		ФормированиеЗаписейКнигиПродаж.Проведен
	|		И ФормированиеЗаписейКнигиПродаж.Организация = &Организация
	|		И ФормированиеЗаписейКнигиПродаж.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ФормированиеЗаписейКнигиПродаж.ДокументСозданВПомощнике
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ФормированиеЗаписейКнигиПокупок КАК ФормированиеЗаписейКнигиПокупок
	|	ГДЕ
	|		ФормированиеЗаписейКнигиПокупок.Проведен
	|		И ФормированиеЗаписейКнигиПокупок.Организация = &Организация
	|		И ФормированиеЗаписейКнигиПокупок.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И НЕ ФормированиеЗаписейКнигиПокупок.ДокументСозданВПомощнике
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ФормированиеЗаписейКнигиПродаж КАК ФормированиеЗаписейКнигиПродаж
	|	ГДЕ
	|		ФормированиеЗаписейКнигиПродаж.Проведен
	|		И ФормированиеЗаписейКнигиПродаж.Организация = &Организация
	|		И ФормированиеЗаписейКнигиПродаж.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И НЕ ФормированиеЗаписейКнигиПродаж.ДокументСозданВПомощнике
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ,
	|		ЛОЖЬ) КАК ДанныеРегламентныхДокументов";
	
	Возврат Запрос.Выполнить().Выгрузить()[0];
	
КонецФункции

// Производит формирование регламентных операций по НДС:
//  1. Создает новый или перезаполняет существующий документ "Формирование записей книги покупок".
//  2. Создает новый или перезаполняет существующий документ "Формирование записей книги продаж".
//  3. На сумму полученных предварительных оплат регистрирует счета-фактуры на аванс.
//  4. Оценивает долю вычетов в сумме начислений, в случае если доля вычетов более 89% производит
//     перенос вычетов на следующие периоды.
//  5. Создает новую или перезаполняет существующую декларацию по НДС.
// Параметры:
//   Параметры - Структура - структура с ключами:
//     * Организация - СправочникСсылка.Организации - организация, по которой необходимо выполнить расчет НДС.
//     * Период - Дата - дата внутри квартала (налогового периода), за который необходимо выполнить расчет НДС.
//     * Декларация - ДокументСсылка.РегламентированныйОтчет - ссылка на созданную ранее декларацию по НДС.
Процедура ОбновитьРасчет(Параметры) Экспорт
	
	ПараметрыРасчетаНалога = НовыйПарамерыРасчетаНалога();
	
	ЗаполнитьЗначенияСвойств(ПараметрыРасчетаНалога, Параметры);
	
	БлижайшийНалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
		ПараметрыРасчетаНалога.Организация, 
		ПараметрыРасчетаНалога.Период,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследние10ДнейКвартала,
		Перечисления.Периодичность.Квартал);
		
	Если БлижайшийНалоговыйПериод.Конец <> КонецКвартала(ПараметрыРасчетаНалога.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчетаНалога.НачалоПериода = БлижайшийНалоговыйПериод.Начало;
	ПараметрыРасчетаНалога.КонецПериода  = БлижайшийНалоговыйПериод.Конец;
	
	ПометитьНаУдалениеДокументыСозданныеПользователем(ПараметрыРасчетаНалога);
	
	РегламентныеДокументы = РегламентныеДокументыЗаПериод(ПараметрыРасчетаНалога);
	
	СформироватьСчетаФактурыНаАванс(ПараметрыРасчетаНалога);
	
	СформироватьРегламентныеДокументы(ПараметрыРасчетаНалога, РегламентныеДокументы);
	
	СформироватьДекларацию(ПараметрыРасчетаНалога, Параметры);
	
КонецПроцедуры

Процедура ЗагрузитьРезультат(Форма, АдресХранилища) Экспорт
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СоставРазделов = Результат.СоставРазделов;
	
	Если СоставРазделов.Операции Тогда
		Форма.ЗначениеВРеквизитФормы(Результат.ПоказателиДляОпераций.ДеревоОпераций, "ПолноеДеревоОпераций");
		Форма.ТребуетсяПерепроведение = Результат.ПоказателиДляОпераций.ТребуетсяПерепроведение;
		Форма.НалогКВозмещению = Результат.ПоказателиДляОпераций.НалогКВозмещению;
	КонецЕсли;
	
	Если СоставРазделов.Расчет Тогда
		ЗаполнитьЗначенияСвойств(Форма, Результат.ПоказателиДляРасчета);
	КонецЕсли;
	
	Если СоставРазделов.Уплата Тогда
		ЗаполнитьЗначенияСвойств(Форма, Результат.ПоказателиДляУплаты);
		Форма.Платежи.Очистить();
		ТаблицаПлатежей = Результат.ПоказателиДляУплаты.ТаблицаПлатежи;
		Если ТаблицаПлатежей <> Неопределено Тогда
			Форма.Платежи.Загрузить(ТаблицаПлатежей);
		КонецЕсли;
	КонецЕсли;
	
	Если СоставРазделов.Сверка Тогда
		ЗаполнитьЗначенияСвойств(Форма, Результат.ПоказателиДляСверки);
	КонецЕсли;
	
	Если Результат.Свойство("ПоказателиДолиВычетов") Тогда
		ЗаполнитьЗначенияСвойств(Форма, Результат.ПоказателиДолиВычетов);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыФормыПлатежногоДокументаПоСтроке(Форма, Идентификатор) Экспорт
	
	СтрокаПлатежа = Форма.Платежи[Идентификатор];
	
	Если ТипЗнч(СтрокаПлатежа.ПлатежныеПоручения) = Тип("Массив")
		И СтрокаПлатежа.ПлатежныеПоручения.Количество() > 0 Тогда
		Возврат Новый Структура("Ключ", СтрокаПлатежа.ПлатежныеПоручения[0]);
	КонецЕсли;
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Период                     = КонецКвартала(Форма.Объект.Период);
	ОписаниеПлатежа.Налог                      = 
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДС);
	ОписаниеПлатежа.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	ОписаниеПлатежа.Организация                = Форма.Объект.Организация;
	ОписаниеПлатежа.СпособОплаты               = Перечисления.СпособыУплатыНалогов.БанковскийПеревод;
	ОписаниеПлатежа.ПоказательПериода          = Форма.ПоказательПериода;
	ОписаниеПлатежа.Аванс                      = СтрокаПлатежа.Аванс;
	ОписаниеПлатежа.КБК                        = СтрокаПлатежа.КБК;
	ОписаниеПлатежа.ОКАТО                      = СтрокаПлатежа.ОКАТО;
	ОписаниеПлатежа.КодНалоговогоОргана        = СтрокаПлатежа.КодНалоговогоОргана;
	ОписаниеПлатежа.Сумма                      = Форма.ОчереднойПлатеж;
	ОписаниеПлатежа.Декларация                 = Форма.Декларация;
	ОписаниеПлатежа.ДатаДекларации             = Форма.ДатаДекларации;
	
	ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило",
		 ЗначенияЗаполнения, КонецКвартала(Форма.Объект.Период), Форма.Правило);
	
КонецФункции

Процедура НастроитьБлокОплата(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Платежи  = Форма.Платежи;
	
	Элементы.ОчереднойПлатеж.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Очередной платеж до %1'"),
		Формат(Форма.Срок, "ДФ='дд ММММ'"));
	
	Для НомерПлатежа = 1 По 3 Цикл
		Элементы["ДекорацияПлатеж" + НомерПлатежа].Заголовок = Платежи[НомерПлатежа - 1].ПредставлениеПлатежногоПоручения;
		Элементы["ДекорацияСуммаПлатежа" + НомерПлатежа].Заголовок = Платежи[НомерПлатежа - 1].СуммаПлатежногоПоручения;
		ВидимостьПлатежа = ТипЗнч(Платежи[НомерПлатежа -1].ПлатежныеПоручения) = Тип("Массив")
			И Платежи[НомерПлатежа -1].ПлатежныеПоручения.Количество() > 0;
		Элементы["ГруппаПлатеж" + НомерПлатежа].Видимость = ВидимостьПлатежа;
	КонецЦикла;
	
	Если Форма.ИмяФормы = "Обработка.ПомощникРасчетаНДС.Форма.Форма" Тогда
		
		Элементы.ГруппаОплатить.Видимость = Форма.ОсталосьОплатить <> 0;
		ШаблонТекста = НСтр("ru = 'Налог оплачивается 3-мя равными платежами -
			|до %1, до %2, до %3'");
		ТекстПорядокУплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
			Формат(Платежи[0].Дата, "ДФ='дд ММММ'"),
			Формат(Платежи[1].Дата, "ДФ='дд ММММ'"),
			Формат(Платежи[2].Дата, "ДФ='дд ММММ'"));
		Элементы.ДекорацияОплата.Заголовок = ТекстПорядокУплаты;
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПомощникРасчетаНДС.Форма.ФормаОплата" Тогда 
		Элементы.Оплатить.Видимость = Форма.ОчереднойПлатеж <> 0;
	КонецЕсли;
	
	Элементы.Оплатить.Доступность = Форма.МожноСоздаватьДокументыУплаты;
	
КонецПроцедуры

// Проводит проверку по основным данным перед заполнением авто расчета по НДС.
// Входящие данные 
//    ВидПроверки - определяет какую проверку необходимо сделать. Может иметь следующие виды:
//----------------------------------------------------------------------------
//                                "РеквизитыОрганизации" -  проверяет реквизиты, необходимые для выгрузки
//                                                         декларации (наименование, оквэд2 и пр.)
//                                "ОтрицательныеОстаткиНДС" - проверяет на отрицательные остатки по регистрам НДС
//                                "НаличиеСФПолученных" - проверяет на отсутствувие полученных счетов-фактур
//                                                         к документам поступлениям ценностей
//                                "Соответствие19ИРегистрНДС" - проверяет соответствие остатков по 
//                                                              счету 19 и по регистрам НДС.
//                                "НаличиеСФВыданных" - проверяет на не выписаные счета-фактуры по реализациям ценностей
//                                "СоответствиеСФиАвансов" - ранее переданные счета-фактуры на аванс
//                                                           не актуальны т.к. изменились взаиморасчеты с покупателями
//                                "СоответствиеВыручкиНалогаСРегистромНДС" - выручка и/или сумма налога 
//                                                                           отраженная в бухгалтерском учете 
//                                                                           и в регистрах НДС не совпадают
//-----------------------------------------------------------------------------
//   Организация - организация, по которой необходимо сделать проверку.
//   Период - дата конца квартала, за который необходимо провести проверку.
//   УникальныйИдентификаторОбъекта - уникальный идентификатор формы, необходим для записи хранилища данных.
//
//-------------------------------------возвращает -----------------------------
// Возращает структуру с полями: ПроверкаПройдена и АдресХранилищаОшибок.
// Поле ПроверкаПройдена имеет тип булево и возращает успешность пройденной проверки.
// Истина - успешно проверка пройдена.
// Поле АдресХранилищаОшибок содержит адрес хранилища, в котором сохраняется ТаблицаЗначений, или массив ошибок.
Функция ПроверитьДанныеНДС(ВидПроверки, Организация, Период, УникальныйИдентификаторОбъекта) Экспорт
	
	ПараметрыОтчета = Новый Структура("НачалоПериода, КонецПериода, Организация, ПоказыватьТолькоОшибки");
	ПараметрыОтчета.Организация = Организация;
	ПараметрыОтчета.НачалоПериода = НачалоКвартала(Период);
	ПараметрыОтчета.КонецПериода = КонецКвартала(Период);
	ПараметрыОтчета.ПоказыватьТолькоОшибки = Истина;

	Если ВидПроверки       = "РеквизитыОрганизации" Тогда

		НезаполненныеРеквизиты = Неопределено;

		РеквизитыОрганизацииЗаполнены = ПроверкаРеквизитовОрганизации.РеквизитыДляОтчетностиЗаполнены(
		"РегламентированныйОтчетНДС", Организация, Период, НезаполненныеРеквизиты);
		Если НЕ РеквизитыОрганизацииЗаполнены Тогда
			ТаблицаОшибок = НезаполненныеРеквизиты;
		Иначе
			ТаблицаОшибок = Новый Массив;
		КонецЕсли;
		
	ИначеЕсли ВидПроверки = "ОтрицательныеОстаткиНДС" Тогда

		ТаблицаОшибок = Отчеты.ЭкспрессПроверкаВеденияУчета.ПроверитьНетОтрицательногоНДСПредъявленного(Неопределено,
			 ПараметрыОтчета);
	
	ИначеЕсли ВидПроверки = "НаличиеСФПолученных" Тогда

		ТаблицаОшибок = Отчеты.ЭкспрессПроверкаВеденияУчета.ПроверитьНаличиеСчетовФактурПолученных(ПараметрыОтчета);
	
	ИначеЕсли ВидПроверки = "Соответствие19ИРегистрНДС" Тогда

		ТаблицаОшибок = Отчеты.ЭкспрессПроверкаВеденияУчета.ПроверитьОстаткиНДСПредъявленного_БУ_НУ(Неопределено,
			ПараметрыОтчета);
	
	ИначеЕсли ВидПроверки = "НаличиеСФВыданных" Тогда

		ТаблицаОшибок = Отчеты.ЭкспрессПроверкаВеденияУчета.ПроверитьПолнотаСФПоРеализации(Неопределено,
			ПараметрыОтчета);
	
	ИначеЕсли ВидПроверки = "СоответствиеСФиАвансов" Тогда
		
		ТаблицаОшибок = Отчеты.ЭкспрессПроверкаВеденияУчета.ПроверитьНачислениеНДСсАвансов(Неопределено,
			ПараметрыОтчета);

	ИначеЕсли ВидПроверки = "СоответствиеВыручкиНалогаСРегистромНДС" Тогда
		
		ТаблицаОшибок = Отчеты.ЭкспрессПроверкаВеденияУчета.ПроверитьСоответствие90и91_НДС_НУ(Неопределено,
			ПараметрыОтчета);
	
	Иначе
		Возврат Новый Структура("ПроверкаПройдена, АдресХранилищаОшибок", Ложь, "");
	КонецЕсли;
	
	
	ПроверкаПройдена = ?(ТаблицаОшибок.Количество()=0, Истина, Ложь);
	
	Если НЕ ПроверкаПройдена Тогда
		АдресХранилищаОшибок = ПоместитьВоВременноеХранилище(ТаблицаОшибок,
			 УникальныйИдентификаторОбъекта);
	Иначе
		АдресХранилищаОшибок = "";
	КонецЕсли;
	
	РезультатПроверки = Новый Структура("ПроверкаПройдена, АдресХранилищаОшибок, Организация");
	РезультатПроверки.ПроверкаПройдена = ПроверкаПройдена;
	РезультатПроверки.АдресХранилищаОшибок = АдресХранилищаОшибок;
	РезультатПроверки.Организация = Организация;
	
	Возврат РезультатПроверки;

КонецФункции

// Сбрасывает актуальность расчета НДС если был проведен или снят с проведения один из документов по учету НДС,
// не включенных в последовательность "ДокументыОрганизаций": 
//  - ДокументСсылка.СписаниеНДС,
//  - ДокументСсылка.СчетФактураВыданный,
//  - ДокументСсылка.СчетФактураПолученный.
Процедура СброситьАктуальностьРасчета(ДокументСсылка) Экспорт

	ПараметрыДокумента = Документы[ДокументСсылка.Метаданные().Имя].РеквизитыРегламентнойОперации(ДокументСсылка);
	
	// Сбрасывает актуальность всех регламентных операций по НДС 
	// если был проведен или снят с проведения документ Счет фактура выданный на аванс
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Если ПараметрыДокумента.НаАванс Тогда 
			РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СброситьФактВыполненияВсехРегламентныхОпераций(
				ПараметрыДокумента.Организация,
				ПараметрыДокумента.Дата);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Сбрасывает актуальность автоматического расчета НДС, если он доступен (см. ДоступенАвтоматическийРасчетНДС(),
	// был ранее выполнен (см. РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ВсеРегламентныеОперацииНДСВыполнены())
	ФормированиеДекларации = Перечисления.РегламентныеОперации.ФормированиеДекларации;
	ИспользуетсяАвтоматическаяОтчетностьНДС =
		РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СуществуютРегламентныеОперации(
			ПараметрыДокумента.Организация,
			НачалоКвартала(ПараметрыДокумента.Дата),
			ФормированиеДекларации);

	Если НЕ ИспользуетсяАвтоматическаяОтчетностьНДС Тогда
		Возврат;
	КонецЕсли;

	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СброситьФактВыполненияРегламентнойОперации(
		ПараметрыДокумента.Организация,
		ПараметрыДокумента.Дата,
		ПараметрыДокумента.РегламентнаяОперация);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДоступенАвтоматическийРасчетНДС

Функция ЕстьИмпортТоваров(Организация)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьДанные
	|ИЗ
	|	Документ.ГТДИмпорт КАК ГТДИмпорт
	|ГДЕ
	|	ГТДИмпорт.Проведен
	|	И ГТДИмпорт.Организация = &Организация";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьВвозИзЕАЭС(Организация)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Проведен
	|	И ЗаявлениеОВвозеТоваров.Организация = &Организация";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьЭкспорт(Организация)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.НДСРеализация0 КАК НДСРеализация0Обороты
	|ГДЕ
	|	НДСРеализация0Обороты.Организация = &Организация
	|	И НДСРеализация0Обороты.Активность";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьДоговорыСКомитентом(Организация, ВидДоговора = Неопределено)
	
	ВидыДоговоров = Новый Массив;
	Если ВидДоговора = Неопределено Тогда
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	Иначе
		ВидыДоговоров.Добавить(ВидДоговора);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыДоговоров", ВидыДоговоров);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Договоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора В(&ВидыДоговоров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Договоры.Ссылка КАК Ссылка,
	|	ХозрасчетныйСубконто.Регистратор КАК Регистратор
	|ИЗ
	|	ВТ_Договоры КАК ВТ_Договоры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО ВТ_Договоры.Ссылка = ХозрасчетныйСубконто.Значение
	|			И (ХозрасчетныйСубконто.Вид = &ВидСубконто)
	|ГДЕ
	|	НЕ ХозрасчетныйСубконто.Регистратор ЕСТЬ NULL";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьДоговорыНА(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Договоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.УчетАгентскогоНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Договоры.Ссылка КАК Ссылка,
	|	ХозрасчетныйСубконто.Регистратор КАК Регистратор
	|ИЗ
	|	ВТ_Договоры КАК ВТ_Договоры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО ВТ_Договоры.Ссылка = ХозрасчетныйСубконто.Значение
	|			И (ХозрасчетныйСубконто.Вид = &ВидСубконто)
	|ГДЕ
	|	НЕ ХозрасчетныйСубконто.Регистратор ЕСТЬ NULL";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьСМРХозспособом(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
	Запрос.УстановитьПараметр("СпособСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСМРХозспособом
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ХозрасчетныйСубконто.Период = Хозрасчетный.Период
	|			И ХозрасчетныйСубконто.Регистратор = Хозрасчетный.Регистратор
	|			И ХозрасчетныйСубконто.НомерСтроки = Хозрасчетный.НомерСтроки
	|ГДЕ
	|	Хозрасчетный.Организация = &Организация
	|	И ХозрасчетныйСубконто.Вид = &ВидСубконто
	|	И ХозрасчетныйСубконто.Значение = &СпособСтроительства";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьРучныеКорректировкиНДС(Организация, Период)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(Период));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеЗаписейКнигиПокупок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок КАК ФормированиеЗаписейКнигиПокупок
	|ГДЕ
	|	ФормированиеЗаписейКнигиПокупок.Проведен
	|	И ФормированиеЗаписейКнигиПокупок.Организация = &Организация
	|	И ФормированиеЗаписейКнигиПокупок.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ФормированиеЗаписейКнигиПокупок.РучнаяКорректировка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеЗаписейКнигиПродаж.Ссылка
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж КАК ФормированиеЗаписейКнигиПродаж
	|ГДЕ
	|	ФормированиеЗаписейКнигиПродаж.Проведен
	|	И ФормированиеЗаписейКнигиПродаж.Организация = &Организация
	|	И ФормированиеЗаписейКнигиПродаж.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ФормированиеЗаписейКнигиПродаж.РучнаяКорректировка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО СчетФактураПолученный.Организация = ДанныеПервичныхДокументов.Организация
	|			И СчетФактураПолученный.ДокументОснование = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	СчетФактураПолученный.Проведен
	|	И СчетФактураПолученный.РучнаяКорректировка
	|	И СчетФактураПолученный.Организация = &Организация
	|	И ДанныеПервичныхДокументов.ДатаРегистратора МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО СчетФактураВыданный.Организация = ДанныеПервичныхДокументов.Организация
	|			И СчетФактураВыданный.ДокументОснование = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.РучнаяКорректировка
	|	И СчетФактураВыданный.Организация = &Организация
	|	И ДанныеПервичныхДокументов.ДатаРегистратора МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьДопЛисты(Организация, Период)
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КнигаПродаж.НДС КАК ЕстьДанные
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК КнигаПродаж
	|ГДЕ
	|	КнигаПродаж.Период >= &НачалоПериода
	|	И КнигаПродаж.Организация = &Организация
	|	И КнигаПродаж.ЗаписьДополнительногоЛиста
	|	И КнигаПродаж.КорректируемыйПериод >= &НачалоПериода
	|	И КнигаПродаж.КорректируемыйПериод <= &КонецПериода
	|	И КнигаПродаж.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КнигаПокупок.НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК КнигаПокупок
	|ГДЕ
	|	КнигаПокупок.Период >= &НачалоПериода
	|	И КнигаПокупок.Организация = &Организация
	|	И КнигаПокупок.ЗаписьДополнительногоЛиста
	|	И КнигаПокупок.КорректируемыйПериод >= &НачалоПериода
	|	И КнигаПокупок.КорректируемыйПериод <= &КонецПериода
	|	И КнигаПокупок.Активность";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецКвартала(Период)));
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Функция ЕстьКорректировочныеДекларации(Организация, Период)
	
	Декларация = ИнтерфейсыВзаимодействияБРО.АктуальныйОтчет(
		"РегламентированныйОтчетНДС", Организация, КонецКвартала(Период));
	
	Если ЗначениеЗаполнено(Декларация) Тогда 
		ВидДекларации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Декларация, "Вид");
		ЭтоКорректировочнаяДекларация = ВидДекларации > 0;
		Возврат ЭтоКорректировочнаяДекларация;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоОбособленноеПодразделение(Организация) 
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	Возврат ГоловнаяОрганизация <> Организация;
	
КонецФункции

#КонецОбласти

#Область ОбновитьРасчетНалога

Процедура СообщитьПрогресс(Параметры)
	
	Параметры.КоличествоВыполненныхОпераций = Параметры.КоличествоВыполненныхОпераций + 1;
	Процент =
		Макс(Мин(Цел(Параметры.КоличествоВыполненныхОпераций / Параметры.КоличествоОперацийКВыполнению * 100), 100), 0);
	ДлительныеОперации.СообщитьПрогресс(Процент);
	
КонецПроцедуры

Функция НовыйПарамерыРасчетаНалога()
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("Организация",                              Справочники.Организации.ПустаяСсылка());
	Параметры.Вставить("Период",                                   '00010101');
	Параметры.Вставить("Декларация",                               Документы.РегламентированныйОтчет.ПустаяСсылка());
	Параметры.Вставить("НачалоПериода",                            '00010101');
	Параметры.Вставить("КонецПериода",                             '00010101');
	Параметры.Вставить("ЕстьОтложенныйВычет",                      Ложь);
	Параметры.Вставить("ПеренесенныеВычетыПриобретенныеЦенности",  0);
	Параметры.Вставить("ПеренесенныеВычетыАвансыВыданные",         0);
	Параметры.Вставить("ПеренесенныеВычетыЗачетАвансовПолученных", 0);
	Параметры.Вставить("КоличествоОперацийКВыполнению",            4);
	Параметры.Вставить("КоличествоВыполненныхОпераций",            0);
	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьСчетаФактурыНаАванс(Параметры)
	
	СтруктураПараметров = Обработки.РегистрацияСчетовФактурНаАванс.ПараметрыЗаполнения();
	СтруктураПараметров.Организация              = Параметры.Организация;
	СтруктураПараметров.НачалоПериода            = Параметры.НачалоПериода;
	СтруктураПараметров.КонецПериода             = Параметры.КонецПериода;
	СтруктураПараметров.ЗаТекущийПериод          = Истина;
	СтруктураПараметров.НеПередаютсяКонтрагентам = Истина;
	
	Обработки.РегистрацияСчетовФактурНаАванс.СформироватьСчетаФактурыВПомощнике(СтруктураПараметров);

	// Сообщим о выполнении регистрации счетов-фактур.
	СообщитьПрогресс(Параметры);
	
КонецПроцедуры

Процедура ПометитьНаУдалениеДокументыСозданныеПользователем(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Параметры.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Параметры.КонецПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФормированиеЗаписейКнигиПокупок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок КАК ФормированиеЗаписейКнигиПокупок
	|ГДЕ
	|	ФормированиеЗаписейКнигиПокупок.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ФормированиеЗаписейКнигиПокупок.Организация = &Организация
	|	И ФормированиеЗаписейКнигиПокупок.Проведен
	|	И НЕ ФормированиеЗаписейКнигиПокупок.ДокументСозданВПомощнике
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФормированиеЗаписейКнигиПродаж.Ссылка
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж КАК ФормированиеЗаписейКнигиПродаж
	|ГДЕ
	|	ФормированиеЗаписейКнигиПродаж.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ФормированиеЗаписейКнигиПродаж.Организация = &Организация
	|	И ФормированиеЗаписейКнигиПродаж.Проведен
	|	И НЕ ФормированиеЗаписейКнигиПродаж.ДокументСозданВПомощнике";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			РегламентныйДокумент = Выборка.Ссылка.ПолучитьОбъект();
			РегламентныйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РегламентныеДокументыЗаПериод(Параметры)
	
	ФЗКПокупок = Неопределено;
	ФЗКПродаж  = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Параметры.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Параметры.КонецПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФормированиеЗаписейКнигиПокупок.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ФормированиеЗаписейКнигиПокупок.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ФормированиеЗаписейКнигиПокупок.ПометкаУдаления
	|					ТОГДА 3
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок КАК ФормированиеЗаписейКнигиПокупок
	|ГДЕ
	|	ФормированиеЗаписейКнигиПокупок.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ФормированиеЗаписейКнигиПокупок.Организация = &Организация
	|	И ФормированиеЗаписейКнигиПокупок.ДокументСозданВПомощнике
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		ФЗКПокупок = Документы.ФормированиеЗаписейКнигиПокупок.СоздатьДокумент();
		ФЗКПокупок.Дата = Параметры.КонецПериода;
		ФЗКПокупок.Организация = Параметры.Организация;
		ФЗКПокупок.ДокументСозданВПомощнике = Истина;
		ФЗКПокупок.Ответственный = Пользователи.ТекущийПользователь();
		
	Иначе
		
		РегламентныеДокументы = Результат.Выгрузить();
		Для Сч = 0 По РегламентныеДокументы.Количество() - 1 Цикл
			РегламентныйДокумент = РегламентныеДокументы[Сч].Ссылка.ПолучитьОбъект();
			РегламентныйДокумент.ПометкаУдаления = ?(Сч = 0, Ложь, Истина);
			РегламентныйДокумент.ВычетПоПриобретеннымЦенностям.Очистить();
			РегламентныйДокумент.НДСсАвансов.Очистить();
			РегламентныйДокумент.ВычетПриИзмененииСтоимостиВСторонуУменьшения.Очистить();
			РегламентныйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
			Если Сч = 0 Тогда
				ФЗКПокупок = РегламентныйДокумент;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФормированиеЗаписейКнигиПокупок", "ФормированиеЗаписейКнигиПродаж");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		ФЗКПродаж = Документы.ФормированиеЗаписейКнигиПродаж.СоздатьДокумент();
		ФЗКПродаж.Дата = Параметры.КонецПериода;
		ФЗКПродаж.Организация = Параметры.Организация;
		ФЗКПродаж.ДокументСозданВПомощнике = Истина;
		ФЗКПродаж.Ответственный = Пользователи.ТекущийПользователь();
		
	Иначе
		
		РегламентныеДокументы = Результат.Выгрузить();
		Для Сч = 0 По РегламентныеДокументы.Количество() - 1 Цикл
			РегламентныйДокумент = РегламентныеДокументы[Сч].Ссылка.ПолучитьОбъект();
			РегламентныйДокумент.ПометкаУдаления = ?(Сч = 0, Ложь, Истина);
			РегламентныйДокумент.ВосстановленПоАвансам.Очистить();
			РегламентныйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
			Если Сч = 0 Тогда
				ФЗКПродаж = РегламентныйДокумент;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РегламентныеДокументы = Новый Структура();
	РегламентныеДокументы.Вставить("ФЗКПокупок", ФЗКПокупок);
	РегламентныеДокументы.Вставить("ФЗКПродаж",  ФЗКПродаж);
	
	Возврат РегламентныеДокументы;

КонецФункции

Процедура СформироватьРегламентныеДокументы(Параметры, РегламентныеДокументы)
	
	СтруктураПараметров = Новый Структура("Организация, Дата, ПредъявленНДСКВычету0, ЗаполнитьПоВсемДокументам",
		Параметры.Организация, Параметры.КонецПериода, Ложь, Ложь);
		
	ВосстановленПоАвансам = 
		Документы.ФормированиеЗаписейКнигиПродаж.ПодготовитьДанныеРазделаВосстановленПоАвансам(СтруктураПараметров);
	
	// Сообщим о формировании записей книги продаж.
	СообщитьПрогресс(Параметры);
	
	ТаблицыВычетов = Новый Структура;
	// НДС по приобретенным ценностям
	ТаблицыВычетов.Вставить("ВычетПоПриобретеннымЦенностям",
		Документы.ФормированиеЗаписейКнигиПокупок.ПодготовитьДанныеРазделаВычетПоПриобретеннымЦенностям(
			СтруктураПараметров));
	// Вычет при зачете полученных авансов
	ТаблицыВычетов.Вставить("НДСсАвансов",
		Документы.ФормированиеЗаписейКнигиПокупок.ПодготовитьДанныеРазделаВычетНДССПолученныхАвансов(
			СтруктураПараметров));
	// Вычет при изменении стоимости в сторону уменьшения
	ТаблицыВычетов.Вставить("ВычетПриИзмененииСтоимостиВСторонуУменьшения",
		Документы.ФормированиеЗаписейКнигиПокупок.ПодготовитьДанныеРазделаВычетПриИзмененииСтоимостиВСторонуУменьшения(
			СтруктураПараметров));
	
	РегламентныеДокументы.ФЗКПродаж.ВосстановленПоАвансам.Загрузить(ВосстановленПоАвансам);
	РегламентныеДокументы.ФЗКПродаж.Записать(РежимЗаписиДокумента.Проведение);
	
	Для Каждого Таблица Из ТаблицыВычетов Цикл
		РегламентныеДокументы.ФЗКПокупок[Таблица.Ключ].Загрузить(Таблица.Значение);
	КонецЦикла;
	РегламентныеДокументы.ФЗКПокупок.Записать(РежимЗаписиДокумента.Проведение);
	
	// Сообщим о формировании записей книги покупок.
	СообщитьПрогресс(Параметры);

КонецПроцедуры

Процедура СформироватьДекларацию(Параметры, ПараметрыВозвращаемые)
	
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СброситьФактВыполненияРегламентнойОперации(
		Параметры.Организация,
		Параметры.КонецПериода,
		Перечисления.РегламентныеОперации.ФормированиеДекларации);
		
	ПараметрыРегОтчета = Новый Структура();
	ПараметрыРегОтчета.Вставить("ДатаНачала",              Параметры.НачалоПериода);
	ПараметрыРегОтчета.Вставить("ДатаОкончания",           Параметры.КонецПериода);
	ПараметрыРегОтчета.Вставить("Организация",             Параметры.Организация);
	ПараметрыРегОтчета.Вставить("ИсточникОтчета",          "РегламентированныйОтчетНДС");
	ПараметрыРегОтчета.Вставить("РегламентированныйОтчет", Параметры.Декларация);
	
	ПараметрыАвтоФормированияОтчета = ПараметрыФормированияРегламентированногоОтчета(ПараметрыРегОтчета);
	// Данные по перенесенным вычетам для записи в отчет.
	ДанныеПомощникаЗаполнения = Новый Структура;
	ДанныеПомощникаЗаполнения.Вставить("ПеренесенныеВычетыПриобретенныеЦенности",
		Параметры.ПеренесенныеВычетыПриобретенныеЦенности);
	ДанныеПомощникаЗаполнения.Вставить("ПеренесенныеВычетыАвансыВыданные",
		Параметры.ПеренесенныеВычетыАвансыВыданные);
	ДанныеПомощникаЗаполнения.Вставить("ПеренесенныеВычетыЗачетАвансовПолученных",
		Параметры.ПеренесенныеВычетыЗачетАвансовПолученных);
	ДанныеПомощникаЗаполнения.Вставить("ВсегоПеренесенныеВычеты",
		Параметры.ПеренесенныеВычетыПриобретенныеЦенности +
		Параметры.ПеренесенныеВычетыЗачетАвансовПолученных);
	ПараметрыАвтоФормированияОтчета.Вставить("ДанныеПомощникаЗаполнения", ДанныеПомощникаЗаполнения);
	
	Параметры.Декларация = ИнтерфейсыВзаимодействияБРО.СформироватьАвтоматическиРеглОтчет(
		ПараметрыАвтоФормированияОтчета.ИсточникОтчета,
		Параметры.Организация,
		Параметры.НачалоПериода,
		Параметры.КонецПериода,
		Ложь,
		ПараметрыАвтоФормированияОтчета.ИмяФормыОтчета,
		ПараметрыАвтоФормированияОтчета);
		
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(
		НачалоКвартала(Параметры.КонецПериода),
		Параметры.Организация,
		Неопределено,
		Перечисления.РегламентныеОперации.ФормированиеДекларации,
		Истина);
	
	ПараметрыВозвращаемые.Декларация = Параметры.Декларация;
	
	// Сообщим о формировании декларации НДС.
	СообщитьПрогресс(Параметры);
	
КонецПроцедуры

Функция ПараметрыФормированияРегламентированногоОтчета(Параметры)
	
	ПараметрыАвтоформирования = ИнтерфейсыВзаимодействияБРО.НовыйПараметрыАвтоформированияОтчета();
	ЗаполнитьЗначенияСвойств(ПараметрыАвтоформирования, Параметры);
	
	ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
		Параметры.ИсточникОтчета, Параметры.ДатаОкончания);
		
	ПараметрыАвтоформирования.ИмяФормыОтчета = ИмяФормыОтчета;
	
	Если ЗначениеЗаполнено(Параметры.РегламентированныйОтчет) Тогда
		ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет = Параметры.РегламентированныйОтчет;
	КонецЕсли;
	
	Возврат ПараметрыАвтоформирования;
	
КонецФункции

#КонецОбласти

#КонецОбласти
