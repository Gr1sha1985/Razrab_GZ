////////////////////////////////////////////////////////////////////////////////
// ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ПриИнициализацииФормыРегламентированногоОтчета(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	Если КонтролирующийОрган = "ФСС" Тогда
		
		// регулируем видимость ЭУ отправки ФСС
		// и одновременно получаем параметры прорисовки панели отправки
		ПараметрыПрорисовки = Неопределено;
		ДокументооборотСФССКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, ПараметрыПрорисовки);
		
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		
		// регулируем видимость ЭУ отправки ФСРАР
		// и одновременно получаем параметры прорисовки панели отправки
		ПараметрыПрорисовки = Неопределено;
		ДокументооборотСФСРАРКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, ПараметрыПрорисовки);
		
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		
		// регулируем видимость ЭУ отправки РПН
		// и одновременно получаем параметры прорисовки панели отправки
		ПараметрыПрорисовки = Неопределено;
		ДокументооборотСРПНКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, ПараметрыПрорисовки);
		
	ИначеЕсли КонтролирующийОрган = "ФТС" Тогда
		
		// регулируем видимость ЭУ отправки ФТС
		// и одновременно получаем параметры прорисовки панели отправки
		ПараметрыПрорисовки = Неопределено;
		ДокументооборотСФТСКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, ПараметрыПрорисовки);
		
	ИначеЕсли КонтролирующийОрган = "БанкРоссии" Тогда
		
		// регулируем видимость ЭУ отправки в Банк России
		// и одновременно получаем параметры прорисовки панели отправки
		ПараметрыПрорисовки = Неопределено;
		
		#Если Клиент Тогда
			МодульДокументооборотСБанкомРоссииКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСБанкомРоссииКлиентСервер");
		#Иначе
			МодульДокументооборотСБанкомРоссииКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ДокументооборотСБанкомРоссииКлиентСервер");
		#КонецЕсли
		МодульДокументооборотСБанкомРоссииКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, ПараметрыПрорисовки);
		
	ИначеЕсли КонтролирующийОрган = "Минобороны" Тогда
		
		// регулируем видимость ЭУ отправки в Банк России
		// и одновременно получаем параметры прорисовки панели отправки
		ПараметрыПрорисовки = Неопределено;
		
		#Если Клиент Тогда
			МодульДокументооборотСМинобороныКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСМинобороныКлиентСервер");
		#Иначе
			МодульДокументооборотСМинобороныКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ДокументооборотСМинобороныКлиентСервер");
		#КонецЕсли
		МодульДокументооборотСМинобороныКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, ПараметрыПрорисовки);
		
	Иначе
		
		// убираем видимость меню отправки через сервис спецоператора
		СдачаОтчетностиЧерезСервисСпецоператораКлиентСервер.УстановитьВидимостьКнопкиОтправкиЧерезПредставителя(Форма);
		
		// регулируем видимость ЭУ отправки с использованием встроенного механизма
		// и одновременно получаем параметры прорисовки панели отправки
		ПараметрыПрорисовки = Неопределено;
		ДокументооборотСКОКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, КонтролирующийОрган, ПараметрыПрорисовки);
		
	КонецЕсли;
	
	// применяем параметры прорисовки
	ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовки);
	
КонецПроцедуры

Процедура ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(Форма, КонтролирующийОрган) Экспорт
	
	Если КонтролирующийОрган = "ФСС" Тогда
		
		//получаем параметры прорисовки панели отправки
		ПараметрыПрорисовки = ДокументооборотСФССКлиентСервер.ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма);
		
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		
		//получаем параметры прорисовки панели отправки
		ПараметрыПрорисовки = ДокументооборотСФСРАРКлиентСервер.ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма);
		
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		
		//получаем параметры прорисовки панели отправки
		ПараметрыПрорисовки = ДокументооборотСРПНКлиентСервер.ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма);
		
	ИначеЕсли КонтролирующийОрган = "ФТС" Тогда
		
		//получаем параметры прорисовки панели отправки
		ПараметрыПрорисовки = ДокументооборотСФТСКлиентСервер.ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма);
		
	ИначеЕсли КонтролирующийОрган = "БанкРоссии" Тогда
		
		#Если Клиент Тогда
			МодульДокументооборотСБанкомРоссииКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСБанкомРоссииКлиентСервер");
		#Иначе
			МодульДокументооборотСБанкомРоссииКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ДокументооборотСБанкомРоссииКлиентСервер");
		#КонецЕсли
		ПараметрыПрорисовки = МодульДокументооборотСБанкомРоссииКлиентСервер.ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма);
		
	ИначеЕсли КонтролирующийОрган = "Минобороны" Тогда
		
		#Если Клиент Тогда
			МодульДокументооборотСМинобороныКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСМинобороныКлиентСервер");
		#Иначе
			МодульДокументооборотСМинобороныКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ДокументооборотСМинобороныКлиентСервер");
		#КонецЕсли
		ПараметрыПрорисовки = МодульДокументооборотСМинобороныКлиентСервер.ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма);
		
	Иначе
		
		ПараметрыПрорисовки = ДокументооборотСКОКлиентСервер.ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма, КонтролирующийОрган);
		
	КонецЕсли;
	
	// применяем параметры прорисовки
	ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовки);
	
КонецПроцедуры

Процедура ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовки) Экспорт
	
	// Находим панель отправки.
	ГруппаПанельОтправки = Форма.Элементы.Найти("ГруппаПанельОтправки");
	Если ГруппаПанельОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если ПараметрыПрорисовки не удалось определить, скрываем панель.
	Если ПараметрыПрорисовки = Неопределено
		ИЛИ (СтрНачинаетсяС(Форма.ИмяФормы, "Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем")
		И ПараметрыПрорисовки.ТекущийЭтапОтправки.СостояниеСдачиОтчетности =
		ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ДокументооборотНеНачат")) Тогда
		
		ГруппаПанельОтправки.Видимость = Ложь;
		Возврат;
	Иначе
		ГруппаПанельОтправки.Видимость = Истина;
	КонецЕсли;
	
	// Если нет доступа к контексту ЭДО, то скрываем панель.
	Если НЕ ДокументооборотСКОВызовСервера.ЕстьДоступККонтекстуЭДО() Тогда
		ГруппаПанельОтправки.Видимость = Ложь;
		Возврат;
	Иначе
		ГруппаПанельОтправки.Видимость = Истина;
	КонецЕсли;
	
	СостояниеОтправки           = ПараметрыПрорисовки.ТекущийЭтапОтправки;
	ЕстьНеотправленныеИзвещения = ПараметрыПрорисовки.НеотправленныеИзвещения.ЕстьНеотправленныеИзвещения;
	ЕстьКритическиеОшибки       = ПараметрыПрорисовки.ЕстьКритическиеОшибки;
	КонтролирующийОрган         = ПараметрыПрорисовки.КонтролирующийОрган;
	
	СостояниеСдачиОтчетности = СостояниеОтправки.СостояниеСдачиОтчетности;
	
	#Область Используется1СОтчетность
	Используется1СОтчетность = РегламентированнаяОтчетностьВызовСервера.Используется1СОтчетность();
	#КонецОбласти
	
	// Находим блок состояния отправки.
	БлокСостоянияОтправки = Форма.Элементы.Найти("БлокСостоянияОтправки");
	Если БлокСостоянияОтправки = Неопределено Тогда
		
		// Поддерживаем старую панель.
		ЭлементФормыНаименованиеЭтапа = Форма.Элементы.Найти("НадписьСостояниеОтправки");
		Если ЭлементФормыНаименованиеЭтапа <> Неопределено Тогда
			ЭлементФормыНаименованиеЭтапа.Заголовок = СостояниеОтправки.ТекстНадписи;
		КонецЕсли;
		
	Иначе
		
		// Находим блок критических ошибок отправки.
		БлокКритическихОшибок = Форма.Элементы.Найти("БлокКритическихОшибок");
		Если БлокКритическихОшибок = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Находим блок неотправленных извещений.
		БлокНеотправленныхИзвещений = Форма.Элементы.Найти("БлокНеотправленныхИзвещений");
		Если БлокНеотправленныхИзвещений = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Определяем цвет фона.
		БлокСостоянияОтправки.ЦветФона = ДокументооборотСКОВызовСервера.ЦветФонаПанелиОтправкиПоСтатусу(СостояниеСдачиОтчетности);
		
		// Наименование протокола.
		ЭлементФормыГиперссылкаПротокол = Форма.Элементы.Найти("ГиперссылкаПротокол");
		Если ЭлементФормыГиперссылкаПротокол <> Неопределено Тогда
			Если ЗначениеЗаполнено(СостояниеОтправки.НаименованиеПротокола) Тогда
				ЭлементФормыГиперссылкаПротокол.Видимость = Истина;
				ЭлементФормыГиперссылкаПротокол.Заголовок = СостояниеОтправки.НаименованиеПротокола;
			Иначе
				ЭлементФормыГиперссылкаПротокол.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Наименование текущего этапа.
		ЭлементФормыНаименованиеЭтапа = Форма.Элементы.Найти("НаименованиеЭтапа");
		Если ЭлементФормыНаименованиеЭтапа <> Неопределено Тогда
			НаименованиеЭтапаЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1'"), СостояниеОтправки.ТекстНадписи);
			Если НЕ (СтрНачинаетсяС(Форма.ИмяФормы, "Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов")
				ИЛИ СтрНачинаетсяС(Форма.ИмяФормы, "Справочник.МакетыПенсионныхДел")
				ИЛИ СтрНачинаетсяС(Форма.ИмяФормы, "Справочник.ЗаявлениеОНазначенииПенсии")
				ИЛИ СтрНачинаетсяС(Форма.ИмяФормы, "Документ.ЗаявленияПоЭлДокументооборотуСПФР")) Тогда
				
				Если РегламентированнаяОтчетностьКлиентСервер.ОбъектНеОтправлялсяЧерез1СОтчетность(СостояниеОтправки.СостояниеСдачиОтчетности) Тогда
					
					СтатусыОбъектов = РегламентированнаяОтчетностьКлиентСервер.СтатусыОбъектовРеглОтчетностиПриРучномВводе(Форма);
					ЭлементФормыНаименованиеЭтапа.Гиперссылка = СтатусыОбъектов.Найти(НаименованиеЭтапаЗаголовок) <> Неопределено;
					
				ИначеЕсли ПараметрыПрорисовки.КонтролирующийОрган = "Минобороны" Тогда
					ЭлементФормыНаименованиеЭтапа.Гиперссылка = Истина;
				Иначе
					ЭлементФормыНаименованиеЭтапа.Гиперссылка = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			ЭлементФормыНаименованиеЭтапа.Заголовок = НаименованиеЭтапаЗаголовок;
		КонецЕсли;
		
		// Этапы отправки.
		ЭлементФормыЭтапыОтправки = Форма.Элементы.Найти("ЭтапыОтправки");
		Если ЭлементФормыЭтапыОтправки <> Неопределено Тогда
			Если ПараметрыПрорисовки.КонтролирующийОрган <> "Минобороны" Тогда
				ЭлементФормыЭтапыОтправки.Видимость = 
					СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ДокументооборотНеНачат");
			Иначе
				ЭлементФормыЭтапыОтправки.Видимость = 
					СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ДокументооборотНеНачат") И
					НЕ ПараметрыПрорисовки.ТекущийЭтапОтправки.СтатусУстановленВручную;
			КонецЕсли; 
		Конецесли;
		
		// Комментарий к этапу.
		ЭлементФормыКомментарийЭтапа = Форма.Элементы.Найти("КомментарийЭтапа");
		Если ЭлементФормыКомментарийЭтапа <> Неопределено Тогда
			
			КомментарийКСостоянию = СостояниеОтправки.КомментарийКСостоянию;
			
			Если ЗначениеЗаполнено(КомментарийКСостоянию) И Используется1СОтчетность Тогда // только если используется "1С-Отчетность"
				
				ЭлементФормыКомментарийЭтапа.Заголовок 					= КомментарийКСостоянию;
				ЭлементФормыКомментарийЭтапа.Видимость 					= Истина;
				ЭлементФормыКомментарийЭтапа.РастягиватьПоГоризонтали 	= Истина;
				Если Форма.Элементы.Найти("ОтступПередКнопкойОбновитьОтправку") <> Неопределено Тогда 
					Форма.Элементы.ОтступПередКнопкойОбновитьОтправку.Видимость = Ложь;
				КонецЕсли;
				
			Иначе
				
				ЭлементФормыКомментарийЭтапа.Видимость = Ложь;
				ЭлементФормыКомментарийЭтапа.РастягиватьПоГоризонтали = Ложь;
				Если Форма.Элементы.Найти("ОтступПередКнопкойОбновитьОтправку") <> Неопределено Тогда 
					Форма.Элементы.ОтступПередКнопкойОбновитьОтправку.Видимость = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Кнопка "Обновить".
		ЭлементФормыОбновитьОтправку = Форма.Элементы.Найти("ОбновитьОтправку");
		Если ЭлементФормыОбновитьОтправку <> Неопределено Тогда
			Если СтрНачинаетсяС(Форма.ИмяФормы, "Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем")
				ИЛИ СтрНачинаетсяС(Форма.ИмяФормы, "Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов")
				И Форма.Объект.ВидОтчета =
				ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрДанныхЭЛНЗаполняемыхРаботодателем") Тогда
				
				ТипОтправляемогоДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ДанныеЭЛНФСС");
				
			ИначеЕсли СтрНачинаетсяС(Форма.ИмяФормы, "Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам")
				ИЛИ СтрНачинаетсяС(Форма.ИмяФормы, "Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов")
					И Форма.Объект.ВидОтчета =
					ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам") Тогда
				
				ТипОтправляемогоДокумента = "РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам";
				
			Иначе
				ТипОтправляемогоДокумента = Неопределено;
			КонецЕсли;
			
			ЭлементФормыОбновитьОтправку.Видимость = ВидимостьКнопкиОтправкаПоСостоянию(
				СостояниеСдачиОтчетности,
				КонтролирующийОрган,
				ТипОтправляемогоДокумента);
		КонецЕсли;
		
		// Критические ошибки.
		ЭлементФормыБлокКритическихОшибок = Форма.Элементы.Найти("БлокКритическихОшибок");
		Если ЭлементФормыБлокКритическихОшибок <> Неопределено Тогда
			
			// Форматированная строка.
			ЭлементФормыКритическиеОшибки = Форма.Элементы.Найти("КритическиеОшибки");
			Если ЭлементФормыКритическиеОшибки <> Неопределено Тогда
				
				ЭлементФормыКритическиеОшибки.Видимость 			= ЕстьКритическиеОшибки;
				Форма.Элементы.ЗначокКритическойОшибки.Видимость 	= ЕстьКритическиеОшибки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Поддержка старых элементов формы.
		ЭлементФормыЗаголовокКритическихОшибок = Форма.Элементы.Найти("ЗаголовокКритическихОшибок");
		Если ЭлементФормыЗаголовокКритическихОшибок <> Неопределено Тогда
			ЭлементФормыЗаголовокКритическихОшибок.Видимость = ЕстьКритическиеОшибки;
		КонецЕсли;
		
		ЭлементФормыГиперссылкаНаКритическиеОшибки = Форма.Элементы.Найти("ГиперссылкаНаКритическиеОшибки");
		Если ЭлементФормыГиперссылкаНаКритическиеОшибки <> Неопределено Тогда
			ЭлементФормыГиперссылкаНаКритическиеОшибки.Видимость = ЕстьКритическиеОшибки;
		КонецЕсли;
		
		// Неотправленные извещения.
		ЭлементФормыБлокНеотправленныхИзвещений = Форма.Элементы.Найти("БлокНеотправленныхИзвещений");
		Если ЭлементФормыБлокНеотправленныхИзвещений <> Неопределено Тогда
			ЭлементФормыБлокНеотправленныхИзвещений.Видимость = ЕстьНеотправленныеИзвещения;
		КонецЕсли;
		
		// Видимость панели с ошибками и неотправленными извещениями.
		ЭлементФормыБлокОшибокИИзвещений = Форма.Элементы.Найти("БлокОшибокИИзвещений");
		Если ЭлементФормыБлокОшибокИИзвещений <> Неопределено Тогда
			ЭлементФормыБлокОшибокИИзвещений.Видимость = ЕстьКритическиеОшибки ИЛИ ЕстьНеотправленныеИзвещения;
		КонецЕсли;
		
	КонецЕсли;
	
	#Область НеИспользуется1СОтчетность
	Если НЕ Используется1СОтчетность Тогда
		
		СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		
		// Управление доступностью изменения статуса вручную.
		Если РегламентированнаяОтчетностьВызовСервера.ОбъектРеглОтчетностиОтправлялсяБезИспользования1СОтчетности(
			СсылкаНаОтчет) Тогда
			Если ЭлементФормыНаименованиеЭтапа <> Неопределено Тогда
				ЭлементФормыНаименованиеЭтапа.Гиперссылка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Отключение кнопки "Проверить в интернете".
		ЭлементФормыПроверитьВИнтернете = Форма.Элементы.Найти("ПроверитьВИнтернете");
		Если ЭлементФормыПроверитьВИнтернете <> Неопределено Тогда
			ЭлементФормыПроверитьВИнтернете.Видимость = Ложь;
		КонецЕсли;
		
		// Управление баннером состояния отправки.
		Если БлокСостоянияОтправки <> Неопределено Тогда
			ГруппаБаннерСостоянияОтправки = Форма.Элементы.Найти("ГруппаБаннерСостоянияОтправки");
			Если ГруппаБаннерСостоянияОтправки = Неопределено Тогда
				
				// Создадим группу элементов для баннера состояния отправки.
				#Если Сервер Тогда
				
				ГруппаБаннерСостоянияОтправки = Форма.Элементы.Добавить("ГруппаБаннерСостоянияОтправки",
					Тип("ГруппаФормы"), ГруппаПанельОтправки);
				ГруппаБаннерСостоянияОтправки.Видимость = Ложь;
				ГруппаБаннерСостоянияОтправки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаБаннерСостоянияОтправки.Отображение = ОтображениеОбычнойГруппы.Нет;
				ГруппаБаннерСостоянияОтправки.Заголовок = НСтр("ru = 'Состояние отправки (баннер)'");
				ГруппаБаннерСостоянияОтправки.ОтображатьЗаголовок = Ложь;
				ГруппаБаннерСостоянияОтправки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				ГруппаБаннерСостоянияОтправки.РастягиватьПоГоризонтали = Истина;
				
				ДекорацияБаннерСостоянияОтправкиКартинка = Форма.Элементы.Добавить("ДекорацияБаннерСостоянияОтправкиКартинка",
					Тип("ДекорацияФормы"), ГруппаБаннерСостоянияОтправки);
				ДекорацияБаннерСостоянияОтправкиКартинка.Вид = ВидДекорацииФормы.Картинка;
				ДекорацияБаннерСостоянияОтправкиКартинка.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
				ДекорацияБаннерСостоянияОтправкиКартинка.Заголовок = НСтр("ru = 'Баннер состояния отправки'");
				ДекорацияБаннерСостоянияОтправкиКартинка.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
				
				БаннерСостоянияОтправкиТекст = Форма.Элементы.Добавить("БаннерСостоянияОтправкиТекст",
					Тип("ДекорацияФормы"), ГруппаБаннерСостоянияОтправки);
				БаннерСостоянияОтправкиТекст.Вид = ВидДекорацииФормы.Надпись;
				БаннерСостоянияОтправкиТекст.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
				БаннерСостоянияОтправкиТекст.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
				
				#КонецЕсли
			КонецЕсли;
			
			Если ГруппаБаннерСостоянияОтправки <> Неопределено Тогда
				ДанныеБаннера = РегламентированнаяОтчетностьВызовСервера.ДанныеБаннераИнтеграцииСБанком(СсылкаНаОтчет);
				
				Если ДанныеБаннера <> Неопределено Тогда
					БаннерВиден = ЗначениеЗаполнено(ДанныеБаннера.ТекстБаннера);
					Форма.Элементы.ГруппаБаннерСостоянияОтправки.Видимость = БаннерВиден;
					Если БаннерВиден Тогда
						Форма.Элементы.БаннерСостоянияОтправкиТекст.Заголовок = ДанныеБаннера.ТекстБаннера;
						
						ВидимостьКартинкиБаннера = ЗначениеЗаполнено(ДанныеБаннера.ИмяКартинкиБаннера);
						Если ВидимостьКартинкиБаннера Тогда
							Форма.Элементы.ДекорацияБаннерСостоянияОтправкиКартинка.Картинка = БиблиотекаКартинок[ДанныеБаннера.ИмяКартинкиБаннера];
						КонецЕсли;
						
						Форма.Элементы.ДекорацияБаннерСостоянияОтправкиКартинка.Видимость = ВидимостьКартинкиБаннера;
						Форма.Элементы.ГруппаБаннерСостоянияОтправки.ЦветФона = ДанныеБаннера.ЦветБаннера;
					КонецЕсли;
				КонецЕсли;
				
				БлокСостоянияОтправки.Видимость = НЕ ГруппаБаннерСостоянияОтправки.Видимость;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

Функция ВидимостьКнопкиОтправкаПоСостоянию(
		СостояниеСдачиОтчетности,
		КонтролирующийОрган = Неопределено,
		ТипОтправляемогоДокумента = Неопределено) Экспорт
	
	Возврат ((СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота")
			И СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота"))
			ИЛИ КонтролирующийОрган = "ФСС" ИЛИ КонтролирующийОрган = "РПН" ИЛИ КонтролирующийОрган = "ФСРАР" ИЛИ КонтролирующийОрган = "ФТС")
			И КонтролирующийОрган <> "Минобороны"
			И ТипОтправляемогоДокумента <> ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ДанныеЭЛНФСС")
			И ТипОтправляемогоДокумента <> "РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам"
			И СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ПриемПодтвержден")
			И СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ДокументооборотНеНачат")
			И СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ОтправленоИзКонтролирующегоОргана")
			И СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ТребуетсяПодтверждениеПриема");
	
КонецФункции


Функция СсылкаНаОтчетПоФорме(Форма) Экспорт
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "СтруктураРеквизитовФормы")
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.СтруктураРеквизитовФормы, "мСохраненныйДок") Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "Объект")
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.Объект, "Ссылка") Тогда
		Возврат Форма.Объект.Ссылка;
	ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "ДокументЗаявление")
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.ДокументЗаявление, "Ссылка") Тогда
		Возврат Форма.ДокументЗаявление.Ссылка;
	ИначеЕсли СтрНайти(Форма.ИмяФормы, "ДлительнаяОперация") <> 0
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "ОтчетСсылка") Тогда
		Возврат Форма.ОтчетСсылка;
	Иначе
		Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ПолучитьСсылкуНаОтправляемыйДокументПоФорме(Форма);
	КонецЕсли;
	
КонецФункции

Функция СтрокаОС() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux32";
	ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux64";
	ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows32";
	Иначе
		Возврат "Windows64";
	КонецЕсли;
	
КонецФункции

Функция ЭтоЛинукс() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Возврат (СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64);
	
КонецФункции 

Функция ЭтоФайрФокс() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Возврат СтрНайти(СисИнфо.ИнформацияПрограммыПросмотра, "Firefox") <> 0;
	
КонецФункции

Функция ЭтоФайрФоксХромИлиСафари() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Возврат (СтрНайти(СисИнфо.ИнформацияПрограммыПросмотра, "Firefox") <> 0 ИЛИ СтрНайти(СисИнфо.ИнформацияПрограммыПросмотра, "Chrome") <> 0 ИЛИ СтрНайти(СисИнфо.ИнформацияПрограммыПросмотра, "Safari") <> 0);
	
КонецФункции 

// Функция возвращает массив имен объектов метаданных.
// 
// Параметры:
//	Массив элементов справочника ВидыОтправляемыхДокументов
//
// Результат:
//	Массив соответствующих видов прочих уведомлений
//
Функция МассивВидовПрочихУведомленийПоддерживающихДокументооборот(МассивВидовОтправляемыхДокументов) Экспорт
	
	МассивВидовПрочихУведомленийПоддерживающихДокументооборот = Новый Массив;
	
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеОПроведенииНалоговогоМониторинга")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПроведенииНалоговогоМониторинга"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ИнформацияОбОрганизацииСистемыВнутреннегоКонтроля")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ИнформацияОбОрганизацииСистемыВнутреннегоКонтроля"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ИнформацияОбУчастниках")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ИнформацияОбУчастниках"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УчетнаяПолитика")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УчетнаяПолитика"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РегламентИнформационногоВзаимодействия")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.РегламентИнформационногоВзаимодействия"));
	КонецЕсли;
	
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ВыборНалоговогоОрганаДляПостановкиНаУчет")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.Форма_1_6_Учет"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ОткрытиеЗакрытиеСчета")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УчастиеВРоссийскихИностранныхОрганизациях")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_2"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СозданиеОбособленныхПодразделений")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_1"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗакрытиеОбособленныхПодразделений")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_2"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеорганизацияЛиквидацияОрганизации")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_4"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ПостановкаНаУчетОрганизацииПлательщикаЕНВД")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ПостановкаНаУчетПредпринимателяПлательщикаЕНВД")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СнятиеСУчетаОрганизацииПлательщикаЕНВД")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СнятиеСУчетаПредпринимателяПлательщикаЕНВД")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ИзменениеОбъектаУСН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбИзмененииОбъектаНалогообложенияПоУСН"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ОтказОтУСН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбОтказеОтУСН"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УтратаПраваНаУСН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбУтратеПраваНаУСН"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ПереходНаУСН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеПереходНПДУСН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеПереходНПДУСН"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ПрекращениеДеятельностиУСН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПрекращенииДеятельностиПоУСН"));
	КонецЕсли;
	
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеНаПолучениеПатента")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатента"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеОбУтратеПраваНаПатент")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОбУтратеПраваНаПатент"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеУменьшениеНалогаККТ")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеУменьшениеНалогаККТ"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УменьшениеНалогаНаСтраховыеВзносы")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы"));
	КонецЕсли;
	
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ФормаУ_ИО")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ФормаТС1")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС1"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ФормаТС2")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС2"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ФормаС_09_6")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_6"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ФормаСИО")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаСИО"));
	КонецЕсли;
	
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ПереходНаЕСХН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ПереходНаЕСХН"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеПереходНПДЕСХН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеПереходНПДЕСХН"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеПрекращениеЕСХН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеПрекращениеЕСХН"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеНДДДУС")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеНДДДУС"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеВыборНалоговогоОрганаУплатаНДФЛ")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ВыборНалоговогоОрганаНДФЛ"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеПорядокУплатыПрибыль")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеПорядокУплатыПрибыль"));
	КонецЕсли;
	
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеОЗачетеНалога")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОЗачетеНалога"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеОВозвратеНалога")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОВозвратеНалога"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеНалоговаяЛьготаТранспортЗемля")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеЛьготаТранспортЗемля"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СообщениеТранспортЗемля")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.СообщениеТранспортЗемля"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеОГибелиТранспортногоСредства")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОГибелиТранспортногоСредства"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ИзменениеПорядкаИсчисленияАвансовПоНалогуНаПрибыль")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ИзменениеПорядкаИсчисленияАвансовПоНалогуНаПрибыль"));
	КонецЕсли;
	
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ОтчетДДС")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ОтчетДДС"));
	КонецЕсли;

	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеОРегистрацииОбъектаНВОС")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеПостановкаОбъектаНВОС"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ФормаКИК")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.НаделениеОППолномочиямиПоВыплатамФизлицам")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.СообщениеОНаделенииОППолномочиямиПоВыплатам"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеОПримененииНалоговойЛьготыУчастникамиРегиональныхИнвестиционныхПроектов")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПримененииНалоговойЛьготыУчастникамиРегиональныхИнвестиционныхПроектов"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ПостановкаСнятиеВКачествеНалоговогоАгента")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ПостановкаСнятиеВКачествеНалоговогоАгента"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СогласиеНаРаскрытиеНалоговойТайны")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.СогласиеНаРаскрытиеНалоговойТайны"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.НевозможностьПредоставленияДокументов")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.НевозможностьПредоставленияДокументов"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеОсвобождениеОтСтраховыхВзносов")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОсвобождениеОтСтраховыхВзносов"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеОбОткрытииЗакрытииСчета")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбОткрытииЗакрытииСчета"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеОбИзмененииРеквизитовСчета")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбИзмененииРеквизитовСчета"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеОНаличииСчета")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОНаличииСчета"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗапросСведенийСоставляющихНалоговуюТайну")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗапросСведенийСоставляющихНалоговуюТайну"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеКЛМГК")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеКЛМК"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеНаСубсидиюДляЗарплаты")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаСубсидиюДляЗарплаты"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СубсидияНаПроведениеПрофилактики")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.СубсидияНаПроведениеПрофилактики"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ВыдачаСправкиПоРасчетам")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ВыдачаСправкиПоРасчетам"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СогласиеНаИнформированиеОЗадолженности")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.СогласиеНаИнформированиеОЗадолженности"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеОсвобождениеНалогНаПрибыльСколково")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОсвобождениеНалогНаПрибыльСколково"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеОсвобождениеНДССколково")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОсвобождениеНДССколково"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЖалобаФНС")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЖалобаФНС"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрДокументовПодтверждающихЛьготы")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.РеестрДокументовПодтверждающихЛьготы"));
	КонецЕсли;

	Возврат МассивВидовПрочихУведомленийПоддерживающихДокументооборот;
	
КонецФункции

Функция ТелефонМобильныйБезРазделителей(Знач ТелефонМобильный) Экспорт
	
	ТелефонМобильный = СтрЗаменить(ТелефонМобильный, "+7", "");
	ТелефонМобильный = СтрЗаменить(ТелефонМобильный, "+", "");
	ТелефонМобильный = СтрЗаменить(ТелефонМобильный, "(", "");
	ТелефонМобильный = СтрЗаменить(ТелефонМобильный, ")", "");
	ТелефонМобильный = СтрЗаменить(ТелефонМобильный, "-", "");
	ТелефонМобильный = СтрЗаменить(ТелефонМобильный, " ", "");
	ТелефонМобильный = СокрЛП(ТелефонМобильный);
	
	Если ПустаяСтрока(ТелефонМобильный) Тогда
		Возврат "";
	Иначе
		Если СтрДлина(ТелефонМобильный) = 10 Тогда
			Возврат "8" + ТелефонМобильный;
		Иначе
			Возврат ТелефонМобильный;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

Функция ТелефонМобильныйЗаполнен(Знач ТелефонМобильный) Экспорт
	
	Телефон = ТелефонМобильныйБезРазделителей(ТелефонМобильный);
	
	Возврат СтрДлина(Телефон) = 11;
	
КонецФункции

Функция СтрокаВФорматеДляСравнения(Знач Текст) Экспорт
	
	Результат = Строка(Текст);
	Результат = СокрЛП(Результат);
	Результат = Врег(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ФорматированноеПредставлениеСпискаВложений(МассивЭлементов, ДобавлятьРазмер = Истина) Экспорт
	
	МассивПредставлений = Новый Массив;
	Для Каждого Элемент Из МассивЭлементов Цикл
		
		Если ДобавлятьРазмер Тогда
			ПредставлениеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (%2)'"), Элемент.ИмяФайла, ТекстовоеПредставлениеРазмераФайла(Элемент.Размер));
		Иначе
			ПредставлениеФайла = Элемент.ИмяФайла;
		КонецЕсли;
		
		СсылкаНаФайл = ?(Элемент.Свойство("Ссылка"), Элемент.Ссылка, Элемент.ИмяФайла);
		МассивПредставлений.Добавить(Новый ФорматированнаяСтрока(ПредставлениеФайла,,,, СсылкаНаФайл));
		
		Если Элемент.Свойство("ВидРешенияНаЖалобу") И ЗначениеЗаполнено(Элемент.ВидРешенияНаЖалобу) Тогда
			МассивПредставлений.Добавить(" (");
			МассивПредставлений.Добавить(Элемент.ВидРешенияНаЖалобу);
			МассивПредставлений.Добавить(")");
		Конецесли;
		
		МассивПредставлений.Добавить(Символы.ПС);
		МассивПредставлений.Добавить("");
		МассивПредставлений.Добавить(Символы.ПС);
		
	КонецЦикла;
	
	Представление = Новый ФорматированнаяСтрока(МассивПредставлений);
	
	Возврат Представление;
	
КонецФункции

Функция ТекстовоеПредставлениеРазмераФайла(РазмерВБайтах) Экспорт
	
	Размер = 0;
	РазмерВКилобайтах = Окр(РазмерВБайтах / 1024);
	Если РазмерВБайтах = 0 Тогда
		Шаблон = НСтр("ru = '%1 Б'");
	ИначеЕсли РазмерВКилобайтах < 1000 Тогда
		Размер = РазмерВКилобайтах;
		Шаблон = НСтр("ru = '%1 КБ'");
	Иначе
		Размер = Окр(РазмерВКилобайтах / 1024);
		Шаблон = НСтр("ru = '%1 МБ'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Размер);
	
КонецФункции

Функция ПутьМодуляКриптографии() Экспорт
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		ПерсональныеНастройки = МодульЭлектроннаяПодпись.ПерсональныеНастройки();
	#Иначе
		МодульСтандартныеПодсистемыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СтандартныеПодсистемыКлиент");
		ПерсональныеНастройки =
			МодульСтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ЭлектроннаяПодпись.ПерсональныеНастройки;
	#КонецЕсли
	
	Результат = "";
	Если ПерсональныеНастройки.Свойство("ПутиКПрограммамЭлектроннойПодписиИШифрования")
		И ПерсональныеНастройки.ПутиКПрограммамЭлектроннойПодписиИШифрования.Количество() > 0 Тогда
		
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ОписанияПрограмм = МодульЭлектроннаяПодпись.ОбщиеНастройки().ОписанияПрограмм;
		#Иначе
			ОписанияПрограмм =
				МодульСтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ЭлектроннаяПодпись.ОбщиеНастройки.ОписанияПрограмм;
		#КонецЕсли
		
		ПоддерживаемыеКриптопровайдерыCryptoPro = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro("",, 0);
		ИндексКриптопровайдеров = Неопределено;
		
		ИндексЭлемента = Неопределено;
		Для ИндексПрограммы = 0 По ОписанияПрограмм.ВГраница() Цикл
			СвойстваКриптопровайдера = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдера(
				ОписанияПрограмм[ИндексПрограммы].ИмяПрограммы,,
				ПоддерживаемыеКриптопровайдерыCryptoPro,
				ИндексКриптопровайдеров);
				
			Если СвойстваКриптопровайдера <> Неопределено И (ИндексЭлемента = Неопределено
				ИЛИ СвойстваКриптопровайдера.ИндексЭлемента < ИндексЭлемента) Тогда
				
				СсылкаНаПрограмму = ОписанияПрограмм[ИндексПрограммы].Ссылка;
				ПутьКПрограмме = ПерсональныеНастройки.ПутиКПрограммамЭлектроннойПодписиИШифрования.Получить(СсылкаНаПрограмму);
				Если ЗначениеЗаполнено(ПутьКПрограмме) Тогда
					ИндексЭлемента = СвойстваКриптопровайдера.ИндексЭлемента;
					Результат = Строка(ПутьКПрограмме);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписьСобытияВЖурналРегистрации(Знач ТекстСообщения, ОписаниеОшибки) Экспорт
	
	#Если Клиент Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки;
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ТекстСообщения, "Ошибка",,,Истина);
	#Иначе
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
	#КонецЕсли
	
КонецПроцедуры

Процедура СообщитьИлиПередатьВМастерОшибку(Ошибка, ВызовИзМастераПодключенияК1СОтчетности = ложь, ТекстОшибокДляМастераПодключенияК1СОтчетности = "", ВыводитьСообщения = истина) Экспорт
	
	Если ВыводитьСообщения и не ВызовИзМастераПодключенияК1СОтчетности Тогда 
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(Ошибка);
	КонецЕсли;	
	
	Если ВызовИзМастераПодключенияК1СОтчетности Тогда 
		ТекстОшибокДляМастераПодключенияК1СОтчетности = 
			ТекстОшибокДляМастераПодключенияК1СОтчетности + 
			?(ПустаяСтрока(ТекстОшибокДляМастераПодключенияК1СОтчетности), "", Символы.ПС) + Ошибка;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьОрганизациюВЗаголовок(ЗаголовокФормы, ИспользуетсяОднаОрганизация, НаименованиеОрганизации, ИсходныйЗаголовок) Экспорт

	Если НЕ ИспользуетсяОднаОрганизация 
		И ЗначениеЗаполнено(НаименованиеОрганизации)  Тогда
		
		ЗаголовокФормы = ИсходныйЗаголовок + " (" + НаименованиеОрганизации + ")";
		
	Иначе
		
		ЗаголовокФормы = ИсходныйЗаголовок;
		
	КонецЕсли;

КонецПроцедуры

Функция ЭтоФайлВыгрузкиРеестраНДС(КороткоеИмяФайла) Экспорт
	
	Префиксы = Новый Массив;
	Префиксы.Добавить("KO_RRTDCN23"); // 	РегламентированныйОтчетРеестрНДСДекларацииИТаможенныеДекларации23
	Префиксы.Добавить("KO_RRDTEG"); // 		РегламентированныйОтчетРеестрНДСДекларацииНаЭкспрессГрузы
	Префиксы.Добавить("KO_RRTDNDS"); // 	РегламентированныйОтчетРеестрНДСПриложение1
	Префиксы.Добавить("KO_RRNFTSNDS"); // 	РегламентированныйОтчетРеестрНДСПриложение2
	Префиксы.Добавить("KO_RRGAZNDS"); // 	РегламентированныйОтчетРеестрНДСПриложение3
	Префиксы.Добавить("KO_RRNEFTNDS"); // 	РегламентированныйОтчетРеестрНДСПриложение4
	Префиксы.Добавить("KO_RRTRDNDS"); // 	РегламентированныйОтчетРеестрНДСПриложение5
	Префиксы.Добавить("KO_RRDPRNDS"); // 	РегламентированныйОтчетРеестрНДСПриложение6
	Префиксы.Добавить("KO_RRZDNNDS"); // 	РегламентированныйОтчетРеестрНДСПриложение7
	Префиксы.Добавить("KO_RRTRINNDS"); // 	РегламентированныйОтчетРеестрНДСПриложение8
	Префиксы.Добавить("KO_RRAVNNDS"); // 	РегламентированныйОтчетРеестрНДСПриложение9
	Префиксы.Добавить("KO_RRMORNDS"); // 	РегламентированныйОтчетРеестрНДСПриложение10
	Префиксы.Добавить("KO_RRGDPRVZNDS"); // РегламентированныйОтчетРеестрНДСПриложение11
	Префиксы.Добавить("KO_RRAVPRVZNDS"); // РегламентированныйОтчетРеестрНДСПриложение12
	Префиксы.Добавить("KO_RRGDTRNDS"); // 	РегламентированныйОтчетРеестрНДСПриложение13
	Префиксы.Добавить("KO_RRPRVZNDS"); // 	РегламентированныйОтчетРеестрНДСПриложение14
	
	Для каждого Префикс Из Префиксы Цикл
		
		ДлинаПрефикса = СтрДлина(Префикс);
		Если ВРег(Лев(КороткоеИмяФайла, ДлинаПрефикса)) = ВРег(Префикс) Тогда
			Возврат Истина;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоФайлВыгрузкиРеестраАкцизов(КороткоеИмяФайла) Экспорт
	
	Префиксы = Новый Массив;
	Префиксы.Добавить("KO_RR198.7.3TD"); // 	РегламентированныйОтчетРеестрАкцизыПриложение1
	Префиксы.Добавить("KO_RR198.7.34TD"); // 	РегламентированныйОтчетРеестрАкцизыПриложение2
	
	Для каждого Префикс Из Префиксы Цикл
		
		ДлинаПрефикса = СтрДлина(Префикс);
		Если ВРег(Лев(КороткоеИмяФайла, ДлинаПрефикса)) = ВРег(Префикс) Тогда
			Возврат Истина;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ОбновитьКоличествоНовых(Форма) Экспорт
	
	КоличествоНовых = 0;
	
	КоличествоПолученныеСообщения = 0;
	КоличествоОбработанныеЗапросы = 0;
	КоличествоЗавершенныеОтправки = 0;
	
	СтрокаБлокПолученныеСообщения = Неопределено;
	СтрокаБлокОбработанныеЗапросы = Неопределено;
	СтрокаБлокЗавершенныеОтправки = Неопределено;
	
	СтрокиДерева = Форма.Новое.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения") Тогда
			Если СтрокаДерева.ЭтоЗаголовокБлока Тогда
				СтрокаБлокПолученныеСообщения = СтрокаДерева;
			ИначеЕсли СтрокаДерева.НеПрочитано Тогда
				КоличествоПолученныеСообщения = КоличествоПолученныеСообщения + 1;
			КонецЕсли;
				
		ИначеЕсли СтрокаДерева.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы") Тогда 
			Если СтрокаДерева.ЭтоЗаголовокБлока Тогда
				СтрокаБлокОбработанныеЗапросы = СтрокаДерева;
			ИначеЕсли СтрокаДерева.НеПрочитано Тогда
				КоличествоОбработанныеЗапросы = КоличествоОбработанныеЗапросы + 1;
			КонецЕсли;
			
		ИначеЕсли СтрокаДерева.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки") Тогда 
			Если СтрокаДерева.ЭтоЗаголовокБлока Тогда
				СтрокаБлокЗавершенныеОтправки = СтрокаДерева;
			ИначеЕсли СтрокаДерева.НеПрочитано Тогда
				КоличествоЗавершенныеОтправки = КоличествоЗавершенныеОтправки + 1;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	КоличествоНовых = КоличествоПолученныеСообщения + КоличествоОбработанныеЗапросы + КоличествоЗавершенныеОтправки;
	
	Если КоличествоПолученныеСообщения = 0 Тогда
		СтрокаБлокПолученныеСообщения.ЗаголовокБлока = НСтр("ru = 'Полученные сообщения'");	
	Иначе
		СтрокаБлокПолученныеСообщения.ЗаголовокБлока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Полученные сообщения (%1)'"), КоличествоПолученныеСообщения);
	КонецЕсли;
	
	Если КоличествоОбработанныеЗапросы = 0 Тогда
		СтрокаБлокОбработанныеЗапросы.ЗаголовокБлока = НСтр("ru = 'Обработанные запросы'");	
	Иначе
		СтрокаБлокОбработанныеЗапросы.ЗаголовокБлока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработанные запросы (%1)'"), КоличествоОбработанныеЗапросы);
	КонецЕсли;

	Если КоличествоЗавершенныеОтправки = 0 Тогда
		СтрокаБлокЗавершенныеОтправки.ЗаголовокБлока = НСтр("ru = 'Завершенные отправки'");	
	Иначе
		СтрокаБлокЗавершенныеОтправки.ЗаголовокБлока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Завершенные отправки (%1)'"), КоличествоЗавершенныеОтправки);
	КонецЕсли;

	Возврат КоличествоНовых;
	
КонецФункции

Функция МаксимальнойКоличествоФайловОписи() Экспорт
	
	// ПРИКАЗ от 18 января 2017 г. N ММВ-7-6/16@
	// Таблица 4.8 Документы, представляемые в налоговый орган (ДокПредстНО)
	// Количество представленных файлов КолФайл	A	N(4)	О
	// То есть не более 9999 файлов.
	// 
	// Но в приказе
	// Приказ ФНС России от 09.11.2010 N ММВ-7-6/535@ (ред. от 12.04.2017)
	// 3.1.3. В одном транспортном контейнере передаются документы и ЭП, относящиеся к одной транзакции.
	// Транспортный контейнер может содержать не более 2500 файлов.
	// 
	// Поэтому количество файлов не должно превышать 2500
	//
	// Ранее (до 01.06.2017) было 99 файлов согласно
	// Приложение к приказу  ФНС  России от  «28» ноября 2016 г. №  ММВ-7-6/643@
	
	Возврат 2500;
	
КонецФункции

Функция МаксимальнойКоличествоФайловВПисьме() Экспорт
	
	// КНД="1166102"
	// Приказ ФНС России от 13.06.2013 N ММВ-7-6/196@
	// Количество направленных файлов	КолФайл	A	N(2)	О
	// 
	// Разрядность 2, поэтому количество файлов не должно превышать 99
	// 
	Возврат 99;
	
КонецФункции

Функция СвойстваПодписиДляШтампа() Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ДвДанные",    Неопределено);
	ДополнительныеПараметры.Вставить("ТранспортноеСообщение", Неопределено);
	ДополнительныеПараметры.Вставить("ЭтоАбонент",  Ложь);
	ДополнительныеПараметры.Вставить("ЭтоСерверДО", Ложь);
	ДополнительныеПараметры.Вставить("ЭтоФНС",      Ложь);
	ДополнительныеПараметры.Вставить("ЭтоПФР",      Ложь);
	ДополнительныеПараметры.Вставить("ЭтоФСГС",     Ложь);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

#Область ПечатьПояснения

Функция ТабличныеЧастиПояснения(ДобавлятьКС = Ложь) Экспорт
	
	ТЧ = Новый Массив;
	ТЧ.Добавить("КнигаПокупок");
	ТЧ.Добавить("КнигаПокупокДл");
	ТЧ.Добавить("КнигаПродаж");
	ТЧ.Добавить("КнигаПродажДл");
	ТЧ.Добавить("ЖурналУчетаВыставленныхСчетовФактур");
	ТЧ.Добавить("ЖурналУчетаПолученныхСчетовФактур");
	ТЧ.Добавить("ВыставленныеСчетаФактурыНеплательщиковНДС");
	ТЧ.Добавить("НетКнигаПрод");
	
	Если ДобавлятьКС Тогда
		ТЧ.Добавить("СведКС");
	КонецЕсли;
	
	Возврат ТЧ;
	
КонецФункции

Функция ПредставлениеСчетаФактурыПояснения(СтрокаТаблицы, ТипРеквизитов) Экспорт
	
	РеквизитыКоррСчетаФактуры = "";
	Если ЗначениеЗаполнено(СтрокаТаблицы["НомерКорректировочногоСчетаФактуры"+ТипРеквизитов]) Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицы["НомерИсправленияКорректировочногоСчетаФактуры"+ТипРеквизитов]) Тогда
			РеквизитыКоррСчетаФактуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Корр. %1 от %2 (испр.%3 от %4) по с/ф '"),
									СтрокаТаблицы["НомерКорректировочногоСчетаФактуры"+ТипРеквизитов],
									Формат(СтрокаТаблицы["ДатаКорректировочногоСчетаФактуры"+ТипРеквизитов], "ДЛФ=D"),
									СтрокаТаблицы["НомерИсправленияКорректировочногоСчетаФактуры"+ТипРеквизитов],
									Формат(СтрокаТаблицы["ДатаИсправленияКорректировочногоСчетаФактуры"+ТипРеквизитов], "ДЛФ=D"));
		Иначе
			РеквизитыКоррСчетаФактуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Корр. %1 от %2 по с/ф '"),
									СтрокаТаблицы["НомерКорректировочногоСчетаФактуры"+ТипРеквизитов],
									Формат(СтрокаТаблицы["ДатаКорректировочногоСчетаФактуры"+ТипРеквизитов], "ДЛФ=D"));
		КонецЕсли;
	КонецЕсли;
	РеквизитыСчетаФактуры = "";
	Если ЗначениеЗаполнено(СтрокаТаблицы["НомерСчетаФактуры"+ТипРеквизитов]) Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицы["НомерИсправленияСчетаФактуры"+ТипРеквизитов]) Тогда
			РеквизитыСчетаФактуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '%1 от %2(испр.%3 от %4)'"),
									СтрокаТаблицы["НомерСчетаФактуры"+ТипРеквизитов],
									Формат(СтрокаТаблицы["ДатаСчетаФактуры"+ТипРеквизитов], "ДЛФ=D"),
									СтрокаТаблицы["НомерИсправленияСчетаФактуры"+ТипРеквизитов],
									Формат(СтрокаТаблицы["ДатаИсправленияСчетаФактуры"+ТипРеквизитов], "ДЛФ=D"));
		Иначе
			РеквизитыСчетаФактуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '%1 от %2'"),
									СтрокаТаблицы["НомерСчетаФактуры"+ТипРеквизитов],
									Формат(СтрокаТаблицы["ДатаСчетаФактуры"+ТипРеквизитов], "ДЛФ=D"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																НСтр("ru = '%1%2'"), РеквизитыКоррСчетаФактуры, РеквизитыСчетаФактуры);
	
КонецФункции
															
Функция ПредставлениеПоСпискуСтрок(СписокСтрок) Экспорт
	
	Представление = "";
	Для Каждого Строка Из СписокСтрок Цикл
		Если ЗначениеЗаполнено(Представление) Тогда
			Представление = Представление + "; ";
		КонецЕсли;
		Представление = Представление + Строка.Представление;
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции															

#КонецОбласти

Функция ВладелецТикета() Экспорт

	Возврат "1C-Reporting";

КонецФункции

#Область Получение_нового_шаблона_ФСГС

// Вызывается после расшифровки и распаковки нового шаблона форм из Росстата
//
// Параметры:
//  ПараметрыШаблона  - Структура, содержит данные входящего шаблона в ключах:
//  	* АдресФайла - Адрес двоичных данных XML шаблона во временном хранилище
//  	* ИмяФайла - Исходное имя файла шаблона
//
Процедура ПриПолученииНовогоШаблонаФСГС(Знач ПараметрыШаблона) Экспорт
	РегламентированнаяОтчетностьВызовСервера.ПриПолученииНовогоШаблонаФСГС(ПараметрыШаблона);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаявлениеОНазначенииПенсии

Процедура ОбработкаПроверкиЗаполненияЗаявленияОНазначенииПенсии(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СведенияКорректны = Истина;
	ШапкаУказанаКорректно(Форма, СведенияКорректны, Истина);
	Если НЕ СведенияКорректны Тогда
		// Текст сообщения выведен внутри
		Отказ = Истина;
	КонецЕсли;
	
	СведенияКорректны = Истина;
	СведенияВидаПенсииУказаныКорректно(Форма, СведенияКорректны, Ложь);
	Если НЕ СведенияКорректны Тогда
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заполните обязательные реквизиты раздела ""Вид пенсии""'"),,"УказательВидПенсии");
		#Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните обязательные реквизиты раздела ""Вид пенсии""'"),,"УказательВидПенсии");
		#КонецЕсли
		Отказ = Истина;
	КонецЕсли;
	
	СведенияКорректны = Истина;
	СведенияОПолучателеУказаныКорректно(Форма, СведенияКорректны, Ложь);
	Если НЕ СведенияКорректны Тогда
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заполните обязательные реквизиты раздела ""Паспорт, контакты""'"),,"УказательСведенияОПолучателе");
		#Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните обязательные реквизиты раздела ""Паспорт, контакты""'"),,"УказательСведенияОПолучателе");
		#КонецЕсли
		Отказ = Истина;
	КонецЕсли;
	
	СведенияКорректны = Истина;
	ДопСведенияУказаныКорректно(Форма, СведенияКорректны, Ложь);
	Если НЕ СведенияКорректны Тогда
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заполните обязательные реквизиты раздела ""Начисление пенсии""'"),,"УказательДопСведения");
		#Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните обязательные реквизиты раздела ""Начисление пенсии""'"),,"УказательДопСведения");
		#КонецЕсли
		Отказ = Истина;
	КонецЕсли;	
	
	СведенияКорректны = Истина;
	ПредставительУказанКорректно(Форма, СведенияКорректны, Ложь);
	Если НЕ СведенияКорректны Тогда
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заполните обязательные реквизиты раздела ""Представитель""'"),,"Объект.ЕстьПредставитель");
		#Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните обязательные реквизиты раздела ""Представитель""'"),,"Объект.ЕстьПредставитель");
		#КонецЕсли
		Отказ = Истина;
	КонецЕсли;
	
	СведенияКорректны = Истина;
	СпособПолученияУказанКорректно(Форма, СведенияКорректны, Ложь);
	Если НЕ СведенияКорректны Тогда
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заполните обязательные реквизиты раздела ""Cпособ получения""'"),,"УказательСпособПолучения");
		#Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните обязательные реквизиты раздела ""Cпособ получения""'"),,"УказательСпособПолучения");
		#КонецЕсли
		Отказ = Истина;
	КонецЕсли;
	
	СведенияКорректны = Истина;
	ПроверитьЭлектронныйПочтуПолучателя(Форма, СведенияКорректны, Истина);
	Если НЕ СведенияКорректны Тогда
		// Текст сообщения выведен внутри
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ШапкаУказанаКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт

	РезультатПроверкиРеквизитов = Новый Массив;
	ТекстОшибки = "";
	
	ПроверитьНаПустое(
		РезультатПроверкиРеквизитов, 
		Форма, 
		"Организация", 
		НСтр("ru = 'От кого'"),
		"Объект.Организация");
		
	ПроверитьНаПустое(
		РезультатПроверкиРеквизитов, 
		Форма, 
		"Получатель", 
		НСтр("ru = 'Кому'"),
		"Объект.Получатель");
		
	ПроверитьНаПустое(
		РезультатПроверкиРеквизитов, 
		Форма, 
		"Фамилия", 
		НСтр("ru = 'Фамилия получателя пенсии'"),
		"Объект.Сотрудник");
		
	ПроверитьНаПустое(
		РезультатПроверкиРеквизитов, 
		Форма, 
		"Имя", 
		НСтр("ru = 'Имя получателя пенсии'"),
		"Объект.Сотрудник");
		
	ПроверитьНаПустое(
		РезультатПроверкиРеквизитов, 
		Форма, 
		"Сотрудник", 
		НСтр("ru = 'Получатель пенсии'"),
		"Объект.Сотрудник");
		
	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;

КонецФункции

Функция ПроверитьЭлектронныйПочтуПолучателя(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт

	РезультатПроверкиРеквизитов = Новый Массив;
	ТекстОшибки = "";
	
	Если (Форма.КогоУведомлятьПочта = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Пенсионер") 
		ИЛИ Форма.КогоИнформироватьПочта = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Пенсионер")) Тогда
		
		ПроверитьПочту(РезультатПроверкиРеквизитов, Форма, "ЭлектроннаяПочта", НСтр("ru = 'Электронная почта получателя пенсии'"));
					
	КонецЕсли;
	
	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;

КонецФункции

Функция СпособПолученияУказанКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт

	РезультатПроверкиРеквизитов = Новый Массив;
	ТекстОшибки = "";
	
	Если Форма.ЭтоЗаявлениеОДоставкеПенсии Тогда
	
		КредитнаяОрганизация = ПредопределенноеЗначение("Перечисление.ВидыОрганизацийДоставкиПенсии.КредитнаяОрганизация");
		
		ПроверитьНаПустое(
			РезультатПроверкиРеквизитов, 
			Форма, 
			"ВидОрганизацийДоставкиПенсии", 
			НСтр("ru = 'Через'"));
			
		ПроверитьНаПустое(
			РезультатПроверкиРеквизитов, 
			Форма, 
			"НаименованиеОрганизацииДоставкиПенсии", 
			НСтр("ru = 'Наименование'"));
			
		ЭтоКредитнаяОрганизация = Форма.ВидОрганизацийДоставкиПенсии = КредитнаяОрганизация;
		Если ЭтоКредитнаяОрганизация Тогда
			ПроверитьНаПустое(
				РезультатПроверкиРеквизитов, 
				Форма, 
				"Счет", 
				НСтр("ru = 'Счет'"));
		Иначе
			ПроверитьНаПустое(
				РезультатПроверкиРеквизитов, 
				Форма, 
				"СпособПолученияПенсии", 
				НСтр("ru = 'Как'"));
		КонецЕсли;
		
		ПроверитьНаПустое(
			РезультатПроверкиРеквизитов, 
			Форма, 
			"ВидОрганизацийДоставкиПенсииДоЗаключенияДоговора", 
			НСтр("ru = 'Через (раздел ""До заключения договора"")'"));
			
		ПроверитьНаПустое(
			РезультатПроверкиРеквизитов, 
			Форма, 
			"НаименованиеОрганизацииДоставкиПенсииДоЗаключенияДоговора", 
			НСтр("ru = 'Наименование (раздел ""До заключения договора"")'"));
			
		ЭтоКредитнаяОрганизация = Форма.ВидОрганизацийДоставкиПенсииДоЗаключенияДоговора = КредитнаяОрганизация;
		
		Если ЭтоКредитнаяОрганизация Тогда
			
			ПроверитьНаПустое(
				РезультатПроверкиРеквизитов, 
				Форма, 
				"СчетДоЗаключенияДоговора", 
				НСтр("ru = 'Счет (раздел ""До заключения договора"")'"));
		Иначе
			ПроверитьНаПустое(
				РезультатПроверкиРеквизитов, 
				Форма, 
				"СпособПолученияПенсииДоЗаключенияДоговора", 
				НСтр("ru = 'Как (раздел ""До заключения договора"")'"));
		КонецЕсли;
			
	КонецЕсли;
		
	Если Форма.ЭтоЗаявлениеОНазначенииПенсии Тогда
		
		ПроверитьНаПустое(
			РезультатПроверкиРеквизитов, 
			Форма, 
			"КогоУведомлятьПочта", 
			НСтр("ru = 'О приеме (по эл. почте)'"));
			
		ПроверитьНаПустое(
			РезультатПроверкиРеквизитов, 
			Форма, 
			"КогоИнформироватьПочта", 
			НСтр("ru = 'О рассмотрении (по эл. почте)'"));
			
		ПроверитьНаПустое(
			РезультатПроверкиРеквизитов, 
			Форма, 
			"КогоИнформироватьТелефон", 
			НСтр("ru = 'О рассмотрении (по телефону)'"));
			
		СекретныйВопросИОтветУказаныКорректно(Форма, МастерДалее, ВыводитьСообщения);
		
	КонецЕсли;
	
	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;
	
КонецФункции
	
Функция ПредставительУказанКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт
	
	РезультатПроверкиРеквизитов = Новый Массив;
	ТекстОшибки = "";
	
	Если НЕ Форма.ЕстьПредставитель Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоОрганизация = Форма.ВидПредставителя = ПредопределенноеЗначение("Перечисление.ВидПредставителяПолучателяПенсии.Организация");
	
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ВидПредставителя", НСтр("ru = 'Представителем является'"));
	Если ЭтоОрганизация  Тогда
		ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительНаименованиеОрганизации", НСтр("ru = 'Наименование организации'"));
	КонецЕсли;
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительФамилия", НСтр("ru = 'Фамилия представителя'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительИмя", НСтр("ru = 'Имя представителя'"));
	
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительВидДокумента", 	НСтр("ru = 'Вид документа'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительСерияНомер", 	НСтр("ru = 'Серия, номер'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительКемВыдан", 		НСтр("ru = 'Кем выдан'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительДатаВыдачи", 	НСтр("ru = 'Дата выдачи'"));
	ПроверитьПочту(РезультатПроверкиРеквизитов, Форма, "ПредставительЭлектроннаяПочта", НСтр("ru = 'Электронная почта'"));
	ПроверитьТелефон(РезультатПроверкиРеквизитов,  Форма, "ПредставительТелефон",       НСтр("ru = 'Телефон'"));
	
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительНаименованиеДокумента", 	НСтр("ru = 'Наименование'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительПолномочияСерияНомер", 		НСтр("ru = 'Серия, номер'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительПолномочияКемВыдан", 		НСтр("ru = 'Кем выдан'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительПолномочияДатаВыдачи", 		НСтр("ru = 'Дата выдачи'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительПолномочияСрокДействия", 	НСтр("ru = 'Срок действия'"));
	
	// Проверяем, есть ли в доставке выбранные адреса, которые здесь не указаны
	ДоставлятьПредставителю = Форма.КомуДоставлятьПенсию = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Представитель");
	ДоставлятьПредставителюДоЗаключенияДоговора = Форма.КомуДоставлятьПенсиюДоЗаключенияДоговора = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Представитель");
	
	ВыбраноПоМестуЖительства = Форма.СпособПолученияПенсии = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуЖительства")
		И ДоставлятьПредставителю
		ИЛИ Форма.СпособПолученияПенсииДоЗаключенияДоговора = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуЖительства")
		И ДоставлятьПредставителюДоЗаключенияДоговора;
		
	ВыбраноПоМестуПребывания = Форма.СпособПолученияПенсии = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуПребывания")
		И ДоставлятьПредставителю
		ИЛИ Форма.СпособПолученияПенсииДоЗаключенияДоговора = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуПребывания")
		И ДоставлятьПредставителюДоЗаключенияДоговора;
	
	ВыбраноПоМестуФактическому = Форма.СпособПолученияПенсии = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуФактическому")
		И ДоставлятьПредставителю
		ИЛИ Форма.СпособПолученияПенсииДоЗаключенияДоговора = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуФактическому")
		И ДоставлятьПредставителюДоЗаключенияДоговора;
		
	ВыбраноПоМестонахождениюОрганизации = Форма.СпособПолученияПенсии = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестонахождениюОрганизации")
		И ДоставлятьПредставителю
		ИЛИ Форма.СпособПолученияПенсииДоЗаключенияДоговора = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестонахождениюОрганизации")
		И ДоставлятьПредставителюДоЗаключенияДоговора;
	
	Если Форма.ЭтоЗаявлениеОДоставкеПенсии
		И (ВыбраноПоМестуЖительства ИЛИ ВыбраноПоМестуПребывания ИЛИ ВыбраноПоМестуФактическому)Тогда
		
		Если ВыбраноПоМестуЖительства Тогда
			ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительАдресМестаЖительства", НСтр("ru = 'Место жительства'"));
		КонецЕсли;
		Если ВыбраноПоМестуПребывания Тогда
			ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительАдресМестаПребывания", НСтр("ru = 'Место пребывания'"));
		КонецЕсли;
		Если ВыбраноПоМестуФактическому Тогда
			ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительАдресФактический", НСтр("ru = 'Место факт. проживания'"));
		КонецЕсли;
		Если ВыбраноПоМестонахождениюОрганизации Тогда
			ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредставительАдресОрганизации", НСтр("ru = 'Место нахождения орг-ции'"));
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Форма.ПредставительАдресМестаЖительства)
			И НЕ ЗначениеЗаполнено(Форма.ПредставительАдресМестаПребывания)
			И НЕ ЗначениеЗаполнено(Форма.ПредставительАдресФактический)
			И НЕ ЗначениеЗаполнено(Форма.ПредставительАдресОрганизации) Тогда
			
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните хотя бы один из адресов'");
			РезультатПроверки.Пустой      = Истина;
			РезультатПроверки.Поле        = "МестоПроживания";
			
			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;
	
КонецФункции

Функция ДопСведенияУказаныКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт
	
	НачислениеПенсииУказаноКорректно(Форма, МастерДалее, ВыводитьСообщения);
	
	Если Форма.ЭтоЗаявлениеОНазначенииПенсии Тогда
		
		ДетиУказаныКорректно(Форма, МастерДалее, Ложь);
		Если НЕ МастерДалее И ВыводитьСообщения Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Проверьте корректность заполнения сведений о детях'"));
			#Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Проверьте корректность заполнения сведений о детях'"));
			#КонецЕсли
		КонецЕсли;
		
		ИнвалидыПожилыеУказаныКорректно(Форма, МастерДалее, Ложь);
		Если НЕ МастерДалее И ВыводитьСообщения Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Проверьте корректность заполнения сведений об инвалидах и пожилых'"));
			#Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Проверьте корректность заполнения сведений об инвалидах и пожилых'"));
			#КонецЕсли
		КонецЕсли;
		
		ВоеннаяСлужбаПоПризывуУказанаКорректно(Форма, МастерДалее, Ложь);
		Если НЕ МастерДалее И ВыводитьСообщения Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Проверьте корректность заполнения сведений военной службы по призыву'"));
			#Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Проверьте корректность заполнения сведений военной службы по призыву'"));
			#КонецЕсли
		КонецЕсли;
		
		ВоеннаяСлужбаУказаныКорректно(Форма, МастерДалее, Ложь);
		Если НЕ МастерДалее И ВыводитьСообщения Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Проверьте корректность заполнения сведений военной службы'"));
			#Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Проверьте корректность заполнения сведений военной службы'"));
			#КонецЕсли
		КонецЕсли;
		
		СведенияОПолучателеПенсииУказаныКорректно(Форма, МастерДалее, ВыводитьСообщения);
		
	КонецЕсли;
	
КонецФункции

Функция СтраховаяПенсияПоСтаростиИнвалидностиНакопительная() Экспорт
	
	ВидыПенсии = Новый Массив;
	ВидыПенсии.Добавить(ПредопределенноеЗначение("Перечисление.ВидПенсии.СтраховаяПенсияПоСтарости"));
	ВидыПенсии.Добавить(ПредопределенноеЗначение("Перечисление.ВидПенсии.СтраховаяПенсияПоИнвалидности"));
	ВидыПенсии.Добавить(ПредопределенноеЗначение("Перечисление.ВидПенсии.НакопительнаяПенсия"));
	
	Возврат ВидыПенсии;
	
КонецФункции

Функция ЭтоНакопительнаяПенсия(Форма) Экспорт
	
	ВидыПенсии = Новый Массив;
	ВидыПенсии.Добавить(ПредопределенноеЗначение("Перечисление.ВидПенсии.НакопительнаяПенсия"));
	
	ОсновнойВидПенсииНужногоТипа = ВидыПенсии.Найти(Форма.ВидПенсииОсновной) <> Неопределено;
	ВторойВидПенсииНужногоТипа   = ВидыПенсии.Найти(Форма.ВидПенсииВторой) <> Неопределено;
	НовыйВидПенсииНужногоТипа    = ВидыПенсии.Найти(Форма.НовыйВидПенсии) <> Неопределено;

	Возврат ОсновнойВидПенсииНужногоТипа ИЛИ ВторойВидПенсииНужногоТипа ИЛИ НовыйВидПенсииНужногоТипа;
	
КонецФункции

Функция ЭтоСтраховаяПенсияПоСтаростиИнвалидностиНакопительная(Форма) Экспорт
	
	ВидыПенсии = СтраховаяПенсияПоСтаростиИнвалидностиНакопительная();
	
	ОсновнойВидПенсииНужногоТипа = ВидыПенсии.Найти(Форма.ВидПенсииОсновной) <> Неопределено;
	ВторойВидПенсииНужногоТипа   = ВидыПенсии.Найти(Форма.ВидПенсииВторой) <> Неопределено;
	НовыйВидПенсииНужногоТипа    = ВидыПенсии.Найти(Форма.НовыйВидПенсии) <> Неопределено;

	Возврат ОсновнойВидПенсииНужногоТипа ИЛИ ВторойВидПенсииНужногоТипа ИЛИ НовыйВидПенсииНужногоТипа;
	
КонецФункции

Функция ЭтоСтраховаяПенсияПоСтаростиНакопительная(Форма) Экспорт
	
	ВидыПенсии = Новый Массив;
	ВидыПенсии.Добавить(ПредопределенноеЗначение("Перечисление.ВидПенсии.СтраховаяПенсияПоСтарости"));
	ВидыПенсии.Добавить(ПредопределенноеЗначение("Перечисление.ВидПенсии.НакопительнаяПенсия"));

	ОсновнойВидПенсииНужногоТипа = ВидыПенсии.Найти(Форма.ВидПенсииОсновной) <> Неопределено;
	ВторойВидПенсииНужногоТипа   = ВидыПенсии.Найти(Форма.ВидПенсииВторой) <> Неопределено;
	НовыйВидПенсииНужногоТипа    = ВидыПенсии.Найти(Форма.НовыйВидПенсии) <> Неопределено;

	Возврат ОсновнойВидПенсииНужногоТипа ИЛИ ВторойВидПенсииНужногоТипа ИЛИ НовыйВидПенсииНужногоТипа;
	
КонецФункции

Функция ЭтоСоциальнаяПенсия(Форма) Экспорт
	
	ВидыПенсии = Новый Массив;
	ВидыПенсии.Добавить(ПредопределенноеЗначение("Перечисление.ВидПенсии.СоциальнаяПенсияПоСтарости"));
	ВидыПенсии.Добавить(ПредопределенноеЗначение("Перечисление.ВидПенсии.СоциальнаяПенсияПоИнвалидности"));
	ВидыПенсии.Добавить(ПредопределенноеЗначение("Перечисление.ВидПенсии.СоциальнаяПенсияПоСлучаюПотериКормильца"));

	ОсновнойВидПенсииНужногоТипа = ВидыПенсии.Найти(Форма.ВидПенсииОсновной) <> Неопределено;
	ВторойВидПенсииНужногоТипа   = ВидыПенсии.Найти(Форма.ВидПенсииВторой) <> Неопределено;
	НовыйВидПенсииНужногоТипа    = ВидыПенсии.Найти(Форма.НовыйВидПенсии) <> Неопределено;

	Возврат ОсновнойВидПенсииНужногоТипа ИЛИ ВторойВидПенсииНужногоТипа ИЛИ НовыйВидПенсииНужногоТипа;
	
КонецФункции

Функция НачислениеПенсииУказаноКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт
	
	РезультатПроверкиРеквизитов = Новый Массив;
	ТекстОшибки = "";
	
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ДатаВыходаНаПенсию", НСтр("ru = 'Дата выхода на пенсию'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ОрганПФРПоМестуНазначенияПенсии", НСтр("ru = 'ПФР по месту назначения пенсии'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "Стаж", НСтр("ru = 'Пенсия начисляется'"));
	
	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;
	
КонецФункции

Функция ДетиУказаныКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт
	
	Проверять = ЭтоСтраховаяПенсияПоСтаростиИнвалидностиНакопительная(Форма);
	
	Если Проверять Тогда
		
		РезультатПроверкиРеквизитов = Новый Массив;
		ТекстОшибки = "";
		
		Для каждого СтрокаРебенка Из Форма.Дети Цикл
			
			ИндексСтроки = Форма.Дети.Индекс(СтрокаРебенка);
			НомерСтроки  = Строка(ИндексСтроки + 1);
			
			// ФИО
			Если НЕ ЗначениеЗаполнено(СтрокаРебенка.ФИО) Тогда
				
				Поле = СтрШаблон("Дети[%1].ФИО", ИндексСтроки); 
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.Поле = Поле;
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните ФИО ребенка в строке '") + НомерСтроки;
				РезультатПроверки.Пустой	  = Истина;
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
				
			КонецЕсли;
			
			// Дата рождения
			Если НЕ ЗначениеЗаполнено(СтрокаРебенка.ДатаРождения) Тогда
				
				Поле = СтрШаблон("Дети[%1].ДатаРождения", ИндексСтроки); 
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.Поле = Поле;
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните дату рождения ребенка в строке '") + НомерСтроки;
				РезультатПроверки.Пустой	  = Истина;
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
				
			КонецЕсли;
			
			// СНИЛС
			СНИЛСБезРазделителей = СНИЛСБезРазделителей(СтрокаРебенка.СНИЛС);
			
			Поле = СтрШаблон("Дети[%1].СНИЛС", ИндексСтроки); 
			
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.Поле = Поле;
			
			Если НЕ ПустаяСтрока(СНИЛСБезРазделителей) Тогда
				
				Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(СтрокаРебенка.СНИЛС) Тогда
    				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС в строке %1. Не соответствует маске ХХХ-ХХХ-ХХХ ХХ, где X - любая цифра'");
					РезультатПроверки.ТекстОшибки = СтрШаблон(РезультатПроверки.ТекстОшибки, НомерСтроки);
    			ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(СтрокаРебенка.СНИЛС, Ложь, Истина) Тогда
    				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС в строке %1. Не сошлось контрольное число (СНИЛС не существует)'");
					РезультатПроверки.ТекстОшибки = СтрШаблон(РезультатПроверки.ТекстОшибки, НомерСтроки);
    			КонецЕсли;
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
				
			КонецЕсли;
			
		КонецЦикла; 

		Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
			ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция ВоеннаяСлужбаПоПризывуУказанаКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт
	
	Проверять = Форма.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской")
		И ЭтоСтраховаяПенсияПоСтаростиИнвалидностиНакопительная(Форма);
	
	Если Проверять Тогда
		
		РезультатПроверкиРеквизитов = Новый Массив;
		
		Если ЗначениеЗаполнено(Форма.ВоеннаяСлужбаПоПризывуНачало) Тогда
			ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ВоеннаяСлужбаПоПризывуОкончание", НСтр("ru = 'Дата окончания службы по призыву'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ВоеннаяСлужбаПоПризывуОкончание) Тогда
			ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ВоеннаяСлужбаПоПризывуНачало", НСтр("ru = 'Дата начала службы по призыву'"));
		КонецЕсли;
		
		Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
			ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция СекретныйВопросИОтветУказаныКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт
	
	РезультатПроверкиРеквизитов = Новый Массив;
	
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "СекретныйВопрос", НСтр("ru = 'Секретный вопрос'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ОтветНаСекретныйВопрос", НСтр("ru = 'Ответ на вопрос'"));
	
	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;

КонецФункции

Функция ЭтоСтраховаяПенсияПоПотереКормильца(Ссылка) Экспорт
	
	Возврат Ссылка.ВидПенсииОсновной = ПредопределенноеЗначение("Перечисление.ВидПенсии.СтраховаяПенсияПоПотереКормильца")
		ИЛИ Ссылка.ВидПенсииВторой = ПредопределенноеЗначение("Перечисление.ВидПенсии.СтраховаяПенсияПоПотереКормильца")
		ИЛИ Ссылка.НовыйВидПенсии = ПредопределенноеЗначение("Перечисление.ВидПенсии.СтраховаяПенсияПоПотереКормильца")

КонецФункции
	
Функция СведенияОПолучателеПенсииУказаныКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт
	
	РезультатПроверкиРеквизитов = Новый Массив;
	
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПолучаетПенсиюДругогоГосударства", НСтр("ru = 'Получает пенсию другого государства'"));
	Если Форма.ПолучаетПенсиюДругогоГосударства = ПредопределенноеЗначение("Перечисление.ОтветыНаВопросыОПенсии.Да") Тогда
		ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "СтранаВыплачивающаяПенсию", НСтр("ru = 'Государство, выплачивающее пенсию'"));
	КонецЕсли;
	
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПолучаетПенсиюПоФЗ4468_1", НСтр("ru = 'Получает пенсию по ФЗ РФ № 4468-1'"));
	Если Форма.ПолучаетПенсиюПоФЗ4468_1 = ПредопределенноеЗначение("Перечисление.ОтветыНаВопросыОПенсии.Да") Тогда
		ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ВидПенсииПоФЗ4468_1", НСтр("ru = 'Вид пенсии'"));
	КонецЕсли;
	Если Форма.ПолучаетПенсиюПоФЗ4468_1 = ПредопределенноеЗначение("Перечисление.ОтветыНаВопросыОПенсии.ДаВПрошлом") Тогда
		ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ОрганВыплачивающийПенсию", НСтр("ru = 'Орган, выплачивающий пенсию'"));
	КонецЕсли;
	
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПолучаетПенсиюПоФЗ3132_1", НСтр("ru = 'Получает содержание по ФЗ РФ № 3132-1'"));
	
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоСтраховаяПенсияПоСтаростиНакопительная(Форма) Тогда
		ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ЗамещаетГосударственнуюДолжность", НСтр("ru = 'Замещает государственную должность'"));
	КонецЕсли;
	
	// Сведения об умершем кормильце
	Если ЭтоСтраховаяПенсияПоПотереКормильца(Форма) Тогда
		
		ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "УмершийКормилецПолучалПенсиюДругогоГосударства", НСтр("ru = 'Умерший кормилец получает пенсию другого государства'"));
		Если Форма.УмершийКормилецПолучалПенсиюДругогоГосударства = ПредопределенноеЗначение("Перечисление.ОтветыНаВопросыОПенсии.Да") Тогда
			ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "СтранаВыплачивающаяПенсиюУмершемуКормильцу", НСтр("ru = 'Государство, выплачивающее пенсию умершему кормилецу'"));
		КонецЕсли;
		
		ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "УмершийКормилецПолучаетПенсиюПоФЗ4468_1", НСтр("ru = 'Умерший кормилец получал пенсию по ФЗ РФ № 4468-1'"));
		Если Форма.УмершийКормилецПолучаетПенсиюПоФЗ4468_1 = ПредопределенноеЗначение("Перечисление.ОтветыНаВопросыОПенсии.ДаВПрошлом") Тогда
			ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ОрганВыплачивающийПенсиюУмершемуКормильцу", НСтр("ru = 'Орган, выплачивавший пенсию умершему кормильцу'"));
		КонецЕсли;
		
		ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "УмершийКормилецПолучаетПенсиюПоФЗ3132_1", НСтр("ru = 'Умерший кормилец получал содержание по ФЗ РФ № 3132-1'"));
		Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоСтраховаяПенсияПоСтаростиНакопительная(Форма) Тогда
			ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "УмершийКормилецЗамещалГосударственнуюДолжность", НСтр("ru = 'Умерший кормилец замещает государственную должность'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;

КонецФункции

Функция ВоеннаяСлужбаУказаныКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт
	
	Проверять = ЭтоСтраховаяПенсияПоСтаростиИнвалидностиНакопительная(Форма);
	
	Если Проверять Тогда
		
		РезультатПроверкиРеквизитов = Новый Массив;
		ТекстОшибки = "";
		
		Для каждого СтрокаВоеннаяСлужба Из Форма.ВоеннаяСлужба Цикл
			
			ИндексСтроки = Форма.ВоеннаяСлужба.Индекс(СтрокаВоеннаяСлужба);
			НомерСтроки  = Строка(ИндексСтроки + 1);
			
			// ДатаНачала
			Если ЗначениеЗаполнено(СтрокаВоеннаяСлужба.ДатаОкончания) И НЕ ЗначениеЗаполнено(СтрокаВоеннаяСлужба.ДатаНачала)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаВоеннаяСлужба.ДатаОкончания) И НЕ ЗначениеЗаполнено(СтрокаВоеннаяСлужба.ДатаНачала) Тогда
				
				Поле = СтрШаблон("Дети[%1].ДатаНачала", ИндексСтроки); 
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.Поле = Поле;
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните дату начала службы в строке '") + НомерСтроки;
				РезультатПроверки.Пустой	  = Истина;
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
				
			КонецЕсли;
			
			// ДатаОкончания
			Если ЗначениеЗаполнено(СтрокаВоеннаяСлужба.ДатаНачала) И НЕ ЗначениеЗаполнено(СтрокаВоеннаяСлужба.ДатаОкончания)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаВоеннаяСлужба.ДатаОкончания) И НЕ ЗначениеЗаполнено(СтрокаВоеннаяСлужба.ДатаНачала) Тогда
				
				Поле = СтрШаблон("Дети[%1].ДатаОкончания", ИндексСтроки); 
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.Поле = Поле;
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните дату окончания службы в строке '") + НомерСтроки;
				РезультатПроверки.Пустой	  = Истина;
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаВоеннаяСлужба.ДатаНачала) 
				И СтрокаВоеннаяСлужба.ДатаНачала > СтрокаВоеннаяСлужба.ДатаОкончания Тогда
				
				Поле = СтрШаблон("Дети[%1].ДатаОкончания", ИндексСтроки); 
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.Поле = Поле;
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Дата окончания службы меньше даты начала в строке '") + НомерСтроки;
				РезультатПроверки.Пустой	  = Истина;
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
			КонецЕсли;
			
		КонецЦикла; 

		Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
			ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция ИнвалидыПожилыеУказаныКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт
	
    Проверять = ЭтоСтраховаяПенсияПоСтаростиИнвалидностиНакопительная(Форма);
    
    Если Проверять Тогда
    	
    	РезультатПроверкиРеквизитов = Новый Массив;
    	ТекстОшибки = "";
    	
    	Для каждого СтрокаИнвалидыПожилые Из Форма.ИнвалидыПожилые Цикл
    		
    		ИндексСтроки = Форма.ИнвалидыПожилые.Индекс(СтрокаИнвалидыПожилые);
			НомерСтроки  = Строка(ИндексСтроки + 1);
    		
    		// ФИО
    		Если НЕ ЗначениеЗаполнено(СтрокаИнвалидыПожилые.ФИО) Тогда
    			
    			Поле = СтрШаблон("ИнвалидыПожилые[%1].ФИО", ИндексСтроки); 
    			
    			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
    			РезультатПроверки.Поле = Поле;
    			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните ФИО ребенка в строке '") + НомерСтроки;
    			РезультатПроверки.Пустой	  = Истина;
    			
    			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
    			
    		КонецЕсли;
    		
    		// СНИЛС
    		СНИЛСБезРазделителей = СНИЛСБезРазделителей(СтрокаИнвалидыПожилые.СНИЛС);
    		
    		Поле = СтрШаблон("ИнвалидыПожилые[%1].СНИЛС", ИндексСтроки); 
    		
    		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
    		РезультатПроверки.Поле = Поле;
    		
    		Если НЕ ПустаяСтрока(СНИЛСБезРазделителей) Тогда
    			
    			Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(СтрокаИнвалидыПожилые.СНИЛС) Тогда
    				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС в строке %1. Не соответствует маске ХХХ-ХХХ-ХХХ ХХ, где X - любая цифра'");
					РезультатПроверки.ТекстОшибки = СтрШаблон(РезультатПроверки.ТекстОшибки, НомерСтроки);
    			ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(СтрокаИнвалидыПожилые.СНИЛС, Ложь, Истина) Тогда
    				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС в строке %1. Не сошлось контрольное число (СНИЛС не существует)'");
					РезультатПроверки.ТекстОшибки = СтрШаблон(РезультатПроверки.ТекстОшибки, НомерСтроки);
    			КонецЕсли;
    			
    			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
    			
    		КонецЕсли;
			
			// Проверяем только дату начала
			// Дату окончания не проверяем, так как уход может продолжаться до настоящего момента
			Если НЕ ЗначениеЗаполнено(СтрокаИнвалидыПожилые.ДатаНачала) Тогда
				
				Поле = СтрШаблон("ИнвалидыПожилые[%1].ДатаНачала", ИндексСтроки); 
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.Поле = Поле;
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните дату начала ухода за инвалидом, пожилым в строке '") + НомерСтроки;
				РезультатПроверки.Пустой	  = Истина;
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
				
			КонецЕсли;
			
		КонецЦикла; 
		
    	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
    		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
    	КонецЦикла;
    	
    КонецЕсли;
	
КонецФункции

Функция СведенияВидаПенсииУказаныКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт
	
	РезультатПроверкиРеквизитов = Новый Массив;
	ТекстОшибки = "";

	Если НЕ Форма.ЭтоЗаявлениеОНазначенииПенсии Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Форма.Действие = ПредопределенноеЗначение("Перечисление.ДействиеВЗаявленииОНазначенииПенсии.ИзменитьВидПенсии") Тогда
		ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ПредыдущийВидПенсии", НСтр("ru = 'Предыдущий вид'"));
		ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "НовыйВидПенсии", НСтр("ru = 'Новый вид пенсии'"));
	Иначе
		Если НЕ ЗначениеЗаполнено(Форма.ВидПенсииОсновной) И НЕ ЗначениеЗаполнено(Форма.ВидПенсииВторой) Тогда
			ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ВидПенсииОсновной", НСтр("ru = 'Вид пенсии'"));
		КонецЕсли;
	КонецЕсли;
	
	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;
	
КонецФункции

Функция СведенияОПолучателеУказаныКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения) Экспорт
	
	РезультатПроверкиРеквизитов = Новый Массив;
	ТекстОшибки = "";
	
	ПроверитьТелефон(РезультатПроверкиРеквизитов, Форма, "Телефон", НСтр("ru = 'Телефон'"));
	
	Если ЗначениеЗаполнено(Форма.ЭлектроннаяПочта) Тогда
		ПроверитьПочту(РезультатПроверкиРеквизитов, Форма, "ЭлектроннаяПочта", НСтр("ru = 'Электронная почта'"));
	КонецЕсли;
	
	ПроверитьАдреса(РезультатПроверкиРеквизитов, Форма);
	ПроверитьУдостоверение(РезультатПроверкиРеквизитов, Форма);
	ПроверитьСНИЛС(РезультатПроверкиРеквизитов, Форма);
	
	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;
	
КонецФункции

Функция ПроверитьСНИЛС(РезультатПроверкиРеквизитов, Форма)
	
	СНИЛСБезРазделителей = СНИЛСБезРазделителей(Форма.СНИЛС);
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "СНИЛС";
	
	Если ПустаяСтрока(СНИЛСБезРазделителей) Тогда
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните СНИЛС владельца эл. подписи'");
		РезультатПроверки.Пустой	  = Истина;
	Иначе
		
		Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(Форма.СНИЛС) Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не соответствует маске ХХХ-ХХХ-ХХХ ХХ, где X - любая цифра'");
		ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(Форма.СНИЛС, Ложь, Истина) Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не сошлось контрольное число (СНИЛС не существует)'");
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
	
КонецФункции

Функция СНИЛСБезРазделителей(СНИЛС)

	СНИЛСТолькоЦифры = СтрЗаменить(СНИЛС, "-","");
	СНИЛСТолькоЦифры = СтрЗаменить(СНИЛСТолькоЦифры, " ","");
	
	Возврат СНИЛСТолькоЦифры;

КонецФункции

Функция ПроверитьУдостоверение(РезультатПроверкиРеквизитов, Форма)
	
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ВидДокумента", НСтр("ru = 'Вид документа'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "СерияНомер", НСтр("ru = 'Серия, номер'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "КемВыдан", НСтр("ru = 'Кем выдан'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "МестоРождения", НСтр("ru = 'Место рождения'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "Пол", НСтр("ru = 'Пол'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ДатаВыдачи", НСтр("ru = 'Дата выдачи'"));
	ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "ДатаРождения", НСтр("ru = 'Дата рождения'"));
	
КонецФункции

Функция ПроверитьТелефон(РезультатПроверкиРеквизитов, Форма, Поле, Представление)
	
	Если НЕ ЗначениеЗаполнено(ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(Форма[Поле])) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = СтрШаблон(НСтр("ru = 'Заполните поле ""%1""'"), Представление);
		РезультатПроверки.Пустой      = Истина;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	КонецЕсли;
	
КонецФункции

Функция ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, Поле, Представление, ПутьКРеквизиту = "")
	
	Если ЗначениеЗаполнено(Форма[Поле]) Тогда
		Возврат Истина;
	Иначе
		
		Если ПутьКРеквизиту = "" Тогда
			ПутьКРеквизиту = Поле;
		КонецЕсли;
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = СтрШаблон(НСтр("ru = 'Заполните поле ""%1""'"), Представление);
		РезультатПроверки.Пустой      = Истина;
		РезультатПроверки.Поле        = ПутьКРеквизиту;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ПроверитьАдреса(РезультатПроверкиРеквизитов, Форма)
	
	ЭтоИностранныйАдрес  = Форма.МестоПроживания = ПредопределенноеЗначение("Перечисление.МестоПроживанияПолучателяПенсии.ПроживаетЗаПределамиРФ");
	
	ДоставлятьПенсионеру = Форма.КомуДоставлятьПенсию = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Пенсионер");
	ДоставлятьПенсионеруДоЗаключенияДоговора = Форма.КомуДоставлятьПенсиюДоЗаключенияДоговора = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Пенсионер");
	
	Если ЗначениеЗаполнено(Форма.МестоПроживания) Тогда
		СпособыПолученияПенсии = Новый Массив;
		СпособыПолученияПенсии.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуЖительства"));
		СпособыПолученияПенсии.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуПребывания"));
		СпособыПолученияПенсии.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуФактическому"));
		
		// Ошибка будет когда указано доставлять на иностранный адрес, либо значение не заполнено
		ЕстьОшибка = ЭтоИностранныйАдрес И Форма.ЭтоЗаявлениеОДоставкеПенсии
			И (СпособыПолученияПенсии.Найти(Форма.СпособПолученияПенсии) <> Неопределено И ДоставлятьПенсионеру 
			ИЛИ СпособыПолученияПенсии.Найти(Форма.СпособПолученияПенсииДоЗаключенияДоговора) <> Неопределено И ДоставлятьПенсионеруДоЗаключенияДоговора);
			
		Если ЕстьОшибка Тогда
				
			ТекстОшибки = НСтр("ru = 'Не может быть указано значение ""Проживает за пределами РФ"", так как в разделе ""Получение, информирование"" может быть указан только российский адрес'"); 
	
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.ТекстОшибки = ТекстОшибки;
			РезультатПроверки.Поле        = "МестоПроживания";
			
			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		КонецЕсли;

	Иначе
		ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "МестоПроживания", НСтр("ru = 'Где проживает'"));
	КонецЕсли;
		
	// Проверяем, есть ли в доставке выбранные адреса, которые здесь не указаны
	ВыбраноПоМестуЖительства = НЕ ЭтоИностранныйАдрес 
		И ( Форма.СпособПолученияПенсии = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуЖительства")
		И ДоставлятьПенсионеру
		ИЛИ Форма.СпособПолученияПенсииДоЗаключенияДоговора = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуЖительства")
		И ДоставлятьПенсионеруДоЗаключенияДоговора);
		
	ВыбраноПоМестуПребывания = НЕ ЭтоИностранныйАдрес 
		И (Форма.СпособПолученияПенсии = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуПребывания")
		И ДоставлятьПенсионеру
		ИЛИ Форма.СпособПолученияПенсииДоЗаключенияДоговора = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуПребывания")
		И ДоставлятьПенсионеруДоЗаключенияДоговора);
	
	ВыбраноПоМестуФактическому = НЕ ЭтоИностранныйАдрес 
		И (Форма.СпособПолученияПенсии = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуФактическому")
		И ДоставлятьПенсионеру
		ИЛИ Форма.СпособПолученияПенсииДоЗаключенияДоговора = ПредопределенноеЗначение("Перечисление.СпособыПолученияПенсии.ПоМестуФактическому")
		И ДоставлятьПенсионеруДоЗаключенияДоговора);
		
	Если Форма.ЭтоЗаявлениеОДоставкеПенсии 
		И (ВыбраноПоМестуЖительства ИЛИ ВыбраноПоМестуПребывания ИЛИ ВыбраноПоМестуФактическому)Тогда
		
		Если ВыбраноПоМестуЖительства Тогда
			ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "АдресМестаЖительства", НСтр("ru = 'Адрес места жительства'"));
		КонецЕсли;
		Если ВыбраноПоМестуПребывания Тогда
			ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "АдресМестаПребывания", НСтр("ru = 'Адрес места пребывания'"));
		КонецЕсли;
		Если ВыбраноПоМестуФактическому Тогда
			ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, "АдресФактический", НСтр("ru = 'Адрес фактический'"));
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЭтоИностранныйАдрес
			И НЕ ЗначениеЗаполнено(Форма.АдресМестаЖительства)
			И НЕ ЗначениеЗаполнено(Форма.АдресМестаПребывания)
			И НЕ ЗначениеЗаполнено(Форма.АдресФактический)
			ИЛИ ЭтоИностранныйАдрес
			И НЕ ЗначениеЗаполнено(Форма.АдресЗаПределамиРФНаРусском)
			И НЕ ЗначениеЗаполнено(Форма.АдресЗаПределамиРФНаИностранном) Тогда
			
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните хотя бы один из адресов'");
			РезультатПроверки.Пустой      = Истина;
			РезультатПроверки.Поле        = "МестоПроживания";
			
			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПроверитьПочту(РезультатПроверкиРеквизитов, Форма, Поле, Представление)
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = Поле;
	
	Если ПроверитьНаПустое(РезультатПроверкиРеквизитов, Форма, Поле, Представление)
		И НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Форма[Поле]) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		Если НЕ СтрНайти(Форма[Поле], "@") Тогда
			РезультатПроверки.ТекстОшибки = 
				СтрШаблон(НСтр("ru = 'Некорректно заполнено поле ""%1"". Отсутствует символ @'"), Представление);
		Иначе 
			РезультатПроверки.ТекстОшибки = 
				СтрШаблон(НСтр("ru = 'Поле ""%1"" содержит некорректные сочетания символов'"), Представление);
		КонецЕсли;
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	КонецЕсли;	

КонецФункции

Функция ПредставлениеДетиИнвалиды(Таблица) Экспорт
	
	Количество    = Таблица.Количество();
	Представление = "";
	
	Если Количество = 0 Тогда
		Представление = НСтр("ru = 'Заполнить'");
	ИначеЕсли Количество = 1 Тогда
		Представление = Таблица[0].ФИО;
	ИначеЕсли Количество = 2 Тогда
		Представление = Таблица[0].ФИО + НСтр("ru = ' и '") + Таблица[1].ФИО;
	Иначе
		Представление = Таблица[0].ФИО + НСтр("ru = ' и еще '") + Строка(Количество - 1);
	КонецЕсли;
		
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеВоеннаяСлужба(Таблица) Экспорт
	
	Количество    = Таблица.Количество();
	Представление = "";
	
	Если Количество = 0 Тогда
		Представление = НСтр("ru = 'Заполнить'");
	ИначеЕсли Количество = 1 Тогда
		
		Первый = ПредставлениеПериода(Таблица[0].ДатаНачала, КонецДня(Таблица[0].ДатаОкончания));
		Представление = Первый;
		
		Если Количество = 2 Тогда
			
			Второй = ПредставлениеПериода(Таблица[0].ДатаНачала, КонецДня(Таблица[0].ДатаОкончания));
			Представление = Первый + НСтр("ru = ' и '") + Второй;
			
		ИначеЕсли Количество > 2 Тогда
			
			Представление = Первый + НСтр("ru = ' и еще '") + Строка(Количество - 1);
			
		КонецЕсли;
			
	КонецЕсли;
		
	Возврат Представление;
	
КонецФункции

Функция ВоеннаяСлужбаПредставление(Таблица) Экспорт
	
	Количество    = Таблица.Количество();
	Представление = "";
	
	Если Количество = 0 Тогда
		Представление = НСтр("ru = 'Заполнить'");
	Иначе
		
		ПервыйИнтервал = Таблица[0].ДатаНачала + " - " + Таблица[0].ДатаОкончания;
		Если Количество = 1 Тогда
			Представление = ПервыйИнтервал;
		Иначе
			
			Если Количество = 2 Тогда
				ВторойИнтервал = Таблица[1].ДатаНачала + " - " + Таблица[1].ДатаОкончания;
				Представление = ПервыйИнтервал + НСтр("ru = ' и '") + ВторойИнтервал;
			Иначе
				Представление = ПервыйИнтервал + НСтр("ru = ' и еще '") + Строка(Количество - 1);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
		
	Возврат Представление;
	
КонецФункции

Функция ВидДокументаВложения() Экспорт
	
	Возврат НСтр("ru = 'Вложения'");
	
КонецФункции

Функция ВидДокументаЗаявлениеОДоставке() Экспорт
	
	Возврат НСтр("ru = 'Заявление о доставке'");
	
КонецФункции

Функция ВидДокументаЗаявлениеОНазначении() Экспорт
	
	Возврат НСтр("ru = 'Заявление о назначении'");
	
КонецФункции

Функция ВидДокументаПоНазначению(Назначение) Экспорт
	
	Если Назначение = "Вложения" Тогда
		Возврат ВидДокументаВложения();
	ИначеЕсли Назначение = "ЗаявлениеОДоставке" Тогда
		Возврат ВидДокументаЗаявлениеОДоставке();
	ИначеЕсли Назначение = "ЗаявлениеОНазначении" Тогда
		Возврат ВидДокументаЗаявлениеОНазначении();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЭДО

Процедура ОтборВидДокументаФНСПриИзменении(Форма) Экспорт
	
	СписокОтбор = Форма.Список.Отбор;
	
	Если ЗначениеЗаполнено(Форма.ОтборВидДокументаФНС) Тогда
		
		ВидСравненияОтбора = Неопределено;
		
		Если Форма.ОтборВидДокументаФНС = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.Договор") Тогда
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
 	        ОтборПоВидуДокументаФНС = Новый Массив;
		    ОтборПоВидуДокументаФНС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.Договор"));
			ОтборПоВидуДокументаФНС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.ДополнениеКДоговору"));
			ОтборПоВидуДокументаФНС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.СпецификацияЦены"));
	    ИначеЕсли Форма.ОтборВидДокументаФНС = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация") Тогда
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
 	        ОтборПоВидуДокументаФНС = Новый Массив;
		    ОтборПоВидуДокументаФНС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация"));
			ОтборПоВидуДокументаФНС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации"));
		 ИначеЕсли Форма.ОтборВидДокументаФНС = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.СчетФактура") Тогда
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
 	        ОтборПоВидуДокументаФНС = Новый Массив;
		    ОтборПоВидуДокументаФНС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.СчетФактура"));
			ОтборПоВидуДокументаФНС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура"));
		Иначе
			ОтборПоВидуДокументаФНС = Форма.ОтборВидДокументаФНС;
		КонецЕсли;

		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.УстановитьОтборСписка(СписокОтбор, "ВидДокументаФНС", ОтборПоВидуДокументаФНС, ВидСравненияОтбора); 
		
	Иначе
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ОтключитьОтборСписка(СписокОтбор, "ВидДокументаФНС"); 
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтключитьОтборСписка(ОтборСписка, СтрокаЛевоеЗначение) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ОтборСписка, СтрокаЛевоеЗначение, , , , Ложь);
	
КонецПроцедуры

Процедура УстановитьОтборСписка(ОтборСписка, ИмяПоля, ПравоеЗначение, ВидСравненияОтбора = Неопределено) Экспорт
	
	Если ВидСравненияОтбора = Неопределено Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;

	МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборСписка, ИмяПоля);
	Если МассивЭлементов.Количество() = 0 Тогда
		ЭлементОтбора = ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборСписка, ИмяПоля, ВидСравненияОтбора);
	Иначе    
		ЭлементОтбора = МассивЭлементов[0];	
	КонецЕсли;
	
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияОтбора;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти