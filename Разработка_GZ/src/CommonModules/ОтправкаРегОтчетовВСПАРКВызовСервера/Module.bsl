
#Область ПрограммныйИнтерфейс

Процедура ЗаписатьСтатистикуОтправкиБухОтчетностиВСПАРК(Показатель) Экспорт

	//СтатистикаБРО.БухОтчетностьВСПАРК.СогласилисьСразу + 1
	//СтатистикаБРО.БухОтчетностьВСПАРК.ОтказалисьСразу + 1
	//СтатистикаБРО.БухОтчетностьВСПАРК.Передумали + 1
	//СтатистикаБРО.БухОтчетностьВСПАРК.ПревышеноПопыток + 1
	//СтатистикаБРО.БухОтчетностьВСПАРК.ОтказалисьПовторитьОтправкуПослеПревышеноПопыток + 1
	//СтатистикаБРО.БухОтчетностьВСПАРК.СогласилисьПовторитьОтправкуПослеПревышеноПопыток + 1
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		
		МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
		
		ИмяОперации = "СтатистикаБРО.БухОтчетностьВСПАРК." + Показатель;
		МодульЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяОперации, 1);
		
	КонецЕсли;
	
КонецПроцедуры

Функция КоличествоНеудачныхПопыток() Экспорт

	Возврат 20;

КонецФункции
 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОтчетыКоторыеНеУдаетсяОтправитьВСПАРК() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтчетыПереданныеВСПАРК.Отчет КАК Отчет
		|ИЗ
		|	РегистрСведений.ОтчетыПереданныеВСПАРК КАК ОтчетыПереданныеВСПАРК
		|ГДЕ
		|	ОтчетыПереданныеВСПАРК.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиВСПАРК.ВозниклаОшибка)
		|	И ОтчетыПереданныеВСПАРК.КоличествоНеудачныхПопыток >= &КоличествоНеудачныхПопыток";
	
	Запрос.УстановитьПараметр("КоличествоНеудачныхПопыток", ОтправкаРегОтчетовВСПАРКВызовСервера.КоличествоНеудачныхПопыток());
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("Отчет");
	
КонецФункции

Функция ОтчетКОтправкеВСПАРК() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтчетыПереданныеВСПАРК.Отчет КАК Отчет
		|ИЗ
		|	РегистрСведений.ОтчетыПереданныеВСПАРК КАК ОтчетыПереданныеВСПАРК
		|ГДЕ
		|	ОтчетыПереданныеВСПАРК.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиВСПАРК.ВозниклаОшибка)
		|	И ОтчетыПереданныеВСПАРК.КоличествоНеудачныхПопыток < &КоличествоНеудачныхПопыток";
	
	Запрос.УстановитьПараметр("КоличествоНеудачныхПопыток", ОтправкаРегОтчетовВСПАРКВызовСервера.КоличествоНеудачныхПопыток());
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("Отчет");
	
КонецФункции

Функция НачатьОтправкуОтчетовВСПАРКВФоне(ДопПараметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка отчетов в СПАРК'");
	ПараметрыВыполнения.ОжидатьЗавершение = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОтправкаРегОтчетовВСПАРК.ОтправкаОтчетовВСПАРКВФоне", 
		ДопПараметры, 
		ПараметрыВыполнения);

КонецФункции
	
Процедура ОтправитьОтчетВСПАРКПриНеобходимостиПоТранспортномуСообщениюСервер(ТранспортноеСообщение) Экспорт
	
	НеобходимоОтправить = ОтправкаРегОтчетовВСПАРК.ПроверитьНеобходимостьОтправитьВСПАРКПоТранспортномуСообщению(ТранспортноеСообщение);
	
	Если НеобходимоОтправить Тогда
		Результат = ОтправкаРегОтчетовВСПАРК.ОтправитьОтчетВСПАРКиЗаписатьСтатус(ТранспортноеСообщение.ЦиклОбмена.Предмет);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОтчетСПАРКВРегистр(
		СсылкаНаОтчет, 
		СтатусОтправки, 
		ОписаниеОшибки = "") Экспорт
		
	ОтправкаРегОтчетовВСПАРК.ЗаписатьОтчетСПАРКВРегистр(
		СсылкаНаОтчет, 
		СтатусОтправки, 
		ОписаниеОшибки);

КонецПроцедуры
	
#КонецОбласти