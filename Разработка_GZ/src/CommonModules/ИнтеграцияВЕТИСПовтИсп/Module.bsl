/////////////////////////////////////////////////////////////////////
//
// Кэшируемые серверные функции библиотеки ВетИС: 
//  * См наименования областей.
//

#Область ПрограммныйИнтерфейс

#Область Перекодировка

// Возвращает статус версионного объекта по коду
//
// Параметры:
//  Код - Число - код статуса
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыВерсионныхОбъектовВЕТИС - статус
//
Функция СтатусВерсионногоОбъекта(Код) Экспорт
	
	Статус = Неопределено;
	
	Если Код = 100 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Создан;
	ИначеЕсли Код = 101 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОперацииГашенияИмпорт;    // Гашение
	ИначеЕсли Код = 102 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОперацииГашения;          // Гашение
	ИначеЕсли Код = 103 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеПроизводственнойОперации; // Производство
	ИначеЕсли Код = 104 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданПоСправкеОБлагополучииНаМолочнойФерме;
	ИначеЕсли Код = 105 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОперацииСАрхивнойЗаписью;
	ИначеЕсли Код = 110 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОбъединения;              // Объединение записей журнала
	ИначеЕсли Код = 120 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеРазделения;
	ИначеЕсли Код = 200 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Изменен;
	ИначеЕсли Код = 201 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Аннулирован;
	ИначеЕсли Код = 202 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеОперацииСписания; // Инвентаризация (списание) или отгрузка
	ИначеЕсли Код = 203 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеРедактированияПроизводственнойОперации;
	ИначеЕсли Код = 204 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеВСЭ; // Добавлено заключение по ВСЭ с указанием цели, с которой можно или нельзя реализовывать продукцию.
	ИначеЕсли Код = 230 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединения;
	ИначеЕсли Код = 231 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединенияАвтоматически;
	ИначеЕсли Код = 240 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеОтделения;
	ИначеЕсли Код = 250 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ВосстановленПослеУдаления;
	ИначеЕсли Код = 300 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Перемещен;
	ИначеЕсли Код = 400 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Удален;
	ИначеЕсли Код = 410 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения;
	ИначеЕсли Код = 420 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеРазделения;
	ИначеЕсли Код = 430 Тогда
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеПрисоединения;
	Иначе
		Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ПустаяСсылка();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Неизвестный статус с кодом: %1'"),
				Код));
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

// Перекодирует роль предприятия ВетИС для обмена
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.РолиПредприятийВЕТИС - значение для перекодировки
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.РолиПредприятийВЕТИС - значение после перекодировки
//
Функция РольПредприятия(Знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		
		Если ЗначениеПоиска = "UNKNOWN" Тогда
			Возврат Перечисления.РолиПредприятийВЕТИС.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "PRODUCER" Тогда
			Возврат Перечисления.РолиПредприятийВЕТИС.Производитель;
		ИначеЕсли ЗначениеПоиска = "SLAUGHTER_HOUSE" Тогда
			Возврат Перечисления.РолиПредприятийВЕТИС.БойняМясокомбинат;
		ИначеЕсли ЗначениеПоиска = "CUTTING_PLANT" Тогда
			Возврат Перечисления.РолиПредприятийВЕТИС.РазделочноеПредприятие;
		ИначеЕсли ЗначениеПоиска = "COLD_STORE" Тогда
			Возврат Перечисления.РолиПредприятийВЕТИС.Холодильник;
		ИначеЕсли ЗначениеПоиска = "PACKAGING_PLANT" Тогда
			Возврат Перечисления.РолиПредприятийВЕТИС.УпаковочноеПредприятие;
		КонецЕсли;
		
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестная роль предприятия с кодом: %1'"),
				ЗначениеПоиска);
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ЗначениеПоиска) Тогда
			Возврат "UNKNOWN";
		ИначеЕсли ЗначениеПоиска = Перечисления.РолиПредприятийВЕТИС.Производитель Тогда
			Возврат "PRODUCER";
		ИначеЕсли ЗначениеПоиска = Перечисления.РолиПредприятийВЕТИС.БойняМясокомбинат Тогда
			Возврат "SLAUGHTER_HOUSE";
		ИначеЕсли ЗначениеПоиска = Перечисления.РолиПредприятийВЕТИС.РазделочноеПредприятие Тогда
			Возврат "CUTTING_PLANT";
		ИначеЕсли ЗначениеПоиска = Перечисления.РолиПредприятийВЕТИС.Холодильник Тогда
			Возврат "COLD_STORE";
		ИначеЕсли ЗначениеПоиска = Перечисления.РолиПредприятийВЕТИС.УпаковочноеПредприятие Тогда
			Возврат "PACKAGING_PLANT";
		КонецЕсли;
		
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестная роль предприятия: %1'"),
				ЗначениеПоиска);
		
	КонецЕсли;
	
КонецФункции

// Перекодирует статус предприятия ВетИС для обмена
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.СтатусыПредприятийВРеестреЦерберВЕТИС - значение для перекодировки
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.СтатусыПредприятийВРеестреЦерберВЕТИС - значение после перекодировки
//
Функция СтатусПредприятияВРеестре(Знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		
		Если ЗначениеПоиска = "UNVERIFIED" Тогда
			Возврат Перечисления.СтатусыПредприятийВРеестреЦерберВЕТИС.НеПодтвержден;
		ИначеЕсли ЗначениеПоиска = "VERIFIED" Тогда
			Возврат Перечисления.СтатусыПредприятийВРеестреЦерберВЕТИС.Подтвержден;
		ИначеЕсли ЗначениеПоиска = "CANCELED" Тогда
			Возврат Перечисления.СтатусыПредприятийВРеестреЦерберВЕТИС.ИсключенИзРеестра;
		ИначеЕсли ЗначениеПоиска = "DELETED" Тогда
			Возврат Перечисления.СтатусыПредприятийВРеестреЦерберВЕТИС.Удален;
		КонецЕсли;
		
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный статус предприятия в реестре Цербер: %1'"),
				ЗначениеПоиска);
		
	ИначеЕсли ЗначениеПоиска = Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Если ЗначениеПоиска = Перечисления.СтатусыПредприятийВРеестреЦерберВЕТИС.НеПодтвержден Тогда
			Возврат "UNVERIFIED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыПредприятийВРеестреЦерберВЕТИС.Подтвержден Тогда
			Возврат "VERIFIED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыПредприятийВРеестреЦерберВЕТИС.ИсключенИзРеестра Тогда
			Возврат "CANCELED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыПредприятийВРеестреЦерберВЕТИС.Удален Тогда
			Возврат "DELETED";
		КонецЕсли;
		
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный статус предприятия: %1'"),
				ЗначениеПоиска);
		
	КонецЕсли;
	
КонецФункции

// Возвращает тип предприятия ВетИС по коду
//
// Параметры:
//  Код - Число - код типа предприятия
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыПредприятийВЕТИС - тип предприятия
//
Функция ТипПредприятия(Код) Экспорт
	
	ТипПредприятия = Неопределено;
	
	Если Код = 1 Тогда
		ТипПредприятия = Перечисления.ТипыПредприятийВЕТИС.Предприятие;
	ИначеЕсли Код = 2 Тогда
		ТипПредприятия = Перечисления.ТипыПредприятийВЕТИС.Рынок;
	ИначеЕсли Код = 3 Тогда
		ТипПредприятия = Перечисления.ТипыПредприятийВЕТИС.СББЖ;
	ИначеЕсли Код = 4 Тогда
		ТипПредприятия = Перечисления.ТипыПредприятийВЕТИС.Судно;
	ИначеЕсли Код = Неопределено Тогда
		ТипПредприятия = Перечисления.ТипыПредприятийВЕТИС.ПустаяСсылка();
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип предприятия с кодом: %1'"),
				Код);
	КонецЕсли;
	
	Возврат ТипПредприятия;
	
КонецФункции

// Возвращает тип документа ВетИС по коду
//
// Параметры:
//  Код - Число - код типа документа
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыДокументовВЕТИС - тип документа
//
Функция ТипДокумента(Код) Экспорт
	
	Значение = Неопределено;
	
	Если Код = 1 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ТТН;
	ИначеЕсли Код = 2 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.Конасамент;
	ИначеЕсли Код = 3 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.CMR;
	ИначеЕсли Код = 4 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.Авианакладная;
	ИначеЕсли Код = 5 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ТранспортнаяНакладная;
	ИначеЕсли Код = 6 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.Торг12;
	ИначеЕсли Код = 7 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ВетеринарноеРазрешениеНаИмпортПродукцииНаТерриториюТС;
	ИначеЕсли Код = 8 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.РазрешениеВетеринарногоУправленияСубъектаСтраныТСНаВвозПродукции;
	ИначеЕсли Код = 9 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.АктОтбораПробыНаИсследование;
	ИначеЕсли Код = 10 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.Торг13;
	ИначеЕсли Код = 11 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ВетеринарныйСертификатНаПеремещениеВнутриРФ;
	ИначеЕсли Код = 12 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ВетеринарныйСертификатТретьихСтранНаВвозПродукцииНаТерриториюРФ;
	ИначеЕсли Код = 13 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ВетеринарныйСертификатСтраныТСНаВвозПродукцииНаТерриториюРФ;
	ИначеЕсли Код = 14 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ВетеринарныйСертификатРФНаВывозПродукцииНаТерриториюСтранТС;
	ИначеЕсли Код = 15 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ВетеринарныйСертификатРФНаВывозПродукцииНаТерриториюТретьихСтран;
	ИначеЕсли Код = 16 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.Заказ;
	ИначеЕсли Код = 17 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРФ;
	ИначеЕсли Код = 18 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ПаспортИностранногоГражданина;
	ИначеЕсли Код = 19 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРеспубликиКазахстан;
	ИначеЕсли Код = 20 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРеспубликиБеларусь;
	ИначеЕсли Код = 21 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРеспубликиАрмения;
	ИначеЕсли Код = 22 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРеспубликиКиргизия;
	ИначеЕсли Код = 23 Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.УПД;
	ИначеЕсли Код = Неопределено Тогда
		Значение = Перечисления.ТипыДокументовВЕТИС.ПустаяСсылка();
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип документа: %1'"),
				Код);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Возвращает код ВетИС по типу документа
//
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовВЕТИС - тип документа
// 
// Возвращаемое значение:
//  Число - код типа документа
//
Функция КодДокумента(ТипДокумента) Экспорт
	
	Код = Неопределено;
	
	Если ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ТТН Тогда
		Код = 1;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.Конасамент Тогда
		Код = 2;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.CMR Тогда
		Код = 3;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.Авианакладная Тогда
		Код = 4;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ТранспортнаяНакладная Тогда
		Код = 5;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.Торг12 Тогда
		Код = 6;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ВетеринарноеРазрешениеНаИмпортПродукцииНаТерриториюТС Тогда
		Код = 7;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.РазрешениеВетеринарногоУправленияСубъектаСтраныТСНаВвозПродукции Тогда
		Код = 8;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.АктОтбораПробыНаИсследование Тогда
		Код = 9;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.Торг13 Тогда
		Код = 10;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ВетеринарныйСертификатНаПеремещениеВнутриРФ Тогда
		Код = 11;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ВетеринарныйСертификатТретьихСтранНаВвозПродукцииНаТерриториюРФ Тогда
		Код = 12;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ВетеринарныйСертификатСтраныТСНаВвозПродукцииНаТерриториюРФ Тогда
		Код = 13;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ВетеринарныйСертификатРФНаВывозПродукцииНаТерриториюСтранТС Тогда
		Код = 14;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ВетеринарныйСертификатРФНаВывозПродукцииНаТерриториюТретьихСтран Тогда
		Код = 15;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.Заказ Тогда
		Код = 16;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРФ Тогда
		Код = 17;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ПаспортИностранногоГражданина Тогда
		Код = 18;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРеспубликиКазахстан Тогда
		Код = 19;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРеспубликиБеларусь Тогда
		Код = 20;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРеспубликиАрмения Тогда
		Код = 21;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРеспубликиКиргизия Тогда
		Код = 22;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовВЕТИС.УПД Тогда
		Код = 23;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип документа: %1'"), ТипДокумента);
	КонецЕсли;
	
	Возврат Код;
	
КонецФункции

// Перекодирует статус ветеринарно-сопроводительного документа ВетИС для обмена
//
// Параметры:
//  КодИлиЗначение - Строка, ПеречислениеСсылка.СтатусыВетеринарныхДокументовВЕТИС - значение для перекодировки
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.СтатусыВетеринарныхДокументовВЕТИС - значение после перекодировки
//
Функция СтатусВетеринарноСопроводительногоДокумента(КодИлиЗначение) Экспорт
	
	ЗначениеИлиКод = Неопределено;
	
	Если КодИлиЗначение = "CONFIRMED" Тогда
		ЗначениеИлиКод = Перечисления.СтатусыВетеринарныхДокументовВЕТИС.Оформлен;
	ИначеЕсли КодИлиЗначение = "WITHDRAWN" Тогда
		ЗначениеИлиКод = Перечисления.СтатусыВетеринарныхДокументовВЕТИС.Аннулирован;
	ИначеЕсли КодИлиЗначение = "UTILIZED" Тогда
		ЗначениеИлиКод = Перечисления.СтатусыВетеринарныхДокументовВЕТИС.Погашен;
	ИначеЕсли КодИлиЗначение = "FINALIZED" Тогда
		ЗначениеИлиКод = Перечисления.СтатусыВетеринарныхДокументовВЕТИС.Закрыт;
		
	ИначеЕсли КодИлиЗначение = Перечисления.СтатусыВетеринарныхДокументовВЕТИС.Оформлен Тогда
		ЗначениеИлиКод = "CONFIRMED";
	ИначеЕсли КодИлиЗначение = Перечисления.СтатусыВетеринарныхДокументовВЕТИС.Аннулирован Тогда
		ЗначениеИлиКод = "WITHDRAWN";
	ИначеЕсли КодИлиЗначение = Перечисления.СтатусыВетеринарныхДокументовВЕТИС.Погашен Тогда
		ЗначениеИлиКод = "UTILIZED";
	ИначеЕсли КодИлиЗначение = Перечисления.СтатусыВетеринарныхДокументовВЕТИС.Закрыт Тогда
		ЗначениеИлиКод = "FINALIZED";
		
	ИначеЕсли Не ЗначениеЗаполнено(КодИлиЗначение) Тогда
		ЗначениеИлиКод = Перечисления.СтатусыВетеринарныхДокументовВЕТИС.ПустаяСсылка();
		
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный статус ветеринарно-сопроводительного документа: %1'"),
				КодИлиЗначение);
	КонецЕсли;
	
	Возврат ЗначениеИлиКод;
	
КонецФункции

// Перекодирует тип ветеринарно-сопроводительного документа ВетИС для обмена
//
// Параметры:
//  КодИлиЗначение - Строка, ПеречислениеСсылка.ТипыВетеринарныхДокументовВЕТИС - значение для перекодировки
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ТипыВетеринарныхДокументовВЕТИС - значение после перекодировки
//
Функция ТипВетеринарноСопроводительногоДокумента(КодИлиЗначение) Экспорт
	
	ЗначениеИлиКод = Неопределено;
	
	Если КодИлиЗначение = "INCOMING" Тогда
		ЗначениеИлиКод = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Входящий;
	ИначеЕсли КодИлиЗначение = "OUTGOING" Тогда
		ЗначениеИлиКод = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Исходящий;
	ИначеЕсли КодИлиЗначение = "PRODUCTIVE" Тогда
		ЗначениеИлиКод = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Производственный;
	ИначеЕсли КодИлиЗначение = "RETURNABLE" Тогда
		ЗначениеИлиКод = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный;
	ИначеЕсли КодИлиЗначение = "TRANSPORT" Тогда
		ЗначениеИлиКод = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Транспортный;
	
	ИначеЕсли КодИлиЗначение = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Входящий Тогда
		ЗначениеИлиКод = "INCOMING";
	ИначеЕсли КодИлиЗначение = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Исходящий Тогда
		ЗначениеИлиКод = "OUTGOING";
	ИначеЕсли КодИлиЗначение = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Производственный Тогда
		ЗначениеИлиКод = "PRODUCTIVE";
	ИначеЕсли КодИлиЗначение = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный Тогда
		ЗначениеИлиКод = "RETURNABLE";
	ИначеЕсли КодИлиЗначение = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Транспортный Тогда
		ЗначениеИлиКод = "TRANSPORT";
	
	ИначеЕсли Не ЗначениеЗаполнено(КодИлиЗначение) Тогда
		ЗначениеИлиКод = Перечисления.ТипыВетеринарныхДокументовВЕТИС.ПустаяСсылка();
	
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип ветеринарно-сопроводительного документа: %1'"),
				КодИлиЗначение);
	КонецЕсли;
	
	Возврат ЗначениеИлиКод;
	
КонецФункции

// Возвращает форму ветеринарно-сопроводительного документа ВетИС по коду
//
// Параметры:
//  Код - Строка - код формы
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ФормыВетеринарныхДокументовВЕТИС - форма документа
//
Функция ФормаВетеринарноСопроводительногоДокумента(Код) Экспорт
	
	Значение = Неопределено;
	
	Если Код = "CERT5I" Тогда
		Значение = Перечисления.ФормыВетеринарныхДокументовВЕТИС.CERT5i;
	ИначеЕсли Код = "CERT61" Тогда
		Значение = Перечисления.ФормыВетеринарныхДокументовВЕТИС.CERT61;
	ИначеЕсли Код = "CERT62" Тогда
		Значение = Перечисления.ФормыВетеринарныхДокументовВЕТИС.CERT62;
	ИначеЕсли Код = "CERT63" Тогда
		Значение = Перечисления.ФормыВетеринарныхДокументовВЕТИС.CERT63;
	ИначеЕсли Код = "CERTCU1" Тогда
		Значение = Перечисления.ФормыВетеринарныхДокументовВЕТИС.CERTCU1;
	ИначеЕсли Код = "CERTCU2" Тогда
		Значение = Перечисления.ФормыВетеринарныхДокументовВЕТИС.CERTCU2;
	ИначеЕсли Код = "CERTCU3" Тогда
		Значение = Перечисления.ФормыВетеринарныхДокументовВЕТИС.CERTCU3;
	ИначеЕсли Код = "LIC1" Тогда
		Значение = Перечисления.ФормыВетеринарныхДокументовВЕТИС.LIC1;
	ИначеЕсли Код = "LIC2" Тогда
		Значение = Перечисления.ФормыВетеринарныхДокументовВЕТИС.LIC2;
	ИначеЕсли Код = "LIC3" Тогда
		Значение = Перечисления.ФормыВетеринарныхДокументовВЕТИС.LIC3;
	ИначеЕсли Код = "NOTE4" Тогда
		Значение = Перечисления.ФормыВетеринарныхДокументовВЕТИС.NOTE4;
	ИначеЕсли Код = "PRODUCTIVE" Тогда
		Значение = Перечисления.ФормыВетеринарныхДокументовВЕТИС.PRODUCTIVE;
	ИначеЕсли Код = Неопределено Тогда
		Значение = Перечисления.ФормыВетеринарныхДокументовВЕТИС.ПустаяСсылка();
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестная форма ветеринарно-сопроводительного документа: %1'"),
				Код);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Перекодирует период нахождения живых животных на территории ТС для обмена с ВетИС
//
// Параметры:
//  КодИлиЗначение - Строка, ПеречислениеСсылка.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС - значение для перекодировки
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС - значение после перекодировки
//
Функция ПериодНахожденияЖивотныхНаТерриторииТС(КодИлиЗначение) Экспорт
	
	Результат = Неопределено;
	
	Если КодИлиЗначение = "FROM_BIRTH" Тогда
		Результат = Перечисления.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС.СРождения;
	ИначеЕсли КодИлиЗначение = "NOT_LESS_SIX_MONTHS" Тогда
		Результат = Перечисления.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС.НеМенее6Месяцев;
	ИначеЕсли КодИлиЗначение = "IN_MONTHS" Тогда
		Результат = Перечисления.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС.ЗначениеВМесяцах;
	ИначеЕсли КодИлиЗначение = "ZERO" Тогда
		Результат = Перечисления.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС.Никогда;
	ИначеЕсли КодИлиЗначение = Неопределено Тогда
		Результат = Перечисления.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС.ПустаяСсылка();
		
	ИначеЕсли КодИлиЗначение = Перечисления.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС.СРождения Тогда
		Результат = "FROM_BIRTH";
	ИначеЕсли КодИлиЗначение = Перечисления.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС.НеМенее6Месяцев Тогда
		Результат = "NOT_LESS_SIX_MONTHS";
	ИначеЕсли КодИлиЗначение = Перечисления.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС.ЗначениеВМесяцах Тогда
		Результат = "IN_MONTHS";
	ИначеЕсли КодИлиЗначение = Перечисления.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС.Никогда Тогда
		Результат = "ZERO";
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИлиЗначение) Тогда
		Результат = Перечисления.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС.ПустаяСсылка();
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный период нахождения животных на территории ТС: %1'"),
				КодИлиЗначение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует результат лабораторных исследований для обмена с ВетИС
//
// Параметры:
//  КодИлиЗначение - Строка, ПеречислениеСсылка.РезультатыЛабораторныхИсследованийВЕТИС - значение для перекодировки
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.РезультатыЛабораторныхИсследованийВЕТИС - значение после перекодировки
//
Функция РезультатЛабораторныхИсследований(КодИлиЗначение) Экспорт
	
	Результат = Неопределено;
	
	Если КодИлиЗначение = "UNKNOWN" Тогда
		Результат = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.НетДанных;
	ИначеЕсли КодИлиЗначение = "POSITIVE" Тогда
		Результат = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.Положительный;
	ИначеЕсли КодИлиЗначение = "NEGATIVE" Тогда
		Результат = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.Отрицательный;
	ИначеЕсли КодИлиЗначение = "UNFULFILLED" Тогда
		Результат = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.НеПодвергнутаВСЭ;
	ИначеЕсли КодИлиЗначение = "VSERAW" Тогда
		Результат = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.ИзготовленаИзСырьяПрошедшегоВСЭ;
	ИначеЕсли КодИлиЗначение = "VSEFULL" Тогда
		Результат = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.ПодвергнутаВСЭВПолномОбъеме;
	ИначеЕсли КодИлиЗначение = Неопределено Тогда
		Результат = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.ПустаяСсылка();
	
	ИначеЕсли КодИлиЗначение = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.НетДанных Тогда
		Результат = "UNKNOWN"
	ИначеЕсли КодИлиЗначение = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.Положительный Тогда
		Результат = "POSITIVE"
	ИначеЕсли КодИлиЗначение = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.Отрицательный Тогда
		Результат = "NEGATIVE"
	ИначеЕсли КодИлиЗначение = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.НеПодвергнутаВСЭ Тогда
		Результат = "UNFULFILLED"
	ИначеЕсли КодИлиЗначение = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.ИзготовленаИзСырьяПрошедшегоВСЭ Тогда
		Результат = "VSERAW"
	ИначеЕсли КодИлиЗначение = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.ПодвергнутаВСЭВПолномОбъеме Тогда
		Результат = "VSEFULL"
	ИначеЕсли КодИлиЗначение = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.ПустаяСсылка() Тогда
		Результат = Неопределено
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный результат лабораторных исследований: %1'"),
				КодИлиЗначение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует тип ветеринарного мероприятия для обмена с ВетИС
//
// Параметры:
//  КодИлиЗначение - Строка, ПеречислениеСсылка.ТипыИммунизацииВЕТИС - значение для перекодировки
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ТипыИммунизацииВЕТИС - значение после перекодировки
//
Функция ТипВетеринарногоМероприятия(КодИлиЗначение) Экспорт
	
	Результат = Неопределено;
	
	Если КодИлиЗначение = "UND" Тогда
		Результат = Перечисления.ТипыИммунизацииВЕТИС.ПустаяСсылка();
	ИначеЕсли КодИлиЗначение = "LBR" Тогда
		Результат = Перечисления.ТипыИммунизацииВЕТИС.ЛабораторныеИсследования;
	ИначеЕсли КодИлиЗначение = "VSE" Тогда
		Результат = Перечисления.ТипыИммунизацииВЕТИС.ВетеринарноСанитарнаяЭкспертиза;
	ИначеЕсли КодИлиЗначение = "IMM" Тогда
		Результат = Перечисления.ТипыИммунизацииВЕТИС.ИммунизацияЖивогоЖивотного;
	ИначеЕсли КодИлиЗначение = "MED" Тогда
		Результат = Перечисления.ТипыИммунизацииВЕТИС.ОбработкаЖивогоЖивотного;
	ИначеЕсли КодИлиЗначение = "QRT" Тогда
		Результат = Перечисления.ТипыИммунизацииВЕТИС.Карантин;
	
	ИначеЕсли КодИлиЗначение = Перечисления.ТипыИммунизацииВЕТИС.ПустаяСсылка() Тогда
		Результат = "UND"
	ИначеЕсли КодИлиЗначение = Перечисления.ТипыИммунизацииВЕТИС.ЛабораторныеИсследования Тогда
		Результат = "LBR"
	ИначеЕсли КодИлиЗначение = Перечисления.ТипыИммунизацииВЕТИС.ВетеринарноСанитарнаяЭкспертиза Тогда
		Результат = "VSE"
	ИначеЕсли КодИлиЗначение = Перечисления.ТипыИммунизацииВЕТИС.ИммунизацияЖивогоЖивотного Тогда
		Результат = "IMM"
	ИначеЕсли КодИлиЗначение = Перечисления.ТипыИммунизацииВЕТИС.ОбработкаЖивогоЖивотного Тогда
		Результат = "MED"
	ИначеЕсли КодИлиЗначение = Перечисления.ТипыИммунизацииВЕТИС.Карантин Тогда
		Результат = "QRT"
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип ветеринарного мероприятия: %1'"),
				КодИлиЗначение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует уровень упаковки ВетИС для обмена
//
// Параметры:
//  КодИлиЗначение - Число, ПеречислениеСсылка.УровниУпаковокВЕТИС - значение для перекодировки
// 
// Возвращаемое значение:
//  Число, ПеречислениеСсылка.УровниУпаковокВЕТИС - значение после перекодировки
//
Функция УровеньУпаковки(КодИлиЗначение) Экспорт
	
	Значение = Неопределено;
	
	Если КодИлиЗначение = 1 Тогда
		Значение = Перечисления.УровниУпаковокВЕТИС.ВнутреннийУровень;
	ИначеЕсли КодИлиЗначение = 2 Тогда
		Значение = Перечисления.УровниУпаковокВЕТИС.ПотребительскийУровень;
	ИначеЕсли КодИлиЗначение = 3 Тогда
		Значение = Перечисления.УровниУпаковокВЕТИС.ПромежуточныйУровень;
	ИначеЕсли КодИлиЗначение = 4 Тогда
		Значение = Перечисления.УровниУпаковокВЕТИС.ТорговыйУровень;
	ИначеЕсли КодИлиЗначение = 5 Тогда
		Значение = Перечисления.УровниУпаковокВЕТИС.ДополнительныйУровень;
	ИначеЕсли КодИлиЗначение = 6 Тогда
		Значение = Перечисления.УровниУпаковокВЕТИС.ТранспортныйУровень;
	
	ИначеЕсли КодИлиЗначение = Перечисления.УровниУпаковокВЕТИС.ВнутреннийУровень Тогда
		Значение = 1;
	ИначеЕсли КодИлиЗначение = Перечисления.УровниУпаковокВЕТИС.ПотребительскийУровень Тогда
		Значение = 2;
	ИначеЕсли КодИлиЗначение = Перечисления.УровниУпаковокВЕТИС.ПромежуточныйУровень Тогда
		Значение = 3;
	ИначеЕсли КодИлиЗначение = Перечисления.УровниУпаковокВЕТИС.ТорговыйУровень Тогда
		Значение = 4;
	ИначеЕсли КодИлиЗначение = Перечисления.УровниУпаковокВЕТИС.ДополнительныйУровень Тогда
		Значение = 5;
	ИначеЕсли КодИлиЗначение = Перечисления.УровниУпаковокВЕТИС.ТранспортныйУровень Тогда
		Значение = 6;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИлиЗначение) Тогда
		Возврат Неопределено;
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный уровень упаковки: %1'"),
				КодИлиЗначение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Возвращает результат проверки правил регионализации ВетИС по коду
//
// Параметры:
//  Код - Число - код результата проверки
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.РезультатыПроверкиПравилРегионализации - значение перечисления
//
Функция РезультатПроверкиПравилРегионализации(Код) Экспорт
	
	Значение = Неопределено;
	
	Если Код = 1 Тогда
		Значение = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено;
	ИначеЕсли Код = 2 Тогда
		Значение = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий;
	ИначеЕсли Код = 3 Тогда
		Значение = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено;
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный результат проверки правил регионализации: %1'"),
				Код);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область СохраняемыеЗначения

Функция ИспользоватьОчередьПередачиЗаписейСкладскогоЖурналаВЕТИС() Экспорт
	
	Возврат НЕ Константы.ОтключитьОчередьПередачиЗаписейСкладскогоЖурналаВЕТИС.Получить();
	
КонецФункции

// См. ХозяйствующиеСубъектыВЕТИС.ХозяйствующийСубъектСоответствуетОрганизации
//
Функция ХозяйствующийСубъектСоответствуетОрганизации(Идентификатор) Экспорт
	
	Возврат Справочники.ХозяйствующиеСубъектыВЕТИС.ХозяйствующийСубъектСоответствуетОрганизации(Идентификатор);
	
КонецФункции

#КонецОбласти

#Область РолиДоступ

// См. ПользователиВЕТИС.РольПользователяВЕТИС
//
Функция РольПользователяВЕТИС(ПользовательВЕТИС) Экспорт
	
	Возврат ПользователиВЕТИС.РольПользователяВЕТИС(ПользовательВЕТИС);
	
КонецФункции

// См. ПользователиВЕТИС.ПраваДоступаПользователя
//
Функция ПраваДоступаПользователя(ХозяйствующийСубъект, ПользовательВЕТИС) Экспорт
	
	Возврат ПользователиВЕТИС.ПраваДоступаПользователя(ХозяйствующийСубъект, ПользовательВЕТИС);
	
КонецФункции

// См. ПользователиВЕТИС.ДоступныеОперацииВЕТИСПоПравамДоступа
//
Функция ДоступныеОперацииВЕТИС(ПраваДоступаСтруктура, ЭтоВетеринарныйВрач) Экспорт
	
	ПраваДоступа = Новый Массив();
	Для Каждого КлючИЗначение Из ПраваДоступаСтруктура Цикл
		ПраваДоступа.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат ПользователиВЕТИС.ДоступныеОперацииВЕТИСПоПравамДоступа(ПраваДоступа, ЭтоВетеринарныйВрач);
	
КонецФункции


#КонецОбласти

#Область КэшируемыеТаблицы

// Возвращает таблицу упаковок из классификатора ВетИС
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с колонками:
//   * Код           - ОпределяемыйТип.СтрокаВЕТИС - код упаковки
//   * Идентификатор - ОпределяемыйТип.УникальныйИдентификаторИС - GUID упаковки
//   * Наименование  - ОпределяемыйТип.СтрокаВЕТИС - наименование упаковки
//
Функция Упаковки() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Код",           Метаданные.ОпределяемыеТипы.СтрокаВЕТИС.Тип);
	Таблица.Колонки.Добавить("Идентификатор", Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	Таблица.Колонки.Добавить("Наименование",  Метаданные.ОпределяемыеТипы.СтрокаВЕТИС.Тип);
	
	Макет = Обработки.КлассификаторыВЕТИС.ПолучитьМакет("КлассификаторУпаковок");
	КоличествоСтрок = Макет.ВысотаТаблицы;
	
	Для НомерСтроки = 2 По КоличествоСтрок Цикл
		
		НоваяСтрока = Таблица.Добавить();
		
		НоваяСтрока.Код           = СокрЛП(Макет.Область("R" + НомерСтроки + "C1").Текст);
		НоваяСтрока.Идентификатор = СокрЛП(Макет.Область("R" + НомерСтроки + "C2").Текст);
		НоваяСтрока.Наименование  = СокрЛП(Макет.Область("R" + НомерСтроки + "C3").Текст);
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает таблицу упаковок из классификатора ВетИС 1.4
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с колонками:
//   * Код                - ОпределяемыйТип.СтрокаВЕТИС - код упаковки
//   * Идентификатор      - ОпределяемыйТип.УникальныйИдентификаторИС - GUID упаковки
//   * НаименованиеСтарое - ОпределяемыйТип.СтрокаВЕТИС - наименование упаковки
//   * НаименованиеНовое  - ОпределяемыйТип.СтрокаВЕТИС - наименование упаковки
//
Функция Упаковки1_4() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Идентификатор",      Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	Таблица.Колонки.Добавить("НаименованиеСтарое", Метаданные.ОпределяемыеТипы.СтрокаВЕТИС.Тип);
	Таблица.Колонки.Добавить("НаименованиеНовое",  Метаданные.ОпределяемыеТипы.СтрокаВЕТИС.Тип);
	Таблица.Колонки.Добавить("Код",                Метаданные.ОпределяемыеТипы.СтрокаВЕТИС.Тип);
	
	Макет = Обработки.КлассификаторыВЕТИС.ПолучитьМакет("КлассификаторУпаковок1_4");
	КоличествоСтрок = Макет.ВысотаТаблицы;
	
	Для НомерСтроки = 2 По КоличествоСтрок Цикл
		
		НоваяСтрока = Таблица.Добавить();
		
		НоваяСтрока.Идентификатор      = СокрЛП(Макет.Область("R" + НомерСтроки + "C1").Текст);
		НоваяСтрока.НаименованиеСтарое = СокрЛП(Макет.Область("R" + НомерСтроки + "C2").Текст);
		НоваяСтрока.НаименованиеНовое  = СокрЛП(Макет.Область("R" + НомерСтроки + "C3").Текст);
		НоваяСтрока.Код                = СокрЛП(Макет.Область("R" + НомерСтроки + "C4").Текст);
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает таблицу продукции/типов продукции с форматами даты выработки, срока годности
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица с колонками:
//		* ИдентификаторПродукции	- ОпределяемыйТип.УникальныйИдентификаторИС- УИД продукции, типа продукции
//		* ФорматДатыВыработки		- Строка										- Формат даты выработки
//		* ФорматСрокаГодности		- Строка										- Формат срока годности
//		* Живая						- Булево										- признак живой продукции
//
Функция СпецифическаяПродукция() Экспорт

	ТипУникальныйИдентификатор = Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип;
	ТипСтрокаВЕТИС             = Метаданные.ОпределяемыеТипы.СтрокаВЕТИС.Тип;
	ТипБулево                  = Новый ОписаниеТипов("Булево");
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("ИдентификаторПродукции",	ТипУникальныйИдентификатор);
	ТаблицаРезультата.Колонки.Добавить("ФорматДатыВыработки",		ТипСтрокаВЕТИС);
	ТаблицаРезультата.Колонки.Добавить("ФорматСрокаГодности",		ТипСтрокаВЕТИС);
	ТаблицаРезультата.Колонки.Добавить("Живая", 					ТипБулево);
	
	Макет = Обработки.КлассификаторыВЕТИС.ПолучитьМакет("СпецифическаяПродукция");
	
	КоличествоСтрок = Макет.ВысотаТаблицы;
	Для Счетчик = 2 По КоличествоСтрок Цикл
		
		НомерСтроки = Формат(Счетчик, "ЧГ=0");
		
		ИдентификаторПродукции	= СокрЛП(Макет.Область("R"+НомерСтроки+"C2").Текст);
		ФорматДатыВыработки		= СокрЛП(Макет.Область("R"+НомерСтроки+"C3").Текст);
		ФорматСрокаГодности		= СокрЛП(Макет.Область("R"+НомерСтроки+"C4").Текст);
		Живая					= СокрЛП(Макет.Область("R"+НомерСтроки+"C5").Текст);
		
		Если ЗначениеЗаполнено(ИдентификаторПродукции) Тогда
			
			НоваяСтрока = ТаблицаРезультата.Добавить();
			НоваяСтрока.ИдентификаторПродукции	= ИдентификаторПродукции;
			НоваяСтрока.ФорматДатыВыработки		= ?(ЗначениеЗаполнено(ФорматДатыВыработки), ФорматДатыВыработки, "");
			НоваяСтрока.ФорматСрокаГодности		= ?(ЗначениеЗаполнено(ФорматСрокаГодности), ФорматСрокаГодности, "");
			НоваяСтрока.Живая					= ?(Нрег(Живая) = "да", Истина, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультата;

КонецФункции // СпецифическаяПродукция()

#КонецОбласти

#Область ПоискВКэшируемыхТаблицах

// Возвращает страну мира, найденную в классификаторе ВетИС,
//  сопоставленную с классификатором "Страны мира" по коду Альфа2.
//  При необходимости создает страну из основного классификатора.
//
// Параметры:
//  GUID - ОпределяемыйТип.УникальныйИдентификаторИС - ключ поиска
// 
// Возвращаемое значение:
//  СправочникСсылка.СтраныМира - результат сопоставления
//
Функция СтранаМира(GUID) Экспорт
	
	СтраныМира = ИнтеграцияВЕТИСПовтИсп.СтраныМира();
	СтрокаТЧ = СтраныМира.Найти(GUID, "GUID");
	Если СтрокаТЧ = Неопределено Тогда
		Возврат Справочники.СтраныМира.ПустаяСсылка();
	КонецЕсли;
	
	СтранаМира = Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа2", СтрокаТЧ.КодАльфа2);
	
	Если Не ЗначениеЗаполнено(СтранаМира) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СтранаМира = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(СтрокаТЧ.КодАльфа2);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат СтранаМира;
	
КонецФункции

// Возвращает параметры запроса для документа ВетИС.
//
// Параметры:
//  Операция     - ПеречислениеСсылка.ВидыОперацийВЕТИС  - выполняемая операция.
//  ФорматОбмена - ПеречислениеСсылка.ФорматыОбменаВЕТИС - формат операции.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - см. ТаблицаСоответствияОперацийТипамВЕТИС.
//
Функция ПараметрыЗапросаВЕТИС(Операция, ФорматОбмена) Экспорт
	
	ТаблицаСоответствия = ИнтеграцияВЕТИСПовтИсп.ТаблицаСоответствияОперацийТипамВЕТИС();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Операция", Операция);
	ПараметрыОтбора.Вставить("ФорматОбмена", ФорматОбмена);
	
	РезультатПоиска = ТаблицаСоответствия.НайтиСтроки(ПараметрыОтбора);
	Если РезультатПоиска.Количество() = 0 Тогда
		
		ПараметрыОтбора.Вставить("ФорматОбмена", Перечисления.ФорматыОбменаВЕТИС.ПустаяСсылка());
		
		РезультатПоиска = ТаблицаСоответствия.НайтиСтроки(ПараметрыОтбора);
		Если РезультатПоиска.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПоиска[0];
	
КонецФункции

// Возвращает - данные строки классификатора единиц измерения ВЕТИС
//
// Параметры:
//  Идентификатор	 - ОпределяемыйТип.УникальныйИдентификаторИС - ключ поиска
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура - данные строки классификатора (см. ДанныеКлассификатораЕдиницИзмеренияВЕТИС)
//
Функция ДанныеСтрокиКлассификатораЕдиницИзмеренияВЕТИС(Идентификатор) Экспорт
	
	ДанныеКлассификатораВЕТИС = ИнтеграцияВЕТИСПовтИсп.ДанныеКлассификатораЕдиницИзмеренияВЕТИС();
	СтрокаКлассификатораВЕТИС = ДанныеКлассификатораВЕТИС.Найти(Идентификатор, "ЕдиницаИзмеренияGUID");
	
	Если СтрокаКлассификатораВЕТИС = Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("НаименованиеПолное");
		СтруктураВозврата.Вставить("ЕдиницаИзмеренияGUID");
		СтруктураВозврата.Вставить("БазоваяЕдиницаИзмеренияGUID");
		СтруктураВозврата.Вставить("Коэффициент");
		СтруктураВозврата.Вставить("ТипИзмеряемойВеличины");
		СтруктураВозврата.Вставить("КодОКЕИ");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, СтрокаКлассификатораВЕТИС);
		Возврат Новый ФиксированнаяСтруктура(СтруктураВозврата);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает доступные для продукции единицы изменения
//   по иерархии продукции
// Параметры:
//  ПродукцияСсылка - СправочникСсылка.ПродукцияВЕТИС - продукция
// 
// Возвращаемое значение:
//  ФиксированныйМассив - доступные элементы типа "СправочникСсылка.ЕдиницаИзмеренияВЕТИС"
//
Функция ДоступныеЕдиницыИзменения(ПродукцияСсылка) Экспорт
	
	Идентификаторы = ПродукцияВЕТИСВызовСервера.ИдентификаторыТипаВидаПродукцииПоНаименованиюПродукции(ПродукцияСсылка);
	
	ТаблицаКлассификатор = ПрочиеКлассификаторыВЕТИСВызовСервера.ЕдиницыИзмеренияПродукции();
	КодТипаПродукции = ПродукцияВЕТИСВызовСервера.ТипПродукции(Идентификаторы.ТипПродукции);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипПродукцииGUID", Строка(КодТипаПродукции));
	СтруктураПоиска.Вставить("ПродукцияGUID",    "-1");
	СтруктураПоиска.Вставить("ВидПродукцииGUID", "-1");
	
	МассивЕИ = Новый Массив;
	
	НайденныеСтроки = ТаблицаКлассификатор.НайтиСтроки(СтруктураПоиска);
	ДобавитьЕдиницыИзмеренияВМассив(НайденныеСтроки, МассивЕИ);
	
	СтруктураПоиска.ПродукцияGUID = Идентификаторы.ПродукцияИдентификатор;
	
	НайденныеСтроки = ТаблицаКлассификатор.НайтиСтроки(СтруктураПоиска);
	ДобавитьЕдиницыИзмеренияВМассив(НайденныеСтроки, МассивЕИ);
	
	СтруктураПоиска.ВидПродукцииGUID = Идентификаторы.ВидПродукцииИдентификатор;
	
	НайденныеСтроки = ТаблицаКлассификатор.НайтиСтроки(СтруктураПоиска);
	ДобавитьЕдиницыИзмеренияВМассив(НайденныеСтроки, МассивЕИ);
	
	Возврат Новый ФиксированныйМассив(МассивЕИ);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область КэшируемыеТаблицы

// Возвращает таблицу значений стран мира ВетИС загруженную из макета.
//   Не рекомендуется к внешним вызовам.
// Возвращаемое значение:
//  ТаблицаЗначений - см. ПрочиеКлассификаторыВЕТИСВызовСервера.СтраныМира().
//
Функция СтраныМира() Экспорт
	
	Возврат ПрочиеКлассификаторыВЕТИСВызовСервера.СтраныМира();
	
КонецФункции

// Возвращает таблицу соответствия вида документа и версии формата строковому типу ВЕТИС.
//   Не рекомендуется к внешним вызовам.
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с колонками:
//   * ТипВЕТИС - Строка - строковый тип ВЕТИС.
//   * ПространствоИмен  - Строка - пространство имен пакета XDTO.
//   * Операция          - ПеречислениеСсылка.ВидыОперацийВЕТИС - операция.
//   * ФорматОбмена      - ПеречислениеСсылка.ФорматыОбменаВЕТИС - формат обмена.
//   * ТипСообщения      - ПеречислениеСсылка.ТипыЗапросовИС - тип сообщения (входящее/исходящее).
//   * ОтветНаЗапрос     - СтрокаТаблицыЗначений, Неопределено - ожидаемый ответ (типа строки из этой таблицы).
//
Функция ТаблицаСоответствияОперацийТипамВЕТИС() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТипВЕТИС",          Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ПространствоИмен",  Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Операция",          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийВЕТИС"));
	Таблица.Колонки.Добавить("ФорматОбмена",      Новый ОписаниеТипов("ПеречислениеСсылка.ФорматыОбменаВЕТИС"));
	Таблица.Колонки.Добавить("ТипСообщения",      Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗапросовИС"));
	Таблица.Колонки.Добавить("ОтветНаЗапрос");
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("receiveApplicationResultRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ПолучениеРезультатаЗапроса;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ЗаявкиВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	
	#Область Классификаторы
	
	#Область Предприятия
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("modifyEnterpriseResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросРегистрацииИзмененияПредприятия;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("modifyEnterpriseRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИзменениеПредприятия;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область ХозяйствующиеСубъекты
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("modifyBusinessEntityResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросРегистрацииИзмененияХозяйствующегоСубъекта;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("modifyBusinessEntityRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИзменениеХозяйствующегоСубъекта;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область СвязьХозяйствующихСубъектовИПредприятий
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("modifyActivityLocationsResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросСозданияИзмененияСвязиСПлощадкой;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("modifyActivityLocationsRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаСозданиеИзменениеСвязиСПлощадкой;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("getActivityLocationListResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросПредприятийХозяйствующегоСубъекта;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;

	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("getActivityLocationListRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросПредприятийХозяйствующегоСубъекта;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область Продукция
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("modifyProducerStockListResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросРегистрацииИзмененияПродукции;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;

	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("modifyProducerStockListRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИзменениеПродукции;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область Пользователи
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("getBusinessEntityUserListResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросПользователейХозяйствующегоСубъекта;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("getBusinessEntityUserListRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросПользователейХозяйствующегоСубъекта;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("getApplicableUserAuthorityListResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросДоступныхДляНазначенияПрав;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("getApplicableUserAuthorityListRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросДоступныхДляНазначенияПрав;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("getBusinessEntityUserResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросДанныхПользователя;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("getBusinessEntityUserRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросДанныхПользователя;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("updateUserAuthoritiesResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененияПравПользователей;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("updateUserAuthoritiesRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеПравПользователей;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("updateUserWorkingAreasResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененияЗонОтветственностиПользователей;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("updateUserWorkingAreasRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеЗонОтветственностиПользователей;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("addBusinessEntityUserResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросРегистрацииИПривязкиПользователейХозяйствующегоСубъекта;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("addBusinessEntityUserRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИПривязкуПользователейХозяйствующегоСубъекта;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("unbindBusinessEntityUserResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросУдаленияСвязиПользователейСХозяйствующимСубъектом;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("unbindBusinessEntityUserRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаУдалениеСвязиПользователейСХозяйствующимСубъектом;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ОформлениеТранспортнойПартии
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("prepareOutgoingConsignmentResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияТранспортнойПартии;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("prepareOutgoingConsignmentRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеТранспортнойПартии;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область ОформлениеВходящейПартии
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("processIncomingConsignmentResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияВходящейПартии;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("processIncomingConsignmentRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область ПакетноеГашениеВСД
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("processIncomingDeliveryResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросПакетногоГашенияВСД;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("processIncomingDeliveryRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросПакетногоГашенияВСД;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область ОформлениеТранспортнойПартии
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("registerProductionOperationResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияПроизводственнойПартии;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("registerProductionOperationRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеПроизводственнойПартии;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область ОформлениеРезультатовИнвентаризации
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("resolveDiscrepancyResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияРезультатовИнвентаризации;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("resolveDiscrepancyRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеРезультатовИнвентаризации;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область ОбъединениеЗаписейСкладскогоЖурнала
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("mergeStockEntriesResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОбъединенияЗаписейСкладскогоЖурнала;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("mergeStockEntriesRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОбъединениеЗаписейСкладскогоЖурнала;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область ВСД
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("getVetDocumentByUuidResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВСД;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("getVetDocumentByUuidRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросВСД;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("getVetDocumentChangesListResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("getVetDocumentChangesListRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("getVetDocumentListResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВсехВСД;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("getVetDocumentListRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросВсехВСД;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("withdrawVetDocumentResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросНаАннулированиеВСД;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("withdrawVetDocumentRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаАннулированиеВСД;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область ЗаписиСкладскогоЖурнала
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("getStockEntryListResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросЗаписейСкладскогоЖурнала;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("getStockEntryListRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросЗаписейСкладскогоЖурнала;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("getStockEntryChangesListResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("getStockEntryChangesListRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("getStockEntryByGuidResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросЗаписиСкладскогоЖурнала;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("getStockEntryByGuidRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросЗаписиСкладскогоЖурнала;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область Регионализация
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("checkShipmentRegionalizationResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВозможностиПеревозкиПартииВРамкахРегионализации;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("checkShipmentRegionalizationRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область ВетеринарныеМероприятия
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("updateVeterinaryEventsResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВнесенияСведенийОВетеринарныхМероприятиях;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("updateVeterinaryEventsRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаВнесениеСведенийОВетеринарныхМероприятиях;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	#Область МультимодальныеПеревозки
	
	ОтветНаЗапрос = Таблица.Добавить();
	ОтветНаЗапрос.ТипВЕТИС = ("updateTransportMovementDetailsResponse");
	ОтветНаЗапрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	ОтветНаЗапрос.Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененияНомеровТранспортныхСредств;
	ОтветНаЗапрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ОтветНаЗапрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий;
	
	Запрос = Таблица.Добавить();
	Запрос.ТипВЕТИС = ("updateTransportMovementDetailsRequest");
	Запрос.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	Запрос.Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеНомеровТранспортныхСредств;
	Запрос.ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	Запрос.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	Запрос.ОтветНаЗапрос = ОтветНаЗапрос;
	
	#КонецОбласти
	
	Возврат Таблица;
	
КонецФункции

// Возвращает таблицу данных по классификатору единиц измерения ВЕТИС.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица с колонками:
//		* НаименованиеПолное			- ОпределяемыйТип.СтрокаВЕТИС - Полное наименование единицы измерения ВЕТИС.
//		* ЕдиницаИзмеренияGUID			- ОпределяемыйТип.УникальныйИдентификаторИС - Уникальный идентификатор единицы 
//																						измерения ВЕТИС.
//		* БазоваяЕдиницаИзмеренияGUID	- ОпределяемыйТип.УникальныйИдентификаторИС - Уникальный идентификатор базовой 
//																						единицы измерения ВЕТИС.
//		* Коэффициент					- ОпределяемыйТип.СтрокаВЕТИС - Коэффициент пересчета в базовую единицу измерения ВЕТИС.
//		* ТипИзмеряемойВеличины			- ОпределяемыйТип.СтрокаВЕТИС - Тип измеряемой величины.
//		* КодОКЕИ						- ОпределяемыйТип.СтрокаВЕТИС - Код ОКЕИ.
//
Функция ДанныеКлассификатораЕдиницИзмеренияВЕТИС() Экспорт
	
	ТипСтрокаВЕТИС             = Метаданные.ОпределяемыеТипы.СтрокаВЕТИС.Тип;
	ТипУникальныйИдентификатор = Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип;
	
	ДанныеКлассификатора = Новый ТаблицаЗначений;
	
	ДанныеКлассификатора.Колонки.Добавить("НаименованиеПолное",          ТипСтрокаВЕТИС);
	ДанныеКлассификатора.Колонки.Добавить("ЕдиницаИзмеренияGUID",        ТипУникальныйИдентификатор);
	ДанныеКлассификатора.Колонки.Добавить("БазоваяЕдиницаИзмеренияGUID", ТипУникальныйИдентификатор);
	ДанныеКлассификатора.Колонки.Добавить("Коэффициент",                 ТипСтрокаВЕТИС);
	ДанныеКлассификатора.Колонки.Добавить("ТипИзмеряемойВеличины",       ТипСтрокаВЕТИС);
	ДанныеКлассификатора.Колонки.Добавить("КодОКЕИ",                     ТипСтрокаВЕТИС);
	
	Макет = Обработки.КлассификаторыВЕТИС.ПолучитьМакет("КлассификаторЕдиницИзмерения");
	КоличествоСтрок = Макет.ВысотаТаблицы;
	
	Для НомерСтроки = 2 По КоличествоСтрок Цикл
		
		НоваяСтрока = ДанныеКлассификатора.Добавить();
		
		НоваяСтрока.НаименованиеПолное          = СокрЛП(Макет.Область("R" + НомерСтроки + "C1" ).Текст);
		НоваяСтрока.ЕдиницаИзмеренияGUID        = СокрЛП(Макет.Область("R" + НомерСтроки + "C2" ).Текст);
		НоваяСтрока.БазоваяЕдиницаИзмеренияGUID = СокрЛП(Макет.Область("R" + НомерСтроки + "C3" ).Текст);
		НоваяСтрока.Коэффициент                 = СокрЛП(Макет.Область("R" + НомерСтроки + "C4" ).Текст);
		НоваяСтрока.ТипИзмеряемойВеличины       = СокрЛП(Макет.Область("R" + НомерСтроки + "C5" ).Текст);
		НоваяСтрока.КодОКЕИ                     = СокрЛП(Макет.Область("R" + НомерСтроки + "C6" ).Текст);
		
	КонецЦикла;
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЕдиницыИзмеренияВМассив(НайденныеСтроки, Массив)
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если Массив.Найти(НайденнаяСтрока.ЕдиницаИзмеренияСсылка) = Неопределено Тогда
			Массив.Добавить(НайденнаяСтрока.ЕдиницаИзмеренияСсылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
