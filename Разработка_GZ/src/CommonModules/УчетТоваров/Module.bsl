
Функция ПодготовитьПараметрыНачислениеТорговойНаценкиПоступлениеТоваров(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       // <Число> - номер строки в списке
	+ "Номенклатура,"      // <СправочникСсылка.Номенклатура> - оприходуемый товар
	+ "СтавкаНДСВРознице," // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС (указывается при оприходовании товара в НТТ)
	+ "СуммаБУ,"           // <Число,15,2> - сумма товара по цене приобретения
	+ "СуммаВРознице,"     // <Число,15,2> - сумма товара по цене продажи
	+ "Количество,"        // <Число,15,3> - количество оприходуемого товара
	+ "СчетУчета,"         // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который начисляется торговая наценка
	+ "СпособУчетаНДС,"    // <ПеречислениеСсылка.СпособыУчетаНДС> - способ учета НДС по строке (для раздельного учета НДС на счете 19)
	+ "СуммаНДСРуб,"       // <Число,15,2> - сумма НДС приобретения (для раздельного учета НДС на счете 19)
	+ "Содержание";        // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"             // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                  // <Дата> - период движений - дата документа
	+ "Организация,"             // <СправочникСсылка.Организация> - организация, в которой начисляется торговая наценка
	+ "Подразделение,"           // <Ссылка на справочник подразделений> - подразделение, в котором начисляется торговая наценка
	+ "Склад,"                   // <СправочникСсылка.Склады> - склад, в котором начисляется торговая наценка
	+ "ТипСклада,"               // <ПеречислениеСсылка.ТипыСкладов> - вид склада, в котором начисляется торговая наценка
	+ "ТипЦенРозничнойТорговли"; // <СправочникСсылка.ПрочиеДоходыИРасходы> - тип цен для опеределения розничной цены

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПоступлениеТары(ТаблицаТара, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТара

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         // <Число> - номер строки в списке
	+ "Номенклатура,"        // <СправочникСсылка.Номенклатура> - поступающая тара
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма в валюте взаиморасчетов с поставщиком
	+ "СуммаРуб,"            // <Число,15,2> - сумма в рублях
	+ "Количество,"          // <Число,15,3> - количество поступающей тары
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется тара
	+ "Содержание";          // <Строка, 150> - содержание проводки

	Параметры.Вставить("ТаблицаТара",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТара, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"             // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                  // <Дата> - период движений - дата документа
	+ "Организация,"             // <СправочникСсылка.Организация> - организация, в которую поступает тара
	+ "Подразделение,"           // <Ссылка на справочник подразделений> - подразделение, в которое поступает тара
	+ "Склад,"                   // <СправочникСсылка.Склады> - склад, на который поступает тара
	+ "Контрагент,"              // <СправочникСсылка.Контрагенты> - поставщик тары
	+ "ДоговорКонтрагента,"      // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому поступает тара
	+ "СчетУчетаРасчетовПоТаре," // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с поставщиком по таре, обычно 76.05
	+ "ВалютаВзаиморасчетов";    // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияПоступлениеТарыНесколькоКонтрагентов(ТаблицаТара, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТара) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеТарыНесколькоКонтрагентов(ТаблицаТара, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТара Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаРасчетовПоТаре;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтрокаТаблицы.ДоговорКонтрагента);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = СтрокаТаблицы.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаРуб;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеТарыНесколькоКонтрагентов(ТаблицаТара, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТара

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"             // <Число> - номер строки в списке
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура> - поступающая тара
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте взаиморасчетов с поставщиком
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "Количество,"              // <Число,15,3> - количество поступающей тары
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется тара
	+ "Контрагент,"              // <СправочникСсылка.Контрагенты> - поставщик тары
	+ "ДоговорКонтрагента,"      // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому поступает тара
	+ "СчетУчетаРасчетовПоТаре," // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с поставщиком по таре, обычно 76.05
	+ "ВалютаВзаиморасчетов,"    // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком
	+ "Содержание";              // <Строка, 150> - содержание проводки

	Параметры.Вставить("ТаблицаТара",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТара, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"             // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                  // <Дата> - период движений - дата документа
	+ "Организация,"             // <СправочникСсылка.Организация> - организация, в которую поступает тара
	+ "Подразделение,"           // <Ссылка на справочник подразделений> - подразделение, в которое поступает тара
	+ "Склад";                   // <СправочникСсылка.Склады> - склад, на который поступает тара

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПоступлениеЗакупленныхТоваровУслугКомитентов(ТаблицаТоварыУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТоварыУслуги

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"                 // <Число> - номер строки в списке
	+ "Номенклатура,"                // <СправочникСсылка.Номенклатура> - закупленный товар или услуга
	+ "ЭтоУслуга,"                   // <Булево>
	+ "СчетУчета,"                   // <ПланСчетовСсылка.Хозрасчетный> - счет учета закупленного товара (002)
	+ "СуммаБУ,"                     // <Число,15,2> - сумма в рублях
	+ "СуммаВзаиморасчетов,"         // <Число,15,2> - сумма в рублях
	+ "СуммаВзаиморасчетовКомитент,"  // <Число,15,2> - сумма в рублях
	+ "СуммаНДСВзаиморасчетовКомитент,"  // <Число,15,2> - сумма НДС в рублях
	+ "Количество,"                  // <Число,15,3> - количество закупленного товара
	+ "Комитент,"                    // <СправочникСсылка.Контрагенты> - комитент, для которого производится закупка у поставщика
	+ "ДоговорКомитента,"            // <СправочникСсылка.ДоговорыКонтрагентов> - договор с комитентом, по которому производится закупка у поставщика
	+ "ДокументРасчетовКомитента,"   // <ДокументСсылка> - документ поступления товара или услуги
	+ "Содержание,";                 // <Строка, 150> - содержание проводок

	Параметры.Вставить("ТоварыУслуги",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТоварыУслуги, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                      // <Дата> - период движений - дата документа
	+ "Организация,"                 // <СправочникСсылка.Организация> - организация, которая закупает товар для комитентов
	+ "Подразделение,";              // <Ссылка на справочник подразделений> - подразделение организации, которая закупает товар для комитентов

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиПоступлениеНаХранение(Товары, Реквизиты, Движения, Отказ)

	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Товары Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Комитент);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ТекстЗапросаВозвращенныеСписанныеТоварыДокументыОтгрузки()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Регистратор КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДокументыОтгрузки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Дата <= &КонДата
	|	И КорректировкаРеализации.Проведен
	|	И КорректировкаРеализации.ИсходныйДокументРеализации = &Регистратор
	|	И КорректировкаРеализации.Ссылка <> &ЭтотВозврат
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Дата <= &КонДата
	|	И ВозвратТоваровОтПокупателя.Проведен
	|	И ВозвратТоваровОтПокупателя.Сделка = &Регистратор
	|	И ВозвратТоваровОтПокупателя.Ссылка <> &ЭтотВозврат";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

КонецФункции

Функция ТекстЗапросаВозвращенныеСписанныеТоварыПартии()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйСубконто.Значение КАК Партия
	|ПОМЕСТИТЬ ВТ_Партии
	|ИЗ
	|	ВТ_ДокументыОтгрузки КАК ВТ_ДокументыОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО ВТ_ДокументыОтгрузки.Ссылка = ХозрасчетныйСубконто.Регистратор
	|ГДЕ
	|	ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|	И ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

КонецФункции

Функция ТекстЗапросаВозвращенныеСписанныеТоварыПрошлогоМесяца(
	ЕстьСчетаНеПартионные, ЕстьСчетаПартионные, ИспользоватьОтборПоСкладуОтгрузки, ИспользоватьОтборПоПодразделениюОтгрузки)

	ТекстЗапроса = ТекстЗапросаВозвращенныеСписанныеТоварыДокументыОтгрузки();

	Если ЕстьСчетаПартионные Тогда
		// Определим, какие партии списали документы отгрузки и будет возвращать только их.
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВозвращенныеСписанныеТоварыПартии();
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
	"// 0 - Списанные товары по счетам с партионным учетом
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Субконто2 КАК Партия,
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотКт, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОбороты.СуммаПРОборотКт, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОбороты.СуммаВРОборотКт, 0)) КАК СуммаВР,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт) КАК Количество,
	|	0 КАК КоличествоОтгружено,
	|	0 КАК КоличествоВозвращеноРанее,
	|	0 КАК СуммаВозвращеноРанее,
	|	0 КАК СуммаНУВозвращеноРанее,
	|	0 КАК СуммаПРВозвращеноРанее,
	|	0 КАК СуммаВРВозвращеноРанее
	|ПОМЕСТИТЬ ВТ_СписанныеТовары
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачМесяцаРеализации,
	|			&КонМесяцаРеализации,
	|			Регистратор,
	|			Счет В (&СчетКтПартионный),
	|			&ВидыСубконтоПартий,
	|			Организация = &Организация
	|				И &УсловиеПоПодразделению
	|				И Субконто1 В (&Товары)
	|				И Субконто2 В
	|					(ВЫБРАТЬ
	|						ВТ_Партии.Партия
	|					ИЗ
	|						ВТ_Партии)
	|				И &УсловиеПоСкладуСубконто3,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ПО ХозрасчетныйОбороты.Регистратор = КорректировкаРеализации.Ссылка
	|			И (КорректировкаРеализации.ИсходныйДокументРеализации ССЫЛКА Документ.РеализацияТоваровУслуг)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО ХозрасчетныйОбороты.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
	|ГДЕ
	|	(ВозвратТоваровОтПокупателя.Сделка ЕСТЬ NULL
	|			ИЛИ НАЧАЛОПЕРИОДА(ВозвратТоваровОтПокупателя.Сделка.Дата, МЕСЯЦ) = &НачМесяцаРеализации	И &УсловиеПоСкладуВозвратОтПокупателя)
	|	И (КорректировкаРеализации.ИсходныйДокументРеализации ЕСТЬ NULL
	|			ИЛИ ХозрасчетныйОбороты.КоличествоОборотКт >= 0
	|				И НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(КорректировкаРеализации.ИсходныйДокументРеализации КАК Документ.РеализацияТоваровУслуг).Дата, МЕСЯЦ) = &НачМесяцаРеализации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Счет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// 1 - Списанные товары по счетам без партионного учета
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1,
	|	НЕОПРЕДЕЛЕНО,
	|	ХозрасчетныйОбороты.Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт),
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотКт, 0)),
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОбороты.СуммаПРОборотКт, 0)),
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОбороты.СуммаВРОборотКт, 0)),
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт),
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачМесяцаРеализации,
	|			&КонМесяцаРеализации,
	|			Регистратор,
	|			Счет В (&СчетКтНеПартионный),
	|			&ВидыСубконтоБезПартий,
	|			Организация = &Организация
	|				И &УсловиеПоПодразделению
	|				И Субконто1 В (&Товары)
	|				И &УсловиеПоСкладуСубконто2,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ПО ХозрасчетныйОбороты.Регистратор = КорректировкаРеализации.Ссылка
	|			И (КорректировкаРеализации.ИсходныйДокументРеализации ССЫЛКА Документ.РеализацияТоваровУслуг)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО ХозрасчетныйОбороты.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
	|ГДЕ
	|	(ВозвратТоваровОтПокупателя.Сделка ЕСТЬ NULL
	|			ИЛИ НАЧАЛОПЕРИОДА(ВозвратТоваровОтПокупателя.Сделка.Дата, МЕСЯЦ) = &НачМесяцаРеализации И &УсловиеПоСкладуВозвратОтПокупателя)
	|	И (КорректировкаРеализации.ИсходныйДокументРеализации ЕСТЬ NULL
	|			ИЛИ ХозрасчетныйОбороты.КоличествоОборотКт >= 0
	|				И НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(КорректировкаРеализации.ИсходныйДокументРеализации КАК Документ.РеализацияТоваровУслуг).Дата, МЕСЯЦ) = &НачМесяцаРеализации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Счет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// 2 - Перемещение между складами при отсутствии суммового учета по складам по счетам с партионным учетом
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	0,
	|	0,
	|	0,
	|	0,
	|	-СУММА(ХозрасчетныйОборотыДтКт.КоличествоОборотКт),
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачМесяцаРеализации,
	|			&КонМесяцаРеализации,
	|			,
	|			СчетДт В (&СчетКтПартионный),
	|			&ВидыСубконтоПартийСклады,
	|			СчетКт В (&СчетКтПартионный),
	|			&ВидыСубконтоПартийСклады,
	|			Организация = &Организация
	|				И &УсловиеПоПодразделениюКт
	|				И СубконтоДт1 В (&Товары)
	|				И СубконтоКт1 В (&Товары)
	|				И СубконтоКт2 В
	|					(ВЫБРАТЬ
	|						ВТ_Партии.Партия
	|					ИЗ
	|						ВТ_Партии)
	|				И &УсловиеПоСкладуСубконтоКт3) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.СчетДт = ХозрасчетныйОборотыДтКт.СчетКт
	|	И ХозрасчетныйОборотыДтКт.СубконтоДт1 = ХозрасчетныйОборотыДтКт.СубконтоКт1
	|	И ХозрасчетныйОборотыДтКт.СубконтоДт2 = ХозрасчетныйОборотыДтКт.СубконтоКт2
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
	|	ХозрасчетныйОборотыДтКт.СчетКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// 3 - Перемещение между складами при отсутствии суммового учета по складам по счетам без партионного учета
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО,
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	0,
	|	0,
	|	0,
	|	0,
	|	-СУММА(ХозрасчетныйОборотыДтКт.КоличествоОборотКт),
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачМесяцаРеализации,
	|			&КонМесяцаРеализации,
	|			,
	|			СчетДт В (&СчетКтНеПартионный),
	|			&ВидыСубконтоБезПартийСклады,
	|			СчетКт В (&СчетКтНеПартионный),
	|			&ВидыСубконтоБезПартийСклады,
	|			Организация = &Организация
	|				И &УсловиеПоПодразделениюКт
	|				И СубконтоДт1 В (&Товары)
	|				И СубконтоКт1 В (&Товары)
	|				И &УсловиеПоСкладуСубконтоКт2) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.СчетДт = ХозрасчетныйОборотыДтКт.СчетКт
	|	И ХозрасчетныйОборотыДтКт.СубконтоДт1 = ХозрасчетныйОборотыДтКт.СубконтоКт1
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СчетКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// 4 - Отгрузки и возвраты по документам цепочки
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.Период > &КонМесяцаРеализации
	|				И ХозрасчетныйДвиженияССубконто.КоличествоКт < 0
	|			ТОГДА -ХозрасчетныйДвиженияССубконто.КоличествоКт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.Период > &КонМесяцаРеализации
	|				И ХозрасчетныйДвиженияССубконто.КоличествоКт < 0
	|			ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.Период > &КонМесяцаРеализации
	|				И ХозрасчетныйДвиженияССубконто.КоличествоКт < 0
	|			ТОГДА -ХозрасчетныйДвиженияССубконто.СуммаНУКт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.Период > &КонМесяцаРеализации
	|				И ХозрасчетныйДвиженияССубконто.КоличествоКт < 0
	|			ТОГДА -ХозрасчетныйДвиженияССубконто.СуммаПРКт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.Период > &КонМесяцаРеализации
	|				И ХозрасчетныйДвиженияССубконто.КоличествоКт < 0
	|			ТОГДА -ХозрасчетныйДвиженияССубконто.СуммаВРКт
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			&КонДата,
	|			Организация = &Организация
	|				И Регистратор В
	|					(ВЫБРАТЬ
	|						ВТ_ДокументыОтгрузки.Ссылка
	|					ИЗ
	|						ВТ_ДокументыОтгрузки)
	|				И СчетКт В (&СчетКтПартионный, &СчетКтНеПартионный),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто";

	Если ИспользоватьОтборПоСкладуОтгрузки Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконтоКт2", "СубконтоКт2 = &СкладОтгрузки");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконтоКт3", "СубконтоКт3 = &СкладОтгрузки");
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконто2", "Субконто2 = &СкладОтгрузки");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконто3", "Субконто3 = &СкладОтгрузки");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуВозвратОтПокупателя", "ВозвратТоваровОтПокупателя.Сделка.Склад = &СкладОтгрузки");
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконтоКт2", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконтоКт3", "ИСТИНА");
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконто2", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконто3", "ИСТИНА");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуВозвратОтПокупателя", "ИСТИНА");
		
	КонецЕсли;
	
	Если ИспользоватьОтборПоПодразделениюОтгрузки Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПодразделениюКт", "ПодразделениеКт = &ПодразделениеОтгрузки");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПодразделению", "Подразделение = &ПодразделениеОтгрузки");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПодразделениюКт", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПодразделению", "ИСТИНА");
	КонецЕсли;

	// Исключим запросы, которые не требуются, исходя из настроек плана счетов.
	// Удаляем, начиная с последних запросов, чтобы индексы запросов были корректными. 
	Счет41_01 = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
	ВедетсяУчетПоСкладам = БухгалтерскийУчет.ВедетсяУчетПоСкладам(Счет41_01);
	ВедетсяСуммовойУчетПоСкладам = БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(Счет41_01);

	// Удалим запросы к счетам только с количественным учетом по складам, если такого нет.
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ИндексПоследнегоПакетаЗапросов = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
	
	Если ВедетсяСуммовойУчетПоСкладам ИЛИ НЕ ВедетсяУчетПоСкладам Тогда
		// Либо складов нет вообще либо ведется суммовой учет по складам, отдельно обрабатывать перемещения между складами не требуется.
		СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(3);
		СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(2);

	ИначеЕсли ЕстьСчетаПартионные И НЕ ЕстьСчетаНеПартионные Тогда
		СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(3);

	ИначеЕсли НЕ ЕстьСчетаПартионные И ЕстьСчетаНеПартионные Тогда
		СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(2);

	КонецЕсли; 

	Если НЕ (ЕстьСчетаПартионные И ЕстьСчетаНеПартионные) Тогда

		Если ЕстьСчетаПартионные Тогда
			// Удалим запрос к счетам без партий.
			СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(1);
		Иначе
			// Удалим запрос к счетам с партиями.
			СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(0);
		КонецЕсли;

	КонецЕсли;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса() + ОбщегоНазначения.РазделительПакетаЗапросов();

КонецФункции

Функция ТекстЗапросаВозвращенныеСписанныеТоварыТекущегоМесяца(ЕстьСчетаНеПартионные, ЕстьСчетаПартионные)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОборотыДтКт.СубконтоКт1 КАК Номенклатура,
	|	ОборотыДтКт.СубконтоКт2 КАК Партия,
	|	ОборотыДтКт.СчетКт КАК СчетУчета,
	|	СУММА(ОборотыДтКт.СуммаОборот) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ОборотыДтКт.СуммаНУОборотКт, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(ОборотыДтКт.СуммаПРОборотКт, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(ОборотыДтКт.СуммаВРОборотКт, 0)) КАК СуммаВР,
	|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК Количество,
	|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК КоличествоОтгружено,
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.КоличествоОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВозвращеноРанее,
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВозвращеноРанее,
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.СуммаНУОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНУВозвращеноРанее,
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.СуммаПРОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРВозвращеноРанее,
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.СуммаВРОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВРВозвращеноРанее
	|ПОМЕСТИТЬ ВТ_СписанныеТовары
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачТекущегоМесяца, &КонДата, Запись, , , СчетКт В (&СчетКтПартионный), &ВидыСубконтоПартий, СубконтоКт1 В (&Товары)) КАК ОборотыДтКт
	|ГДЕ
	|	(ОборотыДтКт.Регистратор = &Регистратор
	|				И ОборотыДтКт.КоличествоОборотКт >= 0
	|			ИЛИ ОборотыДтКт.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|				И ОборотыДтКт.Регистратор <> &ЭтотВозврат
	|				И ВЫРАЗИТЬ(ОборотыДтКт.Регистратор КАК Документ.КорректировкаРеализации).ИсходныйДокументРеализации = &Регистратор
	|			ИЛИ ОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				И ОборотыДтКт.Регистратор <> &ЭтотВозврат
	|				И ОборотыДтКт.КоличествоОборотКт <= 0
	|				И ВЫРАЗИТЬ(ОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка = &Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыДтКт.СчетКт,
	|	ОборотыДтКт.СубконтоКт1,
	|	ОборотыДтКт.СубконтоКт2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОборотыДтКт.СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО,
	|	ОборотыДтКт.СчетКт,
	|	СУММА(ОборотыДтКт.СуммаОборот),
	|	СУММА(ЕСТЬNULL(ОборотыДтКт.СуммаНУОборотКт, 0)),
	|	СУММА(ЕСТЬNULL(ОборотыДтКт.СуммаПРОборотКт, 0)),
	|	СУММА(ЕСТЬNULL(ОборотыДтКт.СуммаВРОборотКт, 0)),
	|	СУММА(ОборотыДтКт.КоличествоОборотКт),
	|	СУММА(ОборотыДтКт.КоличествоОборотКт),
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.КоличествоОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.СуммаНУОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.СуммаПРОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.СуммаВРОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачТекущегоМесяца, &КонДата, Запись, , , СчетКт В (&СчетКтНеПартионный), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура), СубконтоКт1 В (&Товары)) КАК ОборотыДтКт
	|ГДЕ
	|	(ОборотыДтКт.Регистратор = &Регистратор
	|				И ОборотыДтКт.КоличествоОборотКт >= 0
	|			ИЛИ ОборотыДтКт.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|				И ОборотыДтКт.Регистратор <> &ЭтотВозврат
	|				И ВЫРАЗИТЬ(ОборотыДтКт.Регистратор КАК Документ.КорректировкаРеализации).ИсходныйДокументРеализации = &Регистратор
	|			ИЛИ ОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				И ОборотыДтКт.Регистратор <> &ЭтотВозврат
	|				И ОборотыДтКт.КоличествоОборотКт <= 0
	|				И ВЫРАЗИТЬ(ОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка = &Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыДтКт.СчетКт,
	|	ОборотыДтКт.СубконтоКт1";

	Если НЕ (ЕстьСчетаПартионные И ЕстьСчетаНеПартионные) Тогда

		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);

		ИндексПоследнегоПакетаЗапросов = СхемаЗапроса.ПакетЗапросов.Количество() - 1;

		Если ЕстьСчетаПартионные Тогда
			// Удалим запрос к счетам без партий.
			СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(1);
		Иначе
			// Удалим запрос к счетам с партиями.
			СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(0);
		КонецЕсли;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

КонецФункции

Функция ПодготовитьПараметрыТаблицыВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "Период,"           // <Дата> - дата списания
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконто1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорПодразделение," // <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "Подразделение,"    // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияПР,"  // <Число,15,2> - сумма постоянных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВР";  // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	
	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета товаров
	+ "Комиссионный";     // <Булево>
	
	Параметры.Вставить("СчетаУчетаТоваров",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСчетаУчетаТоваров, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "Номенклатура";     // <СправочникСсылка.Номенклатура> - ссылка на номенклатуру, по которой будет определяться партия
	
	Параметры.Вставить("СписокНоменклатуры",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписокНоменклатуры, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                 // <Дата> - период движений - дата документа
	+ "Регистратор,"            // <ДокументСсылка>
	+ "Организация,"            // <СправочникСсылка.Организации>
	+ "УказанДокументОтгрузки," // <Булево>
	+ "ДатаДокументаРеализации," // <Дата>
	+ "Сделка";                 // <ДокументСсылка>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

Функция РазделитьСчетаУчетаПоПартионномуУчету(ТаблицаСчетаУчетаТоваров)

	СтруктураСчетов = Новый Структура;
	СтруктураСчетов.Вставить("СчетаПартионные",   Новый Массив);
	СтруктураСчетов.Вставить("СчетаНеПартионные", Новый Массив);

	Для каждого СтрокаСчета Из ТаблицаСчетаУчетаТоваров Цикл
		Если БухгалтерскийУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСчета.СчетУчета) Тогда
			СтруктураСчетов.СчетаПартионные.Добавить(СтрокаСчета.СчетУчета);
		Иначе
			СтруктураСчетов.СчетаНеПартионные.Добавить(СтрокаСчета.СчетУчета);
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураСчетов;

КонецФункции

Процедура ПроставитьСторноТаблицы(Таблица, СтруктураПолейДляСторно, Множитель) Экспорт
	
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	// Сторнируем 
	Для Каждого Строка Из Таблица Цикл
		Для каждого КолонкаСторно Из СтруктураПолейДляСторно Цикл
			Строка[КолонкаСторно.Ключ] = Множитель * Строка[КолонкаСторно.Ключ];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОприходованиеТоваров(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       // <Число> - номер строки в списке
	+ "Номенклатура,"      // <СправочникСсылка.Номенклатура> - оприходуемый товар
	+ "СтавкаНДСВРознице," // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС (указывается при оприходовании товара в НТТ)
	+ "Сумма,"             // <Число,15,2> - сумма в рублях
	+ "Количество,"        // <Число,15,3> - количество оприходуемого товара
	+ "СчетУчета,"         // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется товар
	+ "Содержание";        // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                        // <Дата> - период движений - дата документа
	+ "Организация,"                   // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "Подразделение,"                 // <Ссылка на справочник подразделений> - подразделение, в которое приходуется товар
	+ "Склад,"                         // <СправочникСсылка.Склады> - склад, на который приходуется товар
	+ "ИнвентаризацияТоваровНаСкладе," // <ДокументСсылка.ИнвентаризацияТоваров> - документ инвентаризации, в котором отражен излишек товара
	+ "СтатьяПрочихДоходовРасходов";   // <СправочникСсылка.ПрочиеДоходыИРасходы> - статья доходов от оприходования излишков товара

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПоступлениеТоваровНаКомиссию(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура," // <СправочникСсылка.Номенклатура> - поступающий товар
	+ "СуммаРуб,"     // <Число,15,2> - сумма в рублях
	+ "Количество,"   // <Число,15,3> - количество поступающего товара
	+ "СчетУчета,"    // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется товар
	+ "Содержание";   // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организация> - организация, в которую поступает товар
	+ "Подразделение," // <Ссылка на справочник подразделений> - подразделение, в которое поступает товар
	+ "Склад,"         // <СправочникСсылка.Склады> - склад, на который поступает товар
	+ "Контрагент";    // <СправочникСсылка.Контрагенты>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПоступлениеМатериаловВПереработку(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура," // <СправочникСсылка.Номенклатура> - номенклатура поступающих материалов
	+ "СуммаРуб,"     // <Число,15,2> - сумма в рублях
	+ "Количество,"   // <Число,15,3> - количество поступающих материалов
	+ "СчетУчета,"    // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуются материалы
	+ "Содержание";   // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организация> - организация, в которую поступают материалы
	+ "Подразделение," // <Ссылка на справочник подразделений> - подразделение, в которое поступают материалы
	+ "Склад,"         // <СправочникСсылка.Склады> - склад, на который поступают материалы
	+ "Контрагент";    // <СправочникСсылка.Контрагенты> - заказчик, от которого поступают материалы в переработку

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПеремещениеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконто1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорПодразделение," // <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "Подразделение,"    // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияПР,"  // <Число,15,2> - сумма постоянных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВР";  // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата> - период движений - дата документа
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Контрагент,"  // <СправочникСсылка.Контрагенты>
	+ "Содержание";  // <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыНачислениеТорговойНаценкиПеремещениеТоваров(ТаблицаТовары, ТаблицаСписанныеТовары,
	ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"        // <Число> - номер строки в списке
	+ "Номенклатура,"       // <СправочникСсылка.Номенклатура> - перемещаемый товар
	+ "СтавкаНДСВРознице,"  // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС (указывается при перемещении товара в НТТ)
	+ "СуммаВРознице,"      // <Число,15,2> - сумма перемещаемого товара (указывается при перемещении товара в НТТ)
	+ "Количество,"         // <Число,15,3> - количество перемещаемого товара
	+ "НовыйСчетУчета";     // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который перемещается товар

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"       // <Строка,0> - имя списка в документе
	+ "НомерСтроки,"     // <Число> - номер строки в списке
	+ "СчетУчета,"       // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"    // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"           // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"          // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Количество,"      // <Число,15,3> - количество списываемой номенклатуры
	+ "СуммаСписания,"   // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ," // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияПР," // <Число,15,2> - сумма постоянных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВР," // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "Содержание";      // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"             // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                  // <Дата> - период движений - дата документа
	+ "Организация,"             // <СправочникСсылка.Организация> - организация, в которой начисляется торговая наценка
	+ "Подразделение,"           // <Ссылка на справочник подразделений> - подразделение, в котором начисляется торговая наценка
	+ "СкладПолучатель,"         // <СправочникСсылка.Склады> - склад-получатель
	+ "ТипСкладаПолучателя,"     // <ПеречислениеСсылка.ТипыСкладов> - вид склада-получателя
	+ "ТипСкладаОтправителя,"    // <ПеречислениеСсылка.ТипыСкладов> - вид склада-отправителя
	+ "ТипЦенРозничнойТорговли," // <СправочникСсылка.ПрочиеДоходыИРасходы> - тип цен для опеределения розничной цены
	+ "ВключитьНДСвСтоимостьТоваров"; // <Булево> - признак необходимости включения НДС в стоимость товаров

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияТорговаяНаценка(СтруктураПараметров, Движения, Отказ)

	Период                  = СтруктураПараметров.Период;
	Организация             = СтруктураПараметров.Организация;
	Подразделение           = СтруктураПараметров.Подразделение;
	Склад                   = СтруктураПараметров.Склад;
	ТипСклада               = СтруктураПараметров.ТипСклада;
	ТипЦенРозничнойТорговли = СтруктураПараметров.ТипЦенРозничнойТорговли;
	ТаблицаТорговаяНаценка  = СтруктураПараметров.ТаблицаТорговаяНаценка;

	Если ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
		Возврат;
	КонецЕсли;

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Организация, Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	Если СпособОценкиТоваровВРознице <> Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаТорговаяНаценка Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Период;
		Проводка.Организация = Организация;

		Проводка.Содержание = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДСВРознице);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаТаблицы.Партия);
		КонецЕсли;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Подразделение;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетНаценки;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаТаблицы.Партия);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДСВРознице);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Подразделение;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.Сумма;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРДт = СтрокаТаблицы.СуммаПР;
				Проводка.СуммаВРДт = СтрокаТаблицы.СуммаВР;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаПР;
				Проводка.СуммаВРКт = СтрокаТаблицы.СуммаВР;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыТаблицыКомплектующихКомплектация(ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконто1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорПодразделение," // <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "Подразделение,"    // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияПР,"  // <Число,15,2> - сумма постоянных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВР";  // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "КоличествоКомплектов"; // <Число, 15, 3> - количество комплектов, которое должно получиться в результате
		// комплектации

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуКомплектующихРазукомплектация(ТаблицаТовары, ТаблицаСписанныеТовары, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыКомплектующихРазукомплектация(ТаблицаТовары, ТаблицаСписанныеТовары);

	ТаблицаКомплектующие = Параметры.ТаблицаСписанныеТовары.Скопировать();
	ТаблицаКомплектующие.Колонки.Добавить("КоличествоДт", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));

	Если ТаблицаКомплектующие.Количество() = 0 Тогда
		Возврат ТаблицаКомплектующие;
	КонецЕсли;

	// Распределим количества комплектующих по таблице спсисания
	ТекущийНомерСтроки = -1;
	КоличествоОсталосьПогасить = 0;
	КоличествоОсталосьПогаситьДт = 0;
	Для Каждого СтрокаКомплектующей Из ТаблицаКомплектующие Цикл
		Если СтрокаКомплектующей.НомерСтроки <> ТекущийНомерСтроки Тогда
			ТекущийНомерСтроки = СтрокаКомплектующей.НомерСтроки;
			СтрокаТаблицыТовары = ТаблицаТовары[ТекущийНомерСтроки - 1];
			КоличествоОсталосьПогасить = СтрокаТаблицыТовары.Количество;
			КоличествоОсталосьПогаситьДт = СтрокаТаблицыТовары.КоличествоКомплектующих;
		КонецЕсли;

		Если СтрокаКомплектующей.Количество = КоличествоОсталосьПогасить Тогда
			СтрокаКомплектующей.КоличествоДт = КоличествоОсталосьПогаситьДт;
		Иначе
			СтрокаКомплектующей.КоличествоДт = КоличествоОсталосьПогаситьДт * СтрокаКомплектующей.Количество
				/ КоличествоОсталосьПогасить;
		КонецЕсли;

		КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СтрокаКомплектующей.Количество;
		КоличествоОсталосьПогаситьДт = КоличествоОсталосьПогаситьДт - СтрокаКомплектующей.КоличествоДт;
	КонецЦикла;

	Возврат ТаблицаКомплектующие;

КонецФункции

Функция ПодготовитьПараметрыТаблицыКомплектующихРазукомплектация(ТаблицаТовары, ТаблицаСписанныеТовары)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Количество,"               // <Число,15,3> - количество исходных комплектов
	+ "КоличествоКомплектующих";  // <Число,15,2> - количество комплектующих получаемых в результате разукомплектации

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконто1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорПодразделение," // <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "Подразделение,"    // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияПР,"  // <Число,15,2> - сумма постоянных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВР";  // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияКомплектация(ТаблицаКомплектующие, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаКомплектующие) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКомплектация(ТаблицаКомплектующие, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаПартии Из Параметры.ТаблицаКомплектующие Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);

		Проводка.СчетКт = СтрокаПартии.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаПартии.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.КорСчетСписания);

		Если ВедетсяУчетПоПартиям Тогда
			Проводка.СубконтоДт.Партии = СтрокаПартии.Партия;
		КонецЕсли;

		Проводка.СчетДт = СтрокаПартии.КорСчетСписания;
		Для НомерСубконто = 1 По 3 Цикл
			ВидСубконто = СтрокаПартии["ВидКорСубконто" + НомерСубконто];
			Если НЕ ВедетсяУчетПоПартиям И ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Продолжить;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				ВидСубконто, СтрокаПартии["КорСубконто" + НомерСубконто]);
		КонецЦикла;

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаПартии.КорПодразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаПартии.КоличествоДт;
		КонецЕсли;

		Проводка.Сумма = СтрокаПартии.СуммаСписания;

		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СтрокаПартии.СуммаСписанияНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРДт = СтрокаПартии.СуммаСписанияПР;
				Проводка.СуммаВРДт = СтрокаПартии.СуммаСписанияВР;
			КонецЕсли;
		КонецЕсли;

		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаПартии.СуммаСписанияНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРКт = СтрокаПартии.СуммаСписанияПР;
				Проводка.СуммаВРКт = СтрокаПартии.СуммаСписанияВР;
			КонецЕсли;
		КонецЕсли;

		Проводка.НеКорректироватьСтоимостьАвтоматически = СтрокаПартии.Себестоимость <> 0;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыКомплектация(ТаблицаКомплектующие, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаКомплектующие

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КоличествоДт,"     // <Число,15,3> - количество получаемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконто1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорПодразделение," // <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "Подразделение,"    // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияПР,"  // <Число,15,2> - сумма постоянных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВР";  // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков

	Параметры.Вставить("ТаблицаКомплектующие",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаКомплектующие, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата> - период движений - дата документа
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Контрагент,"  // <СправочникСсылка.Контрагенты>
	+ "Содержание";  // <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияКорректировкиПоступленияАгентскихУслуг(РеквизитыДокумента, ТаблицаПоАгентскимУслугам, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПоАгентскимУслугам)
	 Или Не ЗначениеЗаполнено(РеквизитыДокумента) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПолучитьРеквизитыКорректировкиПоступленияУслуг(РеквизитыДокумента);	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаУслуги Из ТаблицаПоАгентскимУслугам Цикл
	
		Содержание = СтрокаУслуги.Содержание + " по вх.д." + Реквизиты.НомерВходящегоДокумента 
			+ " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");		
		
		СформироватьПроводкуКорректировкиПоступленияТоваровУслугКомитентаПоЗакупке(Реквизиты, СтрокаУслуги, Движения, Отказ, Содержание);
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыКорректировкаПоступленияПоЗакупленнымТоварамКомитента(ЗакупленныеТоварыКомитента, ОстаткиЗакупленныеТоварыКомитентов, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"               // 
	+ "Комитент,"         	        // 
	+ "ДоговорКомиссии," 	        // 
	+ "Количество,"                 // <Число,15,3> - количество списываемой номенклатуры
	+ "СуммаНДСВзаиморасчетов,"     // <Число,15,3> - сумма НДС
	+ "СуммаВзаиморасчетов,";       // <Число,15,2> - сумма списываемой номенклатуры в валюте расчетов с контрагентом (при расчетах в валюте)

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ЗакупленныеТоварыКомитента, СписокОбязательныхКолонок));
		

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"     // 
	+ "Комитент,"    	  // 
	+ "ДоговорКомиссии,"  // 
	+ "Партия,"           // 
	+ "ДатаПоставки,"     // 
	+ "КоличествоОстаток,"// 
	+ "СуммаНДСОстаток,"// 
	+ "СуммаОстаток";     // 
	
	Параметры.Вставить("ОстаткиЗакупленныеТоварыКомитентов",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ОстаткиЗакупленныеТоварыКомитентов, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"               // <Дата> - период движений - дата документа
	+ "Организация,"          // <СправочникСсылка.Организации>
	+ "Регистратор,"          //
	+ "Контрагент,"           // <СправочникСсылка.Контрагенты>
 	+ "ДоговорКонтрагента,"   //
	+ "Подразделение,"        //
	+ "Сделка,"        //
	+ "ВалютаВзаиморасчетов"; // <СправочникСсылка.Валюты> - валюта расчетов с контрагентом (при расчетах в валюте)

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияКорректировкаПоступленияПоЗакупленнымТоварамКомитента(СписанныеТоварыКомитента, ОстаткиЗакупленныеТоварыКомитентов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(СписанныеТоварыКомитента)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
		
	Параметры = ПодготовитьПараметрыКорректировкаПоступленияПоЗакупленнымТоварамКомитента(СписанныеТоварыКомитента, ОстаткиЗакупленныеТоварыКомитентов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		//Спишем регистр закупленные товары комитентов
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", 	СтрокаТаблицы.Номенклатура);
		СтруктураОтбора.Вставить("Комитент",		СтрокаТаблицы.Комитент);
		СтруктураОтбора.Вставить("ДоговорКомиссии", СтрокаТаблицы.ДоговорКомиссии);
		
		НайденныеСтроки = Параметры.ОстаткиЗакупленныеТоварыКомитентов.НайтиСтроки(СтруктураОтбора);
		
		РаспределитьСумма 		= СтрокаТаблицы.СуммаВзаиморасчетов;
		РаспределитьСуммаНДС 	= СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		РаспределитьКоличество 	= СтрокаТаблицы.Количество;
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если (Строка.СуммаОстаток = 0 И РаспределитьСумма < 0) 
				 И (Строка.СуммаНДСОстаток = 0 И РаспределитьСуммаНДС<0)
				 И (Строка.КоличествоОстаток = 0 И РаспределитьКоличество<0) Тогда
				Продолжить;
			КонецЕсли;
			Если РаспределитьСумма = 0 
				И РаспределитьКоличество = 0 
				И РаспределитьСуммаНДС = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если РаспределитьСуммаНДС > 0 Тогда
				СуммаНДСПоСтроке = РаспределитьСуммаНДС;
			Иначе
				СуммаНДСПоСтроке = -МИН(-РаспределитьСуммаНДС, Строка.СуммаНДСОстаток);
			КонецЕсли; 
			
			Если РаспределитьСумма > 0 Тогда
				СуммаПоСтроке = РаспределитьСумма;
			Иначе
				СуммаПоСтроке = -МИН(-РаспределитьСумма, Строка.СуммаОстаток);
			КонецЕсли;
			
			Если РаспределитьКоличество > 0 Тогда
				КоличествоПоСтроке = РаспределитьКоличество;
			Иначе
				КоличествоПоСтроке 	= -МИН(-РаспределитьКоличество, Строка.КоличествоОстаток);
			КонецЕсли; 
			
			
			
			Движение = Движения.ЗакупленныеТоварыКомитентов.ДобавитьПриход();
			
			Движение.Период		 		= Реквизиты.Период;
			Движение.Организация 		= Реквизиты.Организация;
			
			Движение.Контрагент		 	= СтрокаТаблицы.Комитент;
			Движение.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКомиссии;
			Движение.Номенклатура 		= СтрокаТаблицы.Номенклатура;
			Движение.Партия				= Строка.Партия;
			
			Движение.Количество 		= КоличествоПоСтроке;
			Движение.СуммаНДС	 		= СуммаНДСПоСтроке;
			Движение.Сумма				= СуммаПоСтроке;
			
			Строка.СуммаОстаток 		= Строка.СуммаОстаток + СуммаПоСтроке;
			Строка.СуммаНДСОстаток 		= Строка.СуммаНДСОстаток + СуммаНДСПоСтроке;
			Строка.КоличествоОстаток 	= Строка.КоличествоОстаток + КоличествоПоСтроке;
			РаспределитьСумма 			= РаспределитьСумма - СуммаПоСтроке;
			РаспределитьСуммаНДС 		= РаспределитьСуммаНДС - СуммаНДСПоСтроке;
			РаспределитьКоличество 		= РаспределитьКоличество - КоличествоПоСтроке;
		КонецЦикла;
		
		Если РаспределитьСумма < 0 ИЛИ РаспределитьСуммаНДС < 0 ИЛИ РаспределитьКоличество < 0 Тогда
			
			Движение = Движения.ЗакупленныеТоварыКомитентов.ДобавитьПриход();
			Движение.Период		 		= Реквизиты.Период;
			Движение.Организация 		= Реквизиты.Организация;
			
			Движение.Контрагент		 	= СтрокаТаблицы.Комитент;
			Движение.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКомиссии;
			Движение.Номенклатура 		= СтрокаТаблицы.Номенклатура;
			
			Движение.Количество 		= РаспределитьКоличество;
			Движение.Сумма				= РаспределитьСумма;
			Движение.СуммаНДС			= РаспределитьСуммаНДС;
						
		КонецЕсли;
	
	КонецЦикла; 
	
	Движения.ЗакупленныеТоварыКомитентов.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыКорректировкаПоступлениеТоваров( ТаблицаВозвращенныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "Период,"           // <Дата> - дата списания
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконто1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорПодразделение," // <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "Подразделение,"    // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияПР,"  // <Число,15,2> - сумма постоянных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВР,"  // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаКорСписанияНУ,"// <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаКорСписанияПР,"// <Число,15,2> - сумма постоянных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаКорСписанияВР";// <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	
	Параметры.Вставить("ТаблицаВозвращенныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВозвращенныеТовары, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"              // <Дата> - период движений - дата документа
	+ "Организация,"         // <СправочникСсылка.Организации>
	+ "Контрагент,"          // <СправочникСсылка.Контрагенты>
	+ "Содержание,"          // <Строка,150>
	+ "ОтчетностьПодписана," // <Булево>
	+ "ПрошлыйПериод,"       // <Булево>
	+ "Регистратор,"       	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "ДатаДокументаРеализации,"      // <Дата> - дата корректируемого документа
	+ "СтатьяПрочихДоходовИРасходов"; // <СправочникСсылка>
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура УстановитьПараметрыПроводки(Проводка, СвойстваСчета, ТипАналитики, Подразделение, Количество, СуммаНУ, СуммаПР, СуммаВР, ОтражатьВНалоговомУчете, ПоддержкаПБУ18)
	
	Если СвойстваСчета.УчетПоПодразделениям Тогда
		Проводка["Подразделение"+ТипАналитики] = Подразделение;
	КонецЕсли;

	Если СвойстваСчета.Количественный Тогда
		Проводка["Количество"+ТипАналитики]  = Количество;
	КонецЕсли;

	Если ОтражатьВНалоговомУчете И СвойстваСчета.НалоговыйУчет Тогда
		Проводка["СуммаНУ"+ТипАналитики] = СуммаНУ;
		Если ПоддержкаПБУ18 Тогда
			Проводка["СуммаПР" + ТипАналитики] = СуммаПР;
			Проводка["СуммаВР" + ТипАналитики] = СуммаВР;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуСписанияТовара(Проводка, Реквизиты, СтрокаПартии, ТипАналитики, МножительПараметров, ВедетсяУчетПоПартиям, ОтражатьВНалоговомУчете, ПоддержкаПБУ18)
	
	Счет = Проводка["Счет"+ТипАналитики];
	СвойстваСчета =  БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	БухгалтерскийУчет.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], "Номенклатура", СтрокаПартии.Номенклатура);
	БухгалтерскийУчет.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], "Склады", СтрокаПартии.Склад);
	БухгалтерскийУчет.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], "Контрагенты", Реквизиты.Контрагент);
	Если ВедетсяУчетПоПартиям ИЛИ СвойстваСчета.Забалансовый Тогда
		БухгалтерскийУчет.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], "Партии", СтрокаПартии.Партия);
	КонецЕсли;
	
	УстановитьПараметрыПроводки(Проводка, СвойстваСчета, ТипАналитики, СтрокаПартии.Подразделение, МножительПараметров * СтрокаПартии.Количество,
		МножительПараметров * СтрокаПартии.СуммаСписанияНУ, МножительПараметров * СтрокаПартии.СуммаСписанияПР, 
		МножительПараметров * СтрокаПартии.СуммаСписанияВР, ОтражатьВНалоговомУчете, ПоддержкаПБУ18);
	
КонецПроцедуры

Функция ПодготовитьПараметрыКорректировкаСтоимостиТары(ТаблицаТара, ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТара

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка,0> - имя списка в документе
	+ "НомерСтроки,"          // <Число> - номер строки в списке
	+ "Количество,"           // <Число,15,3> - количество отгружаемой тары
	+ "СуммаВзаиморасчетов,"  // <Число,15,3> - сумма отгружаемой тары в валюте
	+ "СуммаРуб";             // <Число,15,2> - сумма отгружаемой тары

	Параметры.Вставить("ТаблицаТара",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТара, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"     // <Строка,0> - имя списка в документе
	+ "НомерСтроки,"   // <Число> - номер строки в списке
	+ "Количество,"    // <Число,15,3> - количество списываемой тары, определенное по данным остатков
	+ "СуммаСписания"; // <Число,15,2> - сумма списываемой тары, определенная по данным остатков

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       // <Дата> - период движений - дата документа
	+ "Организация,"                  // <СправочникСсылка.Организация> - организация, из которой отгружается тара
	+ "Подразделение,"                // <СправочникСсылка.ПодразделенияОрганизации> - подразделение организации, из которого отгружается тара
	+ "Контрагент,"                   // <СправочникСсылка.Контрагенты> - покупатель тары
	+ "ДоговорКонтрагента,"           // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому отгружается тара
	+ "ВалютаВзаиморасчетов,"         // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком
	+ "СчетУчетаРасчетовПоТаре,"      // <ПланСчетовСсылка.Хозрасчетный> - счет учета с контрагентом по таре, обычно 76.05
	+ "Содержание";                   // <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция УстановитьВалютныеСуммыСписанияКорректировкаСтоимости(Знач ТаблицаСписанныеТовары, Реквизиты)
	
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияВал", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаСписанныеТовары Цикл
		
		СтрокаТаблицы.СуммаСписанияВал = ?(Реквизиты.КурсВзаиморасчетов = 0, 
												СтрокаТаблицы.СуммаСписания,
												СтрокаТаблицы.СуммаСписания * Реквизиты.КратностьВзаиморасчетов / Реквизиты.КурсВзаиморасчетов);
	
	КонецЦикла; 
	
	Возврат ТаблицаСписанныеТовары;

КонецФункции

Функция ПодготовитьПараметрыИзменениеСебестоимостиОстатковТоваров(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"           // <Число> - номер строки в списке
	+ "Номенклатура,"          // <СправочникСсылка.Номенклатура> - изменяемая номенклатура
	+ "СчетУчета,"             // <ПланСчетовСсылка.Хозрасчетный> - счет, на котором изменяется себестоимость остатков товаров
	+ "Подразделение,"         // <СправочникСсылка.ПодразделенияОрганизации> - подразделение организации, из которого возвращается товар
	+ "Склад,"                 // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "ДокументОприходования," // <ДокументСсылка.*> - документ поступления номенклатуры (партия), указанный в документе списания
	+ "СтавкаНДС,"             // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС
	+ "СчетУчетаНУ,"           // <ПланСчетовСсылка.Хозрасчетный> - счет, на котором отражается изменение себестоимости товаров для целей налогового учета
	+ "СтатьяЗатратНУ,"        // <СтравочникСсылка.ПрочиеДоходыИРасходы> ИЛИ <СправочникСсылка.СтатьиЗатрат> - используется в случае, когда изменение себестоимости в БУ отражается иначе, чем в НУ
	+ "ВидСубконтоСтатьиНУ,"   // ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> ИЛИ <Неопределено> - вид субконто для записи СтатьяЗатратНУ
	+ "КорСчет,"               // <ПланСчетовСсылка.Хозрасчетный> - корреспондирующий счет (счет учета взаиморасчетов)
	+ "ВидКорСубконто1,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"          // - значение субконто счета, на который списывается номенклатура
	+ "СуммаБУ,"               // <Число,15,2> - сумма изменения себестоимости в БУ
	+ "СуммаНУ,"               // <Число,15,2> - сумма изменения себестоимости в НУ
	+ "СуммаВзаиморасчетов,"   // <Число,15,2> - сумма изменения себестоимости для отражения во взаиморасчетах с контрагентом
	+ "ЗатратыПринимаютсяКНУ," // <Булево> - нужно ли принимать к учету затраты НУ?
	+ "Содержание";            // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));


	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                        // <Дата> - период движений - дата документа
	+ "Организация,"                   // <СправочникСсылка.Организация> - организация, из которой возвращается товар
	+ "Контрагент,"                    // <СправочникСсылка.Контрагенты> - поставщик товара
	+ "ВалютаВзаиморасчетов";          // <СправочникСсылка.Валюты> - валюта взаиморасчетов с контрагентом (при расчетах в валюте)

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуСписанныеТоварыСУчетомВозврата(ТаблицаТовары, ТаблицаВозвраты, ТаблицаРеквизиты, Отказ) Экспорт
	
	МатериалыДляОценкиСтоимости = Новый Структура("СписанныеТовары", ТаблицаТовары);
	
	МатериалыСОценкойСтоимости = ПодготовитьТаблицыСписанныеТоварыСУчетомВозврата(
		МатериалыДляОценкиСтоимости,
		ТаблицаРеквизиты,
		ТаблицаВозвраты,
		Отказ);
		
	Возврат МатериалыСОценкойСтоимости.СписанныеТовары;

КонецФункции

// Подготавливает таблицы расхода товаров, в которых нужна расчетная оценка стоимости списания.
//
// Параметры:
//  ТаблицыТовары - Структура - Содержит таблицы значений с списком товаров, оценку которых нужно получить
//  ТаблицаРеквизиты - ТаблицаЗначений - Таблица с реквизитами документа, влияющими на списание товаров
//  Отказ - Булево - Признак ошибки, выявленной в ходе подготовки таблицы
// 
Функция ПодготовитьТаблицыСписанныеТовары(ТаблицыТовары, ТаблицаРеквизиты, Отказ) Экспорт

	Возврат ПодготовитьТаблицыСписанныеТоварыСУчетомВозврата(ТаблицыТовары, ТаблицаРеквизиты, Неопределено, Отказ);

КонецФункции

Процедура ВывестиСообщениеОбОшибке(Количество, КоличествоОсталосьПогасить, Регистратор, ИмяСписка = "", СинонимСписка = "", НомерСтроки = "", Отказ)

	ТекстОшибки = НСтр("ru='Указанное количество превышает остаток. Остаток: %1; Не хватает: %2'");
		
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
		Количество - КоличествоОсталосьПогасить,
		КоличествоОсталосьПогасить);
		
	ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
		?(ЗначениеЗаполнено(ИмяСписка), "Колонка", "Поле"), 
		"Корректность",
		НСтр("ru = 'Количество'"),
		НомерСтроки,
		СинонимСписка,
		ТекстОшибки);
	
		
	Если БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяРеализациейОтгруженныхТоваров(Регистратор) Тогда
		ПолеКоличество	= "ДокументОтгрузки";
	ИначеЕсли НЕ ЗначениеЗаполнено(ИмяСписка) Тогда
		ПолеКоличество	= "Количество";
	Иначе
		ПолеКоличество	= ИмяСписка + "[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Регистратор, ПолеКоличество, "Объект", Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыТаблицыСписанныеТовары(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"             // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"         // <Строка,0> - синоним списка
	+ "Период,"                // <Дата> - период движения
	+ "НомерСтроки,"           // <Число> - номер строки в списке
	+ "СчетУчета,"             // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"          // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"                 // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "ДокументОприходования," // <ДокументСсылка.*> - документ поступления номенклатуры (партия), указанный в документе списания
	+ "Себестоимость,"         // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"            // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"       // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконто1,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"          // - значение субконто счета, на который списывается номенклатура
	+ "Комитент," 					//	<СправочникСсылка.Контрагенты> - владелец проданного товара (услуги)
	+ "ДоговорКомиссии," 			//	<СправочникСсылка.ДоговорыКонтрагентов> - договор комиссии
	+ "СчетАвансовСКомитентом," 	//	<ПланСчетовСсылка.Хозрасчетный> - учет расчетов по авансам
	+ "СчетРасчетовСКомитентом," 	//	<ПланСчетовСсылка.Хозрасчетный> - учет расчетов
	+ "ВалютаРасчетовСКомитентом,"	//	<СправочникСсылка.Валюты> - валюта взаиморасчетов по договору комиссии
	+ "СуммаРасчетовСКомитентом,"	//	<Число(15,2)> - выручка (сумма отгрузки)
	+ "КорПодразделение";           //  <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	
	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "Контрагент,"    // <СправочникСсылка.Контрагенты>
	+ "Содержание";    // <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Распаковывает значение аналитики выбытия запаса из строки таблицы оцененных выбытий ("списанных товаров").
//
// Оценка стоимости в этом модуле реализована с детализацией до значений аналитики выбытия запасов (КорСубконто).
// При этом 
// - данные о кор. аналитике упаковываются в пары полей ВидКорСубконто* и КорСубконто*
// - процедуры оценки теряют всю другую информацию об аналитике.
// См. ПолучитьПустуюТаблицуСписанныеТовары(), ПодготовитьПараметрыТаблицыСписанныеТовары().
//
// Для операций над данными об оцененной стоимости запасов может понадобиться значение конкретной аналитики.
// Ее можно получить, распаковав данные полей ВидКорСубконто* и КорСубконто*
//
// Параметры:
//  СтрокаТаблицыСписанныеТовары - СтрокаТаблицыЗначений - строка таблицы, соответствующей критериям 
//                                 ПолучитьПустуюТаблицуСписанныеТовары(), ПодготовитьПараметрыТаблицыСписанныеТовары()
//  ВидСубконто					 - ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - запрашиваемый вид аналитики
// 
// Возвращаемое значение:
//  Характеристика.ВидыСубконтоХозрасчетные - значение запрошенного вида в строке
//  Неопределено - значение запрошенного вида в строке отсутствует
//
Функция ЗначениеКорСубконто(СтрокаТаблицыСписанныеТовары, ВидСубконто) Экспорт
	
	
	МаксимальноеКоличествоСубконто = 3;
	
	Для НомерСубконто = 1 По МаксимальноеКоличествоСубконто Цикл
		Если СтрокаТаблицыСписанныеТовары["ВидКорСубконто" + НомерСубконто] <> ВидСубконто Тогда
			Продолжить;
		КонецЕсли;
		Возврат СтрокаТаблицыСписанныеТовары["КорСубконто" + НомерСубконто];
	КонецЦикла;
	
	Возврат Неопределено; // Нет значения такого вида субконто
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСписанныеКомиссионныеТовары(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"             // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"         // <Строка,0> - синоним списка
	+ "Период,"                // <Дата> - период движения
	+ "НомерСтроки,"           // <Число> - номер строки в списке
	+ "СчетУчета,"             // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"          // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"                 // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "ДокументОприходования," // <ДокументСсылка.*> - документ поступления номенклатуры (партия), указанный в документе списания
	+ "Себестоимость,"         // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"            // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"       // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконто1,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"          // - значение субконто счета, на который списывается номенклатура
	+ "Комитент," 					//	<СправочникСсылка.Контрагенты> - владелец проданного товара (услуги)
	+ "ДоговорКомиссии," 			//	<СправочникСсылка.ДоговорыКонтрагентов> - договор комиссии
	+ "СчетАвансовСКомитентом," 	//	<ПланСчетовСсылка.Хозрасчетный> - учет расчетов по авансам
	+ "СчетРасчетовСКомитентом," 	//	<ПланСчетовСсылка.Хозрасчетный> - учет расчетов
	+ "ВалютаРасчетовСКомитентом,"	//	<СправочникСсылка.Валюты> - валюта взаиморасчетов по договору комиссии
	+ "СуммаРасчетовСКомитентом,"	//	<Число(15,2)> - выручка (сумма отгрузки)
	+ "КорПодразделение,"           //  <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "Покупатель,"                 //  <СправочникСсылка.Контрагенты>
	+ "ВыставленСФ,"                //  <Булево>
	+ "ДатаСФ,"                     //  <Дата>
	+ "СчетФактура,"                //  <ДокументСсылка.СчетФактураВыданный>
	+ "КлючСтроки";                 //  <Число(5,0)>

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "Контрагент,"    // <СправочникСсылка.Контрагенты>
	+ "Содержание";    // <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьРеквизитыСписанныеТовары(ТаблицаРеквизиты, ТаблицаВозвраты)
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "Контрагент,"    // <СправочникСсылка.Контрагенты>
	+ "Содержание";    // <Строка,150>
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "Партия,"				// <ДокументСсылка.*> - документ учета партии
	+ "Количество,"			// <Число (15,3)> - количество возвращенной партии
	+ "Номенклатура,"		// <СправочникСсылка.Номенклатура> 
	+ "Подразделение,"		// <СправочникСсылка.ПодразделенияОрганизаций>
	+ "Склад,"				// <СправочникСсылка.Контрагенты>
	+ "СуммаСписания,"		// <Число(15,2)> сумма возврата по партии
	+ "СуммаСписанияНУ,"	// <Число(15,2)> сумма возврата по партии (НУ)
	+ "СуммаСписанияПР,"	// <Число(15,2)> сумма возврата по партии (ПР)
	+ "СуммаСписанияВР,"	// <Число(15,2)> сумма возврата по партии (ВР)
	+ "СчетУчета";			// <ПланСчетовСсылка.Хозрасчетный>
	
	Параметры.Вставить("ТаблицаВозвраты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВозвраты, СписокОбязательныхКолонок));
		
	Возврат Параметры;
КонецФункции

Функция ПодготовитьТаблицуЗакупленныхТоварыКомитентов(ТаблицаТоварыКомитентов, ТаблицаРеквизиты, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТоварыКомитентов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат ПодготовитьПустуюТаблицуЗакупленныхТоваровКомитента();
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыЗакупленныхТоварыКомитентов(ТаблицаТоварыКомитентов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Контрагенты",  			Параметры.ЗакупленныеТовары.ВыгрузитьКолонку("Комитент"));
	Запрос.УстановитьПараметр("ДоговорыКонтрагентов",  	Параметры.ЗакупленныеТовары.ВыгрузитьКолонку("ДоговорКомиссии"));
	Запрос.УстановитьПараметр("Номенклатура", 			Параметры.ЗакупленныеТовары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Организация", 			Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата",  					Реквизиты.Период);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗакупленныеТоварыКомитентовОстатки.Партия КАК Партия,
	|	ЗакупленныеТоварыКомитентовОстатки.Партия.Дата КАК ДатаПоставки,
	|	СУММА(ЗакупленныеТоварыКомитентовОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗакупленныеТоварыКомитентовОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	ЗакупленныеТоварыКомитентовОстатки.Контрагент КАК Комитент,
	|	ЗакупленныеТоварыКомитентовОстатки.ДоговорКонтрагента КАК ДоговорКомиссии,
	|	ЗакупленныеТоварыКомитентовОстатки.Номенклатура,
	|	СУММА(ЗакупленныеТоварыКомитентовОстатки.СуммаНДСОстаток) КАК СуммаНДСОстаток
	|ИЗ
	|	РегистрНакопления.ЗакупленныеТоварыКомитентов.Остатки(
	|			&Дата,
	|			Организация = &Организация
	|				И ДоговорКонтрагента В (&ДоговорыКонтрагентов)
	|				И Номенклатура В (&Номенклатура)
	|				И Контрагент В (&Контрагенты)) КАК ЗакупленныеТоварыКомитентовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗакупленныеТоварыКомитентовОстатки.Партия,
	|	ЗакупленныеТоварыКомитентовОстатки.Контрагент,
	|	ЗакупленныеТоварыКомитентовОстатки.ДоговорКонтрагента,
	|	ЗакупленныеТоварыКомитентовОстатки.Номенклатура,
	|	ЗакупленныеТоварыКомитентовОстатки.Партия.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоставки";
	
	Если ЗначениеЗаполнено(Реквизиты.Сделка) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "Организация = &Организация И Партия = &Сделка");
		Запрос.УстановитьПараметр("Сделка", Реквизиты.Сделка);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыЗакупленныхТоварыКомитентов(ТаблицаТоварыКомитентов, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"       // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Комитент,"         // <СправочникСсылка.Контрагенты> - комитент для которого закуплена номенклатура
	+ "ДоговорКомиссии"; // <СправочникСсылка.ДоговорыКонтрагентов> - договор с комитентом для которого закуплена номенклатура

	Параметры.Вставить("ЗакупленныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТоварыКомитентов, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                 // <Дата> - период движений - дата документа
	+ "Регистратор,"            // <ДокументСсылка>
	+ "Организация,"            // <СправочникСсылка.Организации>
	+ "Сделка";                 // <ДокументСсылка>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПустуюТаблицуЗакупленныхТоваровКомитента()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Комитент",  		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаЗначений.Колонки.Добавить("ДоговорКомиссии", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаЗначений.Колонки.Добавить("Партия", 			Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ТаблицаЗначений.Колонки.Добавить("ДатаПоставки", 	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаЗначений.Колонки.Добавить("КоличествоОстаток", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	ТаблицаЗначений.Колонки.Добавить("СуммаОстаток", 	ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаЗначений.Колонки.Добавить("СуммаНДСОстаток", 	ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура ОчиститьНеиспользуемуюАналитику(СписанныеТовары, СпособОценкиМПЗПоСредней)

	// При отложенном проведении к остаткам не обращаемся.
	// При этом документы подготавливают таблицы для общего случая со всеми доступными аналитиками, 
	// поэтому в таблицах могут быть заполнены аналитики по партиям и складам, 
	// которые из остатков получались бы пустыми.
	// Очищаем такие принудительно.

	Если СписанныеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	КешСчетаСПартионнымУчетом 	= Новый Соответствие;
	КешСчетаСУчетомПоСкладам	= Новый Соответствие;
	КешСчетаКомиссионногоТовара = Новый Соответствие;
	
	ПустойСклад = Справочники.Склады.ПустаяСсылка();
	
	Для Каждого КлючИЗначение Из СписанныеТовары Цикл
	
		ТаблицаСписанныеТовары 	= КлючИЗначение.Значение;
		
		Для Каждого СписаннаяПартия Из ТаблицаСписанныеТовары Цикл
		
			СчетУчета = СписаннаяПартия.СчетУчета;

			// Склад
			ЭтоСчетСУчетомПоСкладам = КешСчетаСУчетомПоСкладам[СчетУчета];
			Если ЭтоСчетСУчетомПоСкладам = Неопределено Тогда
				ЭтоСчетСУчетомПоСкладам = БухгалтерскийУчет.ВедетсяУчетПоСкладам(СчетУчета);
				КешСчетаСУчетомПоСкладам.Вставить(СчетУчета, ЭтоСчетСУчетомПоСкладам);
			КонецЕсли;
			
			Если НЕ ЭтоСчетСУчетомПоСкладам Тогда
				СписаннаяПартия.Склад = ПустойСклад;
			КонецЕсли;
		
			// Партия
			Если ЗначениеЗаполнено(СписаннаяПартия.Партия) Тогда
				
				ЭтоСчетСПартионнымУчетом = КешСчетаСПартионнымУчетом[СчетУчета];
				Если ЭтоСчетСПартионнымУчетом = Неопределено Тогда
					ЭтоСчетСПартионнымУчетом = БухгалтерскийУчет.НаСчетеВедетсяПартионныйУчет(СчетУчета);
					КешСчетаСПартионнымУчетом.Вставить(СчетУчета, ЭтоСчетСПартионнымУчетом);
				КонецЕсли;
				
				ЭтоСчетУчетаКомиссионногоТовара = КешСчетаКомиссионногоТовара[СчетУчета];
				Если ЭтоСчетУчетаКомиссионногоТовара = Неопределено Тогда
					ЭтоСчетУчетаКомиссионногоТовара = БухгалтерскийУчетПовтИсп.СчетУчетаКомиссионногоТовара(СчетУчета);
					КешСчетаКомиссионногоТовара.Вставить(СчетУчета, ЭтоСчетУчетаКомиссионногоТовара);
				КонецЕсли;
				
				Если (СпособОценкиМПЗПоСредней И НЕ ЭтоСчетУчетаКомиссионногоТовара)
					ИЛИ НЕ ЭтоСчетСПартионнымУчетом Тогда
					СписаннаяПартия.Партия = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеТорговойНаценкиАТТ(ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"    // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"           // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"          // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Количество,"      // <Число,15,3> - количество списываемой номенклатуры
	+ "Подразделение,"   // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "КорПодразделение,"// <Ссылка на справочник подразделений> - подразделение, на которое списывается номенклатура
	+ "КорСчетСписания," // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконто1," // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2," // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3," // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"    // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"    // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"    // - значение субконто счета, на который списывается номенклатура
	+ "Содержание,"      // <Строка,150> - содержание проводки
	+ "СуммаНаценки,"    // <Число,15,2>
	+ "СуммаНаценкиНУ,"  // <Число,15,2>
	+ "СуммаНаценкиПР,"  // <Число,15,2>
	+ "СуммаНаценкиВР"   // <Число,15,2>
	;

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"             // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                  // <Дата> - период движений - дата документа
	+ "Организация,"             // <СправочникСсылка.Организация> - организация, в которой списывается торговая наценка
	+ "Подразделение,"           // <Ссылка на справочник подразделений> - подразделение, в котором списывается торговая наценка
	+ "ТипСклада,"               // <ПеречислениеСсылка.ТипыСкладов> - вид склада, в котором списывается торговая наценка
	+ "ТипЦенРозничнойТорговли"; // <СправочникСсылка.ПрочиеДоходыИРасходы> - тип цен для опеределения розничной цены

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуСписанияТорговойНаценкиАТТ(ТаблицаСписанныеТовары, ТаблицаРеквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаСписанныеТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыСписанияТорговойНаценкиАТТ(ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	
	ТипСуммыСписания = ОбщегоНазначения.ОписаниеТипаЧисло(15,2);
	
	//Дополним таблицу нужными колонками
	Параметры.ТаблицаСписанияТорговойНаценкиАТТ.Колонки.Добавить("СуммаНаценки",   ТипСуммыСписания);
	Параметры.ТаблицаСписанияТорговойНаценкиАТТ.Колонки.Добавить("СуммаНаценкиНУ", ТипСуммыСписания);
	Параметры.ТаблицаСписанияТорговойНаценкиАТТ.Колонки.Добавить("СуммаНаценкиПР", ТипСуммыСписания);
	Параметры.ТаблицаСписанияТорговойНаценкиАТТ.Колонки.Добавить("СуммаНаценкиВР", ТипСуммыСписания);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период)
							= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	Если Реквизиты.ТипСклада <> Перечисления.ТипыСкладов.РозничныйМагазин
	 Или Не УчетВПродажныхЦенах Тогда
		Возврат Параметры.ТаблицаСписанияТорговойНаценкиАТТ;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;

	СтруктураПараметровТорговаяНаценкаАТТ = Новый Структура;
	СтруктураПараметровТорговаяНаценкаАТТ.Вставить("Регистратор", Реквизиты.Регистратор);
	СтруктураПараметровТорговаяНаценкаАТТ.Вставить("Период", Реквизиты.Период);
	СтруктураПараметровТорговаяНаценкаАТТ.Вставить("Организация", Реквизиты.Организация);
	СтруктураПараметровТорговаяНаценкаАТТ.Вставить("ТаблицаСписанныеТовары", Параметры.ТаблицаСписанияТорговойНаценкиАТТ);
	ТаблицаТорговойНаценки = ПодготовитьТаблицуТорговойНаценкиАТТ(СтруктураПараметровТорговаяНаценкаАТТ);
	ТаблицаТорговойНаценки.Индексы.Добавить("Номенклатура, Склад, Партия");

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаСписанияТорговойНаценкиАТТ Цикл

		Сумма = СтрокаТаблицы.СуммаСписания;

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		СтруктураОтбора.Вставить("Склад", СтрокаТаблицы.Склад);
		СтруктураОтбора.Вставить("Партия", СтрокаТаблицы.Партия);

		НайденныеСтрокиТорговойНаценки = ТаблицаТорговойНаценки.НайтиСтроки(СтруктураОтбора);

		СтрокаТорговойНаценки = ?(НайденныеСтрокиТорговойНаценки.Количество() > 0, НайденныеСтрокиТорговойНаценки[0], Неопределено);

		Если СтрокаТорговойНаценки = Неопределено Тогда
			СтрокаТаблицы.СуммаНаценки   = 0;
			СтрокаТаблицы.СуммаНаценкиНУ = 0;
			СтрокаТаблицы.СуммаНаценкиПР = 0;
			СтрокаТаблицы.СуммаНаценкиВР = 0;
		ИначеЕсли СтрокаТорговойНаценки.ПродажнаяСтоимость + СтрокаТорговойНаценки.СписаннаяНаценкаСНачалаМесяца <> 0 Тогда
			СтрокаТаблицы.СуммаНаценки   = СтрокаТорговойНаценки.ТорговаяНаценка * Сумма / (СтрокаТорговойНаценки.ПродажнаяСтоимость + СтрокаТорговойНаценки.СписаннаяНаценкаСНачалаМесяца);
			СтрокаТаблицы.СуммаНаценкиНУ = СтрокаТорговойНаценки.ТорговаяНаценкаНУ * Сумма / (СтрокаТорговойНаценки.ПродажнаяСтоимость + СтрокаТорговойНаценки.СписаннаяНаценкаСНачалаМесяца);
			СтрокаТаблицы.СуммаНаценкиПР = СтрокаТорговойНаценки.ТорговаяНаценкаПР * Сумма / (СтрокаТорговойНаценки.ПродажнаяСтоимость + СтрокаТорговойНаценки.СписаннаяНаценкаСНачалаМесяца);
			СтрокаТаблицы.СуммаНаценкиВР = СтрокаТорговойНаценки.ТорговаяНаценкаВР * Сумма / (СтрокаТорговойНаценки.ПродажнаяСтоимость + СтрокаТорговойНаценки.СписаннаяНаценкаСНачалаМесяца);
		Иначе
			СтрокаТаблицы.СуммаНаценки   = Сумма;
			СтрокаТаблицы.СуммаНаценкиНУ = Сумма;
			СтрокаТаблицы.СуммаНаценкиПР = 0;
			СтрокаТаблицы.СуммаНаценкиВР = 0;
		КонецЕсли;
		
		СтрокаТаблицы.СуммаСписания    = СтрокаТаблицы.СуммаСписания   - СтрокаТаблицы.СуммаНаценки;
		СтрокаТаблицы.СуммаСписанияНУ  = СтрокаТаблицы.СуммаСписанияНУ - СтрокаТаблицы.СуммаНаценкиНУ;
		СтрокаТаблицы.СуммаСписанияПР  = СтрокаТаблицы.СуммаСписанияПР - СтрокаТаблицы.СуммаНаценкиПР;
		СтрокаТаблицы.СуммаСписанияВР  = СтрокаТаблицы.СуммаСписанияВР - СтрокаТаблицы.СуммаНаценкиВР;
		
		//Установим корр. счет списания наценки для случая перемещения между розничными складами
		Если СтрокаТаблицы.КорСчетСписания = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
			СтрокаТаблицы.КорСчетСписания = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
		ИначеЕсли СтрокаТаблицы.КорСчетСписания = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
			СтрокаТаблицы.КорСчетСписания = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		Конецесли;
		
		СтрокаТаблицы.Содержание = НСтр("ru = 'Списание торговой наценки'");
		
	КонецЦикла;
	
	Возврат(Параметры.ТаблицаСписанияТорговойНаценкиАТТ);
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСписанияТорговойНаценкиАТТ(ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"       // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "НомерСтроки,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Номенклатура,"    // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"           // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"          // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Количество,"      // <Число,15,3> - количество списываемой номенклатуры
	+ "Подразделение,"   // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "КорСчетСписания," // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорПодразделение,"   // <Ссылка на справочник подразделений> - подразделение, на которое списывается номенклатура
	+ "ВидКорСубконто1," // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2," // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3," // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"    // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"    // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"    // - значение субконто счета, на который списывается номенклатура
	+ "Содержание,"      // <Строка,150> - содержание проводки
	+ "СуммаСписания,"   // <Число,15,2>
	+ "СуммаСписанияНУ," // <Число,15,2>
	+ "СуммаСписанияПР," // <Число,15,2>
	+ "СуммаСписанияВР"  // <Число,15,2>
	;

	Параметры.Вставить("ТаблицаСписанияТорговойНаценкиАТТ",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"             // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                  // <Дата> - период движений - дата документа
	+ "Организация,"             // <СправочникСсылка.Организация> - организация, в которой списывается торговая наценка
	+ "Подразделение,"           // <Ссылка на справочник подразделений> - подразделение, в котором списывается торговая наценка
	+ "ТипСклада,"               // <ПеречислениеСсылка.ТипыСкладов> - вид склада, в котором списывается торговая наценка
	+ "ТипЦенРозничнойТорговли"; // <СправочникСсылка.ПрочиеДоходыИРасходы> - тип цен для опеределения розничной цены

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыТаблицыСписанныеТоварыНТТ(ТаблицаТоварыНТТ, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"             // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"         // <Строка,0> - синоним списка
	+ "НомерСтроки,"           // <Число> - номер строки в списке
	+ "Номенклатура,"      // <СправочникСсылка.Номенклатура> - Номенклатура для товаров, списываемых с НТТ при учете по стоимости приобретения
	+ "СчетУчета,"         // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара в НТТ
	+ "КорСчетСписания,"   // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается товар из НТТ
	+ "КорСчетНаценка,"    // <ПланСчетовСсылка.Хозрасчетный> - счет учета торговой наценки
	+ "ВидКорСубконто1,"   // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается товар из НТТ
	+ "ВидКорСубконто2,"   // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается товар из НТТ
	+ "ВидКорСубконто3,"   // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается товар из НТТ
	+ "КорСубконто1,"      // - значение субконто счета, на который списывается товар из НТТ
	+ "КорСубконто2,"      // - значение субконто счета, на который списывается товар из НТТ
	+ "КорСубконто3,"      // - значение субконто счета, на который списывается товар из НТТ
	+ "ВалютнаяСумма,"     // <Число,15,2) - валютная сумма списываемого товара и торговой наценки
	+ "Валюта,"            // <Число,15,2) - валюта корр. аналитики
	+ "Количество,"        // <Число,15,3> - количество списываемой номенклатуры
	+ "СтавкаНДСВРознице," // <ПеречислениеСсылка.СтавкиНДС>
	+ "Сумма,"             // <Число,15,2) - сумма списываемого товара и торговой наценки
	+ "СуммаСписания"      // <Число,15,2) - себестоимость списываемого товара (без учета торговой наценки)
	;
	
	Параметры.Вставить("ТаблицаТоварыНТТ",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТоварыНТТ, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "Склад"          // <СправочникСсылка.Склады>
	;

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;


КонецФункции

Функция ПодготовитьПараметрыСписаниеТоваровНТТ(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"      // <СправочникСсылка.Номенклатура> - Номенклатура для товаров, списываемых с НТТ при учете по стоимости приобретения
	+ "СчетУчета,"         // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара в НТТ
	+ "КорСчетСписания,"   // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается товар из НТТ
	+ "КорСчетНаценка,"    // <ПланСчетовСсылка.Хозрасчетный> - счет учета торговой наценки
	+ "ВидКорСубконто1,"   // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается товар из НТТ
	+ "ВидКорСубконто2,"   // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается товар из НТТ
	+ "ВидКорСубконто3,"   // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается товар из НТТ
	+ "КорСубконто1,"      // - значение субконто счета, на который списывается товар из НТТ
	+ "КорСубконто2,"      // - значение субконто счета, на который списывается товар из НТТ
	+ "КорСубконто3,"      // - значение субконто счета, на который списывается товар из НТТ
	+ "ВалютнаяСумма,"     // <Число,15,2) - валютная сумма списываемого товара и торговой наценки
	+ "Валюта,"            // <Число,15,2) - валюта корр. аналитики
	+ "Количество,"        // <Число,15,3> - количество списываемой номенклатуры
	+ "СтавкаНДСВРознице," // <ПеречислениеСсылка.СтавкиНДС>
	+ "Сумма,"             // <Число,15,2) - сумма списываемого товара и торговой наценки
	+ "Содержание,"        // <Строка,150> - содержание проводки
	+ "СуммаНаценки,"      // <Число,15,2) - сумма торговой наценки
	+ "СуммаНаценкиНУ,"      // <Число,15,2) - сумма торговой наценки по НУ
	+ "СуммаНаценкиПР,"      // <Число,15,2) - сумма торговой наценки по ПР
	+ "СуммаНаценкиВР"      // <Число,15,2) - сумма торговой наценки по ВР
	;
	
	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"             // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                  // <Дата> - период движений - дата документа
	+ "Организация,"             // <СправочникСсылка.Организация> - организация, в которой списывается товар и торговая наценка
	+ "Подразделение,"           // <Ссылка на справочник подразделений> - подразделение, в котором списывается товар и торговая наценка
	+ "КорПодразделение,"        // <Ссылка на справочник подразделений> - подразделение, в которое списывается товар и торговая наценка (при перемещении товаров)
	+ "Склад,"                   // <СправочникСсылка.Склады> - склад, в котором списывается товар и торговая наценка
	+ "ТипСклада,"               // <ПеречислениеСсылка.ТипыСкладов> - вид склада, в котором списывается товар и торговая наценка
	+ "ТипЦенРозничнойТорговли"; // <СправочникСсылка.ПрочиеДоходыИРасходы> - тип цен для опеределения розничной цены

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыСписаниеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "Период,"           // <Дата> - дата списания
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконто1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорПодразделение," // <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "Подразделение,"    // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияПР,"  // <Число,15,2> - сумма постоянных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВР,"  // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаКорСписанияНУ,"// <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаКорСписанияПР,"// <Число,15,2> - сумма постоянных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаКорСписанияВР";// <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	
	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"      // <Дата> - период движений - дата документа
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Контрагент,"  // <СправочникСсылка.Контрагенты>
	+ "Содержание";  // <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияВозвратаПоЗакупленнымТоварамКомитента(ЗакупленныеТоварыКомитента, ОстаткиЗакупленныеТоварыКомитентов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗакупленныеТоварыКомитента)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВозвратаПоЗакупленнымТоварамКомитента(ЗакупленныеТоварыКомитента, ОстаткиЗакупленныеТоварыКомитентов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		// Комиссия по закупке
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаРуб;
		
		Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовПоПретензиям;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетРасчетов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтрокаТаблицы.Комитент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтрокаТаблицы.ДоговорКомиссии);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
		Если Проводка.СчетКт.Валютный Тогда
			//Если валюта расчетов с комитентом совпадает с валютой расчетов по договору, считаем что и курсы совпадают.
			Проводка.ВалютаКт        = СтрокаТаблицы.ВалютаРасчетовСКомитентом;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетовКомитент;
		Иначе
			СтрокаТаблицы.СуммаВзаиморасчетов =  Проводка.Сумма;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаТаблицы.СуммаРуб, СтрокаТаблицы.СуммаРуб,0,0,0,0,Проводка); 
		
		//Спишем регистр закупленные товары комитентов
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", 	СтрокаТаблицы.Номенклатура);
		СтруктураОтбора.Вставить("Комитент",		СтрокаТаблицы.Комитент);
		СтруктураОтбора.Вставить("ДоговорКомиссии", СтрокаТаблицы.ДоговорКомиссии);
		
		НайденныеСтроки = Параметры.ОстаткиЗакупленныеТоварыКомитентов.НайтиСтроки(СтруктураОтбора);
		
		РаспределитьСумма 		= СтрокаТаблицы.СуммаВзаиморасчетовКомитент;
		РаспределитьСуммаНДС	= СтрокаТаблицы.СуммаНДСВзаиморасчетовКомитент;
		РаспределитьКоличество 	= СтрокаТаблицы.Количество;
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если РаспределитьСумма = 0 И РаспределитьКоличество = 0 И РаспределитьСуммаНДС = 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.СуммаОстаток <= 0 И Строка.КоличествоОстаток <= 0  И Строка.СуммаНДСОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаПоСтроке 		= Мин(РаспределитьСумма, Строка.СуммаОстаток);
			СуммаНДСПоСтроке	= Мин(РаспределитьСуммаНДС, Строка.СуммаНДСОстаток);
			КоличествоПоСтроке 	= Мин(РаспределитьКоличество, Строка.КоличествоОстаток);
			
			Движение = Движения.ЗакупленныеТоварыКомитентов.ДобавитьРасход();
			Движение.Период		 		= Реквизиты.Период;
			Движение.Организация 		= Реквизиты.Организация;
			
			Движение.Контрагент		 	= СтрокаТаблицы.Комитент;
			Движение.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКомиссии;
			Движение.Номенклатура 		= СтрокаТаблицы.Номенклатура;
			Движение.Партия				= Строка.Партия;
			
			Движение.Количество 		= КоличествоПоСтроке;
			Движение.Сумма				= СуммаПоСтроке;
			Движение.СуммаНДС			= СуммаНДСПоСтроке;
			
			Строка.СуммаОстаток 		= Строка.СуммаОстаток - СуммаПоСтроке;
			Строка.СуммаНДСОстаток 		= Строка.СуммаНДСОстаток - СуммаНДСПоСтроке;
			Строка.КоличествоОстаток 	= Строка.КоличествоОстаток - КоличествоПоСтроке;
			РаспределитьСумма 			= РаспределитьСумма - СуммаПоСтроке;
			РаспределитьСуммаНДС		= РаспределитьСуммаНДС - СуммаНДСПоСтроке;
			РаспределитьКоличество 		= РаспределитьКоличество - КоличествоПоСтроке;
			
		КонецЦикла;
		
		Если РаспределитьСумма > 0 ИЛИ РаспределитьКоличество > 0 ИЛИ РаспределитьСуммаНДС > 0 Тогда
			
			Движение = Движения.ЗакупленныеТоварыКомитентов.ДобавитьРасход();
			Движение.Период		 		= Реквизиты.Период;
			Движение.Организация 		= Реквизиты.Организация;
			
			Движение.Контрагент		 	= СтрокаТаблицы.Комитент;
			Движение.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКомиссии;
			Движение.Номенклатура 		= СтрокаТаблицы.Номенклатура;
			
			Движение.Количество 		= РаспределитьКоличество;
			Движение.Сумма				= РаспределитьСумма;
			Движение.СуммаНДС		= РаспределитьСуммаНДС;
						
		КонецЕсли;
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	Движения.ЗакупленныеТоварыКомитентов.Записывать = Истина;
		
КонецПроцедуры

Функция ПодготовитьПараметрыВозвратаПоЗакупленнымТоварамКомитента(ЗакупленныеТоварыКомитента, ОстаткиЗакупленныеТоварыКомитентов, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"               // 
	+ "Комитент,"         	        // 
	+ "ДоговорКомиссии," 	        // 
	+ "СчетРасчетов,"               // 
	+ "Количество,"                 // <Число,15,3> - количество списываемой номенклатуры
	+ "СуммаРуб,"                   // <Число,15,2> - сумма списываемой номенклатуры
	+ "СуммаВзаиморасчетов,"        // <Число,15,2> - сумма списываемой номенклатуры в валюте расчетов с контрагентом (при расчетах в валюте)
	+ "СуммаВзаиморасчетовКомитент,"//<Число,15,2> - сумма списываемой номенклатуры в валюте расчетов с комитентом (при расчетах в валюте)
	+ "СуммаНДСВзаиморасчетов,"        // <Число,15,2> - сумма НДС в валюте расчетов с контрагентом (при расчетах в валюте)
	+ "СуммаНДСВзаиморасчетовКомитент,"//<Число,15,2> - сумма НДС в валюте расчетов с комитентом (при расчетах в валюте)
	+ "ВалютаРасчетовСКомитентом";  //

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ЗакупленныеТоварыКомитента, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"     // 
	+ "Комитент,"    	  // 
	+ "ДоговорКомиссии,"  // 
	+ "Партия,"           // 
	+ "ДатаПоставки,"     // 
	+ "КоличествоОстаток,"// 
	+ "СуммаНДСОстаток,"//
	+ "СуммаОстаток";     // 
	
	Параметры.Вставить("ОстаткиЗакупленныеТоварыКомитентов",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ОстаткиЗакупленныеТоварыКомитентов, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"               // <Дата> - период движений - дата документа
	+ "Организация,"          // <СправочникСсылка.Организации>
	+ "Регистратор,"          //
	+ "Контрагент,"           // <СправочникСсылка.Контрагенты>
 	+ "ДоговорКонтрагента,"   //
	+ "Подразделение,"        //
	+ "СчетУчетаРасчетовПоПретензиям,"        //
	+ "ВалютаВзаиморасчетов"; // <СправочникСсылка.Валюты> - валюта расчетов с контрагентом (при расчетах в валюте)

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

#Область ДекларацииОРозничныхПродажахАлкоголя

#Область Приложение11ФормаОтчета2012Кв3

Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000109", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000111", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000112", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000115", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000116", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000117", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000313", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000316", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000317", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000318", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000191", Истина, Ложь);	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000192", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000110", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000111", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000112", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000113", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000114", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000115", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000116", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000391", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000392", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000313", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000314", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000316", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3(ПараметрыОтчета, Контейнер) Экспорт
	
	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3ПоПодразделениям(ПараметрыОтчета, Контейнер);
	Иначе
		ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3ПоОрганизации(ПараметрыОтчета, Контейнер);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3ПоОрганизации(ПараметрыОтчета, Контейнер) Экспорт
	
	СписокОрганизаций = Новый СписокЗначений();
	СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет60", ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	Запрос.УстановитьПараметр("Счет79", ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты);
	Запрос.УстановитьПараметр("Счет41", ПланыСчетов.Хозрасчетный.Товары);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет41
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет60
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет79
	|;";
	
	Результат = Запрос.ВыполнитьПакет();
	МассивСчетов41 = Результат[0].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов60 = Результат[1].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов79 = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет60", 		МассивСчетов60);
	Запрос.УстановитьПараметр("Счет41", 		МассивСчетов41);
	Запрос.УстановитьПараметр("Счет79", 		МассивСчетов79);
	Запрос.УстановитьПараметр("ВидСубконто", 	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("СписокОрганизаций", 	СписокОрганизаций);
	Запрос.УстановитьПараметр("ДатаНач", 		НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		Новый Граница(КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	ТекстШаблон =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.Номенклатура.Производитель КАК Производитель,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000010000101,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000010000102,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК П000010000103,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.ИНН
	|					ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.ИНН
	|				ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010000104,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.КПП
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.КПП
	|	КОНЕЦ КАК П000010000105
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101 КАК П000010000101,
	|	АлкогольнаяПродукция.П000010000102 КАК П000010000102,
	|	АлкогольнаяПродукция.П000010000103 КАК П000010000103,
	|	АлкогольнаяПродукция.П000010000104 КАК П000010000104,
	|	АлкогольнаяПродукция.П000010000105 КАК П000010000105,
	|	0 КАК П000010000106,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счет60)
	|					И ХозрасчетныйОбороты.КорСубконто1 = АлкогольнаяПродукция.Производитель
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000107,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счет60)
	|					И ХозрасчетныйОбороты.КорСубконто1 <> АлкогольнаяПродукция.Производитель
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000108,
	|	0 КАК П000010000109,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				ТОГДА (ХозрасчетныйОбороты.КоличествоОборотДт - ХозрасчетныйОбороты.КоличествоОборотКт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000111,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ХозрасчетныйОбороты.КорСчет В (&Счет60)
	|					И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000112,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000115,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000117,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|					И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000116,
	|	0 КАК П000010000120
	|ПОМЕСТИТЬ ТаблицаРаздела1
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В (&Счет41), &ВидСубконто, Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|		ПО АлкогольнаяПродукция.Номенклатура = ХозрасчетныйОбороты.Субконто1
	|ГДЕ
	|	(НЕ ХозрасчетныйОбороты.КорСчет В (&Счет41)
	|			ИЛИ ХозрасчетныйОбороты.КорСчет ЕСТЬ NULL )
	|	И НЕ ХозрасчетныйОбороты.КорСчет ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	СУММА(ХозрасчетныйОстаткиНач.КоличествоОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал),
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаНач, Счет В (&Счет41), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиНач
	|		ПО АлкогольнаяПродукция.Номенклатура = ХозрасчетныйОстаткиНач.Субконто1
	|ГДЕ
	|	НЕ ХозрасчетныйОстаткиНач.Счет ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	СУММА(ХозрасчетныйОстаткиКон.КоличествоОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал)
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В (&Счет41), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиКон
	|		ПО АлкогольнаяПродукция.Номенклатура = ХозрасчетныйОстаткиКон.Субконто1
	|ГДЕ
	|	НЕ ХозрасчетныйОстаткиКон.Счет ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101 КАК П000010000101,
	|	АлкогольнаяПродукция.П000010000102 КАК П000010000102,
	|	АлкогольнаяПродукция.П000010000103 КАК П000010000103,
	|	АлкогольнаяПродукция.П000010000104 КАК П000010000104,
	|	АлкогольнаяПродукция.П000010000105 КАК П000010000105,
	|	СУММА(АлкогольнаяПродукция.П000010000106) КАК П000010000106,
	|	СУММА(АлкогольнаяПродукция.П000010000107) КАК П000010000107,
	|	СУММА(АлкогольнаяПродукция.П000010000108) КАК П000010000108,
	|	СУММА(АлкогольнаяПродукция.П000010000109) КАК П000010000109,
	|	СУММА(АлкогольнаяПродукция.П000010000111) КАК П000010000111,
	|	СУММА(АлкогольнаяПродукция.П000010000112) КАК П000010000112,
	|	СУММА(АлкогольнаяПродукция.П000010000115) КАК П000010000115,
	|	СУММА(АлкогольнаяПродукция.П000010000116) КАК П000010000116,
	|	СУММА(АлкогольнаяПродукция.П000010000117) КАК П000010000117,
	|	СУММА(АлкогольнаяПродукция.П000010000120) КАК П000010000120
	|ИЗ
	|	ТаблицаРаздела1 КАК АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000010000101,
	|	П000010000102,
	|	П000010000103,
	|	П000010000104,
	|	П000010000105";
	Запрос.Текст = ТекстШаблон;
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Раздел1 = Контейнер.Раздел1;
	СтраницаРаздел1 =  Раздел1[0].Данные[0].Значение;
	
	Пока Раздел1.Количество()>1 Цикл
		Контейнер.Раздел1.Удалить(1);
	КонецЦикла;
	
	Пока Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001.Количество()>1 Цикл
		Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001.Удалить(1);
	КонецЦикла;
	
	НС = 1;
	Раздел1Текущий = Раздел1[0];
	
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		Если НС > 1 Тогда 
			Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100001.Добавить();
		КонецЕсли;
		Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100001[НС - 1].П000010000100 = НС;
	 	ЗаполнитьЗначенияСвойств(Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100001[НС - 1], СтрокаЗапроса);
		НС = НС + 1;
		
	КонецЦикла;
	
	ПредставлениеПодразделения = СведенияОПодразделении(ПараметрыОтчета.Организация, ПараметрыОтчета.Организация.ИНН);
	СтраницаРаздел1.ОбособленноеПодразделение = ОписаниеПодразделения(ПредставлениеПодразделения);
		
	Если Раздел1[0].ДополнительныеДанные.Количество() = 0 Тогда
		Раздел1[0].ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
		
	Раздел1[0].ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);
	
	Пока Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003.Количество()>1 Цикл
		Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003.Удалить(1);
	КонецЦикла;
	
	ТаблицаПодразделения = ТаблицаЗапроса.Скопировать();
	
	Для Каждого Колонка Из ТаблицаПодразделения.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "П0000100001", "П0000100003");
	КонецЦикла;

	НС = 1;
	Для Каждого СтрокаПодразделения Из ТаблицаПодразделения Цикл
		
		Если НС > 1 Тогда 
			Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100003.Добавить();
		КонецЕсли;
		Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100003[НС - 1].П000010000300 = НС;
		ЗаполнитьЗначенияСвойств(Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100003[НС - 1], СтрокаПодразделения);
		НС = НС + 1;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет60", 		МассивСчетов60);
	Запрос.УстановитьПараметр("Счет41", 		МассивСчетов41);
	Запрос.УстановитьПараметр("СчетГТД", 		ПланыСчетов.Хозрасчетный.ГТД);
	Запрос.УстановитьПараметр("ВидСубконто", 	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидКорСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("СписокОрганизаций", 	СписокОрганизаций);
	Запрос.УстановитьПараметр("ДатаНач", 		НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	ТекстШаблон =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000020000101,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000020000102,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК П000020000103,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.ИНН
	|					ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.ИНН
	|				ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000020000104,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.КПП
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.КПП
	|	КОНЕЦ КАК П000020000105,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1.НаименованиеПолное КАК СТРОКА(200)) КАК П000020000106,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).СтранаРегистрации, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).ИНН
	|		ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).НалоговыйНомер, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК П000020000107,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).КПП, НЕОПРЕДЕЛЕНО) КАК П000020000108,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).ДатаВходящегоДокумента, ХозрасчетныйОбороты.Период) КАК П000020000113,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК П000020000114,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии,
	|	ХозрасчетныйГТД.СубконтоДт2 КАК П000020000115,
	|	ХозрасчетныйОбороты.СубконтоКт1,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ХозрасчетныйГТД.СубконтоДт2 ЕСТЬ NULL 
	|				ТОГДА ХозрасчетныйГТД.КоличествоОборотДт
	|			ИНАЧЕ ХозрасчетныйОбороты.КоличествоОборотДт
	|		КОНЕЦ * СведенияОбАлкогольнойПродукции.КоэффПересчетаДал) КАК П000020000116
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, СчетДт В (&Счет41), &ВидСубконто, СчетКт В (&Счет60), &ВидКорСубконто, Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, СчетДт = &СчетГТД, , , , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйГТД
	|			ПО ХозрасчетныйОбороты.СубконтоДт1 = ХозрасчетныйГТД.СубконтоДт1
	|				И ХозрасчетныйОбороты.Регистратор = ХозрасчетныйГТД.Регистратор
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = ХозрасчетныйОбороты.СубконтоДт1
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169,
	|	СведенияОбАлкогольнойПродукции.КодВида169,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.ИНН
	|					ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.ИНН
	|				ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.КПП
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.КПП
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1.НаименованиеПолное КАК СТРОКА(200)),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).ДатаВходящегоДокумента, ХозрасчетныйОбороты.Период),
	|	ХозрасчетныйОбороты.Организация,
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии,
	|	ХозрасчетныйОбороты.СубконтоКт1,
	|	ХозрасчетныйГТД.СубконтоДт2,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).СтранаРегистрации, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).ИНН
	|		ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).НалоговыйНомер, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).КПП, НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000020000101 КАК П000020000101,
	|	АлкогольнаяПродукция.П000020000102 КАК П000020000102,
	|	АлкогольнаяПродукция.П000020000103 КАК П000020000103,
	|	АлкогольнаяПродукция.П000020000104 КАК П000020000104,
	|	АлкогольнаяПродукция.П000020000105 КАК П000020000105,
	|	АлкогольнаяПродукция.П000020000106 КАК П000020000106,
	|	АлкогольнаяПродукция.П000020000107 КАК П000020000107,
	|	АлкогольнаяПродукция.П000020000108 КАК П000020000108,
	|	ЛицензииПоставщиковАлкогольнойПродукции.СерияНомер КАК П000020000192,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Период КАК П000020000110,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания КАК П000020000111,
	|	ЛицензииПоставщиковАлкогольнойПродукции.КемВыдана КАК П000020000112,
	|	АлкогольнаяПродукция.П000020000113 КАК П000020000113,
	|	АлкогольнаяПродукция.П000020000114 КАК П000020000114,
	|	АлкогольнаяПродукция.П000020000115 КАК П000020000115,
	|	АлкогольнаяПродукция.Организация КАК Организация,
	|	СУММА(АлкогольнаяПродукция.П000020000116) КАК П000020000116
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО АлкогольнаяПродукция.СубконтоКт1 = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик
	|			И АлкогольнаяПродукция.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|			И (ЛицензииПоставщиковАлкогольнойПродукции.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|				ГДЕ
	|					ЕСТЬNULL(АлкогольнаяПродукция.П000020000113, &ДатаКон) >= ЛицензииПоставщиковАлкогольнойПродукции.Период
	|					И АлкогольнаяПродукция.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|					И АлкогольнаяПродукция.СубконтоКт1 = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик))
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000020000101,
	|	АлкогольнаяПродукция.П000020000102,
	|	АлкогольнаяПродукция.П000020000103,
	|	АлкогольнаяПродукция.П000020000104,
	|	АлкогольнаяПродукция.П000020000105,
	|	АлкогольнаяПродукция.П000020000106,
	|	АлкогольнаяПродукция.П000020000107,
	|	АлкогольнаяПродукция.П000020000108,
	|	ЛицензииПоставщиковАлкогольнойПродукции.СерияНомер,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Период,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания,
	|	ЛицензииПоставщиковАлкогольнойПродукции.КемВыдана,
	|	АлкогольнаяПродукция.П000020000113,
	|	АлкогольнаяПродукция.П000020000114,
	|	АлкогольнаяПродукция.П000020000115,
	|	АлкогольнаяПродукция.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000020000101,
	|	П000020000102,
	|	П000020000103,
	|	П000020000113,
	|	П000020000115,
	|	П000020000106";
	
	Запрос.Текст = ТекстШаблон;
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Раздел2 = Контейнер.Раздел2;
	СтраницаРаздел2 =  Раздел2[0].Данные[0].Значение;
	
	Пока Раздел2.Количество()>1 Цикл
		Раздел2.Удалить(1);
	КонецЦикла;
	
	Пока Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001.Количество()>1 Цикл
		Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001.Удалить(1);
	КонецЦикла;
	Пока Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003.Количество()>1 Цикл
		Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003.Удалить(1);
	КонецЦикла;
	
	НС = 1;
	Раздел2Текущий = Раздел2[0];
	ТаблицаЗапроса.Колонки.Добавить("П000020000191");
	
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		СерияНомер = СокрЛП(СтрокаЗапроса.П000020000192);
		ПозицияРазделителя = СтрНайти(СерияНомер, ",");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрНайти(СерияНомер, " ");
		КонецЕсли;
		Если ПозицияРазделителя <> 0 Тогда
			СтрокаЗапроса.П000020000191 = СокрЛП(Лев(СерияНомер, ПозицияРазделителя - 1));
			СтрокаЗапроса.П000020000192 = СокрЛП(Сред(СерияНомер, ПозицияРазделителя + 1));
		КонецЕсли;
		
		Если НС > 1 Тогда 
			Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200001.Добавить();
		КонецЕсли;
		Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200001[НС - 1].П000020000100 = НС;
	 	ЗаполнитьЗначенияСвойств(Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200001[НС - 1], СтрокаЗапроса);
		НС = НС + 1;
		
	КонецЦикла;
	
	
	ПредставлениеПодразделения = СведенияОПодразделении(ПараметрыОтчета.Организация, ПараметрыОтчета.Организация.ИНН);
	СтраницаРаздел2.ОбособленноеПодразделение = ОписаниеПодразделения(ПредставлениеПодразделения);
	
	Если Раздел2[0].ДополнительныеДанные.Количество() = 0 Тогда
			Раздел2[0].ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
		
	Раздел2[0].ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);

	ТаблицаПодразделения = ТаблицаЗапроса.Скопировать();
	
	Для Каждого Колонка Из ТаблицаПодразделения.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "П0000200001", "П0000200003");
	КонецЦикла;
	
	НС = 1;
	Для Каждого СтрокаПодразделения Из ТаблицаПодразделения Цикл
		
		Если НС > 1 Тогда 
			Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200003.Добавить();
		КонецЕсли;
		Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200003[НС - 1].П000020000300 = НС;
		ЗаполнитьЗначенияСвойств(Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200003[НС - 1], СтрокаПодразделения);
		НС = НС + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3ПоПодразделениям(ПараметрыОтчета, Контейнер) Экспорт
	
	СписокОрганизаций = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ПараметрыОтчета.Организация);
	
	//Заполнение Раздел 1
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет60", ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	Запрос.УстановитьПараметр("Счет79", ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты);
	Запрос.УстановитьПараметр("Счет41", ПланыСчетов.Хозрасчетный.Товары);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет41
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет60
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет79";
	
	Результат = Запрос.ВыполнитьПакет();
	МассивСчетов41 = Результат[0].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов60 = Результат[1].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов79 = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет60", 		МассивСчетов60);
	Запрос.УстановитьПараметр("Счет41", 		МассивСчетов41);
	Запрос.УстановитьПараметр("Счет79", 		МассивСчетов79);
	Запрос.УстановитьПараметр("ВидСубконто", 	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("СписокОрганизаций", 	СписокОрганизаций);
	Запрос.УстановитьПараметр("ДатаНач", 		НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		Новый Граница(КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	ТекстШаблон =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.Номенклатура.Производитель КАК Производитель,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000010000101,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000010000102,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК П000010000103,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.ИНН
	|					ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.ИНН
	|				ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010000104,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.КПП
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.КПП
	|	КОНЕЦ КАК П000010000105
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101 КАК П000010000101,
	|	АлкогольнаяПродукция.П000010000102 КАК П000010000102,
	|	АлкогольнаяПродукция.П000010000103 КАК П000010000103,
	|	АлкогольнаяПродукция.П000010000104 КАК П000010000104,
	|	АлкогольнаяПродукция.П000010000105 КАК П000010000105,
	|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОбороты.ПодразделениеКор КАК КорПодразделение,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	0 КАК П000010000106,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счет60)
	|					И ХозрасчетныйОбороты.КорСубконто1 = АлкогольнаяПродукция.Производитель
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000107,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счет60)
	|					И ХозрасчетныйОбороты.КорСубконто1 <> АлкогольнаяПродукция.Производитель
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000108,
	|	0 КАК П000010000109,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				ТОГДА (ХозрасчетныйОбороты.КоличествоОборотДт - ХозрасчетныйОбороты.КоличествоОборотКт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000111,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ХозрасчетныйОбороты.КорСчет В (&Счет60)
	|					И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|					И НЕ ХозрасчетныйОбороты.КорСчет В (&Счет41)
	|					И НЕ ХозрасчетныйОбороты.КорСчет В (&Счет79)
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000112,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счет41)
	|					ИЛИ ХозрасчетныйОбороты.КорСчет В (&Счет79)
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000113,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000115,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000117,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|					И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|					И НЕ ХозрасчетныйОбороты.КорСчет В (&Счет41)
	|					И НЕ ХозрасчетныйОбороты.КорСчет В (&Счет79)
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000116,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счет41)
	|					ИЛИ ХозрасчетныйОбороты.КорСчет В (&Счет79)
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000118,
	|	0 КАК П000010000120
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В (&Счет41), &ВидСубконто, Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|		ПО АлкогольнаяПродукция.Номенклатура = ХозрасчетныйОбороты.Субконто1
	|ГДЕ
	|	(НЕ ХозрасчетныйОбороты.КорСчет В (&Счет41)
	|			ИЛИ ХозрасчетныйОбороты.КорСчет ЕСТЬ NULL 
	|			ИЛИ ХозрасчетныйОбороты.Подразделение <> ХозрасчетныйОбороты.ПодразделениеКор)
	|	И НЕ ХозрасчетныйОбороты.КорСчет ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ХозрасчетныйОбороты.ПодразделениеКор,
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.КорСчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	ХозрасчетныйОстаткиНач.Подразделение,
	|	NULL,
	|	ХозрасчетныйОстаткиНач.Организация,
	|	NULL,
	|	СУММА(ХозрасчетныйОстаткиНач.КоличествоОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал),
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаНач, Счет В (&Счет41), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиНач
	|		ПО АлкогольнаяПродукция.Номенклатура = ХозрасчетныйОстаткиНач.Субконто1
	|ГДЕ
	|	НЕ ХозрасчетныйОстаткиНач.Счет ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	ХозрасчетныйОстаткиНач.Подразделение,
	|	ХозрасчетныйОстаткиНач.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	ХозрасчетныйОстаткиКон.Подразделение,
	|	NULL,
	|	ХозрасчетныйОстаткиКон.Организация,
	|	NULL,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	СУММА(ХозрасчетныйОстаткиКон.КоличествоОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал)
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В (&Счет41), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиКон
	|		ПО АлкогольнаяПродукция.Номенклатура = ХозрасчетныйОстаткиКон.Субконто1
	|ГДЕ
	|	НЕ ХозрасчетныйОстаткиКон.Счет ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	ХозрасчетныйОстаткиКон.Подразделение,
	|	ХозрасчетныйОстаткиКон.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000010000101,
	|	П000010000102,
	|	П000010000103,
	|	П000010000104,
	|	П000010000105";
	
	Запрос.Текст = ТекстШаблон;
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗапроса.Колонки.Добавить("СсылкаПодразделение");
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		Если ЗначениеЗаполнено(СтрокаЗапроса.Подразделение) Тогда
			СтрокаЗапроса.СсылкаПодразделение = ПолучитьОбособленноеПодразделение(СтрокаЗапроса.Подразделение);
		Иначе
			СтрокаЗапроса.СсылкаПодразделение = ?(ЗначениеЗаполнено(СтрокаЗапроса.Организация), СтрокаЗапроса.Организация, ПараметрыОтчета.Организация);
		КонецЕсли;
		Если СтрокаЗапроса.П000010000113 > 0 Тогда
			Если СтрокаЗапроса.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаЗапроса.Подразделение = СтрокаЗапроса.КорПодразделение Тогда
				СтрокаЗапроса.П000010000113 = 0;
			Иначе
				СсылкаКорПодразделение = ?(ЗначениеЗаполнено(СтрокаЗапроса.КорПодразделение), ПолучитьОбособленноеПодразделение(СтрокаЗапроса.КорПодразделение), СтрокаЗапроса.Организация);
				Если СтрокаЗапроса.СсылкаПодразделение = СсылкаКорПодразделение Тогда
					СтрокаЗапроса.П000010000113 = 0;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаЗапроса.П000010000113 = 0;
		КонецЕсли;
		Если СтрокаЗапроса.П000010000118 > 0 Тогда
			Если СтрокаЗапроса.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаЗапроса.Подразделение = СтрокаЗапроса.КорПодразделение Тогда
				СтрокаЗапроса.П000010000118 = 0;
			Иначе
				СсылкаКорПодразделение = ?(ЗначениеЗаполнено(СтрокаЗапроса.КорПодразделение), ПолучитьОбособленноеПодразделение(СтрокаЗапроса.КорПодразделение), СтрокаЗапроса.Организация);
				Если СтрокаЗапроса.СсылкаПодразделение = СсылкаКорПодразделение Тогда
					СтрокаЗапроса.П000010000118 = 0;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаЗапроса.П000010000118 = 0;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Свернуть("П000010000101, П000010000102, П000010000103, П000010000104, П000010000105, СсылкаПодразделение",
							"П000010000106, П000010000107, П000010000108, П000010000111, П000010000112, П000010000113, П000010000115, П000010000116, П000010000117, П000010000118");
	ТаблицаЗапроса.Сортировать("СсылкаПодразделение, П000010000101, П000010000102, П000010000103, П000010000104, П000010000105");
		
	ТаблицаПоОрганизации = ТаблицаЗапроса.Скопировать();
	ТаблицаПоОрганизации.Свернуть("П000010000101, П000010000102, П000010000103, П000010000104, П000010000105",
								"П000010000106, П000010000107, П000010000108, П000010000111, П000010000112, П000010000113, П000010000115, П000010000116, П000010000117, П000010000118");
	ТаблицаПоОрганизации.Сортировать("П000010000101, П000010000102, П000010000103, П000010000104, П000010000105");
	
	Для Каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "П0000100001", "П0000100003");
	КонецЦикла;
	
	ДеревоПоПодразделениям = ТаблицуЗначенийВДеревоСГруппировкой(ТаблицаЗапроса, "СсылкаПодразделение");
	
	Раздел1 = Контейнер.Раздел1;
	СтраницаРаздел1 =  Раздел1[0].Данные[0].Значение;
	
	СтраницаРаздел1.ОбособленноеПодразделение = "";
	
	Пока Раздел1.Количество()>1 Цикл
		Контейнер.Раздел1.Удалить(Контейнер.Раздел1.Индекс(Контейнер.Раздел1[1]));
	КонецЦикла;
	
	Пока Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001.Количество()>0 Цикл
		Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001.Удалить(
		Контейнер.Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001.Индекс(
		Контейнер.Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001[0]));
	КонецЦикла;
	
	Пока Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003.Количество()>0 Цикл
		Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003.Удалить(
		Контейнер.Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003.Индекс(
		Контейнер.Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003[0]));
	КонецЦикла;
	
	Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001.Добавить();
	Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003.Добавить();
	
	НС = 1;
	Раздел1Текущий = Раздел1[0];
	
	Для Каждого СтрокаЗапроса Из ТаблицаПоОрганизации Цикл
		
		Если НС > 1 Тогда 
			Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100001.Добавить();
		КонецЕсли;
		Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100001[НС - 1].П000010000100 = НС;
	 	ЗаполнитьЗначенияСвойств(Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100001[НС - 1], СтрокаЗапроса);
		НС = НС + 1;
		
	КонецЦикла;
	
	НомерПодразделения = 0;
	
	Для Каждого Подразделение Из ДеревоПоПодразделениям.Строки Цикл
		
		НомерТекущейСтраницы = Раздел1.Количество();
		
		Если НомерПодразделения > 0 Тогда	
			
			Раздел1.Добавить().Данные = Новый СписокЗначений();
					
			СтруктураНовойТаблицыМногостраничныхРазделов = Новый Структура();
			Для Каждого Показатель Из Раздел1[0].Данные[0].Значение Цикл
				Если Неопределено = Показатель.Значение Тогда 
					СтруктураНовойТаблицыМногостраничныхРазделов.Вставить(Показатель.Ключ);
				Иначе 
					СтруктураНовойТаблицыМногостраничныхРазделов.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЕсли;
			КонецЦикла;
			
			Раздел1[НомерТекущейСтраницы].Данные.Добавить(СтруктураНовойТаблицыМногостраничныхРазделов); 
			Раздел1Текущий = Раздел1[НомерТекущейСтраницы];
			СтраницаРаздел1 =  Раздел1Текущий.Данные[0].Значение;

			Контейнер.Раздел1_ДанныеДопСтрок1.Очистить();
			Контейнер.Раздел1_ХранилищеДанныхДопСтрок1.Добавить();
			
			Контейнер.Раздел1_ДанныеДопСтрок2.Очистить();
			Контейнер.Раздел1_ХранилищеДанныхДопСтрок2.Добавить();
			
			ИндексПоследнего1 = НомерПодразделения; 
			ИндексПоследнего2 = НомерПодразделения; 
			
			СписокДопСтрокРаздел1  = Новый Структура();
			СписокДопСтрокРаздел1.Вставить("П0000100001", Контейнер.Раздел1_ХранилищеДанныхДопСтрок1[ИндексПоследнего1].Таблица);
			СписокДопСтрокРаздел1.Вставить("П0000100003", Контейнер.Раздел1_ХранилищеДанныхДопСтрок2[ИндексПоследнего2].Таблица);
		
			Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок = Новый СписокЗначений();
			Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок.Вставить(0, СписокДопСтрокРаздел1, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			
			Пока Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100001.Количество()>0 Цикл
				Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100001.Удалить(
				Контейнер.Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100001.Индекс(
				Контейнер.Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100001[0]));
			КонецЦикла;
			
			Пока Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100003.Количество()>0 Цикл
				Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100003.Удалить(
				Контейнер.Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100003.Индекс(
				Контейнер.Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100003[0]));
			КонецЦикла;
			
			Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100001.Добавить();
			Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100003.Добавить();
						
		КонецЕсли;
		
		Раздел1 = Контейнер.Раздел1;
		СтраницаРаздел1 =  Раздел1[НомерПодразделения].Данные[0].Значение;
						
		Пока Раздел1[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000100003.Количество()>1 Цикл
			Раздел1[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000100003.Удалить(
			Контейнер.Раздел1[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000100003.Индекс(
			Контейнер.Раздел1[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000100003[1]));
		КонецЦикла;
		
		ПредставлениеПодразделения = СведенияОПодразделении(Подразделение.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН);
		СтраницаРаздел1.ОбособленноеПодразделение = ОписаниеПодразделения(ПредставлениеПодразделения);
		
		Если Раздел1[НомерПодразделения].ДополнительныеДанные.Количество() = 0 Тогда
			Раздел1[НомерПодразделения].ДополнительныеДанные.Добавить(Новый Структура);
		КонецЕсли;
		
		Раздел1[НомерПодразделения].ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);
		
		Пока Раздел1[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000100003.Количество()>1 Цикл
			Раздел1[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000100003.Удалить(1);
		КонецЦикла;
		
		НС = 1;
		Раздел1Текущий = Раздел1[НомерПодразделения];
		
		Для Каждого СтрокаПодразделения Из Подразделение.Строки Цикл
			
			Если НС > 1 Тогда 
				Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100003.Добавить();
			КонецЕсли;
			Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100003[НС - 1].П000010000300 = НС;
			ЗаполнитьЗначенияСвойств(Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100003[НС - 1], СтрокаПодразделения);
			НС = НС + 1;
			
		КонецЦикла;
		
		НомерПодразделения = НомерПодразделения + 1;
		
	КонецЦикла;
	
	//Заполнение Раздел 2
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет60", 		МассивСчетов60);
	Запрос.УстановитьПараметр("Счет41", 		МассивСчетов41);
	Запрос.УстановитьПараметр("СчетГТД", 		ПланыСчетов.Хозрасчетный.ГТД);
	Запрос.УстановитьПараметр("ВидСубконто", 	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидКорСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("СписокОрганизаций", 	СписокОрганизаций);
	Запрос.УстановитьПараметр("ДатаНач", 		НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	ТекстШаблон =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000020000101,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000020000102,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК П000020000103,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.ИНН
	|					ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.ИНН
	|				ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000020000104,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.КПП
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.КПП
	|	КОНЕЦ КАК П000020000105,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1.НаименованиеПолное КАК СТРОКА(200)) КАК П000020000106,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).СтранаРегистрации, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).ИНН
	|		ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).НалоговыйНомер, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК П000020000107,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).КПП, НЕОПРЕДЕЛЕНО) КАК П000020000108,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).ДатаВходящегоДокумента, ХозрасчетныйОбороты.Период) КАК П000020000113,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК П000020000114,
	|	ХозрасчетныйОбороты.ПодразделениеДт КАК Подразделение,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии,
	|	ХозрасчетныйГТД.СубконтоДт2 КАК П000020000115,
	|	ХозрасчетныйОбороты.СубконтоКт1,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ХозрасчетныйГТД.СубконтоДт2 ЕСТЬ NULL 
	|				ТОГДА ХозрасчетныйГТД.КоличествоОборотДт
	|			ИНАЧЕ ХозрасчетныйОбороты.КоличествоОборотДт
	|		КОНЕЦ * СведенияОбАлкогольнойПродукции.КоэффПересчетаДал) КАК П000020000116
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, СчетДт В (&Счет41), &ВидСубконто, СчетКт В (&Счет60), &ВидКорСубконто, Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, СчетДт = &СчетГТД, , , , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйГТД
	|			ПО ХозрасчетныйОбороты.СубконтоДт1 = ХозрасчетныйГТД.СубконтоДт1
	|				И ХозрасчетныйОбороты.Регистратор = ХозрасчетныйГТД.Регистратор
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = ХозрасчетныйОбороты.СубконтоДт1
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169,
	|	СведенияОбАлкогольнойПродукции.КодВида169,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.ИНН
	|					ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.ИНН
	|				ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.КПП
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.КПП
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1.НаименованиеПолное КАК СТРОКА(200)),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).ДатаВходящегоДокумента, ХозрасчетныйОбороты.Период),
	|	ХозрасчетныйОбороты.ПодразделениеДт,
	|	ХозрасчетныйОбороты.Организация,
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии,
	|	ХозрасчетныйОбороты.СубконтоКт1,
	|	ХозрасчетныйГТД.СубконтоДт2,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).СтранаРегистрации, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).ИНН
	|		ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).НалоговыйНомер, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).КПП, НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000020000101 КАК П000020000101,
	|	АлкогольнаяПродукция.П000020000102 КАК П000020000102,
	|	АлкогольнаяПродукция.П000020000103 КАК П000020000103,
	|	АлкогольнаяПродукция.П000020000104 КАК П000020000104,
	|	АлкогольнаяПродукция.П000020000105 КАК П000020000105,
	|	АлкогольнаяПродукция.П000020000106 КАК П000020000106,
	|	АлкогольнаяПродукция.П000020000107 КАК П000020000107,
	|	АлкогольнаяПродукция.П000020000108 КАК П000020000108,
	|	ЛицензииПоставщиковАлкогольнойПродукции.СерияНомер КАК П000020000192,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Период КАК П000020000110,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания КАК П000020000111,
	|	ЛицензииПоставщиковАлкогольнойПродукции.КемВыдана КАК П000020000112,
	|	АлкогольнаяПродукция.П000020000113 КАК П000020000113,
	|	АлкогольнаяПродукция.П000020000114 КАК П000020000114,
	|	АлкогольнаяПродукция.П000020000115 КАК П000020000115,
	|	АлкогольнаяПродукция.Подразделение КАК Подразделение,
	|	АлкогольнаяПродукция.Организация КАК Организация,
	|	СУММА(АлкогольнаяПродукция.П000020000116) КАК П000020000116
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО АлкогольнаяПродукция.СубконтоКт1 = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик
	|			И АлкогольнаяПродукция.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|			И (ЛицензииПоставщиковАлкогольнойПродукции.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|				ГДЕ
	|					ЕСТЬNULL(АлкогольнаяПродукция.П000020000113, &ДатаКон) >= ЛицензииПоставщиковАлкогольнойПродукции.Период
	|					И АлкогольнаяПродукция.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|					И АлкогольнаяПродукция.СубконтоКт1 = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик))
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000020000101,
	|	АлкогольнаяПродукция.П000020000102,
	|	АлкогольнаяПродукция.П000020000103,
	|	АлкогольнаяПродукция.П000020000104,
	|	АлкогольнаяПродукция.П000020000105,
	|	АлкогольнаяПродукция.П000020000106,
	|	АлкогольнаяПродукция.П000020000107,
	|	АлкогольнаяПродукция.П000020000108,
	|	ЛицензииПоставщиковАлкогольнойПродукции.СерияНомер,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Период,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания,
	|	ЛицензииПоставщиковАлкогольнойПродукции.КемВыдана,
	|	АлкогольнаяПродукция.П000020000113,
	|	АлкогольнаяПродукция.П000020000114,
	|	АлкогольнаяПродукция.П000020000115,
	|	АлкогольнаяПродукция.Подразделение,
	|	АлкогольнаяПродукция.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000020000101,
	|	П000020000102,
	|	П000020000103,
	|	П000020000113,
	|	П000020000115,
	|	П000020000106";
	
	Запрос.Текст = ТекстШаблон;
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗапроса.Колонки.Добавить("СсылкаПодразделение");
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		Если ЗначениеЗаполнено(СтрокаЗапроса.Подразделение) Тогда
			СтрокаЗапроса.СсылкаПодразделение = ПолучитьОбособленноеПодразделение(СтрокаЗапроса.Подразделение);
		Иначе
			СтрокаЗапроса.СсылкаПодразделение = ?(ЗначениеЗаполнено(СтрокаЗапроса.Организация), СтрокаЗапроса.Организация, ПараметрыОтчета.Организация);
		КонецЕсли;
	КонецЦикла;
	
	Раздел2 = Контейнер.Раздел2;
	СтраницаРаздел2 =  Раздел2[0].Данные[0].Значение;
	
	СтраницаРаздел2.ОбособленноеПодразделение = "";
	
	Пока Раздел2.Количество()>1 Цикл
		Контейнер.Раздел2.Удалить(Контейнер.Раздел2.Индекс(Контейнер.Раздел2[1]));
	КонецЦикла;
	
	Пока Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001.Количество()>0 Цикл
		Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001.Удалить(
		Контейнер.Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001.Индекс(
		Контейнер.Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001[0]));
	КонецЦикла;
	
	Пока Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003.Количество()>0 Цикл
		Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003.Удалить(
		Контейнер.Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003.Индекс(
		Контейнер.Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003[0]));
	КонецЦикла;
	
	Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001.Добавить();
	Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003.Добавить();
		
	НС = 1;
	Раздел2Текущий = Раздел2[0];

	ТаблицаЗапроса.Колонки.Добавить("П000020000191");
	
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		СерияНомер = СокрЛП(СтрокаЗапроса.П000020000192);
		ПозицияРазделителя = СтрНайти(СерияНомер, ",");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрНайти(СерияНомер, " ");
		КонецЕсли;
		Если ПозицияРазделителя <> 0 Тогда
			СтрокаЗапроса.П000020000191 = СокрЛП(Лев(СерияНомер, ПозицияРазделителя - 1));
			СтрокаЗапроса.П000020000192 = СокрЛП(Сред(СерияНомер, ПозицияРазделителя + 1));
		КонецЕсли;
		
		Если НС > 1 Тогда 
			Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200001.Добавить();
		КонецЕсли;
		Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200001[НС - 1].П000020000100 = НС;
	 	ЗаполнитьЗначенияСвойств(Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200001[НС - 1], СтрокаЗапроса);
		НС = НС + 1;
		
	КонецЦикла;
	
	//Заполнение информации о подразделениях в Раздел2
	
	Для Каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "П0000200001", "П0000200003");
	КонецЦикла;
	
	ДеревоПоПодразделениям = ТаблицуЗначенийВДеревоСГруппировкой(ТаблицаЗапроса, "СсылкаПодразделение");
	
	НомерПодразделения = 0;
	
	Для Каждого Подразделение Из ДеревоПоПодразделениям.Строки Цикл 
		
		НомерТекущейСтраницы = Раздел2.Количество();
		
		Если НомерПодразделения > 0 Тогда	
			
			Раздел2.Добавить().Данные = Новый СписокЗначений();
					
			СтруктураНовойТаблицыМногостраничныхРазделов = Новый Структура();
			Для Каждого Показатель Из Раздел2[0].Данные[0].Значение Цикл
				Если Неопределено = Показатель.Значение Тогда 
					СтруктураНовойТаблицыМногостраничныхРазделов.Вставить(Показатель.Ключ);
				Иначе 
					СтруктураНовойТаблицыМногостраничныхРазделов.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЕсли;
			КонецЦикла;
			
			Раздел2[НомерТекущейСтраницы].Данные.Добавить(СтруктураНовойТаблицыМногостраничныхРазделов); 
			Раздел2Текущий = Раздел2[НомерТекущейСтраницы];
			СтраницаРаздел2 =  Раздел2Текущий.Данные[0].Значение;

			Контейнер.Раздел2_ДанныеДопСтрок1.Очистить();
			Контейнер.Раздел2_ХранилищеДанныхДопСтрок1.Добавить();
			
			Контейнер.Раздел2_ДанныеДопСтрок2.Очистить();
			Контейнер.Раздел2_ХранилищеДанныхДопСтрок2.Добавить();
			
			ИндексПоследнего1 = НомерПодразделения; 
			ИндексПоследнего2 = НомерПодразделения; 
			
			СписокДопСтрокРаздел2  = Новый Структура();
			СписокДопСтрокРаздел2.Вставить("П0000200001", Контейнер.Раздел2_ХранилищеДанныхДопСтрок1[ИндексПоследнего1].Таблица);
			СписокДопСтрокРаздел2.Вставить("П0000200003", Контейнер.Раздел2_ХранилищеДанныхДопСтрок2[ИндексПоследнего2].Таблица);
		
			Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок = Новый СписокЗначений();
			Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок.Вставить(0, СписокДопСтрокРаздел2, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						 			
			Пока Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200001.Количество()>0 Цикл
				Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200001.Удалить(
				Контейнер.Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200001.Индекс(
				Контейнер.Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200001[0]));
			КонецЦикла;
			
			Пока Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200003.Количество()>0 Цикл
				Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200003.Удалить(
				Контейнер.Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200003.Индекс(
				Контейнер.Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200003[0]));
			КонецЦикла;
			
			Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200001.Добавить();
			Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200003.Добавить();
			
		КонецЕсли;
		
		Раздел2 = Контейнер.Раздел2;
		СтраницаРаздел2 =  Раздел2[НомерПодразделения].Данные[0].Значение;
						
		Пока Раздел2[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000200003.Количество()>1 Цикл
			Раздел2[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000200003.Удалить(
			Контейнер.Раздел2[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000200003.Индекс(
			Контейнер.Раздел2[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000200003[1]));
		КонецЦикла;
		
		Раздел2Текущий = Раздел2[НомерПодразделения];
		
		Если Подразделение.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
	
		ПредставлениеПодразделения = СведенияОПодразделении(Подразделение.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН);
		СтраницаРаздел2.ОбособленноеПодразделение = ОписаниеПодразделения(ПредставлениеПодразделения);
		
		Если Раздел2[НомерПодразделения].ДополнительныеДанные.Количество() = 0 Тогда
			Раздел2[НомерПодразделения].ДополнительныеДанные.Добавить(Новый Структура);
		КонецЕсли;
		
		Раздел2[НомерПодразделения].ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);
		
		НС = 1;
		Для Каждого СтрокаПодразделения Из Подразделение.Строки Цикл
			
			Если НС > 1 Тогда 
				Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200003.Добавить();
			КонецЕсли;
			Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200003[НС - 1].П000020000300 = НС;
			ЗаполнитьЗначенияСвойств(Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200003[НС - 1], СтрокаПодразделения);
			НС = НС + 1;
			
		КонецЦикла;
		
		НомерПодразделения = НомерПодразделения + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область Приложение11ФормаОтчета2014Кв1

Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение11ФормаОтчета2014Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000109", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000111", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000112", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000115", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000116", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000117", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000313", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000316", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000317", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000318", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000191", Истина, Ложь);	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000192", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000110", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000111", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000112", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000113", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000114", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000115", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000116", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000391", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000392", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000313", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000314", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000316", Истина, Ложь);
	
КонецПроцедуры

Функция ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Производитель КАК Производитель,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000010000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000010000302,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА Производители.Ссылка
	|		ИНАЧЕ Импортеры.Ссылка
	|	КОНЕЦ КАК ПроизводительИмпортер,
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|				ТОГДА Производители.НаименованиеПолное
	|			ИНАЧЕ Импортеры.НаименованиеПолное
	|		КОНЕЦ, 1, 200) КАК П000010000303,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.ИНН
	|					ИНАЧЕ Производители.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.ИНН
	|				ИНАЧЕ Импортеры.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010000304,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.КПП
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.КПП
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Импортеры
	|			ПО СпрНоменклатура.Импортер = Импортеры.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Производители
	|			ПО СпрНоменклатура.Производитель = Производители.Ссылка
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.КодВида169 В(&КодыВида169)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Контрагент,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение) КАК КорПодразделение,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотДт) КАК КоличествоОборотДт,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт) КАК КоличествоОборотКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлассификацияРегистратора
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			&УсловиеКорСчетаВиртуальнойТаблицы,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	&УсловиеКорСчетаГДЕ
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение),
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт) КАК КоличествоНачальныйОстатокДт
	|ПОМЕСТИТЬ НачальныеОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНач,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение),
	|	ХозрасчетныйОстатки.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";

	Если ВестиУчетПоПодразделениям Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКорСчетаВиртуальнойТаблицы", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКорСчетаГДЕ",
			"(НЕ ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ИЛИ ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) <> ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение))");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКорСчетаВиртуальнойТаблицы",
			"НЕ КорСчет В (&Субсчета41)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКорСчетаГДЕ", "ИСТИНА");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел1_Результат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сводный.СсылкаПодразделение КАК СсылкаПодразделение,
	|	Сводный.П000010000301 КАК П000010000301,
	|	Сводный.П000010000302 КАК П000010000302,
	|	Сводный.П000010000303 КАК П000010000303,
	|	Сводный.П000010000304 КАК П000010000304,
	|	Сводный.П000010000305 КАК П000010000305,
	|	МАКСИМУМ(Сводный.ПроизводительИмпортер) КАК ПроизводительИмпортер,
	|	СУММА(Сводный.П000010000306) КАК П000010000306,
	|	СУММА(Сводный.П000010000307) КАК П000010000307,
	|	СУММА(Сводный.П000010000308) КАК П000010000308,
	|	СУММА(Сводный.П000010000311) КАК П000010000311,
	|	СУММА(Сводный.П000010000312) КАК П000010000312,
	|	СУММА(Сводный.П000010000313) КАК П000010000313,
	|	СУММА(Сводный.П000010000315) КАК П000010000315,
	|	СУММА(Сводный.П000010000316) КАК П000010000316,
	|	СУММА(Сводный.П000010000317) КАК П000010000317,
	|	СУММА(Сводный.П000010000318) КАК П000010000318
	|ИЗ
	|	(ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301 КАК П000010000301,
	|		АлкогольнаяПродукция.П000010000302 КАК П000010000302,
	|		АлкогольнаяПродукция.П000010000303 КАК П000010000303,
	|		АлкогольнаяПродукция.П000010000304 КАК П000010000304,
	|		АлкогольнаяПродукция.П000010000305 КАК П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|		0 КАК П000010000306,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|				ТОГДА ВЫБОР
	|						КОГДА ОборотыЗаПериод.Контрагент = АлкогольнаяПродукция.Производитель
	|							ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000307,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|				ТОГДА ВЫБОР
	|						КОГДА ОборотыЗаПериод.Контрагент = АлкогольнаяПродукция.Производитель
	|							ТОГДА 0
	|						ИНАЧЕ ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000308,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 1
	|				ТОГДА (ОборотыЗаПериод.КоличествоОборотДт - ОборотыЗаПериод.КоличествоОборотКт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000311,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					И ОборотыЗаПериод.КлассификацияРегистратора <> 1
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000312,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КоличествоОборотДт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000313,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 2
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000315,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|					И ОборотыЗаПериод.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					И ОборотыЗаПериод.КлассификацияРегистратора = 0
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000316,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 3
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000317,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КоличествоОборотКт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000318,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|	ИЗ
	|		АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОборотыЗаПериод КАК ОборотыЗаПериод
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|				ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|					И ОборотыЗаПериод.Организация = ОбособленныеПодразделения.Организация
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеКорПодразделения
	|				ПО ОборотыЗаПериод.КорПодразделение = ОбособленныеКорПодразделения.Подразделение
	|					И ОборотыЗаПериод.Организация = ОбособленныеКорПодразделения.Организация
	|			ПО АлкогольнаяПродукция.Номенклатура = ОборотыЗаПериод.Номенклатура
	|	ГДЕ
	|		ОборотыЗаПериод.Номенклатура ЕСТЬ НЕ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301,
	|		АлкогольнаяПродукция.П000010000302,
	|		АлкогольнаяПродукция.П000010000303,
	|		АлкогольнаяПродукция.П000010000304,
	|		АлкогольнаяПродукция.П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер,
	|		НачальныеОстатки.КоличествоНачальныйОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение
	|	ИЗ
	|		АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачальныеОстатки КАК НачальныеОстатки
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|				ПО НачальныеОстатки.Подразделение = ОбособленныеПодразделения.Подразделение
	|					И НачальныеОстатки.Организация = ОбособленныеПодразделения.Организация
	|			ПО АлкогольнаяПродукция.Номенклатура = НачальныеОстатки.Номенклатура
	|	ГДЕ
	|		НачальныеОстатки.Номенклатура ЕСТЬ НЕ NULL ) КАК Сводный
	|
	|СГРУППИРОВАТЬ ПО
	|	Сводный.СсылкаПодразделение,
	|	Сводный.П000010000301,
	|	Сводный.П000010000302,
	|	Сводный.П000010000303,
	|	Сводный.П000010000304,
	|	Сводный.П000010000305
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел2_ИсточникиДанных()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000020000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000020000302,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА Производители.Ссылка
	|		ИНАЧЕ Импортеры.Ссылка
	|	КОНЕЦ КАК ПроизводительИмпортер,
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|				ТОГДА Производители.НаименованиеПолное
	|			ИНАЧЕ Импортеры.НаименованиеПолное
	|		КОНЕЦ, 1, 200) КАК П000020000303,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.ИНН
	|					ИНАЧЕ Производители.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.ИНН
	|				ИНАЧЕ Импортеры.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000020000304,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.КПП
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.КПП
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК П000020000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Импортеры
	|			ПО СпрНоменклатура.Импортер = Импортеры.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Производители
	|			ПО СпрНоменклатура.Производитель = Производители.Ссылка
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.КодВида169 В(&КодыВида169)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ КоличествоИзГТД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГТД),
	|			&ВидыСубконтоНоменклатураГТД,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ) КАК Период,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Контрагенты) КАК Поставщик,
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеДт, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			СчетКт В (&Субсчета60),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000020000301 КАК П000020000301,
	|	АлкогольнаяПродукция.П000020000302 КАК П000020000302,
	|	АлкогольнаяПродукция.П000020000303 КАК П000020000303,
	|	АлкогольнаяПродукция.П000020000304 КАК П000020000304,
	|	АлкогольнаяПродукция.П000020000305 КАК П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200) КАК П000020000306,
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ КАК П000020000307,
	|	ОборотыЗаПериод.Поставщик.КПП КАК П000020000308,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.ДатаВходящегоДокумента, ОборотыЗаПериод.Период) КАК П000020000313,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК П000020000314,
	|	КоличествоИзГТД.НомерГТД КАК П000020000315,
	|	СУММА(ВЫБОР
	|			КОГДА КоличествоИзГТД.НомерГТД ЕСТЬ NULL
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт
	|			ИНАЧЕ КоличествоИзГТД.КоличествоОборотДт
	|		КОНЕЦ * АлкогольнаяПродукция.КоэффПересчетаДал) КАК П000020000316,
	|	ОборотыЗаПериод.Подразделение КАК Подразделение,
	|	ОборотыЗаПериод.Организация КАК Организация,
	|	ОборотыЗаПериод.Поставщик КАК Поставщик,
	|	АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор КАК ДокументПоступления
	|ПОМЕСТИТЬ ДанныеОтчета
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыЗаПериод КАК ОборотыЗаПериод
	|			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзГТД КАК КоличествоИзГТД
	|			ПО ОборотыЗаПериод.Номенклатура = КоличествоИзГТД.Номенклатура
	|				И ОборотыЗаПериод.Регистратор = КоличествоИзГТД.Регистратор
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|			ПО ОборотыЗаПериод.Регистратор = ПоступлениеТоваровУслуг.Ссылка
	|		ПО АлкогольнаяПродукция.Номенклатура = ОборотыЗаПериод.Номенклатура
	|ГДЕ
	|	ОборотыЗаПериод.Номенклатура ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000020000301,
	|	АлкогольнаяПродукция.П000020000302,
	|	АлкогольнаяПродукция.П000020000303,
	|	АлкогольнаяПродукция.П000020000304,
	|	АлкогольнаяПродукция.П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200),
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ,
	|	ОборотыЗаПериод.Поставщик.КПП,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.ДатаВходящегоДокумента, ОборотыЗаПериод.Период),
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО),
	|	КоличествоИзГТД.НомерГТД,
	|	ОборотыЗаПериод.Подразделение,
	|	ОборотыЗаПериод.Организация,
	|	ОборотыЗаПериод.Поставщик,
	|	АлкогольнаяПродукция.ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	П000020000313
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоИзГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АлкогольнаяПродукция";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел2_Результат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОтчета.Поставщик КАК Поставщик,
	|	ДанныеОтчета.П000020000313 КАК П000020000313,
	|	ДанныеОтчета.П000020000302 КАК П000020000302,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции) КАК КодВидаПродукции,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии) КАК ВидЛицензии,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.Период) КАК ДатаПоследнейЛицензии
	|ПОМЕСТИТЬ ДатыПоследнихЛицензий
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО ДанныеОтчета.Поставщик = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик
	|			И (ДанныеОтчета.П000020000302 = ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции
	|				ИЛИ ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции = """")
	|			И (ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво))
	|			И ДанныеОтчета.П000020000313 >= ЛицензииПоставщиковАлкогольнойПродукции.Период
	|			И (ДанныеОтчета.П000020000313 <= ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания
	|				ИЛИ ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ
	|	ЛицензииПоставщиковАлкогольнойПродукции.Поставщик ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОтчета.Поставщик,
	|	ДанныеОтчета.П000020000313,
	|	ДанныеОтчета.П000020000302
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	П000020000313
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОтчета.П000020000301 КАК П000020000301,
	|	ДанныеОтчета.П000020000302 КАК П000020000302,
	|	ДанныеОтчета.П000020000303 КАК П000020000303,
	|	ДанныеОтчета.П000020000304 КАК П000020000304,
	|	ДанныеОтчета.П000020000305 КАК П000020000305,
	|	ДанныеОтчета.П000020000306 КАК П000020000306,
	|	ДанныеОтчета.П000020000307 КАК П000020000307,
	|	ДанныеОтчета.П000020000308 КАК П000020000308,
	|	ЛицензииПоставщиковАлкогольнойПродукции.СерияНомер КАК П000020000392,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Период КАК П000020000310,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания КАК П000020000311,
	|	ЛицензииПоставщиковАлкогольнойПродукции.КемВыдана КАК П000020000312,
	|	ДанныеОтчета.П000020000313 КАК П000020000313,
	|	ДанныеОтчета.П000020000314 КАК П000020000314,
	|	ДанныеОтчета.П000020000315 КАК П000020000315,
	|	ДанныеОтчета.П000020000316 КАК П000020000316,
	|	ДанныеОтчета.Подразделение КАК Подразделение,
	|	ДанныеОтчета.Организация КАК Организация,
	|	ДанныеОтчета.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ДанныеОтчета.ДокументПоступления КАК ДокументПоступления,
	|	ДанныеОтчета.Поставщик КАК Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПоследнихЛицензий КАК ДатыПоследнихЛицензий
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|			ПО ДатыПоследнихЛицензий.Поставщик = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик
	|				И ДатыПоследнихЛицензий.КодВидаПродукции = ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции
	|				И ДатыПоследнихЛицензий.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|				И ДатыПоследнихЛицензий.ДатаПоследнейЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.Период
	|		ПО ДанныеОтчета.Поставщик = ДатыПоследнихЛицензий.Поставщик
	|			И ДанныеОтчета.П000020000313 = ДатыПоследнихЛицензий.П000020000313
	|			И ДанныеОтчета.П000020000302 = ДатыПоследнихЛицензий.П000020000302
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|		ПО ДанныеОтчета.Подразделение = ОбособленныеПодразделения.Подразделение
	|			И ДанныеОтчета.Организация = ОбособленныеПодразделения.Организация
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ВестиУчетПоПодразделениям = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	Если ВестиУчетПоПодразделениям Тогда
		СписокОрганизаций = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ПараметрыОтчета.Организация);
	Иначе
		СписокОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОтчета.Организация);
	КонецЕсли;
		
	ДокументСсылкаАлкоОтчет					= ПараметрыОтчета.ДокументСсылка;
	ВспомогательныйАдрес 					= ПараметрыОтчета.ВспомогательныйАдрес;
	
	// индикация начала работы фоновой операции
	РегламентированнаяОтчетностьАЛКО.СообщитьПроцентВыполнения( , 0, 100);

	СтруктураИдГруппИменРегистровСведений 	= ПараметрыОтчета.СтруктураИдГруппИменРегистровСведений;
	
	// Определим объект Отчета
	ИмяФормыОбъекта							= ПараметрыОтчета.ИмяФормыОбъекта;
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	
	СтруктураИдГруппБуферИтогов 			= ПараметрыОтчета.СтруктураИдГруппБуферИтогов;
	СтруктураИтогов = Новый Структура;
	КолВБлокеЗаписей = 3000;
	
	МаксИндексСтраницы						= Контейнер.МаксИндексСтраницы;
	МаксИндексСтраницы = МаксИндексСтраницы + 1;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)";
	
	Результат = Запрос.ВыполнитьПакет();
	МассивСчетов41 = Результат[0].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов79 = Результат[1].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов60 = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	
	ВидыСубконтоНоменклатураГТД = Новый Массив;
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомераГТД);
	
	МассивКодовПродукции = РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки(
		"ВидыПродукции", ПараметрыОтчета.мДатаКонцаПериодаОтчета, ИмяФормыОбъекта);
	
	Запрос.УстановитьПараметр("ДатаНач", 		             НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		             КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация",                 ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",           СписокОрганизаций); // включая обособленные подразделения
	Запрос.УстановитьПараметр("Субсчета41",                  МассивСчетов41);
	Запрос.УстановитьПараметр("Субсчета79",                  МассивСчетов79);
	Запрос.УстановитьПараметр("Субсчета60",                  МассивСчетов60);
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконтоНоменклатураГТД", ВидыСубконтоНоменклатураГТД);
	Запрос.УстановитьПараметр("ПустоеПодразделение",         Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("КодыВида169",                 МассивКодовПродукции);
	
	//Заполнение Раздел 1
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям);

	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.КорПодразделение,
		|	ОборотыЗаПериод.Организация
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстатки.Подразделение,
		|	НачальныеОстатки.Организация
		|ИЗ
		|	НачальныеОстатки КАК НачальныеОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел1_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Раздел_ИмяРабочегоРегистра 	= СтруктураИдГруппИменРегистровСведений["Раздел1"];

	
	Раздел                          = Контейнер.Раздел1;
	Раздел_ТЗ_Хранилище             = Контейнер.Раздел1_ТЗ_Хранилище;
	Раздел_СервисРегистров          = Контейнер.Раздел1_СервисРегистров;
	Раздел_СервисРегистровУдаленные = Контейнер.Раздел1_СервисРегистровУдаленные;
		
	// Удаляем все страницы текущего отчета
	Для Каждого СтрокаСервисРегистровГруппы Из Раздел_СервисРегистров Цикл
		
		НоваяСтрокаСервисРегистровГруппыУдаленные = Раздел_СервисРегистровУдаленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.	
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,
					НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
									
	КонецЦикла;
				
	Раздел_СервисРегистров.Очистить();
	ИндексСтраницы = -1;
	ИдГруппы = "П0000100003";
	
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[ИдГруппы];
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		РазделТекущий = Раздел.Добавить();
		Раздел_СервисРегистровТекущий = Раздел_СервисРегистров.Добавить();
		
		МаксИндексСтраницы = МаксИндексСтраницы + 1;
		
		Если РазделТекущий.Данные.Количество() = 0 Тогда
			РазделТекущий.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		ПредставлениеПодразделения = СведенияОПодразделенииXML(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН);
		Если РазделТекущий.ДополнительныеДанные.Количество() = 0 Тогда
			РазделТекущий.ДополнительныеДанные.Добавить(Новый Структура); 
		КонецЕсли;
		РазделТекущий.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);

		Раздел_ДанныеДопСтрокТекущий = Раздел_ТЗ_Хранилище.Скопировать();

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
	
		КоличествоТекСтрок = 0;

		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
			
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			ОбъектОтчета.Расчет(ИдГруппы, НоваяСтрокаДопСтрок); // расчет по строке
			
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];

			КонецЦикла;
		
			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
				
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
			    			
			    Раздел_ДанныеДопСтрокТекущий.Очистить();

			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
				
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,	
												МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = МаксИндексСтраницы;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
	    		
	КонецЦикла;
	СтруктураИтогов.Вставить(ИдГруппы, МассивРезультатов);

	
	// Заполнение Раздел 2.
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел2_ИсточникиДанных();
	
 	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОтчета.Подразделение КАК Подразделение,
		|	ДанныеОтчета.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ДанныеОтчета КАК ДанныеОтчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, ПараметрыОтчета.Организация);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;

	Запрос.Текст = ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел2_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Раздел_ИмяРабочегоРегистра 	= СтруктураИдГруппИменРегистровСведений["Раздел2"];
		
	Раздел	 							= Контейнер.Раздел2;
	Раздел_ТЗ_Хранилище     			= Контейнер.Раздел2_ТЗ_Хранилище;
	Раздел_СервисРегистров        		= Контейнер.Раздел2_СервисРегистров;
	Раздел_СервисРегистровУдаленные  	= Контейнер.Раздел2_СервисРегистровУдаленные;
		
	// Удаляем все страницы текущего отчета
	Для Каждого СтрокаСервисРегистровГруппы Из Раздел_СервисРегистров Цикл

		НоваяСтрокаСервисРегистровГруппыУдаленные = Раздел_СервисРегистровУдаленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.	
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,
					НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
									
	КонецЦикла;
	
	Раздел_СервисРегистров.Очистить();
	
	ИндексСтраницы = -1;
	ИдГруппы = "П0000200003";

	
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[ИдГруппы];
	
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		РазделТекущий = Раздел.Добавить();
		Раздел_СервисРегистровТекущий = Раздел_СервисРегистров.Добавить();
		
		МаксИндексСтраницы = МаксИндексСтраницы + 1;
		
		Если РазделТекущий.Данные.Количество() = 0 Тогда
			РазделТекущий.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		ПредставлениеПодразделения = СведенияОПодразделенииXML(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН);
		Если РазделТекущий.ДополнительныеДанные.Количество() = 0 Тогда
			РазделТекущий.ДополнительныеДанные.Добавить(Новый Структура); 
		КонецЕсли;
		РазделТекущий.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);
		
		Раздел_ДанныеДопСтрокТекущий = Раздел_ТЗ_Хранилище.Скопировать();

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	

		КонецЦикла;
		
		КоличествоТекСтрок = 0;
		
		СерияНомер = Новый Структура("П000020000391,П000020000392");
		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
		
			СерияНомерТекст = СокрЛП(Выборка.П000020000392);
			ПозицияРазделителя = Найти(СерияНомерТекст, ",");
			Если ПозицияРазделителя = 0 Тогда
				ПозицияРазделителя = Найти(СерияНомерТекст, " ");
			КонецЕсли;
			Если ПозицияРазделителя <> 0 Тогда
				СерияНомер.П000020000391 = СокрЛП(Лев(СерияНомерТекст, ПозицияРазделителя - 1));
				СерияНомер.П000020000392 = СокрЛП(Сред(СерияНомерТекст, ПозицияРазделителя + 1));
			Иначе
				СерияНомер.П000020000391 = Неопределено;
				СерияНомер.П000020000392 = СерияНомерТекст;		
			КонецЕсли;

			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, СерияНомер);
			
			// Расчета по строке в разделе 2 нет.
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
																				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];
				
			КонецЦикла;		

			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
							    
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
							
			    Раздел_ДанныеДопСтрокТекущий.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
		
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,	
												МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = МаксИндексСтраницы;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
		
	КонецЦикла;
	СтруктураИтогов.Вставить(ИдГруппы, МассивРезультатов);
	
	Контейнер.МаксИндексСтраницы = МаксИндексСтраницы;
	Контейнер.Вставить("СтруктураИтогов", СтруктураИтогов);
	
	// Помещаем во временное хранилище Контейнер для механизма длительных операций.
	АдресХранилища = Неопределено;
	Если ПараметрыОтчета.Свойство("АдресХранилища", АдресХранилища) Тогда	
		ПоместитьВоВременноеХранилище(Контейнер, АдресХранилища);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Приложение25ФормаОтчета2019Кв1

Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение25ФормаОтчета2019Кв1(ПоказателиОтчета) Экспорт

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303Адрес", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000313", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000316", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000317", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000318", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000319", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000320", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303Адрес", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000313", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000303Адрес", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000313", Истина, Ложь);
	
КонецПроцедуры

Функция ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Производитель КАК Производитель,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000010000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000010000302,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА Производители.Ссылка
	|		ИНАЧЕ Импортеры.Ссылка
	|	КОНЕЦ КАК ПроизводительИмпортер,
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|				ТОГДА Производители.НаименованиеПолное
	|			ИНАЧЕ Импортеры.НаименованиеПолное
	|		КОНЕЦ, 1, 200) КАК П000010000303,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.ИНН
	|					ИНАЧЕ Производители.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.ИНН
	|				ИНАЧЕ Импортеры.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010000304,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.КПП
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.КПП
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Импортеры
	|		ПО (СпрНоменклатура.Импортер = Импортеры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Производители
	|		ПО (СпрНоменклатура.Производитель = Производители.Ссылка)
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.КодВида169 В(&КодыВида169)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Контрагент,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение) КАК КорПодразделение,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотДт) КАК КоличествоОборотДт,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт) КАК КоличествоОборотКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|					И ХозрасчетныйОбороты.КоличествоОборотКт < 0
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|					И ХозрасчетныйОбороты.КоличествоОборотДт < 0
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлассификацияРегистратора
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	(НЕ ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры
	|			ИЛИ &ДополнительноеУсловиеПоПодразделениям)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение),
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|					И ХозрасчетныйОбороты.КоличествоОборотКт < 0
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|					И ХозрасчетныйОбороты.КоличествоОборотДт < 0
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт) КАК КоличествоНачальныйОстатокДт
	|ПОМЕСТИТЬ НачальныеОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНач,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение),
	|	ХозрасчетныйОстатки.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительноеУсловиеПоПодразделениям",
		?(ВестиУчетПоПодразделениям, "ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) <> ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение)", "ЛОЖЬ"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел1_Результат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сводный.СсылкаПодразделение КАК СсылкаПодразделение,
	|	Сводный.П000010000301 КАК П000010000301,
	|	Сводный.П000010000302 КАК П000010000302,
	|	Сводный.П000010000303 КАК П000010000303,
	|	Сводный.П000010000304 КАК П000010000304,
	|	Сводный.П000010000305 КАК П000010000305,
	|	МАКСИМУМ(Сводный.ПроизводительИмпортер) КАК ПроизводительИмпортер,
	|	СУММА(Сводный.П000010000306) КАК П000010000306,
	|	СУММА(Сводный.П000010000307) КАК П000010000307,
	|	СУММА(Сводный.П000010000308) КАК П000010000308,
	|	СУММА(Сводный.П000010000310) КАК П000010000310,
	|	СУММА(Сводный.П000010000311) КАК П000010000311,
	|	СУММА(Сводный.П000010000312) КАК П000010000312,
	|	СУММА(Сводный.П000010000314) КАК П000010000314,
	|	СУММА(Сводный.П000010000315) КАК П000010000315,
	|	СУММА(Сводный.П000010000316) КАК П000010000316,
	|	СУММА(Сводный.П000010000317) КАК П000010000317
	|ИЗ
	|	(ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301 КАК П000010000301,
	|		АлкогольнаяПродукция.П000010000302 КАК П000010000302,
	|		АлкогольнаяПродукция.П000010000303 КАК П000010000303,
	|		АлкогольнаяПродукция.П000010000304 КАК П000010000304,
	|		АлкогольнаяПродукция.П000010000305 КАК П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|		0 КАК П000010000306,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					И ОборотыЗаПериод.КоличествоОборотДт > 0
	|				ТОГДА ВЫБОР
	|						КОГДА ОборотыЗаПериод.Контрагент = АлкогольнаяПродукция.Производитель
	|							ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000307,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					И ОборотыЗаПериод.КоличествоОборотДт > 0
	|				ТОГДА ВЫБОР
	|						КОГДА ОборотыЗаПериод.Контрагент = АлкогольнаяПродукция.Производитель
	|							ТОГДА 0
	|						ИНАЧЕ ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000308,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 1
	|				ТОГДА (ОборотыЗаПериод.КоличествоОборотДт - ОборотыЗаПериод.КоличествоОборотКт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000310,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					И ОборотыЗаПериод.КлассификацияРегистратора <> 1
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000311,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КоличествоОборотДт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000312,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 2
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000314,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|					И ОборотыЗаПериод.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					И ОборотыЗаПериод.КлассификацияРегистратора = 0
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000315,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 3
	|				ТОГДА (ОборотыЗаПериод.КоличествоОборотКт - ОборотыЗаПериод.КоличествоОборотДт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000316,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КоличествоОборотКт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000317,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|	ИЗ
	|		ОборотыЗаПериод КАК ОборотыЗаПериод
	|			ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ПО ОборотыЗаПериод.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|			ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|				И ОборотыЗаПериод.Организация = ОбособленныеПодразделения.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеКорПодразделения
	|			ПО ОборотыЗаПериод.КорПодразделение = ОбособленныеКорПодразделения.Подразделение
	|				И ОборотыЗаПериод.Организация = ОбособленныеКорПодразделения.Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301,
	|		АлкогольнаяПродукция.П000010000302,
	|		АлкогольнаяПродукция.П000010000303,
	|		АлкогольнаяПродукция.П000010000304,
	|		АлкогольнаяПродукция.П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер,
	|		НачальныеОстатки.КоличествоНачальныйОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение
	|	ИЗ
	|		НачальныеОстатки КАК НачальныеОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ПО НачальныеОстатки.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|			ПО НачальныеОстатки.Подразделение = ОбособленныеПодразделения.Подразделение
	|				И НачальныеОстатки.Организация = ОбособленныеПодразделения.Организация) КАК Сводный
	|
	|СГРУППИРОВАТЬ ПО
	|	Сводный.СсылкаПодразделение,
	|	Сводный.П000010000301,
	|	Сводный.П000010000302,
	|	Сводный.П000010000303,
	|	Сводный.П000010000304,
	|	Сводный.П000010000305
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел2_ИсточникиДанных()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000020000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000020000302,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА Производители.Ссылка
	|		ИНАЧЕ Импортеры.Ссылка
	|	КОНЕЦ КАК ПроизводительИмпортер,
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|				ТОГДА Производители.НаименованиеПолное
	|			ИНАЧЕ Импортеры.НаименованиеПолное
	|		КОНЕЦ, 1, 200) КАК П000020000303,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.ИНН
	|					ИНАЧЕ Производители.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.ИНН
	|				ИНАЧЕ Импортеры.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000020000304,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.КПП
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.КПП
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК П000020000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Импортеры
	|		ПО (СпрНоменклатура.Импортер = Импортеры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Производители
	|		ПО (СпрНоменклатура.Производитель = Производители.Ссылка)
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.КодВида169 В(&КодыВида169)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ КоличествоИзГТД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГТД),
	|			&ВидыСубконтоНоменклатураГТД,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ) КАК Период,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Контрагенты) КАК Поставщик,
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеДт, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			СчетКт В (&Субсчета60),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000020000301 КАК П000020000301,
	|	АлкогольнаяПродукция.П000020000302 КАК П000020000302,
	|	АлкогольнаяПродукция.П000020000303 КАК П000020000303,
	|	АлкогольнаяПродукция.П000020000304 КАК П000020000304,
	|	АлкогольнаяПродукция.П000020000305 КАК П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200) КАК П000020000306,
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ КАК П000020000307,
	|	ОборотыЗаПериод.Поставщик.КПП КАК П000020000308,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.ДатаВходящегоДокумента, ОборотыЗаПериод.Период) КАК П000020000310,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК П000020000311,
	|	КоличествоИзГТД.НомерГТД КАК П000020000312,
	|	СУММА(ВЫБОР
	|			КОГДА КоличествоИзГТД.НомерГТД ЕСТЬ NULL
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт
	|			ИНАЧЕ КоличествоИзГТД.КоличествоОборотДт
	|		КОНЕЦ * АлкогольнаяПродукция.КоэффПересчетаДал) КАК П000020000313,
	|	ОборотыЗаПериод.Подразделение КАК Подразделение,
	|	ОборотыЗаПериод.Организация КАК Организация,
	|	ОборотыЗаПериод.Поставщик КАК Поставщик,
	|	АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор КАК ДокументДвижения
	|ПОМЕСТИТЬ ДанныеОтчета
	|ИЗ
	|	ОборотыЗаПериод КАК ОборотыЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ПО ОборотыЗаПериод.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзГТД КАК КоличествоИзГТД
	|		ПО ОборотыЗаПериод.Номенклатура = КоличествоИзГТД.Номенклатура
	|			И ОборотыЗаПериод.Регистратор = КоличествоИзГТД.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ОборотыЗаПериод.Регистратор = ПоступлениеТоваровУслуг.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000020000301,
	|	АлкогольнаяПродукция.П000020000302,
	|	АлкогольнаяПродукция.П000020000303,
	|	АлкогольнаяПродукция.П000020000304,
	|	АлкогольнаяПродукция.П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200),
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ,
	|	ОборотыЗаПериод.Поставщик.КПП,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.ДатаВходящегоДокумента, ОборотыЗаПериод.Период),
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО),
	|	КоличествоИзГТД.НомерГТД,
	|	ОборотыЗаПериод.Подразделение,
	|	ОборотыЗаПериод.Организация,
	|	ОборотыЗаПериод.Поставщик,
	|	АлкогольнаяПродукция.ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	П000020000310
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоИзГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АлкогольнаяПродукция";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел2_Результат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОтчета.Поставщик КАК Поставщик,
	|	ДанныеОтчета.П000020000310 КАК П000020000310,
	|	ДанныеОтчета.П000020000302 КАК П000020000302,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции) КАК КодВидаПродукции,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии) КАК ВидЛицензии,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.Период) КАК ДатаПоследнейЛицензии
	|ПОМЕСТИТЬ ДатыПоследнихЛицензий
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО ДанныеОтчета.Поставщик = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик
	|			И (ДанныеОтчета.П000020000302 = ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции
	|				ИЛИ ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции = """")
	|			И (ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво))
	|			И ДанныеОтчета.П000020000310 >= ЛицензииПоставщиковАлкогольнойПродукции.Период
	|			И (ДанныеОтчета.П000020000310 <= ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания
	|				ИЛИ ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ
	|	ЛицензииПоставщиковАлкогольнойПродукции.Поставщик ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОтчета.Поставщик,
	|	ДанныеОтчета.П000020000310,
	|	ДанныеОтчета.П000020000302
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	П000020000310
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОтчета.П000020000301 КАК П000020000301,
	|	ДанныеОтчета.П000020000302 КАК П000020000302,
	|	ДанныеОтчета.П000020000303 КАК П000020000303,
	|	ДанныеОтчета.П000020000304 КАК П000020000304,
	|	ДанныеОтчета.П000020000305 КАК П000020000305,
	|	ДанныеОтчета.П000020000306 КАК П000020000306,
	|	ДанныеОтчета.П000020000307 КАК П000020000307,
	|	ДанныеОтчета.П000020000308 КАК П000020000308,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ВидДеятельности КАК П000020000309,
	|	ДанныеОтчета.П000020000310 КАК П000020000310,
	|	ДанныеОтчета.П000020000311 КАК П000020000311,
	|	ДанныеОтчета.П000020000312 КАК П000020000312,
	|	ДанныеОтчета.П000020000313 КАК П000020000313,
	|	ДанныеОтчета.Подразделение КАК Подразделение,
	|	ДанныеОтчета.Организация КАК Организация,
	|	ДанныеОтчета.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ДанныеОтчета.ДокументДвижения КАК ДокументДвижения,
	|	ДанныеОтчета.Поставщик КАК Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПоследнихЛицензий КАК ДатыПоследнихЛицензий
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|			ПО ДатыПоследнихЛицензий.Поставщик = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик
	|				И ДатыПоследнихЛицензий.КодВидаПродукции = ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции
	|				И ДатыПоследнихЛицензий.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|				И ДатыПоследнихЛицензий.ДатаПоследнейЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.Период
	|		ПО ДанныеОтчета.Поставщик = ДатыПоследнихЛицензий.Поставщик
	|			И ДанныеОтчета.П000020000310 = ДатыПоследнихЛицензий.П000020000310
	|			И ДанныеОтчета.П000020000302 = ДатыПоследнихЛицензий.П000020000302
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|		ПО ДанныеОтчета.Подразделение = ОбособленныеПодразделения.Подразделение
	|			И ДанныеОтчета.Организация = ОбособленныеПодразделения.Организация
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел3_ИсточникиДанных()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000030000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000030000302,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА Производители.Ссылка
	|		ИНАЧЕ Импортеры.Ссылка
	|	КОНЕЦ КАК ПроизводительИмпортер,
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|				ТОГДА Производители.НаименованиеПолное
	|			ИНАЧЕ Импортеры.НаименованиеПолное
	|		КОНЕЦ, 1, 200) КАК П000030000303,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.ИНН
	|					ИНАЧЕ Производители.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.ИНН
	|				ИНАЧЕ Импортеры.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000030000304,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.КПП
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.КПП
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК П000030000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Импортеры
	|		ПО (СпрНоменклатура.Импортер = Импортеры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Производители
	|		ПО (СпрНоменклатура.Производитель = Производители.Ссылка)
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.КодВида169 В(&КодыВида169)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОбороты.КоличествоОборотКт - ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотКт
	|ПОМЕСТИТЬ КоличествоИзГТД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГТД),
	|			&ВидыСубконтоНоменклатураГТД,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ) КАК Период,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.КорректировкаПоступления).ДатаВходящегоДокумента
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ)
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.КорректировкаПоступления).НомерВходящегоДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Контрагенты) КАК Поставщик,
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеДт, &ПустоеПодразделение) КАК Подразделение,
	|	-ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			СчетКт В (&Субсчета60),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровПоставщику).Дата
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровПоставщику).Номер
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ХозрасчетныйОборотыДтКт.Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Справочник.Контрагенты),
	|	ХозрасчетныйОборотыДтКт.Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеКт, &ПустоеПодразделение),
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета7602),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			СчетКт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоКт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотКт > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000030000301 КАК П000030000301,
	|	АлкогольнаяПродукция.П000030000302 КАК П000030000302,
	|	АлкогольнаяПродукция.П000030000303 КАК П000030000303,
	|	АлкогольнаяПродукция.П000030000304 КАК П000030000304,
	|	АлкогольнаяПродукция.П000030000305 КАК П000030000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200) КАК П000030000306,
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ КАК П000030000307,
	|	ОборотыЗаПериод.Поставщик.КПП КАК П000030000308,
	|	ОборотыЗаПериод.ДатаВходящегоДокумента КАК П000030000310,
	|	ОборотыЗаПериод.НомерВходящегоДокумента КАК П000030000311,
	|	КоличествоИзГТД.НомерГТД КАК П000030000312,
	|	СУММА(ВЫБОР
	|			КОГДА КоличествоИзГТД.НомерГТД ЕСТЬ NULL
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт
	|			ИНАЧЕ КоличествоИзГТД.КоличествоОборотКт
	|		КОНЕЦ * АлкогольнаяПродукция.КоэффПересчетаДал) КАК П000030000313,
	|	ОборотыЗаПериод.Подразделение КАК Подразделение,
	|	ОборотыЗаПериод.Организация КАК Организация,
	|	ОборотыЗаПериод.Поставщик КАК Поставщик,
	|	АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор КАК ДокументДвижения
	|ПОМЕСТИТЬ ДанныеОтчета
	|ИЗ
	|	ОборотыЗаПериод КАК ОборотыЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ПО ОборотыЗаПериод.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзГТД КАК КоличествоИзГТД
	|		ПО ОборотыЗаПериод.Номенклатура = КоличествоИзГТД.Номенклатура
	|			И ОборотыЗаПериод.Регистратор = КоличествоИзГТД.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000030000301,
	|	АлкогольнаяПродукция.П000030000302,
	|	АлкогольнаяПродукция.П000030000303,
	|	АлкогольнаяПродукция.П000030000304,
	|	АлкогольнаяПродукция.П000030000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200),
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ,
	|	ОборотыЗаПериод.Поставщик.КПП,
	|	ОборотыЗаПериод.ДатаВходящегоДокумента,
	|	ОборотыЗаПериод.НомерВходящегоДокумента,
	|	КоличествоИзГТД.НомерГТД,
	|	ОборотыЗаПериод.Подразделение,
	|	ОборотыЗаПериод.Организация,
	|	ОборотыЗаПериод.Поставщик,
	|	АлкогольнаяПродукция.ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	П000030000310
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоИзГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АлкогольнаяПродукция";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел3_Результат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОтчета.Поставщик КАК Поставщик,
	|	ДанныеОтчета.П000030000310 КАК П000030000310,
	|	ДанныеОтчета.П000030000302 КАК П000030000302,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции) КАК КодВидаПродукции,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии) КАК ВидЛицензии,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.Период) КАК ДатаПоследнейЛицензии
	|ПОМЕСТИТЬ ДатыПоследнихЛицензий
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО ДанныеОтчета.Поставщик = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик
	|			И (ДанныеОтчета.П000030000302 = ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции
	|				ИЛИ ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции = """")
	|			И (ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво))
	|			И ДанныеОтчета.П000030000310 >= ЛицензииПоставщиковАлкогольнойПродукции.Период
	|			И (ДанныеОтчета.П000030000310 <= ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания
	|				ИЛИ ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ
	|	ЛицензииПоставщиковАлкогольнойПродукции.Поставщик ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОтчета.Поставщик,
	|	ДанныеОтчета.П000030000310,
	|	ДанныеОтчета.П000030000302
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	П000030000310
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОтчета.П000030000301 КАК П000030000301,
	|	ДанныеОтчета.П000030000302 КАК П000030000302,
	|	ДанныеОтчета.П000030000303 КАК П000030000303,
	|	ДанныеОтчета.П000030000304 КАК П000030000304,
	|	ДанныеОтчета.П000030000305 КАК П000030000305,
	|	ДанныеОтчета.П000030000306 КАК П000030000306,
	|	ДанныеОтчета.П000030000307 КАК П000030000307,
	|	ДанныеОтчета.П000030000308 КАК П000030000308,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ВидДеятельности КАК П000030000309,
	|	ДанныеОтчета.П000030000310 КАК П000030000310,
	|	ДанныеОтчета.П000030000311 КАК П000030000311,
	|	ДанныеОтчета.П000030000312 КАК П000030000312,
	|	ДанныеОтчета.П000030000313 КАК П000030000313,
	|	ДанныеОтчета.Подразделение КАК Подразделение,
	|	ДанныеОтчета.Организация КАК Организация,
	|	ДанныеОтчета.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ДанныеОтчета.ДокументДвижения КАК ДокументДвижения,
	|	ДанныеОтчета.Поставщик КАК Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПоследнихЛицензий КАК ДатыПоследнихЛицензий
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|			ПО ДатыПоследнихЛицензий.Поставщик = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик
	|				И ДатыПоследнихЛицензий.КодВидаПродукции = ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции
	|				И ДатыПоследнихЛицензий.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|				И ДатыПоследнихЛицензий.ДатаПоследнейЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.Период
	|		ПО ДанныеОтчета.Поставщик = ДатыПоследнихЛицензий.Поставщик
	|			И ДанныеОтчета.П000030000310 = ДатыПоследнихЛицензий.П000030000310
	|			И ДанныеОтчета.П000030000302 = ДатыПоследнихЛицензий.П000030000302
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|		ПО ДанныеОтчета.Подразделение = ОбособленныеПодразделения.Подразделение
	|			И ДанныеОтчета.Организация = ОбособленныеПодразделения.Организация
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение25ФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ВестиУчетПоПодразделениям = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	Если ВестиУчетПоПодразделениям Тогда
		СписокОрганизаций = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ПараметрыОтчета.Организация);
	Иначе
		СписокОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОтчета.Организация);
	КонецЕсли;
		
	ДокументСсылкаАлкоОтчет					= ПараметрыОтчета.ДокументСсылка;
	ВспомогательныйАдрес 					= ПараметрыОтчета.ВспомогательныйАдрес;
	
	// индикация начала работы фоновой операции
	РегламентированнаяОтчетностьАЛКО.СообщитьПроцентВыполнения( , 0, 100);

	СтруктураИдГруппИменРегистровСведений 	= ПараметрыОтчета.СтруктураИдГруппИменРегистровСведений;
	
	// Определим объект Отчета
	ИмяФормыОбъекта							= ПараметрыОтчета.ИмяФормыОбъекта;
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	
	СтруктураИдГруппБуферИтогов 			= ПараметрыОтчета.СтруктураИдГруппБуферИтогов;
	СтруктураИтогов = Новый Структура;
	КолВБлокеЗаписей = 3000;
	
	МаксИндексСтраницы						= Контейнер.МаксИндексСтраницы;
	МаксИндексСтраницы = МаксИндексСтраницы + 1;	
	
	КонтейнерПоРазделам = РазбитьКонтейнерПоРазделам(Контейнер, ДокументСсылкаАлкоОтчет, СтруктураИдГруппИменРегистровСведений);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям)";
	
	Результат = Запрос.ВыполнитьПакет();
	МассивСчетов41 = Результат[0].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов79 = Результат[1].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов60 = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов7602 = Результат[3].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов7602.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям);
	
	ВидыСубконтоНоменклатураГТД = Новый Массив;
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомераГТД);
	
	МассивКодовПродукции = РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки(
		"ВидыПродукции", ПараметрыОтчета.мДатаКонцаПериодаОтчета, ИмяФормыОбъекта);
	
	Запрос.УстановитьПараметр("ДатаНач", 		             НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		             КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация",                 ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",           СписокОрганизаций); // включая обособленные подразделения
	Запрос.УстановитьПараметр("Субсчета41",                  МассивСчетов41);
	Запрос.УстановитьПараметр("Субсчета79",                  МассивСчетов79);
	Запрос.УстановитьПараметр("Субсчета60",                  МассивСчетов60);
	Запрос.УстановитьПараметр("Субсчета7602",                МассивСчетов7602);
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконтоНоменклатураГТД", ВидыСубконтоНоменклатураГТД);
	Запрос.УстановитьПараметр("ПустоеПодразделение",         Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("КодыВида169",                 МассивКодовПродукции);
	
	//Заполнение Раздел 1
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям);

	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.КорПодразделение,
		|	ОборотыЗаПериод.Организация
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстатки.Подразделение,
		|	НачальныеОстатки.Организация
		|ИЗ
		|	НачальныеОстатки КАК НачальныеОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел1_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	СтруктураРаздела = КонтейнерПоРазделам.Обороты;
	ИндексСтраницы = -1;
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[СтруктураРаздела.ИдГруппы];
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		ИндексРаздела = ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам,
			ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, МаксИндексСтраницы);
		РазделТекущий = Контейнер.Декларация[ИндексРаздела];
		Раздел_СервисРегистровТекущий = СтруктураРаздела.СервисРегистров[ИндексРаздела];
		Раздел_ДанныеДопСтрокТекущий = СтруктураРаздела.ТЗ_Хранилище.Скопировать();
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
	
		КоличествоТекСтрок = 0;

		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
			
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			ОбъектОтчета.Расчет(СтруктураРаздела.ИдГруппы, НоваяСтрокаДопСтрок); // расчет по строке
			
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];

			КонецЦикла;
		
			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
				
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
					ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
					Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
			    			
			    Раздел_ДанныеДопСтрокТекущий.Очистить();

			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
				ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
				Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
				
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет,
			СтруктураРаздела.ИмяРабочегоРегистра, МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
	    		
	КонецЦикла;
	СтруктураИтогов.Вставить(СтруктураРаздела.ИдГруппы, МассивРезультатов);

	
	// Заполнение Раздел 2.
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел2_ИсточникиДанных();
	
 	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОтчета.Подразделение КАК Подразделение,
		|	ДанныеОтчета.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ДанныеОтчета КАК ДанныеОтчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, ПараметрыОтчета.Организация);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;

	Запрос.Текст = ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел2_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	СтруктураРаздела = КонтейнерПоРазделам.Поступления;
	ИндексСтраницы = -1;
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[СтруктураРаздела.ИдГруппы];	
	МассивРезультатов = Новый Массив;

	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		ИндексРаздела = ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам,
			ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, МаксИндексСтраницы);
		РазделТекущий = Контейнер.Декларация[ИндексРаздела];
		Раздел_СервисРегистровТекущий = СтруктураРаздела.СервисРегистров[ИндексРаздела];
		Раздел_ДанныеДопСтрокТекущий = СтруктураРаздела.ТЗ_Хранилище.Скопировать();
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	

		КонецЦикла;
		
		КоличествоТекСтрок = 0;
		
		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
		
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			
			// Расчета по строке в разделе 2 нет.
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
																				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];
				
			КонецЦикла;		

			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
							    
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
					ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
					Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
							
			    Раздел_ДанныеДопСтрокТекущий.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
				ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
				Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
		
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет,
			СтруктураРаздела.ИмяРабочегоРегистра, МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
		
	КонецЦикла;
	СтруктураИтогов.Вставить(СтруктураРаздела.ИдГруппы, МассивРезультатов);
	
	
	// Заполнение Раздел 3.
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел3_ИсточникиДанных();
	
 	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОтчета.Подразделение КАК Подразделение,
		|	ДанныеОтчета.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ДанныеОтчета КАК ДанныеОтчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, ПараметрыОтчета.Организация);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;

	Запрос.Текст = ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел3_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	СтруктураРаздела = КонтейнерПоРазделам.Возвраты;
	ИндексСтраницы = -1;
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[СтруктураРаздела.ИдГруппы];
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		ИндексРаздела = ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам,
			ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, МаксИндексСтраницы);
		РазделТекущий = Контейнер.Декларация[ИндексРаздела];
		Раздел_СервисРегистровТекущий = СтруктураРаздела.СервисРегистров[ИндексРаздела];
		Раздел_ДанныеДопСтрокТекущий = СтруктураРаздела.ТЗ_Хранилище.Скопировать();
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	

		КонецЦикла;
		
		КоличествоТекСтрок = 0;
		
		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
		
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			
			// Расчета по строке в разделе 2 нет.
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
																				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];
				
			КонецЦикла;		

			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
							    
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
					ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
					Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
							
			    Раздел_ДанныеДопСтрокТекущий.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
				ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
				Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
		
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет,
			СтруктураРаздела.ИмяРабочегоРегистра, МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
		
	КонецЦикла;
	СтруктураИтогов.Вставить(СтруктураРаздела.ИдГруппы, МассивРезультатов);
	
	
	Контейнер.МаксИндексСтраницы = МаксИндексСтраницы;
	Контейнер.Вставить("СтруктураИтогов", СтруктураИтогов);
	
	СсылкаПодразделение = Контейнер.Декларация.Колонки.Найти("СсылкаПодразделение");
	Если СсылкаПодразделение <> Неопределено Тогда
		Контейнер.Декларация.Колонки.Удалить(СсылкаПодразделение);
	КонецЕсли;
	
	// Помещаем во временное хранилище Контейнер для механизма длительных операций.
	АдресХранилища = Неопределено;
	Если ПараметрыОтчета.Свойство("АдресХранилища", АдресХранилища) Тогда	
		ПоместитьВоВременноеХранилище(Контейнер, АдресХранилища);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Приложение12ФормаОтчета2012Кв3

Функция ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Производитель КАК Производитель,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000010000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000010000302,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА Производители.Ссылка
	|		ИНАЧЕ Импортеры.Ссылка
	|	КОНЕЦ КАК ПроизводительИмпортер,
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|				ТОГДА Производители.НаименованиеПолное
	|			ИНАЧЕ Импортеры.НаименованиеПолное
	|		КОНЕЦ, 1, 200) КАК П000010000303,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.ИНН
	|					ИНАЧЕ Производители.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.ИНН
	|				ИНАЧЕ Импортеры.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010000304,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.КПП
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.КПП
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Импортеры
	|			ПО СпрНоменклатура.Импортер = Импортеры.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Производители
	|			ПО СпрНоменклатура.Производитель = Производители.Ссылка
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.КодВида169 В(&КодыВида169)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Контрагент,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение) КАК КорПодразделение,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотДт) КАК КоличествоОборотДт,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт) КАК КоличествоОборотКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлассификацияРегистратора
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			&УсловиеКорСчетаВиртуальнойТаблицы,
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение),
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт) КАК КоличествоНачальныйОстатокДт
	|ПОМЕСТИТЬ НачальныеОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНач,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение),
	|	ХозрасчетныйОстатки.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	Если ВестиУчетПоПодразделениям Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКорСчетаВиртуальнойТаблицы", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКорСчетаВиртуальнойТаблицы", "НЕ КорСчет В (&Субсчета41)");
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел1_Результат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сводный.СсылкаПодразделение КАК СсылкаПодразделение,
	|	Сводный.П000010000301 КАК П000010000301,
	|	Сводный.П000010000302 КАК П000010000302,
	|	Сводный.П000010000303 КАК П000010000303,
	|	Сводный.П000010000304 КАК П000010000304,
	|	Сводный.П000010000305 КАК П000010000305,
	|	МАКСИМУМ(Сводный.ПроизводительИмпортер) КАК ПроизводительИмпортер,
	|	СУММА(Сводный.П000010000306) КАК П000010000306,
	|	СУММА(Сводный.П000010000307) КАК П000010000307,
	|	СУММА(Сводный.П000010000308) КАК П000010000308,
	|	СУММА(Сводный.П000010000311) КАК П000010000311,
	|	СУММА(Сводный.П000010000312) КАК П000010000312,
	|	СУММА(Сводный.П000010000314) КАК П000010000314,
	|	СУММА(Сводный.П000010000315) КАК П000010000315,
	|	СУММА(Сводный.П000010000316) КАК П000010000316,
	|	СУММА(Сводный.П000010000312ПоОрганизации) КАК П000010000312ПоОрганизации,
	|	СУММА(Сводный.П000010000315ПоОрганизации) КАК П000010000315ПоОрганизации
	|ПОМЕСТИТЬ ДанныеОтчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301 КАК П000010000301,
	|		АлкогольнаяПродукция.П000010000302 КАК П000010000302,
	|		АлкогольнаяПродукция.П000010000303 КАК П000010000303,
	|		АлкогольнаяПродукция.П000010000304 КАК П000010000304,
	|		АлкогольнаяПродукция.П000010000305 КАК П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|		0 КАК П000010000306,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					И ОборотыЗаПериод.Контрагент = АлкогольнаяПродукция.Производитель
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000307,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					И ОборотыЗаПериод.Контрагент <> АлкогольнаяПродукция.Производитель
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000308,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 1
	|				ТОГДА (ОборотыЗаПериод.КоличествоОборотДт - ОборотыЗаПериод.КоличествоОборотКт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000311,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					ИЛИ ОборотыЗаПериод.КлассификацияРегистратора = 1
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КоличествоОборотДт <= 0
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					ИЛИ ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА 0
	|			ИНАЧЕ ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|		КОНЕЦ КАК П000010000312ПоОрганизации,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					ИЛИ ОборотыЗаПериод.КлассификацияРегистратора = 1
	|					ИЛИ ОборотыЗаПериод.КоличествоОборотДт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|					И ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			ИНАЧЕ ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|		КОНЕЦ КАК П000010000312,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 2
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000314,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора <> 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КоличествоОборотКт <= 0
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					ИЛИ ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА 0
	|			ИНАЧЕ ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|		КОНЕЦ КАК П000010000315ПоОрганизации,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора <> 0
	|					ИЛИ ОборотыЗаПериод.КоличествоОборотКт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|					И ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			ИНАЧЕ ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|		КОНЕЦ КАК П000010000315,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 3
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000316,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|	ИЗ
	|		АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОборотыЗаПериод КАК ОборотыЗаПериод
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|				ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|					И ОборотыЗаПериод.Организация = ОбособленныеПодразделения.Организация
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеКорПодразделения
	|				ПО ОборотыЗаПериод.КорПодразделение = ОбособленныеКорПодразделения.Подразделение
	|					И ОборотыЗаПериод.Организация = ОбособленныеКорПодразделения.Организация
	|			ПО АлкогольнаяПродукция.Номенклатура = ОборотыЗаПериод.Номенклатура
	|	ГДЕ
	|		ОборотыЗаПериод.Номенклатура ЕСТЬ НЕ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301,
	|		АлкогольнаяПродукция.П000010000302,
	|		АлкогольнаяПродукция.П000010000303,
	|		АлкогольнаяПродукция.П000010000304,
	|		АлкогольнаяПродукция.П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер,
	|		НачальныеОстатки.КоличествоНачальныйОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение
	|	ИЗ
	|		АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачальныеОстатки КАК НачальныеОстатки
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|				ПО НачальныеОстатки.Подразделение = ОбособленныеПодразделения.Подразделение
	|					И НачальныеОстатки.Организация = ОбособленныеПодразделения.Организация
	|			ПО АлкогольнаяПродукция.Номенклатура = НачальныеОстатки.Номенклатура
	|	ГДЕ
	|		НачальныеОстатки.Номенклатура ЕСТЬ НЕ NULL ) КАК Сводный
	|
	|СГРУППИРОВАТЬ ПО
	|	Сводный.СсылкаПодразделение,
	|	Сводный.П000010000301,
	|	Сводный.П000010000302,
	|	Сводный.П000010000303,
	|	Сводный.П000010000304,
	|	Сводный.П000010000305
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОтчета.СсылкаПодразделение КАК СсылкаПодразделение,
	|	ДанныеОтчета.П000010000301 КАК П000010000301,
	|	ДанныеОтчета.П000010000302 КАК П000010000302,
	|	ДанныеОтчета.П000010000303 КАК П000010000303,
	|	ДанныеОтчета.П000010000304 КАК П000010000304,
	|	ДанныеОтчета.П000010000305 КАК П000010000305,
	|	ДанныеОтчета.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ДанныеОтчета.П000010000306 КАК П000010000306,
	|	ДанныеОтчета.П000010000307 КАК П000010000307,
	|	ДанныеОтчета.П000010000308 КАК П000010000308,
	|	ДанныеОтчета.П000010000311 КАК П000010000311,
	|	ДанныеОтчета.П000010000312 КАК П000010000312,
	|	ДанныеОтчета.П000010000314 КАК П000010000314,
	|	ДанныеОтчета.П000010000315 КАК П000010000315,
	|	ДанныеОтчета.П000010000316 КАК П000010000316
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел2_ИсточникиДанных()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000020000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000020000302,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА Производители.Ссылка
	|		ИНАЧЕ Импортеры.Ссылка
	|	КОНЕЦ КАК ПроизводительИмпортер,
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|				ТОГДА Производители.НаименованиеПолное
	|			ИНАЧЕ Импортеры.НаименованиеПолное
	|		КОНЕЦ, 1, 200) КАК П000020000303,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.ИНН
	|					ИНАЧЕ Производители.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.ИНН
	|				ИНАЧЕ Импортеры.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000020000304,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.КПП
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.КПП
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК П000020000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Импортеры
	|			ПО СпрНоменклатура.Импортер = Импортеры.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Производители
	|			ПО СпрНоменклатура.Производитель = Производители.Ссылка
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.КодВида169 В(&КодыВида169)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ КоличествоИзГТД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГТД),
	|			&ВидыСубконтоНоменклатураГТД,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ) КАК Период,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Контрагенты) КАК Поставщик,
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеДт, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			СчетКт В (&Субсчета60),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел2_Результат()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000020000301 КАК П000020000301,
	|	АлкогольнаяПродукция.П000020000302 КАК П000020000302,
	|	АлкогольнаяПродукция.П000020000303 КАК П000020000303,
	|	АлкогольнаяПродукция.П000020000304 КАК П000020000304,
	|	АлкогольнаяПродукция.П000020000305 КАК П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200) КАК П000020000306,
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ КАК П000020000307,
	|	ОборотыЗаПериод.Поставщик.КПП КАК П000020000308,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.ДатаВходящегоДокумента, ОборотыЗаПериод.Период) КАК П000020000309,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК П000020000310,
	|	КоличествоИзГТД.НомерГТД КАК П000020000311,
	|	СУММА(ВЫБОР
	|			КОГДА КоличествоИзГТД.НомерГТД ЕСТЬ NULL
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт
	|			ИНАЧЕ КоличествоИзГТД.КоличествоОборотДт
	|		КОНЕЦ * АлкогольнаяПродукция.КоэффПересчетаДал) КАК П000020000312,
	|	ОборотыЗаПериод.Подразделение КАК Подразделение,
	|	ОборотыЗаПериод.Организация КАК Организация,
	|	АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор КАК ДокументПоступления,
	|	ОборотыЗаПериод.Поставщик КАК Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыЗаПериод КАК ОборотыЗаПериод
	|			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзГТД КАК КоличествоИзГТД
	|			ПО ОборотыЗаПериод.Номенклатура = КоличествоИзГТД.Номенклатура
	|				И ОборотыЗаПериод.Регистратор = КоличествоИзГТД.Регистратор
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|			ПО ОборотыЗаПериод.Регистратор = ПоступлениеТоваровУслуг.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|			ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|				И ОборотыЗаПериод.Организация = ОбособленныеПодразделения.Организация
	|		ПО АлкогольнаяПродукция.Номенклатура = ОборотыЗаПериод.Номенклатура
	|ГДЕ
	|	ОборотыЗаПериод.Номенклатура ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000020000301,
	|	АлкогольнаяПродукция.П000020000302,
	|	АлкогольнаяПродукция.П000020000303,
	|	АлкогольнаяПродукция.П000020000304,
	|	АлкогольнаяПродукция.П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200),
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ,
	|	ОборотыЗаПериод.Поставщик.КПП,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.ДатаВходящегоДокумента, ОборотыЗаПериод.Период),
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО),
	|	КоличествоИзГТД.НомерГТД,
	|	ОборотыЗаПериод.Подразделение,
	|	ОборотыЗаПериод.Организация,
	|	АлкогольнаяПродукция.ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор,
	|	ОборотыЗаПериод.Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение12ФормаОтчета2012Кв3(ПараметрыОтчета, Контейнер) Экспорт

	ВестиУчетПоПодразделениям = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	Если ВестиУчетПоПодразделениям Тогда
		СписокОрганизаций = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ПараметрыОтчета.Организация);
	Иначе
		СписокОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОтчета.Организация);
	КонецЕсли;
		
	ДокументСсылкаАлкоОтчет					= ПараметрыОтчета.ДокументСсылка;
	ВспомогательныйАдрес 					= ПараметрыОтчета.ВспомогательныйАдрес;
	
	// индикация начала работы фоновой операции
	РегламентированнаяОтчетностьАЛКО.СообщитьПроцентВыполнения( , 0, 100);

	СтруктураИдГруппИменРегистровСведений 	= ПараметрыОтчета.СтруктураИдГруппИменРегистровСведений;
	
	// Определим объект Отчета
	ИмяФормыОбъекта							= ПараметрыОтчета.ИмяФормыОбъекта;
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	
	СтруктураИдГруппБуферИтогов 			= ПараметрыОтчета.СтруктураИдГруппБуферИтогов;
	СтруктураИтогов = Новый Структура;
	КолВБлокеЗаписей = 3000;
	
	МаксИндексСтраницы						= Контейнер.МаксИндексСтраницы;
	МаксИндексСтраницы = МаксИндексСтраницы + 1;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)";
	
	Результат = Запрос.ВыполнитьПакет();
	МассивСчетов41 = Результат[0].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов79 = Результат[1].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов60 = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	
	ВидыСубконтоНоменклатураГТД = Новый Массив;
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомераГТД);

	МассивКодовПродукции = РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки(
		"ВидыПродукции", ПараметрыОтчета.мДатаКонцаПериодаОтчета, ИмяФормыОбъекта);
	
	Запрос.УстановитьПараметр("ДатаНач", 		             НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		             КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация",                 ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",           СписокОрганизаций); // включая обособленные подразделения
	Запрос.УстановитьПараметр("Субсчета41",                  МассивСчетов41);
	Запрос.УстановитьПараметр("Субсчета79",                  МассивСчетов79);
	Запрос.УстановитьПараметр("Субсчета60",                  МассивСчетов60);
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконтоНоменклатураГТД", ВидыСубконтоНоменклатураГТД);
	Запрос.УстановитьПараметр("ПустоеПодразделение",         Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("КодыВида169",                 МассивКодовПродукции);
		
	//Заполнение Раздел 1
	
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям);
	
	Если ВестиУчетПоПодразделениям Тогда

	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.КорПодразделение,
		|	ОборотыЗаПериод.Организация
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстатки.Подразделение,
		|	НачальныеОстатки.Организация
		|ИЗ
		|	НачальныеОстатки КАК НачальныеОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел1_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Раздел_ИмяРабочегоРегистра 	= СтруктураИдГруппИменРегистровСведений["Раздел1"];
	
	Раздел                          = Контейнер.Раздел1;
	Раздел_ТЗ_Хранилище             = Контейнер.Раздел1_ТЗ_Хранилище;
	Раздел_СервисРегистров          = Контейнер.Раздел1_СервисРегистров;
	Раздел_СервисРегистровУдаленные = Контейнер.Раздел1_СервисРегистровУдаленные;
	
	// Удаляем все страницы текущего отчета
	Для Каждого СтрокаСервисРегистровГруппы Из Раздел_СервисРегистров Цикл
		
		НоваяСтрокаСервисРегистровГруппыУдаленные = Раздел_СервисРегистровУдаленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.	
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,
					НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
									
	КонецЦикла;
				
	Раздел_СервисРегистров.Очистить();
	ИндексСтраницы = -1;
	ИдГруппы = "П0000100003";
	
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[ИдГруппы];
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		РазделТекущий = Раздел.Добавить();
		Раздел_СервисРегистровТекущий = Раздел_СервисРегистров.Добавить();
		
		МаксИндексСтраницы = МаксИндексСтраницы + 1;
		
		Если РазделТекущий.Данные.Количество() = 0 Тогда
			РазделТекущий.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		ПредставлениеПодразделения = СведенияОПодразделенииXML(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН);
		Если РазделТекущий.ДополнительныеДанные.Количество() = 0 Тогда
			РазделТекущий.ДополнительныеДанные.Добавить(Новый Структура); 
		КонецЕсли;
		РазделТекущий.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);

		Раздел_ДанныеДопСтрокТекущий = Раздел_ТЗ_Хранилище.Скопировать();

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
	
		КоличествоТекСтрок = 0;

		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
			
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			ОбъектОтчета.Расчет(ИдГруппы, НоваяСтрокаДопСтрок); // расчет по строке
			
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];

			КонецЦикла;
		
			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
				
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
			    			
			    Раздел_ДанныеДопСтрокТекущий.Очистить();

			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
				
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,	
												МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = МаксИндексСтраницы;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
	    		
	КонецЦикла;
	СтруктураИтогов.Вставить(ИдГруппы, МассивРезультатов);

	
	//Заполнение Раздел 2
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел2_ИсточникиДанных();
	
	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел2_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Раздел_ИмяРабочегоРегистра 	= СтруктураИдГруппИменРегистровСведений["Раздел2"];
		
	Раздел	 							= Контейнер.Раздел2;
	Раздел_ТЗ_Хранилище     			= Контейнер.Раздел2_ТЗ_Хранилище;
	Раздел_СервисРегистров        		= Контейнер.Раздел2_СервисРегистров;
	Раздел_СервисРегистровУдаленные  	= Контейнер.Раздел2_СервисРегистровУдаленные;
	
	// Удаляем все страницы текущего отчета
	Для Каждого СтрокаСервисРегистровГруппы Из Раздел_СервисРегистров Цикл

		НоваяСтрокаСервисРегистровГруппыУдаленные = Раздел_СервисРегистровУдаленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.	
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,
					НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
									
	КонецЦикла;
	
	Раздел_СервисРегистров.Очистить();
	
	ИндексСтраницы = -1;
	ИдГруппы = "П0000200003";

	
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[ИдГруппы];
	
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		РазделТекущий = Раздел.Добавить();
		Раздел_СервисРегистровТекущий = Раздел_СервисРегистров.Добавить();
		
		МаксИндексСтраницы = МаксИндексСтраницы + 1;
		
		Если РазделТекущий.Данные.Количество() = 0 Тогда
			РазделТекущий.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		ПредставлениеПодразделения = СведенияОПодразделенииXML(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН);
		Если РазделТекущий.ДополнительныеДанные.Количество() = 0 Тогда
			РазделТекущий.ДополнительныеДанные.Добавить(Новый Структура); 
		КонецЕсли;
		РазделТекущий.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);
		
		Раздел_ДанныеДопСтрокТекущий = Раздел_ТЗ_Хранилище.Скопировать();

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	

		КонецЦикла;
		
		КоличествоТекСтрок = 0;
				
		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
		    
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			
			// Расчета по строке в разделе 2 нет.
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
																				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];
				
			КонецЦикла;		

			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
							    
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
							
			    Раздел_ДанныеДопСтрокТекущий.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
		
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,	
												МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = МаксИндексСтраницы;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
		
	КонецЦикла;
	СтруктураИтогов.Вставить(ИдГруппы, МассивРезультатов);
	
	Контейнер.МаксИндексСтраницы = МаксИндексСтраницы;
	Контейнер.Вставить("СтруктураИтогов", СтруктураИтогов);
	
	// Помещаем во временное хранилище Контейнер для механизма длительных операций.
	АдресХранилища = Неопределено;
	Если ПараметрыОтчета.Свойство("АдресХранилища", АдресХранилища) Тогда	
		ПоместитьВоВременноеХранилище(Контейнер, АдресХранилища);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Приложение26ФормаОтчета2019Кв1

Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение26ФормаОтчета2019Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303Адрес", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000313", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000316", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000317", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000318", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000319", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000320", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303Адрес", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000312", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000303Адрес", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000312", Истина, Ложь);
	
КонецПроцедуры

Функция ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Производитель КАК Производитель,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000010000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000010000302,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА Производители.Ссылка
	|		ИНАЧЕ Импортеры.Ссылка
	|	КОНЕЦ КАК ПроизводительИмпортер,
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|				ТОГДА Производители.НаименованиеПолное
	|			ИНАЧЕ Импортеры.НаименованиеПолное
	|		КОНЕЦ, 1, 200) КАК П000010000303,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.ИНН
	|					ИНАЧЕ Производители.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.ИНН
	|				ИНАЧЕ Импортеры.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010000304,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.КПП
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.КПП
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Импортеры
	|		ПО (СпрНоменклатура.Импортер = Импортеры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Производители
	|		ПО (СпрНоменклатура.Производитель = Производители.Ссылка)
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.КодВида169 В(&КодыВида169)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Контрагент,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение) КАК КорПодразделение,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотДт) КАК КоличествоОборотДт,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт) КАК КоличествоОборотКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|					И ХозрасчетныйОбороты.КоличествоОборотКт < 0
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|					И ХозрасчетныйОбороты.КоличествоОборотДт < 0
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлассификацияРегистратора
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	&ДополнительноеУсловиеПоСчету
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение),
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|					И ХозрасчетныйОбороты.КоличествоОборотКт < 0
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|					И ХозрасчетныйОбороты.КоличествоОборотДт < 0
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт) КАК КоличествоНачальныйОстатокДт
	|ПОМЕСТИТЬ НачальныеОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНач,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение),
	|	ХозрасчетныйОстатки.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительноеУсловиеПоСчету",
		?(ВестиУчетПоПодразделениям, "ИСТИНА", "(НЕ ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры)"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел1_Результат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сводный.СсылкаПодразделение КАК СсылкаПодразделение,
	|	Сводный.П000010000301 КАК П000010000301,
	|	Сводный.П000010000302 КАК П000010000302,
	|	Сводный.П000010000303 КАК П000010000303,
	|	Сводный.П000010000304 КАК П000010000304,
	|	Сводный.П000010000305 КАК П000010000305,
	|	МАКСИМУМ(Сводный.ПроизводительИмпортер) КАК ПроизводительИмпортер,
	|	СУММА(Сводный.П000010000306) КАК П000010000306,
	|	СУММА(Сводный.П000010000307) КАК П000010000307,
	|	СУММА(Сводный.П000010000308) КАК П000010000308,
	|	СУММА(Сводный.П000010000311) КАК П000010000311,
	|	СУММА(Сводный.П000010000312) КАК П000010000312,
	|	СУММА(Сводный.П000010000313) КАК П000010000313,
	|	СУММА(Сводный.П000010000315) КАК П000010000315,
	|	СУММА(Сводный.П000010000316) КАК П000010000316,
	|	СУММА(Сводный.П000010000317) КАК П000010000317,
	|	СУММА(Сводный.П000010000318) КАК П000010000318,
	|	СУММА(Сводный.П000010000312ПоОрганизации) КАК П000010000312ПоОрганизации,
	|	СУММА(Сводный.П000010000316ПоОрганизации) КАК П000010000316ПоОрганизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301 КАК П000010000301,
	|		АлкогольнаяПродукция.П000010000302 КАК П000010000302,
	|		АлкогольнаяПродукция.П000010000303 КАК П000010000303,
	|		АлкогольнаяПродукция.П000010000304 КАК П000010000304,
	|		АлкогольнаяПродукция.П000010000305 КАК П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|		0 КАК П000010000306,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					И ОборотыЗаПериод.КоличествоОборотДт > 0
	|					И ОборотыЗаПериод.Контрагент = АлкогольнаяПродукция.Производитель
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000307,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					И ОборотыЗаПериод.КоличествоОборотДт > 0
	|					И ОборотыЗаПериод.Контрагент <> АлкогольнаяПродукция.Производитель
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000308,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 1
	|				ТОГДА (ОборотыЗаПериод.КоличествоОборотДт - ОборотыЗаПериод.КоличествоОборотКт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000311,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					ИЛИ ОборотыЗаПериод.КлассификацияРегистратора = 1
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КоличествоОборотДт <= 0
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					ИЛИ ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА 0
	|			ИНАЧЕ ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|		КОНЕЦ КАК П000010000312ПоОрганизации,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					И ОборотыЗаПериод.КлассификацияРегистратора <> 1
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000312,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КоличествоОборотДт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000313,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 2
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000315,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора <> 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КоличествоОборотКт <= 0
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					ИЛИ ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА 0
	|			ИНАЧЕ ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|		КОНЕЦ КАК П000010000316ПоОрганизации,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|					И ОборотыЗаПериод.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					И ОборотыЗаПериод.КлассификацияРегистратора = 0
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000316,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 3
	|				ТОГДА (ОборотыЗаПериод.КоличествоОборотКт - ОборотыЗаПериод.КоличествоОборотДт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000317,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КоличествоОборотКт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000318,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|	ИЗ
	|		ОборотыЗаПериод КАК ОборотыЗаПериод
	|			ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ПО ОборотыЗаПериод.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|			ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|				И ОборотыЗаПериод.Организация = ОбособленныеПодразделения.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеКорПодразделения
	|			ПО ОборотыЗаПериод.КорПодразделение = ОбособленныеКорПодразделения.Подразделение
	|				И ОборотыЗаПериод.Организация = ОбособленныеКорПодразделения.Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301,
	|		АлкогольнаяПродукция.П000010000302,
	|		АлкогольнаяПродукция.П000010000303,
	|		АлкогольнаяПродукция.П000010000304,
	|		АлкогольнаяПродукция.П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер,
	|		НачальныеОстатки.КоличествоНачальныйОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение
	|	ИЗ
	|		НачальныеОстатки КАК НачальныеОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ПО НачальныеОстатки.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|			ПО НачальныеОстатки.Подразделение = ОбособленныеПодразделения.Подразделение
	|				И НачальныеОстатки.Организация = ОбособленныеПодразделения.Организация) КАК Сводный
	|
	|СГРУППИРОВАТЬ ПО
	|	Сводный.СсылкаПодразделение,
	|	Сводный.П000010000301,
	|	Сводный.П000010000302,
	|	Сводный.П000010000303,
	|	Сводный.П000010000304,
	|	Сводный.П000010000305
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел2_ИсточникиДанных()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000020000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000020000302,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА Производители.Ссылка
	|		ИНАЧЕ Импортеры.Ссылка
	|	КОНЕЦ КАК ПроизводительИмпортер,
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|				ТОГДА Производители.НаименованиеПолное
	|			ИНАЧЕ Импортеры.НаименованиеПолное
	|		КОНЕЦ, 1, 200) КАК П000020000303,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.ИНН
	|					ИНАЧЕ Производители.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.ИНН
	|				ИНАЧЕ Импортеры.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000020000304,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.КПП
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.КПП
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК П000020000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Импортеры
	|		ПО (СпрНоменклатура.Импортер = Импортеры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Производители
	|		ПО (СпрНоменклатура.Производитель = Производители.Ссылка)
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.КодВида169 В(&КодыВида169)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ КоличествоИзГТД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГТД),
	|			&ВидыСубконтоНоменклатураГТД,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ) КАК Период,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.КорректировкаПоступления).ДокументПоступления
	|		ИНАЧЕ ХозрасчетныйОборотыДтКт.Регистратор
	|	КОНЕЦ КАК ДокументПоступления,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Контрагенты) КАК Поставщик,
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеДт, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			СчетКт В (&Субсчета60),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел2_Результат()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000020000301 КАК П000020000301,
	|	АлкогольнаяПродукция.П000020000302 КАК П000020000302,
	|	АлкогольнаяПродукция.П000020000303 КАК П000020000303,
	|	АлкогольнаяПродукция.П000020000304 КАК П000020000304,
	|	АлкогольнаяПродукция.П000020000305 КАК П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200) КАК П000020000306,
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ КАК П000020000307,
	|	ОборотыЗаПериод.Поставщик.КПП КАК П000020000308,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.ДатаВходящегоДокумента, ОборотыЗаПериод.Период) КАК П000020000309,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК П000020000310,
	|	КоличествоИзГТД.НомерГТД КАК П000020000311,
	|	СУММА(ВЫБОР
	|			КОГДА КоличествоИзГТД.НомерГТД ЕСТЬ NULL
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт
	|			ИНАЧЕ КоличествоИзГТД.КоличествоОборотДт
	|		КОНЕЦ * АлкогольнаяПродукция.КоэффПересчетаДал) КАК П000020000312,
	|	ОборотыЗаПериод.Подразделение КАК Подразделение,
	|	ОборотыЗаПериод.Организация КАК Организация,
	|	АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор КАК ДокументДвижения,
	|	ОборотыЗаПериод.Поставщик КАК Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|ИЗ
	|	ОборотыЗаПериод КАК ОборотыЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ПО ОборотыЗаПериод.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзГТД КАК КоличествоИзГТД
	|		ПО ОборотыЗаПериод.Номенклатура = КоличествоИзГТД.Номенклатура
	|			И ОборотыЗаПериод.Регистратор = КоличествоИзГТД.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ОборотыЗаПериод.ДокументПоступления = ПоступлениеТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|		ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|			И ОборотыЗаПериод.Организация = ОбособленныеПодразделения.Организация 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000020000301,
	|	АлкогольнаяПродукция.П000020000302,
	|	АлкогольнаяПродукция.П000020000303,
	|	АлкогольнаяПродукция.П000020000304,
	|	АлкогольнаяПродукция.П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200),
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ,
	|	ОборотыЗаПериод.Поставщик.КПП,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.ДатаВходящегоДокумента, ОборотыЗаПериод.Период),
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО),
	|	КоличествоИзГТД.НомерГТД,
	|	ОборотыЗаПериод.Подразделение,
	|	ОборотыЗаПериод.Организация,
	|	АлкогольнаяПродукция.ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор,
	|	ОборотыЗаПериод.Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел3_ИсточникиДанных()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000030000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000030000302,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА Производители.Ссылка
	|		ИНАЧЕ Импортеры.Ссылка
	|	КОНЕЦ КАК ПроизводительИмпортер,
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|				ТОГДА Производители.НаименованиеПолное
	|			ИНАЧЕ Импортеры.НаименованиеПолное
	|		КОНЕЦ, 1, 200) КАК П000030000303,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.ИНН
	|					ИНАЧЕ Производители.НалоговыйНомер
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.ИНН
	|				ИНАЧЕ Импортеры.НалоговыйНомер
	|			КОНЕЦ
	|	КОНЕЦ КАК П000030000304,
	|	ВЫБОР
	|		КОГДА Импортеры.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Производители.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА Производители.КПП
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Импортеры.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ТОГДА Импортеры.КПП
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК П000030000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Импортеры
	|		ПО (СпрНоменклатура.Импортер = Импортеры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Производители
	|		ПО (СпрНоменклатура.Производитель = Производители.Ссылка)
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.КодВида169 В(&КодыВида169)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОбороты.КоличествоОборотКт - ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотКт
	|ПОМЕСТИТЬ КоличествоИзГТД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГТД),
	|			&ВидыСубконтоНоменклатураГТД,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ) КАК Период,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.КорректировкаПоступления).ДатаВходящегоДокумента
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ)
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.КорректировкаПоступления).НомерВходящегоДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Контрагенты) КАК Поставщик,
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеДт, &ПустоеПодразделение) КАК Подразделение,
	|	-ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			СчетКт В (&Субсчета60),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровПоставщику).Дата
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровПоставщику).Номер
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ХозрасчетныйОборотыДтКт.Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Справочник.Контрагенты),
	|	ХозрасчетныйОборотыДтКт.Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеКт, &ПустоеПодразделение),
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета7602),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			СчетКт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоКт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотКт > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел3_Результат()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000030000301 КАК П000030000301,
	|	АлкогольнаяПродукция.П000030000302 КАК П000030000302,
	|	АлкогольнаяПродукция.П000030000303 КАК П000030000303,
	|	АлкогольнаяПродукция.П000030000304 КАК П000030000304,
	|	АлкогольнаяПродукция.П000030000305 КАК П000030000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200) КАК П000030000306,
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ КАК П000030000307,
	|	ОборотыЗаПериод.Поставщик.КПП КАК П000030000308,
	|	ОборотыЗаПериод.ДатаВходящегоДокумента КАК П000030000309,
	|	ОборотыЗаПериод.НомерВходящегоДокумента КАК П000030000310,
	|	КоличествоИзГТД.НомерГТД КАК П000030000311,
	|	СУММА(ВЫБОР
	|			КОГДА КоличествоИзГТД.НомерГТД ЕСТЬ NULL
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт
	|			ИНАЧЕ КоличествоИзГТД.КоличествоОборотКт
	|		КОНЕЦ * АлкогольнаяПродукция.КоэффПересчетаДал) КАК П000030000312,
	|	ОборотыЗаПериод.Подразделение КАК Подразделение,
	|	ОборотыЗаПериод.Организация КАК Организация,
	|	АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор КАК ДокументДвижения,
	|	ОборотыЗаПериод.Поставщик КАК Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|ИЗ
	|	ОборотыЗаПериод КАК ОборотыЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ПО ОборотыЗаПериод.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзГТД КАК КоличествоИзГТД
	|		ПО ОборотыЗаПериод.Номенклатура = КоличествоИзГТД.Номенклатура
	|			И ОборотыЗаПериод.Регистратор = КоличествоИзГТД.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|		ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|			И ОборотыЗаПериод.Организация = ОбособленныеПодразделения.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000030000301,
	|	АлкогольнаяПродукция.П000030000302,
	|	АлкогольнаяПродукция.П000030000303,
	|	АлкогольнаяПродукция.П000030000304,
	|	АлкогольнаяПродукция.П000030000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200),
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ,
	|	ОборотыЗаПериод.Поставщик.КПП,
	|	ОборотыЗаПериод.ДатаВходящегоДокумента,
	|	ОборотыЗаПериод.НомерВходящегоДокумента,
	|	КоличествоИзГТД.НомерГТД,
	|	ОборотыЗаПериод.Подразделение,
	|	ОборотыЗаПериод.Организация,
	|	АлкогольнаяПродукция.ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор,
	|	ОборотыЗаПериод.Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение26ФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер) Экспорт

	ВестиУчетПоПодразделениям = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	Если ВестиУчетПоПодразделениям Тогда
		СписокОрганизаций = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ПараметрыОтчета.Организация);
	Иначе
		СписокОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОтчета.Организация);
	КонецЕсли;
		
	ДокументСсылкаАлкоОтчет					= ПараметрыОтчета.ДокументСсылка;
	ВспомогательныйАдрес 					= ПараметрыОтчета.ВспомогательныйАдрес;
	
	// индикация начала работы фоновой операции
	РегламентированнаяОтчетностьАЛКО.СообщитьПроцентВыполнения( , 0, 100);

	СтруктураИдГруппИменРегистровСведений 	= ПараметрыОтчета.СтруктураИдГруппИменРегистровСведений;
	
	// Определим объект Отчета
	ИмяФормыОбъекта							= ПараметрыОтчета.ИмяФормыОбъекта;
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	
	СтруктураИдГруппБуферИтогов 			= ПараметрыОтчета.СтруктураИдГруппБуферИтогов;
	СтруктураИтогов = Новый Структура;
	КолВБлокеЗаписей = 3000;
	
	МаксИндексСтраницы						= Контейнер.МаксИндексСтраницы;
	МаксИндексСтраницы = МаксИндексСтраницы + 1;

	КонтейнерПоРазделам = РазбитьКонтейнерПоРазделам(Контейнер, ДокументСсылкаАлкоОтчет, СтруктураИдГруппИменРегистровСведений);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям)";
	
	Результат = Запрос.ВыполнитьПакет();
	МассивСчетов41 = Результат[0].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов79 = Результат[1].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов60 = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов7602 = Результат[3].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов7602.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям);
	
	ВидыСубконтоНоменклатураГТД = Новый Массив;
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомераГТД);

	МассивКодовПродукции = РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки(
		"ВидыПродукции", ПараметрыОтчета.мДатаКонцаПериодаОтчета, ИмяФормыОбъекта);
	
	Запрос.УстановитьПараметр("ДатаНач", 		             НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		             КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация",                 ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",           СписокОрганизаций); // включая обособленные подразделения
	Запрос.УстановитьПараметр("Субсчета41",                  МассивСчетов41);
	Запрос.УстановитьПараметр("Субсчета79",                  МассивСчетов79);
	Запрос.УстановитьПараметр("Субсчета60",                  МассивСчетов60);
	Запрос.УстановитьПараметр("Субсчета7602",                МассивСчетов7602);
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконтоНоменклатураГТД", ВидыСубконтоНоменклатураГТД);
	Запрос.УстановитьПараметр("ПустоеПодразделение",         Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("КодыВида169",                 МассивКодовПродукции);
		
	//Заполнение Раздел 1
	
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям);
	
	Если ВестиУчетПоПодразделениям Тогда

		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.КорПодразделение,
		|	ОборотыЗаПериод.Организация
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстатки.Подразделение,
		|	НачальныеОстатки.Организация
		|ИЗ
		|	НачальныеОстатки КАК НачальныеОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел1_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	СтруктураРаздела = КонтейнерПоРазделам.Обороты;
	ИндексСтраницы = -1;
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[СтруктураРаздела.ИдГруппы];
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		ИндексРаздела = ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам,
			ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, МаксИндексСтраницы);
		РазделТекущий = Контейнер.Декларация[ИндексРаздела];
		Раздел_СервисРегистровТекущий = СтруктураРаздела.СервисРегистров[ИндексРаздела];
		Раздел_ДанныеДопСтрокТекущий = СтруктураРаздела.ТЗ_Хранилище.Скопировать();
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
	
		КоличествоТекСтрок = 0;

		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
			
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			ОбъектОтчета.Расчет(СтруктураРаздела.ИдГруппы, НоваяСтрокаДопСтрок); // расчет по строке
			
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];

			КонецЦикла;
		
			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
				
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
					ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
					Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
			    			
			    Раздел_ДанныеДопСтрокТекущий.Очистить();

			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
				ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
				Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
				
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет,
			СтруктураРаздела.ИмяРабочегоРегистра, МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
	    		
	КонецЦикла;
	СтруктураИтогов.Вставить(СтруктураРаздела.ИдГруппы, МассивРезультатов);

	
	//Заполнение Раздел 2
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел2_ИсточникиДанных();
	
	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел2_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	СтруктураРаздела = КонтейнерПоРазделам.Поступления;
	ИндексСтраницы = -1;
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[СтруктураРаздела.ИдГруппы];	
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		ИндексРаздела = ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам,
			ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, МаксИндексСтраницы);
		РазделТекущий = Контейнер.Декларация[ИндексРаздела];
		Раздел_СервисРегистровТекущий = СтруктураРаздела.СервисРегистров[ИндексРаздела];
		Раздел_ДанныеДопСтрокТекущий = СтруктураРаздела.ТЗ_Хранилище.Скопировать();
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;
		
		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
		
		КоличествоТекСтрок = 0;
				
		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
		    
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			
			// Расчета по строке в разделе 2 нет.
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
																				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];
				
			КонецЦикла;		

			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
							    
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
					ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
					Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
							
			    Раздел_ДанныеДопСтрокТекущий.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
				ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
				Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
		
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет,
			СтруктураРаздела.ИмяРабочегоРегистра, МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
		
	КонецЦикла;
	СтруктураИтогов.Вставить(СтруктураРаздела.ИдГруппы, МассивРезультатов);
	
	
	//Заполнение Раздел 3
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел3_ИсточникиДанных();
	
	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел3_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	СтруктураРаздела = КонтейнерПоРазделам.Возвраты;
	ИндексСтраницы = -1;
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[СтруктураРаздела.ИдГруппы];
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		ИндексРаздела = ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам,
			ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, МаксИндексСтраницы);
		РазделТекущий = Контейнер.Декларация[ИндексРаздела];
		Раздел_СервисРегистровТекущий = СтруктураРаздела.СервисРегистров[ИндексРаздела];
		Раздел_ДанныеДопСтрокТекущий = СтруктураРаздела.ТЗ_Хранилище.Скопировать();
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
		
		КоличествоТекСтрок = 0;
				
		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
		    
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			
			// Расчета по строке в разделе 2 нет.
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
																				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];
				
			КонецЦикла;		

			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
							    
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
					ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
					Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
							
			    Раздел_ДанныеДопСтрокТекущий.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
				ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
				Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
		
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет,
			СтруктураРаздела.ИмяРабочегоРегистра, МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
		
	КонецЦикла;
	СтруктураИтогов.Вставить(СтруктураРаздела.ИдГруппы, МассивРезультатов);
	
	
	Контейнер.МаксИндексСтраницы = МаксИндексСтраницы;
	Контейнер.Вставить("СтруктураИтогов", СтруктураИтогов);
	
	СсылкаПодразделение = Контейнер.Декларация.Колонки.Найти("СсылкаПодразделение");
	Если СсылкаПодразделение <> Неопределено Тогда
		Контейнер.Декларация.Колонки.Удалить(СсылкаПодразделение);
	КонецЕсли;
	
	// Помещаем во временное хранилище Контейнер для механизма длительных операций.
	АдресХранилища = Неопределено;
	Если ПараметрыОтчета.Свойство("АдресХранилища", АдресХранилища) Тогда	
		ПоместитьВоВременноеХранилище(Контейнер, АдресХранилища);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ПолучитьПустуюТаблицуСписанныеТоварыНТТ() Экспорт
	
	ТаблицаСписанныеТовары = Новый ТаблицаЗначений;
	ТаблицаСписанныеТовары.Колонки.Добавить("ИмяСписка",          ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаСписанныеТовары.Колонки.Добавить("СинонимСписка",      ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаСписанныеТовары.Колонки.Добавить("НомерСтроки",        ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетУчета",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Количество",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаСписанныеТовары.Колонки.Добавить("СтавкаНДСВРознице",  Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСчетСписания",    Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСчетНаценка",     Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконто1");
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконто2");
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконто3");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто1");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто2");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто3");
	ТаблицаСписанныеТовары.Колонки.Добавить("Сумма",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВалютнаяСумма",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("Валюта",             Справочники.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписания",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияНУ",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияПР",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияВР",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаКорСписанияНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаКорСписанияПР", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаКорСписанияВР", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	ТаблицаСписанныеТовары.Колонки.Добавить("Содержание",		  ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаНаценки",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаНаценкиНУ",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаНаценкиПР",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаНаценкиВР",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаСписанныеТовары;
	
КонецФункции

Процедура СортировкаСчетовУчета(СчетаУчета,
	СчетаУчетаН,
	СчетаУчетаНС,
	СчетаУчетаНП,
	СчетаУчетаНПС,
	СчетаУчетаНК,
	СчетаУчетаНПК,
	СчетаУчетаНКС,
	СчетаУчетаН_Склад,
	СчетаУчетаНП_Склад,
	СчетаУчетаНК_Склад) Экспорт
	
	Для каждого Счет Из СчетаУчета Цикл
		
		НаСчетеВедетсяСуммовойУчетПоСкладам = БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(Счет);
		НаСчетеВедетсяПартионныйУчет        = БухгалтерскийУчет.НаСчетеВедетсяПартионныйУчет(Счет);
		НаСчетеВедетсяУчетПоКонтрагентам    = БухгалтерскийУчет.НаСчетеВедетсяУчетПоКонтрагентам(Счет);
		НаСчетеВедетсяУчетПоСкладам         = БухгалтерскийУчет.ВедетсяУчетПоСкладам(Счет);
		
		Если НаСчетеВедетсяСуммовойУчетПоСкладам
			И НаСчетеВедетсяПартионныйУчет Тогда
			СчетаУчетаНПС.Добавить(Счет);
			
		ИначеЕсли НаСчетеВедетсяПартионныйУчет
			И НаСчетеВедетсяУчетПоКонтрагентам Тогда
			СчетаУчетаНПК.Добавить(Счет);
			
		ИначеЕсли НаСчетеВедетсяСуммовойУчетПоСкладам
			И НаСчетеВедетсяУчетПоКонтрагентам Тогда
			СчетаУчетаНКС.Добавить(Счет);
			
		ИначеЕсли НаСчетеВедетсяПартионныйУчет Тогда
			СчетаУчетаНП.Добавить(Счет);
			Если НаСчетеВедетсяУчетПоСкладам Тогда
				СчетаУчетаНП_Склад.Добавить(Счет);
			КонецЕсли;
			
		ИначеЕсли НаСчетеВедетсяУчетПоКонтрагентам Тогда
			СчетаУчетаНК.Добавить(Счет);
			Если НаСчетеВедетсяУчетПоСкладам Тогда
				СчетаУчетаНК_Склад.Добавить(Счет);
			КонецЕсли;
			
		ИначеЕсли НаСчетеВедетсяСуммовойУчетПоСкладам Тогда
			СчетаУчетаНС.Добавить(Счет);
			
		Иначе
			СчетаУчетаН.Добавить(Счет);
			Если НаСчетеВедетсяУчетПоСкладам Тогда
				СчетаУчетаН_Склад.Добавить(Счет);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Определяет, используется ли оперативный расчет себестоимости по счету, указанному в строке таблицы.
// Функция имеет смысл при включенном отложенном проведении.
//
// Параметры:
//	СтрокаТовара - СтрокаТаблицыЗначений - Должна содержать колонки СчетУчета и КорСчетСписания.
//	СчетаРассчитываемыеОперативно - Массив, Неопределено - Массив счетов, остатки по которым получаются всегда.
//
// Возвращаемое значение:
//	Булево - Истина, если в переданной строке таблице хотя бы один из счетов требует
//			 оперативный расчет себестоимости, иначе Ложь.
//
Функция ОперативныйРасчетПоСчету(СтрокаТовара, СчетаРассчитываемыеОперативно = Неопределено) Экспорт
	
	Если СчетаРассчитываемыеОперативно = Неопределено Тогда
		СчетаРассчитываемыеОперативно = СчетаРассчитываемыеОперативно();
	КонецЕсли;
	
	ОперативныйРасчет = (СчетаРассчитываемыеОперативно.Найти(СтрокаТовара.СчетУчета) <> Неопределено
		Или СчетаРассчитываемыеОперативно.Найти(СтрокаТовара.КорСчетСписания) <> Неопределено);
		
	Возврат ОперативныйРасчет;
	
КонецФункции

Функция НеУказанаСтранаПроисхождения(НомерГТД, СтранаПроисхождения) Экспорт

	Возврат ЗначениеЗаполнено(НомерГТД) И НЕ ЗначениеЗаполнено(СтранаПроисхождения);

КонецФункции

Функция ПодготовитьТаблицуТорговойНаценкиАТТ(СтруктураПараметров)

	Регистратор            = СтруктураПараметров.Регистратор;
	Период                 = СтруктураПараметров.Период;
	Организация            = СтруктураПараметров.Организация;
	ТаблицаСписанныеТовары = СтруктураПараметров.ТаблицаСписанныеТовары;

	ПартионныйУчет = БухгалтерскийУчет.НаСчетеВедетсяПартионныйУчет(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если ПартионныйУчет Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСписанныеТовары", ТаблицаСписанныеТовары);
	Запрос.УстановитьПараметр("НачалоМесяца", 		    НачалоМесяца(Период));
	Запрос.УстановитьПараметр("МоментВремениДокумента", Новый МоментВремени(Период, Регистратор));
	Запрос.УстановитьПараметр("Организация", 		    Организация);
	Запрос.УстановитьПараметр("ВидыСубконто", 		    ВидыСубконто);
	Запрос.УстановитьПараметр("СчетаСебестоимостьПродаж",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСписанныеТовары.Номенклатура,
	|	ТаблицаСписанныеТовары.Склад,
	|	ТаблицаСписанныеТовары.Подразделение
	|ПОМЕСТИТЬ ТаблицаСписанныеТовары
	|ИЗ
	|	&ТаблицаСписанныеТовары КАК ТаблицаСписанныеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокКт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокКт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокКт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиТН
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремениДокумента,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаАТТ),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (Подразделение В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ТаблицаСписанныеТовары.Подразделение
	|						ИЗ
	|							ТаблицаСписанныеТовары)
	|					ИЛИ Подразделение ЕСТЬ NULL )
	|				И Субконто1 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаСписанныеТовары.Номенклатура
	|					ИЗ
	|						ТаблицаСписанныеТовары)
	|				И Субконто2 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаСписанныеТовары.Склад
	|					ИЗ
	|						ТаблицаСписанныеТовары)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиПС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремениДокумента,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (Подразделение В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ТаблицаСписанныеТовары.Подразделение
	|						ИЗ
	|							ТаблицаСписанныеТовары)
	|					ИЛИ Подразделение ЕСТЬ NULL )
	|				И Субконто1 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаСписанныеТовары.Номенклатура
	|					ИЗ
	|						ТаблицаСписанныеТовары)
	|				И Субконто2 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаСписанныеТовары.Склад
	|					ИЗ
	|						ТаблицаСписанныеТовары)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт3,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот
	|ПОМЕСТИТЬ ХозрасчетныйОборотыАТТ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоМесяца,
	|			&МоментВремениДокумента,
	|			,
	|			СчетДт В (&СчетаСебестоимостьПродаж),
	|			,
	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (ПодразделениеКт В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ТаблицаСписанныеТовары.Подразделение
	|						ИЗ
	|							ТаблицаСписанныеТовары)
	|					ИЛИ ПодразделениеКт ЕСТЬ NULL )) КАК ХозрасчетныйОборотыДтКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиТН.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстаткиТН.Субконто2 КАК Склад,
	|	ХозрасчетныйОстаткиТН.Субконто3 КАК Партия,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиТН.СуммаОстатокКт, 0)) КАК ТорговаяНаценка,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиТН.СуммаНУОстатокКт, 0)) КАК ТорговаяНаценкаНУ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиТН.СуммаПРОстатокКт, 0)) КАК ТорговаяНаценкаПР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиТН.СуммаВРОстатокКт, 0)) КАК ТорговаяНаценкаВР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиПС.СуммаОстатокДт, 0)) КАК ПродажнаяСтоимость,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыАТТ.СуммаОборот, 0)) КАК СписаннаяНаценкаСНачалаМесяца
	|ИЗ
	|	ХозрасчетныйОстаткиТН КАК ХозрасчетныйОстаткиТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиПС КАК ХозрасчетныйОстаткиПС
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОстаткиПС.Субконто1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2
	|			И ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОстаткиПС.Субконто3
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОборотыАТТ КАК ХозрасчетныйОборотыАТТ
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОборотыАТТ.СубконтоКт1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыАТТ.СубконтоКт2
	|			И ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОборотыАТТ.СубконтоКт3
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиТН.Субконто1,
	|	ХозрасчетныйОстаткиТН.Субконто2
	|	,ХозрасчетныйОстаткиТН.Субконто3";

	Если НЕ ПартионныйУчет Тогда // Исключение третьего субконто (партии) из запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстатки.Субконто3,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОборотыДтКт.СубконтоКт3,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиТН.Субконто3 КАК Партия,", "Неопределено КАК Партия,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОстаткиПС.Субконто3", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОборотыАТТ.СубконтоКт3", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",ХозрасчетныйОстаткиТН.Субконто3", "");
	КонецЕсли;

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПодготовитьТаблицуТорговойНаценкиНТТ(СтруктураПараметров)

	Регистратор   = СтруктураПараметров.Регистратор;
	Период        = СтруктураПараметров.Период;
	Организация   = СтруктураПараметров.Организация;
	Подразделение = СтруктураПараметров.Подразделение;
	Склад         = СтруктураПараметров.Склад;

	СчетНТТ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетНТТ);

	РазделятьПоСтавкамНДС = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоСтавкамНДС Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", 		      НачалоМесяца(Период));
	Запрос.УстановитьПараметр("МоментВремениДокумента",   Новый МоментВремени(Период, Регистратор));
	Запрос.УстановитьПараметр("Организация", 		      Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Подразделение);
	Запрос.УстановитьПараметр("Склад", 		              Склад);
	Запрос.УстановитьПараметр("ВидыСубконто", 		      ВидыСубконто);
	Запрос.УстановитьПараметр("СчетаСебестоимостьПродаж",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокКт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокКт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокКт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиТН
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремениДокумента,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаНТТ),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (Подразделение = &ПодразделениеОрганизации
	|					ИЛИ Подразделение ЕСТЬ NULL )
	|				И Субконто1 = &Склад) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиПС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремениДокумента,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (Подразделение = &ПодразделениеОрганизации
	|					ИЛИ Подразделение ЕСТЬ NULL )
	|				И Субконто1 = &Склад) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот
	|ПОМЕСТИТЬ ХозрасчетныйОборотыНТТ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоМесяца,
	|			&МоментВремениДокумента,
	|			,
	|			СчетДт В (&СчетаСебестоимостьПродаж),
	|			,
	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (ПодразделениеКт = &ПодразделениеОрганизации
	|					ИЛИ ПодразделениеКт ЕСТЬ NULL )) КАК ХозрасчетныйОборотыДтКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиТН.Субконто1 КАК Склад,
	|	ХозрасчетныйОстаткиТН.Субконто2 КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиТН.СуммаОстатокКт, 0)) КАК ТорговаяНаценка,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиТН.СуммаНУОстатокКт, 0)) КАК ТорговаяНаценкаНУ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиТН.СуммаПРОстатокКт, 0)) КАК ТорговаяНаценкаПР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиТН.СуммаВРОстатокКт, 0)) КАК ТорговаяНаценкаВР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиПС.СуммаОстатокДт, 0)) КАК ПродажнаяСтоимость,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыНТТ.СуммаОборот, 0)) КАК СписаннаяНаценкаСНачалаМесяца
	|ИЗ
	|	ХозрасчетныйОстаткиТН КАК ХозрасчетныйОстаткиТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиПС КАК ХозрасчетныйОстаткиПС
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОстаткиПС.Субконто1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОборотыНТТ КАК ХозрасчетныйОборотыНТТ
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОборотыНТТ.СубконтоКт1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыНТТ.СубконтоКт2
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиТН.Субконто1
	|	,ХозрасчетныйОстаткиТН.Субконто2";

	Если НЕ РазделятьПоСтавкамНДС Тогда // Исключение третьего субконто (партии) из запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстатки.Субконто2,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОборотыДтКт.СубконтоКт2,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиТН.Субконто2 КАК СтавкаНДС,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыНТТ.СубконтоКт2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",ХозрасчетныйОстаткиТН.Субконто2", "");
	КонецЕсли;

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция РазличныеЗначенияКолонкиТаблицы(ТаблицаЗначений, ИмяКолонки)

	ВсеЗначенияКолонки = ТаблицаЗначений.ВыгрузитьКолонку(ИмяКолонки);
	РазличныеЗначения  = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ВсеЗначенияКолонки);
	Возврат РазличныеЗначения;

КонецФункции

Функция СведенияОПодразделении(Подразделение, ИНН)
	
	СведенияОбОП = Новый Структура;
	
	СведенияОбОП.Вставить("Наименование", "");
	СведенияОбОП.Вставить("ИНН",          "");
	СведенияОбОП.Вставить("КПП",          "");
	
	СведенияОбОП.Вставить("Индекс",          "");
	СведенияОбОП.Вставить("КодРегиона",      "");
	СведенияОбОП.Вставить("Район",           "");
	СведенияОбОП.Вставить("Город",           "");
	СведенияОбОП.Вставить("НаселенныйПункт", "");
	СведенияОбОП.Вставить("Улица",           "");
	СведенияОбОП.Вставить("Дом",             "");
	СведенияОбОП.Вставить("Корпус",          "");
	СведенияОбОП.Вставить("Квартира",        "");
	
	СведенияОбОП.Вставить("ТипДома",         "");
	СведенияОбОП.Вставить("ТипКорпуса",      "");
	СведенияОбОП.Вставить("ТипКвартиры",     "");
	
	СведенияОбОП.Вставить("ПредставлениеАдреса", "");

	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		
		Возврат СведенияОбОП;
		
	ИначеЕсли ТипЗнч(Подразделение) = Тип("СправочникСсылка.Организации") Тогда
		
		СведенияОбОП.Наименование = Подразделение.Наименование;
		СведенияОбОП.КПП = Подразделение.КПП;
		СведенияОбОП.ИНН = ИНН;
		
		АдресСтруктурой = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(
			Подразделение, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		ЗаполнитьЗначенияСвойств(СведенияОбОП, АдресСтруктурой);
		СведенияОбОП.ПредставлениеАдреса = АдресСтруктурой.Представление;
		
		Возврат СведенияОбОП;
		
	ИначеЕсли ТипЗнч(Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		СведенияОбОП.Наименование = Подразделение.Наименование;
		СведенияОбОП.КПП = ?(ЗначениеЗаполнено(Подразделение.РегистрацияВНалоговомОргане), Подразделение.РегистрацияВНалоговомОргане.КПП, Подразделение.КПП);
		СведенияОбОП.ИНН = ИНН;
		
		АдресСтруктурой = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(
			Подразделение, Справочники.ВидыКонтактнойИнформации.ФактическийАдресПодразделенияОрганизаций);
		ЗаполнитьЗначенияСвойств(СведенияОбОП, АдресСтруктурой);
		СведенияОбОП.ПредставлениеАдреса = АдресСтруктурой.Представление;
		
		Возврат СведенияОбОП;
		
	Иначе
		
		Возврат СведенияОбОП;
		
	КонецЕсли;
	
КонецФункции

Функция ОписаниеПодразделения(Подразделение)
	
	НаименованиеОП = "";
	Если НЕ ПустаяСтрока(Подразделение.Наименование) Тогда
		НаименованиеОП = Подразделение.Наименование;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Подразделение.ИНН) Тогда
		НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", ", ") + "ИНН " + Подразделение.ИНН;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Подразделение.КПП) Тогда
		НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", ", ") + "КПП " + Подразделение.КПП;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Подразделение.ПредставлениеАдреса) Тогда
		НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", Символы.ПС) + Подразделение.ПредставлениеАдреса;
	КонецЕсли;
	
	Возврат НаименованиеОП;
	
КонецФункции

Функция ТаблицуЗначенийВДеревоСГруппировкой(ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = "")
	
	ДеревоРезультатов  = Новый ДеревоЗначений();
	Для каждого Колонка из ТаблицаРезультатов.Колонки Цикл
		ДеревоРезультатов.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
	КонецЦикла; 
	
	Если ПустаяСтрока(ГруппировочныеКолонки) Тогда
		Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
			СтрокаДерева = ДеревоРезультатов.Строки.Добавить();

			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);

		КонецЦикла; 
		
		Возврат ДеревоРезультатов;
	КонецЕсли;
	
	ТаблицаГруппировок = ТаблицаРезультатов.Скопировать();
	ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);

	Для каждого СтрокаТаблицы Из ТаблицаГруппировок Цикл
		СтрокаДерева = ДеревоРезультатов.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		
	КонецЦикла; 
	
	ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);
	Для каждого СтрокаДерева из  ДеревоРезультатов.Строки Цикл
		//Формирование структуры отбора
		Для каждого ПараметрОтбора Из ЗначенияОтбора Цикл
			ЗначенияОтбора.Вставить(ПараметрОтбора.Ключ, СтрокаДерева[ПараметрОтбора.Ключ]);
		КонецЦикла; 
		
		//Поиск и заполнение подчиненными колонками
		МассивПодчиненныхСтрок = ТаблицаРезультатов.НайтиСтроки(ЗначенияОтбора);
		Для каждого СтрокаТаблицы Из МассивПодчиненныхСтрок Цикл
			ПодчиненнаяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрокаДерева, СтрокаТаблицы);
			
		КонецЦикла; 
	КонецЦикла;
		
	Возврат ДеревоРезультатов;
	
КонецФункции

Функция ПолучитьОбособленноеПодразделение(Подразделение)
	
	Если Подразделение.ОбособленноеПодразделение Тогда
		Возврат Подразделение;
	ИначеЕсли ЗначениеЗаполнено(Подразделение.Родитель) Тогда
		Возврат ПолучитьОбособленноеПодразделение(Подразделение.Родитель);
	ИначеЕсли ЗначениеЗаполнено(Подразделение.Владелец) Тогда
		Возврат Подразделение.Владелец;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Создает временную таблицу, содержащую соответствия между подразделениями и обособленными подразделениями, в структуру
// которого они входят.
//
// Параметры:
//  МенеджерВТ   - МенеджерВременныхТаблиц - это менеджер временных таблиц, содержащий таблицы:
//                 * Подразделения = таблица-источник подразделений для сопоставления. Содержит колонку Подразделение.
//                 * ОбособленныеПодразделения = таблица, создаваемая процедурой. Содержит колонки Подразделение и ОбособленноеПодразделение.
//  СписокОрганизаций - Массив - список организаций-обособленных подразделений.
//
Процедура ДобавитьТаблицуОбособленныхПодразделений(МенеджерВТ, СписокОрганизаций)

	ТекстСопоставления =
	"ВЫБРАТЬ
	|	Подразделения.Организация КАК Организация,
	|	Подразделения.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Подразделения.Подразделение.ОбособленноеПодразделение
	|			ТОГДА Подразделения.Подразделение
	|		КОГДА Подразделения.Подразделение.Родитель <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА Подразделения.Подразделение.Родитель
	|		КОГДА Подразделения.Подразделение.Владелец <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Подразделения.Подразделение.Владелец
	|		ИНАЧЕ Подразделения.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделение,
	|	ВЫБОР
	|		КОГДА Подразделения.Подразделение.ОбособленноеПодразделение
	|			ТОГДА ИСТИНА
	|		КОГДА Подразделения.Подразделение.Родитель <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СопоставлениеПроизведено
	|ПОМЕСТИТЬ РезультатСоспоставления
	|ИЗ
	|	Подразделения КАК Подразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Подразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбособленныеПодразделения.Организация КАК Организация,
	|	ОбособленныеПодразделения.Подразделение КАК Подразделение,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ ОбособленныеПодразделенияВременная
	|ИЗ
	|	ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РезультатСоспоставления.Организация,
	|	РезультатСоспоставления.Подразделение,
	|	РезультатСоспоставления.ОбособленноеПодразделение
	|ИЗ
	|	РезультатСоспоставления КАК РезультатСоспоставления
	|ГДЕ
	|	РезультатСоспоставления.СопоставлениеПроизведено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбособленныеПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбособленныеПодразделенияВременная.Организация,
	|	ОбособленныеПодразделенияВременная.Подразделение КАК Подразделение,
	|	ОбособленныеПодразделенияВременная.ОбособленноеПодразделение
	|ПОМЕСТИТЬ ОбособленныеПодразделения
	|ИЗ
	|	ОбособленныеПодразделенияВременная КАК ОбособленныеПодразделенияВременная
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбособленныеПодразделенияВременная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатСоспоставления.Организация КАК Организация,
	|	РезультатСоспоставления.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ Подразделения
	|ИЗ
	|	РезультатСоспоставления КАК РезультатСоспоставления
	|ГДЕ
	|	НЕ РезультатСоспоставления.СопоставлениеПроизведено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РезультатСоспоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Подразделения.Подразделение
	|ИЗ
	|	Подразделения КАК Подразделения";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Инициализируем целевую таблицу.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	Организации.Ссылка КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ ОбособленныеПодразделения
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокОрганизаций)";
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстСопоставления;
	Для инд = 1 По 128 Цикл // фиксируем максимальное количество уровней, чтобы не было зацикливания
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ Подразделения";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СформироватьПроводкуПоРаспределениюНДС(СтрокаТаблицы, Реквизиты, Сумма, СпособУчетаНДС, Движения, Отказ)
	
	Проводка = Движения.Хозрасчетный.Добавить();

	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Сумма = Сумма;
	Проводка.Содержание  = НСтр("ru = 'Распределение НДС'");
	
	Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
	
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
		"СФПолученные", СтрокаТаблицы.СубконтоСФПолученные);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
		"Контрагенты",  Реквизиты.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
		"СпособыУчетаНДС", СпособУчетаНДС);
	
	Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
	
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
		"СФПолученные", СтрокаТаблицы.СубконтоСФПолученные);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
		"Контрагенты",  Реквизиты.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
		"СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);
	
КонецПроцедуры

Функция УстановитьВалютныеСуммыНДСКорректировкаСтоимости(Знач ТаблицаСписанногоНДС, Реквизиты)
	
	ТаблицаСписанногоНДС.Колонки.Добавить("НДСВал", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаСписанногоНДС Цикл
		
		СтрокаТаблицы.НДСВал = ?(Реквизиты.КурсВзаиморасчетов = 0, 
												СтрокаТаблицы.НДС,
												СтрокаТаблицы.НДС * Реквизиты.КратностьВзаиморасчетов / Реквизиты.КурсВзаиморасчетов);
	
	КонецЦикла; 
	
	Возврат ТаблицаСписанногоНДС;

КонецФункции

Функция РазбитьКонтейнерПоРазделам(Контейнер, ДокументСсылкаАлкоОтчет, СтруктураИдГруппИменРегистровСведений)
	
	КонтейнерПоРазделам = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("ИдГруппы",                 "П0000100003");
	СтруктураРаздела.Вставить("ТЗ_Хранилище",             Контейнер.Раздел1_ТЗ_Хранилище);
	СтруктураРаздела.Вставить("СервисРегистров",          Контейнер.Раздел1_СервисРегистров);
	СтруктураРаздела.Вставить("СервисРегистровУдаленные", Контейнер.Раздел1_СервисРегистровУдаленные);
	КонтейнерПоРазделам.Вставить("Обороты", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("ИдГруппы",                 "П0000200003");
	СтруктураРаздела.Вставить("ТЗ_Хранилище",             Контейнер.Раздел2_ТЗ_Хранилище);
	СтруктураРаздела.Вставить("СервисРегистров",          Контейнер.Раздел2_СервисРегистров);
	СтруктураРаздела.Вставить("СервисРегистровУдаленные", Контейнер.Раздел2_СервисРегистровУдаленные);
	КонтейнерПоРазделам.Вставить("Поступления", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("ИдГруппы",                 "П0000300003");
	СтруктураРаздела.Вставить("ТЗ_Хранилище",             Контейнер.Раздел3_ТЗ_Хранилище);
	СтруктураРаздела.Вставить("СервисРегистров",          Контейнер.Раздел3_СервисРегистров);
	СтруктураРаздела.Вставить("СервисРегистровУдаленные", Контейнер.Раздел3_СервисРегистровУдаленные);
	КонтейнерПоРазделам.Вставить("Возвраты", СтруктураРаздела);

	Для каждого РазделОтчета Из КонтейнерПоРазделам Цикл
		
		СтруктураРаздела = РазделОтчета.Значение;
		
		СтруктураРаздела.Вставить("ИмяРабочегоРегистра", СтруктураИдГруппИменРегистровСведений[СтруктураРаздела.ИдГруппы]);
		
		// Удаляем все страницы текущего отчета
		Для Каждого СтрокаСервисРегистровГруппы Из СтруктураРаздела.СервисРегистров Цикл
			
			НоваяСтрокаСервисРегистровГруппыУдаленные = СтруктураРаздела.СервисРегистровУдаленные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
			
			Ресурсы = Новый Структура;
			Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);		
			// Индекс строки 0 используем для обозначения операций над страницами в целом.
			// В норме индекс строки не меньше 1.	
			РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, СтруктураРаздела.ИмяРабочегоРегистра,
				НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
										
		КонецЦикла;
		СтруктураРаздела.СервисРегистров.Очистить();
	
	КонецЦикла; 
	
	Если Контейнер.Декларация.Колонки.Найти("СсылкаПодразделение") = Неопределено Тогда
		Контейнер.Декларация.Колонки.Добавить("СсылкаПодразделение");
	КонецЕсли;
	КонтейнерПоРазделам.Вставить("Декларация", Контейнер.Декларация);
	
	Возврат КонтейнерПоРазделам;
	
КонецФункции

Функция ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам, Подразделение, ИННОрганизации, МаксИндексСтраницы)
	
	РазделТекущий = КонтейнерПоРазделам.Декларация.Найти(Подразделение, "СсылкаПодразделение");
	Если РазделТекущий <> Неопределено Тогда
		Возврат КонтейнерПоРазделам.Декларация.Индекс(РазделТекущий);
	КонецЕсли;
		
	РазделТекущий = КонтейнерПоРазделам.Декларация.Добавить();
	РазделТекущий.СсылкаПодразделение = Подразделение;

	Если РазделТекущий.ДополнительныеДанные.Количество() = 0 Тогда
		РазделТекущий.ДополнительныеДанные.Добавить(Новый Структура); 
	КонецЕсли;
	ПредставлениеПодразделения = СведенияОПодразделенииXML(Подразделение, ИННОрганизации);
	РазделТекущий.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);
	
	Если РазделТекущий.Данные.Количество() = 0 Тогда
		РазделТекущий.Данные.Добавить(Новый Структура);
	КонецЕсли;
	
	Для каждого РазделОтчета Из КонтейнерПоРазделам Цикл
		
		Если РазделОтчета.Ключ = "Декларация" Тогда
			Продолжить;
		КонецЕсли;
		
		МаксИндексСтраницы = МаксИндексСтраницы + 1;
		
		НовСтраница = РазделОтчета.Значение.СервисРегистров.Добавить();
		НовСтраница.ИндексСтраницыРегистра = МаксИндексСтраницы;
		
	КонецЦикла;

	Возврат КонтейнерПоРазделам.Декларация.Количество() - 1;
	
КонецФункции
// ПОДГОТОВКА СПИСАНИЯ ТОВАРОВ

Функция ПодготовитьТаблицуСписанныеТовары(ТаблицаТовары, ТаблицаРеквизиты, Отказ) Экспорт
	
	МатериалыДляОценкиСтоимости = Новый Структура("СписанныеТовары", ТаблицаТовары);
	
	МатериалыСОценкойСтоимости = ПодготовитьТаблицыСписанныеТовары(
		МатериалыДляОценкиСтоимости,
		ТаблицаРеквизиты,
		Отказ);
		
	Возврат МатериалыСОценкойСтоимости.СписанныеТовары;

КонецФункции

// Подготавливает таблицы расхода товаров, в которых нужна расчетная оценка стоимости списания.
// при этом для списания учитываются партии возвращенные тем же документом
// Параметры:
//  ТаблицыТовары - Структура - Содержит таблицы значений с списком товаров, оценку которых нужно получить
//  ТаблицаРеквизиты - ТаблицаЗначений - Таблица с реквизитами документа, влияющими на списание товаров
//  ТаблицаВозвраты - ТаблицаЗначений - Таблица с остатками возвращенных партий
//  Отказ - Булево - Признак ошибки, выявленной в ходе подготовки таблицы
// 
Функция ПодготовитьТаблицыСписанныеТоварыСУчетомВозврата(ТаблицыТовары, ТаблицаРеквизиты, ТаблицаВозвраты, Отказ) Экспорт
	
	СписанныеТовары = Новый Структура;
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Для Каждого КлючИЗначение Из ТаблицыТовары Цикл	
			СписанныеТовары.Вставить(КлючИЗначение.Ключ, ПолучитьПустуюТаблицуСписанныеТовары());
		КонецЦикла;
		Возврат СписанныеТовары;
	КонецЕсли;
	
	Параметры = ПодготовитьРеквизитыСписанныеТовары(ТаблицаРеквизиты, ТаблицаВозвраты);
	Реквизиты = Параметры.Реквизиты[0];
	НадоРассчитать = Новый Структура;
	НадоОценить    = Новый Структура;
	ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период);
	
	// Подготовим данные для расчета стоимости списания
	Для Каждого КлючИЗначение Из ТаблицыТовары Цикл
		
		ИмяТаблицы    = КлючИЗначение.Ключ;
		ДанныеТаблицы = КлючИЗначение.Значение;
		
		СписанныеТовары.Вставить(ИмяТаблицы, ПолучитьПустуюТаблицуСписанныеТовары());
		Если ДанныеТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеТаблицы.Колонки.Найти("ВыставленСФ") = Неопределено Тогда
			ПараметрыТаблицыТовары = ПодготовитьПараметрыТаблицыСписанныеТовары(ДанныеТаблицы, ТаблицаРеквизиты);
		Иначе
			ПараметрыТаблицыТовары = ПодготовитьПараметрыТаблицыСписанныеКомиссионныеТовары(ДанныеТаблицы, ТаблицаРеквизиты);
		КонецЕсли;
		
		ТаблицаТовары          = ПараметрыТаблицыТовары.ТаблицаТовары;
		ТаблицаНадоРассчитать  = ТаблицаТовары.СкопироватьКолонки();
		Если ИспользуетсяОтложенноеПроведение Тогда
			ТаблицаНадоОценить = СписанныеТовары[ИмяТаблицы].СкопироватьКолонки();
			СчетаРассчитываемыеОперативно = СчетаРассчитываемыеОперативно();
		КонецЕсли;
		
		// Отделим запасы, которые будут списаны по указанной в документе стоимости,
		// от запасов, стоимость которых будет расчитана на основании остатков.
		// Строки, стоимость которых считать не надо, сразу запишем в СписанныеТовары.
		Для Каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл
			
			Если СтрокаТаблицыТовары.Себестоимость > 0 Тогда
				
				// Стоимость указана в документе
				
				НоваяСтрока = СписанныеТовары[ИмяТаблицы].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
				НоваяСтрока.Подразделение      = Реквизиты.Подразделение;
				НоваяСтрока.Партия             = СтрокаТаблицыТовары.ДокументОприходования;
				НоваяСтрока.СуммаСписания      = СтрокаТаблицыТовары.Себестоимость;
				НоваяСтрока.СуммаСписанияНУ    = СтрокаТаблицыТовары.Себестоимость;
				НоваяСтрока.СуммаСписанияПР    = 0;
				НоваяСтрока.СуммаСписанияВР    = 0;
				НоваяСтрока.СуммаКорСписанияНУ = СтрокаТаблицыТовары.Себестоимость;
				НоваяСтрока.СуммаКорСписанияПР = 0;
				НоваяСтрока.СуммаКорСписанияВР = 0;
				
			ИначеЕсли ИспользуетсяОтложенноеПроведение И Не ОперативныйРасчетПоСчету(СтрокаТаблицыТовары, СчетаРассчитываемыеОперативно) Тогда
				
				// Цену берём из плановых цен
				
				НоваяСтрока = ТаблицаНадоОценить.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
				НоваяСтрока.Подразделение = Реквизиты.Подразделение;
				
			Иначе 
				
				// Надо рассчитать
				
				НоваяСтрока = ТаблицаНадоРассчитать.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
				
			КонецЕсли;

		КонецЦикла; // По строкам ТаблицаТовары
		
		Если ИспользуетсяОтложенноеПроведение И ТаблицаНадоОценить.Количество() > 0 Тогда
			НадоОценить.Вставить(ИмяТаблицы, ТаблицаНадоОценить);
		КонецЕсли;
		
		Если ТаблицаНадоРассчитать.Количество() > 0 Тогда
			НадоРассчитать.Вставить(ИмяТаблицы, ТаблицаНадоРассчитать);
		КонецЕсли;

	КонецЦикла; // По элементам ТаблицыТовары
		
	Возврат ВыполнитьРасчетСтоимостиСУчетомВозврата(НадоОценить, НадоРассчитать, Реквизиты, 
		СписанныеТовары, Параметры, ИспользуетсяОтложенноеПроведение, Отказ);

КонецФункции

Процедура СписатьОстаткиТоваров(ТаблицаСписаниеПоОстаткам, ТаблицаОстатки, ТаблицаСписанныеТовары, СпособОценкиМПЗПоСредней, КонтролироватьОстаток, Реквизиты, Отказ)
	
	ТаблицаОшибок = ТаблицаСписаниеПоОстаткам.СкопироватьКолонки("ИмяСписка, СинонимСписка, НомерСтроки, Количество");
	ТаблицаОшибок.Колонки.Добавить("КоличествоОсталосьПогасить", Новый ОписаниеТипов("Число"));
	ЕстьКолонкаВозвратПоТекущемуДокументу = ТаблицаСписаниеПоОстаткам.Колонки.Найти("ВозвратПоТекущемуДокументу") <> Неопределено;

	ПустойСклад = Справочники.Склады.ПустаяСсылка();
	
	Для каждого СтрокаДокумента Из ТаблицаСписаниеПоОстаткам Цикл
		
		КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
		
		ЭтоПродажаПоКоторойБылВозврат = Ложь;
		// Если по этой продаже был возврат, то пометим это
		Если ЕстьКолонкаВозвратПоТекущемуДокументу
			И СтрокаДокумента.ВозвратПоТекущемуДокументу Тогда
			ЭтоПродажаПоКоторойБылВозврат = Истина;
		КонецЕсли;
		
		Если ТаблицаОстатки.Количество() <> 0 Тогда
		
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаДокумента.Номенклатура);
			ПараметрыОтбора.Вставить("СчетУчета", СтрокаДокумента.СчетУчета);
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ДокументОприходования) Тогда
				Если (НЕ СпособОценкиМПЗПоСредней ИЛИ БухгалтерскийУчетПовтИсп.СчетУчетаКомиссионногоТовара(СтрокаДокумента.СчетУчета))
					И БухгалтерскийУчет.НаСчетеВедетсяПартионныйУчет(СтрокаДокумента.СчетУчета) Тогда
					ПараметрыОтбора.Вставить("ДокументОприходования", СтрокаДокумента.ДокументОприходования);
				КонецЕсли;
			КонецЕсли;
			
			ПартииОстатков = ТаблицаОстатки.Скопировать(ПараметрыОтбора);
			ПартииОстатков.Сортировать("ДокументОприходованияДата, ДокументОприходования", Новый СравнениеЗначений);
			
			Для каждого СтрокаПартии Из ПартииОстатков Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаПартии.КоличествоПоСкладу <= 0
					ИЛИ СтрокаПартии.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если БухгалтерскийУчет.ВедетсяУчетПоСкладам(СтрокаДокумента.СчетУчета) Тогда
					Если СтрокаПартии.Склад <> СтрокаДокумента.Склад
						И НЕ СтрокаПартии.Склад = ПустойСклад Тогда // пустые склады могут остаться со времени, когда не было учета по складам
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Количество = Мин(СтрокаПартии.КоличествоПоСкладу, КоличествоОсталосьПогасить);
				
				Стоимость	= Окр(СтрокаПартии.Стоимость * Количество / СтрокаПартии.Количество, 2, 1);
				СтоимостьНУ	= Окр(СтрокаПартии.СтоимостьНУ * Количество / СтрокаПартии.Количество, 2, 1);
				СтоимостьПР	= Окр(СтрокаПартии.СтоимостьПР * Количество / СтрокаПартии.Количество, 2, 1);
				СтоимостьВР	= Окр(СтрокаПартии.СтоимостьВР * Количество / СтрокаПартии.Количество, 2, 1);
				
				Если (СтрокаПартии.Стоимость = СтрокаПартии.СтоимостьНУ + СтрокаПартии.СтоимостьВР + СтрокаПартии.СтоимостьПР)
						И (Стоимость <> СтоимостьНУ + СтоимостьВР + СтоимостьПР) Тогда
						
						СтоимостьВР = Стоимость - СтоимостьНУ - СтоимостьПР;
						
				КонецЕсли;
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;
				
				Если НЕ ЭтоПродажаПоКоторойБылВозврат Тогда
					
					СтрокаТаблицыОстатки = ТаблицаОстатки.Найти(СтрокаПартии.НомерСтроки, "НомерСтроки");
					СтрокаТаблицыОстатки.Количество         = СтрокаТаблицыОстатки.Количество - Количество;
					СтрокаТаблицыОстатки.Стоимость          = СтрокаТаблицыОстатки.Стоимость - Стоимость;
					СтрокаТаблицыОстатки.СтоимостьНУ        = СтрокаТаблицыОстатки.СтоимостьНУ - СтоимостьНУ;
					СтрокаТаблицыОстатки.СтоимостьПР        = СтрокаТаблицыОстатки.СтоимостьПР - СтоимостьПР;
					СтрокаТаблицыОстатки.СтоимостьВР        = СтрокаТаблицыОстатки.СтоимостьВР - СтоимостьВР;
					СтрокаТаблицыОстатки.КоличествоПоСкладу = СтрокаТаблицыОстатки.КоличествоПоСкладу - Количество;
					
				КонецЕсли;
				
				СписаннаяПартия = ТаблицаСписанныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(СписаннаяПартия, СтрокаДокумента);
				СписаннаяПартия.Подразделение       = СтрокаПартии.Подразделение;
				СписаннаяПартия.Партия              = СтрокаПартии.ДокументОприходования;
				СписаннаяПартия.Склад               = СтрокаПартии.Склад;
				СписаннаяПартия.Количество          = Количество;
				СписаннаяПартия.СуммаСписания       = Стоимость;
				СписаннаяПартия.СуммаСписанияНУ     = СтоимостьНУ;
				СписаннаяПартия.СуммаСписанияПР     = СтоимостьПР;
				СписаннаяПартия.СуммаСписанияВР     = СтоимостьВР;
				СписаннаяПартия.СуммаКорСписанияНУ  = СтоимостьНУ;
				СписаннаяПартия.СуммаКорСписанияПР  = СтоимостьПР;
				СписаннаяПартия.СуммаКорСписанияВР  = СтоимостьВР;
				
				Если НЕ ТаблицаСписанныеТовары.Колонки.Найти("РассчитатьСебестоимостьПоТекущимПродажам") = Неопределено
						И СписаннаяПартия.РассчитатьСебестоимостьПоТекущимПродажам Тогда
						
					СписаннаяПартия.РассчитатьСебестоимостьПоТекущимПродажам = Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		// Несписанное количество добавим отдельной строкой в таблицу списанных партий.
		Если КоличествоОсталосьПогасить > 0  Тогда
			
			СписаннаяПартия               = ТаблицаСписанныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СписаннаяПартия, СтрокаДокумента);
			СписаннаяПартия.СчетУчета     = СтрокаДокумента.СчетУчета;
			СписаннаяПартия.Подразделение = Реквизиты.Подразделение;
			СписаннаяПартия.Количество    = КоличествоОсталосьПогасить;
			
		КонецЕсли;
		
		Если КоличествоОсталосьПогасить > 0
			И (КонтролироватьОстаток ИЛИ БухгалтерскийУчетПовтИсп.СчетУчетаКомиссионногоТовара(СтрокаДокумента.СчетУчета)) Тогда
			
			ЗарегистрироватьОшибку = Истина;
			
			Если НЕ ТаблицаСписаниеПоОстаткам.Колонки.Найти("ВозвратПоТекущемуДокументу") = Неопределено
				И СписаннаяПартия.ВозвратПоТекущемуДокументу Тогда
				ЗарегистрироватьОшибку = Ложь;
			КонецЕсли;
			
			Если ЗарегистрироватьОшибку Тогда
					
				СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыОшибок, СтрокаДокумента);
				СтрокаТаблицыОшибок.КоличествоОсталосьПогасить = КоличествоОсталосьПогасить;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		Если БухгалтерскийУчетПереопределяемый.ДокументЯвляетсяРазукомплектацией(Реквизиты.Регистратор) Тогда
			
			ВывестиСообщениеОбОшибке(
				ТаблицаОшибок.Итог("Количество"), 
				ТаблицаОшибок.Итог("КоличествоОсталосьПогасить"), 
				Реквизиты.Регистратор,,,,Отказ);
			
		Иначе
			
			Для каждого СтрокаТаблицыОшибок Из ТаблицаОшибок Цикл
			
				ВывестиСообщениеОбОшибке(
					СтрокаТаблицыОшибок.Количество, 
					СтрокаТаблицыОшибок.КоличествоОсталосьПогасить, 
					Реквизиты.Регистратор, 
					СтрокаТаблицыОшибок.ИмяСписка, 
					СтрокаТаблицыОшибок.СинонимСписка, 
					СтрокаТаблицыОшибок.НомерСтроки, 
					Отказ);
			
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// ПОДГОТОВКА СПИСАНИЯ ТОВАРОВ НТТ

Функция ПодготовитьТаблицуСписанныеТоварыНТТ(ТаблицаТоварыНТТ, ТаблицаРеквизиты, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТоварыНТТ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыСписанныеТоварыНТТ(ТаблицаТоварыНТТ, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаСписанныеТоварыНТТ = ПолучитьПустуюТаблицуСписанныеТоварыНТТ();
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	РазделятьПоСтавкамНДС = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;

	СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;

	СтруктураПараметровТорговаяНаценкаНТТ = Новый Структура;
	СтруктураПараметровТорговаяНаценкаНТТ.Вставить("Регистратор", Реквизиты.Регистратор);
	СтруктураПараметровТорговаяНаценкаНТТ.Вставить("Период", Реквизиты.Период);
	СтруктураПараметровТорговаяНаценкаНТТ.Вставить("Организация", Реквизиты.Организация);
	СтруктураПараметровТорговаяНаценкаНТТ.Вставить("Подразделение", Реквизиты.Подразделение);
	СтруктураПараметровТорговаяНаценкаНТТ.Вставить("Склад", Реквизиты.Склад);
	СтруктураПараметровТорговаяНаценкаНТТ.Вставить("ТаблицаТовары", Параметры.ТаблицаТоварыНТТ);
	ТаблицаТорговойНаценки = ПодготовитьТаблицуТорговойНаценкиНТТ(СтруктураПараметровТорговаяНаценкаНТТ);
	Если РазделятьПоСтавкамНДС Тогда
		ТаблицаТорговойНаценки.Индексы.Добавить("СтавкаНДС");
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТоварыНТТ Цикл
		
		Сумма = СтрокаТаблицы.Сумма;
		СуммаСписания   = СтрокаТаблицы.СуммаСписания;
		СуммаСписанияНУ = СтрокаТаблицы.СуммаСписания;
		
		Если СуммаСписания = 0 Тогда
		
			// Получение списываемой торговой наценки
			Если РазделятьПоСтавкамНДС Тогда
				СтрокаТорговойНаценки = ТаблицаТорговойНаценки.Найти(СтрокаТаблицы.СтавкаНДСВРознице, "СтавкаНДС");
			Иначе
				СтрокаТорговойНаценки = ?(ТаблицаТорговойНаценки.Количество() > 0, ТаблицаТорговойНаценки[0], Неопределено);
			КонецЕсли;
			
			Если СтрокаТорговойНаценки = Неопределено Тогда
				СуммаНаценки   = 0;
				СуммаНаценкиНУ = 0;
				СуммаНаценкиПР = 0;
				СуммаНаценкиВР = 0;
			ИначеЕсли СтрокаТорговойНаценки.ПродажнаяСтоимость + СтрокаТорговойНаценки.СписаннаяНаценкаСНачалаМесяца <> 0 Тогда
				СуммаНаценки   = СтрокаТорговойНаценки.ТорговаяНаценка * Сумма / (СтрокаТорговойНаценки.ПродажнаяСтоимость + СтрокаТорговойНаценки.СписаннаяНаценкаСНачалаМесяца);
				СуммаНаценкиНУ = СтрокаТорговойНаценки.ТорговаяНаценкаНУ * Сумма / (СтрокаТорговойНаценки.ПродажнаяСтоимость + СтрокаТорговойНаценки.СписаннаяНаценкаСНачалаМесяца);
				СуммаНаценкиПР = СтрокаТорговойНаценки.ТорговаяНаценкаПР * Сумма / (СтрокаТорговойНаценки.ПродажнаяСтоимость + СтрокаТорговойНаценки.СписаннаяНаценкаСНачалаМесяца);
				СуммаНаценкиВР = СтрокаТорговойНаценки.ТорговаяНаценкаВР * Сумма / (СтрокаТорговойНаценки.ПродажнаяСтоимость + СтрокаТорговойНаценки.СписаннаяНаценкаСНачалаМесяца);
			Иначе
				СуммаНаценки   = СтрокаТаблицы.Сумма;
				СуммаНаценкиНУ = СтрокаТаблицы.Сумма;
				СуммаНаценкиПР = 0;
				СуммаНаценкиВР = 0;
			КонецЕсли;
			
			СуммаСписания   = Сумма - СуммаНаценки;
			СуммаСписанияНУ = Сумма - СуммаНаценкиНУ;
		
		Иначе
		
			СуммаНаценки   = Сумма - СуммаСписания;
			СуммаНаценкиНУ = Сумма - СуммаСписания;
			СуммаНаценкиПР = 0;
			СуммаНаценкиВР = 0;
		
		КонецЕсли; 
		
		СписанныйТоварНТТ = ТаблицаСписанныеТоварыНТТ.Добавить();
		ЗаполнитьЗначенияСвойств(СписанныйТоварНТТ, СтрокаТаблицы);
		
		СписанныйТоварНТТ.СуммаСписания    = СуммаСписания;
		СписанныйТоварНТТ.СуммаСписанияНУ  = СуммаСписанияНУ;
		СписанныйТоварНТТ.СуммаСписанияПР  = 0;
		СписанныйТоварНТТ.СуммаСписанияВР  = 0;
	
		СписанныйТоварНТТ.СуммаНаценки     = СуммаНаценки;
		СписанныйТоварНТТ.СуммаНаценкиНУ   = СуммаНаценкиНУ;
		СписанныйТоварНТТ.СуммаНаценкиПР   = СуммаНаценкиПР;
		СписанныйТоварНТТ.СуммаНаценкиВР   = СуммаНаценкиВР;
		
	КонецЦикла;
	
	Возврат ТаблицаСписанныеТоварыНТТ;
	
КонецФункции

// СПИСАНИЕ ТОВАРОВ

Процедура СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаСписанныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписаниеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	НазваниеОбъектаВСодержании	= СтрНайти(Реквизиты.Содержание, НСтр("ru = ' товаров'"));
	Если НазваниеОбъектаВСодержании Тогда
		Реквизиты.Содержание	= СтрЗаменить(Реквизиты.Содержание, НСтр("ru = ' товаров'"), " %1");
	КонецЕсли;
	
	Для каждого СтрокаПартии Из Параметры.ТаблицаСписанныеТовары Цикл
		
		СуммаРасходов   = 0;
		СуммаРасходовНУ = 0;
		СуммаРасходовПР = 0;
		СуммаРасходовВР = 0;
		
		Если СтрокаПартии.СчетУчета = ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов
			И (СтрокаПартии.СуммаСписания <> 0) Тогда
			
			СуммаРасходов   = СтрокаПартии.СуммаСписания;
			СуммаРасходовНУ = 0;
			СуммаРасходовПР = СтрокаПартии.СуммаСписанияПР;
			СуммаРасходовВР = СтрокаПартии.СуммаСписания - СтрокаПартии.СуммаСписанияПР; 
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = СтрокаПартии.Период;
			Проводка.Организация = Реквизиты.Организация;
		
			Проводка.Содержание  = НСтр("ru = 'Списание расходов на приобретение инвентаря'");
			
			Проводка.СчетКт = СтрокаПартии.СчетУчета;
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
			Если ВедетсяУчетПоПартиям Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
			КонецЕсли;

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаПартии.Подразделение;
			КонецЕсли;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов;
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаПартии.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаПартии.Склад);
			Если ВедетсяУчетПоПартиям Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаПартии.Партия);
			КонецЕсли;

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаПартии.Подразделение;
			КонецЕсли;
            
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СуммаРасходовНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = СуммаРасходовПР;
					Проводка.СуммаВРДт = СуммаРасходовВР;
				КонецЕсли;
			КонецЕсли;
			
			Проводка.Сумма = СуммаРасходов;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СуммаРасходовНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРКт = СуммаРасходовПР;
					Проводка.СуммаВРКт = СуммаРасходовВР;
				КонецЕсли;
			КонецЕсли;				
			
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = СтрокаПартии.Период;
		Проводка.Организация = Реквизиты.Организация;
		
		Если НазваниеОбъектаВСодержании Тогда
			Проводка.Содержание  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Реквизиты.Содержание,
				БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаПартии.СчетУчета));
		Иначе
			Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);
		КонецЕсли;

		Проводка.СчетКт = СтрокаПартии.СчетУчета;
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
		Если ВедетсяУчетПоПартиям ИЛИ СвойстваСчетаКт.Забалансовый Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
		КонецЕсли;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаПартии.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.КорСчетСписания);

		Если СвойстваСчетаДт.Забалансовый = СвойстваСчетаКт.Забалансовый Тогда

			Проводка.СчетДт	= СтрокаПартии.КорСчетСписания;

			// Цикл субконто по строке партий
			Для НомерСубконто = 1 По 3 Цикл
				ВидСубконто = СтрокаПартии["ВидКорСубконто" + НомерСубконто];
				Если НЕ ВедетсяУчетПоПартиям И ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
					Продолжить;
				КонецЕсли;
				
				КорСубконто = СтрокаПартии["КорСубконто" + НомерСубконто];
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					ВидСубконто, КорСубконто);
			КонецЦикла;
			
			// Если корсубконто для списания явно не указано, подставляем совпадающие по типу значения
			// из других полей таблицы.
			
			// Цикл по видам субконто на счете Дт.
			Для НомерСубконто = 1 По 3 Цикл
				
				ВидСубконто = СвойстваСчетаДт["ВидСубконто" + НомерСубконто];
				
				Если ЗначениеЗаполнено(ВидСубконто) Тогда
					
					КорСубконто = Проводка.СубконтоДт[ВидСубконто];
					Если ЗначениеЗаполнено(КорСубконто) Тогда
						Продолжить;
					КонецЕсли;
				
					ТипЗначенияВидаСубконто = СвойстваСчетаДт["ВидСубконто" + НомерСубконто + "ТипЗначения"];
					
					Если ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
						
						ВидСубконто = СвойстваСчетаДт["ВидСубконто" + НомерСубконто];
						Если ВидСубконто <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
							КорСубконто = СтрокаПартии.Номенклатура;
						КонецЕсли;
					
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
						КорСубконто = Реквизиты.Организация;
					
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
						Если ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда
							КорСубконто = СтрокаПартии.Склад;
						КонецЕсли;
					
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
						Если ЗначениеЗаполнено(Реквизиты.Контрагент) Тогда
							КорСубконто = Реквизиты.Контрагент;
						КонецЕсли;
					
					ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами
							  И ТипЗначенияВидаСубконто.СодержитТип(ТипЗнч(Реквизиты.Регистратор)) Тогда
						КорСубконто = Реквизиты.Регистратор;
						
					КонецЕсли;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						ВидСубконто, КорСубконто);
						
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВедетсяУчетПоПартиям ИЛИ СвойстваСчетаДт.Забалансовый Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					"Партии", СтрокаПартии.Партия);
			КонецЕсли;

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаПартии.КорПодразделение;
			КонецЕсли;

			Если СвойстваСчетаДт.Количественный Тогда
				Проводка.КоличествоДт = СтрокаПартии.Количество;
			КонецЕсли;

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаПартии.СуммаКорСписанияНУ - СуммаРасходовНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = СтрокаПартии.СуммаКорСписанияПР - СуммаРасходовПР;
					Проводка.СуммаВРДт = СтрокаПартии.СуммаКорСписанияВР - СуммаРасходовВР;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

		Проводка.Сумма = СтрокаПартии.СуммаСписания - СуммаРасходов;

		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаПартии.СуммаСписанияНУ - СуммаРасходовНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРКт = СтрокаПартии.СуммаСписанияПР - СуммаРасходовПР;
				Проводка.СуммаВРКт = СтрокаПартии.СуммаСписанияВР - СуммаРасходовВР;
			КонецЕсли;
		КонецЕсли;

		Проводка.НеКорректироватьСтоимостьАвтоматически = СтрокаПартии.Себестоимость <> 0;

	КонецЦикла;

	// Алгоритмы формирования проводок этого документа учитывают малоценку
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("ДвиженияПоМалоценнымОбъектамСформированы", Истина);
	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// ПЕРЕМЕЩЕНИЕ ТОВАРОВ

Процедура СформироватьДвиженияПеремещениеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаСписанныеТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПеремещениеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаПартии Из Параметры.ТаблицаСписанныеТовары Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);

		Проводка.СчетДт	= СтрокаПартии.КорСчетСписания;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Для НомерСубконто = 1 По 3 Цикл
			ВидСубконто = СтрокаПартии["ВидКорСубконто" + НомерСубконто];
			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
				И НЕ (ВедетсяУчетПоПартиям ИЛИ СвойстваСчетаДт.Забалансовый) Тогда
				Продолжить;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				ВидСубконто, СтрокаПартии["КорСубконто" + НомерСубконто]);
		КонецЦикла;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаПартии.Номенклатура);
		Если ВедетсяУчетПоПартиям ИЛИ СвойстваСчетаДт.Забалансовый Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаПартии.Партия);
		КонецЕсли;

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаПартии.КорПодразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаПартии.Количество;
		КонецЕсли;

		Проводка.СчетКт = СтрокаПартии.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаПартии.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;

		Проводка.Сумма = СтрокаПартии.СуммаСписания;

		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СтрокаПартии.СуммаСписанияНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРДт = СтрокаПартии.СуммаСписанияПР;
				Проводка.СуммаВРДт = СтрокаПартии.СуммаСписанияВР;
			КонецЕсли;
		КонецЕсли;

		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаПартии.СуммаСписанияНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРКт = СтрокаПартии.СуммаСписанияПР;
				Проводка.СуммаВРКт = СтрокаПартии.СуммаСписанияВР;
			КонецЕсли;
		КонецЕсли;

		// Очистка сумм в проводке при перемещении между складами,
		// если не ведется суммовой учет по складам
		Если Проводка.СчетДт = Проводка.СчетКт Тогда

			Если БухгалтерскийУчет.ВедетсяУчетПоСкладам(Проводка.СчетДт)
				И НЕ БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(Проводка.СчетДт)  Тогда

				ОчиститьСумму = Истина;

				// Проверка, что дебетовая и кредитовая часть проводки отличаются не только складом.
				// В этом случае очистка суммы не производится.
				Если СвойстваСчетаДт.УчетПоПодразделениям
					И Проводка.ПодразделениеДт <> Проводка.ПодразделениеКт Тогда
				    ОчиститьСумму = Ложь;
				КонецЕсли;
				Для Индекс = 1 По СвойстваСчетаДт.КоличествоСубконто Цикл
					ВидСубконто = СвойстваСчетаДт["ВидСубконто" + Индекс];
					Если ВидСубконто <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
						И Проводка.СубконтоДт[ВидСубконто] <> Проводка.СубконтоКт[ВидСубконто] Тогда
						ОчиститьСумму = Ложь;
					КонецЕсли;
				КонецЦикла;

				Если ОчиститьСумму Тогда
					Проводка.Сумма = 0;
					Проводка.СуммаНУДт = 0;
					Проводка.СуммаПРДт = 0;
					Проводка.СуммаВРДт = 0;
					Проводка.СуммаНУКт = 0;
					Проводка.СуммаПРКт = 0;
					Проводка.СуммаВРКт = 0;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Проводка.НеКорректироватьСтоимостьАвтоматически = СтрокаПартии.Себестоимость <> 0;
		
		Если СтрокаПартии.СчетУчета = ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов 
			И (СтрокаПартии.СуммаСписания <> 0) Тогда
			
			Если СтрокаПартии.СчетУчета = СтрокаПартии.КорСчетСписания Тогда
				//Перемещение
				Если БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(Проводка.СчетДт) 
					ИЛИ (СвойстваСчетаДт.УчетПоПодразделениям И Проводка.ПодразделениеДт <> Проводка.ПодразделениеКт) Тогда
					
					Проводка = Движения.Хозрасчетный.Добавить();
					Проводка.Период      = Реквизиты.Период;
					Проводка.Организация = Реквизиты.Организация;
					Проводка.Содержание  = НСтр("ru = 'Перемещение расходов на приобретение инвентаря'");
					
					Проводка.СчетКт	= ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов;
					
					СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
					
					Для НомерСубконто = 1 По 3 Цикл
						ВидСубконто = СтрокаПартии["ВидКорСубконто" + НомерСубконто];
						Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
							И НЕ (ВедетсяУчетПоПартиям ИЛИ СвойстваСчетаКт.Забалансовый) Тогда
							Продолжить;
						КонецЕсли;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВидСубконто, СтрокаПартии["КорСубконто" + НомерСубконто]);
					КонецЦикла;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
					Если ВедетсяУчетПоПартиям ИЛИ СвойстваСчетаКт.Забалансовый Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
					КонецЕсли;
					
					Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
						Проводка.ПодразделениеКт = СтрокаПартии.КорПодразделение;
					КонецЕсли;
												
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаПартии.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаПартии.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаПартии.Партия);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
					
					СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					
					Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
						Проводка.ПодразделениеДт = СтрокаПартии.Подразделение;
					КонецЕсли;
					
					Проводка.Сумма = СтрокаПартии.СуммаСписания;
					
					Если СвойстваСчетаДт.НалоговыйУчет И ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СтрокаПартии.СуммаСписанияПР;
						Проводка.СуммаВРДт = СтрокаПартии.СуммаСписания - СтрокаПартии.СуммаСписанияПР;						
					КонецЕсли;
					
					Если СвойстваСчетаКт.НалоговыйУчет И ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СтрокаПартии.СуммаСписанияПР;
						Проводка.СуммаВРКт = СтрокаПартии.СуммаСписания - СтрокаПартии.СуммаСписанияПР;
					КонецЕсли;
					
				КонецЕсли;				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// ВОЗВРАТ ТОВАРОВ ПОСТАВЩИКУ

Процедура СформироватьДвиженияВозвратТоваровПоставщику(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаСписанныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВозвратТоваровПоставщику(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого СтрокаПартии Из Параметры.ТаблицаСписанныеТовары Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИмяСписка", СтрокаПартии.ИмяСписка);
		СтруктураОтбора.Вставить("НомерСтроки", СтрокаПартии.НомерСтроки);
		СтрокаТаблицыТовары = Параметры.ТаблицаТовары.НайтиСтроки(СтруктураОтбора)[0];
		СодержаниеПроводки  = ?(ПустаяСтрока(СтрокаПартии.Содержание), Реквизиты.Содержание, СтрокаПартии.Содержание);
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		
		Проводка.СчетКт = СтрокаПартии.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",
			?(ЗначениеЗаполнено(СтрокаПартии.Комитент), СтрокаПартии.Комитент, Реквизиты.Контрагент));
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаПартии.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.КорСчетСписания);
		
		Если СвойстваСчетаДт.Забалансовый = СвойстваСчетаКт.Забалансовый Тогда
			
			Проводка.СчетДт	= СтрокаПартии.КорСчетСписания;
			
			Для НомерСубконто = 1 По 3 Цикл
				ВидСубконто = СтрокаПартии["ВидКорСубконто" + НомерСубконто];
				Если НЕ ВедетсяУчетПоПартиям И ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
					Продолжить;
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					ВидСубконто, СтрокаПартии["КорСубконто" + НомерСубконто]);
			КонецЦикла;
			Если ВедетсяУчетПоПартиям Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					"Партии", СтрокаПартии.Партия);
			КонецЕсли;
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаПартии.КорПодразделение;
			КонецЕсли;
			
			Если СвойстваСчетаДт.Количественный Тогда
				Проводка.КоличествоДт = СтрокаПартии.Количество;
			КонецЕсли;
			
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = ?(СтрокаТаблицыТовары.Количество = 0, СтрокаПартии.СуммаСписания,
					СтрокаПартии.СуммаСписания * СтрокаТаблицыТовары.СуммаВзаиморасчетов / СтрокаТаблицыТовары.СуммаРуб);
			КонецЕсли;
			
		КонецЕсли;
		
		Проводка.Сумма = СтрокаПартии.СуммаСписания;
		
		Если НЕ СвойстваСчетаКт.Забалансовый Тогда
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаПартии.СуммаСписанияНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = СтрокаПартии.СуммаСписанияПР;
					Проводка.СуммаВРДт = СтрокаПартии.СуммаСписанияВР;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаПартии.СуммаСписанияНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРКт = СтрокаПартии.СуммаСписанияПР;
				Проводка.СуммаВРКт = СтрокаПартии.СуммаСписанияВР;
			КонецЕсли;
		КонецЕсли;
		
		Проводка.НеКорректироватьСтоимостьАвтоматически = СтрокаТаблицыТовары.СебестоимостьУказанаВДокументе;
		
		Если СтрокаТаблицыТовары.Малоценка
			И (СтрокаПартии.СуммаСписания <> 0) Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			СодержаниеПроводки  = ?(ПустаяСтрока(СтрокаПартии.Содержание), Реквизиты.Содержание, СтрокаПартии.Содержание);
			
			Проводка.СчетДт = СтрокаТаблицыТовары.СчетЗатрат;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицыТовары.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицыТовары.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицыТовары.Субконто3);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицыТовары.ПодразделениеЗатрат;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаПартии.Подразделение;
			КонецЕсли;
		
			Проводка.Сумма = - СтрокаПартии.СуммаСписания;

			Если СвойстваСчетаДт.НалоговыйУчет И ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРДт = - СтрокаПартии.СуммаСписанияПР;
				Проводка.СуммаВРДт = - СтрокаПартии.СуммаСписания + СтрокаПартии.СуммаСписанияПР;						
			КонецЕсли;
			
			Если СвойстваСчетаКт.НалоговыйУчет И ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРКт = - СтрокаПартии.СуммаСписанияПР;
				Проводка.СуммаВРКт = - СтрокаПартии.СуммаСписания + СтрокаПартии.СуммаСписанияПР;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Алгоритмы формирования проводок этого документа учитывают малоценку
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("ДвиженияПоМалоценнымОбъектамСформированы", Истина);
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВозвратТоваровПоставщику(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"           // <Строка,0> - имя списка в документе
	+ "НомерСтроки,"         // <Число> - номер строки в списке
	+ "Количество,"          // <Число,15,3> - количество списываемой номенклатуры
	+ "СуммаРуб,"            // <Число,15,2> - сумма списываемой номенклатуры
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма списываемой номенклатуры в валюте расчетов с контрагентом (при расчетах в валюте)
	+ "СчетЗатрат,"          // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется товар
	+ "Субконто1,"           // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "Субконто2,"           // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "Субконто3,"           // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "ПодразделениеЗатрат," // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "Малоценка,"           // Признак малоценного оборудования и запасов
	+ "СебестоимостьУказанаВДокументе"; // <Булево> - Истина, если сумма себестоимости указана в строке табличной части документа

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконто1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорПодразделение," // <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "Подразделение,"    // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "Комитент," 		  // <СправочникСсылка.Контрагенты> - владелец проданного товара (услуги)
	+ "ДоговорКомиссии,"  // <СправочникСсылка.ДоговорыКонтрагентов> - договор комиссии
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияПР,"  // <Число,15,2> - сумма постоянных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВР,"  // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "Содержание";       // <Строка,0>   - содержание проводки

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"               // <Дата> - период движений - дата документа
	+ "Организация,"          // <СправочникСсылка.Организации>
	+ "Контрагент,"           // <СправочникСсылка.Контрагенты>
	+ "Содержание,"           // <Строка,150>
	+ "ВалютаВзаиморасчетов"; // <СправочникСсылка.Валюты> - валюта расчетов с контрагентом (при расчетах в валюте)

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ВОЗВРАТ ТОВАРОВ ОТ ПОКУПАТЕЛЯ

Функция ПодготовитьТаблицуВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьПустуюТаблицуСписанныеТовары();
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Не Реквизиты.УказанДокументОтгрузки
	 Или Не ЗначениеЗаполнено(ТаблицаСчетаУчетаТоваров) Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТовары, ТаблицаРезультата);
		Возврат ТаблицаРезультата;
	КонецЕсли;
	
	СтруктураСчетовДляЗапроса = РазделитьСчетаУчетаПоПартионномуУчету(ТаблицаСчетаУчетаТоваров);
	ЕстьСчетаПартионные   = СтруктураСчетовДляЗапроса.СчетаПартионные.Количество() <> 0;
	ЕстьСчетаНеПартионные = СтруктураСчетовДляЗапроса.СчетаНеПартионные.Количество() <> 0;
	Если Не ЕстьСчетаПартионные И Не ЕстьСчетаНеПартионные Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТовары, ТаблицаРезультата);
		Возврат ТаблицаРезультата;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ДатаДокументаРеализации = Реквизиты.ДатаДокументаРеализации;
	ВозвратПрошлогоМесяца = НачалоМесяца(Реквизиты.Период) <> НачалоМесяца(ДатаДокументаРеализации);

	ВедетсяСуммовойУчетПоСкладам = БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	
	МетаданныеСделки = Реквизиты.Сделка.Метаданные();
	ЕстьСкладОтгрузки = ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеСделки);
	ЕстьПодразделениеОтгрузки = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям()
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодразделениеОрганизации", МетаданныеСделки);
	
	РеквизитыСделки = Новый Структура();
	Если ЕстьСкладОтгрузки Тогда
		РеквизитыСделки.Вставить("Склад");
	КонецЕсли;
	Если ЕстьПодразделениеОтгрузки Тогда
		РеквизитыСделки.Вставить("ПодразделениеОрганизации");
	КонецЕсли;

	Если РеквизитыСделки.Количество() > 0 Тогда
		РеквизитыСделки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.Сделка, РеквизитыСделки);
	КонецЕсли;
	
	Если ЕстьСкладОтгрузки Тогда
		СкладОтгрузки = РеквизитыСделки.Склад;
	КонецЕсли;
	Если ЕстьПодразделениеОтгрузки Тогда
		ПодразделениеОтгрузки = РеквизитыСделки.ПодразделениеОрганизации;
	КонецЕсли;
	
	ИспользоватьОтборПоСкладуОтгрузки = ВедетсяСуммовойУчетПоСкладам И ЕстьСкладОтгрузки;
	
	Если ВозвратПрошлогоМесяца Тогда
		ТекстЗапроса = ТекстЗапросаВозвращенныеСписанныеТоварыПрошлогоМесяца(
			ЕстьСчетаНеПартионные,
			ЕстьСчетаПартионные,
			ИспользоватьОтборПоСкладуОтгрузки,
			ЕстьПодразделениеОтгрузки);
	Иначе
		ТекстЗапроса = ТекстЗапросаВозвращенныеСписанныеТоварыТекущегоМесяца(ЕстьСчетаНеПартионные, ЕстьСчетаПартионные);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ВТ_СписанныеТовары.Номенклатура,
	|	ВТ_СписанныеТовары.Партия,
	|	ВТ_СписанныеТовары.СчетУчета,
	|	ЕСТЬNULL(РеквизитыДокументаПартии.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии,
	|	СУММА(ВТ_СписанныеТовары.Сумма) КАК Сумма,
	|	СУММА(ВТ_СписанныеТовары.СуммаНУ) КАК СуммаНУ,
	|	СУММА(ВТ_СписанныеТовары.СуммаПР) КАК СуммаПР,
	|	СУММА(ВТ_СписанныеТовары.СуммаВР) КАК СуммаВР,
	|	СУММА(ВТ_СписанныеТовары.Количество) КАК Количество,
	|	СУММА(ВТ_СписанныеТовары.КоличествоОтгружено) КАК КоличествоОтгружено,
	|	СУММА(ВТ_СписанныеТовары.КоличествоВозвращеноРанее) КАК КоличествоВозвращеноРанее,
	|	СУММА(ВТ_СписанныеТовары.СуммаВозвращеноРанее) КАК СуммаВозвращеноРанее,
	|	СУММА(ВТ_СписанныеТовары.СуммаНУВозвращеноРанее) КАК СуммаНУВозвращеноРанее,
	|	СУММА(ВТ_СписанныеТовары.СуммаПРВозвращеноРанее) КАК СуммаПРВозвращеноРанее,
	|	СУММА(ВТ_СписанныеТовары.СуммаВРВозвращеноРанее) КАК СуммаВРВозвращеноРанее
	|ИЗ
	|	ВТ_СписанныеТовары КАК ВТ_СписанныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументаПартии
	|		ПО (РеквизитыДокументаПартии.Организация = &Организация)
	|			И ВТ_СписанныеТовары.Партия = РеквизитыДокументаПартии.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СписанныеТовары.Номенклатура,
	|	ВТ_СписанныеТовары.СчетУчета,
	|	ВТ_СписанныеТовары.Партия,
	|	ЕСТЬNULL(РеквизитыДокументаПартии.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1))
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_СписанныеТовары.Количество) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_СписанныеТовары.Номенклатура,
	|	ДатаПартии УБЫВ";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("Регистратор",        Реквизиты.Сделка);
	Запрос.УстановитьПараметр("СчетКтПартионный",   СтруктураСчетовДляЗапроса.СчетаПартионные);
	Запрос.УстановитьПараметр("СчетКтНеПартионный", СтруктураСчетовДляЗапроса.СчетаНеПартионные);
	Запрос.УстановитьПараметр("НачТекущегоМесяца",  НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонДата",            Реквизиты.Период);
	Запрос.УстановитьПараметр("НачМесяцаРеализации",НачалоМесяца(ДатаДокументаРеализации));	
	Запрос.УстановитьПараметр("КонМесяцаРеализации",КонецМесяца(ДатаДокументаРеализации));
	Запрос.УстановитьПараметр("Товары",             Параметры.СписокНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("СкладОтгрузки",      СкладОтгрузки);
	Запрос.УстановитьПараметр("ПодразделениеОтгрузки",ПодразделениеОтгрузки);

	// Виды субконто при отсутствии партионного учета.
	ВидыСубконтоБезПартий = Новый Массив;
	ВидыСубконтоБезПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если ИспользоватьОтборПоСкладуОтгрузки Тогда
		ВидыСубконтоБезПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидыСубконтоБезПартий", ВидыСубконтоБезПартий);

	// Виды субконто при количественном учете по складам.
	ВидыСубконтоБезПартийСклады = Новый Массив;
	ВидыСубконтоБезПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоБезПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("ВидыСубконтоБезПартийСклады", ВидыСубконтоБезПартий);

	// Виды субконто с учетом партий.
	ВидыСубконтоПартий = Новый Массив;
	ВидыСубконтоПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Если ИспользоватьОтборПоСкладуОтгрузки Тогда
		ВидыСубконтоПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидыСубконтоПартий", ВидыСубконтоПартий);

	// Всегда 3 вида субконто.
	ВидыСубконтоПартийСклады = Новый Массив;
	ВидыСубконтоПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("ВидыСубконтоПартийСклады", ВидыСубконтоПартийСклады);
	
	Запрос.УстановитьПараметр("ЭтотВозврат", Реквизиты.Регистратор);

	ТаблицаОтгрузок = Запрос.Выполнить().Выгрузить();

	Для каждого СтрокаВозврата Из Параметры.ТаблицаТовары Цикл

		КоличествоНеПодобраноПартии = СтрокаВозврата.Количество;

		ОтгруженныеПартии = ТаблицаОтгрузок.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаВозврата.Номенклатура, СтрокаВозврата.СчетУчета));
		Для каждого СтрокаОтгрузки Из ОтгруженныеПартии Цикл
			
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВозврата);
			НоваяСтрока.Партия = СтрокаОтгрузки.Партия;
			
			КоличествоВозвращено = Мин(КоличествоНеПодобраноПартии, СтрокаОтгрузки.КоличествоОтгружено);

			Если СтрокаОтгрузки.Количество = СтрокаОтгрузки.КоличествоВозвращеноРанее + КоличествоВозвращено Тогда
				// Текущий возврат в совокупности с предыдущими привел к полному возврату всей партии.
				НоваяСтрока.Количество         = КоличествоВозвращено;
				НоваяСтрока.СуммаСписания      = СтрокаОтгрузки.Сумма - СтрокаОтгрузки.СуммаВозвращеноРанее;
				НоваяСтрока.СуммаСписанияНУ    = СтрокаОтгрузки.СуммаНУ - СтрокаОтгрузки.СуммаНУВозвращеноРанее;
				НоваяСтрока.СуммаСписанияПР    = СтрокаОтгрузки.СуммаПР - СтрокаОтгрузки.СуммаПРВозвращеноРанее;
				НоваяСтрока.СуммаСписанияВР    = СтрокаОтгрузки.СуммаВР - СтрокаОтгрузки.СуммаВРВозвращеноРанее;
				НоваяСтрока.СуммаКорСписанияНУ = НоваяСтрока.СуммаСписанияНУ;
				НоваяСтрока.СуммаКорСписанияПР = НоваяСтрока.СуммаСписанияПР;
				НоваяСтрока.СуммаКорСписанияВР = НоваяСтрока.СуммаСписанияВР;
				
			ИначеЕсли КоличествоВозвращено > СтрокаОтгрузки.Количество Тогда
				// Текущий возврат больше, чем очередная партия, т.е. фактически возвращают несколько разных партий.
				НоваяСтрока.Количество         = СтрокаОтгрузки.Количество;
				НоваяСтрока.СуммаСписания      = СтрокаОтгрузки.Сумма;
				НоваяСтрока.СуммаСписанияНУ    = СтрокаОтгрузки.СуммаНУ;
				НоваяСтрока.СуммаСписанияПР    = СтрокаОтгрузки.СуммаПР;
				НоваяСтрока.СуммаСписанияВР    = СтрокаОтгрузки.СуммаВР;
				НоваяСтрока.СуммаКорСписанияНУ = СтрокаОтгрузки.СуммаНУ;
				НоваяСтрока.СуммаКорСписанияПР = СтрокаОтгрузки.СуммаПР;
				НоваяСтрока.СуммаКорСписанияВР = СтрокаОтгрузки.СуммаВР;
			Иначе
				// Частичный возврат партии.
				НоваяСтрока.Количество         = КоличествоВозвращено;
				Коэфф                          = КоличествоВозвращено / СтрокаОтгрузки.Количество;
				НоваяСтрока.СуммаСписания      = Окр(СтрокаОтгрузки.Сумма   * Коэфф, 2);
				НоваяСтрока.СуммаСписанияНУ    = Окр(СтрокаОтгрузки.СуммаНУ * Коэфф, 2);
				НоваяСтрока.СуммаСписанияПР    = Окр(СтрокаОтгрузки.СуммаПР * Коэфф, 2);
				НоваяСтрока.СуммаСписанияВР    = Окр(СтрокаОтгрузки.СуммаВР * Коэфф, 2);
				НоваяСтрока.СуммаКорСписанияНУ = НоваяСтрока.СуммаСписанияНУ;
				НоваяСтрока.СуммаКорСписанияПР = НоваяСтрока.СуммаСписанияПР;
				НоваяСтрока.СуммаКорСписанияВР = НоваяСтрока.СуммаСписанияВР;
			КонецЕсли;
			
			Если ВозвратПрошлогоМесяца Тогда
				НоваяСтрока.Себестоимость = НоваяСтрока.СуммаСписания;
			КонецЕсли;

			КоличествоНеПодобраноПартии = КоличествоНеПодобраноПартии - НоваяСтрока.Количество;
			
			СтрокаОтгрузки.Количество 			= СтрокаОтгрузки.Количество - НоваяСтрока.Количество;
			СтрокаОтгрузки.КоличествоОтгружено 	= СтрокаОтгрузки.КоличествоОтгружено - НоваяСтрока.Количество;
			СтрокаОтгрузки.Сумма 				= СтрокаОтгрузки.Сумма - НоваяСтрока.СуммаСписания;
			СтрокаОтгрузки.СуммаНУ 				= СтрокаОтгрузки.СуммаНУ - НоваяСтрока.СуммаСписанияНУ;
			СтрокаОтгрузки.СуммаПР 				= СтрокаОтгрузки.СуммаПР - НоваяСтрока.СуммаСписанияПР;
			СтрокаОтгрузки.СуммаВР 				= СтрокаОтгрузки.СуммаВР - НоваяСтрока.СуммаСписанияВР;

			Если КоличествоНеПодобраноПартии = 0 Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;

		// Если в документе указан документ реализации по которому было отгружено больше,
		// чем возвращается, то эту разницу отнесем на пустую партию.
		Если КоличествоНеПодобраноПартии > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Документом ""%1"" было реализовано ""%2"" на ""%3"" ед. меньше, чем возвращается.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				СокрЛП(Реквизиты.Сделка),
				СтрокаВозврата.Номенклатура,
				КоличествоНеПодобраноПартии);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Реквизиты.Регистратор,
				СтрокаВозврата.ИмяСписка+"[" + Формат(СтрокаВозврата.НомерСтроки - 1, "ЧН=0; ЧГ=")+"].Количество",
				"Объект",
				Отказ);
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаРезультата;

КонецФункции

// КОРРЕКТИРОВКА СПИСАНИЯ ТОВАРОВ 

Процедура СформироватьДвиженияКорректировкаПоступлениеТоваров(ТаблицаВозвращенныеТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВозвращенныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКорректировкаПоступлениеТоваров(ТаблицаВозвращенныеТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ Реквизиты.ПрошлыйПериод Тогда
		// В текущем периоде списываем как всегда
		СформироватьДвиженияСписаниеТоваров(Параметры.ТаблицаВозвращенныеТовары, 
			Параметры.Реквизиты, Движения, Отказ);
		Возврат;
	КонецЕсли;
	
	ДатаКонецПрошлогоГода = НачалоГода(Реквизиты.Период)-1;
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого СтрокаПартии Из Параметры.ТаблицаВозвращенныеТовары Цикл
		Если НЕ Реквизиты.ОтчетностьПодписана Тогда
			ПараметрыСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.СчетУчета);
			СчетУчетаЗабалансовый = ПараметрыСчетаУчета.Забалансовый;
			СчетКорректировки = ?(СчетУчетаЗабалансовый, ПланыСчетов.Хозрасчетный.КорректировкаКомТоваровПрошлогоПериода,
				ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода);

			//Проводка списания на счет корректировки концом года
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = ДатаКонецПрошлогоГода;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);

			Проводка.СчетКт = СчетКорректировки;
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			
			ЗаполнитьАналитикуСписанияТовара(Проводка, Реквизиты, СтрокаПартии, "Кт", 1, ВедетсяУчетПоПартиям, Ложь, ПоддержкаПБУ18);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.КорСчетСписания);
			Если СвойстваСчетаДт.Забалансовый = СвойстваСчетаКт.Забалансовый Тогда

				Проводка.СчетДт	= СтрокаПартии.КорСчетСписания;
				
				Для НомерСубконто = 1 По 3 Цикл
					ВидСубконто = СтрокаПартии["ВидКорСубконто" + НомерСубконто];
					Если НЕ ВедетсяУчетПоПартиям И ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
						Продолжить;
					КонецЕсли;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						ВидСубконто, СтрокаПартии["КорСубконто" + НомерСубконто]);
				КонецЦикла;
				Если ВедетсяУчетПоПартиям ИЛИ СвойстваСчетаДт.Забалансовый Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						"Партии", СтрокаПартии.Партия);
				КонецЕсли;

				УстановитьПараметрыПроводки(Проводка, СвойстваСчетаДт, "Дт", СтрокаПартии.КорПодразделение, СтрокаПартии.Количество,
					0, 0, 0, ОтражатьВНалоговомУчете, ПоддержкаПБУ18);
				
			КонецЕсли;
			Проводка.Сумма = СтрокаПартии.СуммаСписания;
			Проводка.НеКорректироватьСтоимостьАвтоматически = СтрокаПартии.Себестоимость <> 0;
			
 			//Проводка списания с 41 счета
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = СтрокаПартии.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);

			Проводка.СчетДт = СчетКорректировки;
			ЗаполнитьАналитикуСписанияТовара(Проводка, Реквизиты, СтрокаПартии, "Дт", 1, ВедетсяУчетПоПартиям, Ложь, ПоддержкаПБУ18);
			
			Проводка.СчетКт = СтрокаПартии.СчетУчета;
			ЗаполнитьАналитикуСписанияТовара(Проводка, Реквизиты, СтрокаПартии, "Кт", 1, ВедетсяУчетПоПартиям, Ложь, ПоддержкаПБУ18);
			
			Проводка.Сумма = СтрокаПартии.СуммаСписания;
			Проводка.НеКорректироватьСтоимостьАвтоматически = СтрокаПартии.Себестоимость <> 0;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = СтрокаПартии.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);
		
		Проводка.СчетДт = СтрокаПартии.СчетУчета;
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		ЗаполнитьАналитикуСписанияТовара(Проводка, Реквизиты, СтрокаПартии, "Дт", -1, ВедетсяУчетПоПартиям, ОтражатьВНалоговомУчете, ПоддержкаПБУ18);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		Если СвойстваСчетаДт.Забалансовый = СвойстваСчетаКт.Забалансовый Тогда
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, Реквизиты.СтатьяПрочихДоходовИРасходов);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы, СтрокаПартии.Номенклатура);
			УстановитьПараметрыПроводки(Проводка, СвойстваСчетаКт, "Кт", СтрокаПартии.КорПодразделение, 0,
				-СтрокаПартии.СуммаКорСписанияНУ, -СтрокаПартии.СуммаКорСписанияПР, -СтрокаПартии.СуммаКорСписанияВР, ОтражатьВНалоговомУчете, ПоддержкаПБУ18);
		КонецЕсли;
		
		Проводка.Сумма = ?(НЕ Реквизиты.ОтчетностьПодписана, 0, - СтрокаПартии.СуммаСписания);
		Проводка.КоличествоДт = ?(НЕ Реквизиты.ОтчетностьПодписана, 0, - СтрокаПартии.Количество);
		Проводка.НеКорректироватьСтоимостьАвтоматически = СтрокаПартии.Себестоимость <> 0;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// ПОСТУПЛЕНИЕ ТАРЫ

Процедура СформироватьДвиженияПоступлениеТары(ТаблицаТара, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТара) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеТары(ТаблицаТара, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТара Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СтрокаТаблицы.СуммаРуб;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовПоТаре;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаТаблицы.СуммаРуб;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаРуб;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// КОРРЕКТИРОВКА СТОИМОСТИ ТАРЫ

Процедура СформироватьДвиженияКорректировкаСтоимостиТары(ТаблицаТара, ТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаТара) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКорректировкаСтоимостиТары(ТаблицаТара, ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТара Цикл

		Отбор = Новый Структура("ИмяСписка, НомерСтроки", СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтроки);
		СтрокиТаблицыСписаннаяТара = Параметры.ТаблицаСписанныеТовары.НайтиСтроки(Отбор);

		Для каждого СтрокаПартии Из СтрокиТаблицыСписаннаяТара Цикл

			Цена       = СтрокаТаблицы.СуммаРуб / СтрокаТаблицы.Количество;
			ЦенаПартии = СтрокаПартии.СуммаСписания / СтрокаПартии.Количество;
			РазницаЦен = Цена - ЦенаПартии;
			
			Если РазницаЦен = 0 Тогда
				Продолжить;
			КонецЕсли;

			ДоляСуммыСписания = СтрокаПартии.Количество / СтрокаТаблицы.Количество * СтрокаТаблицы.СуммаРуб - СтрокаПартии.СуммаСписания;
			
			СтатьяДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("РазницыЗалоговойИФактическойСтоимостиТары");

			Если РазницаЦен > 0 Тогда

				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);
				Проводка.Сумма       = ДоляСуммыСписания;

				Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовПоТаре;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);

				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Реквизиты.Подразделение;
				КонецЕсли;

				Если СвойстваСчетаДт.Валютный Тогда
					Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = ?(СтрокаТаблицы.СуммаРуб = 0, РазницаЦен,
						РазницаЦен * СтрокаТаблицы.СуммаВзаиморасчетов / СтрокаТаблицы.СуммаРуб);
				КонецЕсли;

				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт,
					Проводка.СубконтоКт,
					"ПрочиеДоходыИРасходы",
					СтатьяДоходовРасходов);

				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Реквизиты.Подразделение;
				КонецЕсли;

			ИначеЕсли РазницаЦен < 0 Тогда

				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);
				Проводка.Сумма       = -ДоляСуммыСписания;

				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт,
					Проводка.СубконтоДт,
					"ПрочиеДоходыИРасходы",
					СтатьяДоходовРасходов);

				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Реквизиты.Подразделение;
				КонецЕсли;

				Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовПоТаре;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);

				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Реквизиты.Подразделение;
				КонецЕсли;

				Если СвойстваСчетаКт.Валютный Тогда
					Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = -?(СтрокаТаблицы.СуммаРуб = 0, РазницаЦен,
						РазницаЦен * СтрокаТаблицы.СуммаВзаиморасчетов / СтрокаТаблицы.СуммаРуб);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры 

// КОРРЕКТИРОВКА СТОИМОСТИ ТОВАРОВ ПРИ ВОЗВРАТЕ ПОСТАВЩИКУ

Процедура СформироватьДвиженияКорректировкаСтоимостиТоваров(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаНДСВключенВСтоимость, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТовары) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентом(Реквизиты.ВидДоговора) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКорректировкаСтоимостиТоваров(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаНДСВключенВСтоимость,  ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	ТаблицаСписанныеТовары                     = УстановитьВалютныеСуммыСписанияКорректировкаСтоимости(Параметры.ТаблицаСписанныеТовары, Реквизиты);
	ТаблицаСписанныеПартииНДСВключенВСтоимость = УстановитьВалютныеСуммыНДСКорректировкаСтоимости(Параметры.ТаблицаНДСВключенВСтоимость, Реквизиты);
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		
		Отбор = Новый Структура("ИмяСписка, НомерСтроки", СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтроки);
		СписанныеПартииТовара = ТаблицаСписанныеТовары.Скопировать(Отбор);
		СписанныеПартииНДС    = ТаблицаСписанныеПартииНДСВключенВСтоимость.Скопировать(Отбор);
		СвойстваСчетаУчета    = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		
		РазницаВСтоимости    = СтрокаТаблицы.Сумма - (СписанныеПартииТовара.Итог("СуммаСписания") + СписанныеПартииНДС.Итог("НДС"));
		РазницаВСтоимостиВал = СтрокаТаблицы.СуммаВзаиморасчетов - (СписанныеПартииТовара.Итог("СуммаСписанияВал") + СписанныеПартииНДС.Итог("НДСВал"));
		РазницаВСтоимостиНУ = ?(ПлательщикНалогаНаПрибыль И СвойстваСчетаУчета.НалоговыйУчет,
			СтрокаТаблицы.Сумма - (СписанныеПартииТовара.Итог("СуммаСписанияНУ") + СписанныеПартииНДС.Итог("НДС")), 0);
		РазницаВСтоимостиПР = ?(ПлательщикНалогаНаПрибыль И СвойстваСчетаУчета.НалоговыйУчет И ПоддержкаПБУ18,
			-СписанныеПартииТовара.Итог("СуммаСписанияПР"), 0);
		РазницаВСтоимостиВР = ?(ПлательщикНалогаНаПрибыль И СвойстваСчетаУчета.НалоговыйУчет И ПоддержкаПБУ18,
			-СписанныеПартииТовара.Итог("СуммаСписанияВР"), 0);

		Если РазницаВСтоимости = 0
			И РазницаВСтоимостиНУ = 0
			И РазницаВСтоимостиПР = 0
			И РазницаВСтоимостиВР = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтатьяДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров");
		
		Если РазницаВСтоимости > 0 ИЛИ
			РазницаВСтоимости = 0 И (РазницаВСтоимостиНУ > 0 ИЛИ РазницаВСтоимостиПР > 0 ИЛИ РазницаВСтоимостиВР > 0) Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
			Проводка.Сумма       = РазницаВСтоимости;
			
			Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовПоПретензиям;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = РазницаВСтоимостиВал;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт,
				Проводка.СубконтоКт,
				"ПрочиеДоходыИРасходы",
				СтатьяДоходовРасходов);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = РазницаВСтоимостиНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = РазницаВСтоимостиПР;
					Проводка.СуммаВРДт = РазницаВСтоимостиВР;
				КонецЕсли;
			КонецЕсли;
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = РазницаВСтоимостиНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРКт = РазницаВСтоимостиПР;
					Проводка.СуммаВРКт = РазницаВСтоимостиВР;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли РазницаВСтоимости < 0
			ИЛИ РазницаВСтоимостиНУ < 0
			ИЛИ РазницаВСтоимостиПР < 0
			ИЛИ РазницаВСтоимостиВР < 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
			Проводка.Сумма       = -РазницаВСтоимости;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт,
				Проводка.СубконтоДт,
				"ПрочиеДоходыИРасходы",
				СтатьяДоходовРасходов);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовПоПретензиям;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Если СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = -РазницаВСтоимостиВал;
			КонецЕсли;
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = -РазницаВСтоимостиНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = -РазницаВСтоимостиПР;
					Проводка.СуммаВРДт = -РазницаВСтоимостиВР;
				КонецЕсли;
			КонецЕсли;
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = -РазницаВСтоимостиНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРКт = -РазницаВСтоимостиПР;
					Проводка.СуммаВРКт = -РазницаВСтоимостиВР;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры
 

Функция ПодготовитьПараметрыКорректировкаСтоимостиТоваров(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаНДСВключенВСтоимость, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"           // <Строка,0> - имя списка в документе
	+ "НомерСтроки,"         // <Число> - номер строки в списке
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "Количество,"          // <Число,15,3> - количество возвращаемого товара
	+ "Сумма,"               // <Число,15,2> - сумма возвращаемого товара
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма возвращаемого товара в валюте расчетов с контрагентов (при расчетах в валюте)
	+ "Содержание";          // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"       // <Строка,0> - имя списка в документе
	+ "НомерСтроки,"     // <Число> - номер строки в списке
	+ "СуммаСписания,"   // <Число,15,2> - сумма возвращаемого товара, определенная по данным остатков
	+ "СуммаСписанияНУ," // <Число,15,2> - сумма возвращаемого товара (НУ), определенная по данным остатков
	+ "СуммаСписанияПР," // <Число,15,2> - сумма постоянных разниц в оценке возвращаемого товара, определенная по данным остатков
	+ "СуммаСписанияВР"; // <Число,15,2> - сумма постоянных разниц в оценке возвращаемого товара, определенная по данным остатков

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.ТаблицаСписанныеПартииНДС

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"       // <Строка,0> - имя списка в документе
	+ "НомерСтроки,"     // <Число> - номер строки в списке
	+ "НДС";   // <Число,15,2> - сумма НДС возвращаемого товара в раздельном учете

	Параметры.Вставить("ТаблицаНДСВключенВСтоимость",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНДСВключенВСтоимость, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                        // <Дата> - период движений - дата документа
	+ "Организация,"                   // <СправочникСсылка.Организация> - организация, из которой возвращается товар
	+ "Подразделение,"                 // <СправочникСсылка.ПодразделенияОрганизации> - подразделение организации, из которого возвращается товар
	+ "Контрагент,"                    // <СправочникСсылка.Контрагенты> - поставщик товара
	+ "ДоговорКонтрагента,"            // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому возвращается товар
	+ "ВидДоговора,"                   // <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> - реквизит договора с поставщиком
	+ "СчетУчетаРасчетовПоПретензиям," // <ПланСчетовСсылка.Хозрасчетный> - счет учета с контрагентом по возврату, обычно 76.02
	+ "КурсВзаиморасчетов,"            // <Число> - курс валюты взаиморасчетов (при расчетах в валюте)
	+ "КратностьВзаиморасчетов,"       // <Число> - кратность валюты взаиморасчетов (при расчетах в валюте)
	+ "ВалютаВзаиморасчетов";          // <СправочникСсылка.Валюты> - валюта взаиморасчетов с контрагентом (при расчетах в валюте)

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ИЗМЕНЕНИЕ СЕБЕСТОИМОСТИ ОСТАТКОВ ТОВАРОВ

Процедура СформироватьДвиженияИзменениеСебестоимостиОстатковТоваров(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТовары) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеСебестоимостиОстатковТоваров(ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтрокаТаблицы.Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",    СтрокаТаблицы.СтавкаНДС);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаТаблицы.ДокументОприходования);
		КонецЕсли;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтрокаТаблицы.СтатьяЗатратНУ);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТаблицы.СтатьяЗатратНУ);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;
			
			Если СтрокаТаблицы.СчетУчета = СтрокаТаблицы.СчетУчетаНУ Тогда
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Если СтрокаТаблицы.ЗатратыПринимаютсяКНУ Тогда
						Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
						Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
						Проводка.СуммаВРДт = 0;
					Иначе
						Проводка.СуммаНУДт = 0;
						Проводка.СуммаПРДт = СтрокаТаблицы.СуммаНУ;
						Проводка.СуммаВРДт = 0;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Если СтрокаТаблицы.ЗатратыПринимаютсяКНУ Тогда
					
					Проводка.СуммаВРДт = СтрокаТаблицы.СуммаНУ;
					
					ПроводкаНУ = Движения.Хозрасчетный.Добавить();
					
					ПроводкаНУ.Период      = Реквизиты.Период;
					ПроводкаНУ.Организация = Реквизиты.Организация;
					ПроводкаНУ.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
					
					ПроводкаНУ.СчетДт = СтрокаТаблицы.СчетУчетаНУ;
					СвойстваСчетаДт   = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					Если СтрокаТаблицы.ВидСубконтоСтатьиНУ <> Неопределено Тогда
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, СтрокаТаблицы.ВидСубконтоСтатьиНУ, СтрокаТаблицы.СтатьяЗатратНУ);
					КонецЕсли;
					Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
						ПроводкаНУ.ПодразделениеДт = СтрокаТаблицы.Подразделение;
					КонецЕсли;
					
					ПроводкаНУ.СчетКт = СтрокаТаблицы.КорСчет;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
					Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
						ПроводкаНУ.ПодразделениеКт = СтрокаТаблицы.Подразделение;
					КонецЕсли;
					
					ПроводкаНУ.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
					ПроводкаНУ.СуммаВРДт = ПроводкаНУ.Сумма - ПроводкаНУ.СуммаНУДт;
					
				Иначе
					
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = 0;
						Проводка.СуммаПРДт = Проводка.Сумма - Проводка.СуммаНУДт;
						Проводка.СуммаВРДт = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

// ПОСТУПЛЕНИЕ ТОВАРОВ

Процедура СформироватьДвиженияПоступлениеТоваров(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТовары) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеТоваров(ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
		
		Проводка.СчетДт = ?(СтрокаТаблицы.Малоценка, ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов, СтрокаТаблицы.СчетУчета);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДСВРознице);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.Забалансовый Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
		КонецЕсли;
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
					Проводка.СуммаВРДт = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
					Проводка.СуммаВРКт = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.Малоценка Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СтрокаТаблицы.Содержание;
			
			Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеЗатрат;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", Реквизиты.Склад);
			Если ВедетсяУчетПоПартиям Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", Реквизиты.Регистратор);
			КонецЕсли;
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Если СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
			КонецЕсли;
		
			Проводка.Сумма = СтрокаТаблицы.СуммаБУ;
			
			Если ОтражатьВНалоговомУчете Тогда
				
				СуммаНУ = 0;
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
						Проводка.СуммаВРДт = Проводка.Сумма - Проводка.СуммаНУДт - Проводка.СуммаПРДт;
					КонецЕсли;
				КонецЕсли;
				
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
						Проводка.СуммаВРКт = Проводка.Сумма - Проводка.СуммаНУКт - Проводка.СуммаПРКт;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеТоваров(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         // <Число> - номер строки в списке
	+ "Номенклатура,"        // <СправочникСсылка.Номенклатура> - поступающий товар
	+ "СтавкаНДСВРознице,"   // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС (указывается при поступлении товара в НТТ)
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаБУ,"             // <Число,15,2> - сумма в рублях
	+ "СуммаНУ,"             // <Число,15,2> - сумма в рублях (НУ)
	+ "Количество,"          // <Число,15,3> - количество поступающего товара
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется товар
	+ "КорСчет,"             // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого поступает товар
	+ "ВидКорСубконто1,"     // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета,
		// с которого поступает товар
	+ "ВидКорСубконто2,"     // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета,
		// с которого поступает товар
	+ "ВидКорСубконто3,"     // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета,
		// с которого поступает товар
	+ "КорСубконто1,"        // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "КорСубконто2,"        // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "КорСубконто3,"        // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	
	+ "СчетЗатрат,"          // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется товар
	+ "Субконто1,"           // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "Субконто2,"           // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "Субконто3,"           // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "ПодразделениеЗатрат," // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "Малоценка,"           // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	
	+ "Содержание";          // <Строка,150> - содержание проводки
	
	

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает товар
	+ "Подразделение,"                  // <СправочникСсылка.ПодразделенияОрганизаций> - подразделение, в которое поступает товар
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - Контрагент, от которго поступает товар
	+ "Склад,"                          // <СправочникСсылка.Склады> - склад, на который поступает товар
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПОСТУПЛЕНИЕ ТОПЛИВА

// Возвращает содержание проводки для поступления топлива для документа "Путевой лист"
//
// Параметры:
//   ТранспортноеСредство - СправочникСсылка.ТранспортныеСредства - автомобиль, для которого было приобретено топливо
//   ВидДокумента         - ПеречислениеСсылка.ВидыДокументовПриобретенияГСМ - Вид документа, по которому было приобретено топливо в рейсе
//   Номер                - Строка - Номер входящего документа, по которому было приобретено топливо во время рейса
//   Дата                 - Дата - Дата входящего документа, по которому было приобретено топливо во время рейса
//
// Возвращаемое значение:
//   Строка
//
Функция СодержаниеПроводкиПокупкаПоПутевомуЛисту(ТранспортноеСредство, ВидДокумента, Номер, Дата = '00010101') Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если ВидДокумента = Перечисления.ВидыДокументовПриобретенияГСМ.ТопливнаяКарта Тогда
		Возврат СтрШаблон(НСтр("ru='Приобретено топливо для %1 по Топливной карте №%2'", КодОсновногоЯзыка),
			ТранспортноеСредство,
			Номер);
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru='Приобретено топливо для %1 по Кассовому чеку №%2 от %3'", КодОсновногоЯзыка),
		ТранспортноеСредство,
		Номер,
		Дата);
	
КонецФункции

// Формирует проводки для поступления по топливным картам:
//    Дт 10.03.2 - Кт 60 - сумма операций по топливным картам
//    Дт 76.15   - Кт 60 - количество купленного топлива
//
// Параметры:
//    ПриобретениеТоплива - ТаблицаЗначений
//    ТаблицаРеквизиты    - ТаблицаЗначений
//    Движения            - КоллекцияДвижений
//
Процедура СформироватьДвиженияПоступлениеПоТопливнымКартам(ПриобретениеТоплива, ТаблицаРеквизиты, Движения) Экспорт
	
	Если Не ЗначениеЗаполнено(ПриобретениеТоплива) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеПоТопливнымКартам(ТаблицаРеквизиты, ПриобретениеТоплива);
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Параметры.Реквизиты[0]);
	
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	СчетТопливнаяКарта      = ПланыСчетов.Хозрасчетный.ТопливныеКарты;
	
	ВидСубконтоНоменклатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	ВидСубконтоТранспортныеСредства = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ТранспортныеСредства;
	
	Для Каждого СтрокаТаблицы Из Параметры.ПриобретениеТоплива Цикл
		
		// Отражение суммы по счету 10.03.2
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;
		
		Проводка.СчетДт      = СтрокаТаблицы.СчетУчета;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ВидСубконтоНоменклатура,
			СтрокаТаблицы.Номенклатура);
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ВидСубконтоТранспортныеСредства,
			СтрокаТаблицы.ТранспортноеСредство);
		
		Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			СтрокаТаблицы.ВидКорСубконто1,
			СтрокаТаблицы.КорСубконто1);
			
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			СтрокаТаблицы.ВидКорСубконто2,
			СтрокаТаблицы.КорСубконто2);
			
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			СтрокаТаблицы.ВидКорСубконто3,
			СтрокаТаблицы.КорСубконто3);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			СуммаПР = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				СтрокаТаблицы.СуммаНУ,
				СтрокаТаблицы.СуммаНУ,
				СуммаПР,
				СуммаПР,
				0,
				0,
				Проводка);
			
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
		
		// Списание количества по счету 76.15
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.КоличествоДт= СтрокаТаблицы.Количество;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
		
		Проводка.СчетДт      = СчетТопливнаяКарта;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,
			Проводка.СубконтоДт,
			ВидСубконтоНоменклатура,
			СтрокаТаблицы.Номенклатура);
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,
			Проводка.СубконтоДт,
			ВидСубконтоТранспортныеСредства,
			СтрокаТаблицы.ТранспортноеСредство);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
		
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

// Формирует проводки по документу "Путевой лист":
//    Дт 10.03.2     - Кт 71      - количество и сумма купленного топлива по кассовому чеку
//    Дт 10.03.2     - Кт 76.15   - количество купленного ГСМ по топливным картам
//    Дт Счет затрат - Кт 10.03.2 - количество израсходованного топлива согласно путевого листа
//
// Параметры:
//    ПриобретениеТоплива - ТаблицаЗначений
//    ТаблицаРеквизиты    - ТаблицаЗначений
//    Движения            - КоллекцияДвижений
//
Процедура СформироватьДвиженияРасходыПоПутевомуЛисту(ПриобретениеТоплива, ТаблицаРеквизиты, Движения) Экспорт
	
	СтруктураТаблиц = ПодготовитьПараметрыПоступлениеКупленногоТоплива(ПриобретениеТоплива, ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтруктураТаблиц.Реквизиты[0]);
	
	Движения.Хозрасчетный.Записывать = Истина;
	
	СчетТопливо         = ПланыСчетов.Хозрасчетный.ТопливоВБаке;
	СчетПодотчетныеЛица = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
	СчетТопливнаяКарта  = ПланыСчетов.Хозрасчетный.ТопливныеКарты;
	
	ТипКассовыйЧек = Перечисления.ВидыДокументовПриобретенияГСМ.КассовыйЧек;
	
	ВидСубконтоНоменклатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	ВидСубконтоТранспортныеСредства = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ТранспортныеСредства;
	ВидСубконтоРаботникиОрганизаций = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	
	Для Каждого ТекущаяСтрока Из СтруктураТаблиц.КупленноеТопливо Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = ТекущаяСтрока.Сумма;
		
		// Дт
		Проводка.СчетДт       = СчетТопливо;
		Проводка.КоличествоДт = ТекущаяСтрока.Количество;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			ВидСубконтоНоменклатура, Реквизиты.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			ВидСубконтоТранспортныеСредства, Реквизиты.ТранспортноеСредство);
		
		// Кт
		Если ТекущаяСтрока.ВидВходящегоДокумента = ТипКассовыйЧек Тогда
			
			Проводка.СчетКт = СчетПодотчетныеЛица;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				ВидСубконтоРаботникиОрганизаций, Реквизиты.ФизЛицо);
			
			СодержаниеПроводки = СодержаниеПроводкиПокупкаПоПутевомуЛисту(
				Реквизиты.ТранспортноеСредство,
				ТекущаяСтрока.ВидВходящегоДокумента,
				ТекущаяСтрока.НомерВходящегоДокумента,
				Формат(ТекущаяСтрока.ДатаВходящегоДокумента, "ДЛФ=D"));
			
		Иначе
			
			Проводка.СчетКт = СчетТопливнаяКарта;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				ВидСубконтоНоменклатура, Реквизиты.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				ВидСубконтоТранспортныеСредства, Реквизиты.ТранспортноеСредство);
			
			Проводка.КоличествоКт = ТекущаяСтрока.Количество;
			
			СодержаниеПроводки = СодержаниеПроводкиПокупкаПоПутевомуЛисту(
				Реквизиты.ТранспортноеСредство,
				ТекущаяСтрока.ВидВходящегоДокумента,
				ТекущаяСтрока.НомерВходящегоДокумента);
			
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
		Проводка.Содержание = СодержаниеПроводки;
		
	КонецЦикла;
	
	// Списание затрат
	
	СчетЗатрат = Реквизиты.СчетЗатрат;
	СвойстваСчетЗатрат = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатрат);
	
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;

	СодержаниеПроводки   = НСтр("ru='Расход топлива по %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	Проводка.Содержание  = СтрШаблон(СодержаниеПроводки, Реквизиты.ТранспортноеСредство);
	
	// Дт
	Проводка.СчетДт = СчетЗатрат;
	
	Для НомерСубконто = 1 По 3 Цикл
		
		Субконто    = СтрШаблон("Субконто%1", НомерСубконто);
		ВидСубконто = СтрШаблон("ВидСубконто%1", НомерСубконто);
		
		Если СвойстваСчетЗатрат[ВидСубконто] <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				СвойстваСчетЗатрат[ВидСубконто], Реквизиты[Субконто]);
		КонецЕсли;
		
	КонецЦикла;
	
	// Кт
	Проводка.КоличествоКт = Реквизиты.КоличествоРасход;
	Проводка.СчетКт       = СчетТопливо;
	
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
		ВидСубконтоНоменклатура, Реквизиты.Номенклатура);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
		ВидСубконтоТранспортныеСредства, Реквизиты.ТранспортноеСредство);
	
	БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.ПодразделениеЗатрат, Реквизиты.Подразделение);
	
КонецПроцедуры

// Возвращает структуру с создаными таблицами значений
// с предопределенными колонками, которые необходимы для проведения по БУ.
//
// Параметры:
//   КупленноеТопливо - ТаблицаЗначений
//   ТаблицаРеквизиты - ТаблицаЗначений
//
// Возвращаемое значение:
//    Структура с ключами
//       * КупленноеТопливо - ТаблицаЗначений
//       * ТаблицаРеквизиты - ТаблицаЗначений
//
Функция ПодготовитьПараметрыПоступлениеКупленногоТоплива(КупленноеТопливо, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТоварыУслуги

	КолонкиТаблицы = Новый Массив;
	КолонкиТаблицы.Добавить("Ссылка");                  // <ДокументСсылка.ПутевойЛист>
	КолонкиТаблицы.Добавить("НомерСтроки");             // <Число> - номер строки в списке
	КолонкиТаблицы.Добавить("Количество");              // <Число,7,3> - количество купленного топлива
	КолонкиТаблицы.Добавить("Сумма");                   // <Число,15,2> - сумма в рублях
	КолонкиТаблицы.Добавить("НомерВходящегоДокумента"); // <Строка,30> - номер документа покупки топлива
	КолонкиТаблицы.Добавить("ДатаВходящегоДокумента");  // <Дата> - дата покупки топлива
	КолонкиТаблицы.Добавить("ВидВходящегоДокумента");   // <ПеречислениеСсылка.ВидыДокументовПриобретенияГСМ>

	Параметры.Вставить("КупленноеТопливо", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		КупленноеТопливо, СтрСоединить(КолонкиТаблицы, ",")));
	
	// Подготовка таблицы Параметры.Реквизиты

	КолонкиТаблицы = Новый Массив;
	КолонкиТаблицы.Добавить("Период");               // <Дата> - дата документа
	КолонкиТаблицы.Добавить("Организация");          // <СправочникСсылка.Организация> - организация, для которой используется транспорт в служебных целях
	КолонкиТаблицы.Добавить("Подразделение");        // <СправочникСсылка.ПодразделенияОрганизации> - подразделение
	КолонкиТаблицы.Добавить("Номенклатура");         // <СправочникСсылка.Номенклатура> - закупленное топливо
	КолонкиТаблицы.Добавить("ТранспортноеСредство"); // <СправочникСсылка.ТранспортныеСредства>
	КолонкиТаблицы.Добавить("ФизЛицо");              // <СправочникСсылка.ФизическиеЛица> - водитель транспортного средства
	КолонкиТаблицы.Добавить("СчетЗатрат");           // <ПланСчетовСсылка.Хозрасчетный> - счет затрат
	КолонкиТаблицы.Добавить("Субконто1");            // <Характеристика.ВидыСубконтоХозрасчетные> - аналитика счета затрат
	КолонкиТаблицы.Добавить("Субконто2");            // <Характеристика.ВидыСубконтоХозрасчетные> - аналитика счета затрат
	КолонкиТаблицы.Добавить("Субконто3");            // <Характеристика.ВидыСубконтоХозрасчетные> - аналитика счета затрат
	КолонкиТаблицы.Добавить("КоличествоРасход");     // <Число,7,3> - количество купленного топлива
	КолонкиТаблицы.Добавить("ПодразделениеЗатрат");  // <СправочникСсылка.ПодразделенияОрганизаций> - подразделение затрат
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СтрСоединить(КолонкиТаблицы, ",")));

	Возврат Параметры;

КонецФункции

// Возвращает структуру с создаными редопределенными колонками, которые необходимы для проведения по БУ.
//
// Параметры:
//   ТаблицаРеквизиты - ТаблицаЗначений
//
// Возвращаемое значение:
//    Структура
//
Функция ПодготовитьПараметрыПоступлениеПоТопливнымКартам(ТаблицаРеквизиты, ПриобретениеТоплива)
	
	// Подготовка таблицы Параметры.Реквизиты

	КолонкиТаблицы = Новый Массив;
	КолонкиТаблицы.Добавить("Период");               // <Дата> - дата документа
	КолонкиТаблицы.Добавить("Организация");          // <СправочникСсылка.Организация> - организация, для которой используется транспорт в служебных целях
	КолонкиТаблицы.Добавить("ВалютаВзаиморасчетов"); // <СправочникСсылка.Валюты> - валюта документа
	КолонкиТаблицы.Добавить("Подразделение");        // <СправочникСсылка.ПодразделенияОрганизаций> - подразделение
	
	НаименованияКолонок = СтрСоединить(КолонкиТаблицы, ",");
	ТаблицаПроведения   = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, НаименованияКолонок);
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Реквизиты", ТаблицаПроведения);
	
	КолонкиТаблицы = Новый Массив;
	КолонкиТаблицы.Добавить("СчетУчета");            // <ПланСчетовСсылка.Хозрасчетный>
	КолонкиТаблицы.Добавить("КорСчет");              // <ПланСчетовСсылка.Хозрасчетный>
	КолонкиТаблицы.Добавить("ВидКорСубконто1");      // <ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные>
	КолонкиТаблицы.Добавить("ВидКорСубконто2");      // <ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные>
	КолонкиТаблицы.Добавить("ВидКорСубконто3");      // <ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные>
	КолонкиТаблицы.Добавить("КорСубконто1");         // <Характеристика.ВидыСубконтоХозрасчетные>
	КолонкиТаблицы.Добавить("КорСубконто2");         // <Характеристика.ВидыСубконтоХозрасчетные>
	КолонкиТаблицы.Добавить("КорСубконто3");         // <Характеристика.ВидыСубконтоХозрасчетные>
	КолонкиТаблицы.Добавить("Номенклатура");         // <СправочникСсылка.Номенклатура>
	КолонкиТаблицы.Добавить("ТранспортноеСредство"); // <СправочникСсылка.ТранспортныеСредства>
	КолонкиТаблицы.Добавить("Количество");           // Число
	КолонкиТаблицы.Добавить("СуммаБУ");              // Число
	КолонкиТаблицы.Добавить("СуммаВзаиморасчетов");  // Число
	КолонкиТаблицы.Добавить("СуммаНУ");              // Число
	КолонкиТаблицы.Добавить("Содержание");           // Строка
	
	НаименованияКолонок = СтрСоединить(КолонкиТаблицы, ",");
	ТаблицаПроведения   = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ПриобретениеТоплива, НаименованияКолонок);
	
	СтруктураРезультат.Вставить("ПриобретениеТоплива", ТаблицаПроведения);
	
	Возврат СтруктураРезультат;
	
КонецФункции

// ПОСТУПЛЕНИЕ ЗАКУПЛЕННЫХ ТОВАРОВ И УСЛУГ КОМИТЕНТОВ

Процедура СформироватьДвиженияПоступлениеЗакупленныхТоваровУслугКомитентов(ТаблицаТоварыУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТоварыУслуги) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеЗакупленныхТоваровУслугКомитентов(ТаблицаТоварыУслуги, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	// Проводки по 002 счету - только для товаров
	
	Параметры.ТоварыУслуги.Индексы.Добавить("ЭтоУслуга");
	Товары = Параметры.ТоварыУслуги.Скопировать(Новый Структура("ЭтоУслуга", Ложь));
	СформироватьПроводкиПоступлениеНаХранение(Товары, Реквизиты, Движения, Отказ);

	// В регистре закупленных товаров комитентов отражаются и товары, и услуги
	
	Для каждого СтрокаТаблицы Из Параметры.ТоварыУслуги Цикл
		
		Движение = Движения.ЗакупленныеТоварыКомитентов.Добавить();

		Движение.Период      = Реквизиты.Период;
		Движение.Организация = Реквизиты.Организация;
		Движение.Контрагент = СтрокаТаблицы.Комитент;
		Движение.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКомитента;
		Движение.Номенклатура = СтрокаТаблицы.Номенклатура;
		Движение.Партия = СтрокаТаблицы.ДокументРасчетовКомитента;
		
		Движение.Количество = СтрокаТаблицы.Количество;
		Движение.Сумма      = СтрокаТаблицы.СуммаВзаиморасчетовКомитент;
		Движение.СуммаНДС   = СтрокаТаблицы.СуммаНДСВзаиморасчетовКомитент;

	КонецЦикла;

	Движения.ЗакупленныеТоварыКомитентов.Записывать = Истина;

КонецПроцедуры

// ОПРИХОДОВАНИЕ ТОВАРОВ

Процедура СформироватьДвиженияОприходованиеТоваров(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОприходованиеТоваров(ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиМПЗ         = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям    = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДСВРознице);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяПрочихДоходовРасходов);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.Сумма;

		Если ОтражатьВНалоговомУчете
			И ЗначениеЗаполнено(Реквизиты.ИнвентаризацияТоваровНаСкладе) Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.Сумма;
				Проводка.СуммаПРДт = 0;
				Проводка.СуммаВРДт = 0;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.Сумма;
				Проводка.СуммаПРКт = 0;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// НАЧИСЛЕНИЕ ТОРГОВОЙ НАЦЕНКИ ПРИ ПОСТУПЛЕНИИ ТОВАРОВ

Процедура СформироватьДвиженияНачислениеТорговойНаценкиПоступлениеТоваров(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаТовары) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
		Возврат;
	КонецЕсли;

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	Если СпособОценкиТоваровВРознице <> Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеТорговойНаценкиПоступлениеТоваров(ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];	

	СпособОценкиМПЗ            = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям       = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	РаздельныйУчетНДСнаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	МассивНоменклатуры = Параметры.ТаблицаТовары.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатуры = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	ПараметрыРозничныхЦен = Новый Структура;
	ПараметрыРозничныхЦен.Вставить("Период", Реквизиты.Период);
	ПараметрыРозничныхЦен.Вставить("ТипЦен", Реквизиты.ТипЦенРозничнойТорговли);
	ПараметрыРозничныхЦен.Вставить("Валюта", ВалютаРегламентированногоУчета);
	ПараметрыРозничныхЦен.Вставить("Курс", 1);
	ПараметрыРозничныхЦен.Вставить("Кратность", 1);
	ПараметрыРозничныхЦен.Вставить("Номенклатура", МассивНоменклатуры);
	СоответствиеРозничныхЦен = БухгалтерскийУчетПереопределяемый.ПодготовитьСоответствиеНоменклатураЦена(ПараметрыРозничныхЦен);

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл

		Если Реквизиты.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда

			РозничнаяЦена = СоответствиеРозничныхЦен[СтрокаТаблицы.Номенклатура];
			РозничнаяЦена = ?(РозничнаяЦена = Неопределено, 0, РозничнаяЦена);

			ТорговаяНаценка = РозничнаяЦена * СтрокаТаблицы.Количество - СтрокаТаблицы.СуммаБУ;
			СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;

		Иначе

			ТорговаяНаценка = СтрокаТаблицы.СуммаВРознице - СтрокаТаблицы.СуммаБУ;
			СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;

		КонецЕсли;
		
		Если РаздельныйУчетНДСнаСчете19 
			И СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости Тогда
			ТорговаяНаценка = ТорговаяНаценка - СтрокаТаблицы.СуммаНДСРуб;
		КонецЕсли;

		Если ТорговаяНаценка <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;

			Проводка.Содержание = СокрЛП(СтрокаТаблицы.Содержание);

			Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДСВРознице);
			Если ВедетсяУчетПоПартиям Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
			КонецЕсли;

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.СчетКт = СчетНаценки;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", Реквизиты.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДСВРознице);
			Если ВедетсяУчетПоПартиям Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", Реквизиты.Регистратор);
			КонецЕсли;

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.Сумма = ТорговаяНаценка;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// НАЧИСЛЕНИЕ ТОРГОВОЙ НАЦЕНКИ ПРИ ПЕРЕМЕЩЕНИИ ТОВАРОВ

Процедура СформироватьДвиженияНачислениеТорговойНаценкиПеремещениеТоваров(ТаблицаТовары, ТаблицаСписанныеТовары,
	ТаблицаРеквизиты, СписанныеПартииНДС, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаСписанныеТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Реквизиты.ТипСкладаПолучателя = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
		Возврат;
	КонецЕсли;

	Если Реквизиты.ТипСкладаОтправителя = Перечисления.ТипыСкладов.РозничныйМагазин
	   И Реквизиты.ТипСкладаПолучателя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		Возврат;
	КонецЕсли;

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	Если СпособОценкиТоваровВРознице <> Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыНачислениеТорговойНаценкиПеремещениеТоваров(
		ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);

	ТаблицаСписанныеТовары.Индексы.Добавить("ИмяСписка, НомерСтроки");

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	МассивНоменклатуры = Параметры.ТаблицаТовары.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатуры = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	ПараметрыРозничныхЦен = Новый Структура;
	ПараметрыРозничныхЦен.Вставить("Период", Реквизиты.Период);
	ПараметрыРозничныхЦен.Вставить("ТипЦен", Реквизиты.ТипЦенРозничнойТорговли);
	ПараметрыРозничныхЦен.Вставить("Валюта", ВалютаРегламентированногоУчета);
	ПараметрыРозничныхЦен.Вставить("Курс", 1);
	ПараметрыРозничныхЦен.Вставить("Кратность", 1);
	ПараметрыРозничныхЦен.Вставить("Номенклатура", МассивНоменклатуры);
	СоответствиеРозничныхЦен = БухгалтерскийУчетПереопределяемый.ПодготовитьСоответствиеНоменклатураЦена(ПараметрыРозничныхЦен);

	ТаблицаТорговаяНаценка = Новый ТаблицаЗначений;
	ТаблицаТорговаяНаценка.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТорговаяНаценка.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТорговаяНаценка.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	ТаблицаТорговаяНаценка.Колонки.Добавить("СтавкаНДСВРознице", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТорговаяНаценка.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаТорговаяНаценка.Колонки.Добавить("СчетНаценки", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаТорговаяНаценка.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаТорговаяНаценка.Колонки.Добавить("СуммаНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаТорговаяНаценка.Колонки.Добавить("СуммаПР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаТорговаяНаценка.Колонки.Добавить("СуммаВР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаТорговаяНаценка.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИмяСписка", "Товары");
		ПараметрыОтбора.Вставить("НомерСтроки", СтрокаТаблицы.НомерСтроки);
		ТаблицаПартий = Параметры.ТаблицаСписанныеТовары.Скопировать(ПараметрыОтбора);

		Если Реквизиты.ТипСкладаПолучателя = Перечисления.ТипыСкладов.РозничныйМагазин Тогда // АТТ
			
			Для каждого СтрокаТаблицыПартий Из ТаблицаПартий Цикл
				
				КоррНДС = 0;
				Если СписанныеПартииНДС.Количество() > 0 Тогда
					Если РаздельныйУчетНДСНаСчете19 Тогда
						
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("НомерСтрокиДокумента", СтрокаТаблицы.НомерСтроки);
						СтруктураОтбора.Вставить("НовыйСпособУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
						СтруктураОтбора.Вставить("СпособУчетаНДСИзменился", Истина);
						Если СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней Тогда
							СтруктураОтбора.Вставить("Партия", СтрокаТаблицыПартий.Партия);
						КонецЕсли;						
						СтрокаНДС = СписанныеПартииНДС.НайтиСтроки(СтруктураОтбора);
						Для Каждого ПартияНДС Из СтрокаНДС Цикл
							КоррНДС = КоррНДС + ПартияНДС.НДС - ПартияНДС.НДСПринятоКВычету;
						КонецЦикла;
						
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("НомерСтрокиДокумента", СтрокаТаблицы.НомерСтроки);
						СтруктураОтбора.Вставить("НовыйСпособУчетаНДС", Перечисления.СпособыУчетаНДС.Распределен);
						СтруктураОтбора.Вставить("СпособУчетаНДСИзменился", Истина);
						Если СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней Тогда
							СтруктураОтбора.Вставить("Партия", СтрокаТаблицыПартий.Партия);
						КонецЕсли;						
						СтрокаНДС = СписанныеПартииНДС.НайтиСтроки(СтруктураОтбора);
						Для Каждого ПартияНДС Из СтрокаНДС Цикл
							
							Если ПартияНДС.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости Тогда
								Продолжить;
							КонецЕсли;
 							КоррНДС = КоррНДС + ПартияНДС.НДСУчитываетсяВCтоимости 
								- Макс(ПартияНДС.НДСПринятоКВычету - ПартияНДС.НДСДляОперацийПо0, 0);
								
						КонецЦикла;
						
					ИначеЕсли Реквизиты.ВключитьНДСвСтоимостьТоваров Тогда
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("НомерСтрокиДокумента", СтрокаТаблицы.НомерСтроки);
						Если СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней Тогда
							СтруктураОтбора.Вставить("Партия", СтрокаТаблицыПартий.Партия);
						КонецЕсли;						
						СтрокаНДС = СписанныеПартииНДС.НайтиСтроки(СтруктураОтбора);
						Для Каждого ПартияНДС Из СтрокаНДС Цикл
							КоррНДС = КоррНДС + ПартияНДС.НДС - ПартияНДС.НДССписанияНаРасходы;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				РозничнаяЦена = СоответствиеРозничныхЦен[СтрокаТаблицы.Номенклатура];
				РозничнаяЦена = ?(РозничнаяЦена = Неопределено, 0, РозничнаяЦена);
				
				ТорговаяНаценка = РозничнаяЦена * СтрокаТаблицыПартий.Количество - (СтрокаТаблицыПартий.СуммаСписания + КоррНДС);
				ТорговаяНаценкаНУ = РозничнаяЦена * СтрокаТаблицыПартий.Количество - (СтрокаТаблицыПартий.СуммаСписанияНУ + КоррНДС);
				
				Если ТорговаяНаценка = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаТорговаяНаценка.Добавить();
				НоваяСтрока.Номенклатура       = СтрокаТаблицыПартий.Номенклатура;
				НоваяСтрока.Склад              = СтрокаТаблицыПартий.Склад;
				НоваяСтрока.Партия             = СтрокаТаблицыПартий.Партия;
				НоваяСтрока.СтавкаНДСВРознице  = СтрокаТаблицы.СтавкаНДСВРознице;
				НоваяСтрока.СчетУчета          = СтрокаТаблицы.НовыйСчетУчета;
				НоваяСтрока.СчетНаценки        = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				НоваяСтрока.Сумма              = ТорговаяНаценка;
				НоваяСтрока.СуммаНУ            = ТорговаяНаценкаНУ;
				НоваяСтрока.СуммаПР            = -СтрокаТаблицыПартий.СуммаСписанияПР;
				НоваяСтрока.СуммаВР            = -СтрокаТаблицыПартий.СуммаСписанияВР;
				НоваяСтрока.Содержание = ?(Реквизиты.ТипСкладаОтправителя = Реквизиты.ТипСкладаПолучателя,
				"Переоценка товаров",
				СтрокаТаблицыПартий.Содержание);
				
			КонецЦикла;
			
		Иначе // НТТ

			Сумма = 0;
			СуммаНУ = 0;
			СуммаПР = 0;
			СуммаВР = 0;

			Для каждого СтрокаТаблицыПартий Из ТаблицаПартий Цикл

				Сумма = Сумма + СтрокаТаблицыПартий.СуммаСписания;
				СуммаНУ = СуммаНУ + СтрокаТаблицыПартий.СуммаСписанияНУ;
				СуммаПР = СуммаПР + СтрокаТаблицыПартий.СуммаСписанияПР;
				СуммаВР = СуммаВР + СтрокаТаблицыПартий.СуммаСписанияВР;

			КонецЦикла;

			КоррНДС = 0;
			Если СписанныеПартииНДС.Количество() > 0 Тогда
				Если РаздельныйУчетНДСНаСчете19 Тогда
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("НомерСтрокиДокумента", СтрокаТаблицы.НомерСтроки);
					СтруктураОтбора.Вставить("НовыйСпособУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
					СтруктураОтбора.Вставить("СпособУчетаНДСИзменился", Истина);
					СтрокаНДС = СписанныеПартииНДС.НайтиСтроки(СтруктураОтбора);
					Для Каждого ПартияНДС Из СтрокаНДС Цикл
						КоррНДС = КоррНДС + ПартияНДС.НДС - ПартияНДС.НДСПринятоКВычету;
					КонецЦикла;
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("НомерСтрокиДокумента", СтрокаТаблицы.НомерСтроки);
					СтруктураОтбора.Вставить("НовыйСпособУчетаНДС", Перечисления.СпособыУчетаНДС.Распределен);
					СтруктураОтбора.Вставить("СпособУчетаНДСИзменился", Истина);
					СтрокаНДС = СписанныеПартииНДС.НайтиСтроки(СтруктураОтбора);
					Для Каждого ПартияНДС Из СтрокаНДС Цикл
						
						Если ПартияНДС.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости Тогда
							Продолжить;
						КонецЕсли;
 						КоррНДС = КоррНДС + ПартияНДС.НДСУчитываетсяВCтоимости 
							- Макс(ПартияНДС.НДСПринятоКВычету - ПартияНДС.НДСДляОперацийПо0, 0);
							
					КонецЦикла;
					
				ИначеЕсли Реквизиты.ВключитьНДСвСтоимостьТоваров Тогда
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("НомерСтрокиДокумента", СтрокаТаблицы.НомерСтроки);
					
					СтрокаНДС = СписанныеПартииНДС.НайтиСтроки(СтруктураОтбора);
					Для Каждого ПартияНДС Из СтрокаНДС Цикл
						КоррНДС = КоррНДС + ПартияНДС.НДС - ПартияНДС.НДССписанияНаРасходы;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
				
			ТорговаяНаценка = СтрокаТаблицы.СуммаВРознице - (Сумма + КоррНДС);
			ТорговаяНаценкаНУ = СтрокаТаблицы.СуммаВРознице - (СуммаНУ + КоррНДС);

			Если ТорговаяНаценка = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблицаТорговаяНаценка.Добавить();
			НоваяСтрока.Номенклатура       = СтрокаТаблицыПартий.Номенклатура;
			НоваяСтрока.Склад              = СтрокаТаблицыПартий.Склад;
			НоваяСтрока.Партия             = Неопределено;
			НоваяСтрока.СтавкаНДСВРознице  = СтрокаТаблицы.СтавкаНДСВРознице;
			НоваяСтрока.СчетУчета          = СтрокаТаблицы.НовыйСчетУчета;
			НоваяСтрока.СчетНаценки        = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
			НоваяСтрока.Сумма              = ТорговаяНаценка;
			НоваяСтрока.СуммаНУ            = ТорговаяНаценкаНУ;
			НоваяСтрока.СуммаПР            = -СуммаПР;
			НоваяСтрока.СуммаВР            = -СуммаВР;
			НоваяСтрока.Содержание = ?(Реквизиты.ТипСкладаОтправителя = Реквизиты.ТипСкладаПолучателя,
				"Переоценка товаров",
				СтрокаТаблицыПартий.Содержание);

		КонецЕсли;

	КонецЦикла;

	ПараметрыДвижений = Новый Структура;
	ПараметрыДвижений.Вставить("Период", Реквизиты.Период);
	ПараметрыДвижений.Вставить("Организация", Реквизиты.Организация);
	ПараметрыДвижений.Вставить("Подразделение", Реквизиты.Подразделение);
	ПараметрыДвижений.Вставить("Склад", Реквизиты.СкладПолучатель);
	ПараметрыДвижений.Вставить("ТипСклада", Реквизиты.ТипСкладаПолучателя);
	ПараметрыДвижений.Вставить("ТипЦенРозничнойТорговли", Реквизиты.ТипЦенРозничнойТорговли);
	ПараметрыДвижений.Вставить("ТаблицаТорговаяНаценка", ТаблицаТорговаяНаценка);
	СформироватьДвиженияТорговаяНаценка(ПараметрыДвижений, Движения, Отказ);

КонецПроцедуры

// СПИСАНИЕ ТОРГОВОЙ НАЦЕНКИ В АТТ

Процедура СформироватьДвиженияСписаниеТорговойНаценкиАТТ(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаСписанныеТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	Если Реквизиты.ТипСклада <> Перечисления.ТипыСкладов.РозничныйМагазин
	 Или Не УчетВПродажныхЦенах Тогда // Не АТТ в ценах продажи
		Возврат;
	КонецЕсли;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	Если СпособОценкиТоваровВРознице <> Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписаниеТорговойНаценкиАТТ(ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаСписанныеТовары Цикл

		Если СтрокаТаблицы.СуммаНаценки <> 0
		 ИЛИ (ОтражатьВНалоговомУчете
				 И (СтрокаТаблицы.СуммаНаценкиНУ <> 0
					ИЛИ СтрокаТаблицы.СуммаНаценкиПР <> 0
					ИЛИ СтрокаТаблицы.СуммаНаценкиВР <> 0)) Тогда

			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

			Проводка.СчетДт = СтрокаТаблицы.КорСчетСписания;

			Для НомерСубконто = 1 По 3 Цикл
				ВидСубконто = СтрокаТаблицы["ВидКорСубконто" + НомерСубконто];
				Если НЕ ВедетсяУчетПоПартиям И ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
					Продолжить;
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					ВидСубконто, СтрокаТаблицы["КорСубконто" + НомерСубконто]);
			КонецЦикла;
			Если ВедетсяУчетПоПартиям Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаТаблицы.Партия);
			КонецЕсли;

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.КорПодразделение;
			КонецЕсли;

			Проводка.СчетКт = СчетНаценки;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаТаблицы.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаТаблицы.Партия);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;

			Проводка.Сумма = -СтрокаТаблицы.СуммаНаценки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = -СтрокаТаблицы.СуммаНаценкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = -СтрокаТаблицы.СуммаНаценкиПР;
						Проводка.СуммаВРДт = -СтрокаТаблицы.СуммаНаценкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = -СтрокаТаблицы.СуммаНаценкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = -СтрокаТаблицы.СуммаНаценкиПР;
						Проводка.СуммаВРКт = -СтрокаТаблицы.СуммаНаценкиВР;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры


// СПИСАНИЕ ТОВАРОВ И ТОРГОВОЙ НАЦЕНКИ ИЗ НТТ

Процедура СформироватьДвиженияСписаниеТоваровНТТ(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписаниеТоваровНТТ(ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	РазделятьПоСтавкамНДС = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;

	СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл

		Сумма = СтрокаТаблицы.Сумма;

		// Списание товаров
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.КорСчетСписания;

		Для НомерСубконто = 1 По 3 Цикл
			ВидСубконто = СтрокаТаблицы["ВидКорСубконто" + НомерСубконто];
			Если НЕ ВедетсяУчетПоПартиям И ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Продолжить;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				ВидСубконто, СтрокаТаблицы["КорСубконто" + НомерСубконто]);
		КонецЦикла;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДСВРознице);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Реквизиты.Регистратор);
		КонецЕсли;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.КорПодразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт = СтрокаТаблицы.Валюта;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ВалютнаяСумма;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  Реквизиты.Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДСВРознице);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = Сумма;
		
		Если СтрокаТаблицы.СуммаНаценки <> 0
		 ИЛИ (ОтражатьВНалоговомУчете
				 И (СтрокаТаблицы.СуммаНаценкиНУ <> 0
					ИЛИ СтрокаТаблицы.СуммаНаценкиПР <> 0
					ИЛИ СтрокаТаблицы.СуммаНаценкиВР <> 0)) Тогда

			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
			
			Проводка.СчетДт = СтрокаТаблицы.КорСчетНаценка;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДСВРознице);
			Если ВедетсяУчетПоПартиям Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Реквизиты.Регистратор);
			КонецЕсли;

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.КорПодразделение;
			КонецЕсли;
			
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт = СтрокаТаблицы.Валюта;
				Проводка.ВалютнаяСуммаДт = ?(СтрокаТаблицы.Сумма = 0, 0, - СтрокаТаблицы.ВалютнаяСумма / СтрокаТаблицы.Сумма * СтрокаТаблицы.СуммаНаценки);
			КонецЕсли;
			
			Проводка.СчетКт = СчетНаценки;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", Реквизиты.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДСВРознице);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.Сумма = -СтрокаТаблицы.СуммаНаценки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = -СтрокаТаблицы.СуммаНаценкиНУ;
					Проводка.СуммаПРДт = -СтрокаТаблицы.СуммаНаценкиПР;
					Проводка.СуммаВРДт = -СтрокаТаблицы.СуммаНаценкиВР;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = -СтрокаТаблицы.СуммаНаценкиНУ;
					Проводка.СуммаПРКт = -СтрокаТаблицы.СуммаНаценкиПР;
					Проводка.СуммаВРКт = -СтрокаТаблицы.СуммаНаценкиВР;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// ПОСТУПЛЕНИЕ ТОВАРОВ НА КОМИССИЮ

Процедура СформироватьДвиженияПоступлениеТоваровНаКомиссию(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеТоваровНаКомиссию(ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаРуб;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// ПОСТУПЛЕНИЕ МАТЕРИАЛОВ В ПЕРЕРАБОТКУ

Процедура СформироватьДвиженияПоступлениеМатериаловВПереработку(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеМатериаловВПереработку(ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаРуб;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// КОМПЛЕКТАЦИЯ

Функция ПодготовитьТаблицуКомплектующихКомплектация(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыКомплектующихКомплектация(ТаблицаСписанныеТовары, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаКомплектующие = Параметры.ТаблицаСписанныеТовары.Скопировать();
	ТаблицаКомплектующие.Колонки.Добавить("КоличествоДт", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));

	Если ТаблицаКомплектующие.Количество() = 0 Тогда
		Возврат ТаблицаКомплектующие;
	КонецЕсли;

	// Распределим количество комплектов по таблице списания
	КоличествоОсталосьПогасить = ТаблицаКомплектующие.Итог("Количество");

	КоличествоОсталосьПогаситьДт = Реквизиты.КоличествоКомплектов;

	Для Каждого СтрокаКомплектующей Из ТаблицаКомплектующие Цикл

		Если СтрокаКомплектующей.Количество = КоличествоОсталосьПогасить Тогда
			СтрокаКомплектующей.КоличествоДт = КоличествоОсталосьПогаситьДт;
		Иначе
			СтрокаКомплектующей.КоличествоДт = КоличествоОсталосьПогаситьДт * СтрокаКомплектующей.Количество
			/ КоличествоОсталосьПогасить;
		КонецЕсли;
		КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СтрокаКомплектующей.Количество;
		КоличествоОсталосьПогаситьДт = КоличествоОсталосьПогаситьДт - СтрокаКомплектующей.КоличествоДт;

	КонецЦикла;

	Возврат ТаблицаКомплектующие;

КонецФункции

// КОРРЕКТИРОВКА ПОСТУПЛЕНИЯ

Процедура СформироватьДвиженияКорректировкиПоступленияТоваров(РеквизитыДокумента, ТаблицаПоТоварам, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПоТоварам)
	 Или Не ЗначениеЗаполнено(РеквизитыДокумента) Тогда
	    Возврат;
	КонецЕсли;
	
	
	Параметры = ПолучитьРеквизитыКорректировкиПоступленияТоваров(РеквизитыДокумента);
	Реквизиты = Параметры.Реквизиты[0];

	СокращеннаяАналитика = Реквизиты.СокращеннаяАналитика;
	СокращеннаяАналитикаНаДатуДокументаПоступления = 
		УчетНДСРаздельный.СокращеннаяАналитика(Реквизиты.ДокументПоступленияДата);
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		
		УчетНДСРаздельный.ОпределитьСуммыДляРаспределенияНДСКорректировкаПоступления(ТаблицаПоТоварам, Реквизиты, Отказ);
		ТаблицаКоэффициентов = Новый ТаблицаЗначений;
		
		ДвиженияНДСРаздельныйУчет = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСРаздельныйУчет");
		
		ДвиженияНДСПредъявленныйРеализация0 = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПредъявленныйРеализация0");
		ДвиженияНДСПредъявленныйРеализация0.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
		
	Иначе
		
		ТаблицаКоэффициентов = УчетНДСБП.ПодготовитьТаблицуКоэффициентовКорректировкиПоступления(Реквизиты);
		
	КонецЕсли;
	
	АТТ = Реквизиты.РозницаВПродажныхЦенах И Реквизиты.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
	НТТ = Реквизиты.РозницаВПродажныхЦенах И Реквизиты.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	МассивСчетовДляГТД = УчетНДСВызовСервераПовтИсп.СчетаУчетаДляГТД();
	
	Для Каждого СтрокаТовары Из ТаблицаПоТоварам Цикл
		
		СуммаНДССписанного = 0;
		СуммаНДССписанногоВал = 0;
		СуммаНДС0 = 0;
		
		Если НЕ СтрокаТовары.СчетУчетаЗабалансовый Тогда
			ДвиженияРегистровПодсистемыНДСБУ(
				Реквизиты, СтрокаТовары, ТаблицаКоэффициентов, СуммаНДССписанного, СуммаНДССписанногоВал, СуммаНДС0, Движения, Отказ);
		КонецЕсли;
				
		СписатьПоСтрКоличество = СтрокаТовары.Количество - СтрокаТовары.КоличествоДоИзменения;
		СписатьПоСтрНДС        = СтрокаТовары.СуммаНДСРуб - СтрокаТовары.СуммаНДСРубДоИзменения;
		СписатьПоСтрНаценка    = СтрокаТовары.СуммаВРознице - СтрокаТовары.СуммаВРозницеДоИзменения;
		
		Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
			СписатьПоСтрСуммаБУ    = СтрокаТовары.СуммаБУ - СтрокаТовары.СуммаБУДоИзменения;
			СписатьПоСтрСуммаНУ    = СтрокаТовары.СуммаНУ - СтрокаТовары.СуммаНУДоИзменения;
			СписатьПоСтрСуммаВал   = (СтрокаТовары.СуммаВзаиморасчетов - СтрокаТовары.СуммаВзаиморасчетовДоИзменения) 
				- (СтрокаТовары.СуммаНДСВзаиморасчетов - СтрокаТовары.СуммаНДСВзаиморасчетовДоИзменения);
		Иначе
			СписатьПоСтрСуммаБУ    = СтрокаТовары.СуммаБУ - СтрокаТовары.СуммаБУДоИзменения + СуммаНДССписанного;
			СписатьПоСтрСуммаНУ    = СтрокаТовары.СуммаНУ - СтрокаТовары.СуммаНУДоИзменения + СуммаНДССписанного;
			СписатьПоСтрСуммаВал   = (СтрокаТовары.СуммаВзаиморасчетов - СтрокаТовары.СуммаВзаиморасчетовДоИзменения) 
				- (СтрокаТовары.СуммаНДСВзаиморасчетов - СтрокаТовары.СуммаНДСВзаиморасчетовДоИзменения) + СуммаНДССписанногоВал;
		КонецЕсли;	
		
		// Коэффициенты применяются последовательно - каждый следующий коэффициент применяется
		// к тому, что осталось от списания по предыдущему коэффициенту
		
		ПоступлениеТекущегоМесяца = НачалоМесяца(Реквизиты.ДокументПоступленияДата) = НачалоМесяца(Реквизиты.Период);
		ПоступлениеТекущегоГода = Год(Реквизиты.ДокументПоступленияДата) = Год(Реквизиты.Период);
		
		КоличествоНачалоМесяца = ?(ПоступлениеТекущегоМесяца, 0, Макс(СтрокаТовары.КоличествоНачалоМесяца, 0));
		КоличествоНачалоГода = ?(ПоступлениеТекущегоМесяца, 0, Макс(СтрокаТовары.КоличествоНачалоГода, 0));
		
		// Коэффициент текущего месяца
		Коэффициент1 = ?(СписатьПоСтрКоличество <> 0 ИЛИ ПоступлениеТекущегоМесяца ИЛИ СтрокаТовары.СчетУчетаЗабалансовый,
			1,
			?(СтрокаТовары.КоличествоДоИзменения <> 0,
				Мин(?(ПоступлениеТекущегоГода,
					КоличествоНачалоМесяца,
					Мин(КоличествоНачалоМесяца, КоличествоНачалоГода)) / СтрокаТовары.КоличествоДоИзменения, 1),
				1));
		// Коэффициент текущего года
		Коэффициент2 = ?(ПоступлениеТекущегоГода,
			1,
			?(СтрокаТовары.КоличествоДоИзменения - КоличествоНачалоМесяца <> 0,
				Мин((КоличествоНачалоГода - Мин(КоличествоНачалоМесяца, КоличествоНачалоГода)) / (СтрокаТовары.КоличествоДоИзменения - КоличествоНачалоМесяца), 1),
				1));
		// Коэффициент прошлого года
		Коэффициент3 = 1;

		Если Коэффициент1 <> 0 Тогда
			СтрКоличество = Окр(Коэффициент1*СписатьПоСтрКоличество,3,1);
			СтрСуммаБУ    = Окр(Коэффициент1*СписатьПоСтрСуммаБУ,2,1);
			СтрНДС        = Окр(Коэффициент1*СписатьПоСтрНДС,2,1);
			СтрСуммаВал   = Окр(Коэффициент1*СписатьПоСтрСуммаВал,2,1);
			СтрСуммаНУ    = Окр(Коэффициент1*СписатьПоСтрСуммаНУ,2,1);
			СтрНаценка    = Окр(Коэффициент1*СписатьПоСтрНаценка,2,1);
			
			СписатьПоСтрКоличество = СписатьПоСтрКоличество - СтрКоличество;
			СписатьПоСтрСуммаБУ    = СписатьПоСтрСуммаБУ - СтрСуммаБУ;
			СписатьПоСтрНДС        = СписатьПоСтрНДС - СтрНДС;
			СписатьПоСтрСуммаВал   = СписатьПоСтрСуммаВал - СтрСуммаВал;
			СписатьПоСтрСуммаНУ    = СписатьПоСтрСуммаНУ - СтрСуммаНУ;
			СписатьПоСтрНаценка    = СписатьПоСтрНаценка - СтрНаценка;
			
			Если СтрокаТовары.СчетУчетаЗабалансовый Тогда
				СтрКоличество 	= СтрокаТовары.КоличествоЗабалансВПроводку;
				СтрСуммаБУ		= СтрокаТовары.СуммаБУЗабалансВПроводку;
				СтрНДС			= 0;
				СтрСуммаВал		= 0;
				СтрСуммаНУ		= 0;
				СтрНаценка		= 0;
			КонецЕсли;
			
			Если СтрКоличество <> 0 ИЛИ СтрСуммаБУ <> 0 ИЛИ СтрНДС <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				Проводка.Содержание  = "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТовары.СчетУчета)
					+ " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
				
				Проводка.СчетДт       = СтрокаТовары.СчетУчета;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТовары.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады", Реквизиты.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТовары.СтавкаНДСВРознице);
				
				// Для товаров, принятых на комиссию партия прописывается всегда 
				Если Реквизиты.ВестиПартионныйУчет ИЛИ БухгалтерскийУчетПовтИсп.СчетУчетаКомиссионногоТовара(СтрокаТовары.СчетУчета) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.ДокументПоступленияСсылка);
				КонецЕсли;
				
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				Если СвойстваСчетаДт.Количественный Тогда
					Проводка.КоличествоДт = СтрКоличество;
				КонецЕсли;
				
				Проводка.Сумма = ?(СвойстваСчетаДт.Забалансовый, СтрСуммаБУ + СтрНДС, СтрСуммаБУ);
				
				// Проверка - вид Операции - комиссия
				Если СвойстваСчетаДт.Забалансовый Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ?(ЗначениеЗаполнено(СтрокаТовары.Комитент), СтрокаТовары.Комитент, Реквизиты.Контрагент));
					Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
						Проводка.ПодразделениеДт = Реквизиты.Подразделение;
					КонецЕсли;
					
				Иначе
					Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
					
					СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
					Если СвойстваСчетаКт.Валютный Тогда
						Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрСуммаВал;
					КонецЕсли;
					
					Если Реквизиты.ОтражатьВНалоговомУчете Тогда
						
						СуммаНУ = СтрСуммаНУ;
						Если СвойстваСчетаДт.НалоговыйУчет Тогда
							Проводка.СуммаНУДт = СуммаНУ;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРДт = СтрСуммаБУ - СуммаНУ;
								Проводка.СуммаВРДт = 0;
							КонецЕсли;
						КонецЕсли;
						
						Если СвойстваСчетаКт.НалоговыйУчет Тогда
							Проводка.СуммаНУКт = СуммаНУ;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРКт = СтрСуммаБУ - СуммаНУ;
								Проводка.СуммаВРКт = 0;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаТовары.Малоценка Тогда
					
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период      = Реквизиты.Период;
					Проводка.Организация = Реквизиты.Организация;
					Проводка.Содержание  = "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТовары.СчетУчета)
					+ " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
					
					Проводка.СчетДт = СтрокаТовары.СчетЗатрат;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТовары.Субконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТовары.Субконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТовары.Субконто3);
					
					СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					
					Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
						Проводка.ПодразделениеДт = СтрокаТовары.ПодразделениеЗатрат;
					КонецЕсли;
					
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТовары.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", Реквизиты.Склад);
					
					Если Реквизиты.ВестиПартионныйУчет Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", Реквизиты.ДокументПоступленияСсылка);
					КонецЕсли;
					
					СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
					
					Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
						Проводка.ПодразделениеКт = Реквизиты.Подразделение;
					КонецЕсли;
					
					Проводка.Сумма = СтрСуммаБУ;

					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = 0;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаВРДт = Проводка.Сумма - Проводка.СуммаНУДт;
							Проводка.СуммаПРДт = 0;
						КонецЕсли;
					КонецЕсли;
										
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = 0;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаВРКт = Проводка.Сумма - Проводка.СуммаНУКт;
							Проводка.СуммаПРКт = 0;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
								
			КонецЕсли;
			
			Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
				
				СтрСуммаНДССписанного = Окр(Коэффициент1*СуммаНДССписанного,2,1);
				СтрСуммаНДССписанногоВал = Окр(Коэффициент1*СуммаНДССписанногоВал,2,1);
				СтрСуммаНДС0 = Окр(Коэффициент1*СуммаНДС0,2,1);
				
				СуммаНДССписанного = СуммаНДССписанного - СтрСуммаНДССписанного;
				СуммаНДССписанногоВал = СуммаНДССписанногоВал - СтрСуммаНДССписанногоВал;
				СуммаНДС0 = СуммаНДС0 - СтрСуммаНДС0;
				
				Если СтрокаТовары.СчетУчетаЗабалансовый Тогда
					СтрСуммаНДССписанного = 0;
				КонецЕсли;
	
				Если СтрСуммаНДССписанного <> 0 Тогда
					
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					Проводка.Содержание	  = НСтр("ru = 'НДС включен в стоимость ценностей'");
					
					Проводка.СчетДт       = СтрокаТовары.СчетУчета;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,
						"Номенклатура", СтрокаТовары.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,
						"Склады", Реквизиты.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						"СтавкиНДС",  СтрокаТовары.СтавкаНДСВРознице);
					
					// Для товаров, принятых на комиссию партия прописывается всегда 
					Если Реквизиты.ВестиПартионныйУчет ИЛИ БухгалтерскийУчетПовтИсп.СчетУчетаКомиссионногоТовара(СтрокаТовары.СчетУчета) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
							"Партии", Реквизиты.ДокументПоступленияСсылка);
					КонецЕсли;
					
					Проводка.Сумма = СтрСуммаНДССписанного;
					
					Проводка.СчетКт = СтрокаТовары.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"СФПолученные", СтрокаТовары.СубконтоСФПолученные);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"Контрагенты",  Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
						
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
					
					Если Реквизиты.ОтражатьВНалоговомУчете Тогда
						
						СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
						Если СвойстваСчетаДт.НалоговыйУчет Тогда
							Проводка.СуммаНУДт = СтрСуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРДт = 0;
								Проводка.СуммаВРДт = 0;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				НТТ = Реквизиты.РозницаВПродажныхЦенах И Реквизиты.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
				
				Если НЕ НТТ И (СтрКоличество <> 0 ИЛИ СтрСуммаБУ <> 0 ИЛИ СтрНДС <> 0)
					И (СокращеннаяАналитика 
					ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
					ИЛИ ТипЗнч(Реквизиты.ИсправляемыйСчетФактура) = Тип("ДокументСсылка.КорректировкаПоступления")) Тогда
					
					АналитикаУчетаЗатрат = Новый Структура("Организация,СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3");
					
					АналитикаУчетаЗатрат.Организация = Реквизиты.Организация;
					АналитикаУчетаЗатрат.СчетЗатрат = СтрокаТовары.СчетУчета;
					Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
						АналитикаУчетаЗатрат.Подразделение = Реквизиты.Подразделение;
					КонецЕсли;
					Для Ном = 1 По СвойстваСчетаДт.КоличествоСубконто Цикл
						Если СвойстваСчетаДт["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
						 	АналитикаУчетаЗатрат["Субконто" + Ном] = СтрокаТовары.Номенклатура;
						ИначеЕсли СвойстваСчетаДт["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
							Если БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(АналитикаУчетаЗатрат.СчетЗатрат) Тогда
								АналитикаУчетаЗатрат["Субконто" + Ном] = Реквизиты.Склад;
							КонецЕсли;
						ИначеЕсли СвойстваСчетаДт["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
							Если Реквизиты.ВестиПартионныйУчет 
							 ИЛИ БухгалтерскийУчетПовтИсп.СчетУчетаКомиссионногоТовара(СтрокаТовары.СчетУчета) Тогда
							 	АналитикаУчетаЗатрат["Субконто" + Ном] = Реквизиты.ДокументПоступленияСсылка;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если СтрСуммаБУ < 0 Тогда
						Поставщик = ?(СокращеннаяАналитикаНаДатуДокументаПоступления, 
									Справочники.Контрагенты.ПустаяСсылка(), Реквизиты.Контрагент);
					Иначе
						Поставщик = ?(СокращеннаяАналитика,Справочники.Контрагенты.ПустаяСсылка(), Реквизиты.Контрагент);
					КонецЕсли;

					АналитикаУчетаНДС = Новый Структура("Организация,СчетФактура,ВидЦенности,СчетУчетаНДС,
						|СтавкаНДС,Поставщик,ИсправленныйСчетФактура",
						Реквизиты.Организация,
						?(СтрНДС < 0, Реквизиты.ДокументПоступленияСсылка, СтрокаТовары.СубконтоСФПолученные),
						УчетНДС.ОпределитьВидЦенностиПоОперации(СтрокаТовары.Номенклатура, СтрокаТовары.СчетУчета, , , , , Ложь),
						СтрокаТовары.СчетУчетаНДС,
						СтрокаТовары.СтавкаНДС,
						Поставщик,);
						
					НоваяСтрока = ДвиженияНДСРаздельныйУчет.Добавить();
					
					НоваяСтрока.Период       			= Реквизиты.Период;
					НоваяСтрока.Организация				= Реквизиты.Организация;
					НоваяСтрока.АналитикаУчетаЗатрат	= Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(АналитикаУчетаЗатрат);
					НоваяСтрока.АналитикаУчетаНДС		= Справочники.КлючиАналитикиУчетаНДС.КлючиАналитикиУчетаНДСДокумента(АналитикаУчетаНДС);
					НоваяСтрока.Партия              	= ?(СтрНДС < 0, Реквизиты.ДокументПоступленияСсылка, Реквизиты.Регистратор);
					НоваяСтрока.СпособУчетаНДС          = СтрокаТовары.НовыйСпособУчетаНДС;
					НоваяСтрока.Количество              = СтрКоличество;
					НоваяСтрока.СуммаБезНДС             = СтрСуммаБУ;
					НоваяСтрока.НДС                     = СтрНДС;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Реквизиты.РозницаВПродажныхЦенах Тогда
				Если АТТ Тогда
					ТорговаяНаценка = (СтрокаТовары.РозничнаяЦена * СтрКоличество) - (СтрСуммаБУ 
						+ ?(Реквизиты.РаздельныйУчетНДСНаСчете19, СтрСуммаНДССписанного, 0));
					СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				Иначе
					ТорговаяНаценка = (СтрНаценка) - (СтрСуммаБУ + ?(Реквизиты.РаздельныйУчетНДСНаСчете19, СтрСуммаНДССписанного, 0));
					СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				КонецЕсли;
				// Проводка по торговой наценке
				Если ТорговаяНаценка <> 0 Тогда
					
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период      = Реквизиты.Период;
					Проводка.Организация = Реквизиты.Организация;
					
					Проводка.Содержание  = "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТовары.СчетУчета)
						+ " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
					
					Проводка.СчетДт      = СтрокаТовары.СчетУчета;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  Реквизиты.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТовары.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТовары.СтавкаНДСВРознице);
					
					Проводка.СчетКт      = СчетНаценки;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  Реквизиты.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТовары.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТовары.СтавкаНДСВРознице);
					
					Если Реквизиты.ВестиПартионныйУчет Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.ДокументПоступленияСсылка);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", Реквизиты.ДокументПоступленияСсылка);
					КонецЕсли;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
					
					Проводка.Сумма       = ТорговаяНаценка;
					Если Реквизиты.ОтражатьВНалоговомУчете Тогда
						
						СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
						Если СвойстваСчетаДт.НалоговыйУчет Тогда
							Проводка.СуммаНУДт   = ТорговаяНаценка;
						КонецЕсли; 
						
						СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
						Если СвойстваСчетаКт.НалоговыйУчет Тогда
							Проводка.СуммаНУКт   = ТорговаяНаценка;
						КонецЕсли; 
					
					КонецЕсли; 
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Учет товаров по номерам ГТД
		СформироватьДвиженияПоГТД(Реквизиты, СтрокаТовары, МассивСчетовДляГТД, Движения);
		
		СвойстваСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТовары.СчетУчета);
		Если СвойстваСчетаУчета.Забалансовый Тогда
			Если ЗначениеЗаполнено(СтрокаТовары.Комитент) Тогда
				Содержание   = "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТовары.СчетУчета)
						+ " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");

				СформироватьПроводкуКорректировкиПоступленияТоваровУслугКомитентаПоЗакупке(Реквизиты, СтрокаТовары, Движения, Отказ, Содержание);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
			
		Если Коэффициент2 <> 0 И Коэффициент1 <> 1 Тогда
			
			СтрКоличество = Окр(Коэффициент2*СписатьПоСтрКоличество,3,1);
			СтрСуммаБУ    = Окр(Коэффициент2*СписатьПоСтрСуммаБУ,2,1);
			СтрНДС        = Окр(Коэффициент2*СписатьПоСтрНДС,2,1);
			СтрСуммаВал   = Окр(Коэффициент2*СписатьПоСтрСуммаВал,2,1);
			СтрСуммаНУ    = Окр(Коэффициент2*СписатьПоСтрСуммаНУ,2,1);
			
			СписатьПоСтрКоличество = СписатьПоСтрКоличество - СтрКоличество;
			СписатьПоСтрСуммаБУ    = СписатьПоСтрСуммаБУ - СтрСуммаБУ;
			СписатьПоСтрНДС        = СписатьПоСтрНДС - СтрНДС;
			СписатьПоСтрСуммаВал   = СписатьПоСтрСуммаВал - СтрСуммаВал;
			СписатьПоСтрСуммаНУ    = СписатьПоСтрСуммаНУ - СтрСуммаНУ;
			
			Если СтрСуммаБУ <> 0 ИЛИ СтрНДС <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				
				Проводка.Содержание   = "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТовары.СчетУчета)
					+ " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаТовары.НоменклатурнаяГруппа);
				
				Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
				
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

				Если СвойстваСчетаКт.Валютный Тогда
					Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрСуммаВал;
				КонецЕсли;
				
				Проводка.Сумма = СтрСуммаБУ;
				
				Если Реквизиты.ОтражатьВНалоговомУчете Тогда
					
					СуммаНУ = СтрСуммаНУ;
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = СуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРДт = СтрСуммаБУ - СуммаНУ;
							Проводка.СуммаВРДт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = СтрСуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРКт = СтрСуммаБУ - СуммаНУ;
							Проводка.СуммаВРКт = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
				
				СтрСуммаНДССписанного = Окр(Коэффициент2*СуммаНДССписанного,2,1);
				СтрСуммаНДССписанногоВал = Окр(Коэффициент2*СуммаНДССписанногоВал,2,1);
				СтрСуммаНДС0 = Окр(Коэффициент2*СуммаНДС0,2,1);
				
				СуммаНДССписанного = СуммаНДССписанного - СтрСуммаНДССписанного;
				СуммаНДССписанногоВал = СуммаНДССписанногоВал - СтрСуммаНДССписанногоВал;
				СуммаНДС0 = СуммаНДС0 - СтрСуммаНДС0;
				
				Если СтрСуммаНДССписанного <> 0 Тогда
					
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					Проводка.Содержание	  = НСтр("ru = 'НДС включен в стоимость ценностей'");
					
					Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаТовары.НоменклатурнаяГруппа);
				
					// Для товаров, принятых на комиссию партия прописывается всегда 
					Если Реквизиты.ВестиПартионныйУчет ИЛИ БухгалтерскийУчетПовтИсп.СчетУчетаКомиссионногоТовара(СтрокаТовары.СчетУчета) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.ДокументПоступленияСсылка);
					КонецЕсли;
					
					Проводка.Сумма = СтрСуммаНДССписанного;
					
					Проводка.СчетКт = СтрокаТовары.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"СФПолученные", СтрокаТовары.СубконтоСФПолученные);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"Контрагенты",  Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
						
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
					
					Если Реквизиты.ОтражатьВНалоговомУчете Тогда
						
						СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
						Если СвойстваСчетаДт.НалоговыйУчет Тогда
							Проводка.СуммаНУДт = СтрСуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРДт = 0;
								Проводка.СуммаВРДт = 0;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрСуммаНДС0 <> 0
					И (СокращеннаяАналитика
					ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
					ИЛИ ТипЗнч(Реквизиты.ИсправляемыйСчетФактура) = Тип("ДокументСсылка.КорректировкаПоступления")) Тогда
					
					НоваяСтрока = ДвиженияНДСПредъявленныйРеализация0.Добавить();
					
					НоваяСтрока.Период       = Реквизиты.Период;
					НоваяСтрока.Организация	 = Реквизиты.Организация;
					
					НоваяСтрока.СчетФактура  = Реквизиты.СчетФактура;
					
					НоваяСтрока.ВидЦенности	 = УчетНДС.ОпределитьВидЦенностиПоОперации(СтрокаТовары.Номенклатура, СтрокаТовары.СчетУчета, , , , , Ложь);
					НоваяСтрока.СтавкаНДС	 = СтрокаТовары.СтавкаНДС;
					НоваяСтрока.СчетУчетаНДС = СтрокаТовары.СчетУчетаНДС;
					НоваяСтрока.СуммаБезНДС  = СтрСуммаБУ;
					НоваяСтрока.НДС          = СтрСуммаНДС0;
					НоваяСтрока.ДатаСобытия  = Реквизиты.Период;
					НоваяСтрока.Поставщик = Реквизиты.Контрагент;
						
					Если СтрСуммаНДС0 > 0 Тогда
						НоваяСтрока.Состояние = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
						НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
					Иначе
						НоваяСтрока.Сторно = Истина;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Коэффициент3 <> 0 И Коэффициент2 <> 1 Тогда 
			
			СтрКоличество = Окр(Коэффициент3*СписатьПоСтрКоличество,3,1);
			СтрСуммаБУ    = Окр(Коэффициент3*СписатьПоСтрСуммаБУ,2,1);
			СтрНДС        = Окр(Коэффициент3*СписатьПоСтрНДС,2,1);
			СтрСуммаВал   = Окр(Коэффициент3*СписатьПоСтрСуммаВал,2,1);
			СтрСуммаНУ    = Окр(Коэффициент3*СписатьПоСтрСуммаНУ,2,1);
		
			СписатьПоСтрКоличество = СписатьПоСтрКоличество - СтрКоличество;
			СписатьПоСтрСуммаБУ    = СписатьПоСтрСуммаБУ - СтрСуммаБУ;
			СписатьПоСтрНДС        = СписатьПоСтрНДС - СтрНДС;
			СписатьПоСтрСуммаВал   = СписатьПоСтрСуммаВал - СтрСуммаВал;
			СписатьПоСтрСуммаНУ    = СписатьПоСтрСуммаНУ - СтрСуммаНУ;
			
			Если СтрСуммаБУ < 0 Тогда //Доходы
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				
				Проводка.Содержание  = "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТовары.СчетУчета)
					+ " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
				
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяПрочихДоходовИРасходов);
				
				Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        Реквизиты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           Реквизиты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
				
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				Если СвойстваСчетаДт.Валютный Тогда
					Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = - СтрСуммаВал;
				КонецЕсли;
				
				Проводка.Сумма = - СтрСуммаБУ;
				
				Если Реквизиты.ОтражатьВНалоговомУчете Тогда
					// Увеличение налоговой базы должно быть отражено в прошлом периоде
					// Отразим постоянные разницы, поскольку в БУ доходы отражены как внереализационные, а в НУ будут сторнированы как доходы от реализации
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = 0;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРДт = 0;
							Проводка.СуммаВРДт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = 0;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРКт = - СтрСуммаБУ;
							Проводка.СуммаВРКт = 0;
						КонецЕсли;
					КонецЕсли;

					// Корректировка фин. результата
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       = Реквизиты.ДокументПоступленияДата;
					Проводка.Организация  = Реквизиты.Организация;
					Проводка.Содержание   = "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТовары.СчетУчета)
						+ " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
					
					Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаТовары.НоменклатурнаяГруппа);
					
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
					
					СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
					СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = СтрСуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРДт = 0;
							Проводка.СуммаВРДт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = СтрСуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРКт = 0;
							Проводка.СуммаВРКт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       = Реквизиты.ДокументПоступленияДата;
					Проводка.Организация  = Реквизиты.Организация;
					
					Проводка.Содержание   = "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТовары.СчетУчета)
						+ " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
					
					Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаТовары.НоменклатурнаяГруппа);
					
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ПрибылиИУбытки", Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
					
					СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
					СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = - СтрСуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРДт = 0;
							Проводка.СуммаВРДт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = - СтрСуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРКт = 0;
							Проводка.СуммаВРКт = 0;
						КонецЕсли;
					КонецЕсли;
					
					// Восстановление расчетов в текущем периоде
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					
					Проводка.Содержание  = "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТовары.СчетУчета)
						+ " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
					
					Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           Реквизиты.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
					
					Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
					
					СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
					СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					Если СвойстваСчетаКт.Валютный Тогда
						Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрСуммаВал;
					КонецЕсли;
					
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = СтрСуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРДт = 0;
							Проводка.СуммаВРДт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = СтрСуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРКт = 0;
							Проводка.СуммаВРКт = 0;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли СтрСуммаБУ > 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				
				Проводка.Содержание  = "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТовары.СчетУчета)
					+ " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяПрочихДоходовИРасходов);
				
				Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
				
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				Если СвойстваСчетаКт.Валютный Тогда
					Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрСуммаВал;
				КонецЕсли;
				
				Проводка.Сумма = СтрСуммаБУ;
				
				Если Реквизиты.ОтражатьВНалоговомУчете Тогда
					
					СуммаНУ = СтрСуммаНУ;
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = СуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРДт = СтрСуммаБУ - СуммаНУ;
							Проводка.СуммаВРДт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = СуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРКт = СтрСуммаБУ - СуммаНУ;
							Проводка.СуммаВРКт = 0;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
				
				СтрСуммаНДССписанного = Окр(Коэффициент3*СуммаНДССписанного,2,1);
				СтрСуммаНДССписанногоВал = Окр(Коэффициент3*СуммаНДССписанногоВал,2,1);
				СтрСуммаНДС0 = Окр(Коэффициент3*СуммаНДС0,2,1);
				
				СуммаНДССписанного = СуммаНДССписанного - СтрСуммаНДССписанного;
				СуммаНДССписанногоВал = СуммаНДССписанногоВал - СтрСуммаНДССписанногоВал;
				СуммаНДС0 = СуммаНДС0 - СтрСуммаНДС0;
				
				Если СтрСуммаНДССписанного < 0 Тогда //Доходы
					
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					
					Проводка.Содержание  = НСтр("ru = 'НДС включен в стоимость ценностей'");
					
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяПрочихДоходовИРасходов);
					
					Проводка.СчетДт = СтрокаТовары.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						"СФПолученные", СтрокаТовары.СубконтоСФПолученные);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						"Контрагенты",  Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
						
					Проводка.Сумма = - СтрСуммаНДССписанного;	
						
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);	
					
					Если Реквизиты.ОтражатьВНалоговомУчете Тогда
						// Увеличение налоговой базы должно быть отражено в прошлом периоде
						// Отразим постоянные разницы, поскольку в БУ доходы отражены как внереализационные, а в НУ будут сторнированы как доходы от реализации
						Если СвойстваСчетаКт.НалоговыйУчет Тогда
							Проводка.СуммаНУКт = 0;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРКт = - СтрСуммаНДССписанного;
								Проводка.СуммаВРКт = 0;
							КонецЕсли;
						КонецЕсли;

						// Корректировка фин. результата
						Проводка = Движения.Хозрасчетный.Добавить();
						
						Проводка.Период       = Реквизиты.ДокументПоступленияДата;
						Проводка.Организация  = Реквизиты.Организация;
						Проводка.Содержание   = НСтр("ru = 'НДС включен в стоимость ценностей'");
						
						Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаТовары.НоменклатурнаяГруппа);
						
						Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",                     Реквизиты.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",                        Реквизиты.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
							
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
						
						СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
						Если СвойстваСчетаДт.НалоговыйУчет Тогда
							Проводка.СуммаНУДт = СтрСуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРДт = 0;
								Проводка.СуммаВРДт = 0;
							КонецЕсли;
						КонецЕсли;
						
						СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
						Если СвойстваСчетаКт.НалоговыйУчет Тогда
							Проводка.СуммаНУКт = СтрСуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРКт = 0;
								Проводка.СуммаВРКт = 0;
							КонецЕсли;
						КонецЕсли;
						
						Проводка = Движения.Хозрасчетный.Добавить();
						
						Проводка.Период       = Реквизиты.ДокументПоступленияДата;
						Проводка.Организация  = Реквизиты.Организация;
						
						Проводка.Содержание   = НСтр("ru = 'НДС включен в стоимость ценностей'");
						
						Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаТовары.НоменклатурнаяГруппа);
						
						Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ПрибылиИУбытки", Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
						
						СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
						СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
						Если СвойстваСчетаДт.НалоговыйУчет Тогда
							Проводка.СуммаНУДт = - СтрСуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРДт = 0;
								Проводка.СуммаВРДт = 0;
							КонецЕсли;
						КонецЕсли;
						
						Если СвойстваСчетаКт.НалоговыйУчет Тогда
							Проводка.СуммаНУКт = - СтрСуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРКт = 0;
								Проводка.СуммаВРКт = 0;
							КонецЕсли;
						КонецЕсли;
						
						// Восстановление расчетов в текущем периоде
						Проводка = Движения.Хозрасчетный.Добавить();
						
						Проводка.Период       = Реквизиты.Период;
						Проводка.Организация  = Реквизиты.Организация;
						
						Проводка.Содержание  = НСтр("ru = 'НДС включен в стоимость ценностей'");
						
						Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        Реквизиты.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           Реквизиты.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
						
						Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
						
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
						
						СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
						Если СвойстваСчетаКт.Валютный Тогда
							Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаКт = СуммаНДССписанногоВал;
						КонецЕсли;
						
						СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
						Если СвойстваСчетаДт.НалоговыйУчет Тогда
							Проводка.СуммаНУДт = СтрСуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРДт = 0;
								Проводка.СуммаВРДт = 0;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли СтрСуммаНДССписанного > 0 Тогда
					
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					
					Проводка.Содержание  = НСтр("ru = 'НДС включен в стоимость ценностей'");
					
					Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяПрочихДоходовИРасходов);
					
					Проводка.СчетКт = СтрокаТовары.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"СФПолученные", СтрокаТовары.СубконтоСФПолученные);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"Контрагенты",  Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
					
					СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					
					Проводка.Сумма = СтрСуммаНДССписанного;
					
					Если Реквизиты.ОтражатьВНалоговомУчете Тогда
						
						Если СвойстваСчетаДт.НалоговыйУчет Тогда
							Проводка.СуммаНУДт = СтрСуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРДт = 0;
								Проводка.СуммаВРДт = 0;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрСуммаНДС0 <> 0
					И (СокращеннаяАналитика
					ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
					ИЛИ ТипЗнч(Реквизиты.ИсправляемыйСчетФактура) = Тип("ДокументСсылка.КорректировкаПоступления")) Тогда
					
					НоваяСтрока = ДвиженияНДСПредъявленныйРеализация0.Добавить();
					
					НоваяСтрока.Период       = Реквизиты.Период;
					НоваяСтрока.Организация	 = Реквизиты.Организация;
					
					НоваяСтрока.СчетФактура  = Реквизиты.СчетФактура;
					
					НоваяСтрока.ВидЦенности	 = УчетНДС.ОпределитьВидЦенностиПоОперации(СтрокаТовары.Номенклатура, СтрокаТовары.СчетУчета, , , , , Ложь);
					НоваяСтрока.СтавкаНДС	 = СтрокаТовары.СтавкаНДС;
					НоваяСтрока.СчетУчетаНДС = СтрокаТовары.СчетУчетаНДС;
					НоваяСтрока.СуммаБезНДС  = СтрСуммаБУ;
					НоваяСтрока.НДС          = СтрСуммаНДС0;
					НоваяСтрока.ДатаСобытия  = Реквизиты.Период;
					НоваяСтрока.Поставщик = Реквизиты.Контрагент;
					
					Если СтрСуммаНДС0 > 0 Тогда
						НоваяСтрока.Состояние = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
						НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
					Иначе
						НоваяСтрока.Сторно = Истина;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;
	
	// Алгоритмы формирования проводок этого документа учитывают малоценку
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("ДвиженияПоМалоценнымОбъектамСформированы", Истина);
	Движения.Хозрасчетный.Записывать = Истина;
	
	// Движения НДСРаздельныйУчет
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		УчетНДСРаздельный.СформироватьДвиженияНДСРаздельныйУчетПоступлениеЦенностей(
		ДвиженияНДСРаздельныйУчет, Движения, Отказ);
		УчетНДСРаздельный.СформироватьДвиженияНДСПредъявленныйРеализация0КорректировкаПоступления(
		ДвиженияНДСПредъявленныйРеализация0, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоГТД(Реквизиты, СтрокаТовары, МассивСчетовДляГТД, Движения)
	
	Если МассивСчетовДляГТД.Найти(СтрокаТовары.СчетУчета) <> Неопределено
		И (ЗначениеЗаполнено(СтрокаТовары.НомерГТД)
		ИЛИ ЗначениеЗаполнено(СтрокаТовары.НомерГТДДоИзменения)) Тогда
		
		Если СтрокаТовары.НомерГТД = СтрокаТовары.НомерГТДДоИзменения
			И СтрокаТовары.СтранаПроисхождения = СтрокаТовары.СтранаПроисхожденияДоИзменения Тогда
			
			Если СтрокаТовары.Количество <> СтрокаТовары.КоличествоДоИзменения Тогда
				
				Проводка             = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				
				Проводка.Содержание  = "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТовары.СчетУчета)
				+ " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ГТД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТовары.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НомераГТД", СтрокаТовары.НомерГТД);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтраныПроисхождения", СтрокаТовары.СтранаПроисхождения);
				Проводка.КоличествоДт = (СтрокаТовары.Количество - СтрокаТовары.КоличествоДоИзменения);
			КонецЕсли;
			
		Иначе
			Если СтрокаТовары.КоличествоДоИзменения <> 0
				И ЗначениеЗаполнено(СтрокаТовары.НомерГТДДоИзменения) Тогда
				
				Проводка             = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				
				Проводка.Содержание  = "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТовары.СчетУчета)
				+ " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ГТД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТовары.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НомераГТД", СтрокаТовары.НомерГТДДоИзменения);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтраныПроисхождения", СтрокаТовары.СтранаПроисхожденияДоИзменения);
				Проводка.КоличествоДт = - СтрокаТовары.КоличествоДоИзменения;
			КонецЕсли;
			
			Если СтрокаТовары.Количество <> 0 
				И ЗначениеЗаполнено(СтрокаТовары.НомерГТД) Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				
				Проводка.Содержание  = "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТовары.СчетУчета)
				+ " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ГТД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТовары.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НомераГТД", СтрокаТовары.НомерГТД);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтраныПроисхождения", СтрокаТовары.СтранаПроисхождения);
				Проводка.КоличествоДт = СтрокаТовары.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьРеквизитыКорректировкиПоступленияТоваров(РеквизитыДокумента)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"           // <Регистратор...> - документ, записывающий движения в регистры
	+ "Период,"                // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Склад,"
	+ "ТипСклада,"
	+ "ДокументОснование,"
	+ "СчетФактура,"
	+ "ВидОперации,"
	+ "Организация,"
	+ "Подразделение,"
	+ "НДСВключенВСтоимость,"
	+ "СчетУчетаРасчетовСКонтрагентом,"
	+ "СтатьяПрочихДоходовИРасходов,"
	+ "ПоддержкаПБУ18,"
	+ "ОтражатьВНалоговомУчете,"
	+ "ВалютаВзаиморасчетов,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ВестиПартионныйУчет,"
	+ "ДокументПоступленияСсылка,"
	+ "ДокументПоступленияДата,"
	+ "РозницаВПродажныхЦенах,"
	+ "ДатаВходящегоДокумента,"
	+ "НомерВходящегоДокумента,"
	+ "УчетАгентскогоНДС,"
	+ "ВалютаРеглУчета,"
	+ "ОрганизацияПрименяетУСН,"
	+ "РаздельныйУчетНДСНаСчете19,"
	+ "СчетФактураПриУвеличенииСтоимости,"
	+ "ЭтоКорректировочныйСчетФактура,"
	+ "ИсправляемыйСчетФактура,"
	+ "СокращеннаяАналитика";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		РеквизитыДокумента, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьПроводкуКорректировкиПоступленияТоваровУслугКомитентаПоЗакупке(Реквизиты, СтрокаТаблицы, Движения, Отказ, Содержание) 

	СписатьПоСтрКоличество 	= СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоДоИзменения;
	СписатьПоСтрСуммаБУ		= СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаБУДоИзменения;
	СписатьПоСтрНДС			= СтрокаТаблицы.СуммаНДСРуб - СтрокаТаблицы.СуммаНДСРубДоИзменения;
	СписатьПоСтрСуммаВал	= СтрокаТаблицы.СуммаВзаиморасчетов - СтрокаТаблицы.СуммаВзаиморасчетовДоИзменения;
	СписатьПоСтрСуммаНУ		= СтрокаТаблицы.СуммаНУ - СтрокаТаблицы.СуммаНУДоИзменения;
	СписатьПоСтрНДСВал		= СтрокаТаблицы.СуммаНДСВзаиморасчетов - СтрокаТаблицы.СуммаНДСВзаиморасчетовДоИзменения;
	
	СписатьПоСтрСуммаБУ 	= СписатьПоСтрСуммаБУ + СписатьПоСтрНДС;
	СписатьПоСтрСуммаНУ 	= СписатьПоСтрСуммаНУ + СписатьПоСтрНДС;
	
	Если СписатьПоСтрКоличество = 0
		И СписатьПоСтрСуммаБУ 	= 0
		И СписатьПоСтрСуммаВал	= 0
		И СписатьПоСтрСуммаНУ	= 0 Тогда
		Возврат;
	КонецЕсли;
		 
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетРасчетовСКомитентом);
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Реквизиты.СчетУчетаРасчетовСКонтрагентом);
	
	Если СвойстваСчетаДт.Валютный Тогда
		Если СтрокаТаблицы.ВалютаРасчетовСКомитентом = Реквизиты.ВалютаВзаиморасчетов Тогда
			СписатьПоСтрСуммаВалКомитента	= СписатьПоСтрСуммаВал;
		Иначе
			СтруктураКурсаВалютыСКомитентом = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаРасчетовСКомитентом, Реквизиты.ДокументПоступленияДата);
			
			СписатьПоСтрСуммаВалКомитента 	= РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СписатьПоСтрСуммаБУ, 
				Реквизиты.ВалютаРеглУчета, СтрокаТаблицы.ВалютаРасчетовСКомитентом,
				1, СтруктураКурсаВалютыСКомитентом.Курс,
				1, СтруктураКурсаВалютыСКомитентом.Кратность);
		КонецЕсли;
	Иначе
		СписатьПоСтрСуммаВалКомитента = СписатьПоСтрСуммаБУ;
	КонецЕсли;
	
	// Проводка Дт 76 - Кт 60 по Хозрасчетный
	
	Проводка				= Движения.Хозрасчетный.Добавить();
	Проводка.Период 		= Реквизиты.Период;
	Проводка.Организация 	= Реквизиты.Организация;
	Проводка.Сумма			= СписатьПоСтрСуммаБУ;
	Проводка.Содержание 	= Содержание;
	
	// Дт
	Проводка.СчетДт			= СтрокаТаблицы.СчетРасчетовСКомитентом;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", 	СтрокаТаблицы.Комитент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 		СтрокаТаблицы.ДоговорКомиссии);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
	Если СвойстваСчетаДт.Валютный Тогда
		Проводка.ВалютаДт			= СтрокаТаблицы.ВалютаРасчетовСКомитентом;
		Проводка.ВалютнаяСуммаДт 	= СписатьПоСтрСуммаВалКомитента;
	КонецЕсли;
	
	// Кт
	Проводка.СчетКт			= Реквизиты.СчетУчетаРасчетовСКонтрагентом;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", 	Реквизиты.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 		Реквизиты.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
	Если СвойстваСчетаКт.Валютный Тогда
		Проводка.ВалютаКт 			= Реквизиты.ВалютаВзаиморасчетов;
		Проводка.ВалютнаяСуммаКт 	= СписатьПоСтрСуммаВал;
	КонецЕсли;

	БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);

	Если СвойстваСчетаДт.НалоговыйУчет Тогда
		Проводка.СуммаНУДт = СписатьПоСтрСуммаНУ;
		Если Реквизиты.ПоддержкаПБУ18 Тогда
			Проводка.СуммаПРДт = СписатьПоСтрСуммаБУ - СписатьПоСтрСуммаНУ;
			Проводка.СуммаВРДт = 0;
		КонецЕсли;
	КонецЕсли;

	Если СвойстваСчетаКт.НалоговыйУчет Тогда
		Проводка.СуммаНУКт = СписатьПоСтрСуммаНУ;
		Если Реквизиты.ПоддержкаПБУ18 Тогда
			Проводка.СуммаПРКт = СписатьПоСтрСуммаБУ - СписатьПоСтрСуммаНУ;
			Проводка.СуммаВРКт = 0;
		КонецЕсли;
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияКорректировкиПоступленияУслуг(РеквизитыДокумента, ТаблицаПоУслугам, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПоУслугам)
	 Или Не ЗначениеЗаполнено(РеквизитыДокумента) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПолучитьРеквизитыКорректировкиПоступленияУслуг(РеквизитыДокумента);
	Реквизиты = Параметры.Реквизиты[0];
	
	СокращеннаяАналитика = Реквизиты.СокращеннаяАналитика;
	СокращеннаяАналитикаНаДатуДокументаПоступления = 
		УчетНДСРаздельный.СокращеннаяАналитика(Реквизиты.ДокументПоступленияДата);
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		
		УчетНДСРаздельный.ОпределитьСуммыДляРаспределенияНДСКорректировкаПоступления(ТаблицаПоУслугам, Реквизиты, Отказ);
		ТаблицаКоэффициентов = Новый ТаблицаЗначений;
		
		ДвиженияНДСРаздельныйУчет = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСРаздельныйУчет");
		
		ДвиженияНДСПредъявленныйРеализация0 = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПредъявленныйРеализация0");
		ДвиженияНДСПредъявленныйРеализация0.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
		
	Иначе
		
		ТаблицаКоэффициентов = УчетНДСБП.ПодготовитьТаблицуКоэффициентовКорректировкиПоступления(Реквизиты);
		
	КонецЕсли;
	
	Для Каждого СтрокаУслуги Из ТаблицаПоУслугам Цикл
		
		СуммаНДССписанного = 0;
		СуммаНДССписанногоВал = 0;
		СуммаНДС0 = 0;
		
		ДвиженияРегистровПодсистемыНДСБУ(
			Реквизиты, СтрокаУслуги, ТаблицаКоэффициентов, СуммаНДССписанного, СуммаНДССписанногоВал, СуммаНДС0, Движения, Отказ);
									
		Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда	
			СтрСуммаБУ  = СтрокаУслуги.СуммаБУ - СтрокаУслуги.СуммаБУДоИзменения;
			СтрСуммаНУ  = СтрокаУслуги.СуммаНУ - СтрокаУслуги.СуммаНУДоИзменения;
			СтрСуммаВал = (СтрокаУслуги.СуммаВзаиморасчетов - СтрокаУслуги.СуммаВзаиморасчетовДоИзменения) 
				- (СтрокаУслуги.СуммаНДСВзаиморасчетов - СтрокаУслуги.СуммаНДСВзаиморасчетовДоИзменения);
		Иначе
			СтрСуммаБУ  = СтрокаУслуги.СуммаБУ - СтрокаУслуги.СуммаБУДоИзменения + СуммаНДССписанного;
			СтрСуммаНУ  = СтрокаУслуги.СуммаНУ - СтрокаУслуги.СуммаНУДоИзменения + СуммаНДССписанного;
			СтрСуммаВал = (СтрокаУслуги.СуммаВзаиморасчетов - СтрокаУслуги.СуммаВзаиморасчетовДоИзменения) 
				- (СтрокаУслуги.СуммаНДСВзаиморасчетов - СтрокаУслуги.СуммаНДСВзаиморасчетовДоИзменения) + СуммаНДССписанногоВал;
		КонецЕсли;		
		
		СтрНДС      = СтрокаУслуги.СуммаНДСРуб - СтрокаУслуги.СуммаНДСРубДоИзменения;
				
		Если Год(Реквизиты.ДокументПоступленияДата) < Год(Реквизиты.Период) Тогда
			
			Если СтрСуммаБУ < 0 Тогда // Доходы
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				
				Проводка.Содержание  = СтрокаУслуги.Содержание + " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
				
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяПрочихДоходовИРасходов);
				
				Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        Реквизиты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           Реквизиты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
				
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				Если СвойстваСчетаДт.Валютный Тогда
					Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = -СтрСуммаВал;
				КонецЕсли;
				
				Проводка.Сумма = -СтрСуммаБУ;
								
				Если Реквизиты.ОтражатьВНалоговомУчете Тогда
					// Увеличение налоговой базы должно быть отражено в прошлом периоде
					// Отразим постоянные разницы, поскольку в БУ доходы отражены как внереализационные, а в НУ будут сторнированы как доходы от реализации
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = 0;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРДт = 0;
							Проводка.СуммаВРДт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = 0;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРКт = -СтрСуммаБУ;
							Проводка.СуммаВРКт = 0;
						КонецЕсли;
					КонецЕсли;
					
					// Корректировка фин. результата
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период        = Реквизиты.ДокументПоступленияДата;
					Проводка.Организация   = Реквизиты.Организация;
					
					Проводка.Содержание    = СтрокаУслуги.Содержание + " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
					
					Проводка.СчетКт        = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаУслуги.НоменклатурнаяГруппа);
					
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           Реквизиты.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
					
					СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
					СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = -СтрСуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРДт = 0;
							Проводка.СуммаВРДт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = -СтрСуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРКт = 0;
							Проводка.СуммаВРКт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       	= Реквизиты.ДокументПоступленияДата;
					Проводка.Организация  	= Реквизиты.Организация;
					
					Проводка.Содержание  	= СтрокаУслуги.Содержание + " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
					
					Проводка.СчетДт       	= ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаУслуги.НоменклатурнаяГруппа);
					
					Проводка.СчетКт 		= ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ПрибылиИУбытки", Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
					
					СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
					СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = -СтрСуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРДт = 0;
							Проводка.СуммаВРДт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = -СтрСуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРКт = 0;
							Проводка.СуммаВРКт = 0;
						КонецЕсли;
					КонецЕсли;
					
					// Восстановление расчетов в текущем периоде
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					
					Проводка.Содержание  = СтрокаУслуги.Содержание + " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
					
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
					
					Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", Реквизиты.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
					
					СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
					СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					Если СвойстваСчетаДт.Валютный Тогда
						Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаДт = -СтрСуммаВал;
					КонецЕсли;
					
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = -СтрСуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРДт = 0;
							Проводка.СуммаВРДт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = -СтрСуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРКт = 0;
							Проводка.СуммаВРКт = 0;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			ИначеЕсли СтрСуммаБУ > 0 Тогда
				// Расходы
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				
				Проводка.Содержание  = СтрокаУслуги.Содержание + " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяПрочихДоходовИРасходов);
				
				Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
				
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				Если СвойстваСчетаКт.Валютный Тогда
					Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрСуммаВал;
				КонецЕсли;
				
				Проводка.Сумма = СтрСуммаБУ;
				
				Если Реквизиты.ОтражатьВНалоговомУчете Тогда
					
					СуммаНУ = СтрСуммаНУ;
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = СуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРДт = СтрСуммаБУ - СуммаНУ;
							Проводка.СуммаВРДт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = СуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРКт = СтрСуммаБУ - СуммаНУ;
							Проводка.СуммаВРКт = 0;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Месяц(Реквизиты.ДокументПоступленияДата) < Месяц(Реквизиты.Период)
			И Реквизиты.СпособОтраженияУслугТекГода = 0 Тогда
			
			Если СтрСуммаБУ <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				
				Проводка.Содержание   = СтрокаУслуги.Содержание + " по вх.д." + Реквизиты.НомерВходящегоДокумента + " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаУслуги.НоменклатурнаяГруппа);
				
				Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
				
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				Если СвойстваСчетаКт.Валютный Тогда
					Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрСуммаВал;
				КонецЕсли;
				
				Проводка.Сумма = СтрСуммаБУ;
				
				Если Реквизиты.ОтражатьВНалоговомУчете Тогда
					
					СуммаНУ = СтрСуммаНУ;
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = СуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРДт = СтрСуммаБУ - СуммаНУ;
							Проводка.СуммаВРДт = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = СуммаНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРКт = СтрСуммаБУ - СуммаНУ;
							Проводка.СуммаВРКт = 0;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если СтрСуммаБУ <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				
				Проводка.Содержание = СтрокаУслуги.Содержание + " по вх.д." + Реквизиты.НомерВходящегоДокумента 
					+ " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
				
				Проводка.Сумма       = СтрСуммаБУ;
				
				Проводка.СчетДт       = СтрокаУслуги.СчетЗатрат;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаУслуги.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаУслуги.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаУслуги.Субконто3);
				
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = СтрокаУслуги.ПодразделениеЗатрат;
				КонецЕсли;
				
				Если СвойстваСчетаДт.Валютный Тогда
					Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрСуммаВал;
				КонецЕсли;
				
				Если НЕ СвойстваСчетаДт.Забалансовый Тогда
					
					Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
					
					СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
					Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
						Проводка.ПодразделениеКт = Реквизиты.Подразделение;
					КонецЕсли;
					
					Если СвойстваСчетаКт.Валютный Тогда
						Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрСуммаВал;
					КонецЕсли;
				Конецесли;
				
				Если Реквизиты.ОтражатьВНалоговомУчете Тогда
					
					СуммаНУ = СтрСуммаНУ;
					СоздатьПроводкиПоРазнымСчетамБУиНУ(
						Реквизиты, Проводка, СуммаНУ, СтрокаУслуги.СчетЗатратНУ,
						СтрокаУслуги.СубконтоНУ1, СтрокаУслуги.СубконтоНУ2, СтрокаУслуги.СубконтоНУ3, Движения, Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
			
			Если СтрокаУслуги.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется И СтрНДС <> 0 
				И (СокращеннаяАналитика
				ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
				ИЛИ ТипЗнч(Реквизиты.ИсправляемыйСчетФактура) = Тип("ДокументСсылка.КорректировкаПоступления"))Тогда
				
				АналитикаУчетаЗатрат = Новый Структура("Организация,СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3");
				
				АналитикаУчетаЗатрат.Организация = Реквизиты.Организация;
				АналитикаУчетаЗатрат.СчетЗатрат = СтрокаУслуги.СчетЗатрат;
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(АналитикаУчетаЗатрат.СчетЗатрат);
				Если СвойстваСчета.УчетПоПодразделениям Тогда
					АналитикаУчетаЗатрат.Подразделение = СтрокаУслуги.ПодразделениеЗатрат;
				КонецЕсли;
				Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
					АналитикаУчетаЗатрат["Субконто" + Ном] = СтрокаУслуги["Субконто" + Ном];
				КонецЦикла;
				
				Если СтрСуммаБУ < 0 Тогда
					Поставщик = ?(СокращеннаяАналитикаНаДатуДокументаПоступления, 
					Справочники.Контрагенты.ПустаяСсылка(), Реквизиты.Контрагент);
				Иначе
					Поставщик = ?(СокращеннаяАналитика, Справочники.Контрагенты.ПустаяСсылка(), Реквизиты.Контрагент);
				КонецЕсли;
				
				АналитикаУчетаНДС = Новый Структура("Организация,СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС,Поставщик,ИсправленныйСчетФактура",
				Реквизиты.Организация,
				?(СтрНДС < 0, Реквизиты.ДокументПоступленияСсылка, СтрокаУслуги.СубконтоСФПолученные),
				УчетНДС.ОпределитьВидЦенности(
				АналитикаУчетаЗатрат.СчетЗатрат, 
				АналитикаУчетаЗатрат.Субконто1,
				АналитикаУчетаЗатрат.Субконто2,
				АналитикаУчетаЗатрат.Субконто3),
				СтрокаУслуги.СчетУчетаНДС,
				СтрокаУслуги.СтавкаНДС,
				Поставщик, );
				
				НоваяСтрока = ДвиженияНДСРаздельныйУчет.Добавить();
				
				НоваяСтрока.Период       			= Реквизиты.Период;
				НоваяСтрока.Организация				= Реквизиты.Организация;
				НоваяСтрока.АналитикаУчетаЗатрат	= Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(АналитикаУчетаЗатрат);
				НоваяСтрока.АналитикаУчетаНДС		= Справочники.КлючиАналитикиУчетаНДС.КлючиАналитикиУчетаНДСДокумента(АналитикаУчетаНДС);
				НоваяСтрока.Партия              	= ?(СтрНДС < 0, Реквизиты.ДокументПоступленияСсылка, Реквизиты.Регистратор);
				НоваяСтрока.СпособУчетаНДС          = СтрокаУслуги.НовыйСпособУчетаНДС;
				НоваяСтрока.СуммаБезНДС             = СтрСуммаБУ;
				НоваяСтрока.НДС                     = СтрНДС;
				
			КонецЕсли;
			
			Если СуммаНДС0 <> 0 И (СокращеннаяАналитика
				ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
				ИЛИ ТипЗнч(Реквизиты.ИсправляемыйСчетФактура) = Тип("ДокументСсылка.КорректировкаПоступления"))Тогда
				
				НоваяСтрока = ДвиженияНДСПредъявленныйРеализация0.Добавить();
				
				НоваяСтрока.Период       = Реквизиты.Период;
				НоваяСтрока.Организация	 = Реквизиты.Организация;
				
				НоваяСтрока.СчетФактура  = ?(НачалоКвартала(Реквизиты.ДокументПоступленияДата) = НачалоКвартала(Реквизиты.Период) Или СуммаНДС0 < 0,
					Реквизиты.ДокументПоступленияСсылка, Реквизиты.СчетФактура);
					
				НоваяСтрока.ВидЦенности	 = УчетНДС.ОпределитьВидЦенности(
											СтрокаУслуги.СчетЗатрат, 
											СтрокаУслуги.Субконто1,
											СтрокаУслуги.Субконто2,
											СтрокаУслуги.Субконто3);
				НоваяСтрока.СтавкаНДС	 = СтрокаУслуги.СтавкаНДС;
				НоваяСтрока.СчетУчетаНДС = СтрокаУслуги.СчетУчетаНДС;
				НоваяСтрока.СуммаБезНДС  = СтрСуммаБУ;
				НоваяСтрока.НДС          = СуммаНДС0;
				НоваяСтрока.ДатаСобытия  = Реквизиты.Период;
				НоваяСтрока.Поставщик = Реквизиты.Контрагент;
				
				Если СуммаНДС0 > 0 Тогда
					НоваяСтрока.Состояние = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
					НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
				Иначе
					НоваяСтрока.Сторно = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Год(Реквизиты.ДокументПоступленияДата) < Год(Реквизиты.Период) Тогда
				
				Если СуммаНДССписанного < 0 Тогда // Доходы
					
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					
					Проводка.Содержание  = НСтр("ru = 'НДС включен в стоимость ценностей'");
					
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяПрочихДоходовИРасходов);
					
					Проводка.СчетДт = СтрокаУслуги.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						"СФПолученные", СтрокаУслуги.СубконтоСФПолученные);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						"Контрагенты",  Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
					СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
					
					Проводка.Сумма = -СуммаНДССписанного;
									
					Если Реквизиты.ОтражатьВНалоговомУчете Тогда
						// Увеличение налоговой базы должно быть отражено в прошлом периоде
						// Отразим постоянные разницы, поскольку в БУ доходы отражены как внереализационные, а в НУ будут сторнированы как доходы от реализации
						Если СвойстваСчетаКт.НалоговыйУчет Тогда
							Проводка.СуммаНУКт = 0;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРКт = -СуммаНДССписанного;
								Проводка.СуммаВРКт = 0;
							КонецЕсли;
						КонецЕсли;
						
						// Корректировка фин. результата
						Проводка = Движения.Хозрасчетный.Добавить();
						
						Проводка.Период        = Реквизиты.ДокументПоступленияДата;
						Проводка.Организация   = Реквизиты.Организация;
						
						Проводка.Содержание    = НСтр("ru = 'НДС включен в стоимость ценностей'");
						
						Проводка.СчетКт        = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаУслуги.НоменклатурнаяГруппа);
						
						Проводка.СчетДт = СтрокаУслуги.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
							"СФПолученные", СтрокаУслуги.СубконтоСФПолученные);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
							"Контрагенты",  Реквизиты.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
							"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
						
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
						
						СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
						Если СвойстваСчетаКт.НалоговыйУчет Тогда
							Проводка.СуммаНУКт = -СуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРКт = 0;
								Проводка.СуммаВРКт = 0;
							КонецЕсли;
						КонецЕсли;
						
						Проводка = Движения.Хозрасчетный.Добавить();
						
						Проводка.Период       	= Реквизиты.ДокументПоступленияДата;
						Проводка.Организация  	= Реквизиты.Организация;
						
						Проводка.Содержание  	= НСтр("ru = 'НДС включен в стоимость ценностей'");
						
						Проводка.СчетДт       	= ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаУслуги.НоменклатурнаяГруппа);
						
						Проводка.СчетКт 		= ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ПрибылиИУбытки", Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
						
						СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
						СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
						Если СвойстваСчетаДт.НалоговыйУчет Тогда
							Проводка.СуммаНУДт = -СуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРДт = 0;
								Проводка.СуммаВРДт = 0;
							КонецЕсли;
						КонецЕсли;
						
						Если СвойстваСчетаКт.НалоговыйУчет Тогда
							Проводка.СуммаНУКт = -СуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРКт = 0;
								Проводка.СуммаВРКт = 0;
							КонецЕсли;
						КонецЕсли;
						
						// Восстановление расчетов в текущем периоде
						Проводка = Движения.Хозрасчетный.Добавить();
						
						Проводка.Период       = Реквизиты.Период;
						Проводка.Организация  = Реквизиты.Организация;
						
						Проводка.Содержание  = НСтр("ru = 'НДС включен в стоимость ценностей'");
						
						Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
						
						Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", Реквизиты.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", Реквизиты.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
						
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
						
						СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
						СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
						Если СвойстваСчетаДт.Валютный Тогда
							Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаДт = -СуммаНДССписанногоВал;
						КонецЕсли;
						
						Если СвойстваСчетаДт.НалоговыйУчет Тогда
							Проводка.СуммаНУДт = -СуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРДт = 0;
								Проводка.СуммаВРДт = 0;
							КонецЕсли;
						КонецЕсли;
						
						Если СвойстваСчетаКт.НалоговыйУчет Тогда
							Проводка.СуммаНУКт = -СуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРКт = 0;
								Проводка.СуммаВРКт = 0;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				ИначеЕсли СуммаНДССписанного > 0 Тогда
					// Расходы
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					
					Проводка.Содержание  = НСтр("ru = 'НДС включен в стоимость ценностей'");
					
					Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяПрочихДоходовИРасходов);
					
					Проводка.СчетКт = СтрокаУслуги.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"СФПолученные", СтрокаУслуги.СубконтоСФПолученные);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"Контрагенты",  Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
					
					СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					
					Проводка.Сумма = СуммаНДССписанного;
					
					Если Реквизиты.ОтражатьВНалоговомУчете Тогда
						
						Если СвойстваСчетаДт.НалоговыйУчет Тогда
							Проводка.СуммаНУДт = СуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРДт = 0;
								Проводка.СуммаВРДт = 0;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Месяц(Реквизиты.ДокументПоступленияДата) < Месяц(Реквизиты.Период)
				И Реквизиты.СпособОтраженияУслугТекГода = 0 Тогда
				
				Если СуммаНДССписанного <> 0 Тогда
					
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					
					Проводка.Содержание   = НСтр("ru = 'НДС включен в стоимость ценностей'");
					
					Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаУслуги.НоменклатурнаяГруппа);
					
					Проводка.СчетКт = СтрокаУслуги.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"СФПолученные", СтрокаУслуги.СубконтоСФПолученные);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"Контрагенты",  Реквизиты.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
					
					СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					
					Проводка.Сумма = СуммаНДССписанного;
					
					Если Реквизиты.ОтражатьВНалоговомУчете Тогда
						
						Если СвойстваСчетаДт.НалоговыйУчет Тогда
							Проводка.СуммаНУДт = СуммаНДССписанного;
							Если Реквизиты.ПоддержкаПБУ18 Тогда
								Проводка.СуммаПРДт = 0;
								Проводка.СуммаВРДт = 0;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если СуммаНДССписанного <> 0 Тогда
					
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период      = Реквизиты.Период;
					Проводка.Организация = Реквизиты.Организация;
					
					Проводка.Содержание = НСтр("ru = 'НДС включен в стоимость ценностей'");
					
					Проводка.Сумма       = СуммаНДССписанного;
					
					Проводка.СчетДт       = СтрокаУслуги.СчетЗатрат;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаУслуги.Субконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаУслуги.Субконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаУслуги.Субконто3);
					
					СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
						Проводка.ПодразделениеДт = СтрокаУслуги.ПодразделениеЗатрат;
					КонецЕсли;
					
					Если НЕ СвойстваСчетаДт.Забалансовый Тогда
						
						Проводка.СчетКт = СтрокаУслуги.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
							"СФПолученные", СтрокаУслуги.СубконтоСФПолученные);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
							"Контрагенты",  Реквизиты.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
							"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
						
					КонецЕсли;
					
					Если Реквизиты.ОтражатьВНалоговомУчете Тогда
						
						СуммаНУ = СуммаНДССписанного;
						СоздатьПроводкиПоРазнымСчетамБУиНУ(
							Реквизиты, Проводка, СуммаНУ, СтрокаУслуги.СчетЗатратНУ,
							СтрокаУслуги.СубконтоНУ1, СтрокаУслуги.СубконтоНУ2, СтрокаУслуги.СубконтоНУ3, Движения, Отказ);
							
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
	// Движения НДСРаздельныйУчет
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		УчетНДСРаздельный.СформироватьДвиженияНДСРаздельныйУчетПоступлениеЦенностей(
			ДвиженияНДСРаздельныйУчет, Движения, Отказ);
		УчетНДСРаздельный.СформироватьДвиженияНДСПредъявленныйРеализация0КорректировкаПоступления(
			ДвиженияНДСПредъявленныйРеализация0, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРеквизитыКорректировкиПоступленияУслуг(РеквизитыДокумента)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"           // <Регистратор...> - документ, записывающий движения в регистры
	+ "Период,"                // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Склад,"
	+ "ДокументОснование,"
	+ "СчетФактура,"
	+ "ВидОперации,"
	+ "Организация,"
	+ "Подразделение,"
	+ "НДСВключенВСтоимость,"
	+ "СчетУчетаРасчетовСКонтрагентом,"
	+ "СтатьяПрочихДоходовИРасходов,"
	+ "РозницаВПродажныхЦенах,"
	+ "ПоддержкаПБУ18,"
	+ "ОтражатьВНалоговомУчете,"
	+ "ВалютаВзаиморасчетов,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ВестиПартионныйУчет,"
	+ "ДокументПоступленияСсылка,"
	+ "ДокументПоступленияДата,"
	+ "ДатаВходящегоДокумента,"
	+ "НомерВходящегоДокумента,"
	+ "УчетАгентскогоНДС,"
	+ "ВалютаРеглУчета,"
	+ "СпособОтраженияУслугТекГода,"
	+ "ОрганизацияПрименяетУСН,"
	+ "РаздельныйУчетНДСНаСчете19,"
	+ "СчетФактураПриУвеличенииСтоимости,"
	+ "ЭтоКорректировочныйСчетФактура,"
	+ "ИсправляемыйСчетФактура,"
	+ "СокращеннаяАналитика";
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		РеквизитыДокумента, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура ДвиженияРегистровПодсистемыНДСБУ(Реквизиты, СтрокаТаблицы, ТаблицаКоэффициентов, СуммаНДССписанного, СуммаНДССписанногоВал, СуммаНДС0, Движения, Отказ)
	
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		ПропорцияПоСт170 = 0;
	Иначе
		СтруктураПоиска = Новый Структура("ВидЦенности,СтавкаНДС,СчетУчетаНДС", СтрокаТаблицы.ВидЦенности, СтрокаТаблицы.СтавкаНДС, СтрокаТаблицы.СчетУчетаНДС);
		Строки = ТаблицаКоэффициентов.НайтиСтроки(СтруктураПоиска);
		
		Если Реквизиты.ОрганизацияПрименяетУСН Тогда
			ПропорцияПоСт170 = 1;
		ИначеЕсли Строки.Количество() > 0 Тогда
			ПропорцияПоСт170 = Строки[0].НДСКоэффициент;
		Иначе
			ПропорцияПоСт170 = 0;
		КонецЕсли;
	КонецЕсли;
		
	НДС    = (1 - ПропорцияПоСт170) * (СтрокаТаблицы.СуммаНДСРуб - СтрокаТаблицы.СуммаНДСРубДоИзменения);
	НДСВал = (1 - ПропорцияПоСт170) * (СтрокаТаблицы.СуммаНДСВзаиморасчетов - СтрокаТаблицы.СуммаНДСВзаиморасчетовДоИзменения);
	
	СуммаНДССписанного = (СтрокаТаблицы.СуммаНДСРуб - СтрокаТаблицы.СуммаНДСРубДоИзменения) - НДС;
	СуммаНДССписанногоВал = (СтрокаТаблицы.СуммаНДСВзаиморасчетов - СтрокаТаблицы.СуммаНДСВзаиморасчетовДоИзменения) - НДСВал;

	Если НДС = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.ЭтоКорректировочныйСчетФактура Тогда
		Если НДС < 0
		   И Реквизиты.РаздельныйУчетНДСНаСчете19 
		   И Движения.НДСЗаписиКнигиПродаж.Количество() = 0 Тогда // Уменьшение НДС по исходному документу
			СубконтоСФПолученные = Реквизиты.ДокументОснование;
		ИначеЕсли НДС > 0 Тогда 
			СубконтоСФПолученные = Реквизиты.СчетФактураПриУвеличенииСтоимости;
		Иначе
			СубконтоСФПолученные = Реквизиты.СчетФактура;
		КонецЕсли;
	Иначе
		СубконтоСФПолученные = Реквизиты.СчетФактура;
	КонецЕсли;
	
	НалоговыйАгентЗаСчетСобственныхСредств = Перечисления.ВидыЦенностей.ЭтоНалоговыйАгентЗаНерезидента(
		СтрокаТаблицы.ВидЦенности);

	Проводка = Движения.Хозрасчетный.Добавить();

	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	
	Проводка.Содержание = СтрШаблон(
		"%1 по вх.д.%2 от %3",
		?(СтрокаТаблицы.Услуга, СтрокаТаблицы.Содержание, "Поступление " + БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТаблицы.СчетУчета)),
		Реквизиты.НомерВходящегоДокумента,
		Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д"));
	
	
	Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
	
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СубконтоСФПолученные);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",  Реквизиты.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);
	
	Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные Тогда
		
		СубконтоОбСтр = СтрокаТаблицы.СчетЗатрат.ВидыСубконто.Найти(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, "ВидСубконто");
		Если СубконтоОбСтр = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'На счете затрат отсутствует вид субконто <%1>.
										|Субконто для счета учета НДС не может быть заполнено.'");
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, Реквизиты.Регистратор, "ДокументКорректировкиПоступления", "Объект", Отказ);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТаблицы["Субконто"+СубконтоОбСтр.НомерСтроки]);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ НалоговыйАгентЗаСчетСобственныхСредств Тогда
		
		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",
			Реквизиты.ДокументПоступленияСсылка);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = НДСВал;
		КонецЕсли;
		
	Иначе
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
	КонецЕсли;

	Проводка.Сумма = НДС;
	
	БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
	
	Если Реквизиты.ОтражатьВНалоговомУчете
		И НЕ НалоговыйАгентЗаСчетСобственныхСредств Тогда
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = НДС;
		КонецЕсли;
	КонецЕсли;
	
	Если Реквизиты.УчетАгентскогоНДС
		И НЕ НалоговыйАгентЗаСчетСобственныхСредств Тогда

		// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период          = Реквизиты.Период;
		Проводка.Организация     = Реквизиты.Организация;
		
		Проводка.Содержание      = "Начислен НДС в качестве налогового агента";

		Проводка.СчетДт          = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами",
			Реквизиты.ДокументПоступленияСсылка);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = НДСВал;
		КонецЕсли;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , Реквизиты.ДоговорКонтрагента);
		
		Проводка.Сумма = НДС;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение);
		
		Если Реквизиты.ОтражатьВНалоговомУчете Тогда
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = НДС;
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		
		СтрокаТаблицы.СубконтоСФПолученные = СубконтоСФПолученные;
		
		Если СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется Тогда
			
			Если СтрокаТаблицы.НДСПринимаетсяКВычету <> 0 Тогда	
				
				СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
				Сумма = СтрокаТаблицы.НДСПринимаетсяКВычету;
				
				СформироватьПроводкуПоРаспределениюНДС(
					СтрокаТаблицы, Реквизиты, Сумма, СпособУчетаНДС, Движения, Отказ);
				
			КонецЕсли;
				
			Если СтрокаТаблицы.НДСУчитываетсяВCтоимости <> 0 Тогда	
				
				СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
				Сумма = СтрокаТаблицы.НДСУчитываетсяВCтоимости;
				
				СформироватьПроводкуПоРаспределениюНДС(
					СтрокаТаблицы, Реквизиты, Сумма, СпособУчетаНДС, Движения, Отказ);
					
				СуммаНДССписанного = СтрокаТаблицы.НДСУчитываетсяВCтоимости;
				СуммаНДССписанногоВал = СтрокаТаблицы.НДСВалУчитываетсяВCтоимости;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.НДСДляОперацийПо0 <> 0 Тогда	
				
				СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0;
				Сумма = СтрокаТаблицы.НДСДляОперацийПо0;
				
				СформироватьПроводкуПоРаспределениюНДС(
					СтрокаТаблицы, Реквизиты, Сумма, СпособУчетаНДС, Движения, Отказ);
					
				СуммаНДС0 = СтрокаТаблицы.НДСДляОперацийПо0;
					
			КонецЕсли;
			
		ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости Тогда
			
			СуммаНДССписанного = НДС;
			СуммаНДССписанногоВал = НДСВал;
			
		ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0 Тогда
			
			СуммаНДС0 = НДС;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при проведении документов, содержащих отдельные колонки
// для отражения расходов БУ и НУ (Поступление (акт, накладная, УПД), Авансовый отчет, ГТД импорт, Поступление доп.расходов
// Процедура анализирует наличие разниц, определяет постоянные и временные разницы,
// создает проводки по счету из колонки "СчетУчетаБУ"
Процедура СоздатьПроводкиПоРазнымСчетамБУиНУ(Реквизиты, ПроводкаБУ, СуммаНУ, СчетДтНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3, Движения, Отказ)
	
	ИмяСубконто1 = 1;
	ЗначениеСубконто1 = СубконтоНУ1;
	
	Если ТипЗнч(СубконтоНУ2) = Тип("Структура") Тогда
		ИмяСубконто2      = СубконтоНУ2.Тип;
		ЗначениеСубконто2 = СубконтоНУ2.Значение;
	Иначе
		ИмяСубконто2 = 2;
		ЗначениеСубконто2 = СубконтоНУ2;
	КонецЕсли;
	
	Если ТипЗнч(СубконтоНУ3) = Тип("Структура") Тогда
		ИмяСубконто3      = СубконтоНУ3.Тип;
		ЗначениеСубконто3 = СубконтоНУ3.Значение;
	Иначе
		ИмяСубконто3 = 3;
		ЗначениеСубконто3 = СубконтоНУ3;
	КонецЕсли;
	
	СуммаПР = ПроводкаБУ.Сумма - СуммаНУ;
	
	НеПринимаемыйРасход = НалоговыйУчет.ЭтоНепринимаемыйРасходНУ(СубконтоНУ1, СубконтоНУ2, СубконтоНУ3);
	
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПроводкаБУ.СчетКт);
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПроводкаБУ.СчетДт);
	
	Если НеПринимаемыйРасход Тогда
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			ПроводкаБУ.СуммаНУДт = 0;
			Если Реквизиты.ПоддержкаПБУ18 Тогда
				ПроводкаБУ.СуммаПРДт = ПроводкаБУ.Сумма;
				ПроводкаБУ.СуммаВРДт = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			ПроводкаБУ.СуммаНУКт = СуммаНУ;
			Если Реквизиты.ПоддержкаПБУ18 Тогда
				ПроводкаБУ.СуммаПРКт = ПроводкаБУ.Сумма - СуммаНУ;
				ПроводкаБУ.СуммаВРКт = 0;
			КонецЕсли;
		КонецЕсли;
		

	ИначеЕсли СчетДтНУ = ПроводкаБУ.СчетДт Тогда
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			ПроводкаБУ.СуммаНУДт = СуммаНУ;
			Если Реквизиты.ПоддержкаПБУ18 Тогда
				ПроводкаБУ.СуммаПРДт = ПроводкаБУ.Сумма - СуммаНУ;
				ПроводкаБУ.СуммаВРДт = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			ПроводкаБУ.СуммаНУКт = СуммаНУ;
			Если Реквизиты.ПоддержкаПБУ18 Тогда
				ПроводкаБУ.СуммаПРКт = ПроводкаБУ.Сумма - СуммаНУ;
				ПроводкаБУ.СуммаВРКт = 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			ПроводкаБУ.СуммаНУДт = 0;
			Если Реквизиты.ПоддержкаПБУ18 Тогда
				ПроводкаБУ.СуммаПРДт = ПроводкаБУ.Сумма - СуммаНУ;
				ПроводкаБУ.СуммаВРДт = СуммаНУ;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			ПроводкаБУ.СуммаНУКт = СуммаНУ;
			Если Реквизиты.ПоддержкаПБУ18 Тогда
				ПроводкаБУ.СуммаПРКт = ПроводкаБУ.Сумма - СуммаНУ;
				ПроводкаБУ.СуммаВРКт = 0;
			КонецЕсли;
		КонецЕсли;
		// Если отличаются счета БУ и НУ и расход принимаемый - создаем вторую проводку со счетом НУ по дебету
		
		ПроводкаНУ = Движения.Хозрасчетный.Добавить();
		
		ПроводкаНУ.Период      = ПроводкаБУ.Период;
		ПроводкаНУ.Организация = ПроводкаБУ.Организация;
		ПроводкаНУ.Содержание  = ПроводкаБУ.Содержание;
		ПроводкаНУ.Сумма       = 0;
		
		ПроводкаНУ.СчетДт          = СчетДтНУ;
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, ИмяСубконто1, ЗначениеСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, ИмяСубконто2, ЗначениеСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, ИмяСубконто3, ЗначениеСубконто3);
		
		Если ЗначениеЗаполнено(ПроводкаБУ.СчетКт) Тогда
			
			ПроводкаНУ.СчетКт          = ПроводкаБУ.СчетКт;
			Для каждого Элемент Из ПроводкаБУ.СубконтоКт Цикл
				ПроводкаНУ.СубконтоКт.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			ПроводкаНУ, ПроводкаБУ.ПодразделениеДт, ПроводкаБУ.ПодразделениеКт);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПроводкаНУ.СчетДт);
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			ПроводкаНУ.СуммаНУДт = СуммаНУ;
			Если Реквизиты.ПоддержкаПБУ18 Тогда
				ПроводкаНУ.СуммаПРДт = 0;
				ПроводкаНУ.СуммаВРДт = -СуммаНУ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьПустуюТаблицуСписанныеТовары() Экспорт
	
	ТаблицаСписанныеТовары = Новый ТаблицаЗначений;
	ТаблицаСписанныеТовары.Колонки.Добавить("ИмяСписка",          ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаСписанныеТовары.Колонки.Добавить("СинонимСписка",      ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаСписанныеТовары.Колонки.Добавить("Период",             ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаСписанныеТовары.Колонки.Добавить("НомерСтроки",        ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетУчета",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Партия",             Документы.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("Себестоимость",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("Количество",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСчетСписания",    Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконто1");
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконто2");
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконто3");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто1");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто2");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто3");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорПодразделение",   БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаСписанныеТовары.Колонки.Добавить("Подразделение",      БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписания",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияНУ",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияПР",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияВР",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаКорСписанияНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаКорСписанияПР", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаКорСписанияВР", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("Содержание",		  ОбщегоНазначения.ОписаниеТипаСтрока(0));

	ТаблицаСписанныеТовары.Колонки.Добавить("Комитент",  					Справочники.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("ДоговорКомиссии",  			Справочники.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетРасчетовСКомитентом",		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетАвансовСКомитентом",		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВалютаРасчетовСКомитентом",	Справочники.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаРасчетовСКомитентом",		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаПоступленияОтКомитента",	ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	ТаблицаСписанныеТовары.Колонки.Добавить("Покупатель",                   Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВыставленСФ",                  Новый ОписаниеТипов("Булево"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ДатаСФ",                       ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетФактура",                  Документы.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("КлючСтроки",                   ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВозвратПоТекущемуДокументу",   Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаСписанныеТовары;
	
КонецФункции

Функция ПолучитьОстаткиТоваров(МоментВремени, Организация, ПодразделениеОрганизации, ТаблицаСписания, ТаблицаВозвраты = Неопределено) Экспорт
	
	МассивСчетовУчета = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "СчетУчета");
	
	// Блокируем регистр Хозрасчетный для получения остатков
	Если ТранзакцияАктивна() Тогда
		Блокировка = Новый БлокировкаДанных;
		ТаблицаСписания.Индексы.Добавить("СчетУчета");
		
		Для каждого СчетУчета Из МассивСчетовУчета Цикл
			
			// Отдельная блокировка по каждому счету учета
			СуммовойУчетПоСкладам = БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СчетУчета);
			Если СуммовойУчетПоСкладам Тогда
				Если БухгалтерскийУчет.НаСчетеВедетсяУчетПоКонтрагентам(СчетУчета) Тогда
					ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура,Контрагент,Склад");
					ТаблицаСписанияПоСчету.Свернуть("Номенклатура,Контрагент,Склад");
				Иначе
					ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура,Склад");
					ТаблицаСписанияПоСчету.Свернуть("Номенклатура,Склад");
				КонецЕсли;
			Иначе
				Если БухгалтерскийУчет.НаСчетеВедетсяУчетПоКонтрагентам(СчетУчета) Тогда
					ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура,Контрагент");
					ТаблицаСписанияПоСчету.Свернуть("Номенклатура,Контрагент");
				Иначе
					ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура");
					ТаблицаСписанияПоСчету.Свернуть("Номенклатура");
				КонецЕсли;
			КонецЕсли;
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
			ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, МоментВремени.Дата));
			ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
			ЭлементБлокировки.УстановитьЗначение("Счет",        СчетУчета);
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
			Если СвойстваСчета.УчетПоПодразделениям Тогда
				ЭлементБлокировки.УстановитьЗначение("Подразделение", ПодразделениеОрганизации);
			КонецЕсли;
			ЭлементБлокировки.ИсточникДанных = ТаблицаСписанияПоСчету;
			Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
					И НЕ СчетУчета = ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение Тогда // Обход ошибки при наложении блокировки
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "Номенклатура");
				ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады 
					И СуммовойУчетПоСкладам Тогда
					// Если нет суммового учета по складам - суммы получаются запросом без отбора по складам,
					// поэтому блокировать склады не нужно
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "Склад");
				ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Контрагент");
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Блокировка.Заблокировать();
	КонецЕсли;
	
	// Получаем остатки номенклатуры
	
	МассивНоменклатуры = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Номенклатура");
	МассивСкладов      = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Склад");
	МассивКонтрагентов = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Контрагент");

	// Сортировка счетов учета
	СчетаУчетаН   = Новый Массив; // счета с суммовым учетом только по номенклатуре
	СчетаУчетаНС  = Новый Массив; // счета с суммовым учетом по номенклатуре и складам
	СчетаУчетаНП  = Новый Массив; // счета с суммовым учетом по номенклатуре и партиям
	СчетаУчетаНПС = Новый Массив; // счета с суммовым учетом по номенклатуре, складам и партиям
	СчетаУчетаНК  = Новый Массив; // счета с суммовым учетом по контрагентам, и номенклатуре
	СчетаУчетаНПК = Новый Массив; // счета с суммовым учетом по контрагентам, номенклатуре и партиям
	СчетаУчетаНКС = Новый Массив; // счета с суммовым учетом по контрагентам, номенклатуре и складам

	СчетаУчетаН_Склад  = Новый Массив; // счета с суммовым учетом только по номенклатуре и количественным по складу
	СчетаУчетаНП_Склад = Новый Массив; // счета с суммовым учетом по номенклатуре и партиям и количественным по складу
	СчетаУчетаНК_Склад = Новый Массив; // счета с суммовым учетом по номенклатуре и контрагентам и количественным по складу

	СортировкаСчетовУчета(МассивСчетовУчета,
	                      СчетаУчетаН,
	                      СчетаУчетаНС,
	                      СчетаУчетаНП,
	                      СчетаУчетаНПС,
	                      СчетаУчетаНК,
	                      СчетаУчетаНПК,
	                      СчетаУчетаНКС,
	                      СчетаУчетаН_Склад,
	                      СчетаУчетаНП_Склад,
	                      СчетаУчетаНК_Склад);

	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);

	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);

	ВидыСубконтоНПС = Новый Массив;
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	ВидыСубконтоНК = Новый Массив;
	ВидыСубконтоНК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);

	ВидыСубконтоНПК = Новый Массив;
	ВидыСубконтоНПК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНПК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоНПК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);

	ВидыСубконтоНКС = Новый Массив;
	ВидыСубконтоНКС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНКС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоНКС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени",      МоментВремени);
	Запрос.УстановитьПараметр("Подразделение",      ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	Запрос.УстановитьПараметр("МассивСкладов",      МассивСкладов);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("СчетаУчетаН",        СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНС",       СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНП",       СчетаУчетаНП);
	Запрос.УстановитьПараметр("СчетаУчетаНПС",      СчетаУчетаНПС);
	Запрос.УстановитьПараметр("СчетаУчетаНК",       СчетаУчетаНК);
	Запрос.УстановитьПараметр("СчетаУчетаНПК",      СчетаУчетаНПК);
	Запрос.УстановитьПараметр("СчетаУчетаНКС",      СчетаУчетаНКС);
	Запрос.УстановитьПараметр("СчетаУчетаН_Склад",  СчетаУчетаН_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНП_Склад", СчетаУчетаНП_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНК_Склад", СчетаУчетаНК_Склад);
	Запрос.УстановитьПараметр("ВидысубконтоН",      ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",     ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоНП",     ВидысубконтоНП);
	Запрос.УстановитьПараметр("ВидыСубконтоНПС",    ВидыСубконтоНПС);
	Запрос.УстановитьПараметр("ВидыСубконтоНК",     ВидыСубконтоНК);
	Запрос.УстановитьПараметр("ВидыСубконтоНПК",    ВидыСубконтоНПК);
	Запрос.УстановитьПараметр("ВидыСубконтоНКС",    ВидыСубконтоНКС);
	Запрос.УстановитьПараметр("ПустойСклад",        Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",       Неопределено);
	Запрос.УстановитьПараметр("ПустаяОтгрузка",     Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	ТекстСуммыКоличественныхСкладов = "";
	Текст = "";
	
	//Если не ведется суммовой учет по складам, соберем остатки без учета складов	
	Если СчетаУчетаН_Склад.Количество() > 0 Тогда
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаНУОстатокДт, 0)) КАК СтоимостьНУ,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаПРОстатокДт, 0)) КАК СтоимостьПР,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаВРОстатокДт, 0)) КАК СтоимостьВР
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаН
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаН),
		|			&ВидыСубконтоН,
		|			&УсловиеПоПодразделению
		|				И Субконто1 В (&МассивНоменклатуры)
		|				И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ОстаткиПоСкладам.Счет КАК СчетУчета,
		|	ОстаткиПоСкладам.Подразделение,
		|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустойСклад) КАК Склад,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаН_Склад
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаН_Склад),
		|			&ВидыСубконтоНС,
		|			&УсловиеПоПодразделению
		|				И Субконто1 В (&МассивНоменклатуры)
		|				И Субконто2 В (&МассивСкладов)
		|				И Организация = &Организация) КАК ОстаткиПоСкладам
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.Счет,
		|	ОстаткиПоСкладам.Подразделение,
		|	ОстаткиПоСкладам.Субконто1,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустойСклад)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";

	КонецЕсли;
	
	Если СчетаУчетаНП_Склад.Количество() > 0 Тогда
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(Остатки.Субконто2, НЕОПРЕДЕЛЕНО) КАК ДокументОприходования,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаНУОстатокДт, 0)) КАК СтоимостьНУ,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаПРОстатокДт, 0)) КАК СтоимостьПР,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаВРОстатокДт, 0)) КАК СтоимостьВР
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаНП
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНП),
		|			&ВидыСубконтоНП,
		|			&УсловиеПоПодразделению
		|				И Субконто1 В (&МассивНоменклатуры)
		|				И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	ЕСТЬNULL(Остатки.Субконто2, НЕОПРЕДЕЛЕНО)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета,
		|	Номенклатура,
		|	ДокументОприходования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПоСкладам.Счет КАК СчетУчета,
		|	ОстаткиПоСкладам.Подразделение,
		|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустаяПартия) КАК ДокументОприходования,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто3, &ПустойСклад) КАК Склад,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаНП_Склад
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНП_Склад),
		|			&ВидыСубконтоНПС,
		|			&УсловиеПоПодразделению
		|				И Субконто1 В (&МассивНоменклатуры)
		|				И Субконто3 В (&МассивСкладов)
		|				И Организация = &Организация) КАК ОстаткиПоСкладам
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.Счет,
		|	ОстаткиПоСкладам.Подразделение,
		|	ОстаткиПоСкладам.Субконто1,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустаяПартия),
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто3, &ПустойСклад)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета,
		|	Номенклатура,
		|	ДокументОприходования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
	КонецЕсли;
	
	Если СчетаУчетаНК_Склад.Количество() > 0 Тогда
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(Остатки.Субконто2, &ПустойКонтрагент) КАК Контрагент,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаНУОстатокДт, 0)) КАК СтоимостьНУ,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаПРОстатокДт, 0)) КАК СтоимостьПР,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаВРОстатокДт, 0)) КАК СтоимостьВР
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаНК
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНК),
		|			&ВидыСубконтоНК,
		|			&УсловиеПоПодразделению
		|				И Субконто1 В (&МассивНоменклатуры)
		|				И Субконто2 В (&МассивКонтрагентов)
		|				И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	ЕСТЬNULL(Остатки.Субконто2, &ПустойКонтрагент)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета,
		|	Номенклатура,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ОстаткиПоСкладам.Счет КАК СчетУчета,
		|	ОстаткиПоСкладам.Подразделение,
		|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустойКонтрагент) КАК Контрагент,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто3, &ПустойСклад) КАК Склад,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаНК_Склад
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНК_Склад),
		|			&ВидыСубконтоНКС,
		|			&УсловиеПоПодразделению
		|				И Субконто1 В (&МассивНоменклатуры)
		|				И Субконто2 В (&МассивКонтрагентов)
		|				И Субконто3 В (&МассивСкладов)
		|				И Организация = &Организация) КАК ОстаткиПоСкладам
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.Счет,
		|	ОстаткиПоСкладам.Подразделение,
		|	ОстаткиПоСкладам.Субконто1,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустойКонтрагент),
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто3, &ПустойСклад)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета,
		|	Номенклатура,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";

	КонецЕсли;
	
	Если ТаблицаВозвраты <> Неопределено И ТаблицаВозвраты.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ТаблицаВозвраты",    ТаблицаВозвраты);
	
		Текст = Текст + "
		|ВЫБРАТЬ
		|	ТаблицаВозвраты.Партия,
		|	ТаблицаВозвраты.Склад,
		|	ТаблицаВозвраты.Номенклатура,
		|	&Организация,
		|	ТаблицаВозвраты.Подразделение,
		|	ТаблицаВозвраты.СчетУчета,
		|	ТаблицаВозвраты.Количество КАК Количество,
		|	ТаблицаВозвраты.СуммаСписания КАК СуммаСписания,
		|	ТаблицаВозвраты.СуммаСписанияНУ КАК СуммаСписанияНУ,
		|	ТаблицаВозвраты.СуммаСписанияПР КАК СуммаСписанияПР,
		|	ТаблицаВозвраты.СуммаСписанияВР КАК СуммаСписанияВР
		|ПОМЕСТИТЬ ТаблицаВозвраты
		|ИЗ
		|	&ТаблицаВозвраты КАК ТаблицаВозвраты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВозвраты.СчетУчета КАК СчетУчета,
		|	ТаблицаВозвраты.Подразделение КАК Подразделение,
		|	ТаблицаВозвраты.Номенклатура КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	ТаблицаВозвраты.Партия КАК ДокументОприходования,
		|	ТаблицаВозвраты.Склад КАК Склад,
		|	ТаблицаВозвраты.Организация КАК Организация,
		|	СУММА(ТаблицаВозвраты.Количество) КАК КоличествоПоСкладу,
		|	СУММА(ТаблицаВозвраты.Количество) КАК Количество,
		|	СУММА(ТаблицаВозвраты.СуммаСписания) КАК Стоимость,
		|	СУММА(ТаблицаВозвраты.СуммаСписанияНУ) КАК СтоимостьНУ,
		|	СУММА(ТаблицаВозвраты.СуммаСписанияПР) КАК СтоимостьПР,
		|	СУММА(ТаблицаВозвраты.СуммаСписанияВР) КАК СтоимостьВР
		|ИЗ
		|	ТаблицаВозвраты КАК ТаблицаВозвраты
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаВозвраты.СчетУчета,
		|	ТаблицаВозвраты.Подразделение,
		|	ТаблицаВозвраты.Номенклатура,
		|	ТаблицаВозвраты.Склад,
		|	ТаблицаВозвраты.Партия,
		|	ТаблицаВозвраты.Организация";
	КонецЕсли;
	
	Если СчетаУчетаН.Количество() > 0 И СчетаУчетаН_Склад.Количество() = 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаНУОстатокДт, 0)) КАК СтоимостьНУ,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаПРОстатокДт, 0)) КАК СтоимостьПР,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаВРОстатокДт, 0)) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаН),
		|			&ВидыСубконтоН,
		|			&УсловиеПоПодразделению
		|				И Субконто1 В (&МассивНоменклатуры)
		|				И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	Остатки.Организация";

	ИначеЕсли СчетаУчетаН.Количество() > 0 Тогда
		// СчетаУчетаН_Склад.Количество() > 0 
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Подразделение КАК Подразделение,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	ОстаткиПоСкладам.Склад,
		|	&Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Стоимость, 0)) КАК Стоимость,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.СтоимостьНУ, 0)) КАК СтоимостьНУ,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.СтоимостьПР, 0)) КАК СтоимостьПР,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.СтоимостьВР, 0)) КАК СтоимостьВР
		|ИЗ
		|	ТаблицаСчетаУчетаН_Склад КАК ОстаткиПоСкладам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаН КАК СуммовыеОстатки
		|		ПО ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
		|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Подразделение,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ОстаткиПоСкладам.Склад";

	КонецЕсли;

	Если СчетаУчетаНС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	Остатки.Субконто2 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаНУОстатокДт, 0)) КАК СтоимостьНУ,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаПРОстатокДт, 0)) КАК СтоимостьПР,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаВРОстатокДт, 0)) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНС),
		|			&ВидыСубконтоНС,
		|			&УсловиеПоПодразделению
		|				И Субконто1 В (&МассивНоменклатуры)
		|				И Субконто2 В (&МассивСкладов)
		|				И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаНП.Количество() > 0 И СчетаУчетаНП_Склад.Количество() =  0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	ЕСТЬNULL(Остатки.Субконто2, &ПустаяПартия) КАК ДокументОприходования,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаНУОстатокДт, 0)) КАК СтоимостьНУ,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаПРОстатокДт, 0)) КАК СтоимостьПР,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаВРОстатокДт, 0)) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНП),
		|			&ВидыСубконтоНП,
		|			&УсловиеПоПодразделению
		|				И Субконто1 В (&МассивНоменклатуры)
		|				И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	ЕСТЬNULL(Остатки.Субконто2, &ПустаяПартия),
		|	Остатки.Организация";
		
	ИначеЕсли СчетаУчетаНП.Количество() > 0 Тогда
		//СчетаУчетаНП_Склад.Количество() >  0
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Подразделение КАК Подразделение,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	ОстаткиПоСкладам.ДокументОприходования,
		|	ОстаткиПоСкладам.Склад,
		|	&Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Стоимость, 0)) КАК Стоимость,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.СтоимостьНУ, 0)) КАК СтоимостьНУ,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.СтоимостьПР, 0)) КАК СтоимостьПР,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.СтоимостьВР, 0)) КАК СтоимостьВР
		|ИЗ
		|	ТаблицаСчетаУчетаНП_Склад КАК ОстаткиПоСкладам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаНП КАК СуммовыеОстатки
		|		ПО ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
		|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
		|			И ОстаткиПоСкладам.ДокументОприходования = СуммовыеОстатки.ДокументОприходования
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Подразделение,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ОстаткиПоСкладам.ДокументОприходования,
		|	ОстаткиПоСкладам.Склад";

	КонецЕсли;

	Если СчетаУчетаНПС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	ЕСТЬNULL(Остатки.Субконто2, &ПустаяПартия) КАК ДокументОприходования,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаНУОстатокДт, 0)) КАК СтоимостьНУ,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаПРОстатокДт, 0)) КАК СтоимостьПР,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаВРОстатокДт, 0)) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНПС),
		|			&ВидыСубконтоНПС,
		|			&УсловиеПоПодразделению
		|				И Субконто1 В (&МассивНоменклатуры)
		|				И Субконто3 В (&МассивСкладов)
		|				И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	ЕСТЬNULL(Остатки.Субконто2, &ПустаяПартия),
		|	Остатки.Субконто3,
		|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаНК.Количество() > 0 И СчетаУчетаНК_Склад.Количество() = 0 Тогда // субкомиссия
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаНУОстатокДт, 0)) КАК СтоимостьНУ,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаПРОстатокДт, 0)) КАК СтоимостьПР,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаВРОстатокДт, 0)) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНК),
		|			&ВидыСубконтоНК,
		|			&УсловиеПоПодразделению
		|				И Субконто1 В (&МассивНоменклатуры)
		|				И Субконто2 В (&МассивКонтрагентов)
		|				И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Организация";

	ИначеЕсли СчетаУчетаНК.Количество() > 0 Тогда
		//СчетаУчетаНК_Склад.Количество() > 0
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Подразделение КАК Подразделение,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	ОстаткиПоСкладам.Склад,
		|	&Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Стоимость, 0)) КАК Стоимость,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.СтоимостьНУ, 0)) КАК СтоимостьНУ,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.СтоимостьПР, 0)) КАК СтоимостьПР,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.СтоимостьВР, 0)) КАК СтоимостьВР
		|ИЗ
		|	ТаблицаСчетаУчетаНК_Склад КАК ОстаткиПоСкладам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаНК КАК СуммовыеОстатки
		|		ПО ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
		|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
		|			И ОстаткиПоСкладам.Контрагент = СуммовыеОстатки.Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Подразделение,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ОстаткиПоСкладам.Контрагент,
		|	ОстаткиПоСкладам.Склад";

	КонецЕсли;

	Если СчетаУчетаНПК.Количество() > 0 Тогда // субкомиссия

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	ЕСТЬNULL(Остатки.Субконто2, &ПустаяПартия) КАК ДокументОприходования,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаНУОстатокДт, 0)) КАК СтоимостьНУ,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаПРОстатокДт, 0)) КАК СтоимостьПР,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаВРОстатокДт, 0)) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНПК),
		|			&ВидыСубконтоНПК,
		|			&УсловиеПоПодразделению
		|				И Субконто1 В (&МассивНоменклатуры)
		|				И Субконто3 В (&МассивКонтрагентов)
		|				И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	ЕСТЬNULL(Остатки.Субконто2, &ПустаяПартия),
		|	Остатки.Субконто3,
		|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаНКС.Количество() > 0 Тогда // дав. сырье

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаНУОстатокДт, 0)) КАК СтоимостьНУ,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаПРОстатокДт, 0)) КАК СтоимостьПР,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаВРОстатокДт, 0)) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНКС),
		|			&ВидыСубконтоНКС,
		|			&УсловиеПоПодразделению
		|				И Субконто1 В (&МассивНоменклатуры)
		|				И Субконто2 В (&МассивКонтрагентов)
		|				И Субконто3 В (&МассивСкладов)
		|				И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,
		|	Остатки.Организация";

	КонецЕсли;
	
	Текст = ТекстСуммыКоличественныхСкладов + Текст;
	
	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Текст = СтрЗаменить(Текст, "&УсловиеПоПодразделению", "Подразделение = &Подразделение");
	Иначе
		Текст = СтрЗаменить(Текст, "&УсловиеПоПодразделению", "ИСТИНА");
	КонецЕсли;

	Запрос.Текст = Текст;

	Результат = Запрос.Выполнить().Выгрузить();

	Если СчетаУчетаНПК.Количество() + СчетаУчетаНПС.Количество() + СчетаУчетаНП.Количество() <> 0 Тогда
		
		ОбщегоНазначенияБПВызовСервера.ДобавитьДатуДокументаКРезультатуЗапроса(Результат,"ДокументОприходования", "ДокументОприходованияДата");

		Результат.Сортировать("ДокументОприходованияДата, ДокументОприходования", Новый СравнениеЗначений);

	КонецЕсли;

	Результат.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
	НомерСтроки = 1;
	Для каждого СтрокаРезультата Из Результат Цикл
		СтрокаРезультата.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

	Возврат Результат;

КонецФункции 

// Возвращает массив счетов, остатки по которым всегда получаются оперативно.
//
// Возвращаемое значение:
//	Массив - Массив счетов.
//
Функция СчетаРассчитываемыеОперативно() Экспорт
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);                 // 07
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств); // 08.04.1
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе);        // 10.10
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);   // 10.11
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов); // 10.12
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение);     // 002
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку_);         // 003
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию);               // 004
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеПринятоеДляМонтажа);         // 005
	СписокСчетов = БухгалтерскийУчет.СформироватьМассивСубсчетов(СписокСчетов);
	
	Возврат СписокСчетов;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ДЕКЛАРАЦИИ О РОЗНИЧНЫХ ПРОДАЖАХ АЛКОГОЛЯ

Функция СведенияОПодразделенииXML(Подразделение, ИНН)
	
	СтруктураСведенияОбОП = РегламентированнаяОтчетностьАЛКО.ПолучитьПустуюСтруктуруСведенийОбОП();
	    
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		
		Возврат СтруктураСведенияОбОП;
		
	ИначеЕсли ТипЗнч(Подразделение) = Тип("СправочникСсылка.Организации") Тогда
		
		СтруктураСведенияОбОП.Наименование = Подразделение.Наименование;
		СтруктураСведенияОбОП.КПП = Подразделение.КПП;
		
	ИначеЕсли ТипЗнч(Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		СтруктураСведенияОбОП.Наименование = Подразделение.Наименование;
		СтруктураСведенияОбОП.КПП = ?(ЗначениеЗаполнено(Подразделение.РегистрацияВНалоговомОргане), Подразделение.РегистрацияВНалоговомОргане.КПП, Подразделение.КПП);
		
	Иначе
		
		Возврат СтруктураСведенияОбОП;
		
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;	
	МассивОбъектов.Добавить(Подразделение);
	
	ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов);
		
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	Если ТаблицаКонтактнойИнформации.Количество() > 1 Тогда
											  
		СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации.Найти(ВидКонтактнойИнформации);
		Если НЕ СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда
			СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации[0];
		КонецЕсли;
		
	ИначеЕсли ТаблицаКонтактнойИнформации.Количество() = 1 Тогда
		СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации[0];
	Иначе
		СтрокаТаблицаКонтактнойИнформации = Неопределено;
	КонецЕсли;
	
	Если НЕ СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда	
		Если Не ЗначениеЗаполнено(СтрокаТаблицаКонтактнойИнформации.ЗначенияПолей) Тогда
		    СтрокаТаблицаКонтактнойИнформации = Неопределено;		
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда
	    Возврат СтруктураСведенияОбОП;
	КонецЕсли; 
	
	СтрокаXML = СтрокаТаблицаКонтактнойИнформации.ЗначенияПолей;
	АдресОрганизации = РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXML(СтрокаXML);
	ЗаполнитьЗначенияСвойств(СтруктураСведенияОбОП, АдресОрганизации);
	
	Возврат СтруктураСведенияОбОП;
	
КонецФункции
	
Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение12ФормаОтчета2012Кв3(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000109", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000111", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000112", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000114", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000115", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000116", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000314", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000316", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000109", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000110", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000111", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000112", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000312", Истина, Ложь);
	
КонецПроцедуры

// Подготавливает таблицу расхода товаров для документа Отчет комиссионера,
// в которых нужна расчетная оценка стоимости списания,
// при этом для списания учитываются партии возвращенные тем же документом
// Параметры:
//  ТаблицаТоварыСписанные - ТаблицаЗначений - Содержит таблицу значений с списком товаров, оценку которых нужно получить
//  ТаблицаРеквизиты - ТаблицаЗначений - Таблица с реквизитами документа, влияющими на списание товаров
//  ТаблицаВозвраты - ТаблицаЗначений - Таблица с остатками возвращенных партий
//  Отказ - Булево - Признак ошибки, выявленной в ходе подготовки таблицы
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица товаров с рассчитанной оценкой стоимости списания
//
Функция ПодготовитьТаблицуСписанныеТоварыСУчетомВозвратаОтчетКомиссионера(ТаблицаТоварыСписанные, ТаблицаРеквизиты, 
		ТаблицаВозвраты, Отказ) Экспорт
	
	СписанныеТовары = Новый Структура;
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) ИЛИ Не ЗначениеЗаполнено(ТаблицаТоварыСписанные)  Тогда
		Возврат ПолучитьПустуюТаблицуСписанныеТоварыОтчетКомиссионера();
	КонецЕсли;
	
	Параметры = ПодготовитьРеквизитыСписанныеТовары(ТаблицаРеквизиты, ТаблицаВозвраты);
	Реквизиты = Параметры.Реквизиты[0];
	НадоРассчитать = Новый Структура;
	НадоОценить    = Новый Структура;
	ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(
		Реквизиты.Организация, Реквизиты.Период);
	
	ИмяТаблицы = "СписанныеТовары";
	
	СписанныеТовары.Вставить(ИмяТаблицы, ПолучитьПустуюТаблицуСписанныеТоварыОтчетКомиссионера());
	
	ПараметрыТаблицыТовары = ПодготовитьПараметрыТаблицыСписанныеКомиссионныеТоварыОтчетКомиссионера(
			ТаблицаТоварыСписанные, ТаблицаРеквизиты);
		
	ТаблицаТовары          = ПараметрыТаблицыТовары.ТаблицаТовары;
	ТаблицаНадоРассчитать  = ТаблицаТовары.СкопироватьКолонки();
	Если ИспользуетсяОтложенноеПроведение Тогда
		ТаблицаНадоОценить = СписанныеТовары[ИмяТаблицы].СкопироватьКолонки();
		СчетаРассчитываемыеОперативно = СчетаРассчитываемыеОперативно();
	КонецЕсли;
	
	// Отделим запасы, которые будут списаны по указанной в документе стоимости,
	// от запасов, стоимость которых будет расчитана на основании остатков.
	// Строки, стоимость которых считать не надо, сразу запишем в СписанныеТовары.
	Для Каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл
		
		Если СтрокаТаблицыТовары.Себестоимость > 0 Тогда
			
			// Стоимость указана в документе
			
			НоваяСтрока = СписанныеТовары[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
			НоваяСтрока.Подразделение      = Реквизиты.Подразделение;
			НоваяСтрока.Партия             = СтрокаТаблицыТовары.ДокументОприходования;
			НоваяСтрока.СуммаСписания      = СтрокаТаблицыТовары.Себестоимость;
			НоваяСтрока.СуммаСписанияНУ    = СтрокаТаблицыТовары.Себестоимость;
			НоваяСтрока.СуммаСписанияПР    = 0;
			НоваяСтрока.СуммаСписанияВР    = 0;
			НоваяСтрока.СуммаКорСписанияНУ = СтрокаТаблицыТовары.Себестоимость;
			НоваяСтрока.СуммаКорСписанияПР = 0;
			НоваяСтрока.СуммаКорСписанияВР = 0;
			
		ИначеЕсли ИспользуетсяОтложенноеПроведение И Не ОперативныйРасчетПоСчету(СтрокаТаблицыТовары, СчетаРассчитываемыеОперативно) Тогда
			
			// Цену берём из плановых цен
			
			НоваяСтрока = ТаблицаНадоОценить.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
			НоваяСтрока.Подразделение = Реквизиты.Подразделение;
			
		Иначе 
			
			// Надо рассчитать
			
			НоваяСтрока = ТаблицаНадоРассчитать.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
			
		КонецЕсли;

	КонецЦикла; // По строкам ТаблицаТовары
		
	Если ИспользуетсяОтложенноеПроведение И ТаблицаНадоОценить.Количество() > 0 Тогда
		НадоОценить.Вставить(ИмяТаблицы, ТаблицаНадоОценить);
	КонецЕсли;
	
	Если ТаблицаНадоРассчитать.Количество() > 0 Тогда
		НадоРассчитать.Вставить(ИмяТаблицы, ТаблицаНадоРассчитать);
	КонецЕсли;
	
	ТоварыСОценкойСтоимости = ВыполнитьРасчетСтоимостиСУчетомВозврата(НадоОценить, НадоРассчитать, Реквизиты, 
			СписанныеТовары, Параметры, ИспользуетсяОтложенноеПроведение, Отказ);
			
	Возврат ТоварыСОценкойСтоимости.СписанныеТовары;
	
КонецФункции

Функция ВыполнитьРасчетСтоимостиСУчетомВозврата(НадоОценить, НадоРассчитать, Реквизиты, СписанныеТовары, 
		Параметры, ИспользуетсяОтложенноеПроведение, Отказ)
	
	// Нужно рассчитать стоимость списания - определить её на основании типа цен плановой себестоимости.
	ТипЦенПлановойСебестоимости = ?(НадоОценить.Количество() > 0,
		Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить(),
		Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
		
	Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда
			
		ОтборНоменклатуры = Новый Массив;
		Для Каждого КлючИЗначение Из НадоОценить Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборНоменклатуры, КлючИЗначение.Значение.ВыгрузитьКолонку("Номенклатура"));
		КонецЦикла;
		
		ЦеныНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(ОтборНоменклатуры, ТипЦенПлановойСебестоимости, Реквизиты.Период);
		ЦеныНоменклатуры.Индексы.Добавить("Номенклатура");
		
		Для Каждого КлючИЗначение Из НадоОценить Цикл
			
			ИмяТаблицы             = КлючИЗначение.Ключ;
			ТаблицаНадоОценить     = КлючИЗначение.Значение;
			ТаблицаСписанныеТовары = СписанныеТовары[ИмяТаблицы];
			
			Для Каждого СтрокаТаблицы Из ТаблицаНадоОценить Цикл
				
				НоваяСтрока = ТаблицаСписанныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					
				ЦенаНоменклатуры = ЦеныНоменклатуры.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
				Если ЦенаНоменклатуры = Неопределено ИЛИ ЦенаНоменклатуры.Кратность = 0 Тогда
					Стоимость = 0;
				Иначе
					Стоимость = НоваяСтрока.Количество * ЦенаНоменклатуры.Цена * ЦенаНоменклатуры.Курс / ЦенаНоменклатуры.Кратность;
				КонецЕсли;
				НоваяСтрока.СуммаСписания      = Стоимость;
				НоваяСтрока.СуммаСписанияНУ    = Стоимость;
				НоваяСтрока.СуммаКорСписанияНУ = Стоимость;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого КлючИЗначение Из НадоОценить Цикл
			
			ИмяТаблицы             = КлючИЗначение.Ключ;
			ТаблицаНадоОценить     = КлючИЗначение.Значение;
			ТаблицаСписанныеТовары = СписанныеТовары[ИмяТаблицы];
			
			Для Каждого СтрокаТаблицы Из ТаблицаНадоОценить Цикл
				
				НоваяСтрока = ТаблицаСписанныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;

	// Спишем остатки из таблицы
	СпособОценкиМПЗПоСредней = (УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период)
		= Перечисления.СпособыОценки.ПоСредней);

	// При отложенном проведении очистим неиспользуемую аналитику для строк таблиц,
	// по которым не будем получать остатки.
	Если ИспользуетсяОтложенноеПроведение Тогда
		ОчиститьНеиспользуемуюАналитику(СписанныеТовары, СпособОценкиМПЗПоСредней);
	КонецЕсли;
			
	Если НадоРассчитать.Количество() = 0 Тогда

		Для каждого КлючИЗначение Из СписанныеТовары Цикл
			КлючИЗначение.Значение.Сортировать("ИмяСписка, НомерСтроки");
		КонецЦикла;

		Возврат СписанныеТовары;

	КонецЕсли;
	
	// Нужно рассчитать стоимость списания - определить её на основании остатков.

	// Подготовим таблицу, по которой отберем остатки
	ОтборОстатков = Новый ТаблицаЗначений();
	ОтборОстатков.Колонки.Добавить("СчетУчета",    Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ОтборОстатков.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОтборОстатков.Колонки.Добавить("Склад",        Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОтборОстатков.Колонки.Добавить("Контрагент",   Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Для Каждого КлючИЗначение Из НадоРассчитать Цикл
		Для Каждого СтрокаТаблицы Из КлючИЗначение.Значение Цикл
			НоваяСтрока = ОтборОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Контрагент = ?(ЗначениеЗаполнено(СтрокаТаблицы.Комитент), СтрокаТаблицы.Комитент, Реквизиты.Контрагент);
		КонецЦикла;
	КонецЦикла;
	
	// Получим остатки
	МоментВремени = Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор);
	ТаблицаОстатки = ПолучитьОстаткиТоваров(
		МоментВремени,
		Реквизиты.Организация,
		Реквизиты.Подразделение,
		ОтборОстатков,
		Параметры.ТаблицаВозвраты);
		
	ТаблицаОстатки.Индексы.Добавить("Номенклатура, СчетУчета");
	ТаблицаОстатки.Индексы.Добавить("НомерСтроки");

	КонтролироватьОстаток = НЕ БухгалтерскийУчетПереопределяемый.ОтключитьКонтрольОтрицательныхОстатков()
		И НЕ ИспользуетсяОтложенноеПроведение;
	
	Для Каждого КлючИЗначение Из НадоРассчитать Цикл
		
		ИмяТаблицы             = КлючИЗначение.Ключ;
		ТаблицаНадоРассчитать  = КлючИЗначение.Значение;
		ТаблицаСписанныеТовары = СписанныеТовары[ИмяТаблицы];
		
		СписатьОстаткиТоваров(
			ТаблицаНадоРассчитать,
			ТаблицаОстатки,
			ТаблицаСписанныеТовары,
			СпособОценкиМПЗПоСредней,
			КонтролироватьОстаток,
			Реквизиты,
			Отказ);
			
	КонецЦикла;
	
	Если ИспользуетсяОтложенноеПроведение Тогда
		// При отложенном проведении таблицы списанных товаров заполняются в два этапа:
		// 	1. Сначала по счетам, для которых остатки не получаются оперативно, с помощью структуры НадоОценить.
		// 	2. Затем по счетам с оперативным расчетом остатков с помощью структуры НадоРассчитать.
		//
		// Для обеспечения порядка строк в итоговых таблицах согласно порядку строк в исходном документе,
		// отсортируем таблицы по номерам строк исходного документа. 
		// При этом для строк по счетам, которые рассчитываются оперативно, дополнительно сохраним тот порядок, 
		// который получился после вызова СписатьОстаткиТоваров().
		Для каждого КлючИЗначение Из СписанныеТовары Цикл
			ТаблицаСписанныеТовары = КлючИЗначение.Значение;
			ТаблицаСписанныеТовары.Колонки.Добавить("ИсходныйНомерСтрокиТаблицы", ОбщегоНазначения.ОписаниеТипаЧисло(10));
			ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаСписанныеТовары, "ИсходныйНомерСтрокиТаблицы");
			ТаблицаСписанныеТовары.Сортировать("ИмяСписка, НомерСтроки, ИсходныйНомерСтрокиТаблицы");
			ТаблицаСписанныеТовары.Колонки.Удалить("ИсходныйНомерСтрокиТаблицы");
		КонецЦикла;
	КонецЕсли;
		
	Возврат СписанныеТовары;

КонецФункции

Функция ПодготовитьПараметрыТаблицыСписанныеКомиссионныеТоварыОтчетКомиссионера(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"             // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"         // <Строка,0> - синоним списка
	+ "Период,"                // <Дата> - период движения
	+ "НомерСтроки,"           // <Число> - номер строки в списке
	+ "СчетУчета,"             // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"          // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"                 // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "ДокументОприходования," // <ДокументСсылка.*> - документ поступления номенклатуры (партия), указанный в документе списания
	+ "Себестоимость,"         // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"            // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"       // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконто1,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"          // - значение субконто счета, на который списывается номенклатура
	+ "Комитент," 					//	<СправочникСсылка.Контрагенты> - владелец проданного товара (услуги)
	+ "ДоговорКомиссии," 			//	<СправочникСсылка.ДоговорыКонтрагентов> - договор комиссии
	+ "СчетАвансовСКомитентом," 	//	<ПланСчетовСсылка.Хозрасчетный> - учет расчетов по авансам
	+ "СчетРасчетовСКомитентом," 	//	<ПланСчетовСсылка.Хозрасчетный> - учет расчетов
	+ "ВалютаРасчетовСКомитентом,"	//	<СправочникСсылка.Валюты> - валюта взаиморасчетов по договору комиссии
	+ "СуммаРасчетовСКомитентом,"	//	<Число(15,2)> - выручка (сумма отгрузки)
	+ "КорПодразделение,"           //  <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "Покупатель,"                 //  <СправочникСсылка.Контрагенты>
	+ "ВыставленСФ,"                //  <Булево>
	+ "ДатаСФ,"                     //  <Дата>
	+ "СчетФактура,"                //  <ДокументСсылка.СчетФактураВыданный>
	+ "КлючСтроки,"                 //  <Число(5,0)>
	+ "ВозвратПоТекущемуДокументу," //  <Булево> - показывает, что по этой продаже введен возврат в этом же документе
	+ "КорСчетСписанияВозврат,"     //  <ПланСчетовСсылка.Хозрасчетный> - счет списания по возврату
	+ "РассчитатьСебестоимостьПоТекущимПродажам"; //  <Булево> - показывает, что себестоимость по этой строке 
														// будет рассчитана по себестомости ранее списанного товара

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "Контрагент,"    // <СправочникСсылка.Контрагенты>
	+ "Содержание";    // <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПолучитьПустуюТаблицуСписанныеТоварыОтчетКомиссионера() Экспорт
	
	ТаблицаСписанныеТовары = Новый ТаблицаЗначений;
	ТаблицаСписанныеТовары.Колонки.Добавить("ИмяСписка",          ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаСписанныеТовары.Колонки.Добавить("СинонимСписка",      ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаСписанныеТовары.Колонки.Добавить("Период",             ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаСписанныеТовары.Колонки.Добавить("НомерСтроки",        ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетУчета",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Партия",             Документы.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("Себестоимость",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("Количество",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСчетСписания",    Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконто1");
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконто2");
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконто3");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто1");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто2");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто3");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорПодразделение",   БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаСписанныеТовары.Колонки.Добавить("Подразделение",      БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписания",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияНУ",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияПР",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияВР",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаКорСписанияНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаКорСписанияПР", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаКорСписанияВР", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("Содержание",		  ОбщегоНазначения.ОписаниеТипаСтрока(0));

	ТаблицаСписанныеТовары.Колонки.Добавить("Комитент",  					Справочники.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("ДоговорКомиссии",  			Справочники.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетРасчетовСКомитентом",		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетАвансовСКомитентом",		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВалютаРасчетовСКомитентом",	Справочники.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаРасчетовСКомитентом",		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаПоступленияОтКомитента",	ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	ТаблицаСписанныеТовары.Колонки.Добавить("Покупатель",                   Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВыставленСФ",                  Новый ОписаниеТипов("Булево"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ДатаСФ",                       ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетФактура",                  Документы.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("КлючСтроки",                   ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВозвратПоТекущемуДокументу",               Новый ОписаниеТипов("Булево"));
	ТаблицаСписанныеТовары.Колонки.Добавить("РассчитатьСебестоимостьПоТекущимПродажам", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСчетСписанияВозврат", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Возврат ТаблицаСписанныеТовары;
	
КонецФункции

Процедура СформироватьДвиженияПоступлениеДопРасходов(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТовары) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеДопРасходов(ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтрокаТаблицы.Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",    СтрокаТаблицы.СтавкаНДС);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаТаблицы.ДокументОприходования);
		КонецЕсли;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтрокаТаблицы.СтатьяЗатратНУ);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТаблицы.СтатьяЗатратНУ);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;
			
			Если СтрокаТаблицы.СчетУчета = СтрокаТаблицы.СчетУчетаНУ Тогда
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Если СтрокаТаблицы.ЗатратыПринимаютсяКНУ Тогда
						Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
						Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
						Проводка.СуммаВРДт = 0;
					Иначе
						Проводка.СуммаНУДт = 0;
						Проводка.СуммаПРДт = СтрокаТаблицы.СуммаНУ;
						Проводка.СуммаВРДт = 0;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Если СтрокаТаблицы.ЗатратыПринимаютсяКНУ Тогда
					
					Проводка.СуммаВРДт = СтрокаТаблицы.СуммаНУ;
					
					ПроводкаНУ = Движения.Хозрасчетный.Добавить();
					
					ПроводкаНУ.Период      = Реквизиты.Период;
					ПроводкаНУ.Организация = Реквизиты.Организация;
					ПроводкаНУ.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
					
					ПроводкаНУ.СчетДт = СтрокаТаблицы.СчетУчетаНУ;
					СвойстваСчетаДт   = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
					Если СтрокаТаблицы.ВидСубконтоСтатьиНУ <> Неопределено Тогда
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, СтрокаТаблицы.ВидСубконтоСтатьиНУ, СтрокаТаблицы.СтатьяЗатратНУ);
					КонецЕсли;
					Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
						ПроводкаНУ.ПодразделениеДт = СтрокаТаблицы.Подразделение;
					КонецЕсли;
					
					ПроводкаНУ.СчетКт = СтрокаТаблицы.КорСчет;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
					Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
						ПроводкаНУ.ПодразделениеКт = СтрокаТаблицы.Подразделение;
					КонецЕсли;
					
					ПроводкаНУ.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
					ПроводкаНУ.СуммаВРДт = ПроводкаНУ.Сумма - ПроводкаНУ.СуммаНУДт;
					
				Иначе
					
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = 0;
						Проводка.СуммаПРДт = Проводка.Сумма - Проводка.СуммаНУДт;
						Проводка.СуммаВРДт = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.Малоценка Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СтрокаТаблицы.Содержание;
			
			Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеЗатрат;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаТаблицы.Склад);
			Если ВедетсяУчетПоПартиям Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаТаблицы.ДокументОприходования);
			КонецЕсли;
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
			КонецЕсли;
		
			Проводка.Сумма = СтрокаТаблицы.СуммаБУ;
			
			Если ОтражатьВНалоговомУчете Тогда
				
				СуммаНУ = 0;
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
						Проводка.СуммаВРДт = Проводка.Сумма - Проводка.СуммаНУДт - Проводка.СуммаПРДт;
					КонецЕсли;
				КонецЕсли;
				
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
						Проводка.СуммаВРКт = Проводка.Сумма - Проводка.СуммаНУКт - Проводка.СуммаПРКт;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеДопРасходов(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"           // <Число> - номер строки в списке
	+ "Номенклатура,"          // <СправочникСсылка.Номенклатура> - изменяемая номенклатура
	+ "СчетУчета,"             // <ПланСчетовСсылка.Хозрасчетный> - счет, на котором изменяется себестоимость остатков товаров
	+ "Подразделение,"         // <СправочникСсылка.ПодразделенияОрганизации> - подразделение организации, из которого возвращается товар
	+ "Склад,"                 // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "ДокументОприходования," // <ДокументСсылка.*> - документ поступления номенклатуры (партия), указанный в документе списания
	+ "СтавкаНДС,"             // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС
	+ "СчетУчетаНУ,"           // <ПланСчетовСсылка.Хозрасчетный> - счет, на котором отражается изменение себестоимости товаров для целей налогового учета
	+ "СтатьяЗатратНУ,"        // <СтравочникСсылка.ПрочиеДоходыИРасходы> ИЛИ <СправочникСсылка.СтатьиЗатрат> - используется в случае, когда изменение себестоимости в БУ отражается иначе, чем в НУ
	+ "ВидСубконтоСтатьиНУ,"   // ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> ИЛИ <Неопределено> - вид субконто для записи СтатьяЗатратНУ
	+ "КорСчет,"               // <ПланСчетовСсылка.Хозрасчетный> - корреспондирующий счет (счет учета взаиморасчетов)
	+ "ВидКорСубконто1,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"          // - значение субконто счета, на который списывается номенклатура
	+ "СуммаБУ,"               // <Число,15,2> - сумма изменения себестоимости в БУ
	+ "СуммаНУ,"               // <Число,15,2> - сумма изменения себестоимости в НУ
	+ "СуммаВзаиморасчетов,"   // <Число,15,2> - сумма изменения себестоимости для отражения во взаиморасчетах с контрагентом
	+ "ЗатратыПринимаютсяКНУ," // <Булево> - нужно ли принимать к учету затраты НУ?
	+ "СчетЗатрат,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется товар
	+ "Субконто1,"             // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "Субконто2,"             // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "Субконто3,"             // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "ПодразделениеЗатрат,"   // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "Малоценка,"             // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "Содержание";            // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));


	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                        // <Дата> - период движений - дата документа
	+ "Организация,"                   // <СправочникСсылка.Организация> - организация, из которой возвращается товар
	+ "Контрагент,"                    // <СправочникСсылка.Контрагенты> - поставщик товара
	+ "ВалютаВзаиморасчетов";          // <СправочникСсылка.Валюты> - валюта взаиморасчетов с контрагентом (при расчетах в валюте)

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции
