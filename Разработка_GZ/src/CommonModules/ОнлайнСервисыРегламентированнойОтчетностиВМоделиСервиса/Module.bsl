////////////////////////////////////////////////////////////////////////////////
// Обработчики получения поставляемых данных.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Регистрирует обработчики поставляемых данных за день и за все время
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВидДанных = ТипПоставляемыхДанных();
	Обработчик.КодОбработчика = ТипПоставляемыхДанных();
	Обработчик.Обработчик = ОнлайнСервисыРегламентированнойОтчетностиВМоделиСервиса;
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению, 
// и если да - установить флажок Загружать
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = "ДанныеОнлайнСервисовРегламентированнойОтчетности" Тогда
		
		Загружать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - строка. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType = ТипПоставляемыхДанных() Тогда
		
		ОбработатьДанныеОнлайнСервисов(Дескриптор, ПутьКФайлу);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТипПоставляемыхДанных()
	
	Возврат "ДанныеОнлайнСервисовРегламентированнойОтчетности";
	
КонецФункции

Функция ПолучитьИмяФайла(Знач ИмяФайла)
	
	Если ЭтоАдресВременногоХранилища(ИмяФайла) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ИмяФайла);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		РабИмяФайла = ИмяВременногоФайла;
	Иначе
		РабИмяФайла = ИмяФайла;
	КонецЕсли;
	
	Возврат РабИмяФайла;
	
КонецФункции

Процедура ОбработатьДанныеОнлайнСервисов(Дескриптор, ПутьКФайлу)
	
	ИдентификаторВсеКонфигурации = "ВсеКонфигурации";
	ИдентификаторВсеВерсии = "ВсеВерсии";
	
	Для Каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "ИДКонфигурации" Тогда
			ИДКонфигурацииДанных = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "ВерсияКонфигурации" Тогда
			ВерсияКонфигурацииДанных = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "ИмяФайлаНаСервере" Тогда
			ИмяФайлаНаСервере = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "ДатаПолучения" Тогда
			ДатаПолучения = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "ТипДанных" Тогда
			ТипДанных = Характеристика.Value;
		КонецЕсли;
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяФайла(ПутьКФайлу);
	
	КаталогРаспаковки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогРаспаковки);
	
	Попытка
		
		Архиватор = Новый ЧтениеZipФайла(ИмяВременногоФайла);
		Архиватор.ИзвлечьВсе(КаталогРаспаковки);
		Архиватор.Закрыть();
		
		КаталогРаспаковки = КаталогРаспаковки + ?(ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоЛинукс(), "/", "\");		
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось распаковать архив с поставляемыми данными.'");
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		Возврат;
		
	КонецПопытки;
	
	// проверка типа ресурса
	Если Метаданные.Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.ЗначенияПеречисления.Найти(ТипДанных) <> Неопределено Тогда
		ТипДанных      	= Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО[ТипДанных];
	Иначе 
		ТекстОшибки = НСтр("ru = 'Не найден тип ресурсов механизма онлайн сервисов РО!'");
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		
		Возврат;
	КонецЕсли;
	
	ИДКонфигурации = Метаданные.Имя;
	ВерсияКонфигурации = Метаданные.Версия;
	
	// проверка на соответствие идентификатора конфигурации в данных идентификатору текущей конфигурации
	Если ИДКонфигурацииДанных <> ИдентификаторВсеКонфигурации  и ИДКонфигурации <> ИДКонфигурацииДанных Тогда
		ТекстОшибки = НСтр("ru = 'Не пройдена проверка на соответствие идентификатора конфигурации в данных идентификатору текущей конфигурации.'");
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		
		Возврат;
	КонецЕсли;
		
	// проверка на соответствие версии в данных версии текущей конфигурации
	Если ВерсияКонфигурацииДанных <> ИдентификаторВсеВерсии и ВерсияКонфигурации<> ВерсияКонфигурацииДанных Тогда
		ТекстОшибки = НСтр("ru = 'Не пройдена проверка на соответствие версии в данных версии текущей конфигурации.'");
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		
		Возврат;
	КонецЕсли;
	
	ПутьКФайлуДанных = СтрШаблон("%1%2.xml", КаталогРаспаковки, ИмяФайлаНаСервере);
	
	СохранитьДанныеОнлайнСервисовРО(ТипДанных, ПутьКФайлуДанных, ИмяФайлаНаСервере, ДатаПолучения);
	
	Попытка
		УдалитьФайлы(КаталогРаспаковки);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ПрочитатьТекстовыйФайл(ИмяФайла, ОписаниеОшибки, УдалятьПослеПрочтения = Ложь)
	
	Попытка
		ОбъектЧтение = Новый ЧтениеТекста(ИмяФайла);
		Результат = ОбъектЧтение.Прочитать();
		ОбъектЧтение.Закрыть();
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Результат = Неопределено;
	КонецПопытки;
	
	Если УдалятьПослеПрочтения Тогда
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьДанныеОнлайнСервисовРО(ТипДанных, ПутьКФайлу, ИмяФайла, ДатаПолучения)
	
	ОписаниеОшибки = "";
	СодержимоеФайла = ПрочитатьТекстовыйФайл(ПутьКФайлу, ОписаниеОшибки, Истина);
	
	Если СодержимоеФайла = Неопределено Тогда
		ТекстОшибки = НСтр(СтрШаблон("ru = 'Ошибка чтения файла с данными! Описание ошибки: %1.'", ОписаниеОшибки));
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		Возврат;		
	КонецЕсли; 
	
	ДанныеДляЗаписи = Новый Структура;
	ДанныеДляЗаписи.Вставить("Тип", ТипДанных);
	ДанныеДляЗаписи.Вставить("Данные", СодержимоеФайла);
	ДанныеДляЗаписи.Вставить("Имя", ИмяФайла);
	ДанныеДляЗаписи.Вставить("ДатаПолучения", ДатаПолучения);
	
	// считываем информацию из кэша механизма
	НаборЗаписей = РегистрыСведений.РесурсыМеханизмаОнлайнСервисовРО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Тип.Установить(ТипДанных, Истина);
	НаборЗаписей.Прочитать();
	
	// перебираем имеющиеся записи и перезаписываем их новыми данными
	ЗаписьОбновлена = Ложь;
	ЧислоЗаписей = НаборЗаписей.Количество();
	Для Инд = 0 По ЧислоЗаписей - 1 Цикл
		ТекЗапись = НаборЗаписей.Получить(Инд);
		ТекЗаписьТип = ТекЗапись.Тип;		
		Если ТекЗаписьТип = ТипДанных Тогда
			ЗаписьОбновлена = Истина;
			ЗаполнитьЗначенияСвойств(ТекЗапись, ДанныеДляЗаписи);
		КонецЕсли;
	КонецЦикла;
	
	// добавляем новые записи
	Если не ЗаписьОбновлена Тогда		
		НовСтр = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ДанныеДляЗаписи);
	КонецЕсли;
	
	// записываем новый набор
	Если НаборЗаписей.Модифицированность() Тогда
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ТекстОшибки = НСтр(СтрШаблон("ru = Ошибка сохранения в информационной базе информации: %1.'", ИнформацияОбОшибке().Описание));
			ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаписатьВЖурналРегистрации(Уровень, ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации(), Уровень,,, ТекстОшибки);
	
КонецПроцедуры

Функция ИмяСобытияВЖурналеРегистрации()
	
	Возврат НСтр("ru = 'Поставляемые данные. Загрузка данных онлайн сервисов РО'");
	
КонецФункции

#КонецОбласти