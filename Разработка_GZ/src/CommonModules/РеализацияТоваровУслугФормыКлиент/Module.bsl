////////////////////////////////////////////////////////////////////////////////
// РеализацияТоваровУслугФормыКлиент: клиентские процедуры и функции, вызываемые 
// из форм документа "Реализация (акт, накладная, УПД)".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		КлючеваяОперация = "ПроведениеРеализацияТоваровИУслуг";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("УплачиватьНДСспецРежимы", ПолучитьФункциональнуюОпциюИнтерфейса("УплачиватьНДСспецРежимы"));
	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	Оповестить("Запись_РеализацияТоваровУслуг", ПараметрыЗаписи, Объект.Ссылка);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
		СписокСчетовНаОплату = РеализацияТоваровУслугФормыКлиентСервер.СписокСчетовНаОплатуПокупателю(Объект);
		Для каждого СчетНаОплатуПокупателю Из СписокСчетовНаОплату Цикл
			ОповеститьОбИзменении(СчетНаОплатуПокупателю);
		КонецЦикла; 
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру
		И ПараметрыЗаписи.Свойство("ДлительнаяОперация") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Основание", Объект.Ссылка);
		ДополнительныеПараметры.Вставить("АдресХранилищаСОшибками", ПараметрыЗаписи.ДлительнаяОперация.АдресХранилищаСОшибками);
		ДополнительныеПараметры.Вставить("ВыписыватьСчетаФактурыСпецРежимы",
			ПолучитьФункциональнуюОпциюИнтерфейса("ВыписыватьСчетаФактурыСпецРежимы"));
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("Подключаемый_ОбработатьВыпискуСчетаФактуры", Форма, ДополнительныеПараметры);
			
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Актуализация расчетов с контрагентами'");
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ПараметрыЗаписи.ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("УплачиватьНДСспецРежимы")
		И ПараметрыЗаписи.УплачиватьНДСспецРежимы <> ПолучитьФункциональнуюОпциюИнтерфейса("УплачиватьНДСспецРежимы") Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

Процедура ПатентПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;

	Если ЗначениеЗаполнено(Объект.Патент) Тогда
		Объект.ДеятельностьНаПатенте = Истина;
	КонецЕсли;
	
	Если Объект.ДеятельностьНаПатенте Тогда
		Объект.ДеятельностьНаТорговомСборе = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПорядокУчетаРасчетовНажатие(Форма, Элемент, СтандартнаяОбработка, АдресХранилищаЗачетАвансов) Экспорт

	Объект = Форма.Объект;

	Если НЕ Форма.ТолькоПросмотр Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ТипыДокументов = "Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип";
	РежимОтбораДокументов = ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр",                 Форма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата",                           Объект.Дата);
	ПараметрыФормы.Вставить("ДоговорКонтрагента",             Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент",                     Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация",                    Объект.Организация);
	ПараметрыФормы.Вставить("ОстаткиОбороты",                 "Кт");
	ПараметрыФормы.Вставить("ТипыДокументов",                 ТипыДокументов);
	ПараметрыФормы.Вставить("РежимОтбораДокументов",          РежимОтбораДокументов);
	ПараметрыФормы.Вставить("АдресХранилищаЗачетАвансов",     АдресХранилищаЗачетАвансов);
	ПараметрыФормы.Вставить("СпособЗачетаАвансов",            Объект.СпособЗачетаАвансов);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовСКонтрагентом", Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовПоАвансам",     Объект.СчетУчетаРасчетовПоАвансам);
	ПараметрыФормы.Вставить("СрокОплаты",                     Форма.СрокОплаты);
	ПараметрыФормы.Вставить("ИспользуетсяСрокОплаты",         Форма.ИспользуетсяПланированиеПлатежей);
	ПараметрыФормы.Вставить("СкрытьСчетРасчетов",             Форма.СкрытьСчетРасчетов);

	ОткрытьФорму("ОбщаяФорма.ВыборПорядкаУчетаРасчетов", ПараметрыФормы, Форма);

КонецПроцедуры

Процедура ЦеныИВалютаНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Форма);
	
КонецПроцедуры

// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

Процедура ПодборНоменклатуры(Форма, ИмяТаблицы, Команда) Экспорт

	ПараметрыПодбора = ПолучитьПараметрыПодбора(Форма, ИмяТаблицы);
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			Форма, Форма.УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

Процедура ИзменитьТовары(Форма, Команда, АдресХранилищаТовары) Экспорт

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары(Форма, АдресХранилищаТовары);
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			Форма, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыписатьСчетФактуру(Форма, Команда) Экспорт
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруВыданный(Форма);
	
	Если РеквизитыСФ <> Неопределено Тогда 
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма, РеквизитыСФ);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработатьВыпискуСчетаФактуры(Форма, Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Результат.Вставить("ФоновоеВыполнение", Истина);
	КонецЕсли;
	РеквизитыСФ = УчетНДСКлиент.ОбработатьВыпискуСчетаФактуры(Форма, Результат, ДополнительныеПараметры);
	
	Если РеквизитыСФ <> Неопределено Тогда 
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма, РеквизитыСФ);
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

Процедура ТоварыНомерГТДНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Объект        = Форма.Объект;
	Элементы      = Форма.Элементы;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыНомерГТДЗавершение", 
		ЭтотОбъект, Новый Структура("Форма", Форма));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("Номенклатура",    ТекущиеДанные.Номенклатура);
	СтруктураПараметров.Вставить("Период",          Объект.Дата);
	СтруктураПараметров.Вставить("ВыборПоОстаткам", Истина);
	
	ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора", 
		СтруктураПараметров, Форма,,,, ОписаниеОповещения);

КонецПроцедуры

Процедура ТоварыДокументОприходованияПриИзменении(Форма, Элемент) Экспорт

	Элементы = Форма.Элементы;

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументОприходования) Тогда
		ТекущиеДанные.Себестоимость = 0;
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыДокументОприходованияНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт

	Элементы 	= Форма.Элементы;
	Объект		= Форма.Объект;

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",   Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация",    Объект.Организация);
	ПараметрыОбъекта.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета",      ТекущиеДанные.СчетУчета);
	ПараметрыОбъекта.Вставить("Склад",      	Объект.Склад);
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.ДокументОприходования.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМ ДОКУМЕНТА РеализацияТоваровУслуг

Функция ТребуетсяВызовСервераПриИзмененииДатыДокумента(Форма) Экспорт

	ТребуетсяВызовСервера = Ложь;
	
	Объект = Форма.Объект;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		Форма.ТекущаяДатаДокумента, Объект.ВалютаДокумента, Форма.ВалютаРегламентированногоУчета);
		
	// Проверка на изменение ответственных лиц.
	Если НЕ ТребуетсяВызовСервера Тогда
		Если ТипЗнч(Форма.ДатыИзмененияОтветственныхЛиц) = Тип("ФиксированныйМассив") Тогда
		 	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиентСервер.ДатыПринадлежатРазнымИнтервалам(Объект.Дата, 
		 		Форма.ТекущаяДатаДокумента, Форма.ДатыИзмененияОтветственныхЛиц);
		КонецЕсли;
	КонецЕсли;
		
	// Проверка на изменение сроков действия патентов.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = Форма.ПрименяетсяУСНПатент;
	КонецЕсли;
	
	// Проверка на изменение срока оплаты
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера =
			Форма.ИспользуетсяПланированиеПлатежей И Форма.АвторасчетСрокаОплаты 
			И (НачалоДня(Объект.Дата) <> НачалоДня(Форма.ТекущаяДатаДокумента));
	КонецЕсли;
	
	Если НЕ ТребуетсяВызовСервера Тогда
		Если ТипЗнч(Форма.ДатыИзмененияОтветственныхЛиц) = Тип("ФиксированныйМассив") Тогда
			
			ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиентСервер.ДатыПринадлежатРазнымИнтервалам(Объект.Дата, 
				Форма.ТекущаяДатаДокумента, Форма.ДатыИзмененияАдресаГрузополучателя);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТребуетсяВызовСервера;

КонецФункции

Процедура ОбработкаВыбораРеквизитыОрганизацииКонтрагента(Форма, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Объект = Форма.Объект;

	ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	
	Форма.Модифицированность = Истина;

КонецПроцедуры

Процедура ОткрытьФормуВыбораПоступленияТоваровУслуг(Форма, ТабличнаяЧасть, СпособЗаполнения) Экспорт

	Объект = Форма.Объект;

	Если СпособЗаполнения = "Заполнить"
		И Объект[ТабличнаяЧасть].Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		ДополнительныеПараметры.Вставить("Объект", Объект);
		
		Оповещение = Новый ОписаниеОповещения(
			"ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ОткрытьФормуВыбораПоступленияТоваровУслугДляЗаполнения(Объект, Форма, ТабличнаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСоСчетомНаОплату

&НаКлиенте
Процедура ТабличнаяЧастьСчетНаОплатуПокупателюНачалоВыбора(Форма, Элемент, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("Форма",   Форма);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ТабличнаяЧастьВыборСчетаЗавершение", РеализацияТоваровУслугФормыКлиент, ДополнительныеПараметры);
	
	ОткрытьФормуВыбораСчетаНаОплату(Форма, Ложь, ОповещениеОЗавершении);
КонецПроцедуры

	
Процедура ОткрытьФормуВыбораСчетаНаОплату(Форма, МножественныйВыбор, ОповещениеОЗавершении) Экспорт
	
	Объект = Форма.Объект;

	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтруктураОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СтруктураОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	КонецЕсли;
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", МножественныйВыбор);
	
	Если МножественныйВыбор Тогда
		СтруктураПараметров.Вставить("Заголовок", НСтр("ru = 'выберите один или несколько документов'"));
	КонецЕсли; 
	
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаВыбора", СтруктураПараметров, Форма, , , , ОповещениеОЗавершении);
КонецПроцедуры

Процедура ТабличнаяЧастьСчетНаОплатуПокупателюОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	ДанныеТекущейСтроки = Элемент.Родитель.ТекущиеДанные;
	
	ПараметрыОткрытияФормы = НОвый Структура("Ключ", ДанныеТекущейСтроки.СчетНаОплатуПокупателю);
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.Форма.ФормаДокумента", ПараметрыОткрытияФормы, Форма);

	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВыборСчетаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Форма   = ДополнительныеПараметры.Форма;
	Объект  = Форма.Объект;
	Элемент = ДополнительныеПараметры.Элемент;

	ДанныеТекущейСтроки = Элемент.Родитель.ТекущиеДанные;
	Если ВыбранноеЗначение <> Неопределено Тогда
	
		ДанныеТекущейСтроки.СчетНаОплатуПокупателю              = ВыбранноеЗначение;
		ДанныеТекущейСтроки.СчетНаОплатуПокупателюПредставление = РеализацияТоваровУслугФормыВызовСервера.СчетНаОплатуПокупателюПредставление(ВыбранноеЗначение);
		
		Если ДанныеТекущейСтроки.Количество = 0 Тогда
			ДанныеТекущейСтроки.Количество = РеализацияТоваровУслугФормыВызовСервера.ОстатокТовараПоСчету(ДанныеТекущейСтроки.Номенклатура, 
				ВыбранноеЗначение, Объект.Ссылка);
		КонецЕсли; 
	
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(Форма, Элемент.Родитель.Имя);
	КонецЕсли; 
	
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(Форма);
КонецПроцедуры

Процедура ТабличнаяЧастьСчетНаОплатуПокупателюОчистка(Форма, Элемент, СтандартнаяОбработка) Экспорт
	ТекущаяСтрока = Элемент.Родитель.ТекущиеДанные;
	ТекущаяСтрока.СчетНаОплатуПокупателю = Неопределено;
	ТекущаяСтрока.СчетНаОплатуПокупателюПредставление = "";
	
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(Форма);
КонецПроцедуры

#КонецОбласти 


Функция ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(Форма, СтрокаТабличнойЧасти) Экспорт
	
	Объект = Форма.Объект;
	ЭтоКомиссия = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	РеализацияВЕАЭС       = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РеализацияВЕАЭС");
	ВедетсяУчетНДСПоФЗ150 = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ВедетсяУчетНДСПоФЗ150");
	ВедетсяУчетНДСПоФЗ335 = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ВедетсяУчетНДСПоФЗ335");
	ПокупательНалоговыйАгентПоНДС = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ПокупательНалоговыйАгентПоНДС");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, 
		|СчетНаОплатуПокупателю, СчетНаОплатуПокупателюПредставление,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|НомерГТД, СтранаПроисхождения,
		|ПродукцияМаркируемаяДляГИСМ, МаркируемаяПродукцияГосИС, КодТНВЭД");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, ДеятельностьНаПатенте,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|СуммаВключаетНДС, ДоговорКонтрагента,
		|ЭтоКомиссия, Реализация, ДокументБезНДС, РеализацияВЕАЭС, 
		|ВедетсяУчетНДСПоФЗ150, ВедетсяУчетНДСПоФЗ335, ПокупательНалоговыйАгентПоНДС");
		
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		ДанныеОбъекта.Вставить("ТипЦен");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	ДанныеОбъекта.РеализацияВЕАЭС = РеализацияВЕАЭС;
	ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150 = ВедетсяУчетНДСПоФЗ150;
	ДанныеОбъекта.ВедетсяУчетНДСПоФЗ335 = ВедетсяУчетНДСПоФЗ335;
	ДанныеОбъекта.ПокупательНалоговыйАгентПоНДС = ПокупательНалоговыйАгентПоНДС;
	ДанныеОбъекта.Реализация  = Истина;
	
	ПараметрыЗаполненияСчетовУчета = РеализацияТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		СтрокаТабличнойЧасти,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	 ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		 ДанныеОбъекта);
	ПараметрыОбработки.Вставить("СчетаУчетаКЗаполнению", ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

Функция ПодготовитьПараметрыОбработкиУслугиНоменклатураПриИзменении(Форма, СтрокаТабличнойЧасти) Экспорт
	
	Объект = Форма.Объект;
	ЭтоКомиссия = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");

	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС, СчетНаОплатуПокупателю, СчетНаОплатуПокупателюПредставление");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ДанныеОбъекта = Новый Структура("Ссылка, Дата, ВидОперации, Организация, ДеятельностьНаПатенте,
		|Склад, ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|СуммаВключаетНДС, ДоговорКонтрагента,
		|ЭтоКомиссия, Реализация, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	ДанныеОбъекта.Реализация  = Истина;
	
	ПараметрыЗаполненияСчетовУчета = РеализацияТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Услуги.Номенклатура",
		Объект,
		СтрокаТабличнойЧасти,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);
	ПараметрыОбработки.Вставить("СчетаУчетаКЗаполнению", ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ДокументБезНДС",       Объект.ДокументБезНДС);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТолькоПросмотр",       Форма.ТолькоПросмотр);
	
	// 2. Открываем форму "Цены и Валюта".
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	Если Форма.ИспользоватьТипыЦенНоменклатуры
		ИЛИ (Форма.ЕстьВалютныйУчет И Форма.ВалютаВзаиморасчетов <> Форма.ВалютаРегламентированногоУчета) Тогда 
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Не Форма.ПлательщикНДС Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		Если НЕ Форма.ТолькоПросмотр Тогда
			Форма.ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
		КонецЕсли; 
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;

	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
				
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения      = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ТипЦен                  = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.ДокументБезНДС		   = СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Форма.Модифицированность = Истина;

		Форма.ПриИзмененииЦеныИВалюты(ВалютаДоИзменения, 
			КурсДоИзменения,
			КратностьДоИзменения,
			СтруктураЦеныИВалюта.ПерезаполнитьЦены,
			СтруктураЦеныИВалюта.ПересчитатьЦены,
			СтруктураЦеныИВалюта.ПересчитатьНДС);
			
		Форма.ОбновитьОтображениеДанных();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыНомерГТДЗавершение(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	Если ДанныеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Если в результате выбора пришло только значение,
	// то переложим его в структуру.
	Если ТипЗнч(ДанныеВыбора) = Тип("СправочникСсылка.НомераГТД") Тогда
		ДанныеВыбора = Новый Структура("НомерГТД", ДанныеВыбора);
	КонецЕсли;
	Форма         = ДополнительныеПараметры.Форма;
	Элементы      = Форма.Элементы;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Форма.Модифицированность = Истина;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеВыбора);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПараметрыПодбора(Форма, ИмяТаблицы)

	Объект = Форма.Объект;

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");

	Валюта = Объект.ВалютаДокумента;

	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;

	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"    , Истина);
		ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Возвратная тара'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"    , Истина);
		ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Услуги'");
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение"     , Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Склад"             , Объект.Склад);
	ПараметрыФормы.Вставить("Кратность"         , Объект.КратностьВзаиморасчетов);
	ПараметрыФормы.Вставить("Курс"              , Объект.КурсВзаиморасчетов);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже", Истина);
		ПараметрыФормы.Вставить("Реализация"            , Истина);
		ПараметрыФормы.Вставить("ДеятельностьНаПатенте" , Объект.ДеятельностьНаПатенте);
		Если ИмяТаблицы = "ВозвратнаяТара" Тогда
			ПараметрыФормы.Вставить("СуммаВключаетНДС"  , Истина);
		Иначе
			ПараметрыФормы.Вставить("СуммаВключаетНДС"  , Объект.СуммаВключаетНДС);
		КонецЕсли;
	КонецЕсли;

	Возврат ПараметрыФормы;

КонецФункции

Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары(Форма, АдресХранилищаТовары)

	Объект = Форма.Объект;

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		АдресХранилищаТовары);
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Ложь);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 				Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 				Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументБезНДС",               Объект.ДокументБезНДС);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);

	Возврат ПараметрыОбработки;
	
КонецФункции 

Процедура ОткрытьФормуВыбораПоступленияТоваровУслугДляЗаполнения(Объект, Форма, ТабличнаяЧасть)

	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	СтруктураОтбора.Вставить("Проведен",	Истина);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Оборудование") Тогда
		СтруктураОтбора.Вставить("ВидОперации",	ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование"));
	Иначе
		СписокВидовОпераций = Новый СписокЗначений;
		СписокВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия"));
		Если ТабличнаяЧасть = "Товары" Тогда
			СписокВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"));
		ИначеЕсли ТабличнаяЧасть = "Услуги" Тогда
			СписокВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
		КонецЕсли;
		СтруктураОтбора.Вставить("ВидОперации",	СписокВидовОпераций);
	КонецЕсли;
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы",         ТабличнаяЧасть);
	
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", СтруктураПараметров, Форма);
	
КонецПроцедуры

Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект			 = ДополнительныеПараметры.Объект;
		Форма			 = ДополнительныеПараметры.Форма;
		ТабличнаяЧасть	 = ДополнительныеПараметры.ТабличнаяЧасть;
		
		Объект[ТабличнаяЧасть].Очистить();
		ОткрытьФормуВыбораПоступленияТоваровУслугДляЗаполнения(Объект, Форма, ТабличнаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоставкаНажатие(Форма, Элемент = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	Если НЕ Форма.ТолькоПросмотр Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",                 Форма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("Организация",                    Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент",                     Объект.Контрагент);
	ПараметрыФормы.Вставить("Грузоотправитель",               Объект.Грузоотправитель);
	ПараметрыФормы.Вставить("Грузополучатель",                Объект.Грузополучатель);
	ПараметрыФормы.Вставить("ДатаДокумента",                  Объект.Дата);
	ПараметрыФормы.Вставить("АдресДоставки",                  Объект.АдресДоставки);
	ПараметрыФормы.Вставить("Перевозчик",                     Объект.Перевозчик);
	ПараметрыФормы.Вставить("МаркаАвтомобиля",                Объект.МаркаАвтомобиля);
	ПараметрыФормы.Вставить("РегистрационныйЗнакАвтомобиля",  Объект.РегистрационныйЗнакАвтомобиля);
	ПараметрыФормы.Вставить("МаркаПрицепа",                   Объект.МаркаПрицепа);
	ПараметрыФормы.Вставить("РегистрационныйЗнакПрицепа",     Объект.РегистрационныйЗнакПрицепа);
	ПараметрыФормы.Вставить("Водитель",                       Объект.Водитель);
	ПараметрыФормы.Вставить("ВодительскоеУдостоверение",      Объект.ВодительскоеУдостоверение);
	ПараметрыФормы.Вставить("КраткоеНаименованиеГруза",       Объект.КраткоеНаименованиеГруза);
	ПараметрыФормы.Вставить("СопроводительныеДокументы",      Объект.СопроводительныеДокументы);
	ПараметрыФормы.Вставить("СведенияОТранспортировкеИГрузе", Объект.СведенияОТранспортировкеИГрузе);
	ПараметрыФормы.Вставить("ПеревозкаАвтотранспортом",       Объект.ПеревозкаАвтотранспортом);
	
	ПараметрыФормы.Вставить("СпособДоставки",                 Объект.СпособДоставки);
	
	
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДоставка", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура ИзменитьСписокДокументовОснований(Форма, ОписаниеОповещения) Экспорт
	Объект = Форма.Объект;
	
	АдресХранилищаРезультата  = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
	СписокОснованияРеализации = РеализацияТоваровУслугФормыКлиентСервер.СписокСчетовНаОплатуПокупателю(Форма.Объект);
	
	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("Основания",             СписокОснованияРеализации);
	ДополнительныеПараметры.Вставить("Форма",                 Форма);
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОписаниеОповещения);
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ДобавитьИзСчетаЗавершение", 
		РеализацияТоваровУслугФормыКлиент, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Основания",      СписокОснованияРеализации);
	ПараметрыФормы.Вставить("Организация",    Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент",     Объект.Контрагент);
	ПараметрыФормы.Вставить("АдресХранилища", АдресХранилищаРезультата);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокументыОснования", 
		ПараметрыФормы, Форма, , , , ОбработчикВыбора);
КонецПроцедуры

Процедура ДобавитьИзСчета(Форма, ОписаниеОповещения) Экспорт
	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("Форма",                 Форма);
	ДополнительныеПараметры.Вставить("Основания", 
		РеализацияТоваровУслугФормыКлиентСервер.СписокСчетовНаОплатуПокупателю(Форма.Объект));
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ДобавитьИзСчетаЗавершение", 
		РеализацияТоваровУслугФормыКлиент, ДополнительныеПараметры);
	
	ОткрытьФормуВыбораСчетаНаОплату(Форма, Истина, ОбработчикВыбора);
КонецПроцедуры
 
Процедура ДобавитьИзСчетаЗавершение(РезультатВыбораСчета, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатВыбораСчета) = Тип("Массив") Тогда
		
		МассивОснований = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(РезультатВыбораСчета);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОснований, ДополнительныеПараметры.Основания, Истина);
	ИначеЕсли ТипЗнч(РезультатВыбораСчета) = Тип("Строка") 
		И ЭтоАдресВременногоХранилища(РезультатВыбораСчета) Тогда
		
		МассивОснований = ПолучитьИзВременногоХранилища(РезультатВыбораСчета);
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если ДополнительныеПараметры.Основания.Количество() = 0 Тогда
		ДобавленныеСчета = МассивОснований;
	Иначе
		ДобавленныеСчета = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивОснований, ДополнительныеПараметры.Основания);
	КонецЕсли; 
	
	Если МассивОснований.Количество() = 0 Тогда
		УдаленныеСчета = ДополнительныеПараметры.Основания;
	Иначе
		УдаленныеСчета   = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ДополнительныеПараметры.Основания, МассивОснований);
	КонецЕсли;
	
	Если УдаленныеСчета.Количество() > 0 
		ИЛИ ДобавленныеСчета.Количество() > 0 Тогда
		
		ДополнительныеПараметрыВопрос = Новый Структура;
		ДополнительныеПараметрыВопрос.Вставить("ДобавленныеСчета",      ДобавленныеСчета);
		ДополнительныеПараметрыВопрос.Вставить("УдаленныеСчета",        УдаленныеСчета);
		ДополнительныеПараметрыВопрос.Вставить("Форма",                 ДополнительныеПараметры.Форма);
		ДополнительныеПараметрыВопрос.Вставить("ОповещениеОЗавершении", ДополнительныеПараметры.ОповещениеОЗавершении);
		
		ВопросУдалениеСтрокЗавершение = Новый ОписаниеОповещения("ВопросУдалениеСтрокЗавершение", 
			РеализацияТоваровУслугФормыКлиент, ДополнительныеПараметрыВопрос);
		
		Если УдаленныеСчета.Количество() > 0 Тогда
			
			СтрокаПодстановки = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';будет удален %1 счет;;будут удалены %1 счета;будут удалены %1 счетов;будут удалены %1 счета'"), 
				УдаленныеСчета.Количество());

			ЧастиВопроса = Новый Массив;
			ЧастиВопроса.Добавить(СтрШаблон(НСтр("ru = 'Из списка оснований %1.'"), СтрокаПодстановки));
			
			Если УдаленныеСчета.Количество() = 1 Тогда
					ЧастиВопроса.Добавить(НСтр("ru = 'Удалить строки, связанные с этим счетом?'"));
				Иначе
					ЧастиВопроса.Добавить(НСтр("ru = 'Удалить строки, связанные с этими счетами?'")); 
			КонецЕсли; 
			
			ПоказатьВопрос(ВопросУдалениеСтрокЗавершение, 
				СтрСоединить(ЧастиВопроса, Символы.ПС), РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе
			Форма = ДополнительныеПараметры.Форма;
			Форма.Модифицированность = Истина;
			
			ВыполнитьОбработкуОповещения(ВопросУдалениеСтрокЗавершение, Неопределено);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура ВопросУдалениеСтрокЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("РезультатВыбора",  РезультатВыбора);
	СтруктураРезультата.Вставить("ДобавленныеСчета", ДополнительныеПараметры.ДобавленныеСчета);
	СтруктураРезультата.Вставить("УдаленныеСчета",   ДополнительныеПараметры.УдаленныеСчета);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, СтруктураРезультата);
КонецПроцедуры

Процедура УдалитьСчетаИзТабличныхЧастей(Форма, УдаленныеСчета, СписокТабличныхЧастей) Экспорт
	Объект = Форма.Объект;
	
	Для каждого ИмяТабличнойЧасти Из СтрРазделить(СписокТабличныхЧастей, ",") Цикл
		КоличествоСтрокТовары = Объект[ИмяТабличнойЧасти].Количество() - 1;
		Для НомерСтроки = 0 По КоличествоСтрокТовары Цикл
			ИндексСтроки = КоличествоСтрокТовары-НомерСтроки;
			СчетПоСтроке = Объект[ИмяТабличнойЧасти][ИндексСтроки].СчетНаОплатуПокупателю;
			
			Если УдаленныеСчета.Найти(СчетПоСтроке) <> Неопределено Тогда
				Объект[ИмяТабличнойЧасти].Удалить(ИндексСтроки);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
КонецПроцедуры 

Процедура ОчиститьСсылкиНаСчетаВТабличныхЧастях(Форма, УдаленныеСчета, СписокТабличныхЧастей) Экспорт
	Объект = Форма.Объект;
	
	Для каждого ИмяТабличнойЧасти Из СтрРазделить(СписокТабличныхЧастей, ",") Цикл
		Для каждого СтрокаТовары Из Объект[ИмяТабличнойЧасти] Цикл
			Если УдаленныеСчета.Найти(СтрокаТовары.СчетНаОплатуПокупателю) <> Неопределено Тогда
				СтрокаТовары.СчетНаОплатуПокупателю              = Неопределено;
				СтрокаТовары.СчетНаОплатуПокупателюПредставление = "";
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка);
	ПечатьФискальныхДокументовКлиент.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

Функция ОбрабатыватьОповещениеНаСервере(ИмяСобытия) Экспорт
	
	Возврат ИмяСобытия = "Запись_НастройкиСистемыНалогообложения"
		Или ИмяСобытия = "ИзменениеПатента";
	
КонецФункции

Процедура ОбработкаВыбораУниверсальныйПередаточныйДокумент(Форма, ВыбранноеЗначение) Экспорт

	ЗаполнитьЗначенияСвойств(Форма, ВыбранноеЗначение, "КодВидаОперации");
	Форма.Модифицированность = Истина;

КонецПроцедуры
 


 
