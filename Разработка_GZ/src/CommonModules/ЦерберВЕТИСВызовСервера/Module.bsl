
#Область ПрограммныйИнтерфейс

// Возвращает предприятие по идентификатору.
//
// Параметры:
//  Идентификатор - ОпределяемыйТип.УникальныйИдентификаторИС - Идентификатор.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементаКлассификатора().
//
Функция ХозяйствующийСубъектИПредприятиеПоGLN(GLN) Экспорт
	
	Запрос = ЗапросДанныхПоGLNXML(GLN);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементаКлассификатора(Запрос);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

#Область Предприятия

// Возвращает предприятие по идентификатору.
//
// Параметры:
//  Идентификатор - ОпределяемыйТип.УникальныйИдентификаторИС - Идентификатор.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементаКлассификатора().
//
Функция ПредприятиеПоGUID(Идентификатор, Преобразовать = Ложь, ХозяйствующийСубъект = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементаКлассификатораПредприятийПоИдентификаторуXML(
		ИнтеграцияВЕТИС.ИмяИдентификатораОбъекта(), Идентификатор);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементаКлассификатора(Запрос, ХозяйствующийСубъект, ПараметрыОбмена);
	
	Если Преобразовать
		И РезультатВыполненияЗапроса.Элемент <> Неопределено Тогда
		РезультатВыполненияЗапроса.Элемент = ИнтеграцияВЕТИС.ДанныеПредприятия(РезультатВыполненияЗапроса.Элемент);
	КонецЕсли;
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает предприятие по идентификатору.
//
// Параметры:
//  Идентификатор - ОпределяемыйТип.УникальныйИдентификаторИС - Идентификатор.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементаКлассификатора().
//
Функция ПредприятиеПоUUID(Идентификатор, Преобразовать = Ложь, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементаКлассификатораПредприятийПоИдентификаторуXML(
		ИнтеграцияВЕТИС.ИмяИдентификатораВерсии(), Идентификатор);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементаКлассификатора(Запрос,, ПараметрыОбмена);
	
	Если Преобразовать
		И РезультатВыполненияЗапроса.Элемент <> Неопределено Тогда
		РезультатВыполненияЗапроса.Элемент = ИнтеграцияВЕТИС.ДанныеПредприятия(РезультатВыполненияЗапроса.Элемент);
	КонецЕсли;
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает список предприятий.
//
// Параметры:
//  НомерСтраницы - Число - Номер страницы.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция СписокПредприятийРФ(ПараметрыОтбора, НомерСтраницы = 1, Преобразовать = Ложь, КоличествоЭлементовНаСтранице = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементовКлассификатораПредприятийРФXML(ПараметрыОтбора, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос);
	
	Если Преобразовать
		И РезультатВыполненияЗапроса.Список <> Неопределено Тогда
		НовыйСписок = Новый Массив;
		Для Каждого Элемент Из РезультатВыполненияЗапроса.Список Цикл
			НовыйСписок.Добавить(ИнтеграцияВЕТИС.ДанныеПредприятия(Элемент));
		КонецЦикла;
		РезультатВыполненияЗапроса.Список = НовыйСписок;
	КонецЕсли;
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает список измененных за период стран мира.
//
// Параметры:
//  Интервал - Структура - Структура со свойствами:
//   * НачалоПериода - Дата - Дата начала периода.
//   * КонецПериода - Дата - Дата окончания периода.
//  НомерСтраницы - Число - Номер страницы.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция ИсторияИзмененийПредприятийРФ(Интервал, НомерСтраницы = 1,
	КоличествоЭлементовНаСтранице = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросИзмененныхЭлементовКлассификатораПредприятийРФXML(Интервал, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос,, ПараметрыОбмена);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает список стран мира.
//
// Параметры:
//  НомерСтраницы - Число - Номер страницы.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция СписокЗарубежныхПредприятий(ПараметрыОтбора, НомерСтраницы = 1, КоличествоЭлементовНаСтранице = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементовКлассификатораЗарубежныхПредприятийXML(ПараметрыОтбора, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает список измененных за период стран мира.
//
// Параметры:
//  Интервал - Структура - Структура со свойствами:
//   * НачалоПериода - Дата - Дата начала периода.
//   * КонецПериода - Дата - Дата окончания периода.
//  НомерСтраницы - Число - Номер страницы.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция ИсторияИзмененийЗарубежныхПредприятий(Интервал, НомерСтраницы = 1,
	КоличествоЭлементовНаСтранице = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросИзмененныхЭлементовКлассификатораЗарубежныхПредприятийXML(Интервал, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос,, ПараметрыОбмена);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает списка поднадзорных объектов (площадок), связанных с заданным хозяйствующим субъектом.
//
// Параметры:
//  ХозяйствующийСубъектGUID - Строка - GUID хозяйствующего субъекта.
//  НомерСтраницы - Число - Номер страницы.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция СписокПредприятийХозяйствующегоСубъекта(GUIDХозяйствующегоСубъекта, НомерСтраницы = 1, ХозяйствующийСубъект = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементовКлассификатораПредприятийХозяйствующегоСубъектаXML(GUIDХозяйствующегоСубъекта, НомерСтраницы);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос, ХозяйствующийСубъект);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

#КонецОбласти

#Область ХозяйствующиеСубъекты

// Возвращает страну мира по идентификатору.
//
// Параметры:
//  Идентификатор - ОпределяемыйТип.УникальныйИдентификаторИС - Идентификатор.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементаКлассификатора().
//
Функция ХозяйствующийСубъектПоGUID(Идентификатор, Преобразовывать = Ложь, ХозяйствующийСубъект = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементаКлассификатораХозяйствующихСубъектовПоИдентификаторуXML(
		ИнтеграцияВЕТИС.ИмяИдентификатораОбъекта(), Идентификатор);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементаКлассификатора(Запрос, ХозяйствующийСубъект, ПараметрыОбмена);
	
	Если Преобразовывать
		И РезультатВыполненияЗапроса.Элемент <> Неопределено Тогда
		РезультатВыполненияЗапроса.Элемент = ИнтеграцияВЕТИС.ДанныеХозяйствующегоСубъекта(РезультатВыполненияЗапроса.Элемент);
	КонецЕсли;
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает страну мира по идентификатору.
//
// Параметры:
//  Идентификатор - ОпределяемыйТип.УникальныйИдентификаторИС - Идентификатор.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементаКлассификатора().
//
Функция ХозяйствующийСубъектПоUUID(Идентификатор, ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементаКлассификатораХозяйствующихСубъектовПоИдентификаторуXML(
		ИнтеграцияВЕТИС.ИмяИдентификатораВерсии(), Идентификатор);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементаКлассификатора(Запрос,, ПараметрыОбмена);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает список стран мира.
//
// Параметры:
//  НомерСтраницы - Число - Номер страницы.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция СписокХозяйствующихСубъектов(ПараметрыОтбора, НомерСтраницы = 1, КоличествоЭлементовНаСтранице = Неопределено) Экспорт
	
	Запрос = ЗапросЭлементовКлассификатораХозяйствующихСубъектовXML(ПараметрыОтбора, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает список измененных за период стран мира.
//
// Параметры:
//  Интервал - Структура - Структура со свойствами:
//   * НачалоПериода - Дата - Дата начала периода.
//   * КонецПериода - Дата - Дата окончания периода.
//  НомерСтраницы - Число - Номер страницы.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция ИсторияИзмененийХозяйствующихСубъектов(Интервал, НомерСтраницы = 1,
	КоличествоЭлементовНаСтранице = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = ЗапросИзмененныхЭлементовКлассификатораХозяйствующихСубъектовXML(Интервал, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос,, ПараметрыОбмена);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗапросЭлементаКлассификатораХозяйствующихСубъектовПоИдентификаторуXML(ИмяИдентификатора, ЗначениеИдентификатора)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементаКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getBusinessEntityBy" + ТРег(ИмяИдентификатора);
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.Цербер;
	ПараметрыЗапроса.ИмяЭлемента      = "businessEntity";
	ПараметрыЗапроса.Представление    = СтрШаблон(НСтр("ru = 'запрос хозяйствующего субъекта по идентификатору %1 %2'"), ИмяИдентификатора, ЗначениеИдентификатора);
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	Запрос[ИмяИдентификатора] = ЗначениеИдентификатора;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросЭлементовКлассификатораХозяйствующихСубъектовXML(ПараметрыОтбора, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getBusinessEntityList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.Цербер;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "businessEntity";
	ПараметрыЗапроса.ИмяСписка        = "businessEntityList";
	ПараметрыЗапроса.Представление    = НСтр("ru = 'запрос списка хозяйствующих субъектов'");
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	Если ПараметрыОтбора <> Неопределено Тогда
		
		Запрос.businessEntity = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "businessEntity");
		
		Если ПараметрыОтбора.Свойство("Идентификатор")
			И ЗначениеЗаполнено(ПараметрыОтбора.Идентификатор) Тогда
			Запрос.businessEntity.guid = ПараметрыОтбора.Идентификатор;
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ИдентификаторВерсии")
			И ЗначениеЗаполнено(ПараметрыОтбора.ИдентификаторВерсии) Тогда
			Запрос.businessEntity.uuid = ПараметрыОтбора.ИдентификаторВерсии;
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Наименование")
			И ЗначениеЗаполнено(ПараметрыОтбора.Наименование) Тогда
			Запрос.businessEntity.name = ПараметрыОтбора.Наименование;
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("НаименованиеПолное")
			И ЗначениеЗаполнено(ПараметрыОтбора.НаименованиеПолное) Тогда
			Запрос.businessEntity.fullName = ПараметрыОтбора.НаименованиеПолное;
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ФИО")
			И ЗначениеЗаполнено(ПараметрыОтбора.ФИО) Тогда
			Запрос.businessEntity.fio = ПараметрыОтбора.ФИО;
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ИНН")
			И ЗначениеЗаполнено(ПараметрыОтбора.ИНН) Тогда
			Запрос.businessEntity.inn = ПараметрыОтбора.ИНН;
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("КПП")
			И ЗначениеЗаполнено(ПараметрыОтбора.КПП) Тогда
			Запрос.businessEntity.kpp = ПараметрыОтбора.КПП;
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ОГРН")
			И ЗначениеЗаполнено(ПараметрыОтбора.ОГРН) Тогда
			Запрос.businessEntity.ogrn = ПараметрыОтбора.ОГРН;
		КонецЕсли;
		
		ЗаполнитьОтборПоАдресуВЗапросе(Запрос.businessEntity, "juridicalAddress", ПараметрыОтбора);
		
	КонецЕсли;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросИзмененныхЭлементовКлассификатораХозяйствующихСубъектовXML(Интервал, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getBusinessEntityChangesList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.Цербер;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "businessEntity";
	ПараметрыЗапроса.ИмяСписка        = "businessEntityList";
	ПараметрыЗапроса.Представление    = НСтр("ru = 'запрос измененных элементов списка хозяйствующих субъектов'");
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	ИнтеграцияВЕТИС.УстановитьИнтервалЗапросаИзменений(Запрос, Интервал, ХранилищеВременныхДат);
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции


Функция ЗапросЭлементаКлассификатораПредприятийПоИдентификаторуXML(ИмяИдентификатора, ЗначениеИдентификатора)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементаКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getEnterpriseBy" + ТРег(ИмяИдентификатора);
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.Цербер;
	ПараметрыЗапроса.ИмяЭлемента      = "enterprise";
	ПараметрыЗапроса.Представление    = СтрШаблон(НСтр("ru = 'запрос предприятия по идентификатору %1 %2'"), ИмяИдентификатора, ЗначениеИдентификатора);
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	Запрос[ИмяИдентификатора] = ЗначениеИдентификатора;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросЭлементовКлассификатораПредприятийРФXML(ПараметрыОтбора, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getRussianEnterpriseList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.Цербер;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "enterprise";
	ПараметрыЗапроса.ИмяСписка        = "enterpriseList";
	ПараметрыЗапроса.Представление    = НСтр("ru = 'запрос списка предприятий РФ'");
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	Если ПараметрыОтбора <> Неопределено Тогда
		
		Запрос.enterprise = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "enterprise");
		
		Если ПараметрыОтбора.Свойство("Идентификатор")
			И ЗначениеЗаполнено(ПараметрыОтбора.Идентификатор) Тогда
			Запрос.enterprise.guid = ПараметрыОтбора.Идентификатор;
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ИдентификаторВерсии")
			И ЗначениеЗаполнено(ПараметрыОтбора.ИдентификаторВерсии) Тогда
			Запрос.enterprise.uuid = ПараметрыОтбора.ИдентификаторВерсии;
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("НомерПредприятия")
			И ЗначениеЗаполнено(ПараметрыОтбора.НомерПредприятия) Тогда
			Запрос.enterprise.numberList = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.enterprise, "numberList");
			Запрос.enterprise.numberList.enterpriseNumber.Добавить(ПараметрыОтбора.НомерПредприятия);
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("Наименование")
			И ЗначениеЗаполнено(ПараметрыОтбора.Наименование) Тогда
			Запрос.enterprise.name = ПараметрыОтбора.Наименование;
		КонецЕсли;
		
		ЗаполнитьОтборПоАдресуВЗапросе(Запрос.enterprise, "address", ПараметрыОтбора);
		
	КонецЕсли;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросИзмененныхЭлементовКлассификатораПредприятийРФXML(Интервал, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getRussianEnterpriseChangesList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.Цербер;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "enterprise";
	ПараметрыЗапроса.ИмяСписка        = "enterpriseList";
	ПараметрыЗапроса.Представление    = НСтр("ru = 'запрос измененных элементов списка предприятий РФ'");
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	ИнтеграцияВЕТИС.УстановитьИнтервалЗапросаИзменений(Запрос, Интервал, ХранилищеВременныхДат);
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросЭлементовКлассификатораЗарубежныхПредприятийXML(ПараметрыОтбора, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getForeignEnterpriseList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.Цербер;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "enterprise";
	ПараметрыЗапроса.ИмяСписка        = "enterpriseList";
	ПараметрыЗапроса.Представление    = НСтр("ru = 'запрос списка предприятий РФ'");
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	Если ПараметрыОтбора <> Неопределено Тогда
		
		Запрос.enterprise = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "enterprise");
		
		Если ПараметрыОтбора.Свойство("Идентификатор")
			И ЗначениеЗаполнено(ПараметрыОтбора.Идентификатор) Тогда
			Запрос.enterprise.guid = ПараметрыОтбора.Идентификатор;
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ИдентификаторВерсии")
			И ЗначениеЗаполнено(ПараметрыОтбора.ИдентификаторВерсии) Тогда
			Запрос.enterprise.uuid = ПараметрыОтбора.ИдентификаторВерсии;
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("НомерПредприятия") Тогда
			Запрос.enterprise.numberList = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.enterprise, "numberList");
			Запрос.enterprise.numberList.enterpriseNumber.Добавить(ПараметрыОтбора.НомерПредприятия);
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("Наименование") Тогда
			Запрос.enterprise.name = ПараметрыОтбора.Наименование;
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("НаименованиеАнглийское") Тогда
			Запрос.enterprise.englishName = ПараметрыОтбора.НаименованиеАнглийское;
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("Страна")
			Или ПараметрыОтбора.Свойство("ПредставлениеАдреса") Тогда
			
			Запрос.enterprise.address = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.enterprise, "address");
			
			Если ПараметрыОтбора.Свойство("Страна") Тогда
				Запрос.enterprise.address.country = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.enterprise.address, "country");
				Запрос.enterprise.address.country.guid = ПараметрыОтбора.Страна;
			КонецЕсли;
			
			Если ПараметрыОтбора.Свойство("ПредставлениеАдреса") Тогда
				Запрос.enterprise.address.addressView = ПараметрыОтбора.ПредставлениеАдреса;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросИзмененныхЭлементовКлассификатораЗарубежныхПредприятийXML(Интервал, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getForeignEnterpriseChangesList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.Цербер;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "enterprise";
	ПараметрыЗапроса.ИмяСписка        = "enterpriseList";
	ПараметрыЗапроса.Представление    = НСтр("ru = 'запрос измененных элементов списка предприятий РФ'");
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	ИнтеграцияВЕТИС.УстановитьИнтервалЗапросаИзменений(Запрос, Интервал, ХранилищеВременныхДат);
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросЭлементовКлассификатораПредприятийХозяйствующегоСубъектаXML(GUIDХозяйствующегоСубъекта, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getActivityLocationList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.Цербер;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "location";
	ПараметрыЗапроса.ИмяСписка        = "activityLocationList";
	ПараметрыЗапроса.Представление    = СтрШаблон(НСтр("ru = 'запрос списка предприятий хозяйствующего субъекта с guid %1'"), GUIDХозяйствующегоСубъекта);
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы);
	
	Запрос.businessEntity = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "businessEntity");
	Запрос.businessEntity.guid = GUIDХозяйствующегоСубъекта;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции


Функция ЗапросДанныхПоGLNXML(GLN)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементаКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getBusinessMemberByGLN";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.Цербер;
	ПараметрыЗапроса.ИмяЭлемента      = "businessMember";
	ПараметрыЗапроса.Представление    = СтрШаблон(НСтр("ru = 'запрос пары ""хозяйствующий субъект - площадка"" по GLN %1'"), GLN);
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	Запрос.globalID = GLN;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура УстановитьОтборПоАдресуВФильтре(ПараметрыПоиска, Фильтры) Экспорт
	
	Если Фильтры = Неопределено Тогда
		Фильтры = Новый Структура;
	КонецЕсли;
	
	Фильтры.Вставить("Адрес",         Ложь);
	Фильтры.Вставить("АдресЗначение", Новый Массив);
	
	Если Не ПараметрыПоиска.Свойство("ДанныеАдреса") Или ПараметрыПоиска.ДанныеАдреса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАдреса = ПараметрыПоиска.ДанныеАдреса;
	
	Если ДанныеАдреса.Свойство("УлицаGUID") И ЗначениеЗаполнено(ДанныеАдреса.УлицаGUID) Тогда
		ДобавитьОтборПоАдресуВФильтр(Фильтры.АдресЗначение, "street", ДанныеАдреса.УлицаGUID);
	КонецЕсли;
	
	Если ДанныеАдреса.Свойство("ГородGUID") И ЗначениеЗаполнено(ДанныеАдреса.ГородGUID) Тогда
		Если ДанныеАдреса.Свойство("НаселенныйПунктGUID") И ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктGUID) Тогда
			ДобавитьОтборПоАдресуВФильтр(Фильтры.АдресЗначение, "subLocality", ДанныеАдреса.НаселенныйПунктGUID);
		КонецЕсли;
		ДобавитьОтборПоАдресуВФильтр(Фильтры.АдресЗначение, "locality", ДанныеАдреса.ГородGUID);
	ИначеЕсли ДанныеАдреса.Свойство("НаселенныйПунктGUID") И ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктGUID) Тогда
		ДобавитьОтборПоАдресуВФильтр(Фильтры.АдресЗначение, "locality", ДанныеАдреса.НаселенныйПунктGUID);
	КонецЕсли;
	
	Если ДанныеАдреса.Свойство("РайонGUID") И ЗначениеЗаполнено(ДанныеАдреса.РайонGUID) Тогда
		ДобавитьОтборПоАдресуВФильтр(Фильтры.АдресЗначение, "district", ДанныеАдреса.РайонGUID);
	КонецЕсли;
	
	Если ДанныеАдреса.Свойство("РегионGUID") И ЗначениеЗаполнено(ДанныеАдреса.РегионGUID) Тогда
		ДобавитьОтборПоАдресуВФильтр(Фильтры.АдресЗначение, "region", ДанныеАдреса.РегионGUID);
	КонецЕсли;
	
	Фильтры.Адрес = (Фильтры.АдресЗначение.Количество() > 0);
	
КонецПроцедуры

Процедура ДобавитьОтборПоАдресуВФильтр(СценарийПроверкиАдреса, ИмяПараметраВетИС, Значение)
	
	ПараметрыПроверки = Новый Структура("ИмяПараметраВетИС, Значение", ИмяПараметраВетИС, Значение);
	СценарийПроверкиАдреса.Добавить(ПараметрыПроверки);
	
КонецПроцедуры

Функция АдресСоответствуетФильтру(ДанныеАдресаВетИС, Фильтры) Экспорт
	
	Результат = Истина;
	
	Если Фильтры.Адрес Тогда
		
		СтатусыПроверки = Новый Структура("Отказ, ПродолжитьПроверку, ИмяПараметра", Ложь, Истина, "");
		
		Для Каждого ПараметрыПроверки Из Фильтры.АдресЗначение Цикл
			ПроверкаЗначенияАдресаВетИС(СтатусыПроверки, ДанныеАдресаВетИС, ПараметрыПроверки);
			Если СтатусыПроверки.Отказ Или Не СтатусыПроверки.ПродолжитьПроверку Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтатусыПроверки.Отказ Тогда
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверкаЗначенияАдресаВетИС(СтатусыПроверки, ДанныеАдресаВетИС, ПараметрыПроверки)
	
	Если СтатусыПроверки.Отказ Или Не СтатусыПроверки.ПродолжитьПроверку Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыПроверки.ПродолжитьПроверку = Ложь;
	СтатусыПроверки.ИмяПараметра       = ПараметрыПроверки.ИмяПараметраВетИС;
	
	Если ДанныеАдресаВетИС[ПараметрыПроверки.ИмяПараметраВетИС] = Неопределено
		Или ПараметрыПроверки.Значение <> ДанныеАдресаВетИС[ПараметрыПроверки.ИмяПараметраВетИС].guid Тогда
		СтатусыПроверки.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтборПоАдресуВЗапросе(ОбъектXDTOРодитель, ИмяТипа, ПараметрыОтбора)
	
	Если Не ПараметрыОтбора.Свойство("ДанныеАдреса")
		Или ПараметрыОтбора.ДанныеАдреса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАдреса = ПараметрыОтбора.ДанныеАдреса;
	
	Если    (ДанныеАдреса.Свойство("РегионGUID")          И ЗначениеЗаполнено(ДанныеАдреса.РегионGUID))
		Или (ДанныеАдреса.Свойство("РайонGUID")           И ЗначениеЗаполнено(ДанныеАдреса.РайонGUID))
		Или (ДанныеАдреса.Свойство("ГородGUID")           И ЗначениеЗаполнено(ДанныеАдреса.ГородGUID))
		Или (ДанныеАдреса.Свойство("НаселенныйПунктGUID") И ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктGUID))Тогда
		
		АдресXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTOРодитель, ИмяТипа);
		
		Если ДанныеАдреса.Свойство("СтранаGUID")
			И ЗначениеЗаполнено(ДанныеАдреса.СтранаGUID) Тогда
			АдресXDTO.country = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АдресXDTO, "country");
			АдресXDTO.country.guid = ДанныеАдреса.СтранаGUID;
		КонецЕсли;
		
		Если ДанныеАдреса.Свойство("РегионGUID")
			И ЗначениеЗаполнено(ДанныеАдреса.РегионGUID) Тогда
			АдресXDTO.region = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АдресXDTO, "region");
			АдресXDTO.region.guid = ДанныеАдреса.РегионGUID;
		КонецЕсли;
		
		Если ДанныеАдреса.Свойство("РайонGUID")
			И ЗначениеЗаполнено(ДанныеАдреса.РайонGUID) Тогда
			АдресXDTO.district = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АдресXDTO, "district");
			АдресXDTO.district.guid = ДанныеАдреса.РайонGUID;
		КонецЕсли;
		
		Если ДанныеАдреса.Свойство("ГородGUID")
			И ЗначениеЗаполнено(ДанныеАдреса.ГородGUID) Тогда
			АдресXDTO.locality = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АдресXDTO, "locality");
			АдресXDTO.locality.guid = ДанныеАдреса.ГородGUID;
			Если ДанныеАдреса.Свойство("НаселенныйПунктGUID")
				И ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктGUID) Тогда
				АдресXDTO.subLocality = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АдресXDTO, "subLocality");
				АдресXDTO.subLocality.guid = ДанныеАдреса.НаселенныйПунктGUID;
			КонецЕсли;
		ИначеЕсли ДанныеАдреса.Свойство("НаселенныйПунктGUID")
			И ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктGUID) Тогда
			АдресXDTO.locality = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АдресXDTO, "locality");
			АдресXDTO.locality.guid = ДанныеАдреса.НаселенныйПунктGUID;
		КонецЕсли;
		
		Если ДанныеАдреса.Свойство("УлицаGUID")
			И ЗначениеЗаполнено(ДанныеАдреса.УлицаGUID) Тогда
			АдресXDTO.street = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АдресXDTO, "street");
			АдресXDTO.street.guid = ДанныеАдреса.УлицаGUID;
		КонецЕсли;
		
		Если ДанныеАдреса.Свойство("НомерДома")
			И ЗначениеЗаполнено(ДанныеАдреса.НомерДома) Тогда
			АдресXDTO.house = ДанныеАдреса.НомерДома;
		КонецЕсли;
		
		Если ДанныеАдреса.Свойство("НомерСтроения")
			И ЗначениеЗаполнено(ДанныеАдреса.НомерСтроения) Тогда
			АдресXDTO.building = ДанныеАдреса.НомерСтроения;
		КонецЕсли;
		
		Если ДанныеАдреса.Свойство("НомерОфиса")
			И ЗначениеЗаполнено(ДанныеАдреса.НомерОфиса) Тогда
			АдресXDTO.room = ДанныеАдреса.НомерОфиса;
		КонецЕсли;
		
		Если ДанныеАдреса.Свойство("ПочтовыйИндекс")
			И ЗначениеЗаполнено(ДанныеАдреса.ПочтовыйИндекс) Тогда
			АдресXDTO.postIndex = ДанныеАдреса.ПочтовыйИндекс;
		КонецЕсли;
		
		ОбъектXDTOРодитель[ИмяТипа] = АдресXDTO;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти