
#Область ПрограммныйИнтерфейс

#Область ФункцииКонструкторы

// Конструктор настроек стандартных отчетов. При помощи этих настроек отчеты обмениваются настройками для расшифровки.
// При заполнении набора настроек не требуется учитывать специфику принимающего отчета.
// Для точной расшифровки в настройках нужно отразить контекст отчета и контекст расшифровываемой ячейки отчета.
// 
// Возвращаемое значение:
//  Структура - Пустая коллекция настроек.
//
Функция НовыйУниверсальныеНастройки() Экспорт
	
	Настройки = Новый Структура();
	
	Настройки.Вставить("КлючВарианта",						Неопределено);
	Настройки.Вставить("Счет",								ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка"));
	Настройки.Вставить("НачалоПериода",						'00010101');
	Настройки.Вставить("КонецПериода",						'00010101');
	Настройки.Вставить("Организация",						ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	Настройки.Вставить("ВключатьОбособленныеПодразделения",	Ложь);
	
	Настройки.Вставить("ПоказательБУ",						Истина);	// По умолчанию БУ включен
	Настройки.Вставить("ПоказательНУ",						Ложь);
	Настройки.Вставить("ПоказательСверкаНУ",				Ложь);
	Настройки.Вставить("ПоказательПР",						Ложь);
	Настройки.Вставить("ПоказательВР",						Ложь);
	Настройки.Вставить("ПоказательСумма",					Истина);	// По умолчанию Сумма включена
	Настройки.Вставить("ПоказательКоличество",				Ложь);
	Настройки.Вставить("ПоказательВалютнаяСумма",			Ложь);
	Настройки.Вставить("ПоказательКонтроль",				Ложь);
	Настройки.Вставить("РазвернутоеСальдо",					Ложь);
	Настройки.Вставить("БухТипРесурса", 					""); 	// Указатель на сторону проводки, принимает строковые значения: "Дт" и "Кт"
	
	Настройки.Вставить("ВыводитьЗаголовок", 				Ложь);
	Настройки.Вставить("ВыводитьЕдиницуИзмерения", 			Ложь);
	Настройки.Вставить("ВыводитьПодвал", 					Ложь);
	
	Настройки.Вставить("СписокВидовСубконто",				Новый Массив);
	
	Настройки.Вставить("ПоСубсчетам",						Ложь);
	Настройки.Вставить("ПоСубсчетамКорСчетов",				Ложь);
	
	Настройки.Вставить("Периодичность",						Периодичность().Период);
																// Подробнее см. значения параметра "Периодичность" таблицы ОстаткиИОбороты регистра бухгалтерии.
																	
	Настройки.Вставить("РазмещениеДополнительныхПолей",		РазмещениеДополнительныхПолей().ВместеСВладельцем);
	
	Настройки.Вставить("ТаблицаГруппировка",				НовыйГруппировка());
	Настройки.Вставить("ТаблицаДополнительныеПоля",			НовыйДополнительныеПоля());
	
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	
	Настройки.Вставить("НастройкиКомпоновки",				НастройкиКомпоновкиДанных);
	Настройки.Вставить("Отбор",								НастройкиКомпоновкиДанных.Отбор);
	Настройки.Вставить("УсловноеОформление",				НастройкиКомпоновкиДанных.УсловноеОформление);
	Настройки.Вставить("Порядок",							НастройкиКомпоновкиДанных.Порядок);
	Настройки.Вставить("МакетОформления",					"");
	
	Возврат Настройки;
	
КонецФункции

// Конструктор строки группировки универсальных настроек.
// Таблица группировки (см. НовыйГруппировка()) в коллекции настроек (см. НовыйУниверсальныеНастройки()) 
// представлена в виде массива структур.
// Ключи возвращаемой структуры соответствуют колонкам таблицы группировок стандартного отчета.
// 
// Возвращаемое значение:
// 	Структура - Описывает строку группировки отчета.
//
Функция НовыйСтрокаГруппировки() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Использование");
	Результат.Вставить("Представление");
	Результат.Вставить("Поле");
	Результат.Вставить("ТипГруппировки");

	Возврат Результат;
	
КонецФункции

// Конструктор строки дополнительных полей универсальных настроек.
// Таблица дополнительных полей (см. НовыйДополнительныеПоля) в коллекции настроек (см. НовыйУниверсальныеНастройки) 
// представлена в виде массива структур.
// Ключи возвращаемой структуры соответствуют колонкам таблицы дополнительных полей стандартного отчета.
//
// Возвращаемое значение:
//   Структура - Описывает строку дополнительных полей отчета.
//
Функция НовыйСтрокаДополнительныеПоля() Экспорт
	
	Возврат Новый Структура("Использование, Представление, Поле");
	
КонецФункции

// Конструктор параметров открытия формы стандартного отчета.
//
// Возвращаемое значение:
//	Структура - Содержит ключи с параметрами открытия формы.
//
Функция НовыйПараметрыФормыСтандартногоОтчета() Экспорт
	
	ПараметрыФормы= Новый Структура();
	
	ПараметрыФормы.Вставить("ОткрытьРасшифровку", Ложь);
	ПараметрыФормы.Вставить("АдресРасшифровки");
	ПараметрыФормы.Вставить("ИдентификаторРасшифровки");
	ПараметрыФормы.Вставить("ИмяОтчета");
	ПараметрыФормы.Вставить("ИмяИсходногоОтчета");
	ПараметрыФормы.Вставить("РеквизитыПравилРасшифровки");
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Конструктор информации об обнаруженной ошибке, связанной с проблемой в таблицах итогов.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - при работе с которой обнаружена проблема. Должна содержать реквизит "Отчет".
//
// Возвращаемое значение:
//   Структура   - описание места, где проявилась проблема.
//
Функция МестоРасхожденияИтогов(Форма) Экспорт

	Отчет = Форма.Отчет;
	
	МестоРасхождения = Новый Структура;
	МестоРасхождения.Вставить("ИдентификаторФормы", Форма.УникальныйИдентификатор);
	МестоРасхождения.Вставить("ИмяОтчета",          БухгалтерскиеОтчетыКлиентСервер.ИмяОтчетаПоИмениФормы(Форма));
	МестоРасхождения.Вставить("Организация",
		?(Форма.ИспользуетсяНесколькоОрганизаций, Отчет.Организация, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка")));
	МестоРасхождения.Вставить("НачалоПериода",      Отчет.НачалоПериода);
	МестоРасхождения.Вставить("КонецПериода",       Отчет.КонецПериода);
	
	Возврат МестоРасхождения;
	
КонецФункции

#КонецОбласти

#Область НастройкиОтчета

// Возвращает значение параметра компоновки данных.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных, ПользовательскиеНастройкиКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных, 
//              КоллекцияЗначенийПараметровКомпоновкиДанных, ОформлениеКомпоновкиДанных - 
//              Настройки, в которых происходит поиск параметра. Не поддерживает тип ДанныеРасшифровкиКомпоновкиДанных.
//  Параметр - Строка, ПараметрКомпоновкиДанных - Имя параметра СКД, для которого нужно вернуть значение параметра.
//
// Возвращаемое значение:
//	ПараметрКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных - Искомый параметр.
//	
Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Найти(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Устанавливает значение параметра компоновки данных.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных, ПользовательскиеНастройкиКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных, 
//              КоллекцияЗначенийПараметровКомпоновкиДанных, ОформлениеКомпоновкиДанных - Настройки, 
//              в которых происходит поиск параметра. 
//	Параметр - Строка, ПараметрКомпоновкиДанных - Имя параметра СКД, для которого нужно установить значение параметра.
//  Значение - Произвольный - Значение параметра.
//	Использование - Булево - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
// Возвращаемое значение:
//	ПараметрКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных - Параметр, для которого установлено значение.
//
Функция УстановитьПараметр(Настройки, Параметр, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметр(Настройки, Параметр);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Возвращает элемент структуры настроек компоновки данных содержащий поле группировки с указанным именем.
// Поиск осуществляется по указанной структуре и все ее подчиненным структурам.
// В случае неудачи возвращает Неопределено.
//
// Параметры:
//   СтруктураГруппировки - ГруппировкаТаблицыКомпоновкиДанных, ГруппировкаКомпоновкиДанных, 
//               КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных - элемент структуры компоновки данных.
//   ИмяПоля - Строка - Имя поля группировки.
//
// Возвращаемое значение:
//   ГруппировкаТаблицыКомпоновкиДанных, ГруппировкаКомпоновкиДанных, Неопределено.
//
Функция НайтиГруппировку(СтруктураГруппировки, ИмяПоля) Экспорт
	
	Для каждого Элемент Из СтруктураГруппировки Цикл
		
		Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
			Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
				Если Поле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
					Возврат Элемент;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Элемент.Структура.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Группировка = НайтиГруппировку(Элемент.Структура, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	Возврат Группировка;
	
КонецФункции

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов.
//
// Параметры:
//	ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, 
//                     ОтборКомпоновкиДанных - Элемент структуры.
//	Поле - Строка - имя поля, по которому добавляется отбор.
//	Значение - Произвольный - Значение отбора.
//	ВидСравнения - ВидСравненияКомпоновкиДанных - Вид сравнений компоновки данных (по умолчанию: Равно).
//	Использование - Булево - Признак использования отбора (по умолчанию: Истина).
//
// Возвращаемое значение:
//	ЭлементОтбораКомпоновкиДанных - Добавленный элемент отбора.
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение = Неопределено, ВидСравнения = Неопределено, Использование = Истина, ВПользовательскиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		
		Если ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл	
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
		
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЗначениеОтбораКомпоновки = Значение;
	// Механизмы компоновки в качестве списка принимают СписокЗначений,
	// но не более очевидную коллекцию - Массив.
	ТипЗначенияОтбора = ТипЗнч(Значение);
	Если ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
		Или ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		Или ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
		Или ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		
		Если ТипЗначенияОтбора = Тип("Массив") Тогда
			ЗначениеОтбораКомпоновки = Новый СписокЗначений;
			ЗначениеОтбораКомпоновки.ЗагрузитьЗначения(Значение);
		ИначеЕсли ТипЗначенияОтбора = Тип("ФиксированныйМассив") Тогда
			ЗначениеОтбораКомпоновки = Новый СписокЗначений;
			ЗначениеОтбораКомпоновки.ЗагрузитьЗначения(Новый Массив(Значение));
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = ЗначениеОтбораКомпоновки;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Удаляет служебные элементы отбора, которые не нужно показывать пользователю, и элементы,
// у которых снят флаг использования.
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек, отбор которого нужно обработать.
//
Процедура УдалитьНеиспользуемыйОтбор(КомпоновщикНастроек) Экспорт
	
	ЭлементыДляУдаления = Новый Массив;
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если Не ЭлементОтбора.Использование ИЛИ ЭтоСлужебныйЭлементОтбора(ЭлементОтбора) Тогда
			
			ЭлементыДляУдаления.Добавить(ЭлементОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из ЭлементыДляУдаления Цикл
		
		Отбор.Элементы.Удалить(Элемент);
		
	КонецЦикла;

КонецПроцедуры

// Удаляет ИдентификаторПользовательскойНастройки для элементов отбора,
// тем самым перемещая отбор из пользовательских настроек в обычные.
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиданных - Компоновщик в настройках которого нужно переместить отборы.
//
Процедура УдалитьИдентификаторПользовательскойНастройкиИзОтбора(КомпоновщикНастроек) Экспорт
	
	Для каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		ЭлементОтбора.ИдентификаторПользовательскойНастройки = "";
	КонецЦикла;
	
КонецПроцедуры

// Возвращает доступность показателя.
// Ищет показатель в доступных полях компоновщика данных (ДоступныеПоля) по имени (ИмяПоказателя).
//
// Параметры:
//	ДоступныеПоля - ДоступныеПоляКомпоновкиДанных - Коллекция доступных полей, в которой осуществляется поиск.
//	ИмяПоказателя - Строка - Имя искомого показателя.
//
// Возвращаемое значение:
//	Булево - Истина, если показатель есть среди доступных, в противном случае - Ложь.
//
Функция ПоказательДоступен(ДоступныеПоля, ИмяПоказателя) Экспорт
	
	Возврат ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоказателя)) <> Неопределено;
	
КонецФункции	

// Возвращает значение указанного свойства поля структуры.
//
// Параметры:
//	ЭлементСтруктура - КомпоновщикНастроекКомпоновкиДанных, Произвольный - Структура, в которой хранится поле.
//	Поле - Произвольный - Поле, для которого определяется значение свойства.
//	Свойство - Строка - Имя свойства, значение которого требуется получить.
//
// Возвращаемое значение:
//	Произвольный - Значение запрашиваемого свойства поля либо Неопределено.
//
Функция ПолучитьСвойствоПоля(ЭлементСтруктура, Поле, Свойство = "Заголовок") Экспорт
	
	Если ТипЗнч(ЭлементСтруктура) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Коллекция = ЭлементСтруктура.Настройки.ДоступныеПоляВыбора;
	Иначе
		Коллекция = ЭлементСтруктура;
	КонецЕсли;
	
	ПолеСтрокой = Строка(Поле);
	ПозицияКвадратнойСкобки = СтрНайти(ПолеСтрокой, "[");
	Окончание = "";
	Заголовок = "";
	Если ПозицияКвадратнойСкобки > 0 Тогда
		Окончание = Сред(ПолеСтрокой, ПозицияКвадратнойСкобки);
		ПолеСтрокой = Лев(ПолеСтрокой, ПозицияКвадратнойСкобки - 2);
	КонецЕсли;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолеСтрокой, ".");
	
	Если Не ПустаяСтрока(Окончание) Тогда
		МассивСтрок.Добавить(Окончание);
	КонецЕсли;
	
	ДоступныеПоля = Коллекция.Элементы;
	ПолеПоиска = "";
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		ПолеПоиска = ПолеПоиска + ?(Индекс = 0, "", ".") + МассивСтрок[Индекс];
		ДоступноеПоле = ДоступныеПоля.Найти(ПолеПоиска);
		Если ДоступноеПоле <> Неопределено Тогда
			ДоступныеПоля = ДоступноеПоле.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Результат = ДоступноеПоле;
		Иначе
			Результат = ДоступноеПоле[Свойство]; 
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция добавляет выбранное поле и возвращает элемент выбранного поля. 
//
// Параметры:
//	ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, 
//	                   ВыбранныеПоляКомпоновкиДанных - Элемент структуры настройки отчета.
//	Поле - Строка - имя поля, которое нужно добавить в СКД.
//	Заголовок - Строка - Заголовок добавляемого поля.
// 
// Возвращаемое значение:
//	ВыбранноеПолеКомпоновкиДанных - Добавленное поле.
//
Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле;
	Если Заголовок <> Неопределено Тогда
		ВыбранноеПоле.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПоле;
	
КонецФункции

// Определяет путь к родителю верхнего уровня переданного поля.
// 
// Параметры:
//  Поле - ПолеКомпоновкиДанных - поле любого уровня иерархии, может содержать "."
// 
// Возвращаемое значение:
//  Строка - путь к полю верхнего уровня, не содержит ".". Пустая строка, если путь нельзя определить.
//
Функция КореньПоля(Поле) Экспорт
	
	// См. также БухгалтерскиеОтчетыВызовСервера.ЗаполнитьДополнительныеПоляИзНастроек()
	
	ПутьПоля = СтрРазделить(Строка(Поле), ".");
	Если Не ЗначениеЗаполнено(ПутьПоля) Тогда
		Возврат "";
	Иначе
		Возврат ПутьПоля[0];
	КонецЕсли;
	
КонецФункции

// Определяет путь к родителю верхнего уровня переданного ресурса.
// В подсистеме СтандартныеОтчеты принято, что ресурсы имеют префикс "Ресурсы." для эмуляции пользовательских настроек.
// 
// Параметры:
//  Поле - ПолеКомпоновкиДанных - поле любого уровня иерархии, может содержать "."
// 
// Возвращаемое значение:
//  Строка - путь к полю верхнего уровня, не содержит ".". Пустая строка, если переданное поле не является полем ресурса.
//
Функция КореньРесурса(Поле) Экспорт
	
	Префикс       = "Ресурсы.";
	ДлинаПрефикса = 8;
	
	ПутьПоля = Строка(Поле);
	Если Лев(ПутьПоля, ДлинаПрефикса) <> Префикс Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат КореньПоля(Сред(ПутьПоля, ДлинаПрефикса + 1));
	
КонецФункции

// Получает параметр вывода компоновщика настроек или настройки СКД.
//
// Параметры:
// 	КомпоновщикНастроекГруппировка - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек 
//		или настройка/группировка СКД.
//  ИмяПараметра - Строка - Имя параметра СКД.
//
// Возвращаемое значение:
//	ЗначениеПараметраКомпоновкиДанных - Параметр вывода.
//
Функция ПолучитьПараметрВывода(Настройка, ИмяПараметра) Экспорт
	
	МассивПараметров   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПараметра, ".");
	УровеньВложенности = МассивПараметров.Количество();
	
	Если УровеньВложенности > 1 Тогда
		ИмяПараметра = МассивПараметров[0];		
	КонецЕсли;
	
	Если ТипЗнч(Настройка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = Настройка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если УровеньВложенности > 1 Тогда
		Для Индекс = 1 По УровеньВложенности - 1 Цикл
			ИмяПараметра = ИмяПараметра + "." + МассивПараметров[Индекс];
			ЗначениеПараметра = ЗначениеПараметра.ЗначенияВложенныхПараметров.Найти(ИмяПараметра); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;  
	
КонецФункции

// Устанавливает параметр вывода компоновщика настроек или настройки СКД.
//
// Параметры:
//	КомпоновщикНастроекГруппировка - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек или настройка/группировка СКД.
//	ИмяПараметра - Строка - Имя параметра СКД.
//	Значение - Произвольный - Значение параметра вывода СКД.
//	Использование - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
// Возвращаемое значение:
//	ЗначениеПараметраКомпоновкиДанных - Параметр вывода.
//
Функция УстановитьПараметрВывода(Настройка, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметрВывода(Настройка, ИмяПараметра);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

#КонецОбласти

#Область Интерфейсные

// Выполняет настройку формы отчета при изменении организации.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//  Организация - СправочникСсылка.Организации - организация, заданная в форме.
//
Процедура ОрганизацияПриИзменении(Форма, Организация) Экспорт 
	
	Отчет = Форма.Отчет;
	ТипыСвязанныеСОрганизацией = БухгалтерскиеОтчетыВызовСервера.ТипыСвязанныеСОрганизацией();
	
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					ЭлементОтбора.ПравоеЗначение = Организация;
				Иначе
					ЭлементОтбора.ПравоеЗначение = Неопределено;
				КонецЕсли; 
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Отчет, "ВключатьОбособленныеПодразделения") Тогда
					Отчет.ВключатьОбособленныеПодразделения = Ложь;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение)
				И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЭлементОтбора.ПравоеЗначение)) Тогда
				ЭлементОтбора.ПравоеЗначение = Неопределено;
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПодразделениеПриИзменении(Форма);
	
КонецПроцедуры

// Выполняет настройку формы отчета при изменении подразделения.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//
Процедура ПодразделениеПриИзменении(Форма) Экспорт
	
	Отчет = Форма.Отчет;
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда 
					ЭлементОтбора.ПравоеЗначение = Отчет.Подразделение;
				Иначе
					ЭлементОтбора.ПравоеЗначение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Скрывает видимость элементов формы, связанных с настройками отчета.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	ДополнительныеПараметры - Структура, Неопределено - Структура, содержащая ключи:
//		* СкрыватьНастройкиПриФормированииОтчета - Булево - Признак необходимости скрытия настроек.
//		* ИмяГруппаПанельНастроек - Строка - Имя панели с настройками на форме.
//		* ИмяКнопкаПанельНастроек - Строка - Имя кнопки вызова панели настроек (опционально).
//
Процедура СкрыватьНастройкиПриФормированииОтчета(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		СкрыватьНастройкиПриФормированииОтчета = Форма.СкрыватьНастройкиПриФормированииОтчета;
		ПанельНастроек       = Форма.Элементы.ГруппаПанельНастроек;
		КнопкаПанельНастроек = Форма.Элементы.ПанельНастроек;
	Иначе
		СкрыватьНастройкиПриФормированииОтчета = ДополнительныеПараметры.СкрыватьНастройкиПриФормированииОтчета;
		ПанельНастроек       = Форма.Элементы[ДополнительныеПараметры.ИмяГруппаПанельНастроек];
		Если ДополнительныеПараметры.Свойство("ИмяКнопкаПанельНастроек") Тогда
			КнопкаПанельНастроек = Форма.Элементы[ДополнительныеПараметры.ИмяКнопкаПанельНастроек];
		Иначе
			КнопкаПанельНастроек = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СкрыватьНастройкиПриФормированииОтчета Тогда
		Если ПанельНастроек.Видимость Тогда
			Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПанельНастроекСкрытаАвтоматически", Истина);
		КонецЕсли;
		ПанельНастроек.Видимость = Ложь;
		Если КнопкаПанельНастроек <> Неопределено Тогда
			ИзменитьЗаголовокКнопкиПанельНастроек(КнопкаПанельНастроек, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает заголовок кнопки отображения / скрытия панели настроек отчета.
//
// Параметры:
//	Кнопка - КнопкаФормы - Кнопка отображения / скрытия панели настроек.
//	ВидимостьПанелиНастроек - Булево - Признак видимости кнопки.
//
Процедура ИзменитьЗаголовокКнопкиПанельНастроек(Кнопка, ВидимостьПанелиНастроек) Экспорт
	
	Если ВидимостьПанелиНастроек Тогда
		Кнопка.Заголовок = НСтр("ru = 'Скрыть настройки'");
	Иначе
		Кнопка.Заголовок = НСтр("ru = 'Показать настройки'");
	КонецЕсли;
		
КонецПроцедуры

// Вычисляет сумму выделенных ячеек табличного документа.
//
// Параметры:
//	Сумма - Число - Сумма значений ячеек.
//	СтруктураАдресВыделеннойОбласти - Структура - Содержит ячейки выделенной области.
//	Результат - ТабличныйДокумент - Табличный документ, содержащий ячейки для суммирования.
//
Процедура ВычислитьСуммуВЯчейках(Сумма, СтруктураАдресВыделеннойОбласти, Результат) Экспорт
	Перем РазделительДробнойЧасти;
	
	Если Не СтруктураАдресВыделеннойОбласти.Свойство("РазделительДробнойЧасти", РазделительДробнойЧасти) Тогда
		ЭталонноеЧисло = Формат(1.1);
		РазделительДробнойЧасти = ?(СтрДлина(ЭталонноеЧисло) > 3, "", Сред(ЭталонноеЧисло, 2, 1));
	КонецЕсли;

	Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
		Если ИндексСтрока = 0 Тогда // Выделена колонка отчета (без ограничений), суммы из нее получить нельзя.
			Продолжить;
		КонецЕсли;
		
		Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
			Если ИндексКолонка = 0 Тогда // Выделена строка отчета (без ограничений), суммы из нее получить нельзя.
				Продолжить;
			КонецЕсли;
			
			Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
			Если Ячейка.Видимость <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
				Сумма = Сумма + Ячейка.Значение;
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(Ячейка.Текст) Тогда
				Продолжить;
			КонецЕсли;

			Сумма = Сумма + СтрокаСФорматомВЧисло(Ячейка.Текст, РазделительДробнойЧасти);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает строку с представлением периода.
//
// Параметры:
//	НачалоПериода - Дата - Начало периода.
//	КонецПериода - Дата - Конец периода.
//	ТолькоДаты - Булево - Если Ложь, то возвращаемая строка включает предлог "за".
//
// Возвращаемое значение:
//  Строка - Текст представления периода.
//
Функция ПолучитьПредставлениеПериода(НачалоПериода = '00010101', КонецПериода = '00010101', ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " " + НСтр("ru = 'за'")+ " ") 
				+ ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " " + НСтр("ru = 'за'")+ " ") 
			+ ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, СтрНайти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

// Возвращает дату начала периода.
//
// Параметры:
//	Период - Дата - Дата, для которой необходимо определить начало периода.
//	Периодичность - Число - Определяет вид периода.
//
// Возвращаемое значение:
//	Дата - Дата, соответствующая началу периода.
//
Функция НачалоПериода(Период, Периодичность) Экспорт
	
	НачалоПериода = Период;
	Если Периодичность = 6 Тогда       //День
		НачалоПериода = НачалоДня(Период);
	ИначеЕсли Периодичность = 7 Тогда  //Неделя
		НачалоПериода = НачалоНедели(Период);
	ИначеЕсли Периодичность = 8 Тогда  //Декада
		Если День(Период) <= 10 Тогда
			НачалоПериода = Дата(Год(Период), Месяц(Период), 1);
		ИначеЕсли День(Период) > 10 И День(Период) <= 20 Тогда
			НачалоПериода = Дата(Год(Период), Месяц(Период), 11);
		Иначе
			НачалоПериода = Дата(Год(Период), Месяц(Период), 21);
		КонецЕсли;
	ИначеЕсли Периодичность = 9 Тогда  //Месяц
		НачалоПериода = НачалоМесяца(Период);
	ИначеЕсли Периодичность = 10 Тогда //Квартал
		НачалоПериода = НачалоКвартала(Период);
	ИначеЕсли Периодичность = 11 Тогда //Полугодие
		НачалоПериода = ?(Месяц(Период) < 7, НачалоДня(Дата(Год(Период), 1, 1)), НачалоДня(Дата(Год(Период), 7, 1)));
	ИначеЕсли Периодичность = 12 Тогда //Год
		НачалоПериода = НачалоГода(Период);
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции

// Возвращает дату окончания периода.
//
// Параметры:
//	Период - Дата - Дата, для которой необходимо определить конец периода.
//	Периодичность - Число - Определяет вид периода.
//
// Возвращаемое значение:
//	Дата - Дата, соответствующая окончания периода.
//
Функция КонецПериода(Период, Периодичность) Экспорт
	
	КонецПериода = Период;
	Если Периодичность = 6 Тогда       //День
		КонецПериода = КонецДня(Период);
	ИначеЕсли Периодичность = 7 Тогда  //Неделя
		КонецПериода = КонецНедели(Период);
	ИначеЕсли Периодичность = 8 Тогда  //Декада
		Если День(Период) > 20 Тогда
			КонецПериода = КонецМесяца(Период);
		Иначе
			КонецПериода = КонецДня(Период + 10 * 86400 - 1);
		КонецЕсли; 
	ИначеЕсли Периодичность = 9 Тогда  //Месяц
		КонецПериода = КонецМесяца(Период);
	ИначеЕсли Периодичность = 10 Тогда //Квартал
		КонецПериода = КонецКвартала(Период);
	ИначеЕсли Периодичность = 11 Тогда //Полугодие
		КонецПериода = ?(Месяц(Период) < 7, КонецДня(Дата(Год(Период), 6, 30)), КонецДня(Дата(Год(Период), 12, 31)));
	ИначеЕсли Периодичность = 12 Тогда //Год
		КонецПериода = КонецГода(Период);
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции

// Возвращает вид ближайшего периода между двумя датами.
//
// Параметры:
//	Периодичность - Число - Исходное значение периодичности.
//	НачалоПериода - ДатаВремя - Дата и время начала периода.
//	КонецПериода - ДатаВремя - Дата и время окончания периода.
//
// Возвращаемое значение:
//	Число - Вид периодичности.
//
Функция ПолучитьЗначениеПериодичности(Периодичность, НачалоПериода, КонецПериода) Экспорт
	
	Результат = Периодичность;
	Если Периодичность = 0 Тогда
		Если ЗначениеЗаполнено(НачалоПериода)
			И ЗначениеЗаполнено(КонецПериода) Тогда
			Разность = КонецПериода - НачалоПериода;
			Если Разность / 86400 < 45 Тогда
				Результат = 6; // День.
			Иначе
				Результат = 9; // Месяц.
			КонецЕсли;
		Иначе
			Результат = 9; // Месяц.
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает период отчета в настройках (см. НовыйУниверсальныеНастройки())
// исходя их переданного значения начала периода и периодичности отчета,
// периодичность при этом будет сброшена.
//
// Параметры:
//  Настройки - Структура - настройки отчета, см. НовыйУниверсальныеНастройки().
//  НачалоПериода - Дата - Дата начала периода.
//
Процедура ПреобразоватьПериодичностьОтчетаВПериод(Настройки, НачалоПериода) Экспорт
	
	Настройки.НачалоПериода = НачалоПериода;
	
	Если Настройки.Периодичность = 6 Тогда // По дням.
		
		Настройки.КонецПериода = КонецДня(Настройки.НачалоПериода);
		
	ИначеЕсли Настройки.Периодичность = 7 Тогда // По неделям.
		
		Настройки.КонецПериода = КонецНедели(Настройки.НачалоПериода);
		
	ИначеЕсли Настройки.Периодичность = 8 Тогда // По декадам.
		
		Настройки.КонецПериода = Мин(КонецМесяца(Настройки.НачалоПериода), КонецДня(Настройки.НачалоПериода + 9*60*60*24));
		
	ИначеЕсли Настройки.Периодичность = 9 Тогда // По месяцам.
		
		Настройки.КонецПериода = КонецМесяца(Настройки.НачалоПериода);
		
	ИначеЕсли Настройки.Периодичность = 10 Тогда // По кварталам.
		
		Настройки.КонецПериода = КонецКвартала(Настройки.НачалоПериода);
		
	ИначеЕсли Настройки.Периодичность = 11 Тогда // По полугодиям.
		
		Если ДеньГода(Настройки.НачалоПериода) = 1 Тогда
			Настройки.КонецПериода = Дата(Год(Настройки.НачалоПериода), 6, 30,23,59,59);
		Иначе
			Настройки.КонецПериода = КонецГода(Настройки.НачалоПериода);
		КонецЕсли;
		
	ИначеЕсли Настройки.Периодичность = 12 Тогда // По годам.
		
		Настройки.КонецПериода = КонецГода(Настройки.НачалоПериода);
		
	КонецЕсли;

	Настройки.Периодичность = 0; // За период отчета.
	
КонецПроцедуры

// Настраивает флаги, с помощью которых пользователь может включить или выключить отображение разниц по ПБУ 18.
//
// Эти показатели (и реквизиты для их настройки) привязываются к параметрической функциональной опции и платформа
// автоматически скрывает их от пользователя, когда ни в одном из периодов и ни по одной из организаций учет разниц не ведется.
//
// Вызов этой процедуры отключит (сделает недоступными пользователю) показатели, если они могут понадобиться в информационной базе,
// но в контексте отчета (по организации, в периоде) - не нужны.
//
// См. также ИсправитьПоказателиРазниц.
// 
// Параметры:
//  Отчет               - ОтчетОбъект - настраиваемый отчет.
//                        Должен содержать реквизиты Организация, НачалоПериода, КонецПериода, описывающие контекст отчета,
//                        а также выключатели показателей, указанные в ключах ЭлементыПоказателей.
//  ЭлементыПоказателей - Структура - ссылки на элементы формы, отображающие данные показателей разниц по ПБУ 18
//                        Ключ - имя реквизита для настройки отображения разницы
//                               ("ПоказательВР", "ПоказательПР", "ПоказательКонтроль")
//                        Значение - элемент формы, отображающий этот реквизит
//
Процедура НастроитьПоказателиНалогНаПрибыль(Отчет, ЭлементыПоказателей) Экспорт
	
	ВидИспользованияСумм = БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль();
	ОтображатьНУ = БухгалтерскийУчетКлиентСервер.ИспользоватьСуммуНУ(ВидИспользованияСумм);
	ОтображатьПРиВР = БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц(ВидИспользованияСумм);
	Если Не ОтображатьНУ И Не ОтображатьПРиВР Тогда
		
		ИспользоватьНУ = Ложь;
		ИспользоватьПРиВР = Ложь;
		
	Иначе
		
		ВидИспользованияСумм = БухгалтерскиеОтчетыВызовСервера.ИспользоватьСуммыНалогНаПрибыль(
			Отчет.Организация, Отчет.НачалоПериода, Отчет.КонецПериода);
		ИспользоватьНУ = БухгалтерскийУчетКлиентСервер.ИспользоватьСуммуНУ(ВидИспользованияСумм);
		ИспользоватьПРиВР = БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц(ВидИспользованияСумм);
		
	КонецЕсли;

	Для Каждого ОписаниеЭлемента Из ЭлементыПоказателей Цикл
		
		Если ОписаниеЭлемента.Ключ = "ПоказательНУ" Или ОписаниеЭлемента.Ключ = "ПоказательСверкаНУ" Тогда

			ОтображатьПользователю = ОтображатьНУ;
			Использовать = ИспользоватьНУ;

		Иначе

			ОтображатьПользователю = ОтображатьПРиВР;
			Использовать = ИспользоватьПРиВР;

		КонецЕсли;
		ОписаниеЭлемента.Значение.Видимость   = ОтображатьПользователю;
		ОписаниеЭлемента.Значение.Доступность = Использовать;
		
		Если Не Использовать Тогда
			Отчет[ОписаниеЭлемента.Ключ] = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Изменяем видимость и доступность флагов покателей на закладке "Показатели" у настроек стандартного отчета.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма стандартного отчета.
//  ЭлементыПоказателей - Структура - см. ЭлементыПоказателейНалогНаПрибыль() в модуле формы.
//  НалоговыйУчет - Булево - если Ложь, то текущие настройки отчета требуют недоступности НУ.
//  Валютный     - если Ложь, то текущие настройки отчета требуют недоступности учета по валютам.
//  Количественный - если Ложь, то текущие настройки отчета требуют недоступности учета по количеству.
//
Процедура УстановитьВидимостьФлаговПоказателей(Форма, ЭлементыПоказателей, НалоговыйУчет, Валютный, Количественный) Экспорт
	
	БухгалтерскиеОтчетыКлиентСервер.НастроитьПоказателиНалогНаПрибыль(Форма.Отчет, ЭлементыПоказателей);
	Для каждого ЭлементПоказатель Из ЭлементыПоказателей Цикл
		Если ЭлементПоказатель.Значение.Доступность Тогда
			ЭлементПоказатель.Значение.Доступность = НалоговыйУчет;
		КонецЕсли;
	КонецЦикла;
	Форма.Элементы.ПоказательВалютнаяСумма.Доступность = Валютный;
	Форма.Элементы.ПоказательКоличество.Доступность    = Количественный;
	
КонецПроцедуры

// При формировании отчета отключает использование показателей, если они не применяются в контексте отчета.
// См. комментарий к НастроитьПоказателиНалогНаПрибыль()
//
// Параметры:
//  ПараметрыОтчета - Структура - управляющая коллекция формирования отчета.
//     В стандартных отчетах обычно конструируется в форме отчета, см. ПодготовитьПараметрыОтчета.
//     Для справок-расчетов см. СправкиРасчетыКлиентСервер.ИсправитьНаборСуммовыхПоказателей
//     Обязательные ключи: 
//       * Организация - СправочникСсылка.Организация
//       * НачалоПериода, КонецПериода - Дата
//       * ПоказательНУ, ПоказательПР, ПоказательВР, ПоказательКонтроль - Булево
//     Необязательные ключи:
//       * ПоказательСверкаНУ - Булево
//
Процедура ИсправитьПоказателиНалогНаПрибыль(ПараметрыОтчета) Экспорт
	
	ВидИспользованияСумм = БухгалтерскиеОтчетыВызовСервера.ИспользоватьСуммыНалогНаПрибыль(
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.НачалоПериода,
		ПараметрыОтчета.КонецПериода);
		
	Если Не БухгалтерскийУчетКлиентСервер.ИспользоватьСуммуНУ(ВидИспользованияСумм) Тогда
		ПараметрыОтчета.ПоказательНУ = Ложь;
		Если ПараметрыОтчета.Свойство("ПоказательСверкаНУ") Тогда
			ПараметрыОтчета.ПоказательСверкаНУ = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если Не БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц(ВидИспользованияСумм) Тогда
	    ПараметрыОтчета.ПоказательПР       = Ложь;
		ПараметрыОтчета.ПоказательВР       = Ложь;
		ПараметрыОтчета.ПоказательКонтроль = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область ЭлементыНастройки

Функция НовыйОписаниеЭлементовНастройки() Экспорт
	
	Описание = Новый Структура;
	
	Описание.Вставить("Разделы",                  "РазделыОтчета");
	Описание.Вставить("РазделОтчет",              "Отчет");
	Описание.Вставить("РазделНастройки",          "НастройкиОтчета");
	Описание.Вставить("КнопкаСформироватьОтчет",  "Сформировать");
	Описание.Вставить("КнопкаОткрытьНастройки",   "ПоказатьНастройки");
	Описание.Вставить("КнопкаПрименитьНастройки", "ПрименитьНастройки");
	Описание.Вставить("КнопкаЗакрытьНастройки",   "ВернутьсяВОтчет");
	
	Возврат Описание;
	
КонецФункции

Процедура ПоказатьНастройки(Форма, ОписаниеЭлементов = Неопределено) Экспорт
	
	Если ОписаниеЭлементов = Неопределено Тогда
		ОписаниеЭлементов = НовыйОписаниеЭлементовНастройки();
	КонецЕсли;
	
	Форма.Элементы[ОписаниеЭлементов.КнопкаПрименитьНастройки].КнопкаПоУмолчанию = Истина;
	Форма.Элементы[ОписаниеЭлементов.Разделы].ТекущаяСтраница                    = Форма.Элементы[ОписаниеЭлементов.РазделНастройки];
	
КонецПроцедуры

Процедура СкрытьНастройки(Форма, ОписаниеЭлементов = Неопределено) Экспорт
	
	Если ОписаниеЭлементов = Неопределено Тогда
		ОписаниеЭлементов = НовыйОписаниеЭлементовНастройки();
	КонецЕсли;
	
	Форма.Элементы[ОписаниеЭлементов.КнопкаСформироватьОтчет].КнопкаПоУмолчанию = Истина;
	Форма.Элементы[ОписаниеЭлементов.Разделы].ТекущаяСтраница                   = Форма.Элементы[ОписаниеЭлементов.РазделОтчет];
	
КонецПроцедуры

// Варианты типов группировки, используемые в списке выбора таблицы настроек отчета.
//
// Возвращаемое значение:
//   ФиксированнаяСтруктура - набор вариантов для значения у элемента списка.
//
Функция ТипГруппировки() Экспорт
	
	Варианты = Новый Структура;
	Варианты.Вставить("Элементы",       0);
	Варианты.Вставить("Иерархия",       1);
	Варианты.Вставить("ТолькоИерархия", 2);
	
	Возврат Новый ФиксированнаяСтруктура(Варианты);
	
КонецФункции

// Варианты размещений дополнительных полей, используемые в списке выбора настроек отчета.
//
// Возвращаемое значение:
//   ФиксированнаяСтруктура - набор вариантов для значения у элемента списка.
//
Функция РазмещениеДополнительныхПолей() Экспорт
	
	Варианты = Новый Структура;
	Варианты.Вставить("ВместеСВладельцем", 0); // Синоним "В одной колонке".
	Варианты.Вставить("Отдельно",          1); // Синоним "В отдельных колонках".
	
	Возврат Новый ФиксированнаяСтруктура(Варианты);
	
КонецФункции

// Варианты переодичности выводимых данных, используемые в списке выбора настроек отчета.
//
// Возвращаемое значение:
//   ФиксированнаяСтруктура - набор вариантов для значения у элемента списка.
//
Функция Периодичность() Экспорт

	Варианты = Новый Структура;
	Варианты.Вставить("Период",      0);
	Варианты.Вставить("Регистратор", 2);
	Варианты.Вставить("День",        6);
	Варианты.Вставить("Неделя",      7);
	Варианты.Вставить("Декада",      8);
	Варианты.Вставить("Месяц",       9);
	Варианты.Вставить("Квартал",    10);
	Варианты.Вставить("Полугодие",  11);
	Варианты.Вставить("Год",        12);
	
	Возврат Новый ФиксированнаяСтруктура(Варианты);
	
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область Вспомогательные

// Возвращает имя отчета (объекта метаданных), которому принадлежит форма.
// Следует использовать для форм, принадлежащих отчету.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма объекта.
//
// Возвращаемое значение:
//	Строка       - Имя отчета (объекта метаданных).
//  Неопределено - Передана не форма отчета (например, если отчет использует общую форму).
//
Функция ИмяОтчетаПоИмениФормы(Форма) Экспорт
	
	ЭлементыИмени = СтрРазделить(Форма.ИмяФормы, ".");
	Если ЭлементыИмени.Количество() > 1 И ЭлементыИмени[0] = "Отчет" Тогда
		Возврат ЭлементыИмени[1];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Проверяет поддерживает ли отчет обмен универсальными настройками (см. НовыйУниверсальныеНастройки).
//
// Параметры:
//  ИмяОтчета - Строка - Имя проверяемого отчета.
// 
// Возвращаемое значение:
//   Булево - Истина, если поддерживает, в противном случае - Ложь.
//
Функция ОтчетПоддерживаетУниверсальныеНастройки(ИмяОтчета) Экспорт
	
	СписокОтчетов = новый Массив;
	СписокОтчетов.Добавить("АнализСубконто");
	СписокОтчетов.Добавить("АнализСчета");
	СписокОтчетов.Добавить("КарточкаСубконто");
	СписокОтчетов.Добавить("КарточкаСчета");
	СписокОтчетов.Добавить("ОборотноСальдоваяВедомость");
	СписокОтчетов.Добавить("ОборотноСальдоваяВедомостьПоСчету");
	СписокОтчетов.Добавить("ОборотыМеждуСубконто");
	СписокОтчетов.Добавить("ОборотыСчета");
	СписокОтчетов.Добавить("ОтчетПоПроводкам");
	СписокОтчетов.Добавить("СводныеПроводки");
	СписокОтчетов.Добавить("ШахматнаяВедомость");
	
	Возврат СписокОтчетов.Найти(ИмяОтчета) <> Неопределено;
	
КонецФункции

// Возвращает имена разделов настроек стандартного отчета.
// 
// Возвращаемое значение:
//  Структура - Ключ - имя раздела настроек стандартного отчета, значение - флаг заполнения настроек по умолчанию.
//
Функция РазделыНастроекСтандартногоОтчета() Экспорт
	
	РазделыНастроек = Новый Структура();
	
	РазделыНастроек.Вставить("Группировка", 		Ложь);
	РазделыНастроек.Вставить("Отбор", 				Ложь);
	РазделыНастроек.Вставить("Показатели", 			Ложь);
	РазделыНастроек.Вставить("ДополнительныеПоля", 	Ложь);
	РазделыНастроек.Вставить("УсловноеОформление", 	Ложь);
	
	Возврат РазделыНастроек;
	
КонецФункции

Функция ИмяМакетаОформленияПоУмолчанию() Экспорт
	
	ЗначениеПоУмолчанию = "ОформлениеОтчетовЗеленый";
	
	БухгалтерскиеОтчетыКлиентСерверПереопределяемый.УстановитьИмяМакетаОформленияПоУмолчанию(ЗначениеПоУмолчанию);
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Проверяет в форме отчета, использует ли она отложенную инициализацию компоновщика настроек.
// Критерий проверки - наличие реквизита КомпоновщикИнициализирован формы отчета.
//
// Если используется отложенная инициализация, то в ходе работы пользователя с формой отчета требуется вызов.
// БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек
//
// Другим критерием может быть наличие у отчета двух схем - 
// для инициализации при создании формы используется основная пустая схема.
//
// Отчет, использующий отложенную инициализацию компоновщика настроек должен в составе реквизитов иметь
// реквизит ПользовательскиеНастройки для хранения адреса, по которому размещены настройки для передачи
// между компонентами механизма отложенной инициализации.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма отчета
// 
// Возвращаемое значение:
//  Булево - Истина, если отчет использует отложенную инициализацию компоновщика настроек.
//
Функция ОтчетИспользуетОтложеннуюИнициализациюКомпоновщикаНастроек(Форма) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КомпоновщикИнициализирован");
	
КонецФункции

// Устанавливает конвенциональный признак, что пользователь поменял организацию.
// Он используется в БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек() для отчетов,
// поддерживающих отложенную инициализацию компоновщика настроек.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета
//
Процедура УстановитьОтложеннаяИнициализацияКомпоновщикаВызванаИзменениемОрганизации(Форма) Экспорт
	
	Если Не ОтчетИспользуетОтложеннуюИнициализациюКомпоновщикаНастроек(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ОрганизацияИзменилась = Истина;
	
КонецПроцедуры

// Проверяет значение конвенционального признака, что пользователь поменял организацию.
// Он используется в БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек() для отчетов,
// поддерживающих отложенную инициализацию компоновщика настроек.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета
//
// Возвращаемое значение:
//  Булево - Истина, если есть основания полагать, что отложенная инициализация компоновщика вызвана изменением организации.
//  Неопределено - отчет не использует отложенную инициализацию компоновщика
//
Функция ПроверитьОтложеннаяИнициализацияКомпоновщикаВызванаИзменениемОрганизации(Форма) Экспорт
	
	Если Не ОтчетИспользуетОтложеннуюИнициализациюКомпоновщикаНастроек(Форма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Форма.ОрганизацияИзменилась;
	
КонецФункции

// Проверяет, инициализирован ли компоновщик настроек.
// Если форма не использует отложенную инициализацию, то компоновщик настроек считается инициализированным.
// 
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма отчета
// 
// Возвращаемое значение:
//  Булево - Истина, если компоновщик настроек инициализирован, с настройками возможна работа пользователя.
//
Функция КомпоновщикНастроекИнициализирован(Форма) Экспорт
	
	Если Не ОтчетИспользуетОтложеннуюИнициализациюКомпоновщикаНастроек(Форма) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Форма.КомпоновщикИнициализирован;
	
КонецФункции

// Проверяет в форме отчета применение нескольких рабочих схем компоновки данных.
// Критерий проверки - наличие реквизита ТекущаяСхемаКомпоновкиДанных объекта отчета.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета.
// 
// Возвращаемое значение:
//  Булево - Истина, если отчет использует несколько рабочих схем компоновки данных.
//
Функция ОтчетПоддерживаетНесколькоСхемКомпоновкиДанных(Форма) Экспорт
	
	Если Не ОтчетИспользуетОтложеннуюИнициализациюКомпоновщикаНастроек(Форма) Тогда
		Возврат Ложь; // Не поддерживается несколько схем компоновки данных без отложенной инициализации компоновщика.
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Отчет")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Отчет, "ТекущаяСхемаКомпоновкиДанных");
	
КонецФункции

// Устарела. Следует использовать БухгалтерскиеОтчеты.ИмяОтчета(), ИмяОтчетаПоИмениФормы().
//    
// Возвращает имя объекта метаданных, которому принадлежит форма.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма объекта.
//
// Возвращаемое значение:
//	Строка - Имя объекта метаданных.
//
Функция ПолучитьИдентификаторОбъекта(Форма) Экспорт
	
	Возврат ИмяОтчетаПоИмениФормы(Форма);
	
КонецФункции

// Возвращает наименование фонового задания для выполнения отчета.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//
// Возвращаемое значение:
//	Строка - Наименование фонового задания.
//
Функция ПолучитьНаименованиеЗаданияВыполненияОтчета(Форма, ИмяОтчета = "") Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Выполнение отчета: %1'");
	
	Если ПустаяСтрока(ИмяОтчета) Тогда
		ИмяОтчета = ИмяОтчетаПоИмениФормы(Форма);
	КонецЕсли;
	
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания, ИмяОтчета);
	
	Возврат НаименованиеЗадания;
	
КонецФункции

// Проверяет, является ли указанное значение простым типом данных.
//
// Параметры:
// 	Значение - Произвольный - Проверяемое значение.
//
// Возвращаемое значение:
//	Булево - Истина, если значение простого типа, иначе Ложь.
//
Функция ПростойТип(Значение) Экспорт
	
	ОписаниеПростыхТипов = Новый ОписаниеТипов("Дата, Строка, Булево, Число");
	
	Возврат ОписаниеПростыхТипов.СодержитТип(ТипЗнч(Значение));
	
КонецФункции

// Возвращает номер субконто по пути поля компоновки.
//
// Параметры:
//  Путь - Строка - Путь поля субконто.
// 
// Возвращаемое значение:
//  Число, Неопределено - номер субконто.
//
Функция НомерСубконто(Путь) Экспорт
	
	НомерСтрокой = СтрЗаменить(Путь, "Субконто", "");
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерСтрокой) Тогда
		
		НомерСубконто = Число(НомерСтрокой);
		
	Иначе
		
		НомерСубконто = Неопределено;
		
	КонецЕсли;

	Возврат НомерСубконто;
	
КонецФункции

// Дает возможность работать с произвольными разделителем дробной части и разделителем групп разрядов.
// Также как и СтроковыеФункцииКлиентСервер.СтрокаВЧисло() работает без выдачи исключений.
//
// Параметры:
//  Значение - Строка - Строка, которую необходимо привести к числу.
//  РазделительДробнойЧасти - Строка - Символ, который является разделителем дробной части. Если не указан, то будет
//             использован первый символ отличный от цифры в ряду символов справа. Например, и "ъ111,222.333ъ" ,
//             и "111,222,333" будут распознаны как 111222.333 , если разделитель не указан явно; но, если указан
//             разделитель "," , то будут распознаны соответственно как 111.222333 и 111222.333
//
// Возвращаемое значение:
//   Число - распознанное число или 0, если не удалось распознать.
//
Функция СтрокаСФорматомВЧисло(Знач Значение, РазделительДробнойЧасти = "") Экспорт
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат 0;
	КонецЕсли;
	
	ДлинаЗначения = СтрДлина(Значение);
	Если ДлинаЗначения = 1 И Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда
		// Отдельно обрабатываем тривиальный случай. Например, "-" .
		Возврат 0;
	КонецЕсли;
	
	// Определяем самую левую и самую правую из цифр строки.
	Для ЛеваяГраница = 1 По ДлинаЗначения Цикл
		ТекущийСимвол = Сред(Значение, ЛеваяГраница, 1);
		Если ТекущийСимвол >= "0" И ТекущийСимвол <= "9" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для ПраваяГраница = 0 По ДлинаЗначения - 1 Цикл
		ТекущийСимвол = Сред(Значение, ДлинаЗначения - ПраваяГраница, 1);
		Если ТекущийСимвол >= "0" И ТекущийСимвол <= "9" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ПраваяГраница = ДлинаЗначения - ПраваяГраница;
	Если ПраваяГраница < ЛеваяГраница Тогда
		// В строке вообще отсутствуют цифры.
		Возврат 0;
	КонецЕсли;
	
	// Определяем знак числа.
	Если СтрНайти(Значение, "-", НаправлениеПоиска.СКонца, ЛеваяГраница) <> 0   // соответствует форматам ЧО=3 или ЧО=4
	 Или СтрНайти(Значение, "-", НаправлениеПоиска.СНачала, ПраваяГраница) <> 0 // соответствует форматам ЧО=1 или ЧО=2
	 Или СтрНайти(Значение, "(", НаправлениеПоиска.СКонца, ЛеваяГраница) <> 0   // соответствует формату ЧО=0
		И СтрНайти(Значение, ")", НаправлениеПоиска.СНачала, ПраваяГраница) <> 0 Тогда
		ЗнакЗначения = -1;
	Иначе
		ЗнакЗначения = 1;
	КонецЕсли;
	
	Если ПраваяГраница <> ДлинаЗначения Или ЛеваяГраница <> 1 Тогда
		ДлинаЗначения = ПраваяГраница - ЛеваяГраница + 1;
		Значение = Сред(Значение, ЛеваяГраница, ДлинаЗначения);
	КонецЕсли;
	
	// Определяем дробную часть числа.
	ТолькоЦифры = Новый Массив;
	РазделительНайден = Ложь;
	РазрядовПослеЗапятой = 0;
	Для НомерСимвола = 0 По ДлинаЗначения - 1 Цикл
		
		ТекущийСимвол = Сред(Значение, ДлинаЗначения - НомерСимвола, 1);
		
		ЭтоЦифра = (ТекущийСимвол >= "0" И ТекущийСимвол <= "9");
		Если ЭтоЦифра Тогда
			ТолькоЦифры.Вставить(0, ТекущийСимвол);
		КонецЕсли;
		
		Если РазделительНайден Тогда
			Продолжить;
		КонецЕсли;
			
		Если ЭтоЦифра Тогда
			РазрядовПослеЗапятой = РазрядовПослеЗапятой + 1;
		ИначеЕсли ПустаяСтрока(РазделительДробнойЧасти)
		 Или ТекущийСимвол = РазделительДробнойЧасти Тогда
			РазделительНайден = Истина;
		КонецЕсли;

	КонецЦикла;
	Если Не РазделительНайден Тогда // строка не содержит дробной части
		РазрядовПослеЗапятой = 0;
	КонецЕсли;
	
	// Преобразуем в число с учетом дробной части.
	ТипЧисло = Новый ОписаниеТипов("Число");
	ЗначениеТолькоЦифры = СтрСоединить(ТолькоЦифры);
	Результат = ЗнакЗначения * ТипЧисло.ПривестиЗначение(ЗначениеТолькоЦифры);
	Если РазрядовПослеЗапятой <> 0 И ЗначениеЗаполнено(Результат) Тогда
		Результат = Результат / Pow(10, РазрядовПослеЗапятой);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит использование ресурсов в настройках компоновки.
// Ресурсы ищутся по сокращенному имени - см. КореньРесурса
//
// Параметры:
//  Настройки          - НастройкиКомпоновкиДанных,
//                       ГруппировкаКомпоновкиДанных,
//                       ГруппировкаТаблицыКомпоновкиДанных,
//                       ГруппировкаДиаграммыКомпоновкиДанных - объект поиска
//  Отбор              - Соответствие - Ключ: сокращенное имя ресурса, Значение: любое, кроме Неопределено
//  ОтобранныеЭлементы - Неопределено, Массив - коллекция, заполняемая рекурсивно;
//                       При нерекурсивном вызове параметр передавать не следует.
// 
// Возвращаемое значение:
//  Массив - найденные места использования ресурса:
//           ВыбранноеПолеКомпоновкиДанных, ЭлементОтбораКомпоновкиДанных, ЭлементПорядкаКомпоновкиДанных
//
Функция НайтиРесурсы(Настройки, Отбор, ОтобранныеЭлементы = Неопределено) Экспорт
	
	Если ОтобранныеЭлементы = Неопределено Тогда
		ОтобранныеЭлементы = Новый Массив;
	КонецЕсли;
	
	ВыбранныеПоля = ЭлементыКоллекцииКомпоновкиДанных(Настройки.Выбор.Элементы);
	Для Каждого Поле Из ВыбранныеПоля Цикл
		Если Отбор[КореньРесурса(Поле.Поле)] <> Неопределено Тогда
			ОтобранныеЭлементы.Добавить(Поле);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыОтбора = ЭлементыКоллекцииКомпоновкиДанных(Настройки.Отбор.Элементы);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если Отбор[КореньРесурса(ЭлементОтбора.ЛевоеЗначение)] <> Неопределено Тогда
			ОтобранныеЭлементы.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыУпорядочивания = ЭлементыКоллекцииКомпоновкиДанных(Настройки.Порядок.Элементы);
	Для Каждого ЭлементУпорядочивания Из ЭлементыУпорядочивания Цикл
		Если Отбор[КореньРесурса(ЭлементУпорядочивания.Поле)] <> Неопределено Тогда
			ОтобранныеЭлементы.Добавить(ЭлементУпорядочивания);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПодчиненныйУровень Из Настройки.Структура Цикл
		
		ТипЭлемента = ТипЗнч(ПодчиненныйУровень);
		Если ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") 
			Или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			НайтиРесурсы(ПодчиненныйУровень, Отбор, ОтобранныеЭлементы);
		ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
			Для Каждого Группировка Из ПодчиненныйУровень.Колонки Цикл
				НайтиРесурсы(Группировка, Отбор, ОтобранныеЭлементы);
			КонецЦикла;
			Для Каждого Группировка Из ПодчиненныйУровень.Строки Цикл
				НайтиРесурсы(Группировка, Отбор, ОтобранныеЭлементы);
			КонецЦикла;
		ИначеЕсли ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Для Каждого Группировка Из ПодчиненныйУровень.Серии Цикл
				НайтиРесурсы(Группировка, Отбор, ОтобранныеЭлементы);
			КонецЦикла;
			Для Каждого Группировка Из ПодчиненныйУровень.Точки Цикл
				НайтиРесурсы(Группировка, Отбор, ОтобранныеЭлементы);
			КонецЦикла;
		ИначеЕсли ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			НайтиРесурсы(ПодчиненныйУровень.Настройки, Отбор, ОтобранныеЭлементы);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтобранныеЭлементы;
	
КонецФункции

#КонецОбласти

#Область РасчетыСКонтрагентами

// Возвращает ключ настройки отчета по типу задолженности контрагентов.
//
// Параметры:
//	Тип - Число - Тип задолженности: 1 - покупателей, 2 - поставщикам.
//
// Возвращаемое значение:
//	Строка - Ключ настройки.
//
Функция ПолучитьКлючНастройкиПоТипуЗадолженности(Тип) Экспорт
	
	Если Тип = 1 Тогда
		КлючОбъекта = "Отчеты.СчетаИсключаемыеИзРасчетаЗадолженностиПокупателей";
	ИначеЕсли Тип = 2 Тогда
		КлючОбъекта = "Отчеты.СчетаИсключаемыеИзРасчетаЗадолженностиПоставщикам";
	КонецЕсли;
	
	Возврат КлючОбъекта;
	
КонецФункции

// Возвращает описание настройки отчета по типу задолженности контрагентов.
//
// Параметры:
//	Тип - Число - Тип задолженности: 1 - покупателей, 2 - поставщикам.
//
// Возвращаемое значение:
//	Строка - Описание настройки.
//
Функция ПолучитьОписаниеНастройкиПоТипуЗадолженности(Тип) Экспорт
	
	Если Тип = 1 Тогда
		Описание    = "Счета исключаемые из расчета задолженности покупателей";
	ИначеЕсли Тип = 2 Тогда
		Описание    = "Счета исключаемые из расчета задолженности поставщикам";
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

// Определяет из настроек отчета параметры, связанные с расчетами с контрагентами.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* Счета - Массив - Массив счетов расчетов с контрагентами.
//		* ВидыСубконто - Массив - Виды субконто расчетов с контрагентами.
//		* Контрагенты - Массив - Список контрагентов в отчете.
//		* ДоговорыКонтрагентов - Массив - Список договоров в отчете.
//		* ЕстьВалюта - Булево - Признак наличия расчетов в валюте или у.е.
//
Функция ОпределитьПараметрыОтчетаРасчетыСКонтрагентами(Форма) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Счета",                Новый Массив);
	Результат.Вставить("ВидыСубконто",         Новый Массив);
	Результат.Вставить("Контрагенты",          Новый Массив);
	Результат.Вставить("ДоговорыКонтрагентов", Новый Массив);
	Результат.Вставить("ЕстьВалюта",           Ложь);

	Отчет = Форма.Отчет;
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	// Проверим наличие общих реквизитов отчетов, которые могут содержать данные о счете и субконто.
	ОбщиеРеквизитыОтчета = Новый Структура("Счет, СписокВидовСубконто, СписокВидовКорСубконто, ПоказательВалютнаяСумма");
	ЗаполнитьЗначенияСвойств(ОбщиеРеквизитыОтчета, Отчет);
	
	Если ЗначениеЗаполнено(ОбщиеРеквизитыОтчета.Счет) Тогда
		Результат.Счета.Добавить(ОбщиеРеквизитыОтчета.Счет);
	КонецЕсли;
	Если ТипЗнч(ОбщиеРеквизитыОтчета.ПоказательВалютнаяСумма) = Тип("Булево") Тогда
		Результат.ЕстьВалюта = ОбщиеРеквизитыОтчета.ПоказательВалютнаяСумма;
	КонецЕсли;
	
	ИменаКлючейСписков = Новый Массив;
	ИменаКлючейСписков.Добавить("СписокВидовСубконто");
	ИменаКлючейСписков.Добавить("СписокВидовКорСубконто");
	
	ТипВидыСубконто = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные");
	
	Для Каждого ИмяКлюча Из ИменаКлючейСписков Цикл
		СписокВидовСубконто = ОбщиеРеквизитыОтчета[ИмяКлюча];
		Если ТипЗнч(СписокВидовСубконто) = Тип("СписокЗначений") Тогда
			Для Каждого ЭлементСписка Из СписокВидовСубконто Цикл
				Если НЕ ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(ЭлементСписка.Значение) = ТипВидыСубконто Тогда
					Результат.ВидыСубконто.Добавить(ЭлементСписка.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим в отборах СКД данные о контрагентах и договорах.
	// Учитываем отборы только на равенство, другие виды сравнений не поддерживаются
	// в процедуре отложенных расчетов с контрагентами.
	ТипХозрасчетный         = Тип("ПланСчетовСсылка.Хозрасчетный");
	ТипКонтрагенты          = Тип("СправочникСсылка.Контрагенты");
	ТипДоговорыКонтрагентов = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл

		Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда

			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = ТипХозрасчетный Тогда
				Результат.Счета.Добавить(ЭлементОтбора.ПравоеЗначение);

			ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = ТипКонтрагенты Тогда
				Результат.Контрагенты.Добавить(ЭлементОтбора.ПравоеЗначение);

			ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = ТипДоговорыКонтрагентов Тогда
				Результат.ДоговорыКонтрагентов.Добавить(ЭлементОтбора.ПравоеЗначение);
			
			КонецЕсли;

		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
			ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда

			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда

				Для Каждого ЭлементСписка Из ЭлементОтбора.ПравоеЗначение Цикл
					Если ТипЗнч(ЭлементСписка.Значение) = ТипХозрасчетный Тогда
						Результат.Счета.Добавить(ЭлементОтбора.ПравоеЗначение);

					ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = ТипКонтрагенты Тогда
						Результат.Контрагенты.Добавить(ЭлементСписка.Значение);

					ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = ТипДоговорыКонтрагентов Тогда
						Результат.ДоговорыКонтрагентов.Добавить(ЭлементСписка.Значение);
						
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Конструктор таблицы группировок универсальных настроек.
// Для того чтобы универсальные настройки (см. НовыйУниверсальныеНастройки) можно было создать на клиенте,
// таблица значений Группировка описывается в виде массива структур (см. НовыйСтрокаГруппировки).
//
// Возвращаемое значение:
//   Массив.
//
Функция НовыйГруппировка()
	
	Возврат Новый Массив();
	
КонецФункции

// Конструктор таблицы Дополнительные поля универсальных настроек.
// Для того чтобы универсальные настройки (см. НовыйУниверсальныеНастройки) можно было создать на клиенте, 
// таблица значений Дополнительные поля описывается в виде массива структур (см. НовыйСтрокаДополнительныеПоля).
// 
// Возвращаемое значение:
//   Массив.
//
Функция НовыйДополнительныеПоля()
	
	Возврат Новый Массив();
	
КонецФункции

Функция ЭтоСлужебныйЭлементОтбора(Знач ЭлементОтбора)
	
	Возврат СтрНачинаетсяС(ЭлементОтбора.Представление, "###");

КонецФункции

// Получает все элементы коллекции компоновки данных с учетом иерархии.
//
// Параметры:
//  КоллекцияКомпоновкиДанных - КоллекцияВыбранныхПолейКомпоновкиДанных,
//                              КоллекцияЭлементовОтбораКомпоновкиДанных,
//                              КоллекцияЭлементовПорядкаКомпоновкиДанных - объект поиска
//  Элементы - Неопределено, Массив - коллекция, заполняемая рекурсивно;
//                              При нерекурсивном вызове параметр передавать не следует.
// 
// Возвращаемое значение:
//  Массив - элементы коллекций: ВыбранноеПолеКомпоновкиДанных, ЭлементОтбораКомпоновкиДанных, ЭлементПорядкаКомпоновкиДанных
//
Функция ЭлементыКоллекцииКомпоновкиДанных(КоллекцияКомпоновкиДанных, Элементы = Неопределено)
	
	Если Элементы = Неопределено Тогда
		Элементы = Новый Массив;
	КонецЕсли;
	
	Для Каждого Элемент Из КоллекцияКомпоновкиДанных Цикл
		
		ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента = Тип("ВыбранноеПолеКомпоновкиДанных") 
			Или ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных")
			Или ТипЭлемента = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			
			Элементы.Добавить(Элемент);
			
		ИначеЕсли ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") 
			Или ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ВложенныеЭлементы = ЭлементыКоллекцииКомпоновкиДанных(Элемент.Элементы, Элементы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Элементы;
	
КонецФункции

#КонецОбласти
