
#Область ПрограммныйИнтерфейс

#Область ОбщиеСтруктуры

Функция ПараметрыПроверкиИПодбораАлкогольнойПродукции(ОрганизацияЕГАИС = Неопределено, ПроверяемыйДокумент = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("АдресДанныхПроверяемойАлкогольнойПродукции",             "");
	Результат.Вставить("АдресПредварительноСохраненныхРезультатовПроверки",      "");
	Результат.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", Ложь);
	Результат.Вставить("НачальныйСтатусПроверки",                                ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.НеВыполнялось"));
	Результат.Вставить("ОрганизацияЕГАИС",                                       ОрганизацияЕГАИС);
	Результат.Вставить("ПостфиксСохранения",                                     "");
	Результат.Вставить("ПриЗавершенииСохранятьРезультатыПроверки",               Ложь);
	Результат.Вставить("ПроверкаНеПоДокументу",                                  ПроверяемыйДокумент = Неопределено);
	Результат.Вставить("ПроверяемыйДокумент",                                    ПроверяемыйДокумент);
	Результат.Вставить("ПроверятьНеобходимостьПеремаркировки",                   Истина);
	Результат.Вставить("РедактированиеФормыНедоступно",                          Ложь);
	Результат.Вставить("РежимПодбораСуществующихУпаковок",                       Истина); //Входящий документ если Ложь
	Результат.Вставить("РежимПросмотра",                                         Ложь);
	Результат.Вставить("ОписаниеОповещенияПриЗакрытии",                          Неопределено);
	Результат.Вставить("СообщениеПротоколаОбмена",                               Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ОбщиеПараметрыОбменаНаКлиенте(Источник = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкиОбменаЕГАИС",    Неопределено);
	Результат.Вставить("Изменения",               Неопределено);
	Результат.Вставить("ОповещениеПриЗавершении", Неопределено);
	Результат.Вставить("ИдентификаторВладельца",  Неопределено);
	Результат.Вставить("ВОсновнойФорме",          Истина);
	
	Если Источник <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, Источник);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Выполняет отправку подготовленных сообщений, загрузку новых документов, обработку ответов из ЕГАИС.
//
// Параметры:
//  ОрганизацииЕГАИС - Неопределено, Массив, СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС, по которым необходимо выполнить обмен.
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//  ИдентификаторВладельца - УникальныйИдентификатор, Истина - Уникальный идентификатор формы для сообщений обмена, Неопределено, Истина (обмен в основной форме)
//     В результат передается массив структур Изменения, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//
Процедура ВыполнитьОбмен(ОрганизацииЕГАИС = Неопределено, ОповещениеПриЗавершении = Неопределено, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ВыполнитьОбмен(ОрганизацииЕГАИС,, ИдентификаторВладельца);
	
	ДополнительныеПараметры = ОбщиеПараметрыОбменаНаКлиенте();
	ДополнительныеПараметры.ОповещениеПриЗавершении = ОповещениеПослеЗавершенииОбмена(Неопределено, Неопределено, ОповещениеПриЗавершении, ИдентификаторВладельца);
	ДополнительныеПараметры.НастройкиОбменаЕГАИС    = ДанныеДляВыполненияОбменаНаКлиенте.НастройкиОбменаЕГАИС;
	Если ИдентификаторВладельца = Истина Тогда
		ДополнительныеПараметры.ИдентификаторВладельца = Неопределено;
		ДополнительныеПараметры.ВОсновнойФорме         = Истина;
	Иначе
		ДополнительныеПараметры.ИдентификаторВладельца = ИдентификаторВладельца;
		ДополнительныеПараметры.ВОсновнойФорме         = ДанныеДляВыполненияОбменаНаКлиенте.Свойство("ВОсновнойФорме");
	КонецЕсли;
	
	ИнтеграцияЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(
		Новый ОписаниеОповещения(
			"ПослеОбработкиОчередиПередачиДанных",
			ИнтеграцияЕГАИССлужебныйКлиент,
			ДополнительныеПараметры),
		ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

#Область РаботаВФормахДокументов

// Формирует сообщение для передачи в УТМ, согласно указанной операции.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому формируется сообщение в ЕГАИС.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - выполняемая операция обмена.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПодготовитьКПередаче(ДокументСсылка, ДальнейшееДействие, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьКПередаче(ДокументСсылка, ДальнейшееДействие,,, ИдентификаторВладельца);
	
	ИнтеграцияЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(
		ОповещениеПослеЗавершенииОбмена(
			ДокументСсылка,
			ДальнейшееДействие,,
			ИдентификаторВладельца),
		ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
Процедура ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	Изменения = ИнтеграцияЕГАИСВызовСервера.ОтменитьПоследнююОперацию(ДокументСсылка);
	
	Если Изменения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеПослеЗавершенииОбмена(
				ДокументСсылка,
				ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию")),
			Изменения);
	Иначе
		
		ИнтеграцияЕГАИСВызовСервера.ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.'"),
				ДокументСсылка));
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет неотправленную операцию из очереди передачи данных в ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
Процедура ОтменитьПередачу(ДокументСсылка) Экспорт
	
	Изменения = ИнтеграцияЕГАИСВызовСервера.ОтменитьПередачу(ДокументСсылка);
	
	Если Изменения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеПослеЗавершенииОбмена(
				ДокументСсылка,
				ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеПередачуДанных")),
			Изменения);
	Иначе
		
		ИнтеграцияЕГАИСВызовСервера.ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.'"),
				ДокументСсылка));
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует сообщение и сразу же передает его в УТМ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому формируется сообщение в ЕГАИС.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - выполняемая операция обмена.
//  ДополнительныеПараметры - Структура со свойствами:
//   * НомерЧека - Число - Номер чека ККМ.
//   * НомерСмены - Число - Номер смены.
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//     В результат передается массив структур Изменения, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//
Процедура ПередатьНемедленно(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры, ОповещениеПриЗавершении, ИдентификаторВладельца = Неопределено) Экспорт
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьКПередаче(
		ДокументСсылка,
		ДальнейшееДействие,
		ДополнительныеПараметры,
		Истина,
		ИдентификаторВладельца);
	
	ИнтеграцияЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(
		ОповещениеПриЗавершении,
		ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВСпискахДокументов

// Обработчик команд по выполнению требуемого дальнейшего действия в динамических списках
//
// Параметры:
//  ДинамическийСписок - ЭлементФормы - список в котором выполняется команда
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - действие, которое будет выполнено.
Процедура ПодготовитьСообщенияКПередаче(ДинамическийСписок, ДальнейшееДействие) Экспорт
	
	ОчиститьСообщения();
	
	Контекст = ИнтеграцияИСКлиент.СтруктураПодготовкиСообщенийКПередаче(
		ДинамическийСписок, ДальнейшееДействие,
		Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеЗавершение", ЭтотОбъект));
	
	ИменаКолонокДальнейшиеДействия = Новый Массив;
	ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеЕГАИС1");
	ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеЕГАИС2");
	ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеЕГАИС3");
	ИнтеграцияИСКлиент.ОпределитьДоступностьДействий(Контекст, ИменаКолонокДальнейшиеДействия);
	
	Контекст.ДействиеНедоступно = Контекст.МассивДокументов.Количество() > 0
		И ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение")
		И Не ИнтеграцияЕГАИССлужебныйКлиент.ВозможнаОтправкаПодтверждения(Контекст.МассивДокументов);
	
	ИнтеграцияИСКлиент.ПодготовитьСообщенияКПередаче(Контекст);
	
КонецПроцедуры

// Обработчик завершения процедуры ПодготовитьСообщенияКПередаче.
//
// Параметры:
//  Контекст - Структура - контекст выполнения обработчика:
//   * МассивДокументов - массив - список ссылок на обрабатываемые документы,
//   * НепроведенныеДокументы - массив - документы, исключенные из обработки,
//   * ДинамическийСписок - ЭлементФормы - список в котором выполняется команда,
//   * ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - действие, которое будет выполнено.
//
Процедура ПодготовитьСообщенияКПередачеЗавершение(Контекст, ДополнительныеПараметры = Неопределено) Экспорт
	
	Форма                   = Неопределено;
	УникальныйИдентификатор = Неопределено;
	
	Если ТипЗнч(Контекст) = Тип("Структура")
		И Контекст.Свойство("ДинамическийСписок")
		И ТипЗнч(Контекст.ДинамическийСписок) = Тип("ТаблицаФормы") Тогда
		Форма = ИнтеграцияИСКлиент.ПолучитьФормуПоЭлементуФормы(Контекст.ДинамическийСписок);
		Если Форма <> Неопределено Тогда
			УникальныйИдентификатор = Форма.УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьКПередаче(
		Контекст.МассивДокументов,
		Контекст.ДальнейшееДействие,,,
		УникальныйИдентификатор);
	
	ИнтеграцияЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(
		ОповещениеПослеЗавершенииОбмена(Контекст.ДинамическийСписок, Контекст.ДальнейшееДействие,, УникальныйИдентификатор),
		ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

// Выполняет архивирование документов.
// 
// Параметры:
// 	Результат - КодВозвратаДиалога - Ответ на вопрос архивирования.
// 	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
Процедура АрхивироватьДокументы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Изменения = ИнтеграцияЕГАИСВызовСервера.АрхивироватьДокументы(
		ДополнительныеПараметры.ДокументыКАрхивированию);
	
	Если Изменения <> Неопределено Тогда
		
		ИнтеграцияЕГАИССлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет архивирование распоряжений к оформлению.
// 
// Параметры:
// 	Результат - КодВозвратаДиалога - Ответ на вопрос архивирования.
// 	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
Процедура АрхивироватьРаспоряжения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Изменения = ИнтеграцияЕГАИСВызовСервера.АрхивироватьРаспоряженияКОформлению(
		ДополнительныеПараметры.Распоряжения,
		ДополнительныеПараметры.ПустаяСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ИнтеграцияЕГАИССлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Запросы

// Выполняет проверку наличия входящих документов в УТМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//     В результат передается массив структур, см. функцию ИнтеграцияЕГАИССлужебныйКлиент.НоваяСтруктураСписокВходящихДокументов().
//  ОрганизацииЕГАИС - Неопределено, Массив, СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС, по которым необходимо выполнить обмен.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПроверитьВходящиеДокументы(ОповещениеПриЗавершении, ОрганизацииЕГАИС, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПроверитьВходящиеДокументы(ОрганизацииЕГАИС, ИдентификаторВладельца);
	
	АдресаURLВходящихДокументов = ДанныеДляВыполненияОбменаНаКлиенте.АдресаURLВходящихДокументов;
	НастройкиОбменаЕГАИС = ДанныеДляВыполненияОбменаНаКлиенте.НастройкиОбменаЕГАИС;
	
	ПараметрыОбработкиСпискаВходящихДокументов = Новый Структура;
	ПараметрыОбработкиСпискаВходящихДокументов.Вставить("АдресаURLВходящихДокументов", АдресаURLВходящихДокументов);
	ПараметрыОбработкиСпискаВходящихДокументов.Вставить("ОповещениеПриЗавершении",     ОповещениеПриЗавершении);
	
	ОбработчикСпискаВходящихДокументов = Новый ОписаниеОповещения(
		"ПроверитьВходящиеДокументы_ОбработатьСписокВходящихДокументов",
		ИнтеграцияЕГАИССлужебныйКлиент,
		ПараметрыОбработкиСпискаВходящихДокументов);
	
	ДополнительныеПараметры = ОбщиеПараметрыОбменаНаКлиенте();
	ДополнительныеПараметры.НастройкиОбменаЕГАИС    = НастройкиОбменаЕГАИС;
	ДополнительныеПараметры.ОповещениеПриЗавершении = ОбработчикСпискаВходящихДокументов;
	ДополнительныеПараметры.ВОсновнойФорме          = Истина;
	ДополнительныеПараметры.ИдентификаторВладельца  = ИдентификаторВладельца;
	ДополнительныеПараметры.Вставить("Результат",   Новый Соответствие);
	ДополнительныеПараметры.Вставить("ТекстОшибки", ДанныеДляВыполненияОбменаНаКлиенте.ТекстОшибки);
	
	ИнтеграцияЕГАИССлужебныйКлиент.ПолучитьСпискиВходящихСообщений(
		ИнтеграцияЕГАИСКлиентСервер.ОрганизацииЕГАИС(НастройкиОбменаЕГАИС),
		ДополнительныеПараметры);
	
КонецПроцедуры

// Выполняет подготовку запроса данных классификаторов ЕГАИС к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//     В результат передается массив структур Изменения, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Запрашиваемые данные.
//   Возможные значения:
//     Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции .
//     Перечисление.ВидыДокументовЕГАИС.ЗапросДанныхОрганизации.
//  ИмяПараметра - Строка - Имя параметра. Возможные значения: "ИНН", "КОД", "СИО".
//  ЗначениеПараметра - Строка - Значение параметра.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПодготовитьЗапросДанныхКлассификатораКПередаче(ОповещениеПриЗавершении, ОрганизацияЕГАИС, Операция, ИмяПараметра, ЗначениеПараметра, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьЗапросДанныхКлассификатораКПередаче(ОрганизацияЕГАИС, Операция, ИмяПараметра, ЗначениеПараметра, ИдентификаторВладельца);
	ДанныеДляВыполненияОбменаНаКлиенте.Вставить("ВОсновнойФорме");
	ИнтеграцияЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(ОповещениеПриЗавершении, ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

// Выполняет подготовку запроса данных классификаторов ЕГАИС к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//     В результат передается массив структур Изменения, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  АкцизныеМарки - Массив Из Строка - Акцизные марки для проверки.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПодготовитьЗапросПроверкиАкцизныхМарокНаОстаткахОрганизацииКПередаче(ОповещениеПриЗавершении, ОрганизацияЕГАИС, АкцизныеМарки, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьЗапросПроверкиАкцизныхМарокНаОстаткахОрганизацииКПередаче(ОрганизацияЕГАИС, АкцизныеМарки, ИдентификаторВладельца);
	ДанныеДляВыполненияОбменаНаКлиенте.Вставить("ВОсновнойФорме");
	ИнтеграцияЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(ОповещениеПриЗавершении, ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

// Выполняет подготовку запроса ТТН к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//     В результат передается массив структур Изменения, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  ИдентификаторТТН - Строка - Идентификатор запрашиваемой ТТН.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПодготовитьЗапросДанныхТТНКПередаче(ОповещениеПриЗавершении, ОрганизацияЕГАИС, ИдентификаторТТН, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьЗапросДанныхТТНКПередаче(ОрганизацияЕГАИС, ИдентификаторТТН, ИдентификаторВладельца);
	ДанныеДляВыполненияОбменаНаКлиенте.Вставить("ВОсновнойФорме");
	ИнтеграцияЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(ОповещениеПриЗавершении, ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

// Выполняет подготовку запроса данных справки по ее регистрационному номеру к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//     В результат передается массив структур Изменения, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Запрашиваемые данные.
//   Возможные значения:
//     Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1.
//     Перечисление.ВидыДокументовЕГАИС.ЗапросСправки2.
//  РегистрационныйНомер - Строка - Регистрационный номер запрашиваемой справки.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПодготовитьЗапросДанныхСправкиКПередаче(ОповещениеПриЗавершении, ОрганизацияЕГАИС, Операция, РегистрационныйНомер, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьЗапросДанныхСправкиКПередаче(ОрганизацияЕГАИС, Операция, РегистрационныйНомер, ИдентификаторВладельца);
	ДанныеДляВыполненияОбменаНаКлиенте.Вставить("ВОсновнойФорме");
	ИнтеграцияЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(ОповещениеПриЗавершении, ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

// Выполняет подготовку пакета данных об используемом формате обмена к передаче и
// передает данные в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//     В результат передается массив структур Изменения, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  ИспользуемыйФорматОбмена - ПеречислениеСсылка.ФорматыОбменаЕГАИС - Используемый формат обмена.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПодготовитьИнформациюОФорматеОбменаКПередаче(ОповещениеПриЗавершении, ОрганизацияЕГАИС, ИспользуемыйФорматОбмена, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьИнформациюОФорматеОбменаКПередаче(ОрганизацияЕГАИС, ИспользуемыйФорматОбмена, ИдентификаторВладельца);
	ДанныеДляВыполненияОбменаНаКлиенте.Вставить("ВОсновнойФорме");
	ИнтеграцияЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(ОповещениеПриЗавершении, ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

// Выполняет проверку подключения к УТМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//     В результат передается массив структур Изменения, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//  АдресУТМ - Строка - IP адрес УТМ.
//  ПортУТМ - Число - Порт
//  Таймаут - Число - Количество секунд таймаута.
//  ОбменНаСервере - Булево - Признак проверки подключения на сервере.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПроверитьПодключениеКУТМНемедленно(ОповещениеПриЗавершении, АдресУТМ, ПортУТМ, Таймаут, ОбменНаСервере, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьЗапросПроверкиПодключенияКУТМ(
		АдресУТМ, ПортУТМ, Таймаут, ОбменНаСервере, ИдентификаторВладельца);
	ДанныеДляВыполненияОбменаНаКлиенте.Вставить("ВОсновнойФорме");
	ИнтеграцияЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(ОповещениеПриЗавершении, ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПрикладнымиДокументами

// Открывает форму сопоставления алкогольной продукции с номенклатурой предприятия.
//
// Параметры:
//  АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - Сопоставляемая алкогольная продукция.
//  Владелец - ФормаКлиентскогоПриложения, Неопределено - Форма-владелец.
//  НоменклатураДляВыбора - Массив - массив номенклатуры для быстрого выбора.
//
Процедура ОткрытьФормуСопоставленияАлкогольнойПродукции(АлкогольнаяПродукция, Владелец, НоменклатураДляВыбора = Неопределено) Экспорт
	
	ИмяФормыСопоставления = "Обработка.СопоставлениеНоменклатурыЕГАИС.Форма";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АлкогольнаяПродукция" , АлкогольнаяПродукция);
	ПараметрыФормы.Вставить("НоменклатураДляВыбора", НоменклатураДляВыбора);
	
	ОписаниеОповещенияОЗакрытии = Неопределено;
	
	ИнтеграцияЕГАИСКлиентПереопределяемый.ПриОпределенииФормыСопоставления(ИмяФормыСопоставления, ПараметрыФормы, Владелец, ОписаниеОповещенияОЗакрытии);
	
	ОткрытьФорму(ИмяФормыСопоставления, ПараметрыФормы, Владелец,,,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

// Открывает форму протокола обмена с ЕГАИС по документу.
//
// Параметры:
//  Документ - ДокументСсылка - документ, для которого открывается протокол обмена.
//  Владелец - ФормаКлиентскогоПриложения, Неопределено - Форма-владелец.
//
Процедура ОткрытьПротоколОбмена(Документ, Владелец = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Документ);
	
	ОткрытьФорму(
		"Справочник.ЕГАИСПрисоединенныеФайлы.Форма.ФормаПротоколОбмена",
		ПараметрыФормы,
		Владелец,
		Новый УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку со статусом обработки документа в ЕГАИС.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки,
//  СтандартнаяОбработка - Булево - признак стандартной (системной) обработки события.
//
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	ДокументОснование = Форма.Объект.Ссылка;
	
	СтандартнаяОбработка = Ложь;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДокументОснование", ДокументОснование);
	Контекст.Вставить("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки);
	Контекст.Вставить("Форма", Форма);
	
	Если Форма.Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ТекстДокументаЕГАИСОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Контекст);
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Документ %1 был изменен. Записать?'"), ДокументОснование);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ТекстДокументаЕГАИСОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Контекст);
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Документ %1 не записан. Записать?'"), ДокументОснование);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьКомандуГиперссылки(
			ДокументОснование,
			НавигационнаяСсылкаФорматированнойСтроки,
			Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку со статусом обработки документа в ЕГАИС.
//
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога - выбранный пользователем ответ,
//  Контекст - Структура - контекст формы документа:
//   * Форма - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//   * ДокументОснование - ДокументСсылка - ссылка на документ, в котором произошло нажатие на гиперссылку,
//   * НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки.
//
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, Контекст) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.Форма.Объект.Проведен Тогда
		Если Контекст.Форма.ПроверитьЗаполнение() Тогда
			Контекст.Форма.Записать();
		КонецЕсли;
	Иначе
		Контекст.Форма.Записать();
	КонецЕсли;
	
	Если Не Контекст.Форма.Модифицированность И ЗначениеЗаполнено(Контекст.Форма.Объект.Ссылка) Тогда
		
		ВыполнитьКомандуГиперссылки(
			Контекст.Форма.Объект.Ссылка,
			Контекст.НавигационнаяСсылкаФорматированнойСтроки,
			Контекст.Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает проверку сопоставления классификаторов
//
// Параметры:
//   * ДокументОснование - ДокументСсылка - ссылка на документ, в котором произошло нажатие на гиперссылку,
//   * Форма             - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//   * ОповещениеПриЗавершении - ОписаниеОповещения - действие после сопоставления классификаторов.
//
Процедура ПроверитьСопоставлениеКлассификаторов(ДокументОснование, Форма, ОповещениеПриЗавершении)
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияЕГАИСКлиентПереопределяемый.ПриПроверкеСопоставленияКлассификаторов(ДокументОснование, Форма, ОповещениеПриЗавершении, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС")
		Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		РезультатПроверки = ИнтеграцияЕГАИСВызовСервера.ПроверитьСопоставлениеКлассификаторов(
			ДокументОснование,
			Форма.УникальныйИдентификатор);
		
		ИмяФормы = "Обработка.СопоставлениеКлассификаторовЕГАИС.Форма.СопоставлениеКлассификаторовЕГАИС";
		Если РезультатПроверки.ЕстьНеСопоставленныеТовары Тогда
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Документ", ДокументОснование);
			ПараметрыОткрытияФормы.Вставить("Товары",   РезультатПроверки.НеСопоставленныеТовары);
			
			ОткрытьФорму(
				ИмяФормы,
				ПараметрыОткрытияФормы,
				Форма,,,,
				ОповещениеПриЗавершении);
			
		Иначе
			
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
			
		КонецЕсли;
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
		
	КонецЕсли;
	
	
КонецПроцедуры

// Открывает форму нового документа после завершения сопоставления классификаторов.
//
// Параметры:
//  Результат - Булево - Результат сопоставления,
//  ДополнительныеПараметры - Структура - Контекст формы документа:
//   * Форма - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//   * ДокументОснование - ДокументСсылка - ссылка на документ, в котором произошло нажатие на гиперссылку,
//   * НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки.
//
Процедура ПриЗавершенииСопоставленияКлассификаторов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Форма                                    = ДополнительныеПараметры.Форма;
	ДокументОснование                        = ДополнительныеПараметры.ДокументОснование;
	НавигационнаяСсылкаФорматированнойСтроки = ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки;
	
	СтрДлинаОткрыть = СтрДлина("Открыть");
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбменаЕГАИС" Тогда
		
		ОткрытьПротоколОбмена(ДокументОснование, Форма);
		
	ИначеЕсли Лев(НавигационнаяСсылкаФорматированнойСтроки, СтрДлинаОткрыть) = "Открыть" Тогда
		
		Результат = ИнтеграцияЕГАИСВызовСервера.ДокументыПоОснованию(ДокументОснование);
		
		МассивДокументов = Результат[Прав(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина(НавигационнаяСсылкаФорматированнойСтроки) - СтрДлинаОткрыть)];
		Если МассивДокументов.Количество() = 1 Тогда
			ПоказатьЗначение(, МассивДокументов[0].Ссылка);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьАктСписанияЕГАИС" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.АктСписанияЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьАктПостановкиНаБалансЕГАИС" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.АктПостановкиНаБалансЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьТТНИсходящаяЕГАИС" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьЧекЕГАИС" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.ЧекЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьЧекЕГАИСВозврат" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.ЧекЕГАИСВозврат.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьПередачаВРегистр2ЕГАИС" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.ПередачаВРегистр2ЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьВозвратИзРегистра2ЕГАИС" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.ВозвратИзРегистра2ЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	Иначе
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку команды по открытию или созданию документов ЕГАИС по документу-основанию.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ, на основании которого необходимо создать документ ЕГАИС или открыть существующий.
//  Команда - Строка - Выполняемая команда. Например: "СоздатьАктПостановкиНаБалансЕГАИС".
//  ФормаВладелец - ФормаКлиентскогоПриложения, Неопределено - Форма-владелец.
//
Процедура ВыполнитьКомандуГиперссылки(ДокументОснование, Команда, ФормаВладелец) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументОснование",                        ДокументОснование);
	ДополнительныеПараметры.Вставить("НавигационнаяСсылкаФорматированнойСтроки", Команда);
	ДополнительныеПараметры.Вставить("Форма",                                    ФормаВладелец);
	
	ПриЗавершенииСопоставленияКлассификаторов = Новый ОписаниеОповещения(
		"ПриЗавершенииСопоставленияКлассификаторов",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПроверитьСопоставлениеКлассификаторов(
		ДокументОснование,
		ФормаВладелец,
		ПриЗавершенииСопоставленияКлассификаторов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Вызывает обработчик печати переданной команды.
//
Функция ВыполнитьКомандуПечати(ОписаниеКоманды) Экспорт
	
	Если ОписаниеКоманды.Свойство("ЗаголовокФормы") И ЗначениеЗаполнено(ОписаниеКоманды.ЗаголовокФормы) Тогда
		ПараметрыПечати = Новый Структура("ЗаголовокФормы", ОписаниеКоманды.ЗаголовокФормы);
	Иначе
		
		Если ТипЗнч(ОписаниеКоманды.ОбъектыПечати) = Тип("Массив") И ОписаниеКоманды.ОбъектыПечати.Количество() = 1 Тогда 
			ПараметрыПечати = Новый Структура("ЗаголовокФормы", ОписаниеКоманды.ОбъектыПечати[0]);
		Иначе
			ПараметрыПечати = Новый Структура;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ОписаниеКоманды.МенеджерПечати, ОписаниеКоманды.Идентификатор, ОписаниеКоманды.ОбъектыПечати,
		ОписаниеКоманды.Форма, ПараметрыПечати);
	
	Возврат Неопределено;
	
КонецФункции

// Выводит печатную форму документа Остатки ЕГАИС.
//
// Параметры:
//  ОписаниеКоманды - Структура - структура с описанием команды.
//
Функция ПечатьОстаткиЕГАИС(ОписаниеКоманды) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОтчетЕГАИС", ОписаниеКоманды.ОбъектыПечати);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор"                      , Отбор);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Основной");
	ПараметрыФормы.Вставить("КлючВарианта"               , "Основной");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии"    , Истина);
	
	Уникальность = Ложь;
	Если ОписаниеКоманды.ОбъектыПечати.Количество() <> 0 Тогда
		Уникальность = ?(ОписаниеКоманды.ОбъектыПечати.Количество() > 1, Истина, ОписаниеКоманды.ОбъектыПечати[0]);
	КонецЕсли;
	
	ОткрытьФорму(
		"Отчет.ОстаткиАлкогольнойПродукцииЕГАИС.Форма",
		ПараметрыФормы,,
		Уникальность);
	
	Возврат Неопределено;
	
КонецФункции

// Выводит печатную форму отчета История справок 2.
//
// Параметры:
//  ОписаниеКоманды - Структура - структура с описанием команды.
//
Функция ПечатьИсторияСправок2(ОписаниеКоманды) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОтчетЕГАИС", ОписаниеКоманды.ОбъектыПечати);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор"                      , Отбор);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Основной");
	ПараметрыФормы.Вставить("КлючВарианта"               , "Основной");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии"    , Истина);
	
	Уникальность = Ложь;
	Если ОписаниеКоманды.ОбъектыПечати.Количество() <> 0 Тогда
		Уникальность = ?(ОписаниеКоманды.ОбъектыПечати.Количество() > 1, Истина, ОписаниеКоманды.ОбъектыПечати[0]);
	КонецЕсли;
	
	ОткрытьФорму(
		"Отчет.ИсторияСправок2ЕГАИС.Форма",
		ПараметрыФормы,,
		Уникальность);
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОбменНаКлиентеПоРасписанию

// Подключает обработчик ожидания для выполнения обмена с ЕГАИС на клиенте по расписанию.
//
Процедура ПодключитьОбработчикВыполненияОбменаНаКлиентеПоРасписанию() Экспорт
	
	ОтключитьОбработчикОжидания("ОбработчикОжиданияВыполненияОбменаНаКлиентеПоРасписанию");
	
	Если Не ИнтеграцияЕГАИСВызовСервера.ДоступноВыполнениеОбменаНаКлиентеПоРасписанию() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияВыполненияОбменаНаКлиентеПоРасписанию", 60, Ложь);
	
КонецПроцедуры

// Получает даты последнего запуска процедуры обмена на клиенте по расписанию.
// 
// Возвращаемое значение:
//  Соответствие - Даты последнего запуска по кодам ФСРАР.
//
Функция ПолучитьДатыПоследнегоЗапускаОбменаНаКлиентеПоРасписанию()
	
	ИмяПараметра = "ИнтеграцияЕГАИС.ДатаПоследнейОбработкиОтветов";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый Соответствие);
	КонецЕсли;
	
	Возврат ПараметрыПриложения[ИмяПараметра];
	
КонецФункции

// Установить дату последнего запуска обмена на клиенте по расписанию.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//
Процедура ОбновитьДатуПоследнегоЗапускаОбменаНаКлиентеПоРасписанию(ОрганизацияЕГАИС) Экспорт
	
	ДатыПоследнегоЗапуска = ПолучитьДатыПоследнегоЗапускаОбменаНаКлиентеПоРасписанию();
	ДатыПоследнегоЗапуска.Вставить(ОрганизацияЕГАИС, ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ИмяПараметра = "ИнтеграцияЕГАИС.ДатаПоследнейОбработкиОтветов";
	ПараметрыПриложения.Вставить(ИмяПараметра, ДатыПоследнегоЗапуска);
	
КонецПроцедуры

// Проверяет возможность и при необходимости выполняет обработку ответов из ЕГАИС.
//
Процедура ВыполнитьОбменНаКлиентеПоРасписанию() Экспорт
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ВыполнитьОбмен(
		Неопределено,
		ПолучитьДатыПоследнегоЗапускаОбменаНаКлиентеПоРасписанию());
	
	Если Не ДанныеДляВыполненияОбменаНаКлиенте.ВыполнитьОбменПоРасписанию Тогда
		Возврат;
	КонецЕсли;
	ДанныеДляВыполненияОбменаНаКлиенте.Вставить("ВОсновнойФорме", Истина);
	
	ДополнительныеПараметры = ОбщиеПараметрыОбменаНаКлиенте();
	ДополнительныеПараметры.ОповещениеПриЗавершении = ОповещениеПослеЗавершенииОбмена(Неопределено, Неопределено, Неопределено);
	ДополнительныеПараметры.НастройкиОбменаЕГАИС    = ДанныеДляВыполненияОбменаНаКлиенте.НастройкиОбменаЕГАИС;
	ДополнительныеПараметры.ВОсновнойФорме          = Истина;
	
	ИнтеграцияЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(
		Новый ОписаниеОповещения(
			"ПослеОбработкиОчередиПередачиДанных",
			ИнтеграцияЕГАИССлужебныйКлиент,
			ДополнительныеПараметры),
		ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

#КонецОбласти

// Показывает оповещение о результате заполнения справок 2 табличной части документа.
//
// Параметры:
//  СправкиЗаполнены - Булево - признак успешного заполнения справок,
//  Регистр2 - Булево - признак заполнения возврата алкогольной продукции из регистра №2.
//
Процедура СообщитьОЗавершенииЗаполненияСправок(СправкиЗаполнены, Регистр2 = Ложь) Экспорт
	
	Если СправкиЗаполнены Тогда
		ТекстСообщения = НСтр("ru = 'Заполнение справок 2 в табличной части ""Товары"" выполнено успешно.'");
	Иначе
		Если Не Регистр2 Тогда
			ТекстСообщения = НСтр("ru = 'Выполнить заполнение справок 2 в табличной части ""Товары"" не удалось: Нет остатков в регистре №1.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Выполнить заполнение справок 2 в табличной части ""Товары"" не удалось: Нет документов передачи в регистр №2.'");
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Обработка завершена'"),,
		ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения серий
//
// Параметры:
//	СерииЗаполнены - Булево - Признак успешного заполнения серий
//	СписокОшибок - Неопределено, Структура - Список ошибок
//
Процедура ОповеститьОбОкончанииЗаполненияСерийВДокументе(СерииЗаполнены, СписокОшибок) Экспорт
	
	ОчиститьСообщения();
	
	Если СерииЗаполнены Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Серии заполнены'"),
			,
			НСтр("ru='Серии заполнены'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Серии не заполнены'"),
			,
			НСтр("ru='Ни в одной строке серии не заполнены'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОтборПоОрганизацииЕГАИС

Процедура ОткрытьФормуВыбораОрганизацийЕГАИС(Форма, Префикс, Префиксы = Неопределено, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ОрганизацииЕГАИС", Форма.ОрганизацииЕГАИС.ВыгрузитьЗначения());
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",                   Форма);
	ДополнительныеПараметры.Вставить("Префикс",                 Префикс);
	ДополнительныеПараметры.Вставить("Префиксы",                Префиксы);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОткрытьФорму(
		"Справочник.КлассификаторОрганизацийЕГАИС.Форма.ФормаВыбораСпискаОрганизаций",
		ПараметрыОткрытияФормы,
		Форма,,,,
		Новый ОписаниеОповещения("ПослеЗавершенияВыбораОрганизацийЕГАИС", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

Процедура ПослеЗавершенияВыбораОрганизацийЕГАИС(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборОрганизацийЕГАИС(
		ДополнительныеПараметры.Форма,
		Результат,
		ДополнительныеПараметры.ОповещениеПриЗавершении = Неопределено,
		ДополнительныеПараметры.Префикс,
		ДополнительныеПараметры.Префиксы);
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборОрганизацийЕГАИС(Форма, Результат, ПрименятьОтбор, Префикс, Префиксы = Неопределено) Экспорт
	
	ИнтеграцияЕГАИСКлиентСервер.НастроитьОтборПоОрганизацииЕГАИС(Форма, Результат, Префикс, Префиксы);
	
	Если ПрименятьОтбор Тогда
		ОрганизацияЕГАИСОтборПриИзменении(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияЕГАИСОтборПриИзменении(Форма)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Список") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список,
		                                                                        "ОрганизацияЕГАИС",
		                                                                        Форма.ОрганизацииЕГАИС,
		                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
		                                                                        ,
		                                                                        Форма.ОрганизацииЕГАИС.Количество() > 0);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокКОформлению") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокКОформлению,
		                                                                        "ОрганизацияЕГАИС",
		                                                                        Форма.ОрганизацииЕГАИС,
		                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
		                                                                        ,
		                                                                        Форма.ОрганизацииЕГАИС.Количество() > 0);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокВРегистр3") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокВРегистр3,
		                                                                        "ОрганизацияЕГАИС",
		                                                                        Форма.ОрганизацииЕГАИС,
		                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
		                                                                        ,
		                                                                        Форма.ОрганизацииЕГАИС.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

Функция ОтборОрганизацияЕГАИСПрефиксы() Экспорт
	
	Префиксы = Новый Массив;
	Префиксы.Добавить("Отбор");
	
	Возврат Префиксы;
	
КонецФункции

Функция ОрганизацииЕГАИСДляОбмена(Форма) Экспорт
	
	ОрганизацииЕГАИС = Форма.ОрганизацииЕГАИС.ВыгрузитьЗначения();
	Если ОрганизацииЕГАИС.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли ОрганизацииЕГАИС.Количество() = 1 Тогда
		Возврат ОрганизацииЕГАИС[0];
	Иначе
		Возврат ОрганизацииЕГАИС;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Возвращает имя события, которое наступает при записи документа поступления в базу данных.
//
Функция ИмяСобытияЗаписиПоступленияТоваров() Экспорт
	
	ИмяСобытия = "";
	ИнтеграцияЕГАИСКлиентПереопределяемый.ПриОпределенииСобытияЗаписиДокументаПоступленияТоваров(ИмяСобытия);
	Возврат ИмяСобытия;
	
КонецФункции

// Возвращает реквизиты номенклатуры для выбора алкогольной продукции.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// 
// Возвращаемое значение:
//  Структура - Структура с обязательными свойствами:
//   * ВидАлкогольнойПродукции - СправочникСсылка.ВидыАлкогольнойПродукции - Вид алкогольной продукции.
//
Функция РеквизитыНоменклатурыДляВыбораАлкогольнойПродукции(Номенклатура) Экспорт
	
	Реквизиты = Новый Структура("ВидАлкогольнойПродукции");
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ИнтеграцияЕГАИСКлиентПереопределяемый.ПриОпределенииРеквизитовНоменклатурыДляВыбораАлкогольнойПродукции(Реквизиты, Номенклатура);
	КонецЕсли;
	Возврат Реквизиты;
	
КонецФункции

Функция ПараметрыСозданияКонтрагента() Экспорт
	
	ПараметрыСоздания = Новый Структура;
	ИнтеграцияЕГАИСКлиентПереопределяемый.ПриОпределенииПараметровСозданияКонтрагента(ПараметрыСоздания);
	Возврат ПараметрыСоздания;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОповещениеПослеЗавершенииОбмена(Контекст, ДальнейшееДействие, ОповещениеПриЗавершении = Неопределено, ИдентификаторВладельца = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Контекст",                Контекст);
	ДополнительныеПараметры.Вставить("ДальнейшееДействие",      ДальнейшееДействие);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ИдентификаторВладельца",  ИдентификаторВладельца);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеЗавершенияОбмена",
		ИнтеграцияЕГАИССлужебныйКлиент,
		ДополнительныеПараметры);
	
	Возврат ОписаниеОповещения;
	
КонецФункции

// Находит первую строку в заданной колонке, с заданным значением в коллекции ДанныеФормыДерево.
Функция НайтиСтрокуВДанныхФормыДерево(ГдеИскать, Значение, Колонка, ИскатьВПодчиненных) Экспорт
	
	ЭлементыДерева = ГдеИскать.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева[Колонка] = Значение Тогда
			Возврат ЭлементДерева.ПолучитьИдентификатор();
		ИначеЕсли  ИскатьВПодчиненных Тогда
			НайденныйИдентификаторСтроки =  НайтиСтрокуВДанныхФормыДерево(ЭлементДерева,Значение,Колонка,ИскатьВПодчиненных);
			Если НайденныйИдентификаторСтроки >=0 Тогда
				Возврат НайденныйИдентификаторСтроки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат -1;
	
КонецФункции

Процедура ОповеститьОНачалеОбработкиДанныхТСД() Экспорт
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещенияТСД(), ,
		                           НСтр("ru = 'Начата обработка полученных из ТСД данных.'"),
		                           БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

Процедура ОповеститьОбОкончанииОбработкиДанныхТСД() Экспорт
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещенияТСД(), ,
	                               НСтр("ru = 'Закончена обработка полученных из ТСД данных.'"),
	                               БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

Функция ЗаголовокФормыЗагрузкиКодовМаркировки(Владелец, ДоступнаИерархия = Ложь) Экспорт
	
	ВозвращаемоеЗначение = НСтр("ru = 'Загрузка акцизных марок и упаковок алкогольной продукции'");
	
	Если Не ДоступнаИерархия И ЗначениеЗаполнено(Владелец.Объект.Ссылка) Тогда
		ВозвращаемоеЗначение = СтрШаблон(НСтр("ru = 'Загрузка акцизных марок и упаковок алкогольной продукции в %1'"), Владелец.Объект.Ссылка);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗаголовокОповещенияТСД()

	Возврат НСтр("ru = 'Загрузка из ТСД'");

КонецФункции

#КонецОбласти