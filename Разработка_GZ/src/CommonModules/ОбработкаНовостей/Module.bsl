///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Новости".
// ОбщийМодуль.ОбработкаНовостей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ГлобальныеПереключатели

// Включает работу с новостями.
// Если включение происходит после обновления конфигурации, то можно загрузить данные из макетов.
// Возможно использование в коробке или в неразделенном сеансе при работе в модели сервиса.
// При попытке запуска в модели сервиса в разделенном сеансе будет выдано исключение.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - см. ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций,
//                        а также дополнительные ключи:
//    * ЗагрузитьВсеСтандартныеЗначения - Булево - если ИСТИНА, то запустить загрузку стандартных значений из макетов;
//    * ДополнительныеСвойства - Структура - будет передано в менеджер значения константы без изменений.
//
Процедура РазрешитьРаботуСНовостями(КонтекстВыполнения = Неопределено) Экспорт

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если вошли в область данных, то выдать исключение.
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ТекстСообщения = НСтр("ru='РазрешитьРаботуСНовостями: в разделенном сеансе нельзя управлять работой с новостями.'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	УстановитьПривилегированныйРежим(Истина);

	// При записи константы автоматически вызовется ОбновитьПовторноИспользуемыеЗначения()
	//  а также установится использование регламентного задания.
	РазрешенаРаботаСНовостями = Константы.РазрешенаРаботаСНовостями.СоздатьМенеджерЗначения();
		Если (ТипЗнч(КонтекстВыполнения) = ТипСтруктура)
				И (КонтекстВыполнения.Свойство("ДополнительныеСвойства"))
				И (ТипЗнч(КонтекстВыполнения.ДополнительныеСвойства) = ТипСтруктура) Тогда
			Для Каждого КлючЗначение Из КонтекстВыполнения.ДополнительныеСвойства Цикл
				РазрешенаРаботаСНовостями.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		РазрешенаРаботаСНовостями.Значение = Истина;
	РазрешенаРаботаСНовостями.Записать();

	Если (ТипЗнч(КонтекстВыполнения) = ТипСтруктура)
			И (КонтекстВыполнения.Свойство("ЗагрузитьВсеСтандартныеЗначения"))
			И (КонтекстВыполнения.ЗагрузитьВсеСтандартныеЗначения = Истина) Тогда
		// Код обновления из файлов, встроенных в конфигурацию.
		// После загрузки новостей автоматически вызовутся:
		//  ОбработкаНовостей.ПересчитатьНеобработанныеКатегорииНовостей();
		//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся();
		//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Общие(); // Здесь же вызовется ПересчитатьОтборыПоНовостям_Пользовательские();
		//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_ДляОбластиДанных();
		// поэтому явно вызывать их не нужно.
		// {Раздельное обновление ИБ}
		ДополнительныеПараметрыВыполнения = Новый Структура;
			ДополнительныеПараметрыВыполнения.Вставить("ИсточникЗапуска", "РазрешитьРаботуСНовостями");
			ДополнительныеПараметрыВыполнения.Вставить("ОбрабатыватьОбластиДанных", Истина);
		КонтекстВыполнения.Вставить("ДополнительныеПараметрыВыполнения", ДополнительныеПараметрыВыполнения);
		ЗагрузитьВсеСтандартныеЗначения(КонтекстВыполнения);
	КонецЕсли;

КонецПроцедуры

// Отключает работу с новостями.
// Возможно использование в коробке или в неразделенном сеансе при работе в модели сервиса.
// Пример использования: при старте программы запретить новости (т.к. работает "мастер первоначальной настройки"),
//  а после завершения работы мастера разрешить работу с новостями.
// При попытке запуска в модели сервиса в разделенном сеансе будет выдано исключение.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - см. ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций,
//                        а также дополнительные ключи:
//    * ДополнительныеСвойства - Структура - будет передано в менеджер значения константы без изменений.
//
Процедура ЗапретитьРаботуСНовостями(КонтекстВыполнения = Неопределено) Экспорт

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если вошли в область данных, то выдать исключение.
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ТекстСообщения = НСтр("ru='ЗапретитьРаботуСНовостями: в разделенном сеансе нельзя управлять работой с новостями.'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	УстановитьПривилегированныйРежим(Истина);

	РазрешенаРаботаСНовостями = Константы.РазрешенаРаботаСНовостями.СоздатьМенеджерЗначения();
		Если (ТипЗнч(КонтекстВыполнения) = ТипСтруктура)
				И (КонтекстВыполнения.Свойство("ДополнительныеСвойства"))
				И (ТипЗнч(КонтекстВыполнения.ДополнительныеСвойства) = ТипСтруктура) Тогда
			Для Каждого КлючЗначение Из КонтекстВыполнения.ДополнительныеСвойства Цикл
				РазрешенаРаботаСНовостями.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		РазрешенаРаботаСНовостями.Значение = Ложь;
	РазрешенаРаботаСНовостями.Записать();

	// При записи константы автоматически вызовется ОбновитьПовторноИспользуемыеЗначения()
	//  а также установится использование регламентного задания.
	Константы.РазрешенаРаботаСНовостями.Установить(Ложь);

КонецПроцедуры

#КонецОбласти

#Область РаботаСоСпискамиНовостейИКлассификаторов

// Процедура устанавливает одинаковые состояния для новостей в текущей области данных.
// Это полезно, например, при первом старте программы (при создании из cf),
//  когда необходимо отключить оповещения и поставить признак прочтенности
//  у всех новостей для предыдущих версий программы.
// Так как справочник Пользователи разделенный, то в модели сервиса процедуру
//  можно запускать только в разделенном сеансе.
//
// Параметры:
//  ВыбранныеПользователи - Массив из СправочникСсылка.Пользователи, СправочникСсылка.Пользователи, Неопределено - Массив пользователей
//                           или единственный пользователь, для которых необходимо установить состояния новостей;
//  СтруктураОтборов    - Структура - структура со значениями отборов. Возможные ключи:
//    * СписокНовостей - СписокЗначений - список новостей. Если параметр установлен,
//                       то остальные параметры отбора игнорируются;
//    * СписокЛентНовостей - СписокЗначений - список лент новостей. Если не указан, то по всем.;
//    * ИнтервалВерсийПродукта - Структура - отбор по версиям продукта. Содержит ключи:
//       * Продукт  - Строка - наименование продукта;
//       * ВерсияОТ - Строка - начальная версия в формате 99.99.999.9999;
//       * ВерсияДО - Строка - конечная версия в формате 99.99.999.9999;
//    * ИнтервалВерсийПлатформы - Структура - отбор по версиям платформы. Содержит ключи:
//       * ВерсияОТ - Строка - начальная версия в формате 99.99.999.9999;
//       * ВерсияДО - Строка - конечная версия в формате 99.99.999.9999;
//  ЗначенияСостояний   - Структура - структура значений для заполнения реквизитов
//                                    регистра сведений СостоянияНовостей. Возможны ключи:
//    * Прочтена                - Булево - Признак прочтенности. Если не указано, то не будет изменено;
//    * Пометка                 - Число  - Признак пометки флажком. Если не указано, то не будет изменено;
//    * ОповещениеВключено      - Булево - Признак снятия оповещения. Если не указано, то не будет изменено;
//    * ДатаНачалаОповещения    - Дата   - Дата начала оповещения (UTC+0). Если не указано, то не будет изменено;
//    * УдаленаИзСпискаНовостей - Булево - Признак помещения в корзину. Если не указано, то не будет изменено.
//
Процедура УстановитьСостояниеНовостейДляПользователей(
			ЗНАЧ ВыбранныеПользователи = Неопределено,
			СтруктураОтборов,
			ЗначенияСостояний) Экспорт

	ТипМассив         = Тип("Массив");
	ТипСтруктура      = Тип("Структура");
	ТипСписокЗначений = Тип("СписокЗначений");
	ТипПользователь   = Тип("СправочникСсылка.Пользователи");

	УстановитьПривилегированныйРежим(Истина);

	МассивПользователей = Новый Массив;
	Если (ТипЗнч(ВыбранныеПользователи) = ТипПользователь)
			И (НЕ ВыбранныеПользователи.Пустая()) Тогда
		МассивПользователей.Добавить(ВыбранныеПользователи);
	ИначеЕсли ТипЗнч(ВыбранныеПользователи) = ТипМассив Тогда // Массив.
		МассивПользователей = ВыбранныеПользователи;
	КонецЕсли;

	ТекстСообщения = НСтр("ru='УстановитьСостояниеНовостейДляПользователей, начало работы.
		|МассивПользователей:
		|	%1
		|СтруктураОтборов:
		|	%2
		|ЗначенияСостояний:
		|	%3
		|Функциональная опция Разрешена работа с новостями: %4'")
		+ Символы.ПС;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%4", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
	Если (МассивПользователей.Количество() = 0) Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", НСтр("ru='По всем'"));
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(МассивПользователей, ", "));
	КонецЕсли;
	Если (ТипЗнч(СтруктураОтборов) = ТипСтруктура) Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(СтруктураОтборов, " = ", Символы.ПС));
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", НСтр("ru='Передано значения типа, отличного от Структуры'"));
	КонецЕсли;
	Если (ТипЗнч(ЗначенияСостояний) = ТипСтруктура) Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(ЗначенияСостояний, " = ", Символы.ПС));
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", НСтр("ru='Передано значения типа, отличного от Структуры'"));
	КонецЕсли;
	ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
		НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		Метаданные.Справочники.Новости, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Если (ТипЗнч(ЗначенияСостояний) = ТипСтруктура)
			И (ЗначенияСостояний.Количество() > 0) Тогда

		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем
			//  без разделения (и не вошли в область данных)).
			Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				ТекстСообщения = НСтр("ru='УстановитьСостояниеНовостейДляПользователей, ошибка выполнения: при работе в модели сервиса разрешено запускать только в разделенном сеансе, в противном случае недоступен справочник Пользователи.
					|Строка подключения: %СтрокаСоединенияИнформационнойБазы%
					|ТекущийРежимЗапуска: %ТекущийРежимЗапуска%
					|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация%
					|Разделение включено: %РазделениеВключено%
					|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных%
					|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей%
					|Конфигурация (метаданные): %Метаданные_Имя%, %Метаданные_Версия%
					|Конфигурация (переопределение): %Переопределение_Имя%, %Переопределение_Версия%
					|Платформа: %Платформа_Версия%
					|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп_РазрешенаРаботаСНовостями%
					|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп_РазрешенаРаботаСНовостямиЧерезИнтернет%
					|Текущий пользователь ИБ:
					|	Имя: %ТекущийПользователь_Имя%
					|	УИН: %ТекущийПользователь_УникальныйИдентификатор%
					|	Разделение данных:
					|		%ТекущийПользователь_РазделениеДанных%
					|Пользователь: %ОбработкаНовостейПовтИсп_ПолучитьИмяПользователяИБ%'")
					+ Символы.ПС;
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы%", СтрокаСоединенияИнформационнойБазы());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска%", ТекущийРежимЗапуска());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация%", ИнтернетПоддержкаПользователей.ЭтоРазделеннаяКонфигурация());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено%", ОбщегоНазначения.РазделениеВключено());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных%", ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей%", ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Метаданные_Имя%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеИмя"));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Метаданные_Версия%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеВерсия"));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Переопределение_Имя%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductName"));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Переопределение_Версия%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПродукта"));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Платформа_Версия%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("PlatformVersion"));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп_РазрешенаРаботаСНовостями%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп_РазрешенаРаботаСНовостямиЧерезИнтернет%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь_Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь_УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь_РазделениеДанных%", ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп_ПолучитьИмяПользователяИБ%", ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ());
				ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
					НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'", ОбщегоНазначения.КодОсновногоЯзыка()) , // ИдентификаторШага.
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					Метаданные.Справочники.Новости, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				Возврат;
			КонецЕсли;
		КонецЕсли;

		СписокПолейДляЗаполнения = "";
		Для Каждого ТекущееЗначениеЗаполнения Из ЗначенияСостояний Цикл
			Если ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("Прочтена") Тогда
				СписокПолейДляЗаполнения = СписокПолейДляЗаполнения + "#Прочтена#";
			ИначеЕсли ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("Пометка") Тогда
				СписокПолейДляЗаполнения = СписокПолейДляЗаполнения + "#Пометка#";
			ИначеЕсли ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("ОповещениеВключено") Тогда
				СписокПолейДляЗаполнения = СписокПолейДляЗаполнения + "#ОповещениеВключено#";
			ИначеЕсли ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("ДатаНачалаОповещения") Тогда
				СписокПолейДляЗаполнения = СписокПолейДляЗаполнения + "#ДатаНачалаОповещения#";
			ИначеЕсли ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("УдаленаИзСпискаНовостей") Тогда
				СписокПолейДляЗаполнения = СписокПолейДляЗаполнения + "#УдаленаИзСпискаНовостей#";
			КонецЕсли;
		КонецЦикла;
		СписокПолейДляЗаполнения = СтрЗаменить(СписокПолейДляЗаполнения, "##", ",");
		СписокПолейДляЗаполнения = СтрЗаменить(СписокПолейДляЗаполнения, "#", "");

		Если (МассивПользователей.Количество() = 0) Тогда
			// Если не передали список пользователей, то взять всех пользователей, без проверки, какие роли у него включены.
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|// Список пользователей, для которых необходимо установить состояния новостей.
				|ВЫБРАТЬ
				|	Спр.Ссылка КАК Пользователь
				|ИЗ
				|	Справочник.Пользователи КАК Спр
				|ГДЕ
				|	Спр.ПометкаУдаления = ЛОЖЬ
				|	И Спр.Недействителен = ЛОЖЬ
				|";
			РезультатЗапроса = Запрос.Выполнить(); // УстановитьСостояниеНовостейДляПользователей, получение списка пользователей.
			Если НЕ РезультатЗапроса.Пустой() Тогда
				МассивПользователей = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Пользователь");
			КонецЕсли;
		КонецЕсли;

		// Если изначально не передали массив пользователей и в справочнике Пользователи нет ни одного
		//  действительного непомеченного на удаление пользователя.
		Если (ТипЗнч(МассивПользователей) <> ТипМассив) Тогда
			МассивПользователей = Новый Массив;
		КонецЕсли;

		// Удалить пользователей, у которых нет роли ЧтениеНовостей или ПолныеПрава.
		НовыйМассивПользователей = Новый Массив;
		Для Каждого ТекущийПользователь Из МассивПользователей Цикл
			Если Пользователи.РолиДоступны("ЧтениеНовостей,ПолныеПрава", ТекущийПользователь, Ложь) Тогда
				НовыйМассивПользователей.Добавить(ТекущийПользователь);
			КонецЕсли;
		КонецЦикла;
		МассивПользователей = НовыйМассивПользователей;

		// Если нет ни одного пользователя, который может работать с новостями, то выйти из обработчика.
		Если МассивПользователей.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='Ошибка выполнения: нет пользователей, для которых бы следовало установить состояния новостей.
				|Состояния новостей можно установить только для пользователей с ролью ЧтениеНовостей или ПолныеПрава'");
			ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
				НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'", ОбщегоНазначения.КодОсновногоЯзыка()) , // ИдентификаторШага.
				УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
				Метаданные.Справочники.Новости, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			Возврат;
		КонецЕсли;

		КоличествоОбработанныхНовостей = 0;

		Если (ТипЗнч(СтруктураОтборов) = ТипСтруктура)
				И (СтруктураОтборов.Свойство("СписокНовостей"))
				И (ТипЗнч(СтруктураОтборов.СписокНовостей) = ТипСписокЗначений) Тогда
			// Явно указан список новостей (не важно, какого размера).
			Для Каждого ТекущийПользователь Из МассивПользователей Цикл
				// Цикл по списку новостей.
				Для Каждого ТекущаяНовость Из СтруктураОтборов.СписокНовостей Цикл
					Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
						Запись.Пользователь = ТекущийПользователь;
						Запись.Новость      = ТекущаяНовость.Значение;
					Запись.Прочитать(); // Запись будет ниже.
						Запись.Пользователь = ТекущийПользователь;
						Запись.Новость      = ТекущаяНовость.Значение;
						ЗаполнитьЗначенияСвойств(Запись, ЗначенияСостояний, СписокПолейДляЗаполнения);
					Запись.Записать(Истина);
				КонецЦикла;
			КонецЦикла;
			КоличествоОбработанныхНовостей = СтруктураОтборов.СписокНовостей.Количество();
		Иначе
			// Возможные отборы:
			//    * СписокЛентНовостей - СписокЗначений - список лент новостей. Если не указан, то по всем;
			//    * ИнтервалВерсийПродукта - Структура - отбор по версиям продукта. Содержит ключи:
			//       * Продукт  - Строка - наименование продукта;
			//       * ВерсияОТ - Строка - начальная версия в формате 99.99.999.9999;
			//       * ВерсияДО - Строка - конечная версия в формате 99.99.999.9999.
			//    * ИнтервалВерсийПлатформы - Структура - отбор по версиям платформы. Содержит ключи:
			//       * ВерсияОТ - Строка - начальная версия в формате 99.99.999.9999;
			//       * ВерсияДО - Строка - конечная версия в формате 99.99.999.9999.

			// Список редко-меняющихся категорий.
			// План видов характеристик КатегорииНовостей должен уже быть заполнен с сервера.
			КатегорияВерсияПродукта  = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ProductVersion");
			КатегорияВерсияПлатформы = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("PlatformVersion");
			Если (КатегорияВерсияПродукта.Пустая())
					ИЛИ (КатегорияВерсияПлатформы.Пустая()) Тогда
				// Возможно, список категорий еще не пришел с сервера.
				Возврат;
			КонецЕсли;

			ПоВсемЛентамНовостей = Истина;
			СписокЛентНовостей = Новый СписокЗначений;
			Если (СтруктураОтборов.Свойство("СписокЛентНовостей"))
					И (ТипЗнч(СтруктураОтборов.СписокЛентНовостей) = ТипСписокЗначений) Тогда
				ПоВсемЛентамНовостей = Ложь;
				СписокЛентНовостей = СтруктураОтборов.СписокЛентНовостей;
			КонецЕсли;

			ПоВсемВерсиямПродукта = Истина;
			ИмяКонфигурации = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ИмяКонфигурации"); // Только имя продукта
			ПродуктВерсияОТ = "00.00.000.0000";
			ПродуктВерсияДО = "99.99.999.9999";
			Если (СтруктураОтборов.Свойство("ИнтервалВерсийПродукта"))
					И (ТипЗнч(СтруктураОтборов.ИнтервалВерсийПродукта) = ТипСтруктура) Тогда
				ПоВсемВерсиямПродукта = Ложь;
				Если СтруктураОтборов.ИнтервалВерсийПродукта.Свойство("ВерсияОТ") Тогда
					ПродуктВерсияОТ = СтруктураОтборов.ИнтервалВерсийПродукта.ВерсияОТ;
				КонецЕсли;
				Если СтруктураОтборов.ИнтервалВерсийПродукта.Свойство("ВерсияДО") Тогда
					ПродуктВерсияДО = СтруктураОтборов.ИнтервалВерсийПродукта.ВерсияДО;
				КонецЕсли;
			КонецЕсли;

			ПоВсемВерсиямПлатформы = Истина;
			ПлатформаВерсияОТ = "00.00.000.0000";
			ПлатформаВерсияДО = "99.99.999.9999";
			Если (СтруктураОтборов.Свойство("ИнтервалВерсийПлатформы"))
					И (ТипЗнч(СтруктураОтборов.ИнтервалВерсийПлатформы) = ТипСтруктура) Тогда
				ПоВсемВерсиямПлатформы = Ложь;
				Если СтруктураОтборов.ИнтервалВерсийПлатформы.Свойство("ВерсияОТ") Тогда
					ПлатформаВерсияОТ = СтруктураОтборов.ИнтервалВерсийПлатформы.ВерсияОТ;
				КонецЕсли;
				Если СтруктураОтборов.ИнтервалВерсийПлатформы.Свойство("ВерсияДО") Тогда
					ПлатформаВерсияДО = СтруктураОтборов.ИнтервалВерсийПлатформы.ВерсияДО;
				КонецЕсли;
			КонецЕсли;

			// Если есть отбор по интервалам версий (продукта или платформы), то запрос должен учитывать данные
			//  регистра сведений КатегорииНовостейИнтервалыВерсий, причем
			// - если новость не привязана к продуктам вообще, то это значит,
			//     что она удовлетворяет любым условиям по версии продукта;
			// - если новость не привязана к платформе вообще, то это значит,
			//     что она удовлетворяет любым условиям по версии платформы.
			ОбработатьРезультатЗапроса = Ложь;
			Если (ПоВсемВерсиямПродукта = Истина) И (ПоВсемВерсиямПлатформы = Истина) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	Спр.Ссылка КАК Новость
					|ИЗ
					|	Справочник.Новости КАК Спр
					|ГДЕ
					|	&МетаУсловиеПоЛентамНовостей
					|";
				Если ПоВсемЛентамНовостей = Истина Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст,"&МетаУсловиеПоЛентамНовостей", "ИСТИНА");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст,"&МетаУсловиеПоЛентамНовостей", "Спр.ЛентаНовостей В (&СписокЛентНовостей)");
					Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей);
				КонецЕсли;

				РезультатЗапроса = Запрос.Выполнить(); // УстановитьСостояниеНовостейДляПользователей, по всем версиям продукта и платформы
				ОбработатьРезультатЗапроса = Истина;
			Иначе
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				Запрос.Текст = "
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Спр.Ссылка КАК Новость
					|ИЗ
					|	Справочник.Новости КАК Спр
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК РегВерсииЭтогоПродукта
					|	ПО
					|		(Спр.Ссылка = РегВерсииЭтогоПродукта.Новость
					|			И РегВерсииЭтогоПродукта.Продукт = &ИмяКонфигурации
					|			И РегВерсииЭтогоПродукта.КатегорияНовостей = &КатегорияВерсияПродукта)
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК РегВерсииПродуктов
					|	ПО
					|		(Спр.Ссылка = РегВерсииПродуктов.Новость
					|			И РегВерсииПродуктов.КатегорияНовостей = &КатегорияВерсияПродукта)
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК РегВерсииПлатформы
					|	ПО
					|		(Спр.Ссылка = РегВерсииПлатформы.Новость
					|			И РегВерсииПлатформы.Продукт = &ПродуктПлатформа
					|			И РегВерсииПлатформы.КатегорияНовостей = &КатегорияВерсияПлатформы)
					|ГДЕ
					|	&МетаУсловиеПоЛентамНовостей
					|	И &МетаУсловиеПоВерсиямПродукта
					|	И &МетаУсловиеПоВерсиямПлатформы
					|";
				Если ПоВсемЛентамНовостей = Истина Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоЛентамНовостей", "ИСТИНА");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоЛентамНовостей", "Спр.ЛентаНовостей В (&СписокЛентНовостей)");
					Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей);
				КонецЕсли;
				Запрос.УстановитьПараметр("ИмяКонфигурации", ИмяКонфигурации);
				Запрос.УстановитьПараметр("КатегорияВерсияПродукта", КатегорияВерсияПродукта);
				Запрос.УстановитьПараметр("КатегорияВерсияПлатформы", КатегорияВерсияПлатформы);
				Запрос.УстановитьПараметр("ПродуктПлатформа", "Platform");
				Если ПоВсемВерсиямПродукта = Истина Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоВерсиямПродукта", "ИСТИНА");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоВерсиямПродукта", "
						|( // Версия этого продукта пересекается с условием или нет отборов по версиям продуктов вообще.
						|		РегВерсииПродуктов.Новость ЕСТЬ NULL // Нет отборов по версиям продуктов вообще.
						|		ИЛИ ( // Нижний или верхний интервал отбора новости входят в условие.
						|			НЕ РегВерсииЭтогоПродукта.Новость ЕСТЬ NULL
						|			И (
						|				РегВерсииЭтогоПродукта.ВерсияОТ МЕЖДУ &ПродуктВерсияОТ И &ПродуктВерсияДО
						|				ИЛИ РегВерсииЭтогоПродукта.ВерсияДО МЕЖДУ &ПродуктВерсияОТ И &ПродуктВерсияДО
						|			)
						|		)
						|	)");
					Запрос.УстановитьПараметр("ПродуктВерсияОТ", ПродуктВерсияОТ);
					Запрос.УстановитьПараметр("ПродуктВерсияДО", ПродуктВерсияДО);
				КонецЕсли;
				Если ПоВсемВерсиямПлатформы = Истина Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоВерсиямПлатформы", "ИСТИНА");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоВерсиямПлатформы", "
						|( // Версия платформы пересекается с условием или нет отборов по версии платформы вообще.
						|		РегВерсииПлатформы.Новость ЕСТЬ NULL
						|		ИЛИ ( // Нижний или верхний интервал отбора новости входят в условие.
						|			РегВерсииПлатформы.ВерсияОТ МЕЖДУ &ПлатформаВерсияОТ И &ПлатформаВерсияДО
						|			ИЛИ РегВерсииПлатформы.ВерсияДО МЕЖДУ &ПлатформаВерсияОТ И &ПлатформаВерсияДО
						|		)
						|	)");
					Запрос.УстановитьПараметр("ПлатформаВерсияОТ", ПлатформаВерсияОТ);
					Запрос.УстановитьПараметр("ПлатформаВерсияДО", ПлатформаВерсияДО);
				КонецЕсли;

				РезультатЗапроса = Запрос.Выполнить(); // УстановитьСостояниеНовостейДляПользователей, по заданным версиям продукта и платформы.
				ОбработатьРезультатЗапроса = Истина;
			КонецЕсли;

			Если ОбработатьРезультатЗапроса = Истина Тогда
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					// Цикл по списку новостей.
					Пока Выборка.Следующий() Цикл
						// Цикл по каждому пользователю.
						Для Каждого ТекущийПользователь Из МассивПользователей Цикл
							Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
								Запись.Пользователь = ТекущийПользователь;
								Запись.Новость      = Выборка.Новость;
							Запись.Прочитать(); // Запись будет ниже.
								Запись.Пользователь = ТекущийПользователь;
								Запись.Новость      = Выборка.Новость;
								ЗаполнитьЗначенияСвойств(Запись, ЗначенияСостояний, СписокПолейДляЗаполнения);
							Запись.Записать(Истина);
						КонецЦикла;
						КоличествоОбработанныхНовостей = КоличествоОбработанныхНовостей + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='УстановитьСостояниеНовостейДляПользователей, завершение.
				|Обработано пользователей: %1
				|Обработано новостей: %2'")
				+ Символы.ПС,
			МассивПользователей.Количество(),
			Формат(КоличествоОбработанныхНовостей, "ЧЦ=15; ЧДЦ=; ЧРГ=' '; ЧГ=3,0"));
		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'", ОбщегоНазначения.КодОсновногоЯзыка()) , // ИдентификаторШага.
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.Справочники.Новости, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Иначе

		ТекстСообщения = НСтр("ru='УстановитьСостояниеНовостейДляПользователей, ошибка выполнения: в качестве значений заполнения передано значение типа, отличного от Структура, либо не заполнены настройки заполнения (не указано ни одного ключа структуры).
			|Возможные имена ключей совпадают с наименованиями ресурсов регистра сведений СостоянияНовостей'");
		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'", ОбщегоНазначения.КодОсновногоЯзыка()) , // ИдентификаторШага.
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			Метаданные.Справочники.Новости, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

#Область РаботаСПомеченнымиНовостями

// Процедура помечает для текущего пользователя несколько новостей пометкой (число 0..9, где 0 = нет пометки).
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей - Массив из СправочникСсылка.Новости - массив ссылок на новости;
//  Пометка        - Число - число в интервале 0..9, где 0 - неотмеченная новость.
//
Процедура ИзменитьПометкуНовостей(Знач МассивНовостей, Знач Пометка = 1) Экспорт

	Если ТипЗнч(МассивНовостей) = Тип("СправочникСсылка.Новости") Тогда
		ПравильныйМассивНовостей = Новый Массив;
			ПравильныйМассивНовостей.Добавить(МассивНовостей);
		ИзменитьПометкуНовостей(ПравильныйМассивНовостей, Пометка);
	Иначе
		СостоянияОповещений = ПолучитьСостояниеОповещения(МассивНовостей);
		Для каждого ТекущаяНовость Из МассивНовостей Цикл
			Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
				Запись.Пользователь = Пользователи.ТекущийПользователь();
				Запись.Новость      = ТекущаяНовость;
			Запись.Прочитать(); // Запись будет ниже. // На тот случай, если были установлены другие свойства.
			// ОповещениеВключено - особое свойство. Если записи в регистре сведений не было,
			//  то определить его в зависимости от состояния общей важности и важности в привязке к метаданным.
			Если НЕ Запись.Выбран() Тогда
				Результат = СостоянияОповещений.Получить(ТекущаяНовость);
				Если Результат <> Неопределено Тогда
					Запись.ОповещениеВключено = Результат;
					Если Результат = Истина Тогда
						Запись.ДатаНачалаОповещения = '00010101';
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Вдруг новость не выбрана (т.е. ее нет в базе) - перезаполнить менеджер записи и записать.
			Запись.Пользователь = Пользователи.ТекущийПользователь();
			Запись.Новость      = ТекущаяНовость;
			Запись.Пометка      = Пометка;
			// Не изменять эти данные:
			// Запись.ДатаНачалаОповещения;
			// Запись.ОповещениеВключено;
			// Запись.Прочтена;
			// Запись.УдаленаИзСпискаНовостей.
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомПрочтенности

// Процедура изменяет для текущего пользователя признак прочтенности у новостей.
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей      - Массив из СправочникСсылка.Новости - массив ссылок на новости;
//  ПризнакПрочтенности - Булево - Истина, если новость надо пометить как прочтенную, Ложь - как непрочтенную.
//
Процедура ИзменитьПризнакПрочтенностиНовостей(Знач МассивНовостей, Знач ПризнакПрочтенности = Истина) Экспорт

	Если ТипЗнч(МассивНовостей) = Тип("СправочникСсылка.Новости") Тогда
		ПравильныйМассивНовостей = Новый Массив;
			ПравильныйМассивНовостей.Добавить(МассивНовостей);
		ИзменитьПризнакПрочтенностиНовостей(ПравильныйМассивНовостей, ПризнакПрочтенности);
	Иначе
		СостоянияОповещений = ПолучитьСостояниеОповещения(МассивНовостей);
		Для каждого ТекущаяНовость Из МассивНовостей Цикл
			Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
				Запись.Пользователь = Пользователи.ТекущийПользователь();
				Запись.Новость      = ТекущаяНовость;
			Запись.Прочитать(); // Запись будет ниже. // На тот случай, если были установлены другие свойства.
			// ОповещениеВключено - особое свойство. Если записи в регистре сведений не было,
			//  то определить его в зависимости от состояния общей важности и важности в привязке к метаданным.
			Если НЕ Запись.Выбран() Тогда
				Результат = СостоянияОповещений.Получить(ТекущаяНовость);
				Если Результат <> Неопределено Тогда
					Запись.ОповещениеВключено = Результат;
					Если Результат = Истина Тогда
						Запись.ДатаНачалаОповещения = '00010101';
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Вдруг новость не выбрана (т.е. ее нет в базе) - перезаполнить менеджер записи и записать.
			Запись.Пользователь = Пользователи.ТекущийПользователь();
			Запись.Новость      = ТекущаяНовость;
			Запись.Прочтена     = ПризнакПрочтенности;
			// Не изменять эти данные:
			// Запись.ДатаНачалаОповещения;
			// Запись.ОповещениеВключено;
			// Запись.Пометка;
			// Запись.УдаленаИзСпискаНовостей.
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомУдаленияИзСписка

// Процедура изменяет для текущего пользователя признак удаления из списка у новостей.
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей          - Массив из СправочникСсылка.Новости - массив ссылок на новости;
//  ПризнакУдаленияИзСписка - Булево - Истина - удалить из списка новостей (в корзину), Ложь - восстановить из корзины.
//
Процедура ИзменитьПризнакУдаленияИзСпискаНовостей(Знач МассивНовостей, Знач ПризнакУдаленияИзСписка = Истина) Экспорт

	Если ТипЗнч(МассивНовостей) = Тип("СправочникСсылка.Новости") Тогда
		ПравильныйМассивНовостей = Новый Массив;
			ПравильныйМассивНовостей.Добавить(МассивНовостей);
		ИзменитьПризнакУдаленияИзСпискаНовостей(ПравильныйМассивНовостей, ПризнакУдаленияИзСписка);
	Иначе
		СостоянияОповещений = ПолучитьСостояниеОповещения(МассивНовостей);
		Для каждого ТекущаяНовость Из МассивНовостей Цикл
			Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
				Запись.Пользователь = Пользователи.ТекущийПользователь();
				Запись.Новость      = ТекущаяНовость;
			Запись.Прочитать(); // Запись будет ниже. // На тот случай, если были установлены другие свойства.
			// ОповещениеВключено - особое свойство. Если записи в регистре сведений не было,
			//  то определить его в зависимости от состояния общей важности и важности в привязке к метаданным.
			Если НЕ Запись.Выбран() Тогда
				Результат = СостоянияОповещений.Получить(ТекущаяНовость);
				Если Результат <> Неопределено Тогда
					Запись.ОповещениеВключено = Результат;
					Если Результат = Истина Тогда
						Запись.ДатаНачалаОповещения = '00010101';
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Вдруг новость не выбрана (т.е. ее нет в базе) - перезаполнить менеджер записи и записать.
			Запись.Пользователь = Пользователи.ТекущийПользователь();
			Запись.Новость      = ТекущаяНовость;
			Запись.УдаленаИзСпискаНовостей = ПризнакУдаленияИзСписка;
			// Не изменять эти данные:
			// Запись.ДатаНачалаОповещения;
			// Запись.ОповещениеВключено;
			// Запись.Пометка;
			// Запись.Прочтена.
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСНапоминаниями

// Процедура изменяет для текущего пользователя признак прекращения оповещения у новостей.
// Имеет смысл только для важных и очень важных новостей.
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей       - Массив из СправочникСсылка.Новости - массив ссылок на новости;
//  ОповещениеВключено   - Булево - Истина, если новость будет всплывать, ложь - не будет;
//  ДатаНачалаОповещения - Дата - дата (UTC+0), начиная с которой необходимо включить всплывание.
//
Процедура ИзменитьПризнакОповещенияНовостей(Знач МассивНовостей, Знач ОповещениеВключено = Ложь, Знач ДатаНачалаОповещения = '00010101') Экспорт

	Если ТипЗнч(МассивНовостей) = Тип("СправочникСсылка.Новости") Тогда
		ПравильныйМассивНовостей = Новый Массив;
			ПравильныйМассивНовостей.Добавить(МассивНовостей);
		ИзменитьПризнакОповещенияНовостей(ПравильныйМассивНовостей, ОповещениеВключено, ДатаНачалаОповещения);
	Иначе
		Для каждого ТекущаяНовость Из МассивНовостей Цикл
			Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
				Запись.Пользователь = Пользователи.ТекущийПользователь();
				Запись.Новость      = ТекущаяНовость;
			Запись.Прочитать(); // Запись будет ниже. // На тот случай, если были установлены другие свойства.
			// Вдруг новость не выбрана (т.е. ее нет в базе) - перезаполнить менеджер записи и записать.
			Запись.Пользователь         = Пользователи.ТекущийПользователь();
			Запись.Новость              = ТекущаяНовость;
			Запись.ОповещениеВключено   = ОповещениеВключено;
			Запись.ДатаНачалаОповещения = ДатаНачалаОповещения;
			// Не изменять эти данные:
			// Запись.Прочтена;
			// Запись.Пометка;
			// Запись.УдаленаИзСпискаНовостей.
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Функция возвращает реальное состояние оповещения для новости на текущую дату.
// Возможна ситуация, когда записи в регистре сведений "СостоянияНовостей" нет, тогда программа рассчитывает их,
//   исходя из состояния Важности новости и Важности в привязке к метаданным (если важность > 0, то оповещение включено).
//
// Параметры:
//  МассивНовостей - Массив из СправочникСсылка.Новости - массив новостей, которые необходимо обработать.
//
// Возвращаемое значение:
//   Соответствие - соответствие, где:
//     * ключ     - СправочникСсылка.Новости;
//     * значение - Булево - должно ли быть включено оповещение на данный момент или нет.
//
Функция ПолучитьСостояниеОповещения(МассивНовостей) Экспорт

	Результат = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|// Важность общая для всей новости.
		|ВЫБРАТЬ
		|	Спр.Ссылка КАК Новость,
		|	// ВажностьОбщая.
		|	ВЫБОР // Важность также может быть сброшена актуальностью новости (когда новость становится неактуальной, то она становится и неважной).
		|		КОГДА ((Спр.ДатаСбросаВажности <> &ПустаяДата) И (Спр.ДатаСбросаВажности <= &ТекущаяДатаДляРасчетов))
		|				ИЛИ ((Спр.ДатаЗавершения <> &ПустаяДата) И (Спр.ДатаЗавершения < &ТекущаяДатаДляРасчетов))
		|			ТОГДА 0
		|		ИНАЧЕ Спр.Важность
		|	КОНЕЦ КАК Важность
		|ПОМЕСТИТЬ ВТ_ВсеВажности
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.Ссылка В (&МассивНовостей)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Важность в привязке к метаданным.
		|ВЫБРАТЬ
		|	Спр.Ссылка КАК Новость,
		|	// ВажностьМетаданных.
		|	ВЫБОР // Важность также может быть сброшена актуальностью новости (когда новость становится неактуальной, то она становится и неважной).
		|		КОГДА ((Спр.ДатаСбросаВажности <> &ПустаяДата) И (Спр.ДатаСбросаВажности <= &ТекущаяДатаДляРасчетов))
		|				ИЛИ ((Спр.Ссылка.ДатаЗавершения <> &ПустаяДата) И (Спр.Ссылка.ДатаЗавершения < &ТекущаяДатаДляРасчетов))
		|			ТОГДА 0
		|		ИНАЧЕ Спр.Важность
		|	КОНЕЦ КАК Важность
		|ИЗ
		|	Справочник.Новости.ПривязкаКМетаданным КАК Спр
		|ГДЕ
		|	Спр.Ссылка В (&МассивНовостей)
		|;
		|
		|// Рассчитанная общая важность по новости (по максимуму).
		|ВЫБРАТЬ
		|	ВТ_ВсеВажности.Новость            КАК Новость,
		|	МАКСИМУМ(ВТ_ВсеВажности.Важность) КАК Важность
		|ИЗ
		|	ВТ_ВсеВажности
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсеВажности.Новость
		|";
	Запрос.УстановитьПараметр("МассивНовостей", МассивНовостей);
	Запрос.УстановитьПараметр("ТекущаяДатаДляРасчетов", ТекущаяУниверсальнаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');

	РезультатЗапроса = Запрос.Выполнить(); // ПолучитьСостояниеОповещения.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Новость, ?(Выборка.Важность > 0, Истина, Ложь));
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

// На основании значении регистра сведений ДатыЗагрузкиПоследнихНовостей до и после загрузки определяет,
//  какие новости были загружены.
//
// Параметры:
//  ТаблицаДатЗагрузокНовостейПередПолучением - ТаблицаЗначений - состав колонок соответствует
//    регистру сведений ДатыЗагрузкиПоследнихНовостей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений с колонками:
//    * Новость                        - СправочникСсылка.Новости - ссылка на новость;
//    * НовостьУникальныйИдентификатор - УникальныйИдентификатор - УИН от ссылки на новость;
//    * НовостьНаименование            - Строка - заголовок новости;
//    * НовостьПодзаголовок            - Строка - подзаголовок новости;
//    * НовостьДатаПубликации          - Дата - дата публикации;
//    * НовостьДатаЗавершения          - Дата - дата завершения;
//    * НовостьПометкаУдаления         - Булево - пометка удаления;
//    * НовостьЛентаНовостей           - СправочникСсылка.ЛентыНовостей - лента новостей;
//    * НовостьКодЛентыНовостей        - Строка - код ленты новостей.
//
Функция ПолучитьЗагруженныеНовости(ТаблицаДатЗагрузокНовостейПередПолучением) Экспорт

	Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("Новость", Новый ОписаниеТипов("СправочникСсылка.Новости"));
		Результат.Колонки.Добавить("НовостьУникальныйИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
		Результат.Колонки.Добавить("НовостьНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
		Результат.Колонки.Добавить("НовостьПодзаголовок", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
		Результат.Колонки.Добавить("НовостьДатаПубликации", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		Результат.Колонки.Добавить("НовостьДатаЗавершения", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		Результат.Колонки.Добавить("НовостьПометкаУдаления", Новый ОписаниеТипов("Булево"));
		Результат.Колонки.Добавить("НовостьЛентаНовостей", Новый ОписаниеТипов("СправочникСсылка.ЛентыНовостей"));
		Результат.Колонки.Добавить("НовостьКодЛентыНовостей", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));

	// Определение текущего состояния загрузки новостей.
	ТаблицаДатЗагрузокНовостейПослеПолучения = ПолучитьДатыЗагрузкиНовостей();

	ОбновленныеЛентыНовостей = Новый Соответствие;
	Для Каждого ТекущаяСтрокаПосле Из ТаблицаДатЗагрузокНовостейПослеПолучения Цикл
		// Если была добавлена новая лента новостей (есть в ПОСЛЕ, отсутствует в ПЕРЕД), то по ней все новости попадут в результат.
		// Если была удалена лента новостей (отсутствует в ПОСЛЕ, есть в ПЕРЕД), то по ней никакие новости не попадут в результат.
		Для Каждого ТекущаяСтрокаПеред Из ТаблицаДатЗагрузокНовостейПередПолучением Цикл
			Если ТекущаяСтрокаПосле.ЛентаНовостей = ТекущаяСтрокаПеред.ЛентаНовостей Тогда
				Если ТекущаяСтрокаПеред.ДатаЗагрузкиПоследнихНовостей < ТекущаяСтрокаПосле.ДатаЗагрузкиПоследнихНовостей Тогда
					ЗначенияОтбора = Новый Структура;
						ЗначенияОтбора.Вставить("ДатаОТ", ТекущаяСтрокаПеред.ДатаЗагрузкиПоследнихНовостей + 1); // + 1 секунда, чтобы в запросе сработало условие МЕЖДУ.
						ЗначенияОтбора.Вставить("ДатаДО", ТекущаяСтрокаПосле.ДатаЗагрузкиПоследнихНовостей);
					ОбновленныеЛентыНовостей.Вставить(ТекущаяСтрокаПосле.ЛентаНовостей, ЗначенияОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Если ОбновленныеЛентыНовостей.Количество() > 0 Тогда
		ШаблонЗапроса = "
			|ВЫБРАТЬ
			|	Новости.Ссылка            КАК Новость,
			|	Новости.УИННовости        КАК НовостьУникальныйИдентификатор,
			|	Новости.Наименование      КАК НовостьНаименование,
			|	Новости.Подзаголовок      КАК НовостьПодзаголовок,
			|	Новости.ДатаПубликации    КАК НовостьДатаПубликации,
			|	Новости.ДатаЗавершения    КАК НовостьДатаЗавершения,
			|	Новости.ПометкаУдаления   КАК НовостьПометкаУдаления,
			|	Новости.ЛентаНовостей     КАК НовостьЛентаНовостей,
			|	Новости.ЛентаНовостей.Код КАК НовостьКодЛентыНовостей
			|ИЗ
			|	Справочник.Новости КАК Новости
			|ГДЕ
			|	Новости.ЛентаНовостей = &ЛентаНовостей_000
			|	И Новости.ДатаПубликации МЕЖДУ &ДатаОТ_000 И &ДатаДО_000
			|";
		ТекстЗапроса = "";
		Запрос = Новый Запрос;
		С = 1; // АПК:247 это счетчик.
		Для Каждого ТекущаяЛентаНовостей Из ОбновленныеЛентыНовостей Цикл
			ПорядковыйНомер = "_" + Формат(С, "ЧЦ=3; ЧВН=");
			ТекстЗапроса = ТекстЗапроса + "#" + ШаблонЗапроса + "#";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_000", ПорядковыйНомер);
			Запрос.УстановитьПараметр("ЛентаНовостей" + ПорядковыйНомер, ТекущаяЛентаНовостей.Ключ);
			Запрос.УстановитьПараметр("ДатаОТ" + ПорядковыйНомер, ТекущаяЛентаНовостей.Значение.ДатаОТ);
			Запрос.УстановитьПараметр("ДатаДО" + ПорядковыйНомер, ТекущаяЛентаНовостей.Значение.ДатаДО);
			С = С + 1; // АПК:247 это счетчик.
		КонецЦикла;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "##", Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#", "");

		Запрос.Текст = ТекстЗапроса;

		РезультатЗапроса = Запрос.Выполнить(); // ПолучитьЗагруженныеНовости.
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСКатегориямиНовостей

// Функция возвращает результат конкатенации КатегорияНовостей и ЗначениеКатегорииНовостей.
// Нужно только для формирования XML-представления новости.
//
// Параметры:
//  КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - категория новостей;
//  ЗначениеКатегорииНовостей - Произвольный - значение категории новостей.
//
// Возвращаемое значение:
//  Строка - строковое описание связки категории и значения.
//
Функция ПолучитьПредставлениеКатегорииИЗначения(КатегорияНовостей, ЗначениеКатегорииНовостей) Экспорт

	Результат = "";

	ТипБулево = Тип("Булево");
	ТипСтрока = Тип("Строка");
	ТипДата   = Тип("Дата");
	ТипЧисло  = Тип("Число");

	// Категория.ТипЗначения - Строка     - СокрЛП(%).
	// Категория.ТипЗначения - Число      - Формат(%, "ЧЦ=32; ЧДЦ=4; ЧРД=,; ЧН=0; ЧГ=0; ЧО=1").
	// Категория.ТипЗначения - Дата       - Формат(%, "ДФ=yyyyMMddHHmmss").
	// Категория.ТипЗначения - Булево     - Формат(%, "БЛ=Ложь; БИ=Истина").
	// Категория.ТипЗначения - Справочник - СокрЛП(%.Наименование).
	Если ТипЗнч(КатегорияНовостей) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей")
			И НЕ КатегорияНовостей.Пустая() Тогда
		ТипЗначения = КатегорияНовостей.ТипЗначения.Типы()[0];
		// Если Неопределено, то привести к значению по-умолчанию.
		ПриведенноеЗначениеКатегорииНовостей = КатегорияНовостей.ТипЗначения.ПривестиЗначение(ЗначениеКатегорииНовостей);
		Если ТипЗначения = ТипСтрока Тогда
			ПредставлениеЗначения = СокрЛП(ПриведенноеЗначениеКатегорииНовостей);
		ИначеЕсли ТипЗначения = ТипДата Тогда
			ПредставлениеЗначения = Формат(ПриведенноеЗначениеКатегорииНовостей, "ДФ=yyyyMMddHHmmss");
		ИначеЕсли ТипЗначения = ТипЧисло Тогда
			ПредставлениеЗначения = Формат(ПриведенноеЗначениеКатегорииНовостей, "ЧЦ=32; ЧДЦ=4; ЧРД=,; ЧН=0; ЧГ=0; ЧО=1");
		ИначеЕсли ТипЗначения = ТипБулево Тогда
			ПредставлениеЗначения = Формат(ПриведенноеЗначениеКатегорииНовостей, "БЛ=Ложь; БИ=Истина");
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ЗначенияКатегорийНовостей") Тогда
			ПредставлениеЗначения = СокрЛП(ПриведенноеЗначениеКатегорииНовостей.Наименование);
		КонецЕсли;
		Результат = СокрЛП(КатегорияНовостей.Наименование) + "=" + ПредставлениеЗначения;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСЛентамиНовостей

// Изменяет настройку видимости лент новостей для пользователя.
//
// Параметры:
//  ЛентыНовостей - СправочникСсылка.ЛентаНовостей, Массив из СправочникСсылка.ЛентаНовостей - Ленты новостей,
//                    для которых необходимо изменить настройку видимости;
//  Видимость     - Булево - истина = лента видима, ложь = лента скрыта;
//  Пользователь  - СправочникСсылка.Пользователи - пользователь,
//                    для которого необходимо изменить признак видимости ленты новостей;
//
Процедура ИзменитьПользовательскуюВидимостьЛентНовостей(ЛентыНовостей, Видимость = Ложь, Пользователь = Неопределено) Экспорт

	ТипМассив        = Тип("Массив");
	ТипЛентыНовостей = Тип("СправочникСсылка.ЛентыНовостей");
	ТипПользователь  = Тип("СправочникСсылка.Пользователи");

	Если Пользователь = Неопределено Тогда
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Иначе
		ТекущийПользователь = Пользователь;
	КонецЕсли;
	Если ТипЗнч(ТекущийПользователь) <> ТипПользователь Тогда // Внешний пользователь, например.
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Передан параметр Пользователь неправильного типа: %1.'"),
			ТипЗнч(Пользователь));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	МассивЛентНовостей = Новый Массив;
	Если ТипЗнч(ЛентыНовостей) = ТипЛентыНовостей Тогда
		МассивЛентНовостей.Добавить(ЛентыНовостей);
	ИначеЕсли ТипЗнч(ЛентыНовостей) = ТипМассив Тогда
		// Оставить только ссылки на ленты новостей, удалить остальные типы данных.
		МассивЛентНовостей = ХранилищаНастроек.НастройкиНовостей.ПровестиВалидациюНастроек(ЛентыНовостей, "ОтключенныеЛентыНовостей", "");
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Передан параметр ЛентыНовостей неправильного типа: %1.'"),
			ТипЗнч(ЛентыНовостей));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	БылиИзменения = Ложь;
	Для Каждого ТекущаяЛентаНовостей Из МассивЛентНовостей Цикл
		Запись = РегистрыСведений.ОтключенныеЛентыНовостей.СоздатьМенеджерЗаписи();
		Запись.Пользователь  = ТекущийПользователь;
		Запись.ЛентаНовостей = ТекущаяЛентаНовостей;
		Если Видимость = Ложь Тогда
			Запись.Записать(Истина);
			БылиИзменения = Истина;
		Иначе
			Запись.Удалить();
			БылиИзменения = Истина;
		КонецЕсли;
	КонецЦикла;

	Если БылиИзменения = Истина Тогда
		// После изменения настройки видимости лент новостей (административные, для области данных,
		//  пользовательские и т.п.), необходимо очистить кэш,
		//  чтобы ОбработкаНовостейПовтИсп.ПолучитьОтключенныеЛентыНовостей выдавала правильный результат.
		// Здесь может измениться: пользовательская видимость ленты новостей.
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;

КонецПроцедуры

// Изменяет настройку видимости лент новостей для текущей области данных.
// Должно запускаться или в коробке, или в разделенном сеансе.
//
// Параметры:
//  ЛентыНовостей        - СправочникСсылка.ЛентаНовостей, Массив из СправочникСсылка.ЛентыНовостей - Ленты новостей,
//                           для которых необходимо изменить настройку видимости;
//  Видимость            - Булево - истина = лента видима, ложь = лента скрыта;
//  ПричинаОтключения    - Строка - произвольный текст, описывающий причину отключения
//                           ленты новостей для области данных.
//                           Если Видимость = Истина, то этот параметр будет проигнорирован.
//  МассивОбластейДанных - Массив из Число, Неопределено - при запуске в неразделенном сеансе в модели сервиса можно передать
//                           список номеров областей, для которых необходимо изменить видимость ленты новостей.
//                           В остальных режимах работы (в коробке, в разделенном сеансе)
//                            этот параметр будет проигнорирован.
//
Процедура ИзменитьВидимостьЛентНовостейДляОбластиДанных(
			ЛентыНовостей,
			Видимость = Ложь,
			ПричинаОтключения = "",
			МассивОбластейДанных = Неопределено) Экспорт

	ТипМассив        = Тип("Массив");
	ТипЛентыНовостей = Тип("СправочникСсылка.ЛентыНовостей");

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	ПоНесколькимОбластямДанных = Ложь;
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем
		//  без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			Если (ТипЗнч(МассивОбластейДанных) = ТипМассив)
					И (МассивОбластейДанных.Количество() > 0) Тогда
				ПоНесколькимОбластямДанных = Истина;
			Иначе
				Если Видимость = Ложь Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='ИзменитьВидимостьЛентНовостейДляОбластиДанных: передан параметр МассивОбластейДанных нулевого размера или неправильного типа: %1.'"),
						ТипЗнч(МассивОбластейДанных));
					ВызватьИсключение ТекстСообщения;
				Иначе
					// Для Видимость = Истина значения из регистра сведений удаляются,
					//  поэтому список областей данных необязателен.
				КонецЕсли;
			КонецЕсли;
		Иначе
			// В разделенном сеансе нельзя передавать список областей данных.
			Если (ТипЗнч(МассивОбластейДанных) = ТипМассив)
					И (МассивОбластейДанных.Количество() > 0) Тогда
				ТекстСообщения = НСтр("ru='ИзменитьВидимостьЛентНовостейДляОбластиДанных: для разделенного сеанса нельзя передавать параметр МассивОбластейДанных.'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	МассивЛентНовостей = Новый Массив;
	Если ТипЗнч(ЛентыНовостей) = ТипЛентыНовостей Тогда
		МассивЛентНовостей.Добавить(ЛентыНовостей);
	ИначеЕсли ТипЗнч(ЛентыНовостей) = ТипМассив Тогда
		// Оставить только ссылки на ленты новостей, удалить остальные типы данных.
		МассивЛентНовостей = ХранилищаНастроек.НастройкиНовостей.ПровестиВалидациюНастроек(ЛентыНовостей, "ОтключенныеЛентыНовостей", "");
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Передан параметр МассивЛентНовостей неправильного типа: %1.'"),
			ТипЗнч(МассивЛентНовостей));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	БылиИзменения = Ложь;
	Если ПоНесколькимОбластямДанных = Истина Тогда
		Для Каждого ТекущаяОбластьДанных Из МассивОбластейДанных Цикл
			Для Каждого ТекущаяЛентаНовостей Из МассивЛентНовостей Цикл
				Запись = РегистрыСведений.ОтключенныеЛентыНовостейДляОбластиДанных.СоздатьМенеджерЗаписи();
				Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяОбластьДанных;
				Запись.ЛентаНовостей = ТекущаяЛентаНовостей;
				Если Видимость = Ложь Тогда
					Запись.ПричинаОтключения = ПричинаОтключения;
					Запись.Записать(Истина);
					БылиИзменения = Истина;
				Иначе
					Запись.Удалить();
					БылиИзменения = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого ТекущаяЛентаНовостей Из МассивЛентНовостей Цикл
			Запись = РегистрыСведений.ОтключенныеЛентыНовостейДляОбластиДанных.СоздатьМенеджерЗаписи();
			Запись.ЛентаНовостей = ТекущаяЛентаНовостей;
			Если Видимость = Ложь Тогда
				Запись.Записать(Истина);
				БылиИзменения = Истина;
			Иначе
				Запись.Удалить();
				БылиИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если БылиИзменения = Истина Тогда
		// После изменения настройки видимости лент новостей (административные, для области данных,
		//  пользовательские и т.п.), необходимо очистить кэш,
		//  чтобы ОбработкаНовостейПовтИсп.ПолучитьОтключенныеЛентыНовостей выдавала правильный результат.
		// Здесь может измениться: пользовательская видимость ленты новостей.
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПользователями

// Подсистема ЧтениеНовостей не рассчитана на работу с внешними пользователями,
//  поэтому если в программу зашел внешний пользователь, и у него включена роль ЧтениеНовостей или ПолныеПрава
//  или РедактированиеНовостей, то вывести сообщение в журнал регистрации.
//
// Возвращаемое значение:
//   Булево - Истина, если это внешний пользователь с возможностью чтения новостей
//                    (доступна одна из ролей: ЧтениеНовостей, РедактированиеНовостей, ПолныеПрава).
//
Функция ЭтоВнешнийПользовательСВозможностьюЧтениеНовостей() Экспорт

	Результат = Ложь;

	// Для пользователя без разделителей не заполняются параметры сеанса, поэтому будет ошибка.
	Если НЕ ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() Тогда

		Если (Пользователи.ЭтоСеансВнешнегоПользователя()) Тогда

				РольДоступна_ЧтениеНовостей         = РольДоступна(Метаданные.Роли.ЧтениеНовостей); // АПК:336 Необходимо только для записи лога.
				РольДоступна_РедактированиеНовостей = РольДоступна(Метаданные.Роли.РедактированиеНовостей); // АПК:336 Необходимо только для записи лога.
				РольДоступна_АдминистраторСистемы   = ОбработкаНовостейПовтИсп.ЕстьРольАдминистраторСистемы();
				РольДоступна_ПолныеПрава            = ОбработкаНовостейПовтИсп.ЕстьРольПолныеПрава();

			Если ПравоДоступа("Чтение", Метаданные.Справочники.Новости) Тогда

				Результат = Истина;

				// В модуле с повторными значениями запись в журнал регистрации будет происходить не чаще 1 раза в 20 минут
				//  (или после принудительного очищения кэша с помощью ОбновитьПовторноИспользуемыеЗначения();).
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не рекомендуется давать возможность чтения новостей внешнему пользователю (%1)
						|Подключены следующие роли:
						|	- ЧтениеНовостей         - %2
						|	- РедактированиеНовостей - %3
						|	- АдминистраторСистемы   - %4
						|	- ПолныеПрава            - %5
						|Это может привести к ошибкам в работе с конфигурацией.'"),
					Пользователи.АвторизованныйПользователь(),
					?(РольДоступна_ЧтениеНовостей,"ПОДКЛЮЧЕНА", "Отключена"),
					?(РольДоступна_РедактированиеНовостей,"ПОДКЛЮЧЕНА", "Отключена"),
					?(РольДоступна_АдминистраторСистемы,"ПОДКЛЮЧЕНА", "Отключена"),
					?(РольДоступна_ПолныеПрава,"ПОДКЛЮЧЕНА", "Отключена"))
					+ Символы.ПС;
				ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Разное'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
					НСтр("ru='Новости. Разное. Ошибка работы с пользователями'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает фиксированную структуру с часто используемыми параметрами пользователя.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура - фиксированная структура с ключами:
//   * ИмяПользователяИБ              - Строка - имя пользователя;
//   * ЕстьРольЧтенияНовостей         - Булево - доступность указанной роли;
//   * ЕстьРольРедактированиеНовостей - Булево - доступность указанной роли;
//   * ЕстьРольПолныеПрава            - Булево - доступность указанной роли;
//   * ЕстьРольАдминистраторСистемы   - Булево - доступность указанной роли;
//   * ЭтоВнешнийПользователь         - Булево - это внешний пользователь;
//   * ЭтоФоновоеЗадание              - Булево - это фоновое задание;
//   * ТекущийПользовательСсылка      - СправочникСсылка.Пользователи - ссылка на элемент справочника.
//
Функция ПараметрыТекущегоПользователя() Экспорт

	Возврат ОбработкаНовостейПовтИсп.ПараметрыТекущегоПользователя();

КонецФункции

#КонецОбласти

#Область РаботаСОтборамиНовостей

// В некоторых новостях может быть установлена категория, проверяющая состояние некоторой функциональной опции,
//  например "Эта новость только если подключен Облачный архив" с текстом "Вышла новая версия Облачного архива",
//  или "Эта новость только если не подключены СПАРК Риски" с текстом "Предлагаем подключить СПАРК Риски".
// После изменения значения этой категории (подключили / отключили услугу и т.п.), необходимо показать или скрыть некоторые новости,
//  а для этого необходимо пересчитать отборы.
// Условия показа новости могут быть как общие для всех новостей всей информационной базы, так и только для отдельной области данных.
// Процедура заполняет регистры сведений ОтборыПоЛентамНовостейОбщие и РассчитанныеОтборыПоНовостям_Общие
//  чтобы отобразить или скрыть некоторые новости.
// Вызывается автоматически регламентным заданием пересчета отборов или при обновлении конфигурации, но
//  для того, чтобы отфильтровать новости сразу, то может также вызываться вручную в модели сервиса в неразделенном сеансе, или в коробке.
//
Процедура ПриИзмененииЗначенийОтборовОбщих() Экспорт

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если вошли в область данных.
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ТекстСообщения = НСтр("ru='Невозможно изменить общие отборы в разделенном сеансе.'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;

	НаименованиеПроцедурыФункции = "ПриИзмененииЗначенийОтборовОбщих"; // Идентификатор.
	КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	ЗаписыватьВЖурналРегистрации = Истина;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='При изменении значений общих отборов'"));

		ОптимизироватьОтборыПоНовостям(КонтекстВыполненияВложенный);
		ПересчитатьОтборыПоНовостям_Общие(КонтекстВыполненияВложенный);

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ПриИзмененииЗначенийОтборов. Общие'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='При изменении значений общих отборов'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// В некоторых новостях может быть установлена категория, проверяющая состояние некоторой функциональной опции,
//  например "Эта новость только если подключен Облачный архив" с текстом "Вышла новая версия Облачного архива",
//  или "Эта новость только если не подключены СПАРК Риски" с текстом "Предлагаем подключить СПАРК Риски".
// После изменения значения этой категории (подключили / отключили услугу и т.п.), необходимо показать или скрыть некоторые новости,
//  а для этого необходимо пересчитать отборы.
// Условия показа новости могут быть как общие для всех новостей всей информационной базы, так и только для отдельной области данных.
// Процедура заполняет регистры сведений ОтборыПоЛентамНовостейДляОбластиДанных и РассчитанныеОтборыПоНовостям_ДляОбластиДанных
//  чтобы отобразить или скрыть некоторые новости.
// Должно вызываться вручную после изменения необходимых для отбора новостей значений.
// Может работать в модели сервиса.
// В модели сервиса работает независимо от того, вошли в область данных или нет.
// Если вошли в область данных, то будут пересчитаны только отборы по текущей области данных.
//
Процедура ПриИзмененииЗначенийОтборовДляОбластиДанных() Экспорт

	НаименованиеПроцедурыФункции = "ПриИзмененииЗначенийОтборовДляОбластиДанных"; // Идентификатор.
	КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	ЗаписыватьВЖурналРегистрации = Истина;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='При изменении значений отборов для области данных'"));

		ОптимизироватьОтборыПоНовостям(КонтекстВыполненияВложенный);
		ПересчитатьОтборыПоНовостям_ДляОбластиДанных(КонтекстВыполненияВложенный);

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ПриИзмененииЗначенийОтборов. ДляОбластиДанных'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='При изменении значений общих отборов'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура заполняет регистр сведений ОтборыПоЛентамНовостейПользовательские и РассчитанныеОтборыПоНовостям_Пользовательские
//  чтобы отобразить или скрыть некоторые новости.
// Должно вызываться вручную после изменения необходимых для отбора новостей значений.
// Может работать в модели сервиса.
// В модели сервиса работает независимо от того, вошли в область данных или нет.
// Если вошли в область данных, то будут пересчитаны только отборы по текущей области данных.
//
// Параметры:
//  Пользователь - Неопределено, СправочникСсылка.Пользователи, Массив из СправочникСсылка.Пользователи - пользователи,
//                      по которым необходимо пересчитать новости-исключения. Если Неопределено, то по всем.
//
Процедура ПриИзмененииЗначенийОтборовПользовательских(Пользователь = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "ПриИзмененииЗначенийОтборовПользовательских"; // Идентификатор.
	КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	ЗаписыватьВЖурналРегистрации = Истина;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='При изменении значений отборов для пользователя'"));

		ОптимизироватьОтборыПоНовостям(КонтекстВыполненияВложенный);
		ПересчитатьОтборыПоНовостям_Пользовательские(Пользователь, КонтекстВыполненияВложенный);

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ПриИзмененииЗначенийОтборов. Пользовательские'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='При изменении значений общих отборов'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСоЗначениямиОтборов

#Область РаботаСоЗначениямиОтборов_ВспомогательныеМетоды

// Возвращает таблицу значений (возможно с одной строкой данных) для передачи как параметр
//  в ОбработкаНовостей.УстановитьПрограммныйОтборОбщий.
//
// Параметры:
//   ДанныеОтбора - Структура - данные отбора с ключами:
//    * КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - Категория. Если Неопределено,
//        то возвратится пустая таблица значений;
//    * ЗначениеКатегорииНовостей - Характеристика.КатегорииНовостей - Значение категории.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с колонками:
//    * КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - Категория;
//    * ЗначениеКатегорииНовостей - Характеристика.КатегорииНовостей - Значение категории;
//    * ДатаОбновления            - Дата - дата и время обновления записи (в формате нулевого меридиана);
//    * УсловиеВыполнено          - Булево - признак выполнения этого условия.
//
Функция ЗначенияОтборов_Общие(ДанныеОтбора = Неопределено) Экспорт

	ТипСтруктура         = Тип("Структура");
	ТипКатегорияНовостей = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей");

	Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("КатегорияНовостей", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.КатегорииНовостей"));
		Результат.Колонки.Добавить("ЗначениеКатегорииНовостей"); // Тип - Характеристика.КатегорииНовостей.
		Результат.Колонки.Добавить("ДатаОбновления", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		Результат.Колонки.Добавить("УсловиеВыполнено", Новый ОписаниеТипов("Булево"));

	Если ТипЗнч(ДанныеОтбора) = ТипСтруктура Тогда
		Если (ДанныеОтбора.Свойство("КатегорияНовостей"))
				И (ТипЗнч(ДанныеОтбора.КатегорияНовостей) = ТипКатегорияНовостей) Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.КатегорияНовостей         = ДанныеОтбора.КатегорияНовостей;
			НоваяСтрока.ЗначениеКатегорииНовостей = ДанныеОтбора.ЗначениеКатегорииНовостей;
			НоваяСтрока.УсловиеВыполнено          = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает таблицу значений (возможно с одной строкой данных) для передачи как параметр
//  в ОбработкаНовостей.УстановитьПрограммныйОтборДляОбластиДанных.
//
// Параметры:
//   ДанныеОтбора - Структура - данные отбора с ключами:
//    * КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - Категория. Если Неопределено,
//        то возвратится пустая таблица значений;
//    * ЗначениеКатегорииНовостей - Характеристика.КатегорииНовостей - Значение категории;
//    * НомерОбластиДанных        - Число, Неопределено - номер области данных.
//        Надо заполнять только при вызове в модели сервиса из неразделенного сеанса.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с колонками:
//    * КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - Категория;
//    * ЗначениеКатегорииНовостей - Характеристика.КатегорииНовостей - Значение категории;
//    * ДатаОбновления            - Дата - дата и время обновления записи (в формате нулевого меридиана);
//    * НомерОбластиДанных        - Число, Неопределено - номер области данных;
//    * УсловиеВыполнено          - Булево - признак выполнения этого условия.
//
Функция ЗначенияОтборов_ДляОбластиДанных(ДанныеОтбора = Неопределено) Экспорт

	ТипСтруктура         = Тип("Структура");
	ТипКатегорияНовостей = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей");
	ТипЧисло             = Тип("Число");

	Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("КатегорияНовостей", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.КатегорииНовостей"));
		Результат.Колонки.Добавить("ЗначениеКатегорииНовостей"); // Тип - Характеристика.КатегорииНовостей.
		Результат.Колонки.Добавить("ДатаОбновления", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		Результат.Колонки.Добавить("УсловиеВыполнено", Новый ОписаниеТипов("Булево"));
		Результат.Колонки.Добавить(
			"НомерОбластиДанных",
			Новый ОписаниеТипов(
				"Число",
				Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Любой))); // Сохранять "-1" вместо Неопределено.

	Если ТипЗнч(ДанныеОтбора) = ТипСтруктура Тогда
		Если (ДанныеОтбора.Свойство("КатегорияНовостей"))
				И (ТипЗнч(ДанныеОтбора.КатегорияНовостей) = ТипКатегорияНовостей) Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.КатегорияНовостей         = ДанныеОтбора.КатегорияНовостей;
			НоваяСтрока.ЗначениеКатегорииНовостей = ДанныеОтбора.ЗначениеКатегорииНовостей;
			НоваяСтрока.УсловиеВыполнено          = Истина;
			Если (ДанныеОтбора.Свойство("НомерОбластиДанных"))
					И (ТипЗнч(ДанныеОтбора.НомерОбластиДанных) = ТипЧисло)
					И (ДанныеОтбора.НомерОбластиДанных > 0) Тогда
				НоваяСтрока.НомерОбластиДанных = ДанныеОтбора.НомерОбластиДанных;
			Иначе
				НоваяСтрока.НомерОбластиДанных = -1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает таблицу значений (возможно с одной строкой данных) для передачи как параметр
//  в ОбработкаНовостей.УстановитьПрограммныйОтборПользовательский.
//
// Параметры:
//   ДанныеОтбора - Структура - данные отбора с ключами:
//    * КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - Категория. Если Неопределено,
//        то возвратится пустая таблица значений;
//    * ЗначениеКатегорииНовостей - Характеристика.КатегорииНовостей - Значение категории;
//    * Пользователь              - СправочникСсылка.Пользователи - пользователь, для которого устанавливается отбор;
//    * НомерОбластиДанных        - Число, Неопределено - номер области данных.
//        Надо заполнять только при вызове в модели сервиса из неразделенного сеанса.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с колонками:
//    * КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - Категория;
//    * ЗначениеКатегорииНовостей - Характеристика.КатегорииНовостей - Значение категории;
//    * ДатаОбновления            - Дата - дата и время обновления записи (в формате нулевого меридиана);
//    * Пользователь              - СправочникСсылка.Пользователи - пользователь, для которого устанавливается отбор;
//    * НомерОбластиДанных        - Число, Неопределено - номер области данных;
//    * УсловиеВыполнено          - Булево - признак выполнения этого условия.
//
Функция ЗначенияОтборов_Пользовательские(ДанныеОтбора = Неопределено) Экспорт

	ТипСтруктура         = Тип("Структура");
	ТипКатегорияНовостей = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей");
	ТипЧисло             = Тип("Число");

	Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("КатегорияНовостей", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.КатегорииНовостей"));
		Результат.Колонки.Добавить("ЗначениеКатегорииНовостей"); // Тип - Характеристика.КатегорииНовостей.
		Результат.Колонки.Добавить("ДатаОбновления", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		Результат.Колонки.Добавить("УсловиеВыполнено", Новый ОписаниеТипов("Булево"));
		Результат.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		Результат.Колонки.Добавить(
			"НомерОбластиДанных",
			Новый ОписаниеТипов(
				"Число",
				Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Любой))); // Сохранять "-1" вместо Неопределено.

	Если ТипЗнч(ДанныеОтбора) = ТипСтруктура Тогда
		Если (ДанныеОтбора.Свойство("КатегорияНовостей"))
				И (ТипЗнч(ДанныеОтбора.КатегорияНовостей) = ТипКатегорияНовостей) Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.КатегорияНовостей         = ДанныеОтбора.КатегорияНовостей;
			НоваяСтрока.ЗначениеКатегорииНовостей = ДанныеОтбора.ЗначениеКатегорииНовостей;
			НоваяСтрока.УсловиеВыполнено          = Истина;
			НоваяСтрока.Пользователь              = ДанныеОтбора.Пользователь;
			Если (ДанныеОтбора.Свойство("НомерОбластиДанных"))
					И (ТипЗнч(ДанныеОтбора.НомерОбластиДанных) = ТипЧисло)
					И (ДанныеОтбора.НомерОбластиДанных > 0) Тогда
				НоваяСтрока.НомерОбластиДанных = ДанныеОтбора.НомерОбластиДанных;
			Иначе
				НоваяСтрока.НомерОбластиДанных = -1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСоЗначениямиОтборов_ДобавлениеЗначений

// Добавляет значения отбора (общего).
// На основании этих данных потом будет рассчитываться видимость новостей.
// Не забыть добавить коды категорий в ОбработкаНовостейПереопределяемый.ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей;
// При попытке записать данные в модели сервиса в разделенном режиме будет ошибка.
// Можно последовательно добавить много значений отборов, а потом вызвать "ОбработкаНовостей.ПриИзмененииЗначенийОтборовОбщих".
//
// Параметры:
//  ЗначенияОтборов - ТаблицаЗначений - описание см. ЗначенияОтборов_Общие().
//
Процедура ДобавитьПрограммноеЗначениеОтбора_Общий(ЗначенияОтборов) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В модели сервиса метод [%1] разрешено вызывать только в неразделенном режиме.'"),
				"ОбработкаНовостей.ДобавитьПрограммноеЗначениеОтбора_Общий");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;

	ДатаОбновления = ТекущаяУниверсальнаяДата(); // Все данные, связанные с новостями - в UTC+0.

	// Наличие необходимых колонок в параметре "ЗначенияОтборов" НЕ проверяется.
	Для Каждого ТекущаяСтрока Из ЗначенияОтборов Цикл
		Запись = РегистрыСведений.ЗначенияКатегорийОбщие.СоздатьМенеджерЗаписи();
			Запись.ДатаОбновления            = ДатаОбновления;
			Запись.УсловиеВыполнено          = Истина;
			Запись.КатегорияНовостей         = ТекущаяСтрока.КатегорияНовостей;
			Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
		Запись.Записать(Истина);
		// Сразу добавлять/удалять значение для категории антагониста.
		//  SubsystemRealized <-> SubsystemNotRealized;
		//  FnOptionOn <-> FnOptionOff;
		КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.ПустаяСсылка();
		ТекущаяСтрокаКатегорияНовостейКод = ТекущаяСтрока.КатегорияНовостей.Код;
		Если ТекущаяСтрокаКатегорияНовостейКод = "SubsystemRealized" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("SubsystemNotRealized");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "SubsystemNotRealized" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("SubsystemRealized");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "FnOptionOn" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("FnOptionOff");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "FnOptionOff" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("FnOptionOn");
		КонецЕсли;
		Если НЕ КатегорияАнтагонист.Пустая() Тогда
			Запись = РегистрыСведений.ЗначенияКатегорийОбщие.СоздатьМенеджерЗаписи();
				Запись.ДатаОбновления            = ДатаОбновления;
				Запись.УсловиеВыполнено          = Ложь;
				Запись.КатегорияНовостей         = КатегорияАнтагонист;
				Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Добавляет значения отбора (для области данных).
// На основании этих данных потом будет рассчитываться видимость новостей.
// Не забыть добавить коды категорий в ОбработкаНовостейПереопределяемый.ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей;
// При записи данных в модели сервиса в неразделенном режиме необходимо заполнять "НомерОбласти" в ЗначенияОтборов.
// Можно последовательно добавить много значений отборов, а потом вызвать "ОбработкаНовостей.ПриИзмененииЗначенийОтборовДляОбластиДанных".
//
// Параметры:
//  ЗначенияОтборов - ТаблицаЗначений - описание см. ЗначенияОтборов_ДляОбластиДанных().
//
Процедура ДобавитьПрограммноеЗначениеОтбора_ДляОбластиДанных(ЗначенияОтборов) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ИспользоватьНомерОбластиДанных = Ложь;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ИспользоватьНомерОбластиДанных = Истина;
		КонецЕсли;
	КонецЕсли;

	ДатаОбновления = ТекущаяУниверсальнаяДата(); // Все данные, связанные с новостями - в UTC+0.

	// Наличие необходимых колонок в параметре "ЗначенияОтборов" НЕ проверяется.
	Для Каждого ТекущаяСтрока Из ЗначенияОтборов Цикл
		Запись = РегистрыСведений.ЗначенияКатегорийДляОбластиДанных.СоздатьМенеджерЗаписи();
			Запись.ДатаОбновления            = ДатаОбновления;
			Запись.УсловиеВыполнено          = Истина;
			Запись.КатегорияНовостей         = ТекущаяСтрока.КатегорияНовостей;
			Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
			Если ИспользоватьНомерОбластиДанных = Истина Тогда
				Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяСтрока.НомерОбластиДанных;
			КонецЕсли;
		Запись.Записать(Истина);
		// Сразу добавлять/удалять значение для категории антагониста.
		//  ServiceDataAreaOn <-> ServiceDataAreaOff;
		//  FnOptionDataAreaOn <-> FnOptionDataAreaOff;
		КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.ПустаяСсылка();
		ТекущаяСтрокаКатегорияНовостейКод = ТекущаяСтрока.КатегорияНовостей.Код;
		Если ТекущаяСтрокаКатегорияНовостейКод = "ServiceDataAreaOn" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ServiceDataAreaOff");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "ServiceDataAreaOff" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ServiceDataAreaOn");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "FnOptionDataAreaOn" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("FnOptionDataAreaOff");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "FnOptionDataAreaOff" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("FnOptionDataAreaOn");
		КонецЕсли;
		Если НЕ КатегорияАнтагонист.Пустая() Тогда
			Запись = РегистрыСведений.ЗначенияКатегорийДляОбластиДанных.СоздатьМенеджерЗаписи();
				Запись.ДатаОбновления            = ДатаОбновления;
				Запись.УсловиеВыполнено          = Ложь;
				Запись.КатегорияНовостей         = КатегорияАнтагонист;
				Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
				Если ИспользоватьНомерОбластиДанных = Истина Тогда
					Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяСтрока.НомерОбластиДанных;
				КонецЕсли;
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Добавляет значения отбора (пользовательского).
// На основании этих данных потом будет рассчитываться видимость новостей.
// При записи данных в модели сервиса в неразделенном режиме необходимо заполнять "НомерОбласти" в ЗначенияОтборов.
// Можно последовательно добавить много значений отборов, а потом вызвать "ОбработкаНовостей.ПриИзмененииЗначенийОтборовПользовательских".
//
// Параметры:
//  ЗначенияОтборов - ТаблицаЗначений - описание см. ЗначенияОтборов_Пользовательские().
//
Процедура ДобавитьПрограммноеЗначениеОтбора_Пользовательский(ЗначенияОтборов) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ИспользоватьНомерОбластиДанных = Ложь;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ИспользоватьНомерОбластиДанных = Истина;
		КонецЕсли;
	КонецЕсли;

	ДатаОбновления = ТекущаяУниверсальнаяДата(); // Все данные, связанные с новостями - в UTC+0.

	// Наличие необходимых колонок в параметре "ЗначенияОтборов" НЕ проверяется.
	Для Каждого ТекущаяСтрока Из ЗначенияОтборов Цикл
		Запись = РегистрыСведений.ЗначенияКатегорийПользовательские.СоздатьМенеджерЗаписи();
			Запись.ДатаОбновления            = ДатаОбновления;
			Запись.УсловиеВыполнено          = Истина;
			Запись.Пользователь              = ТекущаяСтрока.Пользователь;
			Запись.КатегорияНовостей         = ТекущаяСтрока.КатегорияНовостей;
			Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
			Если ИспользоватьНомерОбластиДанных = Истина Тогда
				Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяСтрока.НомерОбластиДанных;
			КонецЕсли;
		Запись.Записать(Истина);
		// Сразу добавлять/удалять значение для категории антагониста.
		//  ServiceDataAreaOn <-> ServiceDataAreaOff;
		//  FnOptionDataAreaOn <-> FnOptionDataAreaOff;
		КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.ПустаяСсылка();
		ТекущаяСтрокаКатегорияНовостейКод = ТекущаяСтрока.КатегорияНовостей.Код;
		Если ТекущаяСтрокаКатегорияНовостейКод = "ServiceDataAreaOn" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ServiceDataAreaOff");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "ServiceDataAreaOff" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ServiceDataAreaOn");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "FnOptionDataAreaOn" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("FnOptionDataAreaOff");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "FnOptionDataAreaOff" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("FnOptionDataAreaOn");
		КонецЕсли;
		Если НЕ КатегорияАнтагонист.Пустая() Тогда
			Запись = РегистрыСведений.ЗначенияКатегорийПользовательские.СоздатьМенеджерЗаписи();
				Запись.ДатаОбновления            = ДатаОбновления;
				Запись.УсловиеВыполнено          = Ложь;
				Запись.Пользователь              = ТекущаяСтрока.Пользователь;
				Запись.КатегорияНовостей         = КатегорияАнтагонист;
				Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
				Если ИспользоватьНомерОбластиДанных = Истина Тогда
					Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяСтрока.НомерОбластиДанных;
				КонецЕсли;
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РаботаСоЗначениямиОтборов_УдалениеЗначений

// Удаляет значения отбора (общего).
// На основании этих данных потом будет рассчитываться видимость новостей.
// Не забыть добавить коды категорий в ОбработкаНовостейПереопределяемый.ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей;
// При попытке записать данные в модели сервиса в разделенном режиме будет ошибка.
// Можно последовательно удалить много значений отборов, а потом вызвать "ОбработкаНовостей.ПриИзмененииЗначенийОтборовОбщих".
//
// Параметры:
//  ЗначенияОтборов - ТаблицаЗначений - описание см. ЗначенияОтборов_Общие().
//
Процедура УдалитьПрограммноеЗначениеОтбора_Общий(ЗначенияОтборов) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В модели сервиса метод [%1] разрешено вызывать только в неразделенном режиме.'"),
				"ОбработкаНовостей.УдалитьПрограммноеЗначениеОтбора_Общий");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;

	// Наличие необходимых колонок в параметре "ЗначенияОтборов" НЕ проверяется.
	Для Каждого ТекущаяСтрока Из ЗначенияОтборов Цикл
		Запись = РегистрыСведений.ЗначенияКатегорийОбщие.СоздатьМенеджерЗаписи();
			Запись.КатегорияНовостей         = ТекущаяСтрока.КатегорияНовостей;
			Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
		Запись.Удалить();
	КонецЦикла;

КонецПроцедуры

// Удаляет значения отбора (для области данных).
// На основании этих данных потом будет рассчитываться видимость новостей.
// Не забыть добавить коды категорий в ОбработкаНовостейПереопределяемый.ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей;
// При записи данных в модели сервиса в неразделенном режиме необходимо заполнять "НомерОбласти" в ЗначенияОтборов.
// Можно последовательно удалить много значений отборов, а потом вызвать "ОбработкаНовостей.ПриИзмененииЗначенийОтборовДляОбластиДанных".
//
// Параметры:
//  ЗначенияОтборов - ТаблицаЗначений - описание см. ЗначенияОтборов_ДляОбластиДанных().
//
Процедура УдалитьПрограммноеЗначениеОтбора_ДляОбластиДанных(ЗначенияОтборов) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ИспользоватьНомерОбластиДанных = Ложь;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ИспользоватьНомерОбластиДанных = Истина;
		КонецЕсли;
	КонецЕсли;

	// Наличие необходимых колонок в параметре "ЗначенияОтборов" НЕ проверяется.
	Для Каждого ТекущаяСтрока Из ЗначенияОтборов Цикл
		Запись = РегистрыСведений.ЗначенияКатегорийДляОбластиДанных.СоздатьМенеджерЗаписи();
			Запись.КатегорияНовостей         = ТекущаяСтрока.КатегорияНовостей;
			Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
			Если ИспользоватьНомерОбластиДанных = Истина Тогда
				Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяСтрока.НомерОбластиДанных;
			КонецЕсли;
		Запись.Удалить();
	КонецЦикла;

КонецПроцедуры

// Удаляет значения отбора (пользовательского).
// На основании этих данных потом будет рассчитываться видимость новостей.
// При записи данных в модели сервиса в неразделенном режиме необходимо заполнять "НомерОбласти" в ЗначенияОтборов.
// Можно последовательно удалить много значений отборов, а потом вызвать "ОбработкаНовостей.ПриИзмененииЗначенийОтборовПользовательских".
//
// Параметры:
//  ЗначенияОтборов - ТаблицаЗначений - описание см. ЗначенияОтборов_Пользовательские().
//
Процедура УдалитьПрограммноеЗначениеОтбора_Пользовательский(ЗначенияОтборов) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ИспользоватьНомерОбластиДанных = Ложь;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ИспользоватьНомерОбластиДанных = Истина;
		КонецЕсли;
	КонецЕсли;

	// Наличие необходимых колонок в параметре "ЗначенияОтборов" НЕ проверяется.
	Для Каждого ТекущаяСтрока Из ЗначенияОтборов Цикл
		Запись = РегистрыСведений.ЗначенияКатегорийПользовательские.СоздатьМенеджерЗаписи();
			Запись.Пользователь              = ТекущаяСтрока.Пользователь;
			Запись.КатегорияНовостей         = ТекущаяСтрока.КатегорияНовостей;
			Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
			Если ИспользоватьНомерОбластиДанных = Истина Тогда
				Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяСтрока.НомерОбластиДанных;
			КонецЕсли;
		Запись.Удалить();
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РаботаСоЗначениямиОтборов_ПолучениеЗначений

// Возвращает текущие значения категорий (общие) для отборов новостей.
//
// Параметры:
//  КатегорияНовостей  - ПланВидовХарактеристикСсылка.КатегорииНовостей, Строка, Неопределено - Категория для отбора или ее код.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ЗначенияОтборов_Общие().
//
Функция ПолучитьПрограммноеЗначениеОтбора_Общий(
			КатегорияНовостей = Неопределено) Экспорт

	ТипСтрока            = Тип("Строка");
	ТипКатегорияНовостей = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей");

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
		|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей,
		|	Рег.ДатаОбновления            КАК ДатаОбновления,
		|	Рег.УсловиеВыполнено          КАК УсловиеВыполнено
		|ИЗ
		|	РегистрСведений.ЗначенияКатегорийОбщие КАК Рег
		|ГДЕ
		|	&МетаУсловиеКатегорияНовостей
		|";

	Если ТипЗнч(КатегорияНовостей) = ТипСтрока Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "Рег.КатегорияНовостей.Код = &УсловиеКатегорияНовостей");
		Запрос.УстановитьПараметр("УсловиеКатегорияНовостей", КатегорияНовостей);
	ИначеЕсли ТипЗнч(КатегорияНовостей) = ТипКатегорияНовостей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "Рег.КатегорияНовостей = &УсловиеКатегорияНовостей");
		Запрос.УстановитьПараметр("УсловиеКатегорияНовостей", КатегорияНовостей);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "ИСТИНА");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить(); // ПолучитьПрограммноеЗначениеОтбора_Общий.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Иначе
		Результат = ЗначенияОтборов_Общие(); // Пустая таблица.
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает текущие значения категорий (для области данных) для отборов новостей.
//
// Параметры:
//  КатегорияНовостей  - ПланВидовХарактеристикСсылка.КатегорииНовостей, Строка, Неопределено - Категория для отбора или ее код;
//  НомерОбластиДанных - Число, Неопределено - номер области данных;
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ЗначенияОтборов_ДляОбластиДанных().
//
Функция ПолучитьПрограммноеЗначениеОтбора_ДляОбластиДанных(
			КатегорияНовостей = Неопределено,
			НомерОбластиДанных = Неопределено) Экспорт

	ТипСтрока            = Тип("Строка");
	ТипКатегорияНовостей = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей");
	ТипЧисло             = Тип("Число");

	ИспользоватьНомерОбластиДанных = Ложь;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ИспользоватьНомерОбластиДанных = Истина;
		КонецЕсли;
	КонецЕсли;

	Если (ИспользоватьНомерОбластиДанных = Истина) Тогда
		Если (ТипЗнч(НомерОбластиДанных) = ТипЧисло)
				И (НомерОбластиДанных > 0) Тогда
			// Все нормально.
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В модели сервиса метод [%1] разрешено вызывать:
					| - или в разделенном режиме
					| - или необходимо передать положительное число в параметре НомерОбластиДанных.'"),
				"ОбработкаНовостей.ПолучитьПрограммноеЗначениеОтбора_ДляОбластиДанных");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	&МетаВыбрать_ПолеДляМоделиСервиса,
		|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
		|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей,
		|	Рег.ДатаОбновления            КАК ДатаОбновления,
		|	Рег.УсловиеВыполнено          КАК УсловиеВыполнено
		|ИЗ
		|	РегистрСведений.ЗначенияКатегорийДляОбластиДанных КАК Рег
		|ГДЕ
		|	&МетаУсловиеКатегорияНовостей
		|	И &МетаУсловиеНомерОбластиДанных
		|";

	Если ТипЗнч(КатегорияНовостей) = ТипСтрока Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "Рег.КатегорияНовостей.Код = &УсловиеКатегорияНовостей");
		Запрос.УстановитьПараметр("УсловиеКатегорияНовостей", КатегорияНовостей);
	ИначеЕсли ТипЗнч(КатегорияНовостей) = ТипКатегорияНовостей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "Рег.КатегорияНовостей = &УсловиеКатегорияНовостей");
		Запрос.УстановитьПараметр("УсловиеКатегорияНовостей", КатегорияНовостей);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "ИСТИНА");
	КонецЕсли;

	Если ИспользоватьНомерОбластиДанных = Истина Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "Рег.ОбластьДанныхВспомогательныеДанные КАК НомерОбластиДанных,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &МетаУсловиеНомерОбластиДанных", "И Рег.ОбластьДанныхВспомогательныеДанные = &УсловиеНомерОбластиДанных");
		Запрос.УстановитьПараметр("УсловиеНомерОбластиДанных", НомерОбластиДанных);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &МетаУсловиеНомерОбластиДанных", "");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить(); // ПолучитьПрограммноеЗначениеОтбора_ДляОбластиДанных.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Иначе
		Результат = ЗначенияОтборов_ДляОбластиДанных(); // Пустая таблица.
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает текущие значения категорий (пользовательские) для отборов новостей.
//
// Параметры:
//  КатегорияНовостей  - ПланВидовХарактеристикСсылка.КатегорииНовостей, Строка, Неопределено - Категория для отбора или ее код;
//  Пользователь       - СправочникСсылка.Пользователи - пользователь;
//  НомерОбластиДанных - Число, Неопределено - номер области данных;
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ЗначенияОтборов_Пользовательские().
//
Функция ПолучитьПрограммноеЗначениеОтбора_Пользовательский(
			КатегорияНовостей = Неопределено,
			Пользователь = Неопределено,
			НомерОбластиДанных = Неопределено) Экспорт

	ТипСтрока            = Тип("Строка");
	ТипКатегорияНовостей = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей");
	ТипЧисло             = Тип("Число");
	ТипПользователь      = Тип("СправочникСсылка.Пользователи");

	ИспользоватьНомерОбластиДанных = Ложь;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ИспользоватьНомерОбластиДанных = Истина;
		КонецЕсли;
	КонецЕсли;

	Если (ИспользоватьНомерОбластиДанных = Истина) Тогда
		Если (ТипЗнч(НомерОбластиДанных) = ТипЧисло)
				И (НомерОбластиДанных > 0) Тогда
			// Все нормально.
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В модели сервиса метод [%1] разрешено вызывать:
					| - или в разделенном режиме
					| - или необходимо передать положительное число в параметре НомерОбластиДанных.'"),
				"ОбработкаНовостей.ПолучитьПрограммноеЗначениеОтбора_Пользовательский");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	&МетаВыбрать_ПолеДляМоделиСервиса,
		|	Рег.Пользователь              КАК Пользователь,
		|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
		|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей,
		|	Рег.ДатаОбновления            КАК ДатаОбновления,
		|	Рег.УсловиеВыполнено          КАК УсловиеВыполнено
		|ИЗ
		|	РегистрСведений.ЗначенияКатегорийПользовательские КАК Рег
		|ГДЕ
		|	&МетаУсловиеКатегорияНовостей
		|	И &МетаУсловиеНомерОбластиДанных
		|	И &МетаУсловиеПользователь
		|";

	Если ТипЗнч(КатегорияНовостей) = ТипСтрока Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "Рег.КатегорияНовостей.Код = &УсловиеКатегорияНовостей");
		Запрос.УстановитьПараметр("УсловиеКатегорияНовостей", КатегорияНовостей);
	ИначеЕсли ТипЗнч(КатегорияНовостей) = ТипКатегорияНовостей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "Рег.КатегорияНовостей = &УсловиеКатегорияНовостей");
		Запрос.УстановитьПараметр("УсловиеКатегорияНовостей", КатегорияНовостей);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "ИСТИНА");
	КонецЕсли;

	Если ИспользоватьНомерОбластиДанных = Истина Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "Рег.ОбластьДанныхВспомогательныеДанные КАК НомерОбластиДанных,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &МетаУсловиеНомерОбластиДанных", "И Рег.ОбластьДанныхВспомогательныеДанные = &УсловиеНомерОбластиДанных");
		Запрос.УстановитьПараметр("УсловиеНомерОбластиДанных", НомерОбластиДанных);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &МетаУсловиеНомерОбластиДанных", "");
	КонецЕсли;

	Если ТипЗнч(Пользователь) = ТипПользователь Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &МетаУсловиеПользователь", "Рег.Пользователь = &УсловиеПользователь");
		Запрос.УстановитьПараметр("УсловиеПользователь", Пользователь);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &МетаУсловиеПользователь", "");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить(); // ПолучитьПрограммноеЗначениеОтбора_Пользовательский.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Иначе
		Результат = ЗначенияОтборов_Пользовательские(); // Пустая таблица.
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВзаимодействиеСБСП

// Процедура-обработчик перехода с другой программы, например с БухгалтерияБазовая на БухгалтерияПРОФ.
// В случае перехода с другой программы надо будет загрузить новости по новой программе (БухгалтерияПРОФ) за 1 месяц,
//   для этого необходимо отредактировать данные регистра сведений ДатыЗагрузкиПоследнихНовостей.
// Должна вызываться или вручную, или с помощью функциональности БСП (см. ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики)).
//
Процедура ПриПереходеСДругойПрограммы() Экспорт

	// 1. Сбросить настройки последней загрузки новостей, чтобы новости по новой программе загрузились за 1 месяц.
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Рег.ЛентаНовостей                        КАК ЛентаНовостей,
		|	Рег.ДатаЗагрузкиПоследнихНовостей        КАК ДатаЗагрузкиПоследнихНовостей,
		|	Рег.КоличествоНеудачПриЗагрузкеНовостей  КАК КоличествоНеудачПриЗагрузкеНовостей,
		|	Рег.ДатаПоследнейПопыткиЗагрузкиНовостей КАК ДатаПоследнейПопыткиЗагрузкиНовостей
		|ИЗ
		|	РегистрСведений.ДатыЗагрузкиПоследнихНовостей КАК Рег
		|ГДЕ
		|	Рег.ДатаЗагрузкиПоследнихНовостей > &ОграничениеДатыЗагрузкиПоследнихНовостей
		|";

	Запрос.УстановитьПараметр("ОграничениеДатыЗагрузкиПоследнихНовостей", '00020101'); // 1 января 0002 года
	РезультатЗапроса = Запрос.Выполнить(); // ПриПереходеСДругойПрограммы.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.ДатаЗагрузкиПоследнихНовостей = ДобавитьМесяц(Запись.ДатаЗагрузкиПоследнихНовостей, -1);
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

	// 2. Пересчитать отборы.
	// Т.к. переход с одной конфигурации на другую сопровождается вызовом всех процедур обновления конфигурации,
	//  то явно вызывать пересчет отборов для новостей не нужно - он вызовется автоматически при обновлении конфигурации.

	// 3. Обновить классификаторы.
	// Принудительное обновление классификаторов не выполняется - оно автоматически сработает в течение суток.

	// 4. Выполнение прочих переопределяемых действий.
	ОбработкаНовостейПереопределяемый.ПриПереходеСДругойПрограммы();

КонецПроцедуры

#КонецОбласти

#Область КонтекстныеНовости

// Процедура выполняет все необходимые действия для управления контекстными новостями.
// Должна вызываться из ПриСозданииНаСервере().
// Она используется в том случае, если выбрана стратегия расчета списка контекстных новостей в ПриСозданииНаСервере.
//
// Параметры:
//  Форма                                    - ФормаКлиентскогоПриложения - форма, в которой необходимо включить
//                                              механизм контекстных новостей;
//  ИдентификаторМетаданных                  - Строка - Идентификатор метаданных, должен совпадать с таким же
//                                              идентификатором в самой новости;
//  ИдентификаторФормы                       - Строка - Идентификатор формы, должен совпадать с таким же
//                                              идентификатором в самой новости;
//  НастройкиОтображенияНовостей             - Структура, Неопределено - структура настроек для создания
//                                              кнопки / подменю / панели новостей
//                                             или Неопределено, если кнопку / подменю / панель создавать не надо. Ключи:
//   * ЭлементФормыДляРазмещенияКомандыНовостей - ЭлементФормы - Группа формы, в которой необходимо разместить
//                                              создаваемую кнопку / подменю / панели новостей;
//   * ТипЗначенияКомандыНовостей               - Тип, Неопределено - может быть Тип("КнопкаФормы")
//                                              (для создания кнопки Новости)
//                                                или Тип("ГруппаФормы") для создания подменю новостей,
//                                                или Неопределено, если не надо создавать кнопку / подменю.
//                                                По-умолчанию берется Тип("ГруппаФормы") для создания подменю новостей.
//   * СпособОтображенияПанелиКонтекстныхНовостей - Строка, Неопределено - "СписокНовостей", "Листание", "Автолистание", "Скрыть".
//  ЗаголовокФормыКонтекстныхНовостей        - Строка - заголовок формы, которая появляется при нажатии на кнопку
//                                              показа списка контекстных новостей из формы;
//  СоздаватьРеквизитФормы                   - Булево - Истина, если надо динамически создать реквизит
//                                              "Новости" произвольного типа;
//  НастройкиЗаполненияНовостями             - Структура - структура, определяющая стратегию получения
//                                              и хранения новостей;
//                                             Можно получать новости на сервере в ПриСозданииНаСервере - это будет
//                                              тратить время при каждом открытии формы, но позволит реализовать
//                                              сценарий показа новостей при наступлении клиентских
//                                              событий (ПриИзмененииГалочки, ПриУстановкеДатыБольше2014 и т.п.);
//                                             Можно получать новости в обработчике ожидания после открытия формы,
//                                              также будет задействован клиентский кэш. Это сократит время открытия
//                                              формы, но некоторые сценарии станут недоступны.
//                                             Ключи:
//   * ПолучатьНовостиНаСервере                - Булево - если Истина, то новости будут получаться в этой процедуре.
//                                               По-умолчанию = Истина;
//   * ХранитьМассивНовостейТолькоНаСервере    - Булево - если Истина, то на клиента не передается массив новостей.
//                                             Это сокращает размер передаваемых данных, но не дает возможность
//                                              показывать новости по другим событиям, отличным от ПриОткрытии.
//                                             Имеет смысл только если ПолучатьНовостиНаСервере = Истина.
//                                              По-умолчанию = Ложь.
//   * ПолучатьКатегорииНовостей               - Булево - если Истина, то в реквизите формы будут также
//                                               сохраняться категории новостей.
//                                             Это может быть полезно для реализации особенного отбора новостей,
//                                               который невозможно реализовать с помощью
//                                               регистров сведений ОтборыПоЛентамНовостей*;
//  ИдентификаторыСобытийПриОткрытии         - Строка, Массив из Строка - строка или массив строк идентификаторов
//                                              события "ПриОткрытии". Если передано какое-то значение,
//                                              то будет подсчитано количество очень важных контекстных
//                                              новостей. И если это количество > 0, то открывающая форма инициирует
//                                              открытие формы просмотра таких новостей.
//
Процедура КонтекстныеНовости_ПриСозданииНаСервере(
				Форма,
				ИдентификаторМетаданных,
				ИдентификаторФормы,
				НастройкиОтображенияНовостей = Неопределено,
				ЗаголовокФормыКонтекстныхНовостей = "",
				СоздаватьРеквизитФормы = Истина,
				НастройкиЗаполненияНовостями = Неопределено,
				ИдентификаторыСобытийПриОткрытии = "ПриОткрытии") Экспорт

#Область Инициализация

	ТипСтруктура = Тип("Структура");

	ПолучатьНовостиНаСервере             = Истина;
	ХранитьМассивНовостейТолькоНаСервере = Ложь;
	ПолучатьКатегорииНовостей            = Ложь;
	Если ТипЗнч(НастройкиЗаполненияНовостями) = ТипСтруктура Тогда
		НастройкиЗаполненияНовостями.Свойство("ПолучатьНовостиНаСервере", ПолучатьНовостиНаСервере);
		НастройкиЗаполненияНовостями.Свойство("ХранитьМассивНовостейТолькоНаСервере", ХранитьМассивНовостейТолькоНаСервере);
		НастройкиЗаполненияНовостями.Свойство("ПолучатьКатегорииНовостей", ПолучатьКатегорииНовостей);
	КонецЕсли;
	ПолучатьНовостиНаСервере             = ?(ПолучатьНовостиНаСервере = Ложь, Ложь, Истина);
	ХранитьМассивНовостейТолькоНаСервере = ?(ХранитьМассивНовостейТолькоНаСервере = Истина, Истина, Ложь);
	ПолучатьКатегорииНовостей            = ?(ПолучатьКатегорииНовостей = Истина, Истина, Ложь);

	ОписаниеНовостей = Новый Структура;
		ОписаниеНовостей.Вставить("Новости", Новый Массив); // Массив структур.
		ОписаниеНовостей.Вставить("ЗаголовокФормыКонтекстныхНовостей", ЗаголовокФормыКонтекстныхНовостей);
		ОписаниеНовостей.Вставить("Метаданные", ИдентификаторМетаданных);
		ОписаниеНовостей.Вставить("Форма", ИдентификаторФормы);
		ОписаниеНовостей.Вставить("ТекущаяНовость", Справочники.Новости.ПустаяСсылка());
		ОписаниеНовостей.Вставить("КоличествоНовостей", 0);
		ОписаниеНовостей.Вставить("КоличествоНепрочитанныхНовостей", 0);
		ОписаниеНовостей.Вставить("КоличествоВажныхНовостейПриОткрытии", 0);
		ОписаниеНовостей.Вставить("КоличествоОченьВажныхНовостейПриОткрытии", 0);
		ОписаниеНовостей.Вставить("КоличествоПостоянныхНовостей", 0);
		ОписаниеНовостей.Вставить("ПолучатьНовостиНаСервере", ПолучатьНовостиНаСервере);
		ОписаниеНовостей.Вставить("ХранитьМассивНовостейТолькоНаСервере", ХранитьМассивНовостейТолькоНаСервере);
		ОписаниеНовостей.Вставить("АдресМассиваНовостей", "");
		ОписаниеНовостей.Вставить("МассивСтруктурВажныхНовостей", Неопределено); // Должно быть Неопределено, если новостей для показа нет.
		ОписаниеНовостей.Вставить("МассивСтруктурПостоянныхНовостей", Неопределено); // Должно быть Неопределено, если постоянных новостей нет.
		// Заполняется на клиенте в процессе работы в случае, если новости хранятся на сервере
		//  и приходят оповещения о прочтении новостей.
		ОписаниеНовостей.Вставить("СписокНовостейИзменениеПризнака_Прочтена", Новый СписокЗначений);
		// Заполняется на клиенте в процессе работы в случае, если новости хранятся на сервере
		//  и приходят оповещения об изменении оповещения для важных и очень важных новостей.
		ОписаниеНовостей.Вставить("СписокНовостейИзменениеПризнака_ОповещениеВключено", Новый СписокЗначений);
		// Панель контекстных новостей.
		ОписаниеНовостей.Вставить("НовостиДляПанелиКонтекстныхНовостей", Новый Массив); // Массив структур.
		ОписаниеНовостей.Вставить("КоличествоНовостейДляПанелиКонтекстныхНовостей", 0);
		ОписаниеНовостей.Вставить("ИндексТекущейНовостиДляПанелиКонтекстныхНовостей", 0);
		ОписаниеНовостей.Вставить("СпособОтображенияПанелиКонтекстныхНовостей", "Скрыть");
		ОписаниеНовостей.Вставить("ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей", Ложь);
		ОписаниеНовостей.Вставить("ШрифтПанелиКонтекстныхНовостей", Новый Шрифт());
		ОписаниеНовостей.Вставить("ВидимостьПанелиКонтекстныхНовостей", Истина); // ПанельКонтекстныхНовостей.
		ОписаниеНовостей.Вставить("ДатаОтключенияПанелиКонтекстныхНовостей", '00010101'); // ПанельКонтекстныхНовостей.
		ОписаниеНовостей.Вставить("ДатаПоследнейНовостиПанелиКонтекстныхНовостей", '00010101'); // ПанельКонтекстныхНовостей.

	Форма.Новости = ОписаниеНовостей;

	МассивСтруктурНовостей = Новый Массив;

#КонецОбласти

#Область Проверки

	Если НЕ ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда
		// Панель контекстных новостей.
		// Если в форме планировалось использовать панель контекстных новостей, то найти и скрыть группу для их отображения.
		Если ТипЗнч(НастройкиОтображенияНовостей) = ТипСтруктура Тогда
			СпособОтображенияПанелиКонтекстныхНовостей = Неопределено;
			НастройкиОтображенияНовостей.Свойство("СпособОтображенияПанелиКонтекстныхНовостей", СпособОтображенияПанелиКонтекстныхНовостей);
			// Панель контекстных новостей.
			Если (СпособОтображенияПанелиКонтекстныхНовостей = "СписокНовостей")
					ИЛИ (СпособОтображенияПанелиКонтекстныхНовостей = "Листание")
					ИЛИ (СпособОтображенияПанелиКонтекстныхНовостей = "Автолистание")
					ИЛИ (СпособОтображенияПанелиКонтекстныхНовостей = "Скрыть") Тогда
				НайденнаяКнопка = Форма.Элементы.Найти("ФормаВидимостьПанелиКонтекстныхНовостей");
				Если НайденнаяКнопка <> Неопределено Тогда
					НайденнаяКнопка.Видимость = Ложь;
				КонецЕсли;
				НайденнаяГруппа = Форма.Элементы.Найти("ПанельКонтекстныхНовостей");
				Если НайденнаяГруппа <> Неопределено Тогда
					НайденнаяГруппа.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;

#КонецОбласти

#Область Обработка

	Если СоздаватьРеквизитФормы = Истина Тогда
		ДобавляемыеРеквизиты = Новый Массив;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Новости", Новый ОписаниеТипов(Новый Массив))); // Произвольный тип
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;

	Если ПолучатьНовостиНаСервере = Истина Тогда
		НастройкиПолученияНовостей = Новый Структура("ПолучатьКатегорииНовостей", ПолучатьКатегорииНовостей);
		СтруктураКонтекстныхНовостей = ПолучитьКонтекстныеНовостиДляФормы(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			ЗаголовокФормыКонтекстныхНовостей,
			ИдентификаторыСобытийПриОткрытии,
			НастройкиПолученияНовостей);

		МассивСтруктурНовостей = СтруктураКонтекстныхНовостей.Новости;

		ЗаполнитьЗначенияСвойств(
			Форма.Новости,
			СтруктураКонтекстныхНовостей,
			"КоличествоНовостей, КоличествоНепрочитанныхНовостей, КоличествоОченьВажныхНовостейПриОткрытии,
				|КоличествоПостоянныхНовостей, КоличествоВажныхНовостейПриОткрытии,
				|МассивСтруктурВажныхНовостей, МассивСтруктурПостоянныхНовостей");

		Если ХранитьМассивНовостейТолькоНаСервере = Истина Тогда
			Форма.Новости.АдресМассиваНовостей = ПоместитьВоВременноеХранилище(
				СтруктураКонтекстныхНовостей.Новости,
				Форма.УникальныйИдентификатор); // Удалять после закрытия новости
			Форма.Новости.Новости = Неопределено;
		Иначе
			Форма.Новости.Новости = МассивСтруктурНовостей;
		КонецЕсли;

	КонецЕсли;

	// Для информации: добавление кнопки происходит примерно в 5 раз быстрее, чем добавление подменю.
	// Можно создавать одновременно кнопку / подменю и панель контекстных новостей.
	СозданнаяКнопкаИлиПодменюНовости = Неопределено;
	Если ТипЗнч(НастройкиОтображенияНовостей) = ТипСтруктура Тогда
		ЭлементФормыДляРазмещенияКомандыНовостей   = Неопределено;
		ТипЗначенияКомандыНовостей                 = Неопределено;
		СпособОтображенияПанелиКонтекстныхНовостей = Неопределено;
		НастройкиОтображенияНовостей.Свойство("ЭлементФормыДляРазмещенияКомандыНовостей", ЭлементФормыДляРазмещенияКомандыНовостей);
		НастройкиОтображенияНовостей.Свойство("ТипЗначенияКомандыНовостей", ТипЗначенияКомандыНовостей);
		НастройкиОтображенияНовостей.Свойство("СпособОтображенияПанелиКонтекстныхНовостей", СпособОтображенияПанелиКонтекстныхНовостей);
		Форма.Новости.Вставить("СпособОтображенияПанелиКонтекстныхНовостей", СпособОтображенияПанелиКонтекстныхНовостей);
		// Кнопка / подменю.
		Если ТипЗначенияКомандыНовостей = Тип("КнопкаФормы") Тогда
			СозданнаяКнопкаИлиПодменюНовости = ОбработкаНовостейКлиентСервер.ДобавитьКнопкуПросмотраСпискаНовостей(
				Форма,
				ЭлементФормыДляРазмещенияКомандыНовостей, // Куда выводить кнопку
				МассивСтруктурНовостей); // Массив структур (таблица) новостей, для определения количества новостей. Пустой, если на сервере не происходит заполнение новостями.
		ИначеЕсли ТипЗначенияКомандыНовостей = Тип("ГруппаФормы") Тогда
			// Если новости НЕ были получены на сервере или НЕ хранятся на клиенте (а хранится только адрес временного хранилища),
			// то нельзя создавать подменю, т.к. на клиенте невозможно будет обработать нажатия на элементы подменю.
			Если (ПолучатьНовостиНаСервере = Ложь)
					ИЛИ (ХранитьМассивНовостейТолькоНаСервере = Истина) Тогда
				СозданнаяКнопкаИлиПодменюНовости = ОбработкаНовостейКлиентСервер.ДобавитьКнопкуПросмотраСпискаНовостей(
					Форма,
					ЭлементФормыДляРазмещенияКомандыНовостей, // Куда выводить кнопку
					МассивСтруктурНовостей); // Массив структур (таблица) новостей, для определения количества новостей. Пустой, если на сервере не происходит заполнение новостями.
			Иначе
				СозданнаяКнопкаИлиПодменюНовости = ОбработкаНовостейКлиентСервер.ДобавитьПодменюПросмотраСпискаНовостей(
					Форма,
					ЭлементФормыДляРазмещенияКомандыНовостей, // Куда выводить кнопку
					МассивСтруктурНовостей); // Массив структур (таблица) новостей, для создания пунктов меню. Пустой, если на сервере не происходит заполнение новостями.
			КонецЕсли;
		Иначе
			// Ничего не создавать.
		КонецЕсли;
		// Панель контекстных новостей.
		// Новости должны быть уже получены. В противном случае не отображать панель контекстных новостей.
		Если (ПолучатьНовостиНаСервере = Истина) Тогда
			Если (СпособОтображенияПанелиКонтекстныхНовостей = "СписокНовостей")
					ИЛИ (СпособОтображенияПанелиКонтекстныхНовостей = "Листание")
					ИЛИ (СпособОтображенияПанелиКонтекстныхНовостей = "Автолистание")
					ИЛИ (СпособОтображенияПанелиКонтекстныхНовостей = "Скрыть") Тогда

				Если Форма.Элементы.Найти("ФормаВидимостьПанелиКонтекстныхНовостей") = Неопределено Тогда
					Форма.Новости.Вставить("ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей", Ложь);
				Иначе
					Форма.Новости.Вставить("ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей", Истина);
				КонецЕсли;
				Если Форма.Элементы.Найти("ПанельКонтекстныхНовостей_СписокНовостей") = Неопределено Тогда
					Форма.Новости.Вставить("ШрифтПанелиКонтекстныхНовостей", Новый Шрифт);
				Иначе
					Форма.Новости.Вставить("ШрифтПанелиКонтекстныхНовостей", Форма.Элементы.ПанельКонтекстныхНовостей_СписокНовостей.Шрифт);
				КонецЕсли;

				// Панель контекстных новостей должна быть вставлена в форму со всеми элементами управления,
				//  т.к. программное добавление элементов управления занимает очень много времени.
				// Обязательные элементы управления:
				// - ПанельКонтекстныхНовостей (группа формы);
				// - ПанельКонтекстныхНовостей_КартинкаСтрелкаВлево (декорация картинка);
				// - ПанельКонтекстныхНовостей_КартинкаНовостиИнформация (декорация картинка);
				// - ПанельКонтекстныхНовостей_СписокНовостей (декорация форматированная строка);
				// - ПанельКонтекстныхНовостей_КартинкаСтрелкаВправо (декорация картинка);
				// - ПанельКонтекстныхНовостей_КартинкаВесьСписок (декорация картинка);
				// - ПанельКонтекстныхНовостей_КартинкаЗакрыть (декорация картинка).
				// Необязательные элементы управления:
				// - ФормаВидимостьПанелиКонтекстныхНовостей (кнопка формы для команды "ВидимостьПанелиКонтекстныхНовостей").

				СостояниеПанелиКонтекстныхНовостей = ПолучитьСостояниеПанелиКонтекстныхНовостей(ИдентификаторМетаданных, ИдентификаторФормы);
				Форма.Новости.Вставить("ВидимостьПанелиКонтекстныхНовостей", (СостояниеПанелиКонтекстныхНовостей.Видимость = Истина));
				Форма.Новости.Вставить("ДатаОтключенияПанелиКонтекстныхНовостей", СостояниеПанелиКонтекстныхНовостей.ДатаОтключения);
				Форма.Новости.Вставить("ДатаПоследнейНовостиПанелиКонтекстныхНовостей", СостояниеПанелиКонтекстныхНовостей.ДатаПоследнейНовости);

				Если (СпособОтображенияПанелиКонтекстныхНовостей = "Скрыть") Тогда
					// Если выбран вариант "Скрыть", то скрыть и саму панель и кнопку управления видимостью панели.
					// Также для этого варианта не надо заполнять таблицу новостей.
					Форма.Элементы.ПанельКонтекстныхНовостей.Видимость = Ложь;
					Если Форма.Новости.ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей = Истина Тогда
						Форма.Элементы.ФормаВидимостьПанелиКонтекстныхНовостей.Видимость = Ложь;
					КонецЕсли;
				Иначе

					// Таблица потом будет преобразована в массив структур.
					ТаблицаНовостейДляПанелиКонтекстныхНовостей = Новый ТаблицаЗначений;
					ТаблицаНовостейДляПанелиКонтекстныхНовостей.Колонки.Добавить("НомерСтрокиНовости", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
					ТаблицаНовостейДляПанелиКонтекстныхНовостей.Колонки.Добавить("Новость", Новый ОписаниеТипов("СправочникСсылка.Новости"));
					ТаблицаНовостейДляПанелиКонтекстныхНовостей.Колонки.Добавить("НовостьНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
					ТаблицаНовостейДляПанелиКонтекстныхНовостей.Колонки.Добавить("НовостьПодзаголовок", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
					ТаблицаНовостейДляПанелиКонтекстныхНовостей.Колонки.Добавить("ДатаПубликации", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
					ТаблицаНовостейДляПанелиКонтекстныхНовостей.Колонки.Добавить("Важность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
					ТаблицаНовостейДляПанелиКонтекстныхНовостей.Колонки.Добавить("Актуальность", Новый ОписаниеТипов("Булево"));
					ТаблицаНовостейДляПанелиКонтекстныхНовостей.Колонки.Добавить("ПоказыватьВФормеОбъекта", Новый ОписаниеТипов("Булево"));
					ТаблицаНовостейДляПанелиКонтекстныхНовостей.Колонки.Добавить("ЭтоПостояннаяНовость", Новый ОписаниеТипов("Булево"));
					ТаблицаНовостейДляПанелиКонтекстныхНовостей.Колонки.Добавить("Прочтена", Новый ОписаниеТипов("Булево"));
					ТаблицаНовостейДляПанелиКонтекстныхНовостей.Колонки.Добавить("ОповещениеВключено", Новый ОписаниеТипов("Булево"));
					ТаблицаНовостейДляПанелиКонтекстныхНовостей.Колонки.Добавить("ДатаНачалаОповещения", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));

					СтандартнаяОбработка = Истина;
					ОбработкаНовостейПереопределяемый.ПанельКонтекстныхНовостей_ВыбратьНовости(
						Форма,
						ТаблицаНовостейДляПанелиКонтекстныхНовостей,
						СтандартнаяОбработка);
					Если СтандартнаяОбработка <> Ложь Тогда
						// Новости берутся из Форма.Новости.Новости (он же МассивСтруктурНовостей).
						// Стандартный алгоритм такой:
						// - Брать только новости с установленными признаками "Актуальность" и "ПоказыватьВФормеОбъекта".
						// - Сортировать так:
						//   - вначале "ЭтоПостояннаяНовость" = Истина, по убыванию по "ДатаПубликации";
						//   - далее "ЭтоПостояннаяНовость" = Ложь, по убыванию по "ДатаПубликации".
						// В привязке к метаданным новость может встречаться несколько раз (например, быть привязанной к нескольким событиям),
						//  но в панели контекстных новостей надо отображать только одну новость - первую.
						Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
							Если (ТекущаяНовость.Актуальность = Истина)
									И (ТекущаяНовость.ПоказыватьВФормеОбъекта = Истина) Тогда
								НайденнаяСтрока = ТаблицаНовостейДляПанелиКонтекстныхНовостей.Найти(ТекущаяНовость.Новость, "Новость");
								Если НайденнаяСтрока = Неопределено Тогда
									НоваяСтрока = ТаблицаНовостейДляПанелиКонтекстныхНовостей.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяНовость);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если ТаблицаНовостейДляПанелиКонтекстныхНовостей.Количество() > 0 Тогда
							ТаблицаНовостейДляПанелиКонтекстныхНовостей.Сортировать("ЭтоПостояннаяНовость УБЫВ, ДатаПубликации УБЫВ");
						КонецЕсли;
					КонецЕсли;

					Форма.Новости.Вставить("КоличествоНовостейДляПанелиКонтекстныхНовостей", ТаблицаНовостейДляПанелиКонтекстныхНовостей.Количество());
					Форма.Новости.Вставить("ИндексТекущейНовостиДляПанелиКонтекстныхНовостей", 0);

					Если ТаблицаНовостейДляПанелиКонтекстныхНовостей.Количество() > 0 Тогда
						Форма.Новости.Вставить("НовостиДляПанелиКонтекстныхНовостей",
							ОбщегоНазначения.ТаблицаЗначенийВМассив(
								ТаблицаНовостейДляПанелиКонтекстныхНовостей)); // Массив структур.
					КонецЕсли;

					// Панель контекстных новостей может быть скрыта пользователем.
					// Также она может быть скрыта, если нет новостей.
					Если (Форма.Новости.КоличествоНовостейДляПанелиКонтекстныхНовостей = 0) Тогда
						Форма.Новости.Вставить("ВидимостьПанелиКонтекстныхНовостей", Ложь);
					КонецЕсли;

					ОбработкаНовостейКлиентСервер.ПанельКонтекстныхНовостей_ОтобразитьНовости(Форма);

				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

#КонецОбласти

#Область Завершение

	ОбработкаНовостейПереопределяемый.ДополнительноОбработатьФормуПриСозданииНаСервере(
		Форма,
		НастройкиЗаполненияНовостями,
		ИдентификаторыСобытийПриОткрытии,
		СозданнаяКнопкаИлиПодменюНовости,
		МассивСтруктурНовостей);

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область Настройки

// Установка настроек чтения новостей.
// Работает только в коробке или в неразделенном сеансе в модели сервиса.
//
// Параметры:
//  Настройки - Структура - структура настроек. Список ключей см. в ХранилищеНастроек.НастройкиНовостей.ПровестиВалидациюНастроек
//    для НастройкиПоказаНовостейНастроенныеАдминистратором.
//
Процедура УстановитьНастройкиПоказаНовостей(Настройки) Экспорт

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если вошли в область данных, то выдать исключение.
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ТекстСообщения = НСтр("ru='УстановитьНастройкиПоказаНовостей: в разделенном сеансе нельзя установить настройки показа новостей.'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	УстановитьПривилегированныйРежим(Истина);

	Если (ТипЗнч(Настройки) = ТипСтруктура)
			И (Настройки.Свойство("СписокНовостей_ИнтервалАвтообновления")) Тогда
		ХранилищаНастроек.НастройкиНовостей.Сохранить(
			"НастройкиПоказаНовостейНастроенныеАдминистратором", // Идентификатор.
			"",
			Настройки);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПоискДанных

// Функция возвращает ссылку на ленту новостей по ее коду.
//
// Параметры:
//  ЛентаНовостейКод - Строка - код ленты новостей.
//
// Возвращаемое значение:
//   СправочникСсылка.ЛентыНовостей - ссылка на ленту новостей или пустая ссылка, если нет ленты новостей с таким кодом.
//
Функция ПолучитьЛентуНовостейПоКоду(ЛентаНовостейКод) Экспорт

	Возврат ОбработкаНовостейПовтИсп.ПолучитьЛентуНовостейПоКоду(ЛентаНовостейКод);

КонецФункции

// Возвращает массив отключенных лент новостей.
// Вынесено из Хранилища настроек.НастройкиНовостей, т.к. выполняется очень часто для контекстных новостей.
// При изменении настроек лент новостей необходимо сбросить кэш с помощью ОбновитьПовторноИспользуемыеЗначения().
//
// Параметры:
//  ИмяПользователяИБ - Строка - Имя пользователя, для которого необходимо рассчитать данные.
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.ЛентыНовостей - Массив отключенных лент новостей.
//
Функция ПолучитьОтключенныеЛентыНовостей(ИмяПользователяИБ) Экспорт

	Возврат ОбработкаНовостейПовтИсп.ПолучитьОтключенныеЛентыНовостей(ИмяПользователяИБ);

КонецФункции

#КонецОбласти

#Область ФункциональныеОпции

// Функция возвращает результат - можно ли работать с новостями.
// Это результат функциональной опции "РазрешенаРаботаСНовостями"
//   И доступны нужные роли
//   И это не внешний пользователь.
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если есть возможность работы с новостями.
//
Функция РазрешенаРаботаСНовостями() Экспорт

	Возврат ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями();

КонецФункции

// Функция возвращает результат - можно ли работать с новостями текущему пользователю.
// Это результат функциональной опции "РазрешенаРаботаСНовостями"
//   И доступны нужные роли
//   И это не внешний пользователь
//   И задан параметр сеанса ТекущийПользователь (т.е. мы не зашли в базу с отключенным списком пользователей).
// Если сеанс запущен без разделителей (пользователь АдминистраторСистемы зашел в область данных),
//   то для него разрешить работу с новостями.
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если есть возможность работы с новостями текущему пользователю.
//
Функция РазрешенаРаботаСНовостямиТекущемуПользователю() Экспорт

	Возврат ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю();

КонецФункции

// Функция возвращает результат - можно ли работать с новостями через интернет.
// Это результат функциональной опции "РазрешенаРаботаСНовостямиЧерезИнтернет"
//   И доступны нужные роли
//   И это не внешний пользователь.
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если разрешена работа с новостями через интернет, ЛОЖЬ, если можно работать только с локальными новостями.
//
Функция РазрешенаРаботаСНовостямиЧерезИнтернет() Экспорт

	Возврат ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет();

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИБ

// Возвращает список процедур-обработчиков обновления ИБ для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Вызывается перед началом обновления данных ИБ.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ""; // Только для начального заполнения.
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Запускается при первом запуске, в общих данных. Установка констант, загрузка стандартных значений, сброс регистров сведений (общих данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ""; // Только для начального заполнения.
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Запускается при первом запуске, для каждой области данных. Установка настроек пользователей (разделенных данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	// Обработчики, выполняемые при переходе на новую версию.
	//

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, в общих данных. Установка констант, загрузка стандартных значений, сброс регистров сведений (общих данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на любую новую версию, для каждой области данных. Установка настроек пользователей (разделенных данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.4.1"; // Сработает также при переходе с 2.1.3.* на 2.1.4.*
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_4";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, в общих данных. Установка констант, загрузка стандартных значений, сброс регистров сведений (общих данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.4.1"; // Сработает также при переходе с 2.1.3.* на 2.1.4.*
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_4";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, для каждой области данных. Установка настроек пользователей (разделенных данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.5.1"; // Сработает также при переходе с 2.1.4.* на 2.1.5.*
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_5";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, в общих данных. Установка констант, загрузка стандартных значений, сброс регистров сведений (общих данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.5.1"; // Сработает также при переходе с 2.1.4.* на 2.1.5.*
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_5";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, для каждой области данных. Установка настроек пользователей (разделенных данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.2.3.4";
	Обработчик.Процедура           = "ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_2_3";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, в общих данных. Установка констант, загрузка стандартных значений, сброс регистров сведений (общих данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

КонецПроцедуры

#КонецОбласти

#Область ВзаимодействиеСБСП

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт

	Типы.Добавить(Метаданные.Справочники.ЗначенияКатегорийНовостей);
	Типы.Добавить(Метаданные.Справочники.ЛентыНовостей);
	Типы.Добавить(Метаданные.Справочники.Новости);
	Типы.Добавить(Метаданные.ПланыВидовХарактеристик.КатегорииНовостей);

КонецПроцедуры

// Заполняет массив типов, исключаемых из выгрузки и загрузки данных.
//
// Параметры:
//  Типы - Массив(Типы).
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт

	// При выгрузке загрузке данных коробка -> сервис и сервис -> коробка никакие данные,
	//  относящиеся к подсистеме Новости не должны выгружаться и загружаться.
	Типы.Добавить(Метаданные.Константы.НастройкиНовостей);
	Типы.Добавить(Метаданные.Константы.РазрешенаРаботаСНовостями);
	Типы.Добавить(Метаданные.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет);
	Типы.Добавить(Метаданные.Справочники.ЗначенияКатегорийНовостей);
	Типы.Добавить(Метаданные.Справочники.ЛентыНовостей);
	Типы.Добавить(Метаданные.Справочники.Новости);
	Типы.Добавить(Метаданные.ПланыВидовХарактеристик.КатегорииНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.ВсеОбновленияНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.ДатыЗагрузкиПоследнихНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.ЗначенияКатегорийОбщие);
	Типы.Добавить(Метаданные.РегистрыСведений.ЗначенияКатегорийДляОбластиДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.ЗначенияКатегорийПользовательские);
	Типы.Добавить(Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий);
	Типы.Добавить(Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные);
	Типы.Добавить(Метаданные.РегистрыСведений.КатегорииНовостейПростые);
	Типы.Добавить(Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные);
	Типы.Добавить(Метаданные.РегистрыСведений.НастройкиПользователейБИП);
	Типы.Добавить(Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейОбщие);
	Типы.Добавить(Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейДляОбластиДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейПользовательские);
	Типы.Добавить(Метаданные.РегистрыСведений.ОтключенныеЛентыНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.ОтключенныеЛентыНовостейДляОбластиДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.ОтключенныеПанелиКонтекстныхНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.ПериодическиеСвойстваНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.ПривязкаНовостейКМетаданным);
	Типы.Добавить(Метаданные.РегистрыСведений.РазрешенныеДляРедактированияЛентыНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие);
	Типы.Добавить(Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские);
	Типы.Добавить(Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся);
	Типы.Добавить(Метаданные.РегистрыСведений.СвойстваНовостей);
	Типы.Добавить(Метаданные.РегистрыСведений.СостоянияНовостей);

КонецПроцедуры

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
// Для задания обработчиков параметров сеанса следует использовать шаблон:
// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
//
// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
//             что один обработчик будет вызван для инициализации всех параметров сеанса
//             с именем, начинающимся на слово НачалоИмениПараметраСеанса.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт

	Обработчики.Вставить("ПараметрыОкруженияБИП_Новости", "ОбработкаНовостей.УстановкаПараметровСеанса");

КонецПроцедуры

// См. описание этой же процедуры в РаботаВБезопасномРежимеПереопределяемый
//  из СтандартныеПодсистемы.БазоваяФункциональность.
//
// Параметры:
//	ЗапросыРазрешений - заполняемые разрешения.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"news.webits.1c.ru",
		443,
		НСтр("ru = 'Веб-сервисы получения новостей'"));

	НовыеРазрешения = Новый Массив;
		НовыеРазрешения.Добавить(Разрешение);
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));

КонецПроцедуры

// Пользователи с ролью РедакторНовостей могут редактировать неразделенные данные (Справочник.Новости, например).
// Поэтому эту роль необходимо добавить в список специальных ролей
//  в ПользователиПереопределяемый.ПриОпределенииНазначенияРолей.
// Для этого в ПользователиПереопределяемый.ПриОпределенииНазначенияРолей необходимо прописать
//  вызов ОбработкаНовостей.ПриОпределенииНазначенияРолей(НазначениеРолей).
//
// Параметры:
//  НазначениеРолей - Структура - описание см. в ПользователиПереопределяемый.ПриОпределенииНазначенияРолей.
//
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт

	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.РедактированиеНовостей.Имя);

КонецПроцедуры

// Процедура устанавливает параметры сеанса для подсистемы Новости.
//
// Параметры:
//  ИмяПараметра           - Неопределено;
//  УстановленныеПараметры - Неопределено.
//
Процедура УстановкаПараметровСеанса(ИмяПараметра = Неопределено, УстановленныеПараметры = Неопределено) Экспорт

	Результат = Новый Структура;
		Результат.Вставить("ВерсияПлатформы", "");
		Результат.Вставить("ВерсияПродукта", "");
		Результат.Вставить("ИмяКонфигурации", "");
		Результат.Вставить("АдресWSDLОпределенияВебСервисаInformation", "https://news.webits.1c.ru/data/v1/classificators?wsdl");
		Результат.Вставить("СостояниеПриНачалеРаботыСистемы", Ложь);

		ВерсииПлатформы = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("PlatformVersion");
		Результат.Вставить("ВерсияПлатформы", ВерсииПлатформы[ВерсииПлатформы.Количество()-1].Значение); // Только полная версия платформы

		ВерсииПродукта = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductVersion");
		Результат.Вставить("ВерсияПродукта", ВерсииПродукта[ВерсииПродукта.Количество()-1].Значение); // Только полная версия продукта (конфигурации)

		// Определение условного имени конфигурации для получения новостей.
		ИмяКонфигурации = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы(); // ИмяКонфигурации (из метаданных), либо надо указать произвольное имя английскими буквами.
		ОбработкаНовостейПереопределяемый.ЗначениеПредопределеннойКатегории("ProductName", ИмяКонфигурации); // Обязательно изменить имя конфигурации.
		Результат.Вставить("ИмяКонфигурации", ИмяКонфигурации);

	Хранилище_ПараметрыОкруженияБИП_Новости = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(0));

	УстановитьПривилегированныйРежим(Истина);
		ПараметрыСеанса.ПараметрыОкруженияБИП_Новости = Хранилище_ПараметрыОкруженияБИП_Новости;
	УстановитьПривилегированныйРежим(Ложь);

	Если УстановленныеПараметры <> Неопределено Тогда
		УстановленныеПараметры.Добавить("ПараметрыОкруженияБИП_Новости");
	КонецЕсли;

КонецПроцедуры

#Область БСПНастройкиПрограммы

// Вызывается из обработчика ПриСозданииНаСервере() панели администрирования
// БСП, выполняется настройку отображения элементов управления для подсистем
// библиотеки ИПП.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма панели управления.
//
Процедура ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма) Экспорт

	Форма.Элементы.БИПГруппаНовости.Видимость = Пользователи.ЭтоПолноправныйПользователь(, Истина)
		И (Не ОбщегоНазначения.РазделениеВключено()
		Или Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	Если Форма.Элементы.БИПГруппаНовости.Видимость Тогда
		Форма.БИПВключитьРаботуСНовостями = Константы.РазрешенаРаботаСНовостями.Получить();
		Форма.Элементы.БИПУправлениеНовостями.Видимость =
			Форма.БИПВключитьРаботуСНовостями;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПриНачалеРаботыСистемы

// Процедура вызывается из модуля управляемого приложения,
//  затем ОбработкаНовостейКлиент.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостейВызовСервера.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостей.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостейПереопределяемый.ПриНачалеРаботыСистемы.
//
Процедура ПриНачалеРаботыСистемы() Экспорт

	ТипСтруктура = Тип("Структура");

	// 1. Установить параметр сеанса "ПараметрыОкруженияБИП_Новости", (означает, что происходит вызов "ПриНачалеРаботыСистемы"),
	//  чтобы константы не сбрасывали кэш повторно используемых значений.
	УстановитьПривилегированныйРежим(Истина);
		ПараметрыОкруженияБИП_Новости = ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.Получить();
		Если ТипЗнч(ПараметрыОкруженияБИП_Новости) = ТипСтруктура Тогда
			ПараметрыОкруженияБИП_Новости.Вставить("СостояниеПриНачалеРаботыСистемы", Истина);
		КонецЕсли;
		Хранилище_ПараметрыОкруженияБИП_Новости = Новый ХранилищеЗначения(ПараметрыОкруженияБИП_Новости, Новый СжатиеДанных(0));
		ПараметрыСеанса.ПараметрыОкруженияБИП_Новости = Хранилище_ПараметрыОкруженияБИП_Новости;
	УстановитьПривилегированныйРежим(Ложь);

	// 2. Проверять изменение версии платформы необходимо в нескольких случаях:
	// - старт клиентского приложения (если программа работает не в модели сервиса!),
	// - регулярная проверка (в режиме клиент-сервера предприятие могли не запускать долгое время после
	//     обновления платформы - например, после длительных выходных).
	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда // На текущий момент еще не установлен СтатусПодсистемы.
		Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
			// Внутри процедуры будет проверка на монопольный режим.
			ПроверитьИзменениеВерсииПлатформы();
		КонецЕсли;
	КонецЕсли;

	// 3. Установить СтатусПодсистемы, чтобы новости не всплывали, если отборы и другие свойства давно
	//  не пересчитывались (например, если базу долго не запускали).
	//  Индикатором, что базу долго не запускали может служить значение даты для вида обновления "Обновление периодических свойств"
	//   из регистра сведений ВсеОбновленияНовостей.
	//  Если периодические свойства не обновлялись более 5 суток, то установить
	//   состояние подсистемы "ТребуетсяПересчетОтборовПослеДлительногоОжидания".
	// Запуск имеет смысл только для файловой базы, т.к. считаем, что в клиент-серверном варианте все регламентные задания запускаются в срок.
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Если РазрешенаРаботаСНовостями() Тогда
			ТекущаяДатаДляПроверки   = ТекущаяУниверсальнаяДата() - 5*24*60*60; // 5 суток назад.
			ДатаПоследнегоОбновления = '00010101';
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	Рег.ДатаПоследнегоОбновления КАК ДатаПоследнегоОбновления
				|ИЗ
				|	РегистрСведений.ВсеОбновленияНовостей КАК Рег
				|ГДЕ
				|	Рег.ВидОбновления = &ВидОбновления
				|УПОРЯДОЧИТЬ ПО
				|	Рег.ДатаПоследнегоОбновления УБЫВ
				|";
			Запрос.УстановитьПараметр("ВидОбновления", "Обновление периодических свойств"); // Идентификатор.

			РезультатЗапроса = Запрос.Выполнить(); // ПриНачалеРаботыСистемы / Проверка ТребуетсяПересчетОтборовПослеДлительногоОжидания.
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Если Выборка.Следующий() Тогда
					ДатаПоследнегоОбновления = Выборка.ДатаПоследнегоОбновления;
				КонецЕсли;
			КонецЕсли;
			Если ТекущаяДатаДляПроверки >= ДатаПоследнегоОбновления Тогда
				УстановитьСостояниеПодсистемы("ТребуетсяПересчетОтборовПослеДлительногоОжидания");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='ОбработкаНовостей.ПриНачалеРаботыСистемы: прошло длительное время после последнего пересчета периодических реквизитов (%1).
						|Подсистема Новости переведена из состояния [Активна] в состояние [ТребуетсяПересчетОтборовПослеДлительногоОжидания].
						|Это не является ошибкой. Но важные и очень важные новости не будут всплывать, т.к. возможно, что они уже просрочены.
						|В самое ближайшее время будет произведен автоматический пересчет отборов и подсистема вернется в состояние [Активна].'"),
					Формат(ДатаПоследнегоОбновления, "ДЛФ=DT"));
				ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
					НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеПодсистемы'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
					УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
					Метаданные.Справочники.Новости, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// 4. Внешним пользователям не рекомендуется пользоваться подсистемой чтения новостей.
	// Никаких сообщений пользователю выводиться не будет - будет просто запись в журнале регистрации.
	ЭтоВнешнийПользовательСВозможностьюЧтениеНовостей();

	// 5. Переопределение.
	ОбработкаНовостейПереопределяемый.ПриНачалеРаботыСистемы();

	// 6. Сбросить параметр сеанса "ПараметрыОкруженияБИП_Новости" (означает, что вызов "ПриНачалеРаботыСистемы" завершен),
	//  чтобы константы начали сбрасывать кэш повторно используемых значений.
	УстановитьПривилегированныйРежим(Истина);
		ПараметрыОкруженияБИП_Новости = ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.Получить();
		Если ТипЗнч(ПараметрыОкруженияБИП_Новости) = ТипСтруктура Тогда
			ПараметрыОкруженияБИП_Новости.Вставить("СостояниеПриНачалеРаботыСистемы", Ложь);
		КонецЕсли;
		Хранилище_ПараметрыОкруженияБИП_Новости = Новый ХранилищеЗначения(ПараметрыОкруженияБИП_Новости, Новый СжатиеДанных(0));
		ПараметрыСеанса.ПараметрыОкруженияБИП_Новости = Хранилище_ПараметрыОкруженияБИП_Новости;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСоСтроками

// Функция возвращает строку цифр.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Строка.
//
Функция ВсеЦифры() Экспорт

	Результат = "0123456789";
	Возврат Результат;

КонецФункции

// Функция проверяет, все ли символы строки соответствуют разрешенным.
// Возвращает список встреченных запрещенных символов или пустой список, если ошибок нет.
//
// Параметры:
//  СтрокаДляПроверки  - Строка - строка для проверки;
//  РазрешенныеСимволы - Строка - строка со списком разрешенных символов.
//
// Возвращаемое значение:
//  Список значений - если пустой, значит ошибок нет, в противном случае, в него будут возвращены все неправильные символы.
//
Функция ПроверитьСтрокуНаЗапрещенныеСимволы(СтрокаДляПроверки, РазрешенныеСимволы) Экспорт

	СписокЗапрещенныхСимволов = Новый СписокЗначений;

	СтрокаДляПроверкиЛокальная = СокрЛП(СтрокаДляПроверки);

	Для С=1 По СтрДлина(СтрокаДляПроверкиЛокальная) Цикл
		Символ = Сред(СтрокаДляПроверкиЛокальная, С, 1);
		Если (СтрНайти(РазрешенныеСимволы, Символ) = 0) Тогда
			// Найден неразрешенный символ, добавить в список.
			Если СписокЗапрещенныхСимволов.НайтиПоЗначению(Символ) = Неопределено Тогда
				СписокЗапрещенныхСимволов.Добавить(Символ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат СписокЗапрещенныхСимволов;

КонецФункции

// Для целей отладки из файла возвращает первые несколько строк.
// Файл должен располагаться на сервере.
//
// Параметры:
//  ПолноеИмяФайла  - Строка - полное имя файла;
//  КоличествоСтрок - Число  - количество строк, которое необходимо прочитать (должно быть больше 0 и меньше 1000).
//
// Возвращаемое значение:
//   Строка - первые несколько строк файла.
//
Функция СодержимоеТекстовогоФайла(ПолноеИмяФайла, КоличествоСтрок = 10) Экспорт

	Результат = "";
	Если (КоличествоСтрок <= 0) ИЛИ (КоличествоСтрок > 1000) Тогда
		ЧислоСтрокДляСчитывания = 10;
	Иначе
		ЧислоСтрокДляСчитывания = КоличествоСтрок;
	КонецЕсли;

	Попытка
		ЧтениеТекстаЛокальное = Новый ЧтениеТекста;
		ЧтениеТекстаЛокальное.Открыть(ПолноеИмяФайла, "UTF-8", , , Ложь); // Открывать НЕ в монопольном режиме
		ДостигнутКонецФайла = Ложь;
		Пока (ЧислоСтрокДляСчитывания > 0) И (ДостигнутКонецФайла = Ложь) Цикл
			СтрокаИзФайла = ЧтениеТекстаЛокальное.ПрочитатьСтроку();
			ЧислоСтрокДляСчитывания = ЧислоСтрокДляСчитывания - 1;
			Если СтрокаИзФайла = Неопределено Тогда
				ДостигнутКонецФайла = Истина;
			Иначе
				Если ПустаяСтрока(Результат) Тогда
					Результат = СтрокаИзФайла;
				Иначе
					Результат = Результат + Символы.ПС + СтрокаИзФайла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При чтении файла с именем %1 произошла ошибка:
				|%2'"),
			ПолноеИмяФайла,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СоединениеССерверомНовостей

// Функция возвращает адрес wsdl-определения для веб-сервиса Information
//  (обновление стандартных списков для подсистемы новостей).
// Возврат простых строк (без расчетов) осуществляется быстрее из обычного модуля,
//  а не из модуля с использованием повторно используемых возвращаемых значений.
//
// Возвращаемое значение:
//  Строка - адрес wsdl-определения веб-сервиса обновления классификаторов.
//
Функция ПолучитьАдресWSDLОпределенияВебСервисаInformation() Экспорт

	// Попробовать получить данные из ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.
	// В случае неудачи вернуть значение по-умолчанию.
	ЗначениеПоУмолчанию = "https://news.webits.1c.ru/data/v1/classificators?wsdl";
	Результат = ЗначениеПоУмолчанию;
	ТипСтруктура = Тип("Структура");
	ПараметрыОкруженияБИП_Новости = ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.Получить();
	Если ТипЗнч(ПараметрыОкруженияБИП_Новости) = ТипСтруктура Тогда
		Если ПараметрыОкруженияБИП_Новости.Свойство("АдресWSDLОпределенияВебСервисаInformation") Тогда
			Если НЕ ПустаяСтрока(ПараметрыОкруженияБИП_Новости.АдресWSDLОпределенияВебСервисаInformation) Тогда
				Результат = ПараметрыОкруженияБИП_Новости.АдресWSDLОпределенияВебСервисаInformation;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает объект HTTPСоединение или Неопределено (в случае ошибок).
//
// Параметры:
//  ИмяСервера         - Строка - имя сервера, с которым необходимо соединиться;
//  Протокол           - Строка - протокол соединения, может быть "http", "https", "file".
//                         Также может быть = "", если ЛокальнаяЛентаНовостей = Истина;
//  Логин              - Строка;
//  Пароль             - Строка;
//  HTTPСоединение     - Сюда вернется объект HTTPСоединение или Неопределено (в случае ошибок);
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
// Возвращаемое значение:
//  Булево.
//
Функция СоединитьсяССерверомНовостей(ИмяСервера, Протокол, Логин, Пароль, HTTPСоединение, КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "СоединитьсяССерверомНовостей"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ЛогШаговВыполнения = Новый Массив;
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Соединение с сервером новостей'"));

		СоединениеУстановлено = Ложь;

		Если ((ВРег(Протокол) = ВРег("http")))
				ИЛИ ((ВРег(Протокол) = ВРег("https"))) Тогда // file?

			// Прокси - брать из БСП.
			// Настройки прокси в БСП хранятся как для сервера (в виде соответствия в константе НастройкаПроксиСервера),
			//  так и для клиента (хранятся в хранилище настроек для каждого пользователя).
			Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("http://");

			// Таймаут и количество попыток соединения - брать из настроек.
			НастройкиПолученияНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
				"НастройкиПолученияНовостей",
				,
				,
				""); // Для всех пользователей

			ПопыткаСоединения = 0;
			Пока (СоединениеУстановлено <> Истина) И (ПопыткаСоединения < НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокСоединения) Цикл

				// В имени сервера через двоеточие может идти порт (например, news1c.ru:8081), выделить его.
				ГдеДвоеточие = СтрНайти(ИмяСервера, ":");
				Если ГдеДвоеточие > 0 Тогда
					ИмяСервера_Сервер = СокрЛП(Лев(ИмяСервера, ГдеДвоеточие - 1));
					Попытка
						ИмяСервера_Порт = Число(Прав(ИмяСервера, СтрДлина(ИмяСервера) - ГдеДвоеточие));
					Исключение
						ИмяСервера_Порт = Неопределено;
						ЛогШаговВыполнения.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Попытка %1 / %2: Ошибка определения порта из имени сервера %3 (%4). Лента новостей будет пропущена.'"),
								ПопыткаСоединения,
								НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокСоединения,
								ИмяСервера,
								Протокол));
						// Пропустить ленту новостей.
						Продолжить;
					КонецПопытки;
				Иначе
					ИмяСервера_Сервер = СокрЛП(ИмяСервера);
					ИмяСервера_Порт   = Неопределено;
				КонецЕсли;

				Попытка
					ПопыткаСоединения = ПопыткаСоединения + 1;

					ЛогШаговВыполнения.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Попытка %1 / %2: Протокол %3, Имя сервера %4, Порт %5'"),
							ПопыткаСоединения,
							НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокСоединения,
							Протокол,
							ИмяСервера_Сервер,
							ИмяСервера_Порт));

					// Параметр "Таймаут" поддерживается начиная с 8.2.16.*.
					HTTPСоединение = Новый HTTPСоединение(
						ИмяСервера_Сервер, // Сервер
						ИмяСервера_Порт, // Порт
						Логин,
						Пароль,
						Прокси,
						НастройкиПолученияНовостей.HTTPСоединениеТаймаутСоединенияСекунд, // Таймаут
						?(ВРег(Протокол) = ВРег("https"), ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(), Неопределено)); // ЗащищенноеСоединение
					СоединениеУстановлено = Истина;
				Исключение
					ЛогШаговВыполнения.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Попытка %1 / %2: Ошибка подключения к серверу %3 (%4) для получения новостей по причине:
								|%5'"),
							ПопыткаСоединения,
							НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокСоединения,
							ИмяСервера,
							Протокол,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
					// Пропустить ленту новостей
				КонецПопытки;
			КонецЦикла;

		Иначе

			ЛогШаговВыполнения.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Протокол получения новостей %1 отличается от http и https. Соединение с сервером новостей не устанавливалось.'"),
					Протокол));

		КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		СтрСоединить(ЛогШаговВыполнения, Символы.ПС),
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка новостей'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Загрузка новостей. Соединение с сервером новостей'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Соединение с сервером новостей'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

	Возврат СоединениеУстановлено;

КонецФункции

#КонецОбласти

#Область ИнтерактивнаяРаботаСТекстомНовости

// Процедура заполняет параметры Действие и СписокПараметров для объекта
//  новости по переданному уникальному идентификатору гиперссылки.
//
// Параметры:
//  Объект           - Данные формы коллекция, ДокументСсылка.Новости, СправочникСсылка.Новости;
//  УИНДействия      - Строка;
//  Действие         - Строка;
//  СписокПараметров - СписокЗначений.
//
Процедура ПодготовитьПараметрыНавигационнойСсылки(Знач Объект, УИНДействия, Действие, СписокПараметров) Экспорт

	Действие = "";
	СписокПараметров = Новый СписокЗначений;

	// В поле ХТМЛ документа гиперссылка 1C:idAction (Действие) преобразуется 1c:idAction (меняется регистр букв),
	//  поэтому поиск по точному соответствию невозможен - надо сравнивать вручную, преобразуя все к верхнему регистру.
	Для каждого ТекущееДействие Из Объект.Действия Цикл
		Если ВРег(УИНДействия) = ВРег(ТекущееДействие.УИНДействия) Тогда
			Действие = ТекущееДействие.Действие;
			// В поле ХТМЛ документа гиперссылка 1C:idAction (Действие) преобразуется 1c:idAction (меняется регистр букв),
			//  поэтому поиск по точному соответствию невозможен - надо сравнивать вручную, преобразуя все к верхнему регистру.
			Для каждого ТекущийПараметр Из Объект.ПараметрыДействий Цикл
				Если ВРег(УИНДействия) = ВРег(ТекущийПараметр.УИНДействия) Тогда
					СписокПараметров.Добавить(ТекущийПараметр.ЗначениеПараметра, ТекущийПараметр.Параметр);
				КонецЕсли;
			КонецЦикла;
			Прервать; ////! Или сделать последовательную обработку, если для одного идентификатора указано несколько действий?
		КонецЕсли;
	КонецЦикла;

	ОбработкаНовостейПереопределяемый.ДополнительноПодготовитьПараметрыНавигационнойСсылки(Объект, УИНДействия, Действие, СписокПараметров);

КонецПроцедуры

// Функция возвращает ХТМЛ или простой текст новости по ссылке на новость.
//
// Параметры:
//  Новости              - СправочникСсылка.Новости, Структура, Массив из СправочникСсылка.Новости - данные новости или списка новостей;
//  ПараметрыОтображения - Структура, Неопределено - параметры для отображения новости. Список возможных параметров:
//    * ОтображатьЗаголовок - Булево.
//
// Возвращаемое значение:
//  Строка - текст новости / новостей в формате HTML.
//
Функция ПолучитьХТМЛТекстНовостей(Новости, ПараметрыОтображения = Неопределено) Экспорт

	ТипМассив = Тип("Массив");

	Если ТипЗнч(Новости) = ТипМассив Тогда
		// ПовтИсп для массива - запрещено.
		Результат = Справочники.Новости.ПолучитьХТМЛТекстНовостей(Новости, ПараметрыОтображения);
	Иначе
		Результат = ОбработкаНовостейПовтИсп.ПолучитьХТМЛТекстНовостей(Новости, ПараметрыОтображения);
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Настройки

// Получение настроек чтения новостей.
//
// Возвращаемое значение:
//  Произвольное.
//
Функция ПолучитьНастройкиПоказаНовостейНастроенныеАдминистратором() Экспорт

	Результат = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПоказаНовостейНастроенныеАдминистратором", // Идентификатор.
		"");

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСоСпискамиНовостейИКлассификаторов

// Процедура возвращает массивы структур очень важных и просто важных новостей
//  с неотключенными напоминаниями, т.е. новостей, которые удовлетворяют настройкам отборов пользователей,
//  не просрочены, напоминания не отключены ранее, и с включенным свойством "Важность" = 1 или 2.
// Если включено разделение данных, то такой список должен получаться только при включенном разделителе.
// При вызове из неразделенного сеанса в модели сервиса будут возвращены пустые значения.
//
// Параметры:
//  ОченьВажныеНовости - Массив из Структура - массив структур, в который будут возвращены новости с важностью "Очень важная", где:
//    * Новость                        - СправочникСсылка.Новости - ссылка на новость;
//    * НовостьУникальныйИдентификатор - УникальныйИдентификатор - УИН от ссылки на новость;
//    * НовостьНаименование            - Строка - заголовок новости;
//    * НовостьПодзаголовок            - Строка - подзаголовок новости;
//    * НовостьКодЛентыНовостей        - Строка - код ленты новостей;
//    * ОповещениеВключено             - Булево - Признак, что оповещение включено;
//    * ИконкаНовости                  - Неопределено - всегда Неопределено;
//  ВажныеНовости      - Массив из Структура - массив структур, в который будут возвращены новости с важностью "Важная", где:
//    * Новость                        - СправочникСсылка.Новости - ссылка на новость;
//    * НовостьУникальныйИдентификатор - УникальныйИдентификатор - УИН от ссылки на новость;
//    * НавигационнаяСсылка            - Строка - навигационная ссылка на новость;
//    * НовостьНаименование            - Строка - заголовок новости;
//    * НовостьПодзаголовок            - Строка - подзаголовок новости;
//    * НовостьКодЛентыНовостей        - Строка - код ленты новостей;
//    * ОповещениеВключено             - Булево - Признак, что оповещение включено;
//    * ИконкаНовости                  - Картинка, Неопределено - иконка новости для оповещения пользователю;
//  ДополнительныеПараметры - Произвольный - произвольные параметры;
//  СтандартнаяОбработка    - Булево - признак выполнения стандартной обработки.
//
Процедура ПолучитьНовостиСНапоминаниями(
			ОченьВажныеНовости,
			ВажныеНовости,
			ДополнительныеПараметры,
			СтандартнаяОбработка) Экспорт

#Область ИнициализацияМетода

	ТипХранилищеЗначения = Тип("ХранилищеЗначения");
	ТипДвоичныеДанные    = Тип("ДвоичныеДанные");

	ОченьВажныеНовости = Новый Массив;
	ВажныеНовости      = Новый Массив;

	// Возможна ситуация, когда файловую информационную базу долго не открывали и долго не запускались регламентные задачи пересчета отборов.
	// В этом случае подсистема Новости переходит из состояния "Активна" в "ТребуетсяПересчетОтборовПослеДлительногоОжидания".
	// Все подключенные обработчики должны оставаться подключенными, но им поступают пустые списки новостей до тех пор,
	//  пока состояние подсистемы Новости не вернется в "Активна", или пока не пройдет достаточное время.

	СостояниеПодсистемы = ПолучитьСостояниеПодсистемы();

#КонецОбласти

#Область Проверки

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем
		//  без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

#КонецОбласти

#Область Обработка

	Если (СостояниеПодсистемы = "Активна")
			ИЛИ (СостояниеПодсистемы = "СейчасЗагружаютсяНовости") Тогда

		СтруктураНастроекПоказаНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
			"НастройкиПоказаНовостей",
			"");

		// Ленты новостей могут быть отключены как самим пользователем,
		//  так и администратором в настройках самой ленты новостей.
		МассивОтключенныхЛентНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
			"ОтключенныеЛентыНовостей", // КлючОбъекта
			""); // КлючНастроек, пока не обрабатывается

		// Выбор из справочника Новостей.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "
			|// {Блок запроса новостей-исключений. Начало
			|// Временная таблица с новостями-исключениями, которые не проходят по отборам.
			|// Фильтр по редко меняющимся отборам (версия платформы, версия продукта, продукт, пометка удаления, дата завершения, ...)
			|ВЫБРАТЬ
			|	Рег.Новость КАК Новость
			|ПОМЕСТИТЬ ВТ_НовостиИсключения
			|ИЗ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК Рег
			|ГДЕ
			|	Рег.РезультатОтбора = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ // Можно не реализовывать уникальность через ОБЪЕДИНИТЬ, т.к. проверяется вхождение новости в этот список.
			|
			|// Фильтр по общим отборам.
			|ВЫБРАТЬ
			|	Рег.Новость
			|ИЗ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_Общие КАК Рег
			|//ГДЕ // В регистре и так хранятся только исключения.
			|//	Рег.РезультатОтбора = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ // Можно не реализовывать уникальность через ОБЪЕДИНИТЬ, т.к. проверяется вхождение новости в этот список.
			|
			|// Фильтр по общим для области данных отборам.
			|ВЫБРАТЬ
			|	Рег.Новость
			|ИЗ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных КАК Рег
			|//ГДЕ // В регистре и так хранятся только исключения.
			|//	Рег.РезультатОтбора = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ // Можно не реализовывать уникальность через ОБЪЕДИНИТЬ, т.к. проверяется вхождение новости в этот список.
			|
			|// Фильтр по пользовательским отборам.
			|ВЫБРАТЬ
			|	Рег.Новость
			|ИЗ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_Пользовательские КАК Рег
			|ГДЕ
			|	Рег.Пользователь = &ТекущийПользователь
			|	// И Рег.РезультатОтбора = ЛОЖЬ // В регистре и так хранятся только исключения.
			|
			|ОБЪЕДИНИТЬ ВСЕ // Можно не реализовывать уникальность через ОБЪЕДИНИТЬ, т.к. проверяется вхождение новости в этот список.
			|
			|// Фильтр по только что полученным новостям, по которым еще не рассчитаны отборы.
			|ВЫБРАТЬ
			|	Рег.Новость
			|ИЗ
			|	РегистрСведений.СвойстваНовостей КАК Рег
			|ГДЕ
			|	Рег.ТребуетсяПересчетОтборов = ИСТИНА
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Новость
			|
			|// Блок запроса новостей-исключений. Конец}
			|;
			|
			|// Временная таблица с преобразованными периодическими значениями (актуальность, важность).
			|ВЫБРАТЬ
			|	Спр.Ссылка                                               КАК Новость,
			|	Спр.УИННовости                                           КАК НовостьУИННовости,
			|	Спр.Наименование                                         КАК НовостьНаименование,
			|	Спр.Подзаголовок                                         КАК НовостьПодзаголовок,
			|	Спр.ЛентаНовостей                                        КАК ЛентаНовостей,
			|	Спр.ЛентаНовостей.Код                                    КАК ЛентаНовостейКод,
			|	ЕСТЬNULL(РегСвойства.ВажностьОбщая, 0)                   КАК Важность,
			|	ЕСТЬNULL(РегСвойства.Актуальность, ИСТИНА)               КАК Актуальность,
			|	ЕСТЬNULL(РегСостояния.Прочтена, ЛОЖЬ)                    КАК Прочтена,
			|	ЕСТЬNULL(РегСостояния.ОповещениеВключено, ИСТИНА)        КАК ОповещениеВключено,
			|	ЕСТЬNULL(РегСостояния.ДатаНачалаОповещения, &ПустаяДата) КАК ДатаНачалаОповещения,
			|	ЕСТЬNULL(РегСостояния.УдаленаИзСпискаНовостей, ЛОЖЬ)     КАК УдаленаИзСпискаНовостей
			|ПОМЕСТИТЬ ВТ_НовостиТребующиеПрочтения
			|ИЗ
			|	Справочник.Новости КАК Спр
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СостоянияНовостей КАК РегСостояния
			|		ПО
			|			РегСостояния.Новость = Спр.Ссылка
			|			И РегСостояния.Пользователь = &ТекущийПользователь
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ПериодическиеСвойстваНовостей КАК РегСвойства
			|		ПО
			|			РегСвойства.Новость = Спр.Ссылка
			|ГДЕ
			|	Спр.ПометкаУдаления = ЛОЖЬ // Обязательная проверка новости на пометку удаления
			|
			|	// {Фильтры по категориям, версиям}
			|	И НЕ Спр.Ссылка В (
			|		ВЫБРАТЬ
			|			ВТ_НовостиИсключения.Новость
			|		ИЗ
			|			ВТ_НовостиИсключения
			|	)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Важность,
			|	Актуальность
			|;
			|
			|// Основной запрос - важные и очень важные новости, требующие прочтения.
			|ВЫБРАТЬ
			|	Спр.Новость                                   КАК Новость,
			|	Спр.НовостьУИННовости                         КАК УИННовости,
			|	Спр.Важность                                  КАК Важность, // С учетом даты сброса важности
			|	Спр.НовостьНаименование                       КАК НовостьНаименование,
			|	Спр.НовостьПодзаголовок                       КАК НовостьПодзаголовок,
			|	Спр.ЛентаНовостейКод                          КАК НовостьКодЛентыНовостей,
			|	Спр.Прочтена                                  КАК Прочтена,
			|	Спр.ОповещениеВключено                        КАК ОповещениеВключено,
			|	ЕСТЬNULL(ИконкиНовостей.Данные, НЕОПРЕДЕЛЕНО) КАК ИконкаНовости
			|ИЗ
			|	ВТ_НовостиТребующиеПрочтения КАК Спр
			|
			|	// Для важных новостей можно вывести свою картинку с идентификатором ИконкаВажнойНовостиДляОповещенияПользователя.
			|	// ВАЖНО: Если картинок с таким идентификатором больше одной, то будет выведено несколько новостей.
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Новости.БинарныеДанные КАК ИконкиНовостей
			|	ПО
			|		Спр.Новость = ИконкиНовостей.Ссылка
			|		И ИконкиНовостей.УИН = &ИдентификаторИконкиНовости
			|
			|ГДЕ
			|	Спр.Важность В (1, 2) // Очень важная, важная
			|
			|	И ( // Не просроченные новости
			|		Спр.Актуальность = ИСТИНА
			|		ИЛИ &ОтборНовостей_ТолькоАктивные = ЛОЖЬ
			|	)
			|
			|	И ( // С включенным (неотключенным) оповещением
			|		(Спр.ОповещениеВключено = ИСТИНА)
			|		И (Спр.ДатаНачалаОповещения <= &ТекущаяУниверсальнаяДата)
			|	)
			|
			|	И ( // Не удалена пользователем в корзину
			|		Спр.УдаленаИзСпискаНовостей = ЛОЖЬ
			|	)
			|
			|	// Только из доступных (включенных и видимых лент новостей).
			|	И НЕ Спр.ЛентаНовостей В (&МассивОтключенныхЛентНовостей)
			|
			|";
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
		Иначе
			Запрос.УстановитьПараметр("ТекущийПользователь", Справочники.Пользователи.ПустаяСсылка());
		КонецЕсли;
		Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
		Запрос.УстановитьПараметр("ОтборНовостей_ТолькоАктивные", СтруктураНастроекПоказаНовостей.ОтборНовостей_ТолькоАктивные);
		Запрос.УстановитьПараметр("МассивОтключенныхЛентНовостей", МассивОтключенныхЛентНовостей);
		Запрос.УстановитьПараметр("ПустаяДата", '00010101');
		Запрос.УстановитьПараметр("ИдентификаторИконкиНовости", "ИконкаВажнойНовостиДляОповещенияПользователя"); // Идентификатор.

		Результат = Запрос.Выполнить(); // ПолучитьНовостиСНапоминаниями.

		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				Если Выборка.Важность = 1 Тогда // Очень важная
					ОписаниеНовости = Новый Структура;
						ОписаниеНовости.Вставить("Новость", Выборка.Новость);
						ОписаниеНовости.Вставить("НовостьУникальныйИдентификатор", Выборка.Новость.УникальныйИдентификатор());
						ОписаниеНовости.Вставить("УИННовости", Выборка.УИННовости);
						ОписаниеНовости.Вставить("НовостьНаименование", Выборка.НовостьНаименование);
						ОписаниеНовости.Вставить("НовостьПодзаголовок", Выборка.НовостьПодзаголовок);
						ОписаниеНовости.Вставить("НовостьКодЛентыНовостей", Выборка.НовостьКодЛентыНовостей);
						ОписаниеНовости.Вставить("ОповещениеВключено", Выборка.ОповещениеВключено);
						ОписаниеНовости.Вставить("ИконкаНовости", Неопределено); // Для очень важных новостей не используется.
						ОченьВажныеНовости.Добавить(ОписаниеНовости);
				Иначе // Если Выборка.Важность = 2, важная
					ОписаниеНовости = Новый Структура;
						ОписаниеНовости.Вставить("Новость", Выборка.Новость);
						ОписаниеНовости.Вставить("НовостьУникальныйИдентификатор", Выборка.Новость.УникальныйИдентификатор());
						ОписаниеНовости.Вставить("УИННовости", Выборка.УИННовости);
						ОписаниеНовости.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(Выборка.Новость));
						ОписаниеНовости.Вставить("НовостьНаименование", Выборка.НовостьНаименование);
						ОписаниеНовости.Вставить("НовостьПодзаголовок", Выборка.НовостьПодзаголовок);
						ОписаниеНовости.Вставить("НовостьКодЛентыНовостей", Выборка.НовостьКодЛентыНовостей);
						ОписаниеНовости.Вставить("ОповещениеВключено", Выборка.ОповещениеВключено);
						ОписаниеНовости.Вставить("ИконкаНовости", Неопределено); // Для очень важных новостей не используется.
						Если Выборка.ИконкаНовости <> Неопределено Тогда
							Если ТипЗнч(Выборка.ИконкаНовости) = ТипХранилищеЗначения Тогда
								ДвоичныеДанныеДляИконки = Выборка.ИконкаНовости.Получить();
								Если ТипЗнч(ДвоичныеДанныеДляИконки) = ТипДвоичныеДанные Тогда
									// Двоичные данные можно отобразить?
									ИконкаДляОтображения = Новый Картинка(ДвоичныеДанныеДляИконки, Истина);
									Если ИконкаДляОтображения.Вид <> ВидКартинки.Пустая Тогда
										ОписаниеНовости.Вставить("ИконкаНовости", ИконкаДляОтображения); // Неопределено = "БиблиотекаКартинок.ВажностьНовостиВажная".
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					ВажныеНовости.Добавить(ОписаниеНовости);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

#КонецОбласти

#Область Завершение

	ОбработкаНовостейПереопределяемый.ПолучитьНовостиСНапоминаниями(
		ОченьВажныеНовости,
		ВажныеНовости,
		ДополнительныеПараметры,
		СтандартнаяОбработка);

#КонецОбласти

КонецПроцедуры

// Функция находит новость по ее УИН и, если передан параметр, то по ленте новостей
// Если найдено несколько новостей с таким кодом, то открывается.
//
// Параметры:
//  УИННовости       - Строка - уникальный код новости (реквизит УИННовости);
//  ЛентаНовостейКод - Строка - код ленты новостей (реквизит Код).
//
Функция ПолучитьНовостиПоУИН(УИННовости, ЛентаНовостейКод = Неопределено) Экспорт

	Результат = Новый СписокЗначений;

	ТипСтрока = Тип("Строка");

	Если ТипЗнч(ЛентаНовостейКод) = ТипСтрока
			И НЕ ПустаяСтрока(ЛентаНовостейКод) Тогда
		ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоКоду(ЛентаНовостейКод, Ложь);
	Иначе
		ЛентаНовостей = Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.ЛентаНовостей КАК ЛентаНовостей,
		|	Спр.Ссылка        КАК Новость
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.УИННовости = &УИННовости
		|	И &МетаУсловиеЛентаНовостей
		|";
	Запрос.УстановитьПараметр("УИННовости", УИННовости);

	Если (ТипЗнч(ЛентаНовостей) = Тип("СправочникСсылка.ЛентыНовостей"))
			И (НЕ ЛентаНовостей.Пустая()) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеЛентаНовостей", "Спр.ЛентаНовостей = &ЛентаНовостей");
		Запрос.УстановитьПараметр("ЛентаНовостей", ЛентаНовостей);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеЛентаНовостей", "ИСТИНА");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить(); // ПолучитьНовостиПоУИН.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// Выгрузить колонку "Новость" и загрузить ее в список значений.
		Результат.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Новость"));
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура сбрасывает дату последней загрузки новостей и, при необходимости,
//  помечает загруженные ранее новости на удаление.
//
// Параметры:
//  ЛентыНовостей             - СправочникСсылка.ЛентаНовостей или Массив - Лента новостей или Массив лент новостей,
//                              у которой необходимо сбросить дату последней загрузки новостей;
//  ПомечатьНовостиНаУдаление - Булево - Если ИСТИНА, то пометить загруженные ранее новости на удаление.
//
Процедура СбросДатыПоследнейУспешнойЗагрузкиНовостей(ЛентыНовостей, ПомечатьНовостиНаУдаление = Ложь) Экспорт

	ТипМассив = Тип("Массив");

	ЛокальныеЛентыНовостей = Новый Массив;
	Если ТипЗнч(ЛентыНовостей) = Тип("СправочникСсылка.ЛентыНовостей") Тогда
		ЛокальныеЛентыНовостей.Добавить(ЛентыНовостей);
	ИначеЕсли ТипЗнч(ЛентыНовостей) = ТипМассив Тогда
		ЛокальныеЛентыНовостей = ЛентыНовостей;
	Иначе
		Возврат;
	КонецЕсли;

	Для Каждого ТекущаяЛентаНовостей Из ЛокальныеЛентыНовостей Цикл
		Если НЕ ТекущаяЛентаНовостей.Пустая() Тогда
			// Очистка даты последней успешной загрузки.
			Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
			Запись.ЛентаНовостей = ТекущаяЛентаНовостей;
			Запись.Удалить();
			// Пометка всех новостей из этой ленты на удаление.
			Если ПомечатьНовостиНаУдаление = Истина Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	Спр.Ссылка КАК Новость
					|ИЗ
					|	Справочник.Новости КАК Спр
					|ГДЕ
					|	Спр.ЛентаНовостей = &ЛентаНовостей
					|	И Спр.ПометкаУдаления = ЛОЖЬ
					|";
				Запрос.УстановитьПараметр("ЛентаНовостей", ТекущаяЛентаНовостей);
				РезультатЗапроса = Запрос.Выполнить(); // СбросДатыПоследнейУспешнойЗагрузкиНовостей.
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						НовостьОбъект = Выборка.Новость.ПолучитьОбъект();
						НовостьОбъект.УстановитьПометкуУдаления(Истина);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура сбрасывает дату последней загрузки классификаторов.
//
// Параметры:
//  Списки - ПланВидовХарактеристикСсылка.КатегорииНовостей, Строка или Массив - Классификатор
//             или Массив классификаторов, дату загрузки которых надо сбросить.
//
Процедура СбросДатыПоследнейУспешнойЗагрузкиКлассификатора(Списки) Экспорт

	ТипМассив = Тип("Массив");
	ТипСтрока = Тип("Строка");

	ЛокальныеСписки = Новый Массив;
	Если ТипЗнч(Списки) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
		ЛокальныеСписки.Добавить(Списки);
	ИначеЕсли ТипЗнч(Списки) = ТипСтрока Тогда
		ЛокальныеСписки.Добавить(Списки);
	ИначеЕсли ТипЗнч(Списки) = ТипМассив Тогда
		ЛокальныеСписки = Списки;
	Иначе
		Возврат;
	КонецЕсли;

	Для Каждого ТекущийСписок Из ЛокальныеСписки Цикл
		МожноОбработать = Истина;
		Если ТипЗнч(ТекущийСписок) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
			Если ТекущийСписок.Пустая() Тогда
				МожноОбработать = Ложь;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущийСписок) = ТипСтрока Тогда
			Если ПустаяСтрока(ТекущийСписок) Тогда
				МожноОбработать = Ложь;
			КонецЕсли;
		Иначе
			МожноОбработать = Ложь;
		КонецЕсли;
		Если МожноОбработать = Истина Тогда
			// Очистка даты последней успешной загрузки.
			Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
			Запись.Список                 = ТекущийСписок;
			Запись.ТекущаяВерсияНаКлиенте = '00010101';
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция возвращает подробную информацию о хранении новости и ее окружении по идентификатору.
// При вызове из неразделенного сеанса в модели сервиса не будут заполнены пользовательские отборы.
//
// Параметры:
//  УИННовости      - Строка - Идентификатор новости;
//  ПрочиеПараметры - Структура - структура с ключами:
//   * ОбластьДанных   - Число - в случае запуска в модели сервиса, получает информацию по определенной области данных;
//   * ПараметрЗапуска - Строка - ПараметрЗапуска приложения (в командной строке после /C).
//
// Возвращаемое значение:
//   Строка - текст с подробной информацией о новости для службы техподдержки.
//
Функция ПолучитьИнформациюОНовости(УИННовости, ПрочиеПараметры) Экспорт

	ТипЧисло     = Тип("Число");
	ТипСтруктура = Тип("Структура");
	ТипФоновоеЗадание = Тип("ФоновоеЗадание");
	ТипИнформацияОбОшибке = Тип("ИнформацияОбОшибке");

	МассивСсылокНовостей  = Новый Массив;
	МассивЛентНовостей    = Новый Массив;
	ВсеПоставляемыеДанные = Новый Соответствие;

	// Чтение некоторых значений может потребовать административного доступа.
	УстановитьПривилегированныйРежим(Истина);

	ПолучитьТекущегоПользователя = Ложь;
	ВыбраннаяОбластьДанных = ПрочиеПараметры.ОбластьДанных;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если включено разделение данных, и мы зашли в неразделенном сеансе,
		//  то нельзя устанавливать пользовательские свойства новости.
		// Зашли в конфигурацию под пользователем без разделения (и не вошли в область данных).
		Если ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() Тогда
			ПолучитьТекущегоПользователя = Ложь;
		Иначе
			ПолучитьТекущегоПользователя = Истина;
		КонецЕсли;
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ВыбраннаяОбластьДанных = Неопределено;
		КонецЕсли;
	Иначе
		ПолучитьТекущегоПользователя = Истина;
		ВыбраннаяОбластьДанных = Неопределено;
	КонецЕсли;
	ПрочиеПараметры.Вставить("ВыбраннаяОбластьДанных", ВыбраннаяОбластьДанных);

#Область Шаблоны

	// Информация включает в себя:
	// 1. Текущая информация о новости:
	//  1.1. Содержимое элемента справочника новости;
	//  1.2. Содержимое регистров сведений;
	// 2. Другие данные;
	//  2.1. Данные из всех макетов для загрузки стандартных значений новостей;
	// 3. Текущая информация о лентах новостей, где найдена новость с таким UIN;
	// 4. Данные о всех регламентных операциях;
	// 5. Информация об окружении:
	//  5.1. Константы;
	//  5.2. Другие параметры работы (файловая база, модель сервиса и т.п.);
	//  5.3. Параметры сеанса;
	//  5.4. Данные о конфигурации (из метаданных);
	//  5.5. Данные регламентного задания.

	// MarkdownPad:
	// # - заголовок первого уровня;
	// ## - заголовок второго уровня;
	// ###### - заголовок шестого уровня;
	// *Текст* - текст курсивом;
	// **Текст** - текст жирный;
	// строка, начинающаяся с Tab - моноширинный текст, код;
	// ---------- - горизонтальный разделитель.

	Результат = Символы.ПС
		+ НСтр("ru='# ОТЛАДОЧНАЯ ИНФОРМАЦИЯ О НОВОСТЯХ
			|
			|Дата отчета: **%ТекущаяУниверсальнаяДата%**
			|
			|Найдено элементов справочника Новости с UIN **%УИННовости%**: %КоличествоНайденныхНовостей%
			|
			|----------
			|## ДАННЫЕ О НОВОСТЯХ
			|%ДанныеОНовостях%
			|
			|----------
			|
			|----------
			|## ДАННЫЕ О ЛЕНТАХ НОВОСТЕЙ
			|%ДанныеОЛентахНовостей%
			|
			|----------
			|
			|----------
			|## ДАННЫЕ О РЕГЛАМЕНТНЫХ ОПЕРАЦИЯХ
			|%ДанныеОРегламентныхОперациях%
			|
			|----------
			|
			|----------
			|## ДАННЫЕ О ПРОГРАММНОМ ОКРУЖЕНИИ
			|%ДанныеОПрограммномОкружении%
			|
			|----------'")
			+ Символы.ПС;

	ШаблонРезультатаНовости = Символы.ПС
		+ НСтр("ru='### Новость: %НомерПоПорядку% / %КоличествоНайденныхНовостей%
			|
			|#### Элемент справочника новости
			|%ЭлементСправочникаНовости%
			|
			|#### Вспомогательные регистры сведений
			|##### РегистрСведений.КатегорииНовостейИнтервалыВерсий
			|%РегистрСведений.КатегорииНовостейИнтервалыВерсий%
			|
			|##### РегистрСведений.КатегорииНовостейПростые
			|%РегистрСведений.КатегорииНовостейПростые%
			|
			|##### РегистрСведений.ПериодическиеСвойстваНовостей
			|%РегистрСведений.ПериодическиеСвойстваНовостей%
			|
			|##### РегистрСведений.ПривязкаНовостейКМетаданным
			|%РегистрСведений.ПривязкаНовостейКМетаданным%
			|
			|##### РегистрСведений.РассчитанныеОтборыПоНовостям_Общие
			|%РегистрСведений.РассчитанныеОтборыПоНовостям_Общие%
			|
			|##### РегистрСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных
			|%РегистрСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных%
			|
			|##### РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся
			|%РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся%
			|
			|##### РегистрСведений.РассчитанныеОтборыПоНовостям_Пользовательские (для текущего пользователя)
			|%РегистрСведений.РассчитанныеОтборыПоНовостям_Пользовательские%
			|
			|##### РегистрСведений.ОтключенныеЛентыНовостей (для текущего пользователя)
			|%РегистрСведений.ОтключенныеЛентыНовостей%
			|
			|##### РегистрСведений.ОтключенныеЛентыНовостейДляОбластиДанных (для области данных)
			|%РегистрСведений.ОтключенныеЛентыНовостейДляОбластиДанных%
			|
			|##### РегистрСведений.СостоянияНовостей
			|%РегистрСведений.СостоянияНовостей%
			|
			|#### Данные в основных макетах поставляемых данных
			|%ПоставляемыеДанные%'")
			+ Символы.ПС
			+ Символы.ПС;

	ШаблонРезультатаПоставляемыеДанные = Символы.ПС
		+ НСтр("ru='##### Поставляемые данные, идентификатор %ИдентификаторПоставляемыхДанных%
			|
			|Текст, где встречается UIN (+-200 символов):
			|
			|%ТекстПоставляемыхДанных%'")
			+ Символы.ПС
			+ Символы.Таб
			+ Символы.ПС;

	ШаблонРезультатаЛентыНовостей = Символы.ПС
		+ НСтр("ru='### Лента новостей: %НомерПоПорядку% / %КоличествоНайденныхЛентНовостей%
			|
			|#### Элемент справочника Ленты новостей
			|%ЭлементСправочникаЛентыНовостей%'")
			+ Символы.ПС
			+ Символы.ПС;

	ШаблонРезультатаРегламентныеОперации = Символы.ПС
		+ НСтр("ru='### РегистрСведений.ВсеОбновленияНовостей
			|%РегистрСведений.ВсеОбновленияНовостей%
			|
			|### РегистрСведений.ДатыЗагрузкиПоследнихНовостей
			|%РегистрСведений.ДатыЗагрузкиПоследнихНовостей%
			|
			|### РегистрСведений.ДатыОбновленияСтандартныхСписковНовостей
			|%РегистрСведений.ДатыОбновленияСтандартныхСписковНовостей%'")
			+ Символы.ПС
			+ Символы.ПС;

	ШаблонРезультатаПрограммноеОкружение = Символы.ПС
		+ НСтр("ru='### Константы
			|%Константы%
			|
			|### Другие параметры программного окружения
			|%ДругиеПараметрыПрограммногоОкружения%
			|
			|### Значения предопределенных категорий
			|%ЗначенияПредопределенныхКатегорий%
			|
			|### Параметры сеанса
			|%ПараметрыСеанса%
			|
			|### Данные о конфигурации (из метаданных) и операционной системы
			|%ДанныеОКонфигурацииИзМетаданных%
			|
			|### Расписание регламентного задания
			|%РасписаниеРегламентногоЗадания%'")
			+ Символы.ПС
			+ Символы.ПС;

#КонецОбласти

#Область ПолучениеДанных

	// 1. Получить список новостей
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|// 0. Новости с нужным UIN
		|ВЫБРАТЬ
		|	Спр.Ссылка            КАК Новость,
		|	Спр.ЛентаНовостей     КАК ЛентаНовостей,
		|	Спр.ЛентаНовостей.Код КАК ЛентаНовостейКод
		|ПОМЕСТИТЬ ВТ_НайденныеНовости
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.УИННовости = &УИННовости
		|;
		|
		|// 1. Все новости
		|ВЫБРАТЬ
		|	ВТ_НайденныеНовости.Новость КАК Новость
		|ИЗ
		|	ВТ_НайденныеНовости
		|;
		|
		|// 2. Все ленты новостей
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_НайденныеНовости.ЛентаНовостей    КАК ЛентаНовостей,
		|	ВТ_НайденныеНовости.ЛентаНовостейКод КАК ЛентаНовостейКод
		|ИЗ
		|	ВТ_НайденныеНовости
		|";
	Запрос.УстановитьПараметр("УИННовости", УИННовости);

	РезультатыЗапроса = Запрос.ВыполнитьПакет(); // ПолучитьИнформациюОНовости.
	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		МассивСсылокНовостей = РезультатыЗапроса[1].Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Новость");
	КонецЕсли;
	Если НЕ РезультатыЗапроса[2].Пустой() Тогда
		Выборка = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			МассивЛентНовостей.Добавить(
				Новый Структура("ЛентаНовостей, ЛентаНовостейКод",
					Выборка.ЛентаНовостей,
					Выборка.ЛентаНовостейКод));
		КонецЦикла;
	КонецЕсли;

	Если МассивЛентНовостей.Количество() > 0 Тогда
		// Стандартные макеты
		Для каждого ТекущийМакет Из Метаданные.Справочники.Новости.Макеты Цикл
			Для Каждого ТекущаяЛентаНовостей Из МассивЛентНовостей Цикл
				Если ВРег(ТекущийМакет.Имя) = (ВРег("СтандартныеЗначения_" + ТекущаяЛентаНовостей.ЛентаНовостейКод)) Тогда
					СодержимоеМакета = Справочники.Новости.ПолучитьМакет(ТекущийМакет.Имя).ПолучитьТекст();
					ВсеПоставляемыеДанные.Вставить(
						"Справочник.Новости." + ТекущийМакет.Имя, // Идентификатор.
						СодержимоеМакета);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		// Вспомогательные макеты
		Для Каждого ТекущаяЛентаНовостей Из МассивЛентНовостей Цикл
			ОбработкаНовостейПереопределяемый.ПолучитьДополнительныеСтандартныеЗначенияНовостей(ТекущаяЛентаНовостей.ЛентаНовостей, ВсеПоставляемыеДанные);
		КонецЦикла;
	КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов

#Область ЗаполнениеШаблонов_ОбщиеДанные

	Результат = СтрЗаменить(Результат, "%ТекущаяУниверсальнаяДата%", Формат(ТекущаяУниверсальнаяДата(), "ДЛФ=DT") + " (UTC+0)");
	Результат = СтрЗаменить(Результат, "%УИННовости%", УИННовости);
	Результат = СтрЗаменить(Результат, "%КоличествоНайденныхНовостей%", МассивСсылокНовостей.Количество());

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости

	Если МассивСсылокНовостей.Количество() > 0 Тогда
		РезультатНовости = "";

		С = 1; // АПК:247 это счетчик.
		Для Каждого ТекущаяНовость Из МассивСсылокНовостей Цикл
			НовостьОбъект = ТекущаяНовость.ПолучитьОбъект();
			НовостьХДТО = СериализаторXDTO.ЗаписатьXDTO(НовостьОбъект);
			ПредставлениеНовостьХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
				ПредставлениеОбъектаХДТО(НовостьХДТО),
				Символы.Таб,
				Истина);

#Область ЗаполнениеШаблонов_Новости_ОбщиеДанные

			РезультатТекущейНовости = ШаблонРезультатаНовости;
			РезультатТекущейНовости = СтрЗаменить(РезультатТекущейНовости, "%НомерПоПорядку%", С);
			РезультатТекущейНовости = СтрЗаменить(РезультатТекущейНовости, "%КоличествоНайденныхНовостей%", МассивСсылокНовостей.Количество());
			РезультатТекущейНовости = СтрЗаменить(РезультатТекущейНовости, "%ЭлементСправочникаНовости%", ПредставлениеНовостьХДТО);

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_КатегорииНовостейИнтервалыВерсий

			ИмяРегистраСведений = "КатегорииНовостейИнтервалыВерсий";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_КатегорииНовостейПростые

			ИмяРегистраСведений = "КатегорииНовостейПростые";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_ПериодическиеСвойстваНовостей

			ИмяРегистраСведений = "ПериодическиеСвойстваНовостей";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_ПривязкаНовостейКМетаданным

			ИмяРегистраСведений = "ПривязкаНовостейКМетаданным";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_РассчитанныеОтборыПоНовостям_Общие

			ИмяРегистраСведений = "РассчитанныеОтборыПоНовостям_Общие";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_РассчитанныеОтборыПоНовостям_ДляОбластиДанных

			ИмяРегистраСведений = "РассчитанныеОтборыПоНовостям_ДляОбластиДанных";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			Если ТипЗнч(ПрочиеПараметры.ВыбраннаяОбластьДанных) = ТипЧисло Тогда
				НаборЗаписей.Отбор["ОбластьДанныхВспомогательныеДанные"].Установить(ПрочиеПараметры.ВыбраннаяОбластьДанных);
			КонецЕсли;
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_РассчитанныеОтборыПоНовостям_РедкоМеняющиеся

			ИмяРегистраСведений = "РассчитанныеОтборыПоНовостям_РедкоМеняющиеся";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_РассчитанныеОтборыПоНовостям_Пользовательские

			ИмяРегистраСведений = "РассчитанныеОтборыПоНовостям_Пользовательские";
			Если ПолучитьТекущегоПользователя = Истина Тогда
				НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
				НаборЗаписей.Отбор["Пользователь"].Установить(Пользователи.ТекущийПользователь());
				НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
				НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
					ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
						ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
						Символы.Таб,
						Истина);
					РезультатТекущейНовости = СтрЗаменить(
						РезультатТекущейНовости,
						"%РегистрСведений." + ИмяРегистраСведений + "%",
						ПредставлениеНаборЗаписейХДТО);
				Иначе
					РезультатТекущейНовости = СтрЗаменить(
						РезультатТекущейНовости,
						"%РегистрСведений." + ИмяРегистраСведений + "%",
						Символы.Таб + НСтр("ru='Набор записей пустой.'"));
				КонецЕсли;
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					НСтр("ru='В модели сервиса для администратора системы нельзя получить пользовательские настройки или отборы.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_ОтключенныеЛентыНовостей

			ИмяРегистраСведений = "ОтключенныеЛентыНовостей";
			Если ПолучитьТекущегоПользователя = Истина Тогда
				НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
				НаборЗаписей.Отбор["Пользователь"].Установить(Пользователи.ТекущийПользователь());
				НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
					ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
						ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
						Символы.Таб,
						Истина);
					РезультатТекущейНовости = СтрЗаменить(
						РезультатТекущейНовости,
						"%РегистрСведений." + ИмяРегистраСведений + "%",
						ПредставлениеНаборЗаписейХДТО);
				Иначе
					РезультатТекущейНовости = СтрЗаменить(
						РезультатТекущейНовости,
						"%РегистрСведений." + ИмяРегистраСведений + "%",
						Символы.Таб + НСтр("ru='Набор записей пустой.'"));
				КонецЕсли;
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					НСтр("ru='В модели сервиса для администратора системы нельзя получить пользовательские настройки или отборы.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_ОтключенныеЛентыНовостейДляОбластиДанных

			ИмяРегистраСведений = "ОтключенныеЛентыНовостейДляОбластиДанных";
			Если ПолучитьТекущегоПользователя = Истина Тогда
				НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
				Если ТипЗнч(ПрочиеПараметры.ВыбраннаяОбластьДанных) = ТипЧисло Тогда
					НаборЗаписей.Отбор["ОбластьДанныхВспомогательныеДанные"].Установить(ПрочиеПараметры.ВыбраннаяОбластьДанных);
				КонецЕсли;
				НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
					ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
						ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
						Символы.Таб,
						Истина);
					РезультатТекущейНовости = СтрЗаменить(
						РезультатТекущейНовости,
						"%РегистрСведений." + ИмяРегистраСведений + "%",
						ПредставлениеНаборЗаписейХДТО);
				Иначе
					РезультатТекущейНовости = СтрЗаменить(
						РезультатТекущейНовости,
						"%РегистрСведений." + ИмяРегистраСведений + "%",
						Символы.Таб + НСтр("ru='Набор записей пустой.'"));
				КонецЕсли;
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					НСтр("ru='В модели сервиса для администратора системы нельзя получить пользовательские настройки или отборы.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_СостоянияНовостей

			ИмяРегистраСведений = "СостоянияНовостей";
			НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ТекущаяНовость);
			НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
				ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
					ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
					Символы.Таб,
					Истина);
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					ПредставлениеНаборЗаписейХДТО);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(
					РезультатТекущейНовости,
					"%РегистрСведений." + ИмяРегистраСведений + "%",
					Символы.Таб + НСтр("ru='Набор записей пустой.'"));
			КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_Новости_ПоставляемыеДанные

			РезультатПоставляемыеДанные = "";

			Для Каждого ТекущиеПоставляемыеДанные Из ВсеПоставляемыеДанные Цикл
				ЧислоВхождений = СтрЧислоВхождений(ВРег(ТекущиеПоставляемыеДанные.Значение), ВРег(УИННовости));
				Если ЧислоВхождений > 0 Тогда
					РезультатТекущиеПоставляемыеДанные = ШаблонРезультатаПоставляемыеДанные;
					РезультатТекущиеПоставляемыеДанные = СтрЗаменить(РезультатТекущиеПоставляемыеДанные, "%ИдентификаторПоставляемыхДанных%", ТекущиеПоставляемыеДанные.Ключ);
					ГдеНачалоПодстроки = СтрНайти(ВРег(ТекущиеПоставляемыеДанные.Значение), ВРег(УИННовости)); // Первое вхождение
					ТекстПоставляемыхДанных = Сред(ТекущиеПоставляемыеДанные.Значение, ГдеНачалоПодстроки - 200, 400);
					ТекстПоставляемыхДанных = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(ТекстПоставляемыхДанных, Символы.Таб, Истина);
					РезультатТекущиеПоставляемыеДанные = СтрЗаменить(РезультатТекущиеПоставляемыеДанные, "%ТекстПоставляемыхДанных%", ТекстПоставляемыхДанных);
					РезультатПоставляемыеДанные = РезультатПоставляемыеДанные + РезультатТекущиеПоставляемыеДанные;
				КонецЕсли;
			КонецЦикла;

			Если НЕ ПустаяСтрока(РезультатПоставляемыеДанные) Тогда
				РезультатТекущейНовости = СтрЗаменить(РезультатТекущейНовости, "%ПоставляемыеДанные%", РезультатПоставляемыеДанные);
			Иначе
				РезультатТекущейНовости = СтрЗаменить(РезультатТекущейНовости, "%ПоставляемыеДанные%", Символы.Таб + НСтр("ru='Не найдено в поставляемых данных.'"));
			КонецЕсли;

#КонецОбласти

			РезультатНовости = РезультатНовости + РезультатТекущейНовости;
			С = С + 1; // АПК:247 это счетчик.
		КонецЦикла;

		Результат = СтрЗаменить(Результат, "%ДанныеОНовостях%", РезультатНовости);
	Иначе
		Результат = СтрЗаменить(Результат, "%ДанныеОНовостях%", НСтр("ru='Не найдено ни одной новости с таким UIN'"));
	КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_ЛентыНовостей

	Если МассивЛентНовостей.Количество() > 0 Тогда
		РезультатЛентыНовостей = "";

		С = 1; // АПК:247 это счетчик.
		Для Каждого ТекущаяЛентаНовостей Из МассивЛентНовостей Цикл
			ЛентаНовостейОбъект = ТекущаяЛентаНовостей.ЛентаНовостей.ПолучитьОбъект();
			ЛентаНовостейХДТО = СериализаторXDTO.ЗаписатьXDTO(ЛентаНовостейОбъект);
			ПредставлениеЛентаНовостейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
				ПредставлениеОбъектаХДТО(ЛентаНовостейХДТО),
				Символы.Таб,
				Истина);

			РезультатТекущейЛентыНовостей = ШаблонРезультатаЛентыНовостей;
			РезультатТекущейЛентыНовостей = СтрЗаменить(РезультатТекущейЛентыНовостей, "%НомерПоПорядку%", С);
			РезультатТекущейЛентыНовостей = СтрЗаменить(РезультатТекущейЛентыНовостей, "%КоличествоНайденныхЛентНовостей%", МассивЛентНовостей.Количество());
			РезультатТекущейЛентыНовостей = СтрЗаменить(РезультатТекущейЛентыНовостей, "%ЭлементСправочникаЛентыНовостей%", ПредставлениеЛентаНовостейХДТО);

			РезультатЛентыНовостей = РезультатЛентыНовостей + РезультатТекущейЛентыНовостей;
			С = С + 1; // АПК:247 это счетчик.
		КонецЦикла;

		Результат = СтрЗаменить(Результат, "%ДанныеОЛентахНовостей%", РезультатЛентыНовостей);
	Иначе
		Результат = СтрЗаменить(Результат, "%ДанныеОЛентахНовостей%", НСтр("ru='Не найдено ни одной ленты новостей для новости с таким UIN'"));
	КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_ДанныеОРегламентныхОперациях

	РезультатДанныеОРегламентныхОперациях = ШаблонРезультатаРегламентныеОперации;

#Область ЗаполнениеШаблонов_ДанныеОРегламентныхОперациях_ВсеОбновленияНовостей

	ИмяРегистраСведений = "ВсеОбновленияНовостей";
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
		ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
			ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
			Символы.Таб,
			Истина);
		РезультатДанныеОРегламентныхОперациях = СтрЗаменить(
			РезультатДанныеОРегламентныхОперациях,
			"%РегистрСведений." + ИмяРегистраСведений + "%",
			ПредставлениеНаборЗаписейХДТО);
	Иначе
		РезультатДанныеОРегламентныхОперациях = СтрЗаменить(
			РезультатДанныеОРегламентныхОперациях,
			"%РегистрСведений." + ИмяРегистраСведений + "%",
			Символы.Таб + НСтр("ru='Набор записей пустой.'"));
	КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_ДанныеОРегламентныхОперациях_ДатыЗагрузкиПоследнихНовостей

	ИмяРегистраСведений = "ДатыЗагрузкиПоследнихНовостей";
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
		ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
			ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
			Символы.Таб,
			Истина);
		РезультатДанныеОРегламентныхОперациях = СтрЗаменить(
			РезультатДанныеОРегламентныхОперациях,
			"%РегистрСведений." + ИмяРегистраСведений + "%",
			ПредставлениеНаборЗаписейХДТО);
	Иначе
		РезультатДанныеОРегламентныхОперациях = СтрЗаменить(
			РезультатДанныеОРегламентныхОперациях,
			"%РегистрСведений." + ИмяРегистраСведений + "%",
			Символы.Таб + НСтр("ru='Набор записей пустой.'"));
	КонецЕсли;

#КонецОбласти

#Область ЗаполнениеШаблонов_ДанныеОРегламентныхОперациях_ДатыОбновленияСтандартныхСписковНовостей

	ИмяРегистраСведений = "ДатыОбновленияСтандартныхСписковНовостей";
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписейХДТО = СериализаторXDTO.ЗаписатьXDTO(НаборЗаписей);
		ПредставлениеНаборЗаписейХДТО = ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
			ПредставлениеОбъектаХДТО(НаборЗаписейХДТО),
			Символы.Таб,
			Истина);
		РезультатДанныеОРегламентныхОперациях = СтрЗаменить(
			РезультатДанныеОРегламентныхОперациях,
			"%РегистрСведений." + ИмяРегистраСведений + "%",
			ПредставлениеНаборЗаписейХДТО);
	Иначе
		РезультатДанныеОРегламентныхОперациях = СтрЗаменить(
			РезультатДанныеОРегламентныхОперациях,
			"%РегистрСведений." + ИмяРегистраСведений + "%",
			Символы.Таб + НСтр("ru='Набор записей пустой.'"));
	КонецЕсли;

#КонецОбласти

	Результат = СтрЗаменить(Результат, "%ДанныеОРегламентныхОперациях%", РезультатДанныеОРегламентныхОперациях);

#КонецОбласти

#Область ЗаполнениеШаблонов_ПрограммноеОкружение

	РезультатДанныеОПрограммномОкружении = ШаблонРезультатаПрограммноеОкружение;

#Область ЗаполнениеШаблонов_ПрограммноеОкружение_Константы

	НастройкиНовостей = Константы.НастройкиНовостей.Получить().Получить();
	Если ТипЗнч(НастройкиНовостей) = ТипСтруктура Тогда
		ПредставлениеНастройкиНовостей = ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(НастройкиНовостей, "=", Символы.ПС);
	Иначе
		ПредставлениеНастройкиНовостей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Настройки новостей необрабатываемого типа %1'"),
			ТипЗнч(НастройкиНовостей));
	КонецЕсли;

	РезультатДанныеОПрограммномОкружении_Константы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Константа.НастройкиНовостей:
			|%1
			|РазрешенаРаботаСНовостями: %2
			|РазрешенаРаботаСНовостямиЧерезИнтернет: %3'"),
		ПредставлениеНастройкиНовостей,
		Константы.РазрешенаРаботаСНовостями.Получить(),
		Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Получить());

	РезультатДанныеОПрограммномОкружении = СтрЗаменить(
		РезультатДанныеОПрограммномОкружении,
		"%Константы%",
		ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(РезультатДанныеОПрограммномОкружении_Константы, Символы.Таб, Истина, Ложь));

#КонецОбласти

#Область ЗаполнениеШаблонов_ПрограммноеОкружение_ДругиеПараметрыПрограммногоОкружения

	ВременныйТекст = НСтр("ru='Строка подключения: %СтрокаСоединенияИнформационнойБазы%
		|ТекущийРежимЗапуска: %ТекущийРежимЗапуска%
		|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация%
		|Разделение включено: %РазделениеВключено%
		|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных%
		|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей%
		|Конфигурация (метаданные): %Метаданные_Имя%, %Метаданные_Версия%
		|Конфигурация (переопределение): %Переопределение_Имя%, %Переопределение_Версия%
		|Платформа: %Платформа_Версия%
		|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп_РазрешенаРаботаСНовостями%
		|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп_РазрешенаРаботаСНовостямиЧерезИнтернет%
		|Текущий пользователь ИБ:
		|	Имя: %ТекущийПользователь_Имя%
		|	УИН: %ТекущийПользователь_УникальныйИдентификатор%
		|	Разделение данных:
		|		%ТекущийПользователь_РазделениеДанных%
		|Область данных (передана как параметр): %ОбластьДанных%
		|Выбранная область данных (использована для расчетов): %ВыбраннаяОбластьДанных%
		|Параметр запуска /C: %ПараметрЗапуска%'")
		+ Символы.ПС;
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%СтрокаСоединенияИнформационнойБазы%", СтрокаСоединенияИнформационнойБазы());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ТекущийРежимЗапуска%", ТекущийРежимЗапуска());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ЭтоРазделеннаяКонфигурация%", ИнтернетПоддержкаПользователей.ЭтоРазделеннаяКонфигурация());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%РазделениеВключено%", ОбщегоНазначения.РазделениеВключено());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ДоступноИспользованиеРазделенныхДанных%", ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%СеансЗапущенБезРазделителей%", ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%Метаданные_Имя%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеИмя"));
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%Метаданные_Версия%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеВерсия"));
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%Переопределение_Имя%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductName"));
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%Переопределение_Версия%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПродукта"));
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%Платформа_Версия%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("PlatformVersion"));
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ОбработкаНовостейПовтИсп_РазрешенаРаботаСНовостями%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ОбработкаНовостейПовтИсп_РазрешенаРаботаСНовостямиЧерезИнтернет%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ТекущийПользователь_Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ТекущийПользователь_УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ТекущийПользователь_РазделениеДанных%", ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ОбластьДанных%",
		?(ПрочиеПараметры.ОбластьДанных = Неопределено,
			НСтр("ru='Неопределено'"),
			ПрочиеПараметры.ОбластьДанных));
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ВыбраннаяОбластьДанных%",
		?(ПрочиеПараметры.ВыбраннаяОбластьДанных = Неопределено,
			НСтр("ru='Неопределено'"),
			ПрочиеПараметры.ВыбраннаяОбластьДанных));
	ВременныйТекст = СтрЗаменить(ВременныйТекст, "%ПараметрЗапуска%", ПрочиеПараметры.ПараметрЗапуска);

	РезультатДанныеОПрограммномОкружении_ДругиеПараметрыПрограммногоОкружения = ВременныйТекст;

	РезультатДанныеОПрограммномОкружении = СтрЗаменить(
		РезультатДанныеОПрограммномОкружении,
		"%ДругиеПараметрыПрограммногоОкружения%",
		ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(РезультатДанныеОПрограммномОкружении_ДругиеПараметрыПрограммногоОкружения, Символы.Таб, Истина, Ложь));

#КонецОбласти

#Область ЗаполнениеШаблонов_ПрограммноеОкружение_ЗначенияПредопределенныхКатегорий

	РезультатДанныеОПрограммномОкружении_ЗначенияПредопределенныхКатегорий =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='PlatformVersion = %1
				|ProductVersion = %2
				|Product = %3
				|ВерсияПлатформы = %4
				|ВерсияПродукта = %5
				|ProductName = %6
				|ЭтотПродукт = %7
				|МетаданныеИмя = %8
				|МетаданныеВерсия = %9'")
				+ Символы.ПС,
			ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(
				ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("PlatformVersion"), Символы.ПС),
			ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(
				ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductVersion"), Символы.ПС),
			ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(
				ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("Product"), Символы.ПС),
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПлатформы"),
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПродукта"),
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductName"),
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ЭтотПродукт"),
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеИмя"),
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеВерсия"))
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='DataSeparation = %1
				|InfoBaseStorageType = %2'")
				+ Символы.ПС,
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("DataSeparation"),
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("InfoBaseStorageType"));

	РезультатДанныеОПрограммномОкружении = СтрЗаменить(
		РезультатДанныеОПрограммномОкружении,
		"%ЗначенияПредопределенныхКатегорий%",
		ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(РезультатДанныеОПрограммномОкружении_ЗначенияПредопределенныхКатегорий, Символы.Таб, Истина, Ложь));

#КонецОбласти

#Область ЗаполнениеШаблонов_ПрограммноеОкружение_ПараметрыСеанса

	ПараметрыОкруженияБИП_Новости = ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.Получить();
	Если ТипЗнч(ПараметрыОкруженияБИП_Новости) = ТипСтруктура Тогда
		ПредставлениеПараметрыОкруженияБИП_Новости = ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(ПараметрыОкруженияБИП_Новости, "=", Символы.ПС);
	Иначе
		ПредставлениеПараметрыОкруженияБИП_Новости = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Параметры окружения подсистемы новостей необрабатываемого типа %1'"),
			ТипЗнч(ПараметрыОкруженияБИП_Новости));
	КонецЕсли;

	РезультатДанныеОПрограммномОкружении_ПараметрыСеанса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Параметры окружения подсистемы новостей:
			|%1'"),
		ПредставлениеПараметрыОкруженияБИП_Новости);

	РезультатДанныеОПрограммномОкружении = СтрЗаменить(
		РезультатДанныеОПрограммномОкружении,
		"%ПараметрыСеанса%",
		ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(РезультатДанныеОПрограммномОкружении_ПараметрыСеанса, Символы.Таб, Истина, Ложь));

#КонецОбласти

#Область ЗаполнениеШаблонов_ПрограммноеОкружение_ДанныеОКонфигурацииИзМетаданных

	СистемнаяИнформация = Новый СистемнаяИнформация;

	РезультатДанныеОПрограммномОкружении_ДанныеОКонфигурацииИзМетаданных = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Имя конфигурации: %1
			|Версия конфигурации: %2
			|Версия подсистемы БИП: %3
			|Версия платформы: %4
			|Операционная система: %5
			|Программа просмотра: %6
			|Данные компьютера: %7'"),
		Метаданные.Имя,
		Метаданные.Версия,
		ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки(),
		СистемнаяИнформация.ВерсияПриложения,
		СокрЛП(СистемнаяИнформация.ТипПлатформы) + ", " + СокрЛП(СистемнаяИнформация.ВерсияОС),
		СистемнаяИнформация.ИнформацияПрограммыПросмотра,
		СокрЛП(СистемнаяИнформация.Процессор) + ", " + СистемнаяИнформация.ОперативнаяПамять);

	РезультатДанныеОПрограммномОкружении = СтрЗаменить(
		РезультатДанныеОПрограммномОкружении,
		"%ДанныеОКонфигурацииИзМетаданных%",
		ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(РезультатДанныеОПрограммномОкружении_ДанныеОКонфигурацииИзМетаданных, Символы.Таб, Истина, Ложь));

#КонецОбласти

#Область ЗаполнениеШаблонов_ПрограммноеОкружение_РасписаниеРегламентногоЗадания

	ТекущееРегламентноеЗадание = ПолучитьРегламентноеЗаданиеВсеОбновленияНовостей("ОбработкаНовостей.ПолучитьИнформациюОНовости");
	Если ТекущееРегламентноеЗадание = Неопределено Тогда
		ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено'");
		РегламентноеЗадание_Использование = Ложь;
		ПредставлениеРегламентноеЗадание_ПоследнееЗадание = НСтр("ru='Никогда не выполнялось'");
	Иначе
		СтруктураРасписания = ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(ТекущееРегламентноеЗадание.Расписание);
		ПредставлениеРасписания = ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(СтруктураРасписания, "=", Символы.ПС);
		РегламентноеЗадание_Использование = ТекущееРегламентноеЗадание.Использование;
		РегламентноеЗадание_ПоследнееЗадание = ТекущееРегламентноеЗадание.ПоследнееЗадание;
		Если ТипЗнч(РегламентноеЗадание_ПоследнееЗадание) = ТипФоновоеЗадание Тогда
			РегламентноеЗадание_СтруктураПоследнегоЗадания = Новый Структура;
				РегламентноеЗадание_СтруктураПоследнегоЗадания.Вставить("Наименование", РегламентноеЗадание_ПоследнееЗадание.Наименование);
				РегламентноеЗадание_СтруктураПоследнегоЗадания.Вставить("Начало", РегламентноеЗадание_ПоследнееЗадание.Начало);
				РегламентноеЗадание_СтруктураПоследнегоЗадания.Вставить("Конец", РегламентноеЗадание_ПоследнееЗадание.Конец);
				РегламентноеЗадание_СтруктураПоследнегоЗадания.Вставить("Состояние", РегламентноеЗадание_ПоследнееЗадание.Состояние);
				РегламентноеЗадание_СтруктураПоследнегоЗадания.Вставить("Расположение", РегламентноеЗадание_ПоследнееЗадание.Расположение);
			Если ТипЗнч(РегламентноеЗадание_ПоследнееЗадание.ИнформацияОбОшибке) = ТипИнформацияОбОшибке Тогда
				РегламентноеЗадание_СтруктураПоследнегоЗадания.Вставить(
					"ПодробноеПредставлениеОшибки",
					ПодробноеПредставлениеОшибки(РегламентноеЗадание_ПоследнееЗадание.ИнформацияОбОшибке));
			Иначе
				РегламентноеЗадание_СтруктураПоследнегоЗадания.Вставить("ПодробноеПредставлениеОшибки", НСтр("ru='Выполнено без ошибок'"));
			КонецЕсли;
			ПредставлениеРегламентноеЗадание_ПоследнееЗадание = ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(
				РегламентноеЗадание_СтруктураПоследнегоЗадания, "=", Символы.ПС);
		Иначе
			ПредставлениеРегламентноеЗадание_ПоследнееЗадание = НСтр("ru='Не выполнялось'");
		КонецЕсли;
	КонецЕсли;

	РезультатДанныеОПрограммномОкружении_РасписаниеРегламентногоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Расписание регламентного задания:
			|%1
			|Использование: %2
			|Последнее задание:
			|%3'"),
		ПредставлениеРасписания,
		РегламентноеЗадание_Использование,
		ПредставлениеРегламентноеЗадание_ПоследнееЗадание);

	РезультатДанныеОПрограммномОкружении = СтрЗаменить(
		РезультатДанныеОПрограммномОкружении,
		"%РасписаниеРегламентногоЗадания%",
		ОбработкаНовостейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(РезультатДанныеОПрограммномОкружении_РасписаниеРегламентногоЗадания, Символы.Таб, Истина, Ложь));

#КонецОбласти

	Результат = СтрЗаменить(Результат, "%ДанныеОПрограммномОкружении%", РезультатДанныеОПрограммномОкружении);

#КонецОбласти

#КонецОбласти

	Возврат Результат;

КонецФункции

// Возвращает слепок значений регистра сведений ДатыЗагрузкиПоследнихНовостей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - состав колонок соответствует регистру сведений ДатыЗагрузкиПоследнихНовостей.
//
Функция ПолучитьДатыЗагрузкиНовостей() Экспорт

	Результат = Новый ТаблицаЗначений;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Рег.ЛентаНовостей                        КАК ЛентаНовостей,
		|	Рег.ДатаЗагрузкиПоследнихНовостей        КАК ДатаЗагрузкиПоследнихНовостей,
		|	Рег.КоличествоНеудачПриЗагрузкеНовостей  КАК КоличествоНеудачПриЗагрузкеНовостей,
		|	Рег.ДатаПоследнейПопыткиЗагрузкиНовостей КАК ДатаПоследнейПопыткиЗагрузкиНовостей
		|ИЗ
		|	РегистрСведений.ДатыЗагрузкиПоследнихНовостей КАК Рег
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЛентаНовостей
		|";
	РезультатЗапроса = Запрос.Выполнить(); // ПолучитьДатыЗагрузкиНовостей.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПоискНовостей

// Выполняет полнотекстовый поиск по новостям. Возможна передача дополнительных параметров (период поиска и т.п.).
//
// Параметры:
//  СтруктураПараметровПоиска - Структура с ключами:
//    * СтрокПоиска - Строка;
//    * ПоискДатаОТ - Дата;
//    * ПоискДатаДО - Дата;
//    * НовостиОбластьПоиска - Неопределено, Массив из СправочникСсылка.Новости - массив ссылок на новости, в которых надо искать;
//        Если не заполнено, то поиск будет во всех новостях. Если передан массив ссылок на новости,
//         то поиск будет осуществляться только в этих новостях.
//        Имеет смысл заполнять для форм контекстных новостей, когда поиск осуществляется только среди уже отобранных новостей.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.Новости.
//
Функция НайтиНовости(СтруктураПараметровПоиска) Экспорт

	Результат = Новый Массив;

	ТипДата   = Тип("Дата");
	ТипМассив = Тип("Массив");

	ЛокальнаяСтрокаПоиска         = Неопределено;
	ЛокальныйПоискДатаОТ          = Неопределено;
	ЛокальныйПоискДатаДО          = Неопределено;
	ЛокальныйНовостиОбластьПоиска = Неопределено;
	СтруктураПараметровПоиска.Свойство("СтрокаПоиска", ЛокальнаяСтрокаПоиска);
	СтруктураПараметровПоиска.Свойство("ПоискДатаОТ", ЛокальныйПоискДатаОТ);
	Если ТипЗнч(ЛокальныйПоискДатаОТ) <> ТипДата Тогда
		ЛокальныйПоискДатаОТ = '00010101';
	КонецЕсли;
	СтруктураПараметровПоиска.Свойство("ПоискДатаДО", ЛокальныйПоискДатаДО);
	Если ТипЗнч(ЛокальныйПоискДатаДО) <> ТипДата Тогда
		ЛокальныйПоискДатаДО = '00010101';
	КонецЕсли;
	СтруктураПараметровПоиска.Свойство("НовостиОбластьПоиска", ЛокальныйНовостиОбластьПоиска);
	Если (ТипЗнч(ЛокальныйНовостиОбластьПоиска) = ТипМассив)
			И (ЛокальныйНовостиОбластьПоиска.Количество() > 0) Тогда
		// Правильный список.
	Иначе
		ЛокальныйНовостиОбластьПоиска = Неопределено;
	КонецЕсли;

	МассивНайденныхНовостей = Новый Массив;

	// Если передали УИН (Строка 32 или Строка 36), то попробовать найти новость по реквизиту УИН или guid.
	ЛокальнаяСтрокаПоискаУИН = "";
	Если СтрДлина(ЛокальнаяСтрокаПоиска) = 32 Тогда
		ЛокальнаяСтрокаПоискаУИН =
			Сред(ЛокальнаяСтрокаПоиска, 1, 8) + "-"
			+ Сред(ЛокальнаяСтрокаПоиска, 9, 4) + "-"
			+ Сред(ЛокальнаяСтрокаПоиска, 13, 4) + "-"
			+ Сред(ЛокальнаяСтрокаПоиска, 17, 4) + "-"
			+ Сред(ЛокальнаяСтрокаПоиска, 21, 12);
	ИначеЕсли СтрДлина(ЛокальнаяСтрокаПоиска) = 36 Тогда
		ЛокальнаяСтрокаПоискаУИН = ЛокальнаяСтрокаПоиска;
	КонецЕсли;
	Если СтрДлина(ЛокальнаяСтрокаПоискаУИН) = 36 Тогда
		// Поиск по реквизиту "УИННовости" справочника Новости.
		// Здесь надо выбрать все новости, без учета дат - по датам будет отбор в общем запросе, ниже.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Спр.Ссылка КАК Новость
			|ИЗ
			|	Справочник.Новости КАК Спр
			|ГДЕ
			|	Спр.ПометкаУдаления = ЛОЖЬ
			|	И Спр.УИННовости = &УИННовости
			|";
		Запрос.УстановитьПараметр("УИННовости", ЛокальнаяСтрокаПоискаУИН);

		РезультатЗапроса = Запрос.Выполнить(); // НайтиНовости() по УИН.
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				МассивНайденныхНовостей.Добавить(Выборка.Новость);
			КонецЦикла;
		КонецЕсли;

		// Поиск по уникальному идентификатору элемента справочника Новости.
		Попытка
			ЛокальнаяНовостьПоУИН = Справочники.Новости.ПолучитьСсылку(Новый УникальныйИдентификатор(ЛокальнаяСтрокаПоискаУИН));
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЛокальнаяНовостьПоУИН = Неопределено;
		КонецПопытки;
		Если ЛокальнаяНовостьПоУИН <> Неопределено Тогда
			Если ТипЗнч(ЛокальнаяНовостьПоУИН) = Тип("СправочникСсылка.Новости") И НЕ ПустаяСтрока(ЛокальнаяНовостьПоУИН.ВерсияДанных) Тогда
				МассивНайденныхНовостей.Добавить(ЛокальнаяНовостьПоУИН);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Полнотекстовый поиск можно осуществлять, если он включен в настройках.
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		Если НЕ ПустаяСтрока(ЛокальнаяСтрокаПоиска) Тогда
			СписокДанных = ПолнотекстовыйПоиск.СоздатьСписок(); // Создать без параметров
			МассивОбластейПоиска = Новый Массив;
				МассивОбластейПоиска.Добавить(Метаданные.Справочники.Новости);
			СписокДанных.ОбластьПоиска = МассивОбластейПоиска;
			СписокДанных.ПолучатьОписание = Ложь; //По-умолчанию = Истина. Отключать для быстрого поиска и дальнейшей обработки НЕ визуально
			СписокДанных.РазмерПорции = 1000;
			СписокДанных.СтрокаПоиска = СокрЛП(ЛокальнаяСтрокаПоиска);
			ЕстьОшибкиПолнотекстовогоПоиска = Ложь;
			Попытка
				СписокДанных.ПерваяЧасть();
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='ОбработкаНовостей.НайтиНовости: произошла ошибка поиска новостей, строка поиска [%1] по причине:
						|%2'"),
					ЛокальнаяСтрокаПоиска,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Разное'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
					НСтр("ru='Новости. Разное. Ошибка полнотекстового поиска'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					Метаданные.Справочники.Новости, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				// Ошибка полнотекстового поиска не должна влиять на запуск простого запроса, поэтому выходить из функции не будем.
				ЕстьОшибкиПолнотекстовогоПоиска = Истина;
			КонецПопытки;
			Если ЕстьОшибкиПолнотекстовогоПоиска = Ложь Тогда
				Если СписокДанных.ПолноеКоличество() > 0 Тогда // Есть данные
					ЕстьПорцияДанных = Истина;
					Пока ЕстьПорцияДанных Цикл
						Для каждого НайденныйЭлемент Из СписокДанных Цикл
							// Проверка дат будет осуществлена позже, запросом.
							МассивНайденныхНовостей.Добавить(НайденныйЭлемент.Значение);
						КонецЦикла;
						Попытка
							СписокДанных.СледующаяЧасть();
							ЕстьПорцияДанных = Истина;
						Исключение
							ЕстьПорцияДанных = Ложь;
						КонецПопытки;
					КонецЦикла;
				Иначе
					// Нет данных - не выводить никаких сообщений, просто пометить все новости как невидимые.
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Вне зависимости от того, включен ли полнотекстовый поиск или нет, попробовать найти новости
	//  по текстовым полям (Заголовок (Наименование), Подзаголовок, ТекстНовости).
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.Ссылка КАК Новость
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.ПометкаУдаления = ЛОЖЬ
		|	И (
		|		Спр.Ссылка В (&МассивНайденныхНовостей)
		|		ИЛИ Спр.Наименование ПОДОБНО ""%#СтрокаПоиска#%"" СПЕЦСИМВОЛ ""\""
		|		ИЛИ Спр.Подзаголовок ПОДОБНО ""%#СтрокаПоиска#%"" СПЕЦСИМВОЛ ""\""
		|		ИЛИ Спр.ТекстНовости ПОДОБНО ""%#СтрокаПоиска#%"" СПЕЦСИМВОЛ ""\""
		|	)
		|	И &МетаУсловиеДатаОТ
		|	И &МетаУсловиеДатаДО
		|	И &МетаУсловиеНовостиОбластьПоиска
		|";
	Запрос.УстановитьПараметр("МассивНайденныхНовостей", МассивНайденныхНовостей);

	// Проверка по датам.
	// Проверка: Дата начала.
	Если (ТипЗнч(ЛокальныйПоискДатаОТ) = ТипДата)
			И (ЛокальныйПоискДатаОТ <> '00010101') Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеДатаОТ", "Спр.ДатаПубликации >= &ПоискДатаОТ");
		Запрос.УстановитьПараметр("ПоискДатаОТ", ЛокальныйПоискДатаОТ);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеДатаОТ", "ИСТИНА");
	КонецЕсли;
	// Проверка: Дата окончания.
	Если (ТипЗнч(ЛокальныйПоискДатаДО) = ТипДата)
			И (ЛокальныйПоискДатаДО <> '00010101') Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеДатаДО", "Спр.ДатаПубликации <= &ПоискДатаДО");
		Запрос.УстановитьПараметр("ПоискДатаДО", ЛокальныйПоискДатаДО);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеДатаДО", "ИСТИНА");
	КонецЕсли;
	// Проверка: область поиска.
	Если (ЛокальныйНовостиОбластьПоиска = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеНовостиОбластьПоиска", "ИСТИНА");
	Иначе // Массив ненулевого размера - проверяется выше.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеНовостиОбластьПоиска", "Спр.Ссылка В (&НовостиОбластьПоиска)");
		Запрос.УстановитьПараметр("НовостиОбластьПоиска", ЛокальныйНовостиОбластьПоиска);
	КонецЕсли;

	// В строке поиска не должно быть двойных кавычек.
	ЛокальнаяСтрокаПоиска = СтрЗаменить(ЛокальнаяСтрокаПоиска, Символ(34), Символ(34) + Символ(34)); // Заменить одну двойную кавычку на две двойные кавычки.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СтрокаПоиска#", ЛокальнаяСтрокаПоиска);

	РезультатЗапроса = Запрос.Выполнить(); // НайтиНовости() по текстовым полям.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Новость");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Добавление новости или получение объекта новости по уникальному идентификатору.
//
// Параметры:
//  ЛентаНовостей         - СправочникСсылка.ЛентыНовостей;
//  УИННовости            - Строка - уникальный идентификатор новостей;
//  ДатаПубликации        - Дата - дата публикации;
//  ОчищатьТабличныеЧасти - Булево - очищать табличные части.
//                            Как правило объект "Новости" получается для его перезаполнения.
//
// Возвращаемое значение:
//  СправочникОбъект.Новости - объект новой или существующей новости.
//
Функция ПолучитьОбъектНовости(
			НовостьСсылка,
			ЛентаНовостей,
			УИННовости,
			ДатаПубликации,
			ОчищатьТабличныеЧасти = Истина) Экспорт

	Если НовостьСсылка.Пустая() Тогда
		Объект = Справочники.Новости.СоздатьЭлемент();
	Иначе
		Объект = НовостьСсылка.ПолучитьОбъект();
	КонецЕсли;

	Объект.ЛентаНовостей  = ЛентаНовостей;
	Объект.УИННовости     = СокрЛП(УИННовости);
	Объект.ДатаПубликации = ДатаПубликации;

	Если ОчищатьТабличныеЧасти = Истина Тогда
		Объект.Действия.Очистить();
		Объект.ПараметрыДействий.Очистить();
		Объект.ПривязкаКМетаданным.Очистить();
		Объект.БинарныеДанные.Очистить();
	КонецЕсли;

	Возврат Объект;

КонецФункции

// Получение структуры новости по уникальному идентификатору и ленте новостей.
//
// Параметры:
//  ЛентаНовостей  - СправочникСсылка.ЛентыНовостей;
//  УИННовости     - Строка - уникальный идентификатор новостей.
//
// Возвращаемое значение:
//  Структура с ключами:
//    * Ссылка          - СправочникСсылка.Новости;
//    * УИН_ИБ          - Строка - Уникальный идентификатор ссылки на новость в ИБ;
//    * ДатаПубликации  - Дата;
//    * ПометкаУдаления - Булево.
//
Функция ПолучитьСсылкуНаНовость(ЛентаНовостей, УИННовости) Экспорт

	НовыйУникальныйИдентификатор = СокрЛП(Новый УникальныйИдентификатор);
	Объект = Новый Структура;
		Объект.Вставить("УИН_ИБ", НовыйУникальныйИдентификатор);
		Объект.Вставить("Ссылка", Справочники.Новости.ПустаяСсылка());
		Объект.Вставить("ДатаПубликации", '00010101');
		Объект.Вставить("ПометкаУдаления", Ложь);

	// Выбор из справочника Новостей.
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.Ссылка          КАК НовостьСсылка,
		|	Спр.ДатаПубликации  КАК ДатаПубликации,
		|	Спр.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.ЛентаНовостей = &ЛентаНовостей
		|	И Спр.УИННовости = &УИННовости
		|";
	Запрос.УстановитьПараметр("ЛентаНовостей", ЛентаНовостей);
	Запрос.УстановитьПараметр("УИННовости", СокрЛП(УИННовости));

	Результат = Запрос.Выполнить(); // ПолучитьСсылкуНаНовость.
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Если Выборка.Следующий() Тогда
			Объект.Вставить("УИН_ИБ", СокрЛП(Выборка.НовостьСсылка.УникальныйИдентификатор()));
			Объект.Вставить("Ссылка", Выборка.НовостьСсылка);
			Объект.Вставить("ДатаПубликации", Выборка.ДатаПубликации);
			Объект.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		КонецЕсли;
	КонецЕсли;

	Возврат Объект;

КонецФункции

// Функция возвращает таблицу новостей для определенного объекта метаданных, имени формы и события.
// Настроенные пользователем отборы НЕ накладываются.
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  СписокЛентНовостей           - СписокЗначений, Массив, Неопределено - в каких лентах новостей искать новость;
//  ИмяМетаданных                - Строка - имя метаданных, обязательная часть идентификатора новости;
//  ИмяФормы                     - Строка, Неопределено - имя формы, необязательная часть идентификатора новости;
//  ИмяСобытия                   - Строка, Неопределено - имя события, необязательная часть идентификатора новости;
//  Вариант                      - Строка:
//    * если = "Для форм, все поля", то выводить подробную таблицу, с событиями и именами форм - в этом случае новости
//       будут встречаться по два раза. Этот вариант нужен для заполнения реквизита Новости справочников
//       и документов (чтобы при возникновении события можно было показать новость).
//    * если = "Для форм, простой", то выводить таблицу с именами форм, но без событий
//              (удобно для получения уникального списка новостей).
//    * если = "Для формы контекстных новостей", то выводить сжатую таблицу с уникальностью по новостям.
//       Этот вариант нужен для формы контекстных новостей;
//  НастройкиПолученияНовостей   - Структура, Неопределено - структура с ключами:
//   * ПолучатьКатегорииНовостей - Булево - если Истина, то в реквизите формы будут также сохраняться
//                                  категории новостей. Это может быть полезно для реализации особенного
//                                  отбора новостей, который невозможно реализовать
//                                  с помощью регистров сведений ОтборыПоЛентамНовостей*.
//
// Возвращаемое значение:
//  Таблица значений с колонками:
//    * НомерСтрокиНовости      - Число - для реализации нажатия в подменю формы;
//    * ЛентаНовостей           - СправочникСсылка.ЛентаНовостей;
//    * Новость                 - СправочникСсылка.Новости;
//    * НовостьНаименование     - Строка (100) - заголовок новости;
//    * НовостьПодзаголовок     - Строка (100) - подзаголовок новости;
//    * НовостьКодЛентыНовостей - Строка (20) - код ленты новостей;
//    * УИННовости              - Строка (255) -;
//    * ДатаПубликации          - Дата;
//    * Важность                - Число (1,0) - рассчитанная на текущую дату контекстная важность
//                                  (с учетом даты сброса контекстной важности);
//    * Актуальность            - Булево - рассчитанная на текущую дату актуальность (с учетом даты завершения новости);
//    * Метаданные              - Строка (50);
//    * Форма                   - Строка (50);
//    * Событие                 - Строка (50) // Для варианта "Для форм, простой" - пустая строка;
//    * ПоказыватьВФормеОбъекта - Булево // Для варианта "Для форм, простой" - всегда ЛОЖЬ;
//    * ЭтоПостояннаяНовость    - Булево // Для варианта "Для форм, простой" - всегда ЛОЖЬ;
//    * Прочтена                - Булево;
//    * ОповещениеВключено      - Булево // Ложь, если ДатаНачалаОповещения > ТекущаяУниверсальнаяДата();
//    * ДатаНачалаОповещения    - Дата // Для варианта "Для форм, простой" - всегда пустая дата (01.01.0001);
//    * ИконкаНовости           - Картинка, Неопределено - иконка важной новости.
//
Функция ПолучитьКонтекстныеНовости(
			СписокЛентНовостей,
			ИмяМетаданных,
			ИмяФормы,
			ИмяСобытия,
			Вариант,
			НастройкиПолученияНовостей = Неопределено) Экспорт

#Область Инициализация

	ТипМассив            = Тип("Массив");
	ТипСтруктура         = Тип("Структура");
	ТипСписокЗначений    = Тип("СписокЗначений");
	ТипХранилищеЗначения = Тип("ХранилищеЗначения");
	ТипДвоичныеДанные    = Тип("ДвоичныеДанные");
	ТипКартинка          = Тип("Картинка");

	СтруктураНастроекПоказаНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПоказаНовостей",
		"");

	Таблица = Новый ТаблицаЗначений;

#КонецОбласти

#Область Проверки

	// Пользователь может отключить в своих настройках все ленты новостей.
	// В таком случае можно не тратить время на выполнение запроса.
	Если ((ТипЗнч(СписокЛентНовостей) = ТипМассив) И (СписокЛентНовостей.Количество() <= 0))
			ИЛИ ((ТипЗнч(СписокЛентНовостей) = ТипСписокЗначений) И (СписокЛентНовостей.Количество() <= 0)) Тогда
		Возврат Таблица;
	КонецЕсли;

	// Возможна ситуация, когда файловую информационную базу долго не открывали и долго не запускались регламентные задачи пересчета отборов.
	// В этом случае подсистема Новости переходит из состояния "Активна" в "ТребуетсяПересчетОтборовПослеДлительногоОжидания".
	// Все подключенные обработчики должны оставаться подключенными, но им поступают пустые списки новостей до тех пор,
	//  пока состояние подсистемы Новости не вернется в "Активна", или пока не пройдет достаточное время.

	СостояниеПодсистемы = ПолучитьСостояниеПодсистемы();

	Если СостояниеПодсистемы = "ТребуетсяПересчетОтборовПослеДлительногоОжидания" Тогда
		Возврат Таблица;
	КонецЕсли;

#КонецОбласти

#Область Обработка

	Если Вариант = "Для форм, все поля" Тогда

		// В запросе не учитываются отборы, настроенные администратором.
		// Отдельно обрабатывается НастройкиПолученияНовостей.ПолучатьКатегорииНовостей.
		ПолучатьКатегорииНовостей = Ложь;
		Если ТипЗнч(НастройкиПолученияНовостей) = ТипСтруктура Тогда
			Если НастройкиПолученияНовостей.Свойство("ПолучатьКатегорииНовостей") Тогда
				Если НастройкиПолученияНовостей.ПолучатьКатегорииНовостей = Истина Тогда
					ПолучатьКатегорииНовостей = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	0                                                        КАК НомерСтрокиНовости,
			|	Рег.Новость.ЛентаНовостей                                КАК ЛентаНовостей,
			|	Рег.Новость                                              КАК Новость,
			|	Рег.Новость.Наименование                                 КАК НовостьНаименование,
			|	Рег.Новость.Подзаголовок                                 КАК НовостьПодзаголовок,
			|	Рег.Новость.ЛентаНовостей.Код                            КАК НовостьКодЛентыНовостей,
			|	Рег.Новость.УИННовости                                   КАК УИННовости,
			|	Рег.Новость.ДатаПубликации                               КАК ДатаПубликации,
			|	""                                                                                                    "" КАК НавигационнаяСсылка,
			|	Рег.Важность                                             КАК Важность,
			|	Рег.Актуальность                                         КАК Актуальность,
			|	Рег.Метаданные                                           КАК Метаданные,
			|	Рег.Форма                                                КАК Форма,
			|	Рег.Событие                                              КАК Событие,
			|	Рег.ПоказыватьВФормеОбъекта                              КАК ПоказыватьВФормеОбъекта,
			|	Рег.ЭтоПостояннаяНовость                                 КАК ЭтоПостояннаяНовость,
			|	ЕСТЬNULL(РегСостояния.Прочтена, ЛОЖЬ)                    КАК Прочтена,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РегСостояния.ДатаНачалаОповещения, &ПустаяДата) <= &ТекущаяУниверсальнаяДата ТОГДА
			|			ЕСТЬNULL(РегСостояния.ОповещениеВключено, ИСТИНА)
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ                                                    КАК ОповещениеВключено,
			|	ЕСТЬNULL(РегСостояния.ДатаНачалаОповещения, &ПустаяДата) КАК ДатаНачалаОповещения,
			|	ЕСТЬNULL(ИконкиНовостей.Данные, НЕОПРЕДЕЛЕНО)            КАК ИконкаНовостиДанные // Картинка будет получена далее из Хранилища значений
			|ИЗ
			|	РегистрСведений.ПривязкаНовостейКМетаданным КАК Рег
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СостоянияНовостей КАК РегСостояния
			|	ПО
			|		РегСостояния.Пользователь = &ТекущийПользователь
			|		И РегСостояния.Новость = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК РегРассчитанныеОтборы_РедкоМеняющиеся
			|	ПО
			|		РегРассчитанныеОтборы_РедкоМеняющиеся.Новость = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_Общие КАК РегРассчитанныеОтборы_Общие
			|	ПО
			|		РегРассчитанныеОтборы_Общие.Новость = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных КАК РегРассчитанныеОтборы_ДляОбластиДанных
			|	ПО
			|		РегРассчитанныеОтборы_ДляОбластиДанных.Новость = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_Пользовательские КАК РегРассчитанныеОтборы_Пользовательские
			|	ПО
			|		РегРассчитанныеОтборы_Пользовательские.Пользователь = &ТекущийПользователь
			|		И РегРассчитанныеОтборы_Пользовательские.Новость = Рег.Новость
			|
			|	// Для важных новостей можно вывести свою картинку с идентификатором ИконкаВажнойНовостиДляОповещенияПользователя.
			|	// ВАЖНО: Если картинок с таким идентификатором больше одной, то будет выведено несколько новостей.
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Новости.БинарныеДанные КАК ИконкиНовостей
			|	ПО
			|		Рег.Новость = ИконкиНовостей.Ссылка
			|		И ИконкиНовостей.УИН = &ИдентификаторИконкиНовости
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СвойстваНовостей КАК РегСвойства
			|	ПО
			|		Рег.Новость = РегСвойства.Новость
			|
			|ГДЕ
			|	(&МетаУсловиеМетаданных)
			|	И ( // Не просроченные новости
			|		Рег.Актуальность = ИСТИНА
			|		ИЛИ &ОтборНовостей_ТолькоАктивные = ЛОЖЬ
			|	)
			|	И Рег.Новость.ПометкаУдаления = ЛОЖЬ // Обязательная проверка новости на пометку удаления
			|	И ЕСТЬNULL(РегРассчитанныеОтборы_РедкоМеняющиеся.РезультатОтбора, ИСТИНА) = ИСТИНА // Отбор по версии платформы, версии конфигурации, дате завершения и опубликованности
			|	И ЕСТЬNULL(РегРассчитанныеОтборы_Общие.РезультатОтбора, ИСТИНА) = ИСТИНА // Отборы, настроенные администратором
			|	И ЕСТЬNULL(РегРассчитанныеОтборы_ДляОбластиДанных.РезультатОтбора, ИСТИНА) = ИСТИНА // Отборы по разделенным ФО и т.п.
			|	И ЕСТЬNULL(РегРассчитанныеОтборы_Пользовательские.РезультатОтбора, ИСТИНА) = ИСТИНА // Отборы, настроенные пользователем
			|	И (&МетаУсловиеСписокЛентНовостей)
			|	И Рег.Новость.ЛентаНовостей.ПометкаУдаления = ЛОЖЬ // Вне зависимости от переданного списка лент новостей, лента новостей не должна быть помечена на удаление
			|	И ЕСТЬNULL(РегСвойства.ТребуетсяПересчетОтборов, ЛОЖЬ) = ЛОЖЬ // Фильтр по только что полученным новостям, по которым еще не рассчитаны отборы.
			|УПОРЯДОЧИТЬ ПО
			|	Рег.Новость.ДатаПубликации УБЫВ
			|";
		Запрос.УстановитьПараметр("ТекущийПользователь"         , Пользователи.ТекущийПользователь()); // В модели сервиса запускается только с включенным разделителем
		Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата"    , ТекущаяУниверсальнаяДата());
		Запрос.УстановитьПараметр("ПустаяДата"                  , '00010101000000');
		Запрос.УстановитьПараметр("ОтборНовостей_ТолькоАктивные", СтруктураНастроекПоказаНовостей.ОтборНовостей_ТолькоАктивные);
		Запрос.УстановитьПараметр("ИдентификаторИконкиНовости"  , "ИконкаВажнойНовостиДляОповещенияПользователя"); // Идентификатор.
		// Условие по метаданным (Метаданные + Форма(если есть) + Событие (если есть)).
		УсловиеМетаданных = "(Рег.Метаданные = &ИмяМетаданных)";
		Запрос.УстановитьПараметр("ИмяМетаданных", ИмяМетаданных);
		Если ИмяФормы <> Неопределено Тогда
			УсловиеМетаданных = УсловиеМетаданных + " И (Рег.Форма = &ИмяФормы)";
			Запрос.УстановитьПараметр("ИмяФормы", ИмяФормы);
		КонецЕсли;
		Если ИмяСобытия <> Неопределено Тогда
			УсловиеМетаданных = УсловиеМетаданных + " И (Спр.Событие = &ИмяСобытия)";
			Запрос.УстановитьПараметр("ИмяСобытия", ИмяСобытия);
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеМетаданных", УсловиеМетаданных);
		// Условие по лентам новостей.
		Если (ТипЗнч(СписокЛентНовостей) = ТипМассив)
				И (СписокЛентНовостей.Количество() > 0) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "Рег.Новость.ЛентаНовостей В (&СписокЛентНовостей)");
			Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей);
		ИначеЕсли (ТипЗнч(СписокЛентНовостей) = ТипСписокЗначений)
				И (СписокЛентНовостей.Количество() > 0) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "Рег.Новость.ЛентаНовостей В (&СписокЛентНовостей)");
			Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей.ВыгрузитьЗначения());
		Иначе // Если СписокЛентНовостей = Неопределено или переданы массив или список значений нулевого размера.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "ИСТИНА");
		КонецЕсли;

		Результат = Запрос.Выполнить(); // ПолучитьКонтекстныеНовости(... "Для форм, все поля").

		Если НЕ Результат.Пустой() Тогда
			Таблица = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
			Таблица.Колонки.Добавить("ИконкаНовости"); // Картинка или Неопределено.
			Если ПолучатьКатегорииНовостей = Истина Тогда
				Таблица.Колонки.Добавить("ЗначенияКатегорий"); // Массив структур.
			КонецЕсли;
			С = 0; // АПК:247 это счетчик.
			МассивНовостей = Новый Массив;
			Для Каждого ТекущаяНовость Из Таблица Цикл
				ТекущаяНовость.НомерСтрокиНовости = С;
				ТекущаяНовость.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекущаяНовость.Новость);
				Если ТипЗнч(ТекущаяНовость.ИконкаНовостиДанные) = ТипХранилищеЗначения Тогда
					ИконкаНовостиДанные = ТекущаяНовость.ИконкаНовостиДанные.Получить();
					Если ТипЗнч(ИконкаНовостиДанные) = ТипДвоичныеДанные Тогда
						Попытка
							ТекущаяНовость.ИконкаНовости = Новый Картинка(ИконкаНовостиДанные, Истина);
						Исключение
							ТекущаяНовость.ИконкаНовости = Неопределено;
						КонецПопытки;
					ИначеЕсли ТипЗнч(ИконкаНовостиДанные) = ТипКартинка Тогда
						ТекущаяНовость.ИконкаНовости = ИконкаНовостиДанные;
					Иначе
						ТекущаяНовость.ИконкаНовости = Неопределено;
					КонецЕсли;
				Иначе
					ТекущаяНовость.ИконкаНовости = Неопределено;
				КонецЕсли;
				С = С + 1; // АПК:247 это счетчик.
				Если ПолучатьКатегорииНовостей = Истина Тогда
					ТекущаяНовость.ЗначенияКатегорий = Новый Массив;
					МассивНовостей.Добавить(ТекущаяНовость.Новость);
				КонецЕсли;
			КонецЦикла;
			Если ПолучатьКатегорииНовостей = Истина Тогда
				Если МассивНовостей.Количество() > 0 Тогда
					// Заполнить категориями.
					Запрос = Новый Запрос;
					Запрос.Текст = "
						|ВЫБРАТЬ
						|	Рег.Новость                   КАК Новость,
						|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
						|	Рег.КатегорияНовостей.Код     КАК КатегорияНовостейКод,
						|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей,
						|	Рег.УсловиеОтбора             КАК УсловиеОтбора
						|ИЗ
						|	РегистрСведений.КатегорииНовостейПростые КАК Рег
						|ГДЕ
						|	Рег.Новость В (&МассивНовостей)
						|";
					Запрос.УстановитьПараметр("МассивНовостей", МассивНовостей);

					РезультатЗапроса = Запрос.Выполнить(); // ПолучитьКонтекстныеНовости(... "Для форм, все поля").
					Если НЕ РезультатЗапроса.Пустой() Тогда
						Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
						Пока Выборка.Следующий() Цикл
							// Для одной новости может быть несколько строк, например - для разных метаданных, форм или событий.
							НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("Новость", Выборка.Новость));
							Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
								СтруктураЗначенийКатегорииИЗначения = Новый Структура();
									СтруктураЗначенийКатегорииИЗначения.Вставить("КатегорияНовостей"        , Выборка.КатегорияНовостей);
									СтруктураЗначенийКатегорииИЗначения.Вставить("КатегорияНовостейКод"     , Выборка.КатегорияНовостейКод);
									СтруктураЗначенийКатегорииИЗначения.Вставить("ЗначениеКатегорииНовостей", Выборка.ЗначениеКатегорииНовостей);
									СтруктураЗначенийКатегорииИЗначения.Вставить("УсловиеОтбора"            , Выборка.УсловиеОтбора);
								НайденнаяСтрока.ЗначенияКатегорий.Добавить(СтруктураЗначенийКатегорииИЗначения);
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Картинки уже получены их хранилища значений и помещены в колонку "ИконкаНовости",
			//  а колонка "ИконкаНовостиДанные" больше не нужна.
			Таблица.Колонки.Удалить("ИконкаНовостиДанные");
		Иначе
			Таблица = Новый ТаблицаЗначений;
		КонецЕсли;

	ИначеЕсли Вариант = "Для форм, простой" Тогда

		// В запросе не учитываются отборы, настроенные администратором.
		// В запросе не обрабатывается НастройкиПолученияНовостей.ПолучатьКатегорииНовостей.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	0                                                 КАК НомерСтрокиНовости,
			|	Рег.Новость.ЛентаНовостей                         КАК ЛентаНовостей,
			|	Рег.Новость                                       КАК Новость,
			|	Рег.Новость.Наименование                          КАК НовостьНаименование,
			|	Рег.Новость.Подзаголовок                          КАК НовостьПодзаголовок,
			|	Рег.Новость.ЛентаНовостей.Код                     КАК НовостьКодЛентыНовостей,
			|	Рег.Новость.УИННовости                            КАК УИННовости,
			|	Рег.Новость.ДатаПубликации                        КАК ДатаПубликации,
			|	МАКСИМУМ(Рег.Важность)                            КАК Важность,
			|	МАКСИМУМ(Рег.Актуальность)                        КАК Актуальность,
			|	Рег.Метаданные                                    КАК Метаданные,
			|	Рег.Форма                                         КАК Форма,
			|	""""                                              КАК Событие,
			|	ЛОЖЬ                                              КАК ПоказыватьВФормеОбъекта,
			|	ЛОЖЬ                                              КАК ЭтоПостояннаяНовость,
			|	ЕСТЬNULL(РегСостояния.Прочтена, ЛОЖЬ)             КАК Прочтена,
			|	ЕСТЬNULL(РегСостояния.ОповещениеВключено, ИСТИНА) КАК ОповещениеВключено,
			|	&ПустаяДата                                       КАК ДатаНачалаОповещения,
			|	НЕОПРЕДЕЛЕНО                                      КАК ИконкаНовости
			|ИЗ
			|	РегистрСведений.ПривязкаНовостейКМетаданным КАК Рег
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СостоянияНовостей КАК РегСостояния
			|	ПО
			|		РегСостояния.Новость = Рег.Новость
			|		И РегСостояния.Пользователь = &ТекущийПользователь
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК РегРассчитанныеОтборы_РедкоМеняющиеся
			|	ПО
			|		РегРассчитанныеОтборы_РедкоМеняющиеся.Новость = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_Общие КАК РегРассчитанныеОтборы_Общие
			|	ПО
			|		РегРассчитанныеОтборы_Общие.Новость = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных КАК РегРассчитанныеОтборы_ДляОбластиДанных
			|	ПО
			|		РегРассчитанныеОтборы_ДляОбластиДанных.Новость = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_Пользовательские КАК РегРассчитанныеОтборы_Пользовательские
			|	ПО
			|		РегРассчитанныеОтборы_Пользовательские.Пользователь = &ТекущийПользователь
			|		И РегРассчитанныеОтборы_Пользовательские.Новость = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СвойстваНовостей КАК РегСвойства
			|	ПО
			|		Рег.Новость = РегСвойства.Новость
			|
			|ГДЕ
			|	(&МетаУсловиеМетаданных)
			|	И ( // Не просроченные новости
			|		Рег.Актуальность = ИСТИНА
			|		ИЛИ &ОтборНовостей_ТолькоАктивные = ЛОЖЬ
			|	)
			|	И Рег.Новость.ПометкаУдаления = ЛОЖЬ // Обязательная проверка новости на пометку удаления
			|	И ЕСТЬNULL(РегРассчитанныеОтборы_РедкоМеняющиеся.РезультатОтбора, ИСТИНА) = ИСТИНА // Отбор по версии платформы, версии конфигурации, дате завершения и опубликованности
			|	И ЕСТЬNULL(РегРассчитанныеОтборы_Общие.РезультатОтбора, ИСТИНА) = ИСТИНА // Отборы, настроенные администратором
			|	И ЕСТЬNULL(РегРассчитанныеОтборы_ДляОбластиДанных.РезультатОтбора, ИСТИНА) = ИСТИНА // Отборы по разделенным ФО и т.п.
			|	И ЕСТЬNULL(РегРассчитанныеОтборы_Пользовательские.РезультатОтбора, ИСТИНА) = ИСТИНА // Отборы, настроенные пользователем
			|	И (&МетаУсловиеСписокЛентНовостей)
			|	И Рег.Новость.ЛентаНовостей.ПометкаУдаления = ЛОЖЬ // Вне зависимости от переданного списка лент новостей, лента новостей не должна быть помечена на удаление
			|	И ЕСТЬNULL(РегСвойства.ТребуетсяПересчетОтборов, ЛОЖЬ) = ЛОЖЬ // Фильтр по только что полученным новостям, по которым еще не рассчитаны отборы.
			|
			|СГРУППИРОВАТЬ ПО
			|	Рег.Новость.ЛентаНовостей,
			|	Рег.Новость,
			|	Рег.Новость.Наименование,
			|	Рег.Новость.Подзаголовок,
			|	Рег.Новость.УИННовости,
			|	Рег.Новость.ДатаПубликации,
			|	Рег.Метаданные,
			|	Рег.Форма,
			|	ЕСТЬNULL(РегСостояния.Прочтена, ЛОЖЬ),
			|	ЕСТЬNULL(РегСостояния.ОповещениеВключено, ИСТИНА)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Рег.Новость.ДатаПубликации УБЫВ
			|";
		Запрос.УстановитьПараметр("ТекущийПользователь"         , Пользователи.ТекущийПользователь()); // В модели сервиса запускается только с включенным разделителем.
		Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата"    , ТекущаяУниверсальнаяДата());
		Запрос.УстановитьПараметр("ПустаяДата"                  , '00010101000000');
		Запрос.УстановитьПараметр("ОтборНовостей_ТолькоАктивные", СтруктураНастроекПоказаНовостей.ОтборНовостей_ТолькоАктивные);
		// Условие по метаданным.
		УсловиеМетаданных = "(Рег.Метаданные = &ИмяМетаданных)";
		Запрос.УстановитьПараметр("ИмяМетаданных", ИмяМетаданных);
		Если ИмяФормы <> Неопределено Тогда
			УсловиеМетаданных = УсловиеМетаданных + " И (Рег.Форма = &ИмяФормы)";
			Запрос.УстановитьПараметр("ИмяФормы", ИмяФормы);
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеМетаданных", УсловиеМетаданных);
		// Условие по лентам новостей.
		Если (ТипЗнч(СписокЛентНовостей) = ТипМассив)
				И (СписокЛентНовостей.Количество() > 0) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "Рег.Новость.ЛентаНовостей В (&СписокЛентНовостей)");
			Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей);
		ИначеЕсли (ТипЗнч(СписокЛентНовостей) = ТипСписокЗначений)
				И (СписокЛентНовостей.Количество() > 0) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "Рег.Новость.ЛентаНовостей В (&СписокЛентНовостей)");
			Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей.ВыгрузитьЗначения());
		Иначе // Если СписокЛентНовостей = Неопределено или переданы массив или список значений нулевого размера.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "ИСТИНА");
		КонецЕсли;

		Результат = Запрос.Выполнить(); // ПолучитьКонтекстныеНовости(... "Для форм, простой").

		Если НЕ Результат.Пустой() Тогда
			Таблица = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
			С = 0; // АПК:247 это счетчик.
			Для Каждого ТекущаяНовость Из Таблица Цикл
				ТекущаяНовость.НомерСтрокиНовости = С;
				С = С + 1; // АПК:247 это счетчик.
			КонецЦикла;
		Иначе
			Таблица = Новый ТаблицаЗначений;
		КонецЕсли;

	ИначеЕсли Вариант = "Для формы контекстных новостей" Тогда

		// В запросе не учитываются отборы, настроенные администратором.
		// В запросе не обрабатывается НастройкиПолученияНовостей.ПолучатьКатегорииНовостей.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|// Набор полей должен быть таким, чтобы исключить задвоение новостей.
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	0                                                        КАК НомерСтрокиНовости,
			|	Рег.Новость.ЛентаНовостей                                КАК ЛентаНовостей,
			|	Рег.Новость                                              КАК Новость,
			|	Рег.Новость.Наименование                                 КАК НовостьНаименование,
			|	Рег.Новость.Подзаголовок                                 КАК НовостьПодзаголовок,
			|	Рег.Новость.ЛентаНовостей.Код                            КАК НовостьКодЛентыНовостей,
			|	Рег.Новость.УИННовости                                   КАК УИННовости,
			|	Рег.Новость.ДатаПубликации                               КАК ДатаПубликации,
			|	Рег.Метаданные                                           КАК Метаданные,
			|	Рег.ЭтоПостояннаяНовость                                 КАК ЭтоПостояннаяНовость,
			|	ЕСТЬNULL(РегСостояния.Прочтена, ЛОЖЬ)                    КАК Прочтена,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РегСостояния.ДатаНачалаОповещения, &ПустаяДата) <= &ТекущаяУниверсальнаяДата ТОГДА
			|			ЕСТЬNULL(РегСостояния.ОповещениеВключено, ИСТИНА)
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ                                                    КАК ОповещениеВключено,
			|	ЕСТЬNULL(РегСостояния.ДатаНачалаОповещения, &ПустаяДата) КАК ДатаНачалаОповещения,
			|	НЕОПРЕДЕЛЕНО                                             КАК ИконкаНовости
			|ИЗ
			|	РегистрСведений.ПривязкаНовостейКМетаданным КАК Рег
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СостоянияНовостей КАК РегСостояния
			|	ПО
			|		РегСостояния.Новость = Рег.Новость
			|		И РегСостояния.Пользователь = &ТекущийПользователь
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК РегРассчитанныеОтборы_РедкоМеняющиеся
			|	ПО
			|		РегРассчитанныеОтборы_РедкоМеняющиеся.Новость = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_Общие КАК РегРассчитанныеОтборы_Общие
			|	ПО
			|		РегРассчитанныеОтборы_Общие.Новость = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных КАК РегРассчитанныеОтборы_ДляОбластиДанных
			|	ПО
			|		РегРассчитанныеОтборы_ДляОбластиДанных.Новость = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_Пользовательские КАК РегРассчитанныеОтборы_Пользовательские
			|	ПО
			|		РегРассчитанныеОтборы_Пользовательские.Пользователь = &ТекущийПользователь
			|		И РегРассчитанныеОтборы_Пользовательские.Новость = Рег.Новость
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СвойстваНовостей КАК РегСвойства
			|	ПО
			|		Рег.Новость = РегСвойства.Новость
			|
			|ГДЕ
			|	(&МетаУсловиеМетаданных)
			|	И ( // Не просроченные новости.
			|		Рег.Актуальность = ИСТИНА
			|		ИЛИ &ОтборНовостей_ТолькоАктивные = ЛОЖЬ
			|	)
			|	И Рег.Новость.ПометкаУдаления = ЛОЖЬ // Обязательная проверка новости на пометку удаления
			|	И ЕСТЬNULL(РегРассчитанныеОтборы_РедкоМеняющиеся.РезультатОтбора, ИСТИНА) = ИСТИНА // Отбор по версии платформы, версии конфигурации, дате завершения и опубликованности
			|	И ЕСТЬNULL(РегРассчитанныеОтборы_Общие.РезультатОтбора, ИСТИНА) = ИСТИНА // Отборы, настроенные администратором
			|	И ЕСТЬNULL(РегРассчитанныеОтборы_ДляОбластиДанных.РезультатОтбора, ИСТИНА) = ИСТИНА // Отборы по разделенным ФО и т.п.
			|	И ЕСТЬNULL(РегРассчитанныеОтборы_Пользовательские.РезультатОтбора, ИСТИНА) = ИСТИНА // Отборы, настроенные пользователем
			|	И (&МетаУсловиеСписокЛентНовостей)
			|	И Рег.Новость.ЛентаНовостей.ПометкаУдаления = ЛОЖЬ // Вне зависимости от переданного списка лент новостей, лента новостей не должна быть помечена на удаление
			|	И ЕСТЬNULL(РегСвойства.ТребуетсяПересчетОтборов, ЛОЖЬ) = ЛОЖЬ // Фильтр по только что полученным новостям, по которым еще не рассчитаны отборы.
			|УПОРЯДОЧИТЬ ПО
			|	Рег.Новость.ДатаПубликации УБЫВ
			|";
		Запрос.УстановитьПараметр("ТекущийПользователь"         , Пользователи.ТекущийПользователь()); // В модели сервиса запускается только с включенным разделителем.
		Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата"    , ТекущаяУниверсальнаяДата());
		Запрос.УстановитьПараметр("ПустаяДата"                  , '00010101000000');
		Запрос.УстановитьПараметр("ОтборНовостей_ТолькоАктивные", СтруктураНастроекПоказаНовостей.ОтборНовостей_ТолькоАктивные);
		// Условие по метаданным (Метаданные + Форма(если есть)).
		УсловиеМетаданных = "(Рег.Метаданные = &ИмяМетаданных)";
		Запрос.УстановитьПараметр("ИмяМетаданных", ИмяМетаданных);
		Если ИмяФормы <> Неопределено Тогда
			УсловиеМетаданных = УсловиеМетаданных + " И (Рег.Форма = &ИмяФормы)";
			Запрос.УстановитьПараметр("ИмяФормы", ИмяФормы);
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеМетаданных", УсловиеМетаданных);
		// Условие по лентам новостей.
		Если (ТипЗнч(СписокЛентНовостей) = ТипМассив)
				И (СписокЛентНовостей.Количество() > 0) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "Рег.Новость.ЛентаНовостей В (&СписокЛентНовостей)");
			Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей);
		ИначеЕсли (ТипЗнч(СписокЛентНовостей) = ТипСписокЗначений)
				И (СписокЛентНовостей.Количество() > 0) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "Рег.Новость.ЛентаНовостей В (&СписокЛентНовостей)");
			Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей.ВыгрузитьЗначения());
		Иначе // Если СписокЛентНовостей = Неопределено или переданы массив или список значений нулевого размера.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеСписокЛентНовостей", "ИСТИНА");
		КонецЕсли;

		Результат = Запрос.Выполнить(); // ПолучитьКонтекстныеНовости(... "Для формы контекстных новостей")

		Если НЕ Результат.Пустой() Тогда
			Таблица = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
			С = 0; // АПК:247 это счетчик.
			Для Каждого ТекущаяНовость Из Таблица Цикл
				ТекущаяНовость.НомерСтрокиНовости = С;
				С = С + 1; // АПК:247 это счетчик.
			КонецЦикла;
		Иначе
			Таблица = Новый ТаблицаЗначений;
		КонецЕсли;

	КонецЕсли;

#КонецОбласти

	Возврат Таблица;

КонецФункции

// Функция возвращает структуру новости из массива структур контекстных новостей.
// Массив структур готовится с помощью ОбщегоНазначения.ТаблицаЗначенийВМассив(ПолучитьКонтекстныеНовости(...)).
//
// Параметры:
//  АдресМассиваНовостей - Строка - Адрес временного хранилища;
//  НомерСтрокиНовости  - Число  - идентификатор новости, которую необходимо найти по значению ключа НомерСтрокиНовости.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//    * НомерСтрокиНовости      - Число - для реализации нажатия в подменю формы;
//    * ЛентаНовостей           - СправочникСсылка.ЛентаНовостей;
//    * Новость                 - СправочникСсылка.Новости;
//    * НовостьНаименование     - Строка (100) - заголовок новости;
//    * НовостьПодзаголовок     - Строка (100) - подзаголовок новости;
//    * УИННовости              - Строка (255) -;
//    * ДатаПубликации          - Дата;
//    * Важность                - Число (1,0) - рассчитанная на текущую дату контекстная важность
//                                  (с учетом даты сброса контекстной важности);
//    * Актуальность            - Булево - рассчитанная на текущую дату актуальность (с учетом даты завершения новости);
//    * Метаданные              - Строка (50);
//    * Форма                   - Строка (50);
//    * Событие                 - Строка (50) // Для варианта "Для форм, простой" - пустая строка;
//    * ПоказыватьВФормеОбъекта - Булево // Для варианта "Для форм, простой" - всегда ЛОЖЬ;
//    * ЭтоПостояннаяНовость    - Булево // Для варианта "Для форм, простой" - всегда ЛОЖЬ;
//    * Прочтена                - Булево;
//    * ОповещениеВключено      - Булево;
//    * ДатаНачалаОповещения    - Дата // Для варианта "Для форм, простой" - всегда пустая дата (01.01.0001).
//
Функция НайтиКонтекстнуюНовостьВМассиве(АдресМассиваНовостей, НомерСтрокиНовости) Экспорт

	ТипМассив = Тип("Массив");

	Попытка
		МассивСтруктурНовостей = ПолучитьИзВременногоХранилища(АдресМассиваНовостей);
	Исключение
		Возврат Неопределено;
	КонецПопытки;

	НайденнаяНовость = Неопределено;

	Если ТипЗнч(МассивСтруктурНовостей) = ТипМассив Тогда
		Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
			Если ТекущаяНовость.НомерСтрокиНовости = НомерСтрокиНовости Тогда
				НайденнаяНовость = ТекущаяНовость;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат НайденнаяНовость;

КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Процедура выполняет все обновления новостей:
//   1. Получение и обработка новостей с серверов новостных центров
//	     (ежеминутно, каждые 15 минут, каждый час, ежедневно);
//   2. Обновление классификаторов (ежедневно);
//   3. Автоудаление новостей (ежедневно);
//   4. Обновление периодических свойств (важность, актуальность) (каждые 30 минут);
//   5. Обновление привязок к метаданным (+ важность) (каждые 30 минут);
//   6. Проверка версии платформы (каждые 6 часов).
//
Процедура ВсеОбновленияНовостей() Экспорт

	// Если идет обновление конфигурации, то все регламентные задания блокируются.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей);

	НаименованиеПроцедурыФункции = "ВсеОбновленияНовостей"; // Идентификатор.
	КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.

	СостояниеПодсистемы = ПолучитьСостояниеПодсистемы();

	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Регламентное обновление подсистемы новостей'"));

	УстановитьПривилегированныйРежим(Истина);

	ЕстьОшибки = Ложь;

	Если МонопольныйРежим() Тогда
		// Если база работает в монопольном режиме (например, запущено фоновое задание, которое включило монопольный режим
		//  и выгружает данные из области данных для последующей загрузки в модели сервиса),
		//  то будут ошибки при всех попытках записи данных в базу.
		// Поэтому в монопольном режиме не следует выполнять никаких обновлений в подсистеме новостей.
		ЕстьОшибки = Истина;
		ОписаниеРезультата = НСтр("ru='Принудительное завершение выполнения регламентного задания: информационная база работает в монопольном режиме.'");
	КонецЕсли;

	Если ЕстьОшибки = Ложь Тогда

		// Даты последних обновлений хранятся в регистре сведений ВсеОбновленияНовостей.
		// Измерение ВидОбновления может содержать следующие значения:
		// 1. Получение и обработка новостей из лент новостей (с обязательным заполнением измерения "ЛентаНовостей");
		// 2. Обновление классификаторов;
		// 3. Автоудаление новостей;
		// 4. Обновление периодических свойств (важность, актуальность);
		// 5. Обновление привязок к метаданным (+ важность);
		// 6. Проверка версии платформы.

		// Все даты хранятся "по гринвичу".
		ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

		Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда

			ОписаниеРезультата = НСтр("ru='Разрешена работа с новостями. Выполнение шагов обновления.'");

#Область ВсеОбновленияНовостей_ЗагрузкаНовостей

			// 1. Получение и обработка новостей из лент новостей (с обязательным заполнением измерения "ЛентаНовостей").
			ВидОбновления = "ЗагрузкаНовостей"; // Идентификатор.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + "." + ВидОбновления, // Идентификатор.
				НСтр("ru='1. Получение и обработка новостей из лент новостей (с обязательным заполнением измерения ЛентаНовостей)'"));

				РазрешенаРаботаСНовостямиЧерезИнтернет = ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет();

				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	Спр.Ссылка                                          КАК ЛентаНовостей,
					|	Спр.ЧастотаОбновления                               КАК ЧастотаОбновления,
					|	ЕСТЬNULL(Рег.ДатаСледующегоОбновления, &ПустаяДата) КАК ДатаСледующегоОбновления
					|ИЗ
					|	Справочник.ЛентыНовостей КАК Спр
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.ВсеОбновленияНовостей КАК Рег
					|	ПО
					|		Рег.ВидОбновления = ""Получение новостей""
					|		И Рег.ЛентаНовостей = Спр.Ссылка
					|ГДЕ
					|	Спр.ПометкаУдаления = ЛОЖЬ
					|	И Спр.ЧастотаОбновления > 0
					|	// Если установлен режим работы только с локальными новостями, то
					|	//  - не загружать никакие классификаторы;
					|	//  - не обрабатывать ленты новостей с протоколами, отличными от file.
					|	И
					|	(
					|		&РазрешенаРаботаСНовостямиЧерезИнтернет = ИСТИНА
					|		ИЛИ
					|		Спр.Протокол = ""file""
					|	)
					|";
				Запрос.УстановитьПараметр("РазрешенаРаботаСНовостямиЧерезИнтернет", РазрешенаРаботаСНовостямиЧерезИнтернет);
				Запрос.УстановитьПараметр("ПустаяДата", '00010101');

				РезультатЗапроса = Запрос.Выполнить(); // ВсеОбновленияНовостей.

				МассивЛентНовостей = Новый Массив;
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						Если Выборка.ЧастотаОбновления = 1 Тогда // Ежедневно
							Если Выборка.ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
								МассивЛентНовостей.Добавить(Выборка.ЛентаНовостей);
							КонецЕсли;
						ИначеЕсли Выборка.ЧастотаОбновления = 2 Тогда // Ежечасно
							Если Выборка.ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
								МассивЛентНовостей.Добавить(Выборка.ЛентаНовостей);
							КонецЕсли;
						ИначеЕсли Выборка.ЧастотаОбновления = 3 Тогда // Каждые 15 минут
							Если Выборка.ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
								МассивЛентНовостей.Добавить(Выборка.ЛентаНовостей);
							КонецЕсли;
						ИначеЕсли Выборка.ЧастотаОбновления = 4 Тогда // Ежеминутно
							Если Выборка.ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
								МассивЛентНовостей.Добавить(Выборка.ЛентаНовостей);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				Если МассивЛентНовостей.Количество() > 0 Тогда
					ЛогШаговВыполненияВложенный.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Массив лент новостей для получения новостей. Размер = %1. Состав: %2'"),
							МассивЛентНовостей.Количество(),
							ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(МассивЛентНовостей, ";")));
					ПолучитьИОбработатьНовостиПоЛентамНовостей(МассивЛентНовостей, КонтекстВыполненияВложенныйВложенный);
				Иначе
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Нет лент новостей для регламентного обновления'"));
				КонецЕсли;

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ВсеОбновленияНовостей_ОбновлениеКлассификаторов

			// 2. Обновление классификаторов.
			ВидОбновления = "ОбновлениеКлассификаторов"; // Идентификатор.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + "." + ВидОбновления, // Идентификатор.
				НСтр("ru='2. Обновление классификаторов'"));

				Если РазрешенаРаботаСНовостямиЧерезИнтернет = Истина Тогда

					Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
					Запись.ВидОбновления = "Обновление классификаторов"; // Идентификатор.
					Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
					Запись.Прочитать(); // Только чтение, без последующей записи.
					Если Запись.Выбран() Тогда
						ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
					Иначе
						ДатаСледующегоОбновления = '00010101';
					КонецЕсли;
					Запись = Неопределено;

					ЛогШаговВыполненияВложенный.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Разрешена работа через интернет. ТекущаяДатаДляРегистров: %1 / ДатаСледующегоОбновления: %2'"),
							ТекущаяДатаДляРегистров,
							ДатаСледующегоОбновления));

					// Обновлять классификаторы 1 раз в день.
					Если ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
						ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Наступил срок выполнения.'"));
						ОбновитьСтандартныеСпискиДляНовостей_Ежедневно(КонтекстВыполненияВложенныйВложенный);
					Иначе
						ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Срок не наступил.'"));
					КонецЕсли;

				Иначе
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Обновление классификаторов через интернет отключено'"));
				КонецЕсли;

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ВсеОбновленияНовостей_АвтоудалениеНовостей

			// 3. Автоудаление новостей.
			ВидОбновления = "АвтоудалениеНовостей"; // Идентификатор.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + "." + ВидОбновления, // Идентификатор.
				НСтр("ru='3. Автоудаление новостей'"));

				Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
				Запись.ВидОбновления = "Автоудаление новостей";
				Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
				Запись.Прочитать(); // Только чтение, без последующей записи.
				Если Запись.Выбран() Тогда
					ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
				Иначе
					ДатаСледующегоОбновления = '00010101';
				КонецЕсли;
				Запись = Неопределено;

				ЛогШаговВыполненияВложенный.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='ТекущаяДатаДляРегистров: %1
							|ДатаСледующегоОбновления: %2'"),
						ТекущаяДатаДляРегистров,
						ДатаСледующегоОбновления));

				// Автоматически удалять новости 1 раз в день.
				Если ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Наступил срок выполнения.'"));
					УдалитьНовости_Ежедневно(КонтекстВыполненияВложенныйВложенный);
				Иначе
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Срок не наступил.'"));
				КонецЕсли;

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ВсеОбновленияНовостей_ОбновлениеПериодическихСвойств

			// 4. Обновление периодических свойств (важность, актуальность).
			ВидОбновления = "ОбновлениеПериодическихСвойств"; // Идентификатор.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + "." + ВидОбновления, // Идентификатор.
				НСтр("ru='4. Обновление периодических свойств (важность, актуальность)'"));

				Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
				Запись.ВидОбновления = "Обновление периодических свойств";
				Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
				Запись.Прочитать(); // Только чтение, без последующей записи.
				Если Запись.Выбран() Тогда
					ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
				Иначе
					ДатаСледующегоОбновления = '00010101';
				КонецЕсли;
				Запись = Неопределено;

				ЛогШаговВыполненияВложенный.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='ТекущаяДатаДляРегистров: %1
							|ДатаСледующегоОбновления: %2
							|СостояниеПодсистемы: %3'"),
						ТекущаяДатаДляРегистров,
						ДатаСледующегоОбновления,
						СостояниеПодсистемы));

				// Обновление периодических свойств каждые 30 минут (а также после получения новостей).
				Если (ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров) Тогда
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Наступил срок выполнения.'"));
					ОбновлениеПериодическихСвойствНовостей(КонтекстВыполненияВложенныйВложенный);
				ИначеЕсли (СостояниеПодсистемы = "ТребуетсяПересчетОтборовПослеДлительногоОжидания") Тогда
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Необходимо выполнение из-за состояния подсистемы.'"));
					ОбновлениеПериодическихСвойствНовостей(КонтекстВыполненияВложенныйВложенный);
				Иначе
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Срок не наступил. Состояние подсистемы удовлетворительное.'"));
				КонецЕсли;

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ВсеОбновленияНовостей_ОбновлениеПривязокКМетаданным

			// 5. Обновление привязок к метаданным (+ важность).
			ВидОбновления = "ОбновлениеПривязокКМетаданным"; // Идентификатор.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + "." + ВидОбновления, // Идентификатор.
				НСтр("ru='5. Обновление привязок к метаданным (+ важность)'"));

				Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
				Запись.ВидОбновления = "Обновление привязок к метаданным";
				Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
				Запись.Прочитать(); // Только чтение, без последующей записи.
				Если Запись.Выбран() Тогда
					ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
				Иначе
					ДатаСледующегоОбновления = '00010101';
				КонецЕсли;
				Запись = Неопределено;

				ЛогШаговВыполненияВложенный.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='ТекущаяДатаДляРегистров: %1
							|ДатаСледующегоОбновления: %2'"),
						ТекущаяДатаДляРегистров,
						ДатаСледующегоОбновления));

				// Обновление привязок к метаданным каждые 30 минут (а также после получения новостей).
				Если ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Наступил срок выполнения.'"));
					ОбновлениеПривязокКМетаданным(КонтекстВыполненияВложенныйВложенный);
				Иначе
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Срок не наступил.'"));
				КонецЕсли;

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ВсеОбновленияНовостей_ПроверкаВерсииПлатформы

			// 6. Проверка версии платформы.
			ВидОбновления = "ПроверкаВерсииПлатформы"; // Идентификатор.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + "." + ВидОбновления, // Идентификатор.
				НСтр("ru='6. Проверка версии платформы'"));

				Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
				Запись.ВидОбновления = "Проверка версии платформы";
				Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
				Запись.Прочитать(); // Только чтение, без последующей записи.
				Если Запись.Выбран() Тогда
					ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
				Иначе
					ДатаСледующегоОбновления = '00010101';
				КонецЕсли;
				Запись = Неопределено;

				ЛогШаговВыполненияВложенный.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='ТекущаяДатаДляРегистров: %1
							|ДатаСледующегоОбновления: %2'"),
						ТекущаяДатаДляРегистров,
						ДатаСледующегоОбновления));

				// Проверка версии платформы каждые 6 часов (а также при старте клиентского приложения).
				Если ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Наступил срок выполнения.'"));
					ПроверитьИзменениеВерсииПлатформы(КонтекстВыполненияВложенныйВложенный);
				Иначе
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Срок не наступил.'"));
				КонецЕсли;

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

		Иначе
			ОписаниеРезультата = НСтр("ru='Запрещена работа с новостями.'");
		КонецЕсли;

	КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Все обновления новостей'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
		НСтр("ru='Новости. Все обновления новостей'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
		?(КодРезультата > 0,
			УровеньЖурналаРегистрации.Ошибка,
			УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
		Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		КомментарийДляЖурналаРегистрации(
			НСтр("ru='Все обновления новостей'"),
			ШагВыполнения,
			КонтекстВыполнения,
			"Расширенный"), // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура запускает удаление новостей (неактуальных и актуальных).
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура УдалитьНовости_Ежедневно(КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "УдалитьНовости_Ежедневно"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Удаление новостей (ежедневно)'"));

		Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда

			ОписаниеРезультата = НСтр("ru='Разрешена работа с новостями'");

			ТекущаяДатаДляРасчетов = ТекущаяУниверсальнаяДата();

			// 1. Подготовить список новостей и список вспомогательных данных (регистры сведений) для удаления.
			// В следующих регистрах сведений Новость установлена как "Ведущее измерение":
			// - РегистрСведений.КатегорииНовостейИнтервалыВерсий;
			// - РегистрСведений.КатегорииНовостейПростые;
			// - РегистрСведений.ПериодическиеСвойстваНовостей;
			// - РегистрСведений.ПривязкаНовостейКМетаданным;
			// - РегистрСведений.РассчитанныеОтборыПоНовостям_Общие;
			// - РегистрСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных;
			// - РегистрСведений.РассчитанныеОтборыПоНовостям_Пользовательские;
			// - РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся;
			// - РегистрСведений.СостоянияНовостей;
			// - РегистрСведений.СвойстваНовостей.
			// В следующих регистрах сведений Новость хранится не как ссылка, а только как УИН - необходимо найти такие записи и удалить их вручную:
			// - РегистрСведений.КатегорииНовостейПростыеНеобработанные;
			// - РегистрСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.

			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".УдалениеНовостей_ПолучитьСписокДанныхДляУдаления", // Идентификатор.
				НСтр("ru='Удаление новостей (ежедневно) / УдалениеНовостей_ПолучитьСписокДанныхДляУдаления'"));

				ОписаниеОтборов = Новый Структура;
					ОписаниеОтборов.Вставить("Актуальные", Истина);
					ОписаниеОтборов.Вставить("Неактуальные", Истина);
					ОписаниеОтборов.Вставить("ПомеченныеНаУдаление", Истина);
					ОписаниеОтборов.Вставить("СтараяВерсия", Истина);

				ДанныеДляУдаления = УдалениеНовостей_ПолучитьСписокДанныхДляУдаления(ТекущаяДатаДляРасчетов, ОписаниеОтборов);

				ЛогШаговВыполненияВложенный.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Собраны данные для удаления:
							|Новостей (для удаления): %1
							|Новостей (для установки пометки удаления): %2
							|КатегорииНовостейПростыеНеобработанные: %3
							|КатегорииНовостейИнтервалыВерсийНеобработанные: %4'"),
						ДанныеДляУдаления.НовостиДляУдаления.Количество(),
						ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления.Количество(),
						ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные.Количество(),
						ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные.Количество()));

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				Неопределено);

			// 2. Непосредственно удаление.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".УдалениеНовостей_ПометитьНаУдалениеДанные", // Идентификатор.
				НСтр("ru='Удаление новостей (ежедневно) / УдалениеНовостей_ПометитьНаУдалениеДанные'"));

				КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
				УдалениеНовостей_ПометитьНаУдалениеДанные(ДанныеДляУдаления, КонтекстВыполненияВложенныйВложенный);

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				КонтекстВыполненияВложенныйВложенный);

			// 3. Сохранить дату последнего выполнения / обновления.
			Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
			Запись.ВидОбновления = "Автоудаление новостей";
			Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
			Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРасчетов;
			Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРасчетов + 24*60*60;
			Запись.Записать(Истина);

		Иначе
			ОписаниеРезультата = НСтр("ru='Запрещена работа с новостями.'");
		КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. УдалитьНовости_Ежедневно'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Удаление новостей (ежедневно)'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Расширенный"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура запускает пересчет периодических свойств новостей (важность, актуальность).
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ОбновлениеПериодическихСвойствНовостей(КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеПериодическихСвойствНовостей"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;

	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Обновление периодических свойств новостей'"));

		Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда
			ТекущаяДатаДляРасчетов = ТекущаяУниверсальнаяДата();

			// Получить данные, которые необходимо обновить.
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Спр.Ссылка КАК Новость,
				|	// ВажностьОбщая
				|	ВЫБОР // Важность также может быть сброшена актуальностью новости (когда новость становится неактуальной, то она становится и неважной)
				|		КОГДА (Спр.ДатаСбросаВажности МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов)
				|				ИЛИ (Спр.ДатаЗавершения МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов)
				|				ИЛИ Спр.ПометкаУдаления // Отменена публикация
				|			ТОГДА 0
				|		ИНАЧЕ Спр.Важность
				|	КОНЕЦ КАК ВажностьОбщаяРассчитанная,
				|	// Актуальность
				|	ВЫБОР
				|		КОГДА (Спр.ДатаЗавершения МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов)
				|				ИЛИ Спр.ПометкаУдаления // Отменена публикация
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК АктуальностьРассчитанная
				|ИЗ
				|	Справочник.Новости КАК Спр
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ПериодическиеСвойстваНовостей КАК Рег
				|	ПО
				|		Спр.Ссылка = Рег.Новость
				|ГДЕ
				|	(
				|		ЕСТЬNULL(Рег.ВажностьОбщая, -1) // Сохраненная
				|		<>
				|		ВЫБОР
				|			КОГДА (Спр.ДатаСбросаВажности МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов)
				|					ИЛИ (Спр.ДатаЗавершения МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов)
				|					ИЛИ Спр.ПометкаУдаления // Отменена публикация
				|				ТОГДА 0
				|			ИНАЧЕ Спр.Важность
				|		КОНЕЦ // Рассчитанная
				|
				|		ИЛИ
				|
				|		ВЫБОР
				|			КОГДА Рег.Актуальность ЕСТЬ NULL
				|				ТОГДА -1
				|			КОГДА Рег.Актуальность = ИСТИНА
				|				ТОГДА 1
				|			КОГДА Рег.Актуальность = ЛОЖЬ
				|				ТОГДА 0
				|		КОНЕЦ // Сохраненная
				|		<>
				|		ВЫБОР
				|			КОГДА (Спр.ДатаЗавершения МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов)
				|					ИЛИ Спр.ПометкаУдаления // Отменена публикация
				|				ТОГДА 0
				|			ИНАЧЕ 1
				|		КОНЕЦ // Рассчитанная
				|	)
				|";
			Запрос.УстановитьПараметр("ТекущаяДатаДляРасчетов", ТекущаяДатаДляРасчетов);
			Запрос.УстановитьПараметр("ПерваяСекунда", '00010101000001');

			Результат = Запрос.Выполнить(); // ОбновлениеПериодическихСвойствНовостей.
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
				ВсегоСтрок = Выборка.Количество();
				ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Найдено %1 новостей для обновления периодических свойств'"),
					ВсегоСтрок);
				Пока Выборка.Следующий() Цикл
					Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
					Запись.Новость = Выборка.Новость;
					Запись.ВажностьОбщая = Выборка.ВажностьОбщаяРассчитанная;
					Запись.Актуальность  = Выборка.АктуальностьРассчитанная;
					Запись.Записать(Истина);
				КонецЦикла;
			Иначе
				ОписаниеРезультата = НСтр("ru='Не найдено данных для обновления'");
			КонецЕсли;

			// Сохранить дату последнего выполнения / обновления.
			Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
			Запись.ВидОбновления = "Обновление периодических свойств";
			Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
			Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРасчетов;
			Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРасчетов + 30*60;
			Запись.Записать(Истина);

		Иначе
			ОписаниеРезультата = НСтр("ru='Работа с новостями запрещена'");
		КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		Неопределено);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ОбновлениеПериодическихСвойствНовостей'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Обработка периодических реквизитов'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Расширенный"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура запускает пересчет привязок к метаданным (+ контекстная важность).
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ОбновлениеПривязокКМетаданным(КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеПривязокКМетаданным"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;

	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Обновление периодических свойств новостей'"));

		Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда
			ТекущаяДатаДляРасчетов = ТекущаяУниверсальнаяДата();

			// Получить данные, которые необходимо обновить.
			// Для оптимизации считаем, что обновляться надо только в такую сторону:
			//   Важность                - сбрасывается до 0;
			//   Актуальность            - до ЛОЖЬ;
			//   ПоказыватьВФормеОбъекта - до ЛОЖЬ;
			//   ЭтоПостояннаяНовость    - до ЛОЖЬ.
			// Это существенно сократит размер обрабатываемых данных.
			// Обратные преобразования (увеличение Важности или установка Актуальности в ИСТИНУ) считаем невозможными.
			// Универсальный запрос по обработке всех данных в любую сторону, навроде:
			// ВЫБРАТЬ
			//   Спр.Ссылка,
			//   ВЫБРАТЬ ... КАК РасчетноеПоле1,
			//   ВЫБРАТЬ ... КАК РасчетноеПоле2
			//   ...
			// ГДЕ
			//   Спр.Поле1 <> РасчетноеПоле1
			//   ИЛИ Спр.Поле2 <> РасчетноеПоле2
			// Приводит к TableScan и серьезному ухудшению производительности.
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Спр.Ссылка                  КАК Новость,
				|	Спр.Ссылка.ДатаЗавершения   КАК ДатаЗавершения,
				|	Спр.ДатаСбросаВажности      КАК ДатаСбросаВажности,
				|	Спр.Метаданные              КАК Метаданные,
				|	Спр.Форма                   КАК Форма,
				|	Спр.Событие                 КАК Событие,
				|	Спр.ПоказыватьВФормеОбъекта КАК ПоказыватьВФормеОбъекта,
				|	Спр.ЭтоПостояннаяНовость    КАК ЭтоПостояннаяНовость,
				|	ВЫБОР КОГДА
				|		(Спр.ДатаСбросаВажности МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов) ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ                       КАК ВажностьДолжнаБытьСброшена,
				|	ВЫБОР КОГДА
				|		(Спр.ДатаСбросаПоказаВФормеОбъекта МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов) ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ                       КАК ПоказыватьВФормеОбъектаДолжнаБытьСброшена,
				|	ВЫБОР КОГДА
				|		(Спр.ДатаСбросаПостояннойНовости МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов) ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ                       КАК ЭтоПостояннаяНовостьДолжнаБытьСброшена,
				|	ВЫБОР КОГДА
				|		(Спр.Ссылка.ДатаЗавершения МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов) ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ                       КАК АктуальностьДолжнаБытьСброшена
				|ПОМЕСТИТЬ ВТ_Новости
				|ИЗ
				|	Справочник.Новости.ПривязкаКМетаданным КАК Спр
				|
				|// Проверять имеет смысл только записи с датой > 00010101 и меньше переданной, а также те,
				|// где Актуальность, Важность, ПоказыватьВФормеОбъекта, ЭтоПостояннаяНовость еще НЕ сброшены.
				|ГДЕ
				|	(
				|		( // Дата сброса важности или целиком дата актуальности новости установлена и удовлетворяет условию.
				|			(Спр.ДатаСбросаВажности МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов)
				|			ИЛИ
				|			(Спр.Ссылка.ДатаЗавершения МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов)
				|		)
				|		И Спр.Важность > 0
				|	)
				|	ИЛИ
				|	// Дата завершения установлена
				|	(Спр.Ссылка.ДатаЗавершения МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов)
				|	ИЛИ
				|	// Дата сброса ПоказыватьВФормеОбъекта установлена и удовлетворяет условию.
				|	(Спр.ДатаСбросаПоказаВФормеОбъекта МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов)
				|	ИЛИ
				|	// Дата сброса ЭтоПостояннаяНовость установлена и удовлетворяет условию.
				|	(Спр.ДатаСбросаПостояннойНовости МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов)
				|ИНДЕКСИРОВАТЬ ПО
				|	Спр.Метаданные,
				|	Спр.Форма,
				|	Спр.Событие,
				|	Спр.Ссылка
				|;
				|
				|ВЫБРАТЬ
				|	ВТ_Новости.Новость                                   КАК Новость,
				|	ВТ_Новости.ДатаЗавершения                            КАК ДатаЗавершения,
				|	ВТ_Новости.ДатаСбросаВажности                        КАК ДатаСбросаВажности,
				|	ВТ_Новости.Метаданные                                КАК Метаданные,
				|	ВТ_Новости.Форма                                     КАК Форма,
				|	ВТ_Новости.Событие                                   КАК Событие,
				|	ЕСТЬNULL(Рег.ПоказыватьВФормеОбъекта, ЛОЖЬ)          КАК ПоказыватьВФормеОбъектаИзБазы,
				|	ВТ_Новости.ПоказыватьВФормеОбъектаДолжнаБытьСброшена КАК ПоказыватьВФормеОбъектаДолжнаБытьСброшена,
				|	ЕСТЬNULL(Рег.ЭтоПостояннаяНовость, ЛОЖЬ)             КАК ЭтоПостояннаяНовостьИзБазы,
				|	ВТ_Новости.ЭтоПостояннаяНовостьДолжнаБытьСброшена    КАК ЭтоПостояннаяНовостьДолжнаБытьСброшена,
				|	ЕСТЬNULL(Рег.Важность, 0)                            КАК ВажностьИзБазы,
				|	ВТ_Новости.ВажностьДолжнаБытьСброшена                КАК ВажностьДолжнаБытьСброшена,
				|	ЕСТЬNULL(Рег.Актуальность, ЛОЖЬ)                     КАК АктуальностьИзБазы,
				|	ВТ_Новости.АктуальностьДолжнаБытьСброшена            КАК АктуальностьДолжнаБытьСброшена
				|ИЗ
				|	ВТ_Новости
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|
				|	РегистрСведений.ПривязкаНовостейКМетаданным КАК Рег
				|	ПО
				|		ВТ_Новости.Метаданные = Рег.Метаданные
				|		И ВТ_Новости.Форма    = Рег.Форма
				|		И ВТ_Новости.Событие  = Рег.Событие
				|		И ВТ_Новости.Новость  = Рег.Новость
				|
				|// Проверять имеет смысл только записи с датой > 00010101 и меньше переданной, а также те,
				|//  где Актуальность, Важность, ПоказыватьВФормеОбъекта, ЭтоПостояннаяНовость еще НЕ сброшены.
				|ГДЕ
				|	(
				|		( // Дата сброса важности или целиком дата актуальности новости установлена и удовлетворяет условию.
				|			(ВТ_Новости.ВажностьДолжнаБытьСброшена = ИСТИНА)
				|			ИЛИ
				|			(ВТ_Новости.АктуальностьДолжнаБытьСброшена = ИСТИНА)
				|		)
				|		И (ЕСТЬNULL(Рег.Важность, 9) > 0) // И важность еще может быть сброшена
				|	)
				|	ИЛИ
				|	(
				|		// Дата завершения установлена и удовлетворяет условию.
				|		(ВТ_Новости.АктуальностьДолжнаБытьСброшена = ИСТИНА)
				|		И
				|		(
				|			ВЫБОР
				|				КОГДА Рег.Актуальность ЕСТЬ NULL
				|					ТОГДА ИСТИНА
				|				КОГДА Рег.Актуальность = ИСТИНА
				|					ТОГДА ИСТИНА
				|				КОГДА Рег.Актуальность = ЛОЖЬ
				|					ТОГДА ЛОЖЬ
				|			КОНЕЦ
				|		) = ИСТИНА // И актуальность еще может быть сброшена.
				|	)
				|	ИЛИ
				|	// Дата сброса ПоказыватьВФормеОбъекта установлена, а значение еще не сброшено.
				|	(
				|		ЕСТЬNULL(Рег.ПоказыватьВФормеОбъекта, ЛОЖЬ) = ИСТИНА // Пока еще ИСТИНА, но должна быть сброшена
				|		И ВТ_Новости.ПоказыватьВФормеОбъектаДолжнаБытьСброшена = ИСТИНА
				|	)
				|	ИЛИ
				|	// Дата сброса ЭтоПостояннаяНовость установлена, а значение еще не сброшено.
				|	(
				|		ЕСТЬNULL(Рег.ЭтоПостояннаяНовость, ЛОЖЬ) = ИСТИНА // Пока еще ИСТИНА, но должна быть сброшена
				|		И ВТ_Новости.ЭтоПостояннаяНовостьДолжнаБытьСброшена = ИСТИНА
				|	)
				|";
			Запрос.УстановитьПараметр("ПерваяСекунда", '00010101000001');
			Запрос.УстановитьПараметр("ТекущаяДатаДляРасчетов", ТекущаяДатаДляРасчетов);

			Результат = Запрос.Выполнить(); // ОбновлениеПривязокКМетаданным.
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
				ВсегоСтрок = Выборка.Количество();
				ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Найдено %1 новостей для обновления привязок к метаданным'"),
					ВсегоСтрок);
				Пока Выборка.Следующий() Цикл
					Запись = РегистрыСведений.ПривязкаНовостейКМетаданным.СоздатьМенеджерЗаписи();
						Запись.Новость                 = Выборка.Новость;
						Запись.Метаданные              = Выборка.Метаданные;
						Запись.Форма                   = Выборка.Форма;
						Запись.Событие                 = Выборка.Событие;
						Если Выборка.ВажностьДолжнаБытьСброшена = Истина Тогда
							Запись.Важность            = 0;
						Иначе
							Запись.Важность            = Выборка.ВажностьИзБазы;
						КонецЕсли;
						Если Выборка.АктуальностьДолжнаБытьСброшена = Истина Тогда
							Запись.Актуальность        = Ложь;
						Иначе
							Запись.Актуальность        = Выборка.АктуальностьИзБазы;
						КонецЕсли;
						Если Выборка.ПоказыватьВФормеОбъектаДолжнаБытьСброшена = Истина Тогда
							Запись.ПоказыватьВФормеОбъекта = Ложь;
						Иначе
							Запись.ПоказыватьВФормеОбъекта = Выборка.ПоказыватьВФормеОбъектаИзБазы;
						КонецЕсли;
						Если Выборка.ЭтоПостояннаяНовостьДолжнаБытьСброшена = Истина Тогда
							Запись.ЭтоПостояннаяНовость = Ложь;
						Иначе
							Запись.ЭтоПостояннаяНовость = Выборка.ЭтоПостояннаяНовостьИзБазы;
						КонецЕсли;
					Запись.Записать(Истина);
				КонецЦикла;
			Иначе
				ОписаниеРезультата = НСтр("ru='Не найдено данных для обновления'");
			КонецЕсли;

			// Сохранить дату последнего выполнения / обновления.
			Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
				Запись.ВидОбновления = "Обновление привязок к метаданным";
				Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
				Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРасчетов;
				Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРасчетов + 30*60;
			Запись.Записать(Истина);

		Иначе
			ОписаниеРезультата = НСтр("ru='Работа с новостями запрещена'");
		КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		Неопределено);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ОбновлениеПривязокКМетаданным'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Обработка привязок к метаданным'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Расширенный"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура запускает получение файлов новостей и обновление новостей для лент новостей по списку лент новостей.
// Процедуры должны иметь похожий код:
//  Справочник.Новости.ЗагрузитьСтандартныеЗначения();
//  ОбработкаНовостей.ПолучитьИОбработатьНовостиПоЛентамНовостей().
// Если включено разделение данных, то запускать вручную можно только при отключенных разделителях.
//
// Параметры:
//  МассивЛентНовостей - Массив - список лент новостей. Если пустой, то по всем лентам новостей;
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ПолучитьИОбработатьНовостиПоЛентамНовостей(МассивЛентНовостей, КонтекстВыполнения = Неопределено) Экспорт

	ЕстьЛентыНовостей = Неопределено;
	РазрешенаРаботаСНовостямиЧерезИнтернет = Неопределено;

	НаименованиеПроцедурыФункции = "ПолучитьИОбработатьНовостиПоЛентамНовостей"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Получение и обработка новостей по лентам новостей'"));

		ЕстьОшибки = Ложь;
		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			// Зашли в конфигурацию под пользователем с разделением (с входом в область данных).
			Если НЕ ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() Тогда
				ОписаниеРезультата = НСтр("ru='ПолучитьИОбработатьНовостиПоЛентамНовостей, при работе в модели сервиса запускать получение новостей вручную можно только в неразделенном сеансе.'");
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ЕстьОшибки = Ложь Тогда

			УстановитьПривилегированныйРежим(Истина);

				// Если установлен режим работы только с локальными новостями, то не загружать никакие классификаторы
				//  и не обрабатывать ленты новостей с протоколами, отличными от file.
				РазрешенаРаботаСНовостямиЧерезИнтернет = ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет();
				ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Массив лент новостей для обработки: %1
						|Разрешена работа через интернет: %2'"),
					ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(МассивЛентНовостей, ";"),
					РазрешенаРаботаСНовостямиЧерезИнтернет)
					+ Символы.ПС;

				// Структура таблицы ЛентыНовостей (см. Обработки.УправлениеНовостями.ЗагрузитьФайлыНовостейССервера):
				//  - Пометка                 - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить;
				//  - ОбязательныйКанал       - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить ВНЕ ЗАВИСИМОСТИ от галочки Пометка;
				//  - ЛентаНовостей           - СправочникСсылки.ЛентаНовостей - Ссылка на элемент справочника для подстановки в элемент Справочник.Новости;
				//  - Сайт                    - Строка -;
				//  - ИмяФайла                - Строка -;
				//  - Протокол                - Строка - возможные значения http, https, file;
				//  - ВариантЛогинаПароля     - ПеречислениеСсылка.ВариантЛогинаПароляДляЛентыНовостей - БезЛогинаПароля, ВручнуюОдинаковыйДляВсех, ВручнуюРазныйДляВсех, ВебИТС;
				//  - Логин                   - Строка -;
				//  - Пароль                  - Строка -;
				//  - ПарольХранилищеЗначений - ХранилищеЗначений - данные из базы, которые должны быть преобразованы;
				//  - ЛокальнаяЛентаНовостей  - Булево - лента новостей не обновляется из файла или из интернета, а заполняется напрямую в справочник Новости;
				//  - ЧастотаОбновления       - Число(1,0) - Частота обновления;
				//  - АдресВХранилище         - Строка - Адрес загруженного файла во временном хранилище.

				// 1. Получить список лент новостей, которые необходимо обновить по этому расписанию.
				// 1.1. Получить список лент новостей с параметрами.
				// Чтобы лента новостей автоматически не обновлялась - надо поставить ЧастотаОбновления=0, или установить пометку удаления.

				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	ИСТИНА                          КАК Пометка,
					|	Спр.Ссылка                      КАК ЛентаНовостей,
					|	Спр.ОбязательныйКанал           КАК ОбязательныйКанал,
					|	Спр.Сайт                        КАК Сайт,
					|	Спр.ИмяФайла                    КАК ИмяФайла,
					|	Спр.Протокол                    КАК Протокол,
					|	Спр.ВариантЛогинаПароля         КАК ВариантЛогинаПароля,
					|	Спр.Логин                       КАК Логин,
					|	ВЫРАЗИТЬ("""" КАК СТРОКА(100))  КАК Пароль, // Заполнится потом из ПарольХранилищеЗначений
					|	Спр.Пароль                      КАК ПарольХранилищеЗначений,
					|	Спр.ЛокальнаяЛентаНовостей      КАК ЛокальнаяЛентаНовостей,
					|	Спр.ЧастотаОбновления           КАК ЧастотаОбновления,
					|	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)) КАК АдресВХранилище // Заполнится потом
					|ИЗ
					|	Справочник.ЛентыНовостей КАК Спр
					|ГДЕ
					|	(
					|		Спр.Ссылка В (&МассивЛентНовостей)
					|		ИЛИ &ПоВсемЛентамНовостей = ИСТИНА
					|	)
					|	И Спр.ПометкаУдаления = ЛОЖЬ
					|	И Спр.ЛокальнаяЛентаНовостей = ЛОЖЬ // Ленты новости, где новости создаются напрямую в справочнике, а не загружаются из файла или из интернета - не надо обновлять.
					|	// Если установлен режим работы только с локальными новостями, то не загружать никакие классификаторы,
					|	//  и не обрабатывать ленты новостей с протоколами, отличными от file.
					|	И
					|	(
					|		&РазрешенаРаботаСНовостямиЧерезИнтернет = ИСТИНА
					|		ИЛИ Спр.Протокол = ""file""
					|	)
					|";

				Запрос.УстановитьПараметр("МассивЛентНовостей", МассивЛентНовостей);
				Запрос.УстановитьПараметр("ПоВсемЛентамНовостей", МассивЛентНовостей.Количество() = 0);
				Запрос.УстановитьПараметр("РазрешенаРаботаСНовостямиЧерезИнтернет", РазрешенаРаботаСНовостямиЧерезИнтернет);

				Результат = Запрос.Выполнить(); // ПолучитьИОбработатьНовостиПоЛентамНовостей.
				Если НЕ Результат.Пустой() Тогда
					ЛентыНовостей = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
					ЕстьЛентыНовостей = Истина;
					ОписаниеРезультата = ОписаниеРезультата
						+ Символы.ПС
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Запрос выполнен. Количество лент новостей, которые будут обработаны: %1'"),
							ЛентыНовостей.Количество())
						+ Символы.ПС;
				Иначе
					ОписаниеРезультата = ОписаниеРезультата
						+ Символы.ПС
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='ПолучитьИОбработатьНовостиПоЛентамНовостей, не удалось определить список лент новостей
								|Передан параметр с количеством значений: %1
								|Результат выполнения запроса: Пустой
								|Возможно, список лент новостей пустой, или у всех лент новостей установлен признак ЛокальнаяЛентаНовостей (что означает, что по ней не надо загружать новости), или у всех лент новостей установлена пометка удаления.'"),
							МассивЛентНовостей.Количество())
						+ Символы.ПС;
					ЕстьЛентыНовостей = Ложь;
				КонецЕсли;

				Если ЕстьЛентыНовостей = Истина Тогда

					// 1.2. Заполнить логины / пароли.
					Для каждого ТекущаяЛентаНовостей Из ЛентыНовостей Цикл
						Если ТекущаяЛентаНовостей.ВариантЛогинаПароля = Перечисления.ВариантЛогинаПароляДляЛентыНовостей.БезЛогинаПароля Тогда
							// Нет логина / пароля.
						ИначеЕсли ТекущаяЛентаНовостей.ВариантЛогинаПароля = Перечисления.ВариантЛогинаПароляДляЛентыНовостей.ВебИТС Тогда
							// ////? Взять логин / пароль из регистра сведений ВебИТС.
						ИначеЕсли ТекущаяЛентаНовостей.ВариантЛогинаПароля = Перечисления.ВариантЛогинаПароляДляЛентыНовостей.ВручнуюОдинаковыйДляВсех Тогда
							// Берется из Справочника Ленты новостей, т.е. уже проставлен в запросе.
							ТекущаяЛентаНовостей.Пароль = ТекущаяЛентаНовостей.ПарольХранилищеЗначений.Получить();
						ИначеЕсли ТекущаяЛентаНовостей.ВариантЛогинаПароля = Перечисления.ВариантЛогинаПароляДляЛентыНовостей.ВручнуюРазныйДляВсех Тогда
							////!
							// Такой сценарий возможен для SaaS, где у каждой области данных для одной ленты новостей
							//  может быть свой логин / пароль, и данные авторизации будут храниться отдельно.
						КонецЕсли;
					КонецЦикла;

					// 2. Для выбранных лент новостей запустить получение новостей.
					// Следующие строки должны запуститься последовательно на одном сервере, поэтому значения адресов
					//  временного хранилища (отдельная колонка в таблице ЛентыНовостей) не должны пропасть.
					// {Раздельное обновление ИБ}
					ДополнительныеПараметрыВыполнения = Новый Структура;
						ДополнительныеПараметрыВыполнения.Вставить("ИсточникЗапуска", "ПолучитьИОбработатьНовостиПоЛентамНовостей");
						ДополнительныеПараметрыВыполнения.Вставить("ОбрабатыватьОбластиДанных", Истина);
					КонтекстВыполненияВложенный.Вставить("ДополнительныеПараметрыВыполнения", ДополнительныеПараметрыВыполнения);

					// В процессе загрузки новостей создаются новости в справочнике Новости, но у них не рассчитаны отборы.
					// Из-за этого возможна ситуация, когда в системе видны новости, запрещенные к показу отборами по категориям.
					УстановитьСостояниеПодсистемы("СейчасЗагружаютсяНовости");
						Обработки.УправлениеНовостями.ЗагрузитьФайлыНовостейССервера(ЛентыНовостей, КонтекстВыполненияВложенный);
						Обработки.УправлениеНовостями.ПарсингХМЛФайловНовостей(ЛентыНовостей, КонтекстВыполненияВложенный);
					УстановитьСостояниеПодсистемы("Активна");

				КонецЕсли;

		КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Все обновления новостей'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Все обновления новостей. Получение и обработка новостей по лентам новостей'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Получение и обработка новостей по лентам новостей'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Расширенный"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура запускает обновление стандартных списков для новостей с графиком получения "Ежедневно"
// Это списки лент новостей, категорий новостей, значений категорий новостей и т.п.
//
// Должно запускаться от имени пользователя с правами, достаточными для изменения этих данных.
//
// Если включено разделение данных, то запускать вручную можно только при отключенных разделителях.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ОбновитьСтандартныеСпискиДляНовостей_Ежедневно(КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "ОбновитьСтандартныеСпискиДляНовостей_Ежедневно"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ЛогШаговВыполнения = Новый Массив;
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Обновление классификаторов'"));

		ЕстьОшибки = Ложь;
		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			// Зашли в конфигурацию под пользователем с разделением (с входом в область данных).
			Если НЕ ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() Тогда
				ЛогШаговВыполнения.Добавить(
					НСтр("ru='ОбновитьСтандартныеСпискиДляНовостей_Ежедневно, при работе в модели сервиса запускать получение классификаторов вручную можно только в неразделенном сеансе.'"));
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ЕстьОшибки = Ложь Тогда

			ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

			УстановитьПривилегированныйРежим(Истина);

			РазрешенаРаботаСНовостями              = ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями();
			РазрешенаРаботаСНовостямиЧерезИнтернет = ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет();
			ЛогШаговВыполнения.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='РазрешенаРаботаСНовостями: %1
						|РазрешенаРаботаСНовостямиЧерезИнтернет: %2'"),
					РазрешенаРаботаСНовостями,
					РазрешенаРаботаСНовостямиЧерезИнтернет));

			Если РазрешенаРаботаСНовостями Тогда

				Если РазрешенаРаботаСНовостямиЧерезИнтернет Тогда
					ЛогШаговВыполнения.Добавить(НСтр("ru='Обновление классификаторов запущено.'"));
					Результат = Обработки.УправлениеНовостями.ОбновитьВсеСтандартныеСпискиССервера(КонтекстВыполненияВложенный);
					ЛогШаговВыполнения.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Обновление классификаторов завершено. Результат: %1'"),
							Результат));
				Иначе
					ЛогШаговВыполнения.Добавить(
						НСтр("ru='ОбновитьСтандартныеСпискиДляНовостей_Ежедневно, включен режим [Работа только с локальными новостями],
							|поэтому никакие классификаторы не обновляются с серверов 1С.
							|Их можно обновлять из метаданных (при обновлении конфигурации), либо вручную.'"));
				КонецЕсли;

				// Вне зависимости от того, были ли загрузки из интернета или нет, очистить регистр сведений от пустых значений.
				НаборЗаписей = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьНаборЗаписей();
				НаборЗаписей.Прочитать(); // Запись будет ниже.
				БылиУдаления = Истина;
				Пока БылиУдаления = Истина Цикл
					БылиУдаления = Ложь;
					Для Каждого ТекущаяЗапись Из НаборЗаписей Цикл
						Если (ТекущаяЗапись.Список = Неопределено)
								ИЛИ (ПустаяСтрока(ТекущаяЗапись.Список))
								ИЛИ (
									ТипЗнч(ТекущаяЗапись.Список) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей")
									И ТекущаяЗапись.Список.Пустая()) Тогда
							НаборЗаписей.Удалить(ТекущаяЗапись);
							БылиУдаления = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				Если БылиУдаления = Истина Тогда
					НаборЗаписей.Записать(Истина); // АПК:1327 Конкурентная работа маловероятна.
				КонецЕсли;

			Иначе
				ЛогШаговВыполнения.Добавить(
					НСтр("ru='ОбновитьСтандартныеСпискиДляНовостей_Ежедневно, отключен режим [Разрешена работа с новостями],
						|поэтому все механизмы новостного центра отключены.'"));
			КонецЕсли;

			// Сохранить дату последнего выполнения / обновления.
			Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
			Запись.ВидОбновления = "Обновление классификаторов"; // Идентификатор.
			Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
			Если Результат = Истина Тогда // Успешно

				Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРегистров;
				Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 24*60*60;

				ЛогШаговВыполнения.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Классификаторы были обновлены без ошибок.
							|ТекущаяДатаДляРегистров: %1
							|ДатаСледующегоОбновления: %2'"),
						ТекущаяДатаДляРегистров,
						Запись.ДатаСледующегоОбновления));

			Иначе // Неудача

				// Настроить так, чтобы следующая проверка была через 1 час +-30 минут.
				// Разброс необходим, чтобы все клиенты не попали на одно и то же время, а были более-менее равномерно распределены.
				ГенераторСЧ = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяУниверсальнаяДата()));
				СлучайноеЧислоСекунд = ГенераторСЧ.СлучайноеЧисло(0, 30*60) - 15*60; // В секундах, -15..+15 минут.
				// Обновления не произошло, поэтому Запись.ДатаПоследнегоОбновления не трогать.
				Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 1*60*60 + СлучайноеЧислоСекунд;

				ЛогШаговВыполнения.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Были ошибки обновления классификаторов. Время следующего запуска изменено.
							|ТекущаяДатаДляРегистров: %1
							|ДатаСледующегоОбновления: %2'"),
						ТекущаяДатаДляРегистров,
						Запись.ДатаСледующегоОбновления));

			КонецЕсли;
			Запись.Записать(Истина);

		КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		СтрСоединить(ЛогШаговВыполнения, Символы.ПС),
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Все обновления новостей'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Все обновления новостей. Обновление классификаторов'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Обновление классификаторов'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Расширенный"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// В связи с раздельной загрузкой новостей и классификаторов (категорий и значений категорий) возможна ситуация,
//  когда в новости указана категория или значение, которые еще не загружены в базу данных.
// Поэтому при загрузке новостей строковые представления категорий и значений вначале сохраняются
//  в регистры сведений КатегорииНовостей*Необработанные, а затем переносятся
//  в регистры сведений КатегорииНовостей* с помощью этой процедуры.
// Должно запускаться от имени пользователя с правами, достаточными для изменения этих данных.
// Если включено разделение данных, то запускать вручную можно только при отключенных разделителях.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ПересчитатьНеобработанныеКатегорииНовостей(КонтекстВыполнения = Неопределено) Экспорт

	ТипДата = Тип("Дата");

	НаименованиеПроцедурыФункции = "ПересчитатьНеобработанныеКатегорииНовостей"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Пересчет необработанных категорий новостей'"));

		ЕстьОшибки = Ложь;
		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			// Зашли в конфигурацию под пользователем с разделением (с входом в область данных).
			Если НЕ ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() Тогда
				ОписаниеРезультата = НСтр("ru='ПересчитатьНеобработанныеКатегорииНовостей, при работе в модели сервиса запускать обновление стандартных списков можно только при отключенных разделителях.'");
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ЕстьОшибки = Ложь Тогда

			УстановитьПривилегированныйРежим(Истина);

			ЕстьДанныеДляОбработки = Истина;

#Область ОбновлениеКатегорийИЗначений

				// 1. Попытаться обновить категории и значения.

				КодРезультатаВложенный = 0;
				ИдентификаторШага1 = "ОбновлениеКатегорийИЗначений"; // Идентификатор.
				ЛогШаговВыполненияВложенный = Новый Массив;
				ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенный,
					"ОбработкаНовостей." + НаименованиеПроцедурыФункции + "." + ИдентификаторШага1, // Идентификатор.
					НСтр("ru='Пересчет необработанных категорий новостей'") + " / " + ИдентификаторШага1);

					Запрос = Новый Запрос;
					Запрос.Текст = "
						|// Категории новостей, простые
						|ВЫБРАТЬ
						|	Рег.КатегорияНовостейСтрока                                     КАК КатегорияНовостейСтрока,
						|	Рег.ЗначениеКатегорииНовостейСтрока                             КАК ЗначениеКатегорииНовостейСтрока,
						|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.КатегорииНовостей.ПустаяСсылка) КАК КатегорияНовостей,
						|	Рег.УсловиеОтбора                                               КАК УсловиеОтбора,
						|	Рег.ЛентаНовостей                                               КАК ЛентаНовостей,
						|	Рег.УИННовости                                                  КАК УИННовости,
						|	Спр.Ссылка                                                      КАК Новость,
						|	ЛОЖЬ                                                            КАК ВсеЗаполнено,
						|	ЛОЖЬ                                                            КАК УдалитьЗапись
						|ИЗ
						|	РегистрСведений.КатегорииНовостейПростыеНеобработанные КАК Рег
						|
						|	ЛЕВОЕ СОЕДИНЕНИЕ
						|	Справочник.Новости КАК Спр
						|	ПО
						|		Рег.ЛентаНовостей = Спр.ЛентаНовостей
						|		И Рег.УИННовости = Спр.УИННовости
						|ГДЕ
						|	НЕ Спр.Ссылка ЕСТЬ NULL
						|
						|УПОРЯДОЧИТЬ ПО
						|	КатегорияНовостейСтрока
						|;
						|
						|// Категории новостей, интервалы версий
						|ВЫБРАТЬ
						|	Рег.КатегорияНовостейСтрока                                     КАК КатегорияНовостейСтрока,
						|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.КатегорииНовостей.ПустаяСсылка) КАК КатегорияНовостей,
						|	Рег.Продукт                                                     КАК Продукт,
						|	Рег.ВерсияОТ                                                    КАК ВерсияОТ,
						|	Рег.ВерсияДО                                                    КАК ВерсияДО,
						|	Рег.ЛентаНовостей                                               КАК ЛентаНовостей,
						|	Рег.УИННовости                                                  КАК УИННовости,
						|	Спр.Ссылка                                                      КАК Новость,
						|	ЛОЖЬ                                                            КАК ВсеЗаполнено,
						|	ЛОЖЬ                                                            КАК УдалитьЗапись
						|ИЗ
						|	РегистрСведений.КатегорииНовостейИнтервалыВерсийНеобработанные КАК Рег
						|
						|	ЛЕВОЕ СОЕДИНЕНИЕ
						|	Справочник.Новости КАК Спр
						|	ПО
						|		Рег.ЛентаНовостей = Спр.ЛентаНовостей
						|		И Рег.УИННовости = Спр.УИННовости
						|ГДЕ
						|	НЕ Спр.Ссылка ЕСТЬ NULL
						|
						|УПОРЯДОЧИТЬ ПО
						|	КатегорияНовостейСтрока
						|;
						|
						|// Данные для определения, какая категория используется в ЛентеНовостей.
						|// Нужны для разрешения ситуации, когда есть несколько категорий с одинаковым кодом.
						|// В таком случае предпочтительной будет категория, которая присутствует
						|//  в табличной части ДоступныеКатегорииНовостей справочника ЛентыНовостей.
						|ВЫБРАТЬ
						|	Спр.Ссылка                   КАК ЛентаНовостей,
						|	Спр.КатегорияНовостей.Ссылка КАК КатегорияНовостей,
						|	Спр.КатегорияНовостей.Код    КАК КатегорияНовостейКод
						|ИЗ
						|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
						|УПОРЯДОЧИТЬ ПО
						|	ЛентаНовостей,
						|	КатегорияНовостейКод
						|;
						|";

					Результаты = Запрос.ВыполнитьПакет(); // ПересчитатьНеобработанныеКатегорииНовостей.
					Если НЕ Результаты[0].Пустой() Тогда
						ТаблицаКатегорийИЗначенийПростые = Результаты[0].Выгрузить(ОбходРезультатаЗапроса.Прямой);
						ЛогШаговВыполненияВложенный.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Результаты[0] - непустой. ТаблицаКатегорийИЗначенийПростые.Количество() = %1'"),
								ТаблицаКатегорийИЗначенийПростые.Количество()));
					Иначе
						ТаблицаКатегорийИЗначенийПростые = Новый ТаблицаЗначений;
						ЛогШаговВыполненияВложенный.Добавить(
							НСтр("ru='Результаты[0] - пустой'"));
					КонецЕсли;
					Если НЕ Результаты[1].Пустой() Тогда
						ТаблицаКатегорийИЗначенийИнтервалыВерсий = Результаты[1].Выгрузить(ОбходРезультатаЗапроса.Прямой);
						ЛогШаговВыполненияВложенный.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Результаты[1] - непустой. ТаблицаКатегорийИЗначенийИнтервалыВерсий.Количество() = %1'"),
								ТаблицаКатегорийИЗначенийИнтервалыВерсий.Количество()));
					Иначе
						ТаблицаКатегорийИЗначенийИнтервалыВерсий = Новый ТаблицаЗначений;
						ЛогШаговВыполненияВложенный.Добавить(
							НСтр("ru='Результаты[1] - пустой'"));
					КонецЕсли;
					Если НЕ Результаты[2].Пустой() Тогда
						ТаблицаДоступныхКатегорий = Результаты[2].Выгрузить(ОбходРезультатаЗапроса.Прямой);
						ЛогШаговВыполненияВложенный.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Результаты[2] - непустой. ТаблицаДоступныхКатегорий.Количество() = %1'"),
								ТаблицаДоступныхКатегорий.Количество()));
					Иначе
						ТаблицаДоступныхКатегорий = Новый ТаблицаЗначений;
						ЛогШаговВыполненияВложенный.Добавить(
							НСтр("ru='Результаты[2] - пустой'"));
					КонецЕсли;

					Если (ТаблицаКатегорийИЗначенийПростые.Количество() <= 0)
							И (ТаблицаКатегорийИЗначенийИнтервалыВерсий.Количество() <= 0) Тогда
						// Нечего обрабатывать.
						ЕстьДанныеДляОбработки = Ложь;
					КонецЕсли;

					Если ЕстьДанныеДляОбработки = Истина Тогда

						ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Есть данные для обработки.'"));

						КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.

#Область ОбновлениеКатегорийИЗначений_ДобавлениеИндексовИКолонок

						ИдентификаторШага2 = "ДобавлениеИндексовИКолонок"; // Идентификатор.
						КодРезультатаВложенныйВложенный = 0;
						ОписаниеРезультатаВложенныйВложенный = "";
						ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
							КонтекстВыполненияВложенныйВложенный,
							"ОбработкаНовостей." + НаименованиеПроцедурыФункции
								+ "." + ИдентификаторШага1
								+ "." + ИдентификаторШага2, // Идентификатор.
							НСтр("ru='Пересчет необработанных категорий новостей'")
								+ " / " + ИдентификаторШага1
								+ " / " + ИдентификаторШага2);

							Если ТаблицаКатегорийИЗначенийПростые.Количество() > 0 Тогда
								// 1.1. Добавить необходимые колонки.
								ТаблицаКатегорийИЗначенийПростые.Колонки.Добавить("ЗначениеКатегорииНовостей"); // Произвольного типа
								ТаблицаКатегорийИЗначенийПростые.Колонки.Добавить("ТипЗначенияСтрока", Новый ОписаниеТипов("Строка")); // Строка, а не Тип
								// 1.2. Добавить необходимые индексы.
								ТаблицаКатегорийИЗначенийПростые.Индексы.Добавить("КатегорияНовостейСтрока");
								ТаблицаКатегорийИЗначенийПростые.Индексы.Добавить("ЗначениеКатегорииНовостейСтрока");
								ТаблицаКатегорийИЗначенийПростые.Индексы.Добавить("ТипЗначенияСтрока");
							КонецЕсли;

							Если ТаблицаКатегорийИЗначенийИнтервалыВерсий.Количество() > 0 Тогда
								ТаблицаКатегорийИЗначенийИнтервалыВерсий.Индексы.Добавить("КатегорияНовостейСтрока");
							КонецЕсли;

							Если ТаблицаДоступныхКатегорий.Количество() > 0 Тогда
								ТаблицаДоступныхКатегорий.Индексы.Добавить("ЛентаНовостей");
								ТаблицаДоступныхКатегорий.Индексы.Добавить("КатегорияНовостейКод");
							КонецЕсли;

						ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
							КонтекстВыполненияВложенныйВложенный,
							КодРезультатаВложенныйВложенный,
							ОписаниеРезультатаВложенныйВложенный,
							Неопределено);

#КонецОбласти

#Область ОбновлениеКатегорийИЗначений_ЗаполнениеКатегорий_Простые

						ИдентификаторШага2 = "ЗаполнениеПростыхКатегорий"; // Идентификатор.
						КодРезультатаВложенныйВложенный = 0;
						ОписаниеРезультатаВложенныйВложенный = "";
						ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
							КонтекстВыполненияВложенныйВложенный,
							"ОбработкаНовостей." + НаименованиеПроцедурыФункции
								+ "." + ИдентификаторШага1
								+ "." + ИдентификаторШага2, // Идентификатор.
							НСтр("ru='Пересчет необработанных категорий новостей'")
								+ " / " + ИдентификаторШага1
								+ " / " + ИдентификаторШага2);

							// 1.3. Заполнить Категории.
							// 1.3.1. Категории новостей, простые.
							Если ТаблицаКатегорийИЗначенийПростые.Количество() > 0 Тогда
								ТаблицаКатегорий = ТаблицаКатегорийИЗначенийПростые.Скопировать(, "ЛентаНовостей,КатегорияНовостейСтрока");
								ТаблицаКатегорий.Свернуть("ЛентаНовостей,КатегорияНовостейСтрока");
								ТаблицаКатегорий.Индексы.Добавить("КатегорияНовостейСтрока");
								Для каждого ТекущаяКатегория Из ТаблицаКатегорий Цикл
									// Наименование категории и ее значение может быть как английскими буквами (поиск по коду),
									//  так и русскими (поиск по наименованию).
									// Для разрешения ситуации, когда есть несколько категорий с одинаковым кодом,
									//  в первую очередь искать категории в таблице ТаблицаДоступныхКатегорий.
									// Потом надо искать по коду (английскими буквами) потом по наименованию.
									// Если категория не найдена ни по коду, ни по наименованию, то строку не добавлять - значит
									//  не все необходимые данные загружены.
									КатегорияНовостей = Неопределено;
									Если ТаблицаДоступныхКатегорий.Количество() > 0 Тогда
										ПараметрыОтбора = Новый Структура;
											ПараметрыОтбора.Вставить("ЛентаНовостей", ТекущаяКатегория.ЛентаНовостей);
											ПараметрыОтбора.Вставить("КатегорияНовостейКод", ТекущаяКатегория.КатегорияНовостейСтрока);
										НайденныеСтроки = ТаблицаДоступныхКатегорий.НайтиСтроки(ПараметрыОтбора);
										// В табличной части должна быть хотя бы одна строка с указанной категорией.
										// Ситуация, когда в табличной части "ДоступныеКатегорииНовостей"
										//  более одной категории с указанным кодом - неправильная, но не ошибочная.
										Если НайденныеСтроки.Количество() > 0 Тогда
											КатегорияНовостей = НайденныеСтроки[0].КатегорияНовостей;
										КонецЕсли;
									КонецЕсли;
									Если (КатегорияНовостей = Неопределено) ИЛИ (КатегорияНовостей.Пустая()) Тогда
										КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(ТекущаяКатегория.КатегорияНовостейСтрока);
										Если (КатегорияНовостей = Неопределено) ИЛИ (КатегорияНовостей.Пустая()) Тогда
											КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоНаименованию(ТекущаяКатегория.КатегорияНовостейСтрока, Истина);
										КонецЕсли;
									КонецЕсли;
									Если (КатегорияНовостей <> Неопределено) И (НЕ КатегорияНовостей.Пустая()) Тогда
										Если КатегорияНовостей.ТипЗначения.Типы().Количество() >= 1 Тогда
											Если КатегорияНовостей.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Булево Тогда
												ТипЗначенияСтрока = "Булево";
											ИначеЕсли КатегорияНовостей.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Дата Тогда
												ТипЗначенияСтрока = "Дата";
											ИначеЕсли КатегорияНовостей.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Число Тогда
												ТипЗначенияСтрока = "Число";
											ИначеЕсли КатегорияНовостей.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Строка Тогда
												ТипЗначенияСтрока = "Строка";
											ИначеЕсли КатегорияНовостей.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ЗначенияКатегорийНовостей Тогда
												ТипЗначенияСтрока = "СправочникСсылка.ЗначенияКатегорийНовостей";
											ИначеЕсли КатегорияНовостей.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ИнтервалыВерсийПродукта Тогда
												// Значения типа СправочникСсылка.ИнтервалыВерсийПродукта должны передаваться в другом регистре (КатегорииНовостейИнтервалыВерсийНеобработанные),
												//  поэтому потом эта строка будет удалена.
												ТипЗначенияСтрока = "СправочникСсылка.ИнтервалыВерсийПродукта";
											КонецЕсли;
										Иначе
											ТипЗначенияСтрока = "";
										КонецЕсли;
										// Заполнить во всех строках со значением КатегорияНовостейСтрока
										//  и ЛентаНовостей значение КатегорияНовостей.
										ПараметрыОтбора = Новый Структура;
											ПараметрыОтбора.Вставить("ЛентаНовостей", ТекущаяКатегория.ЛентаНовостей);
											ПараметрыОтбора.Вставить("КатегорияНовостейСтрока", ТекущаяКатегория.КатегорияНовостейСтрока);
										НайденныеСтроки = ТаблицаКатегорийИЗначенийПростые.НайтиСтроки(ПараметрыОтбора);
										Для каждого ТекущаяНайденнаяСтрока Из НайденныеСтроки Цикл
											ТекущаяНайденнаяСтрока.КатегорияНовостей = КатегорияНовостей;
											ТекущаяНайденнаяСтрока.ТипЗначенияСтрока = ТипЗначенияСтрока;
										КонецЦикла;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;

						ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
							КонтекстВыполненияВложенныйВложенный,
							КодРезультатаВложенныйВложенный,
							ОписаниеРезультатаВложенныйВложенный,
							Неопределено);

#КонецОбласти

#Область ОбновлениеКатегорийИЗначений_ЗаполнениеКатегорий_ИнтервалыВерсий

						ИдентификаторШага2 = "ЗаполнениеКатегорийИнтервалыВерсий"; // Идентификатор.
						КодРезультатаВложенныйВложенный = 0;
						ОписаниеРезультатаВложенныйВложенный = "";
						ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
							КонтекстВыполненияВложенныйВложенный,
							"ОбработкаНовостей." + НаименованиеПроцедурыФункции
								+ "." + ИдентификаторШага1
								+ "." + ИдентификаторШага2, // Идентификатор.
							НСтр("ru='Пересчет необработанных категорий новостей'")
								+ " / " + ИдентификаторШага1
								+ " / " + ИдентификаторШага2);

							// 1.3.2. Категории новостей, интервалы версий.
							Если ТаблицаКатегорийИЗначенийИнтервалыВерсий.Количество() > 0 Тогда
								ТаблицаКатегорий = ТаблицаКатегорийИЗначенийИнтервалыВерсий.Скопировать(, "ЛентаНовостей,КатегорияНовостейСтрока");
								ТаблицаКатегорий.Свернуть("ЛентаНовостей,КатегорияНовостейСтрока");
								ТаблицаКатегорий.Индексы.Добавить("КатегорияНовостейСтрока");
								Для каждого ТекущаяКатегория Из ТаблицаКатегорий Цикл
									// Наименование категории и ее значение может быть как английскими буквами (поиск по коду),
									//  так и русскими (поиск по наименованию).
									// Для разрешения ситуации, когда есть несколько категорий с одинаковым кодом,
									//  в первую очередь искать категории в таблице ТаблицаДоступныхКатегорий.
									// Потом надо искать по коду (английскими буквами) потом по наименованию.
									// Если категория не найдена ни по коду, ни по наименованию, то строку не добавлять - значит
									//  не все необходимые данные загружены.
									КатегорияНовостей = Неопределено;
									Если ТаблицаДоступныхКатегорий.Количество() > 0 Тогда
										ПараметрыОтбора = Новый Структура;
											ПараметрыОтбора.Вставить("ЛентаНовостей", ТекущаяКатегория.ЛентаНовостей);
											ПараметрыОтбора.Вставить("КатегорияНовостейКод", ТекущаяКатегория.КатегорияНовостейСтрока);
										НайденныеСтроки = ТаблицаДоступныхКатегорий.НайтиСтроки(ПараметрыОтбора);
										// В табличной части должна быть хотя бы одна строка с указанной категорией.
										// Ситуация, когда в табличной части "ДоступныеКатегорииНовостей"
										//  более одной категории с указанным кодом - неправильная, но не ошибочная.
										Если НайденныеСтроки.Количество() > 0 Тогда
											КатегорияНовостей = НайденныеСтроки[0].КатегорияНовостей;
										КонецЕсли;
									КонецЕсли;
									Если (КатегорияНовостей = Неопределено) ИЛИ (КатегорияНовостей.Пустая()) Тогда
										КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(ТекущаяКатегория.КатегорияНовостейСтрока);
										Если (КатегорияНовостей = Неопределено) ИЛИ (КатегорияНовостей.Пустая()) Тогда
											КатегорияНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоНаименованию(ТекущаяКатегория.КатегорияНовостейСтрока, Истина);
										КонецЕсли;
									КонецЕсли;
									Если (КатегорияНовостей <> Неопределено) И (НЕ КатегорияНовостей.Пустая()) Тогда
										// Заполнить во всех строках со значением КатегорияНовостейСтрока
										//  и ЛентаНовостей значение КатегорияНовостей.
										ПараметрыОтбора = Новый Структура;
											ПараметрыОтбора.Вставить("ЛентаНовостей", ТекущаяКатегория.ЛентаНовостей);
											ПараметрыОтбора.Вставить("КатегорияНовостейСтрока", ТекущаяКатегория.КатегорияНовостейСтрока);
										НайденныеСтроки = ТаблицаКатегорийИЗначенийИнтервалыВерсий.НайтиСтроки(ПараметрыОтбора);
										Для каждого ТекущаяНайденнаяСтрока Из НайденныеСтроки Цикл
											ТекущаяНайденнаяСтрока.КатегорияНовостей = КатегорияНовостей;
										КонецЦикла;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;

						ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
							КонтекстВыполненияВложенныйВложенный,
							КодРезультатаВложенныйВложенный,
							ОписаниеРезультатаВложенныйВложенный,
							Неопределено);

#КонецОбласти

#Область ОбновлениеКатегорийИЗначений_ЗаполнениеПростыхЗначений

						ИдентификаторШага2 = "ЗаполнениеПростыхЗначений"; // Идентификатор.
						КодРезультатаВложенныйВложенный = 0;
						ОписаниеРезультатаВложенныйВложенный = "";
						ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
							КонтекстВыполненияВложенныйВложенный,
							"ОбработкаНовостей." + НаименованиеПроцедурыФункции
								+ "." + ИдентификаторШага1
								+ "." + ИдентификаторШага2, // Идентификатор.
							НСтр("ru='Пересчет необработанных категорий новостей'")
								+ " / " + ИдентификаторШага1
								+ " / " + ИдентификаторШага2);

							// 1.4. Заполнить простые значения - булево, число, строка, дата.
							// 1.4.1. Для простых категорий.
							Для каждого ТекущаяСтрока Из ТаблицаКатегорийИЗначенийПростые Цикл
								// Булево записывается в формате XML (true, false) или по-русски Истина, Ложь.
								Если ТекущаяСтрока.ТипЗначенияСтрока = "Булево" Тогда
									Если (ВРег(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока) = ВРег("Истина"))
											ИЛИ (ВРег(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока) = ВРег("True")) Тогда
										Значение = Истина;
									Иначе
										Значение = Ложь;
									КонецЕсли;
									ТекущаяСтрока.ЗначениеКатегорииНовостей = Значение;
									ТекущаяСтрока.ВсеЗаполнено = Истина;
								ИначеЕсли ТекущаяСтрока.ТипЗначенияСтрока = "Дата" Тогда
									// Дата хранится в формате XML или ГГГГММДДЧЧММСС.
									Попытка
										Значение = XMLЗначение(ТипДата, ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока);
									Исключение
										Попытка
											Значение = Дата(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока);
										Исключение
											Значение = '00010101';
											// Удалять такие неправильные записи.
											ТекущаяСтрока.УдалитьЗапись = Истина;
										КонецПопытки;
									КонецПопытки;
									ТекущаяСтрока.ЗначениеКатегорииНовостей = Значение;
									ТекущаяСтрока.ВсеЗаполнено = Истина;
								ИначеЕсли ТекущаяСтрока.ТипЗначенияСтрока = "Число" Тогда
									// Число хранится в формате ####.#### - разделитель дробной части ".", без разделителя групп разрядов и т.п.
									ГдеРазделитель = СтрНайти(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока, ".");
									Если ГдеРазделитель > 0 Тогда
										ЦелаяЧасть = Число(Лев(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока, ГдеРазделитель - 1));
										ДробнаяЧастьСтрока = Прав(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока, СтрДлина(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока) - ГдеРазделитель);
										Попытка
											// 0,1    -> 1 / (10^1) = 1 / 10;
											// 0,01   -> 1 / (10^2) = 1 / 100;
											// 0,001  -> 1 / (10^3) = 1 / 1000;
											// 0,0001 -> 1 / (10^4) = 1 / 10000.
											ДробнаяЧасть = Число(ДробнаяЧастьСтрока) / Pow(10, СтрДлина(ДробнаяЧастьСтрока));
											Если ЦелаяЧасть > 0 Тогда // 123.45
												Значение = ЦелаяЧасть + ДробнаяЧасть;
											Иначе // -123.45
												Значение = ЦелаяЧасть - ДробнаяЧасть;
											КонецЕсли;
										Исключение
											Значение = 0;
											// Удалять такие неправильные записи.
											ТекущаяСтрока.УдалитьЗапись = Истина;
										КонецПопытки;
									Иначе
										Попытка
											Значение = Число(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока);
										Исключение
											Значение = 0;
											// Удалять такие неправильные записи.
											ТекущаяСтрока.УдалитьЗапись = Истина;
										КонецПопытки;
									КонецЕсли;
									ТекущаяСтрока.ЗначениеКатегорииНовостей = Значение;
									ТекущаяСтрока.ВсеЗаполнено = Истина;
								ИначеЕсли ТекущаяСтрока.ТипЗначенияСтрока = "Строка" Тогда
									Значение = ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока;
									ТекущаяСтрока.ЗначениеКатегорииНовостей = Значение;
									ТекущаяСтрока.ВсеЗаполнено = Истина;
								ИначеЕсли ТекущаяСтрока.ТипЗначенияСтрока = "СправочникСсылка.ЗначенияКатегорийНовостей" Тогда
									// Может передаться как по наименованию (русскими буквами), так и по коду (английскими) - искать обоими способами внутри владельца.
									Значение = Справочники.ЗначенияКатегорийНовостей.НайтиПоКоду(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока, Ложь, , ТекущаяСтрока.КатегорияНовостей);
									Если (Значение = Неопределено) ИЛИ (Значение.Пустая()) Тогда
										Значение = Справочники.ЗначенияКатегорийНовостей.НайтиПоНаименованию(ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока, Истина, , ТекущаяСтрока.КатегорияНовостей);
									КонецЕсли;
									Если (Значение <> Неопределено) И (НЕ Значение.Пустая()) Тогда
										ТекущаяСтрока.ЗначениеКатегорииНовостей = Значение;
										ТекущаяСтрока.ВсеЗаполнено = Истина;
									Иначе
										// Возможно, все еще не обновились стандартные списки с сервера.
									КонецЕсли;
								Иначе
									// Удалять такие неправильные записи.
									ТекущаяСтрока.УдалитьЗапись = Истина;
								КонецЕсли;
								// Заодно проверить УсловиеОтбора:
								// Для категорий "Product", "ProductVersion", "PlatformVersion" должно быть одно из: eq ne lt le gt ge.
								// Во всех остальных случаях установить eq.
								ТекущаяСтрока.УсловиеОтбора = НРег(ТекущаяСтрока.УсловиеОтбора);
								Если ВРег(ТекущаяСтрока.КатегорияНовостей.Код) = ВРег("Product")
										ИЛИ ВРег(ТекущаяСтрока.КатегорияНовостей.Код) = ВРег("ProductVersion")
										ИЛИ ВРег(ТекущаяСтрока.КатегорияНовостей.Код) = ВРег("PlatformVersion") Тогда
									Если ТекущаяСтрока.УсловиеОтбора = "eq"
											ИЛИ ТекущаяСтрока.УсловиеОтбора = "ne"
											ИЛИ ТекущаяСтрока.УсловиеОтбора = "lt"
											ИЛИ ТекущаяСтрока.УсловиеОтбора = "le"
											ИЛИ ТекущаяСтрока.УсловиеОтбора = "gt"
											ИЛИ ТекущаяСтрока.УсловиеОтбора = "ge" Тогда
										// Все нормально.
									Иначе // установить eq
										ТекущаяСтрока.УсловиеОтбора = "eq";
									КонецЕсли;
								Иначе // установить eq
									ТекущаяСтрока.УсловиеОтбора = "eq";
								КонецЕсли;
							КонецЦикла;

						ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
							КонтекстВыполненияВложенныйВложенный,
							КодРезультатаВложенныйВложенный,
							ОписаниеРезультатаВложенныйВложенный,
							Неопределено);

#КонецОбласти

#Область ОбновлениеКатегорийИЗначений_ЗаполнениеЗначенийИнтерваловВерсий

						ИдентификаторШага2 = "ЗаполнениеЗначенийИнтервалыВерсий"; // Идентификатор.
						КодРезультатаВложенныйВложенный = 0;
						ОписаниеРезультатаВложенныйВложенный = "";
						ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
							КонтекстВыполненияВложенныйВложенный,
							"ОбработкаНовостей." + НаименованиеПроцедурыФункции
								+ "." + ИдентификаторШага1
								+ "." + ИдентификаторШага2, // Идентификатор.
							НСтр("ru='Пересчет необработанных категорий новостей'")
								+ " / " + ИдентификаторШага1
								+ " / " + ИдентификаторШага2);

							// 1.4.2. Для интервалов версий.
							Для каждого ТекущаяСтрока Из ТаблицаКатегорийИЗначенийИнтервалыВерсий Цикл
								// Категория новостей должна быть правильного типа - интервалы версий продукта, иначе - удалить строку.
								Если (ТипЗнч(ТекущаяСтрока.КатегорияНовостей) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей"))
										И НЕ ТекущаяСтрока.КатегорияНовостей.Пустая() Тогда
									Если ТекущаяСтрока.КатегорияНовостей.ТипЗначенияВспомогательный <> Перечисления.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ИнтервалыВерсийПродукта Тогда
										ТекущаяСтрока.УдалитьЗапись = Истина;
									Иначе
										// Тут достаточно, чтобы была заполнена категория, все остальные значения (Продукт, ВерсияОТ, ВерсияДО) - строковые.
										ТекущаяСтрока.ВсеЗаполнено = Истина;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;

						ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
							КонтекстВыполненияВложенныйВложенный,
							КодРезультатаВложенныйВложенный,
							ОписаниеРезультатаВложенныйВложенный,
							Неопределено);

#КонецОбласти

					Иначе
						ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Нет данных для обработки.'"));
					КонецЕсли;

				ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенный,
					КодРезультатаВложенный,
					СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
					КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область УдалениеНеправильныхЗаписей

				Если ЕстьДанныеДляОбработки = Истина Тогда

					КодРезультатаВложенный = 0;
					ИдентификаторШага1 = "УдалениеНеправильныхЗаписей"; // Идентификатор.
					ЛогШаговВыполненияВложенный = Новый Массив;
					ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
						КонтекстВыполненияВложенный,
						"ОбработкаНовостей." + НаименованиеПроцедурыФункции + "." + ИдентификаторШага1, // Идентификатор.
						НСтр("ru='Пересчет необработанных категорий новостей'") + " / " + ИдентификаторШага1);

						// 1.5. Удалить неправильные записи.
						// 1.5.1. Для простых категорий.
						Для каждого ТекущаяСтрока Из ТаблицаКатегорийИЗначенийПростые Цикл
							Если ТекущаяСтрока.УдалитьЗапись = Истина Тогда
								Запись = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьМенеджерЗаписи();
									Запись.КатегорияНовостейСтрока         = ТекущаяСтрока.КатегорияНовостейСтрока;
									Запись.ЗначениеКатегорииНовостейСтрока = ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока;
									Запись.ЛентаНовостей                   = ТекущаяСтрока.ЛентаНовостей;
									Запись.УИННовости                      = ТекущаяСтрока.УИННовости;
								Запись.Удалить();

								ЛогШаговВыполненияВложенный.Добавить(
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='Удалена запись из регистра сведений КатегорииНовостейПростыеНеобработанные с ключами:
											| - КатегорияНовостейСтрока: %1
											| - ЗначениеКатегорииНовостейСтрока: %2
											| - Условие отбора: %3
											| - ЛентаНовостей: %4
											| - УИННовости: %5'"),
										ТекущаяСтрока.КатегорияНовостейСтрока,
										ТекущаяСтрока.ЗначениеКатегорииНовостейСтрока,
										ТекущаяСтрока.УсловиеОтбора,
										ТекущаяСтрока.ЛентаНовостей,
										ТекущаяСтрока.УИННовости));
							КонецЕсли;
						КонецЦикла;
						// 1.5.2. Для интервалов версий.
						Для каждого ТекущаяСтрока Из ТаблицаКатегорийИЗначенийИнтервалыВерсий Цикл
							Если ТекущаяСтрока.УдалитьЗапись = Истина Тогда
								Запись = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьМенеджерЗаписи();
									Запись.КатегорияНовостейСтрока         = ТекущаяСтрока.КатегорияНовостейСтрока;
									Запись.ЛентаНовостей                   = ТекущаяСтрока.ЛентаНовостей;
									Запись.УИННовости                      = ТекущаяСтрока.УИННовости;
									Запись.Продукт                         = ТекущаяСтрока.Продукт;
									Запись.ВерсияОТ                        = ТекущаяСтрока.ВерсияОТ;
									Запись.ВерсияДО                        = ТекущаяСтрока.ВерсияДО;
								Запись.Удалить();

								ЛогШаговВыполненияВложенный.Добавить(
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='Удалена запись из регистра сведений КатегорииНовостейИнтервалыВерсийНеобработанные с ключами:
											| - КатегорияНовостейСтрока: %1
											| - Продукт: %2
											| - ВерсияОТ: %3
											| - ВерсияДО: %4
											| - ЛентаНовостей: %5
											| - УИННовости: %6'"),
										ТекущаяСтрока.КатегорияНовостейСтрока,
										ТекущаяСтрока.Продукт,
										ТекущаяСтрока.ВерсияОТ,
										ТекущаяСтрока.ВерсияДО,
										ТекущаяСтрока.ЛентаНовостей,
										ТекущаяСтрока.УИННовости));
							КонецЕсли;
						КонецЦикла;

					ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
						КонтекстВыполненияВложенный,
						КодРезультатаВложенный,
						СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
						Неопределено);

				КонецЕсли;

#КонецОбласти

#Область ПереносПравильныхЗаписей

				Если ЕстьДанныеДляОбработки = Истина Тогда

					КодРезультатаВложенный = 0;
					ИдентификаторШага1 = "ПереносПравильныхЗаписей"; // Идентификатор.
					ЛогШаговВыполненияВложенный = Новый Массив;
					ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
						КонтекстВыполненияВложенный,
						"ОбработкаНовостей." + НаименованиеПроцедурыФункции + "." + ИдентификаторШага1, // Идентификатор.
						НСтр("ru='Пересчет необработанных категорий новостей'") + " / " + ИдентификаторШага1);

						// 1.6. Перенести правильные записи в регистры сведений.
						// 1.6.1. Перенос правильных записей в регистр сведений КатегорииНовостейПростые.
						Если ТаблицаКатегорийИЗначенийПростые.Количество() > 0 Тогда
							ТаблицаЗаполненныхКатегорийИЗначений = ТаблицаКатегорийИЗначенийПростые.Скопировать(
								Новый Структура("ВсеЗаполнено, УдалитьЗапись",
									Истина,
									Ложь));
							ТаблицаЗаполненныхКатегорийИЗначений.Свернуть("КатегорияНовостей, ЗначениеКатегорииНовостей, КатегорияНовостейСтрока, ЗначениеКатегорииНовостейСтрока");
							Для каждого ТекущаяСтрокаКатегорийИЗначений Из ТаблицаЗаполненныхКатегорийИЗначений Цикл
								// Заполнить регистр сведений "КатегорииНовостейПростые".
								НайденныеСтроки = ТаблицаКатегорийИЗначенийПростые.НайтиСтроки(
									Новый Структура("КатегорияНовостей, ЗначениеКатегорииНовостей",
										ТекущаяСтрокаКатегорийИЗначений.КатегорияНовостей,
										ТекущаяСтрокаКатегорийИЗначений.ЗначениеКатегорииНовостей));
								Для каждого ТекущаяНайденнаяСтрока Из НайденныеСтроки Цикл
									Запись = РегистрыСведений.КатегорииНовостейПростые.СоздатьМенеджерЗаписи();
										Запись.Новость                   = ТекущаяНайденнаяСтрока.Новость;
										Запись.КатегорияНовостей         = ТекущаяНайденнаяСтрока.КатегорияНовостей;
										Запись.ЗначениеКатегорииНовостей = ТекущаяНайденнаяСтрока.ЗначениеКатегорииНовостей;
										Запись.УсловиеОтбора             = ТекущаяНайденнаяСтрока.УсловиеОтбора;
									Запись.Записать(Истина);
								КонецЦикла;
								// Очистить регистр сведений "КатегорииНовостейПростыеНеобработанные" для обработанной строки
								//  КатегорияНовостейСтрока / ЗначениеКатегорииНовостейСтрока и всех лент новостей и УИН новостей.
								НаборЗаписей = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьНаборЗаписей();
									НаборЗаписей.Отбор.КатегорияНовостейСтрока.Установить(ТекущаяСтрокаКатегорийИЗначений.КатегорияНовостейСтрока);
									НаборЗаписей.Отбор.ЗначениеКатегорииНовостейСтрока.Установить(ТекущаяСтрокаКатегорийИЗначений.ЗначениеКатегорииНовостейСтрока);
								НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей
							КонецЦикла;
							ЛогШаговВыполненияВложенный.Добавить(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Перенесено %1 значений простых категорий'"),
									ТаблицаЗаполненныхКатегорийИЗначений.Количество()));
						КонецЕсли;

						// 1.6.2. Перенос правильных записей в регистр сведений КатегорииНовостейИнтервалыВерсий.
						Если ТаблицаКатегорийИЗначенийИнтервалыВерсий.Количество() > 0 Тогда
							ТаблицаЗаполненныхКатегорийИЗначений = ТаблицаКатегорийИЗначенийИнтервалыВерсий.Скопировать(
								Новый Структура("ВсеЗаполнено, УдалитьЗапись",
									Истина,
									Ложь));
							ТаблицаЗаполненныхКатегорийИЗначений.Свернуть("КатегорияНовостей, Продукт, ВерсияОТ, ВерсияДО");
							Для каждого ТекущаяСтрокаКатегорийИЗначений Из ТаблицаЗаполненныхКатегорийИЗначений Цикл
								// Заполнить регистр сведений "КатегорииНовостейИнтервалыВерсий".
								ОписаниеОтбора = Новый Структура;
									ОписаниеОтбора.Вставить("КатегорияНовостей", ТекущаяСтрокаКатегорийИЗначений.КатегорияНовостей);
									ОписаниеОтбора.Вставить("Продукт", ТекущаяСтрокаКатегорийИЗначений.Продукт);
									ОписаниеОтбора.Вставить("ВерсияОТ", ТекущаяСтрокаКатегорийИЗначений.ВерсияОТ);
									ОписаниеОтбора.Вставить("ВерсияДО", ТекущаяСтрокаКатегорийИЗначений.ВерсияДО);
								НайденныеСтроки = ТаблицаКатегорийИЗначенийИнтервалыВерсий.НайтиСтроки(ОписаниеОтбора);
								Для каждого ТекущаяНайденнаяСтрока Из НайденныеСтроки Цикл
									Запись = РегистрыСведений.КатегорииНовостейИнтервалыВерсий.СоздатьМенеджерЗаписи();
										Запись.Новость           = ТекущаяНайденнаяСтрока.Новость;
										Запись.КатегорияНовостей = ТекущаяНайденнаяСтрока.КатегорияНовостей;
										Запись.Продукт           = ТекущаяНайденнаяСтрока.Продукт;
										Запись.ВерсияОТ          = ТекущаяНайденнаяСтрока.ВерсияОТ;
										Запись.ВерсияДО          = ТекущаяНайденнаяСтрока.ВерсияДО;
									Запись.Записать(Истина);
								КонецЦикла;
								// Очистить регистр сведений "КатегорииНовостейИнтервалыВерсийНеобработанные" для обработанной строки
								//  КатегорияНовостейСтрока / Продукт / ВерсияОТ / ВерсияДО и всех лент новостей и УИН новостей.
								НаборЗаписей = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьНаборЗаписей();
									НаборЗаписей.Отбор.КатегорияНовостейСтрока.Установить(ТекущаяСтрокаКатегорийИЗначений.КатегорияНовостей.Код);
									НаборЗаписей.Отбор.Продукт.Установить(ТекущаяСтрокаКатегорийИЗначений.Продукт);
									НаборЗаписей.Отбор.ВерсияОТ.Установить(ТекущаяСтрокаКатегорийИЗначений.ВерсияОТ);
									НаборЗаписей.Отбор.ВерсияДО.Установить(ТекущаяСтрокаКатегорийИЗначений.ВерсияДО);
								НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей
							КонецЦикла;
							ЛогШаговВыполненияВложенный.Добавить(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Перенесено %1 значений категорий интервалов версий'"),
									ТаблицаЗаполненныхКатегорийИЗначений.Количество()));
						КонецЕсли;

					ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
						КонтекстВыполненияВложенный,
						КодРезультатаВложенный,
						СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
						Неопределено);

				КонецЕсли;

#КонецОбласти

#Область ОчисткаМусора

				Если ЕстьДанныеДляОбработки = Истина Тогда

					КодРезультатаВложенный = 0;
					ИдентификаторШага1 = "ОчисткаМусора"; // Идентификатор.
					ЛогШаговВыполненияВложенный = Новый Массив;
					ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
						КонтекстВыполненияВложенный,
						"ОбработкаНовостей." + НаименованиеПроцедурыФункции + "." + ИдентификаторШага1, // Идентификатор.
						НСтр("ru='ПересчитатьНеобработанныеКатегорииНовостей, удаление записей, не привязанных к новостям.'") + " / " + ИдентификаторШага1);

						// 2. Со временем в регистрах "КатегорииНовостейПростыеНеобработанные" и "КатегорииНовостейИнтервалыВерсийНеобработанные"
						//  могут скапливаться не привязанные к новостям данные.
						// Например, когда новость удалили, а категория/значение так и осталась необработанная.
						// Т.к. в регистрах сведений "КатегорииНовостейПростыеНеобработанные" и "КатегорииНовостейИнтервалыВерсийНеобработанные"
						//  привязка к новости осуществляется не по внутренней ссылке (которая на этапе загрузки новостей еще не сформирована),
						//  а по комбинации ЛентаНовостей / УИННовости, то записи из этого регистра не будут удаляться при удалении новости.
						// Необходимо проверить, есть ли комбинации ЛентаНовостей / УИННовости, привязанные к этим необработанным категориям и удалить записи,
						//  которые не привязаны к новостям.
						// Также возможна ситуация, когда в результате каких-либо сбоев в регистре
						//  "КатегорииНовостейИнтервалыВерсийНеобработанные" скапливаются данные, которые на самом деле уже перенесены.
						//  Такие ситуации тоже надо проверять и удалять уже перенесенные данные.

						// 2.1. Регистр сведений "КатегорииНовостейПростыеНеобработанные", потерянные записи.
						ТНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
						Запрос = Новый Запрос;
						Запрос.Текст = "
							|ВЫБРАТЬ
							|	Рег.ЛентаНовостей КАК ЛентаНовостей,
							|	Рег.УИННовости    КАК УИННовости,
							|	Спр.Ссылка        КАК Новость
							|ИЗ
							|	РегистрСведений.КатегорииНовостейПростыеНеобработанные КАК Рег
							|
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|	Справочник.Новости КАК Спр
							|	ПО
							|		Рег.ЛентаНовостей = Спр.ЛентаНовостей
							|		И Рег.УИННовости = Спр.УИННовости
							|ГДЕ
							|	Спр.Ссылка ЕСТЬ NULL
							|";

						Результат = Запрос.Выполнить(); // ПересчитатьНеобработанныеКатегорииНовостей(), Регистр сведений "КатегорииНовостейПростыеНеобработанные", потерянные записи. // АПК:1328 Конкурентная работа маловероятна.
						Если НЕ Результат.Пустой() Тогда
							ЛогШаговВыполненияВложенный.Добавить(
								НСтр("ru='Есть необработанные простые категории, не привязанные к новостям:'"));
							Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
							Пока Выборка.Следующий() Цикл
								// Если по связке Лента новостей / УИННовости нет новостей, то удалять весь набор записей (со всеми значениями категорий).
								НаборЗаписей = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьНаборЗаписей();
									НаборЗаписей.Отбор.ЛентаНовостей.Установить(Выборка.ЛентаНовостей);
									НаборЗаписей.Отбор.УИННовости.Установить(Выборка.УИННовости);
								НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей
								ЛогШаговВыполненияВложенный.Добавить(
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='УИН: %1'"),
										Выборка.УИННовости));
							КонецЦикла;
						Иначе
							ЛогШаговВыполненияВложенный.Добавить(
								НСтр("ru='Нет необработанных простых категорий, не привязанных к новостям.'"));
						КонецЕсли;
						ТКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
						ЛогШаговВыполненияВложенный.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Время выполнения: %1 мс
									|-----'"),
								Формат(ТКонец-ТНачало, "ЧЦ=10; ЧДЦ=; ЧРГ=' '; ЧН=0; ЧГ=3,0")));

						// 2.2. Регистр сведений "КатегорииНовостейИнтервалыВерсийНеобработанные", потерянные записи.
						ТНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
						Запрос = Новый Запрос;
						Запрос.Текст = "
							|ВЫБРАТЬ
							|	Рег.ЛентаНовостей КАК ЛентаНовостей,
							|	Рег.УИННовости    КАК УИННовости,
							|	Спр.Ссылка        КАК Новость
							|ИЗ
							|	РегистрСведений.КатегорииНовостейИнтервалыВерсийНеобработанные КАК Рег
							|
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|	Справочник.Новости КАК Спр
							|	ПО
							|		Рег.ЛентаНовостей = Спр.ЛентаНовостей
							|		И Рег.УИННовости = Спр.УИННовости
							|ГДЕ
							|	Спр.Ссылка ЕСТЬ NULL
							|";

						Результат = Запрос.Выполнить(); // ПересчитатьНеобработанныеКатегорииНовостей(), Регистр сведений "КатегорииНовостейИнтервалыВерсийНеобработанные", потерянные записи.
						Если НЕ Результат.Пустой() Тогда
							ЛогШаговВыполненияВложенный.Добавить(
								НСтр("ru='Есть необработанные категории интервалов версий, не привязанные к новостям:'"));
							Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
							Пока Выборка.Следующий() Цикл
								// Если по связке Лента новостей / УИННовости нет новостей, то удалять весь набор записей.
								НаборЗаписей = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьНаборЗаписей();
									НаборЗаписей.Отбор.ЛентаНовостей.Установить(Выборка.ЛентаНовостей);
									НаборЗаписей.Отбор.УИННовости.Установить(Выборка.УИННовости);
								НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей
								ЛогШаговВыполненияВложенный.Добавить(
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='УИН: %1'"),
										Выборка.УИННовости));
							КонецЦикла;
						Иначе
							ЛогШаговВыполненияВложенный.Добавить(
								НСтр("ru='Нет необработанных категорий интервалов версий, не привязанных к новостям.'"));
						КонецЕсли;
						ТКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
						ЛогШаговВыполненияВложенный.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Время выполнения: %1 мс
									|-----'"),
								Формат(ТКонец-ТНачало, "ЧЦ=10; ЧДЦ=; ЧРГ=' '; ЧН=0; ЧГ=3,0")));

						// 2.3. Регистр сведений "КатегорииНовостейИнтервалыВерсийНеобработанные", уже перенесенные записи.
						ТНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
						Запрос = Новый Запрос;
						Запрос.Текст = "
							|ВЫБРАТЬ
							|	РегНеобработанные.КатегорияНовостейСтрока КАК КатегорияНовостейСтрока,
							|	РегНеобработанные.ЛентаНовостей           КАК ЛентаНовостей,
							|	РегНеобработанные.УИННовости              КАК УИННовости,
							|	РегНеобработанные.Продукт                 КАК Продукт,
							|	РегНеобработанные.ВерсияОТ                КАК ВерсияОТ,
							|	РегНеобработанные.ВерсияДО                КАК ВерсияДО
							|ИЗ
							|	РегистрСведений.КатегорииНовостейИнтервалыВерсийНеобработанные КАК РегНеобработанные
							|
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК РегОбработанные
							|	ПО
							|		РегНеобработанные.КатегорияНовостейСтрока = РегОбработанные.КатегорияНовостей.Код
							|		И РегНеобработанные.ЛентаНовостей         = РегОбработанные.Новость.ЛентаНовостей
							|		И РегНеобработанные.УИННовости            = РегОбработанные.Новость.УИННовости
							|		И РегНеобработанные.Продукт               = РегОбработанные.Продукт
							|		И РегНеобработанные.ВерсияОТ              = РегОбработанные.ВерсияОТ
							|		И РегНеобработанные.ВерсияДО              = РегОбработанные.ВерсияДО
							|";

						Результат = Запрос.Выполнить(); // ПересчитатьНеобработанныеКатегорииНовостей(), Регистр сведений "КатегорииНовостейИнтервалыВерсийНеобработанные", уже перенесенные записи.
						Если НЕ Результат.Пустой() Тогда
							ЛогШаговВыполненияВложенный.Добавить(
								НСтр("ru='Есть необработанные категории интервалов версий, которые уже перенесены:'"));
							Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
							Пока Выборка.Следующий() Цикл
								// Удалять записи поштучно.
								Запись = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьМенеджерЗаписи();
									Запись.КатегорияНовостейСтрока = Выборка.КатегорияНовостейСтрока;
									Запись.ЛентаНовостей           = Выборка.ЛентаНовостей;
									Запись.УИННовости              = Выборка.УИННовости;
									Запись.Продукт                 = Выборка.Продукт;
									Запись.ВерсияОТ                = Выборка.ВерсияОТ;
									Запись.ВерсияДО                = Выборка.ВерсияДО;
								Запись.Удалить();
								ЛогШаговВыполненияВложенный.Добавить(
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='УИН: %1, Категория %2, Продукт %3, %4..%5'"),
										Выборка.УИННовости,
										Выборка.КатегорияНовостейСтрока,
										Выборка.Продукт,
										Выборка.ВерсияОТ,
										Выборка.ВерсияДО));
							КонецЦикла;
						Иначе
							ЛогШаговВыполненияВложенный.Добавить(
								НСтр("ru='Нет необработанных категорий интервалов версий, которые уже перенесены.'"));
						КонецЕсли;
						ТКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
						ЛогШаговВыполненияВложенный.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Время выполнения: %1 мс
									|-----'"),
								Формат(ТКонец-ТНачало, "ЧЦ=10; ЧДЦ=; ЧРГ=' '; ЧН=0; ЧГ=3,0")));

					ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
						КонтекстВыполненияВложенный,
						КодРезультатаВложенный,
						СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
						Неопределено);

				КонецЕсли;

#КонецОбласти

		КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ПересчитатьНеобработанныеКатегорииНовостей'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Пересчет необработанных категорий новостей'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Расширенный"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает регистр сведений "РассчитанныеОтборыПоНовостям_РедкоМеняющиеся".
// В этом регистре хранятся заранее рассчитанные результаты отборов по новостям по редко меняющимся категориям:
//  - Версия платформы;
//  - Версия конфигурации;
//  - Продукт (включает в себя Имя+Версия, поэтому тоже меняется).
// Этот регистр имеет смысл пересчитывать после получения новостей, а также после обновления конфигурации и платформы.
// Для расчета будет браться информация из двух регистров - КатегорииНовостейПростые и КатегорииНовостейИнтервалыВерсий.
//
// Должно запускаться от имени пользователя с правами, достаточными для изменения этих данных.
//
// Если включено разделение данных, то запускать вручную можно только при отключенных разделителях.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ПересчитатьОтборыПоНовостям_РедкоМеняющиеся(КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "ПересчитатьОтборыПоНовостям_РедкоМеняющиеся"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;

	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Пересчет отборов по новостям (редко меняющихся)'"));

		// Сохранить текущую версию платформы ДО выполнения остального кода.
		// Это связано с тем, что может быть не заполнен план видов характеристик (КатегорияПродукт,
		//  КатегорияВерсияПродукта, КатегорияВерсияПлатформы) и выполнение прервется (см. "Возврат;").

		// Сохранить в хранилище настроек текущую версию платформы.
		ЛокальнаяСистемнаяИнформация = Новый СистемнаяИнформация;
		ЛокальнаяТекущаяВерсия = ЛокальнаяСистемнаяИнформация.ВерсияПриложения;
		КлючОбъекта = "СистемнаяИнформация_ВерсияПриложения";
		// Получить сохраненную ранее версию платформы. Сохранять только в случае, если она изменена.
		ЛокальнаяПоследняяВерсия = ХранилищаНастроек.НастройкиНовостей.Загрузить(КлючОбъекта);
		Если ЛокальнаяТекущаяВерсия <> ЛокальнаяПоследняяВерсия Тогда
			ХранилищаНастроек.НастройкиНовостей.Сохранить(
				КлючОбъекта,
				,
				ЛокальнаяТекущаяВерсия);
		КонецЕсли;

		ВыполнениеРазрешено = Истина;
		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			// Зашли в конфигурацию под пользователем с разделением (с входом в область данных).
			Если (НЕ ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей())
					// Если вошли в область данных (могли зайти под пользователем без разделителей).
					ИЛИ (ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()) Тогда
				ВыполнениеРазрешено = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если ВыполнениеРазрешено = Истина Тогда

			Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся) = Истина Тогда

				// Список редко-меняющихся категорий.
				// План видов характеристик КатегорииНовостей должен уже быть заполнен с сервера.
				КатегорияВерсияПродукта  = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ProductVersion");
				КатегорияВерсияПлатформы = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("PlatformVersion");
				Если (КатегорияВерсияПродукта.Пустая())
						ИЛИ (КатегорияВерсияПлатформы.Пустая()) Тогда

					// Возможно, список категорий еще не пришел с сервера.
					ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='ПересчитатьОтборыПоНовостям_РедкоМеняющиеся, не заполнены значения плана видов характеристик КатегорииНовостей:
							|КатегорияВерсияПродукта: %1
							|КатегорияВерсияПлатформы: %2
							|Возможно, они еще не обновились с сервера при обновлении классификаторов, а также не были заполнены в макете СтандартныеЗначения плана видов характеристик КатегорииНовостей'"),
						КатегорияВерсияПродукта,
						КатегорияВерсияПлатформы)
						+ Символы.ПС;

				Иначе

					// Получим списки значений отборов, но для некоторых условий (>, >=, <, <=) нам будут нужны только единственные значения, а не список.

					ТекущаяДатаДляРасчетов = ТекущаяУниверсальнаяДата();

					// Значения предопределенных категорий.
					ИмяКонфигурации = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ИмяКонфигурации"); // Только имя продукта
					ВерсияПлатформы = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПлатформы"); // Только полная версия платформы
					ВерсияПродукта  = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПродукта"); // Только полная версия продукта

					Запрос = Новый Запрос;
					Запрос.Текст = "
						|// 0. Поместим все значения интервалов версий платформы во временную таблицу.
						|// Поместим все значения интервалов версий во временную таблицу.
						|ВЫБРАТЬ
						|	Рег.Новость           КАК Новость,
						|	Рег.КатегорияНовостей КАК КатегорияНовостей,
						|	Рег.Продукт           КАК Продукт,
						|	//Рег.ВерсияОТ        КАК ВерсияОТ,
						|	//Рег.ВерсияДО        КАК ВерсияДО,
						|	ВЫБОР
						|		КОГДА (Рег.Продукт = &ЭтаПлатформа)
						|			И (&ВерсияПлатформы МЕЖДУ Рег.ВерсияОТ И Рег.ВерсияДО) ТОГДА
						|			ИСТИНА
						|		ИНАЧЕ
						|			ЛОЖЬ
						|	КОНЕЦ                 КАК РезультатПоПлатформе
						|ПОМЕСТИТЬ ВТ_ЗначенияОтборов_ИнтервалыВерсийПлатформы
						|ИЗ
						|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК Рег
						|ГДЕ
						|	Рег.КатегорияНовостей = &КатегорияВерсияПлатформы
						|ИНДЕКСИРОВАТЬ ПО
						|	Новость,
						|	КатегорияНовостей
						|;
						|
						|// 1. Поместим все значения интервалов версий продукта во временную таблицу.
						|// Поместим все значения интервалов версий во временную таблицу.
						|ВЫБРАТЬ
						|	Рег.Новость           КАК Новость,
						|	Рег.КатегорияНовостей КАК КатегорияНовостей,
						|	Рег.Продукт           КАК Продукт,
						|	//Рег.ВерсияОТ        КАК ВерсияОТ,
						|	//Рег.ВерсияДО        КАК ВерсияДО,
						|	ВЫБОР
						|		КОГДА (Рег.Продукт = &ИмяКонфигурации)
						|			И (&ВерсияПродукта МЕЖДУ Рег.ВерсияОТ И Рег.ВерсияДО) ТОГДА
						|			ИСТИНА
						|		ИНАЧЕ
						|			ЛОЖЬ
						|	КОНЕЦ                 КАК РезультатПоПродукту
						|ПОМЕСТИТЬ ВТ_ЗначенияОтборов_ИнтервалыВерсийПродукта
						|ИЗ
						|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК Рег
						|ГДЕ
						|	Рег.КатегорияНовостей = &КатегорияВерсияПродукта
						|ИНДЕКСИРОВАТЬ ПО
						|	Новость,
						|	КатегорияНовостей
						|;
						|
						|// 2. Итоговый результат отбора по платформе.
						|ВЫБРАТЬ
						|	ВТ.Новость                        КАК Новость,
						|	ВТ.КатегорияНовостей              КАК КатегорияНовостей,
						|	МАКСИМУМ(ВТ.РезультатПоПлатформе) КАК ИтоговыйРезультатПоПлатформе
						|ПОМЕСТИТЬ ВТ_РезультатОтборов_Платформа
						|ИЗ
						|	ВТ_ЗначенияОтборов_ИнтервалыВерсийПлатформы КАК ВТ
						|ГДЕ
						|	// Для категории Версия платформы в поле Продукт должно быть написано Platform (т.к. может быть еще мобильная платформа и т.п.).
						|	ВТ.КатегорияНовостей = &КатегорияВерсияПлатформы
						|СГРУППИРОВАТЬ ПО
						|	ВТ.Новость,
						|	ВТ.КатегорияНовостей
						|ИНДЕКСИРОВАТЬ ПО
						|	Новость,
						|	КатегорияНовостей
						|;
						|
						|// 3. Результат отбора по продукту.
						|ВЫБРАТЬ
						|	ВТ.Новость                       КАК Новость,
						|	ВТ.КатегорияНовостей             КАК КатегорияНовостей,
						|	МАКСИМУМ(ВТ.РезультатПоПродукту) КАК ИтоговыйРезультатПоПродукту
						|ПОМЕСТИТЬ ВТ_РезультатОтборов_Продукт
						|ИЗ
						|	ВТ_ЗначенияОтборов_ИнтервалыВерсийПродукта КАК ВТ
						|ГДЕ
						|	// Для категории Версия платформы в поле Продукт должно быть написано Platform (т.к. может быть еще мобильная платформа и т.п.).
						|	ВТ.КатегорияНовостей = &КатегорияВерсияПродукта
						|СГРУППИРОВАТЬ ПО
						|	ВТ.Новость,
						|	ВТ.КатегорияНовостей
						|ИНДЕКСИРОВАТЬ ПО
						|	Новость,
						|	КатегорияНовостей
						|;
						|
						|// 4. Основная таблица, все новости.
						|ВЫБРАТЬ
						|	Спр.Ссылка                                             КАК Новость,
						|	ВЫБОР
						|		КОГДА ВТ_РезультатОтборов_Платформа.ИтоговыйРезультатПоПлатформе ЕСТЬ NULL ТОГДА 2
						|		КОГДА ВТ_РезультатОтборов_Платформа.ИтоговыйРезультатПоПлатформе = ИСТИНА ТОГДА 1
						|		КОГДА ВТ_РезультатОтборов_Платформа.ИтоговыйРезультатПоПлатформе = ЛОЖЬ ТОГДА 0
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ                                                  КАК РассчитанныйРезультатПоПлатформе,
						|	ВЫБОР
						|		КОГДА ВТ_РезультатОтборов_Продукт.ИтоговыйРезультатПоПродукту ЕСТЬ NULL ТОГДА 2
						|		КОГДА ВТ_РезультатОтборов_Продукт.ИтоговыйРезультатПоПродукту = ИСТИНА ТОГДА 1
						|		КОГДА ВТ_РезультатОтборов_Продукт.ИтоговыйРезультатПоПродукту = ЛОЖЬ ТОГДА 0
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ                                                  КАК РассчитанныйРезультатПоПродукту,
						|	НЕ Спр.ПометкаУдаления                                 КАК РассчитанныйРезультатПоПометкеУдаления,
						|	ВЫБОР
						|		КОГДА Спр.ДатаЗавершения МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ                                                  КАК РассчитанныйРезультатПоДатеЗавершения,
						|	ЕСТЬNULL(Рег.РезультатОтбораПоВерсииПлатформы, 2)      КАК СохраненныйРезультатПоПлатформе,
						|	ЕСТЬNULL(Рег.РезультатОтбораПоВерсииПродукта, 2)       КАК СохраненныйРезультатПоПродукту,
						|	ЕСТЬNULL(Рег.РезультатОтбораПоПометкеУдаления, ИСТИНА) КАК СохраненныйРезультатПоПометкеУдаления,
						|	ЕСТЬNULL(Рег.РезультатОтбораПоДатеЗавершения, ИСТИНА)  КАК СохраненныйРезультатПоДатеЗавершения
						|ИЗ
						|	Справочник.Новости КАК Спр
						|
						|	ЛЕВОЕ СОЕДИНЕНИЕ
						|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК Рег
						|	ПО
						|		Спр.Ссылка = Рег.Новость
						|
						|	ЛЕВОЕ СОЕДИНЕНИЕ
						|	ВТ_РезультатОтборов_Платформа
						|	ПО
						|		Спр.Ссылка = ВТ_РезультатОтборов_Платформа.Новость
						|		//И ВТ_КатегорииНовостей.КатегорияНовостей = ВТ_РезультатОтборов_Платформа.КатегорияНовостей
						|
						|	ЛЕВОЕ СОЕДИНЕНИЕ
						|	ВТ_РезультатОтборов_Продукт
						|	ПО
						|		Спр.Ссылка = ВТ_РезультатОтборов_Продукт.Новость
						|		//И ВТ_КатегорииНовостей.КатегорияНовостей = ВТ_РезультатОтборов_Продукт.КатегорияНовостей
						|
						|ГДЕ // Где есть изменения рассчитанных значений по сравнению с сохраненными значениями
						|	(
						|		ВЫБОР
						|			КОГДА ВТ_РезультатОтборов_Платформа.ИтоговыйРезультатПоПлатформе ЕСТЬ NULL ТОГДА 2
						|			КОГДА ВТ_РезультатОтборов_Платформа.ИтоговыйРезультатПоПлатформе = ИСТИНА ТОГДА 1
						|			КОГДА ВТ_РезультатОтборов_Платформа.ИтоговыйРезультатПоПлатформе = ЛОЖЬ ТОГДА 0
						|			ИНАЧЕ ИСТИНА
						|		КОНЕЦ
						|		<>
						|		ЕСТЬNULL(Рег.РезультатОтбораПоВерсииПлатформы, 2)
						|	)
						|	ИЛИ (
						|		ВЫБОР
						|			КОГДА ВТ_РезультатОтборов_Продукт.ИтоговыйРезультатПоПродукту ЕСТЬ NULL ТОГДА 2
						|			КОГДА ВТ_РезультатОтборов_Продукт.ИтоговыйРезультатПоПродукту = ИСТИНА ТОГДА 1
						|			КОГДА ВТ_РезультатОтборов_Продукт.ИтоговыйРезультатПоПродукту = ЛОЖЬ ТОГДА 0
						|			ИНАЧЕ ИСТИНА
						|		КОНЕЦ
						|		<>
						|		ЕСТЬNULL(Рег.РезультатОтбораПоВерсииПродукта, 2)
						|	)
						|	ИЛИ (
						|		(НЕ Спр.ПометкаУдаления)
						|		<>
						|		ЕСТЬNULL(Рег.РезультатОтбораПоПометкеУдаления, ИСТИНА)
						|	)
						|	ИЛИ (
						|		ВЫБОР
						|			КОГДА Спр.ДатаЗавершения МЕЖДУ &ПерваяСекунда И &ТекущаяДатаДляРасчетов ТОГДА ЛОЖЬ
						|			ИНАЧЕ ИСТИНА
						|		КОНЕЦ
						|		<>
						|		ЕСТЬNULL(Рег.РезультатОтбораПоДатеЗавершения, ИСТИНА)
						|	)
						|";
					Запрос.УстановитьПараметр("КатегорияВерсияПлатформы", КатегорияВерсияПлатформы);
					Запрос.УстановитьПараметр("КатегорияВерсияПродукта", КатегорияВерсияПродукта);
					Запрос.УстановитьПараметр("ИмяКонфигурации", ИмяКонфигурации);
					Запрос.УстановитьПараметр("ВерсияПродукта",  ВерсияПродукта);
					Запрос.УстановитьПараметр("ЭтаПлатформа",    "Platform");
					Запрос.УстановитьПараметр("ВерсияПлатформы", ВерсияПлатформы);
					Запрос.УстановитьПараметр("ПерваяСекунда", '00010101000001');
					Запрос.УстановитьПараметр("ТекущаяДатаДляРасчетов", ТекущаяДатаДляРасчетов);

					// Новость  | Категория       | ЗначениеВНовости    | ЗначениеВБазе  | Попадает в отбор?
					// Новость1 | ВерсияПродукта  | NULL                | 03.02.000.0001 | \ NULL = ДА;
					// Новость1 | ВерсияПлатформы | NULL                | 08.03.005.1110 | / NULL = ДА, в итоге ДА;
					// Новость2 | ВерсияПродукта  | 03.02.000.0000.9999 | 03.02.000.0001 | \ ДА;
					// Новость2 | ВерсияПлатформы | NULL                | 08.03.005.1110 | / NULL = ДА, в итоге ДА;
					// Новость3 | ВерсияПродукта  | NULL                | 03.02.000.0001 | \ NULL = ДА;
					// Новость3 | ВерсияПлатформы | 08.03.005.0000.9999 | 08.03.005.1110 | / ДА, в итоге ДА;
					// Новость4 | ВерсияПродукта  | 03.03.000.0000.9999 | 03.02.000.0001 | \ НЕТ;
					// Новость4 | ВерсияПлатформы | 08.03.005.0000.9999 | 08.03.005.1110 | / ДА, в итоге НЕТ;
					// Новость5 | ВерсияПродукта  | NULL                | 03.02.000.0001 | \ NULL = ДА;
					// Новость5 | ВерсияПлатформы | 08.04.005.0000.9999 | 08.03.005.1110 | / НЕТ, в итоге НЕТ.
					Результат = Запрос.Выполнить(); // ПересчитатьОтборыПоНовостям_РедкоМеняющиеся(), версия по любым продуктам
					Если НЕ Результат.Пустой() Тогда
						// В выборку попали только те записи, где изменилось значение.
						Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
						Пока Выборка.Следующий() Цикл
							// Если явное несовпадение или по платформе или по продукту, то новость не попадает в отбор.
							Если (Выборка.РассчитанныйРезультатПоПродукту = 0)
									ИЛИ (Выборка.РассчитанныйРезультатПоПлатформе = 0)
									ИЛИ (Выборка.РассчитанныйРезультатПоПометкеУдаления = Ложь)
									ИЛИ (Выборка.РассчитанныйРезультатПоДатеЗавершения = Ложь) Тогда
								ЛокальныйРезультатОтбораОбщий = Ложь;
							Иначе
								ЛокальныйРезультатОтбораОбщий = Истина;
							КонецЕсли;
							Запись = РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся.СоздатьМенеджерЗаписи();
								Запись.Новость                          = Выборка.Новость;
								Запись.РезультатОтбораПоВерсииПлатформы = Выборка.РассчитанныйРезультатПоПлатформе;
								Запись.РезультатОтбораПоВерсииПродукта  = Выборка.РассчитанныйРезультатПоПродукту;
								Запись.РезультатОтбораПоПродукту        = 2; // Всегда 2, т.к. по продукту у нас больше не проверяется
								Запись.РезультатОтбораПоПометкеУдаления = Выборка.РассчитанныйРезультатПоПометкеУдаления;
								Запись.РезультатОтбораПоДатеЗавершения  = Выборка.РассчитанныйРезультатПоДатеЗавершения;
								Запись.РезультатОтбора                  = ЛокальныйРезультатОтбораОбщий;
							Запись.Записать(Истина);
						КонецЦикла;
					КонецЕсли;

				КонецЕсли;

			Иначе
				ОписаниеРезультата = НСтр("ru='Отсутствует право на изменение для РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся.'");
			КонецЕсли;

		Иначе

			КодРезультата = 1101;
			ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Выполнение запрещено.
					|ОбщегоНазначения.РазделениеВключено() = %1
					|ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() = %2
					|ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() = %3'"),
				ОбщегоНазначения.РазделениеВключено(),
				ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей(),
				ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());

		КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ПересчитатьОтборыПоНовостям. РедкоМеняющиеся'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Пересчет отборов по новостям (редко меняющихся)'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Расширенный"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает регистр сведений "РассчитанныеОтборыПоНовостям_Общие".
// В этом регистре хранятся заранее рассчитанные результаты отборов по новостям по настроенным администратором отборам,
//  за исключением отборов по категориям:
//  - Версия платформы;
//  - Версия конфигурации;
//  - Продукт (включает в себя Имя+Версия, поэтому тоже меняется);
//  которые рассчитываются и сохраняются в другом регистре.
// Этот регистр имеет смысл пересчитывать после получения новостей, а также после изменения
//  отборов в справочнике ЛентыНовостей.
// Также работает в модели сервиса в неразделенном сеансе.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ПересчитатьОтборыПоНовостям_Общие(КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "ПересчитатьОтборыПоНовостям_Общие"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Пересчет отборов по новостям (общих)'"));

	УстановитьПривилегированныйРежим(Истина);

#Область ЗаполнениеЗначенийАвтоматическихОтборов

		ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ЗаполнитьЗначенияАвтоматическихОтборов_Общие", // Идентификатор.
			НСтр("ru='Пересчет отборов по новостям / Заполнить значения автоматических отборов'"));

			КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
			ЗаполнитьЗначенияАвтоматическихОтборов_Общие(КонтекстВыполненияВложенныйВложенный);

		ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			"",
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ПересчетОтборов

#Область ПересчетОтборов_ВыполнениеЗапроса

		// По уже подготовленным ранее значениям общих отборов необходимо провести сравнение категорий из новости и значений отборов.

		ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".Пересчет.ВыполнениеЗапроса", // Идентификатор.
			НСтр("ru='Пересчет отборов по новостям / Выполнение запроса'"));

			// Непосредственно пересчет отборов.
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = "
				|// Из всех проверок необходимо исключить категории:
				|//  КатегорияПродукт, КатегорияВерсияПродукта, КатегорияВерсияПлатформы,
				|//  т.к. по ним существует отдельный расчет отборов, который хранится
				|//  в регистре сведений РассчитанныеОтборыПоНовостям_РедкоМеняющиеся.
				|
				|//_________________________________________________________________________
				|// Оптимизация: исключить ленты новостей, по которым новости всегда видны.
				|
				|// Если у ленты новостей не настраиваются категории (табличная часть
				|//  ДоступныеКатегории пустая), то новости по этой ленте видны всегда.
				|// Если для ленты новостей не настроены общие отборы,
				|//  то новости по этой ленте видны всегда.
				|
				|ВЫБРАТЬ
				|	Спр.Ссылка            КАК ЛентаНовостей,
				|	Спр.КатегорияНовостей КАК КатегорияНовостей
				|ПОМЕСТИТЬ ВТ_ДоступныеКатегории
				|ИЗ
				|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
				|ГДЕ
				|	Спр.КатегорияНовостей <> &КатегорияПродукт
				|	И Спр.КатегорияНовостей <> &КатегорияВерсияПродукта
				|	И Спр.КатегорияНовостей <> &КатегорияВерсияПлатформы
				|ИНДЕКСИРОВАТЬ ПО
				|	Спр.Ссылка
				|;
				|
				|// Список лент новостей, по которым не настраиваются категории.
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Спр.Ссылка КАК ЛентаНовостей,
				|	КОЛИЧЕСТВО(ВТ_ДоступныеКатегории.КатегорияНовостей) КАК КоличествоКатегорий
				|ПОМЕСТИТЬ ВТ_ЛентыНовостейБезДоступныхОтборов
				|ИЗ
				|	Справочник.ЛентыНовостей КАК Спр
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	ВТ_ДоступныеКатегории
				|	ПО
				|		Спр.Ссылка = ВТ_ДоступныеКатегории.ЛентаНовостей
				|СГРУППИРОВАТЬ ПО
				|	Спр.Ссылка
				|ИМЕЮЩИЕ
				|	КОЛИЧЕСТВО(ВТ_ДоступныеКатегории.КатегорияНовостей) = 0
				|;
				|
				|// Все общие отборы (за исключением лент новостей, по которым отборы не настраиваются
				|//  и за исключением категорий
				|//  КатегорияПродукт, КатегорияВерсияПродукта, КатегорияВерсияПлатформы)
				|//  необходимо перемножить с категориями новостей по ленте новостей и категории.
				|// Каждое совпадение значений категории оценивается как 1, несовпадение как 0.
				|// Если хотя бы по одной категории итоговое количество совпадений = 0,
				|//  то новость не соответствует общим отборам и должна попасть в исключения.
				|// Если в новости не указан отбор по какой-то категории, или в общих отборах не указана какая-то категория,
				|//  то эта строка не попадет в соединение ВНУТРЕННЕЕ СОЕДИНЕНИЕ и не будет учтена ни как 0, ни как 1.
				|ВЫБРАТЬ
				|	РегКатегории.Новость               КАК Новость,
				|	РегКатегории.Новость.ЛентаНовостей КАК ЛентаНовостей,
				|	РегКатегории.КатегорияНовостей     КАК КатегорияНовостей,
				|	ВЫБОР
				|		КОГДА РегКатегории.ЗначениеКатегорииНовостей = РегОтборы.ЗначениеКатегорииНовостей ТОГДА
				|			1
				|		ИНАЧЕ
				|			0
				|	КОНЕЦ КАК ЕстьСовпадение
				|ПОМЕСТИТЬ ВТ_СовпаденияЗначенийКатегорийНовостей
				|ИЗ
				|	РегистрСведений.КатегорииНовостейПростые КАК РегКатегории
				|
				|	// Дополнительное соединение, чтобы исключить вычисление отбора по категориям, удаленным ранее из ленты новостей,
				|	//  по которым остались значения отбора с признаком УстановленоПрограммно,
				|	//  т.е. которые не были удалены при вызове ОптимизироватьОтборыПоНовостям.
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|	ВТ_ДоступныеКатегории
				|	ПО
				|		РегКатегории.Новость.ЛентаНовостей = ВТ_ДоступныеКатегории.ЛентаНовостей
				|		И РегКатегории.КатегорияНовостей = ВТ_ДоступныеКатегории.КатегорияНовостей
				|
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК РегОтборы
				|	ПО
				|		РегКатегории.Новость.ЛентаНовостей = РегОтборы.ЛентаНовостей
				|		И РегКатегории.КатегорияНовостей = РегОтборы.КатегорияНовостей
				|ГДЕ
				|	РегКатегории.Новость.ЛентаНовостей НЕ В (
				|		ВЫБРАТЬ
				|			ВТ_ЛентыНовостейБезДоступныхОтборов.ЛентаНовостей
				|		ИЗ
				|			ВТ_ЛентыНовостейБезДоступныхОтборов
				|	)
				|	И РегКатегории.КатегорияНовостей <> &КатегорияПродукт
				|	И РегКатегории.КатегорияНовостей <> &КатегорияВерсияПродукта
				|	И РегКатегории.КатегорияНовостей <> &КатегорияВерсияПлатформы
				|;
				|
				|// Итоги по новостям / категориям.
				|ВЫБРАТЬ
				|	ВТ.Новость               КАК Новость,
				|	ВТ.КатегорияНовостей     КАК КатегорияНовостей,
				|	СУММА(ВТ.ЕстьСовпадение) КАК КоличествоСовпадений
				|ПОМЕСТИТЬ ВТ_ВсеНеподходящиеНовости
				|ИЗ
				|	ВТ_СовпаденияЗначенийКатегорийНовостей КАК ВТ
				|СГРУППИРОВАТЬ ПО
				|	ВТ.Новость,
				|	ВТ.КатегорияНовостей
				|ИМЕЮЩИЕ
				|	СУММА(ВТ.ЕстьСовпадение) = 0
				|ИНДЕКСИРОВАТЬ ПО
				|	ВТ.Новость
				|;
				|
				|// Список новостей без повторений.
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ.Новость КАК Новость,
				|	ЛОЖЬ       КАК РезультатОтбора
				|ИЗ
				|	ВТ_ВсеНеподходящиеНовости КАК ВТ
				|УПОРЯДОЧИТЬ ПО
				|	ВТ.Новость
				|
				|";
			Запрос.УстановитьПараметр("КатегорияПродукт",         ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("Product"));
			Запрос.УстановитьПараметр("КатегорияВерсияПродукта",  ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ProductVersion"));
			Запрос.УстановитьПараметр("КатегорияВерсияПлатформы", ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("PlatformVersion"));

			РезультатЗапроса = Запрос.Выполнить(); // ПересчитатьОтборыПоНовостям_Общие() // АПК:1328 Конкурентная работа маловероятна.

		ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Результат запроса: %1'"),
				?(РезультатЗапроса.Пустой(),
					НСтр("ru='пустой'"),
					НСтр("ru='есть данные'"))),
			Неопределено);

#КонецОбласти

#Область ПересчетОтборов_ЗаполнениеДанными

		ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".Пересчет.ЗаполнениеДанными", // Идентификатор.
			НСтр("ru='Пересчет отборов по новостям / Заполнение данными'"));

			НаборЗаписей = РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие.СоздатьНаборЗаписей();

				Если НЕ РезультатЗапроса.Пустой() Тогда
					НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой));
				КонецЕсли;

			НаборЗаписей.Записать(Истина);

		ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='НаборЗаписей.Количество(): %1'"),
				НаборЗаписей.Количество()),
			Неопределено);

#КонецОбласти

#КонецОбласти

#Область ПересчетПользовательскихОтборов

		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		ПересчитатьПоТекущемуПользователю = Истина;
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
			Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				ПересчитатьПоТекущемуПользователю = Ложь;
			КонецЕсли;
		Иначе
			ПересчитатьПоТекущемуПользователю = Ложь;
		КонецЕсли;
		Если ПересчитатьПоТекущемуПользователю = Истина Тогда
			// Если есть пользовательские отборы, то после пересчета общих отборов необходимо пересчитать пользовательские отборы,
			//  т.к. они могли измениться.
			КоличествоОтборов = КоличествоНастроенныхОтборов(Пользователи.ТекущийПользователь());
			Если (КоличествоОтборов.КоличествоПользовательскихОтборов > 0) Тогда
				// Пересчитать отборы по всем пользователям.
				ПересчитатьОтборыПоНовостям_Пользовательские(Пользователи.ТекущийПользователь(), КонтекстВыполненияВложенный);
			КонецЕсли;
		Иначе
			// Пересчитать отборы по всем пользователям.
			// Может работать в модели сервиса.
			ПересчитатьОтборыПоНовостям_Пользовательские(Неопределено, КонтекстВыполненияВложенный);
		КонецЕсли;

#КонецОбласти

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ПересчитатьОтборыПоНовостям. Общие'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Пересчет отборов по новостям (общие)'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Расширенный"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает регистр сведений "РассчитанныеОтборыПоНовостям_ДляОбластиДанных".
// В случае запуска из коробки или в разделенном сеансе, также автоматически рассчитывает
//  значения автоматических отборов и заполняет регистр сведений ОтборыПоЛентамНовостейДляОбластиДанных.
// В случае запуска в неразделенном сеансе в модели сервиса просто пересчитывает отборы по новостям.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ПересчитатьОтборыПоНовостям_ДляОбластиДанных(КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "ПересчитатьОтборыПоНовостям_ДляОбластиДанных"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Пересчет отборов по новостям (общих для области данных)'"));

	УстановитьПривилегированныйРежим(Истина);

		ИспользоватьНомерОбластиДанных = Ложь;
		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
			Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				ИспользоватьНомерОбластиДанных = Истина;
			КонецЕсли;
		КонецЕсли;

		// Отборы по области данных уже должны быть приведены к корректному виду с помощью ОптимизироватьОтборыПоНовостям(),
		//  т.е. не должно быть отборов по категориям, которых нет в лентах новостей, количество отборов не должно
		//  быть шире, чем в общих отборах и т.п.

#Область ЗаполнениеЗначенийАвтоматическихОтборов

		// Отборы по области данных должны быть заполнены или для локального режима,
		//  или для модели сервиса - в области данных, когда разделение включено и выполнен вход в область данных.
		// Этот расчет возможно сделать:
		// - при обновлении конфигурации:
		//   - ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск;
		//   - ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию;
		// - каждый раз при изменении значений отбора:
		//   - ОбработкаНовостей.ПриИзмененииЗначенийОтборовДляОбластиДанных.

		ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ЗаполнитьЗначенияАвтоматическихОтборов_ДляОбластиДанных", // Идентификатор.
			НСтр("ru='Пересчет отборов по новостям / Заполнить значения автоматических отборов'"));

			КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
			ЗаполнитьЗначенияАвтоматическихОтборов_ДляОбластиДанных(КонтекстВыполненияВложенныйВложенный); // Если недоступны разделенные данные, то ничего не сделает.

		ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			"",
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ПересчетОтборов

#Область ПересчетОтборов_ВыполнениеЗапроса

		ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".Пересчет.ВыполнениеЗапроса", // Идентификатор.
			НСтр("ru='Пересчет отборов по новостям / Выполнение запроса'"));

			// Непосредственно пересчет отборов.
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = "
				|// Из всех проверок необходимо исключить категории:
				|//  КатегорияПродукт, КатегорияВерсияПродукта, КатегорияВерсияПлатформы,
				|//  т.к. по ним существует отдельный расчет отборов, который хранится
				|//  в регистре сведений РассчитанныеОтборыПоНовостям_РедкоМеняющиеся.
				|
				|//_________________________________________________________________________
				|// Оптимизация: исключить ленты новостей, по которым новости всегда видны.
				|
				|// Если у ленты новостей не настраиваются категории (табличная часть
				|//  ДоступныеКатегории пустая), то новости по этой ленте видны всегда.
				|// Если для ленты новостей не настроены общие отборы,
				|//  то новости по этой ленте видны всегда.
				|
				|ВЫБРАТЬ
				|	Спр.Ссылка            КАК ЛентаНовостей,
				|	Спр.КатегорияНовостей КАК КатегорияНовостей
				|ПОМЕСТИТЬ ВТ_ДоступныеКатегории
				|ИЗ
				|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
				|ГДЕ
				|	Спр.КатегорияНовостей <> &КатегорияПродукт
				|	И Спр.КатегорияНовостей <> &КатегорияВерсияПродукта
				|	И Спр.КатегорияНовостей <> &КатегорияВерсияПлатформы
				|ИНДЕКСИРОВАТЬ ПО
				|	Спр.Ссылка
				|;
				|
				|// Список лент новостей, по которым не настраиваются категории.
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Спр.Ссылка КАК ЛентаНовостей,
				|	КОЛИЧЕСТВО(ВТ_ДоступныеКатегории.КатегорияНовостей) КАК КоличествоКатегорий
				|ПОМЕСТИТЬ ВТ_ЛентыНовостейБезДоступныхОтборов
				|ИЗ
				|	Справочник.ЛентыНовостей КАК Спр
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	ВТ_ДоступныеКатегории
				|	ПО
				|		Спр.Ссылка = ВТ_ДоступныеКатегории.ЛентаНовостей
				|СГРУППИРОВАТЬ ПО
				|	Спр.Ссылка
				|ИМЕЮЩИЕ
				|	КОЛИЧЕСТВО(ВТ_ДоступныеКатегории.КатегорияНовостей) = 0
				|;
				|
				|// Все отборы для областей данных (за исключением лент новостей, по которым отборы не настраиваются
				|//  и за исключением категорий
				|//  КатегорияПродукт, КатегорияВерсияПродукта, КатегорияВерсияПлатформы)
				|//  необходимо перемножить с категориями новостей по ленте новостей и категории.
				|// Каждое совпадение значений категории оценивается как 1, несовпадение как 0.
				|// Если хотя бы по одной категории итоговое количество совпадений = 0,
				|//  то новость не соответствует отборам по области данных и должна попасть в исключения.
				|// Если в новости не указан отбор по какой-то категории, или в общих отборах не указана какая-то категория,
				|//  то эта строка не попадет в соединение ВНУТРЕННЕЕ СОЕДИНЕНИЕ и не будет учтена ни как 0, ни как 1.
				|// Все отборы по области данных должны рассчитываться по каждой области данных отдельно.
				|ВЫБРАТЬ
				|	&МетаВыбрать_РегОтборы_ПолеДляМоделиСервиса,
				|	РегКатегории.Новость               КАК Новость,
				|	РегКатегории.Новость.ЛентаНовостей КАК ЛентаНовостей,
				|	РегКатегории.КатегорияНовостей     КАК КатегорияНовостей,
				|	ВЫБОР
				|		КОГДА РегКатегории.ЗначениеКатегорииНовостей = РегОтборы.ЗначениеКатегорииНовостей ТОГДА
				|			1
				|		ИНАЧЕ
				|			0
				|	КОНЕЦ КАК ЕстьСовпадение
				|ПОМЕСТИТЬ ВТ_СовпаденияЗначенийКатегорийНовостей
				|ИЗ
				|	РегистрСведений.КатегорииНовостейПростые КАК РегКатегории
				|
				|	// Дополнительное соединение, чтобы исключить вычисление отбора по категориям, удаленным ранее из ленты новостей,
				|	//  по которым остались значения отбора с признаком УстановленоПрограммно,
				|	//  т.е. которые не были удалены при вызове ОптимизироватьОтборыПоНовостям.
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|	ВТ_ДоступныеКатегории
				|	ПО
				|		РегКатегории.Новость.ЛентаНовостей = ВТ_ДоступныеКатегории.ЛентаНовостей
				|		И РегКатегории.КатегорияНовостей = ВТ_ДоступныеКатегории.КатегорияНовостей
				|
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ОтборыПоЛентамНовостейДляОбластиДанных КАК РегОтборы
				|	ПО
				|		РегКатегории.Новость.ЛентаНовостей = РегОтборы.ЛентаНовостей
				|		И РегКатегории.КатегорияНовостей = РегОтборы.КатегорияНовостей
				|ГДЕ
				|	РегКатегории.Новость.ЛентаНовостей НЕ В (
				|		ВЫБРАТЬ
				|			ВТ_ЛентыНовостейБезДоступныхОтборов.ЛентаНовостей
				|		ИЗ
				|			ВТ_ЛентыНовостейБезДоступныхОтборов
				|	)
				|	И РегКатегории.КатегорияНовостей <> &КатегорияПродукт
				|	И РегКатегории.КатегорияНовостей <> &КатегорияВерсияПродукта
				|	И РегКатегории.КатегорияНовостей <> &КатегорияВерсияПлатформы
				|;
				|
				|// Итоги по новостям / категориям.
				|ВЫБРАТЬ
				|	&МетаВыбрать_ВТ_ПолеДляМоделиСервиса,
				|	ВТ.Новость               КАК Новость,
				|	ВТ.КатегорияНовостей     КАК КатегорияНовостей,
				|	СУММА(ВТ.ЕстьСовпадение) КАК КоличествоСовпадений
				|ПОМЕСТИТЬ ВТ_ВсеНеподходящиеНовости
				|ИЗ
				|	ВТ_СовпаденияЗначенийКатегорийНовостей КАК ВТ
				|СГРУППИРОВАТЬ ПО
				|	&МетаСгруппировать_ВТ_ПолеДляМоделиСервиса,
				|	ВТ.Новость,
				|	ВТ.КатегорияНовостей
				|ИМЕЮЩИЕ
				|	СУММА(ВТ.ЕстьСовпадение) = 0
				|ИНДЕКСИРОВАТЬ ПО
				|	ВТ.Новость
				|;
				|
				|// Список новостей без повторений.
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	&МетаВыбрать_ВТ_ПолеДляМоделиСервиса,
				|	ВТ.Новость КАК Новость,
				|	ЛОЖЬ       КАК РезультатОтбора
				|ИЗ
				|	ВТ_ВсеНеподходящиеНовости КАК ВТ
				|УПОРЯДОЧИТЬ ПО
				|	ВТ.Новость
				|
				|";
			Запрос.УстановитьПараметр("КатегорияПродукт",         ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("Product"));
			Запрос.УстановитьПараметр("КатегорияВерсияПродукта",  ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ProductVersion"));
			Запрос.УстановитьПараметр("КатегорияВерсияПлатформы", ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("PlatformVersion"));

			Если ИспользоватьНомерОбластиДанных = Истина Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"&МетаВыбрать_РегОтборы_ПолеДляМоделиСервиса,",
					"РегОтборы.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,");
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"&МетаВыбрать_ВТ_ПолеДляМоделиСервиса,",
					"ВТ.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,");
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"&МетаСгруппировать_ВТ_ПолеДляМоделиСервиса,", "ВТ.ОбластьДанныхВспомогательныеДанные,");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_РегОтборы_ПолеДляМоделиСервиса,", "");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ВТ_ПолеДляМоделиСервиса,", "");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСгруппировать_ВТ_ПолеДляМоделиСервиса,", "");
			КонецЕсли;

			РезультатЗапроса = Запрос.Выполнить(); // ПересчитатьОтборыПоНовостям_ДляОбластиДанных() // АПК:1328 Конкурентная работа маловероятна.

		ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Результат запроса: %1'"),
				?(РезультатЗапроса.Пустой(),
					НСтр("ru='пустой'"),
					НСтр("ru='есть данные'"))),
			Неопределено);

#КонецОбласти

#Область ПересчетОтборов_ЗаполнениеДанными

		ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".Пересчет.ЗаполнениеДанными", // Идентификатор.
			НСтр("ru='Пересчет отборов по новостям / Заполнение данными'"));

			НаборЗаписей = РегистрыСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных.СоздатьНаборЗаписей();

				Если НЕ РезультатЗапроса.Пустой() Тогда
					НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой));
				КонецЕсли;

			НаборЗаписей.Записать(Истина);

		ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='НаборЗаписей.Количество(): %1'"),
				НаборЗаписей.Количество()),
			Неопределено);

#КонецОбласти

#КонецОбласти

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ПересчитатьОтборыПоНовостям. ДляОбластиДанных'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Пересчет отборов по новостям (общие по области данных)'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Расширенный"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает регистр сведений "РассчитанныеОтборыПоНовостям_Пользовательские".
// В этом регистре хранятся заранее рассчитанные результаты отборов по новостям по настроенным пользователем отборам,
//  за исключением отборов по категориям:
//  - Версия платформы;
//  - Версия конфигурации;
//  - Продукт (включает в себя Имя+Версия, поэтому тоже меняется);
//  которые рассчитываются и сохраняются в другом регистре.
// Этот регистр имеет смысл пересчитывать после получения новостей, после изменения отборов в справочнике
//  ЛентыНовостей (по всем пользователям), а также после настройки пользовательских отборов (для текущего пользователя).
//
// Параметры:
//  Пользователь       - Неопределено, СправочникСсылка.Пользователи, Массив - пользователи, по которым необходимо
//                         пересчитать новости-исключения. Если Неопределено, то по всем;
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ПересчитатьОтборыПоНовостям_Пользовательские(Пользователь = Неопределено, КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "ПересчитатьОтборыПоНовостям_Пользовательские"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Пересчет отборов по новостям (пользовательских)'"));

	ТипМассив = Тип("Массив");
	ТипПользователь = Тип("СправочникСсылка.Пользователи");
	ПропуститьПересчет = Ложь;

	УстановитьПривилегированныйРежим(Истина);

		ИспользоватьНомерОбластиДанных = Ложь;
		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
			Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				ИспользоватьНомерОбластиДанных = Истина;
			КонецЕсли;
		КонецЕсли;

		// Пользовательские отборы уже должны быть приведены к корректному виду с помощью ОптимизироватьОтборыПоНовостям(),
		//  т.е. не должно быть отборов по категориям, которых нет в лентах новостей, количество отборов не должно
		//  быть шире, чем в общих отборах и т.п.

		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

#Область ПолучениеСпискаПользователей

		ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ПолучениеСпискаПользователей", // Идентификатор.
			НСтр("ru='Пересчет отборов по новостям / Получение списка пользователей'"));

			КоличествоПользователей = 0;

			// 1. Получить список пользователей, по которым установлены отборы или заполнены значения категорий.
			//    В неразделенном сеансе это единственный способ получить список пользователей,
			//      т.к. справочник Пользователи - разделенный и не виден из неразделенного сеанса.
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	&МетаВыбрать_ПолеДляМоделиСервиса КАК ОбластьДанныхВспомогательныеДанные,
				|	Рег.Пользователь                  КАК Пользователь
				|ПОМЕСТИТЬ ВТ_ПовторяющиесяПользователи
				|ИЗ
				|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК Рег
				|ГДЕ
				|	&МетаУсловиеОтбораПоПользователям
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	&МетаВыбрать_ПолеДляМоделиСервиса КАК ОбластьДанныхВспомогательныеДанные,
				|	Рег.Пользователь                  КАК Пользователь
				|ИЗ
				|	РегистрСведений.ЗначенияКатегорийПользовательские КАК Рег
				|ГДЕ
				|	&МетаУсловиеОтбораПоПользователям
				|;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
				|	ВТ.Пользователь                       КАК Пользователь
				|ПОМЕСТИТЬ ВТ_Пользователи
				|ИЗ
				|	ВТ_ПовторяющиесяПользователи КАК ВТ
				|ИНДЕКСИРОВАТЬ ПО
				|	Пользователь
				|;
				|
				|ВЫБРАТЬ
				|	КОЛИЧЕСТВО(ВТ.Пользователь) КАК КоличествоПользователей
				|ИЗ
				|	ВТ_Пользователи КАК ВТ
				|;
				|
				|";

			Если ИспользоватьНомерОбластиДанных = Истина Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса", "Рег.ОбластьДанныхВспомогательныеДанные");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса", "-1");
			КонецЕсли;

			Если (ТипЗнч(Пользователь) = ТипПользователь) И (НЕ Пользователь.Пустая()) Тогда
				// По одному пользователю.
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеОтбораПоПользователям", "Рег.Пользователь = &Пользователь");
				Запрос.УстановитьПараметр("Пользователь", Пользователь);
			ИначеЕсли ТипЗнч(Пользователь) = ТипМассив Тогда
				// По нескольким пользователям.
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеОтбораПоПользователям", "Рег.Пользователь В (&МассивПользователей)");
				Запрос.УстановитьПараметр("МассивПользователей", Пользователь);
			Иначе
				// По всем пользователям.
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеОтбораПоПользователям", "ИСТИНА");
			КонецЕсли;

			РезультатЗапроса = Запрос.Выполнить(); // ПересчитатьОтборыПоНовостям_Пользовательские(), Получить список пользователей, по которым установлены отборы // АПК:1328 Конкурентная работа маловероятна.

			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Если Выборка.Следующий() Тогда
					КоличествоПользователей = Выборка.КоличествоПользователей;
				КонецЕсли;
			Иначе
				// Пользовательские отборы не установлены - просто очистить предыдущий результат.
				ПропуститьПересчет  = Истина;
			КонецЕсли;

		ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Результат запроса: %1
					|Количество пользователей: %2
					|ПропуститьПересчет: %3'"),
				?(РезультатЗапроса.Пустой(),
					НСтр("ru='пустой'"),
					НСтр("ru='есть данные'")),
				КоличествоПользователей,
				ПропуститьПересчет),
			Неопределено);

#КонецОбласти

#Область ОчисткаПредыдущегоРезультата

		ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ОчисткаПредыдущегоРезультата", // Идентификатор.
			НСтр("ru='Пересчет отборов по новостям / Очистка предыдущего результата'"));

			// 2. Очистить предыдущий результат расчета.
			Если (ТипЗнч(Пользователь) = ТипПользователь) И (НЕ Пользователь.Пустая()) Тогда
				// По одному пользователю.
				// Справочник Пользователи - разделенный, поэтому в модели сервиса не надо делать отбор по области данных.
				НаборЗаписей = РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор["Пользователь"].Установить(Пользователь, Истина);
				НаборЗаписей.Записать(Истина); // Очистить все рассчитанные отборы по пользователю.
			ИначеЕсли ТипЗнч(Пользователь) = ТипМассив Тогда
				// По нескольким пользователям.
				// Справочник Пользователи - разделенный, поэтому в модели сервиса не надо делать отбор по области данных.
				Для Каждого ТекущийПользователь Из Пользователь Цикл
					Если (ТипЗнч(ТекущийПользователь) = ТипПользователь) И (НЕ ТекущийПользователь.Пустая()) Тогда
						НаборЗаписей = РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор["Пользователь"].Установить(ТекущийПользователь, Истина);
						НаборЗаписей.Записать(Истина); // Очистить все рассчитанные отборы по пользователю.
					КонецЕсли;
				КонецЦикла;
			Иначе
				// По всем пользователям.
				НаборЗаписей = РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские.СоздатьНаборЗаписей();
				НаборЗаписей.Записать(Истина); // Очистить все рассчитанные отборы по всем пользователям.
			КонецЕсли;

		ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			"",
			Неопределено);

#КонецОбласти

#Область ФормированиеСпискаНовостейИсключений

		// 3. Сформировать список новостей-исключений.
		Если ПропуститьПересчет <> Истина Тогда

#Область ФормированиеСпискаНовостейИсключений_ВыполнениеЗапроса

			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ФормированиеСпискаНовостейИсключений.ВыполнениеЗапроса", // Идентификатор.
				НСтр("ru='Пересчет отборов по новостям / Формирование списка новостей-исключений / Выполнение запроса'"));

				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
				Запрос.Текст = "
					|// Из всех проверок необходимо исключить категории:
					|//  КатегорияПродукт, КатегорияВерсияПродукта, КатегорияВерсияПлатформы,
					|//  т.к. по ним существует отдельный расчет отборов, который хранится
					|//  в регистре сведений РассчитанныеОтборыПоНовостям_РедкоМеняющиеся.
					|
					|//_________________________________________________________________________
					|// Оптимизация: исключить ленты новостей, по которым новости всегда видны.
					|
					|// Если у ленты новостей не настраиваются категории (табличная часть
					|//  ДоступныеКатегории пустая), то новости по этой ленте видны всегда.
					|// Если для ленты новостей не настроены общие отборы,
					|//  то новости по этой ленте видны всегда.
					|
					|ВЫБРАТЬ
					|	Спр.Ссылка            КАК ЛентаНовостей,
					|	Спр.КатегорияНовостей КАК КатегорияНовостей
					|ПОМЕСТИТЬ ВТ_ДоступныеКатегории
					|ИЗ
					|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
					|ГДЕ
					|	Спр.КатегорияНовостей <> &КатегорияПродукт
					|	И Спр.КатегорияНовостей <> &КатегорияВерсияПродукта
					|	И Спр.КатегорияНовостей <> &КатегорияВерсияПлатформы
					|ИНДЕКСИРОВАТЬ ПО
					|	Спр.Ссылка,
					|	Спр.КатегорияНовостей
					|;
					|
					|// Список лент новостей, по которым не настраиваются категории.
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Спр.Ссылка КАК ЛентаНовостей,
					|	КОЛИЧЕСТВО(ВТ_ДоступныеКатегории.КатегорияНовостей) КАК КоличествоКатегорий
					|ПОМЕСТИТЬ ВТ_ЛентыНовостейБезДоступныхОтборов
					|ИЗ
					|	Справочник.ЛентыНовостей КАК Спр
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	ВТ_ДоступныеКатегории
					|	ПО
					|		Спр.Ссылка = ВТ_ДоступныеКатегории.ЛентаНовостей
					|СГРУППИРОВАТЬ ПО
					|	Спр.Ссылка
					|ИМЕЮЩИЕ
					|	КОЛИЧЕСТВО(ВТ_ДоступныеКатегории.КатегорияНовостей) = 0
					|;
					|
					|// В отличие от расчета отбора общих значений и по области данных, где идет соединение с ОтборыПоЛентамНовостей*,
					|//  здесь будут объединены в одну общую таблицу ОтборыПоЛентамНовостейПользовательские
					|//  и ЗначенияКатегорийПользовательские.
					|// При этом в РС.ОтборыПоЛентамНовостейПользовательские уже установлено значение ленты новостей.
					|// А в РС.ЗначенияКатегорийПользовательские надо подставить значения всех лент новостей,
					|//  где есть такая категория.
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	// &МетаВыбрать_ПолеДляМоделиСервиса_1,
					|	Рег.Пользователь              КАК Пользователь,
					|	Рег.ЛентаНовостей             КАК ЛентаНовостей,
					|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
					|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
					|ПОМЕСТИТЬ ВТ_УстановленныеПользовательскиеЗначенияОтборов
					|ИЗ
					|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК Рег
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	// &МетаВыбрать_ПолеДляМоделиСервиса_1,
					|	Рег.Пользователь              КАК Пользователь,
					|	ВТ.ЛентаНовостей              КАК ЛентаНовостей,
					|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
					|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
					|ИЗ
					|	РегистрСведений.ЗначенияКатегорийПользовательские КАК Рег
					|
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
					|	ВТ_ДоступныеКатегории КАК ВТ
					|	ПО
					|		Рег.КатегорияНовостей = ВТ.КатегорияНовостей
					|ГДЕ
					|	Рег.КатегорияНовостей = ВТ.КатегорияНовостей
					|ИНДЕКСИРОВАТЬ ПО
					|	// &МетаИндексировать_ПолеДляМоделиСервиса_1,
					|	Пользователь,
					|	ЛентаНовостей,
					|	КатегорияНовостей
					|;
					|
					|// Все пользовательские отборы (за исключением лент новостей, по которым отборы не настраиваются
					|//  и за исключением категорий:
					|//  КатегорияПродукт, КатегорияВерсияПродукта, КатегорияВерсияПлатформы)
					|//  необходимо перемножить с категориями новостей по ленте новостей и категории.
					|// Каждое совпадение значений категории оценивается как 1, несовпадение как 0.
					|// Если хотя бы по одной категории (по пользователю и новости) итоговое количество совпадений = 0,
					|//  то новость не соответствует пользовательским отборам и должна попасть в исключения.
					|// Если в новости не указан отбор по какой-то категории, или в общих отборах не указана какая-то категория,
					|//  то эта строка не попадет в соединение ВНУТРЕННЕЕ СОЕДИНЕНИЕ и не будет учтена ни как 0, ни как 1.
					|// Все пользовательские отборы должны рассчитываться по каждой области данных отдельно.
					|ВЫБРАТЬ
					|	&МетаВыбрать_ПолеДляМоделиСервиса_2,
					|	ВТ_Пользователи.Пользователь       КАК Пользователь,
					|	РегКатегории.Новость               КАК Новость,
					|	РегКатегории.Новость.ЛентаНовостей КАК ЛентаНовостей,
					|	РегКатегории.КатегорияНовостей     КАК КатегорияНовостей,
					|	ВЫБОР
					|		КОГДА РегКатегории.ЗначениеКатегорииНовостей = РегОтборы.ЗначениеКатегорииНовостей ТОГДА
					|			1
					|		ИНАЧЕ
					|			0
					|	КОНЕЦ КАК ЕстьСовпадение
					|ПОМЕСТИТЬ ВТ_СовпаденияЗначенийКатегорийНовостей
					|ИЗ
					|	ВТ_Пользователи
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.КатегорииНовостейПростые КАК РегКатегории
					|	ПО
					|		ИСТИНА
					|
					|	// Дополнительное соединение, чтобы исключить вычисление отбора по категориям, удаленным ранее из ленты новостей,
					|	//  по которым остались значения отбора с признаком УстановленоПрограммно,
					|	//  т.е. которые не были удалены при вызове ОптимизироватьОтборыПоНовостям.
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
					|	ВТ_ДоступныеКатегории
					|	ПО
					|		РегКатегории.Новость.ЛентаНовостей = ВТ_ДоступныеКатегории.ЛентаНовостей
					|		И РегКатегории.КатегорияНовостей = ВТ_ДоступныеКатегории.КатегорияНовостей
					|
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
					|	ВТ_УстановленныеПользовательскиеЗначенияОтборов КАК РегОтборы
					|	ПО
					|		&МетаСоединение_ПолеДляМоделиСервиса_2 И
					|		ВТ_Пользователи.Пользователь = РегОтборы.Пользователь
					|		И РегКатегории.Новость.ЛентаНовостей = РегОтборы.ЛентаНовостей
					|		И РегКатегории.КатегорияНовостей = РегОтборы.КатегорияНовостей
					|ГДЕ
					|	РегКатегории.Новость.ЛентаНовостей НЕ В (
					|		ВЫБРАТЬ
					|			ВТ_ЛентыНовостейБезДоступныхОтборов.ЛентаНовостей
					|		ИЗ
					|			ВТ_ЛентыНовостейБезДоступныхОтборов
					|	)
					|	И РегКатегории.КатегорияНовостей <> &КатегорияПродукт
					|	И РегКатегории.КатегорияНовостей <> &КатегорияВерсияПродукта
					|	И РегКатегории.КатегорияНовостей <> &КатегорияВерсияПлатформы
					|;
					|
					|// Итоги по пользователям / новостям / категориям.
					|ВЫБРАТЬ
					|	&МетаВыбрать_ПолеДляМоделиСервиса_3,
					|	ВТ.Пользователь          КАК Пользователь,
					|	ВТ.Новость               КАК Новость,
					|	ВТ.КатегорияНовостей     КАК КатегорияНовостей,
					|	СУММА(ВТ.ЕстьСовпадение) КАК КоличествоСовпадений
					|ПОМЕСТИТЬ ВТ_ВсеНеподходящиеНовости
					|ИЗ
					|	ВТ_СовпаденияЗначенийКатегорийНовостей КАК ВТ
					|СГРУППИРОВАТЬ ПО
					|	&МетаСгруппировать_ПолеДляМоделиСервиса_3,
					|	ВТ.Пользователь,
					|	ВТ.Новость,
					|	ВТ.КатегорияНовостей
					|ИМЕЮЩИЕ
					|	СУММА(ВТ.ЕстьСовпадение) = 0
					|ИНДЕКСИРОВАТЬ ПО
					|	ВТ.Новость
					|;
					|
					|// Список новостей без повторений.
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	&МетаВыбрать_ПолеДляМоделиСервиса_4 КАК ОбластьДанныхВспомогательныеДанные,
					|	ВТ.Пользователь КАК Пользователь,
					|	ВТ.Новость      КАК Новость,
					|	ЛОЖЬ            КАК РезультатОтбора
					|ИЗ
					|	ВТ_ВсеНеподходящиеНовости КАК ВТ
					|УПОРЯДОЧИТЬ ПО
					|	ОбластьДанныхВспомогательныеДанные,
					|	ВТ.Пользователь,
					|	ВТ.Новость
					|
					|";
				Запрос.УстановитьПараметр("КатегорияПродукт",         ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("Product"));
				Запрос.УстановитьПараметр("КатегорияВерсияПродукта",  ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ProductVersion"));
				Запрос.УстановитьПараметр("КатегорияВерсияПлатформы", ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("PlatformVersion"));

				// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
				Если ИспользоватьНомерОбластиДанных = Истина Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "// &МетаВыбрать_ПолеДляМоделиСервиса_1,", "Рег.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "// &МетаИндексировать_ПолеДляМоделиСервиса_1,", "ОбластьДанныхВспомогательныеДанные,");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса_2,", "ВТ_Пользователи.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса_3,", "ВТ.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса_4", "ВТ.ОбластьДанныхВспомогательныеДанные");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСоединение_ПолеДляМоделиСервиса_2 И", "ВТ_Пользователи.ОбластьДанныхВспомогательныеДанные = РегОтборы.ОбластьДанныхВспомогательныеДанные И ");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСгруппировать_ПолеДляМоделиСервиса_3,", "ВТ.ОбластьДанныхВспомогательныеДанные,");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУпорядочить_ПолеДляМоделиСервиса_3,", "ВТ.ОбластьДанныхВспомогательныеДанные,");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "// &МетаВыбрать_ПолеДляМоделиСервиса_1,", "");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "// &МетаИндексировать_ПолеДляМоделиСервиса_1,", "");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса_2,", "");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса_3,", "");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса_4", "-1");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСоединение_ПолеДляМоделиСервиса_2 И", "");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСгруппировать_ПолеДляМоделиСервиса_3,", "");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУпорядочить_ПолеДляМоделиСервиса_3,", "");
				КонецЕсли;

				РезультатЗапроса = Запрос.Выполнить(); // ПересчитатьОтборыПоНовостям_Пользовательские(), Сформировать список новостей-исключений

			ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				0,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Результат запроса: %1'"),
					?(РезультатЗапроса.Пустой(),
						НСтр("ru='пустой'"),
						НСтр("ru='есть данные'"))),
				Неопределено);

#КонецОбласти

#Область ФормированиеСпискаНовостейИсключений_РаботаСДаннымиЗапроса

			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ФормированиеСпискаНовостейИсключений.РаботаСДаннымиЗапроса", // Идентификатор.
				НСтр("ru='Пересчет отборов по новостям / Формирование списка новостей-исключений / Работа с данными запроса'"));

				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.СледующийПоЗначениюПоля("Пользователь") Цикл
						НаборЗаписей = РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор["Пользователь"].Установить(Выборка.Пользователь, Истина);
						Пока Выборка.СледующийПоЗначениюПоля("Новость") Цикл
							НоваяЗапись = НаборЗаписей.Добавить();
							// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
							Если ОбщегоНазначения.РазделениеВключено() Тогда
								НоваяЗапись.ОбластьДанныхВспомогательныеДанные = Выборка.ОбластьДанныхВспомогательныеДанные;
							КонецЕсли;
							НоваяЗапись.Пользователь    = Выборка.Пользователь;
							НоваяЗапись.Новость         = Выборка.Новость;
							НоваяЗапись.РезультатОтбора = Ложь;
						КонецЦикла;
						НаборЗаписей.Записать(Истина);
					КонецЦикла;
				Иначе
					// Т.к. предварительно регистр уже был очищен. то ничего делать не нужно.
				КонецЕсли;

			ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				0,
				"",
				Неопределено);

#КонецОбласти

		КонецЕсли;

#КонецОбласти

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ПересчитатьОтборыПоНовостям. Пользовательские'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Пересчет отборов по новостям (пользовательские)'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Расширенный"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура заполняет регистр сведений ОтборыПоЛентамНовостейОбщие автоматически рассчитываемыми значениями отборов,
//  а также заранее сохраненными значениями из регистра сведений ЗначенияКатегорийОбщие.
// Аналогичное автозаполнение работает для "ЗначенияКатегорийОбщие", "ЗначенияКатегорийДляОбластиДанных",
//  но отключено для "ЗначенияКатегорийПользовательские".
// Также работает в модели сервиса в неразделенном сеансе.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ЗаполнитьЗначенияАвтоматическихОтборов_Общие(КонтекстВыполнения = Неопределено)

	ТипМассив    = Тип("Массив");

	УстановитьПривилегированныйРежим(Истина);

		// Подготовка значений отборов, которые рассчитываются автоматически:
		// - Единственное значение отбора
		//   - DataSeparation (Separated, Disabled) (общий);
		//   - InfoBaseStorageType (File, ClientServer) (общий);
		// - Множественное значение отбора
		//   - SubsystemRealized (имя подсистемы) (общий);
		//   - SubsystemNotRealized (имя подсистемы) (общий);
		//   - FnOptionOn (имя неразделенной функциональной опции) (общий);
		//   - FnOptionOff (имя неразделенной функциональной опции) (общий).

#Область ЕдинственноеЗначениеОтбора

		// В этом варианте отбора присутствует одна категория (РазделениеДанных (DataSeparation), ТипХраненияБазы (InfoBaseStorageType)),
		//  у которой есть единственное значение.
		// Это значит что если есть новость с какой-то категорией, то для нее обязательно будет какое-то значение
		//  и при поиске будет сравниваться это значение со значением в базе.

		МассивКодовКатегорий = Новый Массив;
			МассивКодовКатегорий.Добавить("DataSeparation");
			МассивКодовКатегорий.Добавить("InfoBaseStorageType");
		// Для этих категорий нет переопределения.

		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Спр.КатегорияНовостей.Код КАК КодКатегорииНовостей,
			|	Спр.КатегорияНовостей     КАК КатегорияНовостей,
			|	Спр.Ссылка                КАК ЛентаНовостей
			|ИЗ
			|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
			|ГДЕ
			|	Спр.КатегорияНовостей.Код В (&КодыКатегорий)
			|УПОРЯДОЧИТЬ ПО
			|	Спр.КатегорияНовостей,
			|	Спр.Ссылка
			|";

		Запрос.УстановитьПараметр("КодыКатегорий", МассивКодовКатегорий);
		РезультатЗапроса = Запрос.Выполнить(); // ЗаполнитьЗначенияАвтоматическихОтборов_Общие / ЕдинственноеЗначениеОтбора. // АПК:1328 Конкурентная работа маловероятна.
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.СледующийПоЗначениюПоля("КатегорияНовостей") Цикл
				ЗначениеКатегорииНовостей = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории(Выборка.КодКатегорииНовостей);
				Пока Выборка.СледующийПоЗначениюПоля("ЛентаНовостей") Цикл
					// ЗначениеКатегорииНовостей - это измерение, а необходимо оставить только единственное значение отбора.
					// Поэтому будем записывать с помощью набора записей.
					НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейОбщие.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
					НаборЗаписей.Отбор["КатегорияНовостей"].Установить(Выборка.КатегорияНовостей, Истина);
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.ЛентаНовостей             = Выборка.ЛентаНовостей;
						НоваяЗапись.КатегорияНовостей         = Выборка.КатегорияНовостей;
						НоваяЗапись.ЗначениеКатегорииНовостей = ЗначениеКатегорииНовостей;
					НаборЗаписей.Записать(Истина);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;

#КонецОбласти

#Область МножественноеЗначениеОтбора

		// Особенность в том, что если в категориях новостей среди загруженных новостей есть единственное условие,
		//  например, "Подсистема внедрена" = "Подсистема1", а в конфигурации эта подсистема не внедрена,
		//  то в регистре "ОтборыПоЛентамНовостей*" будет пусто и это будет считаться как "Разрешены любые отборы".
		// Поэтому вне зависимости от выполнения условия, всегда будем добавлять фиктивное значение, например "*".

		// При заполнении значений вначале будут использоваться данные из Регистров сведений ЗначенияКатегорий*.
		// Если там нет необходимого значения, то будет выполнена попытка вычисления значения (что может привести к замедлению).

		МассивКодовКатегорийПоУмолчанию = Новый Массив;
			МассивКодовКатегорийПоУмолчанию.Добавить("SubsystemRealized");
			МассивКодовКатегорийПоУмолчанию.Добавить("SubsystemNotRealized");
			МассивКодовКатегорийПоУмолчанию.Добавить("FnOptionOn");
			МассивКодовКатегорийПоУмолчанию.Добавить("FnOptionOff");

		// Сюда же добавить сохраненные ранее в регистрах сведений ЗначенияКатегорий* коды категорий.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Рег.КатегорияНовостей.Код КАК КодКатегории
			|ИЗ
			|	РегистрСведений.ЗначенияКатегорийОбщие КАК Рег
			|";
		РезультатЗапроса = Запрос.Выполнить(); // ЗаполнитьЗначенияАвтоматическихОтборов_Общие / Коды категорий.
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				НайденныйЭлемент = МассивКодовКатегорийПоУмолчанию.Найти(Выборка.КодКатегории);
				Если НайденныйЭлемент = Неопределено Тогда
					МассивКодовКатегорийПоУмолчанию.Добавить(Выборка.КодКатегории);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		МассивКодовКатегорий = Новый Массив;
		ОбработкаНовостейПереопределяемый.ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей(
			МассивКодовКатегорий,
			"Общее",
			КонтекстВыполнения);
		Если ТипЗнч(МассивКодовКатегорий) <> ТипМассив Тогда
			МассивКодовКатегорий = Новый Массив;
		КонецЕсли;

		// Добавить значения по-умолчанию.
		Для Каждого ТекущийКодКатегории Из МассивКодовКатегорийПоУмолчанию Цикл
			НайденныйЭлемент = МассивКодовКатегорий.Найти(ТекущийКодКатегории);
			Если НайденныйЭлемент = Неопределено Тогда
				МассивКодовКатегорий.Добавить(ТекущийКодКатегории);
			КонецЕсли;
		КонецЦикла;

		// Если по какой-то ленте новостей отключили категорию, то этот отбор пропадет
		//  из регистра сведений РегистрыСведений.ОтборыПоЛентамНовостей* при вызове ОптимизироватьОтборыПоНовостям().
		//  Поэтому здесь эта ситуация специально проверяться не будет.
		// Возможна ситуация, когда для старых новостей (для старых версий конфигурации / платформы, с отмененной публикацией,
		//  с наступившей датой завершения) установлен отбор по категории, значение которой вычислить уже нельзя (например, удалена ФО).
		//  В этом случае пропускать такие категории.

		Запрос = Новый Запрос;
		Запрос.Текст = "
			|// 0. Список лент новостей, где есть эта категория (временная таблица)
			|ВЫБРАТЬ
			|	Спр.КатегорияНовостей.Код                        КАК КодКатегорииНовостей,
			|	Спр.КатегорияНовостей.ТипЗначенияВспомогательный КАК ТипКатегорииНовостей,
			|	Спр.КатегорияНовостей                            КАК КатегорияНовостей,
			|	Спр.Ссылка                                       КАК ЛентаНовостей
			|ПОМЕСТИТЬ ВТ_ЛентыНовостей
			|ИЗ
			|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
			|ГДЕ
			|	Спр.КатегорияНовостей.Код В (&КодыКатегорий)
			|ИНДЕКСИРОВАТЬ ПО
			|	ЛентаНовостей,
			|	КатегорияНовостей
			|;
			|
			|// 1. Список категорий и значений для новостей, которые еще не устарели.
			|//    Устаревшие новости - ДатаЗавершения, ПометкаУдаления, ВерсияПродукта, ВерсияПлатформы.
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Рег.Новость.ЛентаНовостей     КАК ЛентаНовостей,
			|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
			|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
			|ПОМЕСТИТЬ ВТ_ЗначенияКатегорийНовостей
			|ИЗ
			|	РегистрСведений.КатегорииНовостейПростые КАК Рег
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК РегОтборы
			|	ПО
			|		Рег.Новость = РегОтборы.Новость
			|
			|ГДЕ
			|	ЕСТЬNULL(РегОтборы.РезультатОтбора, ИСТИНА) = ИСТИНА
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЛентаНовостей,
			|	КатегорияНовостей
			|;
			|
			|// 2. Список значений категорий по лентам новостей (временная таблица)
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_ЛентыНовостей.КодКатегорииНовостей                  КАК КодКатегорииНовостей,
			|	ВТ_ЛентыНовостей.ТипКатегорииНовостей                  КАК ТипКатегорииНовостей,
			|	ВТ_ЛентыНовостей.КатегорияНовостей                     КАК КатегорияНовостей,
			|	ВТ_ЛентыНовостей.ЛентаНовостей                         КАК ЛентаНовостей,
			|	ВТ_ЗначенияКатегорийНовостей.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
			|ПОМЕСТИТЬ ВТ_ЗначенияКатегорийПоЛентамНовостей
			|ИЗ
			|	ВТ_ЛентыНовостей
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ // Если какие-то категории не настроены в новостях, то и не рассчитывать их
			|	ВТ_ЗначенияКатегорийНовостей
			|	ПО
			|		ВТ_ЛентыНовостей.ЛентаНовостей = ВТ_ЗначенияКатегорийНовостей.ЛентаНовостей
			|		И ВТ_ЛентыНовостей.КатегорияНовостей = ВТ_ЗначенияКатегорийНовостей.КатегорияНовостей
			|;
			|
			|// 3. Общий список лент новостей и значений категорий (для заполнения общего отбора)
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ.КодКатегорииНовостей              КАК КодКатегорииНовостей,
			|	ВТ.ТипКатегорииНовостей              КАК ТипКатегорииНовостей,
			|	ВТ.КатегорияНовостей                 КАК КатегорияНовостей,
			|	ВТ.ЗначениеКатегорииНовостей         КАК ЗначениеКатегорииНовостей,
			|	ВТ.ЛентаНовостей                     КАК ЛентаНовостей,
			|	ВЫБОР
			|		КОГДА Рег.ЗначениеКатегорииНовостей ЕСТЬ NULL ТОГДА
			|			ЛОЖЬ
			|		ИНАЧЕ
			|			ИСТИНА
			|	КОНЕЦ                                КАК ЕстьСохраненноеЗначение,
			|	ЕСТЬNULL(Рег.УсловиеВыполнено, ЛОЖЬ) КАК РезультатРасчетаДляСохраненногоЗначения
			|ИЗ
			|	ВТ_ЗначенияКатегорийПоЛентамНовостей КАК ВТ
			|
			|	// Возможно, значение категории (и категории антагониста) было сохранено ранее в РС.ЗначенияКатегорий*
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЗначенияКатегорийОбщие КАК Рег
			|	ПО
			|		ВТ.КатегорияНовостей = Рег.КатегорияНовостей
			|		И ВТ.ЗначениеКатегорииНовостей = Рег.ЗначениеКатегорииНовостей
			|УПОРЯДОЧИТЬ ПО
			|	КатегорияНовостей,
			|	ЗначениеКатегорииНовостей,
			|	ЛентаНовостей
			|
			|";
		Запрос.УстановитьПараметр("КодыКатегорий", МассивКодовКатегорий);
		РезультатЗапроса = Запрос.Выполнить(); // ЗаполнитьЗначенияАвтоматическихОтборов_Общие / МножественноеЗначениеОтбора.
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.СледующийПоЗначениюПоля("КатегорияНовостей") Цикл

				ЛентыНовостейДляФиктивногоОтбора = Новый Соответствие; // Соответствие вместо массива для уникальности ключей.
				ТекущаяКатегорияНовостей = Выборка.КатегорияНовостей;

				НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейОбщие.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор["КатегорияНовостей"].Установить(ТекущаяКатегорияНовостей, Истина);

					Пока Выборка.СледующийПоЗначениюПоля("ЗначениеКатегорииНовостей") Цикл
						Если Выборка.ЕстьСохраненноеЗначение = Истина Тогда
							РезультатРасчета = Выборка.РезультатРасчетаДляСохраненногоЗначения;
							// Метод РассчитатьОтборПоКатегории вызываться НЕ будет.
						Иначе
							РезультатРасчета = Ложь;
							РассчитатьОтборПоКатегории(
								ТекущаяКатегорияНовостей,
								Выборка.КодКатегорииНовостей,
								Выборка.ЗначениеКатегорииНовостей,
								РезультатРасчета,
								Неопределено,
								КонтекстВыполнения);
						КонецЕсли;
						Пока Выборка.СледующийПоЗначениюПоля("ЛентаНовостей") Цикл
							ЛентыНовостейДляФиктивногоОтбора.Вставить(Выборка.ЛентаНовостей, Истина);
							// Дозаполним отбор по явно указанным значениям отбора.
							Пока Выборка.Следующий() Цикл
								Если РезультатРасчета = Истина Тогда
									НоваяЗапись = НаборЗаписей.Добавить();
									НоваяЗапись.ЛентаНовостей     = Выборка.ЛентаНовостей;
									НоваяЗапись.КатегорияНовостей = ТекущаяКатегорияНовостей;
									Если Выборка.ТипКатегорииНовостей = Перечисления.ТипыЗначенийКатегорийНовостей.Строка Тогда
										НоваяЗапись.ЗначениеКатегорииНовостей = СокрЛП(Выборка.ЗначениеКатегорииНовостей);
									Иначе
										НоваяЗапись.ЗначениеКатегорииНовостей = Выборка.ЗначениеКатегорииНовостей;
									КонецЕсли;
								Иначе
									// Если результат отбора = Ложь, то у нас будет использована фиктивная запись со значением "*".
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;

					// Добавим фиктивное значение отбора, например "*".
					// Без этого фиктивного значения возможна следующая ситуация:
					//  - есть единственная новость с категорией "ПодсистемаВнедрена" = "Подсистема1";
					//  - в реальности эта подсистема НЕ внедрена, значит запись в регистр
					//      сведений ОтборыПоЛентамНовостей* для этой категории не будет добавлена,
					//      т.е. регистр сведений ОтборыПоЛентамНовостей* - пустой;
					//  - если регистр сведений ОтборыПоЛентамНовостей* - пустой, то значит
					//      подходит любой отбор, т.е. "для всех".
					Для Каждого КлючЗначение Из ЛентыНовостейДляФиктивногоОтбора Цикл
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.ЛентаНовостей             = КлючЗначение.Ключ;
						НоваяЗапись.КатегорияНовостей         = ТекущаяКатегорияНовостей;
						НоваяЗапись.ЗначениеКатегорииНовостей = "*"; // Фиктивное значение.
					КонецЦикла;

				НаборЗаписей.Записать(Истина);

			КонецЦикла;
		КонецЕсли;

#КонецОбласти

КонецПроцедуры

// Процедура заполняет регистр сведений ОтборыПоЛентамНовостейДляОбластиДанных автоматически рассчитываемыми значениями отборов,
//  а также заранее сохраненными значениями из регистра сведений ЗначенияКатегорийДляОбластиДанных.
// Аналогичное автозаполнение работает для "ЗначенияКатегорийОбщие", "ЗначенияКатегорийДляОбластиДанных",
//  но отключено для "ЗначенияКатегорийПользовательские".
// Может вызываться как в разделенном, так и в неразделенном режиме.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ЗаполнитьЗначенияАвтоматическихОтборов_ДляОбластиДанных(КонтекстВыполнения = Неопределено)

	ТипМассив    = Тип("Массив");

	УстановитьПривилегированныйРежим(Истина);

		// Подготовка значений отборов, которые рассчитываются автоматически:
		//  - FnOptionDataAreaOn (имя функциональной опции области данных) (общий);
		//  - FnOptionDataAreaOff (имя функциональной опции области данных) (общий);
		//  - ServiceDataAreaOn (Сервис (области данных) включен) (общий);
		//  - ServiceDataAreaOff (Сервис (области данных) отключен) (общий).
		// Значения этих отборов можно рассчитывать или "в коробке" или после входа в область данных.
		// В неразделенном режиме эти значения получить нельзя.
		// В разделенном режиме или в коробке эту процедуру необходимо вызывать вручную.

#Область МножественноеЗначениеОтбора

		// Особенность в том, что если в категориях новостей среди загруженных новостей есть единственное условие,
		//  например, "Подсистема внедрена" = "Подсистема1", а в конфигурации эта подсистема не внедрена,
		//  то в регистре "ОтборыПоЛентамНовостей*" будет пусто и это будет считаться как "Разрешены любые отборы".
		// Поэтому вне зависимости от выполнения условия, всегда будем добавлять фиктивное значение, например "*".

		// При заполнении значений вначале будут использоваться данные из Регистров сведений ЗначенияКатегорий*.
		// Если там нет необходимого значения, то будет выполнена попытка вычисления значения (что может привести к замедлению).

		МассивКодовКатегорийПоУмолчанию = Новый Массив;
			МассивКодовКатегорийПоУмолчанию.Добавить("ServiceDataAreaOn");
			МассивКодовКатегорийПоУмолчанию.Добавить("ServiceDataAreaOff");
			МассивКодовКатегорийПоУмолчанию.Добавить("FnOptionDataAreaOn");
			МассивКодовКатегорийПоУмолчанию.Добавить("FnOptionDataAreaOff");

		// Сюда же добавить сохраненные ранее в регистрах сведений ЗначенияКатегорий* коды категорий.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Рег.КатегорияНовостей.Код КАК КодКатегории
			|ИЗ
			|	РегистрСведений.ЗначенияКатегорийДляОбластиДанных КАК Рег
			|";
		РезультатЗапроса = Запрос.Выполнить(); // АПК:1328 Конкурентная работа маловероятна.
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				НайденныйЭлемент = МассивКодовКатегорийПоУмолчанию.Найти(Выборка.КодКатегории);
				Если НайденныйЭлемент = Неопределено Тогда
					МассивКодовКатегорийПоУмолчанию.Добавить(Выборка.КодКатегории);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		МассивКодовКатегорий = Новый Массив;
		ОбработкаНовостейПереопределяемый.ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей(
			МассивКодовКатегорий,
			"ДляОбластиДанных",
			КонтекстВыполнения);
		Если ТипЗнч(МассивКодовКатегорий) <> ТипМассив Тогда
			МассивКодовКатегорий = Новый Массив;
		КонецЕсли;

		// Добавить значения по-умолчанию.
		Для Каждого ТекущийКодКатегории Из МассивКодовКатегорийПоУмолчанию Цикл
			НайденныйЭлемент = МассивКодовКатегорий.Найти(ТекущийКодКатегории);
			Если НайденныйЭлемент = Неопределено Тогда
				МассивКодовКатегорий.Добавить(ТекущийКодКатегории);
			КонецЕсли;
		КонецЦикла;

		// Если по какой-то ленте новостей отключили категорию, то этот отбор пропадет
		//  из регистра сведений РегистрыСведений.ОтборыПоЛентамНовостей* при вызове ОптимизироватьОтборыПоНовостям().
		//  Поэтому здесь эта ситуация специально проверяться не будет.
		// Возможна ситуация, когда для старых новостей (для старых версий конфигурации / платформы, с отмененной публикацией,
		//  с наступившей датой завершения) установлен отбор по категории, значение которой вычислить уже нельзя (например, удалена ФО).
		//  В этом случае пропускать такие категории.

		Запрос = Новый Запрос;
		Запрос.Текст = "
			|// 0. Список лент новостей, где есть эта категория (временная таблица)
			|ВЫБРАТЬ
			|	Спр.КатегорияНовостей.Код                        КАК КодКатегорииНовостей,
			|	Спр.КатегорияНовостей.ТипЗначенияВспомогательный КАК ТипКатегорииНовостей,
			|	Спр.КатегорияНовостей                            КАК КатегорияНовостей,
			|	Спр.Ссылка                                       КАК ЛентаНовостей
			|ПОМЕСТИТЬ ВТ_ЛентыНовостей
			|ИЗ
			|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
			|ГДЕ
			|	Спр.КатегорияНовостей.Код В (&КодыКатегорий)
			|ИНДЕКСИРОВАТЬ ПО
			|	ЛентаНовостей,
			|	КатегорияНовостей
			|;
			|
			|// 1. Список категорий и значений для новостей, которые еще не устарели.
			|//    Устаревшие новости - ДатаЗавершения, ПометкаУдаления, ВерсияПродукта, ВерсияПлатформы.
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Рег.Новость.ЛентаНовостей     КАК ЛентаНовостей,
			|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
			|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
			|ПОМЕСТИТЬ ВТ_ЗначенияКатегорийНовостей
			|ИЗ
			|	РегистрСведений.КатегорииНовостейПростые КАК Рег
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК РегОтборы
			|	ПО
			|		Рег.Новость = РегОтборы.Новость
			|
			|ГДЕ
			|	ЕСТЬNULL(РегОтборы.РезультатОтбора, ИСТИНА) = ИСТИНА
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЛентаНовостей,
			|	КатегорияНовостей
			|;
			|
			|// 2. Список значений категорий по лентам новостей (временная таблица)
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_ЛентыНовостей.КодКатегорииНовостей                  КАК КодКатегорииНовостей,
			|	ВТ_ЛентыНовостей.ТипКатегорииНовостей                  КАК ТипКатегорииНовостей,
			|	ВТ_ЛентыНовостей.КатегорияНовостей                     КАК КатегорияНовостей,
			|	ВТ_ЛентыНовостей.ЛентаНовостей                         КАК ЛентаНовостей,
			|	ВТ_ЗначенияКатегорийНовостей.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
			|ПОМЕСТИТЬ ВТ_ЗначенияКатегорийПоЛентамНовостей
			|ИЗ
			|	ВТ_ЛентыНовостей
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ // Если какие-то категории не настроены в новостях, то и не рассчитывать их
			|	ВТ_ЗначенияКатегорийНовостей
			|	ПО
			|		ВТ_ЛентыНовостей.ЛентаНовостей = ВТ_ЗначенияКатегорийНовостей.ЛентаНовостей
			|		И ВТ_ЛентыНовостей.КатегорияНовостей = ВТ_ЗначенияКатегорийНовостей.КатегорияНовостей
			|;
			|";

			ИспользоватьНомерОбластиДанных = Ложь;
			// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем
				//  без разделения (и не вошли в область данных)).
				Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
					ИспользоватьНомерОбластиДанных = Истина;
				КонецЕсли;
			КонецЕсли;

			Если ИспользоватьНомерОбластиДанных = Истина Тогда
				Запрос.Текст = Запрос.Текст + "
					|
					|// 3. Общий список лент новостей и значений категорий (для заполнения отбора области данных)
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	РегОбласти.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
					|	ВТ.КодКатегорииНовостей                       КАК КодКатегорииНовостей,
					|	ВТ.ТипКатегорииНовостей                       КАК ТипКатегорииНовостей,
					|	ВТ.КатегорияНовостей                          КАК КатегорияНовостей,
					|	ВТ.ЗначениеКатегорииНовостей                  КАК ЗначениеКатегорииНовостей,
					|	ВТ.ЛентаНовостей                              КАК ЛентаНовостей,
					|	ВЫБОР
					|		КОГДА Рег.ЗначениеКатегорииНовостей ЕСТЬ NULL ТОГДА
					|			ЛОЖЬ
					|		ИНАЧЕ
					|			ИСТИНА
					|	КОНЕЦ                                         КАК ЕстьСохраненноеЗначение,
					|	ЕСТЬNULL(Рег.УсловиеВыполнено, ЛОЖЬ)          КАК РезультатРасчетаДляСохраненногоЗначения
					|ИЗ
					|	РегистрСведений.ОбластиДанных КАК РегОбласти
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	ВТ_ЗначенияКатегорийПоЛентамНовостей КАК ВТ
					|	ПО
					|		ИСТИНА // Перемножение таблиц
					|
					|	// Возможно, значение категории (и категории антагониста) было сохранено ранее в РС.ЗначенияКатегорий*
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.ЗначенияКатегорийДляОбластиДанных КАК Рег
					|	ПО
					|		РегОбласти.ОбластьДанныхВспомогательныеДанные = Рег.ОбластьДанныхВспомогательныеДанные
					|		И ВТ.КатегорияНовостей = Рег.КатегорияНовостей
					|		И ВТ.ЗначениеКатегорииНовостей = Рег.ЗначениеКатегорииНовостей
					|ГДЕ
					|	РегОбласти.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется)
					|	И НЕ ВТ.ЛентаНовостей ЕСТЬ NULL // Возможна ситуация, когда ВТ_ЗначенияКатегорийПоЛентамНовостей - пустая
					|УПОРЯДОЧИТЬ ПО
					|	ОбластьДанных,
					|	КатегорияНовостей,
					|	ЗначениеКатегорииНовостей,
					|	ЛентаНовостей
					|
					|";
			Иначе
				Запрос.Текст = Запрос.Текст + "
					|
					|// 3. Общий список лент новостей и значений категорий (для заполнения отбора области данных)
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Неопределено                         КАК ОбластьДанных,
					|	ВТ.КодКатегорииНовостей              КАК КодКатегорииНовостей,
					|	ВТ.ТипКатегорииНовостей              КАК ТипКатегорииНовостей,
					|	ВТ.КатегорияНовостей                 КАК КатегорияНовостей,
					|	ВТ.ЗначениеКатегорииНовостей         КАК ЗначениеКатегорииНовостей,
					|	ВТ.ЛентаНовостей                     КАК ЛентаНовостей,
					|	ВЫБОР
					|		КОГДА Рег.ЗначениеКатегорииНовостей ЕСТЬ NULL ТОГДА
					|			ЛОЖЬ
					|		ИНАЧЕ
					|			ИСТИНА
					|	КОНЕЦ                                КАК ЕстьСохраненноеЗначение,
					|	ЕСТЬNULL(Рег.УсловиеВыполнено, ЛОЖЬ) КАК РезультатРасчетаДляСохраненногоЗначения
					|ИЗ
					|	ВТ_ЗначенияКатегорийПоЛентамНовостей КАК ВТ
					|
					|	// Возможно, значение категории (и категории антагониста) было сохранено ранее в РС.ЗначенияКатегорий*
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.ЗначенияКатегорийДляОбластиДанных КАК Рег
					|	ПО
					|		ВТ.КатегорияНовостей = Рег.КатегорияНовостей
					|		И ВТ.ЗначениеКатегорииНовостей = Рег.ЗначениеКатегорииНовостей
					|УПОРЯДОЧИТЬ ПО
					|	ОбластьДанных,
					|	КатегорияНовостей,
					|	ЗначениеКатегорииНовостей,
					|	ЛентаНовостей
					|
					|";
			КонецЕсли;

		Запрос.УстановитьПараметр("КодыКатегорий", МассивКодовКатегорий);
		РезультатЗапроса = Запрос.Выполнить(); // ЗаполнитьЗначенияАвтоматическихОтборов_ДляОбластиДанных.
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.СледующийПоЗначениюПоля("ОбластьДанных") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("КатегорияНовостей") Цикл

					ЛентыНовостейДляФиктивногоОтбора = Новый Соответствие; // Соответствие вместо массива для уникальности ключей.
					ТекущаяКатегорияНовостей = Выборка.КатегорияНовостей;

					НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейДляОбластиДанных.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор["КатегорияНовостей"].Установить(ТекущаяКатегорияНовостей, Истина);
					Если ИспользоватьНомерОбластиДанных = Истина Тогда
						НаборЗаписей.Отбор["ОбластьДанныхВспомогательныеДанные"].Установить(Выборка.ОбластьДанных, Истина);
					КонецЕсли;

						Пока Выборка.СледующийПоЗначениюПоля("ЗначениеКатегорииНовостей") Цикл
							Если Выборка.ЕстьСохраненноеЗначение = Истина Тогда
								РезультатРасчета = Выборка.РезультатРасчетаДляСохраненногоЗначения;
								// Метод РассчитатьОтборПоКатегории вызываться НЕ будет.
							Иначе
								РезультатРасчета = Ложь;
								РассчитатьОтборПоКатегории(
									ТекущаяКатегорияНовостей,
									Выборка.КодКатегорииНовостей,
									Выборка.ЗначениеКатегорииНовостей,
									РезультатРасчета,
									Выборка.ОбластьДанных,
									КонтекстВыполнения);
							КонецЕсли;
							Пока Выборка.СледующийПоЗначениюПоля("ЛентаНовостей") Цикл
								ЛентыНовостейДляФиктивногоОтбора.Вставить(Выборка.ЛентаНовостей, Истина);
								// Дозаполним отбор по явно указанным значениям отбора.
								Пока Выборка.Следующий() Цикл
									Если РезультатРасчета = Истина Тогда
										НоваяЗапись = НаборЗаписей.Добавить();
										Если ИспользоватьНомерОбластиДанных = Истина Тогда
											НоваяЗапись.ОбластьДанныхВспомогательныеДанные = Выборка.ОбластьДанных;
										КонецЕсли;
										НоваяЗапись.ЛентаНовостей     = Выборка.ЛентаНовостей;
										НоваяЗапись.КатегорияНовостей = ТекущаяКатегорияНовостей;
										Если Выборка.ТипКатегорииНовостей = Перечисления.ТипыЗначенийКатегорийНовостей.Строка Тогда
											НоваяЗапись.ЗначениеКатегорииНовостей = СокрЛП(Выборка.ЗначениеКатегорииНовостей);
										Иначе
											НоваяЗапись.ЗначениеКатегорииНовостей = Выборка.ЗначениеКатегорииНовостей;
										КонецЕсли;
									Иначе
										// Если результат отбора = Ложь, то у нас будет использована фиктивная запись со значением "*".
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;

						// Добавим фиктивное значение отбора, например "*".
						// Без этого фиктивного значения возможна следующая ситуация:
						//  - есть единственная новость с категорией "ПодсистемаВнедрена" = "Подсистема1";
						//  - в реальности эта подсистема НЕ внедрена, значит запись в регистр
						//      сведений ОтборыПоЛентамНовостей* для этой категории не будет добавлена,
						//      т.е. регистр сведений ОтборыПоЛентамНовостей* - пустой;
						//  - если регистр сведений ОтборыПоЛентамНовостей* - пустой, то значит
						//      подходит любой отбор, т.е. "для всех".
						Для Каждого КлючЗначение Из ЛентыНовостейДляФиктивногоОтбора Цикл
							НоваяЗапись = НаборЗаписей.Добавить();
							Если ИспользоватьНомерОбластиДанных = Истина Тогда
								НоваяЗапись.ОбластьДанныхВспомогательныеДанные = Выборка.ОбластьДанных;
							КонецЕсли;
							НоваяЗапись.ЛентаНовостей             = КлючЗначение.Ключ;
							НоваяЗапись.КатегорияНовостей         = ТекущаяКатегорияНовостей;
							НоваяЗапись.ЗначениеКатегорииНовостей = "*"; // Фиктивное значение.
						КонецЦикла;

					НаборЗаписей.Записать(Истина);

				КонецЦикла;
			КонецЦикла;
		КонецЕсли;

#КонецОбласти

КонецПроцедуры

// Процедура рассчитывает значение отбора по категории и значению категории для дальнейшего определения,
//  какие новости скрывать в зависимости от категории и значения категории новости.
//
// Параметры:
//  КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - категория новостей;
//  КодКатегорииНовостей      - Строка - код категории новостей;
//  ЗначениеКатегорииНовостей - Строка - значение категории новостей;
//  РезультатРасчета          - Булево - в эту переменную будет возвращено значение расчета по категории новостей;
//  ОбластьДанных             - Число, Неопределено - номер области данных или Неопределено для неразделенных значений
//                                или при работе в коробке;
//  КонтекстВыполнения        - Структура, Неопределено - структура контекста выполнения.
//
Процедура РассчитатьОтборПоКатегории(
			КатегорияНовостей,
			КодКатегорииНовостей,
			ЗначениеКатегорииНовостей,
			РезультатРасчета,
			ОбластьДанных = Неопределено,
			КонтекстВыполнения = Неопределено)

	// Можно переопределить значение расчета для предопределенных значений категорий.
	// Это нужно в том случае, если в новостях передается категория,
	//  вычисление которой стандартными способами вызовет ошибку.
	// Например, несуществующая функциональная опция.
	СтандартнаяОбработка = Истина;
	ОбработкаНовостейПереопределяемый.РассчитатьОтборПоКатегории(
		КатегорияНовостей,
		КодКатегорииНовостей,
		ЗначениеКатегорииНовостей,
		РезультатРасчета,
		ОбластьДанных,
		КонтекстВыполнения,
		СтандартнаяОбработка);

	Если СтандартнаяОбработка <> Ложь Тогда

		Если (ВРег(КодКатегорииНовостей) = ВРег("SubsystemRealized"))
				ИЛИ (ВРег(КодКатегорииНовостей) = ВРег("SubsystemNotRealized")) Тогда

			// Необходимо рассчитать, внедрена ли указанная подсистема или нет.
			ПодсистемаВнедрена = ОбщегоНазначения.ПодсистемаСуществует(СокрЛП(ЗначениеКатегорииНовостей));

			// Итоговый результат зависит от того, какая категория проверяется.
			Если (ВРег(КодКатегорииНовостей) = ВРег("SubsystemRealized")) Тогда
				РезультатРасчета = ПодсистемаВнедрена; // Условие выполняется, если подсистема внедрена.
			ИначеЕсли (ВРег(КодКатегорииНовостей) = ВРег("SubsystemNotRealized")) Тогда
				РезультатРасчета = НЕ ПодсистемаВнедрена; // Условие выполняется, если подсистема НЕ внедрена.
			КонецЕсли;

		ИначеЕсли (ВРег(КодКатегорииНовостей) = ВРег("FnOptionOn"))
				ИЛИ (ВРег(КодКатегорииНовостей) = ВРег("FnOptionOff")) Тогда

			// Необходимо рассчитать, включена ли указанная ФО или нет.
			Попытка
				ФОВключена = ПолучитьФункциональнуюОпцию(СокрЛП(ЗначениеКатегорииНовостей));
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ФОВключена = Ложь;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка получения значения функциональной опции %1 для категории %2.
						|Подробности:
						|%3'"),
					СокрЛП(ЗначениеКатегорииНовостей),
					КодКатегорииНовостей,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
					НСтр("ru='Новости. Сервис и регламент. РассчитатьОтборПоКатегории. Общие'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
					УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
					Метаданные.Справочники.Новости, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			КонецПопытки;

			// Итоговый результат зависит от того, какая категория проверяется.
			Если (ВРег(КодКатегорииНовостей) = ВРег("FnOptionOn")) Тогда
				РезультатРасчета = (ФОВключена = Истина); // Условие выполняется, если ФО = Истина.
			ИначеЕсли (ВРег(КодКатегорииНовостей) = ВРег("FnOptionOff")) Тогда
				РезультатРасчета = (ФОВключена = Ложь); // Условие выполняется, если ФО = Ложь.
			КонецЕсли;

		ИначеЕсли (ВРег(КодКатегорииНовостей) = ВРег("FnOptionDataAreaOn"))
				ИЛИ (ВРег(КодКатегорииНовостей) = ВРег("FnOptionDataAreaOff")) Тогда

			// Если мы не вошли в область данных, то необходимо это сделать.
			// Привилегированный режим должен был быть установлен ранее.
			ИспользоватьНомерОбластиДанных = Ложь;
			МодульРаботаВМоделиСервисаБИП = Неопределено;
			// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем
				//  без разделения (и не вошли в область данных)).
				Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
					ИспользоватьНомерОбластиДанных = Истина;
					МодульРаботаВМоделиСервисаБИП = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервисаБИП");
				КонецЕсли;
			КонецЕсли;

			// Вход и выход в область данных должен осуществляться ВНЕ Попытка / Исключение чтения ФО,
			//  т.к. возможно, что ФО отсутствует, и тогда после входа в область данных будет ошибка
			//  и мы не выйдем из области данных.
			// Тем не менее, при входе в область данных может быть исключение, т.к. область данных может быть
			//  недоступна (например, монопольно захвачена для резервного копирования).
			// При недоступности области данных просто пропустить ее. Новость - показать.
			ЕстьОшибкаВходаВОбластьДанных = Ложь;
			Если ИспользоватьНомерОбластиДанных = Истина Тогда
				Попытка
					МодульРаботаВМоделиСервисаБИП.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
				Исключение
					ЕстьОшибкаВходаВОбластьДанных = Истина;
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка входа в область данных %1.
							|Подробности:
							|%2'"),
						ОбластьДанных,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
						НСтр("ru='Новости. Сервис и регламент. РассчитатьОтборПоКатегории. ДляОбластиДанных'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
						УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
						Метаданные.Справочники.Новости, // ОбъектМетаданных
						, // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				КонецПопытки;
			КонецЕсли;

			Если ЕстьОшибкаВходаВОбластьДанных = Ложь Тогда
				// Для расчета, эта процедура вызывается в модели сервиса из области данных, или в коробке.
				// Необходимо рассчитать, включена ли указанная ФО или нет.
				Попытка
					ФОВключена = ПолучитьФункциональнуюОпцию(СокрЛП(ЗначениеКатегорииНовостей));
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ФОВключена = Ложь;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка получения значения функциональной опции %1 для категории %2.
							|Подробности:
							|%3'"),
						СокрЛП(ЗначениеКатегорииНовостей),
						КодКатегорииНовостей,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
						НСтр("ru='Новости. Сервис и регламент. РассчитатьОтборПоКатегории. ДляОбластиДанных'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
						УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
						Метаданные.Справочники.Новости, // ОбъектМетаданных
						, // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				КонецПопытки;

				// Вход и выход в область данных должен осуществляться ВНЕ Попытка / Исключение,
				//  т.к. возможно, что ФО отсутствует, и тогда после входа в область данных будет ошибка
				//  и мы не выйдем из области данных.
				Если ИспользоватьНомерОбластиДанных = Истина Тогда
					МодульРаботаВМоделиСервисаБИП.УстановитьРазделениеСеанса(Ложь);
				КонецЕсли;

				// Итоговый результат зависит от того, какая категория проверяется.
				Если (ВРег(КодКатегорииНовостей) = ВРег("FnOptionDataAreaOn")) Тогда
					РезультатРасчета = (ФОВключена = Истина); // Условие выполняется, если ФО = Истина.
				ИначеЕсли (ВРег(КодКатегорииНовостей) = ВРег("FnOptionDataAreaOff")) Тогда
					РезультатРасчета = (ФОВключена = Ложь); // Условие выполняется, если ФО = Ложь.
				КонецЕсли;
			Иначе
				РезультатРасчета = Истина; // В случае ошибки входа в область данных, безусловно показать новость.
			КонецЕсли;

		ИначеЕсли (ВРег(КодКатегорииНовостей) = ВРег("ServiceDataAreaOn"))
				ИЛИ (ВРег(КодКатегорииНовостей) = ВРег("ServiceDataAreaOff")) Тогда

			// Для расчета, эта процедура вызывается в модели сервиса из области данных, или в коробке.
			// Необходимо рассчитать, подключен ли указанный сервис или нет.
			// На текущий момент предопределенных сервисов нет, поэтому все они
			//  должны быть обработаны в переопределяемом модуле.
			СервисПодключен = Ложь;

			// Итоговый результат зависит от того, какая категория проверяется.
			Если (ВРег(КодКатегорииНовостей) = ВРег("ServiceDataAreaOn")) Тогда
				РезультатРасчета = (СервисПодключен = Истина); // Условие выполняется, если сервис подключен = Истина.
			ИначеЕсли (ВРег(КодКатегорииНовостей) = ВРег("ServiceDataAreaOff")) Тогда
				РезультатРасчета = (СервисПодключен = Ложь); // Условие выполняется, если сервис подключен = Ложь.
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура проверяет, была ли изменена версия платформы с момента последнего запуска и запускает необходимые процедуры.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ПроверитьИзменениеВерсииПлатформы(КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "ПроверитьИзменениеВерсииПлатформы"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Проверка изменения версии платформы'"));

	ЕстьОшибки = Ложь;
	Если МонопольныйРежим() Тогда
		// Если база работает в монопольном режиме (например, запущено фоновое задание, которое включило монопольный режим
		//  и выгружает данные из области данных для последующей загрузки в модели сервиса),
		//  то будут ошибки при всех попытках записи данных в базу.
		// Поэтому в монопольном режиме не следует выполнять никаких обновлений в подсистеме новостей.
		ОписаниеРезультата = НСтр("ru='В монопольном режиме проверка версии платформы не осуществляется'");
		ЕстьОшибки = Истина;
	КонецЕсли;

	Если ЕстьОшибки = Ложь Тогда

		ОписаниеРезультата = НСтр("ru='Сохраненная версия платформы: %СохраненнаяВерсияПлатформы%
			|Текущая версия платформы: %ТекущаяВерсияПлатформы%
			|%ТребуетсяОбновлениеРедкоменяющихсяОтборов%
			|
			|Версия конфигурации в этой обработке не проверяется, а пересчитывается принудительно в модуле обновления конфигурации, а также после каждого получения новостей.'");

		ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

		ТипСтрока = Тип("Строка");

		УстановитьПривилегированныйРежим(Истина);

			// 1. Получить текущую версию платформы.
			ЛокальнаяСистемнаяИнформация = Новый СистемнаяИнформация;
			ЛокальнаяТекущаяВерсия = ЛокальнаяСистемнаяИнформация.ВерсияПриложения;

			// 2. Получить сохраненную ранее версию платформы.
			КлючОбъекта = "СистемнаяИнформация_ВерсияПриложения";
			ЛокальнаяПоследняяВерсия = ХранилищаНастроек.НастройкиНовостей.Загрузить(КлючОбъекта);

			Если (ТипЗнч(ЛокальнаяПоследняяВерсия) <> ТипСтрока) // Первый запуск
					ИЛИ СокрЛП(ЛокальнаяТекущаяВерсия) <> СокрЛП(ЛокальнаяПоследняяВерсия) Тогда // Или обновили платформу

				// 3. Рассчитать заново регистр "РассчитанныеОтборыПоНовостям_РедкоМеняющиеся" для отборов
				//  по новостям по редко меняющимся категориям (версия конфигурации, платформы, продукт).
				// Запускать как фоновое задание, но предварительно проверить - не запускал ли кто уже это фоновое задание?
				МенеджерЗаданийАктивен = Истина;
				ИмяМетода = "ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся";
				Попытка
					МассивВыполняемыхФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода", ИмяМетода));
				Исключение
					// Менеджер заданий не активен.
					МенеджерЗаданийАктивен = Ложь;
				КонецПопытки;
				Если МенеджерЗаданийАктивен = Истина Тогда
					Если МассивВыполняемыхФоновыхЗаданий.Количество() = 0 Тогда
						МассивФоновыхЗаданий = Новый Массив;
						МассивФоновыхЗаданий.Добавить(
							ФоновыеЗадания.Выполнить(
								ИмяМетода,
								,
								"", // Ключ
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся в связи с изменением версии платформы с %1 на %2'"),
									ЛокальнаяПоследняяВерсия,
									ЛокальнаяТекущаяВерсия)));
						// Последняя версия платформы сохранится в "ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся".
						ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%ТребуетсяОбновлениеРедкоменяющихсяОтборов%", НСтр("ru='Редко меняющиеся отборы будут пересчитаны (запущено фоновое задание)'"));
					Иначе
						ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%ТребуетсяОбновлениеРедкоменяющихсяОтборов%", НСтр("ru='Редко меняющиеся отборы уже пересчитываются (запущено фоновое задание из другого сеанса)'"));
					КонецЕсли;
				Иначе
					ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%ТребуетсяОбновлениеРедкоменяющихсяОтборов%", НСтр("ru='Редко меняющиеся отборы будут пересчитаны (явный запуск ПересчитатьОтборыПоНовостям_РедкоМеняющиеся())'"));
					ПересчитатьОтборыПоНовостям_РедкоМеняющиеся(Неопределено); // здесь сохранится последняя версия платформы
				КонецЕсли;
				ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%СохраненнаяВерсияПлатформы%", ЛокальнаяПоследняяВерсия);
				ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%ТекущаяВерсияПлатформы%", ЛокальнаяТекущаяВерсия);

			Иначе
				ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%СохраненнаяВерсияПлатформы%", ЛокальнаяПоследняяВерсия);
				ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%ТекущаяВерсияПлатформы%", ЛокальнаяТекущаяВерсия);
				ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%ТребуетсяОбновлениеРедкоменяющихсяОтборов%", НСтр("ru='Редко меняющиеся отборы останутся как есть'"));
			КонецЕсли;

			// Сохранить дату последнего выполнения / обновления.
			// В случае массового старта пользователей (что возможно в крупных клиент-серверных базах), возможны блокировки.
			// Если запись невозможно заблокировать, значит кто-то уже проверяет версию платформы и надо отменить запись.
			ВидОбновления = "Проверка версии платформы"; // Идентификатор.
			ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 6*60*60;

			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВсеОбновленияНовостей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("ВидОбновления", ВидОбновления);

			НачатьТранзакцию();
			Попытка
				Блокировка.Заблокировать();
				Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
					Запись.ВидОбновления = ВидОбновления;
					Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
					Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРегистров;
					Запись.ДатаСледующегоОбновления = ДатаСледующегоОбновления;
				Запись.Записать(Истина);
				ОписаниеРезультата = ОписаниеРезультата
					+ Символы.ПС
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Попытка зафиксировать транзакцию.
							|ТекущаяДатаДляРегистров: %1
							|ДатаСледующегоОбновления: %2'"),
						ТекущаяДатаДляРегистров,
						ДатаСледующегоОбновления);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ОписаниеРезультата = ОписаниеРезультата
					+ Символы.ПС
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не удалось заблокировать запись регистра сведений ВсеОбновленияНовостей для вида обновлений %1.
							|Возможно, другой процесс в этот момент сохраняет данные. Планировалось записать:
							|ТекущаяДатаДляРегистров: %2
							|ДатаСледующегоОбновления: %3'"),
						ВидОбновления,
						ТекущаяДатаДляРегистров,
						ДатаСледующегоОбновления);
			КонецПопытки;

	КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Все обновления новостей'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Все обновления новостей. Проверка версии платформы'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Проверка изменения версии платформы'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Расширенный"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура удаляет из регистров сведений ОтборыПоЛентамНовостейОбщие, ОтборыПоЛентамНовостейДляОбластиДанных
//   и ОтборыПоЛентамНовостейПользовательские категории значения категорий, которые некорректны.
// Некорректными записями этих регистров считаются:
//  1. записи с категориями, которых нет в табличной части "ДоступныеКатегорииНовостей" в ленте новостей;
//  2. общие отборы по области данных, по значениям категорий, по которым уже установлен общий отбор (неразделенный),
//     а значения отбора по области данных не входят в подмножество общего отбора (неразделенного)
//     (например, общий отбор (неразделенный): География = Москва, Хабаровск,
//     а отбор по области данных установили География = Киев);
//  3. пользовательские отборы по категориям, по которым в ленте новостей установлен признак
//     РазрешеноНастраиватьПользователям = Ложь, (за исключением записей,
//     у которых реквизит УстановленоПрограммно = Истина);
//  4. пользовательские отборы, по значениям категорий, по которым уже установлен общий отбор
//     (неразделенный или по области данных), а значения пользовательского отбора не входят
//     в подмножество общего отбора (неразделенного или по области данных) (например, общий отбор:
//     География = Москва, Хабаровск, а пользователь установил География = Киев);
// Такие ситуации возможны, если:
//  а) со временем из какой-то ленты новостей удалили категории;
//  б) администратор со временем отключил пользователям возможность настраивать какие-то категории
//     (но программно может задавать им отборы);
//  в) администратор со временем изменил общие неразделенные отборы;
//  г) администратор со временем изменил общие отборы по области данных.
// Процедура должна вызываться после получения новостей, но перед пересчетом отборов (ПересчитатьОтборыПоНовостям_*).
// При работе в локальном режиме может запускаться без ограничений.
// При работе в модели сервиса:
//   - если запущена из неразделенного сеанса (регламентным заданием), то пересчитает и общие,
//       и общие для области данных, и пользовательские отборы;
//   - если запущена из разделенного сеанса (обработчик обновления каждой области данных),
//       то пересчитает только общие для области данных и пользовательские отборы.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ОптимизироватьОтборыПоНовостям(КонтекстВыполнения = Неопределено) Экспорт

#Область ИнициализацияМетода

	НаименованиеПроцедурыФункции = "ОптимизироватьОтборыПоНовостям"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Оптимизация отборов по новостям'"));

	ОптимизироватьОтборыПоНовостямОбщие            = Истина;
	ОптимизироватьОтборыПоНовостямДляОбластиДанных = Истина;
	ОптимизироватьОтборыПоНовостямПользовательские = Истина;

	РазделениеВключено                     = ОбщегоНазначения.РазделениеВключено(); // Есть общие разделители в метаданных и ФО разделения включена;
	ДоступноИспользованиеРазделенныхДанных = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных(); // Мы в коробке или вошли в область данных;
	СеансЗапущенБезРазделителей            = ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей(); // У текущего пользователя не указаны разделители.

#КонецОбласти

#Область Обработка

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если РазделениеВключено Тогда
		// Если вошли в область данных (могли зайти под пользователем без разделителей).
		Если ДоступноИспользованиеРазделенныхДанных Тогда
			ОптимизироватьОтборыПоНовостямОбщие = Ложь;
		КонецЕсли;
	Иначе
		// В локальном режиме оптимизируются все настроенные отборы.
	КонецЕсли;

	// В том случае, когда записывается пользовательский отбор (в разделенном сеансе),
	//  но надо пересчитать также отбор по области данных, то надо включить привилегированный режим.
	УстановитьПривилегированныйРежим(Истина);

#Область Оптимизация_УдалениеОтборовПоНесуществующимКатегориям

#Область ВыполнениеЗапроса

	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ВыполнениеЗапроса", // Идентификатор.
		НСтр("ru='Оптимизация отборов по новостям / Выполнение запроса'"));

		// 1. Категории общего, общего для области данных и пользовательского отборов должны присутствовать
		//      в табличной части "ДоступныеКатегорииНовостей" ленты новостей.
		// 2. Пользовательские отборы: не должно быть категорий, по которым в ленте новостей
		//      сброшен флаг РазрешеноНастраиватьПользователям.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

		Запрос.Текст = "
			|// 0. Доступные для отборов категории по лентам новостей.
			|ВЫБРАТЬ
			|	Спр.Ссылка                            КАК ЛентаНовостей,
			|	Спр.КатегорияНовостей                 КАК КатегорияНовостей,
			|	Спр.РазрешеноНастраиватьПользователям КАК РазрешеноНастраиватьПользователям
			|ПОМЕСТИТЬ ВТ_ДоступныеКатегорииДляОтборов
			|ИЗ
			|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
			|;
			|
			|// 1. Записи для удаления из регистра сведений ОтборыПоЛентамНовостейДляОбластиДанных.
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&Мета_ПолеДляМоделиСервиса, // КАК ОбластьДанныхВспомогательныеДанные,
			|	Рег.ЛентаНовостей     КАК ЛентаНовостей,
			|	Рег.КатегорияНовостей КАК КатегорияНовостей
			|ИЗ
			|	РегистрСведений.ОтборыПоЛентамНовостейДляОбластиДанных КАК Рег
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	ВТ_ДоступныеКатегорииДляОтборов
			|	ПО
			|		Рег.ЛентаНовостей       = ВТ_ДоступныеКатегорииДляОтборов.ЛентаНовостей
			|		И Рег.КатегорияНовостей = ВТ_ДоступныеКатегорииДляОтборов.КатегорияНовостей
			|ГДЕ
			|	ВТ_ДоступныеКатегорииДляОтборов.КатегорияНовостей ЕСТЬ NULL // Нет такой категории в ленте новостей
			|	И Рег.УстановленоПрограммно = ЛОЖЬ // Установленные программным способом пропускаем.
			|СГРУППИРОВАТЬ ПО
			|	&Мета_ПолеДляМоделиСервиса,
			|	Рег.ЛентаНовостей,
			|	Рег.КатегорияНовостей
			|УПОРЯДОЧИТЬ ПО
			|	&Мета_ПолеДляМоделиСервиса,
			|	Рег.ЛентаНовостей,
			|	Рег.КатегорияНовостей
			|;
			|
			|// 2. Записи для удаления из регистра сведений ОтборыПоЛентамНовостейПользовательские.
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&Мета_ПолеДляМоделиСервиса, // КАК ОбластьДанныхВспомогательныеДанные,
			|	Рег.ЛентаНовостей     КАК ЛентаНовостей,
			|	Рег.КатегорияНовостей КАК КатегорияНовостей
			|ИЗ
			|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК Рег
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	ВТ_ДоступныеКатегорииДляОтборов
			|	ПО
			|		Рег.ЛентаНовостей       = ВТ_ДоступныеКатегорииДляОтборов.ЛентаНовостей
			|		И Рег.КатегорияНовостей = ВТ_ДоступныеКатегорииДляОтборов.КатегорияНовостей
			|ГДЕ
			|	ВТ_ДоступныеКатегорииДляОтборов.КатегорияНовостей ЕСТЬ NULL // Нет такой категории в ленте новостей
			|	ИЛИ
			|	(
			|		ВТ_ДоступныеКатегорииДляОтборов.РазрешеноНастраиватьПользователям = ЛОЖЬ // Запрещено настраивать пользователям вручную
			|		И Рег.УстановленоПрограммно = ЛОЖЬ // Установлено пользователем вручную (а не программно, например, регламентным заданием)
			|	)
			|СГРУППИРОВАТЬ ПО
			|	&Мета_ПолеДляМоделиСервиса,
			|	Рег.ЛентаНовостей,
			|	Рег.КатегорияНовостей
			|УПОРЯДОЧИТЬ ПО
			|	&Мета_ПолеДляМоделиСервиса,
			|	Рег.ЛентаНовостей,
			|	Рег.КатегорияНовостей
			|;
			|";

		Если ОптимизироватьОтборыПоНовостямОбщие = Истина Тогда
			Запрос.Текст = Запрос.Текст + "
				|// 3. Записи для удаления из регистра сведений ОтборыПоЛентамНовостейОбщие.
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Рег.ЛентаНовостей     КАК ЛентаНовостей,
				|	Рег.КатегорияНовостей КАК КатегорияНовостей
				|ИЗ
				|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК Рег
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	ВТ_ДоступныеКатегорииДляОтборов
				|	ПО
				|		Рег.ЛентаНовостей       = ВТ_ДоступныеКатегорииДляОтборов.ЛентаНовостей
				|		И Рег.КатегорияНовостей = ВТ_ДоступныеКатегорииДляОтборов.КатегорияНовостей
				|ГДЕ
				|	ВТ_ДоступныеКатегорииДляОтборов.КатегорияНовостей ЕСТЬ NULL // Нет такой категории в ленте новостей
				|	И Рег.УстановленоПрограммно = ЛОЖЬ // Установленные программным способом пропускаем.
				|СГРУППИРОВАТЬ ПО
				|	Рег.ЛентаНовостей,
				|	Рег.КатегорияНовостей
				|УПОРЯДОЧИТЬ ПО
				|	Рег.ЛентаНовостей,
				|	Рег.КатегорияНовостей
				|;
				|";
		КонецЕсли;

		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если РазделениеВключено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"&Мета_ПолеДляМоделиСервиса, // КАК ОбластьДанныхВспомогательныеДанные,",
				"Рег.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Мета_ПолеДляМоделиСервиса,", "Рег.ОбластьДанныхВспомогательныеДанные,");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Мета_ПолеДляМоделиСервиса, // КАК ОбластьДанныхВспомогательныеДанные,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Мета_ПолеДляМоделиСервиса,", "");
		КонецЕсли;

		РезультатыЗапроса = Запрос.ВыполнитьПакет(); // ОптимизироватьОтборыПоНовостям() / Удаление отключенных в ленте новостей категорий.

	РезультатЗапроса1 = ?(РезультатыЗапроса[1].Пустой(), НСтр("ru='пустой'"), НСтр("ru='есть данные'"));
	РезультатЗапроса2 = ?(РезультатыЗапроса[2].Пустой(), НСтр("ru='пустой'"), НСтр("ru='есть данные'"));
	Если ОптимизироватьОтборыПоНовостямОбщие = Истина Тогда
		РезультатЗапроса3 = ?(РезультатыЗапроса[3].Пустой(), НСтр("ru='пустой'"), НСтр("ru='есть данные'"));
	Иначе
		РезультатЗапроса3 = НСтр("ru='не выполнялся'");
	КонецЕсли;
	ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		0,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Результат запроса 1: %1
				|Результат запроса 2: %2
				|Результат запроса 3: %3'"),
			РезультатЗапроса1,
			РезультатЗапроса2,
			РезультатЗапроса3),
		Неопределено);

#КонецОбласти

#Область Оптимизация_УдалениеОтборовПоНесуществующимКатегориям_ДляОбластиДанных

	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".УдалениеОтборовПоНесуществующимКатегориям.ДляОбластиДанных", // Идентификатор.
		НСтр("ru='Оптимизация отборов по новостям / Удаление отборов по несуществующим категориям / Для области данных'"));

		// ОтборыПоЛентамНовостейДляОбластиДанных.
		Если НЕ РезультатыЗапроса[1].Пустой() Тогда
			Выборка = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейДляОбластиДанных.СоздатьНаборЗаписей();
					// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
					Если РазделениеВключено Тогда
						НаборЗаписей.Отбор["ОбластьДанныхВспомогательныеДанные"].Установить(Выборка.ОбластьДанныхВспомогательныеДанные, Истина);
					КонецЕсли;
					НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
					НаборЗаписей.Отбор["КатегорияНовостей"].Установить(Выборка.КатегорияНовостей, Истина);
				НаборЗаписей.Записать(Истина);
			КонецЦикла;
		КонецЕсли;

	ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		0,
		"",
		Неопределено);

#КонецОбласти

#Область Оптимизация_УдалениеОтборовПоНесуществующимКатегориям_Пользовательские

	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".УдалениеОтборовПоНесуществующимКатегориям.Пользовательские", // Идентификатор.
		НСтр("ru='Оптимизация отборов по новостям / УдалениеОтборовПоНесуществующимКатегориям / Пользовательские'"));

		// ОтборыПоЛентамНовостейПользовательские.
		Если НЕ РезультатыЗапроса[2].Пустой() Тогда
			Выборка = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейПользовательские.СоздатьНаборЗаписей();
					// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
					Если РазделениеВключено Тогда
						НаборЗаписей.Отбор["ОбластьДанныхВспомогательныеДанные"].Установить(Выборка.ОбластьДанныхВспомогательныеДанные, Истина);
					КонецЕсли;
					НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
					НаборЗаписей.Отбор["КатегорияНовостей"].Установить(Выборка.КатегорияНовостей, Истина);
				НаборЗаписей.Записать(Истина);
			КонецЦикла;
		КонецЕсли;

	ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		0,
		"",
		Неопределено);

#КонецОбласти

#Область Оптимизация_УдалениеОтборовПоНесуществующимКатегориям_Общие

	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".УдалениеОтборовПоНесуществующимКатегориям.Общие", // Идентификатор.
		НСтр("ru='Оптимизация отборов по новостям / УдалениеОтборовПоНесуществующимКатегориям / Общие'"));

		Если ОптимизироватьОтборыПоНовостямОбщие = Истина Тогда

			// ОтборыПоЛентамНовостейОбщие.
			Если НЕ РезультатыЗапроса[3].Пустой() Тогда
				Выборка = РезультатыЗапроса[3].Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейОбщие.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
						НаборЗаписей.Отбор["КатегорияНовостей"].Установить(Выборка.КатегорияНовостей, Истина);
					НаборЗаписей.Записать(Истина);
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;

	ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		0,
		"",
		Неопределено);

#КонецОбласти

#КонецОбласти

#Область Оптимизация_УдалениеЗначенийОтборов

	// 3. Отборы: не должно быть значений, которых нет в списке более высшего отбора.
	// Если установлен общий отбор, то в отборах для области данных и в пользовательском
	//  не должно быть значений, которых нет в общем.
	// Если установлен отбор для области данных, то в пользовательском отборе не должно быть значений,
	//  которых нет в общем для области данных.

#Область Оптимизация_УдалениеЗначенийОтборов_ДляОбластиДанных

	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".УдалениеЗначенийОтборов.ДляОбластиДанных", // Идентификатор.
		НСтр("ru='Оптимизация отборов по новостям / Удаление значений отборов / Общие для области данных'"));

		Если ОптимизироватьОтборыПоНовостямДляОбластиДанных = Истина Тогда
			// 3.1. Отборы по области данных: не должно быть значений, которых нет в списке общего
			//      неразделенного отбора (в случае, если общий отбор включен).
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = "
				|// Если общих отборов (неразделенных) нет, то по области данных разрешено отбирать по любым значениям.
				|// Если есть хотя бы один общий отбор (неразделенный),
				|//   то пользователь может выбирать только из указанных в общем неразделенном отборе значений.
				|
				|// 0. Количество общих отборов (неразделенных) по каждой категории.
				|ВЫБРАТЬ
				|	Спр.Ссылка            КАК ЛентаНовостей,
				|	Спр.КатегорияНовостей КАК КатегорияНовостей,
				|	СУММА(
				|		ВЫБОР
				|			КОГДА Рег.ЗначениеКатегорииНовостей ЕСТЬ NULL ТОГДА
				|				0
				|			ИНАЧЕ
				|				1
				|		КОНЕЦ
				|	)                     КАК Количество
				|ПОМЕСТИТЬ ВТ_КоличествоОбщихОтборовПоКатегориям
				|ИЗ
				|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК Рег
				|	ПО
				|		Спр.Ссылка = Рег.ЛентаНовостей
				|		И Спр.КатегорияНовостей = Рег.КатегорияНовостей
				|СГРУППИРОВАТЬ ПО
				|	Спр.Ссылка,
				|	Спр.КатегорияНовостей
				|;
				|
				|// 1. Найти значения отборов по области данных, которых нет в общих неразделенных отборах
				|//  (при условии, что общий отбор вообще включен).
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ.ЛентаНовостей                                  КАК ЛентаНовостей,
				|	ВТ.КатегорияНовостей                              КАК КатегорияНовостей,
				|	РегОбщийПоОбластиДанных.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ИЗ
				|	ВТ_КоличествоОбщихОтборовПоКатегориям КАК ВТ
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ОтборыПоЛентамНовостейДляОбластиДанных КАК РегОбщийПоОбластиДанных
				|	ПО
				|		ВТ.ЛентаНовостей = РегОбщийПоОбластиДанных.ЛентаНовостей
				|		И ВТ.КатегорияНовостей = РегОбщийПоОбластиДанных.КатегорияНовостей
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК РегОбщий
				|	ПО
				|		ВТ.ЛентаНовостей = РегОбщий.ЛентаНовостей
				|		И ВТ.КатегорияНовостей = РегОбщий.КатегорияНовостей
				|		И РегОбщийПоОбластиДанных.ЗначениеКатегорииНовостей = РегОбщий.ЗначениеКатегорииНовостей
				|
				|ГДЕ
				|	ВТ.Количество > 0
				|	И РегОбщий.ЗначениеКатегорииНовостей ЕСТЬ NULL
				|	И НЕ РегОбщийПоОбластиДанных.ЗначениеКатегорииНовостей ЕСТЬ NULL
				|СГРУППИРОВАТЬ ПО
				|	ВТ.ЛентаНовостей,
				|	ВТ.КатегорияНовостей,
				|	РегОбщийПоОбластиДанных.ЗначениеКатегорииНовостей
				|;
				|
				|";

			РезультатЗапроса = Запрос.Выполнить(); // ОптимизироватьОтборыПоНовостям() / Оптимизация отборов по области данных. // АПК:1328 Конкурентная работа маловероятна.
			Если НЕ РезультатЗапроса.Пустой() Тогда // Общий (неразделенный).
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					// В отличие от пользовательского отбора, здесь может быть как набор записей (при работе в неразделенном сеансе),
					//  так и единственная запись (при работе в разделенном сеансе или в коробке).
					Если ДоступноИспользованиеРазделенныхДанных Тогда
						Запись = РегистрыСведений.ОтборыПоЛентамНовостейДляОбластиДанных.СоздатьМенеджерЗаписи();
							Запись.ЛентаНовостей             = Выборка.ЛентаНовостей;
							Запись.КатегорияНовостей         = Выборка.КатегорияНовостей;
							Запись.ЗначениеКатегорииНовостей = Выборка.ЗначениеКатегорииНовостей;
						Запись.Удалить(); // Удалить одну конкретную запись.
					Иначе
						НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейДляОбластиДанных.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
							НаборЗаписей.Отбор["КатегорияНовостей"].Установить(Выборка.КатегорияНовостей, Истина);
							НаборЗаписей.Отбор["ЗначениеКатегорииНовостей"].Установить(Выборка.ЗначениеКатегорииНовостей, Истина);
						НаборЗаписей.Записать(Истина); // Очистить набор по всем областям данных.
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;

	ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		0,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Результат запроса: %1'"),
			?(РезультатЗапроса.Пустой(),
				НСтр("ru='пустой'"),
				НСтр("ru='есть данные'"))),
		Неопределено);

#КонецОбласти

#Область Оптимизация_УдалениеЗначенийОтборов_Пользовательские

	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".УдалениеЗначенийОтборов.Пользовательские", // Идентификатор.
		НСтр("ru='Оптимизация отборов по новостям / УдалениеЗначенийОтборов / Пользовательские'"));

		Если ОптимизироватьОтборыПоНовостямПользовательские = Истина Тогда
			// 3.2. Пользовательские отборы: не должно быть значений, которых нет в списке общего отбора
			//      (в случае, если общий отбор включен).
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = "
				|// Если общих отборов (неразделенных и по области данных) нет, то пользователю разрешено отбирать по любым значениям.
				|// Если есть хотя бы один общий отбор (неразделенный и по области данных),
				|//   то пользователь может выбирать только из указанных в общем отборе значений.
				|
				|// 0. Количество общих отборов (неразделенных) по каждой категории.
				|ВЫБРАТЬ
				|	Спр.Ссылка            КАК ЛентаНовостей,
				|	Спр.КатегорияНовостей КАК КатегорияНовостей,
				|	СУММА(
				|		ВЫБОР
				|			КОГДА Рег.ЗначениеКатегорииНовостей ЕСТЬ NULL ТОГДА
				|				0
				|			ИНАЧЕ
				|				1
				|		КОНЕЦ
				|	)                     КАК Количество
				|ПОМЕСТИТЬ ВТ_КоличествоОбщихОтборовПоКатегориям
				|ИЗ
				|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК Рег
				|	ПО
				|		Спр.Ссылка = Рег.ЛентаНовостей
				|		И Спр.КатегорияНовостей = Рег.КатегорияНовостей
				|СГРУППИРОВАТЬ ПО
				|	Спр.Ссылка,
				|	Спр.КатегорияНовостей
				|;
				|
				|// 1. Количество общих отборов (для области данных) по каждой категории.
				|ВЫБРАТЬ
				|	&МетаВыбрать_ПолеДляМоделиСервисаОтборДляОбластиДанных,
				|	Спр.Ссылка            КАК ЛентаНовостей,
				|	Спр.КатегорияНовостей КАК КатегорияНовостей,
				|	СУММА(
				|		ВЫБОР
				|			КОГДА Рег.ЗначениеКатегорииНовостей ЕСТЬ NULL ТОГДА
				|				0
				|			ИНАЧЕ
				|				1
				|		КОНЕЦ
				|	)                     КАК Количество
				|ПОМЕСТИТЬ ВТ_КоличествоДляОбластиДанныхОтборовПоКатегориям
				|ИЗ
				|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ОтборыПоЛентамНовостейДляОбластиДанных КАК Рег
				|	ПО
				|		Спр.Ссылка = Рег.ЛентаНовостей
				|		И Спр.КатегорияНовостей = Рег.КатегорияНовостей
				|СГРУППИРОВАТЬ ПО
				|	&МетаСгруппировать_ПолеДляМоделиСервисаОтборДляОбластиДанных,
				|	Спр.Ссылка,
				|	Спр.КатегорияНовостей
				|;
				|
				|// 2. Найти значения пользовательских отборов, которых нет в общих отборах
				|//  (при условии, что общий отбор вообще включен).
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ.ЛентаНовостей                          КАК ЛентаНовостей,
				|	ВТ.КатегорияНовостей                      КАК КатегорияНовостей,
				|	РегПользователь.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ИЗ
				|	ВТ_КоличествоОбщихОтборовПоКатегориям КАК ВТ
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК РегПользователь
				|	ПО
				|		ВТ.ЛентаНовостей = РегПользователь.ЛентаНовостей
				|		И ВТ.КатегорияНовостей = РегПользователь.КатегорияНовостей
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК РегОбщий
				|	ПО
				|		ВТ.ЛентаНовостей = РегОбщий.ЛентаНовостей
				|		И ВТ.КатегорияНовостей = РегОбщий.КатегорияНовостей
				|		И РегПользователь.ЗначениеКатегорииНовостей = РегОбщий.ЗначениеКатегорииНовостей
				|
				|ГДЕ
				|	ВТ.Количество > 0
				|	И РегОбщий.ЗначениеКатегорииНовостей ЕСТЬ NULL
				|	И НЕ РегПользователь.ЗначениеКатегорииНовостей ЕСТЬ NULL
				|СГРУППИРОВАТЬ ПО
				|	ВТ.ЛентаНовостей,
				|	ВТ.КатегорияНовостей,
				|	РегПользователь.ЗначениеКатегорииНовостей
				|;
				|
				|// 3. Найти значения пользовательских отборов, которых нет в общих для области данных отборах
				|//  (при условии, что общий отбор по области данных вообще включен).
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	&МетаВыбрать_ПолеДляМоделиСервиса,
				|	ВТ.ЛентаНовостей                          КАК ЛентаНовостей,
				|	ВТ.КатегорияНовостей                      КАК КатегорияНовостей,
				|	РегПользователь.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
				|ИЗ
				|	ВТ_КоличествоДляОбластиДанныхОтборовПоКатегориям КАК ВТ
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК РегПользователь
				|	ПО
				|		ВТ.ЛентаНовостей = РегПользователь.ЛентаНовостей
				|		И ВТ.КатегорияНовостей = РегПользователь.КатегорияНовостей
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.ОтборыПоЛентамНовостейДляОбластиДанных КАК РегДляОбластиДанных
				|	ПО
				|		&МетаСоединениеОтборовИПользователей
				|		И ВТ.ЛентаНовостей = РегДляОбластиДанных.ЛентаНовостей
				|		И ВТ.КатегорияНовостей = РегДляОбластиДанных.КатегорияНовостей
				|		И РегПользователь.ЗначениеКатегорииНовостей = РегДляОбластиДанных.ЗначениеКатегорииНовостей
				|ГДЕ
				|	ВТ.Количество > 0
				|	И РегДляОбластиДанных.ЗначениеКатегорииНовостей ЕСТЬ NULL
				|	И НЕ РегПользователь.ЗначениеКатегорииНовостей ЕСТЬ NULL
				|СГРУППИРОВАТЬ ПО
				|	&МетаСгруппировать_ПолеДляМоделиСервиса,
				|	ВТ.ЛентаНовостей,
				|	ВТ.КатегорияНовостей,
				|	РегПользователь.ЗначениеКатегорииНовостей
				|;
				|";

			// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
			Если РазделениеВключено
					// АдминистраторСистемы или фоновое задание (пустой пользователь).
					И СеансЗапущенБезРазделителей
					// АдминистраторСистемы или фоновое задание (пустой пользователь) НЕ вошли в область данных.
					И НЕ ДоступноИспользованиеРазделенныхДанных Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "РегПользователь.ОбластьДанныхВспомогательныеДанные,");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСгруппировать_ПолеДляМоделиСервиса,", "РегПользователь.ОбластьДанныхВспомогательныеДанные,");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервисаОтборДляОбластиДанных,", "Рег.ОбластьДанныхВспомогательныеДанные,");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСгруппировать_ПолеДляМоделиСервисаОтборДляОбластиДанных,", "Рег.ОбластьДанныхВспомогательныеДанные,");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСоединениеОтборовИПользователей", "РегДляОбластиДанных.ОбластьДанныхВспомогательныеДанные = РегПользователь.ОбластьДанныхВспомогательныеДанные");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСгруппировать_ПолеДляМоделиСервиса,", "");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервисаОтборДляОбластиДанных,", "");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСгруппировать_ПолеДляМоделиСервисаОтборДляОбластиДанных,", "");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаСоединениеОтборовИПользователей", "ИСТИНА");
			КонецЕсли;

			РезультатыЗапроса = Запрос.ВыполнитьПакет(); // ОптимизироватьОтборыПоНовостям() / Оптимизация пользовательских отборов.

			Если НЕ РезультатыЗапроса[2].Пустой() Тогда // Общий (неразделенный).
				Выборка = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					// Если установлен общий по всем областям данных отбор, то неважно, в какой области данных неправильное значение
					//  отбора - удалить надо по всем областям и всем пользователям.
					НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейПользовательские.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
						НаборЗаписей.Отбор["КатегорияНовостей"].Установить(Выборка.КатегорияНовостей, Истина);
						НаборЗаписей.Отбор["ЗначениеКатегорииНовостей"].Установить(Выборка.ЗначениеКатегорииНовостей, Истина);
					НаборЗаписей.Записать(Истина); // Очистить набор по всем пользователям и всем областям данных.
				КонецЦикла;
			КонецЕсли;

			Если НЕ РезультатыЗапроса[3].Пустой() Тогда // Общий (для области данных).
				Выборка = РезультатыЗапроса[3].Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					// Если установлен отбор по области данных, то удалить неправильное значение отбора надо по этой области
					//  и всем пользователям.
					НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейПользовательские.СоздатьНаборЗаписей();
						// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
						Если РазделениеВключено
								// АдминистраторСистемы или фоновое задание (пустой пользователь).
								И СеансЗапущенБезРазделителей
								// АдминистраторСистемы или фоновое задание (пустой пользователь) НЕ вошли в область данных.
								И НЕ ДоступноИспользованиеРазделенныхДанных Тогда
							НаборЗаписей.Отбор["ОбластьДанныхВспомогательныеДанные"].Установить(Выборка.ОбластьДанныхВспомогательныеДанные, Истина);
						КонецЕсли;
						НаборЗаписей.Отбор["ЛентаНовостей"].Установить(Выборка.ЛентаНовостей, Истина);
						НаборЗаписей.Отбор["КатегорияНовостей"].Установить(Выборка.КатегорияНовостей, Истина);
						НаборЗаписей.Отбор["ЗначениеКатегорииНовостей"].Установить(Выборка.ЗначениеКатегорииНовостей, Истина);
					НаборЗаписей.Записать(Истина); // Очистить набор по всем пользователям.
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;

	ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		0,
		"",
		Неопределено);

#КонецОбласти

#КонецОбласти

#Область Оптимизация_ЛишниеКатегорииВНовостях

	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ЛишниеКатегорииВНовостях", // Идентификатор.
		НСтр("ru='Оптимизация отборов по новостям / Удаление лишних категорий в новостях'"));

		// 4. Категории в новостях, которых нет в списке доступных в ленте новостей.
		// Новости на клиенте не должны отличаться от новостей в новостном центре.
		// Возможна ситуация, когда новость уже загружена, а лента новостей не обновлена
		//  (а в ленте новостей добавилась новая доступная категория). И новая категория из новости будет удалена.
		// Поэтому категории в уже загруженных новостях не трогать - они будут "отрезаться"
		//  в запросе при фильтрации по категориям.
		// Тем более, в случае изменения новости на клиенте, она останется измененной до тех пор,
		//  пока ее не опубликуют снова в Новостном центре (т.е. с большой вероятностью останется измененной навсегда).

	ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		0,
		"",
		Неопределено);

#КонецОбласти

#КонецОбласти

#Область Завершение

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ОптимизацияОтборовПоНовостям'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Оптимизация отборов по новостям'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Расширенный"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

#КонецОбласти

КонецПроцедуры

// Функция возвращает структуру с количеством настроенных пользовательских, административных (общих)
//  и общих для области данных отборов.
// Если пользовательские отборы не заданы, то необходимо проверять только административные отборы.
// Если административные (общие) отборы не заданы, то можно показывать все новости.
// Это позволит оптимизировать быстродействие запросы выборки новостей (не накладывая лишних условий).
// В количество отборов не попадают отборы по Продукту, Версии Продукта и Версии платформы,
//  т.к. по ним есть отдельный регистр сведений.
// При вызове из неразделенного сеанса в модели сервиса КоличествоПользовательскихОтборов будет пустым.
// ////! Значения КоличествоОбщихОтборов, КоличествоДляОбластиДанныхОтборов пока не используются.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - (необязательное) Пользователь,
//                 по которому необходимо проверить пользовательский отбор.
//                 Если не задано, то текущий пользователь.
//
// Возвращаемое значение:
//   Структура - Структура с ключами "КоличествоОбщихОтборов", "КоличествоДляОбластиДанныхОтборов",
//                 "КоличествоПользовательскихОтборов".
//
Функция КоличествоНастроенныхОтборов(Пользователь = Неопределено)

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если включено разделение данных, и мы зашли в неразделенном сеансе,
		//  то нельзя устанавливать пользовательские свойства новости.
		// Зашли в конфигурацию под пользователем без разделения (и не вошли в область данных).
		Если ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() Тогда
			ПолучитьТекущегоПользователя = Ложь;
		Иначе
			ПолучитьТекущегоПользователя = Истина;
		КонецЕсли;
	Иначе
		ПолучитьТекущегоПользователя = Истина;
	КонецЕсли;

	Если ПолучитьТекущегоПользователя = Истина Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	Иначе
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;

	Результат = Новый Структура("КоличествоОбщихОтборов, КоличествоДляОбластиДанныхОтборов, КоличествоПользовательскихОтборов",
		0, 0, 0);

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|// Общие отборы.
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК КоличествоОбщихОтборов
		|ИЗ
		|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК Рег
		|ГДЕ
		|	Рег.КатегорияНовостей <> &КатегорияПродукт
		|	И Рег.КатегорияНовостей <> &КатегорияВерсияПродукта
		|	И Рег.КатегорияНовостей <> &КатегорияВерсияПлатформы
		|;
		|
		|// Общие для области данных отборы.
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК КоличествоДляОбластиДанныхОтборов
		|ИЗ
		|	РегистрСведений.ОтборыПоЛентамНовостейДляОбластиДанных КАК Рег
		|ГДЕ
		|	Рег.КатегорияНовостей <> &КатегорияПродукт
		|	И Рег.КатегорияНовостей <> &КатегорияВерсияПродукта
		|	И Рег.КатегорияНовостей <> &КатегорияВерсияПлатформы
		|;
		|
		|// Пользовательские отборы.
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК КоличествоПользовательскихОтборов
		|ИЗ
		|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК Рег
		|ГДЕ
		|	Рег.Пользователь = &Пользователь
		|	И Рег.КатегорияНовостей <> &КатегорияПродукт
		|	И Рег.КатегорияНовостей <> &КатегорияВерсияПродукта
		|	И Рег.КатегорияНовостей <> &КатегорияВерсияПлатформы
		|";

	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	// Вне зависимости, найдутся ли такие категории или нет, поместить их в параметры запроса.
	Запрос.УстановитьПараметр("КатегорияПродукт",         ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("Product"));
	Запрос.УстановитьПараметр("КатегорияВерсияПродукта",  ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ProductVersion"));
	Запрос.УстановитьПараметр("КатегорияВерсияПлатформы", ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("PlatformVersion"));

	РезультатыЗапроса = Запрос.ВыполнитьПакет(); // КоличествоНастроенныхОтборов.

	Если НЕ РезультатыЗапроса[0].Пустой() Тогда
		Выборка = РезультатыЗапроса[0].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Результат.Вставить("КоличествоОбщихОтборов", Выборка.КоличествоОбщихОтборов);
			Прервать;
		КонецЦикла;
	КонецЕсли;

	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		Выборка = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Результат.Вставить("КоличествоДляОбластиДанныхОтборов", Выборка.КоличествоДляОбластиДанныхОтборов);
			Прервать;
		КонецЦикла;
	КонецЕсли;

	Если НЕ РезультатыЗапроса[2].Пустой() Тогда
		Выборка = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Результат.Вставить("КоличествоПользовательскихОтборов", Выборка.КоличествоПользовательскихОтборов);
			Прервать;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура сбрасывает все настройки всех пользователей при повторном получении (перепубликации) новости.
// В случае работы в неразделенном режиме  - для всех пользователей.
// В случае работы в разделенном режиме - для всех пользователей всех областей данных.
//
// Параметры:
//  НовостьСсылка - СправочникСсылка.Новости - Ссылка на новость.
//
Процедура СбросСостоянияНовостиДляВсехПользователей(НовостьСсылка) Экспорт

	УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	&МетаВыбрать_ПолеДляМоделиСервиса,
			|	Рег.Пользователь                       КАК Пользователь,
			|	Рег.Новость                            КАК Новость,
			|	Рег.Прочтена                           КАК Прочтена,
			|	Рег.Пометка                            КАК Пометка,
			|	Рег.ОповещениеВключено                 КАК ОповещениеВключено,
			|	Рег.ДатаНачалаОповещения               КАК ДатаНачалаОповещения,
			|	Рег.УдаленаИзСпискаНовостей            КАК УдаленаИзСпискаНовостей
			|ИЗ
			|	РегистрСведений.СостоянияНовостей КАК Рег
			|ГДЕ
			|	Рег.Новость = &Новость
			|УПОРЯДОЧИТЬ ПО
			|	&МетаУпорядочить_ПолеДляМоделиСервиса,
			|	Рег.Новость,
			|	Рег.Пользователь
			|";
		Запрос.УстановитьПараметр("Новость", НовостьСсылка);

		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "Рег.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУпорядочить_ПолеДляМоделиСервиса,", "Рег.ОбластьДанныхВспомогательныеДанные,");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "0 КАК ОбластьДанныхВспомогательныеДанные,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУпорядочить_ПолеДляМоделиСервиса,", "ОбластьДанныхВспомогательныеДанные,");
		КонецЕсли;

		Результат = Запрос.Выполнить(); // СбросСостоянияНовостиДляВсехПользователей()
		Если НЕ Результат.Пустой() Тогда
			// Обработка записей.
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.СледующийПоЗначениюПоля("ОбластьДанныхВспомогательныеДанные") Цикл
				// В области данных для всех пользователей сбросить настройки.
				Пока Выборка.СледующийПоЗначениюПоля("Новость") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("Пользователь") Цикл
						Если (Выборка.Прочтена <> Ложь)
								ИЛИ (Выборка.ОповещениеВключено <> Истина)
								ИЛИ (Выборка.УдаленаИзСпискаНовостей <> Ложь) Тогда
							Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
							ЗаполнитьЗначенияСвойств(Запись, Выборка);
							Запись.Прочтена                = Ложь;
							Запись.ОповещениеВключено      = Истина;
							Запись.УдаленаИзСпискаНовостей = Ложь;
							Запись.Записать(Истина);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;

КонецПроцедуры

// Процедура анализирует регистр сведений ДатыЗагрузкиПоследнихНовостей, и если по ленте новостей были проблемы
//  с получением новостей, то в этой ленте новостей будет создана специальная новость с предложением
//  отключить ленту новостей из автоматического обновления, чтобы не генерировать ненужный трафик или не заставлять
//  сервер зависать при обращении на несуществующий адрес.
// Новость о ошибке имеет фиксированный УИН - 6588f3f9-d569-478f-a370-7cd75d833966.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура НайтиИОбработатьНеактивныеЛентыНовостей(КонтекстВыполнения = Неопределено) Экспорт

	Перем РезультатВыполнения, РезультатВыполнения_ЛентаНовостей;

	НаименованиеПроцедурыФункции = "НайтиИОбработатьНеактивныеЛентыНовостей"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Поиск неактивных лент новостей'"));

		УстановитьПривилегированныйРежим(Истина);

			РезультатВыполнения = "";

			// Неактивной считается лента новостей, по которой накопилось > 10 неудачных попыток получения файла новостей
			//  и последнее успешное получение было > суток назад.
			// Неотключаемые ленты новостей считаем всегда активными - в них новости и должны появляться редко
			//  (например, лента новостей "Важные новости"), а также у них все равно нельзя поменять частоту получения новостей.
			// Ленты новостей, загруженные с серверов 1С, также могут редко обновляться. Если их отключат, то сделают
			//  это на сервере Новостного центра. Также их нельзя пометить на удаление. Поэтому их тоже считаем всегда активными.
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Рег.ЛентаНовостей                        КАК ЛентаНовостей,
				|	Рег.ЛентаНовостей.Протокол               КАК ЛентаНовостейПротокол,
				|	Рег.ЛентаНовостей.Сайт                   КАК ЛентаНовостейСайт,
				|	Рег.ЛентаНовостей.ИмяФайла               КАК ЛентаНовостейИмяФайла,
				|	Рег.ЛентаНовостей.ЧастотаОбновления      КАК ЛентаНовостейЧастотаОбновления,
				|	Рег.ДатаЗагрузкиПоследнихНовостей        КАК ДатаЗагрузкиПоследнихНовостей,
				|	Рег.КоличествоНеудачПриЗагрузкеНовостей  КАК КоличествоНеудачПриЗагрузкеНовостей,
				|	Рег.ДатаПоследнейПопыткиЗагрузкиНовостей КАК ДатаПоследнейПопыткиЗагрузкиНовостей,
				|	ВЫБОР
				|		КОГДА (Рег.КоличествоНеудачПриЗагрузкеНовостей > 10)
				|				И (Рег.ДатаЗагрузкиПоследнихНовостей < &СуткиНазад)
				|				И (Рег.ЛентаНовостей.ОбязательныйКанал = ЛОЖЬ)
				|				И (Рег.ЛентаНовостей.ЗагруженоССервера = ЛОЖЬ) ТОГДА
				|			ЛОЖЬ
				|		ИНАЧЕ
				|			ИСТИНА
				|	КОНЕЦ                                    КАК ЛентаНовостейАктивна
				|ИЗ
				|	РегистрСведений.ДатыЗагрузкиПоследнихНовостей КАК Рег
				|ГДЕ
				|	Рег.ЛентаНовостей.ПометкаУдаления = ЛОЖЬ // Помеченные на удаление и так не обновляются
				|	И Рег.ЛентаНовостей.ЧастотаОбновления > 0 // Частота обновления - НЕ вручную
				|";
			Запрос.УстановитьПараметр("СуткиНазад", ТекущаяУниверсальнаяДата() - 1*24*60*60);

			Результат = Запрос.Выполнить(); // НайтиИОбработатьНеактивныеЛентыНовостей. // АПК:1328 Конкурентная работа маловероятна.
			Если НЕ Результат.Пустой() Тогда

				ОписаниеРезультата = НСтр("ru='Запрос выполнен.'") + Символы.ПС;

				Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					// Обновлять только вручную(0), Редко (один раз в день)(1), Часто (каждый час)(2),
					//   Очень часто (каждые 15 минут)(3), Каждую минуту(4).
					Если Выборка.ЛентаНовостейЧастотаОбновления = 0 Тогда
						ЛокальнаяЧастотаОбновления = НСтр("ru='вручную (0)'");
					ИначеЕсли Выборка.ЛентаНовостейЧастотаОбновления = 1 Тогда
						ЛокальнаяЧастотаОбновления = НСтр("ru='один раз в день (1)'");
					ИначеЕсли Выборка.ЛентаНовостейЧастотаОбновления = 2 Тогда
						ЛокальнаяЧастотаОбновления = НСтр("ru='каждый час (2)'");
					ИначеЕсли Выборка.ЛентаНовостейЧастотаОбновления = 3 Тогда
						ЛокальнаяЧастотаОбновления = НСтр("ru='каждые 15 минут (3)'");
					ИначеЕсли Выборка.ЛентаНовостейЧастотаОбновления = 4 Тогда
						ЛокальнаяЧастотаОбновления = НСтр("ru='каждую минуту (4)'");
					Иначе
						ЛокальнаяЧастотаОбновления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='неопределено (%1)'"),
							Строка(Выборка.ЛентаНовостейЧастотаОбновления));
					КонецЕсли;

					РезультатВыполнения_ЛентаНовостей = НСтр("ru='Лента новостей %ЛентаНовостей%, частота обновления ленты новостей: %ЧастотаОбновления%, дата последней успешной загрузки: %ДатаЗагрузкиПоследнихНовостей%, неудач: %КоличествоНеудачПриЗагрузкеНовостей%, последняя попытка загрузки: %ДатаПоследнейПопыткиЗагрузкиНовостей%. %Действие%'");
					РезультатВыполнения_ЛентаНовостей = СтрЗаменить(
						РезультатВыполнения_ЛентаНовостей,
						"%ЛентаНовостей%",
						Выборка.ЛентаНовостей);
					РезультатВыполнения_ЛентаНовостей = СтрЗаменить(
						РезультатВыполнения_ЛентаНовостей,
						"%ДатаЗагрузкиПоследнихНовостей%",
						?(Выборка.ДатаЗагрузкиПоследнихНовостей = '00010101',
							НСтр("ru='(никогда)'"),
							Формат(МестноеВремя(Выборка.ДатаЗагрузкиПоследнихНовостей),"ДЛФ=DT")));
					РезультатВыполнения_ЛентаНовостей = СтрЗаменить(
						РезультатВыполнения_ЛентаНовостей,
						"%КоличествоНеудачПриЗагрузкеНовостей%",
						Выборка.КоличествоНеудачПриЗагрузкеНовостей);
					РезультатВыполнения_ЛентаНовостей = СтрЗаменить(
						РезультатВыполнения_ЛентаНовостей,
						"%ДатаПоследнейПопыткиЗагрузкиНовостей%",
						Формат(МестноеВремя(Выборка.ДатаПоследнейПопыткиЗагрузкиНовостей),"ДЛФ=DT"));
					РезультатВыполнения_ЛентаНовостей = СтрЗаменить(
						РезультатВыполнения_ЛентаНовостей,
						"%ЧастотаОбновления%",
						ЛокальнаяЧастотаОбновления);

					// Для активной ленты новостей (вдруг "заработала") - удалить новость о неактивности.
					// Для НЕактивной ленты новостей - создать / обновить новость о неактивности.
					СтруктураНовости = ОбработкаНовостейПовтИсп.ПолучитьСсылкуНаНовость(
						Выборка.ЛентаНовостей,
						"6588f3f9-d569-478f-a370-7cd75d833966");
					Если Выборка.ЛентаНовостейАктивна = Истина Тогда
						// Найти новость. Если она есть - пометить на удаление.
						Если СтруктураНовости.Ссылка.Пустая() Тогда
							// Новости и нет - ничего делать не надо.
							РезультатВыполнения_ЛентаНовостей = СтрЗаменить(РезультатВыполнения_ЛентаНовостей, "%Действие%", НСтр("ru='Лента новостей активна, новости о неактивности нет'"));
						ИначеЕсли СтруктураНовости.ПометкаУдаления = Истина Тогда
							// Новость была создана, но сейчас помечена на удаление - ничего делать не надо.
							РезультатВыполнения_ЛентаНовостей = СтрЗаменить(РезультатВыполнения_ЛентаНовостей, "%Действие%", НСтр("ru='Лента новостей активна, новость о неактивности уже была помечена на удаление'"));
						Иначе
							// Пометить найденную новость на удаление.
							НовостьОбъект = СтруктураНовости.Ссылка.ПолучитьОбъект();
							НовостьОбъект.УстановитьПометкуУдаления(Истина);
							РезультатВыполнения_ЛентаНовостей = СтрЗаменить(РезультатВыполнения_ЛентаНовостей, "%Действие%", НСтр("ru='Лента новостей активна, новость о неактивности будет помечена на удаление'"));
						КонецЕсли;
					Иначе
						// Найти новость и обновить. Если ее нет - создать и заполнить.
						Если СтруктураНовости.Ссылка.Пустая() Тогда
							НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
							РезультатВыполнения_ЛентаНовостей = СтрЗаменить(РезультатВыполнения_ЛентаНовостей, "%Действие%", НСтр("ru='Лента новостей НЕактивна, новость о неактивности будет создана'"));
						Иначе
							НовостьОбъект = СтруктураНовости.Ссылка.ПолучитьОбъект();
							РезультатВыполнения_ЛентаНовостей = СтрЗаменить(РезультатВыполнения_ЛентаНовостей, "%Действие%", НСтр("ru='Лента новостей НЕактивна, новость о неактивности будет обновлена'"));
						КонецЕсли;

						ОписаниеЛентыНовостей = Новый Структура;
							ОписаниеЛентыНовостей.Вставить("Ссылка", Выборка.ЛентаНовостей);
							ОписаниеЛентыНовостей.Вставить("Протокол", Выборка.ЛентаНовостейПротокол);
							ОписаниеЛентыНовостей.Вставить("Сайт", Выборка.ЛентаНовостейСайт);
							ОписаниеЛентыНовостей.Вставить("ИмяФайла", Выборка.ЛентаНовостейИмяФайла);

						ТекстНовости = "Невозможно получить новости по ленте новостей %ЛентаНовостей%<br/>
							|Адрес (URL), по которому получаются новости: <a href=""%URL%"" title=""Нажмите для открытия списка новостей в браузере"">%URL%</a><br/>
							|<br/>
							|Последнее удачное получение новостей: %ДатаЗагрузкиПоследнихНовостей%<br/>
							|С тех пор было %КоличествоНеудачПриЗагрузкеНовостей% неудачных попыток (частота обновления ленты новостей: %ЧастотаОбновления%), последняя такая попытка была: %ДатаПоследнейПопыткиЗагрузкиНовостей%<br/>
							|<br/>
							|<!-- Текст для администраторов --><br/>
							|";
						ТекстНовости = СтрЗаменить(ТекстНовости, "%ЛентаНовостей%", Выборка.ЛентаНовостей);
						ТекстНовости = СтрЗаменить(ТекстНовости,
							"%ДатаЗагрузкиПоследнихНовостей%",
							Формат(МестноеВремя(Выборка.ДатаЗагрузкиПоследнихНовостей),"ДЛФ=DT"));
						ТекстНовости = СтрЗаменить(ТекстНовости, "%КоличествоНеудачПриЗагрузкеНовостей%", Выборка.КоличествоНеудачПриЗагрузкеНовостей);
						ТекстНовости = СтрЗаменить(ТекстНовости, "%ЧастотаОбновления%", ЛокальнаяЧастотаОбновления);
						ТекстНовости = СтрЗаменить(ТекстНовости,
							"%ДатаПоследнейПопыткиЗагрузкиНовостей%",
							Формат(МестноеВремя(Выборка.ДатаПоследнейПопыткиЗагрузкиНовостей),"ДЛФ=DT"));
						ТекстНовости = СтрЗаменить(ТекстНовости,
							"%URL%",
							ОбработкаНовостейПовтИсп.ПолучитьАдресДляПолученияНовостей(
								ОписаниеЛентыНовостей,
								Выборка.ДатаЗагрузкиПоследнихНовостей,
								?(Выборка.КоличествоНеудачПриЗагрузкеНовостей = 0, Выборка.ДатаПоследнейПопыткиЗагрузкиНовостей, '00010101')));

						НовостьОбъект.ПометкаУдаления                    = Ложь;
						НовостьОбъект.Наименование                       = НСтр("ru='Лента новостей неактивна'");
						НовостьОбъект.Подзаголовок                       = НСтр("ru='Лента новостей неактивна. Рекомендуется исключить ее из автообновления'");
						НовостьОбъект.ЛентаНовостей                      = Выборка.ЛентаНовостей;
						НовостьОбъект.УИННовости                         = "6588f3f9-d569-478f-a370-7cd75d833966";
						НовостьОбъект.ДатаПубликации                     = ТекущаяУниверсальнаяДата();
						НовостьОбъект.СкрыватьВОбщемСпискеНовостей       = Ложь;
						НовостьОбъект.ДатаЗавершения                     = ТекущаяУниверсальнаяДата() + 1*24*60*60; // Через 1 день
						НовостьОбъект.ТекстНовостиДляВнешнихИсточников   = "";
						НовостьОбъект.СсылкаНаПолныйТекстНовости         = "";
						НовостьОбъект.Важность                           = 0; // Обычная
						НовостьОбъект.ДатаСбросаВажности                 = '00010101';
						НовостьОбъект.АвтоСбросНапоминанияПриПрочтении   = Истина;
						НовостьОбъект.ПриОткрытииСразуПереходитьПоСсылке = Ложь;
						НовостьОбъект.ТекстНовости                       = ТекстНовости;
						НовостьОбъект.Действия.Очистить();
						НовостьОбъект.ПараметрыДействий.Очистить();
						НовостьОбъект.ПривязкаКМетаданным.Очистить();
						НовостьОбъект.БинарныеДанные.Очистить();
						Отказ = Ложь;
						ОбработкаНовостейПереопределяемый.ПереопределитьДействияКогдаНайденаНеактивнаяЛентаНовостей(Выборка.ЛентаНовостей, НовостьОбъект, Отказ);
						Если Отказ <> Истина Тогда
							Попытка
								НовостьОбъект.Записать(); // АПК:1327 Конкурентная работа маловероятна.
							Исключение
								ИнформацияОбОшибке = ИнформацияОбОшибке();
								ТекстСообщения = НСтр("ru='Произошла ошибка при создании / обновлении новости о неактивности ленты новостей %ЛентаНовостей%
									|Подробно:
									|%ИнформацияОбОшибке%'")
									+ Символы.ПС;
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", Выборка.ЛентаНовостей);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								РезультатВыполнения_ЛентаНовостей = РезультатВыполнения_ЛентаНовостей + Символы.ПС + ТекстСообщения;
							КонецПопытки;
						Иначе
							РезультатВыполнения_ЛентаНовостей = РезультатВыполнения_ЛентаНовостей + Символы.ПС + НСтр("ru='Отменено создание / изменение новости про отсутствие активности для ленты новостей'");
						КонецЕсли;
					КонецЕсли;
					РезультатВыполнения = РезультатВыполнения + РезультатВыполнения_ЛентаНовостей + Символы.ПС;
				КонецЦикла;

			Иначе
				ОписаниеРезультата = НСтр("ru='Запрос пустой.'") + Символы.ПС;
			КонецЕсли;

			ТекстСообщения = НСтр("ru='Окончание проверки лент новостей на актуальность.
				|Лента новостей считается НЕактуальной, если
				| - по ней было более 10 неудачных попыток получения новостей,
				| - последняя удачная попытка была более суток назад,
				| - это не обязательная лента новостей,
				| - это не загруженная с серверов 1С лента новостей.
				|
				|Результат выполнения:
				|%РезультатВыполнения%'")
				+ Символы.ПС;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатВыполнения%", РезультатВыполнения);
			ОписаниеРезультата = ОписаниеРезультата
				+ Символы.ПС
				+ ТекстСообщения;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. НайтиИОбработатьНеактивныеЛентыНовостей'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Поиск неактивных лент новостей'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура-обработчик события перед записью элемента справочника Пользователи.
// Определяет разные параметры:
//  - что записывается новый пользователь;
//  - реквизиты пользователя ДО записи (Недействителен, Служебный, Подготовлен, ИдентификаторПользователяИБ, ИдентификаторПользователяСервиса);
// и передает эту информацию дальше, в подписку на событие "ПриЗаписи".
//
// Параметры:
//  ПользовательОбъект - СправочникОбъект.Пользователи - записываемый объект;
//  Отказ              - Булево - установить в Истина, если надо отменить запись.
//
Процедура ПередЗаписьюПользователя(ПользовательОбъект, Отказ) Экспорт

	// Если происходит загрузка данных, то выйти из обработчика.
	Если ПользовательОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПользовательОбъект.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ПользовательОбъект.ЭтоНовый());
	Если ПользовательОбъект.ЭтоНовый() Тогда
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_Недействителен", ПользовательОбъект.Недействителен);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_Служебный", ПользовательОбъект.Служебный);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_Подготовлен", ПользовательОбъект.Подготовлен);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_ИдентификаторПользователяИБ", ПользовательОбъект.ИдентификаторПользователяИБ);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_ИдентификаторПользователяСервиса", ПользовательОбъект.ИдентификаторПользователяСервиса);
	Иначе
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_Недействителен", ПользовательОбъект.Ссылка.Недействителен);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_Служебный", ПользовательОбъект.Ссылка.Служебный);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_Подготовлен", ПользовательОбъект.Ссылка.Подготовлен);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_ИдентификаторПользователяИБ", ПользовательОбъект.Ссылка.ИдентификаторПользователяИБ);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗначениеПередЗаписью_ИдентификаторПользователяСервиса", ПользовательОбъект.Ссылка.ИдентификаторПользователяСервиса);
	КонецЕсли;

КонецПроцедуры

// Процедура-обработчик события при записи элемента справочника Пользователи.
//
// Параметры:
//  ПользовательОбъект - СправочникОбъект.Пользователи - записываемый объект;
//  Отказ              - Булево - установить в Истина, если надо отменить запись.
//
Процедура ПриЗаписиПользователя(ПользовательОбъект, Отказ) Экспорт

	// Если происходит загрузка данных, то выйти из обработчика.
	Если ПользовательОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ЭтоНовыйПользователь = Ложь;

	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.Пользователи") Тогда

		Если ТипЗнч(ПользовательОбъект.ДополнительныеСвойства) = ТипСтруктура Тогда
			Если ПользовательОбъект.ДополнительныеСвойства.Свойство("ЭтоНовыйОбъект")
					И ПользовательОбъект.ДополнительныеСвойства.ЭтоНовыйОбъект = Истина Тогда
				ЭтоНовыйПользователь = Истина;
			КонецЕсли;
		КонецЕсли;

		// Выполнить какие-то специфические действия при записи пользователя.
		ОбработкаНовостейПереопределяемый.ОбработатьЗаписьПользователя(ПользовательОбъект, ЭтоНовыйПользователь, Отказ);

	КонецЕсли;

КонецПроцедуры

// Процедура включает / отключает регламентное задание.
//
// Параметры:
//  Использовать - Булево - Ложь - отключить использование регламентного задания, Истина - включить, иначе - без изменений.
//
Процедура ИзменитьИспользованиеРегламентныхЗаданий(Использовать) Экспорт

	ЕстьОшибка     = Ложь;
	ТекстСообщения = "";

	УстановитьПривилегированныйРежим(Истина);

	ТекущееРегламентноеЗадание = ПолучитьРегламентноеЗаданиеВсеОбновленияНовостей("ОбработкаНовостей.ИзменитьИспользованиеРегламентныхЗаданий");
	Если ТекущееРегламентноеЗадание = Неопределено Тогда
		ЕстьОшибка = Истина;
		ТекстСообщения = НСтр("ru='Не найдено предопределенное регламентное задание ВсеОбновленияНовостей.'");
	Иначе
		Записывать = Истина;
		Если Использовать = Истина Тогда
			ТекущееРегламентноеЗадание.Использование = Истина;
		ИначеЕсли Использовать = Ложь Тогда
			ТекущееРегламентноеЗадание.Использование = Ложь;
		Иначе
			Записывать = Ложь;
			ЕстьОшибка = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ОбработкаНовостей.ИзменитьИспользованиеРегламентныхЗаданий:
					|в параметре Использовать передано значение неправильного типа: %1'"),
				ТипЗнч(Использовать));
		КонецЕсли;
		Если Записывать = Истина Тогда
			ТекущееРегламентноеЗадание.Наименование = НСтр("ru='Все обновления новостей'");
			ТекущееРегламентноеЗадание.Расписание   = ПолучитьРасписаниеОбновленийНовостей(Истина);
			ТекущееРегламентноеЗадание.Записать();
		КонецЕсли;
	КонецЕсли;

	Если ЕстьОшибка = Истина Тогда
		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ИзменениеИспользованияРегламентныхЗаданий'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

КонецПроцедуры

// Необходимо предусмотреть такой интервал запуска регламентного задания,
//  чтобы это не сильно влияло на производительность системы.
// Поэтому вместо фиксированного запуска 1 раз в 5 минут предусмотреть варианты:
// - 1 раз в 5 минут, если есть активные ленты новостей с такой частотой обновления;
// - 1 раз в 15 минут, если есть активные ленты новостей с такой частотой обновления;
// - иначе 1 раз в час.
// При запуске реже, чем 1 раз в 5 минут мы понимаем, что обновление вспомогательных данных будет проходить реже,
//  зато в целом система будет работать быстрее.
//
// Параметры:
//  АвтоопределениеЧастотыЗапуска - Булево - Истина, если необходимо проанализировать частоту запуска существующих лент новостей.
//
// Возвращаемое значение:
//   РасписаниеРегламентногоЗадания - расписание запуска регламентного задания "ВсеОбновленияНовостей".
//
Функция ПолучитьРасписаниеОбновленийНовостей(АвтоопределениеЧастотыЗапуска = Ложь)

	// При первом запуске, когда классификаторы еще не загружены, мы можем не знать состава лент новостей,
	//  поэтому лучше установить интервал обновления 1 раз в 5 минут.

	Если АвтоопределениеЧастотыЗапуска = Ложь Тогда
		ИнтервалЗапускаСекунд = 5*60; // 1 раз в 5 минут.
	Иначе
		ИнтервалЗапускаСекунд = 1*60*60; // 1 раз в час.

		// Частота обновления:
		// - Обновлять только вручную = 0;
		// - Редко (один раз в день) = 1;
		// - Часто (каждый час) = 2;
		// - Очень часто (каждые 15 минут) = 3;
		// - Каждую минуту = 4.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
			|	Спр.ЧастотаОбновления КАК ЧастотаОбновления
			|ИЗ
			|	Справочник.ЛентыНовостей КАК Спр
			|ГДЕ
			|	НЕ Спр.ПометкаУдаления
			|УПОРЯДОЧИТЬ ПО
			|	ЧастотаОбновления УБЫВ
			|";

		РезультатЗапроса = Запрос.Выполнить(); // ПолучитьРасписаниеОбновленийНовостей.
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Если Выборка.Следующий() Тогда
				Если Выборка.ЧастотаОбновления = 4 Тогда
					ИнтервалЗапускаСекунд = 1*60; // 1 раз в минуту.
				ИначеЕсли Выборка.ЧастотаОбновления = 3 Тогда
					ИнтервалЗапускаСекунд = 15*60; // 1 раз в 15 минут.
				Иначе
					// Оставить 1 раз в час.
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Нет лент новостей? Оставить 1 раз в час, чтобы обновлялись классификаторы.
		КонецЕсли;

	КонецЕсли;

	МассивДнейНедели = Новый Массив;
	Для С=1 По 7 Цикл
		МассивДнейНедели.Добавить(С);
	КонецЦикла;

	МассивМесяцев = Новый Массив;
	Для С=1 По 12 Цикл
		МассивМесяцев.Добавить(С);
	КонецЦикла;

	Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ВремяНачала              = '00010101000000';
		Расписание.ВремяКонца               = '00010101000000';
		Расписание.ДатаНачала               = '00010101000000';
		Расписание.ДатаКонца                = '00010101000000';
		Расписание.ДеньВМесяце              = 0;
		Расписание.ДеньНеделиВМесяце        = 0;
		Расписание.ДетальныеРасписанияДня   = Новый Массив;
		Расписание.ДниНедели                = МассивДнейНедели;
		Расписание.ИнтервалЗавершения       = 3600; // См. комментарий ниже.
		Расписание.Месяцы                   = МассивМесяцев;
		Расписание.ПаузаПовтора             = 0;
		Расписание.ПериодНедель             = 1;
		Расписание.ПериодПовтораВТечениеДня = ИнтервалЗапускаСекунд;
		Расписание.ПериодПовтораДней        = 1;

	// Периода работы до принудительного завершения "3600 секунд" (Расписание.ИнтервалЗавершения)
	//  может оказаться недостаточно для корректного выполнения этого регламентного задания.
	// Например, следует его увеличить, если всегда загружается много новостей, или файлы новостей большого размера,
	//  или при расчете отбора новостей используются длительные операции (например, как
	//  вход и выход из области данных при работе в модели сервиса).

	Возврат Расписание;

КонецФункции

// Функция возвращает регламентное задание ВсеОбновленияНовостей, сохраненное в информационной базе.
//
// Параметры:
//  ИсточникВызова - Строка - произвольная строка для сохранения ошибок в журнале регистрации.
//
// Возвращаемое значение:
//   РегламентноеЗадание - регламентное задание "ВсеОбновленияНовостей", сохраненное в информационной базе.
//
Функция ПолучитьРегламентноеЗаданиеВсеОбновленияНовостей(ИсточникВызова)

	ТипРегламентноеЗадание = Тип("РегламентноеЗадание");

	ТекущееРегламентноеЗадание = Неопределено;

	ЕстьОшибка = Ложь;
	ТекстСообщения = "";

	Попытка
		// Вне зависимости от того, мы в коробочной версии или в модели сервиса, поиск лучше осуществлять
		//  с помощью "РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание".
		// В противном случае (при поиске через "РегламентныеЗаданияСервер.Задание") ожидается, что регламентное задание (даже неразделенное)
		//  использует механизм очередей, а если это не так (как в нашем случае), то приводит к исключению.
		ТекущееРегламентноеЗадание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей);
	Исключение
		ЕстьОшибка = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не найдено предопределенное регламентное задание ВсеОбновленияНовостей по причине:
				|%1
				|
				|Источник вызова: %2'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ИсточникВызова);
	КонецПопытки;
	Если ЕстьОшибка = Ложь Тогда
		Если ТипЗнч(ТекущееРегламентноеЗадание) <> ТипРегламентноеЗадание Тогда
			ТекущееРегламентноеЗадание = Неопределено;
			ЕстьОшибка = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найдено предопределенное регламентное задание ВсеОбновленияНовостей.
					|Источник вызова: %1'"),
				ИсточникВызова);
		КонецЕсли;
	КонецЕсли;

	Если ЕстьОшибка = Истина Тогда
		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ПолучитьРегламентноеЗаданиеВсеОбновленияНовостей'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

	Возврат ТекущееРегламентноеЗадание;

КонецФункции

// Процедура очищает у новостей признак "ТребуетсяПересчетОтборов" в регистре сведений "СвойстваНовостей".
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура СбросУНовостейПризнакаТребуетсяПересчетОтборов(КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "СбросУНовостейПризнакаТребуетсяПересчетОтборов"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;

	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Сброс у новостей признака [ТребуетсяПересчетОтборов]'"));

		Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Рег.Новость                       КАК Новость,
				|	Рег.УникальныйИдентификаторСсылки КАК УникальныйИдентификаторСсылки
				|ИЗ
				|	РегистрСведений.СвойстваНовостей КАК Рег
				|ГДЕ
				|	Рег.ТребуетсяПересчетОтборов = ИСТИНА
				|";

			РезультатЗапроса = Запрос.Выполнить(); // СбросУНовостейПризнакаТребуетсяПересчетОтборов.
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
				ВсегоСтрок = Выборка.Количество();
				ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Найдено %1 новостей для сброса признака [ТребуетсяПересчетОтборов]'"),
					ВсегоСтрок);
				Пока Выборка.Следующий() Цикл
					Запись = РегистрыСведений.СвойстваНовостей.СоздатьМенеджерЗаписи();
						Запись.Новость                       = Выборка.Новость;
						Запись.УникальныйИдентификаторСсылки = Выборка.УникальныйИдентификаторСсылки;
						Запись.ТребуетсяПересчетОтборов      = Ложь;
					Запись.Записать(Истина);
				КонецЦикла;
			КонецЕсли;

		Иначе
			ОписаниеРезультата = НСтр("ru='Работа с новостями запрещена'");
		КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		Неопределено);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. СбросУНовостейПризнакаТребуетсяПересчетОтборов'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Сброс у новостей признака [ТребуетсяПересчетОтборов]'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Расширенный"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УдалениеНовостей

// Функция подготавливает список данных для удаления.
//
// Параметры:
//  ТекущаяДатаДляРасчетов - Дата - текущая дата, относительно которой необходимо рассчитывать интервал удаляемых данных;
//  Отборы  - Структура - отборы удаляемых данных. Структура с ключами:
//             * Актуальные - если ИСТИНА, то удалять актуальные новости;
//             * Неактуальные - если ИСТИНА, то удалять НЕактуальные новости;
//             * ПомеченныеНаУдаление - если ИСТИНА, то удалять помеченные на удаление новости;
//             * СтараяВерсия - если ИСТИНА, то удалять новости для старых версий платформы или конфигурации.
//
// Возвращаемое значение:
//   Структура - Структура удаляемых данных с ключами:
//     * НовостиДляУдаления - Массив ссылок на удаляемые новости;
//     * НовостиДляУстановкиПометкиУдаления - Массив ссылок на новости, которые будут помечены на удаление;
//     * КатегорииНовостейПростыеНеобработанные - массив структур с измерениями регистра сведений КатегорииНовостейПростыеНеобработанные:
//       ** КатегорияНовостейСтрока;
//       ** ЗначениеКатегорииНовостейСтрока;
//       ** ЛентаНовостей;
//       ** УИННовости.
//     * КатегорииНовостейИнтервалыВерсийНеобработанные - массив структур с измерениями регистра сведений КатегорииНовостейИнтервалыВерсийНеобработанные:
//       ** КатегорияНовостейСтрока;
//       ** ЛентаНовостей;
//       ** УИННовости;
//       ** Продукт;
//       ** ВерсияОТ;
//       ** ВерсияДО.
//
Функция УдалениеНовостей_ПолучитьСписокДанныхДляУдаления(ТекущаяДатаДляРасчетов, Отборы)

	Результат = Новый Структура;
		Результат.Вставить("НовостиДляУдаления"                            , Новый Массив);
		Результат.Вставить("НовостиДляУстановкиПометкиУдаления"            , Новый Массив);
		Результат.Вставить("КатегорииНовостейПростыеНеобработанные"        , Новый Массив);
		Результат.Вставить("КатегорииНовостейИнтервалыВерсийНеобработанные", Новый Массив);

	// 1. Подготовить параметры.
	// 1.1. Даты.
	НастройкиАвтоудаленияНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиАвтоудаленияНовостей",
		"");
	Если (НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_Актуальные_Месяцев = 0) ИЛИ (Отборы.Актуальные = Ложь) Тогда
		УдалятьАктуальныеОт = '00010101';
	Иначе
		УдалятьАктуальныеОт = ДобавитьМесяц(ТекущаяДатаДляРасчетов, -НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_Актуальные_Месяцев);
	КонецЕсли;
	Если (НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_Неактуальные_Дней = 0) ИЛИ (Отборы.Неактуальные = Ложь) Тогда
		УдалятьНеактуальныеОт = '00010101';
	Иначе
		УдалятьНеактуальныеОт = ТекущаяДатаДляРасчетов - НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_Неактуальные_Дней * 24 * 60 * 60;
	КонецЕсли;
	Если (НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_ПомеченныеНаУдаление_Дней = 0) ИЛИ (Отборы.ПомеченныеНаУдаление = Ложь) Тогда
		УдалятьПомеченныеНаУдалениеОт = '00010101';
	Иначе
		УдалятьПомеченныеНаУдалениеОт = ТекущаяДатаДляРасчетов - НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_ПомеченныеНаУдаление_Дней * 24 * 60 * 60;
	КонецЕсли;
	Если (НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_СтараяВерсия_Дней = 0) ИЛИ (Отборы.СтараяВерсия = Ложь) Тогда
		УдалятьСтарыеВерсииОт = '00010101';
	Иначе
		УдалятьСтарыеВерсииОт = ТекущаяДатаДляРасчетов - НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_СтараяВерсия_Дней * 24 * 60 * 60;
	КонецЕсли;

	// 1.2. Текущая версия.
	// Значения предопределенных категорий.
	ИмяКонфигурации = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ИмяКонфигурации"); // Только имя продукта
	ВерсияПлатформы = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПлатформы"); // Только полная версия платформы
	ВерсияПродукта  = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПродукта"); // Только полная версия продукта

	// Запрос к новостям.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|// 0. Старые версии платформы.
		|// В новости может быть несколько интервалов версий.
		|//  - Если есть хотя бы один подходящий интервал (включающая текущую версию или будущие версии) - оставить новость.
		|//  - Если все интервалы для старых версий - удалить новость.
		|ВЫБРАТЬ
		|	Рег.Новость КАК Новость,
		|	МАКСИМУМ(
		|		ВЫБОР
		|			КОГДА Рег.ВерсияДО < &ТекущаяВерсияПлатформы
		|				ТОГДА 1 // Это старая версия
		|			ИНАЧЕ 2     // Это подходщая версия
		|		КОНЕЦ
		|	)           КАК ЕстьСтараяВерсия
		|ПОМЕСТИТЬ ВТ_Новости_СтарыеВерсииПлатформы
		|ИЗ
		|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК Рег
		|ГДЕ
		|	Рег.Новость.ПометкаУдаления = ЛОЖЬ
		|	И Рег.КатегорияНовостей.Код = ""PlatformVersion""
		|	И Рег.Продукт = ""Platform""
		|
		|СГРУППИРОВАТЬ ПО
		|	Рег.Новость
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(
		|		ВЫБОР
		|			КОГДА Рег.ВерсияДО < &ТекущаяВерсияПлатформы
		|				ТОГДА 1 // Это старая версия
		|			ИНАЧЕ 2     // Это подходщая версия
		|		КОНЕЦ
		|	) = 1 // Все версии - только старые
		|;
		|
		|// 1. Старые версии конфигурации.
		|// В новости может быть несколько интервалов версий.
		|//  - Если есть хотя бы один подходящий интервал (включающая текущую версию или будущие версии) - оставить новость.
		|//  - Если все интервалы для старых версий - удалить новость.
		|ВЫБРАТЬ
		|	Рег.Новость КАК Новость,
		|	МАКСИМУМ(
		|		ВЫБОР
		|			КОГДА Рег.ВерсияДО < &ТекущаяВерсияПродукта
		|				ТОГДА 1 // Это старая версия
		|			ИНАЧЕ 2     // Это подходщая версия
		|		КОНЕЦ
		|	)           КАК ЕстьСтараяВерсия
		|ПОМЕСТИТЬ ВТ_Новости_СтарыеВерсииПродукта
		|ИЗ
		|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК Рег
		|ГДЕ
		|	Рег.Новость.ПометкаУдаления = ЛОЖЬ
		|	И Рег.КатегорияНовостей.Код = ""ProductVersion""
		|	И Рег.Продукт = &ИмяКонфигурации
		|
		|СГРУППИРОВАТЬ ПО
		|	Рег.Новость
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(
		|		ВЫБОР
		|			КОГДА Рег.ВерсияДО < &ТекущаяВерсияПродукта
		|				ТОГДА 1 // Это старая версия
		|			ИНАЧЕ 2     // Это подходщая версия
		|		КОНЕЦ
		|	) = 1 // Все версии - только старые
		|;
		|
		|// 2. Все новости для удаления.
		|// Помеченные на удаление новости.
		|ВЫБРАТЬ
		|	""Удаление помеченных"" КАК Причина,
		|	Спр.Ссылка              КАК Новость,
		|	Спр.ЛентаНовостей       КАК ЛентаНовостей,
		|	Спр.УИННовости          КАК УИННовости
		|ПОМЕСТИТЬ ВТ_НовостиДляУдаления
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.ПометкаУдаления = ИСТИНА
		|		И Спр.ДатаПубликации <= &УдалятьПомеченныеНаУдалениеОт
		|;
		|
		|// 3. Все новости для установки пометки удаления.
		|// Неактуальные новости.
		|ВЫБРАТЬ
		|	""Неактуальная""  КАК Причина,
		|	Спр.Ссылка        КАК Новость,
		|	Спр.ЛентаНовостей КАК ЛентаНовостей,
		|	Спр.УИННовости    КАК УИННовости
		|ПОМЕСТИТЬ ВТ_НовостиДляУстановкиПометкиУдаления
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.ПометкаУдаления = ЛОЖЬ
		|		И Спр.ДатаЗавершения <= &УдалятьНеактуальныеОт
		|		И Спр.ДатаЗавершения > &ПустаяДата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Актуальные новости.
		|ВЫБРАТЬ
		|	""Актуальная""    КАК Причина,
		|	Спр.Ссылка        КАК Новость,
		|	Спр.ЛентаНовостей КАК ЛентаНовостей,
		|	Спр.УИННовости    КАК УИННовости
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.ПометкаУдаления = ЛОЖЬ
		|		И Спр.ДатаПубликации < &УдалятьАктуальныеОт
		|		И Спр.ДатаЗавершения = &ПустаяДата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Старые версии платформы.
		|ВЫБРАТЬ
		|	""Старая версия платформы""                            КАК Причина,
		|	ВТ_Новости_СтарыеВерсииПлатформы.Новость               КАК Новость,
		|	ВТ_Новости_СтарыеВерсииПлатформы.Новость.ЛентаНовостей КАК ЛентаНовостей,
		|	ВТ_Новости_СтарыеВерсииПлатформы.Новость.УИННовости    КАК УИННовости
		|ИЗ
		|	ВТ_Новости_СтарыеВерсииПлатформы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Старые версии продукта.
		|ВЫБРАТЬ
		|	""Старая версия продукта""                            КАК Причина,
		|	ВТ_Новости_СтарыеВерсииПродукта.Новость               КАК Новость,
		|	ВТ_Новости_СтарыеВерсииПродукта.Новость.ЛентаНовостей КАК ЛентаНовостей,
		|	ВТ_Новости_СтарыеВерсииПродукта.Новость.УИННовости    КАК УИННовости
		|ИЗ
		|	ВТ_Новости_СтарыеВерсииПродукта
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЛентаНовостей,
		|	УИННовости
		|;
		|
		|// 4. Основной запрос к новостям для удаления.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_НовостиДляУдаления.Новость
		|ИЗ
		|	ВТ_НовостиДляУдаления
		|;
		|
		|// 5. Основной запрос к новостям для установки пометки удаления.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_НовостиДляУстановкиПометкиУдаления.Новость
		|ИЗ
		|	ВТ_НовостиДляУстановкиПометкиУдаления
		|;
		|
		|// 6. Основной запрос к вспомогательным данным (КатегорииНовостейПростыеНеобработанные).
		|ВЫБРАТЬ
		|	Рег.КатегорияНовостейСтрока         КАК КатегорияНовостейСтрока,
		|	Рег.ЗначениеКатегорииНовостейСтрока КАК ЗначениеКатегорииНовостейСтрока,
		|	Рег.ЛентаНовостей                   КАК ЛентаНовостей,
		|	Рег.УИННовости                      КАК УИННовости
		|ИЗ
		|	ВТ_НовостиДляУдаления
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КатегорииНовостейПростыеНеобработанные КАК Рег
		|	ПО
		|		ВТ_НовостиДляУдаления.ЛентаНовостей = Рег.ЛентаНовостей
		|		И ВТ_НовостиДляУдаления.УИННовости = Рег.УИННовости
		|;
		|
		|// 7. Основной запрос к вспомогательным данным (КатегорииНовостейИнтервалыВерсийНеобработанные).
		|ВЫБРАТЬ
		|	Рег.КатегорияНовостейСтрока КАК КатегорияНовостейСтрока,
		|	Рег.ЛентаНовостей           КАК ЛентаНовостей,
		|	Рег.УИННовости              КАК УИННовости,
		|	Рег.Продукт                 КАК Продукт,
		|	Рег.ВерсияОТ                КАК ВерсияОТ,
		|	Рег.ВерсияДО                КАК ВерсияДО
		|ИЗ
		|	ВТ_НовостиДляУдаления
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КатегорииНовостейИнтервалыВерсийНеобработанные КАК Рег
		|	ПО
		|		ВТ_НовостиДляУдаления.ЛентаНовостей = Рег.ЛентаНовостей
		|		И ВТ_НовостиДляУдаления.УИННовости = Рег.УИННовости
		|;
		|
		|";
	Запрос.УстановитьПараметр("УдалятьАктуальныеОт"          , УдалятьАктуальныеОт);
	Запрос.УстановитьПараметр("УдалятьНеактуальныеОт"        , УдалятьНеактуальныеОт);
	Запрос.УстановитьПараметр("УдалятьПомеченныеНаУдалениеОт", УдалятьПомеченныеНаУдалениеОт);
	Запрос.УстановитьПараметр("УдалятьСтарыеВерсииОт"        , УдалятьСтарыеВерсииОт);
	Запрос.УстановитьПараметр("ИмяКонфигурации"              , ИмяКонфигурации);
	Запрос.УстановитьПараметр("ТекущаяВерсияПродукта"        , ВерсияПродукта);
	Запрос.УстановитьПараметр("ТекущаяВерсияПлатформы"       , ВерсияПлатформы);
	Запрос.УстановитьПараметр("ПустаяДата"                   , '00010101');

	РезультатыЗапроса = Запрос.ВыполнитьПакет(); // УдалениеНовостей_ПолучитьСписокДанныхДляУдаления.

	// Новости для удаления.
	Если НЕ РезультатыЗапроса[4].Пустой() Тогда
		МассивНовостей = РезультатыЗапроса[4].Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Новость");
		Результат.Вставить("НовостиДляУдаления", МассивНовостей);
	КонецЕсли;

	// Новости для установки пометки удаления.
	Если НЕ РезультатыЗапроса[5].Пустой() Тогда
		МассивНовостей = РезультатыЗапроса[5].Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Новость");
		Результат.Вставить("НовостиДляУстановкиПометкиУдаления", МассивНовостей);
	КонецЕсли;

	// Необработанные категории (простые) для удаляемых новостей.
	// Привязка осуществляется по УИННовости, поэтому автоматического удаления при удалении новости не произойдет.
	Если НЕ РезультатыЗапроса[6].Пустой() Тогда
		МассивЗаписей = Новый Массив;
		Выборка = РезультатыЗапроса[6].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			ОписаниеЗаписи = Новый Структура;
				ОписаниеЗаписи.Вставить("КатегорияНовостейСтрока", Выборка.КатегорияНовостейСтрока);
				ОписаниеЗаписи.Вставить("ЗначениеКатегорииНовостейСтрока", Выборка.ЗначениеКатегорииНовостейСтрока);
				ОписаниеЗаписи.Вставить("ЛентаНовостей", Выборка.ЛентаНовостей);
				ОписаниеЗаписи.Вставить("УИННовости", Выборка.УИННовости);
			МассивЗаписей.Добавить(ОписаниеЗаписи);
		КонецЦикла;
		Результат.Вставить("КатегорииНовостейПростыеНеобработанные", МассивЗаписей);
	КонецЕсли;

	// Необработанные категории (интервалы версий) для удаляемых новостей.
	// Привязка осуществляется по УИННовости, поэтому автоматического удаления при удалении новости не произойдет.
	Если НЕ РезультатыЗапроса[7].Пустой() Тогда
		МассивЗаписей = Новый Массив;
		Выборка = РезультатыЗапроса[7].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			ОписаниеЗаписи = Новый Структура;
				ОписаниеЗаписи.Вставить("КатегорияНовостейСтрока", Выборка.КатегорияНовостейСтрока);
				ОписаниеЗаписи.Вставить("ЛентаНовостей", Выборка.ЛентаНовостей);
				ОписаниеЗаписи.Вставить("УИННовости", Выборка.УИННовости);
				ОписаниеЗаписи.Вставить("Продукт", Выборка.Продукт);
				ОписаниеЗаписи.Вставить("ВерсияОТ", Выборка.ВерсияОТ);
				ОписаниеЗаписи.Вставить("ВерсияДО", Выборка.ВерсияДО);
			МассивЗаписей.Добавить(ОписаниеЗаписи);
		КонецЦикла;
		Результат.Вставить("КатегорииНовостейИнтервалыВерсийНеобработанные", МассивЗаписей);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура помечает на удаление новости со вспомогательными данными по переданному списку данных.
//
// Параметры:
//  ДанныеДляУдаления   - Структура - соответствует возвращаемому значению функции УдалениеНовостей_ПолучитьСписокДанныхДляУдаления;
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура УдалениеНовостей_ПометитьНаУдалениеДанные(ДанныеДляУдаления, КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "УдалениеНовостей_ПометитьНаУдалениеДанные"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Получение списка новостей для удаления'"));

		ТипМассив = Тип("Массив");

		УстановитьПривилегированныйРежим(Истина);

			МассивРегистровДляОчистки = Новый Массив();
				МассивРегистровДляОчистки.Добавить("ПериодическиеСвойстваНовостей");
				МассивРегистровДляОчистки.Добавить("ПривязкаНовостейКМетаданным");
				МассивРегистровДляОчистки.Добавить("РассчитанныеОтборыПоНовостям_ДляОбластиДанных");
				МассивРегистровДляОчистки.Добавить("РассчитанныеОтборыПоНовостям_Общие");
				МассивРегистровДляОчистки.Добавить("РассчитанныеОтборыПоНовостям_Пользовательские");
				МассивРегистровДляОчистки.Добавить("РассчитанныеОтборыПоНовостям_РедкоМеняющиеся");
				МассивРегистровДляОчистки.Добавить("СвойстваНовостей");
				МассивРегистровДляОчистки.Добавить("СостоянияНовостей");

			ОписаниеРезультата = "
				|%НовостиДляУдаления%
				|	%ПериодическиеСвойстваНовостей_НовостиДляУдаления%
				|	%ПривязкаНовостейКМетаданным_НовостиДляУдаления%
				|	%РассчитанныеОтборыПоНовостям_ДляОбластиДанных_НовостиДляУдаления%
				|	%РассчитанныеОтборыПоНовостям_Общие_НовостиДляУдаления%
				|	%РассчитанныеОтборыПоНовостям_Пользовательские_НовостиДляУдаления%
				|	%РассчитанныеОтборыПоНовостям_РедкоМеняющиеся_НовостиДляУдаления%
				|	%СвойстваНовостей_НовостиДляУдаления%
				|	%СостоянияНовостей_НовостиДляУдаления%
				|
				|%НовостиДляУстановкиПометкиУдаления%
				|	%КатегорииНовостейПростыеНеобработанные%
				|	%КатегорииНовостейИнтервалыВерсийНеобработанные%
				|
				|	%ПериодическиеСвойстваНовостей_НовостиДляУстановкиПометкиУдаления%
				|	%ПривязкаНовостейКМетаданным_НовостиДляУстановкиПометкиУдаления%
				|	%РассчитанныеОтборыПоНовостям_ДляОбластиДанных_НовостиДляУстановкиПометкиУдаления%
				|	%РассчитанныеОтборыПоНовостям_Общие_НовостиДляУстановкиПометкиУдаления%
				|	%РассчитанныеОтборыПоНовостям_Пользовательские_НовостиДляУстановкиПометкиУдаления%
				|	%РассчитанныеОтборыПоНовостям_РедкоМеняющиеся_НовостиДляУстановкиПометкиУдаления%
				|	%СвойстваНовостей_НовостиДляУстановкиПометкиУдаления%
				|	%СостоянияНовостей_НовостиДляУстановкиПометкиУдаления%
				|";

			// Удалить новости.
			Если (ДанныеДляУдаления.Свойство("НовостиДляУдаления"))
					И (ТипЗнч(ДанныеДляУдаления.НовостиДляУдаления) = ТипМассив)
					И ДанныеДляУдаления.НовостиДляУдаления.Количество() > 0 Тогда
				// ////? Удалить новости по списку. Для этого необходимо наличие полных прав, монопольного режима и т.п.
				ТекстСообщения = НСтр("ru='Есть помеченные на удаление новости (%ДанныеДляУдаления.НовостиДляУдаления.Количество()% новостей). Их надо удалить вручную через Все функции / Стандартные / Удаление помеченных объектов.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеДляУдаления.НовостиДляУдаления.Количество()%", ДанныеДляУдаления.НовостиДляУдаления.Количество());
				// Для этих новостей будет произведено пред-удаление значений из регистров сведений, чтобы процесс удаления прошел без ошибок.
			Иначе
				ТекстСообщения = НСтр("ru='Нет помеченных на удаление новостей'");
			КонецЕсли;
			ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%НовостиДляУдаления%", ТекстСообщения);

			// Удалить значения регистров сведений для новостей, уже помеченных на удаление.
			Если (ДанныеДляУдаления.Свойство("НовостиДляУдаления"))
					И (ТипЗнч(ДанныеДляУдаления.НовостиДляУдаления) = ТипМассив)
					И ДанныеДляУдаления.НовостиДляУдаления.Количество() > 0 Тогда
				Для Каждого РегистрДляОчистки Из МассивРегистровДляОчистки Цикл
					Т1 = ТекущаяУниверсальнаяДатаВМиллисекундах();
					Для Каждого ТекущаяЗапись Из ДанныеДляУдаления.НовостиДляУдаления Цикл
						НаборЗаписей = РегистрыСведений[РегистрДляОчистки].СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Новость.Установить(ТекущаяЗапись, Истина);
						НаборЗаписей.Очистить();
						НаборЗаписей.Записать(Истина);
					КонецЦикла;
					Т2 = ТекущаяУниверсальнаяДатаВМиллисекундах();
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Очистка регистра сведений [%1] (%2 мс).'"),
						РегистрДляОчистки,
						(Т2-Т1));
					ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%" + РегистрДляОчистки + "_НовостиДляУдаления%", ТекстСообщения);
				КонецЦикла;
			Иначе
				Для Каждого РегистрДляОчистки Из МассивРегистровДляОчистки Цикл
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Очистка регистра сведений [%1] не проводилась - нет новостей для удаления.'"),
						РегистрДляОчистки);
					ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%" + РегистрДляОчистки + "_НовостиДляУдаления%", ТекстСообщения);
				КонецЦикла;
			КонецЕсли;

			// Установить пометку удаления устаревшим новостям.
			Если (ДанныеДляУдаления.Свойство("НовостиДляУстановкиПометкиУдаления"))
					И (ТипЗнч(ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления) = ТипМассив)
					И ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления.Количество() > 0 Тогда
				Для Каждого ТекущаяНовость Из ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления Цикл
					НовостьОбъект = ТекущаяНовость.ПолучитьОбъект();
					Если ТипЗнч(НовостьОбъект) = Тип("СправочникОбъект.Новости") Тогда // Для "<Объект не найден>" будет Неопределено, или проверять ПустаяСтрока(ТекущаяНовость.ВерсияДанных)
						НовостьОбъект.УстановитьПометкуУдаления(Истина);
					КонецЕсли;
				КонецЦикла;
				ТекстСообщения = НСтр("ru='Все устаревшие новости успешно помечены на удаление (%ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления.Количество()% новостей).'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления.Количество()%", ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления.Количество());
			Иначе
				ТекстСообщения = НСтр("ru='Нет устаревших новостей, которые надо пометить на удаление.'");
			КонецЕсли;
			ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%НовостиДляУстановкиПометкиУдаления%", ТекстСообщения);

			// Записи регистров сведений удалять без учета того, что какие-то новости могли быть НЕ удалены.
			Если (ДанныеДляУдаления.Свойство("КатегорииНовостейПростыеНеобработанные"))
					И (ТипЗнч(ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные) = ТипМассив)
					И (ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные.Количество() > 0) Тогда
				Т1 = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Для Каждого ТекущаяЗапись Из ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные Цикл
					Запись = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(Запись, ТекущаяЗапись);
					Запись.Удалить();
				КонецЦикла;
				Т2 = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Было удалено %1 необработанных простых категорий (%2 мс).'"),
					ДанныеДляУдаления.КатегорииНовостейПростыеНеобработанные.Количество(),
					(Т2-Т1));
			Иначе
				ТекстСообщения = НСтр("ru='Простых необработанных категорий не было найдено.'");
			КонецЕсли;
			ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%КатегорииНовостейПростыеНеобработанные%", ТекстСообщения);

			// Записи регистров сведений удалять без учета того, что какие-то новости могли быть НЕ удалены.
			Если (ДанныеДляУдаления.Свойство("КатегорииНовостейИнтервалыВерсийНеобработанные"))
					И (ТипЗнч(ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные) = ТипМассив)
					И (ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные.Количество() > 0) Тогда
				Т1 = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Для Каждого ТекущаяЗапись Из ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные Цикл
					Запись = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(Запись, ТекущаяЗапись);
					Запись.Удалить();
				КонецЦикла;
				Т2 = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Было удалено %1 необработанных категорий интервалов версий (%2 мс).'"),
					ДанныеДляУдаления.КатегорииНовостейИнтервалыВерсийНеобработанные.Количество(),
					(Т2-Т1));
			Иначе
				ТекстСообщения = НСтр("ru='Необработанных категорий интервалов версий не было найдено.'");
			КонецЕсли;
			ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%КатегорииНовостейИнтервалыВерсийНеобработанные%", ТекстСообщения);

			// Удалить значения регистров сведений для новостей, помечаемых на удаление.
			Если (ДанныеДляУдаления.Свойство("НовостиДляУстановкиПометкиУдаления"))
					И (ТипЗнч(ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления) = ТипМассив)
					И ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления.Количество() > 0 Тогда
				Для Каждого РегистрДляОчистки Из МассивРегистровДляОчистки Цикл
					Т1 = ТекущаяУниверсальнаяДатаВМиллисекундах();
					Для Каждого ТекущаяЗапись Из ДанныеДляУдаления.НовостиДляУстановкиПометкиУдаления Цикл
						НаборЗаписей = РегистрыСведений[РегистрДляОчистки].СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Новость.Установить(ТекущаяЗапись, Истина);
						НаборЗаписей.Очистить();
						НаборЗаписей.Записать(Истина);
					КонецЦикла;
					Т2 = ТекущаяУниверсальнаяДатаВМиллисекундах();
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Очистка регистра сведений [%1] (%2 мс).'"),
						РегистрДляОчистки,
						(Т2-Т1));
					ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%" + РегистрДляОчистки + "_НовостиДляУстановкиПометкиУдаления%", ТекстСообщения);
				КонецЦикла;
			Иначе
				Для Каждого РегистрДляОчистки Из МассивРегистровДляОчистки Цикл
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Очистка регистра сведений [%1] не проводилась - нет новостей для пометки удаления.'"),
						РегистрДляОчистки);
					ОписаниеРезультата = СтрЗаменить(ОписаниеРезультата, "%" + РегистрДляОчистки + "_НовостиДляУстановкиПометкиУдаления%", ТекстСообщения);
				КонецЦикла;
			КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. УдалитьНовости_Ежедневно. После сбора данных для удаления'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Получение списка новостей для удаления'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДругиеСервисныеВозможности

// Процедура загружает все стандартные значения необходимые для подсистемы новостей из макетов с именем "СтандартныеЗначения".
// Имеет смысл заполнять значения из макета:
//  - при обновлении конфигурации (когда подключение к интернету может занять много времени);
//  - при первоначальном заполнении пустой базы, когда не заполнены параметры, логины и пароли для доступа к веб-сервисам обновлений.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ЗагрузитьВсеСтандартныеЗначения(КонтекстВыполнения = Неопределено)

	ТипСтруктура = Тип("Структура");

	НаименованиеПроцедурыФункции = "ЗагрузитьВсеСтандартныеЗначения"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Загрузка стандартных значений'"));

		// Загрузка должна происходить именно в такой последовательности.
		КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
		ПланыВидовХарактеристик.КатегорииНовостей.ЗагрузитьСтандартныеЗначения(КонтекстВыполненияВложенный);
		Справочники.ЗначенияКатегорийНовостей.ЗагрузитьСтандартныеЗначения(КонтекстВыполненияВложенный);
		Справочники.ЛентыНовостей.ЗагрузитьСтандартныеЗначения(КонтекстВыполненияВложенный);
		// {Раздельное обновление ИБ}
		Если (КонтекстВыполнения.Свойство("ДополнительныеПараметрыВыполнения") = Истина)
				И (ТипЗнч(КонтекстВыполнения.ДополнительныеПараметрыВыполнения) = ТипСтруктура) Тогда
			КонтекстВыполненияВложенный.Вставить("ДополнительныеПараметрыВыполнения", КонтекстВыполнения.ДополнительныеПараметрыВыполнения);
		КонецЕсли;
		Справочники.Новости.ЗагрузитьСтандартныеЗначения(КонтекстВыполненияВложенный);

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. Загрузка стандартных значений. Все стандартные значения'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НСтр("ru='Загрузка стандартных значений'"),
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КонтекстныеНовости

// Функция получает все необходимые данные по контекстным новостям.
// Может использоваться как при стратегии получения новостей в ПриСозданииНаСервере(),
//  так и в обработчике ожидания из ПриОткрытии() формы.
//
// Параметры:
//  ИдентификаторМетаданных           - Строка - Идентификатор метаданных, должен совпадать с таким же
//                                       идентификатором в самой новости;
//  ИдентификаторФормы                - Строка - Идентификатор формы, должен совпадать с таким же
//                                       идентификатором в самой новости;
//  ЗаголовокФормыКонтекстныхНовостей - Строка - Заголовок формы контекстных новостей (в случае, если будут новости
//                                       для отображения в этой форме);
//  ИдентификаторыСобытийПриОткрытии  - Строка, Массив - строка или массив строк идентификаторов события "ПриОткрытии".
//                                        Если передано какое-то значение, то будет подсчитано количество
//                                          очень важных контекстных новостей.
//                                        И если это количество > 0, то открывающая форма инициирует открытие формы
//                                          просмотра таких новостей;
//  НастройкиПолученияНовостей        - Структура, Неопределено - структура с ключами:
//   * ПолучатьКатегорииНовостей      - Булево - если Истина, то в реквизите формы будут также сохраняться
//                                        категории новостей. Это может быть полезно для реализации особенного
//                                        отбора новостей, который невозможно реализовать с помощью регистров
//                                        сведений ОтборыПоЛентамНовостей*.
//
// Возвращаемое значение:
//   Структура - структура контекстных новостей для указанной комбинации
//          ИдентификаторМетаданных / ИдентификаторФормы с ключами:
//     * ДатаЗаполнения                           - Дата - если прошло много времени, то обновить;
//     * Новости                                  - Массив из Структура:
//        ** НомерСтрокиНовости      - Число - номер строки;
//        ** ЛентаНовостей           - СправочникСсылка.ЛентаНовостей - лента новостей;
//        ** Новость                 - СправочникСсылка.Новости -ссылка;
//        ** НовостьНаименование     - Строка -;
//        ** НовостьПодзаголовок     - Строка -;
//        ** УИННовости              - Строка -;
//        ** ДатаПубликации          - Дата -;
//        ** Важность                - Число -;
//        ** Актуальность            - Булево -;
//        ** Метаданные              - Строка -;
//        ** Форма                   - Строка -;
//        ** Событие                 - Строка -;
//        ** ПоказыватьВФормеОбъекта - Булево -;
//        ** ЭтоПостояннаяНовость    - Булево -;
//        ** Прочтена                - Булево -;
//        ** ОповещениеВключено      - Булево -;
//        ** ДатаНачалаОповещения    - Дата - ;
//     * ЗаголовокФормыКонтекстныхНовостей        - Строка;
//     * КоличествоНовостей                       - Число - общее количество уникальных новостей
//          для этих метаданных / формы;
//     * КоличествоНепрочитанныхНовостей          - Число - общее количество уникальных непрочтенных новостей
//          для этих метаданных / формы;
//     * КоличествоВажныхНовостейПриОткрытии      - Число - количество важных новостей,
//          которые надо показать при открытии;
//     * КоличествоОченьВажныхНовостейПриОткрытии - Число - количество очень важных новостей,
//          которые надо показать при открытии;
//     * КоличествоПостоянныхНовостей             - Число - количество новостей с признаком ЭтоПостояннаяНовость;
//     * МассивСтруктурВажныхНовостей             - Массив структур - важные новости,
//         которые необходимо показать при открытии;
//        ** Новость                 - СправочникСсылка.Новости - ссылка на новость;
//        ** НавигационнаяСсылка     - Строка - навигационная ссылка;
//        ** НовостьНаименование     - Строка - заголовок;
//        ** НовостьПодзаголовок     - Строка - подзаголовок;
//        ** НовостьКодЛентыНовостей - Строка - код ленты новостей;
//        ** ОповещениеВключено      - Булево - признак того, что новость необходимо показать;
//        ** ИконкаНовости           - Картинка, Неопределено - картинка важной новости;
//     * МассивСтруктурПостоянныхНовостей         - Массив структур - новости, которые можно использовать
//             для формирования информационных ссылок;
//        ** Новость             - СправочникСсылка.Новости - ссылка на новость;
//        ** НовостьНаименование - Строка - заголовок новости (для формирования представления).
//
Функция ПолучитьКонтекстныеНовостиДляФормы(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			ЗаголовокФормыКонтекстныхНовостей = "",
			ИдентификаторыСобытийПриОткрытии = "ПриОткрытии",
			НастройкиПолученияНовостей = Неопределено) Экспорт

	ТипМассив = Тип("Массив");
	ТипСтрока = Тип("Строка");
	ТипСписокЗначений = Тип("СписокЗначений");

	МассивИдентификаторовСобытийПриОткрытии = Новый Массив();
	Если ТипЗнч(ИдентификаторыСобытийПриОткрытии) = ТипСтрока Тогда
		МассивИдентификаторовСобытийПриОткрытии.Добавить(ИдентификаторыСобытийПриОткрытии);
	ИначеЕсли ТипЗнч(ИдентификаторыСобытийПриОткрытии) = ТипМассив Тогда
		МассивИдентификаторовСобытийПриОткрытии = ИдентификаторыСобытийПриОткрытии;
	Иначе
		// Пустой массив
	КонецЕсли;

	МассивСтруктурНовостей = Новый Массив;

	Результат = Новый Структура;
		Результат.Вставить("ДатаЗаполнения", ТекущаяДатаСеанса());
		Результат.Вставить("Новости", МассивСтруктурНовостей);
		Результат.Вставить("ЗаголовокФормыКонтекстныхНовостей", ЗаголовокФормыКонтекстныхНовостей);
		Результат.Вставить("КоличествоНовостей", 0);
		Результат.Вставить("КоличествоНепрочитанныхНовостей", 0);
		Результат.Вставить("КоличествоВажныхНовостейПриОткрытии", 0);
		Результат.Вставить("КоличествоОченьВажныхНовостейПриОткрытии", 0);
		Результат.Вставить("КоличествоПостоянныхНовостей", 0);
		Результат.Вставить("МассивСтруктурВажныхНовостей", Неопределено); // Должно быть Неопределено, если новостей для показа нет.
		Результат.Вставить("МассивСтруктурПостоянныхНовостей", Неопределено); // Должно быть Неопределено, если постоянных новостей нет.

	// Загрузить список всех новостей по объекту (возможно дублирование самих новостей,
	//  т.к. одна новость может быть привязана к разным событиям).

	// Для неразделенного сеанса не возвращать контекстные новости, т.к. невозможно определить их
	//  пользовательские свойства (прочтенность, сброшенное оповещение и т.п.).
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		// Запустились в неразделенной конфигурации или
		// Запустились в разделенной конфигурации, но вошли в область данных.
		ПолучатьКонтекстныеНовости = Истина;
	Иначе
		ПолучатьКонтекстныеНовости = Ложь;
	КонецЕсли;

	Если ПолучатьКонтекстныеНовости = Истина Тогда
		МассивДоступныхЛентНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
			"ДоступныеЛентыНовостей", // КлючОбъекта
			""); // КлючНастроек, пока не обрабатывается
		СписокЛентНовостей = Новый СписокЗначений;
		СписокЛентНовостей.ЗагрузитьЗначения(МассивДоступныхЛентНовостей);
		ОбработкаНовостейПереопределяемый.ПереопределитьСписокЛентНовостейДляКонтекстныхНовостей(СписокЛентНовостей);
		Если (ТипЗнч(СписокЛентНовостей) = ТипМассив) Тогда
			// Корректный параметр
		ИначеЕсли (ТипЗнч(СписокЛентНовостей) = ТипСписокЗначений) Тогда
			// Корректный параметр
		ИначеЕсли (СписокЛентНовостей = Неопределено) Тогда
			// Корректный параметр
		Иначе
			СписокЛентНовостей = Неопределено; // По всем лентам новостей
		КонецЕсли;
		МассивСтруктурНовостей = ОбщегоНазначения.ТаблицаЗначенийВМассив(
			ПолучитьКонтекстныеНовости(
				СписокЛентНовостей, // По всем лентам новостей (Неопределено) или по списку новостей (СписокЗначений, Массив)
				ИдентификаторМетаданных, // Метаданные
				ИдентификаторФормы, // Форма
				Неопределено, // Событие - вывести все
				"Для форм, все поля", // Вариант списка новостей - со всеми полями
				НастройкиПолученияНовостей));
	КонецЕсли;

	ОбработкаНовостейПереопределяемый.ДополнительноОбработатьМассивКонтекстныхНовостей(
		ИдентификаторМетаданных,
		ИдентификаторФормы,
		ИдентификаторыСобытийПриОткрытии,
		МассивСтруктурНовостей);

	Результат.Новости = МассивСтруктурНовостей;

	// В таблице новостей могут храниться одинаковые новости, но привязанные к разным формам / событиям.
	// Поэтому необходимо вывести не общее количество строк, а количество уникальных новостей для этой формы.
	// Параллельно заполнить массив структур постоянных новостей и рассчитать количество постоянных и непрочтенных новостей.
	КоличествоНепрочитанныхНовостей = 0;
	КоличествоПостоянныхНовостей = 0;
	МассивСтруктурПостоянныхНовостей = Новый Массив;
	СписокДобавленныхНовостей = Новый СписокЗначений;
	Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
		Если СписокДобавленныхНовостей.НайтиПоЗначению(ТекущаяНовость.Новость) = Неопределено Тогда
			Если (ВРег(ТекущаяНовость.Форма) = ВРег(ИдентификаторФормы)) Тогда
				СписокДобавленныхНовостей.Добавить(ТекущаяНовость.Новость);
			КонецЕсли;
			// Количество непрочтенных новостей должно быть уникально по каждой новости.
			Если ТекущаяНовость.Прочтена = Ложь Тогда
				КоличествоНепрочитанныхНовостей = КоличествоНепрочитанныхНовостей + 1;
			КонецЕсли;
		КонецЕсли;
		// Количество постоянных новостей.
		Если ТекущаяНовость.ЭтоПостояннаяНовость = Истина Тогда
			МассивСтруктурПостоянныхНовостей.Добавить(
				Новый Структура("Новость, НовостьНаименование",
					ТекущаяНовость.Новость,
					ТекущаяНовость.НовостьНаименование));
			КоличествоПостоянныхНовостей = КоличествоПостоянныхНовостей + 1;
		КонецЕсли;
	КонецЦикла;
	Результат.КоличествоНовостей               = СписокДобавленныхНовостей.Количество();
	Результат.КоличествоНепрочитанныхНовостей  = КоличествоНепрочитанныхНовостей ;
	Результат.КоличествоПостоянныхНовостей     = КоличествоПостоянныхНовостей;
	Результат.МассивСтруктурПостоянныхНовостей = МассивСтруктурПостоянныхНовостей;

	// В отличие от очень важных новостей, которые отображаются в отдельной форме (и получение таких новостей
	//  можно возложить на форму контекстных новостей), важные новости показываются в виде оповещений,
	//  поэтому необходимо сразу подготовить все необходимые для отображения данные для передачи в вызывающую форму.
	МассивСтруктурВажныхНовостей = Новый Массив;

	// В полученной таблице могут храниться несколько одинаковых новостей (для разных событий, например).
	//  Но мы ищем по конкретному событию, поэтому задвоений быть не должно.
	// Сразу вычислить количество очень важных новостей, которые необходимо показать при открытии этой формы.
	КоличествоОченьВажныхНовостейПриОткрытии = 0;
	КоличествоВажныхНовостейПриОткрытии      = 0;
	Если МассивИдентификаторовСобытийПриОткрытии.Количество() > 0 Тогда
		Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
			Если ТекущаяНовость.Важность = 1 Тогда // Очень важная
				Если ТекущаяНовость.ОповещениеВключено = Истина Тогда // Показывать оповещение
					Для Каждого ТекущийИдентификаторСобытия Из МассивИдентификаторовСобытийПриОткрытии Цикл
						Если (ВРег(ТекущаяНовость.Событие) = ВРег(ТекущийИдентификаторСобытия))
								И (ВРег(ТекущаяНовость.Форма) = ВРег(ИдентификаторФормы)) Тогда
							КоличествоОченьВажныхНовостейПриОткрытии = КоличествоОченьВажныхНовостейПриОткрытии + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ТекущаяНовость.Важность = 2 Тогда // Важная
				Если ТекущаяНовость.ОповещениеВключено = Истина Тогда // Показывать оповещение
					Для Каждого ТекущийИдентификаторСобытия Из МассивИдентификаторовСобытийПриОткрытии Цикл
						Если (ВРег(ТекущаяНовость.Событие) = ВРег(ТекущийИдентификаторСобытия))
								И (ВРег(ТекущаяНовость.Форма) = ВРег(ИдентификаторФормы)) Тогда
							КоличествоВажныхНовостейПриОткрытии = КоличествоВажныхНовостейПриОткрытии + 1;
							ОписаниеНовости = Новый Структура;
								ОписаниеНовости.Вставить("Новость"                , ТекущаяНовость.Новость);
								ОписаниеНовости.Вставить("НавигационнаяСсылка"    , ПолучитьНавигационнуюСсылку(ТекущаяНовость.Новость));
								ОписаниеНовости.Вставить("НовостьНаименование"    , ТекущаяНовость.НовостьНаименование);
								ОписаниеНовости.Вставить("НовостьПодзаголовок"    , ТекущаяНовость.НовостьПодзаголовок);
								ОписаниеНовости.Вставить("НовостьКодЛентыНовостей", ТекущаяНовость.НовостьКодЛентыНовостей);
								ОписаниеНовости.Вставить("ОповещениеВключено"     , ТекущаяНовость.ОповещениеВключено);
								ОписаниеНовости.Вставить("ИконкаНовости"          , ТекущаяНовость.ИконкаНовости);
							МассивСтруктурВажныхНовостей.Добавить(ОписаниеНовости);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Результат.КоличествоОченьВажныхНовостейПриОткрытии = КоличествоОченьВажныхНовостейПриОткрытии;
		Результат.КоличествоВажныхНовостейПриОткрытии      = КоличествоВажныхНовостейПриОткрытии;
		Результат.МассивСтруктурВажныхНовостей             = ?(МассивСтруктурВажныхНовостей.Количество() = 0, Неопределено, МассивСтруктурВажныхНовостей);
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПанельКонтекстныхНовостей

// Функция возвращает состояние панели контекстных новостей для текущего пользователя.
//
// Параметры:
//  ИдентификаторМетаданных - Строка - Идентификатор метаданных, должен совпадать с таким же
//                                идентификатором в самой новости;
//  ИдентификаторФормы      - Строка - Идентификатор формы, должен совпадать с таким же
//                                идентификатором в самой новости;
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//     * Видимость            - Булево - Ложь, если панель контекстных новостей отключена пользователем;
//     * ДатаОтключения       - Дата - дата, когда отключили панель контекстных новостей или пустая дата (если Видимость = Истина);
//     * ДатаПоследнейНовости - Дата - дата самой последней новости перед отключением панели контекстных новостей
//          (для принятия решения о принудительном включении) или пустая дата (если Видимость = Истина).
//
Функция ПолучитьСостояниеПанелиКонтекстныхНовостей(ИдентификаторМетаданных, ИдентификаторФормы)

	Результат = Новый Структура;
		Результат.Вставить("Видимость", Истина);
		Результат.Вставить("ДатаОтключения", '00010101');
		Результат.Вставить("ДатаПоследнейНовости", '00010101');

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если включено разделение данных, и мы зашли в неразделенном сеансе,
		//  то нельзя устанавливать пользовательские свойства новости.
		// Зашли в конфигурацию под пользователем без разделения (и не вошли в область данных).
		Если ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() Тогда
			ПолучитьТекущегоПользователя = Ложь;
		Иначе
			ПолучитьТекущегоПользователя = Истина;
		КонецЕсли;
	Иначе
		ПолучитьТекущегоПользователя = Истина;
	КонецЕсли;

	Если ПолучитьТекущегоПользователя = Истина Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	Иначе
		Результат.Вставить("Видимость", Ложь);
		Возврат Результат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Рег.ДатаОтключения       КАК ДатаОтключения,
		|	Рег.ДатаПоследнейНовости КАК ДатаПоследнейНовости
		|ИЗ
		|	РегистрСведений.ОтключенныеПанелиКонтекстныхНовостей КАК Рег
		|ГДЕ
		|	Рег.Пользователь = &ТекущийПользователь
		|	И Рег.Метаданные = &ИдентификаторМетаданных
		|	И Рег.Форма      = &ИдентификаторФормы
		|";
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ИдентификаторМетаданных);
	Запрос.УстановитьПараметр("ИдентификаторФормы", ИдентификаторФормы);

	РезультатЗапроса = Запрос.Выполнить(); // ПолучитьСостояниеПанелиКонтекстныхНовостей.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Если Выборка.Следующий() Тогда
			Результат.Вставить("Видимость", Ложь);
			Результат.Вставить("ДатаОтключения", Выборка.ДатаОтключения);
			Результат.Вставить("ДатаПоследнейНовости", Выборка.ДатаПоследнейНовости);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура управляет видимостью панели контекстных новостей в форме, а также сохраняет настройки (дату закрытия),
//  чтобы через некоторое время снова открыть панель.
//
// Параметры:
//  Новости   - Структура - состав ключей см. в коде ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере,
//                  заполнение переменной ОписаниеНовостей;
//  Видимость - Булево - новое состояние видимости.
//
Процедура ПанельКонтекстныхНовостей_ИзменитьВидимость(Новости, Видимость) Экспорт

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если включено разделение данных, и мы зашли в неразделенном сеансе,
		//  то нельзя устанавливать пользовательские свойства новости.
		// Зашли в конфигурацию под пользователем без разделения (и не вошли в область данных).
		Если ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() Тогда
			ПолучитьТекущегоПользователя = Ложь;
		Иначе
			ПолучитьТекущегоПользователя = Истина;
		КонецЕсли;
	Иначе
		ПолучитьТекущегоПользователя = Истина;
	КонецЕсли;

	Если ПолучитьТекущегоПользователя = Истина Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	Иначе
		Возврат;
	КонецЕсли;

	ДатаОтключения = ТекущаяУниверсальнаяДата();

	Если Видимость = Истина Тогда // Включили панель контекстных новостей.
		НаборЗаписей = РегистрыСведений.ОтключенныеПанелиКонтекстныхНовостей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Пользователь"].Установить(ТекущийПользователь);
			НаборЗаписей.Отбор["Метаданные"].Установить(Новости.Метаданные);
			НаборЗаписей.Отбор["Форма"].Установить(Новости.Форма);
		НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей.
	Иначе // Скрыли панель - сохранить состояние новостей.
		ДатаПоследнейНовости = '00010101';
		Для Каждого ТекущаяНовость Из Новости.НовостиДляПанелиКонтекстныхНовостей Цикл
			Если ТекущаяНовость.ДатаПубликации > ДатаПоследнейНовости Тогда
				ДатаПоследнейНовости = ТекущаяНовость.ДатаПубликации;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей = РегистрыСведений.ОтключенныеПанелиКонтекстныхНовостей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Пользователь"].Установить(ТекущийПользователь);
			НаборЗаписей.Отбор["Метаданные"].Установить(Новости.Метаданные);
			НаборЗаписей.Отбор["Форма"].Установить(Новости.Форма);
				// Добавлять только одну запись.
				Запись = НаборЗаписей.Добавить();
				Запись.Пользователь         = ТекущийПользователь;
				Запись.Метаданные           = Новости.Метаданные;
				Запись.Форма                = Новости.Форма;
				Запись.МесяцОтключения      = НачалоМесяца(ДатаОтключения); // Для массового регламентного удаления.
				Запись.ДатаОтключения       = ДатаОтключения;
				Запись.ДатаПоследнейНовости = ДатаПоследнейНовости;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;

	// Установить параметры формы.
	Новости.Вставить("ВидимостьПанелиКонтекстныхНовостей", (Видимость = Истина));
	Новости.Вставить("ДатаОтключенияПанелиКонтекстныхНовостей", ДатаОтключения);
	Новости.Вставить("ДатаПоследнейНовостиПанелиКонтекстныхНовостей", ДатаПоследнейНовости);

КонецПроцедуры

#КонецОбласти

#Область РаботаСОтборамиПоКатегории

// Процедура очищает все категории для новости ОбъектНовость из регистра сведений КатегорииНовостейПростыеНеобработанные,
//  КатегорииНовостейПростые, КатегорииНовостейИнтервалыВерсийНеобработанные и КатегорииНовостейИнтервалыВерсий.
// Такая очистка производится, например, при загрузке новости.
//  Если новость была изменена, то вначале очищаются все категории, а затем загружаются заново.
//
// Параметры:
//  ОбъектНовость - СправочникОбъект.Новости.
//
Процедура ОчиститьКатегорииНовости(ОбъектНовость) Экспорт

	// 1. Регистр сведений КатегорииНовостейПростые.
	Если НЕ ОбъектНовость.Ссылка.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.КатегорииНовостейПростые.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ОбъектНовость.Ссылка);
		НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей.
	КонецЕсли;

	// 2. Регистр сведений КатегорииНовостейПростыеНеобработанные.
	НаборЗаписей = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["ЛентаНовостей"].Установить(ОбъектНовость.ЛентаНовостей);
		НаборЗаписей.Отбор["УИННовости"].Установить(ОбъектНовость.УИННовости);
	НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей

	// 3. Регистр сведений КатегорииНовостейИнтервалыВерсий.
	Если НЕ ОбъектНовость.Ссылка.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.КатегорииНовостейИнтервалыВерсий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(ОбъектНовость.Ссылка);
		НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей
	КонецЕсли;

	// 4. Регистр сведений КатегорииНовостейИнтервалыВерсийНеобработанные.
	НаборЗаписей = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["ЛентаНовостей"].Установить(ОбъектНовость.ЛентаНовостей);
		НаборЗаписей.Отбор["УИННовости"].Установить(ОбъектНовость.УИННовости);
	НаборЗаписей.Записать(Истина); // Без чтения = очистка набора записей

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

// Процедура вызывается при первом запуске библиотеки БИП.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск() Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск"; // Идентификатор.
	КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	ЗаписыватьВЖурналРегистрации = Истина;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НаименованиеПроцедурыФункции);

		// Код для первоначального заполнения информационной базы.

		УстановитьПривилегированныйРежим(Истина);

			// Основные действия.
#Область ОсновныеДействия

			КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ОсновныеДействия", // Идентификатор.
				НСтр("ru='Основные действия'"));

				ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Проверка правильности внедрения подсистемы. Начало.'"));
				Результат = ПроверитьПравильностьВнедренияПодсистемы("ТолькоПереопределения");
				Если НЕ ПустаяСтрока(Результат) Тогда
					ТекстСообщения = НСтр("ru='Обнаружены ошибки внедрения подсистемы ИнтернетПоддержкаПользователей.Новости.
						|Обнаруженные ошибки внедрения:
						|%Результат%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Результат%", Результат);
					ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Обновление ИБ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
						НСтр("ru='Новости. Обновление ИБ. Проверка внедрения'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
						УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
						, // ОбъектМетаданных
						, // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				КонецЕсли;
				ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Проверка правильности внедрения подсистемы. Конец.'"));

				ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Установка основных констант. Начало.'"));
				РазрешитьРаботуСНовостями(); // Установка константы "РазрешенаРаботаСНовостями" в Истина
				Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Установить(Истина);
				ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Установка основных констант. Конец.'"));

				// Перед загрузкой новостей из метаданных очистим сведения о последних загрузках,
				//  т.к. из-за них новости могут не загрузиться из макетов.
				ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Очистка регистра ДатыЗагрузкиПоследнихНовостей. Начало.'"));
				НаборЗаписей = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьНаборЗаписей();
				НаборЗаписей.Записать(Истина);
				ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Очистка регистра ДатыЗагрузкиПоследнихНовостей. Конец.'"));

				// Код обновления из файлов, встроенных в конфигурацию.
				// После загрузки новостей автоматически вызовутся:
				//  ОбработкаНовостей.ПересчитатьНеобработанныеКатегорииНовостей();
				//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся();
				//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Общие(); // Здесь же вызовется ПересчитатьОтборыПоНовостям_Пользовательские();
				//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_ДляОбластиДанных();
				// поэтому явно вызывать их не нужно.
				// {Раздельное обновление ИБ}
				ДополнительныеПараметрыВыполнения = Новый Структура;
					ДополнительныеПараметрыВыполнения.Вставить("ИсточникЗапуска", "ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск");
					ДополнительныеПараметрыВыполнения.Вставить("ОбрабатыватьОбластиДанных", Истина);
				// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
				Если ОбщегоНазначения.РазделениеВключено() Тогда
					// Зашли в конфигурацию под пользователем без разделения (без входа в область данных).
					Если (ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей())
							// Если не вошли в область данных.
							И (НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()) Тогда
						ДополнительныеПараметрыВыполнения.Вставить("ОбрабатыватьОбластиДанных", Ложь);
					КонецЕсли;
				КонецЕсли;
				КонтекстВыполненияВложенныйВложенный.Вставить("ДополнительныеПараметрыВыполнения", ДополнительныеПараметрыВыполнения);
				ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Загрузка стандартных значений. Начало.'"));
				ЗагрузитьВсеСтандартныеЗначения(КонтекстВыполненияВложенныйВложенный);
				ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Загрузка стандартных значений. Конец.'"));

				// После загрузки стандартных значений проверить регистр сведений "ДатыЗагрузкиПоследнихНовостей".
				// Для всех лент новостей должны быть заполнены даты, чтобы не получать новости "с начала времен".
				// Если для какой-то ленты новостей дата не заполнена, то установить "минус 3 месяца" от текущей даты.
				ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Установка даты загрузки новостей на -3 месяца. Начало.'"));
				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	Спр.Ссылка КАК ЛентаНовостей
					|ИЗ
					|	Справочник.ЛентыНовостей КАК Спр
					|ГДЕ
					|	Спр.ЗагруженоССервера = ИСТИНА
					|";
				РезультатЗапроса = Запрос.Выполнить(); // ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск. // АПК:1328 Конкурентная работа маловероятна.
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ДатаЗагрузкиПоследнихНовостей = ДобавитьМесяц(ТекущаяУниверсальнаяДата(), -3);
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
						Запись.ЛентаНовостей                        = Выборка.ЛентаНовостей;
						Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостей;
						Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = '00010101';
						Запись.КоличествоНеудачПриЗагрузкеНовостей  = 0;
						Запись.Записать(Истина);
					КонецЦикла;
				КонецЕсли;
				ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Установка даты загрузки новостей на -3 месяца. Конец.'"));

				// Установить / переустановить значение расписания для регламентного задания ВсеОбновленияНовостей.
				ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Установка расписания регламентного задания. Начало.'"));
				ТекущееРегламентноеЗадание = ПолучитьРегламентноеЗаданиеВсеОбновленияНовостей("ОбработкаНовостей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск");
				Если ТекущееРегламентноеЗадание <> Неопределено Тогда
					ТекущееРегламентноеЗадание.Наименование = НСтр("ru='Все обновления новостей'");
					ТекущееРегламентноеЗадание.Расписание   = ПолучитьРасписаниеОбновленийНовостей(Ложь);
					ТекущееРегламентноеЗадание.Записать();
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Установка расписания регламентного задания. Конец.'"));
				Иначе
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Регламентное задание ВсеОбновленияНовостей не найдено.'"));
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Установка расписания регламентного задания. Конец.'"));
				КонецЕсли;

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

			// Переопределяемые действия.
#Область ПереопределяемыеДействия

			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".Переопределение", // Идентификатор.
				НСтр("ru='Переопределяемые действия'"));

				ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск();

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				Неопределено);

#КонецОбласти

		УстановитьПривилегированныйРежим(Ложь);

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПервыйЗапуск'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при первом запуске библиотеки БИП.
// Процедура - для каждой области данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск() Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск"; // Идентификатор.
	КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	ЗаписыватьВЖурналРегистрации = Истина;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		НаименованиеПроцедурыФункции);

		// Код для первоначального заполнения информационной базы.

		ЕстьОшибки = Ложь;

		Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда

			ТекстСообщения = НСтр("ru='Работа с новостями не поддерживается для внешнего пользователя. Обработчик обновления пропущен.'");
			ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Обновление ИБ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
				НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПервыйЗапуск. Конец'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
				УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			ЕстьОшибки = Истина;

		КонецЕсли;

		Если ЕстьОшибки = Ложь Тогда

			УстановитьПривилегированныйРежим(Истина);

			// Основные действия.
#Область ОсновныеДействия

			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ОсновныеДействия", // Идентификатор.
				НСтр("ru='Основные действия'"));

				РазрешенаРаботаСНовостями = Константы.РазрешенаРаботаСНовостями.Получить();
				Если РазрешенаРаботаСНовостями = Истина Тогда
					// Оптимизировать отборы не нужно, т.к. они были оптимизированы на этапе обновления общих данных.
					// Для области данных доступен только пересчет отборов новостей по области данных.
					КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
					ПересчитатьОтборыПоНовостям_ДляОбластиДанных(КонтекстВыполненияВложенныйВложенный);
				Иначе
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Работа с новостями отключена. Обработчик пропущен.'"));
				КонецЕсли;

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

			// Переопределяемые действия.
#Область ПереопределяемыеДействия

			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".Переопределение", // Идентификатор.
				НСтр("ru='Переопределяемые действия'"));

				ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск();

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				Неопределено);

#КонецОбласти

			УстановитьПривилегированныйРежим(Ложь);

		КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПервыйЗапуск'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на любую новую версию.
// Процедура - для общих данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию() Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию"; // Идентификатор.
	КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	ЗаписыватьВЖурналРегистрации = Истина;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Переход на версию %1 (общие данные)'"),
			ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()));

		РазрешенаРаботаСНовостями = Неопределено;

		УстановитьПривилегированныйРежим(Истина);

			// Основные действия.
#Область ОсновныеДействия

			КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ОсновныеДействия", // Идентификатор.
				НСтр("ru='Основные действия'"));

				ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Проверка правильности внедрения подсистемы. Начало.'"));
				Результат = ПроверитьПравильностьВнедренияПодсистемы("ТолькоПереопределения");
				Если НЕ ПустаяСтрока(Результат) Тогда
					ТекстСообщения = НСтр("ru='Обнаружены ошибки внедрения подсистемы ИнтернетПоддержкаПользователей.Новости.
						|Обнаруженные ошибки внедрения:
						|%Результат%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Результат%", Результат);
					ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Обновление ИБ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
						НСтр("ru='Новости. Обновление ИБ. Проверка внедрения'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
						УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
						, // ОбъектМетаданных
						, // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				КонецЕсли;
				ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Проверка правильности внедрения подсистемы. Конец.'"));

				РазрешенаРаботаСНовостями = Константы.РазрешенаРаботаСНовостями.Получить();
				Если РазрешенаРаботаСНовостями = Истина Тогда

					// Перед загрузкой новостей из метаданных очистим сведения о последних загрузках,
					//  т.к. из-за них новости могут не загрузиться из макетов.
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Очистка регистра ДатыЗагрузкиПоследнихНовостей. Начало.'"));
					НаборЗаписей = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьНаборЗаписей();
					НаборЗаписей.Записать(Истина);
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Очистка регистра ДатыЗагрузкиПоследнихНовостей. Конец.'"));

					// Код обновления из файлов, встроенных в конфигурацию.
					// После загрузки новостей автоматически вызовутся:
					//  ОбработкаНовостей.ПересчитатьНеобработанныеКатегорииНовостей();
					//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся();
					//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Общие(); // Здесь же вызовется ПересчитатьОтборыПоНовостям_Пользовательские();
					//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_ДляОбластиДанных();
					// поэтому явно вызывать их не нужно.
					// {Раздельное обновление ИБ}
					ДополнительныеПараметрыВыполнения = Новый Структура;
						ДополнительныеПараметрыВыполнения.Вставить("ИсточникЗапуска", "ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию");
						ДополнительныеПараметрыВыполнения.Вставить("ОбрабатыватьОбластиДанных", Истина);
					// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
					Если ОбщегоНазначения.РазделениеВключено() Тогда
						// Зашли в конфигурацию под пользователем без разделения (без входа в область данных).
						Если (ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей())
								// Если не вошли в область данных.
								И (НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()) Тогда
							ДополнительныеПараметрыВыполнения.Вставить("ОбрабатыватьОбластиДанных", Ложь);
						КонецЕсли;
					КонецЕсли;
					КонтекстВыполненияВложенныйВложенный.Вставить("ДополнительныеПараметрыВыполнения", ДополнительныеПараметрыВыполнения);
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Загрузка стандартных значений. Начало.'"));
					ЗагрузитьВсеСтандартныеЗначения(КонтекстВыполненияВложенныйВложенный);
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Загрузка стандартных значений. Конец.'"));

					// После загрузки стандартных значений проверить регистр сведений "ДатыЗагрузкиПоследнихНовостей".
					// Для всех лент новостей должны быть заполнены даты, чтобы не получать новости "с начала времен".
					// Если для какой-то ленты новостей дата не заполнена, то установить "минус 3 месяца" от текущей даты.
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Установка даты загрузки новостей на -3 месяца. Начало.'"));
					Запрос = Новый Запрос;
					Запрос.Текст = "
						|ВЫБРАТЬ
						|	Спр.Ссылка КАК ЛентаНовостей
						|ИЗ
						|	Справочник.ЛентыНовостей КАК Спр
						|ГДЕ
						|	Спр.ЗагруженоССервера = ИСТИНА
						|";
					РезультатЗапроса = Запрос.Выполнить(); // ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию. // АПК:1328 Конкурентная работа маловероятна.
					Если НЕ РезультатЗапроса.Пустой() Тогда
						ДатаЗагрузкиПоследнихНовостей = ДобавитьМесяц(ТекущаяУниверсальнаяДата(), -3);
						Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
						Пока Выборка.Следующий() Цикл
							Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
							Запись.ЛентаНовостей                        = Выборка.ЛентаНовостей;
							Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостей;
							Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = '00010101';
							Запись.КоличествоНеудачПриЗагрузкеНовостей  = 0;
							Запись.Записать(Истина);
						КонецЦикла;
					КонецЕсли;
					ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Установка даты загрузки новостей на -3 месяца. Конец.'"));

				Иначе
					ОписаниеРезультата = НСтр("ru='Работа с новостями отключена.'") + " ";
					// Записать об отключении подсистемы в журнал регистрации.
					ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Обновление ИБ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
						НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
						УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
						, // ОбъектМетаданных
						0, // Данные
						НСтр("ru='Работа с новостями отключена. Новости, включая важные, не будут поступать.'"), // Комментарий
						Истина); // Записывать всегда.
				КонецЕсли;

				// В зависимости от текущего значения константы отключить или включить использование регламентного задания "ВсеОбновленияНовостей".
				ИзменитьИспользованиеРегламентныхЗаданий(РазрешенаРаботаСНовостями);

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

			// Переопределяемые действия.
#Область ПереопределяемыеДействия

			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".Переопределение", // Идентификатор.
				НСтр("ru='Переопределяемые действия'"));

				ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию();

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				Неопределено);

#КонецОбласти

		УстановитьПривилегированныйРежим(Ложь);

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на новую версию.
// Процедура - для общих данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_4() Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_4"; // Идентификатор.
	КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	ЗаписыватьВЖурналРегистрации = Истина;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Переход на версию %1 (общие данные)'"),
			ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()));

		УстановитьПривилегированныйРежим(Истина);

			// Основные действия.
#Область ОсновныеДействия

			КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ОсновныеДействия", // Идентификатор.
				НСтр("ru='Основные действия'"));

				Константы.РазрешенаРаботаСНовостями.Установить(Истина);
				Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Установить(Истина);

				// Перед загрузкой новостей из метаданных очистим сведения о последних загрузках,
				//  т.к. из-за них новости могут не загрузиться.
				НаборЗаписей = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьНаборЗаписей();
				НаборЗаписей.Записать(Истина);

				// Код обновления из файлов, встроенных в конфигурацию.
				// После загрузки новостей автоматически вызовутся:
				//  ОбработкаНовостей.ПересчитатьНеобработанныеКатегорииНовостей();
				//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся();
				//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Общие(); // Здесь же вызовется ПересчитатьОтборыПоНовостям_Пользовательские();
				//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_ДляОбластиДанных();
				// поэтому явно вызывать их не нужно.
				ЗагрузитьВсеСтандартныеЗначения(КонтекстВыполненияВложенныйВложенный);

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

			// Переопределяемые действия.
#Область ПереопределяемыеДействия

			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".Переопределение", // Идентификатор.
				НСтр("ru='Переопределяемые действия'"));

				ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_4();

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				Неопределено);

#КонецОбласти

		УстановитьПривилегированныйРежим(Ложь);

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию_ХХХ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на новую версию.
// Процедура - для общих данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_5() Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_5"; // Идентификатор.
	КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	ЗаписыватьВЖурналРегистрации = Истина;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Переход на версию %1 (общие данные)'"),
			ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()));

		УстановитьПривилегированныйРежим(Истина);

			// Основные действия.
#Область ОсновныеДействия

			КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ОсновныеДействия", // Идентификатор.
				НСтр("ru='Основные действия'"));

				Константы.РазрешенаРаботаСНовостями.Установить(Истина);
				Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Установить(Истина);

				// Перед загрузкой новостей из метаданных очистим сведения о последних загрузках,
				//  т.к. из-за них новости могут не загрузиться.
				НаборЗаписей = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьНаборЗаписей();
				НаборЗаписей.Записать(Истина);

				// Код обновления из файлов, встроенных в конфигурацию.
				// После загрузки новостей автоматически вызовутся:
				//  ОбработкаНовостей.ПересчитатьНеобработанныеКатегорииНовостей();
				//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся();
				//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Общие(); // Здесь же вызовется ПересчитатьОтборыПоНовостям_Пользовательские();
				//  ОбработкаНовостей.ПересчитатьОтборыПоНовостям_ДляОбластиДанных();
				// поэтому явно вызывать их не нужно.
				ЗагрузитьВсеСтандартныеЗначения(КонтекстВыполненияВложенныйВложенный);

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

			// Переопределяемые действия.
#Область ПереопределяемыеДействия

			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".Переопределение", // Идентификатор.
				НСтр("ru='Переопределяемые действия'"));

				ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_5();

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				Неопределено);

#КонецОбласти

		УстановитьПривилегированныйРежим(Ложь);

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию_ХХХ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на новую версию.
// Процедура - для общих данных.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_2_3() Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_2_3"; // Идентификатор.
	КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	ЗаписыватьВЖурналРегистрации = Истина;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Переход на версию %1 (общие данные)'"),
			ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()));

		УстановитьПривилегированныйРежим(Истина);

			// Основные действия.
#Область ОсновныеДействия

#Область ОсновныеДействия_ВключениеФОНовости

			КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ОсновныеДействия/ФОРазрешенаРаботаСНовостями", // Идентификатор.
				НСтр("ru='Основные действия / Установка ФО Разрешена работа с новостями'"));

				// Необходимо заново включить константы работы с новостями.
				// При отключении ФО пользователь увидит дополнительное предупреждение и еще раз подумает, прежде чем отключать.
				Если Константы.РазрешенаРаботаСНовостями.Получить() <> Истина Тогда
					Константы.РазрешенаРаботаСНовостями.Установить(Истина);
				КонецЕсли;
				Если Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Получить() <> Истина Тогда
					Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Установить(Истина);
				КонецЕсли;

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ОсновныеДействия_НастройкаПараметровДоступаКСерверамНовостей

			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ОсновныеДействия/НастройкиНовостей", // Идентификатор.
				НСтр("ru='Основные действия / Настройки новостей'"));

				// Необходимо установить параметры доступа к серверам Новостного центра.
				НастройкиПолученияНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
					"НастройкиПолученияНовостей",
					,
					,
					""); // Для всех пользователей

				ЛогШаговВыполненияВложенный.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Было:
							|%1'"),
						ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(НастройкиПолученияНовостей, "=", Символы.ПС)));

				НастройкиПолученияНовостей.Вставить("ВебСервисыКоличествоПопытокСоединения", 1);
				НастройкиПолученияНовостей.Вставить("HTTPСоединениеКоличествоПопытокСоединения", 1);
				НастройкиПолученияНовостей.Вставить("HTTPСоединениеКоличествоПопытокПолученияФайла", 1);

				ЛогШаговВыполненияВложенный.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Стало:
							|%1'"),
						ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(НастройкиПолученияНовостей, "=", Символы.ПС)));

				ХранилищаНастроек.НастройкиНовостей.Сохранить(
					"НастройкиПолученияНовостей",
					,
					НастройкиПолученияНовостей,
					,
					""); // Для всех пользователей

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				Неопределено);

#КонецОбласти

#КонецОбласти

		УстановитьПривилегированныйРежим(Ложь);

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Обновление ИБ. ОбщиеДанные. ПерейтиНаВерсию_ХХХ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на любую новую версию.
// Процедура - для каждой области данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию() Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию"; // Идентификатор.
	КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	ЗаписыватьВЖурналРегистрации = Истина;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Переход на версию %1 (разделенные данные)'"),
			ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()));

		ЕстьОшибки = Ложь;

		Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
			ОписаниеРезультата = НСтр("ru='Работа с новостями не поддерживается для внешнего пользователя. Обработчик обновления пропущен.'");
			ЕстьОшибки = Истина;
		КонецЕсли;

		Если ЕстьОшибки = Ложь Тогда

			УстановитьПривилегированныйРежим(Истина);

				// Основные действия.
#Область ОсновныеДействия

				КодРезультатаВложенный = 0;
				ЛогШаговВыполненияВложенный = Новый Массив;
				ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенный,
					"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".ОсновныеДействия", // Идентификатор.
					НСтр("ru='Основные действия'"));

					РазрешенаРаботаСНовостями = Константы.РазрешенаРаботаСНовостями.Получить();
					Если РазрешенаРаботаСНовостями = Истина Тогда
						// Оптимизировать отборы не нужно, т.к. они были оптимизированы на этапе обновления общих данных.
						// Для области данных доступен только пересчет отборов новостей по области данных.
						КонтекстВыполненияВложенныйВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
						ПересчитатьОтборыПоНовостям_ДляОбластиДанных(КонтекстВыполненияВложенныйВложенный);
					Иначе
						ЛогШаговВыполненияВложенный.Добавить(НСтр("ru='Работа с новостями отключена. Обработчик пропущен.'"));
					КонецЕсли;

				ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенный,
					КодРезультатаВложенный,
					СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
					КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

				// Переопределяемые действия.
#Область ПереопределяемыеДействия

				КодРезультатаВложенный = 0;
				ЛогШаговВыполненияВложенный = Новый Массив;
				ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенный,
					"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".Переопределение", // Идентификатор.
					НСтр("ru='Переопределяемые действия'"));

					ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию();

				ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенный,
					КодРезультатаВложенный,
					СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
					Неопределено);

#КонецОбласти

			УстановитьПривилегированныйРежим(Ложь);

		КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на новую версию.
// Процедура - для каждой области данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_4() Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_4"; // Идентификатор.
	КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	ЗаписыватьВЖурналРегистрации = Истина;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Переход на версию %1 (разделенные данные)'"),
			ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()));

		ЕстьОшибки = Ложь;

		Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
			ОписаниеРезультата = НСтр("ru='Работа с новостями не поддерживается для внешнего пользователя. Обработчик обновления пропущен.'");
			ЕстьОшибки = Истина;
		КонецЕсли;

		Если ЕстьОшибки = Ложь Тогда

			// Основные действия.
#Область ОсновныеДействия

			// Нет основных действий.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;

#КонецОбласти

			// Переопределяемые действия.
#Область ПереопределяемыеДействия

			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".Переопределение", // Идентификатор.
				НСтр("ru='Переопределяемые действия'"));

				ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_4();

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				Неопределено);

#КонецОбласти

		КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию_ХХХ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на новую версию.
// Процедура - для каждой области данных.
// Перенесено в этот модуль из ОбновлениеИнформационнойБазыБИП,
//  чтобы при частичном внедрении (без подсистемы Новостей) не выдавались ошибки при проверке конфигурации.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_5() Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_5"; // Идентификатор.
	КонтекстВыполнения = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	ЗаписыватьВЖурналРегистрации = Истина;

	КонтекстВыполненияВложенный = ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОбработкаНовостей." + НаименованиеПроцедурыФункции, // Идентификатор.
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Переход на версию %1 (разделенные данные)'"),
			ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()));

		ЕстьОшибки = Ложь;

		Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
			ОписаниеРезультата = НСтр("ru='Работа с новостями не поддерживается для внешнего пользователя. Обработчик обновления пропущен.'");
			ЕстьОшибки = Истина;
		КонецЕсли;

		Если ЕстьОшибки = Ложь Тогда

			// Основные действия.
#Область ОсновныеДействия

			// Нет основных действий.
			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;

#КонецОбласти

			// Переопределяемые действия.
#Область ПереопределяемыеДействия

			КодРезультатаВложенный = 0;
			ЛогШаговВыполненияВложенный = Новый Массив;
			ОбработкаНовостейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОбработкаНовостей." + НаименованиеПроцедурыФункции + ".Переопределение", // Идентификатор.
				НСтр("ru='Переопределяемые действия'"));

				ОбработкаНовостейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_5();

			ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС),
				Неопределено);

#КонецОбласти

		КонецЕсли;

	ШагВыполнения = ОбработкаНовостейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Обновление ИБ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Обновление ИБ. ОбластьДанных. ПерейтиНаВерсию_ХХХ'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Функция проверяет правильность внедрения подсистемы Новости.
// В случае ошибок возвращаются тексты ошибок.
//
// Параметры:
//  ВариантПроверки - Строка - Вариант проверки ("ТолькоПереопределения", "Все").
//
// Возвращаемое значение:
//  - Строка - тексты ошибок или пустая строка, если ошибок не было.
//
Функция ПроверитьПравильностьВнедренияПодсистемы(ВариантПроверки = "Все") Экспорт

	Результат = "";

	// 1. Проверить правильность настройки состава общих реквизитов.
	Если ВариантПроверки = "Все" Тогда

		Свойство_Использовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
		Свойство_НеИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
		РезультатЛокальный = "";

		ИмяРеквизита = "ОбластьДанныхОсновныеДанные";
		НайденныйРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		Если НайденныйРеквизит <> Неопределено Тогда
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей,                           РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Константы.НастройкиНовостей,                                         РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Константы.РазрешенаРаботаСНовостями,                                 РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет,                    РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Справочники.ЗначенияКатегорийНовостей,                               РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Справочники.ЛентыНовостей,                                           РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Справочники.Новости,                                                 РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.ПланыВидовХарактеристик.КатегорииНовостей,                           РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ВсеОбновленияНовостей,                              РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ДатыЗагрузкиПоследнихНовостей,                      РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей,           РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ЗначенияКатегорийОбщие,                             РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ЗначенияКатегорийДляОбластиДанных,                  РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ЗначенияКатегорийПользовательские,                  РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий,                   РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные,     РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейПростые,                           РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные,             РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.НастройкиПользователейБИП,                          РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейОбщие,                        РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейДляОбластиДанных,             РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейПользовательские,             РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ОтключенныеЛентыНовостей,                           РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ОтключенныеПанелиКонтекстныхНовостей,               РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ПериодическиеСвойстваНовостей,                      РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ПривязкаНовостейКМетаданным,                        РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.РазрешенныеДляРедактированияЛентыНовостей,          РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие,                 РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных,      РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские,      РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся,       РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.СвойстваНовостей,                                   РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.СостоянияНовостей,                                  РезультатЛокальный);
		КонецЕсли;
		Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
			Результат = Результат
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибки настройки общего реквизита ОбластьДанныхОсновныеДанные:
						|%1'")
						+ Символы.ПС
						+ Символы.ПС,
					РезультатЛокальный);
		КонецЕсли;

		РезультатЛокальный = "";
		ИмяРеквизита = "ОбластьДанныхВспомогательныеДанные";
		НайденныйРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		Если НайденныйРеквизит <> Неопределено Тогда
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей,                           РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Константы.НастройкиНовостей,                                         РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Константы.РазрешенаРаботаСНовостями,                                 РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет,                    РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Справочники.ЗначенияКатегорийНовостей,                               РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Справочники.ЛентыНовостей,                                           РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.Справочники.Новости,                                                 РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.ПланыВидовХарактеристик.КатегорииНовостей,                           РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ВсеОбновленияНовостей,                              РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ДатыЗагрузкиПоследнихНовостей,                      РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей,           РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ЗначенияКатегорийОбщие,                             РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.ЗначенияКатегорийДляОбластиДанных,                  РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.ЗначенияКатегорийПользовательские,                  РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий,                   РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные,     РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейПростые,                           РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные,             РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.НастройкиПользователейБИП,                          РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейОбщие,                        РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейДляОбластиДанных,             РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейПользовательские,             РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.ОтключенныеПанелиКонтекстныхНовостей,               РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.ОтключенныеЛентыНовостей,                           РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ПериодическиеСвойстваНовостей,                      РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.ПривязкаНовостейКМетаданным,                        РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.РазрешенныеДляРедактированияЛентыНовостей,          РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие,                 РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных,      РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские,      РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся,       РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_НеИспользовать, Метаданные.РегистрыСведений.СвойстваНовостей,                                   РезультатЛокальный);
			Проверка_ОбщиеРеквизиты(НайденныйРеквизит, Свойство_Использовать,   Метаданные.РегистрыСведений.СостоянияНовостей,                                  РезультатЛокальный);
		КонецЕсли;
		Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
			Результат = Результат
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибки настройки общего реквизита ОбластьДанныхВспомогательныеДанные:
						|%1'")
						+ Символы.ПС
						+ Символы.ПС,
					РезультатЛокальный);
		КонецЕсли;

	КонецЕсли;

	// 2. Проверить правильность настройки прав для ролей АдминистраторСистемы и ПолныеПрава.
	// Проверяются не все права, а минимально необходимые: Чтение и Редактирование.
	Если ВариантПроверки = "Все" Тогда

		РольАС = Метаданные.Роли.АдминистраторСистемы;
		РольПП = Метаданные.Роли.ПолныеПрава;

		РезультатЛокальный = "";
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.Константы.НастройкиНовостей,                                     РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.Константы.РазрешенаРаботаСНовостями,                             РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет,                РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.Справочники.ЗначенияКатегорийНовостей,                           РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.Справочники.ЛентыНовостей,                                       РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.Справочники.Новости,                                             РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.ПланыВидовХарактеристик.КатегорииНовостей,                       РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.ВсеОбновленияНовостей,                          РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.ДатыЗагрузкиПоследнихНовостей,                  РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей,       РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.ЗначенияКатегорийОбщие,                         РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ЗначенияКатегорийДляОбластиДанных,              РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ЗначенияКатегорийПользовательские,              РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий,               РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные, РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.КатегорииНовостейПростые,                       РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные,         РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.НастройкиПользователейБИП,                      РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейОбщие,                    РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейДляОбластиДанных,         РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейПользовательские,         РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ОтключенныеЛентыНовостей,                       РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ОтключенныеПанелиКонтекстныхНовостей,           РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.ПериодическиеСвойстваНовостей,                  РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.ПривязкаНовостейКМетаданным,                    РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.РазрешенныеДляРедактированияЛентыНовостей,      РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие,             РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных,  РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские,  РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся,   РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Истина, Метаданные.РегистрыСведений.СвойстваНовостей,                               РезультатЛокальный);
		Проверка_Права(РольАС, "Редактирование", Ложь,   Метаданные.РегистрыСведений.СостоянияНовостей,                              РезультатЛокальный);

		Проверка_Права(РольАС, "Чтение", Истина, Метаданные.РегистрыСведений.ЗначенияКатегорийДляОбластиДанных,             РезультатЛокальный);
		Проверка_Права(РольАС, "Чтение", Истина, Метаданные.РегистрыСведений.ЗначенияКатегорийПользовательские,             РезультатЛокальный);
		Проверка_Права(РольАС, "Чтение", Истина, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейПользовательские,        РезультатЛокальный);
		Проверка_Права(РольАС, "Чтение", Истина, Метаданные.РегистрыСведений.ОтключенныеЛентыНовостей,                      РезультатЛокальный);
		Проверка_Права(РольАС, "Чтение", Истина, Метаданные.РегистрыСведений.ОтключенныеПанелиКонтекстныхНовостей,          РезультатЛокальный);
		Проверка_Права(РольАС, "Чтение", Истина, Метаданные.РегистрыСведений.РазрешенныеДляРедактированияЛентыНовостей,     РезультатЛокальный);
		Проверка_Права(РольАС, "Чтение", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские, РезультатЛокальный);
		Проверка_Права(РольАС, "Чтение", Истина, Метаданные.РегистрыСведений.СостоянияНовостей,                             РезультатЛокальный);
		Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
			Результат = Результат
				+ НСтр("ru='Ошибки настройки прав для роли АдминистраторСистемы:'")
				+ Символы.ПС + РезультатЛокальный
				+ Символы.ПС + Символы.ПС;
		КонецЕсли;

		РезультатЛокальный = "";
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.Константы.НастройкиНовостей,                                     РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.Константы.РазрешенаРаботаСНовостями,                             РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет,                РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.Справочники.ЗначенияКатегорийНовостей,                           РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.Справочники.ЛентыНовостей,                                       РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.Справочники.Новости,                                             РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.ПланыВидовХарактеристик.КатегорииНовостей,                       РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ВсеОбновленияНовостей,                          РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ДатыЗагрузкиПоследнихНовостей,                  РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей,       РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ЗначенияКатегорийОбщие,                         РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.ЗначенияКатегорийДляОбластиДанных,              РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.ЗначенияКатегорийПользовательские,              РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий,               РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные, РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.КатегорииНовостейПростые,                       РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные,         РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.НастройкиПользователейБИП,                      РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейОбщие,                    РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейДляОбластиДанных,         РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейПользовательские,         РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.ОтключенныеЛентыНовостей,                       РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.ОтключенныеПанелиКонтекстныхНовостей,           РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ПериодическиеСвойстваНовостей,                  РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.ПривязкаНовостейКМетаданным,                    РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.РазрешенныеДляРедактированияЛентыНовостей,      РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие,             РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных,  РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Пользовательские,  РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся,   РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Ложь,   Метаданные.РегистрыСведений.СвойстваНовостей,                               РезультатЛокальный);
		Проверка_Права(РольПП, "Редактирование", Истина, Метаданные.РегистрыСведений.СостоянияНовостей,                              РезультатЛокальный);

		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.Константы.НастройкиНовостей,                                     РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.Константы.РазрешенаРаботаСНовостями,                             РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет,                РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.Справочники.ЗначенияКатегорийНовостей,                           РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.Справочники.ЛентыНовостей,                                       РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.Справочники.Новости,                                             РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.ПланыВидовХарактеристик.КатегорииНовостей,                       РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ВсеОбновленияНовостей,                          РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ДатыЗагрузкиПоследнихНовостей,                  РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей,       РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ЗначенияКатегорийОбщие,                         РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ЗначенияКатегорийДляОбластиДанных,              РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ЗначенияКатегорийПользовательские,              РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий,               РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные, РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.КатегорииНовостейПростые,                       РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные,         РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейОбщие,                    РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ОтборыПоЛентамНовостейДляОбластиДанных,         РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ПериодическиеСвойстваНовостей,                  РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.ПривязкаНовостейКМетаданным,                    РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_Общие,             РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных,  РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся,   РезультатЛокальный);
		Проверка_Права(РольПП, "Чтение", Истина, Метаданные.РегистрыСведений.СвойстваНовостей,                               РезультатЛокальный);
		Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
			Результат = Результат
				+ НСтр("ru='Ошибки настройки прав для роли ПолныеПрава:'")
				+ Символы.ПС + РезультатЛокальный
				+ Символы.ПС + Символы.ПС;
		КонецЕсли;

	КонецЕсли;

	// 3. Правильно настроен идентификатор конфигурации.
	Если (ВариантПроверки = "Все") ИЛИ (ВариантПроверки = "ТолькоПереопределения") Тогда

		РезультатЛокальный = "";
		ИмяКонфигурации = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ИмяКонфигурации"); // Только имя продукта
		Если ВРег(ИмяКонфигурации) = ВРег("Unknown") Тогда
			РезультатЛокальный = НСтр("ru='Не настроен идентификатор конфигурации.
				|Для его настройки необходимо внести изменения в общий модуль
				|ОбработкаНовостейПереопределяемый.ЗначениеПредопределеннойКатегории,
				|для строки условия ProductName.
				|В противном случае новости для этой конфигурации приходить НЕ будут.'")
				+ Символы.ПС;
		КонецЕсли;

		РазрешенныеСимволы = ОбработкаНовостейКлиентСервер.РазрешенныеДляИдентификацииСимволы();
		СписокЗапрещенныхСимволов = ПроверитьСтрокуНаЗапрещенныеСимволы(
			ИмяКонфигурации,
			РазрешенныеСимволы);

		Если СписокЗапрещенныхСимволов.Количество() > 0 Тогда
			Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
				РезультатЛокальный = РезультатЛокальный + Символы.Символы.ПС;
			КонецЕсли;
			РезультатЛокальный = РезультатЛокальный  + НСтр("ru='Неправильно настроен идентификатор конфигурации.
				|Для его настройки необходимо внести изменения в общий модуль
				|ОбработкаНовостейПереопределяемый.ЗначениеПредопределеннойКатегории,
				|для строки условия ProductName.
				|Идентификатор конфигурации должен состоять из английских букв, цифр, знака минуса и знака подчеркивания.'")
				+ Символы.ПС;
		КонецЕсли;

		Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
			Результат = Результат
				+ НСтр("ru='Ошибки настройки кода конфигурации:'")
				+ Символы.ПС + РезультатЛокальный
				+ Символы.ПС + Символы.ПС;
		КонецЕсли;

	КонецЕсли;

	// 4. Версия конфигурации должна иметь правильный формат (А.Б.В.Г - четыре числа, разделенные точками).
	// Если версия в метаданных особого формата (известны следующие случаи: А.Б.В.Г.Д или А.Б.В.Г/Д.Е.Ж.З),
	//  то в переопределяемом модуле ОбработкаНовостейПереопределяемый.ЗначениеПредопределеннойКатегории
	//  "особая" версия должна приводиться к виду А.Б.В.Г.
	Если (ВариантПроверки = "Все") ИЛИ (ВариантПроверки = "ТолькоПереопределения") Тогда

		РезультатЛокальный = "";
		Версия = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПродукта");
		МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Версия, ".");
		Если МассивСлов.Количество() <> 4 Тогда
			РезультатЛокальный = НСтр("ru='Неправильно настроена версия конфигурации (количество чисел отлично от 4).
				|В метаданных, в поле Версия должны быть данные вида А.Б.В.Г (четыре числа, разделенные точкой).
				|Если по каким-то причинам версия в метаданных задана в отличном от А.Б.В.Г формате,
				|то необходимо внести изменения в общий модуль
				|ОбработкаНовостейПереопределяемый.ЗначениеПредопределеннойКатегории,
				|для строки условия ProductVersion.'")
		Иначе
			НайденныеНеправильныеСимволы = Новый Массив;
			ВсеЦифры = ВсеЦифры();
			Для Каждого ТекущееСлово Из МассивСлов Цикл
				Для С=1 По СтрДлина(ТекущееСлово) Цикл
					ТекущаяБуква = Сред(ТекущееСлово, С, 1);
					Если СтрНайти(ВсеЦифры, ТекущаяБуква) = 0 Тогда
						Если НайденныеНеправильныеСимволы.Найти(ТекущаяБуква) = Неопределено Тогда
							НайденныеНеправильныеСимволы.Добавить(ТекущаяБуква);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если НайденныеНеправильныеСимволы.Количество() > 0 Тогда
				РезультатЛокальный = НСтр("ru='Неправильно настроена версия конфигурации (есть неправильные символы).
					|В метаданных, в поле Версия должны быть данные вида А.Б.В.Г (четыре числа, разделенные точкой).
					|Если по каким-то причинам версия в метаданных задана в отличном от А.Б.В.Г формате,
					|то необходимо внести изменения в общий модуль
					|ОбработкаНовостейПереопределяемый.ЗначениеПредопределеннойКатегории,
					|для строки условия ProductVersion.
					|Список неправильных символов: %НайденныеНеправильныеСимволы%'");
				СНайденныеНеправильныеСимволы = "";
				Для Каждого ТекущийНеправильныйСимвол Из НайденныеНеправильныеСимволы Цикл
					СНайденныеНеправильныеСимволы = СНайденныеНеправильныеСимволы + "#" + ТекущийНеправильныйСимвол + "#";
				КонецЦикла;
				СНайденныеНеправильныеСимволы = СтрЗаменить(СНайденныеНеправильныеСимволы, "##", ", ");
				СНайденныеНеправильныеСимволы = СтрЗаменить(СНайденныеНеправильныеСимволы, "#", "");
				РезультатЛокальный = СтрЗаменить(РезультатЛокальный, "%НайденныеНеправильныеСимволы%", СНайденныеНеправильныеСимволы);
			КонецЕсли;
		КонецЕсли;

		Если НЕ ПустаяСтрока(РезультатЛокальный) Тогда
			Результат = Результат
				+ НСтр("ru='Ошибки настройки версии конфигурации:'")
				+ Символы.ПС + РезультатЛокальный
				+ Символы.ПС + Символы.ПС;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура проверяет правильность установки свойств состава общего реквизита для объекта метаданных.
//
// Параметры:
//  ЛокальныйОбщийРеквизит          - ОбщийРеквизит - общий реквизит, для которого осуществляется проверка;
//  ЛокальныйОбъектМетаданных       - ОбъектМетаданных - проверяемый объект;
//  ПравильноеЗначениеИспользования - ИспользованиеОбщегоРеквизита - правильное значение, которое должно быть;
//  Результат                       - Строка - сюда будет дописан текст ошибки.
//
Процедура Проверка_ОбщиеРеквизиты(
			ЛокальныйОбщийРеквизит,
			ПравильноеЗначениеИспользования,
			ЛокальныйОбъектМетаданных,
			Результат)

	Свойство_ОбъектАвто           = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто;
	Свойство_ОбъектИспользовать   = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	Свойство_ОбъектНеИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
	Свойство_АвтоИспользовать     = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать;
	Свойство_АвтоНеИспользовать   = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать;
	СоответствующееСвойствоОбщегоРеквизита = Неопределено;
	Если ПравильноеЗначениеИспользования = Свойство_ОбъектИспользовать Тогда
		СоответствующееСвойствоОбщегоРеквизита = Свойство_АвтоИспользовать;
	ИначеЕсли ПравильноеЗначениеИспользования = Свойство_ОбъектНеИспользовать Тогда
		СоответствующееСвойствоОбщегоРеквизита = Свойство_АвтоНеИспользовать;
	КонецЕсли;

	НайденныйЭлемент = ЛокальныйОбщийРеквизит.Состав.Найти(ЛокальныйОбъектМетаданных);
	Если НайденныйЭлемент <> Неопределено Тогда
		Если (НайденныйЭлемент.Использование = ПравильноеЗначениеИспользования)
				ИЛИ ((НайденныйЭлемент.Использование = Свойство_ОбъектАвто)
					И (ЛокальныйОбщийРеквизит.АвтоИспользование = СоответствующееСвойствоОбщегоРеквизита)) Тогда
			// Допустимо, если:
			//  признак Использование = ПравильноеЗначениеИспользования;
			//  признак Использование = Авто и ЛокальныйОбщийРеквизит.Автоиспользование = соответствующее ПравильноеЗначениеИспользования.
		Иначе
			ТекущийРезультат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неправильно установлено использование для %1 в общем реквизите %2.
					|Установлено: %3, ожидается: %4.
					|Также допустимо, что у %1 установлено использование Авто, но тогда у общего реквизита %2 должно быть установлено Автоиспользование в %4.'"),
				ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ЛокальныйОбъектМетаданных) + "." + ЛокальныйОбъектМетаданных.Имя,
				ЛокальныйОбщийРеквизит.Имя,
				Строка(НайденныйЭлемент.Использование),
				Строка(ПравильноеЗначениеИспользования));
			Результат = Результат + ТекущийРезультат + Символы.ПС;
		КонецЕсли;
	Иначе
		ТекущийРезультат = НСтр("ru='Не найден требуемый объект метаданных: %ПолноеИмяМетаданных%'");
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%ПолноеИмяМетаданных%",
			ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ЛокальныйОбъектМетаданных) + "." + ЛокальныйОбъектМетаданных.Имя);
		Результат = Результат + ТекущийРезультат + Символы.ПС;
	КонецЕсли;

КонецПроцедуры

// Процедура проверяет правильность установки прав для объекта метаданных.
//
// Параметры:
//  ЛокальнаяРоль             - Роль - проверяемая роль;
//  ЛокальноеПраво            - Строка - проверяемое право;
//  ПравильноеЗначениеПрава   - Булево - правильное значение, которое должно быть;
//  ЛокальныйОбъектМетаданных - ОбъектМетаданных - проверяемый объект;
//  Результат                 - Строка - сюда будет дописан текст ошибки.
//
Процедура Проверка_Права(
			ЛокальнаяРоль,
			ЛокальноеПраво,
			ПравильноеЗначениеПрава,
			ЛокальныйОбъектМетаданных,
			Результат)

	ТекущееЗначениеПрава = ПравоДоступа(ЛокальноеПраво, ЛокальныйОбъектМетаданных, ЛокальнаяРоль);
	Если ТекущееЗначениеПрава <> ПравильноеЗначениеПрава Тогда
		ТекущийРезультат = НСтр("ru='Неправильно установлено право %Право% в роли %Роль% для %ПолноеИмяМетаданных%. Установлено: %ТекущееЗначениеПрава%, ожидается: %ПравильноеЗначениеПрава%'");
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%ПолноеИмяМетаданных%",
			ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ЛокальныйОбъектМетаданных) + "." + ЛокальныйОбъектМетаданных.Имя);
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%Право%",
			ЛокальноеПраво);
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%Роль%",
			ЛокальнаяРоль.Имя);
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%ТекущееЗначениеПрава%",
			ТекущееЗначениеПрава);
		ТекущийРезультат = СтрЗаменить(
			ТекущийРезультат,
			"%ПравильноеЗначениеПрава%",
			ПравильноеЗначениеПрава);
		Результат = Результат + ТекущийРезультат + Символы.ПС;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПользователями

// Функция возвращает текущего пользователя ИБ.
// Если список пользователей информационной базы пустой, то в качестве текущего пользователя будет возвращен
//  пользователь с пустым именем и идентификатором объекта, полученного методом НайтиПоИмени, если в параметре указано пустое имя.
//
// Возвращаемое значение:
//  ПользовательИнформационнойБазы - текущий пользователь ИБ. Может быть пустым, если в конфигураторе не заполнены пользователи ИБ.
//
Функция ТекущийПользовательИБ() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	Возврат ПользовательИБ;

КонецФункции

// Функция возвращает список пользователей, которым разрешено редактировать новости в этой ленте новостей.
// Разрешено редактировать новости пользователям с включенной ролью ПолныеПрава (без каких-либо дополнительных настроек)
//  и пользователям с ролью "РедактированиеНовостей" (если это разрешение явно указано).
// У ЛентыНовостей обязательно должны быть такие настройки: ЗагруженоССервера = Ложь, ЛокальнаяЛентаНовостей = Истина.
//
// Параметры:
//  ЛентаНовостей             - СправочникСсылка.ЛентыНовостей, Структура - Лента новостей,
//                              для которой необходимо выполнить проверку.
//                              Если передана структура, то там обязательно должны быть ключи:
//      * Ссылка                 - СправочникСсылка.ЛентыНовостей;
//      * ЗагруженоССервера      - Булево;
//      * ЛокальнаяЛентаНовостей - Булево;
//  ВыводитьВсехПользователей - Булево - Истина, если выводить всех пользователей с ролью РедактированиеНовостей,
//                                       Ложь - если выводить только тех, у кого право редактирования включено;
//
// Возвращаемое значение:
//   Массив - массив структур всех пользователей, которым разрешено редактировать новости
//              в этой ленте новостей, с ключами:
//    * Пользователь              - СправочникСсылка.Пользователи;
//    * ПользовательПредставление - Строка;
//    * ПолныеПрава               - Булево - доступна роль АдминистраторСистемы и ПолныеПрава
//                                    (т.е. может редактировать новости без дополнительных разрешений);
//    * Пометка                   - Булево - Истина, если разрешено редактировать ленту новостей.
//
Функция ПолучитьРедакторовЛентыНовостей(ЛентаНовостей, ВыводитьВсехПользователей = Ложь) Экспорт

	Результат = Новый Массив;

	ДанныеЛентыНовостей = Новый Структура("Ссылка, ЗагруженоССервера, ЛокальнаяЛентаНовостей",
		Справочники.ЛентыНовостей.ПустаяСсылка(),
		Истина,
		Ложь);
	ЗаполнитьЗначенияСвойств(ДанныеЛентыНовостей, ЛентаНовостей);

	Если (ДанныеЛентыНовостей.ЗагруженоССервера = Ложь)
			И (ДанныеЛентыНовостей.ЛокальнаяЛентаНовостей = Истина) Тогда
		МассивВсехРедакторовНовостей = ОбработкаНовостейПовтИсп.ПолучитьСписокРедакторовНовостей();
		МассивПользователейСРольюРедакторНовостей = Новый Массив;
		// Пользователей с ролью АдминистраторСистемы и ПолныеПрава добавить сразу,
		//  с ролью РедактированиеНовостей - проверить.
		Для Каждого ТекущийРедактор Из МассивВсехРедакторовНовостей Цикл
			// Подготовить список пользователей с ролью "АдминистраторСистемы" и "ПолныеПрава" - им разрешено
			//  редактировать новости без каких-либо ограничений.
			// Подготовить список пользователей с ролью "РедактированиеНовостей" для дальнейшей обработки.
			Если ТекущийРедактор.ПолныеПрава = Истина Тогда
				ОписаниеПользователя = Новый Структура;
					ОписаниеПользователя.Вставить("Пользователь", ТекущийРедактор.Пользователь);
					ОписаниеПользователя.Вставить("ПользовательПредставление", ТекущийРедактор.ПользовательПредставление);
					ОписаниеПользователя.Вставить("ПолныеПрава", Истина);
					ОписаниеПользователя.Вставить("Пометка", Истина);
				Результат.Добавить(ОписаниеПользователя);
			Иначе
				МассивПользователейСРольюРедакторНовостей.Добавить(ТекущийРедактор.Пользователь);
			КонецЕсли;
		КонецЦикла;
		// Если есть пользователи с ролью РедакторНовостей, то проверить - разрешено ли им редактировать
		//  именно эту ленту новостей.
		Если МассивПользователейСРольюРедакторНовостей.Количество() > 0 Тогда
			Если ВыводитьВсехПользователей = Истина Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	Спр.Ссылка       КАК Пользователь,
					|	Спр.Наименование КАК ПользовательПредставление,
					|	ВЫБОР
					|		КОГДА Рег.Пользователь ЕСТЬ NULL ТОГДА
					|			ЛОЖЬ
					|		ИНАЧЕ
					|			ИСТИНА
					|	КОНЕЦ            КАК Пометка
					|ИЗ
					|	Справочник.Пользователи КАК Спр
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|	РегистрСведений.РазрешенныеДляРедактированияЛентыНовостей КАК Рег
					|	ПО
					|		Рег.Пользователь = Спр.Ссылка
					|		И Рег.ЛентаНовостей = &ЛентаНовостей
					|ГДЕ
					|	Спр.Ссылка В (&МассивПользователейСРольюРедакторНовостей)
					|";
				Запрос.УстановитьПараметр("МассивПользователейСРольюРедакторНовостей", МассивПользователейСРольюРедакторНовостей);
				Запрос.УстановитьПараметр("ЛентаНовостей", ДанныеЛентыНовостей.Ссылка);
				РезультатЗапроса = Запрос.Выполнить(); // ПолучитьРедакторовЛентыНовостей / ВыводитьВсехПользователей - истина.
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						ОписаниеПользователя = Новый Структура;
							ОписаниеПользователя.Вставить("Пользователь", Выборка.Пользователь);
							ОписаниеПользователя.Вставить("ПользовательПредставление", Выборка.ПользовательПредставление);
							ОписаниеПользователя.Вставить("ПолныеПрава", Ложь);
							ОписаниеПользователя.Вставить("Пометка", Выборка.Пометка);
						Результат.Добавить(ОписаниеПользователя);
					КонецЦикла;
				КонецЕсли;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	Рег.Пользователь              КАК Пользователь,
					|	Рег.Пользователь.Наименование КАК ПользовательПредставление
					|ИЗ
					|	РегистрСведений.РазрешенныеДляРедактированияЛентыНовостей КАК Рег
					|ГДЕ
					|	Рег.ЛентаНовостей = &ЛентаНовостей
					|	И Рег.Пользователь В (&МассивПользователейСРольюРедакторНовостей)
					|";
				Запрос.УстановитьПараметр("МассивПользователейСРольюРедакторНовостей", МассивПользователейСРольюРедакторНовостей);
				Запрос.УстановитьПараметр("ЛентаНовостей", ДанныеЛентыНовостей.Ссылка);
				РезультатЗапроса = Запрос.Выполнить(); // ПолучитьРедакторовЛентыНовостей / ВыводитьВсехПользователей - ложь.
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						ОписаниеПользователя = Новый Структура;
							ОписаниеПользователя.Вставить("Пользователь", Выборка.Пользователь);
							ОписаниеПользователя.Вставить("ПользовательПредставление", Выборка.ПользовательПредставление);
							ОписаниеПользователя.Вставить("ПолныеПрава", Ложь);
							ОписаниеПользователя.Вставить("Пометка", Истина);
						Результат.Добавить(ОписаниеПользователя);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЛогИОтладка

// АПК:142-выкл 5 необязательных параметров.

// Процедура записывает сообщение в журнал регистрации.
//
// Параметры:
//  ИмяСобытия                      - строка;
//  ИдентификаторШага               - строка;
//  УровеньРегистрации              - строковое представление константы УровеньЖурналаРегистрации;
//  ОбъектМетаданных                - строковое представление объекта метаданных;
//  Данные                          - данные;
//  Комментарий                     - строка - произвольный комментарий;
//  ВестиПодробныйЖурналРегистрации - Булево - признак записи незначащих событий (Информации и Примечания).
//
Процедура ЗаписатьСообщениеВЖурналРегистрации(
			ИмяСобытия,
			ИдентификаторШага,
			УровеньРегистрации = "Ошибка", // Идентификатор.
			ОбъектМетаданных = "",
			Данные = Неопределено,
			Комментарий = "",
			ВестиПодробныйЖурналРегистрации = Ложь) Экспорт

	ОбъектМетаданныхЛокальный = Неопределено;
	Попытка
		Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
			Если ПустаяСтрока(ОбъектМетаданных) Тогда
				ОбъектМетаданныхЛокальный = Неопределено;
			Иначе
				ОбъектМетаданныхЛокальный = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОбъектМетаданных) = Тип("ОбъектМетаданных") Тогда
			ОбъектМетаданныхЛокальный = ОбъектМетаданных;
		Иначе
			ОбъектМетаданныхЛокальный = Неопределено;
		КонецЕсли;
	Исключение
		ОбъектМетаданныхЛокальный = Неопределено;
	КонецПопытки;

	Если ВРег(УровеньРегистрации) = ВРег("Информация") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Информация;
	ИначеЕсли ВРег(УровеньРегистрации) = ВРег("Предупреждение") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли ВРег(УровеньРегистрации) = ВРег("Примечание") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Примечание;
	ИначеЕсли ВРег(УровеньРегистрации) = ВРег("Ошибка") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли ТипЗнч(УровеньРегистрации) = Тип("УровеньЖурналаРегистрации") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньРегистрации;
	Иначе
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;

	// Сообщения Информация, Примечание писать только если включена настройка "ЖурналРегистрации_ПодробнаяЗапись",
	//  которую можно получить ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации() или другим способом (для других подсистем).

	ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Ложь;
	Если УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Предупреждение Тогда // Всегда писать
		ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина;
	ИначеЕсли УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Ошибка Тогда // Всегда писать
		ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина;
	ИначеЕсли ВестиПодробныйЖурналРегистрации = Истина Тогда
		ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина;
	КонецЕсли;

	Если ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина Тогда
		ИмяСобытияЛокальный = СтрЗаменить(ИмяСобытия, ". ", "."); // Точку с пробелом менять на точку.
		КомментарийЛокальный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Идентификатор шага: %1
				|%2'"),
				ИдентификаторШага,
				Комментарий);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЛокальный, // ИмяСобытия
			УровеньЖурналаРегистрацииЛокальный, // УровеньЖурналаРегистрации.*
			ОбъектМетаданныхЛокальный, // ОбъектМетаданных
			Данные, // Данные
			КомментарийЛокальный, // Комментарий
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	КонецЕсли;

КонецПроцедуры

// АПК:142-вкл

// Выгружает журнал регистрации по событиям во временное хранилище.
//
// Параметры:
//  ПараметрыОтбора - Структура - структура с ключами:
//   * ДатаНачала    - Дата - начало периода журнала;
//   * ДатаОкончания - Дата - конец периода журнала;
//   * Событие       - Массив - массив событий (см. [МодульПодсистемыКлиентСервер].ПолучитьСписокВсехСобытийЖурналаРегистрации);
//   * Метаданные    - Массив, Неопределено - массив метаданных для отбора.
//  ПараметрыФайлаВыгрузки - Структура, Неопределено - структура с ключами:
//   * Архивировать - Булево - Истина, если необходимо архивировать выгрузку.
//
// Возвращаемое значение:
//   Структура с ключами:
//    * АдресВременногоХранилищаФайла - Строка - Адрес выгруженных данных в хранилище;
//    * ТекстОшибки - Строка - Текст ошибки или пустая строка.
//
Функция ВыгрузитьВсеСобытияЖурналаРегистрации(ПараметрыОтбора, ПараметрыФайлаВыгрузки = Неопределено) Экспорт

	Результат = Новый Структура("АдресВременногоХранилищаФайла, ТекстОшибки", "", "");

	ТипСтруктура = Тип("Структура");
	ТипМассив    = Тип("Массив");

	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ИмяФайлаАрхива     = ПолучитьИмяВременногоФайла("zip");

	// Если действие - длительное (журнал регистрации очень большой), то возможна ситуация,
	//  когда управление будет передано другому рабочему процессу,
	//  находящемуся на другом сервере и тогда временный каталог может стать недоступен.
	// В этом случае у пользователя выскочит ошибка и надо будет снова попробовать выгрузить данные.

	Попытка

		УстановитьПривилегированныйРежим(Истина);

			Если ТипЗнч(ПараметрыОтбора) = ТипСтруктура Тогда
				ПараметрыОтбораПравильный = Новый Структура("ДатаНачала, ДатаОкончания, Событие, Метаданные");
				ЗаполнитьЗначенияСвойств(ПараметрыОтбораПравильный, ПараметрыОтбора);
				Если ПараметрыОтбораПравильный.ДатаНачала = Неопределено Тогда
					ПараметрыОтбораПравильный.Вставить("ДатаНачала", НачалоДня(ТекущаяДатаСеанса()));
				КонецЕсли;
				Если ПараметрыОтбораПравильный.ДатаОкончания = Неопределено Тогда
					ПараметрыОтбораПравильный.Вставить("ДатаОкончания", КонецДня(ТекущаяДатаСеанса()));
				КонецЕсли;
				Если ТипЗнч(ПараметрыОтбораПравильный.Метаданные) <> ТипМассив Тогда
					ПараметрыОтбораПравильный.Удалить("Метаданные");
				ИначеЕсли (ТипЗнч(ПараметрыОтбораПравильный.Метаданные) = ТипМассив)
						И (ПараметрыОтбораПравильный.Метаданные.Количество() = 0) Тогда
					ПараметрыОтбораПравильный.Удалить("Метаданные");
				КонецЕсли;
			КонецЕсли;

			ВыгрузитьЖурналРегистрации(
				ИмяВременногоФайла,
				ПараметрыОтбораПравильный);

			ФайлВременный = Новый Файл(ИмяВременногоФайла);
			Если ФайлВременный.Существует() Тогда
				Если ТипЗнч(ПараметрыФайлаВыгрузки) = ТипСтруктура Тогда
					Если (ПараметрыФайлаВыгрузки.Свойство("Архивировать"))
							И (ПараметрыФайлаВыгрузки.Архивировать = Истина) Тогда
						Архив = Новый ЗаписьZipФайла(
							ИмяФайлаАрхива,
							, // Без пароля
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Выгрузка журнала регистраций библиотеки БИП за период %1...%2'"),
								Формат(ПараметрыОтбораПравильный.ДатаНачала, "ДЛФ=DT"),
								Формат(ПараметрыОтбораПравильный.ДатаОкончания, "ДЛФ=DT")),
							МетодСжатияZIP.Сжатие,
							УровеньСжатияZIP.Максимальный);
						Архив.Добавить(ИмяВременногоФайла, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
						Архив.Записать();
						Результат.Вставить("АдресВременногоХранилищаФайла", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаАрхива)));
					Иначе
						Результат.Вставить("АдресВременногоХранилищаФайла", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла)));
					КонецЕсли;
				КонецЕсли;
			Иначе
				Результат.Вставить("ТекстОшибки",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Файл с выгрузкой событий журнала регистрации не существует.
							|Возможно, отсутствуют события за указанный период (%1...%2).'"),
						Формат(ПараметрыОтбораПравильный.ДатаНачала, "ДЛФ=DT"),
						Формат(ПараметрыОтбораПравильный.ДатаОкончания, "ДЛФ=DT")));
			КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);

	Исключение

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось экспортировать события журнала регистрации в файл по причине:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		Результат.Вставить("ТекстОшибки", ТекстСообщения);

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ВыгрузитьВсеСобытияЖурналаРегистрации'", КодОсновногоЯзыка), // ИдентификаторШага.
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			Истина); // ВестиПодробныйЖурналРегистрации - писать такие сообщения всегда.

	КонецПопытки;

	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ВыгрузитьВсеСобытияЖурналаРегистрации'", КодОсновногоЯзыка), // ИдентификаторШага.
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), // Комментарий
			Истина); // ВестиПодробныйЖурналРегистрации - писать такие сообщения всегда.
	КонецПопытки;

	Попытка
		УдалитьФайлы(ИмяФайлаАрхива);
	Исключение
		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. ВыгрузитьВсеСобытияЖурналаРегистрации'", КодОсновногоЯзыка), // ИдентификаторШага.
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), // Комментарий
			Истина); // ВестиПодробныйЖурналРегистрации - писать такие сообщения всегда.
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Для объекта ХДТО возвращает его xml представление - нужно для отладки.
// В отличие от ОбщегоНазначения.ОбъектXDTOВСтрокуXML возвращает строку другого формата.
//
// Параметры:
//  ОбъектХДТО  - ОбъектXDTO  - требуемый объект;
//  ФабрикаХДТО - ФабрикаXDTO - на каком основании создавать тип (может быть по-умолчанию - из конфигурации, и из веб-сервиса).
//
// Возвращаемое значение:
//   Строка - xml-представление объекта.
//
Функция ПредставлениеОбъектаХДТО(ОбъектХДТО, ФабрикаХДТО = Неопределено) Экспорт

	Результат = "";
	Если ФабрикаХДТО = Неопределено Тогда
		ФабрикаХДТО = ФабрикаXDTO;
	КонецЕсли;

	Если ТипЗнч(ОбъектХДТО) = Тип("ОбъектXDTO") Тогда
		ЗаписьХМЛ = Новый ЗаписьXML;
		ЗаписьХМЛ.УстановитьСтроку(
			Новый ПараметрыЗаписиXML(
				"UTF-8",    // Кодировка
				,           // Версия
				Истина,     // Отступ
				Истина,     // ОтступАтрибутов
				Символы.Таб)); // СимволыОтступа
		Попытка
			ФабрикаХДТО.ЗаписатьXML(ЗаписьХМЛ, ОбъектХДТО);
			Результат = ЗаписьХМЛ.Закрыть();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при получении xml-представления объекта ХДТО:
					|%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:БазовыйФункционал.Отладка'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
				НСтр("ru='БазовыйФункционал. Отладка. ПредставлениеОбъектаХДТО'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
				"Ошибка", // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных.
				, // Данные.
				ТекстСообщения, // Комментарий.
				Истина); // ВестиПодробныйЖурналРегистрации.
		КонецПопытки;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает текст комментария для записи в журнал регистрации.
//
// Параметры:
//  ОписаниеШага  - Строка - описание шага;
//  ШагВыполнения - Структура - структура шага выполнения;
//  КонтекстВыполнения - Структура - контекст выполнения;
//  Вариант - Строка - "Простой" или "Расширенный".
//
// Возвращаемое значение:
//   Строка - Текст для записи в журнал регистрации.
//
Функция КомментарийДляЖурналаРегистрации(ОписаниеШага, ШагВыполнения, КонтекстВыполнения, Вариант = "Простой") Экспорт

	Результат = "";

	Если Вариант = "Расширенный" Тогда

		ТекстСообщения = НСтр("ru='%ОписаниеШага%
			|Строка подключения: %СтрокаСоединенияИнформационнойБазы%
			|ТекущийРежимЗапуска: %ТекущийРежимЗапуска%
			|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация%
			|Разделение включено: %РазделениеВключено%
			|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных%
			|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей%
			|Конфигурация (метаданные): %Метаданные_Имя%, %Метаданные_Версия%
			|Конфигурация (переопределение): %Переопределение_Имя%, %Переопределение_Версия%
			|Платформа: %Платформа_Версия%
			|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп_РазрешенаРаботаСНовостями%
			|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп_РазрешенаРаботаСНовостямиЧерезИнтернет%
			|Текущий пользователь ИБ:
			|	Имя: %ТекущийПользователь_Имя%
			|	УИН: %ТекущийПользователь_УникальныйИдентификатор%
			|	Разделение данных:
			|		%ТекущийПользователь_РазделениеДанных%
			|Время начала (мс): %ВремяНачала%
			|Время окончания (мс): %ВремяОкончания%
			|Длительность (мс): %Длительность%
			|Результат по шагам:
			|%РезультатПоШагам%'")
			+ Символы.ПС;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеШага%", ОписаниеШага);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы%", СтрокаСоединенияИнформационнойБазы());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска%", ТекущийРежимЗапуска());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация%", ИнтернетПоддержкаПользователей.ЭтоРазделеннаяКонфигурация());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено%", ОбщегоНазначения.РазделениеВключено());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных%", ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей%", ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Метаданные_Имя%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеИмя"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Метаданные_Версия%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеВерсия"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Переопределение_Имя%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ИмяКонфигурации"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Переопределение_Версия%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПродукта"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Платформа_Версия%", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПлатформы"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп_РазрешенаРаботаСНовостями%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп_РазрешенаРаботаСНовостямиЧерезИнтернет%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь_Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь_УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь_РазделениеДанных%", ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяНачала%", ШагВыполнения.ВремяНачала);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяОкончания%", ШагВыполнения.ВремяОкончания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Длительность%", ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%РезультатПоШагам%",
			ОбработкаНовостейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
				КонтекстВыполнения,
				Истина, // ВключаяВложенные
				"ПодробноПоШагам",
				0));

		Результат = ТекстСообщения;

	Иначе

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1
				|Время начала (мс): %2
				|Время окончания (мс): %3
				|Длительность (мс): %4
				|
				|По шагам:
				|%5'")
				+ Символы.ПС,
			ОписаниеШага,
			ШагВыполнения.ВремяНачала,
			ШагВыполнения.ВремяОкончания,
			ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
			ОбработкаНовостейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
				КонтекстВыполнения,
				Истина, // ВключаяВложенные
				"ПодробноПоШагам",
				0));

		Результат = ТекстСообщения;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЗагрузкаСтандартныхДанных

// Процедура по имени объекта метаданных дополняет стандартные значения.
// По-умолчанию стандартные значения берутся из макетов с именем "СтандартныеЗначения" для следующих объектов метаданных:
//  - Справочник.ЗначенияКатегорийНовостей,
//  - Справочник.ЛентыНовостей,
//  - ПланВидовХарактеристик.КатегорииНовостей.
//
// Параметры:
//  ИмяОбъектаМетаданных - Строка - Имя загружаемого объект метаданных. Возможные значения:
//     * "Справочники.ЗначенияКатегорийНовостей";
//     * "Справочники.ЛентыНовостей";
//     * "ПланыВидовХарактеристик.КатегорииНовостей".
//  СтандартныеЗначения - Соответствие - Сюда необходимо добавить свои тексты стандартных значений.
//                                       Тексты должны быть оформлены в формате XML так же, как это сделано
//                                         в макете СтандартныеЗначения нужного объекта метаданных:
//                                      * Ключ - произвольный идентификатор;
//                                      * Значение - Текст в формате XML.
//
Процедура ПолучитьДополнительныеСтандартныеЗначенияКлассификаторов(ИмяОбъектаМетаданных, СтандартныеЗначения) Экспорт

	ОбработкаНовостейПереопределяемый.ПолучитьДополнительныеСтандартныеЗначенияКлассификаторов(ИмяОбъектаМетаданных, СтандартныеЗначения);

КонецПроцедуры

// Процедура по ссылке на ленту новостей дополняет стандартные значения.
// По-умолчанию стандартные значения берутся из макетов справочника Новости с именем "СтандартныеЗначения_<КодЛентыНовостей>".
//
// Параметры:
//  ЛентаНовостей - СправочникСсылка.ЛентыНовостей - Ссылка на ленту новостей, в которую необходимо загрузить данные;
//  СтандартныеЗначения - Соответствие - Сюда необходимо добавить свои тексты стандартных значений.
//                                       Тексты должны быть оформлены в формате XML так же, как это сделано
//                                         в макете СтандартныеЗначения нужного объекта метаданных:
//                                      * Ключ - произвольный идентификатор;
//                                      * Значение - Текст в формате XML.
//
Процедура ПолучитьДополнительныеСтандартныеЗначенияНовостей(ЛентаНовостей, СтандартныеЗначения) Экспорт

	ОбработкаНовостейПереопределяемый.ПолучитьДополнительныеСтандартныеЗначенияНовостей(ЛентаНовостей, СтандартныеЗначения);

КонецПроцедуры

#КонецОбласти

#Область ДополнительнаяОбработкаКлассификаторов

// Если после получения и записи классификатора надо что-то сделать, то это можно сделать в этой процедуре.
// Классификатор уже записан в базу данных, поэтому можно менять связанные справочники и регистры сведений.
// Для обеспечения целостности приходящих с серверов 1С данных, обработчика ПередЗаписью нет,
//  т.е. манипулировать отменой записи нельзя. Также отсутствует параметр Отказ.
//
// Параметры:
//  КлассификаторСсылка - СправочникСсылка - Классификатор, который был только что записан.
//
Процедура ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(КлассификаторСсылка) Экспорт

	ТипКатегорияНовостей   = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей");
	РазделениеВключено     = ОбщегоНазначения.РазделениеВключено();
	КодОсновногоЯзыка      = ОбщегоНазначения.КодОсновногоЯзыка();

	// 1. Основные действия.
	// 1.1. Возможна ситуация, когда происходит задвоение категории новостей. Если категория новостей загружена с сервера и вызван этот метод,
	//  то считаем, что именно это - правильная категория новостей. Остальные категории новостей с таким же кодом "вычищаем".
	Если ТипЗнч(КлассификаторСсылка) = ТипКатегорияНовостей Тогда
		Если (КлассификаторСсылка.ЗагруженоССервера = Истина)
				И (КлассификаторСсылка.ПометкаУдаления = Ложь) Тогда
			// 1.1.1. Найти категории новостей с таким же кодом, но с другой ссылкой - это ошибочные категории.
#Область ПоискНеправильныхКатегорий

			НеправильныеКатегории = Новый Массив;
			КатегорияКод          = КлассификаторСсылка.Код;
			КатегорияСсылка       = КлассификаторСсылка;
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	ПВХ.Ссылка КАК Категория
				|ИЗ
				|	ПланВидовХарактеристик.КатегорииНовостей КАК ПВХ
				|ГДЕ
				|	ПВХ.Код = &КатегорияКод
				|	И ПВХ.Ссылка <> &Категория
				|";
			Запрос.УстановитьПараметр("Категория"   , КатегорияСсылка);
			Запрос.УстановитьПараметр("КатегорияКод", КатегорияКод);
			РезультатЗапроса = Запрос.Выполнить(); // АПК:1328, Конкурентная работа невозможна - выполняется уникальным регламентным заданием.
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					НеправильныеКатегории.Добавить(Выборка.Категория);
				КонецЦикла;
			КонецЕсли;

#КонецОбласти

			Если НеправильныеКатегории.Количество() > 0 Тогда
				// 1.1.2. Ошибочные категории новостей пометить на удаление и изменить код.
#Область УдалениеНеправильныхКатегорий

				Для Каждого ТекущаяКатегория Из НеправильныеКатегории Цикл
					ЛогШаговВыполнения = Новый Массив;
					ЛогШаговВыполнения.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Найдена задвоенная категория с кодом [%1]'", КодОсновногоЯзыка),
							КатегорияКод));
					Объект = ТекущаяКатегория.ПолучитьОбъект();
						// Пометить на удаление, сгенерировать новый код, начинающийся с "DEL_00000_", но не более 20 символов (длина кода).
						НовыйКод = "";
						Для С=0 По 99999 Цикл // Найти первый незанятый код.
							НовыйКод = Лев("DEL_" + Формат(С, "ЧЦ=5; ЧН=00000; ЧВН=; ЧГ=0;") + "_" + Объект.Код, 20); // длина кода - 20 символов.
							Запрос.Текст = "
								|ВЫБРАТЬ
								|	ПВХ.Ссылка КАК Категория
								|ИЗ
								|	ПланВидовХарактеристик.КатегорииНовостей КАК ПВХ
								|ГДЕ
								|	ПВХ.Код = &КатегорияКод
								|";
							Запрос.УстановитьПараметр("КатегорияКод", НовыйКод);
							РезультатЗапроса = Запрос.Выполнить();
							Если РезультатЗапроса.Пустой() Тогда
								// Найден незанятый код.
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Объект.Код             = НовыйКод;
						Объект.ПометкаУдаления = Истина;
					Попытка
						ЛогШаговВыполнения.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Попытка записи категории новостей с повторяющимся кодом (замена кода и пометка удаления):
									|Новый код [%1] (%2)'", КодОсновногоЯзыка),
								НовыйКод,
								ТекущаяКатегория.УникальныйИдентификатор()));
						Объект.ОбменДанными.Загрузка = Истина;
						ЛогШаговВыполнения.Добавить(НСтр("ru='Блокировка объекта.'", КодОсновногоЯзыка));
						Объект.Заблокировать();
						ЛогШаговВыполнения.Добавить(НСтр("ru='Начало записи объекта.'", КодОсновногоЯзыка));
						Объект.Записать();
						ЛогШаговВыполнения.Добавить(НСтр("ru='Запись успешна.'", КодОсновногоЯзыка));
					Исключение
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ЛогШаговВыполнения.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Ошибка записи по причине:
									|%1'", КодОсновногоЯзыка),
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
					КонецПопытки;
					Если Объект.Заблокирован() Тогда // Разблокировать в любом случае - было исключение, или нет.
						ЛогШаговВыполнения.Добавить(НСтр("ru='Начало разблокировки объекта.'", КодОсновногоЯзыка));
						Объект.Разблокировать();
					КонецЕсли;
					ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
						НСтр("ru='Новости. Сервис и регламент. ЗадвоенныеКатегории. УдалениеНеправильныхКатегорий'", КодОсновногоЯзыка), // ИдентификаторШага.
						УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
						Метаданные.ПланыВидовХарактеристик.КатегорииНовостей, // ОбъектМетаданных
						ТекущаяКатегория, // Данные
						СтрСоединить(ЛогШаговВыполнения, Символы.ПС), // Комментарий
						Истина); // ВестиПодробныйЖурналРегистрации - писать такие сообщения всегда.
				КонецЦикла;

#КонецОбласти

				// 1.1.3. Заменить ошибочные категории новостей на правильные.
#Область ЗаменаНеправильныхКатегорийВДанных

				Запрос = Новый Запрос;
				Запрос.Текст = "
					|// 0. ЛентыНовостей.
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Спр.Ссылка КАК ЛентаНовостей
					|ИЗ
					|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
					|ГДЕ
					|	Спр.КатегорияНовостей В (&НеправильныеКатегории)
					|;
					|
					|// 1. КатегорииНовостейПростые.
					|ВЫБРАТЬ
					|	Рег.Новость                   КАК Новость,
					|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
					|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей,
					|	Рег.УсловиеОтбора             КАК УсловиеОтбора
					|ИЗ
					|	РегистрСведений.КатегорииНовостейПростые КАК Рег
					|ГДЕ
					|	Рег.КатегорияНовостей В (&НеправильныеКатегории)
					|;
					|
					|// 2. ЗначенияКатегорий*.
					|ВЫБРАТЬ
					|	Рег.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные, // РазделениеВключено
					|	Рег.КатегорияНовостей                  КАК КатегорияНовостей,
					|	Рег.ЗначениеКатегорииНовостей          КАК ЗначениеКатегорииНовостей,
					|	Рег.ДатаОбновления                     КАК ДатаОбновления,
					|	Рег.УсловиеВыполнено                   КАК УсловиеВыполнено
					|ИЗ
					|	РегистрСведений.ЗначенияКатегорийДляОбластиДанных КАК Рег
					|ГДЕ
					|	Рег.КатегорияНовостей В (&НеправильныеКатегории)
					|;
					|
					|// 3. ЗначенияКатегорий*.
					|ВЫБРАТЬ
					|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
					|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей,
					|	Рег.ДатаОбновления            КАК ДатаОбновления,
					|	Рег.УсловиеВыполнено          КАК УсловиеВыполнено
					|ИЗ
					|	РегистрСведений.ЗначенияКатегорийОбщие КАК Рег
					|ГДЕ
					|	Рег.КатегорияНовостей В (&НеправильныеКатегории)
					|;
					|
					|// 4. ЗначенияКатегорий*.
					|ВЫБРАТЬ
					|	Рег.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные, // РазделениеВключено
					|	Рег.Пользователь                       КАК Пользователь,
					|	Рег.КатегорияНовостей                  КАК КатегорияНовостей,
					|	Рег.ЗначениеКатегорииНовостей          КАК ЗначениеКатегорииНовостей,
					|	Рег.ДатаОбновления                     КАК ДатаОбновления,
					|	Рег.УсловиеВыполнено                   КАК УсловиеВыполнено
					|ИЗ
					|	РегистрСведений.ЗначенияКатегорийПользовательские КАК Рег
					|ГДЕ
					|	Рег.КатегорияНовостей В (&НеправильныеКатегории)
					|;
					|
					|// 5. ОтборыПоЛентамНовостей*.
					|ВЫБРАТЬ
					|	Рег.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные, // РазделениеВключено
					|	Рег.ЛентаНовостей                      КАК ЛентаНовостей,
					|	Рег.КатегорияНовостей                  КАК КатегорияНовостей,
					|	Рег.ЗначениеКатегорииНовостей          КАК ЗначениеКатегорииНовостей,
					|	Рег.УстановленоПрограммно              КАК УстановленоПрограммно
					|ИЗ
					|	РегистрСведений.ОтборыПоЛентамНовостейДляОбластиДанных КАК Рег
					|ГДЕ
					|	Рег.КатегорияНовостей В (&НеправильныеКатегории)
					|;
					|
					|// 6. ОтборыПоЛентамНовостей*.
					|ВЫБРАТЬ
					|	Рег.ЛентаНовостей             КАК ЛентаНовостей,
					|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
					|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей,
					|	Рег.УстановленоПрограммно     КАК УстановленоПрограммно
					|ИЗ
					|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК Рег
					|ГДЕ
					|	Рег.КатегорияНовостей В (&НеправильныеКатегории)
					|;
					|
					|// 7. ОтборыПоЛентамНовостей*.
					|ВЫБРАТЬ
					|	Рег.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные, // РазделениеВключено
					|	Рег.ЛентаНовостей                      КАК ЛентаНовостей,
					|	Рег.КатегорияНовостей                  КАК КатегорияНовостей,
					|	Рег.ЗначениеКатегорииНовостей          КАК ЗначениеКатегорииНовостей,
					|	Рег.Пользователь                       КАК Пользователь,
					|	Рег.УстановленоПрограммно              КАК УстановленоПрограммно
					|ИЗ
					|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК Рег
					|ГДЕ
					|	Рег.КатегорияНовостей В (&НеправильныеКатегории)
					|;
					|
					|";
				Запрос.УстановитьПараметр("НеправильныеКатегории", НеправильныеКатегории);

				// Если запущено в "коробке", то удалить все строки с "Рег.ОбластьДанныхВспомогательныеДанные".
				// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
				Если РазделениеВключено Тогда
					НовыеСтрокиТекстаЗапроса = Новый Массив;
					СтрокиТекстаЗапроса = СтрРазделить(Запрос.Текст, Символы.ПС, Истина);
					Для Каждого ТекущаяСтрока Из СтрокиТекстаЗапроса Цикл
						Если (НЕ ПустаяСтрока(ТекущаяСтрока))
								И (СтрНачинаетсяС(СокрЛП(ТекущаяСтрока), "Рег.ОбластьДанныхВспомогательныеДанные")) Тогда
							// Пропустить строку.
						Иначе
							НовыеСтрокиТекстаЗапроса.Добавить(ТекущаяСтрока);
						КонецЕсли;
					КонецЦикла;
					Запрос.Текст = СтрСоединить(НовыеСтрокиТекстаЗапроса, Символы.ПС);
				КонецЕсли;

				РезультатыЗапроса = Запрос.ВыполнитьПакет();

				// "Вычистить" значения ошибочных категорий (добавить правильные категории, удалить неправильные):
				// - Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей;
				// - РегистрСведений.КатегорииНовостейПростые;
				// - РегистрСведений.ЗначенияКатегорийДляОбластиДанных;
				// - РегистрСведений.ЗначенияКатегорийОбщие;
				// - РегистрСведений.ЗначенияКатегорийПользовательские;
				// - РегистрСведений.ОтборыПоЛентамНовостейДляОбластиДанных;
				// - РегистрСведений.ОтборыПоЛентамНовостейОбщие;
				// - РегистрСведений.ОтборыПоЛентамНовостейПользовательские;
				// Для регистров сведений, если категория типа "СправочникСсылка_ЗначенияКатегорийНовостей" возможно,
				//  что владелец станет неправильным.

#Область ЗаменаНеправильныхКатегорийВДанных_ЛентыНовостей
				// 0. Ленты новостей.
				РезультатЗапроса = РезультатыЗапроса[0];
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						ЛогШаговВыполнения = Новый Массив;
						Объект = Выборка.ЛентаНовостей.ПолучитьОбъект();
						Для Каждого ТекущаяДоступнаяКатегория Из Объект.ДоступныеКатегорииНовостей Цикл
							Если НеправильныеКатегории.Найти(ТекущаяДоступнаяКатегория.КатегорияНовостей) <> Неопределено Тогда
								ЛогШаговВыполнения.Добавить(
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='В Ленте новостей [%1] категория [%2] (%3) будет заменена на [%4] (%5).'", КодОсновногоЯзыка),
										Выборка.ЛентаНовостей,
										ТекущаяДоступнаяКатегория.КатегорияНовостей,
										СокрЛП(ТекущаяДоступнаяКатегория.КатегорияНовостей.УникальныйИдентификатор()),
										КатегорияСсылка,
										СокрЛП(КатегорияСсылка.УникальныйИдентификатор())));
								ТекущаяДоступнаяКатегория.КатегорияНовостей = КатегорияСсылка;
							КонецЕсли;
						КонецЦикла;
						Попытка
							ЛогШаговВыполнения.Добавить(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Попытка записи ленты новостей [%1].'", КодОсновногоЯзыка),
									Выборка.ЛентаНовостей));
							Объект.ОбменДанными.Загрузка = Истина;
							Объект.Записать();
							ЛогШаговВыполнения.Добавить(НСтр("ru='Запись успешна.'", КодОсновногоЯзыка));
						Исключение
							ИнформацияОбОшибке = ИнформацияОбОшибке();
							ЛогШаговВыполнения.Добавить(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Ошибка записи по причине:
										|%1'", КодОсновногоЯзыка),
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
						КонецПопытки;
						ЗаписатьСообщениеВЖурналРегистрации(
							НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
							НСтр("ru='Новости. Сервис и регламент. ЗадвоенныеКатегории. ЗаменаНеправильныхКатегорий'", КодОсновногоЯзыка), // ИдентификаторШага.
							УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
							Метаданные.Справочники.ЛентыНовостей, // ОбъектМетаданных
							Выборка.ЛентаНовостей, // Данные
							СтрСоединить(ЛогШаговВыполнения, Символы.ПС), // Комментарий
							Истина); // ВестиПодробныйЖурналРегистрации - писать такие сообщения всегда.
					КонецЦикла;
				КонецЕсли;
#КонецОбласти

#Область ЗаменаНеправильныхКатегорийВДанных_КатегорииНовостейПростые
				// 1. КатегорииНовостейПростые.
				ОбъектМетаданных = "КатегорииНовостейПростые";
				РезультатЗапроса = РезультатыЗапроса[1];
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ЛогШаговВыполнения = Новый Массив;
					// Добавить правильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Добавление правильных категорий'", КодОсновногоЯзыка));
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						Запись = РегистрыСведений[ОбъектМетаданных].СоздатьМенеджерЗаписи();
							Запись.Новость                   = Выборка.Новость;
							Запись.КатегорияНовостей         = КатегорияСсылка;
							Запись.ЗначениеКатегорииНовостей = Выборка.ЗначениеКатегорииНовостей; // Возможно расхождение владельца.
							Запись.УсловиеОтбора             = Выборка.УсловиеОтбора;
						Запись.Записать(Истина);
						ЛогШаговВыполнения.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Замена категории [%1] (%2) в [%3] для новости [%4], [%5].'", КодОсновногоЯзыка),
								Выборка.КатегорияНовостей,
								СокрЛП(Выборка.КатегорияНовостей.УникальныйИдентификатор()),
								ОбъектМетаданных,
								Выборка.Новость,
								Выборка.Новость.УИННовости));
					КонецЦикла;
					// Удалить неправильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Удаление неправильных категорий'", КодОсновногоЯзыка));
					Для Каждого НеправильнаяКатегория Из НеправильныеКатегории Цикл
						НаборЗаписей = РегистрыСведений[ОбъектМетаданных].СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.КатегорияНовостей.Установить(НеправильнаяКатегория, Истина);
						НаборЗаписей.Записать(Истина); // Очистка.
					КонецЦикла;
					// Запись в журнал регистрации.
					ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
						НСтр("ru='Новости. Сервис и регламент. ЗадвоенныеКатегории. ЗаменаНеправильныхКатегорий'", КодОсновногоЯзыка), // ИдентификаторШага.
						УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
						Метаданные.РегистрыСведений[ОбъектМетаданных], // ОбъектМетаданных
						, // Данные
						СтрСоединить(ЛогШаговВыполнения, Символы.ПС), // Комментарий
						Истина); // ВестиПодробныйЖурналРегистрации - писать такие сообщения всегда.
				КонецЕсли;
#КонецОбласти

#Область ЗаменаНеправильныхКатегорийВДанных_ЗначенияКатегорийДляОбластиДанных
				// 2. РегистрСведений.ЗначенияКатегорийДляОбластиДанных.
				ОбъектМетаданных = "ЗначенияКатегорийДляОбластиДанных";
				РезультатЗапроса = РезультатыЗапроса[2];
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ЛогШаговВыполнения = Новый Массив;
					// Добавить правильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Добавление правильных категорий'", КодОсновногоЯзыка));
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						Запись = РегистрыСведений[ОбъектМетаданных].СоздатьМенеджерЗаписи();
							Если РазделениеВключено Тогда
								Запись.ОбластьДанныхВспомогательныеДанные = Выборка.ОбластьДанныхВспомогательныеДанные;
							КонецЕсли;
							Запись.КатегорияНовостей                  = КатегорияСсылка;
							Запись.ЗначениеКатегорииНовостей          = Выборка.ЗначениеКатегорииНовостей; // Возможно расхождение владельца.
							Запись.ДатаОбновления                     = Выборка.ДатаОбновления;
							Запись.УсловиеВыполнено                   = Выборка.УсловиеВыполнено;
						Запись.Записать(Истина);
						ЛогШаговВыполнения.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Замена категории [%1] (%2) в [%3].'", КодОсновногоЯзыка),
								Выборка.КатегорияНовостей,
								СокрЛП(Выборка.КатегорияНовостей.УникальныйИдентификатор()),
								ОбъектМетаданных));
					КонецЦикла;
					// Удалить неправильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Удаление неправильных категорий'", КодОсновногоЯзыка));
					Для Каждого НеправильнаяКатегория Из НеправильныеКатегории Цикл
						НаборЗаписей = РегистрыСведений[ОбъектМетаданных].СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.КатегорияНовостей.Установить(НеправильнаяКатегория, Истина);
						НаборЗаписей.Записать(Истина); // Очистка.
					КонецЦикла;
					// Запись в журнал регистрации.
					ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
						НСтр("ru='Новости. Сервис и регламент. ЗадвоенныеКатегории. ЗаменаНеправильныхКатегорий'", КодОсновногоЯзыка), // ИдентификаторШага.
						УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
						Метаданные.РегистрыСведений[ОбъектМетаданных], // ОбъектМетаданных
						, // Данные
						СтрСоединить(ЛогШаговВыполнения, Символы.ПС), // Комментарий
						Истина); // ВестиПодробныйЖурналРегистрации - писать такие сообщения всегда.
				КонецЕсли;
#КонецОбласти

#Область ЗаменаНеправильныхКатегорийВДанных_ЗначенияКатегорийОбщие
				// 3. РегистрСведений.ЗначенияКатегорийОбщие.
				ОбъектМетаданных = "ЗначенияКатегорийОбщие";
				РезультатЗапроса = РезультатыЗапроса[3];
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ЛогШаговВыполнения = Новый Массив;
					// Добавить правильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Добавление правильных категорий'", КодОсновногоЯзыка));
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						Запись = РегистрыСведений[ОбъектМетаданных].СоздатьМенеджерЗаписи();
							Запись.КатегорияНовостей         = КатегорияСсылка;
							Запись.ЗначениеКатегорииНовостей = Выборка.ЗначениеКатегорииНовостей; // Возможно расхождение владельца.
							Запись.ДатаОбновления            = Выборка.ДатаОбновления;
							Запись.УсловиеВыполнено          = Выборка.УсловиеВыполнено;
						Запись.Записать(Истина);
						ЛогШаговВыполнения.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Замена категории [%1] (%2) в [%3].'", КодОсновногоЯзыка),
								Выборка.КатегорияНовостей,
								СокрЛП(Выборка.КатегорияНовостей.УникальныйИдентификатор()),
								ОбъектМетаданных));
					КонецЦикла;
					// Удалить неправильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Удаление неправильных категорий'", КодОсновногоЯзыка));
					Для Каждого НеправильнаяКатегория Из НеправильныеКатегории Цикл
						НаборЗаписей = РегистрыСведений[ОбъектМетаданных].СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.КатегорияНовостей.Установить(НеправильнаяКатегория, Истина);
						НаборЗаписей.Записать(Истина); // Очистка.
					КонецЦикла;
					// Запись в журнал регистрации.
					ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
						НСтр("ru='Новости. Сервис и регламент. ЗадвоенныеКатегории. ЗаменаНеправильныхКатегорий'", КодОсновногоЯзыка), // ИдентификаторШага.
						УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
						Метаданные.РегистрыСведений[ОбъектМетаданных], // ОбъектМетаданных
						, // Данные
						СтрСоединить(ЛогШаговВыполнения, Символы.ПС), // Комментарий
						Истина); // ВестиПодробныйЖурналРегистрации - писать такие сообщения всегда.
				КонецЕсли;
#КонецОбласти

#Область ЗаменаНеправильныхКатегорийВДанных_ЗначенияКатегорийПользовательские
				// 4. РегистрСведений.ЗначенияКатегорийПользовательские.
				ОбъектМетаданных = "ЗначенияКатегорийПользовательские";
				РезультатЗапроса = РезультатыЗапроса[4];
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ЛогШаговВыполнения = Новый Массив;
					// Добавить правильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Добавление правильных категорий'", КодОсновногоЯзыка));
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						Запись = РегистрыСведений[ОбъектМетаданных].СоздатьМенеджерЗаписи();
							Если РазделениеВключено Тогда
								Запись.ОбластьДанныхВспомогательныеДанные = Выборка.ОбластьДанныхВспомогательныеДанные;
							КонецЕсли;
							Запись.Пользователь                       = Выборка.Пользователь;
							Запись.КатегорияНовостей                  = КатегорияСсылка;
							Запись.ЗначениеКатегорииНовостей          = Выборка.ЗначениеКатегорииНовостей; // Возможно расхождение владельца.
							Запись.ДатаОбновления                     = Выборка.ДатаОбновления;
							Запись.УсловиеВыполнено                   = Выборка.УсловиеВыполнено;
						Запись.Записать(Истина);
						ЛогШаговВыполнения.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Замена категории [%1] (%2) в [%3].'", КодОсновногоЯзыка),
								Выборка.КатегорияНовостей,
								СокрЛП(Выборка.КатегорияНовостей.УникальныйИдентификатор()),
								ОбъектМетаданных));
					КонецЦикла;
					// Удалить неправильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Удаление неправильных категорий'", КодОсновногоЯзыка));
					Для Каждого НеправильнаяКатегория Из НеправильныеКатегории Цикл
						НаборЗаписей = РегистрыСведений[ОбъектМетаданных].СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.КатегорияНовостей.Установить(НеправильнаяКатегория, Истина);
						НаборЗаписей.Записать(Истина); // Очистка.
					КонецЦикла;
					// Запись в журнал регистрации.
					ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
						НСтр("ru='Новости. Сервис и регламент. ЗадвоенныеКатегории. ЗаменаНеправильныхКатегорий'", КодОсновногоЯзыка), // ИдентификаторШага.
						УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
						Метаданные.РегистрыСведений[ОбъектМетаданных], // ОбъектМетаданных
						, // Данные
						СтрСоединить(ЛогШаговВыполнения, Символы.ПС), // Комментарий
						Истина); // ВестиПодробныйЖурналРегистрации - писать такие сообщения всегда.
				КонецЕсли;
#КонецОбласти

#Область ЗаменаНеправильныхКатегорийВДанных_ОтборыПоЛентамНовостейДляОбластиДанных
				// 5. РегистрСведений.ОтборыПоЛентамНовостейДляОбластиДанных.
				ОбъектМетаданных = "ОтборыПоЛентамНовостейДляОбластиДанных";
				РезультатЗапроса = РезультатыЗапроса[5];
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ЛогШаговВыполнения = Новый Массив;
					// Добавить правильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Добавление правильных категорий'", КодОсновногоЯзыка));
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						Запись = РегистрыСведений[ОбъектМетаданных].СоздатьМенеджерЗаписи();
							Если РазделениеВключено Тогда
								Запись.ОбластьДанныхВспомогательныеДанные = Выборка.ОбластьДанныхВспомогательныеДанные;
							КонецЕсли;
							Запись.ЛентаНовостей                      = Выборка.ЛентаНовостей;
							Запись.КатегорияНовостей                  = КатегорияСсылка;
							Запись.ЗначениеКатегорииНовостей          = Выборка.ЗначениеКатегорииНовостей; // Возможно расхождение владельца.
							Запись.УстановленоПрограммно              = Выборка.УстановленоПрограммно;
						Запись.Записать(Истина);
						ЛогШаговВыполнения.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Замена категории [%1] (%2) в [%3] для ленты новостей [%4].'", КодОсновногоЯзыка),
								Выборка.КатегорияНовостей,
								СокрЛП(Выборка.КатегорияНовостей.УникальныйИдентификатор()),
								ОбъектМетаданных,
								Выборка.ЛентаНовостей));
					КонецЦикла;
					// Удалить неправильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Удаление неправильных категорий'", КодОсновногоЯзыка));
					Для Каждого НеправильнаяКатегория Из НеправильныеКатегории Цикл
						НаборЗаписей = РегистрыСведений[ОбъектМетаданных].СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.КатегорияНовостей.Установить(НеправильнаяКатегория, Истина);
						НаборЗаписей.Записать(Истина); // Очистка.
					КонецЦикла;
					// Запись в журнал регистрации.
					ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
						НСтр("ru='Новости. Сервис и регламент. ЗадвоенныеКатегории. ЗаменаНеправильныхКатегорий'", КодОсновногоЯзыка), // ИдентификаторШага.
						УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
						Метаданные.РегистрыСведений[ОбъектМетаданных], // ОбъектМетаданных
						, // Данные
						СтрСоединить(ЛогШаговВыполнения, Символы.ПС), // Комментарий
						Истина); // ВестиПодробныйЖурналРегистрации - писать такие сообщения всегда.
				КонецЕсли;
#КонецОбласти

#Область ЗаменаНеправильныхКатегорийВДанных_ОтборыПоЛентамНовостейОбщие
				// 6. РегистрСведений.ОтборыПоЛентамНовостейОбщие.
				ОбъектМетаданных = "ОтборыПоЛентамНовостейОбщие";
				РезультатЗапроса = РезультатыЗапроса[6];
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ЛогШаговВыполнения = Новый Массив;
					// Добавить правильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Добавление правильных категорий'", КодОсновногоЯзыка));
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						Запись = РегистрыСведений[ОбъектМетаданных].СоздатьМенеджерЗаписи();
							Запись.ЛентаНовостей                      = Выборка.ЛентаНовостей;
							Запись.КатегорияНовостей                  = КатегорияСсылка;
							Запись.ЗначениеКатегорииНовостей          = Выборка.ЗначениеКатегорииНовостей; // Возможно расхождение владельца.
							Запись.УстановленоПрограммно              = Выборка.УстановленоПрограммно;
						Запись.Записать(Истина);
						ЛогШаговВыполнения.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Замена категории [%1] (%2) в [%3] для ленты новостей [%4].'", КодОсновногоЯзыка),
								Выборка.КатегорияНовостей,
								СокрЛП(Выборка.КатегорияНовостей.УникальныйИдентификатор()),
								ОбъектМетаданных,
								Выборка.ЛентаНовостей));
					КонецЦикла;
					// Удалить неправильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Удаление неправильных категорий'", КодОсновногоЯзыка));
					Для Каждого НеправильнаяКатегория Из НеправильныеКатегории Цикл
						НаборЗаписей = РегистрыСведений[ОбъектМетаданных].СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.КатегорияНовостей.Установить(НеправильнаяКатегория, Истина);
						НаборЗаписей.Записать(Истина); // Очистка.
					КонецЦикла;
					// Запись в журнал регистрации.
					ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
						НСтр("ru='Новости. Сервис и регламент. ЗадвоенныеКатегории. ЗаменаНеправильныхКатегорий'", КодОсновногоЯзыка), // ИдентификаторШага.
						УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
						Метаданные.РегистрыСведений[ОбъектМетаданных], // ОбъектМетаданных
						, // Данные
						СтрСоединить(ЛогШаговВыполнения, Символы.ПС), // Комментарий
						Истина); // ВестиПодробныйЖурналРегистрации - писать такие сообщения всегда.
				КонецЕсли;
#КонецОбласти

#Область ЗаменаНеправильныхКатегорийВДанных_ОтборыПоЛентамНовостейПользовательские
				// 7. РегистрСведений.ОтборыПоЛентамНовостейПользовательские.
				ОбъектМетаданных = "ОтборыПоЛентамНовостейПользовательские";
				РезультатЗапроса = РезультатыЗапроса[7];
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ЛогШаговВыполнения = Новый Массив;
					// Добавить правильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Добавление правильных категорий'", КодОсновногоЯзыка));
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						Запись = РегистрыСведений[ОбъектМетаданных].СоздатьМенеджерЗаписи();
							Если РазделениеВключено Тогда
								Запись.ОбластьДанныхВспомогательныеДанные = Выборка.ОбластьДанныхВспомогательныеДанные;
							КонецЕсли;
							Запись.ЛентаНовостей                      = Выборка.ЛентаНовостей;
							Запись.Пользователь                       = Выборка.Пользователь;
							Запись.КатегорияНовостей                  = КатегорияСсылка;
							Запись.ЗначениеКатегорииНовостей          = Выборка.ЗначениеКатегорииНовостей; // Возможно расхождение владельца.
							Запись.УстановленоПрограммно              = Выборка.УстановленоПрограммно;
						Запись.Записать(Истина);
						ЛогШаговВыполнения.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Замена категории [%1] (%2) в [%3] для ленты новостей [%4].'", КодОсновногоЯзыка),
								Выборка.КатегорияНовостей,
								СокрЛП(Выборка.КатегорияНовостей.УникальныйИдентификатор()),
								ОбъектМетаданных,
								Выборка.ЛентаНовостей));
					КонецЦикла;
					// Удалить неправильные категории.
					ЛогШаговВыполнения.Добавить(НСтр("ru='Удаление неправильных категорий'", КодОсновногоЯзыка));
					Для Каждого НеправильнаяКатегория Из НеправильныеКатегории Цикл
						НаборЗаписей = РегистрыСведений[ОбъектМетаданных].СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.КатегорияНовостей.Установить(НеправильнаяКатегория, Истина);
						НаборЗаписей.Записать(Истина); // Очистка.
					КонецЦикла;
					// Запись в журнал регистрации.
					ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
						НСтр("ru='Новости. Сервис и регламент. ЗадвоенныеКатегории. ЗаменаНеправильныхКатегорий'", КодОсновногоЯзыка), // ИдентификаторШага.
						УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
						Метаданные.РегистрыСведений[ОбъектМетаданных], // ОбъектМетаданных
						, // Данные
						СтрСоединить(ЛогШаговВыполнения, Символы.ПС), // Комментарий
						Истина); // ВестиПодробныйЖурналРегистрации - писать такие сообщения всегда.
				КонецЕсли;
#КонецОбласти

#КонецОбласти

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// 2. Переопределение.
#Область Переопределение
	ОбработкаНовостейПереопределяемый.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(КлассификаторСсылка);
#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область РаботаСоСтроками

// Возвращает строку формата даты и времени для новостей.
//
// Возвращаемое значение:
//   Строка - формат даты и времени для новостей.
//
Функция ФорматДатыВремениДляНовости() Экспорт

	Возврат НСтр("ru='ДФ=''dd.MM.yyyy HH:mm'''");

КонецФункции

#КонецОбласти

#Область СостояниеПодсистемы

// Устанавливает состояние подсистемы.
//
// Параметры:
//  СостояниеПодсистемы - Строка - Допустимые состояния:
//    * Активна - подсистема работает в штатном режиме, все новости показываются;
//    * ТребуетсяПересчетОтборовПослеДлительногоОжидания - база долго не запускалась, возможно устарели все отборы.
//        Никакие новости не показываются, пока не будут пересчитаны отборы. Не более 1 часа;
//    * СейчасЗагружаютсяНовости - в данный момент происходит загрузка новостей, после которой будут пересчитываться отборы.
//        Новые и обновленные  новости в этот момент показывать НЕ надо (т.к. могли измениться отборы); Не более 6 часов;
//
Процедура УстановитьСостояниеПодсистемы(СостояниеПодсистемы) Экспорт

#Область ИнициализацияМетода

	УстановитьПривилегированныйРежим(Истина);

	ТекущаяДатаДляУстановки = ТекущаяУниверсальнаяДата();
	Результат = Новый Структура;
		Результат.Вставить("ТекущееСостояние"                          , СостояниеПодсистемы);
		Результат.Вставить("ДатаУстановкиТекущегоСостояния"            , ТекущаяДатаДляУстановки);
		Результат.Вставить("ДатаПринудительногоСбросаТекущегоСостояния", Неопределено); // Рассчитается автоматически при валидации.

#КонецОбласти

#Область Проверки

	// СостояниеПодсистемы должно быть правильно заполнено.
	Если (Результат.ТекущееСостояние <> "Активна")
			И (Результат.ТекущееСостояние <> "ТребуетсяПересчетОтборовПослеДлительногоОжидания")
			И (Результат.ТекущееСостояние <> "СейчасЗагружаютсяНовости") Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ОбработкаНовостей.УстановитьСостояниеПодсистемы: ожидается состояние подсистемы:
				| - Активна;
				| - ТребуетсяПересчетОтборовПослеДлительногоОжидания;
				| - СейчасЗагружаютсяНовости.
				|Передано значение: [%1].'", ОбщегоНазначения.КодОсновногоЯзыка()),
			СостояниеПодсистемы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

#КонецОбласти

#Область Обработка

	ХранилищаНастроек.НастройкиНовостей.Сохранить(
		"СостояниеПодсистемы", // КлючОбъекта.
		, // КлючНастроек - пустой.
		Результат, // Настройки.
		, // ОписаниеНастроек.
		""); // Для всех пользователей

#КонецОбласти

#Область Завершение

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Подсистема Новости переводится в состояние [%1].'"),
		СостояниеПодсистемы);
	ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
		НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеПодсистемы'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИдентификаторШага.
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		Метаданные.Справочники.Новости, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

#КонецОбласти

КонецПроцедуры

// Получает состояние подсистемы.
//
// Возвращаемое значение:
//   Строка - см. параметр "СостояниеПодсистемы", метод ОбработкаНовостей.УстановитьСостояниеПодсистемы().
//
Функция ПолучитьСостояниеПодсистемы() Экспорт

#Область ИнициализацияМетода

	УстановитьПривилегированныйРежим(Истина);

	ТекущаяДатаДляУстановки = ТекущаяУниверсальнаяДата();

#КонецОбласти

#Область Обработка

	Настройки = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"СостояниеПодсистемы", // КлючОбъекта.
		, // КлючНастроек - пустой.
		, // ОписаниеНастроек.
		""); // Для всех пользователей

	Результат = Настройки.ТекущееСостояние;

	Если Настройки.ТекущееСостояние <> "Активна" Тогда
		// Состояние может быть сброшено до "Активно", если достигнут срок принудительного сброса.
		Если Настройки.ДатаПринудительногоСбросаТекущегоСостояния < ТекущаяДатаДляУстановки Тогда
			Результат = "Активна";
		КонецЕсли;
	КонецЕсли;

#КонецОбласти

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти
