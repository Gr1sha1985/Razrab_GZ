
#Область СлужебныйПрограммныйИнтерфейс

Функция ЮридическоеФизическоеЛицоПоИдентификатору(Идентификатор, УчастникиОпераций) Экспорт
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
	Иначе
		ОписаниеИдентификатора = Идентификатор;
	КонецЕсли;
			
	Если ОписаниеИдентификатора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если Не ОписаниеИдентификатора.Состав.Свойство("ЮридическоеФизическоеЛицо") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеИдентификатора.Состав.ЮридическоеФизическоеЛицо;
	
КонецФункции

Функция НомерКартыПоИдентификатору(Идентификатор, УчастникиОпераций) Экспорт
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
	Иначе
		ОписаниеИдентификатора = Идентификатор;
	КонецЕсли;
	
	Если ОписаниеИдентификатора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ОписаниеИдентификатора.Состав.Свойство("НомерКарты") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеИдентификатора.Состав.НомерКарты;
	
КонецФункции

#КонецОбласти

#Область ИдентификацияУчастниковОпераций

// Конструктор коллекции, содержащей данные для идентификации участников операций, информация о которых содержится в выписке.
// Таким участником может быть, например, покупатель, оплачивающий поставленные ему товары или услуги, 
// или сотрудник, получающий заработную плату.
// В терминах ISO 20022 - Bank-to-Customer Cash Management эта коллекция содержит данные, описанные в разделе "Party Identification".
Функция НовыйУчастникиОпераций() Экспорт
	
	// Данные обо всех участниках собраны в одну коллекцию с тем, чтобы оптимально - небольшим количеством запросов - 
	// получить из информационной базы данные об участниках.
	
	УчастникиОпераций = Новый Структура;
	УчастникиОпераций.Вставить("Идентификаторы", НовыйОписаниеИдентификаторов());
	УчастникиОпераций.Вставить("Ссылки",         Новый Соответствие);
	УчастникиОпераций.Вставить("НовыеОбъекты",   Новый Соответствие);
	Для Каждого Тип Из ПоддерживаемыеТипыСсылок() Цикл
		УчастникиОпераций.Ссылки.Вставить(Тип, НовыйОписаниеСсылок(Тип));
		УчастникиОпераций.НовыеОбъекты.Вставить(Тип, НовыйОписаниеНовыхОбъектов(Тип));
	КонецЦикла;
	
	Возврат УчастникиОпераций;
	
КонецФункции

Функция ТипИдентификаторСоСхемой()
	
	// - 4 первых символа идентифицируют схему
	// - остальные символы (до 124) определяются схемой
	
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(128);
	
КонецФункции

Функция ТипИмяСхемы()
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(4);
КонецФункции

Функция НовыйОписаниеИдентификаторов()
	
	ТипИдентификатор = ТипИдентификаторСоСхемой();
	
	Описание = Новый ТаблицаЗначений;
	Описание.Колонки.Добавить("Схема",                ТипИмяСхемы());
	Описание.Колонки.Добавить("Идентификатор",        ТипИдентификатор);
	Описание.Колонки.Добавить("Состав",               Новый ОписаниеТипов("Структура"));    // Состав ключа, из которого собран идентификатор. Позволяет найти ссылки на объекты информационной базы. Набор свойств определяется схемой
	Описание.Колонки.Добавить("Точный",               Новый ОписаниеТипов("Булево"));       // Состав ключа полный, идентификатор не допускает двусмысленной трактовки.
	Описание.Колонки.Добавить("БазовыйИдентификатор", ТипИдентификатор); // Для точного идентификатора: идентификатор, который уточняется текущим идентификатором. Может отсутствовать.
	Описание.Колонки.Добавить("Ссылки",               Новый ОписаниеТипов("Соответствие")); // Ключ - ссылка, значение - Истина. Соответствие используется для оптимизации поиска.
	
	Описание.Индексы.Добавить("Идентификатор");
	Описание.Индексы.Добавить("БазовыйИдентификатор");
	
	Возврат Описание;
	
КонецФункции

Функция НовыйОписаниеСсылок(Тип)
	
	ОписаниеСсылок = Новый ТаблицаЗначений;
	ОписаниеСсылок.Колонки.Добавить("Ссылка", Справочники.ТипВсеСсылки());
	ОписаниеСсылок.Индексы.Добавить("Ссылка");
	
	// Собираем все схемы, по которым можно идентифицировать объект.
	// Например, если у контрагента в базе заполнен ИНН, то можно использовать схему TXID
	ОписаниеСсылок.Колонки.Добавить("СхемыИдентификации", Новый ОписаниеТипов("Соответствие"));// Соответствие используется для оптимизации поиска. Ключ - имя схемы, Значение - Истина
	
	ОписаниеСсылок.Колонки.Добавить("УсловныеИдентификаторы", Новый ОписаниеТипов("Соответствие"));// Ключ - условный идентификатор, Значение - Массив других (противоречащих) условных идентификаторов. См. УстановитьПохожиеИдентификаторыСсылкеНового() и УточнитьИдентификаторыСсылкиНового()
	
	Для Каждого ЭлементОтбора Из СведенияОбОбъектеИнформационнойБазы(Тип) Цикл
		ОписаниеСсылок.Колонки.Добавить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	КонецЦикла;
	
	Возврат ОписаниеСсылок;
	
КонецФункции

Функция НовыйОписаниеНовыхОбъектов(Тип)
	
	ОписаниеСсылок = Новый ТаблицаЗначений;
	ОписаниеСсылок.Колонки.Добавить("Ссылка", Справочники.ТипВсеСсылки());
	ОписаниеСсылок.Индексы.Добавить("Ссылка");
	
	Для Каждого ОписаниеРеквизита Из РеквизитыНовыхОбъектовИнформационнойБазы(Тип) Цикл
		ОписаниеСсылок.Колонки.Добавить(ОписаниеРеквизита.Ключ, ОписаниеРеквизита.Значение);
	КонецЦикла;
	
	Возврат ОписаниеСсылок;
	
КонецФункции

Функция ОписаниеСсылки(Ссылка, УчастникиОпераций, ОписаниеИдентификатора = Неопределено) Экспорт
	
	ТипСсылки = ТипЗнч(Ссылка);
	
	СсылкиПоТипу = УчастникиОпераций.Ссылки[ТипСсылки];
	Если СсылкиПоТипу = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеСсылки = СсылкиПоТипу.Найти(Ссылка, "Ссылка");
	
	Если ОписаниеСсылки = Неопределено И ОписаниеИдентификатора <> Неопределено Тогда
		
		Если Не СхемаСоответствуетТипу(ОписаниеИдентификатора, ТипСсылки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОписаниеСсылки = СсылкиПоТипу.Добавить();
		ОписаниеСсылки.Ссылка = Ссылка;
		
	КонецЕсли;
	
	Возврат ОписаниеСсылки;
	
КонецФункции

Функция ОписаниеНовогоОбъекта(Ссылка, УчастникиОпераций) Экспорт
	
	ТипСсылки = ТипЗнч(Ссылка);
	
	СсылкиПоТипу = УчастникиОпераций.НовыеОбъекты[ТипСсылки];
	Если СсылкиПоТипу = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СсылкиПоТипу.Найти(Ссылка, "Ссылка");
	
КонецФункции

Функция ДобавитьОписаниеНовогоОбъекта(Ссылка, УчастникиОпераций)
	
	ТипСсылки = ТипЗнч(Ссылка);
	
	СсылкиПоТипу = УчастникиОпераций.НовыеОбъекты[ТипСсылки];
	Если СсылкиПоТипу = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеСсылки = СсылкиПоТипу.Найти(Ссылка, "Ссылка");
	
	Если ОписаниеСсылки <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеНовогоОбъекта = СсылкиПоТипу.Добавить();
	ОписаниеНовогоОбъекта.Ссылка = Ссылка;
	
	Возврат ОписаниеНовогоОбъекта;
	
КонецФункции

// В качестве Идентификатор допускается передавать описание идентификатора - см. НовыйОписаниеИдентификаторов()
// КешИдентификаторов - см. комментарий к НайтиСсылки()
Функция ДобавитьСсылку(УчастникиОпераций, Идентификатор, Ссылка, ДанныеОбъекта, КешИдентификаторов = Неопределено)
	
	Если Идентификатор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
		Если ОписаниеИдентификатора = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ОписаниеИдентификатора = Идентификатор;
	КонецЕсли;
	
	Если ОписаниеИдентификатора.Ссылки[Ссылка] <> Неопределено Тогда
		// уже есть
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеСсылки = ОписаниеСсылки(Ссылка, УчастникиОпераций, ОписаниеИдентификатора);
	Если ОписаниеСсылки = Неопределено Тогда
		// Например, ссылка неподходящего типа
		Возврат Неопределено;
	КонецЕсли;
	
	КешИдентификаторов = Неопределено;
	
	ЗаполнитьЗначенияСвойств(ОписаниеСсылки, ДанныеОбъекта);
	ОписаниеСсылки.Ссылка = Ссылка; // На случай, если в ДанныеОбъекта оказалась какая-то другая Ссылка
	
	ДополнитьОписаниеСсылкиИдентификатором(ОписаниеСсылки, ОписаниеИдентификатора);
	
	Возврат ОписаниеСсылки;
	
КонецФункции

Процедура ДополнитьОписаниеСсылкиИдентификатором(ОписаниеСсылки, ОписаниеИдентификатора)
	
	ОписаниеСсылки.СхемыИдентификации.Вставить(ОписаниеИдентификатора.Схема, Истина);
	ОписаниеИдентификатора.Ссылки.Вставить(ОписаниеСсылки.Ссылка, Истина);
	
КонецПроцедуры

Функция ОписаниеИдентификатора(Идентификатор, УчастникиОпераций) Экспорт
	
	Возврат УчастникиОпераций.Идентификаторы.Найти(Идентификатор, "Идентификатор");
	
КонецФункции

Функция УстановитьИдентификатор(УчастникиОпераций, Схема, Код, Состав, Точный, БазовыйИдентификатор)
	
	Если СтрДлина(Код) > 124 Тогда
		
		// сократим длину кода за счет хеша
		
		// Используем md5, который в текстовом виде может быть представлен как 32 hexadecimal number
		// Первые 92 символа кода не изменяем, по оставшимся рассчитываем хеш и дополняем им первые 92 символа.
		// Так получится 124 символьная строка.
		ОтображаемаяЧасть = Лев(Код, 96);
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(Сред(Код, 97));
		ПредставлениеХешСуммы = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
		Код = Лев(ОтображаемаяЧасть + ПредставлениеХешСуммы, 124);
		
	КонецЕсли;
	
	Идентификатор = Схема + Код;
	
	ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
	Если ОписаниеИдентификатора = Неопределено Тогда
		
		ОписаниеИдентификатора = УчастникиОпераций.Идентификаторы.Добавить();
		ОписаниеИдентификатора.Идентификатор        = Идентификатор;
		ОписаниеИдентификатора.Схема                = Схема;
		Для Каждого КлючИЗначение Из Состав Цикл
			ОписаниеИдентификатора.Состав.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		ОписаниеИдентификатора.Точный               = Точный;
		ОписаниеИдентификатора.БазовыйИдентификатор = БазовыйИдентификатор;
		
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

Функция ЮридическоеФизическоеЛицоПоИдентификаторам(Идентификаторы, УчастникиОпераций) Экспорт
	
	ТипыЛица = Новый Соответствие;
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицоПоИдентификатору(Идентификатор, УчастникиОпераций);
			
		Если ЮридическоеФизическоеЛицо <> Неопределено Тогда
			ТипыЛица.Вставить(ЮридическоеФизическоеЛицо);
		КонецЕсли;
			
	КонецЦикла;
	
	Если ТипыЛица.Количество() = 1 Тогда
		Для Каждого КлючИЗначение Из ТипыЛица Цикл
			Возврат КлючИЗначение.Ключ;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЭтоИдентификаторФизическогоЛица(Идентификатор, УчастникиОпераций) Экспорт
	
	ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицоПоИдентификатору(Идентификатор, УчастникиОпераций);
	
	Возврат ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
КонецФункции

Функция ЭтоИдентификаторЮридическогоЛица(Идентификатор, УчастникиОпераций) Экспорт
	
	ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицоПоИдентификатору(Идентификатор, УчастникиОпераций);
	
	Возврат ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
КонецФункции

Функция ЭтоИдентификаторКарты(Идентификатор, УчастникиОпераций) Экспорт
	
	НомерКарты = НомерКартыПоИдентификатору(Идентификатор, УчастникиОпераций);
	
	Возврат ЗначениеЗаполнено(НомерКарты);
	
КонецФункции

// Оценивает надежность идентификаторов в соответствии с надежностью схем, идентифицирующих тип.
//
// Параметры:
//  Идентификаторы		 - Массив    - набор идентификаторов, соответствующих типу или нет.
//  Тип					 - Тип       - тип идентифицируемой ссылки
//  УчастникиОпераций	 - Структура - см. НовыйУчастникиОпераций
// 
// Возвращаемое значение:
//  ФиксированныйМассив - оценка надежности переданного набора в виде бинарного значения.
//      Каждый элемент массива соответствует одной из схем, идентифицирующих тип, в порядке убывания приоритетов.
//      Количество элементов массива равно количеству элементов в результате функции СхемыИдентифицирующиеТип.
//      Значения массива - Булево, Истина, если среди переданных идентификаторов есть соответствующий схеме.
//      Таким образом, если значения элементов записать в виде двоичного числа, то чем больше это число,
//      тем более надежен набор идентификаторов.
//
Функция ОценитьНадежностьИдентификаторов(Идентификаторы, Тип, УчастникиОпераций) Экспорт
	
	Надежность = Новый Массив;
	
	Схемы = СхемыИдентифицирующиеТип(Тип);
	
	ПримененныеСхемы = Новый Соответствие;// Ключ - схема, значение - массив описаний идентификаторов
	Для Каждого Схема Из Схемы Цикл
		ПримененныеСхемы.Вставить(Схема, Новый Массив);
	КонецЦикла;
	
	// Сгруппируем идентификаторы по схемам
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
		Если ОписаниеИдентификатора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписанияИдентификаторов = ПримененныеСхемы[ОписаниеИдентификатора.Схема];
		Если ОписанияИдентификаторов = Неопределено Тогда
			// Не используется для идентификации этого типа
			Продолжить;
		КонецЕсли;
		
		ОписанияИдентификаторов.Добавить(ОписаниеИдентификатора);
		
	КонецЦикла;
	
	// Учтем приоритеты и ограничения применения схем
	Для Каждого Схема Из Схемы Цикл
		
		ОписанияИдентификаторов = ПримененныеСхемы[Схема];
		
		Если Не СхемаПрименяетсяОграниченно(Схема, Тип) Тогда
			ИдентифицированСхемой = ЗначениеЗаполнено(ОписанияИдентификаторов);
		Иначе
			ИдентифицированСхемой = Ложь;
			Для Каждого ОписаниеИдентификатора Из ОписанияИдентификаторов Цикл
				Если СхемаСоответствуетТипу(ОписаниеИдентификатора, Тип) Тогда
					ИдентифицированСхемой = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
				
		Надежность.Добавить(ИдентифицированСхемой);
		
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Надежность);
		
КонецФункции

#Область ТипыСсылок

Функция ПоддерживаемыеТипыСсылок()
	
	// Допускаются только справочники
	
	ТипыСсылок = Новый Массив;
	ТипыСсылок.Добавить(Тип("СправочникСсылка.Организации"));
	ТипыСсылок.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТипыСсылок.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	ТипыСсылок.Добавить(Тип("СправочникСсылка.БанковскиеСчета"));
	ТипыСсылок.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	
	Возврат ТипыСсылок;
	
КонецФункции

Функция СведенияОбОбъектеИнформационнойБазы(Тип)
	
	// См. также СвязиМеждуТипамиОбъектовИнформационнойБазы()
	
	НаборСведений = Новый Структура; // Ключ - имя, Значение - Тип
	
	Если Тип = Тип("СправочникСсылка.Организации") Тогда
		НаборСведений.Вставить("ЮридическоеФизическоеЛицо", Новый ОписаниеТипов("ПеречислениеСсылка.ЮридическоеФизическоеЛицо"));
		НаборСведений.Вставить("Головной",                  Новый ОписаниеТипов("Булево"));
	ИначеЕсли Тип = Тип("СправочникСсылка.Контрагенты") Тогда
		НаборСведений.Вставить("ЮридическоеФизическоеЛицо", Новый ОписаниеТипов("ПеречислениеСсылка.ЮридическоеФизическоеЛицо"));
		НаборСведений.Вставить("ГосударственныйОрган",      Новый ОписаниеТипов("Булево"));
		НаборСведений.Вставить("ВидГосударственногоОргана", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыГосударственныхОрганов"));
		НаборСведений.Вставить("Головной",                  Новый ОписаниеТипов("Булево"));
	ИначеЕсли Тип = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		НаборСведений.Вставить(
			"Владелец",
			Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.Организации, СправочникСсылка.ФизическиеЛица"));
		НаборСведений.Вставить("ЮридическоеФизическоеЛицо", Новый ОписаниеТипов("ПеречислениеСсылка.ЮридическоеФизическоеЛицо"));
		НаборСведений.Вставить("ГосударственныйОрган",      Новый ОписаниеТипов("Булево"));
		НаборСведений.Вставить("ВидГосударственногоОргана", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыГосударственныхОрганов"));
		НаборСведений.Вставить("ВалютаДенежныхСредств",     Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		НаборСведений.Вставить("УстановленОсновным",        Новый ОписаниеТипов("Булево"));
		НаборСведений.Вставить("СчетКорпоративныхРасчетов", Новый ОписаниеТипов("Булево"));
	ИначеЕсли Тип = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		НаборСведений.Вставить("Владелец",                  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		НаборСведений.Вставить("ЮридическоеФизическоеЛицо", Новый ОписаниеТипов("ПеречислениеСсылка.ЮридическоеФизическоеЛицо"));
		НаборСведений.Вставить("ГосударственныйОрган",      Новый ОписаниеТипов("Булево"));
		НаборСведений.Вставить("ВидГосударственногоОргана", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыГосударственныхОрганов"));
		НаборСведений.Вставить("Организация",               Новый ОписаниеТипов("СправочникСсылка.Организации"));
		НаборСведений.Вставить("ВидДоговора",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровКонтрагентов"));
		НаборСведений.Вставить("ВалютаВзаиморасчетов",      Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		НаборСведений.Вставить("ОплатаВВалюте",             Новый ОписаниеТипов("Булево"));
		НаборСведений.Вставить("УстановленОсновным",        Новый ОписаниеТипов("Булево"));
		НаборСведений.Вставить("УчетАгентскогоНДС",         Новый ОписаниеТипов("Булево"));
		НаборСведений.Вставить("ВидОплаты",                 Новый ОписаниеТипов("СправочникСсылка.ВидыОплатОрганизаций"));
	КонецЕсли;
	
	Возврат НаборСведений;
	
КонецФункции

Функция СвязиМеждуТипамиОбъектовИнформационнойБазы()
	
	// Эти связи следуют из содержимого СведенияОбОбъектеИнформационнойБазы().
	// В списке типы выстроены так, что из младших нет ссылок на старшие.
	// Именно в этом порядке нужно создавать новые элементы справочников.
	
	Связи = Новый Массив;
	Связи.Добавить(Тип("СправочникСсылка.Организации"));
	Связи.Добавить(Тип("СправочникСсылка.Контрагенты"));
	Связи.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	Связи.Добавить(Тип("СправочникСсылка.БанковскиеСчета"));
	Связи.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Возврат Связи;
	
КонецФункции

Функция РеквизитыНовыхОбъектовИнформационнойБазы(Тип)
	
	// Содержит реквизиты, которые нужны только для создания новых элементов.
	// Часть реквизитов, которая нужна не только для создания новых элементов размещается в Ссылки.
	// См. НовыйОписаниеСсылок(), СведенияОбОбъектеИнформационнойБазы()
	
	НаборРеквизитов = Новый Структура; // Ключ - имя, Значение - Тип
	
	Если Тип = Тип("СправочникСсылка.Контрагенты") Тогда
		
		МетаданныеКонтрагентыРеквизиты = Метаданные.Справочники.Контрагенты.Реквизиты;
		НаборРеквизитов.Вставить("Наименование",       МетаданныеКонтрагентыРеквизиты.НаименованиеПолное.Тип);
		НаборРеквизитов.Вставить("НаименованиеПолное", МетаданныеКонтрагентыРеквизиты.НаименованиеПолное.Тип);
		НаборРеквизитов.Вставить("ИНН",                МетаданныеКонтрагентыРеквизиты.ИНН.Тип);
		НаборРеквизитов.Вставить("КПП",                МетаданныеКонтрагентыРеквизиты.КПП.Тип);
		ТипыСтранаРегистрации = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МетаданныеКонтрагентыРеквизиты.СтранаРегистрации.Тип));
		ТипыСтранаРегистрации = Новый ОписаниеТипов(ТипыСтранаРегистрации, "Строка"); // Может быть указан код страны
		НаборРеквизитов.Вставить("СтранаРегистрации",  ТипыСтранаРегистрации);
		НаборРеквизитов.Вставить("ЮридическоеФизическоеЛицо", Новый ОписаниеТипов("ПеречислениеСсылка.ЮридическоеФизическоеЛицо"));
		
	ИначеЕсли Тип = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		МетаданныеБанки = Метаданные.Справочники.Банки;
		ТипыНомерСчета = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(БанковскиеПравила.ТипМеждународныйНомерСчета())); // Передаем номер счета в международном формате.
		НаборРеквизитов.Вставить("НомерСчета",         ТипыНомерСчета);
		НаборРеквизитов.Вставить("БИК",                ОбщегоНазначения.ОписаниеТипаСтрока(МетаданныеБанки.ДлинаКода));
		НаборРеквизитов.Вставить("БИКБанкаДляРасчетов",ОбщегоНазначения.ОписаниеТипаСтрока(МетаданныеБанки.ДлинаКода));
		НаборРеквизитов.Вставить("ВозможныйБИК",       ОбщегоНазначения.ОписаниеТипаСтрока(МетаданныеБанки.ДлинаКода));
		НаборРеквизитов.Вставить("НаименованиеБанка",  ОбщегоНазначения.ОписаниеТипаСтрока(МетаданныеБанки.ДлинаНаименования));
		НаборРеквизитов.Вставить("ГородБанка",         МетаданныеБанки.Реквизиты.Город.Тип);
		НаборРеквизитов.Вставить("КоррСчетБанка",      МетаданныеБанки.Реквизиты.КоррСчет.Тип);
		
	ИначеЕсли Тип = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		НаборРеквизитов.Вставить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Справочники.ДоговорыКонтрагентов.ДлинаНаименования));
		
	ИначеЕсли Тип = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		НаборРеквизитов.Вставить("ИНН",          Метаданные.Справочники.ФизическиеЛица.Реквизиты.ИНН.Тип);
		НаборРеквизитов.Вставить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150));// См. регистр сведений ФИОФизическихЛиц
		
	КонецЕсли;
	
	Возврат НаборРеквизитов;
	
КонецФункции

#КонецОбласти

#Область СхемыИдентификации

// См. также область МетодыПоиска

Функция СхемыИдентифицирующиеТип(Тип)
	
	// Схемы упорядочены по убыванию надежности для каждого типа данных.
	// Так, если известны TXID и BBAN, при этом по TXID найден один контрагент, а по BBAN - другой, то следует предпочесть первого.
	
	Схемы = Новый Массив;
	Схемы.Добавить(СхемаВнутреннийИдентификатор()); // позволяет идентифицировать любой тип
	Если Тип = Тип("СправочникСсылка.Организации") Тогда
		Схемы.Добавить("TXID");
		Схемы.Добавить("BBAN");
	ИначеЕсли Тип = Тип("СправочникСсылка.Контрагенты") Или Тип = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Схемы.Добавить("TXID");
		Схемы.Добавить("TXZN");
		Схемы.Добавить("IBAN");
		Схемы.Добавить("BBAN");// см. СхемаПрименяетсяОграниченно()
		Схемы.Добавить("BKNM");
		Схемы.Добавить("PNNM");
	ИначеЕсли Тип = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Схемы.Добавить("BBAN");
		Схемы.Добавить("IBAN");
	ИначеЕсли Тип = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Схемы.Добавить("TXID");
		Схемы.Добавить("BBAN");// см. СхемаПрименяетсяОграниченно()
		Схемы.Добавить("IBAN");
		Схемы.Добавить("PNNM");
		Схемы.Добавить("AIIN"); // Номер карты.
	КонецЕсли;
	
	Возврат Схемы;
	
КонецФункции

Функция СхемаПрименяетсяОграниченно(Схема, Тип)
	
	Если Схема = "BBAN"
		И (Тип = Тип("СправочникСсылка.ФизическиеЛица") 
			Или Тип = Тип("СправочникСсылка.Контрагенты")
			Или Тип = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СхемаСоответствуетТипу(ОписаниеИдентификатора, Тип)
	
	СхемыИдентифицирующиеТип = СхемыИдентифицирующиеТип(Тип);
	
	Если СхемыИдентифицирующиеТип.Найти(ОписаниеИдентификатора.Схема) = Неопределено Тогда
		// Схема не может использоваться для идентификации типа
		Возврат Ложь;
	КонецЕсли;
	
	// Схема BBAN не всегда позволяет идентифицировать владельца счета
	Если ОписаниеИдентификатора.Схема = "BBAN"
		И СхемаПрименяетсяОграниченно(ОписаниеИдентификатора.Схема, Тип) Тогда
		
		Если ОписаниеИдентификатора.Состав.Свойство("АналитикаПоКонтрагентам")
			И Не ОписаниеИдентификатора.Состав.АналитикаПоКонтрагентам Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

// Определяет имя (префикс идентификации) служебной схемы.
// Идентификаторы этой схемы не передаются между участниками операций.
// Однако, они могут использоваться внутри механизма сведений об участниках операций,
// например, если контрагент не может быть идентифицирован и пользователь выбрал его вручную.
// При этом 
// - поиск по идентификаторам не выполняется (метод поиска данных в информационной базе по этой схеме не реализован)
// - описание ссылки не должно использоваться
// - идентификаторы этой схемы не должны сохраняться в информационной базе.
// 
// Возвращаемое значение:
//  Строка - имя схемы
//
Функция СхемаВнутреннийИдентификатор() Экспорт
	Возврат "UUID";
КонецФункции

Функция ИсточникиКлючевыхРеквизитовНовыхОбъектовИнформационнойБазы(Тип, Схема)
	
	ИсточникиРеквизитов = Новый Структура; // Ключ - имя реквизита, значение - имя свойства в составе идентификатора.
	// Все ключи для конкретного типа должны быть описаны в РеквизитыНовыхОбъектовИнформационнойБазы()
	
	Если Схема = "TXID" Тогда
		Если Тип = Тип("СправочникСсылка.Контрагенты") Тогда
			ИсточникиРеквизитов.Вставить("ИНН", "ИНН");
			ИсточникиРеквизитов.Вставить("КПП", "КПП");
		ИначеЕсли Тип = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ИсточникиРеквизитов.Вставить("ИНН", "ИНН");
		КонецЕсли;
	ИначеЕсли Схема = "BKNM" Тогда
		Если Тип = Тип("СправочникСсылка.Контрагенты") Тогда
			ИсточникиРеквизитов.Вставить("НаименованиеПолное", "Наименование");
		КонецЕсли;
	ИначеЕсли Схема = "BBAN" Тогда
		Если Тип = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			ИсточникиРеквизитов.Вставить("НомерСчета",          "НомерБанковскогоСчета");
			ИсточникиРеквизитов.Вставить("БИК",                 "БИКПриведенныйКСтандарту");
			ИсточникиРеквизитов.Вставить("БИКБанкаДляРасчетов", "БИКБанкаДляРасчетов");
		КонецЕсли;
	ИначеЕсли Схема = "IBAN" Тогда
		Если Тип = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			ИсточникиРеквизитов.Вставить("НомерСчета",          "НомерБанковскогоСчета");
		ИначеЕсли Тип = Тип("СправочникСсылка.Контрагенты") Тогда
			ИсточникиРеквизитов.Вставить("СтранаРегистрации",   "КодСтраны");
		КонецЕсли;
	ИначеЕсли Схема = "PNNM" Тогда
		Если Тип = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ИсточникиРеквизитов.Вставить("Наименование", "Имя");
		ИначеЕсли Тип = Тип("СправочникСсылка.Контрагенты") Тогда
			ИсточникиРеквизитов.Вставить("Наименование", "Имя");
			ИсточникиРеквизитов.Вставить("НаименованиеПолное", "Имя");
			ИсточникиРеквизитов.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИсточникиРеквизитов;
	
КонецФункции

#Область СоставлениеИдентификаторов

// СведенияОбОбъектеИнформационнойБазы - элемент выборки из запроса, описанной в ОписаниеМетодовПоиска()
Функция ОписаниеИдентификатораПоСхеме(СведенияОбОбъектеИнформационнойБазы, УчастникиОпераций, Схема)
	
	Если Схема = "TXID" Тогда
		Идентификатор = ИдентификаторПоИНН(
			УчастникиОпераций,
			СведенияОбОбъектеИнформационнойБазы.ИНН,
			СведенияОбОбъектеИнформационнойБазы.КПП);
	ИначеЕсли Схема = "BBAN" Тогда
		Если ПустаяСтрока(СведенияОбОбъектеИнформационнойБазы.БИКБанкаДляРасчетов) Тогда
			Идентификатор = ИдентификаторПоНомеруБанковскогоСчета(
				УчастникиОпераций,
				СведенияОбОбъектеИнформационнойБазы.НомерБанковскогоСчета,
				СведенияОбОбъектеИнформационнойБазы.БИК);
		Иначе
			Идентификатор = ИдентификаторПоНомеруБанковскогоСчета(
				УчастникиОпераций,
				СведенияОбОбъектеИнформационнойБазы.НомерБанковскогоСчета,
				СведенияОбОбъектеИнформационнойБазы.БИКБанкаДляРасчетов,
				Истина);
		КонецЕсли;
	ИначеЕсли Схема = "IBAN" Тогда
		Идентификатор = ИдентификаторПоМеждународномуНомеруБанковскогоСчета(
			УчастникиОпераций,
			СведенияОбОбъектеИнформационнойБазы.НомерБанковскогоСчета);
	ИначеЕсли Схема = "BKNM" Тогда
		Идентификатор = ИдентификаторПоНаименованиюБанка(
			УчастникиОпераций,
			СведенияОбОбъектеИнформационнойБазы.НаименованиеПолное,
			СведенияОбОбъектеИнформационнойБазы.НаименованиеПолное);
	ИначеЕсли Схема = "TXZN" Тогда
		Идентификатор = ИдентификаторПоОКТМО(
			УчастникиОпераций,
			СведенияОбОбъектеИнформационнойБазы.КодПоОКТМО);
	ИначеЕсли Схема = "PNNM" Тогда
		Идентификатор = ИдентификаторПоИмениФизическогоЛица(
			УчастникиОпераций,
			СведенияОбОбъектеИнформационнойБазы.Наименование);
	ИначеЕсли Схема = "AIIN" Тогда
		Идентификатор = ИдентификаторПоНомеруКарты(
			УчастникиОпераций,
			СведенияОбОбъектеИнформационнойБазы.НомерКарты);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
	
КонецФункции

Функция ИдентификаторПоНомеруБанковскогоСчета(УчастникиОпераций, НомерБанковскогоСчета, БИК, ИспользуетсяБанкДляРасчетов = Ложь) Экспорт
	
	// Как правило, BBAN - 20-символьный номер счета в соответствии с 385-П.
	// Может быть дополнен справа 9-значным БИК банка
	// - либо того, в котором открыт счет (через символ "/", обеспечивает однозначную идентификацию)
	// - либо того, в котором открыт корреспонденский счет банка, участвующего в расчетах
	//   (через символ "~", не обеспечивает однозначной идентификации счета,
	//    поскольку это не тот банк, в котором открыт указанный в идентификаторе счет)
	
	// Также в качестве BBAN может использоваться номер счета в иностранном банке, не соответствующий ни IBAN, ни 385-П.
	
	Если ТипЗнч(НомерБанковскогоСчета) <> Тип("Строка") Или ПустаяСтрока(НомерБанковскогоСчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Элементы             = Новый Массив;
	Состав               = Новый Структура;
	Точный               = Ложь;
	БазовыйИдентификатор = "";
	
	Состав.Вставить("НомерБанковскогоСчета", НомерБанковскогоСчета);
	Элементы.Добавить(НомерБанковскогоСчета);
	
	Если Не БанковскиеПравила.СтрокаСоответствуетФорматуБанковскогоСчета(НомерБанковскогоСчета) Тогда
		НомерСчетаСоответствуетПравиламЦБР = Ложь;
	ИначеЕсли Не ИспользуетсяБанкДляРасчетов И ЗначениеЗаполнено(БИК) Тогда
		Если БанковскиеПравила.ЭтоРублевыйСчет(НомерБанковскогоСчета) Тогда
			// Ограничиваемся простой проверкой, так как для проверки по контрольному ключу нужен БИК, а он не всегда надежен
			НомерСчетаСоответствуетПравиламЦБР = Истина;
		Иначе
			НомерСчетаСоответствуетПравиламЦБР = БанковскиеПравила.ПроверитьКонтрольныйКлючВНомереБанковскогоСчета(НомерБанковскогоСчета, БИК, Истина);
		КонецЕсли;
	Иначе
		НомерСчетаСоответствуетПравиламЦБР = Истина;
	КонецЕсли;
	
	Если Не НомерСчетаСоответствуетПравиламЦБР Тогда
		Состав.Вставить("АналитикаПоКонтрагентам", Истина);
	Иначе
		БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(НомерБанковскогоСчета);
		
		Состав.Вставить("БалансовыйСчет", БалансовыйСчет);
		
		Состав.Вставить(
			"АналитикаПоКонтрагентам",
			БанковскиеПравила.СчетПозволяетИдентифицироватьКонтрагента(НомерБанковскогоСчета));
		
		Если БанковскиеПравила.ЭтоСчетИндивидуальногоПредпринимателя(БалансовыйСчет)
			Или БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(БалансовыйСчет) Тогда
			Состав.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		ИначеЕсли БанковскиеПравила.ЭтоСчетЮридическогоЛица(БалансовыйСчет) Тогда
			Состав.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		КонецЕсли;
	КонецЕсли;
	
	Разделитель = "";
	Если ТипЗнч(БИК) = Тип("Строка") И Не ПустаяСтрока(БИК) Тогда
		
		Элементы.Добавить(БИК);
		БазовыйИдентификатор = ИдентификаторПоНомеруБанковскогоСчета(УчастникиОпераций, НомерБанковскогоСчета, "", НомерСчетаСоответствуетПравиламЦБР);
		
		Если ИспользуетсяБанкДляРасчетов Тогда
			Разделитель = "~";
			Состав.Вставить("БИКБанкаДляРасчетов", БИК);
		Иначе
			Разделитель = "/";
			Состав.Вставить("БИК", БИК);
			Точный = Истина;
			
			Состав.Вставить("БИКПриведенныйКСтандарту", БанковскиеПравила.ИсправитьБИК(БИК));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Код = СтрСоединить(Элементы, Разделитель);
	
	Возврат УстановитьИдентификатор(УчастникиОпераций, "BBAN", Код, Состав, Точный, БазовыйИдентификатор);
	
КонецФункции

Функция ДополнитьИдентификаторПоНомеруБанковскогоСчета(Идентификатор, БИК, УчастникиОпераций) Экспорт
	
	ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
	
	Если ОписаниеИдентификатора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОписаниеИдентификатора.Схема <> "BBAN" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОписаниеИдентификатора.Точный Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерСчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеИдентификатора.Состав, "НомерБанковскогоСчета", "");
	БИКСоответствуетСчету = БанковскиеПравила.ПроверитьКонтрольныйКлючВНомереБанковскогоСчета(НомерСчета, БИК);
		
	Если Не БИКСоответствуетСчету Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИдентификаторПоНомеруБанковскогоСчета(УчастникиОпераций, НомерСчета, БИК);
	
КонецФункции

Функция ИдентификаторПоМеждународномуНомеруБанковскогоСчета(УчастникиОпераций, НомерБанковскогоСчета) Экспорт
	
	// IBAN в соответствии с ISO 13616-1
	
	Если ТипЗнч(НомерБанковскогоСчета) <> Тип("Строка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не БанковскиеПравила.СтрокаСоответствуетФорматуIBAN(НомерБанковскогоСчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не БанковскиеПравила.ПроверитьКонтрольныйКлючIBAN(НомерБанковскогоСчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Состав = Новый Структура;
	Состав.Вставить("НомерБанковскогоСчета", НомерБанковскогоСчета);
	Состав.Вставить("КодСтраны",             БанковскиеПравила.КодСтраныIBAN(НомерБанковскогоСчета));
	
	Возврат УстановитьИдентификатор(УчастникиОпераций, "IBAN", НомерБанковскогоСчета, Состав, Истина, "");
	
КонецФункции

Функция ИдентификаторПоИНН(УчастникиОпераций, ИНН, КПП) Экспорт
	
	// TXID - ИНН
	//       - 12 знаков для физических лиц
	//       - 10 знаков для организаций
	//         для однозначной идентификации может быть дополнен справа
	//         - символом L (Large taxpayer), если КПП соответствует крупнейшему налогоплательщику
	//         - символом H (Head office) и 9 знаками КПП, если КПП соответствует организации в целом
	//         - символом D (Department)  и 9 знаками КПП, если КПП не соответствует организации в целом
	
	Если ТипЗнч(ИНН) <> Тип("Строка") Или ПустаяСтрока(ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Элементы             = Новый Массив;
	Состав               = Новый Структура;
	Точный               = Ложь;
	БазовыйИдентификатор = "";
	
	Состав.Вставить("ИНН", ИНН);
	Элементы.Добавить(ИНН);
	
	Если ИдентификационныеНомераНалогоплательщиков.ЭтоИННФизическогоЛица(ИНН) Тогда
		
		Состав.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		Точный = Истина;
		
	ИначеЕсли ИдентификационныеНомераНалогоплательщиков.ЭтоИННЮридическогоЛица(ИНН) Тогда
		
		Состав.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		
		ШифрСовместимостиКПП = ШифрСовместимостиКПП(КПП);
		Состав.Вставить("ШифрСовместимостиКПП", ШифрСовместимостиКПП);
		Элементы.Добавить(ШифрСовместимостиКПП);
		
		Если Не ПустаяСтрока(ШифрСовместимостиКПП) Тогда
			
			Состав.Вставить("КПП", КПП);
			Элементы.Добавить(КПП);
			Точный = Истина;
			БазовыйИдентификатор = ИдентификаторПоИНН(УчастникиОпераций, ИНН, "");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Код = СтрСоединить(Элементы, "");
	
	Возврат УстановитьИдентификатор(УчастникиОпераций, "TXID", Код, Состав, Точный, БазовыйИдентификатор);
	
КонецФункции

Функция ШифрСовместимостиКПП(КПП)
	
	КодПричины = ИдентификационныеНомераНалогоплательщиков.КодПричиныПостановкиНаУчет(КПП);
	Если Не ЗначениеЗаполнено(КодПричины) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ИдентификационныеНомераНалогоплательщиков.ЭтоПричинаПостановкиНаУчетКрупнейшегоНалогоплательщика(КодПричины) Тогда
		Возврат "L";
	ИначеЕсли ИдентификационныеНомераНалогоплательщиков.ЭтоПричинаПостановкиНаУчетОрганизацииВЦелом(КодПричины) Тогда
		Возврат "H";
	Иначе
		Возврат "D";
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторПоОКТМО(УчастникиОпераций, Код) Экспорт
	
	// TXZN - Tax administration zone - ОКТМО
	// Код ОКТМО может соответствовать
	// - муниципальному образованию (8 цифр)
	// - населенному пункту, входящему в состав муниципального образования (11 цифр).
	// При этом не допускается использование (передача, публикация) 11-значного кода, в котором последние три цифры "000".
	// 
	// Однако, внутри для единообразия приводим коды к 11 знакам.
	// При этом коды, заканчивающиеся на "000" считаем неточными.
	
	Если ТипЗнч(Код) <> Тип("Строка") Или ПустаяСтрока(Код) Или СтрДлина(Код) > 11 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПриведенныйКод = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Код, 11, "0", "Справа");
	
	Если Прав(ПриведенныйКод, 3) = "000" Тогда
		Точный               = Ложь;
		БазовыйИдентификатор = "";
	Иначе
		Точный               = Истина;
		БазовыйИдентификатор = ИдентификаторПоОКТМО(УчастникиОпераций, Лев(ПриведенныйКод, 8));
	КонецЕсли;
	
	Состав = Новый Структура;
	Состав.Вставить("Код",          ПриведенныйКод);
	Состав.Вставить("ШаблонПоиска", Лев(ПриведенныйКод,8));
	
	Возврат УстановитьИдентификатор(УчастникиОпераций, "TXZN", ПриведенныйКод, Состав, Точный, БазовыйИдентификатор);
	
КонецФункции

Функция ИдентификаторПоИмениФизическогоЛица(УчастникиОпераций, ИмяФизическогоЛица) Экспорт
	
	//PNNM - personal name
	
	Если ТипЗнч(ИмяФизическогоЛица) <> Тип("Строка") Или ПустаяСтрока(ИмяФизическогоЛица) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НаименованиеСлужебное = ФизическиеЛицаЗарплатаКадры.НаименованиеСлужебное(ИмяФизическогоЛица);
	Если ПустаяСтрока(НаименованиеСлужебное) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Состав   = Новый Структура;
	Состав.Вставить("Имя",                       ИмяФизическогоЛица);
	Состав.Вставить("НаименованиеСлужебное",     НаименованиеСлужебное);
	Состав.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	Код = ВРег(НаименованиеСлужебное);
	
	Возврат УстановитьИдентификатор(УчастникиОпераций, "PNNM", Код, Состав, Ложь, "");
	
КонецФункции

Функция ИдентификаторПоНаименованиюБанка(УчастникиОпераций, НаименованиеБанка, НаименованиеКонтрагента) Экспорт
	
	//BKNM - наименование банка
	
	Если ТипЗнч(НаименованиеБанка) = Тип("Строка") И Не ПустаяСтрока(НаименованиеБанка) Тогда
		Наименование = НаименованиеБанка;
	ИначеЕсли ТипЗнч(НаименованиеКонтрагента) = Тип("Строка") И Не ПустаяСтрока(НаименованиеКонтрагента) Тогда
		Наименование = НаименованиеКонтрагента;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИдентификаторПоНаименованиюЮридическогоЛица(УчастникиОпераций, Наименование, "BKNM");
	
КонецФункции

Функция ИдентификаторПоНаименованиюЮридическогоЛица(УчастникиОпераций, Наименование, Схема) Экспорт
	
	Если ТипЗнч(Наименование) <> Тип("Строка") Или ПустаяСтрока(Наименование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВариантыНормализованногоНаименования = НормализованноеНаименованиеОрганизации(Наименование);
	
	Состав   = Новый Структура;
	Состав.Вставить("ВсеСлова",                ВариантыНормализованногоНаименования.ВсеСлова);
	Состав.Вставить("БезОрганизационнойФормы", ВариантыНормализованногоНаименования.БезОрганизационнойФормы);
	Состав.Вставить("ШаблонПоиска",            "%" + СтрЗаменить(ВариантыНормализованногоНаименования.БезОрганизационнойФормы, " ", "%") + "%");
	Состав.Вставить("Наименование",            Наименование);
	Состав.Вставить("СловоФилиал",             СтрНайти(ВРег(Наименование), НСтр("ru = 'ФИЛИАЛ'")));
	
	Возврат УстановитьИдентификатор(
		УчастникиОпераций,
		Схема,
		Наименование,
		Состав,
		Ложь,
		"");
	
КонецФункции

Функция НормализованноеНаименованиеОрганизации(Наименование)
	
	ВариантыНаименования = Новый Структура;
	ВариантыНаименования.Вставить("ВсеСлова",                "");
	ВариантыНаименования.Вставить("БезОрганизационнойФормы", "");
	
	ЭлементыНаименования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Наименование);
	
	ОрганизационноПравовыеФормы = Новый Массив;
	ОрганизационноПравовыеФормы.Добавить("ООО");
	ОрганизационноПравовыеФормы.Добавить("ПАО");
	ОрганизационноПравовыеФормы.Добавить("АО");
	ОрганизационноПравовыеФормы.Добавить("ОАО");
	ОрганизационноПравовыеФормы.Добавить("ЗАО");
	
	ВариантыНаименования.ВсеСлова = НормализоватьЭлементыНаименования(ЭлементыНаименования);
	
	Для Каждого ОрганизационноПравоваяФорма Из ОрганизационноПравовыеФормы Цикл
		ИндексОПФ = ЭлементыНаименования.Найти(ОрганизационноПравоваяФорма);
		Если ИндексОПФ <> Неопределено Тогда
			ЭлементыНаименования.Удалить(ИндексОПФ);
		КонецЕсли;
	КонецЦикла;
	
	ВариантыНаименования.БезОрганизационнойФормы = НормализоватьЭлементыНаименования(ЭлементыНаименования);
	
	Возврат ВариантыНаименования;
	
КонецФункции	

Функция НормализоватьЭлементыНаименования(ЭлементыНаименования)
	
	Возврат ВРег(СокрЛП(СтрСоединить(ЭлементыНаименования, " ")));
	
КонецФункции

Функция СвойстваСоставаИдентификатора(Схема)
	
	ИменаСвойств = Новый ТаблицаЗначений;
	ИменаСвойств.Колонки.Добавить("Имя",            Новый ОписаниеТипов("Строка"));
	ИменаСвойств.Колонки.Добавить("Представление",  Новый ОписаниеТипов("Строка"));
	ИменаСвойств.Колонки.Добавить("ИмяСобственное", Новый ОписаниеТипов("Булево"));
	
	Если Схема = "BBAN" Тогда
		
		ОписаниеСвойства = ИменаСвойств.Добавить();
		ОписаниеСвойства.Имя           = "НомерБанковскогоСчета";
		ОписаниеСвойства.Представление = НСтр("ru = 'номер счета'");
		
		ОписаниеСвойства = ИменаСвойств.Добавить();
		ОписаниеСвойства.Имя           = "БИК";
		ОписаниеСвойства.Представление = НСтр("ru = 'БИК'");
		
		ОписаниеСвойства = ИменаСвойств.Добавить();
		ОписаниеСвойства.Имя           = "БИКБанкаДляРасчетов";
		ОписаниеСвойства.Представление = НСтр("ru = 'БИК банка-корреспондента'");
		
	ИначеЕсли Схема = "IBAN" Тогда
		
		ОписаниеСвойства = ИменаСвойств.Добавить();
		ОписаниеСвойства.Имя           = "НомерБанковскогоСчета";
		ОписаниеСвойства.Представление = НСтр("ru = 'номер'");
		
	ИначеЕсли Схема = "TXID" Тогда
		
		ОписаниеСвойства = ИменаСвойств.Добавить();
		ОписаниеСвойства.Имя           = "ИНН";
		ОписаниеСвойства.Представление = НСтр("ru = 'ИНН'");
		
		ОписаниеСвойства = ИменаСвойств.Добавить();
		ОписаниеСвойства.Имя           = "КПП";
		ОписаниеСвойства.Представление = НСтр("ru = 'КПП'");
		
	ИначеЕсли Схема = "BKNM" Тогда
		
		ОписаниеСвойства = ИменаСвойств.Добавить();
		ОписаниеСвойства.Имя           = "Наименование";
		ОписаниеСвойства.Представление = НСтр("ru = 'наименование банка'");
		
	ИначеЕсли Схема = "TXZN" Тогда
		
		ОписаниеСвойства = ИменаСвойств.Добавить();
		ОписаниеСвойства.Имя           = "Код";
		ОписаниеСвойства.Представление = НСтр("ru = 'код по ОКТМО'");
		
	ИначеЕсли Схема = "PNNM" Тогда
		
		ОписаниеСвойства = ИменаСвойств.Добавить();
		ОписаниеСвойства.Имя           = "Имя";
		ОписаниеСвойства.Представление = НСтр("ru = 'ФИО'");
		
	ИначеЕсли Схема = "AIIN" Тогда
		
		ОписаниеСвойства = ИменаСвойств.Добавить();
		ОписаниеСвойства.Имя           = "НомерКарты";
		ОписаниеСвойства.Представление = НСтр("ru = 'номер карты'");
		
	КонецЕсли;
	
	Возврат ИменаСвойств;
	
КонецФункции

Функция ПредставлениеИдентификатора(Идентификатор, УчастникиОпераций) Экспорт
	
	ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
	Если ОписаниеИдентификатора = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЭлементыПредставления = Новый Массив;
	Для Каждого ОписаниеСвойства Из СвойстваСоставаИдентификатора(ОписаниеИдентификатора.Схема) Цикл
		
		Значение = Неопределено;
		Если Не ОписаниеИдентификатора.Состав.Свойство(ОписаниеСвойства.Имя, Значение) 
			Или Не ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ОписаниеСвойства.Представление) Тогда
			Элемент = СтрШаблон(НСтр("ru = '""%1""'"), Значение);
		Иначе
			Элемент = СтрШаблон(НСтр("ru = '%1 %2'"), ОписаниеСвойства.Представление, Значение);
		КонецЕсли;
		
		ЭлементыПредставления.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ЭлементыПредставления, НСтр("ru = ', '"));
	
КонецФункции

Функция ИдентификаторПоНомеруКарты(УчастникиОпераций, НомерКарты) Экспорт
	
	//AIIN - A(BA) + IIN - Номер карты (16 цифр).
	// The ISO Register of Issuer Identification Numbers (IIN) database is managed by the American Bankers Association.
	// ABA is the Registration Authority for this standard and is responsible for allocating IINs to issuers.
	
	Если ТипЗнч(НомерКарты) <> Тип("Строка") Или ПустаяСтрока(НомерКарты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Состав   = Новый Структура;
	Состав.Вставить("НомерКарты",                НомерКарты);
	Состав.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	Возврат УстановитьИдентификатор(УчастникиОпераций, "AIIN", НомерКарты, Состав, Ложь, "");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ДанныеИнформационнойБазыОбУчастникахОпераций

Процедура НайтиВИнформационнойБазе(УчастникиОпераций, СведенияОВладельцеБанковскогоСчетаИзКонтекста) Экспорт
	
	КоличествоОрганизацийКонтекста      = СведенияОВладельцеБанковскогоСчетаИзКонтекста.Организация.Количество();
	КоличествоБанковскихСчетовКонтекста = СведенияОВладельцеБанковскогоСчетаИзКонтекста.БанковскийСчетОрганизации.Количество();
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	
	ВсеСсылкиИзИнформационнойБазы = Новый Соответствие; // Все, выбранные из базы, даже если при дальнейшем поиске отвергнуты; 
	                                                    // Ключ - Ссылка, Значение - Соответствие - наиболее надежные идентификаторы и их описания
	
	Для Каждого МетодПоиска Из ОписаниеМетодовПоиска() Цикл
		
		ЗначенияПоискаЗапросом = Новый ТаблицаЗначений;
		ЗначенияПоискаЗапросом.Колонки.Добавить("Идентификатор", ТипИдентификаторСоСхемой());
		Для Каждого ОписаниеПоля Из МетодПоиска.ПоляПоискаЗапросом Цикл
			ЗначенияПоискаЗапросом.Колонки.Добавить(ОписаниеПоля.Ключ, ОписаниеПоля.Значение);
		КонецЦикла;
		
		ЕстьКолонкаНомерБанковскогоСчета = ЗначенияПоискаЗапросом.Колонки.Найти("НомерБанковскогоСчета") <> Неопределено;
		
		Отбор = Новый Структура("Схема", МетодПоиска.Схема);
		Для Каждого ОписаниеИдентификатора Из УчастникиОпераций.Идентификаторы.НайтиСтроки(Отбор) Цикл
			
			НоваяСтрока = ЗначенияПоискаЗапросом.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеИдентификатора.Состав);
			НоваяСтрока.Идентификатор = ОписаниеИдентификатора.Идентификатор;
			
			Если ЕстьКолонкаНомерБанковскогоСчета И ЗначениеЗаполнено(НоваяСтрока.НомерБанковскогоСчета) Тогда
				НоваяСтрока.НомерБанковскогоСчета = СокрП(НоваяСтрока.НомерБанковскогоСчета);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ЗначенияПоискаЗапросом) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетодПоиска.Схема = "BKNM" Тогда
			Запрос = ЗапросМетодаПоискаBKNM(ЗначенияПоискаЗапросом);
		Иначе
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ЗначенияПоискаЗапросом", ЗначенияПоискаЗапросом);
			Запрос.Текст = МетодПоиска.ТекстЗапросаСсылок;
		КонецЕсли;
		
		ВыборкаИдентификаторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИдентификаторов.Следующий() Цикл
			
			ЧтоИщем = ОписаниеИдентификатора(ВыборкаИдентификаторов.Идентификатор, УчастникиОпераций);
			Если ЧтоИщем = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаТиповВладельца = ВыборкаИдентификаторов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаТиповВладельца.Следующий() Цикл
			
				ВыборкаТипов = ВыборкаТиповВладельца.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаТипов.Следующий() Цикл
					
					ВыборкаСсылок = ВыборкаТипов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					// Из ссылок одного типа выберем соответствующие идентификатору в большей мере
					МаксимальнаяМераСоответствия = 0;
					СсылкиМаксимальноеСоответствие  = Новый Соответствие;
					
					Пока ВыборкаСсылок.Следующий() Цикл
						
						ЧтоНашли = ОписаниеИдентификатораПоСхеме(ВыборкаСсылок, УчастникиОпераций, МетодПоиска.Схема);
						Если ЧтоНашли = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						// Дополним СсылкиИзИнформационнойБазы
						ИдентификаторыСсылки = ВсеСсылкиИзИнформационнойБазы[ВыборкаСсылок.Ссылка];
						Если ИдентификаторыСсылки = Неопределено Тогда
							ИдентификаторыСсылки = Новый Соответствие;
							ВсеСсылкиИзИнформационнойБазы.Вставить(ВыборкаСсылок.Ссылка, ИдентификаторыСсылки);
						КонецЕсли;
						ИдентификаторыСсылки.Вставить(ЧтоНашли.Идентификатор, ЧтоНашли);
						
						МераСоответствия = МераСоответствияИдентификаторов(ЧтоИщем, ЧтоНашли, МетодПоиска.Схема);
						
						Если МераСоответствия = 0 Тогда
							// Не соответствует ни в какой мере
							Продолжить;
						КонецЕсли;
						
						Если Не ВыборкаСсылок.ПометкаУдаления Тогда
							МераСоответствия = МераСоответствия + Pow(2, ПоказательМаксимальногоСоответствияИдентификаторов() + 1);
						КонецЕсли;
						
						Если ВыборкаСсылок.ТипВладельца = Тип("СправочникСсылка.Организации") Тогда
							// Элемент справочника Организации может быть доступен, но доступа к документам этой организации может не быть
							Если ДоступныеОрганизации.Найти(ВыборкаСсылок.Владелец) <> Неопределено Тогда
								МераСоответствия = МераСоответствия + Pow(2, -1);
							КонецЕсли;
							// На степень соответствия влияет контекст
							Индекс = СведенияОВладельцеБанковскогоСчетаИзКонтекста.Организация.Найти(ВыборкаСсылок.Владелец);
							Если Индекс <> Неопределено Тогда
								МераСоответствия = МераСоответствия + Pow(2, ПоказательМаксимальногоСоответствияИдентификаторов() + 2 + КоличествоОрганизацийКонтекста - Индекс);
							КонецЕсли;
							Индекс = СведенияОВладельцеБанковскогоСчетаИзКонтекста.БанковскийСчетОрганизации.Найти(ВыборкаСсылок.Ссылка);
							Если Индекс <> Неопределено Тогда
								МераСоответствия = МераСоответствия + Pow(2, ПоказательМаксимальногоСоответствияИдентификаторов() + 2 + КоличествоОрганизацийКонтекста + КоличествоБанковскихСчетовКонтекста - Индекс);
							КонецЕсли;
						КонецЕсли;
						
						Если МераСоответствия < МаксимальнаяМераСоответствия Тогда
							Продолжить;
						ИначеЕсли МераСоответствия > МаксимальнаяМераСоответствия Тогда
							МаксимальнаяМераСоответствия = МераСоответствия;
							СсылкиМаксимальноеСоответствие.Очистить();
						КонецЕсли;
						
						СсылкиМаксимальноеСоответствие.Вставить(ВыборкаСсылок.Ссылка, ЧтоНашли);
						
					КонецЦикла;
					
					// Поместим выбранные данные в коллекцию
					Если СсылкиМаксимальноеСоответствие.Количество() > 0 Тогда
						ВыборкаСсылок.Сбросить();
						Пока ВыборкаСсылок.Следующий() Цикл
							
							Если СсылкиМаксимальноеСоответствие[ВыборкаСсылок.Ссылка] = Неопределено Тогда
								// Ссылка не соответствует идентификатору (вообще или в нужной мере)
								Продолжить;
							КонецЕсли;
							
							ДобавитьСсылку(УчастникиОпераций, ЧтоИщем, ВыборкаСсылок.Ссылка, ВыборкаСсылок);
							Если ВыборкаСсылок.Ссылка <> ВыборкаСсылок.Владелец Тогда
								ДобавитьСсылку(УчастникиОпераций, ЧтоИщем, ВыборкаСсылок.Владелец, ВыборкаСсылок);
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла; // ВыборкаТипов
			КонецЦикла; // ВыборкаТиповВладельца
		КонецЦикла;
	КонецЦикла;
	
	// Некоторые ссылки могли быть найдены по не самым надежным идентификаторам.
	// Например, контрагент найден по банковскому счету, а не по ИНН.
	// Для таких ссылок информация в УчастникиОпераций о составе идентификаторов может быть неполной.
	// Дополним ее - для всех таких ссылок найдем и более надежные идентификаторы.
	ТребуютсяИдентификаторы = Новый Структура; // Ключ - имя схемы; Значение - Массив ссылок
	Для Каждого СсылкиПоТипу Из УчастникиОпераций.Ссылки Цикл
		
		Схемы = СхемыИдентифицирующиеТип(СсылкиПоТипу.Ключ);
		Для Каждого ИмяСхемы Из Схемы Цикл
			Если ТребуютсяИдентификаторы.Свойство(ИмяСхемы) Тогда
				Продолжить;
			КонецЕсли;
			ТребуютсяИдентификаторы.Вставить(ИмяСхемы, Новый Массив);
		КонецЦикла;
		
		Для Каждого ОписаниеСсылки Из СсылкиПоТипу.Значение Цикл
			
			ИндексНаилучшейСхемы = Схемы.Количество();
			
			НадежныеИдентификаторы = ВсеСсылкиИзИнформационнойБазы[ОписаниеСсылки.Ссылка];
			Если НадежныеИдентификаторы <> Неопределено Тогда
				
				Для Каждого ИдентификаторКлючИЗначение Из НадежныеИдентификаторы Цикл
					
					ИндексСхемы = Схемы.Найти(ИдентификаторКлючИЗначение.Значение.Схема);
					Если ИндексСхемы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ИндексНаилучшейСхемы = Мин(ИндексНаилучшейСхемы, ИндексСхемы);
					
					ДобавитьСсылку(
						УчастникиОпераций,
						ИдентификаторКлючИЗначение.Значение,
						ОписаниеСсылки.Ссылка,
						Новый Структура);// Все данные объекта уже заполнены
					
				КонецЦикла;
					
			КонецЕсли;
			
			Для ИндексСхемы = 0 По ИндексНаилучшейСхемы - 1 Цикл
				ИмяСхемы = Схемы[ИндексСхемы];
				ТребуютсяИдентификаторы[ИмяСхемы].Добавить(ОписаниеСсылки.Ссылка);
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого МетодПоиска Из ОписаниеМетодовПоиска() Цикл
		
		Если ПустаяСтрока(МетодПоиска.ТекстЗапросаИдентификаторов) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТребуютсяИдентификаторы.Свойство(МетодПоиска.Схема) Тогда
			Продолжить;
		КонецЕсли;
		
		СсылкиТребуетсяЗапросИнформационнойБазы = ТребуютсяИдентификаторы[МетодПоиска.Схема];
		Если Не ЗначениеЗаполнено(СсылкиТребуетсяЗапросИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос(МетодПоиска.ТекстЗапросаИдентификаторов);
		Запрос.УстановитьПараметр("Ссылки", СсылкиТребуетсяЗапросИнформационнойБазы);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОписаниеИдентификатора = ОписаниеИдентификатораПоСхеме(Выборка, УчастникиОпераций, МетодПоиска.Схема);
			ДобавитьСсылку(
				УчастникиОпераций,
				ОписаниеИдентификатора,
				Выборка.Ссылка,
				Новый Структура);// Все данные объекта уже заполнены
		КонецЦикла;
		
	КонецЦикла;
	
	// Дополним информацией о договорах
	НайтиДоговорыКонтрагентовВИнформационнойБазе(УчастникиОпераций);
	
КонецПроцедуры

// Позволяет использовать методы, основанные на идентификаторах, но без поиска по идентификаторам
// 
Процедура ДополнитьУчастникиОперацийСсылкой(УчастникиОпераций, Ссылка, ОписаниеСсылки, Идентификаторы) Экспорт
	
	ТипСсылки = ТипЗнч(Ссылка);
	ЕстьПодходящийИдентификатор = Ложь;
	Для Каждого Идентификатор Из Идентификаторы Цикл
		ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
		Если ОписаниеИдентификатора <> Неопределено И СхемаСоответствуетТипу(ОписаниеИдентификатора, ТипСсылки) Тогда
			ЕстьПодходящийИдентификатор = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьПодходящийИдентификатор Тогда
		
		СоставИдентификатора = Новый Структура;
		СоставИдентификатора.Вставить("УникальныйИдентификатор", Ссылка.УникальныйИдентификатор());
		СоставИдентификатора.Вставить("Тип",                     ТипЗнч(Ссылка));
		
		Идентификатор = УстановитьИдентификатор(
			УчастникиОпераций,
			СхемаВнутреннийИдентификатор(),
			СоставИдентификатора.УникальныйИдентификатор,
			СоставИдентификатора,
			Истина,
			"");
		Идентификаторы.Добавить(Идентификатор);
		
	КонецЕсли;
		
	Для Каждого Идентификатор Из Идентификаторы Цикл
		ДобавитьСсылку(УчастникиОпераций, Идентификатор, Ссылка, ОписаниеСсылки);
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйОписаниеМетодаПоиска(Схема)
	
	МетодПоиска = Новый Структура;
	МетодПоиска.Вставить("Схема",                      Схема);
	МетодПоиска.Вставить("ПоляПоискаЗапросом",         Новый Структура);// Ключ - имя поля, Значение - тип
	МетодПоиска.Вставить("ТекстЗапросаИдентификаторов","");
	// Используется для получения идентификаторов ссылок, найденных менее надежными методами.
	// Должен содержать поле Ссылка и поля, по которым конструируются идентификаторы (см. ОписаниеИдентификатораПоСхеме())
	// Может быть не задан.
	МетодПоиска.Вставить("ТекстЗапросаСсылок",         "");
	// Должен содержать
	// - поля итогов
	//   Идентификатор
	//	 ТипВладельца
	//	 Тип
	// - поля
	//	 Ссылка
	//	 Владелец
	//	 ПометкаУдаления
	//	 ЮридическоеФизическоеЛицо
	// а также поля, по которым выполняется поиск ссылок (см. ПоляПоискаЗапросом),
	// конструирование идентификаторов (см. ОписаниеИдентификатораПоСхеме())
	// и уточнение приоритетов (см. ПриоритетСсылки())
	
	Возврат МетодПоиска;
	
КонецФункции

#Область МетодыПоиска

// См. также область СхемыИдентификации

Функция ОписаниеМетодовПоиска()
	
	МетодыПоиска = Новый Массив;
	МетодыПоиска.Добавить(ОписаниеМетодаПоискаBBAN());
	МетодыПоиска.Добавить(ОписаниеМетодаПоискаIBAN());
	МетодыПоиска.Добавить(ОписаниеМетодаПоискаTXID());
	МетодыПоиска.Добавить(ОписаниеМетодаПоискаBKNM());
	МетодыПоиска.Добавить(ОписаниеМетодаПоискаTXZN());
	МетодыПоиска.Добавить(ОписаниеМетодаПоискаPNNM());
	МетодыПоиска.Добавить(ОписаниеМетодаПоискаAIIN());
	
	Возврат МетодыПоиска;
	
КонецФункции

Функция ПоказательМаксимальногоСоответствияИдентификаторов()
	
	Возврат 5; // следующий, после 2^4 - см. МераСоответствияИдентификаторовBKNM()
	
КонецФункции

// Мера соответствия идентификаторов - это число от 0 до 2^M, где M задано в ПоказательМаксимальногоСоответствияИдентификаторов().
// 2^M означает, что идентификаторы 
//   a) совпадают
//   b) точные - не допускают двусмысленной трактовки
// 0   означает, что идентификаторы с достаточной степенью уверенности соответствуют разным объектам.
//
// Условия сравнения в функции дополняют условия, реализованные в запросах из ОписаниеМетодовПоиска().
// Так, поскольку в ОписаниеМетодаПоискаTXID() проверка на совпадение ИНН выполнена,
// то в МераСоответствияИдентификаторов() совпадение ИНН не проверяется.
//
Функция МераСоответствияИдентификаторов(ОписаниеИдентификатора1, ОписаниеИдентификатора2, ИмяСхемы)
	
	Если ОписаниеИдентификатора1.Точный 
		И ОписаниеИдентификатора2.Точный 
		И ОписаниеИдентификатора1.Идентификатор = ОписаниеИдентификатора2.Идентификатор Тогда
		Возврат Pow(2, ПоказательМаксимальногоСоответствияИдентификаторов());
	КонецЕсли;
	
	Если ИмяСхемы = "TXID" Тогда
		Возврат МераСоответствияИдентификаторовTXID(ОписаниеИдентификатора1, ОписаниеИдентификатора2);
	ИначеЕсли ИмяСхемы = "BBAN" Тогда
		Возврат МераСоответствияИдентификаторовBBAN(ОписаниеИдентификатора1, ОписаниеИдентификатора2);
	ИначеЕсли ИмяСхемы = "BKNM" Тогда
		Возврат МераСоответствияИдентификаторовBKNM(ОписаниеИдентификатора1, ОписаниеИдентификатора2);
	ИначеЕсли ИмяСхемы = "TXZN" Или ИмяСхемы = "PNNM" Или ИмяСхемы = "AIIN" Тогда
		Возврат 1; // Считаем соответствующими все, попавшие под отбор
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ОписаниеМетодаПоискаBBAN()
	
	// В этом методе могут проверяться разные национальные правила (кроме IBAN):
	// российские, китайские и т.д.
	
	МетодПоиска = НовыйОписаниеМетодаПоиска("BBAN");
	
	МетодПоиска.ПоляПоискаЗапросом.Вставить("НомерБанковскогоСчета",
		Метаданные.Справочники.БанковскиеСчета.Реквизиты.НомерСчета.Тип);
	МетодПоиска.ПоляПоискаЗапросом.Вставить("АналитикаПоКонтрагентам", Новый ОписаниеТипов("Булево"));
	
	МетодПоиска.ТекстЗапросаСсылок =
	"ВЫБРАТЬ
	|	ЗначенияПоискаЗапросом.Идентификатор КАК Идентификатор,
	|	ЗначенияПоискаЗапросом.НомерБанковскогоСчета КАК НомерБанковскогоСчета,
	|	ЗначенияПоискаЗапросом.АналитикаПоКонтрагентам КАК АналитикаПоКонтрагентам
	|ПОМЕСТИТЬ ЗначенияПоискаЗапросом
	|ИЗ
	|	&ЗначенияПоискаЗапросом КАК ЗначенияПоискаЗапросом
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерБанковскогоСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыПоиска.Идентификатор КАК Идентификатор,
	|	ТИПЗНАЧЕНИЯ(БанковскиеСчета.Ссылка) КАК Тип,
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец) КАК ТипВладельца,
	|	БанковскиеСчета.Владелец КАК Владелец,
	|	БанковскиеСчета.ПометкаУдаления КАК ПометкаУдаления,
	|	БанковскиеСчета.НомерСчета КАК НомерБанковскогоСчета,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	"""" КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.Владелец ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|		ИНАЧЕ ЕСТЬNULL(БанковскиеСчета.Владелец.ЮридическоеФизическоеЛицо, ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо))
	|	КОНЕЦ КАК ЮридическоеФизическоеЛицо,
	|	БанковскиеСчета.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	ЕСТЬNULL(БанковскиеСчета.Владелец.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка, ЛОЖЬ) КАК УстановленОсновным,
	|	БанковскиеСчета.СчетКорпоративныхРасчетов КАК СчетКорпоративныхРасчетов
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО БанковскиеСчета.НомерСчета = ПараметрыПоиска.НомерБанковскогоСчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыПоиска.Идентификатор,
	|	ТИПЗНАЧЕНИЯ(ЗарплатныеПроекты.Ссылка),
	|	ЗарплатныеПроекты.Ссылка,
	|	ТИПЗНАЧЕНИЯ(ЗарплатныеПроекты.Организация),
	|	ЗарплатныеПроекты.Организация,
	|	ЗарплатныеПроекты.ПометкаУдаления,
	|	ЗарплатныеПроекты.РасчетныйСчет,
	|	ЕСТЬNULL(ЗарплатныеПроекты.Банк.Код, """"),
	|	"""",
	|	ЗарплатныеПроекты.Организация.ЮридическоеФизическоеЛицо,
	|	ЗарплатныеПроекты.Валюта,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО ЗарплатныеПроекты.РасчетныйСчет = ПараметрыПоиска.НомерБанковскогоСчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыПоиска.Идентификатор,
	|	ТИПЗНАЧЕНИЯ(БанковскиеСчета.Ссылка),
	|	БанковскиеСчета.Ссылка,
	|	ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец),
	|	БанковскиеСчета.Владелец,
	|	БанковскиеСчета.ПометкаУдаления,
	|	БанковскиеСчета.НомерСчета,
	|	"""",
	|	БанковскиеСчета.БанкДляРасчетов.Код,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.Владелец ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|		ИНАЧЕ ЕСТЬNULL(БанковскиеСчета.Владелец.ЮридическоеФизическоеЛицо, ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо))
	|	КОНЕЦ,
	|	БанковскиеСчета.ВалютаДенежныхСредств,
	|	ЕСТЬNULL(БанковскиеСчета.Владелец.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка, ЛОЖЬ),
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО БанковскиеСчета.НомерСчета = ПараметрыПоиска.НомерБанковскогоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанковскиеСчета.БанкДляРасчетов = Банки.Ссылка
	|ИТОГИ ПО
	|	Идентификатор,
	|	ТипВладельца,
	|	Тип";
	
	Возврат МетодПоиска;
	
КонецФункции

Функция МераСоответствияИдентификаторовBBAN(ОписаниеИдентификатора1, ОписаниеИдентификатора2)
	
	БИК1 = ?(ОписаниеИдентификатора1.Состав.Свойство("БИК"), ОписаниеИдентификатора1.Состав.БИК, Неопределено);
	БИК2 = ?(ОписаниеИдентификатора2.Состав.Свойство("БИК"), ОписаниеИдентификатора2.Состав.БИК, Неопределено);
	
	Если Не ЗначениеЗаполнено(БИК1) Или Не ЗначениеЗаполнено(БИК2) Тогда
		БИКБанкаДляРасчетов1 = ?(ОписаниеИдентификатора1.Состав.Свойство("БИКБанкаДляРасчетов"), ОписаниеИдентификатора1.Состав.БИКБанкаДляРасчетов, Неопределено);
		БИКБанкаДляРасчетов2 = ?(ОписаниеИдентификатора2.Состав.Свойство("БИКБанкаДляРасчетов"), ОписаниеИдентификатора2.Состав.БИКБанкаДляРасчетов, Неопределено);
		Если Не ЗначениеЗаполнено(БИКБанкаДляРасчетов1)
			Или Не ЗначениеЗаполнено(БИКБанкаДляРасчетов2)
			Или БИКБанкаДляРасчетов1 <> БИКБанкаДляРасчетов2 Тогда
			МераСоответствия = 2; // могут соответствовать, но точно сказать нельзя, поскольку нет информации о БИК
		Иначе
			МераСоответствия = 3; // больше вероятность, что соответствуют
		КонецЕсли;
	ИначеЕсли СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(БИК1) <> СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(БИК2) Тогда
		// Отдельные российские банки в отношении счета, по которому передается выписка,
		// передают не БИК (состоящий из цифр), а BIC (включающий символы латинского алфавита).
		// В результате, в информационной базе и в файле идентификатор банка имеет разный формат.
		// Такие БИК тоже могут оказаться соответствующими друг другу.
		МераСоответствия = 1;
	ИначеЕсли ОписаниеИдентификатора1.Состав.БИКПриведенныйКСтандарту = ОписаниеИдентификатора2.Состав.БИКПриведенныйКСтандарту Тогда // Раз оба БИК заполнены, то и оба БИКПриведенныйКСтандарту заполнены
		МераСоответствия = 4;
	Иначе
		МераСоответствия = 0;
	КонецЕсли;
	
	// Максимальная == 2^2
	Возврат МераСоответствия;
	
КонецФункции

Функция ОписаниеМетодаПоискаIBAN()
	
	МетодПоиска = НовыйОписаниеМетодаПоиска("IBAN");
	
	МетодПоиска.ПоляПоискаЗапросом.Вставить("НомерБанковскогоСчета", БанковскиеПравила.ТипМеждународныйНомерСчета());
	
	МетодПоиска.ТекстЗапросаСсылок = 
	"ВЫБРАТЬ
	|	ЗначенияПоискаЗапросом.Идентификатор КАК Идентификатор,
	|	ЗначенияПоискаЗапросом.НомерБанковскогоСчета КАК НомерБанковскогоСчета
	|ПОМЕСТИТЬ ЗначенияПоискаЗапросом
	|ИЗ
	|	&ЗначенияПоискаЗапросом КАК ЗначенияПоискаЗапросом
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерБанковскогоСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыПоиска.Идентификатор КАК Идентификатор,
	|	ТИПЗНАЧЕНИЯ(БанковскиеСчета.Ссылка) КАК Тип,
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец) КАК ТипВладельца,
	|	БанковскиеСчета.Владелец КАК Владелец,
	|	БанковскиеСчета.ПометкаУдаления КАК ПометкаУдаления,
	|	БанковскиеСчета.НомерСчета КАК НомерБанковскогоСчета,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	"""" КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.Владелец ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|		ИНАЧЕ ЕСТЬNULL(БанковскиеСчета.Владелец.ЮридическоеФизическоеЛицо, ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо))
	|	КОНЕЦ КАК ЮридическоеФизическоеЛицо,
	|	БанковскиеСчета.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	ЕСТЬNULL(БанковскиеСчета.Владелец.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка, ЛОЖЬ) КАК УстановленОсновным
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО БанковскиеСчета.НомерСчета = ПараметрыПоиска.НомерБанковскогоСчета
	|
	|ИТОГИ ПО
	|	Идентификатор,
	|	ТипВладельца,
	|	Тип";
	
	Возврат МетодПоиска;
	
КонецФункции

Функция ОписаниеМетодаПоискаTXID()
	
	МетодПоиска = НовыйОписаниеМетодаПоиска("TXID");
	
	МетодПоиска.ПоляПоискаЗапросом.Вставить("ИНН", ОбщегоНазначения.ОписаниеТипаСтрока(ИдентификационныеНомераНалогоплательщиков.МаксимальнаяДлинаИНН()));
	
	МетодПоиска.ТекстЗапросаСсылок =
	"ВЫБРАТЬ
	|	ЗначенияПоискаЗапросом.Идентификатор КАК Идентификатор,
	|	ЗначенияПоискаЗапросом.ИНН КАК ИНН
	|ПОМЕСТИТЬ ЗначенияПоискаЗапросом
	|ИЗ
	|	&ЗначенияПоискаЗапросом КАК ЗначенияПоискаЗапросом
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыПоиска.Идентификатор КАК Идентификатор,
	|	ТИПЗНАЧЕНИЯ(Контрагенты.Ссылка) КАК Тип,
	|	Контрагенты.Ссылка КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(Контрагенты.Ссылка) КАК ТипВладельца,
	|	Контрагенты.Ссылка КАК Владелец,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Контрагенты.ГосударственныйОрган КАК ГосударственныйОрган,
	|	Контрагенты.ВидГосударственногоОргана КАК ВидГосударственногоОргана,
	|	Контрагенты.ПометкаУдаления КАК ПометкаУдаления,
	|	Контрагенты.ИННВведенКорректно КАК ИННВведенКорректно,
	|	Контрагенты.ГоловнойКонтрагент = Контрагенты.Ссылка
	|		ИЛИ Контрагенты.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Головной
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО Контрагенты.ИНН = ПараметрыПоиска.ИНН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыПоиска.Идентификатор,
	|	ТИПЗНАЧЕНИЯ(ИсторияКПП.Ссылка),
	|	ИсторияКПП.Ссылка,
	|	ТИПЗНАЧЕНИЯ(ИсторияКПП.Ссылка),
	|	ИсторияКПП.Ссылка,
	|	ИсторияКПП.Ссылка.ИНН,
	|	ИсторияКПП.КПП,
	|	ИсторияКПП.Ссылка.ЮридическоеФизическоеЛицо,
	|	ИсторияКПП.Ссылка.ГосударственныйОрган,
	|	ИсторияКПП.Ссылка.ВидГосударственногоОргана,
	|	ИсторияКПП.Ссылка.ПометкаУдаления,
	|	ИсторияКПП.Ссылка.ИННВведенКорректно,
	|	ИсторияКПП.Ссылка.ГоловнойКонтрагент = ИсторияКПП.Ссылка
	|		ИЛИ ИсторияКПП.Ссылка.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|ИЗ
	|	Справочник.Контрагенты.ИсторияКПП КАК ИсторияКПП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО ИсторияКПП.Ссылка.ИНН = ПараметрыПоиска.ИНН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыПоиска.Идентификатор,
	|	ТИПЗНАЧЕНИЯ(ФизическиеЛица.Ссылка),
	|	ФизическиеЛица.Ссылка,
	|	ТИПЗНАЧЕНИЯ(ФизическиеЛица.Ссылка),
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.ИНН,
	|	"""",
	|	ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо),
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыГосударственныхОрганов.ПустаяСсылка),
	|	ФизическиеЛица.ПометкаУдаления,
	|	ИСТИНА,
	|	ИСТИНА
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО ФизическиеЛица.ИНН = ПараметрыПоиска.ИНН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыПоиска.Идентификатор,
	|	ТИПЗНАЧЕНИЯ(Организации.Ссылка),
	|	Организации.Ссылка,
	|	ТИПЗНАЧЕНИЯ(Организации.Ссылка),
	|	Организации.Ссылка,
	|	Организации.ИНН,
	|	Организации.КПП,
	|	Организации.ЮридическоеФизическоеЛицо,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыГосударственныхОрганов.ПустаяСсылка),
	|	Организации.ПометкаУдаления,
	|	ИСТИНА,
	|	Организации.ГоловнаяОрганизация = Организации.Ссылка
	|		ИЛИ Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО Организации.ИНН = ПараметрыПоиска.ИНН
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПараметрыПоиска.Идентификатор,
	|	ТИПЗНАЧЕНИЯ(Организации.Ссылка),
	|	Организации.Ссылка,
	|	ТИПЗНАЧЕНИЯ(Организации.Ссылка),
	|	Организации.Ссылка,
	|	Организации.ИНН,
	|	"""",
	|	Организации.ЮридическоеФизическоеЛицо,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыГосударственныхОрганов.ПустаяСсылка),
	|	Организации.ПометкаУдаления,
	|	ИСТИНА,
	|	Организации.ГоловнаяОрганизация = Организации.Ссылка
	|		ИЛИ Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО Организации.ИНН = ПараметрыПоиска.ИНН
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПараметрыПоиска.Идентификатор,
	|	ТИПЗНАЧЕНИЯ(ИсторияКПП.СтруктурнаяЕдиница),
	|	ИсторияКПП.СтруктурнаяЕдиница,
	|	ТИПЗНАЧЕНИЯ(ИсторияКПП.СтруктурнаяЕдиница),
	|	ИсторияКПП.СтруктурнаяЕдиница,
	|	ИсторияКПП.СтруктурнаяЕдиница.ИНН,
	|	ИсторияКПП.РегистрацияВНалоговомОргане.КПП,
	|	ИсторияКПП.СтруктурнаяЕдиница.ЮридическоеФизическоеЛицо,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыГосударственныхОрганов.ПустаяСсылка),
	|	ИсторияКПП.СтруктурнаяЕдиница.ПометкаУдаления,
	|	ИСТИНА,
	|	ИсторияКПП.СтруктурнаяЕдиница.ГоловнаяОрганизация = ИсторияКПП.СтруктурнаяЕдиница
	|		ИЛИ ИсторияКПП.СтруктурнаяЕдиница.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияКПП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО ИсторияКПП.СтруктурнаяЕдиница.ИНН = ПараметрыПоиска.ИНН
	|ГДЕ
	|	ИсторияКПП.СтруктурнаяЕдиница ССЫЛКА Справочник.Организации
	|ИТОГИ ПО
	|	Идентификатор,
	|	ТипВладельца,
	|	Тип";
	
	// У организации могут быть филиалы или другие обособленные подразделения.
	// У них будет свой КПП. Иногда именно этот КПП указывается в банковских выписках.
	// При этом информация о филиалах (и их КПП) может отсутствовать в справочнике Организации.
	// Поэтому в информационной базе нужно искать организации, в том числе, без учета КПП.
	// Чтобы это реализовать в выборку включаем организации несколько раз: с указанным КПП и с пустым КПП.
	
	МетодПоиска.ТекстЗапросаИдентификаторов =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИсторияКПП.Ссылка,
	|	ИсторияКПП.Ссылка.ИНН,
	|	ИсторияКПП.КПП
	|ИЗ
	|	Справочник.Контрагенты.ИсторияКПП КАК ИсторияКПП
	|ГДЕ
	|	ИсторияКПП.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.ИНН,
	|	""""
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ИНН,
	|	Организации.КПП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ИНН,
	|	""""
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИсторияКПП.СтруктурнаяЕдиница,
	|	ИсторияКПП.СтруктурнаяЕдиница.ИНН,
	|	ИсторияКПП.РегистрацияВНалоговомОргане.КПП
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияКПП
	|ГДЕ
	|	ИсторияКПП.СтруктурнаяЕдиница ССЫЛКА Справочник.Организации
	|	И ИсторияКПП.СтруктурнаяЕдиница В(&Ссылки)";
	
	Возврат МетодПоиска;
	
КонецФункции

Функция МераСоответствияИдентификаторовTXID(ОписаниеИдентификатора1, ОписаниеИдентификатора2)
	
	// Сравнение по КПП
	ЗаданКПП1 = ОписаниеИдентификатора1.Состав.Свойство("ШифрСовместимостиКПП");
	ЗаданКПП2 = ОписаниеИдентификатора2.Состав.Свойство("ШифрСовместимостиКПП");
	Если Не ЗаданКПП1 Или Не ЗаданКПП2 Тогда
		// Сравнение по КПП не выполняется
		МераСоответствия = 1;
	Иначе
		// Иногда идентификаторы с отличающимися КПП можно счесть соответствующими друг другу
		ШифрыСовместимости = Новый Соответствие;
		ШифрыСовместимости.Вставить(ОписаниеИдентификатора1.Состав.ШифрСовместимостиКПП, Истина);
		ШифрыСовместимости.Вставить(ОписаниеИдентификатора2.Состав.ШифрСовместимостиКПП, Истина);
		Если ШифрыСовместимости[""] <> Неопределено Тогда
			// Сравнение по КПП не выполняется
			МераСоответствия = 1;
		ИначеЕсли ШифрыСовместимости["D"] <> Неопределено Тогда
			// Такие КПП совместимы, только если совпадают
			МераСоответствия = 0;
		Иначе
			// "L" и "H" означают организацию в целом, поэтому все их сочетания совместимы, даже если точные значения кодов не совпадают
			МераСоответствия = 1; 
		КонецЕсли;
		
	КонецЕсли;
	
	// Максимальный - 2^0
	Возврат МераСоответствия;
	
КонецФункции

Функция ОписаниеМетодаПоискаBKNM()
	
	МетодПоиска = НовыйОписаниеМетодаПоиска("BKNM");
	
	МетодПоиска.ПоляПоискаЗапросом.Вставить("ШаблонПоиска", Метаданные.Справочники.Контрагенты.Реквизиты.НаименованиеПолное.Тип);
	
	// Текст запроса определяется отдельно - см. ЗапросМетодаПоискаBKNM()
	Возврат МетодПоиска;
	
КонецФункции

Функция ЗапросМетодаПоискаBKNM(ЗначенияПоискаЗапросом)
	
	// Обычно в запросы методов поиска передается таблица ЗначенияПоискаЗапросом.
	// Однако, в этом методе поиск следует выполнять по шаблону строки (LIKE).
	// Оператор LIKE на отдельных СУБД нельзя применять в условиях соединения.
	// Поэтому здесь сформируем запрос, который будет получать в качестве параметров значения из отдельных строк ЗначенияПоискаЗапросом,
	// а не таблицу целиком.
	// Запрос формируем динамически.
	
	ШаблонЭлемента = 
	"ВЫБРАТЬ
	|	&Идентификатор КАК Идентификатор,
	|	ТИПЗНАЧЕНИЯ(Контрагенты.Ссылка) КАК Тип,
	|	Контрагенты.Ссылка КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(Контрагенты.Ссылка) КАК ТипВладельца,
	|	Контрагенты.Ссылка КАК Владелец,
	|	Контрагенты.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Контрагенты.ГосударственныйОрган КАК ГосударственныйОрган,
	|	Контрагенты.ВидГосударственногоОргана КАК ВидГосударственногоОргана,
	|	Контрагенты.ПометкаУдаления КАК ПометкаУдаления,
	|	Контрагенты.ИННВведенКорректно КАК ИННВведенКорректно,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И Контрагенты.Наименование ПОДОБНО &ШаблонПоиска";
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	"""" КАК Идентификатор,
	|	ТИПЗНАЧЕНИЯ(Контрагенты.Ссылка) КАК Тип,
	|	Контрагенты.Ссылка КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(Контрагенты.Ссылка) КАК ТипВладельца,
	|	Контрагенты.Ссылка КАК Владелец,
	|	Контрагенты.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Контрагенты.ГосударственныйОрган КАК ГосударственныйОрган,
	|	Контрагенты.ВидГосударственногоОргана КАК ВидГосударственногоОргана,
	|	Контрагенты.ПометкаУдаления КАК ПометкаУдаления,
	|	Контрагенты.ИННВведенКорректно КАК ИННВведенКорректно,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	ЛОЖЬ
	|%ОБЪЕДИНЕНИЯ%
	|ИТОГИ ПО
	|	Идентификатор,
	|	ТипВладельца,
	|	Тип";
	
	Запрос = Новый Запрос;
	
	ТекстыЗапросов = Новый Массив;
	Для Каждого ОписаниеЗапроса Из ЗначенияПоискаЗапросом Цикл
		
		НомерСтроки = Формат(ЗначенияПоискаЗапросом.Индекс(ОписаниеЗапроса) + 1, "ЧГ=0");
		ИмяПараметраИдентификатор = "Идентификатор" + НомерСтроки;
		ИмяПараметраШаблонПоиска  = "ШаблонПоиска"  + НомерСтроки;
		
		Запрос.УстановитьПараметр(ИмяПараметраИдентификатор, ОписаниеЗапроса.Идентификатор);
		Запрос.УстановитьПараметр(ИмяПараметраШаблонПоиска,  ОписаниеЗапроса.ШаблонПоиска);
		
		ТекстЗапроса = ШаблонЭлемента;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Идентификатор", "&" + ИмяПараметраИдентификатор);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ШаблонПоиска",  "&" + ИмяПараметраШаблонПоиска);
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	Соединитель = Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
	Объединения = Соединитель + СтрСоединить(ТекстыЗапросов, Соединитель);
	
	Запрос.Текст = СтрЗаменить(ШаблонЗапроса, "%ОБЪЕДИНЕНИЯ%", Объединения);
	
	Возврат Запрос;
	
КонецФункции

Функция МераСоответствияИдентификаторовBKNM(ОписаниеИдентификатора1, ОписаниеИдентификатора2)
	
	МераСоответствия = 1;// все попавшие под шаблон считаем подходящими
	
	ВариантыПоиска = Новый Структура;
	ВариантыПоиска.Вставить("Наименование",            16);//2^4
	ВариантыПоиска.Вставить("ВсеСлова",                8);
	ВариантыПоиска.Вставить("БезОрганизационнойФормы", 4);
	ВариантыПоиска.Вставить("СловоФилиал",             2);
	
	Для Каждого ВариантПоиска Из ВариантыПоиска Цикл
		
		Если ОписаниеИдентификатора1.Состав[ВариантПоиска.Ключ] = ОписаниеИдентификатора2.Состав[ВариантПоиска.Ключ] Тогда
			МераСоответствия = МераСоответствия + ВариантПоиска.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Максимальный - 2^4
	Возврат МераСоответствия;
	
КонецФункции

Функция ОписаниеМетодаПоискаTXZN()
	
	МетодПоиска = НовыйОписаниеМетодаПоиска("TXZN");
	
	МетодПоиска.ПоляПоискаЗапросом.Вставить("ШаблонПоиска", ОбщегоНазначения.ОписаниеТипаСтрока(8)); // первые 8 символов кода
	
	МетодПоиска.ТекстЗапросаСсылок =
	"ВЫБРАТЬ
	|	ЗначенияПоискаЗапросом.Идентификатор КАК Идентификатор,
	|	ЗначенияПоискаЗапросом.ШаблонПоиска КАК ШаблонПоиска
	|ПОМЕСТИТЬ ЗначенияПоискаЗапросом
	|ИЗ
	|	&ЗначенияПоискаЗапросом КАК ЗначенияПоискаЗапросом
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШаблонПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыПоиска.Идентификатор КАК Идентификатор,
	|	ТИПЗНАЧЕНИЯ(Контрагенты.Ссылка) КАК Тип,
	|	Контрагенты.Ссылка КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(Контрагенты.Ссылка) КАК ТипВладельца,
	|	Контрагенты.Ссылка КАК Владелец,
	|	Контрагенты.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Контрагенты.ГосударственныйОрган КАК ГосударственныйОрган,
	|	Контрагенты.ВидГосударственногоОргана КАК ВидГосударственногоОргана,
	|	Контрагенты.ПометкаУдаления КАК ПометкаУдаления,
	|	Контрагенты.ИННВведенКорректно КАК ИННВведенКорректно,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	РегистрацииВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО ((ВЫРАЗИТЬ(РегистрацииВНалоговомОргане.КодПоОКТМО КАК СТРОКА(8))) = ПараметрыПоиска.ШаблонПоиска)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО РегистрацииВНалоговомОргане.Код = Контрагенты.КодГосударственногоОргана
	|			И (Контрагенты.ВидГосударственногоОргана = ЗНАЧЕНИЕ(Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган))
	|			И (Контрагенты.ГосударственныйОрган)
	|ИТОГИ ПО
	|	Идентификатор,
	|	ТипВладельца,
	|	Тип";
	
	Возврат МетодПоиска;
	
КонецФункции

Функция ОписаниеМетодаПоискаPNNM()
	
	МетодПоиска = НовыйОписаниеМетодаПоиска("PNNM");
	
	МетодПоиска.ПоляПоискаЗапросом.Вставить(
		"НаименованиеСлужебное",
		Метаданные.Справочники.ФизическиеЛица.Реквизиты.НаименованиеСлужебное.Тип);
	МетодПоиска.ПоляПоискаЗапросом.Вставить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(100));
		
	МетодПоиска.ТекстЗапросаСсылок = 
	"ВЫБРАТЬ
	|	ЗначенияПоискаЗапросом.Идентификатор КАК Идентификатор,
	|	ЗначенияПоискаЗапросом.НаименованиеСлужебное КАК НаименованиеСлужебное,
	|	ЗначенияПоискаЗапросом.Имя КАК Наименование
	|ПОМЕСТИТЬ ЗначенияПоискаЗапросом
	|ИЗ
	|	&ЗначенияПоискаЗапросом КАК ЗначенияПоискаЗапросом
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НаименованиеСлужебное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыПоиска.Идентификатор КАК Идентификатор,
	|	ТИПЗНАЧЕНИЯ(ФизическиеЛица.Ссылка) КАК Тип,
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(ФизическиеЛица.Ссылка) КАК ТипВладельца,
	|	ФизическиеЛица.Ссылка КАК Владелец,
	|	ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо) КАК ЮридическоеФизическоеЛицо,
	|	ФизическиеЛица.ПометкаУдаления КАК ПометкаУдаления,
	|	ФизическиеЛица.ФИО КАК Наименование,
	|	ФизическиеЛица.НаименованиеСлужебное КАК НаименованиеСлужебное
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО ФизическиеЛица.НаименованиеСлужебное = ПараметрыПоиска.НаименованиеСлужебное
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыПоиска.Идентификатор,
	|	ТИПЗНАЧЕНИЯ(Контрагенты.Ссылка),
	|	Контрагенты.Ссылка,
	|	ТИПЗНАЧЕНИЯ(Контрагенты.Ссылка),
	|	Контрагенты.Ссылка,
	|	Контрагенты.ЮридическоеФизическоеЛицо,
	|	Контрагенты.ПометкаУдаления,
	|	Контрагенты.Наименование,
	|	Контрагенты.Наименование
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО Контрагенты.Наименование = ПараметрыПоиска.Наименование
	|ИТОГИ ПО
	|	Идентификатор,
	|	ТипВладельца,
	|	Тип";
	
	Возврат МетодПоиска;
	
КонецФункции

Функция ОписаниеМетодаПоискаAIIN()
	
	МетодПоиска = НовыйОписаниеМетодаПоиска("AIIN");
	МетодПоиска.ПоляПоискаЗапросом.Вставить("НомерКарты", ОбщегоНазначения.ОписаниеТипаСтрока(16));
	
	МетодПоиска.ТекстЗапросаСсылок =
	"ВЫБРАТЬ
	|	ЗначенияПоискаЗапросом.Идентификатор КАК Идентификатор,
	|	ЗначенияПоискаЗапросом.НомерКарты КАК НомерКарты
	|ПОМЕСТИТЬ ЗначенияПоискаЗапросом
	|ИЗ
	|	&ЗначенияПоискаЗапросом КАК ЗначенияПоискаЗапросом
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерКарты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыПоиска.Идентификатор КАК Идентификатор,
	|	ТИПЗНАЧЕНИЯ(КорпоративныеКарты.ПодотчетноеЛицо) КАК Тип,
	|	КорпоративныеКарты.ПодотчетноеЛицо КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(КорпоративныеКарты.БанковскийСчет) КАК ТипВладельца,
	|	КорпоративныеКарты.БанковскийСчет КАК Владелец,
	|	ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо) КАК ЮридическоеФизическоеЛицо,
	|	КорпоративныеКарты.ПодотчетноеЛицо.ПометкаУдаления КАК ПометкаУдаления,
	|	КорпоративныеКарты.НомерКарты КАК НомерКарты
	|ИЗ
	|	РегистрСведений.КорпоративныеКарты КАК КорпоративныеКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоискаЗапросом КАК ПараметрыПоиска
	|		ПО КорпоративныеКарты.НомерКарты = ПараметрыПоиска.НомерКарты
	|ИТОГИ ПО
	|	Идентификатор,
	|	ТипВладельца,
	|	Тип";
	
	Возврат МетодПоиска;
	
КонецФункции

#КонецОбласти

Процедура НайтиДоговорыКонтрагентовВИнформационнойБазе(УчастникиОпераций, ОтборКонтрагент = Неопределено) Экспорт
	
	// Ищем среди только тех договоров, которые подчинены организациям, перечисленным в УчастникиОпераций.
	Организации = УчастникиОпераций.Ссылки[Тип("СправочникСсылка.Организации")].ВыгрузитьКолонку("Ссылка");
	
	// Договоры идентифицируем так же, как и контрагентов (теми же идентификаторами).
	// Ищем только те договоры, что подчинены контрагентам из УчастникиОпераций.
	Контрагенты = Новый ТаблицаЗначений;
	Контрагенты.Колонки.Добавить("Идентификатор", ТипИдентификаторСоСхемой());
	Контрагенты.Колонки.Добавить("Контрагент",    Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Для Каждого ОписаниеИдентификатора Из УчастникиОпераций.Идентификаторы Цикл
		Для Каждого ОписаниеСсылки Из ОписаниеИдентификатора.Ссылки Цикл
			ТипСсылки = ТипЗнч(ОписаниеСсылки.Ключ);
			Если ТипСсылки = Тип("СправочникСсылка.Контрагенты") Тогда
				
				Если ОтборКонтрагент <> Неопределено И ОписаниеСсылки.Ключ <> ОтборКонтрагент Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Контрагенты.Добавить();
				НоваяСтрока.Идентификатор = ОписаниеИдентификатора.Идентификатор;
				НоваяСтрока.Контрагент    = ОписаниеСсылки.Ключ;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", ОбщегоНазначенияКлиентСервер.СвернутьМассив(Организации));
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Организации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Идентификатор КАК Идентификатор,
	|	Контрагенты.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ Контрагенты
	|ИЗ
	|	&Контрагенты КАК Контрагенты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Идентификатор КАК Идентификатор,
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Владелец КАК Владелец,
	|	Организации.ГоловнаяОрганизация КАК Организация,
	|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДоговорыКонтрагентов.ОплатаВВалюте КАК ОплатаВВалюте,
	|	ДоговорыКонтрагентов.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	НЕ ОсновныеДоговорыКонтрагента.Договор ЕСТЬ NULL КАК УстановленОсновным,
	|	ЕСТЬNULL(ВидыОплатОрганизаций.Ссылка, НЕОПРЕДЕЛЕНО) КАК ВидОплаты
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Организации КАК Организации
	|		ПО ДоговорыКонтрагентов.Организация = Организации.ГоловнаяОрганизация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Контрагенты КАК Контрагенты
	|		ПО ДоговорыКонтрагентов.Владелец = Контрагенты.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Договор = ДоговорыКонтрагентов.Ссылка)
	|			И (ОсновныеДоговорыКонтрагента.Организация = ДоговорыКонтрагентов.Организация)
	|			И (ОсновныеДоговорыКонтрагента.Контрагент = ДоговорыКонтрагентов.Владелец)
	|			И (ОсновныеДоговорыКонтрагента.ВидДоговора = ДоговорыКонтрагентов.ВидДоговора)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|		ПО ДоговорыКонтрагентов.Организация = ВидыОплатОрганизаций.Организация
	|			И ДоговорыКонтрагентов.Владелец = ВидыОплатОрганизаций.Контрагент
	|			И ДоговорыКонтрагентов.Ссылка = ВидыОплатОрганизаций.ДоговорКонтрагента
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И НЕ ДоговорыКонтрагентов.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Контрагент,
	|	ВидДоговора,
	|	УстановленОсновным УБЫВ,
	|	ВидОплаты УБЫВ,
	|	Ссылка
	|ИТОГИ ПО
	|	Идентификатор";
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаИдентификаторы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока ВыборкаИдентификаторы.Следующий() Цикл
		ОписаниеИдентификатора = ОписаниеИдентификатора(ВыборкаИдентификаторы.Идентификатор, УчастникиОпераций);
		ВыборкаСсылки = ВыборкаИдентификаторы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСсылки.Следующий() Цикл
			ДобавитьСсылку(УчастникиОпераций, ОписаниеИдентификатора, ВыборкаСсылки.Ссылка, ВыборкаСсылки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПоискСсылок

// Подбор ссылок на данные информационной базы по идентификаторам участников операций

Функция НовыйПротоколВыбораСсылок() Экспорт
	
	Протокол = Новый ТаблицаЗначений;
	Протокол.Колонки.Добавить("Идентификатор", ТипИдентификаторСоСхемой());
	Протокол.Колонки.Добавить("Ссылка",        Справочники.ТипВсеСсылки());
	Протокол.Колонки.Добавить("ПричинаОтказа", Новый ОписаниеТипов("Строка"));
	
	Возврат Протокол;
	
КонецФункции

// КешИдентификаторов - кеш, заполняется внутри функции. Допускается применять, если функция вызывается в цикле 
// с одинаковыми значениями параметра Идентификаторы. Следует передавать не инициализированную переменную.
// Некоторые операции сделают кеш неактуальным, поэтому при использовании кеша его (кеш) также обязательно передавать
// в СсылкаНового() и в ВыбратьСсылку()
Функция НайтиСсылки(Идентификаторы, УчастникиОпераций, Отбор, ПротоколВыбора = Неопределено, КешИдентификаторов = Неопределено) Экспорт
	
	Ссылки = Новый Соответствие; // Ключ - ссылка; значение - см. НовыйРезультатПоискаСсылки()
	
	// Сначала найдем все ссылки по переданным идентификаторам, 
	// затем среди них отберем подходящие контексту, а именно:
	// - соответствующие переданному отбору
	// - найденные по тем идентификаторам, которые в конкретном контексте достаточно надежны
	
	
	Если КешИдентификаторов <> Неопределено Тогда
		
		ВсеСсылкиПоТипам= КешИдентификаторов.ВсеСсылкиПоТипам;
		СхемыКонтекста 	= КешИдентификаторов.СхемыКонтекста;
		
	Иначе	
		
		ВсеСсылкиПоТипам = НайтиВсеСсылки(Идентификаторы, УчастникиОпераций, ПротоколВыбора);
		
		СхемыКонтекста = Новый Соответствие; // Набор схем, по которым построены идентификаторы
		
		Для Каждого Идентификатор Из Идентификаторы Цикл
			ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
			Если ОписаниеИдентификатора <> Неопределено Тогда
				СхемыКонтекста.Вставить(ОписаниеИдентификатора.Схема, Истина);
			КонецЕсли;
		КонецЦикла;
		
		КешИдентификаторов = Новый Структура;
		КешИдентификаторов.Вставить("ВсеСсылкиПоТипам", ВсеСсылкиПоТипам);
		КешИдентификаторов.Вставить("СхемыКонтекста", 	СхемыКонтекста);
		
	КонецЕсли;
	
	// Если указан отбор по типу, то просматриваем только ссылки соответствующего типа.
	Если Отбор.Свойство("Тип") Тогда
		ОтборПоТипу = Отбор.Тип;
	КонецЕсли;
	
	// Обходим все типы ссылок, отбирая необходимые. 
	ЕстьТолькоСсылкиДругихТипов = Ложь; // Особым образом нужно записать в протокол поиска ссылок ситуацию, когда ссылки есть и все они не подходят по типу
	Для Каждого КлючИЗначениеПоТипам Из ВсеСсылкиПоТипам Цикл

		Если ОтборПоТипу <> Неопределено И КлючИЗначениеПоТипам.Ключ <> ОтборПоТипу Тогда
			ЕстьТолькоСсылкиДругихТипов = Истина;
			Продолжить;
		КонецЕсли;
		
		ЕстьТолькоСсылкиДругихТипов = Ложь;
		
		СведенияОбОбъектеИнформационнойБазы = СведенияОбОбъектеИнформационнойБазы(КлючИЗначениеПоТипам.Ключ);
		
		// Обходим все ссылки определенного типа.
		ВсеСсылки = КлючИЗначениеПоТипам.Значение;

		Для Каждого КлючИЗначение Из ВсеСсылки Цикл
			
			РезультатПоискаСсылки = КлючИЗначение.Значение;
			
			Если Не СсылкаСоответствуетОтбору(РезультатПоискаСсылки.ОписаниеСсылки, Отбор, СведенияОбОбъектеИнформационнойБазы) Тогда
				ДобавитьВПротоколВыбора(
					ПротоколВыбора,
					"НеСоответствуетОтбору",
					,// В общем случае может быть несколько идентификаторов
					РезультатПоискаСсылки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Если Не СсылкаНайденаПоНадежномуИдентификатору(РезультатПоискаСсылки, СхемыКонтекста, ПротоколВыбора) Тогда
				Продолжить;
			КонецЕсли;
			
			Ссылки.Вставить(РезультатПоискаСсылки.Ссылка, РезультатПоискаСсылки);
			
		КонецЦикла;

	КонецЦикла;
	
	Если ЕстьТолькоСсылкиДругихТипов Тогда
		Для Каждого Идентификатор Из Идентификаторы Цикл
			ДобавитьВПротоколВыбора(
				ПротоколВыбора,
				"НеСоответствуетОтбору",
				Идентификатор); // Ссылки не записываем из соображений производительности: их может быть довольно много
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ссылки;
	
КонецФункции

// КешИдентификаторов - кеш, заполняется внутри функции. Допускается применять, если функция вызывается в цикле 
// с одинаковыми значениями параметра Идентификаторы. Следует передавать не инициализированную переменную.
// Некоторые операции сделают кеш неактуальным, поэтому при использовании кеша его (кеш) также обязательно передавать
// в СсылкаНового() и в ВыбратьСсылку()
Функция НайтиСсылку(Идентификаторы, УчастникиОпераций, Отбор, ПриоритетнаяСсылка = Неопределено, ПротоколВыбора = Неопределено, КешИдентификаторов = Неопределено) Экспорт
	
	НайденныеСсылки = НайтиСсылки(Идентификаторы, УчастникиОпераций, Отбор, ПротоколВыбора, КешИдентификаторов);
	
	Если Не ЗначениеЗаполнено(НайденныеСсылки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ВыбратьСсылку(НайденныеСсылки, УчастникиОпераций, ПриоритетнаяСсылка, ПротоколВыбора, КешИдентификаторов);
	
КонецФункции

// Выбирает одну среди нескольких подходящих к ситуации ссылок.
// НайденныеСсылки должна быть непустой
// КешИдентификаторов - см. комментарий к НайтиСсылки()
Функция ВыбратьСсылку(НайденныеСсылки, УчастникиОпераций, ПриоритетнаяСсылка = Неопределено, ПротоколВыбора = Неопределено, КешИдентификаторов = Неопределено) Экспорт
	
	Если НайденныеСсылки.Количество() = 1 Тогда
		
		Для Каждого НайденнаяСсылка Из НайденныеСсылки Цикл
			УточнитьИдентификаторыСсылкиНового(НайденнаяСсылка.Значение, УчастникиОпераций, КешИдентификаторов);
			Возврат НайденнаяСсылка.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатПоискаПриоритетнойСсылки = НайденныеСсылки[ПриоритетнаяСсылка];
	Если ПриоритетнаяСсылка <> Неопределено И РезультатПоискаПриоритетнойСсылки <> Неопределено Тогда
		ДобавитьВПротоколВыбора(ПротоколВыбора, "ПриоритетнаяСсылка", "", ПриоритетнаяСсылка);
		УточнитьИдентификаторыСсылкиНового(РезультатПоискаПриоритетнойСсылки, УчастникиОпераций);
		Возврат ПриоритетнаяСсылка;
	КонецЕсли;
	
	// Выбираем ссылку с наибольшим приоритетом.
	//
	// На приоритет каждой ссылки влияет
	// 1. (в большей мере) наличие ссылки в информационной базе: созданные в ходе загрузки данных получают меньший приоритет
	// 2. количество и надежность идентификаторов, примененных для ее поиска (приоритет идентификаторов)
	// 3. (в меньшей мере) некоторые сведения о самом объекте информационной базы (приоритет ссылки)
	// 
	// Численное значение приоритета рассчитывается как сумма приоритета идентификаторов и приоритета описания ссылки.
	// При этом пространство значений приоритета идентификаторов выбирается так,
	// чтобы любое ненулевое значение было больше, чем любое значение приоритета описания ссылки.
	// 
	// Приоритет идентификаторов рассчитываем так, чтобы ссылка с большим количеством более надежных идентификаторов получила больший приоритет.
	// Основание для расчета приоритета - максимальное количество идентификаторов во всех ссылках, увеличенное на единицу.
	// Такое основание выбрано для того, чтобы примененные схемы сильнее влияли на выбор, 
	// чем количество идентификаторов.
	// Например, если 
	// - первая ссылка найдена по ИНН и номеру счета
	// - вторая ссылка найдена по двум разным ИНН
	// - третья ссылка найдена по девяти разным номерам счета
	// - четвертая ссылка найдена по одному ИНН
	// то приоритеты будут, соответственно, 10^1+10^2=110, 2*10^2=200, 9*10^1=90, 10^2=100 - будет выбрана вторая ссылка.
	//
	// Приоритет ссылки рассчитывается проще - см. ПриоритетСсылки() и МаксимальныйПриоритетСсылки().
	
	МаксимальноеКоличествоИдентификаторов = 0;
	Для Каждого НайденнаяСсылка Из НайденныеСсылки Цикл
		МаксимальноеКоличествоИдентификаторов = Макс(МаксимальноеКоличествоИдентификаторов, НайденнаяСсылка.Значение.Идентификаторы.Количество());
	КонецЦикла;
	
	Если МаксимальноеКоличествоИдентификаторов = 0 Тогда
		Для Каждого НайденнаяСсылка Из НайденныеСсылки Цикл
			ДобавитьВПротоколВыбора(ПротоколВыбора, "НетИдентификаторов", "", НайденнаяСсылка.Значение);
			УточнитьИдентификаторыСсылкиНового(НайденнаяСсылка.Значение, УчастникиОпераций);
			Возврат НайденнаяСсылка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ОснованиеРасчетаПриоритетаИдентификаторов = МаксимальноеКоличествоИдентификаторов + 1;
	
	// Рассчитаем МинимальныйПоказательПриоритетаИдентификаторов - показатель степени,
	// в которую нужно возвести ОснованиеРасчетаПриоритетаИдентификаторов, чтобы получить минимальное число,
	// большее, чем МаксимальныйПриоритетСсылки().
	МинимальныйПриоритетИдентификаторов = МаксимальныйПриоритетСсылки() + 1;
	МинимальныйПоказательПриоритетаИдентификаторов = Log(МинимальныйПриоритетИдентификаторов) / Log(ОснованиеРасчетаПриоритетаИдентификаторов);
	МинимальныйПоказательПриоритетаИдентификаторов = Окр(МинимальныйПоказательПриоритетаИдентификаторов + 0.5, 0, РежимОкругления.Окр15как10);
	
	МаксимальныйПриоритет = 0;
	ЛучшаяСсылка = Неопределено;
	
	Для Каждого НайденнаяСсылка Из НайденныеСсылки Цикл
		
		ТипСсылки = ТипЗнч(НайденнаяСсылка.Ключ);
		Схемы     = СхемыИдентифицирующиеТип(ТипСсылки);
		ВсегоСхем = Схемы.Количество();
		
		Приоритет = ПриоритетСсылки(НайденнаяСсылка.Значение.ОписаниеСсылки, ТипСсылки);
		
		Для Каждого ОписаниеИдентификатора Из НайденнаяСсылка.Значение.Идентификаторы Цикл
			
			ПриоритетСхемы = Схемы.Найти(ОписаниеИдентификатора.Схема); // 0 - высший приоритет
			Если ПриоритетСхемы = Неопределено Тогда
				ПриоритетСхемы = 0;
			Иначе
				ПриоритетСхемы = ВсегоСхем - ПриоритетСхемы;// Инвертируем приоритет: теперь 1 - низший
			КонецЕсли;
			
			ПоказательПриоритетаИдентификаторов = МинимальныйПоказательПриоритетаИдентификаторов + ПриоритетСхемы;
			
			Приоритет = Приоритет + Pow(ОснованиеРасчетаПриоритетаИдентификаторов, ПоказательПриоритетаИдентификаторов);
			
		КонецЦикла;
		
		Если ОписаниеНовогоОбъекта(НайденнаяСсылка.Ключ, УчастникиОпераций) = Неопределено Тогда
			Приоритет = Приоритет + Pow(ОснованиеРасчетаПриоритетаИдентификаторов, МинимальныйПоказательПриоритетаИдентификаторов + ВсегоСхем);
		КонецЕсли;
		
		Если Приоритет = МаксимальныйПриоритет Тогда
			ДобавитьВПротоколВыбора(ПротоколВыбора, "СлучайныйВыбор", ОписаниеИдентификатора.Идентификатор, НайденнаяСсылка.Ключ);
		ИначеЕсли Приоритет < МаксимальныйПриоритет Тогда
			ДобавитьВПротоколВыбора(ПротоколВыбора, "ВспомогательнаяСхемаИдентификации", ОписаниеИдентификатора.Идентификатор, НайденнаяСсылка.Ключ);
		Иначе
			Если ЛучшаяСсылка <> Неопределено Тогда
				ДобавитьВПротоколВыбора(
					ПротоколВыбора,
					"ВспомогательнаяСхемаИдентификации",
					ОписаниеИдентификатора.Идентификатор,
					ЛучшаяСсылка.Ссылка);
			КонецЕсли;
			
			МаксимальныйПриоритет = Приоритет;
			ЛучшаяСсылка = НайденнаяСсылка.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УточнитьИдентификаторыСсылкиНового(ЛучшаяСсылка, УчастникиОпераций);
	Возврат ЛучшаяСсылка;
	
КонецФункции

Функция ЭтоИдентификаторыСсылки(Идентификаторы, Ссылка, УчастникиОпераций) Экспорт
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
		
		Если ОписаниеИдентификатора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеИдентификатора.Ссылки[Ссылка] <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ДобавитьВПротоколВыбора(ПротоколВыбора, ПричинаОтказа, Идентификатор, Ссылка = Неопределено)
	
	Если ПротоколВыбора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяЗапись = ПротоколВыбора.Добавить();
	НоваяЗапись.Идентификатор = Идентификатор;
	НоваяЗапись.Ссылка        = Ссылка;
	НоваяЗапись.ПричинаОтказа = ПричинаОтказа;
	
	Возврат НоваяЗапись;
	
КонецФункции

Функция НовыйРезультатПоискаСсылки(Ссылка, ОписаниеСсылки)
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Ссылка",         Ссылка);
	РезультатПоиска.Вставить("ОписаниеСсылки", ОписаниеСсылки);
	РезультатПоиска.Вставить("Идентификаторы", Новый Массив);// Ссылки на элемент коллекции, см. НовыйОписаниеИдентификаторов()
	
	Возврат РезультатПоиска;
	
КонецФункции

Процедура ДополнитьРезультатПоискаСсылок(Ссылки, Ссылка, ОписаниеСсылки, ОписаниеИдентификатора)
	
	РезультатПоиска = Ссылки[Ссылка];
	Если РезультатПоиска = Неопределено Тогда
		РезультатПоиска = НовыйРезультатПоискаСсылки(Ссылка, ОписаниеСсылки);
		Ссылки.Вставить(Ссылка, РезультатПоиска);
	КонецЕсли;
	
	РезультатПоиска.Идентификаторы.Добавить(ОписаниеИдентификатора);
		
КонецПроцедуры

Функция НайтиВсеСсылки(Идентификаторы, УчастникиОпераций, ПротоколВыбора = Неопределено)
	
	СсылкиПоТипам = Новый Соответствие; // Ключ - Тип, значение - Соответствие (см. комментарий к переменной Ссылки).
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
		Если ОписаниеИдентификатора = Неопределено Тогда
			ДобавитьВПротоколВыбора(
				ПротоколВыбора,
				"НедопустимыйИдентификатор",
				Идентификатор);
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОписаниеИдентификатора.Ссылки) Тогда
			ДобавитьВПротоколВыбора(
				ПротоколВыбора,
				"НеизвестныйИдентификатор",
				Идентификатор);
			Продолжить;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ОписаниеИдентификатора.Ссылки Цикл
			
			ОписаниеСсылки = ОписаниеСсылки(КлючИЗначение.Ключ, УчастникиОпераций, ОписаниеИдентификатора);
			
			ТипСсылки 	= ТипЗнч(КлючИЗначение.Ключ);
			Ссылки 		= СсылкиПоТипам[ТипСсылки];
			Если Ссылки = Неопределено Тогда
				Ссылки = Новый Соответствие; // Ключ - ссылка; значение - см. НовыйРезультатПоискаСсылки()
				СсылкиПоТипам.Вставить(ТипСсылки, Ссылки);
			КонецЕсли;
			
			ДополнитьРезультатПоискаСсылок(Ссылки, КлючИЗначение.Ключ, ОписаниеСсылки, ОписаниеИдентификатора);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СсылкиПоТипам;
	
КонецФункции

// РезультатПоискаСсылки - см. НовыйРезультатПоискаСсылки()
Функция СсылкаНайденаПоНадежномуИдентификатору(РезультатПоискаСсылки, СхемыКонтекста, ПротоколВыбора = Неопределено)
	
	// Одна и та же ссылка может быть найдена по разным идентификаторам, построенным по разным схемам.
	// Для конкретного вида ссылок ссылок разные схемы могут быть более или менее надежными - см. СхемыИдентифицирующиеТип()
	//
	// Считаем, что ссылка найдена по идентификатору, надежному в данном контексте, если:
	// - либо в данном контексте нет идентификаторов, обеспечивающих бОльшую надежность
	// - либо найденная ссылка не имеет идентификаторов, обеспечивающих бОльшую надежность.
	//
	// Например:
	// Пример 1. 
	// В конкретной операции известен только номер банковского счета поставщика.
	// По номеру банковского счета нашли некоторого контрагента.
	// Номер счета - не самый надежный способ поиска контрагента.
	// Однако, считаем, что в данном случае номер счета достаточно надежен, так как лучше ничего нет.
	//
	// Пример 2.
	// В конкретной операции известен ИНН и номер банковского счета поставщика.
	// По номеру банковского счета нашли некоторого контрагента, а по ИНН никакого не нашли.
	// ИНН более надежен для поиска контрагента, чем номер счета.
	// Считаем, что в данном случае номер счета достаточно надежен, если у этого контрагента ИНН не задан.
	
	ТипСсылки = ТипЗнч(РезультатПоискаСсылки.Ссылка);
	Схемы     = СхемыИдентифицирующиеТип(ТипСсылки);
	
	ИндексНаиболееНадежнойПримененнойСхемы = Схемы.Количество();// наиболее надежная должна иметь 0
	Для Каждого ОписаниеИдентификатора Из РезультатПоискаСсылки.Идентификаторы Цикл
		
		ИндексСхемы = Схемы.Найти(ОписаниеИдентификатора.Схема);
		Если ИндексСхемы = Неопределено Или ИндексСхемы > ИндексНаиболееНадежнойПримененнойСхемы Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексНаиболееНадежнойПримененнойСхемы = ИндексСхемы;
		
	КонецЦикла;
	
	Если ИндексНаиболееНадежнойПримененнойСхемы = 0 Тогда
		// Надежнее некуда
		Возврат Истина;
	КонецЕсли;
	
	// Проверим, что нет идентификаторов по более надежным схемам
	Для ИндексСхемы = 0 По ИндексНаиболееНадежнойПримененнойСхемы - 1 Цикл
		
		Схема = Схемы[ИндексСхемы];
		
		// - среди идентификаторов контекста
		Если СхемыКонтекста[Схема] = Неопределено Тогда
			// Эта схема не доступна в данном контексте, поэтому по ней ничего не могли бы найти
			Продолжить;
		КонецЕсли;
			
		// - среди идентификаторов ссылки
		Если РезультатПоискаСсылки.ОписаниеСсылки.СхемыИдентификации[Схема] <> Неопределено Тогда
			// Есть более надежный и он другой (если бы не был другой, то он был бы в РезультатПоискаСсылки.Идентификаторы)
			Для Каждого ОписаниеИдентификатора Из РезультатПоискаСсылки.Идентификаторы Цикл
				ДобавитьВПротоколВыбора(
					ПротоколВыбора,
					"НенадежныйИдентификатор",
					ОписаниеИдентификатора.Идентификатор,
					РезультатПоискаСсылки.Ссылка);
			КонецЦикла;
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина; // Не нашли более надежных
	
КонецФункции

Функция ПриоритетСсылки(ОписаниеСсылки, Знач ТипСсылки = Неопределено)
	
	// См. также МаксимальныйПриоритетСсылки()
	
	Если ТипСсылки = Неопределено Тогда
		ТипСсылки = ТипЗнч(ОписаниеСсылки);
	КонецЕсли;
	
	Приоритет = 0;
	Если ТипСсылки = Тип("СправочникСсылка.БанковскиеСчета") Или ТипСсылки = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Приоритет = Приоритет + ?(ОписаниеСсылки.УстановленОсновным, 1, 0);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Организации") Или ТипСсылки = Тип("СправочникСсылка.Контрагенты") Тогда
		Приоритет = Приоритет + ?(ОписаниеСсылки.Головной, 1, 0);
	Иначе
		Приоритет = 1;
	КонецЕсли;
	
	Возврат Приоритет;
	
КонецФункции

Функция МаксимальныйПриоритетСсылки()
	
	Возврат 1; // См. ПриоритетСсылки()
	
КонецФункции

Функция СсылкаСоответствуетОтбору(ОписаниеСсылки, Отбор, СведенияОбОбъектеИнформационнойБазы)
	
	Для Каждого ЭлементОтбора Из СведенияОбОбъектеИнформационнойБазы Цикл
		
		Если Не Отбор.Свойство(ЭлементОтбора.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеСсылки[ЭлементОтбора.Ключ] <> Отбор[ЭлементОтбора.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СозданиеОбъектовИнформационнойБазы

// КешИдентификаторов - см. комментарий к НайтиСсылки()
Функция СсылкаНового(Идентификаторы, ЗначенияЗаполнения, Тип, УчастникиОпераций, КешИдентификаторов = Неопределено) Экспорт
	
	// Сначала среди всех идентификаторов выберем подходящие:
	// 1. должны позволять идентификацию ссылок нужного Типа
	// 2. не должны противоречить данным в ЗначенияЗаполнения
	//    (по свойству ЮридическоеФизическоеЛицо)
	// 3. не более одного идентификатора по каждой схеме
	// 4. по возможности точные идентификаторы.
	
	Если Не ЗначениеЗаполнено(Идентификаторы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначенияЗаполненияВладельца = ЗначенияЗаполненияВладельца(ЗначенияЗаполнения, УчастникиОпераций);
	
	Если ЗначенияЗаполненияВладельца.Свойство("ЮридическоеФизическоеЛицо") Тогда
	    ЮридическоеФизическоеЛицо = ЗначенияЗаполненияВладельца.ЮридическоеФизическоеЛицо;
	ИначеЕсли ЗначенияЗаполнения.Свойство("ЮридическоеФизическоеЛицо") Тогда
		ЮридическоеФизическоеЛицо = ЗначенияЗаполнения.ЮридическоеФизическоеЛицо;
	Иначе
		ЮридическоеФизическоеЛицо = Неопределено;
	КонецЕсли;
	
	// Сгруппируем идентификаторы по схемам, чтобы надежнее определить ЮридическоеФизическоеЛицо (учесть разницу в надежности схем для конкретного типа)
	ОписанияИдентификаторов = Новый Соответствие; // Ключ - схема, Значение - массив описаний идентификаторов
	
	Схемы = СхемыИдентифицирующиеТип(Тип);
	Для Каждого Схема Из Схемы Цикл
		ОписанияИдентификаторов.Вставить(Схема, Новый Массив);
	КонецЦикла;
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
		Если ОписаниеИдентификатора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыПоСхеме = ОписанияИдентификаторов[ОписаниеИдентификатора.Схема];
		Если ИдентификаторыПоСхеме = Неопределено Тогда
			// Идентификатор не может быть использован для этого типа
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыПоСхеме.Добавить(ОписаниеИдентификатора);
		
	КонецЦикла;
	
	// Выберем по одному идентификатору каждой схемы.
	ИдентификаторыНового = Новый Массив;
	Для Каждого ОписанияИдентификаторовСхемы Из ОписанияИдентификаторов Цикл
		
		ЛучшийИдентификатор = Неопределено;
		
		Для Каждого ОписаниеИдентификатора Из ОписанияИдентификаторовСхемы.Значение Цикл
			
			ЮридическоеФизическоеЛицоПоИдентификатору = ЮридическоеФизическоеЛицоПоИдентификатору(
				ОписаниеИдентификатора,
				УчастникиОпераций);
				
			Если Не ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
				ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицоПоИдентификатору;
			ИначеЕсли ЗначениеЗаполнено(ЮридическоеФизическоеЛицоПоИдентификатору)
				И ЮридическоеФизическоеЛицо <> ЮридическоеФизическоеЛицоПоИдентификатору Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЛучшийИдентификатор = Неопределено Или ОписаниеИдентификатора.Точный Тогда
				ЛучшийИдентификатор = ОписаниеИдентификатора.Идентификатор;
				Если ОписаниеИдентификатора.Точный Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЛучшийИдентификатор <> Неопределено Тогда
			ИдентификаторыНового.Добавить(ЛучшийИдентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторыНового) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Подготовим ссылку нового элемента и запишем ее в коллекцию УчастникиОпераций
	СвойстваНового = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ЗначенияЗаполнения);
	СвойстваНового.Вставить("Тип", Тип);
	Для Каждого СвойствоВладельца Из ЗначенияЗаполненияВладельца Цикл
		СвойстваНового.Вставить(СвойствоВладельца.Ключ, СвойствоВладельца.Значение);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
		ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	Если Не СвойстваНового.Свойство("ЮридическоеФизическоеЛицо") Тогда
		СвойстваНового.Вставить("ЮридическоеФизическоеЛицо", ЮридическоеФизическоеЛицо);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СвойстваНового, СведенияОбОбъектеИнформационнойБазы(Тип), Ложь);
	
	МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Новый(Тип));
	Ссылка = МенеджерОбъектов.ПолучитьСсылку();
	
	// Сохраним все свойства ссылки для повторного ее использования
	ОписаниеСсылки = Неопределено; // Закешируем описание новой ссылки
	Для Каждого Идентификатор Из ИдентификаторыНового Цикл
		
		ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
		
		Если ОписаниеСсылки = Неопределено Тогда
			ОписаниеСсылки = ДобавитьСсылку(УчастникиОпераций, ОписаниеИдентификатора, Ссылка, СвойстваНового, КешИдентификаторов);
		Иначе
			ДополнитьОписаниеСсылкиИдентификатором(ОписаниеСсылки, ОписаниеИдентификатора);
		КонецЕсли;
		
		Если ОписаниеСсылки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьПохожиеИдентификаторыСсылкеНового(ОписаниеСсылки, ОписаниеИдентификатора, УчастникиОпераций);
		
	КонецЦикла;
	
	Если ОписаниеСсылки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Запишем, что это новый объект.
	ОписаниеНовогоОбъекта = ДобавитьОписаниеНовогоОбъекта(Ссылка, УчастникиОпераций);
	Если ОписаниеНовогоОбъекта <> Неопределено Тогда
		// Заполним свойства нового объекта исходя из идентификаторов.
		Для Каждого Идентификатор Из ИдентификаторыНового Цикл
			
			ОписаниеИдентификатора = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
			
			Для Каждого ИсточникЗначенияРеквизита Из ИсточникиКлючевыхРеквизитовНовыхОбъектовИнформационнойБазы(Тип, ОписаниеИдентификатора.Схема) Цикл
				Если ЗначениеЗаполнено(ОписаниеНовогоОбъекта[ИсточникЗначенияРеквизита.Ключ]) Тогда
					Продолжить;
				КонецЕсли;
				Если Не ОписаниеИдентификатора.Состав.Свойство(ИсточникЗначенияРеквизита.Значение) Тогда
					Продолжить;
				КонецЕсли;
				ОписаниеНовогоОбъекта[ИсточникЗначенияРеквизита.Ключ] = ОписаниеИдентификатора.Состав[ИсточникЗначенияРеквизита.Значение];
			КонецЦикла;
				
		КонецЦикла;
		// Другие свойства может потребоваться установить исходя из сведений о распознавании операции
		// и дополнять позже с помощью ЗаполнитьПустыеРеквизитыНовогоОбъекта()
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Процедура УстановитьПохожиеИдентификаторыСсылкеНового(ОписаниеСсылки, ОписаниеИдентификатора, УчастникиОпераций)
		
	// Один и тот же объект, еще не записанный в информационную базу, может быть идентифицирован разными идентификаторами: точным и не точным.
	// При этом, если сейчас объект создан по неточному идентификатору, то он не сможет быть найден по точному и наоборот.
	// Поэтому, дополним идентификаторы объекта похожими.
	//
	// При этом, если объект создан по неточному идентификатору, то нет уверенности, какой именно точный следует использовать.
	// Поэтому добавим _все_ точные, но "условно".
	// Эта условность будет действовать до тех пор, пока ссылка не будет выбрана по условно сопоставленному идентификатору.
	// В этот момент идентификатор, по которому нашли ссылку перестанет считаться условным, а все условные будут удалены.
	// См. также УточнитьИдентификаторыСсылкиНового()
	//
	// Если объект создан по точному идентификатору, то неточный можно добавлять безусловно.

	Если ОписаниеИдентификатора.Точный И ЗначениеЗаполнено(ОписаниеИдентификатора.БазовыйИдентификатор) Тогда
		
		ОписаниеБазовогоИдентификатора = ОписаниеИдентификатора(ОписаниеИдентификатора.БазовыйИдентификатор, УчастникиОпераций);
		ДополнитьОписаниеСсылкиИдентификатором(ОписаниеСсылки, ОписаниеБазовогоИдентификатора);
		
	ИначеЕсли Не ОписаниеИдентификатора.Точный Тогда
		
		// Найдем все, для кого этот идентификатор - базовый.
		ПроизводныеИдентификаторы = УчастникиОпераций.Идентификаторы.НайтиСтроки(Новый Структура("БазовыйИдентификатор", ОписаниеИдентификатора.Идентификатор));
		
		Для Каждого ОписаниеПроизводногоИдентификатора Из ПроизводныеИдентификаторы Цикл
			ДополнитьОписаниеСсылкиИдентификатором(ОписаниеСсылки, ОписаниеПроизводногоИдентификатора);
		КонецЦикла;
		
		// Если таких несколько, то будем считать их условными
		Если ПроизводныеИдентификаторы.Количество() > 1 Тогда
			
			Для Каждого ОписаниеУсловногоИдентификатора Из ПроизводныеИдентификаторы Цикл
				
				ВытесняемыеИдентификаторы = Новый Массив;
				
				ОписаниеСсылки.УсловныеИдентификаторы.Вставить(ОписаниеУсловногоИдентификатора.Идентификатор, ВытесняемыеИдентификаторы);
				
				Для Каждого ОписаниеВытесняемогоИдентификатора Из ПроизводныеИдентификаторы Цикл
					Если ОписаниеВытесняемогоИдентификатора.Идентификатор = ОписаниеУсловногоИдентификатора.Идентификатор Тогда
						Продолжить;
					КонецЕсли;
					ВытесняемыеИдентификаторы.Добавить(ОписаниеВытесняемогоИдентификатора.Идентификатор);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. также УстановитьПохожиеИдентификаторыСсылкеНового
Процедура УточнитьИдентификаторыСсылкиНового(РезультатПоискаСсылки, УчастникиОпераций, КешИдентификаторов = Неопределено)
	
	Если Не ЗначениеЗаполнено(РезультатПоискаСсылки.ОписаниеСсылки.УсловныеИдентификаторы) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеИдентификатора Из РезультатПоискаСсылки.Идентификаторы Цикл
		
		ИдентификаторыДляИсключения = РезультатПоискаСсылки.ОписаниеСсылки.УсловныеИдентификаторы[ОписаниеИдентификатора.Идентификатор];
		Если ИдентификаторыДляИсключения = Неопределено Тогда
			// Этот идентификатор не приводит к неоднозначности
			Продолжить;
		КонецЕсли;
		
		Для Каждого Идентификатор Из ИдентификаторыДляИсключения Цикл
			ОписаниеИдентификатораДляИсключения = ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
			Если ОписаниеИдентификатораДляИсключения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеИдентификатораДляИсключения.Ссылки.Удалить(РезультатПоискаСсылки.Ссылка);
			КешИдентификаторов = Неопределено;
		КонецЦикла;
		
		РезультатПоискаСсылки.ОписаниеСсылки.УсловныеИдентификаторы.Удалить(ОписаниеИдентификатора.Идентификатор);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПустыеРеквизитыНовогоОбъекта(ОписаниеНовогоОбъекта, ЗначенияЗаполнения, КешОписанийРеквизитов = Неопределено) Экспорт
	
	ТипСсылки = ТипЗнч(ОписаниеНовогоОбъекта.Ссылка);
	Если КешОписанийРеквизитов <> Неопределено Тогда
		РеквизитыНовыхОбъектовИнформационнойБазы = КешОписанийРеквизитов[ТипСсылки];
	Иначе
		КешОписанийРеквизитов = Новый Соответствие;
		РеквизитыНовыхОбъектовИнформационнойБазы = Неопределено;
	КонецЕсли;
	
	Если РеквизитыНовыхОбъектовИнформационнойБазы = Неопределено Тогда
		РеквизитыНовыхОбъектовИнформационнойБазы = РеквизитыНовыхОбъектовИнформационнойБазы(ТипСсылки);
		КешОписанийРеквизитов.Вставить(ТипСсылки, РеквизитыНовыхОбъектовИнформационнойБазы);
	КонецЕсли;
		
	Для Каждого ОписаниеРеквизита Из РеквизитыНовыхОбъектовИнформационнойБазы Цикл
		
		Если ЗначениеЗаполнено(ОписаниеНовогоОбъекта[ОписаниеРеквизита.Ключ]) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначенияЗаполнения.Свойство(ОписаниеРеквизита.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеНовогоОбъекта[ОписаниеРеквизита.Ключ] = ЗначенияЗаполнения[ОписаниеРеквизита.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначенияЗаполненияВладельца(ЗначенияЗаполнения, УчастникиОпераций)
	
	// См. также СведенияОбОбъектеИнформационнойБазы()
	
	ЗначенияЗаполненияВладельца = Новый Структура;
	
	Если Не ЗначенияЗаполнения.Свойство("Владелец") Или Не ЗначениеЗаполнено(ЗначенияЗаполнения.Владелец) Тогда
		Возврат ЗначенияЗаполненияВладельца;
	КонецЕсли;
	
	ОписаниеВладельца = ОписаниеСсылки(ЗначенияЗаполнения.Владелец, УчастникиОпераций);
	
	Если ОписаниеВладельца = Неопределено Тогда
		Возврат ЗначенияЗаполненияВладельца;
	КонецЕсли;
	
	СвойстваВладельца = СведенияОбОбъектеИнформационнойБазы(ТипЗнч(ЗначенияЗаполнения.Владелец));
	
	Для Каждого СвойствоВладельца Из СвойстваВладельца Цикл
		ЗначенияЗаполненияВладельца.Вставить(СвойствоВладельца.Ключ, ОписаниеВладельца[СвойствоВладельца.Ключ]);
	КонецЦикла;
	
	Возврат ЗначенияЗаполненияВладельца;
	
КонецФункции

// Отбор - Соответствие - подмножество объектов (ссылок) из НовыеОбъекты, которые нужно создать. 
//  * Ключ - тип
//  * Значение - Соответствие, ключи которого - ссылки.
//  Используется для работы с формой, чтобы создать только те объекты, которые фактически участвуют в загружаемых выписках.
//  Получить Отбор можно с помощью НовыеОбъектыРаспознаннойВыписки().
Функция СоздатьНовыеОбъекты(УчастникиОпераций, Настройки, Знач Отбор = Неопределено) Экспорт
	
	Ошибки = Новый ТаблицаЗначений;
	Ошибки.Колонки.Добавить("Ссылка");
	Ошибки.Колонки.Добавить("ДанныеЗаполнения", Новый ОписаниеТипов("Структура"));
	Ошибки.Колонки.Добавить("ТекстИсключения",  Новый ОписаниеТипов("Строка"));
	
	СсылкиНаПодчиненных = НовыйПроцессорУстановкиСсылокНаПодчиненных();
	
	// Создавать объекты будем в таком порядке, чтобы запись каждого элемента не приводила к появлению в базе некорректных ссылок.
	ПорядокТипов = СвязиМеждуТипамиОбъектовИнформационнойБазы();
	Для Каждого НовыеОбъектыПоТипу Из УчастникиОпераций.НовыеОбъекты Цикл
		Если ПорядокТипов.Найти(НовыеОбъектыПоТипу.Ключ) = Неопределено Тогда
			ПорядокТипов.Добавить(НовыеОбъектыПоТипу.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТипСсылки Из ПорядокТипов Цикл
		
		НовыеОбъектыПоТипу = УчастникиОпераций.НовыеОбъекты[ТипСсылки];
		Если НовыеОбъектыПоТипу = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Отбор = Неопределено Тогда
			ОтборПоТипу = Неопределено;
		Иначе
			ОтборПоТипу = Отбор[ТипСсылки];
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Новый(ТипСсылки));
		
		// Структура, которая будет передаваться в составе параметра ДанныеЗаполнения в обработчик события
		// ОбработкаЗаполнения() объектов для возможности кеширования в ней часто используемых 
		// данных, одинаковых для всех объектов одного типа.
		КешОбработкиЗаполнения = Новый Структура;
		
		ШаблонДанныхЗаполнения = Новый Структура;
		НастройкиЗаполнения = Настройки.ЗаполнениеНовыхЭлементов[ТипСсылки];
		Если НастройкиЗаполнения <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ШаблонДанныхЗаполнения, НастройкиЗаполнения, Истина);
		КонецЕсли;
		Для Каждого ОписаниеРеквизита Из РеквизитыНовыхОбъектовИнформационнойБазы(ТипСсылки) Цикл
			ШаблонДанныхЗаполнения.Вставить(ОписаниеРеквизита.Ключ);
		КонецЦикла;
		Для Каждого ОписаниеРеквизита Из СведенияОбОбъектеИнформационнойБазы(ТипСсылки) Цикл
			ШаблонДанныхЗаполнения.Вставить(ОписаниеРеквизита.Ключ);
		КонецЦикла;
		
		Если ОтборПоТипу = Неопределено Тогда
			ОбъектыКСозданию = НовыеОбъектыПоТипу;
		Иначе
			ОбъектыКСозданию = Новый Массив;
			Для Каждого ЭлементОтбора Из ОтборПоТипу Цикл
				ОписаниеНовогоОбъекта = НовыеОбъектыПоТипу.Найти(ЭлементОтбора.Ключ, "Ссылка");
				Если ОписаниеНовогоОбъекта = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбъектыКСозданию.Добавить(ОписаниеНовогоОбъекта);
			КонецЦикла;
		КонецЕсли;
		
		КоличествоОбъектов = ОбъектыКСозданию.Количество();
		Для НомерСКонца = 1 По КоличествоОбъектов Цикл
			
			Индекс = КоличествоОбъектов - НомерСКонца;
			ОписаниеНовогоОбъекта = ОбъектыКСозданию[Индекс];
			
			ОписаниеСсылки = ОписаниеСсылки(ОписаниеНовогоОбъекта.Ссылка, УчастникиОпераций);
			
			РезультатСозданияЭлемента = СоздатьЭлемент(
				ОписаниеНовогоОбъекта,
				ОписаниеСсылки,
				ШаблонДанныхЗаполнения,
				Ошибки,
				МенеджерОбъекта,
				ТипСсылки,
				КешОбработкиЗаполнения);
			
			Если РезультатСозданияЭлемента.Создан Тогда
				СсылкиНаПодчиненныхКУстановкеДобавитьВладельца(ОписаниеНовогоОбъекта.Ссылка, СсылкиНаПодчиненных, ТипСсылки);
				МожноУстановитьОсновным = РезультатСозданияЭлемента.ЗаполнениеПроверено;
				Если МожноУстановитьОсновным И ТипСсылки = Тип("СправочникСсылка.БанковскиеСчета") Тогда
					// В справочнике БанковскиеСчета заполнение реквизита Банк проверяется только на форме
					// из-за особенностей редактирования банка в форме. Поэтому здесь его приходится проверять особо.
					Если Не ЗначениеЗаполнено(РезультатСозданияЭлемента.Объект.Банк) Тогда
						МожноУстановитьОсновным = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если МожноУстановитьОсновным Тогда
					СсылкиНаПодчиненныхКУстановкеДобавитьПодчиненного(ОписаниеНовогоОбъекта.Ссылка, ОписаниеСсылки, СсылкиНаПодчиненных, ТипСсылки);
				КонецЕсли;
				НовыеОбъектыПоТипу.Удалить(ОписаниеНовогоОбъекта);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьСсылкиНаПодчиненных(СсылкиНаПодчиненных);
	
	Возврат Ошибки;
	
КонецФункции

Функция НовыйРезультатСозданияЭлемента(Создан = Ложь, ЗаполнениеПроверено = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("Создан",              Создан);
	Результат.Вставить("ЗаполнениеПроверено", ЗаполнениеПроверено);
	Результат.Вставить("Объект");
	Возврат Результат;
	
КонецФункции

Функция СоздатьЭлемент(ОписаниеНовогоОбъекта, ОписаниеСсылки, ШаблонДанныхЗаполнения, Ошибки, МенеджерОбъекта, ТипСсылки, КешОбработкиЗаполнения)
	
	Если ТипСсылки = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ДанныеЗаполнения = Новый Структура;// Используется для сообщения об ошибке
		ДанныеЗаполнения.Вставить("Наименование", ОписаниеНовогоОбъекта.Наименование);
		ДанныеЗаполнения.Вставить("ИНН",          ОписаниеНовогоОбъекта.ИНН);
		
		Если Не ЗначениеЗаполнено(ОписаниеНовогоОбъекта.Наименование) Тогда
			
			// БЗКБ заведомо не сможет создать такой элемент
			
			Ошибка = Ошибки.Добавить();
			Ошибка.Ссылка           = ОписаниеНовогоОбъекта.Ссылка;
			Ошибка.ДанныеЗаполнения = ДанныеЗаполнения;
			Ошибка.ТекстИсключения  = НСтр("ru = 'Не заполнено наименование'");
			
			Возврат НовыйРезультатСозданияЭлемента();
			
		Иначе
			
			Результат = НовыйРезультатСозданияЭлемента();
			
			Попытка
				// БЗКБ не обрабатывает ошибки при записи элемента справочника
				УчетЗарплаты.СоздатьФизическоеЛицо(
					ОписаниеНовогоОбъекта.Наименование,
					ОписаниеНовогоОбъекта.ИНН,
					ОписаниеНовогоОбъекта.Ссылка);
			Исключение
				
				ЗаписатьОшибкуСозданияЭлемента(
					Ошибки,
					ИнформацияОбОшибке(),
					ОписаниеНовогоОбъекта,
					Метаданные.Справочники.ФизическиеЛица,
					ОписаниеНовогоОбъекта.Наименование,
					ДанныеЗаполнения);
				
				Возврат Результат;
				
			КонецПопытки;
			
			Результат.Создан = Истина;
			
			Возврат Результат;
			
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ШаблонДанныхЗаполнения);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ОписаниеНовогоОбъекта);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ОписаниеСсылки);
	
	// Удалим из данных заполнения незаполненные свойства
	КУдалению = Новый Массив;
	Для Каждого КлючИЗначение Из ДанныеЗаполнения Цикл
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			КУдалению.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Ключ Из КУдалению Цикл
		ДанныеЗаполнения.Удалить(Ключ);
	КонецЦикла;

	// Ссылку на кеш добавляем в состав данных заполнения после удаления незаполненных свойств,
	// т.к. он может быть пустой, но его удалять не надо.
	ДанныеЗаполнения.Вставить("КешОбработкиЗаполнения", КешОбработкиЗаполнения);
	
	// Создадим и запишем элемент
	НовыйОбъект = МенеджерОбъекта.СоздатьЭлемент();
	НовыйОбъект.УстановитьСсылкуНового(ОписаниеНовогоОбъекта.Ссылка);
	НовыйОбъект.Заполнить(ДанныеЗаполнения);
	
	Результат = НовыйРезультатСозданияЭлемента();
	
	Попытка
		НовыйОбъект.Записать();
	Исключение
		
		ЗаписатьОшибкуСозданияЭлемента(
			Ошибки,
			ИнформацияОбОшибке(),
			ОписаниеНовогоОбъекта,
			НовыйОбъект.Метаданные(),
			Строка(НовыйОбъект),
			ДанныеЗаполнения);
			
		Возврат Результат;
		
	КонецПопытки;
	
	// Проверим полноту заполнения записанного элемента
	СообщенияДоПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина); // Для перехвата сообщений в ходе проверки
	Если НовыйОбъект.ПроверитьЗаполнение() Тогда
		Результат.ЗаполнениеПроверено = Истина;
	Иначе
		СообщенияПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина);
		ТекстыСообщений = Новый Массив;
		Для Каждого СообщениеПользователю Из СообщенияПроверкиЗаполнения Цикл
			ТекстыСообщений.Добавить(СообщениеПользователю.Текст);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
			ТекстДляАдминистратора = СтрСоединить(ТекстыСообщений, Символы.ПС);
		Иначе
			ТекстДляАдминистратора = НСтр("ru = 'Заполнен неверно'");
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			ЗагрузкаВыпискиПоБанковскомуСчету.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			НовыйОбъект.Метаданные(),
			НовыйОбъект.Ссылка,
			ТекстДляАдминистратора);
	КонецЕсли;
	
	Для Каждого СообщениеПользователю Из СообщенияДоПроверкиЗаполнения Цикл
		// Вернем в стек сообщений те, что были направлены пользователю до начала проверки
		СообщениеПользователю.Сообщить();
	КонецЦикла;
	
	Результат.Создан = Истина;
	Результат.Объект = НовыйОбъект;
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьОшибкуСозданияЭлемента(Ошибки, ИнформацияОбОшибке, ОписаниеНовогоОбъекта, МетаданныеНовогоОбъекта, ПредставлениеНовогоОбъекта, ДанныеЗаполнения = Неопределено)
	
	// Следует вызывать в Исключении
	
	Ошибка = Ошибки.Добавить();
	Ошибка.Ссылка           = ОписаниеНовогоОбъекта.Ссылка;
	Если ДанныеЗаполнения = Неопределено Тогда
		Ошибка.ДанныеЗаполнения = ОписаниеНовогоОбъекта;
	Иначе
		Ошибка.ДанныеЗаполнения = ДанныеЗаполнения;
	КонецЕсли;
	Ошибка.ТекстИсключения  = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ТекстДляАдминистратора = СтрШаблон(
		НСтр("ru = 'Не создан новый элемент ""%1"" справочника ""%2"" по причине:
             |%3'"),
		ПредставлениеНовогоОбъекта,
		МетаданныеНовогоОбъекта.Имя,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ЗаписьЖурналаРегистрации(
		ЗагрузкаВыпискиПоБанковскомуСчету.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		МетаданныеНовогоОбъекта,
		,// Данные не записаны
		ТекстДляАдминистратора);
		
КонецПроцедуры

#Область СсылкиНаПодчиненных

// Создаваемые элементы справочников могут содержать ссылки на подчиненных: ОсновнойБанковскийСчет.
// Установка таких ссылок выполняется в следующем порядке:
// - по мере записи владельцев запоминаем, что им нужно установить реквизиты
// - по мере записи подчиненных запоминаем значения реквизитов
// - когда все объекты созданы, устанавливаем реквизиты - повторно записываем созданных владельцев.
// Такой порядок вызван следующим:
// - до записи подчиненного владелец должен быть записан
// - запись подчиненного может завершиться неудачей
//
// При создании банковских счетов, принадлежащих _ранее_ созданным контрагентам,
// основные счета не устанавливаем: здесь нужно решение пользователя.

Функция МетаданныеСсылкиНаПодчиненных()
	
	ОписаниеМетаданных = Новый Соответствие;
	
	РеквизитыКонтрагента = Новый Структура;
	РеквизитыКонтрагента.Вставить("ОсновнойБанковскийСчет",     Метаданные.Справочники.Контрагенты.Реквизиты.ОсновнойБанковскийСчет.Тип);
	ОписаниеМетаданных.Вставить(Тип("СправочникСсылка.Контрагенты"), РеквизитыКонтрагента);
	
	РеквизитыФизическогоЛица = Новый Структура;
	РеквизитыФизическогоЛица.Вставить("ОсновнойБанковскийСчет", Метаданные.Справочники.ФизическиеЛица.Реквизиты.ОсновнойБанковскийСчет.Тип);
	ОписаниеМетаданных.Вставить(Тип("СправочникСсылка.ФизическиеЛица"), РеквизитыФизическогоЛица);
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

// Создает коллекцию, которая хранит все данные необходимые для создания ссылок
Функция НовыйПроцессорУстановкиСсылокНаПодчиненных()
	
	Процессор = Новый Структура;
	Процессор.Вставить("МетаданныеРеквизитов", МетаданныеСсылкиНаПодчиненных());
	Процессор.Вставить("РеквизитыКУстановке",  Новый ТаблицаЗначений);
	Процессор.Вставить("ТипыПодчиненных",      Новый Соответствие);
	
	ТипыВладельцев  = Новый Массив;
	Для Каждого ОписаниеВладельца Из Процессор.МетаданныеРеквизитов Цикл
		ТипыВладельцев.Добавить(ОписаниеВладельца.Ключ);
		Для Каждого ОписаниеРеквизита Из ОписаниеВладельца.Значение Цикл
			ТипыРеквизита = ОписаниеРеквизита.Значение.Типы();
			Для Каждого Тип Из ТипыРеквизита Цикл
				Процессор.ТипыПодчиненных.Вставить(Тип, Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Процессор.РеквизитыКУстановке.Колонки.Добавить("Владелец",   Новый ОписаниеТипов(ТипыВладельцев));
	Процессор.РеквизитыКУстановке.Колонки.Добавить("Реквизит",   Новый ОписаниеТипов("Строка"));
	Процессор.РеквизитыКУстановке.Колонки.Добавить("Установлен", Новый ОписаниеТипов("Булево"));
	Процессор.РеквизитыКУстановке.Колонки.Добавить("Значение");
	Процессор.РеквизитыКУстановке.Индексы.Добавить("Владелец, Установлен");
	
	Возврат Процессор;
	
КонецФункции

Процедура СсылкиНаПодчиненныхКУстановкеДобавитьВладельца(Владелец, Процессор, Знач ТипСсылки = Неопределено)
	
	Если ТипСсылки = Неопределено Тогда
		ТипСсылки = ТипЗнч(Владелец)
	КонецЕсли;
	
	ОписаниеВладельца = Процессор.МетаданныеРеквизитов[ТипСсылки];
	Если ОписаниеВладельца = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеРеквизита Из ОписаниеВладельца Цикл
		НоваяСтрока = Процессор.РеквизитыКУстановке.Добавить();
		НоваяСтрока.Владелец = Владелец;
		НоваяСтрока.Реквизит = ОписаниеРеквизита.Ключ;
	КонецЦикла;
	
КонецПроцедуры

Процедура СсылкиНаПодчиненныхКУстановкеДобавитьПодчиненного(Ссылка, ОписаниеСсылки, Процессор, Знач ТипСсылки = Неопределено)
	
	Если ТипСсылки = Неопределено Тогда
		ТипСсылки = ТипЗнч(Ссылка)
	КонецЕсли;
	
	Если Процессор.ТипыПодчиненных[ТипСсылки] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Владелец = ОписаниеСсылки.Владелец;
	
	ОписаниеВладельца = Процессор.МетаданныеРеквизитов[ТипЗнч(Владелец)];
	Если ОписаниеВладельца = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец",   Владелец);
	Отбор.Вставить("Установлен", Ложь);
	
	РеквизитыКУстановке = Процессор.РеквизитыКУстановке.НайтиСтроки(Отбор);
	Для Каждого ОписаниеРеквизита Из РеквизитыКУстановке Цикл
		ОписаниеТиповРеквизита = ОписаниеВладельца[ОписаниеРеквизита.Реквизит];
		Если ОписаниеТиповРеквизита.СодержитТип(ТипЗнч(Ссылка)) Тогда
			ОписаниеРеквизита.Значение   = Ссылка;
			ОписаниеРеквизита.Установлен = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСсылкиНаПодчиненных(Процессор)
	
	Владельцы = Новый Соответствие;
	Для Каждого ОписаниеРеквизита Из Процессор.РеквизитыКУстановке Цикл
		Если Не ОписаниеРеквизита.Установлен Тогда
			Продолжить;
		КонецЕсли;
		Владельцы.Вставить(ОписаниеРеквизита.Владелец);
	КонецЦикла;
	
	Для Каждого КлючИЗначениеВладелец Из Владельцы Цикл
		
		Владелец = КлючИЗначениеВладелец.Ключ;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец",   Владелец);
		Отбор.Вставить("Установлен", Истина);
		Реквизиты = Процессор.РеквизитыКУстановке.НайтиСтроки(Отбор);
		
		ИзмененныеРеквизиты = Новый Массив;
		
		Объект = Владелец.ПолучитьОбъект();
		Для Каждого Реквизит Из Реквизиты Цикл
			Если ЗначениеЗаполнено(Объект[Реквизит.Реквизит]) Тогда
				Продолжить;
			КонецЕсли;
			Объект[Реквизит.Реквизит] = Реквизит.Значение;
			ИзмененныеРеквизиты.Добавить("""" + Реквизит.Реквизит + """");
		КонецЦикла;
		
		Если Не Объект.Модифицированность() Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененныеРеквизитыСтрокой = СтрСоединить(ИзмененныеРеквизиты, ", ");
		Если ИзмененныеРеквизиты.Количество() = 1 Тогда
			ШаблонТекстаДляАдминистратора = НСтр("ru = 'Реквизит %1 не установлен:
                                                 |%2'");
		Иначе
			ШаблонТекстаДляАдминистратора = НСтр("ru = 'Реквизиты %1 не установлены:
                                                 |%2'");
		КонецЕсли;
		
		Попытка
			Объект.Записать();
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ТекстДляАдминистратора = СтрШаблон(
				ШаблонТекстаДляАдминистратора,
				ИзмененныеРеквизитыСтрокой,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ЗаписьЖурналаРегистрации(
				ЗагрузкаВыпискиПоБанковскомуСчету.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Владелец.Метаданные(),
				Владелец,
				ТекстДляАдминистратора);
				
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
