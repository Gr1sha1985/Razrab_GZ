
#Область СлужебныйПрограммныйИнтерфейс

#Область УправлениеФормой

// Настраивает поля формы, отображающие сведения о счете-фактуре.
//  Если документ позволяет отражать операций комиссии по закупке на стороне комитента, необходимо вызвать
//  НастроитьПолеПродавецПоСчетуФактуре() для управления видимостью поля формы с данными о продавце.
//
// Параметры:
//  Кнопка               - ГруппаФормы - настраиваемый элемент формы, содержащий кнопку создания счета-фактуры. Обычно имеет имя СчетФактураКнопка.
//  Ссылка               - ГруппаФормы - настраиваемый элемент формы, группа, содержащая ссылку на счет-фактуру. Обычно имеет имя СчетФактураСсылка.
//  Надпись              - ПолеФормы   - настраиваемый элемент формы, отображающий ссылку на счет-фактуру или надпись о том,
//                                       что счет-фактура не требуется. Обычно имеет имя НадписьСчетФактура.
//  ДокументБезНДС       - Булево      - Истина, если НДС в документе не может быть выделен или выделение НДС не имеет смысла
//                                       (применимо для большинства операций организации - не плательщика НДС).
//  ТребуетсяСчетФактура - Булево      - Ложь, если характер операции плательщика НДС не предполагает регистрации счета-фактуры.
//  СчетФактура          - ДокументСсылка.СчетФактураВыданный, ДокументСсылка.СчетФактураПолученный- 
//                                       счет-фактура, относящийся к первичному документу.
//
Процедура НастроитьПоляСчетаФактуры(Кнопка, Ссылка, Надпись, ДокументБезНДС, ТребуетсяСчетФактура, СчетФактура) Экспорт
	
	Если ДокументБезНДС Тогда
		// Ничего не показываем
		Кнопка.Видимость  = Ложь;
		Ссылка.Видимость = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СчетФактура) И ТребуетсяСчетФактура Тогда
		// Показываем кнопку ввода нового счета-фактуры
		Кнопка.Видимость  = Истина;
		Ссылка.Видимость = Ложь;
	Иначе
		// Показываем ссылку на существующий счет-фактуру или текст о том, что она не требуется
		Кнопка.Видимость  = Ложь;
		Ссылка.Видимость = Истина;
		
		Надпись.Гиперссылка = ТребуетсяСчетФактура;
		// Текст надписи выводится в УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруВыданный()
		
	КонецЕсли;
	
КонецПроцедуры

// Настраивает поле формы, отображающие сведения о продавце.
//  Процедура вызывается после НастроитьПоляСчетаФактуры() если документ позволяет отражать операций комиссии по закупке на стороне комитента.
//
// Параметры:
//  Продавец    - ПолеФормы - настраиваемый элемент формы, поле ввода для выбора продавца. Обычно имеет имя Продавец.
//  ЭтоКомиссия - Булево    - Истина, если документом регистрируется операция по договору комиссии на закупку.
//
Процедура НастроитьПолеПродавецПоСчетуФактуре(Продавец, ЭтоКомиссия) Экспорт
	
	Продавец.Видимость = ЭтоКомиссия;
	
КонецПроцедуры

Процедура ОтобразитьПоясненияКПериодуОтчета(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Отчет;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	БлижайшийНалоговыйПериод = УчетНДСВызовСервера.БлижайшийНалоговыйПериодСервер(
		Объект.Организация,
		Объект.КонецПериода);
	
	УчетВедется = Объект.КонецПериода >= НачалоКвартала(БлижайшийНалоговыйПериод.Начало);
	
	Если БлижайшийНалоговыйПериод.Конец = КонецДня(КонецКвартала(Объект.КонецПериода))
	   И КонецКвартала(БлижайшийНалоговыйПериод.Начало) < КонецКвартала(БлижайшийНалоговыйПериод.Период) Тогда
		
		// Расширенный налоговый период
		
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Истина;
		ШаблонСообщения = НСтр("ru='Период с даты регистрации %1 по %2 включается в отчетность по НДС за %3.'");
		ТекстПояснения = СтрШаблон(
			ШаблонСообщения,
			Формат(БлижайшийНалоговыйПериод.Начало, "ДЛФ=D"), 
			Формат(КонецКвартала(БлижайшийНалоговыйПериод.Начало), "ДЛФ=D"),
			Формат(БлижайшийНалоговыйПериод.Конец, "ДФ='к ''квартал'' гггг ''года'''"));
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = ТекстПояснения;
		
	ИначеЕсли УчетВедется 
		    И БлижайшийНалоговыйПериод.Конец > КонецДня(КонецКвартала(Объект.КонецПериода)) Тогда
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Истина;
		ШаблонСообщения = НСтр("ru='Отчетность по НДС за %1 сдавать не нужно. Период с даты регистрации %2 по %3 включается в отчетность за %4.'");
		ТекстПояснения = СтрШаблон(
			ШаблонСообщения,
			Формат(КонецКвартала(Объект.КонецПериода), "ДФ='к ''квартал'' гггг ''года'''"),
			Формат(БлижайшийНалоговыйПериод.Начало, "ДЛФ=D"), 
			Формат(КонецКвартала(БлижайшийНалоговыйПериод.Начало), "ДЛФ=D"),
			Формат(БлижайшийНалоговыйПериод.Конец, "ДФ='к ''квартал'' гггг ''года'''"));
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = ТекстПояснения;
	Иначе
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ФормаОтчетаОрганизацияПериодПриИзменении(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	ОтобразитьПоясненияКПериодуОтчета(Форма);
	
	Если НЕ ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьПолеУПД(Форма, ЭтоУниверсальныйДокумент = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ПредставлениеУПД.Видимость = ЭтоУниверсальныйДокумент;
	
	Если Не ЭтоУниверсальныйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	НадписьСчетФактураПредставление = "";
	КодВидаОперацииПредставление = НСтр("ru='01'");
	НДСПредъявленКВычетуПредставление = "";
	
	ТребуетсяОтражениеВКнигеПокупок = Форма.ИтогиВсегоНДС > 0;
	
	Если ЗначениеЗаполнено(Объект.НомерВходящегоДокумента)
		И ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
		НадписьСчетФактураПредставление = СтрШаблон("%1 от %2",
			Объект.НомерВходящегоДокумента,
			Формат(Объект.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Если ТребуетсяОтражениеВКнигеПокупок Или Форма.ИтогиВсего = 0 Тогда
		// По пустой табличной части невозможно достоверно определить 
		// необходимость отражения в книге покупок.
		
		Если ЗначениеЗаполнено(Форма.КодВидаОперации) Тогда
			КодВидаОперацииПредставление = Форма.КодВидаОперации;
		КонецЕсли;
		
		Если Не Форма.РаздельныйУчетНДС И Форма.НДСПредъявленКВычету Тогда
			НДСПредъявленКВычетуПредставление = НСтр("ru=', вычет НДС отражен в книге покупок'"); 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НадписьСчетФактураПредставление) Тогда
			Форма.ПредставлениеУПД = СтрШаблон("%1, код вида операции %2%3",
				НадписьСчетФактураПредставление,
				КодВидаОперацииПредставление,
				НДСПредъявленКВычетуПредставление);
		Иначе
			Форма.ПредставлениеУПД = СтрШаблон("код вида операции %1%2",
				КодВидаОперацииПредставление,
				НДСПредъявленКВычетуПредставление);
		КонецЕсли; 
		
		Элементы.ПредставлениеУПД.Гиперссылка = Истина;
			
	Иначе
			
		Форма.ПредставлениеУПД = НадписьСчетФактураПредставление;
		Элементы.ПредставлениеУПД.Гиперссылка = Ложь;
			
	КонецЕсли;
		
КонецПроцедуры

Процедура ОтобразитьПолеУПДВыданный(Форма, ЭтоУниверсальныйДокумент = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	Элементы.ПредставлениеУПД.Видимость = ЭтоУниверсальныйДокумент;
	
	Если Не ЭтоУниверсальныйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	НадписьСчетФактураПредставление = "";
	КодВидаОперацииПредставление = НСтр("ru='01'");
	
	Если ЗначениеЗаполнено(Форма.СчетФактура) Тогда
		НадписьСчетФактураПредставление = СтрШаблон("%1, ",
			Форма.НадписьСчетФактура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.КодВидаОперации) Тогда
		КодВидаОперацииПредставление = Форма.КодВидаОперации;
	КонецЕсли;
	
	Форма.ПредставлениеУПД = СтрШаблон("%1код вида операции %2",
		НадписьСчетФактураПредставление,
		КодВидаОперацииПредставление);
	
КонецПроцедуры

#КонецОбласти

Функция ОбщаяСтавкаНДС(Период) Экспорт
	
	Если Период < '20190101' Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
	КонецЕсли;
	
КонецФункции

Функция ОбщаяРасчетнаяСтавкаНДС(Период) Экспорт
	
	Если Период < '20190101' Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120");
	КонецЕсли;
	
КонецФункции

Функция СтавкаНДСПоУмолчанию(Период, ПлательщикНДС = Истина) Экспорт
	
	Если ПлательщикНДС Тогда
		Возврат ОбщаяСтавкаНДС(Период);
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	КонецЕсли;

КонецФункции

Функция РасчетнаяСтавкаНДСПоУмолчанию(Период) Экспорт
	
	Возврат ОбщаяРасчетнаяСтавкаНДС(Период);
	
КонецФункции

Функция СтавкаНДСИсчисляетсяНалоговымАгентом(Период) Экспорт
	
	Возврат ОбщаяРасчетнаяСтавкаНДС(Период);
	
КонецФункции

Функция ОсновнаяСтавкаНДСПоБилетам(ДополнительныеУслуги = Ложь) Экспорт
	
	// На дополнительные услуги чаще всего обычная ставка НДС
	Если ДополнительныеУслуги Тогда	
		Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
	КонецЕсли;

	// По ставке 0% облагаются:
	// - внутренние ж/д перевозки
	// - авиа перевозки, пунктом отправления или назначения которых, является республика Крым
	// - международные авиа и ж/д перевозки
	Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	
КонецФункции

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Сумма            - Число - сумма от которой надо рассчитывать налоги;
//  СуммаВключаетНДС - Булево - признак включения НДС в сумму ("внутри" или "сверху");
//  СтавкаНДС        - Число - процентная ставка НДС.
//
// Возвращаемое значение:
//  Число - полученная сумма НДС.
//
Функция РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт

	Если СуммаВключаетНДС Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если НЕ СуммаВключаетНДС Тогда
		СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
	КонецЕсли;
	
	Возврат СуммаНДС;

КонецФункции // РассчитатьСуммуНДС()

// Производит пересчет цен при изменении флагов учета налогов.
// Пересчет зависит от способа заполнения цен, при заполнении По ценам номенклатуры (при продаже) 
// хочется избегать ситуаций, когда компания  «теряет деньги» при пересчете налогов. 
// Поэтому если в документе флаг "Учитывать налог" выключен, то цены должны браться напрямую из справочника, 
// потому что хочется продавать по той же цене, независимо от режима налогообложения. 
// Например, если отпускная цена задана с НП для избежания ошибок округления, то это не значит, 
// что при отпуске без НП мы должны продать дешевле. Если же флаг учета налога в документе включен, 
// то цены должны пересчитываться при подстановке в документ: 
// налог должен включаться или не включаться в зависимости от флага включения налога в типе цен.
// При заполнении по ценам контрагентов (при покупке) хочется хранить цены поставщиков. 
// Поэтому нужно пересчитывать всегда по установленным флагам в документе и в типе цен. 
// Это гарантирует, что при записи цен в регистр и последующем их чтении, 
// например, при заполнении следующего документа, мы с точностью до ошибок округления при пересчете 
// получим те же самые цены.
//
// Параметры: 
//  Цена                - Число - пересчитываемое значение цены;
//  ЦенаВключаетНДС     - Булево - определяет содержит ли переданное значение цены НДС;
//  СуммаВключаетНДС    - Булево - определяет должно ли новое значение цены включать НДС;
//  СтавкаНДС           - Число - ставка НДС.
//
// Возвращаемое значение:
//  Число - новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт

	// Инициализация переменных
	НадоВключитьНДС  = Ложь;
	НадоИсключитьНДС = Ложь;
	НоваяЦена		 = Цена;

	Если СуммаВключаетНДС
		И (НЕ ЦенаВключаетНДС) Тогда
		
		// Надо добавлять НДС       
		НадоВключитьНДС = Истина;
	ИначеЕсли (НЕ СуммаВключаетНДС)
		И ЦенаВключаетНДС  Тогда
		
		// Надо исключать НДС       
		НадоИсключитьНДС = Истина;
	КонецЕсли;
		
	Если НадоИсключитьНДС Тогда
		НоваяЦена = (НоваяЦена * 100) / (100 + СтавкаНДС);
	КонецЕсли;

	Если НадоВключитьНДС Тогда
		НоваяЦена = (НоваяЦена * (100 + СтавкаНДС)) / 100;
	КонецЕсли;

	Возврат НоваяЦена;

КонецФункции // ПересчитатьЦенуПриИзмененииФлаговНалогов()

// Возвращает номер версии подсистемы НДС.
//
// Параметры:
//  Дата - Дата.
//
// Возвращаемое значение:
//  Число - номер версии.
//
Функция Версия(Дата) Экспорт
	
	Если Дата < '20120101' Тогда
		Возврат 1;
	Иначе
		Возврат 2;
	КонецЕсли;
	
КонецФункции

// Возвращает безопасную долю вычета в соответствии с приказом ФНС от 30 мая 2007 г. N ММ-3-06/333@, 
// превышение которой привлечет дополнительное внимание налоговых органов.
//
// Возвращаемое значение:
//  Число - безопасная доля вычета.
//
Функция БезопаснаяДоляВычетаПоУмолчанию() Экспорт
	
	// Безопасной считается доля вычетов за 4 квартала менее 89%.
	Возврат 89;
	
КонецФункции

// Определяет версию перечня кодов видов операций для отчетности по НДС на переданную дату.
//
// Параметры:
//   Период - Дата - дата, на которую требуется определить версию перечня видов операций.
// Возвращаемое значение:
//  Число - номер версии кодов видов операций:
//          1 - перечень, утвержденный приказом ФНС 14.02.2012 N ММВ-7-3/83@;
//          2 - перечень, утвержденный письмом ФНС от 22.01.2015 N ГД-4-3/794@;
//          3 - перечень, утвержденный приказом ФНС от 14.03.2016 N ММВ-7-3/136@;
//          4 - дополнительные коды по письмам ФНС от 09.01.2018 N СД-4-3/10@, от 16.01.2018 N СД-4-3/532@ и N СД-4-3/480@.
Функция ВерсияКодовВидовОпераций(Период) Экспорт
	
	Если Период >= '20180101' Тогда
		// С 1 января 2018 года используются дополнительные коды, рекомендованные в письмах ФНС:
		// N СД-4-3/10@ от 09.01.2018;
		// N СД-4-3/532@ от 16.01.2018;
		// N СД-4-3/480@ от 16.01.2018.
		Возврат 4;
	ИначеЕсли Период >= '20160701' Тогда
		// С 1 июля 2016 года действует перечень, 
		// утвержденный приказом ФНС от 14.03.2016 N ММВ-7-3/136@.
		Возврат 3;
	ИначеЕсли Период >= '20150101' Тогда
		// С 1 января 2015 года действует перечень,
		// утвержденный письмом ФНС от 22.01.2015 N ГД-4-3/794@.
		Возврат 2;
	Иначе
		// До 1 января 2015 года действует перечень,
		// утвержденный приказом ФНС 14.02.2012 N ММВ-7-3/83@.
		Возврат 1;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьРеквизитыФормыПроСчетФактуруВыданный(Форма, РеквизитыСФ = Неопределено, ТребуетсяВсегда = Ложь, СтруктураОтбора = Неопределено, ИмяРеквизитаСчетФактура = "СчетФактура", ИмяРеквизитаСсылка = "Ссылка") Экспорт
	
	Если РеквизитыСФ <> Неопределено Тогда
		ИсходныеДанные = РеквизитыСФ;
	ИначеЕсли ЗначениеЗаполнено(Форма[ИмяРеквизитаСчетФактура]) Тогда
		ИсходныеДанные = Форма[ИмяРеквизитаСчетФактура];
	Иначе
		ИсходныеДанные = Форма.Объект[ИмяРеквизитаСсылка];
	КонецЕсли;
	
	Если ТребуетсяВсегда Тогда
		ТребуетсяСчетФактура = Истина;
	Иначе
		ТребуетсяСчетФактура = Форма.ТребуетсяСчетФактура;
	КонецЕсли;
	
	ДанныеНадписи = ДанныеОСчетеФактуре(
		ИсходныеДанные,
		"Выданный",
		ТребуетсяСчетФактура,
		СтруктураОтбора);
		
	Форма[ИмяРеквизитаСчетФактура] = ДанныеНадписи.СчетФактура;
	Форма.НомерСчетаФактуры = ДанныеНадписи.НомерСчетаФактуры;
	
	СтатусПроведения = "";
	Если ДанныеНадписи.СчетФактура <> Неопределено Тогда
		
		Если ДанныеНадписи.Проведен = Ложь Тогда
			СтатусПроведения = " (не проведен)";
			Форма.Элементы["Надпись" + ИмяРеквизитаСчетФактура].ЦветТекста = Новый Цвет(178,34,34);
		ИначеЕсли ЗначениеЗаполнено(ДанныеНадписи.Проведен) Тогда 
			Форма.Элементы["Надпись" + ИмяРеквизитаСчетФактура].ЦветТекста = Новый Цвет;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Форма, ДанныеНадписи, "КодВидаОперации");
		
	КонецЕсли;
	
	Форма["Надпись" + ИмяРеквизитаСчетФактура] = ДанныеНадписи.НадписьСчетФактура + СтатусПроведения;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыФормыПроСчетФактуруПолученный(Форма, РеквизитыСФ = Неопределено, ТребуетсяСчетФактура = Истина, СтруктураОтбора = Неопределено, ИмяРеквизитаСчетФактура = "СчетФактура", ИмяРеквизитаСсылка = "Ссылка") Экспорт
	
	Если РеквизитыСФ <> Неопределено Тогда
		ИсходныеДанные = РеквизитыСФ;
	ИначеЕсли ЗначениеЗаполнено(Форма[ИмяРеквизитаСчетФактура]) Тогда
		ИсходныеДанные = Форма[ИмяРеквизитаСчетФактура];
	Иначе
		ИсходныеДанные = Форма.Объект[ИмяРеквизитаСсылка];
	КонецЕсли;
	
	ДанныеНадписи = ДанныеОСчетеФактуре(ИсходныеДанные, "Полученный", ТребуетсяСчетФактура, СтруктураОтбора);
		
	Форма[ИмяРеквизитаСчетФактура] = ДанныеНадписи.СчетФактура;
	
	СтатусПроведения = "";
	
	Если ДанныеНадписи.СчетФактура <> Неопределено Тогда
		
		Если ДанныеНадписи.Проведен = Ложь Тогда
			СтатусПроведения = " (не проведен)";
			Форма.Элементы["Надпись" + ИмяРеквизитаСчетФактура].ЦветТекста = Новый Цвет(178,34,34);
		ИначеЕсли ЗначениеЗаполнено(ДанныеНадписи.Проведен) Тогда
			Форма.Элементы["Надпись" + ИмяРеквизитаСчетФактура].ЦветТекста = Новый Цвет;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Форма, ДанныеНадписи, "КодВидаОперации,НДСПредъявленКВычету");
		
	КонецЕсли;
	
	Форма["Надпись" + ИмяРеквизитаСчетФактура] = ДанныеНадписи.НадписьСчетФактура + СтатусПроведения;
	
КонецПроцедуры

Процедура ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(ПараметрыЗаписи) <> Тип("Структура") Тогда
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("ДокументыОснования") Тогда
		ПараметрыЗаписи.Вставить("ДокументыОснования", Новый Массив);
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("РеквизитыСФ") Тогда
		ПараметрыЗаписи.Вставить("РеквизитыСФ", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Конструктор параметров для создания выданного счета-фактуры.
//
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыеПараметрыСозданияВыданногоСчетаФактуры() Экспорт
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Основание",                Неопределено);
	ПараметрыСоздания.Вставить("КодВидаОперации",          "");
	ПараметрыСоздания.Вставить("ЭтоУниверсальныйДокумент", Ложь);
	ПараметрыСоздания.Вставить("УникальныйИдентификатор",  "");
	ПараметрыСоздания.Вставить("СтруктураОтбора");
	
	Возврат ПараметрыСоздания;
	
КонецФункции

// Конструктор параметров для создания полученного счета-фактуры.
//
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыеПараметрыСозданияПолученногоСчетаФактуры() Экспорт
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Основание",                    Неопределено);
	ПараметрыСоздания.Вставить("НомерСчетаФактурыПолученного", "");
	ПараметрыСоздания.Вставить("ДатаСчетаФактурыПолученного",  '00010101');
	ПараметрыСоздания.Вставить("Продавец",                     Неопределено);
	ПараметрыСоздания.Вставить("Продавцы");
	ПараметрыСоздания.Вставить("КодВидаОперации",              "");
	ПараметрыСоздания.Вставить("НДСПредъявленКВычету",         Ложь);
	ПараметрыСоздания.Вставить("ЭтоУниверсальныйДокумент",     Ложь);
	
	Возврат ПараметрыСоздания;
	
КонецФункции

// Документы по учету НДС для передачи в электронном виде

Функция ПолучитьКодПоСКНП(Период, Реорганизация = Ложь) Экспорт 
	
	Мес = Цел((Месяц(Период) - 1)/3);
	
	Если Реорганизация Тогда
		Если Мес = 0 Тогда
			Возврат "51";
		ИначеЕсли Мес = 1 Тогда 
			Возврат "54";
		ИначеЕсли Мес = 2 Тогда 
			Возврат "55";
		ИначеЕсли Мес = 3 Тогда 
			Возврат "56";
		КонецЕсли;
	Иначе
		Если Мес = 0 Тогда
			Возврат "21";
		ИначеЕсли Мес = 1 Тогда 
			Возврат "22";
		ИначеЕсли Мес = 2 Тогда 
			Возврат "23";
		ИначеЕсли Мес = 3 Тогда 
			Возврат "24";
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ФорматныйКонтрольКодаВидаОперацииПройден(КодВидаОперации) Экспорт
	
	Результат = Истина;
	
	КодыВидовОперации = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодВидаОперации, ";");
	Для Каждого Код Из КодыВидовОперации Цикл
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Код) Тогда
			Результат = Ложь;
		КонецЕсли;
		Если СтрДлина(Код) > 2 Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает дату с которой возможно контролировать безопасную долю вычета
//
// Возвращаемое значение:
//  Дата
//
Функция НачалоРаботыКонтроляДолиВычетов() Экспорт
	
	Возврат '20190101';
	
КонецФункции

// Конструктор параметров для создания выданного счета-фактуры.
//
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыеПараметрыСозданияВыданногоСчетаФактурыПослеАктуализации() Экспорт
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Основание",     Неопределено);
	ПараметрыСоздания.Вставить("Ссылка",        ПредопределенноеЗначение("Документ.СчетФактураВыданный.ПустаяСсылка"));
	ПараметрыСоздания.Вставить("РеквизитыСФ",   Неопределено);
	ПараметрыСоздания.Вставить("ВыписыватьСчетаФактурыСпецРежимы", Ложь);
	ПараметрыСоздания.Вставить("ОткрытьФормуОшибки",               Ложь);
	ПараметрыСоздания.Вставить("АдресХранилищаСОшибками",          "");
	ПараметрыСоздания.Вставить("КодВидаОперации",          "");
	ПараметрыСоздания.Вставить("ЭтоУниверсальныйДокумент", Ложь);
	ПараметрыСоздания.Вставить("УникальныйИдентификатор",  "");
	ПараметрыСоздания.Вставить("СтруктураОтбора");
	
	Возврат ПараметрыСоздания;
	
КонецФункции

Функция НаличиеОшибокВНомереДекларации(НомерТаможеннойДекларации, НачалоКорректногоПериода, КонецКорректногоПериода) Экспорт
	
	НомерДекларацииНаТовары = СокрЛП(НомерТаможеннойДекларации);
	
	Если НЕ ЗначениеЗаполнено(НомерДекларацииНаТовары) Тогда
		// Пользователь еще ничего не ввел.
		Возврат 0;
	КонецЕсли;
	
	МассивТД = СтрРазделить(НомерДекларацииНаТовары, "/");
	
	Если МассивТД.Количество() > 4
	 ИЛИ МассивТД.Количество() < 3 Тогда
		// Ошибочное количество элементов.
		Возврат 1;
	КонецЕсли;
	
	КодТаможенногоОргана = МассивТД[0];
	
	Если СтрДлина(КодТаможенногоОргана) <> 2
	   И СтрДлина(КодТаможенногоОргана) <> 5
	   И СтрДлина(КодТаможенногоОргана) <> 8 Тогда
		// Ошибочная длина кода таможенного органа.
		Возврат 2;
	КонецЕсли;
	
	ДатаПринятияДекларацииНаТовары = МассивТД[1];
	
	Если СтрДлина(ДатаПринятияДекларацииНаТовары) <> 6 Тогда
		// Ошибочная длина поля дата.
		Возврат 3;
	Иначе
		// Проверим корректность указания даты.
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ДатаПринятияДекларацииНаТовары) Тогда
			// Длина поля верная, но дата указана ошибочно.
			Возврат 3;
		КонецЕсли; 
		
		СтрокаВДату = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаПринятияДекларацииНаТовары);
		Если НЕ ЗначениеЗаполнено(СтрокаВДату) Тогда
			// Длина поля верная, но дата указана ошибочно.
			Возврат 3;
		Иначе
			// Проверим год на корректность указания.
			
			Если СтрокаВДату < НачалоКорректногоПериода 
			 ИЛИ СтрокаВДату > КонецКорректногоПериода Тогда
				Возврат 4;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ПорядковыйНомерДекларацииНаТовары = МассивТД[2];
	
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) < 7
	 ИЛИ СтрДлина(ПорядковыйНомерДекларацииНаТовары) > 8 Тогда
		// Ошибочная длина поля порядковый номер.
		Возврат 5;
	КонецЕсли;
	
	// В устаревшем формате предварительной таможенной декларации (ориентировочно 2008 год)
	// порядковый номер декларации на товары состоит из 7 символов, первый символ - буква "П",
	// шесть оставшихся - цифры.
	// В случае представления заявления о выпуске товаров до подачи декларации на товары (ориентировочно с 4 августа 2019 года) 
	// регистрационный номер таможенной декларации имеет вид
	//    X......X/XXXXXX/BXXXXXX
	//   ________ ______ ________,
	// 
	//      1      2        3
	//(в ред. решения Коллегии Евразийской экономической комиссии от 02.07.2019 N 108)
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) = 7 Тогда
		ПервыйСимвол = ВРег(Лев(ПорядковыйНомерДекларацииНаТовары, 1));
		ПоследниеШестьСимволов = ВРег(Прав(ПорядковыйНомерДекларацииНаТовары, 6));
		УстаревшийНомерТД = ПервыйСимвол = "П" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеШестьСимволов);
		ЗаявлениеОВыпускеТоваров2019 = ПервыйСимвол = "В" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеШестьСимволов);
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПорядковыйНомерДекларацииНаТовары)
		   И НЕ УстаревшийНомерТД
		   И НЕ ЗаявлениеОВыпускеТоваров2019 Тогда
			// Ошибочный формат поля порядковый номер.
			Возврат 5;
		КонецЕсли;
	КонецЕсли;

	// В случае выпуска товаров до подачи таможенной декларации импортер представляет в налоговый орган
	// обязательство о подаче таможенной декларации (до 2018 года) 
	// или заявление о выпуске товаров (с 1 января 2018 года по 4 августа 2019 года).
	// При этом порядковый номер декларации на товары состоит из 8 символов.
	// Порядковый принимает вид "ОБ123456" или "ЗВ123456" соответственно.
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) = 8 Тогда
		ПервыеДваСимвола = ВРег(Лев(ПорядковыйНомерДекларацииНаТовары, 2));
		Если ПервыеДваСимвола = "0Б" Тогда 
			// Вместо буквы "О" указана цифра ноль.
			Возврат 6;
		ИначеЕсли ПервыеДваСимвола = "3В"
		      ИЛИ ПервыеДваСимвола = "3B" Тогда
			// Вместо буквы "З" указана цифра три.
			Возврат 7;
		ИначеЕсли ПервыеДваСимвола <> "ОБ"
		        И ПервыеДваСимвола <> "OБ"
		        И ПервыеДваСимвола <> "ЗВ"
		        И ПервыеДваСимвола <> "ЗB" Тогда 
			// Ошибочный формат поля порядковый номер.
			Возврат 5;
		КонецЕсли;
		ПоследниеШестьСимволов = ВРег(Прав(ПорядковыйНомерДекларацииНаТовары, 6));
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеШестьСимволов) Тогда
			// Ошибочный формат поля порядковый номер.
			Возврат 5;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивТД.Количество() = 4 Тогда
		ПорядковыйНомерТовара = МассивТД[3];
		Если СтрДлина(ПорядковыйНомерТовара) > 3
		 ИЛИ СтрДлина(ПорядковыйНомерТовара) < 1 Тогда
			// Ошибочная длина поля порядковый номер товара.
			Возврат 8;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПояснениеКОшибкеВНомереДекларации(КодОшибки, ЭтоЭкспорт = Ложь) Экспорт

	Если КодОшибки = 1 Тогда
		Если ЭтоЭкспорт Тогда
			Возврат НСтр("ru='Номер должен состоять из трех блоков, разделенных дробью ""/""'");
		Иначе
			Возврат НСтр("ru='Номер должен состоять из трех или четырех блоков, разделенных дробью ""/""'"); 
		КонецЕсли; 
	ИначеЕсли КодОшибки = 2 Тогда
		Если ЭтоЭкспорт Тогда
			Возврат НСтр("ru='Первый блок (код таможенного органа) должен состоять из 8 цифр'");
		Иначе
			Возврат НСтр("ru='Первый блок (код таможенного органа) в зависимости от страны ввоза должен состоять из 2, 5 или 8 цифр'"); 
		КонецЕсли; 
	ИначеЕсли КодОшибки = 3 Тогда
		Возврат НСтр("ru='Второй блок (дата регистрации декларации) должен быть в формате ДДММГГ'"); 
	ИначеЕсли КодОшибки = 4 Тогда
		Возврат НСтр("ru='Во втором блоке (дата регистрации декларации) указанный год лежит за пределами допустимого периода'"); 
	ИначеЕсли КодОшибки = 5 Тогда
		Если ЭтоЭкспорт Тогда
			Возврат НСтр("ru='Третий блок (порядковый номер декларации) должен состоять из 7 цифр'");
		Иначе
			Возврат НСтр("ru='Третий блок (порядковый номер декларации) должен состоять из 7 цифр или из букв (""ОБ"", ""ЗВ"", ""В"" или ""П"") и 6 цифр'");
		КонецЕсли;
	ИначеЕсли КодОшибки = 6 Тогда
		Возврат НСтр("ru='В третьем блоке вместо буквы ""О"" указана цифра ноль'");
	ИначеЕсли КодОшибки = 7 Тогда
		Возврат НСтр("ru='В третьем блоке вместо буквы ""З"" указана цифра три'");
	ИначеЕсли КодОшибки = 8 Тогда
		Возврат НСтр("ru='Четвертый блок (порядковый номер товара) должен содержать от 1 до 3 цифр'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ИсходныеДанные - Структура, содержащая информацию о счете-фактуре см. УчетНДСВызовСервера.РеквизитыДляНадписиОСчетеФактуреВыданном()
//              или ДокументСсылка.СчетФактураВыданный 
//              или ДокументСсылка - основание счета-фактуры
//
// ВидСчетаФактуры - Строка - "Выданный" или "Полученный"
Функция ДанныеОСчетеФактуре(Знач ИсходныеДанные, ВидСчетаФактуры, ТребуетсяСФ, СтруктураОтбора = Неопределено)
	
	ДанныеНадписи = Новый Структура;
	ДанныеНадписи.Вставить("СчетФактура",        Неопределено);
	ДанныеНадписи.Вставить("НадписьСчетФактура", "");
	ДанныеНадписи.Вставить("Проведен", "");
	ДанныеНадписи.Вставить("КодВидаОперации", "01");
	ДанныеНадписи.Вставить("НДСПредъявленКВычету", Ложь);
	ДанныеНадписи.Вставить("НомерСчетаФактуры");
	
	Если НЕ ТребуетсяСФ Тогда
		
		ДанныеНадписи.НадписьСчетФактура = НСтр("ru='Не требуется'");
		Возврат ДанныеНадписи;
		
	КонецЕсли;
	
	РеквизитыСФ = Неопределено;
	Если ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
		
		РеквизитыСФ = ИсходныеДанные;
		
	ИначеЕсли ЗначениеЗаполнено(ИсходныеДанные) Тогда
		
		Если ВидСчетаФактуры = "Выданный" Тогда
			РеквизитыСФ = УчетНДСВызовСервера.РеквизитыДляНадписиОСчетеФактуреВыданном(ИсходныеДанные, СтруктураОтбора);
		Иначе
			РеквизитыСФ = УчетНДСВызовСервера.РеквизитыДляНадписиОСчетеФактуреПолученном(ИсходныеДанные, СтруктураОтбора);
		КонецЕсли;
			
	КонецЕсли;
		
	Если РеквизитыСФ = Неопределено Тогда
		ДанныеНадписи.Вставить("НадписьСчетФактура", НСтр("ru='Ввести счет-фактуру'"));
	Иначе
		ЗаполнитьЗначенияСвойств(ДанныеНадписи, РеквизитыСФ);
	КонецЕсли;
	
	Возврат ДанныеНадписи;
		
КонецФункции

#КонецОбласти




