
#Область СлужебныйПрограммныйИнтерфейс

// Установка значений реквизитов предопределенных элементов справочника РолиИсполнителей,
// относящихся к обработке заявок сотрудников.
//
Процедура ИнициализироватьРолиИсполнителей() Экспорт
	
	РолиИсполнителейЗадач = РолиИсполнителейЗадач();
	Для каждого Роль Из РолиИсполнителейЗадач Цикл
		РольОбъект = Роль.ПолучитьОбъект();
		РольОбъект.ИспользуетсяБезОбъектовАдресации = Ложь;
		РольОбъект.ИспользуетсяСОбъектамиАдресации = Истина;
		РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.СтруктураПредприятия;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РольОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура НачальноеЗаполнениеИсполнителейЗадач(Исполнитель) Экспорт
	
	РолиИсполнителейЗадач = РолиИсполнителейЗадач();
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПредприятия = БизнесПроцессыЗаявокСотрудниковВнутренний.СтруктураПредприятия();
	
	НаборЗаписей = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
	Для каждого Роль Из РолиИсполнителейЗадач Цикл
		НаборЗаписей.Очистить();
		Для каждого СтрокаТЗ Из СтруктураПредприятия Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.РольИсполнителя = Роль;
			НоваяЗапись.Исполнитель = Исполнитель;
			НоваяЗапись.ОсновнойОбъектАдресации = СтрокаТЗ.Подразделение;
		КонецЦикла;
		НаборЗаписей.Отбор.РольИсполнителя.Установить(Роль);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция РолиИсполнителейЗадач() Экспорт

	Роли = Новый Массив;
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаЗаявленияНаОтпуск);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаИзменениеЛичныхДанных);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаНалоговыеВычеты);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаСправкиНДФЛ);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаСогласованиеОтсутствий);
	
	БизнесПроцессыЗаявокСотрудниковВнутренний.ДополнитьРолиИсполнителейЗадач(Роли);
	
	Возврат Роли;

КонецФункции

Процедура УстановитьЗначениеИспользоватьБизнесПроцессыЗаявокСотрудников(ИспользуетсяСервисКабинетСотрудника) Экспорт
	
	Если Константы.ИспользоватьБизнесПроцессыЗаявокСотрудников.Получить() <> ИспользуетсяСервисКабинетСотрудника Тогда
		Константы.ИспользоватьБизнесПроцессыЗаявокСотрудников.Установить(ИспользуетсяСервисКабинетСотрудника);
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступнаНастройкаПравилОбработкиЗаявок() Экспорт
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПравилаОбработкиЗаявокСотрудников);
КонецФункции

// Возвращает сроки исполнения заявок.
//	Параметры:
//		РольИсполнителя - СправочникСсылка.РолиИсполнителей;
//		Подразделения - Массив<СправочникСсылка.СтруктураПредприятия>.
//	Возвращаемое значение:
//		Соответствие<СправочникСсылка.СтруктураПредприятия, Число(2,0)>;
Функция СрокиИсполненияЗаявок(РольИсполнителя, Подразделения) Экспорт
	
	ТаблицаСроковЗадач = ТаблицаСроковЗадач(РольИсполнителя, Подразделения);
	
	СрокиИсполненияЗаявок = Новый Соответствие;
	Для каждого Подразделение Из Подразделения Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("РольИсполнителя", РольИсполнителя);
		ПараметрыОтбора.Вставить("Подразделение", Подразделение);
		
		НайденныеСтроки = ТаблицаСроковЗадач.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СрокиИсполненияЗаявок.Вставить(Подразделение, НайденныеСтроки[0].СрокЗадачи);
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("Подразделение", Новый(БизнесПроцессыЗаявокСотрудниковВнутренний.ТипСтруктураПредприятия()));
		
		НайденныеСтроки = ТаблицаСроковЗадач.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СрокиИсполненияЗаявок.Вставить(Подразделение, НайденныеСтроки[0].СрокЗадачи);
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("РольИсполнителя", Справочники.РолиИсполнителей.ПустаяСсылка());
		НайденныеСтроки = ТаблицаСроковЗадач.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СрокиИсполненияЗаявок.Вставить(Подразделение, НайденныеСтроки[0].СрокЗадачи);
			Продолжить;
		КонецЕсли;
		
		СрокиИсполненияЗаявок.Вставить(Подразделение, 7);
	КонецЦикла;
	
	Возврат СрокиИсполненияЗаявок;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает свойства бизнес процесса в случае выполнения заявки.
//	Параметры:
//		БизнесПроцесс - БизнесПроцессОбъект - ссылка на БП для которого получаем исполнителя задачи.
Процедура ВыполнитьБизнесПроцессЗаявки(БизнесПроцесс) Экспорт
	БизнесПроцесс.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокКабинетСотрудника.Выполнена");
	БизнесПроцесс.Выполнено = Истина;
	БизнесПроцесс.Записать();	
КонецПроцедуры

// Устанавливает свойства бизнес процесса в случае отказа по заявке.
//	Параметры:
//		БизнесПроцесс - БизнесПроцессОбъект - ссылка на БП для которого получаем исполнителя задачи.
Процедура ОтказатьБизнесПроцессЗаявки(БизнесПроцесс) Экспорт
	БизнесПроцесс.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокКабинетСотрудника.Отказ");
	БизнесПроцесс.Выполнено = Истина;
	БизнесПроцесс.Записать();
КонецПроцедуры

Функция ТаблицаСроковЗадач(РольИсполнителя, Подразделения)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаОбработкиЗаявокСотрудников.СрокЗадачи КАК СрокЗадачи,
	|	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя КАК РольИсполнителя,
	|	ПравилаОбработкиЗаявокСотрудников.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников
	|ГДЕ
	|	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя = &РольИсполнителя
	|	И ПравилаОбработкиЗаявокСотрудников.Подразделение В(&Подразделения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаОбработкиЗаявокСотрудников.СрокЗадачи,
	|	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя,
	|	ПравилаОбработкиЗаявокСотрудников.Подразделение
	|ИЗ
	|	РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников
	|ГДЕ
	|	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя = &РольИсполнителя
	|	И ПравилаОбработкиЗаявокСотрудников.Подразделение = &СтруктураПредприятияПустаяСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаОбработкиЗаявокСотрудников.СрокЗадачи,
	|	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя,
	|	ПравилаОбработкиЗаявокСотрудников.Подразделение
	|ИЗ
	|	РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников
	|ГДЕ
	|	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
	|	И ПравилаОбработкиЗаявокСотрудников.Подразделение = &СтруктураПредприятияПустаяСсылка";
	
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.УстановитьПараметр("СтруктураПредприятияПустаяСсылка",
							  Новый(БизнесПроцессыЗаявокСотрудниковВнутренний.ТипСтруктураПредприятия()));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОбновитьПравилаОбработкиЗаявокСотрудниковПриЗаписи(Источник, Отказ = Ложь) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыЗаявокСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Подразделение = Источник.Ссылка;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиИсполнителей.Ссылка КАК РолиИсполнителей
	|ИЗ
	|	Справочник.РолиИсполнителей КАК РолиИсполнителей
	|ГДЕ
	|	РолиИсполнителей.Ссылка В(&РолиИсполнителей)";
	
	Запрос.УстановитьПараметр("РолиИсполнителей", РолиИсполнителейЗадач()); 
	
	РолиИсполнителей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РолиИсполнителей");
	Для каждого РольИсполнителя Из РолиИсполнителей Цикл
		ОбновитьПравилаОбработкиЗаявокСотрудников(РольИсполнителя, Подразделение);
		ОбновитьИсполнителейЗадач(РольИсполнителя, Подразделение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПравилаОбработкиЗаявокСотрудников(РольИсполнителя, Подразделение)
	
	ПравилаОбработокЗаявокСотрудников = РегистрыСведений.ПравилаОбработкиЗаявокСотрудников; 
	
	НаборЗаписей = ПравилаОбработокЗаявокСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РольИсполнителя.Установить(РольИсполнителя);
	НаборЗаписей.Отбор.Подразделение.Установить(Подразделение);
	НаборЗаписей.Прочитать();

	Если Подразделение.ПометкаУдаления Тогда
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
		
		Возврат;
		
	ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
		
		НаборЗаписейИерархии = ПравилаОбработокЗаявокСотрудников.СоздатьНаборЗаписей();
		Если Подразделение.Родитель.Пустая() Тогда
			НаборЗаписейИерархии.Отбор.РольИсполнителя.Установить(РольИсполнителя);
			НаборЗаписейИерархии.Прочитать();
		Иначе
			НаборЗаписейИерархии.Отбор.РольИсполнителя.Установить(РольИсполнителя);
			НаборЗаписейИерархии.Отбор.Подразделение.Установить(Подразделение.Родитель);
			НаборЗаписейИерархии.Прочитать();
		КонецЕсли;
		
		Если НаборЗаписейИерархии.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.РольИсполнителя = РольИсполнителя;
		НоваяЗапись.Подразделение = Подразделение;
		
		НоваяЗапись.СрокЗадачи = НаборЗаписейИерархии[0].СрокЗадачи;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИсполнителейЗадач(РольИсполнителя, Подразделение)
	
	НаборЗаписей = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РольИсполнителя.Установить(РольИсполнителя);
	НаборЗаписей.Отбор.ОсновнойОбъектАдресации.Установить(Подразделение);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 И Подразделение.ПометкаУдаления Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.РольИсполнителя = РольИсполнителя;
		НоваяЗапись.ОсновнойОбъектАдресации = Подразделение;
		НоваяЗапись.Исполнитель = Пользователи.ТекущийПользователь();
		
		НаборЗаписей.Записать();
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти




