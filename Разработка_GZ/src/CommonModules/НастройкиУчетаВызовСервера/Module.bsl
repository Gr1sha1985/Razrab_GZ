
////////////////////////////////////////////////////////////////////////////////
// Универсальные методы для формы записи регистра и формы настройки налогов
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция КлючЗаписиУчетнойПолитики(ИмяРегистра, Организация, Период) Экспорт
	
	Возврат НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики(ИмяРегистра, Организация, Период);
	
КонецФункции

// Собирает сведения о настройках организации перед их изменением для контроля за необходимостью
// переключения режима отложенного проведения.
//
// Параметры:
//	ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы.
//	Организация - СправочникСсылка.Организации - Организация, для которой определяются настройки.
//
// Возвращаемое значение:
//	Строка - Адрес временного хранилища, в которое помещены собранные настройки.
//
Функция ПодготовитьДанныеДляПереключенияОтложенногоПроведения(Знач ИдентификаторФормы, Знач Организация) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение") Тогда
		Возврат "";
	КонецЕсли;

	ПериодыИспользованияОтложенногоПроведения = ПроведениеСервер.ПериодыИспользованияОтложенногоПроведения(Организация);
	
	ДанныеДляПереключения = Новый Структура();
	ДанныеДляПереключения.Вставить("ПериодыИспользованияОтложенногоПроведения", ПериодыИспользованияОтложенногоПроведения);
	ДанныеДляПереключения.Вставить("Организация", Организация);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеДляПереключения, ИдентификаторФормы);

КонецФункции

// Запускает фоновое задание по переключению режима отложенного проведения при смене настроек.
// Возвращает структуру с данными о фоновом задании см. ДлительныеОперации.ВыполнитьВФоне()
// либо Неопределено, если переключение режима не требуется.
//
// Параметры:
//	ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы.
//	АдресХранилища - Строка - Адрес временного хранилища, полученный после вызова ПодготовитьДанныеДляПереключенияОтложенногоПроведения().
//
// Возвращаемое значение:
//  Структура - См. возвращаемое значение ДлительныеОперации.ВыполнитьВФоне().
//				Неопределено, если переключение не требуется.
//
Функция ПроверитьОтложенноеПроведениеПослеИзмененияНастроек(Знач ИдентификаторФормы, Знач АдресХранилища) Экспорт

	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляПереключения = ПолучитьИзВременногоХранилища(АдресХранилища);
	 
	Если ЗначениеЗаполнено(ДанныеДляПереключения.Организация) Тогда
		ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ДанныеДляПереключения.Организация);
	КонецЕсли;

	Результат = ПроведениеСервер.ПроверитьОтложенноеПроведениеПослеИзмененияНастроек(
		ДанныеДляПереключения.ПериодыИспользованияОтложенногоПроведения,
		ИдентификаторФормы,
		ГоловнаяОрганизация);

	Возврат Результат;

КонецФункции

Процедура ЗаписатьПродленныйСрокУплатыНалога(Организация, ИмяНастройкиСрока, ЗначениеНастройки) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Прочитать(); // чтобы не затереть настройки, которые здесь не изменяются
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		// Если запись не существует, то поле Организация сброшено
		МенеджерЗаписи.Организация = Организация;
	КонецЕсли;	
	// Записываем только тот срок, который изменен
	МенеджерЗаписи[ИмяНастройкиСрока] = ЗначениеНастройки;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Получает сроки уплаты ЕНВД в 2020 году с учетом настроек продления сроков
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - организация, для которой нужно получить сроки уплаты
// 
// Возвращаемое значение:
//   - Структура - имена свойств соответствуют именам реквизитов формы настройки налогов и отчетов
//
Функция СрокиУплатыЕНВД(Организация) Экспорт 
	
	СрокиУплатыЕНВД = Новый Структура;
	
	СрокиУплатыЕНВД.Вставить("ДатаУплатыЕНВДЗа1Кв2020", '00010101');
	СрокиУплатыЕНВД.Вставить("ДатаУплатыЕНВДЗа2Кв2020", '00010101');
	СрокиУплатыЕНВД.Вставить("ДатаУплатыЕНВДЗа3Кв2020", '00010101');
	
	Настройки = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.СоздатьМенеджерЗаписи();
	Настройки.Организация = Организация;
	Настройки.Прочитать();
	
	ЗаполнитьЗначенияСвойств(СрокиУплатыЕНВД, Настройки);
	
	Если ЗначениеЗаполнено(СрокиУплатыЕНВД.ДатаУплатыЕНВДЗа1Кв2020) 
		 И ЗначениеЗаполнено(СрокиУплатыЕНВД.ДатаУплатыЕНВДЗа2Кв2020) 
		 И ЗначениеЗаполнено(СрокиУплатыЕНВД.ДатаУплатыЕНВДЗа3Кв2020) Тогда
		Возврат СрокиУплатыЕНВД;
	КонецЕсли;	
	
	ПериодПереносаСроков = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.ПериодПереносаСроковНалоговОтчетов();
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация     = Организация;
	ОтборПравил.ИмяЗадачи       = "ЕНВД";
	ОтборПравил.Действие        = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога;
	ОтборПравил.НачалоИнтервала = ПериодПереносаСроков.Начало;  
	ОтборПравил.КонецИнтервала  = ПериодПереносаСроков.Окончание;
		
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(ОтборПравил);

	Если ЗначениеЗаполнено(Расписание) Тогда
		
		Отбор = Новый Структура;
				
		Если НЕ ЗначениеЗаполнено(СрокиУплатыЕНВД.ДатаУплатыЕНВДЗа1Кв2020) Тогда 
			
			// Налог за 1 квартал 2020 года
			Отбор.Вставить("ПериодСобытия", '20200331');
			
			Результат = Расписание.НайтиСтроки(Отбор);
			Если Результат.Количество() > 0 Тогда
				СрокиУплатыЕНВД.ДатаУплатыЕНВДЗа1Кв2020 = Макс(Результат[0].Срок, СрокиУплатыЕНВД.ДатаУплатыЕНВДЗа1Кв2020);
			КонецЕсли;	
		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СрокиУплатыЕНВД.ДатаУплатыЕНВДЗа2Кв2020) Тогда 
					
			// Налог за 2 квартал 2020 года
			Отбор.Вставить("ПериодСобытия", '20200630');
			
			Результат = Расписание.НайтиСтроки(Отбор);
			Если Результат.Количество() > 0 Тогда
				СрокиУплатыЕНВД.ДатаУплатыЕНВДЗа2Кв2020 = Макс(Результат[0].Срок, СрокиУплатыЕНВД.ДатаУплатыЕНВДЗа2Кв2020);
			КонецЕсли;
		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СрокиУплатыЕНВД.ДатаУплатыЕНВДЗа3Кв2020) Тогда 
					
			// Налог за 3 квартал 2020 года
			Отбор.Вставить("ПериодСобытия", '20200930');
			
			Результат = Расписание.НайтиСтроки(Отбор);
			Если Результат.Количество() > 0 Тогда
				СрокиУплатыЕНВД.ДатаУплатыЕНВДЗа3Кв2020 = Макс(Результат[0].Срок, СрокиУплатыЕНВД.ДатаУплатыЕНВДЗа3Кв2020);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СрокиУплатыЕНВД;
	
КонецФункции

Функция ТекстУведомленияОПродленииСроковЕНВД(Организация, Период) Экспорт
	
	ТекстУведомления = "";
	
	Если Справочники.ВидыДеятельностиЕНВД.НалогУплачиваетсяВРазныхРегионах(Организация, Период) Тогда
		
		ТекстУведомления = 
			НСтр("ru = 'Власти субъектов РФ в 2020 году могут продлевать сроки уплаты налога.
			|Поэтому сроки могут оказаться различными в тех регионах, где организация платит налог.
			|Рекомендуем ниже установить наиболее ранние сроки уплаты:'");
		
	Иначе	
		
		ТекстУведомления = 
			НСтр("ru = 'Власти субъектов РФ в 2020 году могут продлевать сроки уплаты налога.
			|Ниже укажите сроки уплаты, установленные по месту регистрации в качестве плательщика ЕНВД:'");
		
	КонецЕсли;
		
	Возврат ТекстУведомления;	
		
КонецФункции	

#КонецОбласти