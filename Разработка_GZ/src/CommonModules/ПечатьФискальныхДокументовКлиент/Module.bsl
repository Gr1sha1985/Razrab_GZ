#Область ПрограммныйИнтерфейс

Процедура НапечататьЧек(ДокументСсылка, Форма, ОписаниеОповещения) Экспорт
	ОчиститьСообщения();
	
	Результат           = НовыйРезультатПечатиЧека();
	ПараметрыПечатиЧека = НовыйПараметрыПечатиЧека();
	
	ПараметрыПечатиЧека.Вставить("Ссылка",                    ДокументСсылка);
	ПараметрыПечатиЧека.Вставить("Форма",                     Форма);
	ПараметрыПечатиЧека.Вставить("ОписаниеОповещения",        ОписаниеОповещения);
	
	Если ПроверитьВозможностьПечатиЧека(Форма) Тогда
		Если ПечатьФискальныхДокументовВызовСервера.ЧекПробитНаФискальномУстройстве(ДокументСсылка) Тогда
		
			Результат.Успешно           = Ложь;
			Результат.СообщениеОбОшибке = НСтр("ru = 'Чек уже пробит на фискальном устройстве!'");
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		
		ИначеЕсли МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФискальногоУстройстваЗавершение", ЭтотОбъект, ПараметрыПечатиЧека);
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
			ПоддерживаемыеТипыВО.Добавить("ККТ");
			
			Если ПечатьФискальныхДокументовВызовСервера.ПоддерживаетсяПодключаемоеОборудование(ПоддерживаемыеТипыВО) Тогда
				МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
					НСтр("ru = 'Выберите фискальное устройство'"), НСтр("ru = 'Фискальное устройство не подключено.'"));
			КонецЕсли;
				
		Иначе
			Результат.Успешно           = Ложь;
			Результат.СообщениеОбОшибке = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			
			ВыполнитьОбработкуОповещения(ПараметрыПечатиЧека.ОписаниеОповещения, Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура НапечататьЧеки(Форма, ОписаниеОповещения) Экспорт
	
	ОчиститьСообщения();
	
	Объект = Форма.Объект;
	
	Результат           = НовыйРезультатПечатиЧека();
	ПараметрыПечатиЧека = НовыйПараметрыПечатиЧека();
	
	ПараметрыПечатиЧека.Вставить("Форма",                     Форма);
	ПараметрыПечатиЧека.Вставить("ОписаниеОповещения",        ОписаниеОповещения);
	ПараметрыОбработчика = Неопределено;
	Если ОписаниеОповещения.ДополнительныеПараметры.Свойство("ПараметрыОбработчика", ПараметрыОбработчика) Тогда
		ПараметрыПечатиЧека.Вставить("ПараметрыОбработчика", ПараметрыОбработчика);
	КонецЕсли;
	
	Если ПечатьФискальныхДокументовВызовСервера.ЧекиПробитыНаФискальномУстройстве(Объект.Ссылка, ПараметрыОбработчика) <> 0 Тогда
		Результат.Успешно           = Ложь;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Чеки уже пробиты на фискальном устройстве!'");
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	ИначеЕсли ПроверитьВозможностьПечатиЧеков(Форма, ПараметрыОбработчика) Тогда
			
			ПараметрыМетода= Новый Структура;
			ПараметрыМетода.Вставить("Ссылка",                  Объект.Ссылка);
			ПараметрыМетода.Вставить("ИдентификаторУстройства", "");
			ПараметрыМетода.Вставить("ВерсияФормата",           "1.0.5.0");
			ПараметрыМетода.Вставить("АдресУстановкиККТ",       "");
			ПараметрыМетода.Вставить("ПараметрыОбработчика",    ПараметрыОбработчика);
			
			ГрупповаяПечатьЧеков(ПараметрыМетода, Форма);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтактнуюИнформациюПоШтрихкоду(ДанныеОбъекта, Знач Штрихкод) Экспорт
	Штрихкод = СокрЛП(Штрихкод);

	Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Штрихкод) Тогда
		ДанныеОбъекта.АдресЭлектроннойПочты = Штрихкод;
		ДанныеОбъекта.ОтправлятьEmail       = Истина;
	Иначе
		ТелефонБезПрефикса = ?(Лев(Штрихкод, 1) = "+", Сред(Штрихкод, 2), Штрихкод);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТелефонБезПрефикса) 
			И ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(ТелефонБезПрефикса) Тогда
			
			ДанныеОбъекта.НомерТелефона = ТелефонБезПрефикса;
			ДанныеОбъекта.ОтправлятьSMS = Истина;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры 

// Приводит номер версии формата фискальных данных с произвольным числом разрядов 
// до стандартного представления версий вида X.X.X.X
// Параметры
//   Номер версии - Строка - строка вида X, X.X или X.X.X
// Результат
//   Строка формата - X.X.X.X
Функция ДополнитьНомерВерсииФФД(НомерВерсии) Экспорт
	Если НЕ ЗначениеЗаполнено(НомерВерсии) Тогда
		Возврат "1.0.0.0";
	КонецЕсли;
	
	НомерВерсииВМассив = СтрРазделить(НомерВерсии, ".");
	
	Для НомерРазряда = НомерВерсииВМассив.Количество() По 3 Цикл
		НомерВерсииВМассив.Добавить("0");
	КонецЦикла;
	
	Возврат СтрСоединить(НомерВерсииВМассив, ".");
КонецФункции

Функция ПолучитьВерсиюФФД(Знач ВерсияФН, Знач ВерсияККТ) Экспорт
	ВерсияККТ = ДополнитьНомерВерсииФФД(ВерсияККТ);
	ВерсияФН  = ДополнитьНомерВерсииФФД(ВерсияФН);
	
	// Определеляем максимальную версию ФФД поддерживаемую ФН
	ВерсияФН = ?(ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияФН, "1.0.5.0") > 0, ВерсияФН, "1.0.5.0");
	
	// Итоговая версия определяется минимальной из версий поддерживаемых ФН и ККТ
	ВерсияФормата = ?(ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияФН, ВерсияККТ) > 0, ВерсияККТ, ВерсияФН);
	
	Возврат ВерсияФормата;
КонецФункции

Функция НовыйПараметрыПечатиЧека() Экспорт
	ПараметрыПечатиЧека = Новый Структура;
	
	ПараметрыПечатиЧека.Вставить("Форма",                   Неопределено);
	ПараметрыПечатиЧека.Вставить("ВерсияФормата",           "1.0.0.0");
	ПараметрыПечатиЧека.Вставить("ИдентификаторУстройства", ПредопределенноеЗначение("Справочник.ПодключаемоеОборудование.ПустаяСсылка"));
	ПараметрыПечатиЧека.Вставить("ТипУстройства",           Неопределено);
	ПараметрыПечатиЧека.Вставить("АдресУстановкиККТ",       Неопределено);
	ПараметрыПечатиЧека.Вставить("НомерСекции",             Неопределено);
	ПараметрыПечатиЧека.Вставить("ОписаниеОповещения",      Неопределено);
	ПараметрыПечатиЧека.Вставить("ПараметрыОплаты",         НовыйПараметрыОплаты());
	ПараметрыПечатиЧека.Вставить("ПараметрыОбработчика",    Новый Структура);
	
	Возврат ПараметрыПечатиЧека;
КонецФункции

Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	Если НавигационнаяСсылка = "ПоказатьКассовыйЧек" Тогда
		КлючФискальнойОперации = ПечатьФискальныхДокументовВызовСервера.КлючФискальнойОперации(Форма.Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.ФискальныеОперации.ФормаЗаписи", Новый Структура("Ключ, НеПоказыватьБаннер", КлючФискальнойОперации));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Конструкторы

Функция НовыйРезультатПечатиЧека()
	Результат = Новый Структура;
	
	Результат.Вставить("Успешно",           Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("НомерЧекаККМ",      0);
	Результат.Вставить("ПараметрыОплаты",   НовыйПараметрыОплаты());
	
	Возврат Результат;
КонецФункции

Функция НовыйПараметрыОплаты()
	ПараметрыОплаты = Новый Структура;
	ПараметрыОплаты.Вставить("СсылочныйНомер",      Неопределено);
	ПараметрыОплаты.Вставить("НомерПлатежнойКарты", Неопределено);
	ПараметрыОплаты.Вставить("НомерЧекаЭТ",         Неопределено);
	ПараметрыОплаты.Вставить("СуммаОперации",      0);
	
	Возврат ПараметрыОплаты;
КонецФункции

#КонецОбласти 

#Область ПечатьЧека

// Функция проверяет возможность печати чека на фискальном регистраторе.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма документа
//
// Возвращаемое значение:
//	Булево - Признак возможности печати
//
Функция ПроверитьВозможностьПечатиЧека(Форма)
	ПечататьЧек = Истина;
	
	// Если объект не проведен или модифицирован - сообщим пользователю, что печать не возможна.
	Если СтрНачинаетсяС(Форма.ИмяФормы, "Документ.")
		И (НЕ Форма.Объект.Проведен
		ИЛИ Форма.Модифицированность) Тогда
		
		ПоказатьПредупреждение( , НСтр("ru = 'Операция возможна только после проведения документа'"));
		ПечататьЧек = Ложь;
		
	КонецЕсли;
	
	Возврат ПечататьЧек;
КонецФункции 

// Функция проверяет возможность печати чека на фискальном регистраторе.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма документа
//	ПараметрыОбработчика - Структура
//     - поля структуры:
//        - ТипОбъекта            - Строка - имя типа объекта с телом обработчика
//        - ИмяОбъекта            - Строка - имя объекта с телом обработчика
//
// Возвращаемое значение:
//	Булево - Признак возможности печати
//
Функция ПроверитьВозможностьПечатиЧеков(Форма, ПараметрыОбработчика = Неопределено)
	
	ПечататьЧек = ПроверитьВозможностьПечатиЧека(Форма);
	
	Если ПечататьЧек И ПараметрыОбработчика <> Неопределено Тогда
		
		ТекстПредупреждения = "";
		
		ОбъектСсылка = Форма.Объект.Ссылка;
		ПечатьФискальныхДокументовВызовСервера.ПроверитьВозможностьПечатиЧеков(ОбъектСсылка, ПараметрыОбработчика, ПечататьЧек, ТекстПредупреждения);
		
		Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение( , ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПечататьЧек;

КонецФункции

Процедура ВыборФискальногоУстройстваЗавершение(ИдентификаторУстройства, ПараметрыПечатиЧека) Экспорт
	Если НЕ ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		Результат = НовыйРезультатПечатиЧека();
		
		Результат.Успешно           = Ложь;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Фискальное устройство не выбрано.'");
		
		ВыполнитьОбработкуОповещения(ПараметрыПечатиЧека.ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
	Форма  = ПараметрыПечатиЧека.Форма;
	
	ПараметрыПечатиЧека.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	Результат = ПечатьФискальныхДокументовВызовСервера.ПроверитьНеобходимостьАктуализацииРасчетов(ПараметрыПечатиЧека.Ссылка, Форма.УникальныйИдентификатор);
	
	Если Результат = Неопределено Тогда
		ВыполнитьАктуализациюРасчетовЗавершение(Новый Структура("Статус", "Выполнено"), ПараметрыПечатиЧека);
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ПараметрыПечатиЧека.Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьАктуализациюРасчетовЗавершение", ПечатьФискальныхДокументовКлиент, ПараметрыПечатиЧека);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат.ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьАктуализациюРасчетовЗавершение(Значение, ПараметрыПечатиЧека) Экспорт
	Если ТипЗнч(Значение) <> Тип("Структура") 
		ИЛИ Значение.Статус <> "Выполнено" Тогда
		
		Результат = НовыйРезультатПечатиЧека();
		
		Результат.Успешно           = Ложь;
		
		Если ТипЗнч(Значение) = Тип("Структура") И Значение.Свойство("ПодробноеПредставлениеОшибки") Тогда
			Результат.СообщениеОбОшибке = Значение.ПодробноеПредставлениеОшибки;
		Иначе
			Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось актуализировать расчеты.'");
		КонецЕсли; 
		
		ВыполнитьОбработкуОповещения(ПараметрыПечатиЧека.ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(ПараметрыПечатиЧека.ИдентификаторУстройства);
	ТипУстройства = ?(ДанныеУстройства.Свойство("ТипОборудованияИмя"), ДанныеУстройства.ТипОборудованияИмя, "ККТ");
	
	ПараметрыПечатиЧека.Вставить("ТипУстройства", ТипУстройства);
	
	Если ТипУстройства = "ККТ" Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучитьПараметрыЗавершение", ЭтотОбъект, ПараметрыПечатиЧека);
		МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, ПараметрыПечатиЧека.Форма.УникальныйИдентификатор , ПараметрыПечатиЧека.ИдентификаторУстройства, Ложь);
	Иначе
		ПолучитьПараметрыЗавершение(Неопределено, ПараметрыПечатиЧека);
	КонецЕсли;
КонецПроцедуры 

Процедура ПолучитьПараметрыЗавершение(ПараметрыФискальногоУстройства, ДополнительныеПараметры) Экспорт
	Перем ОписаниеОшибки;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ПараметрыФискальногоУстройства =  Неопределено Тогда
		// Принтер чеков эмулирует все атрибуnы ФФД 1.1
		ДополнительныеПараметры.ВерсияФормата = ?(ДополнительныеПараметры.ТипУстройства = "ПринтерЧеков", "1.1.0.0", "1.0.0.0");
	ИначеЕсли НЕ ПараметрыФискальногоУстройства.Результат Тогда 
		ОписаниеОшибки = ПараметрыФискальногоУстройства.ОписаниеОшибки;
	Иначе
		Если НЕ ПечатьФискальныхДокументовВызовСервера.ОрганизацияККТСоотвествуетДокументу(ДополнительныеПараметры.Ссылка, ПараметрыФискальногоУстройства.ВыходныеПараметры.ОрганизацияИНН) Тогда
			Результат = НовыйРезультатПечатиЧека();
			
			Результат.Успешно           = Ложь;
			Результат.СообщениеОбОшибке = НСтр("ru = 'ККТ зарегистрирована на организацию отличную от организации документа.'");
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры.ВерсияФормата = ПолучитьВерсиюФФД(ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДФН, ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДККТ);
		
		ПараметрыФискальногоУстройства.ВыходныеПараметры.Свойство("АдресПроведенияРасчетов", ДополнительныеПараметры.АдресУстановкиККТ);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаГотовностиККТЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		МенеджерОборудованияКлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОписаниеОповещения, Форма.УникальныйИдентификатор, ДополнительныеПараметры.ИдентификаторУстройства, ДополнительныеПараметры.ТипУстройства);
		
		Возврат;
	КонецЕсли;
	
	ПроверкаГотовностиККТЗавершение(
		Новый Структура("Результат, ВыходныеПараметры, ОписаниеОшибки", НЕ ЗначениеЗаполнено(ОписаниеОшибки), Неопределено, ОписаниеОшибки), 
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаГотовностиККТЗавершение(РезультатПроверкиГотовности, ДополнительныеПараметры) Экспорт
	Перем ОписаниеОшибки, ВыходныеПараметры;
	
	Форма  = ДополнительныеПараметры.Форма;
	
	Если РезультатПроверкиГотовности.Результат Тогда
		РезультатПроверкиГотовности.Свойство("ВыходныеПараметры", ВыходныеПараметры);
		
		СтатусПоследнейСмены = КассовыеСменыВызовСервера.СтатусПоследнейСмены(ДополнительныеПараметры.ИдентификаторУстройства);
		Если НЕ (СтатусПоследнейСмены.Открыта И СтатусПоследнейСмены.Активна) Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Кассовая смена %1.'"), ?(СтатусПоследнейСмены.Открыта, "истекла", "не открыта"));
		КонецЕсли;
	Иначе
		ОписаниеОшибки = РезультатПроверкиГотовности.ОписаниеОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		
		Результат = НовыйРезультатПечатиЧека();
		
		Результат.Успешно           = Ложь;
		Результат.СообщениеОбОшибке = ТекстСообщения;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
		
	Иначе
		ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ", ПечатьФискальныхДокументовВызовСервера.ИдентификаторУстройстваЭТ(ДополнительныеПараметры.Ссылка));
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторУстройстваЭТ) Тогда
			ДополнительныеПараметры.Форма.Доступность = Ложь; // Блокировка интерфейса пользователя.
			
			ОповещениеПриЗавершенииОперации = Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
			
			Объект = Форма.Объект;
			ДополнительныеПараметры.ПараметрыОплаты.Вставить("СуммаОперации", Объект.СуммаДокумента);
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю") Тогда
				ПараметрыОперации.ТипТранзакции  = "AuthorizeRefund";
				
				Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
					ПечатьФискальныхДокументовВызовСервера.ЗаполнитьРеквизитыОперацииОснование(Объект.ДокументОснование, ДополнительныеПараметры.ПараметрыОплаты);
				КонецЕсли; 
				
				ПараметрыОперации.СсылочныйНомер = ДополнительныеПараметры.ПараметрыОплаты.СсылочныйНомер;
				ПараметрыОперации.НомерКарты     = ДополнительныеПараметры.ПараметрыОплаты.НомерПлатежнойКарты;
				ПараметрыОперации.НомерЧекаЭТ    = ДополнительныеПараметры.ПараметрыОплаты.НомерЧекаЭТ;
			Иначе
				ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
			КонецЕсли;
			
			ПараметрыОперации.СуммаОперации  = Объект.СуммаДокумента;
			
			Если ВыходныеПараметры <> Неопределено Тогда
				
				ПараметрыОперации.НомерЧека = Формат(ВыходныеПараметры[1]+1 + 1, "ЧГ=0");
			Иначе
				
				ПараметрыОперации.НомерЧека = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, Истина, Истина);
			КонецЕсли; 
			
			МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОповещениеПриЗавершенииОперации, Форма.УникальныйИдентификатор, 
				ДополнительныеПараметры.ИдентификаторУстройстваЭТ, ДополнительныеПараметры.ИдентификаторУстройства, ПараметрыОперации);
		Иначе
			ОперацияПоПлатежнойКартеЗавершение(Новый Структура("Результат", Истина), ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры 

Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Форма  = ДополнительныеПараметры.Форма;
	
	Форма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ПараметрыОплаты, РезультатВыполнения);
		
		// Печатаем фискальный чек
		Если ДополнительныеПараметры.ИдентификаторУстройства <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ссылка",                  ДополнительныеПараметры.Ссылка);
			ПараметрыФормы.Вставить("ИдентификаторУстройства", ДополнительныеПараметры.ИдентификаторУстройства);
			ПараметрыФормы.Вставить("ВерсияФормата",           ДополнительныеПараметры.ВерсияФормата);
			ПараметрыФормы.Вставить("АдресУстановкиККТ",       ДополнительныеПараметры.АдресУстановкиККТ);
			ПараметрыФормы.Вставить("ПараметрыОбработчика",    ДополнительныеПараметры.ПараметрыОбработчика);
			
			Оповещение = Новый ОписаниеОповещения("ПечатьЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ОткрытьФорму("Обработка.ПечатьЧека.Форма.Форма", ПараметрыФормы, ДополнительныеПараметры.Форма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ПечатьЧекаЗавершение(Новый Структура("Результат", Истина), ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПечатьЧекаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Результат = НовыйРезультатПечатиЧека();
	
	Форма  = ДополнительныеПараметры.Форма;
	
	
	Если РезультатВыполнения = Неопределено Тогда
		
		Результат.Успешно           = Ложь;
		Результат.СообщениеОбОшибке = НСТр("ru = 'Не удалось напечать чек'");
		
	ИначеЕсли РезультатВыполнения.Результат Тогда
		
		Результат.Успешно = Истина;
		
		Если РезультатВыполнения.Свойство("ВыходныеПараметры") Тогда
			Результат.НомерЧекаККМ    = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Результат.НомерЧекаККМ    = "";
		КонецЕсли;
		
		Результат.ПараметрыОплаты = ДополнительныеПараметры.ПараметрыОплаты;
	
	Иначе
		
		// Откатим транзакцию по карте если что то пошло не так
		Если ДополнительныеПараметры.Свойство("ИдентификаторУстройстваЭТ") 
			И ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторУстройстваЭТ) Тогда
			
			ОповещениеПриЗавершенииОперации = Новый ОписаниеОповещения("ОтменаАвторизацииЗавершение", ЭтотОбъект);
			
			ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
			
			ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
			
			ПараметрыОперации.СсылочныйНомер = ДополнительныеПараметры.ПараметрыОплаты.СсылочныйНомер;
			ПараметрыОперации.НомерКарты     = ДополнительныеПараметры.ПараметрыОплаты.НомерПлатежнойКарты;
			ПараметрыОперации.НомерЧекаЭТ    = ДополнительныеПараметры.ПараметрыОплаты.НомерЧекаЭТ;
			ПараметрыОперации.СуммаОперации  = ДополнительныеПараметры.ПараметрыОплаты.СуммаДокумента;
			
			МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОповещениеПриЗавершенииОперации, Форма.УникальныйИдентификатор, 
				ДополнительныеПараметры.ИдентификаторУстройстваЭТ, ДополнительныеПараметры.ИдентификаторУстройства, ПараметрыОперации);
		КонецЕсли; 
		
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
			
		Результат.Успешно           = Ложь;
		Результат.СообщениеОбОшибке = ТекстСообщения;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
	
КонецПроцедуры

Процедура ОтменаАвторизацииЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции отмены авторизации произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДополнительныеПараметры.Форма.Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#Область ГрупповаяПечатьЧеков

Процедура ГрупповаяПечатьЧеков(Параметры, Форма)

	ПараметрыФормированияЧека = НовыйПараметрыФормированияЧека();
	ЗаполнитьЗначенияСвойств(ПараметрыФормированияЧека, Параметры);
	
	ДлительнаяОперация = ПечатьФискальныхДокументовВызовСервера.ГрупповаяПечатьЧеков(ПараметрыФормированияЧека, Форма.УникальныйИдентификатор);
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьОшибкуФормированияГруппыЧеков(ДлительнаяОперация);
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		
		Обработчик = Новый ОписаниеОповещения("Подключаемый_ГрупповаяПечатьЧеков", ЭтотОбъект, Параметры);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_ГрупповаяПечатьЧеков(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьОшибкуФормированияГруппыЧеков(ДлительнаяОперация);
	Иначе
		ОжиданиеОтвета = Ложь;
		Если ОжиданиеОтвета Тогда
			ПодключитьОбработчикОжидания("ГрупповаяПечатьЧеков", 0.1, Истина);
		Иначе
			ПоказатьРезультатФормирвоанияГруппыЧеков(ДополнительныеПараметры.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйПараметрыФормированияЧека()
	
	ПараметрыЧека = Новый Структура;
	ПараметрыЧека.Вставить("Ссылка");
	ПараметрыЧека.Вставить("ИдентификаторУстройства");
	ПараметрыЧека.Вставить("ВерсияФормата");
	ПараметрыЧека.Вставить("АдресУстановкиККТ");
	ПараметрыЧека.Вставить("ПараметрыОбработчика");
	
	Возврат ПараметрыЧека;
	
КонецФункции

Процедура ПоказатьОшибкуФормированияГруппыЧеков(ДлительнаяОперация)
	
	Текст = НСтр("ru = 'Ошибка при подготовке группы чеков:'");
	Текст = Текст + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
	ВызватьИсключение Текст;
	
КонецПроцедуры

Процедура ПоказатьРезультатФормирвоанияГруппыЧеков(ОбъектСсылка)
	
	ЗначенияОтборов = Новый Структура("ДокументОснование",ОбъектСсылка);
	ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
	
	ОткрытьФорму("РегистрСведений.ОчередьЧековККТ.ФормаСписка",
		ПараметрыФормы,
		,
		ОбъектСсылка,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры


#КонецОбласти

#КонецОбласти
