
////////////////////////////////////////////////////////////////////////////////
// Настройки учета (учетная политика, настройки налогов и взносов)
// Общие серверные методы чтения  и записи настроек учета
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает значения ресурса регистра учетной политики за заданный период
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра, для которого требуется получить значения
//  ИмяРесурса  - Строка - имя ресурса, значения которого требуется получить
//  Организация - СправочникСсылка.Организации - организация,
//                 для которой требуется получить настройки
//  НачалоПериода, ОкончаниеПериода - Дата
// 
// Возвращаемое значение - Массив - значения запрошенного ресурса
//
Функция ЗначенияРесурсаУчетнойПолитикиЗаПериод(ИмяРегистра, ИмяРесурса, Организация, НачалоПериода, ОкончаниеПериода) Экспорт
	
	СледующийМесяц = НачалоМесяца(ДобавитьМесяц(НачалоПериода, 1));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("НачалоПериода",    НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("СледующийМесяц",   СледующийМесяц);
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(ОкончаниеПериода));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложенияСрезПоследних.СистемаНалогообложения КАК Значение
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК НастройкиСистемыНалогообложенияСрезПоследних";
	
	Если СледующийМесяц < КонецМесяца(ОкончаниеПериода) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|"+
		"ВЫБРАТЬ
		|	НастройкиСистемыНалогообложения.СистемаНалогообложения
		|ИЗ
		|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
		|ГДЕ
		|	НастройкиСистемыНалогообложения.Организация = &Организация
		|	И НастройкиСистемыНалогообложения.Период МЕЖДУ &СледующийМесяц И &ОкончаниеПериода";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НастройкиСистемыНалогообложения", ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СистемаНалогообложения", ИмяРесурса);
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
	
	Возврат Результат;
	
КонецФункции

// Возвращает ключ действующей настройки учетной политики на заданную дату
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра, для которого требуется получить значения
//  Организация - СправочникСсылка.Организации - организация,
//                 для которой требуется получить настройки
//  Период      - Дата или Неопределено
// 
// Возвращаемые значения:
//  Неопределено         - когда не задана организация или нет записей в регистре
//  Ключ записи регистра - запись, соответствующая условию
//
Функция КлючЗаписиДействующейУчетнойПолитики(ИмяРегистра, Организация, Период = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ?(Период = Неопределено, ТекущаяДатаСеанса(), Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УчетнаяПолитикаСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаСрезПоследних";
	
	Если ИмяРегистра <> "УчетнаяПолитика" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УчетнаяПолитика", ИмяРегистра);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗначенияКлюча = Новый Структура;
		ЗначенияКлюча.Вставить("Организация", Организация);
		ЗначенияКлюча.Вставить("Период", Выборка.Период);
		
		Возврат РегистрыСведений[ИмяРегистра].СоздатьКлючЗаписи(ЗначенияКлюча);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Процедура - реализация метода ПередЗаписью набора записей регистра сведений
// Вызывается перед записью набора настроек учета
// Параметры:
//  НаборЗаписей - набор записей регистра сведений.
//  Отказ        - Булево - признак отказа от записи набора регистра сведений.
//  Замещение    - Булево - режим записи набора.
//
Процедура ПередЗаписью(НаборЗаписей, Отказ, Замещение) Экспорт
	
	ДополнительныеСвойства = НаборЗаписей.ДополнительныеСвойства;
	
	ДополнительныеСвойства.Вставить("ВестиУчетПоПодразделениям", БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям());
	ДополнительныеСвойства.Вставить("ГоловныеОрганизации", Новый Массив);
	
	// При записи пустого набора по головной организации должны очищаться записи по ОП этой организации.
	// Поэтому ОП для организации из отбора набора записей получаем независимо от того, есть ли строки в наборе
	Если НаборЗаписей.Отбор.Организация.Использование Тогда
		ЭтоОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			НаборЗаписей.Отбор.Организация.Значение, "ОбособленноеПодразделение");
		Если ЭтоОбособленноеПодразделение = Ложь Тогда // Возможно значение Неопределено при удалении организации
			ДополнительныеСвойства.ГоловныеОрганизации.Добавить(НаборЗаписей.Отбор.Организация.Значение);
		КонецЕсли;
	КонецЕсли;
	
	ИмяРегистра = НаборЗаписей.Метаданные().Имя;
	
	Если ИмяРегистра = "УчетнаяПолитика"
		ИЛИ ИмяРегистра = "НастройкиУчетаНДС"
		ИЛИ ИмяРегистра = "НастройкиУчетаСтраховыхВзносовИП" Тогда
		Для каждого Запись Из НаборЗаписей Цикл
			РегистрыСведений[ИмяРегистра].Подключаемый_ПередЗаписью(Запись);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - реализация метода ПриЗаписи набора записей регистра сведений
// Вызывается при записи набора настроек учета
// Параметры:
//  НаборЗаписей - набор записей регистра сведений.
//  Отказ        - Булево - признак отказа от записи набора регистра сведений.
//  Замещение    - Булево - режим записи набора.
//
Процедура ПриЗаписи(НаборЗаписей, Отказ, Замещение) Экспорт
	
	Если НаборЗаписей.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства = НаборЗаписей.ДополнительныеСвойства;
	
	ИмяРегистра = НаборЗаписей.Метаданные().Имя;
	
	// Перенос настроек головной организации в обособленные подразделения
	//
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДополнительныеСвойства.ВестиУчетПоПодразделениям
		И ДополнительныеСвойства.ГоловныеОрганизации.Количество() > 0 Тогда
		
		ОбособленныеПодразделенияОрганизаций = Новый Соответствие;
		Для каждого ГоловнаяОрганизация Из ДополнительныеСвойства.ГоловныеОрганизации Цикл
			СписокОП = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
			ОбособленныеПодразделенияОрганизаций.Вставить(ГоловнаяОрганизация, СписокОП);
		КонецЦикла;
		
		ТаблицаЗаписей = НаборЗаписей.Выгрузить();
		
		Для каждого ГоловнаяОрганизация Из ДополнительныеСвойства.ГоловныеОрганизации Цикл
			
			Если ОбособленныеПодразделенияОрганизаций[ГоловнаяОрганизация].Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписиПоОрганизации = ТаблицаЗаписей.Скопировать(Новый Структура("Организация", ГоловнаяОрганизация));
			
			Для каждого ЭлементСпискаПодразделений Из ОбособленныеПодразделенияОрганизаций[ГоловнаяОрганизация] Цикл
				
				Подразделение = ЭлементСпискаПодразделений.Значение;
				ЗаписиПоОрганизации.ЗаполнитьЗначения(Подразделение, "Организация");
				
				НаборЗаписейПодразделения = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
				
				НаборЗаписейПодразделения.Отбор.Организация.Установить(Подразделение);
				Если НаборЗаписей.Отбор.Период.Использование Тогда
					НаборЗаписейПодразделения.Отбор.Период.Установить(НаборЗаписей.Отбор.Период.Значение);
				КонецЕсли;
				
				НаборЗаписейПодразделения.Загрузить(ЗаписиПоОрганизации);
				НаборЗаписейПодразделения.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
				НаборЗаписейПодразделения.Записать(Истина);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяРегистра = "НастройкиСистемыНалогообложения" Тогда
		
		Для Каждого Запись ИЗ НаборЗаписей Цикл
			СинхронизацияНастроекУчета(Запись, ИмяРегистра);
		КонецЦикла;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			ТребуетсяСоздатьПоставляемыеВидыНалогов = Истина;
			Если ДополнительныеСвойства.Свойство("ТребуетсяСоздатьПоставляемыеВидыНалогов") Тогда
				ТребуетсяСоздатьПоставляемыеВидыНалогов = ДополнительныеСвойства.ТребуетсяСоздатьПоставляемыеВидыНалогов;
			КонецЕсли;
			РегистрыСведений.НастройкиСистемыНалогообложения.ОбновитьИспользуемыеСистемыНалогообложения(ТребуетсяСоздатьПоставляемыеВидыНалогов);
			
			Если НаборЗаписей.ВыгрузитьКолонку("ПрименяетсяУСНДоходыМинусРасходы").Найти(Истина) <> Неопределено
				ИЛИ НаборЗаписей.ВыгрузитьКолонку("ПлательщикНДФЛ").Найти(Истина) <> Неопределено Тогда
				ВключитьПартионныйУчет();
			КонецЕсли;
			
			Если НаборЗаписей.ВыгрузитьКолонку("ПрименяетсяУСНДоходыМинусРасходы").Найти(Истина) <> Неопределено
				ИЛИ НаборЗаписей.ВыгрузитьКолонку("ПлательщикНДФЛ").Найти(Истина) <> Неопределено
				ИЛИ НаборЗаписей.ВыгрузитьКолонку("ПлательщикНалогаНаПрибыль").Найти(Истина) <> Неопределено Тогда
				ВключитьДокументыПоступленияРеализации();
			КонецЕсли;
			
			Организации = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НаборЗаписей.ВыгрузитьКолонку("Организация"));
			Для Каждого Организация Из Организации Цикл
				РегистрыСведений.АктуальностьКомплектаНулевойОтчетности.УстановитьАктуальность(Организация, Ложь);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРегистра = "УчетнаяПолитика" Тогда
		
		Для Каждого Запись ИЗ НаборЗаписей Цикл
			СинхронизацияНастроекУчета(Запись, ИмяРегистра);
		КонецЦикла;
		
		Если НаборЗаписей.ВыгрузитьКолонку("СпособОценкиМПЗ").Найти(Перечисления.СпособыОценки.ФИФО) <> Неопределено Тогда
			ВключитьПартионныйУчет();
		КонецЕсли;
		
		НалогНаПрибыльБухгалтерскийУчет.ОбновитьКонстантыГлобальногоИнтерфейса();

	ИначеЕсли ИмяРегистра = "НастройкиУчетаНДС" Тогда

		ВключенныеНастройки = Новый Структура;
		
		Для Каждого Запись ИЗ НаборЗаписей Цикл
			
			Если Запись.РаздельныйУчетНДСДо2014Года Тогда
				ВключенныеНастройки.Вставить("РаздельныйУчетНДСДо2014Года", Истина);
			КонецЕсли;
			
			Если Запись.СложныйУчетНДС Тогда
				ВключенныеНастройки.Вставить("СложныйУчетНДС", Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВключенныеНастройки.Свойство("РаздельныйУчетНДСДо2014Года") Тогда
			КлассификаторыДоходовРасходов.ОбеспечитьФункциональность(Справочники.СтатьиЗатрат, "РаздельныйУчетНДСДо2014Года");
		КонецЕсли;
		
		Если ВключенныеНастройки.Свойство("СложныйУчетНДС") Тогда
			ВключитьИспользуетсяРаздельныйУчетНДС();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - реализация метода ПодготовитьФормуНаСервере формы записи регистра сведений
// Вызывается при открытии записи настроек учета
// Параметры:
//  Форма  - Управляемая форма (форма записи регистра)
//  Запись - запись регистра сведений.
//
Процедура ПодготовитьФормуНаСервере(Форма, Запись) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Запись.Организация)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Организация, "ОбособленноеПодразделение") Тогда
		Форма.ТолькоПросмотр = Истина;
		Элементы.Организация.РежимВыбораИзСписка     = Ложь;
		Элементы.Организация.КнопкаВыпадающегоСписка = Ложь;
		Элементы.Организация.КнопкаВыбора            = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Присваивает ресурсу регистра значение по умолчанию, в случае,
// если в данных заполнения заполнение реквизита не предусмотрено
// 
// Параметры:
//  Запись              - запись регистра сведений.
//  ДанныеЗаполнения    - Структура - содержит данные для заполнения ресурсов регистра,
//                      где имя ключа соответствует имени ресурса.
//  ИмяРесурса          - Строка - имя ресурса, оторому присваивается значение.
//  ЗначениеПоУмолчанию - Произвольный - значение по умолчанию, соответствующее типу ресурса.
//
Процедура УстановитьЗначениеПоУмолчанию(Запись, ДанныеЗаполнения, ИмяРесурса, ЗначениеПоУмолчанию) Экспорт
	
	Если Не ДанныеЗаполнения.Свойство(ИмяРесурса, Запись[ИмяРесурса]) Тогда
		Запись[ИмяРесурса] = ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

// Создает записи регистров настроек учета (бухгалтерского и налогового) по умолчанию.
// Параметры:
//  ДанныеЗаполнения                        - Структура - содержит данные для заполнения ресурсов регистров,
//                                          где имя ключа соответствует имени ресурса.
//  ТребуетсяСоздатьПоставляемыеВидыНалогов - Булево - признак необходимости создать в справочнике налогов соответствующие записи.
//
Процедура УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеЗаполнения, ТребуетсяСоздатьПоставляемыеВидыНалогов = Ложь) Экспорт
	
	Перем Организация, Период, СистемаНалогообложения;
	
	Если НЕ ДанныеЗаполнения.Свойство("Организация", Организация) Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоОбособленноеПодразделение(Организация) Тогда
		Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Свойство("Период", Период) Тогда
		// Если явно период создания учетной политики не задан, 
		// то создаем по умолчанию, начиная с прошлого года, но не ранее, чем начало года даты регистрации.
		ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
		НачалоПрошлогоГода = НачалоГода(НачалоГода(ТекущаяДатаСеанса()) - 1);
		
		Если ЗначениеЗаполнено(ДатаРегистрации) Тогда
			Период = Макс(НачалоПрошлогоГода, НачалоГода(ДатаРегистрации));
		Иначе
			Период = НачалоПрошлогоГода;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("СистемаНалогообложения", СистемаНалогообложения) Тогда
		ДатаНачалаПримененияСистемыНалогообложения = Перечисления.СистемыНалогообложения.ДатаНачалаПрименения(СистемаНалогообложения);
		Если ДатаНачалаПримененияСистемыНалогообложения <> Неопределено Тогда
			Период = Макс(Период, ДатаНачалаПримененияСистемыНалогообложения);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Организация", Организация);
	ДанныеЗаполнения.Вставить("Период",      Период);
	
	СоздатьНастройкиУчетнойПолитикиПоУмолчанию(ДанныеЗаполнения);
	
	РегистрыСведений.НастройкиСистемыНалогообложения.ОбновитьИспользуемыеСистемыНалогообложения(ТребуетсяСоздатьПоставляемыеВидыНалогов);
	
КонецПроцедуры

// Создает настройки учета филиала копированием настроек головной организации
//
// Параметры:
//  Организация - СправочникСсылка.Организации - подразделение, выделенное на отдельный баланс (филиал).
//
Процедура ЗаписатьУчетнуюПолитикуОбособленногоПодразделения(Организация) Экспорт
	
	Если НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоОбособленноеПодразделение(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьЗаписиУчетнойПолитикиДляОбособленногоПодразделения("НастройкиСистемыНалогообложения", Организация);
	СкопироватьЗаписиУчетнойПолитикиДляОбособленногоПодразделения("УчетнаяПолитика",                 Организация);
	СкопироватьЗаписиУчетнойПолитикиДляОбособленногоПодразделения("НастройкиУчетаНалогаНаПрибыль",   Организация);
	СкопироватьЗаписиУчетнойПолитикиДляОбособленногоПодразделения("НастройкиУчетаУСН",               Организация);
	СкопироватьЗаписиУчетнойПолитикиДляОбособленногоПодразделения("НастройкиУчетаНДС",               Организация);
	
КонецПроцедуры

// Копирует все настройки учета на новую дату
//
// Параметры:
//  Организация     - СправочникСсылка.Организации.
//  ДатаНачалаУчета - Дата - дата, на которую следует прочитать данные.
//  ДатаНастройки   - Дата - дата, на которую создаются новые записи.
//
Процедура СоздатьЗаписьУчетнойПолитикиНаНовуюДату(Организация, ДатаНачалаУчета, ДатаНастройки) Экспорт
	
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("УчетнаяПолитика",                  Организация, ДатаНачалаУчета, ДатаНастройки);
	СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиСистемыНалогообложения",  Организация, ДатаНачалаУчета, ДатаНастройки);
	СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиУчетаУСН",                Организация, ДатаНачалаУчета, ДатаНастройки);
	СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиУчетаНДС",                Организация, ДатаНачалаУчета, ДатаНастройки);
	
	Если ЭтоЮрЛицо Тогда
		СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиУчетаНалогаНаПрибыль",    Организация, ДатаНачалаУчета, ДатаНастройки);
	Иначе
		СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиУчетаНДФЛ",               Организация, ДатаНачалаУчета, ДатаНастройки);
		СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиУчетаСтраховыхВзносовИП", Организация, ДатаНачалаУчета, ДатаНастройки);
		СкопироватьПараметрыУчетнойПолитикиНаНовуюДату(
			"НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС", Организация, ДатаНачалаУчета, ДатаНастройки);
	КонецЕсли;
	
КонецПроцедуры

// Функция - агрегатор сведений о настройках налогового учета на определенную дату
//
// Параметры:
//  Период       - Дата - дата чтения настроек.
//  Организация  - СправочникСсылка.Организации - организация,
//                 для которой требуется получить настройки
// 
// Возвращаемые значения:
//  Неопределено - если нет ни одной записи настроек учета
//  ТаблицаЗначений - если налоговый учет настроен.
//   Содержит колонки:
//   *Период                                  - Дата - дата настройки налогового учета.
//   *Организация                             - СправочникСсылка.Организации.
//   *СистемаНалогообложения                  - ПеречислениеСсылка.СистемыНалогообложения - система налогообложения на дату
//   *ДатаПереходаНаУСН                       - Дата - дата начала применения УСН.
//   *УведомлениеНомер                        - Строка - номер уведомления о переходе на УСН.
//   *УведомлениеДата                         - Дата - дата уведомления о переходе на УСН.
//   *ПрименяетсяУСН                          - Булево - признак применения УСН.
//   *ПлательщикНалогаНаПрибыль               - Булево - признак плательщика налога на прибыль.
//   *ПлательщикНДФЛ                          - Булево - признак плательщика НДФЛ (предприниматель на общем режиме).
//   *ПлательщикЕНВД                          - Булево - признак плательщика ЕНВД.
//   *ПрименяетсяУСНПатент                    - Булево - признак использования патентной системы налогообложения.
//   *ПрименяетсяОсобыйПорядокНалогообложения - Булево - признак использования только ЕНВД или Патента.
//   *ПрименяетсяУСНДоходы                    - Булево - признак использования УСН с объектом налогообложения "Доходы".
//   *ПрименяетсяУСНДоходыМинусРасходы        - Булево - признак использования УСН с объектом налогообложения "Доходы минус расходы".
//   *ОбъектНалогообложенияУСН                - ПеречислениеСсылка.ОбъектыНалогообложенияПоУСН - объект налогообложения УСН.
//   *ПлательщикНДС                           - Булево - признак плательщика НДС.
//   *ПлательщикТорговогоСбора                - Булево - признак плательщика торгового сбора.
//   *СтавкаНалога                            - Число - ставка налога УСН.
Функция УчетнаяПолитикаНалоговыйУчет(Период, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложенияСрезПоследних.Период,
	|	НастройкиСистемыНалогообложенияСрезПоследних.Организация,
	|	НастройкиСистемыНалогообложенияСрезПоследних.СистемаНалогообложения,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ДатаПереходаНаУСН,
	|	НастройкиСистемыНалогообложенияСрезПоследних.УведомлениеНомер,
	|	НастройкиСистемыНалогообложенияСрезПоследних.УведомлениеДата,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСН,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикНалогаНаПрибыль,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикНДФЛ,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикЕНВД,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНПатент,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяОсобыйПорядокНалогообложения,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходыМинусРасходы,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ОбъектНалогообложенияУСН,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикНДС,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикТорговогоСбора,
	|	ЕСТЬNULL(НастройкиУчетаУСНСрезПоследних.СтавкаНалога, 0) КАК СтавкаНалога
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&Период, Организация В (&Организация)) КАК НастройкиСистемыНалогообложенияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН.СрезПоследних(&Период, Организация В (&Организация)) КАК НастройкиУчетаУСНСрезПоследних
	|		ПО (НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСН)
	|			И НастройкиСистемыНалогообложенияСрезПоследних.Организация = НастройкиУчетаУСНСрезПоследних.Организация";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить();
	КонецЕсли;
	
КонецФункции

// Функция формирует структуру с ключами соответствующими всем основным настройкам учетной политики налогового учета
//
// Параметры:
//  Нет
//               
// Возвращаемые значения:
//  Структура
//   Содержит ключи:
//   *СистемаНалогообложения                  - ПеречислениеСсылка.СистемыНалогообложения - система налогообложения на дату
//   *ДатаПереходаНаУСН                       - Дата - дата начала применения УСН.
//   *УведомлениеНомер                        - Строка - номер уведомления о переходе на УСН.
//   *УведомлениеДата                         - Дата - дата уведомления о переходе на УСН.
//   *ПрименяетсяУСН                          - Булево - признак применения УСН.
//   *ПлательщикНалогаНаПрибыль               - Булево - признак плательщика налога на прибыль.
//   *ПлательщикНДФЛ                          - Булево - признак плательщика НДФЛ (предприниматель на общем режиме).
//   *ПлательщикЕНВД                          - Булево - признак плательщика ЕНВД.
//   *ПрименяетсяУСНПатент                    - Булево - признак использования патентной системы налогообложения.
//   *ПрименяетсяОсобыйПорядокНалогообложения - Булево - признак использования только ЕНВД или Патента.
//   *ПрименяетсяУСНДоходы                    - Булево - признак использования УСН с объектом налогообложения "Доходы".
//   *ПрименяетсяУСНДоходыМинусРасходы        - Булево - признак использования УСН с объектом налогообложения "Доходы минус расходы".
//   *ОбъектНалогообложенияУСН                - ПеречислениеСсылка.ОбъектыНалогообложенияПоУСН - объект налогообложения УСН.
//   *ПлательщикНДС                           - Булево - признак плательщика НДС.
//   *ПлательщикТорговогоСбора                - Булево - признак плательщика торгового сбора.
//
Функция ОписаниеСтруктурыУчетнойПолитики() Экспорт
	
	ПараметрыУчетнойПолитики = Новый Структура;
	ПараметрыУчетнойПолитики.Вставить("СистемаНалогообложения",                  Перечисления.СистемыНалогообложения.ПустаяСсылка());
	ПараметрыУчетнойПолитики.Вставить("ДатаПереходаНаУСН",                       Дата(1,1,1));
	ПараметрыУчетнойПолитики.Вставить("УведомлениеНомер",                        "");
	ПараметрыУчетнойПолитики.Вставить("УведомлениеДата",                         "");
	ПараметрыУчетнойПолитики.Вставить("ПрименяетсяУСН",                          Ложь);
	ПараметрыУчетнойПолитики.Вставить("ПлательщикНалогаНаПрибыль",               Ложь);
	ПараметрыУчетнойПолитики.Вставить("ПлательщикНДФЛ",                          Ложь);
	ПараметрыУчетнойПолитики.Вставить("ПлательщикЕНВД",                          Ложь);
	ПараметрыУчетнойПолитики.Вставить("ПрименяетсяУСНПатент",                    Ложь);
	ПараметрыУчетнойПолитики.Вставить("ПрименяетсяОсобыйПорядокНалогообложения", Ложь);
	ПараметрыУчетнойПолитики.Вставить("ПрименяетсяУСНДоходы",                    Ложь);
	ПараметрыУчетнойПолитики.Вставить("ПрименяетсяУСНДоходыМинусРасходы",        Ложь);
	ПараметрыУчетнойПолитики.Вставить("ОбъектНалогообложенияУСН",                Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка());
	ПараметрыУчетнойПолитики.Вставить("ПлательщикНДС",                           Ложь);
	ПараметрыУчетнойПолитики.Вставить("ПлательщикТорговогоСбора",                Ложь);
	ПараметрыУчетнойПолитики.Вставить("СпособОценкиМПЗ",                         Перечисления.СпособыОценки.ПустаяСсылка());
	
	Возврат ПараметрыУчетнойПолитики;
	
КонецФункции

// Процедура отвечает за включение партионного учета на плане счетов
//
Процедура ВключитьПартионныйУчет() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыУчета = ОбщегоНазначенияБП.ОпределитьПараметрыУчета();
	Если НЕ ПараметрыУчета.ВестиПартионныйУчет Тогда
		ПараметрыУчета.ВестиПартионныйУчет = Истина;
		ОбщегоНазначенияБП.ПрименитьПараметрыУчета(ПараметрыУчета);
	КонецЕсли;
	
КонецПроцедуры

// Процедура отвечает за включение дополнительной аналитики учета на плане счетов
//
Процедура ВключитьРасширеннуюАналитику(РасширеннаяАналитика) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УдалитьУжеВключенныеРазрезыАналитики(РасширеннаяАналитика);
	Если РасширеннаяАналитика.Количество() > 0 Тогда
		ВключитьАналитику(РасширеннаяАналитика);
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет дату окончания действия записи настройки учета
//
// Параметры:
//  Период       - Дата - дата чтения настроек.
//  Организация  - СправочникСсылка.Организации - организация,
//                 для которой требуется получить настройки
// 
// Возвращаемые значения:
//  Дата - дата окончания действия записи
//
Функция НайтиДатуОкончанияДействия(Знач Период, Знач Организация, ИмяРегистра) Экспорт

	ДатаОкончания = Период;

	НастройкаУчетнаяПолитикиВсехОрганизаций = ОбщегоНазначенияБПВызовСервера.ЗаполнениеНастройкиУчетнойПолитики(ИмяРегистра);
	
	НастройкаУчетнойПолитикиОрганизации = НастройкаУчетнаяПолитикиВсехОрганизаций.Строки.Найти(Организация, "Организация");
	Если НастройкаУчетнойПолитикиОрганизации <> Неопределено Тогда
		Для каждого СтрокаУчетнойПолитики Из НастройкаУчетнойПолитикиОрганизации.Строки Цикл
			Если СтрокаУчетнойПолитики.Период = Период Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаУчетнойПолитики.Период > ДатаОкончания Тогда
				ДатаОкончания = СтрокаУчетнойПолитики.Период - 1;
				Возврат ДатаОкончания;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если Период > ТекущаяДата Тогда
		Возврат КонецГода(Период);
	Иначе
		Если ДатаОкончания = Период Тогда
			Возврат КонецГода(ТекущаяДата);
		Иначе
			Возврат КонецГода(ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Процедура считывает записи учетной политки на определенную дату и создает их копию на новую дату
//
// Параметры:
//  ИмяРегистра          - Строка - имя регистра копируемой настройки.
//  Организация          - СправочникСсылка.Организации - организация,
//                         для которой требуется скопировать настройки
//  ДатаИсточника        - Дата - дата чтения настроек.
//  ДатаПриемника        - Дата - дата записи настроек.
//  КорректируемыеДанные - Структура - содержит отдельные значения, которые следует заменить при копировании
//     Ключ - имя реквизита/ресурса,
//     Значение - имя реквизита/ресурса.
// 
Процедура СкопироватьПараметрыУчетнойПолитикиНаНовуюДату(ИмяРегистра, Организация, ДатаИсточника, ДатаПриемника, КорректируемыеДанные = Неопределено) Экспорт
	
	КлючЗаписи = КлючЗаписиДействующейУчетнойПолитики(ИмяРегистра, Организация, ДатаИсточника);
	Если КлючЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекущаяУчетнаяПолитика = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	ТекущаяУчетнаяПолитика.Организация = Организация;
	ТекущаяУчетнаяПолитика.Период      = КлючЗаписи.Период;
	ТекущаяУчетнаяПолитика.Прочитать();
	НоваяУчетнаяПолитика = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	НоваяУчетнаяПолитика.Прочитать();
	ЗаполнитьЗначенияСвойств(НоваяУчетнаяПолитика, ТекущаяУчетнаяПолитика);
	НоваяУчетнаяПолитика.Период = ДатаПриемника;
	Если КорректируемыеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяУчетнаяПолитика, КорректируемыеДанные);
	КонецЕсли;
	НоваяУчетнаяПолитика.Записать();
	
КонецПроцедуры

Процедура ВключитьДокументыПоступленияРеализации()

	УстановитьПривилегированныйРежим(Истина);
	Если НЕ Константы.ИспользоватьДокументыПоступления.Получить() Тогда
		Константы.ИспользоватьДокументыПоступления.Установить(Истина);
	КонецЕсли;
	Если НЕ Константы.ИспользоватьДокументыРеализации.Получить() Тогда
		Константы.ИспользоватьДокументыРеализации.Установить(Истина);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Вызывается после обновления используемых систем налогообложения в регистре "НастройкиСистемыНалогообложения".
//
Процедура ПослеОбновленияИспользуемыхСистемНалогообложения() Экспорт
	
	УстановитьИспользуетсяКассоваяКнига();
	
КонецПроцедуры

// Вызывается при записи новой организации.
// Используется для включения настроек учета.
// 
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на создаваемую новую организацию
//
Процедура ПриЗаписиНовойОрганизации(Организация) Экспорт
	
	НастройкиУчетаПереопределяемый.ПриЗаписиНовойОрганизации(Организация);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВключитьИспользуетсяРаздельныйУчетНДС()

	УстановитьПривилегированныйРежим(Истина);

	Если НЕ Константы.ИспользуетсяРаздельныйУчетНДС.Получить() Тогда
		Константы.ИспользуетсяРаздельныйУчетНДС.Установить(Истина);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура СинхронизацияНастроекУчета(ТекущаяЗапись, ИмяРегистра)
	
	Организация         = ТекущаяЗапись.Организация;
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	ЭтоЮрЛицо           = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	Период           = НачалоМесяца(ТекущаяЗапись.Период);
	ДанныеЗаполнения = Новый Структура("Период, Организация", Период, Организация);
	
	Если ИмяРегистра = "НастройкиСистемыНалогообложения" Тогда
		
		// создаем настройку учетной политики
		КлючЗаписиНастройки = КлючЗаписиДействующейУчетнойПолитики("УчетнаяПолитика", Организация, Период);
		Если КлючЗаписиНастройки = Неопределено Тогда
			
			Запись = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
			НастройкиУчетнойПолитики = РегистрыСведений.УчетнаяПолитика.СрезПервых(Период, Новый Структура("Организация", Организация));
			Если НастройкиУчетнойПолитики.Количество() = 0 Тогда
				РегистрыСведений.УчетнаяПолитика.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
				Запись.Записать(Истина);
			Иначе
				СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("УчетнаяПолитика", Организация, НастройкиУчетнойПолитики[0].Период, Период);
			КонецЕсли;
			
		Иначе
			
			КлючЗаписиПредыдущий = КлючЗаписиДействующейУчетнойПолитики("НастройкиСистемыНалогообложения", Организация, Период-1);
			КлючЗаписиТекущий    = КлючЗаписиДействующейУчетнойПолитики("НастройкиСистемыНалогообложения", Организация, Период);
			Если КлючЗаписиПредыдущий = Неопределено ИЛИ КлючЗаписиТекущий = Неопределено Тогда
				Если КлючЗаписиНастройки.Период <> Период Тогда
					СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("УчетнаяПолитика", Организация, КлючЗаписиНастройки.Период, Период);
				КонецЕсли;
			Иначе
				Если КлючЗаписиПредыдущий.Период <> КлючЗаписиТекущий.Период Тогда
					Отбор = Новый Структура("Организация",Организация);
					
					НастройкаПредыдущая = РегистрыСведений.НастройкиСистемыНалогообложения.Получить(КлючЗаписиПредыдущий.Период, Отбор);
					НастройкаТекущая    = РегистрыСведений.НастройкиСистемыНалогообложения.Получить(КлючЗаписиТекущий.Период, Отбор);
					
					СистемаНалогообложенияПредыдущая = НастройкаПредыдущая.СистемаНалогообложения;
					СистемаНалогообложенияТекущая    = НастройкаТекущая.СистемаНалогообложения;
					ОбъектНалогообложенияПредыдущий  = НастройкаПредыдущая.ОбъектНалогообложенияУСН;
					ОбъектНалогообложенияТекущий     = НастройкаТекущая.ОбъектНалогообложенияУСН;
					
					Если СистемаНалогообложенияПредыдущая <> СистемаНалогообложенияТекущая 
						ИЛИ ОбъектНалогообложенияПредыдущий <> ОбъектНалогообложенияТекущий Тогда
						СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("УчетнаяПолитика", Организация, КлючЗаписиНастройки.Период, Период);
						КлючЗаписиНастройки = КлючЗаписиДействующейУчетнойПолитики("УчетнаяПолитика", Организация, Период);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если (ТекущаяЗапись.ПрименяетсяУСНДоходыМинусРасходы
				ИЛИ ТекущаяЗапись.ПлательщикНДФЛ)
				И УчетнаяПолитика.СпособОценкиМПЗ(Организация, Период) <> Перечисления.СпособыОценки.ФИФО Тогда
				
				Запись = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
				Запись.Организация = КлючЗаписиНастройки.Организация;
				Запись.Период      = КлючЗаписиНастройки.Период;
				Запись.Прочитать();
				Запись.СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО;
				Запись.Записать(Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиНалога = РегистрыСведений.НастройкиСистемыНалогообложения.СрезПоследних(Период, Новый Структура("Организация", Организация));
	
	Если ИмяРегистра = "УчетнаяПолитика" Тогда
		
		// создаем настройку системы налогообложения
		Если НастройкиНалога.Количество() = 0 Тогда
			НастройкиНалога = РегистрыСведений.НастройкиСистемыНалогообложения.СрезПервых(Период, Новый Структура("Организация", Организация));
			Если НастройкиНалога.Количество() = 0 Тогда
				Запись = РегистрыСведений.НастройкиСистемыНалогообложения.СоздатьМенеджерЗаписи();
				Запись.Организация = Организация;
				Запись.Период      = Период;
				Запись.Записать(Истина);
			Иначе
				СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиСистемыНалогообложения",  Организация, НастройкиНалога[0].Период, Период);
			КонецЕсли;
			НастройкиНалога = РегистрыСведений.НастройкиСистемыНалогообложения.СрезПоследних(Период, Новый Структура("Организация", Организация));
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиСистемыНалогообложения = НастройкиНалога[0];
	
	// Описание системы налогообложения
	
	Если ЭтоЮрЛицо Тогда
		Если УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период) Тогда
			НастройкиНалога = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(Период, Новый Структура("Организация", Организация));
			Если НастройкиНалога.Количество() = 0
				ИЛИ УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) <> УчетнаяПолитика.ПлательщикЕНВД(НастройкиНалога[0].Организация, НастройкиНалога[0].Период) Тогда
				НастройкиНалога = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.СрезПервых(Период, Новый Структура("Организация", Организация));
				Если НастройкиНалога.Количество() = 0 Тогда
					Запись = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.СоздатьМенеджерЗаписи();
					Запись.Заполнить(ДанныеЗаполнения);
					Запись.Записать(Истина);
				Иначе
					СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиУчетаНалогаНаПрибыль",  Организация, НастройкиНалога[0].Период, Период);
				КонецЕсли;
			КонецЕсли;
			
			НастройкиНалога = РегистрыСведений.СтавкиНалогаНаИмущество.СрезПоследних(Период, Новый Структура("Организация", Организация));
			Если НастройкиНалога.Количество() = 0 Тогда
				НастройкиНалога = РегистрыСведений.СтавкиНалогаНаИмущество.СрезПервых(Период, Новый Структура("Организация", Организация));
				Если НастройкиНалога.Количество() = 0 Тогда
					Запись = РегистрыСведений.СтавкиНалогаНаИмущество.СоздатьМенеджерЗаписи();
					РегистрыСведений.СтавкиНалогаНаИмущество.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
					Запись.Записать(Истина);
				Иначе
					СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("СтавкиНалогаНаИмущество",  Организация, НастройкиНалога[0].Период, Период);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		НастройкиНалога = РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП.СрезПоследних(Период, Новый Структура("Организация", Организация));
		Если НастройкиНалога.Количество() = 0 Тогда
			НастройкиНалога = РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП.СрезПервых(Период, Новый Структура("Организация", Организация));
			Если НастройкиНалога.Количество() = 0 Тогда
				Запись = РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП.СоздатьМенеджерЗаписи();
				РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
				Запись.Записать(Истина);
			Иначе
				СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиУчетаСтраховыхВзносовИП",  Организация, НастройкиНалога[0].Период, Период);
			КонецЕсли;
		КонецЕсли;
		
		НастройкиНалога = РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.СрезПоследних(
			Период, Новый Структура("Организация", Организация));
		Если НастройкиНалога.Количество() = 0 Тогда
			НастройкиНалога = РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.СрезПервых(
				Период, Новый Структура("Организация", Организация));
			Если НастройкиНалога.Количество() = 0 Тогда
				Запись = РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.СоздатьМенеджерЗаписи();
				РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
				Запись.Записать(Истина);
			Иначе
				СкопироватьПараметрыУчетнойПолитикиНаНовуюДату(
					"НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС",  Организация, НастройкиНалога[0].Период, Период);
			КонецЕсли;
		КонецЕсли;
		
		Если УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
			СкопироватьНаНовуюДату       = Ложь;
			ВестиУчетПоВидамДеятельности = НастройкиСистемыНалогообложения.ПлательщикЕНВД ИЛИ НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент;
			НастройкиНалога              = РегистрыСведений.НастройкиУчетаНДФЛ.СрезПоследних(Период, Новый Структура("Организация", Организация));
			Если НастройкиНалога.Количество() = 0 Тогда
				НастройкиНалога = РегистрыСведений.НастройкиУчетаНДФЛ.СрезПервых(Период, Новый Структура("Организация", Организация));
				Если НастройкиНалога.Количество() = 0 Тогда
					Запись = РегистрыСведений.НастройкиУчетаНДФЛ.СоздатьМенеджерЗаписи();
					ДанныеЗаполнения.Вставить("ВестиУчетПоВидамДеятельности", ВестиУчетПоВидамДеятельности);
					РегистрыСведений.НастройкиУчетаНДФЛ.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
					Запись.Записать(Истина);
				Иначе
					СкопироватьНаНовуюДату = Истина;
				КонецЕсли;
			Иначе
				СкопироватьНаНовуюДату = НастройкиНалога[0].ВестиУчетПоВидамДеятельности <> ВестиУчетПоВидамДеятельности;
			КонецЕсли;
			Если СкопироватьНаНовуюДату Тогда
				СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиУчетаНДФЛ",  Организация, НастройкиНалога[0].Период, Период, Новый Структура("ВестиУчетПоВидамДеятельности",ВестиУчетПоВидамДеятельности));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период)
		ИЛИ УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
		
		НастройкиНалога = РегистрыСведений.НастройкиУчетаНДС.СрезПоследних(Период, Новый Структура("Организация", Организация));
		Если НастройкиНалога.Количество() = 0 Тогда
			НастройкиНалога = РегистрыСведений.НастройкиУчетаНДС.СрезПервых(Период, Новый Структура("Организация", Организация));
			Если НастройкиНалога.Количество() = 0 Тогда
				Запись = РегистрыСведений.НастройкиУчетаНДС.СоздатьМенеджерЗаписи();
				РегистрыСведений.НастройкиУчетаНДС.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
				Запись.Записать(Истина);
			Иначе
				СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиУчетаНДС",  Организация, НастройкиНалога[0].Период, Период);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСН(Организация, Период) Тогда
		
		НастройкиНалога = РегистрыСведений.НастройкиУчетаУСН.СрезПоследних(Период, Новый Структура("Организация", Организация));
		Запись = РегистрыСведений.НастройкиУчетаУСН.СоздатьМенеджерЗаписи();
		
		ДанныеЗаполнения.Вставить("ПрименяетсяУСНДоходыМинусРасходы", НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы);
		
		РегистрыСведений.НастройкиУчетаУСН.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
		Если НастройкиНалога.Количество() = 0 Тогда
			НастройкиНалога = РегистрыСведений.НастройкиУчетаУСН.СрезПервых(Период, Новый Структура("Организация", Организация));
			Если НастройкиНалога.Количество() = 0 Тогда
				Запись.Записать(Истина);
			Иначе
				СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиУчетаУСН",  Организация, НастройкиНалога[0].Период, Период);
			КонецЕсли;
		Иначе
			СтавкаНалога      = НастройкиНалога[0].СтавкаНалога;
			СтавкаПоУмолчанию = Запись.СтавкаНалога;
			НоваяСтавка       = СтавкаНалога;
			Если СтавкаНалога <> СтавкаПоУмолчанию
				И (СтавкаНалога = 15 ИЛИ СтавкаНалога = 6) Тогда
				НоваяСтавка = СтавкаПоУмолчанию;
			КонецЕсли;
			Если НоваяСтавка <> СтавкаНалога
				ИЛИ УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) <> УчетнаяПолитика.ПлательщикЕНВД(НастройкиНалога[0].Организация, НастройкиНалога[0].Период) Тогда
				Запись.СтавкаНалога = НоваяСтавка;
				Запись.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоЮрЛицо ИЛИ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация) Тогда
		Если Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда
			
			ДанныеЗаполнения = Новый Структура("Период", Период);
			
			НастройкиНалога = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПоследних(Период, Новый Структура("Организация", Организация));
			Если НастройкиНалога.Количество() = 0 Тогда
				НастройкиНалога = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПервых(Период, Новый Структура("Организация", Организация));
				Если НастройкиНалога.Количество() = 0 Тогда
					ДанныеЗаполненияСтраховыеВзносы = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.ЗаписьПоУмолчанию();
					
					Запись = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СоздатьМенеджерЗаписи();
					Запись.Организация = Организация;
					УчетЗарплаты.УстановкаНастроекПоУмолчанию("СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев", Запись, ДанныеЗаполненияСтраховыеВзносы);
					Запись.Записать(Истина);
				Иначе
					СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев",  Организация, НастройкиНалога[0].Период, Период);
				КонецЕсли;
			КонецЕсли;
			
			НастройкиНалога = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(Период, Новый Структура("ГоловнаяОрганизация", ГоловнаяОрганизация));
			Если НастройкиНалога.Количество() = 0 Тогда
				Запись = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьМенеджерЗаписи();
				Запись.ГоловнаяОрганизация = ГоловнаяОрганизация;
				УчетЗарплаты.УстановкаНастроекПоУмолчанию("ПрименяемыеТарифыСтраховыхВзносов", Запись, ДанныеЗаполнения);
				Запись.Записать(Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьУчетнуюПолитикуОбособленногоПодразделения(Организация);
	
КонецПроцедуры

Процедура СоздатьНастройкиУчетнойПолитикиПоУмолчанию(ДанныеЗаполнения)
	
	НастройкиУчетаУСН = РегистрыСведений.НастройкиУчетаУСН.СоздатьНаборЗаписей();
	НастройкиУчетаУСН.Отбор.Организация.Установить(ДанныеЗаполнения.Организация);
	НастройкиУчетаУСН.Прочитать();
	
	НастройкиУчетаНДС = РегистрыСведений.НастройкиУчетаНДС.СоздатьНаборЗаписей();
	НастройкиУчетаНДС.Отбор.Организация.Установить(ДанныеЗаполнения.Организация);
	НастройкиУчетаНДС.Прочитать();
	
	НастройкиУчетаНДФЛ = РегистрыСведений.НастройкиУчетаНДФЛ.СоздатьНаборЗаписей();
	НастройкиУчетаНДФЛ.Отбор.Организация.Установить(ДанныеЗаполнения.Организация);
	НастройкиУчетаНДФЛ.Прочитать();
	
	НастройкиБухгалтерскогоУчета = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	НастройкиБухгалтерскогоУчета.Отбор.Организация.Установить(ДанныеЗаполнения.Организация);
	НастройкиБухгалтерскогоУчета.Прочитать();
	
	НастройкиУчетаНалогаНаПрибыль = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.СоздатьНаборЗаписей();
	НастройкиУчетаНалогаНаПрибыль.Отбор.Организация.Установить(ДанныеЗаполнения.Организация);
	НастройкиУчетаНалогаНаПрибыль.Прочитать();
	
	НастройкиСистемыНалогообложения = РегистрыСведений.НастройкиСистемыНалогообложения.СоздатьНаборЗаписей();
	НастройкиСистемыНалогообложения.Отбор.Организация.Установить(ДанныеЗаполнения.Организация);
	НастройкиСистемыНалогообложения.Прочитать();
	
	НастройкиУчетаСтраховыхВзносовИП = РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП.СоздатьНаборЗаписей();
	НастройкиУчетаСтраховыхВзносовИП.Отбор.Организация.Установить(ДанныеЗаполнения.Организация);
	НастройкиУчетаСтраховыхВзносовИП.Прочитать();
	
	НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС =
		РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.СоздатьНаборЗаписей();
	НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Отбор.Организация.Установить(ДанныеЗаполнения.Организация);
	НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Прочитать();
	
	НачатьТранзакцию();
	
	СтруктураУчетнойПолитики = Новый Структура;
	НастройкиПоУмолчаниюБухгалтерскийУчет(НастройкиБухгалтерскогоУчета, ДанныеЗаполнения);
	НастройкиПоУмолчаниюСистемаНалогообложения(
		НастройкиСистемыНалогообложения, ДанныеЗаполнения, СтруктураУчетнойПолитики);
	НастройкиПоУмолчаниюУчетНалогаНаПрибыль(НастройкиУчетаНалогаНаПрибыль, ДанныеЗаполнения, СтруктураУчетнойПолитики);
	НастройкиПоУмолчаниюУчетУСН(НастройкиУчетаУСН, ДанныеЗаполнения, СтруктураУчетнойПолитики);
	НастройкиПоУмолчаниюУчетНДС(НастройкиУчетаНДС, ДанныеЗаполнения, СтруктураУчетнойПолитики);
	НастройкиПоУмолчаниюУчетНДФЛ(НастройкиУчетаНДФЛ, ДанныеЗаполнения, СтруктураУчетнойПолитики);
	НастройкиПоУмолчаниюУчетСтраховыхВзносовИП(
		НастройкиУчетаСтраховыхВзносовИП, ДанныеЗаполнения, СтруктураУчетнойПолитики);
	НастройкиПоУмолчаниюУчетСтраховыхВзносовИП_ПФР_ФФОМС(
		НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС, ДанныеЗаполнения, СтруктураУчетнойПолитики);
	
	СоздатьПрименяемыеТарифыСтраховыхВзносов(НастройкиСистемыНалогообложения);
	СоздатьНастройкиСтрахованиеОтНесчастныхСлучаев(НастройкиСистемыНалогообложения);
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаУСН);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаНДС);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаНДФЛ);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиБухгалтерскогоУчета);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаНалогаНаПрибыль);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиСистемыНалогообложения);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаСтраховыхВзносовИП);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС);
		
	Если НастройкиСистемыНалогообложения.ВыгрузитьКолонку("ПрименяетсяУСНДоходыМинусРасходы").Найти(Истина) <> Неопределено
		ИЛИ НастройкиСистемыНалогообложения.ВыгрузитьКолонку("ПлательщикНДФЛ").Найти(Истина) <> Неопределено 
		ИЛИ НастройкиБухгалтерскогоУчета.ВыгрузитьКолонку("СпособОценкиМПЗ").Найти(Перечисления.СпособыОценки.ФИФО) <> Неопределено Тогда
		ВключитьПартионныйУчет();
	КонецЕсли;
	
	Запись = НастройкиСистемыНалогообложения[НастройкиСистемыНалогообложения.Количество()-1];
	УчетЗарплаты.УточнитьОтношениеКЕНВД(
		Запись.Организация,
		Запись.Период,
		Запись.ПлательщикЕНВД,
		Запись.ПрименяетсяОсобыйПорядокНалогообложения);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура НастройкиПоУмолчаниюСистемаНалогообложения(НастройкиСистемыНалогообложения, ДанныеЗаполнения, СтруктураУчетнойПолитики)
	
	Запись = НастройкиСистемыНалогообложения.Добавить();
	Запись.Период      = ДанныеЗаполнения.Период;
	Запись.Организация = ДанныеЗаполнения.Организация;
	РегистрыСведений.НастройкиСистемыНалогообложения.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
	
	СтруктураУчетнойПолитики = СтруктураУчетнойПолитики(Запись, ВидОрганизации(ДанныеЗаполнения.Организация));
	
КонецПроцедуры

Процедура НастройкиПоУмолчаниюБухгалтерскийУчет(НастройкиБухгалтерскогоУчета, ДанныеЗаполнения)
	
	Запись = НастройкиБухгалтерскогоУчета.Добавить();
	Запись.Период      = ДанныеЗаполнения.Период;
	Запись.Организация = ДанныеЗаполнения.Организация;
	РегистрыСведений.УчетнаяПолитика.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура НастройкиПоУмолчаниюУчетНалогаНаПрибыль(НастройкиУчетаНалогаНаПрибыль, ДанныеЗаполнения, СтруктураУчетнойПолитики)
	
	Если НЕ СтруктураУчетнойПолитики.ПлательщикНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НастройкиУчетаНалогаНаПрибыль.Добавить();
	Запись.Период      = ДанныеЗаполнения.Период;
	Запись.Организация = ДанныеЗаполнения.Организация;
	
	// На 2017-2024 годы вводятся "нестандартные" ставки налога на прибыль (401-ФЗ от 30.11.2016, 301-ФЗ от 03.08.2018)
	// Если настройки записываются до 01.01.2017, то дополнительно запишем настройки с новыми ставками на 2017 год
	Если ДанныеЗаполнения.Период < '2017-01-01' Тогда
		
		// Если в наборе есть запись на 2017 год, то новую запись не добавляем
		Если НастройкиУчетаНалогаНаПрибыль.ВыгрузитьКолонку("Период").Найти('2017-01-01') <> Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Запись = НастройкиУчетаНалогаНаПрибыль.Добавить();
		Запись.Период      = '2017-01-01';
		Запись.Организация = ДанныеЗаполнения.Организация;
		
	КонецЕсли; 
	
	// Так как в наборе уже есть записи с разными значениями Период, на время выполнения Заполнить() 
	// в ДанныеЗаполнения следует избавиться от поля Период, чтобы значение из ДанныеЗаполнения
	// не вытеснило значения в записях набора.
	ДанныеЗаполненияПериод = ДанныеЗаполнения.Период;
	ДанныеЗаполнения.Удалить("Период");
	
	НастройкиУчетаНалогаНаПрибыль.Заполнить(ДанныеЗаполнения);
	
	ДанныеЗаполнения.Вставить("Период", ДанныеЗаполненияПериод);
	
КонецПроцедуры

Процедура НастройкиПоУмолчаниюУчетУСН(НастройкиУчетаУСН, ДанныеЗаполнения, СтруктураУчетнойПолитики)
	
	Если НЕ СтруктураУчетнойПолитики.ПрименяетсяУСН
		И НЕ СтруктураУчетнойПолитики.ПрименяетсяУСНДоходы
		И НЕ СтруктураУчетнойПолитики.ПрименяетсяУСНДоходыМинусРасходы Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НастройкиУчетаУСН.Добавить();
	Запись.Период      = ДанныеЗаполнения.Период;
	Запись.Организация = ДанныеЗаполнения.Организация;
	РегистрыСведений.НастройкиУчетаУСН.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура НастройкиПоУмолчаниюУчетНДС(НастройкиУчетаНДС, ДанныеЗаполнения, СтруктураУчетнойПолитики)
	
	Если НЕ СтруктураУчетнойПолитики.ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НастройкиУчетаНДС.Добавить();
	Запись.Период      = ДанныеЗаполнения.Период;
	Запись.Организация = ДанныеЗаполнения.Организация;
	РегистрыСведений.НастройкиУчетаНДС.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура НастройкиПоУмолчаниюУчетНДФЛ(НастройкиУчетаНДФЛ, ДанныеЗаполнения, СтруктураУчетнойПолитики)
	
	Если СтруктураУчетнойПолитики.ВидОрганизации <> "ИндивидуальныйПредприниматель" Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НастройкиУчетаНДФЛ.Добавить();
	Запись.Период      = ДанныеЗаполнения.Период;
	Запись.Организация = ДанныеЗаполнения.Организация;
	РегистрыСведений.НастройкиУчетаНДФЛ.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура НастройкиПоУмолчаниюУчетСтраховыхВзносовИП(НастройкиУчетаСтраховыхВзносовИП, ДанныеЗаполнения, СтруктураУчетнойПолитики)
	
	Если СтруктураУчетнойПолитики.ВидОрганизации <> "ИндивидуальныйПредприниматель" Или
		СтруктураУчетнойПолитики.СистемаНалогообложения =
			Перечисления.СистемыНалогообложения.НалогНаПрофессиональныйДоход Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НастройкиУчетаСтраховыхВзносовИП.Добавить();
	Запись.Период      = ДанныеЗаполнения.Период;
	Запись.Организация = ДанныеЗаполнения.Организация;
	РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура НастройкиПоУмолчаниюУчетСтраховыхВзносовИП_ПФР_ФФОМС(НастройкиУчетаСтраховыхВзносовИП, ДанныеЗаполнения, СтруктураУчетнойПолитики)
	
	Если СтруктураУчетнойПолитики.ВидОрганизации <> "ИндивидуальныйПредприниматель" Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НастройкиУчетаСтраховыхВзносовИП.Добавить();
	Запись.Период      = ДанныеЗаполнения.Период;
	Запись.Организация = ДанныеЗаполнения.Организация;
	РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура СоздатьПрименяемыеТарифыСтраховыхВзносов(НаборЗаписей)
	
	Если НаборЗаписей.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства = НаборЗаписей.ДополнительныеСвойства;
	
	ВидТарифаОбщийНалоговыйРежим = Справочники.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим;
	ВидТарифаУпрощенныйНалоговыйРежим = Справочники.ВидыТарифовСтраховыхВзносов.УпрощенныйНалоговыйРежим;
	ВидТарифаУпрощенныйНалоговыйРежимПроизводство = Справочники.ВидыТарифовСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство;
	ВидТарифаПатент                               = Справочники.ВидыТарифовСтраховыхВзносов.ИндивидуальныйПредпринимательПрименяющийПатент;
	
	Для каждого Строка Из НаборЗаписей Цикл
		
		// Записи регистра ПрименяемыеТарифыСтраховыхВзносов создаются только по головным организациям
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоОбособленноеПодразделение(Строка.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.Период,
		|	ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.ГоловнаяОрганизация,
		|	ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.ВидТарифа
		|ИЗ
		|	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(&Период, ГоловнаяОрганизация = &Организация) КАК ПрименяемыеТарифыСтраховыхВзносовСрезПоследних";
		Запрос.УстановитьПараметр("Период", Строка.Период);
		Запрос.УстановитьПараметр("Организация", Строка.Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			
			Выборка.Следующий();
			
			Если Строка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая
			   И Выборка.ВидТарифа = ВидТарифаОбщийНалоговыйРежим Тогда
			   
				Продолжить; // Изменения в тарифах не требуются.
					
			ИначеЕсли Строка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная
				И (Выборка.ВидТарифа = ВидТарифаУпрощенныйНалоговыйРежим ИЛИ Выборка.ВидТарифа = ВидТарифаУпрощенныйНалоговыйРежимПроизводство) Тогда
				 
			 	Продолжить; // Изменения в тарифах не требуются.
				 
			ИначеЕсли Строка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок
				И Строка.ПрименяетсяУСНПатент
				И Выборка.ВидТарифа = ВидТарифаПатент Тогда
				 
			 	Продолжить; // Изменения в тарифах не требуются.
				 
			ИначеЕсли Строка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок
				И Строка.ПлательщикЕНВД
				И ЗначениеЗаполнено(Выборка.ВидТарифа) Тогда
				 
			 	Продолжить; // Изменения в тарифах не требуются.
				 
			КонецЕсли;
			
		КонецЕсли;
		
		// Создание (изменение) тарифов.
		
		Если Строка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			 
			Если НЕ ЗначениеЗаполнено(ВидТарифаОбщийНалоговыйРежим) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидТарифа = ВидТарифаОбщийНалоговыйРежим;
			
		ИначеЕсли Строка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			
			Если НЕ ЗначениеЗаполнено(ВидТарифаУпрощенныйНалоговыйРежим) Тогда
				Продолжить;
			КонецЕсли;
		 
			ВидТарифа = ВидТарифаУпрощенныйНалоговыйРежим;
			
		Иначе
			
			Если Строка.ПрименяетсяУСНПатент Тогда
				Если НЕ ЗначениеЗаполнено(ВидТарифаПатент) Тогда
					Продолжить;
				КонецЕсли;
				
				ВидТарифа = ВидТарифаПатент;
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(ВидТарифаОбщийНалоговыйРежим) Тогда
					Продолжить;
				КонецЕсли;
				
				ВидТарифа = ВидТарифаОбщийНалоговыйРежим;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НаборЗаписейСтраховыхВзносов = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьНаборЗаписей();
		НаборЗаписейСтраховыхВзносов.Отбор.Период.Установить(Строка.Период);
		НаборЗаписейСтраховыхВзносов.Отбор.ГоловнаяОрганизация.Установить(Строка.Организация);
		НаборЗаписейСтраховыхВзносов.Прочитать();
		НаборЗаписейСтраховыхВзносов.Очистить();
		
		Запись = НаборЗаписейСтраховыхВзносов.Добавить();
		Запись.ГоловнаяОрганизация      = Строка.Организация;
		Запись.Период                   = Строка.Период;
		Запись.ВидТарифа                = ВидТарифа;
		Запись.ДатаРегистрацииИзменений = Строка.Период;
		
		НаборЗаписейСтраховыхВзносов.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборЗаписейСтраховыхВзносов.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьНастройкиСтрахованиеОтНесчастныхСлучаев(НаборЗаписей)
	Если НаборЗаписей.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из НаборЗаписей Цикл
		ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Строка.Организация);
		Если ЭтоЮрЛицо ИЛИ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Строка.Организация) Тогда
			Если Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда
				ДанныеЗаполнения = Новый Структура("Период", Строка.Период);
				
				НастройкиНалога = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПоследних(Строка.Период, Новый Структура("Организация", Строка.Организация));
				Если НастройкиНалога.Количество() = 0 Тогда
					НастройкиНалога = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПервых(Строка.Период, Новый Структура("Организация", Строка.Организация));
					Если НастройкиНалога.Количество() = 0 Тогда
						Запись = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СоздатьМенеджерЗаписи();
						Запись.Организация = Строка.Организация;
						
						УчетЗарплаты.УстановкаНастроекПоУмолчанию(
							"СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев", 
							Запись, 
							РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.ЗаписьПоУмолчанию());
							
						Запись.Записать(Истина);
					Иначе
						СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев", Строка.Организация, НастройкиНалога[0].Период, Строка.Период);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры
 

Процедура СкопироватьЗаписиУчетнойПолитикиДляОбособленногоПодразделения(ИмяРегистра, Организация)
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
	// Копируем учетную политику головной организации для обособленного подразделения, только если ранее учетная политика
	// обособленного подразделения не задавалась.
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК УчетнаяПолитикаЗадана
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|ГДЕ
	|	УчетнаяПолитика.Организация = &ОбособленноеПодразделение";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "УчетнаяПолитика", ИмяРегистра);
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписиГоловнойОрганизации = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	ЗаписиГоловнойОрганизации.Отбор.Организация.Установить(ГоловнаяОрганизация);
	ЗаписиГоловнойОрганизации.Прочитать();
	
	КопируемыеЗаписиГоловнойОрганизации = ЗаписиГоловнойОрганизации.Выгрузить();
	КопируемыеЗаписиГоловнойОрганизации.ЗаполнитьЗначения(Организация, "Организация");
	
	ЗаписиПодразделения = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	ЗаписиПодразделения.Отбор.Организация.Установить(Организация);
	ЗаписиПодразделения.Загрузить(КопируемыеЗаписиГоловнойОрганизации);
	ЗаписиПодразделения.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	ЗаписиПодразделения.ОбменДанными.Загрузка = Истина;
	ЗаписиПодразделения.Записать(Истина);
	
КонецПроцедуры

Процедура УдалитьУжеВключенныеРазрезыАналитики(РазрезыАналитики)
	
	ПараметрыУчета = ОбщегоНазначенияБП.ОпределитьПараметрыУчета();
	
	КоличествоЭлементов = РазрезыАналитики.Количество();
	Для ОбратныйНомер = 1 По КоличествоЭлементов Цикл
		
		Индекс = КоличествоЭлементов - ОбратныйНомер; // Обходим с конца, так как будем удалять
		ИмяПараметраУчета = РазрезыАналитики[Индекс];
		
		Если ПараметрыУчета[ИмяПараметраУчета] Тогда
			РазрезыАналитики.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьАналитику(Знач РазрезыАналитики)
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ",             Ложь);
	Результат.Вставить("ИзмененаАналитика", Ложь);
	
	ПараметрыУчета = ОбщегоНазначенияБП.ОпределитьПараметрыУчета();
	Для Каждого ИмяПараметраУчета Из РазрезыАналитики Цикл
		ПараметрыУчета[ИмяПараметраУчета] = Истина;
	КонецЦикла;
	
	ОбщегоНазначенияБП.ПрименитьПараметрыУчета(ПараметрыУчета, Результат.ИзмененаАналитика, Результат.Отказ);
	
КонецПроцедуры

Процедура УстановитьИспользуетсяКассоваяКнига()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ИспользуетсяКассоваяКнига.Установить(ИспользуетсяКассоваяКнига());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

Процедура СоздатьНастройкиУчетаПоДаннымУчетнойПолитики() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложения.Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат; // Данные уже конвертировались
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаУчетнойПолитики();
	ВыборкаУчетнаяПолитика = Запрос.Выполнить().Выбрать();
	
	РСНастройкиУчетаУСН = РегистрыСведений.НастройкиУчетаУСН.СоздатьНаборЗаписей();
	РСНастройкиУчетаНДС = РегистрыСведений.НастройкиУчетаНДС.СоздатьНаборЗаписей();
	РСНастройкиУчетаНДФЛ = РегистрыСведений.НастройкиУчетаНДФЛ.СоздатьНаборЗаписей();
	РСНастройкиБухгалтерскогоУчета = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	РСНастройкиУчетаНалогаНаПрибыль = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.СоздатьНаборЗаписей();
	РСНастройкиСистемыНалогообложения = РегистрыСведений.НастройкиСистемыНалогообложения.СоздатьНаборЗаписей();
	РСНастройкиУчетаСтраховыхВзносовИП = РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП.СоздатьНаборЗаписей();
	РСНастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС =
		РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.СоздатьНаборЗаписей();
	
	НастройкиУчетаНалогаНаПрибыль   = НастройкиУчетаНалогаНаПрибыль();
	ВариантыБухгалтерскойОтчетности = ВариантыБухгалтерскойОтчетности();
	УплачиваетсяТорговыйСборБулево  = Константы.УплачиваетсяТорговыйСбор.Получить();
	Если УплачиваетсяТорговыйСборБулево Тогда
		УплачиваетсяТорговыйСбор = УплачиваетсяТорговыйСбор();
	КонецЕсли;
	
	ТаблицаНастройкиУчетаУСН = РСНастройкиУчетаУСН.Выгрузить();
	ТаблицаНастройкиУчетаНДФЛ = РСНастройкиУчетаНДФЛ.Выгрузить();
	ТаблицаНастройкиУчетаСтраховыхВзносовИП = РСНастройкиУчетаСтраховыхВзносовИП.Выгрузить();
	ТаблицаНастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС = РСНастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Выгрузить();
	
	НачатьТранзакцию();
	
	ТекущаяОрганизация = Неопределено;
	Пока ВыборкаУчетнаяПолитика.Следующий() Цикл
		Если ТекущаяОрганизация <> ВыборкаУчетнаяПолитика.Организация Тогда
			ТекущаяОрганизация = ВыборкаУчетнаяПолитика.Организация;
			ВидОрганизации = ВидОрганизации(ТекущаяОрганизация);
		КонецЕсли;
		СтруктураУчетнойПолитики = СтруктураУчетнойПолитики(ВыборкаУчетнаяПолитика, ВидОрганизации);
		
		ЗаполнитьНастройкиСистемыНалогообложения(
			РСНастройкиСистемыНалогообложения,
			ВыборкаУчетнаяПолитика,
			УплачиваетсяТорговыйСборБулево,
			УплачиваетсяТорговыйСбор);
		ЗаполнитьНастройкиБухгалтерскогоУчета(
			РСНастройкиБухгалтерскогоУчета, ВыборкаУчетнаяПолитика, ВариантыБухгалтерскойОтчетности);
		ЗаполнитьНастройкиУчетаУСН(ТаблицаНастройкиУчетаУСН, ВыборкаУчетнаяПолитика, СтруктураУчетнойПолитики);
		ЗаполнитьНастройкиУчетаНДС(РСНастройкиУчетаНДС, ВыборкаУчетнаяПолитика, СтруктураУчетнойПолитики);
		ЗаполнитьНастройкиУчетаНДФЛ(ТаблицаНастройкиУчетаНДФЛ, ВыборкаУчетнаяПолитика, СтруктураУчетнойПолитики);
		ЗаполнитьНастройкиУчетаСтраховыхВзносовИП(
			ТаблицаНастройкиУчетаСтраховыхВзносовИП, ВыборкаУчетнаяПолитика, СтруктураУчетнойПолитики);
		ЗаполнитьНастройкиУчетаСтраховыхВзносовИП(
			ТаблицаНастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС, ВыборкаУчетнаяПолитика, СтруктураУчетнойПолитики);
		ЗаполнитьНастройкиУчетаНалогаНаПрибыль(
			НастройкиУчетаНалогаНаПрибыль, ВыборкаУчетнаяПолитика, СтруктураУчетнойПолитики);
	КонецЦикла;
	
	РСНастройкиУчетаУСН.Загрузить(ТаблицаНастройкиУчетаУСН);
	РСНастройкиУчетаНДФЛ.Загрузить(ТаблицаНастройкиУчетаНДФЛ);
	РСНастройкиУчетаСтраховыхВзносовИП.Загрузить(ТаблицаНастройкиУчетаСтраховыхВзносовИП);
	РСНастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Загрузить(ТаблицаНастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС);
	
	ПереложитьВРСНастройкиУчетаНалогаНаПрибыль(РСНастройкиУчетаНалогаНаПрибыль, НастройкиУчетаНалогаНаПрибыль);
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РСНастройкиУчетаУСН);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РСНастройкиУчетаНДС);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РСНастройкиУчетаНДФЛ);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РСНастройкиБухгалтерскогоУчета);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РСНастройкиУчетаНалогаНаПрибыль);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РСНастройкиСистемыНалогообложения);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РСНастройкиУчетаСтраховыхВзносовИП);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РСНастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Обработчик обновления на версию 3.0.70.2
// Устанавливает значение новой константы "ИспользуетсяКассоваяКнига" по настройкам систем налогообложения.
//
Процедура УстановитьКонстантуИспользуетсяКассоваяКнига() Экспорт
	
	МенеджерЗначения = Константы.ИспользуетсяКассоваяКнига.СоздатьМенеджерЗначения();
	
	МенеджерЗначения.Значение = ИспользуетсяКассоваяКнига();
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииОбработчиковОбновления

Функция ТекстЗапросаУчетнойПолитики()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УдалитьУчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УдалитьУчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УдалитьУчетнаяПолитикаОрганизаций.СистемаНалогообложения,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПлательщикНалогаНаПрибыль,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПлательщикНДС,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПлательщикНДФЛ,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПлательщикЕНВД,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПрименяетсяУСН,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходы,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходыМинусРасходы,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПрименяетсяУСНПатент,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПрименяетсяОсобыйПорядокНалогообложения,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПоддержкаПБУ18,
	|	УдалитьУчетнаяПолитикаОрганизаций.МетодНачисленияАмортизацииНУ КАК МетодНачисленияАмортизации,
	|	УдалитьУчетнаяПолитикаОрганизаций.СпособПогашенияСтоимостиСпецодеждыНУ КАК СпособПогашенияСтоимостиСпецодежды,
	|	УдалитьУчетнаяПолитикаОрганизаций.ОсновнойВидДеятельности,
	|	УдалитьУчетнаяПолитикаОрганизаций.ВестиУчетПоВидамДеятельностиИП КАК ВестиУчетПоВидамДеятельности,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПрименяетсяОсвобождениеОтУплатыНДС,
	|	УдалитьУчетнаяПолитикаОрганизаций.СложныйУчетНДС,
	|	УдалитьУчетнаяПолитикаОрганизаций.РаздельныйУчетНДСДо2014Года,
	|	УдалитьУчетнаяПолитикаОрганизаций.РаздельныйУчетНДСНаСчете19,
	|	УдалитьУчетнаяПолитикаОрганизаций.УпрощенныйУчетНДС,
	|	УдалитьУчетнаяПолитикаОрганизаций.НачислятьНДСПоОтгрузке,
	|	УдалитьУчетнаяПолитикаОрганизаций.НачислятьНДСПриПередачеНедвижимости,
	|	УдалитьУчетнаяПолитикаОрганизаций.ФормироватьСчетФактуруПоУЕвРублях,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПорядокРегистрацииСчетовФактурНаАванс,
	|	УдалитьУчетнаяПолитикаОрганизаций.ДатаПереходаНаУСН,
	|	УдалитьУчетнаяПолитикаОрганизаций.УведомлениеНомер,
	|	УдалитьУчетнаяПолитикаОрганизаций.УведомлениеДата,
	|	УдалитьУчетнаяПолитикаОрганизаций.НалоговыеКаникулыУСН КАК НалоговыеКаникулы,
	|	УдалитьУчетнаяПолитикаОрганизаций.ОбъектНалогообложенияУСН,
	|	УдалитьУчетнаяПолитикаОрганизаций.СтавкаНалогаУСН КАК СтавкаНалога,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПорядокОтраженияАвансаУСН КАК ПорядокОтраженияАванса,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПорядокПризнанияМатериальныхРасходов,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПорядокПризнанияРасходовПоТоварам,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПорядокПризнанияРасходовПоНДС,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПорядокПризнанияДопРасходов,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПорядокПризнанияТаможенныхПлатежей,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПатентУСН КАК Патент,
	|	УдалитьУчетнаяПолитикаОрганизаций.РозничнаяТорговляОблагаетсяЕНВД,
	|	УдалитьУчетнаяПолитикаОрганизаций.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности,
	|	УдалитьУчетнаяПолитикаОрганизаций.МетодРаспределенияРасходовУСНПоВидамДеятельности КАК МетодРаспределенияРасходовПоВидамДеятельности,
	|	УдалитьУчетнаяПолитикаОрганизаций.БазаРаспределенияРасходовУСНПоВидамДеятельности КАК БазаРаспределенияРасходовПоВидамДеятельности,
	|	УдалитьУчетнаяПолитикаОрганизаций.АвансыВключаютсяВДоходыВПериодеПолученияИП КАК АвансыВключаютсяВДоходыВПериодеПолучения,
	|	УдалитьУчетнаяПолитикаОрганизаций.ВидДеятельностиДоходовПоАвансамИП КАК ВидДеятельностиДоходовПоАвансам,
	|	УдалитьУчетнаяПолитикаОрганизаций.ДляПризнанияРасходовТребуетсяПолучениеДоходаИП КАК ДляПризнанияРасходовТребуетсяПолучениеДохода,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПризнаватьРасходыПоОперациямПрошлогоГодаИП КАК ПризнаватьРасходыПоОперациямПрошлогоГода,
	|	УдалитьУчетнаяПолитикаОрганизаций.УплачиватьДобровольныеВзносыВФСС,
	|	УдалитьУчетнаяПолитикаОрганизаций.СпособОценкиМПЗ,
	|	УдалитьУчетнаяПолитикаОрганизаций.СпособОценкиТоваровВРознице,
	|	УдалитьУчетнаяПолитикаОрганизаций.ОсновнойСчетУчетаЗатрат,
	|	УдалитьУчетнаяПолитикаОрганизаций.ВыпускПродукции,
	|	УдалитьУчетнаяПолитикаОрганизаций.ОказаниеУслуг,
	|	УдалитьУчетнаяПолитикаОрганизаций.ДиректКостинг,
	|	УдалитьУчетнаяПолитикаОрганизаций.ПорядокСписанияРасходовНаСебестоимостьУслуг,
	|	УдалитьУчетнаяПолитикаОрганизаций.РассчитыватьСебестоимостьПолуфабрикатов,
	|	УдалитьУчетнаяПолитикаОрганизаций.СпособРасчетаСебестоимостиПроизводства,
	|	УдалитьУчетнаяПолитикаОрганизаций.РассчитыватьСебестоимостьУслугСобственнымПодразделениям,
	|	УдалитьУчетнаяПолитикаОрганизаций.СпособУчетаВыпускаГотовойПродукции,
	|	УдалитьУчетнаяПолитикаОрганизаций.УчитыватьРасходыНУАналогичноБУ,
	|	УдалитьУчетнаяПолитикаОрганизаций.УчитыватьРасходыПоЭлементамЗатрат,
	|	УдалитьУчетнаяПолитикаОрганизаций.УчитыватьРасходыПоСтатьямЗатрат,
	|	УдалитьУчетнаяПолитикаОрганизаций.ФормироватьРезервыПоСомнительнымДолгамБУ,
	|	УдалитьУчетнаяПолитикаОрганизаций.ФормироватьРезервыПоСомнительнымДолгамНУ КАК ФормироватьРезервыПоСомнительнымДолгам,
	|	УдалитьУчетнаяПолитикаОрганизаций.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств
	|ИЗ
	|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК УдалитьУчетнаяПолитикаОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВидОрганизации(Организация)
	
	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо, ГоловнаяОрганизация");
	Если СвойстваОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Результат = "ИндивидуальныйПредприниматель";
	ИначеЕсли СвойстваОрганизации.ГоловнаяОрганизация = Организация Тогда
		Результат = "ЮридическоеЛицо";
	Иначе
		Результат = "ОбособленноеПодразделение";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураУчетнойПолитики(УчетнаяПолитика, ВидОрганизации)
	
	Результат = ОписаниеСтруктурыУчетнойПолитики();
	ЗаполнитьЗначенияСвойств(Результат, УчетнаяПолитика);
	
	Результат.Вставить("ВидОрганизации", ВидОрганизации);
	
	Возврат Результат;
	
КонецФункции

Функция УплачиваетсяТорговыйСбор()
	
	УплачиваетсяТорговыйСбор = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТорговыеТочки.Организация
	|ИЗ
	|	Справочник.ТорговыеТочки КАК ТорговыеТочки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УплачиваетсяТорговыйСбор.Вставить(Выборка.Организация, Истина);
	КонецЦикла;
	
	Возврат УплачиваетсяТорговыйСбор;
	
КонецФункции

Функция НастройкиУчетаНалогаНаПрибыль()
	
	ТаблицаНастройки = Новый ТаблицаЗначений();
	ТаблицаНастройки.Колонки.Добавить("Период",                                                Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаНастройки.Колонки.Добавить("Организация",                                           Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаНастройки.Колонки.Добавить("ПорядокУплатыАвансов",                                  Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокУплатыАвансовПоНалогуНаПрибыль"));
	ТаблицаНастройки.Колонки.Добавить("МетодНачисленияАмортизации",                            Новый ОписаниеТипов("ПеречислениеСсылка.МетодыНачисленияАмортизации"));
	ТаблицаНастройки.Колонки.Добавить("СпособПогашенияСтоимостиСпецодежды",                    Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПогашенияСтоимостиНУ"));
	ТаблицаНастройки.Колонки.Добавить("БазаРаспределенияКосвенныхРасходовПоВидамДеятельности", Новый ОписаниеТипов("ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности"));
	ТаблицаНастройки.Колонки.Добавить("ФормироватьРезервыПоСомнительнымДолгам",                Новый ОписаниеТипов("Булево"));
	ТаблицаНастройки.Колонки.Добавить("СтавкаФБ",                                              Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаНастройки.Колонки.Добавить("СтавкаСубъектРФ",                                       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаНастройки.Колонки.Добавить("ПрименяютсяРазныеСтавкиНалогаНаПрибыль",                Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаНастройки;
	
КонецФункции

Функция СтавкиНалогаНаПрибыльВСубъектахРФ()
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("ПериодСтавки",    Новый ОписаниеТипов(,,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Таблица.Колонки.Добавить("СтавкаСубъектРФ", Новый ОписаниеТипов(,,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат Таблица;
	
КонецФункции

Функция СтавкиНалогНаПрибыль()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СтавкиНалогаНаПрибыль.Период, ГОД) КАК ПериодСтавки,
	|	СтавкиНалогаНаПрибыль.СтавкаФБ КАК СтавкаФБ,
	|	СтавкиНалогаНаПрибыль.СтавкаСубъектРФ КАК СтавкаСубъектРФ
	|ПОМЕСТИТЬ ВТ_Ставки
	|ИЗ
	|	РегистрСведений.УдалитьСтавкиНалогаНаПрибыль КАК СтавкиНалогаНаПрибыль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Ставки.ПериодСтавки КАК ПериодСтавки,
	|	МАКСИМУМ(ВТ_Ставки.СтавкаФБ) КАК СтавкаФБ,
	|	МАКСИМУМ(ВТ_Ставки.СтавкаСубъектРФ) КАК СтавкаСубъектРФ
	|ИЗ
	|	ВТ_Ставки КАК ВТ_Ставки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Ставки.ПериодСтавки";
	
	ТаблицаСтавок = Запрос.Выполнить().Выгрузить();
	
	УдалитьДублиСтавок(ТаблицаСтавок);
	ТаблицаСтавок.Индексы.Добавить("ПериодСтавки");
	
	Возврат ТаблицаСтавок;
	
КонецФункции

Функция ВариантыБухгалтерскойОтчетности()
	
	ВариантыБухОтчетности = Новый Соответствие;
	
	Условия = Новый Массив;
	Условия.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.БухгалтерскаяОтчетностьОбщаяФорма);
	Условия.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.БухгалтерскаяОтчетностьМалыеПредприятия);
	Условия.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.БухгалтерскаяОтчетностьНекоммерческиеОрганизации);
	Условия.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.БухгалтерскаяОтчетностьСоциальноОриентированные);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Условия", Условия);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыПримененияТребованийЗаконодательства.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ВариантыПримененияТребованийЗаконодательства.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.БухгалтерскаяОтчетностьМалыеПредприятия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыБухгалтерскойОтчетности.ДляМалыхПредприятий)
	|		КОГДА ВариантыПримененияТребованийЗаконодательства.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.БухгалтерскаяОтчетностьНекоммерческиеОрганизации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыБухгалтерскойОтчетности.ДляНекоммерческихОрганизаций)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыБухгалтерскойОтчетности.ОбщиеПравила)
	|	КОНЕЦ КАК Условие
	|ИЗ
	|	РегистрСведений.ВариантыПримененияТребованийЗаконодательства КАК ВариантыПримененияТребованийЗаконодательства
	|ГДЕ
	|	ВариантыПримененияТребованийЗаконодательства.Условие В(&Условия)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантыБухОтчетности.Вставить(Выборка.Организация, Выборка.Условие);
	КонецЦикла;
	
	Возврат ВариантыБухОтчетности;
	
КонецФункции

Функция ПорядокУплатыАвансов()
	
	ПорядокУплатыАвансовПоНалогу = Новый Соответствие;
	
	Условия = Новый Массив;
	Условия.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.НалогНаПрибыльАвансыЕжеквартально);
	Условия.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.НалогНаПрибыльАвансыЕжемесячно);
	Условия.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.НалогНаПрибыльАвансыПоФактическойПрибыли);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Условия", Условия);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыПримененияТребованийЗаконодательства.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ВариантыПримененияТребованийЗаконодательства.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.НалогНаПрибыльАвансыПоФактическойПрибыли)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокУплатыАвансовПоНалогуНаПрибыль.ПоФактическойПрибыли)
	|		КОГДА ВариантыПримененияТребованийЗаконодательства.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.НалогНаПрибыльАвансыЕжемесячно)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежемесячно)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежеквартально)
	|	КОНЕЦ КАК Условие
	|ИЗ
	|	РегистрСведений.ВариантыПримененияТребованийЗаконодательства КАК ВариантыПримененияТребованийЗаконодательства
	|ГДЕ
	|	ВариантыПримененияТребованийЗаконодательства.Условие В(&Условия)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПорядокУплатыАвансовПоНалогу.Вставить(Выборка.Организация, Выборка.Условие);
	КонецЦикла;
	
	Возврат ПорядокУплатыАвансовПоНалогу;
	
КонецФункции

Функция УчетнаяПолитикаПоНалогуНаПрибыльОрганизаций(НастройкиУчетаНалогаНаПрибыль)
	
	НалогНаПрибыльОрганизаций = Новый Соответствие();
	
	Если НастройкиУчетаНалогаНаПрибыль.Количество() = 0 Тогда
		Возврат НалогНаПрибыльОрганизаций;
	КонецЕсли;
	
	НастройкиУчетаНалогаНаПрибыль.Индексы.Добавить("Организация");
	
	Организации = НастройкиУчетаНалогаНаПрибыль.ВыгрузитьКолонку("Организация");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Организации);
	
	Для каждого Организация Из Организации Цикл
		ДанныеПоОрганизации = НастройкиУчетаНалогаНаПрибыль.НайтиСтроки(Новый Структура("Организация", Организация));
		ТаблицаПериодов = НастройкиУчетаНалогаНаПрибыль.Скопировать(ДанныеПоОрганизации);
		ТаблицаПериодов.Колонки.Добавить("ПериодСтавки",     Новый ОписаниеТипов(,,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ТаблицаПериодов.Колонки.Добавить("ПериодУчПолитики", Новый ОписаниеТипов(,,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ТаблицаПериодов.Сортировать("Период");
		ТаблицаПериодов.Индексы.Добавить("Период");
		НалогНаПрибыльОрганизаций.Вставить(Организация, ТаблицаПериодов);
	КонецЦикла;
	
	СтавкиНалогНаПрибыль = СтавкиНалогНаПрибыль();
	
	РегиональныеСтавки = Новый Соответствие;
	ПрименяютсяРазныеСтавкиНалогаНаПрибыль = Константы.УдалитьПрименяютсяРазныеСтавкиНалогаНаПрибыль.Получить();
	Если ПрименяютсяРазныеСтавкиНалогаНаПрибыль Тогда
		ЗаполнитьРегиональныеСтавки(РегиональныеСтавки);
	КонецЕсли;
	
	ОбъединитьУчетнуюПолитикуИСтавки(НалогНаПрибыльОрганизаций, СтавкиНалогНаПрибыль, РегиональныеСтавки, ПрименяютсяРазныеСтавкиНалогаНаПрибыль, ПорядокУплатыАвансов());
	
	Возврат НалогНаПрибыльОрганизаций;
	
КонецФункции

Процедура ЗаполнитьНастройкиУчетаНалогаНаПрибыль(НастройкиУчетаНалогаНаПрибыль, УчетнаяПолитика, СтруктураУчетнойПолитики)
	
	Если НЕ СтруктураУчетнойПолитики.ПлательщикНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;
	
	Период = НачалоГода(УчетнаяПолитика.Период);
	МассивСтрок = НастройкиУчетаНалогаНаПрибыль.НайтиСтроки(Новый Структура("Период, Организация", Период, УчетнаяПолитика.Организация));
	Если МассивСтрок.Количество() = 0 Тогда
		ЗначениеСтроки = НастройкиУчетаНалогаНаПрибыль.Добавить();
		ЗаполнитьЗначенияСвойств(ЗначениеСтроки, УчетнаяПолитика);
	Иначе
		ЗначениеСтроки = МассивСтрок[0];
		ЗаполнитьЗначенияСвойств(ЗначениеСтроки, УчетнаяПолитика);
	КонецЕсли;
	ЗначениеСтроки.Период = Период;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиУчетаУСН(РСНастройкиУчетаУСН, УчетнаяПолитика, СтруктураУчетнойПолитики)
	
	Если НЕ СтруктураУчетнойПолитики.ПрименяетсяУСН
		И НЕ СтруктураУчетнойПолитики.ПрименяетсяУСНДоходы
		И НЕ СтруктураУчетнойПолитики.ПрименяетсяУСНДоходыМинусРасходы Тогда
		Возврат;
	КонецЕсли;
	
	Период = НачалоКвартала(УчетнаяПолитика.Период);
	МассивСтрок = РСНастройкиУчетаУСН.НайтиСтроки(Новый Структура("Период, Организация", Период, УчетнаяПолитика.Организация));
	Если МассивСтрок.Количество() = 0 Тогда
		ЗначениеСтроки = РСНастройкиУчетаУСН.Добавить();
		ЗаполнитьЗначенияСвойств(ЗначениеСтроки, УчетнаяПолитика);
	Иначе
		ЗначениеСтроки = МассивСтрок[0];
		ЗаполнитьЗначенияСвойств(МассивСтрок[0], УчетнаяПолитика);
	КонецЕсли;
	ЗначениеСтроки.Период = Период;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиУчетаНДС(РСНастройкиУчетаНДС, УчетнаяПолитика, СтруктураУчетнойПолитики)
	
	Если НЕ СтруктураУчетнойПолитики.ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РСНастройкиУчетаНДС.Добавить(), УчетнаяПолитика);
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиУчетаНДФЛ(РСНастройкиУчетаНДФЛ, УчетнаяПолитика, СтруктураУчетнойПолитики)
	
	Если СтруктураУчетнойПолитики.ВидОрганизации <> "ИндивидуальныйПредприниматель" Тогда
		Возврат;
	КонецЕсли;
	
	Период = НачалоГода(УчетнаяПолитика.Период);
	МассивСтрок = РСНастройкиУчетаНДФЛ.НайтиСтроки(Новый Структура("Период, Организация", Период, УчетнаяПолитика.Организация));
	Если МассивСтрок.Количество() = 0 Тогда
		ЗначениеСтроки = РСНастройкиУчетаНДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(ЗначениеСтроки, УчетнаяПолитика);
	Иначе
		ЗначениеСтроки = МассивСтрок[0];
		ЗаполнитьЗначенияСвойств(ЗначениеСтроки, УчетнаяПолитика);
	КонецЕсли;
	ЗначениеСтроки.Период = Период;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиУчетаСтраховыхВзносовИП(РСНастройкиУчетаСтраховыхВзносовИП, УчетнаяПолитика, СтруктураУчетнойПолитики)
	
	Если СтруктураУчетнойПолитики.ВидОрганизации <> "ИндивидуальныйПредприниматель" Тогда
		Возврат;
	КонецЕсли;
	
	Период = НачалоГода(УчетнаяПолитика.Период);
	МассивСтрок = РСНастройкиУчетаСтраховыхВзносовИП.НайтиСтроки(Новый Структура("Период, Организация", Период, УчетнаяПолитика.Организация));
	Если МассивСтрок.Количество() = 0 Тогда
		ЗначениеСтроки = РСНастройкиУчетаСтраховыхВзносовИП.Добавить();
		ЗаполнитьЗначенияСвойств(ЗначениеСтроки, УчетнаяПолитика);
	Иначе
		ЗначениеСтроки = МассивСтрок[0];
		ЗаполнитьЗначенияСвойств(ЗначениеСтроки, УчетнаяПолитика);
	КонецЕсли;
	ЗначениеСтроки.Период = Период;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиСистемыНалогообложения(РСНастройкиСистемыНалогообложения, УчетнаяПолитика, УплачиваетсяТорговыйСборБулево, УплачиваетсяТорговыйСбор)
	
	Запись = РСНастройкиСистемыНалогообложения.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, УчетнаяПолитика);
	// Обработаем исключения.
	Если УплачиваетсяТорговыйСборБулево
		И УплачиваетсяТорговыйСбор[Запись.Организация] <> Неопределено Тогда
		Запись.ПлательщикТорговогоСбора = УплачиваетсяТорговыйСбор[Запись.Организация];
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиБухгалтерскогоУчета(РСНастройкиБухгалтерскогоУчета, УчетнаяПолитика, ВариантыБухгалтерскойОтчетности)
	
	Запись = РСНастройкиБухгалтерскогоУчета.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, УчетнаяПолитика);
	// Обработаем исключения.
	Запись.ФормироватьРезервыПоСомнительнымДолгам = УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамБУ;
	Если ВариантыБухгалтерскойОтчетности[Запись.Организация] = Неопределено Тогда
		Запись.ВариантБухгалтерскойОтчетности = Перечисления.ВариантыБухгалтерскойОтчетности.ОбщиеПравила;
	Иначе
		Запись.ВариантБухгалтерскойОтчетности = ВариантыБухгалтерскойОтчетности[Запись.Организация];
	КонецЕсли;
	
	Если УчетнаяПолитика.ПоддержкаПБУ18 Тогда
		Запись.ВариантУчетаОтложенногоНалога = НалогНаПрибыльБухгалтерскийУчетКлиентСервер.ОсновнойМетодУчетаОтложенногоНалога(Запись.Период);
	Иначе
		Запись.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.Нет;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереложитьВРСНастройкиУчетаНалогаНаПрибыль(РСНастройкиУчетаНалогаНаПрибыль, НастройкиУчетаНалогаНаПрибыль)
	
	Для каждого ДанныеПоОрганизации Из УчетнаяПолитикаПоНалогуНаПрибыльОрганизаций(НастройкиУчетаНалогаНаПрибыль) Цикл
		Для каждого УчетНалогаНаПрибыль Из ДанныеПоОрганизации.Значение Цикл
			ЗаполнитьЗначенияСвойств(РСНастройкиУчетаНалогаНаПрибыль.Добавить(), УчетНалогаНаПрибыль);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбъединитьУчетнуюПолитикуИСтавки(УчетныеПолитикиОрганизаций, СтавкиНалогНаПрибыль, РегиональныеСтавки, ПрименяютсяРазныеСтавкиНалогаНаПрибыль, ПорядокУплатыАвансовПоОрганизациям)
	
	Если СтавкиНалогНаПрибыль.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для каждого КлючИЗначение Из УчетныеПолитикиОрганизаций Цикл
		ДанныеПоОрганизации = КлючИЗначение.Значение;
		Если ДанныеПоОрганизации.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Организация = КлючИЗначение.Ключ;
		РегиональныеСтавкиОрганизации = РегиональныеСтавки[Организация];
		Для каждого ПериодСтавок Из СтавкиНалогНаПрибыль Цикл
			СтрокаТаблицы = ДанныеПоОрганизации.Найти(ПериодСтавок.ПериодСтавки, "Период");
			Если СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы = ДанныеПоОрганизации.Добавить();
				СтрокаТаблицы.Период = ПериодСтавок.ПериодСтавки;
			КонецЕсли;
			
			Если ПрименяютсяРазныеСтавкиНалогаНаПрибыль Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПериодСтавок,, "СтавкаСубъектРФ");
				Если РегиональныеСтавкиОрганизации = Неопределено Тогда
					СтрокаТаблицы.СтавкаСубъектРФ = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ЗначениеПоУмолчаниюРегиональныйБюджет(СтрокаТаблицы.Период);
				КонецЕсли;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПериодСтавок);
			КонецЕсли;
		КонецЦикла;
		
		Если РегиональныеСтавкиОрганизации <> Неопределено Тогда
			Для каждого СтрокаПериода Из РегиональныеСтавкиОрганизации Цикл
				СтрокаТаблицы = ДанныеПоОрганизации.Найти(СтрокаПериода.ПериодСтавки, "Период");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = ДанныеПоОрганизации.Добавить();
					СтрокаТаблицы.Период = СтрокаПериода.ПериодСтавки;
				КонецЕсли;
				
				СтрокаТаблицы.СтавкаСубъектРФ = СтрокаПериода.СтавкаСубъектРФ;
			КонецЦикла;
		КонецЕсли;
		
		ДанныеПоОрганизации.Сортировать("Период");
	КонецЦикла;
	
	Для каждого КлючИЗначение Из УчетныеПолитикиОрганизаций Цикл
		Организация         = КлючИЗначение.Ключ;
		ДанныеПоОрганизации = КлючИЗначение.Значение;
		
		ТекущийПериодСтавки     = '00010101';
		ТекущийПериодУчПолитики = '00010101';
		
		СтрокиКУдалению = Новый Массив();
		
		Для каждого СтрокаТаблицы Из ДанныеПоОрганизации Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Организация) Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодСтавки) Тогда
					ТекущийПериодСтавки = СтрокаТаблицы.ПериодСтавки;
				КонецЕсли;
				
				ТекущийПериодУчПолитики = СтрокаТаблицы.Период;
				
				Если ЗначениеЗаполнено(ТекущийПериодСтавки) Тогда
					СтрокаТаблицы.ПериодСтавки = ТекущийПериодСтавки;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаФБ) Тогда
					ТекущийПериодСтавки = СтрокаТаблицы.Период;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекущийПериодУчПолитики) Тогда
					СтрокаТаблицы.ПериодСтавки     = ТекущийПериодСтавки;
					СтрокаТаблицы.ПериодУчПолитики = ТекущийПериодУчПолитики;
				Иначе
					СтрокиКУдалению.Добавить(СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДанныеПоОрганизации.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из ДанныеПоОрганизации Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Организация) Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодУчПолитики) Тогда
					СтрокаУчПолитики = ДанныеПоОрганизации.Найти(СтрокаТаблицы.ПериодУчПолитики, "Период");
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаУчПолитики,,
						"Период, ПериодСтавки, ПериодУчПолитики, СтавкаФБ, СтавкаСубъектРФ");
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодСтавки) Тогда
				СтрокаПериода = СтавкиНалогНаПрибыль.Найти(СтрокаТаблицы.ПериодСтавки, "ПериодСтавки");
				Если ПрименяютсяРазныеСтавкиНалогаНаПрибыль Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаПериода,, "ПериодСтавки, СтавкаСубъектРФ");
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаПериода,, "ПериодСтавки");
				КонецЕсли;
			КонецЕсли;
			
			Если ПрименяютсяРазныеСтавкиНалогаНаПрибыль И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаСубъектРФ) Тогда
				СтрокаТаблицы.СтавкаСубъектРФ = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ЗначениеПоУмолчаниюРегиональныйБюджет(СтрокаТаблицы.Период);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеПоОрганизации.ЗаполнитьЗначения(ПрименяютсяРазныеСтавкиНалогаНаПрибыль, "ПрименяютсяРазныеСтавкиНалогаНаПрибыль");
		
		Если ПорядокУплатыАвансовПоОрганизациям[Организация] = Неопределено Тогда
			ДанныеПоОрганизации.ЗаполнитьЗначения(Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежеквартально, "ПорядокУплатыАвансов");
		Иначе
			ДанныеПоОрганизации.ЗаполнитьЗначения(ПорядокУплатыАвансовПоОрганизациям[Организация], "ПорядокУплатыАвансов");
		КонецЕсли;
		
		ДанныеПоОрганизации.Колонки.Удалить("ПериодСтавки");
		ДанныеПоОрганизации.Колонки.Удалить("ПериодУчПолитики");
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДублиРегиональныхСтавок(СтавкиНалогНаПрибыль)
	
	ТекущаяСтавкаСубъектРФ = 0;
	СтрокиКУдалению = Новый Массив();
	Для каждого ПериодСтавок Из СтавкиНалогНаПрибыль Цикл
		Если ТекущаяСтавкаСубъектРФ = ПериодСтавок.СтавкаСубъектРФ Тогда
			СтрокиКУдалению.Добавить(ПериодСтавок);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		СтавкиНалогНаПрибыль.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДублиСтавок(СтавкиНалогНаПрибыль)
	
	ТекущаяСтавкаФБ        = 0;
	ТекущаяСтавкаСубъектРФ = 0;
	СтрокиКУдалению = Новый Массив();
	Для каждого ПериодСтавок Из СтавкиНалогНаПрибыль Цикл
		Если ТекущаяСтавкаФБ = ПериодСтавок.СтавкаФБ И ТекущаяСтавкаСубъектРФ = ПериодСтавок.СтавкаСубъектРФ Тогда
			СтрокиКУдалению.Добавить(ПериодСтавок);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		СтавкиНалогНаПрибыль.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегиональныеСтавки(РегиональныеСтавки)
	
	ТекущаяОрганизация = Справочники.Организации.ПустаяСсылка();
	ЗапросРазныеСтавки = Новый Запрос;
	ЗапросРазныеСтавки.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.Период, ГОД) КАК ПериодСтавки,
	|	СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.Организация КАК Организация,
	|	СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.СтавкаСубъектРФ
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ КАК СтавкиНалогаНаПрибыльВБюджетСубъектовРФ
	|ГДЕ
	|	СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период";
	
	ВыборкаСтавки = ЗапросРазныеСтавки.Выполнить().Выбрать();
	Пока ВыборкаСтавки.Следующий() Цикл
		Если ТекущаяОрганизация <> ВыборкаСтавки.Организация Тогда
			ТекущаяОрганизация = ВыборкаСтавки.Организация;
			РегиональныеСтавки.Вставить(ТекущаяОрганизация, СтавкиНалогаНаПрибыльВСубъектахРФ());
		КонецЕсли;
		ТаблицаСтавок = РегиональныеСтавки[ТекущаяОрганизация];
		МассивСтрок = ТаблицаСтавок.НайтиСтроки(Новый Структура("ПериодСтавки", ВыборкаСтавки.ПериодСтавки));
		Если МассивСтрок.Количество() = 0 Тогда
			ЗначениеСтроки = ТаблицаСтавок.Добавить();
		Иначе
			ЗначениеСтроки = МассивСтрок[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЗначениеСтроки, ВыборкаСтавки);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из РегиональныеСтавки Цикл
		УдалитьДублиРегиональныхСтавок(КлючИЗначение.Значение);
		КлючИЗначение.Значение.Индексы.Добавить("ПериодСтавки");
	КонецЦикла;
	
КонецПроцедуры

// Очищает записи регистров настроек учета (бухгалтерского и налогового).
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация,
//                 для которой требуется очистить настройки.
//
Процедура ОчисткаНастроекУчетнойПолитики(Организация) Экспорт
	
	НачатьТранзакцию();
	
	НастройкиУчетаУСН = РегистрыСведений.НастройкиУчетаУСН.СоздатьНаборЗаписей();
	НастройкиУчетаУСН.Отбор.Организация.Установить(Организация);
	НастройкиУчетаУСН.Очистить();
	
	НастройкиУчетаНДС = РегистрыСведений.НастройкиУчетаНДС.СоздатьНаборЗаписей();
	НастройкиУчетаНДС.Отбор.Организация.Установить(Организация);
	НастройкиУчетаНДС.Очистить();
	
	НастройкиУчетаНДФЛ = РегистрыСведений.НастройкиУчетаНДФЛ.СоздатьНаборЗаписей();
	НастройкиУчетаНДФЛ.Отбор.Организация.Установить(Организация);
	НастройкиУчетаНДФЛ.Очистить();
	
	НастройкиБухгалтерскогоУчета = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	НастройкиБухгалтерскогоУчета.Отбор.Организация.Установить(Организация);
	НастройкиБухгалтерскогоУчета.Очистить();
	
	НастройкиУчетаНалогаНаПрибыль = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.СоздатьНаборЗаписей();
	НастройкиУчетаНалогаНаПрибыль.Отбор.Организация.Установить(Организация);
	НастройкиУчетаНалогаНаПрибыль.Очистить();
	
	НастройкиСистемыНалогообложения = РегистрыСведений.НастройкиСистемыНалогообложения.СоздатьНаборЗаписей();
	НастройкиСистемыНалогообложения.Отбор.Организация.Установить(Организация);
	НастройкиСистемыНалогообложения.Очистить();
	
	НастройкиУчетаСтраховыхВзносовИП = РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП.СоздатьНаборЗаписей();
	НастройкиУчетаСтраховыхВзносовИП.Отбор.Организация.Установить(Организация);
	НастройкиУчетаСтраховыхВзносовИП.Очистить();
	
	НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС =
		РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.СоздатьНаборЗаписей();
	НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Отбор.Организация.Установить(Организация);
	НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Очистить();
	
	НастройкиСтраховыхВзносов = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьНаборЗаписей();
	НастройкиСтраховыхВзносов.Отбор.ГоловнаяОрганизация.Установить(Организация);
	НастройкиСтраховыхВзносов.Очистить();
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаУСН);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаНДС);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаНДФЛ);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиБухгалтерскогоУчета);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаНалогаНаПрибыль);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиСистемыНалогообложения);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаСтраховыхВзносовИП);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиСтраховыхВзносов);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ИспользуетсяКассоваяКнига()
	
	ИспользуемыеСистемыНалогообложения = РегистрыСведений.НастройкиСистемыНалогообложения.ИспользуемыеСистемыНалогообложения();
	
	СистемыНалогообложенияБезКассовойКниги = Новый Массив;
	СистемыНалогообложенияБезКассовойКниги.Добавить("ИспользуетсяНалогНаПрофессиональныйДоход");
	
	// Ведение кассовой книги включается, если есть хотя бы одна "включенная" система налогообложения,
	// за исключением перечисленных в СистемыНалогообложенияБезКассовойКниги
	ИспользуетсяКассоваяКнига = Ложь;
	Для Каждого СистемаНалогообложения Из ИспользуемыеСистемыНалогообложения Цикл
		
		Если СистемыНалогообложенияБезКассовойКниги.Найти(СистемаНалогообложения.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользуетсяКассоваяКнига = ИспользуетсяКассоваяКнига Или СистемаНалогообложения.Значение;
		
	КонецЦикла;
	
	Возврат ИспользуетсяКассоваяКнига;
	
КонецФункции

#КонецОбласти

#КонецОбласти
