#Область ПрограммныйИнтерфейс

Функция ПоместитьДанныеОтчетаВЖурналОперацийСФайлами(Идентификатор, ДополнительныеПараметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	ИмяФайла = ДополнительныеПараметры.ИмяПакета;
	
	ОбъектФайл = Новый Файл(ИмяФайла);
	СтрокаВложений = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
	
	СтрокаВложений.Организация = ДополнительныеПараметры.Организация;
	СтрокаВложений.Идентификатор = Идентификатор;
	СтрокаВложений.Предмет = ДополнительныеПараметры.Отчет;
	СтрокаВложений.ИсходныеДанные    = ПолучитьИзВременногоХранилища(ДополнительныеПараметры.ДанныеОтчета);
	СтрокаВложений.ИсходноеИмяФайла  = ИмяФайла;
	
	// Определяем тип содержимого файла.
	Если ОбъектФайл.Расширение = "txt" Тогда
		ТипСодержимого = УниверсальныйОбменСБанками.ТипСодержимогоТекстовогоФайлаПоКодировке(КодировкаТекста.ANSI);
	Иначе
		ТипСодержимого = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(ИмяФайла);
	КонецЕсли;
	
	СтрокаВложений.ТипСодержимого    = ТипСодержимого;
	СтрокаВложений.ТипДокумента      = Перечисления.ТипыДокументовОбменаСБанкамиФинОтчетность.Отчетность;
	СтрокаВложений.Подписать         = Истина;
	СтрокаВложений.Зашифровать       = Истина;
	СтрокаВложений.Сжать             = Истина;
	СтрокаВложений.Сервис            = ДополнительныеПараметры.Сервис;
	СтрокаВложений.БанкиПолучатели.Добавить(ДополнительныеПараметры.Банк);
	
	РезультаПомещения = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(СтрокаВложений);
	Если НЕ РезультаПомещения.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультаПомещения.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру с информацией о сервисе финансовой отчетности.
// 
// Возвращаемое значение:
//	Структура - см. УниверсальныйОбменСБанками.СведенияОСервисе().
//
Функция СведенияОСервисе() Экспорт

	Возврат УниверсальныйОбменСБанками.СведенияОСервисе(Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность);

КонецФункции

Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено,
			ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта,
			КлючНастроек,
			Настройки,
			ОписаниеНастроек,
			ИмяПользователя,
			ОбновитьПовторноИспользуемыеЗначения);
	
КонецПроцедуры

Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено, 
			ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			КлючОбъекта,
			КлючНастроек,
			ЗначениеПоУмолчанию,
			ОписаниеНастроек,
			ИмяПользователя);
	
КонецФункции

Функция ДатаПоследнейТранзакции(Транзакции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	ТранзакцииОбменаСБанками.ДатаТранспорта КАК ДатаТранспорта
	               |ИЗ
	               |	Справочник.ТранзакцииОбменаСБанками КАК ТранзакцииОбменаСБанками
	               |ГДЕ
	               |	ТранзакцииОбменаСБанками.Ссылка В(&Транзакции)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаТранспорта УБЫВ";
	Запрос.УстановитьПараметр("Транзакции", Транзакции);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Дата(1, 1, 1);
	Пока Выборка.Следующий() Цикл
		Результат = Выборка.ДатаТранспорта;
		Прервать;
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

Функция ТипыДокументовПротокола() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ТипыДокументовОбменаСБанкамиФинОтчетность.ИзвещениеОСдачеОтчетности);
	Результат.Добавить(Перечисления.ТипыДокументовОбменаСБанкамиФинОтчетность.ИзвещениеОбОтказеПриемаОтчетности);
	Результат.Добавить(Перечисления.ТипыДокументовОбменаСБанками.ОписаниеОшибок);
	
	Возврат Результат;
	
КонецФункции

Функция ТипыТранзакцийПротокола() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ТипыТранзакцийОбменаСБанкамиФинОтчетность.ОтчетностьНеПринята);
	Результат.Добавить(Перечисления.ТипыТранзакцийОбменаСБанкамиФинОтчетность.ОтчетностьСдана);
	
	Возврат Результат;
	
КонецФункции

Функция ДоступныеБанки(ВключаяНеактивные = Ложь) Экспорт
	
	Возврат ФинОтчетностьВБанки.ДоступныеБанки(ВключаяНеактивные);
	
КонецФункции

#КонецОбласти