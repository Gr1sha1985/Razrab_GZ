#Область ПрограммныйИнтерфейс

// Функция возвращает таблицу уведомлений в соответствии с установленным отбором
// в хронологическом порядке по убыванию
//
// Параметры:
//  Отбор - Структура - задает условия поиска:
//    * Организация    - СправочникСсылка.Организации
//    * ВидУведомления  - ПеречислениеСсылка.ВидыУведомленийОСпецрежимахНалогообложения
//    * ИмяФормы        - Строка
//
// Возвращаемое значение:
//  ТаблицаЗначений
//    * Ссылка - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения
//    * Дата - Дата
//    * ИмяФормы - Строка - имя формы
//
Функция НайтиУведомления(Отбор) Экспорт
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УведомлениеОСпецрежимахНалогообложения.Ссылка КАК Ссылка,
		|	УведомлениеОСпецрежимахНалогообложения.Дата КАК Дата,
		|	УведомлениеОСпецрежимахНалогообложения.ИмяФормы КАК ИмяФормы
		|ИЗ
		|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
		|ГДЕ
		|	НЕ УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления";
	
	Организация = Неопределено;
	Если Отбор.Свойство("Организация", Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
		ТекстЗапроса = ТекстЗапроса + "
		|	И УведомлениеОСпецрежимахНалогообложения.Организация = &Организация";
	КонецЕсли;
	
	ВидУведомления = Неопределено;
	Если Отбор.Свойство("ВидУведомления", ВидУведомления) Тогда
		Запрос.УстановитьПараметр("ВидУведомления", ВидУведомления);
		ТекстЗапроса = ТекстЗапроса + "
		|	И УведомлениеОСпецрежимахНалогообложения.ВидУведомления = &ВидУведомления";
	КонецЕсли;
	
	ИмяФормы = Неопределено;
	Если Отбор.Свойство("ИмяФормы", ИмяФормы) Тогда
		Запрос.УстановитьПараметр("ИмяФормы", ИмяФормы);
		ТекстЗапроса = ТекстЗапроса + "
		|	И УведомлениеОСпецрежимахНалогообложения.ИмяФормы = &ИмяФормы";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает таблицу уведомлений в соответствии с установленным отбором
// в хронологическом порядке по убыванию
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//  Неопределено, если данных нет (нет формы Р11001)
//  Структура с ключами
//      - УставныйКапитал - Число, размер уставного капитала в рублях (1)
//      - Учредители - Таблица значений с колонками
//          - ИНН - Строка, ИНН учредителя (2.1)
//          - Учредитель - Строка, наименование учредителя (2.2)
//          - СуммаКапитала - Число - стоимость доли в уставном капитале (2.3)
//
Функция ПолучитьСведенияОбУставномКапиталеФормыР11001(Организация) Экспорт 
	Если Метаданные.Отчеты.Найти("РегламентированноеУведомлениеФормаР11001") = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УведомлениеОСпецрежимахНалогообложения.Ссылка
		|ИЗ
		|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
		|ГДЕ
		|	УведомлениеОСпецрежимахНалогообложения.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР11001)
		|	И УведомлениеОСпецрежимахНалогообложения.Организация = &Организация
		|	И НЕ УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	УведомлениеОСпецрежимахНалогообложения.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Отчеты["РегламентированноеУведомлениеФормаР11001"].ПолучитьДанныеОтчета(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Возвращает поэлементное разложение адреса ФИАС в JSON-представлении для заполнения заявлений на регистрацию ИП и ЮЛ.
//
// Параметры:
//   Адрес - JSON-представление ареса в формате ФИАС;
//   ДополнительныеПараметры - дополнительные параметры для разбора адреса.
//
/// Возвращаемое значение:
//   Структура - значения элементов адреса для заполнения заявлений.
//
Функция АдресВФорматеФИАС(Адрес, ДополнительныеПараметры = Неопределено) Экспорт
	
	ВозвращаемыйАдрес = Новый Структура;
	ВозвращаемыйАдрес.Вставить("СтрокаАдресногоОбъекта", Адрес);
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		ПараметрыСокращения = Новый Структура("КодыАдреса", Истина);
		СтруктураАдресаЗаписи = РаботаСАдресами.СведенияОбАдресеПриказМинфинаРФ171н(Адрес, ПараметрыСокращения);
	Иначе
		СтруктураАдресаЗаписи = РаботаСАдресамиКлиентСервер.КонструкторПолейАдреса();
		СтруктураАдресаЗаписи.Вставить("КодМуниципальногоРайона", "");
		СтруктураАдресаЗаписи.Вставить("КодПоселения", "");
	КонецЕсли;
	
	ОдноименныеСвойства = Новый Массив;
	ОдноименныеСвойства.Добавить("Индекс");
	ОдноименныеСвойства.Добавить("КодРегиона");
	ОдноименныеСвойства.Добавить("МуниципальныйРайон");
	ОдноименныеСвойства.Добавить("Поселение");
	ОдноименныеСвойства.Добавить("НаселенныйПункт");
	ОдноименныеСвойства.Добавить("Территория");
	ОдноименныеСвойства.Добавить("Улица");
	ОдноименныеСвойства.Добавить("НомерЗемельногоУчастка");
	
	// Временно.
	ОдноименныеСвойства.Добавить("ПоселениеСокращение");
	
	Для Каждого ИмяСвойства Из ОдноименныеСвойства Цикл
		ВозвращаемыйАдрес.Вставить(ИмяСвойства,
			?(СтруктураАдресаЗаписи.Свойство(ИмяСвойства), СтруктураАдресаЗаписи[ИмяСвойства], ""));
	КонецЦикла;
	
	ВозвращаемыйАдрес.Вставить("НаселенныйПунктВид", СтруктураАдресаЗаписи.НаселенныйПунктТипКраткий);
	ВозвращаемыйАдрес.Вставить("ТерриторияТип", СтруктураАдресаЗаписи.ТерриторияТипКраткий);
	ВозвращаемыйАдрес.Вставить("УлицаТип", СтруктураАдресаЗаписи.УлицаТипКраткий);
	
	// Учет особенности возвращаемых БСП сведений об адресе в формате ФИАС
	// (не заполнен населенный пункт, но заполнен город).
	ПолучатьНаселенныйПунктИзГорода =
		НЕ ЗначениеЗаполнено(СтруктураАдресаЗаписи.НаселенныйПункт)
		И ЗначениеЗаполнено(СтруктураАдресаЗаписи.Город);
	Если ПолучатьНаселенныйПунктИзГорода Тогда
		ВозвращаемыйАдрес.Вставить("НаселенныйПункт", СтруктураАдресаЗаписи.Город);
		ВозвращаемыйАдрес.Вставить("НаселенныйПунктВид", СтруктураАдресаЗаписи.ГородТипКраткий);
	КонецЕсли;
	
	// Идентификатор дома или адресного объекта.
	ЗначениеСвойства = "";
	СтруктураАдресаЗаписи.Свойство("ИдентификаторДома", ЗначениеСвойства);
	Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		СтруктураАдресаЗаписи.Свойство("ИдентификаторАдресногоОбъекта", ЗначениеСвойства);
	КонецЕсли;
	ВозвращаемыйАдрес.Вставить("ИдентификаторАдресногоОбъекта",
		?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, ""));
	
	// Муниципальные райны.
	ВозвращаемыйАдрес.Вставить("МуниципальныйРайонВид", СтруктураАдресаЗаписи.КодМуниципальногоРайона);
	Сокращение = НРег(СокрЛП(СтрЗаменить(СтруктураАдресаЗаписи.МуниципальныйРайонТипКраткий, " ", "")));
	Если Сокращение = "м.р-н" Тогда
		ВозвращаемыйАдрес.МуниципальныйРайон = ОбрезанноеНазвание(ВозвращаемыйАдрес.МуниципальныйРайон, "Муниципальный район");
	ИначеЕсли Сокращение = "г.о.вн.д." ИЛИ Сокращение = "г.о." Тогда
		ВозвращаемыйАдрес.МуниципальныйРайон = ОбрезанноеНазвание(ВозвращаемыйАдрес.МуниципальныйРайон, "Городской округ с внутригородским делением");
		ВозвращаемыйАдрес.МуниципальныйРайон = ОбрезанноеНазвание(ВозвращаемыйАдрес.МуниципальныйРайон, "Городской округ");
	ИначеЕсли Сокращение = "вн.тер." ИЛИ Сокращение = "вн.тер.г." Тогда
		ВозвращаемыйАдрес.МуниципальныйРайон = ОбрезанноеНазвание(ВозвращаемыйАдрес.МуниципальныйРайон, "Внутригородская территория города федерального значения");
		ВозвращаемыйАдрес.МуниципальныйРайон = ОбрезанноеНазвание(ВозвращаемыйАдрес.МуниципальныйРайон, "Внутригородская территория");
	ИначеЕсли Сокращение = "м.о." Тогда
		ВозвращаемыйАдрес.МуниципальныйРайон = ОбрезанноеНазвание(ВозвращаемыйАдрес.МуниципальныйРайон, "Муниципальный округ");
	КонецЕсли;
	
	// Поселения.
	ВозвращаемыйАдрес.Вставить("ПоселениеВид", СтруктураАдресаЗаписи.КодПоселения);
	Сокращение = НРег(СокрЛП(СтрЗаменить(СтруктураАдресаЗаписи.ПоселениеТипКраткий, " ", "")));
	Если Сокращение = "г.п." Тогда
		ВозвращаемыйАдрес.Поселение = ОбрезанноеНазвание(ВозвращаемыйАдрес.Поселение, "Городское поселение");
	ИначеЕсли Сокращение = "с.п." Тогда
		ВозвращаемыйАдрес.Поселение = ОбрезанноеНазвание(ВозвращаемыйАдрес.Поселение, "Сельское поселение");
	ИначеЕсли Сокращение = "вн.р-н" Тогда
		ВозвращаемыйАдрес.Поселение = ОбрезанноеНазвание(ВозвращаемыйАдрес.Поселение, "Внутригородской район");
	КонецЕсли;
	
	// Идентификационные элементы объекта адресации.
	Здания = Новый Массив;
	
	ЗданиеТип   = СтруктураАдресаЗаписи.Здание.ТипЗдания;
	ЗданиеНомер = СтруктураАдресаЗаписи.Здание.Номер;
	Если ЗначениеЗаполнено(ЗданиеТип) И ЗначениеЗаполнено(ЗданиеНомер) Тогда
		Здания.Добавить(Новый Структура("ЗданиеТип, ЗданиеНомер", ЗданиеТип, ЗданиеНомер));
	КонецЕсли;
	
	Корпуса = СтруктураАдресаЗаписи.Корпуса;
	Для Каждого Корпус Из Корпуса Цикл
		КорпусТип = Корпус.ТипКорпуса;
		КорпусНомер = Корпус.Номер;
		Если ЗначениеЗаполнено(КорпусТип) И ЗначениеЗаполнено(КорпусНомер) Тогда
			Здания.Добавить(Новый Структура("ЗданиеТип, ЗданиеНомер", КорпусТип, КорпусНомер));
		КонецЕсли;
	КонецЦикла;
	
	ВозвращаемыйАдрес.Вставить("Здания", Здания);
	
	// Помещения внутри здания.
	Помещения = Неопределено;
	ПомещениеВЗданииТип     = "";
	ПомещениеВЗданииНомер   = "";
	ПомещениеВКвартиреТип   = "";
	ПомещениеВКвартиреНомер = "";
	
	// Структура массива соответствует иерархии помещений в здании.
	Помещения = СтруктураАдресаЗаписи.Помещения;
	Если Помещения.Количество() > 0 Тогда
		ПомещениеВЗданииТип = Помещения[0].ТипПомещения;
		ПомещениеВЗданииНомер = Помещения[0].Номер;
	КонецЕсли;
	
	Если Помещения.Количество() > 1 Тогда
		ПомещениеВКвартиреТип = Помещения[1].ТипПомещения;
		ПомещениеВКвартиреНомер = Помещения[1].Номер;
	КонецЕсли;
	
	ВозвращаемыйАдрес.Вставить("ПомещениеВЗданииТип",     ПомещениеВЗданииТип);
	ВозвращаемыйАдрес.Вставить("ПомещениеВЗданииНомер",   ПомещениеВЗданииНомер);
	ВозвращаемыйАдрес.Вставить("ПомещениеВКвартиреТип",   ПомещениеВКвартиреТип);
	ВозвращаемыйАдрес.Вставить("ПомещениеВКвартиреНомер", ПомещениеВКвартиреНомер);
	
	// Устаревшие поля для обратной совместимости.
	ВозвращаемыйАдрес.Вставить("МуниципальныйРайонСокращение", "");
	ВозвращаемыйАдрес.Вставить("ПоселениеСокращение", "");
	ВозвращаемыйАдрес.Вставить("НаселенныйПунктСокращение", "");
	
	Возврат ВозвращаемыйАдрес;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СведенияИзФормРегистрации(Уведомление) Экспорт 
	Попытка
		Если ТипЗнч(Уведомление) <> Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		РеквизитыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Уведомление, "ИмяОтчета,ИмяФормы,ДанныеУведомления");
		МодульУведомления = ОбщегоНазначения.ОбщийМодуль("Отчеты." + РеквизитыУведомления.ИмяОтчета);
		Возврат МодульУведомления.СведенияИзФормРегистрации(РеквизитыУведомления.ИмяФормы , РеквизитыУведомления.ДанныеУведомления);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Процедура СформироватьСтруктуруДанныхУведомленияРек(Форма, ИмяОтчета, Строка)
	Для Каждого ПодчМнг Из Строка.ПолучитьЭлементы() Цикл
		Если ПодчМнг.ПолучитьЭлементы().Количество() > 0 Тогда
			СформироватьСтруктуруДанныхУведомленияРек(Форма, ИмяОтчета, ПодчМнг);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодчМнг.ИДНаименования) Тогда 
			СтруктураМногостраничнойСтраницыПодч = Новый Структура("УИД, УИДРодителя", ПодчМнг.УИД, ПолучитьУИДРодителя(ПодчМнг));
			МакетДокумента = Отчеты[ИмяОтчета].ПолучитьМакет(ПодчМнг.ИмяМакета);
			Для Каждого Обл Из МакетДокумента.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
					И Обл.СодержитЗначение Тогда 
					
					СтруктураМногостраничнойСтраницыПодч.Вставить(Обл.Имя);
				КонецЕсли;
			КонецЦикла;
			
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(СтруктураМногостраничнойСтраницыПодч);
			Форма.ДанныеМногостраничныхРазделов.Вставить(ПодчМнг.ИДНаименования, СЗ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьСтруктуруДанныхУведомления(Форма, ЕстьМногостраничность = Ложь) Экспорт 
	Форма.ДанныеУведомления = Новый Структура;
	Если ЕстьМногостраничность Тогда 
		Форма.ДанныеМногостраничныхРазделов = Новый Структура;
	КонецЕсли;
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	
	Для Каждого Стр Из Форма.ДеревоСтраниц.ПолучитьЭлементы() Цикл
		Если Стр.Многостраничность Тогда 
			Если Стр.Многострочность Тогда
				// пока пусто
			Иначе
				МнгСтр = Стр.ПолучитьЭлементы()[0];
				
				СтруктураМногостраничнойСтраницы = Новый Структура("УИД", МнгСтр.УИД);
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(МнгСтр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				
				Если МнгСтр.ПолучитьЭлементы().Количество() > 0 Тогда
					СформироватьСтруктуруДанныхУведомленияРек(Форма, Разложение[1], МнгСтр);
				КонецЕсли;
				
				СЗ = Новый СписокЗначений;
				СЗ.Добавить(СтруктураМногостраничнойСтраницы);
				Форма.ДанныеМногостраничныхРазделов.Вставить(МнгСтр.ИДНаименования, СЗ);
			КонецЕсли;
		Иначе
			Если Стр.Многострочность Тогда
				ОбластиВМногостраничнойЧасти = Новый Соответствие;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого Мнг Из Стр.МногострочныеЧасти Цикл
					Для Каждого Обл Из МакетДокумента.ПолучитьОбласть(Мнг.Значение).Области Цикл 
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
							И Обл.СодержитЗначение Тогда 
							
							ОбластиВМногостраничнойЧасти.Вставить(Обл.Имя, Истина);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение
						И ОбластиВМногостраничнойЧасти[Обл.Имя] = Неопределено Тогда 
						
						СтруктураСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				Форма.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
			Иначе
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				Форма.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьСпискиВыбора(Форма, ИмяМакета) Экспорт
	Форма.СпискиВыбора.Очистить();
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	МакетСписковВыбора = Отчеты[Разложение[1]].ПолучитьМакет(ИмяМакета);
	
	ОблВсеСписки = МакетСписковВыбора.Области.Найти("КоллекцияСписков");
	Если ОблВсеСписки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ОблВсеСписки.Верх;
	Пока ТекущаяСтрока <= ОблВсеСписки.Низ Цикл
		ИДНаименования = МакетСписковВыбора.Область(ТекущаяСтрока, 1, ТекущаяСтрока, 1).Текст;
		Если Не ЗначениеЗаполнено(ИДНаименования) Тогда 
			Прервать;
		КонецЕсли;
		
		ИмяПоля = МакетСписковВыбора.Область(ТекущаяСтрока, 2, ТекущаяСтрока, 2).Текст;
		ИмяСписка = МакетСписковВыбора.Область(ТекущаяСтрока, 3, ТекущаяСтрока, 3).Текст;
		
		Список = МакетСписковВыбора.Область(ИмяСписка);
		ТС = Список.Верх;
		Пока ТС <= Список.Низ Цикл
			Код = МакетСписковВыбора.Область(ТС, 1, ТС, 1).Текст;
			Наименование = МакетСписковВыбора.Область(ТС, 2, ТС, 2).Текст;
			Если Не ЗначениеЗаполнено(Код) И Не ЗначениеЗаполнено(Наименование) Тогда 
				Прервать;
			КонецЕсли;
			
			НовСтр = Форма.СпискиВыбора.Добавить();
			НовСтр.ИДНаименования = ИДНаименования;
			НовСтр.ИмяПоля = ИмяПоля;
			НовСтр.Код = Код;
			НовСтр.Наименование = Наименование;
			
			ТС = ТС + 1;
		КонецЦикла;
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЦикла;
КонецПроцедуры

Функция ЭтоПолеАдресаРегистрационныхЗаявлений(Поле) Экспорт 
	НрегПоле = НРег(Поле);
	Если СтрЗаканчиваетсяНа(НрегПоле, "типдома")
		Или СтрЗаканчиваетсяНа(НрегПоле, "дом")
		Или СтрЗаканчиваетсяНа(НрегПоле, "типкорпуса")
		Или СтрЗаканчиваетсяНа(НрегПоле, "корпус")
		Или СтрЗаканчиваетсяНа(НрегПоле, "типквартиры")
		Или СтрЗаканчиваетсяНа(НрегПоле, "квартира") Тогда 
		
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ВывестиСтрокуНаПечатьСКонтролемДляРегистрационныхЗаявлений(Строка, ПрефиксПараметра, ОбластиМакета, СимволПоУмолчанию = "", ВыходЗаПределы = Ложь) Экспорт 
	ДлинаСтроки = СтрДлина(Строка);
	
	ИмяПараметра = ПрефиксПараметра + "_" + Формат(ДлинаСтроки, "ЧГ=");
	Если ДлинаСтроки > 1 И ОбластиМакета.Найти(ИмяПараметра) = Неопределено И ОбластиМакета.Найти(ПрефиксПараметра + "_1") <> Неопределено Тогда 
		ВыходЗаПределы = Истина;
	КонецЕсли;
	
	ВывестиСтрокуНаПечать(Строка, ПрефиксПараметра, ОбластиМакета, СимволПоУмолчанию);
КонецПроцедуры

Процедура ВывестиСтрокуНаПечать(Строка, ПрефиксПараметра, ОбластиМакета, СимволПоУмолчанию = "") Экспорт 
	ДлинаСтроки = СтрДлина(Строка);
	Индекс = 1;
	
	Пока Истина Цикл 
		ИмяПараметра = ПрефиксПараметра + "_" + Формат(Индекс, "ЧГ=");
		Обл = ОбластиМакета.Найти(ИмяПараметра);
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Если Индекс > ДлинаСтроки Тогда 
			Если ЗначениеЗаполнено(СимволПоУмолчанию) Тогда 
				Обл.Текст = СимволПоУмолчанию;
				Индекс = Индекс + 1;
			Иначе 
				Прервать;
			КонецЕсли;
		Иначе 
			Обл.Текст = Сред(Строка, Индекс, 1);
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВывестиЧислоНаПечать(знач Число, ПрефиксПараметра, ОбластиМакета) Экспорт
	Число = ?(ЗначениеЗаполнено(Число), Число, 0);
	Инд = 1;
	ИмяПараметра = ПрефиксПараметра + "_1";
	Область = ОбластиМакета.Найти(ИмяПараметра);
	ЗнаковПослеЗапятой = 0;
	
	Если Область = Неопределено 
		Или Область.Лево <> Область.Право Тогда 
		Возврат;
	КонецЕсли;
	
	Координата = Область.Лево;
	
	Пока Истина Цикл 
		Инд = Инд + 1;
		ИмяПараметра = ПрефиксПараметра + "_" + Инд;
		Область = ОбластиМакета.Найти(ИмяПараметра);
		Если Область = Неопределено 
			Или Область.Лево <> Область.Право Тогда 
			Прервать;
		КонецЕсли;
		
		Если ЗнаковПослеЗапятой > 0 
			Или Область.Лево > Координата + 1 Тогда 
			
			ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
		КонецЕсли;
		
		Координата = Координата + 1;
	КонецЦикла;
	
	Если Число = 0 Тогда 
		Ч = "0" + Прав(Формат(Pow(10, ЗнаковПослеЗапятой), "ЧГ="), ЗнаковПослеЗапятой);
		Ч = Прав("                                " + Ч, Инд - 1);
	Иначе 
		Ч = Формат(Цел(Число * Pow(10, ЗнаковПослеЗапятой)), "ЧГ=");
		Если СтрДлина(Ч) < ЗнаковПослеЗапятой + 1 Тогда
			Ч = Прав("000000000000000000000000000000" + Ч, ЗнаковПослеЗапятой + 1);
		КонецЕсли;
		Ч = Прав("                                " + Ч, Инд - 1);
	КонецЕсли;
	ВывестиСтрокуНаПечать(Ч, ПрефиксПараметра, ОбластиМакета);
КонецПроцедуры

Процедура ВывестиЧислоСПрочеркамиНаПечать(Знач Число, ПрефиксПараметра, ОбластиМакета) Экспорт
	Число = ?(ЗначениеЗаполнено(Число), Число, 0);
	Инд = 1;
	ИмяПараметра = ПрефиксПараметра + "_1";
	Область = ОбластиМакета.Найти(ИмяПараметра);
	ЗнаковПослеЗапятой = 0;
	ЗнаковДоЗапятой = 1;
	
	Если Область = Неопределено 
		Или Область.Лево <> Область.Право Тогда 
		Возврат;
	КонецЕсли;
	
	Координата = Область.Лево;
	
	Пока Истина Цикл 
		Инд = Инд + 1;
		ИмяПараметра = ПрефиксПараметра + "_" + Инд;
		Область = ОбластиМакета.Найти(ИмяПараметра);
		Если Область = Неопределено 
			Или Область.Лево <> Область.Право Тогда 
			Прервать;
		КонецЕсли;
		
		ЗнаковДоЗапятой = ЗнаковДоЗапятой + 1;
		Если ЗнаковПослеЗапятой > 0 
			Или Область.Лево > Координата + 1 Тогда 
			
			ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
			ЗнаковДоЗапятой = ЗнаковДоЗапятой - 1;
		КонецЕсли;
		
		Координата = Координата + 1;
	КонецЦикла;
	
	Если Число = 0 Тогда 
		Ч = "-------------------------------------------------";
	Иначе
		Ч = Лев(Формат(Цел(Число), "ЧН=0; ЧГ=") + "-------------------------------------------------", ЗнаковДоЗапятой);
		Ч2 = Прав("00000000000000000000000000000000000000000000" + Формат(   (Число - Цел(Число)) * Pow(10, ЗнаковПослеЗапятой), "ЧГ="), ЗнаковПослеЗапятой);
		Пока Прав(Ч2, 1) = "0" Цикл 
			Ч2 = Лев(Ч2, СтрДлина(Ч2) - 1);
		КонецЦикла;
		Ч = Ч + Ч2 + "-------------------------------------------------";
	КонецЕсли;
	УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(Ч, ПрефиксПараметра, ОбластиМакета);
КонецПроцедуры

Процедура ВывестиДатуНаПечать(Дата, ПрефиксПараметра, ОбластиМакета, СимволПоУмолчанию = "") Экспорт 
	Если Не ЗначениеЗаполнено(Дата) 
		И ЗначениеЗаполнено(СимволПоУмолчанию)
		И ОбластиМакета.Найти(ПрефиксПараметра + "_1") <> Неопределено Тогда 
		
		Для Инд = 1 По 8 Цикл 
			ОбластиМакета[ПрефиксПараметра + "_" + Инд].Текст = СимволПоУмолчанию;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Дата) Или ОбластиМакета.Найти(ПрефиксПараметра + "_1") = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	День = День(Дата);
	Месяц = Месяц(Дата);
	Год = Год(Дата);
	
	Если День < 10 Тогда
		ОбластиМакета[ПрефиксПараметра + "_1"].Текст = "0";
		ОбластиМакета[ПрефиксПараметра + "_2"].Текст = "" + День;
	Иначе
		ОбластиМакета[ПрефиксПараметра + "_1"].Текст = "" + Цел(День/10);
		ОбластиМакета[ПрефиксПараметра + "_2"].Текст = "" + День%10;
	КонецЕсли;
	
	Если Месяц < 10 Тогда
		ОбластиМакета[ПрефиксПараметра + "_3"].Текст = "0";
		ОбластиМакета[ПрефиксПараметра + "_4"].Текст = "" + Месяц;
	Иначе
		ОбластиМакета[ПрефиксПараметра + "_3"].Текст = "1";
		ОбластиМакета[ПрефиксПараметра + "_4"].Текст = "" + (Месяц - 10);
	КонецЕсли;
	
	ГТ = Цел(Год/1000);
	ГС = Цел((Год%1000)/100);
	ГД = Цел((Год%100)/10);
	ГЕ = Год%10;
	
	ОбластиМакета[ПрефиксПараметра + "_5"].Текст = "" + ГТ;
	ОбластиМакета[ПрефиксПараметра + "_6"].Текст = "" + ГС;
	ОбластиМакета[ПрефиксПараметра + "_7"].Текст = "" + ГД;
	ОбластиМакета[ПрефиксПараметра + "_8"].Текст = "" + ГЕ;
КонецПроцедуры

Процедура ВывестиОКВЭДНаПечать(ОКВЭД, ПрефиксПараметра, ОбластиМакета) Экспорт 
	Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОКВЭД, ".");
	Подстроки.Добавить("");
	Подстроки.Добавить("");
	Подстроки.Добавить("");
	Подстроки[0] = Прав("   " + Подстроки[0], 2);
	Подстроки[1] = Лев(Подстроки[1]+"   ", 2);
	Подстроки[2] = Лев(Подстроки[2]+"   ", 2);
	
	ВывестиСтрокуНаПечать(Подстроки[0]+Подстроки[1]+Подстроки[2], ПрефиксПараметра, ОбластиМакета);
КонецПроцедуры

Функция НовыйПустойЛист() Экспорт 
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ПолеСверху = 5;
	ПечатнаяФорма.ПолеСправа = 5;
	ПечатнаяФорма.ПолеСнизу  = 5;
	ПечатнаяФорма.ПолеСлева  = 5;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	Возврат ПечатнаяФорма;
КонецФункции

Процедура ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр, ВыводитьТолькоЗаполненые = Истина) Экспорт 
	Если ВыводитьТолькоЗаполненые Тогда 
		ПФЗаполнена = Ложь;
		Для Каждого Параметр Из ПечатнаяФорма.Параметры Цикл 
			Если ЗначениеЗаполнено(Параметр) Тогда 
				ПФЗаполнена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Обл Из ПечатнаяФорма.Области Цикл 
			Если ПФЗаполнена Тогда 
				Прервать;
			КонецЕсли;
			
			Если СтрНачинаетсяС(НРег(Обл.Имя), "номстр_") Тогда 
				Продолжить;
			КонецЕсли;
			
			ПФЗаполнена = ЗначениеЗаполнено(Обл.Текст);
		КонецЦикла;
	Иначе
		ПФЗаполнена = Истина;
	КонецЕсли;
	
	Если Не ПФЗаполнена Тогда 
		НомСтр = НомСтр - 1;
		ПечатнаяФорма = НовыйПустойЛист();
		Возврат;
	КонецЕсли;
	
	Лист = Новый Массив;
	Лист.Добавить(ПоместитьВоВременноеХранилище(ПечатнаяФорма));
	Лист.Добавить(Новый УникальныйИдентификатор);
	Лист.Добавить("Лист " + НомСтр);
	Листы.Добавить(Лист, "Лист " + НомСтр);
	
	ПечатнаяФорма = НовыйПустойЛист();
КонецПроцедуры

Процедура НачальныеОперацииСМногострочнымиБлоками(Форма) Экспорт
	Для Каждого Стр Из Форма.ДеревоСтраниц.ПолучитьЭлементы() Цикл
		Если Стр.Многострочность Тогда
			Для Каждого Мнг Из Стр.МногострочныеЧасти Цикл
				Форма[Мнг.Значение].Очистить();
				Форма[Мнг.Значение].Добавить();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СтраницаЗаполнена(Данные) Экспорт 
	Для Каждого КЗ Из Данные Цикл
		Если ТипЗнч(КЗ.Значение) = Тип("УникальныйИдентификатор") Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КЗ.Значение) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция МногострочнаяЧастьЗаполнена(Данные) Экспорт 
	Колонки = Данные.Колонки;
	Для Каждого Стр Из Данные Цикл 
		Для Каждого Колонка Из Данные.Колонки Цикл 
			Если ЗначениеЗаполнено(Стр[Колонка.Имя]) Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура ЗаполнитьТаблицуФорматов(Форма, ИмяМакета) Экспорт
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	МакетФорматов = Отчеты[Разложение[1]].ПолучитьМакет(ИмяМакета);
	ТЧ = Новый ОписаниеТипов("Число");
	
	Стр = 0;
	Пока Истина Цикл 
		Стр = Стр + 1;
		ИДСтраницы = МакетФорматов.Область(Стр, 1, Стр, 1).Текст;
		Поле = МакетФорматов.Область(Стр, 2, Стр, 2).Текст;
		Всего = ТЧ.ПривестиЗначение(МакетФорматов.Область(Стр, 3, Стр, 3).Текст);
		ПослеЗапятой = ТЧ.ПривестиЗначение(МакетФорматов.Область(Стр, 4, Стр, 4).Текст);
		Неотрицательный = ЗначениеЗаполнено(МакетФорматов.Область(Стр, 5, Стр, 5).Текст);
		
		Если Не ЗначениеЗаполнено(ИДСтраницы) Или Не ЗначениеЗаполнено(Поле)
			Или Не ЗначениеЗаполнено(Всего) Или Не ЗначениеЗаполнено(ПослеЗапятой) Тогда 
			Прервать;
		КонецЕсли;
		
		НовСтр = Форма.ЧисловыеФорматы.Добавить();
		НовСтр.ИДСтраницы = ИДСтраницы;
		НовСтр.Поле = Поле;
		НовСтр.Всего = Всего;
		НовСтр.ПослеЗапятой = ПослеЗапятой;
		НовСтр.Неотрицательный = Неотрицательный;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТаблицуТекстовыхФорматов(Форма, ИмяМакета) Экспорт
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	МакетФорматов = Отчеты[Разложение[1]].ПолучитьМакет(ИмяМакета);
	ТЧ = Новый ОписаниеТипов("Число");
	
	Стр = 0;
	Пока Истина Цикл 
		Стр = Стр + 1;
		ИДСтраницы = МакетФорматов.Область(Стр, 1, Стр, 1).Текст;
		Поле = МакетФорматов.Область(Стр, 2, Стр, 2).Текст;
		ДлСтроки = ТЧ.ПривестиЗначение(МакетФорматов.Область(Стр, 3, Стр, 3).Текст);

		Если Не ЗначениеЗаполнено(ИДСтраницы) Или Не ЗначениеЗаполнено(Поле)
			Или Не ЗначениеЗаполнено(ДлСтроки) Тогда 
			Прервать;
		КонецЕсли;
		
		НовСтр = Форма.ТекстовыеФорматы.Добавить();
		НовСтр.ИДСтраницы = ИДСтраницы;
		НовСтр.Поле = Поле;
		НовСтр.ДлСтроки = ДлСтроки;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьФорматыВПолях(Форма) Экспорт
	ПоляСФорматами = Форма.ЧисловыеФорматы.НайтиСтроки(Новый Структура("ИДСтраницы", Форма.ТекущееИДНаименования));
	Для Каждого Стр Из ПоляСФорматами Цикл 
		Знак = ?(Стр.Неотрицательный, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой);
		ОТ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Стр.Всего, Стр.ПослеЗапятой, Знак));
		Обл = Форма.ПредставлениеУведомления.Области.Найти(Стр.Поле);
		Если Обл <> Неопределено Тогда 
			Обл.ТипЗначения = ОТ;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьФорматыТекстаВПолях(Форма) Экспорт
	ПоляСФорматами = Форма.ТекстовыеФорматы.НайтиСтроки(Новый Структура("ИДСтраницы", Форма.ТекущееИДНаименования));
	Для Каждого Стр Из ПоляСФорматами Цикл 
		ОТ = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(Стр.ДлСтроки, ДопустимаяДлина.Переменная));
		Обл = Форма.ПредставлениеУведомления.Области.Найти(Стр.Поле);
		Если Обл <> Неопределено Тогда 
			Обл.ТипЗначения = ОТ;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьСтраницуУведомления(Форма) Экспорт
	ТекущийЭлемент = НайтиЭлементПоУИДВДереве(Форма.ДеревоСтраниц.ПолучитьЭлементы(), Форма.УИДТекущаяСтраница);
	Если ТекущийЭлемент <> Неопределено Тогда 
		НовСтр = СкопироватьСтрокуВДереве(Форма, ТекущийЭлемент);
		ПеренумероватьЭлементы(НовСтр.ПолучитьРодителя());
		Возврат НовСтр.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция НайтиЭлементПоУИДВДереве(Элементы, УИД)
	Для Каждого Элт Из Элементы Цикл 
		Рез = НайтиЭлементПоУИДВДереве(Элт.ПолучитьЭлементы(), УИД);
		Если Рез <> Неопределено Тогда 
			Возврат Рез;
		КонецЕсли;
		Если Элт.УИД = УИД Тогда 
			Возврат Элт;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Процедура УдалитьСтруктурыДанных(Форма, СтрокаДляУдаления)
	Для Каждого Стр Из СтрокаДляУдаления.ПолучитьЭлементы() Цикл 
		УдалитьСтруктурыДанных(Форма, Стр);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаДляУдаления.ИДНаименования) Тогда
		ДанныеМногостраничнойЧасти = Форма.ДанныеМногостраничныхРазделов[СтрокаДляУдаления.ИДНаименования];
		Для Каждого Стр Из ДанныеМногостраничнойЧасти Цикл 
			Если Стр.Значение.УИД = СтрокаДляУдаления.УИД Тогда 
				ДанныеМногостраничнойЧасти.Удалить(Стр);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция УдалитьСтраницуНаСервере(Форма) Экспорт
	ТекущийЭлемент = НайтиЭлементПоУИДВДереве(Форма.ДеревоСтраниц.ПолучитьЭлементы(), Форма.УИДТекущаяСтраница);
	Если ТекущийЭлемент <> Неопределено Тогда
		Родитель = ТекущийЭлемент.ПолучитьРодителя();
		Если Родитель.ПолучитьЭлементы().Количество() = 1 Тогда
			ДобавитьСтраницуУведомления(Форма);
			ПослеУдаления = Родитель.ПолучитьЭлементы()[1];
		Иначе
			ПослеУдаления = Родитель.ПолучитьЭлементы()[0];
			Если ПослеУдаления = ТекущийЭлемент Тогда
				ПослеУдаления = Родитель.ПолучитьЭлементы()[1];
			Иначе
				Для Каждого Стр Из Родитель.ПолучитьЭлементы() Цикл 
					Если Стр = ТекущийЭлемент Тогда 
						Прервать;
					КонецЕсли;
					ПослеУдаления = Стр;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		УдалитьСтруктурыДанных(Форма, ТекущийЭлемент);
		Родитель.ПолучитьЭлементы().Удалить(ТекущийЭлемент);
		ПеренумероватьЭлементы(Родитель);
		Возврат ПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Процедура ПечатьУведомленияБРО(Форма) Экспорт
	Форма.СохранитьДанные();
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	Форма.СтруктураРеквизитовУведомления = Новый Структура("СписокПечатаемыхЛистов", Отчеты[Разложение[1]].СформироватьСписокЛистов(Форма.Объект));
КонецПроцедуры

Функция СкопироватьСтрокуВДереве(Форма, Источник) Экспорт 
	Родитель = Источник.ПолучитьРодителя();
	Приемник = Родитель.ПолучитьЭлементы().Добавить();
	СкопироватьСтрокуВДеревеРек(Форма, Источник, Приемник);
	Возврат Приемник;
КонецФункции

Процедура СкопироватьСтрокуВДеревеРек(Форма, Источник, Приемник)
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	Если ЗначениеЗаполнено(Приемник.ИДНаименования) Тогда 
		Приемник.УИД = Новый УникальныйИдентификатор;
		СЗ = Форма.ДанныеМногостраничныхРазделов[Приемник.ИДНаименования];
		СтруктураНовСтр = Новый Структура;
		Для Каждого КЗ Из СЗ.Получить(0).Значение Цикл 
			СтруктураНовСтр.Вставить(КЗ.Ключ);
		КонецЦикла;
		СтруктураНовСтр.Вставить("УИД", Приемник.УИД);
		СтруктураНовСтр.Вставить("УИДРодителя", ПолучитьУИДРодителя(Приемник));
		СЗ.Добавить(СтруктураНовСтр);
	КонецЕсли;
	
	СтрокиДляКопирования = ПолучитьСписокСтрокДляКопирования(Форма, Источник);
	Для Каждого Стр Из СтрокиДляКопирования Цикл 
		НовСтр = Приемник.ПолучитьЭлементы().Добавить();
		СкопироватьСтрокуВДеревеРек(Форма, Стр, НовСтр);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Приемник.ИДНаименования) Тогда
		Приемник.УИД = Приемник.ПолучитьЭлементы()[0].УИД;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСписокСтрокДляКопирования(Форма, Источник)
	СЗ = Новый Массив;
	ВсеТипыПодчиненныхЛистов = Новый Соответствие;
	
	Если Источник.ПолучитьЭлементы().Количество() > 0 Тогда 
		Для Каждого Стр Из Источник.ПолучитьЭлементы() Цикл 
			Если ЗначениеЗаполнено(Стр.ИДНаименования) Тогда 
				ВсеТипыПодчиненныхЛистов.Вставить(Стр.ИДНаименования);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Стр Из Источник.ПолучитьЭлементы() Цикл
			Если ЗначениеЗаполнено(Стр.ИДНаименования) Тогда 
				Если ВсеТипыПодчиненныхЛистов[Стр.ИДНаименования] = Неопределено Тогда 
					ВсеТипыПодчиненныхЛистов[Стр.ИДНаименования] = 1;
					СЗ.Добавить(Стр);
				КонецЕсли;
			Иначе
				СЗ.Добавить(Стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СЗ;
КонецФункции

Функция ПолучитьУИДРодителя(Строка) Экспорт 
	Если ТипЗнч(Строка) = Тип("СтрокаДереваЗначений") Тогда 
		Родитель = Строка.Родитель;
	Иначе 
		Родитель = Строка.ПолучитьРодителя();
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Родитель.ИДНаименования) Тогда 
		Возврат Родитель.УИД;
	КонецЕсли;
	
	Возврат ПолучитьУИДРодителя(Родитель);
КонецФункции

Процедура ПеренумероватьЭлементы(Корень)
	Если Не ЗначениеЗаполнено(Корень.ИДНаименования) Тогда 
		Инд = 0;
		Для Каждого Стр Из Корень.ПолучитьЭлементы() Цикл 
			Инд = Инд + 1;
			Стр.Наименование = "Стр. " + Инд;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из Корень.ПолучитьЭлементы() Цикл 
		ПеренумероватьЭлементы(Стр);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьИдентификаторыДляСворачивания(Форма) Экспорт 
	Результат = Новый Массив;
	ДеревоСтраниц = Форма.ДеревоСтраниц;
	
	Для Каждого ТекущаяСтрока Из ДеревоСтраниц.ПолучитьЭлементы() Цикл
		Если ТекущаяСтрока.ПолучитьЭлементы().Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ДанныйПодразделПустРек(Форма, ТекущаяСтрока, Результат);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ДанныйПодразделПустРек(Форма, ТекущаяСтрока, Результат)
	ПодразделПуст = Истина;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ИДНаименования) Тогда 
		Если ТекущаяСтрока.Многостраничность Тогда
			СтрДанных = Неопределено;
			Для Каждого Элт Из Форма.ДанныеМногостраничныхРазделов[ТекущаяСтрока.ИДНаименования] Цикл 
				Если Элт.Значение.УИД = ТекущаяСтрока.УИД Тогда 
					СтрДанных = Элт.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТекущаяСтрока.Многострочность Тогда
			Если Форма.ДанныеУведомления.Свойство(ТекущаяСтрока.ИДНаименования) Тогда 
				СтрДанных = Форма.ДанныеУведомления[ТекущаяСтрока.ИДНаименования];
				ПодразделПуст = МногострочнаяЧастьЗаполнена(ТекущаяСтрока.МногострочныеЧасти);
			КонецЕсли;
		Иначе
			СтрДанных = Форма.ДанныеУведомления[ТекущаяСтрока.ИДНаименования];
		КонецЕсли;
		
		Если ТипЗнч(СтрДанных) = Тип("Структура") Тогда 
			ПодразделПуст = ПодразделПуст И (Не СтраницаЗаполнена(СтрДанных));
		Иначе
			ПодразделПуст = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из ТекущаяСтрока.ПолучитьЭлементы() Цикл 
		ПодразделПуст = ДанныйПодразделПустРек(Форма, Стр, Результат) И ПодразделПуст;
	КонецЦикла;
	
	Если ПодразделПуст И ТекущаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
		Результат.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
	
	Возврат ПодразделПуст;
КонецФункции

Процедура НачальныеОперацииПриСозданииНаСервере(Форма) Экспорт
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Форма.Объект.ДатаПодписи = ТекущаяДатаСеанса();
		Форма.Заголовок = Форма.Заголовок + " (создание)";
	КонецЕсли;
	
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	Форма.Объект.ИмяФормы = Разложение[3];
	Форма.Объект.ИмяОтчета = Разложение[1];
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(Форма);
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма);
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Форма.Объект.Ссылка);
	ЗагрузитьНастройкиРучногоВвода(Форма);
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда 
		ЗаблокироватьДанныеДляРедактирования(Форма.Объект.Ссылка, , Форма.УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьМакетПростойФормы(Форма, ИмяМакета, ПредставлениеУведомления) Экспорт 
	Форма[ПредставлениеУведомления].Очистить();
	МакетДокумента = Отчеты[СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".")[1]].ПолучитьМакет(ИмяМакета);
	СформироватьСтруктуруДанныхПростогоУведомления(Форма, МакетДокумента);
	Форма[ПредставлениеУведомления].Вывести(МакетДокумента);
КонецПроцедуры

Процедура СформироватьСтруктуруДанныхПростогоУведомления(Форма, ПредставлениеУведомления)
	Форма.ДанныеУведомления = Новый Структура;
	Для Каждого Обл Из ПредставлениеУведомления.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
			И Обл.СодержитЗначение Тогда 
			
			Форма.ДанныеУведомления.Вставить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДанныеПростогоУведомления(Форма, ДанныеДляЗагрузки, ТабДок) Экспорт
	Для Каждого КЗ Из ДанныеДляЗагрузки Цикл
		Обл = ТабДок.Области.Найти(КЗ.Ключ);
		Если Обл <> Неопределено Тогда 
			Обл.Значение = КЗ.Значение;
			Форма.ДанныеУведомления.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьНастройкиРучногоВвода(Форма)
	Попытка
		Форма.РучнойВвод = Ложь;
		ТекущиеНастройки = ХранилищеСистемныхНастроек.Загрузить("СообщенияВКонтролирующиеОрганы.Регистрация", "ВводДанныхВручную");
		
		Если ТипЗнч(ТекущиеНастройки) = Тип("Булево") Тогда 
			Форма.РучнойВвод = ТекущиеНастройки;
		КонецЕсли;
	Исключение
		ТекущиеНастройки = Неопределено;
	КонецПопытки;
КонецПроцедуры

Процедура СохранитьНастройкиРучногоВвода(Форма) Экспорт 
	ХранилищеСистемныхНастроек.Сохранить("СообщенияВКонтролирующиеОрганы.Регистрация", "ВводДанныхВручную", Форма.РучнойВвод);
КонецПроцедуры

Процедура СформироватьКонтейнерДанныхУведомления(КонтейнерВходящий, КонтейнерРезультат, ЕстьМногостраничность = Ложь) Экспорт 
	КонтейнерРезультат.Вставить("ДанныеУведомления", Новый Структура);
	Если ЕстьМногостраничность Тогда
		КонтейнерРезультат.Вставить("ДанныеМногостраничныхРазделов", Новый Структура);
	КонецЕсли;
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтейнерВходящий.ИмяФормы, ".");
	
	Для Каждого Стр Из КонтейнерВходящий.ДеревоСтраниц.Строки Цикл
		Если Стр.Многостраничность Тогда 
			Если Стр.Многострочность Тогда
				// пока пусто
			Иначе
				МнгСтр = Стр.Строки[0];
				
				СтруктураМногостраничнойСтраницы = Новый Структура("УИД", МнгСтр.УИД);
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(МнгСтр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				
				Если МнгСтр.Строки.Количество() > 0 Тогда
					СформироватьКонтейнерДанныхУведомленияРек(КонтейнерВходящий, КонтейнерРезультат, Разложение[1], МнгСтр);
				КонецЕсли;
				
				СЗ = Новый СписокЗначений;
				СЗ.Добавить(СтруктураМногостраничнойСтраницы);
				КонтейнерРезультат.ДанныеМногостраничныхРазделов.Вставить(МнгСтр.ИДНаименования, СЗ);
			КонецЕсли;
		Иначе
			Если Стр.Многострочность Тогда
				ОбластиВМногостраничнойЧасти = Новый Соответствие;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого Мнг Из Стр.МногострочныеЧасти Цикл
					Для Каждого Обл Из МакетДокумента.ПолучитьОбласть(Мнг.Значение).Области Цикл 
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
							И Обл.СодержитЗначение Тогда 
							
							ОбластиВМногостраничнойЧасти.Вставить(Обл.Имя, Истина);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение
						И ОбластиВМногостраничнойЧасти[Обл.Имя] = Неопределено Тогда 
						
						СтруктураСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				КонтейнерРезультат.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
			Иначе
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				КонтейнерРезультат.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьКонтейнерДанныхУведомленияРек(КонтейнерВходящий, КонтейнерРезультат, ИмяОтчета, Строка)
	Для Каждого ПодчМнг Из Строка.Строки Цикл
		Если ПодчМнг.Строки.Количество() > 0 Тогда
			СформироватьКонтейнерДанныхУведомленияРек(КонтейнерВходящий, КонтейнерРезультат, ИмяОтчета, ПодчМнг);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодчМнг.ИДНаименования) Тогда 
			СтруктураМногостраничнойСтраницыПодч = Новый Структура("УИД, УИДРодителя", ПодчМнг.УИД, ПолучитьУИДРодителя(ПодчМнг));
			МакетДокумента = Отчеты[ИмяОтчета].ПолучитьМакет(ПодчМнг.ИмяМакета);
			Для Каждого Обл Из МакетДокумента.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
					И Обл.СодержитЗначение Тогда 
					
					СтруктураМногостраничнойСтраницыПодч.Вставить(Обл.Имя);
				КонецЕсли;
			КонецЦикла;
			
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(СтруктураМногостраничнойСтраницыПодч);
			КонтейнерРезультат.ДанныеМногостраничныхРазделов.Вставить(ПодчМнг.ИДНаименования, СЗ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура НачальныеОперацииСКонтейнеромМногострочныхБлоков(КонтейнерВходящий, КонтейнерРезультат) Экспорт
	Для Каждого Стр Из КонтейнерВходящий.ДеревоСтраниц.Строки Цикл
		Если Стр.Многострочность Тогда
			Для Каждого Мнг Из Стр.МногострочныеЧасти Цикл
				ТЗ = Новый ТаблицаЗначений;
				ТЗ.Колонки.Добавить("А01020000", Новый ОписаниеТипов("Строка"));
				ТЗ.Добавить();
				КонтейнерРезультат.Вставить(Мнг.Значение, ТЗ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИмяОтчета, Строка)
	Для Каждого ПодчМнг Из Строка.ПолучитьЭлементы() Цикл
		Если ПодчМнг.ПолучитьЭлементы().Количество() > 0 Тогда
			СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИмяОтчета, ПодчМнг);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодчМнг.ИДНаименования) Тогда
			Если ПодчМнг.Многострочность Тогда
				Для Каждого МногострочныйЭлемент Из ПодчМнг.МногострочныеЧасти Цикл
					ТЗ = Новый ТаблицаЗначений;
					ТЗ.Колонки.Добавить("УИД");
					СтрокаДанных = Новый Структура;
					МакетМногострочки = Отчеты[ИмяОтчета].ПолучитьМакет(ПодчМнг.ИмяМакета).ПолучитьОбласть("Str_"+МногострочныйЭлемент.Значение);
					Для Каждого Обл Из МакетМногострочки.Области Цикл 
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
							И Обл.СодержитЗначение Тогда 
							
							ТЗ.Колонки.Добавить(Обл.Имя);
							СтрокаДанных.Вставить(Обл.Имя);
						КонецЕсли;
					КонецЦикла;
					
					Форма.ДанныеДопСтрок.Вставить(МногострочныйЭлемент.Значение, ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор));
					СЗ = Новый СписокЗначений;
					СЗ.Добавить(СтрокаДанных);
					Форма.ДанныеДопСтрокСтраницы.Вставить(МногострочныйЭлемент.Значение, СЗ);
				КонецЦикла;
			КонецЕсли;
			
			СтруктураМногостраничнойСтраницыПодч = Новый Структура("УИД, УИДРодителя", ПодчМнг.УИД, УведомлениеОСпецрежимахНалогообложения.ПолучитьУИДРодителя(ПодчМнг));
			МакетДокумента = Отчеты[ИмяОтчета].ПолучитьМакет(ПодчМнг.ИмяМакета);
			Для Каждого Обл Из МакетДокумента.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
					И Обл.СодержитЗначение Тогда 
					
					СтруктураМногостраничнойСтраницыПодч.Вставить(Обл.Имя);
				КонецЕсли;
			КонецЦикла;
			
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(СтруктураМногостраничнойСтраницыПодч);
			Форма.ДанныеМногостраничныхРазделов.Вставить(ПодчМнг.ИДНаименования, СЗ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьСтруктуруДанныхУведомленияНовогоОбразца(Форма) Экспорт 
	Форма.ДанныеУведомления = Новый Структура;
	Форма.ДанныеМногостраничныхРазделов = Новый Структура;
	Форма.ДанныеДопСтрок = Новый Структура;
	Форма.ДанныеДопСтрокСтраницы = Новый Структура;
	Форма.ИдентификаторыОбычныхСтраниц = Новый Структура;
	
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	
	Для Каждого Стр Из Форма.ДеревоСтраниц.ПолучитьЭлементы() Цикл
		Если Стр.Многостраничность Тогда 
			Если Стр.Многострочность Тогда
				МнгСтр = Стр.ПолучитьЭлементы()[0];
				
				СтруктураМногостраничнойСтраницы = Новый Структура("УИД", МнгСтр.УИД);
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(МнгСтр.ИмяМакета).ПолучитьОбласть("ОсновнаяЧасть");
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				
				Если МнгСтр.ПолучитьЭлементы().Количество() > 0 Тогда
					СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, Разложение[1], МнгСтр);
				КонецЕсли;
				
				СЗ = Новый СписокЗначений;
				СЗ.Добавить(СтруктураМногостраничнойСтраницы);
				Форма.ДанныеМногостраничныхРазделов.Вставить(МнгСтр.ИДНаименования, СЗ);
				
				Для Каждого МногострочныйЭлемент Из МнгСтр.МногострочныеЧасти Цикл
					ТЗ = Новый ТаблицаЗначений;
					ТЗ.Колонки.Добавить("УИД");
					СтрокаДанных = Новый Структура;
					МакетМногострочки = Отчеты[Разложение[1]].ПолучитьМакет(МнгСтр.ИмяМакета).ПолучитьОбласть("Str_"+МногострочныйЭлемент.Значение);
					Для Каждого Обл Из МакетМногострочки.Области Цикл 
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
							И Обл.СодержитЗначение Тогда 
							
							ТЗ.Колонки.Добавить(Обл.Имя);
							СтрокаДанных.Вставить(Обл.Имя);
						КонецЕсли;
					КонецЦикла;
					
					Форма.ДанныеДопСтрок.Вставить(МногострочныйЭлемент.Значение, ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор));
					СЗ = Новый СписокЗначений;
					СЗ.Добавить(СтрокаДанных);
					Форма.ДанныеДопСтрокСтраницы.Вставить(МногострочныйЭлемент.Значение, СЗ);
				КонецЦикла;
			Иначе
				МнгСтр = Стр.ПолучитьЭлементы()[0];
				
				СтруктураМногостраничнойСтраницы = Новый Структура("УИД", МнгСтр.УИД);
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(МнгСтр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				
				Если МнгСтр.ПолучитьЭлементы().Количество() > 0 Тогда
					СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, Разложение[1], МнгСтр);
				КонецЕсли;
				
				СЗ = Новый СписокЗначений;
				СЗ.Добавить(СтруктураМногостраничнойСтраницы);
				Форма.ДанныеМногостраничныхРазделов.Вставить(МнгСтр.ИДНаименования, СЗ);
			КонецЕсли;
		Иначе
			Форма.ИдентификаторыОбычныхСтраниц.Вставить(Стр.ИДНаименования, Стр.УИД);
			Если Стр.Многострочность Тогда
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета).ПолучитьОбласть("ОсновнаяЧасть");
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				Форма.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
				
				Для Каждого МногострочныйЭлемент Из Стр.МногострочныеЧасти Цикл
					ТЗ = Новый ТаблицаЗначений;
					ТЗ.Колонки.Добавить("УИД");
					СтрокаДанных = Новый Структура;
					МакетМногострочки = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета).ПолучитьОбласть("Str_"+МногострочныйЭлемент.Значение);
					Для Каждого Обл Из МакетМногострочки.Области Цикл 
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
							И Обл.СодержитЗначение Тогда 
							
							ТЗ.Колонки.Добавить(Обл.Имя);
							СтрокаДанных.Вставить(Обл.Имя);
						КонецЕсли;
					КонецЦикла;
					
					Форма.ДанныеДопСтрок.Вставить(МногострочныйЭлемент.Значение, ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор));
					СЗ = Новый СписокЗначений;
					СЗ.Добавить(СтрокаДанных);
					Форма.ДанныеДопСтрокСтраницы.Вставить(МногострочныйЭлемент.Значение, СЗ);
				КонецЦикла;
				
				Для Каждого МнгСтр Из Стр.ПолучитьЭлементы() Цикл 
					СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, Разложение[1], МнгСтр);
				КонецЦикла;
			Иначе
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета).ПолучитьОбласть("ОсновнаяЧасть");
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
						И Обл.СодержитЗначение Тогда 
						
						СтруктураСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				Форма.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
				
				Для Каждого МнгСтр Из Стр.ПолучитьЭлементы() Цикл 
					СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, Разложение[1], МнгСтр);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СтрокаСодержитТолькоЦифры(Строка) Экспорт 
	Стр = СокрЛП(Строка);
	Для Инд = 1 По СтрДлина(Стр) Цикл 
		КодСимвола = КодСимвола(Сред(Стр, Инд, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	Возврат Истина;
КонецФункции

Процедура ОчисткаОтчетаДействия(Параметры) Экспорт 
	Форма = Параметры.Форма;
	Форма.Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Форма.Объект.Организация);
	Форма.СформироватьДеревоСтраниц();
	УведомлениеОСпецрежимахНалогообложения.СформироватьСтруктуруДанныхУведомленияНовогоОбразца(Форма);
	Форма.ЗаполнитьНачальныеДанные();
КонецПроцедуры

Процедура ДополнитьСлужебнымиСтруктурамиАдреса(ДанныеУведомления = Неопределено, ДанныеМногостраничныхРазделов = Неопределено) Экспорт 
	Если ДанныеУведомления <> Неопределено Тогда 
		Для Каждого КЗ Из ДанныеУведомления Цикл 
			Если КЗ.Значение.Свойство("РайонСокращение") 
				И Не КЗ.Значение.Свойство("АдресXML") Тогда
				
				КЗ.Значение.Вставить("АдресXML", "");
			КонецЕсли;
			
			Если КЗ.Значение.Свойство("АДДР00РайонСокращение") 
				И Не КЗ.Значение.Свойство("АДДР00АдресXML") Тогда
				
				КЗ.Значение.Вставить("АДДР00АдресXML", "");
			КонецЕсли;
			
			Если КЗ.Значение.Свойство("АДДР01РайонСокращение") 
				И Не КЗ.Значение.Свойство("АДДР00АдресXML") Тогда
				
				КЗ.Значение.Вставить("АДДР01АдресXML", "");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеМногостраничныхРазделов <> Неопределено Тогда 
		Для Каждого КЗ0 Из ДанныеМногостраничныхРазделов Цикл 
			Для Каждого Элт Из КЗ0.Значение Цикл 
				КЗ = Элт.Значение;
				
				Если КЗ.Свойство("РайонСокращение") 
					И Не КЗ.Свойство("АдресXML") Тогда
					
					КЗ.Вставить("АдресXML", "");
				КонецЕсли;
				
				Если КЗ.Свойство("АДДР00РайонСокращение") 
					И Не КЗ.Свойство("АДДР00АдресXML") Тогда
					
					КЗ.Вставить("АДДР00АдресXML", "");
				КонецЕсли;
				
				Если КЗ.Свойство("АДДР01РайонСокращение") 
					И Не КЗ.Свойство("АДДР00АдресXML") Тогда
					
					КЗ.Вставить("АДДР01АдресXML", "");
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СкопироватьСтрокуВДеревеЗначенийРек(СтрокаИсточник, СтрокаПриемник)
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	Для Каждого СтрПодч Из СтрокаИсточник.Строки Цикл 
		НовСтрПодч = СтрокаПриемник.Строки.Добавить();
		СкопироватьСтрокуВДеревеЗначенийРек(СтрПодч, НовСтрПодч);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПолныйПутьВСхемеВыгрузки(Стр)
	ПолныйПуть = Стр.Код;
	СтрРодитель = Стр.Родитель;
	Пока СтрРодитель <> Неопределено Цикл 
		ПолныйПуть = СтрРодитель.Код + "/" + ПолныйПуть;
		СтрРодитель = СтрРодитель.Родитель;
	КонецЦикла;
	Возврат "Файл/" + ПолныйПуть;
КонецФункции

Функция ПолучитьПолныйПутьВДеревеЗагрузки(Стр) Экспорт 
	ПолныйПуть = Стр.ИмяЭлемента;
	СтрРодитель = Стр.Родитель;
	Пока СтрРодитель <> Неопределено Цикл 
		ПолныйПуть = СтрРодитель.ИмяЭлемента + "/" + ПолныйПуть;
		СтрРодитель = СтрРодитель.Родитель;
	КонецЦикла;
	Возврат ПолныйПуть;
КонецФункции

Функция ПолучитьПустуюТаблицуПутейВВыгрузке() Экспорт
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("ПутьXML", Новый ОписаниеТипов("Строка"));
	Возврат ТаблицаДат;
КонецФункции

Функция НайтиУзелВДеревеПоПути(Дерево, Путь, ИмяКолонки) Экспорт 
	РазложениеПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Путь, "/");
	Возврат НайтиУзелВДеревеПоПутиРек(Дерево.Строки, РазложениеПути, 0, ИмяКолонки);
КонецФункции

Функция НайтиУзелВДеревеПоПутиРек(ДеревоСтроки, РазложениеПути, Инд, ИмяКолонки) Экспорт 
	НайденныеСтроки = ДеревоСтроки.НайтиСтроки(Новый Структура(ИмяКолонки, РазложениеПути[Инд]));
	Если НайденныеСтроки.Количество() = 0 Тогда 
		Возврат Неопределено;
	Иначе
		Если Инд = РазложениеПути.ВГраница() Тогда 
			Возврат НайденныеСтроки[0];
		Иначе
			Возврат НайтиУзелВДеревеПоПутиРек(НайденныеСтроки[0].Строки, РазложениеПути, Инд + 1, ИмяКолонки);
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция СформироватьДеревоЗагрузки(ПредставлениеXML) Экспорт 
	ДеревоЗагрузки = Новый ДеревоЗначений;
	ДеревоЗагрузки.Колонки.Добавить("ИмяЭлемента", Новый ОписаниеТипов("Строка"));
	ДеревоЗагрузки.Колонки.Добавить("ТипЭлемента", Новый ОписаниеТипов("Строка"));
	ДеревоЗагрузки.Колонки.Добавить("ЗначениеЭлемента", Новый ОписаниеТипов("Строка"));
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПредставлениеXML);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	СформироватьДеревоЗагрузкиРек(ДокументDOM.ДочерниеУзлы, ДеревоЗагрузки.Строки);
	
	Возврат ДеревоЗагрузки;
КонецФункции

Процедура СформироватьДеревоЗагрузкиРек(ДочерниеУзлы, СтрокиДерева)
	Для Каждого ДочернийУзел Из ДочерниеУзлы Цикл
		Если Не ДочернийУзел.ТипУзла = ТипУзлаDOM.Элемент Тогда 
			Продолжить;
		КонецЕсли;
		НовСтр = СтрокиДерева.Добавить();
		НовСтр.ИмяЭлемента = ДочернийУзел.ИмяУзла;
		НовСтр.ЗначениеЭлемента = ДочернийУзел.ЗначениеУзла;
		Если ЗначениеЗаполнено(ДочернийУзел.ТекстовоеСодержимое) Тогда
			Если ДочернийУзел.ДочерниеУзлы.Количество() = 1
				И ДочернийУзел.ДочерниеУзлы[0].ТипУзла = ТипУзлаDOM.Текст Тогда 
				
				НовСтр.ТипЭлемента = "П";
				НовСтр.ЗначениеЭлемента = ДочернийУзел.ТекстовоеСодержимое;
			Иначе 
				НовСтр.ТипЭлемента = "С";
			КонецЕсли;
		Иначе
			НовСтр.ТипЭлемента = "С";
		КонецЕсли;
		
		Для Каждого Атрибут Из ДочернийУзел.Атрибуты Цикл 
			НовСтрАтр = НовСтр.Строки.Добавить();
			НовСтрАтр.ИмяЭлемента = Атрибут.ИмяУзла;
			НовСтрАтр.ЗначениеЭлемента = Атрибут.ЗначениеУзла;
			НовСтрАтр.ТипЭлемента = "А";
		КонецЦикла;
		
		Если ДочернийУзел.ДочерниеУзлы.Количество() > 0 Тогда 
			СформироватьДеревоЗагрузкиРек(ДочернийУзел.ДочерниеУзлы, НовСтр.Строки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьСоответствиеИдентификаторовСтраницМакетам(СтрокиДерева, СоответствиеИдентификаторовСтраницМакетам, ИмяОтчета)
	Для Каждого Стр Из СтрокиДерева Цикл
		Если ЗначениеЗаполнено(Стр.ИмяМакета) Тогда 
			СоответствиеИдентификаторовСтраницМакетам.Вставить(Стр.ИДНаименования, Отчеты[ИмяОтчета].ПолучитьМакет(Стр.ИмяМакета));
		КонецЕсли;
		ПолучитьСоответствиеИдентификаторовСтраницМакетам(Стр.Строки, СоответствиеИдентификаторовСтраницМакетам, ИмяОтчета);
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьТаблицуДатВВыгрузкеРек(ТекущийПутьВСхемеВыгрузки, СтрокиВСхемеВыгрузки, ТаблицаДатВВыгрузке, СоответствиеМакетовТабличнымДокументам)
	Для Каждого Стр Из СтрокиВСхемеВыгрузки Цикл 
		Если ЗначениеЗаполнено(Стр.Раздел) 
			И ЗначениеЗаполнено(Стр.Ключ)
			И ТипЗнч(СоответствиеМакетовТабличнымДокументам[Стр.Раздел]) = Тип("ТабличныйДокумент") Тогда 
			
			ОблДата = СоответствиеМакетовТабличнымДокументам[Стр.Раздел].Области.Найти(Стр.Ключ);
			Если ТипЗнч(ОблДата) = Тип("ОбластьЯчеекТабличногоДокумента")
				И ОблДата.СодержитЗначение = Истина Тогда 
				
				Если ОблДата.ТипЗначения.СодержитТип(Тип("Дата")) Тогда 
					НовСтр = ТаблицаДатВВыгрузке.Добавить();
					НовСтр.ПутьXML = ТекущийПутьВСхемеВыгрузки + "/" + Стр.Код;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СформироватьТаблицуДатВВыгрузкеРек(ТекущийПутьВСхемеВыгрузки + "/" + Стр.Код, Стр.Строки, ТаблицаДатВВыгрузке, СоответствиеМакетовТабличнымДокументам)
	КонецЦикла;
КонецПроцедуры

Функция СформироватьТаблицуДатВВыгрузке(Форма, СхемаВыгрузки, ДополнительныеПараметры)
	ТаблицаДатВВыгрузке = ПолучитьПустуюТаблицуПутейВВыгрузке();
	ИмяОтчета = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".")[1];
	ДеревоСтраниц = ДанныеФормыВЗначение(Форма.ДеревоСтраниц, Тип("ДеревоЗначений"));
	СоответствиеИдентификаторовСтраницМакетам = Новый Соответствие;
	ПолучитьСоответствиеИдентификаторовСтраницМакетам(ДеревоСтраниц.Строки, СоответствиеИдентификаторовСтраницМакетам, ИмяОтчета);
	Если ДополнительныеПараметры.Свойство("ЗаменыИменМногострочныхЧастей")
		И ТипЗнч(ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей) = Тип("Соответствие") Тогда 
		
		Для Каждого КЗ Из ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей Цикл 
			Если СоответствиеИдентификаторовСтраницМакетам[КЗ.Значение] <> Неопределено Тогда 
				 СоответствиеИдентификаторовСтраницМакетам.Вставить(КЗ.Ключ, СоответствиеИдентификаторовСтраницМакетам[КЗ.Значение]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СформироватьТаблицуДатВВыгрузкеРек("Файл", СхемаВыгрузки.Строки, ТаблицаДатВВыгрузке, СоответствиеИдентификаторовСтраницМакетам);
	
	Возврат ТаблицаДатВВыгрузке;
КонецФункции

Процедура ЗагрузитьОбычныеСтраницы(Форма, ДеревоЗагрузки, СхемаВыгрузки, ДополнительныеПараметры) Экспорт
	ТаблицаДатВВыгрузке = СформироватьТаблицуДатВВыгрузке(Форма, СхемаВыгрузки, ДополнительныеПараметры);
	ДополнительныеПараметры.Вставить("ТаблицаДатВВыгрузке", ТаблицаДатВВыгрузке);
	ДополнительныеПараметры.Вставить("СтруктураПоискаПутиXML", Новый Структура("ПутьXML"));
	
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/Подписант/ФИО/Фамилия", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда 
		Форма.Объект.ПодписантФамилия = СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/Подписант/ФИО/Имя", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда 
		Форма.Объект.ПодписантИмя = СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/Подписант/ФИО/Отчество", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда 
		Форма.Объект.ПодписантОтчество = СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/ДатаДок", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда 
		Форма.Объект.ДатаПодписи = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение.ЗначениеЭлемента);
	КонецЕсли;
	
	Для Каждого КЗ Из Форма.ДанныеУведомления Цикл 
		ДеревоСтраниц = ДанныеФормыВЗначение(Форма.ДеревоСтраниц, Тип("ДеревоЗначений"));
		Для Каждого Стр Из ДеревоСтраниц.Строки.НайтиСтроки(Новый Структура("ИДНаименования", КЗ.Ключ), Истина) Цикл 
			Если Стр.Многострочность Тогда 
				Для Каждого МнгСтр Из Стр.МногострочныеЧасти Цикл 
					ТЗМнг = ПолучитьИзВременногоХранилища(Форма.ДанныеДопСтрок[МнгСтр.Значение]);
					ТЗМнг.Очистить();
					ОтбСтроки = СхемаВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел, Многострочность", МнгСтр.Значение, Истина), Истина);
					РазделМногострочнойЧасти = МнгСтр.Значение;
					Если ОтбСтроки.Количество() = 0 
						И ДополнительныеПараметры.Свойство("ЗаменыИменМногострочныхЧастей") Тогда 
						
						ОтбСтроки = СхемаВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел, Многострочность", ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей[МнгСтр.Значение], Истина), Истина);
						Если ЗначениеЗаполнено(ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей[МнгСтр.Значение]) Тогда 
							РазделМногострочнойЧасти = ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей[МнгСтр.Значение];
						КонецЕсли;
					КонецЕсли;
					
					Если ОтбСтроки.Количество() = 0 Тогда 
						ПоместитьВоВременноеХранилище(ТЗМнг, Форма.ДанныеДопСтрок[МнгСтр.Значение]);
						Продолжить;
					КонецЕсли;
					
					Для Каждого СтрМнг Из ОтбСтроки Цикл 
						ПолныйПуть = ПолучитьПолныйПутьВСхемеВыгрузки(СтрМнг);
						СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, ПолныйПуть, "ИмяЭлемента");
						Если Не ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда 
							Продолжить;
						КонецЕсли;
						
						СтрокиДанных = СтрЗагружаемоеЗначение.Родитель.Строки.НайтиСтроки(Новый Структура("ИмяЭлемента", СтрЗагружаемоеЗначение.ИмяЭлемента), Ложь);
						Для Каждого СтрокаДанных Из СтрокиДанных Цикл 
							НовСтр = ТЗМнг.Добавить();
							НовСтр.УИД = Форма.ИдентификаторыОбычныхСтраниц[КЗ.Ключ];
							
							Если СтрокаДанных.ТипЭлемента = "П" Тогда 
								Если ТЗМнг.Колонки.Найти(СтрокаДанных.ИмяЭлемента) <> Неопределено Тогда 
									НовСтр[СтрокаДанных.ИмяЭлемента] = СтрокаДанных.ЗначениеЭлемента;
									
									ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть;
									ОтбСтроки = ДополнительныеПараметры.ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
									Если ОтбСтроки.Количество() > 0 Тогда 
										НовСтр[СтрокаДанных.ИмяЭлемента] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрокаДанных.ЗначениеЭлемента);
									КонецЕсли;
									ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
									Если ОтбСтроки.Количество() > 0 Тогда 
										Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрокаДанных, НовСтр);
									КонецЕсли;
								КонецЕсли;
							ИначеЕсли СтрокаДанных.ТипЭлемента = "С" Тогда
								Для Каждого СтрВДереве Из СтрМнг.Строки.НайтиСтроки(Новый Структура("Раздел", РазделМногострочнойЧасти), Ложь) Цикл
									Если ТЗМнг.Колонки.Найти(СтрВДереве.Ключ) = Неопределено Тогда 
										Продолжить;
									КонецЕсли;
									СтрЗагружаемоеЗначение = СтрокаДанных.Строки.НайтиСтроки(Новый Структура("ИмяЭлемента", СтрВДереве.Код), Ложь);
									Если СтрЗагружаемоеЗначение.Количество() = 0 Тогда 
										Продолжить;
									КонецЕсли;
									НовСтр[СтрВДереве.Ключ] = СтрЗагружаемоеЗначение[0].ЗначениеЭлемента;
									ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть + "/" + СтрВДереве.Код;
									ОтбСтроки = ДополнительныеПараметры.ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
									Если ОтбСтроки.Количество() > 0 Тогда 
										НовСтр[СтрВДереве.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение[0].ЗначениеЭлемента);
									КонецЕсли;
									ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
									Если ОтбСтроки.Количество() > 0 Тогда 
										Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрЗагружаемоеЗначение[0], НовСтр);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
					ПоместитьВоВременноеХранилище(ТЗМнг, Форма.ДанныеДопСтрок[МнгСтр.Значение]);
				КонецЦикла;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		Для Каждого Стр Из СхемаВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", КЗ.Ключ), Истина) Цикл 
			Если Не ЗначениеЗаполнено(Стр.Ключ) Тогда 
				ПолныйПуть = ПолучитьПолныйПутьВСхемеВыгрузки(Стр);
				СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, ПолныйПуть, "ИмяЭлемента");
				ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть;
				ОтбСтроки = ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
				Если ОтбСтроки.Количество() > 0 Тогда 
					КЗ.Значение[Стр.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение.ЗначениеЭлемента);
				КонецЕсли;
				ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
				Если ОтбСтроки.Количество() > 0 Тогда
					Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрЗагружаемоеЗначение, КЗ.Значение);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ПолныйПуть = ПолучитьПолныйПутьВСхемеВыгрузки(Стр);
			
			СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, ПолныйПуть, "ИмяЭлемента");
			Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
				Если КЗ.Значение.Свойство(Стр.Ключ) Тогда
					КЗ.Значение[Стр.Ключ] = СтрЗагружаемоеЗначение.ЗначениеЭлемента;
					
					ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть;
					ОтбСтроки = ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтроки.Количество() > 0 Тогда 
						КЗ.Значение[Стр.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение.ЗначениеЭлемента);
					КонецЕсли;
					ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтроки.Количество() > 0 Тогда
						Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрЗагружаемоеЗначение, КЗ.Значение);
					КонецЕсли;
				Иначе
					ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть;
					ОтбСтроки = ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтроки.Количество() > 0 Тогда 
						КЗ.Значение[Стр.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение.ЗначениеЭлемента);
					КонецЕсли;
					ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтроки.Количество() > 0 Тогда
						Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрЗагружаемоеЗначение, КЗ.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если КЗ.Значение.Свойство("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ") Тогда
			СтрФамилия = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/Подписант/ФИО/Фамилия", "ИмяЭлемента");
			КЗ.Значение["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"] = СокрЛП(Форма.Объект.ПодписантФамилия + " " 
										+ Форма.Объект.ПодписантИмя + " " + Форма.Объект.ПодписантОтчество);
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
КонецПроцедуры

Функция ПолучитьНаименованиеИПИзВыгрузки(ДеревоЗагрузки) Экспорт 
	Наим = "";
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПФЛ/ФИО/Фамилия", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПФЛ/ФИО/Имя", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПФЛ/ФИО/Отчество", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наим) Тогда 
		Возврат СокрЛП(Наим);
	КонецЕсли;
	
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПИП/ФИОИП/Фамилия", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПИП/ФИОИП/Имя", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПути(ДеревоЗагрузки, "Файл/Документ/СвНП/НПИП/ФИОИП/Отчество", "ИмяЭлемента");
	Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") Тогда
		Наим = Наим + " " + СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
	
	Возврат СокрЛП(Наим);
КонецФункции

Функция СформироватьПустуюКартуМногостраничныхРазделов() Экспорт 
	КартаРазделов = Новый ДеревоЗначений;
	КартаРазделов.Колонки.Добавить("ИДНаименования", Новый ОписаниеТипов("Строка"));
	Возврат КартаРазделов;
КонецФункции

Процедура ПолучитьВсеУИД(ВсеУИД, Строки)
	Для Каждого Стр Из Строки Цикл 
		ВсеУИД.Вставить(Стр.УИД, Истина);
		ПолучитьВсеУИД(ВсеУИД, Стр.Строки);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьМногостраничныеСтраницы(Форма, ДеревоЗагрузки, СхемаВыгрузки, ДополнительныеПараметры) Экспорт
	Если ДополнительныеПараметры.Свойство("КартаМногостраничныхРазделов") Тогда 
		КартаРазделов = ДополнительныеПараметры.КартаМногостраничныхРазделов;
	Иначе
		КартаРазделов = Форма.ПолучитьКартуМногостраничныхРазделов();
	КонецЕсли;
	ДеревоСтраниц = ДанныеФормыВЗначение(Форма.ДеревоСтраниц, Тип("ДеревоЗначений"));
	ДополнительныеПараметры.Вставить("ДеревоСтраницЭталон", ДеревоСтраниц.Скопировать());
	ДополнительныеПараметры.Вставить("ДеревоЗагрузки", ДеревоЗагрузки);
	ДополнительныеПараметры.Вставить("СхемаВыгрузки", СхемаВыгрузки);
	ЗагрузитьМногостраничныеСтраницыРек(Форма, ДополнительныеПараметры, КартаРазделов.Строки, ДеревоСтраниц.Строки, Неопределено, Неопределено, "");
	ЗначениеВДанныеФормы(ДеревоСтраниц, Форма.ДеревоСтраниц);
	Форма.Модифицированность = Истина;
	
	ВсеУИД = Новый Соответствие;
	ПолучитьВсеУИД(ВсеУИД, ДеревоСтраниц.Строки);
	
	Для Каждого КЗ Из Форма.ДанныеМногостраничныхРазделов Цикл
		Инд = КЗ.Значение.Количество() - 1;
		Пока Инд >= 0 Цикл 
			Если ВсеУИД[КЗ.Значение[Инд].Значение.УИД] <> Истина Тогда 
				КЗ.Значение.Удалить(Инд);
			КонецЕсли;
			Инд = Инд - 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьМногострочныеЧастиМножественнойСтраницы(Форма, ДополнительныеПараметры, СтрокаВДереве, УИД, РодительскаяСтрокаДанных, РодительскаяСтрокаДереваВыгрузки)
	Для Каждого МнгСтр Из СтрокаВДереве.МногострочныеЧасти Цикл 
		ИдМнгСтр = МнгСтр.Значение;
		Если ДополнительныеПараметры.Свойство("ЗаменыИменМногострочныхЧастей") Тогда 
			Если ЗначениеЗаполнено(ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей[ИдМнгСтр]) Тогда 
				ИдМнгСтр = ДополнительныеПараметры.ЗаменыИменМногострочныхЧастей[ИдМнгСтр];
			КонецЕсли;
		КонецЕсли;
		
		ОтбСтроки = РодительскаяСтрокаДереваВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел, Многострочность", ИдМнгСтр, Истина), Истина);
		Если ОтбСтроки.Количество() <> 1 Тогда 
			Продолжить;
		КонецЕсли;
		
		ПутьДоРодительскойСтроки = ПолучитьПолныйПутьВСхемеВыгрузки(РодительскаяСтрокаДереваВыгрузки);
		ПутьДоМногострочнойСтроки = ПолучитьПолныйПутьВСхемеВыгрузки(ОтбСтроки[0]);
		Если Не СтрНачинаетсяС(ПутьДоМногострочнойСтроки, ПутьДоРодительскойСтроки) Тогда 
			Продолжить;
		КонецЕсли;
		ОтносительныйПуть = Сред(ПутьДоМногострочнойСтроки, СтрДлина(ПутьДоРодительскойСтроки) + 2);
		ДельтаПутиРазложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОтносительныйПуть, "/", Истина);
		УзелМногострочнойСтраницы = НайтиУзелВДеревеПоПутиРек(РодительскаяСтрокаДанных.Строки, ДельтаПутиРазложение, 0, "ИмяЭлемента");
		Если Не ТипЗнч(УзелМногострочнойСтраницы) = Тип("СтрокаДереваЗначений") Тогда 
			Продолжить;
		КонецЕсли;
		ОтбСтрокиДанных = УзелМногострочнойСтраницы.Родитель.Строки.НайтиСтроки(Новый Структура("ИмяЭлемента", УзелМногострочнойСтраницы.ИмяЭлемента), Ложь);
		
		ТЗМнг = ПолучитьИзВременногоХранилища(Форма.ДанныеДопСтрок[МнгСтр.Значение]);
		Для Каждого СтрМнг Из ОтбСтрокиДанных Цикл
			НовСтр = ТЗМнг.Добавить();
			НовСтр.УИД = УИД;
			Если СтрМнг.ТипЭлемента = "П" Тогда
				Если ТЗМнг.Колонки.Найти(СтрМнг.ИмяЭлемента) <> Неопределено Тогда 
					НовСтр[СтрМнг.ИмяЭлемента] = СтрМнг.ЗначениеЭлемента;
					
					ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПутьДоМногострочнойСтроки;
					ОтбСтрокиДата = ДополнительныеПараметры.ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтрокиДата.Количество() > 0 Тогда 
						НовСтр[СтрМнг.ИмяЭлемента] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрМнг.ЗначениеЭлемента);
					КонецЕсли;
					ОтбСтрокиДата = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтрокиДата.Количество() > 0 Тогда 
						Форма.ОсобаяОбработкаЭлементов(ПутьДоМногострочнойСтроки, СтрМнг, НовСтр);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрМнг.ТипЭлемента = "С" Тогда
				Для Каждого СтрВДереве Из ОтбСтроки[0].Строки.НайтиСтроки(Новый Структура("Раздел", ИдМнгСтр), Истина) Цикл
					Если ТЗМнг.Колонки.Найти(СтрВДереве.Ключ) = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					СтрЗагружаемоеЗначение = СтрМнг.Строки.НайтиСтроки(Новый Структура("ИмяЭлемента", СтрВДереве.Код), Истина);
					Если СтрЗагружаемоеЗначение.Количество() = 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					НовСтр[СтрВДереве.Ключ] = СтрЗагружаемоеЗначение[0].ЗначениеЭлемента;
					ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолучитьПолныйПутьВДеревеЗагрузки(СтрЗагружаемоеЗначение[0]);
					ОтбСтрокиДата = ДополнительныеПараметры.ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтрокиДата.Количество() > 0 Тогда 
						НовСтр[СтрВДереве.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение[0].ЗначениеЭлемента);
					КонецЕсли;
					ОтбСтрокиДата = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
					Если ОтбСтрокиДата.Количество() > 0 Тогда 
						Форма.ОсобаяОбработкаЭлементов(ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML, СтрЗагружаемоеЗначение[0], НовСтр);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ПоместитьВоВременноеХранилище(ТЗМнг, Форма.ДанныеДопСтрок[МнгСтр.Значение]);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьМногостраничныеСтраницыРек(Форма, ДополнительныеПараметры, СтрокиКарты, ДеревоСтраницСтроки, УИДРодителя, ТекущаяСтрокаВыгрузки, ПутьВерхнегоУровня)
	Для Каждого СтрокаКарты Из СтрокиКарты Цикл
		СтрокиВДереве = ДеревоСтраницСтроки.НайтиСтроки(Новый Структура("ИДНаименования", СтрокаКарты.ИДНаименования), Истина);
		СтрокаВДереве = СтрокиВДереве[0];
		СтрокиЭталон = ДополнительныеПараметры.ДеревоСтраницЭталон.Строки.НайтиСтроки(Новый Структура("ИДНаименования", СтрокаКарты.ИДНаименования), Истина);
		СтрокаЭталон = СтрокиЭталон[0];
		
		СтрокиВСхемеВыгрузки = ДополнительныеПараметры.СхемаВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел, Многостраничность", СтрокаКарты.ИДНаименования, Истина), Истина);
		Если СтрокиВСхемеВыгрузки.Количество() <> 1 Тогда 
			Продолжить;
		КонецЕсли;
		ПолныйПутьДоМногострочнойЧасти = ПолучитьПолныйПутьВСхемеВыгрузки(СтрокиВСхемеВыгрузки[0]);
		Если ТекущаяСтрокаВыгрузки = Неопределено Тогда 
			УзелМногострочнойСтраницы = НайтиУзелВДеревеПоПути(ДополнительныеПараметры.ДеревоЗагрузки, ПолныйПутьДоМногострочнойЧасти, "ИмяЭлемента");
		Иначе
			ДельтаПути = Сред(ПолныйПутьДоМногострочнойЧасти, СтрДлина(ПутьВерхнегоУровня) + 1);
			ДельтаПутиРазложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДельтаПути, "/");
			УзелМногострочнойСтраницы = НайтиУзелВДеревеПоПутиРек(ТекущаяСтрокаВыгрузки.Строки, ДельтаПутиРазложение, 0, "ИмяЭлемента");
		КонецЕсли;
		Если ТипЗнч(УзелМногострочнойСтраницы) <> Тип("СтрокаДереваЗначений") Тогда 
			Продолжить;
		КонецЕсли;
		
		МногостраничныеУзлы = УзелМногострочнойСтраницы.Родитель.Строки.НайтиСтроки(Новый Структура("ИмяЭлемента", УзелМногострочнойСтраницы.ИмяЭлемента), Ложь);
		СписокСтраниц = Форма.ДанныеМногостраничныхРазделов[СтрокаКарты.ИДНаименования];
		Для Инд = 0 По МногостраничныеУзлы.ВГраница() Цикл 
			УИДТекСтр = Новый УникальныйИдентификатор;
			СписокСтраниц.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СписокСтраниц[0].Значение));
			Если Инд > 0 Тогда 
				НоваяСтрокаВДереве = СтрокаВДереве.Родитель.Строки.Добавить();
				СкопироватьСтрокуВДеревеЗначенийРек(СтрокаЭталон, НоваяСтрокаВДереве);
				НоваяСтрокаВДереве.УИД = УИДТекСтр;
				НоваяСтрокаВДереве.Наименование = Лев(СтрокаЭталон.Наименование, СтрДлина(СтрокаЭталон.Наименование) - 1) + Формат((Инд + 1), "ЧГ=0");
				СтрокаВДеревеРек = НоваяСтрокаВДереве;
			Иначе
				СтрокаВДереве.УИД = УИДТекСтр;
				СтрокаВДеревеРек = СтрокаВДереве;
			КонецЕсли;
			
			ДанныеXML = МногостраничныеУзлы[Инд];
			СтраницаДляЗаполнения = СписокСтраниц[СписокСтраниц.Количество() - 1].Значение;
			СтраницаДляЗаполнения.УИД = УИДТекСтр;
			Если СтраницаДляЗаполнения.Свойство("УИДРодителя") Тогда 
				СтраницаДляЗаполнения.УИДРодителя = УИДРодителя;
			КонецЕсли;
			
			Если СтрокаВДеревеРек.Многострочность Тогда
				ЗагрузитьМногострочныеЧастиМножественнойСтраницы(Форма, ДополнительныеПараметры, СтрокаВДеревеРек, УИДТекСтр, МногостраничныеУзлы[Инд], СтрокиВСхемеВыгрузки[0]);
			КонецЕсли;
			
			Для Каждого Стр Из ДополнительныеПараметры.СхемаВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", СтрокаКарты.ИДНаименования), Истина) Цикл
				ПолныйПуть = ПолучитьПолныйПутьВСхемеВыгрузки(Стр);
				ОтносительныйПуть = СтрЗаменить(ПолныйПуть, ПолныйПутьДоМногострочнойЧасти, "");
				Если Не ЗначениеЗаполнено(ОтносительныйПуть) Тогда 
					Продолжить;
				КонецЕсли;
				СтрЗагружаемоеЗначение = НайтиУзелВДеревеПоПутиРек(ДанныеXML.Строки, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОтносительныйПуть, "/", Истина), 0, "ИмяЭлемента");
				Если ТипЗнч(СтрЗагружаемоеЗначение) = Тип("СтрокаДереваЗначений") И ЗначениеЗаполнено(Стр.Ключ) Тогда
					Если СтраницаДляЗаполнения.Свойство(Стр.Ключ) Тогда
						СтраницаДляЗаполнения[Стр.Ключ] = СтрЗагружаемоеЗначение.ЗначениеЭлемента;
						
						ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть;
						ОтбСтроки = ДополнительныеПараметры.ТаблицаДатВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
						Если ОтбСтроки.Количество() > 0 Тогда 
							СтраницаДляЗаполнения[Стр.Ключ] = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрЗагружаемоеЗначение.ЗначениеЭлемента);
						КонецЕсли;
						ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
						Если ОтбСтроки.Количество() > 0 Тогда
							Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрЗагружаемоеЗначение, СтраницаДляЗаполнения)
						КонецЕсли;
					Иначе
						ДополнительныеПараметры.СтруктураПоискаПутиXML.ПутьXML = ПолныйПуть;
						ОтбСтроки = ДополнительныеПараметры.ТаблицаОсобыхПолейВВыгрузке.НайтиСтроки(ДополнительныеПараметры.СтруктураПоискаПутиXML);
						Если ОтбСтроки.Количество() > 0 Тогда
							Форма.ОсобаяОбработкаЭлементов(ПолныйПуть, СтрЗагружаемоеЗначение, СтраницаДляЗаполнения)
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаКарты.Строки.Количество() > 0 Тогда 
				ЗагрузитьМногостраничныеСтраницыРек(Форма, ДополнительныеПараметры, СтрокаКарты.Строки, СтрокаВДеревеРек.Строки, СтрокаВДеревеРек.УИД, ДанныеXML, ПолныйПутьДоМногострочнойЧасти + "/");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСтандартнуюКартуМногостраничныхРазделов(Форма) Экспорт 
	КартаРазделов = СформироватьПустуюКартуМногостраничныхРазделов();
	ПолучитьСтандартнуюКартуМногостраничныхРазделовРек(Форма.ДеревоСтраниц.ПолучитьЭлементы(), КартаРазделов.Строки);
	Возврат КартаРазделов;
КонецФункции

Процедура ПолучитьСтандартнуюКартуМногостраничныхРазделовРек(Элементы, КартаРазделовСтроки)
	Для Каждого Элемент Из Элементы Цикл
		СтрокиРек = КартаРазделовСтроки;
		Если Элемент.Многостраничность И ЗначениеЗаполнено(Элемент.ИДНаименования) И ЗначениеЗаполнено(Элемент.УИД) Тогда 
			НовСтр = КартаРазделовСтроки.Добавить();
			НовСтр.ИДНаименования = Элемент.ИДНаименования;
			СтрокиРек = НовСтр.Строки;
		КонецЕсли;
		ПолучитьСтандартнуюКартуМногостраничныхРазделовРек(Элемент.ПолучитьЭлементы(), СтрокиРек);
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьОрганизациюПоПараметрамЗагрузки(Форма, ПараметрыЗагрузкиXML) Экспорт 
	Если ПараметрыЗагрузкиXML.Свойство("Организация") 
		И Форма.Объект.Организация <> ПараметрыЗагрузкиXML.Организация
		И ЗначениеЗаполнено(ПараметрыЗагрузкиXML.Организация) Тогда
		
		Форма.Объект.Организация = ПараметрыЗагрузкиXML.Организация;
		ПараметрыЗагрузкиXML.Свойство("РегистрацияВНалоговомОргане", Форма.Объект.РегистрацияВИФНС);
		Если Не ЗначениеЗаполнено(Форма.Объект.РегистрацияВИФНС) Тогда 
			Форма.Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Форма.Объект.Организация);
		КонецЕсли;
		Форма.ЗаполнитьНачальныеДанные();
	КонецЕсли;
КонецПроцедуры

Функция ДополнитьЗаголовокУведомления(Заголовок, Организация) Экспорт 
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда 
		Возврат Заголовок + " ("
		+ РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДатаСеанса(), "НаимЮЛСокр").НаимЮЛСокр
		+ ")";
	Иначе
		Возврат Заголовок + " ("
		+ РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДатаСеанса(), "ФИО").ФИО
		+ ")";
	КонецЕсли;
КонецФункции

Функция ОтветыНаТребование(Требование, ВидУведомления) Экспорт 
	Результат = Новый Массив;
	_Требование = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОСпецрежимахНалогообложения.Ссылка КАК Ссылка,
	|	УведомлениеОСпецрежимахНалогообложения.ДанныеУведомления КАК ДанныеУведомления
	|ИЗ
	|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
	|ГДЕ
	|	УведомлениеОСпецрежимахНалогообложения.ВидУведомления = &ВидУведомления
	|	И УведомлениеОСпецрежимахНалогообложения.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ВидУведомления", ВидУведомления);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Требование, "Организация", Истина));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РеестрДокументовПодтверждающихЛьготы
			Или ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.НевозможностьПредоставленияДокументов Тогда 
			ДанныеУведомления = Выборка.ДанныеУведомления.Получить();
			ДанныеУведомления.СтруктураРеквизитов.Свойство("_Требование", _Требование);
			Если Требование = _Требование Тогда 
				Результат.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьТребованиеИзУведомления(Уведомление) Экспорт
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Уведомление, "ВидУведомления, ДанныеУведомления", Истина);
	Если Реквизиты.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РеестрДокументовПодтверждающихЛьготы
		Или Реквизиты.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.НевозможностьПредоставленияДокументов Тогда 
		
		_Требование = Неопределено;
		ДанныеУведомления = Реквизиты.ДанныеУведомления.Получить();
		ДанныеУведомления.СтруктураРеквизитов.Свойство("_Требование", _Требование);
		Возврат _Требование;
	КонецЕсли;
КонецФункции

#Область ДанныеТребования

Функция РегистрацияВИФНСПоТребованию(Требование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НалоговыеОрганы КАК НалоговыеОрганы
	|		ПО РегистрацииВНалоговомОргане.Код = НалоговыеОрганы.Код
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец = &Организация
	|	И НалоговыеОрганы.Ссылка = &НалоговыйОрган";
		
	
	Запрос.УстановитьПараметр("Организация", Требование.Организация);
	Запрос.УстановитьПараметр("НалоговыйОрган", Требование.НалоговыйОрган);
	
	РегистрацияВИФНС = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		РегистрацияВИФНС = Выборка.Ссылка;
	КонецЦикла;
	
	Возврат РегистрацияВИФНС;
	
КонецФункции

Функция ДанныеОтветаНаТребование(ОтветНаТребованиеДокументов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(ОтветНаТребованиеДокументов);
	Если ЦиклОбмена = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ответ на требование должен быть отправлен'"));
		Возврат Неопределено;
	КонецЕсли;
	
	СообщенияЦикла = ДокументооборотСКОВызовСервера.ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена);
	
	Данные     = ДанныеЧтенияОтветаНаТребование(ОтветНаТребованиеДокументов, СообщенияЦикла);
	ДатаПриема = ДатаПриемаОтветаНаТребование(ОтветНаТребованиеДокументов, СообщенияЦикла);
	
	Если Данные = Неопределено ИЛИ ДатаПриема = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось получить данные из ответа на требование'"));
		Возврат Неопределено;
	Иначе
		Данные.Вставить("_ДатаПрмЭ", ДатаПриема);
		Возврат Данные;
	КонецЕсли;
	
КонецФункции

Функция ДатаПриемаОтветаНаТребование(ОтветНаТребованиеДокументов, СообщенияЦикла)
	
		Сообщения = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО));
	
	Если Сообщения.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ответ на требование должен быть принят в ФНС'"));
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();

	ТранспортноеСообщение = Сообщения[0].Ссылка;
	Вложения = КонтекстЭДОСервер.ПолучитьВложенияТранспортногоСообщения(
		ТранспортноеСообщение, 
		Истина, 
		Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеДокумент);
	
	ДвДанныеКвитанцииОПриеме = Неопределено;
	Для каждого Вложение Из Вложения Цикл
		Если Вложение.ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.xml Тогда
			
			ДвДанныеКвитанцииОПриеме = Вложение.Данные.Получить();
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ДвДанныеКвитанцииОПриеме = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ДвДанныеКвитанцииОПриеме.Записать(ВременныйФайл);
	
	ДеревоXML = КонтекстЭДОСервер.ЗагрузитьXMLВДеревоЗначений(ВременныйФайл);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайл);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДатаСтрокой = КонтекстЭДОСервер.НайтиСтрокиДереваЗначений(ДеревоXML,,, "ДатаПрин", "А", Истина).Значение;
	_ДатаПрмЭ = КонтекстЭДОСервер.ДатаВремяИзСтроки(ДатаСтрокой);
	Возврат _ДатаПрмЭ;
	
КонецФункции

Функция ДанныеЧтенияОтветаНаТребование(ОтветНаТребованиеДокументов, СообщенияЦикла) Экспорт
	
	Сообщения = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП));
	
	Если Сообщения.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ответ на требование должен быть отправлен'"));
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();

	ТранспортноеСообщение = Сообщения[0].Ссылка;
	Вложения = КонтекстЭДОСервер.ПолучитьВложенияТранспортногоСообщения(
		ТранспортноеСообщение, 
		Истина, 
		Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Представление);
	
	ДвДанныеОписи = Неопределено;
	Для каждого Вложение Из Вложения Цикл
		Если Вложение.ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.xml Тогда
			ДвДанныеОписи = Вложение.Данные.Получить();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДвДанныеОписи = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ДвДанныеОписи.Записать(ВременныйФайл);
	
	ДеревоXML = КонтекстЭДОСервер.ЗагрузитьXMLВДеревоЗначений(ВременныйФайл);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайл);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	_ИмяОпис    = КонтекстЭДОСервер.НайтиСтрокиДереваЗначений(ДеревоXML,,, "ИдФайл", "А", Истина).Значение;
	_ИмяФайлОтв = КонтекстЭДОСервер.НайтиСтрокиДереваЗначений(ДеревоXML,,, "ИдФайлОсн", "Э", Истина).Значение;
	
	_ИмяДокР = Новый Массив;
	НайденныеСтроки = Новый Массив;
	УзлыИмяФайл = КонтекстЭДОСервер.НайтиСтрокиДереваЗначений(ДеревоXML,,НайденныеСтроки, "ИмяФайл", "Э", Истина).Значение;
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		_ИмяДокР.Добавить(НайденнаяСтрока.Значение);
	КонецЦикла; 
	
	Результат = Новый Структура();
	Результат.Вставить("_ИмяДокР", _ИмяДокР);
	Результат.Вставить("_ИмяФайлОтв", _ИмяФайлОтв);
	Результат.Вставить("_ИмяОпис", _ИмяОпис);
	Результат.Вставить("_КодНОДокПред", ОтветНаТребованиеДокументов.НалоговыйОрган.Код);
	
	Возврат Результат;
	
КонецФункции

Функция ИмяФайлаТребования(Требование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	_ИмяФайлТреб = "";
	Если ТипЗнч(Требование) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда 
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		ИменаФайлов = КонтекстЭДОСервер.ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Требование);
		_ИмяФайлТреб = КонтекстЭДОСервер.ИмяФайлаБезРасширения(ИменаФайлов[0].ИмяФайла);
	КонецЕсли;
	
	Возврат _ИмяФайлТреб;
	
КонецФункции

Функция ДанныеТребования(Требование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрацияВИФНС = РегистрацияВИФНСПоТребованию(Требование);
	_ИмяФайлТреб     = ИмяФайлаТребования(Требование);
	_НомТреб         = Требование.НомерДокумента;
	_ДатаТреб        = Требование.ДатаДокумента;
	
	Результат = Новый Структура();
	Результат.Вставить("_ИмяФайлТреб",     _ИмяФайлТреб);
	Результат.Вставить("_НомТреб",         _НомТреб);
	Результат.Вставить("_ДатаТреб",        _ДатаТреб);
	Результат.Вставить("РегистрацияВИФНС", РегистрацияВИФНС);
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаФормОтчета() Экспорт 
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОбщегоНазначения.ОписаниеТипаСтрока(200), "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата), "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата), "         " + "по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОбщегоНазначения.ОписаниеТипаСтрока(50), "Редакция формы", 20);
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

#КонецОбласти

#Область РаботаСАдресамиФИАС

Функция СоответствиеПоказателейСтраницыРеквизитамАдреса() 
	Соотв = Новый Структура;
	Соотв.Вставить("ИдентификаторАдресногоОбъекта", "Аддр_ИдНом");
	Соотв.Вставить("КодРегиона", "Аддр_Регион");
	Соотв.Вставить("МуниципальныйРайонВид", "Аддр_МуниципРайонВидКод");
	Соотв.Вставить("МуниципальныйРайон", "Аддр_МуниципРайонНаим");
	Соотв.Вставить("ПоселениеВид", "Аддр_ГородСелПоселенВидКод");
	Соотв.Вставить("Поселение", "Аддр_ГородСелПоселенНаим");
	Соотв.Вставить("НаселенныйПунктВид", "Аддр_НаселенПунВид");
	Соотв.Вставить("НаселенныйПункт", "Аддр_НаселенПунктНаим");
	Соотв.Вставить("ТерриторияТип", "Аддр_ЭлПланСтруктурТип");
	Соотв.Вставить("Территория", "Аддр_ЭлПланСтруктурНаим");
	Соотв.Вставить("УлицаТип", "Аддр_ЭлУлДорСетиТип");
	Соотв.Вставить("Улица", "Аддр_ЭлУлДорСетиНаим");
	Соотв.Вставить("ПомещениеВЗданииТип", "Аддр_ПомещЗданияТип");
	Соотв.Вставить("ПомещениеВЗданииНомер", "Аддр_ПомещЗданияНомер");
	Соотв.Вставить("ПомещениеВКвартиреТип", "Аддр_ПомещКвартирыТип");
	Соотв.Вставить("НомерЗемельногоУчастка", "Аддр_ЗемелУчасток");
	Возврат Соотв;
КонецФункции

Процедура ОбновитьАдресВМногостраничнойСтранице(Результат, Форма, ТекущееИДНаименования, УИДТекущаяСтраница) Экспорт 
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Форма.ПредставлениеУведомления.Области["АдресJSON"].Значение = Результат.Значение;
		
		ТекСтраницаДанные = Неопределено;
		Для Каждого Стр Из Форма.ДанныеМногостраничныхРазделов[ТекущееИДНаименования] Цикл 
			Если Стр.Значение.УИД = УИДТекущаяСтраница Тогда 
				ТекСтраницаДанные = Стр.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекСтраницаДанные <> Неопределено Тогда 
			ТекСтраницаДанные["АдресJSON"] = Результат.Значение;
		КонецЕсли;
		
		ПоказателиАдреса = СоответствиеПоказателейСтраницыРеквизитамАдреса();
		АдресВФорматеФИАС = АдресВФорматеФИАС(Результат.Значение);
		Для Каждого КЗ Из АдресВФорматеФИАС Цикл
			Если ТипЗнч(КЗ.Значение) = Тип("Массив") Тогда
				Если КЗ.Ключ = "Здания" Тогда 
					Для Инд = 1 По 3 Цикл
						ТекСтраницаДанные["Аддр_ЗданиеТип" + Инд] = "";
						Форма.ПредставлениеУведомления.Области["Аддр_ЗданиеТип" + Инд].Значение = "";
						ТекСтраницаДанные["Аддр_ЗданиеНомер" + Инд] = "";
						Форма.ПредставлениеУведомления.Области["Аддр_ЗданиеНомер" + Инд].Значение = "";
					КонецЦикла;
					Для Инд = 1 По 3 Цикл 
						Если КЗ.Значение.Количество() < Инд Тогда 
							Прервать;
						КонецЕсли;
						ТекСтраницаДанные["Аддр_ЗданиеТип" + Инд] = КЗ.Значение[Инд - 1].ЗданиеТип;
						Форма.ПредставлениеУведомления.Области["Аддр_ЗданиеТип" + Инд].Значение = КЗ.Значение[Инд - 1].ЗданиеТип;
						ТекСтраницаДанные["Аддр_ЗданиеНомер" + Инд] = КЗ.Значение[Инд - 1].ЗданиеНомер;
						Форма.ПредставлениеУведомления.Области["Аддр_ЗданиеНомер" + Инд].Значение = КЗ.Значение[Инд - 1].ЗданиеНомер;
					КонецЦикла;
				КонецЕсли;
			Иначе
				Если ПоказателиАдреса.Свойство(КЗ.Ключ)
					И ТекСтраницаДанные.Свойство(ПоказателиАдреса[КЗ.Ключ]) Тогда 
					
					ТекСтраницаДанные[ПоказателиАдреса[КЗ.Ключ]] = КЗ.Значение;
					Форма.ПредставлениеУведомления.Области[ПоказателиАдреса[КЗ.Ключ]].Значение = КЗ.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Форма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьАдресВМногостраничнойСтранице(ТаблицаОшибок, Данные, ИДСтраницы) Экспорт 
	Если СтрДлина(СокрЛП(Данные.Аддр_Регион)) <> 2 Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан / неправильно указан код региона", ИДСтраницы, "Аддр_Регион", Данные.УИД));
	КонецЕсли;
	Если Данные.Аддр_Регион <> "99"
		Или ЗначениеЗаполнено(Данные.Аддр_МуниципРайонВидКод) 
		Или ЗначениеЗаполнено(Данные.Аддр_МуниципРайонНаим) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_МуниципРайонВидКод) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан вид муниципального района", ИДСтраницы, "Аддр_МуниципРайонВидКод", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_МуниципРайонНаим) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указано наименование муниципального района/городского округа/внутригородской " 
				+ "территории города федерального значения/муниципального округа",
				ИДСтраницы, "Аддр_МуниципРайонНаим", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.Аддр_МуниципРайонВидКод) И
		(Данные.Аддр_МуниципРайонВидКод <> "1" И Данные.Аддр_МуниципРайонВидКод <> "2"
		И Данные.Аддр_МуниципРайонВидКод <> "3" И Данные.Аддр_МуниципРайонВидКод <> "4") Тогда 
		
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Неправильно указан вид муниципального района", ИДСтраницы, "Аддр_МуниципРайонВидКод", Данные.УИД));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Аддр_ГородСелПоселенВидКод) 
		Или ЗначениеЗаполнено(Данные.Аддр_ГородСелПоселенНаим) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_ГородСелПоселенВидКод) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан вид городского поселения", ИДСтраницы, "Аддр_ГородСелПоселенВидКод", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_ГородСелПоселенНаим) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указано наименование городского поселения/сельского поселения/межселенной территории"
				+"в составе муниципального района/внутригородского района городского округ", ИДСтраницы,
				"Аддр_ГородСелПоселенНаим", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.Аддр_ГородСелПоселенВидКод) И
		(Данные.Аддр_ГородСелПоселенВидКод <> "1" И Данные.Аддр_ГородСелПоселенВидКод <> "2"
		И Данные.Аддр_ГородСелПоселенВидКод <> "3" И Данные.Аддр_ГородСелПоселенВидКод <> "4") Тогда 
		
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Неправильно указан вид городского поселения", ИДСтраницы, "Аддр_ГородСелПоселенВидКод", Данные.УИД));
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Данные.Аддр_НаселенПунВид) 
		Или ЗначениеЗаполнено(Данные.Аддр_НаселенПунктНаим) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_НаселенПунВид) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан вид населенного пункта", ИДСтраницы, "Аддр_НаселенПунВид", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_НаселенПунктНаим) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан населенный пункт", ИДСтраницы, "Аддр_НаселенПунктНаим", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Аддр_ЭлПланСтруктурТип) 
		Или ЗначениеЗаполнено(Данные.Аддр_ЭлПланСтруктурНаим) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_ЭлПланСтруктурТип) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан вид элемента планировочной структуры", ИДСтраницы, "Аддр_ЭлПланСтруктурТип", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_ЭлПланСтруктурНаим) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан элемент планировочной структуры", ИДСтраницы, "Аддр_ЭлПланСтруктурНаим", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Аддр_ЭлУлДорСетиТип) 
		Или ЗначениеЗаполнено(Данные.Аддр_ЭлУлДорСетиНаим) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_ЭлУлДорСетиТип) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан вид улично-дорожной сети", ИДСтраницы, "Аддр_ЭлУлДорСетиТип", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_ЭлУлДорСетиНаим) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан элемент улично-дорожной сети", ИДСтраницы, "Аддр_ЭлУлДорСетиНаим", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Аддр_ПомещЗданияТип) 
		Или ЗначениеЗаполнено(Данные.Аддр_ПомещЗданияНомер) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_ПомещЗданияТип) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан тип помещения", ИДСтраницы, "Аддр_ПомещЗданияТип", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_ПомещЗданияНомер) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан номер помещение", ИДСтраницы, "Аддр_ПомещЗданияНомер", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Аддр_ПомещКвартирыТип) 
		Или ЗначениеЗаполнено(Данные.Аддр_ПомещКвартирыНомер) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.Аддр_ПомещКвартирыТип) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан тип помещения внутри кваритры", ИДСтраницы, "Аддр_ПомещКвартирыТип", Данные.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.Аддр_ПомещКвартирыНомер) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан номер помещения внутри квартиры", ИДСтраницы, "Аддр_ПомещКвартирыНомер", Данные.УИД));
		КонецЕсли;
	КонецЕсли;
	
	Для Инд = 1 По 3 Цикл 
		Если ЗначениеЗаполнено(Данные["Аддр_ЗданиеТип" + Инд]) 
			Или ЗначениеЗаполнено(Данные["Аддр_ЗданиеНомер" + Инд]) Тогда 
			
			Если Не ЗначениеЗаполнено(Данные["Аддр_ЗданиеТип" + Инд]) Тогда 
				ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
					"Не указан тип здания", ИДСтраницы, "Аддр_ЗданиеТип" + Инд, Данные.УИД));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Данные["Аддр_ЗданиеНомер" + Инд]) Тогда 
				ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
					"Не указан номер здания", ИДСтраницы, "Аддр_ЗданиеНомер" + Инд, Данные.УИД));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция АдресНаМногостраничнойСтраницеЗаполнен(Данные) Экспорт
	Для Каждого КЗ Из Данные Цикл 
		Если ЗначениеЗаполнено(КЗ.Значение)
			И СтрНачинаетсяС(КЗ.Ключ, "Аддр_") Тогда 
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ОбрезанноеНазвание(ИсходноеНазвание, ВырезаемаяПодстрока)
	
	ПозицияВырезки = СтрНайти(ВРег(ИсходноеНазвание), ВРег(ВырезаемаяПодстрока));
	
	ОбрезаннаяСтрока = ИсходноеНазвание;
	
	Если ПозицияВырезки > 0 Тогда
		ОбрезаннаяСтрока = Лев(ИсходноеНазвание, ПозицияВырезки - 1)
		                 + Сред(ИсходноеНазвание, ПозицияВырезки + СтрДлина(ВырезаемаяПодстрока));
	КонецЕсли;
	
	Возврат СокрЛП(ОбрезаннаяСтрока);
	
КонецФункции

#КонецОбласти

#КонецОбласти
