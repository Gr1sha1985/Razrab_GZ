#Область ПрограммныйИнтерфейс

#Область ДокументыРасходов // Для вызова из обработчиков форм

// Формы должны удовлетворять требованиям из УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы

// Подключает обработчик ожидания, периодически выполняющий обновление данных о чеках к загрузке.
// Имя обработчика указано в ОписаниеФормы.
// Обработчик ожидания должен вызывать ОбновитьЧекиКЗагрузке
// Следует вызвать из ПриОткрытии формы
//
// Параметры:
//  Форма         - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                                     должна соответствовать описанию
//  ОписаниеФормы   - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы
//
Процедура ПодключитьОбновлениеЧековКЗагрузке(Форма, ОписаниеФормы) Экспорт
	
	Форма.ОтключитьОбработчикОжидания(ОписаниеФормы.ОбработчикОжидания); // чтобы заведомо избежать повторного подключения
	
	Если ПустаяСтрока(Форма[ОписаниеФормы.РеквизитСледующееДействие]) Тогда
		Возврат;
	КонецЕсли;
	
	Интервал = ИнтервалПроверкиЧековПодотчетныхЛиц(Истина);
	
	Форма.ПодключитьОбработчикОжидания(ОписаниеФормы.ОбработчикОжидания, Интервал, Истина);
	// См. ОбновитьЧекиКЗагрузке
	
КонецПроцедуры

// Запускает одну итерацию периодического опроса сервера о получении новых чеков.
// При получении новых данных они будут доступны для подбора, а баннер с информацией о чеках к загрузке обновится.
//
// Параметры:
//  Форма         - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                                     должна соответствовать описанию
//  ОписаниеФормы   - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы
//
Процедура ОбновитьЧекиКЗагрузке(Форма, ОписаниеФормы) Экспорт
	
	АдресДанныеФормы = Форма[ОписаниеФормы.РеквизитДанныеФормы];
	
	Если Не ЭтоАдресВременногоХранилища(АдресДанныеФормы) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = УчетКассовыхЧековПодотчетныхЛицВызовСервера.НачатьОбновлениеЧековКЗагрузке(
		АдресДанныеФормы,
		Форма.УникальныйИдентификатор);
		
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Форма",         Форма);
	ПараметрыЗавершения.Вставить("ОписаниеФормы", ОписаниеФормы);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ЗавершитьОбновлениеЧековКЗагрузке",
		УчетКассовыхЧековПодотчетныхЛицКлиент,
		ПараметрыЗавершения);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Обработчик команды "Загрузить в документ" форм документов с расходами.
// Инициирует установку мобильного приложения или загрузку чеков.
//
// Параметры:
//  Форма         - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                                     должна соответствовать описанию
//  ПодотчетноеЛицо - СправочникСсылка.ФизическоеЛицо - сотрудник, предоставивший чеки
//  ОписаниеФормы   - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы
//  ОповещениеЗаполнениеДокумента - ОписаниеОповещения - обработчик оповещения, размещенный в форме.
//      Обработчик должен контекстно передать управление на сервер
//      и вызвать там УчетКассовыхЧековПодотчетныхЛиц.ДействияПоЗаполнениюНаСервере.
//      В качестве дополнительного параметра обработчика следует передать структуру из двух элементов:
//          Строка - имя заполняемой табличной части,
//          Булево - признак из документа СуммаВключаетНДС.
//
Процедура НачатьЗагрузкуВДокумент(Форма, ПодотчетноеЛицо, ОписаниеФормы, ОповещениеЗаполнениеДокумента) Экспорт
	
	Действие         = Форма[ОписаниеФормы.РеквизитСледующееДействие];
	АдресДанныеФормы = Форма[ОписаниеФормы.РеквизитДанныеФормы];
	
	Если Действие = "Сканировать" Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Нет чеков к загрузке. Отсканируйте чеки в мобильном приложении 1С:БизнесСтарт. Сканер чеков'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	ИначеЕсли Действие = "ЗагрузитьВсе" Тогда
		
		НачатьЗаполнениеДокумента("ЗагрузитьВсе", АдресДанныеФормы, ОповещениеЗаполнениеДокумента);
		
	ИначеЕсли Действие = "Подобрать" Тогда
		
		Форма.ОтключитьОбработчикОжидания(ОписаниеФормы.ОбработчикОжидания); // на время работы с формой подбора
		
		КонтекстПодбора = Новый Структура;
		КонтекстПодбора.Вставить("АдресКассовыеЧеки", АдресДанныеФормы);
		КонтекстПодбора.Вставить("ПодотчетноеЛицо",   ПодотчетноеЛицо);
		
		КонтекстЗавершенияПодбора = Новый Структура;
		КонтекстЗавершенияПодбора.Вставить("ОписаниеФормы",                 ОписаниеФормы);
		КонтекстЗавершенияПодбора.Вставить("АдресДанныеФормы",              АдресДанныеФормы);
		КонтекстЗавершенияПодбора.Вставить("ОповещениеЗаполнениеДокумента", ОповещениеЗаполнениеДокумента);
	
		ЗавершениеПодбора = Новый ОписаниеОповещения(
			"ЗавершитьПодборВДокумент",
			УчетКассовыхЧековПодотчетныхЛицКлиент,
			КонтекстЗавершенияПодбора);
		
		ОткрытьФорму(
			"Документ.КассовыйЧекПодотчетногоЛица.Форма.ПодборКассовыхЧековДляЗагрузки",
			КонтекстПодбора,
			ЭтотОбъект,
			, // Уникальность
			, // Окно
			, // НавигационнаяСсылка
			ЗавершениеПодбора);
			
	Иначе
		
		КонтекстЗавершенияПодключения = Новый Структура;
		КонтекстЗавершенияПодключения.Вставить("ОписаниеФормы",                 ОписаниеФормы);
		КонтекстЗавершенияПодключения.Вставить("ОповещениеЗаполнениеДокумента", ОповещениеЗаполнениеДокумента);
	
		ЗавершениеПодключения = Новый ОписаниеОповещения(
			"ЗавершитьПодключениеСканированияЧеков",
			УчетКассовыхЧековПодотчетныхЛицКлиент,
			КонтекстЗавершенияПодключения);
			
		ОткрытьФорму(
			"ОбщаяФорма.ПомощникУстановкиМобильногоПриложенияСканированиеЧеков",
			, // ПараметрыФормы
			ЭтотОбъект,
			, // Уникальность
			, // Окно
			, // НавигационнаяСсылка
			ЗавершениеПодключения, // ОписаниеОповещения
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие при начале редактирования строки. При копировании строки, очищается поле чека.
//
// Параметры:
//  Элемент			 - ТаблицаФормы - таблица, для которой вызывается метод
//  Копирование		 - Булево - определяет режим копирования
//  ОчищатьОписание	 - Булево - определяет нужно ли очищать поле "Наименование из чека"
//
Процедура ПриНачалеРедактированияОчиститьЧек(Элемент, Копирование, ОчищатьОписание = Истина) Экспорт
	
	Если Не Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.КассовыйЧек = Неопределено;
	Если Не ОчищатьОписание Тогда
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.Свойство("Описание") Тогда
		Элемент.ТекущиеДанные.Описание = "";
	КонецЕсли;
	Если Элемент.ТекущиеДанные.Свойство("Содержание") Тогда
		Элемент.ТекущиеДанные.Содержание = "";
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие обработки выбора номенклатуры
//
// Параметры:
//  Элемент					 - ПолеФормы - см. описание параметра обработчика ОбработкаВыбора
//  ВыбранноеЗначение		 - Произвольный - см. описание параметра обработчика ОбработкаВыбора
//  СтандартнаяОбработка	 - Булево - см. описание параметра обработчика ОбработкаВыбора
//  ТекДанные				 - ДанныеФормыЭлементКоллекции - текущая строка таблицы формы
//  НоменклатураНаименование - Строка - наименование номенклатуры из чека
//
Процедура НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ТекДанные, НоменклатураНаименование) Экспорт
	
	Если ПустаяСтрока(Элемент.ТекстРедактирования) И Не ПустаяСтрока(НоменклатураНаименование) Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда // см. НоменклатураАвтоПодбор
			СтандартнаяОбработка = Ложь;
			
			ДанныеЗаполнения = Новый Структура;
			Если ЗначениеЗаполнено(ТекДанные.КассовыйЧек) Тогда
				ДанныеЧека = УчетКассовыхЧековПодотчетныхЛицВызовСервера.ДанныеЧека(
					ТекДанные.КассовыйЧек,
					НоменклатураНаименование);
				Если ДанныеЧека.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(ДанныеЧека.ЕдиницаИзмерения) Тогда
					ДанныеЗаполнения.Вставить("ЕдиницаИзмерения", ДанныеЧека.ЕдиницаИзмерения);
				КонецЕсли;
				Если ДанныеЧека.Свойство("СтавкаНДС") И ЗначениеЗаполнено(ДанныеЧека.СтавкаНДС) Тогда
					ДанныеЗаполнения.Вставить("СтавкаНДС", ДанныеЧека.СтавкаНДС);
				КонецЕсли;
			КонецЕсли;
			ДанныеЗаполнения.Вставить("НаименованиеПолное",    НоменклатураНаименование);
			ДанныеЗаполнения.Вставить("ВидНоменклатуры",       ВыбранноеЗначение);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора", Истина);
			ПараметрыФормы.Вставить("ТекстЗаполнения", НоменклатураНаименование);
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
			
			// Форму открываем, т.к. может потребоваться изменить наименование номенклатуры
			ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, Элемент);
			
		КонецЕсли;
	Иначе
		РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие автоподбора номенклатуры.
//
// Параметры:
//  ДанныеВыбора		 - СписокЗначений - см. описание параметра обработчика АвтоПодбор
//  СтандартнаяОбработка - Булево - см. описание параметра обработчика АвтоПодбор
//  Параметры			 - Структура - см. ПараметрыАвтоПодбораНовый
//
Процедура НоменклатураАвтоПодбор(ДанныеВыбора, СтандартнаяОбработка, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.Номенклатура)
		И ПустаяСтрока(Параметры.Текст)
		И Не ПустаяСтрока(Параметры.НоменклатураНаименование) Тогда
		
		Если НЕ ЗначениеЗаполнено(Параметры.Элемент.ОграничениеТипа)
			ИЛИ Параметры.Элемент.ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
			СтандартнаяОбработка = Ложь;
			Параметры.ПараметрыПолученияДанных.СтрокаПоиска = Параметры.НоменклатураНаименование;
			Параметры.ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", Параметры.ВидыНоменклатуры);
			ДанныеВыбора = УчетКассовыхЧековПодотчетныхЛицВызовСервера.ДанныеВыбораНоменклатуры(
				Параметры.ПараметрыПолученияДанных,
				Параметры.НоменклатураНаименование);
		КонецЕсли;
		
	Иначе
		
		РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
			Параметры.Элемент, Параметры.Текст, ДанныеВыбора, Параметры.ПараметрыПолученияДанных, Параметры.Ожидание, СтандартнаяОбработка);
			
	КонецЕсли;
	
КонецПроцедуры

// Обработчик гиперссылки закрытия баннера с информацией о чеках к загрузке
//
// Параметры:
//  Форма         - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                                     должна соответствовать описанию
//  ОписаниеФормы   - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы
//
Процедура СкрытьБаннер(Форма, ОписаниеФормы) Экспорт
	
	Форма.Элементы[ОписаниеФормы.Баннер].Видимость = Ложь;
	Форма.ОтключитьОбработчикОжидания(ОписаниеФормы.ОбработчикОжидания);
	
КонецПроцедуры

// Конструктор параметров процедуры ТоварыНоменклатураАвтоПодбор
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция ПараметрыАвтоПодбораНовый() Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Элемент",                  Неопределено);
	ПараметрыПроцедуры.Вставить("Текст",                    "");
	ПараметрыПроцедуры.Вставить("ПараметрыПолученияДанных", Новый Структура);
	ПараметрыПроцедуры.Вставить("Ожидание",                 0);
	ПараметрыПроцедуры.Вставить("Номенклатура",             ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ПараметрыПроцедуры.Вставить("НоменклатураНаименование", "");
	ПараметрыПроцедуры.Вставить("ВидыНоменклатуры",         "");
	
	Возврат ПараметрыПроцедуры;
	
КонецФункции

// Отключает обработчик ожидания, который выполняет обновление данных о чеках к загрузке.
// Имя обработчика указано в ОписаниеФормы.
// Отключение этого обработчика необходимо на время сканирования QR-кода с чека аппаратным сканером штрихкода.
//
// Параметры:
//  Форма         - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                                     должна соответствовать описанию
//  ОписаниеФормы   - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы
//
Процедура ОтключитьОбновлениеЧековКЗагрузке(Форма, ОписаниеФормы) Экспорт
	
	Форма.ОтключитьОбработчикОжидания(ОписаниеФормы.ОбработчикОжидания);
	
КонецПроцедуры

// Подключает аппаратный сканер штрихкода.
//
// Параметры:
//  Форма - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                             либо общая форма ПолучениеДанныхКассовогоЧекаПодотчетногоЛица
//
Процедура ПодключитьСканерШтрихкода(Форма) Экспорт
	
	Если Форма.ИспользуютсяСканерыШтрихкода И НЕ Форма.ТолькоПросмотр Тогда
		// Попробуем подключить сканер штрихкода
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьСканерШКЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма));
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, Форма.УникальныйИдентификатор, "СканерШтрихкода");
	КонецЕсли;
	
КонецПроцедуры

// Отключает аппаратный сканер штрихкода.
//
// Параметры:
//  Форма - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                             должна соответствовать описанию
//
Процедура ОтключитьСканерШтрихкода(Форма) Экспорт
	
	Если Форма.СканерШтрихкодаПодключен Тогда
		ТипыПО = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СканерШтрихкода");
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ОтключитьСканерШКЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма));
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриПодключении, Форма.УникальныйИдентификатор, ТипыПО);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик закрытия баннера с информацией о том, что подключен сканер штрихкода.
//
// Параметры:
//  Форма         - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                                     должна соответствовать описанию
//
Процедура СкрытьБаннерПодключенАппаратныйСканер(Форма) Экспорт
	
	Форма.Элементы.ГруппаБаннерПодключенАппаратныйСканер.Видимость = Ложь;
	УчетКассовыхЧековПодотчетныхЛицВызовСервера.СохранитьОтключениеВидимостиБаннераПодключенАппаратныйСканер();
	
КонецПроцедуры

// Обрабатывает событие при сканировании QR-кода с кассового чека аппаратным сканером штрихкода.
// Открывает общую форму ПолучениеДанныхКассовогоЧекаПодотчетногоЛица.
//
// Параметры:
//  Форма							 - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                                     должна соответствовать описанию
//  ОписаниеФормы					 - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы
//  ИмяСобытия						 - Строка - имя события обработки оповещения
//  Параметр						 - Произвольный - параметр обработки оповещения
//  ИмяСписка						 - Строка - имя заполняемой табличной части
//  СуммаВключаетНДС				 - Булево - признак из документа СуммаВключаетНДС
//
Процедура ОбработатьОтветСканера(Форма, ОписаниеФормы, ИмяСобытия, Параметр, ИмяСписка, СуммаВключаетНДС) Экспорт
	
	Если Форма.ВводДоступен() И ИмяСобытия = "ScanData"
		И Не ПустаяСтрока(Форма[ОписаниеФормы.РеквизитСледующееДействие]) Тогда
		
		Если Параметр[1] = Неопределено Тогда
			ТекущийКод = Параметр[0];
		Иначе
			ТекущийКод = Параметр[1][1];
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("QRКод", ТекущийКод);
		ПараметрыФормы.Вставить("ИмяСписка", ИмяСписка);
		ПараметрыФормы.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		ПараметрыФормы.Вставить("АдресДанныеФормы", Форма[ОписаниеФормы.РеквизитДанныеФормы]);
		ОповещениеОЗакрытииФормы = Новый ОписаниеОповещения(
			"ПолучениеДанныхКассовогоЧекаПодотчетногоЛицаЗакрытие",
			ЭтотОбъект,
			Новый Структура("Форма, ОписаниеФормы", Форма, ОписаниеФормы));
		ОтключитьОбновлениеЧековКЗагрузке(Форма, ОписаниеФормы);
		ОткрытьФорму("ОбщаяФорма.ПолучениеДанныхКассовогоЧекаПодотчетногоЛица", ПараметрыФормы, Форма,,,, ОповещениеОЗакрытииФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает интервал, через который будет выполнятся фоновое задание по проверке чеков подотчетных лиц.
//
// Параметры:
//  ПриОткрытииФормы	 - Булево - признак того, что процедура вызывается из события ПриОткрытии модуля формы
// 
// Возвращаемое значение:
//  Число- время в секундах
//
Функция ИнтервалПроверкиЧековПодотчетныхЛиц(ПриОткрытииФормы = Ложь)
	
	Если ПриОткрытииФормы Тогда
		Возврат 10;
	Иначе
		Возврат 20;
	КонецЕсли;
	
КонецФункции

// Обработчик завершения длительной операции УчетКассовыхЧековПодотчетныхЛиц.ОбновитьЧекиКЗагрузке
// Если данные о чеках к загрузке изменились, обновляет сведения для подбора и баннер на форме.
//
// Параметры:
//  Результат           - Структура - результат длительной операции, см. ДлительныеОперацииКлиент.ОжидатьЗавершение
//  ПараметрыЗавершения - Структура
//     * Форма          - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                                     должна соответствовать описанию
//     * ОписаниеФормы   - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы
//
Процедура ЗавершитьОбновлениеЧековКЗагрузке(Результат, ПараметрыЗавершения) Экспорт// Обработчик оповещения
	
	Форма         = ПараметрыЗавершения.Форма;
	ОписаниеФормы = ПараметрыЗавершения.ОписаниеФормы;
	
	Форма.ПодключитьОбработчикОжидания(ОписаниеФормы.ОбработчикОжидания, ИнтервалПроверкиЧековПодотчетныхЛиц(), Истина);
	
	Если Не ЗначениеЗаполнено(Результат) Или Результат.Статус <> "Выполнено" Тогда
		Форма.ОбновитьОтображениеДанных(Новый Массив);
		Возврат;
	КонецЕсли;
	
	РезультатОбновления = УчетКассовыхЧековПодотчетныхЛицВызовСервера.ЗавершитьОбновлениеЧековКЗагрузке(
		Форма[ОписаниеФормы.РеквизитДанныеФормы],
		Результат.АдресРезультата);
		
	Если РезультатОбновления = Неопределено Или Не РезультатОбновления.ДанныеОбновлены Тогда
		Форма.ОбновитьОтображениеДанных(Новый Массив);
		Возврат;
	КонецЕсли;
	
	УчетКассовыхЧековПодотчетныхЛицКлиентСервер.ОбновитьБаннерЧекиКЗагрузке(
		Форма,
		ОписаниеФормы,
		РезультатОбновления.ТекстБаннера);
	
	Форма[ОписаниеФормы.РеквизитСледующееДействие] = РезультатОбновления.СледующееДействие;
	
	Форма.ОбновитьОтображениеДанных(Форма.Элементы[ОписаниеФормы.Баннер]);
	
КонецПроцедуры

// Инициирует обработку результата подбора: получение содержимого подобранных чеков.
// Обработчик закрытия формы подбора.
//
// Параметры:
//  РезультатПодбора          - Массив из ДокументСсылка.КассовыйЧекПодотчетногоЛица - выбранные пользователем чеки
//  КонтекстЗавершенияПодбора - Структура
//    * ОписаниеФормы    - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы
//    * АдресДанныеФормы - адрес во временном хранилище, где размещаются данные о чеках к загрузке
//                         (см. УчетКассовыхЧековПодотчетныхЛиц.НовыйДанныеФормыКассовыеЧекиПодотчетныхЛиц)
//    * ОповещениеЗаполнениеДокумента - см. параметр в НачатьЗагрузкуВДокумент
//
Процедура ЗавершитьПодборВДокумент(РезультатПодбора, КонтекстЗавершенияПодбора) Экспорт // Обработчик оповещения
	
	Форма = КонтекстЗавершенияПодбора.ОповещениеЗаполнениеДокумента.Модуль;
	ПодключитьОбновлениеЧековКЗагрузке(Форма, КонтекстЗавершенияПодбора.ОписаниеФормы);
	
	Если ТипЗнч(РезультатПодбора) <> Тип("Массив") Или Не ЗначениеЗаполнено(РезультатПодбора) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗаполнениеДокумента(
		РезультатПодбора,
		КонтекстЗавершенияПодбора.АдресДанныеФормы,
		КонтекстЗавершенияПодбора.ОповещениеЗаполнениеДокумента);
	
КонецПроцедуры

// Инициирует включение в форме механизма работы с чеками, в случае,
// если до открытия формы подключения мобильного приложения механизм не использовался,
// а после закрытия формы - начал использоваться.
// Обработчик закрытия формы подключения приложения.
//
// Параметры:
//  РезультатУстановки        - Неопределено - не используется
//  Контекст - Структура
//    * ОписаниеФормы    - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы
//    * ОповещениеЗаполнениеДокумента - см. параметр в НачатьЗагрузкуВДокумент
//
Процедура ЗавершитьПодключениеСканированияЧеков(РезультатУстановки, Контекст) Экспорт // Обработчик оповещения
	
	Форма = Контекст.ОповещениеЗаполнениеДокумента.Модуль;
	
	Если Не ПустаяСтрока(Форма[Контекст.ОписаниеФормы.РеквизитСледующееДействие]) Тогда
		Возврат;
	КонецЕсли;
	
	// Нажав на кнопку, пользователь проявил заинтересованность.
	// Ожидаем, что он может установить приложение
	// Переведем форму в режим ожидания сканирования чеков
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗаполнениеДокумента, Неопределено);
	// См. УчетКассовыхЧековПодотчетныхЛиц.ДействияПоЗаполнениюНаСервере
	
	ПодключитьОбновлениеЧековКЗагрузке(Форма, Контекст.ОписаниеФормы);
	
КонецПроцедуры

Процедура НачатьЗаполнениеДокумента(ЧтоЗагружать, АдресДанныеФормы, ОповещениеЗаполнениеДокумента)
	
	Форма = ОповещениеЗаполнениеДокумента.Модуль;
	
	Если Не ЭтоАдресВременногоХранилища(АдресДанныеФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = УчетКассовыхЧековПодотчетныхЛицВызовСервера.НачатьПодготовкуСодержимогоЧеков(
		ЧтоЗагружать,
		АдресДанныеФормы,
		Форма.УникальныйИдентификатор);
		
	ЗавершениеОперации = Новый ОписаниеОповещения(
		"ЗавершитьЗаполнениеДокумента",
		УчетКассовыхЧековПодотчетныхЛицКлиент,
		ОповещениеЗаполнениеДокумента);
		
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОперации, ПараметрыОжидания);
	
	// См. ЗавершитьЗаполнениеДокумента
	
КонецПроцедуры

// Инициирует непосредственное заполнение содержимым чеков (добавление строк в табличную часть).
// Содержимое чеков должно быть получено фоновым заданием с помощью
// УчетКассовыхЧековПодотчетныхЛиц.ПодготовитьСодержимоеКассовыхЧековПодотчетныхЛиц
//
// Параметры:
//  Результат                     - Структура - результат длительной операции, см. ДлительныеОперацииКлиент.ОжидатьЗавершение
//  ОповещениеЗаполнениеДокумента - ОписаниеОповещения - см. параметр в НачатьЗагрузкуВДокумент
//
Процедура ЗавершитьЗаполнениеДокумента(РезультатДлительнойОперации, ОповещениеЗаполнениеДокумента) Экспорт // Описание оповещения
	
	Если Не ЗначениеЗаполнено(РезультатДлительнойОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатДлительнойОперации.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеЗаполнениеДокумента, РезультатДлительнойОперации.АдресРезультата);
	
	// См. УчетКассовыхЧековПодотчетныхЛиц.ЗаполнитьДокумент
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьСканерШКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Форма.СканерШтрихкодаПодключен = РезультатВыполнения.Результат;
	
	Если Форма.СканерШтрихкодаПодключен И Форма.ИмяФормы <> "ОбщаяФорма.ПолучениеДанныхКассовогоЧекаПодотчетногоЛица" Тогда
		Форма.Элементы.ГруппаБаннерПодключенАппаратныйСканер.Видимость = Форма.НастройкаВидимостиБаннераПодключенАппаратныйСканер;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСканерШКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При отключении оборудования произошла ошибка: ""%1"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		Форма.СканерШтрихкодаПодключен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеДанныхКассовогоЧекаПодотчетногоЛицаЗакрытие(Результат, ДополнительныеПараметры) Экспорт
	
	ПодключитьОбновлениеЧековКЗагрузке(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ОписаниеФормы);
	
КонецПроцедуры

#КонецОбласти
