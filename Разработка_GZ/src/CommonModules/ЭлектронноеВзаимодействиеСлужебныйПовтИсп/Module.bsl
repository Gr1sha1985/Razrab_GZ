////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеСлужебныйПовтИсп: общий механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Получает значение функциональной опции.
//
// Параметры:
//  НаименованиеФО - Строка - имя функциональной опции.
//
// Возвращаемое значение:
//  Булево - признак включенной ФО.
//
Функция ЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(НаименованиеФО);
	
КонецФункции

// Возвращает имя прикладного справочника по имени библиотечного справочника.
//
// Параметры:
//  ИмяСправочника - строка - название справочника из библиотеки.
//
// Возвращаемое значение:
//  ИмяПрикладногоСправочника - строковое имя прикладного справочника.
//
Функция ИмяПрикладногоСправочника(ИмяСправочника) Экспорт
	
	СоответствиеСправочников = Новый Соответствие;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеСправочников(СоответствиеСправочников);
	
	ИмяПрикладногоСправочника = СоответствиеСправочников.Получить(ИмяСправочника);
	
	Возврат ИмяПрикладногоСправочника;
	
КонецФункции

// Получение имени объекта или реквизита в прикладном решении.
//
// Параметры:
//  ИмяПараметра - Строка - наименование в библиотеке электронных документов.
// 
// Возвращаемое значение:
//  Строка - наименование в прикладном решении.
//
Функция ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(ИмяПараметра) Экспорт
	
	СоответствиеРеквизитовОбъекта = Новый Соответствие;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеНаименованийОбъектовМДИРеквизитов(СоответствиеРеквизитовОбъекта);
	
	Возврат СоответствиеРеквизитовОбъекта.Получить(ИмяПараметра);
	
КонецФункции

// Возвращает текст сообщения пользователю по коду ошибки.
//
// Параметры:
//  КодОшибки - Строка - код ошибки;
//  СтороннееОписаниеОшибки - Строка - описание ошибки, переданное другой системой.
//
// Возвращаемое значение:
//  Строка - переопределенное описание ошибки.
//
Функция ПолучитьСообщениеОбОшибке(КодОшибки, СтороннееОписаниеОшибки = "") Экспорт
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ПолучитьСообщениеОбОшибке(КодОшибки, СтороннееОписаниеОшибки);
	
КонецФункции

// Прикладное представление реквизита по коду.
//
// Параметры:
//  Код - Строка - код реквизита.
// 
// Возвращаемое значение:
//  Строка - представления реквизита.
//
Функция ПрикладноеПредставлениеРеквизита(Код) Экспорт
	
	СоответствиеКодовРеквизитовИПредставлений = Новый Соответствие;
	
	Макет = Обработки.ЭлектронноеВзаимодействие.ПолучитьМакет(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ПрикладноеПредставлениеРеквизитов_%1",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	Для НСтр = 1 По ВысотаТаблицы Цикл
		СоответствиеКодовРеквизитовИПредставлений.Вставить(СокрЛП(Макет.Область(НСтр, 1).Текст), СокрЛП(Макет.Область(НСтр,2).Текст));
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеПереопределяемый.СоответствиеКодовРеквизитовИПредставлений(СоответствиеКодовРеквизитовИПредставлений);
	Возврат СоответствиеКодовРеквизитовИПредставлений.Получить(Код);
	
КонецФункции

// Возвращает массив актуальных видов электронных документов.
//
// Возвращаемое значение:
//  Массив - виды актуальных ЭД.
//     * ПеречислениеСсылка.ВидыЭД - виды актуальных ЭД обмена с контрагентами;
//     * ПеречислениеСсылка.ВидыЭДОбменСБанками - виды актуальных ЭД обмена с банками.
//
Функция АктуальныеВидыЭД() Экспорт
	
	МассивЭД = Новый Массив;
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	ЕстьОбменСБанками = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками");

	Если ЕстьОбменСКонтрагентами Тогда
		МодульОбменСКонтрагентамиПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиПовтИсп");
		МассивЭДОбменСКонтрагентами = МодульОбменСКонтрагентамиПовтИсп.ВсеВидыЭД();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭД, МассивЭДОбменСКонтрагентами);
	КонецЕсли;
	
	Если ЕстьОбменСБанками Тогда
		МодульОбменСБанкамиСлужебныйПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменСБанкамиСлужебныйПовтИсп");
		МассивЭДОбменСБанками = МодульОбменСБанкамиСлужебныйПовтИсп.АктуальныеВидыЭД();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭД, МассивЭДОбменСБанками);
	КонецЕсли;

	МассивВозврата = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЭД);
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает список команд ЭДО для указанной формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, Строка - форма или полное имя формы, для которой необходимо получить список команд ЭДО;
//  МодульПодсистемы - Строка - модуль, в котором размещены обработчики команд;
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление документа, для которого выполняется команда;
//  ТолькоВМенюЕще - Булево - если Истина, то команда будет размещена только в меню Еще.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание см. в СоздатьКоллекциюКомандЭДО().
//
Функция КомандыЭДОФормы(Форма, МодульПодсистемы, НаправлениеЭД, ТолькоВМенюЕще) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.КомандыЭДОФормы(Форма, МодульПодсистемы, НаправлениеЭД, ТолькоВМенюЕще);
	
КонецФункции

// Проверяет наличие используемого регламентного задания "ПроверкаНовыхЭлектронныхДокументов"
// Возвращаемое значение:
//  Булево - используется задание или нет.
//
Функция ЕстьПроверкаНовыхЭД() Экспорт
	
	Если РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных() Тогда
		УстановитьПривилегированныйРежим(Истина);
		Отбор = Новый Структура("Метаданные", "ПроверкаНовыхЭлектронныхДокументов");
		Найденные = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		РегламентноеЗадание = ?(Найденные.Количество() = 0, Неопределено, Найденные[0]);
		ЕстьПроверкаНовыхЭД = РегламентноеЗадание <> Неопределено И РегламентноеЗадание.Использование;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ЗаданиеПроверкаНовыхЭлектронныхДокументов = Метаданные.РегламентныеЗадания.Найти("ПроверкаНовыхЭлектронныхДокументов");
		ЕстьПроверкаНовыхЭД = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(ЗаданиеПроверкаНовыхЭлектронныхДокументов);
	КонецЕсли;
	
	Возврат ЕстьПроверкаНовыхЭД;
	
КонецФункции

#Область РаботаСДеревомДанных

// Формирует дерево данных для заполнения или чтения прикладным решением.
//
// Параметры:
//  ПутьКМакету - Строка - путь к макету в формате "ИмяОбработки.ИмяМакета", например,
//                         "ОбменСКонтрагентами.Акт501_Исполнитель" (см. Обработка.ОбменСКонтрагентами.Макеты).
//
// Возвращаемое значение:
//  ДеревоЗначений - Дерево документа.
//
Функция ДеревоЭлектронногоДокумента(ПутьКМакету) Экспорт
	
	ЧастиПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКМакету, ".");
	
	УстановитьПривилегированныйРежим(Истина);
	Макет = Обработки[ЧастиПути[0]].ПолучитьМакет(ЧастиПути[1]);
	УстановитьПривилегированныйРежим(Ложь);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ДеревоЭлектронногоДокумента(Макет);
	
КонецФункции

// Преобразует текстовое описание типа в объект ОписаниеТипов.
//
// Параметры:
//  Типы			 - Массив, Строка - см. ОписаниеТипов().
//  ОписаниеЧисла	 - Строка - см. ЭлектронноеВзаимодействиеСлужебныйПовтИсп.КвалификаторыЧислаПоОписанию().
//  ОписаниеСтроки	 - Строка - см. ЭлектронноеВзаимодействиеСлужебныйПовтИсп.КвалификаторыСтрокиПоОписанию().
//  ОписаниеДаты	 - Строка - см. ЭлектронноеВзаимодействиеСлужебныйПовтИсп.КвалификаторыДатыПоОписанию().
// 
// Возвращаемое значение:
//  ОписаниеТипов - сформированное описание типов.
//
Функция ОписаниеТипаПоПараметрам(Типы, ОписаниеЧисла, ОписаниеСтроки, ОписаниеДаты) Экспорт

	Результат = Новый ОписаниеТипов();
	
	Если ЗначениеЗаполнено(Типы) Тогда
	
		КвалификаторыЧисла = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.КвалификаторыЧислаПоОписанию(ОписаниеЧисла);
		КвалификаторыСтроки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.КвалификаторыСтрокиПоОписанию(ОписаниеСтроки);
		КвалификаторыДаты = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.КвалификаторыДатыПоОписанию(ОписаниеДаты);
		
		Результат = Новый ОписаниеТипов(Типы, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты);
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Формирует квалификатор числа по текстовому описанию.
//
// Параметры:
//  ОписаниеЧисла	 - Строка - содержит значения параметров конструктора "КвалификаторыЧисла", перечисленные через
//                              запятую. В качестве допустимого знака указывается имя одного из значений системного
//                              перечисления "ДопустимыйЗнак". Пример: "15, 3, Неотрицательный".
// 
// Возвращаемое значение:
//  КвалификаторыЧисла - сформированный квалификатор.
//
Функция КвалификаторыЧислаПоОписанию(ОписаниеЧисла) Экспорт

	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ОписаниеЧисла) Тогда
		ПараметрыОписания = СтрРазделить(ОписаниеЧисла, ",", Истина);
		
		ЧислоРазрядов = 0;
		ЧислоРазрядовДробнойЧасти = 0;
		ДопустимыйЗнакКвалификатора = ДопустимыйЗнак.Любой;
		
		// Получим число разрядов.
		Если ПараметрыОписания.Количество() > 0 Тогда
			ОписаниеРазрядов = СокрЛП(ПараметрыОписания[0]);
			Если ЗначениеЗаполнено(ОписаниеРазрядов) Тогда
				ЧислоРазрядов = Число(ОписаниеРазрядов);
			КонецЕсли;
		КонецЕсли;
		
		// Получим число разрядов дробной части.
		Если ПараметрыОписания.Количество() > 1 Тогда
			ОписаниеРазрядовДробнойЧасти = СокрЛП(ПараметрыОписания[1]);
			Если ЗначениеЗаполнено(ОписаниеРазрядовДробнойЧасти) Тогда
				ЧислоРазрядовДробнойЧасти = Число(ОписаниеРазрядовДробнойЧасти);
			КонецЕсли;
		КонецЕсли;
		
		// Получим описание допустимого знака.
		Если ПараметрыОписания.Количество() > 2 Тогда
			ОписаниеДопустимогоЗнака = СокрЛП(ПараметрыОписания[2]);
			Если ЗначениеЗаполнено(ОписаниеДопустимогоЗнака) Тогда
				ДопустимыйЗнакКвалификатора = ДопустимыйЗнак[ОписаниеДопустимогоЗнака];
			КонецЕсли;
		КонецЕсли;
		
		Результат = Новый КвалификаторыЧисла(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти, ДопустимыйЗнакКвалификатора);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Формирует квалификатор строки по текстовому описанию.
//
// Параметры:
//  ОписаниеСтроки	 - Строка - содержит значения параметров конструктора "КвалификаторыСтроки", перечисленные через
//                              запятую. В качестве допустимого знака указывается имя одного из значений системного
//                              перечисления "ДопустимаяДлина". Пример: "100, Переменная".
// 
// Возвращаемое значение:
//  КвалификаторыСтроки - сформированный квалификатор.
//
Функция КвалификаторыСтрокиПоОписанию(ОписаниеСтроки) Экспорт

	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ОписаниеСтроки) Тогда
		ПараметрыОписания = СтрРазделить(ОписаниеСтроки, ",", Истина);
		
		ДлинаСтроки = 0;
		ДопустимаяДлинаКвалификатора = ДопустимаяДлина.Переменная;
		
		// Получим длину строки
		Если ПараметрыОписания.Количество() > 0 Тогда
			ОписаниеДлиныСтроки = СокрЛП(ПараметрыОписания[0]);
			Если ЗначениеЗаполнено(ОписаниеДлиныСтроки) Тогда
				ДлинаСтроки = Число(ОписаниеДлиныСтроки);
			КонецЕсли;
		КонецЕсли;
		
		// Получим описание допустимого знака.
		Если ПараметрыОписания.Количество() > 1 Тогда
			ОписаниеДопустимойДлины = СокрЛП(ПараметрыОписания[1]);
			Если ЗначениеЗаполнено(ОписаниеДопустимойДлины) Тогда
				ДопустимаяДлинаКвалификатора = ДопустимаяДлина[ОписаниеДопустимойДлины];
			КонецЕсли;
		КонецЕсли;
		
		Результат = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлинаКвалификатора);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Формирует квалификатор даты по текстовому описанию.
//
// Параметры:
//  ОписаниеДаты	 - Строка - содержит значения параметров конструктора "КвалификаторыДаты", перечисленные через
//                              запятую. В качестве допустимого знака указывается имя одного из значений системного
//                              перечисления "ЧастиДаты". Пример: "ДатаВремя".
// 
// Возвращаемое значение:
//  КвалификаторыДаты - сформированный квалификатор.
//
Функция КвалификаторыДатыПоОписанию(ОписаниеДаты) Экспорт

	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ОписаниеДаты) Тогда
		ПараметрыОписания = СтрРазделить(ОписаниеДаты, ",", Истина);
		
		ЧастиДатыКвалификатора = ЧастиДаты.ДатаВремя;
		
		// Получим описание допустимого знака.
		Если ПараметрыОписания.Количество() > 0 Тогда
			ОписаниеЧастейДаты = СокрЛП(ПараметрыОписания[0]);
			Если ЗначениеЗаполнено(ОписаниеЧастейДаты) Тогда
				ЧастиДатыКвалификатора = ЧастиДаты[ОписаниеЧастейДаты];
			КонецЕсли;
		КонецЕсли;
		
		Результат = Новый КвалификаторыДаты(ЧастиДатыКвалификатора);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

// Возвращает список колонок, добавляемых в дерево данных электронного документа помимо объявленных в макете.
// 
// Возвращаемое значение:
//  ФиксированныйМассив - массив колонок.
//
Функция КолонкиДереваДокумента() Экспорт

	СписокКолонок = Новый Массив;
	
	// Колонки с уровнями не описываем, так как их число динамическое.
	
	СписокКолонок.Добавить("Обязательное");
	СписокКолонок.Добавить("ПараметрыОбработкиОбязательны");
	СписокКолонок.Добавить("ОписаниеОграничений");
	СписокКолонок.Добавить("КодПредставления");
	СписокКолонок.Добавить("Признак");
	СписокКолонок.Добавить("Типы");
	СписокКолонок.Добавить("КвалификаторыЧисла");
	СписокКолонок.Добавить("КвалификаторыСтроки");
	СписокКолонок.Добавить("КвалификаторыДаты");
	
	Возврат Новый ФиксированныйМассив(СписокКолонок);

КонецФункции 

#КонецОбласти

#КонецОбласти