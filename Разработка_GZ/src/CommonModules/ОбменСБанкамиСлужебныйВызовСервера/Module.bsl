////////////////////////////////////////////////////////////////////////////////
// ОбменСБанкамиСлужебныйВызовСервера: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область АсинхронныйОбмен

// Запускает длительную операцию по получению новых документов из банка
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  ИдентификаторСессии - ДвоичныеДанные, Строка - идентификатор установленной сессии.
//  МассивЗапросовВыписок - Массив из ДокументСсылка.СообщениеОбменСБанками - запросы для отправки в банк.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
// 
Функция ЗапускЗаданияОтправкиДокументовАсинхронныйОбмен(
	Знач НастройкаОбмена,
	Знач ИдентификаторСессии,
	Знач МассивЗапросовВыписок) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = '1С:ДиректБанк. Отправка документов в банк.'");
	
	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(ИдентификаторСессии);
	ПараметрыСинхронизации.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыСинхронизации.Вставить("МассивЗапросовВыписок", МассивЗапросовВыписок);
		
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправкаДокументовВБанкАсинхронныйОбмен", ПараметрыСинхронизации, ПараметрыВыполнения);
	
КонецФункции

// Анализирует ответ банка на отправку пакета.
// Если банк вернул ошибку, то вызывается исключение с текстом ошибки.
//
// Параметры:
//    ОтветБанка - ДвоичныеДанные - содержимое ответа банка;
//    ПакетОбменСБанками - ДокументСсылка.ПакетОбменСБанками - отправленный пакет обмена.
//    ВремФайл - Строка - путь к временному файлу. Не удаляется при возникновении ошибок чтения.
//
Процедура ОбработатьОтветБанкаНаОтправкуДокументаAsync(Знач ОтветБанка, Знач ПакетОбменСБанками, ВремФайл = Неопределено) Экспорт
	
	Чтение = Новый ЧтениеXML;
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ОтветБанка.Записать(ВремФайл);
	Чтение.ОткрытьФайл(ВремФайл);
	ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
		ВерсияФормата = ОбменСБанкамиКлиентСервер.УстаревшаяВерсияФорматаАсинхронногоОбмена();
	Иначе
		ВерсияФормата = ResultBank.formatVersion;
	КонецЕсли;
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);

	Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);

	Чтение.ОткрытьФайл(ВремФайл);
	
	ПакетТип = ОбменСБанкамиСлужебный.ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
	ResultBank = Фабрика.ПрочитатьXML(Чтение, ПакетТип);
	Если НЕ ResultBank.Success = Неопределено Тогда
		Если НЕ ResultBank.Success.SendPacketResponse = Неопределено Тогда
			ПакетОбъект = ПакетОбменСБанками.ПолучитьОбъект();
			ПакетОбъект.ВнешнийИдентификатор = ResultBank.Success.SendPacketResponse.ID;
			ПакетОбъект.Записать();
		КонецЕсли
	ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
		Чтение.Закрыть();
		ТекстОшибки = ОбменСБанкамиСлужебный.ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Чтение.Закрыть();
	ФайловаяСистема.УдалитьВременныйФайл(ВремФайл);
	
КонецПроцедуры

// Возвращает параметры автоматического получения выписки.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
// 
// Возвращаемое значение:
//  Структура - параметры автоматического получения настроек с банком. Содержит поля:
//   * АвтоматическоеПолучениеВыписки - Булево - если Истина, то включено получение выписки по регламентному заданию.
//   * ДатаПолученияВыписки - Дата - последняя дата получения выписки.
//   * ТекстОшибки - Строка - текст ошибки, которая возникла при последнем получении выписки.
//
Функция ПараметрыАвтоматическогоПолученияВыписки(Знач НастройкаОбмена) Экспорт
	
	Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	Выборка = РегистрыСведений.ПараметрыОбменСБанками.Выбрать(Отбор);
	СтруктураВозврата = Новый Структура("АвтоматическоеПолучениеВыписки, ДатаПолученияВыписки, ТекстОшибки");
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	ОтносительнаяДатаПолученияВыписки = ОбменДаннымиСервер.ОтносительнаяДатаСинхронизации(
		СтруктураВозврата.ДатаПолученияВыписки);
	СтруктураВозврата.Вставить("ОтносительнаяДатаПолученияВыписки", ОтносительнаяДатаПолученияВыписки);
	Возврат СтруктураВозврата;
	
КонецФункции

// Останавливает автоматическое получение выписки.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//
Процедура ОстановитьАвтоматическоеПолучениеВыписки(Знач НастройкаОбмена) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
	МенеджерЗаписи.АвтоматическоеПолучениеВыписки = Ложь;
	МенеджерЗаписи.Записать();
	
	ОбменСБанкамиСлужебный.ОтключитьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ПолучениеВыпискиОбменСБанками);
	
	УстановитьПривилегированныйРежим(Истина);
	ОбменСБанкамиСлужебный.УдалитьПарольИзБезопасногоХранилища(НастройкаОбмена);
	
КонецПроцедуры

#КонецОбласти

#Область Транспорт

// Запускает длительную операцию по отправке документов в банк.
//
// Параметры:
//  МассивСообщенийОбмена - массив - отправляемые сообщения обмена. В элементах ДокументСсылка.СообщениеОбменСБанками.
//  ИдентификаторыСессий - Соответствие - идентификаторы установленных сессий:
//        * Ключ - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена
//        * Значение - Структура - параметры соединения, содержит поля:
//             ** ИдентификаторСессии - Строка - идентификатор установленной сессии.
//  Фрод - Массив из Строка - MAC адреса сетевого оборудования клиента.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
// 
Функция ЗапускЗаданияПоОтправкеДокументовВБанк(Знач МассивСообщенийОбмена, Знач ИдентификаторыСессий, Знач Фрод) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка документов в банк.'");
	
	Параметры = Новый Структура;
	Параметры.Вставить("СообщенияОбмена", МассивСообщенийОбмена);
	Если ИдентификаторыСессий = Неопределено Тогда
		ИдентификаторыСессий = Новый Соответствие;
	КонецЕсли;
	Параметры.Вставить("ИдентификаторыСессий", ИдентификаторыСессий);
	Параметры.Вставить("Фрод", Фрод);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.СформироватьИОтправитьПакетыВБанк", Параметры, ПараметрыВыполнения);
	
КонецФункции

// Отправляет подготовленные документы в банк
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//  ИдентификаторСессии - Строка - идентификатор сессии
//  МассивЗапросовВыписки - Массив из ДокументСсылка.СообщениеОбменСБанками - запросы выписок
//  ДанныеВозврата - Структура - результат выполнения, содержит поля:
//    * КоличествоОтправленныхПакетов - Число - количество отправленных пакетов
//    * ТекстОшибки - Строка - текст ошибки, если она была
//
Процедура ОтправитьЭДВБанк(
	Знач НастройкаОбмена,
	Знач ИдентификаторСессии,
	Знач МассивЗапросовВыписки,
	ДанныеВозврата) Экспорт
	
	Если МассивЗапросовВыписки <> Неопределено И МассивЗапросовВыписки.Количество() Тогда
		НовыйПакет = Неопределено;
		ОбменСБанкамиСлужебный.СоздатьПакетОбменСБанками(НастройкаОбмена, МассивЗапросовВыписки, НовыйПакет);
		ОбменСБанкамиСлужебный.СоздатьЭДПакетаAsync(НовыйПакет);
	КонецЕсли;
	
	ТекстОшибки = "";
	
	Пакеты = ПодготовленныеКОтправкеПакеты(НастройкаОбмена);
	
	КоличествоОтправленныхПакетов = 0;
	Если Пакеты.Количество() Тогда
		Результат = ОбменСБанкамиСлужебный.ОтправкаПакетовВБанк(Пакеты, ИдентификаторСессии, ТекстОшибки);
		КоличествоОтправленныхПакетов = Результат.КоличествоОтправлено;
	Иначе
		ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка");
		Если ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн Тогда
			ОбменСБанкамиСлужебный.СохранитьДатуСинхронизации(НастройкаОбмена);
		КонецЕсли;
	КонецЕсли;

	ДанныеВозврата.Вставить("КоличествоОтправленныхПакетов", КоличествоОтправленныхПакетов);
	ДанныеВозврата.Вставить("ТекстОшибки", ТекстОшибки);
	
КонецПроцедуры

// Запускает длительную операцию по получению новых документов из банка
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  ИдентификаторСессии - ДвоичныеДанные - идентификатор установленной сессии.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
// 
Функция ЗапускЗаданияПоПолучениюНовыхДокументовИзБанка(Знач НастройкаОбмена, Знач ИдентификаторСессии) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение новых документов из банка.'");
	
	ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(ИдентификаторСессии);
	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыСинхронизации.Вставить("АдресРезультата");
		
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьНовыеДокументыИзБанка", ПараметрыСинхронизации, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область ОперацииСоСтроками

// Возвращает строку Base64, содержащей данные строки в виде двоичных данных файла без BOM.
//
// Параметры:
//  СтрокаДанных - Строка - строка для преобразования в BASE64.
//  КодировкаТекста - Строка - используемая кодировка текста.
//  БезПереводаСтрок - Булево - убрать переводы строк в результирующей строке
//
// Возвращаемое значение:
//  Строка - строка в BASE64.
//
Функция СтрокаBase64БезBOM(СтрокаДанных, КодировкаТекста = "UTF-8", БезПереводаСтрок = Ложь) Экспорт

	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти, КодировкаТекста, , Символы.ПС);
	Текст.Записать(СтрокаДанных);
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	
	Если БезПереводаСтрок Тогда
		СтрокаФорматBase64 = СтрЗаменить(СтрЗаменить(СтрокаФорматBase64, Символы.ПС, ""), Символы.ВК, "");
	КонецЕсли;
	
	Возврат СтрокаФорматBase64;

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхИзИнформационнойБазы

// Получает параметры обмена по ссылке на счет организации
// 
// Параметры:
// 	БанковскийСчет - ОпределяемыйТип.СчетОрганизацииОбменСБанками - ссылка на банковский счет организации
// Возвращаемое значение:
// 	Неопределено, Структура - При ошибке возвращается Неопределено. В остальных случая структура с полями:
// * РеквизитыСчета - Структура - реквизиты банковского счета организации:
//  ** Организация - ОпределяемыйТип.Организация - ссылка на организацию
//  ** Банк - ОпределяемыйТип.БанкОбменСБанками - ссылка на банк
//  ** НомерСчета - Строка - номер счета
// * РеквизитыНастройкиОбмена - Структура - содержит поля:
//  ** ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - программа банка
//  ** ИмяВнешнегоМодуля - Строка - идентификатор внешней компоненты
//  ** ИспользуетсяКриптография - Булево - признак использования криптографии
//  ** АутентификацияПоСертификату - Булево - признак использования аутентификации по сертификату
//  ** ДополнительнаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки - внешняя обработка.
// * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - действующая настройка обмена с банком.
Функция ПараметрыОбменаПоНомеруСчета(Знач БанковскийСчет) Экспорт
	
	Если Не ОбменСБанками.ПравоВыполненияОбмена(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	РеквизитыСчета = РеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	НастройкаОбмена = ОбменСБанкамиСлужебный.НастройкаОбмена(РеквизитыСчета.Организация, РеквизитыСчета.Банк);

	Если НастройкаОбмена = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'Нет действующей настройки обмена через сервис 1С:Директ банк.
									|Организация: %1
									|Банк %2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, РеквизитыСчета.Организация, РеквизитыСчета.Банк);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("НастройкаОбмена", НастройкаОбмена);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена, "ПрограммаБанка,
		|ИмяВнешнегоМодуля, ИспользуетсяКриптография, АутентификацияПоСертификату, ДополнительнаяОбработка");
		
	СтруктураВозврата.Вставить("РеквизитыНастройкиОбмена", РеквизитыНастройкиОбмена);
	СтруктураВозврата.Вставить("РеквизитыСчета", РеквизитыСчета);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет название объекта в метаданных
//
// Параметры:
//  Тип - Тип - тип, название которого нужно получить
// 
// Возвращаемое значение:
//  Строка - название типа в метаданных.
//
Функция НазваниеОбъектаВМетаданных(Знач Тип) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	Возврат ОбъектМетаданных.Имя;
	
КонецФункции

// Возвращает данные первого сертификата банка в формате Base64
// 
// Параметры:
// 	НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
// Возвращаемое значение:
// 	Строка - данные сертификата банка в формате Base64.
Функция ПервыйСертификатБанкаВBase64(Знач НастройкаОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменСБанкамиСертификатыБанка.Данные
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыБанка КАК НастройкиОбменСБанкамиСертификатыБанка
	|ГДЕ
	|	НастройкиОбменСБанкамиСертификатыБанка.Ссылка = &НастройкаОбмена";
	Запрос.УстановитьПараметр("НастройкаОбмена" , НастройкаОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Base64Строка(Выборка.Данные.Получить());
	КонецЕсли;
	
КонецФункции

// Определяет название счета в метаданных
// 
// Возвращаемое значение:
//  Строка - название справочника банковских счетов организации.
//
Функция НазваниеСчетаВМетаданных() Экспорт
	
	Возврат ОбменСБанкамиСлужебныйПовтИсп.НазваниеСчетаВМетаданных();
	
КонецФункции

// Получает реквизиты банковского счета организации.
//
// Параметры:
//  Ссылка - ОпределяемыйТип.СчетОрганизацииОбменСБанками - ссылка на банковскийСчетОрганизации
// 
// Возвращаемое значение:
//  Структура - реквизиты счета. Содержит поля:
//   * Организация - ОпределяемыйТип.Организация - ссылка на организацию.
//   * Банк - ОпределяемыйТип.БанкОбменСБанками - ссылка на банк.
//   * НомерСчета - Строка - номер счета.
//
Функция РеквизитыБанковскогоСчетаОрганизации(Знач Ссылка) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура("Организация, Банк, НомерСчета");
	
	НазваниеРеквизитаОрганизация = ОбменСБанкамиСлужебный.ИмяПрикладногоРеквизита(
		"БанковскийСчетОрганизации.Организация");
	НазваниеРеквизитаБанк = ОбменСБанкамиСлужебный.ИмяПрикладногоРеквизита("БанковскийСчетОрганизации.Банк");
	НазваниеРеквизитаНомерСчета = ОбменСБанкамиСлужебный.ИмяПрикладногоРеквизита("БанковскийСчетОрганизации.НомерСчета");
	
	ЗначенияРеквизитовОснование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Ссылка, НазваниеРеквизитаОрганизация + "," + НазваниеРеквизитаБанк + "," + НазваниеРеквизитаНомерСчета);
		
	ЗначенияРеквизитовОснование.Свойство(НазваниеРеквизитаОрганизация, ВозвращаемоеЗначение.Организация);
	ЗначенияРеквизитовОснование.Свойство(НазваниеРеквизитаБанк, ВозвращаемоеЗначение.Банк);
	ЗначенияРеквизитовОснование.Свойство(НазваниеРеквизитаНомерСчета, ВозвращаемоеЗначение.НомерСчета);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает значения реквизитов сертификата.
//
// Параметры:
//    Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат;
//    ЗапрашиваемыеРеквизиты - Структура - в ключах названия реквизитов, которые нужно получить. Возможные поля:
//      * Отпечаток - Строка - отпечаток сертификата;
//      * ДанныеСертификата - Произвольный - данные сертификата в формате хранения.
//
Процедура ПолучитьЗначенияРеквизитовСертификата(Знач Сертификат, ЗапрашиваемыеРеквизиты) Экспорт
	
	РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сертификат, "Отпечаток, ДанныеСертификата");
	ДвоичныеДанныеСертификата = РеквизитыСертификата.ДанныеСертификата.Получить();
	
	Если ЗапрашиваемыеРеквизиты.Свойство("ДанныеСертификата") Тогда
		РеквизитыСертификата.ДанныеСертификата = ДвоичныеДанныеСертификата;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗапрашиваемыеРеквизиты, РеквизитыСертификата);
	
КонецПроцедуры

// Получает двоичные данные прикрепленного с объекту присоединенного файла.
//
// Параметры:
//    СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы.
//
// Возвращаемое значение:
//    ДвоичныеДанные - двоичные данные присоединенного файла.
//
Функция ДвоичныеДанныеПрисоединенногоФайла(Знач СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СсылкаНаОбъект, МассивФайлов);
	Если НЕ МассивФайлов.Количество() Тогда
		ТекстОшибки = НСтр("ru = 'Не обнаружен присоединенный файл объекта: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, СсылкаНаОбъект);
		Операция = НСтр("ru = 'Получение двоичных данных присоединенного файла'");
		ОбработатьОшибку(Операция, ТекстОшибки, ТекстОшибки, СсылкаНаОбъект);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РаботаСФайлами.ДвоичныеДанныеФайла(МассивФайлов[0]);
		
КонецФункции

// Получает значения реквизитов сертификата.
//
// Параметры:
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмен;
//    ЗапрашиваемыеРеквизиты - Структура - в ключах названия реквизитов, которые нужно получить. Возможные поля:
//      * ИмяВнешнегоМодуля - Строка - имя внешней компоненты или дополнительной обработки;
//      * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - программа банка;
//      * АутентификацияПоСертификату - Булево - признак аутентификации по сертификату;
//      * ИспользуетсяКриптография - Булево - признак использования криптографии;
//      * ВерсияФормата - Булево - признак использования криптографии;
//      * АдресСервера - Строка - адрес сервера банка;
//      * ИдентификаторОрганизации - Строка - идентификатор организации;
//      * ИспользоватьЖурналирование - Булево - признак журналирования обмена;
//      * КаталогДляЖурналирования - Строка - каталог для записи файлов журнала;
//      * ИдентификаторКлиента - УникальныйИдентификатор - идентификатор клиента, включившего журналирование.
//      * Недействительна - Булево - признак отключенной настройки обмена;
//      * ПометкаУдаления - Булево - признак пометки на удаление настройки обмена.
//      * ДополнительнаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки - дополнительная обработка.
//      * ОтправлятьДокументыБезПодписиSMS - Булево - отправлять документы в банк, но не подписывать.
//      * ПравоВыполненияОбмена - Булево - проверяет наличие прав текущего пользователя на выполнение обмена.
//      * ПодписываетсяЗапросВыписки - Булево - для запроса выписки требуется установка подписи
//      * Организация - ОпределяемыйТип.Организация - ссылка на организацию в настройке обмена
//      * Банк - ОпределяемыйТип.БанкОбменСБанками - ссылка на банка в настройке обмена.
//
Процедура ПолучитьЗначенияРеквизитовНастройкиОбмена(Знач НастройкаОбмена, ЗапрашиваемыеРеквизиты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена,
		"ИмяВнешнегоМодуля, ПрограммаБанка, АутентификацияПоСертификату, ИспользуетсяКриптография,
		|ВерсияФормата, АдресСервера, ИдентификаторОрганизации, Недействительна, ПометкаУдаления,
		|ДополнительнаяОбработка, ОтправлятьДокументыБезПодписиSMS, Организация, Банк");
	ЗаполнитьЗначенияСвойств(ЗапрашиваемыеРеквизиты, РеквизитыНастройкиОбмена);
	
	Если ЗапрашиваемыеРеквизиты.Свойство("ИспользоватьЖурналирование") Тогда
		ПараметрыЖурналирования = ПараметрыЖурналирования(НастройкаОбмена);
		ЗаполнитьЗначенияСвойств(ЗапрашиваемыеРеквизиты, ПараметрыЖурналирования);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗапрашиваемыеРеквизиты.Свойство("ПравоВыполненияОбмена") Тогда
		ЗапрашиваемыеРеквизиты.ПравоВыполненияОбмена = ПравоВыполненияОбмена();
	КонецЕсли;

	Если ЗапрашиваемыеРеквизиты.Свойство("ПодписываетсяЗапросВыписки") Тогда
		ЗапрашиваемыеРеквизиты.ПодписываетсяЗапросВыписки = ПодписываетсяЗапросВыписки(НастройкаОбмена);
	КонецЕсли;
	
КонецПроцедуры

// Получает реквизиты электронного документа по владельцу
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - объект информационной базы.
// 
// Возвращаемое значение:
//  Структура - реквизиты электронного документа
//    * СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банком
//                      - Неопределено - электронный документ не сформирован
//    * Состояние - ПеречислениеСсылка.СостоянияОбменСБанками - текущее состояние ЭДО
//    * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - технология обмена.
//    * ЕстьПравоПравоОбработкиЭД - Булево - если Истина, то у текущего пользователя есть право обработки электронных документов.
//  Неопределено - прямой обмен с банком не используется.
//
Функция РеквизитыЭлектронногоДокумента(Знач ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияОбменСБанками.СообщениеОбмена.Ссылка КАК СообщениеОбмена,
	|	СостоянияОбменСБанками.Состояние КАК Состояние,
	|	СостоянияОбменСБанками.СообщениеОбмена.НастройкаОбмена.ПрограммаБанка КАК ПрограммаБанка,
	|	СостоянияОбменСБанками.СообщениеОбмена.НастройкаОбмена КАК НастройкаОбмена
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|ГДЕ
	|	СостоянияОбменСБанками.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", ДокументСсылка);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Следующий() Тогда
		СтруктураВозврата = Новый Структура("Состояние, СообщениеОбмена, ПрограммаБанка, НастройкаОбмена");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Результат);
		СтруктураВозврата.Вставить("ЕстьПравоПравоОбработкиЭД", ОбменСБанкамиСлужебный.ПравоОбработкиЭД());
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает идентификатор электронного документа
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - электронный документ.
// 
// Возвращаемое значение:
//  Строка - идентификатор документа.
//
Функция ИдентификаторЭлектронногоДокумента(Знач СообщениеОбмена) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Идентификатор");
	
КонецФункции

// Получает значения реквизитов сообщения обмена.
//
// Параметры:
//    СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена
//    ЗапрашиваемыеРеквизиты - Структура - в ключах названия реквизитов, которые нужно получить. Возможные поля:
//      * СообщениеОбмена - Строка - представление электронного документа;
//      * Идентификатор - Строка - внутренний идентификатор электронного документа.
//      * ВнешнийИдентификатор - Строка - идентификатор электронного документа в базе банка.
//
Процедура ПолучитьЗначенияРеквизитовСообщенияОбмена(Знач СообщениеОбмена, ЗапрашиваемыеРеквизиты) Экспорт
	
	РеквизитыСообщенияОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СообщениеОбмена, "Идентификатор, ВнешнийИдентификатор");
	ЗаполнитьЗначенияСвойств(ЗапрашиваемыеРеквизиты, РеквизитыСообщенияОбмена);
	
КонецПроцедуры

// Подбирает действующую настройку обмена, в которой есть указанный сертификат.
// 
// Параметры:
//    Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат подписи.
//    ИмяВнешнегоМодуля - Строка, Неопределено - (возвращаемое значение) название используемого внешнего модуля.
//
// Возвращаемое значение:
//   СправочникСсылка.НастройкиОбменСБанками, Неопределено - найденная настройка обмена.
//
Функция НастройкаОбменаПоСертификату(Сертификат, ИмяВнешнегоМодуля = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка КАК Ссылка,
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка.ИмяВнешнегоМодуля КАК ИмяВнешнегоМодуля
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыПодписейОрганизации
	|ГДЕ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП = &СертификатЭП
	|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
	|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка.Недействительна";
	
	Запрос.УстановитьПараметр("СертификатЭП", Сертификат);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИмяВнешнегоМодуля = Выборка.ИмяВнешнегоМодуля;
		Возврат Выборка.Ссылка;
	КонецЕсли;

КонецФункции

// Определяет документ, который имеет отражение в учете по указанному сообщению обмену.
//
// Параметры:
//    СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена.
//
// Возвращаемое значение:
//    ДокументСсылка - ссылка на объект информационной базы.
//
Функция ДокументУчета(Знач СообщениеОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияОбменСБанками.СсылкаНаОбъект
	               |ИЗ
	               |	РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	               |ГДЕ
	               |	СостоянияОбменСБанками.СообщениеОбмена = &СообщениеОбмена";
	Запрос.УстановитьПараметр("СообщениеОбмена", СообщениеОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СсылкаНаОбъект;
	КонецЕсли;
	
КонецФункции

// Определяет было ли получено извещение по отправленному запросу.
//
// Параметры:
//  СообщениеЗапрос - ДокументСсылка.СообщениеОбменСБанками - отправленный в банк запрос;
//  ЕстьОшибка - Булево - признак, что банк не принял запрос и вернул ошибку.
//
// Возвращаемое значение:
//  Булево - если извещение было получено, тогда Истина.
//
Функция ПолученоИзвещениеПоЗапросу(СообщениеЗапрос, ЕстьОшибка) Экспорт
	
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЗапрос, "ВидЭД");
	
	Извещение = Неопределено;
	Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД Тогда 
		СтатусЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЗапрос, "Статус");
		Если СтатусЭД = Перечисления.СтатусыОбменСБанками.ПолученоИзвещение Тогда 
			Возврат Истина;
		КонецЕсли;
	Иначе
		Извещение = ОбменСБанкамиСлужебный.ПодчиненноеСообщениеОбмена(СообщениеЗапрос, , Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Извещение) Тогда 
		
		РеквизитыСообщенияОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СообщениеЗапрос, "ВидЭД, ПричинаОтклонения, Статус");
		Если РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд
				И РеквизитыСообщенияОбмена.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком Тогда
			ЕстьОшибка = Истина;
			ТекстСообщения = НСтр("ru = 'Запрос отклонен.
										|Причина отклонения: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РеквизитыСообщенияОбмена.ПричинаОтклонения);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	Иначе // проверка синхронного отклонения запроса
		РеквизитыЗапроса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеЗапрос, "ПричинаОтклонения, Статус");
		
		Если РеквизитыЗапроса.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком Тогда
			ЕстьОшибка = Истина;
			ТекстСообщения = НСтр("ru = 'Запрос отклонен.
										|Причина отклонения: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РеквизитыЗапроса.ПричинаОтклонения);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(Извещение);

КонецФункции

// Получает присоединенные файлы сообщений обмена
//
// Параметры:
//  МассивСообщенийОбмена - Массив - в элементах содержит ДокументСсылка.СообщениеОбменСБанками
// 
// Возвращаемое значение:
//  Соответствие - присоединенные файлы для каждого сообщения обмена.
//    * Ключ - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена
//    * Значение - СправочникСсылка.СообщениеОбменСБанкамиПрисоединенныеФайлы - присоединенный файл.
//
Функция ПрисоединенныеФайлы(Знач МассивСообщенийОбмена) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	Для каждого ЭлементКоллекции Из МассивСообщенийОбмена Цикл
		СоответствиеВозврата.Вставить(ЭлементКоллекции, ОбменСБанкамиСлужебный.ПрисоединенныйФайл(ЭлементКоллекции));
	КонецЦикла;
	Возврат СоответствиеВозврата;
	
КонецФункции

// Возвращает параметры открытия электронного документа для формы просмотра
// 
// Параметры:
// 	СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - открываемое сообщение обмена
// Возвращаемое значение:
// 	Структура - Описание:
// 		* Владелец - ОпределяемыйТип.ВладелецОбменСБанками - владелец электронного документа 
// 		* ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа
// 		* ИспользуетсяКриптография - Булево - при обмене используется криптография.
//
Функция ПараметрыОткрытияЭлектронногоДокумента(Знач СообщениеОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияОбменСБанками.СсылкаНаОбъект КАК Владелец,
	|	СообщениеОбменСБанками.ВидЭД,
	|	СообщениеОбменСБанками.НастройкаОбмена.ИспользуетсяКриптография КАК ИспользуетсяКриптография
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|		ПО СостоянияОбменСБанками.СообщениеОбмена = СообщениеОбменСБанками.Ссылка
	|ГДЕ
	|	СообщениеОбменСБанками.Ссылка = &СообщениеОбмена";
	
	Запрос.УстановитьПараметр("СообщениеОбмена", СообщениеОбмена);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		СтруктураВозврата = Новый Структура("Владелец, ВидЭД, ИспользуетсяКриптография");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Результат);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОперацииСВК

// Возвращает данные для отправки в банк через ВК.
//
// Параметры:
//  ИсходныеДанные - Соответствие - данные, в которыми производилась работа
//    * Ключ - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//    * Значение - Массив - документы для обработки
//        ** ДокументСсылка.СообщенияОбменСБанками - ссылка на электронный документ.
// 
// Возвращаемое значение:
//  Соответствие - данные, которые готовы к отправке в банк
//    * Ключ - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//    * Значение - Массив - документы для отправки
//        ** ДокументСсылка.СообщенияОбменСБанками - ссылка на электронный документ.
//
Функция ДанныеДляОтправкиЧерезВК(ИсходныеДанные) Экспорт
	
	ДанныеВозврата = Новый Соответствие;
	
	Для Каждого КлючЗначение Из ИсходныеДанные Цикл
		МассивСообщенийОбмена = Новый Массив;
		Для Каждого СообщениеОбмена Из КлючЗначение.Значение.МассивСообщенийОбмена Цикл
			Если ЭлектронныйДокументПолностьюПодписан(СообщениеОбмена) Тогда
				МассивСообщенийОбмена.Добавить(СообщениеОбмена);
			КонецЕсли;
		КонецЦикла;
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
		СтруктураДанных.Вставить(
			"МассивСообщенийТребующихПодтверждение", КлючЗначение.Значение.МассивСообщенийТребующихПодтверждение);
		ДанныеВозврата.Вставить(КлючЗначение.Ключ, СтруктураДанных);
	КонецЦикла;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Сохраняет полученный пакет в информационной базе.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//  ПакетBase64 - Строка - файл, полученный их банка в формате Base64;
//  СоздаватьОперацииВыписки - Булево - если Истина, то необходимо запустить разбор банковской выписки.
//  ДанныеВозврата - Структура - возвращаемые параметры:
//     * ЕстьОшибка - Булево - Если значение Истина, то при распаковке пакета возникла ошибка;
//     * ДанныеЭП - Соответствие - данные электронных подписей для обработки на клиенте:
//         ** Ключ - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена;
//         ** Значение - Массив из ДвоичныеДанные - подписи электронного документа.
//
Процедура СохранитьПолученныйПакетЧерезВК(Знач НастройкаОбмена, Знач ПакетBase64, Знач СоздаватьОперацииВыписки, ДанныеВозврата) Экспорт
	
	ДвоичныеДанныеПакета = Base64Значение(ПакетBase64);
	Путь = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПакета);

	Попытка
		ТребуетсяПовторнаяАутентификация = Ложь;
		ОбменСБанкамиСлужебный.СохранитьПолученныйПакет(
			НастройкаОбмена, Путь, СоздаватьОперацииВыписки, ДанныеВозврата, ТребуетсяПовторнаяАутентификация);
		Если ТребуетсяПовторнаяАутентификация Тогда
			ДанныеВозврата.ЕстьОшибка = Истина;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), НастройкаОбмена);
		ДанныеВозврата.ЕстьОшибка = Истина;
	КонецПопытки;
	
КонецПроцедуры

// Получает параметры для установки соединения через ВК.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена.
// 
// Возвращаемое значение:
//  Структура - параметры создания соединения:
//   * ИдентификаторОрганизации - Строка - уникальный идентификатор организации на сервере банка;
//   * БИК - Строка - БИК банка;
//   * КлючУникальности - Строка - ключ уникальности клиента для сбора статистики;
//
Функция ПараметрыСоединенияВК(НастройкаОбмена) Экспорт
	
	ПараметрыСоединения = Новый Структура();
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "ИдентификаторОрганизации, Банк, Организация");
	ПараметрыСоединения.Вставить("ИдентификаторОрганизации", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	БИК = ОбменСБанкамиСлужебный.БИК(РеквизитыНастройкиОбмена.Банк);
	ПараметрыСоединения.Вставить("БИК", БИК);
	РеквизитыОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация, РеквизитыОрганизации);
	ПараметрыСоединения.Вставить("КлючУникальности", РеквизитыОрганизации.ИНН + "_" + БИК);
	
	Возврат ПараметрыСоединения;
	
КонецФункции

// Получает информацию о программе для инициализации внешней компоненты.
// 
// Возвращаемое значение:
//  Структура - информация о программе, содержит поля:
//   * ВерсияФормата - Строка - версия текущей схемы обмена;
//   * СинонимКонфигурации - Строка - синоним имени (Имя) конфигурации;
//   * ВерсияКонфигурации - Строка - Версия конфигурации;
//   * ВерсияПриложения - Строка - Содержит версию используемого 1С:Предприятия 8;
//   * ИдентификаторКлиента - Строка -  уникальный идентификатор клиента;
//   * ИнформацияПрограммыПросмотра - Строка - Информация о веб-браузере (userAgent);
//   * Язык - Строка - Код локализации (язык, страна), установленный для данной информационной базы.
//
Функция ИнформацияОПрограммеДляВК() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Информация = Новый Структура;
	Информация.Вставить("ИмяКонфигурации", Метаданные.Имя);
	Информация.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Информация.Вставить("ВерсияПриложения", СистемнаяИнформация.ВерсияПриложения);
	Информация.Вставить("ИдентификаторКлиента", СистемнаяИнформация.ИдентификаторКлиента);
	Информация.Вставить("ИнформацияПрограммыПросмотра", СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	Информация.Вставить("Язык", КодЛокализацииИнформационнойБазы());
	
	Возврат СериализованныеДанные(Информация);
	
КонецФункции

// Создает пакет для передачи через внешнюю компоненту
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена;
//  СообщенияОбмена - Соответствие - данные сообщений обмена и сертификатов подписи:
//     * Ключ - ДокументСсылка.СообщениеОбменСБанками - сообщение, помещаемое в пакет;
//     * Значение - Соответствие - свойства сертификатов не x509:
//          ** Ключ - Строка - отпечаток сертификата;
//          ** Значение - Структура - свойства сертификата:
//               *** СерийныйНомер - Строка - серийный номер сертификата;
//               *** ИмяИздателя - Строка - имя издателя.
//
// Возвращаемое значение:
//   Массив - в элементах содержит ДокументСсылка.ПакетОбменСБанками - ссылка на созданный пакет ЭД.
//
Функция СоздатьПакетыВК(НастройкаОбмена, СообщенияОбмена) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Для каждого ЭлементКоллекции Из СообщенияОбмена Цикл
		
		МассивСообщенийОбмена = Новый Массив;
		МассивСообщенийОбмена.Добавить(ЭлементКоллекции.Ключ);
		
		ПакетОбменСБанками = Неопределено;
		ОбменСБанкамиСлужебный.СоздатьПакетОбменСБанками(НастройкаОбмена, МассивСообщенийОбмена, ПакетОбменСБанками);
		ОбменСБанкамиСлужебный.СоздатьЭДПакетаAsync(ПакетОбменСБанками, ЭлементКоллекции.Значение);
		
		УстановитьСтатусыСообщенийОбмена(МассивСообщенийОбмена, Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
		
		МассивВозврата.Добавить(ПакетОбменСБанками);
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#Область ОперацииСЭлектроннымДокументом

// Определяет можно ли отклонить этот ЭД.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банком.
//
// Возвращаемое значение:
//  Булево - Если можно отклонять, тогда Истина.
//
Функция МожноОтклонитьЭтотЭД(СообщениеОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "Статус, ВидЭД");
		
	Если ОбменСБанкамиСлужебный.ЭтоПлатежныйДокумент(РеквизитыСообщения.ВидЭД)
		И (РеквизитыСообщения.Статус = Перечисления.СтатусыОбменСБанками.Сформирован
			ИЛИ РеквизитыСообщения.Статус = Перечисления.СтатусыОбменСБанками.Подписан
			ИЛИ РеквизитыСообщения.Статус = Перечисления.СтатусыОбменСБанками.ЧастичноПодписан) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - СправочникСсылка.НастройкиОбменСБанками, ДокументСсылка.СообщениеОбменСБанками - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить;
//  Гиперссылка - Булево - Истина - необходимо реквизит формы "СостояниеЭД" сделать гиперссылкой.
//
// Возвращаемое значение:
//  Строка - текстовое представление версии электронного документа.
//
Функция ТекстСостоянияЭД(Знач СсылкаНаВладельца, Гиперссылка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТекстСостоянияЭД = "";
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		Если ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции("ИспользоватьОбменСБанками") Тогда
			
			Если ТипЗнч(СсылкаНаВладельца) = Тип("СправочникСсылка.НастройкиОбменСБанками") Тогда
				Гиперссылка = Истина;
				Возврат ТекстСостоянияЭД;
			Иначе
				ТекущееСостояниеЭД = ОбменСБанкамиСлужебный.СостояниеЭД(СсылкаНаВладельца);
				Если ТекущееСостояниеЭД = Перечисления.СостоянияОбменСБанками.НаПодписи Тогда
					ТекстСостоянияЭД = НСтр("ru = 'На подписи'");
				ИначеЕсли ТекущееСостояниеЭД = Перечисления.СостоянияОбменСБанками.НеСформирован Тогда
					ТекстСостоянияЭД = НСтр("ru = 'Не сформирован'");
				ИначеЕсли ТекущееСостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка Тогда
					ТекстСостоянияЭД = НСтр("ru = 'Требуется отправка'");
				ИначеЕсли ТекущееСостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение Тогда
					ТекстСостоянияЭД = НСтр("ru = 'Требуется подтверждение по SMS'");
				Иначе
					ТекстСостоянияЭД = Строка(ТекущееСостояниеЭД);
				КонецЕсли;
			КонецЕсли;
			
			ДействующиеПараметрыОбмена = ОбменСБанкамиСлужебный.ДействующиеПараметрыОбмена(СсылкаНаВладельца);
				
			Если ДействующиеПараметрыОбмена.НастройкаОбменаДействует
				И ДействующиеПараметрыОбмена.ВидЭДПоддерживаетсяБанком Тогда
				
				Гиперссылка = Истина;
				Если Не ЗначениеЗаполнено(ТекстСостоянияЭД) Тогда
					Гиперссылка = Ложь;
					ТекстСостоянияЭД = НСтр("ru = 'Электронный документ не создан'");
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(ТекстСостоянияЭД) Тогда
					ШаблонСостоянияЭД = НСтр("ru = '%1 (настройка обмена недействительна)'");
					ТекстСостоянияЭД = СтрШаблон(ШаблонСостоянияЭД, ТекстСостоянияЭД);
					Гиперссылка = Истина;
				Иначе
					Если ДействующиеПараметрыОбмена.НастройкаОбменаДействует
						И НЕ ДействующиеПараметрыОбмена.ВидЭДПоддерживаетсяБанком Тогда
						ТекстСостоянияЭД = НСтр("ru = 'Данный вид электронного документа банк не принимает'");
					Иначе
						ТекстСостоянияЭД = НСтр("ru = 'Прямой обмен с банком не подключен'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСостоянияЭД = НСтр("ru = 'Прямой обмен с банками отключен'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

// Запускает фоновое задание по обработке электронных документов.
//
// Параметры:
//  Параметры - Структура - параметры обработки электронных документов, содержит поля:
//   * МассивСсылокНаОбъект - Массив - содержит ссылки на документы, которые необходимо обработать;
//   * МассивОтпечатковСертификатов - Массив - отпечатки доступных сертификатов на клиенте;
//   * Действия - Строка - последовательность необходимых действий с электронным документом;
//   * СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка сообщение обмена, который нужно обработать;
// 
// Возвращаемое значение:
//  Структура - см. описание в ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияПоОбработкеЭлектронныхДокументов(Параметры) Экспорт
	
	СтруктураВозврата = Новый Структура("ТребуетсяКриптография, Результат", Ложь);
	
	Если Не Параметры.Свойство("МассивОтпечатковСертификатов")
		И (ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Параметры.Действия, "Подписать")
			ИЛИ ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Параметры.Действия, "Отправить"))
		И ТребуетсяКриптографияДляОбработкиДокументов(Параметры.МассивСсылокНаОбъект) Тогда
		СтруктураВозврата.ТребуетсяКриптография = Истина;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	МинимальнаяВерсияПлатформыДляПолученияIP = "8.3.17.0";
	УстановитьПривилегированныйРежим(Истина);
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, МинимальнаяВерсияПлатформыДляПолученияIP) > 0 Тогда
		Если Не Параметры.Свойство("Фрод") Или Параметры.Фрод = Неопределено Тогда
			Параметры.Вставить("Фрод", Новый Структура);
		КонецЕсли;
		Сеанс = ПолучитьТекущийСеансИнформационнойБазы();
		IPАдресКлиента = "IPАдресКлиента";
		Параметры.Фрод.Вставить("IPАдресКлиента", Сеанс[IPАдресКлиента])
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обработка электронных документов'");
	
	Параметры.Вставить("СессииОбменСБанками", ПараметрыСеанса.СессииОбменСБанками);
	
	СтруктураВозврата.Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОбработатьЭлектронныеДокументы", Параметры, ПараметрыВыполнения);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСообщенийОбмена

// Обновляет двоичные данные присоединенного файла сообщения обмена.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена;
//  ДвоичныеДанныеЭД - ДвоичныеДанные - данные, которые нужно записать в присоединенный файл.
//
Процедура ОбновитьДанныеЭД(Знач СообщениеОбмена, Знач ДвоичныеДанныеЭД) Экспорт
	
	ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);
	ИнформацияОФайле = Новый Структура;
	ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭД));
	ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
	
	РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОФайле);
	
КонецПроцедуры

// Получает сопоставление владельцев и актуальных ЭД.
//
// Параметры:
//  МассивСсылокНаВладельцев - Массив - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
// Возвращаемое значение:
//  Соответствие - владельцы и сообщения обмена:
//     * Ключ - ЛюбаяСсылка - ссылка на владельца сообщения;
//     * Значение - ДокументСсылка.СообщениеОбменСБанками - найденное сообщение обмена.
//
Функция СообщенияОбменаПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	СоответствиеВладельцевИСообщенийОбмена = Новый Соответствие;
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект,
	|	СостоянияЭД.СообщениеОбмена КАК СообщениеОбмена
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		СоответствиеВладельцевИСообщенийОбмена.Вставить(Результат.СсылкаНаОбъект, Результат.СообщениеОбмена);
	КонецЦикла;
	
	Возврат СоответствиеВладельцевИСообщенийОбмена;
	
КонецФункции

// Получает данные о владельцах сообщений обмена.
//
// Параметры:
//  МассивСообщений - Массив - ссылки на сообщения обмена, владельцев которых нужно определить.
//
// Возвращаемое значение:
//  Массив - владельцы сообщений обмена
//     * ЛюбаяСсылка - ссылка на владельца сообщения.
//
Функция ВладельцыСообщенийОбмена(МассивСообщений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СообщениеОбмена В(&МассивСообщенийОбмена)";
	Запрос.УстановитьПараметр("МассивСообщенийОбмена", МассивСообщений);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНаОбъект");
	
	Возврат Результат;
	
КонецФункции

// Изменяет реквизиты сообщения обмена.
//
// Параметры:
//    СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - изменяемое сообщение,
//    Реквизиты - Структура - изменяемые реквизиты. Названия ключей совпадают с названиями реквизитов справочника.
//
Процедура ИзменитьСообщениеОбмена(СообщениеОбмена, Знач Реквизиты) Экспорт
	
	СообщениеОбменаОбъект = СообщениеОбмена.ПолучитьОбъект();
	Попытка
		СообщениеОбменаОбъект.Заблокировать();
	Исключение
		ВидОперации = НСтр("ru = 'Изменение параметров сообщения'");
		ТекстОшибки = НСтр("ru = 'Не удалось заблокировать сообщение обмена: %1
							|Причина: %2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(
			ТекстОшибки, СообщениеОбмена, ПодробноеПредставлениеОшибки);
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Не удалось изменить сообщение обмена: %1
									|Причина: %2
									|Операция не выполнена.'");
		ТекстСообщения = СтрШаблон(
			ТекстСообщения, СообщениеОбмена, КраткоеПредставлениеОшибки);
		ОбработатьОшибку(ВидОперации, ТекстОшибки, , СообщениеОбмена);
		Возврат;
	КонецПопытки;
	
	Если Реквизиты.Свойство("ДополнительныеДанные") Тогда
		
		Если ЗначениеЗаполнено(СообщениеОбменаОбъект.ДополнительныеДанные) Тогда
			ДополнительныеДанные = СообщениеОбменаОбъект.ДополнительныеДанные.Получить();
			Если Не ЗначениеЗаполнено(ДополнительныеДанные) Тогда
				ДополнительныеДанные = Новый Структура;
			КонецЕсли;
		Иначе
			ДополнительныеДанные = Реквизиты.ДополнительныеДанные;
		КонецЕсли;
		
		Для Каждого КлючЗначение Из Реквизиты.ДополнительныеДанные Цикл
			ДополнительныеДанные.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		СообщениеОбменаОбъект.ДополнительныеДанные = Новый ХранилищеЗначения(ДополнительныеДанные);
	
		Реквизиты.Удалить("ДополнительныеДанные");
		
	КонецЕсли;
	
	ДополнительныеСвойства = Неопределено;
	Если Реквизиты.Свойство("ДополнительныеСвойства", ДополнительныеСвойства) 
		И ЗначениеЗаполнено(ДополнительныеСвойства) Тогда
		Для Каждого КлючЗначение Из ДополнительныеСвойства Цикл
			СообщениеОбменаОбъект.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СообщениеОбменаОбъект.Статус = Перечисления.СтатусыОбменСБанками.Подтвержден Тогда
		Реквизиты.Удалить("Статус");
	КонецЕсли;
	
	Если Реквизиты.Свойство("Статус") И Реквизиты.Статус <> СообщениеОбменаОбъект.Статус Тогда
		Реквизиты.Вставить("ДатаИзмененияСтатуса", ТекущаяДатаСеанса());
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СообщениеОбменаОбъект, Реквизиты);
	
	СообщениеОбменаОбъект.Записать();
	
	Если Реквизиты.Свойство("УдалитьЭП") Тогда
		ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена, Ложь);
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			УстановитьПривилегированныйРежим(Истина);
			МассивПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
			Для Счетчик = 1 По МассивПодписей.Количество() Цикл
				ЭлектроннаяПодпись.УдалитьПодпись(ПрисоединенныйФайл, 1);
			КонецЦикла;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Реквизиты.Свойство("АдресФайлаВоВременномХранилище") Тогда
		ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена, Ложь);
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			Реквизиты.Вставить("АдресВременногоХранилищаТекста");
			РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, Реквизиты);
		Иначе
			Представление = Строка(СообщениеОбмена);
			Название = СтроковыеФункции.СтрокаЛатиницей(Представление);
			НазваниеФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Название, "");
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", СообщениеОбмена);
			ПараметрыФайла.Вставить("ИмяБезРасширения", НазваниеФайла);
			ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Реквизиты.АдресФайлаВоВременномХранилище);
		КонецЕсли;
	КонецЕсли;
	
	СообщениеОбменаОбъект.Разблокировать();
	
КонецПроцедуры

// Устанавливает статусы сообщений обмена.
//
// Параметры:
//  МассивСообщенийОбмена - Массив из ДокументСсылка.СообщениеОбменСБанками - документы, для которых меняется статус:
//  Статус - ПеречислениеСсылка.СтатусыОбменСБанками - новый статус сообщения обмена.
//
Процедура УстановитьСтатусыСообщенийОбмена(Знач МассивСообщенийОбмена, Знач Статус) Экспорт
	
	Для Каждого СообщениеОбмена Из МассивСообщенийОбмена Цикл
		ОбменСБанкамиСлужебный.УстановитьСтатусСообщенияОбмена(СообщениеОбмена, Статус);
	КонецЦикла;
	
КонецПроцедуры


// Предназначен для возврата на клиента двоичных данных ЭД, установленных подписей и сертификатов для дальнейшей
// проверки валидности подписей на клиенте.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//
// Возвращаемое значение:
//  Структура - данные для проверки подписей электронного документа.
//    * ДанныеЭД - ДвоичныеДанные - двоичные данные электронного документа;
//    * Подписи - Массив - данные электронных подписей
//      ** Значение - Структура - содержит следующие поля:
//        *** НомерСтроки - Число - номер строки таблицы электронных подписей
//        *** Сертификат - ДвоичныеДанные - двоичные данные сертификата подписи
//        *** Подпись - ДвоичныеДанные - двоичные данные электронной подписи
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком
//  Неопределено - не найдены двоичные данные для проверки подписи.
//
Функция СтруктураСодержимогоСообщенияОбмена(СообщениеОбмена) Экспорт
	
	РеквизитыСообщенияОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "НастройкаОбмена, ВидЭД");
	
	МассивПодписей = Новый Массив;
	
	ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ПодписанЭП") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭП.ПорядковыйНомер КАК НомерСтроки,
		|	ЭП.Сертификат КАК Сертификат,
		|	ЭП.Подпись КАК Подпись
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.ПодписанныйОбъект = &ПодписанныйОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

		Запрос.УстановитьПараметр("ПодписанныйОбъект", ПрисоединенныйФайл);
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураПодписей = Новый Структура;
			СтруктураПодписей.Вставить("НомерСтроки", Выборка.НомерСтроки);
			СтруктураПодписей.Вставить("Сертификат",  Выборка.Сертификат.Получить());
			СтруктураПодписей.Вставить("Подпись",     Выборка.Подпись.Получить());
			МассивПодписей.Добавить(СтруктураПодписей);
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		РеквизитыСообщенияОбмена.НастройкаОбмена, "ПрограммаБанка");

	Если ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
		И РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
		СлужебныйЭД = ОбменСБанкамиСлужебный.ПодчиненноеСообщениеОбмена(
			СообщениеОбмена, Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
		ДанныеЭД = ДвоичныеДанныеПрисоединенногоФайла(СлужебныйЭД);
	Иначе
		ДанныеЭД = ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
	КонецЕсли;
	
	Если ДанныеЭД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДанныеЭД", ДанныеЭД);
	СтруктураВозврата.Вставить("Подписи", МассивПодписей);
	СтруктураВозврата.Вставить("НастройкаОбмена", РеквизитыСообщенияОбмена.НастройкаОбмена);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет сообщения обмена, требующие подтверждения.
//
// Параметры:
//  МассивСообщенийОбмена - Массив - сообщения обмена, которые были отправлены в банк.
// 
// Возвращаемое значение:
//   Массив из ДокументСсылка.СообщениеОбменСБанками - сообщения обмена, которые нужно дополнительно подтвердить:
//
Функция СообщенияОбменаТребующиеПодтверждения(МассивСообщенийОбмена) Экспорт
	
	МассивВозврата = Новый Массив;
	ЗначенияРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСообщенийОбмена, "Состояние");
	Для Каждого КлючЗначение Из ЗначенияРеквизита Цикл
		Если КлючЗначение.Значение = Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение Тогда
			МассивВозврата.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивВозврата;
		
КонецФункции

#КонецОбласти

#Область ЭлектронныеПодписи

// Формирует структуру сертификата установленной подписи для дальнейшего открытия формы просмотра сертификата из БСП.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена
//  Отпечаток - Строка - отпечаток сертификата
//  УникальныйИдентификатор - УникальныйИдентификатор - идентификатор для помещения данных во временное хранилище.
// 
// Возвращаемое значение:
//  Структура - см. описание в ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата
//            + АдресДанныхСертификата - Строка - адрес временного хранилища с двоичными данными сертификата.
//
Функция СтруктураСертификатаУстановленнойПодписи(Знач СообщениеОбмена, Знач Отпечаток, Знач УникальныйИдентификатор) Экспорт
	
	ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭП.Сертификат
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
	|ГДЕ
	|	ЭП.Отпечаток = &Отпечаток
	|	И ЭП.ПодписанныйОбъект = &ПодписанныйОбъект";
	
	Запрос.УстановитьПараметр("Отпечаток", Отпечаток);
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПрисоединенныйФайл);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка.Следующий();
	
	ДвоичныеДанныеСертификата = Выборка.Сертификат.Получить();

	ВыбранныйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Если ВыбранныйСертификат = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сертификат не найден'"));
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = ЭлектроннаяПодпись.СвойстваСертификата(ВыбранныйСертификат);
	АдресДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	СтруктураВозврата.Вставить("АдресДанныхСертификата", АдресДанныхСертификата);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет, все ли установленные на ЭД подписи являются валидными.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка сообщение обмена.
//
// Возвращаемое значение:
//  Булево - если все подписи валидны, то возвращается Истина.
//
Функция УстановленныеПодписиВалидны(Знач СообщениеОбмена) Экспорт
	
	ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ПодписанЭП") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭП.ПодписьВерна
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.ПодписанныйОбъект = &ПодписанныйОбъект
		|	И НЕ ЭП.ПодписьВерна";
		Запрос.УстановитьПараметр("ПодписанныйОбъект", ПрисоединенныйФайл);
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.Количество() > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Добавляет данные подписей в сообщение обмена
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена
//                  - СправочникСсылка.СообщениеОбменСБанкамиПрисоединенныеФайлы - присоединенный файл к письму
//  ДанныеПодписей - Массив - набор данных электронных подписей
//    * Соответствие - данные подписи:
//       ** Ключ - ДвоичныеДанные - двоичные данные сертификата подписи;
//       ** Значение - ДвоичныеДанные - двоичные данные электронной подписи.
//
Процедура ДобавитьПодписиВСообщениеОбмена(СообщениеОбмена, ДанныеПодписей) Экспорт
	
	Для Каждого СертификатИПодпись Из ДанныеПодписей Цикл
		Для Каждого КлючЗначение Из СертификатИПодпись Цикл
			Сертификат = Новый СертификатКриптографии(КлючЗначение.Ключ);
			ОтпечатокСтрокой = Base64Строка(Сертификат.Отпечаток);
			ПредставлениеСубъекта = ЭлектроннаяПодпись.ПредставлениеСубъекта(Сертификат);
			Если ТипЗнч(СообщениеОбмена) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
				ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);
			Иначе
				ПрисоединенныйФайл = СообщениеОбмена;
			КонецЕсли;
		
			СвойстваПодписи = Новый Структура;
			СвойстваПодписи.Вставить("Подпись", КлючЗначение.Значение);
			СвойстваПодписи.Вставить("Отпечаток", ОтпечатокСтрокой);
			СвойстваПодписи.Вставить("КомуВыданСертификат", ПредставлениеСубъекта);
			СвойстваПодписи.Вставить("Сертификат", КлючЗначение.Ключ);
			
			ЭлектроннаяПодпись.ДобавитьПодпись(ПрисоединенныйФайл, СвойстваПодписи);
			
		КонецЦикла
	КонецЦикла;
	
КонецПроцедуры

// Сохранить данные электронных подписей, полученного из банка документа.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банком;
//  СвойстваСертификатаБанка - Структура - свойства сертификата банка;
//  ДанныеПодписей - Массив - данные установленных подписей.
//
Процедура СохранитьДанныеЭлектронныхПодписей(Знач СообщениеОбмена, Знач СвойстваСертификатаБанка, Знач ДанныеПодписей) Экспорт
	
	Для Каждого Элемент Из ДанныеПодписей Цикл
		ДанныеПодписи = Элемент.ДанныеПодписи;
		ДобавитьПодпись(СообщениеОбмена, ДанныеПодписи, СвойстваСертификатаБанка, Элемент);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет действия с сообщениями обмена после установки электронной подписи.
//
// Параметры:
//   СоответствиеСертификатовПодписаннымЭд - Массив из Соответствие - массив сообщений подписанного ЭД, типа ДокументСсылка.СообщениеОбменСБанками.
//
Процедура ДействияПослеПодписанияЭДНаСервере(СоответствиеСертификатовПодписаннымЭд) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СертификатМассивЭД Из СоответствиеСертификатовПодписаннымЭд Цикл
		Сертификат = СертификатМассивЭД.Ключ;
		МассивСообщенийОбменаКОбновлениюСтатуса = СертификатМассивЭД.Значение;
		
		Для Каждого СообщениеОбмена Из МассивСообщенийОбменаКОбновлениюСтатуса Цикл
			НачатьТранзакцию();
			Попытка
				СтруктураПараметров = Новый Структура;
				Если ОбменСБанкамиСлужебный.ДокументПодписываетсяПоМаршруту(СообщениеОбмена) Тогда
					ВесМаршрута = 0;
					ЭлектронноеВзаимодействиеСлужебный.ОбновитьМаршрутПриПодписании(СообщениеОбмена, Сертификат, ВесМаршрута);
					
					ПредставлениеПрогрессаПодписания = ОбменСБанкамиСлужебный.ПредставлениеПрогрессаПодписания(
						СообщениеОбмена, ВесМаршрута);
					СтруктураПараметров.Вставить("ПредставлениеПрогрессаПодписания", ПредставлениеПрогрессаПодписания);
					
					// Это дополнительное свойство добавляется, чтобы обновить представление в регистре "СостоянияОбменСБанками".
					СтруктураПараметров.Вставить("ДополнительныеСвойства", Новый Структура("ОбновитьСостояниеОбъектовИБ"));
				КонецЕсли;
				
				Если ЭлектронныйДокументПолностьюПодписан(СообщениеОбмена) Тогда
					СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Подписан);
				Иначе
					СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
				КонецЕсли;
				ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа в сообщении обмена %1'");
				ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", СообщениеОбмена);
				Операция = НСтр("ru = 'Установка подписи ЭП'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, СообщениеОбмена);
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет результаты проверки ЭП, выполненные на клиенте.
//
// Параметры:
// СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена;
// МассивРезультатов - Массив из Структура - содержит результаты проверки подписей:
//          * ДатаПроверкиПодписи - дата - дата и время проверки подписи;
//          * ПодписьВерна - Булево - признак валидности подписи.
//
Процедура СохранитьРезультатыПроверкиПодписей(Знач СообщениеОбмена, Знач МассивРезультатов) Экспорт
	
	ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Индекс = 0;
	Для Каждого Элемент Из МассивРезультатов Цикл
		Индекс = Индекс + 1;
		Если Элемент.Количество() Тогда
			НовЗапись = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
			НовЗапись.ПодписанныйОбъект = ПрисоединенныйФайл;
			НовЗапись.ПорядковыйНомер = Индекс;
			НовЗапись.Прочитать();
			НовЗапись.ПодписанныйОбъект = ПрисоединенныйФайл;
			НовЗапись.ПорядковыйНомер = Индекс;
			ЗаполнитьЗначенияСвойств(НовЗапись, Элемент);
			НовЗапись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет добавление ЭП в электронный документ. Для исходящих документов также меняет статус.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банками,
//  Подпись - ДвоичныеДанные - электронная подпись.
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат подписи;
//             - Структура - свойства сертификата подписи:
//                  * Отпечаток - Строка -  отпечаток сертификата;
//                  * ДвоичныеДанные - Строка - двоичные данные сертификата;
//                  * КомуВыдан - Строка - владелец сертификата.
//  ДанныеПроверкиПодписи - Структура - результаты проверки подписи на клиенте. Содержит следующие поля:
//    * ДатаПроверкиПодписи - Дата - дата проверки подписи;
//    * ПодписьВерна - Булево - признак валидности подписи.
//
Процедура ДобавитьПодпись(Знач СообщениеОбмена, Знач Подпись, Знач Сертификат, Знач ДанныеПроверкиПодписи = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СертификатПодписи = Неопределено;
	ДанныеПодписи = Новый Структура("Подпись, УстановившийПодпись, Комментарий, ИмяФайлаПодписи, ДатаПодписи, Отпечаток,
		|Сертификат, КомуВыданСертификат");
	
	Если ТипЗнч(Сертификат) = Тип("Структура") Тогда
		ДвоичныеДанныеСертификата = Сертификат.ДвоичныеДанные;
		КомуВыданСертификат = Сертификат.КомуВыдан;
		Отпечаток = Сертификат.Отпечаток;
		Сертификат.Свойство("СертификатСсылка", СертификатПодписи); 
		
		СтруктураСвойствСертификата = Новый Структура("СерийныйНомер, КемВыдан, КомуВыдан, ДатаНачала, ДатаОкончания");
		ЗаполнитьЗначенияСвойств(СтруктураСвойствСертификата, Сертификат);
		ДанныеПодписи.Вставить("ОписаниеСертификата", СтруктураСвойствСертификата);
	Иначе
		РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Сертификат, "Отпечаток, ДанныеСертификата, КомуВыдан");
		Отпечаток = РеквизитыСертификата.Отпечаток;
		ДвоичныеДанныеСертификата = РеквизитыСертификата.ДанныеСертификата.Получить();
		КомуВыданСертификат = РеквизитыСертификата.КомуВыдан;
		СертификатПодписи = Сертификат;
	КонецЕсли;
	
	ДанныеПодписи.Подпись = Подпись;
	ДанныеПодписи.ДатаПодписи = ТекущаяДатаСеанса();
	ДанныеПодписи.Отпечаток = Отпечаток;
	ДанныеПодписи.Сертификат = ДвоичныеДанныеСертификата;
	ДанныеПодписи.КомуВыданСертификат = КомуВыданСертификат;
	
	Если НЕ ДанныеПроверкиПодписи = Неопределено Тогда
		ДанныеПодписи.Вставить("ДатаПроверкиПодписи", ДанныеПроверкиПодписи.ДатаПроверкиПодписи);
		ДанныеПодписи.Вставить("ПодписьВерна", ДанныеПроверкиПодписи.ПодписьВерна);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);
		РаботаСФайлами.ДобавитьПодписьКФайлу(ПрисоединенныйФайл, ДанныеПодписи);
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Направление") = Перечисления.НаправленияЭД.Исходящий Тогда
			СтруктураПараметров = Новый Структура;
			Если ОбменСБанкамиСлужебный.ДокументПодписываетсяПоМаршруту(СообщениеОбмена) Тогда
				ВесМаршрута = 0;
				ЭлектронноеВзаимодействиеСлужебный.ОбновитьМаршрутПриПодписании(СообщениеОбмена, СертификатПодписи, ВесМаршрута);
				
				ПредставлениеПрогрессаПодписания = ОбменСБанкамиСлужебный.ПредставлениеПрогрессаПодписания(
					СообщениеОбмена, ВесМаршрута);
				СтруктураПараметров.Вставить("ПредставлениеПрогрессаПодписания", ПредставлениеПрогрессаПодписания);
				
				// Это дополнительное свойство добавляется, чтобы обновить представление в регистре "СостоянияОбменСБанками".
				СтруктураПараметров.Вставить("ДополнительныеСвойства", Новый Структура("ОбновитьСостояниеОбъектовИБ"));
			КонецЕсли;
			
			Если ЭлектронныйДокументПолностьюПодписан(СообщениеОбмена) Тогда
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Подписан);
			Иначе
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
			КонецЕсли;
			ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru = 'Ошибка сохранения подписи электронного документа %1'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
		ВидОперации = НСтр("ru = 'Сохранение данных электронной подписи'");
		ОбработатьОшибку(ВидОперации, ИнформацияОбОшибке, ТекстСообщения, СообщениеОбмена);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Определяет готов ли электронный документ к отправке.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на проверяемое сообщение обмена.
//
// Возвращаемое значение:
//  Булево - если документ полностью подписан, тогда Истина, иначе Ложь.
//
Функция ЭлектронныйДокументПолностьюПодписан(СообщениеОбмена) Экспорт
	
	РеквизитыСообщенияОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "НастройкаОбмена, ВидЭД");

	ФлагПодписанПолностью = Истина;
	
	ТребуетсяПодпись = ОбменСБанкамиСлужебный.ПодписыватьВидЭД(
		РеквизитыСообщенияОбмена.НастройкаОбмена, РеквизитыСообщенияОбмена.ВидЭД);
	Если ТребуетсяПодпись Тогда
		ВидыДокументовПодписываемыхПоМаршруту = ОбменСБанкамиСлужебныйПовтИсп.ВидыДокументовПодписываемыхПоМаршруту(Ложь);
		ПодписываетсяПоМаршруту = ВидыДокументовПодписываемыхПоМаршруту.Найти(РеквизитыСообщенияОбмена.ВидЭД) <> Неопределено;
		МаршрутПодписанияЗавершен = ЭлектронноеВзаимодействиеСлужебный.МаршрутПодписанияЗавершен(СообщениеОбмена);
		ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);
		ПодписанЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ПодписанЭП");
		ФлагПодписанПолностью = ПодписанЭП И (Не ПодписываетсяПоМаршруту ИЛИ МаршрутПодписанияЗавершен);
	КонецЕсли;
	
	Возврат ФлагПодписанПолностью;
	
КонецФункции

#КонецОбласти

#Область ОбработкаПакетов

// Устанавливает новый статус пакета.
//
// Параметры:
//  Пакет - ДокументСсылка.ПакетОбменСБанками - ссылка на пакет, у которого меняется статус.
//  СтатусПакета - ПеречислениеСсылка.СтатусыПакетовЭД - новый статус пакета.
//
Процедура УстановитьСтатусПакета(Знач Пакет, Знач СтатусПакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЭДОбъект = Пакет.ПолучитьОбъект();
	ПакетЭДОбъект.Статус = СтатусПакета;
	ПакетЭДОбъект.Записать();
	
КонецПроцедуры

// Читает файл, полученный из банка и возвращает идентификаторы пакетов, которых еще нет в информационной базе.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  ДанныеФайлаBase64 - Строка - двоичные данные файла, полученного из банка в формате Base64;
//  МассивИдентификаторов - Массив из Строка - содержит идентификаторы новых пакетов банка:
//  ЕстьОшибка - Булево - при разборе файла произошла ошибка.
//
Процедура ПрочитатьИдентификаторыПакетов(Знач НастройкаОбмена, Знач ДанныеФайлаBase64, МассивИдентификаторов, ЕстьОшибка) Экспорт
	
	ДвоичныеДанныеФайла = Base64Значение(ДанныеФайлаBase64);
	Путь = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	Попытка
		ОбменСБанкамиСлужебный.ПрочитатьИдентификаторыПакетов(НастройкаОбмена, Путь, МассивИдентификаторов);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), НастройкаОбмена);
		ЕстьОшибка = Истина;
	КонецПопытки
	
КонецПроцедуры

// Обновляет статус пакета обмена, а также сообщений обмена, которые находятся в табличной части.
//
// Параметры:
//    ПакетОбменСБанками - ДокументСсылка.ПакетОбменСБанками - ссылка на пакет обмена;
//    НовыйСтатусПакетаЭД - ПеречислениеСсылка.СтатусыПакетовЭД - назначаемый статус пакета;
//    СтруктураПараметров - Структура - изменяемые реквизиты сообщений обмена, входящих в пакет.
//    СообщенияОбмена - Массив - Массив ссылок на сообщения, которые есть в пакете обмена;
//
Процедура ОбновитьСтатусыДокументовПакетаЭДО(Знач ПакетОбменСБанками, Знач НовыйСтатусПакетаЭД, Знач СтруктураПараметров, СообщенияОбмена = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПакетОбменСБанками) Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияОбмена = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПакетОбменСБанкамиСообщения.Сообщение КАК Сообщение
		|ИЗ
		|	Документ.ПакетОбменСБанками.Сообщения КАК ПакетОбменСБанкамиСообщения
		|ГДЕ
		|	ПакетОбменСБанкамиСообщения.Ссылка = &ПакетОбменСБанками
		|	И ИСТИНА";
		Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА",
				"ПакетОбменСБанкамиСообщения.Сообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Отправлен)");
		КонецЕсли;
		Запрос.УстановитьПараметр("ПакетОбменСБанками", ПакетОбменСБанками);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ДополнительныеДанные = Новый Структура("ДатаПоступления", ТекущаяДатаСеанса());
				СтруктураПараметров.Вставить("ДополнительныеДанные", ДополнительныеДанные);
			КонецЕсли;
			ИзменитьСообщениеОбмена(Выборка.Сообщение, СтруктураПараметров);
			СообщенияОбмена.Добавить(Выборка.Сообщение);
		КонецЦикла;
		
		ПакетОбъект = ПакетОбменСБанками.ПолучитьОбъект();
		ПакетОбъект.Статус = НовыйСтатусПакетаЭД;
		ПакетОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Смена статуса пакета ЭДО и обновление статусов ЭД'");
		ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения, ПакетОбменСБанками);
	КонецПопытки;
	
КонецПроцедуры

// Получает список подготовленных к отправке пакетов.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
// 
// Возвращаемое значение:
// Массив - список пакетов обмена к отправке
//   * ДокументСсылка.ПакетОбменСБанками - готовый к отправке пакет.
//
Функция ПодготовленныеКОтправкеПакеты(Знач НастройкаОбмена) Экспорт
	
	ЗапросПодготовленныхПакетов = Новый Запрос;
	ЗапросПодготовленныхПакетов.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетОбменСБанками КАК ПакетЭД
	|ГДЕ
	|	НЕ ПакетЭД.ПометкаУдаления
	|	И ПакетЭД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И ПакетЭД.НастройкаОбмена = &НастройкаОбмена";
	ЗапросПодготовленныхПакетов.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Результат = ЗапросПодготовленныхПакетов.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Добавление запроса выписки
	Если ЕстьПоддержкаВидаЭДВКонфигурации(Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки) Тогда
		РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			НастройкаОбмена, "ПрограммаБанка, Организация, Банк");
		Если РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
			ТребуетсяПодпись = ОбменСБанкамиСлужебный.ПодписыватьВидЭД(
				НастройкаОбмена, Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
			Если Не ТребуетсяПодпись Тогда
				МассивБанковскихСчетов = Новый Массив;
				ОбменСБанкамиПереопределяемый.ПолучитьНомераБанковскихСчетов(
					РеквизитыНастройкиОбмена.Организация, РеквизитыНастройкиОбмена.Банк, МассивБанковскихСчетов);
				Если ЗначениеЗаполнено(МассивБанковскихСчетов) Тогда
					ДатаНачала = ОбменСБанкамиСлужебный.ДатаНачалаЗапросаВыписки(НастройкаОбмена);
					ДатаОкончания = ТекущаяДатаСеанса();
					МассивСообщенийЗапросов = ОбменСБанкамиСлужебный.МассивЗапросовВыпискиАсинхронныйОбмен(
						НастройкаОбмена, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов, Истина);
					НовыйПакет = Неопределено;
					ОбменСБанкамиСлужебный.СоздатьПакетОбменСБанками(НастройкаОбмена, МассивСообщенийЗапросов, НовыйПакет);
					ОбменСБанкамиСлужебный.СоздатьЭДПакетаAsync(НовыйПакет);
					Результат.Добавить(НовыйПакет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Сертификаты

// Возвращает сертификаты в формате BASE64 для каждого сообщения обмена.
//
// Параметры:
//  МассивСообщенийОбмена - Массив из ДокументСсылка.СообщениеОбменСБанками - сообщения обмена для получения сертификатов:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//
// Возвращаемое значение:
//  Соответствие - данные сертификатов подписи:
//    * Ключ - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена;
//    * Значение - массив из Строка- данные сертификатов подписи
//
Функция ДанныеСертификатовСообщенийОбмена(Знач МассивСообщенийОбмена, Знач НастройкаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.Ссылка КАК СообщениеОбмена,
	|	ЭП.Сертификат КАК Сертификат
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
	|		ПО (СообщениеОбменСБанками.Ссылка = ВЫРАЗИТЬ(ЭП.ПодписанныйОбъект КАК Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы).ВладелецФайла)
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.Ссылка В(&МассивСообщенийОбмена)
	|ИТОГИ ПО
	|	СообщениеОбмена";
	
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("МассивСообщенийОбмена", МассивСообщенийОбмена);
	ВыборкаСообщениеОбмена = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СоответствиеВозврата = Новый Соответствие;
	
	Пока ВыборкаСообщениеОбмена.Следующий() Цикл
		ВыборкаСертификаты = ВыборкаСообщениеОбмена.Выбрать();
		МассивДанныхСертификатов = Новый Массив;
		Пока ВыборкаСертификаты.Следующий() И НЕ ВыборкаСертификаты.Сертификат = NULL Цикл
			МассивДанныхСертификатов.Добавить(ВыборкаСертификаты.Сертификат.Получить());
		КонецЦикла;
		СоответствиеВозврата.Вставить(ВыборкаСообщениеОбмена.СообщениеОбмена, МассивДанныхСертификатов);
	КонецЦикла;

	Возврат СоответствиеВозврата;
	
КонецФункции

// Возвращает соответствие с данными о доступных сертификатах.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена.
//
// Возвращаемое значение:
//  Соответствие - содержит данные сертификатов:
//    * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат;
//    * Значение - Структура - реквизиты сертификата:
//          ** Отпечаток - Строка - отпечаток сертификата;
//          ** ДанныеСертификата - ДвоичныеДанные - данные сертификата;
//          ** КомуВыдан - Строка - кому выдан сертификат.
//
Функция ДоступныеСертификаты(Знач НастройкаОбмена) Экспорт
	
	ДанныеВозврата = Новый Соответствие;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования) Тогда
		Возврат ДанныеВозврата;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сертификаты.Ссылка,
	|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	Сертификаты.Отпечаток,
	|	Сертификаты.КомуВыдан
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ПО СертификатыПодписейОрганизации.СертификатЭП = Сертификаты.Ссылка
	|ГДЕ
	|	СертификатыПодписейОрганизации.Ссылка = &НастройкаОбмена
	|	И &ПроверкаПользователя";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
			"Сертификаты.Пользователь В (&ТекущийПользователь, &ПустойПользователь, &ПользовательНеУказан)");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Структура = Новый Структура("ПарольСертификата, Отпечаток, ДанныеСертификата, ПарольПолучен, КомуВыдан");
		ЗаполнитьЗначенияСвойств(Структура, Результат);
		Структура.Вставить("ДанныеСертификата", Результат.ДанныеСертификата.Получить());
		ДанныеВозврата.Вставить(Результат.Ссылка, Структура);
	КонецЦикла;
	Возврат ДанныеВозврата;
	
КонецФункции

// Возвращает соответствие с данными о доступных сертификатах.
//
// Параметры:
//   МассивОтпечатковСертификатов - Массив - массив структур сертификатов,
//     установленных в личном хранилище на компьютере пользователя.
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - будут выбраны сертификаты,
//     зарегистрированные в указанной настройке и доступные текущему пользователю.
//
// Возвращаемое значение:
//  Соответствие - соответствие доступных сертификатов, вида:
//    * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//    * Значение - Структура - данные сертификата.
//
Функция СоответствиеДоступныхСертификатовИПараметров(Знач МассивОтпечатковСертификатов, Знач НастройкаОбмена = Неопределено) Экспорт
	
	ОбменСБанкамиСлужебный.ДобавитьОтпечаткиСертификатовНаСервере(МассивОтпечатковСертификатов);
	
	МассивСтруктур = МассивСтруктурДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаОбмена);
	
	СоответствиеСертификатовИПаролей = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(
		, МассивОтпечатковСертификатов);
	ДанныеВозврата = Новый Соответствие;
	Если ТипЗнч(МассивСтруктур) = Тип("Массив") Тогда
		Для Каждого Элемент Из МассивСтруктур Цикл
			ПарольКСертификату = СоответствиеСертификатовИПаролей.Получить(Элемент.Сертификат);
			Если ПарольКСертификату <> Неопределено Тогда
				Элемент.ПарольСертификата = ПарольКСертификату;
				Элемент.ПарольПолучен = Истина;
			КонецЕсли;
			ДанныеВозврата.Вставить(Элемент.Сертификат, Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Возвращает структуру с полями сертификата.
//
// Параметры:
//   ДвоичныеДанныеСертификата - ДвоичныеДанные - данные сертификата криптографии.
//
// Возвращаемое значение:
//   Структура - Структура с полями сертификата.
//
Функция СтруктураСертификата(Знач ДвоичныеДанныеСертификата) Экспорт
	
	Попытка
		НовыйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Исключение
		ВидОперации = НСтр("ru = 'Загрузка сертификата с банковского ключа'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТестСообщения = НСтр("ru = 'Не удалось прочитать файл сертификата, операция прервана.'");
		ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТестСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураСертификата = ЭлектроннаяПодпись.СвойстваСертификата(НовыйСертификат);
	
	Возврат СтруктураСертификата;
	
КонецФункции

// Возвращает данные сертификатов используемых в настройке обмена.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена.
//
// Возвращаемое значение:
//  Массив - Массив данных сертификатов в виде структур.
//
Функция ДанныеСертификатовБанка(НастройкаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП) КАК ВсегоСертификатов
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыЭП
	|ГДЕ
	|	НастройкиОбменСБанкамиСертификатыЭП.Ссылка = &НастройкаОбмена
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП КАК Сертификат,
	|	НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП.ДействителенДо КАК ДействителенДо
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыЭП
	|ГДЕ
	|	&ПроверкаПользователя
	|	И НастройкиОбменСБанкамиСертификатыЭП.Ссылка = &НастройкаОбмена";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
			"НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП.Пользователь В (&ТекущийПользователь, &ПустойПользователь, &ПользовательНеУказан)");
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаПоКоличеству = МассивРезультатов[0].Выбрать();
	ВыборкаПоКоличеству.Следующий();
	ВсегоСертификатов = ВыборкаПоКоличеству.ВсегоСертификатов;

	ВыборкаСертификаты = МассивРезультатов[1].Выбрать();
	
	Если ВыборкаСертификаты.Количество() = 0 И ВсегоСертификатов > 0 Тогда
		ТекстСообщения =  НСтр("ru = 'Сертификат подписи недоступен для текущего пользователя.
								|Проверьте настройки обмена или обратитесь к администратору.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	МассивСертификатов = Новый Массив;
	Пока ВыборкаСертификаты.Следующий() Цикл
		Если ВыборкаСертификаты.ДействителенДо < ТекущаяДатаСеанса() Тогда
			ШаблонСообщения = НСтр("ru = 'Закончился срок действия сертификата: %1
										|Получите новый сертификат'");
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения, ВыборкаСертификаты.Сертификат);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		МассивСертификатов.Добавить(ВыборкаСертификаты.Сертификат);
	КонецЦикла;
	
	Результат = ДанныеСертификатов(МассивСертификатов);
	Для Каждого ДанныеСертификата Из Результат Цикл
		ДанныеСертификата.Вставить("ПрограммаБанка", НастройкаОбмена.ПрограммаБанка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные переданных сертификатов.
//
// Параметры:
//  Сертификаты - Массив - содержит ссылки на сертификаты, по которым нужно получить данные.
//
// Возвращаемое значение:
//  Массив - Массив данных сертификатов в виде структур.
//
Функция ДанныеСертификатов(Сертификаты) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛОЖЬ КАК ПарольПолучен,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
	|	Сертификаты.Ссылка КАК Сертификат,
	|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
	|	Сертификаты.Отпечаток КАК Отпечаток,
	|	Сертификаты.ДействителенДо КАК ДействителенДо,
	|	Сертификаты.ПользовательОповещенОСрокеДействия КАК ПользовательОповещенОСрокеДействия
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|ГДЕ
	|	Сертификаты.Ссылка В (&Сертификаты)";
	Запрос.УстановитьПараметр("Сертификаты", Сертификаты);
	ВыборкаСертификаты = Запрос.Выполнить().Выбрать();
	
	ДанныеСертификатов = Новый Массив;
	Пока ВыборкаСертификаты.Следующий() Цикл
		ДанныеСертификата = Новый Структура("Сертификат, ДвоичныеДанныеСертификата, ЗапомнитьПарольКСертификату,
			|ПарольПользователя, ПарольПолучен, Отпечаток, ДействителенДо, ПользовательОповещенОСрокеДействия");
		ЗаполнитьЗначенияСвойств(ДанныеСертификата, ВыборкаСертификаты);
		ДанныеСертификата.ДвоичныеДанныеСертификата = ВыборкаСертификаты.ДанныеСертификата.Получить();
		ДанныеСертификатов.Добавить(ДанныеСертификата);
	КонецЦикла;
	
	Возврат ДанныеСертификатов;

КонецФункции 

// Получает двоичные данные сертификатов по настройке обмена
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
// 
// Возвращаемое значение:
//  Массив - содержит данные доступных сертификатов настройки обмена
//    * Структура - данные сертификата:
//         * СертификатСсылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат
//         * ДанныеСертификата - ДвоичныеДанные - данные сертификата.
//
Функция ДанныеСертификатовПоНастройкеОбмена(Знач НастройкаОбмена) Экспорт
	
	МассивВозврата = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Ссылка КАК Ссылка,
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.ДанныеСертификата КАК ДанныеСертификата
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыПодписейОрганизации
	|ГДЕ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка = &НастройкаОбмена
	|	И &ПроверкаПользователя";
	
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
			"НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)");
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
	КонецЕсли;
	
	ВыборкаСертификатовДанные = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСертификатовДанные.Следующий() Цикл
		ДанныеСертификата = Новый Структура();
		ДанныеСертификата.Вставить("СертификатСсылка", ВыборкаСертификатовДанные.Ссылка);
		ДанныеСертификата.Вставить("ДвоичныеДанныеСертификата", ВыборкаСертификатовДанные.ДанныеСертификата.Получить());
		ДанныеСертификата.Вставить("ПарольСертификата", Неопределено);
		МассивВозврата.Добавить(ДанныеСертификата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает отдельные свойства сертификата в формате X.509 в соответствие с https://tools.ietf.org/html/rfc5280.
//
// Параметры:
//   ДанныеСертификата - ДвоичныеДанные - данные сертификата в формате X.509.
// Возвращаемое значение:
//   Структура - свойства сертификата.
//     Размер                  - Число - размер файла в байтах.
//     Версия                  - Число - версия формата сертификата, 0 - v1, 1 - v2, 2 - v3.
//     СерийныйНомер           - ДвоичныеДанные - серийный номер сертификата.
//     АлгоритмПубличногоКлюча - Строка - "GOST R 34.10-2001", "GOST R 34.10-2012-256", "GOST R 34.10-2012-512"
//                                        или OID нераспознанного алгоритма.
//
Функция СвойстваСертификатаКриптографии(Знач ДанныеСертификата) Экспорт
	
	СвойстваСертификата = Новый Структура;
	СвойстваСертификата.Вставить("Размер", 0);
	СвойстваСертификата.Вставить("Версия", 0);
	СвойстваСертификата.Вставить("СерийныйНомер");
	СвойстваСертификата.Вставить("АлгоритмПубличногоКлюча", "");
	
	СвойстваСертификата.Размер = ДанныеСертификата.Размер();
	
	Если НЕ ЗначениеЗаполнено(СвойстваСертификата.Размер) Тогда
		Возврат СвойстваСертификата;
	КонецЕсли;
	
	ОбъектЧтениеДанных = Новый ЧтениеДанных(ДанныеСертификата);
	Попытка
		// https://tools.ietf.org/html/rfc5280#section-4
		СвойстваБлока = ПрочитатьСвойстваБлока(ОбъектЧтениеДанных, СвойстваСертификата.Размер);
		Если СвойстваБлока.Класс <> "UNIVERSAL" ИЛИ СвойстваБлока.Тег <> 16 Тогда // Certificate ::= SEQUENCE...
			ОбъектЧтениеДанных.Закрыть();
			Возврат СвойстваСертификата;
		КонецЕсли;
		
		СвойстваБлока = ПрочитатьСвойстваБлока(ОбъектЧтениеДанных, СвойстваСертификата.Размер);
		Если СвойстваБлока.Класс <> "UNIVERSAL" ИЛИ СвойстваБлока.Тег <> 16 Тогда // TBSCertificate ::= SEQUENCE...
			ОбъектЧтениеДанных.Закрыть();
			Возврат СвойстваСертификата;
		КонецЕсли;
		
		СвойстваБлока = ПрочитатьСвойстваБлока(ОбъектЧтениеДанных, СвойстваСертификата.Размер);
		Если СвойстваБлока.Класс <> "UNIVERSAL" ИЛИ СвойстваБлока.Тег <> 2 Тогда
			Если СвойстваБлока.Класс <> "CONTEXT-SPECIFIC" ИЛИ СвойстваБлока.Тег <> 0 Тогда // version [0] EXPLICIT Version DEFAULT v1
				ОбъектЧтениеДанных.Закрыть();
				Возврат СвойстваСертификата;
			КонецЕсли;
			
			СвойстваБлока = ПрочитатьСвойстваБлока(ОбъектЧтениеДанных, СвойстваСертификата.Размер);
		КонецЕсли;
		Если СвойстваБлока.Класс <> "UNIVERSAL" ИЛИ СвойстваБлока.Тег <> 2 Тогда // Version ::= INTEGER {v1(0), v2(1), v3(2)}
			ОбъектЧтениеДанных.Закрыть();
			Возврат СвойстваСертификата;
		КонецЕсли;
		
		ВерсияСертификата = ПрочитатьЦелоеЧисло(ОбъектЧтениеДанных, СвойстваБлока);
		Если ВерсияСертификата < 0 ИЛИ ВерсияСертификата > 2 Тогда
			ОбъектЧтениеДанных.Закрыть();
			Возврат СвойстваСертификата;
		КонецЕсли;
		СвойстваСертификата.Версия = ВерсияСертификата;
		
		СвойстваБлока = ПрочитатьСвойстваБлока(ОбъектЧтениеДанных, СвойстваСертификата.Размер);
		СвойстваСертификата.СерийныйНомер = ПрочитатьДвоичныеДанные(ОбъектЧтениеДанных,
			СвойстваБлока); // serialNumber CertificateSerialNumber ::= INTEGER
		
		СвойстваБлока = ПрочитатьСвойстваБлока(ОбъектЧтениеДанных, СвойстваСертификата.Размер);
		Если СвойстваБлока.Класс <> "UNIVERSAL" ИЛИ СвойстваБлока.Тег <> 16 Тогда // signature AlgorithmIdentifier = SEQUENCE {...}
			ОбъектЧтениеДанных.Закрыть();
			Возврат СвойстваСертификата;
		КонецЕсли;
		ПропуститьБлок(ОбъектЧтениеДанных, СвойстваБлока.РазмерБлока);
		
		СвойстваБлока = ПрочитатьСвойстваБлока(ОбъектЧтениеДанных, СвойстваСертификата.Размер);
		Если СвойстваБлока.Класс <> "UNIVERSAL" ИЛИ СвойстваБлока.Тег <> 16 Тогда // issuer RDNSequence ::= SEQUENCE {...}
			ОбъектЧтениеДанных.Закрыть();
			Возврат СвойстваСертификата;
		КонецЕсли;
		ПропуститьБлок(ОбъектЧтениеДанных, СвойстваБлока.РазмерБлока);
		
		СвойстваБлока = ПрочитатьСвойстваБлока(ОбъектЧтениеДанных, СвойстваСертификата.Размер);
		Если СвойстваБлока.Класс <> "UNIVERSAL" ИЛИ СвойстваБлока.Тег <> 16 Тогда // validity Validity ::= SEQUENCE {...}
			ОбъектЧтениеДанных.Закрыть();
			Возврат СвойстваСертификата;
		КонецЕсли;
		ПропуститьБлок(ОбъектЧтениеДанных, СвойстваБлока.РазмерБлока);
		
		СвойстваБлока = ПрочитатьСвойстваБлока(ОбъектЧтениеДанных, СвойстваСертификата.Размер);
		Если СвойстваБлока.Класс <> "UNIVERSAL" ИЛИ СвойстваБлока.Тег <> 16 Тогда // subject RDNSequence ::= SEQUENCE {...}
			ОбъектЧтениеДанных.Закрыть();
			Возврат СвойстваСертификата;
		КонецЕсли;
		ПропуститьБлок(ОбъектЧтениеДанных, СвойстваБлока.РазмерБлока);
		
		СвойстваБлока = ПрочитатьСвойстваБлока(ОбъектЧтениеДанных, СвойстваСертификата.Размер);
		Если СвойстваБлока.Класс <> "UNIVERSAL" ИЛИ СвойстваБлока.Тег <> 16 Тогда // subjectPublicKeyInfo SubjectPublicKeyInfo ::= SEQUENCE...
			ОбъектЧтениеДанных.Закрыть();
			Возврат СвойстваСертификата;
		КонецЕсли;
		
		СвойстваБлока = ПрочитатьСвойстваБлока(ОбъектЧтениеДанных, СвойстваСертификата.Размер);
		Если СвойстваБлока.Класс <> "UNIVERSAL" ИЛИ СвойстваБлока.Тег <> 16 Тогда // algorithm AlgorithmIdentifier = SEQUENCE...
			ОбъектЧтениеДанных.Закрыть();
			Возврат СвойстваСертификата;
		КонецЕсли;
		
		АлгоритмПубличногоКлюча = ПрочитатьAlgorithmIdentifier(ОбъектЧтениеДанных, СвойстваСертификата, СвойстваБлока, Истина);
		Если АлгоритмПубличногоКлюча = Неопределено Тогда
			ОбъектЧтениеДанных.Закрыть();
			Возврат СвойстваСертификата;
		КонецЕсли;
		СвойстваСертификата.АлгоритмПубличногоКлюча = АлгоритмПубличногоКлюча;
	Исключение
		ШаблонСообщения = НСтр("ru = 'При чтении данных сертификата подписи произошла ошибка:
								|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Чтение данных сертификата подписи'");
		ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	ОбъектЧтениеДанных.Закрыть();
	
	Возврат СвойстваСертификата;
	
КонецФункции

#КонецОбласти

#Область НастройкаОбмена

// Проверяет возможность отправки документа в банк
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена
//  ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа
//  ТребуетсяПодпись - Булево - (возвращаемый параметр) данный вид документа необходимо подписывать
// 
// Возвращаемое значение:
//  Булево - признак поддержки вида электронного документа.
//
Функция ЕстьПоддержкаВидаЭД(Знач НастройкаОбмена, Знач ВидЭД, ТребуетсяПодпись = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|ГДЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	|	И НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка = &НастройкаОбмена";
	
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Результат = Запрос.Выполнить();
	ТребуетсяПодпись = ОбменСБанкамиСлужебный.ПодписыватьВидЭД(НастройкаОбмена, ВидЭД);
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Возвращает параметры обмена с банком по настройке.
//
// Параметры:
//  НастройкаОбмена	 - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
// 
// Возвращаемое значение:
// Структура - параметры настройки, содержит следующие элементы:
//    * ПоследняяДатаПолученияЭД - Дата - дата последнего получения документов.
//
Функция ПараметрыОбменаСБанком(НастройкаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	Возврат РегистрыСведений.ПараметрыОбменСБанками.Получить(Отбор);
	
КонецФункции

// Получает список действующих настроек обмена с банками. Если параметры не переданы, то возвращает все настройки.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация в настройке;
//  Банк  - ОпределяемыйТип.БанкОбменСБанками - банк в настройке.
//
// Возвращаемое значение:
//   Массив - содержит ссылки на справочник НастройкиОбменСБанками.
//
Функция НастройкиОбмена(Организация, Банк) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|ГДЕ
	|	ИСТИНА
	|	И НЕ НастройкиОбменСБанками.Недействительна
	|	И НЕ НастройкиОбменСБанками.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА", "НастройкиОбменСБанками.Организация = &Организация
														|	И НастройкиОбменСБанками.Банк = &Банк");
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Банк", Банк);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получает постоянные параметры обмена с банком.
//
// Параметры:
//   Банк - ОпределяемыйТип.БанкОбменСБанками - банк, для которого идет поиск настроек;
//   ВключитьФО - Булево - признак принудительного включения функциональной опции обмена с банками;
//   ЕстьПравоСозданияНастройкиЭДО - Булево - признак наличия у пользователя права создания настройки ЭДО.
//
// Возвращаемое значение:
//   Структура - параметры обмена, содержит поля:
//      * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - используемая программа обмена с банком;
//      * СпособАутентификации - Строка - способ аутентификации при получении настроек с сервера банка;
//      * АдресСервера - Строка - адрес ресурса банка для автоматического получения настроек обмена.
//      * Проект - Строка - список поддерживаемых проектов, перечисленных через запятую.
//      * ИдентификаторВК - Строка - идентификатор используемой банком внешней компоненты.
//   Неопределено - параметры не найдены.
//
Функция ПоставляемыеНастройкиОбмена(Банк, ВключитьФО = Ложь, ЕстьПравоСозданияНастройкиЭДО = Ложь) Экспорт
	
	ЕстьПравоСозданияНастройкиЭДО = ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОбменСБанками);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВключитьФО Тогда
		ИспользуетсяОбменСБанком = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции(
			"ИспользоватьОбменСБанками");
		Если НЕ ИспользуетсяОбменСБанком Тогда
			Константы.ИспользоватьОбменСБанками.Установить(Истина);
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
	КонецЕсли;

	Макет = ОбменСБанкамиСлужебныйПовтИсп.СписокБанков();
	
	БИКБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	
	Для Индекс = 2 По КоличествоЗаписей Цикл
		БИК = Макет.Область(Индекс, 2).Текст;
		Если БИК <> БИКБанка Тогда
			Продолжить;
		КонецЕсли;
		ВариантПодключения = Макет.Область(Индекс, 3).Текст;
		СпособАутентификации = Макет.Область(Индекс, 4).Текст;
		Если ВариантПодключения = "СинхронныйОбмен" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн;
		ИначеЕсли ВариантПодключения = "АсинхронныйОбмен" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
		ИначеЕсли ВариантПодключения = "ДополнительнаяОбработка" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку;
		ИначеЕсли ВариантПодключения = "Сбербанк" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
		ИначеЕсли ВариантПодключения = "ОбменЧерезВК" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК;
		КонецЕсли;
		
		Настройки = Новый Структура();
		Настройки.Вставить("ПрограммаБанка", ПрограммаБанка);
		Настройки.Вставить("СпособАутентификации", СпособАутентификации);
		Настройки.Вставить("АдресСервера", Макет.Область(Индекс, 5).Текст);
		Настройки.Вставить("АдресСтраницыБанка", Макет.Область(Индекс, 7).Текст);
		Настройки.Вставить("Проект", Макет.Область(Индекс, 8).Текст);
		Настройки.Вставить("АдресИнструкции", Макет.Область(Индекс, 9).Текст);
		Настройки.Вставить("ИдентификаторВК", Макет.Область(Индекс, 10).Текст);
		Прервать
	КонецЦикла;

	Возврат Настройки;
	
КонецФункции

// Возвращает параметры обмена для указанного вида электронного документа.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена.
//  ВидЭД- ПеречислениеСсылка.ВидыЭДОбменСБанками  - вид электронного документа.
// 
// Возвращаемое значение:
//  Структура - структура, содержащая параметры, необходимые для выполнения обмена электронными документами:
//    * ИдентификаторОрганизации - Строка - уникальный идентификатор отправителя в обмене электронными документами;
//    * ИспользуетсяКриптография - Булево - Истина, если при обмене электронными документами используется криптография;
//    * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - тип банковской программы;
//    * АутентификацияПоСертификату - Булево - если Истина, аутентификация на сервере банка будет производится с 
//          использованием закрытой части ключа электронной подписи;
//    * ПометкаУдаления - Булево - признак пометки на удаление;
//    * АдресСервера - Строка - адрес сервера, используемого для обмена;
//    * Недействительна - Булево - если Истина, то настройка не используется;
//    * ВерсияФормата - Строка - версия формата обмена с банком;
//    * ТребуетсяПодпись - Булево - признак необходимости подписания электронных документов перед отправкой;
//    * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания - маршрут подписания электронного документа;
//    * ИспользуемыеСертификаты - Массив - сертификаты, указанные в настройке обмена с банком;
//    * ИмяВнешнегоМодуля - Строка - название используемого внешнего модуля.
//    * Организация - ОпределяемыйТип.Организация - организация настройки обмена
//    * Банк - ОпределяемыйТип.БанкОбменСБанками - банк настройки обмена.
//
Функция ПараметрыОбменаПоВидуЭД(Знач НастройкаОбмена, Знач ВидЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНастройкиОбмена = Новый Структура;
	РеквизитыНастройкиОбмена.Вставить("ИдентификаторОрганизации", "");
	РеквизитыНастройкиОбмена.Вставить("ИспользуетсяКриптография", Ложь);
	РеквизитыНастройкиОбмена.Вставить("ПрограммаБанка", Неопределено);
	РеквизитыНастройкиОбмена.Вставить("АутентификацияПоСертификату", Ложь);
	РеквизитыНастройкиОбмена.Вставить("ПометкаУдаления", Ложь);
	РеквизитыНастройкиОбмена.Вставить("АдресСервера", "");
	РеквизитыНастройкиОбмена.Вставить("Недействительна", Ложь);
	РеквизитыНастройкиОбмена.Вставить("ВерсияФормата", "");
	РеквизитыНастройкиОбмена.Вставить("ИмяВнешнегоМодуля");
	РеквизитыНастройкиОбмена.Вставить("Организация");
	РеквизитыНастройкиОбмена.Вставить("Банк");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	ТекстВыборки =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(НастройкиОбменаПоВидамДокументов.ИспользоватьЭП, ЛОЖЬ) КАК ТребуетсяПодпись,
	|	ЕСТЬNULL(НастройкиОбменаПоВидамДокументов.МаршрутПодписания, НЕОПРЕДЕЛЕНО) КАК МаршрутПодписания,
	|	НастройкиОбменаОбщие.СертификатыПодписейОрганизации.(
	|		Ссылка,
	|		НомерСтроки,
	|		СертификатЭП
	|	) КАК СертификатыПодписей";
	ТекстИсточников = "
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменаОбщие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменаПоВидамДокументов
	|		ПО НастройкиОбменаПоВидамДокументов.Ссылка = НастройкиОбменаОбщие.Ссылка
	|			И НастройкиОбменаПоВидамДокументов.ИсходящийДокумент = &ВидЭД
	|ГДЕ
	|	НастройкиОбменаОбщие.Ссылка = &НастройкаОбмена";
	Для Каждого РеквизитНастройки Из РеквизитыНастройкиОбмена Цикл
		ТекстВыборки = ТекстВыборки + ",
		|	НастройкиОбменаОбщие." + РеквизитНастройки.Ключ;
	КонецЦикла;
	РеквизитыНастройкиОбмена.Вставить("ТребуетсяПодпись", Ложь);
	РеквизитыНастройкиОбмена.Вставить("МаршрутПодписания", Неопределено);
	РеквизитыНастройкиОбмена.Вставить("ИспользуемыеСертификаты", Новый Массив);
	
	Запрос.Текст = ТекстВыборки + ТекстИсточников;
	ВыборкаНастроек = Запрос.Выполнить().Выбрать();
	Если ВыборкаНастроек.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыНастройкиОбмена, ВыборкаНастроек);
		
		ИспользуемыеСертификаты = Новый Массив;
		ВыборкаСертификатов = ВыборкаНастроек.СертификатыПодписей.Выбрать();
		Пока ВыборкаСертификатов.Следующий() Цикл
			ИспользуемыеСертификаты.Добавить(ВыборкаСертификатов.СертификатЭП);
		КонецЦикла;
		РеквизитыНастройкиОбмена.ИспользуемыеСертификаты = ИспользуемыеСертификаты;
	КонецЕсли;
	
	Возврат РеквизитыНастройкиОбмена;
	
КонецФункции

// Определяет, есть поддержка вида электронного документа в конфигурации
//
// Параметры:
//  ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа.
// 
// Возвращаемое значение:
//  Булево - если Истина, то в конфигурации поддерживается данный вид документа.
//
Функция ЕстьПоддержкаВидаЭДВКонфигурации(Знач ВидЭД) Экспорт
	
	АктуальныеВидыЭД = ОбменСБанкамиСлужебныйПовтИсп.АктуальныеВидыЭД();
	Возврат АктуальныеВидыЭД.Найти(ВидЭД) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область Письма

// Возвращает количество непрочитанных писем
// 
// Возвращаемое значение:
//  Структура - состояние писем с банками
//    * ЕстьНастройка - Булево - в информационной базе есть доступная настройка обмена с письмами
//    * КоличествоНепрочитанных - Число - количество непрочитанных писем.
//    * ЕстьПравоЧтенияДанных - Булево - возвращает право чтения электронных документов для текущего пользователя.
//
Функция ТекущееСостояниеПисемСБанками() Экспорт
	
	ЕстьПравоЧтенияДанных = ПравоЧтенияДанных();
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ЕстьНастройка", Ложь);
	СтруктураВозврата.Вставить("КоличествоНепрочитанных", 0);
	СтруктураВозврата.Вставить("ЕстьПравоЧтенияДанных", ЕстьПравоЧтенияДанных);
	
	Если НЕ ЕстьПравоЧтенияДанных Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|ГДЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.Письмо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ВложенныйЗапрос.Ссылка) КАК КоличествоНепрочитанных
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПисьмоОбменСБанками.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПисьмоОбменСБанками КАК ПисьмоОбменСБанками
	|	ГДЕ
	|		ПисьмоОбменСБанками.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|		И НЕ ПисьмоОбменСБанками.Прочитано
	|		И НЕ ПисьмоОбменСБанками.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПисьмоОбменСБанками.Ссылка
	|	ИЗ
	|		Документ.ПисьмоОбменСБанками КАК ПисьмоОбменСБанками
	|	ГДЕ
	|		ПисьмоОбменСБанками.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.ОтклоненБанком), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.ЧастичноПодписан), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.НеПодтвержден))
	|		И НЕ ПисьмоОбменСБанками.ПометкаУдаления) КАК ВложенныйЗапрос";
	
	Результат = Запрос.ВыполнитьПакет();
	Настройки = Результат[0].Выбрать();
	СтруктураВозврата.ЕстьНастройка = Настройки.Следующий();
	Количество = Результат[1].Выбрать();
	Если Количество.Следующий() Тогда
		СтруктураВозврата.КоличествоНепрочитанных = Количество.КоличествоНепрочитанных;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает реквизиты основания письма
//
// Параметры:
//  Основание - ОпределяемыйТип.ВладелецОбменСБанками - ссылка на основание письма.
// 
// Возвращаемое значение:
//  Структура - реквизиты основания. Содержит поля:
//   * Организация - ОпределяемыйТип.Организация - ссылка на организацию
//   * Банк - ОпределяемыйТип.БанкОбменСБанками - ссылка на банк.
//   * Счет - ОпределяемыйТип.СчетОрганизацииОбменСБанками - ссылка на банковский счет организации.
//
Функция РеквизитыОснованияПисьма(Знач Основание) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура("Организация, Банк, Счет");
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПисьмоОбменСБанками") Тогда
		НазваниеРеквизитаСчет = "СчетОрганизации";
		НазваниеРеквизитаОрганизация = "Организация"
	Иначе
		НазваниеРеквизитаСчет = ОбменСБанкамиСлужебный.ИмяПрикладногоРеквизита("ПлатежноеПоручение.СчетОрганизации");
		НазваниеРеквизитаОрганизация = ОбменСБанкамиСлужебный.ИмяПрикладногоРеквизита("ПлатежноеПоручение.Организация");
	КонецЕсли;
	
	ЗначенияРеквизитовОснование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Основание, НазваниеРеквизитаСчет + "," + НазваниеРеквизитаОрганизация);
		
	ЗначенияРеквизитовОснование.Свойство(НазваниеРеквизитаОрганизация, ВозвращаемоеЗначение.Организация);
	ЗначенияРеквизитовОснование.Свойство(НазваниеРеквизитаСчет, ВозвращаемоеЗначение.Счет);
	
	НазваниеРеквизитаБанк = ОбменСБанкамиСлужебный.ИмяПрикладногоРеквизита("БанковскийСчетОрганизации.Банк");
	
	ВозвращаемоеЗначение.Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ВозвращаемоеЗначение.Счет, НазваниеРеквизитаБанк);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область Сбербанк

// Добавляет новые сертификаты Сбербанка в настройку обмена.
// 
// Параметры:
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена
//   ДанныеКриптопрофиля - Строка - криптопрофиль организации, полученный из банка,
Процедура СохранитьСертификатыСбербанка(Знач НастройкаОбмена, Знач ДанныеКриптопрофиля) Экспорт

	ДанныеСертификатов = ПрочитатьСертификатыСбербанка(ДанныеКриптопрофиля, Неопределено, , , Истина);

	ТаблицаДополнения = Новый ТаблицаЗначений();
	ТаблицаДополнения.Колонки.Добавить("СерийныйНомер");
	ТаблицаДополнения.Колонки.Добавить("Наименование");
	ТаблицаДополнения.Колонки.Добавить("ДвоичныеДанные");
	ТаблицаДополнения.Колонки.Добавить("ДатаОкончания");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	НастройкиОбменСБанкамиСертификатыБанка.СерийныйНомер
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.СертификатыБанка КАК НастройкиОбменСБанкамиСертификатыБанка
		|ГДЕ
		|	НастройкиОбменСБанкамиСертификатыБанка.Ссылка = &НастройкаОбмена";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	СерийныеНомераСертификатовВНастройке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СерийныйНомер");

	Для Каждого Элемент Из ДанныеСертификатов.СертификатыБанка Цикл
		ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(Элемент);
		СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		СвойстваСертификата = ЭлектроннаяПодпись.СвойстваСертификата(СертификатКриптографии);
		СерийныйНомер = НРег(СтрЗаменить(Строка(СвойстваСертификата.СерийныйНомер), " ", ""));
		Если СерийныеНомераСертификатовВНастройке.Найти(СерийныйНомер) = Неопределено Тогда
			НовЗапись = ТаблицаДополнения.Добавить();
			НовЗапись.ДвоичныеДанные = ДвоичныеДанныеСертификата;
			НовЗапись.СерийныйНомер = СерийныйНомер;
			НовЗапись.Наименование = СвойстваСертификата.Представление;
			НовЗапись.ДатаОкончания = СвойстваСертификата.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаДополнения.Количество() Тогда

		НастройкаОбменаОбъект = НастройкаОбмена.ПолучитьОбъект();
		Для Каждого СтрокаТаблицы Из ТаблицаДополнения Цикл
			НовСтрока = НастройкаОбменаОбъект.СертификатыБанка.Добавить();
			НовСтрока.Данные = Новый ХранилищеЗначения(СтрокаТаблицы.ДвоичныеДанные, Новый СжатиеДанных(9));
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТаблицы);
		КонецЦикла;

		НастройкаОбменаОбъект.Записать();

	КонецЕсли;

КонецПроцедуры

// Удаляет идентификатор из регистра, чтобы в дальнейшем не происходил запрос состояния по нему.
//
// Параметры:
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена со сбербанком;
//   Идентификатор - Строка - идентификатор запроса;
//   ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа.
//
Процедура УдалитьИдентификаторЗапроса(Знач НастройкаОбмена, Знач Идентификатор) Экспорт

	НаборЗаписей = РегистрыСведений.ТикетыОбменСБанками.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаОбмена.Установить(НастройкаОбмена);
	НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Формирует соответствие установленных на ЭД подписей и данных сертификатов.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена
//  ИмяМодуля - Строка - (возвращаемый параметр) идентификатор внешней компоненты.
//
// Возвращаемое значение:
// Соответствие - содержит строки данных установленных подписей и двоичных данных сертификатов.
//
Функция ДанныеУстановленныхПодписейИСертификатов(СообщениеОбмена, ИмяМодуля) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
	НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "НастройкаОбмена");
	ИмяМодуля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИмяВнешнегоМодуля");
	Для каждого ЭлементКоллекции Из УстановленныеПодписи Цикл
		СтрокаЭП = Base64Строка(ЭлементКоллекции.Подпись);
		СтрокаЭП = СтрЗаменить(СтрокаЭП, Символы.ПС, "");
		СтрокаЭП = СтрЗаменить(СтрокаЭП, Символы.ВК, "");
		СоответствиеВозврата.Вставить(СтрокаЭП, ЭлементКоллекции.Сертификат.Получить());
	КонецЦикла;
	
	Возврат СоответствиеВозврата;

КонецФункции

// Возвращает строку подписанных данных в формате Base64.
//
// Параметры
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на документ сообщения.
//
// Возвращаемое значение:
//   Строка   - данные в формате base64.
//
Функция ПодписанныеДанныеBase64(СообщениеОбмена) Экспорт
	
	СлужебноеСообщение = ОбменСБанкамиСлужебный.ПодчиненноеСообщениеОбмена(
		СообщениеОбмена, Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
	ДанныеЭД = ДвоичныеДанныеПрисоединенногоФайла(СлужебноеСообщение);
	Возврат Base64Строка(ДанныеЭД);
	
КонецФункции

// Подготавливает структуру данных для отправки в Сбербанк.
//
// Параметры:
//   МассивСообщенийОбмена - Массив из ДокументСсылка.СообщениеОбменСБанками - ссылка на отправляемое сообщение.
//
// Возвращаемое значение:
//   Соответствие - содержит:
//    * Ключ - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку ЭДО с банком;
//    * Значение - Массив из ДокументСсылка.СообщениеОбменСБанками - ссылка на отправляемое сообщение.
//
Функция ДанныеДляОтправкиВСбербанк(Знач МассивСообщенийОбмена) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СообщениеОбменСБанками.Ссылка,
	               |	СообщениеОбменСБанками.НастройкаОбмена КАК НастройкаОбмена
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.Ссылка В(&МассивСообщенийОбмена)
	               |	И СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Подписан)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НастройкаОбмена";
	
	Запрос.УстановитьПараметр("МассивСообщенийОбмена", МассивСообщенийОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НастройкаОбмена") Цикл
		МассивЭД = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивЭД.Добавить(Выборка.Ссылка);
		КонецЦикла;
		СоответствиеВозврата.Вставить(Выборка.НастройкаОбмена, МассивЭД);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Формирует текст запроса сертификатов Сбербанка
// 
// Возвращаемое значение:
// 	Неопределено, Строка - текст запроса для отправки в банк.
Функция ТекстЗапросаСертификатовСбербанк() Экспорт
	
	Попытка
		ТекстОшибки = "";
		Request = ОбменСБанкамиСлужебный.RequestСбербанк("00000000-0000-0000-0000-000000000000", ТекстОшибки);
		
		ЗапросСертификатов = ОбъектТипаCML(ФабрикаXDTO, "Request.CryptoIncoming.Certificates", "http://bssys.com/upg/request");
			
		ЗаполнитьСвойствоXDTO(ЗапросСертификатов, "client", "1", , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЗапросСертификатов, "bank", "1", , ТекстОшибки);
		
		ЗапросКриптографии = ОбъектТипаCML(	ФабрикаXDTO, "Request.CryptoIncoming", "http://bssys.com/upg/request");

		ЗаполнитьСвойствоXDTO(ЗапросКриптографии, "Certificates", ЗапросСертификатов, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Request, "CryptoIncoming", ЗапросКриптографии, Истина, ТекстОшибки);
		
		Request.Проверить();
			
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку("UTF-8");
		Запись.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(Запись, Request);
		ТекстЗапроса = Запись.Закрыть();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Формирование запроса персональных данных организации'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Запускает фоновое задание отправки данных в Сбербанк
//
// Параметры:
//  НаименованиеФоновогоЗадания - Строка - Наименование фонового задания
//  НазваниеМетода - Строка - название экспортной процедуры, которая будет вызвана в ОбменСБанкамиСлужебный
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком
//  СсылкаНаОбъект - ЛюбаяСсылка - ссылка на отправляемый объект
// 
// Возвращаемое значение:
//  Структура - структура возврата описана в ДлительныеОперации.ВыполнитьВФоне. Также добавлено 1 поле
//     * ИмяВнешнегоМодуля - Строка - название используемого внешнего модуля Сбербанка.
//
Функция ЗапускЗаданияОтправкиДанныхВСбербанк(Знач НаименованиеФоновогоЗадания, Знач НазваниеМетода, Знач НастройкаОбмена, Знач СсылкаНаОбъект) Экспорт
	
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	Если ТекущаяСессия = Неопределено Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ТребуетсяАутентификация", Истина);
		ИмяВнешнегоМодуля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИмяВнешнегоМодуля");
		СтруктураВозврата.Вставить("ИмяВнешнегоМодуля", ИмяВнешнегоМодуля);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыОперации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОперации.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
		
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный." + НазваниеМетода, ПараметрыОперации, ПараметрыВыполнения);
	
	Результат.Вставить("ИмяВнешнегоМодуля", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИмяВнешнегоМодуля"));
	
	Возврат Результат
	
КонецФункции

// Получает список типов писем из ответа Сбербанка.
//
// Параметры:
//  ОтветБанка - Строка - данные, полученные из банка.
//  УникальныйИдентификатор - УникальныйИдентификатор - адрес для временного хранилища.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
// 
// Возвращаемое значение:
//  Строка - адрес временного хранилища, содержащего таблицу типов писем.
//
Функция ТипыПисемСбербанк(Знач ОтветБанка, Знач УникальныйИдентификатор, Знач НастройкаОбмена) Экспорт
	
	ВидОперации = НСтр("ru = 'Чтение полученных данных из банка'");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОтветБанка);
	Попытка
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЧтениеXML.Закрыть();
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка'");
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка
								|Текст ошибки: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки);
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЭД.Свойства().Получить("Errors") <> Неопределено Тогда
		ТекстСообщения = "";
		ОбработатьИзвещениеСОшибкойСбербанк(ОтветБанка, ТекстСообщения);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	postFix = ЗначениеСвойстваXDTO(ЭД, "Dict.Step.postFix");
	
	Если postFix = Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ТекстСообщения = НСтр("ru = 'Получены некорректные данные из банка'");
		ТекстОшибки = НСтр("ru = 'Отсутствуют данные о типах писем.
								|Файл данных: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ЭД, ИмяФайла, Ложь, "UTF-8");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	ИспользуетсяТестовыйРежим = Ложь;
	ОбменСБанкамиПереопределяемый.ПроверитьИспользованиеТестовогоРежима(ИспользуетсяТестовыйРежим);
	Если ИспользуетсяТестовыйРежим Тогда
		АдресСервера = "https://edupirsms.testsbi.sberbank.ru:9443";
	Иначе
		АдресСервера = "https://upgsbi.sberbank.ru:9443";
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Результат = ОбменСБанкамиСлужебный.ОтправитьPOSTЗапрос(
		АдресСервера, "sbns-upg" + postFix, Заголовки, Неопределено, , , НастройкаОбмена);
		
	Если НЕ Результат.Статус Тогда
		Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'При получении данных из банка произошла ошибка (%1). %2'");
			ТекстОшибки = СтрШаблон(Шаблон, Результат.КодСостояния, Результат.СообщениеОбОшибке);
		Иначе
			ТекстОшибки = Результат.СообщениеОбОшибке;
		КонецЕсли;
		ВидОперации = НСтр("ru = 'Получение списка видов писем'");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;

	ЧтениеДанныхАрхив = Новый ЧтениеДанных(Результат.Тело);
	ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог();
	Попытка
		ЧтениеZIP = Новый ЧтениеZIPФайла(ЧтениеДанныхАрхив.ИсходныйПоток());
		ЧтениеZIP.ИзвлечьВсе(ПапкаДляРаспаковки);
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЧтениеZIP, ПапкаДляРаспаковки) Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
		Иначе
			ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
		КонецЕсли;
		ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке ответа банка
										|Подробное представление ошибки:
										|%1'");
		ПодробнаяИнформация = СтрШаблон(ПодробнаяИнформация, ПодробноеПредставлениеОшибки);
		Операция = НСтр("ru = 'Распаковка ответа банка'");
		ОбработатьОшибку(Операция, ПодробнаяИнформация, ТекстСообщения);
		ФайловаяСистема.УдалитьВременныйКаталог(ПапкаДляРаспаковки);
		Возврат Неопределено;
	КонецПопытки;
		
	ЧтениеZIP.Закрыть();

	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьВПамяти = Новый ЗаписьДанных(ПотокВПамяти);
	
	ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*");
	Если ФайлыЭД.Количество() > 0 Тогда
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлыЭД[0].ПолноеИмя);
		ФайловаяСистема.УдалитьВременныйКаталог(ПапкаДляРаспаковки);
	Иначе
		ФайловаяСистема.УдалитьВременныйКаталог(ПапкаДляРаспаковки);
		Операция = НСтр("ru = 'Распаковка ответа банка'");
		ТекстСообщения = НСтр("ru = 'Получены некорректные данные из банка'");
		ОбработатьОшибку(Операция, ТекстСообщения, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	ЗаписьВПамяти.Записать(ДвоичныеДанныеФайла);
	ЗаписьВПамяти.Закрыть();

	ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ПотокВПамяти);
	Попытка
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЧтениеXML.Закрыть();
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка'");
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка
								|Текст ошибки: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки);
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;

	ПараметрыСтроки = Новый КвалификаторыСтроки(150);
	ТаблицаВозврата = Новый ТаблицаЗначений;
	ТаблицаВозврата.Колонки.Добавить("Шаблон", Новый ОписаниеТипов("Строка"));
	ТаблицаВозврата.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , , , ПараметрыСтроки));
	
	Для каждого ЭлементКоллекции Из ЭД.LetterTypeEntry Цикл
		Если ЭлементКоллекции.canSendToUser = "true" И ЭлементКоллекции.systemName <> "NoType" Тогда
			НовСтрока = ТаблицаВозврата.Добавить();
			НовСтрока.Шаблон = ЭлементКоллекции.messageText;
			НовСтрока.Представление = ЭлементКоллекции.messageType;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаВозврата, УникальныйИдентификатор);
	
КонецФункции

// Формирует текст запроса состояния обработки платежных документов для Сбербанка
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//  МассивТикетов - Массив - (возвращаемое значение) массив тикетов, для которых еще не получен ответ из банка.
//    * Строка - единичный тикет.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаСостоянияОбработкиДокументовСбербанк(Знач НастройкаОбмена, МассивТикетов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.ВнешнийИдентификатор КАК ВнешнийИдентификатор
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|		ПО (СостоянияОбменСБанками.СообщениеОбмена = СообщениеОбменСБанками.Ссылка)
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СостоянияОбменСБанками.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИсполнение), ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ТребуетсяПодтверждение))
	|	И НЕ СообщениеОбменСБанками.ВнешнийИдентификатор = """"
	|	И НЕ СообщениеОбменСБанками.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТикетыОбменСБанками.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ТикетыОбменСБанками КАК ТикетыОбменСБанками
	|ГДЕ
	|	ТикетыОбменСБанками.НастройкаОбмена = &НастройкаОбмена";
	
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ИдентификаторыДокументов = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("ВнешнийИдентификатор");
	МассивТикетов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	Если ИдентификаторыДокументов.Количество() Тогда
		ТекстЗапроса = ОбменСБанкамиСлужебный.ТекстЗапросаСостоянияДокументовСбербанк(
			НастройкаОбмена, ИдентификаторыДокументов);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Выполняет необходимые действия для разбора большого пакета, полученного из банка.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ИдентификаторЗапроса - Строка - идентификатор запроса, на который пришел ответ.
//  МассивДанныхПакета - Массив - данные, полученные из банка.
//     * Строка - часть данных большого пакета;
//  МассивНовыхСообщенийОбмена - Массив - массив новых полученных сообщений;
//    * ДокументСсылка.СообщениеОбменСБанками - полученное из банка сообщение.
//
Процедура СохранитьБольшойПакетСбербанк(НастройкаОбмена, ИдентификаторЗапроса, МассивДанныхПакета, МассивНовыхСообщенийОбмена) Экспорт
	
	МассивКаталогов = Новый Массив;
	
	Для Каждого Ответ Из МассивДанныхПакета Цикл
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Ответ);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ДвоичныеДанныеФайла = Base64Значение(ЭД.ResponsePart.Attachment.Body);
		
		ЧтениеДанныхАрхив = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
		ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог();
		Попытка
			ЧтениеZIP = Новый ЧтениеZIPФайла(ЧтениеДанныхАрхив.ИсходныйПоток());
			ЧтениеZIP.ИзвлечьВсе(ПапкаДляРаспаковки);
		Исключение
			Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЧтениеZIP, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
			Иначе
				ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
			КонецЕсли;
			ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке ответа банка
											|Подробное представление ошибки:
											|%1'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ПодробнаяИнформация = СтрШаблон(ПодробнаяИнформация, ПодробноеПредставлениеОшибки);
			Операция = НСтр("ru = 'Распаковка ответа банка'");
			ОбработатьОшибку(Операция, ПодробнаяИнформация, ТекстСообщения, НастройкаОбмена);
			ФайловаяСистема.УдалитьВременныйКаталог(ПапкаДляРаспаковки);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
		ЧтениеZIP.Закрыть();
		
		МассивКаталогов.Добавить(ПапкаДляРаспаковки);
	
	КонецЦикла;

	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьВПамяти = Новый ЗаписьДанных(ПотокВПамяти);
	
	Для Каждого ПапкаДляРаспаковки Из МассивКаталогов Цикл
		
		ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*");
		Если ФайлыЭД.Количество() > 0 Тогда
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлыЭД[0].ПолноеИмя);
			ФайловаяСистема.УдалитьВременныйКаталог(ПапкаДляРаспаковки);
		Иначе
			ФайловаяСистема.УдалитьВременныйКаталог(ПапкаДляРаспаковки);
			ВызватьИсключение НСтр("ru = 'Ошибка при распаковке ответа банка'");
		КонецЕсли;
		ЗаписьВПамяти.Записать(ДвоичныеДанныеФайла);
	КонецЦикла;
	ЗаписьВПамяти.Закрыть();
	
	ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);
	ЧтениеВПамяти = Новый ЧтениеДанных(ПотокВПамяти);
	Ответ = ЧтениеВПамяти.ПрочитатьСимволы();
	
	ОбработатьОтветСбербанка(Ответ, НастройкаОбмена, МассивНовыхСообщенийОбмена, ИдентификаторЗапроса);
	
КонецПроцедуры

// Получает строку для фрод-мониторинга
//
// Параметры:
//    Параметры - Структура - содержит строковые значения параметров фрод-мониторинга.
//
// Возвращаемое значение:
//    Строка - строка фрод-мониторинга.
//
Функция Фрод(Параметры) Экспорт
	
	ФродТип = ФабрикаXDTO.Тип("http://bssys.com/upg", "FraudParams");
	ФродЭл = ФабрикаXDTO.Создать(ФродТип);
	
	ОбменСБанкамиСлужебный.ЗаполнитьФродПараметрыВXDTO(ФродЭл, Параметры);
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.УстановитьСтроку("UTF-8");
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ФродЭл);
	Возврат НоваяЗаписьXML.Закрыть();

КонецФункции

// Подготавливает текст запроса для получения ночной выписки.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  ИдентификаторЗапроса  - Строка - уникальный идентификатор запроса;
//  ИдентификаторОрганизации  - Строка - уникальный идентификатор организации в банковской системе;
//  ДанныеПодписи - Структура - данные электронной подписи, содержит поля:
//                      * ЭП  - Строка - электронная подпись дайджеста;
//                      * СертификатПодписи  - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат подписи.
//                - Неопределено - подпись не используется.
//
// Возвращаемое значение:
// Строка - текст запроса ночной выписки.
//
Функция ТекстЗапросаНочнойВыписки(Знач НастройкаОбмена, Знач ИдентификаторЗапроса, Знач ИдентификаторОрганизации, Знач ДанныеПодписи = Неопределено) Экспорт

	ТекстОшибки = "";
	Request = ОбменСБанкамиСлужебный.RequestСбербанк(ИдентификаторОрганизации, ТекстОшибки, ИдентификаторЗапроса);
	
	Incoming = ОбъектТипаCML(ФабрикаXDTO, "Request.Incoming", "http://bssys.com/upg/request");
	
	ПоследняяВходящаяДата = ПоследняяВходящаяДатаСбербанк(НастройкаОбмена);
	
	Если ЗначениеЗаполнено(ПоследняяВходящаяДата) Тогда
		ЗаполнитьСвойствоXDTO(
			Incoming, "lastIncomingTime", ПоследняяВходящаяДата, , ТекстОшибки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Request, "Incoming", Incoming, Истина, ТекстОшибки);
	
	Если ДанныеПодписи <> Неопределено Тогда
		ХранилищеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДанныеПодписи.СертификатПодписи, "ДанныеСертификата");
		ДвоичныеДанныеСертификата = ХранилищеСертификата.Получить();
		
		ДанныеСертификата = ИнформацияОСертификатеПодписиСбербанк(ДвоичныеДанныеСертификата);
		Если ДанныеСертификата = Неопределено Тогда
			ВызватьИсключение НСтр("ru='Не найден сертификат установленной подписи'");
		КонецЕсли;
		DigitalSign = ОбъектТипаCML(ФабрикаXDTO, "DigitalSign","http://bssys.com/upg/request");
		ЗаполнитьСвойствоXDTO(DigitalSign, "Issuer", ДанныеСертификата.Issuer, Истина);
		СтрокаСерийныйНомер = Строка(ДанныеСертификата.SN);
		СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер," ","");
		ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
		ЗаполнитьСвойствоXDTO(DigitalSign, "Value", ДанныеПодписи.ЭП, Истина);
		Request.Sign.Добавить(DigitalSign);
	КонецЕсли;
	
	Request.Проверить();
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВидОперации = НСтр("ru = 'Формирование запроса новых документов'");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, , НастройкаОбмена);
		ВызватьИсключение НСтр("ru = 'Ошибка формирования запроса ночной выписки'");
	КонецЕсли;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(Запись, Request);
	ТекстЗапроса = Запись.Закрыть();
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Выполняет необходимые действия для разбора ответа банка.
//
// Параметры:
//  Ответ - Строка - текст с ответом;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  МассивНовыхСообщений - Массив - массив новых полученных сообщений
//    * ДокументСсылка.СообщениеОбменСБанками - полученное из банка сообщение;
//  Идентификатор - Строка - идентификатор запроса, на который пришел ответ;
//  КоличествоТомов - Число - (возвращаемое значение)если больше 0, то ответ банка содержит несколько томов.
//  СоздаватьОперацииВыписки - Булево - признак необходимости отражения операций при получении выписки
//
Процедура ОбработатьОтветСбербанка(Знач Ответ, Знач НастройкаОбмена, МассивНовыхСообщений, Знач Идентификатор = Неопределено, КоличествоТомов = 0, СоздаватьОперацииВыписки = Истина) Экспорт
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		УдалитьИдентификаторЗапроса(НастройкаОбмена, Идентификатор);
	КонецЕсли;

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Ответ);
	ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Если ЭД.Свойства().Получить("Errors") <> Неопределено Тогда
		ТекстСообщения = "";
		ОбработатьИзвещениеСОшибкойСбербанк(Ответ, ТекстСообщения, НастройкаОбмена);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ЭД.Свойства().Получить("Tickets") <> Неопределено Тогда
		Если ТипЗнч(ЭД.Tickets.Ticket) = Тип("СписокXDTO") Тогда
			Для Каждого Тикет Из ЭД.Tickets.Ticket Цикл
				ОбменСБанкамиСлужебный.ПрочитатьТикетСбербанка(НастройкаОбмена, Тикет, МассивНовыхСообщений, КоличествоТомов);
			КонецЦикла;
		Иначе
			Тикет = ЭД.Tickets.Ticket;
			ОбменСБанкамиСлужебный.ПрочитатьТикетСбербанка(НастройкаОбмена, Тикет, МассивНовыхСообщений, КоличествоТомов);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Свойства().Получить("Statements") <> Неопределено Тогда
		СохранитьВыпискиСбербанка(ЭД, НастройкаОбмена, МассивНовыхСообщений, СоздаватьОперацииВыписки);
	КонецЕсли;
	
	Если ЭД.Свойства().Получить("LettersFromBank") <> Неопределено Тогда
		СохранитьПисьмаСбербанка(ЭД, НастройкаОбмена, МассивНовыхСообщений);
	КонецЕсли;
	
	Если ЭД.Свойства().Получить("ExchangeMessagesFromBank") <> Неопределено Тогда
		СохранитьПисьмаСбербанка(ЭД, НастройкаОбмена, МассивНовыхСообщений, Истина);
	КонецЕсли;
	
	Если ЭД.Свойства().Получить("Certificates") <> Неопределено Тогда
		СохранитьСертификатыСбербанка(НастройкаОбмена, Ответ);
	КонецЕсли;
	
КонецПроцедуры

// Записывает ошибку в журнал регистрации и возвращает текст сообщения.
//
// Параметры:
//  Ответ - Строка - ответ банка с ошибкой;
//  ТекстСообщения - Строка - сообщение, которое нужно показать пользователю.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//
Процедура ОбработатьИзвещениеСОшибкойСбербанк(
	Знач Ответ,
	ТекстСообщения,
	Знач НастройкаОбмена = Неопределено) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Ответ);
	ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	СсылкаНаОбъект = НастройкаОбмена;
	
	ШаблонСообщения = НСтр("ru = 'Получена ошибка из банка.
								|Код: %1.'");
	Если ТипЗнч(ЭД.Errors.Error) = Тип("СписокXDTO") Тогда
		Для Каждого Error Из ЭД.Errors.Error Цикл
			ТекстСообщения = ТекстСообщения + СтрШаблон(ШаблонСообщения, Error.Code);
			Если Error.Свойства().Получить("Type") Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + Error.Type;
			КонецЕсли;
			Если Error.Свойства().Получить("Desc") Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + Error.Desc;
			КонецЕсли;
			Если Error.Code = "103" Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС
					+ НСтр("ru = 'Возможная причина ошибки: не подключена услуга ""Сбербанк Интеграция"" в личном кабинете.'");
			ИначеЕсли НастройкаОбмена <> Неопределено И ЭД.Свойства().Получить("requestId") <> Неопределено
				И ЗначениеЗаполнено(ЭД.requestId) Тогда
				СообщениеОбмена = ОбменСБанкамиСлужебный.СообщениеОбменаПоИдентификатору(НастройкаОбмена, ЭД.requestId);
				Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
					СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстСообщения);
					ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
					СсылкаНаОбъект = СообщениеОбмена;
				КонецЕсли;
			КонецЕсли;
			ВидОперации = НСтр("ru = 'Отправка данных в банк'");
			ОбработатьОшибку(ВидОперации, ТекстСообщения, , СсылкаНаОбъект);
		КонецЦикла;
	Иначе
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ЭД.Errors.Error.Code);
		Если ЭД.Errors.Error.Свойства().Получить("Type") <> Неопределено Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + ЭД.Errors.Error.Type;
		КонецЕсли;
		Если ЭД.Errors.Error.Свойства().Получить("Desc") <> Неопределено Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + ЭД.Errors.Error.Desc;
		КонецЕсли;
		Если ЭД.Errors.Error.Code = "103" Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС
				+ НСтр("ru = 'Возможная причина ошибки: не подключена услуга ""Сбербанк Интеграция"" в личном кабинете.'") ;
		ИначеЕсли НастройкаОбмена <> Неопределено И ЭД.Свойства().Получить("requestId") <> Неопределено
			И ЗначениеЗаполнено(ЭД.requestId) Тогда
			СообщениеОбмена = ОбменСБанкамиСлужебный.СообщениеОбменаПоИдентификатору(НастройкаОбмена, ЭД.requestId);
			Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
				СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстСообщения);
				ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
				СсылкаНаОбъект = СообщениеОбмена;
			КонецЕсли;
		КонецЕсли;
		ВидОперации = НСтр("ru = 'Отправка данных в банк'");
		ОбработатьОшибку(ВидОперации, ТекстСообщения, , СсылкаНаОбъект);
	КонецЕсли
	
КонецПроцедуры

// Заполняет в схеме подписи и Формирует файл пакета для отправки в банк
//
// Параметры
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - ссылка на сообщение обмена
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком
//  ФродПараметры - Структура - данные для фрод-мониторинга.
//  Логин - Строка - логин пользователя в системе банка.
//
// Возвращаемое значение:
//  Структура - с данными файла или Неопределено.
//
Функция ПакетXMLСбербанка(Знач СообщениеОбмена, Знач НастройкаОбмена, Знач ФродПараметры = Неопределено, Знач Логин = Неопределено) Экспорт

	ДвоичныеДанныеФайла = ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
	
	ОбъектXML = Новый ЧтениеXML;
	ПространствоИмен = "http://bssys.com/upg/request";
	
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);

	Попытка
		
		ОбъектXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
		
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ТекстОшибки = "";
		
		Если ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "PayDocRu") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "PayDocRu", ФродПараметры, ТекстОшибки, Логин);
			
		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "StmtReqType") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "StmtReq", ФродПараметры, ТекстОшибки);

		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "PayDocCur") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "PayDocCur", ФродПараметры, ТекстОшибки);
		
		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "CurrBuy") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "CurrBuy", ФродПараметры, ТекстОшибки);
			
		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "CurrSell") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "CurrSell", ФродПараметры, ТекстОшибки);
			
		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "MandatorySale") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "MandatorySale", ФродПараметры, ТекстОшибки);
			
		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "LetterInBank") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "LetterInBank", ФродПараметры, ТекстОшибки);
			
		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "ExchangeMessagesWithBank") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "ExchangeMessagesWithBank", ФродПараметры, ТекстОшибки);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестный формат файла'");
		КонецЕсли;
		ОбъектXML.Закрыть();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

	Исключение
		ОбъектXML.Закрыть();
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при формировании пакета данных банка'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки + Символы.ПС + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат СтрокаXML;

КонецФункции

// Определяет название бизнес-системы для организации канала с банком.
//
// Возвращаемое значение:
// Строка - название бизнес-системы.
//
Функция НазваниеБизнесСистемыСбербанк() Экспорт
	
	НазваниеБизнесСистемы = """УПШ СББОЛ""";

	ИспользуетсяТестовыйРежим = Ложь;
	ОбменСБанкамиПереопределяемый.ПроверитьИспользованиеТестовогоРежима(ИспользуетсяТестовыйРежим);

	Если ИспользуетсяТестовыйРежим Тогда
		НазваниеБизнесСистемы = "eduPIR_UPG";
	КонецЕсли;
	
	Возврат НазваниеБизнесСистемы;
	
КонецФункции

// Возвращает структуру данных сертификата
//
// Параметры:
// ДвоичныеДанныеСертификата - ДвоичныеДанные - сертификат.
//
// Возвращаемое значение:
//  Структура - содержит данные сертификата.
//
Функция ИнформацияОСертификатеПодписиСбербанк(ДвоичныеДанныеСертификата) Экспорт
	
	СтруктураВозврата = Новый Структура;
	Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		
	Issuer = "EMAILADDRESS=%1, CN=%2, OU=%3, O=%4, C=%5"; 
	Issuer = СтрШаблон(Issuer, Сертификат.Издатель.E,
			Сертификат.Издатель.CN, Сертификат.Издатель.OU, Сертификат.Издатель.O, Сертификат.Издатель.C);
			
	СтруктураВозврата.Вставить("SN", Сертификат.СерийныйНомер);
	СтруктураВозврата.Вставить("Issuer", Issuer);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Добавляет новый сертификат в справочник СертификатыКлючейЭлектроннойПодписиИШифрования.
// 
// Параметры:
//    ДвоичныеДанныеСертификата - ДвоичныеДанные - данные сертификата;
//    Организация - СправочникСсылка.Организации - организация сертификата.
//
// Возвращаемое значение:
//    СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - созданный сертификат.
//
Функция СоздатьСертификатСбербанка(Знач ДвоичныеДанныеСертификата, Знач Организация) Экспорт
	
	НовыйСертификат = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(
		ДвоичныеДанныеСертификата, Организация);
	
	Если ЗначениеЗаполнено(НовыйСертификат) Тогда
		МенеджерЗаписи = РегистрыСведений.СведенияОСертификатахОбменСБанками.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
		МенеджерЗаписи.СертификатЭП = НовыйСертификат;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат НовыйСертификат;
	
КонецФункции

// Определяет наличие установленной подписи по сертификату для сообщения обмена
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена, которое требуется подписать
//  СертификатСсылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат подписи.
// 
// Возвращаемое значение:
//  Булево - если есть такая подпись, то Истина, иначе Ложь.
//
Функция СообщениеСодержитПодписьПоСертификату(СообщениеОбмена, СертификатСсылка) Экспорт
	
	ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭП.Отпечаток
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
	|ГДЕ
	|	ЭП.ПодписанныйОбъект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ПрисоединенныйФайл);
	УстановитьПривилегированныйРежим(Истина);
	МассивОтпечатков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отпечаток");
	ОтпечатокСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СертификатСсылка, "Отпечаток");
	УстановитьПривилегированныйРежим(Ложь);
	Если МассивОтпечатков.Найти(ОтпечатокСертификата) <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Электронный документ %1
									|уже имеет подпись по сертификату %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, СообщениеОбмена, СертификатСсылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СообщениеОбмена);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

// Запускает длительную операцию по генерации SMSСбербанк
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с подтверждаемым электронным документом.
// 
// Возвращаемое значение:
//  Структура - см. описание в ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияГенерацииSMSСбербанк(Знач НастройкаОбмена, Знач СообщениеОбмена) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка запроса генерации SMS в Сбербанк.'");
	
	ПараметрыСинхронизации = Новый Структура;
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("СообщениеОбмена", СообщениеОбмена);
		
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросНаГенерациюSMSСбербанк", ПараметрыСинхронизации, ПараметрыВыполнения);

КонецФункции

// Запускает длительную операцию по отправке SMS в Сбербанк
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - подтверждаемый электронный документ
//  ИдентификаторКриптопрофиля - Строка - идентификатор, полученный из банка
//  SMSКод - Строка - код, введенный пользователем.
// 
// Возвращаемое значение:
//  Структура - см. описание в ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияОтправкиSMSВСбербанк(
		Знач НастройкаОбмена,
		Знач СообщениеОбмена,
		Знач ИдентификаторКриптопрофиля,
		Знач SMSКод) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка кода SMS в Сбербанк.'");
	
	ПараметрыСинхронизации = Новый Структура;
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("СообщениеОбмена", СообщениеОбмена);
	ПараметрыСинхронизации.Вставить("SMSКод", SMSКод);
	ПараметрыСинхронизации.Вставить("ИдентификаторКриптопрофиля", ИдентификаторКриптопрофиля);
		
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросНаПроверкуSMSСбербанк", ПараметрыСинхронизации, ПараметрыВыполнения);

КонецФункции

// Запускает длительную операцию синхронизации документов со Сбербанком
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция ЗапускЗаданияСинхронизацииСбербанк(Знач НастройкаОбмена) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение синхронизации со Сбербанком.'");
	
	ПараметрыСинхронизации = Новый Структура;
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
		
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.СинхронизироватьДокументыСбербанк", ПараметрыСинхронизации, ПараметрыВыполнения);

КонецФункции

// Определяет параметры обмена со Сбербанком.
//
// Параметры:
//  ПерсональныеДанные - Строка - персональные данные, полученные из банка.
// 
// Возвращаемое значение:
//  Структура - параметры обмена с банком, содержит поля:
//     * ИдентификаторОрганизации - строка - идентификатор организации в системе банка.
//     * НаименованиеБанка - строка - наименование банка.
//     * НомерПодразделенияБанка - строка - номер подразделения банка.
//     * ЗаблокированныеКриптопрофили - Массив - идентификаторы заблокированных профилей.
//
Функция ПараметрыОбменаСбербанк(Знач ПерсональныеДанные) Экспорт
	
	ВидОперации = НСтр("ru = 'Чтение полученных данных из банка'");
	
	СтруктураВозврата = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПерсональныеДанные);
	Попытка
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
		ЧтениеXML.Закрыть();
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка'");
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка
								|Текст ошибки: %1'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки);
		ВидОперации = НСтр("ru = 'Чтение полученных данных из банка'");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЭД.Свойства().Получить("Errors") <> Неопределено Тогда
		ТекстСообщения = "";
		ОбработатьИзвещениеСОшибкойСбербанк(ПерсональныеДанные, ТекстСообщения);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	OrganizationInfo = ЗначениеСвойстваXDTO(
		ЭД, "OrganizationsInfo.OrganizationInfo");
		
	Если OrganizationInfo = Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ТекстСообщения = НСтр("ru = 'Полученные некорректные данные из банка'");
		ТекстОшибки = НСтр("ru = 'Отсутствуют данные об организации.
								|Файл данных: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ЭД, ИмяФайла, Ложь, "UTF-8");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(OrganizationInfo) = Тип("ОбъектXDTO") Тогда
		ИнформацияОбОрганизации = OrganizationInfo;
	ИначеЕсли ТипЗнч(OrganizationInfo) = Тип("СписокXDTO") Тогда
		ИнформацияОбОрганизации = OrganizationInfo.Получить(0);
	Иначе
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ТекстСообщения = НСтр("ru = 'Полученные некорректные данные из банка'");
		ТекстОшибки = НСтр("ru = 'Отсутствуют персональные данных организации.
								|Файл данных: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ЭД, ИмяФайла, Ложь, "UTF-8");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
		
	ИдентификаторОрганизации = ЗначениеСвойстваXDTO(
		ИнформацияОбОрганизации, "OrgData.OrgId");
	
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ТекстСообщения = НСтр("ru = 'Полученные некорректные данные из банка'");
		ТекстОшибки = НСтр("ru = 'В персональных данных организации отсутствует идентификатор.
								|Файл данных: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ЭД, ИмяФайла, Ложь, "UTF-8");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	СтруктураВозврата.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	Branch = ЗначениеСвойстваXDTO(
		ЭД, "OrganizationsInfo.OrganizationInfo.Branches.Branch");
		
	Если Branch = Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ТекстСообщения = НСтр("ru = 'Полученные некорректные данные из банка'");
		ТекстОшибки = НСтр("ru = 'Отсутствуют данные о банке.
								|Файл данных: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ЭД, ИмяФайла, Ложь, "UTF-8");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Branch) = Тип("ОбъектXDTO") Тогда
		ИнформацияОБанке = Branch;
	ИначеЕсли ТипЗнч(Branch) = Тип("СписокXDTO") Тогда
		ИнформацияОБанке = Branch.Получить(0);
	Иначе
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ТекстСообщения = НСтр("ru = 'Полученные некорректные данные из банка'");
		ТекстОшибки = НСтр("ru = 'Отсутствуют данные о наименовании и подразделении банка.
								|Файл данных: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ЭД, ИмяФайла, Ложь, "UTF-8");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	НаименованиеБанка = ЗначениеСвойстваXDTO(ИнформацияОБанке, "SystemName");
	СтруктураВозврата.Вставить("НаименованиеБанка", НаименованиеБанка);
	НомерПодразделенияБанка = ЗначениеСвойстваXDTO(ИнформацияОБанке, "BranchId");
	СтруктураВозврата.Вставить("НомерПодразделенияБанка", НомерПодразделенияБанка);
	
	ЗаблокированныеКриптопрофили = Новый Массив;
	
	УчетныеЗаписиКлиентов = ЗначениеСвойстваXDTO(
		ЭД, "OrganizationsInfo.OrganizationInfo.AuthPersons.AuthPerson");
		
	Если ТипЗнч(УчетныеЗаписиКлиентов) = Тип("СписокXDTO") Тогда
		Для каждого УчетнаяЗаписьКлиента Из УчетныеЗаписиКлиентов Цикл
			ДобавитьЗаблокированныеКриптопрофилиСбербанк(УчетнаяЗаписьКлиента, ЗаблокированныеКриптопрофили);
		КонецЦикла;
	ИначеЕсли ТипЗнч(УчетныеЗаписиКлиентов) = Тип("ОбъектXDTO") Тогда
		ДобавитьЗаблокированныеКриптопрофилиСбербанк(УчетныеЗаписиКлиентов, ЗаблокированныеКриптопрофили);
	КонецЕсли;
	
	ЗаблокированныеКриптопрофили = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаблокированныеКриптопрофили);
	СтруктураВозврата.Вставить("ЗаблокированныеКриптопрофили", ЗаблокированныеКриптопрофили);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Отправляет одноразовый пароль в Сбербанк
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  КлючСессии - Произвольный - ключ установленной сессии со Сбербанком
//  ОдноразовыйПароль - Строка - пароль из SMS сообщения
//  Ошибка - Булево - признак ошибки при выполнении процедуры
//  ТребуетсяСменаПароля - Булево - (возвращаемое значение) требуется смена пароля
//  Соль - ДвоичныеДанные - (возвращаемое значение) соль.
//
Процедура ОтправитьОдноразовыйПарольВСбербанк(Знач НастройкаОбмена, Знач КлючСессии, Знач ОдноразовыйПароль, Ошибка, ТребуетсяСменаПароля) Экспорт
	
	WSПрокси = ОбменСБанкамиСлужебныйПовтИсп.WSПроксиСбербанк();
	
	ИдентификаторСессии = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(КлючСессии).ИдентификаторСессии;
	
	Попытка
		XDTOРезультат = WSПрокси.verifySMSSession(ИдентификаторСессии, ОдноразовыйПароль);
	Исключение
	
		ОбменСБанкамиСлужебный.ДобавитьЗаписьВЖурнал(
			НастройкаОбмена, "verifySMSSession", WSПрокси.ФабрикаXDTO, ИдентификаторСессии, XDTOРезультат);
		ВидОперации = НСтр("ru = 'SMS аутентификация'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = Нстр("ru = 'При SMS-аутентификации произошла ошибка:
								|%1'");
		ТекстОшибки = СтрШаблон(ШаблонСообщения, КраткаяИнформация);
		ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, ТекстОшибки);
		Ошибка = Истина;
		Возврат;
	КонецПопытки;
	
	ОбменСБанкамиСлужебный.ДобавитьЗаписьВЖурнал(
		НастройкаОбмена, "verifySMSSession", WSПрокси.ФабрикаXDTO, ИдентификаторСессии, XDTOРезультат);
	
	Если XDTOРезультат = "AA==" Тогда // Операция выполнена успешно
	ИначеЕсли XDTOРезультат = "Ag==" Тогда // Необходимо сменить пароль
		ТребуетсяСменаПароля = Истина;
	Иначе
		ВидОперации = НСтр("ru = 'Проверка SMS пароля'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, XDTOРезультат);
		Ошибка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст запроса персональных данных организации
// 
// Возвращаемое значение:
//  Строка - текст запроса персональных данных.
//
Функция ЗапросПерсональныхДанныхОрганизацииСбербанк() Экспорт
	
	Операция = НСтр("ru = 'Формирование запроса персональных данных организации.'");
	
	ТекстОшибки = "";
	Попытка
		Request = ОбменСБанкамиСлужебный.RequestСбербанк("00000000-0000-0000-0000-000000000000", ТекстОшибки);
		
		PersonalInfo = ОбъектТипаCML(ФабрикаXDTO, "PersonalInfo", "http://bssys.com/upg/request");
		
		ЗаполнитьСвойствоXDTO(Request, "PersonalInfo", PersonalInfo, Истина, ТекстОшибки);
		
		Request.Проверить();
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку("UTF-8");
		Запись.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(Запись, Request);
		ТекстЗапроса = Запись.Закрыть();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбработатьОшибку(Операция, ТекстОшибки, ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура - После отправки платежного документа сбербанк
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - отправленное сообщение обмена
//  Тикет - Строка - тикет, полученный из банка.
//
Процедура ПослеОтправкиСообщенияОбменаВСбербанк(Знач НастройкаОбмена, Знач СообщениеОбмена, Знач Тикет) Экспорт
	
	ОбменСБанкамиСлужебный.СохранитьТикетСбербанк(НастройкаОбмена, Тикет);
	
	ОбменСБанкамиСлужебный.УстановитьСтатусСообщенияОбмена(СообщениеОбмена, Перечисления.СтатусыОбменСБанками.Отправлен);
	
КонецПроцедуры

// Сохраняет параметры установленного сеанса на сервере
//
// Параметры:
//  КлючСессии - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена с банком
//  ПараметрыСессии - Структура - может содержать следующие поля: 
//  	* ИдентификаторСессии - Строка - идентификатор установленной сессии
//  	* ФродПараметры - Структура - фрод
//  	* Логин - Строка - логин пользователя
//  	* ТокенДоступа - Строка - токен доступа, выданный сервисом
//  	* ДоступныеСчета - Массив из Строка - доступные счета в банке для текущего идентификатора сессии.
//
Процедура СохранитьСессиюНаСервереСбербанк(КлючСессии, ПараметрыСессии) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СохраненныеСессии = Новый Соответствие(ПараметрыСеанса.СессииОбменСБанками);
	СохраненныеСессии.Вставить(КлючСессии, Новый ФиксированнаяСтруктура(ПараметрыСессии));
	ПараметрыСеанса.СессииОбменСБанками = Новый ФиксированноеСоответствие(СохраненныеСессии);
	
КонецПроцедуры

// Запускает фоновое задание аутентификации на сервере Сбербанка по логину
//
// Параметры:
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
//    Логин - Строка - логин пользователя в системе банка
//    Пароль - Строка - пароль для логина.
//    ФродПараметры - Структура - параметры фрод-мониторинга, полученные на клиенте.
//    КлючСессии - Произвольный - ключ для сохранения параметров установленной сессии.
// 
// Возвращаемое значение:
//    Структура - структура возврата описана в ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияАутентификацииПоЛогинуСбербанк(
	Знач НастройкаОбмена,
	Знач Логин,
	Знач Пароль,
	Знач ФродПараметры) Экспорт
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОперации.Вставить("Логин", Логин);
	ПараметрыОперации.Вставить("Пароль", Пароль);
	ПараметрыОперации.Вставить("ФродПараметры", ФродПараметры);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Предварительная аутентификация по логину'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ВыполнитьАутентификациюПоЛогинуСбербанк", ПараметрыОперации, ПараметрыВыполнения);
	
	Возврат Результат
	
КонецФункции

// Запускает фоновое задание смены пароля на сервере Сбербанка
//
// Параметры:
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
//    КлючСессии - Произвольный - ключ установленной сессии с банком
//    Логин - Строка - логин пользователя в системе банка
//    Пароль - Строка - пароль для логина.
//    НовыйПароль - Строка - новый пароль для логина.
//    Соль - ДвоичныеДанные - соль, полученная из банка
//    B - ДвоичныеДанные - значение параметра B для расчета свертки
// 
// Возвращаемое значение:
//    Структура - структура возврата описана в ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияСменыПароляСбербанк(
	Знач НастройкаОбмена,
	Знач КлючСессии,
	Знач Логин,
	Знач Пароль,
	Знач НовыйПароль,
	Знач Соль,
	Знач B) Экспорт
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ИдентификаторСессии = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(КлючСессии).ИдентификаторСессии;
	ПараметрыОперации.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыОперации.Вставить("Логин", Логин);
	ПараметрыОперации.Вставить("Пароль", Пароль);
	ПараметрыОперации.Вставить("НовыйПароль", НовыйПароль);
	ПараметрыОперации.Вставить("Соль", Соль);
	ПараметрыОперации.Вставить("B", B);
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Смена пароля на сервере Сбербанка.'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.СменитьПарольСбербанк", ПараметрыОперации, ПараметрыВыполнения);
	
	Возврат Результат
	
КонецФункции

// Возвращает выписки банка за период из информационной базы.
// Если не найдена выписка хоть за один из дней в периоде, то возвращается пустой массив.
//
// Параметры:
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//   ДатаНачала - Дата - дата начала периода;
//   ДатаОкончания - Дата - дата окончания периода;
//   МассивСчетов - Массив - в элементах - строки, содержащие номера счетов.
//   НомерСчета - Строка - номер банковского счета
//
// Возвращаемое значение:
//   Массив - в элементах ДокументСсылка.СообщениеОбменСБанком - ссылки на банковские выписки.
//
Функция ГотовыеВыпискиСбербанка(Знач НастройкаОбмена, Знач ДатаНачала, Знач ДатаОкончания, Знач НомерСчета) Экспорт
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена, "Организация, Банк");
	
	МассивБанковскихСчетов = Новый Массив;
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		МассивБанковскихСчетов.Добавить(НомерСчета);
	Иначе
		ОбменСБанкамиПереопределяемый.ПолучитьНомераБанковскихСчетов(
			РеквизитыНастройкиОбмена.Организация, РеквизитыНастройкиОбмена.Банк, МассивБанковскихСчетов);
	КонецЕсли;
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СообщениеОбменСБанками.Ссылка КАК Ссылка,
	               |	СообщениеОбменСБанками.ДатаНачала КАК ДатаВыпискиБанка,
	               |	СообщениеОбменСБанками.НомерСчета КАК НомерСчета
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	               |	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ВыпискаБанка)
	               |	И СообщениеОбменСБанками.НомерСчета В(&НомераБанковскихСчетов)
	               |	И СообщениеОбменСБанками.ДатаНачала <= &ДатаОкончания
	               |	И СообщениеОбменСБанками.ДатаНачала >= &ДатаНачала
	               |	И НЕ СообщениеОбменСБанками.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаВыпискиБанка,
	               |	СообщениеОбменСБанками.НомерСчета УБЫВ,
	               |	СообщениеОбменСБанками.Дата УБЫВ";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("НомераБанковскихСчетов", МассивБанковскихСчетов);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредыдущаяДата = Неопределено;
	ПредыдущийНомерСчета = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ПредыдущаяДата = Выборка.ДатаВыпискиБанка И ПредыдущийНомерСчета = Выборка.НомерСчета Тогда
			Продолжить;
		КонецЕсли;
		ПредыдущаяДата = Выборка.ДатаВыпискиБанка;
		ПредыдущийНомерСчета = Выборка.НомерСчета;
		МассивВозврата.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	КоличествоСчетов = МассивБанковскихСчетов.Количество();
	
	ТребуемоеКоличествоДней = (НачалоДня(ДатаОкончания) - ДатаНачала) / 60 / 60 / 24 * КоличествоСчетов
								+ 1 * КоличествоСчетов;
	
	Если ТребуемоеКоличествоДней <> МассивВозврата.Количество() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

// Запускает фоновое задание по отправке документов в Сбербанк
//
// Параметры:
//  ПараметрыОтправки - Структура - параметры отправки, содержит следующие поля:
//     * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//     * МассивСообщенийОбмена - Массив из ДокументСсылка.СообщениеОбменСБанками - сообщения, которые необходимо отправить в банк
//     * МассивСообщенийОбменаСсылка - Строка - адрес временного хранилища, который содержит МассивСообщенийОбмена.
// 
// Возвращаемое значение:
//  Структура - см. описание в ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияПоОтправкеДокументовПоЛогинуВСбербанк(Знач ПараметрыОтправки) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка документов в Сбербанк.'");
	
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(ПараметрыОтправки.НастройкаОбмена);
	ПараметрыОтправки.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыОтправки.Вставить("ВыводитьПрогрессВыполнения", Истина);
		
	ПараметрыОтправки.Вставить("АдресРезультата");
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьДокументыПоЛогинуВСбербанк", ПараметрыОтправки, ПараметрыВыполнения);
	
КонецФункции

// Извлекает сертификаты из криптопрофиля организации
// 
// Параметры:
// 	Данные - Строка - криптопрофиль организации, полученный из банка,
// 	УникальныйИдентификатор - УникальныйИдентификатор - идентификатор открытой формы для помещения двоичных данных
// 														во временное хранилище
// 	Организация - ОпределяемыйТип.Организация - ссылка на организацию для сохранения сертификата клиента
// 												 в информационной базе.
// 	ЗаблокированныеКриптопрофили - Массив, Неопределено - содержит список заблокированных профилей.
// 	 * Строка - идентификатор заблокированного профиля;
// 	ТолькоСертификатыБанка - Булево - если Истина, то нужно извлекать только сертификаты банка
// Возвращаемое значение:
// 	Структура, Неопределено - Описание:
// * СертификатыБанка - Массив из Строка - сертификаты банка
// * СертификатыКлиента - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - найденные или созданные сертификаты клиента
Функция ПрочитатьСертификатыСбербанка(
	Знач Данные,
	Знач УникальныйИдентификатор,
	Знач Организация = Неопределено,
	Знач ЗаблокированныеКриптопрофили = Неопределено,
	Знач ТолькоСертификатыБанка = Ложь) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СертификатыКлиента", Новый Массив);
	СтруктураВозврата.Вставить("СертификатыБанка", Новый Массив);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Данные);
	
	Попытка
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
		ЧтениеXML.Закрыть();
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка'");
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка
							|Текст ошибки: %1'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки);
		ВидОперации = НСтр("ru = 'Чтение полученных данных из банка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЭД.Свойства().Получить("Errors") <> Неопределено Тогда
		ТекстСообщения = "";
		ОбработатьИзвещениеСОшибкойСбербанк(Данные, ТекстСообщения);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ДанныеСертификата Из ЭД.Certificates.Certificate Цикл
		
		Bank = ЗначениеСвойстваXDTO(ДанныеСертификата, "Bank");
		
		Если ТолькоСертификатыБанка И Bank = "0" Тогда
			Продолжить;
		КонецЕсли;
		
		active = ЗначениеСвойстваXDTO(ДанныеСертификата, "active");
		client = ЗначениеСвойстваXDTO(ДанныеСертификата, "client");
		ИдентификаторКриптопрофиля = ЗначениеСвойстваXDTO(ДанныеСертификата, "signDeviceId");
			
		Если ЗаблокированныеКриптопрофили <> Неопределено
			И ЗаблокированныеКриптопрофили.Найти(ИдентификаторКриптопрофиля) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СертификатСтрокой = ДанныеСертификата.Последовательность().ПолучитьТекст(0);
		ДвоичныеДанныеСертификата = Base64Значение(СертификатСтрокой);
		
		Попытка
			ДвоичныеДанныеСертификата = ОбменСБанкамиСлужебный.ДанныеСертификатаВФорматеDER(ДвоичныеДанныеСертификата);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Неопределено;
		КонецПопытки;
		
		Если Bank = "1" И active = "1" Тогда
			СсылкаНаДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			СтруктураВозврата.СертификатыБанка.Добавить(СсылкаНаДанные);
		ИначеЕсли client = "1" И active = "1" Тогда
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
			Если СертификатКриптографии.ДатаОкончания < ТекущаяДатаСеанса() Тогда
				Продолжить;
			КонецЕсли;
			НовыйСертификат = СоздатьСертификатСбербанка(ДвоичныеДанныеСертификата, Организация);
			Если НЕ ЗначениеЗаполнено(НовыйСертификат) Тогда
				Возврат Неопределено;
			КонецЕсли;
			РегистрыСведений.ПодписываемыеВидыЭД.СохранитьПодписываемыеВидыЭД(НовыйСертификат);
			СтруктураВозврата.СертификатыКлиента.Добавить(НовыйСертификат);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата
	
КонецФункции

#КонецОбласти

#Область Права

// Проверяет возможность чтения данных обмена с банком для текущего пользователя
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на выполнение обмена с банком.
//
Функция ПравоЧтенияДанных(ВыводитьСообщение = Ложь) Экспорт
	
	Возврат ОбменСБанками.ПравоЧтенияДанных(ВыводитьСообщение);
		
КонецФункции

// Проверяет наличие права выполнения обмена у текущего пользователя
// 
// Параметры:
//  ВыводитьСообщение - Булево - если Истина, то выводится сообщение об отсутствии прав
// Возвращаемое значение:
//  	Булево - Если Истина, то у текущего пользователя есть право на выполнение обмена
Функция ПравоВыполненияОбмена(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаОбменСБанками")
		И ОбменСБанкамиСлужебный.ПравоОбработкиЭД();
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ТекстСообщения = НСтр("ru = 'Недостаточно прав на выполнение обмена с банком.
									|Обратитесь к администратору.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

// Проверяет право настройки обмена у текущего пользователя
// 
// Возвращаемое значение:
//  Булево - если Истина, то у текущего пользователя есть право настройки обмена
Функция ПравоНастройкиОбмена() Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОбменСБанками);
	
КонецФункции

#КонецОбласти

#Область ОбменСБанкомЧерезДополнительнуюОбработку

// Получает данные для отправки в банк через дополнительную обработку с клиента
//
// Параметры:
//  Ссылки - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком
//         - Массив - список пакетов к отправке
//             * ДокументСсылка.ПакетОбменСБанками - отправляемый пакет
// 
// Возвращаемое значение:
//  Соответствие - данные для отправки по каждой настройке обмена
//
Функция ДанныеДляОтправкиВБанкЧерезДопОбработку(Знач Ссылки) Экспорт
	
	Если ТипЗнч(Ссылки) = Тип("Массив") Тогда
		МассивДанных = ОбменСБанкамиСлужебный.СоздатьДокументыПакетовЭД(Ссылки);
		Пакеты = Новый Массив;
		Для каждого ЭлементКоллекции Из МассивДанных Цикл
			Пакеты.Добавить(ЭлементКоллекции.ПЭД);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеВозврата = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка,
	|	ПакетЭД.НастройкаОбмена КАК НастройкаОбмена
	|ПОМЕСТИТЬ Пакеты
	|ИЗ
	|	Документ.ПакетОбменСБанками КАК ПакетЭД
	|ГДЕ
	|	НЕ ПакетЭД.НастройкаОбмена.ПометкаУдаления
	|	И НЕ ПакетЭД.НастройкаОбмена.Недействительна
	|	И ПакетЭД.НастройкаОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку)
	|	И НЕ ПакетЭД.ПометкаУдаления
	|	И ПакетЭД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК Ссылка,
	|	ПакетЭД.Сообщения.(
	|		Сообщение КАК Сообщение,
	|		Сообщение.ВидЭД КАК СообщениеВидЭД,
	|		Сообщение.Идентификатор КАК СообщениеИдентификатор
	|	) КАК Сообщения,
	|	ПакетЭД.НастройкаОбмена КАК НастройкаОбмена
	|ИЗ
	|	Документ.ПакетОбменСБанками КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Пакеты.Ссылка
	|			ИЗ
	|				Пакеты)
	|ИТОГИ ПО
	|	НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СертификатыПодписейОрганизации.СертификатЭП КАК СертификатЭП,
	|	СертификатыПодписейОрганизации.Ссылка КАК НастройкаОбмена
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|ГДЕ
	|	СертификатыПодписейОрганизации.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Пакеты.НастройкаОбмена
	|			ИЗ
	|				Пакеты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СертификатЭП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыЭП.Ссылка КАК Ссылка,
	|	СертификатыЭП.ДанныеСертификата КАК ДанныеСертификата,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	НЕОПРЕДЕЛЕНО КАК ПарольСертификата,
	|	Сертификаты.НастройкаОбмена КАК НастройкаОбмена
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыЭП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Сертификаты КАК Сертификаты
	|		ПО (Сертификаты.СертификатЭП = СертификатыЭП.Ссылка)
	|ГДЕ
	|	&ПроверкаПользователя
	|	И СертификатыЭП.Ссылка В
	|			(ВЫБРАТЬ
	|				Сертификаты.СертификатЭП
	|			ИЗ
	|				Сертификаты)
	|ИТОГИ ПО
	|	НастройкаОбмена";
	Если ТипЗнч(Ссылки) = Тип("СправочникСсылка.НастройкиОбменСБанками") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И ПакетЭД.НастройкаОбмена = &НастройкаОбмена");
		Запрос.УстановитьПараметр("НастройкаОбмена", Ссылки);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И ПакетЭД.Ссылка В (&ПакетыЭД)");
		Запрос.УстановитьПараметр("ПакетыЭД", Пакеты);
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
			"СертификатыЭП.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)");
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	ВыборкаНастройкиОбмена = ПакетЗапросов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСертификатов = ПакетЗапросов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВремФайл = ПолучитьИмяВременногоФайла();
	Пока ВыборкаНастройкиОбмена.Следующий() Цикл
		ВыборкаПакеты = ВыборкаНастройкиОбмена.Выбрать();
		ДанныеПакетов = Новый Соответствие;
		Пока ВыборкаПакеты.Следующий() Цикл
			ВыборкаСообщений = ВыборкаПакеты.Сообщения.Выбрать();
			СтруктураДанных = Новый Структура;
			Пока ВыборкаСообщений.Следующий() Цикл
				ДвоичныеДанныеФайла = ДвоичныеДанныеПрисоединенногоФайла(ВыборкаСообщений.Сообщение);
				Если ВыборкаСообщений.СообщениеВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
					ИЛИ ВыборкаСообщений.СообщениеВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование Тогда
					ДвоичныеДанныеФайла.Записать(ВремФайл);
					ТекстовыйДокумент = Новый ТекстовыйДокумент;
					ТекстовыйДокумент.Прочитать(ВремФайл);
					ФайловаяСистема.УдалитьВременныйФайл(ВремФайл);
					СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
					СтруктураДанных.Вставить("ПлатежноеПоручение", СтрокаXML);
					СтруктураДанных.Вставить("Ключ", ВыборкаСообщений.СообщениеИдентификатор);
					ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(ВыборкаСообщений.Сообщение);
					УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
					МассивПодписей = Новый Массив;
					Для Каждого ДанныеПодписи Из УстановленныеПодписи Цикл
						СтруктураДанныхПодписи = Новый Структура;
						СтруктураДанныхПодписи.Вставить("Подпись", ДанныеПодписи.Подпись);
						СтруктураДанныхПодписи.Вставить("Сертификат", ДанныеПодписи.Сертификат.Получить());
						МассивПодписей.Добавить(СтруктураДанныхПодписи);
					КонецЦикла;
					СтруктураДанных.Вставить("Подписи", МассивПодписей);
				ИначеЕсли ВыборкаСообщений.СообщениеВидЭД = Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные Тогда
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
					СтруктураДанных.Вставить("СлужебныеДанные", СсылкаНаДвоичныеДанныеФайла);
				КонецЕсли;
			КонецЦикла;
			ДанныеПакетов.Вставить(ВыборкаПакеты.Ссылка, СтруктураДанных);
		КонецЦикла;
		ВыборкаСертификатов.Сбросить();
		СтруктураПоиска = Новый Структура("НастройкаОбмена", ВыборкаНастройкиОбмена.НастройкаОбмена);
		Если ВыборкаСертификатов.НайтиСледующий(СтруктураПоиска) Тогда
			ВыборкаСертификатовДанные = ВыборкаСертификатов.Выбрать();
			Сертификаты = Новый Массив;
			Пока ВыборкаСертификатовДанные.Следующий() Цикл
				ДанныеСертификата = Новый Структура();
				ДанныеСертификата.Вставить("СертификатСсылка", ВыборкаСертификатовДанные.Ссылка);
				ДанныеСертификата.Вставить("ПарольСертификата", ВыборкаСертификатовДанные.ПарольСертификата);
				ДанныеСертификата.Вставить("ДвоичныеДанныеСертификата", ВыборкаСертификатовДанные.ДанныеСертификата.Получить());
				Сертификаты.Добавить(ДанныеСертификата);
			КонецЦикла;
			СтруктураДанных = Новый Структура("ДанныеПакетов, Сертификаты", ДанныеПакетов, Сертификаты);
			ДанныеВозврата.Вставить(ВыборкаНастройкиОбмена.НастройкаОбмена, СтруктураДанных);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Не указаны сертификаты в настройке обмена с банком %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаНастройкиОбмена.НастройкаОбмена);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ДанныеВозврата.Количество() И ТипЗнч(Ссылки) = Тип("СправочникСсылка.НастройкиОбменСБанками") Тогда
		ОбменСБанкамиСлужебный.СохранитьДатуСинхронизации(Ссылки);
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Получает значение функциональной опции Используются дополнительные отчеты и обработки
// 
// Возвращаемое значение:
//  Булево - значение функциональной опции
//
Функция ИспользуютсяДополнительныеОтчетыИОбработки() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки");
	
КонецФункции

// Сохраняет схемы данных электронных документов.
//
// Параметры
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройки обмена с банком;
//  МассивСообщений  - Массив
//    * - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//  МассивСхемДанных  - Массив
//    * - Строка - текстовые данные электронного документа.
//
Процедура СохранитьСхемыДанных(Знач НастройкаОбмена, Знач МассивСообщений, Знач МассивСхемДанных) Экспорт
	
	Индекс = 0;
	КоличествоСообщений = МассивСообщений.Количество();
	
	Для Индекс = 0 По КоличествоСообщений - 1 Цикл
		
		АдресХранилища = ПоместитьВоВременноеХранилище(МассивСхемДанных[Индекс]);
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
		СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
		СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
		СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
		СтруктураРеквизитов.Вставить("СообщениеРодитель", МассивСообщений[Индекс]);
		ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов);

	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Fintech

// Получает стастусы документов и недостающие выписки
// 
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  НомераСчетов - Массив из Строка - номера счетов, по которым требуется синхронизация.
//
// Возвращаемое значение:
// 	Структура - Описание:
// * Сообщения - ФиксированныйМассив -
// * ПодробноеПредставлениеОшибки - Строка -
// * КраткоеПредставлениеОшибки - Строка -
// * АдресДополнительногоРезультата - Строка -
// * АдресРезультата - Строка -
// * ИдентификаторЗадания - Неопределено -
// * Статус - Строка -
Функция ЗапускЗаданияПолученияДокументовFintech(Знач НастройкаОбмена, Знач НомераСчетов = Неопределено) Экспорт
	
	ПараметрыСессии = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	Если ПараметрыСессии = Неопределено ИЛИ НЕ ПараметрыСессии.Свойство("ДоступныеСчета")
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСессии.ДоступныеСчета) Тогда
		Возврат Новый Структура("ТребуетсяАутентификация");
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение статусов документов через сервис Fintech integration'");
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыПроцедуры.Вставить("ТекущаяСессия", ПараметрыСессии);
	ПараметрыПроцедуры.Вставить("НомераСчетов", НомераСчетов);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьСтатусыДокументовFintech", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

// Запускает фоновое задание получения ссылки на аутентификацию на сервере банка
// 
// Параметры:
// 	НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
// Возвращаемое значение:
// 	Структура - Описание:
// * Сообщения - ФиксированныйМассив -
// * ПодробноеПредставлениеОшибки - Строка -
// * КраткоеПредставлениеОшибки - Строка -
// * АдресДополнительногоРезультата - Строка -
// * АдресРезультата - Строка -
// * ИдентификаторЗадания - Неопределено -
// * Статус - Строка -
Функция ЗапускЗаданияПолученияСсылкиНаАутентификациюFintechСбербанк(Знач НастройкаОбмена) Экспорт
	
	ИдентификаторСессии = Строка(Новый УникальныйИдентификатор());
	
	СохранитьСессиюНаСервереСбербанк(НастройкаОбмена, Новый Структура("ИдентификаторСессии", ИдентификаторСессии));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подключение к сервису Fintech integration'");
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыПроцедуры.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиФинтехСлужебный.ПолучитьСсылкуНаАутентификацию", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

// Получение выписки Сбербанка через сервис Fintech Integration
// 
// Параметры:
// 	ПараметрыПолучения - Структура - содержит поля:
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//    * НомерСчета - Строка - номер банковского счета
//    * ДатаНачала - Дата - дата начала периода запроса выписки
//    * ДатаОкончания - Дата - дата окончания периода запроса выписки
// Возвращаемое значение:
// 	Структура - Описание:
// * Сообщения - ФиксированныйМассив -
// * ПодробноеПредставлениеОшибки - Строка -
// * КраткоеПредставлениеОшибки - Строка -
// * АдресДополнительногоРезультата - Строка -
// * АдресРезультата - Строка -
// * ИдентификаторЗадания - Неопределено -
// * Статус - Строка -
Функция ЗапускЗаданияПолученияВыпискиFintechСбербанк(Знач ПараметрыПолучения) Экспорт
	
	ПараметрыСессии = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(ПараметрыПолучения.НастройкаОбмена);
	Если ПараметрыСессии = Неопределено ИЛИ НЕ ПараметрыСессии.Свойство("ДоступныеСчета")
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСессии.ДоступныеСчета)
		ИЛИ ПараметрыСессии.ДоступныеСчета.Получить(ПараметрыПолучения.НомерСчета) = Неопределено Тогда
		Возврат Новый Структура("ТребуетсяАутентификация");
	КонецЕсли;
	
	ТокенДоступа = ПараметрыСессии.ДоступныеСчета.Получить(ПараметрыПолучения.НомерСчета);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение выписки через сервис Fintech integration'");
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкаОбмена", ПараметрыПолучения.НастройкаОбмена);
	ПараметрыПроцедуры.Вставить("НомерСчета", ПараметрыПолучения.НомерСчета);
	ПараметрыПроцедуры.Вставить("ИдентификаторСессии", ПараметрыСессии.ИдентификаторСессии);
	ПараметрыПроцедуры.Вставить("ТокенДоступа", ТокенДоступа);
	ПараметрыПроцедуры.Вставить("ДатаНачала", ПараметрыПолучения.ДатаНачала);
	ПараметрыПроцедуры.Вставить("ДатаОкончания", ПараметрыПолучения.ДатаОкончания);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьВыпискуБанкаFintech", ПараметрыПроцедуры, ПараметрыВыполнения);
		
КонецФункции

// Проверяет заполненность данные аутентификации на сервисе интернет-поддержки
// 
// Возвращаемое значение:
// 	Булево - если Истина, то интернет-поддержка подключена.
Функция ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт
	
	Возврат ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки()
	
КонецФункции

// Проверяет что у текущей записи есть доступ к счетам указанной организации
// 
// Параметры:
// 	НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
// 	Организация - ОпределяемыйТип.Организация, Неопределено - ссылка на организацию
// 	Банк - ОпределяемыйТип.БанкОбменСБанками, Неопределено - ссылка на банк.
// 	НомерСчета - Строка - номер счета к которому требуется получение доступа
// Возвращаемое значение:
// 	Структура - Описание:
// * Сообщения - ФиксированныйМассив -
// * ПодробноеПредставлениеОшибки - Строка -
// * КраткоеПредставлениеОшибки - Строка -
// * АдресДополнительногоРезультата - Строка -
// * АдресРезультата - Строка -
// * ИдентификаторЗадания - Неопределено -
// * Статус - Строка -
// 	
Функция ЗапускЗаданияПроверкиНаличияДоступаКДаннымFintechСбербанк(
	Знач НастройкаОбмена,
	Знач Организация,
	Знач Банк,
	Знач НомерСчета) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) ИЛИ Не ЗначениеЗаполнено(Банк) Тогда
		РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена, "Организация, Банк");
		Организация = РеквизитыНастройкиОбмена.Организация;
		Банк = РеквизитыНастройкиОбмена.Банк;
	КонецЕсли;
	
	ПараметрыСессии = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка доступа к данным на сервере Сбербанка'");
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыПроцедуры.Вставить("ИдентификаторСессии", ПараметрыСессии.ИдентификаторСессии);
	ПараметрыПроцедуры.Вставить("ТокенДоступа", ПараметрыСессии.ТокенДоступа);
	ПараметрыПроцедуры.Вставить("Организация", Организация);
	ПараметрыПроцедуры.Вставить("Банк", Банк);
	ПараметрыПроцедуры.Вставить("НомерСчета", НомерСчета);
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиФинтехСлужебный.ПроверитьНаличиеДоступаКДанным", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

// Запускает фоновое задание отправки документов по счету в банк
// 
// Параметры:
// 	НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
// 	ДанныеДляОтправки - Структура - Данные для отправки в банк
// Возвращаемое значение:
// 	Структура - Описание:
//   * Сообщения - ФиксированныйМассив -
//   * ПодробноеПредставлениеОшибки - Строка -
//   * КраткоеПредставлениеОшибки - Строка -
//   * АдресДополнительногоРезультата - Строка -
//   * АдресРезультата - Строка -
//   * ИдентификаторЗадания - Неопределено -
//   * Статус - Строка -
// 	
Функция ЗапускЗаданияОтправкиДокументовПоСчетуFintech(Знач НастройкаОбмена, Знач ДанныеДляОтправки) Экспорт
	
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка платежных поручений через сервис Fintech'");
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыПроцедуры.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыПроцедуры.Вставить("ДанныеДляОтправки", ДанныеДляОтправки);
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьПлатежныеПорученияПоСчетуFintech", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

Процедура СохранитьИнформациюОДоступныхСчетахВПараметрахСеанса(Знач НастройкаОбмена, Знач ДоступныеСчета) Экспорт
	
	ПараметрыСессии = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	Если ПараметрыСессии.Свойство("ДоступныеСчета") И ЗначениеЗаполнено(ПараметрыСессии.ДоступныеСчета) Тогда
		ДоступныеСчетаНовые = Новый Соответствие(ПараметрыСессии.ДоступныеСчета);
	Иначе
		ДоступныеСчетаНовые = Новый Соответствие;
	КонецЕсли;
	Для Каждого НомерСчета Из ДоступныеСчета Цикл
		ДоступныеСчетаНовые.Вставить(НомерСчета, ПараметрыСессии.ТокенДоступа);
	КонецЦикла;
	НовыеПараметрыСессии = Новый Структура(ПараметрыСессии);
	НовыеПараметрыСессии.Вставить("ДоступныеСчета", Новый ФиксированноеСоответствие(ДоступныеСчетаНовые));
	СохранитьСессиюНаСервереСбербанк(НастройкаОбмена, НовыеПараметрыСессии);
	
КонецПроцедуры

// Запускает длительную операцию по получению новых документов из банка
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
// 
Функция ЗапускЗаданияПробногоПолученияВыпискиFintech(Знач НастройкаОбмена) Экспорт
	
	ПараметрыСессии = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	Если ПараметрыСессии = Неопределено ИЛИ НЕ ПараметрыСессии.Свойство("ДоступныеСчета")
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСессии.ДоступныеСчета) Тогда
		Возврат Новый Структура("ТребуетсяАутентификация");
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = '1С:ДиректБанк. Отправка документов в банк.'");
	
	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("ТекущаяСессия", ПараметрыСессии);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПробноеПолучениеВыпискиFintech", ПараметрыСинхронизации, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиОбменаСБанками

// Получает параметры журналирования.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
// 
// Возвращаемое значение:
//  Структура - параметры обмена с банком:
//    * ИспользоватьЖурналирование - Булево - признак использования журналирования обмена;
//    * КаталогДляЖурналирования - Строка - каталог для сохранения файлов журнала.
//    * ИдентификаторКлиента - УникальныйИдентификатор - содержит уникальный идентификатор клиента, который включил журналирование.
//
Функция ПараметрыЖурналирования(Знач НастройкаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИспользоватьЖурналирование", Ложь);
	СтруктураВозврата.Вставить("КаталогДляЖурналирования", "");
	СтруктураВозврата.Вставить("ИдентификаторКлиента", Неопределено);
	
	Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	
	Выборка = РегистрыСведений.ПараметрыОбменСБанками.Выбрать(Отбор);
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Производит поиск настройки обмена с банком.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, указанная в настройке;
//   Банк - СправочникСсылка.КлассификаторБанков - банк, указанный в настройке;
//   ТолькоДействительная - Булево - Истина - поиск только действующей настройки, Ложь - поиск любой настройки.
//   ВключитьФО - Булево - включить функциональную опцию возможности прямого обмена, если у пользователя достаточно на это прав.
//   ЕстьПравоПросмотраНастройкиЭДО - Булево - признак наличия у пользователя права открытия настройки обмена для просмотра.
//   ЕстьПравоНастройкиЭДО - Булево - признак наличия у пользователя права настройки обмена с банком.
//   ФОВключенаСейчас - Булево - прямой обмен с банком был включен при вызове метода.
//
// Возвращаемое значение:
//   СправочникСсылка.НастройкиОбменСБанками, Неопределено - найденная настройка обмена с банком.
//
Функция НастройкаОбмена(Знач Организация, Знач Банк, Знач ТолькоДействительная, Знач ВключитьФО, ЕстьПравоПросмотраНастройкиЭДО = Ложь, ЕстьПравоНастройкиЭДО = Ложь, ФОВключенаСейчас = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОтключенаФО = НЕ Константы.ИспользоватьОбменСБанками.Получить();
	ЕстьПравоПросмотраНастройкиЭДО = ПравоДоступа("Просмотр", Метаданные.Справочники.НастройкиОбменСБанками);
	ТекущаяНастройкаОбмена = ОбменСБанкамиСлужебный.НастройкаОбмена(Организация, Банк, ТолькоДействительная);
	ЕстьПравоНастройкиЭДО = ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОбменСБанками);

	Если ОтключенаФО И ВключитьФО И ЕстьПравоНастройкиЭДО И ЗначениеЗаполнено(ТекущаяНастройкаОбмена) Тогда
		Константы.ИспользоватьОбменСБанками.Установить(Истина);
		ФОВключенаСейчас = Истина;
	КонецЕсли;
	
	Возврат ТекущаяНастройкаОбмена;
	
КонецФункции

// Определяет необходимость стандартной криптографии для обработки документов.
//
// Параметры:
//  МассивОбъектов - Массив - содержит ссылки на документы информационной базы.
// 
// Возвращаемое значение:
//    Булево - если требуется криптография, то возвращается Истина.
//
Функция ТребуетсяКриптографияДляОбработкиДокументов(Знач МассивОбъектов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаНастроекКриптографии();
	
	Для Каждого СсылкаНаДокумент Из МассивОбъектов Цикл
		ПараметрыЭД = ОбменСБанкамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаДокумент);
		Запрос.УстановитьПараметр("ВидЭД", ПараметрыЭД.ВидЭД);
		Запрос.УстановитьПараметр("Организация", ПараметрыЭД.Организация);
		Запрос.УстановитьПараметр("Банк", ПараметрыЭД.Банк);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ТекстЗапросаНастроекКриптографии()
	
	Возврат
	"ВЫБРАТЬ
	|	ТЧ_НастройкиОбмена.ИсходящийДокумент КАК ВидЭД,
	|	ТЧ_НастройкиОбмена.Ссылка КАК НастройкаОбмена,
	|	ТЧ_НастройкиОбмена.Ссылка.АутентификацияПоСертификату КАК АутентификацияПоСертификату
	|ПОМЕСТИТЬ ВТ_ТЧ_НастройкиОбмена
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК ТЧ_НастройкиОбмена
	|ГДЕ
	|	НЕ ТЧ_НастройкиОбмена.Ссылка.ПометкаУдаления
	|	И НЕ ТЧ_НастройкиОбмена.Ссылка.Недействительна
	|	И ТЧ_НастройкиОбмена.Ссылка.Организация = &Организация
	|	И ТЧ_НастройкиОбмена.Ссылка.Банк = &Банк
	|	И ТЧ_НастройкиОбмена.ИсходящийДокумент = &ВидЭД
	|	И (ТЧ_НастройкиОбмена.ИспользоватьЭП
	|			ИЛИ ТЧ_НастройкиОбмена.Ссылка.АутентификацияПоСертификату)
	|	И ТЧ_НастройкиОбмена.Ссылка.ПрограммаБанка В (ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АльфаБанкОнлайн), ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Ссылка КАК Ссылка,
	|	ВидыЭДЭП.ВидЭД КАК ВидДокумента
	|ПОМЕСТИТЬ ВТ_Сертификаты
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
	|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НастройкиОбменаСертификаты.СертификатЭП КАК СертификатЭП,
	|			ВТ_ТЧ_НастройкиОбмена.АутентификацияПоСертификату КАК АутентификацияПоСертификату
	|		ИЗ
	|			ВТ_ТЧ_НастройкиОбмена КАК ВТ_ТЧ_НастройкиОбмена
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
	|				ПО ВТ_ТЧ_НастройкиОбмена.НастройкаОбмена = НастройкиОбменаСертификаты.Ссылка) КАК СертификатыИзНастроекОбмена
	|		ПО Сертификаты.Ссылка = СертификатыИзНастроекОбмена.СертификатЭП
	|ГДЕ
	|	ВидыЭДЭП.ВидЭД = &ВидЭД
	|	И (ВидыЭДЭП.Использовать
	|			ИЛИ СертификатыИзНастроекОбмена.АутентификацияПоСертификату)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ТребуетсяКриптография
	|ИЗ
	|	ВТ_ТЧ_НастройкиОбмена КАК ВТ_ТЧ_НастройкиОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
	|		ПО ВТ_ТЧ_НастройкиОбмена.ВидЭД = ВТ_Сертификаты.ВидДокумента
	|ГДЕ
	|	НЕ ВТ_Сертификаты.Ссылка ЕСТЬ NULL";
	
КонецФункции

#КонецОбласти

#Область АсинхронныйОбменСБанками

// Возвращает зашифрованный маркер банка. Может вызывать исключение.
//
// Параметры:
//  АдресСервера - Строка - URL адрес сервера;
//  ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка;
//  ДвоичныеДанныеСертификата - ДвоичныеДанные - содержимое сертификата электронной подписи;
//  ВерсияФормата - Строка - текущая версия схемы обмена;
//  ПробнаяОперация - Булево - признак, что операция пробная и записывать ошибки в журнал регистрации не нужно;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена с банком.
//
// Возвращаемое значение:
//  ДвоичныеДанные - зашифрованные двоичные данные маркера.
//
Функция МаркерБанкаПоСертификату(АдресСервера, ИдентификаторОрганизации, ДвоичныеДанныеСертификата, ВерсияФормата = Неопределено, ПробнаяОперация = Ложь, НастройкаОбмена = Неопределено) Экспорт
	
	ВидОперации = НСтр("ru = 'Аутентификация на сервере банка'");

	Маркер = Неопределено;
	
	Если Не ЗначениеЗаполнено(ВерсияФормата) Тогда
		ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ДанныеАутентификации = ДанныеДляАутентификацииПоСертификату(ДвоичныеДанныеСертификата, ВерсияФормата);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	Заголовки.Вставить("CustomerID", ИдентификаторОрганизации);
	Заголовки.Вставить("APIVersion", ВерсияФормата);
	Заголовки.Вставить("AvailableAPIVersion", ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена());
	
	Результат = ОбменСБанкамиСлужебный.ОтправитьPOSTЗапрос(
		АдресСервера, "LogonCert", Заголовки, ДанныеАутентификации, , 30, НастройкаОбмена);
		
	Если НЕ Результат.Статус Тогда
		Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'Ошибка аутентификации на сервере банка по сертификату.
								|Адрес ресурса: %1
								|Код ошибки: %2
								|%3'");
			ТекстОшибки = СтрШаблон(Шаблон, АдресСервера, Результат.КодСостояния, Результат.СообщениеОбОшибке);
		Иначе
			Шаблон = НСтр("ru = 'Ошибка аутентификации на сервере банка по сертификату.
								|Адрес ресурса: %1
								|Ошибка: %2'");
			ТекстОшибки = СтрШаблон(Шаблон, АдресСервера, Результат.СообщениеОбОшибке);
		КонецЕсли;
		Если НЕ ПробнаяОперация Тогда
			ОбработатьОшибку(ВидОперации, ТекстОшибки, , НастройкаОбмена);
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML;
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	Результат.Тело.Записать(ИмяФайлаРезультата);
	
	Попытка
		
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение);
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.УстаревшаяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);

		Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);

		ПакетТип = ОбменСБанкамиСлужебный.ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(Чтение, ПакетТип);
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось пройти процесс аутентификации. Получен некорректный ответ банка.
									|Проверьте настройки обмена с сервисом 1С:ДиректБанк или обратитесь в техподдержку банка.'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = НСтр("ru = 'Не удалось прочитать файл, полученный из банка.
								|Полученный файл: %1
								|Подробная информация об ошибке: %2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайлаРезультата, ПодробноеПредставлениеОшибки);
		Если Не ПробнаяОперация Тогда
			ОбработатьОшибку(ВидОперации, ТекстОшибки, , НастройкаОбмена);
		КонецЕсли;
		Чтение.Закрыть();
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если НЕ ResultBank.Error = Неопределено Тогда
		Если Не ПробнаяОперация Тогда
			ТекстСообщенияОПолученнойОшибке = ОбменСБанкамиСлужебный.ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
			ОбработатьОшибку(ВидОперации, ТекстСообщенияОПолученнойОшибке, , НастройкаОбмена);
		КонецЕсли;
		Чтение.Закрыть();
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаРезультата);
		ВызватьИсключение ТекстСообщенияОПолученнойОшибке;
	КонецЕсли;
	
	Маркер = ResultBank.Success.LogonCertResponse.EncryptedSID.__content;
	Чтение.Закрыть();
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаРезультата);
	
	Возврат Маркер;
	
КонецФункции

// Получает зашифрованный идентификатор сессии с сервера банка.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ДанныеСертификатаАутентификации - Структура - данные сертификата аутентификации. Содержит поля:
//     * Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат аутентификации;
//     * Данные - Строка - адрес временного хранилища, содержащий двоичные данные сертификата аутентификации.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - зашифрованные двоичные данные идентификатора сессии;
//  Неопределено - при получении идентификатора сессии произошла ошибка.
//
Функция ЗашифрованныйИдентификаторСессии(Знач НастройкаОбмена, Знач ДанныеСертификатаАутентификации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "ИдентификаторОрганизации, АдресСервера, ВерсияФормата");
	
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСертификатаАутентификации.Данные);
	
	Возврат МаркерБанкаПоСертификату(РеквизитыНастройкиОбмена.АдресСервера,
		РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ДвоичныеДанныеСертификата, РеквизитыНастройкиОбмена.ВерсияФормата,
		, НастройкаОбмена)
	
КонецФункции

// Авторизуется на сервере банка и получает идентификатор сессии по одноразовому паролю из SMS.
//
// Параметры:
//  АдресСервера - Строка - URL адрес сервера банка;
//  ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка;
//  ИдентификаторСессии  - Строка - неавторизованный идентификатор сессии;
//  ОдноразовыйПароль - Строка - пароль, полученный пользователем в виде СМС;
//  ВерсияAPI - Строка - версия API асинхронного обмена;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена с банком.
//
// Возвращаемое значение:
//   Строка - идентификатор сессии банка, Неопределено - если произошла ошибка получения идентификатора.
//
Функция МаркерБанкаПоSMS(Знач АдресСервера, Знач ИдентификаторОрганизации, Знач ИдентификаторСессии, Знач ОдноразовыйПароль, Знач ВерсияAPI, Знач НастройкаОбмена = Неопределено) Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	Заголовки.Вставить("CustomerID", ИдентификаторОрганизации);
	Заголовки.Вставить("SID", ИдентификаторСессии);
	Заголовки.Вставить("OTP", ОдноразовыйПароль);
	Заголовки.Вставить("APIVersion", ВерсияAPI);
	
	Результат = ОбменСБанкамиСлужебный.ОтправитьPOSTЗапрос(
		АдресСервера, "LogonOTP", Заголовки, Неопределено, , 15, НастройкаОбмена);
	
	Если Не Результат.Статус Тогда
		Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'Ошибка отправки одноразового пароля.
								|Код ошибки: %1.
								|%2'");
			ТекстОшибки = СтрШаблон(Шаблон, Результат.КодСостояния, Результат.СообщениеОбОшибке);
		Иначе
			ТекстОшибки = Результат.СообщениеОбОшибке;
		КонецЕсли;
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ОбработатьОшибку(ОписаниеОперации, ТекстОшибки, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;

	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	
	Результат.Тело.Записать(ИмяФайлаРезультата);
	
	Чтение = Новый ЧтениеXML;
	
	Попытка
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение);
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.УстаревшаяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
		Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ПакетТип = ОбменСБанкамиСлужебный.ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(Чтение, ПакетТип);
		Если НЕ ResultBank.Success = Неопределено Тогда
			Если НЕ ResultBank.Success.LogonResponse = Неопределено Тогда
				Чтение.Закрыть();
				ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаРезультата);
				Возврат ResultBank.Success.LogonResponse.SID;
			КонецЕсли
		ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
			ТекстОшибки = ОбменСБанкамиСлужебный.ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка чтения ответа банка.'");
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(ОписаниеОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
	КонецПопытки;
	
	Чтение.Закрыть();
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаРезультата);
	
КонецФункции

// Формирует ЭД запрос-зонд.
//
// Параметры:
//  НастройкаОбмена  - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  МассивОтпечатковСертификатов - Массив - в элементах содержатся отпечатки сертификатов в виде строки;
//  НовоеСообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сформированное сообщение запрос-зонд.
//  ПараметрыОбмена - Структура - (Возвращаемое значение) содержит настройки обмена;
//
Процедура СформироватьЗапросЗонд(
	Знач НастройкаОбмена,
	Знач МассивОтпечатковСертификатов,
	НовоеСообщениеОбмена,
	ПараметрыОбмена) Экспорт
	
	НастройкиОбмена = ОбменСБанкамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(НастройкаОбмена, Истина,
		МассивОтпечатковСертификатов, Неопределено, Ложь, Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд);

	Если НастройкиОбмена.Результат <> "НастройкиОпределены" Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиОбмена.ПараметрыОбмена.Подписывать
		И НЕ ОбменСБанкамиКлиентСервер.ЕстьДоступныеСертификаты(НастройкиОбмена.ПараметрыОбмена, Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ИдентификаторОрганизации, ВерсияФормата");

	ОтправительНаименование = ЭлектронноеВзаимодействиеСлужебный.СокращенноеНаименованиеОрганизации(
		РеквизитыНастройкиОбмена.Организация);
	ВерсияПрограммыКлиента = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
	РеквизитыОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация, РеквизитыОрганизации);
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиОбмена.Банк, "Код, Наименование");
	
	Если ЗначениеЗаполнено(РеквизитыНастройкиОбмена.ВерсияФормата) Тогда
		ВерсияФормата = РеквизитыНастройкиОбмена.ВерсияФормата;
	Иначе
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	ТекстОшибки = "";
	
	Попытка
		
		Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
		
		Идентификатор = Новый УникальныйИдентификатор;
		
		ЗапросЗонд = ОбъектТипаCML(Фабрика, "Probe", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(ЗапросЗонд, "id", Строка(Идентификатор), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЗапросЗонд, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЗапросЗонд, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЗапросЗонд, "userAgent", ВерсияПрограммыКлиента, , ТекстОшибки);
		Отправитель = ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(
			Отправитель, "id", РеквизитыНастройкиОбмена.ИдентификаторОрганизации, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Отправитель, "name", ОтправительНаименование, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Отправитель, "inn", РеквизитыОрганизации.ИНН, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЗапросЗонд, "Sender", Отправитель, Истина, ТекстОшибки);
		
		Получатель = ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Получатель, "name", РеквизитыБанка.Наименование, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЗапросЗонд, "Recipient", Получатель, Истина, ТекстОшибки);
		ЗапросЗонд.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ДвоичныеДанные = ОбменСБанкамиСлужебный.ДвоичныеДанныеИзXDTO(Фабрика, ЗапросЗонд, Ложь);
			ФайлСформирован = Истина;
		КонецЕсли;

	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Формирование ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, НастройкаОбмена);
		ФайлСформирован = Ложь;
	КонецПопытки;
		
	Если Не ФайлСформирован Тогда
		Возврат;
	КонецЕсли;
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	СтруктураРеквизитов.Вставить("Идентификатор", Строка(Идентификатор));
	СтруктураРеквизитов.Вставить("Организация", РеквизитыНастройкиОбмена.Организация);
	СтруктураРеквизитов.Вставить("Банк", РеквизитыНастройкиОбмена.Банк);
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("ФорматФайла", "xml");
	
	НовоеСообщениеОбмена = Неопределено;
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена);

	ОбменСБанкамиСлужебный.ДобавитьОтпечаткиСертификатовНаСервере(МассивОтпечатковСертификатов);
	
	ПараметрыОбмена = НастройкиОбмена.ПараметрыОбмена;

КонецПроцедуры

// Производит аутентификацию на сервере банка и получает идентификатор сессии.
//
// Параметры:
//  АдресСервера - Строка - URL адрес сервера банка;
//  ИдентификаторОрганизации  - Строка - идентификатор организации на сервере банка;
//  ДанныеАутентификации - Структура - данные аутентификации на сервере банка:
//        * Пользователь - Строка - логин на сервере банка;
//        * Пароль - Строка - пароль аутентификации на сервере банка.
//  ВерсияAPI - Строка - версия API;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена с банком
// Возвращаемое значение:
//  Структура - результат базовой аутентификации. Содержит поля:
//   * Успех - Булево - признак успешности выполнения процедуры.
//   * ИдентификаторСессии - Строка - идентификатор установленной сессии.
//   * НеверныеДанныеАутентификации - Булево - Истина, если переданные неверные данные аутентификации (код ответа 1201).
//   * ТребуетсяSMSАвторизация - Булево - Истина, если банк использует двухфакторную аутентификацию.
//   * МаскаТелефона - Строка - маска телефона на который была отправлена SMS.
//   * ТекстОшибки - Строка - текст ошибки, который произошел при выполнении процедуры.
//
Функция БазоваяАутентификация(Знач АдресСервера, Знач ИдентификаторОрганизации, Знач ДанныеАутентификации, Знач ВерсияAPI, Знач НастройкаОбмена = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Успех", Ложь);
	СтруктураВозврата.Вставить("ИдентификаторСессии");
	СтруктураВозврата.Вставить("НеверныеДанныеАутентификации", Ложь);
	СтруктураВозврата.Вставить("ТребуетсяSMSАвторизация", Ложь);
	СтруктураВозврата.Вставить("МаскаТелефона");
	СтруктураВозврата.Вставить("ТекстОшибки");
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	Заголовки.Вставить("CustomerID", ИдентификаторОрганизации);
	Заголовки.Вставить("APIVersion", ВерсияAPI);
	Заголовки.Вставить("AvailableAPIVersion", ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена());
	Хеш = СтрокаBase64БезBOM(ДанныеАутентификации.Логин + ":" + ДанныеАутентификации.Пароль, , Истина);
	Заголовки.Вставить("Authorization", "Basic " + Хеш);
	
	Результат = ОбменСБанкамиСлужебный.ОтправитьPOSTЗапрос(
		АдресСервера, "Logon", Заголовки, Неопределено, , 30, НастройкаОбмена);
		
	Если Не Результат.Статус Тогда
		Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'Ошибка отправки данных аутентификации на сервер банка.
								|Адрес ресурса: %1
								|Код ошибки: %2
								|%3.'");
			ТекстОшибки = СтрШаблон(
				Шаблон, АдресСервера + "/Logon", Результат.КодСостояния, Результат.СообщениеОбОшибке);
		Иначе
			Шаблон = НСтр("ru = 'Ошибка отправки данных аутентификации на сервер банка.
								|Адрес ресурса: %1
								|Ошибка: %2'");
			ТекстОшибки = СтрШаблон(Шаблон, АдресСервера + "/Logon", Результат.СообщениеОбОшибке);
		КонецЕсли;
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ОбработатьОшибку(ОписаниеОперации, ТекстОшибки, , НастройкаОбмена);
		СтруктураВозврата.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Результат.Тело.Записать(ИмяФайлаРезультата);
	
	Чтение = Новый ЧтениеXML;
	
	Попытка
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение);
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.УстаревшаяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
		Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ПакетТип = ОбменСБанкамиСлужебный.ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(Чтение, ПакетТип);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка чтения ответа банка.'");
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ШаблонОшибки = НСтр("ru = 'При чтении ответа банка произошла ошибка.
								|Файл ответа: %1
								|Ошибка: %2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ИмяФайлаРезультата, ПодробноеПредставлениеОшибки);
		ОбработатьОшибку(ОписаниеОперации, ТекстОшибки, , НастройкаОбмена);
		СтруктураВозврата.ТекстОшибки = ТекстСообщения;
		Возврат СтруктураВозврата;
	КонецПопытки;

	Если НЕ ResultBank.Success = Неопределено Тогда
		Если НЕ ResultBank.Success.LogonResponse = Неопределено Тогда
			Если НЕ ResultBank.Success.LogonResponse.ExtraAuth = Неопределено Тогда
				СтруктураВозврата.ТребуетсяSMSАвторизация = Истина;
				СтруктураВозврата.МаскаТелефона = ResultBank.Success.LogonResponse.ExtraAuth.OTP.phoneMask;
			КонецЕсли;
			Чтение.Закрыть();
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаРезультата);
			СтруктураВозврата.Успех = Истина;
			СтруктураВозврата.ИдентификаторСессии = ResultBank.Success.LogonResponse.SID;
		Иначе
			ТекстСообщения = НСтр("ru = 'Получен некорректный ответ банковского сервиса'");
			ТекстОшибки = НСтр("ru = 'Ответ банка содержит некорректные данные.
									|Файл ответа банка: %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайлаРезультата);
			ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
			ОбработатьОшибку(ОписаниеОперации, ТекстОшибки, , НастройкаОбмена);
			СтруктураВозврата.ТекстОшибки = ТекстСообщения;
			Возврат СтруктураВозврата;
		КонецЕсли
	ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
		ТекстОшибки = ОбменСБанкамиСлужебный.ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ОбработатьОшибку(ОписаниеОперации, ТекстОшибки, , НастройкаОбмена);
		Если ResultBank.Error.Code = "1201" Тогда // неверные данные аутентификации
			СтруктураВозврата.НеверныеДанныеАутентификации = Истина;
		КонецЕсли;
		СтруктураВозврата.ТекстОшибки = ТекстОшибки;
	КонецЕсли;
	Чтение.Закрыть();
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаРезультата);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает двоичные данные файла, содержащего данные для аутентификации на сервере банка по сертификату.
// Может вызывать исключение.
//
// Параметры:
//  ДанныеСертификата - ДвоичныеДанные - данные сертификата для аутентификации на ресурсе банка;
//  ВерсияФормата - Строка - версия схемы обмена с банком.
//
// Возвращаемое значение:
//  ДвоичныеДанные - данные файла аутентификации.
//
Функция ДанныеДляАутентификацииПоСертификату(ДанныеСертификата, ВерсияФормата)
	
	Операция = НСтр("ru = 'Формирование электронного документа.'");
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);

	ТекстОшибки = "";
	
	Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
	
	Попытка
		ЭД = ОбъектТипаCML(Фабрика, "X509Data", ПространствоИмен);
		УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
		ЗаполнитьСвойствоXDTO(ЭД, "id", УникальныйИдентификатор, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);

		ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ВерсияПрограммыКлиентаДляБанка = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
		ЗаполнитьСвойствоXDTO(ЭД, "userAgent", ВерсияПрограммыКлиентаДляБанка, , ТекстОшибки);
		Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
		ЗаполнитьСвойствоXDTO(
			ЭД, "X509IssuerName", Сертификат.Издатель.CN, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
			ЭД, "X509SerialNumber", Сертификат.СерийныйНомер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "X509Certificate", ДанныеСертификата, Истина, ТекстОшибки);
		ЭД.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Возврат ОбменСБанкамиСлужебный.ДвоичныеДанныеИзXDTO(Фабрика, ЭД, Ложь);
	
КонецФункции

#КонецОбласти

#Область ЗапросыВыписок

// Формирует запросы выписок для отправки в банк
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//  ПараметрыПолученияВыписки - Структура из ОбменСБанкамиКлиентСервер.ПараметрыПолученияВыпискиБанка() - параметры получения выписки.
//  МассивОтпечатковСертификатов - Массив из Строка - (возвращаемое значение) дополняет массив строк - отпечатков сертификатов, отпечатками сертификатов на сервере.
//  ПараметрыОбмена - Структура из ОбменСБанкамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику- (возвращаемое значение) настройки обмена.
//  АвтоматическоеПолучение - Булево - если Истина, то запрос создается автоматически в регламентном задании или при синхронизации.
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.СообщениеОбменСБанками - содержит ссылки на документы.
//
Функция ЗапросыВыписок(
	Знач НастройкаОбмена,
	Знач ПараметрыПолученияВыписки,
	МассивОтпечатковСертификатов = Неопределено,
	ПараметрыОбмена = Неопределено,
	АвтоматическоеПолучение = Ложь) Экспорт
	
	НастройкиОбмена = ОбменСБанкамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(НастройкаОбмена, Истина,
		МассивОтпечатковСертификатов, Неопределено, , Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
		
	Если НастройкиОбмена.Результат <> "НастройкиОпределены" Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если НастройкиОбмена.ПараметрыОбмена.Подписывать
		И НЕ ОбменСБанкамиКлиентСервер.ЕстьДоступныеСертификаты(НастройкиОбмена.ПараметрыОбмена, Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ДатаНачала = ПараметрыПолученияВыписки.ДатаНачала;
	ДатаОкончания = ПараметрыПолученияВыписки.ДатаОкончания;
	НомерСчета = ПараметрыПолученияВыписки.НомерСчета;
	
	// При автоматическом получении выписки и при синхронизации
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ОбменСБанкамиСлужебный.ДатаНачалаЗапросаВыписки(НастройкаОбмена);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = ТекущаяДатаСеанса();
	КонецЕсли;
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ПрограммаБанка, ИспользуетсяКриптография");
	
	МассивБанковскихСчетов = Новый Массив;
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		МассивБанковскихСчетов.Добавить(НомерСчета);
	Иначе
		ОбменСБанкамиПереопределяемый.ПолучитьНомераБанковскихСчетов(
			РеквизитыНастройкиОбмена.Организация, РеквизитыНастройкиОбмена.Банк, МассивБанковскихСчетов);
	КонецЕсли;
		
	Если РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн Тогда
		МассивСообщенийЗапросов = МассивЗапросовВыписки(НастройкаОбмена, РеквизитыНастройкиОбмена.Организация,
			РеквизитыНастройкиОбмена.Банк, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов);
	Иначе
		МассивСообщенийЗапросов = ОбменСБанкамиСлужебный.МассивЗапросовВыпискиАсинхронныйОбмен(
			НастройкаОбмена, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов, АвтоматическоеПолучение);
	КонецЕсли;
		
	Если НЕ МассивСообщенийЗапросов.Количество() Тогда
		Возврат МассивСообщенийЗапросов;
	КонецЕсли;
	
	Если РеквизитыНастройкиОбмена.ИспользуетсяКриптография Тогда
		ОбменСБанкамиСлужебный.ДобавитьОтпечаткиСертификатовНаСервере(МассивОтпечатковСертификатов);
	КонецЕсли;
	
	ПараметрыОбмена = НастройкиОбмена.ПараметрыОбмена;
	
	Возврат МассивСообщенийЗапросов;
	
КонецФункции

Функция ЗапросВыпискиCMLXDTO(ДатаНачала, ДатаКонца, МассивБанковскихСчетов, Банк)
	
	Попытка
		URI = "urn:1C.ru:ClientBankExchange";
		
		Пакет = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI,"ClientBankExchange"));
		Пакет.ВерсияФормата = "1.08";
		Пакет.Получатель = Банк.Наименование;
		Пакет.Отправитель = "1С: Предприятие";
		Пакет.ДатаСоздания = ТекущаяДатаСеанса();
		Пакет.ВремяСоздания = ТекущаяДатаСеанса();
		
		УсловияОтбора = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI,"УсловияОтбора"));
		УсловияОтбора.ДатаНачала = ДатаНачала;
		УсловияОтбора.ДатаКонца = ДатаКонца;
		Для Каждого НомерСчета Из МассивБанковскихСчетов Цикл
			УсловияОтбора.РасчСчет.Добавить(НомерСчета);
		КонецЦикла;
		
		Пакет.УсловияОтбора = УсловияОтбора;
		
		Пакет.Проверить();
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Пакет;
	
КонецФункции

Функция МассивЗапросовВыписки(НастройкаОбмена, Организация, Банк, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов)
	
	ПакетXDTO = ЗапросВыпискиCMLXDTO(ДатаНачала, ДатаОкончания, МассивБанковскихСчетов, Банк);
		
	Если ПакетXDTO = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла("xml");
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПолноеИмяФайла);
	Запись.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(
		Запись, ПакетXDTO, "ClientBankExchange", "urn:1C.ru:ClientBankExchange", , НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ФайловаяСистема.УдалитьВременныйФайл(ПолноеИмяФайла);
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("ДатаНачала", ДатаНачала);
	СтруктураРеквизитов.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураРеквизитов.Вставить("ФорматФайла", "xml");
	
	СообщениеЗапрос = Неопределено;
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеЗапрос);
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(СообщениеЗапрос);
	
	Возврат МассивВозврата;
	
КонецФункции

// Определяет, требуется ли подпись запроса выписки.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
// 
// Возвращаемое значение:
//  Булево - признак подписи запроса выписки банка.
//
Функция ПодписываетсяЗапросВыписки(Знач НастройкаОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|ГДЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка = &Ссылка
	|	И
	|		НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ЗапросВыписки)";
	Запрос.УстановитьПараметр("Ссылка", НастройкаОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИспользоватьЭП;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ОбменСБанкомЧерезДополнительнуюОбработку

// Обрабатывает ответ банка на отправку платежных документов
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  ПакетыЭДО - Соответствие - набор пакетов
//    * Ключ - ДокументСсылка.ПакетОбменСБанками - ссылка на документ ПакетОбменСБанками
//  ДанныеОтвета  - Соответствие - данные ответа банка
//  ОтправленныеДокументы - Массив - владельцы отправленных электронных документов
//    * ДокументСсылка - ссылка на владельца отправленного электронного документа.
//  СообщенияОбменаДляПодтверждения - Массив - документы, требующие подтверждения
//    * ДокументСсылка.СообщенияОбменСБанками - сообщение для подтверждения.
//
Процедура ОбработатьОтветБанкаПослеОтправкиДокументовЧерезВнешнююОбработку(
	Знач НастройкаОбмена,
	Знач ПакетыЭДО,
	Знач ДанныеОтвета,
	ОтправленныеДокументы,
	СообщенияОбменаДляПодтверждения) Экспорт
	
	Для Каждого Элемент Из ПакетыЭДО Цикл
		Параметры = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.Отправлен);
		ОбновитьСтатусыДокументовПакетаЭДО(Элемент.Ключ, Перечисления.СтатусыПакетовЭД.Отправлен, Параметры);
	КонецЦикла;
	
	МассивОтправленныхСообщенийОбмена = Новый Массив;
	СообщенияОбменаДляПодтверждения = Новый Массив;
	
	Для Каждого Ответ Из ДанныеОтвета Цикл
		
		СообщениеОбмена = ОбменСБанкамиСлужебный.СообщениеОбменаПоИдентификатору(НастройкаОбмена, Строка(Ответ.Ключ));
		
		Если Не ЗначениеЗаполнено(СообщениеОбмена) Тогда
			ТекстСообщения = НСтр("ru = 'Получены некорректные данные из банка.'");
			ТекстОшибки = НСтр("ru = 'Не найдено исходное сообщение обмена по идентификатору: %1.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Ответ.Ключ);
			ВидОперации = НСтр("ru = 'Чтение данных ответа банка'");
			ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		Если ЗначениеЗаполнено(Ответ.Значение.Идентификатор) Тогда
			МассивОтправленныхСообщенийОбмена.Добавить(СообщениеОбмена);
			Если Ответ.Значение.Статус = "30" Тогда
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.НеПодтвержден);
				СообщенияОбменаДляПодтверждения.Добавить(СообщениеОбмена);
			Иначе
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Доставлен);
			КонецЕсли;
			СтруктураПараметров.Вставить("ВнешнийИдентификатор", Ответ.Значение.Идентификатор);
		Иначе
			СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
			СтруктураПараметров.Вставить("ПричинаОтклонения", Ответ.Значение.ТекстОшибки);
		КонецЕсли;

		
		ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);

	КонецЦикла;
	
	Если МассивОтправленныхСообщенийОбмена.Количество() Тогда
		ОтправленныеДокументы = ВладельцыСообщенийОбмена(МассивОтправленныхСообщенийОбмена);
	КонецЕсли;

КонецПроцедуры

// Производит сериализацию данных.
//
// Параметры:
// Значение - Произвольный - данные для сериализации.
//
// Возвращаемое значение:
//  Строка - сериализованные данные.
//
Функция СериализованныеДанные(Знач Значение) Экспорт

	Если Значение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ОбъектXDTO = Сериализатор.ЗаписатьXDTO(Значение);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);

	Возврат ЗаписьXML.Закрыть();

КонецФункции

// Производит десериализацию данных.
//
// Параметры:
// ПредставлениеXML - Строка - сериализованные данные.
//
// Возвращаемое значение:
//  Произвольный - десериализованные данные.
//
Функция ДеСериализованныеДанные(Знач ПредставлениеXML) Экспорт

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПредставлениеXML);
	ЧтениеXML.Прочитать();

	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	Возврат Сериализатор.ПрочитатьXML(ЧтениеXML);
	
КонецФункции

// Получает структуру данных электронных документов для последующего формирования ЭП.
//
// Параметры
//  МассивСообщений  - Массив
//    * ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение.
//
// Возвращаемое значение:
//  Структура - содержит данные для обработки на клиенте.
//
Функция ДанныеДляФормированияЭПЧерезДопОбработку(Знач МассивСообщений) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("МассивСообщенийБезСхем", Новый Массив);
	СтруктураВозврата.Вставить("МассивСообщенийСоСхемами", Новый Массив);
	СтруктураВозврата.Вставить("МассивТекстовыхДанныхЭД", Новый Массив);
	СтруктураВозврата.Вставить("МассивДанныхСхем", Новый Массив);
	
	Для Каждого Сообщение Из МассивСообщений Цикл
		СообщениеСхема = ОбменСБанкамиСлужебный.ПодчиненноеСообщениеОбмена(
			Сообщение, Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные, Ложь);
		Если ЗначениеЗаполнено(СообщениеСхема) Тогда
			СтруктураВозврата.МассивСообщенийСоСхемами.Добавить(Сообщение);
			ДвоичныеДанные = ДвоичныеДанныеПрисоединенногоФайла(СообщениеСхема);
			СтруктураВозврата.МассивДанныхСхем.Добавить(ДвоичныеДанные);
		Иначе
			СтруктураВозврата.МассивСообщенийБезСхем.Добавить(Сообщение);
			ДвоичныеДанные = ДвоичныеДанныеПрисоединенногоФайла(Сообщение);
			ВремФайл = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные.Записать(ВремФайл);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ВремФайл);
			ФайловаяСистема.УдалитьВременныйФайл(ВремФайл);
			СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
			СтруктураВозврата.МассивТекстовыхДанныхЭД.Добавить(СтрокаXML);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Сохраняет подписи электронного документа. Используется только для обмена через дополнительную обработку.
//
// Параметры:
//  МассивСообщений  - Массив из ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//  МассивПодписей  - Массив - содержит массив данных подписей;
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат подписи.
//
Процедура СохранитьДанныеПодписей(Знач МассивСообщений, Знач МассивПодписей, Знач Сертификат) Экспорт
	
	КоличествоЭД = МассивСообщений.Количество();
	
	Для Индекс = 0 По КоличествоЭД - 1 Цикл
		ДанныеПроверкиПодписи = Новый Структура;
		ДанныеПроверкиПодписи.Вставить("ДатаПроверкиПодписи", ТекущаяДатаСеанса());
		ДанныеПроверкиПодписи.Вставить("ПодписьВерна", Истина);
		ДобавитьПодпись(МассивСообщений[Индекс], МассивПодписей[Индекс], Сертификат, ДанныеПроверкиПодписи);
	КонецЦикла

КонецПроцедуры

// Производит подключение внешней обработки.
//
// Параметры:
//  ДополнительнаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки - дополнительная обработка;
//  ИмяОбъекта - Строка - идентификатор дополнительной обработки.
//
// Возвращаемое значение:
//  Булево - Истина, если обработка подключена.
//
Функция ПодключитьДополнительнуюОбработку(Знач ДополнительнаяОбработка, ИмяОбъекта = Неопределено) Экспорт

	ИмяОбъекта = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ДополнительнаяОбработка);
	ОбработкаПодключена = ЗначениеЗаполнено(ИмяОбъекта);
	
	Возврат ОбработкаПодключена;
	
КонецФункции

// Производит подключение внешней обработки.
//
// Параметры:
//  ДополнительнаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки - дополнительная обработка.
//
// Возвращаемое значение:
//  Строка - адрес временного хранилища, куда помещается двоичные данные обработки для толстого клиента.
//
Функция АдресДополнительнойОбработки(Знач ДополнительнаяОбработка) Экспорт

	ДвоичныеДанныеМодуля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительнаяОбработка, "ХранилищеОбработки");
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеМодуля);
	
КонецФункции

#КонецОбласти

#Область Сбербанк

Процедура СохранитьВходящееПисьмоСбербанка(НастройкаОбмена, ПисьмоXDTO, ДляВалютногоКонтроля, МассивСообщенийОбмена)
	
	ВнешнийИдентификатор = ПисьмоXDTO.docExtId;
	СообщениеПисьмо = НайтиСообщениеОбмена(НастройкаОбмена, ВнешнийИдентификатор);
	Если СообщениеПисьмо <> Неопределено Тогда // такое письмо уже есть в информационной базе
		Возврат
	КонецЕсли;
	
	СсылкаНаОбъект = СоздатьВходящееПисьмоСбербанк(НастройкаОбмена, ПисьмоXDTO, ДляВалютногоКонтроля);
	
	ДвоичныеДанныеФайлаОтвета = ОбменСБанкамиСлужебный.ДвоичныеДанныеИзXDTO(ФабрикаXDTO, ПисьмоXDTO, , "LetterFromBank");
	СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаОтвета);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.Письмо);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", СсылкаНаХранилище);
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	СтруктураРеквизитов.Вставить("Основной");
	СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", ВнешнийИдентификатор);
	ВходящийНомер = ЗначениеСвойстваXDTO(ПисьмоXDTO, "DocData.docNum");
	СтруктураРеквизитов.Вставить("НомерДокументаОтправителя", ВходящийНомер);
	СтруктураРеквизитов.Вставить("ФорматФайла", "xml");
	
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеПисьмо);
	МассивСообщенийОбмена.Добавить(СообщениеПисьмо);
	
КонецПроцедуры

Процедура ДобавитьПрисоединенныйФайлСбербанк(Владелец, ЭД)
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", Владелец);
	ПолноеИмяФайла = ЗначениеСвойстваXDTO(ЭД, "AttachmentName");

	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
	ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураФайла.ИмяБезРасширения);
	РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураФайла.Расширение);
	ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
	FileDate = ЗначениеСвойстваXDTO(ЭД, "FileDate");
	Если ЗначениеЗаполнено(FileDate) Тогда
		ВремяИзмененияУниверсальное = XMLЗначение(Тип("Дата"), FileDate);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ВремяИзмененияУниверсальное);
	Иначе
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	КонецЕсли;
	ДвоичныеДанныеФайла = Base64Значение(ЗначениеСвойстваXDTO(ЭД, "Body"));
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	Описание = ЗначениеСвойстваXDTO(ЭД, "Description");
	РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище, , Описание);
	
КонецПроцедуры

Функция СоздатьВходящееПисьмоСбербанк(НастройкаОбмена, ЭД, ДляВалютногоКонтроля)
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена, "Организация, Банк");
	
	ПисьмоОбъект = Документы.ПисьмоОбменСБанками.СоздатьДокумент();
	ПисьмоОбъект.Банк = РеквизитыНастройкиОбмена.Банк;
	ПисьмоОбъект.Организация = РеквизитыНастройкиОбмена.Организация;
	ПисьмоОбъект.Направление = Перечисления.НаправленияЭД.Входящий;
	ПисьмоОбъект.ВходящийНомер = ЗначениеСвойстваXDTO(ЭД, "DocData.docNum");
	ДатаСтрокой = ЗначениеСвойстваXDTO(ЭД, "DocData.docDate");
	ПисьмоОбъект.ВходящаяДата = XMLЗначение(Тип("Дата"), ДатаСтрокой);
	ПисьмоОбъект.Дата = ТекущаяДатаСеанса();
	ПисьмоОбъект.ДляВалютногоКонтроля = ДляВалютногоКонтроля;
	
	Attachment = ЗначениеСвойстваXDTO(ЭД, "Attachments.Attachment");
	Если Attachment <> Неопределено Тогда
		ПисьмоОбъект.ЕстьВложение = Истина;
	КонецЕсли;
	ПисьмоОбъект.Идентификатор = ЗначениеСвойстваXDTO(ЭД, "docExtId");
		
	ПисьмоОбъект.Статус = Перечисления.СтатусыОбменСБанками.Получен;
	ПисьмоОбъект.Текст = ЗначениеСвойстваXDTO(ЭД, "AddInfo");
	ПисьмоОбъект.Тема = ЗначениеСвойстваXDTO(ЭД, "Theme");
	ТипПисьмаСтрокой = ЗначениеСвойстваXDTO(ЭД, "Type");
	
	Если ЗначениеЗаполнено(ТипПисьмаСтрокой) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ТипыПисемОбменСБанками.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.ТипыПисемОбменСБанками КАК ТипыПисемОбменСБанками
		               |ГДЕ
		               |	ТипыПисемОбменСБанками.Владелец = &Владелец
		               |	И ТипыПисемОбменСБанками.Наименование = &Наименование
		               |	И ТипыПисемОбменСБанками.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		               |	И НЕ ТипыПисемОбменСБанками.Недействителен
		               |	И НЕ ТипыПисемОбменСБанками.ПометкаУдаления";
		Запрос.УстановитьПараметр("Владелец", НастройкаОбмена);
		Запрос.УстановитьПараметр("Наименование", ТипПисьмаСтрокой);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПисьмоОбъект.ТипПисьма = Выборка.Ссылка;
		Иначе
			НовыйТипПисьма = Справочники.ТипыПисемОбменСБанками.СоздатьЭлемент();
			НовыйТипПисьма.Владелец = НастройкаОбмена;
			НовыйТипПисьма.Наименование = ТипПисьмаСтрокой;
			НовыйТипПисьма.Направление = Перечисления.НаправленияЭД.Входящий;
			НовыйТипПисьма.Записать();
			ПисьмоОбъект.ТипПисьма = НовыйТипПисьма.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ПисьмоОбъект.Записать();
	
	Если ПисьмоОбъект.ЕстьВложение Тогда
		Если ТипЗнч(Attachment) = Тип("ОбъектXDTO") Тогда
			ДобавитьПрисоединенныйФайлСбербанк(ПисьмоОбъект.Ссылка, Attachment);
		Иначе
			Для Каждого Параметр Из Attachment Цикл
				ДобавитьПрисоединенныйФайлСбербанк(ПисьмоОбъект.Ссылка, Параметр);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПисьмоОбъект.Ссылка;
	
КонецФункции

Процедура ДобавитьЗаблокированныеКриптопрофилиСбербанк(УчетнаяЗаписьКлиента, ЗаблокированныеКриптопрофили)
	
	Если ЗначениеСвойстваXDTO(УчетнаяЗаписьКлиента, "blocked") = "1" Тогда
		ИнформацияОКриптопрофилях = ЗначениеСвойстваXDTO(
			УчетнаяЗаписьКлиента, "SignDevices.SignDevice");
		Если ТипЗнч(ИнформацияОКриптопрофилях) = Тип("СписокXDTO") Тогда
			Для каждого ИнформацияОКриптопрофиле Из ИнформацияОКриптопрофилях Цикл
				Если ИнформацияОКриптопрофиле <> Неопределено Тогда
					ИдентификаторКрипропрофиля = ЗначениеСвойстваXDTO(
						ИнформацияОКриптопрофиле, "SignDeviceId");
					Если ЗначениеЗаполнено(ИдентификаторКрипропрофиля) Тогда
						ЗаблокированныеКриптопрофили.Добавить(ИдентификаторКрипропрофиля);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ИнформацияОКриптопрофилях) = Тип("ОбъектXDTO") Тогда
			ИдентификаторКрипропрофиля = ЗначениеСвойстваXDTO(
				ИнформацияОКриптопрофилях, "SignDeviceId");
			Если ЗначениеЗаполнено(ИдентификаторКрипропрофиля) Тогда
				ЗаблокированныеКриптопрофили.Добавить(ИдентификаторКрипропрофиля);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПакетаXMLСтрокойСбербанк(ЭД, НастройкаОбмена, СообщениеОбмена, ТипДокумента, ФродПараметры, ТекстОшибки, Логин = Неопределено)
	
	ТекстОшибки = "";
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	Request = ОбменСБанкамиСлужебный.RequestСбербанк(ИдентификаторОрганизации, ТекстОшибки);
	ПространствоИмен = "http://bssys.com/upg/request";
	ИдентификаторЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Идентификатор");
	ЗаполнитьСвойствоXDTO(Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Request, ТипДокумента, ЭД, Истина, ТекстОшибки);
	
	МассивПодписей = ОбменСБанкамиСлужебный.ПодписиСообщенияОбмена(СообщениеОбмена);
	
	Для Каждого ЭП Из МассивПодписей Цикл
		Подпись = ЭП.Подпись;
		ДвоичныеДанныеСертификата = ЭП.Сертификат.Получить();
		ДанныеСертификата = ИнформацияОСертификатеПодписиСбербанк(ДвоичныеДанныеСертификата);
		Если ДанныеСертификата = Неопределено Тогда
			ВызватьИсключение НСтр("ru='Не найден сертификат установленной подписи'");
		КонецЕсли;
		DigitalSign = ОбъектТипаCML(ФабрикаXDTO, "DigitalSign", "http://bssys.com/upg/request");
		ЗаполнитьСвойствоXDTO(DigitalSign, "Issuer", ДанныеСертификата.Issuer, Истина);
		СтрокаСерийныйНомер = Строка(ДанныеСертификата.SN);
		СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер, " ", "");
		ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
		ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись, Истина);
		
		Если ТипДокумента = "PayDocRu" ИЛИ ТипДокумента = "LetterInBank" ИЛИ ТипДокумента = "ExchangeMessagesWithBank" Тогда
			Fraud = ОбъектТипаCML(ФабрикаXDTO, "Fraud", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьФродПараметрыВXDTO(Fraud, ФродПараметры, Логин);
			ЗаполнитьСвойствоXDTO(DigitalSign, "Fraud", Fraud);
		КонецЕсли;
		Request.Sign.Добавить(DigitalSign);
	КонецЦикла;
	
	Если ТипДокумента = "PayDocRu" ИЛИ ТипДокумента = "LetterInBank" ИЛИ ТипДокумента = "ExchangeMessagesWithBank" Тогда
		Fraud = ОбъектТипаCML(ФабрикаXDTO, "Fraud", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьФродПараметрыВXDTO(Fraud, ФродПараметры, Логин);
		ЗаполнитьСвойствоXDTO(Request, "Fraud", Fraud, Истина, ТекстОшибки);
	КонецЕсли;
	
	Request.Проверить();
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Request, , , , НазначениеТипаXML.Явное);
	СтрокаXML = ЗаписьXML.Закрыть();

	Возврат СтрокаXML;
	
КонецФункции

Функция ПоследняяВходящаяДатаСбербанк(НастройкаОбмена)
	
	Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	
	Выборка = РегистрыСведений.ПараметрыОбменСБанками.Выбрать(Отбор);
	
	Если Выборка.Следующий() Тогда
		Возврат НачалоДня(Выборка.ПоследняяДатаПолученияЭД);
	КонецЕсли;
	
КонецФункции

Процедура УстановитьКонечныеСтатусыЗапросовВыписокСбербанк(НастройкаОбмена, НомерСчета, ДатаЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ЗапросВыписки)
	|	И СообщениеОбменСБанками.ДатаНачала = &ДатаСообщения
	|	И СообщениеОбменСБанками.НомерСчета = &НомерСчета
	|	И СообщениеОбменСБанками.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Доставлен), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Исполнен), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Обработан), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Отправлен), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Принят))";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("ДатаСообщения", ДатаЗапроса);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбменСБанкамиСлужебный.УстановитьСтатусСообщенияОбмена(Выборка.Ссылка, Перечисления.СтатусыОбменСБанками.Обработан);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьШтампыСбербанка(НастройкаОбмена, ВыпискаXDTO)
	
	Если ЗначениеСвойстваXDTO(ВыпискаXDTO, "Docs") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтампов = Новый Соответствие;
	
	Операции = ЗначениеСвойстваXDTO(ВыпискаXDTO, "Docs.TransInfo");
	
	Если ТипЗнч(Операции) = Тип("ОбъектXDTO") Тогда
		ПрочитатьШтампОперацииСбербанк(Операции, ДанныеШтампов);
	Иначе
		Для Каждого Операция Из Операции Цикл
			ПрочитатьШтампОперацииСбербанк(Операция, ДанныеШтампов);
		КонецЦикла;
	КонецЕсли;

	Если ДанныеШтампов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивВнешнихИдентификаторов = Новый Массив;
	
	Для Каждого КлючЗначение Из ДанныеШтампов Цикл
		МассивВнешнихИдентификаторов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.ВнешнийИдентификатор КАК ВнешнийИдентификатор,
	|	СообщениеОбменСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.ВнешнийИдентификатор В(&МассивВнешнихИдентификаторов)
	|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ПлатежноеПоручение)";
	
	Запрос.УстановитьПараметр("МассивВнешнихИдентификаторов", МассивВнешнихИдентификаторов);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеШтампа = ДанныеШтампов.Получить(Выборка.ВнешнийИдентификатор);
		Если ЗначениеЗаполнено(ДанныеШтампа) Тогда
			ДатаСписания = Неопределено;
			ДанныеШтампа.Свойство("ДатаОперации", ДатаСписания);
			ДополнительныеДанные = Новый Структура("ДанныеШтампа, ДатаСписания", ДанныеШтампа, ДатаСписания);
			СтруктураИзменения = Новый Структура("ДополнительныеДанные", ДополнительныеДанные);
			ИзменитьСообщениеОбмена(Выборка.Ссылка, СтруктураИзменения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьВыпискиСбербанка(ЭД, НастройкаОбмена, МассивВыписок, СоздаватьОперацииВыписки)
	
	ВыпискиСбербанка = ЗначениеСвойстваXDTO(ЭД, "Statements.Statement");
	Если ВыпискиСбербанка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ВыпискиСбербанка) = Тип("ОбъектXDTO") Тогда
		СохранитьВыпискуСбербанка(НастройкаОбмена, ВыпискиСбербанка, МассивВыписок, СоздаватьОперацииВыписки);
	Иначе
		Для Каждого ВыпискаXDTO Из ВыпискиСбербанка Цикл
			СохранитьВыпискуСбербанка(НастройкаОбмена, ВыпискаXDTO, МассивВыписок, СоздаватьОперацииВыписки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьВыпискуСбербанка(НастройкаОбмена, ВыпискаXDTO, МассивВыписок, СоздаватьОперацииВыписки)
	
	ВнешнийИдентификатор = ВыпискаXDTO.docId;
	СообщениеВыписка = НайтиСообщениеОбмена(НастройкаОбмена, ВнешнийИдентификатор);
	Если СообщениеВыписка <> Неопределено Тогда // такая выписка уже есть в информационной базе
		МассивВыписок.Добавить(СообщениеВыписка);
	КонецЕсли;
	ДвоичныеДанныеФайлаОтвета = ОбменСБанкамиСлужебный.ДвоичныеДанныеИзXDTO(ФабрикаXDTO, ВыпискаXDTO, , "Statement");
	СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаОтвета);
	ДатаНачала = XMLЗначение(Тип("Дата"), ВыпискаXDTO.beginDate);
	ДатаОкончания = XMLЗначение(Тип("Дата"), ВыпискаXDTO.endDate);

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", СсылкаНаХранилище);
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("ДатаНачала", ДатаНачала);
	СтруктураРеквизитов.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураРеквизитов.Вставить("НомерСчета", ВыпискаXDTO.acc);
	СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", ВнешнийИдентификатор);
	СтруктураРеквизитов.Вставить("ФорматФайла", "xml");

	Если СообщениеВыписка = Неопределено Тогда
		ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеВыписка);
	Иначе
		СтруктураРеквизитов.Вставить("УдалитьЭП");
		СтруктураРеквизитов.Вставить("Дата", ТекущаяДатаСеанса());
		ИзменитьСообщениеОбмена(СообщениеВыписка, СтруктураРеквизитов);
	КонецЕсли;
	ДанныеВыписок = ОбменСБанками.ДанныеВыпискиБанкаТаблицаЗначений(СообщениеВыписка);
	ДанныеВыписки = ДанныеВыписок.Получить(0);
	ОбменСБанкамиСлужебный.ОпределитьИсполненныеПлатежныеПоручения(НастройкаОбмена, ДанныеВыписки);
	ОбменСБанкамиСлужебный.СохранитьДатуПоследнейОперации(НастройкаОбмена, ДатаОкончания);

	СохранитьДанныеЭлектроннойПодписиСбербанк(НастройкаОбмена, ВыпискаXDTO, СообщениеВыписка, СсылкаНаХранилище);

	МассивВыписок.Добавить(СообщениеВыписка);
	
	Если СоздаватьОперацииВыписки Тогда
		ОбменСБанкамиПереопределяемый.ПриПолученииВыписки(СообщениеВыписка);
	КонецЕсли;
	
	СохранитьШтампыСбербанка(НастройкаОбмена, ВыпискаXDTO);
	
	УстановитьКонечныеСтатусыЗапросовВыписокСбербанк(НастройкаОбмена, ВыпискаXDTO.acc, ДатаНачала);
	
КонецПроцедуры

Процедура СохранитьДанныеЭлектроннойПодписиСбербанк(НастройкаОбмена, ВыпискаXDTO, СообщениеВыписка, СсылкаНаХранилище)
	
	ИспользуетсяКриптография = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИспользуетсяКриптография");
	
	Если ИспользуетсяКриптография
		И Не ЗначениеСвойстваXDTO(ВыпискаXDTO, "Sign") = Неопределено Тогда
		СерийныйНомерСертификатаБанка = НРег(СтрЗаменить(ЗначениеСвойстваXDTO(ВыпискаXDTO, "Sign.SN"), "", ""));
		ДанныеСертификата = ОбменСБанкамиСлужебный.ДанныеСертификатаБанка(
			НастройкаОбмена, СерийныйНомерСертификатаБанка);
		Если ДанныеСертификата = Неопределено Тогда
			ШаблонСообщения = НСтр("ru = 'Получен документ из банка, подписанный неизвестным сертификатом.
										|Серийный номер сертификата: %1
										|Документ: %2
										|Документ будет сохранен без подписи.
										|Обновите настройки обмена или обратитесь в техническую поддержку.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СерийныйНомерСертификатаБанка, СообщениеВыписка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, );
		Иначе
			
			ДайджестBase64 = ОбменСБанкамиСлужебный.ДайджестСбербанк(
			Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка, СсылкаНаХранилище, НастройкаОбмена);
		
			АдресХранилища = ПоместитьВоВременноеХранилище(Base64Значение(ДайджестBase64));
		
			СтруктураРеквизитов = Новый Структура;
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
			СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
			СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
			СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
			СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
			СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеВыписка);
			СтруктураРеквизитов.Вставить("ФорматФайла", "txt");
			
			ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов);
			
			Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
			ВладелецПодписи = ВыпискаXDTO.Sign.issuer;
			ДвоичныеДанныеПодписи = Base64Значение(ВыпискаXDTO.Sign.value);
			ДатаУстановкиПодписи = ЭлектроннаяПодпись.ДатаПодписания(ДвоичныеДанныеПодписи);
			ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи,
									 ТекущаяДатаСеанса());
			СвойстваПодписи = Новый Структура;
			СвойстваПодписи.Вставить("Подпись", ДвоичныеДанныеПодписи);
			СвойстваПодписи.Вставить("УстановившийПодпись", Пользователи.АвторизованныйПользователь());
			СвойстваПодписи.Вставить("ДатаПодписи", ДатаУстановкиПодписи);
			СвойстваПодписи.Вставить("Сертификат", ДанныеСертификата);
			СвойстваПодписи.Вставить("Отпечаток", Сертификат.Отпечаток);
			СвойстваПодписи.Вставить("КомуВыданСертификат", ВладелецПодписи);
			МассивФайлов = Новый Массив;
			РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СообщениеВыписка, МассивФайлов);
			ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеВыписка);
			ЭлектроннаяПодпись.ДобавитьПодпись(ПрисоединенныйФайл, СвойстваПодписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура СохранитьПисьмаСбербанка(ЭД, НастройкаОбмена, МассивСообщенийОбмена, ДляВалютногоКонтроля = Ложь)
	
	Если ДляВалютногоКонтроля Тогда
		ПисьмаСбербанка = ЗначениеСвойстваXDTO(
			ЭД, "ExchangeMessagesFromBank.ExchangeMessageFromBank");
	Иначе
		ПисьмаСбербанка = ЗначениеСвойстваXDTO(ЭД, "LettersFromBank.LetterFromBank");
	КонецЕсли;
	
	Если ПисьмаСбербанка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ПисьмаСбербанка) = Тип("ОбъектXDTO") Тогда
		СохранитьВходящееПисьмоСбербанка(НастройкаОбмена, ПисьмаСбербанка, ДляВалютногоКонтроля, МассивСообщенийОбмена);
	Иначе
		Для Каждого ПисьмоXDTO Из ПисьмаСбербанка Цикл
			СохранитьВходящееПисьмоСбербанка(НастройкаОбмена, ПисьмоXDTO, ДляВалютногоКонтроля, МассивСообщенийОбмена);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьПараметрОперацииСбербанк(Параметр, ДанныеШтампа)
	
	Если Параметр.Name = "StampBankName" Тогда
		ДанныеШтампа.Вставить("НаименованиеБанка", Параметр.Value);
	ИначеЕсли Параметр.Name = "StampBranch" Тогда
		ДанныеШтампа.Вставить("Отделение", Параметр.Value);
	ИначеЕсли Параметр.Name = "StampSubBranch" Тогда
		ДанныеШтампа.Вставить("Офис", Параметр.Value);
	ИначеЕсли Параметр.Name = "StampDate" Тогда
		ДанныеШтампа.Вставить("ДатаОперации", Параметр.Value);
	ИначеЕсли Параметр.Name = "StampBIC" Тогда
		ДанныеШтампа.Вставить("БИК", Параметр.Value);
	ИначеЕсли Параметр.Name = "StampStatus" Тогда
		ДанныеШтампа.Вставить("Статус", Параметр.Value);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьШтампОперацииСбербанк(ПлатежноеПоручениеXDTO, ДанныеШтампов)
	
	Если НЕ ЗначениеСвойстваXDTO(ПлатежноеПоручениеXDTO, "Params") = Неопределено Тогда
		ВнешнийИдентификатор = ЗначениеСвойстваXDTO(ПлатежноеПоручениеXDTO, "docid");
		ДанныеШтампа = Новый Структура;
		
		ПараметрыОперации = ЗначениеСвойстваXDTO(ПлатежноеПоручениеXDTO, "Params.Param");
		
		Если ТипЗнч(ПараметрыОперации) = Тип("ОбъектXDTO") Тогда
			ПрочитатьПараметрОперацииСбербанк(ПараметрыОперации, ДанныеШтампа);
		Иначе
			Для Каждого Параметр Из ПараметрыОперации Цикл
				ПрочитатьПараметрОперацииСбербанк(Параметр, ДанныеШтампа);
			КонецЦикла;
		КонецЕсли;
		
		ДанныеШтампов.Вставить(ВнешнийИдентификатор, ДанныеШтампа);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция НайтиСообщениеОбмена(НастройкаОбмена, ВнешнийИдентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеОбменСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.ВнешнийИдентификатор = &ВнешнийИдентификатор
	|	И НЕ СообщениеОбменСБанками.ПометкаУдаления";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("ВнешнийИдентификатор", ВнешнийИдентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения = "", СсылкаОбъект = Неопределено)
	
	ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
		Операция, ТекстОшибки, ТекстСообщения, "ОбменСБанками", СсылкаОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область МетодыXDTO

Процедура ЗаполнитьСвойствоXDTO(
	ОбъектXDTO,
	ИмяСвойства,
	Значение,
	Обязательное = Ложь,
	ТекстОшибки = "",
	УстанавливатьПустыеЗначения = Ложь)

	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
		ОбъектXDTO, ИмяСвойства, Значение, Обязательное, ТекстОшибки, УстанавливатьПустыеЗначения);
	
КонецПроцедуры

Функция ОбъектТипаCML(Фабрика, Путь, URIПространстваИмен)

	Возврат ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, Путь, URIПространстваИмен);

КонецФункции

Функция ЗначениеСвойстваXDTO(ОбъектXDTO, Путь)
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ОбъектXDTO, Путь)
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеПодписи

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр НастройкаОбмена, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных по данной настройке сертификатов.
//
// Параметры:
//  МассивОтпечатковСертификатов - массив - массив отпечатков сертификатов, установленных в хранилище на Клиенте/Сервере
//    (в зависимости от настроек работы с криптографией).
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена, список сертификатов
//    которой требуется получить.
//
// Возвращаемое значение - массив структур сертификатов.
//
Функция МассивСтруктурДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаОбмена = Неопределено)
	
	МассивСтруктурДоступныхСертификатов = Новый Массив;
	
	ТаблицаДоступныхСертификатов = ОбменСБанкамиСлужебный.ТаблицаДоступныхДляПодписиСертификатов(
		МассивОтпечатковСертификатов, НастройкаОбмена);
	Для Каждого ТекЭл Из МассивОтпечатковСертификатов Цикл
		СтрокаТаблицы = ТаблицаДоступныхСертификатов.Найти(ТекЭл, "Отпечаток");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("Отпечаток", ТекЭл);
		СтруктураСертификата.Вставить("Сертификат", СтрокаТаблицы.Ссылка);
		СтруктураСертификата.Вставить("ПарольПолучен", Ложь);
		СтруктураСертификата.Вставить("ПарольСертификата");
		СтруктураСертификата.Вставить("Комментарий", "");
		
		МассивСтруктурДоступныхСертификатов.Добавить(СтруктураСертификата);
	КонецЦикла;
	
	Возврат МассивСтруктурДоступныхСертификатов;
	
КонецФункции

#КонецОбласти

#Область ФоновыеЗадания

// Запускает на сервере фоновое задание по отправке в банк запроса-зонда.
//
// Параметры:
//   ПараметрыОтправки - Структура - первый параметр для процедуры ОбменСБанкамиСлужебный.ОтправитьЗапросЗондВБанк;
//   УникальныйИдентификатор - Строка - идентификатор формы для создания временного хранилища;
//
// Возвращаемое значение:
//   Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияОтправкиЗапросЗондаНаСервере(Знач ПараметрыОтправки, Знач УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка тестового запроса в банк'");
	ПараметрыОтправки.ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
		ПараметрыОтправки.ИдентификаторСессии);

	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросЗондВБанк", ПараметрыОтправки, ПараметрыВыполнения);
	
КонецФункции

// Запускает на сервере фоновое задание по получению извещения о состоянии из банка.
//
// Параметры:
//   ПараметрыПроцедуры - Структура - первый параметр для процедуры ОбменСБанкамиСлужебный.ПолучитьИзвещениеОСостоянииЭДАсинхронно;
//   УникальныйИдентификатор - Строка - идентификатор формы для создания временного хранилища;
//
// Возвращаемое значение:
//   Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияПолученияИзвещенияОСостоянииЭДНаСервере(
	Знач ПараметрыПроцедуры,
	Знач УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение извещения о состоянии электронного документа'");

	ПараметрыПроцедуры.ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
		ПараметрыПроцедуры.ИдентификаторСессии);
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьИзвещениеОСостоянииЭДАсинхронно", ПараметрыПроцедуры, ПараметрыВыполнения);

КонецФункции

#КонецОбласти

#Область ПродвижениеДиректБанк

// Только для внутреннего использования. Получает данные банковского счета организации из документа.
//
// Параметры:
//    ДокументСсылка - ДокументСсылка - Ссылка на документ, в котором указан банковский счет.
//
// Возвращаемое значение:
//    Структура - реквизиты банковского счета:
//     * Организация - ОпределяемыйТип.Организация - ссылка на организацию
//     * Банк - ОпределяемыйТип.БанкОбменСБанками - ссылка на банк
//
Функция ПолучитьДанныеБанковскогоСчетаИзДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументВыборки.#ИмяРеквизитаБанковскийСчет#.#ИмяРеквизитаОрганизация# КАК Организация,
		|	ДокументВыборки.#ИмяРеквизитаБанковскийСчет#.#ИмяРеквизитаБанк# КАК Банк
		|ИЗ
		|	Документ.#ДокументВыборки# КАК ДокументВыборки
		|ГДЕ
		|	ДокументВыборки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ДокументВыборки = ДокументСсылка.Метаданные().Имя;
	ИмяРеквизитаБанковскийСчет = ОбменСБанкамиСлужебный.ИмяПрикладногоРеквизита("ПлатежноеПоручение.СчетОрганизации");
	ИмяРеквизитаОрганизация = ОбменСБанкамиСлужебный.ИмяПрикладногоРеквизита("БанковскийСчетОрганизации.Организация");
	ИмяРеквизитаБанк = ОбменСБанкамиСлужебный.ИмяПрикладногоРеквизита("БанковскийСчетОрганизации.Банк");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяРеквизитаОрганизация#", ИмяРеквизитаОрганизация);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяРеквизитаБанк#", ИмяРеквизитаБанк);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяРеквизитаБанковскийСчет#", ИмяРеквизитаБанковскийСчет);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументВыборки#", ДокументВыборки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Банк) Тогда
		Результат = Новый Структура;
		Результат.Вставить("Организация", Выборка.Организация);
		Результат.Вставить("Банк", Выборка.Банк);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает количество банков из списка расчетных счетов организаций, доступных для настройки обмена через 1С:ДиректБанк.
// 
// Возвращаемое значение:
//    Число - количество банков доступных для настройки обмена через 1С:ДиректБанк.
Функция КоличествоБанковДляПодключенияДиректБанк() Экспорт
	
	БанкиДляОбмена = ОбменСБанкамиСлужебный.БанкиДляНастройкиОбменаЧерезДиректБанк();
	Если БанкиДляОбмена = Неопределено Тогда
		Возврат 0;
	Иначе
		Возврат БанкиДляОбмена.Количество();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Сертификаты

Функция ПрочитатьЦелоеЧисло(ЧтениеДанных, Свойства)
	
	Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(Свойства.РазмерБлока);
	Значение = 0;
	Для Каждого Байт Из Буфер Цикл
		Значение = Значение * 256 + Байт;
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Функция ПрочитатьДвоичныеДанные(ЧтениеДанных, Свойства)
	
	Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(Свойства.РазмерБлока);
	Поток = Новый ПотокВПамяти(Буфер);
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

Функция ПрочитатьAlgorithmIdentifier(ЧтениеДанных, СвойстваКриптосообщения, Свойства = Неопределено, ПроверитьТип = Ложь)
	
	Если Свойства = Неопределено Тогда
		Свойства = ПрочитатьСвойстваБлока(ЧтениеДанных, СвойстваКриптосообщения.Размер);
	КонецЕсли;
	КонецБлока = Свойства.РазмерБлока + ЧтениеДанных.ИсходныйПоток().ТекущаяПозиция();
	Свойства = ПрочитатьСвойстваБлока(ЧтениеДанных, СвойстваКриптосообщения.Размер);
	Если ПроверитьТип И (Свойства.Класс <> "UNIVERSAL" ИЛИ Свойства.Тег <> 6) Тогда // algorithm OBJECT IDENTIFIER
		Возврат Неопределено;
	КонецЕсли;
	ИдентификаторАлгоритма = ПрочитатьОбъектныйИдентификатор(ЧтениеДанных, Свойства);
	
	ПропуститьБлок(ЧтениеДанных, КонецБлока - ЧтениеДанных.ИсходныйПоток().ТекущаяПозиция());
	
	ОбъектныеИдентификаторы = Новый Соответствие;
	ОбъектныеИдентификаторы.Вставить("1.2.643.2.2.9", "GOST R 34.11-94");
	ОбъектныеИдентификаторы.Вставить("1.2.643.2.2.19", "GOST R 34.10-2001");
	
	ОбъектныеИдентификаторы.Вставить("1.2.643.7.1.1.1.1", "GOST R 34.10-2012-256");
	ОбъектныеИдентификаторы.Вставить("1.2.643.7.1.1.1.2", "GOST R 34.10-2012-512");
	ОбъектныеИдентификаторы.Вставить("1.2.643.7.1.1.2.2", "GOST R 34.11-2012-256");
	ОбъектныеИдентификаторы.Вставить("1.2.643.7.1.1.2.3", "GOST R 34.11-2012-512");
	ОбъектныеИдентификаторы.Вставить("1.2.643.7.1.1.3.2", "GOST R 34.10-2012-256 + GOST R 34.11-2012-256");
	ОбъектныеИдентификаторы.Вставить("1.2.643.7.1.1.3.3", "GOST R 34.10-2012-512 + GOST R 34.11-2012-512");
	
	Идентификатор = ОбъектныеИдентификаторы.Получить(ИдентификаторАлгоритма);
	Если Идентификатор = Неопределено Тогда
		Идентификатор = ИдентификаторАлгоритма;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

Функция ПрочитатьСвойстваБлока(ЧтениеДанных, РазмерДанных)
	
	Свойства = Новый Структура;
	
	Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(1);

	МаскаЗначащиеБиты = 127; // 0111 1111
	МаскаСтаршийБит = 128;   // 1000 0000
	
	Свойства.Вставить("Класс", КлассТегаБлока(Буфер[0]));
	Свойства.Вставить("Тег", ТегБлока(Буфер[0]));
		
	// Прочитать размер блока
	Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(1);
	Если Буфер[0] = 128 Тогда // Используется потоковый способ кодирования, т.е. размер блока не указан (окончание блока 00 00)
		РазмерБлока = -1;
	Иначе
		ДлинныйРазмер = Булево(ОперацияПобитовоеИ(Буфер[0], МаскаСтаршийБит));
		Если ДлинныйРазмер Тогда
			КоличествоБайтовПодРазмер = ОперацияПобитовоеИ(Буфер[0], МаскаЗначащиеБиты);
			Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(КоличествоБайтовПодРазмер);
			РазмерБлока = 0;
			Для Каждого Байт Из Буфер Цикл
				РазмерБлока = РазмерБлока * 256 + Байт;
				
				Если РазмерБлока > РазмерДанных Тогда
					ТекстОшибки = НСтр("ru = 'Размер блока превышает размер файла'");
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			КонецЦикла;
		Иначе
			РазмерБлока = ОперацияПобитовоеИ(Буфер[0], МаскаЗначащиеБиты);	
		КонецЕсли;
	КонецЕсли;
	
	Если РазмерБлока > РазмерДанных Тогда
		ТекстОшибки = НСтр("ru = 'Размер блока превышает размер файла'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Свойства.Вставить("РазмерБлока", РазмерБлока);
	
	Возврат Свойства;
	
КонецФункции

Функция ТегБлока(Байт)
	
	МаскаТег = 31; // 0001 1111
	Возврат ОперацияПобитовоеИ(Байт, МаскаТег);

КонецФункции

Функция ПрочитатьОбъектныйИдентификатор(ЧтениеДанных, Свойства)
	
	ОбъектныйИдентификатор = Новый Массив;
	Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(Свойства.РазмерБлока);
	Если Буфер[0] < 40 Тогда
		SID1 = 0;
	ИначеЕсли Буфер[0] < 80 Тогда
		SID1 = 1;
	Иначе
		SID1 = 2;
	КонецЕсли;
	ОбъектныйИдентификатор.Добавить(Формат(SID1, "ЧРГ=; ЧГ="));
	
	// SID2
	ОбъектныйИдентификатор.Добавить(Буфер[0] - SID1 * 40);
	
	// Остальные SID
	Для Индекс = 1 По Буфер.Размер - 1 Цикл
		ОбъектныйИдентификатор.Добавить(Формат(ПрочитатьСоставляющуюОбъектногоИдентификатора(Буфер, Индекс), "ЧРГ=; ЧГ="));
	КонецЦикла;
	
	Возврат СтрСоединить(ОбъектныйИдентификатор, ".");
		
КонецФункции

Функция КлассТегаБлока(Байт)

	МаскаКлассБлока = 192; // 1100 0000
	Класс = ОперацияПобитовоеИ(Байт, МаскаКлассБлока);
	
	Если Класс = 0 Тогда
		Возврат "UNIVERSAL";
	ИначеЕсли Класс = 192 Тогда
		Возврат "PRIVATE";
	ИначеЕсли Класс = 64 Тогда
		Возврат "APPLICATION";
	Иначе
		Возврат "CONTEXT-SPECIFIC";
	КонецЕсли;

КонецФункции

Функция ПрочитатьСоставляющуюОбъектногоИдентификатора(Буфер, ТекущийБайт)
	
	МаскаЗначащиеБиты = 127; // 0111 1111
	МаскаСтаршийБит = 128;   // 1000 0000
	
	Множители = Новый Массив;
	Пока Истина Цикл
		Байт = Буфер[ТекущийБайт];
		ДлинныйРазмер = Булево(ОперацияПобитовоеИ(Буфер[ТекущийБайт], МаскаСтаршийБит));
	 	Если ДлинныйРазмер Тогда
			Множители.Добавить(ОперацияПобитовоеИ(Буфер[ТекущийБайт], МаскаЗначащиеБиты))
		Иначе
			Множители.Добавить(Байт);
			Прервать;
		КонецЕсли;
		
		ТекущийБайт = ТекущийБайт + 1;
		Если ТекущийБайт > Буфер.Размер Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка разбора OID'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	Результат = 0;
	Для Индекс = 0 По Множители.ВГраница() Цикл
		Показатель = Множители.ВГраница() - Индекс;
		Результат = Результат + Множители[Индекс] * Pow(128, Показатель);
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ОперацияПобитовоеИ(Байт1, Байт2)
	
	Буфер1 = БуферИзБайта(Байт1);
	Буфер2 = БуферИзБайта(Байт2);
	Буфер1.ЗаписатьПобитовоеИ(0, Буфер2);
	
	Возврат Буфер1[0];
	
КонецФункции

Функция БуферИзБайта(Байт)
	
	Буфер = Новый БуферДвоичныхДанных(1);
	Буфер[0] = Байт;
	
	Возврат Буфер;
	
КонецФункции

Процедура ПропуститьБлок(ЧтениеДанных, СколькоБайт)
	
	ЧтениеДанных.Пропустить(СколькоБайт);
	
КонецПроцедуры
#КонецОбласти


#КонецОбласти

