// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

#Область ИнтегрируемыеПодсистемы

Функция ПолноеИмяПодсистемы(ИмяПодсистемы) Экспорт
	
	Возврат СтрШаблон("ГосИС.%1", ИмяПодсистемы);
	
КонецФункции

Функция ПредставлениеПодсистемы(Представление = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Возврат НСтр("ru = '<Интеграция>'");
	Иначе
		Возврат Представление;
	КонецЕсли;
	
КонецФункции

Функция МодульКлиент(ИмяПодсистемы) Экспорт
	
	Возврат СтрШаблон("Интеграция%1Клиент", ИмяПодсистемы);
	
КонецФункции

Функция МодульСервер(ИмяПодсистемы) Экспорт
	
	Возврат СтрШаблон("Интеграция%1", ИмяПодсистемы);
	
КонецФункции

Функция МодульКлиентСервер(ИмяПодсистемы) Экспорт
	
	Возврат СтрШаблон("Интеграция%1КлиентСервер", ИмяПодсистемы);
	
КонецФункции

#КонецОбласти

#Область РаботаСДатами

Функция ДатаИзУниверсальнойДаты(Знач Значение, Делитель = 1000, ПриводитьКМестномуВремени = Истина) Экспорт
	
	Значение = '00010101' + Цел(Значение / Делитель);
	
	Если ПриводитьКМестномуВремени Тогда
		Возврат МестноеВремя(Значение);
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФормыДокументовОснований

// Устанавливается свойство ОтображениеПредупрежденияПриРедактировании элемента формы.
//
Процедура ОтображениеПредупрежденияПриРедактировании(Элемент, Отображать) Экспорт
	
	Если Отображать Тогда
		Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Иначе
		Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормыСпискаДокументов

#Область ОтборПоОрганизации

Процедура НастроитьОтборПоОрганизации(Форма, Результат, Префикс = Неопределено, Знач ЗначениеПрефиксы = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Форма.Организации.ЗагрузитьЗначения(Результат);
	ИначеЕсли ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
	ИначеЕсли Результат = Неопределено Или Не ЗначениеЗаполнено(Результат) Тогда
		Форма.Организации.Очистить();
	Иначе
		Форма.Организации.Очистить();
		ЭлементСписка = Форма.Организации.Добавить();
		ЭлементСписка.Значение = Результат;
		Если Не(ЭлементСписка.Значение = Результат) Тогда
			Форма.Организации.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Организации.Количество() = 1 Тогда
		Форма.Организация = Форма.Организации.Получить(0).Значение;
		Форма.ОрганизацииПредставление = Строка(Форма.Организация);
	ИначеЕсли Форма.Организации.Количество() = 0 Тогда
		Форма.Организация = Неопределено;
		Форма.ОрганизацииПредставление = "";
	Иначе
		Форма.Организация = Неопределено;
		Форма.ОрганизацииПредставление = Строка(Форма.Организации);
	КонецЕсли;
	
	Если ЗначениеПрефиксы = Неопределено Тогда
		Префиксы = Новый Массив;
		Префиксы.Добавить("Оформлено");
		Префиксы.Добавить("КОформлению");
	Иначе
		Если ТипЗнч(ЗначениеПрефиксы) = Тип("Строка") Тогда
			Префиксы = Новый Массив();
			Префиксы.Добавить(ЗначениеПрефиксы);
		Иначе
			Префиксы = ЗначениеПрефиксы;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Значение Из Префиксы Цикл
		
		Если Форма.Организации.Количество() > 1 Тогда
			Окончание = "Организации";
		Иначе 
			Окончание = "Организация";
		КонецЕсли;
		
		Если Значение = "Отбор" Тогда
			Постфикс = Окончание;
		Иначе
			Постфикс = "Отбор" + Окончание;
		КонецЕсли;
		
		СтраницыОтбораОрганизация = Форма.Элементы.Найти("Страницы" + Значение + Постфикс);
		Если СтраницыОтбораОрганизация <> Неопределено Тогда
			СтраницыОтбораОрганизация.ТекущаяСтраница = Форма.Элементы["Страница" + Значение + Окончание];
		КонецЕсли;
	КонецЦикла;
	
	Если Префикс <> Неопределено Тогда
		ЭлементОтбораОрганизация = Форма.Элементы.Найти(Префикс + ?(Форма.Организации.Количество() > 1,
		                                                                "Организации",
		                                                                "Организация"));
		Если ЭлементОтбораОрганизация <> Неопределено Тогда
			Форма.ТекущийЭлемент = ЭлементОтбораОрганизация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КомандыНавигационнойСсылки

// Имя команды представляет собой строку формата
// ИнтеграцияИС_КомандаНавигационнойСсылки#<ИмяПодсистемы>#<Действие>[#<Параметр1>#<Параметр2>...]
// где
//	ИнтеграцияИС_КомандаНавигационнойСсылки - постоянный префикс, указывающий принадлежность команды к данному механизму
//	<ИмяПодсистемы> - имя интегрируемой подсистемы, к которой относится команда
//	<Действие> - действие, которое должно быть выполнено по данной команде, см. ПрефиксКоманды...()
//  <Параметр...> - произвольная строка-параметр команды; количество параметров определяется контекстом конкретной команды

Функция ПреобразоватьИмяКомандыНавигационнойСсылкиВоВнутреннийФормат(ИмяКоманды) Экспорт
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ИмяКоманды,
		РазделительКомандыНавигационнойСсылки(),
		Истина);
	
	Возврат ЧастиИмени;
	
КонецФункции


Функция ЭтоИмяКомандыНавигационнойСсылки(ИмяКоманды, ИмяПодсистемы) Экспорт
	
	Префикс = ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы);
	
	Возврат (Лев(ИмяКоманды, СтрДлина(Префикс)) = Префикс);
	
КонецФункции

Функция ЭтоКомандаНавигационнойСсылкиСоздатьОбъект(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[2] = ПрефиксКомандыСоздатьОбъект();
	
КонецФункции

Функция ЭтоКомандаНавигационнойСсылкиОткрытьОбъект(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[2] = ПрефиксКомандыОткрытьОбъект();
	
КонецФункции

Функция ЭтоКомандаНавигационнойСсылкиОткрытьПротоколОбмена(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[2] = ПрефиксКомандыОткрытьПротоколОбмена();
	
КонецФункции


Функция ИмяОбъектаДляСозданияИзВнутреннегоФорматаКомандыНавигационнойСсылки(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[3];
	
КонецФункции

Функция ИмяОбъектаДляОткрытияИзВнутреннегоФорматаКомандыНавигационнойСсылки(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[3];
	
КонецФункции

Функция ИмяКомандыСоздатьОбъект(ИмяПодсистемы, ИмяОбъекта) Экспорт
	
	Возврат
		ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы)
		+ ПрефиксКомандыСоздатьОбъект() + РазделительКомандыНавигационнойСсылки()
		+ ИмяОбъекта;
	
КонецФункции

Функция ИмяКомандыОткрытьОбъект(ИмяПодсистемы, ИмяОбъекта) Экспорт
	
	Возврат
		ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы)
		+ ПрефиксКомандыОткрытьОбъект() + РазделительКомандыНавигационнойСсылки()
		+ ИмяОбъекта;
	
КонецФункции

Функция ИмяКомандыОткрытьПротоколОбмена(ИмяПодсистемы) Экспорт
	
	Возврат
		ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы)
		+ ПрефиксКомандыОткрытьПротоколОбмена();
	
КонецФункции

#КонецОбласти

#Область Перекодировка

// Возвращает индекси вида продукции по переданному параметру и наоборот, а именно:
//  - Алкогольная - 0.
//  - Табак - 1.
//  - Обувь - 2.
// 
// Параметры:
// 	ВидПродукцииИлиИндекс - Число, ПеречислениеСсылка.ВидыПродукцииИС - Параметр расчета индекса или значения по индексу.
// Возвращаемое значение:
// 	Число, ПеречислениеСсылка.ВидыПродукцииИС - Индекс или значение по индексу.
//
Функция ИндексВидаПродукцииИС(ВидПродукцииИлиИндекс) Экспорт
	
	Если ВидПродукцииИлиИндекс = 0 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
	ИначеЕсли ВидПродукцииИлиИндекс = 1 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
	ИначеЕсли ВидПродукцииИлиИндекс = 2 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
	ИначеЕсли ВидПродукцииИлиИндекс = 3 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность");
	ИначеЕсли ВидПродукцииИлиИндекс = 4 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС");
	ИначеЕсли ВидПродукцииИлиИндекс = 5 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины");
	ИначеЕсли ВидПродукцииИлиИндекс = 6 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты");
	ИначеЕсли ВидПродукцииИлиИндекс = 7 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи");
	ИначеЕсли ВидПродукцииИлиИндекс = 8 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды");
	ИначеЕсли ВидПродукцииИлиИндекс = 9 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски");
	ИначеЕсли ВидПродукцииИлиИндекс = 10 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак");
	ИначеЕсли ВидПродукцииИлиИндекс = 11 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода");
	ИначеЕсли ВидПродукцииИлиИндекс = 12 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС");
	
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		Возврат 0;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		Возврат 1;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		Возврат 2;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность") Тогда
		Возврат 3;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат 4;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		Возврат 5;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты") Тогда
		Возврат 6;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
		Возврат 7;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
		Возврат 8;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски") Тогда
		Возврат 9;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
		Возврат 10;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		Возврат 11;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
		Возврат 12;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СобытияОповещения

// Имя события представляет собой строку формата
// ИнтеграцияИС_СобытиеОповещения#<ИмяПодсистемы>#<Действие>[#<Параметр1>#<Параметр2>...]
// где
//	ИнтеграцияИС_СобытиеОповещения - постоянный префикс, указывающий принадлежность события к данному механизму
//	<ИмяПодсистемы> - имя интегрируемой подсистемы, к которой относится событие
//	<Действие> - действие, которое инициировало данное событие, см. ПрефиксСобытия...()
//  <Параметр...> - произвольная строка-параметр события; количество параметров определяется контекстом конкретного события

Функция ПреобразоватьИмяСобытияОповещенияВоВнутреннийФормат(ИмяСобытия) Экспорт
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ИмяСобытия,
		РазделительСобытияОповещения(),
		Истина);
	
	Возврат ЧастиИмени;
	
КонецФункции


Функция ЭтоИмяСобытияОповещения(ИмяСобытия, ИмяПодсистемы) Экспорт
	
	Префикс = ОбщийПрефиксСобытияОповещения(ИмяПодсистемы);
	
	Возврат (Лев(ИмяСобытия, СтрДлина(Префикс)) = Префикс);
	
КонецФункции

Функция ЭтоСобытиеОповещенияИзмененОбъект(ОписаниеСобытия) Экспорт
	
	Возврат ОписаниеСобытия[2] = ПрефиксСобытияИзмененОбъект();
	
КонецФункции

Функция ЭтоСобытиеОповещенияИзмененоСостояние(ОписаниеСобытия) Экспорт
	
	Возврат ОписаниеСобытия[2] = ПрефиксСобытияИзмененоСостояние();
	
КонецФункции

Функция ЭтоСобытиеОповещенияВыполненОбмен(ОписаниеСобытия) Экспорт
	
	Возврат ОписаниеСобытия[2] = ПрефиксСобытияВыполненОбмен();
	
КонецФункции


Функция ИмяИзмененногоОбъектаИзВнутреннегоФорматаСобытияОповещения(ОписаниеСобытия) Экспорт
	
	Возврат ОписаниеСобытия[3];
	
КонецФункции

Функция ИмяСобытияИзмененОбъект(ИмяПодсистемы, ИсточникИмениОбъекта = Неопределено) Экспорт
	
	Если ИсточникИмениОбъекта = Неопределено Тогда
		ИмяОбъекта = "";
	ИначеЕсли ТипЗнч(ИсточникИмениОбъекта) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИмяОбъекта = ИмяОбъектаИзИмениФормы(ИсточникИмениОбъекта);
	Иначе
		ИмяОбъекта = ИсточникИмениОбъекта;
	КонецЕсли;
	
	Возврат
		ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
		+ ПрефиксСобытияИзмененОбъект() + РазделительСобытияОповещения()
		+ ИмяОбъекта;
	
КонецФункции

Функция ИмяСобытияИзмененоСостояние(ИмяПодсистемы) Экспорт
	
	Возврат
		ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
		+ ПрефиксСобытияИзмененоСостояние();
	
КонецФункции

Функция ИмяСобытияОбновитьКэшМаркируемойПродукции(ИмяПодсистемы) Экспорт
	
	Возврат
		ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
		+ ПрефиксСобытияОбновитьКэшМаркируемойПродукции();
	
КонецФункции

Функция ИмяСобытияВыполненОбмен(ИмяПодсистемы) Экспорт
	
	Возврат
		ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
		+ ПрефиксСобытияВыполненОбмен();
	
КонецФункции

Функция ИмяСвойстваОбновлятьСтатусВФормахДокументов(ИмяПодсистемы) Экспорт
	
	Возврат СтрШаблон("ОбновлятьСтатус%1ВФормахДокументов", ИмяПодсистемы);
	
КонецФункции

#КонецОбласти

#Область ТекстыСтандартныхСообщений

Функция ТекстКомандаНеМожетБытьВыполнена() Экспорт
	Возврат НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'");
КонецФункции

#КонецОбласти

#Область Прочие

Функция ИмяОбъектаИзИмениФормы(Форма, ПолноеИмя = Истина) Экспорт
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	
	Если ПолноеИмя Тогда
		ИмяОбъекта = ЧастиИмени[0] + "." + ЧастиИмени[1];
	Иначе
		ИмяОбъекта = ЧастиИмени[1];
	КонецЕсли;
	
	Возврат ИмяОбъекта;
	
КонецФункции

//Преобразует массив в соответствие с ключами, соответствующими элементам массива.
//
//Параметры:
//   Источник - Массив - преобразуемый массив
//   ЗначениеПоУмолчанию - Произвольный - значение соответствия для заполнения
//Возвращаемое значение:
//   Соответствие - результат преобразования
//
Функция МассивВСоответствие(Источник, Знач ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Для Каждого ЭлементМассива Из Источник Цикл
		Результат.Вставить(ЭлементМассива, ЗначениеПоУмолчанию);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует таблицу формы в массив структур. В первом элементе структура колонок.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция - исходная таблица значений.
//  Колонки      - Строка               - наименования колонок для копирования.
//
// Возвращаемое значение:
//  Массив - коллекция строк таблицы в виде структур.
//
Функция ТаблицаФормыВМассив(ТаблицаФормы, Колонки) Экспорт
	
	Массив = Новый Массив;
	НоваяСтрока = Новый Структура(Колонки);
	Массив.Добавить(НоваяСтрока);
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат Массив;
	КонецЕсли;
	Для Каждого Строка Из ТаблицаФормы Цикл
		НоваяСтрока = Новый Структура(Колонки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

КонецФункции

// Преобразует массив структур в таблицу формы. В первом элементе структура колонок.
//
// Параметры:
//  Массив       - Массив               - коллекция строк таблицы в виде структур.
//  ТаблицаФормы - ДанныеФормыКоллекция - заполняемая таблица значений.
//
Процедура МассивВТаблицуФормы(Массив, ТаблицаФормы) Экспорт
	
	ПерваяСтрока = Истина;
	ТаблицаФормы.Очистить();
	Для Каждого Строка Из Массив Цикл
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
		Иначе
			НоваяСтрока = ТаблицаФормы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Конвертирует двоичные данные в Base64
// 
// Параметры:
// 	ДвоичныеДанные - ДвоичныеДанные - Двоичные данные
// Возвращаемое значение:
// 	Строка - Строка в Base64
Функция ДвоичныеДанныеBase64(ДвоичныеДанные) Экспорт
	
	Base64 = Base64Строка(ДвоичныеДанные);
	Base64 = СтрЗаменить(Base64, Символы.ПС, "");
	Base64 = СтрЗаменить(Base64, Символы.ВК, "");
	
	Возврат Base64;
	
КонецФункции

// Возвращает сопоставленное ему перечисление.
//
// Параметры:
//  ТипМаркировкиККТИлиВидПродукции - ПеречислениеСсылка.ТипыМаркировкиККТ,ПеречислениеСсылка.ВидыПродукцииИС - значение
//  перечисления для котороего нужно получить сопоставленное ему перечисление.
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыМаркировкиККТ,ПеречислениеСсылка.ВидыПродукцииИС - значение сопоставленного перечисления
Функция ТипМаркировкиККТПоВидуПродукции(ТипМаркировкиККТИлиВидПродукции) Экспорт
	
	Если ТипМаркировкиККТИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
	ИначеЕсли ТипМаркировкиККТИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
	ИначеЕсли ТипМаркировкиККТИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция");
	ИначеЕсли ТипМаркировкиККТИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает перечень маркируемой продукции, оборот которой фиксируется в ИС МП.
//
// Параметры:
//  ВключатьТабачнуюПродукцию - Булево - Признак включения табачной продукции
//  ВключатьМолочнуюПродукциюВЕТИС - Булево - Признак включения молочной продукции подконтрольной ВетИС
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ВидыПродукцииИС - список видов маркируемой продукции ИСМП.
//
Функция ВидыПродукцииИСМП(ВключатьТабачнуюПродукцию = Ложь, ВключатьМолочнуюПродукциюВЕТИС = Истина) Экспорт
	
	ВидыПродукцииИСМП = Новый Массив();
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность"));
	
	Если ВключатьМолочнуюПродукциюВЕТИС Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС"));
	КонецЕсли;
	
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода"));
	
	Если ВключатьТабачнуюПродукцию Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"));
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак"));
	КонецЕсли;
	
	Возврат ВидыПродукцииИСМП;
	
КонецФункции

// Возвращает признак принадлежности переданного в параметре вида продукции к виду продукции ИС МП.
//
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для анализа
//  ВключатьТабачнуюПродукцию - Булево - Признак включения табачной продукции
//  ВключатьМолочнуюПродукцию - Булево - Признак вкючения молочной продукции
// Возвращаемое значение:
//  Булево - Принадлежность к виду продукции ИСМП.
//
Функция ЭтоПродукцияИСМП(ВидПродукции, ВключатьТабачнуюПродукцию = Ложь, ВключатьМолочнуюПродукцию = Истина) Экспорт
	
	ВидыПродукцииИСМП = ВидыПродукцииИСМП(ВключатьТабачнуюПродукцию, ВключатьМолочнуюПродукцию);
	
	Возврат ВидыПродукцииИСМП.Найти(ВидПродукции) <> Неопределено;

КонецФункции

// Возвращает признак принадлежности переданного в параметре вида продукции к виду продукции МОТП.
//
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для анализа
// Возвращаемое значение:
//  Булево - Принадлежность к виду продукции МОТП.
//
Функция ЭтоПродукцияМОТП(ВидПродукции) Экспорт
	Возврат ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак");
КонецФункции

// Возвращает признак принадлежности переданного в параметре вида продукции к молочной продукции ИСМП.
//
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для анализа
// Возвращаемое значение:
//  Булево - Принадлежность к виду молочной продукции ИСМП.
//
Функция ЭтоМолочнаяПродукцияИСМП(ВидПродукции) Экспорт
	Возврат ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС");
КонецФункции

// Признак возможности маркировки остатков.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Булево - Доступность маркировки остатков товаров для вида продукции.
Функция ВидПродукцииПодлежитМаркировкеОстатков(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Признак возможности перемаркировки переданного вида продукции.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
// Возвращаемое значение:
// 	Булево - Доступность перемаркировки товаров для вида продукции.
Функция ВидПродукцииПодлежитПеремаркировке(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Признак возможности приемки на комиссию от физического лица переданного вида продукции.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
// Возвращаемое значение:
// 	Булево - Доступность приемки на комиссию от физического лица товаров для вида продукции.
Функция ВидПродукцииПодлежитПриемкеНаКомиссию(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Признак использования отчетов о нанесения кодов маркировки в документе маркировки.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Булево - Доступность отчетов о нанесении в документе маркировки.
Функция ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода")
		Или ЭтоПродукцияМОТП(ВидПродукции) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Признак принадлежности к множественному число. Для склонения слов в предложении.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Булево - Множественное или единственное число.
Функция ПредставлениеВидаПродукцииВоМножественномЧисле(ВидПродукции) Экспорт
	Возврат ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода");
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает признак доступности для массива элементов формы.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма, для элементов которой устанавливается признак доступности. 
//  МассивЭлементов  - Массив           - содержит имена элементов формы.
//  Доступно         - Булево           - признак доступности.
//
Процедура УправлениеДоступностьюЭлементовФормы(Форма, МассивЭлементов, Доступно) Экспорт
	
	Для Каждого ИмяЭлемента Из МассивЭлементов Цикл
		ТекущийЭлемент = Форма.Элементы.Найти(ИмяЭлемента);
		
		Если ТекущийЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(ТекущийЭлемент);
		
		Если ТипЭлемента = Тип("КнопкаФормы")
		 Или ТипЭлемента = Тип("ГруппаФормы")
			И (ТекущийЭлемент.Вид = ВидГруппыФормы.Подменю
			Или ТекущийЭлемент.Вид = ВидГруппыФормы.ГруппаКнопок) Тогда
			Форма.Элементы[ИмяЭлемента].Доступность = Доступно;
		Иначе
			Форма.Элементы[ИмяЭлемента].ТолькоПросмотр = Не Доступно;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область Серии

// Функция проверяет необходимость указания серии в строке по статусу.
//
// Параметры:
//  СтатусУказанияСерий - Число - статус указания серии в строке табличной части
// 
// Возвращаемое значение:
//  Булево - в этом статусе требуется указание серий.
//
Функция НеобходимоУказатьСерию(СтатусУказанияСерий) Экспорт
	
	ТребуетсяУказать = Ложь;
	ИнтеграцияИСКлиентСерверПереопределяемый.ПроверитьНеобходимоУказатьСерию(ТребуетсяУказать, СтатусУказанияСерий);
	Возврат ТребуетсяУказать;
	
КонецФункции

#КонецОбласти

#Область Номенклатура

//Формирует представление строки номенклатуры. Переопределяется.
//   Значение по-умолчанию: непустые представления составляющих, через запятую.
//
//Параметры:
//   Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру.
//   Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры.
//   Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//   Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
//   ПоУмолчанию    - Строка                                     - Значение, если номенклатура не заполнена.
//
//Возвращаемое значение:
//   Строка - представление строки номенклатуры
//
Функция ПредставлениеНоменклатуры(Номенклатура, Характеристика, Упаковка = Неопределено, Серия = Неопределено, ПоУмолчанию = Неопределено) Экспорт
	
	Представление = "";
	ИнтеграцияИСКлиентСерверПереопределяемый.ЗаполнитьПредставлениеНоменклатуры(
		Представление, Номенклатура, Характеристика, Упаковка, Серия);
	
	Если Представление = "" Тогда
		МассивФормированияПредставления = Новый Массив;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Номенклатура));
		КонецЕсли;
		Если ЗначениеЗаполнено(Характеристика) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Характеристика));
		КонецЕсли;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Упаковка));
		КонецЕсли;
		Если ЗначениеЗаполнено(Серия) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Серия));
		КонецЕсли;
		Представление = СтрСоединить(МассивФормированияПредставления, ", ");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(ПоУмолчанию) Тогда
		Представление = Строка(ПоУмолчанию);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти

#Область МаркировкаОстатков

// Конвертирует код ТНВЭД в значение для передачаи в ИС МП
// 
// Параметры:
// 	Значение     - Строка                                           - Код ТНВЭД.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид продукции.
// 	Возвращаемое значение:
// 	Строка - Конвертированное значение для передачи.
Функция КодТНВЭДДляПередачиВИСМП(Значение, ВидПродукции = Неопределено) Экспорт
	Если ЭтоПродукцияМОТП(ВидПродукции) Тогда
		Возврат Лев(Значение, 4);
	Иначе
		Возврат Лев(Значение, 2);
	КонецЕсли;
КонецФункции

// Признак необходимости заполнять возрастную категорию при описании остатков
// 
// Параметры:
// 	КодТНВЭД - Строка - Конвертированное значение для передачи см. КодТНВЭДДляПередачиВИСМП
// Возвращаемое значение:
// 	Булево - Требование возрастной категории.
Функция КодТНВЭДТребуетВозрастнуюКатегорию(КодТНВЭД) Экспорт
	Возврат (КодТНВЭД = КодТНВЭДДляВозврастнойКатегории());
КонецФункции

// Начало кода ТНВЭД для которого требуется указание возрастной категории
// 
// Параметры:
// 	
// Возвращаемое значение:
// 	Строка - Начало кода ТНВЭД для которого требуется указание возрастной категории.
Функция КодТНВЭДДляВозврастнойКатегории() Экспорт
	Возврат "63";
КонецФункции

// Возвращает признаки использования параметров описания остатков.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
// 	КодТНВЭД     - Строка - Код ТНВЭД.
// Возвращаемое значение:
// 	Структура - Описание:
// * ИспользоватьНаименование        - Булево - Признак использования наименоваения.
// * ИспользоватьСпособВводаВОборот  - Булево - Признак использования способа ввода в оборот.
// * ИспользоватьМодель              - Булево - Признак использования модели.
// * ИспользоватьВозрастнуюКатегорию - Булево - Признак использования возрастной категории.
// * ИспользоватьЦелевойПол          - Булево - Признак использования целевого пола.
// * ИспользоватьТоварныйЗнак        - Булево - Признак использования товарного знака.
Функция ИспользованиеПараметровОписанияОстатковПоВидуПродукции(ВидПродукции, КодТНВЭД = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИспользоватьЦелевойПол",          Ложь);
	СтруктураПараметров.Вставить("ИспользоватьВозрастнуюКатегорию", Ложь);
	СтруктураПараметров.Вставить("ИспользоватьМодель",              Ложь);
	СтруктураПараметров.Вставить("ИспользоватьСпособВводаВОборот",  Ложь);
	СтруктураПараметров.Вставить("ИспользоватьНаименование",        Ложь);
	СтруктураПараметров.Вставить("ИспользоватьТоварныйЗнак",        Ложь);
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		СтруктураПараметров.ИспользоватьЦелевойПол = Истина;
		СтруктураПараметров.ИспользоватьСпособВводаВОборот = Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность") Тогда
		СтруктураПараметров.ИспользоватьСпособВводаВОборот = Истина;
		Если КодТНВЭД = Неопределено Или ПустаяСтрока(КодТНВЭД) Тогда
			СтруктураПараметров.ИспользоватьВозрастнуюКатегорию = Истина;
			СтруктураПараметров.ИспользоватьЦелевойПол = Истина;
		Иначе
			Если КодТНВЭДТребуетВозрастнуюКатегорию(КодТНВЭД) Тогда
				СтруктураПараметров.ИспользоватьВозрастнуюКатегорию = Истина;
			Иначе
				СтруктураПараметров.ИспользоватьЦелевойПол = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		СтруктураПараметров.ИспользоватьМодель = Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты") Тогда
		СтруктураПараметров.ИспользоватьНаименование = Истина;
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		СтруктураПараметров.ИспользоватьНаименование = Истина;
	КонецЕсли;
	
	Если Не ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		СтруктураПараметров.ИспользоватьТоварныйЗнак = Истина;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает возможность использования способа описания остатков для указанного вида продукции.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
// Возвращаемое значение:
// Булево -
// *Истина      - если возможно использование только полного описания остатков.
// *Ложь        - если возможно использование только упрощенного описания остатков.
// Неопределено - если использование способа описания остатков не ограничено.
Функция ИспользованиеСпособаОписанияОстатков(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		Возврат Ложь;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормыДокументовОснований

Функция ИмяПоляИнтеграцииВФормеДокументаОснования(ИмяПодсистемы) Экспорт
	
	Возврат "Интеграция" + ИмяПодсистемы + "_ИнформацияОДокументах";
	
КонецФункции

Функция ИмяПоляОписанияИнтеграцийВФормеДокументаОснования() Экспорт
	
	Возврат "ИнтеграцияИС_ИнтегрируемыеПодсистемы";
	
КонецФункции

Функция ИнтегрируемыеПодсистемыВФормеДокументаОснования(Форма) Экспорт
	
	ИмяПоля = ИмяПоляОписанияИнтеграцийВФормеДокументаОснования();
	
	СтруктураРеквизитов = Новый Структура(ИмяПоля);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Форма);
	
	Если СтруктураРеквизитов[ИмяПоля] = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Возврат СтруктураРеквизитов[ИмяПоля];
	
КонецФункции

#КонецОбласти

#Область КомандыНавигационнойСсылки

Функция РазделительКомандыНавигационнойСсылки()
	
	Возврат "#";
	
КонецФункции

Функция ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы) Экспорт
	
	Возврат 
		"ИнтеграцияИС_КомандаНавигационнойСсылки" + РазделительКомандыНавигационнойСсылки()
		+ ИмяПодсистемы + РазделительКомандыНавигационнойСсылки();
	
КонецФункции

Функция ПрефиксКомандыСоздатьОбъект()
	
	Возврат "СоздатьОбъект";
	
КонецФункции

Функция ПрефиксКомандыОткрытьОбъект()
	
	Возврат "ОткрытьОбъект";
	
КонецФункции

Функция ПрефиксКомандыОткрытьПротоколОбмена()
	
	Возврат "ОткрытьПротоколОбмена";
	
КонецФункции

#КонецОбласти

#Область СобытияОповещения

Функция РазделительСобытияОповещения()
	
	Возврат "#";
	
КонецФункции

Функция ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
	
	Возврат 
		"ИнтеграцияИС_СобытиеОповещения" + РазделительСобытияОповещения()
		+ ИмяПодсистемы + РазделительСобытияОповещения();
	
КонецФункции

Функция ПрефиксСобытияИзмененОбъект()
	
	Возврат "ИзмененОбъект";
	
КонецФункции

Функция ПрефиксСобытияИзмененоСостояние()
	
	Возврат "ИзмененоСостояние";
	
КонецФункции

Функция ПрефиксСобытияОбновитьКэшМаркируемойПродукции()
	
	Возврат "ОбновитьКэшМаркируемойПродукции";
	
КонецФункции

Функция ПрефиксСобытияВыполненОбмен()
	
	Возврат "ВыполненОбмен";
	
КонецФункции

#КонецОбласти

#Область Ошибки

// Добавляет в свойство структуры сообщения текст ошибки
//
// Параметры:
//  Сообщение    - Структура - сообщение, в которое добавляется текст ошибки.
//  ТекстОшибки  - Строка - добавляемый текст ошибки.
//
Процедура ДобавитьТекстОшибки(Сообщение, ТекстОшибки) Экспорт
	
	Если Сообщение.Ошибки.Получить(ТекстОшибки) <> Неопределено Тогда
		Возврат;
	Иначе
		Сообщение.Ошибки.Вставить(ТекстОшибки, Истина);
	КонецЕсли;
	
	Если ПустаяСтрока(Сообщение.ТекстОшибки) Тогда
		Сообщение.ТекстОшибки = ТекстОшибки;
	Иначе
		Сообщение.ТекстОшибки = Сообщение.ТекстОшибки + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Если Сообщение.Свойство("ТребуетсяПодписание") Тогда
		Сообщение.ТребуетсяПодписание = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст для представления внутренней ошибки библиотек ГосИС.
//
// Параметры:
//  ПредставлениеПодсистемы  - Строка - представление интегрированной подсистемы
//  УточнениеОшибки - Строка - описание возникшей ошибки
//
// Возвращаемое значение:
//	Строка - дополненное описание ошибки
//
Функция ТекстОшибки(Знач ПредставлениеПодсистемы = "", Знач УточнениеОшибки) Экспорт
	
	ПредставлениеПодсистемы = ПредставлениеПодсистемы(ПредставлениеПодсистемы);
	
	ТекстОшибки = 
		СтрШаблон(НСтр("ru='Внутренняя ошибки библиотеки %1.'"),ПредставлениеПодсистемы)
		+ Символы.ПС
		+ УточнениеОшибки;
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПараметрыПредставленияНоменклатуры() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Номенклатура",               Неопределено);
	Параметры.Вставить("Характеристика",             Неопределено);
	Параметры.Вставить("ХарактеристикиИспользуются", Ложь);
	Параметры.Вставить("Серия",                      Неопределено);
	Параметры.Вставить("СерииИспользуются",          Ложь);
	Параметры.Вставить("ТолькоПросмотр",             Неопределено);
	
	Возврат Параметры;
	
КонецФункции

Функция ПредставлениеНоменклатурыФорматированнойСтрокой(Параметры) Экспорт
	
	Номенклатура               = Параметры.Номенклатура;
	Характеристика             = Параметры.Характеристика;
	ХарактеристикиИспользуются = Параметры.ХарактеристикиИспользуются;
	Серия                      = Параметры.Серия;
	СерииИспользуются          = Параметры.СерииИспользуются;
	ТолькоПросмотр             = Параметры.ТолькоПросмотр;
	
	МассивСтрок = Новый Массив;
	
	Если ТолькоПросмотр Тогда
		ЦветТекста = WebЦвета.Серый; // ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
	Иначе
		ЦветТекста = Неопределено;
	КонецЕсли;
	
	ПустоеЗначение = Истина;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ПустоеЗначение = Ложь;
		Если ТолькоПросмотр Тогда
			Ссылка = ПолучитьНавигационнуюСсылку(Номенклатура);
		Иначе 
			Ссылка = "ВыбратьНоменклатуру";
		КонецЕсли;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			СокрЛП(Номенклатура), , ЦветТекста, , Ссылка));
	Иначе
		Если ТолькоПросмотр Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Номенклатура не указана'"),,ЦветТекста));
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'выбрать номенклатуру'"), , , , "ВыбратьНоменклатуру"));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустоеЗначение И ХарактеристикиИспользуются Тогда
	
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
		
		Если ТолькоПросмотр И ЗначениеЗаполнено(Характеристика) Тогда
			Ссылка = ПолучитьНавигационнуюСсылку(Характеристика);
		Иначе
			Ссылка = "ВыбратьХарактеристику";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				СтрШаблон("(%1)", Характеристика), , ЦветТекста, , Ссылка));
		ИначеЕсли ТолькоПросмотр Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = '(характеристика не указана)'"),,ЦветТекста));
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = '(выбрать характеристику)'"), , , , Ссылка));
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ПустоеЗначение И СерииИспользуются Тогда
	
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
		
		Если ТолькоПросмотр И ЗначениеЗаполнено(Серия) Тогда
			Ссылка = ПолучитьНавигационнуюСсылку(Серия);
		Иначе 
			Ссылка = "ВыбратьСерию";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Серия) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				СтрШаблон("(%1)", Серия), , ЦветТекста, , Ссылка));
		ИначеЕсли ТолькоПросмотр Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = '(серия не указана)'"),,ЦветТекста));
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = '(выбрать серию)'"), , , , Ссылка));
		КонецЕсли;
	
	КонецЕсли;

	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

Функция ЗаменитьНечитаемыеСимволы(Знач ИсходнаяСтрока, ЗаменятьПробел = Истина, ЗаменятьНа = "") Экспорт
	
	НечитаемыеСимволы = Новый Массив();
	НечитаемыеСимволы.Добавить(Символы.ВК);
	НечитаемыеСимволы.Добавить(Символы.ВТаб);
	НечитаемыеСимволы.Добавить(Символы.НПП);
	НечитаемыеСимволы.Добавить(Символы.ПС);
	НечитаемыеСимволы.Добавить(Символы.ПФ);
	НечитаемыеСимволы.Добавить(Символы.Таб);
	НечитаемыеСимволы.Добавить(Символ(182)); // символ параграфа
	НечитаемыеСимволы.Добавить(Символ(176)); // символ градуса
	
	Если ЗаменятьПробел Тогда
		НечитаемыеСимволы.Добавить(" ");
	КонецЕсли;
	
	Для Каждого НечитаемыйСимвол Из НечитаемыеСимволы Цикл
		ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, НечитаемыйСимвол, ЗаменятьНа);
	КонецЦикла;
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

Функция ПредставлениеНаименования(Наименование, ОкружатьКавычками = Истина, МаксимальнаяДлина = 30) Экспорт

	Результат = Наименование;
	
	Если СтрДлина(Результат) > МаксимальнаяДлина Тогда
		Результат = Лев(Результат, МаксимальнаяДлина) + "...";
	КонецЕсли;
	
	Если ОкружатьКавычками Тогда
		Если Лев(Результат, 1) <> """" Тогда
			Результат = """" + Результат;
		КонецЕсли;
		Если Прав(Результат, 1) <> """" Тогда
			Результат = Результат + """";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

//Определяет является ли тип упаковки логистической или групповой товарной упаковкой.
//
//Параметры:
//  ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - тип упаковки
//Возвращаемое значение:
//   Булево - Истина, если тип упаковки относится к логистической или товарной.
Функция ЭтоУпаковка(ТипУпаковки) Экспорт
	
	Возврат ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
		Или ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
	
КонецФункции

//Определяет является ли тип упаковки логистической или групповой товарной упаковкой.
//
//Параметры:
//  ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - тип упаковки
//  НеЗаполненКакУпаковка - Булево - Истина если пустой вид рассматривать как "возможно упаковка"
//Возвращаемое значение:
//   Булево - Истина, если тип упаковки относится к логистической или товарной.
Функция ЭтоУпаковкаПоВиду(ВидУпаковки, НеЗаполненКакУпаковка = Ложь) Экспорт
	
	Возврат ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
		Или ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
		Или (НеЗаполненКакУпаковка И ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ПустаяСсылка"));
	
КонецФункции

//Возвращает массив типов упаковок, которые соответствуют коробкам.
//
//Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ТипыУпаковок- Коллекция типов упаковок.
Функция ТипыУпаковокДляКоробок() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка"));
	
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти