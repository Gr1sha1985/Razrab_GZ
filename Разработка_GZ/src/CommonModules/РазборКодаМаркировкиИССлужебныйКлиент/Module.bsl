
#Область СлужебныйПрограммныйИнтерфейс

#Область РазборКодаМаркировки

// Выполняет разбор кода маркировки.
//
// Параметры:
//   ДанныеДляРазбора - Строка, см. МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1 - код маркировки, либо данные разбора.
//   ВидыПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив из ПеречислениеСсылка.ВидыПродукцииИС - фильтр по виду продукции.
//   ПримечаниеКРезультатуРазбора - Структура - содержит:
//      * ИдентификаторОшибки - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазобраКодаМаркировки
//      * ТекстОшибки - Строка
//      * РезультатРазбора - Массив из см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки
//   Настройки - см. РазборКодаМаркировкиИССлужебныйКлиент.НастройкиРазбораКодаМаркировки.
//
// Возвращаемое значение:
//    - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки.
//    - Неопределено - если код маркировки разобрать не удалось.
//
Функция РазобратьКодМаркировки(Знач ДанныеДляРазбора, ВидыПродукции = Неопределено, ПримечаниеКРезультатуРазбора = Неопределено, Знач Настройки = Неопределено, ПроверятьАлфавитЭлементов = Истина) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = РазборКодаМаркировкиИССлужебныйКлиентПовтИсп.НастройкиРазбораКодаМаркировки();
	КонецЕсли;
	
	Возврат РазборКодаМаркировкиИССлужебныйКлиентСервер.РазобратьКодМаркировки(
		ДанныеДляРазбора, ВидыПродукции, ПримечаниеКРезультатуРазбора, Настройки, ПроверятьАлфавитЭлементов, РазборКодаМаркировкиИССлужебныйКлиент);
	
КонецФункции

Функция НормализованныйШтрихкод(Штрихкод, ВидПродукции, КэшДанныхРазбора = Неопределено) Экспорт
	
	НормализованныйШтрихкод = "";
	
	Если КэшДанныхРазбора = Неопределено Тогда
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(Штрихкод, ВидПродукции, ПримечаниеКРезультатуРазбора);
	Иначе
		ДанныеРазбораИРезультат = КэшДанныхРазбора[Штрихкод];
		Если ДанныеРазбораИРезультат <> Неопределено Тогда
			ПримечаниеКРезультатуРазбора = ДанныеРазбораИРезультат.ПримечаниеКРазборуШтрихкода;
			ДанныеРазбора                = ДанныеРазбораИРезультат.ДанныеРазбора;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеРазбора = Неопределено Тогда
		Возврат Штрихкод;
	КонецЕсли;
	
	Если ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
		Или ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковка(ДанныеРазбора.ВидУпаковки, ДанныеРазбора) Тогда
		
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляХэшаНормализации();
		НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			ДанныеРазбора, ВидПродукции, ПараметрыНормализацииКМ);
		
	ИначеЕсли ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		НормализованныйШтрихкод = Штрихкод;
	Иначе
		НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
	КонецЕсли;
	
	Возврат НормализованныйШтрихкод;
	
КонецФункции

#КонецОбласти

#Область НастройкиРазбораКодаМаркировки

Функция НастройкиРазбораКодаМаркировки(ВидыПродукции = Неопределено, ТолькоУчитываемыеВидыПродукции = Истина, ВалидироватьШтрихкодаGS1БезРазделителей = Истина) Экспорт
	Возврат РазборКодаМаркировкиИССлужебныйВызовСервера.НастройкиРазбораКодаМаркировки(ВидыПродукции, ТолькоУчитываемыеВидыПродукции, ВалидироватьШтрихкодаGS1БезРазделителей);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиРазбораКодаМаркировки

Функция МодульОбщегоНазначения() Экспорт
	Возврат ОбщегоНазначенияКлиент;
КонецФункции

Функция ОбщийМодуль(Имя) Экспорт
	Возврат МодульОбщегоНазначения().ОбщийМодуль(Имя);
КонецФункции

Функция ЭтоСервер() Экспорт
	Возврат Ложь;
КонецФункции

#КонецОбласти

#КонецОбласти