
#Область ПрограммныйИнтерфейс

// Функция возвращает основную организацию для текущего пользователя
//
//
// Параметры:
//  Отсутствуют
//
// Результат:
//  СправочникСсылка.Организации - основная организация для текущего пользователя
//
Функция ОсновнаяОрганизация() Экспорт
	
	Возврат ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
КонецФункции

// Предназначена для переопределения состояния сдачи отчетности в контролирующие органы
//
// Параметры:
//  Ссылка  - Справочникссылка, ДокументСсылка - объект, отправляемый в контролирующие органы по ТКС
//  СтатусОтправки  - Строка - Состояние, предназанченно для отображения пользователю, например "Отправлено в ФНС" или "Сдано"
//  СостояниеСдачиОтчетности - Перечисление.СостояниеСдачиОтчетности - отображает текущий результат сдачи отчетности  
//
Процедура ПереопределитьСтатусИСостояниеСдачиОтчетности(Ссылка, СтатусОтправки, СостояниеСдачиОтчетности) Экспорт
	
	ЗарплатаКадры.ПереопределитьСтатусИСостояниеСдачиОтчетности(Ссылка, СтатусОтправки, СостояниеСдачиОтчетности);
	УчетЗарплаты.ПереопределитьСтатусИСостояниеСдачиОтчетности(Ссылка, СтатусОтправки, СостояниеСдачиОтчетности);
	
КонецПроцедуры

// Процедура - Предназначена для заполнения кода органа ФСГС в организации.
// 		Если в организации не задан код органа ФСГС, а во вторичном мастере подключения к 1С-Отчетности
//		пользователь его задал, то указанный код ФСГС должен записываться в организацию 
//		при помощи данной функции.
//		Если код органа ФСГС в организации хранится в реквизите КодОрганаФСГС, то данную
//		процедуру можно не заполнять.
//
// Параметры:
//  Организация			 - Справочники.Организация 	- организация, в которой необходимо изменить код органа ФСГС.
//  НовыйКодОрганаФСГС	 - Строка 					- новый код ФСГС
//  СтандартнаяОбработка - Булево 					- если Ложь, то выполняется действе указанное в данной процедуре,
//														иначе стандартное действие.
Процедура ЗадатьКодОрганаФСГСВОрганизации(Организация, НовыйКодОрганаФСГС, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Процедура - Предназначена для заполнения кода органа ФСГС в подразделении.
//		Если код органа ФСГС в подразделении хранится в реквизите КодОрганаФСГС, то данную
//		процедуру можно не заполнять, имя справочника подразделений определяется с помощью
//		РегламентированнаяОтчетностьПереопределяемый.ИмяСправочникаОбособленныхПодразделений(),
//		возможность использования реквизита - с помощью
//		РегламентированнаяОтчетностьПереопределяемый.ИспользуетсяОтправкаВРосстатПоРазнымНаправлениям().
//
// Параметры:
//  Подразделение		 - СправочникСсылка - подразделение, в которой необходимо изменить код органа ФСГС,
//  НовыйКодОрганаФСГС	 - Строка 			- новый код ФСГС
//  СтандартнаяОбработка - Булево 			- если Ложь, то выполняется действе указанное в данной процедуре,
//												иначе стандартное действие.
Процедура ЗадатьКодОрганаФСГСВПодразделении(Подразделение, НовыйКодОрганаФСГС, СтандартнаяОбработка) Экспорт
КонецПроцедуры

// Заполняется при наличии в конфигурации библиотеки БЭД:
// Заполняет значения элементов структуры, передаваемой в параметрах.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//	 СтруктураПараметров - структура. Возможные поля:
//     ЕстьПодключениеЭДО 		- Булево
//     МассивОператоровЭДО 		- Массив строк
//     СсылкаОписаниеСервиса 	- Строка, ссылка на описание сервиса и условия подключения
// Пример:
//	ЭлектронныеДокументы.ЗаполнитьДанныеПо1СЭДОДляМастера1СОтчетности(Организация, СтруктураПараметров);
//
Процедура ЗаполнитьПараметрыСервисаЭлектронныхДокументовДляФормыПодключенияК1СООтчетности(Организация, СтруктураПараметров) Экспорт
	
	ОбменСКонтрагентами.ЗаполнитьДанныеПо1СЭДОДляМастера1СОтчетности(Организация, СтруктураПараметров);
	
КонецПроцедуры

// Процедура - Изображение (картинка) логотипа организации
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - Организация, для которой
//		необходимо вернуть логотип.
//  Логотип		 - ДвоичныеДанные - ДвоичныеДанные изображения логотипа организации.
//
// Пример:
// 	ДанныеКартинки = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(Организация.ФайлЛоготип);
//	Возврат ДанныеКартинки.ДвоичныеДанные;
Процедура ЛоготипОрганизации(Организация, Логотип) Экспорт
	
	ДанныеЛоготипа = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Организация, "ФайлЛоготип");
	Если ЗначениеЗаполнено(ДанныеЛоготипа) Тогда
		Логотип = ДанныеЛоготипа;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Изображение (картинка) подписи руководителя организации
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - Организация, для которой
//		необходимо вернуть логотип.
//  Подпись		 - ДвоичныеДанные - ДвоичныеДанные изображения подписи организации.
//
// Пример:
// 	ДанныеКартинки = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(Организация.ФайлПодписьРуководителя);
//	Возврат ДанныеКартинки.ДвоичныеДанные;
Процедура ПодписьРуководителя(Организация, Подпись) Экспорт
	
	ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ТекущаяДатаСеанса());
	ДанныеПодписи = УправлениеПечатьюБП.ДвоичныеДанныеФаксимилеФизическогоЛица(ОтветственныеЛицаОрганизации.Руководитель);
	Если ЗначениеЗаполнено(ДанныеПодписи) Тогда
		Подпись = ДанныеПодписи;
	КонецЕсли;
	
КонецПроцедуры

// Переопределение списка кодов видов операций выданных и полученных счетов-фактур.
//
// Параметры:
//  КодыВидовОпераций	 - СписокЗначений - Коды видов операций выданных и полученных счетов-фактур.
//  Дата				 - Дата - Дата, на которую должен быть получен актуальный список кодов.
//  ЭтоПолученныеСФ		 - Булево - Определяет вид счета-фактуры.
// 
Процедура ЗаполнитьСписокКодовВидовОперацийСчетовФактур(СписокКодов, Дата, ЭтоПолученныеСФ) Экспорт
	
КонецПроцедуры

// Позволяет определить, какие реквизиты заявления по 1С-Отчетности могут быть заполнены в базе и получены из нее, 
// а какие не могут (например, если скрыты функциональной опцией, недоступны из-за прав, этих данных нет в базе).
//
// Параметры:
//  Реквизиты - Соответствие - Содержит перечень видов реквизитов и признак - есть ли реквизит в базе или нет:
//      * Ключ - Перечисление.ПараметрыПодключенияК1СОтчетности - одно из следующих значений:
//           * ТелефонОсновной             - основной телефон организации
//           * ТелефонДополнительный       - дополнительный телефон организации
//           * ЭлектроннаяПочта            - электронная почта организации
//           * ВладелецЭЦПДолжность        - должность физического лица или сотрудника не хранится
//           * ВладелецЭЦППодразделение    - подразделение физического лица или сотрудника
//           * ВладелецЭЦПСНИЛС            - СНИЛС физического лица или сотрудника
//           * ДополнительныйКодФСС        - дополнительный код ФСС организации.
//           * ВладелецЭЦПМестоРождения    - место рождения физического лица или сотрудника.
//           * ВладелецЭЦПДатаРождения     - дата рождения физического лица или сотрудника.
//           * ВладелецЭЦПКодПодразделения - код подразделения органиазии, выдавшего документ, удостоверящий личность.
//           * ВладелецЭЦППол              - пол физического лица или сотрудника.
//           * ВладелецЭЦПГражданство      - гражданство физического лица или сотрудника.
//      * Значение - Булево - определяет, хранится ли реквизит в базе или нет. Следует учитывать, что 
//           данное значение может быть установлено различными потребителями и библиотеками. 
//           Поэтому, если флаг уже взведен в Истина, то сбрасывать его не нужно.
//
//  Реквизиты, указанные выше, заполняются следующим образом:
//       Из процедуры РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизации
//           * ТелефонОсновной             - ТелОрганизации
//           * ТелефонДополнительный       - ТелРук
//       Из справочника Организации
//           * ДополнительныйКодФСС        - ДополнительныйКодФСС, если есть в метаданных
//       Из УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта 
//           * ЭлектроннаяПочта            - контактная информация с видом Справочники.ВидыКонтактнойИнформации.EmailОрганизации
//       Из ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДанныеИсполнителя
//           * ВладелецЭЦПДолжность        - Должность
//           * ВладелецЭЦППодразделение    - Подразделение
//           * ВладелецЭЦПСНИЛС            - СНИЛС 
//           * ВладелецЭЦПМестоРождения    - МестоРождения
//           * ВладелецЭЦПДатаРождения     - ДатаРождения
//           * ВладелецЭЦПКодПодразделения - КодПодразделения
//           * ВладелецЭЦППол              - Пол
//           * ВладелецЭЦПГражданство      - Гражданство
//
Процедура ОпределитьНаличиеДанныхДляЗаявленияНаСертификат(Реквизиты, Организация = Неопределено) Экспорт
	
	ОбщегоНазначенияБПВызовСервера.РеквизитыХранящиесяВБазе(Реквизиты, Организация);
	
КонецПроцедуры

// Проверяет возможность авторасшифровки входящих сообщений от контролирующих органов для указанной учетной записи.
// 
// Параметры:
//	УчетныеЗаписи - СправочникСсылка.УчетныеЗаписиДокументооборота, Массив, ФиксированныйМассив - Учетные записи, 
//                  для которой проверяется возможность авторасшифровки.
//	АвторасшифровкаДоступна - Булево - Процедура должна установить параметр в Истина, если авторасшифровка поддерживается.
//									   По умолчанию - Ложь.
//
// Пример реализации:
//  АвторасшифровкаДоступна = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком()
//		И МобильнаяБухгалтерия.ИспользуетсяОбменСМобильнойБухгалтерией();
//
Процедура ПолучитьПризнакДоступностиАвторасшифровкиТранспортныхСообщений(УчетныеЗаписи,
																		 АвторасшифровкаДоступна) Экспорт
	
	// При работе в режиме интеграции с банком из мобильной бухгалтерии выполняем автоматическую расшифровку полученного транспортного сообщения.
	АвторасшифровкаДоступна = МобильнаяБухгалтерия.ИспользуетсяОбменСМобильнойБухгалтерией();
	
КонецПроцедуры

// Статья на способы сдачи отчетности. Указывается в панели отправки отчетов, когда ни одна из организаций не подключена.
// Процедура добавлена для Бухгалтерии предприятия. Контролировать актуальность статьи нужно ежегодно.
// Остальным потребителям заполнять не нужно.
//
// Параметры:
//  СсылкаНаСтатью	 - Строка - Ссылка на статью как сдать отчетность.
//
//
Процедура ПолучитьСсылкуНаСтатьюСпособыСдачиОтчетности(СсылкаНаСтатью) Экспорт
	
	СсылкаНаСтатью = "https://buh.ru/otchetnost";
	
КонецПроцедуры

#Область ИнтеграцияСЭДО

// Заполняется при наличии в конфигурации библиотеки БЭД:
// Возвращается информацию о том, требуется ли подключить организацию к ЭДО или нет.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//	 ТребуетсяПодключение - Булево - Результат проверки. Истина, если организацию нужно подключить к ЭДО
//
// Пример:
//   ОбменСКонтрагентами.ТребуетсяПодключениеЭДО(Организация, ТребуетсяПодключение);
// 
Процедура ТребуетсяПодключениеЭДО(Организация, ТребуетсяПодключение) Экспорт
	
	Если СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		ТребуетсяПодключение = Ложь;
	Иначе
		ОбменСКонтрагентами.ТребуетсяПодключениеЭДО(Организация, ТребуетсяПодключение);
	КонецЕсли;
	
КонецПроцедуры

// Заполняется при наличии в конфигурации библиотеки БЭД:
// Возвращается информацию о том, требуется ли подключить организацию к ЭДО или нет.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Сертификат - СертификатКриптографии - проверяемый сертификат.
//	 ТребуетсяПереиздание - Булево - Результат проверки. Истина, если сертификат нужно переиздать
//
//
// Пример:
//   ОбменСКонтрагентами.ТребуетсяПереизданиеСертификатаЭДО(Организация, Сертификат, ТребуетсяПереиздание);
//
Процедура ТребуетсяПереизданиеСертификатаЭДО(Организация, Сертификат, ТребуетсяПереиздание) Экспорт
	
	Если СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		ТребуетсяПереиздание = Ложь;
	Иначе
		ОбменСКонтрагентами.ТребуетсяПереизданиеСертификатаЭДО(Организация, Сертификат, ТребуетсяПереиздание);
	КонецЕсли;
	
КонецПроцедуры

// Заполняется при наличии в конфигурации библиотеки БЭД:
// Заполнеят настроки подключения организации к ЭДО.
//
// Параметры:
//   Настройки - Строка - Настройки, которые нужно проверить
//	 НастройкиКорректны - Булево - Истина, если корреткные
//
// Пример:
//   ОбменСКонтрагентами.ПроверитьНастройкиРегистрацииЭДО(Настройки, НастройкиКорректны);
//
Процедура ПроверитьНастройкиРегистрацииЭДО(Настройки, НастройкиКорректны) Экспорт
	
	ОбменСКонтрагентами.ПроверитьНастройкиРегистрацииЭДО(Настройки, НастройкиКорректны);
	
КонецПроцедуры

// Заполняется при наличии в конфигурации библиотеки БЭД:
// Заполнеят настроки подключения организации к ЭДО.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//	 КодФНС      - Строка - Код ФНС
//   Настройки   - Строка - Результат инициализации. 
//
// Пример:
//   ОбменСКонтрагентами.ИнициализироватьНастройкиПодключенияЭДО(Организация, КодФНС, Настройки);
//
Процедура ИнициализироватьНастройкиПодключенияЭДО(Организация, КодФНС, Настройки) Экспорт
	
	ОбменСКонтрагентами.ИнициализироватьНастройкиПодключенияЭДО(Организация, КодФНС, Настройки);
	
КонецПроцедуры

// Заполняется при наличии в конфигурации библиотеки БЭД:
// Заполнеят настроки подключения организации к ЭДО.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Сертификат  - СертификатКриптографии - текущий сертификат организации
//	 КодФНС      - Строка - Код ФНС
//   Настройки   - Строка - Результат инициализации. 
//
// Пример:
//   ОбменСКонтрагентами.ИнициализироватьНастройкиПереизданияСертификатаЭДО(Организация, КодФНС, Сертификат, Настройки);
//
Процедура ИнициализироватьНастройкиПереизданияСертификатаЭДО(Организация, КодФНС, Сертификат, Настройки) Экспорт
	
	ОбменСКонтрагентами.ИнициализироватьНастройкиПереизданияСертификатаЭДО(Организация, КодФНС, Сертификат, Настройки);
	
КонецПроцедуры

// Заполняет адрес страницы с условиями подключения к ЭДО
//
// Параметры:
//  Адрес	 - Строка - Адрес страницы с условиями подключения к ЭДО
//
// Пример:
//   ОбменСКонтрагентами.АдресСтраницыСУсловиямиПодключения(Адрес);
//
Процедура АдресСтраницыСУсловиямиПодключения(Адрес) Экспорт
	
	ОбменСКонтрагентами.АдресСтраницыСУсловиямиПодключения(Адрес);
	
КонецПроцедуры

// Проверяет возможность настройки ЭДО у текущего пользователя
//
// Параметры:
//  ЕстьПраво	 - Булево - Переменная, в которую записывается резульатат проверки наличия права
//
// Пример:
//   ЕстьПраво = ОбменСКонтрагентами.ЕстьПравоНастройкиОбмена();
//
Процедура ЕстьПравоНастройкиЭДО(ЕстьПраво = Ложь) Экспорт
	
	ЕстьПраво = ОбменСКонтрагентами.ЕстьПравоНастройкиОбмена();
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыПоТребованиюФНС

//Заполняет реквизиты контрагента по ссылке:
// 	Представление
//	НаименованиеПолное
//	ЮридическоеФизическоеЛицо
//	ИНН
//	КПП
//
//Процедуру следует заполнить, если справочник Контрагенты не обладает хотя бы одним из реквизитов:
//	НаименованиеПолное
//	ЮридическоеФизическоеЛицо
//	ИНН
//	КПП
//
//Параметры:
//
//	Контрагент - СправочникСсылка.Контрагенты
//	РеквизитыКонтрагента - Структура. Поля структуры, обязательные к заполнению:
// 		Представление				- Строка
//		НаименованиеПолное          - Строка
//		ЮридическоеФизическоеЛицо   - Булево
//		ИНН                         - Строка
//		КПП                         - Строка
//
Процедура ПолучитьРеквизитыКонтрагента(Контрагент, РеквизитыКонтрагента) Экспорт

КонецПроцедуры

//Заполняет массив контрагентов с указанным ИНН
//
//Процедуру следует заполнить, если справочник Контрагенты не обладает хотя бы одним из реквизитов:
//	НаименованиеПолное
//	ЮридическоеФизическоеЛицо
//	ИНН
//	КПП
//
//Параметры:
//
//	ИНН - Строка
//	МассивКонтрагентов - Массив ссылок на справочник контрагентов
//
Процедура ПолучитьМассивКонтрагентовПоИНН(ИНН, МассивКонтрагентов) Экспорт

КонецПроцедуры

//Формирует сведения о документах-источниках, которые будут отражаться в едином списке документов, представляемых по требованию ФНС. 
//Требуется заполнить для всех объектов метаданных, указанных в определяемом типе ИсточникДокументаПоТребованиюФНСБРО..
//
//Параметры: 
//
//	СвойстваИсточников	- Соответствие, соответствие переданных ссылок на источники и массива структур 
//		Ключ 		- ссылка на источник
//		Значение 	- массив структур (начальное значение: пустой массив)
//		(каждый элемент массива - реквизиты для отображения свойств одного документа в журнале документов, 
//		представляемых по требованию ФНС)
//
//		В общем случае один источник может служить источником для отображения свойств нескольких документов.
//		Если у источника стоит пометка на удаление, массив структур должен остаться пустым массивом.
//		Состав полей структуры различен для различных видов документов-источников.
//
//			Поля структуры:
//				(обязательный)	Организация			- СправочникСсылка.Организации
//				(обязательный)	ВидДокументаФНС		- ПеречислениеСсылка.ВидыПредставляемыхДокументов
//				(необязательный)	Контрагент			- Ссылка на справочник контрагентов
//				(необязательный)	НомерСтрокиИсточника	- Число, обязательно указывается, 
//											если данный источник может служить 
//											источником для заполнения реквизитов 
//											нескольких документов одного вида ФНС 
//											(например Оказание услуг в БПКОРП3) 
//											Для остальных видов документов-источников не указывается.			
//				(необязательный)	Направление 			- Перечисление.
//												НаправленияДокументаПоТребованиюФНС,
//											обязателен для следующих видов документов ФНС:
//												Счет-фактура
//												Корректировочный счет-фактура
//												Акт приемки-сдачи работ (услуг)
//												Товарная накладная (ТОРГ-12)
//												Товарно-транспортная накладная
//												Для остальных видов документов ФНС не указывается.			
//
//			Состав следующих полей структуры различен для различных видов документов ФНС.
//
//				(необязательный)	Дата					- Дата
//				(необязательный)	Номер					- Строка
//				(необязательный)	СуммаВсего				- Число
//
//			Максимально возможный состав полей структуры для различных видов документов ФНС:
//				Счет-фактура
//					Дата
//					Номер
//					СуммаВсего
//				Корректировочный счет-фактура
//					Дата
//					Номер
//					СуммаВсего
//				Акт приемки-сдачи работ (услуг)
//					Дата
//					Номер
//					СуммаВсего
//				Товарная накладная (ТОРГ-12)
//					Дата
//					Номер
//					СуммаВсего
//				Товарно-транспортная накладная
//					Дата
//					Номер
//					СуммаВсего
//				Грузовая таможенная декларация
//					Номер
//				Добавочный лист к грузовой таможенной декларации
//					Номер
//				Договор
//					Дата
//					Номер
//					СуммаВсего
//				Дополнение к договору
//					Дата
//					Номер
//					СуммаВсего
//				Спецификация (калькуляция, расчет) цены (стоимости)
//					Дата
//					Номер
//					СуммаВсего
//
Процедура ОпределитьСвойстваИсточниковДляРегистраДокументыПоТребованиюФНС(СвойстваИсточников) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиБП.ОпределитьСвойстваИсточниковДляРегистраДокументыПоТребованиюФНС(СвойстваИсточников);
	
КонецПроцедуры

//Определяет владельца электронного документа
//
//Параметры: 
//	ЭД - ссылка на справочник электронных документов
//	ВладелецЭД - ссылка на владельца электронного документа
//
// Пример:
// ОбменСКонтрагентами.ОпределитьВладельцаЭлектронногоДокумента(ЭД, ВладелецЭД)
//
Процедура ОпределитьВладельцаЭлектронногоДокумента(ЭД, ВладелецЭД) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		ОбменСКонтрагентами.ОпределитьВладельцаЭлектронногоДокумента(ЭД, ВладелецЭД);
	КонецЕсли;
	
КонецПроцедуры

//Заполняет вид документа ФНС для владельцев электронных документов, которые будут отражаться в едином списке документов, представляемых по требованию ФНС. 
//Для владельца ЭД должны существовать электронные документы по завершенным обменам, не помеченые на удаление и принадлежащие следующим видам ЭД:
//СчетФактура
//КорректировочныйСчетФактура
//ТОРГ12Продавец
//ТОРГ12Покупатель
//АктИсполнитель
//АктЗаказчик
//
//Параметры: 
//
//	СвойстваВладельцевЭД	- Соответствие 
//		Ключ 		- ссылка на владельца электронного документа
//		Значение 	- Строка. Вид электронного документа, который следует преобразовать 
//		к строковому представлению определенного формата. Возможные значения см в макете ВидыПредставляемыхДокументов 
//      обработки ДокументооборотСКонтролирующимиОрганами: нужны те значения из колонки Имя, у которых в колонке ЕстьЭД 
//      указана Истина
//
//	МассивВладельцевЭД	- (необязательный) Массив, массив ссылок на владельцев электронные документы. 
//		Если параметр указан, требуется заполнить свойства владельцев ЭД из массива. 
//		Если массив пустой, тогда требуется заполнить свойства для всех владельцев ЭД, удовлетворяющих свойствам, указанным выше.
//
// Пример:
// ОбменСКонтрагентами.ОпределитьСвойстваВладельцевЭлектронныхДокументов(СвойстваВладельцевЭД, МассивВладельцевЭД)
//
Процедура ОпределитьСвойстваВладельцевЭлектронныхДокументов(СвойстваВладельцевЭД, МассивВладельцевЭД = Неопределено) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		ОбменСКонтрагентами.ОпределитьСвойстваВладельцевЭлектронныхДокументов(СвойстваВладельцевЭД, МассивВладельцевЭД);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет строку, в которой перечислены направления, внешние сервисы которых следует разместить на закладке "Личные кабинеты".
// Перечисление производится через запятую без пробелов.
//
// Параметры:
//  СтрокаСписокПоддерживаемыхКО	- Строка
//
// Пример по установке полного списка возможных значений (одновременно значение по умолчанию):
//  СтрокаСписокПоддерживаемыхКО = "ФНСЮЛ,ФНСИП,ПФР,ФСС,ФСРАР,РПН,ФТС";
//
// Если значение по умолчанию устраивает, заполнять не требуется.
//
Процедура ПереопределитьСписокПоддерживаемыхНаправлений(СтрокаСписокПоддерживаемыхКО) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПоясненияКДекларацииПоНДС

// Ищет ссылку на счет-фактуру по переданным реквизитам.
//  Если счет-фактура найден, возвращается ссылка на него в параметре НайденныйСчетФактура
//
// Параметры:
//  ПараметрыПоиска	- Структура - содержит параметры для поиска счета-фактуры
//    * НомерСчетаФактуры                             - строка
//    * ДатаСчетаФактуры                              - дата
//    * НомерИсправленияСчетаФактуры                  - число
//    * ДатаИсправленияСчетаФактуры                   - дата
//    * НомерКорректировочногоСчетаФактуры            - строка 
//    * ДатаКорректировочногоСчетаФактуры             - дата
//    * НомерИсправленияКорректировочногоСчетаФактуры - число
//    * ДатаИсправленияКорректировочногоСчетаФактуры  - дата
//    * ИННКонтрагента - строка
//    * Организация - СправочникСсылка.Организации
//    * СчетФактураВыданный - Булево - "Истина" при проверке разделов 9, 9.1, 10 (кроме графы с реквизитами счета-фактуры продавца), 12
//  ПоискВыполнен - Булево - флаг, что в конфигурации есть счета-фактуры и поиск выполнен.
//  НайденныйСчетФактура - ссылка на найденный счет-фактуру
Процедура НайтиСчетФактуруПоРеквизитам(ПараметрыПоиска, ПоискВыполнен, НайденныйСчетФактура) Экспорт
	
	ПоискВыполнен = Истина;
	
	НайденныйСчетФактура = УчетНДС.НайтиСчетФактуруПоРеквизитам(ПараметрыПоиска);
	
КонецПроцедуры

#КонецОбласти

#Область МакетыПенсионныхДел

// Функция возвращает сведения о физлице.
//
// Параметры:
//  Сотрудник         - ссылка на элемент справочника см. тип ОпределяемыйТип.СотрудникМакетПенсионногоДела;
//  ДатаЗначения      - дата, на которую нужно получить сведения;
//  МассивПоказателей - массив показателей, значения которых нужно вернуть.
//		СНИЛС
//		Фамилия
//		Имя
//		Отчество
//      АдресРегистрации
//      Телефон
//      ЭлектроннаяПочта
//      АдресМестаЖительства_XML - Полный адрес места жительства гражданина.
//                                 Если отсуствует, возвращать пустую строку
//      АдресМестаПребывания_XML - Заполняется, если гражданин имеет подтвержденное регистрацией место пребывания, 
//                                 в том числе при наличии подтвержденного регистрацией места жительства.
//                                 Если отсуствует, возвращать пустую строку
//      АдресФактическогоПроживания_XML - Заполняется, если адрес места фактического проживания гражданина не совпадает 
//                                 с местом жительства или местом пребывания либо гражданин не имеет подтвержденного 
//                                 регистрацией места жительства и места пребывания. Если отсуствует, возвращать пустую строку
//      АдресЗаПределамиРФНаРусском_XML - на русском языке. Если отсуствует, возвращать пустую строку
//      АдресЗаПределамиРФНаИностранном_XML - на иностранном языке. Если отсуствует, возвращать пустую строку
//      
//      УдостоверениеЛичности:
//          Серия
//          Номер
//          ДатаВыдачи
//          КемВыдан
//          ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц 
//          КодПодразделения
//          СрокДействия
//      
//      Пол - ПеречислениеСсылка.ПолФизическогоЛица
//      Гражданство
//      МестоРождения (пользовательское представление)
//      ДатаРождения
//  
// Возвращаемое значение:
//  Структура с ключами из массива показателей и возвращаемыми значениями.
//
Функция ПолучитьСведенияОСотруднике(Знач Сотрудник, Знач МассивПоказателей = Неопределено, Знач ДатаЗначения = Неопределено) Экспорт
	
	Сведения = Новый Структура;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = '00010101';
	КонецЕсли;
	
	НеподдерживаемыеСвойства = Новый Структура("АдресМестаЖительства_XML, АдресМестаПребывания_XML,АдресФактическогоПроживания_XML,
		|АдресЗаПределамиРФНаРусском_XML,АдресЗаПределамиРФНаИностранном_XML");
	
	МассивПоказателейДляЗапроса = Новый Массив;
	Если МассивПоказателей = Неопределено Тогда
		МассивПоказателейДляЗапроса.Добавить("СНИЛС");
		МассивПоказателейДляЗапроса.Добавить("Фамилия");
		МассивПоказателейДляЗапроса.Добавить("Имя");
		МассивПоказателейДляЗапроса.Добавить("Отчество");
		МассивПоказателейДляЗапроса.Добавить("АдресРегистрации");
		МассивПоказателейДляЗапроса.Добавить("Телефон");
	Иначе
		Для Каждого Показатель Из МассивПоказателей Цикл
			Если Не НеподдерживаемыеСвойства.Свойство(Показатель) Тогда
				МассивПоказателейДляЗапроса.Добавить(Показатель);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СоответствиеИменамКадровыхДанных = Новый Соответствие;
	СоответствиеИменамКадровыхДанных.Вставить("СНИЛС", "СтраховойНомерПФР");
	СоответствиеИменамКадровыхДанных.Вставить("АдресРегистрации", "АдресПоПропискеПредставление");
	СоответствиеИменамКадровыхДанных.Вставить("Телефон", "ТелефонРабочийПредставление");
	СоответствиеИменамКадровыхДанных.Вставить("ЭлектроннаяПочта", "EMailПредставление");
	СоответствиеИменамКадровыхДанных.Вставить("Гражданство", "Страна");
	
	СоответствияИменамУдостоверенияЛичности = Новый Соответствие;
	СоответствияИменамУдостоверенияЛичности.Вставить("Серия", "ДокументСерия");
	СоответствияИменамУдостоверенияЛичности.Вставить("Номер", "ДокументНомер");
	СоответствияИменамУдостоверенияЛичности.Вставить("ДатаВыдачи", "ДокументДатаВыдачи");
	СоответствияИменамУдостоверенияЛичности.Вставить("КемВыдан", "ДокументКемВыдан");
	СоответствияИменамУдостоверенияЛичности.Вставить("ВидДокумента", "ДокументВид");
	СоответствияИменамУдостоверенияЛичности.Вставить("КодПодразделения", "ДокументКодПодразделения");
	СоответствияИменамУдостоверенияЛичности.Вставить("СрокДействия", "ДокументСрокДействия");
	
	ЗапрашиваемыеКадровыеДанные = Новый Массив;
	
	Для каждого Показатель Из МассивПоказателейДляЗапроса Цикл
		
		Если Показатель = "УдостоверениеЛичности" Тогда
			Сведения.Вставить(Показатель, Новый Структура);
			Для Каждого ИмяУдостоверенияЛичности Из СоответствияИменамУдостоверенияЛичности Цикл
				ЗапрашиваемыеКадровыеДанные.Добавить(ИмяУдостоверенияЛичности.Значение);
			КонецЦикла;
		Иначе
			Сведения.Вставить(Показатель);
			ИмяДанных = СоответствиеИменамКадровыхДанных.Получить(Показатель);
			Если ИмяДанных = Неопределено Тогда
				ЗапрашиваемыеКадровыеДанные.Добавить(Показатель);
			Иначе
				ЗапрашиваемыеКадровыеДанные.Добавить(ИмяДанных);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическоеЛицо, ЗапрашиваемыеКадровыеДанные, ДатаЗначения);
	Если КадровыеДанные.Количество() > 0 Тогда
		
		ДанныеСотрудника = КадровыеДанные[0];
		Для каждого Показатель Из МассивПоказателейДляЗапроса Цикл
			
			Если Показатель = "УдостоверениеЛичности" Тогда
				Для Каждого ИмяУдостоверенияЛичности Из СоответствияИменамУдостоверенияЛичности Цикл
					Сведения.УдостоверениеЛичности.Вставить(ИмяУдостоверенияЛичности.Ключ, 
						ДанныеСотрудника[ИмяУдостоверенияЛичности.Значение]);
				КонецЦикла;
			ИначеЕсли Показатель = "МестоРождения" Тогда
				Сведения.МестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ДанныеСотрудника.МестоРождения);
			Иначе
				ИмяДанных = СоответствиеИменамКадровыхДанных.Получить(Показатель);
				Если ИмяДанных = Неопределено Тогда
					ИмяДанных = Показатель;
				КонецЕсли;
				Сведения.Вставить(Показатель, ДанныеСотрудника[ИмяДанных]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

#КонецОбласти

#Область УпрощениеПодключенияК1СОтчетности
// Процедуры, указанные ниже, добавлены в рамках упрощения подключения к 1С-Отчетности
// и используются в заявлении на подключение.
// Процедуры нужно заполнить таким образом, чтобы пользователю потом как можно меньше пришлось вручную
// в заявлении вносить какие-либо изменения.


// Используется для заполнения списка пользователей (параметр СписокПользователей), 
// которые смогут работать c 1С-Отчетностью по данной организации.
// Данный список будет указан по умолчанию в заявлении на подключение к 1С-Отчетности.
// Пользователь, заполняющий заявление, сможет скорректировать этот список вручную, но желательно
// составлять его таким образом, чтобы пользователю в нем ничего не пришлось настраивать вручную.
// По умолчанию в списке СписокПользователей отмечен (стоит флажок) только у текущего пользователя, 
// т.е. того пользователя, который заполняет заявление.
//
// Параметры:
//  СписокПользователей	 - СписокЗначений:
//		* Значение - Справочник.Пользователи - Пользователь, который потенциально может использовать 1С-Отчетность.
//		* Пометка  - Булево - Разрешить пользователю использовать данное подключение к 1С-Отчетности.
//  Организация - Справочник.Организации - организация, для которой подключается 1С-Отчетность.
//
// Пример:
// 	1) СписокПользователей[0].Пометка = Истина;
//	2) Включить всех бухгалтеров и главных бухгалтеров по данной организации.
//
Процедура ОпределитьПользователей1СОтчетности(СписокПользователей, Организация) Экспорт
	
	ПользователиСДоступомК1СОтчетности = ЭлектронныйДокументооборотСКонтролирующимиОрганамиБП.ПользователиСДоступомК1СОтчетности(Организация);
	Для Каждого Пользователь Из ПользователиСДоступомК1СОтчетности Цикл
		Если СписокПользователей.НайтиПоЗначению(Пользователь) = Неопределено Тогда
			СписокПользователей.Добавить(Пользователь, , Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Определяет доступность и необходимость подключения направлений для указанной организации.
// Используется для составления списка направлений по умолчанию при формировании заявления на подключение к 1С-Отчетности.
// Недоступные направления будут скрыты. С направлений, которые не подключаются, будет снят флажок.
// Пользователь сможет вручную скорректировать список доступных подключаемых направлений,
// но желательно список составлять таки образом, чтобы пользователю не пришлось его корректировать.
// По умолчанию - все направления доступны и подключаются.
//
// Параметры:
//  Организация	 - Справочник.Организации - Организация, для которой определяются подключаемые направления.
//  Направления	 - Массив структур - предназначена для указания какие направления доступны в этой базе и какие из них
//     имеет смысл подключить данному пользователю.
//     * Орган - Перечисления.ТипыКонтролирующихОрганов - направление сдачи отчетности.
//     * Доступен - Булево - Доступно ли подключение данного направления в этой базе. По умолчанию - Истина.
//         Например, если этот функционал скрыт функциональной опцией, или недоступен в базе, то установить Ложь.
//     * Подключить - Булево - Подключить ли для данной организации данное направление. По умолчанию - Истина.
//         Например, для ИП без сотрудников можно не подключать ФСС и ПФР, так как он не сдают отчетность за себя.
//
// Пример:
//	Для каждого Направление ИЗ Направления Цикл
//		Если Направление.Орган <> Перечисления.ТипыКонтролирующихОрганов.ФНС
//			И Направление.Орган <> Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
//			
//			Направление.Доступен   = Ложь;
//			Направление.Подключить = Ложь;
//			
//		КонецЕсли;
//	КонецЦикла;
// 
Процедура ОпределитьПодключаемыеНаправленияСдачиОтчетности(Организация, Направления) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиБП.ОпределитьПодключаемыеНаправленияСдачиОтчетности(Организация, Направления);
	
КонецПроцедуры

// Процедура вызывается при отправке заявления на подключение к 1С-Отчетности.
// При отправке заявления на подключение может быть такая ситуация, когда реквизиты Организации или физ. лица в базе 
// не заполнены, а в заявлении пользователь их уже заполнил. В этом случае пользователю было бы удобно, чтобы
// эти сведения были перенесены в базу в реквизиты организации или физ. лица.
//
// Параметры:
//  ДокументЗаявление - ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи - Одобренное заявление на подключение к 1С-Отчетности.
//		Список реквизитов см. реквизиты документа ЗаявлениеАбонентаСпецоператораСвязи:
//      * Описание указано в свойстве Синоним.
//      * Особенности использования, если есть, указаны в свойстве Подсказка.
//        Если в подсказке указано "Служебный", то его не следует использовать в данной процедуре
//      * Тип указан в свойстве Тип.
//
Процедура ПриОтправкеЗаявленияНаПодключение(ДокументЗаявление) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументЗаявление) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЗаявления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументЗаявление,
		"Организация, АдресЮридический, АдресФактический, ИНН, КПП, ОГРН, ПризнакКрупнейшегоНалогоплательщика,
		|РегНомерПФР, РегНомерФСС");
	
	Если НЕ ЗначениеЗаполнено(РеквизитыЗаявления.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		ОрганизацияОбъект = РеквизитыЗаявления.Организация.ПолучитьОбъект();
		
		Если НЕ ЗначениеЗаполнено(ОрганизацияОбъект.ОГРН)
			И ЗначениеЗаполнено(РеквизитыЗаявления.ОГРН) Тогда
			ОрганизацияОбъект.ОГРН = СокрЛП(РеквизитыЗаявления.ОГРН);
		КонецЕсли;
		
		Если НЕ ОрганизацияОбъект.КрупнейшийНалогоплательщик
			И РеквизитыЗаявления.ПризнакКрупнейшегоНалогоплательщика Тогда
			ОрганизацияОбъект.КрупнейшийНалогоплательщик = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОрганизацияОбъект.РегистрационныйНомерФСС)
			И ЗначениеЗаполнено(РеквизитыЗаявления.РегНомерФСС) Тогда
			ОрганизацияОбъект.РегистрационныйНомерФСС = РеквизитыЗаявления.РегНомерФСС;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОрганизацияОбъект.РегистрационныйНомерПФР)
			И ЗначениеЗаполнено(РеквизитыЗаявления.РегНомерПФР) Тогда
			ОрганизацияОбъект.РегистрационныйНомерПФР = РеквизитыЗаявления.РегНомерПФР;
			ИсторияРегистраций = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.СоздатьНаборЗаписей();
			ИсторияРегистраций.Отбор.Организация.Установить(РеквизитыЗаявления.Организация);
			ИсторияРегистраций.Прочитать();
			Если ИсторияРегистраций.Количество() = 0 Тогда
				Запись = ИсторияРегистраций.Добавить();
				Запись.Период = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.ДатаОтсчетаПериодическихСведений();
				Запись.Организация = РеквизитыЗаявления.Организация;
			Иначе
				Запись = ИсторияРегистраций[ИсторияРегистраций.Количество() - 1];
			КонецЕсли;
			Запись.РегистрационныйНомерПФР = РеквизитыЗаявления.РегНомерПФР;
			ИсторияРегистраций.Записать();
		КонецЕсли;
		
		ОрганизацияОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

// Предназначена для проверки заполненности краткого наименования организации.
// В случае, если краткое наименование не заполнено, то в заявлении на подключение к 1С-Отчетности 
// появится дополнительное поле для заполнения краткого наименования.
// Должна проверяться заполненность реквизита НаименованиеСокращенное организации.
// Если такое реквизит метаданных отсутствует. то должна проверяться заполненность реквизита Наименование.
// 
// Например, в БП для организаций с пустым наименованием наименование не пустое, 
// а заполняется как "Наша организация". Т.е. если НаименованиеСокращенное организации = "Наша организация", то
// возвращать ОрганизацияИмеетПустоеНаименование = Истина
//
// Параметры:
//  Организация							 - Справочник.Организации - организация, чье наименование проверяется
//  ОрганизацияИмеетПустоеНаименование	 - Булево - Истина, если наименование организации пустое
//
Процедура ПроверитьОрганизациюНаПустоеНаименование(Организация, ОрганизацияИмеетПустоеНаименование = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОрганизацияИмеетПустоеНаименование = Истина;
	Иначе
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Наименование");
		Если НЕ ЗначениеЗаполнено(НаименованиеОрганизации)
			ИЛИ НаименованиеОрганизации = Справочники.Организации.НаименованиеПоУмолчанию() Тогда
			ОрганизацияИмеетПустоеНаименование = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УпрощениеИнтерфейсаИП

// Возвращает настройки констант интеграции, импорта/экспорта, продажи алкоголя, закупки/реализации.
//
// Параметры:
//  ФлагиУчета - Структура - содержит значения по-умолчанию:
//    * ИнтеграцияСБанком     							- Булево - по умолчанию Ложь.
//    * УчетИмпортныхТоваров    						- Булево - по умолчанию Ложь.
//    * УчетТаможенныхДекларацийЭкспорт 				- Булево - по умолчанию Ложь.
//    * УчетРозничнойПродажиАлкогольнойПродукцииПива 	- Булево - по умолчанию Ложь.
//    * ЗакупкаТоваровУслугДляКомитентов 				- Булево - по умолчанию Ложь.
//    * РеализацияТоваровУслугКомитентов 				- Булево - по умолчанию Ложь.
//    * Использовать1СОтчетностьПриИнтеграцииСБанком 	- Булево - по умолчанию Ложь.
//    * СервисЭлектронныхТрудовыхКнижек				 	- Булево - по умолчанию Ложь.
//
// Пример:
//	ФлагиУчета = Новый Структура();
//	ФлагиУчета.Вставить("ИнтеграцияСБанком", Ложь);
//	ФлагиУчета.Вставить("УчетИмпортныхТоваров", Ложь);
//	ФлагиУчета.Вставить("УчетТаможенныхДекларацийЭкспорт", Ложь);
//	ФлагиУчета.Вставить("УчетРозничнойПродажиАлкогольнойПродукцииПива", Ложь);
//	ФлагиУчета.Вставить("ЗакупкаТоваровУслугДляКомитентов", Ложь);
//	ФлагиУчета.Вставить("РеализацияТоваровУслугКомитентов", Ложь);
//	ДобавленоКонстант = 0;
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ""ИнтеграцияСБанком"" Название, ФлагиУчета.Значение КАК Значение
//	|ИЗ Константа.ИнтерфейсИнтеграцииСБанком КАК ФлагиУчета
//	|ОБЪЕДИНИТЬ ВСЕ
//	|ВЫБРАТЬ ""УчетИмпортныхТоваров"" Название, ФлагиУчета.Значение КАК Значение
//	|ИЗ Константа.ВедетсяУчетИмпортныхТоваров КАК ФлагиУчета
//	|ОБЪЕДИНИТЬ ВСЕ
//	|ВЫБРАТЬ ""УчетТаможенныхДекларацийЭкспорт"" Название, ФлагиУчета.Значение КАК Значение
//	|ИЗ Константа.ВедетсяУчетИмпортныхТоваров КАК ФлагиУчета
//	|ОБЪЕДИНИТЬ ВСЕ
//	|ВЫБРАТЬ ""УчетРозничнойПродажиАлкогольнойПродукцииПива"" Название, ФлагиУчета.Значение КАК Значение
//	|ИЗ Константа.ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива КАК ФлагиУчета
//	|ОБЪЕДИНИТЬ ВСЕ
//	|ВЫБРАТЬ ""ЗакупкаТоваровУслугДляКомитентов"" Название, ФлагиУчета.Значение КАК Значение
//	|ИЗ Константа.ОсуществляетсяЗакупкаТоваровУслугДляКомитентов КАК ФлагиУчета
//	|ОБЪЕДИНИТЬ ВСЕ
//	|ВЫБРАТЬ ""РеализацияТоваровУслугКомитентов"" Название, ФлагиУчета.Значение КАК Значение
//	|ИЗ Константа.ОсуществляетсяРеализацияТоваровУслугКомитентов КАК ФлагиУчета
//	|";
//
//	Таб = Запрос.Выполнить().Выгрузить();
//	Для Каждого Пара Из ФлагиУчета Цикл 
//		Стр = Таб.Найти(Пара.Ключ, "Название");
//		Если Стр <> Неопределено Тогда 
//			ФлагиУчета.Вставить(Стр.Название, Стр.Значение);
//		КонецЕсли;
//	КонецЦикла;
//
Процедура ПолучитьЗначенияКонстантИнтеграции(ФлагиУчета = Неопределено) Экспорт
	
	ДобавленоКонстант = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""УчетИмпортныхТоваров"" КАК Название,
	|	ФлагиУчета.Значение КАК Значение
	|ИЗ
	|	Константа.ВедетсяУчетИмпортныхТоваров КАК ФлагиУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""УчетТаможенныхДекларацийЭкспорт"",
	|	ФлагиУчета.Значение
	|ИЗ
	|	Константа.ВедетсяУчетИмпортныхТоваров КАК ФлагиУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""УчетРозничнойПродажиАлкогольнойПродукцииПива"",
	|	ФлагиУчета.Значение
	|ИЗ
	|	Константа.ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива КАК ФлагиУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЗакупкаТоваровУслугДляКомитентов"",
	|	ФлагиУчета.Значение
	|ИЗ
	|	Константа.ОсуществляетсяЗакупкаТоваровУслугДляКомитентов КАК ФлагиУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""РеализацияТоваровУслугКомитентов"",
	|	ФлагиУчета.Значение
	|ИЗ
	|	Константа.ОсуществляетсяРеализацияТоваровУслугКомитентов КАК ФлагиУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""СервисЭлектронныхТрудовыхКнижек"",
	|	ФлагиУчета.Значение
	|ИЗ
	|	Константа.ИнтерфейсЭлектронныхТрудовыхКнижек КАК ФлагиУчета";
	
	Таб = Запрос.Выполнить().Выгрузить();
	Для Каждого Пара Из ФлагиУчета Цикл 
		Стр = Таб.Найти(Пара.Ключ, "Название");
		Если Стр <> Неопределено Тогда 
			ФлагиУчета.Вставить(Стр.Название, Стр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ФлагиУчета.Вставить("ИнтеграцияСБанком", ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком());
	ФлагиУчета.Вставить("Использовать1СОтчетностьПриИнтеграцииСБанком",
		РегламентированнаяОтчетностьБП.Используется1СОтчетность());
	
КонецПроцедуры

// Возвращает список наименований отчетов используемых ИП на УСН 6%.
//
// Параметры:
//   СписокРегламентированныхОтчетов - список наименований регламентированных отчетов (синоним основной формы отчета),
//    в представление списка значений вносится список ФО через запятую, если требуются ограничения в зависимости от ФО
//
// Пример:
//   СписокРегламентированныхОтчетов = Новый СписокЗначений;
//   СписокРегламентированныхОтчетов.Добавить("Реестр по акцизам: Приложение 01", "Импорт");
//   Возврат СписокРегламентированныхОтчетов;
//
Процедура ПолучитьНазванияРегламентированныхОтчетовИПнаУСН6(СписокРегламентированныхОтчетов) Экспорт
	
	
	СписокРегламентированныхОтчетов = Новый СписокЗначений;
	
	// Налоговая отчетность
	СписокРегламентированныхОтчетов.Добавить("Декларация по УСН", "");
	
	// Статистика
	СписокРегламентированныхОтчетов.Добавить("Статистика: Форма 1-ИП", "");
	СписокРегламентированныхОтчетов.Добавить("Статистика: Форма 1-ИП (мес)", "");
	СписокРегламентированныхОтчетов.Добавить("Статистика: Форма 1-предприниматель", "");
	
КонецПроцедуры

// Возвращает список наименований отчетов используемых сервисом электронных трудовых книжек.
//
// Параметры:
//   СписокРегламентированныхОтчетов - список наименований регламентированных отчетов (синоним основной формы отчета),
//    в представление списка значений вносится список ФО через запятую, если требуются ограничения в зависимости от ФО
//
// Пример:
//   СписокРегламентированныхОтчетов = Новый СписокЗначений;
//   СписокРегламентированныхОтчетов.Добавить("Реестр по акцизам: Приложение 01", "Импорт");
//   Возврат СписокРегламентированныхОтчетов;
//
Процедура ПолучитьНазванияРегламентированныхОтчетовСервисаЭТК(СписокРегламентированныхОтчетов) Экспорт
	
	СервисЭлектронныхТрудовыхКнижек.ПолучитьНазванияРегламентированныхОтчетовСервисаЭТК(СписокРегламентированныхОтчетов);
	
КонецПроцедуры

#КонецОбласти

// Вызывается при изменении ручных статусов.
// См. также ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента
//
// Параметры:
//	Ссылка - ДокументСсылка - ссылка на документ.
//	Статус - Строка         - актуальный статус; предполагает сравнение с СтатусСданоСтрокой().
//
Процедура ПриИзмененииРучногоСтатуса(Ссылка, Статус) Экспорт
	
	ВыполнениеЗадачБухгалтера.ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиОтчета(Ссылка, Статус);
	РегистрыСведений.ДокументыИнтеграцииСБанком.ПриИзмененииСтатусаРегламентированногоОтчета(Ссылка);
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Формирует сведения о документах-источниках, которые будут использоваться для заполнения реквизитов сканированных документов, 
//представляемых по требованию ФНС. Требуется заполнить для всех объектов метаданных,
//указанных в определяемом типе ИсточникДокументаПоТребованиюФНСБРО, за исключением тех, 
//которые предназначены исключительно для формирования элетронных документов.
//
//Параметры:
//
//	СвойстваИсточников	- Соответствие, соответствие переданных ссылок на источники и массива структур
//		Ключ 		- ссылка на источник для заполнения реквизитов сканированных документов
//		Значение 	- Массив, массив структур (начальное значение: пустой массив)
//		(каждый элемент массива - реквизиты для заполнения одного сканированного документа)
//
//		В общем случае один источник может служить источником для заполнения реквизитов нескольких сканированных документов (например документы РеализацияТоваровУслуг, ОказаниеУслуг).
//		Если у источника стоит пометка на удаление, массив структур должен остаться пустым.
//		Состав полей структуры различен для различных видов документов.
//
//		Поля структуры:
//
//			(обязательный)		Организация				- СправочникСсылка.Организации
//			(обязательный)		ВидДокументаФНС 		- ПеречислениеСсылка.ВидыПредставляемыхДокументов
//			(необязательный)	НомерСтрокиИсточника	- Число, обязательно указывается, если данный источник может служить 
//														источником для заполнения реквизитов нескольких документов одного вида ФНС  
//														Для остальных документов-источников не указывается.
//			(необязательный)	Направление 			- Перечисление.НаправленияДокументаПоТребованиюФНС,
//														обязателен для следующих видов документов ФНС:
//															Счет-фактура
//															Корректировочный счет-фактура
//															Акт приемки-сдачи работ (услуг)
//															Товарная накладная (ТОРГ-12)
//															Товарно-транспортная накладная
//														Для остальных видов документов ФНС не указывается.			
// 
//			Состав следующих полей структуры различен для различных видов документов.
//
//			(необязательный)	Дата			- Дата
//			(необязательный)	Номер			- Строка
//			(необязательный)	СуммаВсего		- Число
//			(необязательный)	СуммаНалога		- Число
//			(необязательный)	НомерОснования	- Строка
//			(необязательный)	ДатаОснования	- Дата
//			(необязательный)	Предмет			- Строка
//			(необязательный)	НачалоПериода	- Дата
//			(необязательный)	КонецПериода	- Дата
//			(необязательный)	Участники		- Массив структур, 
//				поля структуры
//					(необязательный)	Роль				- ПеречислениеСсылка.РолиУчастниковСделкиДокументаПоТребованиюФНС
//					(необязательный)	Контрагент			- СправочникСсылка.Контрагенты
//					(необязательный)	ЯвляетсяЮрЛицом		- Булево
//					(необязательный)	ЮрЛицоНаименование	- Строка
//					(необязательный)	ЮрЛицоИНН			- Строка
//					(необязательный)	ЮрЛицоКПП			- Строка
//					(необязательный)	ФизЛицоИНН			- Строка
//					(необязательный)	ФизЛицоФамилия		- Строка
//					(необязательный)	ФизЛицоИмя			- Строка
//					(необязательный)	ФизЛицоОтчество		- Строка
//
//			Максимально возможный состав полей структуры для различных видов документов:
//				Счет-фактура
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					Участники
//				Корректировочный счет-фактура
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					НомерОснования
//					ДатаОснования
//					Участники
//				Акт приемки-сдачи работ (услуг)
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					НомерОснования
//					ДатаОснования
//					НачалоПериода
//					КонецПериода
//					Участники
//				Товарная накладная (ТОРГ-12)
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					НомерОснования
//					ДатаОснования
//					Участники
//				Товарно-транспортная накладная
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					НомерОснования
//					ДатаОснования
//					Участники
//				Грузовая таможенная декларация
//					Номер
//					Участники
//				Добавочный лист к грузовой таможенной декларации
//					Номер
//					НомерОснования
//					Участники
//				Договор
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					Предмет
//					Участники
//				Дополнение к договору
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					Предмет
//					НомерОснования
//					ДатаОснования
//					Участники
//				Спецификация (калькуляция, расчет) цены (стоимости)
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					Предмет
//					НомерОснования
//					ДатаОснования
//					Участники
//				Отчет НИОКР
//					Дата
//					Номер
//					НомерОснования
//					ДатаОснования
//					Участники
//
//				Роли участников следует выбирать из возможных значений БРО перечисления РолиУчастниковСделкиДокументаПоТребованиюФНС.
//				Общий список возможных значений:
//					Агент
//					Акционер
//					Арендатор
//					Арендодатель
//					Векселедатель
//					Векселеполучатель
//					Генеральный подрядчик
//					Грузоотправитель
//					Грузополучатель
//					Декларант
//					Займодатель
//					Займополучатель (заемщик)
//					Заказчик
//					Импортер
//					Инвестор
//					Исполнитель
//					Лицо, составившее документ 
//					Отправитель
//					Перевозчик
//					Плательщик
//					Поверенный
//					Подрядчик
//					Покупатель
//					Получатель
//					Пользователь
//					Посредник
//					Поставщик
//					Продавец
//					Работник
//					Работодатель
//					Страхователь
//					Страховщик
//					Субподрядчик
//					Участник
//					Учредитель
//					Хранитель
//					Экспедитор
//					Экспортер
//					Эмитент
//
//				Вариант состава ролей участников для различных видов документов:
//					Счет-фактура
//						Агент
//						Грузоотправитель (если приобретаются/реализуются НЕ услуги)
//						Грузополучатель (если приобретаются/реализуются НЕ услуги)
//						Покупатель
//						Продавец
//					Корректировочный счет-фактура
//						Агент
//						Покупатель
//						Продавец
//					Акт приемки-сдачи работ (услуг)
//						Агент
//						Заказчик
//						Исполнитель
//					Товарная накладная (ТОРГ-12)
//						Грузоотправитель
//						Грузополучатель
//						Плательщик
//						Поставщик
//						Экспедитор
//					Товарно-транспортная накладная
//						Грузоотправитель
//						Грузополучатель
//						Заказчик
//						Перевозчик
//						Плательщик
//						Экспедитор
//					Грузовая таможенная декларация
//						Декларант
//						Импортер
//						Экспортер
//						Отправитель
//						Получатель
//					Добавочный лист к грузовой таможенной декларации
//						Декларант
//						Импортер
//						Экспортер
//						Отправитель
//						Получатель
//					Договор
//						Любые значения из общего списка
//					Дополнение к договору
//						Любые значения из общего списка
//					Спецификация (калькуляция, расчет) цены (стоимости)
//						Заказчик
//						Исполнитель
//					Отчет НИОКР
//						Заказчик
//						Исполнитель
//
Процедура ОпределитьСвойстваИсточниковДляЗаполненияСканированныхДокументовПоТребованиюФНС(СвойстваИсточников) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиБП.ОпределитьСвойстваИсточниковДляЗаполненияСканированныхДокументовПоТребованиюФНС(СвойстваИсточников);
	
КонецПроцедуры

// Устарела. Процедура удаляет из исходного дерева отчеты не используемые ИП на УСН 6%, если доступна упрощенная отчетность
//
// Параметры:
//  ДеревоОтчетов - Дерево значений - Содержит исходное дерево используемых в конфигурации регламентированных отчетов
//
// Пример:
//	РасширенноеИспользованиеФО = Ложь;
//	
//	ФлагиУчета = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьФлагиИнтеграцииПоУмолчанию();
//	ПолучитьЗначенияКонстантИнтеграции(ФлагиУчета);
//	
//	Если ЗначениеЗаполнено(ФлагиУчета) И ФлагиУчета.ИнтеграцияСБанком Тогда //Доступна и активна упрощенная отчетность
//		
//		ОтчетыДляВыводаВУпрощеннойФорме = Новый СписокЗначений;
//		ПолучитьНазванияРегламентированныхОтчетовИПнаУСН6(ОтчетыДляВыводаВУпрощеннойФорме);
//		
//		ВсеОтчеты = ДеревоОтчетов.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);
//		
//		Для Каждого ЭлементОтчет Из ВсеОтчеты Цикл
//			
//			ОтчетИзСписка = ОтчетыДляВыводаВУпрощеннойФорме.НайтиПоЗначению(ЭлементОтчет.Наименование);
//			
//			Если ОтчетИзСписка <> Неопределено Тогда
//				СтрФункциональныеОпции = ВРег(ОтчетИзСписка.Представление);
//				
//				Если ПустаяСтрока(СтрФункциональныеОпции) ИЛИ НЕ РасширенноеИспользованиеФО Тогда
//					Продолжить;
//				ИначеЕсли ФлагиУчета.УчетИмпортныхТоваров
//					И СтрНайти(СтрФункциональныеОпции, ВРег("Импорт")) > 0 Тогда
//					Продолжить;
//				ИначеЕсли ФлагиУчета.УчетТаможенныхДекларацийЭкспорт
//					И СтрНайти(СтрФункциональныеОпции, ВРег("Экспорт")) > 0 Тогда
//					Продолжить;
//				ИначеЕсли ФлагиУчета.УчетРозничнойПродажиАлкогольнойПродукцииПива
//					И СтрНайти(СтрФункциональныеОпции, ВРег("Алкогольная продукция")) > 0 Тогда
//					Продолжить;
//				ИначеЕсли ФлагиУчета.ЗакупкаТоваровУслугДляКомитентов
//					И СтрНайти(СтрФункциональныеОпции, ВРег("Приобретение товаров или услуг для комитентов")) > 0 Тогда
//					Продолжить;
//				ИначеЕсли ФлагиУчета.РеализацияТоваровУслугКомитентов
//					И СтрНайти(СтрФункциональныеОпции, ВРег("Продажа товаров или услуг комитентов")) > 0 Тогда
//					Продолжить;
//				КонецЕсли;
//			КонецЕсли;
//			
//			РодительЭлемента = ЭлементОтчет.Родитель;
//			Если РодительЭлемента = Неопределено Тогда
//				РодительЭлемента = ЭлементОтчет.Владелец();
//			КонецЕсли;
//			
//			КоличествоЭлементовВДеревеОтчетов = КоличествоЭлементовВДеревеОтчетов - 1;
//			РодительЭлемента.Строки.Удалить(ЭлементОтчет);
//			
//		КонецЦикла;
//		
//		ВсеГруппыОтчетов = ДеревоОтчетов.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина), Истина);
//		
//		КоличествоГрупп = ВсеГруппыОтчетов.Количество();
//		Для НомГруппы = 1 По КоличествоГрупп Цикл // просматриваем группы в обратном порядке
//			
//			ГруппаОтчетов = ВсеГруппыОтчетов[КоличествоГрупп - НомГруппы];
//			Если ГруппаОтчетов.Строки.Количество() = 0 Тогда
//				
//				РодительГруппы = ГруппаОтчетов.Родитель;
//				Если РодительГруппы = Неопределено Тогда
//					РодительГруппы = ГруппаОтчетов.Владелец();
//				КонецЕсли;
//				
//				РодительГруппы.Строки.Удалить(ГруппаОтчетов);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//
Процедура УпроститьФормуРегОтчетностиФильтрОтчетов(ДеревоОтчетов, КоличествоЭлементовВДеревеОтчетов) Экспорт
	
КонецПроцедуры

// Устарела. Скрывает элементы формы в зависимости от установки тех или иных флагов используемых ИП на УСН 6%.
//
// Параметры:
//   ФормаРО - Управляемая форма - Содержит ссылку на трансформируемую форму реготчетности
//
// Пример:
//	ФлагиУчета = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьФлагиИнтеграцииПоУмолчанию();
//	ПолучитьЗначенияКонстантИнтеграции(ФлагиУчета);
//	
//	ФормаРегОтчетности_ОтчетностьФТС = Ложь;
//	ФормаРегОтчетности_ОтчетностьФСРАР = Ложь;
//	
//	ФормаРО.Элементы.СсылкаЗаявленияНаПодключениеИзменение.Видимость = Ложь;
//							
//	Если ЗначениеЗаполнено(ФлагиУчета) И ФлагиУчета.ИнтеграцияСБанком Тогда //Доступна и активна упрощенная отчетность
//		
//		ФормаРО.Элементы.ГиперссылкаУведомления.Видимость = Ложь;
//		ФормаРО.Элементы.ГиперссылкаСервисы.Видимость = Ложь;
//		ФормаРО.Элементы.ГиперссылкаНастройки.Видимость = Ложь;
//		
//		ФормаРО.Элементы.СтраницаУведомления.Видимость = Ложь;
//		ФормаРО.Элементы.СтраницаСервисы.Видимость = Ложь;
//		ФормаРО.Элементы.СтраницаНастройки.Видимость = Ложь;
//				
//		ФормаРО.Элементы.СтраницаНастройки.Видимость = Ложь;
//		
//		ФормаРО.Элементы.ГруппаОтборовОтчетов.Видимость = Ложь;
//		
//		ФормаРО.Элементы.ОтчетыЗагрузитьИзФайла.Видимость = Ложь;
//		ФормаРО.Элементы.ОтчетыГруппаЗагрузитьИзФайла.Видимость = Ложь;
//		ФормаРО.Элементы.ОтчетыВыгрузить.Видимость = Ложь;
//		
//		ФормаРО.Элементы.ОтчетыГруппаПрисоединенныеФайлы.Видимость = Ложь;
//		
//		ФормаРО.Элементы.КнопкаСоздатьСверкаФИОиСНИЛС.Видимость = Ложь;
//		
//		ЭлектронныйДокументооборотДоступен = Ложь;
//		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
//		Если КонтекстЭДОСервер <> Неопределено Тогда
//			ЭлектронныйДокументооборотДоступен = КонтекстЭДОСервер.ХотяБыОднаОрганизацияИспользуетДокументооборот();
//		КонецЕсли;		
//		ЕстьОтправленныеЗаявления = ОбработкаЗаявленийАбонентаВызовСервера.ЕстьОтправленныеИлиОдобренныеЗаявления();		
//		УжеПодключен = ЭлектронныйДокументооборотДоступен Или ЕстьОтправленныеЗаявления;
//		Если УжеПодключен Тогда 
//			ФормаРО.Элементы.СсылкаЗаявленияНаПодключениеИзменение.Заголовок = 
//				НСтр("ru='Заявления на изменение и продление подключения к 1С-Отчетности'");
//		Иначе
//			ФормаРО.Элементы.СсылкаЗаявленияНаПодключениеИзменение.Заголовок = 
//				НСтр("ru='Заявления на подключение к 1С-Отчетности'");
//		КонецЕсли;		
//			
//		ФормаРО.Элементы.СсылкаЗаявленияНаПодключениеИзменение.Видимость = Истина;
//		
//	КонецЕсли;
//
Процедура УпроститьФормуРегОтчетности(ФормаРО) Экспорт
	
КонецПроцедуры

// Устарела. Процедура выполняет действия по упрощению интерфейса формы создания отчета, 
//	если доступна упрощенная отчетность для ИП на УСН 6%.
//
// Параметры:
//  ФормаСО - Управляемая форма - Содержит ссылку на форму создания регламентированного отчета.
//
// Пример:
//	ФлагиУчета = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьФлагиИнтеграцииПоУмолчанию();
//	ПолучитьЗначенияКонстантИнтеграции(ФлагиУчета);
//	
//	Если ЗначениеЗаполнено(ФлагиУчета) И ФлагиУчета.ИнтеграцияСБанком Тогда //Доступна и активна упрощенная отчетность
//		
//		ФормаСО.Элементы.ГруппаВидыСписков.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
//		ФормаСО.Элементы.ГруппаДеревоОтчетовГруппировка.Видимость = Ложь;
//		ФормаСО.Элементы.ГруппаРанееСозданные.Видимость = Ложь;
//		ФормаСО.Элементы.ДеревоОтчетов.Шапка = Ложь;
//		ФормаСО.ДеревоОтчетовГруппировка = 3; // без группировки, упрощенный интерфейс
//		
//	КонецЕсли;
//
Процедура УпроститьФормуСозданияОтчета(ФормаСО) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти