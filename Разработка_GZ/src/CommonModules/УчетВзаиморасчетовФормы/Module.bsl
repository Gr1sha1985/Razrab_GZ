#Область ПрограммныйИнтерфейс

#Область ПорядокУчетаРасчетов

// Возвращает перечень реквизитов документа, предназначенных для учета взаиморасчетов.
// Этим реквизитам посвящен эта область модуля.
// Все упомянутые в функции реквизиты должны быть в документе, для которых вызваются процедуры и функции 
// из этой области.
//
// Функция возвращает реквизиты, имеющие смысл в данном сеансе.
//
// В прикладных алгоритмах может потребоваться учитывать, что при определенных значениях реквизитов документа
// некоторые или все эти реквизиты могут оказаться не нужны.
// Для того, чтобы учесть эти особенности конкретного экземпляра документа, следует передать параметр ОсобенностиДокумента
//
// Параметры:
//  ОсобенностиДокумента - см. НовыйОсобенностиУчетаРасчетовДокумента()
//
// Возвращаемое значение:
//  Структура, ключи которой - имена реквизитов 
//
Функция РеквизитыДокументаПорядокУчетаРасчетов(ОсобенностиДокумента = Неопределено) Экспорт
	
	Реквизиты = Новый Структура;
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы.ДокументРасчетовСКонтрагентом) Тогда
		ТребуетсяУчетРасчетов = Ложь;
		ТребуетсяУчетАвансов  = Ложь;
	ИначеЕсли ОсобенностиДокумента = Неопределено Тогда
		ТребуетсяУчетРасчетов = Истина;
		ТребуетсяУчетАвансов  = Истина;
	Иначе
		ТребуетсяУчетРасчетов = ОсобенностиДокумента.ТребуетсяУчетРасчетов;
		ТребуетсяУчетАвансов  = ОсобенностиДокумента.ТребуетсяУчетАвансов;
	КонецЕсли;
	
	Если ТребуетсяУчетРасчетов Тогда
		
		Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			Реквизиты.Вставить("СчетУчетаРасчетовСКонтрагентом");
			Если ТребуетсяУчетАвансов Тогда
				Реквизиты.Вставить("СчетУчетаРасчетовПоАвансам");
			КонецЕсли;
		КонецЕсли;
		
		Если ТребуетсяУчетАвансов Тогда
			Если ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
				Реквизиты.Вставить("СпособЗачетаАвансов");
				Реквизиты.Вставить("ЗачетАвансов");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТребуетсяУчетАвансов Тогда
		Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			Реквизиты.Вставить("СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
			Реквизиты.Вставить("СпособЗачетаАвансов");
			Реквизиты.Вставить("ЗачетАвансов");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Реквизиты;

КонецФункции

// Функция аналогична РеквизитыДокументаПорядокУчетаРасчетов()
// Но используется не для реквизитов документа, а для реквизитов формы документа.
//
// Параметры:
//  ОсобенностиДокумента - см. НовыйОсобенностиУчетаРасчетовДокумента()
//
// Возвращаемое значение:
//  Структура, ключи которой - имена реквизитов формы
//
Функция РеквизитыФормыДокументаПорядокУчетаРасчетов(ОсобенностиДокумента = Неопределено) Экспорт

	Реквизиты = Новый Структура;
	
	Если ОсобенностиДокумента = Неопределено Тогда
		ТребуетсяУчетСроковОплаты = Ложь;
	Иначе
		ТребуетсяУчетСроковОплаты = ОсобенностиДокумента.ТребуетсяУчетСроковОплаты;
	КонецЕсли;
	
	Если ТребуетсяУчетСроковОплаты Тогда
		Реквизиты.Вставить("СрокОплаты");
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

// Процедура обновляет текст надписи ПорядокУчетаРасчетов на форме
// и устанавливает необходимые свойства элемента управления 
// в зависимости от заполненности счетов учета.
//
Процедура УстановитьПорядокУчетаРасчетов(Форма, ОсобенностиДокумента = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	ПорядокУчетаРасчетов = СвойстваФормыПорядокУчетаРасчетов(Форма, ОсобенностиДокумента);
	Форма.ПорядокУчетаРасчетов                       = ПорядокУчетаРасчетов.Представление;
	Форма.СчетаРасчетовЗаполнены                     = ПорядокУчетаРасчетов.Заполнен;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СкрытьСчетРасчетов") Тогда
		Форма.СкрытьСчетРасчетов = ПорядокУчетаРасчетов.СкрытьСчетРасчетов;
	КонецЕсли;
	Элементы.ПорядокУчетаРасчетов.ПропускатьПриВводе = ПорядокУчетаРасчетов.Заполнен;
	Элементы.ПорядокУчетаРасчетов.Видимость          = (ПорядокУчетаРасчетов.Реквизиты.Количество() > 0 
															ИЛИ ПорядокУчетаРасчетов.РеквизитыФормы.Количество() > 0);
	
КонецПроцедуры

// Процедура сохраняет в документе срок оплаты, счета учета и способ зачета авансов,
// выбранные в форме ВыборПорядкаУчетаРасчетов.
//
Процедура ОбработкаВыбораПорядокУчетаРасчетов(Форма, ВыбранноеЗначение) Экспорт

	Объект = Форма.Объект;
	
	Если ВыбранноеЗначение.ИспользуетсяСрокОплаты И Форма.СрокОплаты <> ВыбранноеЗначение.СрокОплаты Тогда
		Форма.СрокОплаты            = ВыбранноеЗначение.СрокОплаты;
		Форма.АвторасчетСрокаОплаты = Ложь;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	
	Реквизиты = РеквизитыДокументаПорядокУчетаРасчетов();
	Если ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
		ТаблицаЗачетАвансов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаЗачетАвансов);
		Объект.ЗачетАвансов.Загрузить(ТаблицаЗачетАвансов);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;

КонецПроцедуры

// Конструктор коллекции, которая описывает особенности учета расчетов в конкретном экземпляре документа.
// 
Функция НовыйОсобенностиУчетаРасчетовДокумента() Экспорт
	
	Особенности = Новый Структура;
	Особенности.Вставить("ТребуетсяУчетРасчетов",     Истина);
	Особенности.Вставить("ТребуетсяУчетАвансов",      Истина);
	Особенности.Вставить("ТребуетсяУчетСроковОплаты", Ложь);
	
	Возврат Особенности;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПорядокУчетаРасчетов

Функция СвойстваФормыПорядокУчетаРасчетов(Форма, ОсобенностиДокумента)
	
	Объект = Форма.Объект;
	
	Результат = Новый Структура;
	Результат.Вставить("Реквизиты",          РеквизитыДокументаПорядокУчетаРасчетов(ОсобенностиДокумента));
	Результат.Вставить("РеквизитыФормы",     РеквизитыФормыДокументаПорядокУчетаРасчетов(ОсобенностиДокумента));
	Результат.Вставить("Представление",      "");
	Результат.Вставить("ТребуютЗаполнения",  Новый Структура);
	Результат.Вставить("Заполнен",           Истина);
	Результат.Вставить("СкрытьСчетРасчетов", Ложь);
	
	Реквизиты = Результат.Реквизиты; // Для упрощения кода. При изменении свойств у Реквизиты меняется Результат.
	ЗаполнитьЗначенияСвойств(Реквизиты, Объект);
	
	РеквизитыФормы = Результат.РеквизитыФормы;
	Если РеквизитыФормы.Свойство("СрокОплаты") Тогда
		
		Если НЕ Форма.Модифицированность Тогда
			
			СтруктураСрокОплаты = СрокиОплатыДокументов.СрокОплатыДокументаРасчетов(
									Объект.Организация, Объект.Ссылка, Объект.Дата, Объект.ДоговорКонтрагента);
			ЗаполнитьЗначенияСвойств(Форма, СтруктураСрокОплаты);
			
		ИначеЕсли Форма.АвторасчетСрокаОплаты Тогда
			
			Форма.СрокОплаты = СрокиОплатыДокументов.СрокОплатыДокументаРасчетовАвторасчет(
									Объект.Ссылка, Объект.Дата, Объект.ДоговорКонтрагента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Подготовим текст и перечень реквизитов, требующих заполнения
	ЭлементыТекста = Новый Массив;
	
	Если РеквизитыФормы.Свойство("СрокОплаты") Тогда
		Если ЗначениеЗаполнено(Форма.СрокОплаты) Тогда
			ТекстСрокОплаты = СрокиОплатыДокументов.ПредставлениеСрокаОплаты(Форма.СрокОплаты);
			ЭлементыТекста.Добавить(ТекстСрокОплаты);
		КонецЕсли;
	КонецЕсли;
	
	Счета = Новый Массив; // Для счетов выводим код счета
	Счета.Добавить("СчетУчетаРасчетовСКонтрагентом");
	Счета.Добавить("СчетУчетаРасчетовПоАвансам");
	
	Для Каждого ИмяРеквизита Из Счета Цикл
		
		Если Не Реквизиты.Свойство(ИмяРеквизита) Тогда
			// Не выводится
			Продолжить;
		КонецЕсли;
		
		Счет = Реквизиты[ИмяРеквизита];
		
		Если Не ЗначениеЗаполнено(Счет) Тогда
			ЭлементыТекста.Добавить(ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
			Результат.ТребуютЗаполнения.Вставить(ИмяРеквизита);
		Иначе
			СвойствоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
			ЭлементыТекста.Добавить(СвойствоСчета.Код);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Реквизиты.Свойство("СпособЗачетаАвансов") Тогда
		
		СпособЗачетаАвансов = Реквизиты.СпособЗачетаАвансов;
		
		Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически Тогда
			ЭлементыТекста.Добавить(НСтр("ru = 'зачет аванса автоматически'"));
		ИначеЕсли СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ЭлементыТекста.Добавить(НСтр("ru = 'зачет аванса по документам'"));
			Если Реквизиты.Свойство("ЗачетАвансов") И ЗначениеЗаполнено(Реквизиты.ЗачетАвансов) Тогда
				Результат.ТребуютЗаполнения.Вставить(ИмяРеквизита);
			КонецЕсли;
		ИначеЕсли СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			ЭлементыТекста.Добавить(НСтр("ru = 'аванс не зачитывается'"));
		КонецЕсли;

	КонецЕсли;
	
	Если ЭлементыТекста.Количество() = 0 Тогда
		Результат.Представление = НСтр("ru = 'Не требуется'");
	Иначе
		Результат.Представление = СтрСоединить(ЭлементыТекста, НСтр("ru = ', '"));
		Если Не ПустаяСтрока(Результат.Представление) Тогда
			// Предложение следует начинать с заглавной буквы
			Результат.Представление = ВРег(Лев(Результат.Представление, 1)) + Сред(Результат.Представление, 2);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОсобенностиДокумента.ТребуетсяУчетРасчетов Тогда
		Результат.СкрытьСчетРасчетов = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
