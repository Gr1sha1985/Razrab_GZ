
//ПРОГРАММНЫЙ ИНТЕРФЕЙС

//Находит узел обмена по коду. В обмене данными с МП коду узла МП должен соответствовать его ИдентификаторКлиента, который
//для мобильной платформы уникален для каждого экземпляра МП на устройстве, а не только для самого устройства
Функция НайтиУзелОбмена(КодМобильногоУстройства) Экспорт
	
	Возврат ПланыОбмена.МобильноеПриложениеПредприниматель.НайтиПоКоду(КодМобильногоУстройства);
	
КонецФункции

//При выполнении первичного обмена вызывается, чтобы создать узел обмена МП, задать ему префикс, зарегистрировать данные к отправке
Процедура ИнициализироватьПервичныйОбмен(УзелОбмена, КодМобильногоУстройства, ДатаНачалаХраненияДанных, ВерсияКонфигурации) Экспорт
	
	ЦентральныйУзел = ПланыОбмена.МобильноеПриложениеПредприниматель.ЭтотУзел();
	Если НЕ ЗначениеЗаполнено(ЦентральныйУзел.Код) Тогда
		УзелОбъект = ЦентральныйУзел.ПолучитьОбъект();
		УзелОбъект.ОбменДанными.Загрузка = Истина;
		УзелОбъект.Код = "001";
		УзелОбъект.Наименование = "Центральный";
		УзелОбъект.Записать();
	КонецЕсли;
	
	Если УзелОбмена.Пустая() Тогда
		НовыйУзел = ПланыОбмена.МобильноеПриложениеПредприниматель.СоздатьУзел();
		НовыйУзел.Код						= КодМобильногоУстройства;
		НовыйУзел.Наименование				= "Мобильное приложение " + КодМобильногоУстройства;
		НовыйУзел.ДатаНачалаХраненияДанных	= ДатаНачалаХраненияДанных;
		НовыйУзел.Префикс					= ПолучитьПрефиксНовогоУзлаОбмена();
		НовыйУзел.ВерсияКонфигурации		= ВерсияКонфигурации;
		НовыйУзел.ПолучаетPushУведомления	= Истина;
		НовыйУзел.Записать();
		УзелОбмена = НовыйУзел.Ссылка;
	Иначе
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
		УзелОбъект = УзелОбмена.ПолучитьОбъект();
		УзелОбъект.ДатаНачалаХраненияДанных		= ДатаНачалаХраненияДанных;
		УзелОбъект.НомерОтправленного			= 0;
		УзелОбъект.НомерПринятого				= 0;
		УзелОбъект.ВерсияКонфигурации			= ВерсияКонфигурации;
		УзелОбъект.ПолучаетPushУведомления	    = Истина;
		УзелОбъект.Записать();
	КонецЕсли;
	
	ЗарегистрироватьИзмененияОбъектовДляПервичногоОбмена(УзелОбмена);
	
КонецПроцедуры

//Вызывается для проверки изменения в МП даты начала хранения данных. В случае, если дата в МП сдвинулась назад, 
//производит регистрацию к отправке в МП соответствующих документов
Процедура ПроверитьОбработатьИзменениеДатыНачалаХраненияДанных(УзелОбмена, НоваяДата) Экспорт
	
	Если НоваяДата <> УзелОбмена.ДатаНачалаХраненияДанных Тогда
		
		Если НоваяДата < УзелОбмена.ДатаНачалаХраненияДанных Тогда
			
			ТаблицаДокументовДляВыгрузки = ТаблицаДокументовДляВыгрузки(НоваяДата, УзелОбмена.ДатаНачалаХраненияДанных);
			Для каждого Строка Из ТаблицаДокументовДляВыгрузки Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Строка.Ссылка);
			КонецЦикла;
			
		КонецЕсли;
		
		УзелОбъект = УзелОбмена.ПолучитьОбъект();
		УзелОбъект.ДатаНачалаХраненияДанных = НоваяДата;
		УзелОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

//Вызывается для проверки изменения версии МП
//
Процедура ПроверитьОбработатьИзменениеВерсииМобильногоПриложения(УзелОбмена, НоваяВерсия) Экспорт
	
	Если НоваяВерсия <> УзелОбмена.ВерсияКонфигурации Тогда
		
		ВыполнитьОбработкуОбновленияВерсииМобильногоПриложения(УзелОбмена, НоваяВерсия);
		
		УзелОбъект = УзелОбмена.ПолучитьОбъект();
		УзелОбъект.ВерсияКонфигурации = НоваяВерсия;
		УзелОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработкуОбновленияВерсииМобильногоПриложения(УзелОбмена, НоваяВерсия)
	
	ВерсияКонфигурации = УзелОбмена.ВерсияКонфигурации;
	
	Если ПереходНаВерсию("1.0.4.1", ВерсияКонфигурации, НоваяВерсия) Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.РегистрыСведений.ЖурналОтчетовСтатусы);
		
	КонецЕсли;
	
	Если ПереходНаВерсию("1.0.7.1", ВерсияКонфигурации, НоваяВерсия) Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.Склады);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(УзелОбмена.ДатаНачалаХраненияДанных));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата >= &ДатаНач
		|	И (РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)
		|			ИЛИ РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.Товары)
		|			ИЛИ РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.Услуги))
		|	И РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// регистрируем изменение документа для узла
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);  
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПереходНаВерсию("1.0.13.1", ВерсияКонфигурации, НоваяВерсия) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(УзелОбмена.ДатаНачалаХраненияДанных));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктСверкиВзаиморасчетов.Ссылка
		|ИЗ
		|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
		|ГДЕ
		|	АктСверкиВзаиморасчетов.Дата >= &ДатаНач";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// регистрируем изменение документа для узла
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
		КонецЦикла;
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.Номенклатура);
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.НоменклатурныеГруппы);
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.ВидыНоменклатуры);
	КонецЕсли;
	
	Если ПереходНаВерсию("1.0.14.1", ВерсияКонфигурации, НоваяВерсия) Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПереходНаВерсию(ВерсияОбработчика, ТекущаяВерсия, НоваяВерсия) 
	
	Попытка
		ДанныеОбновлены = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ТекущаяВерсия, ВерсияОбработчика) >= 0;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если ДанныеОбновлены Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ПриложениеОбновлено = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, ВерсияОбработчика) >= 0;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат ПриложениеОбновлено;
	
КонецФункции

//Записывает в базу документ СчетНаОплатуПокупателю, принимая его данные в виде объекта XDTO
Процедура ЗаписатьСчетНаОплатуПокупателю(ОбъектXDTO, УзелОбмена, РегистрироватьПриИзменении = Истина, НомерБП = "") Экспорт
	
	НовыйОбъект = Ложь;
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "СчетНаОплатуПокупателю");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		НовыйОбъект = Истина;
	КонецЕсли;
	
	Объект.Номер					= ОбъектXDTO.Номер;
	Объект.Дата						= ОбъектXDTO.Дата;
	Объект.Проведен					= ОбъектXDTO.Проведен;
	Объект.ПометкаУдаления			= ОбъектXDTO.ПометкаУдаления;
	
	Объект.Организация				= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.ОрганизацияПолучатель	= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Контрагент				= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
	Объект.ДоговорКонтрагента		= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДоговорКонтрагента, "ДоговорыКонтрагентов");
	Объект.СтруктурнаяЕдиница		= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.БанковскийСчет, "БанковскиеСчета");
	Объект.ДополнительныеУсловия	= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДополнительныеУсловия, "ДополнительныеУсловия");
	Объект.СуммаДокумента			= ОбъектXDTO.СуммаДокумента;
	Объект.СуммаВключаетНДС			= ОбъектXDTO.СуммаВключаетНДС;
	Объект.ДокументБезНДС			= ОбъектXDTO.ДокументБезНДС;
	ВалютаЗагружаемогоДокумента		= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ВалютаДокумента, "Валюты");
	Если Объект.ВалютаДокумента <> ВалютаЗагружаемогоДокумента Тогда
		Объект.ВалютаДокумента		= ВалютаЗагружаемогоДокумента;
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			СтруктураКурсаДокумента			= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
			Объект.КурсВзаиморасчетов		= СтруктураКурсаДокумента.Курс;
			Объект.КратностьВзаиморасчетов	= СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;
		
	Объект.Товары.Очистить();
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.ТоварыУслуги Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		Если ЗначениеЗаполнено(ЗагружаемаяСтрокаТЧ.Номенклатура) Тогда
			НоваяСтрока.Номенклатура	= ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Номенклатура, "Номенклатура");
		КонецЕсли;
		НоваяСтрока.Содержание		= ЗагружаемаяСтрокаТЧ.Содержание;
		НоваяСтрока.Количество		= ЗагружаемаяСтрокаТЧ.Количество;
		НоваяСтрока.Цена			= ЗагружаемаяСтрокаТЧ.Цена;
		НоваяСтрока.Сумма			= ЗагружаемаяСтрокаТЧ.Сумма;
		НоваяСтрока.СтавкаНДС		= ДесериализоватьСтавкуНДС(ЗагружаемаяСтрокаТЧ.СтавкаНДС);
		НоваяСтрока.СуммаНДС = ЗагружаемаяСтрокаТЧ.СуммаНДС;
	КонецЦикла;
	
	Если ПустаяСтрока(Объект.Номер) Тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	Объект.ОбменДанными.Загрузка	= Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	
	Объект.Записать();
	
	НомерБП = Объект.Номер;
	
	Если РегистрироватьПриИзменении И СокрЛП(НомерБП) <> СокрЛП(ОбъектXDTO.Номер) Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

//Записывает в базу документ РеализацияТоваровУслуг, принимая его данные в виде объекта XDTO
Процедура ЗаписатьРеализацияТоваровУслуг(ОбъектXDTO, УзелОбмена, РегистрироватьПриИзменении = Истина, НомерБП = "", НовыйСчетФактура = Ложь) Экспорт
	
	НовыйОбъект = Ложь;
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "РеализацияТоваровУслуг");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		НовыйОбъект = Истина;
		Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	Объект.Номер					= ОбъектXDTO.Номер;
	Объект.Дата						= ОбъектXDTO.Дата;
	Объект.Проведен					= ОбъектXDTO.Проведен;
	Объект.ПометкаУдаления			= ОбъектXDTO.ПометкаУдаления;
	
	Объект.Организация				= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Контрагент				= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
	Объект.ДоговорКонтрагента		= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДоговорКонтрагента, "ДоговорыКонтрагентов");
	Объект.БанковскийСчетОрганизации= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.БанковскийСчет, "БанковскиеСчета");
	Объект.Склад					= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Склад, "Склады");
	Объект.СуммаДокумента			= ОбъектXDTO.СуммаДокумента;
	Объект.СуммаВключаетНДС			= ОбъектXDTO.СуммаВключаетНДС;
	Объект.ДокументБезНДС			= ОбъектXDTO.ДокументБезНДС;
	Объект.СчетНаОплатуПокупателю	= ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.СчетНаОплатуПокупателю, "СчетНаОплатуПокупателю");
	ВалютаЗагружаемогоДокумента		= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ВалютаДокумента, "Валюты");
	Если Объект.ВалютаДокумента <> ВалютаЗагружаемогоДокумента Тогда
		Объект.ВалютаДокумента		= ВалютаЗагружаемогоДокумента;
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			СтруктураКурсаДокумента			= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
			Объект.КурсВзаиморасчетов		= СтруктураКурсаДокумента.Курс;
			Объект.КратностьВзаиморасчетов	= СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураИндексов = Новый Структура("Товары, Услуги", 0, 0);
	ЕстьНДС = Ложь;
	
	Попытка
		ВерсияМПСтарше13 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(УзелОбмена.ВерсияКонфигурации, "1.0.13.1") >= 0;
	Исключение
		ВерсияМПСтарше13 = Ложь;
	КонецПопытки;

	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.ТоварыУслуги Цикл
		
		Если ЗначениеЗаполнено(ЗагружаемаяСтрокаТЧ.Номенклатура) Тогда
			Номенклатура = ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Номенклатура, "Номенклатура");
			
			ЭтоУслуга = ?(ВерсияМПСтарше13, ЗагружаемаяСтрокаТЧ.ЭтоУслуга, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Услуга"));
			ИмяТЧ = ?(ЭтоУслуга, "Услуги", "Товары");
		Иначе
			Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			ИмяТЧ = "Услуги";
		КонецЕсли;
		
		Если ЗагружаемаяСтрокаТЧ.СтавкаНДС = "НДС20" Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			ЕстьНДС = Истина;
		ИначеЕсли ЗагружаемаяСтрокаТЧ.СтавкаНДС = "НДС18" Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			ЕстьНДС = Истина;
		ИначеЕсли ЗагружаемаяСтрокаТЧ.СтавкаНДС = "НДС10" Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
			ЕстьНДС = Истина;
		ИначеЕсли ЗагружаемаяСтрокаТЧ.СтавкаНДС = "НДС0" Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
			ЕстьНДС = Истина;
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		СтрокаОбъекта = Неопределено;
		
		//Не очищаем строки если совпадает номенкатура (содержание) и ставка НДС
		ИндексТЧ = СтруктураИндексов[ИмяТЧ];
		Пока Объект[ИмяТЧ].Количество() > ИндексТЧ Цикл
			СтрокаОбъекта = Объект[ИмяТЧ][ИндексТЧ];
			Если ((ЗначениеЗаполнено(Номенклатура) И Номенклатура = СтрокаОбъекта.Номенклатура) ИЛИ
				(НЕ ЗначениеЗаполнено(Номенклатура) И ЗагружаемаяСтрокаТЧ.Содержание = СтрокаОбъекта.Содержание))
				И СтавкаНДС = СтрокаОбъекта.СтавкаНДС Тогда
				//Строка подходит
				Прервать;
			Иначе
				Объект[ИмяТЧ].Удалить(СтрокаОбъекта);
				СтрокаОбъекта = Неопределено;
			КонецЕсли;				
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОбъекта) Тогда
			СтрокаОбъекта = Объект[ИмяТЧ].Добавить();
		КонецЕсли;
		
		СтрокаОбъекта.Номенклатура		= Номенклатура;

		Если ИмяТЧ = "Услуги" Тогда
			СтрокаОбъекта.Содержание	= ЗагружаемаяСтрокаТЧ.Содержание;
		КонецЕсли;
		СтрокаОбъекта.Количество		= ЗагружаемаяСтрокаТЧ.Количество;
		СтрокаОбъекта.Цена			= ЗагружаемаяСтрокаТЧ.Цена;
		СтрокаОбъекта.Сумма			= ЗагружаемаяСтрокаТЧ.Сумма;
		СтрокаОбъекта.СтавкаНДС		= СтавкаНДС;
		СтрокаОбъекта.СуммаНДС 		= ЗагружаемаяСтрокаТЧ.СуммаНДС;
		
		СтруктураИндексов[ИмяТЧ] = ИндексТЧ + 1;
		
	КонецЦикла;
	
	//Очистим строки, оставшиеся после загрузки
	Пока Объект.Товары.Количество() > СтруктураИндексов.Товары Цикл
		Объект.Товары.Удалить(СтруктураИндексов.Товары);
	КонецЦикла;
	
	//Очистим строки, оставшиеся после загрузки
	Пока Объект.Услуги.Количество() > СтруктураИндексов.Услуги Цикл
		Объект.Услуги.Удалить(СтруктураИндексов.Услуги);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Если Объект.Товары.Количество() > 0 и Объект.Услуги.Количество() > 0 Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ИначеЕсли Объект.Услуги.Количество() > 0 Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
		Иначе
			Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
		КонецЕсли;		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Номер) Тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка	= Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();

	Если ОбъектXDTO.Проведен Тогда
		Попытка
			Объект.ОбменДанными.Загрузка = Ложь;
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Объект.Проведен = Ложь;
			Объект.ОбменДанными.Загрузка	= Истина;
			Объект.ОбменДанными.Отправитель = УзелОбмена;
			Объект.Записать();
		КонецПопытки;
	КонецЕсли;
	
	НовыйСчетФактура = Ложь;
	Если НовыйОбъект Тогда
		Если ЕстьНДС Тогда
			ПараметрыСоздания = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактуры();
			ПараметрыСоздания.Основание = Объект.Ссылка;
			Если УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания) <> Неопределено Тогда
				НовыйСчетФактура = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Объект.УстановитьСтатусДокумента();
	
	НомерБП = Объект.Номер;
	
	Если РегистрироватьПриИзменении 
		И (СокрЛП(НомерБП) <> СокрЛП(ОбъектXDTO.Номер)
		ИЛИ НовыйСчетФактура) Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Ссылка);
	КонецЕсли;
КонецПроцедуры

//Записывает в базу документ АктСверкиВзаиморасчетов, принимая его данные в виде объекта XDTO
Процедура ЗаписатьАктСверкиВзаиморасчетов(ОбъектXDTO, УзелОбмена, РегистрироватьПриИзменении = Истина, НомерБП = "") Экспорт
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "АктСверкиВзаиморасчетов");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		
		// Заполняем счета учета взаиморасчетов
		ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
		ТаблицаСчетов.Колонки.СчетРасчетов.Имя = "Счет";
		ТаблицаСчетов.Колонки.Добавить("УчаствуетВРасчетах", Новый ОписаниеТипов("Булево"));
		ТаблицаСчетов.ЗаполнитьЗначения(Истина, "УчаствуетВРасчетах");
		Объект.СписокСчетов.Загрузить(ТаблицаСчетов);
	КонецЕсли;
	
	Объект.Номер					= ОбъектXDTO.Номер;
	Объект.Дата						= ОбъектXDTO.Дата;
	Объект.Проведен					= ОбъектXDTO.Проведен;
	Объект.ПометкаУдаления			= ОбъектXDTO.ПометкаУдаления;
	
	Объект.Организация				= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Контрагент				= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
	Объект.ДоговорКонтрагента		= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДоговорКонтрагента, "ДоговорыКонтрагентов");
	Объект.ДатаНачала				= ОбъектXDTO.ДатаНачала;
	Объект.ДатаОкончания			= ОбъектXDTO.ДатаОкончания;
	Объект.ОстатокНаНачало			= ОбъектXDTO.ОстатокНаНачало;
	Объект.СверкаСогласована		= ОбъектXDTO.СверкаСогласована;
	Объект.ВалютаДокумента			= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ВалютаДокумента, "Валюты");
	
	Объект.ПоДаннымОрганизации.Очистить();
	Объект.ПоДаннымКонтрагента.Очистить();
	
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.ПоДаннымОрганизации Цикл
		НоваяСтрока = Объект.ПоДаннымОрганизации.Добавить();
		Если ЗначениеЗаполнено(ЗагружаемаяСтрокаТЧ.ДокументСсылка) Тогда
			НоваяСтрока.Документ = ДесериализоватьСсылкуНаДокумент(ЗагружаемаяСтрокаТЧ.ДокументСсылка, ЗагружаемаяСтрокаТЧ.ДокументТип);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗагружаемаяСтрокаТЧ.Договор) Тогда
			НоваяСтрока.Договор = ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Договор, "ДоговорыКонтрагентов");
		КонецЕсли;
		НоваяСтрока.Дата 			= ЗагружаемаяСтрокаТЧ.Дата;
		НоваяСтрока.Представление 	= ЗагружаемаяСтрокаТЧ.Представление;
		НоваяСтрока.Дебет 			= ЗагружаемаяСтрокаТЧ.Дебет;
		НоваяСтрока.Кредит 			= ЗагружаемаяСтрокаТЧ.Кредит;
	КонецЦикла;
	
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.ПоДаннымКонтрагента Цикл
		НоваяСтрока = Объект.ПоДаннымКонтрагента.Добавить();
		Если ЗначениеЗаполнено(ЗагружаемаяСтрокаТЧ.ДокументСсылка) Тогда
			НоваяСтрока.Документ = ДесериализоватьСсылкуНаДокумент(ЗагружаемаяСтрокаТЧ.ДокументСсылка, ЗагружаемаяСтрокаТЧ.ДокументТип);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗагружаемаяСтрокаТЧ.Договор) Тогда
			НоваяСтрока.Договор = ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Договор, "ДоговорыКонтрагентов");
		КонецЕсли;
		НоваяСтрока.Дата 			= ЗагружаемаяСтрокаТЧ.Дата;
		НоваяСтрока.Представление 	= ЗагружаемаяСтрокаТЧ.Представление;
		НоваяСтрока.Дебет 			= ЗагружаемаяСтрокаТЧ.Дебет;
		НоваяСтрока.Кредит 			= ЗагружаемаяСтрокаТЧ.Кредит;
	КонецЦикла;
	
	Если ПустаяСтрока(Объект.Номер) Тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка	= Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
	НомерБП = Объект.Номер;
	
	//Если документу присвоен новый номер, зарегистриуем его к обмену
	Если РегистрироватьПриИзменении И СокрЛП(НомерБП) <> СокрЛП(ОбъектXDTO.Номер) Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

//Записывает в базу элемент справочника Контрагенты, принимая его данные в виде объекта XDTO
Процедура ЗаписатьКонтрагента(ОбъектXDTO, УзелОбмена) Экспорт
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Контрагенты");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Если ОбъектXDTO.ЭтоГруппа Тогда
			Объект = Справочники.Контрагенты.СоздатьГруппу();
		Иначе
			Объект = Справочники.Контрагенты.СоздатьЭлемент();
			Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование = ОбъектXDTO.Наименование;
	Объект.Код			= ОбъектXDTO.Код;
	
	Если НЕ Объект.ЭтоГруппа Тогда
		Если ОбъектXDTO.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо" Тогда
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		ИначеЕсли ОбъектXDTO.ЮридическоеФизическоеЛицо = "ФизическоеЛицо" Тогда
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонецЕсли;
		Объект.ИНН							= ОбъектXDTO.ИНН;
		Объект.КПП							= ОбъектXDTO.КПП;
		Объект.НаименованиеПолное			= ОбъектXDTO.НаименованиеПолное;
		Объект.ОбособленноеПодразделение	= ОбъектXDTO.ОбособленноеПодразделение;
		Объект.ГоловнойКонтрагент			= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ГоловнойКонтрагент, "Контрагенты");
		
		Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.КонтактнаяИнформация Цикл
			УдалитьИмеющиесяСтрокиКИ(Объект, ЗагружаемаяСтрокаТЧ);
		КонецЦикла;
		
		Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.КонтактнаяИнформация Цикл
			ДобавитьНовуюСтрокуКИ(Объект, ЗагружаемаяСтрокаТЧ);
		КонецЦикла;
		
	КонецЕсли;
	Объект.Родитель = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Родитель, "Контрагенты");
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьДоговор(ОбъектXDTO, УзелОбмена) Экспорт
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "ДоговорыКонтрагентов");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Если ОбъектXDTO.ЭтоГруппа Тогда
			Объект = Справочники.ДоговорыКонтрагентов.СоздатьГруппу();
		Иначе
			Объект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			Объект.СпособЗаполненияСтавкиНДС =
				 Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоУмолчанию();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование		= ОбъектXDTO.Наименование;
	Объект.Код				= ОбъектXDTO.Код;
	Объект.ПометкаУдаления	= ОбъектXDTO.ПометкаУдаления;
	Объект.Владелец			= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Владелец, "Контрагенты");
	
	Если НЕ ОбъектXDTO.ЭтоГруппа Тогда
		
		Объект.ВалютаВзаиморасчетов	= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ВалютаВзаиморасчетов, "Валюты");
		Объект.Организация			= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
		
		Если ОбъектXDTO.ВидДоговора = "СПокупателем" Тогда
			Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		ИначеЕсли ОбъектXDTO.ВидДоговора = "СПоставщиком" Тогда
			Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		ИначеЕсли ОбъектXDTO.ВидДоговора = "СКомиссионером" Тогда
			Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
		ИначеЕсли ОбъектXDTO.ВидДоговора = "СКомитентом" Тогда
			Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		ИначеЕсли ОбъектXDTO.ВидДоговора = "СКомиссионеромНаЗакупку" Тогда
			Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
		ИначеЕсли ОбъектXDTO.ВидДоговора = "СКомитентомНаЗакупку" Тогда
			Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку;
		ИначеЕсли ОбъектXDTO.ВидДоговора = "Прочее" Тогда
			Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		ИначеЕсли ОбъектXDTO.ВидДоговора = "СФакторинговойКомпанией" Тогда
			Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.Родитель = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Родитель, "ДоговорыКонтрагентов");
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	
	Объект.Записать();
	
КонецПроцедуры

//Записывает (сериализует) в сообщение обмена данные объектов, зарегистрированных к отправке в МП через план обмена
Процедура ЗаписатьИзмененияЗарегистрированныеЧерезПланОбмена(УзелОбмена, ЗаписьXML, ЗаписьСообщения) Экспорт
	
	МассивФайлов = Новый Массив;
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	ВыбранЭлемент = Ложь;
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		ПолученЭлемент = Ложь;
		ЗаписанЭлемент = Ложь;
		
		Данные = ВыборкаИзменений.Получить();
		ВыбранЭлемент = Истина;
		
		ОбъектXDTO = ПолучитьОбъектXDTOИзДанныхВыборкиИзменений(Данные, МассивФайлов, УзелОбмена);
		ПолученЭлемент = Истина;
		Если ОбъектXDTO <> Неопределено Тогда
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
			ЗаписанЭлемент = Истина;
		КонецЕсли;
		
		ВыбранЭлемент = Ложь;		
		
	КонецЦикла;
	
	Если МассивФайлов.Количество() <> 0 Тогда
		
		Для каждого ФайлСсылка Из МассивФайлов Цикл
			
			ОбъектXDTO = ПолучитьОбъектXDTOФайл(ФайлСсылка);
			Если ОбъектXDTO <> Неопределено Тогда
				ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Записывает (сериализует) в сообщение обмена данные по задолженности контрагентов (самих этих данных явно в объектах БД нет, они получаются запросом)
Процедура ЗаписатьЗадолженностиКонтрагентов(УзелОбмена, ЗаписьXML, ЗаписьСообщения) Экспорт
	
	ДолгиКонтрагентовТаблица = ДолгиКонтрагентов(ТекущаяДатаСеанса());
	
	Для каждого СтрокаТаблицыДолгиКонтрагентов Из ДолгиКонтрагентовТаблица Цикл
		
		ОбъектXDTO = ПолучитьОбъектXDTOЗадолженностьКонтрагента(СтрокаТаблицыДолгиКонтрагентов);
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		
	КонецЦикла;
	
	ДолгиКонтрагентовМинусГод = ДолгиКонтрагентов(ДобавитьМесяц(ТекущаяДатаСеанса(), -12));
	
	//Добавим общие показатели расчетов с контрагентами
	ДолгиКонтрагентовТаблица.Свернуть("Организация", "НамДолжны, МыДолжны");
	ДолгиКонтрагентовМинусГод.Свернуть("Организация", "НамДолжны, МыДолжны");
	
	Для каждого СтрокаТаблицыДолгиКонтрагентов Из ДолгиКонтрагентовТаблица Цикл
		
		СтрокаПрошлогоГода = ДолгиКонтрагентовМинусГод.Найти(СтрокаТаблицыДолгиКонтрагентов.Организация);
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ОбщийПоказатель");
		ПередаваемыйОбъект.Организация	= СериализоватьСсылку(СтрокаТаблицыДолгиКонтрагентов.Организация);
		ПередаваемыйОбъект.Показатель	= "Нам_Должны";
		ПередаваемыйОбъект.Значение		= СтрокаТаблицыДолгиКонтрагентов.НамДолжны;
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ПередаваемыйОбъект);
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ОбщийПоказательСИсторией");
		ПередаваемыйОбъект.Организация	= СериализоватьСсылку(СтрокаТаблицыДолгиКонтрагентов.Организация);
		ПередаваемыйОбъект.Показатель	= "Нам_Должны";
		ПередаваемыйОбъект.Значение		= СтрокаТаблицыДолгиКонтрагентов.НамДолжны;
		Если НЕ СтрокаПрошлогоГода = Неопределено Тогда
			ПередаваемыйОбъект.ЗначениеМинусГод = СтрокаПрошлогоГода.НамДолжны;
		КонецЕсли;
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ПередаваемыйОбъект);
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ОбщийПоказатель");
		ПередаваемыйОбъект.Организация	= СериализоватьСсылку(СтрокаТаблицыДолгиКонтрагентов.Организация);
		ПередаваемыйОбъект.Показатель	= "Мы_Должны";
		ПередаваемыйОбъект.Значение		= СтрокаТаблицыДолгиКонтрагентов.МыДолжны;
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ПередаваемыйОбъект);
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ОбщийПоказательСИсторией");
		ПередаваемыйОбъект.Организация	= СериализоватьСсылку(СтрокаТаблицыДолгиКонтрагентов.Организация);
		ПередаваемыйОбъект.Показатель	= "Мы_Должны";
		ПередаваемыйОбъект.Значение		= СтрокаТаблицыДолгиКонтрагентов.МыДолжны;
		Если НЕ СтрокаПрошлогоГода = Неопределено Тогда
			ПередаваемыйОбъект.ЗначениеМинусГод = СтрокаПрошлогоГода.МыДолжны;
		КонецЕсли;
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ПередаваемыйОбъект);
		
	КонецЦикла;
	
КонецПроцедуры


//Записывает (сериализует) в сообщение обмена данные об остатках номенклатуры (самих этих данных явно в объектах БД нет, они получаются запросом)
Процедура ЗаписатьОстаткиНоменклатуры(УзелОбмена, ЗаписьXML, ЗаписьСообщения) Экспорт
	
	ОстаткиНоменклатуры = ОстаткиНоменклатуры();
	
	Для каждого СтрокаТаблицыОстаткиНоменклатуры Из ОстаткиНоменклатуры Цикл
		
		ОбъектXDTO = ПолучитьОбъектXDTOОстатокНоменклатуры(СтрокаТаблицыОстаткиНоменклатуры);
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

//Записывает (сериализует) в список задач из регистра ЗадачиБухгалтера 
Процедура ЗаписатьСписокЗадач(УзелОбмена, ЗаписьXML, ЗаписьСообщения) Экспорт
	
	// Проверим актуальность
	ДатаАктуальности = РегистрыСведений.АктуальностьСпискаЗадачБухгалтера.ДатаАктуальности(Справочники.Организации.ПустаяСсылка());
	Если ТекущаяДатаСеанса() > ДатаАктуальности Тогда
		РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьРегулярныеЗадачи(, КалендарьБухгалтера.УпреждениеЗаполненияСписка());
	КонецЕсли;
	
	// Обеспечиваем дальнейшую актуальность данных.
	КалендарьБухгалтера.ЗапланироватьОбновлениеЗадачБухгалтера();
	
	СписокЗадач = СписокЗадач(УзелОбмена.ДатаНачалаХраненияДанных);
	
	Для каждого СтрокаСпискаЗадач Из СписокЗадач Цикл
		
		ОбъектXDTO = ПолучитьОбъектXDTOСтрокаСпискаЗадач(СтрокаСпискаЗадач);
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

//Записывает (сериализует) в сообщение обмена некоторые общие показатели по организациям (самих этих данных явно в объектах БД нет, они получаются запросом)
Процедура ЗаписатьОбщиеПоказатели(УзелОбмена, ЗаписьXML, ЗаписьСообщения) Экспорт
	
	ОбщиеПоказателиТаблица = ОбщиеПоказатели();
	
	Для каждого СтрокаТаблицыОбщиеПоказатели Из ОбщиеПоказателиТаблица Цикл
		
		ОбъектXDTO = ПолучитьОбъектXDTOОбщийПоказатель(СтрокаТаблицыОбщиеПоказатели);
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		
	КонецЦикла;

	//Показатели продаж получим из монитора руководителя
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("ВариантОкругления", 1);
	Параметры.Вставить("ПоказыватьСравнениеСПрошлымГодом", Истина);
	
	Для Каждого Организация Из ДоступныеОрганизации Цикл
		
		ЗаписатьОбщиеПоказателиПродаж(Организация, Параметры, ЗаписьXML);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьОбщиеПоказателиПродаж(Организация, Параметры, ЗаписьXML)
	
	Параметры.Вставить("Организация", Организация);
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам);
	
	ДанныеРазделовМонитора = МониторРуководителя.ПолучитьДанныеРазделовМонитора(
		Параметры.Организация, РазделыМонитора, Параметры.ВариантОкругления, Параметры.ПоказыватьСравнениеСПрошлымГодом);
	
	Если ДанныеРазделовМонитора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРазделовМонитора.Индексы.Добавить("РазделМонитора, Порядок");
	
	Отбор = Новый Структура;
	Отбор.Вставить("РазделМонитора", Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам);
	Отбор.Вставить("Порядок", 0);
	
	// Текущий месяц	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ОбщийПоказательСИсторией");
	ПередаваемыйОбъект.Организация	= СериализоватьСсылку(Организация);
	ПередаваемыйОбъект.Показатель	= "ТекущийМесяц";
	Отбор.Порядок = Отчеты.Продажи.ПорядокТекущегоМесяца();
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ПередаваемыйОбъект.Значение		= НайденныеСтроки[0].Сумма;
		ПередаваемыйОбъект.ЗначениеМинусГод = НайденныеСтроки[0].СуммаПрошлыйПериод;
		ПередаваемыйОбъект.ОписаниеПериода = НайденныеСтроки[0].Представление;
	КонецЕсли;
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ПередаваемыйОбъект);
	
	// С начала года
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ОбщийПоказательСИсторией");
	ПередаваемыйОбъект.Организация	= СериализоватьСсылку(Организация);
	ПередаваемыйОбъект.Показатель	= "ТекущийМесяцСНачалаГода";
	Отбор.Вставить("Порядок", Отчеты.Продажи.ПорядокТекущегоМесяцаСНачалаГода());
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ПередаваемыйОбъект.Значение		= НайденныеСтроки[0].Сумма;
		ПередаваемыйОбъект.ЗначениеМинусГод = НайденныеСтроки[0].СуммаПрошлыйПериод;
		ПередаваемыйОбъект.ОписаниеПериода = НайденныеСтроки[0].Представление;
	КонецЕсли;
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ПередаваемыйОбъект);
	
	// Прошлый месяц
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ОбщийПоказательСИсторией");
	ПередаваемыйОбъект.Организация	= СериализоватьСсылку(Организация);
	ПередаваемыйОбъект.Показатель	= "ПрошлыйМесяц";
	Отбор.Порядок = Отчеты.Продажи.ПорядокПрошлогоМесяца();
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ПередаваемыйОбъект.Значение		= НайденныеСтроки[0].Сумма;
		ПередаваемыйОбъект.ЗначениеМинусГод = НайденныеСтроки[0].СуммаПрошлыйПериод;
		ПередаваемыйОбъект.ОписаниеПериода = НайденныеСтроки[0].Представление;
	КонецЕсли;
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ПередаваемыйОбъект);
	
КонецПроцедуры

//Записывает (сериализует) в сообщение обмена условно постоянные данные БД разной природы, напр. настройки, хранящиеся в реквизитах узла обмена
Процедура ЗаписатьПостоянныеДанные(УзелОбмена, ЗаписьXML, ЗаписьСообщения) Экспорт
	
	// Префикс ИБ для мобильного приложения
	ОбъектXDTO = ПолучитьОбъектXDTOПрефиксМП(УзелОбмена);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	
	// Дополнительная колонка печатных форм торговых документов
	ОбъектXDTO = ПолучитьОбъектXDTOКолонкаПечатныхФорм();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	
	// ФО ИспользоватьНесколькоНоменклатурныхГрупп
	ОбъектXDTO = ПолучитьОбъектXDTOИспользоватьНесколькоНоменклатурныхГрупп();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	
	// ОсновнаяНоменклатурнаяГруппа
	ОбъектXDTO = ПолучитьОбъектXDTOОсновнаяНоменклатурнаяГруппа();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	
	// ОсновнойВидНоменклатуры
	ОбъектXDTO = ПолучитьОбъектXDTOОсновнойВидНоменклатуры();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	
	// ОсновнойВидНоменклатурыУслуга
	ОбъектXDTO = ПолучитьОбъектXDTOОсновнойВидНоменклатурыУслуга();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	
	// Адрес базы сообщений личного кабинета
	ОбъектXDTO = ПолучитьОбъектXDTOБазаСообщений(УзелОбмена);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	
	// Настройки push-уведомлений
	ОбъектXDTO = ПолучитьОбъектXDTOНастройкиУведомлений();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	
КонецПроцедуры

Процедура ЗаписатьВерсиюФормата(ЗаписьXML) Экспорт
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("MobileEntrepreneur");
	ПередаваемыйОбъект.ВерсияФормата = "1.03";
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ПередаваемыйОбъект);
	
КонецПроцедуры

//СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура регистрирует изменения, для всех данных, входящих в состав плана обмена
// Параметры:
//  УзелОбмена - узел плана обмена, для которого регистрируются изменения
Процедура ЗарегистрироватьИзмененияОбъектовДляПервичногоОбмена(УзелОбмена) Экспорт
	
	МетаданныеБанковскиеСчета = Метаданные.Справочники.БанковскиеСчета;
	МетаданныеБанки = Метаданные.Справочники.Банки;

	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Для каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
			
			ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
			Выборка = ПолучитьВыборкуДокументовДляРегистрации(ПолноеИмяОбъекта, УзелОбмена.ДатаНачалаХраненияДанных);
			
			ЗарегистрироватьИзмененияОбъектовИзВыборки(УзелОбмена, Выборка);
			
		ИначеЕсли ЭлементСоставаПланаОбмена.Метаданные = МетаданныеБанковскиеСчета Тогда
			// В мобильное приложение передаем только банковские счета наших организаций.
			Выборка = ПолучитьВыборкуБанковскихСчетовОрганизацийДляРегистрации();
			
			ЗарегистрироватьИзмененияОбъектовИзВыборки(УзелОбмена, Выборка);
			
		ИначеЕсли ЭлементСоставаПланаОбмена.Метаданные = МетаданныеБанки Тогда
			// Банки передаем только те, в которых открыты счета наших организаций.
			Выборка = ПолучитьВыборкуБанковОрганизацийДляРегистрации();
			
			ЗарегистрироватьИзмененияОбъектовИзВыборки(УзелОбмена, Выборка);
		
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСоставаПланаОбмена.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗарегистрироватьИзмененияДанных()

// Функция получает выборку документов, соответствующих условиям отбора.
//
Функция ПолучитьВыборкуДокументовДляРегистрации(ПолноеИмяОбъекта, ДатаНачалаХраненияДанных)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК Таблица
	|ГДЕ
	|	Таблица.Дата >= &ДатаНачалаВыгрузки";
	
	Если ПолноеИмяОбъекта = "Документ.РеализацияТоваровУслуг" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И (Таблица.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)
		|			ИЛИ Таблица.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.Товары)
		|			ИЛИ Таблица.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.Услуги))
		|	И Таблица.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)";
		
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаХраненияДанных);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуДокументовДляРегистрации()

Функция ПолучитьВыборкуБанковскихСчетовОрганизацийДляРегистрации()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ПолучитьВыборкуБанковОрганизацийДляРегистрации()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	БанковскиеСчета.Банк КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
	|	И БанковскиеСчета.Банк <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ // без повторения
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.БанкДляРасчетов КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
	|	И БанковскиеСчета.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Процедура ЗарегистрироватьИзмененияОбъектовИзВыборки(УзелОбмена, Выборка)

	Пока Выборка.Следующий() Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПрефиксНовогоУзлаОбмена()
	
	Префикс = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МобильноеПриложение.Ссылка) КАК КоличествоУзлов
	               |ИЗ
	               |	ПланОбмена.МобильноеПриложениеПредприниматель КАК МобильноеПриложение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоУзлов = Выборка.КоличествоУзлов;
		Если КоличествоУзлов < 9 Тогда
			Префикс = "М" + КоличествоУзлов;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Префикс;
	
КонецФункции

Функция ТаблицаДокументовДляВыгрузки(ДатаНачалаВыгрузкиДанных, ДатаКонцаВыгрузкиДанных = Неопределено)
	
	Запрос = Новый Запрос;
	
	Если ДатаКонцаВыгрузкиДанных = Неопределено Тогда
		УсловиеДляДаты = "> &ДатаНачалаВыгрузкиДанных";
	Иначе
		УсловиеДляДаты = "МЕЖДУ &ДатаНачалаВыгрузкиДанных И &ДатаКонцаВыгрузкиДанных";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	""ПоступлениеНаРасчетныйСчет"" КАК НаименованиеДокумента,
	               |	ПоступлениеНаРасчетныйСчет.Ссылка
	               |ИЗ
	               |	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	               |ГДЕ
	               |	ПоступлениеНаРасчетныйСчет.Дата " + УсловиеДляДаты + "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""ПриходныйКассовыйОрдер"",
	               |	ПриходныйКассовыйОрдер.Ссылка
	               |ИЗ
	               |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	               |ГДЕ
	               |	ПриходныйКассовыйОрдер.Дата " + УсловиеДляДаты + "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""РасходныйКассовыйОрдер"",
	               |	РасходныйКассовыйОрдер.Ссылка
	               |ИЗ
	               |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	               |ГДЕ
	               |	РасходныйКассовыйОрдер.Дата " + УсловиеДляДаты + "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""СписаниеСРасчетногоСчета"",
	               |	СписаниеСРасчетногоСчета.Ссылка
	               |ИЗ
	               |	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	               |ГДЕ
	               |	СписаниеСРасчетногоСчета.Дата " + УсловиеДляДаты + "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""СчетНаОплатуПокупателю"",
	               |	СчетНаОплатуПокупателю.Ссылка
	               |ИЗ
	               |	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	               |ГДЕ
	               |	СчетНаОплатуПокупателю.Дата " + УсловиеДляДаты + "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""РеализацияТоваровУслуг"",
	               |	РеализацияТоваровУслуг.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				   |ГДЕ
				   |	РеализацияТоваровУслуг.Дата " + УсловиеДляДаты + "
				   |	И (РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)
				   |			ИЛИ РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.Товары)
				   |			ИЛИ РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.Услуги))
				   |	И РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)";
	
	Запрос.Параметры.Вставить("ДатаНачалаВыгрузкиДанных",	ДатаНачалаВыгрузкиДанных);
	Запрос.Параметры.Вставить("ДатаКонцаВыгрузкиДанных",	ДатаКонцаВыгрузкиДанных);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция СоздатьОбъектXDTO(ТипОбъекта)
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.1c.ru/EA/MobileEntrepreneur", ТипОбъекта));
	
КонецФункции

Функция ПолучитьОбъектXDTOИзДанныхВыборкиИзменений(Данные, МассивФайлов, УзелОбмена)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.Организации") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("Организация");
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Наименование		= Данные.Наименование;
		ПередаваемыйОбъект.Код				= Данные.Код;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		
		ПередаваемыйОбъект.ЮридическоеФизическоеЛицо			= СериализоватьЮридическоеФизическоеЛицо(Данные.ЮридическоеФизическоеЛицо);
		ПередаваемыйОбъект.ИНН									= Данные.ИНН;
		ПередаваемыйОбъект.КПП									= Данные.КПП;
		ПередаваемыйОбъект.НаименованиеСокращенное				= Данные.НаименованиеСокращенное;
		ПередаваемыйОбъект.НаименованиеПолное					= Данные.НаименованиеПолное;
		ПередаваемыйОбъект.Префикс								= Данные.Префикс;
		ПередаваемыйОбъект.ОсновнойБанковскийСчет				= СериализоватьСсылку(Данные.ОсновнойБанковскийСчет);
		ПередаваемыйОбъект.ДополнительныеУсловияПоУмолчанию		= СериализоватьСсылку(Данные.ДополнительныеУсловияПоУмолчанию);
		
		Если Данные.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование Тогда
			ПередаваемыйОбъект.ВариантНаименованияДляПечатныхФорм = "СокращенноеНаименование";
		ИначеЕсли Данные.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование Тогда
			ПередаваемыйОбъект.ВариантНаименованияДляПечатныхФорм = "ПолноеНаименование";
		КонецЕсли;
		
		Для каждого ЭлементКонтактнойИнформации Из Данные.КонтактнаяИнформация Цикл
			Если ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес ИЛИ
					ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ
					ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					
				ДобавляемаяСтрока = СоздатьОбъектXDTO("СтрокаТЧКонтактнаяИнформация");
				ДобавляемаяСтрока.Тип					= СериализоватьТипКИ(ЭлементКонтактнойИнформации.Тип);
				ДобавляемаяСтрока.Вид					= СериализоватьСсылку(ЭлементКонтактнойИнформации.Вид);
				ДобавляемаяСтрока.Представление			= ЭлементКонтактнойИнформации.Представление;
				ДобавляемаяСтрока.ВидПредопределенный	= ЭлементКонтактнойИнформации.Вид.Предопределенный;
				Если ЭлементКонтактнойИнформации.Вид.Предопределенный Тогда
					ДобавляемаяСтрока.ВидИмяПредопределенныхДанных	= ЭлементКонтактнойИнформации.Вид.ИмяПредопределенныхДанных;
				КонецЕсли;
				ПередаваемыйОбъект.КонтактнаяИнформация.Добавить(ДобавляемаяСтрока);
				
			КонецЕсли;
		КонецЦикла;
		
		ПередаваемыйОбъект.ФайлЛоготип = СериализоватьСсылку(Данные.ФайлЛоготип);
		Если ЗначениеЗаполнено(Данные.ФайлЛоготип) Тогда
			МассивФайлов.Добавить(Данные.ФайлЛоготип);
		КонецЕсли;
		
		ПередаваемыйОбъект.ФайлФаксимильнаяПечать = СериализоватьСсылку(Данные.ФайлФаксимильнаяПечать);
		Если ЗначениеЗаполнено(Данные.ФайлФаксимильнаяПечать) Тогда
			МассивФайлов.Добавить(Данные.ФайлФаксимильнаяПечать);
		КонецЕсли;
		
		ПередаваемыйОбъект.НалоговаяСистема = СистемаНалогообложенияДляМобильногоПриложения(Данные.Ссылка);
		
		ОтветственныеЛицаСтруктура = ОтветственныеЛицаОрганизации(Данные.Ссылка);
		ПередаваемыйОбъект.ОтветственноеЛицоБухгалтер		= ОтветственныеЛицаСтруктура.Бухгалтер;
		ПередаваемыйОбъект.ОтветственноеЛицоРуководитель	= ОтветственныеЛицаСтруктура.Руководитель;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("Контрагент");
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Наименование		= Данные.Наименование;
		ПередаваемыйОбъект.Код				= Данные.Код;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		
		ПередаваемыйОбъект.ЭтоГруппа		= Данные.ЭтоГруппа;
		ПередаваемыйОбъект.Родитель			= СериализоватьСсылку(Данные.Родитель);
		
		Если НЕ Данные.ЭтоГруппа Тогда
			
			ПередаваемыйОбъект.НаименованиеПолное = Данные.НаименованиеПолное;
			ПередаваемыйОбъект.ЮридическоеФизическоеЛицо	= СериализоватьЮридическоеФизическоеЛицо(Данные.ЮридическоеФизическоеЛицо);
			ПередаваемыйОбъект.ИНН							= Данные.ИНН;
			ПередаваемыйОбъект.КПП							= Данные.КПП;
			ПередаваемыйОбъект.ОбособленноеПодразделение	= Данные.ОбособленноеПодразделение;
			ПередаваемыйОбъект.ГоловнойКонтрагент			= СериализоватьСсылку(Данные.ГоловнойКонтрагент);
			
			Для каждого ЭлементКонтактнойИнформации Из Данные.КонтактнаяИнформация Цикл
				Если ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес ИЛИ
						ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ
						ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
						
					ДобавляемаяСтрока = СоздатьОбъектXDTO("СтрокаТЧКонтактнаяИнформация");
					ДобавляемаяСтрока.Тип					= СериализоватьТипКИ(ЭлементКонтактнойИнформации.Тип);
					ДобавляемаяСтрока.Вид					= СериализоватьСсылку(ЭлементКонтактнойИнформации.Вид);
					ДобавляемаяСтрока.Представление			= ЭлементКонтактнойИнформации.Представление;
					ДобавляемаяСтрока.ВидПредопределенный	= ЭлементКонтактнойИнформации.Вид.Предопределенный;
					Если ЭлементКонтактнойИнформации.Вид.Предопределенный Тогда
						ДобавляемаяСтрока.ВидИмяПредопределенныхДанных	= ЭлементКонтактнойИнформации.Вид.ИмяПредопределенныхДанных;
					КонецЕсли;
					ПередаваемыйОбъект.КонтактнаяИнформация.Добавить(ДобавляемаяСтрока);
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("Договор");
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Наименование		= Данные.Наименование;
		ПередаваемыйОбъект.Код				= Данные.Код;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		
		ПередаваемыйОбъект.ЭтоГруппа		= Данные.ЭтоГруппа;
		ПередаваемыйОбъект.Родитель			= СериализоватьСсылку(Данные.Родитель);
		ПередаваемыйОбъект.Владелец			= СериализоватьСсылку(Данные.Владелец);
		
		Если НЕ Данные.ЭтоГруппа Тогда
			
			Если Данные.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				ПередаваемыйОбъект.ВидДоговора = "СПокупателем";
			ИначеЕсли Данные.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				ПередаваемыйОбъект.ВидДоговора = "СПоставщиком";
			ИначеЕсли Данные.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ПередаваемыйОбъект.ВидДоговора = "СКомиссионером";
			ИначеЕсли Данные.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				ПередаваемыйОбъект.ВидДоговора = "СКомитентом";
			ИначеЕсли Данные.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
				ПередаваемыйОбъект.ВидДоговора = "СКомиссионеромНаЗакупку";
			ИначеЕсли Данные.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
				ПередаваемыйОбъект.ВидДоговора = "СКомитентомНаЗакупку";
			ИначеЕсли Данные.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
				ПередаваемыйОбъект.ВидДоговора = "Прочее";
			КонецЕсли;
			ПередаваемыйОбъект.Организация				= СериализоватьСсылку(Данные.Организация);
			ПередаваемыйОбъект.ВалютаВзаиморасчетов		= СериализоватьСсылку(Данные.ВалютаВзаиморасчетов);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.БанковскиеСчета") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("БанковскийСчет");
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Наименование		= Данные.Наименование;
		ПередаваемыйОбъект.Код				= Данные.Код;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		
		ПередаваемыйОбъект.Владелец				= СериализоватьСсылку(Данные.Владелец);
		ПередаваемыйОбъект.НомерСчета			= Данные.НомерСчета;
		ПередаваемыйОбъект.ТекстКорреспондента	= Данные.ТекстКорреспондента;
		
		ПередаваемыйОбъект.Банк = СериализоватьСсылку(Данные.Банк);
		ПередаваемыйОбъект.БанкДляРасчетов	= СериализоватьСсылку(Данные.БанкДляРасчетов);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Банки") Тогда
		
		Если НЕ Данные.ЭтоГруппа Тогда
			
			ПередаваемыйОбъект = СоздатьОбъектXDTO("Банк");
			
			ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
			ПередаваемыйОбъект.Наименование		= Данные.Наименование;
			ПередаваемыйОбъект.Код				= Данные.Код;
			ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
			
			
			ПередаваемыйОбъект.КоррСчет			= Данные.КоррСчет;
			ПередаваемыйОбъект.Город			= Данные.Город;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("Номенклатура");
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Наименование		= Данные.Наименование;
		ПередаваемыйОбъект.Код				= Данные.Код;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		
		ПередаваемыйОбъект.ЭтоГруппа = Данные.ЭтоГруппа;
		ПередаваемыйОбъект.Родитель = СериализоватьСсылку(Данные.Родитель);
		ПередаваемыйОбъект.ВидНоменклатуры      = СериализоватьСсылку(Данные.ВидНоменклатуры);
		
		Если НЕ Данные.ЭтоГруппа Тогда
			ПередаваемыйОбъект.НаименованиеПолное   = Данные.НаименованиеПолное;
			ПередаваемыйОбъект.НоменклатурнаяГруппа = СериализоватьСсылку(Данные.НоменклатурнаяГруппа);
			ПередаваемыйОбъект.Артикул              = Данные.Артикул;
			ПередаваемыйОбъект.ЕдиницаИзмерения     = СериализоватьСсылку(Данные.ЕдиницаИзмерения);
			СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(Данные.ВидСтавкиНДС, ТекущаяДатаСеанса());
			ПередаваемыйОбъект.СтавкаНДС            = СериализоватьСтавкуНДС(СтавкаНДС);
			ПередаваемыйОбъект.Услуга               = Данные.Услуга;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.КлассификаторЕдиницИзмерения") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ЕдиницаИзмерения");
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Наименование		= Данные.Наименование;
		ПередаваемыйОбъект.Код				= Данные.Код;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ВидыНоменклатуры") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ВидНоменклатуры");
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Наименование		= Данные.Наименование;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Услуга			= Данные.Услуга;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.НоменклатурныеГруппы") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("НоменклатурнаяГруппа");
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Наименование		= Данные.Наименование;
		ПередаваемыйОбъект.Код				= Данные.Код;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Склады") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("Склад");
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Наименование		= Данные.Наименование;
		ПередаваемыйОбъект.Код				= Данные.Код;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ДополнительныеУсловия") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ДополнительныеУсловия");
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Наименование		= Данные.Наименование;
		ПередаваемыйОбъект.Код				= Данные.Код;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		
		ПередаваемыйОбъект.ТекстУсловий		= Данные.ТекстУсловий;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Валюты") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("Валюта");
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Наименование		= Данные.Наименование;
		ПередаваемыйОбъект.Код				= Данные.Код;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		
		ПередаваемыйОбъект.ПараметрыПрописиНаРусском = Данные.ПараметрыПрописи;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ВидыКонтактнойИнформации") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ВидКонтактнойИнформации");
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Наименование		= Данные.Наименование;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.АктСверкиВзаиморасчетов") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("АктСверкиВзаиморасчетов");
		
		Если Данные.Дата < УзелОбмена.ДатаНачалаХраненияДанных Тогда
			УдалениеДокумента = Новый УдалениеОбъекта(Данные.Ссылка);
			Возврат ПолучитьОбъектXDTOИзДанныхВыборкиИзменений(УдалениеДокумента, МассивФайлов, УзелОбмена);
		КонецЕсли;
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Номер			= Данные.Номер;
		ПередаваемыйОбъект.Дата				= Данные.Дата;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Проведен			= Данные.Проведен;
		
		ПередаваемыйОбъект.Организация				= СериализоватьСсылку(Данные.Организация);
		ПередаваемыйОбъект.Контрагент				= СериализоватьСсылку(Данные.Контрагент);
		ПередаваемыйОбъект.ДоговорКонтрагента		= СериализоватьСсылку(Данные.ДоговорКонтрагента);
		ПередаваемыйОбъект.ВалютаДокумента			= СериализоватьСсылку(Данные.ВалютаДокумента);
		ПередаваемыйОбъект.ДатаНачала				= Данные.ДатаНачала;
		ПередаваемыйОбъект.ДатаОкончания			= Данные.ДатаОкончания;
		ПередаваемыйОбъект.ОстатокНаНачало			= Данные.ОстатокНаНачало;
		ПередаваемыйОбъект.СверкаСогласована		= Данные.СверкаСогласована;
		
		Для каждого СтрокаТЧ Из Данные.ПоДаннымОрганизации Цикл
			
			ДобавляемаяСтрока = СоздатьОбъектXDTO("СтрокаАктаСверки");
			ДобавляемаяСтрока.Договор			= СериализоватьСсылку(СтрокаТЧ.Договор);
			ДобавляемаяСтрока.ДокументСсылка	= СериализоватьСсылку(СтрокаТЧ.Документ);
			Если ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
				ДобавляемаяСтрока.ДокументТип	= СтрокаТЧ.Документ.Метаданные().Имя;
			КонецЕсли;
			ДобавляемаяСтрока.Представление		= СтрокаТЧ.Представление;
			ДобавляемаяСтрока.Дата				= СтрокаТЧ.Дата;
			ДобавляемаяСтрока.Дебет				= СтрокаТЧ.Дебет;
			ДобавляемаяСтрока.Кредит			= СтрокаТЧ.Кредит;
			
			ПередаваемыйОбъект.ПоДаннымОрганизации.Добавить(ДобавляемаяСтрока);
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из Данные.ПоДаннымКонтрагента Цикл
			
			ДобавляемаяСтрока = СоздатьОбъектXDTO("СтрокаАктаСверки");
			ДобавляемаяСтрока.Договор			= СериализоватьСсылку(СтрокаТЧ.Договор);
			ДобавляемаяСтрока.ДокументСсылка	= СериализоватьСсылку(СтрокаТЧ.Документ);
			Если ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
				ДобавляемаяСтрока.ДокументТип	= СтрокаТЧ.Документ.Метаданные().Имя;
			КонецЕсли;
			ДобавляемаяСтрока.Представление		= СтрокаТЧ.Представление;
			ДобавляемаяСтрока.Дата				= СтрокаТЧ.Дата;
			ДобавляемаяСтрока.Дебет				= СтрокаТЧ.Дебет;
			ДобавляемаяСтрока.Кредит			= СтрокаТЧ.Кредит;
			
			ПередаваемыйОбъект.ПоДаннымКонтрагента.Добавить(ДобавляемаяСтрока);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("РеализацияТоваровУслуг");
		
		Если Данные.Дата < УзелОбмена.ДатаНачалаХраненияДанных Тогда
			УдалениеДокумента = Новый УдалениеОбъекта(Данные.Ссылка);
			Возврат ПолучитьОбъектXDTOИзДанныхВыборкиИзменений(УдалениеДокумента, МассивФайлов, УзелОбмена);
		КонецЕсли;
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Номер			= Данные.Номер;
		ПередаваемыйОбъект.Дата				= Данные.Дата;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Проведен			= Данные.Проведен;
		
		ПередаваемыйОбъект.Организация				= СериализоватьСсылку(Данные.Организация);
		ПередаваемыйОбъект.Контрагент				= СериализоватьСсылку(Данные.Контрагент);
		ПередаваемыйОбъект.ДоговорКонтрагента		= СериализоватьСсылку(Данные.ДоговорКонтрагента);
		ПередаваемыйОбъект.БанковскийСчет			= СериализоватьСсылку(Данные.БанковскийСчетОрганизации);
		ПередаваемыйОбъект.Склад					= СериализоватьСсылку(Данные.Склад);
		ПередаваемыйОбъект.СуммаДокумента			= Данные.СуммаДокумента;
		
		СуммаАгентскихУслуг = ?(Данные.СуммаВключаетНДС, Данные.АгентскиеУслуги.Итог("Сумма"), Данные.АгентскиеУслуги.Итог("Сумма") + Данные.АгентскиеУслуги.Итог("СуммаНДС"));
		
		ПередаваемыйОбъект.СуммаАгентскихУслуг		= СуммаАгентскихУслуг;
		ПередаваемыйОбъект.СуммаВключаетНДС			= Данные.СуммаВключаетНДС;
		ПередаваемыйОбъект.ВалютаДокумента			= СериализоватьСсылку(Данные.ВалютаДокумента);
		ПередаваемыйОбъект.ДокументБезНДС			= Данные.ДокументБезНДС;
		ПередаваемыйОбъект.СчетНаОплатуПокупателю	= СериализоватьСсылку(Данные.СчетНаОплатуПокупателю);
		
		СуммаПредставление = Формат(Данные.СуммаДокумента, "ЧЦ=15; ЧДЦ=0");
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Если Данные.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			ПредставлениеСуммыВСписке = СуммаПредставление;
		Иначе
			ПредставлениеСуммыВСписке = СуммаПредставление + " (" + Данные.ВалютаДокумента.Наименование + ")";
		КонецЕсли;
		
		ПередаваемыйОбъект.ПредставлениеСуммыВСписке = ПредставлениеСуммыВСписке;
		
		СтатусОплаты = СтатусОплатыСчетаНаОплатуПокупателю(Данные.Ссылка);
		Если СтатусОплаты = Перечисления.СтатусыДокументовРеализации.Подписан Тогда
			ПередаваемыйОбъект.ДокументПодписан = Истина;
		КонецЕсли;
		
		ПередаваемыйОбъект.Накладная 	= Данные.Товары.Количество() > 0;
		ПередаваемыйОбъект.Акт		 	= Данные.Услуги.Количество() > 0;
		ПередаваемыйОбъект.СчетФактура	= ЗначениеЗаполнено(УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Данные.Ссылка));
		
		Для каждого СтрокаТЧ Из Данные.Товары Цикл
			
			ДобавляемаяСтрока = СоздатьОбъектXDTO("СтрокаТЧТоварыУслуги");
			ДобавляемаяСтрока.Номенклатура		= СериализоватьСсылку(СтрокаТЧ.Номенклатура);
			ДобавляемаяСтрока.Количество		= СтрокаТЧ.Количество;
			ДобавляемаяСтрока.Цена				= СтрокаТЧ.Цена;
			ДобавляемаяСтрока.Сумма				= СтрокаТЧ.Сумма;
			ДобавляемаяСтрока.СтавкаНДС			= СериализоватьСтавкуНДС(СтрокаТЧ.СтавкаНДС);
			ДобавляемаяСтрока.СуммаНДС			= СтрокаТЧ.СуммаНДС;
			
			ПередаваемыйОбъект.ТоварыУслуги.Добавить(ДобавляемаяСтрока);
			ПередаваемыйОбъект.Накладная 		= Истина;
			
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из Данные.Услуги Цикл
			
			ДобавляемаяСтрока = СоздатьОбъектXDTO("СтрокаТЧТоварыУслуги");
			ДобавляемаяСтрока.Номенклатура		= СериализоватьСсылку(СтрокаТЧ.Номенклатура);
			ДобавляемаяСтрока.Содержание		= СтрокаТЧ.Содержание;
			ДобавляемаяСтрока.Количество		= СтрокаТЧ.Количество;
			ДобавляемаяСтрока.Цена				= СтрокаТЧ.Цена;
			ДобавляемаяСтрока.Сумма				= СтрокаТЧ.Сумма;
			ДобавляемаяСтрока.СтавкаНДС			= СериализоватьСтавкуНДС(СтрокаТЧ.СтавкаНДС);
			ДобавляемаяСтрока.СуммаНДС			= СтрокаТЧ.СуммаНДС;
			
			ПередаваемыйОбъект.ТоварыУслуги.Добавить(ДобавляемаяСтрока);
			ПередаваемыйОбъект.Акт 				= Истина;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("СчетНаОплатуПокупателю");
		
		Если Данные.Дата < УзелОбмена.ДатаНачалаХраненияДанных Тогда
			УдалениеДокумента = Новый УдалениеОбъекта(Данные.Ссылка);
			Возврат ПолучитьОбъектXDTOИзДанныхВыборкиИзменений(УдалениеДокумента, МассивФайлов, УзелОбмена);
		КонецЕсли;
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Номер			= Данные.Номер;
		ПередаваемыйОбъект.Дата				= Данные.Дата;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Проведен			= Данные.Проведен;
		
		ПередаваемыйОбъект.Организация				= СериализоватьСсылку(Данные.Организация);
		ПередаваемыйОбъект.Контрагент				= СериализоватьСсылку(Данные.Контрагент);
		ПередаваемыйОбъект.ДоговорКонтрагента		= СериализоватьСсылку(Данные.ДоговорКонтрагента);
		ПередаваемыйОбъект.БанковскийСчет			= СериализоватьСсылку(Данные.СтруктурнаяЕдиница);
		ПередаваемыйОбъект.ДополнительныеУсловия	= СериализоватьСсылку(Данные.ДополнительныеУсловия);
		ПередаваемыйОбъект.СуммаДокумента			= Данные.СуммаДокумента;
		ПередаваемыйОбъект.СуммаВключаетНДС			= Данные.СуммаВключаетНДС;
		ПередаваемыйОбъект.ВалютаДокумента			= СериализоватьСсылку(Данные.ВалютаДокумента);
		ПередаваемыйОбъект.ДокументБезНДС			= Данные.ДокументБезНДС;
		
		// Запросим в подсистеме кадров информации о ФИО ответственных лиц.
		ОтветственныеЛица = Новый Массив;
		ОтветственныеЛица.Добавить(Данные.Руководитель);
		ОтветственныеЛица.Добавить(Данные.ГлавныйБухгалтер);
		
		ДанныеОтветственныхЛиц = УчетЗарплаты.ДанныеФизическихЛиц(, ОтветственныеЛица, Данные.Дата, , Истина);
		Для Каждого СтрокаОтветственногоЛица Из ДанныеОтветственныхЛиц Цикл
			
			ФИООтветственногоЛица = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СтрокаОтветственногоЛица);
			Если СтрокаОтветственногоЛица.ФизическоеЛицо = Данные.Руководитель Тогда
				ПередаваемыйОбъект.Руководитель	= ФИООтветственногоЛица;
			ИначеЕсли СтрокаОтветственногоЛица.ФизическоеЛицо = Данные.ГлавныйБухгалтер Тогда
				ПередаваемыйОбъект.ГлавныйБухгалтер = ФИООтветственногоЛица;
			КонецЕсли;

		КонецЦикла;
		
		СуммаПредставление = Формат(Данные.СуммаДокумента, "ЧЦ=15; ЧДЦ=0");
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Если Данные.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			ПредставлениеСуммыВСписке = СуммаПредставление;
		Иначе
			ПредставлениеСуммыВСписке = СуммаПредставление + " (" + Данные.ВалютаДокумента.Наименование + ")";
		КонецЕсли;
		
		ПередаваемыйОбъект.ПредставлениеСуммыВСписке = ПредставлениеСуммыВСписке;
		
		СтатусОплаты = СтатусОплатыСчетаНаОплатуПокупателю(Данные.Ссылка);
		Если СтатусОплаты = Перечисления.СтатусОплатыСчета.Оплачен Тогда
			ПередаваемыйОбъект.СтатусОплаты = "Оплачен";
		ИначеЕсли СтатусОплаты = Перечисления.СтатусОплатыСчета.ОплаченЧастично Тогда
			ПередаваемыйОбъект.СтатусОплаты = "ОплаченЧастично";
		ИначеЕсли СтатусОплаты = Перечисления.СтатусОплатыСчета.Отменен Тогда
			ПередаваемыйОбъект.СтатусОплаты = "Отменен";
		Иначе
			ПередаваемыйОбъект.СтатусОплаты = "НеОплачен";
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из Данные.Товары Цикл
			
			ДобавляемаяСтрока = СоздатьОбъектXDTO("СтрокаТЧТоварыУслуги");
			ДобавляемаяСтрока.Номенклатура		= СериализоватьСсылку(СтрокаТЧ.Номенклатура);
			ДобавляемаяСтрока.Содержание		= СтрокаТЧ.Содержание;
			ДобавляемаяСтрока.Количество		= СтрокаТЧ.Количество;
			ДобавляемаяСтрока.Цена				= СтрокаТЧ.Цена;
			ДобавляемаяСтрока.Сумма				= СтрокаТЧ.Сумма;
			ДобавляемаяСтрока.СтавкаНДС			= СериализоватьСтавкуНДС(СтрокаТЧ.СтавкаНДС);
			ДобавляемаяСтрока.СуммаНДС			= СтрокаТЧ.СуммаНДС;
			
			ПередаваемыйОбъект.ТоварыУслуги.Добавить(ДобавляемаяСтрока);
			
		КонецЦикла;
		
	ИначеЕсли ЭтоОбъектДенежныйДокумент(Данные) Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ДвижениеДенег");
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(Данные.Ссылка);
		ПередаваемыйОбъект.Номер			= Данные.Номер;
		ПередаваемыйОбъект.Дата				= Данные.Дата;
		ПередаваемыйОбъект.ПометкаУдаления	= Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Проведен			= Данные.Проведен;
		
		Если ТипЗнч(Данные) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
			ПередаваемыйОбъект.ВидДокумента = "РасходныйКассовыйОрдер";
		ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
			ПередаваемыйОбъект.ВидДокумента = "ПриходныйКассовыйОрдер";
		ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
			ПередаваемыйОбъект.ВидДокумента = "СписаниеСРасчетногоСчета";
		ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") Тогда
			ПередаваемыйОбъект.ВидДокумента = "ПоступлениеНаРасчетныйСчет";
		КонецЕсли;
		
		ПередаваемыйОбъект.ВидОперации			= Строка(Данные.ВидОперации);
		ПередаваемыйОбъект.Организация			= СериализоватьСсылку(Данные.Организация);
		ПередаваемыйОбъект.ДоговорКонтрагента	= СериализоватьСсылку(Данные.ДоговорКонтрагента);
		
		Если ЗначениеЗаполнено(Данные.Контрагент) И ТипЗнч(Данные.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПередаваемыйОбъект.Контрагент = СериализоватьСсылку(Данные.Контрагент);
		КонецЕсли;
		
		Если ТипЗнч(Данные) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") ИЛИ
				ТипЗнч(Данные) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") Тогда
			ПередаваемыйОбъект.СчетОрганизации = СериализоватьСсылку(Данные.СчетОрганизации);
			ПередаваемыйОбъект.Содержание = Данные.НазначениеПлатежа;
		Иначе
			ПередаваемыйОбъект.Содержание = Данные.Основание;
		КонецЕсли;
		
		ПередаваемыйОбъект.СуммаДокумента			= Данные.СуммаДокумента;
		ПередаваемыйОбъект.ВалютаДокумента			= СериализоватьСсылку(Данные.ВалютаДокумента);
		ПередаваемыйОбъект.ВалютаДокументаСимвол	= Данные.ВалютаДокумента.Наименование;
		
		Для каждого СтрокаТЧ Из Данные.РасшифровкаПлатежа Цикл
			ДобавляемаяСтрока = СоздатьОбъектXDTO("СтрокаТЧРасшифровкаПлатежа");
			ДобавляемаяСтрока.ДоговорКонтрагента	= СериализоватьСсылку(СтрокаТЧ.ДоговорКонтрагента);
			ДобавляемаяСтрока.СуммаПлатежа			= СтрокаТЧ.СуммаПлатежа;
			ПередаваемыйОбъект.РасшифровкаПлатежа.Добавить(ДобавляемаяСтрока);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ЖурналОтчетовСтатусы") Тогда	
		
		Если Данные.Выбран() Тогда
			Данные.Прочитать();
		КонецЕсли;
		
		Если Данные.Количество() > 0 Тогда
			ЗаписьЖурнала = Данные[0];
			ПередаваемыйОбъект = СоздатьОбъектXDTO("СтрокаЖурналаСостоянияОтчетов");
			ЗаполнитьЗначенияСвойств(ПередаваемыйОбъект, ЗаписьЖурнала, , "Организация, Ссылка, СостояниеСдачиОтчетности"); 
			ПередаваемыйОбъект.Организация 	= СериализоватьСсылку(ЗаписьЖурнала.Организация);
			ПередаваемыйОбъект.Ссылка 		= СериализоватьСсылку(ЗаписьЖурнала.Ссылка);			
			ПередаваемыйОбъект.СостояниеСдачиОтчетности	= Строка(ЗаписьЖурнала.СостояниеСдачиОтчетности);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатурыДокументов") Тогда	
		
		Если Данные.Выбран() Тогда
			Данные.Прочитать();
		КонецЕсли;
		
		Если Данные.Количество() > 0 Тогда
			
			ЗаписьРегистра = Данные[0];
			
			Если ЗаписьРегистра.СпособЗаполненияЦены = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам Тогда
				ПередаваемыйОбъект = СоздатьОбъектXDTO("ЦеныНоменклатуры");
				ЗаполнитьЗначенияСвойств(ПередаваемыйОбъект, ЗаписьРегистра, "Цена, ЦенаВключаетНДС");
				ПередаваемыйОбъект.Номенклатура		= СериализоватьСсылку(ЗаписьРегистра.Номенклатура);
				ПередаваемыйОбъект.Валюта			= СериализоватьСсылку(ЗаписьРегистра.Валюта);
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("УдалениеОбъекта");
		
		ПередаваемыйОбъект.Ссылка = СериализоватьСсылку(Данные.Ссылка);
		
		Если ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "Организация";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "Контрагент";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "Договор";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "БанковскийСчет";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Банки") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "Банк";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "Номенклатура";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "ЕдиницаИзмерения";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "ВидНоменклатуры";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "НоменклатурнаяГруппа";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ДополнительныеУсловия") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "ДополнительныеУсловия";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Валюты") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "Валюта";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "ВидКонтактнойИнформации";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") ИЛИ
					ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") ИЛИ
					ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") ИЛИ
					ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "ДвижениеДенег";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "АктСверкиВзаиморасчетов";	
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "СчетНаОплатуПокупателю";	
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ПередаваемыйОбъект.ТипОбъекта = "РеализацияТоваровУслуг";
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ПолучитьОбъектXDTOЗадолженностьКонтрагента(Знач СтрокаТаблицыЗначений)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ЗадолженностьКонтрагента");
	ПередаваемыйОбъект.Организация	= СериализоватьСсылку(СтрокаТаблицыЗначений.Организация);
	ПередаваемыйОбъект.Контрагент	= СериализоватьСсылку(СтрокаТаблицыЗначений.Контрагент);
	
	Если СтрокаТаблицыЗначений.НамДолжны > 0 Тогда
		ПередаваемыйОбъект.ХарактерЗадолженности = "НамДолжны";
		ПередаваемыйОбъект.СуммаДолга = СтрокаТаблицыЗначений.НамДолжны;
	ИначеЕсли СтрокаТаблицыЗначений.МыДолжны > 0 Тогда
		ПередаваемыйОбъект.ХарактерЗадолженности = "МыДолжны";
		ПередаваемыйОбъект.СуммаДолга = СтрокаТаблицыЗначений.МыДолжны;
	Иначе
		ПередаваемыйОбъект.ХарактерЗадолженности = "";
		ПередаваемыйОбъект.СуммаДолга = 0;
	КонецЕсли;
		
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ПолучитьОбъектXDTOОстатокНоменклатуры(Знач СтрокаТаблицыЗначений)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ОстатокНоменклатуры");
	ПередаваемыйОбъект.Организация	= СериализоватьСсылку(СтрокаТаблицыЗначений.Организация);
	ПередаваемыйОбъект.Номенклатура	= СериализоватьСсылку(СтрокаТаблицыЗначений.Номенклатура);
	
	ПередаваемыйОбъект.Остаток = СтрокаТаблицыЗначений.Остаток;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ПолучитьОбъектXDTOСтрокаСпискаЗадач(Знач СтрокаТаблицыЗначений)
	
	ПередаваемыйОбъект 									= СоздатьОбъектXDTO("СтрокаСпискаЗадач");
	ПередаваемыйОбъект.Организация						= СериализоватьСсылку(СтрокаТаблицыЗначений.Организация);
	ПередаваемыйОбъект.Правило							= СериализоватьСсылку(СтрокаТаблицыЗначений.Правило);
	ПередаваемыйОбъект.РегистрацияВНалоговомОргане		= СериализоватьСсылку(СтрокаТаблицыЗначений.РегистрацияВНалоговомОргане);
	ПередаваемыйОбъект.ТипПравила                       = СтрокаТаблицыЗначений.ТипПравила;
	ПередаваемыйОбъект.ПериодСобытия 					= СтрокаТаблицыЗначений.ПериодСобытия;
	ПередаваемыйОбъект.Срок 							= СтрокаТаблицыЗначений.Срок;
	ПередаваемыйОбъект.Наименование 					= СтрокаТаблицыЗначений.Наименование;
	ПередаваемыйОбъект.Выполнено	 					= СтрокаТаблицыЗначений.Выполнено;
		
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ПолучитьОбъектXDTOОбщийПоказатель(СтрокаТаблицыЗначений)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ОбщийПоказательСИсторией");
	ПередаваемыйОбъект.Организация	= СериализоватьСсылку(СтрокаТаблицыЗначений.Организация);
	ПередаваемыйОбъект.Показатель	= СтрокаТаблицыЗначений.Показатель;
	ПередаваемыйОбъект.Значение		= СтрокаТаблицыЗначений.Значение;
	ПередаваемыйОбъект.ЗначениеМинусГод	= СтрокаТаблицыЗначений.ЗначениеМинусГод;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ПолучитьОбъектXDTOПрефиксМП(УзелОбмена)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ПрефиксМП");
	ПередаваемыйОбъект.ПрефиксЗначение = УзелОбмена.Префикс;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ПолучитьОбъектXDTOКолонкаПечатныхФорм()
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ДополнительнаяКолонкаПечатныхФорм");
	ЗначениеКонстанты = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	
	Если ЗначениеКонстанты = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ПередаваемыйОбъект.ЗначениеКонстанты = "Артикул";
	ИначеЕсли ЗначениеКонстанты = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ПередаваемыйОбъект.ЗначениеКонстанты = "Код";
	Иначе
		ПередаваемыйОбъект.ЗначениеКонстанты = "НеВыводить";
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ПолучитьОбъектXDTOФайл(ФайлСсылка)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Файл");
	
	ДвоичныеДанныеФайла = Неопределено;
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда
		ДанныеКартинки = РаботаСФайлами.ДанныеФайла(ФайлСсылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеКартинки.СсылкаНаДвоичныеДанныеФайла);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда
		
		ПередаваемыйОбъект.Ссылка			= СериализоватьСсылку(ФайлСсылка);
		ПередаваемыйОбъект.Наименование		= ФайлСсылка.Наименование;
		ПередаваемыйОбъект.Код				= ФайлСсылка.Код;
		
		ПередаваемыйОбъект.ДвоичныеДанные	= ДвоичныеДанныеФайла;
		
		Возврат ПередаваемыйОбъект;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбъектXDTOНастройкиУведомлений()
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("НастройкиУведомлений");
	НастройкиУведомлений = РегистрыСведений.НастройкиОтправкиPushУведомлений.ТекущиеНастройки();
	Если НастройкиУведомлений.ИспользоватьGCM Тогда
		ПередаваемыйОбъект.НомерПриложенияGoogleCloud = НастройкиУведомлений.НомерПриложенияGoogleCloud;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализоватьСсылку(Ссылка)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СсылкаСериализованная = Строка(Ссылка.УникальныйИдентификатор());
	Иначе
		СсылкаСериализованная = "";
	КонецЕсли;
	
	Возврат СсылкаСериализованная;
	
КонецФункции

Функция ДесериализоватьСсылкуНаСправочник(СсылкаСериализованная, ИмяОбъекта)
	
	Если СсылкаСериализованная = "" Тогда
		Ссылка = Справочники[ИмяОбъекта].ПустаяСсылка();
	Иначе
		Идентификатор = Новый УникальныйИдентификатор(СсылкаСериализованная);
		Ссылка = Справочники[ИмяОбъекта].ПолучитьСсылку(Идентификатор);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ДесериализоватьСсылкуНаДокумент(СсылкаСериализованная, ИмяОбъекта)
	
	Если СсылкаСериализованная = "" Тогда
		Ссылка = Документы[ИмяОбъекта].ПустаяСсылка();
	Иначе
		Идентификатор = Новый УникальныйИдентификатор(СсылкаСериализованная);
		Ссылка = Документы[ИмяОбъекта].ПолучитьСсылку(Идентификатор);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция СериализоватьСтавкуНДС(ЗначениеПеречисления)
	
	СериализованноеЗначение = "";
	
	Если ЗначениеПеречисления = Перечисления.СтавкиНДС.НДС20 Тогда
		СериализованноеЗначение = "НДС20";
	ИначеЕсли ЗначениеПеречисления = Перечисления.СтавкиНДС.НДС18 Тогда
		СериализованноеЗначение = "НДС18";
	ИначеЕсли ЗначениеПеречисления = Перечисления.СтавкиНДС.НДС10 Тогда
		СериализованноеЗначение = "НДС10";
	ИначеЕсли ЗначениеПеречисления = Перечисления.СтавкиНДС.НДС0 Тогда
		СериализованноеЗначение = "НДС0";
	ИначеЕсли ЗначениеПеречисления = Перечисления.СтавкиНДС.БезНДС Тогда
		СериализованноеЗначение = "БезНДС";
	КонецЕсли;
	
	Возврат СериализованноеЗначение;
	
КонецФункции

Функция СериализоватьЮридическоеФизическоеЛицо(ЗначениеПеречисления)
	
	СериализованноеЗначение = "";
	
	Если ЗначениеПеречисления = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		СериализованноеЗначение = "ЮридическоеЛицо";
	ИначеЕсли ЗначениеПеречисления = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		СериализованноеЗначение = "ФизическоеЛицо";
	КонецЕсли;
	
	Возврат СериализованноеЗначение;
	
КонецФункции

Функция ОтветственныеЛицаОрганизации(Организация, Дата = Неопределено)
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, Дата);
	
	ГлавныйБухгалтер	= ОтветственныеЛицаОрганизации.ГлавныйБухгалтерПредставление;
	Руководитель		= ОтветственныеЛицаОрганизации.РуководительПредставление;
	
	Возврат Новый Структура("Бухгалтер, Руководитель", ГлавныйБухгалтер, Руководитель);
	
КонецФункции

Функция ДолгиКонтрагентов(ДатаОстатков)
	
	КонецДатыОстатков = КонецДня(ДатаОстатков);

	Запрос = Новый запрос;
	Если КонецДатыОстатков = КонецДня(ТекущаяДатаСеанса()) Тогда
		// Если остатки получаются "на сегодня", то обращаемся к текущим итогам регистра.
		Запрос.УстановитьПараметр("Период", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(ДатаОстатков), ВидГраницы.Включая));
	КонецЕсли;
	
	СубконтоКонтрагентДоговор = Новый СписокЗначений;
	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос.УстановитьПараметр("СубконтоКонтрагентДоговор", СубконтоКонтрагентДоговор);
	
	СписокСчетовРасчетов = МониторРуководителя.СчетаРасчетовСКонтрагентами(1);
	СписокСчетовРасчетовСПоставщиками = МониторРуководителя.СчетаРасчетовСКонтрагентами(2);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетовРасчетов, СписокСчетовРасчетовСПоставщиками, Истина);

	Запрос.УстановитьПараметр("СписокСчетовРасчетов", СписокСчетовРасчетов);
	
	ВидыДоговоров = Новый Массив;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);

	Запрос.УстановитьПараметр("ВидыДоговоров", ВидыДоговоров);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто2 КАК Договор
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СписокСчетовРасчетов), &СубконтоКонтрагентДоговор, ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (&ВидыДоговоров)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Организация,
	|	Остатки.Контрагент,
	|	СУММА(Остатки.Сумма) КАК СуммаДолга
	|ПОМЕСТИТЬ ОстаткиПоКонтрагентам
	|ИЗ
	|	Остатки КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Организация,
	|	Остатки.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоКонтрагентам.Организация,
	|	ОстаткиПоКонтрагентам.Контрагент,
	|	ВЫБОР
	|		КОГДА ОстаткиПоКонтрагентам.СуммаДолга > 0
	|			ТОГДА ОстаткиПоКонтрагентам.СуммаДолга
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НамДолжны,
	|	ВЫБОР
	|		КОГДА ОстаткиПоКонтрагентам.СуммаДолга < 0
	|			ТОГДА -ОстаткиПоКонтрагентам.СуммаДолга
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МыДолжны
	|ИЗ
	|	ОстаткиПоКонтрагентам КАК ОстаткиПоКонтрагентам";

	ТаблицаРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ОстаткиНоменклатуры()
	
	Запрос = Новый запрос;
	
	СчетаУчетаТоваровПредопределенные = Новый Массив;
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.Материалы);        // 10
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);    // 21
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.Товары);           // 41
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция); // 43
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение); // 002
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку); // 003.01
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);   // 004.01
	
	СчетаУчетаТоваров = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаУчетаТоваровПредопределенные);
	
	Счета_1011 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	СчетаИсключаемые = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Счета_1011);
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);            // 10.07
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ); // 41.12
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода);        // 41.К
	
	СчетаУчетаТоваров = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаУчетаТоваров, СчетаИсключаемые);
	
	Запрос.УстановитьПараметр("СчетаУчетаТоваров", СчетаУчетаТоваров);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт) КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(, Счет В (&СчетаУчетаТоваров), , ) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.КоличествоОстатокДт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.Субконто1";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция СписокЗадач(ДатаНачалаХраненияДанных)
	
	Запрос = Новый запрос;
	Запрос.УстановитьПараметр("ДатаНачалаХраненияДанных", ДатаНачалаХраненияДанных);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация,
	|	ЗадачиБухгалтера.Правило,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Срок,
	|	ЗадачиБухгалтера.Наименование,
	|	ЗадачиБухгалтера.ВАрхиве КАК Выполнено,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗадачиБухгалтера.Правило) = ТИП(Справочник.ПравилаРегулярныхПлатежей)
	|			ТОГДА ""ПравилаРегулярныхПлатежей""
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗадачиБухгалтера.Правило) = ТИП(Справочник.ПроверкиКонтролирующимиОрганами)
	|			ТОГДА ""ПроверкиКонтролирующимиОрганами""
	|		КОГДА Требования.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА Требования.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|						ТОГДА ""ПравилаПредставленияОтчетов""
	|					ИНАЧЕ ""ПравилаУплатыНалогов""
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТипПравила
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Требования
	|		ПО ЗадачиБухгалтера.Правило = Требования.Ссылка
	|ГДЕ
	|	ЗадачиБухгалтера.Срок >= &ДатаНачалаХраненияДанных
	|	И ТИПЗНАЧЕНИЯ(ЗадачиБухгалтера.Правило) <> ТИП(Перечисление.ЗадачиНачалаРаботы)";
		
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ОбщиеПоказатели()
	
	ТаблицаОбщихПоказателей = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	
	СчетаУчетаТоваровПредопределенные = Новый Массив;
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.Материалы);        // 10
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);    // 21
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.Товары);           // 41
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция); // 43
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение); // 002
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку); // 003.01
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);   // 004.01
	
	СчетаУчетаТоваров = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаУчетаТоваровПредопределенные);
	
	Счета_1011 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	СчетаИсключаемые = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Счета_1011);
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);            // 10.07
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ); // 41.12
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода);        // 41.К
	
	СчетаУчетаТоваров = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаУчетаТоваров, СчетаИсключаемые);
	
	Запрос.УстановитьПараметр("СчетаУчетаТоваров", СчетаУчетаТоваров);
	
	МассивСчетовБанк = Новый Массив;
	МассивСчетовБанк.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	МассивСчетовБанк.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос.Установитьпараметр("СчетаБанк",							МассивСчетовБанк);
	Запрос.УстановитьПараметр("СчетКасса",							БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	Запрос.УстановитьПараметр("Период",								ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПериодМинусГод",						Новый Граница(КонецДня(ДобавитьМесяц(ТекущаяДатаСеанса(), -12)), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",		ВалютаРегламентированногоУчета);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплатуПокупателю.Ссылка,
		|	СчетНаОплатуПокупателю.Организация КАК Организация,
		|	СчетНаОплатуПокупателю.СуммаДокумента КАК СуммаДокумента,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК ВалютаДокумента
		|ПОМЕСТИТЬ СчетаНаОплату
		|ИЗ
		|	РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО СтатусыДокументов.Организация = СчетНаОплатуПокупателю.Организация
		|			И СтатусыДокументов.Документ = СчетНаОплатуПокупателю.Ссылка
		|ГДЕ
		|	СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.НеОплачен)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВалютаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность,
		|	КурсыВалютСрезПоследних.Валюта КАК Валюта
		|ПОМЕСТИТЬ Валюты
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаНаОплату.Ссылка,
		|	СчетаНаОплату.Организация,
		|	ВЫБОР
		|		КОГДА СчетаНаОплату.ВалютаДокумента = &ВалютаРегламентированногоУчета
		|			ТОГДА СчетаНаОплату.СуммаДокумента
		|		КОГДА НЕ Валюты.Курс ЕСТЬ NULL 
		|				И НЕ Валюты.Кратность ЕСТЬ NULL 
		|				И Валюты.Кратность <> 0
		|			ТОГДА СчетаНаОплату.СуммаДокумента * Валюты.Курс / Валюты.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаДокумента
		|ПОМЕСТИТЬ СчетаСПриведеннымиСуммами
		|ИЗ
		|	СчетаНаОплату КАК СчетаНаОплату
		|		ЛЕВОЕ СОЕДИНЕНИЕ Валюты КАК Валюты
		|		ПО СчетаНаОплату.ВалютаДокумента = Валюты.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Организация,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаБанк)
		|			ТОГДА ""ОстаткиНаСчетах"" 
		|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетКасса)
		|			ТОГДА ""ОстаткиВКассе""
		|		ИНАЧЕ ""ОстаткиНаСкладах""
		|	КОНЕЦ КАК Показатель,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Значение,
		|	0 КАК ЗначениеМинусГод
		|ПОМЕСТИТЬ ЗначенияПоказателей
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(, Счет В (&СчетаБанк, &СчетКасса, &СчетаУчетаТоваров), , ) КАК ХозрасчетныйОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Организация,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаБанк)
		|			ТОГДА ""ОстаткиНаСчетах"" 
		|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетКасса)
		|			ТОГДА ""ОстаткиВКассе""
		|		ИНАЧЕ ""ОстаткиНаСкладах""
		|	КОНЕЦ КАК Показатель,
		|	0,
		|	ХозрасчетныйОстатки.СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ПериодМинусГод, Счет В (&СчетаБанк, &СчетКасса, &СчетаУчетаТоваров), , ) КАК ХозрасчетныйОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетаСПриведеннымиСуммами.Организация,
		|	""СуммаНеоплаченныхСчетов"",
		|	СУММА(СчетаСПриведеннымиСуммами.СуммаДокумента),
		|	0
		|ИЗ
		|	СчетаСПриведеннымиСуммами КАК СчетаСПриведеннымиСуммами
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетаСПриведеннымиСуммами.Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетаСПриведеннымиСуммами.Организация,
		|	""НеОплаченоСчетов"",
		|	КОЛИЧЕСТВО(СчетаСПриведеннымиСуммами.Ссылка),
		|	0
		|ИЗ
		|	СчетаСПриведеннымиСуммами КАК СчетаСПриведеннымиСуммами
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетаСПриведеннымиСуммами.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.Показатель,
		|	СУММА(ЗначенияПоказателей.Значение) КАК Значение,
		|	СУММА(ЗначенияПоказателей.ЗначениеМинусГод) КАК ЗначениеМинусГод
		|ИЗ
		|	ЗначенияПоказателей КАК ЗначенияПоказателей
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.Показатель";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ЭтоОбъектДенежныйДокумент(Данные)
	
	ТипыДенежныхДокументов = Новый Массив;
	ТипыДенежныхДокументов.Добавить(Тип("ДокументОбъект.РасходныйКассовыйОрдер"));
	ТипыДенежныхДокументов.Добавить(Тип("ДокументОбъект.ПриходныйКассовыйОрдер"));
	ТипыДенежныхДокументов.Добавить(Тип("ДокументОбъект.СписаниеСРасчетногоСчета"));
	ТипыДенежныхДокументов.Добавить(Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет"));
	
	Для каждого ТипДанных Из ТипыДенежныхДокументов Цикл
		Если ТипЗнч(Данные) = ТипДанных Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СтатусОплатыСчетаНаОплатуПокупателю(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Ссылка.Организация);
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СтатусыДокументов.Статус
	               |ИЗ
	               |	РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	               |ГДЕ
	               |	СтатусыДокументов.Организация = &Организация
	               |	И СтатусыДокументов.Документ = &Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Статус;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СистемаНалогообложенияДляМобильногоПриложения(Организация)
	
	ЗначениеПеречисления = УчетнаяПолитика.СистемаНалогообложения(Организация, ТекущаяДатаСеанса());
	
	Если ЗначениеПеречисления = Перечисления.СистемыНалогообложения.Общая Тогда
		СериализованноеЗначение = "Общая";
	ИначеЕсли ЗначениеПеречисления = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		СериализованноеЗначение = "Упрощенная";
	Иначе
		СериализованноеЗначение = "ОсобыйПорядок";
	КонецЕсли;
	
	Возврат СериализованноеЗначение;
	
КонецФункции

Процедура УдалитьИмеющиесяСтрокиКИ(Объект, ОбъектXDTOЗагружаемаяСтрокаКИ)
	
	Если ОбъектXDTOЗагружаемаяСтрокаКИ.ВидПредопределенный Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации[ОбъектXDTOЗагружаемаяСтрокаКИ.ВидИмяПредопределенныхДанных];
	Иначе
		ВидКИ = ДесериализоватьСсылкуНаСправочник(ОбъектXDTOЗагружаемаяСтрокаКИ.Вид, "ВидыКонтактнойИнформации");
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Вид", ВидКИ);
	НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		Объект.КонтактнаяИнформация.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовуюСтрокуКИ(Объект, ОбъектXDTOЗагружаемаяСтрокаКИ)
	
	ТипКонтактнойИнформации = ДесериализоватьТипКИ(ОбъектXDTOЗагружаемаяСтрокаКИ.Тип);
	Если ОбъектXDTOЗагружаемаяСтрокаКИ.ВидПредопределенный Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации[ОбъектXDTOЗагружаемаяСтрокаКИ.ВидИмяПредопределенныхДанных]
	Иначе
		ВидКонтактнойИнформации = ДесериализоватьСсылкуНаСправочник(ОбъектXDTOЗагружаемаяСтрокаКИ.Вид, "ВидыКонтактнойИнформации");
	КонецЕсли;
	
	ЗначениеАдресаJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		ОбъектXDTOЗагружаемаяСтрокаКИ.Представление, ВидКонтактнойИнформации);
	
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Объект, ЗначениеАдресаJSON, ВидКонтактнойИнформации);
	
КонецПроцедуры

Функция ДесериализоватьТипКИ(ТипКИСтрока)
	
	Если ТипКИСтрока = "Адрес" Тогда
		ТипКИЗначение = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ИначеЕсли ТипКИСтрока = "Телефон" Тогда
		ТипКИЗначение = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ИначеЕсли ТипКИСтрока = "АдресЭлектроннойПочты" Тогда
		ТипКИЗначение = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	КонецЕсли;
	
	Возврат ТипКИЗначение;
	
КонецФункции

Функция СериализоватьТипКИ(ТипКИПеречисление)
	
	Если ТипКИПеречисление = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ТипКИСтрока = "Адрес";
	ИначеЕсли ТипКИПеречисление = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ТипКИСтрока = "Телефон";
	ИначеЕсли ТипКИПеречисление = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ТипКИСтрока = "АдресЭлектроннойПочты";
	КонецЕсли;
	
	Возврат ТипКИСтрока;
	
КонецФункции

Процедура ОбновитьДанныеМонитораРуководителя() Экспорт
	
	//Обновим показатели монитора руководителя
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам);
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", 	Справочники.Организации.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Истина);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьРеквизитыАктСверкиВзаиморасчетов(ОбъектXDTO) Экспорт
	
	ВыводитьПолныеНазванияДокументов = Ложь;
	РазбитьПоДоговорам = Ложь;
	ВыводитьСчетаФактуры = Ложь;
	СОбособленнымиПодразделениями = Ложь;
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "АктСверкиВзаиморасчетов");
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		// Используем счета учета взаиморасчетов из документа
		ФильтрСписокСчетов = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АктСверкиВзаиморасчетовСписокСчетов.Счет
		|ИЗ
		|	Документ.АктСверкиВзаиморасчетов.СписокСчетов КАК АктСверкиВзаиморасчетовСписокСчетов
		|ГДЕ
		|	АктСверкиВзаиморасчетовСписокСчетов.Ссылка = &Ссылка
		|	И АктСверкиВзаиморасчетовСписокСчетов.УчаствуетВРасчетах";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ФильтрСписокСчетов.Добавить(Выборка.Счет);
		КонецЦикла;
		
		СтруктураРеквизитов 				= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
			"ВыводитьПолныеНазванияДокументов, РазбитьПоДоговорам, ВыводитьСчетаФактуры, СОбособленнымиПодразделениями");
		ВыводитьПолныеНазванияДокументов 	= СтруктураРеквизитов.ВыводитьПолныеНазванияДокументов;
		РазбитьПоДоговорам 					= СтруктураРеквизитов.РазбитьПоДоговорам;
		ВыводитьСчетаФактуры                = СтруктураРеквизитов.ВыводитьСчетаФактуры;
		СОбособленнымиПодразделениями       = СтруктураРеквизитов.СОбособленнымиПодразделениями;
	Иначе
		// Используем счета учета взаиморасчетов по умолчанию
		ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
		ФильтрСписокСчетов = ТаблицаСчетов.ВыгрузитьКолонку("СчетРасчетов");
	КонецЕсли;
	
	Организация				= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Контрагент				= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
	ДоговорКонтрагента		= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДоговорКонтрагента, "ДоговорыКонтрагентов");
	ДатаНачала				= ОбъектXDTO.ДатаНачала;
	ДатаОкончания			= ОбъектXDTO.ДатаОкончания;
	ВалютаДокумента			= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ВалютаДокумента, "Валюты");
	
	СтруктураПараметров = Новый Структура;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("Контрагент", Контрагент);
	СтруктураПараметров.Вставить("СОбособленнымиПодразделениями", СОбособленнымиПодразделениями);
	СтруктураПараметров.Вставить("ВыводитьСчетаФактуры",          ВыводитьСчетаФактуры);
	СтруктураПараметров.Вставить("ЗаполнятьДанныеКонтрагента",    Ложь);
	СтруктураПараметров.Вставить("Валюта",?(НЕ ЗначениеЗаполнено(ВалютаДокумента) ИЛИ (ВалютаДокумента = ВалютаРегламентированногоУчета), Неопределено, ВалютаДокумента));
	СтруктураПараметров.Вставить("ВалютаДокумента", ВалютаДокумента);
	СтруктураПараметров.Вставить("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = Новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СтруктураПараметров.Вставить("АналитикаРасчетов", АналитикаРасчетов);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", ?(НЕ ЗначениеЗаполнено(ДоговорКонтрагента), Неопределено, ДоговорКонтрагента));
	СтруктураПараметров.Вставить("ВыводитьПолныеНазванияДокументов", ВыводитьПолныеНазванияДокументов);
	СтруктураПараметров.Вставить("РазбитьПоДоговорам", РазбитьПоДоговорам);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ПодготовитьСообщениеЗаполненияАктаСверки(СтруктураДанных) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("АктСверкиВзаиморасчетов");
	ПередаваемыйОбъект.ОстатокНаНачало		= СтруктураДанных.ОстатокНаНачало;
	
	Для Каждого СтрокаТЧ Из СтруктураДанных.ПоДаннымОрганизации Цикл
		
		ДобавляемаяСтрока = СоздатьОбъектXDTO("СтрокаАктаСверки");
		ДобавляемаяСтрока.Договор			= СериализоватьСсылку(СтрокаТЧ.Договор);
		ДобавляемаяСтрока.ДокументСсылка	= СериализоватьСсылку(СтрокаТЧ.Документ);
		Если ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
			ДобавляемаяСтрока.ДокументТип	= СтрокаТЧ.Документ.Метаданные().Имя;
		КонецЕсли;
		ДобавляемаяСтрока.Представление		= СтрокаТЧ.Представление;
		ДобавляемаяСтрока.Дата				= СтрокаТЧ.Дата;
		ДобавляемаяСтрока.Дебет				= СтрокаТЧ.Дебет;
		ДобавляемаяСтрока.Кредит			= СтрокаТЧ.Кредит;
		
		ПередаваемыйОбъект.ПоДаннымОрганизации.Добавить(ДобавляемаяСтрока);
		
	КонецЦикла;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ПередаваемыйОбъект);
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

#Область ОбменСообщениями

Функция ПолучитьОбъектXDTOБазаСообщений(УзелОбмена)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("БазаСообщений");
	ПередаваемыйОбъект.АдресБазыСообщений = "";
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ДесериализоватьСтавкуНДС(ПредставлениеСтавкаНДС)
	СтавкаНДС = Неопределено;
	
	Если ПредставлениеСтавкаНДС = "НДС20" Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли ПредставлениеСтавкаНДС = "НДС18" Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли ПредставлениеСтавкаНДС = "НДС10" Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли ПредставлениеСтавкаНДС = "НДС0" Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли ПредставлениеСтавкаНДС = "БезНДС" Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Возврат СтавкаНДС;
КонецФункции

Процедура ЗаписатьНоменклатуру(ОбъектXDTO, УзелОбмена) Экспорт
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Номенклатура");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Если ОбъектXDTO.ЭтоГруппа Тогда
			Объект = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			Объект = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование		= ОбъектXDTO.Наименование;
	Объект.Код				= ОбъектXDTO.Код;
	Объект.ПометкаУдаления	= ОбъектXDTO.ПометкаУдаления;
	
	Если НЕ ОбъектXDTO.ЭтоГруппа Тогда
		
		Объект.Артикул				= ОбъектXDTO.Артикул;
		Объект.НаименованиеПолное	= ОбъектXDTO.НаименованиеПолное;
		Объект.ЕдиницаИзмерения		= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ЕдиницаИзмерения, "КлассификаторЕдиницИзмерения");
		Объект.НоменклатурнаяГруппа	= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.НоменклатурнаяГруппа, "НоменклатурныеГруппы");
		СтавкаНДС = ДесериализоватьСтавкуНДС(ОбъектXDTO.СтавкаНДС);
		Объект.ВидСтавкиНДС			= Перечисления.ВидыСтавокНДС.ВидСтавки(СтавкаНДС);
		Объект.Услуга				= ОбъектXDTO.Услуга;
		
	КонецЕсли;
	
	Объект.Родитель = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Родитель, "Номенклатура");
	Объект.ВидНоменклатуры		= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ВидНоменклатуры, "ВидыНоменклатуры");
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьОсновнойВидНоменклатуры(ОбъектXDTO, УзелОбмена) Экспорт

	ЗначениеКонстанты = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ЗначениеКонстанты, "ВидыНоменклатуры");
	ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновнойВидНоменклатуры", ЗначениеКонстанты);
	
КонецПроцедуры

Процедура ЗаписатьОсновнойВидНоменклатурыУслуга(ОбъектXDTO, УзелОбмена) Экспорт

	ЗначениеКонстанты = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ЗначениеКонстанты, "ВидыНоменклатуры");
	ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновнойВидНоменклатурыУслуга", ЗначениеКонстанты);
	
КонецПроцедуры

Процедура ЗаписатьНастройкиУведомлений(НастройкиУведомлений, УзелОбмена) Экспорт
	
	Если НастройкиУведомлений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	УзелОбъект = УзелОбмена.ПолучитьОбъект();
	УзелОбъект.ПолучаетPushУведомления = НастройкиУведомлений.ПолучаетPushУведомления;
	УзелОбъект.ИдентификаторПодписчикаУведомлений = Новый ХранилищеЗначения(
		НастройкиУведомлений.ИдентификаторПодписчикаУведомлений, 
		Новый СжатиеДанных(9));
	УзелОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьОбъектXDTOИспользоватьНесколькоНоменклатурныхГрупп()
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ИспользоватьНесколькоНоменклатурныхГрупп");
	ЗначениеКонстанты  = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоНоменклатурныхГрупп");
	
	ПередаваемыйОбъект.ЗначениеКонстанты = ЗначениеКонстанты;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ПолучитьОбъектXDTOОсновнаяНоменклатурнаяГруппа()
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ОсновнаяНоменклатурнаяГруппа");
	ЗначениеКонстанты  = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	
	ПередаваемыйОбъект.ЗначениеКонстанты = СериализоватьСсылку(ЗначениеКонстанты);
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ПолучитьОбъектXDTOОсновнойВидНоменклатуры()
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ОсновнойВидНоменклатуры");
	ЗначениеКонстанты  = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойВидНоменклатуры");
	
	ПередаваемыйОбъект.ЗначениеКонстанты = СериализоватьСсылку(ЗначениеКонстанты);
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ПолучитьОбъектXDTOОсновнойВидНоменклатурыУслуга()
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ОсновнойВидНоменклатурыУслуга");
	ЗначениеКонстанты  = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойВидНоменклатурыУслуга");
	
	ПередаваемыйОбъект.ЗначениеКонстанты = СериализоватьСсылку(ЗначениеКонстанты);
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Процедура ЗаписатьЦеныНоменклатуры(ОбъектXDTO, УзелОбмена) Экспорт
	
	Номенклатура = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Номенклатура, "Номенклатура");
	Валюта = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Валюта, "Валюты");
	СпособыЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам;
	
	ЦеныНоменклатурыНаборЗаписей = РегистрыСведений.ЦеныНоменклатурыДокументов.СоздатьНаборЗаписей();
	ЦеныНоменклатурыНаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	ЦеныНоменклатурыНаборЗаписей.Отбор.СпособЗаполненияЦены.Установить(СпособыЗаполненияЦен);
	
	ЦеныНоменклатурыЗапись = ЦеныНоменклатурыНаборЗаписей.Добавить();
	ЦеныНоменклатурыЗапись.Номенклатура			= Номенклатура;
	ЦеныНоменклатурыЗапись.Цена					= ОбъектXDTO.Цена;
	ЦеныНоменклатурыЗапись.Валюта				= Валюта;
	ЦеныНоменклатурыЗапись.ЦенаВключаетНДС		= ОбъектXDTO.ЦенаВключаетНДС;
	ЦеныНоменклатурыЗапись.СпособЗаполненияЦены	= СпособыЗаполненияЦен;
	
	ЦеныНоменклатурыНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ЦеныНоменклатурыНаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	
	ЦеныНоменклатурыНаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти