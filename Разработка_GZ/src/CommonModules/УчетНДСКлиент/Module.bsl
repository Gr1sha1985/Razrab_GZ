
#Область КомандыВводаНаОсновании

Функция ПараметрыИсправленияСчетаФактурыПолученного(ПараметрКоманды, ИсправлениеСобственнойОшибки = Ложь) Экспорт

	ПараметрыОткрытия = Новый Структура;
	
	РеквизитыДляОбработки = УчетНДСВызовСервера.СтруктураРеквизитовСчетаФактурыПолученного(ПараметрКоманды);
	ПорядокИсправления    = РеквизитыДляОбработки.ПорядокИсправления;
	ОснованиеИсправления  = РеквизитыДляОбработки.ОснованиеДляКорректировки;
	
	Если НЕ ПорядокИсправления[РеквизитыДляОбработки.ВидСчетаФактуры] 
		ИЛИ ТипЗнч(РеквизитыДляОбработки.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			// Счета-фактуры создаются без документа "Корректировка поступления"
			Если ТипЗнч(РеквизитыДляОбработки.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				
				ПараметрыЗаполнения = Новый Структура(
					"ДокументОснование,
					|ВидСчетаФактуры,
					|Исправление,
					|ИсправляемыйСчетФактура,
					|ИсправлениеСобственнойОшибки,
					|ЗаполнятьПоСчетуФактуре",
					РеквизитыДляОбработки.ДокументОснование,
					РеквизитыДляОбработки.ВидСчетаФактуры,
					?(ИсправлениеСобственнойОшибки, РеквизитыДляОбработки.Исправление, Истина),
					РеквизитыДляОбработки.СчетФактура,
					ИсправлениеСобственнойОшибки,
					Истина);
				
				ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
			ИначеЕсли ИсправлениеСобственнойОшибки Тогда
				ПараметрыЗаполнения = Новый Структура(
					"ДокументОснование,
					|ВидСчетаФактуры,
					|Исправление,
					|ИсправляемыйСчетФактура,
					|ИсправлениеСобственнойОшибки,
					|ЗаполнятьПоСчетуФактуре",
					РеквизитыДляОбработки.СчетФактура,
					РеквизитыДляОбработки.ВидСчетаФактуры,
					РеквизитыДляОбработки.Исправление,
					РеквизитыДляОбработки.СчетФактура,
					ИсправлениеСобственнойОшибки,
					Истина);
				
				ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
				
			Иначе
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Основание", РеквизитыДляОбработки.ПоследнееИсправление);
			КонецЕсли;
		
		ПараметрыОткрытия.Вставить("ИмяДокумента", "СчетФактураПолученный"); 
		ПараметрыОткрытия.Вставить("ПараметрыФормы", ПараметрыФормы); 
		
	Иначе
		// Счета-фактуры создаются через документ "Корректировка поступления"
		ВидОперации = ?(ИсправлениеСобственнойОшибки, 
			ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки"),
			ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"));
		
		ПараметрыЗаполнения = Новый Структура("ДокументОснование, ВидОперации", ОснованиеИсправления, ВидОперации);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
		
		ПараметрыОткрытия.Вставить("ИмяДокумента", "КорректировкаПоступления"); 
		ПараметрыОткрытия.Вставить("ПараметрыФормы", ПараметрыФормы); 
		
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;

КонецФункции

Функция ПараметрыКорректировкиСчетаФактурыПолученного(ПараметрКоманды) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	
	РеквизитыДляОбработки  = УчетНДСВызовСервера.СтруктураРеквизитовСчетаФактурыПолученного(ПараметрКоманды);
	ПорядокИсправления     = РеквизитыДляОбработки.ПорядокИсправления;
	ОснованиеКорректировки = РеквизитыДляОбработки.ОснованиеДляКорректировки;
	
	Если НЕ ПорядокИсправления[РеквизитыДляОбработки.ВидСчетаФактуры] Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для счета-фактуры с видом ""%1"" возможность корректировки не предусмотрена'"), РеквизитыДляОбработки.ВидСчетаФактуры);
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		Если ТипЗнч(РеквизитыДляОбработки.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда 
			ПараметрыЗаполнения = Новый Структура(
				"ДокументОснование,
				|ВидСчетаФактуры,
				|ЗаполнятьПоСчетуФактуре,
				|ИсправляемыйСчетФактура,
				|ИсправлениеСобственнойОшибки,
				|Исправление",
				РеквизитыДляОбработки.ДокументОснование,
				ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.Корректировочный"),
				Истина,
				РеквизитыДляОбработки.СчетФактура,
				Ложь,
				Ложь);
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
			ПараметрыОткрытия.Вставить("ИмяДокумента", "СчетФактураПолученный");
		Иначе
			ПараметрыЗаполнения = Новый Структура("ДокументОснование, Видоперации",
				ОснованиеКорректировки, ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение"));
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
			ПараметрыОткрытия.Вставить("ИмяДокумента", "КорректировкаПоступления");
		КонецЕсли;
		
		ПараметрыОткрытия.Вставить("ПараметрыФормы", ПараметрыФормы); 
		
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Функция ПараметрыИсправленияСчетаФактурыВыданного(ПараметрКоманды, ИсправлениеСобственнойОшибки = Ложь) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	
	РеквизитыДляОбработки = УчетНДСВызовСервера.СтруктураРеквизитовСчетаФактурыВыданного(ПараметрКоманды);
	ПорядокИсправления    = РеквизитыДляОбработки.ПорядокИсправления;
	ВозможноИсправить     = РеквизитыДляОбработки.ВозможноИсправить;
	ИсправлятьСчетФактуру = РеквизитыДляОбработки.ИсправлятьСчетФактуру;
	ОснованиеИсправления  = ?(ИсправлятьСчетФактуру, РеквизитыДляОбработки.ПоследнееИсправление, РеквизитыДляОбработки.ДокументОснование);
	
	Если НЕ ВозможноИсправить Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для счета-фактуры с видом ""%1"" возможность исправления не предусмотрена'"), РеквизитыДляОбработки.ВидСчетаФактуры);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если НЕ ПорядокИсправления[РеквизитыДляОбработки.ВидСчетаФактуры] Тогда
		
		ПараметрыФормы = Новый Структура("Основание", РеквизитыДляОбработки.ПоследнееИсправление);
		
		ПараметрыОткрытия.Вставить("ИмяДокумента",   "СчетФактураВыданный");
		ПараметрыОткрытия.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	Иначе
		
		ВидОперации = ?(ИсправлениеСобственнойОшибки,
			ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки"),
			ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"));
		
		ПараметрыЗаполнения = Новый Структура("ДокументОснование, Видоперации", ОснованиеИсправления, ВидОперации);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
		
		ПараметрыОткрытия.Вставить("ИмяДокумента",   "КорректировкаРеализации"); 
		ПараметрыОткрытия.Вставить("ПараметрыФормы", ПараметрыФормы); 
		
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Функция ПараметрыКорректировкиСчетаФактурыВыданного(ПараметрКоманды) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	
	РеквизитыДляОбработки     = УчетНДСВызовСервера.СтруктураРеквизитовСчетаФактурыВыданного(ПараметрКоманды);
	ВозможноКорректировать    = РеквизитыДляОбработки.ВозможноКорректировать;
	КорректироватьСчетФактуру = РеквизитыДляОбработки.КорректироватьСчетФактуру;
	ОснованиеКорректировки    = ?(КорректироватьСчетФактуру, РеквизитыДляОбработки.ПоследнееИсправление, РеквизитыДляОбработки.ДокументОснование);
	
	Если НЕ ВозможноКорректировать Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для счета-фактуры с видом ""%1"" возможность корректировки не предусмотрена'"), РеквизитыДляОбработки.ВидСчетаФактуры);
		ВызватьИсключение ТекстСообщения;
			
	Иначе
		
		ПараметрыЗаполнения = Новый Структура("ДокументОснование, Видоперации", 
			ОснованиеКорректировки, ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение"));
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
			
		ПараметрыОткрытия.Вставить("ИмяДокумента",   "КорректировкаРеализации"); 
		ПараметрыОткрытия.Вставить("ПараметрыФормы", ПараметрыФормы); 
		
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Функция ПараметрыКорректировочнойСправки(ПараметрКоманды) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	
	РеквизитыДляОбработки           = УчетНДСВызовСервера.СтруктураРеквизитовСчетаФактурыВыданного(ПараметрКоманды);
	ДоступнаКорректировочнаяСправка = РеквизитыДляОбработки.ДоступнаКорректировочнаяСправка;
	ВидСчетаФактуры                 = РеквизитыДляОбработки.ВидСчетаФактуры;
	
	Если НЕ ДоступнаКорректировочнаяСправка Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для счета-фактуры с видом ""%1"" создание корректировочной справки не предусмотрено'"), ВидСчетаФактуры);
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;

	ПараметрыЗаполнения = Новый Структура("ИсправляемыйСчетФактура, ВидСчетаФактуры", 
		ПараметрКоманды,
		ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.КорректировочнаяСправка"));
	ПараметрыФормы      = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
		
	ПараметрыОткрытия.Вставить("ИмяДокумента", "СчетФактураВыданный"); 
	ПараметрыОткрытия.Вставить("ПараметрыФормы", ПараметрыФормы); 
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Функция ПараметрыСчетФактураВыданныйНаАвансКомитента(ПараметрКоманды) Экспорт 
	
	ПараметрыОткрытия = Новый Структура;

	ПоследнееИсправление = УчетНДСВызовСервера.ПолучитьПоследнееИсправлениеСчетаФактурыПолученного(ПараметрКоманды);
	
	ПараметрыФормы = Новый Структура("Основание", ПоследнееИсправление);
	
	ПараметрыОткрытия.Вставить("ИмяДокумента",  "СчетФактураВыданный"); 
	ПараметрыОткрытия.Вставить("ПараметрыФормы", ПараметрыФормы); 
	
	Возврат ПараметрыОткрытия;

КонецФункции 

Функция ПараметрыСчетаФактурыНалоговогоАгентаКомитенту(ПараметрКоманды) Экспорт

	ПараметрыОткрытия = Новый Структура;
	
	РеквизитыДляОбработки     = УчетНДСВызовСервера.СтруктураРеквизитовСчетаФактурыВыданного(ПараметрКоманды);
	Если РеквизитыДляОбработки.ВидСчетаФактуры <> ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент") Тогда 
		ТекстСообщения = НСтр("ru='Счет-фактура налогового агента перевыставляется комитенту на основании счета-фактуры с видом ""Налоговый агент""'");
		ВызватьИсключение ТекстСообщения;
	ИначеЕсли ТипЗнч(РеквизитыДляОбработки.ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		ТекстСообщения = НСтр("ru='Счет-фактура налогового агента перевыставляется комитенту на основании исходного счета-фактуры'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("Основание, ПеревыставлениеСФНалоговогоАгента", ПараметрКоманды, Истина);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
	
	ПараметрыОткрытия.Вставить("ПараметрыФормы", ПараметрыФормы); 
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

#КонецОбласти

#Область Печать

Функция ВыполнитьКомандуПечатиСчетовФактур(ОписаниеКоманды) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиСчетовФактур(ОписаниеКоманды.ОбъектыПечати);
	
	СчетаФактуры = НастройкиПечати.СчетаФактуры;
	ДокументыБезСчетовФактур = НастройкиПечати.ДокументыБезСчетовФактур;
	СписокМакетов = НастройкиПечати.СписокМакетов;
	
	ПараметрыПечати = ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(СчетаФактуры);
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли; 
	
	Если СписокМакетов <> "" Тогда 
		
		УправлениеПечатьюБПКлиент.НачатьЗамерВремени(ОписаниеКоманды.Форма, 
			ОписаниеКоманды.Идентификатор, НастройкиПечати.СчетаФактуры);
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.СчетФактураВыданный",
			СписокМакетов,
			СчетаФактуры,
			ОписаниеКоманды.Форма,
			ПараметрыПечати);
			
	КонецЕсли;
	
	Для каждого ДокументБезСчетаФактуры Из ДокументыБезСчетовФактур Цикл
		
		ТекстСообщения = НСтр("ru='По документу %1 счет-фактура не выписан.'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
	КоличествоНеВыставленныхСчетовФактурНаАванс = НастройкиПечати.НеВыставленныеСчетаФактурыНаАванс.Количество();
	Если КоличествоНеВыставленныхСчетовФактурНаАванс > 0 Тогда
		
		Если КоличествоНеВыставленныхСчетовФактурНаАванс = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Установить в счете-фактуре признак ""Выставлен (передан контрагенту)""?
								|Переданные контрагенту документы не актуализируются при расчете налога.'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Установить в счетах-фактурах на аванс признак ""Выставлен (передан контрагенту)""?
								|Переданные контрагенту документы не актуализируются при расчете налога.'");
		КонецЕсли;
			
		Оповещение = Новый ОписаниеОповещения("ВопросНеВыставленныеСчетаФактурыНаАвансЗавершение",
			УчетНДСКлиент, НастройкиПечати.НеВыставленныеСчетаФактурыНаАванс);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьКомандуПечатиСчетовФактурПолученных(ОписаниеКоманды) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиСчетовФактурПолученных(ОписаниеКоманды.ОбъектыПечати);
	
	СчетаФактуры = НастройкиПечати.СчетаФактуры;
	ДокументыБезСчетовФактур = НастройкиПечати.ДокументыБезСчетовФактур;
	СписокМакетов = НастройкиПечати.СписокМакетов;
	
	ПараметрыПечати = ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(СчетаФактуры);
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли; 
	
	Если СписокМакетов <> "" Тогда 
		
		УправлениеПечатьюБПКлиент.НачатьЗамерВремени(ОписаниеКоманды.Форма, 
			ОписаниеКоманды.Идентификатор, НастройкиПечати.СчетаФактуры);
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.СчетФактураПолученный",
			СписокМакетов,
			СчетаФактуры,
			ОписаниеКоманды.Форма,
			ПараметрыПечати);
			
	КонецЕсли;
	
	Для каждого ДокументБезСчетаФактуры Из ДокументыБезСчетовФактур Цикл
		
		ТекстСообщения = НСтр("ru='По документу %1 счет-фактура не выписан.'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецФункции

Функция ВыполнитьКомандуПечатиУниверсальныхПередаточныхДокументов(ОписаниеКоманды) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхПередаточныхДокументов(
		ОписаниеКоманды.ОбъектыПечати);
	
	ПараметрыПечати = Новый Структура("ЗаголовокФормы", НастройкиПечати.ЗаголовокФормы);
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры")
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли; 
	
	Если НастройкиПечати.УниверсальныеПередаточныеДокументы.Количество() > 0 Тогда
		
		УправлениеПечатьюБПКлиент.НачатьЗамерВремени(ОписаниеКоманды.Форма, 
			ОписаниеКоманды.Идентификатор, НастройкиПечати.УниверсальныеПередаточныеДокументы);
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьУПД",
			НастройкиПечати.СписокМакетов, 
			НастройкиПечати.УниверсальныеПередаточныеДокументы, 
			ОписаниеКоманды.Форма,
			ПараметрыПечати);
			
	КонецЕсли;
	
	Для каждого ДокументБезСчетаФактуры Из НастройкиПечати.ДокументыБезСчетовФактур Цикл
		
		Если НастройкиПечати.ДокументыСчетФактураНеТребуются.Найти(ДокументБезСчетаФактуры) = Неопределено Тогда
			
			Если ТипЗнч(ДокументБезСчетаФактуры) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
				ТекстСообщения = НСтр("ru = 'По документу %1 счета-фактуры не выписаны'");
			Иначе
				ТекстСообщения = НСтр("ru = 'По документу %1 счет-фактура не выписан'");
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ВыполнитьКомандуПечатиУниверсальныхКорректировочныхДокументов(ОписаниеКоманды) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхКорректировочныхДокументов(ОписаниеКоманды.ОбъектыПечати);
	
	ПараметрыПечати = Новый Структура("ЗаголовокФормы", НастройкиПечати.ЗаголовокФормы);
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры")
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли; 
		
	Если НастройкиПечати.УниверсальныеКорректировочныеДокументы.Количество() > 0 Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьУКД",
			 НастройкиПечати.СписокМакетов, 
			 НастройкиПечати.УниверсальныеКорректировочныеДокументы, 
			 ОписаниеКоманды.Форма,
			 ПараметрыПечати);
	КонецЕсли;
	
	Для каждого ДокументБезСчетаФактуры Из НастройкиПечати.ДокументыБезСчетовФактур Цикл
		
		Если НастройкиПечати.ДокументыСчетФактураНеТребуются.Найти(ДокументБезСчетаФактуры) = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'По документу %1 счет-фактура не выписан'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ВыполнитьКомандуПечатиЗаявленияОВвозеТоваров(ОписаниеКоманды) Экспорт

	ПараметрыПечати = ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(ОписаниеКоманды.ОбъектыПечати);
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли;

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ЗаявлениеОВвозеТоваров",
		"ЗаявлениеОВвозеТоваров",
		ОписаниеКоманды.ОбъектыПечати,
		ОписаниеКоманды.Форма,
		ПараметрыПечати);
	
КонецФункции

Функция ВыполнитьКомандуПечатиСтатистическойФормыУчетаПеремещенияТоваров(ОписаниеКоманды) Экспорт

	ПараметрыПечати = ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(ОписаниеКоманды.ОбъектыПечати);
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли;

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ЗаявлениеОВвозеТоваров",
		"СтатистическаяФормаУчетаПеремещенияТоваров",
		ОписаниеКоманды.ОбъектыПечати,
		ОписаниеКоманды.Форма,
		ПараметрыПечати);

КонецФункции

Функция ВыполнитьКомандуПечатиСводныхСправок(ОписаниеКоманды) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиСводныхСправок(ОписаниеКоманды.ОбъектыПечати);
	
	СводныеСправки = НастройкиПечати.СводныеСправки;
	СписокМакетов  = НастройкиПечати.СписокМакетов;
	
	Если ТипЗнч(СводныеСправки) = Тип("Массив") И СводныеСправки.Количество() = 1 Тогда 
		ПараметрыПечати = Новый Структура("ЗаголовокФормы", 
							СтрЗаменить(СтрШаблон(НСтр("ru='%1'"), СводныеСправки[0]),
							НСтр("ru='Счет-фактура выданный'"),
							НСтр("ru='Сводная справка по розничным продажам'")));
	Иначе
		ПараметрыПечати = Неопределено;
	КонецЕсли;
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли; 
	
	Если СписокМакетов <> "" Тогда 
		
		УправлениеПечатьюБПКлиент.НачатьЗамерВремени(ОписаниеКоманды.Форма, 
			ОписаниеКоманды.Идентификатор, НастройкиПечати.СводныеСправки);
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.СчетФактураВыданный",
			СписокМакетов,
			СводныеСправки,
			ОписаниеКоманды.Форма,
			ПараметрыПечати);
			
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьКомандуПечатиКорректировочныхСправок(ОписаниеКоманды) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиКорректировочныхСправок(ОписаниеКоманды.ОбъектыПечати);
	
	КорректировочныеСправки = НастройкиПечати.КорректировочныеСправки;
	СписокМакетов  = НастройкиПечати.СписокМакетов;
	
	Если ТипЗнч(КорректировочныеСправки) = Тип("Массив") И КорректировочныеСправки.Количество() = 1 Тогда 
		ПараметрыПечати = Новый Структура("ЗаголовокФормы", 
							СтрЗаменить(СтрШаблон(НСтр("ru='%1'"), КорректировочныеСправки[0]),
							НСтр("ru='Счет-фактура выданный'"),
							НСтр("ru='Корректировочная справка по розничным продажам'")));
	Иначе
		ПараметрыПечати = Неопределено;
	КонецЕсли;
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли; 
	
	Если СписокМакетов <> "" Тогда 
		
		УправлениеПечатьюБПКлиент.НачатьЗамерВремени(ОписаниеКоманды.Форма, 
			ОписаниеКоманды.Идентификатор, НастройкиПечати.КорректировочныеСправки);
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.СчетФактураВыданный",
			СписокМакетов,
			КорректировочныеСправки,
			ОписаниеКоманды.Форма,
			ПараметрыПечати);
			
	КонецЕсли;
	
КонецФункции

Процедура ВопросНеВыставленныеСчетаФактурыНаАвансЗавершение(Результат, СчетаФактуры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УчетНДСВызовСервера.УстановитьПризнакВыставленСчетовФактурНаАванс(СчетаФактуры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Выгрузка

Процедура ВыгрузкаЗаявленияОВвозеТоваров(Ссылка) Экспорт

	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		
		УникальныйИдентификаторЗаявлениеОВвозе = Новый УникальныйИдентификатор;
		УникальныйИдентификаторУчетПеремещенияТоваров = Новый УникальныйИдентификатор;
		
		ВыгружаемыеДанные = УчетНДСВызовСервера.ПолучитьВыгружаемыеДанныеЗаявлениеОВвозеТоваров(
			Ссылка, 
			УникальныйИдентификаторЗаявлениеОВвозе,
			УникальныйИдентификаторУчетПеремещенияТоваров);
			
		Если ВыгружаемыеДанные.ЗаявлениеОВвозеТоваров <> Неопределено Тогда
			
			Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные.ЗаявлениеОВвозеТоваров Цикл
				
				Попытка
					
					ПолучитьФайл(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки);
					
				Исключение
					
					Сообщение = Новый СообщениеПользователю;
					
					ТекстСообщения = "Не удалось записать файл """ + ФайлВыгрузки.ИмяФайлаВыгрузки 
					+ """! Возможно, недостаточно места на диске или диск защищен от записи.";
					
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
					
					Сообщение.Сообщить();
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
			
		Если ВыгружаемыеДанные.УчетПеремещенияТоваров <> Неопределено Тогда
			
			Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные.УчетПеремещенияТоваров Цикл
				
				Попытка
					
					ПолучитьФайл(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки);
					
				Исключение
					
					Сообщение = Новый СообщениеПользователю;
					
					ТекстСообщения = "Не удалось записать файл """ + ФайлВыгрузки.ИмяФайлаВыгрузки 
					+ """! Возможно, недостаточно места на диске или диск защищен от записи.";
					
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
					
					Сообщение.Сообщить();
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры

Процедура ВыгрузкаЖурналУчетаСчетовФактур(Ссылка) Экспорт

	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде") Тогда
		
		УникальныйИдентификаторЖурнала = Новый УникальныйИдентификатор;
		
		ВыгружаемыеДанные = УчетНДСВызовСервера.ПолучитьВыгружаемыеДанныеЖурналаУчетаСчетовФактур(
			Ссылка, 
			УникальныйИдентификаторЖурнала);
			
		СохранитьФайлВыгрузкиНаКлиенте(ВыгружаемыеДанные);
		
	КонецЕсли;

КонецПроцедуры

Процедура СохранитьФайлВыгрузкиНаКлиенте(ВыгружаемыеДанные) Экспорт
	
	Если ВыгружаемыеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	#Если НЕ ВебКлиент Тогда
		ПутьВыгрузки = РегламентированнаяОтчетностьКлиент.ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные Цикл
		
		#Если ВебКлиент Тогда
			Попытка
				ПолучитьФайл(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки);
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось записать файл ""%1"". Возможно, недостаточно места на диске, диск защищен от записи или не подключено расширение для работы с файлами.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ФайлВыгрузки.ИмяФайлаВыгрузки);
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
			КонецПопытки;
		#Иначе
			ДвоичныйФайл = ПолучитьИзВременногоХранилища(ФайлВыгрузки.АдресФайлаВыгрузки);
			Попытка
				ДвоичныйФайл.Записать(ПутьВыгрузки + ФайлВыгрузки.ИмяФайлаВыгрузки);
				
				ТекстСообщения = НСтр("ru='Файл выгрузки регламентированного отчета ""%1"" сохранен в каталог ""%2"".'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ФайлВыгрузки.ИмяФайлаВыгрузки, ПутьВыгрузки);
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось записать файл ""%1"". Возможно, недостаточно места на диске или диск защищен от записи.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ФайлВыгрузки.ИмяФайлаВыгрузки);
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
			КонецПопытки;
		#КонецЕсли
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

Процедура ОткрытьФормуРеквизитовУПД(Форма, СтандартнаяОбработка, АдресХранилищаПродавцы = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	Если НЕ Форма.ТолькоПросмотр Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",         Форма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("СчетФактура",            Форма.СчетФактура);
	ПараметрыФормы.Вставить("АдресХранилищаПродавцы", АдресХранилищаПродавцы);
	ПараметрыФормы.Вставить("КодВидаОперации",        Форма.КодВидаОперации);
	ПараметрыФормы.Вставить("НДСПредъявленКВычету",   Форма.НДСПредъявленКВычету);
	ПараметрыФормы.Вставить("ЭтоКомиссияНаЗакупку",   Форма.ЭтоКомиссияНаЗакупку);
	ПараметрыФормы.Вставить("Дата",                   Объект.Дата);
	ПараметрыФормы.Вставить("ЭтоВыданныйДокумент",    Ложь);
	ПараметрыФормы.Вставить("РаздельныйУчетНДС",      Форма.РаздельныйУчетНДС);
	
	ОткрытьФорму("ОбщаяФорма.УниверсальныйПередаточныйДокумент", ПараметрыФормы, Форма);

КонецПроцедуры

Процедура ОткрытьФормуРеквизитовУПДВыданный(Форма, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	Если НЕ Форма.ТолькоПросмотр Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",      Форма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("СчетФактура",         Форма.СчетФактура);
	ПараметрыФормы.Вставить("КодВидаОперации",     Форма.КодВидаОперации);
	ПараметрыФормы.Вставить("Дата",                Объект.Дата);
	ПараметрыФормы.Вставить("ЭтоВыданныйДокумент", Истина);
	
	ОткрытьФорму("ОбщаяФорма.УниверсальныйПередаточныйДокумент", ПараметрыФормы, Форма);

КонецПроцедуры

// Открывает форму списка документов НДС в режиме выбора, в качестве описания оповещения при открытии формы используется 
// ОписаниеОповещения, передаваемое в параметрах процедуры.
//
// Параметры:
//  ОписаниеОповещения- ОписаниеОповещения.
//  ПараметрыОтбора - Структура - задает начальные значения отборов. Может содержать ключи:
//                    * Организация- СправочникСсылка.Организации.
//
Процедура ВыбратьДокументНДСДляПередачиФНС(ОписаниеОповещения, ПараметрыОтбора) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Если ПараметрыОтбора <> Неопределено Тогда
		Если ПараметрыОтбора.Свойство("Организация") Тогда
			ПараметрыФормы.Вставить("Организация", ПараметрыОтбора.Организация);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("ЖурналДокументов.ДокументыПоУчетуНДСДляПередачиВЭлектронномВиде.ФормаСписка", ПараметрыФормы,,,,,ОписаниеОповещения);
		
КонецПроцедуры

Процедура ОткрытьСчетФактуру(Форма, СчетФактура, ВидСчетаФактуры) Экспорт

	СтандартнаяОбработка = Ложь;

	Если НЕ ЗначениеЗаполнено(Форма.Параметры.Ключ) ИЛИ Форма.Модифицированность Тогда
		ОбъектЗаписан = Форма.Записать();
		
		Если НЕ ОбъектЗаписан Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		Параметры = Новый Структура("Ключ", СчетФактура);
	Иначе
		Если Форма.Объект.ПометкаУдаления Тогда
			ПоказатьПредупреждение( , НСтр("ru = 'Счет-фактуру нельзя вводить на основании документа, помеченного на удаление.'"));
			Возврат;
		КонецЕсли;

		Параметры = Новый Структура("Основание", Форма.Параметры.Ключ);
	КонецЕсли;
	
	ФормаСФ = ОткрытьФорму("Документ." + ВидСчетаФактуры + ".ФормаОбъекта", Параметры, Форма);

КонецПроцедуры

Функция СоздатьСчетФактуруВыданный(Форма, СтруктураОтбора = Неопределено) Экспорт

	Если Форма.Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Счет-фактуру нельзя выписать на основании документа, помеченного на удаление.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если Форма.Объект.Свойство("ИспользоватьДокументРасчетовКакСчетФактуру") И Форма.Объект.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.РасчетныйДокумент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Счет-фактура не выписан!'"));
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", НСтр("ru = 'Документ расчетов'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "РасчетныйДокумент", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыписыватьСчетаФактурыСпецРежимы = ПолучитьФункциональнуюОпциюИнтерфейса("ВыписыватьСчетаФактурыСпецРежимы");

	Если НЕ ЗначениеЗаполнено(Форма.Параметры.Ключ) ИЛИ Форма.Модифицированность Тогда
		
		ПараметрыЗаписи = Новый Структура("РежимЗаписи, ВыписатьСчетФактуру", РежимЗаписиДокумента.Запись, Истина);
		Форма.Записать(ПараметрыЗаписи);
		
		Если ВыписыватьСчетаФактурыСпецРежимы <> ПолучитьФункциональнуюОпциюИнтерфейса("ВыписыватьСчетаФактурыСпецРежимы") Тогда
			ОбновитьИнтерфейс();
		КонецЕсли;
	
		Возврат Неопределено;
				
	КонецЕсли;		
	
	Основание = Форма.Объект.Ссылка;
	
	Если Форма.Объект.Свойство("ИспользоватьДокументРасчетовКакСчетФактуру") И Форма.Объект.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		Основание = Форма.Объект.РасчетныйДокумент;
	КонецЕсли;
	
	ПараметрыСоздания = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактуры();
	ПараметрыСоздания.Основание = Основание;
	ПараметрыСоздания.УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	ПараметрыСоздания.СтруктураОтбора = СтруктураОтбора;
	
	Результат = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Основание", Основание);
	ДополнительныеПараметры.Вставить("ВыписыватьСчетаФактурыСпецРежимы", ВыписыватьСчетаФактурыСпецРежимы);
		
	Если Результат.Свойство("ФоновоеВыполнение") Тогда // обработать выполнение в фоновом задании
		
		ДополнительныеПараметры.Вставить("АдресХранилищаСОшибками", Результат.АдресХранилищаСОшибками);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("Подключаемый_ОбработатьВыпискуСчетаФактуры", Форма, ДополнительныеПараметры);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Актуализация расчетов с контрагентами'");
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат.ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОбработатьВыпискуСчетаФактуры(Форма, Результат, ДополнительныеПараметры);
	
	Возврат Результат;	

КонецФункции

Функция ОбработатьВыпискуСчетаФактуры(Форма, Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено                         // фоновое задание прервано
		Или Результат.Свойство("ФоновоеВыполнение") Тогда // фоновое задание завершено
		
		ПараметрыСоздания = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактурыПослеАктуализации();
		ПараметрыСоздания.Основание = ДополнительныеПараметры.Основание;
		ПараметрыСоздания.АдресХранилищаСОшибками = ДополнительныеПараметры.АдресХранилищаСОшибками;
		
		// сначала получим данные из временного хранилища
		УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОснованииПослеАктуализации(ПараметрыСоздания, Результат);
		
		Если ПараметрыСоздания.ОткрытьФормуОшибки Тогда
			ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(Форма, ПараметрыСоздания.АдресХранилищаСОшибками);
		КонецЕсли;
		
		СчетФактура                      = ПараметрыСоздания.Ссылка;
		РеквизитыСФ                      = ПараметрыСоздания.РеквизитыСФ;
		ВыписыватьСчетаФактурыСпецРежимы = ПараметрыСоздания.ВыписыватьСчетаФактурыСпецРежимы;
		
	Иначе
		
		СчетФактура                      = Результат.Ссылка;
		РеквизитыСФ                      = Результат;
		ВыписыватьСчетаФактурыСпецРежимы = Результат.ВыписыватьСчетаФактурыСпецРежимы;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОповеститьОбИзменении(СчетФактура);
	
	Если ДополнительныеПараметры.ВыписыватьСчетаФактурыСпецРежимы <> ВыписыватьСчетаФактурыСпецРежимы Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	Возврат РеквизитыСФ;
	
КонецФункции

Процедура ОжидатьОкончаниеАктуализации(Форма, ПараметрыЗаписи) Экспорт
	
	Если Не ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру")
		Или Не ПараметрыЗаписи.ВыписатьСчетФактуру
		Или Не ПараметрыЗаписи.Свойство("ДлительнаяОперация") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Основание", Форма.Объект.Ссылка);
	ДополнительныеПараметры.Вставить("АдресХранилищаСОшибками", ПараметрыЗаписи.ДлительнаяОперация.АдресХранилищаСОшибками);
	ДополнительныеПараметры.Вставить("ВыписыватьСчетаФактурыСпецРежимы",
		ПолучитьФункциональнуюОпциюИнтерфейса("ВыписыватьСчетаФактурыСпецРежимы"));
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("Подключаемый_ОбработатьВыпискуСчетаФактуры", Форма, ДополнительныеПараметры);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Актуализация расчетов с контрагентами'");
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ПараметрыЗаписи.ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Функция СоздатьСчетФактуруПолученный(Форма, ЭтоКомиссияНаЗакупку = Ложь, ЭтоКорректировкаПоступления = Ложь, СтруктураОтбора = Неопределено) Экспорт

	Если Форма.Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Счет-фактуру нельзя зарегистрировать на основании документа, помеченного на удаление.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	Основание = Форма.Объект.Ссылка;
	
	Если Форма.Объект.Свойство("ИспользоватьДокументРасчетовКакСчетФактуру") 
		И Форма.Объект.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
	
		Основание = Форма.Объект.РасчетныйДокумент;
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.РасчетныйДокумент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Счет-фактура не зарегистрирован!'"));
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", НСтр("ru = 'Документ расчетов'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "РасчетныйДокумент", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоКорректировкаПоступления
		И Форма.Объект.Свойство("ВидОперации") Тогда
		
		Если Форма.Объект.ВидОперации = 
			ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки") Тогда
			ТекстНеЗаполненНомер = НСтр("ru = 'Номер исправления'");
			ИмяПоляНомера        = "НомерИсправления";
			ТекстНеЗаполненаДата = НСтр("ru = 'Дата исправления'");
			НомерСчетаФактуры    = Форма.НомерИсправления;
		Иначе
			ТекстНеЗаполненНомер = НСтр("ru = 'Номер корректировочного счета-фактуры'"); 
			ИмяПоляНомера        = "НомерСчетаФактурыПолученного";
			ТекстНеЗаполненаДата = НСтр("ru = 'Дата корректировочного счета-фактуры'"); 
			НомерСчетаФактуры    = Форма.НомерСчетаФактурыПолученного;
		КонецЕсли;
	Иначе
		ТекстНеЗаполненНомер = НСтр("ru = 'Номер счета-фактуры'"); 
		ИмяПоляНомера        = "НомерСчетаФактурыПолученного";
		ТекстНеЗаполненаДата = НСтр("ru = 'Дата счета-фактуры'"); 
		НомерСчетаФактуры    = Форма.НомерСчетаФактурыПолученного;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерСчетаФактуры) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", ТекстНеЗаполненНомер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ИмяПоляНомера,, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ДатаСчетаФактурыПолученного) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", ТекстНеЗаполненаДата);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДатаСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
	Если ЭтоКомиссияНаЗакупку И НЕ ЗначениеЗаполнено(Форма.Продавец) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Составлен от имени'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Продавец",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;

	РегистрироватьСчетаФактурыСпецРежимы = ПолучитьФункциональнуюОпциюИнтерфейса("РегистрироватьСчетаФактурыСпецРежимы");
	
	Если НЕ ЗначениеЗаполнено(Форма.Параметры.Ключ) ИЛИ Форма.Модифицированность Тогда
		
		ПараметрыЗаписи = Новый Структура("РежимЗаписи, ВыписатьСчетФактуру", РежимЗаписиДокумента.Запись, Истина);
		Форма.Записать(ПараметрыЗаписи);
		
		Если РегистрироватьСчетаФактурыСпецРежимы <> ПолучитьФункциональнуюОпциюИнтерфейса("РегистрироватьСчетаФактурыСпецРежимы") Тогда
			ОбновитьИнтерфейс();
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
	ПараметрыСозданияСчетаФактуры.Основание = Основание;
	ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = НомерСчетаФактуры;
	ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = Форма.ДатаСчетаФактурыПолученного;
	ПараметрыСозданияСчетаФактуры.Продавец = ?(ЭтоКомиссияНаЗакупку, Форма.Продавец, Неопределено);
	
	Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(
		ПараметрыСозданияСчетаФактуры, СтруктураОтбора);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СчетФактура = Результат.Ссылка;
	
	ОповеститьОбИзменении(СчетФактура);
	
	Если РегистрироватьСчетаФактурыСпецРежимы <> ПолучитьФункциональнуюОпциюИнтерфейса("РегистрироватьСчетаФактурыСпецРежимы") Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	Возврат Результат;

КонецФункции
