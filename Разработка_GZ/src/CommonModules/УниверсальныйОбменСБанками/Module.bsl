#Область ПрограммныйИнтерфейс

#Область ОбщаяИнформация

// Возвращает общую информацию об указанном сервисе обмена с банками.
//
// Параметры:
//  Сервис - ПеречислениеСсылка.СервисыОбменаСБанками - Тип сервиса обмена с банками.
//
// Возвращаемое значение:
//  Структура - Содержит ключи:
//		* ДанныеАктуальны - Булево - признак того, что данные сервиса актуальны, их обновление не требуется.
//		* ОписаниеОшибки  - Строка - Текст ошибки, если возникла, или пустая строка, если нет ошибок.
//		* ТребуетсяПодключениеИнтернетПоддержки - Булево - признак того, что для работы сервиса необходимо подключить Интернет-поддержку.
//
Функция СведенияОСервисе(Сервис) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ДанныеАктуальны", Ложь);
	Результат.Вставить("ОписаниеОшибки",  "");
	Результат.Вставить("ТребуетсяПодключениеИнтернетПоддержки", Ложь);
	
	Результат.ТребуетсяПодключениеИнтернетПоддержки = 
		НЕ ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	// При работе в модели сервиса справочная информация о банках и их характеристиках
	// обновляется через поставляемые данные, поэтому считаем, что данные всегда актуальны.
	Результат.ДанныеАктуальны = ОбщегоНазначения.РазделениеВключено();
	
	Возврат Результат;

КонецФункции

// Обновляет в базе данные информацию о банках и характеристиках из веб-сервиса.
// Может занимать длительное время, рекомендуется вызывать внутри фонового задания.
// 
// Параметры:
//  Сервис - ПеречислениеСсылка.СервисыОбменаСБанками - Тип сервиса обмена с банками.
//
Процедура АктуализироватьДанныеСервиса(Сервис) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// При работе в модели сервиса справочная информация о банках и их характеристиках
		// обновляется через поставляемые данные, поэтому считаем, что данные всегда актуальны.
		Возврат;
	КонецЕсли;
	
	РезультатАвторизациии = АвторизацияНаСервере(Сервис);
	Если РезультатАвторизациии.Выполнено Тогда
		УстановитьПривилегированныйРежим(Истина);
		Результат = ПолучитьИнформациюОСервисеССервера(РезультатАвторизациии.Токен, Сервис);
		УстановитьПривилегированныйРежим(Ложь);
		Если НЕ Результат.Выполнено Тогда
			ВызватьИсключение НСтр("ru='Ошибка получения данных с сервера обмена.'");
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru='Ошибка авторизации на сервере обмена.'");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик параметризованного регламентного задания УниверсальныйОбменСБанками.
//
// Параметры:
//  Сервис                    - ПеречислениеСсылка.СервисОбменаСБанками - сервис, для связи с которым периодически запускается задание.
//  АдресПолученныхТранзакций - Строка - адрес временного хранилища, в который помещается массив новых транзакций.
//  Отбор                     - Структура - структура с параметрами отбора документооборотов.
//    *Организация - СправочникСсылка.Организация - организация для отбора.
//    *Банк - СправочникСсылка.БанкиУниверсальногоОбмена - банк для отбора.
Процедура ЗапуститьУниверсальныйОбменСБанкамиПоСервису(Сервис, АдресПолученныхТранзакций = Неопределено, Отбор = Неопределено) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УниверсальныйОбменСБанками);
	
	Сервисы = СписокСервисовДляАвтоматическойПроверкиВходящихТранзакций();
	Если Сервисы.Найти(Сервис) = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Автоматическая проверка входящих транзакций для сервиса %1 не поддерживается'"), Сервис);
	КонецЕсли;
	
	// Авторизация на сервере.
	РезультатАвторизации = АвторизацияНаСервере(Сервис);
	Если НЕ РезультатАвторизации.Выполнено Тогда
		ОписаниеОшибки = НСтр("ru='Ошибка авторизации на сервере обмена.'");
		ДлительныеОперацииОбменаСБанками.ВывестиОшибку(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	Токен = РезультатАвторизации.Токен;
	
	// Загрузка транзакций.
	РезультатЗагрузки = ЗагрузитьТранзакцииССервера(Токен, Сервис, Отбор);
	Если РезультатЗагрузки.Выполнено И АдресПолученныхТранзакций <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(РезультатЗагрузки.НовыеТранзакции, АдресПолученныхТранзакций);
	КонецЕсли;
	
	// Проверяем наличие документооборотов, ожидающих ответа банка. 
	ОпределитьНеобходимостьРегЗаданияОбменаСБанками(Сервис, , Отбор);
	
	УниверсальныйОбменСБанкамиПереопределяемый.ПослеЗавершенияОбменаПоСервису(Сервис);
	
КонецПроцедуры

// Возвращает значения характеристик по их именам для указанного сервиса.
// У банков сервиса должен быть установлен признак Активен.
//
// Параметры:
//  Сервис - ПеречислениеСсылка.СервисыОбменаСБанками - Тип сервиса обмена с банками.
//	Характеристики - Строка, Массив - Имена характеристик, которые требуется вернуть.
//		Если не указаны, то возвращаются значения всех имеющихся характеристик.
//	Банки - Массив - Массив ссылок на справочник БанкиУниверсальногоОбмена,
//		для которых требуется вернуть характеристики.
//		Если не передан, то возвращаются данные по всем банкам.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Содержит колонки:
//		* Банк - СправочникСсылка.БанкиУниверсальногоОбмена - Банк.
//		* Характеристика - Строка - Имя характеристики.
//		* Значение - ХранилищеЗначения - Значение характеристики.
//
Функция ХарактеристикиУслугБанков(Сервис, Характеристики = Неопределено, Банки = Неопределено, ВозвращатьНеактивные = Ложь) Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("Характеристики", Характеристики);
	Отбор.Вставить("Банки", Банки);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервис",                      Сервис);
	Запрос.УстановитьПараметр("ВозвращатьНеактивные",        ВозвращатьНеактивные);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХарактеристикиУслугБанка.Характеристика КАК Характеристика,
	               |	ХарактеристикиУслугБанка.Значение КАК Значение,
	               |	ХарактеристикиУслугБанка.НомерСтроки КАК НомерСтроки,
	               |	ХарактеристикиУслугБанка.Ссылка.Банк КАК Банк
	               |ИЗ
	               |	Справочник.УслугиБанков.Характеристики КАК ХарактеристикиУслугБанка
	               |ГДЕ
	               |	ХарактеристикиУслугБанка.Ссылка.Сервис = &Сервис
	               |	И (ХарактеристикиУслугБанка.Ссылка.Банк.Активен = ИСТИНА
	               |			ИЛИ &ВозвращатьНеактивные)
	               |	И (ХарактеристикиУслугБанка.Ссылка.Активна = ИСТИНА
	               |			ИЛИ &ВозвращатьНеактивные)";
	
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Характеристики",
		Запрос,
		"ХарактеристикиУслугБанка.Характеристика В (&Характеристики)");
		
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Банки",
		Запрос,
		"ХарактеристикиУслугБанка.Ссылка.Банк В (&Банки)");
		
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Возвращает подробную информацию для указанного списка банков.
//
// Параметры:
//  Банки - Массив - Массив ссылок на справочник БанкиУниверсальногоОбмена.
//	Поля - Строка, Массив - Имена полей через запятую, которые необходимо вернуть.
//		Если не указан, то загружаются все поля.
//		Используется для сокращения времени загрузки информации из базы, которая требуется редко.
//		В качестве имен полей необходимо указывать имена колонок возвращаемой таблицы (см. Возвращаемое значение).
//
// Возвращаемое значение:
//  ТаблицаЗначений - Содержит следующие колонки:
//		* Банк   - СправочникСсылка.БанкиУниверсальногоОбмена - Банк.
//		* Наименование - Строка - Краткое наименование банка.
//		* НаименованиеПолное - Строка - Полное официальое наименование банка.
//		* ИНН    - Строка - ИНН банка.
//		* ОГРН   - Строка - ОГРН банка.
//		* Адрес  - Строка - Юридический адрес банка в формате JSON, как определено в подсистеме КонтактнаяИнформация БСП.
//		* СписокБИК - Массив - Массив строк с БИК-ами отделений банка.
//		* Логотип - ДвоичныеДанные - Двоичные данные с картинкой логотипам банка.
//
//	Колонки таблицы, имена которых не были запрошены при вызове функции, содержат пустое значение.
//
Функция РеквизитыБанков(Банки, Знач Поля = "") Экспорт

	Если ТипЗнч(Поля) = Тип("Строка") Тогда
		ИменаПолей = СтрРазделить(Поля, ",");
		Для ИндексПоля = 0 По ИменаПолей.Количество() - 1  Цикл
			ИменаПолей[ИндексПоля] = СокрЛП(ИменаПолей[ИндексПоля]);
		КонецЦикла;
	Иначе
		ИменаПолей = Поля;
		Поля = СтрСоединить(ИменаПолей, ",");
	КонецЕсли;

	// Колонки создаем сразу все возможные, заполняем в них данные согласно параметру ИменаПолей.
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Банк",                 Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена"));
	Результат.Колонки.Добавить("Наименование",         Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеПолное",   Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИНН",                  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КПП",                  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ОГРН",                 Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Адрес",                Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("СписокБИК",            Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("Логотип",              Новый ОписаниеТипов("ДвоичныеДанные"));
	Результат.Колонки.Добавить("ОтпечатокСертификата", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Сертификат",           Новый ОписаниеТипов("ДвоичныеДанные"));
	Результат.Колонки.Добавить("Идентификатор",        Новый ОписаниеТипов("Строка"));

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Банки.Ссылка КАК Банк,
	|	Банки.Наименование КАК Наименование,
	|	Банки.НаименованиеПолное КАК НаименованиеПолное,
	|	Банки.ИНН КАК ИНН,
	|	Банки.КПП КАК КПП,
	|	Банки.ОГРН КАК ОГРН,
	|	Банки.Адрес КАК Адрес,
	|	Банки.Логотип КАК Логотип,
	|	Банки.СписокБИК.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		БИК КАК БИК
	|	) КАК СписокБИК,
	|	СертификатыБанков.Отпечаток КАК ОтпечатокСертификата,
	|	СертификатыБанков.Содержимое КАК Сертификат,
	|	Банки.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.БанкиУниверсальногоОбмена КАК Банки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанкиУниверсальногоОбмена.Сертификаты КАК СертификатыБанков
	|		ПО (СертификатыБанков.Ссылка = Банки.Ссылка)
	|			И Банки.ОтпечатокДействующегоСертификата = СертификатыБанков.Отпечаток
	|ГДЕ
	|	Банки.Ссылка В(&Банки)";
	
	Если НЕ ПустаяСтрока(Поля) Тогда
		
		Схема = Новый СхемаЗапроса;
		Схема.УстановитьТекстЗапроса(Запрос.Текст);
		Пакет = Схема.ПакетЗапросов[0];
		
		// Удаляем неиспользуемые колонки.
		ИндексКолонки = Пакет.Колонки.Количество() - 1;
		Пока ИндексКолонки >= 0 Цикл
			Псевдоним = Пакет.Колонки[ИндексКолонки].Псевдоним;
			Если ИменаПолей.Найти(Псевдоним) = Неопределено И Псевдоним <> "Банк" Тогда
				Пакет.Колонки.Удалить(ИндексКолонки);
			КонецЕсли;
			ИндексКолонки = ИндексКолонки - 1;
		КонецЦикла;
		
		Запрос.Текст = Схема.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Банки", Банки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Результат.Добавить();
		Если ПустаяСтрока(Поля) Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, Поля);
		КонецЕсли;
		НоваяСтрока.Банк = Выборка.Банк; // Ссылку на банк заполняем в любом случае вне зависимости от запрошенных полей.
		
		Если ПустаяСтрока(Поля) ИЛИ ИменаПолей.Найти("Логотип") <> Неопределено Тогда
			Логотип = Выборка.Логотип.Получить();
			Если Логотип <> Неопределено Тогда
				НоваяСтрока.Логотип = Логотип;
			КонецЕсли;
		КонецЕсли;
		
		Если (ПустаяСтрока(Поля) ИЛИ ИменаПолей.Найти("Сертификат") <> Неопределено) И Выборка.Сертификат <> Null Тогда
			Сертификат = Выборка.Сертификат.Получить();
			Если Сертификат <> Неопределено Тогда
				НоваяСтрока.Сертификат = Сертификат;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Поля) ИЛИ ИменаПолей.Найти("СписокБИК") <> Неопределено Тогда
			ВыборкаБИК = Выборка.СписокБИК.Выбрать();
			Пока ВыборкаБИК.Следующий() Цикл
				НоваяСтрока.СписокБИК.Добавить(ВыборкаБИК.БИК);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Возвращает подробную информацию для конкретного банка.
//
// Параметры:
//  Банк - СправочникСсылка.БанкиУниверсальногоОбмена - Банк.
//	Поля - Строка, Массив - Список имен полей через запятую, которые необходимо вернуть.
//		См. имена колонок таблицы, возвращаемой функцией РеквизитыБанков().
//
// Возвращаемое значение:
//	Структура - Содержит ключи как у колонок таблицы, возвращаемой функцией РеквизитыБанков().
//
Функция РеквизитыБанка(Банк, Поля = "") Экспорт

	СведенияОБанке = РеквизитыБанков(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Банк), Поля);

	// Создадим структуру, ключи которой совпадают с колонками таблицы.
	Результат = ПустаяСтруктураПоТаблицеЗначений(СведенияОБанке);
	
	СтрокаТаблицы = СведенияОБанке.Найти(Банк, "Банк");
	Если СтрокаТаблицы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, СтрокаТаблицы);
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ТранзакцииОбмена

Функция ПодготовитьДанныеДляОтветныхТранзакций(Сервис, ВходящиеТранзакции) Экспорт
	
	Результат = Новый Массив;
	УниверсальныйОбменСБанкамиПереопределяемый.
		ПодготовитьДанныеДляОтветныхТранзакций(Сервис, ВходящиеТранзакции, Результат);
	Возврат Результат;
	
КонецФункции

Функция НайтиТранзакциюПоИдентификатору(Идентификатор) Экспорт
	
	Транзакция = Справочники.ТранзакцииОбменаСБанками.НайтиПоРеквизиту("Идентификатор", Идентификатор);
	Если Транзакция.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Транзакция;
	
КонецФункции
	
// Возвращает строку данных транзакции указанного типа с наибольшей датой, но не ранее указанной даты.
// Возвращается самая последняя по дате транзакция.
//
// Параметры:
//	ТаблицаДанныхТранзакций - ТаблицаЗначений - результат выполнения функции РеквизитыТранзакций.
//	ТипТранзакции - ПеречислениеСсылка.ТипыТранзакцийОбменаСБанками,
//			ПеречислениеСсылка.ТипыТранзакцийОбменаСБанками<ИмяСервиса>, Массив - тип транзакции для поиска или массив типов транзакций.
//	НеРанееДаты - Дата - дата для фильрации транзакций по ДатаТранспорта.
//	Основание - СправочникСсылка.ТранзакцииОбменаСБанками - транзакция-основание.
//	ВозвращатьВсеНайденные - Булево - если Истина, то будут возвращены все найденные транзакции, по умолчанию возвращается самая последняя по дате.
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - строка с данными транзакции.
Функция НайтиТранзакциюВТаблице(Знач ТаблицаДанныхТранзакций,
		Знач ТипТранзакции,
		НеРанееДаты = '0001-01-01',
		Основание = Неопределено,
		ВозвращатьВсеНайденные = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(ТаблицаДанныхТранзакций) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если ТипЗнч(ТипТранзакции) <> Тип("Массив") Тогда
		ТипТранзакции = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипТранзакции);
	КонецЕсли;
	
	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("Строка");
	ТаблицаСтрок.Колонки.Добавить("Дата");
	
	Для каждого ЭлементТипТранзации Из ТипТранзакции Цикл
		
		Отбор = Новый Структура("ТипТранзакции", ЭлементТипТранзации);
		НайденныеСтроки    = ТаблицаДанныхТранзакций.НайтиСтроки(Отбор);
		МаксДатаТранспорта = '0001-01-01';
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
			Если НайденнаяСтрока.ДатаТранспорта < НеРанееДаты Тогда
				// Не учитываем транзакции, которые были получены ранее указанной даты.
				Продолжить;
			КонецЕсли;
		
			Если НайденнаяСтрока.ДатаТранспорта < МаксДатаТранспорта Тогда
				Продолжить;
			КонецЕсли;
			
			Если Основание <> Неопределено И НайденнаяСтрока.Основание <> Основание Тогда
				Продолжить;
			КонецЕсли;
			
			МаксДатаТранспорта = НайденнаяСтрока.ДатаТранспорта;
			
			ТекущаяСтрока = ТаблицаСтрок.Добавить();
			ТекущаяСтрока.Строка = НайденнаяСтрока;
			ТекущаяСтрока.Дата = НайденнаяСтрока.ДатаТранспорта;
			
		КонецЦикла;
		
	КонецЦикла; 
	
	Если ТаблицаСтрок.Количество() > 0 Тогда
		Если ВозвращатьВсеНайденные Тогда
			Результат = ТаблицаСтрок.ВыгрузитьКолонку("Строка");
		Иначе
			ТаблицаСтрок.Сортировать("Дата Убыв");
			Результат = ТаблицаСтрок[0].Строка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Выполняет отправку подготовленных транзакций (транспортных контейнеров) 
// на сервер обмена с банками.
// 
// Параметры:
//	Транзакции - Массив - Содержит элементы типа СправочникСсылка.ТранзакцииОбменаСБанками.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* Выполнено - Булево - Признак успешного выполнения.
//		* ОписаниеОшибки - Строка - Текст ошибки.
//		* КоличествоОтправленных - Число - количество отправленных транзакций.
//
Функция ОтправитьТранзакцииНаСервер(Сервис, Транзакции, ПараметрыПрогрессаВыполнения = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("НеОтправленныеТранзакции", Новый Массив);
	Результат.Вставить("ОшибкиОтправкиТранзакций", Новый Соответствие);
	
	Если Транзакции.Количество() = 0 Тогда
		Результат.Выполнено = Истина;
		Возврат Результат;
	КонецЕсли;
	
	// Заполняем массив неотправленных транзакций.
	Для каждого Транзакция Из Транзакции Цикл
		Результат.НеОтправленныеТранзакции.Добавить(Транзакция);
	КонецЦикла;
	
	РезультатАвторизации = АвторизацияНаСервере(Сервис);
	Если НЕ РезультатАвторизации.Выполнено Тогда
		
		Результат.ОписаниеОшибки = РезультатАвторизации.ОписаниеОшибки;
		Возврат Результат;

	КонецЕсли;
	
	Токен = РезультатАвторизации.Токен;
	
	// Инициализируем вывод прогресса.
	Если ПараметрыПрогрессаВыполнения <> Неопределено Тогда
		КоличествоДействийПрогресса = Транзакции.Количество();
		ВыполненоДействийПрогресса = 0;
		ДлительныеОперации.СообщитьПрогресс(1, НСтр("ru = 'Отправка транзакций...'"), ПараметрыПрогрессаВыполнения);
		ШаблонСообщенияПрогресса = НСтр("ru = 'Отправка в %1...'");
	КонецЕсли;
	
	Ошибки = Новый Массив;
	Результат.НеОтправленныеТранзакции = Новый Массив;
	
	Для каждого Транзакция Из Транзакции Цикл
		
		БанкНаименование = Транзакция.Банк.Наименование;
		Если ПараметрыПрогрессаВыполнения <> Неопределено Тогда
			ДлительныеОперации.СообщитьПрогресс(ВыполненоДействийПрогресса / КоличествоДействийПрогресса * 100,
				СтрШаблон(ШаблонСообщенияПрогресса, БанкНаименование),
				ПараметрыПрогрессаВыполнения);
			ВыполненоДействийПрогресса = ВыполненоДействийПрогресса + 1;
		КонецЕсли;
	
		Если Транзакция.Пустая() Тогда
			ОписаниеОшибки = НСтр("ru='Передана пустая ссылка на транзакцию.'");
			Ошибки.Добавить(ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		РезультатОтправки = ОтправитьТранзакцию(Токен, Транзакция);
		Если Не РезультатОтправки.Выполнено Тогда
			Ошибки.Добавить(РезультатОтправки.ОписаниеОшибки);
			Результат.НеОтправленныеТранзакции.Добавить(Транзакция);
			Результат.ОшибкиОтправкиТранзакций.Вставить(Транзакция, РезультатОтправки.ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		// Вызов предопределяемого метода ПриОтправкеТранзакции.
		РезультатПриОтправкеТранзакции = Новый Структура("Выполнено, ОписаниеОшибки");
		ЗаполнитьЗначенияСвойств(РезультатПриОтправкеТранзакции, РезультатОтправки);
		
		Попытка
			ПриОтправкеТранзакции(Транзакция, РезультатПриОтправкеТранзакции);
		Исключение

			РезультатПриОтправкеТранзакции.Выполнено = Ложь;
			ОписаниеОшибки = НСтр("ru='Ошибка вызова предопределенного метода. Описание ошибки:
				|%1'");
			РезультатПриОтправкеТранзакции.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ОписаниеОшибки());
			
		КонецПопытки;
		
		Если НЕ РезультатПриОтправкеТранзакции.Выполнено Тогда
			Ошибки.Добавить(РезультатПриОтправкеТранзакции.ОписаниеОшибки);
			Результат.НеОтправленныеТранзакции.Добавить(Транзакция);
			Результат.ОшибкиОтправкиТранзакций.Вставить(Транзакция, РезультатПриОтправкеТранзакции.ОписаниеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ошибки.Количество() > 0 Тогда
		
		Результат.ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки);
		Возврат Результат;

	КонецЕсли;
	
	Если Результат.НеОтправленныеТранзакции.Количество() <> Транзакции.Количество() Тогда
		// Если была отправлена хоть одна транзакция, определяем необходимость запуска рег.задания для получения ответов от банков.
		ОпределитьНеобходимостьРегЗаданияОбменаСБанками(Сервис, Истина);
	КонецЕсли;
	
	Если ПараметрыПрогрессаВыполнения <> Неопределено Тогда
		ДлительныеОперации.СообщитьПрогресс(100,
			НСтр("ru='Отправка завершена.'"),
			ПараметрыПрогрессаВыполнения);
		ВыполненоДействийПрогресса = ВыполненоДействийПрогресса + 1;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

Процедура УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		Ключ,
		Запрос,
		ВыражениеУсловия,
		ПреобразоватьЗначениеВМассив = Истина,
		ИндексПакета = 0,
		ИндексОператора = 0)
		
	ЗначениеПараметра = Неопределено;
	Если Отбор <> Неопределено Тогда
		Отбор.Свойство(Ключ, ЗначениеПараметра);
	КонецЕсли;
	ПоВсем = (Отбор = Неопределено ИЛИ ЗначениеПараметра = Неопределено);
	
	Если ПоВсем Тогда
		Возврат;
	КонецЕсли;
		
	// Добавляем условие запроса.
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	ОтборЗапроса = Схема.ПакетЗапросов[ИндексПакета].Операторы[ИндексОператора].Отбор;
	ОтборЗапроса.Добавить(ВыражениеУсловия);
	
	ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
	Запрос.Текст = ТекстЗапроса;
	
	// Устанавливаем параметр запроса.
	Если ПреобразоватьЗначениеВМассив Тогда
		ЗначениеПараметра = ЗначениеВКоллекцию(ЗначениеПараметра);
	КонецЕсли;
	Запрос.УстановитьПараметр(Ключ, ЗначениеПараметра);
	
КонецПроцедуры

Функция ОрганизацияПредмета(Сервис, Предмет) Экспорт
	
	Сведения = УниверсальныйОбменСБанками.СведенияОПредмете(Сервис, Предмет, "Организация");
	
	Возврат Сведения.Организация;
	
КонецФункции

Процедура ДобавитьНаборФильтровПоТранзакцямИзОтбора(Отбор, Запрос, ВключаяПомеченныеНаУдаление = Ложь)
	
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Организация",
		Запрос,
		"ТранзакцииОбменаСБанками.Организация В (&Организация)");
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Банк",
		Запрос,
		"ТранзакцииОбменаСБанками.Банк В (&Банк)");
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Статус",
		Запрос,
		"ТранзакцииОбменаСБанками.Статус В (&Статус)");
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Документооборот",
		Запрос,
		"ТранзакцииОбменаСБанками.Документооборот В (&Документооборот)");
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"ТипТранзакции",
		Запрос,
		"ТранзакцииОбменаСБанками.ТипТранзакции В (&ТипТранзакции)");
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Основание",
		Запрос,
		"ТранзакцииОбменаСБанками.Основание В (&Основание)");
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Предмет",
		Запрос,
		"ТранзакцииОбменаСБанками.Документооборот.Предмет В (&Предмет)");
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Сервис",
		Запрос,
		"ТранзакцииОбменаСБанками.Документооборот.Сервис В (&Сервис)");
		
	Если ВключаяПомеченныеНаУдаление Тогда
		Пометки = Новый Массив;
		Пометки.Добавить(Ложь);
		Пометки.Добавить(Истина);
		Отбор.Вставить("ПометкаУдаления", Пометки);
	Иначе
		Отбор.Вставить("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"ПометкаУдаления",
		Запрос,
		"ТранзакцииОбменаСБанками.Документооборот.ПометкаУдаления В (&ПометкаУдаления)");
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"ПометкаУдаления",
		Запрос,
		"ТранзакцииОбменаСБанками.ПометкаУдаления В (&ПометкаУдаления)");
	
КонецПроцедуры

Функция ПротоколОбработкиОтчетностиБанком(ПредметИлиТранзакция, ТипыДокументовПротокола, ТипыТранзакцийПротокола = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Транзакция", Неопределено);
	Результат.Вставить("ТипТранзакции", Неопределено);
	Результат.Вставить("Документооборот", Неопределено);
	Результат.Вставить("Предмет", Неопределено);
	Результат.Вставить("ДанныеПротокола", Неопределено);
	Результат.Вставить("ТекстПротокола", "");
	Результат.Вставить("ДанныеПодписи", Неопределено);
	Результат.Вставить("Организация", Неопределено);
	Результат.Вставить("Банк", Неопределено);
	Результат.Вставить("ДанныеНеРасшифрованы", Ложь);
	
	Если ТипЗнч(ПредметИлиТранзакция) = Тип("СправочникСсылка.ТранзакцииОбменаСБанками") Тогда
		ПоследняяТранзакция = ПредметИлиТранзакция;
	Иначе
		Если ТипыТранзакцийПротокола = Неопределено Тогда
			ВызватьИсключение НСтр("ru='Не определен тип транзакции протокола.'");
		КонецЕсли;
		// Ищем последнюю транзакцию по отчету.
		Документооборот = ПоследнийДокументооборотПоПредмету(ПредметИлиТранзакция);
		Отбор = Новый Структура("Статус, ТипТранзакции, Документоооборот",
			Перечисления.СтатусыТранзакцийОбменаСБанками.Получена,
			ТипыТранзакцийПротокола,
			Документооборот);
		Транзакции = УниверсальныйОбменСБанками.ТранзакцииПоПредмету(ПредметИлиТранзакция, Отбор);
		Если Транзакции.Количество() = 0 Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Не обнаружено ответных транзакций по отчету.'");
			Возврат Результат;
		КонецЕсли;
		ПоследняяТранзакция = Транзакции[0];
	КонецЕсли;
	
	ТипТранзакции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоследняяТранзакция, "ТипТранзакции");
	
	Результат.Транзакция = ПоследняяТранзакция;
	Результат.ТипТранзакции = ТипТранзакции;
	
	Протокол = "";
	Подпись = Неопределено;
	ДанныеПротокола = Неопределено;
	ПротоколНайден = Ложь;
	ИмяФайлаПротокола = "";
	
	ПараметрыРезультата = Новый Структура("Данные", Истина);
	ФайлыТранзакции = УниверсальныйОбменСБанками.ПолучитьВложенияТранзакции(ПоследняяТранзакция, ПараметрыРезультата);
	
	Если ФайлыТранзакции.Количество() = 0 Тогда
		
		Результат.ДанныеНеРасшифрованы = Истина;
		Результат.ОписаниеОшибки = НСтр("ru='Данные транзакции не расшифрованы.'");
		Возврат Результат;
		
	КонецЕсли;
	
	Для каждого Документ Из ФайлыТранзакции Цикл
		
		// Ищем файл протокола.
		Если ТипыДокументовПротокола.Найти(Документ.ТипДокумента) <> Неопределено  Тогда
			Данные = Документ.Данные.Получить();
			Чтение = Новый ЧтениеДанных(Данные, КодировкаТекста.ANSI);
			Протокол = Чтение.ПрочитатьСимволы();
			ИмяФайлаПротокола = Документ.ИсходноеИмяФайла;
			ПротоколНайден = Истина;
			ДанныеПротокола = Данные;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПротоколНайден Тогда
		
		// Ищем данные подписи протокола банком.
		ИмяФайлаПодписи = ИмяФайлаПодписиПрисоединенныеФайлы(ИмяФайлаПротокола);
		Для каждого Документ Из ФайлыТранзакции Цикл
			Если Документ.ИсходноеИмяФайла = ИмяФайлаПодписи Тогда
				Данные = Документ.Данные.Получить();
				Подпись = Данные;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ПротоколНайден Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru='В данных транзакции не найдено протоколов.'");
		Возврат Результат;
		
	КонецЕсли;
	
	Документооборот = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоследняяТранзакция, "Документооборот");
	Результат.Документооборот = Документооборот;
	Результат.ДанныеПротокола = ДанныеПротокола;
	Результат.ТекстПротокола = Протокол;
	Результат.Выполнено = Истина;
	Результат.ДанныеПодписи = Подпись;
	Результат.Предмет = УниверсальныйОбменСБанками.ПредметТранзакции(ПоследняяТранзакция);
	ДанныеДокументооборота = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документооборот, "Банк, Организация");
	ЗаполнитьЗначенияСвойств(Результат, ДанныеДокументооборота);
	
	Возврат Результат;
	
КонецФункции

Функция ТранзакцияОшибки(Документооборот) Экспорт
	
	Результат = Неопределено;
	
	Отбор = Новый Структура("ТипТранзакции", Перечисления.ТипыТранзакцийОбменаСБанками.Ошибка);
	Транзакции = ТранзакцииПоДокументообороту(Документооборот, Отбор);
	Если Транзакции.Количество() > 0 Тогда
		Результат = Транзакции[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает транзакции указанного типа
// 
// Параметры:
//  Тип - ОпределяемыйТип.ТипыТранзакцийОбменаСБанками - тип транзакции для фильтра.
//  Отбор - Структура - структура с параметрами фильтрации.
// Возвращаемое значение:
//  Массив - Содержит СправочникСсылка.ТранзакцииОбменаСБанками.
//
Функция ТранзакцииПоТипу(Сервис, ТипТранзакции, Знач Отбор = Неопределено, ВключаяПомеченныеНаУдаление = Ложь) Экспорт
	
	Результат = Новый Массив;

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ТранзакцииОбменаСБанками.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ТранзакцииОбменаСБанками КАК ТранзакцииОбменаСБанками
	               |ГДЕ
	               |	ТранзакцииОбменаСБанками.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТранзакцииОбменаСБанками.Дата УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	Отбор.Вставить("ТипТранзакции", ТипТранзакции);
	Отбор.Вставить("Сервис", Сервис);
	
	ДобавитьНаборФильтровПоТранзакцямИзОтбора(Отбор, Запрос, ВключаяПомеченныеНаУдаление);
		
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;
	
КонецФункции

// Возвращает транзакции обмена с банками, которые связаны с переданным предметом.
//
// Параметры:
//  Предмет - ЛюбаяСсылка - Ссылка на предмет обмена.
//	Отбор - Структура - Описывает условия отбора (необязательный). Может содержать один или несколько ключей:
//		* Организация - СправочникСсылка.Организация, Массив - Ссылка или массив ссылок организаций.
//		* Банк - СправочникСсылка.БанкиУниверсальногоОбмена, Массив - Ссылка или массив ссылок банков.
//		* Статус - ПеречислениеСсылка.СтатусыТранзакций, Массив - Ссылка или массив ссылок статусов.
//		* Документооборот - СправочникСсылка.ДокументооборотыОбменаСБанками, Массив - Ссылка или массив ссылок документооборотов.
//		* ТипТранзакции - ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиXXX, Массив - Ссылка или массив ссылок типов транзакций.
//
// Возвращаемое значение:
//  Массив - Содержит СправочникСсылка.ТранзакцииОбменаСБанками.
//
Функция ТранзакцииПоПредмету(Предмет, Знач Отбор = Неопределено, ВключаяПомеченныеНаУдаление = Ложь) Экспорт

	Результат = Новый Массив;

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТранзакцииОбменаСБанками.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ТранзакцииОбменаСБанками КАК ТранзакцииОбменаСБанками
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТранзакцииОбменаСБанками.Дата УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	Отбор.Вставить("Предмет", Предмет);
	
	ДобавитьНаборФильтровПоТранзакцямИзОтбора(Отбор, Запрос, ВключаяПомеченныеНаУдаление);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;

КонецФункции

// Возвращает транзакции указанного документооборота, отсортированные по убыванию Даты.
// 
// Параметры:
//  Документооборот - СправочникСсылка.ДокументооборотыОбменаСБанками - Ссылка на документооборот.
// Возвращаемое значение:
//  Массив - Содержит СправочникСсылка.ТранзакцииОбменаСБанками.
//
Функция ТранзакцииПоДокументообороту(Документооборот, Знач Отбор = Неопределено, ВключаяПомеченныеНаУдаление = Ложь) Экспорт
	
	Результат = Новый Массив;

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ТранзакцииОбменаСБанками.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ТранзакцииОбменаСБанками КАК ТранзакцииОбменаСБанками
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТранзакцииОбменаСБанками.Дата УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	Отбор.Вставить("Документооборот", Документооборот);
	
	ДобавитьНаборФильтровПоТранзакцямИзОтбора(Отбор, Запрос, ВключаяПомеченныеНаУдаление);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;
	
КонецФункции

// Возвращает документообороты обмена с банками, которые связаны с переданным предметом.
//
// Параметры:
//  Предмет - ЛюбаяСсылка - Ссылка на предмет обмена.
//	Отбор - Структура - Описывает условия отбора (необязательный). Может содержать один или несколько ключей:
//		* Организация - СправочникСсылка.Организация, Массив - Ссылка или массив ссылок организаций.
//		* Банк - СправочникСсылка.БанкиУниверсальногоОбмена, Массив - Ссылка или массив ссылок банков.
//
// Возвращаемое значение:
//  Массив - Содержит СправочникСсылка.ДокументооборотыОбменаСБанками.
//
Функция ДокументооборотыПоПредмету(Предмет, Знач Отбор = Неопределено, ВключаяПомеченныеНаУдаление = Ложь) Экспорт

	Результат = Новый Массив;

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ТранзакцииОбменаСБанками.Документооборот.Ссылка КАК Ссылка,
	               |	ТранзакцииОбменаСБанками.Документооборот.ДатаСоздания КАК ДокументооборотДатаСоздания
	               |ИЗ
	               |	Справочник.ТранзакцииОбменаСБанками КАК ТранзакцииОбменаСБанками
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТранзакцииОбменаСБанками.Документооборот.ДатаСоздания УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	Отбор.Вставить("Предмет", Предмет);
	
	ДобавитьНаборФильтровПоТранзакцямИзОтбора(Отбор, Запрос, ВключаяПомеченныеНаУдаление);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;

КонецФункции

Функция ПоследнийДокументооборотПоПредмету(Предмет, Знач Отбор = Неопределено, ВключаяПомеченныеНаУдаление = Ложь) Экспорт
	
	Документообороты = ДокументооборотыПоПредмету(Предмет, Отбор, ВключаяПомеченныеНаУдаление);
	Если Документообороты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Документообороты[0];
	
КонецФункции

// Возвращает таблицу значений со свойствами переданных транзакций.
//
// Параметры:
//  Транзакции - Массив - Содержит ссылки на транзакции.
//  Сервис     - Перечисление.СервисыОбменаСБанками - сервис для фильтрации запроса к регистру статусов.
// Возвращаемое значение:
//  ТаблицаЗначений - См. переменную Результат.
//
Функция РеквизитыТранзакций(Транзакции, Сервис = Неопределено) Экспорт

	ТипДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Транзакция",			Новый ОписаниеТипов("СправочникСсылка.ТранзакцииОбменаСБанками"));
	Результат.Колонки.Добавить("Идентификатор",			Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Организация",			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("Сервис",				Новый ОписаниеТипов("ПеречислениеСсылка.СервисыОбменаСБанками"));
	Результат.Колонки.Добавить("Банк",					Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена"));
	Результат.Колонки.Добавить("Документооборот",		Новый ОписаниеТипов("СправочникСсылка.ДокументооборотыОбменаСБанками"));
	Результат.Колонки.Добавить("Основание", 			Новый ОписаниеТипов("СправочникСсылка.ТранзакцииОбменаСБанками"));
	Результат.Колонки.Добавить("ТипТранзакции", 		Метаданные.ОпределяемыеТипы.ТипыТранзакцийОбменаСБанками.Тип);
	Результат.Колонки.Добавить("Предмет", 				Метаданные.ОпределяемыеТипы.ПредметОбменаСБанками.Тип);
	Результат.Колонки.Добавить("Дата",					ТипДата);
	Результат.Колонки.Добавить("ДатаТранспорта",		ТипДата);
	Результат.Колонки.Добавить("Статус",				Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыТранзакцийОбменаСБанками"));
	Результат.Колонки.Добавить("ТребуетРасшифровки",
		Новый ОписаниеТипов("Булево")); // Истина, если транзакция еще не была расшифрована.
	Результат.Колонки.Добавить("ТребуетПроверкиПодписи",
		Новый ОписаниеТипов("Булево")); // Истина, если для файлов транспортного контейнера не проверялась подпись.
	Результат.Колонки.Добавить("ИдентификаторДокументооборота", Новый ОписаниеТипов("Строка"));
	
	СтатусыКриптографии = ПолучитьКриптографическиеСтатусыТранзакций(Сервис, Транзакции);
	
	Для каждого Транзакция Из Транзакции Цикл
		СтрокаДанныхТранзакции = Результат.Добавить();
		СтрокаДанныхТранзакции.Транзакция = Транзакция;
		ЗаполнитьЗначенияСвойств(СтрокаДанныхТранзакции, Транзакция);
		СтрокаСтатусов = СтатусыКриптографии.Найти(Транзакция, "Транзакция");
		ДанныеДокументооборота =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Транзакция.Документооборот, "Сервис, Предмет, Идентификатор");
		СтрокаДанныхТранзакции.Сервис = ДанныеДокументооборота.Сервис;
		СтрокаДанныхТранзакции.Предмет = ДанныеДокументооборота.Предмет;
		СтрокаДанныхТранзакции.ИдентификаторДокументооборота = ДанныеДокументооборота.Идентификатор;
		Если СтрокаСтатусов <> Неопределено Тогда
			СтрокаДанныхТранзакции.ТребуетРасшифровки = СтрокаСтатусов.ТребуетРасшифровки;
			СтрокаДанныхТранзакции.ТребуетПроверкиПодписи = СтрокаСтатусов.ТребуетПроверкиПодписи;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Возвращает свойства указанной транзакции.
//
// Параметры:
//	Транзакция - СправочникСсылка.ТранзакцииОбменаСБанками - Ссылка на транзакцию.
//
// Возвращаемое значение:
//	Структура - Содержит ключи, одноименные колонка из результата функции РеквизитыТранзакций().
//
Функция РеквизитыТранзакции(Транзакция) Экспорт

	Если Транзакция = Неопределено ИЛИ Транзакция.Пустая() Тогда
		ВызватьИсключение "Передана пустая ссылка на транзакцию.";
	КонецЕсли;
	
	СведенияОТранзакции = РеквизитыТранзакций(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Транзакция));

	// Создадим структуру, ключи которой совпадают с колонками таблицы.
	Результат = ПустаяСтруктураПоТаблицеЗначений(СведенияОТранзакции);
	
	СтрокаТаблицы = СведенияОТранзакции.Найти(Транзакция, "Транзакция");
	Если СтрокаТаблицы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, СтрокаТаблицы);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает свойства указанных документоооборотов.
//
// Параметры:
//  Документообороты - Массив - Содержит ссылки на справочник ДокументооборотыОбменаСБанками.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. переменную Результат
//
Функция РеквизитыДокументооборотов(Документообороты) Экспорт

	ТипДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Документооборот",               Новый ОписаниеТипов("СправочникСсылка.ДокументооборотыОбменаСБанками"));
	Результат.Колонки.Добавить("ТипДокументооборота",           Метаданные.ОпределяемыеТипы.ТипыДокументовОбменаСБанками.Тип);
	Результат.Колонки.Добавить("Идентификатор",                 Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Организация",                   Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("Банк",                          Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена"));
	Результат.Колонки.Добавить("Сервис",                        Новый ОписаниеТипов("ПеречислениеСсылка.СервисыОбменаСБанками"));
	Результат.Колонки.Добавить("Предмет",                       Метаданные.ОпределяемыеТипы.ПредметОбменаСБанками.Тип);
	Результат.Колонки.Добавить("ДатаСоздания",                  ТипДата);
	Результат.Колонки.Добавить("ДатаПоследнейТранзакции",       ТипДата);
	Результат.Колонки.Добавить("ДатаЗакрытия",                  ТипДата);
	Результат.Колонки.Добавить("Завершен",                      Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ОжидаетсяОтвет",                Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Наименование",                  Новый ОписаниеТипов("Строка"));

	Для каждого Документооборот Из Документообороты Цикл
		ДанныеДокументооборота = Результат.Добавить();
		ДанныеДокументооборота.Документооборот = Документооборот;
		ЗаполнитьЗначенияСвойств(ДанныеДокументооборота, Документооборот);
		ДанныеДокументооборота.Завершен = ДанныеДокументооборота.ДатаЗакрытия <> ПустаяДатаЗавершенияДокументооборота();
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Возвращает свойства указанного документооборота.
//
// Параметры:
//  Документооборот - СправочникСсылка.ДокументооборотыОбменаСБанками - Ссылка на документооборот.
//
// Возвращаемое значение:
//  Структура - Содержит ключи, одноименные колонкам результата функции РеквизитыДокументооборотов().
//
Функция РеквизитыДокументооборота(Документооборот) Экспорт

	СведенияОДокументообороте = РеквизитыДокументооборотов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документооборот));
	
	Результат = ПустаяСтруктураПоТаблицеЗначений(СведенияОДокументообороте);
	
	СтрокаТаблицы = СведенияОДокументообороте.Найти(Документооборот, "Документооборот");
	Если СтрокаТаблицы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, СтрокаТаблицы);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Помечает на удаление указанную транзакцию.
//
// Параметры:
//	Транзакция - СправочникСсылка.ТранзакцииОбменаСБанками - Ссылка на транзакцию.
//
Процедура ПометитьНаУдалениеТранзакции(Знач Транзакции) Экспорт
	
	Транзакции = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Транзакции);
	
	Для каждого Транзакция Из Транзакции Цикл
		Объект = Транзакция.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Помечает на удаление указанный документооборот.
//
// Параметры:
//  Документооборот - СправочникСсылка.ДокументооборотыОбменаСБанками - Ссылка на документооборот.
//
Процедура ПометитьНаУдалениеДокументооборот(Документооборот) Экспорт
	
	Объект = Документооборот.ПолучитьОбъект();
	Объект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

// Изменяет статус ожидания ответа от банка.
// 
// Параметры:
//  Документооборот - СправочникСсылка.ДокументооборотыОбменаСБанками - Ссылка на документооборот.
//
Функция УстановитьСтатусОжиданияОтветаОтБанка(Документооборот, ОжидаетсяОтвет) Экспорт

	ДокументооборотОбъект = Документооборот.ПолучитьОбъект();
	ДокументооборотОбъект.ОжидаетсяОтвет = ОжидаетсяОтвет;
	Попытка
		ДокументооборотОбъект.Записать();
	Исключение
		ЗаписатьСобытиеВЖурнал(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Устанавливает дату завершения документооборота и признак ожидания ответа от банка.
Функция ЗавершитьДокументооборот(Документооборот, ДатаЗавершения = Неопределено) Экспорт
	
	ДокументооборотОбъект = Документооборот.ПолучитьОбъект();
	
	ДокументооборотОбъект.ОжидаетсяОтвет = Ложь;
	
	Если ДатаЗавершения = Неопределено Тогда
		ДокументооборотОбъект.ДатаЗакрытия = ТекущаяДатаНаСервере();
	Иначе
		ДокументооборотОбъект.ДатаЗакрытия = ДатаЗавершения;
	КонецЕсли;
	
	Попытка
		ДокументооборотОбъект.Записать();
	Исключение
		ЗаписатьСобытиеВЖурнал(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Возвращает идентификаторы нерасшифрованных транзакций, поступивших в рамках указанного типа сервиса обмена.
//
// Параметры:
//  Сервис - ПеречислениеСсылка.СервисыОбменаСБанками - Тип сервиса обмена.
//  Организации - Массив, СправочникСсылка.Организации - Организация или массив организаций,
//		для которой требуется получить нерасшифрованные транзации.
//		Необязательный.
//  СписокТранзакций - Массив - транзакции, которые требуется проверить на необходимость расшифровки.
//		Необязательный.
// Возвращаемое значение:
//  Массив - Содержит ссылки на справочник ТранзакцииОбменаСБанками.
//
Функция ТранзакцииТребующиеРасшифровки(Сервисы = Неопределено, Организации = Неопределено, Транзакции = Неопределено) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СвойстваТранзакцийОбменаСБанками.Транзакция КАК Транзакция,
	               |	СвойстваТранзакцийОбменаСБанками.Организация КАК Организация,
	               |	СвойстваТранзакцийОбменаСБанками.Транзакция.ДатаТранспорта КАК ДатаТранспорта
	               |ИЗ
	               |	РегистрСведений.СвойстваТранзакцийОбменаСБанками КАК СвойстваТранзакцийОбменаСБанками
	               |ГДЕ
	               |	СвойстваТранзакцийОбменаСБанками.ТребуетРасшифровки = ИСТИНА
	               |	И СвойстваТранзакцийОбменаСБанками.Транзакция.ПометкаУдаления = ЛОЖЬ
	               |	И СвойстваТранзакцийОбменаСБанками.Транзакция.Документооборот.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СвойстваТранзакцийОбменаСБанками.Организация,
	               |	ДатаТранспорта";

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Отбор= Новый Структура;
	Отбор.Вставить("Сервисы", Сервисы);
	Отбор.Вставить("Организации", Организации);
	Отбор.Вставить("Транзакции", Транзакции);
	
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Сервисы",
		Запрос,
		"СвойстваТранзакцийОбменаСБанками.Транзакция.Документооборот.Сервис В (&Сервисы)");
		
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Организации",
		Запрос,
		"СвойстваТранзакцийОбменаСБанками.Организация В (&Организации)");
		
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Транзакции",
		Запрос,
		"СвойстваТранзакцийОбменаСБанками.Транзакция В (&Транзакции)");
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Транзакция");
	
КонецФункции

Функция ПрефиксИмяФайлаПодписиПрисоединенныеФайлы() Экспорт
	
	Возврат НСтр("ru='Подпись_'");
	
КонецФункции

Функция ПараметрыСоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами() Экспорт
	
	Результат = Новый Структура;
	
	ТипСервиса = Новый ОписаниеТипов("ПеречислениеСсылка.СервисыОбменаСБанками");
	ТипТранзакции = Новый ОписаниеТипов("СправочникСсылка.ТранзакцииОбменаСБанками");
	ТипОрганизации = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ТипТипаТранзакции = Метаданные.ОпределяемыеТипы.ТипыТранзакцийОбменаСБанками.Тип;
	ТипПредмета = Метаданные.ОпределяемыеТипы.ПредметОбменаСБанками.Тип;
	
	// Сервис обмена с банками.
	Результат.Вставить("Сервис", ТипСервиса.ПривестиЗначение(Неопределено));
	// Предмет обмена с банками.
	Результат.Вставить("Предмет", ТипПредмета.ПривестиЗначение(Неопределено));
	// Строковый идентификатор данных во временном хранилище данных транзакции.
	Результат.Вставить("ИдентификаторВоВременномХранилище", "");
	// Соответствие документооборотов получателям или Неопределено.
	// Если передано Неопределено создаются новые документообороты для каждого получателеля.
	Результат.Вставить("ДокументооборотыПолучателей", Неопределено);
	// Тип документооборота обмена с банками.
	Результат.Вставить("ТипДокументооборота", Неопределено);
	// Тип транзакции обмена с банками.
	Результат.Вставить("ТипТранзакции", ТипТипаТранзакции.ПривестиЗначение(Неопределено));
	// Входящая транзакция, в ответ на которую создается новая транзакция.
	Результат.Вставить("Основание", ТипТранзакции.ПривестиЗначение(Неопределено));
	// Отпечаток сертификата, которым подписаны данные.
	Результат.Вставить("ОтпечатокСертификатаПодписи", "");
	// Организация абонент.
	Результат.Вставить("Организация", ТипОрганизации.ПривестиЗначение(Неопределено));
	// Если ПараметрыПрогрессаВыполнения определен он используется для вывода прогресса выполнения.
	Результат.Вставить("ПараметрыПрогрессаВыполнения", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// создает транзакции из данных регистра сведений ЖурналОперацийСФайламиОбменаСБанками.
//
// Параметры:
//  Параметры - Структура - параметры создания транзакций см. функцию ПараметрыСоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами.
//
// Возвращаемое значение:
//  Структура - результат выполнения функции
//		* Выполнено - признак успешного выполнения операции.
//		* Транзакции - Массив - созданные транзакции.
//		* ОписаниеОшибки - Строка - описание ошибки при создании транзакций, заполняется, если в поле Выполнено возвращается Ложь.
Функция СоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами(Параметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Транзакции", Новый Массив);
	Результат.Вставить("ОписаниеОшибки", "");
	
	// авторизуемся на сервере обмена с банками.
	РезультатАвторизации = АвторизацияНаСервере(Параметры.Сервис);
	Если НЕ РезультатАвторизации.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатАвторизации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	Токен = РезультатАвторизации.Токен;
	
	ИдентификаторВоВременномХранилище = Параметры.ИдентификаторВоВременномХранилище;
	Сервис = Параметры.Сервис;
	ТипДокументооборота = Параметры.ТипДокументооборота;
	ТипТранзакции = Параметры.ТипТранзакции;
	ДокументооборотыПолучателей = Параметры.ДокументооборотыПолучателей;
	Организация = Параметры.Организация;
	ОтпечатокСертификатаПодписи = Параметры.ОтпечатокСертификатаПодписи;
	Основание = Параметры.Основание;
	Предмет = Параметры.Предмет;
	ПараметрыПрогрессаВыполнения = Параметры.ПараметрыПрогрессаВыполнения;
	ИмяСобытия = НСтр("ru = 'Создание архива транзакции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ФормироватьОтветноеСообщениеБанка = Ложь;
	Если Параметры.Свойство("ФормироватьОтветноеСообщениеБанка", ФормироватьОтветноеСообщениеБанка) Тогда
		ТокенБанка = Параметры.ТокенБанка;
	Иначе
		ФормироватьОтветноеСообщениеБанка = Ложь;
	КонецЕсли;
	
	// Проверка заполнения типа документооборота.
	Если НЕ ЗначениеЗаполнено(ТипДокументооборота) Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не определен тип документооборота.'");
		Возврат Результат;
	КонецЕсли;
	
	// Проверка заполнения типа транзакции.
	Если НЕ ЗначениеЗаполнено(ТипТранзакции) Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не определен тип транзакции.'");
		Возврат Результат;
	КонецЕсли;
	
	КаталогВременныхФайлов = СоздатьВременныйКаталог();
	
	// Получаем вложения с данными из хранилища.
	ПолучитьИсходныеДанные = Ложь;
	ПолучитьРезультаты = Истина;
	ПолучитьПодписи = Истина;
	Вложения = ВременныеДанныеТранзакции(ИдентификаторВоВременномХранилище, , ПолучитьИсходныеДанные, ПолучитьРезультаты, ПолучитьПодписи);
	Если Вложения.Количество() = 0 Тогда
		ОписаниеОшибки = НСтр("ru='Отсутствуют вложения транзакции с идентификатором %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ИдентификаторВоВременномХранилище);
		Возврат Результат;
	КонецЕсли;
	Вложения.Колонки.Добавить("ИмяФайлаДанныхВАрхиве", Новый ОписаниеТипов("Строка"));
	Вложения.Колонки.Добавить("ИмяФайлаПодписиВАрхиве", Новый ОписаниеТипов("Строка"));
	Вложения.Колонки.Добавить("ИдентификаторДокумента", Новый ОписаниеТипов("Строка"));
	
	// Переменные для вывода прогресса.
	КоличествоДействийПрогресса = 0;
	ВыполненоДействийПрогресса = 1;
	
	// Формируем список получателей.
	Получатели = Новый Массив;
	Для каждого Вложение Из Вложения Цикл
		ПолучателиВложения = Вложение.БанкиПолучатели;
		КоличествоДействийПрогресса = КоличествоДействийПрогресса + ПолучателиВложения.Количество();
		Для каждого Получатель Из ПолучателиВложения Цикл
			Если Получатели.Найти(Получатель) = Неопределено Тогда
				Получатели.Добавить(Получатель);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Учитываем этапы сохранения документооборотов в БД.
	КоличествоДействийПрогресса = КоличествоДействийПрогресса + Получатели.Количество();
	
	// Инициализируем вывод прогресса.
	Если ПараметрыПрогрессаВыполнения <> Неопределено Тогда
		ДлительныеОперации.СообщитьПрогресс(1, НСтр("ru = 'Формирование транзакций...'"), ПараметрыПрогрессаВыполнения);
		ШаблонСообщенияПрогрессаВложение = НСтр("ru = 'Обрабатывается вложение %1 для %2...'");
		ШаблонСообщенияПрогрессаСохранениеБД = НСтр("ru = 'Сохраняем данные в базе данных для %1...'");
	КонецЕсли;
	
	Если ДокументооборотыПолучателей = Неопределено Тогда
		Если Организация = Неопределено ИЛИ Организация.Пустая() Тогда
			ОписаниеОшибки = НСтр("ru='Организация не определена.'");
			ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Получатель);
			Результат.ОписаниеОшибки = ОписаниеОшибки;
			Возврат Результат;
		КонецЕсли;
		Реквизиты = РеквизитыОрганизации(Организация, "Наименование,ИНН,КПП");
		НаименованиеОрганизации = Реквизиты.Наименование;
		ИННОрганизации = Реквизиты.ИНН;
		КППОрганизации = Реквизиты.КПП;
	КонецЕсли;
	
	// Создаем контейнер для каждого получателя.
	Для каждого Получатель Из Получатели Цикл
		
		ПолноеИмяФайлаКонтейнера = ПолучитьИмяВременногоФайла();
		
		// Архив пакета создается без сжатия.
		Архиватор = Новый ЗаписьZipФайла(ПолноеИмяФайлаКонтейнера, , , МетодСжатияZIP.Копирование);
		
#Область ПолучениеИД_ДокументооборотаИТранзакцииНаСервере

		Если ДокументооборотыПолучателей = Неопределено Тогда
			// Для нового документооборота получаем его идентификатор на сервере.
			РезультатСозданияДокументооборота = СоздатьДокументооборотНаСервере(Токен, Сервис, Получатель, ИННОрганизации, КППОрганизации);
			Если НЕ РезультатСозданияДокументооборота.Выполнено Тогда
				ОписаниеОшибки = НСтр("ru='Ошибка при создании документооборота на сервере:
										|%1'");
				ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, РезультатСозданияДокументооборота.ОписаниеОшибки);
				Результат.ОписаниеОшибки = ОписаниеОшибки;
				Возврат Результат;
			КонецЕсли;
			ИдентификаторДокументооборота = РезультатСозданияДокументооборота.Идентификатор;
			Документооборот = Неопределено;
		Иначе
			// формируется транзация в рамках существующего документооборота
			Документооборот = ДокументооборотыПолучателей.Получить(Получатель);
			Если Документооборот = Неопределено Тогда
				ОписаниеОшибки = НСтр("ru='Документооборот для получателя %1 не определен.'");
				ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Получатель);
				Результат.ОписаниеОшибки = ОписаниеОшибки;
				Возврат Результат;
			КонецЕсли;
			ИдентификаторДокументооборота = Документооборот.Идентификатор;
			Сервис = Документооборот.Сервис;
			Предмет = Документооборот.Предмет;
			Организация = Документооборот.Организация;
			// Получаем реквизиты организации.
			Реквизиты = РеквизитыОрганизации(Организация, "Наименование,ИНН,КПП");
			НаименованиеОрганизации = Реквизиты.Наименование;
			ИННОрганизации = Реквизиты.ИНН;
			КППОрганизации = Реквизиты.КПП;
		КонецЕсли;
		
		// Получаем идентификатор транзакции с сервера.
		Если ФормироватьОтветноеСообщениеБанка Тогда
			РезультатСозданияТранзакции = СоздатьТранзакциюБанкаНаСервере(
				ТокенБанка,
				Сервис,
				ТипТранзакции,
				ИдентификаторДокументооборота);
		Иначе
			РезультатСозданияТранзакции = СоздатьТранзакциюНаСервере(Токен, Сервис, ТипТранзакции, ИдентификаторДокументооборота);
		КонецЕсли;
		
		Если НЕ РезультатСозданияТранзакции.Выполнено Тогда
			
			ОписаниеОшибки = НСтр("ru='Ошибка при создании транзакции на сервере:
									|%1'");
			ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, РезультатСозданияТранзакции.ОписаниеОшибки);
			ЗаписатьСобытиеВЖурнал(ОписаниеОшибки, ИмяСобытия);
			Результат.ОписаниеОшибки = ОписаниеОшибки;
			Возврат Результат;

		КонецЕсли;
		ИдентификаторТранзакции = РезультатСозданияТранзакции.Идентификатор;
		
#КонецОбласти
		
#Область ОбработкаВложений

		ВложенияКонтейнера = Вложения.СкопироватьКолонки();
		ВложенияКонтейнера.Колонки.Добавить("Получатели", Новый ОписаниеТипов("Массив"));
		НомерВложения = 0;
		Для каждого Вложение Из Вложения Цикл
			
			ПолучателиВложения = Вложение.БанкиПолучатели;
			Если ПолучателиВложения.Найти(Получатель) = Неопределено Тогда
				// вложение не предназначено для текущего получателя.
				Продолжить;
			Иначе
				ВложениеКонтейнера = ВложенияКонтейнера.Добавить();
				ЗаполнитьЗначенияСвойств(ВложениеКонтейнера, Вложение);
				ВложениеКонтейнера.Получатели.Добавить(Получатель);
			КонецЕсли;
			
			Если ПараметрыПрогрессаВыполнения <> Неопределено Тогда
				ДлительныеОперации.СообщитьПрогресс(ВыполненоДействийПрогресса / КоличествоДействийПрогресса * 100,
					СтрШаблон(ШаблонСообщенияПрогрессаВложение, НомерВложения, Получатель.Наименование),
					ПараметрыПрогрессаВыполнения);
				ВыполненоДействийПрогресса = ВыполненоДействийПрогресса + 1;
			КонецЕсли;
			
			НомерВложения = НомерВложения + 1;
			
			// Генерируем имя файла в архиве.
			ВложениеКонтейнера.ИдентификаторДокумента = СгенерироватьUUID();
			КороткоеИмяФайла = СгенерироватьИмяФайлаДокументаВСоставеПакета(ВложениеКонтейнера.ИдентификаторДокумента);
			ВложениеКонтейнера.ИмяФайлаДанныхВАрхиве = КороткоеИмяФайла;
			ПолноеИмяФайла = КаталогВременныхФайлов + КороткоеИмяФайла;
			
			// добавляем в архив результат применения операций к вложению.
			ДанныеВложения = ПолучитьРезультатОбработкиВложения(Вложение);
			Попытка
				ДанныеВложения.Записать(ПолноеИмяФайла);
				Архиватор.Добавить(ПолноеИмяФайла);
			Исключение
				УдалитьФайлы(КаталогВременныхФайлов);
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьСобытиеВЖурнал(ИнформацияОбОшибке, ИмяСобытия);

				ОписаниеОшибки = УниверсальныйОбменСБанкамиКлиентСервер.
					ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание;
				ОписаниеОшибки = СтрШаблон(
					НСтр("ru = 'Произошла ошибка при добавлении данных в архив:
					      |%1.'"),
					ОписаниеОшибки);
				Результат.ОписаниеОшибки = ОписаниеОшибки;
				Возврат Результат;

			КонецПопытки;
			
			Если Вложение.Подписать Тогда
				// Добавляем подпись.
				ДанныеПодписи = Вложение.Подпись.Получить();
				КороткоеИмяФайла = СгенерироватьИмяФайлаДокументаВСоставеПакета(ВложениеКонтейнера.ИдентификаторДокумента, "sig");
				ВложениеКонтейнера.ИмяФайлаПодписиВАрхиве = КороткоеИмяФайла;
				ПолноеИмяФайла = КаталогВременныхФайлов + КороткоеИмяФайла;
				Попытка
					ДанныеПодписи.Записать(ПолноеИмяФайла);
					Архиватор.Добавить(ПолноеИмяФайла);
				Исключение
					УдалитьФайлы(КаталогВременныхФайлов);
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ЗаписатьСобытиеВЖурнал(ИнформацияОбОшибке, ИмяСобытия);
					
					ОписаниеОшибки = УниверсальныйОбменСБанкамиКлиентСервер.
						ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание;
					ОписаниеОшибки = СтрШаблон(
							НСтр("ru = 'Произошла ошибка при добавлении данных в архив:
							      |%1.'"),
							ОписаниеОшибки);
					Результат.ОписаниеОшибки = ОписаниеОшибки;
					Возврат Результат;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВложенияКонтейнера.Количество() = 0 Тогда
			
			ОписаниеОшибки = НСтр("ru='Нет файлов для помещения в контейнер.'");
			ЗаписатьСобытиеВЖурнал(ОписаниеОшибки, ИмяСобытия);

			Результат.ОписаниеОшибки = ОписаниеОшибки;
			Возврат Результат;

		КонецЕсли;
		
#КонецОбласти

		// Вывод прогресса.
		Если ПараметрыПрогрессаВыполнения <> Неопределено Тогда
			ДлительныеОперации.СообщитьПрогресс(ВыполненоДействийПрогресса / КоличествоДействийПрогресса * 100,
				СтрШаблон(ШаблонСообщенияПрогрессаСохранениеБД, Получатель.Наименование),
				ПараметрыПрогрессаВыполнения);
			ВыполненоДействийПрогресса = ВыполненоДействийПрогресса + 1;
		КонецЕсли;

#Область ФормированиеОписанияКонтейнера

		// формируем файл описания транзакции packageDescription.xml
		ПараметрыОписанияТранзакции = Новый Структура(
											"ИдентификаторДокументооборота,
											|ИдентификаторТранзакции,
											|Сервис,
											|ТипТранзакции,
											|ТипДокументооборота,
											|ИННОрганизации,
											|КППОрганизации,
											|НаименованиеОрганизации,
											|Получатели,
											|ФормироватьОтветноеСообщениеБанка");
		ПараметрыОписанияТранзакции.ИдентификаторДокументооборота = ИдентификаторДокументооборота;
		ПараметрыОписанияТранзакции.ИдентификаторТранзакции = ИдентификаторТранзакции;
		ПараметрыОписанияТранзакции.Сервис = Сервис;
		ПараметрыОписанияТранзакции.ТипТранзакции = ТипТранзакции;
		ПараметрыОписанияТранзакции.ТипДокументооборота = ТипДокументооборота;
		ПараметрыОписанияТранзакции.ИННОрганизации = ИННОрганизации;
		ПараметрыОписанияТранзакции.КППОрганизации = КППОрганизации;
		ПараметрыОписанияТранзакции.НаименованиеОрганизации = НаименованиеОрганизации;
		ПараметрыОписанияТранзакции.Получатели = Новый Массив;
		ПараметрыОписанияТранзакции.Получатели.Добавить(Получатель);
		ПараметрыОписанияТранзакции.ФормироватьОтветноеСообщениеБанка = ФормироватьОтветноеСообщениеБанка;
		
		ПолноеИмяФайлаОписанияВСоставеПакета = СоздатьФайлОписанияТранзакции(
			ВложенияКонтейнера,
			ПараметрыОписанияТранзакции,
			КаталогВременныхФайлов);
		Если ПустаяСтрока(ПолноеИмяФайлаОписанияВСоставеПакета) Тогда

			ОписаниеОшибки = НСтр("ru='Ошибка создания файла описания пакета.'");
			ЗаписатьСобытиеВЖурнал(ОписаниеОшибки, ИмяСобытия);

			Результат.ОписаниеОшибки = ОписаниеОшибки;
			Возврат Результат;

		КонецЕсли;
		
		Архиватор.Добавить(ПолноеИмяФайлаОписанияВСоставеПакета);
		
#КонецОбласти

		// Записываем контейнер в файл.
		Попытка
			Архиватор.Записать();
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписатьСобытиеВЖурнал(ИнформацияОбОшибке, ИмяСобытия);
			
			ОписаниеОшибки = УниверсальныйОбменСБанкамиКлиентСервер.
				ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание;
			Результат.ОписаниеОшибки = НСтр("ru='Ошибка записи файла контейнера:
											|%1'");
			Результат.ОписаниеОшибки = СтрШаблон(Результат.ОписаниеОшибки, ОписаниеОшибки);
			УдалитьФайлы(КаталогВременныхФайлов);
			Возврат Результат;
		КонецПопытки;
		
		ДанныеКонтейнера = Новый ДвоичныеДанные(ПолноеИмяФайлаКонтейнера);
		УдалитьФайлы(ПолноеИмяФайлаКонтейнера);
		УдалитьФайлы(КаталогВременныхФайлов);
		
#Область СозданиеОбъектовБД
		ИмяСобытия = НСтр("ru = 'Запись транзакции и документооборота'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СозданНовыйДокументооборот = Ложь;
		// формируем цикл обмена
		Если Документооборот = Неопределено Тогда
			СозданНовыйДокументооборот = Истина;
			Документооборот = Справочники.ДокументооборотыОбменаСБанками.СоздатьЭлемент();
			ДокументооборотСсылка = Справочники.ДокументооборотыОбменаСБанками.ПолучитьСсылку();
			Документооборот.УстановитьСсылкуНового(ДокументооборотСсылка);
			Документооборот.Сервис = Сервис;
			Документооборот.ТипДокументооборота = ТипДокументооборота;
			Документооборот.Организация = Организация;
			Документооборот.Идентификатор = ИдентификаторДокументооборота;
			Документооборот.ДатаПоследнейТранзакции = ТекущаяДатаСеанса();
			Документооборот.Предмет = Предмет;
			Документооборот.Банк = Получатель;
			Документооборот.ОжидаетсяОтвет = Истина;
		Иначе
			ДокументооборотСсылка = Документооборот.Ссылка;
			Документооборот = Документооборот.ПолучитьОбъект();
		КонецЕсли;
		
		Документооборот.ОтпечатокСертификата = ОтпечатокСертификатаПодписи;
		
		ТранзакцияОбъект = Справочники.ТранзакцииОбменаСБанками.СоздатьЭлемент();
		ТранзакцияСсылка = Справочники.ТранзакцииОбменаСБанками.ПолучитьСсылку();
		ТранзакцияОбъект.Дата = ТекущаяДатаСеанса();
		ТранзакцияОбъект.УстановитьСсылкуНового(ТранзакцияСсылка);
		ТранзакцияОбъект.Организация = Организация;
		ТранзакцияОбъект.Идентификатор = ИдентификаторТранзакции;
		ТранзакцияОбъект.Статус = Перечисления.СтатусыТранзакцийОбменаСБанками.Подготовлена;
		ТранзакцияОбъект.ТипТранзакции = ТипТранзакции;
		ТранзакцияОбъект.Документооборот = ДокументооборотСсылка;
		ТранзакцияОбъект.Основание = Основание;
		Если ПараметрыОписанияТранзакции.Получатели.Количество() > 1 Тогда
			ТранзакцияОбъект.НесколькоПолучателей = Истина;
		Иначе
			ТранзакцияОбъект.Банк = ПараметрыОписанияТранзакции.Получатели[0];
		КонецЕсли;
		
		Для каждого Получатель Из ПараметрыОписанияТранзакции.Получатели Цикл
			СтрокаПолучатель = ТранзакцияОбъект.Банки.Добавить();
			СтрокаПолучатель.Банк = Получатель;
		КонецЦикла;
		
		ИмяТранспортногоКонтейнераБД = ИмяТранспортногоКонтейнераПрисоединенныеФайлы(
			Сервис,
			ИННОрганизации,
			КППОрганизации,
			ИдентификаторДокументооборота,
			ИдентификаторТранзакции);
		
		РезультатСохранения = ПоместитьТранзакциюВБазуДанных(ТранзакцияСсылка,
			ДанныеКонтейнера,
			ИмяТранспортногоКонтейнераБД);
			
		Если НЕ РезультатСохранения Тогда
			
			ОписаниеОшибки = НСтр("ru='Ошибка при сохранении данных транспортного контейнера в базе данных'");
			ЗаписатьСобытиеВЖурнал(ОписаниеОшибки, ИмяСобытия);
			Результат.ОписаниеОшибки = ОписаниеОшибки;
			Возврат Результат;

		КонецЕсли;
		
		// сохраняем вложения в присоединенные файлы
		ПолучитьИсходныеДанные = Истина;
		ПолучитьРезультаты = Ложь;
		ПолучитьПодписи = Истина;
		ВложенияСИсходнымиДанными = ВременныеДанныеТранзакции(
			ИдентификаторВоВременномХранилище, , ПолучитьИсходныеДанные, ПолучитьРезультаты, ПолучитьПодписи);
		Для каждого Вложение Из ВложенияСИсходнымиДанными Цикл
			ИмяВложенияБД = Вложение.ИсходноеИмяФайла;
			ДанныеВложения = ПолучитьИсходныеДанныеВложения(Вложение);
			
			РезультатПомещения = ПоместитьСодержимоеТранзакцииВБазуДанных(ТранзакцияСсылка,
				Вложение.ТипДокумента,
				ДанныеВложения,
				ИмяВложенияБД);
			Если НЕ РезультатПомещения Тогда
				ОписаниеОшибки = НСтр("ru='Ошибка сохранения в базе данных файла %1.'");
				Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ИмяВложенияБД);
				Возврат Результат;
			КонецЕсли;
			
			// помещаем подписи
			Если Вложение.Подписать Тогда
				ИмяВложенияБД = ИмяФайлаПодписиПрисоединенныеФайлы(ИмяВложенияБД);
				РезультатПомещения = ПоместитьСодержимоеТранзакцииВБазуДанных(ТранзакцияСсылка,
					Перечисления.ТипыДокументовОбменаСБанками.ЭлектронноЦифроваяПодпись,
					Вложение.Подпись.Получить(),
					ИмяВложенияБД);
				Если НЕ РезультатПомещения Тогда
					ОписаниеОшибки = НСтр("ru='Ошибка сохранения в базе данных файла %1.'");
					Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ИмяВложенияБД);
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			// сохраняем объекты в БД
			ТранзакцияОбъект.Записать();
			Если СозданНовыйДокументооборот Тогда
				Документооборот.Записать();
			КонецЕсли;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписатьСобытиеВЖурнал(ИнформацияОбОшибке, ИмяСобытия);
			ОписаниеОшибки = УниверсальныйОбменСБанкамиКлиентСервер.
				ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание;
			Результат.ОписаниеОшибки = НСтр("ru='Ошибка записи в БД:
											|%1'");
			Результат.ОписаниеОшибки = СтрШаблон(Результат.ОписаниеОшибки, ОписаниеОшибки);
			Возврат Результат;
		КонецПопытки;
		
#КонецОбласти

		Результат.Транзакции.Добавить(ТранзакцияОбъект.Ссылка);
		
	КонецЦикла;
	
	Результат.Выполнено = Истина;
	
	УстановитьПометкуОЗавершении = Истина;
	ОчиститьХранилищаЗначенийЖурналаОперацийСФайлами(ИдентификаторВоВременномХранилище, УстановитьПометкуОЗавершении);
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив с типам документов для указанного сервиса и транзакции.
//
// Параметры:
//  Сервис - ПеречислениеСсылка.СервисыОбменаСБанками - Тип сервиса обмена.
//	ТипТранзакции - ПеречислениеСсылка.* - Значение перечисления из определямого типа ТипыТранзакцийОбменаСБанками.
//
// Возвращаемое значение:
//	Массив - Содержит значения перечисления из определяемого типа ТипыДокументовОбменаСБанками.
//
Функция ПолучитьСписокТиповДокументовТранзакции(Сервис, ТипТранзакции) Экспорт
	
	Результат = Новый Массив;
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис).ДеревоОписания;
	СтрокаТранзакции = Описание.Строки.Найти(ТипТранзакции, "ЗначениеПеречисления", Истина);
	Если СтрокаТранзакции = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Тип тразакции не обнаружен в описании.'");
	КонецЕсли;
	
	Для каждого СтрокаДокумента Из СтрокаТранзакции.Строки Цикл
		Результат.Добавить(СтрокаДокумента.ЗначениеПеречисления);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПредметТранзакции(Транзакция) Экспорт
	
	Документооборот = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Транзакция, "Документооборот");
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документооборот, "Предмет");
	Возврат Предмет;
	
КонецФункции

#КонецОбласти

#Область ЖурналОперацийСФайлами

// Возвращает информацию о временных файлах транзакции, сами данные и результат криптоопераций,
// при установке соответсвующих флагов.
// кроме данных регистра возвращаются адреса на содержимое регистра
Функция ВременныеДанныеТранзакции(Идентификатор,
		ОтборФайлов = Неопределено,
		ИсходныеДанные = Ложь,
		Результаты = Ложь,
		Подписи = Ложь,
		РезультатыПослеРасшифровки = Ложь) Экспорт
	
	// в качестве результата могут возвращаться зашифрованные данные, исходные данные
	// или сжатые исходные данные в зависимости от флагов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналОперацийСФайламиОбменаСБанками.Идентификатор КАК Идентификатор,
	|	ЖурналОперацийСФайламиОбменаСБанками.ИсходноеИмяФайла КАК ИсходноеИмяФайла,
	|	ЖурналОперацийСФайламиОбменаСБанками.Предмет КАК Предмет,
	|	ЖурналОперацийСФайламиОбменаСБанками.Организация КАК Организация,
	|	ЖурналОперацийСФайламиОбменаСБанками.ИдентификаторАрхива КАК ИдентификаторАрхива,
	|	ВЫБОР
	|		КОГДА &ИсходныеДанные
	|			ТОГДА ЖурналОперацийСФайламиОбменаСБанками.ИсходныеДанные
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИсходныеДанные,
	|	ВЫБОР
	|		КОГДА &ИсходныеДанные
	|			ТОГДА ЖурналОперацийСФайламиОбменаСБанками.СжатыеИсходныеДанные
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СжатыеИсходныеДанные,
	|	ЖурналОперацийСФайламиОбменаСБанками.ТипСодержимого КАК ТипСодержимого,
	|	ЖурналОперацийСФайламиОбменаСБанками.ТипДокумента КАК ТипДокумента,
	|	ЖурналОперацийСФайламиОбменаСБанками.Зашифровать КАК Зашифровать,
	|	ЖурналОперацийСФайламиОбменаСБанками.Подписать КАК Подписать,
	|	ЖурналОперацийСФайламиОбменаСБанками.Сжать КАК Сжать,
	|	ЖурналОперацийСФайламиОбменаСБанками.ИмяФайлаАрхива КАК ИмяФайлаАрхива,
	|	ЖурналОперацийСФайламиОбменаСБанками.БанкиПолучатели КАК БанкиПолучателиХранилище,
	|	ВЫБОР
	|		КОГДА &Результаты
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЖурналОперацийСФайламиОбменаСБанками.Сжать
	|							И НЕ ЖурналОперацийСФайламиОбменаСБанками.Зашифровать
	|						ТОГДА ЖурналОперацийСФайламиОбменаСБанками.ИсходныеДанные
	|					ИНАЧЕ ВЫБОР
	|							КОГДА НЕ ЖурналОперацийСФайламиОбменаСБанками.Зашифровать
	|									И НЕ &РезультатыПослеРасшифровки
	|								ТОГДА ЖурналОперацийСФайламиОбменаСБанками.СжатыеИсходныеДанные
	|							ИНАЧЕ ЖурналОперацийСФайламиОбменаСБанками.Результат
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Результат,
	|	ВЫБОР
	|		КОГДА &Результаты
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЖурналОперацийСФайламиОбменаСБанками.Сжать
	|							И НЕ ЖурналОперацийСФайламиОбменаСБанками.Зашифровать
	|						ТОГДА ""ИсходныеДанные""
	|					ИНАЧЕ ВЫБОР
	|							КОГДА НЕ ЖурналОперацийСФайламиОбменаСБанками.Зашифровать
	|								ТОГДА ""СжатыеИсходныеДанные""
	|							ИНАЧЕ ""Результат""
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК РезультатСтрока,
	|	ВЫБОР
	|		КОГДА &Подписи
	|			ТОГДА ЖурналОперацийСФайламиОбменаСБанками.Подпись
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подпись,
	|	ЖурналОперацийСФайламиОбменаСБанками.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
	|	ЖурналОперацийСФайламиОбменаСБанками.СвойстваКриптоСообщения КАК СвойстваКриптоСообщенияХранилище,
	|	ЖурналОперацийСФайламиОбменаСБанками.Сервис КАК Сервис,
	|	ЖурналОперацийСФайламиОбменаСБанками.ПодписьВыполнена КАК ПодписьВыполнена
	|ИЗ
	|	РегистрСведений.ЖурналОперацийСФайламиОбменаСБанками КАК ЖурналОперацийСФайламиОбменаСБанками
	|ГДЕ
	|	ЖурналОперацийСФайламиОбменаСБанками.Идентификатор = &Идентификатор
	|	И &ОтборФайлов";
	
	Если ОтборФайлов = Неопределено Тогда // нет отбора
		ТекстОтбора = "ИСТИНА";
	ИначеЕсли ТипЗнч(ОтборФайлов) = Тип("Строка") Тогда // по идентификатору архива
		ТекстОтбора = "ЖурналОперацийСФайламиОбменаСБанками.ИдентификаторАрхива = &ИдентификаторАрхива";
		Запрос.УстановитьПараметр("ИдентификаторАрхива", ОтборФайлов);
	Иначе // по списку файлов
		ТекстОтбора = "ЖурналОперацийСФайламиОбменаСБанками.ИсходноеИмяФайла В (&СписокФайлов)";
		Запрос.УстановитьПараметр("СписокФайлов", ОтборФайлов);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборФайлов", ТекстОтбора);
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.УстановитьПараметр("Результаты", Результаты);
	Запрос.УстановитьПараметр("РезультатыПослеРасшифровки", РезультатыПослеРасшифровки);
	Запрос.УстановитьПараметр("Подписи", Подписи);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("АдресИсходныеДанные");
	Результат.Колонки.Добавить("АдресСжатыеИсходныеДанные");
	Результат.Колонки.Добавить("АдресРезультат");
	Результат.Колонки.Добавить("АдресПодпись");
	Результат.Колонки.Добавить("БанкиПолучатели");
	Результат.Колонки.Добавить("СвойстваКриптоСообщения");
	Результат.Колонки.Добавить("ИдентификаторФайла");
	
	ИзмеренияРегистра = Новый Структура();
	Для каждого МетаданныеИзмерения Из Метаданные.РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками.Измерения Цикл
		ИзмеренияРегистра.Вставить(МетаданныеИзмерения.Имя);
	КонецЦикла;
	
	Для каждого Строка Из Результат Цикл
		// формируем адреса для данные регистра для передачи на клиента.
		ЗаполнитьЗначенияСвойств(ИзмеренияРегистра, Строка);
		КлючЗаписи = РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками.СоздатьКлючЗаписи(ИзмеренияРегистра);
		Если Не КлючЗаписи.Пустой() Тогда
			Строка.АдресИсходныеДанные = ПолучитьНавигационнуюСсылку(КлючЗаписи, "ИсходныеДанные");
			Строка.АдресСжатыеИсходныеДанные = ПолучитьНавигационнуюСсылку(КлючЗаписи, "СжатыеИсходныеДанные");
			Строка.АдресРезультат = ПолучитьНавигационнуюСсылку(КлючЗаписи, "Результат");
			Строка.АдресПодпись = ПолучитьНавигационнуюСсылку(КлючЗаписи, "Подпись");
		КонецЕсли;
		// Извлекаем из хранилища значений получателей.
		Строка.БанкиПолучатели = Строка.БанкиПолучателиХранилище.Получить();
		// Извлекаем cвойства криптоСообщения.
		Строка.СвойстваКриптоСообщения = Строка.СвойстваКриптоСообщенияХранилище.Получить();
		Строка.ИдентификаторФайла = СгенерироватьUUID();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру параметров для помещения во временные данные транзакции
// для подписания и последующей отправки.
// 
// Возвращаемое значение:
//	Структура 
//
Функция ПараметрыПомещенияВЖурналОперацийСФайлами() Экспорт

	Результат = Новый Структура;
	
	// Предмет обмена с банками.
	Результат.Вставить("Предмет", Метаданные.ОпределяемыеТипы.ПредметОбменаСБанками.Тип.ПривестиЗначение(Неопределено));
	
	// Уникальный идентификатор текущего сеанса отправки.
	// Все файлы, помещенные во временные данные
	Результат.Вставить("Идентификатор", "");
	
	// Имя файла, которое необходимо использовать при формировании транспортного контейнера.
	// Включает расширение, не включает путь.
	Результат.Вставить("ИсходноеИмяФайла", ""); 
	
	// Организация.
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	
	// ДвоичныеДанные - Данные файла в исходном виде (до сжатия и шифрования) или сжатые, зашифрованные данные в случае ответной транзакции.
	Результат.Вставить("ИсходныеДанные");

	// ДвоичныеДанные - Данные подписи файла (для проверки подписи из ответной транзакции или загруженного файла).
	Результат.Вставить("Подпись", Неопределено);

	// Тип содержимого ИсходныхДанных.
	Результат.Вставить("ТипСодержимого", Перечисления.ТипыСодержимогоФайловОбменаСБанками.ПустаяСсылка()); 
	// Тип документа в рамках сервиса обмена с банками.
	Результат.Вставить("ТипДокумента",   Метаданные.ОпределяемыеТипы.ТипыДокументовОбменаСБанками.Тип.ПривестиЗначение(Неопределено));
	
	// Массив СправочникСсылка.БанкиУниверсальногоОбмена.
	Результат.Вставить("БанкиПолучатели", Новый Массив());
	
	// Признак использования облачного сертификата ЭП.
	Результат.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", Ложь);
	
	// Флаги для определения действий, которые требуется выполнить с файлом.
	Результат.Вставить("Зашифровать", Ложь); 
	Результат.Вставить("Подписать",   Ложь);
	// Признак того, что нужно сжать файл сразу же при помещении в регистр и в дальнейшем действия производить над сжатым файлом.
	// Если заполнен параметр ИдентификаторАрхива, то при первичном помещении в регистр параметр Сжать игнорируется. Файл будет сжат далее за
	// счет помещения группы файлов в один архив.
	Результат.Вставить("Сжать", Ложь);
	
	// Идентификатор архива, к которому относится файл.
	// Используется в случае, если один отчет с точки зрения пользователя и банка технически состоит из нескольких файлов.
	// В этом случае все файлы в процессе подготовки к передаче будут упакованы в один zip-архив.
	// Если идентификатор архива не задан, то каждый файл считает самостоятельным и передается в транспортном контейнере отдельно.
	Результат.Вставить("ИдентификаторАрхива", "");
	// Имя файла zip-архива, который будет создан при сжатии или упаковке нескольких файлов отчета в один архив.
	Результат.Вставить("ИмяФайлаАрхива", "");
	
	// Флаг устанавливается Истина в случае расшифровки файлов.
	Результат.Вставить("РежимРасшифровки", Ложь);
	
	// Свойства криптосообщения для ответной транзакции, используется для расшифровки.
	Результат.Вставить("СвойстваКриптоСообщения", Неопределено);
	
	// Сервис обмена с банками.
	Результат.Вставить("Сервис", Перечисления.СервисыОбменаСБанками.ПустаяСсылка());
	
	Возврат Результат;

КонецФункции

// Помещает исходные данные файла для отправки во временный пул файлов, которые требуется подписать и отправить.
//
// Параметры:
//	Параметры - Структура - см. ПараметрыПомещенияВЖурналОперацийСФайлами().
//  ОписаниеОшибки - Строка - Текст ошибки, если она возникла в процессе работы.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* Выполнено - Булево - Истина, если операция успешно выполнена.
//		* ОписаниеОшибки - Строка - Текст ошибки, если возникла.
//
Функция ПоместитьВЖурналОперацияСФайлами(Параметры) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Выполнено",      Ложь);
	Результат.Вставить("ОписаниеОшибки", "");

	Сервис = Параметры.Сервис;
	ИсходноеИмяФайла = Параметры.ИсходноеИмяФайла;
	
	// При создании транзакции для банков проверяем получателей.
	Если НЕ Параметры.РежимРасшифровки И Параметры.БанкиПолучатели.Количество() = 0 Тогда
		
		ОписаниеОшибки = НСтр("ru='Не указаны банки-получатели транзакции.'");
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки, , Метаданные.РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками);
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
		
	КонецЕсли;
	
	// Проверяем тип документа на пустое значение.
	Если НЕ ЗначениеЗаполнено(Параметры.ТипДокумента) Тогда
		
		Комментарий = НСтр("ru='Не заполнен тип документа для файла ""%1"".'");
		Комментарий = СтрШаблон(Комментарий, ИсходноеИмяФайла);
		ЗаписатьСобытиеВЖурнал(Комментарий, , Метаданные.РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками);
		Результат.ОписаниеОшибки = Комментарий;
		Возврат Результат;
		
	КонецЕсли;
	
	// Проверяем тип документа на принадлежность сервису.
	Попытка
		
		ТипДокументаСтрока = ОпределитьТипДокументаПоСсылке(Сервис, Параметры.ТипДокумента);
		
	Исключение
		
		Комментарий = НСтр("ru='Тип документа %1 не принадлежит сервису %2.'");
		Комментарий = СтрШаблон(Комментарий, Параметры.ТипДокумента, Сервис);
		ЗаписатьСобытиеВЖурнал(Комментарий, , Метаданные.РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками);
		Результат.ОписаниеОшибки = Комментарий;
		Возврат Результат;
		
	КонецПопытки;
	
	// Проверяем имя файла на наличие недопустимых символов.
	Если НЕ ПроверкаИмениФайла(ИсходноеИмяФайла) Тогда
		
		Комментарий = НСтр("ru='В имени файла ""%1"" обнаружены недопустимые символы.'");
		Комментарий = СтрШаблон(Комментарий, ИсходноеИмяФайла);
		ЗаписатьСобытиеВЖурнал(Комментарий, , Метаданные.РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками);
		Результат.ОписаниеОшибки = Комментарий;
		Возврат Результат;

	КонецЕсли;
	
	// Если это входящая транзакция, используется облачный сертификат и сжатие не требуется, то не создаем ZIP-архив,
	// в остальных случая создаем всегда, чтобы для подписания/шифрования на клиенте
	// передавать сжатый файл.
	СжатыеИсходныеДанные = Неопределено;
	Если Параметры.Сжать ИЛИ НЕ Параметры.ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		СжатыеИсходныеДанные      = ZIPАрхивВДвоичныеДанные(
			Параметры.ИсходныеДанные, ИсходноеИмяФайла, Результат.ОписаниеОшибки);
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками.СоздатьМенеджерЗаписи();
	// Измерения
	МенеджерЗаписи.Идентификатор       = Параметры.Идентификатор;
	МенеджерЗаписи.ИсходноеИмяФайла    = ИсходноеИмяФайла;
	МенеджерЗаписи.Сервис              = Параметры.Сервис;
	МенеджерЗаписи.Предмет             = Параметры.Предмет;
	МенеджерЗаписи.Организация         = Параметры.Организация;
	МенеджерЗаписи.ИдентификаторАрхива = Параметры.ИдентификаторАрхива;
	// Ресурсы
	МенеджерЗаписи.ИсходныеДанные      = Новый ХранилищеЗначения(Параметры.ИсходныеДанные, Новый СжатиеДанных(9));
	МенеджерЗаписи.СжатыеИсходныеДанные= Новый ХранилищеЗначения(СжатыеИсходныеДанные);
	МенеджерЗаписи.ТипСодержимого      = Параметры.ТипСодержимого;
	МенеджерЗаписи.ТипДокумента        = Параметры.ТипДокумента;
	МенеджерЗаписи.Зашифровать         = Параметры.Зашифровать;
	МенеджерЗаписи.Подписать           = Параметры.Подписать;
	Если Параметры.Подписать Тогда
		МенеджерЗаписи.ПодписьВыполнена = Ложь;
		Если Параметры.Подпись <> Неопределено Тогда
			МенеджерЗаписи.Подпись = Новый ХранилищеЗначения(Параметры.Подпись, Новый СжатиеДанных(9));
			МенеджерЗаписи.ПодписьВыполнена = Истина;
		КонецЕсли;
	КонецЕсли;
	МенеджерЗаписи.Сжать               = Параметры.Сжать;
	МенеджерЗаписи.ИмяФайлаАрхива      = Параметры.ИмяФайлаАрхива;
	МенеджерЗаписи.БанкиПолучатели     = Новый ХранилищеЗначения(Параметры.БанкиПолучатели, Новый СжатиеДанных(9));
	МенеджерЗаписи.СвойстваКриптоСообщения = Новый ХранилищеЗначения(Параметры.СвойстваКриптоСообщения, Новый СжатиеДанных(9));
	
	Если НЕ Параметры.Зашифровать Тогда
		// Данные, не требующие шифрования, сразу помещаем в результат.
		Если Параметры.Сжать Тогда
			МенеджерЗаписи.Результат = МенеджерЗаписи.СжатыеИсходныеДанные;
		Иначе
			МенеджерЗаписи.Результат = МенеджерЗаписи.ИсходныеДанные;
		КонецЕсли;
	КонецЕсли;
	
	// Реквизиты
	МенеджерЗаписи.ДатаПоследнегоИзменения = ТекущаяДатаСеанса();
	
	МенеджерЗаписи.Записать();
	
	Результат.Выполнено = Истина;
	
	Возврат Результат;

КонецФункции

// Получает из регистра комплект файлов по идентификатору.
//
Функция ВыбратьЗаписиЖурналаОперацийСФайламиПоИдентификатору(Идентификатор, ВозвращатьИсходныеДанные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ВозвращатьИсходныеДанные", ВозвращатьИсходныеДанные);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналОперацийСФайламиОбменаСБанками.ИсходноеИмяФайла КАК ИсходноеИмяФайла,
	|	ЖурналОперацийСФайламиОбменаСБанками.Предмет КАК Предмет,
	|	ЖурналОперацийСФайламиОбменаСБанками.Организация КАК Организация,
	|	ЖурналОперацийСФайламиОбменаСБанками.ИдентификаторАрхива КАК ИдентификаторАрхива,
	|	ЖурналОперацийСФайламиОбменаСБанками.ИмяФайлаАрхива КАК ИмяФайлаАрхива,
	|	ВЫБОР
	|		КОГДА &ВозвращатьИсходныеДанные
	|			ТОГДА ЖурналОперацийСФайламиОбменаСБанками.ИсходныеДанные
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИсходныеДанные
	|ИЗ
	|	РегистрСведений.ЖурналОперацийСФайламиОбменаСБанками КАК ЖурналОперацийСФайламиОбменаСБанками
	|ГДЕ
	|	ЖурналОперацийСФайламиОбменаСБанками.Идентификатор = &Идентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(Идентификатор) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Удаление записей журнала операций с файлами'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ОчиститьХранилищаЗначенийЖурналаОперацийСФайлами(Идентификатор, УстановитьПометкуОЗавершении = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	ТекстыОшибок = Новый Массив;
	
	МенеджерЗаписи = РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками.СоздатьМенеджерЗаписи();
	
	Выборка = ВыбратьЗаписиЖурналаОперацийСФайламиПоИдентификатору(Идентификатор);
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи.Идентификатор       = Идентификатор;
		МенеджерЗаписи.ИсходноеИмяФайла    = Выборка.ИсходноеИмяФайла;
		МенеджерЗаписи.Предмет             = Выборка.Предмет;
		МенеджерЗаписи.Организация         = Выборка.Организация;
		МенеджерЗаписи.ИдентификаторАрхива = Выборка.ИдентификаторАрхива;
		МенеджерЗаписи.Прочитать();
		
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			// В обычной ситуации не должны сюда попасть, видимо, что-то пошло не так.
			Успешно        = Ложь;
			ТекстыОшибок.Добавить(СтрШаблон(
				НСтр("ru = 'Не найдены данные файла %1 во временном хранилище транзакций обмена с банками.'"),
				Выборка.ИсходноеИмяФайла));
			Продолжить;
		КонецЕсли;
		
		// Очищаем хранилища значений.
		МенеджерЗаписи.ИсходныеДанные = Неопределено;
		МенеджерЗаписи.СжатыеИсходныеДанные = Неопределено;
		МенеджерЗаписи.Результат = Неопределено;
		МенеджерЗаписи.Подпись = Неопределено;
		МенеджерЗаписи.БанкиПолучатели = Неопределено;
		
		Если УстановитьПометкуОЗавершении Тогда
			МенеджерЗаписи.ОперацииЗавершены = Истина;
		КонецЕсли;

		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьАрхивыВЖурналеОперацийСФайлами(Идентификатор, ОтпечатокСертификата, ПараметрыПрогрессаВыполнения) Экспорт
	
	РезультатПодготовки = Новый Структура;
	РезультатПодготовки.Вставить("Выполнено",      Истина);
	РезультатПодготовки.Вставить("ОписаниеОшибки", "");
	РезультатПодготовки.Вставить("Получатели",     Новый Соответствие);
	
	// Кэшируем сертификаты банков, которые используются для шифрования.
	// Ключ - СправочникСсылка.БанкиУниверсальногоОбмена, Значение - Отпечаток сертификата банка.
	РезультатПодготовки.Вставить("КэшСертификатовБанков", Новый Соответствие);
	
	ТекстыОшибок = Новый Массив;
	
	ЖурналОперацийСФайлами = РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками.СоздатьНаборЗаписей();
	ОтборЖурнала = ЖурналОперацийСФайлами.Отбор;
	ОтборЖурнала.Идентификатор.Установить(Идентификатор);
	
	ИдентификаторыСоздаваемыхАрхивов = УниверсальныйОбменСБанкамиВызовСервера.ИдентификаторыСоздаваемыхАрхивов(Идентификатор);
	
	ДлительныеОперации.СообщитьПрогресс(1, НСтр("ru = 'Подписание архивов...'"), ПараметрыПрогрессаВыполнения);
	КоличествоДействийПрогресса = ИдентификаторыСоздаваемыхАрхивов.Количество();
	ВыполненоДействийПрогресса = 0;
	ШаблонСообщенияПрогресса = НСтр("ru = 'Подписан архив %1'");
	
	НастройкиАрхива = Новый Структура;
	НастройкиАрхива.Вставить("Сервис");
	НастройкиАрхива.Вставить("Предмет");
	НастройкиАрхива.Вставить("Идентификатор");
	НастройкиАрхива.Вставить("ИмяФайлаАрхива");
	НастройкиАрхива.Вставить("Организация");
	НастройкиАрхива.Вставить("ТипДокумента");
	НастройкиАрхива.Вставить("БанкиПолучатели");
	НастройкиАрхива.Вставить("Зашифровать");
	ТолькоАрхивировать = ПустаяСтрока(ОтпечатокСертификата);
	Для Каждого ИдентификаторАрхива Из ИдентификаторыСоздаваемыхАрхивов Цикл
		
		ОтборЖурнала.ИдентификаторАрхива.Установить(ИдентификаторАрхива);
		ЖурналОперацийСФайлами.Прочитать();
		
		Зашифровать = Неопределено;
		Для Каждого ФайлАрхива Из ЖурналОперацийСФайлами Цикл

			Если ФайлАрхива.Сжать Тогда
				
				ОчиститьХранилищаЗначенийЖурналаОперацийСФайлами(Идентификатор);
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Некорректный вызов ПодготовитьАрхивыВЖурналеОперацийСФайлами() для набора файлов с установленным флагом ""Сжать"".
                                        |Идентификатор архива %1'"), ИдентификаторАрхива);
				Прервать;

			КонецЕсли;
			Если Зашифровать = Неопределено Тогда
				Зашифровать = ФайлАрхива.Зашифровать;
			ИначеЕсли Зашифровать <> ФайлАрхива.Зашифровать Тогда
				
				ОчиститьХранилищаЗначенийЖурналаОперацийСФайлами(Идентификатор);
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Некорректный вызов ПодготовитьАрхивыВЖурналеОперацийСФайлами() для набора файлов, имеющих различные значения флага ""Зашифровать"".
                                        |Идентификатор архива %1'"), ИдентификаторАрхива);
				Прервать;
				
			КонецЕсли;
			
			Для каждого Получатель Из ФайлАрхива.БанкиПолучатели.Получить() Цикл
				РезультатПодготовки.Получатели.Вставить(Получатель);
			КонецЦикла;
			
			Если Не ТолькоАрхивировать И ФайлАрхива.Подписать И Не ФайлАрхива.ПодписьВыполнена Тогда

				РезультатОперации = ПодписатьДанныеВЖурналеОперацийСФайлами(ФайлАрхива, ОтпечатокСертификата);
				Если Не РезультатОперации.Выполнено Тогда
					РезультатПодготовки.Выполнено = Ложь;
					Прервать;
				КонецЕсли;

			КонецЕсли;
			
		КонецЦикла;
		
		Если Не РезультатПодготовки.Выполнено Тогда
			ТекстыОшибок.Добавить(РезультатОперации.ОписаниеОшибки);
			ОчиститьХранилищаЗначенийЖурналаОперацийСФайлами(Идентификатор);
			Продолжить;
		КонецЕсли;
		
		Попытка
			// Создаем архив из файлов в записях.
			КаталогАрхива = ФайловаяСистема.СоздатьВременныйКаталог();
			Для Каждого ФайлАрхива Из ЖурналОперацийСФайлами Цикл
				ИсходноеИмяФайла = СтрЗаменить(ФайлАрхива.ИсходноеИмяФайла, Символы.ПС, "");
				ФайлАрхива.ИсходныеДанные.Получить().Записать(КаталогАрхива + ИсходноеИмяФайла);
				Если ФайлАрхива.ПодписьВыполнена И ФайлАрхива.Подпись <> Неопределено Тогда
					ФайлАрхива.Подпись.Получить().Записать(КаталогАрхива + ИсходноеИмяФайла + ".p7s");
				КонецЕсли;
			КонецЦикла;
			ЗаписьZip = Новый ЗаписьZipФайла;
			ЗаписьZip.Добавить(КаталогАрхива + "*");
			ДвоичныеДанныеАрхива = ЗаписьZip.ПолучитьДвоичныеДанные( , , МетодСжатияZIP.BZIP2, УровеньСжатияZIP.Максимальный);
			ФайловаяСистема.УдалитьВременныйКаталог(КаталогАрхива);
			
			// Удаляем предыдущие записи из регистра.
			ЗаполнитьЗначенияСвойств(НастройкиАрхива, ЖурналОперацийСФайлами[0], , "БанкиПолучатели");
			НастройкиАрхива.БанкиПолучатели = ЖурналОперацийСФайлами[0].БанкиПолучатели.Получить();
			ЖурналОперацийСФайлами.Очистить();
			ЖурналОперацийСФайлами.Записать();
			
			ПараметрыПомещения = ПараметрыПомещенияВЖурналОперацийСФайлами();
			ЗаполнитьЗначенияСвойств(ПараметрыПомещения, НастройкиАрхива, , "ИмяФайлаАрхива");
			ПараметрыПомещения.ИсходноеИмяФайла = НастройкиАрхива.ИмяФайлаАрхива;
			ПараметрыПомещения.ИсходныеДанные   = ДвоичныеДанныеАрхива;
			ПараметрыПомещения.ТипСодержимого   = Перечисления.ТипыСодержимогоФайловОбменаСБанками.zip;
			ПараметрыПомещения.Подписать        = Истина; // подписываются и файлы, вложенные в архив, и сам архив
			
			// Формирование архива уже произошло. Вид ключа (облачный или локальный) на это не влияет.
			ПараметрыПомещения.Сжать = Ложь;
			ПараметрыПомещения.ЭтоЭлектроннаяПодписьВМоделиСервиса = Ложь;
			
			РезультатПомещения = ПоместитьВЖурналОперацияСФайлами(ПараметрыПомещения);
			Если Не РезультатПомещения.Выполнено Тогда
				
				РезультатПодготовки.Выполнено = Ложь;

				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Ошибка при записи архива %1 во временное хранилище транзакций обмена с банками: %2'"),
					НастройкиАрхива.ИмяФайлаАрхива,
					РезультатПомещения.ОписаниеОшибки);
				ТекстыОшибок.Добавить(ТекстСообщения);

				ОчиститьХранилищаЗначенийЖурналаОперацийСФайлами(Идентификатор);
				Продолжить;
				
			КонецЕсли;
			
			ДвоичныеДанныеАрхива = Неопределено;
		
		Исключение

			РезультатПодготовки.Выполнено = Ложь;

			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка при подготовке архива %1 во временном хранилище транзакций обмена с банками: %2'"),
				?(НастройкиАрхива = Неопределено, "", НастройкиАрхива.ИмяФайлаАрхива),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстыОшибок.Добавить(ТекстСообщения);

			ОчиститьХранилищаЗначенийЖурналаОперацийСФайлами(Идентификатор);
			Продолжить;

		КонецПопытки;
			
		Если ПараметрыПрогрессаВыполнения <> Неопределено Тогда
			ВыполненоДействийПрогресса = ВыполненоДействийПрогресса + 1;
			ДлительныеОперации.СообщитьПрогресс(ВыполненоДействийПрогресса / КоличествоДействийПрогресса * 50,
				СтрШаблон(ШаблонСообщенияПрогресса, ФайлАрхива.ИсходноеИмяФайла),
				ПараметрыПрогрессаВыполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РезультатПодготовки.Выполнено Тогда
		
		РезультатПодготовки.ОписаниеОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
				
		Комментарий = СтрШаблон(
			НСтр("ru = 'Ошибки при подготовке архивов во временном хранилище транзакций с Идентификатором=%1
						|%2'"),
			Идентификатор, РезультатПодготовки.ОписаниеОшибки);

		ИмяСобытия = НСтр("ru = 'ПодготовитьАрхивыВЖурналеОперацийСФайлами'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписатьСобытиеВЖурнал(Комментарий, ИмяСобытия, Метаданные.РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками);
		
	КонецЕсли;
	
	Возврат РезультатПодготовки;
	
КонецФункции

#КонецОбласти

#Область КриптографияЭлектроннаяПодписьВОблаке

Функция МаркерыБезопасностиСервисаКриптографии() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Маркеры = ПараметрыСеанса.МаркерыБезопасности;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Маркеры;
	
КонецФункции

// Копия метода СервисКриптографииСлужебный.УстановитьМаркерыБезопасности
Процедура УстановитьМаркерыБезопасностиСервисаКриптографии(МаркерыБезопасности) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.МаркерыБезопасности = МаркерыБезопасности;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Выполняет подписание и шифрование файлов данных в регистре сведений
// ЖурналОперацийСФайламиОбменаСБанками с помощью сертификата электронной подписи в облаке.
//
// Параметры:
//	Идентификатор - Строка - Строка с уникальным идентификатором комплекта файлов, которые необходимо обработать.
//	ОтпечатокСертификата - Строка - Отпечаток сертификата организации, которым необходимо использовать.
//  ПараметрыПрогрессаВыполнения - Структура - будет передаваться при вызове ДлительныеОперации.СообщитьПрогресс().
//                                             Если параметр не задан, то сообщения о прогрессе формироваться не будут.
//  ФормироватьОтветноеСообщениеБанка - Булево - параметр для тестирования,
//  ПараметрыПроверкиСертификата - Структура - см. УниверсальныйОбменСБанкамиКлиентСервер.ПараметрыОтбораСертификата
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* 
//
Функция ПодписатьИЗашифроватьДанныеВЖурналеОперацийСФайлами(
			Идентификатор,
			ОтпечатокСертификата,
			ПараметрыПрогрессаВыполнения = Неопределено,
			ПараметрыПроверкиСертификата = Неопределено,
			ФормироватьОтветноеСообщениеБанка = Ложь) Экспорт
			
	Результат = Новый Структура();
	Результат.Вставить("Выполнено",      Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Получатели", Новый Массив);
	
	// Для коробочных версий облачная криптогафия не поддерживается.
	Если НЕ ДоступнаОблачнаяКриптография() Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Электронная подпись в модели сервиса не доступна.'");
		Возврат Результат;
	КонецЕсли;
	
	// Проверка сертификата.
	Если ПараметрыПроверкиСертификата <> Неопределено Тогда
		
		ДанныеСертификата = НайтиОблачныйСертификатВХранилище(ОтпечатокСертификата);
		Если ДанныеСертификата = Неопределено Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Облачный сертификат не найден в хранилище.'");
			Возврат Результат;
		КонецЕсли;
		
		Сертификат = Новый СертификатКриптографии(ДанныеСертификата.Сертификат);
		РезультатПроверки = УниверсальныйОбменСБанкамиКлиентСервер.
			СертификатСоответствуетОтборуПередКриптооперацией(
				Сертификат,
				ПараметрыПроверкиСертификата);
			
		Если НЕ РезультатПроверки.ПризнакСоответствия Тогда
			ОписаниеОшибки = РезультатПроверки.СообщениеДляПользователя;
			ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
				НСтр("ru = 'Сертификаты подписей'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			Результат.ОписаниеОшибки = ОписаниеОшибки;
			Возврат Результат;
		КонецЕсли;
			
	КонецЕсли;
		
	// В регистре ЖурналОперацийСФайламиОбменаСБанками могут быть несколько файлов, которые относятся к одному отчету и которые необходимо
	// после подписания сначала поместить в архив, а потом уже шифровать архив целом, а не отдельные его файлы.
	
	РезультатАрхивирования = ПодготовитьАрхивыВЖурналеОперацийСФайлами(Идентификатор, ОтпечатокСертификата, ПараметрыПрогрессаВыполнения);
	Если Не РезультатАрхивирования.Выполнено Тогда
		// Если архивы не созданы, то нет смысла подписывать остальные файлы.
		Результат.ОписаниеОшибки = РезультатАрхивирования.ОписаниеОшибки;
		Возврат Результат;
		
	КонецЕсли;
	КэшСертификатовБанков = РезультатАрхивирования.КэшСертификатовБанков;
	Получатели = РезультатАрхивирования.Получатели;
	
	МенеджерЗаписи = РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками.СоздатьМенеджерЗаписи();
	Выборка = ВыбратьЗаписиЖурналаОперацийСФайламиПоИдентификатору(Идентификатор);
	
	Если ПараметрыПрогрессаВыполнения <> Неопределено Тогда
		
		ДлительныеОперации.СообщитьПрогресс(51, НСтр("ru = 'Подписание файлов...'"), ПараметрыПрогрессаВыполнения);
		КоличествоДействийПрогресса = Выборка.Количество();
		ВыполненоДействийПрогресса = 0;
		ШаблонСообщенияПрогресса = НСтр("ru = 'Подписан файл %1'");
		
	КонецЕсли;
	
	Успешно      = Истина;
	ТекстыОшибок = Новый Массив;
	Пока Выборка.Следующий() Цикл

		МенеджерЗаписи.Идентификатор       = Идентификатор;
		МенеджерЗаписи.ИсходноеИмяФайла    = Выборка.ИсходноеИмяФайла;
		МенеджерЗаписи.Предмет             = Выборка.Предмет;
		МенеджерЗаписи.Организация         = Выборка.Организация;
		МенеджерЗаписи.ИдентификаторАрхива = Выборка.ИдентификаторАрхива;
		МенеджерЗаписи.Прочитать();
		
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			// В обычной ситуации не должны сюда попасть, видимо, что-то пошло не так.
			Успешно        = Ложь;
			ТекстыОшибок.Добавить(СтрШаблон(
				НСтр("ru = 'Не найдены данные файла %1 во временном хранилище транзакций обмена с банками'"),
				Выборка.ИсходноеИмяФайла));
			Продолжить;
		КонецЕсли;                                                       
		
		БанкиПолучатели = МенеджерЗаписи.БанкиПолучатели.Получить();
		Для каждого Получатель Из БанкиПолучатели Цикл
			Получатели.Вставить(Получатель);
		КонецЦикла;
		
		Если МенеджерЗаписи.Подписать И НЕ МенеджерЗаписи.ПодписьВыполнена Тогда
			РезультатОперации = ПодписатьДанныеВЖурналеОперацийСФайлами(МенеджерЗаписи, ОтпечатокСертификата);
			Если НЕ РезультатОперации.Выполнено Тогда
				ТекстыОшибок.Добавить(РезультатОперации.ОписаниеОшибки);
				Успешно = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если МенеджерЗаписи.Зашифровать Тогда
			Если ФормироватьОтветноеСообщениеБанка Тогда
				// Для тестирования.
				РезультатОперации = ЗашифроватьДанныеВЖурналеОперацийСФайлами(МенеджерЗаписи, КэшСертификатовБанков, ОтпечатокСертификата);
			Иначе
				РезультатОперации = ЗашифроватьДанныеВЖурналеОперацийСФайлами(МенеджерЗаписи, КэшСертификатовБанков);
			КонецЕсли;
			
			Если НЕ РезультатОперации.Выполнено Тогда
				ТекстыОшибок.Добавить(РезультатОперации.ОписаниеОшибки);
				Успешно = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если МенеджерЗаписи.Модифицированность() Тогда
			// Записываем измененные данные.
			МенеджерЗаписи.ДатаПоследнегоИзменения = ТекущаяДатаСеанса();
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		Если ПараметрыПрогрессаВыполнения <> Неопределено Тогда
			
			ВыполненоДействийПрогресса = ВыполненоДействийПрогресса + 1;
			ДлительныеОперации.СообщитьПрогресс(50 + ВыполненоДействийПрогресса / КоличествоДействийПрогресса * 50,
				СтрШаблон(ШаблонСообщенияПрогресса, Выборка.ИсходноеИмяФайла),
				ПараметрыПрогрессаВыполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого КлючЗначение Из Получатели Цикл
		Результат.Получатели.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Результат.Выполнено = Успешно;
	
	// Зафиксируем информацию о возникших ошибках.
	Если ТекстыОшибок.Количество() > 0 Тогда

		Результат.ОписаниеОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
		ИмяСобытия = НСтр("ru = 'ПодписатьИЗашифроватьДанныеВЖурналеОперацийСФайлами'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				
		Комментарий = СтрШаблон(
			НСтр("ru = 'Ошибки при подписании и шифровании данных во временном хранилище транзакций с Идентификатором=%1:%2'"),
			Идентификатор,
			Символы.ПС + Результат.ОписаниеОшибки);

		ЗаписатьСобытиеВЖурнал(Комментарий, ИмяСобытия, Метаданные.РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками);

	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Расшифровывает и проверяет подписи в журнале операций. Может возвращать предупреждения.
Функция РасшифроватьИПроверитьПодписьВЖурналеОперацийСФайлами(Идентификатор, Транзакция) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено",      Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Предупреждения", "");
	Результат.Вставить("ПодписьНеДействительна", Ложь);
	Результат.Вставить("НеизвестныйСертификатПодписи", Ложь);

	Успешно      = Истина;
	ТекстыОшибок = Новый Массив;
	ТекстыПредупреждений = Новый Массив;
	
	// Формируем список сертификатов банка для проверки подписи.
	СертификатыБанка = СертификатыПодписиБанка(Транзакция.Банк);
	
	МенеджерЗаписи = РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками.СоздатьМенеджерЗаписи();
	
	// Выбираем перечень файлов в пакете.
	Выборка = ВыбратьЗаписиЖурналаОперацийСФайламиПоИдентификатору(Идентификатор);
	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи.Идентификатор       = Идентификатор;
		МенеджерЗаписи.ИсходноеИмяФайла    = Выборка.ИсходноеИмяФайла;
		МенеджерЗаписи.Предмет             = Выборка.Предмет;
		МенеджерЗаписи.Организация         = Выборка.Организация;
		МенеджерЗаписи.ИдентификаторАрхива = Выборка.ИдентификаторАрхива;
		МенеджерЗаписи.Прочитать();
		
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			// В обычной ситуации не должны сюда попасть, видимо, что-то пошло не так.
			Успешно        = Ложь;
			ТекстыОшибок.Добавить(СтрШаблон(
				НСтр("ru = 'Не найдены данные файла %1 во временном хранилище транзакций обмена с банками.'"),
				Выборка.ИсходноеИмяФайла));
			Продолжить;
		КонецЕсли;
		
		РезультатОперации = РасшифроватьИПроверитьПодписьЗаписиВЖурналеОперацийСФайлами(МенеджерЗаписи, СертификатыБанка);
		Если НЕ РезультатОперации.Выполнено Тогда
			ТекстыОшибок.Добавить(РезультатОперации.ОписаниеОшибки);
			Успешно = Ложь;
		КонецЕсли;
		
		Если МенеджерЗаписи.Подписать Тогда
			Если РезультатОперации.ПодписьНеДействительна Тогда
				ТекстПредупреждения = НСтр("ru='В файле %1 подпись не действительна.'");
				ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, Выборка.ИсходноеИмяФайла);
				ТекстыПредупреждений.Добавить(ТекстПредупреждения);
				Результат.ПодписьНеДействительна = Истина;
				МенеджерЗаписи.ПодписьНеДействительна = Истина;
			КонецЕсли;
			
			Если РезультатОперации.НеизвестныйСертификатПодписи Тогда
				ТекстПредупреждения = НСтр("ru='В файле %1 подпись выполнена неизвестным сертификатом.'");
				ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, Выборка.ИсходноеИмяФайла);
				ТекстыПредупреждений.Добавить(ТекстПредупреждения);
				Результат.НеизвестныйСертификатПодписи = Истина;
				МенеджерЗаписи.НеизвестныйСертификатПодписи = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если МенеджерЗаписи.Модифицированность() Тогда
			// Записываем измененные данные.
			МенеджерЗаписи.ДатаПоследнегоИзменения = ТекущаяДатаСеанса();
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЦикла;

	Результат.Выполнено = Успешно;
	
	// Зафиксируем информацию о возникших ошибках.
	Если ТекстыОшибок.Количество() > 0 Тогда
		
		Результат.ОписаниеОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);

		ИмяСобытия = НСтр("ru = 'ПодписатьИЗашифроватьДанныеВоВременномХранилищеТранзакций'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Комментарий = СтрШаблон(
			НСтр("ru = 'Ошибки при подписании и шифровании данных во временном хранилище транзакций с Идентификатором=%1:%2'"),
			Идентификатор,
			Символы.ПС + Результат.ОписаниеОшибки);
		ЗаписатьСобытиеВЖурнал(Комментарий, ИмяСобытия, Метаданные.РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками);

	КонецЕсли;
	
	// Сформируем общий текст предупреждения.
	Если ТекстыПредупреждений.Количество() > 0 Тогда
		Результат.Предупреждения = СтрСоединить(ТекстыПредупреждений, Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСДокументооборотом

// Возвращает структуру с полями статуса документооборота.
//
// Возвращаемое значение:
//   Структура   - описывает статус взаимодействия в рамках определенного документооборота:
//                 * Завершен - Булево - если Истина, то дальнейших сообщений не будет.
//                 * ДатаЗавершения - Дата, Неопределено - если Неопределено, то в качестве даты завершения 
//                                                         будет установлена текущая дата;
//                 * ОжидаетсяОтвет - Булево - Истина, если ожидается сообщение от банка;
//
Функция ОписаниеСтатусаДокументооборота() Экспорт
	
	ОписаниеСтатуса = Новый Структура;
	ОписаниеСтатуса.Вставить("Завершен",         Ложь);
	ОписаниеСтатуса.Вставить("ДатаЗавершения",   Неопределено);
	ОписаниеСтатуса.Вставить("ОжидаетсяОтвет",   Ложь);
	
	Возврат ОписаниеСтатуса;
	
КонецФункции

Функция ПолучитьТранзакцииДокументооборота(Документооборот,
											ТипТранзакции = Неопределено,
											ВключаяПомеченныеНаУдаление = Ложь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Транзакция.Ссылка КАК Ссылка,
	                      |	Транзакция.ДатаТранспорта КАК ДатаТранспорта,
	                      |	Транзакция.Идентификатор КАК Идентификатор,
	                      |	Транзакция.Статус КАК Статус,
	                      |	Транзакция.ТипТранзакции КАК ТипТранзакции,
	                      |	Транзакция.НесколькоПолучателей КАК НесколькоПолучателей,
	                      |	Транзакция.Дата КАК Дата,
	                      |	Транзакция.Организация КАК Организация,
	                      |	Транзакция.Банк КАК Банк,
	                      |	Транзакция.Банки.(
	                      |		Ссылка КАК Ссылка,
	                      |		НомерСтроки КАК НомерСтроки,
	                      |		Банк КАК Банк
	                      |	) КАК Банки
	                      |ИЗ
	                      |	Справочник.ТранзакцииОбменаСБанками КАК Транзакция
	                      |ГДЕ
	                      |	Транзакция.Документооборот = &Документооборот
	                      |	И (&ВсеТипыТранзакций
	                      |			ИЛИ Транзакция.ТипТранзакции = &ТипТранзакции)
	                      |	И (&ВключаяПомеченныеНаУдаление ИЛИ Транзакция.ПометкаУдаления = ЛОЖЬ)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Транзакция.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Документооборот", Документооборот);
	Запрос.УстановитьПараметр("ВсеТипыТранзакций", ТипТранзакции = Неопределено);
	Запрос.УстановитьПараметр("ТипТранзакции", ТипТранзакции);
	Запрос.УстановитьПараметр("ВключаяПомеченныеНаУдаление", ВключаяПомеченныеНаУдаление);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область РаботаСТранспортнымКонтейнером

// Возвращает описание файлов, содержащихся в транспортном контейнере указанной транзакции обмена.
//
// Параметры:
//	Транзакция    - СправочникСсылка.ТранзакцииОбменаСБанками - Ссылка на транзакцию.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. ПолучитьВложенияТранзакции().
//
Функция СоставТранспортногоКонтейнера(Транзакция) Экспорт

	Реквизиты = Новый Массив;
	Реквизиты.Добавить("ТипДокумента");
	Реквизиты.Добавить("ТипСодержимогоФайла");
	Реквизиты.Добавить("ИсходноеИмяФайла"); // имя файла с расширением без пути
	// Заполняется только для присоединенных файлов, являющихся подписями к файлам с данными.
	Реквизиты.Добавить("ЭЦПИмяПодписанногоФайла");
	
	ПараметрыРезультата = Новый Структура;
	ПараметрыРезультата.Вставить("Реквизиты", Реквизиты);
	ПараметрыРезультата.Вставить("Данные",    Ложь);
	ПараметрыРезультата.Вставить("Адрес",     Ложь);
	
	Результат = ПолучитьВложенияТранзакции(Транзакция, ПараметрыРезультата);
	
	Возврат Результат;

КонецФункции

// Возвращает содержимое файлов из транспортного контейнера указанной транзакции.
//
// Параметры:
//	Транзакция   - СправочникСсылка.ТранзакцииОбменаСБанками, СправочникОбъект.ТранзакцииОбменаСБанками, Массив - Ссылка на транзакцию.
//  ПараметрыРезультата - Структура - задает колонки, которые будут у таблицы-результата:
//        * Реквизиты - Массив - имена колонок-реквизитов справочника;
//        * Данные - Булево - добавить колонку "Данные", куда поместить хранилища значений с извлеченными файлами;
//        * Адрес - Булево - добавить колонку "Адрес", куда поместить адреса временных хранилищ с извлеченными файлами.
//  Отбор        - Структура - Ключ = имя реквизита справочника ТранзакцииОбменаСБанкамиСодержимоеПрисоединенныеФайлы;
//                             Значение = конкретное значение или массив (список) значений для отбора.
//
// Возвращаемое значение:
//   ТаблицаЗначений - данные из справочника ТранзакцииОбменаСБанкамиСодержимоеПрисоединенныеФайлы.
//
Функция ПолучитьВложенияТранзакции(Транзакция, ПараметрыРезультата = Неопределено, Отбор = Неопределено) Экспорт
	
	Если ТипЗнч(Отбор) <> Тип("Структура") Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыРезультата) <> Тип("Структура") Тогда
		ПараметрыРезультата = Новый Структура;
	КонецЕсли;
	
	Реквизиты = Неопределено;
	Если Не ПараметрыРезультата.Свойство("Реквизиты", Реквизиты)
	 Или Не ЗначениеЗаполнено(Реквизиты) Тогда
		Реквизиты = Новый Массив;
		Для каждого Реквизит Из Метаданные.Справочники.ТранзакцииОбменаСБанкамиСодержимоеПрисоединенныеФайлы.Реквизиты Цикл
			Реквизиты.Добавить(Реквизит.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Если Реквизиты.Найти("Ссылка") = Неопределено Тогда
		Реквизиты.Добавить("Ссылка");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Выбираем реквизиты.
	ТекстРеквизитов = Новый Массив;
	Для каждого Реквизит Из Реквизиты Цикл
		
		Если ТекстРеквизитов.Количество() > 0 Тогда
			ТекстРеквизитов.Добавить(",");
		КонецЕсли;
		ТекстРеквизитов.Добавить("
	|	ПрисоединенныеФайлы.");
		ТекстРеквизитов.Добавить(Реквизит);
		ТекстРеквизитов.Добавить(" КАК ");
		ТекстРеквизитов.Добавить(Реквизит);
	
	КонецЦикла; 
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + СтрСоединить(ТекстРеквизитов) + "
	|ИЗ
	|	Справочник.ТранзакцииОбменаСБанкамиСодержимоеПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла ";
	ТипОтбора = ТипЗнч(Транзакция);
	ЭтоСписокЗначений = (ТипОтбора = Тип("Массив") Или ТипОтбора = Тип("СписокЗначений"));
	Если ЭтоСписокЗначений Тогда
		ТекстЗапроса = ТекстЗапроса + "В(&ВладелецФайла)";
		Запрос.УстановитьПараметр("ВладелецФайла", Транзакция);
	ИначеЕсли ТипОтбора = Тип("СправочникСсылка.ТранзакцииОбменаСБанками") Тогда
		ТекстЗапроса = ТекстЗапроса + "= &ВладелецФайла";
		Запрос.УстановитьПараметр("ВладелецФайла", Транзакция);
	Иначе
		ТекстЗапроса = ТекстЗапроса + "= &ВладелецФайла";
		Запрос.УстановитьПараметр("ВладелецФайла", Транзакция.Ссылка);
	КонецЕсли;

	// Добавляем отбор.
	ТекстРеквизитов = Новый Массив;
	Для каждого Реквизит Из Отбор Цикл
		
		ТипОтбора = ТипЗнч(Реквизит.Значение);
		ЭтоСписокЗначений = (ТипОтбора = Тип("Массив") Или ТипОтбора = Тип("СписокЗначений"));
		
		ТекстРеквизитов.Добавить("				   
	|	И ПрисоединенныеФайлы.");
		ТекстРеквизитов.Добавить(Реквизит.Ключ);
		ТекстРеквизитов.Добавить(?(ЭтоСписокЗначений, " В(&", " = &"));
		ТекстРеквизитов.Добавить(Реквизит.Ключ);
		Если ЭтоСписокЗначений Тогда
			ТекстРеквизитов.Добавить(")");
		КонецЕсли;
		
		Запрос.УстановитьПараметр(Реквизит.Ключ, Реквизит.Значение);
	
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + СтрСоединить(ТекстРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаВложений = Запрос.Выполнить().Выгрузить();

	// Добавляем вычисляемые колонки.
	ФлагКолонки = Ложь;
	ПомещатьВХранилищеЗначений = (ПараметрыРезультата.Свойство("Данные", ФлагКолонки) И ФлагКолонки);
	ПомещатьВоВременноеХранилище = (ПараметрыРезультата.Свойство("Адрес", ФлагКолонки) И ФлагКолонки);
	Если ПомещатьВХранилищеЗначений Или ПомещатьВоВременноеХранилище Тогда
		
		Если ПомещатьВХранилищеЗначений Тогда
			ТаблицаВложений.Колонки.Добавить("Данные", Новый ОписаниеТипов("ХранилищеЗначения"));
		КонецЕсли;
		Если ПомещатьВоВременноеХранилище Тогда
			ТаблицаВложений.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		Для каждого Вложение Из ТаблицаВложений Цикл
			
			ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Вложение.Ссылка);
			Данные = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(0));
			Если ПомещатьВХранилищеЗначений Тогда
				Вложение.Данные = Данные;
			КонецЕсли;
			Если ПомещатьВоВременноеХранилище Тогда
				Вложение.Адрес = ПоместитьВоВременноеХранилище(Данные.Получить(), Новый УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат ТаблицаВложений;
	
КонецФункции

#КонецОбласти

#Область НовыеСобытияОбменаСБанками

Функция ПараметрыСобытияДокументооборота() Экспорт
	
	ТипОрганизации 		= Новый ОписаниеТипов("СправочникСсылка.Организации");
	ТипБанки 			= Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена");
	ТипСервисы 			= Новый ОписаниеТипов("ПеречислениеСсылка.СервисыОбменаСБанками");
	ТипСостояния 		= Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументооборотаОбменаСБанками");
	ТипСтатусы 			= Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОтправкиФинОтчетностиВБанки");
	ТипПредметы 		= Метаданные.ОпределяемыеТипы.ПредметОбменаСБанками.Тип;
	
	ПараметрыСобытия = Новый Структура;
	ПараметрыСобытия.Вставить("Предмет", ТипПредметы.ПривестиЗначение(Неопределено));
	ПараметрыСобытия.Вставить("Организация", ТипОрганизации.ПривестиЗначение(Неопределено));
	ПараметрыСобытия.Вставить("Сервис", ТипСервисы.ПривестиЗначение(Неопределено));
	ПараметрыСобытия.Вставить("Состояние", ТипСостояния.ПривестиЗначение(Неопределено));
	ПараметрыСобытия.Вставить("Статус", ТипСтатусы.ПривестиЗначение(Неопределено));
	ПараметрыСобытия.Вставить("ЕстьКритическиеОшибки", Ложь);
	ПараметрыСобытия.Вставить("Просмотрено", Ложь);
	ПараметрыСобытия.Вставить("Скрыт", Ложь);
	ПараметрыСобытия.Вставить("Банк", ТипБанки.ПривестиЗначение(Неопределено));
	ПараметрыСобытия.Вставить("Автообмен", Ложь);
	
	Возврат ПараметрыСобытия;
	
КонецФункции

Функция НоваяГруппаСобытий(Идентификатор, Представление) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор", Идентификатор);
	// Представление в дереве событий.
	Результат.Вставить("Представление", Представление);
	// Порядок вывода в дереве событий.
	Результат.Вставить("Порядок", 0);
	// Текст надписи, означающий отстутсвие новых событий.
	Результат.Вставить("НадписьНовыхНет", НСтр("ru='Новых нет'"));
	// Если значение флага Истина, то события группы не выводятся при автообмене.
	Результат.Вставить("НеВыводитьПриАвтообмене", Ложь);
	// Текст заголовка для недавно просмотренных событий.
	Результат.Вставить("ЗаголовокНедавноПросмотренных");
	// Отступ для вывода в дерево событий.
	Результат.Вставить("Отступ", "");
	// Если Истина, события из группы всегда будет отображаться как новые.
	Результат.Вставить("ВсегдаНепросмотренные", Ложь);
	// Подсчёт количества новых в дереве событий.
	Результат.Вставить("ПодсчетКоличестваНовыхСобытий", Ложь);
	// Шаблон для вывода в дерево не нулевого количества событий (в случае подсчета).
	Результат.Вставить("ШаблонНеНулевогоКоличестваСобытий", "");
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеГруппСобытий()
	
	Результат = Новый Структура;
	
	Коллекция = Новый Массив;
	Словарь = Новый Соответствие;
	
	Результат.Вставить("Коллекция", Коллекция);
	Результат.Вставить("Словарь", Словарь);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьГруппуСобытий(ДанныеГрупп, Группа) Экспорт
	
	Если Группа.ПодсчетКоличестваНовыхСобытий
		И ПустаяСтрока(Группа.ШаблонНеНулевогоКоличестваСобытий) Тогда
		ВызватьИсключение(НСтр("ru='Не заполнен шаблон ненулевого количества событий.'"));
	КонецЕсли;
	ДанныеГрупп.Словарь.Вставить(Группа.Идентификатор, Группа);
	ДанныеГрупп.Коллекция.Добавить(Группа);
	
КонецПроцедуры

Функция ГруппыСобытийСервиса(Сервис) Экспорт
	
	Результат = ДанныеГруппСобытий();
	УниверсальныйОбменСБанкамиПереопределяемый.ГруппыСобытийСервиса(Сервис, Результат);
	Возврат Результат;
	
КонецФункции

Функция ГруппаНовогоСобытияДокументооборота(ПараметрыСобытия)

	Группа = Неопределено;
	УниверсальныйОбменСБанкамиПереопределяемый.
		ГруппаНовогоСобытияДокументооборота(ПараметрыСобытия.Сервис, ПараметрыСобытия, Группа);
	Возврат Группа;
	
КонецФункции

Функция НайтиГруппуСобытий(ДанныеГрупп, Идентификатор) Экспорт
	
	Возврат УниверсальныйОбменСБанкамиКлиентСервер.НайтиГруппуСобытий(ДанныеГрупп, Идентификатор);
	
КонецФункции

Процедура УстановитьПризнакПоказатьПользователю(Приемник, Источник)

 	// Показываем пользователю, если изменился статус.
	ИзменилсяСтатус 		= Приемник.Статус <> Источник.Статус
		И ЗначениеЗаполнено(Источник.Статус);
	ЭтоНоваяЗапись 			= НЕ Приемник.Выбран();
	НеПросмотреноВИсточнике = НЕ Источник.Просмотрено;
	ЕстьОшибки = Источник.ЕстьКритическиеОшибки;
	
	Если ИзменилсяСтатус
		ИЛИ ЭтоНоваяЗапись
		ИЛИ НеПросмотреноВИсточнике
		ИЛИ ЕстьОшибки Тогда
		
			Приемник.ПоказатьПользователю = Истина;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьОтправленоПолученоНовогоСобытияДокументооборота(ПараметрыСобытия)
	
	Результат = Неопределено;
	
	Документообороты = ДокументооборотыПоПредмету(ПараметрыСобытия.Предмет);
	Если Документообороты.Количество() > 0 Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документообороты[0], "ДатаПоследнейТранзакции");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьНовоеСобытиеДокументооборота(ПараметрыСобытия) Экспорт
	
	Группа = ГруппаНовогоСобытияДокументооборота(ПараметрыСобытия);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСобытия.Банк) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Группа) Тогда
		НаборЗаписей = РегистрыСведений.ЖурналНовыхСобытийОбменаСБанками.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Предмет.Установить(ПараметрыСобытия.Предмет);
		НаборЗаписей.Отбор.Предмет.Установить(ПараметрыСобытия.Организация);
		НаборЗаписей.Отбор.Предмет.Установить(ПараметрыСобытия.Сервис);
		НаборЗаписей.Записать(Истина);
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЖурналНовыхСобытийОбменаСБанками.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сервис = ПараметрыСобытия.Сервис;
	МенеджерЗаписи.Организация = ПараметрыСобытия.Организация;
	МенеджерЗаписи.Предмет = ПараметрыСобытия.Предмет;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() 
		И (МенеджерЗаписи.Статус <> ПараметрыСобытия.Статус 
		ИЛИ МенеджерЗаписи.Просмотрено <> ПараметрыСобытия.Просмотрено
		ИЛИ МенеджерЗаписи.Скрыт <> ПараметрыСобытия.Скрыт
		ИЛИ МенеджерЗаписи.ЕстьКритическиеОшибки <> ПараметрыСобытия.ЕстьКритическиеОшибки)
		ИЛИ НЕ МенеджерЗаписи.Выбран() Тогда
		
		// Показываем пользователю, если изменился статус.
		УстановитьПризнакПоказатьПользователю(МенеджерЗаписи, ПараметрыСобытия);
		
		МенеджерЗаписи.Предмет 				= ПараметрыСобытия.Предмет;
		МенеджерЗаписи.Статус 				= ПараметрыСобытия.Статус;
		МенеджерЗаписи.Организация 			= ПараметрыСобытия.Организация;
		МенеджерЗаписи.ДатаСобытия 			= ТекущаяДатаСеанса();
		МенеджерЗаписи.Сервис			 	= ПараметрыСобытия.Сервис;
		МенеджерЗаписи.Группа 				= Группа;
		МенеджерЗаписи.Состояние 			= ПараметрыСобытия.Состояние;
		МенеджерЗаписи.Порядок 				= 0;
		МенеджерЗаписи.ОтправленоПолучено 	= ПолучитьОтправленоПолученоНовогоСобытияДокументооборота(ПараметрыСобытия);
		МенеджерЗаписи.ЕстьКритическиеОшибки = ПараметрыСобытия.ЕстьКритическиеОшибки;
		МенеджерЗаписи.Просмотрено 			= ПараметрыСобытия.Просмотрено;
		МенеджерЗаписи.Скрыт 				= ПараметрыСобытия.Скрыт;
		МенеджерЗаписи.Банк 				= ПараметрыСобытия.Банк;
		МенеджерЗаписи.Автообмен			= ПараметрыСобытия.Автообмен;
		
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаПоследнегоОбновленияСобытий(Сервис) Экспорт
	
	Дата = Дата('00010101');
	УниверсальныйОбменСБанкамиПереопределяемый.ДатаПоследнегоОбновленияСобытий(Сервис, Дата);
	Возврат Дата;
	
КонецФункции

// Возвращает пустое дерево значений для сохранения списка новых событий обмена с банками.
// 
// Возвращаемое значение:
//	ДеревоЗначений.
//
Функция НовоеДеревоНовыхСобытий() Экспорт

	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("ЗаголовокБлока",        ТипСтрока);
	Результат.Колонки.Добавить("Предмет",               Метаданные.ОпределяемыеТипы.ПредметОбменаСБанками.Тип);
	Результат.Колонки.Добавить("Организация",           ТипСтрока);
	Результат.Колонки.Добавить("Сервис",                ТипСтрока);
	Результат.Колонки.Добавить("Дата",                  ТипСтрока);
	Результат.Колонки.Добавить("Статус",                ТипСтрока);
	Результат.Колонки.Добавить("НеПрочитано",           ТипБулево);
	Результат.Колонки.Добавить("ЭтоЗаголовокБлока",     ТипБулево);
	Результат.Колонки.Добавить("ЭтоПодЗаголовок",       ТипБулево);
	Результат.Колонки.Добавить("ЭтоРазделитель",        ТипБулево);
	Результат.Колонки.Добавить("ЭтоОбъектСсылка",       ТипБулево);
	Результат.Колонки.Добавить("Наименование",          ТипСтрока);
	Результат.Колонки.Добавить("ЭтоСтатусСсылка",       ТипБулево);
	Результат.Колонки.Добавить("Состояние",             Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументооборотаОбменаСБанками"));
	Результат.Колонки.Добавить("Группа",                ТипСтрока);
	Результат.Колонки.Добавить("ЕстьКритическиеОшибки", ТипБулево);
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьДеревоНовое(Сервис, ДеревоНовое, Автообмен = Ложь, ТолькоНепоказанные = Ложь, ВыводитьГруппуЕслиНетНовых = Ложь) Экспорт
	
	ДеревоНовое.Строки.Очистить();
	
	ДанныеГрупп = ГруппыСобытийСервиса(Сервис);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЖурналНовыхСобытий.Предмет КАК Объект,
	|	ЖурналНовыхСобытий.Статус КАК Статус,
	|	ЖурналНовыхСобытий.Организация КАК Организация,
	|	ЖурналНовыхСобытий.Сервис КАК Сервис,
	|	ЖурналНовыхСобытий.Просмотрено КАК Просмотрено,
	|	ЖурналНовыхСобытий.Состояние КАК Состояние,
	|	0 КАК ГруппаПорядок,
	|	ЖурналНовыхСобытий.ДатаСобытия КАК ДатаСобытия,
	|	ЖурналНовыхСобытий.Порядок КАК Порядок,
	|	ЖурналНовыхСобытий.Группа КАК Группа,
	|	ЖурналНовыхСобытий.ОтправленоПолучено КАК ОтправленоПолучено,
	|	ЖурналНовыхСобытий.ЕстьКритическиеОшибки КАК ЕстьКритическиеОшибки,
	|	ЖурналНовыхСобытий.Автообмен КАК Автообмен,
	|	ЖурналНовыхСобытий.Банк КАК Банк,
	|	"""" КАК ПредставлениеПредмета
	|ИЗ
	|	РегистрСведений.ЖурналНовыхСобытийОбменаСБанками КАК ЖурналНовыхСобытий
	|ГДЕ
	|	(НЕ ЖурналНовыхСобытий.Просмотрено
	|			ИЛИ ЖурналНовыхСобытий.ДатаСобытия > &ДатаСобытия)
	|	И НЕ ЖурналНовыхСобытий.Скрыт
	|	И (&ТолькоНепоказанные
	|				И ЖурналНовыхСобытий.ПоказатьПользователю = ИСТИНА
	|			ИЛИ НЕ &ТолькоНепоказанные)
	|	И ЖурналНовыхСобытий.Сервис = &Сервис
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппаПорядок,
	|	Просмотрено,
	|	ОтправленоПолучено УБЫВ
	|ИТОГИ ПО
	|	Группа";
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	Операторы = Схема.ПакетЗапросов[0].Операторы;
	ВыражениеПорядок = "";
	ВыражениеПросмотрено = "";
	Для каждого Группа Из ДанныеГрупп.Коллекция Цикл
		// Добавляем единичную для заголовка группы.
		ОператорГруппы = Операторы.Добавить();
		// Поле Просмотрено.
		ОператорГруппы.ВыбираемыеПоля.Добавить("ИСТИНА", 5);
		// Поле Порядок.
		ОператорГруппы.ВыбираемыеПоля.Добавить(Строка(Группа.Порядок), 7);
		// Поле Группа.
		ОператорГруппы.ВыбираемыеПоля.Добавить("""" + Группа.Идентификатор + """", 11);
		// Поле Автообмен.
		ОператорГруппы.ВыбираемыеПоля.Добавить("ЛОЖЬ", 14);
		// Корректируем выражения для некоторых полей запроса.
		Если Группа.ВсегдаНепросмотренные Тогда
			// Всегда возвращаем признак не просмотрено.
			ВыражениеПросмотрено = ВыражениеПросмотрено + " КОГДА ЖурналНовыхСобытий.Группа = ""%1"" ТОГДА ЛОЖЬ ";
			ВыражениеПросмотрено = СтрШаблон(ВыражениеПросмотрено, Группа.Идентификатор);
		КонецЕсли;
		// Формируем выражения для поля ГруппаПорядок.
		ВыражениеПорядок = ВыражениеПорядок + " КОГДА ЖурналНовыхСобытий.Группа = ""%1"" ТОГДА %2 ";
		ВыражениеПорядок = СтрШаблон(ВыражениеПорядок, Группа.Идентификатор, Строка(Группа.Порядок));
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ВыражениеПросмотрено) Тогда
		// Поле Просмотрено.
		Шаблон = "ВЫБОР %1 ИНАЧЕ ЖурналНовыхСобытий.Просмотрено КОНЕЦ";
		ВыражениеПросмотрено = СтрШаблон(Шаблон, ВыражениеПросмотрено);
		Операторы[0].ВыбираемыеПоля[5] = Новый ВыражениеСхемыЗапроса(ВыражениеПросмотрено);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ВыражениеПорядок) Тогда
		// Поле ГруппаПорядок.
		Шаблон = "ВЫБОР %1 КОНЕЦ";
		ВыражениеПорядок = СтрШаблон(Шаблон, ВыражениеПорядок);
		Операторы[0].ВыбираемыеПоля[7] = Новый ВыражениеСхемыЗапроса(ВыражениеПорядок);
	КонецЕсли;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	
	Запрос.УстановитьПараметр("ДатаСобытия", ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
	Запрос.УстановитьПараметр("ТолькоНепоказанные", ТолькоНепоказанные);
	Запрос.УстановитьПараметр("Сервис", Сервис);
	
	ВыборкаГруппа = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГруппа.Следующий() Цикл
		ВыборкаДетали = ВыборкаГруппа.Выбрать();
		
		ЗаполнитьСтрокиДерева(ДанныеГрупп, ДеревоНовое, ВыборкаДетали, ВыборкаГруппа.Группа, Автообмен, ВыводитьГруппуЕслиНетНовых);
	КонецЦикла;
	
	Если ДеревоНовое.Строки.Количество() = 0 Тогда
		СтрокаБлок = ДеревоНовое.Строки.Добавить();
		СтрокаБлок.ЭтоЗаголовокБлока = Истина;
		СтрокаБлок.ЗаголовокБлока = НСтр("ru='Новых событий нет'");
		СтрокаБлок.Группа = "ГруппаНетНовыхСобытий";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиДерева(ДанныеГрупп, ДеревоНовое, ВыборкаДетали, ИдентификаторГруппы, Автообмен = Ложь, ВыводитьГруппуЕслиНетНовых = Ложь)
	
	МассивНовые = Новый Массив;
	МассивСтарые = Новый Массив;
	
	ДанныеГруппы = НайтиГруппуСобытий(ДанныеГрупп, ИдентификаторГруппы);
	Если ДанныеГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеГруппы = ДанныеГруппы.Представление;
	
	Если Автообмен
		И ДанныеГруппы.НеВыводитьПриАвтообмене Тогда
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаДетали.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетали.Объект) Тогда
			ЭлементДерева = ЭлементДерева();

			ЭлементДерева.Дата = Отступ(ВыборкаДетали.Просмотрено, ДанныеГруппы) +
				Формат(ВыборкаДетали.ОтправленоПолучено, "ДФ=dd.MM.yyyy");
			ЭлементДерева.Предмет = ВыборкаДетали.Объект;
			ЭлементДерева.Сервис = ВыборкаДетали.Сервис;
			ЭлементДерева.Статус = ВыборкаДетали.Статус;
			ЭлементДерева.Организация = ВыборкаДетали.Организация;
			ЭлементДерева.НеПрочитано = Не ВыборкаДетали.Просмотрено;
			ЭлементДерева.Состояние = ВыборкаДетали.Состояние;
			ЭлементДерева.Группа = ИдентификаторГруппы;
			ЭлементДерева.ЕстьКритическиеОшибки = ВыборкаДетали.ЕстьКритическиеОшибки;
			ЭлементДерева.Банк = ВыборкаДетали.Банк;
			
			// Представление предмета.
			Если ЗначениеЗаполнено(ЭлементДерева.Предмет) Тогда
				ЭлементДерева.Наименование = ПредставлениеПредмета(ЭлементДерева.Сервис, ЭлементДерева.Предмет);
			КонецЕсли;
			
			Если ВыборкаДетали.Просмотрено Тогда
				МассивСтарые.Добавить(ЭлементДерева);
			Иначе
				МассивНовые.Добавить(ЭлементДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНовые.Количество() = 0 И НЕ ВыводитьГруппуЕслиНетНовых Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаБлок = ДеревоНовое.Строки.Добавить();
	СтрокаБлок.ЭтоЗаголовокБлока = Истина;
	СтрокаБлок.ЗаголовокБлока = ПредставлениеГруппы;
	СтрокаБлок.Группа = ИдентификаторГруппы;
	
	Если МассивНовые.Количество() = 0 Тогда
		СтрокаСобытие = ДеревоНовое.Строки.Добавить();
		СтрокаСобытие.Наименование = Отступ() + НадписьНовыхНет(ДанныеГруппы);
	Иначе
		Для Каждого НовоеСобытие Из МассивНовые Цикл
			СтрокаСобытие = ДеревоНовое.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСобытие, НовоеСобытие);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Автообмен
		И НЕ ДанныеГруппы.НеВыводитьПриАвтообмене Тогда
		Если МассивСтарые.Количество() > 0 Тогда
			СтрокаБлок = ДеревоНовое.Строки.Добавить();
			СтрокаБлок.ЭтоПодЗаголовок = Истина;
			СтрокаБлок.ЗаголовокБлока = ЗаголовокНедавноПросмотренных(ДанныеГруппы);
			
			Для Каждого СтароеСобытие Из МассивСтарые Цикл
				СтрокаСобытие = СтрокаБлок.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСобытие, СтароеСобытие);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаВерхнегоУровня = ДеревоНовое.Строки.Добавить();
	СтрокаВерхнегоУровня.ЭтоРазделитель = Истина;
	
КонецПроцедуры

Функция Отступ(Просмотрено = Ложь, ДанныеГруппы = Неопределено)
	
	Если НЕ Просмотрено Тогда
		Возврат "     ";
	Иначе
		Если ДанныеГруппы = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат ДанныеГруппы.Отступ;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция НадписьНовыхНет(ДанныеГруппы)
	
	Возврат ДанныеГруппы.НадписьНовыхНет;
	
КонецФункции

Функция ЗаголовокНедавноПросмотренных(ДанныеГруппы)
	
	Возврат ДанныеГруппы.ЗаголовокНедавноПросмотренных;
	
КонецФункции

Функция ЭлементДерева()
	
	КлючиСтруктуры = "Дата, Наименование, Предмет, Сервис, Банк, Статус, Организация,
					|НеПрочитано, Состояние, ЕстьОтвет,
					|Группа,
					|ЕстьКритическиеОшибки";
						
	ПустойЭлемент = Новый Структура(КлючиСтруктуры);
	
	Возврат ПустойЭлемент;
	
КонецФункции

Функция ЕстьИзмененияВДеревеНовых(НовоеДеревоНовых) Экспорт

	ЕстьИзмененияВНовыхСообщениях = Ложь;
	
	// Остались ли после удаления строки, которые есть только в новом дереве?
	Для Каждого Строка1Уровня Из НовоеДеревоНовых.Строки Цикл
		
		Если ЗначениеЗаполнено(Строка1Уровня.Предмет) Тогда
			ЕстьИзмененияВНовыхСообщениях = Истина;
			Прервать;
		КонецЕсли;
		
		Для Каждого Строка2Уровня Из Строка1Уровня.Строки Цикл
			
			Если ЗначениеЗаполнено(Строка2Уровня.Предмет) Тогда
				ЕстьИзмененияВНовыхСообщениях = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;

	Возврат ЕстьИзмененияВНовыхСообщениях;

КонецФункции

Процедура ОтметитьДеревоПросмотренным(Новое) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокиДерева = Новое.ПолучитьЭлементы();
	
	ПредметыДляОтметки = Новый Массив;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.Предмет) Тогда
			ПредметыДляОтметки.Добавить(СтрокаДерева.Предмет);
		КонецЕсли;
		
		ПодстрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		Для Каждого ПодстрокаДерева Из ПодстрокиДерева Цикл
			Если ЗначениеЗаполнено(ПодстрокаДерева.Предмет) Тогда
				ПредметыДляОтметки.Добавить(ПодстрокаДерева.Предмет);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналНовыхСобытий.Предмет КАК Предмет,
		|	ЖурналНовыхСобытий.ПоказатьПользователю КАК ПоказатьПользователю
		|ИЗ
		|	РегистрСведений.ЖурналНовыхСобытийОбменаСБанками КАК ЖурналНовыхСобытий
		|ГДЕ
		|	ЖурналНовыхСобытий.Предмет В(&Предмет)
		|	И ЖурналНовыхСобытий.ПоказатьПользователю = ИСТИНА";
	
	Запрос.УстановитьПараметр("Предмет", ПредметыДляОтметки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОтметитьСсылкуПоказаннойПользователю(ВыборкаДетальныеЗаписи.Предмет);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтметитьСсылкуПоказаннойПользователю(Предмет) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЖурналНовыхСобытийОбменаСБанками.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Предмет.Установить(Предмет);
	НаборЗаписей.Прочитать();
	
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		ЗаписьНабора["ПоказатьПользователю"] = Ложь;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Возвращает тип содержимого по имени файла. Для файлов типа txt возвращается пустое значение.
//
// Параметры:
// 		ИмяФайла - Строка - исходное имя файла для помещения в контейнер.
//
// Возвращаемое значение:
//	 ПеречислениеСсылка.ТипыСодержимогоФайловОбменаСБанками
//
Функция ТипСодержимогоПоИмениФайла(ИмяФайла) Экспорт
	
	РасширениеИмениФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
	
	Если НРег(РасширениеИмениФайла) = "xml" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.xml;
	ИначеЕсли НРег(РасширениеИмениФайла) = "html" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.html;
	ИначеЕсли НРег(РасширениеИмениФайла) = "pdf" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.pdf;
	ИначеЕсли НРег(РасширениеИмениФайла) = "rtf" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.rtf;
	ИначеЕсли НРег(РасширениеИмениФайла) = "tiff" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.tiff;
	ИначеЕсли НРег(РасширениеИмениФайла) = "jpeg" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.jpeg;
	ИначеЕсли НРег(РасширениеИмениФайла) = "png" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.png;
	ИначеЕсли НРег(РасширениеИмениФайла) = "doc" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.ms_word;
	ИначеЕсли НРег(РасширениеИмениФайла) = "xls" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.ms_excel;
	ИначеЕсли НРег(РасширениеИмениФайла) = "odt" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.odf_text;
	ИначеЕсли НРег(РасширениеИмениФайла) = "ods" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.odf_spreadsheet;
	ИначеЕсли НРег(РасширениеИмениФайла) = "docx" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.oxml_word;
	ИначеЕсли НРег(РасширениеИмениФайла) = "xlsx" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.oxml_spreadsheet;
	ИначеЕсли НРег(РасширениеИмениФайла) = "zip" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.zip;
	Иначе
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.Неизвестный;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВызовПереопределяемыхПроцедур

Процедура ПриПолученииТранзакции(Транзакция, Результат) Экспорт
	
	// Вызов переопределяемой процедуры.
	УниверсальныйОбменСБанкамиПереопределяемый.ПриПолученииТранзакции(Транзакция, Результат);
	
	// Обработка статуса документооборота.
	РеквизитыТранзакции = РеквизитыТранзакции(Транзакция);
	Документооборот = РеквизитыТранзакции.Документооборот;
	СтатусДокументооборота = СтатусДокументооборота(Документооборот);
	ОбработатьСтатусДокументооборота(РеквизитыТранзакции.Документооборот, СтатусДокументооборота);
	
КонецПроцедуры

// Вызывается при получении и расшифровке транзакций.
//
// Параметры:
//  Документооборот - СправочникСсылка.ДокументооборотыОбменаСБанками - набор взаимодействий с банком по определенному
//                                                                      предмету обмена (например, заявке на кредит).
//
// Возвращаемое значение:
//   Структура   - см. УниверсальныйОбменСБанками.ОписаниеСтатусаДокументооборота()
//
// Пример реализации:
//
// Сервис = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документооборот, "Сервис");
// Если Сервис = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит Тогда
//	ЗаявкиНаКредит.СтатусДокументооборота(Документооборот, ОписаниеСтатуса);
// КонецЕсли;
//
Функция СтатусДокументооборота(Документооборот) Экспорт
	
	ОписаниеСтатуса = ОписаниеСтатусаДокументооборота();
	
	// Вызов переопределяемой процедуры.
	УниверсальныйОбменСБанкамиПереопределяемый.СтатусДокументооборота(Документооборот, ОписаниеСтатуса);
	
	Возврат ОписаниеСтатуса;
	
КонецФункции

// Вызывается после расшифровки всех файлов транспортного контейнера, если криптография происходит на сервере или в случае ошибки.
// Для поддержки случая криптографии на клиенте необходимо переопределить
// УниверсальныйОбменСБанкамиКлиентПереопределяемый.ПослеРасшифровкиТранспортногоКонтейнера().
// 
// Параметры:
//  Транзакция - СправочникСсылка.ТранзакцииОбменаСБанками - Элемент справочника, созданный на основании данных контейнера.
//  Результат - Структура - Содержит ключи:
//		* Выполнено - Булево - признак успешности выполения операции.
//		* ОписаниеОшибки  - Строка - Текст ошибки, если возникла, или пустая строка, если нет ошибок.
//		* Предупреждения  - Строка - Предупреждения, возникшие при расшифровке и проверке подписи.
//		* ОтмененоПользователем  - Булево - признак отмены пользователем.
//		* ПодписьНеДействительна  - Булево - Истина, если подпись под одним из документов неверна.
//		* НеизвестныйСертификатПодписи  - Булево - Истина, если подпись выполнена неизвестным сертификатом.
Процедура ПриРасшифровкеТранзакции(Транзакция, Результат) Экспорт
	
	// Вызов переопределяемой процедуры.
	УниверсальныйОбменСБанкамиПереопределяемый.ПриРасшифровкеТранзакции(Транзакция, Результат);
	
	// Обработка статуса документооборота.
	РеквизитыТранзакции = РеквизитыТранзакции(Транзакция);
	Документооборот = РеквизитыТранзакции.Документооборот;
	СтатусДокументооборота = СтатусДокументооборота(Документооборот);
	ОбработатьСтатусДокументооборота(РеквизитыТранзакции.Документооборот, СтатусДокументооборота);
	
КонецПроцедуры

// Вызывается после отправки транзакции или при ошибке отправки.
// 
// Параметры:
//  Транзакция - СправочникСсылка.ТранзакцииОбменаСБанками - Элемент справочника, созданный на основании данных контейнера.
//  Результат - Структура - Содержит ключи:
//		* Выполнено - Булево - признак успешности выполения операции.
//		* ОписаниеОшибки  - Строка - Текст ошибки, если возникла, или пустая строка, если нет ошибок.
Процедура ПриОтправкеТранзакции(Транзакция, Результат) Экспорт

	// Вызов переопределяемой процедуры.
	УниверсальныйОбменСБанкамиПереопределяемый.ПриОтправкеТранзакции(Транзакция, Результат);
	
	// Обработка статуса документооборота.
	РеквизитыТранзакции = УниверсальныйОбменСБанками.РеквизитыТранзакции(Транзакция);
	Документооборот = РеквизитыТранзакции.Документооборот;
	СтатусДокументооборота = СтатусДокументооборота(Документооборот);
	ОбработатьСтатусДокументооборота(РеквизитыТранзакции.Документооборот, СтатусДокументооборота);
	
КонецПроцедуры

Функция ЕстьКритическиеОшибкиДокументооборота(Сервис, Документооборот, ДополнительныеПараметры) Экспорт
	
	Результат = Ложь;
	УниверсальныйОбменСБанкамиПереопределяемый.
		ЕстьКритическиеОшибкиДокументооборота(Сервис, Документооборот, ДополнительныеПараметры, Результат);
	
	Возврат Результат;
	
КонецФункции

// Текущее состояние отправки
//
// Параметры:
//  Ссылка					 - ДокументСсылка, СправочникСсылка - ссылка на объект, отправляемый в контролирующие органы.
//  КонтролирующийОрган		 - Строка или Перечисление.ТипыКонтролирующихОрганов
//  ДополнительныеПараметры	 - Структура:
//		Если содержит поле "ПолучатьОшибкиОтправки", то в результате возращаются поля НеотправленныеИзвещения и ЕстьКритическиеОшибки.
//		Если содержит поле "ПоказыватьПомеченныеНаУдаление", то анализируеются даже помеченные на удаление отправки.
//		Если содержит поле "ПолучатьДаты", то возвращаются даты смены состояния, иначе возврадается пустая дата.
//		Если содержит поле "Отправка", то возвращается информация по этой отправке(циклу обмена или отправке), иначе по последней.
// 
// Возвращаемое значение:
//  В случае ошибки или отсуствия данных, возвращается значение Неопределено.
//	Если данные есть, то возвращается структура с полями:
//	ТекущийЭтапОтправки - структура с полями:
//		ТекстНадписи - Строка - текст, отображаемый в панели отправки объекта
//		ТекстСтатуса - Строка - текст, отображаемый в колонке Состояние таблиц формы Отчетность
//		Дата - Дата - Дата текущего этапа. Возращается, если ДополнительныеПараметры содержат поле "ПолучатьДаты".
//		КомментарийКСостоянию
//		НаименованиеПротокола
//		Протокол	 - Ссылка на транспортное сообщение или отправку или Неопределено.
//		СостояниеСдачиОтчетности - ПеречислениеСсылка.СостояниеСдачиОтчетности
//		ЭтапПройден - Булево
//	НеотправленныеИзвещения - Структура, поля перечислены ниже. 
//		Возращается, если ДополнительныеПараметры содержат поле "ПолучатьОшибкиОтправки".
//			МассивСообщенийНеИмеющихПодтверждений - Массив
//			МассивНеотправленныхПодтверждений - Массив
//			ЕстьНеотправленныеИзвещения - Булево
//	ЕстьКритическиеОшибки - Булево.
//		Возращается, если ДополнительныеПараметры содержат поле "ПолучатьОшибкиОтправки".
Функция ТекущееСостояниеДокументооборота(Знач Документооборот, ДополнительныеПараметры = Неопределено) Экспорт
	
	Попытка
		
		Сервис = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документооборот, "Сервис");
		
		ТекущееСостояние = Новый Структура;
		ТекущееСостояние.Вставить("ТекущийЭтапОтправки");
		ТекущееСостояние.Вставить("НеотправленныеИзвещения");
		ТекущееСостояние.Вставить("ЕстьКритическиеОшибки");
		ТекущееСостояние.Вставить("ТаблицаЭтаповОтправки");
		ТекущееСостояние.Вставить("Сервис", Сервис);
		
		// Вся таблица этапов
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправки(Документооборот, ДополнительныеПараметры);
		
		Если ТаблицаЭтаповОтправки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТаблицаЭтаповОтправки.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Текущий этап отправки (для прорисовки панели и определния статуса в списке отчетов)
		ТекущийЭтапОтправки = ТекущийЭтапДокументооборота(ТаблицаЭтаповОтправки);
		ТекущееСостояние.Вставить("ТекущийЭтапОтправки", ТекущийЭтапОтправки);
		
		ПолучатьОшибкиОтправки = ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
			И ДополнительныеПараметры.Свойство("ПолучатьОшибкиОтправки") 
			И ДополнительныеПараметры.ПолучатьОшибкиОтправки;
			
		Если ПолучатьОшибкиОтправки Тогда
			// Критические ошибки
			ТекущееСостояние.Вставить("ЕстьКритическиеОшибки", 
				ЕстьКритическиеОшибкиДокументооборота(Сервис, Документооборот, ДополнительныеПараметры));
			
			// Неотправленные или несозданные подтверждения
			Отбор = Новый Структура;
			Отбор.Вставить("Документооборот", Документооборот);
			ТекущееСостояние.Вставить("НеотправленныеИзвещения",
				НеотправленныеИзвещения(Сервис, Отбор));
		КонецЕсли;
		
		ВозвращатьТаблицуЭтаповОтправки = ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
			И ДополнительныеПараметры.Свойство("ВозвращатьТаблицуЭтаповОтправки") 
			И ДополнительныеПараметры.ВозвращатьТаблицуЭтаповОтправки;
			
		Если ВозвращатьТаблицуЭтаповОтправки Тогда
			ТекущееСостояние.Вставить("ТаблицаЭтаповОтправки", ТаблицаЭтаповОтправки);
		КонецЕсли;
		
	Исключение
		
		ТекущееСостояние = Неопределено;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение текущего состояния отправки, критических ошибок'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , Документооборот,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
		
	Возврат ТекущееСостояние;
		
КонецФункции

#КонецОбласти

#Область ВызовИзПереопределяемыхПроцедурДругихБиблиотек

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"bankflow.1c.ru",
		443,
		НСтр("ru = 'Сервер обмена в рамках технологии 1С:БанкКоннект'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке.
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.БанкиУниверсальногоОбмена);
	Типы.Добавить(Метаданные.Справочники.УслугиБанков);
	Типы.Добавить(Метаданные.Справочники.ДанныеСервисовОбменаСБанками);
	
КонецПроцедуры

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.).
//        По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Например:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.УниверсальныйОбменСБанками;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.Параметризуется = Истина;
	
КонецПроцедуры

// Для задания обработчиков параметров сеанса следует использовать шаблон:
// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
//
// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
//             что один обработчик будет вызван для инициализации всех параметров сеанса
//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
//
Процедура ОбработчикиИнициализацииПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить(
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.КлючПараметровДлительнойОтправкиСервер(),
		"ДлительныеОперацииОбменаСБанками.ПриУстановкеПараметровСеанса");
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие - 
//    * Ключ - псевдоним метода, например ОчиститьОбластьДанных.
//    * Значение - имя метода для вызова, например РаботаВМоделиСервиса.ОчиститьОбластьДанных.
//        В качестве значения можно указать Неопределено, в этом случае считается что имя 
//        совпадает с псевдонимом.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.УниверсальныйОбменСБанками.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура устанавливает значение реквизита "Версия" справочника "Услуги банков" равным 0.
// Может быть использована для принудительного обновления данных в этом справочнике при
// следующей синхронизации с сервером обмена.
Процедура СброситьВерсиюУслугБанка(Сервис) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;

	Если ОбменДаннымиСервер.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Сервис", Сервис);
	Услуги = Справочники.УслугиБанков.Выбрать(, , Отбор);
	Пока Услуги.Следующий() Цикл
		Объект = Услуги.ПолучитьОбъект();
		Объект.Версия = 0;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает значение реквизита "Версия" справочника "БанкиУниверсальногоОбмена" равным 0.
// Может быть использована для принудительного обновления данных в этом справочнике при
// следующей синхронизации с сервером обмена.
Процедура СброситьВерсиюБанков() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;

	Если ОбменДаннымиСервер.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;
	
	Банки = Справочники.БанкиУниверсальногоОбмена.Выбрать();
	Пока Банки.Следующий() Цикл
		Объект = Банки.ПолучитьОбъект();
		Объект.Версия = 0;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
	КонецЦикла;
	
КонецПроцедуры

Функция СведенияОПредмете(Сервис, Предмет, СписокРеквизитов = Неопределено) Экспорт
	
	Сведения = Новый Структура;
	Сведения.Вставить("Банк");
	Сведения.Вставить("Организация");
	
	УниверсальныйОбменСБанкамиПереопределяемый.СведенияОПредмете(Сервис, Предмет, Сведения, СписокРеквизитов);
	
	Возврат Сведения;
	
КонецФункции

Функция ИспользуетсяОднаОрганизация() Экспорт
	
	// Если нет функциональной опции, то работает как будто в базе несколько организаций.
	Если НЕ ЕстьФункциональнаяОпцияИспользоватьНесколькоОрганизаций() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если функциональная опция есть, то возвращаем ее значение.
	ИспользуетсяОднаОрганизация = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийРегламентированнаяОтчетность");
	
	Возврат ИспользуетсяОднаОрганизация; 
		
КонецФункции

Функция ТаблицаЗначенийВСоответствие(Таблица, КолонкаКлюча) Экспорт
	
	Результат = Новый Соответствие;
	Для каждого Строка Из Таблица Цикл
		ДанныеСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		Результат.Вставить(ДанныеСтроки[КолонкаКлюча], ДанныеСтроки);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ТекущийЭтапДокументооборота(ТаблицаЭтаповОтправки) Экспорт
	
	НомерЭтапа = ТаблицаЭтаповОтправки.Количество();
	
	// В таблице этапов определяем последний
	ТекущийЭтап = Неопределено;
	Пока НомерЭтапа >= 0 Цикл
		
		НомерЭтапа = НомерЭтапа - 1;
		
		ТекущийЭтап = ТаблицаЭтаповОтправки[НомерЭтапа];
		Если ТекущийЭтап.ЭтапПройден ИЛИ НомерЭтапа = 0 Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	// Строку таблицы значений последнего этапа преобразуем к структуре
	Если ТекущийЭтап <> Неопределено Тогда
		СтруктураТекущегоЭтапа = Новый Структура;
		Для каждого Колонка Из ТаблицаЭтаповОтправки.Колонки Цикл
			СтруктураТекущегоЭтапа.Вставить(Колонка.Имя, ТекущийЭтап[Колонка.Имя]);
		КонецЦикла;
		
		Возврат СтруктураТекущегоЭтапа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЗаготовкаТаблицыЭтаповОтправки() Экспорт
	
	ТаблицаЭтаповОтправки = Новый ТаблицаЗначений;
	ТаблицаЭтаповОтправки.Колонки.Добавить("ТекстНадписи", 				Новый ОписаниеТипов("Строка"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("Дата" 						);
	ТаблицаЭтаповОтправки.Колонки.Добавить("КомментарийКСостоянию", 	Новый ОписаниеТипов("Строка,ФорматированнаяСтрока"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("ЭтапПройден", 				Новый ОписаниеТипов("Булево"));
	// Возможные значения: ОтрицательныйРезультат, ПоложительныйРезультат, Начат, НеНачат
	ТаблицаЭтаповОтправки.Колонки.Добавить("СостояниеДокументооборота", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументооборотаОбменаСБанками"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("НаименованиеПротокола", 	Новый ОписаниеТипов("Строка"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("Протокол");
	ТаблицаЭтаповОтправки.Колонки.Добавить("Транзакция",				Новый ОписаниеТипов("СправочникСсылка.ТранзакцииОбменаСБанками"));
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция СоздатьВременныйКаталог(Знач ИмяПодкаталога = Неопределено) Экспорт
	
	ИмяКаталога = КаталогВременныхФайлов();
	РазделительПутиОС = ПолучитьРазделительПути();
	Если Прав(ИмяКаталога, 1) <> РазделительПутиОС Тогда
		ИмяКаталога = ИмяКаталога + РазделительПутиОС;
	КонецЕсли;
	
	Если ИмяПодкаталога = Неопределено Тогда
		ИмяПодкаталога = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ИмяКаталога = ИмяКаталога + ИмяПодкаталога + РазделительПутиОС;
	Попытка
		СоздатьКаталог(ИмяКаталога);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ИмяКаталога;
	
КонецФункции

Процедура УдалитьВременныйФайл(ИмяФайла) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Файл = Новый Файл(ИмяФайла);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Удаление временного файла'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
КонецПроцедуры

Функция ТипСодержимогоПоСтроке(СтрТипСодержимого) Экспорт
	
	Если НРег(СтрТипСодержимого) = "plain866" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.Текст866;
	ИначеЕсли НРег(СтрТипСодержимого) = "текст1251"
		ИЛИ НРег(СтрТипСодержимого) = "plain1251" Тогда
			Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.Текст1251;
	ИначеЕсли НРег(СтрТипСодержимого) = "xml" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.xml;
	ИначеЕсли НРег(СтрТипСодержимого) = "html" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.html;
	ИначеЕсли НРег(СтрТипСодержимого) = "pdf" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.pdf;
	ИначеЕсли НРег(СтрТипСодержимого) = "rtf" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.rtf;
	ИначеЕсли НРег(СтрТипСодержимого) = "tiff" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.tiff;
	ИначеЕсли НРег(СтрТипСодержимого) = "jpeg" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.jpeg;
	ИначеЕсли НРег(СтрТипСодержимого) = "png" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.png;
	ИначеЕсли НРег(СтрТипСодержимого) = "doc" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.ms_word;
	ИначеЕсли НРег(СтрТипСодержимого) = "xls" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.ms_excel;
	ИначеЕсли НРег(СтрТипСодержимого) = "odt" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.odf_text;
	ИначеЕсли НРег(СтрТипСодержимого) = "ods" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.odf_spreadsheet;
	ИначеЕсли НРег(СтрТипСодержимого) = "docx" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.oxml_word;
	ИначеЕсли НРег(СтрТипСодержимого) = "xlsx" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.oxml_spreadsheet;
	ИначеЕсли НРег(СтрТипСодержимого) = "unknown" Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.Неизвестный;
	Иначе
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Возвращает тип содержимого по кодировке файла. Используется для файлов с расширением txt.
// Поддерживаются кодировки ANSI, OEM.
//
// Параметры:
// 		Кодировка   - КодировкаТекста - кодировка файла для помещения в контейнер.
Функция ТипСодержимогоТекстовогоФайлаПоКодировке(Кодировка) Экспорт

	Если Кодировка = КодировкаТекста.ANSI Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.Текст1251;
	ИначеЕсли Кодировка = КодировкаТекста.OEM Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.Текст866;
	Иначе
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Возвращает записи присоединенных файлов объекта.
//
// Параметры:
//  Объект                       - Ссылка - ссылка на объект, который может содержать присоединенные файлы,
//                               - Массив - массив ссылок на объекты.
//  ИменаСправочников            - Строка - имена справочников присоединенных файлов через запятую, при пустом значении
//                                 используется имя справочника по умолчанию,
//                               - Неопределено - использовать имя справочника по умолчанию,
//                                 при равенстве Неопределено параметров ИменаСправочников, ИсходноеИмяФайла,
//                                 ПоляПрисоединенногоФайла и если в параметре Объект передан не массив, в параметре
//                                 ВключатьПомеченныеНаУдаление передана Истина, используется стандартная процедура,
//                                 возвращающая массив ссылок на присоединенные файлы из всех справочников присоединенных
//                                 файлов объекта.
//  ИсходноеИмяФайла             - Строка - исходное имя присоединенного файла, хранимое в ресурсе ИсходноеИмяФайла,
//                                 не ограничено 150 символами, как имя файла без расширения в стандартном реквизите Наименование,
//                                 при пустом значении возвращаются все файлы,
//                               - Неопределено - вернуть все файлы, см. также ИменаСправочников.
//  ПоляПрисоединенногоФайла     - Строка - возвращаемые поля справочника присоединенных файлов через запятую,
//                                 при непустом значении возвращается таблица значений, первая колонка содержит ссылку
//                                 на присоединенный файл, следующие колонки соответствуют перечисленным полям
//                                 справочника, при пустом значении возвращается массив ссылок на присоединенные файлы.
//                                 Неопределено - вернуть только ссылки на присоединенные файлы,
//                                 см. также ИменаСправочников.
//  ВключатьПомеченныеНаУдаление - Булево - при значении Истина возвращать также помеченные на удаление.
//
// Возвращаемое значение:
//  Массив                       - массив ссылок на присоединенные файлы, возвращается при пустом значении
//                                 ПоляПрисоединенногоФайла,
//  ТаблицаЗначений              - таблица со ссылками на присоединенные файлы в первой колонке, значениями
//                                 перечисленных в ПоляПрисоединенногоФайла полей справочника присоединенных файлов
//                                 в следующих колонках.
//
Функция ПрикрепленныеФайлыКОбъектуИзСправочника(
	Знач Объект,
	Знач ИменаСправочников = Неопределено,
	Знач ИсходноеИмяФайла = Неопределено,
	Знач ПоляПрисоединенногоФайла = Неопределено,
	Знач ВключатьПомеченныеНаУдаление = Ложь) Экспорт
	
	Если ТипЗнч(Объект) <> Тип("Массив") И ИменаСправочников = Неопределено И ИсходноеИмяФайла = Неопределено
		И ПоляПрисоединенногоФайла = Неопределено И ВключатьПомеченныеНаУдаление Тогда
		// чтение из всех справочников присоединенных файлов объекта
		МассивФайлов = Новый Массив;
		РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект, МассивФайлов);
		Возврат МассивФайлов;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИменаСправочников) Тогда
		ТипВладельцаФайлов = ТипЗнч(Объект);
		Если ТипВладельцаФайлов = Тип("Массив") Тогда
			ТипВладельцаФайлов = ТипЗнч(Объект[0]);
		КонецЕсли;
		МетаданныеВладельца = Метаданные.НайтиПоТипу(ТипВладельцаФайлов);
		ИменаСправочников = МетаданныеВладельца.Имя + "ПрисоединенныеФайлы";
	КонецЕсли;
	
	МассивИменСправочников = СтрРазделить(ИменаСправочников, ",");
	
	Если ЗначениеЗаполнено(ПоляПрисоединенногоФайла) Тогда
		МассивПолей = СтрРазделить(ПоляПрисоединенногоФайла, ",");
		Для ИндексМассива = 0 По МассивПолей.Количество() - 1 Цикл
			ИмяПоля = СокрЛП(МассивПолей[ИндексМассива]);
			МассивПолей[ИндексМассива] = "ПрисоединенныеФайлы." + ИмяПоля + " КАК " + ИмяПоля;
		КонецЦикла;
		ПоляПрисоединенногоФайла = СтрСоединить(МассивПолей, ",
			|");
	КонецЕсли;
	
	ТекстЗапросов = "";
	Для каждого ЭлементМассива Из МассивИменСправочников Цикл
		ИмяСправочника = СокрЛП(ЭлементМассива);
		Если ЗначениеЗаполнено(ТекстЗапросов) Тогда
			ТекстЗапросов = ТекстЗапросов + "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
		КонецЕсли;
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ПрисоединенныеФайлы.Ссылка КАК Ссылка" + ?(ЗначениеЗаполнено(ПоляПрисоединенногоФайла), ",
			|	" + ПоляПрисоединенногоФайла, "") + "
			|ИЗ
			|	&ИмяСправочника КАК ПрисоединенныеФайлы
			|ГДЕ
			|	ПрисоединенныеФайлы.ВладелецФайла" + ?(ТипЗнч(Объект) = Тип("Массив"),
					" В (&ВладелецФайлов)", " = &ВладелецФайлов") + ?(ЗначениеЗаполнено(ИсходноеИмяФайла), "
			|	И ПрисоединенныеФайлы.ИсходноеИмяФайла = &ИсходноеИмяФайла", "") + ?(НЕ ВключатьПомеченныеНаУдаление, "
			|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
		ТекстЗапросов = ТекстЗапросов + ТекстЗапроса;
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапросов);
	Запрос.УстановитьПараметр("ВладелецФайлов", Объект);
	Если ЗначениеЗаполнено(ИсходноеИмяФайла) Тогда
		Запрос.УстановитьПараметр("ИсходноеИмяФайла", ИсходноеИмяФайла);
	КонецЕсли;
	
	Попытка
		Если ЗначениеЗаполнено(ПоляПрисоединенногоФайла) Тогда
			Возврат Запрос.Выполнить().Выгрузить();
		Иначе
			Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьТранспортныйКонтейнер(ТранспортныйКонтейнер, СДанными = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТранспортныеКонтейнеры.ИсходноеИмяФайла КАК ИмяФайла,
	               |	ТранспортныеКонтейнеры.Размер КАК Размер
	               |ИЗ
	               |	Справочник.ТранзакцииОбменаСБанкамиПрисоединенныеФайлы КАК ТранспортныеКонтейнеры
	               |ГДЕ
	               |	ТранспортныеКонтейнеры.ВладелецФайла = &ТранспортныйКонтейнер
	               |	И НЕ ТранспортныеКонтейнеры.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТранспортныйКонтейнер", ТранспортныйКонтейнер);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если СДанными = Истина Тогда
		
		Результат.Колонки.Добавить("Данные");
		
		ТаблицаФайлов = ПрикрепленныеФайлыКОбъектуИзСправочника(
			ТранспортныйКонтейнер,
			"ТранзакцииОбменаСБанкамиПрисоединенныеФайлы",
			,
			"ИсходноеИмяФайла");
		
		Для каждого СтрокаТаблицы Из ТаблицаФайлов Цикл
			СтрокаТаблицы.ИсходноеИмяФайла = ВРЕГ(СтрокаТаблицы.ИсходноеИмяФайла);
		КонецЦикла;
		
		Для каждого СтрокаРезультата Из Результат Цикл
			ИсходноеИмяФайла = ВРЕГ(СтрокаРезультата.ИмяФайла);
			
			СтрокаТаблицы = ТаблицаФайлов.Найти(ИсходноеИмяФайла, "ИсходноеИмяФайла");
			Если СтрокаТаблицы <> Неопределено Тогда
				ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СтрокаТаблицы.Ссылка);
				СтрокаРезультата.Данные = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(0));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТранспортныйКонтейнерТранзакцииСформирован(Тразакция) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ИСТИНА КАК ЕстьКонтейнер
	                      |ИЗ
	                      |	Справочник.ТранзакцииОбменаСБанкамиПрисоединенныеФайлы КАК ТранспортныеКонтейнеры
	                      |ГДЕ
	                      |	ТранспортныеКонтейнеры.ВладелецФайла = &ТранспортныйКонтейнер");
	Запрос.УстановитьПараметр("ТранспортныйКонтейнер", Тразакция);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ТранзакцияЗапакована(Транзакция) Экспорт
	
	// В базе данные есть файл с архивом файлов транзакции.
	Возврат ТранспортныйКонтейнерТранзакцииСформирован(Транзакция);
	
КонецФункции

Функция ОбработатьСтатусДокументооборота(Документооборот, Статус) Экспорт
	
	Если Статус.Завершен Тогда
		Возврат ЗавершитьДокументооборот(Документооборот, Статус.ДатаЗавершения);
	Иначе
		Возврат УстановитьСтатусОжиданияОтветаОтБанка(Документооборот, Статус.ОжидаетсяОтвет);
	КонецЕсли;
	
КонецФункции

Функция ОбработатьРезультатРасшифровкиТранзакции(Транзакция, РезультатРасшифровки) Экспорт
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Выполнено");
	ПараметрыМетода.Вставить("ОписаниеОшибки");
	ПараметрыМетода.Вставить("Предупреждения");
	ЗаполнитьЗначенияСвойств(ПараметрыМетода, РезультатРасшифровки);
	
	Попытка
		ПриРасшифровкеТранзакции(Транзакция, ПараметрыМетода);
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка в переопределяемом методе ПриРасшифровкеТранзакции.
			|%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьСобытиеВЖурнал(ТекстСообщения,
			НСтр("ru = 'ПриРасшифровкеТранзакции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), Транзакция);
		Возврат Ложь;
	КонецПопытки;
	
	МенеджерЗаписи = РегистрыСведений.СвойстваТранзакцийОбменаСБанками.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Транзакция = Транзакция;
	МенеджерЗаписи.Организация = Транзакция.Организация;
	МенеджерЗаписи.Прочитать();
	
	Если РезультатРасшифровки.Выполнено Тогда
		МенеджерЗаписи.ТребуетРасшифровки = Ложь;
	КонецЕсли;
	
	Если РезультатРасшифровки.ПодписьНеДействительна
		ИЛИ РезультатРасшифровки.НеизвестныйСертификатПодписи Тогда
		МенеджерЗаписи.ТребуетПроверкиПодписи = Истина;
	Иначе
		МенеджерЗаписи.ТребуетПроверкиПодписи = Ложь;
	КонецЕсли;
	
	Если МенеджерЗаписи.Модифицированность() Тогда
		Если МенеджерЗаписи.ТребуетРасшифровки ИЛИ МенеджерЗаписи.ТребуетПроверкиПодписи Тогда
			МенеджерЗаписи.Транзакция = Транзакция;
			МенеджерЗаписи.Организация = Транзакция.Организация;
			МенеджерЗаписи.Записать();
		Иначе
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция КонтейнерТранзакцииРаспакован(Транзакция) Экспорт
	
	// Контейнер распакован полностью или частично.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ИСТИНА КАК Поле1
	                      |ИЗ
	                      |	Справочник.ТранзакцииОбменаСБанкамиСодержимоеПрисоединенныеФайлы КАК СодержимоеТранзакции
	                      |ГДЕ
	                      |	СодержимоеТранспортныхКонтейнеров.ВладелецФайла = &Транзакция");
	Запрос.УстановитьПараметр("Транзакция", Транзакция);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьКриптографическиеСтатусыТранзакций(Сервис = Неопределено, СписокТранзакций = Неопределено) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СвойстваТранзакцийОбменаСБанками.Транзакция КАК Транзакция,
	               |	СвойстваТранзакцийОбменаСБанками.ТребуетРасшифровки КАК ТребуетРасшифровки,
	               |	СвойстваТранзакцийОбменаСБанками.ТребуетПроверкиПодписи КАК ТребуетПроверкиПодписи
	               |ИЗ
	               |	РегистрСведений.СвойстваТранзакцийОбменаСБанками КАК СвойстваТранзакцийОбменаСБанками
	               |ГДЕ
	               |	СвойстваТранзакцийОбменаСБанками.Транзакция.ПометкаУдаления = ЛОЖЬ
	               |	И СвойстваТранзакцийОбменаСБанками.Транзакция.Документооборот.ПометкаУдаления = ЛОЖЬ
	               |	И (&НеФильтроватьПоСервисам
	               |			ИЛИ СвойстваТранзакцийОбменаСБанками.Транзакция.Документооборот.Сервис = &Сервис)
	               |	И (&НеФильтроватьПоТранзакциям
	               |			ИЛИ СвойстваТранзакцийОбменаСБанками.Транзакция В (&СписокТранзакций))";
				   
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НеФильтроватьПоСервисам", Сервис = Неопределено);
	Запрос.УстановитьПараметр("Сервис", Сервис);
	Запрос.УстановитьПараметр("НеФильтроватьПоТранзакциям", СписокТранзакций = Неопределено);
	Запрос.УстановитьПараметр("СписокТранзакций", СписокТранзакций);
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
КонецФункции

Функция ПоместитьДокументыКонтейнераВЖурналОперацийСФайлами(Транзакция, ТранспортнаяИнформация, КаталогСДаннымиКонтейнера)

	Результат = Новый Структура;
	Результат.Вставить("Идентификатор", Неопределено);
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ДокументыКонтейнера", Новый Массив);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ЭтоОблачныйСертификатПользователя", Ложь);
	Результат.Вставить("ОблачныйСертификат", Неопределено);
	
	Идентификатор = Строка(Новый УникальныйИдентификатор);
	ДокументыКонтейнера = Результат.ДокументыКонтейнера;
	
	Сервис = ОпределитьСервисПоСтроке(ТранспортнаяИнформация.ИдентификаторСервиса);
	
	Сертификаты = Новый Соответствие;
	Для каждого Документ Из ЗначениеВКоллекцию(ТранспортнаяИнформация.Документы.Документ) Цикл
		
		СвойстваДокумента = ПараметрыПомещенияВЖурналОперацийСФайлами();
		
		СвойстваДокумента.Сервис = Сервис;
		СвойстваДокумента.РежимРасшифровки = Истина;
		СвойстваДокумента.Идентификатор = Идентификатор;
		СвойстваДокумента.Предмет = ПолучитьПредметыДокументооборота(Транзакция.Документооборот)[0];
		СвойстваДокумента.Организация = Транзакция.Организация;
		
		СвойстваДокумента.Зашифровать = XMLЗначение(Тип("Булево"), Документ.Зашифрован);
		
		СвойстваДокумента.Подписать = XMLЗначение(Тип("Булево"), Документ.Подписан);
		СвойстваДокумента.Сжать = XMLЗначение(Тип("Булево"), Документ.Сжат);
		СвойстваДокумента.ТипСодержимого = ОпределитьТипСодержимогоПоСтроке(Документ.ТипСодержимого);
		СвойстваДокумента.ИсходноеИмяФайла = Документ.ИсходноеИмяФайла;
		ТипДокументаСтрока = Документ.ТипДокумента;
		СвойстваДокумента.ТипДокумента = ОпределитьТипДокументаПоСтроке(Сервис, ТипДокументаСтрока);
		ИмяФайла = Документ.Содержимое.ИмяФайла;
		ПолноеИмяФайлаСодержимого = КаталогСДаннымиКонтейнера + ИмяФайла;
		НайденныеФайлы = НайтиФайлы(ПолноеИмяФайлаСодержимого);
		Если НайденныеФайлы.Количество() = 0 Тогда
			Результат.ОписаниеОшибки = НСтр("ru='В контейнере отсутсвует файл %1.'");
			Результат.ОписаниеОшибки = СтрШаблон(Результат.ОписаниеОшибки, ИмяФайла);
			ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
				НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			Возврат Результат;
		КонецЕсли;
		
		СвойстваДокумента.ИсходныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайлаСодержимого);
		
		Если СвойстваДокумента.Подписать Тогда
			ПолноеИмяфайлаПодписи = КаталогСДаннымиКонтейнера + Документ.Подпись.ИмяФайла;
			НайденныеФайлы = НайтиФайлы(ПолноеИмяфайлаПодписи);
			Если НайденныеФайлы.Количество() = 0 Тогда
				Результат.ОписаниеОшибки = НСтр("ru='В контейнере отсутсвует подпись файла %1.'");
				Результат.ОписаниеОшибки = СтрШаблон(Результат.ОписаниеОшибки, ИмяФайла);
				ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
					НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
				Возврат Результат;
			КонецЕсли;
			СвойстваДокумента.Подпись = Новый ДвоичныеДанные(ПолноеИмяфайлаПодписи);
		КонецЕсли;
		
		Если СвойстваДокумента.Зашифровать Тогда
			// Извлекаем серийные номера получателей из данных зашифрованного файла.
			Настройки = Новый Структура;
			Настройки.Вставить("ПрочитатьПодписанныеДанные", Ложь);
			СвойстваКриптоСообщения = УниверсальныйОбменСБанкамиСлужебныйВызовСервера.ПолучитьСвойстваКриптосообщения(
				СвойстваДокумента.ИсходныеДанные,
				Настройки);
			Если СвойстваКриптоСообщения.Тип <> "EnvelopedData" Тогда
				Результат.ОписаниеОшибки = НСтр("ru='Зашифрованный файл %1 имеет неверный формат.'");
				Результат.ОписаниеОшибки = СтрШаблон(Результат.ОписаниеОшибки, ИмяФайла);
				ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
					НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
				Возврат Результат;
			КонецЕсли;
			Для каждого Получатель Из СвойстваКриптоСообщения.Получатели Цикл
				Сертификаты.Вставить(ДвоичныеДанныеВСтроку(Получатель.СерийныйНомер), Получатель);
			КонецЦикла;
			СвойстваДокумента.СвойстваКриптоСообщения = СвойстваКриптоСообщения;
		КонецЕсли;
			
		// Помещаем данные в журнал.
		РезультатПомещения = ПоместитьВЖурналОперацияСФайлами(СвойстваДокумента);
		Если НЕ РезультатПомещения.Выполнено Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Ошибка при помещении данных файла %1 в журнал операций: %2.'");
			Результат.ОписаниеОшибки = СтрШаблон(Результат.ОписаниеОшибки, ИмяФайла, РезультатПомещения.ОписаниеОшибки);
			ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
				НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			Возврат Результат;
		КонецЕсли;
		
		ДокументыКонтейнера.Добавить(СвойстваДокумента);
		
	КонецЦикла;
	
	Для каждого КлючЗначение Из Сертификаты Цикл
		СерийныйНомер = КлючЗначение.Ключ;
		Свойства = КлючЗначение.Значение;
		
		// Ищем сертификат среди облачных сертификатов.
		Отбор = Новый Структура;
		Отбор.Вставить("СерийныйНомер", СерийныйНомер);
		Отбор.Вставить("Издатель", Свойства.Издатель);
		Сертификат = ХранилищеСертификатов.НайтиСертификат(Отбор);
		
		Если Сертификат <> Неопределено Тогда
			// Если данные были зашифрованы хотя бы на один облачный ключ, расшифровываем в облаке.
			Результат.ЭтоОблачныйСертификатПользователя = Истина;
			Результат.ОблачныйСертификат = Сертификат;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Выполнено = Истина;
	Результат.ДокументыКонтейнера = ДокументыКонтейнера;
	Результат.Идентификатор = Идентификатор;
	Возврат Результат;
	
КонецФункции

// Помещает расшифрованные данные из журнала операций в присоединенные файлы транзакции.
Функция ПоместитьДанныеЖурналаОперацийСФайламиВДанныеТранзакции(Транзакция, Идентификатор) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	// Получаем данные из журнала операций.
	ПолучитьИсходныеДанные = Ложь;
	ПолучитьРезультаты = Истина;
	ПолучитьПодписи = Истина;
	РезультатыПослеРасшифровки = Истина;
	ВложенияСИсходнымиДанными = ВременныеДанныеТранзакции(Идентификатор, ,
		ПолучитьИсходныеДанные,
		ПолучитьРезультаты,
		ПолучитьПодписи,
		РезультатыПослеРасшифровки);
		
	// Сохраняем результат обработки из вложений в присоединенные файлы.
	Для каждого Вложение Из ВложенияСИсходнымиДанными Цикл
		
		ИмяВложенияБД = Вложение.ИсходноеИмяФайла;
		
		// Помещаем результат расшифровки.
		ДанныеВложения = ПолучитьРезультатОбработкиВложения(Вложение);
		РезультатПомещения = ПоместитьСодержимоеТранзакцииВБазуДанных(Транзакция,
			Вложение.ТипДокумента,
			ДанныеВложения,
			ИмяВложенияБД);
		Если НЕ РезультатПомещения Тогда
			ОписаниеОшибки = НСтр("ru='Ошибка сохранения в базе данных файла %1.'");
			Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ИмяВложенияБД);
			Возврат Результат;
		КонецЕсли;
		
		Если Вложение.Подписать Тогда
			// Помещаем подпись.
			ИмяВложенияБД = ИмяФайлаПодписиПрисоединенныеФайлы(ИмяВложенияБД);
			РезультатПомещения = ПоместитьСодержимоеТранзакцииВБазуДанных(Транзакция,
				Перечисления.ТипыДокументовОбменаСБанками.ЭлектронноЦифроваяПодпись,
				Вложение.Подпись.Получить(),
				ИмяВложенияБД);
			Если НЕ РезультатПомещения Тогда
				ОписаниеОшибки = НСтр("ru='Ошибка сохранения в базе данных подписи файла %1.'");
				Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ИмяВложенияБД);
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	УстановитьПометкуОЗавершении = Истина;
	ОчиститьХранилищаЗначенийЖурналаОперацийСФайлами(Идентификатор, УстановитьПометкуОЗавершении);
	
	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

// Возвращается результат функции ПолучитьДокументыКонтейнера.
Функция ПоместитьДанныеТранзакцииВЖурналОперацийСФайлами(Транзакция) Экспорт
	
	Если НЕ ТранспортныйКонтейнерТранзакцииСформирован(Транзакция) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДанныхКонтейнера = ПолучитьТранспортныйКонтейнер(Транзакция, Истина);
	Если ТаблицаДанныхКонтейнера.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаДанныхКонтейнера.Количество() > 1 Тогда

		ЗаписатьСобытиеВЖурнал(НСтр("ru = 'Контейнер хранится более чем в одном файле.'"),
			НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Транзакция);
		Возврат Неопределено;

	КонецЕсли;
	
	ДанныеКонтейнера = ТаблицаДанныхКонтейнера[0].Данные.Получить();
	
	ИмяФайлаКонтейнера = ПолучитьИмяВременногоФайла();
	ДанныеКонтейнера.Записать(ИмяФайлаКонтейнера);
	
	// Создаем временный каталог.
	КаталогСДаннымиКонтейнера = СоздатьВременныйКаталог(Транзакция.Идентификатор);
	Если КаталогСДаннымиКонтейнера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Разбираем содержимое контейнера.
	ЧтениеZip = Новый ЧтениеZipФайла;
	ЧтениеZip.Открыть(ИмяФайлаКонтейнера);
	УдалитьФайлы(КаталогСДаннымиКонтейнера, "*");
	ЧтениеZip.ИзвлечьВсе(КаталогСДаннымиКонтейнера);
	ЧтениеZip.Закрыть();
	
	// Ищем файл описания пакета.
	НайденныеФайлы = НайтиФайлы(КаталогСДаннымиКонтейнера, ИмяФайлаОписанияТранспортногоКонтейнера());
	Если НайденныеФайлы.Количество() = 0 Тогда
		УдалитьВременныйФайл(КаталогСДаннымиКонтейнера);
		УдалитьВременныйФайл(ИмяФайлаКонтейнера);
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайлаОписания = НайденныеФайлы[0].ПолноеИмя;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаОписания);
	ТранспортнаяИнформация = ФабрикаXDTO.ПрочитатьXML(
		ЧтениеXML,
		ФабрикаXDTO.Тип(
			ПространствоИменТранспортнойИнформации(),
			"ТранспортнаяИнформация"));
	ЧтениеXML.Закрыть();
	
	ВозвращатьДанные = Истина;
	ТолькоЗащифрованные = Истина;
	РезультатПомещения = ПоместитьДокументыКонтейнераВЖурналОперацийСФайлами(Транзакция, ТранспортнаяИнформация, КаталогСДаннымиКонтейнера);
	
	УдалитьВременныйФайл(КаталогСДаннымиКонтейнера);
	УдалитьВременныйФайл(ИмяФайлаКонтейнера);
	
	Возврат РезультатПомещения;
	
КонецФункции

Функция ОпределитьРазмер(Данные) Экспорт
	
	Размер = 0;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(Данные) Тогда // если это адрес во временном хранилище
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(Данные);
			Размер = ДвоичныеДанные.Размер();
		Иначе // если это файл на сервере
			ОбъектФайл = Новый Файл(Данные);
			Размер = ОбъектФайл.Размер();
		КонецЕсли;
	ИначеЕсли ТипДанных = Тип("ХранилищеЗначения") Тогда
		ДвоичныеДанные = Данные.Получить();
		Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
			Возврат 0;
		КонецЕсли;
		Размер = ДвоичныеДанные.Размер();
	ИначеЕсли ТипДанных = Тип("ДвоичныеДанные") Тогда
		Размер = Данные.Размер();
	КонецЕсли;
	
	Возврат Размер;
	
КонецФункции

// Фиксирует событие в журнале регистрации, заполняя часть параметров по-умолчанию.
//
// Параметры:
//  Комментарий  - Строка или ИнформацияОбОшибке - комментарий к событию.
//  ВариантСобытия - Строка - должна быть получена с использованием НСтр("", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
//  Данные       - ссылка на объект, с которым связано событие, или метаданные объекта.
//  Уровень      - УровеньЖурналаРегистрации - если не заполнено, то Ошибка .
//
Процедура ЗаписатьСобытиеВЖурнал(Знач Комментарий = "", Знач ВариантСобытия = "", Знач Данные = Неопределено, Знач Уровень = Неопределено)
	
	ИмяСобытия = УниверсальныйОбменСБанкамиКлиентСервер.СобытиеЖурналаРегистрации(ВариантСобытия);
	
	Если Не ЗначениеЗаполнено(Уровень) Тогда
		Уровень = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных = Данные;
		Данные = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(Данные) Тогда
		ОбъектМетаданных = Данные.Метаданные();
	Иначе
		ОбъектМетаданных = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Комментарий) = Тип("ИнформацияОбОшибке") Тогда
		Комментарий = ПодробноеПредставлениеОшибки(Комментарий);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, ОбъектМетаданных, Данные, Комментарий,
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

Функция ПолучитьДанныеТранзакцииИзБазыДанных(ТранспортныйКонтейнер) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь); 
	Результат.Вставить("ДанныеФайла", Неопределено); 
	
	МассивФайлов = ПрикрепленныеФайлыКОбъектуИзСправочника(
		ТранспортныйКонтейнер,
		"ТранзакцииОбменаСБанкамиПрисоединенныеФайлы");
		
	Если МассивФайлов = Неопределено Тогда
		// ошибка в запросе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить из информационной базы транспортный контейнер %1!%2'"),
			Символ(34) + ТранспортныйКонтейнер.Ссылка + Символ(34),
			Символы.ПС + ИнформацияОбОшибке().Описание);
		ЗаписатьСобытиеВЖурнал(ТекстСообщения,
			НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	Если МассивФайлов.Количество() > 0 Тогда
		ПрисоединенныйФайл = МассивФайлов[0];
		Результат.ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция ПоместитьТранзакциюВБазуДанных(Транзакция, Данные, ИмяФайла, Размер = Неопределено) Экспорт
	
	Если Размер = Неопределено Тогда
		Размер = ОпределитьРазмер(Данные);
	КонецЕсли;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("ХранилищеЗначения") Тогда
		ДвоичныеДанныеФайла = Данные.Получить();
	ИначеЕсли ТипДанных = Тип("Строка") Тогда
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Данные);
	Иначе // если двоичные данные
		ДвоичныеДанныеФайла = Данные;
	КонецЕсли;
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
	
	КомпонентыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	УникальноеИмяФайлаБезРасширения = УниверсальныйОбменСБанкамиКлиентСервер.УникальнаяСтрока(
		КомпонентыИмениФайла.ИмяБезРасширения, 150);
	РасширениеФайлаБезТочки = Сред(КомпонентыИмениФайла.Расширение, 2);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", 						Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов", 				Транзакция);
	ПараметрыФайла.Вставить("ИмяБезРасширения", 			УникальноеИмяФайлаБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", 			РасширениеФайлаБезТочки);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	Неопределено);
	
	ИнформацияОбОбновляемомФайле = Новый Структура;
	ИнформацияОбОбновляемомФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	ИнформацияОбОбновляемомФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
	ИнформацияОбОбновляемомФайле.Вставить("ИмяБезРасширения", 				УникальноеИмяФайлаБезРасширения);
	ИнформацияОбОбновляемомФайле.Вставить("Расширение", 					РасширениеФайлаБезТочки);
	
	НачатьТранзакцию();
	
	Попытка
		
		МассивФайлов = ПрикрепленныеФайлыКОбъектуИзСправочника(
			Транзакция,
			"ТранзакцииОбменаСБанкамиПрисоединенныеФайлы",
			ИмяФайла);
			
		Если МассивФайлов = Неопределено Тогда
			// ошибка в запросе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось сохранить в информационной базе транспортный контейнер %1!%2'"),
				Символ(34) + Транзакция.Ссылка + Символ(34),
				Символы.ПС + ИнформацияОбОшибке().Описание);
			ЗаписатьСобытиеВЖурнал(ТекстСообщения,
				НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			Возврат Ложь;
		КонецЕсли;
		
		Если МассивФайлов.Количество() > 0 Тогда
			ПрисоединенныйФайл = МассивФайлов[0];
			РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОбОбновляемомФайле);
		Иначе
			НоваяСсылкаНаФайл = РаботаСФайлами.НоваяСсылкаНаФайл(Транзакция, "ТранзакцииОбменаСБанкамиПрисоединенныеФайлы");
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , , НоваяСсылкаНаФайл);
		КонецЕсли;
		
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ПрисоединенныйФайлОбъект.ИсходноеИмяФайла = ИмяФайла;
		ПрисоединенныйФайлОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		УдалитьИзВременногоХранилища(АдресФайла);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сохранить в информационной базе транспортный контейнер %1!%2'"),
			Символ(34) + Транзакция.Ссылка + Символ(34),
			Символы.ПС + ИнформацияОбОшибке().Описание);
		ЗаписатьСобытиеВЖурнал(ТекстСообщения,
			НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Ложь;
		
	КонецПопытки;
	
	УдалитьИзВременногоХранилища(АдресФайла);
	Возврат Истина;
	
КонецФункции

Функция ПоместитьСодержимоеТранзакцииВБазуДанных(Транзакция,
			ВидДокумента,
			Данные,
			ИмяФайла) Экспорт
	
	ВидСправочникаПрисоединенныхФайлов = "ТранзакцииОбменаСБанкамиСодержимоеПрисоединенныеФайлы";
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("ХранилищеЗначения") Тогда // если хранилище значения
		ДвоичныеДанныеФайла = Данные.Получить();
	ИначеЕсли ТипДанных = Тип("Строка") Тогда // если полное имя файла
		Если ЭтоАдресВременногоХранилища(Данные) Тогда
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Данные);
		Иначе
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Данные);
		КонецЕсли;
	ИначеЕсли ТипДанных = Тип("Структура") Тогда
		ДвоичныеДанныеФайла = ДвоичныеДанныеИзСтроки64НаСервере(Данные.Строка64);
	Иначе // если двоичные данные
		ДвоичныеДанныеФайла = Данные;
	КонецЕсли;
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
	
	КомпонентыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	УникальноеИмяФайлаБезРасширения = УниверсальныйОбменСБанкамиКлиентСервер.УникальнаяСтрока(
		КомпонентыИмениФайла.ИмяБезРасширения, 150);
	РасширениеФайлаБезТочки = Сред(КомпонентыИмениФайла.Расширение, 2);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", 						Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов", 				Транзакция);
	ПараметрыФайла.Вставить("ИмяБезРасширения", 			УникальноеИмяФайлаБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", 			РасширениеФайлаБезТочки);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	Неопределено);
	
	ИнформацияОбОбновляемомФайле = Новый Структура;
	ИнформацияОбОбновляемомФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	ИнформацияОбОбновляемомФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
	ИнформацияОбОбновляемомФайле.Вставить("ИмяБезРасширения", 				УникальноеИмяФайлаБезРасширения);
	ИнформацияОбОбновляемомФайле.Вставить("Расширение", 					РасширениеФайлаБезТочки);
	
	НачатьТранзакцию();
	
	Попытка
		
		МассивФайлов = ПрикрепленныеФайлыКОбъектуИзСправочника(
			Транзакция,
			ВидСправочникаПрисоединенныхФайлов,
			ИмяФайла);
		
		Если МассивФайлов.Количество() > 0 Тогда
			ПрисоединенныйФайл = МассивФайлов[0];
			РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОбОбновляемомФайле);
		Иначе
			НоваяСсылкаНаФайл = РаботаСФайлами.НоваяСсылкаНаФайл(Транзакция, ВидСправочникаПрисоединенныхФайлов);
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , , НоваяСсылкаНаФайл);
		КонецЕсли;
		
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		
		Идентификатор = Неопределено;
		ПрисоединенныйФайлОбъект.ТипДокумента = ВидДокумента;
		ПрисоединенныйФайлОбъект.Идентификатор = Идентификатор;
		ПрисоединенныйФайлОбъект.ИсходноеИмяФайла = ИмяФайла;
		ПрисоединенныйФайлОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		УдалитьИзВременногоХранилища(АдресФайла);
		ИнформацияОбОшибке = ИнформацияОбОшибке().Описание;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось сохранить в информационной базе содержимое транспортного контейнера транзакции ""%1""!
                  |%2'"),
			Транзакция, ИнформацияОбОшибке);
		ЗаписатьСобытиеВЖурнал(ТекстСообщения,
			НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Транзакция);
		Возврат Ложь;
		
	КонецПопытки;
	
	УдалитьИзВременногоХранилища(АдресФайла);
	Возврат Истина;
	
КонецФункции

Функция СгенерироватьИмяФайлаДокументаВСоставеПакета(ИмяФайла = "", РасширениеБезТочки = "bin") Экспорт
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат СгенерироватьUUID() + "." + РасширениеБезТочки;
	Иначе
		Возврат ИмяФайла + "." + РасширениеБезТочки;
	КонецЕсли;
	
КонецФункции

#Область РаботаСXML

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ИмяКорневогоЭлемента = Неопределено, ВозвратитьДвоичныеДанные = Ложь) Экспорт
	
	ПотокXML = СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ИмяКорневогоЭлемента);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""" +
		КодировкаXMLФайловТранзакции() +
		"""?>" + Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
		
	Если ВозвратитьДвоичныеДанные Тогда
		Поток = Новый ПотокВПамяти;
		Запись = Новый ЗаписьДанных(Поток, КодировкаТекстаФайловТранзакции());
		Запись.ЗаписатьСимволы(ТекстДляЗаписи);
		Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	Иначе
		Возврат ТекстДляЗаписи;
	КонецЕсли;
	
	
КонецФункции

Функция СоздатьНовыйПотокXML()
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция СоздатьДеревоXML() Экспорт
	
	ДеревоXML = Новый ДеревоЗначений;
	ДеревоXML.Колонки.Добавить("Код");
	ДеревоXML.Колонки.Добавить("Тип");
	ДеревоXML.Колонки.Добавить("Значение");
	ДеревоXML.Колонки.Добавить("ЭтоCDATA");
	Возврат ДеревоXML;
	
КонецФункции

Функция ДобавитьУзелXML(
		Родитель,
		Код,
		ЭтоАтрибут = Ложь,
		Значение = Неопределено,
		Необязательный = Ложь,
		ЭтоCDATA = Ложь,
		МаксимальнаяДлинаСтрокиССокращением = Неопределено) Экспорт
	
	Если Необязательный И НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПриведенноеЗначение = Значение;
	Если ЗначениеЗаполнено(МаксимальнаяДлинаСтрокиССокращением) Тогда
		ПриведенноеЗначение = СокрЛП(ПриведенноеЗначение);
		Если МаксимальнаяДлинаСтрокиССокращением <> -1 Тогда
			ПриведенноеЗначение = Лев(ПриведенноеЗначение, МаксимальнаяДлинаСтрокиССокращением);
		КонецЕсли;
		ПриведенноеЗначение = XMLСтрока(ПриведенноеЗначение);
	КонецЕсли;
	
	НовСтр = Родитель.Строки.Добавить();
	
	НовСтр.Код = Код;
	НовСтр.Значение = ПриведенноеЗначение;
	Если ТипЗнч(ЭтоАтрибут) = Тип("Булево") Тогда
		НовСтр.Тип = ?(ЭтоАтрибут, "А", "Э");
	Иначе
		НовСтр.Тип = ЭтоАтрибут;
	КонецЕсли;
	
	ТипЗнчРодитель = ТипЗнч(Родитель);
	Если (ТипЗнчРодитель = Тип("ДеревоЗначений") И Родитель.Колонки.Найти("ЭтоCDATA") <> Неопределено)
	ИЛИ (ТипЗнчРодитель = Тип("СтрокаДереваЗначений") И Родитель.Владелец().Колонки.Найти("ЭтоCDATA") <> Неопределено) Тогда
		НовСтр.ЭтоCDATA = ЭтоCDATA;
	КонецЕсли;
	
	Возврат НовСтр;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ИмяКорневогоЭлемента)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьНачалоЭлемента(ИмяКорневогоЭлемента);
		КонецЕсли;
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ИмяКорневогоЭлемента);
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист Из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ИмяКорневогоЭлемента);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

#КонецОбласти

Функция ПолучитьСписокТиповДокументооборотовСервиса(Сервис) Экспорт
	
	Результат = Новый Массив;
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис).ДеревоОписания;
	
	Для каждого СтрокаДокументооборота Из Описание.Строки Цикл
		Результат.Добавить(СтрокаДокументооборота.ЗначениеПеречисления);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокТиповТранзакцийДокументооборота(Сервис, ТипДокументооборота) Экспорт
	
	Результат = Новый Массив;
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис).ДеревоОписания;
	СтрокаДокументооборота = Описание.Строки.Найти(ТипДокументооборота, "ЗначениеПеречисления", Истина);
	Если СтрокаДокументооборота = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Документооборот не обнаружен в описании.'");
	КонецЕсли;
	
	Для каждого СтрокаТранзакции Из СтрокаДокументооборота.Строки Цикл
		Результат.Добавить(СтрокаТранзакции.ЗначениеПеречисления);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция МакетСервиса(Сервис) Экспорт
	
	Макет = Неопределено;
	УниверсальныйОбменСБанкамиПереопределяемый.МакетСервиса(Сервис, Макет);
	
	Возврат Макет;
	
КонецФункции

#Область КонвертацияДанныхИзСтрокиВОбъектыИОбратно

Функция ОпределитьТипДокументооборотаПоСтроке(Сервис, ТипДокументооборотаСтрока) Экспорт
	
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис);
	Результат = Описание.ДокументооборотИзСтроки.Получить(ТипДокументооборотаСтрока);
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный тип документооборота " + ТипДокументооборотаСтрока + ".'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьТипДокументооборотаПоСсылке(Сервис, СсылкаТипДокументооборота) Экспорт
	
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис);
	Результат = Описание.ДокументооборотВСтроку.Получить(СсылкаТипДокументооборота);
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный документооборот " + СсылкаТипДокументооборота + ".'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьТипДокументооборотаПоКоду(Сервис, КодТипаДокументооборота) Экспорт
	
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис);
	Результат = Описание.ДокументооборотИзКода.Получить(КодТипаДокументооборота);
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный документооборот с кодом " + КодТипаДокументооборота + ".'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьТипДокументооборотаПоДаннымОписанияТранзакции(Сервис, Данные)
	
	Возврат ОпределитьТипДокументооборотаПоКоду(Сервис, Данные.КодТипаДокументооборота);
	
КонецФункции

// Возвращает тип транзакции по значению перечисления
// Параметры:
//   Сервис - Значение перечисления СервисыОбменаСБанками - сервис обмена с банками
//   ТипТранзакцииОбменСБанками - Значение перечисления - значение перечисления, тип перечисления определяется в макете
// Возвращаемое значение:
//   Строка - строковое представление типа транзакции
Функция ОпределитьТипТранзакцииПоСсылке(Сервис, ТипТранзакцииОбменСБанками) Экспорт
	
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис);
	Результат = Описание.ТранзакцияВСтроку.Получить(ТипТранзакцииОбменСБанками);
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный тип транзакции " + ТипТранзакцииОбменСБанками + ".'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьКодТипаТранзакцииПоСсылке(Сервис, ТипТранзакцииОбменСБанками) Экспорт
	
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис);
	Результат = Описание.ТранзакцияВКод.Получить(ТипТранзакцииОбменСБанками);
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный тип транзакции " + ТипТранзакцииОбменСБанками + ".'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьТипТранзакцииПоСтроке(Сервис, СтрокаТипТранзакцииОбменСБанками) Экспорт
	
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис);
	Результат = Описание.ТранзакцияИзСтроки.Получить(СтрокаТипТранзакцииОбменСБанками);
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный тип транзакции " + СтрокаТипТранзакцииОбменСБанками + ".'");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОпределитьТипТранзакцииПоДаннымНаСервере(Сервис, Данные) Экспорт
	
	Возврат ОпределитьТипТранзакцииПоКоду(Сервис, Данные.type);
	
КонецФункции

Функция ОпределитьТипТранзакцииПоКоду(Сервис, КодТипаТранзакцииОбменСБанками) Экспорт
	
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис);
	Результат = Описание.ТранзакцияИзКода.Получить(КодТипаТранзакцииОбменСБанками);
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный код транзакции " + КодТипаТранзакцииОбменСБанками + ".'");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОпределитьТипТранзакцииПоДаннымОписанияТранзакции(Сервис, Данные) Экспорт
	
	Возврат ОпределитьТипТранзакцииПоКоду(Сервис, Данные.КодТипаТранзакции);
	
КонецФункции

Функция ОпределитьТипДокументаПоСсылке(Сервис, ТипДокументовОбменСБанками) Экспорт
	
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис);
	Результат = Описание.ДокументВСтроку.Получить(ТипДокументовОбменСБанками);
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный тип документа " + ТипДокументовОбменСБанками + ".'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьКодТипаДокументаПоСсылке(Сервис, ТипДокументовОбменСБанками) Экспорт
	
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис);
	Результат = Описание.ДокументВКод.Получить(ТипДокументовОбменСБанками);
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный тип документа " + ТипДокументовОбменСБанками + ".'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьТипДокументаПоСтроке(Сервис, ТипДокументовОбменаСБанкамиСтрока) Экспорт
	
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис);
	Результат = Описание.ДокументИзСтроки.Получить(ТипДокументовОбменаСБанкамиСтрока);
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный тип документа " + ТипДокументовОбменаСБанкамиСтрока + ".'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьТипДокументаПоКоду(Сервис, КодТипаДокументовОбменаСБанками) Экспорт
	
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис);
	Результат = Описание.ДокументИзКода.Получить(КодТипаДокументовОбменаСБанками);
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный код тип документа " + КодТипаДокументовОбменаСБанками + ".'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьСервисПоСсылке(СсылкаНаСервис) Экспорт
	
	Сервис = Неопределено;
	УниверсальныйОбменСБанкамиПереопределяемый.
		ОпределитьСервисПоСсылке(СсылкаНаСервис, Сервис);
	Возврат Сервис;
	
КонецФункции

Функция ОпределитьСервисПоСтроке(ИдентификаторСервиса) Экспорт
	
	Сервис = Неопределено;
	УниверсальныйОбменСБанкамиПереопределяемый.
		ОпределитьСервисПоСтроке(ИдентификаторСервиса, Сервис);
	
	Возврат Сервис;
	
КонецФункции

Функция ОпределитьСервисПоИдентификаторуНаСервере(ИдентификаторСервиса) Экспорт
	
	Сервис = Неопределено;
	УниверсальныйОбменСБанкамиПереопределяемый.
		ОпределитьСервисПоИдентификаторуНаСервере(ИдентификаторСервиса, Сервис);
		
	Возврат Сервис;
	
КонецФункции

Функция ОпределитьКодТипаДокументооборотаПоСсылке(Сервис, СсылкаТипДокументооборота) Экспорт
	
	Описание = УниверсальныйОбменСБанкамиПовтИсп.ИзвлечьОписаниеДокументооборотовСервиса(Сервис);
	Результат = Описание.ДокументооборотВКод.Получить(СсылкаТипДокументооборота);
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный документооборот " + СсылкаТипДокументооборота + ".'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьТипСодержимогоПоСтроке(ТипСодержимогоСтрока)
	
	Если ПустаяСтрока(ТипСодержимогоСтрока) ИЛИ ВРЕГ(ТипСодержимогоСтрока) = ВРЕГ("unknown") Тогда
		Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками.Неизвестный;
	КонецЕсли;
	
	Возврат Перечисления.ТипыСодержимогоФайловОбменаСБанками[ТипСодержимогоСтрока];
	
КонецФункции

Функция ОпределитьТипСодержимогоПоСсылке(ТипСодержимогоСсылка)
	
	Если ТипСодержимогоСсылка.Пустая() ИЛИ ТипСодержимогоСсылка = Перечисления.ТипыСодержимогоФайловОбменаСБанками.Неизвестный Тогда
		Возврат "unknown";
	КонецЕсли;
	
	ИмяПеречисления = ТипСодержимогоСсылка.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ТипСодержимогоСсылка);
	
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
КонецФункции

#КонецОбласти

Функция ПолучитьКаталогВременныхФайлов() Экспорт
	
	ВременныйКаталог = КаталогВременныхФайлов();
	РазделительПутиОС = ПолучитьРазделительПути();
	Возврат ?(Прав(ВременныйКаталог, 1) = РазделительПутиОС, ВременныйКаталог, ВременныйКаталог + РазделительПутиОС);
	
КонецФункции

Процедура УдалитьСписокФайлов(МассивИменФайлов)
	
	Для каждого Файл Из МассивИменФайлов Цикл
		УдалитьФайлы(Файл);
	КонецЦикла;
	
КонецПроцедуры

// должна совпадать с КодировкаСимволовФайловТранзакции
Функция КодировкаXMLФайловТранзакции()
	
	Возврат "windows-1251";
	
КонецФункции

// должна совпадать с КодировкаXMLФайловТранзакции
Функция КодировкаТекстаФайловТранзакции()
	
	Возврат КодировкаТекста.ANSI;
	
КонецФункции

Функция ЗаписатьXMLВФайл(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	Попытка
		ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаXMLФайловТранзакции(), , , Символы.ПС);
		ПотокЗаписи.Записать(ТекстДляЗаписи);
		ПотокЗаписи.Закрыть();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось записать файл XML:%1'"), Символы.ПС + ИнформацияОбОшибке().Описание);
		ЗаписатьСобытиеВЖурнал(ТекстСообщения,
			НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура СгенерироватьНаименованиеДокументооборота(Документооборот)
	
	Документооборот.Наименование = "Документооборот обмена с банками "
		+ Документооборот.Идентификатор;
	
КонецПроцедуры

Процедура СгенерироватьНаименованиеТранзакции(Транзакция)
	
	Транзакция.Наименование = "Транзакция обмена с банками " + Транзакция.Идентификатор;
	
КонецПроцедуры

Функция ПустаяДатаЗавершенияДокументооборота() Экспорт
	
	Возврат '39991231235959';
	
КонецФункции

Функция ПредставлениеДокументооборота(Документооборот) Экспорт
	
	Возврат "Документооборот обмена с банками";
	
КонецФункции

Функция ПредставлениеПредмета(Сервис, Предмет, БезИмениБанка = Ложь) Экспорт
	
	Представление = "";
	УниверсальныйОбменСБанкамиПереопределяемый.ПредставлениеПредмета(
		Сервис,
		Предмет,
		БезИмениБанка,
		Представление);
		
	Возврат Представление;
	
КонецФункции

Функция ПолучитьПредметыДокументооборота(Документооборот) Экспорт
	
	Предметы = Документооборот.ДополнительныеПредметы.ВыгрузитьКолонку("Предмет");
	Предметы.Вставить(0, Документооборот.Предмет);
	Возврат Предметы;
	
КонецФункции

Процедура ПриЗаписиОбъекта(Объект, Отказ, Замещение = Неопределено) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("СправочникОбъект.ДокументооборотыОбменаСБанками") Тогда
		ПриЗаписиДокументооборота(Объект, Отказ);
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ТранзакцииОбменаСБанками") Тогда
		ПриЗаписиТранспортногоКонтейнера(Объект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбновитьСвойстваДокументооборота(Документооборот, Предмет = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Документооборот) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Получаем транзакции и отсортировываем их по дате.
	Транзакции = ПолучитьТранзакцииДокументооборота(Документооборот);
	Если Транзакции.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	Транзакции.Сортировать("ДатаТранспорта УБЫВ");
	
	// Инициализируем объект документооборота для записи.
	ДокументооборотОбъект = Документооборот.ПолучитьОбъект();
	Если ДокументооборотОбъект = Неопределено Тогда // значит, документооборот еще не записан
		Возврат Истина;
	КонецЕсли;
	
	// устанавливаем дату транспорта последней транзакции.
	ПоследняяТранзакция = Транзакции[0];
	ДатаТранспортаПоследнейТранзакции = ПоследняяТранзакция.ДатаТранспорта;
	Если ДокументооборотОбъект.ДатаПоследнейТранзакции <> ДатаТранспортаПоследнейТранзакции Тогда
		ДокументооборотОбъект.ДатаПоследнейТранзакции = ДатаТранспортаПоследнейТранзакции;
	КонецЕсли;
	
	// Устанавливаем предмет.
	Если ЗначениеЗаполнено(Предмет) Тогда
		ДокументооборотОбъект.Предмет = Предмет;
	КонецЕсли;
	
	// Записываем, если объект изменялся.
	Если ДокументооборотОбъект.Модифицированность() Тогда
		Попытка
			ДокументооборотОбъект.Записать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось обновить свойства родительского документооборота %1%2'"),
								Символ(34) + Документооборот + Символ(34),
								Символы.ПС + ИнформацияОбОшибке().Описание);
			ЗаписатьСобытиеВЖурнал(ТекстСообщения, , Документооборот);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПередЗаписьюДокументооборота(Объект, Отказ) Экспорт
	
	Объект.ИзмененаПометкаУдаления = (Объект.Ссылка.ПометкаУдаления <> Объект.ПометкаУдаления);
	Если Объект.ИзмененаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда

		Отказ = Истина;
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось записать документооборот %1:
                                      |Не указана организация!'"),
								ПредставлениеДокументооборота(Объект));
		ЗаписатьСобытиеВЖурнал(ТекстОшибки, , Объект.Ссылка);  

	КонецЕсли;
		
	Если НЕ Отказ Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаСоздания) Тогда
			Объект.ДатаСоздания = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.Наименование) Тогда
			СгенерироватьНаименованиеДокументооборота(Объект);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
			Объект.ДатаЗакрытия = ПустаяДатаЗавершенияДокументооборота();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюОбъекта(Объект, Отказ, РежимЗаписи = Неопределено, РежимПроведения = Неопределено, Замещение = Неопределено) Экспорт
	
	ИмяМетаданныхОбъекта = Объект.Метаданные().Имя;
	Если ИмяМетаданныхОбъекта = "ДокументооборотыОбменаСБанками" Тогда
		ПередЗаписьюДокументооборота(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ТранзакцииОбменаСБанками" Тогда
		ПередЗаписьюТранзакции(Объект, Отказ, РежимЗаписи, РежимПроведения);
	ИначеЕсли ИмяМетаданныхОбъекта = "УслугиБанков" Тогда
		ПередЗаписьюУслугиБанка(Объект, Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияОбъекта(Объект, Основание) Экспорт
	
	ИмяМетаданныхОбъекта = Объект.Метаданные().Имя;
	Если ИмяМетаданныхОбъекта = "ТранзакцииОбменаСБанками" Тогда
		ОбработкаЗаполненияТранзакции(Объект, Основание);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияТранзакции(Объект, КонтейнерОснование) Экспорт
	
	Если ТипЗнч(КонтейнерОснование) <> Тип("СправочникСсылка.ТранзакцииОбменаСБанками") Тогда
		Объект.ОшибкаЗаполнения = Истина;
		Возврат;
	КонецЕсли;
		
	Если НЕ КонтейнерТранзакцииРаспакован(КонтейнерОснование) Тогда
		Объект.ОшибкаЗаполнения = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтейнерОснование.Документооборот) Тогда
		Объект.ОшибкаЗаполнения = Истина;
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если ТипВладелецФайла = Тип("СправочникСсылка.ТранзакцииОбменаСБанками") Тогда
		ИменаСправочников.Вставить("ТранзакцииОбменаСБанкамиСодержимоеПрисоединенныеФайлы", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ДвоичныеДанныеВСтроку(Данные) Экспорт
	
	Возврат УниверсальныйОбменСБанкамиКлиентСервер.ДвоичныеДанныеВСтроку(Данные);
	
КонецФункции

Функция СтрокаОтпечаткаВДвоичныеДанные(Строка) Экспорт
	
	ДлинаОтпечаткаВБайтах = 20;
	
	Если СтрДлина(Строка) <> ДлинаОтпечаткаВБайтах * 2 Тогда
		ВызватьИсключение "Неверная длина строкового представления отпечатка!";
	КонецЕсли; 
	
	Данные = ПолучитьДвоичныеДанныеИзHexСтроки(Строка);
	
	Проверка = ДвоичныеДанныеВСтроку(Данные) = Строка;
	Если НЕ Проверка Тогда
		ВызватьИсключение "Ошибка преобразования строки в двоичные данные!";
	КонецЕсли; 
	
	Возврат Данные;
	
КонецФункции

Функция ТекущаяДатаНаСервере() Экспорт
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

// Возвращает таблицу значений с данными сертификатов банков.
Функция СертификатыБанков(Текст, СписокБанков = Неопределено, Сервис = Неопределено) Экспорт
	
	Запрос = Новый Запрос(Текст);
	
	Запрос.УстановитьПараметр("ВозвратитьВсеБанки", СписокБанков = Неопределено);
	Запрос.УстановитьПараметр("СписокБанков", СписокБанков);
	Запрос.УстановитьПараметр("Сервис", Сервис);
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Результат.Колонки.Добавить("АдресСодержимого", Новый ОписаниеТипов("Строка"));
	
	Для каждого Элемент Из Результат Цикл
		Элемент.АдресСодержимого =
			ПоместитьВоВременноеХранилище(Элемент.СертификатСодержимое.Получить(),
				Новый УникальныйИдентификатор);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СертификатШифрованияБанков(Сервис, СписокБанков = Неопределено) Экспорт
	
	Текст = "ВЫБРАТЬ
	        |	УслугиБанков.Банк КАК Банк,
	        |	УслугиБанков.ОтпечатокСертификатаШифрования КАК ОтпечатокСертификатаШифрования,
	        |	БанкиУниверсальногоОбменаСертификаты.Содержимое КАК Содержимое
	        |ПОМЕСТИТЬ втСертификатыСервиса
	        |ИЗ
	        |	Справочник.УслугиБанков КАК УслугиБанков
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанкиУниверсальногоОбмена.Сертификаты КАК БанкиУниверсальногоОбменаСертификаты
	        |		ПО УслугиБанков.ОтпечатокСертификатаШифрования = БанкиУниверсальногоОбменаСертификаты.Отпечаток
	        |ГДЕ
	        |	УслугиБанков.Сервис = &Сервис
	        |	И (&ВозвратитьВсеБанки
	        |			ИЛИ УслугиБанков.Банк В (&СписокБанков))
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ВЫБОР
	        |		КОГДА ЕСТЬNULL(втСертификатыСервиса.ОтпечатокСертификатаШифрования, """") = """"
	        |			ТОГДА СертификатыБанков.Отпечаток
	        |		ИНАЧЕ втСертификатыСервиса.ОтпечатокСертификатаШифрования
	        |	КОНЕЦ КАК СертификатОтпечаток,
	        |	СертификатыБанков.Ссылка КАК Банк,
	        |	ВЫБОР
	        |		КОГДА ЕСТЬNULL(втСертификатыСервиса.ОтпечатокСертификатаШифрования, """") = """"
	        |			ТОГДА СертификатыБанков.Содержимое
	        |		ИНАЧЕ втСертификатыСервиса.Содержимое
	        |	КОНЕЦ КАК СертификатСодержимое,
	        |	СертификатыБанков.НомерСтроки КАК НомерСтроки,
	        |	СертификатыБанков.Ссылка.Идентификатор КАК БанкИдентификатор,
	        |	СертификатыБанков.Ссылка.Наименование КАК БанкНаименование
	        |ИЗ
	        |	Справочник.БанкиУниверсальногоОбмена.Сертификаты КАК СертификатыБанков
	        |		ЛЕВОЕ СОЕДИНЕНИЕ втСертификатыСервиса КАК втСертификатыСервиса
	        |		ПО СертификатыБанков.Ссылка = втСертификатыСервиса.Банк
	        |ГДЕ
	        |	(&ВозвратитьВсеБанки
	        |			ИЛИ СертификатыБанков.Ссылка В (&СписокБанков))
	        |	И СертификатыБанков.Отпечаток = ВЫБОР
	        |			КОГДА ЕСТЬNULL(втСертификатыСервиса.ОтпечатокСертификатаШифрования, """") = """"
	        |				ТОГДА СертификатыБанков.Ссылка.ОтпечатокДействующегоСертификата
	        |			ИНАЧЕ втСертификатыСервиса.ОтпечатокСертификатаШифрования
	        |		КОНЕЦ";
	
	Возврат СертификатыБанков(Текст, ЗначениеВКоллекцию(СписокБанков), Сервис);
	
КонецФункции

Функция СертификатыПодписиБанка(Банк) Экспорт
	
	Текст = "ВЫБРАТЬ 
	        |	СертификатыБанков.Отпечаток КАК СертификатОтпечаток,
	        |	СертификатыБанков.Ссылка КАК Банк,
	        |	СертификатыБанков.Содержимое КАК СертификатСодержимое,
	        |	СертификатыБанков.НомерСтроки КАК НомерСтроки,
	        |	СертификатыБанков.Ссылка.Идентификатор КАК БанкИдентификатор,
	        |	СертификатыБанков.Ссылка.Наименование КАК БанкНаименование
	        |ИЗ
	        |	Справочник.БанкиУниверсальногоОбмена.Сертификаты КАК СертификатыБанков
	        |ГДЕ
	        |	(&ВозвратитьВсеБанки
	        |			ИЛИ СертификатыБанков.Ссылка В (&СписокБанков))";
	
	Возврат СертификатыБанков(Текст, Банк);
	
КонецФункции

Функция СертификатАвторизацииБанка(Банк) Экспорт
	
	Текст = "ВЫБРАТЬ
	        |	СертификатыБанков.Отпечаток КАК СертификатОтпечаток,
	        |	СертификатыБанков.Ссылка КАК Банк,
	        |	СертификатыБанков.Содержимое КАК СертификатСодержимое,
	        |	СертификатыБанков.НомерСтроки КАК НомерСтроки,
	        |	СертификатыБанков.Ссылка.Идентификатор КАК БанкИдентификатор,
	        |	СертификатыБанков.Ссылка.Наименование КАК БанкНаименование
	        |ИЗ
	        |	Справочник.БанкиУниверсальногоОбмена.Сертификаты КАК СертификатыБанков
	        |ГДЕ
	        |	СертификатыБанков.Ссылка В(&СписокБанков)
	        |	И СертификатыБанков.Активный = ИСТИНА";
	
	Сертификаты = СертификатыБанков(Текст, Банк);
	
	Если Сертификаты.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Сертификат = Сертификаты[0];
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Сертификат);
	КонецЕсли;
	
КонецФункции

// Преобразует Массив из структур в ТаблицуЗначений.
Функция МассивВТаблицуЗначений(Данные) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Для Каждого ЭлементМассива Из Данные Цикл
		// создаем колонки для таблицы
		Если Таблица.Колонки.Количество() = 0 Тогда
			Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
				Таблица.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
			КонецЦикла;
		КонецЕсли;
		
		// Добавляем данные в таблицу
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // ПреобразоватьМассивВТаблицуЗначений()

Функция ПреобразоватьОбъектXDTOВСтруктуру(ОбъектXDTOДляПреобразования,
									СтруктураРезультат) Экспорт
	
	КоллекцияСвойствXDTO = ОбъектXDTOДляПреобразования.Свойства();
	
	Для Каждого ЭлементКоллекции Из КоллекцияСвойствXDTO Цикл
		
		ИмяЭлемента      = ЭлементКоллекции.Имя;
		ЭтоЭлементСписка = ЭлементКоллекции.ВерхняяГраница <> 1;
		
		Если ЭтоЭлементСписка Тогда
			
			СписокXDTO = ОбъектXDTOДляПреобразования[ИмяЭлемента];
			
			Массив = Новый Массив;
			СтруктураРезультат.Вставить(ИмяЭлемента, Массив);
			ЗаполнитьМассивРекурсивно(СписокXDTO, Массив);
			Продолжить;
			
		КонецЕсли;
		
		Если ТипЗнч(ОбъектXDTOДляПреобразования.Получить(ЭлементКоллекции)) = Тип("ОбъектXDTO") Тогда
			
			ОбъектXDTO = ОбъектXDTOДляПреобразования.ПолучитьXDTO(ИмяЭлемента);
			
			Структура = Новый Структура;
			СтруктураРезультат.Вставить(ИмяЭлемента, Структура);
			ПреобразоватьОбъектXDTOВСтруктуру(ОбъектXDTO,
										Структура);
			Продолжить;
			
		КонецЕсли;
		
		ИмяЭлементаКоллекции      = ИмяЭлемента;
		ЗначениеЭлементаКоллекции = ОбъектXDTOДляПреобразования.Получить(ЭлементКоллекции);
		СтруктураРезультат.Вставить(ИмяЭлементаКоллекции, ЗначениеЭлементаКоллекции);
		
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Преобразует значение в Массив в случае необходимости.
// Для типов Массив, ТаблицаЗначений, СписокXDTO возвращается исходый объект.
Функция ЗначениеВКоллекцию(Значение) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Массив")
		И ТипЗнч(Значение) <> Тип("ТаблицаЗначений")
		И ТипЗнч(Значение) <> Тип("СписокXDTO") Тогда
		
		Коллекция = Новый Массив;
		Коллекция.Добавить(Значение);
		Возврат Коллекция;
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Возвращает Истина, если есть возможность использования криптографии в модели сервиса.
Функция ДоступнаОблачнаяКриптография() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПризнакИспользования = Константы.ИспользоватьЭлектроннуюПодписьВМоделиСервиса.Получить() И 
		НЕ ПустаяСтрока(Константы.АдресКриптосервиса.Получить());
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат ПризнакИспользования;
	
КонецФункции

// Возвращает результат поиска сертификата функцией ХранилищеСертификатов.НайтиСертификат.
Функция НайтиОблачныйСертификатВХранилище(ОтпечатокИлиСерийныйНомер, Издатель = "", ПоискПоСерийномуНомеру = Ложь) Экспорт
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"УниверсальныйОбменСБанками.ЭтоОблачныйСертификатПользователя", 
		"Отпечаток",
		ОтпечатокИлиСерийныйНомер, 
		Новый ОписаниеТипов("Строка"));
		
	Если НЕ ДоступнаОблачнаяКриптография() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПоискПоСерийномуНомеру Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СерийныйНомер", ОтпечатокИлиСерийныйНомер);
		Отбор.Вставить("Издатель", Издатель);
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("Отпечаток", ОтпечатокИлиСерийныйНомер);
	КонецЕсли;
	
	Сертификат = ХранилищеСертификатов.НайтиСертификат(Отбор);
	
	Возврат Сертификат;
	
КонецФункции

Функция РеквизитыОрганизации(Организация, Реквизиты) Экспорт
	
	Возврат УниверсальныйОбменСБанкамиВызовПовтИсп.РеквизитыОрганизации(Организация, Реквизиты);
	
КонецФункции

// Определяет, нужно ли ожидать сообщений от банков, и исходя из этого отключает или планирует регламентное задание.
//
//  Сервис       - ОпределяемыйТип.СервисОбменаСБанками - сервис, для связи с которым периодически запускается задание.
//  УстановитьМинимальныйПериодПовтора - Булево - если Ложь, то период повтора увеличивается с учетом периода ранее
//                                                запущенного регламентного задания, если оно было активно.
//
Процедура ОпределитьНеобходимостьРегЗаданияОбменаСБанками(Сервис, УстановитьМинимальныйПериодПовтора = Ложь, Отбор = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Сервис) Тогда
		ВызватьИсключение НСтр("ru = 'ОпределитьНеобходимостьРегЗаданияОбменаСБанками : необходимо указать сервис, для которого используется регламентное задание'");
	КонецЕсли;
	Ключ = ОбщегоНазначения.ИмяЗначенияПеречисления(Сервис);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОжидающиеОтветаДокументообороты = ОжидающиеОтветаДокументообороты(Сервис, Отбор);
	ИспользованиеРегЗадания = ОжидающиеОтветаДокументообороты.Количество() > 0;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.УниверсальныйОбменСБанками);
	ПараметрыЗадания.Вставить("Ключ",       Ключ);
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	
	Для каждого РегЗадание Из СписокЗаданий Цикл
		
		ПараметрыЗадания = Новый Структура("Использование", ИспользованиеРегЗадания);
		Если ИспользованиеРегЗадания Тогда
			ТекущееРасписание = Неопределено;
			Если Не УстановитьМинимальныйПериодПовтора И РегЗадание.Использование Тогда
				ТекущееРасписание = РегЗадание.Расписание;
			КонецЕсли;
			ПараметрыЗадания.Вставить("Расписание", РасписаниеОбменаСБанками(ТекущееРасписание));
			
			РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание, ПараметрыЗадания);
			ИспользованиеРегЗадания = Ложь;
		Иначе
			РегламентныеЗаданияСервер.УдалитьЗадание(РегЗадание);
		КонецЕсли;
	
	КонецЦикла;
	
	// Не было найдено регламентных заданий.
	Если ИспользованиеРегЗадания Тогда // добавим новое рег.задание
		
		ПараметрыЗадания.Вставить("Параметры",  ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сервис));
		ПараметрыЗадания.Вставить("Расписание", РасписаниеОбменаСБанками());
		НаименованиеЗадания = СтрШаблон(НСтр("ru = 'Универсальный обмен с банками. %1'"), Ключ);
		ПараметрыЗадания.Вставить("Наименование", НаименованиеЗадания);
		
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении",    60);
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
		ПараметрыЗадания.Вставить("Использование",                            Истина);

		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

Функция НезавершенныеДокументообороты(Сервис) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументооборотыОбменаСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДокументооборотыОбменаСБанками КАК ДокументооборотыОбменаСБанками
	|ГДЕ
	|	ДокументооборотыОбменаСБанками.ДатаЗакрытия = &ДатаЗакрытия
	|	И НЕ ДокументооборотыОбменаСБанками.ПометкаУдаления
	|	И ДокументооборотыОбменаСБанками.Сервис = &Сервис";
	
	Запрос.УстановитьПараметр("ДатаЗакрытия", ПустаяДатаЗавершенияДокументооборота());
	Запрос.УстановитьПараметр("Сервис", Сервис);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает таблицу значений документооборотов, ожидающих ответа.
// Параметры:
//  Сервис       - ПеречислениеСсылка.СервисОбменаСБанками - сервис, для связи с которым периодически запускается задание.
//  Отбор        - Структура - структура с параметрами отбора документооборотов.
//    *Организация - СправочникСсылка.Организация - организация для отбора.
//    *Банк - СправочникСсылка.БанкиУниверсальногоОбмена - банк для отбора.
//  Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с колонками:
//     *Ссылка - СправочникСсылка.ДокументооборотыОбменаСБанками - документооборот.
//     *Банк - СправочникСсылка.Банк - банк документооборота.
//     *Организация - СправочникСсылка.Организация - организация документооборота.
Функция ОжидающиеОтветаДокументообороты(Сервис, Отбор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументооборотыОбменаСБанками.Ссылка КАК Ссылка,
	|	ДокументооборотыОбменаСБанками.Банк КАК Банк,
	|	ДокументооборотыОбменаСБанками.Организация КАК Организация
	|ИЗ
	|	Справочник.ДокументооборотыОбменаСБанками КАК ДокументооборотыОбменаСБанками
	|ГДЕ
	|	НЕ ДокументооборотыОбменаСБанками.ПометкаУдаления
	|	И ДокументооборотыОбменаСБанками.Сервис = &Сервис
	|	И ДокументооборотыОбменаСБанками.ОжидаетсяОтвет = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Банк";
	
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Организация",
		Запрос,
		"ДокументооборотыОбменаСБанками.Организация В (&Организация)");
	УстановитьУсловиеИПараметрЗапросаИзОтбора(Отбор,
		"Банк",
		Запрос,
		"ДокументооборотыОбменаСБанками.Банк В (&Банк)");
	
	Запрос.УстановитьПараметр("Сервис", Сервис);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НайтиОрганизациюПоИНН(ИНН) Экспорт
	
	Организация = Неопределено;
	
	УниверсальныйОбменСБанкамиПереопределяемый.НайтиОрганизациюПоИНН(ИНН, Организация);
	Если Организация <> Неопределено И Организация.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции
	
Функция НайтиБанкПоИдентификатору(Идентификатор) Экспорт
	
	СсылкаНаБанк = Справочники.БанкиУниверсальногоОбмена.НайтиПоРеквизиту("Идентификатор", Идентификатор);
	
	Если СсылкаНаБанк.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СсылкаНаБанк;
	
КонецФункции

Функция НайтиУслугуБанкаПоИдентификатору(Идентификатор) Экспорт
	
	СсылкаНаУслугу = Справочники.УслугиБанков.НайтиПоРеквизиту("Идентификатор", Идентификатор);
	
	Если СсылкаНаУслугу.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СсылкаНаУслугу;
	
КонецФункции

#Область ПрограммныйИнтерфейсЗагрузкиДанныхИзФайлов

// Загружает информацию о банке из файла и сохраняет её в базе данных.
Функция ПолучитьИнформациюОБанкеИзФайла(ИмяФайлСДанными) Экспорт
	
	Данные = JSONВСтруктуру(ИмяФайлСДанными, Истина);
	Возврат ЗагрузитьИнформациюОБанкеИзСтруктуры(Данные);
	
КонецФункции

// Загружает информацию об услуге банка из файла.
Функция ПолучитьИнформациюОбУслугеБанкаИзФайла(ИмяФайлСДанными) Экспорт
	
	Данные = JSONВСтруктуру(ИмяФайлСДанными, Истина);
	Возврат ЗагрузитьИнформациюОбУслугеБанкаИзСтруктуры(Данные);
	
КонецФункции

// загружает информацию о сервисе из файла и сохраняет её в базе данных.
Функция ПолучитьИнформациюОСервисеИзФайла(ИмяФайлСДанными) Экспорт
	
	Данные = JSONВСтруктуру(ИмяФайлСДанными, Истина);
	Возврат ЗагрузитьИнформациюОСервисеИзСтруктуры(Данные);
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсРаботыССерверомОбмена

// Авторизация на сервере по логину на портале ИТС.
Функция АвторизацияНаСервере(Сервис = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Токен", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	
	// Получаем тикет с портала ИТС.
	РезультатПолученияТикета = ПолучитьТикет(Сервис);
	Если НЕ ПустаяСтрока(РезультатПолученияТикета.ИнформацияОбОшибке) Тогда
		ИмяСобытия = НСтр("ru = 'Ошибка авторизации'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка при получении тикета ИТС:
                                                   |%1'"), РезультатПолученияТикета.ИнформацияОбОшибке);
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки, ИмяСобытия);
		Возврат Результат;
	Иначе
		Тикет = РезультатПолученияТикета.Тикет;
	КонецЕсли;
	
	Токен = Неопределено;
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу(Токен, "auth/by-ticket");
	
	ДанныеТела = Новый Структура;
	ДанныеТела.Вставить("ticket", Тикет);
	
	Тело = СтруктуруВСтрокуJSON(ДанныеТела);
	ПараметрыЗапроса.СтрокаТела = Тело;
	
	ПараметрыЗапроса.МетодЗапроса = "POST";
	
	РезультатВыполненияЗапроса = ВыполнитьЗапросКСерверу(ПараметрыЗапроса);
	Если НЕ РезультатВыполненияЗапроса.Выполнено Тогда
		ИмяСобытия = НСтр("ru = 'Ошибка авторизации'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Результат.ОписаниеОшибки = РезультатВыполненияЗапроса.ОписаниеОшибки;
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки, ИмяСобытия);
		Возврат Результат;
	КонецЕсли;
	
	ДанныеСервиса = JSONВСтруктуру(РезультатВыполненияЗапроса.ТелоОтвета);
	
	Результат.Выполнено = Истина;
	Результат.Токен = ДанныеСервиса["access_token"];
	
	Возврат Результат;
	
КонецФункции

// Загружает информацию о банке и сохраняет её в базе данных.
Функция ПолучитьИнформациюОБанкеССервера(Токен, ИдентификаторБанка) Экспорт
	
	Результат = РезультатЗагрузитьИнформациюОБанкеИзСтруктуры();
	
	НаименованиеБанка = "";
	
	Банк = НайтиБанкПоИдентификатору(ИдентификаторБанка);
	
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу(Токен, "banks");
	ПараметрыЗапроса.ОбязательныеПараметры.Добавить(ИдентификаторБанка);
	Если Банк <> Неопределено Тогда
		ПараметрыЗапроса.Заголовки.Вставить("If-None-Match", Банк.Версия);
	КонецЕсли;
	
	РезультатВыполненияЗапроса = ВыполнитьЗапросКСерверу(ПараметрыЗапроса);
	Если НЕ РезультатВыполненияЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатВыполненияЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ТелоОтвета = РезультатВыполненияЗапроса.ТелоОтвета;
	Если РезультатВыполненияЗапроса.КодСостояния = 304 Тогда
		// Версия на сервере соответствует версии в БД.
		Результат.Выполнено = Истина;
		Результат.Банк = Банк;
		Возврат Результат;
	КонецЕсли;
	
	ДанныеБанка = JSONВСтруктуру(ТелоОтвета);
	
	Возврат ЗагрузитьИнформациюОБанкеИзСтруктуры(ДанныеБанка);
	
КонецФункции

Функция ЗагрузитьИнформациюОСервисеИзСтруктуры(ДанныеСервисаНаСервере)
	
	Результат = РезультатЗагрузитьИнформациюОСервисеИзСтруктуры();
	
	Сервис = ОпределитьСервисПоИдентификаторуНаСервере(ДанныеСервисаНаСервере.id);
	ДанныеСервиса = Справочники.ДанныеСервисовОбменаСБанками.НайтиПоРеквизиту("Сервис", Сервис);
	
	Если ДанныеСервиса.Пустая() Тогда
		ДанныеСервисаОбъект = Справочники.ДанныеСервисовОбменаСБанками.СоздатьЭлемент();
		ДанныеСервисаОбъект.Сервис = Сервис;
		ДанныеСервисаОбъект.Наименование = НСтр("ru='Данные сервиса обмена с банками '") + Сервис;
	Иначе
		ДанныеСервисаОбъект = ДанныеСервиса.ПолучитьОбъект();
	КонецЕсли;
	ДанныеСервисаОбъект.Характеристики = Новый ХранилищеЗначения(ДанныеСервисаНаСервере.metadata.value, Новый СжатиеДанных(9));
	ДанныеСервисаОбъект.Версия = ДанныеСервисаНаСервере.version;
	ДанныеСервисаОбъект.Записать();
	
	Результат.Выполнено = Истина;
	Результат.ДанныеСервиса = ДанныеСервисаОбъект.Ссылка;
	
	Возврат Результат;
	
КонецФункции

// Загружает информацию о сервисе и об услугах банков для сервиса.
Функция ПолучитьИнформациюОСервисеССервера(Токен, Сервис, Страница = 0, Данные = Неопределено) Экспорт
	
	Результат = РезультатЗагрузитьИнформациюОСервисеИзСтруктуры();
	
#Область ПолученияДанныхСервиса

	// Получаем информацию о сервисе.
	ДанныеСервиса = Справочники.ДанныеСервисовОбменаСБанками.НайтиПоРеквизиту("Сервис", Сервис);
	
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу(Токен, "services");
	ПараметрыЗапроса.ОбязательныеПараметры.Добавить(ИдентификаторСервисаНаСервере(Сервис));
	Если НЕ ДанныеСервиса.Пустая() Тогда
		ПараметрыЗапроса.Заголовки.Вставить("If-None-Match", ДанныеСервиса.Версия);
	КонецЕсли;
	
	РезультатВыполненияЗапроса = ВыполнитьЗапросКСерверу(ПараметрыЗапроса);
	Если НЕ РезультатВыполненияЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатВыполненияЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ТелоОтвета = РезультатВыполненияЗапроса.ТелоОтвета;
	Если РезультатВыполненияЗапроса.КодСостояния <> 304 Тогда
		// Версия на сервере не соответствует версии в БД.
		ДанныеСервисаНаСервера = JSONВСтруктуру(ТелоОтвета);
		ЗагрузитьИнформациюОСервисеИзСтруктуры(ДанныеСервисаНаСервера);
	КонецЕсли;
	
#КонецОбласти

#Область ПолученияДанныхУслугБанка

	// Получаем услуги банка.
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу(Токен, "banks-services");
	ПараметрыЗапроса.Параметры.Вставить("serviceId", ИдентификаторСервисаНаСервере(Сервис));
	
	РезультатЗагрузкиСтраниц = ЗагрузитьСтраницыССервера(Токен, ПараметрыЗапроса);
	Если НЕ РезультатЗагрузкиСтраниц.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатЗагрузкиСтраниц.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Данные = РезультатЗагрузкиСтраниц.Данные;
	
	// Получаем данных о банках для анализа версий.
	РезультатПолученияДанныхОБанках = ПолучитьИнформациюОБанкахССервера(Токен);
	Если НЕ РезультатПолученияДанныхОБанках.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатПолученияДанныхОБанках.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	ТаблицаДанныхБанков = РезультатПолученияДанныхОБанках.ТаблицаДанныхБанков;
	
	// Обработка данных.
	Для каждого УслугаБанка Из Данные Цикл
		
		ИдентификаторБанка = УслугаБанка.bankId;
		ИдентификаторУслугиБанка = УслугаБанка.id;
		Версия = УслугаБанка.version;
		Активна = УслугаБанка.isActive;
		
		Банк = НайтиБанкПоИдентификатору(ИдентификаторБанка);
		Если Банк <> Неопределено Тогда
			Строка = ТаблицаДанныхБанков.Найти(ИдентификаторБанка, "Идентификатор");
			Если Строка = Неопределено Тогда
				ТекстОшибки = НСтр("ru='На сервере не найден банк с идентификатором %1.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ИдентификаторБанка);
				Результат.ОписаниеОшибки = ТекстОшибки;
				Возврат Результат;
			КонецЕсли;
			Если Строка.Версия <> Банк.Версия Тогда
				// загрузка данных банка
				РезультатПолученияДанныхБанка = ПолучитьИнформациюОБанкеССервера(Токен, ИдентификаторБанка);
				Если РезультатПолученияДанныхБанка.Выполнено Тогда
					Результат.ОписаниеОшибки = РезультатПолученияДанныхБанка.ОписаниеОшибки;
					Возврат Результат;
				КонецЕсли;
				Банк = НайтиБанкПоИдентификатору(ИдентификаторБанка);
			КонецЕсли;
		КонецЕсли;
		
		// загрузка данных услуги банка
		УслугаБанкаБД = Справочники.УслугиБанков.НайтиПоРеквизиту("Идентификатор", ИдентификаторУслугиБанка);
		Если УслугаБанкаБД.Пустая() ИЛИ Версия <> УслугаБанкаБД.Версия Тогда
			// Услуга банка не существует или изменилась версия.
			РезультатПолученияДанныхУслуги = ПолучитьИнформациюОбУслугеБанкаССервера(Токен, ИдентификаторУслугиБанка);
			Если НЕ РезультатПолученияДанныхУслуги.Выполнено Тогда
				Результат.ОписаниеОшибки = РезультатПолученияДанныхУслуги.ОписаниеОшибки;
				Возврат Результат;
			КонецЕсли;
			УслугаБанкаБД = РезультатПолученияДанныхУслуги.УслугаБанка;
		ИначеЕсли НЕ УслугаБанкаБД.Пустая() И УслугаБанкаБД.Активна <> Активна Тогда
			// Изменился признак активности услуги банка.
			УслугаБанкаОбъект = УслугаБанкаБД.ПолучитьОбъект();
			УслугаБанкаОбъект.Активна = Активна;
			УслугаБанкаОбъект.Записать();
		ИначеЕсли НЕ УслугаБанкаБД.Пустая() И УслугаБанкаБД.ПометкаУдаления И Активна Тогда
			// Снимаем пометку удаления с активной услуги.
			УслугаБанкаОбъект = УслугаБанкаБД.ПолучитьОбъект();
			УслугаБанкаОбъект.ПометкаУдаления = Ложь;
			УслугаБанкаОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
#КонецОбласти

	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

// Загружает информацию об услуге банка.
Функция ПолучитьИнформациюОбУслугеБанкаССервера(Токен, ИдентификаторУслугиБанка) Экспорт
	
	Результат = РезультатЗагрузитьИнформациюОбУслугеБанкаИзСтруктуры();
	
	ДанныеБанков = "";
	
	УслугаБанка = НайтиУслугуБанкаПоИдентификатору(ИдентификаторУслугиБанка);
	
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу(Токен, "banks-services");
	ПараметрыЗапроса.ОбязательныеПараметры.Добавить(ИдентификаторУслугиБанка);
	Если УслугаБанка <> Неопределено Тогда
		ПараметрыЗапроса.Заголовки.Вставить("If-None-Match", УслугаБанка.Версия);
	КонецЕсли;
	
	РезультатВыполненияЗапроса = ВыполнитьЗапросКСерверу(ПараметрыЗапроса);
	Если НЕ РезультатВыполненияЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатВыполненияЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатВыполненияЗапроса.КодСостояния = 304 Тогда
		Результат.Выполнено = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ДанныеУслуги = JSONВСтруктуру(РезультатВыполненияЗапроса.ТелоОтвета);
	
	Возврат ЗагрузитьИнформациюОбУслугеБанкаИзСтруктуры(ДанныеУслуги);
	
КонецФункции

// Загружает данные о всех банках с сервера.
Функция ПолучитьИнформациюОБанкахССервера(Токен, Страница = 0, Данные = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ТаблицаДанныхБанков", Новый ТаблицаЗначений);
	
	ТаблицаДанныхБанков = Результат.ТаблицаДанныхБанков;
	ТаблицаДанныхБанков.Колонки.Добавить("Идентификатор");
	ТаблицаДанныхБанков.Колонки.Добавить("Наименование");
	ТаблицаДанныхБанков.Колонки.Добавить("Версия");
	
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу(Токен, "banks");
	РезультатЗагрузкиСтраниц = ЗагрузитьСтраницыССервера(Токен, ПараметрыЗапроса);
	Если НЕ РезультатЗагрузкиСтраниц.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатЗагрузкиСтраниц.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Данные = РезультатЗагрузкиСтраниц.Данные;
	
	// Обработка данных.
	Ошибки = Новый Массив;
	Для каждого Банк Из Данные Цикл
		
		НаименованиеБанка = Банк.shortName;
		ИдентификаторБанка = Банк.id;
		ВерсияБанка = Банк.version;
		Активен = Банк.isActive;
		
		СтрокаТаблицы = ТаблицаДанныхБанков.Добавить();
		СтрокаТаблицы.Идентификатор = ИдентификаторБанка;
		СтрокаТаблицы.Версия = ВерсияБанка;
		СтрокаТаблицы.Наименование = НаименованиеБанка;
		
		Банк = НайтиБанкПоИдентификатору(ИдентификаторБанка);
		Если Банк = Неопределено ИЛИ Банк.Версия <> ВерсияБанка Тогда
			// Банк не существует или изменилась версия.
			РезультаПолученияДанных = ПолучитьИнформациюОБанкеССервера(Токен, ИдентификаторБанка);
			Если НЕ РезультаПолученияДанных.Выполнено Тогда
				Ошибки.Добавить(РезультаПолученияДанных.ОписаниеОшибки);
				Продолжить;
			КонецЕсли;
			Банк = РезультаПолученияДанных.Банк;
		ИначеЕсли Банк <> Неопределено И Банк.Активен <> Активен Тогда
			// Изменился признак активности банка.
			БанкОбъект = Банк.ПолучитьОбъект();
			БанкОбъект.Активен = Активен;
			БанкОбъект.Записать();
		ИначеЕсли Банк <> Неопределено И Банк.ПометкаУдаления И Активен Тогда
			// Снимаем пометку удаления для активного банка.
			БанкОбъект = Банк.ПолучитьОбъект();
			БанкОбъект.ПометкаУдаления = Ложь;
			БанкОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ошибки.Количество() > 0 Тогда
		Результат.ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
		Возврат Результат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьПараметрыСледующейЧастиКонтейнераССервера(Токен,
	ИдентификаторТранзакции,
	ПараметрыСервера = Неопределено)
	
	Результат = ПараметрыЧастиКонтейнера();
	
	// Получаем параметры следующей части.
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу(Токен, "transport-containers");
	ПараметрыЗапроса.ОбязательныеПараметры.Добавить(ИдентификаторТранзакции);
	ПараметрыЗапроса.СуффиксРесурса = "nextUploadUrl";
	
	// Запрос к серверу.
	РезультатВыполненияЗапроса = ВыполнитьЗапросКСерверу(ПараметрыЗапроса, ПараметрыСервера);
	Если НЕ РезультатВыполненияЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатВыполненияЗапроса.ОписаниеОшибки;
		ЗаписатьСобытиеВЖурнал(РезультатВыполненияЗапроса.ОписаниеОшибки,
			НСтр("ru = 'HTTP-запрос'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	// Разбираем ответ сервера.
	ОтветСервера = JSONВСтруктуру(РезультатВыполненияЗапроса.ТелоОтвета);
	Результат.АдресЗагружаемойЧасти = ОтветСервера.href;
	Результат.НомерЗагружаемойЧасти = ОтветСервера.partNumber;
	Результат.ВремяОкончанияДействияАдреса = ПрочитатьДатуИзJSON(ОтветСервера.hrefExpireAt);
	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

// Отправляет содержимое транзакции(транспортный контейнер) на сервер обмена.
Функция ОтправитьТранспортныйКонтейнерНаСервер(Параметры)
	
	Транзакция = Параметры.Транзакция;
	ПолныйПутьФайлаКонтейнера = Параметры.ПолныйПутьФайлаКонтейнера;
	РазмерКонтейнера = Параметры.Размер;
	Токен  = Параметры.Токен;
	ПараметрыСервера = Параметры.ПараметрыСервера;
	
	ИдентификаторДокументооборота = Транзакция.Документооборот.Идентификатор;
	Сервис = Транзакция.Документооборот.Сервис;
	ТипТранзакции = Транзакция.ТипТранзакции;
	ИдентификаторТранзакции = Транзакция.Идентификатор;
	
	// Считываем сохраненные параметры части контейнера.
	ПараметрыЧасти = ПараметрыЧастиКонтейнера();
	ЗаполнитьЗначенияСвойств(ПараметрыЧасти, Транзакция);
	
	ТранзакцияОбъект = Транзакция.ПолучитьОбъект();
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	// Получаем параметры загрузки части контейнера в случае если контейнер до этого не загружался.
	// Если ранее была попытка загрузки, то пытаемся загрузить часть повторно.
	ПовторнаяОтправка = ПараметрыЧасти.НомерЗагружаемойЧасти > 0;
	
	// Получаем параметры следующей части.
	РезультатПолученияПараметровСледующейЧасти =
		ПолучитьПараметрыСледующейЧастиКонтейнераССервера(Токен, ИдентификаторТранзакции, ПараметрыСервера);
	Если НЕ РезультатПолученияПараметровСледующейЧасти.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатПолученияПараметровСледующейЧасти.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыЧасти, РезультатПолученияПараметровСледующейЧасти);
	ЗаполнитьЗначенияСвойств(ТранзакцияОбъект, РезультатПолученияПараметровСледующейЧасти);
	
	ПараметрыЧасти.РазмерЧасти = ТранзакцияОбъект.РазмерЧасти;
	
	Если ПараметрыЧасти.РазмерЧасти = 0 Тогда
		ПараметрыЧасти.РазмерЧасти = РазмерЧастиТранспортногоКонтейнера();
	КонецЕсли;
	
	ТранзакцияОбъект.РазмерЧасти = ПараметрыЧасти.РазмерЧасти;
	
	// отправка по частям
	МассивЧастей = РазделитьФайл(ПолныйПутьФайлаКонтейнера, ПараметрыЧасти.РазмерЧасти);
	
	БылиОшибкиОтправки = Ложь;
	НомерЧасти = 1;
	ВсегоЧастей = МассивЧастей.Количество();
	Для каждого ИмяФайлаЧасти Из МассивЧастей Цикл
		
		// Отправляем часть на сервер файлового хранилища.
		Данные = Новый ДвоичныеДанные(ИмяФайлаЧасти);
		АдресВХранилище = ПараметрыЧасти.АдресЗагружаемойЧасти;
		РезультатЗакачки = ЗакачатьДанныеВХранилищеS3(АдресВХранилище, Данные);
		Если НЕ РезультатЗакачки.Выполнено Тогда
			Результат.ОписаниеОшибки = РезультатЗакачки.ОписаниеОшибки;
			БылиОшибкиОтправки = Истина;
			Прервать;
		КонецЕсли;
		
		НомерЧасти = НомерЧасти + 1;
		Если НомерЧасти > ВсегоЧастей Тогда
			Продолжить;
		КонецЕсли;
		
		// Получаем параметры следующей части.
		РезультатПолученияПараметровСледующейЧасти =
			ПолучитьПараметрыСледующейЧастиКонтейнераССервера(Токен, ИдентификаторТранзакции, ПараметрыСервера);
		Если НЕ РезультатПолученияПараметровСледующейЧасти.Выполнено Тогда
			Результат.ОписаниеОшибки = РезультатПолученияПараметровСледующейЧасти.ОписаниеОшибки;
			БылиОшибкиОтправки = Истина;
			Прервать;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыЧасти, РезультатПолученияПараметровСледующейЧасти);
		ЗаполнитьЗначенияСвойств(ТранзакцияОбъект, РезультатПолученияПараметровСледующейЧасти);
		
	КонецЦикла;
	
	// удаляем временные файлы
	УдалитьСписокФайлов(МассивЧастей);
	
	// Сохраняем адрес и номер части если они изменились.
	Попытка
		Если ТранзакцияОбъект.Модифицированность() Тогда
			ТранзакцияОбъект.Записать();
		КонецЕсли;
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Ошибка при промежуточной записи транзакции отправки транспортного контейнера.
                               |%1'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ОписаниеОшибки());
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
			НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Транзакция);
		Возврат Результат;
	КонецПопытки;
	
	Если БылиОшибкиОтправки Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Завершение загрузки, проверка хэша загруженных данных.
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу(Токен, "transport-containers");
	ПараметрыЗапроса.ОбязательныеПараметры.Добавить(ИдентификаторТранзакции);
	ПараметрыЗапроса.СуффиксРесурса = "complete";
	ПараметрыЗапроса.МетодЗапроса = "POST";
	
	// Проверка хэша на данный момент не выполняется.
	ДанныеТелаЗапроса = Новый Структура("digestMD5", "0");
	
	ПараметрыЗапроса.СтрокаТела = СтруктуруВСтрокуJSON(ДанныеТелаЗапроса);
	ПараметрыЗапроса.ТипПринимаемыхДанных = "application/problem+json";
	// Запрос к серверу.
	РезультатВыполненияЗапроса = ВыполнитьЗапросКСерверу(ПараметрыЗапроса, ПараметрыСервера);
	БылаОшибкаПроверкиХэша = Ложь;
	Если НЕ РезультатВыполненияЗапроса.Выполнено Тогда
		// Если проблема в хэше можно попробовать отдать файл еще раз.
		БылаОшибкаПроверкиХэша = Истина;
		Результат.ОписаниеОшибки = РезультатВыполненияЗапроса.ОписаниеОшибки;
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
			НСтр("ru = 'HTTP-запрос'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Транзакция,
			УровеньЖурналаРегистрации.Предупреждение);
	КонецЕсли;
	
	// Изменяем адрес и номер части и сохраняем транзакций.
	ТранзакцияОбъект.НомерЗагружаемойЧасти = 0;
	ТранзакцияОбъект.РазмерЧасти = 0;
	Попытка
		ТранзакцияОбъект.Записать();
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Ошибка при записи транзакции отправки транспортного контейнера.
                               |%1'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ОписаниеОшибки());
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
			НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Транзакция);
		Возврат Результат;
	КонецПопытки;
	
	Если БылаОшибкаПроверкиХэша Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

Функция СписокВходящихТранзакцийНаСервере(Токен, Документооборот, Страница = 0, Данные = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("БылиОшибкиОпределенияТипаТранзакции", Ложь);
	Результат.Вставить("ТаблицаКонтейнеров", Новый ТаблицаЗначений);
	
	ДанныеДокументооборота = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документооборот, "Идентификатор, Банк, Сервис");
	
	ИдентификаторДокументооборота = ДанныеДокументооборота.Идентификатор;
	
	Результат.ТаблицаКонтейнеров.Колонки.Добавить("ИдентификаторДокументооборота");
	Результат.ТаблицаКонтейнеров.Колонки.Добавить("ТипТранзакции");
	Результат.ТаблицаКонтейнеров.Колонки.Добавить("ИдентификаторТранзакции");
	Результат.ТаблицаКонтейнеров.Колонки.Добавить("Размер");
	Результат.ТаблицаКонтейнеров.Колонки.Добавить("ДатаЗагрузки");
	
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу(Токен, "transport-containers");
	ПараметрыЗапроса.Параметры.Вставить("workflowId", ИдентификаторДокументооборота);
	
	РезультатЗагрузкиСтраниц = ЗагрузитьСтраницыССервера(Токен, ПараметрыЗапроса);
	Если НЕ РезультатЗагрузкиСтраниц.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатЗагрузкиСтраниц.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Данные = РезультатЗагрузкиСтраниц.Данные;
	
	// Обработка данных.
	Для каждого Контейнер Из Данные Цикл
		Попытка
			ТипТранзакции = ОпределитьТипТранзакцииПоДаннымНаСервере(ДанныеДокументооборота.Сервис, Контейнер);
		Исключение
			Результат.БылиОшибкиОпределенияТипаТранзакции = Истина;
			Шаблон = НСтр("ru='Ошибка определения типа транзакции по коду %1. Сервис %2, банк %3, документооборот %4, транзакция %5.'");
			ОписаниеОшибки = СтрШаблон(Шаблон,
				Контейнер.type,
				ДанныеДокументооборота.Сервис,
				ДанныеДокументооборота.Банк,
				Контейнер.workflowId,
				Контейнер.id);
			ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
				НСтр("ru = 'Получение списка входящих транзакций'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			Продолжить;
		КонецПопытки;
		Строка = Результат.ТаблицаКонтейнеров.Добавить();
		Строка.ИдентификаторДокументооборота = Контейнер.workflowId;
		Строка.ТипТранзакции = ТипТранзакции;
		Строка.Размер = Контейнер.contentLength;
		Строка.ИдентификаторТранзакции = Контейнер.id;
		Строка.ДатаЗагрузки = ПрочитатьДатуИзJSON(Контейнер.completedAt);
	КонецЦикла;
	
	Результат.ТаблицаКонтейнеров.Сортировать("ДатаЗагрузки Возр");
	
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

Функция СоздатьДокументооборотНаСервере(Токен, Сервис, Банк, ИНН, КПП)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Идентификатор", "");
	
	// Создаем документооборот на сервере.
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу(Токен, "workflows");
	ПараметрыЗапроса.Заголовки.Вставить("Idempotency-Key", Строка(Новый УникальныйИдентификатор));
	
	УслугаБанка = НайтиУслугуБанка(Сервис, Банк);
	Если УслугаБанка = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Услуга для банка ""%1"" сервиса ""%2"" не найдена.'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Банк, Сервис);
		Возврат Результат;
	КонецЕсли;
	
	// Формируем тело запроса.
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("banksServiceId", УслугаБанка.Идентификатор);
	ТелоЗапроса.Вставить("inn", ИНН);
	ТелоЗапроса.Вставить("kpp", КПП);
	ПараметрыЗапроса.СтрокаТела = СтруктуруВСтрокуJSON(ТелоЗапроса);
	ПараметрыЗапроса.МетодЗапроса = "POST";
	ПараметрыЗапроса.ТипПринимаемыхДанных = "application/problem+json";
	
	// Запрос к серверу.
	РезультатВыполненияЗапроса = ВыполнитьЗапросКСерверу(ПараметрыЗапроса);
	Если НЕ РезультатВыполненияЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатВыполненияЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Идентификатор = РезультатВыполненияЗапроса.Заголовки.Получить("WorkflowId");
	
	Результат.Выполнено = Истина;
	Результат.Идентификатор = Идентификатор;
	Возврат Результат;
	
КонецФункции

Функция СоздатьТранзакциюНаСервере(Токен, Сервис, ТипТранзакции, ИдентификаторДокументооборота, ПараметрыСервера = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Идентификатор", "");
	
	// Создаем транзакцию на сервере.
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу(Токен, "transport-containers");
	ПараметрыЗапроса.Заголовки.Вставить("Idempotency-Key", Строка(Новый УникальныйИдентификатор));
	
	// Формируем тело запроса.
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("type", ОпределитьКодТипаТранзакцииПоСсылке(Сервис, ТипТранзакции));
	ТелоЗапроса.Вставить("workflowId", ИдентификаторДокументооборота);
	ПараметрыЗапроса.СтрокаТела = СтруктуруВСтрокуJSON(ТелоЗапроса);
	ПараметрыЗапроса.МетодЗапроса = "POST";
	ПараметрыЗапроса.ТипПринимаемыхДанных = "application/problem+json";
	
	// Запрос к серверу.
	РезультатВыполненияЗапроса = ВыполнитьЗапросКСерверу(ПараметрыЗапроса, ПараметрыСервера);
	Если НЕ РезультатВыполненияЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатВыполненияЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	// Извлечение идентификатора из URI.
	Ссылка = РезультатВыполненияЗапроса.Заголовки.Получить("Location");
	Идентификатор = ИзвлечьИдентификаторИзСсылкиНаРесурс(Ссылка);
	
	Результат.Выполнено = Истина;
	Результат.Идентификатор = Идентификатор;
	Возврат Результат;
	
КонецФункции

Функция УдалитьТранзакциюНаСервере(Токен, ИдентификаторТранзакции) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу(Токен, "transport-containers");
	ПараметрыЗапроса.ОбязательныеПараметры.Добавить(ИдентификаторТранзакции);
	ПараметрыЗапроса.МетодЗапроса = "DELETE";
	
	РезультатВыполненияЗапроса = ВыполнитьЗапросКСерверу(ПараметрыЗапроса);
	Если НЕ РезультатВыполненияЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатВыполненияЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

Функция ПараметрыСервераОбменаСБанками() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("АдресСервиса", "bankflow.1c.ru");
	Результат.Вставить("ПортСервиса", 443);
	Результат.Вставить("ИспользоватьЗащищенноеСоединение", Истина);
	Результат.Вставить("ПрефиксРесурса", "/api/client-api/");
	Результат.Вставить("Таймаут", ТаймаутПолученияДанныхССервера());
	// Имя сервиса для получения тикетов на портале ИТС по умолчанию.
	Результат.Вставить("ИмяСервисаДляПолученияТикета", "bankflow");
	
	// Данные тестового сервера в сохраненных настройках.
	СтруктураПараметров = ПолучитьПараметрыТестирования();
	Если СтруктураПараметров <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, СтруктураПараметров);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыВыполнитьЗапросКСерверу(Токен, АдресРесурса) Экспорт
	
	ПараметрыПодключения = ПараметрыСервераОбменаСБанками();
	
	Результат = Новый Структура;
	// Токен авторизации.
	Результат.Вставить("Токен", Токен);
	// Адрес ресурса для объекта HTTPЗапрос.
	Результат.Вставить("АдресРесурса", АдресРесурса);
	// Суффикс ресурса.
	Результат.Вставить("СуффиксРесурса", "");
	// Обязательные параметры запроса.
	Результат.Вставить("ОбязательныеПараметры", Новый Массив);
	// Необязательные параметры запроса, передаются в URL.
	Результат.Вставить("Параметры", Новый Соответствие);
	// Заголовки запроса.
	Результат.Вставить("Заголовки", Новый Соответствие);
	// Метод выполнения запроса.
	Результат.Вставить("МетодЗапроса", "GET");
	// Имя файла тела запроса.
	Результат.Вставить("ИмяФайлаТела", Неопределено);
	// Двоичные данные тела запроса.
	Результат.Вставить("ДвоичныхДанныеТела", Неопределено);
	// Строка тела запроса.
	Результат.Вставить("СтрокаТела", "");
	// номер страницы для страничных запросов.
	Результат.Вставить("РазбивкаРезультатаНаСтраницы", Ложь);
	// номер страницы для страничных запросов.
	Результат.Вставить("НомерСтраницы", 0);
	// Количество элементов на странице для страничных запросов.
	Результат.Вставить("ЭлементовНаСтранице", 1024);
	// Типы данных.
	Результат.Вставить("ТипПринимаемыхДанных", "application/vnd.1c-bankflow.v1+json;charset=UTF-8");
	Результат.Вставить("ТипОтправляемыхДанных", "application/vnd.1c-bankflow.v1+json;charset=UTF-8");
	// Таймаут для запроса.
	Результат.Вставить("Таймаут", Неопределено);
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗапросКСерверу(ПараметрыЗапроса, ПараметрыСервера = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ТелоОтвета", Неопределено); // в виде строки
	Результат.Вставить("ДанныеТелаОтвета", Неопределено); // двоичные данные
	Результат.Вставить("КодСостояния", Неопределено);
	Результат.Вставить("Заголовки", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОшибкаСоединения", Ложь);
	
	Токен = ПараметрыЗапроса.Токен;
	АдресРесурса = ПараметрыЗапроса.АдресРесурса;
	ПараметрыОбязательные = ПараметрыЗапроса.ОбязательныеПараметры;
	Параметры = ПараметрыЗапроса.Параметры;
	Заголовки = ПараметрыЗапроса.Заголовки;
	МетодЗапроса = ПараметрыЗапроса.МетодЗапроса;
	ИмяФайлаТела = ПараметрыЗапроса.ИмяФайлаТела;
	СуффиксРесурса = ПараметрыЗапроса.СуффиксРесурса;
	ДвоичныхДанныеТела = ПараметрыЗапроса.ДвоичныхДанныеТела;
	СтрокаТела = ПараметрыЗапроса.СтрокаТела;
	ТипПринимаемыхДанных = ПараметрыЗапроса.ТипПринимаемыхДанных;
	ТипОтправляемыхДанных = ПараметрыЗапроса.ТипОтправляемыхДанных;
	
	РезультатПинга = ПроверитьДоступностьСервера();
	Если НЕ РезультатПинга.Выполнено Тогда
		Результат.ОшибкаСоединения = Истина;
		Результат.ОписаниеОшибки = РезультатПинга.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыСервера = Неопределено Тогда
		ПараметрыСервера = ПараметрыСервераОбменаСБанками();
	КонецЕсли;
	
	АдресСервиса = ПараметрыСервера.АдресСервиса;
	ПортСервиса = ПараметрыСервера.ПортСервиса;
	ЗащищенноеСоединение = ПараметрыСервера.ИспользоватьЗащищенноеСоединение;
	ПрефиксРесурса = ПараметрыСервера.ПрефиксРесурса;
	Таймаут = ПараметрыСервера.Таймаут;
	Если ПараметрыЗапроса.Таймаут <> Неопределено Тогда
		Таймаут = ПараметрыЗапроса.Таймаут;
	КонецЕсли;
	
	Для каждого Параметр Из ПараметрыОбязательные Цикл
		// добавляем обязательные параметры в URL
		АдресРесурса = АдресРесурса + СтрШаблон("/%1", Параметр);
	КонецЦикла;
	
	Если Параметры.Количество() > 0 Тогда
		// добавляем именованные параметры в URL
		АдресРесурса = АдресРесурса + "?";
		Для каждого Параметр Из Параметры Цикл
			СтрокаПараметра = КодироватьСтроку(Параметр.Значение, СпособКодированияСтроки.КодировкаURL);
			СтрокаПараметра = СтрШаблон("%1=%2&", Параметр.Ключ, СтрокаПараметра);
			АдресРесурса = АдресРесурса + СтрокаПараметра;
		КонецЦикла;
		АдресРесурса = Лев(АдресРесурса, СтрДлина(АдресРесурса) - 1);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СуффиксРесурса) Тогда
		АдресРесурса = АдресРесурса + "/" + СуффиксРесурса;
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПрефиксРесурса + АдресРесурса);
	// Заголовки типов данных.
	HTTPЗапрос.Заголовки.Вставить("Accept", ТипПринимаемыхДанных);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", ТипОтправляемыхДанных);
	
	// Заголовок авторизации.
	Если Токен <> Неопределено Тогда
		HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + Токен);
	КонецЕсли;
	
	HTTPЗапрос.Заголовки.Вставить("Cache-Control", "no-cache");
	
	Для каждого ДанныеЗаголовка Из Заголовки Цикл
		HTTPЗапрос.Заголовки.Вставить(ДанныеЗаголовка.Ключ, ДанныеЗаголовка.Значение);
	КонецЦикла;
	
	// Устанавливаем тело запроса.
	Если МетодЗапроса <> "GET" Тогда
		Если ИмяФайлаТела <> Неопределено Тогда
			HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаТела);
		ИначеЕсли ДвоичныхДанныеТела <> Неопределено Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныхДанныеТела);
		ИначеЕсли НЕ ПустаяСтрока(СтрокаТела) Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТела);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗащищенноеСоединение Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
	
	Прокси = ПроксиHTTPСоединения(Протокол);
	
	HTTPСоединение = Новый HTTPСоединение(
		АдресСервиса,
		ПортСервиса, , , Прокси, Таймаут,
		?(ЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL, Неопределено));
		
	Попытка
		Если МетодЗапроса = "POST" Тогда
			// POST запрос.
			Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли МетодЗапроса = "GET" Тогда
			// GET запрос.
			Ответ = HTTPСоединение.Получить(HTTPЗапрос);
		ИначеЕсли МетодЗапроса = "HEAD" Тогда
			// HEAD запрос.
			Ответ = HTTPСоединение.ПолучитьЗаголовки(HTTPЗапрос);
		Иначе
			Ответ = HTTPСоединение.ВызватьHTTPМетод(МетодЗапроса, HTTPЗапрос);
		КонецЕсли;
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка при отправке запроса: 
			|%1
			|%2
			|Сервер: %3:%4'"),
			УниверсальныйОбменСБанкамиКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			АдресСервиса,
			ПортСервиса);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'HTTP-запрос'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
		Результат.ОшибкаСоединения = Истина;
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		
		// Удаляем файл тела запроса.
		Если НЕ ПустаяСтрока(ИмяФайлаТела) Тогда
			УдалитьФайлы(ИмяФайлаТела);
		КонецЕсли;
		Возврат Результат;

	КонецПопытки;
	
	// Удаляем файл тела запроса.
	Если НЕ ПустаяСтрока(ИмяФайлаТела) Тогда
		УдалитьФайлы(ИмяФайлаТела);
	КонецЕсли;
	
	Результат.Заголовки = Ответ.Заголовки;
	Результат.КодСостояния = Ответ.КодСостояния;
	Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Результат.ДанныеТелаОтвета = Ответ.ПолучитьТелоКакДвоичныеДанные();
	
	РезультатАнализа = АнализВыполненияHTTPЗапроса(Ответ, АдресРесурса);
	Если НЕ РезультатАнализа.Выполнено Тогда
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка при выполнении HTTP-запроса к %1.
			|%2'"), АдресРесурса, РезультатАнализа.ОписаниеОшибки);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки + " Тело ответа:" + Символы.ПС + Результат.ТелоОтвета,
			НСтр("ru = 'HTTP-запрос'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Результат.ОписаниеОшибки = РезультатАнализа.ОписаниеОшибки;
		Возврат Результат;
	Иначе
		Результат.Выполнено = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьДоступностьСервера() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	ПараметрыСервера = ПараметрыСервераОбменаСБанками();
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу("", "actuator/health");
	
	Таймаут = 10;
	АдресРесурса = ПараметрыЗапроса.АдресРесурса;
	АдресСервиса = ПараметрыСервера.АдресСервиса;
	ПортСервиса = ПараметрыСервера.ПортСервиса;
	ЗащищенноеСоединение = ПараметрыСервера.ИспользоватьЗащищенноеСоединение;
	ПрефиксРесурса = СтрЗаменить(ПараметрыСервера.ПрефиксРесурса, "client-api/", "");
	
	Если ЗащищенноеСоединение Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
	
	Прокси = ПроксиHTTPСоединения(Протокол);
	
	HTTPСоединение = Новый HTTPСоединение(
		АдресСервиса,
		ПортСервиса, , , Прокси, Таймаут,
		?(ЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL, Неопределено));
	
	HTTPЗапрос = Новый HTTPЗапрос(ПрефиксРесурса + АдресРесурса);
	// Заголовки типов данных.
	HTTPЗапрос.Заголовки.Вставить("Accept", "application/vnd.spring-boot.actuator.v2+json");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", ПараметрыЗапроса.ТипОтправляемыхДанных);
	
	Попытка
		
		Ответ = HTTPСоединение.Получить(HTTPЗапрос);
		
	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка при отправке запроса: 
			|%1
			|%2
			|Сервер: %3:%4'"),
			УниверсальныйОбменСБанкамиКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			АдресСервиса,
			ПортСервиса);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'HTTP-запрос'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		
		Возврат Результат;

	КонецПопытки;
	
	РезультатАнализа = АнализВыполненияHTTPЗапроса(Ответ, АдресРесурса);
	Если НЕ РезультатАнализа.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатАнализа.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Ответ = JSONВСтруктуру(Ответ.ПолучитьТелоКакСтроку());
	
	Если Ответ.status <> "UP" Тогда
		Шаблон = НСтр("ru='Сервер обмена с банками %1 не активен.'");
		ОписаниеОшибки = СтрШаблон(Шаблон, АдресСервиса);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Проверка доступности сервера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьТранзакциюБанкаНаСервере(Токен, Сервис, ТипТранзакции, ИдентификаторДокументооборота) Экспорт
	
	ПараметрыСервера = ПараметрыСервераОбменаСБанками();
	ПараметрыСервера.ПрефиксРесурса = "/api/bank-api/";
	
	СтруктураПараметров = ПолучитьПараметрыТестирования();
	
	Если СтруктураПараметров <> Неопределено Тогда
		Если СтруктураПараметров.Свойство("ПрефиксРесурсаШлюзаБанков") Тогда
			ПараметрыСервера.ПрефиксРесурса = СтруктураПараметров.ПрефиксРесурсаШлюзаБанков;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СоздатьТранзакциюНаСервере(Токен, Сервис, ТипТранзакции, ИдентификаторДокументооборота, ПараметрыСервера);
	
КонецФункции

Функция ПараметрыЗагрузитьТранзакциюССервера() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Токен", "");
	Параметры.Вставить("ИдентификаторТранзакции", "");
	Параметры.Вставить("Документооборот", Неопределено);
	Параметры.Вставить("ЗакачатьЗаново", Ложь);
	Параметры.Вставить("Размер", 0);
	
	Возврат Параметры;
	
КонецФункции

Функция ЗагрузитьТранзакциюССервера(Параметры, ПараметрыСервера = Неопределено) Экспорт
	
	Токен = Параметры.Токен;
	ИдентификаторТранзакции = Параметры.ИдентификаторТранзакции;
	Документооборот = Параметры.Документооборот;
	ЗакачатьЗаново = Параметры.ЗакачатьЗаново;
	РазмерКонтейнера = Параметры.Размер;
	
	Адрес = "";
	Сервис = Документооборот.Сервис;
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Транзакция", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ТипДокументооборота", Неопределено);
	Результат.Вставить("ТипТранзакции", Неопределено);
	Результат.Вставить("НоваяТранзакция", Истина);
	
	Если НЕ ЗначениеЗаполнено(Документооборот) ИЛИ НЕ ТипЗнч(Документооборот) = Тип("СправочникСсылка.ДокументооборотыОбменаСБанками") Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не определено значение документооборота.'");
		Возврат Результат;
	КонецЕсли;
	
	ИмяФайлаКонтейнера = ПолучитьИмяВременногоФайла();
	
#Область СозданиеТранзакцииВБД
	// Проверяем на наличие данных в БД.
	ТранзакцияСсылка = Справочники.ТранзакцииОбменаСБанками.НайтиПоРеквизиту("Идентификатор", ИдентификаторТранзакции);
	РазмерКонтейнераВБД = 0;
	Если ТранзакцияСсылка.Пустая() Тогда
		// Создаем новую транзакцию.
		Транзакция = Справочники.ТранзакцииОбменаСБанками.СоздатьЭлемент();
		ТранзакцияСсылка = Справочники.ТранзакцииОбменаСБанками.ПолучитьСсылку(Новый УникальныйИдентификатор);
		Транзакция.УстановитьСсылкуНового(ТранзакцияСсылка);
		Транзакция.Дата = ТекущаяДатаСеанса();
		Транзакция.Идентификатор = ИдентификаторТранзакции;
		Транзакция.Статус = Перечисления.СтатусыТранзакцийОбменаСБанками.Получена;
		Транзакция.Документооборот = Документооборот;
		Транзакция.Организация = Документооборот.Организация;
	Иначе
		// Транзакция уже существует.
		Транзакция = ТранзакцияСсылка.ПолучитьОбъект();
		Если Транзакция.ПометкаУдаления Тогда
			Транзакция.ПометкаУдаления = Ложь;
		КонецЕсли;
		
		// извлекаем данные транзакции из БД.
		РезультатПолученияДанных = ПолучитьДанныеТранзакцииИзБазыДанных(ТранзакцияСсылка);
		Если НЕ РезультатПолученияДанных.Выполнено И НЕ ЗакачатьЗаново Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Ошибка получения содержимого контейнера из базы данных.'");
			Возврат Результат;
		КонецЕсли;
		
		Если РезультатПолученияДанных.ДанныеФайла <> Неопределено И НЕ ЗакачатьЗаново Тогда
			РазмерКонтейнераВБД = РезультатПолученияДанных.ДанныеФайла.Размер;
			Если РазмерКонтейнераВБД = РазмерКонтейнера Тогда
				// Контейнер уже загружен.
				Результат.Транзакция = ТранзакцияСсылка;
				Результат.НоваяТранзакция = Ложь;
				Результат.Выполнено = Истина;
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
#КонецОбласти

#Область СкачиваниеКонтейнераССервера
	// Начинаем загрузку, получаем адрес контейнера.
	РезультатПолученияАдреса = ПолучитьАдресКонтейнераССервера(Токен, ИдентификаторТранзакции, ПараметрыСервера);
	
	Если НЕ РезультатПолученияАдреса.Выполнено Тогда
		ОписаниеОшибки = НСтр("ru='Ошибка получения адреса контейнера на сервере:
			|%1'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, РезультатПолученияАдреса.ОписаниеОшибки);
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
			НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	Адрес = РезультатПолученияАдреса.Адрес;
	
	// Скачивание контейнера.
	РезультатПолученияФайла = СкачатьДанныеИзХранилищаS3(Адрес, ИмяФайлаКонтейнера);
	Если НЕ РезультатПолученияФайла.Выполнено Тогда // ошибка при получении с сервера
		Результат.ОписаниеОшибки = РезультатПолученияФайла.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
#КонецОбласти

#Область РаспаковкаКонтейнера

	Попытка
		
		ЧтениеZip = Новый ЧтениеZipФайла;
		ЧтениеZip.Открыть(ИмяФайлаКонтейнера);
		КаталогСДаннымиКонтейнера = КаталогВременныхФайлов();
		КаталогСДаннымиКонтейнера = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогСДаннымиКонтейнера);
		КаталогСДаннымиКонтейнера = КаталогСДаннымиКонтейнера + ИдентификаторТранзакции;
		КаталогСДаннымиКонтейнера = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогСДаннымиКонтейнера);
		СоздатьКаталог(КаталогСДаннымиКонтейнера);
		УдалитьФайлы(КаталогСДаннымиКонтейнера, "*");
		ЧтениеZip.ИзвлечьВсе(КаталогСДаннымиКонтейнера);
		ЧтениеZip.Закрыть();
		
	Исключение
		
		// Чтобы не скачивать повторно испорченный архив сохраняем транзацию и данные контейнера.
		// Сохраняем содержимое транспортного контейнера в БД.
		ИмяФайлаВБД = ИмяТранспортногоКонтейнераПрисоединенныеФайлы(
			Сервис,
			"",
			"",
			Документооборот.Идентификатор,
			ИдентификаторТранзакции);
			
		РезультатСохранения = ПоместитьТранзакциюВБазуДанных(ТранзакцияСсылка,
			Новый ДвоичныеДанные(ИмяФайлаКонтейнера),
			ИмяФайлаВБД);
		
		Транзакция.ДатаТранспорта = ТекущаяДатаСеанса();
		Транзакция.Записать();
		
		Попытка
			УдалитьФайлы(ИмяФайлаКонтейнера);
		Исключение
			// Файл может не удалиться, так как захвачен объектом ЧтениеZip.
		КонецПопытки;
		
		ПодробноеПредставление = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Шаблон = НСтр("ru='Ошибка извлечения файлов транзакции %1 документооборота %2 из архива: %3.'");
		ПодробноеПредставление = СтрШаблон(Шаблон,
			ИдентификаторТранзакции,
			Документооборот.Идентификатор,
			ПодробноеПредставление);
		Результат.ОписаниеОшибки = ПодробноеПредставление;
		ЗаписатьСобытиеВЖурнал(ПодробноеПредставление,
			НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Результат;
		
	КонецПопытки;

#КонецОбласти

#Область РазборОписанияКонтейнера
	// Разбираем содержимое контейнера.
	// Ищем файл описания пакета.
	НайденныеФайлы = НайтиФайлы(КаталогСДаннымиКонтейнера, ИмяФайлаОписанияТранспортногоКонтейнера());
	Если НайденныеФайлы.Количество() = 0 Тогда
		ОписаниеОшибки = НСтр("ru='Контейнер не содержит файла описания содержимого %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ИмяФайлаОписанияТранспортногоКонтейнера());
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
			НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
		УдалитьФайлы(КаталогСДаннымиКонтейнера);
		УдалитьФайлы(ИмяФайлаКонтейнера);

		Возврат Результат;
	КонецЕсли;
	
	ИмяФайлаОписания = НайденныеФайлы[0].ПолноеИмя;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаОписания);
	ТранспортнаяИнформация = ФабрикаXDTO.ПрочитатьXML(
		ЧтениеXML,
		ФабрикаXDTO.Тип(
			ПространствоИменТранспортнойИнформации(),
			"ТранспортнаяИнформация"));
	ЧтениеXML.Закрыть();
	
	ИдентификаторДокументооборота = ТранспортнаяИнформация.ИдентификаторДокументооборота;
	ИдентификаторТранзакцииТранспортнаяИнформация = ТранспортнаяИнформация.ИдентификаторТранзакции;
	ВерсияФормата = ТранспортнаяИнформация.ВерсияФормата;
	ТипТранзакции = ОпределитьТипТранзакцииПоДаннымОписанияТранзакции(Сервис, ТранспортнаяИнформация);
	ТипДокументооборота = ОпределитьТипДокументооборотаПоДаннымОписанияТранзакции(Сервис, ТранспортнаяИнформация);
	СервисТранспортнаяИнформация = ОпределитьСервисПоСтроке(ТранспортнаяИнформация.ИдентификаторСервиса);
	
	Если ИдентификаторТранзакцииТранспортнаяИнформация <> ИдентификаторТранзакции Тогда
		ОписаниеОшибки = НСтр("ru = 'Идентификатор транзакции в файле ""%1"" не совпадает с идентификатором на сервере ""%2"".'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ИдентификаторТранзакцииТранспортнаяИнформация, ИдентификаторТранзакции);
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
			НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
		УдалитьФайлы(КаталогСДаннымиКонтейнера);
		УдалитьФайлы(ИмяФайлаКонтейнера);

		Возврат Результат;
	КонецЕсли;
	
	Если СервисТранспортнаяИнформация <> Сервис Тогда
		ОписаниеОшибки = НСтр("ru = 'Сервис транзакции в файле ""%1"" не совпадает с сервисом документооборота ""%2"".'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, СервисТранспортнаяИнформация, Сервис);
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
			НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
		УдалитьФайлы(КаталогСДаннымиКонтейнера);
		УдалитьФайлы(ИмяФайлаКонтейнера);

		Возврат Результат;
	КонецЕсли;
	
	Результат.ТипТранзакции       = ТипТранзакции;
	Результат.ТипДокументооборота = ТипДокументооборота;
	
	Транзакция.ТипТранзакции      = ТипТранзакции;
	
	ВходящаяТранзакция = Истина;
	Если ТранспортнаяИнформация.Получатель.Свойства()[0].Имя = "Банк" Тогда
		ВходящаяТранзакция = Ложь;
	КонецЕсли;
	
	Если НЕ ВходящаяТранзакция Тогда
		ИдентификаторБанка = ТранспортнаяИнформация.Получатель.Банк.Идентификатор;
	Иначе
		ИдентификаторБанка = ТранспортнаяИнформация.Отправитель.Банк.Идентификатор;
	КонецЕсли;
	
	Если НЕ ВходящаяТранзакция Тогда
		ИННОрганизации = ТранспортнаяИнформация.Отправитель.Организация.ИНН;
		КППОрганизации = ТранспортнаяИнформация.Отправитель.Организация.КПП;
	Иначе
		ИННОрганизации = ТранспортнаяИнформация.Получатель.Организация.ИНН;
		КППОрганизации = ТранспортнаяИнформация.Получатель.Организация.КПП;
	КонецЕсли;
	
	Организация = НайтиОрганизациюПоИННКПП(ИННОрганизации, КППОрганизации);
	
	Если Организация = Неопределено Тогда
		Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru='Организация с ИНН %1 и КПП %2 не найдена.'"), ИННОрганизации, КППОрганизации);
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки, , Документооборот);
		
		УдалитьФайлы(КаталогСДаннымиКонтейнера);
		УдалитьФайлы(ИмяФайлаКонтейнера);
		
		Возврат Результат;
	КонецЕсли;
	
	Если Организация <> Документооборот.Организация Тогда
		Результат.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Организация документооборота ""%1"" отличается от организации транзакции ""%2"". Возможно есть дубли по ИНН, КПП.'"),
			Документооборот.Организация,
			Организация);
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки, , Документооборот);
			
		УдалитьФайлы(КаталогСДаннымиКонтейнера);
		УдалитьФайлы(ИмяФайлаКонтейнера);

		Возврат Результат;
	КонецЕсли;
	
	Если ИдентификаторДокументооборота <> Документооборот.Идентификатор Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Идентификатор документооборота в контейнере отличается от идентификатора на сервере.'");
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки, , Документооборот);
		
		УдалитьФайлы(КаталогСДаннымиКонтейнера);
		УдалитьФайлы(ИмяФайлаКонтейнера);
		
		Возврат Результат;
	КонецЕсли;
	
	Если ИдентификаторТранзакции <> ИдентификаторТранзакцииТранспортнаяИнформация Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Идентификатор транзакции в контейнере отличается от идентификатора на сервере.'");
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки, , Документооборот);
		
		УдалитьФайлы(КаталогСДаннымиКонтейнера);
		УдалитьФайлы(ИмяФайлаКонтейнера);
		
		Возврат Результат;
	КонецЕсли;
	
	Банк = НайтиБанкПоИдентификатору(ИдентификаторБанка);
	Если Банк = Неопределено Тогда
		Результат.ОписаниеОшибки = СтрШаблон("ru = 'Не найден банк с идентификатором %1'", ИдентификаторБанка);
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки, , Документооборот);
		
		УдалитьФайлы(КаталогСДаннымиКонтейнера);
		УдалитьФайлы(ИмяФайлаКонтейнера);
		
		Возврат Результат;
	КонецЕсли;
	Транзакция.Банк = Банк;
	
	ЕстьЗашифрованные = Ложь;
	ЕстьПодписанные = Ложь;
	
	// Помещаем в присоединенные файлы данные, которые не требуют расшифровки.
	Для каждого Документ Из ЗначениеВКоллекцию(ТранспортнаяИнформация.Документы.Документ) Цикл
		Подписан = XMLЗначение(Тип("Булево"), Документ.Подписан);
		Зашифрован = XMLЗначение(Тип("Булево"), Документ.Зашифрован);
		Сжат = XMLЗначение(Тип("Булево"), Документ.Сжат);
		ТипСодержимого = Документ.ТипСодержимого;
		ИсходноеИмяФайла = Документ.ИсходноеИмяФайла;
		ИдентификаторДокумента = Документ.ИдентификаторДокумента;
		ТипДокументаСтрока = Документ.ТипДокумента;
		ТипДокумента = ОпределитьТипДокументаПоСтроке(Сервис, ТипДокументаСтрока);
		ПолноеИмяФайлаСодержимого = КаталогСДаннымиКонтейнера + Документ.Содержимое.ИмяФайла;
		НайденныеФайлы = НайтиФайлы(ПолноеИмяФайлаСодержимого);
		Если НайденныеФайлы.Количество() = 0 Тогда
			УдалитьФайлы(КаталогСДаннымиКонтейнера);
			УдалитьФайлы(ИмяФайлаКонтейнера);
			ОписаниеОшибки = НСтр("ru='В контейнере отсутсвует файл %1.'");
			Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Документ.Содержимое.ИмяФайла);
			ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
				НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			Возврат Результат;
		КонецЕсли;
		Если Подписан Тогда
			ИмяФайлаПодписи = Документ.Подпись.ИмяФайла;
			ПолноеИмяфайлаПодписи = КаталогСДаннымиКонтейнера + ИмяФайлаПодписи;
			НайденныеФайлы = НайтиФайлы(ПолноеИмяфайлаПодписи);
			Если НайденныеФайлы.Количество() = 0 Тогда
				УдалитьФайлы(КаталогСДаннымиКонтейнера);
				УдалитьФайлы(ИмяФайлаКонтейнера);
				ОписаниеОшибки = НСтр("ru='В контейнере отсутсвует файл подписи %1.'");
				Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ИмяФайлаПодписи);
				ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
					НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		Если Зашифрован Тогда
			ЕстьЗашифрованные = Истина;
		Иначе
			// сохраняем файлы в базу данных
			КаталогСДаннымиДокумента = "";
			Если Сжат Тогда
				// распаковываем сжатый файл
				ЧтениеZip.Открыть(ПолноеИмяФайлаСодержимого);
				КаталогСДаннымиДокумента = КаталогСДаннымиКонтейнера;
				КаталогСДаннымиДокумента = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогСДаннымиДокумента);
				КаталогСДаннымиДокумента = КаталогСДаннымиДокумента + ИдентификаторДокумента;
				КаталогСДаннымиДокумента = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогСДаннымиДокумента);
				СоздатьКаталог(КаталогСДаннымиДокумента);
				УдалитьФайлы(КаталогСДаннымиДокумента, "*");
				// Извлекаем только первый файл.
				ЧтениеZip.Извлечь(ЧтениеZip.Элементы[0], КаталогСДаннымиДокумента);
				ИмяФайлаВАрхиве = ЧтениеZip.Элементы[0].Имя;
				ЧтениеZip.Закрыть();
				УдалитьФайлы(ПолноеИмяФайлаСодержимого);
				ПолноеИмяФайлаСодержимого = КаталогСДаннымиДокумента + ИмяФайлаВАрхиве;
			КонецЕсли;
			
			// Сохраняем сожержимое файла в присоединенные файлы.
			РезультатСохранения = ПоместитьСодержимоеТранзакцииВБазуДанных(ТранзакцияСсылка,
				ТипДокумента,
				ПолноеИмяФайлаСодержимого,
				ИсходноеИмяФайла);
				
			Если НЕ РезультатСохранения Тогда
				УдалитьФайлы(КаталогСДаннымиКонтейнера);
				УдалитьФайлы(ИмяФайлаКонтейнера);
				ОписаниеОшибки = НСтр("ru='Ошибка записи содержимого контейнера в базу данных.'");
				Результат.ОписаниеОшибки = ОписаниеОшибки;
				ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
					НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Зашифрован И Подписан Тогда
			ЕстьПодписанные = Истина;
			// Сохраняем файл подписи в БД.
			ИмяфайлаПодписиБД = ИмяФайлаПодписиПрисоединенныеФайлы(ИсходноеИмяФайла);
			РезультатСохранения = ПоместитьСодержимоеТранзакцииВБазуДанных(ТранзакцияСсылка,
				Перечисления.ТипыДокументовОбменаСБанками.ЭлектронноЦифроваяПодпись,
				ПолноеИмяфайлаПодписи,
				ИмяфайлаПодписиБД);
			Если НЕ РезультатСохранения Тогда
				УдалитьФайлы(КаталогСДаннымиКонтейнера);
				УдалитьФайлы(ИмяФайлаКонтейнера);
				ОписаниеОшибки = НСтр("ru='Ошибка сохранения файла с подписью.'");
				Результат.ОписаниеОшибки = ОписаниеОшибки;
				ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
					НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
#КонецОбласти

#Область СохранениеДанныхТранзакцииВБД
	// Устанавливаем признак того, что данные требуют расшифровки и проверки подписи.
	НаборЗаписей = РегистрыСведений.СвойстваТранзакцийОбменаСБанками.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Транзакция.Установить(ТранзакцияСсылка);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Если ЕстьЗашифрованные ИЛИ ЕстьПодписанные Тогда
			Запись = РегистрыСведений.СвойстваТранзакцийОбменаСБанками.СоздатьМенеджерЗаписи();
			Запись.Транзакция = ТранзакцияСсылка;
			Запись.Организация = Организация;
			Запись.ТребуетРасшифровки = ЕстьЗашифрованные;
			Запись.ТребуетПроверкиПодписи = ЕстьПодписанные;
			Запись.Записать(Истина);
		КонецЕсли;
	Иначе
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.ТребуетРасшифровки = ЕстьЗашифрованные;
			Запись.ТребуетПроверкиПодписи = ЕстьПодписанные;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	// Сохраняем содержимое транспортного контейнера в БД.
	ИмяФайлаВБД = ИмяТранспортногоКонтейнераПрисоединенныеФайлы(
		Сервис,
		ИННОрганизации,
		КППОрганизации,
		ИдентификаторДокументооборота,
		ИдентификаторТранзакции);
		
	РезультатСохранения = ПоместитьТранзакциюВБазуДанных(ТранзакцияСсылка,
		Новый ДвоичныеДанные(ИмяФайлаКонтейнера),
		ИмяФайлаВБД);
		
	УдалитьФайлы(КаталогСДаннымиКонтейнера);
	УдалитьФайлы(ИмяФайлаКонтейнера);
	
	Если НЕ РезультатСохранения Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка сохранения контейнера в базе данных.'");
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
			НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			ТранзакцияСсылка);
		Возврат Результат;
	КонецЕсли;
#КонецОбласти
	
	// Определяем дату транспорта.
	Транзакция.ДатаТранспорта = ТекущаяДатаСеанса();
	
	Транзакция.Записать();
	
	Результат.Транзакция = Транзакция.Ссылка;
	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьТранзакцииССервера(Токен, Сервис, Отбор = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("НовыеТранзакции", Неопределено);
	
	ОписаниеОшибок = Новый Массив;
	БылиОшибки = Ложь;
	НовыеТранзакции = Новый Массив;
	
	ОжидающиеОтветаДокументообороты = ОжидающиеОтветаДокументообороты(Сервис, Отбор);
	
	ВсегоДокументооборотов = ОжидающиеОтветаДокументообороты.Количество();
	Если ВсегоДокументооборотов = 0 Тогда
		Результат.Выполнено = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Для каждого ДанныеДокументооборота Из ОжидающиеОтветаДокументообороты Цикл
		
		Документооборот = ДанныеДокументооборота.Ссылка;
		
		// Оповещаем клиента об изменении статуса обмена.
		ПараметрыЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.НовыеПараметрыСменыЭтапаОбмена();
		ПараметрыЭтапа.Имя = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаПолучениеВходящих();
		ПараметрыЭтапа.Банк = ДанныеДокументооборота.Банк;
		ПараметрыЭтапа.Организация = ДанныеДокументооборота.Организация;
		ПараметрыЭтапа.Документооборот = Документооборот;
		ДлительныеОперацииОбменаСБанками.ОповеститьОСменеЭтапаОбмена(ПараметрыЭтапа);
		
		// Получаем входящие по документообороту.
		РезультатПолученияСпискаКонтейнеров = СписокВходящихТранзакцийНаСервере(
			Токен,
			Документооборот);
		Если НЕ РезультатПолученияСпискаКонтейнеров.Выполнено Тогда
			БылиОшибки = Истина;
			ОписаниеОшибки = НСтр("ru='Ошибка при получении списка входящих сообщений по документообороту %1:
				|%2'");
			ОписаниеОшибки = СтрШаблон(ОписаниеОшибки,
				Документооборот.Идентификатор,
				РезультатПолученияСпискаКонтейнеров.ОписаниеОшибки);
			ОписаниеОшибок.Добавить(ОписаниеОшибки);
			ДлительныеОперацииОбменаСБанками.ВывестиОшибку(ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		Для каждого Контейнер Из РезультатПолученияСпискаКонтейнеров.ТаблицаКонтейнеров Цикл
			
			// Загрузка контейнера с транзакцией с сервера.
			Параметры = ПараметрыЗагрузитьТранзакциюССервера();
			Параметры.Токен = Токен;
			Параметры.ИдентификаторТранзакции = Контейнер.ИдентификаторТранзакции;
			Параметры.Документооборот = Документооборот;
			Параметры.ЗакачатьЗаново = Ложь;
			Параметры.Размер = Контейнер.Размер;
			
			Попытка
				РезультатЗагрузкиКонтейнера = ЗагрузитьТранзакциюССервера(Параметры);
			Исключение
				БылиОшибки = Истина;
				ОписаниеОшибок.Добавить(ОписаниеОшибки());
				ТекстОшибки = НСтр("ru='Ошибка загрузки сообщения с сервера.'");
				ДлительныеОперацииОбменаСБанками.ВывестиОшибку(ТекстОшибки);
				Продолжить;
			КонецПопытки;
			
			// Вызов предопределенного метода обработки загруженной транзакции.
			Транзакция = РезультатЗагрузкиКонтейнера.Транзакция;
			Если Транзакция <> Неопределено И РезультатЗагрузкиКонтейнера.НоваяТранзакция Тогда
				ПараметрыПриПолученииТранзакции = Новый Структура("
					|Выполнено,
					|ОписаниеОшибки,
					|ИдентификаторТранзакции,
					|Документооборот");
				ЗаполнитьЗначенияСвойств(ПараметрыПриПолученииТранзакции, РезультатЗагрузкиКонтейнера);
				ПараметрыПриПолученииТранзакции.ИдентификаторТранзакции = Контейнер.ИдентификаторТранзакции;
				ПараметрыПриПолученииТранзакции.Документооборот = Документооборот;
				// Вызываем предопределенный метод.
				Попытка
					ПриПолученииТранзакции(
						Транзакция,
						ПараметрыПриПолученииТранзакции);
				Исключение
					БылиОшибки = Истина;
					ОписаниеОшибок.Добавить(ОписаниеОшибки());
					ТекстОшибки = НСтр("ru='Ошибка обработки данных транзакции сервисом.'");
					ДлительныеОперацииОбменаСБанками.ВывестиОшибку(ТекстОшибки);
					Продолжить;
				КонецПопытки;
				НовыеТранзакции.Добавить(Транзакция);
			КонецЕсли;
				
			// Обработка ошибок.
			Если НЕ РезультатЗагрузкиКонтейнера.Выполнено Тогда
				БылиОшибки = Истина;
				ОписаниеОшибки = РезультатЗагрузкиКонтейнера.ОписаниеОшибки;
				ОписаниеОшибок.Добавить(ОписаниеОшибки);
				ДлительныеОперацииОбменаСБанками.ВывестиОшибку(ОписаниеОшибки);
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если БылиОшибки Тогда
		ОписаниеОшибок.Вставить(0, НСтр("ru='При загрузке транзакций возникли следующие ошибки:'"));
		ОписаниеОшибки = СтрСоединить(ОписаниеОшибок, Символы.ПС);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки);
		Результат.ОписаниеОшибки = НСтр("ru='При загрузке транзакций возникли ошибки.'");
	Иначе
		Результат.Выполнено = Истина;
		Результат.НовыеТранзакции = НовыеТранзакции;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьТранзакцию(Токен, Знач Транзакция, ПараметрыСервера = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ТранзакцияБылаОтправленаРанее", Ложь);
	Результат.Вставить("АдресТранзакции", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Если Транзакция.Пустая() Тогда
		ТекстСообщения = НСтр("ru='На задана транзакция для отправки.'");
		Результат.ОписаниеОшибки = ТекстСообщения;
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Транзакция);
	Исключение
		// Транзакция уже находится в процессе отправки.
		Если Транзакция.Статус = Перечисления.СтатусыТранзакцийОбменаСБанками.Отправлена Тогда
			Результат.Выполнено = Истина;
			Результат.КонтейнерБылОтправленРанее = Истина;
			Возврат Результат;
		Иначе
			ТекстСообщения = НСтр("ru='Ошибка при блокировке контейнера: " + ОписаниеОшибки() + "'");
			ЗаписатьСобытиеВЖурнал(ТекстСообщения,
				НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Транзакция,
				УровеньЖурналаРегистрации.Предупреждение);
			Результат.ОписаниеОшибки = ТекстСообщения;
			Возврат Результат;
		КонецЕсли;
	КонецПопытки;
	
	// Инициализируем флаг ошибки.
	ПризнакОшибки = Ложь;
	ИмяСобытия = НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
	// Полученные сообщения не отправляются.
	Если Транзакция.Статус = Перечисления.СтатусыТранзакцийОбменаСБанками.Получена Тогда
		РазблокироватьДанныеДляРедактирования(Транзакция);
		ТекстСообщения = НСтр("ru = 'Отправка полученных транзакций запрещена.'");
		ЗаписатьСобытиеВЖурнал(ТекстСообщения, ИмяСобытия, Транзакция, УровеньЖурналаРегистрации.Предупреждение);
		Результат.ОписаниеОшибки = ТекстСообщения;
		Возврат Результат;
	КонецЕсли;
	
	ТранзакцияЗапакована = ТранзакцияЗапакована(Транзакция);
	Если НЕ ТранзакцияЗапакована Тогда
		РазблокироватьДанныеДляРедактирования(Транзакция);
		ТекстСообщения = "Не обнаружен зашифрованный контейнер для транзакции " + Транзакция + ".";
		ЗаписатьСобытиеВЖурнал(ТекстСообщения, ИмяСобытия, Транзакция, УровеньЖурналаРегистрации.Предупреждение);
		Результат.ОписаниеОшибки = ТекстСообщения;
		Возврат Результат;
	КонецЕсли;
	
#Область ПроверкиПередОтправкой
	
	// различные проверки
	Если НЕ ЗначениеЗаполнено(Транзакция.ТипТранзакции) Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка отправки транзакции: тип транзакции не определен.'");
		ЗаписатьСобытиеВЖурнал(ТекстСообщения, ИмяСобытия, Транзакция);
		ПризнакОшибки = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Транзакция.Организация) Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка отправки транзакции: не задана организация.'");
		ЗаписатьСобытиеВЖурнал(ТекстСообщения, ИмяСобытия, Транзакция);
		ПризнакОшибки = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Транзакция.Банк) И Транзакция.Банки.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка отправки транзакции: не задан банк-получатель.'");
		ЗаписатьСобытиеВЖурнал(ТекстСообщения, ИмяСобытия, Транзакция);
		ПризнакОшибки = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Транзакция.Документооборот) Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка отправки транзакции: документооборот не задан.'");
		ЗаписатьСобытиеВЖурнал(ТекстСообщения, ИмяСобытия, Транзакция);
		ПризнакОшибки = Истина;
		
	КонецЕсли;
	
	// если ошибка, то прервемся
	Если ПризнакОшибки Тогда
		
		РазблокироватьДанныеДляРедактирования(Транзакция);
		Результат.ОписаниеОшибки = ТекстСообщения;
		Возврат Результат;
		
	КонецЕсли;
	
#КонецОбласти

	// получаем зашифрованный транспортный контейнер
	ОписаниеТранспортныхКонтейнеров = ПолучитьТранспортныйКонтейнер(Транзакция, Истина);
	Если ОписаниеТранспортныхКонтейнеров.Количество() = 0 Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Не удалось отправить транзакцию по причине отсутствия сформированного пакета.'");
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Работа с архивом'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Транзакция);

		РазблокироватьДанныеДляРедактирования(Транзакция);
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
		
	КонецЕсли;

	ОписаниеТранспортногоКонтейнера = ОписаниеТранспортныхКонтейнеров[0];

#Область ОтправкаКонтейнераНаСервер

	ДанныеФайла = ОписаниеТранспортногоКонтейнера.Данные.Получить();
	ПолныйПутьФайлаКонтейнера = ПолучитьИмяВременногоФайла();
	ДанныеФайла.Записать(ПолныйПутьФайлаКонтейнера);
	
	// Отправляем содержимое контейнера.
	Размер = ОписаниеТранспортногоКонтейнера.Размер;
	Параметры = ПараметрыОтправитьТранспортныйКонтейнерНаСервер();
	Параметры.Токен = Токен;
	Параметры.Размер = Размер;
	Параметры.Транзакция = Транзакция;
	Параметры.ПолныйПутьФайлаКонтейнера = ПолныйПутьФайлаКонтейнера;
	Параметры.ПараметрыСервера = ПараметрыСервера;
	// Отправка данных контейнера на сервер.
	РезультатОтправки = ОтправитьТранспортныйКонтейнерНаСервер(Параметры);
	Если НЕ РезультатОтправки.Выполнено Тогда
		
		ЗаписатьСобытиеВЖурнал(РезультатОтправки.ОписаниеОшибки,
			НСтр("ru = 'HTTP-запрос'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Транзакция);
		РазблокироватьДанныеДляРедактирования(Транзакция);
		Результат.ОписаниеОшибки = РезультатОтправки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;

#КонецОбласти
	
#Область ОтражениеОтправкиВИБ

	// Инициализируем объект-транзакцию и ссылку на транзакцию, используемые в ниже.
	Если ТипЗнч(Транзакция) = Тип("СправочникСсылка.ТранзакцииОбменаСБанками") Тогда
		ОбъектТранзакция = Транзакция.ПолучитьОбъект();
	Иначе
		ОбъектТранзакция = Транзакция;
	КонецЕсли;
	ТранзакцияСсылка = ОбъектТранзакция.Ссылка;

	ОбъектТранзакция.Статус = Перечисления.СтатусыТранзакцийОбменаСБанками.Отправлена;
	
	// определяем дату транспорта
	ОбъектТранзакция.ДатаТранспорта = ТекущаяДатаСеанса();
	
	// сохраняем сообщение
	Попытка
	
		ОбъектТранзакция.Записать();
	
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать контейнер 
                  |%1!
                  |%2'"),
			ПредставлениеКонтейнера(ТранзакцияСсылка),
			УниверсальныйОбменСБанкамиКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание);
		ИмяСобытия = НСтр("ru = 'Транспортный контейнер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписатьСобытиеВЖурнал(ТекстСообщения, ИмяСобытия, ТранзакцияСсылка);
			
		РазблокироватьДанныеДляРедактирования(Транзакция);
		Результат.ОписаниеОшибки = ТекстСообщения;
		Возврат Результат;
		
	КонецПопытки;
	
#КонецОбласти
	
	РазблокироватьДанныеДляРедактирования(Транзакция);
	
	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыОтправитьТранспортныйКонтейнерНаСервер() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Токен", "");
	Параметры.Вставить("Размер", 0);
	Параметры.Вставить("Транзакция", Неопределено);
	Параметры.Вставить("ПолныйПутьФайлаКонтейнера", "");
	Параметры.Вставить("ПараметрыСервера", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

// Преобразовывает JSON тела ответа в структуру.
Функция JSONВСтруктуру(ТелоОтветаИмяФайла, ЧтениеИзФайла = Ложь) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	Если НЕ ЧтениеИзФайла Тогда
		ЧтениеJSON.УстановитьСтроку(ТелоОтветаИмяФайла);
	Иначе
		ЧтениеJSON.ОткрытьФайл(ТелоОтветаИмяФайла);
	КонецЕсли;
	
	Данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПространствоИменТранспортнойИнформации()
	
	Возврат "http://bankflow.1c.ru";
	
КонецФункции

Функция ТаблицаЭтаповОтправки(Документооборот, ДополнительныеПараметры)
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	УниверсальныйОбменСБанкамиПереопределяемый.ТаблицаЭтаповОтправки(Документооборот, ДополнительныеПараметры, ТаблицаЭтаповОтправки);
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ИмяФайлаПодписиПрисоединенныеФайлы(ИмяДокумента)
	
	КомпонентыИмени = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяДокумента);
	ИмяФайла = КомпонентыИмени.Имя;
	Шаблон = НСтр("ru='%1%2.p7s'");
	Возврат СтрШаблон(Шаблон, ПрефиксИмяФайлаПодписиПрисоединенныеФайлы(), ИмяФайла);
	
КонецФункции

Функция ИмяТранспортногоКонтейнераПрисоединенныеФайлы(Сервис,
		ИННОрганизации,
		КППОрганизации,
		ИдентификаторДокументооборота,
		ИдентификаторТранзакции)
		
	СервисСтрока = СтрЗаменить(Сервис, " ", "_");
	
	ИмяТранспортногоКонтейнераБД = СтрШаблон("%1_%2_%3_%4_%5.zip",
		СервисСтрока,
		ИННОрганизации,
		КППОрганизации,
		ИдентификаторДокументооборота,
		ИдентификаторТранзакции);
		
	ИмяТранспортногоКонтейнераБД = ОбщегоНазначенияКлиентСервер.
		ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяТранспортногоКонтейнераБД, "");
	
	Возврат ИмяТранспортногоКонтейнераБД;
	
КонецФункции

Функция ЕстьФункциональнаяОпцияИспользоватьНесколькоОрганизаций()
	
	ФункциональнаяОпцияПрисутствует = Метаданные.ФункциональныеОпции.Найти("ИспользоватьНесколькоОрганизацийРегламентированнаяОтчетность") <> Неопределено;
	
	Возврат ФункциональнаяОпцияПрисутствует;
		
КонецФункции

Функция НеотправленныеИзвещения(Сервис, Отбор = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("МассивТранзакцийНеИмеющихПодтверждений",	Новый Массив);
	Результат.Вставить("МассивНеотправленныхПодтверждений",			Новый Массив);
	Результат.Вставить("ЕстьНеотправленныеИзвещения",				Ложь);
	
	УниверсальныйОбменСБанкамиПереопределяемый.НеотправленныеИзвещения(
		Сервис,
		Отбор,
		Результат);
	
	Возврат Результат;
	
КонецФункции

// функция возвращает список запрещенных символов в именах файлов
// Возвращаемое значение:
//   Список значений в котором хранится список всех запрещенных символов в именах файлов.
//
Функция ПолучитьСписокЗапрещенныхСимволовВИменахФайлов()
	
	СписокСимволов = Новый СписокЗначений();
	
	СписокСимволов.Добавить("\");
	СписокСимволов.Добавить("/");
	СписокСимволов.Добавить(":");
	СписокСимволов.Добавить("*");
	СписокСимволов.Добавить("&");
	СписокСимволов.Добавить("""");
	СписокСимволов.Добавить("<");
	СписокСимволов.Добавить(">");
	СписокСимволов.Добавить("|");
	
	Возврат СписокСимволов;
	
КонецФункции

Функция ПроверкаИмениФайла(ИмяФайла)
	
	НеДопустимыеСимволы = ПолучитьСписокЗапрещенныхСимволовВИменахФайлов();
	ДлинаСтроки = СтрДлина(НеДопустимыеСимволы);
	Для Каждого СтрокаЗапретногоСимвола Из НеДопустимыеСимволы Цикл
		Символ = СтрокаЗапретногоСимвола.Значение;
		Если Найти(ИмяФайла, Символ) > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ДвоичныеДанныеИзСтроки64НаСервере(Данные)
	
	Возврат Base64Значение(Данные);
	
КонецФункции

Функция СгенерироватьUUID() Экспорт

	Возврат НРег(Строка(Новый УникальныйИдентификатор));
	
КонецФункции

Процедура ПриЗаписиДокументооборота(Объект, Отказ)
	
	Если Объект.ИзмененаПометкаУдаления Тогда
		Транзакции = ПолучитьТранзакцииДокументооборота(Объект.Ссылка, , Истина);
		Для Каждого Транзакция Из Транзакции Цикл
			ОбъектТранзакция = Транзакция.Ссылка.ПолучитьОбъект();
			ОбъектТранзакция.УстановитьПометкуУдаления(Объект.ПометкаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыПередЗаписью

Процедура ПриЗаписиТранспортногоКонтейнера(Объект, Отказ)
	
	Если НЕ ОбновитьСвойстваДокументооборота(Объект.Документооборот) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Обновляем статус в регистре ЖурналОтправокВКонтролирующиеОрганы
	Документооборот = Объект.Документооборот;
	Если НЕ ЗначениеЗаполнено(Документооборот) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ИзмененаПометкаУдаления Тогда
		// Меняем пометку на удаление у вложенных объектов.
		// Элементы справочника ТранзакцииОбменаСБанкамиПрисоединенныеФайлы.
		МассивФайлов = ПрикрепленныеФайлыКОбъектуИзСправочника(
			Объект.Ссылка,
			"ТранзакцииОбменаСБанкамиПрисоединенныеФайлы", , ,
			Истина);
		Для каждого Файл Из МассивФайлов Цикл
			ОбъектФайла = Файл.ПолучитьОбъект();
			ОбъектФайла.УстановитьПометкуУдаления(Объект.ПометкаУдаления);
		КонецЦикла;
		// Элементы справочника ТранзакцииОбменаСБанкамиСодержимоеПрисоединенныеФайлы.
		МассивФайлов = ПрикрепленныеФайлыКОбъектуИзСправочника(
			Объект.Ссылка,
			"ТранзакцииОбменаСБанкамиСодержимоеПрисоединенныеФайлы", , ,
			Истина);
		Для каждого Файл Из МассивФайлов Цикл
			ОбъектФайла = Файл.ПолучитьОбъект();
			ОбъектФайла.УстановитьПометкуУдаления(Объект.ПометкаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюТранзакции(Объект, Отказ, РежимЗаписи, РежимПроведения)
	
	Объект.ИзмененаПометкаУдаления = (Объект.Ссылка.ПометкаУдаления <> Объект.ПометкаУдаления);
	Если Объект.ИзмененаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		СгенерироватьНаименованиеТранзакции(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюУслугиБанка(Объект, Отказ, РежимЗаписи, РежимПроведения)
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = СтрШаблон("Услуга %1 %2", Объект.Сервис, Объект.Банк);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ИмяФайлаОписанияТранспортногоКонтейнера()
	
	Возврат "packageDescription.xml";
	
КонецФункции

Процедура ЗаполнитьМассивРекурсивно(СписокXDTO, Массив)
	
	Для каждого ЭлементСписка Из СписокXDTO Цикл
		Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
			Структура = Новый Структура;
			ПреобразоватьОбъектXDTOВСтруктуру(ЭлементСписка, Структура);
			Массив.Добавить(Структура);
		Иначе
			Массив.Добавить(ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяСтруктураПоТаблицеЗначений(Таблица)
	
	Результат = Новый Структура();
	
	Для каждого Колонка Из Таблица.Колонки Цикл
		// Назначим пустое значение соответствующего типа.
		Результат.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция - Создать файл описания транзакции
//
// Параметры:
//  Вложения - 	 - 
//  Контекст - 	 - 
//  Путь	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция СоздатьФайлОписанияТранзакции(Вложения, Контекст, Путь)
	
	ИдентификаторДокументооборота = Контекст.ИдентификаторДокументооборота;
	ИдентификаторТранзакции = Контекст.ИдентификаторТранзакции;
	ТипТранзакции = Контекст.ТипТранзакции;
	ТипДокументооборота = Контекст.ТипДокументооборота;
	Сервис = Контекст.Сервис;
	
	ДеревоОписания = СоздатьДеревоXML();
	
	ТипТранзакцииВВидеСтроки = ОпределитьТипТранзакцииПоСсылке(
			Сервис,
			ТипТранзакции);
	ТипДокументооборотаВВидеСтроки = ОпределитьТипДокументооборотаПоСсылке(
			Сервис,
			Контекст.ТипДокументооборота);
	СервисВВидеСтроки = ОпределитьСервисПоСсылке(Сервис);
	КодТипаТранзакции = ОпределитьКодТипаТранзакцииПоСсылке(Сервис, ТипТранзакции);
	КодТипаДокументооборота = ОпределитьКодТипаДокументооборотаПоСсылке(Сервис, ТипДокументооборота);
	
	УзелТранспортнаяИнформация = ДеревоОписания;
	ДобавитьУзелXML(УзелТранспортнаяИнформация, "ИдентификаторСервиса", Истина, СервисВВидеСтроки);
	ДобавитьУзелXML(УзелТранспортнаяИнформация, "ИдентификаторДокументооборота", Истина, ИдентификаторДокументооборота);
	ДобавитьУзелXML(УзелТранспортнаяИнформация, "ИдентификаторТранзакции", Истина, ИдентификаторТранзакции);
	ДобавитьУзелXML(УзелТранспортнаяИнформация, "ВерсияФормата", Истина, "1.0");
	ДобавитьУзелXML(УзелТранспортнаяИнформация, "ТипТранзакции", Истина, ТипТранзакцииВВидеСтроки);
	ДобавитьУзелXML(УзелТранспортнаяИнформация, "ТипДокументооборота", Истина, ТипДокументооборотаВВидеСтроки);
	ДобавитьУзелXML(УзелТранспортнаяИнформация, "КодТипаТранзакции", Истина, КодТипаТранзакции);
	ДобавитьУзелXML(УзелТранспортнаяИнформация, "КодТипаДокументооборота", Истина, КодТипаДокументооборота);
	ДобавитьУзелXML(УзелТранспортнаяИнформация, "ВерсияПрограммы", Истина, НазваниеИВерсияПрограммы());

	Если Контекст.ФормироватьОтветноеСообщениеБанка Тогда // для тестирования
		
		// Получатель транзакции, Организация.
		УзелОтправитель = ДобавитьУзелXML(УзелТранспортнаяИнформация, "Получатель", Ложь);
		УзелОрганизация = ДобавитьУзелXML(УзелОтправитель, "Организация", Ложь);
		ДобавитьУзелXML(УзелОрганизация, "ИНН", Истина, Контекст.ИННОрганизации);
		ДобавитьУзелXML(УзелОрганизация, "КПП", Истина, Контекст.КППОрганизации);
		ДобавитьУзелXML(УзелОрганизация, "Наименование", Истина, Контекст.НаименованиеОрганизации);
		
		// Отправитель транзакции, Банк.
		Если Контекст.Получатели.Количество() > 1 Тогда
			ВызватьИсключение "В получателях указано более одного банка.";
		КонецЕсли;
		
		УзелПолучатель = ДобавитьУзелXML(УзелТранспортнаяИнформация, "Отправитель", Ложь);
		УзелБанк = ДобавитьУзелXML(УзелПолучатель, "Банк", Ложь);
		ДобавитьУзелXML(УзелБанк, "Идентификатор", Истина, Контекст.Получатели[0].Идентификатор);
		
	Иначе
		
		// Отправитель транзакции, Организация.
		УзелОтправитель = ДобавитьУзелXML(УзелТранспортнаяИнформация, "Отправитель", Ложь);
		УзелОрганизация = ДобавитьУзелXML(УзелОтправитель, "Организация", Ложь);
		ДобавитьУзелXML(УзелОрганизация, "ИНН", Истина, Контекст.ИННОрганизации);
		ДобавитьУзелXML(УзелОрганизация, "КПП", Истина, Контекст.КППОрганизации);
		ДобавитьУзелXML(УзелОрганизация, "Наименование", Истина, Контекст.НаименованиеОрганизации);
		
		// Получатель транзакции, Банк, считаем, что он может быть только один.
		УзелПолучатель = ДобавитьУзелXML(УзелТранспортнаяИнформация, "Получатель", Ложь);
		Получатель = Контекст.Получатели[0];
		УзелБанк = ДобавитьУзелXML(УзелПолучатель, "Банк", Ложь);
		ДобавитьУзелXML(УзелБанк, "Идентификатор", Истина, Получатель.Идентификатор);
		ДобавитьУзелXML(УзелБанк, "Наименование", Истина, Получатель.Наименование);
		
	КонецЕсли;
	
	УзелДокументы = ДобавитьУзелXML(УзелТранспортнаяИнформация, "Документы", Ложь);
	
	Для каждого Вложение Из Вложения Цикл
		
		УзелДокумент = ДобавитьУзелXML(УзелДокументы, "Документ", Ложь);
		ДобавитьУзелXML(УзелДокумент, "Подписан", Истина, XMLСтрока(Вложение.Подписать));
		ДобавитьУзелXML(УзелДокумент, "Зашифрован", Истина, XMLСтрока(Вложение.Зашифровать));
		ДобавитьУзелXML(УзелДокумент, "Сжат", Истина, XMLСтрока(Вложение.Сжать));
		ДобавитьУзелXML(УзелДокумент, "ТипСодержимого", Истина, ОпределитьТипСодержимогоПоСсылке(Вложение.ТипСодержимого));
		ДобавитьУзелXML(УзелДокумент, "ИсходноеИмяФайла", Истина, Вложение.ИсходноеИмяФайла);
		ДобавитьУзелXML(УзелДокумент, "ИдентификаторДокумента", Истина, Вложение.ИдентификаторДокумента);
		ДобавитьУзелXML(УзелДокумент, "ТипДокумента", Истина, 
			ОпределитьТипДокументаПоСсылке(
				Контекст.Сервис,
				Вложение.ТипДокумента));
		ДобавитьУзелXML(УзелДокумент, "КодТипаДокумента", Истина, 
			ОпределитьКодТипаДокументаПоСсылке(
				Контекст.Сервис,
				Вложение.ТипДокумента));
		
		УзелСодержимое = ДобавитьУзелXML(УзелДокумент, "Содержимое", Ложь);
		ДобавитьУзелXML(УзелСодержимое, "ИмяФайла", Истина, Вложение.ИмяФайлаДанныхВАрхиве);
		
		Если Вложение.Подписать Тогда
			УзелПодпись = ДобавитьУзелXML(УзелДокумент, "Подпись", Ложь);
			ДобавитьУзелXML(УзелПодпись, "ИмяФайла", Истина, Вложение.ИмяФайлаПодписиВАрхиве);
		КонецЕсли;
		
		Если Контекст.Получатели.Количество() > 1 Тогда
			// добавляем узел Получатели в документ только если получателей транзакции больше 1
			УзелПолучатели= ДобавитьУзелXML(УзелДокумент, "Получатели", Ложь);
			УзелБанки = ДобавитьУзелXML(УзелПолучатели, "Банки", Ложь);
			Для каждого Получатель Из Вложение.Получатели Цикл
				УзелБанк = ДобавитьУзелXML(УзелБанки, "Банк", Ложь);
				ДобавитьУзелXML(УзелБанк, "Идентификатор", Истина, Получатель.Идентификатор);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаXML = ВыгрузитьДеревоВXML(ДеревоОписания, "ТранспортнаяИнформация");
	КороткоеИмяФайла = ИмяФайлаОписанияТранспортногоКонтейнера();
	ПолноеИмяФайла = Путь + КороткоеИмяФайла;
	РезультатЗаписи = ЗаписатьXMLВФайл(СтрокаXML, ПолноеИмяФайла);
	
	Если НЕ РезультатЗаписи Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

Функция ПолучитьРезультатОбработкиВложения(Вложение)
	
	Возврат Вложение.Результат.Получить();
	
КонецФункции

Функция ПолучитьИсходныеДанныеВложения(Вложение)
	
	Возврат Вложение.ИсходныеДанные.Получить();
	
КонецФункции

Функция ВерсияПрограммы()
	
	Возврат СокрЛП(Метаданные.Версия);
	
КонецФункции

Функция НазваниеПрограммы()
	
	Название = "";
	УниверсальныйОбменСБанкамиПереопределяемый.КраткоеНазваниеПрограммы(Название);
	Возврат Название;
	
КонецФункции

Функция НазваниеИВерсияПрограммы() Экспорт
	
	Возврат ВРЕГ(СтрШаблон("%1 %2", НазваниеПрограммы(), ВерсияПрограммы()));
	
КонецФункции

Функция СписокСервисовДляАвтоматическойПроверкиВходящихТранзакций()
	
	Сервисы = Новый Массив;
	УниверсальныйОбменСБанкамиПереопределяемый.СписокСервисовДляАвтоматическойПроверкиВходящихТранзакций(Сервисы);
	Возврат Сервисы;
	
КонецФункции

Функция ПредставлениеКонтейнера(КонтейнерСсылка)
	
	Возврат Строка(КонтейнерСсылка);
	
КонецФункции

Функция НайтиОрганизациюПоИННКПП(ИНН, КПП)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.ИНН = &ИНН
	               |	И Организации.КПП = &КПП";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	Выборка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Выборка[0].Ссылка;
	КонецЕсли;
	
КонецФункции

Функция НайтиУслугуБанка(Сервис, Банк)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УслугиБанков.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УслугиБанков КАК УслугиБанков
	|ГДЕ
	|	УслугиБанков.Банк = &Банк
	|	И УслугиБанков.Сервис = &Сервис
	|	И УслугиБанков.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("Сервис", Сервис);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса[0].Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПеречислениеХарактеристикСервиса(Сервис)
	
	Перечисление = Неопределено;
	УниверсальныйОбменСБанкамиПереопределяемый.ПеречислениеХарактеристикСервиса(Сервис, Перечисление);
	Возврат Перечисление;
	
КонецФункции

#Область СлужебныеПроцедурыИФункцииРаботаССервером

Функция ИдентификаторСервисаНаСервере(Сервис)
	
	Возврат ОпределитьСервисПоСсылке(Сервис);
	
КонецФункции

// Возвращает структуру данных части контейнера.
Функция ПараметрыЧастиКонтейнера()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("АдресЗагружаемойЧасти", Неопределено);
	Результат.Вставить("НомерЗагружаемойЧасти", Неопределено);
	Результат.Вставить("ВремяОкончанияДействияАдреса", Неопределено);
	Результат.Вставить("РазмерЧасти", 0);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатЗагрузитьИнформациюОбУслугеБанкаИзСтруктуры()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Предупреждения", Новый Массив);
	Результат.Вставить("УслугаБанка", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатЗагрузитьИнформациюОБанкеИзСтруктуры()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Банк", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатЗагрузитьИнформациюОСервисеИзСтруктуры()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ДанныеСервиса", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьОтсутствующиеЭлементы(Объект, ИмяТаблицы, ИмяКлюча, МассивКлючей)
	
	// Удаляем отсутствующие элементы.
	Индекс = Объект[ИмяТаблицы].Количество() - 1;
	Пока Индекс >= 0 Цикл
		Если МассивКлючей.Найти(Объект[ИмяТаблицы].Получить(Индекс)[ИмяКлюча]) = Неопределено Тогда
			Объект[ИмяТаблицы].Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗагрузитьИнформациюОБанкеИзСтруктуры(Данные)
	
	Результат = РезультатЗагрузитьИнформациюОБанкеИзСтруктуры();
	
	ИдентификаторБанка = Данные.id;
	СсылкаНаБанк = Справочники.БанкиУниверсальногоОбмена.НайтиПоРеквизиту("Идентификатор", ИдентификаторБанка);
	
	Если СсылкаНаБанк.Пустая() Тогда
		// Создаем новый банк.
		БанкОбъект = Справочники.БанкиУниверсальногоОбмена.СоздатьЭлемент();
		БанкОбъект.Идентификатор = ИдентификаторБанка;
		СсылкаНаБанк = Справочники.БанкиУниверсальногоОбмена.ПолучитьСсылку(Новый УникальныйИдентификатор);
		БанкОбъект.УстановитьСсылкуНового(СсылкаНаБанк);
	Иначе
		Если СсылкаНаБанк.Версия >= Данные.version Тогда
			// В базе данных актуальная версия банка.
			Результат.Банк = СсылкаНаБанк;
			Результат.Выполнено = Истина;
			Возврат Результат;
		КонецЕсли;
		БанкОбъект = СсылкаНаБанк.ПолучитьОбъект();
	КонецЕсли;
	
	НаименованиеБанка = Данные.shortName;
	
	БанкОбъект.Версия = Данные.version;
	БанкОбъект.Наименование = Данные.shortName;
	БанкОбъект.Активен = Данные.isActive;
	БанкОбъект.Адрес = Данные.legalAddress;
	БанкОбъект.ИНН = Данные.inn;
	БанкОбъект.КПП = Данные.kpp;
	БанкОбъект.ОГРН = Данные.ogrn;
	БанкОбъект.НаименованиеПолное = Данные.fullName;
	БанкОбъект.Логотип = Новый ХранилищеЗначения(Base64Значение(Данные.logo), Новый СжатиеДанных(9));
	
	// Загружаем список БИК.
	МассивКлючей = Новый Массив;
	ИмяТаблицы = "СписокБИК";
	ИмяКлюча = "БИК";
	Для каждого БИК Из ЗначениеВКоллекцию(Данные.bic) Цикл
		Ключ = БИК;
		МассивКлючей.Добавить(Ключ);
		Строка = БанкОбъект[ИмяТаблицы].Найти(Ключ);
		Если Строка = Неопределено Тогда
			Строка = БанкОбъект[ИмяТаблицы].Добавить();
			Строка[ИмяКлюча] = Ключ;
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем отсутствующие БИК.
	УдалитьОтсутствующиеЭлементы(БанкОбъект, ИмяТаблицы, ИмяКлюча, МассивКлючей);
	
	// Загружаем сертификаты.
	ИмяТаблицы = "Сертификаты";
	ИмяКлюча = "Отпечаток";
	БанкОбъект[ИмяТаблицы].Очистить();
	Для каждого Сертификат Из ЗначениеВКоллекцию(Данные.certificates) Цикл
		Ключ = Сертификат.fingerprint;
		Строка = БанкОбъект[ИмяТаблицы].Добавить();
		Строка[ИмяКлюча] = Ключ;
		ДвоичныеДанныеСертификата = Base64Значение(Сертификат.certificate);
		Строка.Содержимое = Новый ХранилищеЗначения(ДвоичныеДанныеСертификата, Новый СжатиеДанных(9));
		Строка.Активный = Сертификат.isActive;
		Если Сертификат.isActive Тогда
			ОтпечатокДействующегоСертификата = Сертификат.fingerprint;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ОтпечатокДействующегоСертификата) Тогда
		БанкОбъект.Активен = Ложь;
	КонецЕсли;
	
	БанкОбъект.ОтпечатокДействующегоСертификата = ОтпечатокДействующегоСертификата;
	
	// Сохраняем данные банка.
	БанкОбъект.Записать();
	
	Результат.Выполнено = Истина;
	Результат.Банк = СсылкаНаБанк;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьИнформациюОбУслугеБанкаИзСтруктуры(Данные)
	
	Результат = РезультатЗагрузитьИнформациюОбУслугеБанкаИзСтруктуры();
	
	ИдентификаторУслугиБанка = Данные.id;
	УслугаБанка = Справочники.УслугиБанков.НайтиПоРеквизиту("Идентификатор", ИдентификаторУслугиБанка);
	
	Если УслугаБанка.Пустая() Тогда
		УслугаБанкаОбъект = Справочники.УслугиБанков.СоздатьЭлемент();
		Ссылка = Справочники.УслугиБанков.ПолучитьСсылку(Новый УникальныйИдентификатор);
		УслугаБанкаОбъект.УстановитьСсылкуНового(Ссылка);
		УслугаБанкаОбъект.Идентификатор = ИдентификаторУслугиБанка;
		УслугаБанка = Ссылка;
	Иначе
		Если УслугаБанка.Версия >= Данные.version Тогда
			// В базе данных актуальная версия услуги банка.
			Результат.УслугаБанка = УслугаБанка;
			Результат.Выполнено = Истина;
			Возврат Результат;
		КонецЕсли;
		УслугаБанкаОбъект = УслугаБанка.ПолучитьОбъект();
	КонецЕсли;
	
	Банк = НайтиБанкПоИдентификатору(Данные.bankId);
	Если Банк = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Банк услуги не найден по идентификатору %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Данные.bankId);
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
			НСтр("ru = 'Загрузка данных услуги банка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УслугаБанка);
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Сервис = ОпределитьСервисПоИдентификаторуНаСервере(Данные.serviceId);
	Исключение
		ОписаниеОшибки = НСтр("ru='Сервис услуги не найден по идентификатору %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Данные.serviceId);
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
			НСтр("ru = 'Загрузка данных услуги банка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УслугаБанка);
		Возврат Результат;
	КонецПопытки;
	
	УслугаБанкаОбъект.Банк = Банк;
	УслугаБанкаОбъект.Сервис = Сервис;
	УслугаБанкаОбъект.Версия = Данные.version;
	УслугаБанкаОбъект.Активна = Данные.isActive;
	УслугаБанкаОбъект.ОтпечатокСертификатаШифрования = Данные.certificateFingerprint;
	
	// Загружаем характеристики.
	ПеречислениеХарактеристик = ПеречислениеХарактеристикСервиса(Сервис);
	МетаданныеПеречисления = Метаданные.НайтиПоТипу(Тип(ПеречислениеХарактеристик));
	ИмяПеречисления = МетаданныеПеречисления.Имя;
	
	ИмяТаблицы = "Характеристики";
	ИмяКлюча = "Характеристика";
	УслугаБанкаОбъект[ИмяТаблицы].Очистить();
	Для каждого Характеристика Из ЗначениеВКоллекцию(Данные.characteristicValues) Цикл
		ИмяХарактеристики = Характеристика.characteristicKey;
		МетаданныеЗначения = МетаданныеПеречисления.ЗначенияПеречисления.Найти(ИмяХарактеристики);
		Если МетаданныеЗначения = Неопределено Тогда
			Предупреждение = СтрШаблон("Не обнаружено значение %1 в перечислении %2.",
				ИмяХарактеристики, 
				ИмяПеречисления);
			Результат.Предупреждения.Добавить(Предупреждение);
			ЗаписатьСобытиеВЖурнал(Предупреждение,
				НСтр("ru = 'Загрузка данных услуги банка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			Продолжить;
		КонецЕсли;
		ИмяЗначения = СтрШаблон("Перечисление.%1.%2", ИмяПеречисления, ИмяХарактеристики);
		Ключ = ПредопределенноеЗначение(ИмяЗначения);
		Строка = УслугаБанкаОбъект[ИмяТаблицы].Добавить();
		Строка[ИмяКлюча] = Ключ;
		Строка.Значение = Новый ХранилищеЗначения(Характеристика.value, Новый СжатиеДанных(9));
	КонецЦикла;
	
	// Сохраняем объект.
	Попытка
		УслугаБанкаОбъект.Записать();
	Исключение
		ОписаниеОшибки = НСтр("ru='Ошибка при записи данных услуги банка:
			|%1.'");
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ОписаниеОшибки());
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
			НСтр("ru = 'Загрузка данных услуги банка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецПопытки;

	Результат.УслугаБанка = УслугаБанкаОбъект.Ссылка;
	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

// Преобразовывает структуру в JSON.
Функция СтруктуруВСтрокуJSON(Структура) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();  
	ЗаписатьJSON(ЗаписьJSON, Структура);
	Результат = ЗаписьJSON.Закрыть();
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьДатуИзJSON(Знач ДатаJSON) Экспорт
	
	Дата = Неопределено;
	
	Если ДатаJSON <> Неопределено Тогда
		Попытка
			Дата = ПрочитатьДатуJSON(ДатаJSON, ФорматДатыJSON.ISO)
		Исключение
			Дата = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Дата;
	
КонецФункции

Функция ЗагрузитьСтраницыССервера(Токен, ПараметрыЗапроса, Страница = 0, Данные = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Данные", Новый Массив);
	
	ПараметрыЗапроса.Параметры.Вставить("size", РазмерСтраницыПолученияДанныхССервера());
	ПараметрыЗапроса.Параметры.Вставить("page", Страница);
	
	РезультатВыполненияЗапроса = ВыполнитьЗапросКСерверу(ПараметрыЗапроса);
	Если НЕ РезультатВыполненияЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатВыполненияЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ТелоОтвета = JSONВСтруктуру(РезультатВыполненияЗапроса.ТелоОтвета);
	ДанныеТекущийЗапрос = ЗначениеВКоллекцию(ТелоОтвета._embedded.items);
	
	Если Данные = Неопределено Тогда
		Данные = Новый Массив;
	КонецЕсли;
	
	// Обработка страниц.
	СтраницаВТелеОтвета = ТелоОтвета.page.number;
	Если СтраницаВТелеОтвета <> Страница Тогда
		ТекстСообщения = НСтр("ru='Получена страница с номером %1, ожидалась страница %2.'");
		Результат.ОписаниеОшибки = СтрШаблон(ТекстСообщения, СтраницаВТелеОтвета, Страница);
		Возврат Результат;
	КонецЕсли;
	
	Страница = СтраницаВТелеОтвета;
	ВсегоСтраниц = ТелоОтвета.page.totalPages;
	Если Страница <= ВсегоСтраниц - 1 Тогда
		Для каждого ЭлементКоллекции Из ДанныеТекущийЗапрос Цикл
			Данные.Добавить(ЭлементКоллекции);
		КонецЦикла;
		Если Страница < ВсегоСтраниц - 1 Тогда
			// Вызываем рекурсивно для получения следующей страницы.
			РезультатЗагрузкиСледующей = ЗагрузитьСтраницыССервера(Токен, ПараметрыЗапроса, Страница + 1, Данные);
			Возврат РезультатЗагрузкиСледующей;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Результат.Данные = Данные;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАдресКонтейнераССервера(Токен, ИдентификаторТранзакции, ПараметрыСервера = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Адрес", Неопределено);
	Результат.Вставить("ВремяОкончанияДействияАдреса", Неопределено);
	
	ПараметрыЗапроса = ПараметрыВыполнитьЗапросКСерверу(Токен, "transport-containers");
	ПараметрыЗапроса.СуффиксРесурса = "downloadUrl";
	ПараметрыЗапроса.ОбязательныеПараметры.Добавить(ИдентификаторТранзакции);
	
	РезультатВыполненияЗапроса = ВыполнитьЗапросКСерверу(ПараметрыЗапроса, ПараметрыСервера);
	Если НЕ РезультатВыполненияЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатВыполненияЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ДанныеАдреса = JSONВСтруктуру(РезультатВыполненияЗапроса.ТелоОтвета);
	Результат.Адрес = ДанныеАдреса.href;
	Результат.ВремяОкончанияДействияАдреса = ПрочитатьДатуИзJSON(ДанныеАдреса.hrefExpireAt);
	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция ИзвлечьИдентификаторИзСсылкиНаРесурс(Ссылка)
	
	Строки = СтрРазделить(Ссылка, "/");
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[Строки.Количество() - 1];
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

#Область ПроксиСервер

// копия функции ПолучениеФайловИзИнтернетаКлиентСервер.НастройкаПроксиСервера()
Функция НастройкаПроксиСервера()
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
#Иначе
	НастройкаПроксиСервера = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().НастройкиПроксиСервера;
#КонецЕсли
	
	Возврат НастройкаПроксиСервера;
	
КонецФункции

// Возвращает прокси по настройкам НастройкаПроксиСервера для заданного протокола Протокол.
//
// Параметры:
//   НастройкаПроксиСервера - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер.
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов.
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера.
//		Сервер       - адрес прокси-сервера.
//		Порт         - порт прокси-сервера.
//		Пользователь - имя пользователя для авторизации на прокси-сервере.
//		Пароль       - пароль пользователя.
//		ИспользоватьАутентификациюОС - Булево - признак использования аутентификации средствами операционной системы.
//   Протокол - строка - протокол для которого устанавливаются параметры прокси сервера, например "http", "https",
//                       "ftp".
// 
// Возвращаемое значение:
//   ИнтернетПрокси
// 
Функция НовыйИнтернетПрокси(НастройкаПроксиСервера, Протокол)
	
	Если НастройкаПроксиСервера = Неопределено Тогда
		// Системные установки прокси-сервера.
		Возврат Неопределено;
	КонецЕсли;
	
	ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
	Если Не ИспользоватьПрокси Тогда
		// Не использовать прокси-сервер.
		Возврат Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
	Если ИспользоватьСистемныеНастройки Тогда
		// Системные настройки прокси-сервера.
		Возврат Новый ИнтернетПрокси(Истина);
	КонецЕсли;
	
	// Настройки прокси-сервера, заданные вручную.
	Прокси = Новый ИнтернетПрокси;
	
	// Определение адреса и порта прокси-сервера.
	ДополнительныеНастройки = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
	ПроксиПоПротоколу = Неопределено;
	Если ТипЗнч(ДополнительныеНастройки) = Тип("Соответствие") Тогда
		ПроксиПоПротоколу = ДополнительныеНастройки.Получить(Протокол);
	КонецЕсли;
	
	ИспользоватьАутентификациюОС = НастройкаПроксиСервера.Получить("ИспользоватьАутентификациюОС");
	ИспользоватьАутентификациюОС = ?(ИспользоватьАутентификациюОС = Истина, Истина, Ложь);
	
	Если ТипЗнч(ПроксиПоПротоколу) = Тип("Структура") Тогда
		Прокси.Установить(Протокол, ПроксиПоПротоколу.Адрес, ПроксиПоПротоколу.Порт,
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"], ИспользоватьАутентификациюОС);
	Иначе
		Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"], 
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"], ИспользоватьАутентификациюОС);
	КонецЕсли;
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
	
	АдресаИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
	Если ТипЗнч(АдресаИсключений) = Тип("Массив") Тогда
		Для каждого АдресИсключения Из АдресаИсключений Цикл
			Прокси.НеИспользоватьПроксиДляАдресов.Добавить(АдресИсключения);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция ПроксиHTTPСоединения(Протокол)
	
	НастройкиПрокси = НастройкаПроксиСервера();
	Прокси = НовыйИнтернетПрокси(НастройкиПрокси, Протокол);
	
	Возврат Прокси;
	
КонецФункции

#КонецОбласти

Функция СкачатьДанныеИзХранилищаS3(URL, ИмяФайлаКонтейнера)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ТелоОтвета", Неопределено);
	Результат.Вставить("КодСостояния", 0);
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	Сервер        = СтруктураURI.Хост;
	АдресРесурса = СтруктураURI.ПутьНаСервере;
	Протокол      = СтруктураURI.Схема;
	
	// Принудительно устанавливаем зашищенный протокол.
	Протокол = "https";
	
	Если (Протокол = "https" Или Протокол = "ftps") Тогда
		ЗащищенноеСоединение = Истина;
	КонецЕсли;
	
	Порт = СтруктураURI.Порт;
	
	Если ЗащищенноеСоединение = Истина Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	ИначеЕсли ЗащищенноеСоединение = Ложь Тогда
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	ИмяПользователя = Неопределено;
	ПарольПользователя = Неопределено;
	Прокси = ПроксиHTTPСоединения(Протокол);
	Таймаут = ТаймаутПолученияДанныхКонтейнера();
	
	HTTPСоединение = Новый HTTPСоединение(
		Сервер, 
		Порт, 
		ИмяПользователя, 
		ПарольПользователя,
		Прокси, 
		Таймаут, 
		ЗащищенноеСоединение, 
		Ложь);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("cache-control", "no-cache");
	HTTPЗапрос.Заголовки.Вставить("Connection", "close");
	
	Попытка
		Ответ = HTTPСоединение.Получить(HTTPЗапрос, ИмяФайлаКонтейнера);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка при отправке запроса: 
			|%1
			|%2
			|Сервер: %3:%4'"),
			УниверсальныйОбменСБанкамиКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			Сервер,
			Порт);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'HTTP-запрос'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецПопытки;
	
	Результат.КодСостояния = Ответ.КодСостояния;
	
	Если Ответ.КодСостояния = 200 Тогда
		Результат.Выполнено = Истина;
	Иначе
		ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка скачивания данных транзакции. Код состояния: %1.'"), Ответ.КодСостояния);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'HTTP-запрос'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗакачатьДанныеВХранилищеS3(URL, Данные)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("КодСостояния", 0);
	Результат.Вставить("ТелоОтвета", Неопределено);
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	Сервер        = СтруктураURI.Хост;
	АдресРесурса = СтруктураURI.ПутьНаСервере;
	Протокол      = СтруктураURI.Схема;
	
	// Принудительно устанавливаем зашищенный протокол.
	Протокол = "https";
	
	Если (Протокол = "https" Или Протокол = "ftps") Тогда
		ЗащищенноеСоединение = Истина;
	КонецЕсли;
	
	Порт = СтруктураURI.Порт;
	
	Если ЗащищенноеСоединение = Истина Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	ИначеЕсли ЗащищенноеСоединение = Ложь Тогда
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	ИмяПользователя = Неопределено;
	ПарольПользователя = Неопределено;
	Прокси = ПроксиHTTPСоединения(Протокол);
	Таймаут = ТаймаутОтправкиДанныхКонтейнера(Данные.Размер());
	
	HTTPСоединение = Новый HTTPСоединение(
		Сервер, 
		Порт, 
		ИмяПользователя, 
		ПарольПользователя,
		Прокси, 
		Таймаут, 
		ЗащищенноеСоединение, 
		Ложь);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Данные);
	
	Попытка
		Ответ = HTTPСоединение.ВызватьHTTPМетод("PUT", HTTPЗапрос);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка при отправке запроса: 
			|%1
			|%2
			|Сервер: %3:%4'"),
			УниверсальныйОбменСБанкамиКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			Сервер,
			Порт);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'HTTP-запрос'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецПопытки;
	
	Результат.КодСостояния = Ответ.КодСостояния;
	Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	РезультатАнализа = АнализВыполненияHTTPЗапроса(Ответ, АдресРесурса);
	Если НЕ РезультатАнализа.Выполнено Тогда
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка при выполнении HTTP-запроса к %1.
			|%2'"), АдресРесурса, РезультатАнализа.ОписаниеОшибки);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'HTTP-запрос'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Результат.ОписаниеОшибки = РезультатАнализа.ОписаниеОшибки;
		Возврат Результат;
	Иначе
		Результат.Выполнено = Истина;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция АнализВыполненияHTTPЗапроса(Ответ, АдресРесурса)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Если Ответ.КодСостояния < 300
		ИЛИ Ответ.КодСостояния = 304 Тогда
		Результат.Выполнено = Истина;
	ИначеЕсли Ответ.КодСостояния >= 400 И Ответ.КодСостояния < 500 Тогда
		ОписаниеОшибки = НСтр("ru='Ошибка клиента. Код состояния: %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Ответ.КодСостояния);
	ИначеЕсли Ответ.КодСостояния >= 500 И Ответ.КодСостояния < 600 Тогда
		Если Ответ.КодСостояния = 501 Тогда
			Результат.ОписаниеОшибки = СтрШаблон("Операция %1 не реализована.", АдресРесурса);
		Иначе
			ОписаниеОшибки = НСтр("ru='Ошибка сервера. Код состояния: %1.'");
			Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Ответ.КодСостояния);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = НСтр("ru='Ошибка выполнения запроса. Код состояния: %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Ответ.КодСостояния);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазмерЧастиТранспортногоКонтейнера()

	РазмерЧастиКонтейнераИзПараметров = ПолучитьПараметрТестирования("РазмерЧастиКонтейнера");
	Если РазмерЧастиКонтейнераИзПараметров <> Неопределено И РазмерЧастиКонтейнераИзПараметров > 0 Тогда
		РазмерЧасти = РазмерЧастиКонтейнераИзПараметров; // в байтах
	Иначе
		РазмерЧасти = 5 * 1024 * 1024; // в байтах, для S3 размер части должен быть не менее 5 мегабайт
	КонецЕсли;
	
	Возврат РазмерЧасти;
	
КонецФункции

Функция РазмерСтраницыПолученияДанныхССервера()
	
	Возврат "1000";
	
КонецФункции

Функция ТаймаутПолученияДанныхКонтейнера()
	
	// Предполагается, что размер входящих контейнеров десятки-сотни килобайт.
	Возврат 30;
	
КонецФункции

Функция ТаймаутОтправкиДанныхКонтейнера(Размер)
	
	// Загрузка 1 мегабайта данных занимает 128 секунд, при скорости 64 кбит/с,
	// т.к. сотовые операторы в определенных случаях ограничивают скорость загрузки этой величиной.
	Возврат Размер / 8 / 1024;
	
КонецФункции

Функция ТаймаутПолученияДанныхССервера()
	
	Возврат 10;
	
КонецФункции

Функция ИмяСервисаНаПорталеИТС(Сервис)
	
	Имя = "";
	УниверсальныйОбменСБанкамиПереопределяемый.ИмяСервисаНаПорталеИТС(Сервис, Имя);
	Возврат Имя;
	
КонецФункции

Функция ПолучитьТикет(Сервис = Неопределено)
	
	Если Сервис = Неопределено Тогда
		ИмяСервиса = ПараметрыСервераОбменаСБанками().ИмяСервисаДляПолученияТикета;
	Иначе
		ИмяСервиса = ИмяСервисаНаПорталеИТС(Сервис);
		Если ПустаяСтрока(ИмяСервиса) Тогда
			ИмяСервиса = ПараметрыСервераОбменаСБанками().ИмяСервисаДляПолученияТикета;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ИмяСервиса);
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ДанныеАутентификации;
	
КонецФункции

// Расписание для регламентного задания, получающего сообщения от банков.
//
// Параметры:
//  СуществующееРасписание - РасписаниеРегламентногоЗадания - нужно взять период повторения и увеличить его.
//
Функция РасписаниеОбменаСБанками(СуществующееРасписание = Неопределено)
	
	// Например, по заявке, отправленной в 08:00, будут проверяться ответы от банков в 08:15, 08:45, 09:45, 11:15, 13:15,
	// 16:15, 20:15 и далее каждые 12 часов.
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;

	УскорениеВызоваРегламентногоЗадания = ПолучитьПараметрТестирования("УскорениеВызоваРегламентногоЗадания");
	Если Не ЗначениеЗаполнено(УскорениеВызоваРегламентногоЗадания) Тогда
		УскорениеВызоваРегламентногоЗадания = 1; // значение в продуктивной среде
	КонецЕсли;
	
	Если СуществующееРасписание = Неопределено Тогда
		Расписание.ПериодПовтораВТечениеДня = 900 / УскорениеВызоваРегламентногоЗадания;   // 15 минут
	ИначеЕсли СуществующееРасписание.ПериодПовтораВТечениеДня >= 14400 / УскорениеВызоваРегламентногоЗадания Тогда
		Расписание.ПериодПовтораВТечениеДня = 43200 / УскорениеВызоваРегламентногоЗадания; // 12 часов
	ИначеЕсли СуществующееРасписание.ПериодПовтораВТечениеДня >= 10800 / УскорениеВызоваРегламентногоЗадания Тогда
		Расписание.ПериодПовтораВТечениеДня = 14400 / УскорениеВызоваРегламентногоЗадания; // четыре часа
	ИначеЕсли СуществующееРасписание.ПериодПовтораВТечениеДня >= 7200 / УскорениеВызоваРегламентногоЗадания Тогда
		Расписание.ПериодПовтораВТечениеДня = 10800 / УскорениеВызоваРегламентногоЗадания; // три часа
	ИначеЕсли СуществующееРасписание.ПериодПовтораВТечениеДня >= 5400 / УскорениеВызоваРегламентногоЗадания Тогда
		Расписание.ПериодПовтораВТечениеДня = 7200 / УскорениеВызоваРегламентногоЗадания;  // два часа
	ИначеЕсли СуществующееРасписание.ПериодПовтораВТечениеДня >= 3600 / УскорениеВызоваРегламентногоЗадания Тогда
		Расписание.ПериодПовтораВТечениеДня = 5400 / УскорениеВызоваРегламентногоЗадания;  // полтора часа
	ИначеЕсли СуществующееРасписание.ПериодПовтораВТечениеДня >= 1800 / УскорениеВызоваРегламентногоЗадания Тогда
		Расписание.ПериодПовтораВТечениеДня = 3600 / УскорениеВызоваРегламентногоЗадания;  // час
	Иначе
		Расписание.ПериодПовтораВТечениеДня = 1800 / УскорениеВызоваРегламентногоЗадания;  // полчаса
	КонецЕсли;
	
	ШаблонДат = Новый Массив(12);
	Для инд = 0 По 11 Цикл
		ШаблонДат[инд] = инд + 1;
	КонецЦикла;
	Расписание.Месяцы = ШаблонДат;
	ШаблонДат = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ШаблонДат);
	Для инд = 7 По 11 Цикл
		ШаблонДат.Удалить(7);
	КонецЦикла;
	Расписание.ДниНедели = ШаблонДат;
	
	// Для избежания запуска рег.задания сразу после записи с новым расписанием.
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
        // Пользуемся особенностью расписания, что [ВремяНачала=14:00 + ВремяКонца=13:00] означает переход через сутки.
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы()) Тогда // файловая база
			// Если запуск не произошел сразу после записи нового расписания, то он будет уже по расписанию.
			// Поэтому достаточно отсрочить его на минуту.
			ГраницаВремени = ТекущаяДата() + 60; // граница определяется на основании времени сервера
			Расписание.ВремяНачала = ГраницаВремени - (НачалоДня(ГраницаВремени) - '00010101');
			ГраницаВремени = ГраницаВремени - 61;
			Расписание.ВремяКонца = ГраницаВремени - (НачалоДня(ГраницаВремени) - '00010101');

		Иначе // серверная база
			// Нужно предотвратить запуск до момента, определяемого периодичностью расписания.
			// Поэтому четко отсрочиваем запуск (указываем время начала) не ранее истечения очередного периода.
			ГраницаВремени = ТекущаяДата() + Расписание.ПериодПовтораВТечениеДня; // граница определяется на основании времени сервера
			Расписание.ВремяНачала = ГраницаВремени - (НачалоДня(ГраницаВремени) - '00010101');
			ГраницаВремени = ГраницаВремени - (Расписание.ПериодПовтораВТечениеДня + 1);
			Расписание.ВремяКонца = ГраницаВремени - (НачалоДня(ГраницаВремени) - '00010101');

		КонецЕсли;
		
	Иначе // в режиме сервиса действует механизм очереди заданий

		Расписание.ВремяНачала = Неопределено;
		Расписание.ВремяКонца = Неопределено;
		
	КонецЕсли;

	Возврат Расписание;
	
КонецФункции

#КонецОбласти 

#Область ЖурналОперацийСФайлами

Функция ZIPАрхивВДвоичныеДанные(ИсходныеДанные, ИсходноеИмяФайла, ОписаниеОшибки)

	Результат      = Неопределено;
	ОписаниеОшибки = "";
	ИмяСобытия = НСтр("ru = 'ZIPАрхивВДвоичныеДанные'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

	// Помещаем переданные исходные данные в zip-архив с указанным именем и возвращаем его двоичные данные.
	ИмяВременногоКаталога = СоздатьВременныйКаталог();
	Если ИмяВременногоКаталога = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка при создании каталога с временными файлами.'");
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки, ИмяСобытия);
		Возврат Результат;
	КонецЕсли;

	ПолноеИмяФайла    = ИмяВременногоКаталога
		+ УниверсальныйОбменСБанкамиКлиентСервер.ИмяФайлаВнутриАрхиваДокумента(ИсходноеИмяФайла);
	ЧастиИмениФайла   = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
	
	Попытка
		
		// Выгружаем исходные данные в файл.
		ИсходныеДанные.Записать(ПолноеИмяФайла);
		
		// Получаем ZIP-архив в памяти.
		ЗаписьZIP = Новый ЗаписьZIPФайла();
		ЗаписьZIP.Добавить(ПолноеИмяФайла);
		Результат = ЗаписьZIP.ПолучитьДвоичныеДанные();
		
	Исключение

		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка подготовки zip-архива файла %1: %2.'"),
			ИсходноеИмяФайла, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки, ИмяСобытия);

	КонецПопытки;
	
	// Удалим временные файлы и каталог.
	Попытка
		Файл = Новый Файл(ИмяВременногоКаталога);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ИмяВременногоКаталога);
		КонецЕсли;
	Исключение

		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при удалении каталога с временными файлами %1: %2.'"),
			ИмяВременногоКаталога, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьСобытиеВЖурнал(ТекстСообщения, ИмяСобытия);

	КонецПопытки;
		
	Возврат Результат;

КонецФункции

Функция ПодписатьДанныеВЖурналеОперацийСФайлами(МенеджерЗаписи, ОтпечатокСертификата)

	Результат = Новый Структура();
	Результат.Вставить("Выполнено",      Ложь);
	Результат.Вставить("ОписаниеОшибки", "");

	ИсходныеДанные = МенеджерЗаписи.ИсходныеДанные.Получить();
	
	Если ТипЗнч(ИсходныеДанные) <> Тип("ДвоичныеДанные") Тогда
		Результат.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Некорректный формат исходных данных файла %1 для подписания'"),
			МенеджерЗаписи.ИсходноеИмяФайла);
		Возврат Результат;
	КонецЕсли;

	Подписант = Новый Структура();
	Подписант.Вставить("Отпечаток", ОтпечатокСертификата);
	
	ПараметрыПодписания = Новый Структура();
	// Подпись нужна отсоединенная (исходные данные не модифицируются).
	ПараметрыПодписания.Вставить("ОтсоединеннаяПодпись",                     Истина);
	// Чтобы обеспечить возможность вызова из сеанса фонового задания, используем длительный маркер,
	// он должен быть получен перед запуском фонового задания.
	ПараметрыПодписания.Вставить("ИспользоватьДлительныйМаркерБезопасности", Истина);

	Попытка
		Подпись = СервисКриптографии.Подписать(ИсходныеДанные, Подписант, , ПараметрыПодписания);
	Исключение
		ИнформацияОбОшибке       = ИнформацияОбОшибке();
		Результат.ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Если ТипЗнч(Подпись) = Тип("ДвоичныеДанные") Тогда
		МенеджерЗаписи.Подпись = Новый ХранилищеЗначения(Подпись, Новый СжатиеДанных(9));
		МенеджерЗаписи.ПодписьВыполнена = Истина;
		Результат.Выполнено = Истина;
	Иначе
		ОписаниеОшибки = НСтр("ru='Ошибка подписывания файла, код возврата: %1.'");
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Подпись.КодВозврата);
		Результат.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ПрочитатьСертификатыБанков(Сервис, Банки, КэшСертификатов)

	// Выбираем банки, для которых еще нет в кэше сертификатов.
	БанкиДляЗапроса = Новый Массив;
	Для каждого Банк Из Банки Цикл
		Если КэшСертификатов[Банк] = Неопределено Тогда
			БанкиДляЗапроса.Добавить(Банк);
		КонецЕсли;
	КонецЦикла;
	
	Если БанкиДляЗапроса.Количество() = 0 Тогда
		// Для всех банков уже получены сертификаты.
		Возврат;
	КонецЕсли;
	
	СертификатыБанков = СертификатШифрованияБанков(Сервис, БанкиДляЗапроса);
	
	Если СертификатыБанков <> Неопределено Тогда
		Для каждого ДанныеБанка Из СертификатыБанков Цикл
			КэшСертификатов.Вставить(ДанныеБанка.Банк, ДанныеБанка.СертификатСодержимое.Получить());
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Извлекает данные из записи журнала операций с файлами, шифрует их и перезаписывает обратно зашифрованными.
//
// Параметры:
//  МенеджерЗаписи -  РегистрСведенийМенеджерЗаписи.ЖурналОперацийСФайламиОбменаСБанками - источник данных для шифрования.
//  КэшСертификатовБанков - Соответствие - ранее использовавшиеся в сеансе сертификаты для шифрования.
//  СертификатШифрования - Строка - используется для тестирования; заменяет сертификат, подобранный алгоритмом.
//
// Возвращаемое значение:
//   Структура   - результат выполения операции: Выполнено = Булево, ОписаниеОшибки = Строка.
//
Функция ЗашифроватьДанныеВЖурналеОперацийСФайлами(МенеджерЗаписи, КэшСертификатовБанков, СертификатШифрования = Неопределено)

	Результат = Новый Структура();
	Результат.Вставить("Выполнено",      Ложь);
	Результат.Вставить("ОписаниеОшибки", "");

	ТекстыОшибок = Новый Массив;

	Если МенеджерЗаписи.Сжать Тогда
		// Требуется зашифровать сжатые данные
		ДанныеДляШифрования = МенеджерЗаписи.СжатыеИсходныеДанные.Получить();
	Иначе
		ДанныеДляШифрования = МенеджерЗаписи.ИсходныеДанные.Получить();
	КонецЕсли;
	
	Если ТипЗнч(ДанныеДляШифрования) <> Тип("ДвоичныеДанные") Тогда
		Результат.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Некорректный формат данных файла %1 для шифрования'"),
			МенеджерЗаписи.ИсходноеИмяФайла);
		Возврат Результат;
	КонецЕсли;

	Банки = МенеджерЗаписи.БанкиПолучатели.Получить();
	Если ТипЗнч(Банки) <> Тип("Массив") Тогда
		Результат.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Не указан список банков-получателей файла %1'"),
			МенеджерЗаписи.ИсходноеИмяФайла);
		Возврат Результат;
	КонецЕсли;

	ПрочитатьСертификатыБанков(МенеджерЗаписи.Сервис, Банки, КэшСертификатовБанков);

	Получатели = Новый Массив;
	Для каждого Банк Из Банки Цикл
		СертификатБанка = КэшСертификатовБанков[Банк];
		Если СертификатБанка = Неопределено Тогда
			ТекстыОшибок.Добавить(СтрШаблон(НСтр("ru = 'Не найден действующий сертифика для банка %1'"), Банк));
		Иначе
			Получатели.Добавить(СертификатБанка);
		КонецЕсли;
	КонецЦикла;
	
	// Для целей тестирования подменяем сертификат.
	Если СертификатШифрования <> Неопределено Тогда
		Получатели = Новый Массив;
		Получатели.Добавить(Новый Структура("Отпечаток", СертификатШифрования));
	КонецЕсли;
	
	Попытка
		ЗашифрованныеДанные = СервисКриптографии.Зашифровать(ДанныеДляШифрования, Получатели);
	Исключение
		ИнформацияОбОшибке       = ИнформацияОбОшибке();
		ТекстыОшибок.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Если ТекстыОшибок.Количество() > 0 Тогда
		Результат.ОписаниеОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
	ИначеЕсли ТипЗнч(ЗашифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
		МенеджерЗаписи.Результат = Новый ХранилищеЗначения(ЗашифрованныеДанные);
		Результат.Выполнено = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция РасшифроватьИПроверитьПодписьЗаписиВЖурналеОперацийСФайлами(МенеджерЗаписи, СертификатыБанка)

	Результат = Новый Структура();
	Результат.Вставить("Выполнено",      Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ПодписьНеДействительна", Ложь);
	Результат.Вставить("НеизвестныйСертификатПодписи", Ложь);

	ТекстыОшибок = Новый Массив;

	ДанныеДляРасшифровки = МенеджерЗаписи.ИсходныеДанные.Получить();
	
	Если ТипЗнч(ДанныеДляРасшифровки) <> Тип("ДвоичныеДанные") Тогда
		ОписаниеОшибки = СтрШаблон(НСтр("ru='Некорректный формат данных файла %1 для расшифровки'"), МенеджерЗаписи.ИсходноеИмяФайла);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Работа с архивом'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	РасшифрованныеДанные = Неопределено;
	
	Если МенеджерЗаписи.Зашифровать Тогда
		// Расшифровка.
		Попытка
			ПараметрыШифрования = Новый Структура;
			ПараметрыШифрования.Вставить("ИспользоватьДлительныйМаркерБезопасности", Истина);
			РасшифрованныеДанные = СервисКриптографии.РасшифроватьПереборомСертификатов(ДанныеДляРасшифровки, , ПараметрыШифрования);
		Исключение
			ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка при расшифровке файла %1.
				|%2'"),
				МенеджерЗаписи.ИсходноеИмяФайла,
				УниверсальныйОбменСБанкамиКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке()).Описание);
			ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
				НСтр("ru = 'Сертификаты подписей'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

			Результат.ОписаниеОшибки = ОписаниеОшибки;
			Возврат Результат;
		КонецПопытки;
	Иначе
		РасшифрованныеДанные = ДанныеДляРасшифровки;
	КонецЕсли;
	
	Если ТипЗнч(РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
		Если МенеджерЗаписи.Сжать Тогда
			// Распаковываем сжатые данные.
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			РасшифрованныеДанные.Записать(ИмяВременногоФайла);
			
			ИмяВременногоКаталога = СоздатьВременныйКаталог();
			
			Архиватор = Новый ЧтениеZipФайла(ИмяВременногоФайла);
			Архиватор.Извлечь(Архиватор.Элементы[0], ИмяВременногоКаталога);
			ИмяФайлаВАрхиве = Архиватор.Элементы[0].Имя;
			Архиватор.Закрыть();
			
			РасшифрованныеДанные = Новый ДвоичныеДанные(ИмяВременногоКаталога + ИмяФайлаВАрхиве);
			
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = СтрШаблон(НСтр("ru='Некорректный формат файла %1'"), МенеджерЗаписи.ИсходноеИмяФайла);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Работа с архивом'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если МенеджерЗаписи.Сжать ИЛИ МенеджерЗаписи.Зашифровать Тогда
		МенеджерЗаписи.Результат = Новый ХранилищеЗначения(РасшифрованныеДанные, Новый СжатиеДанных(9));
	КонецЕсли;
	
	// Проверка подписи.
	Если МенеджерЗаписи.Подписать Тогда
		Подпись = МенеджерЗаписи.Подпись.Получить();
		Попытка
			Результат.ПодписьНеДействительна = НЕ СервисКриптографии.ПроверитьПодпись(Подпись, РасшифрованныеДанные);
		Исключение
			ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка при проверке подписи для файла %1.
				|%2'"), МенеджерЗаписи.ИсходноеИмяФайла, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
				НСтр("ru = 'Сертификаты подписей'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ,
				УровеньЖурналаРегистрации.Предупреждение);
		КонецПопытки;
		
		Если Результат.ПодписьНеДействительна Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru='Подпись для файла %1 является недействительной'"), МенеджерЗаписи.ИсходноеИмяФайла);
			ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
				НСтр("ru = 'Сертификаты подписей'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ,
				УровеньЖурналаРегистрации.Предупреждение);
		КонецЕсли;
		
		// Проверяем, что у банка есть такой сертификат.
		СертификатыПодписи = СервисКриптографии.ПолучитьСертификатыИзПодписи(Подпись);
		СертификатНайден = Ложь;
		Для каждого Сертификат Из СертификатыПодписи Цикл
			СертификатКриптографии = Новый СертификатКриптографии(Сертификат);
			Отпечаток = ДвоичныеДанныеВСтроку(СертификатКриптографии.Отпечаток);
			Если СертификатыБанка.Найти(Отпечаток, "СертификатОтпечаток") <> Неопределено Тогда
				СертификатНайден = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ СертификатНайден Тогда

			Результат.НеизвестныйСертификатПодписи = Истина;
			
			ОписаниеОшибки = СтрШаблон(НСтр("ru='Неизвестный сертификат подписи для файла %1'"), МенеджерЗаписи.ИсходноеИмяФайла);
			ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
				НСтр("ru = 'Сертификаты подписей'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ,
				УровеньЖурналаРегистрации.Предупреждение);
			Результат.ОписаниеОшибки = ОписаниеОшибки;
			
		КонецЕсли;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	
	Возврат Результат;

КонецФункции

Функция ВыбратьДанныеВЖурналеОперацийСФайламиПоИдентификатору(Идентификатор, ИсходноеИмяФайла = "", ИдентификаторАрхива = "") Экспорт
	
	// Выбираем перечень файлов в контейнере.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналОперацийСФайламиОбменаСБанками.ИсходноеИмяФайла КАК ИсходноеИмяФайла,
	|	ЖурналОперацийСФайламиОбменаСБанками.Предмет КАК Предмет,
	|	ЖурналОперацийСФайламиОбменаСБанками.Организация КАК Организация,
	|	ЖурналОперацийСФайламиОбменаСБанками.ИдентификаторАрхива КАК ИдентификаторАрхива
	|ИЗ
	|	РегистрСведений.ЖурналОперацийСФайламиОбменаСБанками КАК ЖурналОперацийСФайламиОбменаСБанками
	|ГДЕ
	|	ЖурналОперацийСФайламиОбменаСБанками.Идентификатор = &Идентификатор";
	Если ЗначениеЗаполнено(ИсходноеИмяФайла) Тогда
		Запрос.Текст = Запрос.Текст + "
	|	И ЖурналОперацийСФайламиОбменаСБанками.ИсходноеИмяФайла = &ИсходноеИмяФайла";
		Запрос.УстановитьПараметр("ИсходноеИмяФайла", ИсходноеИмяФайла);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдентификаторАрхива) Тогда
		Запрос.Текст = Запрос.Текст + "
	|	И ЖурналОперацийСФайламиОбменаСБанками.ИдентификаторАрхива = &ИдентификаторАрхива";
		Запрос.УстановитьПараметр("ИдентификаторАрхива", ИдентификаторАрхива);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;
	
КонецФункции

// Извлекает из архива единичный файл с заданным именем.
Функция РаспаковатьДвоичныеДанные(Данные, ИмяФайла, Идентификатор = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("РаспакованныеДанные", Неопределено);
	
	КаталогВременныхФайлов = СоздатьВременныйКаталог();
	
	ЧтениеАрхива = Новый ЧтениеZipФайла(Данные.ОткрытьПотокДляЧтения());
	Попытка
		// Предполагается, что архив содержит только один файл.
		ЧтениеАрхива.Извлечь(ЧтениеАрхива.Элементы[0], КаталогВременныхФайлов);
		РаспакованныеДанные = Новый ДвоичныеДанные(КаталогВременныхФайлов + ЧтениеАрхива.Элементы[0].Имя);

	Исключение
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка при распаковке файла %1 на сервере.
			|%2'"), ИмяФайла, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Работа с архивом'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), Идентификатор);
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		
		ЧтениеАрхива.Закрыть();
		УдалитьВременныйФайл(КаталогВременныхФайлов);
		
		Возврат Результат;

	КонецПопытки;
	ЧтениеАрхива.Закрыть();
	
	УдалитьВременныйФайл(КаталогВременныхФайлов);
	
	Если Идентификатор <> Неопределено Тогда
		// Закладываем распакованный файл как результат в регистр.
		
		// Выбираем перечень файлов в пакете.
		Выборка = ВыбратьДанныеВЖурналеОперацийСФайламиПоИдентификатору(Идентификатор);
		
		МенеджерЗаписи = РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками.СоздатьМенеджерЗаписи();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи.Идентификатор       = Идентификатор;
			МенеджерЗаписи.ИсходноеИмяФайла    = Выборка.ИсходноеИмяФайла;
			МенеджерЗаписи.Предмет             = Выборка.Предмет;
			МенеджерЗаписи.Организация         = Выборка.Организация;
			МенеджерЗаписи.ИдентификаторАрхива = Выборка.ИдентификаторАрхива;
			МенеджерЗаписи.Прочитать();
			
			МенеджерЗаписи.Результат = Новый ХранилищеЗначения(РаспакованныеДанные, Новый СжатиеДанных(9));
		
			// Записываем измененные данные.
			МенеджерЗаписи.ДатаПоследнегоИзменения = ТекущаяДатаСеанса();
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				ОписаниеОшибки = НСтр("ru='Ошибка при записи данных файла %1 в базу данных.'");
				ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ИмяФайла);
				Результат.ОписаниеОшибки = ОписаниеОшибки;
				Возврат Результат;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Результат.РаспакованныеДанные = РаспакованныеДанные;
	Возврат Результат;
	
КонецФункции

// Параметры, управляющие возможностями, используемыми при тестировании функциональности.
//
Функция ПолучитьПараметрыТестирования() Экспорт
	
	ПараметрыТестирования = Константы.ПараметрыТестированияУниверсальногоОбменаСБанками.Получить().Получить();
	Возврат ПараметрыТестирования;
	
КонецФункции

// Используется для получения параметров, используемых при тестировании функциональности.
//
// Параметры:
//  Параметр     - Строка - имя настройки, хранящейся в константе ПараметрыТестированияУниверсальногоОбменаСБанками.
//
// Возвращаемое значение:
//   Булево или иное - значение параметра тестирования.
//
Функция ПолучитьПараметрТестирования(Имя) Экспорт
	
	ПараметрыТестирования = ПолучитьПараметрыТестирования();
	
	Значение = Неопределено;
	Если ПараметрыТестирования <> Неопределено  Тогда
		ПараметрыТестирования.Свойство(Имя, Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#КонецОбласти
