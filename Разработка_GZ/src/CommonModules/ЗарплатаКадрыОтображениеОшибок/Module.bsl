#Область СлужебныйПрограммныйИнтерфейс

#Область БазоваяФункциональностьПроверокЗаполнения

// Сообщает об ошибке заполнения и включает флажок Отказ.
//
// Параметры:
//   Отказ - Булево - Для изменения. Флажок отказа от продолжения работы после проверки заполнения.
//   ТекстИлиОбъектМетаданных - Строка, ОбъектМетаданных - Текст ошибки,
//       либо объект метаданных, для которого будет сформирован стандартный текст ошибки (на основе представления реквизита).
//   ИмяРеквизита - Строка - Имя реквизита, в котором допущена ошибка заполнения.
//   ИмяТаблицы - Строка - Необязательный. Имя табличной части, в которой размещен реквизит.
//   НомерСтроки - Число - Необязательный. Номер строки табличной части, в которой допущена ошибка заполнения.
//   ПутьКДанным - Строка - Необязательный. В данном параметре можно указать имя объекта данных формы,
//       в котором расположен указанный реквизит или табличная часть. Пример: "Объект".
//
Процедура СообщитьОбОшибке(Отказ, ТекстИлиОбъектМетаданных, ИмяРеквизита = "", ИмяТаблицы = Неопределено, НомерСтроки = 0, ПутьКДанным = Неопределено) Экспорт
	Отказ = Истина;
	
	Если ТипЗнч(ТекстИлиОбъектМетаданных) = Тип("Строка") Тогда
		Текст = ТекстИлиОбъектМетаданных;
	ИначеЕсли ТипЗнч(ТекстИлиОбъектМетаданных) = Тип("ОбъектМетаданных") Тогда
		Текст = НСтр("ru = 'Не заполнено поле ""%1"".'");
		Если ИмяТаблицы = Неопределено Тогда
			Текст = СтрШаблон(Текст, ТекстИлиОбъектМетаданных.Реквизиты[ИмяРеквизита].Представление());
		Иначе
			Текст = СтрШаблон(Текст, ТекстИлиОбъектМетаданных.ТабличныеЧасти[ИмяТаблицы].Реквизиты[ИмяРеквизита].Представление());
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	СообщитьПользователю(Текст, ИмяРеквизита, ИмяТаблицы, НомерСтроки, ПутьКДанным);
КонецПроцедуры

// Создает сообщение пользователю.
//
// Параметры:
//   Текст - Строка, ОбъектМетаданных - Текст сообщения.
//   ИмяРеквизита - Строка - Имя реквизита, к которому необходимо привязать сообщение.
//   ИмяТаблицы - Строка - Необязательный. Имя табличной части, в которой размещен реквизит.
//   НомерСтроки - Число - Необязательный. Номер строки табличной части, к которой необходимо привязать сообщение.
//   ПутьКДанным - Строка - Необязательный. В данном параметре можно указать имя объекта данных формы,
//       в котором расположен указанный реквизит или табличная часть. Пример: "Объект".
//
Процедура СообщитьПользователю(Текст, ИмяРеквизита = "", ИмяТаблицы = Неопределено, НомерСтроки = 0, ПутьКДанным = Неопределено) Экспорт
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Если ИмяТаблицы = Неопределено Тогда
		Сообщение.Поле = ИмяРеквизита;
	Иначе
		Сообщение.Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, НомерСтроки, ИмяРеквизита);
	КонецЕсли;
	Если ПутьКДанным <> Неопределено Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	Сообщение.Сообщить();
КонецПроцедуры

#КонецОбласти

#Область МетодыОберткиДляРаботыСФормами

Процедура ПриСозданииНаСервере(Форма, ОписаниеЭлементовСИндикациейОшибок, ОписаниеПодчиненностиДанных = Неопределено) Экспорт 
	ХранениеОшибокВоВременномХранилищеДополнитьФорму(Форма);
	ХраненияОшибокВДанныхФормыДополнитьФорму(Форма);
	ИндикацияОшибокДополнитьФорму(Форма, ОписаниеЭлементовСИндикациейОшибок, ОписаниеПодчиненностиДанных);
КонецПроцедуры	

Процедура ПослеПроверкиЗаполненияВФорме(Форма, ПроверяемыеДанные, ОписаниеСвязиДанныхОбъектаСДаннымиФормы, ОписаниеПодчиненностиДанных = Неопределено, ИмяОсновногоРеквизитаФормы = "") Экспорт	
	Ошибки = ПолучитьСообщенияПользователю(Истина);
	
	УдалитьОшибкиИзДанныхФормы(Форма);
	ОчиститьФлагиНаличияОшибок(Форма);
	
	ПреобразоватьПутиКДаннымВСообщенияхПользователю(
	    ПроверяемыеДанные,
		Форма,	
		Ошибки,
		ОписаниеСвязиДанныхОбъектаСДаннымиФормы,
		ИмяОсновногоРеквизитаФормы);
		
	ПоместитьСообщенияОбОшибкахВДанныеФормы(Форма, Ошибки);	
		
	УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(Форма, Ошибки, ОписаниеПодчиненностиДанных);
	
КонецПроцедуры	

Процедура ПриЧтенииДанныхВФорме(Форма, ДанныеОбъекта, ОписаниеСвязиДанныхОбъектаСДаннымиФормы, ОписаниеПодчиненностиДанных = Неопределено) Экспорт
	УдалитьОшибкиИзДанныхФормы(Форма);
	ОчиститьФлагиНаличияОшибок(Форма);

	Ошибки = СообщенияОбОшибкахИзВременногоХранилища(Форма);
	Если Ошибки <> Неопределено Тогда
		ПоместитьСообщенияОбОшибкахВДанныеФормы(Форма, Ошибки);		
		УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(Форма, Ошибки, ОписаниеПодчиненностиДанных);	
	КонецЕсли;	
КонецПроцедуры	

Процедура ПередЗаписьюДанныхВФорме(Форма) Экспорт 
	Ошибки = ОшибкиИзДанныхФормы(Форма,,Истина);
	СохранитьСообщенияОбОшибкахВоВременномХранилище(Форма, Ошибки);
КонецПроцедуры	

Процедура ПослеЗаписиДанныхВФорме(Форма, ДанныеОбъекта, ОписаниеСвязиДанныхОбъектаСДаннымиФормы, ОписаниеПодчиненностиДанных = Неопределено) Экспорт 
	ПриЧтенииДанныхВФорме(Форма, ДанныеОбъекта, ОписаниеСвязиДанныхОбъектаСДаннымиФормы, ОписаниеПодчиненностиДанных);
КонецПроцедуры	

#КонецОбласти

#Область МеханизмПреобразованияСообщенийПользователюИзТерминов
///	Данных объектов в термины данных формы.

Функция ОписаниеСвязиДанных() Экспорт
	ОписаниеСвязиДанных = Новый ТаблицаЗначений;	
	ОписаниеСвязиДанных.Колонки.Добавить("ТипСвязиДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ПутьКРеквизитуВедущихДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ИмяРеквизитаТаблицыВедущихДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ПутьКРеквизитуСвязанныхДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ИмяРеквизитаТаблицыСвязанныхДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ПолныйПутьКОсновнымДанным");
	ОписаниеСвязиДанных.Колонки.Добавить("ПолныйПутьКПодчиненнымДанным");
	ОписаниеСвязиДанных.Колонки.Добавить("ТипСвязиДанныхОбратный");
	
	ОписаниеСвязиДанных.Колонки.Добавить("КлючСвязи");
		
	Возврат ОписаниеСвязиДанных;
КонецФункции	

#КонецОбласти

#Область МетодыДобавленияЭлементовСоответствияДанныхОбъектаДаннымФормы

Процедура ДобавитьОписаниеСвязиРеквизитов(ОписаниеСвязиДанных, ПутьКРеквизитуВедущихДанных, ПутьКРеквизитуСвязанныхДанных) Экспорт
	
	ЭлементОписанияСвязиДанных = ОписаниеСвязиДанных.Добавить();
	
	ЭлементОписанияСвязиДанных.ТипСвязиДанных = "СвязьРеквизитовОбъектов";
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуВедущихДанных = ПутьКРеквизитуВедущихДанных;
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуСвязанныхДанных = ПутьКРеквизитуСвязанныхДанных;
	ЭлементОписанияСвязиДанных.ПолныйПутьКОсновнымДанным = ПутьКРеквизитуВедущихДанных;
	ЭлементОписанияСвязиДанных.ПолныйПутьКПодчиненнымДанным = ПутьКРеквизитуСвязанныхДанных;
	ЭлементОписанияСвязиДанных.ТипСвязиДанныхОбратный  = "СвязьРеквизитовОбъектов";
	
КонецПроцедуры

Процедура ДобавитьОписаниеСвязиДанныхСтрокиТаблицыСРеквизитом(ОписаниеСвязиДанных, ПутьКТаблицеВедущихДанных, ИмяРеквизитаТаблицыВедущихДанных, ПутьКРеквизитуСвязанныхДанных, КлючСвязи) Экспорт
	
	ЭлементОписанияСвязиДанных = ОписаниеСвязиДанных.Добавить();
	
	ЭлементОписанияСвязиДанных.ТипСвязиДанных = "СвязьДанныхСтрокиТаблицыСРеквизитом";
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуВедущихДанных = ПутьКТаблицеВедущихДанных;
	ЭлементОписанияСвязиДанных.ИмяРеквизитаТаблицыВедущихДанных = ИмяРеквизитаТаблицыВедущихДанных;
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуСвязанныхДанных = ПутьКРеквизитуСвязанныхДанных;
	ЭлементОписанияСвязиДанных.ПолныйПутьКОсновнымДанным = ПутьКТаблицеВедущихДанных + ?(ИмяРеквизитаТаблицыВедущихДанных = "", "", "." + ИмяРеквизитаТаблицыВедущихДанных);
	ЭлементОписанияСвязиДанных.ПолныйПутьКПодчиненнымДанным = ПутьКРеквизитуСвязанныхДанных;
	ЭлементОписанияСвязиДанных.ТипСвязиДанныхОбратный  = "СвязьРеквизитаСДаннымиСтрокиТаблицы";
	
	ЭлементОписанияСвязиДанных.КлючСвязи = КлючСвязи;

КонецПроцедуры

Процедура ДобавитьОписаниеСвязиРеквизитаСДаннымиСтрокиТаблицы(ОписаниеСвязиДанных, ПутьКРеквизитуВедущихДанных, ПутьКТаблицеСвязанныхДанных, ИмяРеквизитаТаблицыСвязанныхДанных, КлючСвязи = Неопределено) Экспорт
	
	Если КлючСвязи = Неопределено Тогда
		КлючСвязи = КлючСвязиДанныхСтрокТаблиц();
	КонецЕсли;	
	
	ЭлементОписанияСвязиДанных = ОписаниеСвязиДанных.Добавить();
	
	ЭлементОписанияСвязиДанных.ТипСвязиДанных = "СвязьРеквизитаСДаннымиСтрокиТаблицы";
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуВедущихДанных = ПутьКРеквизитуВедущихДанных;
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуСвязанныхДанных = ПутьКТаблицеСвязанныхДанных;
	ЭлементОписанияСвязиДанных.ИмяРеквизитаТаблицыСвязанныхДанных = ИмяРеквизитаТаблицыСвязанныхДанных;
	ЭлементОписанияСвязиДанных.ПолныйПутьКОсновнымДанным = ПутьКРеквизитуВедущихДанных;
	ЭлементОписанияСвязиДанных.ПолныйПутьКПодчиненнымДанным = ПутьКТаблицеСвязанныхДанных + ?(ИмяРеквизитаТаблицыСвязанныхДанных = "", "", "." + ИмяРеквизитаТаблицыСвязанныхДанных);
	ЭлементОписанияСвязиДанных.ТипСвязиДанныхОбратный  = "СвязьДанныхСтрокиТаблицыСРеквизитом";

	ЭлементОписанияСвязиДанных.КлючСвязи = КлючСвязи;
	
КонецПроцедуры

Процедура ДобавитьОписаниеСвязиДанныхСтрокТаблиц(ОписаниеСвязиДанных, ПутьКТаблицеВедущихДанных, ИмяРеквизитаТаблицыВедущихДанных, ПутьКТаблицеСвязанныхДанных, ИмяРеквизитаТаблицыСвязанныхДанных, КлючСвязи = Неопределено) Экспорт
	
	ЭлементОписанияСвязиДанных = ОписаниеСвязиДанных.Добавить();
	
	ЭлементОписанияСвязиДанных.ТипСвязиДанных = "СвязьДанныхСтрокТаблиц";
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуВедущихДанных = ПутьКТаблицеВедущихДанных;
	ЭлементОписанияСвязиДанных.ИмяРеквизитаТаблицыВедущихДанных = ИмяРеквизитаТаблицыВедущихДанных;
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуСвязанныхДанных = ПутьКТаблицеСвязанныхДанных;
	ЭлементОписанияСвязиДанных.ИмяРеквизитаТаблицыСвязанныхДанных = ИмяРеквизитаТаблицыСвязанныхДанных;	
	ЭлементОписанияСвязиДанных.ПолныйПутьКОсновнымДанным = ПутьКТаблицеВедущихДанных + ?(ИмяРеквизитаТаблицыВедущихДанных = "", "", "." + ИмяРеквизитаТаблицыВедущихДанных);
	ЭлементОписанияСвязиДанных.ПолныйПутьКПодчиненнымДанным = ПутьКТаблицеСвязанныхДанных + ?(ИмяРеквизитаТаблицыСвязанныхДанных = "", "", "." + ИмяРеквизитаТаблицыСвязанныхДанных);	
	ЭлементОписанияСвязиДанных.ТипСвязиДанныхОбратный  = "СвязьДанныхСтрокТаблиц";

	Если КлючСвязи = Неопределено Тогда
		КлючСвязи = КлючСвязиДанныхСтрокТаблиц();
		ДобавитьЭлементКлючаСвязиПоИндексуСтрокТаблиц(КлючСвязи);
	КонецЕсли;	
	
	ЭлементОписанияСвязиДанных.КлючСвязи = КлючСвязи;
		
КонецПроцедуры

#КонецОбласти

#Область МетодыДобавленияЭлементовКлючаСвязиМеждуТаблицами

Функция КлючСвязиДанныхСтрокТаблиц() Экспорт
	Возврат Новый Массив;	
КонецФункции	

Процедура ДобавитьЭлементКлючаСвязиПоПолямСтрокТаблиц(КлючСвязи, ИмяРеквизитаЛевойТаблицы, ИмяРеквизитаПравойТаблицы) Экспорт
	ЭлементКлюча = ЭлементКлючаСвязиСтрокТаблиц();
	
	ЭлементКлюча.Тип  = "СвязьПоПоляСтрокТаблиц";
	ЭлементКлюча.ЛевоеЗначение = ИмяРеквизитаЛевойТаблицы;
	ЭлементКлюча.ПравоеЗначение = ИмяРеквизитаПравойТаблицы;;

	КлючСвязи.Добавить(ЭлементКлюча);
КонецПроцедуры	

Процедура ДобавитьЭлементКлючаСвязиПоФиксированномуЗначениюПоляВедущейТаблицы(КлючСвязи, ИмяРеквизитаТаблицы, ФиксированноеЗначение) Экспорт
	ЭлементКлюча = ЭлементКлючаСвязиСтрокТаблиц();
	
	ЭлементКлюча.Тип  = "СвязьПоФиксированномуЗначениюПоляВедущейТаблицы";
	ЭлементКлюча.ЛевоеЗначение = ИмяРеквизитаТаблицы;
	ЭлементКлюча.ПравоеЗначение = ФиксированноеЗначение;

	КлючСвязи.Добавить(ЭлементКлюча);
КонецПроцедуры	

Процедура ДобавитьЭлементКлючаСвязиПоФиксированномуЗначениюПоляПодчиненнойТаблицы(КлючСвязи, ИмяРеквизитаТаблицы, ФиксированноеЗначение) Экспорт
	ЭлементКлюча = ЭлементКлючаСвязиСтрокТаблиц();
	
	ЭлементКлюча.Тип  = "СвязьПоФиксированномуЗначениюПоляПодчиненнойТаблицы";
	ЭлементКлюча.ЛевоеЗначение = ФиксированноеЗначение;
	ЭлементКлюча.ПравоеЗначение = ИмяРеквизитаТаблицы;

	КлючСвязи.Добавить(ЭлементКлюча);	
	
КонецПроцедуры

#КонецОбласти

Процедура ПреобразоватьПутиКДаннымВСообщенияхПользователю(ДанныеОбъекта, ПодчиненныеДанные, СообщенияПользователю, ОписаниеСвязиДанных, ПутьКДаннымОбъектаВФорме = "") Экспорт
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		ПутьКДаннымОбъекта = Сообщение.Поле;		
		
		Если ТипЗнч(ДанныеОбъекта) <> Тип("ФормаКлиентскогоПриложения") Тогда
			Если ВРег(Сред(ПутьКДаннымОбъекта, 1, 7)) = "ОБЪЕКТ." Тогда
				ПутьКДаннымОбъекта = Сред(ПутьКДаннымОбъекта, 8);
			Иначе
				ПутьКДаннымОбъекта = Сообщение.Поле;
			КонецЕсли;
		КонецЕсли;	
	
		ПутьКДаннымФормы = ПутьКДаннымПодчиненногоОбъекта(ДанныеОбъекта, ПодчиненныеДанные, ПутьКДаннымОбъекта, ОписаниеСвязиДанных);
		Если ПутьКДаннымФормы <> Неопределено Тогда
			Сообщение.Поле = ПутьКДаннымФормы;
			Сообщение.ПутьКДанным = "";
		Иначе			
			Если ПустаяСтрока(ПутьКДаннымОбъектаВФорме) Тогда
				Сообщение.Поле = ПутьКДаннымОбъекта;
			ИначеЕсли Не ПустаяСтрока(Сообщение.Поле) Тогда
				Сообщение.Поле = ПутьКДаннымОбъектаВФорме + "." + ПутьКДаннымОбъекта;
			КонецЕсли;				
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры	

#Область МеханизмОписанияПодчиненностиДанныхФормы

Функция ОписаниеПодчиненностиДанныхФормы() Экспорт
	Возврат ОписаниеСвязиДанных();	
КонецФункции	

Процедура ДобавитьОписаниеПодчиненностиРеквизитов(ОписаниеПодчиненностиДанных, ПутьКДаннымВедущегоРеквизита, ПутьКДаннымПодчиненногоРеквизита) Экспорт
	ДобавитьОписаниеСвязиРеквизитов(ОписаниеПодчиненностиДанных, ПутьКДаннымВедущегоРеквизита, ПутьКДаннымПодчиненногоРеквизита);	
КонецПроцедуры

Процедура ДобавитьОписаниеПодчиненностиДанныхСтрокТаблиц(ОписаниеПодчиненностиДанных, ПутьКВедущейТаблице, ПутьКПодчиненнойТаблице, КлючСвязи) Экспорт
	ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		ОписаниеПодчиненностиДанных,
		ПутьКВедущейТаблице,
		"",
		ПутьКПодчиненнойТаблице,
		"",
		КлючСвязи);
КонецПроцедуры	

Процедура ДобавитьОписаниеПодчиненностиДанныхСтрокиРеквизиту(ОписаниеПодчиненностиДанных, ПутьКДаннымВедущегоРеквизита, ПутьКПодчиненнойТаблице, КлючСвязи = Неопределено) Экспорт
	ДобавитьОписаниеСвязиРеквизитаСДаннымиСтрокиТаблицы(
		ОписаниеПодчиненностиДанных,
		ПутьКДаннымВедущегоРеквизита,
		ПутьКПодчиненнойТаблице,
		"",
		КлючСвязи);
КонецПроцедуры

#КонецОбласти

#Область МеханизмХраненияОшибокВДанныхФормы

Процедура ХраненияОшибокВДанныхФормыДополнитьФорму(Форма) Экспорт			
	ПутиКРеквизитамФормы = ПутиКДаннымФормы(Форма, Ложь);	
	ПутиКРеквизитамФормы.Добавить("");
		
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого ПутьКРеквизиту Из ПутиКРеквизитамФормы Цикл
		РеквизитТаблицаХраненияОшибок = Новый РеквизитФормы("ТаблицаХраненияОшибок", Новый ОписаниеТипов("ТаблицаЗначений"), ПутьКРеквизиту);
		ДобавляемыеРеквизиты.Добавить(РеквизитТаблицаХраненияОшибок);
		
		ПутьКТаблице = ПутьКРеквизиту + ?(ПутьКРеквизиту = "", "ТаблицаХраненияОшибок", "." + "ТаблицаХраненияОшибок");
		
		РеквизитТекстОшибки = Новый РеквизитФормы("Текст", Новый ОписаниеТипов("Строка"), ПутьКТаблице);
		ДобавляемыеРеквизиты.Добавить(РеквизитТекстОшибки);
		
		РеквизитПолеОшибки = Новый РеквизитФормы("Поле", Новый ОписаниеТипов("Строка"), ПутьКТаблице);
		ДобавляемыеРеквизиты.Добавить(РеквизитПолеОшибки);	
		
		РеквизитКлючДанныхОшибки = Новый РеквизитФормы("КлючДанных", Новый ОписаниеТипов("Неопределено"), ПутьКТаблице);
		ДобавляемыеРеквизиты.Добавить(РеквизитКлючДанныхОшибки);
		
		РеквизитКлючДанныхОшибки = Новый РеквизитФормы("НеПривязана", Новый ОписаниеТипов("Булево"), ПутьКТаблице);
		ДобавляемыеРеквизиты.Добавить(РеквизитКлючДанныхОшибки);
	КонецЦикла;	
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
КонецПроцедуры	

Процедура ПоместитьСообщенияОбОшибкахВДанныеФормы(Форма, СообщенияПользователю, КлючДанных = Неопределено) Экспорт
	ПутиКДаннымФормы = ПутиКДаннымФормы(Форма);
	
	Для Каждого Ошибка Из СообщенияПользователю Цикл
		ОписаниеПутиКДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(Ошибка.Поле);
		
		Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
			ПутьКДанным = ОписаниеПутиКДанным.ПутьКДаннымТаблицы;
		Иначе
			ПутьКДанным = ОписаниеПутиКДанным.ПутьКДанным;
		КонецЕсли;	
		
		Если ПутиКДаннымФормы.Найти(ПутьКДанным) = Неопределено Тогда
			ХранилищеОшибок = Форма.ТаблицаХраненияОшибок;
			СтрокаХранилищаОшибок = ХранилищеОшибок.Добавить();
			СтрокаХранилищаОшибок.Текст = Ошибка.Текст;
			СтрокаХранилищаОшибок.КлючДанных = КлючДанных;
			СтрокаХранилищаОшибок.НеПривязана = Истина;
		Иначе	
			ОписаниеПутиКДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(Ошибка.Поле);
			
			Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымРеквизита" Тогда
				ХранилищеОшибок = Форма.ТаблицаХраненияОшибок;
				СтрокаХранилищаОшибок = ХранилищеОшибок.Добавить();
				СтрокаХранилищаОшибок.Текст = Ошибка.Текст;
				СтрокаХранилищаОшибок.Поле = Ошибка.Поле;
				СтрокаХранилищаОшибок.КлючДанных = КлючДанных;
			Иначе	
				Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеПутиКДанным.ПутьКДаннымТаблицы);
				ХранилищеОшибок = Таблица[ОписаниеПутиКДанным.ИндексСтроки].ТаблицаХраненияОшибок;
				СтрокаХранилищаОшибок = ХранилищеОшибок.Добавить();
				СтрокаХранилищаОшибок.Текст = Ошибка.Текст;
				СтрокаХранилищаОшибок.Поле = ОписаниеПутиКДанным.ИмяРеквизитаСтроки;
				СтрокаХранилищаОшибок.КлючДанных = КлючДанных;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Функция СообщенияОбОшибкахИзДанныхФормы(Форма, КлючДанных = Неопределено) Экспорт
	Возврат ОшибкиИзДанныхФормы(Форма, КлючДанных, Истина);		
КонецФункции

Функция СообщениеОбОшибкахДляПередачиВФормуРедактированияСтрокиТаблицыФормы(Форма, ПутьКДаннымСтрокиТаблицы, ОписаниеПодчиненностиДанных = Неопределено) Экспорт
	СообщенияОбОшибках = Новый Массив;
	
	ОписаниеОшибокСтроки = ОписаниеОшибокИзДанныхФормыПоПутиКДанным(Форма, ПутьКДаннымСтрокиТаблицы + ".*");
	
	Для Каждого ОписаниеОшибки Из ОписаниеОшибокСтроки Цикл
		СообщениеОбОшибке = Новый СообщениеПользователю;
		СообщениеОбОшибке.Поле = ОписаниеОшибки.ПутьКДанным.ИмяРеквизитаСтроки;
		СообщениеОбОшибке.Текст = ОписаниеОшибки.Текст;
		
		СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
	КонецЦикла;	
	
	Если ОписаниеПодчиненностиДанных = Неопределено Тогда
		Возврат СообщенияОбОшибках;
	КонецЕсли;	
	
	ПутиКДаннымПодчиненнымСтрокеТаблицы = ПутиКПодчиненнымДанным(Форма, ПутьКДаннымСтрокиТаблицы, ОписаниеПодчиненностиДанных);
		
	ОшибкиПодчиненныхТаблиц = Новый Соответствие;
	
	Для Каждого ПутьКПодчиненнымДанным Из ПутиКДаннымПодчиненнымСтрокеТаблицы Цикл
		ОписаниеПутиКПодчиненнымДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКПодчиненнымДанным);
		
		Если ОписаниеПутиКПодчиненнымДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда			
			ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеПутиКПодчиненнымДанным.ПутьКДаннымТаблицы, ".");
			ИмяТаблицы = ЭлементыПути[ЭлементыПути.Количество() - 1];
			
			ОшибкиДанныхСтрокПодчиненнойТаблицы = ОшибкиПодчиненныхТаблиц.Получить(ИмяТаблицы);
			Если ОшибкиДанныхСтрокПодчиненнойТаблицы = Неопределено Тогда
				ОшибкиДанныхСтрокПодчиненнойТаблицы = Новый ТаблицаЗначений;
				ОшибкиДанныхСтрокПодчиненнойТаблицы.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
				ОшибкиДанныхСтрокПодчиненнойТаблицы.Колонки.Добавить("ОписаниеОшибок");
				
				ОшибкиПодчиненныхТаблиц.Вставить(ИмяТаблицы, ОшибкиДанныхСтрокПодчиненнойТаблицы);
			КонецЕсли;	
			
			ОшибкиСтрокиПодчиненнойТаблицы = ОшибкиДанныхСтрокПодчиненнойТаблицы.Добавить();
			
			ОшибкиСтрокиПодчиненнойТаблицы.ИндексСтроки = ОписаниеПутиКПодчиненнымДанным.ИндексСтроки;
			ОшибкиСтрокиПодчиненнойТаблицы.ОписаниеОшибок = ОписаниеОшибокИзДанныхФормыПоПутиКДанным(Форма, ПутьКПодчиненнымДанным + ".*"); 
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ОшибкиПодчиненнойТаблицы Из ОшибкиПодчиненныхТаблиц Цикл
		ОшибкиПодчиненнойТаблицы.Значение.Сортировать("ИндексСтроки");
		
		ИндексТекущейСтроки = 0;
		
		Для Каждого ОшибкиСтрокиПодчиненнойТаблицы Из ОшибкиПодчиненнойТаблицы.Значение Цикл
			Для Каждого ОписаниеОшибки Из ОшибкиСтрокиПодчиненнойТаблицы.ОписаниеОшибок Цикл
				ОписаниеОшибки.ПутьКДанным.ПутьКДаннымТаблицы = ОшибкиПодчиненнойТаблицы.Ключ;
				ОписаниеОшибки.ПутьКДанным.ИндексСтроки = ИндексТекущейСтроки;
				
				СообщениеОбОшибке = СообщениеПользователюИзОписанияОшибкиВДанных(ОписаниеОшибки);
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);			
			КонецЦикла;
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		КонецЦикла;		
	КонецЦикла;	
	
	Возврат СообщенияОбОшибках;
КонецФункции	

Функция ПоместитьСообщенияОбОшибкахИзФормыРедактированияСтрокиТаблицыФормыВОсновнуюФорму(Форма, ПутьКДаннымСтрокиТаблицы, Ошибки, ПутиКДаннымПодчиненныхТаблицФормы, ОписаниеПодчиненностиДанных = Неопределено, КлючДанных = Неопределено) Экспорт 
	ПутиКДаннымПодчиненнымСтрокеТаблицы = ПутиКПодчиненнымДанным(Форма, ПутьКДаннымСтрокиТаблицы, ОписаниеПодчиненностиДанных);
	
	ПорядокСтрокПодчиненныхТаблиц = Новый Соответствие;
	
	Для Каждого ПутьКПодчиненнымДанным Из ПутиКДаннымПодчиненнымСтрокеТаблицы Цикл
		ОписаниеПутиКПодчиненнымДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКПодчиненнымДанным);
		
		Если ОписаниеПутиКПодчиненнымДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда			
					
			ПорядокСтрокТаблицы = ПорядокСтрокПодчиненныхТаблиц.Получить(ОписаниеПутиКПодчиненнымДанным.ПутьКДаннымТаблицы);
			Если ПорядокСтрокТаблицы = Неопределено Тогда
				ПорядокСтрокТаблицы = Новый ТаблицаЗначений;
				ПорядокСтрокТаблицы.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
				
				ПорядокСтрокПодчиненныхТаблиц.Вставить(ОписаниеПутиКПодчиненнымДанным.ПутьКДаннымТаблицы, ПорядокСтрокТаблицы);
			КонецЕсли;	
			
			ЭлементПорядкаСтрок = ПорядокСтрокТаблицы.Добавить();
			
			ЭлементПорядкаСтрок.ИндексСтроки = ОписаниеПутиКПодчиненнымДанным.ИндексСтроки;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого КлючЗначение Из ПорядокСтрокПодчиненныхТаблиц Цикл
		КлючЗначение.Значение.Сортировать("ИндексСтроки");	
	КонецЦикла;	
	
	ОписаниеПутиКДаннымСтроки = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДаннымСтрокиТаблицы);
	
	ОписанияОшибок = Новый Массив;
	СообщенияОбОшибках = Новый Массив;
	
	Для Каждого Ошибка Из Ошибки Цикл
		ОписаниеОшибкиДанных = ОписаниеОшибкиИзСообщенияПользователю(Ошибка);
		
		Если ОписаниеОшибкиДанных.ПутьКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
			ОписаниеОшибкиДанных.ПутьКДанным.ПутьКДаннымТаблицы = ПутиКДаннымПодчиненныхТаблицФормы[ОписаниеОшибкиДанных.ПутьКДанным.ПутьКДаннымТаблицы];
			
			ПорядокСтрокТаблицы = ПорядокСтрокПодчиненныхТаблиц[ОписаниеОшибкиДанных.ПутьКДанным.ПутьКДаннымТаблицы];
			
			ИндексСтрокиТаблицыДанныхФормы = ПорядокСтрокТаблицы[ОписаниеОшибкиДанных.ПутьКДанным.ИндексСтроки].ИндексСтроки;
			
			ОписаниеОшибкиДанных.ПутьКДанным.ИндексСтроки = ИндексСтрокиТаблицыДанныхФормы;
		Иначе	
			ОписаниеПутиКДаннымОшибки = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымСтрокиТаблицы();
			ОписаниеПутиКДаннымОшибки.ПутьКДаннымТаблицы = ОписаниеПутиКДаннымСтроки.ПутьКДаннымТаблицы;
			ОписаниеПутиКДаннымОшибки.ИндексСтроки = ОписаниеПутиКДаннымСтроки.ИндексСтроки;
			ОписаниеПутиКДаннымОшибки.ИмяРеквизитаСтроки = ОписаниеОшибкиДанных.ПутьКДанным.ПутьКДанным;
			
			ОписаниеОшибкиДанных.ПутьКДанным = ОписаниеПутиКДаннымОшибки;
		КонецЕсли;		
		
		СообщенияОбОшибках.Добавить(СообщениеПользователюИзОписанияОшибкиВДанных(ОписаниеОшибкиДанных));
	КонецЦикла;	
	
	ПоместитьСообщенияОбОшибкахВДанныеФормы(Форма, СообщенияОбОшибках, КлючДанных);
	
	Возврат СообщенияОбОшибках;
КонецФункции	

Процедура УдалитьОшибкиИзДанныхФормы(Форма, КлючДанных = Неопределено) Экспорт
	Если КлючДанных = Неопределено Тогда
		Форма.ТаблицаХраненияОшибок.Очистить();
	Иначе
		УдаляемыеСтроки = Форма.ТаблицаХраненияОшибок.НайтиСтроки(Новый Структура("КлючДанных", КлючДанных));
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Форма.ТаблицаХраненияОшибок.Удалить(УдаляемаяСтрока);			
		КонецЦикла;	
	КонецЕсли;		
	
	ПутиКТаблицамФормы = ПутиКДаннымФормы(Форма, Ложь);
	
	Для Каждого ПутьКДанным Из ПутиКТаблицамФормы Цикл
		Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			Если КлючДанных  = Неопределено Тогда	
				СтрокаТаблицы.ТаблицаХраненияОшибок.Очистить();
			Иначе
				УдаляемыеСтроки = ЗарплатаКадрыОтображениеОшибокКлиентСервер.СтрокиТаблицыОшибокСтрокиТаблицыДанныхФормы(СтрокаТаблицы, , КлючДанных);
				
				Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					СтрокаТаблицы.ТаблицаХраненияОшибок.Удалить(УдаляемаяСтрока);		
				КонецЦикла;
			КонецЕсли;					
		КонецЦикла;	
		
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

#Область МеханизмИндикацииЭлементовСодержащихОшибки

Функция ОписаниеЭлементовСИндикациейОшибок() Экспорт
	ОписаниеЭлементов = Новый Массив;
	
	Возврат ОписаниеЭлементов;
КонецФункции	

Функция ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки() Экспорт 
	ОписаниеЭлемента = ОписаниеЭлементаСИндикациейОшибок();	
	
	ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки";
	
	Возврат ОписаниеЭлемента;		
КонецФункции	

Функция ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента) Экспорт 	
	КоллекцияОписанийЭлементов.Добавить(ОписаниеЭлемента);
КонецФункции	

Функция ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы() Экспорт
	ОписаниеЭлемента = ОписаниеЭлементаСИндикациейОшибок();	
	
	ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы";
	
	Возврат ОписаниеЭлемента;		
КонецФункции	

Функция ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента) Экспорт 		
	КоллекцияОписанийЭлементов.Добавить(ОписаниеЭлемента);
КонецФункции

Процедура ИндикацияОшибокДополнитьФорму(Форма, ОписаниеЭлементовСИндикациейОшибок, ОписаниеПодчиненностиДанных = Неопределено) Экспорт 
	ДобавляемыеРеквизиты = Новый Массив;
	ОписаниеСозданныхРеквизитов = Новый Соответствие;
	ОписаниеСвязиЭлементовИндикацииСРеквизитами = Новый Соответствие;
		
	Для Каждого ОписаниеЭлемента Из ОписаниеЭлементовСИндикациейОшибок Цикл
		ОписаниеРеквизитаИндикации = ОписаниеРеквизитаИндикацииОшибкиИзОписанияЭлементаИндикации(ОписаниеЭлемента);
		
		ОписаниеСозданногоРеквизита = СоздатьРеквизитПризнакНаличияОшибки(ДобавляемыеРеквизиты, ОписаниеРеквизитаИндикации, ОписаниеСозданныхРеквизитов);
		
		Если ОписаниеЭлемента.ОтображатьНепривязанныеОшибки Тогда
			ОписаниеФлагаСИндикациейНепривязанныхОшибок = ОписаниеСозданногоРеквизита;
		КонецЕсли;	
		
		Если Не ПустаяСтрока(ОписаниеЭлемента.ИмяЭлемента) Тогда
			ОписаниеСозданногоРеквизита.Вставить("ОтображатьНепривязанныеОшибки", ОписаниеЭлемента.ОтображатьНепривязанныеОшибки);
			ОписаниеСвязиЭлементовИндикацииСРеквизитами.Вставить(ОписаниеЭлемента.ИмяЭлемента, ОписаниеСозданногоРеквизита);	
		КонецЕсли;	
	КонецЦикла;		
	
	Если ОписаниеПодчиненностиДанных <> Неопределено Тогда
		ОписаниеДобавляемыхРеквизитовИндикации = ОписаниеДобавляемыхРеквизитовИндикацииОшибокИзОписанияПодчиненности(ОписаниеПодчиненностиДанных);
		
		Для Каждого ОписаниеРеквизитаИндикации Из ОписаниеДобавляемыхРеквизитовИндикации Цикл
			СоздатьРеквизитПризнакНаличияОшибки(ДобавляемыеРеквизиты, ОписаниеРеквизитаИндикации, ОписаниеСозданныхРеквизитов);	
		КонецЦикла;	
		
		ОписаниеДобавляемыхРеквизитовСчетчиков = ОписаниеДобавляемыхРеквизитовСчетчиковОшибокИзОписанияПодчиненности(ОписаниеПодчиненностиДанных);
		
		Для Каждого ОписаниеРеквизитаСчетчика Из ОписаниеДобавляемыхРеквизитовСчетчиков Цикл
			СоздатьРеквизитСчетчикНаличияОшибкиВПодчиненныхДанных(ДобавляемыеРеквизиты, ОписаниеРеквизитаСчетчика, ОписаниеСозданныхРеквизитов);	
		КонецЦикла;	
	КонецЕсли;	
	
	РеквизитОписаниеФлагов = Новый РеквизитФормы("ОписаниеРеквизитовПризнаковНаличияОшибок", Новый ОписаниеТипов("Неопределено"));
	РеквизитОписаниеЭлементовСИндикацией = Новый РеквизитФормы("ОписаниеЭлементовСИндикациейОшибок", Новый ОписаниеТипов("Неопределено"));
	РеквизитОписаниеИндикатораНепривязанныхОшибок = Новый РеквизитФормы("ОписаниеФлагаСИндикациейНепривязанныхОшибок", Новый ОписаниеТипов("Неопределено"));
	РеквизитСчетчикФлаговНаСтраницах = Новый РеквизитФормы("СчетчикФлаговНаСтраницах", Новый ОписаниеТипов("Неопределено"));
	РеквизитЦветаЗаголовковСворачиваемыхГрупп = Новый РеквизитФормы("ЦветаЗаголовковСворачиваемыхГрупп", Новый ОписаниеТипов("Неопределено"));
	
	ДобавляемыеРеквизиты.Добавить(РеквизитОписаниеФлагов);
	ДобавляемыеРеквизиты.Добавить(РеквизитОписаниеЭлементовСИндикацией);
	ДобавляемыеРеквизиты.Добавить(РеквизитОписаниеИндикатораНепривязанныхОшибок);
	ДобавляемыеРеквизиты.Добавить(РеквизитСчетчикФлаговНаСтраницах);
	ДобавляемыеРеквизиты.Добавить(РеквизитЦветаЗаголовковСворачиваемыхГрупп);
		
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Форма.ОписаниеРеквизитовПризнаковНаличияОшибок = Новый ФиксированноеСоответствие(ОписаниеСозданныхРеквизитов);
		
	ОписаниеСозданныхЭлементов = Новый Соответствие;
	
	ЦветаЗаголовковСворачиваемыхГрупп = Новый Структура;
	
	СчетчикФлаговНаСтраницах = Новый Структура;
	
	Для Каждого ОписаниеЭлемента Из ОписаниеЭлементовСИндикациейОшибок Цикл
		Если ЗначениеЗаполнено(ОписаниеЭлемента.ИмяЭлемента) Тогда
			ЭлементИндикации = СоздатьЭлементИндикацииОшибки(Форма, ОписаниеЭлемента, ОписаниеСвязиЭлементовИндикацииСРеквизитами);		
			
			Если ЭлементИндикации <> Неопределено Тогда
				СтраницыВладельцы = СтраницыЭлементаИндикации(ЭлементИндикации);
				ОписаниеЭлемента.Вставить("СтраницыВладельцы", СтраницыВладельцы);
				
				ОписаниеСозданныхЭлементов.Вставить(ЭлементИндикации.Имя, ОписаниеЭлемента);
				
				ОписаниеРеквизитовИндикации = ОписаниеСвязиЭлементовИндикацииСРеквизитами.Получить(ОписаниеЭлемента.ИмяЭлемента);
				
				Если ОписаниеРеквизитовИндикации <> Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеРеквизитовИндикации.СтраницыВладельцы, СтраницыВладельцы);
				КонецЕсли;	
				
				Для Каждого ИмяСтраницы Из СтраницыВладельцы Цикл
					СчетчикФлаговНаСтраницах.Вставить(ИмяСтраницы, 0);		
					Элемент = Форма.Элементы[ИмяСтраницы];
					
					Если Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
						ЦветаЗаголовковСворачиваемыхГрупп.Вставить(Элемент.Имя, Элемент.ЦветТекстаЗаголовка);
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ОписаниеФлагаСИндикациейНепривязанныхОшибок <> Неопределено Тогда
		Форма.ОписаниеФлагаСИндикациейНепривязанныхОшибок = Новый ФиксированнаяСтруктура(ОписаниеФлагаСИндикациейНепривязанныхОшибок);
	КонецЕсли;
	
	Форма.ОписаниеЭлементовСИндикациейОшибок = Новый ФиксированноеСоответствие(ОписаниеСозданныхЭлементов);
	Форма.СчетчикФлаговНаСтраницах = Новый ФиксированнаяСтруктура(СчетчикФлаговНаСтраницах);	
	Форма.ЦветаЗаголовковСворачиваемыхГрупп = Новый ФиксированнаяСтруктура(ЦветаЗаголовковСворачиваемыхГрупп);	
КонецПроцедуры

Процедура УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(Форма, Ошибки, ОписаниеПодчиненностиДанных = Неопределено, УстанавливатьФлагНаличияНепривязанныхОшибок = Истина) Экспорт
	СчетчикиОшибокВПодчиненныхЭлементах = Новый Соответствие;
	
	ПутиКДанным = Новый Массив;
	
	Для Каждого Ошибка Из Ошибки Цикл
		ОписаниеПутиКДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(Ошибка.Поле);
		ПутиКДанным.Добавить(Ошибка.Поле);					
	КонецЦикла;	
		
	УстановитьФлагиНаличияДляПутиКДанным(Форма, ПутиКДанным, Истина, ОписаниеПодчиненностиДанных, Ложь);
	
КонецПроцедуры	

Процедура УстановитьФлагНаличияОшибокПоПутиКДанным(Форма, ПутьКДанным, ОписаниеПодчиненностиДанных = Неопределено) Экспорт
	ПутиКДанным = Новый Массив;
	
	ПутиКДанным.Добавить(ПутьКДанным);
	
	УстановитьФлагиНаличияДляПутиКДанным(Форма, ПутиКДанным, Истина, ОписаниеПодчиненностиДанных) 	
КонецПроцедуры	

Процедура ОчиститьФлагНаличияОшибокПоПутиКДанным(Форма, ПутьКДанным, ОписаниеПодчиненностиДанных = Неопределено, СбрасыватьИндикаторНаличияОшибокВПодчиненныхДанных = Ложь) Экспорт
	ПутиКДанным = Новый Массив;
	
	ПутиКДанным.Добавить(ПутьКДанным);
	
	УстановитьФлагиНаличияДляПутиКДанным(Форма, ПутиКДанным, Ложь, ОписаниеПодчиненностиДанных, СбрасыватьИндикаторНаличияОшибокВПодчиненныхДанных);
	
КонецПроцедуры	

Процедура ОчиститьФлагиНаличияОшибок(Форма) Экспорт
	Для Каждого ОписаниеРеквизитаИндикацииОшибки Из Форма.ОписаниеРеквизитовПризнаковНаличияОшибок Цикл
		Если ПустаяСтрока(ОписаниеРеквизитаИндикацииОшибки.Значение.ПутьКДанным) Тогда 
			Если ЗначениеЗаполнено(ОписаниеРеквизитаИндикацииОшибки.Значение.ИмяРеквизитаФлаг) Тогда
				Форма[ОписаниеРеквизитаИндикацииОшибки.Значение.ИмяРеквизитаФлаг] = Ложь;
			КонецЕсли;	
			Если ЗначениеЗаполнено(ОписаниеРеквизитаИндикацииОшибки.Значение.ИмяРеквизитаСчетчик) Тогда
				Форма[ОписаниеРеквизитаИндикацииОшибки.Значение.ИмяРеквизитаСчетчик] = 0;
			КонецЕсли;	
		Иначе
			Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеРеквизитаИндикацииОшибки.Значение.ПутьКДанным);
			
			Для Каждого СтрокаТаблицы Из Таблица Цикл
				Если ЗначениеЗаполнено(ОписаниеРеквизитаИндикацииОшибки.Значение.ИмяРеквизитаФлаг) Тогда
					СтрокаТаблицы[ОписаниеРеквизитаИндикацииОшибки.Значение.ИмяРеквизитаФлаг] = Ложь;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеРеквизитаИндикацииОшибки.Значение.ИмяРеквизитаСчетчик) Тогда
					СтрокаТаблицы[ОписаниеРеквизитаИндикацииОшибки.Значение.ИмяРеквизитаСчетчик] = 0;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	
	СчетчикФлаговНаСтраницах = Новый Структура(Форма.СчетчикФлаговНаСтраницах);
	
	Для Каждого ЭлементСчетчика Из СчетчикФлаговНаСтраницах Цикл
		СчетчикФлаговНаСтраницах[ЭлементСчетчика.Ключ] = 0;	
	КонецЦикла;	
	
	Форма.СчетчикФлаговНаСтраницах = Новый ФиксированнаяСтруктура(СчетчикФлаговНаСтраницах);

	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УстановитьКартинкиДляЗаголовковСтраницФормы(Форма);
КонецПроцедуры	

Функция УстановленоОтображениеОшибокВДанных(Форма, ПутьКДанным) Экспорт
	
	ОписаниеРеквизитаФлага = Форма.ОписаниеРеквизитовПризнаковНаличияОшибок[ПутьКДанным];
	
	Если ОписаниеРеквизитаФлага = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеПутиКДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДанным);
		
	Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеПутиКДанным.ПутьКДаннымТаблицы);
		ДанныеРеквизитовИндикации = Таблица[ОписаниеПутиКДанным.ИндексСтроки];
	Иначе
		ДанныеРеквизитовИндикации = Форма;	
	КонецЕсли;	
	
	УстановленыДанныеФлага = Ложь;
	КоличествоОшибокВПодчиненныхДанных = 0;
	
	Если ЗначениеЗаполнено(ОписаниеРеквизитаФлага.ИмяРеквизитаФлаг) Тогда
		УстановленыДанныеФлага = ДанныеРеквизитовИндикации[ОписаниеРеквизитаФлага.ИмяРеквизитаФлаг];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеРеквизитаФлага.ИмяРеквизитаСчетчик) Тогда
		КоличествоОшибокВПодчиненныхДанных = ДанныеРеквизитовИндикации[ОписаниеРеквизитаФлага.ИмяРеквизитаСчетчик];
	КонецЕсли;
		
	Возврат УстановленыДанныеФлага Или КоличествоОшибокВПодчиненныхДанных > 0;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетодыДобавленияЭлементовКлючаСвязиМеждуТаблицами

Процедура ДобавитьЭлементКлючаСвязиПоИндексуСтрокТаблиц(КлючСвязи) Экспорт
	ЭлементКлюча = ЭлементКлючаСвязиСтрокТаблиц();
	ЭлементКлюча.Тип = "СвязьПоИндексуСтрокТаблиц";
	
	КлючСвязи.Добавить(ЭлементКлюча);
КонецПроцедуры	

#КонецОбласти

#Область МетодыПреобразованияДанных

Функция ПутьКДаннымПодчиненногоОбъекта(ДанныеВедущегоОбъекта, ДанныеПодчиненногоОбъекта, ПутьКДаннымВедущегоОбъекта, ОписаниеСвязиДанных) Экспорт 
	ПутьКДаннымПодчиненногоОбъекта = Неопределено;
	
	Если ТипЗнч(ПутьКДаннымВедущегоОбъекта) = Тип("Структура") Тогда
		ОписаниеПутиКДаннымВедущегоОбъекта = ПутьКДаннымВедущегоОбъекта;
	Иначе
		ОписаниеПутиКДаннымВедущегоОбъекта = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДаннымВедущегоОбъекта);
	КонецЕсли;
	
	ПравилаСвязиСДаннымиОбъекта = ПравилаСвязиПоПутиКДаннымВедущегоОбъекта(ОписаниеПутиКДаннымВедущегоОбъекта, ОписаниеСвязиДанных, Ложь);
	
	ОписаниеПутиКСвязаннымДанным = ОписаниеПутейКСвязаннымДаннымПоПравиламСвязиДанных(
										ДанныеВедущегоОбъекта, 
										ДанныеПодчиненногоОбъекта,
										ОписаниеПутиКДаннымВедущегоОбъекта,
										ПравилаСвязиСДаннымиОбъекта);
										
	Если ОписаниеПутиКСвязаннымДанным.Количество() > 0 Тогда									
		ПутьКДаннымПодчиненногоОбъекта = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеПутиКСвязаннымДанным[0]);
	КонецЕсли;
	
	Возврат ПутьКДаннымПодчиненногоОбъекта;
КонецФункции

Функция ПутьКДаннымВедущегоОбъекта(ДанныеВедущегоОбъекта, ДанныеПодчиненногоОбъекта, ПутьКДаннымПодчиненногоОбъекта, ОписаниеСвязиДанных) Экспорт 
	ПутьКДаннымВедущегоОбъекта = Неопределено;
	
	Если ТипЗнч(ПутьКДаннымПодчиненногоОбъекта) = Тип("Структура") Тогда
		ОписаниеПутиКДаннымПодчиненногоОбъекта = ПутьКДаннымПодчиненногоОбъекта;
	Иначе
		ОписаниеПутиКДаннымПодчиненногоОбъекта = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДаннымПодчиненногоОбъекта);
	КонецЕсли;
	
	ПравилаСвязиСДаннымиОбъекта = ПравилаСвязиПоПутиКДаннымВедущегоОбъекта(ПутьКДаннымПодчиненногоОбъекта, ОписаниеСвязиДанных, Истина);
	
	ОписаниеПутиКСвязаннымДанным = ОписаниеПутейКСвязаннымДаннымПоПравиламСвязиДанных(
										ДанныеПодчиненногоОбъекта,
										ДанныеВедущегоОбъекта, 
										ОписаниеПутиКДаннымПодчиненногоОбъекта,
										ПравилаСвязиСДаннымиОбъекта);
										
	Если ОписаниеПутиКСвязаннымДанным.Количество() > 0 Тогда									
		ПутьКДаннымВедущегоОбъекта = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеПутиКСвязаннымДанным[0]);
	КонецЕсли;

	Возврат ПутьКДаннымВедущегоОбъекта;
КонецФункции

#КонецОбласти

#Область МеханизмОписанияПодчиненностиДанныхФормы

Функция ПутиКВедущимДанным(Данные, ПутьКПодчиненнымДанным, ОписаниеПодчиненностиДанных, РекурсивныйПоиск = Истина) Экспорт
	ПутиКВедущимДанным = Новый Массив;
	
	ЗаполнитьПутиКВедущимДанным(ПутиКВедущимДанным, Данные, ПутьКПодчиненнымДанным, ОписаниеПодчиненностиДанных, РекурсивныйПоиск);

	Возврат ПутиКВедущимДанным;
		
КонецФункции

Функция ПутиКПодчиненнымДанным(Данные, ПутьКВедущимДанным, ОписаниеПодчиненностиДанных) Экспорт
	ПутиКПодчиненнымДанным = Новый Массив;
	
	ЗаполнитьПутиКПодчиненнымДанным(ПутиКПодчиненнымДанным, Данные, ПутьКВедущимДанным, ОписаниеПодчиненностиДанных);

	Возврат ПутиКПодчиненнымДанным;
		
КонецФункции

#КонецОбласти

#Область МеханизмСохраненияОшибокВоВременномХранилище

Процедура ХранениеОшибокВоВременномХранилищеДополнитьФорму(Форма) Экспорт
	ДобавляемыеРеквизиты = Новый Массив;
	
	РеквизитФормыТаблица = Новый РеквизитФормы("АдресаОшибокВоВременномХранилище", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(РеквизитФормыТаблица);
	
	РеквизитТаблицыКлючДанных = Новый РеквизитФормы("КлючДанных", Новый ОписаниеТипов("Неопределено"), "АдресаОшибокВоВременномХранилище");
	ДобавляемыеРеквизиты.Добавить(РеквизитТаблицыКлючДанных);
	
	РеквизитТаблицыАдрес = Новый РеквизитФормы("Адрес", Новый ОписаниеТипов("Строка"), "АдресаОшибокВоВременномХранилище");
	ДобавляемыеРеквизиты.Добавить(РеквизитТаблицыАдрес);

	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
КонецПроцедуры	

Процедура СохранитьСообщенияОбОшибкахВоВременномХранилище(Форма, СообщенияОбОшибках, КлючДанных = Неопределено) Экспорт
	Если КлючДанных = Неопределено Тогда
		СтрокиТаблицыАдресов = Форма.АдресаОшибокВоВременномХранилище;
	Иначе	
		СтрокиТаблицыАдресов = Форма.АдресаОшибокВоВременномХранилище.НайтиСтроки(Новый Структура("КлючДанных", КлючДанных));
	КонецЕсли;	
	
	Если СтрокиТаблицыАдресов.Количество() > 0 Тогда
		СтрокаТаблицыАдресов = СтрокиТаблицыАдресов[0];
		СтрокаТаблицыАдресов.Адрес = ПоместитьВоВременноеХранилище(СообщенияОбОшибках, СтрокаТаблицыАдресов.Адрес);
	Иначе
		СтрокаТаблицыАдресов = Форма.АдресаОшибокВоВременномХранилище.Добавить();
		СтрокаТаблицыАдресов.КлючДанных = КлючДанных;
		СтрокаТаблицыАдресов.Адрес = ПоместитьВоВременноеХранилище(СообщенияОбОшибках, Форма.УникальныйИдентификатор);
	КонецЕсли;	
КонецПроцедуры	

Функция СообщенияОбОшибкахИзВременногоХранилища(Форма, КлючДанных = Неопределено) Экспорт 
	СообщенияОбОшибках = Неопределено;
	
	Если КлючДанных = Неопределено Тогда
		СтрокиТаблицыАдресов = Форма.АдресаОшибокВоВременномХранилище;	
	Иначе	
		СтрокиТаблицыАдресов = Форма.АдресаОшибокВоВременномХранилище.НайтиСтроки(Новый Структура("КлючДанных", КлючДанных));
	КонецЕсли;	
	
	Если СтрокиТаблицыАдресов.Количество() > 0 Тогда
		СтрокаТаблицыАдресов = СтрокиТаблицыАдресов[0];
		СообщенияОбОшибках = ПолучитьИзВременногоХранилища(СтрокаТаблицыАдресов.Адрес);
	КонецЕсли;
	
	Возврат СообщенияОбОшибках;
КонецФункции	

Процедура УдалитьСообщенияОбОшибкахИзВременногоХранилища(Форма) Экспорт
	Для Каждого СтрокаТаблицыАдресов Из Форма.АдресаОшибокВоВременномХранилище Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыАдресов.Адрес) Тогда
			ПоместитьВоВременноеХранилище(Неопределено, СтрокаТаблицыАдресов.Адрес);
		КонецЕсли;	
	КонецЦикла;	
	
	Форма.АдресаОшибокВоВременномХранилище.Очистить();	
КонецПроцедуры

#КонецОбласти

#Область МеханизмХраненияОшибокВДанныхФормы

Функция СообщенияОбОшибкахИзДанныхФормыПоПутиКДанным(Форма, ПутьКДанным, КлючДанных = Неопределено) Экспорт
	Возврат ОшибкиИзДанныхФормыПоПутиКДанным(Форма, ПутьКДанным, КлючДанных, Истина);	
КонецФункции

Функция СообщенияОбОшибкахИзДанныхФормыСУчетомПодчиненности(Форма, ПутьКДанным, ОписаниеПодчиненностиДанных, КлючДанных = Неопределено) Экспорт
	Возврат ОшибкиИзДанныхФормыСУчетомПодчиненности(Форма, ПутьКДанным, ОписаниеПодчиненностиДанных, КлючДанных, Истина);	
КонецФункции

Функция НепривязанныеСообщенияОбОшибкахИзДанныхФормы(Форма, КлючДанных = Неопределено) Экспорт
	Ошибки = Новый Массив;
	
	НепривязанныеОшибкиИзДанныхФормы(Ошибки, КлючДанных, Истина);
	
	Возврат Ошибки;	
КонецФункции

Функция ОписаниеОшибокИзДанныхФормы(Форма, КлючДанных = Неопределено) Экспорт 
	Возврат ОшибкиИзДанныхФормы(Форма, КлючДанных, Ложь);		
КонецФункции

Функция ОписаниеОшибокИзДанныхФормыПоПутиКДанным(Форма, ПутьКДанным, КлючДанных = Неопределено)
	Возврат ОшибкиИзДанныхФормыПоПутиКДанным(Форма, ПутьКДанным, КлючДанных, Ложь);	
КонецФункции

Функция ОписаниеОшибокИзДанныхФормыСУчетомПодчиненности(Форма, ПутьКДанным, ОписаниеПодчиненностиДанных, КлючДанных = Неопределено) Экспорт 
	Возврат ОшибкиИзДанныхФормыСУчетомПодчиненности(Форма, ПутьКДанным, ОписаниеПодчиненностиДанных, КлючДанных, Ложь);	
КонецФункции

Функция ОписаниеНепривязанныхОшибокИзДанныхФормы(Форма, КлючДанных = Неопределено) Экспорт
	Ошибки = Новый Массив;
	
	НепривязанныеОшибкиИзДанныхФормы(Ошибки, КлючДанных, Ложь);
	
	Возврат Ошибки;	
КонецФункции

Процедура УдалитьОшибкиИзДанныхФормыСУчетомПодчиненности(Форма, ПутьКДанным, ОписаниеПодчиненностиДанных, КлючДанных = Неопределено, ФормироватьСообщенияПользователю = Ложь) Экспорт 

	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(Форма, ПутьКДанным, КлючДанных);	
		
	ПутиКПодчиненнымДанным = ПутиКПодчиненнымДанным(Форма, ПутьКДанным, ОписаниеПодчиненностиДанных);	
	
	ОтработанныеПутиКДанным = Новый Соответствие;
	
	Для Каждого ПутьКПодчиненнымДанным Из ПутиКПодчиненнымДанным Цикл 
		
		Если ОтработанныеПутиКДанным.Получить(ПутьКПодчиненнымДанным) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(Форма, ПутьКПодчиненнымДанным, КлючДанных);
		
		ОтработанныеПутиКДанным.Вставить(ПутьКПодчиненнымДанным, Истина);
		Если СтрНайти(ПутьКПодчиненнымДанным, ".*") <> 0 Тогда
			ОтработанныеПутиКДанным.Вставить(СтрЗаменить(ПутьКПодчиненнымДанным, ".*", ""), Истина)
		Иначе	
			ОтработанныеПутиКДанным.Вставить(СтрЗаменить(ПутьКПодчиненнымДанным, "*", ""), Истина);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

#Область МеханизмИндикацииЭлементовСодержащихОшибки

Функция ОписаниеЭлементаЭлементаШапкиСИндикациейОшибокВСтрокеТаблицы() Экспорт
	ОписаниеЭлемента = ОписаниеЭлементаСИндикациейОшибок();	
	
	ОписаниеЭлемента.Тип = "ОписаниеЭлементаШапкиСИндикациейОшибокВСтрокеТаблицы";
	
	Возврат ОписаниеЭлемента;		
КонецФункции

Функция ДобавитьОписаниеЭлементаШапкиСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента) Экспорт 
	КоллекцияОписанийЭлементов.Добавить(ОписаниеЭлемента);
КонецФункции

#КонецОбласти

#Область МеханизмПреобразованияСообщенийПользователюИзТерминов
///	Данных объектов в термины данных формы (служебные процедуры).

Функция ЭлементКлючаСвязиСтрокТаблиц()
	ЭлементКлюча = Новый Структура;
	ЭлементКлюча.Вставить("ЛевоеЗначение");
	ЭлементКлюча.Вставить("ПравоеЗначение");
	ЭлементКлюча.Вставить("Тип");
	
	Возврат ЭлементКлюча;
КонецФункции	

Функция ОписаниеОшибкиДанных()
	ОписаниеОшибкиВДанных = Новый Структура;
	
	ОписаниеОшибкиВДанных.Вставить("Текст", "");
	ОписаниеОшибкиВДанных.Вставить("КлючДанных", "");
	ОписаниеОшибкиВДанных.Вставить("ПутьКДанным");
	
	Возврат ОписаниеОшибкиВДанных;
КонецФункции	

Функция ОписаниеОшибкиИзСообщенияПользователю(СообщениеОбОшибке) 
	ОписаниеОшибки = ОписаниеОшибкиДанных();
	ОписаниеОшибки.Текст = СообщениеОбОшибке.Текст;
	ОписаниеОшибки.КлючДанных = СообщениеОбОшибке.КлючДанных;
	ОписаниеОшибки.ПутьКДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(СообщениеОбОшибке.Поле);
	
	Возврат ОписаниеОшибки;
КонецФункции	

Функция СообщениеПользователюИзОписанияОшибкиВДанных(ОписаниеОшибкиДанных)
	СообщениеОбОшибке = Новый СообщениеПользователю;
	
	Если ЗначениеЗаполнено(ОписаниеОшибкиДанных.КлючДанных) Тогда 
		СообщениеОбОшибке.УстановитьДанные(ОписаниеОшибкиДанных.КлючДанных);
	КонецЕсли;
	
	СообщениеОбОшибке.Текст = ОписаниеОшибкиДанных.Текст;
	СообщениеОбОшибке.Поле = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеОшибкиДанных.ПутьКДанным);
	
	Возврат СообщениеОбОшибке;
	
КонецФункции	

#КонецОбласти

#Область ОписаниеСвязанныхДанных
	
Функция ПравилаСвязиПоПутиКДаннымВедущегоОбъекта(ПутьКВедущимДанным, ОписаниеСвязиДанных, ОбратныйПоиск = Ложь)
	ПравилаСвязи = Новый Массив;
	
	Если ТипЗнч(ПутьКВедущимДанным) = Тип("Строка") Тогда
		ОписаниеПутиКВедущимДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКВедущимДанным);
	Иначе
		ОписаниеПутиКВедущимДанным = ПутьКВедущимДанным;
	КонецЕсли;	
	
	ДопустимыеТипыСвязиДанных = ДопустимыеТипыСвязиДанныхПоОписаниюПутиКВедущимДанным(ОписаниеПутиКВедущимДанным);
		
	КлючиПоискаПравилСвязи = КлючиПоискаПравилСвязиПоОписаниюПутиКДанным(ОписаниеПутиКВедущимДанным, Ложь);
	
	Возврат ПравилаСвязиДанныхПоКлючамПоиска(ОписаниеСвязиДанных, КлючиПоискаПравилСвязи, ДопустимыеТипыСвязиДанных, ОбратныйПоиск);
	
КонецФункции

Функция ПравилаСвязиДанныхПоКлючамПоиска(ОписаниеСвязиДанных, КлючиПоискаПравилСвязи, ДопустимыеТипыСвязиДанных, ОбратныйПоиск = Ложь)
	ПравилаСвязи = Новый Массив;
	
	Для Каждого КлючПоиска Из КлючиПоискаПравилСвязи Цикл
		
		Если ОбратныйПоиск Тогда
			СтруктураПоиска = Новый Структура("ПолныйПутьКПодчиненнымДанным", КлючПоиска);
		Иначе
			СтруктураПоиска = Новый Структура("ПолныйПутьКОсновнымДанным", КлючПоиска);
		КонецЕсли;	

		СтрокиСоответствияПутей = ОписаниеСвязиДанных.НайтиСтроки(СтруктураПоиска); 
		
		Если ОбратныйПоиск Тогда 
			ИмяПоляТипСвязиДанных = "ТипСвязиДанныхОбратный";
		Иначе
			ИмяПоляТипСвязиДанных = "ТипСвязиДанных";	
		КонецЕсли;	
		
		Для Каждого ПравилоСвязиДанных Из СтрокиСоответствияПутей Цикл
			Если ОбратныйПоиск Тогда
				ПравилоСвязиДанных = ПравилоОбратнойСвязиДанных(ПравилоСвязиДанных);
			КонецЕсли;	
			
			Если ДопустимыеТипыСвязиДанных.Найти(ПравилоСвязиДанных.ТипСвязиДанных) <> Неопределено Тогда			
				ПравилаСвязи.Добавить(ПравилоСвязиДанных);	
			КонецЕсли;
		КонецЦикла;	
		
		Если ПравилаСвязи.Количество() > 0 Тогда 
			Прервать;
		КонецЕсли;		
	КонецЦикла;	

	Возврат ПравилаСвязи;	
КонецФункции	

Функция ДопустимыеТипыСвязиДанныхПоОписаниюПутиКВедущимДанным(ОписаниеПутиКВедущимДанным)
	ДопустимыеТипыСвязиДанных = Новый Массив;
	
	Если ОписаниеПутиКВедущимДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		ДопустимыеТипыСвязиДанных.Добавить("СвязьДанныхСтрокиТаблицыСРеквизитом");
		ДопустимыеТипыСвязиДанных.Добавить("СвязьДанныхСтрокТаблиц");	
	Иначе
		ДопустимыеТипыСвязиДанных.Добавить("СвязьРеквизитовОбъектов");
		ДопустимыеТипыСвязиДанных.Добавить("СвязьРеквизитаСДаннымиСтрокиТаблицы");
	КонецЕсли;
	
	Возврат ДопустимыеТипыСвязиДанных;
КонецФункции	

Функция КлючиПоискаПравилСвязиПоОписаниюПутиКДанным(ОписаниеПутиКДанным, СтрогоеСоответствие = Ложь)
	КлючиПоискаПравилСвязи = Новый Массив;
	
	Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		ПутьКВедущимДаннымБезИндекса = ОписаниеПутиКДанным.ПутьКДаннымТаблицы + ?(ОписаниеПутиКДанным.ИмяРеквизитаСтроки = "", "", ".") + ОписаниеПутиКДанным.ИмяРеквизитаСтроки;
				
		КлючиПоискаПравилСвязи.Добавить(ПутьКВедущимДаннымБезИндекса);
		Если Не СтрогоеСоответствие Тогда
			КлючиПоискаПравилСвязи.Добавить(ОписаниеПутиКДанным.ПутьКДаннымТаблицы + ".*");
		КонецЕсли;	
	Иначе
		КлючиПоискаПравилСвязи.Добавить(ОписаниеПутиКДанным.ПутьКДанным);
		
		Если Не СтрогоеСоответствие Тогда
			ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеПутиКДанным.ПутьКДанным, ".");

			Если ЭлементыПути.Количество() <= 1 Тогда
				КлючиПоискаПравилСвязи.Добавить("*");
			Иначе
				Путь = "";
				Для Сч = 0 По ЭлементыПути.Количество() - 2 Цикл
					Путь = Путь + "." + ЭлементыПути[Сч];
				КонецЦикла;
				КлючиПоискаПравилСвязи.Добавить(Сред(Путь, 2) + ".*");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
		
	Возврат КлючиПоискаПравилСвязи;
КонецФункции

Функция ОписаниеПутейКСвязаннымДаннымПоПравиламСвязиДанных(ВедущиеДанные, СвязанныеДанные, ОписаниеПутиКВедущимДанным, ПравилаСвязиСДаннымиОбъекта)	
	Если ОписаниеПутиКВедущимДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		ОписаниеПутейКСвязаннымДанным = ОписаниеПутейКДаннымСвязаннымСДаннымиСтрокиТаблицы(
											ВедущиеДанные, 
											СвязанныеДанные, 
											ОписаниеПутиКВедущимДанным, 
											ПравилаСвязиСДаннымиОбъекта);
	Иначе
		ОписаниеПутейКСвязаннымДанным = ОписаниеПутейКДаннымСвязаннымСДаннымиРеквизита(
											ВедущиеДанные, 
											СвязанныеДанные, 
											ОписаниеПутиКВедущимДанным, 
											ПравилаСвязиСДаннымиОбъекта);
	КонецЕсли;	
	
	Возврат ОписаниеПутейКСвязаннымДанным;
КонецФункции	

Функция ОписаниеПутейКДаннымСвязаннымСДаннымиСтрокиТаблицы(ВедущиеДанные, СвязанныеДанные, ОписаниеПутиКВедущимДанным, ПравилаСвязиСДаннымиСтрокиТаблицы)		
	ОписаниеПутейКСвязаннымДанным = Новый Массив;
		
	ТаблицаВедущихДанных = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ВедущиеДанные, ОписаниеПутиКВедущимДанным.ПутьКДаннымТаблицы);
			
	Для Каждого ПравилоСвязи Из ПравилаСвязиСДаннымиСтрокиТаблицы Цикл
		ОписаниеПутейКСвязаннымДаннымПоПравилуСвязи = ОписаниеПутейКДаннымСвязаннымСДаннымиСтрокиТаблицыПоПравилуСвязи(ТаблицаВедущихДанных, ОписаниеПутиКВедущимДанным.ИндексСтроки, СвязанныеДанные, ПравилоСвязи);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеПутейКСвязаннымДанным, ОписаниеПутейКСвязаннымДаннымПоПравилуСвязи);
	КонецЦикла;	
		
	Возврат ОписаниеПутейКСвязаннымДанным;	
КонецФункции	

Функция ОписаниеПутейКДаннымСвязаннымСДаннымиРеквизита(ВедущиеДанные, СвязанныеДанные, ОписаниеПутиКВедущимДанным, ПравилаСвязиСДаннымиРеквизитаОбъекта)
	ОписаниеПутейКСвязаннымДанным = Новый Массив;
		
	Для Каждого ПравилоСвязи Из ПравилаСвязиСДаннымиРеквизитаОбъекта Цикл
		ОписаниеПутейКСвязаннымДаннымПоПравилуСвязи = ОписаниеПутейКДаннымСвязаннымСРеквизитомПоПравилуСвязи(СвязанныеДанные, ПравилоСвязи);	
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеПутейКСвязаннымДанным, ОписаниеПутейКСвязаннымДаннымПоПравилуСвязи);	
	КонецЦикла;	
			
	Возврат ОписаниеПутейКСвязаннымДанным;	
КонецФункции

Функция ОписаниеПутейКДаннымСвязаннымСДаннымиСтрокиТаблицыПоПравилуСвязи(ТаблицаВедущихДанных, ИндексСтроки, СвязанныеДанные, ПравилоСвязи)
	ОписаниеПутейКСвязаннымДанным = Новый Массив;
	
	СтрокаТаблицыВедущихДанных = ТаблицаВедущихДанных[ИндексСтроки];
		
	Если Не СтрокаТаблицыСоответствуетФиксированнымЗначениямКлючаСвязи(СтрокаТаблицыВедущихДанных, ПравилоСвязи.КлючСвязи) Тогда
		Возврат ОписаниеПутейКСвязаннымДанным;
	КонецЕсли;	
	
	Если ПравилоСвязи.ТипСвязиДанных = "СвязьДанныхСтрокТаблиц" Тогда
		СвязываемаяТаблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(СвязанныеДанные, ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных);
		ИндексыСвязываемыхСтрок = ИндексыСтрокСвязываемыхСоСтрокойВедущихДанных(СтрокаТаблицыВедущихДанных, ИндексСтроки, СвязываемаяТаблица, ПравилоСвязи.КлючСвязи);		
		
		Для Каждого ИндексСвязываемойСтроки Из ИндексыСвязываемыхСтрок Цикл 
			ОписаниеПутиКСвязываемымДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымСтрокиТаблицы();
			
			ОписаниеПутиКСвязываемымДанным.ПутьКДаннымТаблицы = ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных;
			ОписаниеПутиКСвязываемымДанным.ИндексСтроки = ИндексСвязываемойСтроки;
			ОписаниеПутиКСвязываемымДанным.ИмяРеквизитаСтроки = ПравилоСвязи.ИмяРеквизитаТаблицыСвязанныхДанных;
			
			ОписаниеПутейКСвязаннымДанным.Добавить(ОписаниеПутиКСвязываемымДанным);	
		КонецЦикла;		
		
	ИначеЕсли ПравилоСвязи.ТипСвязиДанных = "СвязьДанныхСтрокиТаблицыСРеквизитом" Тогда	
		ОписаниеПутиКСвязываемымДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымРеквизитаОбъекта();

		ОписаниеПутиКСвязываемымДанным.ПутьКДанным = ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных; 	
		
		ОписаниеПутейКСвязаннымДанным.Добавить(ОписаниеПутиКСвязываемымДанным);	
	КонецЕсли;	
	
	Возврат ОписаниеПутейКСвязаннымДанным;	
КонецФункции	

Функция ОписаниеПутейКДаннымСвязаннымСРеквизитомПоПравилуСвязи(СвязанныеДанные, ПравилоСвязи)
	ОписаниеПутей = Новый Массив;
	
	Если ПравилоСвязи.ТипСвязиДанных = "СвязьРеквизитовОбъектов" Тогда
		ОписаниеПути = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымРеквизитаОбъекта();
		
		ОписаниеПути.ПутьКДанным = ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных;
		
		ОписаниеПутей.Добавить(ОписаниеПути);
	ИначеЕсли ПравилоСвязи.ТипСвязиДанных = "СвязьРеквизитаСДаннымиСтрокиТаблицы" Тогда
		СвязываемаяТаблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(СвязанныеДанные, ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных);
		ИндексыСвязываемыхСтрок = ИндексыСтрокСвязываемыхСРеквизитомВедущихДанных(СвязываемаяТаблица, ПравилоСвязи.КлючСвязи);	
		
		Для Каждого ИндексСвязываемойСтроки Из ИндексыСвязываемыхСтрок Цикл 
			ОписаниеПути = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымСтрокиТаблицы();	
			
			ОписаниеПути.ПутьКДаннымТаблицы = ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных;
			ОписаниеПути.ИндексСтроки = ИндексСвязываемойСтроки;
			ОписаниеПути.ИмяРеквизитаСтроки = ПравилоСвязи.ИмяРеквизитаТаблицыСвязанныхДанных;	
			
			ОписаниеПутей.Добавить(ОписаниеПути);
		КонецЦикла;	
	КонецЕсли;		
	
	Возврат ОписаниеПутей;
КонецФункции	

Функция ИндексыСтрокСвязываемыхСоСтрокойВедущихДанных(СтрокаТаблицыВедущихДанных, ИндексСтрокиТаблицыВедущихДанных, СвязываемаяТаблица, КлючСвязи)
	ИндексыСвязанныхСтрок = Новый Массив;
	
	СтруктураПоиска = Новый Структура;
	
	ИндексСтрокиТаблицыСвязываемыхДанных = Неопределено;
	
	Для Каждого ЭлементКлючаСвязи Из КлючСвязи Цикл
		Если ЭлементКлючаСвязи.Тип = "СвязьПоИндексуСтрокТаблиц" Тогда
			ИндексСтрокиТаблицыСвязываемыхДанных = ИндексСтрокиТаблицыВедущихДанных;	
		ИначеЕсли ЭлементКлючаСвязи.Тип = "СвязьПоПоляСтрокТаблиц" Тогда
			
			ЗначениеПоиска = СтрокаТаблицыВедущихДанных[ЭлементКлючаСвязи.ЛевоеЗначение];
			
			СтруктураПоиска.Вставить(ЭлементКлючаСвязи.ПравоеЗначение, ЗначениеПоиска);
			
		ИначеЕсли ЭлементКлючаСвязи.Тип = "СвязьПоФиксированномуЗначениюПоляПодчиненнойТаблицы" Тогда	
			 
			 СтруктураПоиска.Вставить(ЭлементКлючаСвязи.ПравоеЗначение, ЭлементКлючаСвязи.ЛевоеЗначение);
		КонецЕсли;		
	КонецЦикла;	
	
	Если ИндексСтрокиТаблицыСвязываемыхДанных <> Неопределено Тогда
		Если СтруктураПоиска.Количество() > 0 Тогда
			СтрокаТаблицыСвязываемыхДанных = СвязываемаяТаблица[ИндексСтрокиТаблицыСвязываемыхДанных];
			
			Для Каждого КлючПоискаДанныхВСтроке Из СтруктураПоиска Цикл
				Если СтрокаТаблицыСвязываемыхДанных[КлючПоискаДанныхВСтроке.Ключ] <> КлючПоискаДанныхВСтроке.Значение Тогда
					Возврат ИндексыСвязанныхСтрок;				
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		
		ИндексыСвязанныхСтрок.Добавить(ИндексСтрокиТаблицыСвязываемыхДанных);	
	Иначе
		Если СтруктураПоиска.Количество() = 0 Тогда
			Для Каждого СтрокаТаблицыСвязываемыхДанных Из СвязываемаяТаблица Цикл
				ИндексыСвязанныхСтрок.Добавить(СвязываемаяТаблица.Индекс(СтрокаТаблицыСвязываемыхДанных));		
			КонецЦикла;				
		Иначе	
			НайденныеСтроки = СвязываемаяТаблица.НайтиСтроки(СтруктураПоиска);
		
			Для Каждого СвязаннаяСтрока Из НайденныеСтроки Цикл		
				ИндексыСвязанныхСтрок.Добавить(СвязываемаяТаблица.Индекс(СвязаннаяСтрока));
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ИндексыСвязанныхСтрок;
КонецФункции	

Функция ИндексыСтрокСвязываемыхСРеквизитомВедущихДанных(СвязываемаяТаблица, КлючСвязи)
	ИндексыСвязываемыхСтрок = Новый Массив;
	
	СтруктураПоиска = Новый Структура;
	
	Для Каждого ЭлементКлючаСвязи Из КлючСвязи Цикл
		Если ЭлементКлючаСвязи.Тип = "СвязьПоФиксированномуЗначениюПоляПодчиненнойТаблицы" Тогда	
			 
			 СтруктураПоиска.Вставить(ЭлементКлючаСвязи.ПравоеЗначение, ЭлементКлючаСвязи.ЛевоеЗначение);
		КонецЕсли;		
	КонецЦикла;	
	
	Если СтруктураПоиска.Количество() = 0 Тогда
		СтрокиТаблицы = СвязываемаяТаблица;	
	Иначе	
		СтрокиТаблицы = СвязываемаяТаблица.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл	
		ИндексыСвязываемыхСтрок.Добавить(СвязываемаяТаблица.Индекс(СтрокаТаблицы));		
	КонецЦикла;	

	Возврат ИндексыСвязываемыхСтрок;
	
КонецФункции

Функция СтрокаТаблицыСоответствуетФиксированнымЗначениямКлючаСвязи(СтрокаТаблицы, КлючСвязи)
	Если КлючСвязи = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ЭлементКлючаСвязи Из КлючСвязи Цикл
		Если ЭлементКлючаСвязи.Тип = "СвязьПоФиксированномуЗначениюПоляВедущейТаблицы"
			И СтрокаТаблицы[ЭлементКлючаСвязи.ЛевоеЗначение] <> ЭлементКлючаСвязи.ПравоеЗначение Тогда
			
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

Функция ПравилоОбратнойСвязиДанных(ПравилоПрямойСвязи)
	ПравилоОбратнойСвязиДанных = Новый Структура;
	
	ПравилоОбратнойСвязиДанных.Вставить("ТипСвязиДанных", ПравилоПрямойСвязи.ТипСвязиДанныхОбратный);
	ПравилоОбратнойСвязиДанных.Вставить("ПутьКРеквизитуВедущихДанных", ПравилоПрямойСвязи.ПутьКРеквизитуСвязанныхДанных);
	ПравилоОбратнойСвязиДанных.Вставить("ИмяРеквизитаТаблицыВедущихДанных", ПравилоПрямойСвязи.ИмяРеквизитаТаблицыСвязанныхДанных);
	ПравилоОбратнойСвязиДанных.Вставить("ПутьКРеквизитуСвязанныхДанных", ПравилоПрямойСвязи.ПутьКРеквизитуВедущихДанных);
	ПравилоОбратнойСвязиДанных.Вставить("ИмяРеквизитаТаблицыСвязанныхДанных", ПравилоПрямойСвязи.ИмяРеквизитаТаблицыВедущихДанных);
	ПравилоОбратнойСвязиДанных.Вставить("ПолныйПутьКОсновнымДанным", ПравилоПрямойСвязи.ПолныйПутьКПодчиненнымДанным);
	ПравилоОбратнойСвязиДанных.Вставить("КлючСвязи", ПравилоПрямойСвязи.КлючСвязи);
	
	Возврат ПравилоОбратнойСвязиДанных;
КонецФункции	

#КонецОбласти

#Область МеханизмХраненияОшибокВДанныхФормы

Функция ПутиКДаннымФормы(Форма, ЗаполнятьПутиКРеквизитамШапки = Истина)
	ПутиКДаннымФормы = Новый Массив;	
	
	ЗаполнитьПутиКДаннымФормы(ПутиКДаннымФормы, Форма, , , ЗаполнятьПутиКРеквизитамШапки);
	
	Возврат ПутиКДаннымФормы;
	
КонецФункции	

Процедура ЗаполнитьПутиКДаннымФормы(ПутиКДаннымФормы, Форма, ОписаниеТекущегоРеквизитаФормы = Неопределено, УровеньВложенности = 1, ЗаполнятьПутиКРеквизитамШапки = Истина)
	Если УровеньВложенности > 2 Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОписаниеТекущегоРеквизитаФормы = Неопределено Тогда
		ПутьКТекущемуРеквизитуФормы = "";
		ОписаниеТипаТекущегоРеквизита = Неопределено;
	Иначе
		ПутьКТекущемуРеквизитуФормы = ОписаниеТекущегоРеквизитаФормы.Путь 
										+ ?(ОписаниеТекущегоРеквизитаФормы.Путь = "", ОписаниеТекущегоРеквизитаФормы.Имя, "." + ОписаниеТекущегоРеквизитаФормы.Имя);
										
		ОписаниеТипаТекущегоРеквизита = ОписаниеТекущегоРеквизитаФормы.ТипЗначения;									
	КонецЕсли;	
	
	Если ОписаниеТипаТекущегоРеквизита = Неопределено Тогда
		РеквизитыФормы = Форма.ПолучитьРеквизиты("");
	Иначе
		РеквизитыФормы = Форма.ПолучитьРеквизиты(ПутьКТекущемуРеквизитуФормы);
	КонецЕсли;			
	
	Для Каждого ОписаниеРеквизита Из РеквизитыФормы Цикл
		Если (ОписаниеРеквизита.ТипЗначения.СодержитТип(Тип("КоллекцияДвижений"))) 
			Или (СтрНайти(ОписаниеРеквизита.Имя, "Свойства_") > 0) Тогда
			Продолжить;
		КонецЕсли;	
		
		ПутьКРеквизиту = ОписаниеРеквизита.Путь + ?(ОписаниеРеквизита.Путь = "", ОписаниеРеквизита.Имя, "." + ОписаниеРеквизита.Имя);

		РеквизитФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКРеквизиту);
		
		Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
			ПутиКДаннымФормы.Добавить(ПутьКРеквизиту);	
		ИначеЕсли ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыСтруктура")
			Или ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыСтруктураСКоллекцией") Тогда
			
			Если ЗаполнятьПутиКРеквизитамШапки Тогда 
				ПутиКДаннымФормы.Добавить(ПутьКРеквизиту);
			КонецЕсли;	
			
			ЗаполнитьПутиКДаннымФормы(ПутиКДаннымФормы, Форма, ОписаниеРеквизита, УровеньВложенности + 1, ЗаполнятьПутиКРеквизитамШапки);
		ИначеЕсли ЗаполнятьПутиКРеквизитамШапки Тогда 
			ПутиКДаннымФормы.Добавить(ПутьКРеквизиту);	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Функция ОшибкиИзДанныхФормы(Форма, КлючДанных = Неопределено, ФормироватьСообщенияПользователю = Ложь)
	Ошибки = Новый Массив;
	
	ПутиКТаблицамФормы = ПутиКДаннымФормы(Форма, Ложь);
	
	ОшибкиИзДанныхШапкиФормыВМассив(Ошибки, Форма, "*", КлючДанных, Ложь, ФормироватьСообщенияПользователю);
		
	Для Каждого ПутьКДаннымТаблицы Из ПутиКТаблицамФормы Цикл 
		ДанныеТаблицы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымТаблицы);
		
		Для Каждого СтрокаТаблицы Из ДанныеТаблицы Цикл
			ИндексСтроки = ДанныеТаблицы.Индекс(СтрокаТаблицы);
			
			ОшибкиИзСтрокиТаблицыФормыВМассив(
				Ошибки, 
				СтрокаТаблицы, 
				ПутьКДаннымТаблицы, 
				ИндексСтроки,
				"*",
				КлючДанных,
				ФормироватьСообщенияПользователю);	
		КонецЦикла;			
	КонецЦикла;	
	
	Возврат Ошибки;
КонецФункции

Функция ОшибкиИзДанныхФормыПоПутиКДанным(Форма, ПутьКДанным, КлючДанных = Неопределено, ФормироватьСообщенияПользователю = Ложь)
	Ошибки = Новый Массив;	
	
	ОписаниеПутиКДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДанным);
	
	Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		ДанныеТаблицы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеПутиКДанным.ПутьКДаннымТаблицы);
		СтрокаТаблицы = ДанныеТаблицы[ОписаниеПутиКДанным.ИндексСтроки];
		
		ОшибкиИзСтрокиТаблицыФормыВМассив(
			Ошибки,
			СтрокаТаблицы, 
			ОписаниеПутиКДанным.ПутьКДаннымТаблицы,
			ОписаниеПутиКДанным.ИндексСтроки,
			ОписаниеПутиКДанным.ИмяРеквизитаСтроки,
			КлючДанных,
			ФормироватьСообщенияПользователю);
			
	Иначе
		ОшибкиИзДанныхШапкиФормыВМассив(Ошибки, Форма, КлючДанных, ПутьКДанным, Ложь, ФормироватьСообщенияПользователю);				
	КонецЕсли;	
		
	Возврат Ошибки;
КонецФункции

Функция ОшибкиИзДанныхФормыСУчетомПодчиненности(Форма, ПутьКДанным, ОписаниеПодчиненностиДанных, КлючДанных = Неопределено, ФормироватьСообщенияПользователю = Ложь)
	Ошибки = ОшибкиИзДанныхФормыПоПутиКДанным(Форма, ПутьКДанным, КлючДанных, ФормироватьСообщенияПользователю);	
		
	ПутиКПодчиненнымДанным = ПутиКПодчиненнымДанным(Форма, ПутьКДанным, ОписаниеПодчиненностиДанных);	
	
	ОтработанныеПутиКДанным = Новый Соответствие;
	
	Для Каждого ПутьКПодчиненнымДанным Из ПутиКПодчиненнымДанным Цикл 
		
		Если ОтработанныеПутиКДанным.Получить(ПутьКПодчиненнымДанным) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ОшибкиПодчиненныхДанных = ОшибкиИзДанныхФормыПоПутиКДанным(Форма, ПутьКПодчиненнымДанным + ".*", КлючДанных, ФормироватьСообщенияПользователю);	
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, ОшибкиПодчиненныхДанных);
		
		ОтработанныеПутиКДанным.Вставить(ПутьКПодчиненнымДанным, Истина);
		Если СтрНайти(ПутьКПодчиненнымДанным, ".*") <> 0 Тогда
			ОтработанныеПутиКДанным.Вставить(СтрЗаменить(ПутьКПодчиненнымДанным, ".*", ""), Истина)
		Иначе	
			ОтработанныеПутиКДанным.Вставить(СтрЗаменить(ПутьКПодчиненнымДанным, "*", ""), Истина);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Ошибки;
КонецФункции

Функция НепривязанныеОшибкиИзДанныхФормы(Форма, КлючДанных = Неопределено, ФормироватьСообщенияПользователю = Ложь)
	Ошибки = Новый Массив;
	
	ОшибкиИзДанныхШапкиФормыВМассив(Ошибки, Форма, "*", КлючДанных, Истина, ФормироватьСообщенияПользователю);
	
	Возврат Ошибки;	
КонецФункции

Процедура ОшибкиИзСтрокиТаблицыФормыВМассив(Ошибки, СтрокаТаблицы, ПутьКДаннымТаблицы, ИндексСтроки, ИмяРеквизитаСтроки = "", КлючДанных = Неопределено, ФормироватьСообщенияПользователю = Ложь)
	ОшибкиСтрокиТаблицы = ЗарплатаКадрыОтображениеОшибокКлиентСервер.СтрокиТаблицыОшибокСтрокиТаблицыДанныхФормы(СтрокаТаблицы, ИмяРеквизитаСтроки, КлючДанных);
	
	Для Каждого ОшибкаДанныхСтрокиТаблицы Из ОшибкиСтрокиТаблицы Цикл
		ОписаниеОшибки = ОписаниеОшибкиИзОшибкиДанныхСтрокиТаблицы(ОшибкаДанныхСтрокиТаблицы, ПутьКДаннымТаблицы, ИндексСтроки);
		
		Если ФормироватьСообщенияПользователю Тогда
			СообщениеОбОшибке = СообщениеПользователюИзОписанияОшибкиВДанных(ОписаниеОшибки);
			Ошибки.Добавить(СообщениеОбОшибке);
		Иначе
			Ошибки.Добавить(ОписаниеОшибки);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОшибкиИзДанныхШапкиФормыВМассив(Ошибки, Форма, ПутьКДанным = "", КлючДанных = Неопределено, ПолучатьТолькоНепривязанныеОшибки = Ложь, ФормироватьСообщенияПользователю = Ложь)
	ОшибкиШапкиФормы = ЗарплатаКадрыОтображениеОшибокКлиентСервер.СтрокиТаблицыОшибокДанныхШапкиФормы(Форма, ПутьКДанным, КлючДанных, ПолучатьТолькоНепривязанныеОшибки);
		
	Для Каждого ОшибкаДанныхШапки Из ОшибкиШапкиФормы Цикл
		ОписаниеОшибки = ОписаниеОшибкиИзОшибкиДанныхШапки(ОшибкаДанныхШапки);
		
		Если ФормироватьСообщенияПользователю Тогда
			СообщениеОбОшибке = СообщениеПользователюИзОписанияОшибкиВДанных(ОписаниеОшибки);
			Ошибки.Добавить(СообщениеОбОшибке);
		Иначе
			Ошибки.Добавить(ОписаниеОшибки);
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры	

Функция ОписаниеОшибкиИзОшибкиДанныхСтрокиТаблицы(ОшибкаДанныхСтрокиТаблицы, ПутьКДаннымТаблицы, ИндексСтроки)
	ОписаниеОшибки = ОписаниеОшибкиДанных();
		
	ОписаниеОшибки.Текст = ОшибкаДанныхСтрокиТаблицы.Текст;
	ОписаниеОшибки.КлючДанных = ОшибкаДанныхСтрокиТаблицы.КлючДанных;
	
	ПутьКДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымСтрокиТаблицы();
	ПутьКДанным.ПутьКДаннымТаблицы = ПутьКДаннымТаблицы;
	ПутьКДанным.ИндексСтроки = ИндексСтроки;
	ПутьКДанным.ИмяРеквизитаСтроки = ОшибкаДанныхСтрокиТаблицы.Поле;
	
	ОписаниеОшибки.ПутьКДанным = ПутьКДанным;
	
	Возврат ОписаниеОшибки;	
КонецФункции

Функция ОписаниеОшибкиИзОшибкиДанныхШапки(ОшибкаДанныхШапки)
	ОписаниеОшибки = ОписаниеОшибкиДанных();
		
	ОписаниеОшибки.Текст = ОшибкаДанныхШапки.Текст;
	ОписаниеОшибки.КлючДанных = ОшибкаДанныхШапки.КлючДанных;
	
	ПутьКДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымРеквизитаОбъекта();
	ПутьКДанным.ПутьКДанным = ОшибкаДанныхШапки.Поле;
	
	ОписаниеОшибки.ПутьКДанным = ПутьКДанным;
		
	Возврат ОписаниеОшибки;	

КонецФункции

#КонецОбласти

#Область МеханизмОписанияПодчиненностиДанныхФормы

Функция ДеревоПодчиненностиДанныхПоПутямКПодчиненнымДанным(Данные, ПутиКПодчиненнымДанным, ОписаниеПодчиненностиДанных = Неопределено)
	ОтработанныеУзлыВедущихДанных = Новый Соответствие;	
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ПутьКПодчиненнымДанным Из ПутиКПодчиненнымДанным Цикл
		ДобавитьУзлыДереваПодчиненностиДанныхПоПутиКПодчиненнымДанным(Данные, Дерево, ПутьКПодчиненнымДанным, ОписаниеПодчиненностиДанных, ОтработанныеУзлыВедущихДанных);
	КонецЦикла;
	
	Возврат Дерево;
КонецФункции	

Функция ДобавитьУзлыДереваПодчиненностиДанныхПоПутиКПодчиненнымДанным(Данные, ДеревоПодчиненностиДанных, ПутьКПодчиненнымДанным, ОписаниеПодчиненности, ОтработанныеУзлыВедущихДанных)
	УзлыПодчиненныхДанных = ОтработанныеУзлыВедущихДанных.Получить(ПутьКПодчиненнымДанным);
	Если УзлыПодчиненныхДанных <> Неопределено Тогда
		Возврат УзлыПодчиненныхДанных;
	КонецЕсли;
	
	Если ОписаниеПодчиненности <> Неопределено Тогда
		ПутиКВедущимДанным = ПутиКВедущимДанным(Данные, ПутьКПодчиненнымДанным, ОписаниеПодчиненности, Ложь);
	Иначе
		ПутиКВедущимДанным = Новый Массив;
	КонецЕсли;	
	
	Если ПутиКВедущимДанным.Количество() = 0 Тогда
		Узел = ДеревоПодчиненностиДанных.Строки.Добавить();
		Узел.ПутьКДанным = ПутьКПодчиненнымДанным;
		
		УзлыПодчиненныхДанных = Новый Массив;
		УзлыПодчиненныхДанных.Добавить(Узел);
		
		ОтработанныеУзлыВедущихДанных.Вставить(ПутьКПодчиненнымДанным, УзлыПодчиненныхДанных);	
				
		Возврат УзлыПодчиненныхДанных;
	КонецЕсли;	
		
	УзлыПодчиненныхДанных = Новый Массив;
	
	Для Каждого ПутьКВедущимДанным Из ПутиКВедущимДанным Цикл
		УзлыВедущихДанных = ДобавитьУзлыДереваПодчиненностиДанныхПоПутиКПодчиненнымДанным(Данные, ДеревоПодчиненностиДанных, ПутьКВедущимДанным, ОписаниеПодчиненности, ОтработанныеУзлыВедущихДанных);
				
		Для Каждого УзелВедущихДанных Из УзлыВедущихДанных Цикл
			УзелПодчиненныхДанных = УзелВедущихДанных.Строки.Добавить();
			УзелПодчиненныхДанных.ПутьКДанным = ПутьКПодчиненнымДанным;
			
			УзлыПодчиненныхДанных.Добавить(УзелПодчиненныхДанных);
		КонецЦикла;		
	КонецЦикла;
		
	ОтработанныеУзлыВедущихДанных.Вставить(ПутьКПодчиненнымДанным, УзлыПодчиненныхДанных);
	
	Возврат УзлыПодчиненныхДанных;	
КонецФункции	

Процедура ЗаполнитьПутиКВедущимДанным(ПутиКВедущимДанным, Данные, ПутьКПодчиненнымДанным, ОписаниеПодчиненностиДанных, РекурсивныйПоиск = Истина)
	ОписаниеПутиКПодчиненнымДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКПодчиненнымДанным);
	
	Если ОписаниеПутиКПодчиненнымДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда 
		ОписаниеПутиКПодчиненнымДанным.ИмяРеквизитаСтроки = "";
	КонецЕсли;	
	
	КлючиПоискаПравилСвязи = КлючиПоискаПравилСвязиПоОписаниюПутиКДанным(ОписаниеПутиКПодчиненнымДанным, Истина);	
		
	ДопустимыеТипыСвязиДанных = ДопустимыеТипыСвязиДанныхПоОписаниюПутиКВедущимДанным(ОписаниеПутиКПодчиненнымДанным);
	
	ПравилаСвязиДанных = ПравилаСвязиДанныхПоКлючамПоиска(ОписаниеПодчиненностиДанных, КлючиПоискаПравилСвязи, ДопустимыеТипыСвязиДанных, Истина);
	
	ОписаниеПутейКВедущимДанным = ОписаниеПутейКСвязаннымДаннымПоПравиламСвязиДанных(Данные, Данные, ОписаниеПутиКПодчиненнымДанным, ПравилаСвязиДанных);	
	
	Для Каждого ОписаниеПутиКВедущимДанным Из ОписаниеПутейКВедущимДанным Цикл
		ПутьКВедущимДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеПутиКВедущимДанным);
		
		Если ПутьКВедущимДанным <> ПутьКПодчиненнымДанным 	
			И ПутиКВедущимДанным.Найти(ПутьКВедущимДанным) = Неопределено Тогда
			
			ПутиКВедущимДанным.Добавить(ПутьКВедущимДанным);
			
			Если РекурсивныйПоиск Тогда
				ЗаполнитьПутиКВедущимДанным(ПутиКВедущимДанным, Данные, ПутьКВедущимДанным, ОписаниеПодчиненностиДанных);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Процедура ЗаполнитьПутиКПодчиненнымДанным(ПутиКПодчиненнымДанным, Данные, ПутьКВедущимДанным, ОписаниеПодчиненностиДанных)	
	ОписаниеПутиКВедущимДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКВедущимДанным);
	
	Если ОписаниеПутиКВедущимДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		ОписаниеПутиКВедущимДанным.ИмяРеквизитаСтроки = "";
	КонецЕсли;
	
	Если Прав(ПутьКВедущимДанным, 1) = "*"
		И ОписаниеПутиКВедущимДанным.Тип = "ПутьКДаннымРеквизита" Тогда 
		
		ПравилаСвязиДанных = ПравилаСвязиДанныхДляНеСтрогоОпределенияПутейКПодчиненнымДанным(ОписаниеПутиКВедущимДанным, ОписаниеПодчиненностиДанных);			
	Иначе	
		КлючиПоискаПравилСвязи = КлючиПоискаПравилСвязиПоОписаниюПутиКДанным(ОписаниеПутиКВедущимДанным, Истина);
		ДопустимыеТипыСвязиДанных = ДопустимыеТипыСвязиДанныхПоОписаниюПутиКВедущимДанным(ОписаниеПутиКВедущимДанным);
		ПравилаСвязиДанных = ПравилаСвязиДанныхПоКлючамПоиска(ОписаниеПодчиненностиДанных, КлючиПоискаПравилСвязи, ДопустимыеТипыСвязиДанных, Ложь);
	КонецЕсли;	
	
	ОписаниеПутейКПодчиненнымДанным = ОписаниеПутейКСвязаннымДаннымПоПравиламСвязиДанных(Данные, Данные, ОписаниеПутиКВедущимДанным, ПравилаСвязиДанных);	
	
	Для Каждого ОписаниеПутиКПодчиненнымДанным Из ОписаниеПутейКПодчиненнымДанным Цикл
		ПутьКПодчиненнымДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеПутиКПодчиненнымДанным);
		
		Если ПутьКПодчиненнымДанным <> ПутьКВедущимДанным 
			 И ПутиКПодчиненнымДанным.Найти(ПутьКПодчиненнымДанным) = Неопределено Тогда
			
			ПутиКПодчиненнымДанным.Добавить(ПутьКПодчиненнымДанным);
			ЗаполнитьПутиКПодчиненнымДанным(ПутиКПодчиненнымДанным, Данные, ПутьКПодчиненнымДанным, ОписаниеПодчиненностиДанных);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Функция ПравилаСвязиДанныхДляНеСтрогоОпределенияПутейКПодчиненнымДанным(ОписаниеПутиКВедущимДанным, ОписаниеПодчиненностиДанных)
	ПравилаСвязиДанных = Новый Массив;
	
	Если ОписаниеПутиКВедущимДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		СтрокаСравнения = ОписаниеПутиКВедущимДанным.ПутьКДаннымТаблицы;
	Иначе
		Если ОписаниеПутиКВедущимДанным.ПутьКДанным = "*" Тогда
			СтрокаСравнения = "";
		Иначе
			СтрокаСравнения = Сред(ОписаниеПутиКВедущимДанным.ПутьКДанным, 1, СтрДлина(ОписаниеПутиКВедущимДанным.ПутьКДанным) - 2);
		КонецЕсли;
	КонецЕсли;	
	
	ДопустимыеТипыСвязи = ДопустимыеТипыСвязиДанныхПоОписаниюПутиКВедущимДанным(ОписаниеПутиКВедущимДанным);
	
	ДлинаСтрокиСравнения = СтрДлина(СтрокаСравнения);
	
	Для Каждого ЭлементОписанияПодчиненностиДанных Из ОписаниеПодчиненностиДанных Цикл
		Если Лев(ЭлементОписанияПодчиненностиДанных.ПолныйПутьКОсновнымДанным, ДлинаСтрокиСравнения) = СтрокаСравнения 
			И ДопустимыеТипыСвязи.Найти(ЭлементОписанияПодчиненностиДанных.ТипСвязиДанных) <> Неопределено Тогда
			
			ПравилаСвязиДанных.Добавить(ЭлементОписанияПодчиненностиДанных);	
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат ПравилаСвязиДанных;
КонецФункции	

#КонецОбласти

#Область МеханизмИндикацииЭлементовСодержащихОшибки

Функция ОписаниеЭлементаСИндикациейОшибок()
	ОписаниеЭлемента = Новый Структура;
	
	ОписаниеЭлемента.Вставить("Тип");
	ОписаниеЭлемента.Вставить("ИмяЭлемента", "");
	ОписаниеЭлемента.Вставить("ИмяЭлементаТаблица", "");
	ОписаниеЭлемента.Вставить("ОтображатьГиперссылку", Ложь);
	ОписаниеЭлемента.Вставить("ПутьКДаннымФормыСодержащимОшибку", "");
	ОписаниеЭлемента.Вставить("ИмяРеквизитаТаблицы", "");
	ОписаниеЭлемента.Вставить("ОтображатьНепривязанныеОшибки", Ложь);
	ОписаниеЭлемента.Вставить("ОформлениеДляДанныхСОшибкой", "");
	ОписаниеЭлемента.Вставить("ОформлениеДляНеЗаполненныхДанныхДанных", "");

	Возврат ОписаниеЭлемента;		
КонецФункции

Функция ОписаниеРеквизитаИндикацииОшибкиВШапке()
	Возврат Новый Структура("Тип, ПутьКДаннымФормыСодержащимОшибку", "РеквизитШапки");	
КонецФункции	

Функция ОписаниеРеквизитаИндикацииОшибкиВСтрокеТаблицы()
	Возврат Новый Структура("Тип, ПутьКДаннымФормыСодержащимОшибку, ИмяРеквизитаТаблицы", "РеквизитСтрокиТаблицы");	
КонецФункции

Функция ОписаниеРеквизитаИндикацииОшибкиИзОписанияЭлементаИндикации(ОписаниеЭлемента)
	Если ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы"
		Или ОписаниеЭлемента.Тип = "ОписаниеЭлементаШапкиСИндикациейОшибокВСтрокеТаблицы" Тогда
		
		ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВСтрокеТаблицы();
		ЗаполнитьЗначенияСвойств(ОписаниеРеквизита, ОписаниеЭлемента,, "Тип");
	Иначе
		ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВШапке();
		ЗаполнитьЗначенияСвойств(ОписаниеРеквизита, ОписаниеЭлемента,, "Тип");	
	КонецЕсли;	

	Возврат ОписаниеРеквизита;
КонецФункции	

Функция ОписаниеДобавляемыхРеквизитовИндикацииОшибокИзОписанияПодчиненности(ОписаниеПодчиненностиДанных)
	ОписаниеРеквизитовИндикации = Новый Массив;
	
	Для Каждого ЭлементОписанияПодчиненности Из ОписаниеПодчиненностиДанных Цикл
		Если ЭлементОписанияПодчиненности.ТипСвязиДанных = "СвязьРеквизитовОбъектов"  Тогда 
			
			ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВШапке();
			ОписаниеРеквизита.ПутьКДаннымФормыСодержащимОшибку = ЭлементОписанияПодчиненности.ПутьКРеквизитуСвязанныхДанных;
			
		Иначе
			ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВСтрокеТаблицы();
			ОписаниеРеквизита.ПутьКДаннымФормыСодержащимОшибку = ЭлементОписанияПодчиненности.ПутьКРеквизитуСвязанныхДанных;	
			ОписаниеРеквизита.ИмяРеквизитаТаблицы = ЭлементОписанияПодчиненности.ИмяРеквизитаТаблицыСвязанныхДанных;
		КонецЕсли;	
		
		ОписаниеРеквизитовИндикации.Добавить(ОписаниеРеквизита);
	КонецЦикла;	
	
	Возврат ОписаниеРеквизитовИндикации;	
КонецФункции	

Функция ОписаниеДобавляемыхРеквизитовСчетчиковОшибокИзОписанияПодчиненности(ОписаниеПодчиненностиДанных)
	ОписаниеРеквизитовСчетчиков = Новый Массив;
	
	Для Каждого ЭлементОписанияПодчиненности Из ОписаниеПодчиненностиДанных Цикл
		Если ЭлементОписанияПодчиненности.ТипСвязиДанных = "СвязьРеквизитовОбъектов"
			Или ЭлементОписанияПодчиненности.ТипСвязиДанных = "СвязьРеквизитаСДаннымиСтрокиТаблицы" Тогда 
			
			ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВШапке();
			ОписаниеРеквизита.ПутьКДаннымФормыСодержащимОшибку = ЭлементОписанияПодчиненности.ПутьКРеквизитуВедущихДанных;
			
		Иначе
			ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВСтрокеТаблицы();
			ОписаниеРеквизита.ПутьКДаннымФормыСодержащимОшибку = ЭлементОписанияПодчиненности.ПутьКРеквизитуВедущихДанных;	
			ОписаниеРеквизита.ИмяРеквизитаТаблицы = ЭлементОписанияПодчиненности.ИмяРеквизитаТаблицыВедущихДанных;
		КонецЕсли;	
		
		ОписаниеРеквизитовСчетчиков.Добавить(ОписаниеРеквизита);
	КонецЦикла;	
	
	Возврат ОписаниеРеквизитовСчетчиков;
КонецФункции

Функция ОписаниеРеквизитовИндикацииСвязанныхСДаннымиФормы()
	Описание = Новый Структура;
	Описание.Вставить("ПутьКДанным");
	Описание.Вставить("ИмяРеквизитаФлаг");
	Описание.Вставить("ИмяРеквизитаСчетчик");
	Описание.Вставить("ПутьКДаннымФормыСодержащимОшибку");
	Описание.Вставить("СтраницыВладельцы", Новый Массив);

	Возврат Описание;	
КонецФункции	

Функция СоздатьРеквизитПризнакНаличияОшибки(ДобавляемыеРеквизиты, СвойстваСоздаваемогоРеквизита, ОписаниеСозданныхРеквизитов)
	
	Если СвойстваСоздаваемогоРеквизита.Тип = "РеквизитСтрокиТаблицы" Тогда
		
		ИмяРеквизитаФлаг = "ЕстьОшибки"; 
		
		Путь = СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку;
	Иначе
		ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку, ".");
		
		Путь  = "";
		Если ЭлементыПути.Количество() = 0 Тогда
			ИмяРеквизитаФлаг = "ЕстьОшибки";
		Иначе
			ИмяРеквизитаФлаг = ЭлементыПути[ЭлементыПути.Количество() - 1] + "ЕстьОшибки";
		КонецЕсли;		
	КонецЕсли;	
	
	ПолныйПуть = Путь + ?(Путь = "", "", ".") + ИмяРеквизитаФлаг;
	
	ОписаниеСозданногоРеквизита =  ОписаниеСозданныхРеквизитов[СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку];
	
	Если ОписаниеСозданногоРеквизита = Неопределено Тогда 
		ОписаниеСозданногоРеквизита = ОписаниеРеквизитовИндикацииСвязанныхСДаннымиФормы();
		ОписаниеСозданногоРеквизита.ПутьКДанным = Путь;
		ОписаниеСозданногоРеквизита.ИмяРеквизитаФлаг = ИмяРеквизитаФлаг;
		ОписаниеСозданногоРеквизита.ПутьКДаннымФормыСодержащимОшибку = СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку; 
		
		ОписаниеСозданныхРеквизитов.Вставить(СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку, ОписаниеСозданногоРеквизита);

		РеквизитФлаг = Новый РеквизитФормы(ИмяРеквизитаФлаг, Новый ОписаниеТипов("Булево"), Путь);
		ДобавляемыеРеквизиты.Добавить(РеквизитФлаг);
	КонецЕсли;	
		
	Возврат ОписаниеСозданногоРеквизита;
КонецФункции	

Функция СоздатьРеквизитСчетчикНаличияОшибкиВПодчиненныхДанных(ДобавляемыеРеквизиты, СвойстваСоздаваемогоРеквизита, ОписаниеСозданныхРеквизитов)
	
	Если СвойстваСоздаваемогоРеквизита.Тип = "РеквизитСтрокиТаблицы" Тогда
		
		ИмяРеквизитаСчетчик = "КоличествоПодчиненныхЭлементовСОшибками"; 
		
		Путь = СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку;
	Иначе
		ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку, ".");
		
		Путь  = "";
		Если ЭлементыПути.Количество() = 0 Тогда
			ИмяРеквизитаСчетчик = "КоличествоПодчиненныхЭлементовСОшибками";
		Иначе
			ИмяРеквизитаСчетчик = ЭлементыПути[ЭлементыПути.Количество() - 1] + "КоличествоПодчиненныхЭлементовСОшибками";
		КонецЕсли;		
	КонецЕсли;	
	
	ПолныйПуть = Путь + ?(Путь = "", "", ".") + ИмяРеквизитаСчетчик;
	
	ОписаниеСозданногоРеквизита =  ОписаниеСозданныхРеквизитов[СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку];
	
	Если ОписаниеСозданногоРеквизита = Неопределено Тогда 
		ОписаниеСозданногоРеквизита = ОписаниеРеквизитовИндикацииСвязанныхСДаннымиФормы();
		ОписаниеСозданногоРеквизита.ПутьКДанным = Путь;
		ОписаниеСозданногоРеквизита.ИмяРеквизитаСчетчик = ИмяРеквизитаСчетчик;
		ОписаниеСозданногоРеквизита.ПутьКДаннымФормыСодержащимОшибку = СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку;
		
		ОписаниеСозданныхРеквизитов.Вставить(СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку, ОписаниеСозданногоРеквизита);

		РеквизитСчетчик = Новый РеквизитФормы(ИмяРеквизитаСчетчик, Новый ОписаниеТипов("Число"), Путь);
		ДобавляемыеРеквизиты.Добавить(РеквизитСчетчик);
	Иначе
		Если Не ЗначениеЗаполнено(ОписаниеСозданногоРеквизита.ИмяРеквизитаСчетчик) Тогда
			ОписаниеСозданногоРеквизита.ИмяРеквизитаСчетчик = ИмяРеквизитаСчетчик;
			РеквизитСчетчик = Новый РеквизитФормы(ИмяРеквизитаСчетчик, Новый ОписаниеТипов("Число"), Путь);
			ДобавляемыеРеквизиты.Добавить(РеквизитСчетчик);
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ОписаниеСозданногоРеквизита;
КонецФункции	

Функция СоздатьЭлементИндикацииОшибки(Форма, ОписаниеЭлемента, ОписаниеЭлементовСРеквизитамиИндикации)
	ЭлементИндикации = Неопределено;
	
	Элементы = Форма.Элементы;
	
	ЭлементОтображенияДанныхСОшибкой = Элементы[ОписаниеЭлемента.ИмяЭлемента];
	ОписаниеРеквизитаИндикации = ОписаниеЭлементовСРеквизитамиИндикации[ОписаниеЭлемента.ИмяЭлемента];
	ПутьКДанным = ОписаниеРеквизитаИндикации.ПутьКДанным + ?(ОписаниеРеквизитаИндикации.ПутьКДанным = "", "", ".") + ОписаниеРеквизитаИндикации.ИмяРеквизитаФлаг;
	
	ПутьКДаннымСчетчика = "";
	Если ЗначениеЗаполнено(ОписаниеРеквизитаИндикации.ИмяРеквизитаСчетчик) Тогда
		ПутьКДаннымСчетчика = ОписаниеРеквизитаИндикации.ПутьКДанным + ?(ОписаниеРеквизитаИндикации.ПутьКДанным = "", "", ".") + ОписаниеРеквизитаИндикации.ИмяРеквизитаСчетчик;
	КонецЕсли;	
	
	Если ОписаниеЭлемента.ОтображатьГиперссылку Тогда
		Если ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы" Тогда
			ЭлементИндикации = СоздатьЭлементИндикацииВТаблицеФормы(Форма, ЭлементОтображенияДанныхСОшибкой, ПутьКДанным);
		ИначеЕсли ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки" 
			Или ОписаниеЭлемента.Тип = "ОписаниеЭлементаШапкиСИндикациейОшибокВСтрокеТаблицы" Тогда
			
			ЭлементИндикации = СоздатьЭлементИндикацииОшибкиВШапкеФормы(Форма, ЭлементОтображенияДанныхСОшибкой, ПутьКДанным);	
		КонецЕсли;	
	КонецЕсли;
	
	УстановитьУсловноеОформлениеДляЭлементаСодержащегоОшибку(Форма, ОписаниеЭлемента, ОписаниеРеквизитаИндикации);
	
	Возврат ЭлементИндикации;
КонецФункции	

Функция СтраницыЭлементаИндикации(Элемент)
	Страницы = Новый Массив;
	
	ЗаполнитьСтраницыВладельцыЭлемента(Элемент, Страницы);	
	
	Возврат Страницы;
КонецФункции	

Процедура ЗаполнитьСтраницыВладельцыЭлемента(Элемент, Страницы)
	Если ТипЗнч(Элемент) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаФормы")
		И ((Элемент.Вид = ВидГруппыФормы.Страница
			И Элемент.Родитель.ОтображениеСтраниц <> ОтображениеСтраницФормы.Нет)
		ИЛИ (Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа
			И Элемент.Поведение  = ПоведениеОбычнойГруппы.Свертываемая))Тогда 
		
		Страницы.Добавить(Элемент.Имя);
	КонецЕсли;	
	
	ЗаполнитьСтраницыВладельцыЭлемента(Элемент.Родитель, Страницы)	
КонецПроцедуры	

Функция СоздатьЭлементИндикацииОшибкиВШапкеФормы(Форма, ЭлементОтображенияДанныхСОшибкой, ПутьКДанным)
	Элементы = Форма.Элементы;
	
	Если ТипЗнч(ЭлементОтображенияДанныхСОшибкой.Родитель) =  Тип("ГруппаФормы")
		И ЭлементОтображенияДанныхСОшибкой.Родитель.Вид  = ВидГруппыФормы.ОбычнаяГруппа
		И ЭлементОтображенияДанныхСОшибкой.Родитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная Тогда
		
		Родитель = ЭлементОтображенияДанныхСОшибкой.Родитель;
	Иначе	
	                                                
		ИмяГруппы = ЭлементОтображенияДанныхСОшибкой.Имя + "ГруппаИндикацииОшибки";
				
		Родитель = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), ЭлементОтображенияДанныхСОшибкой.Родитель, ЭлементОтображенияДанныхСОшибкой);
		Родитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Родитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Родитель.ОтображатьЗаголовок  = Ложь;
		Родитель.Отображение = ОтображениеОбычнойГруппы.Нет;
	
		Элементы.Переместить(ЭлементОтображенияДанныхСОшибкой, Родитель);
	КонецЕсли;	
		
	ЭлементИндикации = СоздатьПолеКартинкиДляИндикацииОшибок(Элементы, ЭлементОтображенияДанныхСОшибкой, Родитель, ПутьКДанным);	
	
	ЭлементИндикации.УстановитьДействие("Нажатие", "Подключаемый_ЭлементИндикацииОшибкиНажатие");
		
	Возврат ЭлементИндикации;
КонецФункции

Функция СоздатьЭлементИндикацииВТаблицеФормы(Форма, ЭлементОтображенияДанныхСОшибкой, ПутьКДанным)
	Элементы = Форма.Элементы;
	
	Если ТипЗнч(ЭлементОтображенияДанныхСОшибкой) = Тип("ТаблицаФормы") Тогда
		Родитель = ЭлементОтображенияДанныхСОшибкой;
	Иначе
		Родитель = ЭлементОтображенияДанныхСОшибкой.Родитель;
	КонецЕсли;		
	
	ЭлементИндикации = СоздатьПолеКартинкиДляИндикацииОшибок(Элементы, ЭлементОтображенияДанныхСОшибкой, Родитель, ПутьКДанным);	
	ЭлементИндикации.ГиперссылкаЯчейки = Истина;
	ЭлементИндикации.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	ЭлементИндикации.ТолькоПросмотр = Истина;
	
	ЭлементИндикации.РастягиватьПоГоризонтали = Ложь;
		
	Если ЭлементИндикации.Родитель.ПодчиненныеЭлементы.Количество() > 0 Тогда 
		Элементы.Переместить(ЭлементИндикации, ЭлементИндикации.Родитель, ЭлементИндикации.Родитель.ПодчиненныеЭлементы[0]);			
	КонецЕсли;	
	
	ЭлементИндикации.Ширина = 1;
	
	Родитель.УстановитьДействие("ПриАктивизацииЯчейки", "Подключаемый_ЭлементИндикацииПриАктивизацииЯчейки");
	
	ЯчейкаАктивируемаяПоУмолчанию = ЗарплатаКадрыОтображениеОшибокКлиентСервер.АктивныйЭлементВТаблицеСодержащейГиперссылку(Родитель, ЭлементИндикации);
	
	Если ЯчейкаАктивируемаяПоУмолчанию <> Неопределено Тогда
		ЯчейкаАктивируемаяПоУмолчанию.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;	
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
			
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	Отбор.ПравоеЗначение = Ложь;
	Отбор.Использование = Истина;

	ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ЭлементИндикации.Имя); 
	ОформляемоеПоле.Использование = Истина;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);	
	
	Возврат ЭлементИндикации;
		
КонецФункции	

Функция СоздатьПолеКартинкиДляИндикацииОшибок(ЭлементыФормы, ЭлементОтображенияДанныхСОшибкой, Родитель, ПутьКДанным)
	ИмяЭлемента = ЭлементОтображенияДанныхСОшибкой.Имя + "ЕстьОшибки";
	
	ИндексЭлемента = ЭлементОтображенияДанныхСОшибкой.Родитель.ПодчиненныеЭлементы.Индекс(ЭлементОтображенияДанныхСОшибкой); 
	
	Если ТипЗнч(Родитель) = Тип("ТаблицаФормы") 
		Или ИндексЭлемента = ЭлементОтображенияДанныхСОшибкой.Родитель.ПодчиненныеЭлементы.Количество() - 1 Тогда
		
		ЭлементИндикации = ЭлементыФормы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель);	
	Иначе
		СледующийЭлемент = ЭлементОтображенияДанныхСОшибкой.Родитель.ПодчиненныеЭлементы[ИндексЭлемента + 1];
		ЭлементИндикации = ЭлементыФормы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, СледующийЭлемент);	
	КонецЕсли;	
	
	ЭлементИндикации.ПутьКДанным  = ПутьКДанным;
	ЭлементИндикации.Вид = ВидПоляФормы.ПолеКартинки;
	ЭлементИндикации.АктивизироватьПоУмолчанию = Ложь;
	ЭлементИндикации.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементИндикации.ПропускатьПриВводе = Истина;
	ЭлементИндикации.КартинкаЗначений  = БиблиотекаКартинок.Предупреждение;
	ЭлементИндикации.Видимость = ЭлементОтображенияДанныхСОшибкой.Видимость;
	ЭлементИндикации.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ЭлементИндикации.Высота = 1;
	ЭлементИндикации.Ширина = 2;
	ЭлементИндикации.РастягиватьПоВертикали = Ложь;
	ЭлементИндикации.РастягиватьПоГоризонтали = Ложь;
	ЭлементИндикации.Гиперссылка = Истина;
	
	Возврат ЭлементИндикации;
КонецФункции	

Функция УстановитьУсловноеОформлениеДляЭлементаСодержащегоОшибку(Форма, ОписаниеЭлемента, ОписаниеРеквизитаИндикации)
	ПутьКДаннымФлага = ОписаниеРеквизитаИндикации.ПутьКДанным + ?(ОписаниеРеквизитаИндикации.ПутьКДанным = "", "", ".") + ОписаниеРеквизитаИндикации.ИмяРеквизитаФлаг;
	ПутьКДаннымСчетчика = ОписаниеРеквизитаИндикации.ПутьКДанным + ?(ОписаниеРеквизитаИндикации.ПутьКДанным = "", "", ".") + ОписаниеРеквизитаИндикации.ИмяРеквизитаСчетчик;
	
	Если ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки" Тогда
		
		ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитаИндикации.ПутьКДаннымФормыСодержащимОшибку);
				
		Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымФлага);
		Отбор.ПравоеЗначение = Истина;
		Отбор.Использование = Истина;
		
		ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеЭлемента.ИмяЭлемента); 
		ОформляемоеПоле.Использование = Истина;

		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);	
	КонецЕсли;	
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымФлага);
	Отбор.ПравоеЗначение = Истина;
	Отбор.Использование = Истина;

	Если Не ПустаяСтрока(ОписаниеРеквизитаИндикации.ИмяРеквизитаСчетчик) Тогда
		Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымСчетчика);
		Отбор.ПравоеЗначение = 0;
		Отбор.Использование = Истина;
	КонецЕсли;	

	ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеЭлемента.ИмяЭлемента); 
	ОформляемоеПоле.Использование = Истина;
	
	Если ОписаниеЭлемента.Тип = "ОписаниеЭлементаШапкиСИндикациейОшибокВСтрокеТаблицы" Тогда
		ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеЭлемента.ИмяЭлементаТаблица); 
		ОформляемоеПоле.Использование = Истина;
	КонецЕсли;	

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
		
КонецФункции	

Процедура УстановитьФлагиНаличияДляПутиКДанным(Форма, ПутиКДанным, ЗначениеФлага, ОписаниеПодчиненностиДанных = Неопределено, СбрасыватьСчетчикОшибокВПодчиненныхЭлементах = Ложь) Экспорт
	ПутиКУзламДанныхСОшибками = Новый Массив;
	
	ОтработанныеПутиКУзламДаннымСОшибками = Новый Соответствие;
	
	Для Каждого ПутьКДанным Из ПутиКДанным Цикл 
		ОписаниеПутиКДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДанным);
		
		Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" И
			Не ПустаяСтрока(ОписаниеПутиКДанным.ИмяРеквизитаСтроки) Тогда
			
			ОписаниеПутиКДанным.ИмяРеквизитаСтроки = "";
			
			ПутьКДанным = ЗарплатаКадрыОтображениеОшибокКлиентСервер.ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеПутиКДанным);
		КонецЕсли;
		
		Если ОтработанныеПутиКУзламДаннымСОшибками.Получить(ПутиКДанным) = Неопределено Тогда
			ПутиКУзламДанныхСОшибками.Добавить(ПутьКДанным);
			ОтработанныеПутиКУзламДаннымСОшибками.Вставить(ПутьКДанным, Истина);
		КонецЕсли;	
	КонецЦикла;	
		
	ДеревоПодчиненностиДанных = ДеревоПодчиненностиДанныхПоПутямКПодчиненнымДанным(Форма, ПутиКУзламДанныхСОшибками, ОписаниеПодчиненностиДанных);
	
	ПутиКДаннымФормы = ПутиКДаннымФормы(Форма, Истина);
	
	СчетчикФлаговНаСтраницах = Новый Структура(Форма.СчетчикФлаговНаСтраницах);
	
	Для Каждого ТекущийУзел Из ДеревоПодчиненностиДанных.Строки Цикл
		УстановитьФлагНаличияОшибокДляУЗлаДанных(Форма, ТекущийУзел, ЗначениеФлага, ОтработанныеПутиКУзламДаннымСОшибками, ПутиКДаннымФормы, СчетчикФлаговНаСтраницах, СбрасыватьСчетчикОшибокВПодчиненныхЭлементах);
	КонецЦикла;	
	
	Форма.СчетчикФлаговНаСтраницах = Новый ФиксированнаяСтруктура(СчетчикФлаговНаСтраницах);
	
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УстановитьКартинкиДляЗаголовковСтраницФормы(Форма)
КонецПроцедуры	

Функция УстановитьФлагНаличияОшибокДляУЗлаДанных(Форма, ТекущийУзел, ЗначениеФлага, УзлыДанныхСИзменяемымЗначениемФлага, ПутиКДаннымФормы, СчетчикФлаговНаСтраницах, СбрасыватьСчетчикОшибокВПодчиненныхЭлементах = Ложь); 
	КоличествоПодчиненныхУзловСОшибками = 0;
		
	Для Каждого ПодчиненныйУзел Из ТекущийУзел.Строки Цикл
		Если УстановитьФлагНаличияОшибокДляУЗлаДанных(Форма, ПодчиненныйУзел, ЗначениеФлага, УзлыДанныхСИзменяемымЗначениемФлага, ПутиКДаннымФормы, СчетчикФлаговНаСтраницах, СбрасыватьСчетчикОшибокВПодчиненныхЭлементах) Тогда
			Если ЗначениеФлага Тогда
				КоличествоПодчиненныхУзловСОшибками = КоличествоПодчиненныхУзловСОшибками + 1;
			Иначе 
				КоличествоПодчиненныхУзловСОшибками = КоличествоПодчиненныхУзловСОшибками - 1;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	СбрасыватьСчетчикОшибокВПодчиненныхДанныхДляТекущегоУзла = Ложь;
	ЕстьОшибкиВСобственныхДанных = Неопределено;
	Если УзлыДанныхСИзменяемымЗначениемФлага.Получить(ТекущийУзел.ПутьКДанным) <> Неопределено Тогда 
		ЕстьОшибкиВСобственныхДанных = ЗначениеФлага;
		СбрасыватьСчетчикОшибокВПодчиненныхДанныхДляТекущегоУзла = СбрасыватьСчетчикОшибокВПодчиненныхЭлементах
	КонецЕсли;	
		
	Возврат ЗарплатаКадрыОтображениеОшибокКлиентСервер.УстановитьФлагНаличияОшибки(
				Форма, 
				ТекущийУзел.ПутьКДанным, 
				ЕстьОшибкиВСобственныхДанных, 
				КоличествоПодчиненныхУзловСОшибками,
				СбрасыватьСчетчикОшибокВПодчиненныхДанныхДляТекущегоУзла, 
				СчетчикФлаговНаСтраницах,
				ПутиКДаннымФормы);
	
КонецФункции

#КонецОбласти

#КонецОбласти
