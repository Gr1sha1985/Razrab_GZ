
#Область СлужебныЙПрограммныйИнтерфейс

// Предназначена для генерации движений, связанных с отражением в регл. учете выплаты дивидендов
//
// Параметры:
//	ТаблицаВыплатаДивидендов - таблица значений с колонками
//      Подразделение
//		Контрагент
//      СуммаКВыплате
//      БанковскийСчет
//      СтатьяДвиженияДенежныхСредств
//      СчетУчета
//      НачислениеДивидендов
//	ТаблицаРеквизиты  - таблица значений содержит реквизиты документа
//	Движения
//	Отказ
//
Процедура СформироватьДвиженияВыплатаДивидендов(ТаблицаВыплатаДивидендов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВыплатаДивидендов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыплатыДивидендов(ТаблицаВыплатаДивидендов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	СуммаДокумента = Реквизиты.СуммаДокумента;
	
	ВыплатаДивидендов = Параметры.ВыплатаДивидендов;
	
	СформироватьПроводкиПоВыплатеДивидендов(ВыплатаДивидендов, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыплатыДивидендов(ТаблицаВыплатаДивидендов, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "СуммаДокумента,"            // <Число,15,2> - сумма выплаты в валюте документа
	+ "Организация";               // <СправочникСсылка.Организации>
	
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ВыплатаДивидендов
	
	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                 // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "Контрагент,"                    // <СправочникСсылка.ФизическиеЛица>, <СправочникСсылка.Контрагенты> - получатель дивидендов
	+ "СуммаКВыплате,"                 // <Число,15,2> - сумма выплаты в валюте документа
	+ "БанковскийСчет,"                // <СправочникСсылка.БанковскиеСчета>
	+ "СтатьяДвиженияДенежныхСредств," // <СправочникСсылка.СтатьиДвиженияДенежныхСредств>
	+ "СчетУчета,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета денежных средств
	+ "НачислениеДивидендов";          // <ДокументСсылка.НачислениеДивидендов>
	
	Параметры.Вставить("ВыплатаДивидендов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыплатаДивидендов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиПоВыплатеДивидендов(ТаблицаВыплаты, Реквизиты, Движения, Отказ)
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	СчетРасчетовПоДивидендам = ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов;
	
	Для Каждого СтрокаТаблицы Из ТаблицаВыплаты Цикл
		
		Если СтрокаТаблицы.СуммаКВыплате = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСодержания = НСтр("ru = 'Выплата дивидендов'");
		Если ЗначениеЗаполнено(СтрокаТаблицы.НачислениеДивидендов) Тогда
			ПараметрыРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.НачислениеДивидендов, "РасчетныйПериод");
			ПериодНачисленияСтрокой = ПредставлениеПериода(НачалоГода(ПараметрыРасчета.РасчетныйПериод),
										КонецКвартала(ПараметрыРасчета.РасчетныйПериод),
										"ФП = Истина");
			ТекстСодержания = СтрШаблон(НСтр("ru = '%1 за %2'"), ТекстСодержания, ПериодНачисленияСтрокой);
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = ТекстСодержания;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаКВыплате;
		
		Проводка.СчетДт = СчетРасчетовПоДивидендам;
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Учредители", СтрокаТаблицы.Контрагент);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтрокаТаблицы.СтатьяДвиженияДенежныхСредств);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчет) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", СтрокаТаблицы.БанковскийСчет);
		КонецЕсли;
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаКВыплате;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаКВыплате;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

Процедура ЗаменитьСчетУчетаРасчетовСУчредителями() Экспорт
	
	// Замена счетов и аналитики в проводках
	
	СоответствияСчетов = Новый Соответствие;
	СоответствияСчетов.Вставить(ПланыСчетов.Хозрасчетный.УдалитьРасчетыСУчредителями,
		ПланыСчетов.Хозрасчетный.РасчетыСУчредителями);
	СоответствияСчетов.Вставить(ПланыСчетов.Хозрасчетный.УдалитьРасчетыПоВкладамВУставныйКапитал,
		ПланыСчетов.Хозрасчетный.РасчетыПоВкладамВУставныйКапитал);
	СоответствияСчетов.Вставить(ПланыСчетов.Хозрасчетный.УдалитьРасчетыПоВыплатеДоходов,
		ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов);
	СоответствияСчетов.Вставить(ПланыСчетов.Хозрасчетный.УдалитьУставныйКапитал,
		ПланыСчетов.Хозрасчетный.УставныйКапитал);
	СоответствияСчетов.Вставить(ПланыСчетов.Хозрасчетный.УдалитьУставныйКапитал_ОбыкновенныеАкции,
		ПланыСчетов.Хозрасчетный.УставныйКапитал_ОбыкновенныеАкции);
	СоответствияСчетов.Вставить(ПланыСчетов.Хозрасчетный.УдалитьУставныйКапитал_ПривилегированныеАкции,
		ПланыСчетов.Хозрасчетный.УставныйКапитал_ПривилегированныеАкции);
	СоответствияСчетов.Вставить(ПланыСчетов.Хозрасчетный.УдалитьУставныйКапитал_ПрочийКапитал,
		ПланыСчетов.Хозрасчетный.УставныйКапитал_ПрочийКапитал);
	СоответствияСчетов.Вставить(ПланыСчетов.Хозрасчетный.УдалитьСобственныеАкции,
		ПланыСчетов.Хозрасчетный.СобственныеАкции);
	СоответствияСчетов.Вставить(ПланыСчетов.Хозрасчетный.УдалитьСобственныеАкции_ПривилегированныеАкции,
		ПланыСчетов.Хозрасчетный.СобственныеАкции_ПривилегированныеАкции);
	СоответствияСчетов.Вставить(ПланыСчетов.Хозрасчетный.УдалитьСобственныеАкции_ПрочийКапитал,
		ПланыСчетов.Хозрасчетный.СобственныеАкции_ПрочийКапитал);
	СоответствияСчетов.Вставить(ПланыСчетов.Хозрасчетный.УдалитьСобственныеАкции_ОбыкновенныеАкции,
		ПланыСчетов.Хозрасчетный.СобственныеАкции_ОбыкновенныеАкции);
		
	МассивСчетов = Новый Массив;
	Для Каждого СчетУчета ИЗ СоответствияСчетов Цикл
		МассивСчетов.Добавить(СчетУчета.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.СчетДт В (&МассивСчетов)
	|				И НЕ Хозрасчетный.СчетДт.ЗапретитьИспользоватьВПроводках
	|			ИЛИ Хозрасчетный.СчетКт В (&МассивСчетов)
	|				И НЕ Хозрасчетный.СчетКт.ЗапретитьИспользоватьВПроводках)
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СубконтоУчредители   = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители;
	СубконтоЦенныеБумаги = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги;
	
	ТаблицаРегистраторов = Новый ТаблицаЗначений;
	ТаблицаРегистраторов.Колонки.Добавить("Тип");
	ТаблицаРегистраторов.Колонки.Добавить("Реквизиты");
	ТаблицаРегистраторов.Колонки.Добавить("ТабличныеЧасти");
	
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ТипДокумента = ТипЗнч(Выборка.Ссылка);
			ОписаниеРегистратора = ТаблицаРегистраторов.Найти(ТипДокумента, "Тип");
			Если ОписаниеРегистратора = Неопределено Тогда
				ОписаниеРегистратора = ТаблицаРегистраторов.Добавить();
				ОписаниеРегистратора.Тип            = ТипДокумента;
				
				СтруктураРеквизиты      = Новый Структура;
				СтруктураТабличныеЧасти = Новый Структура;
				
				Для Каждого Реквизит ИЗ ДокументОбъект.Метаданные().Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(Тип("ПланСчетовСсылка.Хозрасчетный")) Тогда
						СтруктураРеквизиты.Вставить(Реквизит.Имя, Реквизит.Имя);
					КонецЕсли;
				КонецЦикла;
				Для Каждого ТабличнаяЧасть ИЗ ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
					МассивРеквизитов = Новый Массив;
					Для Каждого Реквизит ИЗ ТабличнаяЧасть.Реквизиты Цикл
						Если Реквизит.Тип.СодержитТип(Тип("ПланСчетовСсылка.Хозрасчетный")) Тогда
							МассивРеквизитов.Добавить(Реквизит.Имя);
						КонецЕсли;
					КонецЦикла;
					СтруктураТабличныеЧасти.Вставить(ТабличнаяЧасть.Имя, МассивРеквизитов);
				КонецЦикла;
				
				ОписаниеРегистратора.Реквизиты      = СтруктураРеквизиты;
				ОписаниеРегистратора.ТабличныеЧасти = СтруктураТабличныеЧасти;
				
			КонецЕсли;
			
			НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			НаборЗаписейХозрасчетный.Отбор.Регистратор.Значение = Выборка.Ссылка;
			НаборЗаписейХозрасчетный.Прочитать();
			
			Для Каждого Проводка ИЗ НаборЗаписейХозрасчетный Цикл
				
				НовыйСчетДт = СоответствияСчетов.Получить(Проводка.СчетДт);
				Если ЗначениеЗаполнено(НовыйСчетДт) Тогда
					Учредитель   = Проводка.СубконтоДт.Контрагенты;
					ЦенныеБумаги = Проводка.СубконтоДт.ЦенныеБумаги;
					Проводка.СчетДт = НовыйСчетДт;
					Проводка.СубконтоДт.Очистить();
					Проводка.СубконтоДт.Вставить(СубконтоУчредители, Учредитель);
					Если ЦенныеБумаги <> Неопределено Тогда
						Проводка.СубконтоДт.Вставить(СубконтоЦенныеБумаги, ЦенныеБумаги);
					КонецЕсли;
				КонецЕсли;
				
				НовыйСчетКт = СоответствияСчетов.Получить(Проводка.СчетКт);
				Если ЗначениеЗаполнено(НовыйСчетКт) Тогда
					Учредитель   = Проводка.СубконтоКт.Контрагенты;
					ЦенныеБумаги = Проводка.СубконтоКт.ЦенныеБумаги;
					Проводка.СчетКт = НовыйСчетКт;
					Проводка.СубконтоКт.Очистить();
					Проводка.СубконтоКт.Вставить(СубконтоУчредители, Учредитель);
					Если ЦенныеБумаги <> Неопределено Тогда
						Проводка.СубконтоКт.Вставить(СубконтоЦенныеБумаги, ЦенныеБумаги);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписейХозрасчетный.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейХозрасчетный, , , Истина);
			
			Для Каждого ИмяРеквизита ИЗ ОписаниеРегистратора.Реквизиты Цикл
				НовыйСчет = СоответствияСчетов.Получить(ДокументОбъект[ИмяРеквизита.Значение]);
				Если НовыйСчет <> Неопределено Тогда
					ДокументОбъект[ИмяРеквизита.Значение] = НовыйСчет;
				КонецЕсли;
			КонецЦикла;
			Для Каждого ИмяТабличнойЧасти ИЗ ОписаниеРегистратора.ТабличныеЧасти Цикл
				Для Каждого ИмяРеквизита ИЗ ИмяТабличнойЧасти.Значение Цикл
					Для Каждого СтрокаДокумента ИЗ ДокументОбъект[ИмяТабличнойЧасти.Ключ] Цикл
						НовыйСчет = СоответствияСчетов.Получить(СтрокаДокумента[ИмяРеквизита]);
						Если НовыйСчет <> Неопределено Тогда
							СтрокаДокумента[ИмяРеквизита] = НовыйСчет;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать данные документа
				|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				Выборка.Ссылка,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПеренестиОстаткиРасчетовСУчредителями() Экспорт
	
	// Замена счетов и аналитики в проводках
	
	ДатаОстатков = ТекущаяДатаСеанса();
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал_ОбыкновенныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал_ПривилегированныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции_ПривилегированныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции_ОбыкновенныеАкции);
	
	МассивСчетовУчредители = Новый Массив;
	МассивСчетовУчредители.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСУчредителями);
	МассивСчетовУчредители.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВкладамВУставныйКапитал);
	МассивСчетовУчредители.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов);
	МассивСчетовУчредители.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал_ПрочийКапитал);
	МассивСчетовУчредители.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции_ПрочийКапитал);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	
	ВидыСубконтоУчредители = Новый Массив;
	ВидыСубконтоУчредители.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов",           МассивСчетов);
	Запрос.УстановитьПараметр("МассивСчетовУчредители", МассивСчетовУчредители);
	Запрос.УстановитьПараметр("ДатаОстатков",           КонецДня(ДатаОстатков)+1);
	Запрос.УстановитьПараметр("Субконто",               ВидыСубконто);
	Запрос.УстановитьПараметр("СубконтоУчредители",     ВидыСубконтоУчредители);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ЦенныеБумаги) КАК ЦенныеБумаги,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СуммаОстатокДт,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СуммаОстатокКт,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт) КАК КоличествоОстатокДт,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокКт) КАК КоличествоОстатокКт
	|ПОМЕСТИТЬ ВТ_Учредители
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В (&МассивСчетов)
	|				И НЕ Счет.ЗапретитьИспользоватьВПроводках,
	|			&Субконто,
	|			ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты).ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ХозрасчетныйОстатки.Субконто1 = Контрагенты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.Счет,
	|	Контрагенты.ИНН,
	|	Контрагенты.Наименование,
	|	Контрагенты.НаименованиеПолное,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты),
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ЦенныеБумаги)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты),
	|	ЗНАЧЕНИЕ(Справочник.ЦенныеБумаги.ПустаяСсылка),
	|	Контрагенты.ИНН,
	|	Контрагенты.Наименование,
	|	Контрагенты.НаименованиеПолное,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт),
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт),
	|	СУММА(0),
	|	СУММА(0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В (&МассивСчетовУчредители)
	|				И НЕ Счет.ЗапретитьИспользоватьВПроводках,
	|			&СубконтоУчредители,
	|			ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты).ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ХозрасчетныйОстатки.Субконто1 = Контрагенты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	Контрагенты.ИНН,
	|	Контрагенты.Наименование,
	|	Контрагенты.НаименованиеПолное,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Учредители.Контрагент КАК Контрагент,
	|	ВТ_Учредители.ИНН КАК ИНН,
	|	ВТ_Учредители.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА НЕ ФизическиеЛицаИНН.Ссылка ЕСТЬ NULL
	|			ТОГДА ФизическиеЛицаИНН.Ссылка
	|		КОГДА НЕ ФизическиеЛицаНаименование.Ссылка ЕСТЬ NULL
	|			ТОГДА ФизическиеЛицаНаименование.Ссылка
	|		КОГДА НЕ ФизическиеЛицаПолноеНаименование.Ссылка ЕСТЬ NULL
	|			ТОГДА ФизическиеЛицаПолноеНаименование.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	КОНЕЦ КАК ФизическоеЛицо
	|ИЗ
	|	ВТ_Учредители КАК ВТ_Учредители
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛицаИНН
	|		ПО (ВТ_Учредители.ИНН <> """")
	|			И ВТ_Учредители.ИНН = ФизическиеЛицаИНН.ИНН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛицаНаименование
	|		ПО (ВТ_Учредители.ИНН = """")
	|			И ВТ_Учредители.Наименование = ФизическиеЛицаНаименование.ФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛицаПолноеНаименование
	|		ПО (ВТ_Учредители.ИНН = """")
	|			И ВТ_Учредители.НаименованиеПолное = ФизическиеЛицаПолноеНаименование.ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Учредители.Организация КАК Организация,
	|	ВТ_Учредители.Счет КАК Счет,
	|	ВТ_Учредители.Контрагент КАК Контрагент,
	|	ВТ_Учредители.ЦенныеБумаги КАК ЦенныеБумаги,
	|	ВТ_Учредители.Наименование КАК Наименование,
	|	ВТ_Учредители.ИНН КАК ИНН,
	|	СУММА(ВТ_Учредители.СуммаОстатокДт) КАК СуммаОстатокДт,
	|	СУММА(ВТ_Учредители.СуммаОстатокКт) КАК СуммаОстатокКт,
	|	СУММА(ВТ_Учредители.КоличествоОстатокДт) КАК КоличествоОстатокДт,
	|	СУММА(ВТ_Учредители.КоличествоОстатокКт) КАК КоличествоОстатокКт
	|ИЗ
	|	ВТ_Учредители КАК ВТ_Учредители
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Учредители.Организация,
	|	ВТ_Учредители.Счет,
	|	ВТ_Учредители.Контрагент,
	|	ВТ_Учредители.ЦенныеБумаги,
	|	ВТ_Учредители.Наименование,
	|	ВТ_Учредители.ИНН
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Учредители.СуммаОстатокДт) <> 0
	|	ИЛИ СУММА(ВТ_Учредители.СуммаОстатокКт) <> 0
	|	ИЛИ СУММА(ВТ_Учредители.КоличествоОстатокДт) <> 0
	|	ИЛИ СУММА(ВТ_Учредители.КоличествоОстатокКт) <> 0
	|ИТОГИ ПО
	|	Организация";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаКонтрагентовСотрудников = РезультатЗапроса[1].Выгрузить();
	ТаблицаОстатков                = РезультатЗапроса[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаКонтрагентов = ТаблицаКонтрагентовСотрудников.СкопироватьКолонки();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаКонтрагентовСотрудников Цикл
		
		Если ТаблицаКонтрагентов.Найти(СтрокаТаблицы.Контрагент, "Контрагент") = Неопределено Тогда
			
			НоваяСтрока = ТаблицаКонтрагентов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ФизическоеЛицо) Тогда
				НоваяСтрока.ФизическоеЛицо = УчетЗарплаты.СоздатьФизическоеЛицо(НоваяСтрока.Наименование, НоваяСтрока.ИНН);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	Для Каждого СтрокаОрганизации ИЗ ТаблицаОстатков.Строки Цикл
		
		ДокументОбъект = Документы.ОперацияБух.СоздатьДокумент();
		ДокументОбъект.Дата        = КонецДня(ДатаОстатков);
		ДокументОбъект.Организация = СтрокаОрганизации.Организация;
		ДокументОбъект.УстановитьНовыйНомер();
		ДокументОбъект.Комментарий = НСтр("ru = '## Обработка обновления: перенос остатков расчетов с учредителями-физическими лицами ##'");
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
		НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписейХозрасчетный.Отбор.Регистратор.Значение = ДокументОбъект.Ссылка;
		
		Для Каждого СтрокаТаблицы ИЗ СтрокаОрганизации.Строки Цикл
			
			ДанныеФизическогоЛица = ТаблицаКонтрагентов.Найти(СтрокаТаблицы.Контрагент, "Контрагент");
			Если ДанныеФизическогоЛица = Неопределено Тогда
				УчредительФизическоеЛицо = УчетЗарплаты.СоздатьФизическоеЛицо(СтрокаТаблицы.Наименование, СтрокаТаблицы.ИНН);
			Иначе
				УчредительФизическоеЛицо = ДанныеФизическогоЛица.ФизическоеЛицо;
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаОстатокДт <> 0
				ИЛИ СтрокаТаблицы.КоличествоОстатокДт <> 0 Тогда
				ВидДвижения     = "Дт";
				ВидДвиженияКорр = "Кт";
			Иначе
				ВидДвижения     = "Кт";
				ВидДвиженияКорр = "Дт";
			КонецЕсли;
			
			// Сторно исходной суммы
			Проводка = НаборЗаписейХозрасчетный.Добавить();
			Проводка.Период                = ДатаОстатков;
			Проводка.Организация           = СтрокаТаблицы.Организация;
			Проводка.Сумма                 = - СтрокаТаблицы["СуммаОстаток" + ВидДвижения];
			Проводка["Счет" + ВидДвижения] = СтрокаТаблицы.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ВидДвижения], Проводка["Субконто" + ВидДвижения], "Учредители", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ВидДвижения], Проводка["Субконто" + ВидДвижения], "ЦенныеБумаги", СтрокаТаблицы.ЦенныеБумаги);
			Если ЗначениеЗаполнено(СтрокаТаблицы["КоличествоОстаток" + ВидДвижения]) Тогда
				Проводка["Количество" + ВидДвижения] = - СтрокаТаблицы["КоличествоОстаток" + ВидДвижения];
			КонецЕсли;
			Проводка["Счет" + ВидДвиженияКорр] = ВспомогательныйСчет;
			Проводка.Содержание = НСтр("ru = 'Списан остаток расчетов с контрагентом (физическое лицо)'");
			
			// Перерегистрация суммы
			Проводка = НаборЗаписейХозрасчетный.Добавить();
			Проводка.Период                = ДатаОстатков;
			Проводка.Организация           = СтрокаТаблицы.Организация;
			Проводка.Сумма                 = СтрокаТаблицы["СуммаОстаток" + ВидДвижения];
			Проводка["Счет" + ВидДвижения] = СтрокаТаблицы.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ВидДвижения], Проводка["Субконто" + ВидДвижения], "Учредители", УчредительФизическоеЛицо);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ВидДвижения], Проводка["Субконто" + ВидДвижения], "ЦенныеБумаги", СтрокаТаблицы.ЦенныеБумаги);
			Если ЗначениеЗаполнено(СтрокаТаблицы["КоличествоОстаток" + ВидДвижения]) Тогда
				Проводка["Количество" + ВидДвижения] = СтрокаТаблицы["КоличествоОстаток" + ВидДвижения];
			КонецЕсли;
			Проводка["Счет" + ВидДвиженияКорр] = ВспомогательныйСчет;
			Проводка.Содержание = НСтр("ru = 'Зарегистрирован остаток расчетов с учредителем (физическое лицо)'");
			
		КонецЦикла;
		
		НаборЗаписейХозрасчетный.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейХозрасчетный, , , Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьАналитикуСчетовУчетаКапитала() Экспорт
		
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал_ОбыкновенныеАкции);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал_ПривилегированныеАкции);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции_ПривилегированныеАкции);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции_ОбыкновенныеАкции);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов",      СписокСчетов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Регистратор КАК Документ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Хозрасчетный.Период = ХозрасчетныйСубконто.Период
	|			И Хозрасчетный.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги))
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|ГДЕ
	|	Хозрасчетный.СчетДт В(&СписокСчетов)
	|	И (ХозрасчетныйСубконто.Значение ЕСТЬ NULL
	|			ИЛИ ХозрасчетныйСубконто.Значение = НЕОПРЕДЕЛЕНО)
	|	И Хозрасчетный.Активность
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Хозрасчетный.Период = ХозрасчетныйСубконто.Период
	|			И Хозрасчетный.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги))
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|ГДЕ
	|	Хозрасчетный.СчетКт В(&СписокСчетов)
	|	И (ХозрасчетныйСубконто.Значение ЕСТЬ NULL
	|			ИЛИ ХозрасчетныйСубконто.Значение = НЕОПРЕДЕЛЕНО)
	|	И Хозрасчетный.Активность";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		РегистрыБухгалтерии.Хозрасчетный.УстановитьИспользованиеИтогов(Ложь);
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			НаборЗаписейХозрасчетный.Отбор.Регистратор.Установить(Выборка.Документ);
			НаборЗаписейХозрасчетный.Прочитать();
			НаборЗаписейХозрасчетный.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписейХозрасчетный.Записать();
			
		КонецЦикла;
		
		РегистрыБухгалтерии.Хозрасчетный.УстановитьИспользованиеИтогов(Истина);
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		РегистрыБухгалтерии.Хозрасчетный.УстановитьИспользованиеИтогов(Истина);
		
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать данные документа
			|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			Выборка.Документ,
			ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОтчетности

Процедура ОписаниеПоказателей_РасчетПоНалогуНаПрибыль_2016Кв4(ПоказателиОтчета) Экспорт
	
	// Раздела 1.3
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130003003", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130004001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130004003", Истина, Ложь);
	
	// Раздел А
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310009103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310009203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310012003", Истина, Ложь);
	
	// Раздел В
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000330000503", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000330000504", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000330000505", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000330001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000330004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000330005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000330006003", Истина, Ложь);
	
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РасчетПоНалогуНаПрибыль_2016Кв4(ПараметрыОтчета, Контейнер) Экспорт
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	График = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	
	// очищаем разделы и готовим шаблон
	
	// Лист 03 А
	Показатели = Контейнер.Лист03А[0].Данные[0].Значение;
	МассивИменДопСтрокЛиста03А = Новый Массив;
	ШаблонДанныеЛиста03А = Новый Структура;
	Для Каждого КлючИЗначение Из Показатели Цикл
		НомерСимволаДопСтрок = СтрНайти(КлючИЗначение.Ключ, "_");
		Если НомерСимволаДопСтрок <> 0 Тогда
			Если Число(Прав(КлючИЗначение.Ключ, СтрДлина(КлючИЗначение.Ключ) - НомерСимволаДопСтрок)) > 1 Тогда
				Продолжить;
			Иначе
				МассивИменДопСтрокЛиста03А.Добавить(Лев(КлючИЗначение.Ключ, НомерСимволаДопСтрок-1));
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(Показатели[КлючИЗначение.Ключ]) = Тип("Число") Тогда
			ШаблонДанныеЛиста03А.Вставить(КлючИЗначение.Ключ, 0);
		ИначеЕсли ТипЗнч(Показатели[КлючИЗначение.Ключ]) = Тип("Дата") Тогда
			ШаблонДанныеЛиста03А.Вставить(КлючИЗначение.Ключ, Дата(1,1,1));
		Иначе
			ШаблонДанныеЛиста03А.Вставить(КлючИЗначение.Ключ, "");
		КонецЕсли;
	КонецЦикла;
	
	Представление = Контейнер.Лист03А[0].Представление;
	ПозицияНомера = СтрНайти(Представление, "N");
	ШаблонПредставленияЛиста03А = Лев(Представление, ПозицияНомера + 1);
	ШаблонПредставленияДопСтрокЛиста03А = Контейнер.Лист03А[0].ДанныеДопСтрок[0].Представление;
	
	Контейнер.Лист03А[0].ДанныеДопСтрок[0].Значение.Очистить();
	
	ДанныеДопСтрокЛиста03А = Контейнер.Лист03А_ДанныеДопСтрок;
	ДанныеДопСтрокЛиста03А.Очистить();
	
	Контейнер.Лист03А.Очистить();
	
	// Раздел 1.3
	Показатели = Контейнер.Раздел1_3[0].Данные[0].Значение;
	МассивИменДопСтрокРаздела1_3 = Новый Массив;
	ШаблонДанныеРаздела1_3 = Новый Структура;
	Для Каждого КлючИЗначение Из Показатели Цикл
		НомерСимволаДопСтрок = СтрНайти(КлючИЗначение.Ключ, "_");
		Если НомерСимволаДопСтрок <> 0 Тогда
			Если Число(Прав(КлючИЗначение.Ключ, СтрДлина(КлючИЗначение.Ключ) - НомерСимволаДопСтрок)) > 1 Тогда
				Продолжить;
			Иначе
				МассивИменДопСтрокРаздела1_3.Добавить(Лев(КлючИЗначение.Ключ, НомерСимволаДопСтрок-1));
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(Показатели[КлючИЗначение.Ключ]) = Тип("Число") Тогда
			ШаблонДанныеРаздела1_3.Вставить(КлючИЗначение.Ключ, 0);
		ИначеЕсли ТипЗнч(Показатели[КлючИЗначение.Ключ]) = Тип("Дата") Тогда
			ШаблонДанныеРаздела1_3.Вставить(КлючИЗначение.Ключ, Дата(1,1,1));
		Иначе
			ШаблонДанныеРаздела1_3.Вставить(КлючИЗначение.Ключ, "");
		КонецЕсли;
	КонецЦикла;
	
	Представление = Контейнер.Раздел1_3[0].Представление;
	ПозицияНомера = СтрНайти(Представление, "N");
	ШаблонПредставленияРаздела1_3 = Лев(Представление, ПозицияНомера + 1);
	ШаблонПредставленияДопСтрокРаздела1_3 = Контейнер.Раздел1_3[0].ДанныеДопСтрок[0].Представление;
	
	Контейнер.Раздел1_3[0].ДанныеДопСтрок[0].Значение.Очистить();
	
	ДанныеДопСтрокРаздела1_3 = Контейнер.Раздел1_3_ДанныеДопСтрок;
	ДанныеДопСтрокРаздела1_3.Очистить();
	НоваяСтрокаРаздела1_3       = ДанныеДопСтрокРаздела1_3.Добавить();
	НоваяСтрокаДанныхРаздела1_3 = НоваяСтрокаРаздела1_3.Таблица.Добавить();
	ТаблицаДопСтрокРаздела1_3   = НоваяСтрокаРаздела1_3.Таблица.Выгрузить();
	ТаблицаДопСтрокРаздела1_3.Очистить();
	
	Контейнер.Раздел1_3.Очистить();
	
	Контейнер.Раздел1_3_ТекДанныеДопСтрок.Очистить();
	Если Контейнер.Раздел1_3_ТекДанныеДопСтрок.Количество() = 0 Тогда
		Контейнер.Раздел1_3_ТекДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	// очистили и оставили только шаблон
	
	// заполняем данными
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.ДатаНачалаРасширенногоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	Если ПараметрыОтчета.Периодичность = Перечисления.Периодичность.Квартал Тогда
		НачалоТекущегоПериода = НачалоКвартала(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	Иначе
		НачалоТекущегоПериода = НачалоМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	Запрос.УстановитьПараметр("НачалоТекущегоПериода", НачалоТекущегоПериода);
	
	НомерКорректировки = СокрЛП(ПараметрыОтчета.НомерКорректировки);
	Тип = ?(СтрДлина(НомерКорректировки) < 2, "0" + НомерКорректировки, НомерКорректировки);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Тип",         Тип);
	
	// Но сначало проверим, надо ли вообще заполнять
	// Если в составе учредителей только физ.лица - то не заполняем
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСУчредителями);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВкладамВУставныйКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал_ОбыкновенныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал_ПривилегированныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал_ПрочийКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции_ПривилегированныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции_ПрочийКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции_ОбыкновенныеАкции);
	
	Запрос.УстановитьПараметр("СчетаРасчетовСУчредителями", МассивСчетов);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаРасчетовСУчредителями), &ВидСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты).ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОбороты.Субконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В (&СчетаРасчетовСУчредителями), &ВидСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты).ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)";
	
	Если Запрос.Выполнить().Пустой() Тогда
		НовыйЛист = Контейнер.Раздел1_3.Добавить();
		НовыйЛист.АвтоматическоеПредставление = Истина;
		НовыйЛист.Представление               = ШаблонПредставленияРаздела1_3 + 1;
		НовыйЛист.АктивнаяСтраница            = Истина;
		НовыйЛист.Данные                      = Новый СписокЗначений();

		// первая и единственная страница - шаблон
		НовыйЛист = Контейнер.Лист03А.Добавить();
		НовыйЛист.Данные                      = Новый СписокЗначений;
		НовыйЛист.Данные.Добавить(ШаблонДанныеЛиста03А);
		// первая и единственная строка - шаблон
		НоваяТаблицаДопСтрок = ДанныеДопСтрокЛиста03А.Добавить();
		НоваяТаблицаДопСтрок.Таблица.Добавить();
		СписокДопСтрокЛиста03А = Новый СписокЗначений;
		СписокДопСтрокЛиста03А.Добавить(НоваяТаблицаДопСтрок.Таблица, ШаблонПредставленияДопСтрокЛиста03А);
		НовыйЛист.ДанныеДопСтрок              = СписокДопСтрокЛиста03А;
		НовыйЛист.АвтоматическоеПредставление = Истина;
		Возврат; // нет причин заполнять
	КонецЕсли;
	
	// В составе учредителей есть юридические лица
	
	// Сначала проверяем наличие выпла в отчетном периоде
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасходныйКассовыйОрдер.Проведен
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаДивидендов)
	|	И РасходныйКассовыйОрдер.НачислениеДивидендов <> ЗНАЧЕНИЕ(Документ.НачислениеДивидендов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеСРасчетногоСчета.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СписаниеСРасчетногоСчета.Проведен
	|	И СписаниеСРасчетногоСчета.Организация = &Организация
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов)
	|	И СписаниеСРасчетногоСчета.НачислениеДивидендов <> ЗНАЧЕНИЕ(Документ.НачислениеДивидендов.ПустаяСсылка)";
	
	Если Запрос.Выполнить().Пустой() Тогда
		НовыйЛист = Контейнер.Раздел1_3.Добавить();
		НовыйЛист.АвтоматическоеПредставление = Истина;
		НовыйЛист.Представление               = ШаблонПредставленияРаздела1_3 + 1;
		НовыйЛист.АктивнаяСтраница            = Истина;
		НовыйЛист.Данные                      = Новый СписокЗначений();

		// первая и единственная страница - шаблон
		НовыйЛист = Контейнер.Лист03А.Добавить();
		НовыйЛист.Данные                      = Новый СписокЗначений;
		НовыйЛист.Данные.Добавить(ШаблонДанныеЛиста03А);
		// первая и единственная строка - шаблон
		НоваяТаблицаДопСтрок = ДанныеДопСтрокЛиста03А.Добавить();
		НоваяТаблицаДопСтрок.Таблица.Добавить();
		СписокДопСтрокЛиста03А = Новый СписокЗначений;
		СписокДопСтрокЛиста03А.Добавить(НоваяТаблицаДопСтрок.Таблица, ШаблонПредставленияДопСтрокЛиста03А);
		НовыйЛист.ДанныеДопСтрок              = СписокДопСтрокЛиста03А;
		НовыйЛист.АвтоматическоеПредставление = Истина;
		Возврат; // нет причин заполнять
	КонецЕсли;
	
	// Дивиденды выплачивались - заполняем отчет
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.НачислениеДивидендов КАК НачислениеДивидендов,
	|	СУММА(РасходныйКассовыйОрдер.СуммаДокумента) КАК СуммаДокумента,
	|	РасходныйКассовыйОрдер.Контрагент КАК Контрагент,
	|	РасходныйКассовыйОрдер.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_Выплата
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасходныйКассовыйОрдер.Проведен
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаДивидендов)
	|	И РасходныйКассовыйОрдер.НачислениеДивидендов <> ЗНАЧЕНИЕ(Документ.НачислениеДивидендов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдер.НачислениеДивидендов,
	|	РасходныйКассовыйОрдер.Контрагент,
	|	РасходныйКассовыйОрдер.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.НачислениеДивидендов,
	|	СУММА(СписаниеСРасчетногоСчета.СуммаДокумента),
	|	СписаниеСРасчетногоСчета.Контрагент,
	|	СписаниеСРасчетногоСчета.Дата
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СписаниеСРасчетногоСчета.Проведен
	|	И СписаниеСРасчетногоСчета.Организация = &Организация
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов)
	|	И СписаниеСРасчетногоСчета.НачислениеДивидендов <> ЗНАЧЕНИЕ(Документ.НачислениеДивидендов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчета.НачислениеДивидендов,
	|	СписаниеСРасчетногоСчета.Контрагент,
	|	СписаниеСРасчетногоСчета.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ДокНачислениеДивидендов.РасчетныйПериод, КВАРТАЛ) = КОНЕЦПЕРИОДА(ДокНачислениеДивидендов.РасчетныйПериод, ГОД)
	|			ТОГДА ""2""
	|		ИНАЧЕ ""1""
	|	КОНЕЦ КАК Вид,
	|	ГОД(ДокНачислениеДивидендов.РасчетныйПериод) КАК Год,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(ДокНачислениеДивидендов.РасчетныйПериод) <= 3
	|			ТОГДА ""21""
	|		КОГДА МЕСЯЦ(ДокНачислениеДивидендов.РасчетныйПериод) <= 6
	|			ТОГДА ""31""
	|		КОГДА МЕСЯЦ(ДокНачислениеДивидендов.РасчетныйПериод) <= 9
	|			ТОГДА ""33""
	|		ИНАЧЕ ""34""
	|	КОНЕЦ КАК Квартал,
	|	ВТ_Выплата.Контрагент КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	ВТ_Выплата.Дата КАК Дата,
	|	СУММА(ВТ_Выплата.СуммаДокумента) КАК СуммаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА ДокНачислениеДивидендов.СуммаДохода - ДокНачислениеДивидендов.СуммаНалога <= ВТ_Выплата.СуммаДокумента
	|					ИЛИ ДокНачислениеДивидендов.СуммаДохода = 0
	|					ИЛИ ВТ_Выплата.СуммаДокумента = 0
	|				ТОГДА ДокНачислениеДивидендов.СуммаНалога
	|			ИНАЧЕ ВЫРАЗИТЬ(ВТ_Выплата.СуммаДокумента / (ДокНачислениеДивидендов.СуммаДохода - ДокНачислениеДивидендов.СуммаНалога) * ДокНачислениеДивидендов.СуммаНалога КАК ЧИСЛО(12, 0))
	|		КОНЕЦ) КАК СуммаНалога,
	|	ДокНачислениеДивидендов.РасчетныйПериод КАК РасчетныйПериод
	|ПОМЕСТИТЬ ВТ_ОплаченныеДокументы
	|ИЗ
	|	ВТ_Выплата КАК ВТ_Выплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеДивидендов КАК ДокНачислениеДивидендов
	|		ПО ВТ_Выплата.НачислениеДивидендов = ДокНачислениеДивидендов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТ_Выплата.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	ДокНачислениеДивидендов.Организация = &Организация
	|	И ДокНачислениеДивидендов.ТипУчредителя = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.НаименованиеПолное,
	|	ВТ_Выплата.Дата,
	|	ГОД(ДокНачислениеДивидендов.РасчетныйПериод),
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(ДокНачислениеДивидендов.РасчетныйПериод) <= 3
	|			ТОГДА ""21""
	|		КОГДА МЕСЯЦ(ДокНачислениеДивидендов.РасчетныйПериод) <= 6
	|			ТОГДА ""31""
	|		КОГДА МЕСЯЦ(ДокНачислениеДивидендов.РасчетныйПериод) <= 9
	|			ТОГДА ""33""
	|		ИНАЧЕ ""34""
	|	КОНЕЦ,
	|	ДокНачислениеДивидендов.РасчетныйПериод,
	|	ВТ_Выплата.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(НачислениеДивидендов.РасчетныйПериод, КВАРТАЛ) = КОНЕЦПЕРИОДА(НачислениеДивидендов.РасчетныйПериод, ГОД)
	|			ТОГДА ""2""
	|		ИНАЧЕ ""1""
	|	КОНЕЦ КАК Вид,
	|	ГОД(НачислениеДивидендов.РасчетныйПериод) КАК Год,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(НачислениеДивидендов.РасчетныйПериод) <= 3
	|			ТОГДА ""21""
	|		КОГДА МЕСЯЦ(НачислениеДивидендов.РасчетныйПериод) <= 6
	|			ТОГДА ""31""
	|		КОГДА МЕСЯЦ(НачислениеДивидендов.РасчетныйПериод) <= 9
	|			ТОГДА ""33""
	|		ИНАЧЕ ""34""
	|	КОНЕЦ КАК Квартал,
	|	СУММА(НачислениеДивидендов.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеДивидендов.ТипУчредителя = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|					И НачислениеДивидендов.СуммаНалога > 0
	|				ТОГДА НачислениеДивидендов.СуммаДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДохода_ЮЛ_13,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеДивидендов.ТипУчредителя = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|					И НачислениеДивидендов.СуммаНалога = 0
	|				ТОГДА НачислениеДивидендов.СуммаДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДохода_ЮЛ_0,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеДивидендов.ТипУчредителя = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|				ТОГДА НачислениеДивидендов.СуммаДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДохода_ФЛ,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеДивидендов.ТипУчредителя = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|				ТОГДА НачислениеДивидендов.СуммаНалога
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНалога_ЮЛ,
	|	НачислениеДивидендов.РасчетныйПериод КАК РасчетныйПериод,
	|	НачислениеДивидендов.Учредитель КАК Учредитель
	|ПОМЕСТИТЬ ВТ_ТекущиеНачисления
	|ИЗ
	|	Документ.НачислениеДивидендов КАК НачислениеДивидендов
	|ГДЕ
	|	НачислениеДивидендов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачислениеДивидендов.Проведен
	|	И НачислениеДивидендов.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ГОД(НачислениеДивидендов.РасчетныйПериод),
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(НачислениеДивидендов.РасчетныйПериод, КВАРТАЛ) = КОНЕЦПЕРИОДА(НачислениеДивидендов.РасчетныйПериод, ГОД)
	|			ТОГДА ""2""
	|		ИНАЧЕ ""1""
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(НачислениеДивидендов.РасчетныйПериод) <= 3
	|			ТОГДА ""21""
	|		КОГДА МЕСЯЦ(НачислениеДивидендов.РасчетныйПериод) <= 6
	|			ТОГДА ""31""
	|		КОГДА МЕСЯЦ(НачислениеДивидендов.РасчетныйПериод) <= 9
	|			ТОГДА ""33""
	|		ИНАЧЕ ""34""
	|	КОНЕЦ,
	|	НачислениеДивидендов.РасчетныйПериод,
	|	НачислениеДивидендов.Учредитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""1"" КАК Категория,
	|	ВТ_ТекущиеНачисления.Вид КАК Вид,
	|	ВТ_ТекущиеНачисления.Год КАК Год,
	|	ВТ_ТекущиеНачисления.Квартал КАК Квартал,
	|	"""" КАК ИНН,
	|	"""" КАК КПП,
	|	"""" КАК Наименование,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВыплаты,
	|	СУММА(0) КАК СуммаВыплаты,
	|	СУММА(0) КАК СуммаУдержанногоНалога,
	|	СУММА(ВТ_ТекущиеНачисления.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВТ_ТекущиеНачисления.СуммаДохода_ЮЛ_13) КАК СуммаДохода_ЮЛ_13,
	|	СУММА(ВТ_ТекущиеНачисления.СуммаДохода_ЮЛ_0) КАК СуммаДохода_ЮЛ_0,
	|	СУММА(ВТ_ТекущиеНачисления.СуммаДохода_ФЛ) КАК СуммаДохода_ФЛ,
	|	СУММА(ВТ_ТекущиеНачисления.СуммаНалога_ЮЛ) КАК СуммаИсчисленногоНалога,
	|	"""" КАК Тип
	|ПОМЕСТИТЬ ВТ_РазделыАиВ
	|ИЗ
	|	ВТ_ТекущиеНачисления КАК ВТ_ТекущиеНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТекущиеНачисления.Вид,
	|	ВТ_ТекущиеНачисления.Год,
	|	ВТ_ТекущиеНачисления.Квартал
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""1"",
	|	ВТ_ОплаченныеДокументы.Вид,
	|	ВТ_ОплаченныеДокументы.Год,
	|	ВТ_ОплаченныеДокументы.Квартал,
	|	ВТ_ОплаченныеДокументы.ИНН,
	|	ВТ_ОплаченныеДокументы.КПП,
	|	ВТ_ОплаченныеДокументы.НаименованиеПолное,
	|	ВТ_ОплаченныеДокументы.Дата,
	|	СУММА(ВТ_ОплаченныеДокументы.СуммаДокумента + ВТ_ОплаченныеДокументы.СуммаНалога),
	|	СУММА(ВТ_ОплаченныеДокументы.СуммаНалога),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	&Тип
	|ИЗ
	|	ВТ_ОплаченныеДокументы КАК ВТ_ОплаченныеДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОплаченныеДокументы.Вид,
	|	ВТ_ОплаченныеДокументы.Год,
	|	ВТ_ОплаченныеДокументы.Квартал,
	|	ВТ_ОплаченныеДокументы.ИНН,
	|	ВТ_ОплаченныеДокументы.КПП,
	|	ВТ_ОплаченныеДокументы.НаименованиеПолное,
	|	ВТ_ОплаченныеДокументы.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РазделыАиВ.Категория КАК П000310000100,
	|	ВТ_РазделыАиВ.Вид КАК П000310000300,
	|	ВТ_РазделыАиВ.Год КАК П000310000500,
	|	ВТ_РазделыАиВ.Квартал КАК П000310000400,
	|	СУММА(ВТ_РазделыАиВ.СуммаДохода) КАК П000310000103,
	|	СУММА(ВТ_РазделыАиВ.СуммаДохода_ЮЛ_13) КАК П000310002203,
	|	СУММА(ВТ_РазделыАиВ.СуммаДохода_ЮЛ_0) КАК П000310002103,
	|	СУММА(ВТ_РазделыАиВ.СуммаДохода_ФЛ) КАК П000310003003,
	|	СУММА(ВТ_РазделыАиВ.СуммаДохода_ЮЛ_13) КАК П000310009103,
	|	СУММА(ВТ_РазделыАиВ.СуммаДохода_ЮЛ_0) КАК П000310009203,
	|	СУММА(ВТ_РазделыАиВ.СуммаИсчисленногоНалога) КАК П000310010003,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_РазделыАиВ.ДатаВыплаты < &НачалоТекущегоПериода
	|				ТОГДА ВТ_РазделыАиВ.СуммаУдержанногоНалога
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310011003,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_РазделыАиВ.ДатаВыплаты МЕЖДУ &НачалоТекущегоПериода И &КонецПериода
	|				ТОГДА ВТ_РазделыАиВ.СуммаУдержанногоНалога
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310012003,
	|	ВТ_РазделыАиВ.ИНН КАК П000330000503,
	|	ВТ_РазделыАиВ.КПП КАК П000330000504,
	|	ВТ_РазделыАиВ.Наименование КАК П000330001003,
	|	ВТ_РазделыАиВ.ДатаВыплаты КАК П000330004003,
	|	СУММА(ВТ_РазделыАиВ.СуммаВыплаты) КАК П000330005003,
	|	СУММА(ВТ_РазделыАиВ.СуммаУдержанногоНалога) КАК П000330006003,
	|	ВТ_РазделыАиВ.Тип КАК П000330000505
	|ИЗ
	|	ВТ_РазделыАиВ КАК ВТ_РазделыАиВ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РазделыАиВ.Вид,
	|	ВТ_РазделыАиВ.Год,
	|	ВТ_РазделыАиВ.Квартал,
	|	ВТ_РазделыАиВ.Категория,
	|	ВТ_РазделыАиВ.ИНН,
	|	ВТ_РазделыАиВ.КПП,
	|	ВТ_РазделыАиВ.Наименование,
	|	ВТ_РазделыАиВ.ДатаВыплаты,
	|	ВТ_РазделыАиВ.Тип
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000310000100,
	|	П000310000500,
	|	П000310000400,
	|	П000310000300
	|ИТОГИ ПО
	|	П000310000100,
	|	П000310000500,
	|	П000310000400,
	|	П000310000300,
	|	П000330000503,
	|	П000330000504,
	|	П000330001003,
	|	П000330004003";
	
	
	НомерЛиста = 1;
	КатегорияНалоговогоАгента = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П000310000100");
	Пока КатегорияНалоговогоАгента.Следующий() Цикл
		
		ОтчетныйГод = КатегорияНалоговогоАгента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П000310000500");
		Пока ОтчетныйГод.Следующий() Цикл
			
			ОтчетныйКвартал = ОтчетныйГод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П000310000400");
			Пока ОтчетныйКвартал.Следующий() Цикл
				
				ВидДивидендов = ОтчетныйКвартал.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П000310000300");
				Пока ВидДивидендов.Следующий() Цикл
					
					НовыйЛист = Контейнер.Лист03А.Добавить();
					НовыйЛист.АвтоматическоеПредставление = Истина;
					НовыйЛист.Представление = ШаблонПредставленияЛиста03А + НомерЛиста;
					Если НомерЛиста = 1 Тогда
						НовыйЛист.АктивнаяСтраница = Истина;
					КонецЕсли;
					НомерЛиста = НомерЛиста + 1;
					
					НоваяТаблицаДопСтрок = ДанныеДопСтрокЛиста03А.Добавить();
					
					НовыйЛист.Данные = Новый СписокЗначений;
					СтруктураДаныхЛиста03А = Новый Структура;
					Для Каждого СтрокаШаблона ИЗ ШаблонДанныеЛиста03А Цикл
						СтруктураДаныхЛиста03А.Вставить(СтрокаШаблона.Ключ, СтрокаШаблона.Значение);
					КонецЦикла;
					
					ЗаполнитьЗначенияСвойств(СтруктураДаныхЛиста03А, ВидДивидендов); // данные
					
					Если ВидДивидендов.П000310012003 <> 0          // ставка <> 0%
						ИЛИ ВидДивидендов.П000310009203 <> 0 Тогда // ставка  = 0%
						
						ГруппировкаИНН = ВидДивидендов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П000330000503");
						
						НомерЗаписи = 1;
						
						Пока ГруппировкаИНН.Следующий() Цикл
							ГруппировкаКПП = ГруппировкаИНН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П000330000504");
							Пока ГруппировкаКПП.Следующий() Цикл
								
								Получатель = ГруппировкаКПП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П000330001003");
								Пока Получатель.Следующий() Цикл
									
									ДатаВыплаты = Получатель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П000330004003");
									Пока ДатаВыплаты.Следующий() Цикл
										
										ДетальныеДанные = ДатаВыплаты.Выбрать();
										Пока ДетальныеДанные.Следующий() Цикл
											
											ДатаУдержания = ДетальныеДанные.П000330004003;
											
											Если ЗначениеЗаполнено(ДатаУдержания)
												И ДатаУдержания >= НачалоТекущегоПериода Тогда
												
												НоваяСтрока = НоваяТаблицаДопСтрок.Таблица.Добавить();
												ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальныеДанные);
												
												Для Каждого ИмяПоказателя ИЗ МассивИменДопСтрокЛиста03А Цикл
													СтруктураДаныхЛиста03А.Вставить(ИмяПоказателя + "_" + НомерЗаписи, НоваяСтрока[ИмяПоказателя]);
												КонецЦикла;
												
												Если ВидДивидендов.П000310012003 <> 0 Тогда
													
													НоваяСтрока1_3 = ТаблицаДопСтрокРаздела1_3.Добавить();
													
													СрокУплаты = НачалоДня(ДатаУдержания + 86400);
													
													СрокиУплаты = КалендарныеГрафики.ДатыБлижайшихРабочихДней(График,
													ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СрокУплаты));
													Если СрокиУплаты <> Неопределено Тогда
														СрокУплаты = СрокиУплаты.Получить(СрокУплаты);
													КонецЕсли;
													
													НоваяСтрока1_3.П000130004001 = СрокУплаты;
													НоваяСтрока1_3.П000130004003 = НоваяСтрока.П000330006003;
													
												КонецЕсли;
												
												НомерЗаписи = НомерЗаписи + 1;
												
											КонецЕсли;
											
										КонецЦикла;
									КонецЦикла;
									
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
						
					КонецЕсли;
					
					Если НоваяТаблицаДопСтрок.Таблица.Количество() = 0 Тогда
						// первая и единственная строка - шаблон
						НоваяТаблицаДопСтрок.Таблица.Добавить();
					КонецЕсли;
					
					СписокДопСтрокЛиста03А = Новый СписокЗначений;
					СписокДопСтрокЛиста03А.Добавить(НоваяТаблицаДопСтрок.Таблица, ШаблонПредставленияДопСтрокЛиста03А);
					НовыйЛист.ДанныеДопСтрок = СписокДопСтрокЛиста03А;
					НовыйЛист.Данные.Добавить(СтруктураДаныхЛиста03А);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если Контейнер.Лист03А.Количество() = 0 Тогда
		// первая и единственная страница - шаблон
		НовыйЛист = Контейнер.Лист03А.Добавить();
		НовыйЛист.Данные                      = Новый СписокЗначений;
		НовыйЛист.Данные.Добавить(ШаблонДанныеЛиста03А);
		// первая и единственная строка - шаблон
		НоваяТаблицаДопСтрок = ДанныеДопСтрокЛиста03А.Добавить();
		НоваяТаблицаДопСтрок.Таблица.Добавить();
		СписокДопСтрокЛиста03А = Новый СписокЗначений;
		СписокДопСтрокЛиста03А.Добавить(НоваяТаблицаДопСтрок.Таблица, ШаблонПредставленияДопСтрокЛиста03А);
		НовыйЛист.ДанныеДопСтрок              = СписокДопСтрокЛиста03А;
		НовыйЛист.АвтоматическоеПредставление = Истина;
	КонецЕсли;
	
	ТаблицаДопСтрокРаздела1_3.Свернуть("П000130004001", "П000130004003");
	ТаблицаДопСтрокРаздела1_3.Сортировать("П000130004001");
	НоваяСтрокаРаздела1_3.Таблица.Загрузить(ТаблицаДопСтрокРаздела1_3);
	
	НовыйЛист = Контейнер.Раздел1_3.Добавить();
	НовыйЛист.АвтоматическоеПредставление = Истина;
	НовыйЛист.Представление               = ШаблонПредставленияРаздела1_3 + 1;
	НовыйЛист.АктивнаяСтраница            = Истина;
	НовыйЛист.Данные                      = Новый СписокЗначений();
	
	Если НоваяСтрокаРаздела1_3.Таблица.Количество() = 0 Тогда
		// первая и единственная строка - шаблон
		НоваяСтрокаРаздела1_3.Таблица.Добавить();
		
		СтруктураДаныхРаздела1_3 = Новый Структура("П000130001003, П000130002003, П000130003003");
		
	Иначе
		
		СтрокаСведений = "ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаКонцаПериодаОтчета, СтрокаСведений);
		
		СтруктураДаныхРаздела1_3 = Новый Структура("П000130001003, П000130002003, П000130003003",
		"1", СведенияОбОрганизации.ОКТМО, "18210101040011000110");
		
	КонецЕсли;
	
	НомерЗаписи = 1;
	Для Каждого СтрокаТаблицы ИЗ НоваяСтрокаРаздела1_3.Таблица Цикл
		Для Каждого ИмяПоказателя ИЗ МассивИменДопСтрокРаздела1_3 Цикл
			СтруктураДаныхРаздела1_3.Вставить(ИмяПоказателя + "_" + НомерЗаписи, СтрокаТаблицы[ИмяПоказателя]);
		КонецЦикла;
		НомерЗаписи = НомерЗаписи + 1;
	КонецЦикла;
	НовыйЛист.Данные.Добавить(СтруктураДаныхРаздела1_3);
	
	СписокДопСтрокРаздела1_3 = Новый СписокЗначений;
	СписокДопСтрокРаздела1_3.Добавить(НоваяСтрокаРаздела1_3.Таблица, ШаблонПредставленияДопСтрокРаздела1_3);
	НовыйЛист.ДанныеДопСтрок = СписокДопСтрокРаздела1_3;
	
	Контейнер.Раздел1_3_ТекДанныеДопСтрок.Загрузить(ТаблицаДопСтрокРаздела1_3);
	Если Контейнер.Раздел1_3_ТекДанныеДопСтрок.Количество() = 0 Тогда
		Контейнер.Раздел1_3_ТекДанныеДопСтрок.Добавить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОписаниеПоказателей_РасчетПоНалогуНаПрибыль_2019Кв4(ПоказателиОтчета) Экспорт
	
	// Раздела 1.3
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00013М101003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00013М102003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00013М103003", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00013М204001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00013М204003", Истина, Ложь);
	
	// Раздел А
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003А0000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003А0002103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003А0002203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003А0003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003А0010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003А0009103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003А0009203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003А0011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003А0012003", Истина, Ложь);
	
	// Раздел В
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003ВМ100503", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003ВМ100504", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003ВМ100505", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003ВМ101003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003ВМ104003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003ВМ105003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0003ВМ106003", Истина, Ложь);
	
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РасчетПоНалогуНаПрибыль_2019Кв4(ПараметрыОтчета, Контейнер) Экспорт
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	График = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	
	// очищаем разделы и готовим шаблон
	
	// Лист 03 А
	// Порядок хранения данных (только значимые показатели)
	// Лист03А - дерево значений с колонками:
	//   Данные                    - Структура (показатели)
	//   ДанныеМногострочныхЧастей - Структура с деревом значений
	//      П0003ВМ1 - Дерево значений с колонками
	//         Данные - Структура (показатели)
	//         ДанныеМногострочныхЧастей - пустая структура
	
	ШаблонДанныеЛист03А = Контейнер.Лист03А.Строки[0].Данные;
	ОчиститьЗначенияПоказателей(ШаблонДанныеЛист03А);
	
	ШаблонДеревоП0003ВМ1Лист03А = Контейнер.Лист03А.Строки[0].ДанныеМногострочныхЧастей.П0003ВМ1.Скопировать();
	ШаблонДеревоП0003ВМ1Лист03А.Строки.Очистить();
	
	ШаблонДанныеП0003ВМ1Лист03А = Контейнер.Лист03А.Строки[0].ДанныеМногострочныхЧастей.П0003ВМ1.Строки[0].Данные;
	ОчиститьЗначенияПоказателей(ШаблонДанныеП0003ВМ1Лист03А);
	
	Контейнер.Лист03А.Строки.Очистить();
	
	// Раздел 1.3
	// Порядок хранения данных (только значимые показатели)
	// Раздел1_3 1- дерево значений с колонками:
	//   Данные - Структура с единственным показателем ПризнакВключения
	//   ДанныеМногострочныхЧастей - Структура с деревом значений
	//      П00013М1 - Дерево значений с колонками
	//         Данные                    - Структура (показатели)
	//         ДанныеМногострочныхЧастей - Структура с деревом значений
	//            П00013М2 - Дерево значений с колонками
	//               Данные - Структура (показатели)
	//               ДанныеМногострочныхЧастей - пустая структура
	
	ШаблонДанныеРаздел1_3 = Контейнер.Раздел1_3.Строки[0].Данные;
	ОчиститьЗначенияПоказателей(ШаблонДанныеРаздел1_3);
	
	ШаблонДанныеП00013М1Раздел1_3 = Контейнер.Раздел1_3.Строки[0].ДанныеМногострочныхЧастей.П00013М1.Строки[0].Данные;
	ОчиститьЗначенияПоказателей(ШаблонДанныеП00013М1Раздел1_3);
	
	ШаблонДеревоП00013М1Раздел1_3 = Контейнер.Раздел1_3.Строки[0].ДанныеМногострочныхЧастей.П00013М1.Скопировать();
	ШаблонДеревоП00013М1Раздел1_3.Строки.Очистить();
	
	ШаблонДанныеП00013М2Раздел1_3 = Контейнер.Раздел1_3.Строки[0].ДанныеМногострочныхЧастей.П00013М1.Строки[0].ДанныеМногострочныхЧастей.П00013М2.Строки[0].Данные;
	ОчиститьЗначенияПоказателей(ШаблонДанныеП00013М2Раздел1_3);
	
	ШаблонДеревоП00013М2Раздел1_3 = Контейнер.Раздел1_3.Строки[0].ДанныеМногострочныхЧастей.П00013М1.Строки[0].ДанныеМногострочныхЧастей.П00013М2.Скопировать();
	ШаблонДеревоП00013М2Раздел1_3.Строки.Очистить();
	
	Контейнер.Раздел1_3.Строки.Очистить();
	
	ТаблицаДопСтрокРаздела1_3 = Новый ТаблицаЗначений;
	Для Каждого СтрокаШаблона ИЗ ШаблонДанныеП00013М2Раздел1_3 Цикл
		ТаблицаДопСтрокРаздела1_3.Колонки.Добавить(СтрокаШаблона.Ключ);
	КонецЦикла;
	
	// очистили и оставили только шаблон
	
	// заполняем данными
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.ДатаНачалаРасширенногоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	Если ПараметрыОтчета.Периодичность = Перечисления.Периодичность.Квартал Тогда
		НачалоТекущегоПериода = НачалоКвартала(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	Иначе
		НачалоТекущегоПериода = НачалоМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	Запрос.УстановитьПараметр("НачалоТекущегоПериода", НачалоТекущегоПериода);
	
	НомерКорректировки = СокрЛП(ПараметрыОтчета.НомерКорректировки);
	Тип = ?(СтрДлина(НомерКорректировки) < 2, "0" + НомерКорректировки, НомерКорректировки);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Тип",         Тип);
	
	// Но сначало проверим, надо ли вообще заполнять
	// Если в составе учредителей только физ.лица - то не заполняем
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСУчредителями);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВкладамВУставныйКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал_ОбыкновенныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал_ПривилегированныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал_ПрочийКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции_ПривилегированныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции_ПрочийКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции_ОбыкновенныеАкции);
	
	Запрос.УстановитьПараметр("СчетаРасчетовСУчредителями", МассивСчетов);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаРасчетовСУчредителями), &ВидСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты).ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОбороты.Субконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В (&СчетаРасчетовСУчредителями), &ВидСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты).ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)";
	
	Если Запрос.Выполнить().Пустой() Тогда
		// Первая и единственная страница - шаблон
		
		// Раздел 1.3
		ДеревоП00013М2Раздел1_3 = ШаблонДеревоП00013М2Раздел1_3.Скопировать();
		ДеревоП00013М1Раздел1_3 = ШаблонДеревоП00013М1Раздел1_3.Скопировать();
		НоваяСтрокаП00013М2                            = ДеревоП00013М2Раздел1_3.Строки.Добавить();
		НоваяСтрокаП00013М2.Данные                     = ШаблонДанныеП00013М2Раздел1_3;
		НоваяСтрокаП00013М2.ДанныеМногострочныхЧастей  = Новый Структура();
		НоваяСтрокаП00013М1                            = ДеревоП00013М1Раздел1_3.Строки.Добавить();
		НоваяСтрокаП00013М1.Данные                     = ШаблонДанныеП00013М1Раздел1_3;
		НоваяСтрокаП00013М1.ДанныеМногострочныхЧастей  = Новый Структура("П00013М2", ДеревоП00013М2Раздел1_3);
		НоваяСтрокаРаздел1_3                           = Контейнер.Раздел1_3.Строки.Добавить();
		НоваяСтрокаРаздел1_3.Данные                    = ШаблонДанныеРаздел1_3;
		НоваяСтрокаРаздел1_3.ДанныеМногострочныхЧастей = Новый Структура("П00013М1", ДеревоП00013М1Раздел1_3);
		
		// Лист 03 А
		ДеревоП0003ВМ1Лист03А = ШаблонДеревоП0003ВМ1Лист03А.Скопировать();
		НоваяСтрокаП0003ВМ1                           = ДеревоП0003ВМ1Лист03А.Строки.Добавить();
		НоваяСтрокаП0003ВМ1.Данные                    = ШаблонДанныеП0003ВМ1Лист03А;
		НоваяСтрокаП0003ВМ1.ДанныеМногострочныхЧастей = Новый Структура();
		НоваяСтрокаЛист03А                            = Контейнер.Лист03А.Строки.Добавить();
		НоваяСтрокаЛист03А.Данные                     = ШаблонДанныеЛист03А;
		НоваяСтрокаЛист03А.ДанныеМногострочныхЧастей  = Новый Структура("П0003ВМ1", ДеревоП0003ВМ1Лист03А);
		
		Возврат; // нет причин заполнять
	КонецЕсли;
	
	// В составе учредителей есть юридические лица
	
	// Сначала проверяем наличие выпла в отчетном периоде
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасходныйКассовыйОрдер.Проведен
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаДивидендов)
	|	И РасходныйКассовыйОрдер.НачислениеДивидендов <> ЗНАЧЕНИЕ(Документ.НачислениеДивидендов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеСРасчетногоСчета.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СписаниеСРасчетногоСчета.Проведен
	|	И СписаниеСРасчетногоСчета.Организация = &Организация
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов)
	|	И СписаниеСРасчетногоСчета.НачислениеДивидендов <> ЗНАЧЕНИЕ(Документ.НачислениеДивидендов.ПустаяСсылка)";
	
	Если Запрос.Выполнить().Пустой() Тогда
		// Первая и единственная страница - шаблон
		
		// Раздел 1.3
		ДеревоП00013М2Раздел1_3 = ШаблонДеревоП00013М2Раздел1_3.Скопировать();
		ДеревоП00013М1Раздел1_3 = ШаблонДеревоП00013М1Раздел1_3.Скопировать();
		НоваяСтрокаП00013М2                            = ДеревоП00013М2Раздел1_3.Строки.Добавить();
		НоваяСтрокаП00013М2.Данные                     = ШаблонДанныеП00013М2Раздел1_3;
		НоваяСтрокаП00013М2.ДанныеМногострочныхЧастей  = Новый Структура();
		НоваяСтрокаП00013М1                            = ДеревоП00013М1Раздел1_3.Строки.Добавить();
		НоваяСтрокаП00013М1.Данные                     = ШаблонДанныеП00013М1Раздел1_3;
		НоваяСтрокаП00013М1.ДанныеМногострочныхЧастей  = Новый Структура("П00013М2", ДеревоП00013М2Раздел1_3);
		НоваяСтрокаРаздел1_3                           = Контейнер.Раздел1_3.Строки.Добавить();
		НоваяСтрокаРаздел1_3.Данные                    = ШаблонДанныеРаздел1_3;
		НоваяСтрокаРаздел1_3.ДанныеМногострочныхЧастей = Новый Структура("П00013М1", ДеревоП00013М1Раздел1_3);
		
		// Лист 03 А
		ДеревоП0003ВМ1Лист03А = ШаблонДеревоП0003ВМ1Лист03А.Скопировать();
		НоваяСтрокаП0003ВМ1                           = ДеревоП0003ВМ1Лист03А.Строки.Добавить();
		НоваяСтрокаП0003ВМ1.Данные                    = ШаблонДанныеП0003ВМ1Лист03А;
		НоваяСтрокаП0003ВМ1.ДанныеМногострочныхЧастей = Новый Структура();
		НоваяСтрокаЛист03А                            = Контейнер.Лист03А.Строки.Добавить();
		НоваяСтрокаЛист03А.Данные                     = ШаблонДанныеЛист03А;
		НоваяСтрокаЛист03А.ДанныеМногострочныхЧастей  = Новый Структура("П0003ВМ1", ДеревоП0003ВМ1Лист03А);
		
		Возврат; // нет причин заполнять
	КонецЕсли;
	
	// Дивиденды выплачивались - заполняем отчет
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.НачислениеДивидендов КАК НачислениеДивидендов,
	|	СУММА(РасходныйКассовыйОрдер.СуммаДокумента) КАК СуммаДокумента,
	|	РасходныйКассовыйОрдер.Контрагент КАК Контрагент,
	|	РасходныйКассовыйОрдер.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_Выплата
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасходныйКассовыйОрдер.Проведен
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаДивидендов)
	|	И РасходныйКассовыйОрдер.НачислениеДивидендов <> ЗНАЧЕНИЕ(Документ.НачислениеДивидендов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдер.НачислениеДивидендов,
	|	РасходныйКассовыйОрдер.Контрагент,
	|	РасходныйКассовыйОрдер.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.НачислениеДивидендов,
	|	СУММА(СписаниеСРасчетногоСчета.СуммаДокумента),
	|	СписаниеСРасчетногоСчета.Контрагент,
	|	СписаниеСРасчетногоСчета.Дата
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СписаниеСРасчетногоСчета.Проведен
	|	И СписаниеСРасчетногоСчета.Организация = &Организация
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов)
	|	И СписаниеСРасчетногоСчета.НачислениеДивидендов <> ЗНАЧЕНИЕ(Документ.НачислениеДивидендов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчета.НачислениеДивидендов,
	|	СписаниеСРасчетногоСчета.Контрагент,
	|	СписаниеСРасчетногоСчета.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ДокНачислениеДивидендов.РасчетныйПериод, КВАРТАЛ) = КОНЕЦПЕРИОДА(ДокНачислениеДивидендов.РасчетныйПериод, ГОД)
	|			ТОГДА ""2""
	|		ИНАЧЕ ""1""
	|	КОНЕЦ КАК Вид,
	|	ГОД(ДокНачислениеДивидендов.РасчетныйПериод) КАК Год,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(ДокНачислениеДивидендов.РасчетныйПериод) <= 3
	|			ТОГДА ""21""
	|		КОГДА МЕСЯЦ(ДокНачислениеДивидендов.РасчетныйПериод) <= 6
	|			ТОГДА ""31""
	|		КОГДА МЕСЯЦ(ДокНачислениеДивидендов.РасчетныйПериод) <= 9
	|			ТОГДА ""33""
	|		ИНАЧЕ ""34""
	|	КОНЕЦ КАК Квартал,
	|	ВТ_Выплата.Контрагент КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	ВТ_Выплата.Дата КАК Дата,
	|	СУММА(ВТ_Выплата.СуммаДокумента) КАК СуммаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА ДокНачислениеДивидендов.СуммаДохода - ДокНачислениеДивидендов.СуммаНалога <= ВТ_Выплата.СуммаДокумента
	|					ИЛИ ДокНачислениеДивидендов.СуммаДохода = 0
	|					ИЛИ ВТ_Выплата.СуммаДокумента = 0
	|				ТОГДА ДокНачислениеДивидендов.СуммаНалога
	|			ИНАЧЕ ВЫРАЗИТЬ(ВТ_Выплата.СуммаДокумента / (ДокНачислениеДивидендов.СуммаДохода - ДокНачислениеДивидендов.СуммаНалога) * ДокНачислениеДивидендов.СуммаНалога КАК ЧИСЛО(12, 0))
	|		КОНЕЦ) КАК СуммаНалога,
	|	ДокНачислениеДивидендов.РасчетныйПериод КАК РасчетныйПериод
	|ПОМЕСТИТЬ ВТ_ОплаченныеДокументы
	|ИЗ
	|	ВТ_Выплата КАК ВТ_Выплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеДивидендов КАК ДокНачислениеДивидендов
	|		ПО ВТ_Выплата.НачислениеДивидендов = ДокНачислениеДивидендов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТ_Выплата.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	ДокНачислениеДивидендов.Организация = &Организация
	|	И ДокНачислениеДивидендов.ТипУчредителя = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.НаименованиеПолное,
	|	ВТ_Выплата.Дата,
	|	ГОД(ДокНачислениеДивидендов.РасчетныйПериод),
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(ДокНачислениеДивидендов.РасчетныйПериод) <= 3
	|			ТОГДА ""21""
	|		КОГДА МЕСЯЦ(ДокНачислениеДивидендов.РасчетныйПериод) <= 6
	|			ТОГДА ""31""
	|		КОГДА МЕСЯЦ(ДокНачислениеДивидендов.РасчетныйПериод) <= 9
	|			ТОГДА ""33""
	|		ИНАЧЕ ""34""
	|	КОНЕЦ,
	|	ДокНачислениеДивидендов.РасчетныйПериод,
	|	ВТ_Выплата.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(НачислениеДивидендов.РасчетныйПериод, КВАРТАЛ) = КОНЕЦПЕРИОДА(НачислениеДивидендов.РасчетныйПериод, ГОД)
	|			ТОГДА ""2""
	|		ИНАЧЕ ""1""
	|	КОНЕЦ КАК Вид,
	|	ГОД(НачислениеДивидендов.РасчетныйПериод) КАК Год,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(НачислениеДивидендов.РасчетныйПериод) <= 3
	|			ТОГДА ""21""
	|		КОГДА МЕСЯЦ(НачислениеДивидендов.РасчетныйПериод) <= 6
	|			ТОГДА ""31""
	|		КОГДА МЕСЯЦ(НачислениеДивидендов.РасчетныйПериод) <= 9
	|			ТОГДА ""33""
	|		ИНАЧЕ ""34""
	|	КОНЕЦ КАК Квартал,
	|	СУММА(НачислениеДивидендов.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеДивидендов.ТипУчредителя = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|					И НачислениеДивидендов.СуммаНалога > 0
	|				ТОГДА НачислениеДивидендов.СуммаДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДохода_ЮЛ_13,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеДивидендов.ТипУчредителя = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|					И НачислениеДивидендов.СуммаНалога = 0
	|				ТОГДА НачислениеДивидендов.СуммаДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДохода_ЮЛ_0,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеДивидендов.ТипУчредителя = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|				ТОГДА НачислениеДивидендов.СуммаДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДохода_ФЛ,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеДивидендов.ТипУчредителя = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|				ТОГДА НачислениеДивидендов.СуммаНалога
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНалога_ЮЛ,
	|	НачислениеДивидендов.РасчетныйПериод КАК РасчетныйПериод,
	|	НачислениеДивидендов.Учредитель КАК Учредитель
	|ПОМЕСТИТЬ ВТ_ТекущиеНачисления
	|ИЗ
	|	Документ.НачислениеДивидендов КАК НачислениеДивидендов
	|ГДЕ
	|	НачислениеДивидендов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачислениеДивидендов.Проведен
	|	И НачислениеДивидендов.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ГОД(НачислениеДивидендов.РасчетныйПериод),
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(НачислениеДивидендов.РасчетныйПериод, КВАРТАЛ) = КОНЕЦПЕРИОДА(НачислениеДивидендов.РасчетныйПериод, ГОД)
	|			ТОГДА ""2""
	|		ИНАЧЕ ""1""
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(НачислениеДивидендов.РасчетныйПериод) <= 3
	|			ТОГДА ""21""
	|		КОГДА МЕСЯЦ(НачислениеДивидендов.РасчетныйПериод) <= 6
	|			ТОГДА ""31""
	|		КОГДА МЕСЯЦ(НачислениеДивидендов.РасчетныйПериод) <= 9
	|			ТОГДА ""33""
	|		ИНАЧЕ ""34""
	|	КОНЕЦ,
	|	НачислениеДивидендов.РасчетныйПериод,
	|	НачислениеДивидендов.Учредитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""1"" КАК Категория,
	|	ВТ_ТекущиеНачисления.Вид КАК Вид,
	|	ВТ_ТекущиеНачисления.Год КАК Год,
	|	ВТ_ТекущиеНачисления.Квартал КАК Квартал,
	|	"""" КАК ИНН,
	|	"""" КАК КПП,
	|	"""" КАК Наименование,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВыплаты,
	|	СУММА(0) КАК СуммаВыплаты,
	|	СУММА(0) КАК СуммаУдержанногоНалога,
	|	СУММА(ВТ_ТекущиеНачисления.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВТ_ТекущиеНачисления.СуммаДохода_ЮЛ_13) КАК СуммаДохода_ЮЛ_13,
	|	СУММА(ВТ_ТекущиеНачисления.СуммаДохода_ЮЛ_0) КАК СуммаДохода_ЮЛ_0,
	|	СУММА(ВТ_ТекущиеНачисления.СуммаДохода_ФЛ) КАК СуммаДохода_ФЛ,
	|	СУММА(ВТ_ТекущиеНачисления.СуммаНалога_ЮЛ) КАК СуммаИсчисленногоНалога,
	|	"""" КАК Тип
	|ПОМЕСТИТЬ ВТ_РазделыАиВ
	|ИЗ
	|	ВТ_ТекущиеНачисления КАК ВТ_ТекущиеНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТекущиеНачисления.Вид,
	|	ВТ_ТекущиеНачисления.Год,
	|	ВТ_ТекущиеНачисления.Квартал
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""1"",
	|	ВТ_ОплаченныеДокументы.Вид,
	|	ВТ_ОплаченныеДокументы.Год,
	|	ВТ_ОплаченныеДокументы.Квартал,
	|	ВТ_ОплаченныеДокументы.ИНН,
	|	ВТ_ОплаченныеДокументы.КПП,
	|	ВТ_ОплаченныеДокументы.НаименованиеПолное,
	|	ВТ_ОплаченныеДокументы.Дата,
	|	СУММА(ВТ_ОплаченныеДокументы.СуммаДокумента + ВТ_ОплаченныеДокументы.СуммаНалога),
	|	СУММА(ВТ_ОплаченныеДокументы.СуммаНалога),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	&Тип
	|ИЗ
	|	ВТ_ОплаченныеДокументы КАК ВТ_ОплаченныеДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОплаченныеДокументы.Вид,
	|	ВТ_ОплаченныеДокументы.Год,
	|	ВТ_ОплаченныеДокументы.Квартал,
	|	ВТ_ОплаченныеДокументы.ИНН,
	|	ВТ_ОплаченныеДокументы.КПП,
	|	ВТ_ОплаченныеДокументы.НаименованиеПолное,
	|	ВТ_ОплаченныеДокументы.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РазделыАиВ.Категория КАК П0003А0000100,
	|	ВТ_РазделыАиВ.Вид КАК П0003А0000300,
	|	ВТ_РазделыАиВ.Год КАК П0003А0000500,
	|	ВТ_РазделыАиВ.Квартал КАК П0003А0000400,
	|	СУММА(ВТ_РазделыАиВ.СуммаДохода) КАК П0003А0000103,
	|	СУММА(ВТ_РазделыАиВ.СуммаДохода_ЮЛ_13) КАК П0003А0002203,
	|	СУММА(ВТ_РазделыАиВ.СуммаДохода_ЮЛ_0) КАК П0003А0002103,
	|	СУММА(ВТ_РазделыАиВ.СуммаДохода_ФЛ) КАК П0003А0003003,
	|	СУММА(ВТ_РазделыАиВ.СуммаДохода_ЮЛ_13) КАК П0003А0009103,
	|	СУММА(ВТ_РазделыАиВ.СуммаДохода_ЮЛ_0) КАК П0003А0009203,
	|	СУММА(ВТ_РазделыАиВ.СуммаИсчисленногоНалога) КАК П0003А0010003,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_РазделыАиВ.ДатаВыплаты < &НачалоТекущегоПериода
	|				ТОГДА ВТ_РазделыАиВ.СуммаУдержанногоНалога
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П0003А0011003,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_РазделыАиВ.ДатаВыплаты МЕЖДУ &НачалоТекущегоПериода И &КонецПериода
	|				ТОГДА ВТ_РазделыАиВ.СуммаУдержанногоНалога
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П0003А0012003,
	|	ВТ_РазделыАиВ.ИНН КАК П0003ВМ100503,
	|	ВТ_РазделыАиВ.КПП КАК П0003ВМ100504,
	|	ВТ_РазделыАиВ.Наименование КАК П0003ВМ101003,
	|	ВТ_РазделыАиВ.ДатаВыплаты КАК П0003ВМ104003,
	|	СУММА(ВТ_РазделыАиВ.СуммаВыплаты) КАК П0003ВМ105003,
	|	СУММА(ВТ_РазделыАиВ.СуммаУдержанногоНалога) КАК П0003ВМ106003,
	|	ВТ_РазделыАиВ.Тип КАК П0003ВМ100505
	|ИЗ
	|	ВТ_РазделыАиВ КАК ВТ_РазделыАиВ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РазделыАиВ.Вид,
	|	ВТ_РазделыАиВ.Год,
	|	ВТ_РазделыАиВ.Квартал,
	|	ВТ_РазделыАиВ.Категория,
	|	ВТ_РазделыАиВ.ИНН,
	|	ВТ_РазделыАиВ.КПП,
	|	ВТ_РазделыАиВ.Наименование,
	|	ВТ_РазделыАиВ.ДатаВыплаты,
	|	ВТ_РазделыАиВ.Тип
	|
	|УПОРЯДОЧИТЬ ПО
	|	П0003А0000100,
	|	П0003А0000500,
	|	П0003А0000400,
	|	П0003А0000300
	|ИТОГИ ПО
	|	П0003А0000100,
	|	П0003А0000500,
	|	П0003А0000400,
	|	П0003А0000300,
	|	П0003ВМ100503,
	|	П0003ВМ100504,
	|	П0003ВМ101003,
	|	П0003ВМ104003";
	
	
	КатегорияНалоговогоАгента = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П0003А0000100");
	Пока КатегорияНалоговогоАгента.Следующий() Цикл
		
		ОтчетныйГод = КатегорияНалоговогоАгента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П0003А0000500");
		Пока ОтчетныйГод.Следующий() Цикл
			
			ОтчетныйКвартал = ОтчетныйГод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П0003А0000400");
			Пока ОтчетныйКвартал.Следующий() Цикл
				
				ВидДивидендов = ОтчетныйКвартал.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П0003А0000300");
				Пока ВидДивидендов.Следующий() Цикл
					
					НовыйЛист      = Контейнер.Лист03А.Строки.Добавить();
					НовыеДопСтроки = ШаблонДеревоП0003ВМ1Лист03А.Скопировать();
					
					СтруктураДаныхЛиста03А = Новый Структура;
					Для Каждого СтрокаШаблона ИЗ ШаблонДанныеЛист03А Цикл
						СтруктураДаныхЛиста03А.Вставить(СтрокаШаблона.Ключ, СтрокаШаблона.Значение);
					КонецЦикла;
					
					ЗаполнитьЗначенияСвойств(СтруктураДаныхЛиста03А, ВидДивидендов); // данные
					СтруктураДаныхЛиста03А.П0003А0000500 = Формат(СтруктураДаныхЛиста03А.П0003А0000500, "ЧГ=0");
					СтруктураДаныхЛиста03А.ПризнакВключения = "V";
					
					Если ВидДивидендов.П0003А0012003 <> 0          // ставка <> 0%
						ИЛИ ВидДивидендов.П0003А0009203 <> 0 Тогда // ставка  = 0%
						
						ГруппировкаИНН = ВидДивидендов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П0003ВМ100503");
						
						НомерЗаписи = 1;
						
						Пока ГруппировкаИНН.Следующий() Цикл
							ГруппировкаКПП = ГруппировкаИНН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П0003ВМ100504");
							Пока ГруппировкаКПП.Следующий() Цикл
								
								Получатель = ГруппировкаКПП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П0003ВМ101003");
								Пока Получатель.Следующий() Цикл
									
									ДатаВыплаты = Получатель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "П0003ВМ104003");
									Пока ДатаВыплаты.Следующий() Цикл
										
										ДетальныеДанные = ДатаВыплаты.Выбрать();
										Пока ДетальныеДанные.Следующий() Цикл
											
											ДатаУдержания = ДетальныеДанные.П0003ВМ104003;
											
											Если ЗначениеЗаполнено(ДатаУдержания)
												И ДатаУдержания >= НачалоТекущегоПериода Тогда
												
												НоваяСтрока = НовыеДопСтроки.Строки.Добавить();
												
												СтруктураДаныхП0003ВМ1Листа03А = Новый Структура;
												Для Каждого ИмяПоказателя ИЗ ШаблонДанныеП0003ВМ1Лист03А Цикл
													СтруктураДаныхП0003ВМ1Листа03А.Вставить(ИмяПоказателя.Ключ, ИмяПоказателя.Значение);
												КонецЦикла;
												
												ЗаполнитьЗначенияСвойств(СтруктураДаныхП0003ВМ1Листа03А, ДетальныеДанные);
												НоваяСтрока.Данные = СтруктураДаныхП0003ВМ1Листа03А;
												НоваяСтрока.ДанныеМногострочныхЧастей = Новый Структура;
												
												Если ВидДивидендов.П0003А0012003 <> 0 Тогда
													
													НоваяСтрока1_3 = ТаблицаДопСтрокРаздела1_3.Добавить();
													
													СрокУплаты = НачалоДня(ДатаУдержания + 86400);
													
													СрокиУплаты = КалендарныеГрафики.ДатыБлижайшихРабочихДней(График,
													ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СрокУплаты));
													Если СрокиУплаты <> Неопределено Тогда
														СрокУплаты = СрокиУплаты.Получить(СрокУплаты);
													КонецЕсли;
													
													НоваяСтрока1_3.П00013М204001 = СрокУплаты;
													НоваяСтрока1_3.П00013М204003 = СтруктураДаныхП0003ВМ1Листа03А.П0003ВМ106003;
													
												КонецЕсли;
												
												НомерЗаписи = НомерЗаписи + 1;
												
											КонецЕсли;
											
										КонецЦикла;
									КонецЦикла;
									
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
						
						Если НовыеДопСтроки.Строки.Количество() = 0 Тогда
							НоваяСтрока = НовыеДопСтроки.Строки.Добавить();
							НоваяСтрока.Данные                    = ШаблонДанныеП0003ВМ1Лист03А;
							НоваяСтрока.ДанныеМногострочныхЧастей = Новый Структура;
						КонецЕсли;
						
					Иначе
						НоваяСтрока = НовыеДопСтроки.Строки.Добавить();
						НоваяСтрока.Данные                    = ШаблонДанныеП0003ВМ1Лист03А;
						НоваяСтрока.ДанныеМногострочныхЧастей = Новый Структура;
					КонецЕсли;
					
					НовыйЛист.Данные                    = СтруктураДаныхЛиста03А;
					НовыйЛист.ДанныеМногострочныхЧастей = Новый Структура("П0003ВМ1", НовыеДопСтроки);
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если Контейнер.Лист03А.Строки.Количество() = 0 Тогда
		// первая и единственная страница - шаблон
		ДеревоП0003ВМ1Лист03А = ШаблонДеревоП0003ВМ1Лист03А.Скопировать();
		НоваяСтрокаП0003ВМ1                           = ДеревоП0003ВМ1Лист03А.Строки.Добавить();
		НоваяСтрокаП0003ВМ1.Данные                    = ШаблонДанныеП0003ВМ1Лист03А;
		НоваяСтрокаП0003ВМ1.ДанныеМногострочныхЧастей = Новый Структура();
		НоваяСтрокаЛист03А                            = Контейнер.Лист03А.Строки.Добавить();
		НоваяСтрокаЛист03А.Данные                     = ШаблонДанныеЛист03А;
		НоваяСтрокаЛист03А.ДанныеМногострочныхЧастей  = Новый Структура("П0003ВМ1", ДеревоП0003ВМ1Лист03А);
	КонецЕсли;
	
	ТаблицаДопСтрокРаздела1_3.Свернуть("П00013М204001", "П00013М204003");
	ТаблицаДопСтрокРаздела1_3.Сортировать("П00013М204001");
	
	Если ТаблицаДопСтрокРаздела1_3.Количество() = 0 Тогда
		// первая и единственная строка - шаблон
		ДеревоП00013М2Раздел1_3 = ШаблонДеревоП00013М2Раздел1_3.Скопировать();
		ДеревоП00013М1Раздел1_3 = ШаблонДеревоП00013М1Раздел1_3.Скопировать();
		НоваяСтрокаП00013М2                            = ДеревоП00013М2Раздел1_3.Строки.Добавить();
		НоваяСтрокаП00013М2.Данные                     = ШаблонДанныеП00013М2Раздел1_3;
		НоваяСтрокаП00013М2.ДанныеМногострочныхЧастей  = Новый Структура();
		НоваяСтрокаП00013М1                            = ДеревоП00013М1Раздел1_3.Строки.Добавить();
		НоваяСтрокаП00013М1.Данные                     = ШаблонДанныеП00013М1Раздел1_3;
		НоваяСтрокаП00013М1.ДанныеМногострочныхЧастей  = Новый Структура("П00013М2", ДеревоП00013М2Раздел1_3);
		НоваяСтрокаРаздел1_3                           = Контейнер.Раздел1_3.Строки.Добавить();
		НоваяСтрокаРаздел1_3.Данные                    = ШаблонДанныеРаздел1_3;
		НоваяСтрокаРаздел1_3.ДанныеМногострочныхЧастей = Новый Структура("П00013М1", ДеревоП00013М1Раздел1_3);
	Иначе
		
		ДеревоП00013М2Раздел1_3 = ШаблонДеревоП00013М2Раздел1_3.Скопировать();
		ДеревоП00013М1Раздел1_3 = ШаблонДеревоП00013М1Раздел1_3.Скопировать();
		
		Для Каждого СтрокаТаблицы ИЗ ТаблицаДопСтрокРаздела1_3 Цикл
			НоваяСтрокаП00013М2 = ДеревоП00013М2Раздел1_3.Строки.Добавить();
			СтруктураДаных00013М2Раздел1_3 = Новый Структура;
			Для Каждого ИмяПоказателя ИЗ ШаблонДанныеП00013М2Раздел1_3 Цикл
				СтруктураДаных00013М2Раздел1_3.Вставить(ИмяПоказателя.Ключ, ИмяПоказателя.Значение);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(СтруктураДаных00013М2Раздел1_3, СтрокаТаблицы);
			НоваяСтрокаП00013М2.Данные = СтруктураДаных00013М2Раздел1_3;
			НоваяСтрокаП00013М2.ДанныеМногострочныхЧастей = Новый Структура();
		КонецЦикла;
		НоваяСтрокаП00013М1 = ДеревоП00013М1Раздел1_3.Строки.Добавить();
		
		СтрокаСведений = "ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Организация, ДатаКонцаПериодаОтчета, СтрокаСведений);
		
		СтруктураДаных00013М2Раздел1_3 = Новый Структура("П00013М101003, П00013М102003, П00013М103003",
			"1", СведенияОбОрганизации.ОКТМО, "18210101040011000110");
		
		НоваяСтрокаП00013М1.Данные                     = СтруктураДаных00013М2Раздел1_3;
		НоваяСтрокаП00013М1.ДанныеМногострочныхЧастей  = Новый Структура("П00013М2", ДеревоП00013М2Раздел1_3);
		
		СтруктураДаныхРаздел1_3 = Новый Структура;
		Для Каждого ИмяПоказателя ИЗ ШаблонДанныеРаздел1_3 Цикл
			СтруктураДаныхРаздел1_3.Вставить(ИмяПоказателя.Ключ, ИмяПоказателя.Значение);
		КонецЦикла;
		СтруктураДаныхРаздел1_3.ПризнакВключения = "V";
		
		НоваяСтрокаРаздел1_3                           = Контейнер.Раздел1_3.Строки.Добавить();
		НоваяСтрокаРаздел1_3.Данные                    = СтруктураДаныхРаздел1_3;
		НоваяСтрокаРаздел1_3.ДанныеМногострочныхЧастей = Новый Структура("П00013М1", ДеревоП00013М1Раздел1_3);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьЗначенияПоказателей(Показатели)
	
	Для Каждого КлючИЗначение Из Показатели Цикл
		Если ТипЗнч(Показатели[КлючИЗначение.Ключ]) = Тип("Число") Тогда
			Показатели.Вставить(КлючИЗначение.Ключ, 0);
		ИначеЕсли ТипЗнч(Показатели[КлючИЗначение.Ключ]) = Тип("Дата") Тогда
			Показатели.Вставить(КлючИЗначение.Ключ, Дата(1,1,1));
		ИначеЕсли ТипЗнч(Показатели[КлючИЗначение.Ключ]) = Тип("Булево") Тогда
			Показатели.Вставить(КлючИЗначение.Ключ, Ложь);
		Иначе
			Показатели.Вставить(КлючИЗначение.Ключ, "");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти