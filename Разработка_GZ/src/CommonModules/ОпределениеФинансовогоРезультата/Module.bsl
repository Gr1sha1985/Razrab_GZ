#Область ПрограммныйИнтерфейс

// Закрывает бухгалтерские счета, на которых учитываются финансовые результаты деятельности организации.
// Такая операция выполняется по состоянию на конец года и часто называется "реформацией баланса".
//
// Реформация баланса состоит из двух этапов:
//
// 1. Закрытие счетов, на которых в течение года учитывались доходы, расходы и финансовые результаты
//    деятельности организации (закрытие счетов 90 "Продажи" и 91 "Прочие доходы и расходы").
//
// 2. Отражение финансового результата по итогам года (чистой прибыли или убытка)
//    в составе нераспределенной прибыли или непокрытого убытка (закрытие счета 99 "Прибыли и убытки").
//
// Подробнее: https://its.1c.ru/db/hoosn/content/474
//
// Параметры:
//  Проводки    - РегистрБухгалтерииНаборЗаписей.Хозрасчетный - дополняемый набор записей
//  Период      - Дата - период, характеризующий закрываемый год; он же используется для записи проводок
//  Организация - СправочникСсылка.Организации - организация (головная организация), в учете которой закрываются счета.
//                Проводки по перечисленным счетам формируются по головной организации.
//
Процедура ЗакрытьСчетаНаКонецГода(Проводки, Период, Организация) Экспорт
	
	// 90.* -> 90.09
	ЗакрытьСчетВнутреннимиЗаписями(
		Проводки,
		ПланыСчетов.Хозрасчетный.Продажи,
		ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж,
		Период,
		Организация);
		
	// 91.* -> 91.09
	ЗакрытьСчетВнутреннимиЗаписями(
		Проводки,
		ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы,
		ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов,
		Период,
		Организация);
	
	// 99 -> 84
	ОпределитьФинансовыйРезультат(Проводки, Период, Организация);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

#Область ЗакрытьСчетаНаКонецГода

// Закрывает счет 99 "Прибыли и убытки": отражает финансовый результат по итогам года (чистую прибыль или убыток)
// в составе нераспределенной прибыли или непокрытого убытка.
// 
// Вид финансового результата определяется по данным бухгалтерского учета.
// Финансовый результат определяется сальдированно по всем субсчетам счета 99:
// в общем случае, он может состоять из компонентов, таких как
// - прибыль по деятельности, облагаемой налогом на прибыль
// - прибыль по деятельности, облагаемой ЕНВД
// - компоненты налога на прибыль
// - прочие прибыли и убытки.
//
// При этом на счете 84 отражается либо только прибыль либо только убыток: не допускается ситуация,
// когда по одному компоненту отражена прибыль, а по другому - убыток.
// Если все компоненты однонаправлены (скажем, есть только деятельность, облагаемая ЕНВД или только убыток),
// то проводки по закрытию формируются по каждому субсчету раздельно.
// Если по отдельным субсчетам есть кредитовое сальдо, а по другим - дебетовое, то сумма чистой прибыли (чистого убытка)
// предварительно аккумулируется на консолидационном субсчете.
// В качестве такого субсчета используется 99.01.1.
// 
//  Проводки    - РегистрБухгалтерииНаборЗаписей.Хозрасчетный - дополняемый набор записей
//  Период      - Дата - период, характеризующий закрываемый год; он же используется для записи проводок
//  Организация - СправочникСсылка.Организации - организация (головная организация), в учете которой закрываются счета
//                Проводки по перечисленным счетам формируются по головной организации.
//
Процедура ОпределитьФинансовыйРезультат(Проводки, Период, Организация)
	
	ПрибылиУбытки = ПрибылиУбыткиЗакрываемогоГода(Период, Организация);
	
	Если ОтражатьПрибыль(ПрибылиУбытки.Итоги) Тогда
		СчетНакопленнойПрибыли = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
	Иначе
		СчетНакопленнойПрибыли = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
	КонецЕсли;
	
	Если Не ПрибылиУбытки.Консолидировать Тогда
		
		// 99.* -> 84
		Для Каждого ИтогПоСчету Из ПрибылиУбытки.СуммыПоСчетам Цикл
			ДобавитьПроводкуФинансовогоРезультата(
				Проводки,
				Период,
				Организация,
				СчетНакопленнойПрибыли,
				ИтогПоСчету.Счет,
				ИтогПоСчету.ВидСчета,
				ИтогПоСчету);
		КонецЦикла;
		
	Иначе
		
		СчетКонсолидации = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		
		// 99.* -> 99.01.1
		Для Каждого ИтогПоСчету Из ПрибылиУбытки.СуммыПоСчетам Цикл
			
			Если ИтогПоСчету.Счет = СчетКонсолидации Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьПроводкуФинансовогоРезультата(
				Проводки,
				Период,
				Организация,
				СчетКонсолидации,
				ИтогПоСчету.Счет,
				ИтогПоСчету.ВидСчета,
				ИтогПоСчету);
			
		КонецЦикла;
		
		// 99.01.1 -> 84
		ДобавитьПроводкуФинансовогоРезультата(
			Проводки,
			Период,
			Организация,
			СчетНакопленнойПрибыли,
			СчетКонсолидации,
			ВидСчета.АктивноПассивный,
			ПрибылиУбытки.Итоги);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйПрибылиУбыткиЗакрываемогоГода()
	
	ОписаниеСумм = НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм();
	
	// Положительные суммы - прибыль, отрицательные - убыток
	
	ПрибылиУбытки = Новый Структура;
	ПрибылиУбытки.Вставить("Итоги",           КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм));
	ПрибылиУбытки.Вставить("Консолидировать", Ложь);
	ПрибылиУбытки.Вставить("СуммыПоСчетам",   Новый ТаблицаЗначений);
	ПрибылиУбытки.СуммыПоСчетам.Колонки.Добавить("Счет",     Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПрибылиУбытки.СуммыПоСчетам.Колонки.Добавить("ВидСчета", Новый ОписаниеТипов("ВидСчета"));
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(ПрибылиУбытки.СуммыПоСчетам, ОписаниеСумм);
	
	Возврат ПрибылиУбытки;
	
КонецФункции

Функция ПрибылиУбыткиЗакрываемогоГода(Период, Организация)
	
	ПрибылиУбытки = НовыйПрибылиУбыткиЗакрываемогоГода();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетнаяДата",   КонецГода(Период) + 1);
	Запрос.УстановитьПараметр("ВсяОрганизация", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр(
		"Счета",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки));
	Запрос.УстановитьПараметр(
		"СчетаНалогНаПрибыль",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки_НалогНаПрибыль));
	
	// Прибыль отражается по Кт счета, поэтому выбираем отрицательные значения
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Счет.Порядок КАК СчетПорядок,
	|	ХозрасчетныйОстатки.Счет.Вид КАК ВидСчета,
	|	-ЕСТЬNULL(СУММА(ХозрасчетныйОстатки.СуммаОстаток), 0) КАК Сумма,
	|	-ЕСТЬNULL(СУММА(ХозрасчетныйОстатки.СуммаНУОстаток), 0) КАК СуммаНУ,
	|	-ЕСТЬNULL(СУММА(ХозрасчетныйОстатки.СуммаВРОстаток), 0) КАК СуммаВР,
	|	-ЕСТЬNULL(СУММА(ХозрасчетныйОстатки.СуммаПРОстаток), 0) КАК СуммаПР,
	|	-ЕСТЬNULL(СУММА(ХозрасчетныйОстатки.СуммаОстаток), 0) > 0 КАК Прибыль,
	|	-ЕСТЬNULL(СУММА(ХозрасчетныйОстатки.СуммаОстаток), 0) < 0 КАК Убыток,
	|	-ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОстатки.Счет В (&СчетаНалогНаПрибыль)
	|					ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			КОНЕЦ), 0) <> 0 КАК НалогНаПрибыль
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ОтчетнаяДата, Счет В (&Счета), , Организация В (&ВсяОрганизация)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Счет.Порядок,
	|	ХозрасчетныйОстатки.Счет.Вид
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетПорядок,
	|	Счет
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНУ),
	|	СУММА(СуммаВР),
	|	СУММА(СуммаПР),
	|	МАКСИМУМ(Прибыль),
	|	МАКСИМУМ(Убыток),
	|	МАКСИМУМ(НалогНаПрибыль)
	|ПО
	|	ОБЩИЕ";
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ПрибылиУбытки.Итоги, ВыборкаИтоги);
		
		Если (ВыборкаИтоги.Прибыль И ВыборкаИтоги.Убыток) Или ВыборкаИтоги.НалогНаПрибыль Тогда
			// На счете 84 следует отразить сальдированный финансовый результат по всем видам деятельности -
			// т.е. сумму прибыли и убытка, а не отдельно прибыль и отдельно убыток.
			// Эта сумма предварительно консолидируется на счете 99.01.1.
			ПрибылиУбытки.Консолидировать = Истина;
		КонецЕсли;
		
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ПрибылиУбытки.СуммыПоСчетам.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПрибылиУбытки;
	
КонецФункции

// Закрывает субсчета счета финансового результата внутренними записями.
// См. приказ Минфина от 31 октября 2000 г. N 94н:
// "По окончании отчетного года 
// - все субсчета, открытые к счету 90 "Продажи" (кроме субсчета 90-9 "Прибыль / убыток от продаж"), 
// закрываются внутренними записями на субсчет 90-9 "Прибыль / убыток от продаж";
// - все субсчета, открытые к счету 91 "Прочие доходы и расходы" (кроме субсчета 91-9 "Сальдо прочих доходов и расходов"),
// закрываются внутренними записями на субсчет 91-9 "Сальдо прочих доходов и расходов"."
//
// Параметры:
//  Проводки          - РегистрБухгалтерииНаборЗаписей.Хозрасчетный - заполняемая коллекция проводок по закрытию счета
//  Период            - Дата - период регламентной операции по закрытию счета
//  Организация       - СправочникСсылка.Организации - (головная) организация, по которой формируются проводки
//  СинтетическийСчет - ПланСчетовСсылка.Хозрасчетный - закрываемый счет: 90 или 91
//  СубсчетСальдо     - ПланСчетовСсылка.Хозрасчетный - субсчет, на который закрываются субсчета: 90.09 или 91.09
//
Процедура ЗакрытьСчетВнутреннимиЗаписями(Проводки, СинтетическийСчет, СубсчетСальдо, Период, Организация)
	
	// Подготовим список закрываемых субсчетов (все счета закрываемого счета, кроме предназначенного для переноса сальдо).
	СубсчетаСинтетическогоСчета = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(СинтетическийСчет),
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(СубсчетСальдо));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетнаяДата",        КонецГода(Период) + 1);
	Запрос.УстановитьПараметр("ОрганизацияПроводок", Организация);
	Запрос.УстановитьПараметр("ВсяОрганизация",      ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("Счета",               СубсчетаСинтетическогоСчета);
	
	// Все субконто на счетах 90, 91 должны быть оборотными.
	// Небалансовое измерение Подразделение закрываем только в части подразделений, подчиненных организации, по которой формируются проводки,
	// чтобы
	// - когда возможно закрыть счет в разрезе всех измерений, сделать это
	// - когда невозможно (разные организации) - хотя бы не порождать заведомо некорректные записи,
	//   в которых указаны подразделения, не принадлежащие организации.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет.Вид КАК ВидСчета,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Подразделение.Владелец = &ОрганизацияПроводок
	|				ТОГДА ХозрасчетныйОстатки.Подразделение
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	-СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстаток, 0)) КАК Сумма,
	|	-СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстаток, 0)) КАК СуммаНУ,
	|	-СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстаток, 0)) КАК СуммаПР,
	|	-СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстаток, 0)) КАК СуммаВР,
	|	-СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.КоличествоОстаток, 0)) КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ОтчетнаяДата, Счет В (&Счета), , Организация В (&ВсяОрганизация)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Счет.Вид,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Подразделение.Владелец = &ОрганизацияПроводок
	|				ТОГДА ХозрасчетныйОстатки.Подразделение
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Счет.Порядок,
	|	ХозрасчетныйОстатки.Счет,
	|	Подразделение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Сумма = 0 И Выборка.СуммаНУ = 0 И Выборка.СуммаПР = 0  И Выборка.СуммаВР = 0 И Выборка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ДобавитьПроводкуФинансовогоРезультата(
			Проводки,
			Период,
			Организация,
			СубсчетСальдо,
			Выборка.Счет,
			Выборка.ВидСчета,
			Выборка);
			
		Если Выборка.ВидСчета = ВидСчета.Пассивный Тогда
			Проводка.КоличествоДт    = Выборка.Количество;
			СторонаЗакрываемогоСчета = "Дт";
		Иначе
			Проводка.КоличествоКт  = -Выборка.Количество;
			СторонаЗакрываемогоСчета = "Кт";
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Выборка.Подразделение, СторонаЗакрываемогоСчета);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьПроводкуФинансовогоРезультата(Проводки, Период, Организация, СчетКонсолидации, ЗакрываемыйСчет, ВидЗакрываемогоСчета, Суммы)
	
	Проводка = Проводки.Добавить();
	
	Проводка.Период      = Период;
	Проводка.Организация = Организация;
	Проводка.Содержание  = НСтр("ru = 'Реформация баланса'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	// На активно/пассивных счетах собирается прибыль по кредиту счета и убыток по дебету.
	// Прибыль списывается со счета, как если бы он был пассивным, убыток - как если бы был активным.
	Если ВидЗакрываемогоСчета = ВидСчета.АктивноПассивный Тогда
		ЗакрыватьКакПассивныйСчет = ОтражатьПрибыль(Суммы);
	Иначе
		ЗакрыватьКакПассивныйСчет = (ВидЗакрываемогоСчета = ВидСчета.Пассивный);
	КонецЕсли;
	
	Если ЗакрыватьКакПассивныйСчет Тогда
		
		Проводка.СчетДт = ЗакрываемыйСчет;
		Проводка.СчетКт = СчетКонсолидации;
		Проводка.Сумма  = Суммы.Сумма;
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
			Суммы.СуммаНУ, Суммы.СуммаНУ,
			Суммы.СуммаПР, Суммы.СуммаПР,
			Суммы.СуммаВР, Суммы.СуммаВР,
			Проводка);
			
	Иначе
		
		// на активном счете обычно отражается убыток, который выбирается с отрицательным знаком
		Проводка.СчетДт = СчетКонсолидации;
		Проводка.СчетКт = ЗакрываемыйСчет;
		Проводка.Сумма  = -Суммы.Сумма;
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
			-Суммы.СуммаНУ, -Суммы.СуммаНУ,
			-Суммы.СуммаПР, -Суммы.СуммаПР,
			-Суммы.СуммаВР, -Суммы.СуммаВР,
			Проводка);
			
		
	КонецЕсли;
		
	Проводки.Записывать = Истина;
	
	Возврат Проводка;
	
КонецФункции

Функция ОтражатьПрибыль(Суммы)
	
	Если Суммы.Сумма = 0 Тогда
		Возврат Суммы.СуммаНУ > 0;
	Иначе
		Возврат Суммы.Сумма > 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
