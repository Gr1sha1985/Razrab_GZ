// Реализует расширение EnterpriseData "business_trips"
// Содержимое модуля отличается в КОРП

#Область СлужебныйПрограммныйИнтерфейс

// Описывает свойства json-пакета с данными расширения.
// 
// Возвращаемое значение:
//  Структура - см. РасширениеEnterpriseData.НовыйМанифестРасширения()
//  Неопределено - функция программы недоступна
//
Процедура ЗаполнитьМанифестРасширения(Манифест) Экспорт
		
	Манифест.Имя = "business_trips";
	Манифест.ИменаСвойствСоЗначениямиДата.Добавить("date");
	Манифест.ИменаСвойствСоЗначениямиДата.Добавить("birthdate");
	Манифест.ИменаСвойствСоЗначениямиДата.Добавить("departure_date");
	Манифест.ИменаСвойствСоЗначениямиДата.Добавить("arrival_date");
	Манифест.ИменаСвойствСоЗначениямиДата.Добавить("start");
	Манифест.ИменаСвойствСоЗначениямиДата.Добавить("end");
	Манифест.ИменаСвойствСоЗначениямиДата.Добавить("itinerary_start");
	Манифест.ИменаСвойствСоЗначениямиДата.Добавить("itinerary_end");
	
КонецПроцедуры

// Правило загрузки данных из расширенного объекта формата EnterpriseData Документ.СчетПоставщика, содержащего данные о билетах командированных сотрудников.
// Из объекта формата создается документ ОперацияСБилетом.
// Также быть созданы (изменены) элементы справочников
// - Билет
// - ФизическиеЛица (пассажиры, командированные сотрудники)
// - Контрагенты (перевозчики)
//
// Параметры:
//  ДанныеXDTO       - Структура - результат выполнения правила конвертации;
//                                     должен содержать данные расширения, установленные методом УстановитьДанныеРасширения()
//  ПолученныеДанные - ДокументОбъект.ОперацияСБилетом - 
//  КомпонентыОбмена - Структура - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена, процессор обмена EnterpriseData
//
Процедура ПКО_Документ_ОперацияСБилетом_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
		
	ДанныеРасширения = РасширениеEnterpriseData.ДесериализованныеДанныеРасширения(ДанныеXDTO);
	
	СодержаниеОперации = СодержаниеОперацииСБилетом(
		ДанныеXDTO,
		ДанныеРасширения["actions"],
		ДанныеРасширения["receipts"],
		КомпонентыОбмена);
						
	Билеты = Новый Соответствие; // Ключ - номер, Значение - ссылка
	
	Билеты.Вставить(СодержаниеОперации.ОсновнойБилет, Справочники.Билеты.ПустаяСсылка());
	Если ЗначениеЗаполнено(СодержаниеОперации.ЗаменяемыйБилет) 
		И СодержаниеОперации.ОсновнойБилет <> СодержаниеОперации.ЗаменяемыйБилет Тогда
		Билеты.Вставить(СодержаниеОперации.ЗаменяемыйБилет, Справочники.Билеты.ПустаяСсылка());
	КонецЕсли;
	
	ПодтверждающиеДокументы = ДанныеРасширения["receipts"];
	
	Для Каждого ПодтверждающийДокумент Из ПодтверждающиеДокументы Цикл
		
		НомерБилета = ПодтверждающийДокумент["id"];
		
		Если Билеты[НомерБилета] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПодтверждающийДокумент["type"] <> "ticket" Тогда
			Продолжить;
		КонецЕсли;
		
		Билет = Билет(ПодтверждающийДокумент["content"], ПолученныеДанные.Организация, КомпонентыОбмена);  
		
		Билеты.Вставить(НомерБилета, Билет);
		
		ПрисоединитьФайлы(Билет, ПодтверждающийДокумент["attachments"], КомпонентыОбмена);
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(
		ПолученныеДанные,
		СодержаниеОперации,
		"ВидОперации, Комментарий, Сумма, СтавкаНДС, СуммаНДС, СуммаНеОблагаемаяНДС, Штраф");
	
	Если ПолученныеДанные.ВидОперации <> Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат Тогда
		ПолученныеДанные.Билет       = Билеты[СодержаниеОперации.ОсновнойБилет];
	Иначе
		ПолученныеДанные.Билет       = Билеты[СодержаниеОперации.ЗаменяемыйБилет];
		ПолученныеДанные.БилетЗамена = Билеты[СодержаниеОперации.ОсновнойБилет];
	КонецЕсли;
	
	// Вид операции влияет на заполнение документа
	ПолученныеДанные.Заполнить(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхБилетов

Функция СодержаниеОперацииСБилетом(ДанныеXDTO, ДействияАгента, ПодтверждающиеДокументы, КомпонентыОбмена)
	
	// Формат обмена предусматривает несколько действий в одной операции,
	// но загрузить мы можем только одну.
	// Поэтому свернем данные в одну операцию.
	
	// Одним документом может быть отражен один из вариантов:
	// 1. Покупка - заключение договора - оформление билета
	// 2. Доплата - изменение условий без оформления нового билета
	// 3. Замена  - изменение условий с оформлением нового билета
	// 4. Возврат - отказ от перевозки
	
	// При этом замена билета отражается парой операций:
	// a. "отмена" предыдущего билета
	// b. оформление нового билета
	
	// Если хотя бы в одной записи указан тип terminate, то вся операция соответствует отказу от перевозки.
	// Если ни в одной не указан terminate, но хотя бы в одной указан sign, то вся операция соответствует оформлению билета.
	ПриоритетОпераций = СтрРазделить("amend,sign,terminate",",");
	ТипОперации       = ПриоритетОпераций[0]; // Может быть скорректирован
	
	СуммарныеДанные = Новый Структура;
	СуммарныеДанные.Вставить("ВидОперации",          Перечисления.ВидыОперацийСБилетами.Покупка);
	СуммарныеДанные.Вставить("Комментарий",          "");
	СуммарныеДанные.Вставить("Сумма",                0);
	СуммарныеДанные.Вставить("СуммаНеОблагаемаяНДС", 0);
	СуммарныеДанные.Вставить("СтавкаНДС",            Перечисления.СтавкиНДС.ПустаяСсылка());
	СуммарныеДанные.Вставить("СуммаНДС",             0);
	СуммарныеДанные.Вставить("ОсновнойБилет",        ""); // номер
	СуммарныеДанные.Вставить("ЗаменяемыйБилет",      ""); // номер
	СуммарныеДанные.Вставить("Штраф",                0);// сумма сбора за отмену поездки
	
	// Соберем данные из всех операций пакета
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.ПустаяСсылка(); // В файле может содержаться НДС0 или БезНДС
	
	Для Каждого Запись Из ДанныеXDTO.Услуги Цикл
		
		Сумма    = Запись.Сумма;
		СуммаНДС = Запись.СуммаНДС;
		
		СуммарныеДанные.Сумма    = СуммарныеДанные.Сумма    + Сумма;
		СуммарныеДанные.СуммаНДС = СуммарныеДанные.СуммаНДС + СуммаНДС;
		
		Если СуммаНДС = 0 Тогда
			
			Если Не ЗначениеЗаполнено(СтавкаНДС0) Тогда
				СтавкаНДС = ЗначениеПеречисленияED(Запись.СтавкаНДС, КомпонентыОбмена);
				Если ЗначениеЗаполнено(СтавкаНДС) Тогда
					СтавкаНДС0 = СтавкаНДС;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если Не ЗначениеЗаполнено(СуммарныеДанные.СтавкаНДС) Тогда
				
				СтавкаНДС = ЗначениеПеречисленияED(Запись.СтавкаНДС, КомпонентыОбмена);
				Если ЗначениеЗаполнено(СтавкаНДС) Тогда
					СуммарныеДанные.СтавкаНДС = СтавкаНДС;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОписаниеДействия = ДействияАгента[XMLСтрока(Запись.НомерСтрокиДокумента)];
		Если ОписаниеДействия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипДействия = ОписаниеДействия["type"];
		ПриоритетДействия = ПриоритетОпераций.Найти(ТипДействия);
		
		Если ПриоритетДействия <> Неопределено 
			И ПриоритетДействия > ПриоритетОпераций.Найти(ТипОперации) Тогда
			ТипОперации = ТипДействия;
		КонецЕсли;
		
		Если ТипДействия = "terminate" И Сумма > 0 Тогда
			СуммарныеДанные.Штраф = СуммарныеДанные.Штраф + Сумма;
		КонецЕсли;
		
		НомерПодтверждающегоДокумента = ОписаниеДействия["receipt"];
		НомерДокументаПеревозки       = ОписаниеДействия["contract"];
		
		Если Не ЗначениеЗаполнено(НомерДокументаПеревозки) Тогда
			НомерДокументаПеревозки = НомерПодтверждающегоДокумента;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СуммарныеДанные.ОсновнойБилет) Тогда
			СуммарныеДанные.ОсновнойБилет = НомерДокументаПеревозки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НомерПодтверждающегоДокумента)
			И СуммарныеДанные.ОсновнойБилет <> НомерПодтверждающегоДокумента
			И Не ЗначениеЗаполнено(СуммарныеДанные.ЗаменяемыйБилет) Тогда
			СуммарныеДанные.ЗаменяемыйБилет = НомерПодтверждающегоДокумента;
		КонецЕсли;
		
		Если СуммаНДС <> 0 Тогда
			
			ДанныеНДС = ОписаниеДействия["vat"];
			Если ДанныеНДС <> Неопределено Тогда
				СуммаНеОблагаемаяНДС                 = Сумма - ДанныеНДС["amount"] - ДанныеНДС["net_sale"];
				СуммарныеДанные.СуммаНеОблагаемаяНДС = СуммарныеДанные.СуммаНеОблагаемаяНДС + СуммаНеОблагаемаяНДС;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СуммарныеДанные.Комментарий) Тогда
			СуммарныеДанные.Комментарий = Запись.Содержание;
		КонецЕсли;
		
	КонецЦикла;
	
	// Ставка НДС может определяться по данным записей без НДС, а может быть и не передана вовсе
	Если Не ЗначениеЗаполнено(СуммарныеДанные.СтавкаНДС) Тогда
		Если ЗначениеЗаполнено(СтавкаНДС0) Тогда
			СуммарныеДанные.СтавкаНДС = СтавкаНДС0;
		Иначе
			СуммарныеДанные.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЕсли;
	
	// Определим вид операции и свойства, зависящие от него
	Если ТипОперации = "terminate" Тогда
		
		СуммарныеДанные.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат;
		Если ЗначениеЗаполнено(СуммарныеДанные.ЗаменяемыйБилет) Тогда
			СуммарныеДанные.ОсновнойБилет = СуммарныеДанные.ЗаменяемыйБилет;
		КонецЕсли;
		
		ИнвертироватьОсновныеСуммы(СуммарныеДанные);
		
		// При прекращении поездки предполагается, что в "Операции"
		// сумма документа соответствует стоимости приобретенного билета,
		// а не сумме изменения обязательств.
		// Поэтому суммы документа должна быть скорректирована на сумму сбора за отмену (штрафа).
		// Также предполагается, что сбор за отмену не может облагаться НДС,
		// однако значение поля СуммаНеОблагаемаяНДС корректировать не надо,
		// так как оно заполнено только суммами по строкам, где НДС фактически есть.
		СуммарныеДанные.Сумма = СуммарныеДанные.Сумма + СуммарныеДанные.Штраф;
		
	ИначеЕсли ТипОперации = "amend" Тогда
		
		Если ЗначениеЗаполнено(СуммарныеДанные.ЗаменяемыйБилет)
			И СуммарныеДанные.ЗаменяемыйБилет <> СуммарныеДанные.ОсновнойБилет Тогда
		
			СуммарныеДанные.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат;
			ИнвертироватьОсновныеСуммы(СуммарныеДанные);
			
		ИначеЕсли СуммарныеДанные.Сумма < 0 Тогда
			
			СуммарныеДанные.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат; // Частичный возврат
			ИнвертироватьОсновныеСуммы(СуммарныеДанные);
			
		Иначе
			
			// Это может быть вторая половина операции замены билета.
			// Для нее следует использовать особый вид операции.
			ОсновнойБилетВыписанВзамен = Ложь;
			Для Каждого ОписаниеДокумента Из ПодтверждающиеДокументы Цикл
				
				НомерДокумента = ОписаниеДокумента["id"];
				Если НомерДокумента <> СуммарныеДанные.ОсновнойБилет Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОписаниеДокумента["type"] <> "ticket" Тогда
					Продолжить;
				КонецЕсли;
				
				СодержимоеБилета = ОписаниеДокумента["content"];
				
				Если Не ПустаяСтрока(СодержимоеБилета["in_exchange_for"])
					И СодержимоеБилета["in_exchange_for"] <> СуммарныеДанные.ОсновнойБилет Тогда
					ОсновнойБилетВыписанВзамен = Истина;
				КонецЕсли;
				
				Прервать;
				
			КонецЦикла;
			
			Если ОсновнойБилетВыписанВзамен Тогда
				СуммарныеДанные.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаПокупка;
			Иначе
				СуммарныеДанные.ВидОперации = Перечисления.ВидыОперацийСБилетами.Доплата;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СуммарныеДанные;
	
КонецФункции

// Меняет знак основных сумм в суммарных данных.
// В формате обмена данные передаются в модели "счет поставщика", со знаком:
// положительные суммы - это увеличение обязательств перед агентом,
// отрицательные - уменьшение.
// В документе суммы положительные, а их семантика определяется видом операции.
// Поэтому для отдельных видов операции суммы нужно инвертировать.
// Это относится к полям Сумма, СуммаНДС, СуммаНеОблагаемаяНДС
// и не относится к полю Штраф.
Процедура ИнвертироватьОсновныеСуммы(СуммарныеДанные)
	
	СуммарныеДанные.Сумма                = - СуммарныеДанные.Сумма;
	СуммарныеДанные.СуммаНДС             = - СуммарныеДанные.СуммаНДС;
	СуммарныеДанные.СуммаНеОблагаемаяНДС = - СуммарныеДанные.СуммаНеОблагаемаяНДС;
	
КонецПроцедуры

Функция Билет(СодержимоеБилета, Организация, КомпонентыОбмена)  
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Код",                  СодержимоеБилета["number"]);
	ДанныеЗаполнения.Вставить("ДатаПокупки",          СодержимоеБилета["date"]);
	ДанныеЗаполнения.Вставить("Перевозчик",           Контрагент(СодержимоеБилета["issuing_carrier"], КомпонентыОбмена));
	ДанныеЗаполнения.Вставить("Маршрут",              СодержимоеБилета["itinerary_desc"]);
	ДанныеЗаполнения.Вставить("Сотрудник",            Пассажир(СодержимоеБилета["passenger"], КомпонентыОбмена));
	ДанныеЗаполнения.Вставить("ДатаОтправления",      СодержимоеБилета["itinerary_start"]);
	ДанныеЗаполнения.Вставить("ДатаПрибытия",         СодержимоеБилета["itinerary_end"]);
	ДанныеЗаполнения.Вставить("Организация",          Организация);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.Билеты");
	ЭлементБлокировкиДанных.УстановитьЗначение("Код", ДанныеЗаполнения.Код);
	
	Ссылка = Справочники.Билеты.ПустаяСсылка();
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
	
		БилетСсылка = Справочники.Билеты.НайтиПоКоду(ДанныеЗаполнения.Код);
		Если ЗначениеЗаполнено(БилетСсылка) Тогда
			Билет = БилетСсылка.ПолучитьОбъект();
		Иначе
			Билет = Справочники.Билеты.СоздатьЭлемент();
		КонецЕсли;
		
		Билет.Заполнить(ДанныеЗаполнения);
		
		Билет.ОбменДанными.Загрузка = Истина;
		Билет.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Ссылка = Билет.Ссылка;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ШаблонТекстаОшибки = НСтр("ru = 'Ошибка при загрузке билета #%1.
                                   |%2'", Метаданные.ОсновнойЯзык.КодЯзыка);
		
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, ДанныеЗаполнения.Код, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			КомпонентыОбмена.КлючСообщенияЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Билеты,
			БилетСсылка,
			ТекстОшибки);
			
		ВызватьИсключение;
		
	КонецПопытки;
	
	РасширениеEnterpriseData.ДополнитьЗагруженныеОбъекты(КомпонентыОбмена, Ссылка, Билет);
	
	Возврат Ссылка;
	
КонецФункции

Процедура ПрисоединитьФайлы(Билет, ПриложенныеФайлы, КомпонентыОбмена)
	
	Если Не ЗначениеЗаполнено(Билет) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПриложенныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСФайлами.КОбъектуМожноПрисоединятьФайлы(Билет) Тогда
		Возврат;
	КонецЕсли;
	
	РанееПрисоединенныеФайлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Билет, РанееПрисоединенныеФайлы);
	
	КешРанееПрисоединенныеФайлы = Новый Соответствие;
	
	Для Каждого ОписаниеФайла Из ПриложенныеФайлы Цикл
		
		ИмяФайла    = ОписаниеФайла["name"];
		ДанныеФайла = Base64Значение(ОписаниеФайла["data"]);
		
		ЭлементыИмени = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
		
		ФайлПрисоединенРанее = ФайлПрисоединенРанее(
			ЭлементыИмени.ИмяБезРасширения,
			ЭлементыИмени.Расширение,
			ДанныеФайла,
			РанееПрисоединенныеФайлы,
			КешРанееПрисоединенныеФайлы);
		
		Если ФайлПрисоединенРанее Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеФайла = ИмяФайла;
		АдресДанныхФайла   = ПоместитьВоВременноеХранилище(ДанныеФайла);
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("ВладелецФайлов",     Билет);
		ОписаниеФайла.Вставить("ИмяБезРасширения",   ЭлементыИмени.ИмяБезРасширения);
		ОписаниеФайла.Вставить("РасширениеБезТочки", СтрЗаменить(ЭлементыИмени.Расширение, ".", ""));
		ОписаниеФайла.Вставить("Автор",              Пользователи.ТекущийПользователь());
		ОписаниеФайла.Вставить("ВремяИзмененияУниверсальное");
		ОписаниеФайла.Вставить("ГруппаФайлов");
		
		Файл = РаботаСФайлами.НоваяСсылкаНаФайл(Билет);
		РаботаСФайлами.ДобавитьФайл(ОписаниеФайла, АдресДанныхФайла, "", ПредставлениеФайла, Файл);
		
		РасширениеEnterpriseData.ДополнитьЗагруженныеОбъекты(КомпонентыОбмена, Файл);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ФайлПрисоединенРанее(Имя, Расширение, Данные, СохраненныеФайлы, КешСохраненныеФайлы)
	
	Если Не ЗначениеЗаполнено(СохраненныеФайлы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолноеИмяПолученногоФайла        = Имя + Расширение;
	КонтрольнаяСуммаПолученногоФайла = Неопределено;
	
	Для Каждого Файл Из СохраненныеФайлы Цикл
		
		ДанныеФайла = КешСохраненныеФайлы[Файл];
		Если ДанныеФайла = Неопределено Тогда
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(Файл, , Ложь, Ложь);
			КешСохраненныеФайлы.Вставить(Файл, ДанныеФайла);
		КонецЕсли;
		
		Если ДанныеФайла.ИмяФайла <> ПолноеИмяПолученногоФайла Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеФайла.Размер <> Данные.Размер() Тогда
			Продолжить;
		КонецЕсли;
		
		Если КонтрольнаяСуммаПолученногоФайла = Неопределено Тогда
			КонтрольнаяСуммаПолученногоФайла = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Данные);
		КонецЕсли;
		
		Если ДанныеФайла.Свойство("КонтрольнаяСумма") Тогда
			КонтрольнаяСуммаСохраненногоФайла = ДанныеФайла.КонтрольнаяСумма;
		Иначе
			СодержимоеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Файл);
			КонтрольнаяСуммаСохраненногоФайла = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(СодержимоеФайла);
			ДанныеФайла.Вставить("КонтрольнаяСумма", КонтрольнаяСуммаСохраненногоФайла);
		КонецЕсли;
		
		Если КонтрольнаяСуммаПолученногоФайла = КонтрольнаяСуммаСохраненногоФайла Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция Пассажир(ОписаниеПассажира, КомпонентыОбмена)
	
	Если Не ЗначениеЗаполнено(ОписаниеПассажира) Тогда
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
		
	Пол = ?(
		ОписаниеПассажира["gender"] = "female",
		Перечисления.ПолФизическогоЛица.Женский,
		Перечисления.ПолФизическогоЛица.Мужской);
		
	УникальныйИдентификатор = Неопределено;
	UUID = ОписаниеПассажира["uuid"];
	Если ЗначениеЗаполнено(UUID) Тогда
		Попытка
			УникальныйИдентификатор = Новый УникальныйИдентификатор(UUID);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ЭтоНовый = Ложь;
	
	Ссылка = УчетЗарплаты.ФизическоеЛицо(
		ОписаниеПассажира["last_name"],
		ОписаниеПассажира["first_name"],
		ОписаниеПассажира["patronymic"],
		Пол,
		ОписаниеПассажира["birthdate"],
		ОписаниеПассажира["documents"],
		УникальныйИдентификатор,
		ЭтоНовый);
		
	Если ЭтоНовый Тогда
		РасширениеEnterpriseData.ДополнитьЗагруженныеОбъекты(КомпонентыОбмена, Ссылка);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция Контрагент(ОписаниеКонтрагента, КомпонентыОбмена)
	
	Идентификаторы = ОписаниеКонтрагента["id"];
	
	// Поиск (создание) механизмами ED
	Возврат КонтрагентED(
		Идентификаторы["UUID"],
		Идентификаторы["TXID"],
		ОписаниеКонтрагента["name"],
		КомпонентыОбмена);
	
КонецФункции

Функция КонтрагентED(Ссылка, ИНН, Наименование, КомпонентыОбмена)
	
	Правило = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Контрагенты_Получение");
	
	КонтрагентED = Новый Структура;
	КонтрагентED.Вставить("ЭтоНаборКлючевыхСвойств");
	КонтрагентED.Вставить("ТипЗначения",               "Контрагент");
	КонтрагентED.Вставить("Наименование",              Наименование);
	КонтрагентED.Вставить("НаименованиеПолное",        Наименование);
	КонтрагентED.Вставить("ЮридическоеФизическоеЛицо", ЮридическоеЛицоED(КомпонентыОбмена));
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		КонтрагентED.Вставить("ИНН", ИНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
	
		КонтрагентED.Вставить("Ссылка", НовыйСсылкаED());
		КонтрагентED.Ссылка.Значение        = Ссылка;
		КонтрагентED.Ссылка.ТипЗначенияXDTO = Правило.ТипXDTO;
		КонтрагентED.Ссылка.ЭтоСсылка       = Истина;
		
	КонецЕсли;
	
	Возврат СсылкаED(КонтрагентED, Правило, КомпонентыОбмена);
	
КонецФункции

Функция ЮридическоеЛицоED(КомпонентыОбмена)
	
	ЮридическоеФизическоеЛицо = НовыйСсылкаED();
	ЮридическоеФизическоеЛицо.Вставить("ЭтоПеречисление", Истина);
	ЮридическоеФизическоеЛицо.Вставить("Значение",        "ЮридическоеЛицо");
	ЮридическоеФизическоеЛицо.Вставить(
		"ТипЗначенияXDTO",
		ТипXDTOПеречисленияED(Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо"), КомпонентыОбмена));
	
	Возврат ЮридическоеФизическоеЛицо;
	
КонецФункции

#КонецОбласти

#Область ОбщиеМетодыEnterpriseData

Функция НовыйСсылкаED()
	
	ОписаниеСсылки = Новый Структура;
	ОписаниеСсылки.Вставить("Значение", "");
	ОписаниеСсылки.Вставить("ТипЗначенияXDTO");
	ОписаниеСсылки.Вставить("ЭтоПеречисление", Ложь);
	ОписаниеСсылки.Вставить("ЭтоСсылка",       Ложь);
	
	Возврат ОписаниеСсылки;

КонецФункции

Функция СсылкаED(НаборСвойствED, Знач Правило, КомпонентыОбмена)
	
	Если ТипЗнч(Правило) = Тип("Строка") Тогда
		Правило = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, Правило);
	КонецЕсли;
	
	ДанныеED = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, НаборСвойствED, Правило, "КонвертироватьИЗаписать");
	
	Возврат ДанныеED.Ссылка;
		
КонецФункции

Функция ТипXDTOПеречисленияED(Тип, КомпонентыОбмена)
	
	Правило = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти(Тип, "ТипДанных");
	Если Правило = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Правило.ТипXDTO;
	
КонецФункции

Функция ЗначениеПеречисленияED(ОписаниеЗначения, КомпонентыОбмена)
	
	Ссылка = НовыйСсылкаED();
	
	ЗаполнитьЗначенияСвойств(Ссылка, ОписаниеЗначения);
	
	Если Не Ссылка.ЭтоПеречисление Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Правило = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти(Ссылка.ТипЗначенияXDTO, "ТипXDTO");
	Если Правило = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Правило.КонвертацииЗначенийПриПолучении[Ссылка.Значение];
	
КонецФункции

#КонецОбласти
