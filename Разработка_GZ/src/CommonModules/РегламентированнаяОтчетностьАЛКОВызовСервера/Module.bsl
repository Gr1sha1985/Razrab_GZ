////////////////////////////////////////////////////////////////////////////////
// Серверные (с возможностью вызова из клиентского кода) процедуры и функции 
// регламентированных отчетов ФСРАР общего назначения:
// - для работы с длительными операциями;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс


#Область ДлительныеОперации

// Определяет завершена длительная операция корректно, или в результате ошибки.
//
// Параметры:
//		АдресВоВременномХранилище - Строка - Адрес временного хранилища, 
//									в котором должен быть помещен результат выполнения.
//
// Возвращаемое значение:
//		Булево - Истина, если длительная операция завершена корректно.
//
//
Функция ПроверитьКорректностьЗавершения(АдресВоВременномХранилище) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		Возврат (НЕ Результат = Неопределено);
	Иначе
		Возврат Ложь;	
	КонецЕсли;

КонецФункции

// Оболочка для вызова из клиентского кода ДлительныеОперации.ПрочитатьПрогресс.
// Считывает информацию о ходе выполнения фонового задания.
//
// Параметры:
//		ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
//
// Возвращаемое значение:
//		Неопределено, Структура 		- 	информация о ходе выполнения фонового задания, 
//										записанная процедурой ДлительныеОперации.СообщитьПрогресс:
//    		* Процент                 - Число  - Необязательный. Процент выполнения.
//			* Текст                   - Строка - Необязательный. Информация о текущей операции.
//			* ДополнительныеПараметры - Произвольный - Необязательный. Любая дополнительная информация.
//
Функция ПолучитьИнформациюИзФоновойЗадачи(ИдентификаторЗадания) Экспорт

	Информация = ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
		
	Возврат Информация;
	
КонецФункции

// Проверяет завершение длительной операции по идентификатору.
//
// Параметры:
//		ИдентификаторЗадания 	- УникальныйИдентификатор - идентификатор фонового задания.
//		СообщениеОбОшибке	  	- Строка - возвращает сообщение об ошибке.
//
// Возвращаемое значение:
//		Булево - Истина, если длительная операция завершена, в том числе с ошибками.
//
Функция ПроверитьВыполнениеЗадания(ИдентификаторЗадания, СообщениеОбОшибке) Экспорт
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьВыполнениеЗадания(ИдентификаторЗадания, СообщениеОбОшибке);
		
КонецФункции

// см. РегламентированнаяОтчетностьАЛКО.ПолучитьРезультатПроверкиАЛКО().
Функция ПолучитьРезультатПроверкиОтчетаАЛКО(АдресВоВременномХранилище) Экспорт
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьРезультатПроверкиАЛКО(АдресВоВременномХранилище);
		
КонецФункции

Процедура ОпределитьПараметрыОбработчикаОжиданияАЛКО(МаксимальныйИнтервал, КоэффициентУвеличенияИнтервала) Экспорт

	РегламентированнаяОтчетностьАЛКО.ОпределитьПараметрыОбработчикаОжиданияАЛКО(МаксимальныйИнтервал, КоэффициентУвеличенияИнтервала);

КонецПроцедуры
 
#КонецОбласти

// Проверяет подключение организации к 1С-Отчетности и к сдаче на портале ФСРАР.
//
// Параметры:
//		ОрганизацияОтчета - Справочник.Организации.Ссылка - Организация, подключение которой проверяется.
//
// Возвращаемое значение:
//		Структура, со свойствами
// 			* ФСРАР 		- Булево, Истина, если организация подключена к сдаче отчетности в ФСРАР.
// 			* Отчетность 	- Булево, Истина, если организация подключена к сдаче отчетности в 1С-Отчетности.
//
Функция ОрганизацияПодключенаК1СОтчетностиИкФСРАР(ОрганизацияОтчета) Экспорт

	Результат = Новый Структура;
	
	ПодключенаКФСРАР = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(ОрганизацияОтчета, Перечисления.ТипыКонтролирующихОрганов.ФСРАР);
	Результат.Вставить("ФСРАР", ПодключенаКФСРАР);
	Если ПодключенаКФСРАР Тогда
		
		Результат.Вставить("Отчетность", Истина);
		
	Иначе
		
		ПодключенаК1СОтчетности = ИнтерфейсыВзаимодействияБРО.ОрганизацияИмеетУчетнуюЗапись(ОрганизацияОтчета);
		Результат.Вставить("Отчетность", ПодключенаК1СОтчетности);
		
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

// Сравнивает текущую версии подсистемы с переданным значением,
// возвращая результат сравнения >=.
//
// Параметры
//  ИмяПодсистемы  	- Строка - имя подсистемы, определенное в конфигурации.
//	ВерсияСравнения - Строка - Строка версии вида "0.0.0.0".
//	ТекущаяВерсия	- Строка - в параметре возвращается текущая версия подсистемы.
//
// Возвращаемое значение:
//   Булево. Истина, если ТекущаяВерсия >= ВерсияСравнения.
Функция СравнениеВерсииПодсистемы(ИмяПодсистемы, ВерсияСравнения, ТекущаяВерсия = Неопределено) Экспорт

	ТекущаяВерсия = РегламентированнаяОтчетностьАЛКО.ВерсияПодсистемыКонфигурации(ИмяПодсистемы);
	
	ТекущаяВерсияЧислом = РегламентированнаяОтчетностьАЛКО.ПолучитьВерсиюЧислом(ТекущаяВерсия);
	ВерсияСравненияЧислом = РегламентированнаяОтчетностьАЛКО.ПолучитьВерсиюЧислом(ВерсияСравнения);
	
	Возврат (ТекущаяВерсияЧислом >= ВерсияСравненияЧислом);

КонецФункции
 
// Формирует пустую структуру сведений по обособленному подразделению, 
// состоящей из Наименования, КПП и адресной информации.
//
// Параметры:
// 		Нет.
// Возвращаемое значение:
// 		Структура, со свойствами:
//			
//			* УникальныйНомерФИАС 	- Уникальный идентификатор адреса в системе ФИАС.
//			* ДополнительныеКоды	- пустая структура
//			* КодСтраны
//			* Страна
//			* Индекс
//			* КодРегиона
//			* Регион
//			* Район
//			* Город
//			* НаселенныйПункт
//			* Улица
//			* Дом
//			* Корпус
//			* Литера
//			* Квартира
//
//			* ТипДома
//			* ТипКорпуса
//			* ТипКвартиры
//
//			* ПредставлениеАдреса
//			* АдресXML				- XML представление адреса подсистемы УправлениеКонтактнойИнформацией
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьПустуюСтруктуруАдреса();

КонецФункции

// Формирует пустую структуру сведений по обособленному подразделению, 
// состоящей из Наименования, КПП и адресной информации.
//
// Параметры:
// 		Нет.
// Возвращаемое значение:
// 		Структура, со свойствами:
//			* Наименование 			- Наимкенование ОП.
//			* КПП					- КПП ОП.
//			Адресные поля
//			* УникальныйНомерФИАС 	- Уникальный идентификатор адреса в системе ФИАС.
//			* ДополнительныеКоды	- пустая структура
//			* КодСтраны
//			* Страна
//			* Индекс
//			* КодРегиона
//			* Регион
//			* Район
//			* Город
//			* НаселенныйПункт
//			* Улица
//			* Дом
//			* Корпус
//			* Литера
//			* Квартира
//			* ПредставлениеАдреса
//			* АдресXML				- XML представление адреса подсистемы УправлениеКонтактнойИнформацией.
Функция ПолучитьПустуюСтруктуруСведенийОбОП() Экспорт

	 Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьПустуюСтруктуруСведенийОбОП();

КонецФункции

// Формирует структуру описания регламентированного отчета.
//
// Параметры:
// 		ДокументРегОтчет - Документ.РегламентированныйОтчет
//
// Возвращаемое значение:
// 		Структура, со свойствами:
//		* Организация 				- Справочник.Организации
//		* ДатаНачалаПериодаОтчета 	- Дата
//		* ДатаКонцаПериодаОтчета 	- Дата
//		* КорректирующаяФорма 		- Булево, признак корректирующего отчета.
//		* ВыбраннаяФорма 			- Строка, имя формы отчета, соответствующей периоду отчета.
//		* ИсточникОтчета 			- Строка, имя объекта метаданных регламентированного отчета.
//		* НаименованиеОтчета 		- Строка
Функция ОписаниеРегОтчета(ДокументРегОтчет) Экспорт
	
	Если НЕ ТипЗнч(ДокументРегОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеРегОтч = Новый Структура;
	
	ОбъектРегОтч = ДокументРегОтчет.ПолучитьОбъект();
	
	Если НЕ ОбъектРегОтч = Неопределено Тогда
			
		ОписаниеРегОтч.Вставить("Организация",             ОбъектРегОтч.Организация);
		ОписаниеРегОтч.Вставить("ДатаНачалаПериодаОтчета", ОбъектРегОтч.ДатаНачала);
		ОписаниеРегОтч.Вставить("ДатаКонцаПериодаОтчета",  ОбъектРегОтч.ДатаОкончания);
		ОписаниеРегОтч.Вставить("КорректирующаяФорма",     ОбъектРегОтч.Вид > 0);
		ОписаниеРегОтч.Вставить("ВыбраннаяФорма",          СокрЛП(ОбъектРегОтч.ВыбраннаяФорма));
		
		ОписаниеРегОтч.Вставить("ИсточникОтчета",	  СокрЛП(ОбъектРегОтч.ИсточникОтчета));
		ОписаниеРегОтч.Вставить("НаименованиеОтчета", СокрЛП(ОбъектРегОтч.НаименованиеОтчета));
		
		Возврат ОписаниеРегОтч;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ОпределитьНачалоКонецОтчета(ДокументРегОтчет) Экспорт

	ОписаниеОтчета = ОписаниеРегОтчета(ДокументРегОтчет);
		
	Если НЕ ОписаниеОтчета = Неопределено Тогда
	
		ДатаНачалаОтчета = ОписаниеОтчета.ДатаНачалаПериодаОтчета;		
		ДатаКонцаОтчета = ОписаниеОтчета.ДатаКонцаПериодаОтчета;		
				
	Иначе
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКОВызовСервера.ОпределитьНачалоКонецОтчета()
						|передана неверная ссылка на документ регламентированного отчета";		
	КонецЕсли;	
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаНачалаОтчета", ДатаНачалаОтчета);
	Результат.Вставить("ДатаКонцаОтчета", ДатаКонцаОтчета);
	
	Возврат Результат;

КонецФункции

Функция ОпределитьВидыКонтактнойИнформацииДляВводаАдреса() Экспорт
	
	Возврат РегламентированнаяОтчетностьАЛКО.ОпределитьВидыКонтактнойИнформацииДляВводаАдреса();
	
КонецФункции

Процедура РазблокироватьДанныеОтчета(Ключ, ИдентификаторФормы) Экспорт

	РазблокироватьДанныеДляРедактирования(Ключ, ИдентификаторФормы);

КонецПроцедуры

Процедура ВводАдресаКонтрагентаЗавершениеНаСервере(Результат, ПредставлениеАдреса, ПолеСтруктурыАдреса,
				 Модифицированность = Ложь, СтруктураАдреса = Неопределено) Экспорт
				
	РегламентированнаяОтчетностьАЛКО.ВводАдресаКонтрагентаЗавершениеНаСервере(Результат, 
							ПредставлениеАдреса, ПолеСтруктурыАдреса, Модифицированность, СтруктураАдреса);
				
КонецПроцедуры

Функция СтруктураАдресаИзСтрокиСтруктурыХранения(ПолеСтруктурыАдреса) Экспорт

	Возврат РегламентированнаяОтчетностьАЛКО.СтруктураАдресаИзСтрокиСтруктурыХранения(ПолеСтруктурыАдреса);
	
КонецФункции

Функция ВерсияПлатформы() Экспорт

	ВерсияПлатформы = РегламентированнаяОтчетностьАЛКОПовтИсп.ВерсияПлатформы();
	// Используем функцию преобразования Строка() для копирования значения.
	Возврат Строка(ВерсияПлатформы);

КонецФункции

Функция РежимСовместимостиКонфигурацииСПлатформой() Экспорт

	РежимСовместимости = РегламентированнаяОтчетностьАЛКОПовтИсп.РежимСовместимости();
	// Системное перечисление неудобно в обработке - приводим к строке.
	Возврат Строка(РежимСовместимости);
	
КонецФункции
 
#КонецОбласти
