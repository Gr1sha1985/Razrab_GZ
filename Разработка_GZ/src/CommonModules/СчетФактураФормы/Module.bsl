
#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьУсловноеОформлениеИсправлениеСобственнойОшибки(Форма) Экспорт
	
	ПоляПроверкиРасхождений = ПоляПроверкиРасхождений(Форма);
	ДобавитьУсловноеОформлениеРасхождений(Форма, ПоляПроверкиРасхождений);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеФормыПродавцы(Форма) Экспорт
	
	ПоляПроверкиРасхождений = ПоляПроверкиРасхождений(Форма);
	ДобавитьУсловноеОформлениеРасхождений(Форма, ПоляПроверкиРасхождений);
	ДобавитьУсловноеОформлениеКолонокФормыПродавцы(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсловноеОформление

Функция ПоляПроверкиРасхождений(Форма)
	
	Результат = Новый Массив();
	
	Если Форма.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаПродавцы" Тогда
		ПоляПроверкиРасхожденийСчетФактураПолученныйФормаПродавцы(Результат);
	
	ИначеЕсли Форма.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокументаИсправлениеСобственнойОшибки" Тогда
		ПоляПроверкиРасхожденийСчетФактураПолученный(Результат);
	
	ИначеЕсли Форма.ИмяФормы = "Документ.КорректировкаПоступления.Форма.ФормаДокумента" Тогда
		ПоляПроверкиРасхожденийКорректировкаПоступления(Результат);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПоляПроверкиРасхожденийКорректировкаПоступления(Результат)
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "НомерСчетаФактурыПослеИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "НомерСчетаФактурыДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "НомерСчетаФактурыПослеИзменения";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "НомерИсправленияСчетаФактурыПослеИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "НомерИсправленияСчетаФактурыДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "НомерИсправленияСчетаФактурыПослеИзменения";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "ДатаСчетаФактурыПослеИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "ДатаСчетаФактурыДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "ДатаСчетаФактурыПослеИзменения";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "ИННКонтрагента";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "ИННКонтрагентаДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "ИННКонтрагента";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "КППКонтрагента";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "КППКонтрагентаДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "КППКонтрагента";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "КодВидаОперацииСчетаФактурыПослеИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "КодВидаОперацииСчетаФактурыДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "КодВидаОперацииСчетаФактурыПослеИзменения";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "КодВидаОперацииСчетаФактурыНаУменьшениеПослеИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "КодВидаОперацииСчетаФактурыНаУменьшениеДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "КодВидаОперацииСчетаФактурыНаУменьшениеПослеИзменения";
	Результат.Добавить(ПолеПроверки);
	
КонецПроцедуры

Процедура ПоляПроверкиРасхожденийСчетФактураПолученный(Результат)
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "НомерСчетаФактуры";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "Объект.НомерВходящегоДокументаДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "Объект.НомерВходящегоДокумента";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "ДатаСчетаФактуры";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "Объект.ДатаВходящегоДокументаДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "Объект.ДатаВходящегоДокумента";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "НомерИсправления";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "Объект.НомерИсправленияДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "Объект.НомерИсправления";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "ДатаИсправления";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "Объект.ДатаИсправленияДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "Объект.ДатаИсправления";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "ИННКонтрагента";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "Объект.ИННКонтрагентаДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "Объект.ИННКонтрагента";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "КППКонтрагента";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "Объект.КППКонтрагентаДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "Объект.КППКонтрагента";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "КодВидаОперации";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "Объект.КодВидаОперацииДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "Объект.КодВидаОперации";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "КодВидаОперацииНаУменьшение";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "Объект.КодВидаОперацииНаУменьшениеДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "Объект.КодВидаОперацииНаУменьшение";
	Результат.Добавить(ПолеПроверки);
	
КонецПроцедуры

Процедура ПоляПроверкиРасхожденийСчетФактураПолученныйФормаПродавцы(Результат)
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "ПродавцыИННПродавца";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "Продавцы.ИННПродавцаДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "Продавцы.ИННПродавца";
	Результат.Добавить(ПолеПроверки);
	
	ПолеПроверки = НовыйПолеПроверки();
	ПолеПроверки.ОформляемоеПоле            = "ПродавцыКПППродавца";
	ПолеПроверки.ПутьКРеквизитуУсловияЛево  = "Продавцы.КПППродавцаДоИзменения";
	ПолеПроверки.ПутьКРеквизитуУсловияПраво = "Продавцы.КПППродавца";
	Результат.Добавить(ПолеПроверки);
	
КонецПроцедуры

Функция НовыйПолеПроверки()
	
	Результат = Новый Структура();
	Результат.Вставить("ОформляемоеПоле"           , "");
	Результат.Вставить("ПутьКРеквизитуУсловияЛево" , "");
	Результат.Вставить("ПутьКРеквизитуУсловияПраво", "");
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьУсловноеОформлениеРасхождений(Форма, ПоляПроверкиРасхождений)
	
	Для Каждого ПолеПроверки Из ПоляПроверкиРасхождений Цикл
		
		ДобавитьУсловноеОформлениеЗначениеОтличается(Форма,
			ПолеПроверки.ОформляемоеПоле,
			ПолеПроверки.ПутьКРеквизитуУсловияЛево,
			ПолеПроверки.ПутьКРеквизитуУсловияПраво);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеЗначениеОтличается(Форма, ОформляемоеПоле, ПутьКРеквизитуУсловияЛево, ПутьКРеквизитуУсловияПраво)
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ОформляемоеПоле);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		ПутьКРеквизитуУсловияЛево, ВидСравненияКомпоновкиДанных.Равно, Новый ПолеКомпоновкиДанных(ПутьКРеквизитуУсловияПраво));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Ложь));
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ОформляемоеПоле);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		ПутьКРеквизитуУсловияЛево, ВидСравненияКомпоновкиДанных.НеРавно, Новый ПолеКомпоновкиДанных(ПутьКРеквизитуУсловияПраво));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина));
	
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеКолонокФормыПродавцы(Форма)
	
	Если Форма.ЭтоИсправлениеСобственнойОшибки Тогда
		
		ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПродавцыНадписьИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "Продавцы.НадписьИНН",
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ИНН:'"));
		
		ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПродавцыНадписьКПП");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "Продавцы.НадписьКПП",
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='КПП:'"));
		
		ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПродавцыНадписьКПП");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПродавцыКПППродавцаДоИзменения");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПродавцыКПППродавца");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Продавцы.ЭтоЮрЛицо", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	Иначе
		
		ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПродавцыНадписьИНН");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПродавцыНадписьКПП");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПродавцыИННПродавцаДоИзменения");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПродавцыКПППродавцаДоИзменения");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПродавцыИННПродавца");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПродавцыКПППродавца");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ЭтоИсправлениеСобственнойОшибки", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФорматноЛогическийКонтроль

Функция ФорматныйКонтрольИННКППИсправлениеСобственнойОшибкиПройден(ДанныеФормы) Экспорт
	
	ДанныеОбъекта = ДанныеФормы.Объект;
	Ссылка = ДанныеОбъекта.Ссылка;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления")
		И НЕ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
		И НЕ ДанныеОбъекта.ИсправлениеСобственнойОшибки Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = ДанныеОбъекта.Контрагент;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Объект в данном случае может отсутствовать в ИБ, поэтому запрос к нему выполнять нельзя.
	ИННХранитсяВДанныхОбъекта = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеФормы, "ИННКонтрагента") Тогда
		ИННКонтрагента = ДанныеФормы.ИННКонтрагента;
	Иначе
		ИННКонтрагента = ДанныеОбъекта.ИННКонтрагента;
		ИННХранитсяВДанныхОбъекта = Истина;
	КонецЕсли;
	
	КППХранитсяВДанныхОбъекта = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеФормы, "КППКонтрагента") Тогда
		КППКонтрагента = ДанныеФормы.КППКонтрагента;
	Иначе
		КППКонтрагента = ДанныеОбъекта.КППКонтрагента;
		КППХранитсяВДанныхОбъекта = Истина;
	КонецЕсли;
	
	Результат = Истина;
	
	СтруктураДляПроверки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Контрагент,
		"ЮридическоеФизическоеЛицо, ОбособленноеПодразделение");
	
	СтруктураДляПроверки.Вставить("ИНН", ИННКонтрагента);
	СтруктураДляПроверки.Вставить("ИННВведенКорректно", Ложь);
	
	СтруктураДляПроверки.Вставить("КПП", КППКонтрагента);
	СтруктураДляПроверки.Вставить("КППВведенКорректно", Ложь);
	
	ЭтоЮрЛицо = (СтруктураДляПроверки.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	// Если хотя бы одно поле заполнено, то обязательно проверяем оба. Так как отдельно ИНН или КПП не имеет смысла
	Если ЭтоЮрЛицо Тогда
		Если ЗначениеЗаполнено(СтруктураДляПроверки.ИНН) ИЛИ ЗначениеЗаполнено(СтруктураДляПроверки.КПП) Тогда
			СтруктураДляПроверки.Вставить("ПроверитьИНН", НЕ СтруктураДляПроверки.ИННВведенКорректно);
			СтруктураДляПроверки.Вставить("ПроверитьКПП", НЕ СтруктураДляПроверки.КППВведенКорректно);
		Иначе
			СтруктураДляПроверки.Вставить("ПроверитьИНН", Ложь);
			СтруктураДляПроверки.Вставить("ПроверитьКПП", Ложь);
		КонецЕсли;
	Иначе
		СтруктураДляПроверки.Вставить("ПроверитьИНН", (ЗначениеЗаполнено(СтруктураДляПроверки.ИНН) И НЕ СтруктураДляПроверки.ИННВведенКорректно));
		СтруктураДляПроверки.Вставить("ПроверитьКПП", Ложь);
	КонецЕсли;
	
	Если СтруктураДляПроверки.ПроверитьИНН Тогда
		РезультатПроверки =  ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(СтруктураДляПроверки.ИНН, ЭтоЮрЛицо);
		Если НЕ РезультатПроверки.СоответствуетТребованиям ИЛИ ЭтоЮрЛицо <> РезультатПроверки.ЭтоЮрЛицо Тогда
			Результат = Ложь;
			ТекстОшибкиИНН = СтрШаблон(
				НСтр("ru='Неверно указан ИНН: %1.
				|%2.'"),
				СтруктураДляПроверки.ИНН,
				РезультатПроверки.ОписаниеОшибки);
			Если ИННХранитсяВДанныхОбъекта Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИНН, Ссылка, "Объект.ИННКонтрагента");
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИНН, Ссылка, , "ИННКонтрагента");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДляПроверки.ПроверитьКПП Тогда
		РезультатПроверки =  ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(СтруктураДляПроверки.КПП, ЭтоЮрЛицо, Ложь);
		Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
			Результат = Ложь;
			
			Если ПустаяСтрока(СтруктураДляПроверки.КПП) Тогда
				ТекстОшибкиКПП = НСтр("ru='Не указан КПП.'");
			ИначеЕсли РезультатПроверки.ОписаниеОшибки = "Введен КПП обособленного подразделения. Измените вид контрагента" Тогда
				// Если указан КПП обособленного контрагента в счет-фактуре, то не считаем ошибкой некорректный вид контрагента.
				Результат = Истина;
			Иначе
				ТекстОшибкиКПП = СтрШаблон(
					НСтр("ru='Неверно указан КПП: %1.
					|%2.'"),
					СтруктураДляПроверки.КПП,
					РезультатПроверки.ОписаниеОшибки);
			КонецЕсли;
			
			Если НЕ Результат Тогда
				Если КППХранитсяВДанныхОбъекта Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиКПП, Ссылка, "Объект.КППКонтрагента");
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиКПП, Ссылка, , "КППКонтрагента");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти