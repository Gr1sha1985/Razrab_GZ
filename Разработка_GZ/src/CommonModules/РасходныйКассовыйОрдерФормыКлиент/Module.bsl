
#Область ОбработчикиСобытийФормы

Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(Форма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
			КлючеваяОперация = "ПроведениеРасходныйКассовыйОрдерУплатаНалога";
		Иначе
			КлючеваяОперация = "ПроведениеРасходныйКассовыйОрдер";
		КонецЕсли;
		
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Оповестить("ОбновитьФорму", Форма.ВладелецФормы, Объект.Ссылка);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
		ПараметрыНалога = Новый Структура;
		ПараметрыНалога.Вставить("Организация",       Объект.Организация);
		ПараметрыНалога.Вставить("Налог",             Объект.Налог);
		ПараметрыНалога.Вставить("ДокументОснование", Объект.ДокументОснование);
		ПараметрыНалога.Вставить("ПоказательПериода", Объект.ПоказательПериода);
		ПараметрыНалога.Вставить("КБК",               Объект.КодБК);
		ПараметрыНалога.Вставить("ОКАТО",             Объект.КодОКАТО);
		ПараметрыНалога.Вставить("Ссылка",            Объект.Ссылка);
		ПараметрыНалога.Вставить("Оплачено",          Истина);
		ПараметрыНалога.Вставить("Сумма",             Объект.СуммаДокумента);
		Оповестить("Запись_ПлатежныйДокумент_УплатаНалогов", ПараметрыНалога);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику") Тогда
		ПараметрыЗарплаты = Новый Структура;
		ПараметрыЗарплаты.Вставить("Организация", Объект.Организация);
		ПараметрыЗарплаты.Вставить("Ведомость",   Объект.ПлатежнаяВедомость);
		ПараметрыЗарплаты.Вставить("Ссылка",      Объект.Ссылка);
		ПараметрыЗарплаты.Вставить("Оплачено",    НЕ Объект.ПометкаУдаления);
		Оповестить("Запись_ПлатежныйДокумент_ВыплатаЗарплаты", ПараметрыЗарплаты);
		Оповестить("ИзменениеОплатыВедомости", ПараметрыЗарплаты);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям") Тогда
		Ведомости = Новый Массив;
		Для Каждого СтрокаТаблицы ИЗ Объект.ВыплатаЗаработнойПлаты Цикл
			Ведомости.Добавить(СтрокаТаблицы.Ведомость);
		КонецЦикла;
		ПараметрыЗарплаты = Новый Структура;
		ПараметрыЗарплаты.Вставить("Организация", Объект.Организация);
		ПараметрыЗарплаты.Вставить("Ведомости",   Ведомости);
		ПараметрыЗарплаты.Вставить("Ссылка",      Объект.Ссылка);
		ПараметрыЗарплаты.Вставить("Оплачено",    НЕ Объект.ПометкаУдаления);
		Оповестить("Запись_ПлатежныйДокумент_ВыплатаЗарплаты", ПараметрыЗарплаты);
		Оповестить("ИзменениеОплатыВедомости", ПараметрыЗарплаты);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда") Тогда
		ПараметрыЗарплаты = Новый Структура;
		ПараметрыЗарплаты.Вставить("Организация", Объект.Организация);
		ПараметрыЗарплаты.Вставить("Ведомость",   Объект.ПлатежнаяВедомость);
		ПараметрыЗарплаты.Вставить("Ссылка",      Объект.Ссылка);
		ПараметрыЗарплаты.Вставить("Оплачено",    НЕ Объект.ПометкаУдаления);
		Оповестить("Запись_ПлатежныйДокумент_ВыплатаПоДоговоруПодряда", ПараметрыЗарплаты);
		Оповестить("ИзменениеОплатыВедомости", ПараметрыЗарплаты);
	КонецЕсли;
	
	
	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ПараметрыЗаписи.ОплаченныеСчета.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;
	
	Оповестить("Запись_РасходныйКассовыйОрдер", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	ПечатьФискальныхДокументовКлиент.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры
 

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовШапки

Процедура ДокументОснованиеНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение( , Объект.ДокументОснование);
	
КонецПроцедуры

Процедура ВидОперацииАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	Если Ожидание = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ОплатаПоставщику = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику");
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ОплатаПоставщику);
		Если ЗначениеЗаполнено(Объект.ВидОперации) И Объект.ВидОперации <> ОплатаПоставщику Тогда
			ДанныеВыбора.Добавить(Объект.ВидОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НалогАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = РасходныйКассовыйОрдерВызовСервера.ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НалогОкончаниеВводаТекста(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = РасходныйКассовыйОрдерВызовСервера.ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПорядокОтраженияБУНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	
	ПараметрыФормы.Вставить("Период",      Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Счет",        Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("Субконто1",   Объект.СубконтоДт1);
	ПараметрыФормы.Вставить("Субконто2",   Объект.СубконтоДт2);
	ПараметрыФормы.Вставить("Субконто3",   Объект.СубконтоДт3);
	ПараметрыФормы.Вставить("Направление", "Дт");
	
	Если Объект.СчетУчетаРасчетовСКонтрагентом = ПредопределенноеЗначение(
			"ПланСчетов.Хозрасчетный.НДСНалоговогоАгента") Тогда
		ПараметрыФормы.Вставить("АдресТаблицыНалоговыйАгентНДСВХранилище", 
			РасходныйКассовыйОрдерВызовСервера.ПоместитьРасшифровкуНалоговыйАгентНДСВХранилище(Объект));
	КонецЕсли;
		
	ПараметрыФормы.Вставить("СуммаПоПлатежномуПоручению", Объект.СуммаДокумента);
	ПараметрыФормы.Вставить("ДокументСсылка",             Объект.Ссылка);
	ПараметрыФормы.Вставить("НазначениеПлатежа");
	
	ОткрытьФорму("ОбщаяФорма.ПорядокОтраженияБУ", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура КонтрагентАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КонтрагентОкончаниеВводаТекста(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

Процедура КонтрагентОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПодразделениеОрганизацииПриИзменении(Форма, Элемент) Экспорт
	
	РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПодразделениеДт(Форма);
	
КонецПроцедуры

Процедура ВыдатьНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаСписка",
		Новый Структура("РежимВыбора", Истина), Элемент);
	
КонецПроцедуры

Процедура ВыдатьОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОбъекта = РасходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	ПараметрыОбъекта.Вставить("ВыдатьФизЛицо", ВыбранноеЗначение);
	НовыеПараметры   = РасходныйКассовыйОрдерВызовСервера.НовыеПараметрыПриВыбореВыдать(ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Выдать, ПоДокументу");
	Форма.Модифицированность = Истина;
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаголовокГруппыРеквизитовПечатнойФормы(Форма);
	
КонецПроцедуры

Процедура СчетУчетаЗадержкаЗарплатыПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		Форма, Объект, РасходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "ЗадержкаЗарплаты"));
	
КонецПроцедуры

Процедура СубконтоДт1ПриИзменении(Форма, Элемент) Экспорт
	
	ПриИзмененииСубконто(Форма, 1);
	
КонецПроцедуры

Процедура СубконтоДт2ПриИзменении(Форма, Элемент) Экспорт
	
	ПриИзмененииСубконто(Форма, 2);
	
КонецПроцедуры

Процедура СубконтоДт3ПриИзменении(Форма, Элемент) Экспорт
	
	ПриИзмененииСубконто(Форма, 3);
	
КонецПроцедуры

Процедура СубконтоДт1НачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	НачалоВыбораСубконто(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СубконтоДт2НачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	НачалоВыбораСубконто(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СубконтоДт3НачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	НачалоВыбораСубконто(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СубконтоДтЗадержкаЗарплаты1ПриИзменении(Форма, Элемент) Экспорт
	
	ПриИзмененииСубконто(Форма, 1, "ЗадержкаЗарплаты");
	
КонецПроцедуры

Процедура СубконтоДтЗадержкаЗарплаты2ПриИзменении(Форма, Элемент) Экспорт
	
	ПриИзмененииСубконто(Форма, 2, "ЗадержкаЗарплаты");
	
КонецПроцедуры

Процедура СубконтоДтЗадержкаЗарплаты3ПриИзменении(Форма, Элемент) Экспорт
	
	ПриИзмененииСубконто(Форма, 3, "ЗадержкаЗарплаты");
	
КонецПроцедуры

Процедура СубконтоДтЗадержкаЗарплаты1НачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	НачалоВыбораСубконто(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "ЗадержкаЗарплаты");
	
КонецПроцедуры

Процедура СубконтоДтЗадержкаЗарплаты2НачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ЗадержкаЗарплаты");
	
КонецПроцедуры

Процедура СубконтоДтЗадержкаЗарплаты3НачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ЗадержкаЗарплаты");
	
КонецПроцедуры

Процедура ВедомостьЗарплатаРаботникуПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	Объект.СуммаДокумента = РасходныйКассовыйОрдерВызовСервера.СуммаВыплаченнойЗарплатыРаботнику(
		Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость, Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	
КонецПроцедуры

Процедура ВедомостьЗарплатаРаботникуОчистка(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	Форма.Модифицированность = Истина;
	РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаЗарплатыВедомость(Объект.ПлатежнаяВедомость,
		Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	
КонецПроцедуры

Процедура ВедомостьЗарплатаРаботникуНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",  Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.Касса"));
		ПараметрыФормы.Вставить("СпособРасчетов",  ПредопределенноеЗначение("Перечисление.СпособыРасчетовСФизическимиЛицами.ОплатаТруда"));
		
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора",
			Новый Структура("ПараметрыОтбораСписка, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
	Иначе
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ФормаВыбора",
			Новый Структура("Отбор, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВедомостьПоДоговоруПодрядаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("СпособВыплаты", СписаниеСРасчетногоСчетаФормыВызовСервера.СпособВыплатыПоДоговоруПодряда());
	ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ФормаВыбора",
		Новый Структура("Отбор, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
	
КонецПроцедуры

Процедура ПрочееРасходыУСНПриИзменении(Форма, Элемент) Экспорт
	
	ОграничитьПринимаемыеРасходыДляУСН(Форма);
	ОграничитьНДСДляУСН(Форма);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(Форма);
	
КонецПроцедуры

Процедура ПрочееНДСУСНПриИзменении(Форма, Элемент) Экспорт
	ОграничитьНДСДляУСН(Форма);
КонецПроцедуры

Процедура НадписьРеквизитыПлатежейВБюджетНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРедактированияРеквизитовПлатежаВБюджет(Форма);
	
КонецПроцедуры

Процедура НалоговыйПериодРегулирование(Форма, Элемент, Направление, СтандартнаяОбработка) Экспорт
	
	ИзменениеПериодаУплаты(Форма, "Объект.НалоговыйПериод", "НалоговыйПериодСтрока", Направление);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура НалоговыйПериодНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	ТекущийПериод = Объект.НалоговыйПериод;
	
	ВидПериода        = "Месяц";
	НарастающимИтогом = Ложь;
	
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоТорговыйСбор(Форма.ВидНалога) Тогда
		ВидПериода = "Квартал";
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(Форма.ВидНалога)
		Или ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ_ИП(Форма.ВидНалога) Тогда
		ВидПериода        = "Квартал";
		НарастающимИтогом = Истина;
	КонецЕсли;
	
	Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность." + ВидПериода);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачалоПериода", ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, ТекущийПериод));
	ПараметрыФормы.Вставить("КонецПериода",  ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, ТекущийПериод));
	ПараметрыФормы.Вставить("НарастающимИтогом", НарастающимИтогом);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода" + ВидПериода,
		ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура НалоговыйПериодОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ВыбранноеЗначение = Неопределено ИЛИ ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	ВидПериода = "Месяц";
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоТорговыйСбор(Форма.ВидНалога)
			ИЛИ ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(Форма.ВидНалога)
			Или ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ_ИП(Форма.ВидНалога) Тогда
		ВидПериода = "Квартал";
	КонецЕсли;
	Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность." + ВидПериода);
	
	ВыбранныйПериод = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "КонецПериода", Объект.Дата);
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, ВыбранныйПериод);
	НалоговыйПериодСтрока
		= РасходныйКассовыйОрдерФормыКлиентСервер.ПредставлениеПериодаУплатыНалога(НалоговыйПериод, Форма.ВидНалога);
	
	Форма.НалоговыйПериодСтрока = НалоговыйПериодСтрока;
	
	Если Объект.НалоговыйПериод = НалоговыйПериод Тогда
		// Ничего не изменилось, выбор не нужно обрабатывать.
		СтандартнаяОбработка = Ложь;
	Иначе
		ВыбранноеЗначение        = НалоговыйПериодСтрока;
		Объект.НалоговыйПериод   = НалоговыйПериод;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыдатьПриИзменении(Форма, Элемент) Экспорт
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаголовокГруппыРеквизитовПечатнойФормы(Форма);
	
КонецПроцедуры

Процедура ПоДокументуПриИзменении(Форма, Элемент) Экспорт
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаголовокГруппыРеквизитовПечатнойФормы(Форма);
	
КонецПроцедуры

Процедура ОснованиеПриИзменении(Форма, Элемент) Экспорт
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаголовокГруппыРеквизитовПечатнойФормы(Форма);
	
КонецПроцедуры

Процедура ПриложениеПриИзменении(Форма, Элемент) Экспорт
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаголовокГруппыРеквизитовПечатнойФормы(Форма);
	
КонецПроцедуры

Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура НомерЧекаНПДНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Форма.Объект.Организация);
	
	ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаВыбора", ПараметрыОтбора, Форма);
	
КонецПроцедуры

Процедура НомерЧекаНПДАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрокаТекст = Текст;
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		ТекущаяСтрокаТекст = Объект.НомерЧекаНПД;
	КонецЕсли;
	
	ДанныеВыбора = ЧекиНПДВызовСервера.ДанныеВыбораЧековДляАннулирования(
		ТекущаяСтрокаТекст, Объект.Организация, "ПриходныйКассовыйОрдер");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыРасшифровкаПлатежа

Процедура РасшифровкаПлатежаПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ИнициализироватьСвойстваПлатежа(Форма);
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
		Если Форма.ОтражениеДоходаВидимость Тогда
			СтрокаПлатеж.ОтражениеДоходаПредставление = БанкИКассаФормыКлиентСервер.ВариантОтраженияДоходовПредставление(
				СтрокаПлатеж.ПорядокОтраженияДохода,
				БанкИКассаФормыКлиентСервер.ВариантыОтраженияДоходов(Форма));
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
		Если Не РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
			РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	РасшифровкаПлатежа = РасходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
	РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтогиУСН(Форма);
	РасходныйКассовыйОрдерФормыКлиентСервер.ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РасшифровкаПлатежа = РасходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
		Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
		РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтогиУСН(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	Объект = Форма.Объект;
	РасшифровкаПлатежа = РасходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	Отказ = РасшифровкаПлатежа.Количество() = 1;
	
	Если НЕ Отказ Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	КонецЕсли; 
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	ЗначенияЗаполнения = Новый Структура;
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора));
	
	ЗначенияЗаполнения.Вставить("ОплатаВВалюте", Форма.ОплатаВВалюте);
	Если Форма.ОплатаВВалюте ИЛИ НЕ РасходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
		ЗначенияЗаполнения.Вставить("Валютный", Форма.ОплатаВВалюте);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ИнициализироватьСвойстваПлатежа(Форма); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств <> Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств Тогда
		Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	ПараметрыОбъекта = РасходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	НазваниеТабличнойЧасти = РасходныйКассовыйОрдерФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	Если НазваниеТабличнойЧасти <> "РасшифровкаПлатежа" Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу") Тогда
		СтрокаПлатеж.Сделка = Неопределено;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = РасходныйКассовыйОрдерФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("РасшифровкаПлатежа.СпособПогашенияЗадолженности", Объект, СтрокаПлатеж);
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ВидимостьДоступностьПолейПриИзмененииСпособаПогашения(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") Тогда
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана дата.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана организация.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан контрагент.'"));
		Возврат;
	ИначеЕсли Форма.ВестиУчетПоДоговорам И НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан договор.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            Объект.Контрагент);
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
		ПараметрыОбъекта.Вставить("СчетУчета",             СчетУчета);
	КонецЕсли;
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",        "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",        "Метаданные.Документы.РасходныйКассовыйОрдер.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	РасходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(Форма, СтрокаПлатеж);
	РасходныйКассовыйОрдерФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	РасходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента",      СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов",      СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата" ,                   Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	РасходныйКассовыйОрдерФормыКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж, Форма);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И Форма.КратностьДокумента <> 0 Тогда
		СуммаРуб = СтрокаПлатеж.СуммаПлатежа * Форма.КурсДокумента / Форма.КратностьДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	РасходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ДоступностьСтавкиНДС(Форма);
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаРасходыУСНПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	РасходыУСНПриИзменении(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаВидПлатежаПоКредитамЗаймамПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ИнициализироватьСвойстваПлатежа(Форма); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам <> Форма.СвойстваПлатежа.ВидПлатежаПоКредитамЗаймам Тогда
		
		Если СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга") Тогда
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств =
				УчетДенежныхСредствВызовСервера.СтатьяДДСПоУмолчанию("ПогашениеДолга");
			Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
		ИначеЕсли СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов") Тогда
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств =
				УчетДенежныхСредствВызовСервера.СтатьяДДСПоУмолчанию("УплатаПроцентов");
			Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам <> Форма.СвойстваПлатежа.ВидПлатежаПоКредитамЗаймам Тогда
		Форма.СвойстваПлатежа.ВидПлатежаПоКредитамЗаймам = СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам;
	КонецЕсли;
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(Форма, СтрокаПлатеж);
	РасходыУСНПриИзменении(Форма, СтрокаПлатеж);
	
	ПараметрыЗаполненияСчетовУчета = РасходныйКассовыйОрдерФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам", Объект, СтрокаПлатеж);
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасходыУСНПриИзменении(Форма, СтрокаПлатеж) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ОграничитьПринимаемыеРасходыДляУСНПоСтроке(Форма, СтрокаПлатеж);
	
	Если СтрокаПлатеж.РасходыУСН = 0 Тогда
		СтрокаПлатеж.РаспределятьРасходыУСН = Ложь;
	КонецЕсли;
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(Элемент, Текст, Форма.ПредлагатьНовыйДоговор, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаОтражениеДоходаПредставлениеПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	БанкИКассаФормыКлиент.ОтражениеДоходаПриИзменении(Форма,
		СтрокаПлатеж.ПорядокОтраженияДохода,
		СтрокаПлатеж.ОтражениеДоходаПредставление,
		Форма.СвойстваПлатежа.ПорядокОтраженияДохода);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаОтражениеДоходаПредставлениеОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	БанкИКассаФормыКлиент.ОтражениеДоходаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийТаблицыФормыРасшифровкаВыручки

Процедура РозничнаяВыручкаПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ИнициализироватьСвойстваПлатежа(Форма);
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	КонецЕсли;
	
КонецПроцедуры


Процедура РасшифровкаВыручкиПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	РасшифровкаПлатежа = РасходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
	РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтогиУСН(Форма);
	РасходныйКассовыйОрдерФормыКлиентСервер.ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма);
	
КонецПроцедуры

Процедура РасшифровкаВыручкиПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РасшифровкаПлатежа = РасходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
		Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
		РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтогиУСН(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаВыручкиПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	Объект = Форма.Объект;
	РасшифровкаПлатежа = РасходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	Отказ = РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

Процедура РасшифровкаВыручкиПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ИнициализироватьСвойстваПлатежа(Форма);
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	КонецЕсли;
	
	Если НоваяСтрока И Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
		Если Не РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
			РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура РасшифровкаВыручкиСуммаПлатежаПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры


Процедура РасшифровкаВыручкиСтавкаНДСПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаВыручки");
	РасходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры


#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыВыплатаЗаработнойПлаты

Процедура ВыплатаЗаработнойПлатыПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	ТаблицаВыплатаЗаработнойПлаты = РасходныйКассовыйОрдерФормыКлиентСервер.ДанныеТабличнойЧасти(Объект, Форма, "ВыплатаЗаработнойПлаты");
	
	Объект.СуммаДокумента = ТаблицаВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЭтоОднострочнаяФорма = РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	
	Если ЭтоОднострочнаяФорма Тогда
		
		СуммаКВыплатеДоИзменения = Объект.СуммаДокумента;
		
		Объект.СуммаДокумента = РасходныйКассовыйОрдерВызовСервера.СуммаВыплаченнойЗарплатыПоВедомости(
			Форма.ВыплатаЗаработнойПлатыВедомость,
			Объект.Ссылка, 
			1,
			Форма.УчетЗарплатыИКадровВоВнешнейПрограмме, 
			ЭтоОднострочнаяФорма);
		
	Иначе
		
		СтрокаПлатеж = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
		СуммаКВыплатеДоИзменения = СтрокаПлатеж.СуммаКВыплате;
		
		СтрокаПлатеж.СуммаКВыплате = РасходныйКассовыйОрдерВызовСервера.СуммаВыплаченнойЗарплатыПоВедомости(
			СтрокаПлатеж.Ведомость, 
			Объект.Ссылка,
			СтрокаПлатеж.НомерСтроки,
			Форма.УчетЗарплатыИКадровВоВнешнейПрограмме,
			ЭтоОднострочнаяФорма);
		
	КонецЕсли;
	
	Если Форма.ИмяФормы = "ФормаДокумента" И СуммаКВыплатеДоИзменения <> СтрокаПлатеж.СуммаКВыплате Тогда
		ТекстСообщения = НСтр("ru = 'Состав оплачиваемых ведомостей был изменен. Сумма документа пересчитана!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыВедомостьОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ПроверитьДублиВедомостей(Форма, ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыВедомостьОчистка(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	
	ЭтоОднострочнаяФорма = РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	Если ЭтоОднострочнаяФорма Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаЗарплатыВедомость(
			Форма.ВыплатаЗаработнойПлатыВедомость,
			Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
		Форма.Модифицированность = Истина;
	Иначе
		ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаЗарплатыВедомость(ТекущиеДанные.Ведомость,
			Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущаяВедомость = ТекущиеДанные.Ведомость;
			Если ПроверитьДублиВедомостей(Форма, ТекущаяВедомость) Тогда
				РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаЗарплатыВедомость(
					Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные.Ведомость, Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
				
				Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные.СуммаКВыплате = 0;
				ОтменаРедактирования = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВыплатаЗаработнойПлаты = РасходныйКассовыйОрдерФормыКлиентСервер.ДанныеТабличнойЧасти(Объект, Форма, "ВыплатаЗаработнойПлаты");
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
		
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаЗарплатыВедомость(ТекущиеДанные.Ведомость, Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыВедомостьНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",  Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.Касса"));
		ПараметрыФормы.Вставить("СпособРасчетов",  ПредопределенноеЗначение("Перечисление.СпособыРасчетовСФизическимиЛицами.ОплатаТруда"));
		
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора", Новый Структура("ПараметрыОтбораСписка", ПараметрыФормы), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВыплатаДепонентов

Процедура ВыплатаДепонентовПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ТаблицаВыплатаДепонентов = РасходныйКассовыйОрдерФормыКлиентСервер.ДанныеТабличнойЧасти(Объект, Форма, "ВыплатаДепонентов");
	
	Объект.СуммаДокумента = ТаблицаВыплатаДепонентов.Итог("СуммаКВыплате");
	
КонецПроцедуры

Процедура ВыплатаДепонентовПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.ВыплатаДепонентов.ТекущиеДанные;
		
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаЗарплатыВедомость(ТекущиеДанные.Ведомость, 
			Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаДепонентовПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВыплатаДепонентов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущаяВедомость = ТекущиеДанные.Ведомость;
			Если ПроверитьДублиВедомостей(Форма, ТекущаяВедомость, "ВыплатаДепонентов") Тогда
				РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаДепонентовВедомость(
					Элементы.ВыплатаДепонентов.ТекущиеДанные.Ведомость, Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
				ТекущиеДанные.СуммаКВыплате = 0;
				ОтменаРедактирования = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВыплатаДепонентов = РасходныйКассовыйОрдерФормыКлиентСервер.ДанныеТабличнойЧасти(Объект, Форма, "ВыплатаДепонентов");
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = ВыплатаДепонентов.Итог("СуммаКВыплате");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаДепонентовВедомостьПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтрокаПлатеж = Элементы.ВыплатаДепонентов.ТекущиеДанные;
	СтрокаПлатеж.СуммаКВыплате = РасходныйКассовыйОрдерВызовСервера.СуммаНеВыплаченнойЗарплатыРаботнику(
		Объект.Ссылка, Объект.Организация, Объект.Дата, Объект.Контрагент, СтрокаПлатеж.Ведомость, Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	
КонецПроцедуры

Процедура ВыплатаДепонентовВедомостьНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",  Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.Касса"));
		ПараметрыФормы.Вставить("СпособРасчетов",  ПредопределенноеЗначение("Перечисление.СпособыРасчетовСФизическимиЛицами.ОплатаТруда"));
		
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора", Новый Структура("ПараметрыОтбораСписка", ПараметрыФормы), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаДепонентовВедомостьОчистка(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	
	ЭтоОднострочнаяФорма = РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	Если ЭтоОднострочнаяФорма Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаЗарплатыВедомость(
			Форма.ВыплатаЗаработнойПлатыВедомость,
			Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
		Форма.Модифицированность = Истина;
	Иначе
		ТекущиеДанные = Элементы.ВыплатаДепонентов.ТекущиеДанные;
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаДепонентовВедомость(
			ТекущиеДанные.Ведомость,
			Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаДепонентовВедомостьОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ПроверитьДублиВедомостей(Форма, ВыбранноеЗначение, "ВыплатаДепонентов") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

Процедура ПрочиеПлатежиВБюджет(Форма, Команда) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимВыбора", Истина);
	
	СписокОрганизаций   = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Объект.Организация);
	СписокОрганизаций.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	
	СтруктураОтбора     = Новый Структура("Организация", СписокОрганизаций);
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.Форма.ФормаВыбора", СтруктураПараметров, Форма);
	
КонецПроцедуры

Процедура РеестрУплатыНДФЛ(Форма, Команда) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ОчиститьСообщения();
	
	Если НЕ Объект.Проведен ИЛИ Форма.Модифицированность Тогда		
		ТекстСообщения = НСтр("ru = 'Печать реестра уплаты НДФЛ возможна только после проведения документа!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;		
	КонецЕсли;
		
	УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраНДФЛ(Новый Структура("МенеджерПечати, Ссылка, Форма", 
		"Документ.РасходныйКассовыйОрдер", Объект.Ссылка, Форма));
	
КонецПроцедуры

Процедура ПоказатьКонтекстныеНовости(Форма, Команда) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		Форма,
		Команда
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

Процедура ОграничитьНДСДляУСН(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.НДС_УСН > Объект.Графа7_УСН Тогда
		Объект.НДС_УСН = Объект.Графа7_УСН;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОграничитьПринимаемыеРасходыДляУСН(Форма)
	
	Объект = Форма.Объект;
	
	МаксРасход = Объект.СуммаДокумента;
	Если Форма.ОплатаВВалюте Тогда
		МаксРасход = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СуммаДокумента,
			Объект.ВалютаДокумента, Форма.ВалютаРегламентированногоУчета,
			Форма.КурсДокумента,      1,
			Форма.КратностьДокумента, 1);
	КонецЕсли;
	
	Объект.Графа7_УСН = Мин(Объект.Графа7_УСН, МаксРасход);
	
КонецПроцедуры

Процедура ОграничитьПринимаемыеРасходыДляУСНПоСтроке(Форма, СтрокаПлатеж)
	
	Объект = Форма.Объект;
	
	МаксРасход = СтрокаПлатеж.СуммаПлатежа;
	
	Если Форма.ОплатаВВалюте Тогда
		МаксРасход = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
			Объект.ВалютаДокумента, Форма.ВалютаРегламентированногоУчета,
			Форма.КурсДокумента,      1,
			Форма.КратностьДокумента, 1);
	КонецЕсли;
	
	СтрокаПлатеж.РасходыУСН = Мин(СтрокаПлатеж.РасходыУСН, МаксРасход);
	
КонецПроцедуры

Процедура ПриИзмененииСубконто(Форма, НомерСубконто, Постфикс = "")
	
	Объект = Форма.Объект;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		Форма, Объект, НомерСубконто, РасходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, Постфикс));
	
КонецПроцедуры

Процедура НачалоВыбораСубконто(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Постфикс = "")
	
	Объект = Форма.Объект;
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, РасходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, Постфикс));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

Процедура ОткрытьФормуРедактированияРеквизитовПлатежаВБюджет(Форма, ИсправитьОшибки = Ложь, АдресОшибок = "")
	
	Объект = Форма.Объект;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРедактированияРеквизитовПлатежаВБюджетЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	
	// Заполним показатели
	Для каждого ОписаниеРеквизита Из ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_РасходныйКассовыйОрдер() Цикл
		РеквизитыПлатежаВБюджет[ОписаниеРеквизита.Ключ] = Объект[ОписаниеРеквизита.Значение];
	КонецЦикла;
	
	// Заполним контекст
	СвойстваКонтекста = Новый Структура;
	СвойстваКонтекста.Вставить("Период",                     Объект.Дата);
	СвойстваКонтекста.Вставить("Организация",                Объект.Организация);
	СвойстваКонтекста.Вставить("СчетПолучателя",             Объект.СчетКонтрагента);
	СвойстваКонтекста.Вставить("Налог",                      Объект.Налог);
	СвойстваКонтекста.Вставить("ВидНалоговогоОбязательства", Объект.ВидНалоговогоОбязательства);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Реквизиты",                РеквизитыПлатежаВБюджет);
	ПараметрыФормы.Вставить("СвойстваКонтекста",        СвойстваКонтекста);
	ПараметрыФормы.Вставить("ТолькоПросмотр",           Форма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("ИсправитьОшибки",          ИсправитьОшибки);
	ПараметрыФормы.Вставить("АдресИнформацииОбОшибках", АдресОшибок);
	ПараметрыФормы.Вставить("Ссылка",                   Объект.Ссылка);
	ПараметрыФормы.Вставить("ПеречислениеВБюджет",      Истина);
	ПараметрыФормы.Вставить("УплатаНалога",             Истина);
	
	ОткрытьФорму(
		"ОбщаяФорма.РеквизитыПлатежаВБюджет",
		ПараметрыФормы,
		Форма,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

Процедура ИзменениеПериодаУплаты(Форма, ПутьРеквизита, ПутьРеквизитаПредставления, Направление)
	
	Множитель = 1;
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоТорговыйСбор(Форма.ВидНалога)
			ИЛИ ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(Форма.ВидНалога)
			Или ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ_ИП(Форма.ВидНалога) Тогда
		Множитель = 3;
	КонецЕсли;
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита);
	Значение = ДобавитьМесяц(Значение, Множитель * Направление);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизита, Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизитаПредставления,
		РасходныйКассовыйОрдерФормыКлиентСервер.ПредставлениеПериодаУплатыНалога(Значение, Форма.ВидНалога));
	
КонецПроцедуры

Функция ПроверитьДублиВедомостей(Форма, ТекущаяВедомость, ТабличнаяЧасть = "ВыплатаЗаработнойПлаты")
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЕстьДублиВедомостей = Ложь;
	
	ДанныеТЧ = РасходныйКассовыйОрдерФормыКлиентСервер.ДанныеТабличнойЧасти(Объект, Форма, ТабличнаяЧасть);
	
	СтрокаПоиска    = Новый Структура("Ведомость", ТекущаяВедомость);
	НайденныеСтроки = ДанныеТЧ.НайтиСтроки(СтрокаПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Если НайденныеСтроки.Количество() = 1 Тогда
			Если Не РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) 
				И Элементы[ТабличнаяЧасть].ТекущиеДанные.НомерСтроки <> НайденныеСтроки[0].НомерСтроки Тогда
				ЕстьДублиВедомостей = Истина;
			КонецЕсли;
		Иначе
			ЕстьДублиВедомостей = Истина;
		КонецЕсли;
		
		Если ЕстьДублиВедомостей Тогда
			ТекстСообщения = НСтр("ru = 'Указанная ведомость уже выбрана в документе!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьДублиВедомостей;
	
КонецФункции

Процедура ЗадатьВопросОПроверкеПравильностиРеквизитов(Форма, РезультатПроверки, ПараметрыЗаписи) Экспорт
	ТекстВопроса      = "";
	
	Если РезультатПроверки.ПредупредитьОбОшибках Тогда
		ТекстВопроса = НСтр("ru = 'При проверке правильности заполнения реквизитов обнаружены ошибки.
			|Записать с ошибками?'");
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина; // Примем решение позже, в зависимости от ответа пользователя
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросЗаписатьСОшибкамиЗавершение", ЭтотОбъект, ПараметрыЗаписи),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

Процедура ОбработкаРедактированияРеквизитовПлатежаВБюджетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	Форма.Модифицированность = Истина;
	
	РеквизитыДокумента = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_РасходныйКассовыйОрдер();
	Для каждого РеквизитПлатежаВБюджет Из Результат Цикл
		ИмяРеквизита = РеквизитыДокумента[РеквизитПлатежаВБюджет.Ключ];
		Если ИмяРеквизита <> Неопределено Тогда
			Объект[ИмяРеквизита] = РеквизитПлатежаВБюджет.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыОбъекта = Новый Структура("КодБК, Налог, ВидНалоговогоОбязательства, Организация, Дата, ПоказательПериода");
	ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект);
	Объект.Основание = РасходныйКассовыйОрдерВызовСервера.ОснованиеПриИзмененииПоказателяПериода(РеквизитыОбъекта);
	
	Форма.НадписьРеквизитыПлатежейВБюджет = РасходныйКассовыйОрдерФормыКлиентСервер.НадписьРеквизитыПлатежейВБюджет(Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;

	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	РасходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	Форма.Модифицированность = Истина;
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
