#Область СлужебныйПрограммныйИнтерфейс

Функция ДанныеЗаполненияЗаказаНаЭмиссиюКодовМаркировкиСУЗ(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъект");
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъектАдрес");
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъектАдресСтрокой");
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъектИдентификатор");
	ДанныеЗаполнения.Вставить("ИдентификаторПроизводственнойЛинии");
	ДанныеЗаполнения.Вставить("СпособВводаВОборот");
	ДанныеЗаполнения.Вставить("СервисПровайдер");
	
	ВидыПродукцииУчета = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	1                                                                    КАК Количество,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Организация                         КАК Организация,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ВидПродукции                        КАК ВидПродукции,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПроизводственныйОбъект              КАК ПроизводственныйОбъект,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПроизводственныйОбъектИдентификатор КАК ПроизводственныйОбъектИдентификатор,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПроизводственныйОбъектАдрес         КАК ПроизводственныйОбъектАдрес,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПроизводственныйОбъектАдресСтрокой  КАК ПроизводственныйОбъектАдресСтрокой,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ИдентификаторПроизводственнойЛинии  КАК ИдентификаторПроизводственнойЛинии,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.СпособВводаВОборот                  КАК СпособВводаВОборот,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.СервисПровайдер                     КАК СервисПровайдер
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
	|ГДЕ
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Организация = &Организация Или &БезУчетаОрганизации
	|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация, ПроизводственныйОбъект",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ДанныеЗаполнения.ВидПродукции) Тогда
		
		ЗаполнитьПоСтатистике(
			"СпособВводаВОборот,
			|ПроизводственныйОбъектИдентификатор,
			|ПроизводственныйОбъектАдрес,
			|ПроизводственныйОбъектАдресСтрокой,
			|ИдентификаторПроизводственнойЛинии",
			ДанныеЗаполнения, ДанныеПоследнихДокументов,
			"ВидПродукции, Организация");
		
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеЗаполнения.ВидПродукции) Тогда
		
		ЗаполнитьПоСтатистике(
			"СпособВводаВОборот, СервисПровайдер",
			ДанныеЗаполнения, ДанныеПоследнихДокументов,
			"ВидПродукции, Организация");
		
	КонецЕсли;
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДанныеЗаполнения.ВидПродукции       = ВидыПродукцииУчета[0];
		ДанныеЗаполнения.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.Производство;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияМаркировкиТоваровИСМП(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъект");
	ДанныеЗаполнения.Вставить("Операция");
	ДанныеЗаполнения.Вставить("КодТаможенногоОргана");
	ДанныеЗаполнения.Вставить("ПринятоеРешение");
	ДанныеЗаполнения.Вставить("СтранаПроисхождения");
	ДанныеЗаполнения.Вставить("ИдентификаторПроизводственнойЛинии");
	
	ВидыПродукцииУчета = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	1                                            КАК Количество,
	|	МаркировкаТоваровИСМП.Организация            КАК Организация,
	|	МаркировкаТоваровИСМП.Операция               КАК Операция,
	|	МаркировкаТоваровИСМП.ВидПродукции           КАК ВидПродукции,
	|	МаркировкаТоваровИСМП.ПроизводственныйОбъект КАК ПроизводственныйОбъект,
	|	МаркировкаТоваровИСМП.КодТаможенногоОргана               КАК КодТаможенногоОргана,
	|	МаркировкаТоваровИСМП.ПринятоеРешение                    КАК ПринятоеРешение,
	|	МаркировкаТоваровИСМП.СтранаПроисхождения                КАК СтранаПроисхождения,
	|	МаркировкаТоваровИСМП.ИдентификаторПроизводственнойЛинии КАК ИдентификаторПроизводственнойЛинии
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК МаркировкаТоваровИСМП
	|ГДЕ
	|	МаркировкаТоваровИСМП.Организация = &Организация Или &БезУчетаОрганизации
	|	И МаркировкаТоваровИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	МаркировкаТоваровИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Операция",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация, ПроизводственныйОбъект",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ДанныеЗаполнения.ВидПродукции) Тогда
		
		ЗаполнитьПоСтатистике(
			"ИдентификаторПроизводственнойЛинии",
			ДанныеЗаполнения, ДанныеПоследнихДокументов);
		
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеЗаполнения.ВидПродукции) Тогда
		
		ЗаполнитьПоСтатистике(
			"КодТаможенногоОргана, ПринятоеРешение, СтранаПроисхождения",
			ДанныеЗаполнения, ДанныеПоследнихДокументов);
		
	КонецЕсли;
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДоступныеВидыПродукцииИС = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП();
		Для Каждого ВидПродукцииУчета Из ВидыПродукцииУчета Цикл
			Если ДоступныеВидыПродукцииИС.Найти(ВидПродукцииУчета) <> Неопределено Тогда
				
				ДанныеЗаполнения.ВидПродукции = ВидПродукцииУчета;
				
				Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ДанныеЗаполнения.ВидПродукции) Тогда
					ДанныеЗаполнения.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ;
				ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеЗаполнения.ВидПродукции) Тогда
					ДанныеЗаполнения.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияСписанияКодовМаркировкиИСМП(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъект");
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъектАдрес");
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъектАдресСтрокой");
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъектИдентификатор");
	ДанныеЗаполнения.Вставить("ИдентификаторПроизводственнойЛинии");
	ДанныеЗаполнения.Вставить("ПричинаСписания");
	
	ВидыПродукцииУчета = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	1                                                               КАК Количество,
	|	СписаниеКодовМаркировкиИСМП.Организация                         КАК Организация,
	|	СписаниеКодовМаркировкиИСМП.ВидПродукции                        КАК ВидПродукции,
	|	СписаниеКодовМаркировкиИСМП.ПричинаСписания                     КАК ПричинаСписания,
	|	СписаниеКодовМаркировкиИСМП.ПроизводственныйОбъект              КАК ПроизводственныйОбъект,
	|	СписаниеКодовМаркировкиИСМП.ПроизводственныйОбъектИдентификатор КАК ПроизводственныйОбъектИдентификатор,
	|	СписаниеКодовМаркировкиИСМП.ПроизводственныйОбъектАдрес         КАК ПроизводственныйОбъектАдрес,
	|	СписаниеКодовМаркировкиИСМП.ПроизводственныйОбъектАдресСтрокой  КАК ПроизводственныйОбъектАдресСтрокой,
	|	СписаниеКодовМаркировкиИСМП.ИдентификаторПроизводственнойЛинии  КАК ИдентификаторПроизводственнойЛинии
	|ИЗ
	|	Документ.СписаниеКодовМаркировкиИСМП КАК СписаниеКодовМаркировкиИСМП
	|ГДЕ
	|	СписаниеКодовМаркировкиИСМП.Организация = &Организация Или &БезУчетаОрганизации
	|	И СписаниеКодовМаркировкиИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеКодовМаркировкиИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ДанныеЗаполнения.ВидПродукции) Тогда
		
		ЗаполнитьПоСтатистике(
			"ПроизводственныйОбъект,
			|ПроизводственныйОбъектИдентификатор,
			|ПроизводственныйОбъектАдрес,
			|ПроизводственныйОбъектАдресСтрокой,
			|ИдентификаторПроизводственнойЛинии",
			ДанныеЗаполнения, ДанныеПоследнихДокументов,
			"ВидПродукции, Организация");
		
		ЗаполнитьПоСтатистике(
			"ПричинаСписания",
			ДанныеЗаполнения, ДанныеПоследнихДокументов);
		
	КонецЕсли;
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДанныеЗаполнения.ВидПродукции = ВидыПродукцииУчета[0];
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеЗаполнения.ВидПродукции) Тогда
			ДанныеЗаполнения.ПричинаСписания = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Испорчен;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияВыводаИзОборотаИСМП(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Операция");
	ДанныеЗаполнения.Вставить("ВидПервичногоДокумента");
	ДанныеЗаполнения.Вставить("НаименованиеПервичногоДокумента");
	ДанныеЗаполнения.Вставить("АдресПлощадкиСтрокой");
	ДанныеЗаполнения.Вставить("АдресПлощадки");
	
	ВидыПродукцииУчета = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	1                                                  КАК Количество,
	|	ВыводИзОборотаИСМП.Организация                     КАК Организация,
	|	ВыводИзОборотаИСМП.ВидПродукции                    КАК ВидПродукции,
	|	ВыводИзОборотаИСМП.Операция                        КАК Операция,
	|	ВыводИзОборотаИСМП.ВидПервичногоДокумента          КАК ВидПервичногоДокумента,
	|	ВыводИзОборотаИСМП.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	|	ВыводИзОборотаИСМП.АдресПлощадкиСтрокой            КАК АдресПлощадкиСтрокой,
	|	ВыводИзОборотаИСМП.АдресПлощадки                   КАК АдресПлощадки
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП КАК ВыводИзОборотаИСМП
	|ГДЕ
	|	ВыводИзОборотаИСМП.Организация = &Организация Или &БезУчетаОрганизации
	|	И ВыводИзОборотаИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	ВыводИзОборотаИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Операция",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"ВидПервичногоДокумента, НаименованиеПервичногоДокумента",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"АдресПлощадкиСтрокой, АдресПлощадки",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДоступныеВидыПродукцииИС = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП();
		Для Каждого ВидПродукцииУчета Из ВидыПродукцииУчета Цикл
			Если ДоступныеВидыПродукцииИС.Найти(ВидПродукцииУчета) <> Неопределено Тогда
				ДанныеЗаполнения.ВидПродукции = ВидПродукцииУчета;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияОтгрузкиТоваровИСМП(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("Операция");
	
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Контрагент",   ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("КонтрагентГосИС"));
	
	ВидыПродукцииУчета = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	1                                                   КАК Количество,
	|	ОтгрузкаТоваровИСМП.Организация                     КАК Организация,
	|	ОтгрузкаТоваровИСМП.ВидПродукции                    КАК ВидПродукции,
	|	ОтгрузкаТоваровИСМП.Операция                        КАК Операция,
	|	ОтгрузкаТоваровИСМП.Контрагент                      КАК Контрагент
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП КАК ОтгрузкаТоваровИСМП
	|ГДЕ
	|	ОтгрузкаТоваровИСМП.Организация = &Организация Или &БезУчетаОрганизации
	|	И ОтгрузкаТоваровИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	ОтгрузкаТоваровИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Операция",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Контрагент",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДоступныеВидыПродукцииИС = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП();
		Для Каждого ВидПродукцииУчета Из ВидыПродукцииУчета Цикл
			Если ДоступныеВидыПродукцииИС.Найти(ВидПродукцииУчета) <> Неопределено Тогда
				ДанныеЗаполнения.ВидПродукции = ВидПродукцииУчета;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияВозвратаВОборотИСМП(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Операция");
	
	ВидыПродукцииУчета = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	1                               КАК Количество,
	|	ВозвратВОборотИСМП.Организация  КАК Организация,
	|	ВозвратВОборотИСМП.ВидПродукции КАК ВидПродукции,
	|	ВозвратВОборотИСМП.Операция     КАК Операция
	|ИЗ
	|	Документ.ВозвратВОборотИСМП КАК ВозвратВОборотИСМП
	|ГДЕ
	|	ВозвратВОборотИСМП.Организация = &Организация Или &БезУчетаОрганизации
	|	И ВозвратВОборотИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратВОборотИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Операция",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДоступныеВидыПродукцииИС = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(,Ложь);
		Для Каждого ВидПродукцииУчета Из ВидыПродукцииУчета Цикл
			Если ДоступныеВидыПродукцииИС.Найти(ВидПродукцииУчета) <> Неопределено Тогда
				ДанныеЗаполнения.ВидПродукции = ВидПродукцииУчета;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияПеремаркировкиТоваровИСМП(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	
	ВидыПродукцииУчета = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	1                               КАК Количество,
	|	ПеремаркировкаТоваровИСМП.Организация  КАК Организация,
	|	ПеремаркировкаТоваровИСМП.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	Документ.ПеремаркировкаТоваровИСМП КАК ПеремаркировкаТоваровИСМП
	|ГДЕ
	|	ПеремаркировкаТоваровИСМП.Организация = &Организация Или &БезУчетаОрганизации
	|	И ПеремаркировкаТоваровИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	ПеремаркировкаТоваровИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДоступныеВидыПродукцииИС = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(,Ложь);
		Для Каждого ВидПродукцииУчета Из ВидыПродукцииУчета Цикл
			Если ДоступныеВидыПродукцииИС.Найти(ВидПродукцииУчета) <> Неопределено Тогда
				ДанныеЗаполнения.ВидПродукции = ВидПродукцииУчета;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура ЗаполнитьПустойРеквизит(Объект, ДанныеСтатистики, ИмяРеквизита) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		Объект[ИмяРеквизита] = ДанныеСтатистики[ИмяРеквизита];
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуДаннымиЗаполнения(ИсходныеДанные, ДанныеДляЗаполнения, ПоляИсключения = "") Экспорт

	Для Каждого СтрокаДанных Из ДанныеДляЗаполнения Цикл
		СтрокаТовары = ИсходныеДанные.Получить(СтрокаДанных.ИндексИсходнойСтроки);
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаДанных,, ПоляИсключения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоТоварамЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ИсходныеДанные, Объект, ПолеОтслеживанияНовойСтроки = Неопределено, ДополнительныеПоляПоиска = "") Экспорт
	
	Если ТипЗнч(ИсходныеДанные) = Тип("ТаблицаЗначений") Тогда
		ВременнаяТаблица = ИсходныеДанные;
	Иначе
		ВременнаяТаблица = ИсходныеДанные.Выгрузить(,
			"Номенклатура, Характеристика, Шаблон, GTIN, ЦелевойПол, СпособВводаВОборот, Модель, ТоварныйЗнак, ВозрастнаяКатегория, СпособФормированияСерийногоНомера");
	КонецЕсли;
	
	ЗаполнятьТоварныйЗнак = Ложь;
	ПронумероватьИсходнуюТаблицуДанныхЗаполнения(ВременнаяТаблица, ПолеОтслеживанияНовойСтроки);
	
	Если Объект.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
		ТаблицаДанных = ДанныеЗаполненияТоварыЗаказНаЭмиссиюСУЗМаркировкаОстатков(ВременнаяТаблица, Объект, ДополнительныеПоляПоиска);
		ЗаполнятьТоварныйЗнак = (Объект.ВидПродукции <> Перечисления.ВидыПродукцииИС.Обувь);
	Иначе
		ТаблицаДанных = ДанныеЗаполненияТоварыЗаказНаЭмиссиюСУЗ(ВременнаяТаблица, Объект.Организация, ДополнительныеПоляПоиска);
		ЗаполнятьТоварныйЗнак = ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Объект.ВидПродукции);
	КонецЕсли;
	
	ЗаполнитьТаблицуДаннымиЗаполнения(ИсходныеДанные, ТаблицаДанных, ДополнительныеПоляПоиска);
	
	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(
		Объект.ВидПродукции,
		Объект.СпособВводаВОборот <> Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков);
	Если ДоступныеШаблоны.Количество() = 1 Тогда
		Для Каждого СтрокаТовары Из ИсходныеДанные Цикл
			Если Не ЗначениеЗаполнено(СтрокаТовары.Шаблон)
				Или ((Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС
						Или Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
					И ДоступныеШаблоны.НайтиПоЗначению(СтрокаТовары.Шаблон) = Неопределено) Тогда
				СтрокаТовары.Шаблон = ДоступныеШаблоны.Получить(0).Значение;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		Для Каждого СтрокаТовары Из ИсходныеДанные Цикл
			Если Не ЗначениеЗаполнено(СтрокаТовары.Шаблон) Тогда
				СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачкаGS1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗаполнятьТоварныйЗнак Тогда
		
		ДанныеТоварногоЗнака = Новый Соответствие();
		ИнтеграцияИСМППереопределяемый.ТоварныеЗнакиПоНоменклатуре(
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВременнаяТаблица.ВыгрузитьКолонку("Номенклатура")),
			ДанныеТоварногоЗнака);
		
		Для Каждого КлючИЗначение Из ДанныеТоварногоЗнака Цикл
			СтрокиПоНоменклатуре = ИсходныеДанные.НайтиСтроки(Новый Структура("Номенклатура", КлючИЗначение.Ключ));
			Для Каждого СтрокаТовары Из СтрокиПоНоменклатуре Цикл
				СтрокаТовары.ТоварныйЗнак = КлючИЗначение.Значение;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеЗаполненияТоварыЗаказНаЭмиссиюСУЗ(ИсходнаяТаблица, Организация, ДополнительныеПоляПоиска) Экспорт
	
	ТаблицаВозможныхGTIN = ИсходнаяТаблица.СкопироватьКолонки();
	ВозможныеGTIN        = Новый Соответствие();
	
	ШтрихкодированиеИСМППереопределяемый.ЗаполнитьПроверяемыеGTIN(
		ИсходнаяТаблица, Новый Массив(), ВозможныеGTIN);
	
	Для Каждого КлючИЗначение Из ВозможныеGTIN Цикл
		НоваяСтрока = ТаблицаВозможныхGTIN.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючИЗначение.Значение);
		НоваяСтрока.GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ТаблицаТовары.Характеристика       КАК Характеристика,
		|	ТаблицаТовары.GTIN                 КАК GTIN,
		|	ТаблицаТовары.Шаблон               КАК Шаблон
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	GTIN,
		|	Шаблон
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВозможныхGTIN.Номенклатура   КАК Номенклатура,
		|	ТаблицаВозможныхGTIN.Характеристика КАК Характеристика,
		|	ТаблицаВозможныхGTIN.GTIN           КАК GTIN
		|ПОМЕСТИТЬ ТаблицаВозможныхGTIN
		|ИЗ
		|	&ТаблицаВозможныхGTIN КАК ТаблицаВозможныхGTIN
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	GTIN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки                              КАК ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура                                      КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика                                    КАК Характеристика,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СпособФормированияСерийногоНомера КАК СпособФормированияСерийногоНомера,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СтатусУказанияСерии               КАК СтатусУказанияСерии,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN                              КАК GTIN,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Шаблон                            КАК Шаблон,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ТоварныйЗнак                      КАК ТоварныйЗнак,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка                            КАК Ссылка,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.Дата                       КАК Дата
		|ПОМЕСТИТЬ ДокументыПоНоменклатуре
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Характеристика
		|			И &ПоляСвязиДокумент
		|			И (ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.Проведен)
		|			И (ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.Организация = &Организация)
		|			И (ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.СпособВводаВОборот <> ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков))
		|ГДЕ
		|	(ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Номенклатура,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Характеристика,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN) В (
		|		ВЫБРАТЬ
		|			ТаблицаВозможныхGTIN.Номенклатура,
		|			ТаблицаВозможныхGTIN.Характеристика,
		|			ТаблицаВозможныхGTIN.GTIN
		|		ИЗ
		|			ТаблицаВозможныхGTIN)
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СпособФормированияСерийногоНомера,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СтатусУказанияСерии,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Шаблон,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ТоварныйЗнак,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.Дата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата,
		|	Номенклатура,
		|	Характеристика,
		|	GTIN,
		|	Шаблон
		|	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПоНоменклатуре.Номенклатура   КАК Номенклатура,
		|	ДокументыПоНоменклатуре.Характеристика КАК Характеристика,
		|	ДокументыПоНоменклатуре.GTIN           КАК GTIN,
		|	ДокументыПоНоменклатуре.Шаблон         КАК Шаблон,
		|	ДокументыПоНоменклатуре.ТоварныйЗнак   КАК ТоварныйЗнак,
		|	МАКСИМУМ(ДокументыПоНоменклатуре.Дата) КАК Дата
		|ПОМЕСТИТЬ ГруппировкаПоМаксимальнойДатеДокумента
		|ИЗ
		|	ДокументыПоНоменклатуре КАК ДокументыПоНоменклатуре
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыПоНоменклатуре.Номенклатура,
		|	ДокументыПоНоменклатуре.Характеристика,
		|	ДокументыПоНоменклатуре.GTIN,
		|	ДокументыПоНоменклатуре.Шаблон,
		|	ДокументыПоНоменклатуре.ТоварныйЗнак
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата,
		|	Номенклатура,
		|	Характеристика,
		|	GTIN,
		|	Шаблон
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки              КАК ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура                      КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика                    КАК Характеристика,
		|	ДокументыПоНоменклатуре.Шаблон                           КАК Шаблон,
		|	ДокументыПоНоменклатуре.ТоварныйЗнак                     КАК ТоварныйЗнак,
		|	ЕСТЬNULL(ДокументыПоНоменклатуре.СпособФормированияСерийногоНомера,
		|		ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически)) КАК СпособФормированияСерийногоНомера,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДокументыПоНоменклатуре.СпособФормированияСерийногоНомера, ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически)) = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически)
		|			ТОГДА 2
		|			ИНАЧЕ ЕСТЬNULL(ДокументыПоНоменклатуре.СтатусУказанияСерии, 2)
		|	КОНЕЦ КАК СтатусУказанияСерии,
		|	ДокументыПоНоменклатуре.GTIN                             КАК GTIN
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоНоменклатуре КАК ДокументыПоНоменклатуре
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппировкаПоМаксимальнойДатеДокумента КАК ГруппировкаПоМаксимальнойДатеДокумента
		|			ПО ДокументыПоНоменклатуре.Номенклатура      = ГруппировкаПоМаксимальнойДатеДокумента.Номенклатура
		|				И ДокументыПоНоменклатуре.Характеристика = ГруппировкаПоМаксимальнойДатеДокумента.Характеристика
		|				И ДокументыПоНоменклатуре.Дата           = ГруппировкаПоМаксимальнойДатеДокумента.Дата
		|				И &ПоляСвязиИтогДокументы
		|		ПО ВременнаяТаблицаТовары.Номенклатура      = ДокументыПоНоменклатуре.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = ДокументыПоНоменклатуре.Характеристика
		|			И &ПоляСвязиИтогВременнаяТаблица";
	
	МассивПолейСвязи = СтрРазделить(ДополнительныеПоляПоиска, ",", Ложь);
	
	Если МассивПолейСвязи.Количество() Тогда
		ПоляСвязиДокумент             = "";
		ПоляСвязиИтогДокументы        = "";
		ПоляСвязиИтогВременнаяТаблица = "";
		Для Каждого ПолеСвязи Из МассивПолейСвязи Цикл
			ПоляСвязиДокумент = ПоляСвязиДокумент
				+ ?(ЗначениеЗаполнено(ПоляСвязиДокумент), " И ", "")
				+ СтрШаблон(
					"ВременнаяТаблицаТовары.%1 = ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.%1",
					СокрЛП(ПолеСвязи));
			ПоляСвязиИтогДокументы = ПоляСвязиИтогДокументы
				+ ?(ЗначениеЗаполнено(ПоляСвязиИтогДокументы), " И ", "")
				+ СтрШаблон(
					"ДокументыПоНоменклатуре.%1 = ГруппировкаПоМаксимальнойДатеДокумента.%1",
					СокрЛП(ПолеСвязи));
			ПоляСвязиИтогВременнаяТаблица = ПоляСвязиИтогВременнаяТаблица
				+ ?(ЗначениеЗаполнено(ПоляСвязиИтогВременнаяТаблица), " И ", "")
				+ СтрШаблон(
					"ВременнаяТаблицаТовары.%1 = ДокументыПоНоменклатуре.%1",
					СокрЛП(ПолеСвязи));
		КонецЦикла;
	Иначе
		ПоляСвязиДокумент             = "ИСТИНА";
		ПоляСвязиИтогДокументы        = "ИСТИНА";
		ПоляСвязиИтогВременнаяТаблица = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляСвязиДокумент",             ПоляСвязиДокумент);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляСвязиИтогДокументы",        ПоляСвязиИтогДокументы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляСвязиИтогВременнаяТаблица", ПоляСвязиИтогВременнаяТаблица);
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ТаблицаВозможныхGTIN", ТаблицаВозможныхGTIN);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеЗаполненияТоварыЗаказНаЭмиссиюСУЗМаркировкаОстатков(ИсходнаяТаблица, Объект, ДополнительныеПоляПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ТаблицаТовары.Характеристика       КАК Характеристика,
		|	ТаблицаТовары.GTIN                 КАК GTIN,
		|	ТаблицаТовары.СпособВводаВОборот   КАК СпособВводаВОборот,
		|	ТаблицаТовары.Модель               КАК Модель,
		|	ТаблицаТовары.ЦелевойПол           КАК ЦелевойПол,
		|	ТаблицаТовары.ТоварныйЗнак         КАК ТоварныйЗнак,
		|	ТаблицаТовары.ВозрастнаяКатегория  КАК ВозрастнаяКатегория,
		|	ТаблицаТовары.Шаблон               КАК Шаблон
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки                              КАК ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура                                      КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика                                    КАК Характеристика,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN                              КАК GTIN,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Шаблон                            КАК Шаблон,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ЦелевойПол                        КАК ЦелевойПол,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Модель                            КАК Модель,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ТоварныйЗнак                      КАК ТоварныйЗнак,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ВозрастнаяКатегория               КАК ВозрастнаяКатегория,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СпособВводаВОборот                КАК СпособВводаВОборот,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СпособФормированияСерийногоНомера КАК СпособФормированияСерийногоНомера,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СтатусУказанияСерии               КАК СтатусУказанияСерии,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка                            КАК Ссылка,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.Дата                       КАК Дата
		|ПОМЕСТИТЬ ДокументыПоНоменклатуре
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Характеристика
		|			И &ПоляСвязиДокумент
		|			И (ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.Проведен)
		|			И (ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.Организация = &Организация)
		|			И (ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.ВидПродукции = &ВидПродукции)
		|			И (ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Шаблон,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ЦелевойПол,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Модель,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ТоварныйЗнак,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ВозрастнаяКатегория,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СпособВводаВОборот,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СпособФормированияСерийногоНомера,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СтатусУказанияСерии,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.Дата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Дата
		|	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПоНоменклатуре.Номенклатура   КАК Номенклатура,
		|	ДокументыПоНоменклатуре.Характеристика КАК Характеристика,
		|	МАКСИМУМ(ДокументыПоНоменклатуре.Дата) КАК Дата,
		|	&ПоляГруппировкиПоДатеИСиноним
		|ПОМЕСТИТЬ ГруппировкаПоМаксимальнойДатеДокумента
		|ИЗ
		|	ДокументыПоНоменклатуре КАК ДокументыПоНоменклатуре
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыПоНоменклатуре.Характеристика,
		|	ДокументыПоНоменклатуре.Номенклатура,
		|	&ПоляГруппировкиПоДате
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Дата,
		|	&ПоляГруппировкиПоДате
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки               КАК ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура                       КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика                     КАК Характеристика,
		|	ДокументыПоНоменклатуре.GTIN                              КАК GTIN,
		|	ДокументыПоНоменклатуре.Шаблон                            КАК Шаблон,
		|	ДокументыПоНоменклатуре.ЦелевойПол                        КАК ЦелевойПол,
		|	ДокументыПоНоменклатуре.Модель                            КАК Модель,
		|	ДокументыПоНоменклатуре.ТоварныйЗнак                      КАК ТоварныйЗнак,
		|	ДокументыПоНоменклатуре.ВозрастнаяКатегория               КАК ВозрастнаяКатегория,
		|	ДокументыПоНоменклатуре.СпособВводаВОборот                КАК СпособВводаВОборот,
		|	ЕСТЬNULL(ДокументыПоНоменклатуре.СпособФормированияСерийногоНомера,
		|		ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически)) КАК СпособФормированияСерийногоНомера,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДокументыПоНоменклатуре.СпособФормированияСерийногоНомера, ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически)) = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически)
		|			ТОГДА 2
		|			ИНАЧЕ ЕСТЬNULL(ДокументыПоНоменклатуре.СтатусУказанияСерии, 2)
		|	КОНЕЦ КАК СтатусУказанияСерии
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыПоНоменклатуре КАК ДокументыПоНоменклатуре
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппировкаПоМаксимальнойДатеДокумента КАК ГруппировкаПоМаксимальнойДатеДокумента
		|			ПО ДокументыПоНоменклатуре.Номенклатура      = ГруппировкаПоМаксимальнойДатеДокумента.Номенклатура
		|				И ДокументыПоНоменклатуре.Характеристика = ГруппировкаПоМаксимальнойДатеДокумента.Характеристика
		|				И ДокументыПоНоменклатуре.Дата           = ГруппировкаПоМаксимальнойДатеДокумента.Дата
		|				И &ПоляСвязиИтогДокументы
		|		ПО ВременнаяТаблицаТовары.Номенклатура      = ДокументыПоНоменклатуре.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = ДокументыПоНоменклатуре.Характеристика
		|			И &ПоляСвязиИтогВременнаяТаблица";
	
	МассивПолейСвязи = СтрРазделить(ДополнительныеПоляПоиска, ",", Ложь);
	
	Если МассивПолейСвязи.Количество() Тогда
		ПоляСвязиДокумент             = "";
		ПоляСвязиИтогДокументы        = "";
		ПоляСвязиИтогВременнаяТаблица = "";
		ПоляГруппировкиПоДатеИСиноним = "";
		ПоляГруппировкиПоДате         = "";
		Для Каждого ПолеСвязи Из МассивПолейСвязи Цикл
			ПоляСвязиДокумент = ПоляСвязиДокумент
				+ ?(ЗначениеЗаполнено(ПоляСвязиДокумент), " И ", "")
				+ СтрШаблон(
					"ВременнаяТаблицаТовары.%1 = ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.%1",
					СокрЛП(ПолеСвязи));
			ПоляСвязиИтогДокументы = ПоляСвязиИтогДокументы
				+ ?(ЗначениеЗаполнено(ПоляСвязиИтогДокументы), " И ", "")
				+ СтрШаблон(
					"ДокументыПоНоменклатуре.%1 = ГруппировкаПоМаксимальнойДатеДокумента.%1",
					СокрЛП(ПолеСвязи));
			ПоляСвязиИтогВременнаяТаблица = ПоляСвязиИтогВременнаяТаблица
				+ ?(ЗначениеЗаполнено(ПоляСвязиИтогВременнаяТаблица), " И ", "")
				+ СтрШаблон(
					"ВременнаяТаблицаТовары.%1 = ДокументыПоНоменклатуре.%1",
					СокрЛП(ПолеСвязи));
			ПоляГруппировкиПоДатеИСиноним = ПоляГруппировкиПоДатеИСиноним
				+ ?(ЗначениеЗаполнено(ПоляГруппировкиПоДатеИСиноним), ", " + Символы.ПС, "")
				+ СтрШаблон(
					"ДокументыПоНоменклатуре.%1 КАК %1",
					СокрЛП(ПолеСвязи));
			ПоляГруппировкиПоДате = ПоляГруппировкиПоДате
				+ ?(ЗначениеЗаполнено(ПоляГруппировкиПоДате), ", " + Символы.ПС, "")
				+ СтрШаблон(
					"ДокументыПоНоменклатуре.%1",
					СокрЛП(ПолеСвязи));
		КонецЦикла;
	Иначе
		ПоляСвязиДокумент             = "ИСТИНА";
		ПоляСвязиИтогДокументы        = "ИСТИНА";
		ПоляСвязиИтогВременнаяТаблица = "ИСТИНА";
		ПоляГруппировкиПоДатеИСиноним = "ИСТИНА";
		ПоляГруппировкиПоДате         = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляСвязиДокумент",             ПоляСвязиДокумент);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляСвязиИтогДокументы",        ПоляСвязиИтогДокументы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляСвязиИтогВременнаяТаблица", ПоляСвязиИтогВременнаяТаблица);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляГруппировкиПоДатеИСиноним", ПоляГруппировкиПоДатеИСиноним);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляГруппировкиПоДате",         ПоляГруппировкиПоДате);
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("ВидПродукции",  Объект.ВидПродукции);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПронумероватьИсходнуюТаблицуДанныхЗаполнения(ИсходнаяТаблица, ПолеОтслеживанияНовойСтроки = Неопределено) Экспорт
	
	Если ИсходнаяТаблица.Колонки.Найти("ИндексИсходнойСтроки") = Неопределено Тогда
		ИсходнаяТаблица.Колонки.Добавить("ИндексИсходнойСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	КонецЕсли;
	
	МассивСтрокДляУдаления = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
		СтрокаТаблицы.ИндексИсходнойСтроки = ИсходнаяТаблица.Индекс(СтрокаТаблицы);
		Если ЗначениеЗаполнено(ПолеОтслеживанияНовойСтроки)
			И ЗначениеЗаполнено(СтрокаТаблицы[ПолеОтслеживанияНовойСтроки]) Тогда
			МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивСтрокДляУдаления Цикл
		ИсходнаяТаблица.Удалить(ИсходнаяТаблица.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
КонецПроцедуры

Функция ВидПродукции(ДанныеПоследнихДокументов)
	
	ДанныеАнализа = ДанныеПоследнихДокументов.Скопировать(,"ВидПродукции, Количество");
	ДанныеАнализа.Свернуть("ВидПродукции", "Количество");
	ДанныеАнализа.Сортировать("Количество Убыв");
	Если ДанныеАнализа.Количество() > 0 Тогда
		ВидПродукции = ДанныеАнализа[0].ВидПродукции;
	КонецЕсли;
	
	Если Не ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ВидПродукции) Тогда
		ВидПродукции = Неопределено;
	КонецЕсли;
	
	Возврат ВидПродукции;
	
КонецФункции

Процедура ЗаполнитьПоСтатистике(Поля, ДанныеЗаполнения, ДанныеПоследнихДокументов, ПоляОтбора = "ВидПродукции")
	
	Отбор = Новый Структура;
	ОтбираемыеПоля = СтрРазделить(ПоляОтбора, ",");
		
	Для каждого ПолеОтбора из ОтбираемыеПоля Цикл
		ИмяПоля = СокрЛП(ПолеОтбора);
		Если ДанныеЗаполнения[ИмяПоля] <> Неопределено Тогда
			Отбор.Вставить(ИмяПоля, ДанныеЗаполнения[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	Если Отбор.Количество() = 0 Тогда
		Отбор = Неопределено;
	КонецЕсли;
	
	ЗаполняемыеПоля = СтрРазделить(Поля, ",");
	
	РезультатыАнализа = ДанныеПоследнихДокументов.Скопировать(
		Отбор, Поля + ", Количество");
	
	РезультатыАнализа.Свернуть(Поля, "Количество");
	РезультатыАнализа.Сортировать("Количество Убыв");
	Если РезультатыАнализа.Количество() > 0 Тогда
		Для Каждого Поле Из ЗаполняемыеПоля Цикл
			ИмяПоля = СокрЛП(Поле);
			ДанныеЗаполнения[ИмяПоля] = РезультатыАнализа[0][ИмяПоля];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
