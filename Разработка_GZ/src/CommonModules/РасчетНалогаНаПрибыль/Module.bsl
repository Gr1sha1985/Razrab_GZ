// Описывает контекст, в котором выполняется расчет налога на прибыль - организацию, период и т.п.
//
// Параметры:
//  Организация                      - СправочникСсылка.Организации - налогоплательщик
//  КонецПериода					 - Дата - характеризует отчетный период; дата из последнего месяца отчетного периода
//
// Возвращаемое значение:
//  Структура    - состав см. в теле функции
//  Неопределено - расчет не имеет смысла, например, в указанный период организация не существовала
//
Функция НовыйКонтекстРасчета(Организация, КонецПериода) Экспорт
	
	ОписаниеНалоговогоПериода = НалоговыйУчет.БлижайшийНалоговыйПериод(КонецПериода, Организация);
	Если КонецПериода < ОписаниеНалоговогоПериода.Начало Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Глава 25 предусматривает определение некоторых показателей ежемесячно
	// Кроме того, налог рассчитываем ежемесячно для целей ПБУ 18 
	// Также расчет за месяц может потребоваться для целей ст. 288 НК РФ
	// (письмо Минфина от 10 марта 2006 г. N 03-03-04/1/199)
	НачалоМесяца = Макс(НачалоМесяца(КонецПериода), ОписаниеНалоговогоПериода.Начало);
	
	КонтекстРасчета = Новый Структура; 
	
	КонтекстРасчета.Вставить("НачалоНалоговогоПериода", ОписаниеНалоговогоПериода.Начало);
	КонтекстРасчета.Вставить("КонецПериода",            КонецМесяца(КонецПериода));
	КонтекстРасчета.Вставить("НалоговыйПериод",         ОписаниеНалоговогоПериода.Период);
	КонтекстРасчета.Вставить("НачалоМесяца",            НачалоМесяца);
	
	КонтекстРасчета.Вставить("Организация",             Организация);
	КонтекстРасчета.Вставить("Организации",             ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
	КонтекстРасчета.Вставить(
		"РегистрацияПоМестуНахожденияОрганизации",
		НалоговыйУчет.РегистрацияОрганизацииВНалоговомОргане(Организация, КонецПериода));
		
	КонтекстРасчета.Вставить(
		"ВариантУчетаОтложенногоНалога",
		НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(КонецПериода, Организация));
		
	КонтекстРасчета.Вставить(
		"ПрименяетсяПБУ18",
		КонтекстРасчета.ВариантУчетаОтложенногоНалога <> Перечисления.ВариантыУчетаОтложенногоНалога.Нет);
		
	ПрименяютсяСпециальныеРежимы = Не УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложенияЗаПериод(
		КонтекстРасчета.Организация, 
		КонтекстРасчета.НачалоНалоговогоПериода,
		КонтекстРасчета.КонецПериода);
		
	КонтекстРасчета.Вставить("ПрименяютсяСпециальныеРежимы", ПрименяютсяСпециальныеРежимы);
		
	Возврат КонтекстРасчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ НАЛОГА

// Рассчитывает налоговую базу по налогу на прибыль
//
Функция НалоговаяБаза(НачалоПериода, КонецПериода, Организация) Экспорт
	
	Суммы = СуммыНалоговойБазы(НачалоПериода, КонецПериода, Организация);
	Возврат Суммы.СуммаНУ;

КонецФункции

// Рассчитывает налоговую базу по налогу на прибыль
// (по неокругленным компонентам налоговой базы; в том числе, по данным бухгалтерского учета).
//
// Параметры:
//  НачалоПериода	  - Дата - начало периода расчета
//  КонецПериода	  - Дата - конец периода расчета
//  Организация		  - СправочникСсылка.Организации - налогоплательщик (головная организация)
//  ОписаниеСумм	  - Структура - см. КоллекцииСумм.НовыйОписаниеКоллекцииСумм, описание коллекции сумм,
//                      соответствующих видам учета, по данным которых должна быть рассчитана налоговая база.
//                      Заполняются суммы с именами Сумма, СуммаНУ, СуммаПР, СуммаВР.
//                      Если не передан, подразумевается СуммаНУ.
//  СчетНалоговойБазы - ПланСчетовСсылка.Хозрасчетный - субсчет счета прибылей и убытков, соответствующий части налоговой базы,
//                      облагаемой по отдельной ставке налога (в частном случае - не облагаемой).
//                      Если не передан, подразумевается счет 99.01.1
//                      ("Прибыли и убытки по деятельности с основной системой налогообложения").
// 
// Возвращаемое значение:
//  Структура - см. КоллекцииСумм.НовыйКоллекцияСумм - суммы налоговой базы по выбранным видам учета.
//              Заполняются Сумма, СуммаНУ, СуммаПР, СуммаВР
//
Функция СуммыНалоговойБазы(НачалоПериода, КонецПериода, Организация, ОписаниеСумм = Неопределено, СчетНалоговойБазы = Неопределено) Экспорт
	
	Если ОписаниеСумм = Неопределено Тогда
		ОписаниеСумм = ОписаниеСуммНалоговыйУчет();
	КонецЕсли;
	
	Если СчетНалоговойБазы = Неопределено Тогда
		СчетНалоговойБазы = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
	КонецЕсли;
	
	СоставБазы = Новый Массив;
	СоставБазы.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	СоставБазы.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	СоставБазы.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
	
	// Счета финансового результата закрываются по пустой аналитике ПрибылиИУбытки,
	// поэтому исключать закрывающие обороты не требуется.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("СоставБазы",    СоставБазы);
	Запрос.УстановитьПараметр(
		"СчетаПрибылиУбытки",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетНалоговойБазы));
		
	// Счет прибыли - пассивный, поэтому оборот - отрицательный
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(-ПрибылиУбытки.СуммаОборот), 0) КАК Сумма,
	|	ЕСТЬNULL(СУММА(-ПрибылиУбытки.СуммаНУОборот), 0) КАК СуммаНУ,
	|	ЕСТЬNULL(СУММА(-ПрибылиУбытки.СуммаПРОборот), 0) КАК СуммаПР,
	|	ЕСТЬNULL(СУММА(-ПрибылиУбытки.СуммаВРОборот), 0) КАК СуммаВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаПрибылиУбытки),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки),
	|			Организация = &Организация
	|				И Субконто1 В (&СоставБазы),
	|			,
	|			) КАК ПрибылиУбытки";
	
	Суммы = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Суммы, Выборка);
	КонецЕсли;
	
	Возврат Суммы;

КонецФункции

// Начисляет налог на прибыль по правилам главы 25 НК - формирует проводки.
//
// Параметры:
//  Движения		- Набор движений документа (регламентной операции)
//  КонтекстРасчета - см. НовыйКонтекстРасчета()
//  РасчетРаспределенияНалоговойБазы 
//                  - Таблица значений - см. НалоговыйУчетОбособленныхПодразделений.НовыйРасчетРаспределенияНалоговойБазы()
//                  - Неопределено - распределение не требуется
//	БазаНалогаЗаГод	- Число - прибыль по всей организации за отчетный (налоговый) период
//  МенеджерВременныхТаблиц 	 - см. НалоговыйУчетОбособленныхПодразделений.ПодготовитьРасчетРаспределенияНалоговойБазы() - содержит временную таблицу
//								   СоответствиеПрежнихИТекущихНалоговыхОрганов, которая используется в процедуре, если налог распределяется между налоговыми органами
//
// Возвращаемое значение:
//  Число - общая сумма (до)начисленного налога
//
Функция НачислитьНалогНаПрибыль(Движения, КонтекстРасчета, РасчетРаспределенияНалоговойБазы, БазаНалогаЗаГод, МенеджерВременныхТаблиц) Экспорт

	СуммыНалога = Новый Структура;
	СуммыНалога.Вставить("Всего",    0);
	СуммыНалога.Вставить("Проводки", 0);
	
	РаспределениеНалогаНаПрибыль = НовыйРаспределениеНалогаНаПрибыль();
	Если РасчетРаспределенияНалоговойБазы <> Неопределено Тогда
		Для Каждого Запись Из РасчетРаспределенияНалоговойБазы Цикл
			ЗаполнитьЗначенияСвойств(РаспределениеНалогаНаПрибыль.Добавить(), Запись); // Ставку налога определим позже
		КонецЦикла;
	КонецЕсли;
	
	// Ситуация, когда БазаНалогаЗаГод = 0 также рассматривается, т.к. в этом случае может потребоваться сделать сторнирующие проводки
	
	ДатаРасчетаСтавки = Макс(КонтекстРасчета.КонецПериода, КонтекстРасчета.НалоговыйПериод);
	
	СтавкаФедеральныйБюджет  = НалоговыйУчет.НалоговаяСтавкаФедеральныйБюджет(ДатаРасчетаСтавки, КонтекстРасчета.Организация);
	СтавкаРегиональныйБюджет = НалоговыйУчет.НалоговаяСтавкаРегиональныйБюджет(ДатаРасчетаСтавки, КонтекстРасчета.Организация);
	
	Если ЗначениеЗаполнено(РаспределениеНалогаНаПрибыль) Тогда
		СтавкиРегиональныйБюджет = Новый Соответствие;
		НалоговыйУчетОбособленныхПодразделений.ЗаполнитьНалоговыеСтавкиРегиональныйБюджет(
			СтавкиРегиональныйБюджет,
			КонтекстРасчета.КонецПериода,
			КонтекстРасчета.Организация,
			РаспределениеНалогаНаПрибыль.ВыгрузитьКолонку("РегистрацияВНалоговомОргане"));
		Для Каждого СтрокаРаспределениеНалогаНаПрибыль Из РаспределениеНалогаНаПрибыль Цикл
			// В каждом налоговом органе может быть своя ставка в региональный бюджет
			СтрокаРаспределениеНалогаНаПрибыль.СтавкаРегиональныйБюджет = СтавкиРегиональныйБюджет[СтрокаРаспределениеНалогаНаПрибыль.РегистрацияВНалоговомОргане];
		КонецЦикла;
	КонецЕсли;
		
	// Сначала соберем в таблице все данные, а затем по этой таблице сформируем проводки.
	НачислениеНалога = НачислениеНалогаНаПрибыль(
		КонтекстРасчета,
		БазаНалогаЗаГод,
		СтавкаФедеральныйБюджет,
		СтавкаРегиональныйБюджет,
		РаспределениеНалогаНаПрибыль,
		МенеджерВременныхТаблиц);
				
	// Обеспечим заполнение РегистрацияВНалоговомОргане - для работы ДобавитьПроводкиУменьшениеНаСуммуТорговогоСбора() и формирования проводок
	Для Каждого Начисление Из НачислениеНалога Цикл
		Если Не ЗначениеЗаполнено(Начисление.РегистрацияВНалоговомОргане) Тогда
			Начисление.РегистрацияВНалоговомОргане = КонтекстРасчета.РегистрацияПоМестуНахожденияОрганизации;
		КонецЕсли;
	КонецЦикла;
	
	// При формировании проводок по уменьшению налога может потребоваться скорректировать сумму расходов,
	// а для этого - записать набор записей Хозрасчетный, с тем, чтобы скорректированную сумму можно было учесть ниже,
	// при расчете проводок для целей ПБУ 18.
	// В то же время, на момент расчета проводок для целей ПБУ 18, не должны быть записаны проводки по начислению налога на счет 68.04.1.
	// Поэтому сначала формируем проводки по уменьшению суммы налога - и, при необходимости, записываем их,
	// а затем - проводки по начислению налога, но не записываем их.
	ДобавитьПроводкиУменьшениеНаСуммуТорговогоСбора(
		Движения,
		НачислениеНалога,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация,
		КонтекстРасчета.ПрименяетсяПБУ18);
	
	// Субконто РегистрацияВНалоговомОргане может не использоваться в конфигурации
	СубконтоРегистрацияВНалоговомОргане = Неопределено;
	ВидыСубконто = Новый Массив;
	НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто);
	Если ЗначениеЗаполнено(ВидыСубконто) Тогда
		СубконтоРегистрацияВНалоговомОргане = ВидыСубконто[0];
	КонецЕсли;
	
	// Формируем проводки
	
	Если КонтекстРасчета.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.Нет Тогда
		СчетДт = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;  // 99.01.1
	ИначеЕсли КонтекстРасчета.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетод Тогда
		СчетДт = ПланыСчетов.Хозрасчетный.ТекущийНалогНаПрибыль; // 99.02.Т
	Иначе
		СчетДт = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль; // 68.04.2
	КонецЕсли;
	
	Для Каждого ДанныеПроводки Из НачислениеНалога Цикл
		
		Если ДанныеПроводки.СуммаПроводки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = КонтекстРасчета.КонецПериода;
		Проводка.Организация = КонтекстРасчета.Организация;
		Проводка.Сумма       = ДанныеПроводки.СуммаПроводки;
		Проводка.Содержание  = НСтр("ru = 'Налог на прибыль'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
		Проводка.СчетДт      = СчетДт;
	
		Если Не КонтекстРасчета.ПрименяетсяПБУ18 Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, 
			Проводка.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов,
			ДанныеПроводки.УровеньБюджета);
		Если СубконтоРегистрацияВНалоговомОргане <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт,
				Проводка.СубконтоКт,
				СубконтоРегистрацияВНалоговомОргане,
				ДанныеПроводки.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		Движения.Хозрасчетный.Записывать = Истина;
		
	КонецЦикла;
	
	ОтразитьОсвобождениеОтНалога(
		Движения.Хозрасчетный,
		НачислениеНалога,
		КонтекстРасчета,
		ЗначениеЗаполнено(РаспределениеНалогаНаПрибыль));
	
	Если БазаНалогаЗаГод >= 0 Тогда
		// Общая сумма проводок - во все бюджеты и все налог.органы
		СуммыНалога.Проводки = НачислениеНалога.Итог("СуммаПроводки");
	КонецЕсли;
	
	СуммыНалога.Всего = НачислениеНалога.Итог("СуммаНалога");
	
	Возврат СуммыНалога;
	
КонецФункции

#Область Соглашения

Функция ОписаниеСуммНалоговыйУчет() Экспорт
	
	ОписаниеСумм = КоллекцииСумм.НовыйОписаниеКоллекцииСумм();
	КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "НалоговыйУчет", "СуммаНУ");
	Возврат ОписаниеСумм;
	
КонецФункции

#КонецОбласти

Процедура ДобавитьПроводкуСписанияОтклоненийПриОкругленииНалогаНаПрибыль(Движения, Период, Организация) Экспорт
	
	Если Период < Дата(2014,01,01) Тогда 
		Возврат;
	КонецЕсли;
	
	// Исходим из предположения, что проводки по счету 68.04.2 выполняются 
	// только в ходе этой регламентной операции и записываются разом - т.е. не вызывается Движения.Записать()
	ОстатокОкругления = 0; // Его будем дебетовать. Если до "округления" сальдо на счете дебетовое, то остаток должен получиться отрицательным.
	СчетРасчетНалогаНаПрибыль = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	Для Каждого Проводка Из Движения.Хозрасчетный Цикл
		Если Проводка.СчетКт = СчетРасчетНалогаНаПрибыль Тогда
			ОстатокОкругления = ОстатокОкругления + Проводка.Сумма;
		КонецЕсли;
		Если Проводка.СчетДт = СчетРасчетНалогаНаПрибыль Тогда
			ОстатокОкругления = ОстатокОкругления - Проводка.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если ОстатокОкругления = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Проводка = Движения.Хозрасчетный.Добавить();
	Проводка.Период      = Период;
	Проводка.Организация = Организация;
	Проводка.Содержание  = НСтр("ru = 'Перенос сальдо счета 68.04.2'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
	
	Если ОстатокОкругления > 0 Тогда
		Проводка.Сумма       = ОстатокОкругления;
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;  // 68.04.2
		Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;   // 99.09
	Иначе
		Проводка.Сумма       = -ОстатокОкругления;
		Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;   // 68.04.2
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;    // 99.09
	КонецЕсли;
	
КонецПроцедуры

#Область ДанныеДляНачисленияНалога

// Готовит данные для формирования проводок по начислению налога на прибыль на счет расчетов с бюджетом
//
// Параметры:
//  КонтекстРасчета              - см. НовыйКонтекстРасчета()
//  НалоговаяБаза				 - Число - величина налоговой базы
//  СтавкаФедеральныйБюджет		 - Число - ставка налога в федеральный бюджет в долях от единицы (например, 0.02 ==  2%)
//  СтавкаРегиональныйБюджет	 - Число - ставка налога в федеральный бюджет в долях от единицы (например, 0.18 == 18%)
//  РаспределениеНалогаНаПрибыль - см. НовыйРаспределениеНалогаНаПрибыль() - исходные данные для распределения налога между налоговыми органами
//                               - Неопределено - функционал распределения налога не используется в конфигурации
//  МенеджерВременныхТаблиц 	 - см. НалоговыйУчетОбособленныхПодразделений.ПодготовитьРасчетРаспределенияНалоговойБазы() - содержит временную таблицу
//								   СоответствиеПрежнихИТекущихНалоговыхОрганов, которая используется в процедуре, если налог распределяется между налоговыми органами
// 
// Возвращаемое значение:
//  см. НовыйНачислениеНалогаНаПрибыль()
//
Функция НачислениеНалогаНаПрибыль(КонтекстРасчета, НалоговаяБаза, СтавкаФедеральныйБюджет, СтавкаРегиональныйБюджет, РаспределениеНалогаНаПрибыль, МенеджерВременныхТаблиц)
	
	Если КонтекстРасчета.НачалоНалоговогоПериода < '2014-01-01' Тогда
		ТочностьРасчета = 2;
	Иначе
		ТочностьРасчета = 0; // с 2014 года налог на прибыль исчисляется в целых рублях
	КонецЕсли;
	
	НачислениеНалога = НовыйНачислениеНалогаНаПрибыль(ТочностьРасчета);
	
	// Сначала посчитаем суммы налога к уплате за весь налоговый период.
	// Затем вычтем сумму ранее начисленных авансов.
	// Разность этих величин - суммы проводок.
	
	// 1. Суммы к уплате за налоговый период
	// 1.1. Федеральный бюджет
	
	СуммаНалога = СуммаНалогаНаПрибыльВБюджет(НалоговаяБаза, СтавкаФедеральныйБюджет, ТочностьРасчета);
	
	ДобавитьНачислениеНалогаНаПрибыль(
		НачислениеНалога,
		Перечисления.УровниБюджетов.ФедеральныйБюджет,
		Неопределено,
		СуммаНалога);
		
	// 1.2. Региональный бюджет
	
	Если Не ЗначениеЗаполнено(РаспределениеНалогаНаПрибыль) Тогда
		
		// Не надо делить по нал.органам - нет субконто РегистрацияВНалоговомОргане или один налоговый орган
		
		СуммаНалога = СуммаНалогаНаПрибыльВБюджет(НалоговаяБаза, СтавкаРегиональныйБюджет, ТочностьРасчета);
		
		ДобавитьНачислениеНалогаНаПрибыль(
			НачислениеНалога,
			Перечисления.УровниБюджетов.РегиональныйБюджет,
			Неопределено,
			СуммаНалога);
			
	Иначе // Надо делить по нал.органам
				
		Для Каждого Строка Из РаспределениеНалогаНаПрибыль Цикл
			
			Если Строка.ДоляНалоговойБазы = 0 Или Строка.СтавкаРегиональныйБюджет = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Налоговая база по регистрациям (КПП) уже рассчитана с учетом долей
			СуммаНалога = СуммаНалогаНаПрибыльВБюджет(Строка.НалоговаяБаза, Строка.СтавкаРегиональныйБюджет, ТочностьРасчета);
			ДобавитьНачислениеНалогаНаПрибыль(
				НачислениеНалога,
				Перечисления.УровниБюджетов.РегиональныйБюджет,
				Строка.РегистрацияВНалоговомОргане,
				СуммаНалога);
				
		КонецЦикла;
			
	КонецЕсли;
	
	// 2. Суммы ранее начисленных авансов.
	
	// Рассчитаем сумму начисленных ранее авансовых платежей.
	// Начислить нужно разницу между суммами налога и авансового платежа.
	СоответствиеПрежнихИТекущихНалоговыхОрганов = Неопределено;
	Если ЗначениеЗаполнено(РаспределениеНалогаНаПрибыль) Тогда
		СоответствиеПрежнихИТекущихНалоговыхОрганов = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	ИсключитьРанееНачисленныеАвансы(НачислениеНалога, КонтекстРасчета, СоответствиеПрежнихИТекущихНалоговыхОрганов);
	
	Возврат НачислениеНалога;
	
КонецФункции

Процедура ИсключитьРанееНачисленныеАвансы(НачислениеНалога, КонтекстРасчета, СоответствиеПрежнихИТекущихНалоговыхОрганов = Неопределено)
	
	Если КонтекстРасчета.НачалоМесяца > КонтекстРасчета.НачалоНалоговогоПериода Тогда
		
		// В зависимости от применяемой учетной политики налог может начисляться
		// в корреспонденции со счетом 68.04.2 или 99.02.Т
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", КонтекстРасчета.НачалоНалоговогоПериода);
		Запрос.УстановитьПараметр("КонецОтчетногоПериода",   КонтекстРасчета.КонецПериода);
		Запрос.УстановитьПараметр("Организация",             КонтекстРасчета.Организация);
		Запрос.УстановитьПараметр("СчетаТекущегоНалога",     НалогНаПрибыльБухгалтерскийУчет.СчетаТекущегоНалога());
		
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);      // Субконто1
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);              // Субконто2
		Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто); // Может быть "переустановлен"
		
		Отбор = Новый Структура;
		Отбор.Вставить("УровеньБюджета");
		
		Если СоответствиеПрежнихИТекущихНалоговыхОрганов <> Неопределено Тогда
			
			// Используется временная таблица СоответствиеПрежнихИТекущихНалоговыхОрганов, созданная на предыдущих шагах алгоритма.
			// (см. НалоговыйУчетОбособленныхПодразделений.ПодготовитьРасчетРаспределенияНалоговойБазы()) 
			// Т.к. регистрации подразделений в налоговых органах могут меняться, то начисления авансов прошлых периодов
			// в некоторых случаях в текущем периоде могут относиться уже на другие регистрации.
			// Такими случаями являются:
			// - переезд головной организации со сменой налоговой инспекции: авансы по прежним КПП за текущий год должны быть учтены
			//	 по текущей регистрации головной организации
			// - изменение налогового органа - получателя декларации в регионе при уплате налога по группе подразделений:
			//	 авансы по прежнему получателю декларации в регионе за текущий год должны быть учтены по новому получателю
			
			Запрос.МенеджерВременныхТаблиц = СоответствиеПрежнихИТекущихНалоговыхОрганов;
			
			Отбор.Вставить("РегистрацияВНалоговомОргане");
			
			НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто); // Субконто3
			Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
			
			Запрос.Текст = // Текст запроса модифицируется ниже с использованием СхемаЗапроса
			"ВЫБРАТЬ
			|	ХозрасчетныйОбороты.Субконто2 КАК УровеньБюджета,
			|	ВЫБОР
			|		КОГДА ХозрасчетныйОбороты.Субконто2 = ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.РегиональныйБюджет)
			|			ТОГДА ХозрасчетныйОбороты.Субконто3
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
			|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
			|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаАвансовыхПлатежей
			|ПОМЕСТИТЬ ПрежниеНачисления
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&НачалоНалоговогоПериода,
			|			&КонецОтчетногоПериода,
			|			,
			|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСБюджетом),
			|			&ВидыСубконто,
			|			Организация = &Организация
			|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
			|			КорСчет В (&СчетаТекущегоНалога),
			|			) КАК ХозрасчетныйОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ХозрасчетныйОбороты.Субконто2,
			|	ВЫБОР
			|		КОГДА ХозрасчетныйОбороты.Субконто2 = ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.РегиональныйБюджет)
			|			ТОГДА ХозрасчетныйОбороты.Субконто3
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
			|	КОНЕЦ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	РегистрацияВНалоговомОргане
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПрежниеНачисления.УровеньБюджета КАК УровеньБюджета,
			|	ЕСТЬNULL(СоответствиеПрежнихИТекущихНалоговыхОрганов.НалоговыйОрганТекущий, ПрежниеНачисления.РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
			|	СУММА(ПрежниеНачисления.СуммаАвансовыхПлатежей) КАК СуммаАвансовыхПлатежей
			|ИЗ
			|	ПрежниеНачисления КАК ПрежниеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеПрежнихИТекущихНалоговыхОрганов КАК СоответствиеПрежнихИТекущихНалоговыхОрганов
			|		ПО ПрежниеНачисления.РегистрацияВНалоговомОргане = СоответствиеПрежнихИТекущихНалоговыхОрганов.НалоговыйОрганПрежний
			|
			|СГРУППИРОВАТЬ ПО
			|	ПрежниеНачисления.УровеньБюджета,
			|	ЕСТЬNULL(СоответствиеПрежнихИТекущихНалоговыхОрганов.НалоговыйОрганТекущий, ПрежниеНачисления.РегистрацияВНалоговомОргане)";
			
		Иначе // нет распределения по РегистрацииВНалоговомОргане
			
			Запрос.Текст = // Текст запроса модифицируется ниже с использованием СхемаЗапроса
			"ВЫБРАТЬ
			|	ХозрасчетныйОбороты.Субконто2 КАК УровеньБюджета,
			|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаАвансовыхПлатежей
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&НачалоНалоговогоПериода,
			|			&КонецОтчетногоПериода,
			|			,
			|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСБюджетом),
			|			&ВидыСубконто,
			|			Организация = &Организация
			|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
			|			КорСчет В (&СчетаТекущегоНалога),
			|			) КАК ХозрасчетныйОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ХозрасчетныйОбороты.Субконто2";
			
		КонецЕсли;
		
		Если Не КонтекстРасчета.ПрименяетсяПБУ18 Тогда
			
			СхемаЗапроса = Новый СхемаЗапроса;
			СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
			// Счета текущего налога не используются, проводки по начислению налога - в корр. с 99, 
			// причем на счете 99 кор.субконто должно быть НалогНаПрибыль.
			// Поэтому в параметрах виртуальной таблицы также устанавливаем и вид субконто ПрибылиИУбытки
			ПараметрыВиртуальнойТаблицы = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Параметры;
			ПараметрыВиртуальнойТаблицы[6].Выражение = // УсловиеКорСчета
			Новый ВыражениеСхемыЗапроса("КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД)");
			ПараметрыВиртуальнойТаблицы[7].Выражение = // КорСубконто
			Новый ВыражениеСхемыЗапроса("ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки)");
			ПараметрыВиртуальнойТаблицы[5].Выражение = // Условие
			Новый ВыражениеСхемыЗапроса("" + ПараметрыВиртуальнойТаблицы[5].Выражение + " И КорСубконто1 = ЗНАЧЕНИЕ(Перечисление.ПрибылиИУбытки.НалогНаПрибыль)");
			
			Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
			
		КонецЕсли;
		
		ВыборкаАвансы = Запрос.Выполнить().Выбрать();
		Пока ВыборкаАвансы.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Отбор, ВыборкаАвансы);
			Начисления = НачислениеНалога.НайтиСтроки(Отбор);
			Если Начисления.Количество() > 0 Тогда
				Начисления[0].СуммаАвансовыхПлатежей = ВыборкаАвансы.СуммаАвансовыхПлатежей;
			Иначе
				// Если в текущих начислениях нет налогового органа, по которому ранее были начисления, то нужно сторнировать прежние начисления.
				// Такая ситуация возникнет, например, при закрытии обособленного подразделения в феврале или марте (если отчетный период - квартал).
				ЗаполнитьЗначенияСвойств(НачислениеНалога.Добавить(), ВыборкаАвансы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Суммы налога для формирования проводок (разница между авансом и ранее начисленным)
	Для Каждого Начисление Из НачислениеНалога Цикл
		Начисление.СуммаПроводки = Начисление.СуммаНалога - Начисление.СуммаАвансовыхПлатежей;
	КонецЦикла;
	
КонецПроцедуры

Функция ТипСуммаНалога(ТочностьРасчета = 0)
	
	Возврат ОбщегоНазначения.ОписаниеТипаЧисло(15, ТочностьРасчета);
	
КонецФункции

Функция НовыйНачислениеНалогаНаПрибыль(ТочностьРасчета = 0)
	
	ТипСуммаНалога = ТипСуммаНалога(ТочностьРасчета);
	НачислениеНалога = Новый ТаблицаЗначений;
	НачислениеНалога.Колонки.Добавить("УровеньБюджета",               Новый ОписаниеТипов("ПеречислениеСсылка.УровниБюджетов"));
	НачислениеНалога.Колонки.Добавить("РегистрацияВНалоговомОргане",  Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	НачислениеНалога.Колонки.Добавить("СуммаНалога",                  ТипСуммаНалога);
	НачислениеНалога.Колонки.Добавить("СуммаАвансовыхПлатежей",       ТипСуммаНалога);
	НачислениеНалога.Колонки.Добавить("СуммаПроводки",                ТипСуммаНалога);
	
	Возврат НачислениеНалога;
	
КонецФункции

Процедура ДобавитьНачислениеНалогаНаПрибыль(НачислениеНалога, УровеньБюджета, РегистрацияВНалоговомОргане, СуммаНалога)
	
	Начисление = НачислениеНалога.Добавить();
	Начисление.УровеньБюджета              = УровеньБюджета;
	Начисление.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
	Начисление.СуммаНалога                 = СуммаНалога;
	
КонецПроцедуры

Функция СуммаНалогаНаПрибыльВБюджет(НалоговаяБаза, СтавкаНалога, ТочностьРасчета = 0)
	
	Если НалоговаяБаза <= 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Окр(НалоговаяБаза * СтавкаНалога, ТочностьРасчета);
	
КонецФункции

Функция НовыйРаспределениеНалогаНаПрибыль()
	
	РаспределениеНалогаНаПрибыль = Новый ТаблицаЗначений;
	РаспределениеНалогаНаПрибыль.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	РаспределениеНалогаНаПрибыль.Колонки.Добавить("ДоляНалоговойБазы",           Новый ОписаниеТипов("Число"));
	РаспределениеНалогаНаПрибыль.Колонки.Добавить("СтавкаРегиональныйБюджет",    Новый ОписаниеТипов("Число"));
	РаспределениеНалогаНаПрибыль.Колонки.Добавить("НалоговаяБаза",               Новый ОписаниеТипов("Число"));
	
	Возврат РаспределениеНалогаНаПрибыль;
	
КонецФункции

#КонецОбласти

#Область ТорговыйСбор

// В соответствии с п. 10 ст. 286 налогоплательщик вправе уменьшить сумму налога (авансового платежа),
// исчисленного по итогам налогового (отчетного) периода,
// зачисляемую в консолидированный бюджет субъекта Российской Федерации ...
// на сумму торгового сбора, фактически уплаченного с начала налогового периода до даты уплаты налога (авансового платежа).

// При этом если организация не вправе уменьшить налог на прибыль на суммы торгового сбора,
// то в соответствии с ПБУ 9 следует признать расход по обычным видам деятельности.

// В программе при расчете торгового сбора (т.е. до начисления налога на прибыль) признается расход.
// При начислении налога на прибыль этот расход может быть отсторнирован в той сумме, на которую можно уменьшить налог.

Функция ЕстьЗадолженностьПоТорговомуСбору(Организация, ДатаПодписи) Экспорт
	
	// В соответствии с п. 10 ст. 286 налог может быть уменьшен только на суммы сбора,
	// фактически уплаченные в бюджет до даты уплаты налога.
	// Предполагаем, что декларация заполняется ранее даты уплаты налога.
	// Поэтому, если до даты составления декларации сбор не уплачен (есть любая задолженность),
	// то сумму налога не уменьшаем.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", БухгалтерскийУчетПереопределяемый.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаПодписи", НачалоДня(ДатаПодписи));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаПодписи, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор), , Организация В (&Организации)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция НалогФактическиУменьшенныйНаСуммыТорговогоСбора(Период, Организация) Экспорт
	
	// Уменьшение налога отражается проводками Дт 68.04.1 Кт 68.13
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	Результат.Колонки.Добавить("Сумма",                       ТипСуммаНалога());
	
	НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(Период, Организация);
	Если НачалоНалоговогоПериода = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",    Организация);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.Текст = // Запрос может быть модифицирован ниже с помощью СхемаЗапроса
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.Субконто3 КАК РегистрацияВНалоговомОргане,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСБюджетом),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|				И Субконто2 = ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.РегиональныйБюджет)
	|				И КорСубконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
	|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто3,
	|	ХозрасчетныйОбороты.КорСчет
	|
	|ИМЕЮЩИЕ
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) > 0";
	
	Если Не НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Колонки.Удалить(1); // Не используется "РегистрацияВНалоговомОргане"
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПроводкиУменьшениеНаСуммуТорговогоСбора(Движения, НачислениеНалога, Период, Организация, ПрименяетсяПБУ18)
	
	// Определим суммы уменьшения налога
	
	УменьшениеНалога = УменьшениеНалогаНаСуммуТорговогоСбора(Период, Организация, НачислениеНалога); // Далее в УменьшениеНалога могут быть добавлены колонки
	УменьшениеНалога.Колонки.Добавить("СуммаУменьшенРанее",  УменьшениеНалога.Колонки.СуммаУменьшения.ТипЗначения);
	УменьшениеНалога.Колонки.Добавить("СуммаПроводки",       УменьшениеНалога.Колонки.СуммаУменьшения.ТипЗначения);
	
	Если Не ЗначениеЗаполнено(УменьшениеНалога) Тогда
		Возврат;
	КонецЕсли;
	
	// Определим суммы, на которые налог был уменьшен ранее.
	
	Если Месяц(Период) > 1 Тогда
		// Есть предыдущие отчетные периоды
		ПредыдущийОтчетныйПериод = НачалоМесяца(Период) - 1;
		НалогУменьшенРанее = НалогФактическиУменьшенныйНаСуммыТорговогоСбора(ПредыдущийОтчетныйПериод, Организация);
		
		Для Каждого ЗаписьНалогУменьшенРанее Из НалогУменьшенРанее Цикл
			
			Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
				СтрокаУменьшениеНалога = УменьшениеНалога.Найти(ЗаписьНалогУменьшенРанее.РегистрацияВНалоговомОргане,"РегистрацияВНалоговомОргане");
			ИначеЕсли ЗначениеЗаполнено(УменьшениеНалога) Тогда
				СтрокаУменьшениеНалога = УменьшениеНалога[0];
			Иначе
				СтрокаУменьшениеНалога = Неопределено;
			КонецЕсли;
			Если СтрокаУменьшениеНалога = Неопределено Тогда
				СтрокаУменьшениеНалога = УменьшениеНалога.Добавить();
				СтрокаУменьшениеНалога.РегистрацияВНалоговомОргане = ЗаписьНалогУменьшенРанее.РегистрацияВНалоговомОргане;
			КонецЕсли;
			
			СтрокаУменьшениеНалога.СуммаУменьшенРанее = СтрокаУменьшениеНалога.СуммаУменьшенРанее + ЗаписьНалогУменьшенРанее.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// На разницу сформируем проводки.
	// При этом
	// - либо отсторнируем суммы торгового сбора, ранее отнесенные к расходам
	// - либо восстановим ранее отсторнированные.
	
	// Сначала рассчитаем суммы проводок...
	
	Для Каждого ЗаписьУменьшениеНалога Из УменьшениеНалога Цикл
		ЗаписьУменьшениеНалога.СуммаПроводки = ЗаписьУменьшениеНалога.СуммаУменьшения - ЗаписьУменьшениеНалога.СуммаУменьшенРанее;// Ниже можем уточнить, если окажется, что налог начислялся не за счет расходов
	КонецЦикла;
	
	СуммаПроводок = УменьшениеНалога.Итог("СуммаПроводки");
	
	Если СуммаПроводок > 0 Тогда // ранее был признан расход. Надо его сторнировать
		Расходы = РасходыТорговыйСбор(Период, Организация);
		СуммаКорректировкиРасходов = Мин(Расходы.Итог("Сумма"), СуммаПроводок);
		СодержаниеПроводок = НСтр("ru = 'Сторнированы расходы в виде сумм уплаченного торгового сбора'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
	Иначе // восстанавливаем ранее отсторнированный расход
		Расходы = РанееОтсторнированныеРасходыТорговыйСбор(Период, Организация);
		СуммаКорректировкиРасходов = Макс(Расходы.Итог("Сумма"), СуммаПроводок); // суммы отрицательные, поэтому max
		СодержаниеПроводок = НСтр("ru = 'Восстановлены расходы в виде сумм уплаченного торгового сбора'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
	КонецЕсли;
	
	СуммыКорректировкиРасходов = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
		СуммаКорректировкиРасходов,
		Расходы.ВыгрузитьКолонку("Сумма"),
		0);
	Если СуммыКорректировкиРасходов = Неопределено Тогда
		Расходы.ЗаполнитьЗначения(0, "Сумма");
	Иначе
		Расходы.ЗагрузитьКолонку(СуммыКорректировкиРасходов, "Сумма");
	КонецЕсли;
	
	Если СуммаПроводок <> СуммаКорректировкиРасходов Тогда
		
		СуммыКорректировкиНалога = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам( // Здесь корректируем налог только за счет корректировки расходов
			СуммаКорректировкиРасходов,
			УменьшениеНалога.ВыгрузитьКолонку("СуммаПроводки"),
			0);
		Если СуммыКорректировкиНалога = Неопределено Тогда
			УменьшениеНалога.ЗаполнитьЗначения(0, "СуммаПроводки");
		Иначе
			УменьшениеНалога.ЗагрузитьКолонку(СуммыКорректировкиНалога, "СуммаПроводки");
		КонецЕсли;
		
	КонецЕсли;
	
	// ... затем сформируем проводки
	
	// 1. Корректировка расходов
	СкорректированыРасходы = Ложь;
	Для Каждого ЗаписьРасходы Из Расходы Цикл
		
		Если ЗаписьРасходы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Две похожие проводки:
		ПроводкиРасходы = Новый Структура;
		ПроводкиРасходы.Вставить("Дебет44Кредит68", Движения.Хозрасчетный.Добавить()); // скорректируем расходы на счете 44
		ПроводкиРасходы.Вставить("Дебет90Кредит44", Движения.Хозрасчетный.Добавить()); // регламентная операция "Закрытие счета 44" уже выполнена, поэтому закроем счет отдельно
		
		// Счет 68
		ПроводкиРасходы.Дебет44Кредит68.СчетКт = ПланыСчетов.Хозрасчетный.ТорговыйСбор;
		
		БухгалтерскийУчет.УстановитьСубконто(
			ПроводкиРасходы.Дебет44Кредит68.СчетКт,
			ПроводкиРасходы.Дебет44Кредит68.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		// Счет 44
		// См. также РасчетСебестоимости.СписатьРасходыНаПродажу().
		// Здесь проводки выполняем локальным кодом, потому что здесь вызывать общий алгоритм избыточно:
		// все расходы не принимаемые для целей налогового учета и не относятся к специальным режимам.
		// Однако, принимаем ограничение: результат корректировки расходов не получится записать в регистры сведений о ходе расчета.
		ИспользованиеСчета44 = Новый Структура;
		ИспользованиеСчета44.Вставить("Дебет44Кредит68", "Дт");
		ИспользованиеСчета44.Вставить("Дебет90Кредит44", "Кт");
		
		Для Каждого ИспользованиеСчета Из ИспользованиеСчета44 Цикл
			Проводка = ПроводкиРасходы[ИспользованиеСчета.Ключ];
			СторонаПроводки = ИспользованиеСчета.Значение;
		
			Проводка["Счет" + СторонаПроводки] = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
		
			Для НомерСубконто = 1 По 3 Цикл
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка["Счет" + СторонаПроводки],
					Проводка["Субконто" + СторонаПроводки],
					НомерСубконто,
					ЗаписьРасходы["Субконто" + НомерСубконто]);
			КонецЦикла;
		КонецЦикла;
		
		// Счет 90.07
		ПроводкиРасходы.Дебет90Кредит44.СчетДт = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД; // Деятельность, облагаемая торговым сбором, не облагается ЕНВД
		
		// общие свойства проводок
		Для Каждого ОписаниеПроводки Из ПроводкиРасходы Цикл
			
			Проводка = ОписаниеПроводки.Значение;
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = СодержаниеПроводок;
			Проводка.Сумма       = - ЗаписьРасходы.Сумма;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, ЗаписьРасходы.Подразделение, ЗаписьРасходы.Подразделение);
			// Такой расход не отражается в налоговом учете
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(0, 0, Проводка.Сумма, Проводка.Сумма, 0, 0, Проводка, ПрименяетсяПБУ18);
			
		КонецЦикла;
		
		СкорректированыРасходы = Истина; // Это приведет к записи набора Хозрасчетный до окончания проведения
			
	КонецЦикла;
	
	// 2. Может потребоваться повторно закрыть счет 90
	Если СкорректированыРасходы Тогда
		Движения.Хозрасчетный.Записать(Ложь);
		ПроводкиЗакрытиеСчета90 = ЗакрытиеМесяца.ПроводкиЗакрытиеСчета90(Период, Организация);
		ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(Движения, ПроводкиЗакрытиеСчета90, Период, Организация);
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать(Ложь);// Данные о расходах повлияют на расчет налога для целей ПБУ 18
		КонецЕсли;
	КонецЕсли;
	
	// 3. Корректировка налога
	Для Каждого ДанныеПроводки Из УменьшениеНалога Цикл
		
		Если ДанныеПроводки.СуммаПроводки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Сумма       = ДанныеПроводки.СуммаПроводки;
		Если Проводка.Сумма > 0 Тогда
			Проводка.Содержание  = НСтр("ru = 'Налог на прибыль уменьшен на сумму торгового сбора'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
		Иначе
			Проводка.Содержание  = НСтр("ru = 'Восстановлен налог на прибыль, ранее уменьшенный на сумму торгового сбора'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
		КонецЕсли;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов,
			Перечисления.УровниБюджетов.РегиональныйБюджет);
			
		ВидыСубконтоРегистрацияВНалоговомОргане = Новый Массив;
		НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконтоРегистрацияВНалоговомОргане);
		Если ЗначениеЗаполнено(ВидыСубконтоРегистрацияВНалоговомОргане) Тогда
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт,
				Проводка.СубконтоДт,
				ВидыСубконтоРегистрацияВНалоговомОргане[0],
				ДанныеПроводки.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТорговыйСбор;
	
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
		Движения.Хозрасчетный.Записывать = Истина;
			
	КонецЦикла;
	
КонецПроцедуры

// Определяет суммы уменьшения налога на прибыль на суммы торгового сбора, начисленного за налоговый период.
//
// Параметры:
//  Период		     - Дата - указание на отчетный период. Можно передавать дату окончания периода
//  Организация	     - СправочникСсылка.Организации - организация, по которой исчисляется налог и сбор
//  НачислениеНалога - см. НовыйНачислениеНалогаНаПрибыль()
// 
// Возвращаемое значение:
//  ТаблицаЗначений - содержит колонки РегистрацияВНалоговомОргане, СуммаНалога, СуммаУменьшения
//
Функция УменьшениеНалогаНаСуммуТорговогоСбора(Период, Организация, НачислениеНалога)
	
	ТипСуммаНалога = ТипСуммаНалога();
	
	УменьшениеНалога = Новый ТаблицаЗначений;
	УменьшениеНалога.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	УменьшениеНалога.Колонки.Добавить("СуммаНалога",                 ТипСуммаНалога);
	УменьшениеНалога.Колонки.Добавить("СуммаУменьшения",             ТипСуммаНалога);
	
	Если Не ТорговыйСбор.УплачиваетсяТорговыйСбор(Организация, Период) Тогда
		Возврат УменьшениеНалога;
	КонецЕсли;
	
	// 1. Возьмем сумму начисленного торгового сбора с начала года по конец закрываемого месяца
	СуммаТорговогоСбора = СуммаНачисленногоТорговогоСбора(Период, Организация);
	Если СуммаТорговогоСбора = 0 Тогда
		Возврат УменьшениеНалога;
	КонецЕсли;
	
	// 2. Определим регистрации в налоговом органе, относящиеся к региону с торговым сбором
	РегистрацииТерриторииТорговогоСбора = РегистрацииВНалоговомОрганеПоТерриторииТорговогоСбора(Организация);
	Если Не ЗначениеЗаполнено(РегистрацииТерриторииТорговогоСбора) Тогда
		Возврат УменьшениеНалога;
	КонецЕсли;
	
	// 3. Определим сумму налога, уплаченного в бюджет с торговым сбором
	Для Каждого Начисление Из НачислениеНалога Цикл
		
		Если Начисление.УровеньБюджета <> Перечисления.УровниБюджетов.РегиональныйБюджет Тогда
			Продолжить;
		КонецЕсли;
		
		Если РегистрацииТерриторииТорговогоСбора.Найти(Начисление.РегистрацияВНалоговомОргане) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(УменьшениеНалога.Добавить(), Начисление, "РегистрацияВНалоговомОргане, СуммаНалога");
		
	КонецЦикла;
	
	НалогВБюджетТерриторииТорговогоСбора = УменьшениеНалога.Итог("СуммаНалога");
	
	// 4. Определим сумму, на которую можно уменьшить налог
	СуммаУменьшения = Макс(0, Мин(СуммаТорговогоСбора, НалогВБюджетТерриторииТорговогоСбора));
	
	// 5. Распределим сумму из п. 4 между регистрациями из п. 2 пропорционально суммам
	//    начисленного налога
	СуммыУменьшения = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
		СуммаУменьшения,
		УменьшениеНалога.ВыгрузитьКолонку("СуммаНалога"),
		0); // Налог исчисляется в целых рублях
		
	Если СуммыУменьшения <> Неопределено Тогда
		УменьшениеНалога.ЗагрузитьКолонку(СуммыУменьшения, "СуммаУменьшения");
	КонецЕсли;
	
	Возврат УменьшениеНалога;
	
КонецФункции

Функция РегистрацииВНалоговомОрганеПоТерриторииТорговогоСбора(Организация)
	
	РегистрацииВНалоговомОрганеПоТерриторииТорговогоСбора = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", БухгалтерскийУчетПереопределяемый.ВсяОрганизация(Организация));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.КодПоОКТМО КАК ОКТМО,
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец В(&Организации)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат РегистрацииВНалоговомОрганеПоТерриторииТорговогоСбора;
	КонецЕсли;
	
	ТаблицаТерриторий = ТорговыйСбор.ПрочитатьТаблицуТерриторий();
	ОКТМОТорговыйСбор = ТаблицаТерриторий.ВыгрузитьКолонку("КодПоОКТМО");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ОКТМО) Тогда
			Продолжить;
		КонецЕсли;
		
		ДлинаКодаТерритории = СтрДлина(Выборка.ОКТМО);
		
		Для Каждого Шаблон Из ОКТМОТорговыйСбор Цикл
			
			ДлинаШаблона = СтрДлина(Шаблон);
			Если ДлинаШаблона > ДлинаКодаТерритории Тогда
				// Не можем достоверно определить
				Продолжить;
			КонецЕсли;
			
			Если Лев(Выборка.ОКТМО, ДлинаШаблона) <> Шаблон Тогда
				// Не на территории торгового сбора
				Продолжить;
			КонецЕсли;
			
			РегистрацииВНалоговомОрганеПоТерриторииТорговогоСбора.Добавить(Выборка.Ссылка);
			Прервать;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат РегистрацииВНалоговомОрганеПоТерриторииТорговогоСбора;
	
КонецФункции

// Определяет сумму торгового сбора, начисленную в отчетном периоде (с начала года).
//
// См. также РасходыТорговыйСбор(), РанееОтсторнированныеРасходыТорговыйСбор()
//
Функция СуммаНачисленногоТорговогоСбора(Период, Организация) Экспорт
	
	НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(Период, Организация);
	Если НачалоНалоговогоПериода = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",    Организация); // Торговый сбор начисляется по головной организации
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаТорговогоСбора
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
	|			,
	|			) КАК ХозрасчетныйОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Окр(Выборка.СуммаТорговогоСбора, 0);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Определяет суммы расходов в виде торгового сбора за год в разрезе аналитики расходов.
// Эта сумма может быть меньше, чем общая сумма торгового сбора, так как часть сбора может уменьшить налог на прибыль
// и расходом не является.
// См. также СуммаНачисленногоТорговогоСбора(), РасходыТорговыйСбор()
//
Функция РасходыТорговыйСбор(Период, Организация)
	
	РасходыТорговыйСбор = НовыйРасходыТорговыйСбор();
	
	НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(Период, Организация);
	Если НачалоНалоговогоПериода = Неопределено Тогда
		Возврат РасходыТорговыйСбор;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",    Организация);// Торговый сбор начисляется по головной организации
	Запрос.УстановитьПараметр(
		"СчетаРасходов",
	    БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ИздержкиОбращения));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОбороты.Субконто3 КАК Субконто3,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаРасходов),
	|			,
	|			Организация = &Организация
	|				И КорСубконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
	|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3
	|
	|ИМЕЮЩИЕ
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РасходыТорговыйСбор.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат РасходыТорговыйСбор;
	
КонецФункции

// Определяет суммы расходов в виде торгового сбора за год в разрезе аналитики расходов,
// которые были отсторнированы при начислении налога на прибыль и уменьшении сумм налога на суммы торгового сбора.
// См. также РасходыТорговыйСбор()
//
Функция РанееОтсторнированныеРасходыТорговыйСбор(Период, Организация) // Суммы показаны с отрицательным знаком
	
	РасходыТорговыйСбор = НовыйРасходыТорговыйСбор();
	
	НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(Период, Организация);
	Если НачалоНалоговогоПериода = Неопределено Тогда
		Возврат РасходыТорговыйСбор;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",    Организация);// Торговый сбор начисляется по головной организации
	Запрос.УстановитьПараметр(
		"СчетаРасходов",
	    БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ИздержкиОбращения));
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОбороты.Субконто3 КАК Субконто3,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Запись,
	|			Счет В (&СчетаРасходов),
	|			,
	|			Организация В (&Организация)
	|				И КорСубконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
	|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотДт < 0
	|	И ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Регистратор) = ТИП(Документ.РегламентнаяОперация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РасходыТорговыйСбор.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат РасходыТорговыйСбор;
	
КонецФункции

Функция НовыйРасходыТорговыйСбор()
	
	РасходыТорговыйСбор = Новый ТаблицаЗначений;
	РасходыТорговыйСбор.Колонки.Добавить("Счет",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	РасходыТорговыйСбор.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	РасходыТорговыйСбор.Колонки.Добавить("Субконто1");
	РасходыТорговыйСбор.Колонки.Добавить("Субконто2");
	РасходыТорговыйСбор.Колонки.Добавить("Субконто3");
	РасходыТорговыйСбор.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
	
	Возврат РасходыТорговыйСбор;
	
КонецФункции

#КонецОбласти

#Область ОтложенныйНалог

// Выполнение регламентных операций для целей ПБУ 18 (затратный метод).
// Балансовый метод - см. модуль НалогНаПрибыльБухгалтерскийУчет.

// Определяет суммарную ставку налога на прибыль, установленную налоговым законодательством.
// Следует применять для оценки суммы, которую ожидается уплатить налоговым органам в будущем,
// в частности, для расчетов в целях выполнения ПБУ 18.
//
// Параметры:
//  Период		          - Период - Дата, на которую установлена ставка
//  Организация	          - СправочникСсылка.Организации - Организация, в отношении которой действует ставка
//  ФормаПредставленияРезультата 
//                        - Строка - форма, в которой функция вернет значение
//                          * "Доля"                              - как доля от налоговой базы (например, 0,2)
//                          * "Процент", "%" и любые другие слова - как процент, где база принята за 100% (например, 20%)
// 
// Возвращаемое значение:
//  Число - значение ставки налога (в долях от единицы или в процентах - см. ФормаПредставленияРезультата)
//
Функция СуммарнаяУстановленнаяСтавкаНалога(Период, Организация, ФормаПредставленияРезультата = "Доля") Экспорт
	
	Возврат НалоговыйУчет.НалоговаяСтавкаРегиональныйБюджет(Период, Организация, ФормаПредставленияРезультата) +
		    НалоговыйУчет.НалоговаяСтавкаФедеральныйБюджет(Период, Организация, ФормаПредставленияРезультата);
		
КонецФункции

// Рассчитатывает изменений всех показателей отложенного налога (отложенные активы, обязательства; постоянные активы, обязательства - см. ПБУ 18)
// в результате событий, произошедших за текущий месяц.
//
// Параметры:
//  КонтекстРасчета              - см. НовыйКонтекстРасчета()
//  РасчетнаяСтавкаНалогаЗаМесяц - значение суммарной налоговой ставки в процентах (например, 20%). 
//                                 Если налог распределяется по разным ставкам, то расчетная ставка учитывает пропорцию такого распределения,
//                                 при этом значение ставки рассчитывается так, чтобы она отражала корректировку суммы налога за текущий месяц.
// 
// Возвращаемое значение:
//  Структура - описание состава см. в начале функции
//
Функция РассчитатьОтложенныйНалог(КонтекстРасчета, РасчетнаяСтавкаНалогаЗаМесяц) Экспорт
	
	РезультатРасчетаОтложенногоНалога = Новый Структура;
	РезультатРасчетаОтложенногоНалога.Вставить("Проводки",                НовыйПроводкиНалогНаПрибыль());
	РезультатРасчетаОтложенногоНалога.Вставить("СуммаПересчетаУбытков",   0);
	РезультатРасчетаОтложенногоНалога.Вставить("ВспомогательныеРегистры", Новый Структура);
	
	РезультатРасчетаОтложенногоНалога.ВспомогательныеРегистры.Вставить(
		"РасчетРазницВОценкеАктивовИОбязательств",
		НовыйРасчетРазницВОценкеАктивовИОбязательств());
		
	РезультатРасчетаОтложенногоНалога.ВспомогательныеРегистры.Вставить(
		"РасчетСтоимостиНалоговыхАктивовИОбязательств",
		НовыйРасчетСтоимостиНалоговыхАктивовИОбязательств());
	
	Процессор = ПроцессорРасчетаОтложенногоНалога(КонтекстРасчета, РасчетнаяСтавкаНалогаЗаМесяц);
	
	СоздатьВременныеТаблицыРасчетаОтложенногоНалога(Процессор);
	
	ЕстьОтрицательныеАктивы        = Ложь;
	ЕстьОтрицательныеОбязательства = Ложь;
	ДобавитьПроводкиПостоянныеАктивыОбязательства(
		РезультатРасчетаОтложенногоНалога.Проводки,
		ЕстьОтрицательныеАктивы,
		ЕстьОтрицательныеОбязательства,
		Процессор);
		
	ПодготовитьТаблицыРазницИСтоимостиПНО_ПНА(
		РезультатРасчетаОтложенногоНалога.ВспомогательныеРегистры,
		Процессор,
		ЕстьОтрицательныеОбязательства,
		ЕстьОтрицательныеАктивы);
		
	ДобавитьПроводкиВременныеАктивыОбязательства(
		РезультатРасчетаОтложенногоНалога.Проводки,
		РезультатРасчетаОтложенногоНалога.ВспомогательныеРегистры,
		РезультатРасчетаОтложенногоНалога.СуммаПересчетаУбытков,
		Процессор);
	
	ДобавитьПроводкиУсловныйНалог(
		РезультатРасчетаОтложенногоНалога.Проводки,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организации,
		РасчетнаяСтавкаНалогаЗаМесяц);
	
	Возврат РезультатРасчетаОтложенногоНалога;
	
КонецФункции

Функция НовыйРасчетРазницВОценкеАктивовИОбязательств()
	
	ТипСумма = БухгалтерскийУчетКлиентСервер.ТипСумма();
	
	Расчет = Новый ТаблицаЗначений;
	Расчет.Колонки.Добавить("Подразделение",                         БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	Расчет.Колонки.Добавить("ВидРазницыПБУ18",                       Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРазницПБУ18"));
	Расчет.Колонки.Добавить("ВидАктивовИОбязательств",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	Расчет.Колонки.Добавить("Субконто1");
	Расчет.Колонки.Добавить("Субконто2");
	Расчет.Колонки.Добавить("Субконто3");
	Расчет.Колонки.Добавить("Счет",                                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Расчет.Колонки.Добавить("НачальныйОстаток",                      ТипСумма);
	Расчет.Колонки.Добавить("КонечныйОстаток",                       ТипСумма);
	Расчет.Колонки.Добавить("Признаны",                              ТипСумма);
	Расчет.Колонки.Добавить("ПеренесеныНаДругиеОбъекты",             ТипСумма);
	Расчет.Колонки.Добавить("ПовлиялиНаРазницывОценкеРасходовННП",   ТипСумма);
	Расчет.Колонки.Добавить("ПовлиялиНаРазницывОценкеРасходовНеННП", ТипСумма);
	
	Возврат Расчет;
	
КонецФункции

Функция НовыйРасчетСтоимостиНалоговыхАктивовИОбязательств()
	
	ТипСумма = БухгалтерскийУчетКлиентСервер.ТипСумма();
	
	Расчет = Новый ТаблицаЗначений;
	Расчет.Колонки.Добавить("ВидАктивовИОбязательствПБУ18", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательствПБУ18"));
	Расчет.Колонки.Добавить("ВидАктивовИОбязательств",      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	Расчет.Колонки.Добавить("Признаны",                     ТипСумма);
	Расчет.Колонки.Добавить("Списаны",                      ТипСумма);
	Расчет.Колонки.Добавить("ПризнаныСписаныНеННП",         ТипСумма);
	
	Возврат Расчет;
	
КонецФункции

Процедура ДобавитьПроводкиУсловныйНалог(Проводки, МесяцРасчета, Организации, СтавкаНалога)
	
	// Условный расход (условный доход) по налогу на прибыль
	// рассчитывается следующим образом: определяется сумма
	// бухгалтерской прибыли (убытка) и умножается на ставку
	// налога на прибыль.
	
	// Виды прибылей и убытков, которые учитываются при расчете
	// условного расхода (условного дохода) по налогу на прибыль.
	ПрибылиИУбытки = Новый Массив;
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",        НачалоМесяца(МесяцРасчета));
	Запрос.УстановитьПараметр("КонДата",        КонецМесяца(МесяцРасчета));
	Запрос.УстановитьПараметр("Организации",    Организации);
	Запрос.УстановитьПараметр("ПрибылиИУбытки", ПрибылиИУбытки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) - СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК ИзменениеПрибылиЗаМесяц
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки),
	|			Организация В (&Организации)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Перечисление.ПрибылиИУбытки) В (&ПрибылиИУбытки),
	|			,
	|			) КАК ХозрасчетныйОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Выборка.ИзменениеПрибылиЗаМесяц > 0 Тогда
		
		Запись = Проводки.Добавить();
		Запись.СуммаНалога        = Выборка.ИзменениеПрибылиЗаМесяц * СтавкаНалога;
		Запись.КоррСчет           = ПланыСчетов.Хозрасчетный.УсловныйРасходПоНалогуНаПрибыль; // 99.02.1
		Запись.ПоДебету           = "Д";
		Запись.СодержаниеПроводки = НСтр("ru = 'Условный расход по налогу на прибыль'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
		
	ИначеЕсли Выборка.ИзменениеПрибылиЗаМесяц < 0 Тогда
		
		Запись = Проводки.Добавить();
		Запись.СуммаНалога        = - Выборка.ИзменениеПрибылиЗаМесяц * СтавкаНалога;
		Запись.КоррСчет           = ПланыСчетов.Хозрасчетный.УсловныйДоходПоНалогуНаПрибыль; // 99.02.2
		Запись.ПоДебету           = "К";
		Запись.СодержаниеПроводки = НСтр("ru = 'Условный доход по налогу на прибыль'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтрицательныеАктивыИОбязательства(Строка, ОтрицательныеПНО, ОтрицательныеПНА)
	
	Активы = Строка.СуммаПНА;
	Обязательства = Строка.СуммаПНО;
	
	// отрицательные обязательства преобразуются в активы
	Если ОтрицательныеПНО Тогда
		Строка.СуммаПНО = Строка.СуммаПНО - Обязательства;
		Строка.СуммаПНА = Строка.СуммаПНА - Обязательства;
	КонецЕсли;
	
	// отрицательные активы преобразуются в обязательства
	Если ОтрицательныеПНА Тогда
		Строка.СуммаПНО = Строка.СуммаПНО - Активы;
		Строка.СуммаПНА = Строка.СуммаПНА - Активы;
	КонецЕсли;
	
	// приводим к одному знаку суммы, повлиявшие на доходы,расходы, и активы-обязательства
	
	Если (Строка.ПовлиялиНаРазницывОценкеРасходовННП + Строка.ПовлиялиНаРазницывОценкеРасходовНеННП) * (Строка.СуммаПНА + Строка.СуммаПНО) < 0 Тогда
		Строка.ПовлиялиНаРазницывОценкеРасходовННП = - Строка.ПовлиялиНаРазницывОценкеРасходовННП;
		Строка.ПовлиялиНаРазницывОценкеРасходовНеННП = - Строка.ПовлиялиНаРазницывОценкеРасходовНеННП;
		Строка.Признаны = Строка.ПовлиялиНаРазницывОценкеРасходовННП + Строка.ПовлиялиНаРазницывОценкеРасходовНеННП + Строка.ПеренесеныНаДругиеОбъекты - (Строка.НачОстатокДт - Строка.НачОстатокКт);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТаблицуРазницВОценкеАктивов(Протокол, СтавкаНалогаНаПрибыль, ТаблицаВидовАктивовИОбязательствДляРаспределения, МассивТаблицРезультатов, ВидРазницы, ОтрицательныеПНО = Ложь, ОтрицательныеПНА = Ложь)
	
	Инд = 0;
	ПР =  Перечисления.ВидыРазницПБУ18.ПР;
	
	ПроводкиРасш = НовыйПроводкиНалогНаПрибыль(Истина);

	СчетаРазниц = Новый Структура("Счет09, Счет77",
								  ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы,
								  ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	
	Для каждого Таблица Из МассивТаблицРезультатов Цикл	
		ВидАктивовИОбязательств = ТаблицаВидовАктивовИОбязательствДляРаспределения[Инд].ВидАктивовОбязательств;
		Счет = ТаблицаВидовАктивовИОбязательствДляРаспределения[Инд].Счета[0];
		ВедетсяУчетПоПодразделениям = Счет.УчетПоПодразделениям;		
		
		ФлагОС_НМА = ВидАктивовИОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства
			ИЛИ ВидАктивовИОбязательств = Перечисления.ВидыАктивовИОбязательств.НематериальныеАктивы
			ИЛИ ВидАктивовИОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходныеВложенияВ_МЦ;
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			
			Запись 							= Протокол.РасчетРазницВОценкеАктивовИОбязательств.Добавить();
			Если ВедетсяУчетПоПодразделениям И НЕ ФлагОС_НМА Тогда
				Запись.Подразделение        = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			Запись.ВидРазницыПБУ18 			= ВидРазницы;
			Запись.ВидАктивовИОбязательств 	= ВидАктивовИОбязательств;
			ЗаполнитьЗначенияСвойств(Запись,СтрокаТаблицы);
			
			Если ВидРазницы <> ПР Тогда
				Запись.НачальныйОстаток 	= (СтрокаТаблицы.НачОстатокДт - СтрокаТаблицы.НачОстатокКт);
				Запись.КонечныйОстаток 		= (СтрокаТаблицы.КонОстатокДт - СтрокаТаблицы.КонОстатокКт);
			КонецЕсли;
			
			Если ВидРазницы = ПР Тогда
				
				Если ОтрицательныеПНО ИЛИ ОтрицательныеПНА Тогда
					
					ОбработатьОтрицательныеАктивыИОбязательства(СтрокаТаблицы, ОтрицательныеПНО, ОтрицательныеПНА);
					
				КонецЕсли;
			
				Если СтрокаТаблицы.СуммаПНО <> 0 Тогда
					СтрокаПР = ПроводкиРасш.Добавить();
					СтрокаПР.Субконто = ВидАктивовИОбязательств;
					СтрокаПР.СуммаНалога = СтрокаТаблицы.СуммаПНО;
					СтрокаПР.ПоДебету = "Д";
					ЗаполнитьЗначенияСвойств(СтрокаПР,СтрокаТаблицы);
				Конецесли;
				Если СтрокаТаблицы.СуммаПНА <> 0 Тогда
					СтрокаПР = ПроводкиРасш.Добавить();
					СтрокаПР.Субконто = ВидАктивовИОбязательств;
					СтрокаПР.СуммаНалога = СтрокаТаблицы.СуммаПНА;
					СтрокаПР.ПоДебету = "К";
					ЗаполнитьЗначенияСвойств(СтрокаПР,СтрокаТаблицы);
				Конецесли;
				
			Иначе
				
				СтрокаТаблицы.СуммаДт09 = Окр(СтрокаТаблицы.СуммаДт09 * СтавкаНалогаНаПрибыль, 2);
				СтрокаТаблицы.СуммаДт77 = Окр(СтрокаТаблицы.СуммаДт77 * СтавкаНалогаНаПрибыль, 2);
				СтрокаТаблицы.СуммаКт09 = Окр(СтрокаТаблицы.СуммаКт09 * СтавкаНалогаНаПрибыль, 2);
				СтрокаТаблицы.СуммаКт77 = Окр(СтрокаТаблицы.СуммаКт77 * СтавкаНалогаНаПрибыль, 2);
				СтрокаТаблицы.СуммаЕНВД = Окр(СтрокаТаблицы.СуммаЕНВД * СтавкаНалогаНаПрибыль, 2);
				
				ОтражениеОНАиОНО(ПроводкиРасш, ВидАктивовИОбязательств, СтрокаТаблицы, СчетаРазниц);
				
			КонецЕсли;		
			
		КонецЦикла;
		
		Инд = Инд + 1;	
	КонецЦикла;
	
	Если ВидРазницы = ПР Тогда
		// сразу же подготовим данные протокола
		ПроводкиРасш.Свернуть("Субконто, ПоДебету, Счет, КоррСчет, Подразделение, Субконто1, Субконто2, Субконто3", "СуммаНалога, СуммаЕНВД");
		РассчитатьСтоимостьНалоговыхАктивовИОбязательств(Протокол.РасчетСтоимостиНалоговыхАктивовИОбязательств, ПроводкиРасш, ВидРазницы);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтоимостьНалоговыхАктивовИОбязательств(Расчет, ТаблицаОборотовРазниц, ВидРазницы)
	
	Счет09    	= ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	Счет77    	= ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства;
	ОНА 		= Перечисления.ВидыАктивовИОбязательствПБУ18.ОНА;
	ОНО 		= Перечисления.ВидыАктивовИОбязательствПБУ18.ОНО;
	ПНА 		= Перечисления.ВидыАктивовИОбязательствПБУ18.ПНА;
	ПНО 		= Перечисления.ВидыАктивовИОбязательствПБУ18.ПНО;
	
	Для Каждого Строка из ТаблицаОборотовРазниц Цикл
		Если ВидРазницы = Перечисления.ВидыРазницПБУ18.ВР Тогда
			// Образование отложенного налогового актива
			Если (Строка.КоррСчет = Счет09) И (Строка.ПоДебету = "Д") Тогда
				Запись 										= Расчет.Добавить();
				Запись.Признаны        						= Строка.СуммаНалога;
				Запись.ПризнаныСписаныНеННП					= Строка.СуммаЕНВД;
				Запись.ВидАктивовИОбязательств  			= Строка.Субконто;
				Запись.ВидАктивовИОбязательствПБУ18 		= ОНА;				
				ЗаполнитьЗначенияСвойств(Запись,Строка);
			КонецЕсли;
			
			// Погашение отложенного налогового актива
			Если (Строка.КоррСчет = Счет09) И (Строка.ПоДебету = "К") Тогда
				Запись 										= Расчет.Добавить();
				Запись.Списаны        						= Строка.СуммаНалога;
				Запись.ПризнаныСписаныНеННП					= -Строка.СуммаЕНВД;
				Запись.ВидАктивовИОбязательств 	 			= Строка.Субконто;
				Запись.ВидАктивовИОбязательствПБУ18 		= ОНА;
				ЗаполнитьЗначенияСвойств(Запись,Строка);
			КонецЕсли;
			
			// Образование отложенного налогового обязательства
			Если (Строка.КоррСчет = Счет77) И (Строка.ПоДебету = "К") Тогда
				Запись 										= Расчет.Добавить();
				Запись.Признаны        						= Строка.СуммаНалога;
				Запись.ПризнаныСписаныНеННП					= Строка.СуммаЕНВД;
				Запись.ВидАктивовИОбязательств  			= Строка.Субконто;
				Запись.ВидАктивовИОбязательствПБУ18 		= ОНО;
				ЗаполнитьЗначенияСвойств(Запись,Строка);
			КонецЕсли;
			
			// Погашение отложенного налогового обязательства
			Если (Строка.КоррСчет = Счет77) И (Строка.ПоДебету = "Д") Тогда
				Запись 										= Расчет.Добавить();
				Запись.Списаны        						= Строка.СуммаНалога;
				Запись.ПризнаныСписаныНеННП					= -Строка.СуммаЕНВД;
				Запись.ВидАктивовИОбязательств  			= Строка.Субконто;
				Запись.ВидАктивовИОбязательствПБУ18 		= ОНО;
				ЗаполнитьЗначенияСвойств(Запись,Строка);
			КонецЕсли;
		Иначе
			
			//Постоянное налоговое обязательство
			Если Строка.ПоДебету = "Д" Тогда
				Запись 										= Расчет.Добавить();
				Запись.Признаны        						= Строка.СуммаНалога;
				Запись.ВидАктивовИОбязательств  			= Строка.Субконто;
				Запись.ВидАктивовИОбязательствПБУ18 		= ПНО;
				ЗаполнитьЗначенияСвойств(Запись,Строка);
			//Постоянный налоговый актив
			ИначеЕсли Строка.ПоДебету = "К" Тогда
				Запись 										= Расчет.Добавить();
				Запись.Признаны        						= Строка.СуммаНалога;
				Запись.ВидАктивовИОбязательств  			= Строка.Субконто;
				Запись.ВидАктивовИОбязательствПБУ18 		= ПНА;
				ЗаполнитьЗначенияСвойств(Запись,Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьТаблицыРазницИСтоимостиПНО_ПНА(Протокол, Процессор, ОтрицательныеПНО, ОтрицательныеПНА)
	
	ТаблицаВидовАктивовИОбязательств = Процессор.ТаблицаВидовАктивовИОбязательств;
	
	ПакетПНО_ПНА = Новый Запрос;                   
	ПакетПНО_ПНА.МенеджерВременныхТаблиц = Процессор.МенеджерВременныхТаблиц;
	
	ПакетПНО_ПНА.УстановитьПараметр("НачДата",      Процессор.КонтекстРасчета.НачалоМесяца);
	ПакетПНО_ПНА.УстановитьПараметр("КонДата",      Процессор.КонтекстРасчета.КонецПериода);
	ПакетПНО_ПНА.УстановитьПараметр("Организации",  Процессор.КонтекстРасчета.Организации);
	ПакетПНО_ПНА.УстановитьПараметр("СтавкаНалога", Процессор.РасчетнаяСтавкаНалогаЗаМесяц);
	
	ПакетПНО_ПНА.Текст = ТекстЗапросаОборотыПостоянныхРазниц();
	
	РезультатЗапроса = ПакетПНО_ПНА.Выполнить();

	ДанныеПоВидамАктивовИОбязательств = РазделитьПоСтрокамВидовАктивовИОбязательств(
		Процессор.ТаблицаВидовАктивовИОбязательств,
		РезультатЗапроса);
	
	ПодготовитьТаблицуРазницВОценкеАктивов(
				Протокол,
				Процессор.РасчетнаяСтавкаНалогаЗаМесяц,
				ДанныеПоВидамАктивовИОбязательств.ТаблицаВидовАктивовИОбязательствДляРаспределения,
				ДанныеПоВидамАктивовИОбязательств.МассивТаблицРезультатов,
				Перечисления.ВидыРазницПБУ18.ПР,
				ОтрицательныеПНО,
				ОтрицательныеПНА);

КонецПроцедуры

Функция ОборотыВременныхРазницПоВидуАктивовОбязательствРасчет(КоэффициентЕНВД, ТаблицаРезультатов, ТаблицаРаспределяемыхРасходов, КоличествоОбъектовАналитики)
	
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		Возврат ТаблицаРезультатов;
	КонецЕсли;
	
	ИндексРасходов = -1;
	Если КоличествоОбъектовАналитики <> 0 Тогда
		
		// Обеспечиваем одинаковый порядок строк в таблицах. Далее в алгоритме для слияния данных таблиц мы не ищем в одной таблице
		// значения из другой, а параллельно идем и по одной, и по другой.
		СравнениеПоИдентификаторам = Новый СравнениеЗначений;
		ТаблицаРаспределяемыхРасходов.Сортировать("КорСубконто1", СравнениеПоИдентификаторам);
		ТаблицаРезультатов.Сортировать("Субконто1", СравнениеПоИдентификаторам);
		
		// Позиционируемся в начало таблицы.
		ИндексРасходов = 0;
		КоличествоРасходов = ТаблицаРаспределяемыхРасходов.Количество();
		СтрокаРаспределяемогоРасхода = ?(КоличествоРасходов > 0, ТаблицаРаспределяемыхРасходов[ИндексРасходов], Неопределено);
		
	КонецЕсли;
	
	ТаблицаРезультатов.Колонки.Добавить("СуммаДт09");
	ТаблицаРезультатов.Колонки.Добавить("СуммаКт09");
	ТаблицаРезультатов.Колонки.Добавить("СуммаДт77");
	ТаблицаРезультатов.Колонки.Добавить("СуммаКт77");
	ТаблицаРезультатов.Колонки.Добавить("СуммаЕНВД");
	
	Для Каждого Строка Из ТаблицаРезультатов Цикл
		
		СводноеСальдоКон = ?(Строка.КонОстатокДт = NULL, 0, Строка.КонОстатокДт) - ?(Строка.КонОстатокКт = NULL, 0, Строка.КонОстатокКт);
		СводноеСальдоНач = ?(Строка.НачОстатокДт = NULL, 0, Строка.НачОстатокДт) - ?(Строка.НачОстатокКт = NULL, 0, Строка.НачОстатокКт);
		Разница          = ?(Строка.ОборотДт = NULL, 0, Строка.ОборотДт) - ?(Строка.ОборотКт = NULL, 0, Строка.ОборотКт);
		
		// Определим сумму временных разниц, приходящуюся на деятельность, облагаемую ЕНВД,
		// для распределяемых затрат, связанных с амортизацией и списанием РБП.
		СуммаРаспределяемогоРасхода  = 0;
		СуммаЕНВДРасхода             = 0;
		Если КоличествоОбъектовАналитики = 0              // 1. не нужно распределять расходы
		 Или ИндексРасходов >= КоличествоРасходов Тогда   // 2. все расходы распределены
		 
			СтрокаРаспределяемогоРасхода = Неопределено;
			
		Иначе
			
			// Определяем расход, который будет распределяться.
			СмещениеИндексаРасходов = ?(СтрокаРаспределяемогоРасхода = Неопределено,
										-1,
										СравнениеПоИдентификаторам.Сравнить(Строка.Субконто1, СтрокаРаспределяемогоРасхода.КорСубконто1));
			Пока СмещениеИндексаРасходов > 0 Цикл   // пропускаем ненужные распределяемые расходы
			   
				ИндексРасходов = ИндексРасходов + 1;
				Если ИндексРасходов < КоличествоРасходов Тогда
					СтрокаРаспределяемогоРасхода = ТаблицаРаспределяемыхРасходов[ИндексРасходов];
					СмещениеИндексаРасходов = СравнениеПоИдентификаторам.Сравнить(Строка.Субконто1, СтрокаРаспределяемогоРасхода.КорСубконто1);
				Иначе
					СмещениеИндексаРасходов = -1;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			Если СмещениеИндексаРасходов < 0 Тогда   // нет подходящего распределяемого расхода
				СтрокаРаспределяемогоРасхода = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаРаспределяемогоРасхода = Неопределено Тогда
			Строка.СуммаЕНВД = Строка.ОборотЕН;
		Иначе
			СуммаРаспределяемогоРасхода = СтрокаРаспределяемогоРасхода.СуммаЗатрат;
			СуммаЕНВДРасхода = СтрокаРаспределяемогоРасхода.СуммаЗатратЕНВД;
			Строка.СуммаЕНВД = СуммаРаспределяемогоРасхода * КоэффициентЕНВД + СуммаЕНВДРасхода;
		КонецЕсли;
		
		Если СводноеСальдоНач > 0 Тогда
			Если  СводноеСальдоКон - СводноеСальдоНач > 0 Тогда
				Строка.СуммаКт77 = Разница;
				Строка.СуммаДт77 = 0;
				Строка.СуммаКт09 = 0;
				Строка.СуммаДт09 = 0;
			ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
				Строка.СуммаКт77 = 0;
				Строка.СуммаДт77 = 0;
				Строка.СуммаКт09 = 0;
				Строка.СуммаДт09 = 0;
				Иначе  Если (СводноеСальдоКон < 0) И (СводноеСальдоНач >= 0) Тогда
					Строка.СуммаДт09 = - СводноеСальдоКон;
					Строка.СуммаДт77 = СводноеСальдоНач;
					Строка.СуммаКт09 = 0;
					Строка.СуммаКт77 = 0;
				Иначе
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = -Разница;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = 0;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если  СводноеСальдоКон - СводноеСальдоНач < 0 Тогда
				Строка.СуммаКт77 = 0;
				Строка.СуммаДт77 = 0;
				Строка.СуммаКт09 = 0;
				Строка.СуммаДт09 = - СводноеСальдоКон + СводноеСальдоНач;
			ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
				Строка.СуммаКт77 = 0;
				Строка.СуммаДт77 = 0;
				Строка.СуммаКт09 = 0;
				Строка.СуммаДт09 = 0;
				Иначе  Если (СводноеСальдоКон > 0) И (СводноеСальдоНач <= 0) Тогда
					Строка.СуммаКт77 = СводноеСальдоКон;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = -СводноеСальдоНач;
					Строка.СуммаДт09 = 0;
				Иначе
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = Разница;
					Строка.СуммаДт09 = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат  ТаблицаРезультатов;
	
КонецФункции

// Рассчитывает постоянные налоговые обязательства (активы) - готовит данные для соответствующих проводок
//
// Параметры:
//  Проводки  - см. НовыйПроводкиНалогНаПрибыль() - дополняемая коллекция
//  ЕстьОтрицательныеАктивы        - Булево - возвращаемый параметр: необходимость преобразовать отрицательные активы в положительные обязательства,
//                                            см. ОбработатьОтрицательныеАктивыИОбязательства()
//  ЕстьОтрицательныеОбязательства - Булево - возвращаемый параметр: необходимость преобразовать отрицательные обязательства в положительные активы,
//                                            см. ОбработатьОтрицательныеАктивыИОбязательства()
//	Процессор - см. ПроцессорРасчетаОтложенногоНалога()
//
Процедура ДобавитьПроводкиПостоянныеАктивыОбязательства(Проводки, ЕстьОтрицательныеАктивы, ЕстьОтрицательныеОбязательства, Процессор)
	
	// Постоянный налоговый актив (обязательство) рассчитывается следующим образом:
	// Определяется сумма постоянных разниц, отраженных на счете 99.01.1, и
	// умножается на ставку налога на прибыль.
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	МассивСчетов = БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетов);   // разворачиваем до субсчетов
	
	МассивКорСчетов = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);   // 99.01.1
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",      Процессор.КонтекстРасчета.НачалоМесяца);
	Запрос.УстановитьПараметр("КонДата",      Процессор.КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организации",  Процессор.КонтекстРасчета.Организации);
	Запрос.УстановитьПараметр("Счета",        МассивСчетов);
	Запрос.УстановитьПараметр("КорСчета",     МассивКорСчетов);
	Запрос.УстановитьПараметр("СтавкаНалога", Процессор.РасчетнаяСтавкаНалогаЗаМесяц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаПРОборотДт * &СтавкаНалога) КАК СуммаДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаПРОборотКт * &СтавкаНалога) КАК СуммаКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&Счета),
	|			,
	|			Организация В (&Организации),
	|			НЕ КорСчет В (&КорСчета),
	|			) КАК ХозрасчетныйОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Счет 99.02.3 "Постоянное налоговое обязательство (актив)" используется для отражения и ПНА и ПНО.
	ПрибылиУбытки = ПланыСчетов.Хозрасчетный.ПостоянноеНалоговоеОбязательство;
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
		
	Если Выборка.СуммаДт > 0 Тогда
		
		Запись = Проводки.Добавить();
		Запись.СуммаНалога        = Выборка.СуммаДт;
		Запись.КоррСчет           = ПрибылиУбытки;
		Запись.ПоДебету           = "Д";
		Запись.СодержаниеПроводки = НСтр("ru = 'Постоянное налоговое обязательство'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
		
	ИначеЕсли Выборка.СуммаДт < 0 Тогда
		
		ЕстьОтрицательныеОбязательства = Истина;
		
		Запись = Проводки.Добавить();
		Запись.СуммаНалога        = -Выборка.СуммаДт;
		Запись.КоррСчет           = ПрибылиУбытки;
		Запись.ПоДебету           = "К";
		Запись.СодержаниеПроводки = НСтр("ru = 'Постоянный налоговый актив'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
		
	КонецЕсли;
	
	Если Выборка.СуммаКт > 0 Тогда
		
		Запись = Проводки.Добавить();
		Запись.СуммаНалога        = Выборка.СуммаКт;
		Запись.КоррСчет           = ПрибылиУбытки;
		Запись.ПоДебету           = "К";
		Запись.СодержаниеПроводки = НСтр("ru = 'Постоянный налоговый актив'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
		
	ИначеЕсли Выборка.СуммаКт < 0 Тогда
		
		ЕстьОтрицательныеАктивы = Истина;
		
		Запись = Проводки.Добавить();
		Запись.СуммаНалога        = -Выборка.СуммаКт;
		Запись.КоррСчет           = ПрибылиУбытки;
		Запись.ПоДебету           = "Д";
		Запись.СодержаниеПроводки = НСтр("ru = 'Постоянное налоговое обязательство'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
		
	КонецЕсли;
		
КонецПроцедуры

// Рассчитываются отложенные налоговые обязательства и отложенные налоговые активы.
//
// Параметры:
//  Проводки				 - см. НовыйПроводкиНалогНаПрибыль() - дополняемая коллекция
//  Протокол				 - Структура - дополняемая коллекция данных о ходе расчета для записи в результаты регламентной операции.
//                             Должна содержать ключи:
//                             * РасчетРазницВОценкеАктивовИОбязательств      - см. НовыйРасчетРазницВОценкеАктивовИОбязательств()
//                             * РасчетСтоимостиНалоговыхАктивовИОбязательств - см. НовыйРасчетСтоимостиНалоговыхАктивовИОбязательств()
//  СуммаПересчетаУбытков	 - Число - возвращаемый параметр. В него будет помещена рассчитанная сумма корректировки отложенного налогового актива по убыткам текущего периода 
//	Процессор                - см. ПроцессорРасчетаОтложенногоНалога().
//
Процедура ДобавитьПроводкиВременныеАктивыОбязательства(Проводки, Протокол, СуммаПересчетаУбытков, Процессор)
	
	ПроводкиРасш = НовыйПроводкиНалогНаПрибыль(Истина);// содержит только проводки по временным активам и обязательствам, чтобы в протокол включались только эти данные
	
	// Отдельно рассчитываем разницы по убытку текущего периода
	СтрокаВидАктивовОбязательства = Процессор.ТаблицаВидовАктивовИОбязательств.Найти(
		Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода,
		"ВидАктивовОбязательств");
	
	РассчитатьОНАПоУбыткамТекущегоПериода(
		ПроводкиРасш, 
		СтрокаВидАктивовОбязательства, 
		Процессор.КонтекстРасчета,
		Процессор.РасчетнаяСтавкаНалогаЗаМесяц, 
		СуммаПересчетаУбытков);
	
	ОптимизированноеФормированиеПроводокВременныеАктивыОбязательства(ПроводкиРасш, Протокол, Процессор);
	
	// Перенесем накопленные данные в переданную извне коллекцию
	Для Каждого Запись Из ПроводкиРасш Цикл
		ЗаполнитьЗначенияСвойств(Проводки.Добавить(), Запись);
	КонецЦикла;
		
КонецПроцедуры

#Область ОптимизированноеФормированиеПроводокВременныеАктивыОбязательства

// Код этой области обфусцирован для оптимизации производительности

Процедура ОптимизированноеФормированиеПроводокВременныеАктивыОбязательства(ПроводкиРасш, Протокол, Процессор)
	
	// 1. Рассчитываем отложенные налоговые обязательства и активы и отражаем их.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Процессор.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачДата",        Процессор.КонтекстРасчета.НачалоМесяца);
	Запрос.УстановитьПараметр("КонДата",        Процессор.КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организации",    Процессор.КонтекстРасчета.Организации);
	Запрос.УстановитьПараметр("Счета9102",      Процессор.Счета9102);
	
	Запрос.Текст = ТекстЗапросаОборотыВременныхРазниц();
	
	ДанныеПоВидамАктивовИОбязательств = РазделитьПоСтрокамВидовАктивовИОбязательств(Процессор.ТаблицаВидовАктивовИОбязательств, Запрос.Выполнить());
	
	// 2. Рассчитаем обороты разниц с учетом распределяемых расходов.
	ОбработатьДанныеПоВидамАктивовИОбязательств(ПроводкиРасш, Протокол, ДанныеПоВидамАктивовИОбязательств, Процессор);
	
КонецПроцедуры

Функция ТекстЗапросаОборотыВременныхРазниц()
	
	// Для упрощения ориентации в тексте запроса у второй объединяемой таблицы указаны
	// синонимы суммовых полей. Чтобы их не потерять, не следует сохранять изменения с помощью конструктора запроса.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТ_ОстаткиИОбороты.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	|	ВТ_ОстаткиИОбороты.ИндексСтрокиВидаАктивовОбязательства КАК ИндексСтрокиВидаАктивовОбязательства,
	|	ВТ_ОстаткиИОбороты.Счет КАК Счет,
	|	ВТ_ОстаткиИОбороты.ГруппироватьПоСчету КАК ГруппироватьПоСчету,
	|	ВТ_ОстаткиИОбороты.Подразделение КАК Подразделение,
	|	ВТ_ОстаткиИОбороты.ГруппироватьПоПодразделению КАК ГруппироватьПоПодразделению,
	|	ВТ_ОстаткиИОбороты.Субконто1 КАК Субконто1,
	|	ВТ_ОстаткиИОбороты.Субконто2 КАК Субконто2,
	|	ВТ_ОстаткиИОбороты.Субконто3 КАК Субконто3,
	|	ВТ_ОстаткиИОбороты.СуммаВРНачальныйОстатокДт КАК НачОстатокДт,
	|	ВТ_ОстаткиИОбороты.СуммаВРНачальныйОстатокКт КАК НачОстатокКт,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВТ_ОстаткиИОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).ВидРБП = ЗНАЧЕНИЕ(Перечисление.ВидыРБП.УбыткиПрошлыхЛет)
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиИОбороты.СуммаВРОборотДт
	|	КОНЕЦ КАК ОборотДт,
	|	ВТ_ОстаткиИОбороты.СуммаВРОборотКт КАК ОборотКт,
	|	ВТ_ОстаткиИОбороты.СуммаВРКонечныйОстатокДт - ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВТ_ОстаткиИОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).ВидРБП = ЗНАЧЕНИЕ(Перечисление.ВидыРБП.УбыткиПрошлыхЛет)
	|			ТОГДА ВТ_ОстаткиИОбороты.СуммаВРОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КонОстатокДт,
	|	ВТ_ОстаткиИОбороты.СуммаВРКонечныйОстатокКт КАК КонОстатокКт,
	|	0 КАК ОборотЕН,
	|	0 КАК Признаны,
	|	0 КАК ПеренесеныНаДругиеОбъекты,
	|	0 КАК ПовлиялиНаРазницыВОценкеРасходовННП,
	|	0 КАК ПовлиялиНаРазницыВОценкеРасходовНеННП
	|ПОМЕСТИТЬ ВТ_ОборотыВременныхРазниц
	|ИЗ
	|	ВТ_ОстаткиИОбороты КАК ВТ_ОстаткиИОбороты
	|ГДЕ
	|	НЕ ВТ_ОстаткиИОбороты.ВидАктивовОбязательств В (ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.ПрочиеДоходы), ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.ПрочиеРасходы), ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ОборотыПоКорСчетам.ВидАктивовОбязательств,
	|	ВТ_ОборотыПоКорСчетам.ИндексСтрокиВидаАктивовОбязательства,
	|	ВТ_ОборотыПоКорСчетам.Счет,
	|	ВТ_ОборотыПоКорСчетам.ГруппироватьПоСчету,
	|	ВТ_ОборотыПоКорСчетам.Подразделение,
	|	ВТ_ОборотыПоКорСчетам.ГруппироватьПоПодразделению,
	|	ВТ_ОборотыПоКорСчетам.Субконто1,
	|	ВТ_ОборотыПоКорСчетам.Субконто2,
	|	ВТ_ОборотыПоКорСчетам.Субконто3,
	|	0 КАК НачОстатокДт,
	|	0 КАК НачОстатокКт,
	|	0 КАК ОборотДт,
	|	0 КАК ОборотКт,
	|	0 КАК КонОстатокДт,
	|	0 КАК КонОстатокКт,
	|	СУММА(ВТ_ОборотыПоКорСчетам.СуммаВРОборотКт_ЕНВД) КАК ОборотЕН,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ОборотыПоКорСчетам.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА -ВТ_ОборотыПоКорСчетам.СуммаВРОборотКт_Без90 + ВТ_ОборотыПоКорСчетам.СуммаВРОборотДт_Без90
	|			ИНАЧЕ ВТ_ОборотыПоКорСчетам.СуммаВРОборотДт_Без90 - ВЫБОР
	|					КОГДА ВТ_ОборотыПоКорСчетам.СуммаВРОборотКт_Без90 < 0
	|						ТОГДА ВТ_ОборотыПоКорСчетам.СуммаВРОборотКт_Без90
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК Признаны,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ОборотыПоКорСчетам.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_ОборотыПоКорСчетам.СуммаВРОборотДт_Без90 > 0
	|							ТОГДА ВТ_ОборотыПоКорСчетам.СуммаВРОборотДт_Без90
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВТ_ОборотыПоКорСчетам.СуммаВРОборотКт_Без90 > 0
	|						ТОГДА ВТ_ОборотыПоКорСчетам.СуммаВРОборотКт_Без90
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК ПеренесеныНаДругиеОбъекты,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ОборотыПоКорСчетам.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА ВТ_ОборотыПоКорСчетам.СуммаВРОборотДт_90БезЕНВД - ВТ_ОборотыПоКорСчетам.СуммаВРОборотКт_90БезЕНВД
	|			ИНАЧЕ ВТ_ОборотыПоКорСчетам.СуммаВРОборотКт_90БезЕНВД - ВТ_ОборотыПоКорСчетам.СуммаВРОборотДт_90БезЕНВД
	|		КОНЕЦ) КАК ПовлиялиНаРазницыВОценкеРасходовННП,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ОборотыПоКорСчетам.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА ВТ_ОборотыПоКорСчетам.СуммаВРОборотДт_ЕНВД - ВТ_ОборотыПоКорСчетам.СуммаВРОборотКт_ЕНВД
	|			ИНАЧЕ ВТ_ОборотыПоКорСчетам.СуммаВРОборотКт_ЕНВД - ВТ_ОборотыПоКорСчетам.СуммаВРОборотДт_ЕНВД
	|		КОНЕЦ) КАК ПовлиялиНаРазницыВОценкеРасходовНеННП
	|ИЗ
	|	ВТ_ОборотыПоКорСчетам КАК ВТ_ОборотыПоКорСчетам
	|ГДЕ
	|	НЕ ВТ_ОборотыПоКорСчетам.ВидАктивовОбязательств В (ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.ПрочиеДоходы), ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.ПрочиеРасходы), ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОборотыПоКорСчетам.ВидАктивовОбязательств,
	|	ВТ_ОборотыПоКорСчетам.ИндексСтрокиВидаАктивовОбязательства,
	|	ВТ_ОборотыПоКорСчетам.Счет,
	|	ВТ_ОборотыПоКорСчетам.ГруппироватьПоСчету,
	|	ВТ_ОборотыПоКорСчетам.Подразделение,
	|	ВТ_ОборотыПоКорСчетам.ГруппироватьПоПодразделению,
	|	ВТ_ОборотыПоКорСчетам.Субконто1,
	|	ВТ_ОборотыПоКорСчетам.Субконто2,
	|	ВТ_ОборотыПоКорСчетам.Субконто3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОборотыВременныхРазниц.ВидАктивовОбязательств,
	|	ВТ_ОборотыВременныхРазниц.ИндексСтрокиВидаАктивовОбязательства КАК ИндексСтрокиВидаАктивовОбязательства,
	|	ВЫБОР
	|		КОГДА ВТ_ОборотыВременныхРазниц.ГруппироватьПоСчету
	|			ТОГДА ВТ_ОборотыВременныхРазниц.Счет
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК Счет,
	|	ВЫБОР
	|		КОГДА ВТ_ОборотыВременныхРазниц.ГруппироватьПоПодразделению
	|			ТОГДА ВТ_ОборотыВременныхРазниц.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	ВТ_ОборотыВременныхРазниц.Субконто1,
	|	ВТ_ОборотыВременныхРазниц.Субконто2,
	|	ВТ_ОборотыВременныхРазниц.Субконто3,
	|	СУММА(ВТ_ОборотыВременныхРазниц.НачОстатокДт) КАК НачОстатокДт,
	|	СУММА(ВТ_ОборотыВременныхРазниц.НачОстатокКт) КАК НачОстатокКт,
	|	СУММА(ВТ_ОборотыВременныхРазниц.ОборотДт) КАК ОборотДт,
	|	СУММА(ВТ_ОборотыВременныхРазниц.ОборотКт) КАК ОборотКт,
	|	СУММА(ВТ_ОборотыВременныхРазниц.КонОстатокДт) КАК КонОстатокДт,
	|	СУММА(ВТ_ОборотыВременныхРазниц.КонОстатокКт) КАК КонОстатокКт,
	|	СУММА(ВТ_ОборотыВременныхРазниц.ОборотЕН) КАК ОборотЕН,
	|	СУММА(ВТ_ОборотыВременныхРазниц.Признаны) КАК Признаны,
	|	СУММА(ВТ_ОборотыВременныхРазниц.ПеренесеныНаДругиеОбъекты) КАК ПеренесеныНаДругиеОбъекты,
	|	СУММА(ВТ_ОборотыВременныхРазниц.ПовлиялиНаРазницывОценкеРасходовННП) КАК ПовлиялиНаРазницывОценкеРасходовННП,
	|	СУММА(ВТ_ОборотыВременныхРазниц.ПовлиялиНаРазницывОценкеРасходовНеННП) КАК ПовлиялиНаРазницывОценкеРасходовНеННП
	|ИЗ
	|	ВТ_ОборотыВременныхРазниц КАК ВТ_ОборотыВременныхРазниц
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОборотыВременныхРазниц.ВидАктивовОбязательств,
	|	ВТ_ОборотыВременныхРазниц.ИндексСтрокиВидаАктивовОбязательства,
	|	ВЫБОР
	|		КОГДА ВТ_ОборотыВременныхРазниц.ГруппироватьПоСчету
	|			ТОГДА ВТ_ОборотыВременныхРазниц.Счет
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ОборотыВременныхРазниц.ГруппироватьПоПодразделению
	|			ТОГДА ВТ_ОборотыВременныхРазниц.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВТ_ОборотыВременныхРазниц.Субконто1,
	|	ВТ_ОборотыВременныхРазниц.Субконто2,
	|	ВТ_ОборотыВременныхРазниц.Субконто3
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВТ_ОборотыВременныхРазниц.НачОстатокДт) - СУММА(ВТ_ОборотыВременныхРазниц.НачОстатокКт) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыВременныхРазниц.КонОстатокДт) - СУММА(ВТ_ОборотыВременныхРазниц.КонОстатокКт) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыВременныхРазниц.ОборотДт) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыВременныхРазниц.ОборотКт) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыВременныхРазниц.ОборотЕН) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыВременныхРазниц.Признаны) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыВременныхРазниц.ПеренесеныНаДругиеОбъекты) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыВременныхРазниц.ПовлиялиНаРазницывОценкеРасходовННП) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыВременныхРазниц.ПовлиялиНаРазницывОценкеРасходовНеННП) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексСтрокиВидаАктивовОбязательства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОборотыВременныхРазниц";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция РазделитьПоСтрокамВидовАктивовИОбязательств(ТаблицаВидовАктивовИОбязательств, РезультатЗапроса)

	// Преобразуем результат запроса ТекстЗапросаОборотыВременныхРазниц() или ТекстЗапросаОборотыПостоянныхРазниц() к виду, 
	// который ожидает функция ПодготовитьТаблицуРазницВОценкеАктивов() в качестве своих параметров.
	//
	// Для этого разделим таблицу результата запроса по строкам исходной таблицы ТаблицаВидовАктивовИОбязательств,
	// таблица запроса упорядочена по индексам этих строк.
	// Каждая отдельная выгрузка из результата запроса с данными, соответствующими одной строке ТаблицаВидовАктивовИОбязательств,
	// будет содержаться в одном элементе МассивТаблицРезультатов.
	//
	// Кроме того, в конкретной базе обычно есть данные не по всем возможным видам активов и обязательств, 
	// а только по некоторым.
	// Поэтому "выпишем" фактически используемые строки с видами активов и обязательств
	// во вспомогательную таблицу ТаблицаВидовАктивовИОбязательствДляРаспределения так,
	// чтобы индексы строк в ней совпадали с индексами элементов из МассивТаблицРезультатов.
	// Это позволит в дальнейшем обращаться к связанным данным из таблицы и массива по одинаковому индексу.

	МассивТаблицРезультатов = Новый Массив;

	ТаблицаВидовАктивовИОбязательствДляРаспределения = ТаблицаВидовАктивовИОбязательств.СкопироватьКолонки();
	// Содержит индекс строки из исходной ТаблицыВидовАктивовИОбязательств
	// Т.к. фактически в базе могут быть обороты не по всем счетам, которые перечислены в исходной таблице, 
	// то строк в ТаблицаВидовАктивовИОбязательствДляРаспределения может быть меньше, чем в исходной.
	ТаблицаВидовАктивовИОбязательствДляРаспределения.Колонки.Добавить("ИндексСтрокиВидаАктивовОбязательства", ОбщегоНазначения.ОписаниеТипаЧисло(3));

	ТаблицаЗапроса = Новый ТаблицаЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТаблицаЗапроса.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;

	Выборка = РезультатЗапроса.Выбрать();

	ТекущийИндексСтрокиВидаАктивовОбязательства = -1;

	Пока Выборка.Следующий() Цикл

		Если ТекущийИндексСтрокиВидаАктивовОбязательства <> Выборка.ИндексСтрокиВидаАктивовОбязательства Тогда
			// Создаем новую таблицу результата.
			ТекущийИндексСтрокиВидаАктивовОбязательства = Выборка.ИндексСтрокиВидаАктивовОбязательства;

			МассивТаблицРезультатов.Добавить(ТаблицаЗапроса.СкопироватьКолонки());
			ИндексДобавленногоЭлемента = МассивТаблицРезультатов.ВГраница();
			ТаблицаЗапроса = МассивТаблицРезультатов[ИндексДобавленногоЭлемента];

			СтрокаТаблицы = ТаблицаВидовАктивовИОбязательствДляРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТаблицаВидовАктивовИОбязательств[ТекущийИндексСтрокиВидаАктивовОбязательства]);
			СтрокаТаблицы.ИндексСтрокиВидаАктивовОбязательства = ТекущийИндексСтрокиВидаАктивовОбязательства;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		
	КонецЦикла;

	Результат = Новый Структура;
	Результат.Вставить("МассивТаблицРезультатов", МассивТаблицРезультатов);
	Результат.Вставить("ТаблицаВидовАктивовИОбязательствДляРаспределения", ТаблицаВидовАктивовИОбязательствДляРаспределения);

	Возврат Результат;

КонецФункции

Процедура ОбработатьДанныеПоВидамАктивовИОбязательств(ПроводкиРасш, Протокол, ДанныеПоВидамАктивовИОбязательств, Процессор)
	
	ТаблицаВидовАктивовИОбязательствДляРаспределения = ДанныеПоВидамАктивовИОбязательств.ТаблицаВидовАктивовИОбязательствДляРаспределения;
	МассивТаблицРезультатов                          = ДанныеПоВидамАктивовИОбязательств.МассивТаблицРезультатов;
	
	Если ТаблицаВидовАктивовИОбязательствДляРаспределения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Распределяемые расходы определяем как обороты по статьям затрат и прочих доходов и расходов 
	// с видом "Распределяемые" и "Особый порядок".
	// Если признак ПлательщикЕНВД в текущем месяце не установлен,
	// то обороты по счетам доходов и расходов по видам деятельности с особым порядком налогообложения
	// учитываем как обороты по обычным видам деятельности.
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Процессор.КонтекстРасчета.Организация, Процессор.КонтекстРасчета.КонецПериода);
	ТипСумма = БухгалтерскийУчетКлиентСервер.ТипСумма();
	
	ТаблицаРаспределяемыхРасходов = Новый ТаблицаЗначений;
	ТаблицаРаспределяемыхРасходов.Колонки.Добавить("КорСубконто1");
	ТаблицаРаспределяемыхРасходов.Колонки.Добавить("ВидАктивовОбязательств", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	ТаблицаРаспределяемыхРасходов.Колонки.Добавить("СуммаЗатрат",            ТипСумма);
	ТаблицаРаспределяемыхРасходов.Колонки.Добавить("СуммаЗатратЕНВД",        ТипСумма);
	
	Если ПлательщикЕНВД Тогда

		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Процессор.МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("НачДата",        Процессор.КонтекстРасчета.НачалоМесяца);
		Запрос.УстановитьПараметр("КонДата",        Процессор.КонтекстРасчета.КонецПериода);
		Запрос.УстановитьПараметр("Организации",    Процессор.КонтекстРасчета.Организации);
		Запрос.УстановитьПараметр("Счета9102",      Процессор.Счета9102);
		Запрос.Текст = ТекстЗапросаРаспределяемыеРасходы();
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		ЕстьДанные = Выборка.Следующий();// Выборка используется ниже. Такое решение обеспечивает реализацию принципа действия на расстоянии для сохранения достаточной инерции кода.
		
	КонецЕсли;
	
	КоэффициентЕНВД = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(Процессор.КонтекстРасчета.Организация, Процессор.КонтекстРасчета.КонецПериода);
	
	
	Для Каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательствДляРаспределения Цикл
		
		// Перенесем данные о распределяемых расходах по текущему виду активов/обязательств во вспомогательную таблицу для расчета.
		// Может быть пустой, если в периоде не было распределяемых расходов либо в настройках системы налогообложения
		// для организации не установлен признак ПлательщикЕНВД.
		Если ПлательщикЕНВД Тогда
			ТаблицаРаспределяемыхРасходов.Очистить();
			
			Пока ЕстьДанные
				И Выборка.ИндексСтрокиВидаАктивовОбязательства = СтрокаВидАктиваОбязательства.ИндексСтрокиВидаАктивовОбязательства Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаРаспределяемыхРасходов.Добавить(), Выборка);
				ЕстьДанные = Выборка.Следующий();
			КонецЦикла;
		КонецЕсли;
		
		ОборотыВременныхРазниц = ОборотыВременныхРазницПоВидуАктивовОбязательствРасчет(
			КоэффициентЕНВД,
			МассивТаблицРезультатов[ТаблицаВидовАктивовИОбязательствДляРаспределения.Индекс(СтрокаВидАктиваОбязательства)], // т.к. таблица и массив заполнялись параллельно
			ТаблицаРаспределяемыхРасходов,
			СтрокаВидАктиваОбязательства.Субконто.Количество());
		
		РассчитатьОНО_ОНА(
			ПроводкиРасш, 
			СтрокаВидАктиваОбязательства, 
			Процессор.РасчетнаяСтавкаНалогаЗаМесяц,
			ОборотыВременныхРазниц);
		
	КонецЦикла;
	
	ПодготовитьТаблицуРазницВОценкеАктивов(
		Протокол,
		Процессор.РасчетнаяСтавкаНалогаЗаМесяц,
		ТаблицаВидовАктивовИОбязательствДляРаспределения,
		МассивТаблицРезультатов,
		Перечисления.ВидыРазницПБУ18.ВР);
	
	РассчитатьСтоимостьНалоговыхАктивовИОбязательств(
		Протокол.РасчетСтоимостиНалоговыхАктивовИОбязательств,
		ПроводкиРасш,
		Перечисления.ВидыРазницПБУ18.ВР);
		
КонецПроцедуры

Функция ТекстЗапросаРаспределяемыеРасходы()
	
	// Запрос возвращает обороты счетов активов и обязательств в разрезе их субконто
	// в корреспонденции со счетами затрат и прочих расходов 
	// по статьям с признаком "Распределяемые затраты" и "Особый порядок налогообложения".
	// Используется в функции РассчитатьВременныеРазницы().
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка,
	|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат
	|ПОМЕСТИТЬ ВТ_СтатьиЗатратПрочихРасходов
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат В (ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты), ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка,
	|	ПрочиеДоходыИРасходы.ВидДеятельностиДляНалоговогоУчетаЗатрат
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.ВидДеятельностиДляНалоговогоУчетаЗатрат В (ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты), ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.СтатьиЗатрат) КАК СтатьяЗатратПрочихРасходов,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто1,
	|	ХозрасчетныйОбороты.СуммаВРОборотДт КАК СуммаВРОборотДт
	|ПОМЕСТИТЬ ВТ_РаспределяемыеРасходы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			Организация В (&Организации)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТ_СтатьиЗатратПрочихРасходов.Ссылка
	|					ИЗ
	|						ВТ_СтатьиЗатратПрочихРасходов КАК ВТ_СтатьиЗатратПрочихРасходов),
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_НастройкиСчетовДляРасчета.Счет
	|				ИЗ
	|					ВТ_НастройкиСчетовДляРасчета КАК ВТ_НастройкиСчетовДляРасчета),
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы),
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.СуммаВРОборотДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&Счета9102),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&Организации)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТ_СтатьиЗатратПрочихРасходов.Ссылка
	|					ИЗ
	|						ВТ_СтатьиЗатратПрочихРасходов КАК ВТ_СтатьиЗатратПрочихРасходов),
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_НастройкиСчетовДляРасчета.Счет
	|				ИЗ
	|					ВТ_НастройкиСчетовДляРасчета КАК ВТ_НастройкиСчетовДляРасчета),
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РаспределяемыеРасходы.КорСубконто1 КАК КорСубконто1,
	|	ВТ_НастройкиСчетовДляРасчета.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	|	ВТ_НастройкиСчетовДляРасчета.ИндексСтрокиВидаАктивовОбязательства КАК ИндексСтрокиВидаАктивовОбязательства,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СтатьиЗатратПрочихРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА ВТ_РаспределяемыеРасходы.СуммаВРОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЗатрат,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СтатьиЗатратПрочихРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|				ТОГДА ВТ_РаспределяемыеРасходы.СуммаВРОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЗатратЕНВД
	|ИЗ
	|	ВТ_РаспределяемыеРасходы КАК ВТ_РаспределяемыеРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиСчетовДляРасчета КАК ВТ_НастройкиСчетовДляРасчета
	|		ПО ВТ_РаспределяемыеРасходы.КорСчет = ВТ_НастройкиСчетовДляРасчета.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатратПрочихРасходов КАК ВТ_СтатьиЗатратПрочихРасходов
	|		ПО ВТ_РаспределяемыеРасходы.СтатьяЗатратПрочихРасходов = ВТ_СтатьиЗатратПрочихРасходов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РаспределяемыеРасходы.КорСубконто1,
	|	ВТ_НастройкиСчетовДляРасчета.ВидАктивовОбязательств,
	|	ВТ_НастройкиСчетовДляРасчета.ИндексСтрокиВидаАктивовОбязательства
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексСтрокиВидаАктивовОбязательства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РаспределяемыеРасходы";
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

// Рассчитываются отложенные налоговые обязательства и
// отложенные налоговые активы по конкретному виду активов
// (обязательств).
//
// Параметры:
//  Проводки					 - ТаблицаЗначений - заполняемая коллекция проводок, см. НовыйПроводкиНалогНаПрибыль().
//  СтрокаВидАктиваОбязательства - СтрокаТаблицыЗначений - строка таблицы, в которой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//  РасчетнаяСтавкаНалогаЗаМесяц - Число - некоторое значение, позволяющее пересчитать ставку по результатам 
//                                 предыдущего отчетного периода в ставку по результатам закрываемого периода.
//  ОборотыВременныхРазниц		 - ТаблицаЗначений - детальные данные о временных разницах,
//                                 см. ОборотыВременныхРазницПоВидуАктивовОбязательствРасчет.
//
Процедура РассчитатьОНО_ОНА(Проводки, СтрокаВидАктиваОбязательства, РасчетнаяСтавкаНалогаЗаМесяц, ОборотыВременныхРазниц)
	
	// Порядок расчета:
	// 1. Определяется остаток налогооблагаемых и вычитаемых разниц по виду активов в целом.
	// 2. Исходя из остатка разниц рассчитывается остаток отложенных налоговых активов
	//    и обязательств, который должен быть отражен на счетах 09 и 77 на конец месяца.
	// 3. Определяется сумма отложенных налоговых активов и обязательств, которая отражена
	//    на счетах 09 и 77 на конец месяца.
	// 4. Счета 09 и 77 корректируются на сумму разниц того что отражено на счете и того,
	//    что должно быть по результатам расчета.
	
	// Получить временные разницы, отраженные на плане счетов
	// по данному виду ОНА (ОНО), распределив их на вычитаемые и налогооблагаемые разницы.
	
	Если  ОборотыВременныхРазниц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДт09 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт09") * РасчетнаяСтавкаНалогаЗаМесяц, 2);
	СуммаКт09 = Окр(ОборотыВременныхРазниц.ИТог("СуммаКт09") * РасчетнаяСтавкаНалогаЗаМесяц, 2);
	СуммаДт77 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт77") * РасчетнаяСтавкаНалогаЗаМесяц, 2);
	СуммаКт77 = Окр(ОборотыВременныхРазниц.ИТог("СуммаКт77") * РасчетнаяСтавкаНалогаЗаМесяц, 2);
	СуммаЕНВД = Окр(ОборотыВременныхРазниц.ИТог("СуммаЕНВД") * РасчетнаяСтавкаНалогаЗаМесяц, 2);
	
	ОтражениеОНАиОНО(Проводки,
		СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, 
		Новый Структура("СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД",
			СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД));
	
КонецПроцедуры

// Рассчитывается отложенные налоговый актив по убыткам текущего
// периода и отражается на счете 09.
//
Процедура РассчитатьОНАПоУбыткамТекущегоПериода(Проводки, СтрокаВидАктиваОбязательства, КонтекстРасчета, РасчетнаяСтавкаНалогаЗаМесяц, СуммаПересчетаУбытков)
	
	ЭтоПервыйМесяцНалоговогоПериода = (КонтекстРасчета.НачалоМесяца = КонтекстРасчета.НачалоНалоговогоПериода);
	Если ЭтоПервыйМесяцНалоговогоПериода Тогда
		КонецПредыдущегоМесяцаНалоговогоПериода = КонтекстРасчета.КонецПериода;
	Иначе
		КонецПредыдущегоМесяцаНалоговогоПериода = КонтекстРасчета.НачалоМесяца - 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",      КонтекстРасчета.НачалоМесяца);
	Запрос.УстановитьПараметр("НачалоГода",   КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонДата",      КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("КонДатаПред",  КонецПредыдущегоМесяцаНалоговогоПериода);
	Запрос.УстановитьПараметр("ОтчетнаяДата", КонтекстРасчета.КонецПериода + 1);
	Запрос.УстановитьПараметр("Организации",  КонтекстРасчета.Организации);
	Запрос.УстановитьПараметр("СтавкаНалога", РасчетнаяСтавкаНалогаЗаМесяц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.СуммаНУОборот > 0
	|			ТОГДА ХозрасчетныйОбороты.СуммаНУОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УбытокНУ,
	|	0 КАК СуммаОстаток09,
	|	0 КАК УбытокНУПрошлый
	|ПОМЕСТИТЬ ВТ_Убытки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&КонДата,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки),
	|			Организация В (&Организации)
	|				И Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ПрибылиИУбытки.ПрибыльУбытокОтПродаж), ЗНАЧЕНИЕ(Перечисление.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов)),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ОтчетнаяДата,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
	|			,
	|			Организация В (&Организации)
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачДата,
	|			&КонДата,
	|			Месяц,
	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
	|			,
	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
	|			,
	|			Организация В (&Организации)
	|				И СубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.РасходыБудущихПериодов)
	|				И СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК ХозрасчетныйОборотыДтКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.СуммаНУОборот > 0
	|			ТОГДА ХозрасчетныйОбороты.СуммаНУОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&КонДатаПред,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки),
	|			Организация В (&Организации)
	|				И Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ПрибылиИУбытки.ПрибыльУбытокОтПродаж), ЗНАЧЕНИЕ(Перечисление.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов)),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Убытки.УбытокНУ * &СтавкаНалога - ВТ_Убытки.СуммаОстаток09) КАК Сумма,
	|	СУММА(ВТ_Убытки.УбытокНУПрошлый * &СтавкаНалога - ВТ_Убытки.СуммаОстаток09) КАК СуммаПересчетаУбытков
	|ИЗ
	|	ВТ_Убытки КАК ВТ_Убытки";
	
	Выборка   = Запрос.Выполнить().Выбрать();
	
	ВременныеРазницы = Новый Структура;
	ВременныеРазницы.Вставить("СуммаДт09", 0);
	ВременныеРазницы.Вставить("СуммаКт09", 0);
	ВременныеРазницы.Вставить("СуммаДт77", 0);
	ВременныеРазницы.Вставить("СуммаКт77", 0);
	ВременныеРазницы.Вставить("СуммаЕНВД", 0);
									
	СчетаАктивовИОбязательств = Новый Структура("Счет09, Счет77",
								  ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы,
								  ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
		
	Если Выборка.Сумма > 0 Тогда
		ВременныеРазницы.Вставить("СуммаДт09", Выборка.Сумма);
	Иначе
		ВременныеРазницы.Вставить("СуммаКт09", -Выборка.Сумма + Выборка.СуммаПересчетаУбытков);
		СуммаПересчетаУбытков = Выборка.СуммаПересчетаУбытков;
	КонецЕсли;
	
	Если Выборка.Сумма <> 0 Тогда
		ОтражениеОНАиОНО(Проводки, СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, ВременныеРазницы, СчетаАктивовИОбязательств);
	КонецЕсли;
	
КонецПроцедуры

// Упорядочиваются данные для передачи их в процедуру,
// которая формирует записи по счету 68.4.
//
Процедура ОтражениеОНАиОНО(ПроводкиРасш, ВидАктивовОбязательств, ВременныеРазницы, СчетаАктивовИОбязательств = Неопределено)
	
	Если СчетаАктивовИОбязательств = Неопределено Тогда
		Счет09 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
		Счет77 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства;
	Иначе
		// Для избежания многократного обращения к ИБ предопределенные значения получаются в вызывающей функции и далее
		// используются из свойств структуры.
		Счет09 = СчетаАктивовИОбязательств.Счет09;
		Счет77 = СчетаАктивовИОбязательств.Счет77;
	КонецЕсли;
	СуммаДт09 = ВременныеРазницы.СуммаДт09;
	СуммаКт09 = ВременныеРазницы.СуммаКт09;
	СуммаДт77 = ВременныеРазницы.СуммаДт77;
	СуммаКт77 = ВременныеРазницы.СуммаКт77;
	СуммаЕНВД = ВременныеРазницы.СуммаЕНВД;
	
	// Образование отложенного налогового обязательства
	Если СуммаДт09 <> 0 Тогда
		Запись = ПроводкиРасш.Добавить();
		Запись.КоррСчет           = Счет09;
		Запись.СуммаНалога        = СуммаДт09;
		Запись.СуммаЕНВД          = СуммаЕНВД;
		Запись.Субконто           = ВидАктивовОбязательств;
		Запись.СодержаниеПроводки = НСтр("ru = 'Признание отложенного налогового актива'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
		Запись.ПоДебету           = "Д";
	КонецЕсли;
	
	// Погашение отложенного налогового обязательства
	Если СуммаКт09 <> 0 Тогда
		Запись = ПроводкиРасш.Добавить();
		Запись.КоррСчет           = Счет09;
		Запись.СуммаНалога        = СуммаКт09;
		Запись.СуммаЕНВД          = СуммаЕНВД;
		Запись.Субконто           = ВидАктивовОбязательств;
		Запись.ПоДебету           = "К";
		Запись.СодержаниеПроводки = НСтр("ru = 'Погашение отложенного налогового актива'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
	КонецЕсли;
	
	// Образование отложенного налогового обязательства
	Если СуммаКт77 <> 0 Тогда
		Запись = ПроводкиРасш.Добавить();
		Запись.КоррСчет           = Счет77;
		Запись.СуммаНалога        = СуммаКт77;
		Запись.СуммаЕНВД          = СуммаЕНВД;
		Запись.Субконто           = ВидАктивовОбязательств;
		Запись.ПоДебету           = "К";
		Запись.СодержаниеПроводки = НСтр("ru = 'Признание отложенного налогового обязательства'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
	КонецЕсли;
	
	// Погашение отложенного налогового обязательства
	Если СуммаДт77 <> 0 Тогда
		Запись = ПроводкиРасш.Добавить();
		Запись.КоррСчет           = Счет77;
		Запись.СуммаНалога        = СуммаДт77;
		Запись.СуммаЕНВД          = СуммаЕНВД;
		Запись.Субконто           = ВидАктивовОбязательств;
		Запись.ПоДебету           = "Д";
		Запись.СодержаниеПроводки = НСтр("ru = 'Погашение отложенного налогового обязательства'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
	КонецЕсли;
	
КонецПроцедуры // ОтражениеОНАиОНО

Функция НовыйПроводкиНалогНаПрибыль(РасширенныеДанные = Ложь)
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	Проводки = Новый ТаблицаЗначений;
	Проводки.Колонки.Добавить("СуммаНалога",        ОписаниеТипаЧисла15_2);
	Проводки.Колонки.Добавить("СуммаЕНВД",          ОписаниеТипаЧисла15_2);
	Проводки.Колонки.Добавить("КоррСчет",           Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Проводки.Колонки.Добавить("Субконто");
	Проводки.Колонки.Добавить("Субконто68_4");
	Проводки.Колонки.Добавить("Субконто68_4_2");
	Проводки.Колонки.Добавить("ПоДебету",           ОбщегоНазначения.ОписаниеТипаСтрока(1));
	Проводки.Колонки.Добавить("СодержаниеПроводки", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Если РасширенныеДанные Тогда
		Проводки.Колонки.Добавить("Субконто1");
		Проводки.Колонки.Добавить("Субконто2");
		Проводки.Колонки.Добавить("Субконто3");
		Проводки.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
		Проводки.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КонецЕсли;
	
	Возврат Проводки;
	
КонецФункции

// Инициализируем вспомогательные данные для расчета временных и постоянных активов и обязательств.
//
// Параметры:
//	КонтекстРасчета - см. НовыйКонтекстРасчета()
//  РасчетнаяСтавкаНалогаЗаМесяц - Число - средняя ставка налога, рассчитанная по показателям текущего месяца
//
// Возвращаемое значение:
//	Структура - см. тело функции
//
Функция ПроцессорРасчетаОтложенногоНалога(КонтекстРасчета, РасчетнаяСтавкаНалогаЗаМесяц = Неопределено) Экспорт

	Результат = Новый Структура;
	
	Результат.Вставить("КонтекстРасчета",                  КонтекстРасчета);
	Результат.Вставить("МенеджерВременныхТаблиц",          Новый МенеджерВременныхТаблиц); // Будет содержать подготовленные временные таблицы для последующих расчетов.
	Результат.Вставить("ТаблицаВидовАктивовИОбязательств", НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств()); // Таблица счетов, по которым рассчитываются ВР и ПР.
	
	// Сохраним часто используемые счета для оптимизации производительности (кеш).
	Результат.Вставить("Счета9101", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходы));
	Результат.Вставить("Счета9102", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасходы));
	
	// Хранит признак фактического использования в процедурах расчета субконто с соответствующим номером
	// хотя бы на одном из счетов, указанных в таблице видов активов и обязательств.
	// Используется для сокращения числа соединяемых таблиц и получаемых полей в запросах.
	// Заполняется в СоздатьНастройкиСчетовДляРасчета().
	ФактическиИспользуемыеСубконтоИсточника = Новый Массив(3);
	Для Индекс = 0 По ФактическиИспользуемыеСубконтоИсточника.ВГраница() Цикл
		// По умолчанию считаем, что субконто не будет использоваться в запросах.
		ФактическиИспользуемыеСубконтоИсточника[Индекс] = Ложь;
	КонецЦикла;
	Результат.Вставить("ФактическиИспользуемыеСубконтоИсточника", ФактическиИспользуемыеСубконтоИсточника);
	
	Если РасчетнаяСтавкаНалогаЗаМесяц <> Неопределено Тогда
		Результат.Вставить("РасчетнаяСтавкаНалогаЗаМесяц", РасчетнаяСтавкаНалогаЗаМесяц);
	Конецесли;
	
	Возврат Результат;

КонецФункции

// Создает временные таблицы, которые используются при расчете ОНА/ОНО/ПНА/ПНО.
//
// Параметры:
//	Процессор - см. ПроцессорРасчетаОтложенногоНалога().
//
Процедура СоздатьВременныеТаблицыРасчетаОтложенногоНалога(Процессор)
	
	// Для расчета налоговых активов и обязательств необходимы:
	//	1) Остатки и обороты ВР/ПР по счетам и субконто в целом - ВТ_ОстаткиИОбороты.
	//	2) Обороты ВР/ПР в разрезе кор.счетов - ВТ_ОборотыПоКорСчетам и ВТ_Обороты91:
	//		2.1) всех 90-х, кроме счетов учета деятельности с особым порядком налогообложения (ЕНВД и др.);
	//		2.2) 90-х, относящихся к деятельности с особым порядком налогообложения (ЕНВД и др.);
	//		2.3) 91-х;
	//		2.4) всех остальных счетов, кроме 90 и 91.
	
	СоздатьНастройкиСчетовДляРасчета(Процессор);
	
	СоздатьНастройкиСчетов90_91_ЕНВД(Процессор);
	
	СоздатьХозрасчетныйОстаткиИОбороты(Процессор);
	
	СоздатьОборотыПоКорСчетам(Процессор);
	
	СоздатьОбороты91(Процессор);
	
КонецПроцедуры

Функция СвойстваСчетов()

	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Вид КАК ВидСчета,
	|	Хозрасчетный.УчетПоПодразделениям,
	|	ЕСТЬNULL(ВидыСубконто1.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто1,
	|	ЕСТЬNULL(ВидыСубконто2.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто2,
	|	ЕСТЬNULL(ВидыСубконто3.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто3,
	|	ЕСТЬNULL(ВидыСубконто1.Суммовой, ЛОЖЬ) КАК ВидСубконто1Суммовой,
	|	ЕСТЬNULL(ВидыСубконто2.Суммовой, ЛОЖЬ) КАК ВидСубконто2Суммовой,
	|	ЕСТЬNULL(ВидыСубконто3.Суммовой, ЛОЖЬ) КАК ВидСубконто3Суммовой
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто1
	|		ПО Хозрасчетный.Ссылка = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто2
	|		ПО Хозрасчетный.Ссылка = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто3
	|		ПО Хозрасчетный.Ссылка = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Счет");
	
	Возврат Результат;

КонецФункции

Процедура СоздатьНастройкиСчетовДляРасчета(Процессор)
	
	// Создает временную таблицу ВТ_НастройкиСчетовДляРасчета на основе таблицы видов активов и обязательств.
	// Для удобства дальнейшего использования в запросах преобразуем таблицу видов активов и обязательств следующим образом:
	//
	// 1. По каждому счету/субсчету сформируем отдельную строку, 
	//    связав ее с индексом исходной строки таблицы активов и обязательств.
	//
	// 2. Для каждого субконто на счете/субсчете определим, в какой поле субконто в запросе оно должно попадать.
	//    Например, в плане счетов для 41.01 установлены субконто в следующем порядке:
	//        1) Номенклатура,
	//        2) Партия,
	//        3) Склад.
	//    Для расчета ОНА/ОНО/ПНА/ПНО по виду активов "Товары" необходимы данные по счету 41.01 и его субконто:
	//        1) Номенклатура,
	//        2) Склад,
	//    а Партия не требуется.
	//    Эта настройка задается в таблице видов активов и обязательств, и далее полученные в таком порядке данные 
	//    в конце расчета сохраняются в регистре сведений РасчетРазницВОценкеАктивовИОбязательств.
	//    Поэтому при получении данных в запросе необходимо прочитать склад из Субконто3 регистра бухгалтерии
	//    и поместить его в поле Субконто2 итогового результата запроса.
	//    Для выполнения этой замены используем информацию из колонок, в именах которых содержится:
	//       "Источник" - относится к видам субконто в плане счетов,
	//       "Приемник" - относится к полям со значениями субконто в результате запроса.
	
	ТаблицаВидовАктивовИОбязательств = Процессор.ТаблицаВидовАктивовИОбязательств;
	
	ОписаниеТиповБулево       = Новый ОписаниеТипов("Булево");
	ОписаниеТипаНомерСубконто = ОбщегоНазначения.ОписаниеТипаЧисло(1);
	ОписаниеТиповВидСубконто  = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные");
	
	
	НастройкиСчетовДляРасчета = Новый ТаблицаЗначений;
	НастройкиСчетовДляРасчета.Колонки.Добавить("Счет",                                Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	НастройкиСчетовДляРасчета.Колонки.Добавить("ВидСчета",                            Новый ОписаниеТипов("ВидСчета"));
	// Индекс строки из таблицы ТаблицаВидовАктивовИОбязательств.
	НастройкиСчетовДляРасчета.Колонки.Добавить("ВидАктивовОбязательств",              Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	// Считаем, что 1000 разных настроек видов активов и обязательств будет достаточно с запасом.
	НастройкиСчетовДляРасчета.Колонки.Добавить("ИндексСтрокиВидаАктивовОбязательства",ОбщегоНазначения.ОписаниеТипаЧисло(3));

	// По ОС и НМА расчет ведется в целом по субконто без разворота по счету и подразделению,
	// для таких счетов признаки группировки по счету и подразделению = ЛОЖЬ.
	// Собственно свертка выполняется в последнем запросе. 
	// До это момента расчет оборотов с корсчета 90 и 91 происходит по каждому свертываемому счету обособленно.
	НастройкиСчетовДляРасчета.Колонки.Добавить("ГруппироватьПоСчету",                 ОписаниеТиповБулево);
	НастройкиСчетовДляРасчета.Колонки.Добавить("ГруппироватьПоПодразделению",         ОписаниеТиповБулево);
	// Для каждого субконто на счете содержит номер поля субконто в запросе или 0, если субконто в итоговом результате не требуется.
	НастройкиСчетовДляРасчета.Колонки.Добавить("НомерСубконто1ИсточникаВПриемнике",   ОписаниеТипаНомерСубконто);
	НастройкиСчетовДляРасчета.Колонки.Добавить("НомерСубконто2ИсточникаВПриемнике",   ОписаниеТипаНомерСубконто);
	НастройкиСчетовДляРасчета.Колонки.Добавить("НомерСубконто3ИсточникаВПриемнике",   ОписаниеТипаНомерСубконто);
	// Виды субконто, которые используются в запросе для каждого счета.
	НастройкиСчетовДляРасчета.Колонки.Добавить("ВидСубконто1Приемника",               ОписаниеТиповВидСубконто);
	НастройкиСчетовДляРасчета.Колонки.Добавить("ВидСубконто2Приемника",               ОписаниеТиповВидСубконто);
	НастройкиСчетовДляРасчета.Колонки.Добавить("ВидСубконто3Приемника",               ОписаниеТиповВидСубконто);
	
	СвойстваСчетов = СвойстваСчетов();
	
	Для Каждого СтрокаВидаАктивовИОбязательств Из ТаблицаВидовАктивовИОбязательств Цикл
	
		ИндексСтрокиВидаАктивовОбязательства = ТаблицаВидовАктивовИОбязательств.Индекс(СтрокаВидаАктивовИОбязательств);
		
		КоличествоСубконто = СтрокаВидаАктивовИОбязательств.Субконто.Количество();
		
		Если КоличествоСубконто > 3 Тогда
			// Более 3-х субконто на счете не поддерживается, сообщим об ошибке в настройке.
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для вида активов и обязательств ""%1"" указано %2 субконто, допустимо не более 3.'"),
				СтрокаВидаАктивовИОбязательств.ВидАктивовОбязательств,
				КоличествоСубконто);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		// Формируем таблицу счетов учета, по которым происходит расчет.
		Для Каждого Счет Из СтрокаВидаАктивовИОбязательств.Счета Цикл

			СвойстваСчета = СвойстваСчетов.Найти(Счет, "Счет");

			Если СвойстваСчета = Неопределено Тогда
				// В обычном случае сюда зайти не должны.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не найден счет ""%1"" в плане счетов.'"), Счет);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		
			НоваяСтрока = НастройкиСчетовДляРасчета.Добавить();
			НоваяСтрока.Счет                                 = Счет;
			НоваяСтрока.ВидСчета                             = СвойстваСчета.ВидСчета;
			НоваяСтрока.ВидАктивовОбязательств               = СтрокаВидаАктивовИОбязательств.ВидАктивовОбязательств;
			НоваяСтрока.ИндексСтрокиВидаАктивовОбязательства = ИндексСтрокиВидаАктивовОбязательства;
			НоваяСтрока.ГруппироватьПоСчету                  = СтрокаВидаАктивовИОбязательств.ГруппироватьПоСчету;
			// Группировка по подразделению используется только совместно с группировкой по счету.
			НоваяСтрока.ГруппироватьПоПодразделению          = СтрокаВидаАктивовИОбязательств.ГруппироватьПоСчету
				И СвойстваСчета.УчетПоПодразделениям;
			
			// Отмечаем в строке таблицы, какие субконто необходимо использовать в запросе.
			Для НомерСубконтоПриемника = 1 По КоличествоСубконто Цикл
				
				ВидСубконтоПриемника = СтрокаВидаАктивовИОбязательств.Субконто[НомерСубконтоПриемника - 1];
				
				ВидСубконтоПриемникаНетВИсточнике = Истина;
				
				Для НомерСубконтоИсточника = 1 По 3 Цикл
					Если СвойстваСчета["ВидСубконто" + НомерСубконтоИсточника] = ВидСубконтоПриемника Тогда
						ВидСубконтоПриемникаНетВИсточнике = Ложь;
						Если СвойстваСчета["ВидСубконто" + НомерСубконтоИсточника + "Суммовой"] Тогда
							// Учитываем только те субконто, по которым ведется суммовой учет.
							НоваяСтрока["НомерСубконто" + НомерСубконтоИсточника + "ИсточникаВПриемнике"] = НомерСубконтоПриемника;
							НоваяСтрока["ВидСубконто" + НомерСубконтоПриемника + "Приемника"] = ВидСубконтоПриемника;
							// Запомним, что субконто с таким номером используется в запросе хотя бы для одного из счетов.
							Процессор.ФактическиИспользуемыеСубконтоИсточника[НомерСубконтоИсточника - 1] = Истина;
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ВидСубконтоПриемникаНетВИсточнике Тогда
					// Настройки видов субконто для отбора в запросе и фактические виды субконто на счете не удовлетворяют друг другу.
					// Для сохранения совместимости с порядком получения данных при работе виртуальных таблиц регистра бухгалтерии
					// исключим такой счет из расчета.
					НастройкиСчетовДляРасчета.Удалить(НоваяСтрока);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Загружаем во временную таблицу.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Процессор.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НастройкиСчетовДляРасчета", НастройкиСчетовДляРасчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСчетовДляРасчета.Счет,
	|	НастройкиСчетовДляРасчета.ВидСчета,
	|	НастройкиСчетовДляРасчета.ВидАктивовОбязательств,
	|	НастройкиСчетовДляРасчета.ИндексСтрокиВидаАктивовОбязательства,
	|	НастройкиСчетовДляРасчета.ГруппироватьПоСчету,
	|	НастройкиСчетовДляРасчета.ГруппироватьПоПодразделению,
	|	НастройкиСчетовДляРасчета.НомерСубконто1ИсточникаВПриемнике,
	|	НастройкиСчетовДляРасчета.НомерСубконто2ИсточникаВПриемнике,
	|	НастройкиСчетовДляРасчета.НомерСубконто3ИсточникаВПриемнике,
	|	НастройкиСчетовДляРасчета.ВидСубконто1Приемника,
	|	НастройкиСчетовДляРасчета.ВидСубконто2Приемника,
	|	НастройкиСчетовДляРасчета.ВидСубконто3Приемника
	|
	|ПОМЕСТИТЬ ВТ_НастройкиСчетовДляРасчета
	|ИЗ
	|	&НастройкиСчетовДляРасчета КАК НастройкиСчетовДляРасчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьНастройкиСчетов90_91_ЕНВД(Процессор)
	
	// Создает временную таблицу ВТ_Счета90_91 с настройками для счетов 90 и 91.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Процессор.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачДата",        Процессор.КонтекстРасчета.НачалоМесяца);
	Запрос.УстановитьПараметр("КонДата",        Процессор.КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организации",    Процессор.КонтекстРасчета.Организации);
	// Если признак плательщика ЕНВД в текущем месяце не установлен,
	// то обороты по счетам доходов и расходов по видам деятельности с особым порядком налогообложения
	// учитываются как обороты по обычным видам деятельности.
	Запрос.УстановитьПараметр("ПлательщикЕНВД", УчетнаяПолитика.ПлательщикЕНВД(Процессор.КонтекстРасчета.Организация, Процессор.КонтекстРасчета.КонецПериода));
	Запрос.УстановитьПараметр("Счета9101",      Процессор.Счета9101);
	Запрос.УстановитьПараметр("Счета9102",      Процессор.Счета9102);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Вид КАК ВидСчета,
	|	ИСТИНА КАК Это90,
	|	ВЫБОР
	|		КОГДА &ПлательщикЕНВД
	|				И НЕ СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЕНВД,
	|	ЛОЖЬ КАК Это9101,
	|	ЛОЖЬ КАК Это9102
	|ПОМЕСТИТЬ ВТ_Счета90_91
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО Хозрасчетный.Ссылка = СчетаДоходовИРасходовЕНВД.Счет
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка,
	|	Хозрасчетный.Вид,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.Ссылка В (&Счета9101)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.Ссылка В (&Счета9102)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В (&Счета9101, &Счета9102)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьХозрасчетныйОстаткиИОбороты(Процессор)
	
	// Создает временную таблицу ВТ_ОстаткиИОбороты в разрезе всех счетов и субконто,
	// которые используются при расчете ОНА/ОНО/ПНА/ПНО.
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Процессор.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачДата",     Процессор.КонтекстРасчета.НачалоМесяца);
	Запрос.УстановитьПараметр("КонДата",     Процессор.КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организации", Процессор.КонтекстРасчета.Организации);
	
	// Временную таблицу ВТ_ХозрасчетныйОстаткиИОбороты не индексируем, она используется в качестве ЛЕВОЙ в соединении,
	// и из нее выбираются все данные.
	// Текст запроса модифицируется ниже: параметры &ХозрасчетныйОстаткиИОборотыСубконто заменяются на имена тех полей,
	// которые фактически нужно получить из виртуальной таблицы. 
	// Возможные значения NULL в субконто приводим к Неопределено для правильной группировки строк с одинаковыми по сути значениями. 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	&ХозрасчетныйОстаткиИОборотыСубконто1 КАК Субконто1,
	|	&ХозрасчетныйОстаткиИОборотыСубконто2 КАК Субконто2,
	|	&ХозрасчетныйОстаткиИОборотыСубконто3 КАК Субконто3,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокДт КАК СуммаВРНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокДт КАК СуммаВРКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокКт КАК СуммаВРНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокКт КАК СуммаВРКонечныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт КАК СуммаВРОборотДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРОборотКт КАК СуммаВРОборотКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокДт КАК СуммаПРНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокДт КАК СуммаПРКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокКт КАК СуммаПРНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокКт КАК СуммаПРКонечныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРОборотДт КАК СуммаПРОборотДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРОборотКт КАК СуммаПРОборотКт
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиИОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_НастройкиСчетовДляРасчета.Счет
	|				ИЗ
	|					ВТ_НастройкиСчетовДляРасчета КАК ВТ_НастройкиСчетовДляРасчета),
	|			,
	|			Организация В (&Организации)) КАК ХозрасчетныйОстаткиИОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НастройкиСчетовДляРасчета.ВидАктивовОбязательств,
	|	ВТ_НастройкиСчетовДляРасчета.ИндексСтрокиВидаАктивовОбязательства,
	|	ВТ_ХозрасчетныйОстаткиИОбороты.Счет,
	|	ВТ_НастройкиСчетовДляРасчета.ВидСчета,
	|	ВТ_НастройкиСчетовДляРасчета.ГруппироватьПоСчету,
	|	ВТ_ХозрасчетныйОстаткиИОбороты.Подразделение,
	|	ВТ_НастройкиСчетовДляРасчета.ГруппироватьПоПодразделению,
	|	ВЫБОР
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто1ИсточникаВПриемнике = 1
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто1
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто2ИсточникаВПриемнике = 1
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто2
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто3ИсточникаВПриемнике = 1
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто1ИсточникаВПриемнике = 2
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто1
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто2ИсточникаВПриемнике = 2
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто2
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто3ИсточникаВПриемнике = 2
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто1ИсточникаВПриемнике = 3
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто1
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто2ИсточникаВПриемнике = 3
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто2
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто3ИсточникаВПриемнике = 3
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто3,
	|	СУММА(ВТ_ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокДт) КАК СуммаВРНачальныйОстатокДт,
	|	СУММА(ВТ_ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокДт) КАК СуммаВРКонечныйОстатокДт,
	|	СУММА(ВТ_ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокКт) КАК СуммаВРНачальныйОстатокКт,
	|	СУММА(ВТ_ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокКт) КАК СуммаВРКонечныйОстатокКт,
	|	СУММА(ВТ_ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт) КАК СуммаВРОборотДт,
	|	СУММА(ВТ_ХозрасчетныйОстаткиИОбороты.СуммаВРОборотКт) КАК СуммаВРОборотКт,
	|	СУММА(ВТ_ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокДт) КАК СуммаПРНачальныйОстатокДт,
	|	СУММА(ВТ_ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокДт) КАК СуммаПРКонечныйОстатокДт,
	|	СУММА(ВТ_ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокКт) КАК СуммаПРНачальныйОстатокКт,
	|	СУММА(ВТ_ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокКт) КАК СуммаПРКонечныйОстатокКт,
	|	СУММА(ВТ_ХозрасчетныйОстаткиИОбороты.СуммаПРОборотДт) КАК СуммаПРОборотДт,
	|	СУММА(ВТ_ХозрасчетныйОстаткиИОбороты.СуммаПРОборотКт) КАК СуммаПРОборотКт
	|ПОМЕСТИТЬ ВТ_ОстаткиИОбороты
	|ИЗ
	|	ВТ_ХозрасчетныйОстаткиИОбороты КАК ВТ_ХозрасчетныйОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиСчетовДляРасчета КАК ВТ_НастройкиСчетовДляРасчета
	|		ПО ВТ_ХозрасчетныйОстаткиИОбороты.Счет = ВТ_НастройкиСчетовДляРасчета.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_НастройкиСчетовДляРасчета.ВидАктивовОбязательств,
	|	ВТ_НастройкиСчетовДляРасчета.ИндексСтрокиВидаАктивовОбязательства,
	|	ВТ_ХозрасчетныйОстаткиИОбороты.Счет,
	|	ВТ_НастройкиСчетовДляРасчета.ВидСчета,
	|	ВТ_НастройкиСчетовДляРасчета.ГруппироватьПоСчету,
	|	ВТ_ХозрасчетныйОстаткиИОбороты.Подразделение,
	|	ВТ_НастройкиСчетовДляРасчета.ГруппироватьПоПодразделению,
	|	ВЫБОР
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто1ИсточникаВПриемнике = 1
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто1
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто2ИсточникаВПриемнике = 1
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто2
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто3ИсточникаВПриемнике = 1
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто1ИсточникаВПриемнике = 2
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто1
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто2ИсточникаВПриемнике = 2
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто2
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто3ИсточникаВПриемнике = 2
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто1ИсточникаВПриемнике = 3
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто1
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто2ИсточникаВПриемнике = 3
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто2
	|		КОГДА ВТ_НастройкиСчетовДляРасчета.НомерСубконто3ИсточникаВПриемнике = 3
	|			ТОГДА ВТ_ХозрасчетныйОстаткиИОбороты.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ХозрасчетныйОстаткиИОбороты";
	
	// Оставим в тексте запроса только те субконто, которые фактически используются в расчете ОНА/ОНО/ПНА/ПНО.
	ФактическиИспользуемыеСубконтоИсточника = Процессор.ФактическиИспользуемыеСубконтоИсточника;
	Для НомерСубконто = 1 По ФактическиИспользуемыеСубконтоИсточника.Количество() Цикл
		Если ФактическиИспользуемыеСубконтоИсточника[НомерСубконто - 1] Тогда
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст, 
				"&ХозрасчетныйОстаткиИОборотыСубконто" + НомерСубконто, 
				"ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.Субконто" + НомерСубконто + ", НЕОПРЕДЕЛЕНО)");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ХозрасчетныйОстаткиИОборотыСубконто" + НомерСубконто, "НЕОПРЕДЕЛЕНО");
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаХозрасчетныйОбороты(ФактическиИспользуемыеСубконтоИсточника)
	
	// Запрос создает временную таблицу ВТ_ХозрасчетныйОбороты, содержащую объединение данных:
	// 1. оборотов по счетам и субконто без учета кор.счетов;
	// 2. оборотов по счетам и субконто в корреспонденции со счетами 90 и 91 в разрезе кор.счетов.
	// Таблица в дальнейшем используется в СоздатьОборотыПоКорСчетам().
	//
	//
	// Обороты с 90 и 91 получаем из тех движений регистра бухгалтерии, в которых заполнены суммы ВР и/или ПР.
	// Т.к. налоговый учет на отдельных счетах может быть выключен, то суммы проверяем с учетом возможного значения NULL.
	// При этом обороты по 91 учитываем в том случае, если в проводке и по Дт и по Кт сумма ПР <> 0, 
	// тогда она отражается по виду актива и обязательства, списанных на доходы/расходы 91.
	// В тех случаях, когда сумма ПР по счету учета актива/обязательства = 0, 
	// возникновение ПР отражаем по виду прочих доходов и расходов (см. СоздатьОбороты91()).
	//
	// Расчет ОНА и ОНО производится по временным разницам, возникшим на самих счетах учета активов и обязательств.
	// а расчет ПНА и ПНО - по постоянным разницам, отраженным на счетах 90 и 91 от операций с этими активами и обязательствами.
	// Поэтому суммы ПР получаем не только для самого счета актива и обязательства, но и для кор.счета (90 или 91),
	// они могут отличаться, например, когда товары, по которым не было изначально разниц, 
	// списаны на расходы, не принимаемые к учету по налогу на прибыль.
	// 
	// Временную таблицу ВТ_ХозрасчетныйДвижения не индексируем, она используется в качестве ЛЕВОЙ в соединении,
	// из которой выбираются все данные и к которой присоединяется несколько раз физическая таблица Субконто 
	// регистра бухгалтерии по нескольким наборам полей, отличающимся видом субконто.
	// При этом в каждом соединении включены все поля для использования кластерного индекса таблицы Субконто: 
	// Период + Регистратор + НомерСтроки + ВидСубконто + Корреспонденция.
	// 
	//
	// Текст запроса представляет собой шаблон, из которого далее с помощью СхемыЗапроса
	// исключается получение значений субконто, которые не требуются согласно настройке счетов для расчета.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_НастройкиСчетовДляРасчета.ВидАктивовОбязательств,
	|	ВТ_НастройкиСчетовДляРасчета.ИндексСтрокиВидаАктивовОбязательства,
	|	ХозрасчетныйДт.Регистратор КАК Регистратор,
	|	ХозрасчетныйДт.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДт.Период КАК Период,
	|	ХозрасчетныйДт.СчетДт КАК Счет,
	|	ВТ_НастройкиСчетовДляРасчета.ГруппироватьПоСчету КАК ГруппироватьПоСчету,
	|	ВТ_НастройкиСчетовДляРасчета.ВидСчета КАК ВидСчета,
	|	ЕСТЬNULL(ХозрасчетныйДт.ПодразделениеДт, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ВТ_НастройкиСчетовДляРасчета.ГруппироватьПоПодразделению КАК ГруппироватьПоПодразделению,
	|	ВТ_НастройкиСчетовДляРасчета.ВидСубконто1Приемника КАК ВидСубконто1Приемника,
	|	ВТ_НастройкиСчетовДляРасчета.ВидСубконто2Приемника КАК ВидСубконто2Приемника,
	|	ВТ_НастройкиСчетовДляРасчета.ВидСубконто3Приемника КАК ВидСубконто3Приемника,
	|	ХозрасчетныйДт.СчетКт КАК КорСчет,
	|	ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет) КАК ВидДвижения,
	|	ЕСТЬNULL(ХозрасчетныйДт.СуммаВРДт, 0) КАК СуммаВРОборотДт,
	|	0 КАК СуммаВРОборотКт,
	|	ЕСТЬNULL(ХозрасчетныйДт.СуммаПРДт, 0) КАК СуммаПРОборотДт,
	|	0 КАК СуммаПРОборотКт,
	|	ЕСТЬNULL(ХозрасчетныйДт.СуммаПРКт, 0) КАК СуммаПРКорОборотДт,
	|	0 КАК СуммаПРКорОборотКт
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйДвижения
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК ХозрасчетныйДт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиСчетовДляРасчета КАК ВТ_НастройкиСчетовДляРасчета
	|		ПО ХозрасчетныйДт.СчетДт = ВТ_НастройкиСчетовДляРасчета.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Счета90_91 КАК ВТ_Счета90_91
	|		ПО ХозрасчетныйДт.СчетКт = ВТ_Счета90_91.Счет
	|ГДЕ
	|	ХозрасчетныйДт.Организация В(&Организации)
	|	И ХозрасчетныйДт.Период МЕЖДУ &НачДата И &КонДата
	|	И ХозрасчетныйДт.Активность
	|	И (ЕСТЬNULL(ХозрасчетныйДт.СуммаВРДт, 0) <> 0
	|			ИЛИ ЕСТЬNULL(ХозрасчетныйДт.СуммаПРДт, 0) <> 0
	|			ИЛИ ЕСТЬNULL(ХозрасчетныйДт.СуммаПРКт, 0) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_НастройкиСчетовДляРасчета.ВидАктивовОбязательств,
	|	ВТ_НастройкиСчетовДляРасчета.ИндексСтрокиВидаАктивовОбязательства,
	|	ХозрасчетныйКт.Регистратор,
	|	ХозрасчетныйКт.НомерСтроки,
	|	ХозрасчетныйКт.Период,
	|	ХозрасчетныйКт.СчетКт,
	|	ВТ_НастройкиСчетовДляРасчета.ГруппироватьПоСчету,
	|	ВТ_НастройкиСчетовДляРасчета.ВидСчета,
	|	ЕСТЬNULL(ХозрасчетныйКт.ПодразделениеКт, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
	|	ВТ_НастройкиСчетовДляРасчета.ГруппироватьПоПодразделению,
	|	ВТ_НастройкиСчетовДляРасчета.ВидСубконто1Приемника,
	|	ВТ_НастройкиСчетовДляРасчета.ВидСубконто2Приемника,
	|	ВТ_НастройкиСчетовДляРасчета.ВидСубконто3Приемника,
	|	ХозрасчетныйКт.СчетДт,
	|	ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит),
	|	0,
	|	ЕСТЬNULL(ХозрасчетныйКт.СуммаВРКт, 0),
	|	0,
	|	ЕСТЬNULL(ХозрасчетныйКт.СуммаПРКт, 0),
	|	0,
	|	ЕСТЬNULL(ХозрасчетныйКт.СуммаПРДт, 0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК ХозрасчетныйКт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиСчетовДляРасчета КАК ВТ_НастройкиСчетовДляРасчета
	|		ПО ХозрасчетныйКт.СчетКт = ВТ_НастройкиСчетовДляРасчета.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Счета90_91 КАК ВТ_Счета90_91
	|		ПО ХозрасчетныйКт.СчетДт = ВТ_Счета90_91.Счет
	|ГДЕ
	|	ХозрасчетныйКт.Организация В(&Организации)
	|	И ХозрасчетныйКт.Период МЕЖДУ &НачДата И &КонДата
	|	И ХозрасчетныйКт.Активность
	|	И (ЕСТЬNULL(ХозрасчетныйКт.СуммаВРКт, 0) <> 0
	|			ИЛИ ЕСТЬNULL(ХозрасчетныйКт.СуммаПРКт, 0) <> 0
	|			ИЛИ ЕСТЬNULL(ХозрасчетныйКт.СуммаПРДт, 0) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	|	ХозрасчетныйОбороты.ИндексСтрокиВидаАктивовОбязательства КАК ИндексСтрокиВидаАктивовОбязательства,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.ГруппироватьПоСчету КАК ГруппироватьПоСчету,
	|	ХозрасчетныйОбороты.ВидСчета КАК ВидСчета,
	|	НЕОПРЕДЕЛЕНО КАК КорСчет,
	|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОбороты.ГруппироватьПоПодразделению КАК ГруппироватьПоПодразделению,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОбороты.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОбороты.СуммаВРОборотДт,
	|	ХозрасчетныйОбороты.СуммаВРОборотКт,
	|	ХозрасчетныйОбороты.СуммаПРОборотДт,
	|	ХозрасчетныйОбороты.СуммаПРОборотКт,
	|	0 КАК СуммаПРКорОборотДт,
	|	0 КАК СуммаПРКорОборотКт
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОбороты
	|ИЗ
	|	ВТ_ОстаткиИОбороты КАК ХозрасчетныйОбороты
	|ГДЕ
	|	(ХозрасчетныйОбороты.СуммаВРОборотДт <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаВРОборотКт <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаПРОборотДт <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаПРОборотКт <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ХозрасчетныйДвижения.ВидАктивовОбязательств,
	|	ВТ_ХозрасчетныйДвижения.ИндексСтрокиВидаАктивовОбязательства,
	|	ВТ_ХозрасчетныйДвижения.Счет,
	|	ВТ_ХозрасчетныйДвижения.ГруппироватьПоСчету,
	|	ВТ_ХозрасчетныйДвижения.ВидСчета,
	|	ВТ_ХозрасчетныйДвижения.КорСчет,
	|	ВТ_ХозрасчетныйДвижения.Подразделение,
	|	ВТ_ХозрасчетныйДвижения.ГруппироватьПоПодразделению,
	|	ХозрасчетныйСубконто1.Значение,
	|	ХозрасчетныйСубконто2.Значение,
	|	ХозрасчетныйСубконто3.Значение,
	|	СУММА(ВТ_ХозрасчетныйДвижения.СуммаВРОборотДт),
	|	СУММА(ВТ_ХозрасчетныйДвижения.СуммаВРОборотКт),
	|	СУММА(ВТ_ХозрасчетныйДвижения.СуммаПРОборотДт),
	|	СУММА(ВТ_ХозрасчетныйДвижения.СуммаПРОборотКт),
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ХозрасчетныйДвижения.КорСчет В (&Счета9101)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_ХозрасчетныйДвижения.СуммаПРОборотДт <> 0
	|							ТОГДА ВТ_ХозрасчетныйДвижения.СуммаПРКорОборотДт
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ВТ_ХозрасчетныйДвижения.СуммаПРКорОборотДт
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ХозрасчетныйДвижения.КорСчет В (&Счета9102)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_ХозрасчетныйДвижения.СуммаПРОборотКт <> 0
	|							ТОГДА ВТ_ХозрасчетныйДвижения.СуммаПРКорОборотКт
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ВТ_ХозрасчетныйДвижения.СуммаПРКорОборотКт
	|		КОНЕЦ)
	|ИЗ
	|	ВТ_ХозрасчетныйДвижения КАК ВТ_ХозрасчетныйДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто1
	|		ПО ВТ_ХозрасчетныйДвижения.Период = ХозрасчетныйСубконто1.Период
	|			И ВТ_ХозрасчетныйДвижения.Регистратор = ХозрасчетныйСубконто1.Регистратор
	|			И ВТ_ХозрасчетныйДвижения.НомерСтроки = ХозрасчетныйСубконто1.НомерСтроки
	|			И ВТ_ХозрасчетныйДвижения.ВидДвижения = ХозрасчетныйСубконто1.ВидДвижения
	|			И ВТ_ХозрасчетныйДвижения.ВидСубконто1Приемника = ХозрасчетныйСубконто1.Вид
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто2
	|		ПО ВТ_ХозрасчетныйДвижения.Период = ХозрасчетныйСубконто2.Период
	|			И ВТ_ХозрасчетныйДвижения.Регистратор = ХозрасчетныйСубконто2.Регистратор
	|			И ВТ_ХозрасчетныйДвижения.НомерСтроки = ХозрасчетныйСубконто2.НомерСтроки
	|			И ВТ_ХозрасчетныйДвижения.ВидДвижения = ХозрасчетныйСубконто2.ВидДвижения
	|			И ВТ_ХозрасчетныйДвижения.ВидСубконто2Приемника = ХозрасчетныйСубконто2.Вид
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто3
	|		ПО ВТ_ХозрасчетныйДвижения.Период = ХозрасчетныйСубконто3.Период
	|			И ВТ_ХозрасчетныйДвижения.Регистратор = ХозрасчетныйСубконто3.Регистратор
	|			И ВТ_ХозрасчетныйДвижения.НомерСтроки = ХозрасчетныйСубконто3.НомерСтроки
	|			И ВТ_ХозрасчетныйДвижения.ВидДвижения = ХозрасчетныйСубконто3.ВидДвижения
	|			И ВТ_ХозрасчетныйДвижения.ВидСубконто3Приемника = ХозрасчетныйСубконто3.Вид
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ХозрасчетныйДвижения.ВидАктивовОбязательств,
	|	ВТ_ХозрасчетныйДвижения.ИндексСтрокиВидаАктивовОбязательства,
	|	ВТ_ХозрасчетныйДвижения.Счет,
	|	ВТ_ХозрасчетныйДвижения.ГруппироватьПоСчету,
	|	ВТ_ХозрасчетныйДвижения.ВидСчета,
	|	ВТ_ХозрасчетныйДвижения.КорСчет,
	|	ВТ_ХозрасчетныйДвижения.Подразделение,
	|	ВТ_ХозрасчетныйДвижения.ГруппироватьПоПодразделению,
	|	ХозрасчетныйСубконто1.Значение,
	|	ХозрасчетныйСубконто2.Значение,
	|	ХозрасчетныйСубконто3.Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ХозрасчетныйДвижения";

	// Исключим из соединения лишние обращения к таблице РегистрБухгалтерии.Хозрасчетный.Субконто,
	// если субконто с соответствующим номером фактически не используется для расчета 
	// ни в одной строке таблицы видов активов и обязательств.
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 2];
	ИсточникиДвиженияССубконто = ПакетЗапросов.Операторы[1].Источники;
	
	Для НомерСубконто = 1 По ФактическиИспользуемыеСубконтоИсточника.Количество() Цикл
		Если ФактическиИспользуемыеСубконтоИсточника[НомерСубконто - 1] Тогда
			Продолжить;
		КонецЕсли;
		
		// При удалении таблицы из источников запроса получаемые из нее поля заменяются на NULL,
		// они приводятся к значению Неопределено в СоздатьОборотыПоКорСчетам().
		ИсточникиДвиженияССубконто.Удалить("ХозрасчетныйСубконто" + НомерСубконто);
		
	КонецЦикла;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Процедура СоздатьОборотыПоКорСчетам(Процессор)
	
	// Создает временную таблицу ВТ_ОборотыПоКорСчетам, которая содержит
	// сводные обороты по всем счетам и субконто как в целом за период, 
	// так и обороты в корреспонденции с отдельными счетами 90 и 91.
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Процессор.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачДата",     Процессор.КонтекстРасчета.НачалоМесяца);
	Запрос.УстановитьПараметр("КонДата",     Процессор.КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организации", Процессор.КонтекстРасчета.Организации);
	Запрос.УстановитьПараметр("Счета9101",   Процессор.Счета9101);
	Запрос.УстановитьПараметр("Счета9102",   Процессор.Счета9102);
	
	ТекстыЗапросов = Новый Массив(2);
	ТекстыЗапросов[0] = ТекстЗапросаХозрасчетныйОбороты(Процессор.ФактическиИспользуемыеСубконтоИсточника);
	
	// В тексте запроса для наглядности выделены группы суммовых полей по видам корреспондирующих счетов.
	// Чтобы не потерять их, не следует сохранять изменения текста запроса с помощью конструктора.
	ТекстыЗапросов[1]= 
	"ВЫБРАТЬ
	|	ВТ_ХозрасчетныйОбороты.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	|	ВТ_ХозрасчетныйОбороты.ИндексСтрокиВидаАктивовОбязательства КАК ИндексСтрокиВидаАктивовОбязательства,
	|	ВТ_ХозрасчетныйОбороты.Счет КАК Счет,
	|	ВТ_ХозрасчетныйОбороты.ГруппироватьПоСчету КАК ГруппироватьПоСчету,
	|	ВТ_ХозрасчетныйОбороты.ВидСчета КАК ВидСчета,
	|	ВТ_ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ВТ_ХозрасчетныйОбороты.ГруппироватьПоПодразделению КАК ГруппироватьПоПодразделению,
	|	ЕСТЬNULL(ВТ_ХозрасчетныйОбороты.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
	|	ЕСТЬNULL(ВТ_ХозрасчетныйОбороты.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
	|	ЕСТЬNULL(ВТ_ХозрасчетныйОбороты.Субконто3, НЕОПРЕДЕЛЕНО) КАК Субконто3,
	|
	//	ВР без 90
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ХозрасчетныйОбороты.КорСчет = НЕОПРЕДЕЛЕНО
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаВРОборотДт
	|			КОГДА ВТ_Счета90_91.Это90
	|				ТОГДА - ВТ_ХозрасчетныйОбороты.СуммаВРОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВРОборотДт_Без90,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ХозрасчетныйОбороты.КорСчет = НЕОПРЕДЕЛЕНО
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаВРОборотКт
	|			КОГДА ВТ_Счета90_91.Это90
	|				ТОГДА - ВТ_ХозрасчетныйОбороты.СуммаВРОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВРОборотКт_Без90,
	|
	//	ВР 90 без ЕНВД
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.Это90 И НЕ ВТ_Счета90_91.ЭтоЕНВД
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаВРОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВРОборотДт_90БезЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.Это90 И НЕ ВТ_Счета90_91.ЭтоЕНВД
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаВРОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВРОборотКт_90БезЕНВД,
	|
	//	ВР ЕНВД
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.ЭтоЕНВД
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаВРОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВРОборотДт_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.ЭтоЕНВД
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаВРОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВРОборотКт_ЕНВД,
	|
	//	ПР без 90 и 91
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ХозрасчетныйОбороты.КорСчет = НЕОПРЕДЕЛЕНО
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРОборотДт
	|			КОГДА НЕ ВТ_Счета90_91.Счет ЕСТЬ NULL
	|				ТОГДА - ВТ_ХозрасчетныйОбороты.СуммаПРОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРОборотДт_Без90_91,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ХозрасчетныйОбороты.КорСчет = НЕОПРЕДЕЛЕНО
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРОборотКт
	|			КОГДА НЕ ВТ_Счета90_91.Счет ЕСТЬ NULL
	|				ТОГДА - ВТ_ХозрасчетныйОбороты.СуммаПРОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРОборотКт_Без90_91,
	|
	//	ПР c 91
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.Это9101
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРОборотДт_9101,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.Это9102
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРОборотКт_9102,
	|
	//	Кор.ПР c 91
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.Это9101
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРКорОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРКорОборотДт_9101,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.Это9102
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРКорОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРКорОборотКт_9102,
	|
	//	Кор.ПР 90 без ЕНВД
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.Это90 И НЕ ВТ_Счета90_91.ЭтоЕНВД
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРКорОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРКорОборотДт_90БезЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.Это90 И НЕ ВТ_Счета90_91.ЭтоЕНВД
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРКорОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРКорОборотКт_90БезЕНВД,
	|
	//	Кор.ПР 90 без ЕНВД по активным и активно-пассивным кор.счетам
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.Это90 И НЕ ВТ_Счета90_91.ЭтоЕНВД И ВТ_Счета90_91.ВидСчета <> ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРКорОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРКорОборотДт_90БезЕНВД_А,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.Это90 И НЕ ВТ_Счета90_91.ЭтоЕНВД И ВТ_Счета90_91.ВидСчета <> ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРКорОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРКорОборотКт_90БезЕНВД_А,
	|
	//	Кор.ПР 90 без ЕНВД по пассивным кор.счетам
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.Это90 И НЕ ВТ_Счета90_91.ЭтоЕНВД И ВТ_Счета90_91.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРКорОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРКорОборотДт_90БезЕНВД_П,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.Это90 И НЕ ВТ_Счета90_91.ЭтоЕНВД И ВТ_Счета90_91.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРКорОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРКорОборотКт_90БезЕНВД_П,
	|
	//	ПР ЕНВД
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.ЭтоЕНВД
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРОборотДт_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Счета90_91.ЭтоЕНВД
	|				ТОГДА ВТ_ХозрасчетныйОбороты.СуммаПРОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПРОборотКт_ЕНВД
	|
	|ПОМЕСТИТЬ ВТ_ОборотыПоКорСчетам
	|ИЗ
	|	ВТ_ХозрасчетныйОбороты КАК ВТ_ХозрасчетныйОбороты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Счета90_91 КАК ВТ_Счета90_91
	|	ПО ВТ_ХозрасчетныйОбороты.КорСчет = ВТ_Счета90_91.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ХозрасчетныйОбороты.ВидАктивовОбязательств,
	|	ВТ_ХозрасчетныйОбороты.ИндексСтрокиВидаАктивовОбязательства,
	|	ВТ_ХозрасчетныйОбороты.Счет,
	|	ВТ_ХозрасчетныйОбороты.ГруппироватьПоСчету,
	|	ВТ_ХозрасчетныйОбороты.ВидСчета,
	|	ВТ_ХозрасчетныйОбороты.Подразделение,
	|	ВТ_ХозрасчетныйОбороты.ГруппироватьПоПодразделению,
	|	ЕСТЬNULL(ВТ_ХозрасчетныйОбороты.Субконто1, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ВТ_ХозрасчетныйОбороты.Субконто2, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ВТ_ХозрасчетныйОбороты.Субконто3, НЕОПРЕДЕЛЕНО)";
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьОбороты91(Процессор)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Процессор.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачДата",     Процессор.КонтекстРасчета.НачалоМесяца);
	Запрос.УстановитьПараметр("КонДата",     Процессор.КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организации", Процессор.КонтекстРасчета.Организации);
	Запрос.УстановитьПараметр("Счета9101",   Процессор.Счета9101);
	Запрос.УстановитьПараметр("Счета9102",   Процессор.Счета9102);

	// Обороты 91 с кор.счетами, по которым не ведется налоговый учет либо для которых сумма ПР = 0.
	// Детализацию таких оборотов производим по видам прочих доходов и расходов.
	// Возможное значение субконто NULL приводим к НЕОПРЕДЕЛЕНО аналогично тому, 
	// как выполняется приведение отсутствующих субконто в запросах в ТекстЗапросаОборотыПостоянныхРазниц().
	// 
	// Счета активов и обязательств, по которым ведется налоговый учет, учитываются в СоздатьОборотыПоКорСчетам().
	// Они детализируются по своим субконто (активам и обязательствам).
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет В (&Счета9102)
	|			ТОГДА ХозрасчетныйОбороты.СуммаПРОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПРОборотДт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет В (&Счета9101)
	|			ТОГДА ХозрасчетныйОбороты.СуммаПРОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПРОборотКт
	|ПОМЕСТИТЬ ВТ_Обороты91
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, , Счет В (&Счета9101, &Счета9102), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы), Организация В(&Организации), , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	(ХозрасчетныйОбороты.СуммаПРОборотДт <> 0
	|				И ЕСТЬNULL(ХозрасчетныйОбороты.СуммаПРКорОборотДт, 0) = 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаПРОборотКт <> 0
	|				И ЕСТЬNULL(ХозрасчетныйОбороты.СуммаПРКорОборотКт, 0) = 0)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаОборотыПостоянныхРазниц()

	// Возникновение разниц по РБП с видом "Убытки прошлых лет" не учитываем, 
	// исключая их из дебетового оборота и сальдо конечного дебетового.
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТ_ОстаткиИОбороты.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	|	ВТ_ОстаткиИОбороты.ИндексСтрокиВидаАктивовОбязательства КАК ИндексСтрокиВидаАктивовОбязательства,
	|	ВТ_ОстаткиИОбороты.Счет КАК Счет,
	|	ВТ_ОстаткиИОбороты.ГруппироватьПоСчету КАК ГруппироватьПоСчету,
	|	ВТ_ОстаткиИОбороты.Подразделение КАК Подразделение,
	|	ВТ_ОстаткиИОбороты.ГруппироватьПоПодразделению КАК ГруппироватьПоПодразделению,
	|	ВТ_ОстаткиИОбороты.Субконто1 КАК Субконто1,
	|	ВТ_ОстаткиИОбороты.Субконто2 КАК Субконто2,
	|	ВТ_ОстаткиИОбороты.Субконто3 КАК Субконто3,
	|	ВТ_ОстаткиИОбороты.СуммаПРНачальныйОстатокДт КАК НачОстатокДт,
	|	ВТ_ОстаткиИОбороты.СуммаПРНачальныйОстатокКт КАК НачОстатокКт,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВТ_ОстаткиИОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).ВидРБП = ЗНАЧЕНИЕ(Перечисление.ВидыРБП.УбыткиПрошлыхЛет)
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиИОбороты.СуммаПРОборотДт
	|	КОНЕЦ КАК ОборотДт,
	|	ВТ_ОстаткиИОбороты.СуммаПРОборотКт КАК ОборотКт,
	|	ВТ_ОстаткиИОбороты.СуммаПРКонечныйОстатокДт - ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВТ_ОстаткиИОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).ВидРБП = ЗНАЧЕНИЕ(Перечисление.ВидыРБП.УбыткиПрошлыхЛет)
	|			ТОГДА ВТ_ОстаткиИОбороты.СуммаПРОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КонОстатокДт,
	|	ВТ_ОстаткиИОбороты.СуммаПРКонечныйОстатокКт КАК КонОстатокКт,
	|	0 КАК ОборотЕН,
	|	0 КАК Признаны,
	|	0 КАК ПеренесеныНаДругиеОбъекты,
	|	0 КАК ПовлиялиНаРазницыВОценкеРасходовННП,
	|	0 КАК СуммаПНО,
	|	0 КАК СуммаПНА,
	|	0 КАК ПовлиялиНаРазницывОценкеРасходовНеННП
	|ПОМЕСТИТЬ ВТ_ОборотыПостоянныхРазниц
	|ИЗ
	|	ВТ_ОстаткиИОбороты КАК ВТ_ОстаткиИОбороты
	|ГДЕ
	|	НЕ ВТ_ОстаткиИОбороты.ВидАктивовОбязательств В (ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.ПрочиеДоходы), ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.ПрочиеРасходы), ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ОборотыПоКорСчетам.ВидАктивовОбязательств,
	|	ВТ_ОборотыПоКорСчетам.ИндексСтрокиВидаАктивовОбязательства,
	|	ВТ_ОборотыПоКорСчетам.Счет,
	|	ВТ_ОборотыПоКорСчетам.ГруппироватьПоСчету,
	|	ВТ_ОборотыПоКорСчетам.Подразделение,
	|	ВТ_ОборотыПоКорСчетам.ГруппироватьПоПодразделению,
	|	ВТ_ОборотыПоКорСчетам.Субконто1,
	|	ВТ_ОборотыПоКорСчетам.Субконто2,
	|	ВТ_ОборотыПоКорСчетам.Субконто3,
	|	0 КАК НачОстатокДт,
	|	0 КАК НачОстатокКт,
	|	0 КАК ОборотДт,
	|	0 КАК ОборотКт,
	|	0 КАК КонОстатокДт,
	|	0 КАК КонОстатокКт,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ОборотыПоКорСчетам.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА ВТ_ОборотыПоКорСчетам.СуммаПРОборотКт_ЕНВД
	|			ИНАЧЕ ВТ_ОборотыПоКорСчетам.СуммаПРОборотДт_ЕНВД
	|		КОНЕЦ) КАК ОборотЕН,
	|	СУММА(ВТ_ОборотыПоКорСчетам.СуммаПРОборотДт_9101 + ВТ_ОборотыПоКорСчетам.СуммаПРОборотКт_9102 + ВЫБОР
	|			КОГДА ВТ_ОборотыПоКорСчетам.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА ВТ_ОборотыПоКорСчетам.СуммаПРОборотКт_Без90_91 + ВТ_ОборотыПоКорСчетам.СуммаПРОборотКт_ЕНВД - (ВТ_ОборотыПоКорСчетам.СуммаПРОборотДт_Без90_91 + ВТ_ОборотыПоКорСчетам.СуммаПРОборотДт_ЕНВД)
	|			ИНАЧЕ ВТ_ОборотыПоКорСчетам.СуммаПРОборотДт_Без90_91 + ВТ_ОборотыПоКорСчетам.СуммаПРОборотДт_ЕНВД - (ВТ_ОборотыПоКорСчетам.СуммаПРОборотКт_Без90_91 + ВТ_ОборотыПоКорСчетам.СуммаПРОборотКт_ЕНВД)
	|		КОНЕЦ) КАК Признаны,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ОборотыПоКорСчетам.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА ВТ_ОборотыПоКорСчетам.СуммаПРОборотДт_Без90_91
	|			ИНАЧЕ ВТ_ОборотыПоКорСчетам.СуммаПРОборотКт_Без90_91
	|		КОНЕЦ) КАК ПеренесеныНаДругиеОбъекты,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ОборотыПоКорСчетам.СуммаПРОборотДт_9101 <> 0
	|				ТОГДА ВТ_ОборотыПоКорСчетам.СуммаПРКорОборотДт_9101
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ВТ_ОборотыПоКорСчетам.СуммаПРОборотКт_9102 <> 0
	|				ТОГДА ВТ_ОборотыПоКорСчетам.СуммаПРКорОборотКт_9102
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ВТ_ОборотыПоКорСчетам.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА ВТ_ОборотыПоКорСчетам.СуммаПРКорОборотКт_90БезЕНВД - ВТ_ОборотыПоКорСчетам.СуммаПРКорОборотДт_90БезЕНВД
	|			ИНАЧЕ ВТ_ОборотыПоКорСчетам.СуммаПРКорОборотДт_90БезЕНВД - ВТ_ОборотыПоКорСчетам.СуммаПРКорОборотКт_90БезЕНВД
	|		КОНЕЦ) КАК ПовлиялиНаРазницыВОценкеРасходовННП,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ОборотыПоКорСчетам.СуммаПРОборотКт_9102 <> 0
	|				ТОГДА ВТ_ОборотыПоКорСчетам.СуммаПРКорОборотКт_9102 * &СтавкаНалога
	|			ИНАЧЕ 0
	|		КОНЕЦ + (ВТ_ОборотыПоКорСчетам.СуммаПРКорОборотКт_90БезЕНВД_А - ВТ_ОборотыПоКорСчетам.СуммаПРКорОборотДт_90БезЕНВД_А) * &СтавкаНалога) КАК СуммаПНО,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ОборотыПоКорСчетам.СуммаПРОборотДт_9101 <> 0
	|				ТОГДА ВТ_ОборотыПоКорСчетам.СуммаПРКорОборотДт_9101 * &СтавкаНалога
	|			ИНАЧЕ 0
	|		КОНЕЦ + (ВТ_ОборотыПоКорСчетам.СуммаПРКорОборотДт_90БезЕНВД_П - ВТ_ОборотыПоКорСчетам.СуммаПРКорОборотКт_90БезЕНВД_П) * &СтавкаНалога) КАК СуммаПНА,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ОборотыПоКорСчетам.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА ВТ_ОборотыПоКорСчетам.СуммаПРОборотДт_ЕНВД
	|			ИНАЧЕ ВТ_ОборотыПоКорСчетам.СуммаПРОборотКт_ЕНВД
	|		КОНЕЦ) КАК ПовлиялиНаРазницывОценкеРасходовНеННП
	|ИЗ
	|	ВТ_ОборотыПоКорСчетам КАК ВТ_ОборотыПоКорСчетам
	|ГДЕ
	|	НЕ ВТ_ОборотыПоКорСчетам.ВидАктивовОбязательств В (ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.ПрочиеДоходы), ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.ПрочиеРасходы), ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОборотыПоКорСчетам.ВидАктивовОбязательств,
	|	ВТ_ОборотыПоКорСчетам.ИндексСтрокиВидаАктивовОбязательства,
	|	ВТ_ОборотыПоКорСчетам.Счет,
	|	ВТ_ОборотыПоКорСчетам.ГруппироватьПоСчету,
	|	ВТ_ОборотыПоКорСчетам.Подразделение,
	|	ВТ_ОборотыПоКорСчетам.ГруппироватьПоПодразделению,
	|	ВТ_ОборотыПоКорСчетам.Субконто1,
	|	ВТ_ОборотыПоКорСчетам.Субконто2,
	|	ВТ_ОборотыПоКорСчетам.Субконто3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_НастройкиСчетовДляРасчета.ВидАктивовОбязательств,
	|	ВТ_НастройкиСчетовДляРасчета.ИндексСтрокиВидаАктивовОбязательства,
	|	ВТ_Обороты91.Счет,
	|	ВТ_НастройкиСчетовДляРасчета.ГруппироватьПоСчету,
	|	ВТ_Обороты91.Подразделение,
	|	ВТ_НастройкиСчетовДляРасчета.ГруппироватьПоПодразделению,
	|	ВТ_Обороты91.Субконто1,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0 КАК НачОстатокДт,
	|	0 КАК НачОстатокКт,
	|	0 КАК ОборотДт,
	|	0 КАК ОборотКт,
	|	0 КАК КонОстатокДт,
	|	0 КАК КонОстатокКт,
	|	0 КАК ОборотЕН,
	|	ВТ_Обороты91.СуммаПРОборотДт + ВТ_Обороты91.СуммаПРОборотКт КАК Признаны,
	|	0 КАК ПеренесеныНаДругиеОбъекты,
	|	ВТ_Обороты91.СуммаПРОборотДт + ВТ_Обороты91.СуммаПРОборотКт КАК ПовлиялиНаРазницыВОценкеРасходовННП,
	|	ВТ_Обороты91.СуммаПРОборотДт * &СтавкаНалога КАК СуммаПНО,
	|	ВТ_Обороты91.СуммаПРОборотКт * &СтавкаНалога КАК СуммаПНА,
	|	0 КАК ПовлиялиНаРазницывОценкеРасходовНеННП
	|ИЗ
	|	ВТ_Обороты91 КАК ВТ_Обороты91
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиСчетовДляРасчета КАК ВТ_НастройкиСчетовДляРасчета
	|		ПО ВТ_Обороты91.Счет = ВТ_НастройкиСчетовДляРасчета.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОборотыПостоянныхРазниц.ВидАктивовОбязательств,
	|	ВТ_ОборотыПостоянныхРазниц.ИндексСтрокиВидаАктивовОбязательства КАК ИндексСтрокиВидаАктивовОбязательства,
	|	ВЫБОР
	|		КОГДА ВТ_ОборотыПостоянныхРазниц.ГруппироватьПоСчету
	|			ТОГДА ВТ_ОборотыПостоянныхРазниц.Счет
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК Счет,
	|	ВЫБОР
	|		КОГДА ВТ_ОборотыПостоянныхРазниц.ГруппироватьПоПодразделению
	|			ТОГДА ВТ_ОборотыПостоянныхРазниц.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	ВТ_ОборотыПостоянныхРазниц.Субконто1,
	|	ВТ_ОборотыПостоянныхРазниц.Субконто2,
	|	ВТ_ОборотыПостоянныхРазниц.Субконто3,
	|	СУММА(ВТ_ОборотыПостоянныхРазниц.НачОстатокДт) КАК НачОстатокДт,
	|	СУММА(ВТ_ОборотыПостоянныхРазниц.НачОстатокКт) КАК НачОстатокКт,
	|	СУММА(ВТ_ОборотыПостоянныхРазниц.ОборотДт) КАК ОборотДт,
	|	СУММА(ВТ_ОборотыПостоянныхРазниц.ОборотКт) КАК ОборотКт,
	|	СУММА(ВТ_ОборотыПостоянныхРазниц.КонОстатокДт) КАК КонОстатокДт,
	|	СУММА(ВТ_ОборотыПостоянныхРазниц.КонОстатокКт) КАК КонОстатокКт,
	|	СУММА(ВТ_ОборотыПостоянныхРазниц.ОборотЕН) КАК ОборотЕН,
	|	СУММА(ВТ_ОборотыПостоянныхРазниц.Признаны) КАК Признаны,
	|	СУММА(ВТ_ОборотыПостоянныхРазниц.ПеренесеныНаДругиеОбъекты) КАК ПеренесеныНаДругиеОбъекты,
	|	СУММА(ВТ_ОборотыПостоянныхРазниц.ПовлиялиНаРазницывОценкеРасходовННП) КАК ПовлиялиНаРазницывОценкеРасходовННП,
	|	СУММА(ВТ_ОборотыПостоянныхРазниц.СуммаПНО) КАК СуммаПНО,
	|	СУММА(ВТ_ОборотыПостоянныхРазниц.СуммаПНА) КАК СуммаПНА,
	|	СУММА(ВТ_ОборотыПостоянныхРазниц.ПовлиялиНаРазницывОценкеРасходовНеННП) КАК ПовлиялиНаРазницывОценкеРасходовНеННП
	|ИЗ
	|	ВТ_ОборотыПостоянныхРазниц КАК ВТ_ОборотыПостоянныхРазниц
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОборотыПостоянныхРазниц.ВидАктивовОбязательств,
	|	ВТ_ОборотыПостоянныхРазниц.ИндексСтрокиВидаАктивовОбязательства,
	|	ВЫБОР
	|		КОГДА ВТ_ОборотыПостоянныхРазниц.ГруппироватьПоСчету
	|			ТОГДА ВТ_ОборотыПостоянныхРазниц.Счет
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ОборотыПостоянныхРазниц.ГруппироватьПоПодразделению
	|			ТОГДА ВТ_ОборотыПостоянныхРазниц.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВТ_ОборотыПостоянныхРазниц.Субконто1,
	|	ВТ_ОборотыПостоянныхРазниц.Субконто2,
	|	ВТ_ОборотыПостоянныхРазниц.Субконто3
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВТ_ОборотыПостоянныхРазниц.ОборотДт) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыПостоянныхРазниц.ОборотКт) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыПостоянныхРазниц.ОборотЕН) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыПостоянныхРазниц.Признаны) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыПостоянныхРазниц.ПеренесеныНаДругиеОбъекты) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыПостоянныхРазниц.ПовлиялиНаРазницывОценкеРасходовННП) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыПостоянныхРазниц.СуммаПНО) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыПостоянныхРазниц.СуммаПНА) <> 0
	|		ИЛИ СУММА(ВТ_ОборотыПостоянныхРазниц.ПовлиялиНаРазницывОценкеРасходовНеННП) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексСтрокиВидаАктивовОбязательства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОборотыПостоянныхРазниц";
	
	Возврат ТекстЗапроса;

КонецФункции

// Пересчет

Процедура ПересчитатьОтложенныйНалогПоСтавкеСледующегоНалоговогоПериода(Движения, Период, Организация, Регистратор) Экспорт
	
	Если НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(Период, Организация) <> 
		Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод Тогда
		// При балансовом методе оценка отложенного налога выполняется по ставке следующего налогового периода,
		// поэтому пересчет при реформации баланса не требуется.
		Возврат;
	КонецЕсли;
	
	// При затратном методе применяется такой порядок:
	// - в течение отчетного периода отложенный налог оценивается по ставке, действующей в этом периоде
	//   (в том числе, по расчетной ставке - см. НалоговыйУчетОбособленныхПодразделений.ПересчитатьОтложенныйНалогПоСреднейСтавкеТекущегоМесяца)
	// - по окончании отчетного периода он пересчитывается в ставку, следующего налогового периода, когда вероятна реализация отложенного налога
	
	СтараяСтавка = СуммарнаяУстановленнаяСтавкаНалога(
		КонецМесяца(Период),
		Организация,
		"Процент");
	
	НоваяСтавка  = СуммарнаяУстановленнаяСтавкаНалога(
		КонецМесяца(Период) + 1,
		Организация,
		"Процент");
		
	Корректировка = РассчитатьКорректировкуОтложенногоНалога(Период, Организация, СтараяСтавка, НоваяСтавка);
	Корректировка.ЗаполнитьЗначения(Истина, "Реформация"); // В последний месяц могут быть две записи о корректировке: по средней ставке с учетом декабря и по ставке на январь.
	
	РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(Период, Организация);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		Корректировка,
		РеквизитыЗаписи,
		"РасчетСтоимостиНалоговыхАктивовИОбязательствПослеИзмененияСтавкиНалогаНаПрибыль");
	
	СформироватьДвиженияКорректировкаОтложенногоНалога(
		Движения,
		Корректировка,
		Период, 
		Организация);
		
КонецПроцедуры

// Добавляет в регистр бухгалтерии записи, связанные с корректировкой отложенного налога при изменении ставки
// 
// Параметры:
//  Движения           - коллекция движений документа (регламентной операции)
//  РезультатПересчета - см. НовыйПересчетОтложенныхНалогов()
//  Период             - Дата - дата, характеризующая отчетный период (любая дата последнего месяца отчетного периода)
//  Организация        - СправочникСсылка.Организации - отчитывающаяся организация
//
Процедура СформироватьДвиженияКорректировкаОтложенногоНалога(Движения, РезультатПересчета, Период, Организация) Экспорт
	
	Для Каждого Запись Из РезультатПересчета Цикл
		
		ДобавитьПроводкуКорректировкаОтложенногоНалога(
			Движения.Хозрасчетный,
			Запись.Счет,
			Запись.Вид,
			Запись.Разница,
			Запись.Содержание,
			Период,
			Организация)
			
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияКорректировкаУбыткаТекущегоПериода(Движения, СуммаКорректировки, Период, Организация) Экспорт
	
	Если СуммаКорректировки = 0 Тогда   
		Возврат;
	КонецЕсли;
	
	ДобавитьПроводкуКорректировкаОтложенногоНалога(
		Движения.Хозрасчетный,
		ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы,
		Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода,
		СуммаКорректировки,
		НСтр("ru = 'Пересчет убытков'", Метаданные.ОсновнойЯзык.КодЯзыка), // строка записывается в ИБ
		Период,
		Организация);
	
КонецПроцедуры

Процедура ДобавитьПроводкуКорректировкаОтложенногоНалога(НаборЗаписей, Счет, ВидАктиваОбязательства, Корректировка, Содержание, Период, Организация)
	
	Если Корректировка = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Проводка = НаборЗаписей.Добавить();
	Проводка.Период      = Период;
	Проводка.Организация = Организация;
	Проводка.Содержание  = Содержание;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	ПроводкаПоДебету = (СвойстваСчета.Вид <> ВидСчета.Пассивный);
	
	Если Корректировка > 0  Тогда
		Проводка.Сумма = Корректировка;
	Иначе
		// уменьшение - обратной проводкой
		Проводка.Сумма = -Корректировка;
		ПроводкаПоДебету = Не ПроводкаПоДебету;
	КонецЕсли;
	
	Если ПроводкаПоДебету Тогда
		
		Проводка.СчетДт = Счет;
			
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств,
			ВидАктиваОбязательства);
			
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО;
			
	Иначе
			
		Проводка.СчетКт = Счет;
			
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств,
			ВидАктиваОбязательства);
			
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО;
		
	КонецЕсли;
			
	НаборЗаписей.Записывать = Истина;
	
КонецПроцедуры

Функция РассчитатьКорректировкуОтложенногоНалога(Период, Организация, СтараяСтавка, НоваяСтавка) Экспорт
	
	Пересчет = НовыйПересчетОтложенныхНалогов();
	
	Если НоваяСтавка = СтараяСтавка Тогда
		Возврат Пересчет;
	КонецЕсли;
	
	КонтекстРасчета = НовыйКонтекстРасчета(Организация, Период);
	Если КонтекстРасчета = Неопределено Тогда
		Возврат Пересчет;
	КонецЕсли;
	
	// Определим суммы отложенных налогов по новой ставке
	
	Для Каждого СтрокаВидАктиваОбязательства Из НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств() Цикл
	
		// Отложенные налоги формируются по балансовым счетам
		Если СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ПрочиеДоходы
			Или СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ПрочиеРасходы Тогда
			Продолжить;
		КонецЕсли;
	
		ВременныеРазницы = ОстаткиВременныхРазницПоВидуАктивовОбязательств(
			СтрокаВидАктиваОбязательства,
			КонтекстРасчета.КонецПериода + 1,
			КонтекстРасчета.Организации);
			
		Пока ВременныеРазницы.Следующий() Цикл
			
			Запись = Пересчет.Добавить();
			Запись.Счет        = ВременныеРазницы.СчетОтложенногоНалога;
			Запись.Вид         = СтрокаВидАктиваОбязательства.ВидАктивовОбязательств;
			Запись.НоваяСумма  = Окр(ВременныеРазницы.Сумма * НоваяСтавка / 100, 2);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Дополним данными о ранее отраженных суммах отложенных налогов (по старой ставке)
	
	СчетаПересчета = Новый Массив;
	СчетаПересчета.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);
	СчетаПересчета.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
	
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("НачалоПериода",  КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("ОтчетнаяДата",   КонтекстРасчета.КонецПериода + 1);
	Запрос.УстановитьПараметр("Организации",    КонтекстРасчета.Организации);
	Запрос.УстановитьПараметр("Счет09",         ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	Запрос.УстановитьПараметр("Счет77",         ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	Запрос.УстановитьПараметр("СчетаПересчета", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаПересчета));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Счет КАК Счет,
	|	Остатки.ВидАктиваОбязательства КАК Вид,
	|	СУММА(Остатки.Сумма) КАК СтараяСумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Счет КАК Счет,
	|		ХозрасчетныйОстатки.Субконто1 КАК ВидАктиваОбязательства,
	|		ХозрасчетныйОстатки.СуммаОстатокДт + ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ОтчетнаяДата, Счет В (&Счет09, &Счет77), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств), Организация В (&Организации)) КАК ХозрасчетныйОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет,
	|		ХозрасчетныйОбороты.Субконто1,
	|		ХозрасчетныйОбороты.СуммаОборот
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = &Счет77, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств), Организация В (&Организации), КорСчет В (&СчетаПересчета), ) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет,
	|		ХозрасчетныйОбороты.Субконто1,
	|		-ХозрасчетныйОбороты.СуммаОборот
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = &Счет09, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств), Организация В (&Организации), КорСчет В (&СчетаПересчета), ) КАК ХозрасчетныйОбороты) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Счет,
	|	Остатки.ВидАктиваОбязательства
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.Сумма) <> 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Пересчет.Добавить(), Выборка);
	КонецЦикла;
	
	Пересчет.Свернуть("Счет, Вид", "НоваяСумма, СтараяСумма");
	Пересчет.Сортировать("Счет, Вид", Новый СравнениеЗначений);
	
	ПолныйПересчет = НовыйПересчетОтложенныхНалогов();
	
	Содержание = СтрШаблон(НСтр("ru = 'Пересчет по ставке %1%%'"), Строка(Окр(НоваяСтавка, 6)));
	
	Для Каждого Шаблон Из Пересчет Цикл
		
		Запись = ПолныйПересчет.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Шаблон);
		
		Запись.Разница      = Запись.НоваяСумма - Запись.СтараяСумма;
		Запись.Содержание   = Содержание;
			
		Запись.СтараяСтавка = СтараяСтавка;
		Запись.НоваяСтавка  = НоваяСтавка;
		
		Если Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы Тогда
			Запись.ВидАктивовИОбязательствПБУ18 = Перечисления.ВидыАктивовИОбязательствПБУ18.ОНА;
		Иначе
			Запись.ВидАктивовИОбязательствПБУ18 = Перечисления.ВидыАктивовИОбязательствПБУ18.ОНО;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПолныйПересчет;
	
КонецФункции

// Определяются суммы временных разницы, которые отражены на плане счетов
// по конкретному виду ОНА (ОНО) и распределяются на вычитаемые и налогооблагаемые разницы,
// числящиеся на остатках текущего периода.
//
// Параметры:
//		СтрокаВидАктиваОбязательства - строка таблицы в которой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Функция ОстаткиВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства, ОтчетнаяДата, Организации)
	
	ТекстЗапроса = // далее может быть изменен с помощью СхемаЗапроса
	"ВЫБРАТЬ
	|	ДетальныеДанные.СчетОтложенногоНалога КАК СчетОтложенногоНалога,
	|	СУММА(ДетальныеДанные.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		СальдоВременныхРазниц.Счет КАК Счет,
	|		СальдоВременныхРазниц.Субконто1 КАК Субконто1,
	|		СальдоВременныхРазниц.Субконто2 КАК Субконто2,
	|		СальдоВременныхРазниц.Субконто3 КАК Субконто3,
	|		ВЫБОР
	|			КОГДА СальдоВременныхРазниц.СуммаВРОстаток < 0
	|				ТОГДА &Счет09
	|			ИНАЧЕ &Счет77
	|		КОНЕЦ КАК СчетОтложенногоНалога,
	|		СУММА(ВЫБОР
	|				КОГДА СальдоВременныхРазниц.СуммаВРОстаток < 0
	|					ТОГДА -СальдоВременныхРазниц.СуммаВРОстаток
	|				ИНАЧЕ СальдоВременныхРазниц.СуммаВРОстаток
	|			КОНЕЦ) КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ОтчетнаяДата, Счет В (&СчетаАктивовОбязательств), &ВидыСубконто, Организация В (&Организации)) КАК СальдоВременныхРазниц
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СальдоВременныхРазниц.Счет,
	|		СальдоВременныхРазниц.Субконто1,
	|		СальдоВременныхРазниц.Субконто2,
	|		СальдоВременныхРазниц.Субконто3,
	|		ВЫБОР
	|			КОГДА СальдоВременныхРазниц.СуммаВРОстаток < 0
	|				ТОГДА &Счет09
	|			ИНАЧЕ &Счет77
	|		КОНЕЦ) КАК ДетальныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ДетальныеДанные.СчетОтложенногоНалога";
	
	// Избыточные группировки следует удалить из текста запроса
	ПоляДляУдаления = Новый Массив;
	Если Не СтрокаВидАктиваОбязательства.ГруппироватьПоСчету Тогда
		ПоляДляУдаления.Добавить("Счет");
	КонецЕсли;
	Для НомерСубконто = СтрокаВидАктиваОбязательства.Субконто.Количество() + 1 По 3 Цикл
		ПоляДляУдаления.Добавить("Субконто" + НомерСубконто);
	КонецЦикла;
		
	Если ЗначениеЗаполнено(ПоляДляУдаления) Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		
		Оператор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0]; // в запросе он один
		ВложенныйЗапрос = Оператор.Источники[0].Источник;      // должен иметь тип ВложенныйЗапросСхемыЗапроса
		КолонкиЗапроса  = ВложенныйЗапрос.Запрос.Колонки;
		
		Для Каждого ИмяПоля Из ПоляДляУдаления Цикл
			
			Поле = КолонкиЗапроса.Найти(ИмяПоля);
			Если Поле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КолонкиЗапроса.Удалить(КолонкиЗапроса.Индекс(Поле));
			
		КонецЦикла;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОтчетнаяДата",             ОтчетнаяДата);
	Запрос.УстановитьПараметр("Организации",              Организации);
	Запрос.УстановитьПараметр("Счет09",                   ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	Запрос.УстановитьПараметр("Счет77",                   ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	Запрос.УстановитьПараметр("СчетаАктивовОбязательств", СтрокаВидАктиваОбязательства.Счета);
	Запрос.УстановитьПараметр("ВидыСубконто",             СтрокаВидАктиваОбязательства.Субконто);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция НовыйПересчетОтложенныхНалогов()
	
	ТипСумма = БухгалтерскийУчетКлиентСервер.ТипСумма();
	
	ПересчетОтложенныхНалогов = Новый ТаблицаЗначений;
	ПересчетОтложенныхНалогов.Колонки.Добавить("Счет",                         Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПересчетОтложенныхНалогов.Колонки.Добавить("ВидАктивовИОбязательствПБУ18", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательствПБУ18")); // отражение счета
	ПересчетОтложенныхНалогов.Колонки.Добавить("Вид",                          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	ПересчетОтложенныхНалогов.Колонки.Добавить("СтараяСумма",                  ТипСумма);
	ПересчетОтложенныхНалогов.Колонки.Добавить("НоваяСумма",                   ТипСумма);
	ПересчетОтложенныхНалогов.Колонки.Добавить("Разница",                      ТипСумма);
	
	ПересчетОтложенныхНалогов.Колонки.Добавить("Содержание",                   ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	ПересчетОтложенныхНалогов.Колонки.Добавить("НоваяСтавка",                  Новый ОписаниеТипов("Число")); // ставки одинаковые во всех строках
	ПересчетОтложенныхНалогов.Колонки.Добавить("СтараяСтавка",                 Новый ОписаниеТипов("Число"));
	
	ПересчетОтложенныхНалогов.Колонки.Добавить("Реформация",                   Новый ОписаниеТипов("Булево"));
	
	Возврат ПересчетОтложенныхНалогов;
	
КонецФункции

// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

// ДанныеДляЗаписи - см. НовыйПроводкиНалогНаПрибыль()
Процедура СформироватьДвиженияРасчетНалогаНаПрибыль(Движения, ДанныеДляЗаписи, Период, Организация) Экспорт
	
	Счет99 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
	
	Для каждого Запись Из ДанныеДляЗаписи Цикл
		
		Если Запись.Субконто68_4 <> Неопределено Тогда
			Счет68_04   = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
		Иначе
			Счет68_04   = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
		КонецЕсли;
		
		Счет68_04Дебет  = Счет68_04;
		Счет68_04Кредит = Счет68_04;
		
		СуммаНалога     = Запись.СуммаНалога;
		СуммаЕНВД       = Запись.СуммаЕНВД;
		
		Если СуммаЕНВД <> 0 Тогда
			Если ОдногоЗнака(СуммаНалога, СуммаЕНВД) Тогда
				Если БольшеПоМодулюИлиРавно(СуммаНалога, СуммаЕНВД) Тогда
					СуммаНалога = СуммаНалога - СуммаЕНВД;
					Сумма99     = СуммаЕНВД;
					СуммаЕНВД   = 0;
				Иначе
					Сумма99     = СуммаНалога;
					СуммаНалога = 0;
					СуммаЕНВД   = СуммаЕНВД - Сумма99;
				КонецЕсли;
			Иначе
				Если БольшеПоМодулюИлиРавно(СуммаНалога, СуммаЕНВД) Тогда
					СуммаНалога = СуммаНалога + СуммаЕНВД;
					Сумма99     = -СуммаЕНВД;
					СуммаЕНВД   = 0;
				Иначе
					Сумма99     = -СуммаНалога;
					СуммаНалога = 0;
					СуммаЕНВД   = СуммаЕНВД + Сумма99;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Сумма99 = 0;
		КонецЕсли;
		
		Если СуммаНалога <> 0 Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СуммаНалога;
			Проводка.Содержание  = Запись.СодержаниеПроводки;
			
			Если Запись.ПоДебету = "Д" Тогда
				Проводка.СчетДт  = Запись.КоррСчет;
				Проводка.СчетКт  = Счет68_04Кредит;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Субконто);
				
				Если Запись.Субконто68_4 <> Неопределено Тогда
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт, Проводка.СубконтоКт, 2, Запись.Субконто68_4);
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт, Проводка.СубконтоКт, 3, Запись.Субконто68_4_2);
				КонецЕсли;
			Иначе
				Проводка.СчетДт = Счет68_04Дебет;
				Проводка.СчетКт = Запись.КоррСчет;
				
				Если Запись.Субконто68_4 <> Неопределено Тогда
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.Счетдт, Проводка.СубконтоДт, 2, Запись.Субконто68_4);
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетДт, Проводка.СубконтоДт, 3, Запись.Субконто68_4_2);
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Субконто);
			КонецЕсли
		КонецЕсли;
		
		Если Сумма99 <> 0 Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = Сумма99;
			Проводка.Содержание  = Запись.СодержаниеПроводки;
			
			Если Запись.ПоДебету = "Д" Тогда
				Проводка.СчетДт  = Запись.КоррСчет;
				Проводка.СчетКт  = Счет99;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Субконто);
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, 3, Запись.Субконто68_4_2);
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
			Иначе
				Проводка.СчетДт = Счет99;
				Проводка.СчетКт = Запись.КоррСчет;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Субконто);
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, 3, Запись.Субконто68_4_2);
			КонецЕсли
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ОдногоЗнака(Число1, Число2)
	
	Возврат (Число1 * Число2 >= 0);
	
КонецФункции

Функция БольшеПоМодулюИлиРавно(Число1, Число2)
	
	МодульЧисло1 = ?(Число1 > 0, Число1, -Число1);
	МодульЧисло2 = ?(Число2 > 0, Число2, -Число2);
	
	Возврат (МодульЧисло1 - МодульЧисло2 >= 0);
	
КонецФункции

#КонецОбласти

#Область Антикризис

Процедура ОтразитьОсвобождениеОтНалога(Проводки, НачислениеНалога, КонтекстРасчета, ЕстьРаспределениеНалогаНаПрибыль)
	
	ПериодОсвобождения = НалоговыйУчет.ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
	Если КонтекстРасчета.КонецПериода < ПериодОсвобождения.Начало
		Или КонтекстРасчета.КонецПериода > ПериодОсвобождения.Конец Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(КонтекстРасчета.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	
	// Освобождение от налога предоставляется "в части авансовых платежей ... за минусом ранее начисленных сумм авансовых платежей"
	// При этом надо учитывать, что
	// - в частном случае эта разность может быть отрицательной
	// - проводки по начислению налога могут формироваться в течение второго квартала.
	
	ОсвобождениеОтНалога = НачислениеНалога.Скопировать();
	ОсвобождениеОтНалога.ЗаполнитьЗначения(0, "СуммаАвансовыхПлатежей,СуммаПроводки");
	
	// Для ИсключитьАвансовыеПлатежиДоОсвобожденияОтНалога важно, чтобы для налога в федеральный бюджет регистрация не была заполнена.
	// Очистим ее, а потом восстановим обратно
	Для Каждого Запись Из ОсвобождениеОтНалога Цикл
		Если Запись.УровеньБюджета = Перечисления.УровниБюджетов.ФедеральныйБюджет Тогда
			Запись.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	ИсключитьАвансовыеПлатежиДоОсвобожденияОтНалога(
		ОсвобождениеОтНалога,
		ПериодОсвобождения.Начало,
		КонтекстРасчета.Организация,
		ЕстьРаспределениеНалогаНаПрибыль);
		
	Для Каждого Запись Из ОсвобождениеОтНалога Цикл
		Если Запись.УровеньБюджета = Перечисления.УровниБюджетов.ФедеральныйБюджет Тогда
			Запись.РегистрацияВНалоговомОргане = КонтекстРасчета.РегистрацияПоМестуНахожденияОрганизации;
		КонецЕсли;
	КонецЦикла;
	
	// Теперь в СуммаПроводки - сумма освобождения, которая _должна быть_ отражена за этот период.
	// Ее нужно уменьшить на суммы, которые уже отражены - например, при расчете за май
	// нужно вычесть суммы, отраженные в апреле.
	
	СчетФинансовогоРезультатаОсвобождениеОтНалога = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
	
	// Субконто РегистрацияВНалоговомОргане может не использоваться в конфигурации
	СубконтоРегистрацияВНалоговомОргане = Неопределено;
	ВидыСубконто = Новый Массив;
	НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто);
	Если ЗначениеЗаполнено(ВидыСубконто) Тогда
		СубконтоРегистрацияВНалоговомОргане = ВидыСубконто[0];
	КонецЕсли;
	
	СубконтоНачисленияНалога = Новый Массив;
	СубконтоНачисленияНалога.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	СубконтоНачисленияНалога.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	Если СубконтоРегистрацияВНалоговомОргане <> Неопределено Тогда
		СубконтоНачисленияНалога.Добавить(СубконтоРегистрацияВНалоговомОргане);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",             ПериодОсвобождения.Начало);
	Запрос.УстановитьПараметр("КонецПериода",              КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация",               КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("СубконтоНачисленияНалога",  СубконтоНачисленияНалога);
	Запрос.УстановитьПараметр("СчетФинансовогоРезультата", СчетФинансовогоРезультатаОсвобождениеОтНалога);
	Запрос.УстановитьПараметр("ОсновнаяРегистрация",       КонтекстРасчета.РегистрацияПоМестуНахожденияОрганизации);
	// Запрос может быть модифицирован с помощью схемы запроса - заменено выражение для поля РегистрацияВНалоговомОргане
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсвобождениеОтНалога.СубконтоДт2 КАК УровеньБюджета,
	|	&ОсновнаяРегистрация КАК РегистрацияВНалоговомОргане,
	|	СУММА(ОсвобождениеОтНалога.СуммаОборот) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСБюджетом),
	|			&СубконтоНачисленияНалога,
	|			СчетКт = &СчетФинансовогоРезультата,
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)) КАК ОсвобождениеОтНалога
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсвобождениеОтНалога.СубконтоДт2
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОсвобождениеОтНалога.СуммаОборот) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	УровеньБюджета,
	|	РегистрацияВНалоговомОргане";
	
	Если СубконтоРегистрацияВНалоговомОргане <> Неопределено Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0];
		
		КолонкаРегистрацияВНалоговомОргане = ОписаниеЗапроса.Колонки.Найти("РегистрацияВНалоговомОргане");
		ИндексПоля = ОписаниеЗапроса.Колонки.Индекс(КолонкаРегистрацияВНалоговомОргане);
		
		ВыражениеПоля = Новый ВыражениеСхемыЗапроса(
			"ЕСТЬNULL(ВЫБОР
			|	КОГДА ОсвобождениеОтНалога.СубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.РегиональныйБюджет)
			|	ТОГДА ОсвобождениеОтНалога.СубконтоДт3
			|КОНЕЦ, &ОсновнаяРегистрация)");
		
		ОписаниеЗапроса.Операторы[0].ВыбираемыеПоля.Установить(ИндексПоля, ВыражениеПоля);
			
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("УровеньБюджета");
	Отбор.Вставить("РегистрацияВНалоговомОргане");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Освобождение за весь период не может быть отрицательным.
	// Но при перераспределении налога между подразделениями может быть отрицательная сумма по конкретному подразделению.
	// Если проводки по освобождению уже были сформированы, при отсутствии налога к уплате (убытке) их нужно отсторнировать.
	Если ОсвобождениеОтНалога.Итог("СуммаПроводки") <= 0 И РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		Освобождение = ОсвобождениеОтНалога.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(Освобождение) Тогда
			Запись = Освобождение[0];
		Иначе
			Запись = ОсвобождениеОтНалога.Добавить();
			ЗаполнитьЗначенияСвойств(ОсвобождениеОтНалога.Добавить(), Выборка);
		КонецЕсли;
			
		Запись.СуммаПроводки = Запись.СуммаПроводки - Выборка.Сумма;
		
	КонецЦикла;
	
	// Собственно формирование проводок
	СодержаниеПроводки = НалоговыйУчет.ТекстСодержанияПроводкиОсвобождениеПострадавшихОтКоронавируса(КонтекстРасчета.КонецПериода);
	
	Для Каждого Запись Из ОсвобождениеОтНалога Цикл
		
		Если Запись.СуммаПроводки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Проводки.Добавить();
		Проводка.Период      = КонтекстРасчета.КонецПериода;
		Проводка.Организация = КонтекстРасчета.Организация;
		Проводка.Сумма       = Запись.СуммаПроводки;
		Проводка.Содержание  = СодержаниеПроводки;
		
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов,
			Запись.УровеньБюджета);
		Если СубконтоРегистрацияВНалоговомОргане <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт,
				Проводка.СубконтоДт,
				СубконтоРегистрацияВНалоговомОргане,
				Запись.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		Проводка.СчетКт = СчетФинансовогоРезультатаОсвобождениеОтНалога;
		
		Проводки.Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьАвансовыеПлатежиДоОсвобожденияОтНалога(ОсвобождениеОтНалога, НачалоПериодаОсвобождения, Организация, ЕстьРаспределениеНалогаНаПрибыль)
	
	КонтекстРасчета = НовыйКонтекстРасчета(Организация, НачалоПериодаОсвобождения - 1);
	Если КонтекстРасчета = Неопределено Тогда
		// Организация зарегистрирована после начала освобождения, исключать нечего
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьРаспределениеНалогаНаПрибыль Тогда
		
		СоответствиеПрежнихИТекущихНалоговыхОрганов = Неопределено;
		
	Иначе
		
		СоответствиеПрежнихИТекущихНалоговыхОрганов = Новый МенеджерВременныхТаблиц;
		
		РасчетРаспределенияНалоговойБазы = Неопределено;
		НалоговыйУчетОбособленныхПодразделений.ПодготовитьРасчетРаспределенияНалоговойБазы(
			РасчетРаспределенияНалоговойБазы,
			КонтекстРасчета,
			0,
			СоответствиеПрежнихИТекущихНалоговыхОрганов);
			
	КонецЕсли;
	
	ИсключитьРанееНачисленныеАвансы(ОсвобождениеОтНалога, КонтекстРасчета, СоответствиеПрежнихИТекущихНалоговыхОрганов);
	
КонецПроцедуры

#КонецОбласти
