////////////////////////////////////////////////////////////////////////////////
// ИнтеграцияСЯндексКассойСлужебный: механизм интеграции с Яндекс.Кассой.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСПодсистемой

// Возвращает дополнительные настройки Яндекс.Кассы, определенные при внедрении подсистемы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - дополнительные настройки. См. ИнтеграцияСЯндексКассойПереопределяемый.ПриОпределенииДополнительныхНастроекЯндексКассы.
//
Функция ДополнительныеНастройкиЯндексКассы() Экспорт

	ДополнительныеНастройки = Новый ТаблицаЗначений;
	ДополнительныеНастройки.Колонки.Добавить("Настройка");
	ДополнительныеНастройки.Колонки.Добавить("Представление");
	ДополнительныеНастройки.Колонки.Добавить("ТипЗначения");
	
	ИнтеграцияСЯндексКассойПереопределяемый.ПриОпределенииДополнительныхНастроекЯндексКассы(ДополнительныеНастройки);
	
	Возврат ДополнительныеНастройки;
	
КонецФункции

// Возвращает настройки Яндекс.Кассы по основанию платежа
//
// Параметры:
//  ОснованиеПлатежа - Произвольный - основание платежа, настройки которого нужно получить.
//
// Возвращаемое значение:
//  Структура - настройки Яндекс.Кассы:
//   * СДоговором - Булево - признак вида настроек. Истина - с договором, Ложь - без договора.
//   * ИдентификаторМагазина - Число - идентификатор магазина в сервисе Яндекс.Касса.
//   * ИдентификаторВитрины - Число - идентификатор витрины в сервисе Яндекс.Касса.
//   * ОтправкаЧековЧерезЯндекс - Булево - признак отправки чека через Яндекс.Кассу.
//
Функция НастройкаЯндексКассыОснованияПлатежа(Знач ОснованиеПлатежа) Экспорт
	
	Реквизиты = РеквизитыОснованияПлатежа(ОснованиеПлатежа);
	Возврат НастройкаЯндексКассыОрганизации(Реквизиты.Организация);
	
КонецФункции

// Обновляет статус обмена с Яндекс.Кассой для заданной настройки
//
// Параметры:
//  НастройкаЯндексКассы - СправочникСсылка.НастройкиЯндексКассы - настройка, статус которой нужно обновить.
//  Статус - Структура - новый статус обмена:
//   * ДатаПоследнегоУспешногоОбмена - Дата - дата последней загрузки операций по Яндекс.Кассе.
//   * Организация - ОпределяемыйТип.Организации - ссылка на организацию.
//
Процедура УстановитьСтатусОбменаСЯндексКассой(Знач НастройкаЯндексКассы, Знач Статус) Экспорт

	НачатьТранзакцию();
	
	Попытка
		
		Набор = РегистрыСведений.СтатусОбменовСЯндексКассой.СоздатьНаборЗаписей();
		Набор.Отбор.НастройкаЯндексКассы.Установить(НастройкаЯндексКассы);
		
		ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Статус);
		Запись.НастройкаЯндексКассы = НастройкаЯндексКассы;
		
		Набор.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПрикладнымРешением

// Проверяет заполнение обязательных реквизитов организации, в зависимости от варианта 
// с договором или без набор реквизитов меняется.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организации - ссылка на проверяемую организацию.
//  ВариантСДоговором - Булево - Истина - с договором, Ложь - без договора.
//  Отказ - Булево - Истина - обнаружены ошибки, Ложь - ошибок не обнаружено.
//
Процедура ПроверитьОрганизациюНаСоответствиеТребованиямПриПодключенииКСервису(Знач Организация,
																			  Знач ВариантСДоговором,
																			  Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = РеквизитыОрганизации(Организация);
	
	Если Не ЗначенияРеквизитов.Резидент Тогда // Нерезидентов не подключаем.
		ТекстСообщения = НСтр(
			"ru = 'К сервису ЮKassa могут быть подключены только организации резиденты Российской Федерации'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Организация", , Отказ);
		Возврат;
	КонецЕсли;
	
	Если ВариантСДоговором Тогда 
		
		Возврат; // тут проверять нечего, все есть у Яндекса
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ЗначенияРеквизитов.ИНН) Тогда 
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Укажите ИНН организации'"),,
				"Организация",, Отказ);
			
		Иначе
			
			ЭтоЮрЛицо = ЗначенияРеквизитов.ЭтоЮрЛицо;
			
			ТекстСообщения = "";
			Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ЗначенияРеквизитов.ИНН, 
				ЭтоЮрЛицо, 
				ТекстСообщения) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Ошибка проверки ИНН организации. %1'"), ТекстСообщения),,
					"Организация",,Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрДлина(ЗначенияРеквизитов.ИНН) = 10 И Не ЗначениеЗаполнено(ЗначенияРеквизитов.КПП) Тогда 
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Укажите КПП организации'"), , "Организация",,
				Отказ);
			
		ИначеЕсли ЗначениеЗаполнено(ЗначенияРеквизитов.КПП) Тогда
		
			ТекстСообщения = "";
			Если НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(ЗначенияРеквизитов.КПП,
					ТекстСообщения) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Ошибка проверки КПП организации. %1'"), ТекстСообщения),,
					"Организация",,Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Возвращает значения реквизитов организации, полученные из прикладного решения.
// См. ИнтеграцияСЯндексКассойПереопределяемый.ЗаполнитьРеквизитыОрганизации.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, реквизиты которой нужно получить.
//
// Возвращаемое значение:
//  Структура - значения реквизитов:
//   * ИНН - Строка - ИНН организации.
//   * КПП - Строка - КПП организации.
//   * Резидент - Булево - признак того, что организация является резидентом.
//   * ЭтоЮрЛицо - Булево - признак того, что организация является юридическим лицом.
//
Функция РеквизитыОрганизации(Знач Организация) Экспорт

	Данные = Новый Структура;
	Данные.Вставить("ИНН", "");
	Данные.Вставить("КПП", "");
	Данные.Вставить("Резидент", Истина);
	Данные.Вставить("ЭтоЮрЛицо", Истина);
	
	ИнтеграцияСЯндексКассойПереопределяемый.ЗаполнитьРеквизитыОрганизации(Организация, Данные);
	
	Возврат Данные;

КонецФункции

// Возвращает контактную информацию покупателя, указанного в основании платежа.
// См. ИнтеграцияСЯндексКассойПереопределяемый.ЗаполнитьКонтактнуюИнформациюОснованияПлатежа.
//
// Параметры:
//  ОснованиеПлатежа - Произвольный - основание платежа, контактную информацию которого нужно заполнить.
//
// Возвращаемое значение:
//  Структура - контакты покупателя для отправки чека:
//   * Телефоны - Массив строк - телефоны покупателя.
//   * ЭлектроннаяПочта - Массив строк - адреса электронной почты покупателя.
//
Функция КонтактнаяИнформацияОснованияПлатежа(Знач ОснованиеПлатежа) Экспорт
	
	КонтактнаяИнформация = Новый Структура();
	КонтактнаяИнформация.Вставить("Телефоны", Новый Массив);
	КонтактнаяИнформация.Вставить("ЭлектроннаяПочта", Новый Массив);
	
	ИнтеграцияСЯндексКассойПереопределяемый.ЗаполнитьКонтактнуюИнформациюОснованияПлатежа(ОснованиеПлатежа, КонтактнаяИнформация);
	
	Возврат КонтактнаяИнформация;
	
КонецФункции

// Возвращает полные имена объектов метаданных, которые могут выступать в качестве оснований платежа через Яндекс.Кассу.
//
// Возвращаемое значение:
//  Массив - имена (Строка) объектов метаданных оснований платежа.
//
Функция ОснованияПлатежа() Экспорт
	
	ИменаОснованийПлатежа = Новый Массив;
	ИнтеграцияСЯндексКассойПереопределяемый.ПриОпределенииОснованийПлатежа(ИменаОснованийПлатежа);
	
	Возврат ИменаОснованийПлатежа;
	
КонецФункции

// Проверяет является ли объект основанием платежа через Яндекс.Кассу.
//
// Параметры:
//  Объект - ЛюбаяСсылка, Строка - ссылка на объект или полное имя объекта метаданных для проверки.
//
// Возвращаемое значение:
//  Булево - Истина, если объект является основанием платежа, иначе Ложь.
//
Функция ЭтоОснованиеПлатежа(Знач Объект) Экспорт
	
	ПолноеИмя = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("Строка") Тогда
		
		ПолноеИмя = Объект;
		
	Иначе
		
		МетаданныеОбъекта = Объект.Метаданные();
		ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолноеИмя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаОснованийПлатежа = ОснованияПлатежа();
	
	Возврат (ИменаОснованийПлатежа.Найти(ПолноеИмя) <> Неопределено);
	
КонецФункции

#КонецОбласти

#Область РаботаССервисом

Функция ЕстьДоступКЯндексКассе(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ВызватьИсключение НСтр("ru = 'Не передана организация'");
	КонецЕсли;
	
	НастройкаЯндексКассы = НастройкаЯндексКассыОрганизации(Организация);
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(НастройкаЯндексКассы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаЯндексКассы.ИдентификаторМагазина)
		И ЗначениеЗаполнено(НастройкаЯндексКассы.ИдентификаторВитрины) Тогда
		
		Результат = Истина;
		
	Иначе
		
		ПараметрыПолученияСтатуса = ОписаниеПараметровПолученияСтатусаПодключенияМагазина();
		
		ПараметрыПолученияСтатуса.ИдентификаторМагазина = НастройкаЯндексКассы.ИдентификаторМагазина;
		
		РезультатПроверкиСтатуса = СтатусПодключенияМагазина(ПараметрыПолученияСтатуса);
		
		Если РезультатПроверкиСтатуса.СтатусПодключения = СтатусыПодключенияМагазина().Разрешено Тогда
			Результат = Истина;
		ИначеЕсли РезультатПроверкиСтатуса.СтатусПодключения = СтатусыПодключенияМагазина().Запрещено Тогда	
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак изменения основания платежа с момента последнего обновления данных в сервисе.
//
// Параметры:
//  ВходящиеПараметры - Структура - параметры метода:
//   * ОснованиеПлатежа - Произвольный - основание платежа, изменение которого нужно проверить.
//   * ДанныеОснованияПлатежа - Структура - данные основания платежа, полученные из прикладного решения. Если не заданы, то будет запрошены. См. ИнтеграцияСЯндексКассойСлужебный.ДанныеОснованияПлатежа.
//   * ДанныеОснованияПлатежаВСервисе - Структура - данные основания платежа, полученные из сервиса. Если не заданы, то будет запрошены. См. ИнтеграцияСЯндексКассойСлужебный.ДанныеОснованияПлатежаВСервисе.
//
// Возвращаемое значение:
//  Булево - Ложь - основание платежа не изменено, Истина - основание платежа изменено.
//
Функция ОснованиеПлатежаИзменено(Знач ВходящиеПараметры) Экспорт

	ДанныеОснованияПлатежа = Неопределено;
	ДанныеОснованияПлатежаВСервисе = Неопределено;
	
	Если Не ВходящиеПараметры.Свойство("ДанныеОснованияПлатежа", ДанныеОснованияПлатежа) Тогда
		ДанныеОснованияПлатежа = ДанныеОснованияПлатежа(ВходящиеПараметры.ОснованиеПлатежа);
	КонецЕсли;
	Если Не ВходящиеПараметры.Свойство("ДанныеОснованияПлатежаВСервисе", ДанныеОснованияПлатежаВСервисе) Тогда
		ДанныеОснованияПлатежаВСервисе = ДанныеОснованияПлатежаВСервисе(ВходящиеПараметры);
	КонецЕсли;
	
	ДанныеОснованияПлатежаДляСервиса = ДанныеОснованияПлатежаДляСервиса(ДанныеОснованияПлатежа);
	
	Возврат ДанныеОснованияПлатежаДляСервиса.checksum <> ДанныеОснованияПлатежаВСервисе.ХешСумма;
	
КонецФункции

// Обновляет данные основания платежа в сервисе и возвращает ссылку на страницу оплаты.
//
// Параметры:
//  ВходящиеПараметры - Структура - параметры метода:
//   * ОснованиеПлатежа - Произвольный - основание платежа, для которого нужно получить ссылку на оплату.
//   * КонтактныеДанныеЧека - Строка - контакты покупателя для отправки чека (Необязательный).
//
// Возвращаемое значение:
//  Структура - содержит свойства:
//   * ПлатежнаяСсылка   - Строка - ссылка на страницу оплаты.
//   * ОтсутствуетДоступ - Булево - признак отсутствия доступа к Яндекс.Кассе у организации, для которой формируется платежная ссылка. 
//                                  Если значение Истина, пользователю необходимо выдать доступ к
//                                  Яндекс.Кассе, перейдя на страницу по адресу ИнтеграцияСЯндексКассой.АдресСтраницыПредоставленияДоступа().
//
Функция ПлатежнаяСсылка(Знач ВходящиеПараметры) Экспорт 
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "ИнтеграцияСЯндексКассой.ФормированиеПлатежнойСсылки";
	
	// Инициализация команды	
	
	ИмяКоманды = "ОбновитьДанныеЗаказа";
	
	// Инициализация выходных данных
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПлатежнаяСсылка",   "");
	Результат.Вставить("ОтсутствуетДоступ", Ложь);
	
	// Параметры выполнения команды
	
	Отказ = Ложь;
	
	ПараметрыСервиса = ПараметрыСервиса(ИмяКоманды, Отказ);
	ПараметрыЯндексКассы = ПараметрыЯндексКассы(ИмяКоманды, ВходящиеПараметры, Отказ);
	ПараметрыКоманды = ПараметрыКоманды_ОбновитьДанныеЗаказа(ПараметрыСервиса, ПараметрыЯндексКассы, ВходящиеПараметры, Отказ);
	
	Если Отказ Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		Возврат Результат;
	КонецЕсли;
	
	// Выполнение команды
	
	ИспользоватьНовыйПротокол = ПараметрыЯндексКассы.ИспользоватьНовыйПротокол;
	
	РезультатКоманды = Неопределено;
	ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, ИспользоватьНовыйПротокол, РезультатКоманды, Отказ);
	
	Если РезультатКоманды.ОтсутствуетДоступ Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		Результат.ОтсутствуетДоступ = Истина;
		Возврат Результат;
	КонецЕсли;
		
	РезультатРазбора = Неопределено;
	РазобратьДанныеСервиса(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ);
	
	ВывестиОшибкиПользователю();
	
	Если Отказ Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		Возврат Результат;
	КонецЕсли;
	
	// Определение результатов
	
	Результат.ПлатежнаяСсылка   = РезультатРазбора.ДанныеXDTO.OrderURL;
	Результат.ОтсутствуетДоступ = РезультатКоманды.ОтсутствуетДоступ;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Возвращает операции по Яндекс.Кассе по отбору.
//
// Параметры:
//  ВходящиеПараметры - Структура - параметры метода:
//   * ДатаНачала - Дата - начало периода запроса операций.
//   * ДатаОкончания - Дата - окончание периода запроса операций.
//   * Организация - ОпределяемыйТип.Организация, Неопределено - организация, по которой нужно получить операции. Если Неопределено, то по всем.
//   * СДоговором - Булево, Неопределено - признак отбора по операциям с договором и без. 
//                                         Если Неопределено, то по всем. Если задано свойство Организация, то игнорируется.
//
// Возвращаемое значение:
//  Массив структур - см. ИнтеграцияСЯндексКассой.ОперацииПоЯндексКассе.
//
Функция ОперацииПоЯндексКассе(Знач ВходящиеПараметры) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "ИнтеграцияСЯндексКассой.ПолучениеОперацийПоЯндексКассе";
	КоличествоПовторяющихсяДанных = 0;
	
	// Инициализация команды
	
	ИмяКоманды = "ЗагрузитьОперацииПоЯндексКассе";
	
	// Инициализация выходных данных
	
	Результат = Новый Массив;
	
	// Параметры выполнения команды
	
	Отказ = Ложь;
	
	ПараметрыСервиса = ПараметрыСервиса(ИмяКоманды, Отказ);
	Если Отказ Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, КоличествоПовторяющихсяДанных);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыПолученияОпераций = ПараметрыПолученияОперацийПоЯндексКассе(ВходящиеПараметры);
	
	Если ПараметрыПолученияОпераций.Количество() = 0 Тогда
		ОтработатьОшибкуОтсутствияНастроек(ВходящиеПараметры, ИмяКоманды, Отказ);
	КонецЕсли;
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Для каждого ПараметрыПолучения Из ПараметрыПолученияОпераций Цикл
		
		КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных + 1;
		
		Отказ = Ложь;
		
		ПараметрыЯндексКассы = ПараметрыЯндексКассы(ИмяКоманды, ПараметрыПолучения, Отказ);
		
		Если РазделениеВключено Тогда
			ДанныеАутентификации = ДанныеАутентификацииИПП();
	
			Если ДанныеАутентификации = Неопределено Тогда
				ПараметрыСообщения = Новый Структура;
				ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
				ОбработатьОшибку("НеВключенаИПП", ПараметрыСообщения, Отказ);
			Иначе
				ПараметрыСервиса.ДанныеАутентификации = СтрокаАутентификации(ДанныеАутентификации);
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыКоманды = ПараметрыКоманды_ОперацииПоЯндексКассе(ПараметрыСервиса, ПараметрыЯндексКассы, ПараметрыПолучения, Отказ);
		
		Если Отказ Тогда 
			Продолжить;
		КонецЕсли;
		
		Операции = Новый Структура();
		
		Операции.Вставить("ДатаОтвета",              Дата(1,1,1));
		Операции.Вставить("ДатаНачала",              ПараметрыКоманды.ДатаНачала);
		Операции.Вставить("ДатаОкончания",           ПараметрыКоманды.ДатаОкончания);
		Операции.Вставить("Организация",             ПараметрыКоманды.Организация);
		Операции.Вставить("НастройкаЯндексКассы",    ПараметрыКоманды.НастройкаЯндексКассы);
		Операции.Вставить("СДоговором",              ПараметрыПолучения.СДоговором);
		Операции.Вставить("ОперацииМассивСтруктур",  Новый Массив);
		Операции.Вставить("ОперацииТекстовыйФормат", "");
		Операции.Вставить("ОтсутствуетДоступ",       Ложь);
		
		// Выполнение команды
		
		Отказ = Ложь;
		
		ИспользоватьНовыйПротокол = ПараметрыЯндексКассы.ИспользоватьНовыйПротокол;
		
		РезультатКоманды = Неопределено;
		ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, ИспользоватьНовыйПротокол, РезультатКоманды, Отказ);
		
		Если РезультатКоманды.ОтсутствуетДоступ Тогда
			Операции.ОтсутствуетДоступ = Истина;
			Продолжить;
		КонецЕсли;
		
		РезультатРазбора = Неопределено;
		РазобратьДанныеСервиса(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ);
		
		Если Отказ Тогда 
			Продолжить;
		КонецЕсли;
		
		// Обновление настроек
		
		Если РезультатРазбора.Свойство("Настройки")
			И РезультатРазбора.Настройки.Количество() Тогда 
				
			Если Не ПараметрыПолучения.ИдентификаторМагазина = РезультатРазбора.Настройки.ИдентификаторМагазина
				Или ПараметрыПолучения.ИдентификаторВитрины = РезультатРазбора.Настройки.ИдентификаторВитрины Тогда 
				
				ОбновитьНастройкуЯндексКассы(ПараметрыКоманды.НастройкаЯндексКассы, РезультатРазбора.Настройки, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отказ Тогда 
			Продолжить;
		КонецЕсли;
		
		// Обработка результатов
		
		ОперацииТекстовыйФормат = ОперацииВТекстовомФормате(РезультатРазбора.МассивОпераций, ПараметрыКоманды);
		
		Операции.ДатаОтвета              = РезультатРазбора.ДатаОтвета;
		Операции.ОперацииМассивСтруктур  = РезультатРазбора.МассивОпераций;
		Операции.ОперацииТекстовыйФормат = ОперацииТекстовыйФормат;
		
		Результат.Добавить(Операции);
		
	КонецЦикла;
	
	ВывестиОшибкиПользователю();
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, КоличествоПовторяющихсяДанных);
	
	Возврат Результат;

КонецФункции

Функция СтатусыПодключенияМагазина() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Разрешено", "Разрешено");
	Результат.Вставить("Запрещено", "Запрещено");
	Результат.Вставить("Отказано",  "Отказано");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаССервисомВФоне

// Запускает выполнение метода сервиса в фоновом режиме.
// Доступны методы: ДанныеОснованияПлатежаВСервисе, ПлатежнаяСсылка, ПолучитьНастройки (НастройкиЯндексКассыБезДоговора).
// См. ИнтеграцияСЯндексКассойСлужебный.МетодСервисаВФоне.
//
// Параметры:
//  ИмяМетода - Строка - имя метода для запуска в фоновом режиме.
//  ВходящиеПараметры - Структура - входящие параметры соответствующего метода.
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, во временное хранилище которой будет помещен результат метода.
//
// Возвращаемое значение:
//  Структура - описание длительной операции. См. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ВыполнитьМетодСервисаВФоне(Знач ИмяМетода, Знач ВходящиеПараметры, Знач ИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	
	Если ИмяМетода = "ДанныеОснованияПлатежаВСервисе" Тогда
		
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных основания платежа в сервисе ЮKassa.'");
		
	ИначеЕсли ИмяМетода = "ПлатежнаяСсылка" Тогда
		
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение ссылки для оплаты через ЮKassa.'");
		
	ИначеЕсли ИмяМетода = "ПолучитьНастройки" Тогда
		
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение настроек по ЮKassa.'");
		
	ИначеЕсли ИмяМетода = "СтатусПодключенияМагазина" Тогда
		
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение статуса разрешения на использование сервиса.'");
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяМетода", ИмяМетода);
	Параметры.Вставить("ВходящиеПараметры", ВходящиеПараметры);
	
	ИмяМетодаОбщий = "ИнтеграцияСЯндексКассойСлужебный.МетодСервисаВФоне";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяМетодаОбщий, Параметры, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Помещает результат метода сервиса во временное хранилище.
// См. ИнтеграцияСЯндексКассойСлужебный.ВыполнитьМетодСервисаВФоне.
//
// Параметры:
//  Параметры - Структура - параметры метода:
//   * ИмяМетода - Строка - имя метода.
//   * ВходящиеПараметры - Структура - входящие параметры соответствующего метода.
//  АдресРезультата - адрес во временном хранилище, куда будет помещен результат метода.
//
Процедура МетодСервисаВФоне(Знач Параметры, АдресРезультата) Экспорт
	
	Результат = Неопределено;
	
	Если Параметры.ИмяМетода = "ДанныеОснованияПлатежаВСервисе" Тогда
		
		Результат = ДанныеОснованияПлатежаВСервисе(Параметры.ВходящиеПараметры);
		
	ИначеЕсли Параметры.ИмяМетода = "ПлатежнаяСсылка" Тогда
		
		Результат = ПлатежнаяСсылка(Параметры.ВходящиеПараметры);
		
	ИначеЕсли Параметры.ИмяМетода = "ПолучитьНастройки" Тогда
		
		Результат = НастройкиЯндексКассыБезДоговора();
		
	ИначеЕсли Параметры.ИмяМетода = "СтатусПодключенияМагазина" Тогда
		
		Результат = СтатусПодключенияМагазина(Параметры.ВходящиеПараметры);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// Обработчик регламентного задания ПолучениеУведомленийОтЯндексКассы
//
Процедура ПолучениеУведомленийОтЯндексКассыОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПолучениеУведомленийОтЯндексКассы);
	
	ИнтеграцияСЯндексКассой.ЗагрузитьОперацииПоЯндексКассе();
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

Функция НастройкиШаблоновСообщений() Экспорт
	
	Настройки = Новый Структура;
	
	ЕстьШаблоныСообщений = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений");
	ИспользуютсяШаблоныСообщений = Ложь;
	Если ЕстьШаблоныСообщений Тогда
		МодульШаблоныСообщенийСлужебный = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщенийСлужебный");
		ИспользуютсяШаблоныСообщений = МодульШаблоныСообщенийСлужебный.ИспользуютсяШаблоныСообщений();
	КонецЕсли;
	
	Настройки.Вставить("Существует", ЕстьШаблоныСообщений);
	Настройки.Вставить("Используется", ИспользуютсяШаблоныСообщений);
	
	Возврат Настройки;
	
КонецФункции

Функция СоздатьПредопределенныеШаблоныСообщений() Экспорт
	
	МассивСозданныхШаблонов = Новый Массив;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Возврат МассивСозданныхШаблонов;
	КонецЕсли;
	
	МодульШаблоныСообщений = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщений");
	
	ПредопределенныеШаблоныСообщений = Новый Массив;
	ПредопределенныеШаблоныСообщений(ПредопределенныеШаблоныСообщений);
	
	Если Не ПредопределенныеШаблоныСообщений.Количество() Тогда 
		Возврат МассивСозданныхШаблонов;
	КонецЕсли;
	
	СоответствиеШаблоновОснованиямПлатежа = ШаблоныСообщенийОснованийПлатежа();
	
	Для Каждого Шаблон Из ПредопределенныеШаблоныСообщений Цикл 
		
		ШаблонСообщенийСсылка = НайтиПредопределенныйШаблонСообщений(Шаблон,
			СоответствиеШаблоновОснованиямПлатежа);
		
		Если ШаблонСообщенийСсылка.Пустая() Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Шаблон.ПолноеИмяТипаНазначения);
			Если ОбъектМетаданных = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда 
				Продолжить;
			КонецЕсли;
			
			ПараметрыШаблона = МодульШаблоныСообщений.ОписаниеПараметровШаблона();
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыШаблона, Шаблон, Истина);
			
			ПараметрыШаблона.Вставить("ПредназначенДляВводаНаОсновании", Истина);
			ПараметрыШаблона.Вставить("ПредназначенДляЭлектронныхПисем", Истина);
			ПараметрыШаблона.Вставить("ФорматПисьма",
				ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML"));
			
			ШаблонСообщенийСсылка = МодульШаблоныСообщений.СоздатьШаблон(Шаблон.Наименование, ПараметрыШаблона);
			
			МассивСозданныхШаблонов.Добавить(ШаблонСообщенийСсылка);
			
		КонецЕсли;
		
		СоответствиеШаблоновОснованиямПлатежа.Вставить(Шаблон.ПолноеИмяТипаНазначения,
			ШаблонСообщенийСсылка.УникальныйИдентификатор());
		
		
	КонецЦикла;
	
	УстановитьСоответствиеШаблоновОснованиямПлатежа(СоответствиеШаблоновОснованиямПлатежа);
	
	Возврат МассивСозданныхШаблонов;
	
КонецФункции

Функция ВсеШаблоныСозданы() Экспорт 
	
	СоответствиеШаблонов = ШаблоныСообщенийОснованийПлатежа();
	
	ПредопределенныеШаблоныСообщений = Новый Массив;
	ПредопределенныеШаблоныСообщений(ПредопределенныеШаблоныСообщений);
	
	Если Не СоответствиеШаблонов.Количество() = ПредопределенныеШаблоныСообщений.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Шаблон Из ПредопределенныеШаблоныСообщений Цикл 
		
		ПолноеИмяТипаОснованияПлатежа = Шаблон.ПолноеИмяТипаНазначения;
		
		ДанныеШаблона = Новый Структура("ПолноеИмяТипаНазначения", ПолноеИмяТипаОснованияПлатежа);
		
		Если НайтиПредопределенныйШаблонСообщений(ДанныеШаблона, СоответствиеШаблонов).Пустая() Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УИП

Функция ПолучитьУникальныйИдентификаторПлатежаСКонтрольнымРазрядом(Код, Сдвиг = Неопределено) Экспорт 
	
	Если Сдвиг = Неопределено Тогда
		Сдвиг = 0;
	КонецЕсли;
	
	СтруктураСоответствий = СтруктураСоответствийБуквИЦифр();
	
	СтрокаЦифр = "0123456789";
	ВесРазряда = 1 + Сдвиг;
	Результат = 0;
	// Замена служебных символов в коде.
	СтрокаБукв = "АБВГДЕЖЗИКЛМНОПРСТУФХЦЧШЩЭЮЯЪЫЬABCDEFGHIJKLMNOPQRSTUVWXYZ";
	НовыйКод = "";
	Для Счетчик = 1 По СтрДлина(Код) Цикл
		СимволКода = ВРЕГ(Сред(Код, Счетчик, 1));
		Если СтрНайти(СтрокаЦифр, СимволКода) = 0 И Не СтруктураСоответствий.Свойство(СимволКода) Тогда
			НовыйКод = НовыйКод + "0";
		Иначе
			НовыйКод = НовыйКод + СимволКода;
		КонецЕсли;
	КонецЦикла;
	Код = НовыйКод;
	// Конец замены.
	Если СтрДлина(Код)<19 Тогда
		СтрокаКода = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Код, 19, "0", "Справа");
	Иначе
		СтрокаКода = Лев(Код, 19);
	КонецЕсли;
	
	Для Счетчик = 1 По 19 Цикл 
		СимволКода = Сред(СтрокаКода, Счетчик, 1);
		Если СтрНайти(СтрокаЦифр,СимволКода) > 0 Тогда
			Значение = Число(СимволКода);
		ИначеЕсли СтруктураСоответствий.Свойство(ВРег(СимволКода)) Тогда
			Значение = СтруктураСоответствий[СимволКода] % 10;
		КонецЕсли;		
		Результат = Результат + ВесРазряда*Значение;
		
		ВесРазряда = ВесРазряда + 1;
		Если ВесРазряда = 11 Тогда
			ВесРазряда = 1;
		КонецЕсли;
	КонецЦикла;
	
	КонтрольныйРазряд = Результат % 11;
	
	Если КонтрольныйРазряд = 10 Тогда
		Если Сдвиг = 0 Тогда
			Возврат ПолучитьУникальныйИдентификаторПлатежаСКонтрольнымРазрядом(Код, 2);
		Иначе
			КонтрольныйРазряд = 0;
		КонецЕсли;
	КонецЕсли;
	
	ПолныйКод = СтрокаКода + Строка(КонтрольныйРазряд);
	
	Возврат ПолныйКод;
	
КонецФункции

#КонецОбласти

#Область ПрофилиБезопасности

// СтандартныеПодсистемы.ПрофилиБезопасности
// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Разрешения = Новый Массив;
	
	// Сервис уведомлений.
	
	ПараметрыСоединения = ОбщиеНастройкиСервиса();
	
	СервисУведомлений = ПараметрыСоединения.СервисУведомлений;
	
	Протокол = ?(СервисУведомлений.ЗащищенноеСоединение = Истина, "HTTPS", "HTTP");
	Адрес    = СервисУведомлений.ИмяСервера;
	Порт     = СервисУведомлений.Порт;
	Описание = НСтр("ru = 'Интеграция с ЮKassa: Заказы.'");
			
	Разрешения.Добавить(
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
		
	// Сервис оплаты.	
		
	СервисОплаты = ПараметрыСоединения.СервисОплаты;
	
	Протокол = ?(СервисОплаты.ЗащищенноеСоединение = Истина, "HTTPS", "HTTP");
	Адрес    = СервисОплаты.ИмяСервера;
	Порт     = СервисОплаты.Порт;
	Описание = НСтр("ru = 'Интеграция с ЮKassa: Оплаты.'");
				
	Разрешения.Добавить(
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	
	// Заполнение разрешений	
		
	ВладелецРазрешения = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Справочники.НастройкиЯндексКассы.ПолноеИмя());
	
	ЗапросРазрешений = РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения, ВладелецРазрешения, Истина);
	
	ЗапросыРазрешений.Добавить(ЗапросРазрешений);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПрофилиБезопасности

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСПодсистемой

// Возвращает настройки Яндекс.Кассы организации
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, настройки которой нужно получить.
//
// Возвращаемое значение:
//  Структура - настройки Яндекс.Кассы:
//   * Ссылка - СправочникСсылка.НастройкиЯндексКассы - ссылка на настройку.
//   * СДоговором - Булево - признак вида настроек. Истина - с договором, Ложь - без договора.
//   * ИдентификаторМагазина - Число - идентификатор магазина в сервисе Яндекс.Касса.
//   * ИдентификаторВитрины - Число - идентификатор витрины в сервисе Яндекс.Касса.
//   * ОтправкаЧековЧерезЯндекс - Булево - признак отправки чека через Яндекс.Кассу.
//
Функция НастройкаЯндексКассыОрганизации(Знач Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НастройкиЯндексКассы.Ссылка КАК Ссылка,
	|	НастройкиЯндексКассы.СДоговором КАК СДоговором,
	|	НастройкиЯндексКассы.ИдентификаторМагазина КАК ИдентификаторМагазина,
	|	НастройкиЯндексКассы.ИдентификаторВитрины КАК ИдентификаторВитрины,
	|	НастройкиЯндексКассы.ОтправкаЧековЧерезЯндекс КАК ОтправкаЧековЧерезЯндекс
	|ИЗ
	|	Справочник.НастройкиЯндексКассы КАК НастройкиЯндексКассы
	|ГДЕ
	|	НастройкиЯндексКассы.Организация = &Организация
	|	И НЕ НастройкиЯндексКассы.Недействительна
	|	И НЕ НастройкиЯндексКассы.ПометкаУдаления";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Настройки = Новый Структура;
	Настройки.Вставить("Ссылка");
	Настройки.Вставить("СДоговором");
	Настройки.Вставить("ИдентификаторМагазина");
	Настройки.Вставить("ИдентификаторВитрины");
	Настройки.Вставить("ОтправкаЧековЧерезЯндекс");
	
	ЗаполнитьЗначенияСвойств(Настройки, Выборка);
	
	Возврат Настройки;
	
КонецФункции

Функция НайтиВалюту(КодВалютыЯндекса)
	
	Если КодВалютыЯндекса = 10643 ИЛИ КодВалютыЯндекса = Неопределено Тогда // тестовая валюта (демо-рубли в демо-сервисе Яндекс.Денег).
		Возврат Справочники.Валюты.НайтиПоКоду("643"); //Рубль.
	Иначе
		Возврат Справочники.Валюты.НайтиПоКоду(КодВалютыЯндекса);
	КонецЕсли;

КонецФункции

Функция АналитикиУчетаОпераций(НастройкаЯндексКассы)
	
	ДополнительныеНастройки = ДополнительныеНастройкиЯндексКассы();

	АналитикиУчетаОпераций = Новый Структура;
	
	Для каждого СтрокаНастроек Из ДополнительныеНастройки Цикл
		АналитикиУчетаОпераций.Вставить(СтрокаНастроек.Настройка, СтрокаНастроек.ТипЗначения.ПривестиЗначение());
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаЯндексКассы", НастройкаЯндексКассы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеНастройки.Настройка КАК Настройка,
	|	ДополнительныеНастройки.Значение КАК Значение
	|ИЗ
	|	Справочник.НастройкиЯндексКассы.ДополнительныеНастройки КАК ДополнительныеНастройки
	|ГДЕ
	|	ДополнительныеНастройки.Ссылка = &НастройкаЯндексКассы";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат АналитикиУчетаОпераций;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		АналитикиУчетаОпераций.Вставить(Выборка.Настройка, Выборка.Значение);
	КонецЦикла;
	
	Возврат АналитикиУчетаОпераций;
	
КонецФункции

Процедура ОбновитьНастройкуЯндексКассы(НастройкаСсылка, Параметры, Отказ)
	
	Если Не ЕстьПравоИзмененияНастроек() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();

	Попытка
		
		ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоСсылке(НастройкаСсылка);
		
		НастройкаОбъект = НастройкаСсылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НастройкаОбъект, Параметры);
		НастройкаОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
				
		ОтменитьТранзакцию();
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", "ЗагрузитьОперацииПоЯндексКассе");
		ПараметрыСообщения.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбработатьОшибку("ОшибкаОбновленияНастройкиПриЗагрузкеОпераций", ПараметрыСообщения, Отказ); 

	КонецПопытки;
		
КонецПроцедуры

Функция ЕстьПравоИзмененияНастроек() Экспорт
	
	Результат = ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиЯндексКассы);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСПрикладнымРешением

// Возвращает имена реквизитов основания платежа, соответствующие общепринятым.
//
// Параметры:
//  ОснованиеПлатежа - Ссылка - основание платежа, для которого нужно получить имена реквизитов.
//
// Возвращаемое значение:
//  Структура - имена реквизитов прикладного решения, соответствующие общепринятым:
//   * Ключ - Строка - имя общепринятого реквизита.
//   * Значение - Строка - имя реквизита в прикладном решении.
//
Функция ИменаРеквизитовОснованияПлатежа(Знач ОснованиеПлатежа)
	
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("Организация", "Организация");
	
	СоответствиеРеквизитов = Новый Соответствие;
	ИнтеграцияСЯндексКассойПереопределяемый.СоответствиеРеквизитовОснованийПлатежа(СоответствиеРеквизитов);
	
	ПолноеИмя = ОснованиеПлатежа.Метаданные().ПолноеИмя();
	
	Для каждого Имя Из ИменаРеквизитов Цикл
		
		ОбщепринятоеИмяРеквизита = Имя.Ключ;
		ИмяРеквизитаВПрикладномРешении = СоответствиеРеквизитов[ПолноеИмя + "." + ОбщепринятоеИмяРеквизита];
		
		Если ЗначениеЗаполнено(ИмяРеквизитаВПрикладномРешении) Тогда
			Имя.Значение = ИмяРеквизитаВПрикладномРешении;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает значения реквизитов основания платежа, полученные из прикладного решения.
//
// Параметры:
//  ОснованиеПлатежа - Произвольный - основание платежа, значения реквизитов которого нужно получить.
//
// Возвращаемое значение:
//  Структура - значения реквизитов:
//   * Организация - ОпределяемыйТип.Организация - организация основания платежа.
Функция РеквизитыОснованияПлатежа(Знач ОснованиеПлатежа)
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Организация");
	
	ИменаРеквизитов = ИменаРеквизитовОснованияПлатежа(ОснованиеПлатежа);
	
	Реквизиты.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, ИменаРеквизитов.Организация);
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область РаботаССервисом

// Настройки

Функция ОбщиеНастройкиСервиса()

	ОбщиеНастройки = Новый Структура();
	
	// Сервис который дает информацию об операциях по Яндекс.Кассе.
	СервисУведомлений = Новый Структура("Адрес, Протокол, ИмяСервера, Порт, Таймаут, ВерсияФормата, ЗащищенноеСоединение");
	
	СервисУведомлений.Адрес = ХостСервисаИнтеграцииСЯндексКассой();
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СервисУведомлений.Адрес);
	СервисУведомлений.Протокол		= СтруктураURI.Схема;
	СервисУведомлений.ИмяСервера	= СтруктураURI.Хост;
	СервисУведомлений.Порт			= СтруктураURI.Порт;
	СервисУведомлений.Таймаут		= 20;
	СервисУведомлений.ВерсияФормата = "1.0.0";
	СервисУведомлений.ЗащищенноеСоединение = СервисУведомлений.Протокол = "https";
	
	ОбщиеНастройки.Вставить("СервисУведомлений", СервисУведомлений);
	
	// Сервис который отвечает за отображение страницы оплаты через Яндекс.Кассу в браузере.
	СервисОплаты = Новый Структура("Адрес, Протокол, ИмяСервера, Порт, ПутьНаСервере, Таймаут, ЗащищенноеСоединение");
	
	СервисОплаты.Адрес = "https://money.yandex.ru/eshop.xml";
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СервисОплаты.Адрес);
	СервисОплаты.Протокол			= СтруктураURI.Схема;	
	СервисОплаты.ИмяСервера 		= СтруктураURI.Хост; 
	СервисОплаты.Порт 				= СтруктураURI.Порт;
	СервисОплаты.ПутьНаСервере		= СтруктураURI.ПутьНаСервере;
	СервисОплаты.Таймаут			= 20;
	СервисОплаты.ЗащищенноеСоединение = СервисОплаты.Протокол = "https";
	
	ОбщиеНастройки.Вставить("СервисОплаты", СервисОплаты);
	
	Возврат ОбщиеНастройки;

КонецФункции

Функция НастройкиСервиса()

	ПараметрыСоединения = Новый Структура("Протокол, ИмяСервера, Порт, Прокси,
		|ЗащищенноеСоединение, Таймаут, ВерсияФормата");
	
	ЗаполнитьЗначенияСвойств(
		ПараметрыСоединения, 
		ОбщиеНастройкиСервиса().СервисУведомлений);
		
	ПараметрыСоединения.Прокси = ЭлектронноеВзаимодействиеСлужебный.СформироватьПрокси(ПараметрыСоединения.Протокол);
	
	Возврат ПараметрыСоединения;

КонецФункции

// Данные

Функция ДанныеОснованияПлатежа(Знач ОснованиеПлатежа)
	
	БанковскийСчет = Новый Структура;
	
	БанковскийСчет.Вставить("БанкБИК");
	БанковскийСчет.Вставить("БанкНаименование");
	БанковскийСчет.Вставить("БанкКоррСчет");
	БанковскийСчет.Вставить("НомерСчета");
	
	Продавец = Новый Структура;
	
	Продавец.Вставить("УчетнаяПолитика");
	Продавец.Вставить("ИНН");
	Продавец.Вставить("КПП");
	Продавец.Вставить("Наименование");
	Продавец.Вставить("Телефон");
	Продавец.Вставить("ЭлектроннаяПочта");
	Продавец.Вставить("ФактическийАдрес");
	Продавец.Вставить("ЮридическийАдрес");
	
	Покупатель = Новый Структура;
	
	Покупатель.Вставить("Идентификатор",        "");
	Покупатель.Вставить("Наименование",         "");
	Покупатель.Вставить("КонтактныеДанныеЧека", "");
	Покупатель.Вставить("ИНН",                  "");
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	ТаблицаНоменклатуры.Колонки.Добавить("НомерСтроки");
	ТаблицаНоменклатуры.Колонки.Добавить("Наименование");
	ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеПолное");
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика");
	ТаблицаНоменклатуры.Колонки.Добавить("Количество");
	ТаблицаНоменклатуры.Колонки.Добавить("Цена");
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС");
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДСКод");
	ТаблицаНоменклатуры.Колонки.Добавить("Валюта");
	ТаблицаНоменклатуры.Колонки.Добавить("Артикул");
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаНоменклатуры.Колонки.Добавить("ВидНоменклатуры");
	ТаблицаНоменклатуры.Колонки.Добавить("Родитель");
	ТаблицаНоменклатуры.Колонки.Добавить("Сумма");
	ТаблицаНоменклатуры.Колонки.Добавить("ПредметРасчета");
	ТаблицаНоменклатуры.Колонки.Добавить("КодТовара",                    Новый ОписаниеТипов("Строка"));
	ТаблицаНоменклатуры.Колонки.Добавить("КодСтраныПроисхожденияТовара", Новый ОписаниеТипов("Строка"));
	ТаблицаНоменклатуры.Колонки.Добавить("НомерТаможеннойДекларации",    Новый ОписаниеТипов("Строка"));
	ТаблицаНоменклатуры.Колонки.Добавить("СуммаАкциза",                  Новый ОписаниеТипов("Строка"));
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("НомерСтроки");
	ТаблицаШтрихкодов.Колонки.Добавить("Штрихкод");
	
	Данные = Новый Структура;
	
	Данные.Вставить("Идентификатор");
	Данные.Вставить("Номер");
	Данные.Вставить("Сумма");
	Данные.Вставить("Валюта");
	Данные.Вставить("НазначениеПлатежа");
	Данные.Вставить("БанковскийСчет", БанковскийСчет);
	Данные.Вставить("Продавец", Продавец);
	Данные.Вставить("Покупатель", Покупатель);
	Данные.Вставить("Номенклатура", ТаблицаНоменклатуры);
	Данные.Вставить("Штрихкоды", ТаблицаШтрихкодов);
	Данные.Вставить("ПропускатьСтраницуСчета", Ложь);
		
	ИнтеграцияСЯндексКассойПереопределяемый.ЗаполнитьДанныеОснованияПлатежа(ОснованиеПлатежа, Данные);
	
	ДополнитьДанныеПоНоменклатуре(Данные.Номенклатура);
	
	Возврат Данные;

КонецФункции

Функция ДанныеОснованияПлатежаДляСервиса(Знач ДанныеОснованияПлатежа)
	
	ДанныеДляСервиса = Новый Структура;
	ДанныеДляСервиса.Вставить("items", "");
	ДанныеДляСервиса.Вставить("ym_merchant_receipt", "");
	ДанныеДляСервиса.Вставить("checksum", "");
	ДанныеДляСервиса.Вставить("supplierInfo", "");
	
	НоменклатураРасширенная = ДанныеОснованияПлатежаДляСервиса_НоменклатураРасширенная(ДанныеОснованияПлатежа);
	ДанныеДляСервиса.items = ЗаписатьДанныеВJSON(НоменклатураРасширенная);
	
	Чек = ДанныеОснованияПлатежаДляСервиса_Чек(ДанныеОснованияПлатежа);
	ДанныеДляСервиса.ym_merchant_receipt = ЗаписатьДанныеВJSON(Чек);
	ДанныеДляСервиса.checksum = ХешСумма(ЗаписатьДанныеВJSON(Чек.items));
	
	Продавец = ДанныеОснованияПлатежаДляСервиса_Продавец(ДанныеОснованияПлатежа);
	ДанныеДляСервиса.supplierInfo = ЗаписатьДанныеВJSON(Продавец);
	
	Возврат ДанныеДляСервиса;

КонецФункции

Функция ДанныеОснованияПлатежаДляСервиса_Номенклатура(Знач ДанныеОснованияПлатежа) 

	СоответствиеПолей = Новый Структура;
	
	СоответствиеПолей.Вставить("СтавкаНДСКод",          "tax");
	СоответствиеПолей.Вставить("Наименование",          "text");
	СоответствиеПолей.Вставить("Количество",            "quantity");
	СоответствиеПолей.Вставить("Цена",                  "price");
	СоответствиеПолей.Вставить("ПредметРасчетаСтрокой", "paymentSubjectType");
	СоответствиеПолей.Вставить("СпособРасчетаСтрокой",  "paymentMethodType");
	
	Если ОтправлятьДанныеЧекаВФормате01072019() Тогда
		СоответствиеПолей.Вставить("КодТовара",                    "productCode");
		СоответствиеПолей.Вставить("КодСтраныПроисхожденияТовара", "countryOfOriginCode");
		СоответствиеПолей.Вставить("НомерТаможеннойДекларации",    "customsDeclarationNumber");
		СоответствиеПолей.Вставить("СуммаАкциза",                  "excise");
	КонецЕсли;
		
	Номенклатура = Новый Массив;
	
	Для каждого СтрокаНоменклатуры Из ДанныеОснованияПлатежа.Номенклатура Цикл
		
		СтрокаДанных = Новый Структура;
		
		Для каждого Поле Из СоответствиеПолей Цикл
			
			ПолеКлюч = Поле.Ключ;
			ПолеЗначение = Поле.Значение;
			Значение = СтрокаНоменклатуры[ПолеКлюч];
			
			Если Не ЗначениеЗаполнено(Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПолеКлюч = "Цена" Тогда
				СтрокаДанных.Вставить(ПолеЗначение, Новый Структура("amount", Значение));
			Иначе 
				СтрокаДанных.Вставить(ПолеЗначение, Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Номенклатура.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	Возврат Номенклатура;

КонецФункции

Функция ДанныеОснованияПлатежаДляСервиса_НоменклатураРасширенная(Знач ДанныеОснованияПлатежа) 

	Штрихкоды = Новый Соответствие();
	Для каждого СтрокаШК Из ДанныеОснованияПлатежа.Штрихкоды Цикл
		Если Штрихкоды.Получить(СтрокаШК.НомерСтроки) = Неопределено Тогда
			Штрихкоды.Вставить(СтрокаШК.НомерСтроки, Новый Массив);
		КонецЕсли;
		Штрихкоды[СтрокаШК.НомерСтроки].Добавить(СтрокаШК.Штрихкод);
	КонецЦикла;
	
	СоответствиеПолей = Новый Структура;
	
	СоответствиеПолей.Вставить("Наименование",          "name");
	СоответствиеПолей.Вставить("НаименованиеПолное",    "fullName");
	СоответствиеПолей.Вставить("Характеристика",        "feature");
	СоответствиеПолей.Вставить("Количество",            "quantity");
	СоответствиеПолей.Вставить("Цена",                  "price");
	СоответствиеПолей.Вставить("СтавкаНДС",             "nds");
	СоответствиеПолей.Вставить("Валюта",                "currency");
	СоответствиеПолей.Вставить("Артикул",               "article");
	СоответствиеПолей.Вставить("ЕдиницаИзмерения",      "unit");
	СоответствиеПолей.Вставить("ВидНоменклатуры",       "category");
	СоответствиеПолей.Вставить("Родитель",              "parent");
	СоответствиеПолей.Вставить("Сумма",                 "sum");
	СоответствиеПолей.Вставить("ПредметРасчетаСтрокой", "paymentSubjectType");
	СоответствиеПолей.Вставить("СпособРасчетаСтрокой",  "paymentMethodType");
		
	Номенклатура = Новый Массив;
	
	Для каждого СтрокаНоменклатуры Из ДанныеОснованияПлатежа.Номенклатура Цикл
		
		СтрокаДанных = Новый Структура;
		
		Для каждого Поле Из СоответствиеПолей Цикл
			
			ПолеКлюч = Поле.Ключ;
			ПолеЗначение = Поле.Значение;
			Значение = СтрокаНоменклатуры[ПолеКлюч];
			СтрокаДанных.Вставить(ПолеЗначение, Значение);
			
		КонецЦикла;
		
		ТекШтрихкоды = Штрихкоды.Получить(СтрокаНоменклатуры.НомерСтроки);
		СтрокаДанных.Вставить("barcodes", ?(ТекШтрихкоды = Неопределено, Новый Массив, ТекШтрихкоды));
		
		Номенклатура.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	Возврат Номенклатура;

КонецФункции

Функция ДанныеОснованияПлатежаДляСервиса_Чек(Знач ДанныеОснованияПлатежа) 

	Чек = Новый Структура;
	
	Если ОтправлятьДанныеЧекаВФормате01072019() Тогда
		
		ДанныеПокупателя = ДанныеОснованияПлатежа_Покупатель(ДанныеОснованияПлатежа.Покупатель);
		
		Если ЗначениеЗаполнено(ДанныеПокупателя) Тогда
			Чек.Вставить("customer", ДанныеПокупателя);
		КонецЕсли;
		
	Иначе	
		Если ЗначениеЗаполнено(ДанныеОснованияПлатежа.Покупатель.КонтактныеДанныеЧека) Тогда
			Чек.Вставить("customerContact", ДанныеОснованияПлатежа.Покупатель.КонтактныеДанныеЧека);
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДанныеОснованияПлатежа.Продавец.УчетнаяПолитика) Тогда
		Чек.Вставить("taxSystem", ДанныеОснованияПлатежа.Продавец.УчетнаяПолитика);
	КонецЕсли;
	
	Чек.Вставить("items", ДанныеОснованияПлатежаДляСервиса_Номенклатура(ДанныеОснованияПлатежа));

	Возврат Чек;
	
КонецФункции

Функция ДанныеОснованияПлатежа_Покупатель(ДанныеПокупателя)
	
	ПолеКонтактныхДанныхЧека = ?(ЭтоАдресПочты(ДанныеПокупателя.КонтактныеДанныеЧека), "email", "phone");
	
	СоответствиеПолей = Новый Структура;
		
	СоответствиеПолей.Вставить("Наименование",         "fullName");
	СоответствиеПолей.Вставить("ИНН",                  "inn");
	СоответствиеПолей.Вставить("КонтактныеДанныеЧека", ПолеКонтактныхДанныхЧека);
	
	Результат = Новый Структура;
	
	Для каждого Поле Из СоответствиеПолей Цикл
		Если ЗначениеЗаполнено(ДанныеПокупателя[Поле.Ключ]) Тогда
			Результат.Вставить(Поле.Значение, ДанныеПокупателя[Поле.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОснованияПлатежаДляСервиса_Продавец(Знач ДанныеОснованияПлатежа)
	
	СоответствиеПолей = Новый Структура;
	СоответствиеПолей.Вставить("ИНН", "inn");
	СоответствиеПолей.Вставить("КПП", "kpp");
	СоответствиеПолей.Вставить("Наименование", "fullName");
	СоответствиеПолей.Вставить("Телефон", "phone");
	СоответствиеПолей.Вставить("ЭлектроннаяПочта", "email");
	СоответствиеПолей.Вставить("ФактическийАдрес", "physicalAddress");
	СоответствиеПолей.Вставить("ЮридическийАдрес", "legalAddress");
	
	Продавец = Новый Структура;
	
	Для каждого Поле Из СоответствиеПолей Цикл
		
		Продавец.Вставить(Поле.Значение, ДанныеОснованияПлатежа.Продавец[Поле.Ключ]); 
		
	КонецЦикла;
	
	Возврат Продавец;
	
КонецФункции

Функция ПроверитьЗаполнениеОснованияПлатежа(Знач ОснованиеПлатежа) 

	Отказ = Ложь;
	
	ИнтеграцияСЯндексКассойПереопределяемый.ПриПроверкеЗаполненияОснованияПлатежа(ОснованиеПлатежа, Отказ);
	
	Возврат Не Отказ;

КонецФункции

Функция СтатусПодключенияМагазина(Знач ВходящиеПараметры)
	
	ИдентификаторМагазина = ВходящиеПараметры.ИдентификаторМагазина;
	ИдентификаторОперации = ВходящиеПараметры.ИдентификаторОперации;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "ИнтеграцияСЯндексКассой.ПолучениеСтатусаРазрешенияНаИспользованиеСервиса";
	КоличествоПовторяющихсяДанных = 0;
	
	// Инициализация команды
	
	ИмяКоманды = "ПолучитьСтатусРазрешенияНаИспользованиеСервиса";
	
	Отказ = Ложь;
	
	ПараметрыСервиса = ПараметрыСервиса(ИмяКоманды, Отказ);
	ПараметрыКоманды = ПараметрыКомандыПолученияСтатусаРазрешения(
		ПараметрыСервиса, 
		ИдентификаторМагазина, 
		ИдентификаторОперации, 
		Отказ);
	
	Результат = ОписаниеРезультатаСтатусПодключенияМагазина();
	
	Если Отказ Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		Возврат Результат;
	КонецЕсли;
	
	// Выполнение команды
	
	МаксимальноеКоличествоИтераций = 5;
	СчетчикИтераций                = 1;
	РазделениеВключено             = ОбщегоНазначения.РазделениеВключено();
	
	Пока СчетчикИтераций <= МаксимальноеКоличествоИтераций Цикл

		Если РазделениеВключено И СчетчикИтераций > 1 Тогда
			ПараметрыКоманды.ДанныеАутентификации = СтрокаАутентификации(ДанныеАутентификацииИПП());
		КонецЕсли;
		
		РезультатКоманды = Неопределено;
		ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Истина, РезультатКоманды, Отказ);
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		РазобратьДанныеСервисаJSON(ИмяКоманды, РезультатКоманды, Результат, Отказ);

		Если Результат.СтатусОперацииПроверки = СтатусыВыполненияАсинхронногоМетодаСервиса().Ошибка Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось установить статус подключения магазина'");
		КонецЕсли;
		
		Если Результат.СтатусОперацииПроверки = СтатусыВыполненияАсинхронногоМетодаСервиса().Выполнено Тогда
			Прервать;
		КонецЕсли;
		
		ПараметрыКоманды.ИдентификаторОперации = Результат.ИдентификаторОперации;
		
		ОбщегоНазначенияБТС.Пауза(1);
		
		СчетчикИтераций = СчетчикИтераций + 1;
		
	КонецЦикла;
	
	ВывестиОшибкиПользователю();
	
	Если Отказ Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Если Результат.СтатусОперацииПроверки = СтатусыВыполненияАсинхронногоМетодаСервиса().Выполнено Тогда
		Результат.ИдентификаторОперации = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные основания платежа в сервисе.
//
// Параметры:
//  ВходящиеПараметры - Структура - параметры метода:
//   * ОснованиеПлатежа - Произвольный - основание платежа, данные которого нужно получить.
//
// Возвращаемое значение:
//  Структура - данные основания платежа в сервисе:
//   * КонтактныеДанныеЭлектронногоЧека - Строка - контакты покупателя для отправки чека.
//   * ПлатежнаяСсылка - Строка - ссылка на страницу оплаты.
//   * ХешСумма - Строка - хеш сумма данных основания платежа.
//   * Статус - Строка - "Новый" - данные в сервисе отсутствуют, "НеОплачен" - не оплачен, "Оплачен" - оплачен.
//
Функция ДанныеОснованияПлатежаВСервисе(Знач ВходящиеПараметры)
	
	// Инициализация команды
	
	ИмяКоманды = "ПолучитьДанныеПоЗаказу";
	
	// Инициализация выходных данных
	
	Результат = Новый Структура;
	
	Результат.Вставить("КонтактныеДанныеЭлектронногоЧека");
	Результат.Вставить("ПлатежнаяСсылка");
	Результат.Вставить("ХешСумма");
	Результат.Вставить("Статус", "Новый");
	Результат.Вставить("ОтсутствуетДоступ", Ложь);
	
	// Параметры выполнения команды
	
	Отказ = Ложь;
	
	ПараметрыСервиса = ПараметрыСервиса(ИмяКоманды, Отказ);
	ПараметрыЯндексКассы = ПараметрыЯндексКассы(ИмяКоманды, ВходящиеПараметры, Отказ);
	ПараметрыКоманды = ПараметрыКоманды_ПолучитьДанныеПоЗаказу(ПараметрыСервиса, ПараметрыЯндексКассы, ВходящиеПараметры, Отказ);
	
	Если Отказ Тогда 
		Возврат Результат;
	КонецЕсли;
	
	// Выполнение команды
	
	ИспользоватьНовыйПротокол = ПараметрыЯндексКассы.ИспользоватьНовыйПротокол;
	
	РезультатКоманды = Неопределено;
	ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, ИспользоватьНовыйПротокол, РезультатКоманды, Отказ);
	
	Если РезультатКоманды.ОтсутствуетДоступ Тогда
		Результат.ОтсутствуетДоступ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	РезультатРазбора = Неопределено;
	РазобратьДанныеСервиса(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ);
	
	ВывестиОшибкиПользователю();
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Определение результатов
	
	Результат.КонтактныеДанныеЭлектронногоЧека = РезультатРазбора.ДанныеXDTO.customerContact;
	Результат.ПлатежнаяСсылка                  = РезультатРазбора.ДанныеXDTO.OrderURL;
	Результат.ХешСумма                         = РезультатРазбора.ДанныеXDTO.checksum;
	
	Если РезультатКоманды.ОтсутствуетДоступ Тогда
		Результат.ОтсутствуетДоступ = Истина;
		Возврат Результат;
	КонецЕсли;
		
	Если РезультатРазбора.ДанныеXDTO.Status = 1 Тогда
		Результат.Статус = "Новый";
	ИначеЕсли РезультатРазбора.ДанныеXDTO.Status = 0 Тогда
		
		Если РезультатРазбора.ДанныеXDTO.OrderState < 2 Тогда
			Результат.Статус = "НеОплачен"; 
		ИначеЕсли РезультатРазбора.ДанныеXDTO.OrderState = 2 Тогда	
			Результат.Статус = "Оплачен"; 	
		ИначеЕсли РезультатРазбора.ДанныеXDTO.OrderState = 3 Тогда	
			Результат.Статус = "ОплаченОжиданиеЧека";
		КонецЕсли;
		
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции

// Возвращает настройки Яндекс.Кассы для работы по схеме без договора.
//
// Возвращаемое значение:
//  Структура - настройки:
//   * ИдентификаторМагазина -Число - идентификатор магазина.
//   * ИдентификаторВитрины - Число - идентификатор витрины.
//   * ЕстьОшибки - Булево - признак наличия ошибок при получении настроек.
//
Функция НастройкиЯндексКассыБезДоговора()
	
	Настройки = Новый Структура("ИдентификаторМагазина, ИдентификаторВитрины, ЕстьОшибки");
	
	Отказ = Ложь;
	ИмяКоманды = "ПолучитьНастройки";
	РезультатКоманды = Неопределено;
	
	ВыполнитьКомандуСервиса(ИмяКоманды, Неопределено, Ложь, РезультатКоманды, Отказ);
	
	РезультатаРазбора = Неопределено;
	РазобратьДанныеСервиса(ИмяКоманды, РезультатКоманды, РезультатаРазбора, Отказ);
	
	Если Не Отказ Тогда 
		ЗаполнитьЗначенияСвойств(Настройки, РезультатаРазбора);
	КонецЕсли;
	
	Настройки.ЕстьОшибки = Отказ;
	
	ВывестиОшибкиПользователю();
	
	Возврат Настройки;
	
КонецФункции

// Обращение к сервису

Функция ПараметрыСервиса(Знач ИмяКоманды, Отказ = Ложь) 

	Параметры = Новый Структура;
	
	// Проверим использование подсистемы
	
	Если Не ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции("ИспользоватьИнтеграциюСЯндексКассой") Тогда
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ОбработатьОшибку("НеВключенаФункциональнаяОпция", ПараметрыСообщения, Отказ);
		Возврат Параметры;
		
	КонецЕсли;
	
	// Подготовим данные аутентификации пользователя в интернет поддержке
	
	ДанныеАутентификации = ДанныеАутентификацииИПП();
	
	Если ДанныеАутентификации = Неопределено Тогда
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ОбработатьОшибку("НеВключенаИПП", ПараметрыСообщения, Отказ);
		Возврат Параметры;
		
	КонецЕсли;
	
	Параметры.Вставить("ДанныеАутентификации", СтрокаАутентификации(ДанныеАутентификации));
	
	Возврат Параметры; 

КонецФункции

Функция СтрокаАутентификации(ДанныеАутентификации)
	
	Если ДанныеАутентификации = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАутентификации.Тикет) Тогда
		Результат = ДанныеАутентификации.Тикет; // тип тикета будет установлен перед выполнения запроса
	Иначе
		Результат = СтрШаблон("Basic %1", СтрокаBase64БезBOM(ДанныеАутентификации.Логин + ":" + ДанныеАутентификации.Пароль));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыЯндексКассы(Знач ИмяКоманды, Знач ВходящиеПараметры, Отказ = Ложь) 

	Параметры = Новый Структура;
	
	// Подготовим настройки Яндекс.Кассы
	
	//  Ищем во входящих параметрах
	Если ВходящиеПараметры.Свойство("НастройкаЯндексКассы") Тогда
		НастройкаЯндексКассы = ВходящиеПараметры.НастройкаЯндексКассы;
	КонецЕсли;
	//  Ищем по основанию платежа
	Если НастройкаЯндексКассы = Неопределено И ВходящиеПараметры.Свойство("ОснованиеПлатежа") Тогда
		НастройкаЯндексКассы = НастройкаЯндексКассыОснованияПлатежа(ВходящиеПараметры.ОснованиеПлатежа);
	КонецЕсли;
	// Ищем по организации
	Если НастройкаЯндексКассы = Неопределено И ВходящиеПараметры.Свойство("Организация") Тогда
		НастройкаЯндексКассы = НастройкаЯндексКассыОрганизации(ВходящиеПараметры.Организация);
	КонецЕсли;
	//  Проверяем наличие
	Если НастройкаЯндексКассы = Неопределено Тогда
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ОснованиеПлатежа", ВходящиеПараметры.ОснованиеПлатежа);
		ОбработатьОшибку("НеНайденаДействительнаяНастройка", ПараметрыСообщения, Отказ);
		Возврат Параметры;
	КонецЕсли; 
	
	Параметры.Вставить("Настройка", НастройкаЯндексКассы);
	Параметры.Вставить("ИспользоватьНовыйПротокол", Не ЗначениеЗаполнено(НастройкаЯндексКассы.ИдентификаторВитрины));
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыКоманды_ПолучитьДанныеПоЗаказу(Знач ПараметрыСервиса, Знач ПараметрыЯндексКассы, Знач ВходящиеПараметры, Отказ = Ложь) 

	ДанныеОснованияПлатежа = ДанныеОснованияПлатежа(ВходящиеПараметры.ОснованиеПлатежа);
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДанныеАутентификации", ПараметрыСервиса.ДанныеАутентификации); 
	Параметры.Вставить("shopId", Формат(ПараметрыЯндексКассы.Настройка.ИдентификаторМагазина,"ЧГ="));
	
	Если ПараметрыЯндексКассы.Настройка.СДоговором Тогда
		Параметры.Вставить("orderNumber", Строка(ДанныеОснованияПлатежа.Идентификатор));
	Иначе
		Параметры.Вставить("orderNumber", Строка(ВходящиеПараметры.ОснованиеПлатежа.УникальныйИдентификатор()));	
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыКоманды_ОбновитьДанныеЗаказа(Знач ПараметрыСервиса, Знач ПараметрыЯндексКассы, Знач ВходящиеПараметры, Отказ = Ложь)
	
	Параметры = Новый Структура;
	
	// Проверим основание платежа
	Если Не ПроверитьЗаполнениеОснованияПлатежа(ВходящиеПараметры.ОснованиеПлатежа) Тогда
		Отказ = Истина;
		Возврат Параметры;
	КонецЕсли;
	
	ДанныеОснованияПлатежа = ДанныеОснованияПлатежа(ВходящиеПараметры.ОснованиеПлатежа);
	Если ВходящиеПараметры.Свойство("КонтактныеДанныеЧека") Тогда
		ДанныеОснованияПлатежа.Покупатель.КонтактныеДанныеЧека = ВходящиеПараметры.КонтактныеДанныеЧека;
	КонецЕсли;
	
	ДанныеОснованияПлатежаДляСервиса = ДанныеОснованияПлатежаДляСервиса(ДанныеОснованияПлатежа);
	НастройкаЯндексКассы = ПараметрыЯндексКассы.Настройка;
	
	КодировкаURL = СпособКодированияСтроки.КодировкаURL;
	
	ИдентификаторПлатежа = КодироватьСтроку(Строка(ДанныеОснованияПлатежа.Идентификатор), КодировкаURL);

	Параметры = Новый Структура;
	
	Параметры.Вставить("ДанныеАутентификации", ПараметрыСервиса.ДанныеАутентификации);
	Параметры.Вставить("cms_name", "1c"); // Необходимо для сбора статистики на стороне Яндекса
	Параметры.Вставить("directLink", ?(ДанныеОснованияПлатежа.ПропускатьСтраницуСчета = Истина, "true", "false")); 
	Параметры.Вставить("shopId", Формат(НастройкаЯндексКассы.ИдентификаторМагазина,"ЧГ="));
	
	Если ЗначениеЗаполнено(НастройкаЯндексКассы.ИдентификаторВитрины) Тогда
		Параметры.Вставить("scid", Формат(НастройкаЯндексКассы.ИдентификаторВитрины,"ЧГ="));
	КонецЕсли;
	
	Параметры.Вставить("sum", Формат(ДанныеОснованияПлатежа.Сумма,"ЧРД=.; ЧГ="));
	Параметры.Вставить("customerNumber", КодироватьСтроку(ДанныеОснованияПлатежа.Покупатель.Идентификатор, КодировкаURL));
	Параметры.Вставить("orderNumber", ИдентификаторПлатежа);
	Параметры.Вставить("custName", КодироватьСтроку(ДанныеОснованияПлатежа.Покупатель.Наименование, КодировкаURL));
	Параметры.Вставить("paymentType", "");
	Параметры.Вставить("orderDetails", КодироватьСтроку(ДанныеОснованияПлатежа.НазначениеПлатежа, КодировкаURL)); 
	
	Если НастройкаЯндексКассы.ОтправкаЧековЧерезЯндекс
		ИЛИ Не ПараметрыЯндексКассы.ИспользоватьНовыйПротокол Тогда
		
		Параметры.Вставить("ym_merchant_receipt", КодироватьСтроку(ДанныеОснованияПлатежаДляСервиса.ym_merchant_receipt, КодировкаURL));
	КонецЕсли;
	
	Параметры.Вставить("checksum", КодироватьСтроку(ДанныеОснованияПлатежаДляСервиса.checksum, КодировкаURL));
	Параметры.Вставить("items", КодироватьСтроку(ДанныеОснованияПлатежаДляСервиса.items, КодировкаURL));
	Параметры.Вставить("supplierInfo", КодироватьСтроку(ДанныеОснованияПлатежаДляСервиса.supplierInfo, КодировкаURL));
	
	Если Не НастройкаЯндексКассы.СДоговором Тогда 
		
		ГлобальныйУникальныйИдентификаторЗаказа = КодироватьСтроку(
			Строка(ВходящиеПараметры.ОснованиеПлатежа.УникальныйИдентификатор()), СпособКодированияСтроки.КодировкаURL);
		
		Параметры.Вставить("CustINN", Строка(ДанныеОснованияПлатежа.Продавец.ИНН));
		Параметры.Вставить("CustKPP", Строка(ДанныеОснованияПлатежа.Продавец.КПП));
		Параметры.Вставить("supplierName", КодироватьСтроку(ДанныеОснованияПлатежа.Продавец.Наименование, КодировкаURL));
		Параметры.Вставить("BankBIK", Строка(ДанныеОснованияПлатежа.БанковскийСчет.БанкБИК));
		Параметры.Вставить("BankCorAccount", Строка(ДанныеОснованияПлатежа.БанковскийСчет.БанкКоррСчет));
		Параметры.Вставить("supplierBankName", КодироватьСтроку(ДанныеОснованияПлатежа.БанковскийСчет.БанкНаименование, КодировкаURL));
		Параметры.Вставить("CustAccount", Строка(ДанныеОснованияПлатежа.БанковскийСчет.НомерСчета));
		Параметры.Вставить("uin", ИдентификаторПлатежа);
		Параметры.Вставить("orderNumber", ГлобальныйУникальныйИдентификаторЗаказа);
		Параметры.Вставить("customerNumber", Строка(ДанныеОснованияПлатежа.Номер));
				
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыКоманды_ОперацииПоЯндексКассе(Знач ПараметрыСервиса, Знач ПараметрыЯндексКассы, Знач ВходящиеПараметры, Отказ = Ложь) 

	Параметры = Новый Структура;
	Параметры.Вставить("ДанныеАутентификации", ПараметрыСервиса.ДанныеАутентификации);
	Параметры.Вставить("ДатаНачала", ВходящиеПараметры.ДатаПоследнегоУспешногоОбмена);
	Если ЗначениеЗаполнено(ВходящиеПараметры.ДатаНачала) Тогда 
		Параметры.ДатаНачала = ВходящиеПараметры.ДатаНачала;
	КонецЕсли;
	
	Параметры.Вставить("ДатаОкончания", Дата('00010101'));
	Если ЗначениеЗаполнено(ВходящиеПараметры.ДатаОкончания) Тогда
		Параметры.ДатаОкончания = ВходящиеПараметры.ДатаОкончания;
		Если Параметры.ДатаНачала > Параметры.ДатаОкончания Тогда
			Параметры.ДатаОкончания = КонецДня(Параметры.ДатаНачала);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыОрганизации = РеквизитыОрганизации(ВходящиеПараметры.Организация);
	
	Параметры.Вставить("ИНН", РеквизитыОрганизации.ИНН);
	Параметры.Вставить("КПП", РеквизитыОрганизации.КПП);
	Параметры.Вставить("Организация", ВходящиеПараметры.Организация);
	Параметры.Вставить("ИдентификаторМагазина", ВходящиеПараметры.ИдентификаторМагазина);
	Параметры.Вставить("НастройкаЯндексКассы", ВходящиеПараметры.НастройкаЯндексКассы);
	Параметры.Вставить("СДоговором", ВходящиеПараметры.СДоговором);
	
	Возврат Параметры;
	
КонецФункции


Функция ПараметрыПолученияОперацийПоЯндексКассе(Знач ВходящиеПараметры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("ДатаНачала", ВходящиеПараметры.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ВходящиеПараметры.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", ВходящиеПараметры.Организация);
	Запрос.УстановитьПараметр("СДоговором", ВходящиеПараметры.СДоговором);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиЯндексКассы.Ссылка КАК НастройкаЯндексКассы,
	|	ЕСТЬNULL(СтатусОбменовСЯндексКассой.ДатаПоследнегоУспешногоОбмена, &ПустаяДата) КАК ДатаПоследнегоУспешногоОбмена,
	|	НастройкиЯндексКассы.Организация КАК Организация,
	|	НастройкиЯндексКассы.ИдентификаторМагазина КАК ИдентификаторМагазина,
	|	НастройкиЯндексКассы.ИдентификаторВитрины КАК ИдентификаторВитрины,
	|	НастройкиЯндексКассы.СДоговором КАК СДоговором,
	|	&ДатаНачала КАК ДатаНачала,
	|	&ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Справочник.НастройкиЯндексКассы КАК НастройкиЯндексКассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусОбменовСЯндексКассой КАК СтатусОбменовСЯндексКассой
	|		ПО НастройкиЯндексКассы.Ссылка = СтатусОбменовСЯндексКассой.НастройкаЯндексКассы
	|ГДЕ
	|	НЕ НастройкиЯндексКассы.Недействительна
	|	И НЕ НастройкиЯндексКассы.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &Организация <> НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЯндексКассы.Организация = &Организация
	|			КОГДА &СДоговором <> НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЯндексКассы.СДоговором = &СДоговором
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Параметры = Запрос.Выполнить().Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры);
	
КонецФункции

Процедура ПодготовитьПараметрыВызоваКомандыСервиса(
			ИмяКоманды, 
			ПараметрыКоманды, 
			ПараметрыВызова, 
			ПараметрыСоединения, 
			Отказ)
			
	Если ПараметрыВызова.ИспользоватьНовыйПротокол Тогда
		АдресКоманд = АдресКомандНовогоПротокола();
	Иначе
		АдресКоманд = АдресКомандСтарогоПротокола();
	КонецЕсли;		

	ПреобразоватьСтрокуАутентификации(ПараметрыКоманды, ПараметрыВызова.ИспользоватьНовыйПротокол);
	
	Заголовки = Новый Соответствие();
	
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
	
	Если ИмяКоманды = "ЗагрузитьОперацииПоЯндексКассе" Тогда 
		
		ПараметрыВызова.АдресРесурса	= АдресКоманд + "listOperations";
		ПараметрыВызова.Метод 			= "post";
		
		Заголовки.Вставить("Authorization",	ПараметрыКоманды.ДанныеАутентификации);
		
		ПараметрыТелаЗапроса = Новый Структура();
		ПараметрыТелаЗапроса.Вставить("inn",			Формат(ПараметрыКоманды.ИНН, "ЧГ="));
		ПараметрыТелаЗапроса.Вставить("kpp",			Формат(ПараметрыКоманды.КПП, "ЧГ="));
		Если ПараметрыКоманды.СДоговором Тогда
			ПараметрыТелаЗапроса.Вставить("shopId",			Формат(ПараметрыКоманды.ИдентификаторМагазина, "ЧГ="));
		КонецЕсли;
		ПараметрыТелаЗапроса.Вставить("formatVersion",	ПараметрыСоединения.ВерсияФормата);
		Если Не ПараметрыКоманды.ДатаНачала = Дата('00010101') Тогда 
			ПараметрыТелаЗапроса.Вставить("operationCreatedDatetimeGreaterOrEqual",
			Формат(ПараметрыКоманды.ДатаНачала, "ДФ=dd-MM-yyyy-HH-mm-ss"));
		КонецЕсли;
		Если Не ПараметрыКоманды.ДатаОкончания = Дата('00010101') Тогда 
			ПараметрыТелаЗапроса.Вставить("operationCreatedDatetimeLessOrEqual",
			Формат(ПараметрыКоманды.ДатаОкончания, "ДФ=dd-MM-yyyy-HH-mm-ss"));
		КонецЕсли;
		
		ПараметрыВызова.Вставить("Данные" , СформироватьТелоЗапроса(ПараметрыТелаЗапроса));
		
	ИначеЕсли ИмяКоманды = "ПолучитьНастройки" Тогда 
		
		ПараметрыВызова.АдресРесурса	= АдресКоманд + "getSettings";
		ПараметрыВызова.Метод 			= "post";
		
	ИначеЕсли ИмяКоманды = "ОбновитьДанныеЗаказа" Тогда
		
		Заголовки.Вставить("Authorization",	ПараметрыКоманды.ДанныеАутентификации);
		
		ПараметрыКоманды.Удалить("ДанныеАутентификации");
		
		ПараметрыВызова.АдресРесурса	= АдресКоманд + "createOrder";
		ПараметрыВызова.Метод 			= "post";
		ПараметрыВызова.Данные   		= СформироватьТелоЗапроса(ПараметрыКоманды);
		
	ИначеЕсли ИмяКоманды = "ПолучитьДанныеПоЗаказу" Тогда
		
		Заголовки.Вставить("Authorization",	ПараметрыКоманды.ДанныеАутентификации);
		
		ПараметрыКоманды.Удалить("ДанныеАутентификации");
		
		ПараметрыВызова.АдресРесурса	= АдресКоманд + "getOrder";
		ПараметрыВызова.Метод 			= "post";
		ПараметрыВызова.Данные   		= СформироватьТелоЗапроса(ПараметрыКоманды);		
		
	ИначеЕсли ИмяКоманды = "ПолучитьСтатусРазрешенияНаИспользованиеСервиса" Тогда
		
		Заголовки.Вставить("Authorization",	ПараметрыКоманды.ДанныеАутентификации);
		
		Если ЗначениеЗаполнено(ПараметрыКоманды.ИдентификаторОперации) Тогда
			
			ПараметрыВызова.АдресРесурса = 
				СтрШаблон("public/api/rest/configuration/v2/shops/%1/permissions/check/%2", 
					ПараметрыКоманды.ИдентификаторМагазина, 
					ПараметрыКоманды.ИдентификаторОперации);
				
			ПараметрыВызова.Метод = "get";
			
		Иначе
			
			ПараметрыВызова.АдресРесурса = 
				СтрШаблон("public/api/rest/configuration/v2/shops/%1/permissions/check", 
					ПараметрыКоманды.ИдентификаторМагазина);
					
			ПараметрыВызова.Метод = "post";
			
		КонецЕсли;

	Иначе
		
		ОбработатьОшибку("ОшибкаИнициализацииСервиса", , Отказ);
		
	КонецЕсли;
	
	ПараметрыВызова.Заголовки = Заголовки;
	
КонецПроцедуры

Процедура ПреобразоватьСтрокуАутентификации(ПараметрыКоманды, ИспользоватьНовыйПротокол)
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыКоманды) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыКоманды.Свойство("ДанныеАутентификации") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьНовыйПротокол Тогда
		ПараметрыКоманды.ДанныеАутентификации = СтрШаблон("Bearer %1", ПараметрыКоманды.ДанныеАутентификации);
	Иначе
		СтрокаBase64 = СтрокаBase64БезBOM(СтрШаблон("AUTH_TOKEN:%1", ПараметрыКоманды.ДанныеАутентификации));
		ПараметрыКоманды.ДанныеАутентификации = СтрШаблон("Basic %1", СтрокаBase64);
	КонецЕсли;
		
КонецПроцедуры

Функция СформироватьТелоЗапроса(ПараметрыТелаЗапроса)
	
	ТелоЗапроса = "";
	
	Для Каждого Параметр Из ПараметрыТелаЗапроса Цикл 
		
		ТелоЗапроса =  ТелоЗапроса + ?(ПустаяСтрока(ТелоЗапроса), "", "&") + Параметр.Ключ + "=" + Параметр.Значение;
		
	КонецЦикла;
	
	Возврат ТелоЗапроса;
	
КонецФункции

Процедура ВыполнитьКомандуСервиса(Знач ИмяКоманды, ПараметрыКоманды, ИспользоватьНовыйПротокол, Результат, Отказ)
	
	Перем ЗащищенноеСоединение;
	
	Результат = Новый Структура;
	
	Результат.Вставить("КодСостояния",      0);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("Данные",            Неопределено);
	Результат.Вставить("ПараметрыКоманды",  Неопределено);
	Результат.Вставить("ПараметрыВызова",   Неопределено);
	Результат.Вставить("ОтсутствуетДоступ", Ложь);
	
	Если ПараметрыКоманды = Неопределено Тогда
		ПараметрыКоманды = Новый Структура;
	КонецЕсли;
	
	// Получение и инициализация общих параметров соединения в сервисе.
	СохранятьПараметрыСеанса = Ложь;
	Соединение = Неопределено;
	ПараметрыСоединения = НастройкиСервиса();
	
	ПараметрыВызова = Новый Структура("АдресРесурса, Метод, Данные, Заголовки, ИспользоватьНовыйПротокол");
	
	ПараметрыВызова.ИспользоватьНовыйПротокол = ИспользоватьНовыйПротокол;
	
	ПодготовитьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, ПараметрыСоединения, Отказ);
	
	Результат.ПараметрыКоманды = ПараметрыКоманды;
	Результат.ПараметрыВызова = ПараметрыВызова;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		ЗащищенноеСоединение = 
			ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера,
			ПараметрыСоединения.Порт,,,ПараметрыСоединения.Прокси, ПараметрыСоединения.Таймаут, ЗащищенноеСоединение);
	Исключение
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбработатьОшибку("ОтсутствуетСоединениеССервером", ПараметрыСообщения, Отказ);
		Возврат;
	КонецПопытки;
	
	HTTPОтвет = ВыполнитьHTTPЗапрос(ПараметрыВызова, ИмяКоманды, Соединение, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка полученных данных.
	Результат.КодСостояния = HTTPОтвет.КодСостояния;
	
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	НовыйРезультат = Новый Структура();
	НовыйРезультат.Вставить("ТелоОтвета", ТелоОтвета);
	Результат.Данные = НовыйРезультат;
	
	Если Результат.КодСостояния >= 400 Тогда
		
		Если Результат.КодСостояния = 403 Тогда // отсутствует токен
			Результат.ОтсутствуетДоступ = Истина;
			Возврат;
		КонецЕсли;
		
		РасшифровкаКодовСостояния = Новый Соответствие;
		
		РасшифровкаКодовСостояния.Вставить(400, НСтр("ru = 'Ошибка выполнения запроса (команда %1).'"));
		РасшифровкаКодовСостояния.Вставить(401, НСтр("ru = 'Ошибка аутентификации (команда %1).'"));
		РасшифровкаКодовСостояния.Вставить(500, НСтр("ru = 'Внутренняя ошибка сервиса (команда %1).'"));
		
		ТекстСообщения = РасшифровкаКодовСостояния.Получить(Результат.КодСостояния);
		
		Если ТекстСообщения = Неопределено Тогда						
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса (%1).'");
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяКоманды);
				
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ТекстСообщения", ТекстСообщения);
		ПараметрыСообщения.Вставить("ТекстОшибкиСервиса",
			СтрШаблон(НСтр("ru = 'Код ошибки: %1
							|Подробно: %2'"),
							Результат.КодСостояния,
							ТелоОтвета));
		
		ОбработатьОшибку("СервисВернулОшибку", ПараметрыСообщения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьHTTPЗапрос(ПараметрыВызова, ИмяКоманды, Соединение, Отказ)
	
	// Выполнение запроса HTTP к сервису.
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыВызова.АдресРесурса, ПараметрыВызова.Заголовки);
	
	Если ЗначениеЗаполнено(ПараметрыВызова.Данные) Тогда
		Если ТипЗнч(ПараметрыВызова.Данные) = Тип("ДвоичныеДанные") Тогда 
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыВызова.Данные);
		ИначеЕсли ТипЗнч(ПараметрыВызова.Данные) = Тип("Строка") Тогда 
			HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыВызова.Данные);
		КонецЕсли;
	КонецЕсли;
	
	HTTPОтвет = Неопределено;
	
	Попытка
		Если ПараметрыВызова.Метод = "get" Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "post" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "put" Тогда
			HTTPОтвет = Соединение.Записать(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "delete" Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-Length", СтрДлина(HTTPЗапрос.ПолучитьТелоКакСтроку()));
			HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка выполнения команды сервиса.'");
		КонецЕсли; 
	Исключение
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПараметрыСообщения.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбработатьОшибку("ОшибкаВыполненияКомандыСервиса", ПараметрыСообщения, Отказ);
		
	КонецПопытки;	
	
	Возврат HTTPОтвет;
	
КонецФункции

// Разбор результатов

Процедура ПрочитатьЗаголовокОтвета(ИмяКоманды, НовыйРезультат)
	
	Если НовыйРезультат.ДанныеXDTO = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ИмяКоманды = "ЗагрузитьОперацииПоЯндексКассе" Тогда 
		ПрочитатьСвойство(НовыйРезультат, "Количество",        "Count");
		ПрочитатьСвойство(НовыйРезультат, "КодСостояния",      "status");
		ПрочитатьСвойство(НовыйРезультат, "ОписаниеСостояния", "techMessage");
		ПрочитатьСвойство(НовыйРезультат, "ДатаОтвета",        "requestDatetime");
	ИначеЕсли ИмяКоманды = "ОбновитьДанныеЗаказа" Тогда 	
		ПрочитатьСвойство(НовыйРезультат, "КодСостояния",      "status");
		ПрочитатьСвойство(НовыйРезультат, "ОписаниеСостояния", "techMessage");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьНастройкиИзДанныхСервиса(Результат, ДанныеXDTO)
	
	ДанныеНастроек = Неопределено;
	Если СвойствоXDTO(ДанныеXDTO, "Settings", ДанныеНастроек) 
		И Не ДанныеНастроек = Неопределено Тогда
		
		Результат.Вставить("ДанныеXDTO", ДанныеНастроек);
		ПрочитатьСвойство(Результат, "ИдентификаторМагазина", "shopid");
		ПрочитатьСвойство(Результат, "ИдентификаторВитрины",  "scid");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазобратьДанныеСервиса(ИмяКоманды, Знач РезультатКоманды, РезультатРазбора, Отказ, БлокироватьСообщенияОбОшибках = Ложь)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатРазбора = Новый Структура();
	ОжидаемыеТипыXDTO = Новый Соответствие();
	ОжидаемыеТипыXDTO.Вставить("ЗагрузитьОперацииПоЯндексКассе", "ListOperationsResponce");
	ОжидаемыеТипыXDTO.Вставить("ПолучитьНастройки", "GetSettingsResponce");
	ОжидаемыеТипыXDTO.Вставить("ОбновитьДанныеЗаказа", "CreateOrderResponce");
	ОжидаемыеТипыXDTO.Вставить("ПолучитьДанныеПоЗаказу", "CreateOrderResponce");
	
	ОбъектXDTO = Неопределено;
	
	Если ЗначениеЗаполнено(РезультатКоманды.Данные.ТелоОтвета) Тогда
		ПрочитатьТелоОтветаИПреобразоватьВОбъектXDTO(РезультатКоманды.Данные.ТелоОтвета,
			ОжидаемыеТипыXDTO.Получить(ИмяКоманды), ОбъектXDTO, ИмяКоманды,Отказ);
		РезультатРазбора.Вставить("ДанныеXDTO", ОбъектXDTO);
		ПрочитатьЗаголовокОтвета(ИмяКоманды, РезультатРазбора);
	Иначе
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ОбработатьОшибку("ПустоеТелоОтвета", ПараметрыСообщения, Отказ); 
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	// Обработка ошибок сервиса.
	ОбработатьОшибкиСервиса(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ, БлокироватьСообщенияОбОшибках);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	// Непосредственный разбор данных которые вернул сервис
	Если ИмяКоманды = "ЗагрузитьОперацииПоЯндексКассе" Тогда 
		
		НастройкаЯндексКассы = РезультатКоманды.ПараметрыКоманды.НастройкаЯндексКассы;
		
		МассивОпераций = Новый Массив;
		ПрочитатьОперацииПоЯндексКассе(МассивОпераций, ОбъектXDTO, АналитикиУчетаОпераций(НастройкаЯндексКассы), Отказ);
		РезультатРазбора.Вставить("МассивОпераций", МассивОпераций);
		
		Если Не ОбъектXDTO.Settings = Неопределено Тогда 
			РезультатРазбора.Вставить("Настройки", Новый Структура());
			ПрочитатьНастройкиИзДанныхСервиса(РезультатРазбора.Настройки, ОбъектXDTO)
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ПолучитьНастройки" Тогда 
		
		ПрочитатьНастройкиИзДанныхСервиса(РезультатРазбора, ОбъектXDTO);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ПрочитатьОперацииПоЯндексКассе(МассивОпераций, ДанныеXDTO, АналитикиУчетаОпераций, Отказ)
	
	Если ДанныеXDTO.Count > 0 Тогда 
		СписокОпераций = ДанныеXDTO.ПолучитьСписок("OperationInfo");
		Для Каждого Операция Из СписокОпераций Цикл 
			Если Не Операция.PaymentData = Неопределено Тогда		// Оплаты
				ПрочитатьОперацию(МассивОпераций, Операция, "PaymentData", АналитикиУчетаОпераций, Отказ);
			ИначеЕсли Не Операция.RefundData = Неопределено Тогда	// Возвраты
				ПрочитатьОперацию(МассивОпераций, Операция, "RefundData", АналитикиУчетаОпераций, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОперацию(МассивОпераций, ДанныеXDTO, ТипОперации, АналитикиУчетаОпераций, Отказ)
	
	Операция = Новый Структура();

	Операция.Вставить("ДанныеXDTO", ДанныеXDTO[ТипОперации]);

	ПрочитатьСвойство(Операция, "ИдентификаторТранзакции", "invoiceId");
	ПрочитатьСвойство(Операция, "ИдентификаторПлатежа",    "orderNumber");
	ПрочитатьСвойство(Операция, "ИдентификаторМагазина",   "shopid");
	
	Операция.Вставить("СДоговором", Операция.ИдентификаторМагазина > 0);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Операция, АналитикиУчетаОпераций);
	
	Если ТипОперации = "PaymentData" Тогда	// Оплаты
		
		Операция.Вставить("ВидОперации", "Оплата");
		
		// Получение простых типов
		ПрочитатьСвойство(Операция, "ДатаОплаты",                              "paymentDatetime");
		ПрочитатьСвойство(Операция, "СуммаДокумента",                          "orderSumAmount");
		ПрочитатьСвойство(Операция, "ВалютаДокумента",                         "orderSumCurrencyPaycash");
		ПрочитатьСвойство(Операция, "СуммаКЗачислениюНаСчетОрганизации",       "shopSumAmount");
		ПрочитатьСвойство(Операция, "ВалютаСуммыКЗачислениюНаСчетОрганизации", "shopSumCurrencyPaycash");
		ПрочитатьСвойство(Операция, "СпособОплаты",                            "paymentType");
		ПрочитатьСвойство(Операция, "ИННОрганизации",                          "Inn");
		ПрочитатьСвойство(Операция, "НаименованиеБанкаОрганизации",            "supplierBankName");
		ПрочитатьСвойство(Операция, "НаименованиеПолноеОрганизации",           "supplierName");
		ПрочитатьСвойство(Операция, "НаименованиеБанкаОрганизации",            "supplierBankName");
		ПрочитатьСвойство(Операция, "БикБанкаОрганизации",                     "BankBIK");
		ПрочитатьСвойство(Операция, "КоррСчетБанкаОрганизации",                "BankCorAccount");
		ПрочитатьСвойство(Операция, "НомерРасчетногоСчетаОрганизации",         "CustAccount");
		ПрочитатьСвойство(Операция, "НазначениеПлатежа",                       "paymentName");
		
		// Данные о чеке
		
		ПрочитатьСвойство(Операция, "ДатаФормированияЧека",       			   	"penReceiptDateTime");
		ПрочитатьСвойство(Операция, "СуммаЧека",								"penReceiptTotal");
		ПрочитатьСвойство(Операция, "НомерФискальногоНакопителя",              	"penFnNumber");
		ПрочитатьСвойство(Операция, "ФискальныйНомерДокумента",         		"penFiscalDocumentNumber");
		ПрочитатьСвойство(Операция, "ФискальныйПризнакДокумента",				"penFiscalDocumentAttribute");
		ПрочитатьСвойство(Операция, "КонтактныеДанныеЭлектронногоЧека",			"customerContact");
		
		// Получение ссылочных значений
		Операция.Вставить("ВалютаДокумента", НайтиВалюту(Операция.ВалютаДокумента));
		
		Операция.Вставить("ВалютаСуммыКЗачислениюНаСчетОрганизации",
			НайтиВалюту(Операция.ВалютаСуммыКЗачислениюНаСчетОрганизации));
		Операция.Вставить("СпособОплаты", Операция.СпособОплаты);
		
	ИначеЕсли ТипОперации = "RefundData" Тогда	// Возвраты
		
		Операция.Вставить("ВидОперации", "Возврат");
		
		// Получение простых типов
		ПрочитатьСвойство(Операция, "ИдентификаторВозврата",           "returnId");
		ПрочитатьСвойство(Операция, "СуммаДокумента",                  "amount");
		ПрочитатьСвойство(Операция, "ВалютаДокумента",                 "currency");
		ПрочитатьСвойство(Операция, "ОписаниеПричиныВозврата",         "cause");
		ПрочитатьСвойство(Операция, "ДатаРегистрацииЗапросаНаВозврат", "createdDatetime");
		ПрочитатьСвойство(Операция, "ДатаИсполненияЗапросаНаВозврат",  "processedDatetime");
		ПрочитатьСвойство(Операция, "ОтправительЗапросаНаВозврат",     "sender");
		
		// Получение ссылочных значений
		Операция.Вставить("ВалютаДокумента", НайтиВалюту(Операция.ВалютаДокумента));
		
	КонецЕсли;
	
	Операция.Удалить("ДанныеXDTO");
	
	МассивОпераций.Добавить(Операция);
	
КонецПроцедуры

Функция ОперацииВТекстовомФормате(МассивОпераций, Параметры)
	
	
	Секции = Новый Массив;
	Получатель = "";
	РасчетныйСчет = "";
	СуммаПоступило = 0;
	Для Каждого Операция Из МассивОпераций Цикл 
		
		Если Операция.СДоговором Тогда 
			Продолжить;
		КонецЕсли;
		
		Секции.Добавить(ДанныеОперацииВТекстовомФормате(Операция));
		
		Если ПустаяСтрока(Получатель) Тогда 
			Получатель = Операция.НаименованиеПолноеОрганизации;
		КонецЕсли;
		Если ПустаяСтрока(РасчетныйСчет) Тогда 
			РасчетныйСчет = Операция.НомерРасчетногоСчетаОрганизации;
		КонецЕсли;
		
		СуммаПоступило = СуммаПоступило + Операция.СуммаДокумента;
		
	КонецЦикла;
	
	Заголовок = СтрШаблон(
		"1CClientBankExchange
		|ВерсияФормата=1.02
		|Кодировка=Windows
		|Отправитель=
		|Получатель=%1
		|ДатаНачала=%2
		|ДатаКонца=%3
		|РасчСчет=%4
		|СекцияРасчСчет
		|ДатаНачала=%2
		|ДатаКонца=%2
		|РасчСчет=%4
		|ВсегоПоступило=%5
		|ВсегоСписано=
		|КонечныйОстаток=
		|КонецРасчСчет",
		Получатель,                                       // Получатель
		Формат(Параметры.ДатаНачала,"ДЛФ=D"),             // ДатаНачала, ДатаКонца
		Формат(Параметры.ДатаОкончания,"ДЛФ=D"),          // ДатаКонца
		РасчетныйСчет,                                    // РасчСчет
		СуммаПоступило);                                  // ВсегоПоступило
		
	СекцииСтрокой = СтрСоединить(Секции, Символы.ПС);
	
	Возврат Заголовок + Символы.ПС + СекцииСтрокой + ?(ПустаяСтрока(СекцииСтрокой), "", Символы.ПС) + "КонецФайла";
	
КонецФункции

Функция ДанныеОперацииВТекстовомФормате(Операция)
	
	ОперацияТекстом =
		"СекцияДокумент=Операция по ЮKassa
		|Номер=%1
		|Дата=%2
		|Сумма=%3
		|ПлательщикСчет=
		|Плательщик=
		|ПлательщикИНН=
		|ПлательщикБанк1=
		|ПлательщикБИК=
		|ПолучательСчет=%4
		|ДатаПоступило=%2
		|Получатель=
		|ПолучательИНН=%5
		|ПолучательРасчСчет=%4
		|ПолучательБанк1=
		|ПолучательБИК=%6
		|ВидОплаты=01
		|Код=%7
		|НазначениеПлатежа=
		|НазначениеПлатежа1=
		|Очередность=5
		|КонецДокумента";
						
	Возврат СтрШаблон(ОперацияТекстом,
						НСтр("ru = 'б/н'"),                             // Номер
						Формат(Операция.ДатаОплаты,"ДЛФ=D"),            // Дата, ДатаПоступило
						Операция.СуммаДокумента,                        // Сумма
						Операция.НомерРасчетногоСчетаОрганизации,       // ПолучательСчет, ПолучательРасчСчет
						Операция.ИННОрганизации,                        // ПолучательИНН
						Операция.БикБанкаОрганизации,                   // ПолучательБИК
						Операция.ИдентификаторПлатежа);                 // Код
КонецФункции

Функция ОписаниеРезультатаСтатусПодключенияМагазина()
	
	Результат = Новый Структура;
	
	Результат.Вставить("СтатусПодключения",      СтатусыПодключенияМагазина().Запрещено);
	Результат.Вставить("СтатусОперацииПроверки", "");
	Результат.Вставить("ИдентификаторОперации",  "");
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеПараметровПолученияСтатусаПодключенияМагазина() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИдентификаторМагазина", "");
	Результат.Вставить("ИдентификаторОперации", "");
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыКомандыПолученияСтатусаРазрешения(
			ПараметрыСервиса,
			ИдентификаторМагазина, 
			ИдентификаторОперации, 
			Отказ)
	
	Если Не ЗначениеЗаполнено(ИдентификаторМагазина) И Не ЗначениеЗаполнено(ИдентификаторОперации) Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДанныеАутентификации",  ПараметрыСервиса.ДанныеАутентификации);
	Результат.Вставить("ИдентификаторМагазина", Формат(ИдентификаторМагазина, "ЧГ =0"));
	Результат.Вставить("ИдентификаторОперации", ИдентификаторОперации);
	
	Возврат Результат;
	
КонецФункции

Процедура РазобратьДанныеСервисаJSON(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ)
	
	ДанныеСервиса = ЗначениеИзСтрокиJSON(РезультатКоманды.Данные.ТелоОтвета);
	
	Если ИмяКоманды = "ПолучитьСтатусРазрешенияНаИспользованиеСервиса" Тогда
		
		РезультатРазбора = ОписаниеРезультатаСтатусПодключенияМагазина();
		
		РезультатРазбора.СтатусПодключения      = ЗначениеСтатусаРазрешенияИзЗначенияСервиса(ДанныеСервиса.permissionStatus);
		РезультатРазбора.СтатусОперацииПроверки = ЗначениеСтатусаОперацииИзЗначенияСервиса(ДанныеСервиса.operationStatus);
		РезультатРазбора.ИдентификаторОперации  = ДанныеСервиса.operationUeid;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСтатусаРазрешенияИзЗначенияСервиса(ЗначениеСервиса)
	
	Результат = "";
	
	Если ЗначениеСервиса = "NO_PERMISSION" Тогда
		Результат = СтатусыПодключенияМагазина().Запрещено;
	ИначеЕсли ЗначениеСервиса = "DENIED" Тогда
		Результат = СтатусыПодключенияМагазина().Отказано;
	ИначеЕсли ЗначениеСервиса = "GRANTED" Тогда
		Результат = СтатусыПодключенияМагазина().Разрешено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСтатусаОперацииИзЗначенияСервиса(ЗначениеСервиса)
	
	Результат = "";
	
	Если ЗначениеСервиса = "DONE" Тогда
		Результат = СтатусыВыполненияАсинхронногоМетодаСервиса().Выполнено;
	ИначеЕсли ЗначениеСервиса = "IN_PROGRESS" Тогда
		Результат = СтатусыВыполненияАсинхронногоМетодаСервиса().Выполняется;
	ИначеЕсли ЗначениеСервиса = "ERROR" Тогда
		Результат = СтатусыВыполненияАсинхронногоМетодаСервиса().Ошибка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеИзСтрокиJSON(Значение)
	
	Если ТипЗнч(Значение) <> Тип("Строка")
		Или ПустаяСтрока(Значение)
		Или Лев(Значение, 1) = "<" Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СтатусыВыполненияАсинхронногоМетодаСервиса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Выполнено",   "Выполнено");
	Результат.Вставить("Выполняется", "Выполняется");
	Результат.Вставить("Ошибка",      "Ошибка");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область XDTO

Процедура ПрочитатьТелоОтветаИПреобразоватьВОбъектXDTO(ТелоОтвета, ИмяОжидаемогоТипаXDTO, ОбъектXDTО, ИмяКоманды, Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ВерсияФорматаДанных = "";
		
	Если Не СтрЧислоВхождений(ТелоОтвета, ИмяОжидаемогоТипаXDTO) Тогда 
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ИмяОжидаемогоТипа", ИмяОжидаемогоТипаXDTO);
		ОбработатьОшибку("НеНайденыОжидаемыеДанныеВТелеОтвета", ПараметрыСообщения, Отказ); 
		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(ТелоОтвета, Новый ПараметрыЧтенияXML());
		ТипФабрики = ФабрикаXDTO.Тип("http://yamoney.1c.ru/XMLSchema", ИмяОжидаемогоТипаXDTO);
		ОбъектXDTО = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипФабрики);
		ЧтениеXML.Закрыть();
	Исключение
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ИнформацияОбОшибке", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбработатьОшибку("НеУдалосьПреобразоватьТелоОтветВОбъектXDTO", ПараметрыСообщения, Отказ);
		Возврат;
	КонецПопытки;
	
	
	Попытка
		ОбъектXDTО.Проверить();
	Исключение
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("КраткоеПредставлениеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПараметрыСообщения.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбработатьОшибку("СтруктураДанныхТелаОтветаНеСоответствуетОжидаемой", ПараметрыСообщения, Отказ); 
	КонецПопытки;
	
КонецПроцедуры

Функция СвойствоXDTO(Знач ОбъектXDTO, Знач Свойство, Значение)
	
	Если Не ОбъектXDTO.Свойства().Получить(Свойство) = Неопределено Тогда 
		Если ТипЗнч(ОбъектXDTO[Свойство]) = Тип("СписокXDTO") Тогда 
			Значение = ОбъектXDTO.ПолучитьСписок(Свойство);
		Иначе
			Значение = ОбъектXDTO.Получить(Свойство);
		КонецЕсли;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Процедура ПрочитатьСвойство(Результат, ИмяСвойстваРезультата, ИмяСвойстваXDTO)
	
	Значение = "";
	Если СвойствоXDTO(Результат.ДанныеXDTO, ИмяСвойстваXDTO, Значение) Тогда 
		Если ТипЗнч(Значение) = Тип("Строка") Тогда 
			Значение = РаскодироватьСтроку(Значение, СпособКодированияСтроки.URLВКодировкеURL);
		КонецЕсли;
		Результат.Вставить(ИмяСвойстваРезультата, Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область JSON

Функция ЗаписатьДанныеВJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Выдает сообщение пользователю и производит запись в журнал регистрации.
//
// Параметры:
//  ИдентификаторОшибки - Строка - Текстовый идентификатор ошибки, доступные идентификаторы.
//   * "ФормированиеСсылкиПроверкаТипаСсылки".
//   * "ФормированиеСсылкиПолучениеРеквизитовДокумент".
//   * "ФормированиеСсылкиПроверкаЗаполненияРеквизитов".
//   * "ФормированиеСсылкиНеНайденаДействительнаяНастройка".
//   * "ФормированиеСсылкиВалютаДокументаНеРазрешена".
//   * "ФормированиеСсылкиСуммаСчетаПревышаетМаксимальноДопустимую".
//   * "НеУдалосьОпределитьВерсиюФорматаДанныхТелаОтвета".
//   * "ВерсияФорматаДанныхТелаОтветаНеПоддерживается".
//   * "НеНайденыОжидаемыеДанныеВТелеОтвета".
//   * "НеУдалосьПреобразоватьТелоОтветВОбъектXDTO".
//   * "СтруктураДанныхТелаОтветаНеСоответствуетОжидаемой".
//   * "ПустоеТелоОтвета".
//   * "СервисВернулОшибку".
//   * "ОтсутствуетСоединениеССервером".
//   * "ОшибкаВыполненияКомандыСервиса".
//   * "ОшибкаИнициализацииСервиса".
//   * "ОшибкаОбновленияНастройкиПриЗагрузкеОпераций".
//   * "НеВключенаФункциональнаяОпция".
//   * "НеВключенаИПП".
//
//  ДополнительныеПараметры - Произвольный - дополнительные параметры обрабатываемые в тексте сообщений.
//  Отказ - Булево - выходной параметр. Всегда устанавливается в Истина.
//
Процедура ОбработатьОшибку(ИдентификаторОшибки, ДополнительныеПараметры = Неопределено, Отказ = Ложь)
	
	СсылкаНаОбъект = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда 
		ДополнительныеПараметры.Свойство("СсылкаНаОбъект", СсылкаНаОбъект);
	КонецЕсли;
	
	Сообщение = ТекстыСообщенийОбОшибках(ИдентификаторОшибки, ДополнительныеПараметры);
	
	ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Сообщение.ВидОперации, Сообщение.ПодробныйТекстОшибки, , "ИнтеграцияСЯндексКассой", СсылкаНаОбъект);
			
			
	Источник = "СообщенияПользователюМодуляИнтеграцияСЯндексКассойСлужебный";
	АдресЗначения = Неопределено;
	
	БуферОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	Если ТипЗнч(БуферОбмена.Данные) = Тип("Соответствие") Тогда
		СообщенияПользователю = БуферОбмена.Данные;
	Иначе
		СообщенияПользователю = Новый Соответствие;
	КонецЕсли;
	
	ТекстСообщения = Сообщение.ТекстСообщения;
	Если ЗначениеЗаполнено(Сообщение.ПодробныйТекстОшибки) 
		И НЕ ПустаяСтрока(Сообщение.ТекстСообщения) И Сообщение.ПодробныйТекстОшибки <> Сообщение.ТекстСообщения Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС
			+ НСтр("ru ='Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	СообщенияПользователю.Вставить(ИдентификаторОшибки, ТекстСообщения);
	ОбщегоНазначения.СкопироватьВБуферОбмена(СообщенияПользователю, Источник);
	
	Отказ = Истина;
	
КонецПроцедуры

Функция ТекстыСообщенийОбОшибках(ИдентификаторОшибки, ДополнительныеПараметры = Неопределено)
	
	Сообщение = Новый Структура("ВидОперации, ПодробныйТекстОшибки, ТекстСообщения");
	
	Если ИдентификаторОшибки = "ФормированиеСсылкиПроверкаТипаСсылки" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "СсылкаНаОбъект", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для Яндекс Кассы'"),
			СтрШаблон(НСтр("ru = 'На основании %1 ссылка на страницу оплаты через ЮKassa формироваться не может'"),
				ДополнительныеПараметры.СсылкаНаОбъект), 
				НСтр("ru = 'Ошибка при проверке типов оснований формирования платежа через ЮKassa'")); 
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиПолучениеРеквизитовДокумент" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "СсылкаНаОбъект", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для Яндекс Кассы'"),
			СтрШаблон(НСтр("ru = 'Не удалось определить реквизиты документа %1'"),
				ДополнительныеПараметры.СсылкаНаОбъект),
				НСтр("ru = 'Не удалось сформировать соответствие общепринятых реквизитов к реквизитам документа, см. процедуру ИнтеграцияСЯндексКассойПереопределяемый.СоответствиеРеквизитовДокументовОснованийПлатежа'")); 
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиПроверкаЗаполненияРеквизитов" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ПредставлениеРеквизита", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для Яндекс Кассы'"),
			СтрШаблон(НСтр("ru = 'Не заполнен реквизит %1, формирование ссылки на страницу оплаты через ЮKassa не возможно'"),
				ДополнительныеПараметры.ПредставлениеРеквизита));
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиНеНайденаДействительнаяНастройка" Тогда
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для Яндекс Кассы'"),
			НСтр("ru = 'Не найдена действующая настройка ЮKassa для этой организации, формирование ссылки на страницу оплаты через ЮKassa не возможно'"),
			СтрШаблон(НСтр("ru = 'Не удалось найти ни одной действительной настройки для организации %1'"),
				ДополнительныеПараметры)); 
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиВалютаДокументаНеРазрешена" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ВалютаДокумента,ТекстВВалюте,ТекстДоступнаяВалюта", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для Яндекс Кассы'"),
			СтрШаблон(НСтр("ru = 'Счет в валюте %1 не может быть выставлен для оплаты через ЮKassa.'"),
				ДополнительныеПараметры.ВалютаДокумента),
			Символы.ПС + СтрШаблон(НСтр("ru = 'Счета можно выставлять только %1: %2'"),
				ДополнительныеПараметры.ТекстВВалюте,
				ДополнительныеПараметры.ТекстДоступнаяВалюта));
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиСуммаСчетаПревышаетМаксимальноДопустимую" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "МаксимальнаяСуммаСчета", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для Яндекс Кассы'"),
			СтрШаблон(НСтр("ru = 'Максимально допустимая сумма счета для оплаты через ЮKassa без заключения договора с сервисом составляет %1 руб. 
							|Для снятия ограничения заключите договор с сервисом ЮKassa или разбейте счет на несколько счетов с меньшими суммами.'"),
				Формат(ДополнительныеПараметры.МаксимальнаяСуммаСчета, "ЧДЦ=2; ЧРГ=' '")));
			
	ИначеЕсли ИдентификаторОшибки = "НеУдалосьОпределитьВерсиюФорматаДанныхТелаОтвета" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			НСтр("ru = 'Не удалось определить версию формата данных'"));
				
	ИначеЕсли ИдентификаторОшибки = "ВерсияФорматаДанныхТелаОтветаНеПоддерживается" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды,ВерсияФормата,ТекущаяВерсияФормата", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			СтрШаблон(НСтр("ru = 'Версия формата данных не поддерживается. Получена версия формата %1, поддерживается версия формата %2'"),
				ДополнительныеПараметры.ВерсияФормата,
				ДополнительныеПараметры.ТекущаяВерсияФормата));
				
	ИначеЕсли ИдентификаторОшибки = "НеНайденыОжидаемыеДанныеВТелеОтвета" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды,ИмяОжидаемогоТипа", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			СтрШаблон(НСтр("ru = 'Не обнаружены данные типа %1'"), ДополнительныеПараметры.ИмяОжидаемогоТипа));
			
	ИначеЕсли ИдентификаторОшибки = "НеУдалосьПреобразоватьТелоОтветВОбъектXDTO" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды,ИнформацияОбОшибке", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			СтрШаблон(НСтр("ru = 'Не удалось построить объектную модель данных ответа. 
							|Подробно: %1'"), ДополнительныеПараметры.ИнформацияОбОшибке));
			
	ИначеЕсли ИдентификаторОшибки = "СтруктураДанныхТелаОтветаНеСоответствуетОжидаемой" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды,КраткоеПредставлениеОшибки,ПодробноеПредставлениеОшибки", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			СтрШаблон(НСтр("ru = '%1. 
							|Подробно: %2'"),
							ДополнительныеПараметры.КраткоеПредставлениеОшибки,
							ДополнительныеПараметры.ПодробноеПредставлениеОшибки));
							
	ИначеЕсли ИдентификаторОшибки = "ПустоеТелоОтвета" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			НСтр("ru = 'Получен пустой ответ от сервиса'"));
			
	ИначеЕсли ИдентификаторОшибки = "СервисВернулОшибку" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды,ТекстСообщения,ТекстОшибкиСервиса", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			ДополнительныеПараметры.ТекстСообщения,
			ДополнительныеПараметры.ТекстОшибкиСервиса);
				
	ИначеЕсли ИдентификаторОшибки = "ОтсутствуетСоединениеССервером" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды,ПодробноеПредставлениеОшибки", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			нСтр("ru='Отсутствует соединение с сервером'"),
			ДополнительныеПараметры.ПодробноеПредставлениеОшибки);
			
	ИначеЕсли ИдентификаторОшибки = "ОшибкаВыполненияКомандыСервиса" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды,ОписаниеОшибки,ПодробноеПредставлениеОшибки", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			СтрШаблон(НСтр("ru = '%1'"), ДополнительныеПараметры.ОписаниеОшибки),
			ДополнительныеПараметры.ПодробноеПредставлениеОшибки);
			
	ИначеЕсли ИдентификаторОшибки = "ОшибкаИнициализацииСервиса" Тогда
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Взаимодействие с сервисом уведомлений по операциям ЮKassa'"),
			НСтр("ru = 'Ошибка инициализации сервиса'"),
			НСтр("ru = 'Ошибка инициализации сервиса'"));
		
	ИначеЕсли ИдентификаторОшибки = "ОшибкаОбновленияНастройкиПриЗагрузкеОпераций" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды,ПодробноеПредставлениеОшибки", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При обновлении настроек сервиса произошла ошибка'"),
			ДополнительныеПараметры.ПодробноеПредставлениеОшибки);
	ИначеЕсли ИдентификаторОшибки = "НеВключенаФункциональнаяОпция" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Не включена функциональная опция ""Интеграция с ЮKassa"", использование функций взаимодействия с сервисом ЮKassa недоступно.'"));
	ИначеЕсли ИдентификаторОшибки = "НеВключенаИПП" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Интернет-поддержка пользователей не подключена, использование функций взаимодействия с сервисом ЮKassa недоступно.'"));
	ИначеЕсли ИдентификаторОшибки = "НеНайденаДействительнаяНастройка" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды,ОснованиеПлатежа", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Не найдена действующая настройка ЮKassa, формирование ссылки на страницу оплаты через ЮKassa не возможно'"),
			СтрШаблон(НСтр("ru = 'Не удалось найти ни одной действительной настройки для %1'"),
				ДополнительныеПараметры.ОснованиеПлатежа));
	ИначеЕсли ИдентификаторОшибки = "НеНайденыДействующиеНастройкиСДоговором" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Не найдены действующие настройки ЮKassa для варианта использования сервиса ""С договором"".'"),
			НСтр("ru = 'Не удалось найти ни одной действующей настройки для варианта использования сервиса ""С договором"".'"));
	ИначеЕсли ИдентификаторОшибки = "НеНайденыДействующиеНастройкиБезДоговора" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Не найдены действующие настройки ЮKassa для варианта использования сервиса ""Без договора"".'"),
			НСтр("ru = 'Не удалось найти ни одной действующей настройки для варианта использования сервиса ""Без договора"".'"));			
	ИначеЕсли ИдентификаторОшибки = "НеНайденыДействующиеНастройки" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Не найдены действующие настройки ЮKassa.'"),
			НСтр("ru = 'Не удалось найти ни одной действующей настройки.'"));
	КонецЕсли;
	
	Возврат Сообщение;

КонецФункции

Функция СообщениеОбОшибке(Знач ВидОперации, Знач ТекстСообщения, Знач ПодробныйТекстОшибки = "")
	
	Сообщение = Новый Структура("ВидОперации, ТекстСообщения, ПодробныйТекстОшибки",
		ВидОперации, ТекстСообщения, ТекстСообщения + ?(Не ПустаяСтрока(ПодробныйТекстОшибки), " " + ПодробныйТекстОшибки, ""));
		
	Возврат Сообщение;
	
КонецФункции

Функция ВидОперацииПоКоманде(Знач ИмяКоманды)
	
	ВидыОпераций = Новый Соответствие();
	ВидыОпераций.Вставить("ЗагрузитьОперацииПоЯндексКассе", НСтр("ru = 'Загрузка операций по ЮKassa'"));
	ВидыОпераций.Вставить("ПолучитьНастройки", НСтр("ru = 'Получение настроек по ЮKassa'"));
	ВидыОпераций.Вставить("ПолучениеПлатежнойСсылки", НСтр("ru = 'Получение платежной ссылки для оплаты через ЮKassa'"));
	ВидыОпераций.Вставить("ПолучитьДанныеПоЗаказу", НСтр("ru = 'Получение данных от сервера'"));
	ВидыОпераций.Вставить("ОбновитьДанныеЗаказа", НСтр("ru = 'Обновление данных заказа на сервере'"));
	
	Операция = ВидыОпераций.Получить(ИмяКоманды);
	
	Если Не ЗначениеЗаполнено(Операция) Тогда
		
		Операция = НСтр("ru = 'Неизвестная операция'");
		
	КонецЕсли;
	
	Возврат Операция;
	
КонецФункции

Процедура ОбработатьОшибкиСервиса(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ, БлокироватьСообщенияОбОшибках)
	
	Если ТипЗнч(РезультатРазбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не БлокироватьСообщенияОбОшибках Тогда
		
		ТекстСообщения = "";
		
		Если ИмяКоманды = "ЗагрузитьОперацииПоЯндексКассе" Тогда 
			ТекстСообщения = НСтр("ru='Ошибка выполнения загрузки операций по ЮKassa'");
		ИначеЕсли ИмяКоманды = "ПолучитьНастройки" Тогда 
			ТекстСообщения = НСтр("ru='Ошибка получения настроек'");
		КонецЕсли;
		
		ПодробныйТекстОшибки = "";
		
		Если ИмяКоманды = "ЗагрузитьОперацииПоЯндексКассе" Тогда 
			Если РезультатРазбора.КодСостояния = 1 Тогда // ошибка
				ТекстОшибкиСервиса = РезультатРазбора.ОписаниеСостояния;
				ПодробныйТекстОшибки = СтрШаблон(НСтр("ru='Ошибка выполнения для организации %1. Подробности: %2.'"),
					РезультатКоманды.ПараметрыКоманды.Организация, ТекстОшибкиСервиса);
			КонецЕсли;
		ИначеЕсли ИмяКоманды = "ОбновитьДанныеЗаказа" Тогда
			Если РезультатРазбора.КодСостояния = 1 Тогда // ошибка
				ТекстОшибкиСервиса   = РезультатРазбора.ОписаниеСостояния;
				ТекстСообщения       = ТекстОшибкиСервиса;
				ПодробныйТекстОшибки = ТекстОшибкиСервиса;
			ИначеЕсли РезультатРазбора.КодСостояния = 2 Тогда // не переданы данные чека
				ТекстСообщения = НСтр("ru = 'Не переданы данные чека. 
					|В настройках ЮKassa необходимо выбрать вариант пробития чеков ""Через ЮKassa""'");
				ПодробныйТекстОшибки = ТекстСообщения;
			КонецЕсли; 
		КонецЕсли;
		
		ВидОперации = СтрШаблон(НСтр("ru = 'Команда ""%1"".'"), ИмяКоманды);

		СообщениеОбОшибке = СтрШаблон("%1 %2", ВидОперации, ПодробныйТекстОшибки);
		
		Если Не ПустаяСтрока(ПодробныйТекстОшибки) Тогда 
			ПараметрыСообщения = Новый Структура();
			ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
			ПараметрыСообщения.Вставить("ТекстСообщения", ТекстСообщения);
			ПараметрыСообщения.Вставить("ТекстОшибкиСервиса", СообщениеОбОшибке);
		
			ОбработатьОшибку("СервисВернулОшибку", ПараметрыСообщения, Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОтработатьОшибкуОтсутствияНастроек(ВходящиеПараметры, ИмяКоманды, Отказ)
	
	Если ВходящиеПараметры.СДоговором = Неопределено Тогда
		ОбработатьОшибку("НеНайденыДействующиеНастройки", Новый Структура("ИмяКоманды", ИмяКоманды), Отказ);
	Иначе			
		Если ВходящиеПараметры.СДоговором Тогда
			ОбработатьОшибку("НеНайденыДействующиеНастройкиСДоговором", Новый Структура("ИмяКоманды", ИмяКоманды), Отказ);
		Иначе
			ОбработатьОшибку("НеНайденыДействующиеНастройкиБезДоговора", Новый Структура("ИмяКоманды", ИмяКоманды), Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиОшибкиПользователю()
	
	Источник = "СообщенияПользователюМодуляИнтеграцияСЯндексКассойСлужебный";
	БуферОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	Если ТипЗнч(БуферОбмена.Данные) = Тип("Соответствие") Тогда 
		СообщенияПользователю = БуферОбмена.Данные;
		
		ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь( , , Ложь);
		
		Для Каждого Сообщение Из СообщенияПользователю Цикл
			ТекстСообщения = Сообщение.Значение;
			Если ТипЗнч(ТекстСообщения) <> Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				Если Не ЭтоПолноправныйПользователь Тогда
					ТекстСообщения = СтрЗаменить(ТекстСообщения, Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'"), "");
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначения.СкопироватьВБуферОбмена(Неопределено, Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПараметрыСообщенияОбОшибке(Знач ИдентификаторОшибки, Знач ОбязательныеПараметры, Параметры) 
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	МассивОбязательныхПараметров = СтрРазделить(ОбязательныеПараметры, ",", Ложь);
	МассивОтсутствующихПараметров = Новый Массив;
	
	Для каждого Имя Из МассивОбязательныхПараметров Цикл
		
		Если Не Параметры.Свойство(Имя) Тогда
			
			МассивОтсутствующихПараметров.Добавить(Имя);
			Параметры.Вставить(Имя, "<" + Имя + ">");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивОтсутствующихПараметров) Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Для ошибки с идентификатором %1 не заданы параметры: %2.'"),
			ИдентификаторОшибки, СтрСоединить(МассивОтсутствующихПараметров, ", "));
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ТекстСообщения, "ИнтеграцияСЯндексКассой");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

Функция ШаблоныСообщенийОснованийПлатежа()
	
	СоответствиеШаблонов = Константы.ПредопределенныеШаблоныСообщений.Получить().Получить();
	
	Если СоответствиеШаблонов = Неопределено Тогда 
		Возврат Новый Соответствие;
	КонецЕсли;	
	
	Возврат СоответствиеШаблонов;
	
КонецФункции

Процедура УстановитьСоответствиеШаблоновОснованиямПлатежа(Соответствие)
	
	Константы.ПредопределенныеШаблоныСообщений.Установить(Новый ХранилищеЗначения(Соответствие));
	
КонецПроцедуры

Функция НайтиПредопределенныйШаблонСообщений(Шаблон, СоответствиеШаблоновОснованиямПлатежа)
	
	МенеджерШаблоновСообщений = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.ШаблоныСообщений");
	
	ШаблонСсылка = МенеджерШаблоновСообщений.ПустаяСсылка();
	
	ИдентификаторШаблона = СоответствиеШаблоновОснованиямПлатежа.Получить(Шаблон.ПолноеИмяТипаНазначения);
	Если Не ТипЗнч(ИдентификаторШаблона) = Тип("УникальныйИдентификатор") Тогда 
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	НайденныйШаблон = МенеджерШаблоновСообщений.ПолучитьСсылку(ИдентификаторШаблона);
	Если НайденныйШаблон.Пустая() Тогда 
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ДанныеШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НайденныйШаблон, 
		"ПометкаУдаления, ПолноеИмяТипаПараметраВводаНаОсновании, ПредназначенДляЭлектронныхПисем");
	
	Если ДанныеШаблона.ПометкаУдаления = Неопределено Тогда
		Возврат ШаблонСсылка;
	ИначеЕсли ДанныеШаблона.ПометкаУдаления Тогда 
		Возврат ШаблонСсылка;
	ИначеЕсли Не ДанныеШаблона.ПолноеИмяТипаПараметраВводаНаОсновании = Шаблон.ПолноеИмяТипаНазначения Тогда 
		Возврат ШаблонСсылка;
	ИначеЕсли Не ДанныеШаблона.ПредназначенДляЭлектронныхПисем Тогда 
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ШаблонСсылка = НайденныйШаблон;
	
	Возврат ШаблонСсылка;
	
КонецФункции

Процедура ПредопределенныеШаблоныСообщений(ПредопределенныеШаблоныСообщений)
	
	ИнтеграцияСЯндексКассойПереопределяемый.ПредопределенныеШаблоныСообщений(ПредопределенныеШаблоныСообщений);
	
КонецПроцедуры

#КонецОбласти

#Область УИП

Функция СтруктураСоответствийБуквИЦифр()
	
	СтруктураСоответствий = Новый Структура;
	
	СтруктураСоответствий.Вставить("А", 1);
	СтруктураСоответствий.Вставить("Б", 2);
	СтруктураСоответствий.Вставить("В", 3);
	СтруктураСоответствий.Вставить("Г", 4);
	СтруктураСоответствий.Вставить("Д", 5);
	СтруктураСоответствий.Вставить("Е", 6);
	СтруктураСоответствий.Вставить("Ж", 7);
	СтруктураСоответствий.Вставить("З", 8);
	СтруктураСоответствий.Вставить("И", 9);
	СтруктураСоответствий.Вставить("К", 10);
	СтруктураСоответствий.Вставить("Л", 11);
	СтруктураСоответствий.Вставить("М", 12);
	СтруктураСоответствий.Вставить("Н", 13);
	СтруктураСоответствий.Вставить("О", 14);
	СтруктураСоответствий.Вставить("П", 15);
	СтруктураСоответствий.Вставить("Р", 16);
	СтруктураСоответствий.Вставить("С", 17);
	СтруктураСоответствий.Вставить("Т", 18);
	СтруктураСоответствий.Вставить("У", 19);
	СтруктураСоответствий.Вставить("Ф", 20);
	СтруктураСоответствий.Вставить("Х", 21);
	СтруктураСоответствий.Вставить("Ц", 22);
	СтруктураСоответствий.Вставить("Ч", 23);
	СтруктураСоответствий.Вставить("Ш", 24);
	СтруктураСоответствий.Вставить("Щ", 25);
	СтруктураСоответствий.Вставить("Э", 26);
	СтруктураСоответствий.Вставить("Ю", 27);
	СтруктураСоответствий.Вставить("Я", 28);
	СтруктураСоответствий.Вставить("Ъ", 33);
	СтруктураСоответствий.Вставить("Ы", 36);
	СтруктураСоответствий.Вставить("Ь", 46);
	СтруктураСоответствий.Вставить("A", 1);
	СтруктураСоответствий.Вставить("B", 3);
	СтруктураСоответствий.Вставить("C", 17);
	СтруктураСоответствий.Вставить("D", 29);
	СтруктураСоответствий.Вставить("E", 6);
	СтруктураСоответствий.Вставить("F", 30);
	СтруктураСоответствий.Вставить("G", 31);
	СтруктураСоответствий.Вставить("H", 13);
	СтруктураСоответствий.Вставить("I", 32);
	СтруктураСоответствий.Вставить("J", 33);
	СтруктураСоответствий.Вставить("K", 10);
	СтруктураСоответствий.Вставить("L", 34);
	СтруктураСоответствий.Вставить("M", 12);
	СтруктураСоответствий.Вставить("N", 35);
	СтруктураСоответствий.Вставить("O", 14);
	СтруктураСоответствий.Вставить("P", 16);
	СтруктураСоответствий.Вставить("Q", 36);
	СтруктураСоответствий.Вставить("R", 37);
	СтруктураСоответствий.Вставить("S", 38);
	СтруктураСоответствий.Вставить("T", 18);
	СтруктураСоответствий.Вставить("U", 39);
	СтруктураСоответствий.Вставить("V", 40);
	СтруктураСоответствий.Вставить("W", 41);
	СтруктураСоответствий.Вставить("X", 21);
	СтруктураСоответствий.Вставить("Y", 19);
	СтруктураСоответствий.Вставить("Z", 42);
	
	Возврат СтруктураСоответствий;
	
КонецФункции

#КонецОбласти

#Область ИнтернетПоддержкаПользователей

// Возвращает данные аутентификации пользователя интернет поддержки.
// В локальном режиме получает логин пароль.
// В модели сервиса - тикет для владельца с именем "1c-yandex.kassa-access".
//
// Возвращаемое значение:
//  Структура - данные аутентификации:
//   * Логин - Строка - в локальном режиме - логин пользователя интернет поддержки.
//                    - в модели сервиса - "AUTH_TOKEN".
//   * Пароль - Строка - в локальном режиме - пароль пользователя интернет поддержки.
//                     - в модели сервиса - тикет аутентификации на портале поддержки.
//
Функция ДанныеАутентификацииИПП()
	
	Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Результат = Новый Структура("Логин, Пароль, Тикет", "", "", "");
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеБилетаИПП = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1c-yandex.kassa-access");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ЗначениеЗаполнено(ДанныеБилетаИПП.КодОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Результат.Тикет = ДанныеБилетаИПП.Тикет;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ДанныеАутентификации = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Результат.Логин  = ДанныеАутентификации.Логин;
		Результат.Пароль = ДанныеАутентификации.Пароль;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АдресаСтендов

Функция АдресСтраницыДоступа() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("Ошибка",      Неопределено);
	Результат.Вставить("URLСтраницы", Неопределено);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		МодульПрограммныйИнтерфейсСервиса = ОбщегоНазначения.ОбщийМодуль("ПрограммныйИнтерфейсСервиса");
		
		Результат.URLСтраницы = ХостПредоставленияДоступа()
			+ "/fresh?freshSubscriberCode="
			+ Формат(МодульПрограммныйИнтерфейсСервиса.АбонентЭтогоПриложения().Код, "ЧГ=0");
			
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		
		Если ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка = "НеЗаполненыДанныеАутентификации";
		Иначе
			Результат.URLСтраницы = ХостПредоставленияДоступа()
				+ "/box?boxModeLogin="
				+ КодироватьСтроку(ДанныеАутентификации.Логин, СпособКодированияСтроки.КодировкаURL);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ХостСервисаИнтеграцииСЯндексКассой()
	
	Возврат "https://kassa-yandex.1c.ru";
	
КонецФункции

Функция ХостПредоставленияДоступа()
	
	Возврат "https://pay.1c.ru/yookassa";
	
КонецФункции

Функция АдресКомандНовогоПротокола()
	
	Возврат "public/api/rest/configuration/v1/";
	
КонецФункции

Функция АдресКомандСтарогоПротокола()
	
	Возврат "cashdesk/v1/";
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ОтправлятьДанныеЧекаВФормате01072019()
	
	Возврат ТекущаяДатаСеанса() >= Дата(2019, 07, 01);
	
КонецФункции

Функция ЭтоАдресПочты(ИсходнаяСтрока)
	
	Возврат СтрНайти(ИсходнаяСтрока, "@") > 0;
	
КонецФункции

// Возвращает строку Base64, содержащей данные строки в виде двоичных данных файла в формате UTF8 без BOM.
//
// Параметры:
//  СтрокаДанных  - Строка - строка для преобразования в BASE64.
//
// Возвращаемое значение:
//   Строка   - строка в BASE64.
//
Функция СтрокаBase64БезBOM(СтрокаДанных)

	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти, КодировкаТекста.UTF8, , Символы.ПС);
	Текст.Записать(СтрокаДанных);
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ВК, "");
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ПС, "");
	
	Возврат СтрокаФорматBase64;

КонецФункции

Функция ХешСумма(ВходящаяСтрока)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	
	ХешированиеДанных.Добавить(ВходящаяСтрока);
	
	ХешСумма = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");

	Возврат ХешСумма;
	
КонецФункции

Процедура ДополнитьДанныеПоНоменклатуре(ДанныеПоНоменклатуре)
		
	ДанныеПоНоменклатуре.Колонки.Добавить("СпособРасчетаСтрокой");
	ДанныеПоНоменклатуре.Колонки.Добавить("ПредметРасчетаСтрокой");
	
	Для каждого ЭлементКоллекции Из ДанныеПоНоменклатуре Цикл
		
		ПредметРасчета = ВидыПредметовРасчета().Получить(ЭлементКоллекции.ПредметРасчета);
		
		ЭлементКоллекции.ПредметРасчетаСтрокой = ?(ПредметРасчета = Неопределено, "commodity", ПредметРасчета);
		
		ЭлементКоллекции.СпособРасчетаСтрокой = "full_prepayment";
		
	КонецЦикла;
		
КонецПроцедуры

Функция ВидыПредметовРасчета()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(1,  "commodity");
	Результат.Вставить(2,  "excise");
	Результат.Вставить(3,  "job");
	Результат.Вставить(4,  "service");
	Результат.Вставить(5,  "gambling_bet");
	Результат.Вставить(6,  "gambling_prize");
	Результат.Вставить(7,  "lottery");
	Результат.Вставить(8,  "lottery_prize");
	Результат.Вставить(9,  "intellectual_activity");
	Результат.Вставить(10, "payment");
	Результат.Вставить(11, "agent_commission");
	Результат.Вставить(12, "composite");
	Результат.Вставить(13, "another");
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#КонецОбласти
