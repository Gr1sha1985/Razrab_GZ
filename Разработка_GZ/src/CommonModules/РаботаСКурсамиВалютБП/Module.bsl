#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает данные для заполнения виджета "Курсы валют" на информационной панели.
// Валюты отсортированы по РеквизитДопУпорядочивания справочника Валюты.
//
// Параметры:
//   КоличествоВалют - Число - количество валют, размещаемое в блоке
//
// Возвращаемое значение:
//    Структура, поля:
//     * ДатаКурсов - Дата - дата, на которую получены курсы
//     * Валюты     - Соответствие:
//        * Ключ     - СправочникСсылка.Валюты - Ссылка на валюту
//        * Значение - Структура, поля:
//           * Наименование - Строка - буквенный код валюты
//           * Курс         - Число  - курс валюты
//           * Кратность    - Число  - кратность курса
//           * ДатаКурса    - Дата   - дата последнего курса
//           * Отклонение   - Число  - отклонение от курса предыдущего дня от ДатаКурса
//           * Порядок      - Число  - порядковый номер валюты для сортировки в блоке
//
Функция ДанныеКурсовВалютДляВиджета(КоличествоВалют) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Валюты.Ссылка КАК Ссылка,
	|	Валюты.Наименование КАК Наименование,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность,
	|	КурсыВалютСрезПоследних.Период КАК ДатаКурса
	|ПОМЕСТИТЬ ВТ_КурсыПоследние
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО Валюты.Ссылка = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	НЕ Валюты.Ссылка = &ВалютаРегламентированногоУчета
	|	И НЕ Валюты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюты.РеквизитДопУпорядочивания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КурсыВалют.Период) КАК Период,
	|	КурсыВалют.Валюта КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ПредыдущийПериод
	|ИЗ
	|	ВТ_КурсыПоследние КАК ВТ_КурсыПоследние
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ВТ_КурсыПоследние.Ссылка = КурсыВалют.Валюта
	|			И ВТ_КурсыПоследние.ДатаКурса > КурсыВалют.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	КурсыВалют.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КурсыПоследние.Ссылка КАК Ссылка,
	|	ВТ_КурсыПоследние.Наименование КАК Наименование,
	|	ВТ_КурсыПоследние.Курс КАК Курс,
	|	ВТ_КурсыПоследние.Кратность КАК Кратность,
	|	ВТ_КурсыПоследние.ДатаКурса КАК ДатаКурса,
	|	ЕСТЬNULL(КурсыВалютПредыдущие.Курс, ВТ_КурсыПоследние.Курс) КАК КурсПредыдущий
	|ИЗ
	|	ВТ_КурсыПоследние КАК ВТ_КурсыПоследние
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредыдущийПериод КАК ВТ_ПредыдущийПериод
	|		ПО ВТ_КурсыПоследние.Ссылка = ВТ_ПредыдущийПериод.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютПредыдущие
	|		ПО (КурсыВалютПредыдущие.Период = ВТ_ПредыдущийПериод.Период)
	|			И (КурсыВалютПредыдущие.Валюта = ВТ_ПредыдущийПериод.Ссылка)";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].КоличествоПолучаемыхЗаписей = КоличествоВалют;
	
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МаксимальнаяДата = Дата("00010101");
	Валюты = Новый Массив;
	Порядок = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ДатаКурса > МаксимальнаяДата Тогда
			МаксимальнаяДата = Выборка.ДатаКурса;
		КонецЕсли;
		
		ДанныеВалюты = НовыйДанныеВалюты();
		ЗаполнитьЗначенияСвойств(ДанныеВалюты, Выборка);
		ДанныеВалюты.Отклонение = Выборка.Курс - Выборка.КурсПредыдущий;
		
		Валюты.Вставить(Порядок, ДанныеВалюты);
		Порядок = Порядок + 1;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Валюты", Валюты);
	Результат.Вставить("ДатаКурсов", МаксимальнаяДата);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак того, что в информационной базе добавлена хотя бы одна валюта,
// кроме валюты регламентированного учета, и для нее установлен курс.
//
// Возвращаемое значение:
//    Булево
Функция ЕстьУстановленныеКурсыВалют() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Валюты.Ссылка КАК Ссылка,
	|	КурсыВалют.Курс КАК Курс
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Валюты.Ссылка = КурсыВалют.Валюта
	|ГДЕ
	|	НЕ Валюты.Ссылка = &ВалютаРегламентированногоУчета
	|	И НЕ Валюты.ПометкаУдаления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьФормуСпискаКурсыВалют(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийМенеджер.КурсыВалют") И ВидФормы = "ФормаСписка" Тогда
		
		ВыбраннаяФорма = "РегистрСведений.КурсыВалют.Форма.ФормаСписка";
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйДанныеВалюты()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Ссылка", Справочники.Валюты.ПустаяСсылка());
	Результат.Вставить("Наименование", "");
	Результат.Вставить("Курс", 1);
	Результат.Вставить("Кратность", 1);
	Результат.Вставить("ДатаКурса", Дата("00010101"));
	Результат.Вставить("Отклонение", 0);
	Результат.Вставить("Порядок", 0);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли