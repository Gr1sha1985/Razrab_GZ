
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера - СправочникСсылка.ДрайверыОборудования - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  Булево - Результат работы функции.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат      		= Истина;
	ВыходныеПараметры 	= Новый Массив();
	ОбъектДрайвера 		= Неопределено;

	БазаТоваров  = Неопределено;
	ФайлОтчета   = Неопределено;
	ФлагВыгрузки = Неопределено;

	Параметры.Свойство("БазаТоваров",  БазаТоваров);
	Параметры.Свойство("ФайлОтчета",   ФайлОтчета);
	Параметры.Свойство("ФлагВыгрузки", ФлагВыгрузки);

	Если БазаТоваров  = Неопределено
	 Или ФайлОтчета   = Неопределено
	 Или ФлагВыгрузки = Неопределено  Тогда
	 	ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.'"));
		Результат = Ложь;
	Иначе
		ОбъектДрайвера = Новый Структура("Параметры", Параметры);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Процедура начинает подключение устройства.
//
Процедура НачатьПодключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Неопределено;
	Результат = ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера -СправочникСсылка.ДрайверыОборудования - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  Булево - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;
	Возврат Результат;

КонецФункции

// Процедура начинает отключение устройства.
//
Процедура НачатьОтключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;
	ВыходныеПараметры = Новый Массив();
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(Параметры, ВыходныеПараметры);
		
	// Указанная команда не поддерживается данным драйвером.
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);

		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура начинает выполнение команды, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры = Неопределено, ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	Если Команда = "ВыгрузитьДанные" Тогда
		
		Товары				= ВходныеПараметры.ДанныеДляВыгрузки.ПрайсЛист;
		ЧастичнаяВыгрузка	= НЕ ВходныеПараметры.ДанныеДляВыгрузки.ПрайсЛист.ПолнаяВыгрузка;
		РасширеннаяВыгрузка	= Истина;
		НачатьВыгрузкуТоваров(ОповещениеПриЗавершении, Параметры, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры, РасширеннаяВыгрузка);
		
	ИначеЕсли Команда = "ЗагрузитьДанные" Тогда
		
		НачатьЗагрузкуРасширенногоОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Определяет результат загрузки отчета.
	ИначеЕсли Команда = "УстановитьФлагДанныеЗагружены" Тогда
		НачатьОтчетЗагружен(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Очистить базу ККМ Offline.
	ИначеЕсли Команда = "ОчиститьБазу" Тогда
		НачатьОчисткуТоваровНаККМ(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		НачатьТестУстройства(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СинхронныеПроцедурыИФункции

// Функция осуществляет очистку товаров на ККМ, подключаемой в режиме Offline.
//
Функция ОчиститьТоварыНаККМ(Параметры, ВыходныеПараметры) 

	Результат = Истина;

	Если Параметры.Свойство("ФорматОбмена") Тогда
		ФорматОбмена = Параметры.ФорматОбмена;
	Иначе
		ФорматОбмена = 0;
	КонецЕсли;
	
	Файл = Новый ТекстовыйДокумент();
	
	ПерваяСтрока = "##@@&&";
	Файл.ДобавитьСтроку(ПерваяСтрока + "$$$CLR {COM_GR_TOV}");
	Файл.ДобавитьСтроку("#");
	
	Попытка
		Файл.Записать(Параметры.БазаТоваров, "windows-1251");
		Если Не ПустаяСтрока(Параметры.ФлагВыгрузки) Тогда
			Файл.Очистить();
			Файл.Записать(Параметры.ФлагВыгрузки, "windows-1251");
		КонецЕсли;
	Исключение
		Результат = Ложь;
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет проверку путей по которым хранятся файлы обмена.
//
Функция ТестУстройства(Параметры, ВыходныеПараметры) 
	
	Результат = Истина;
	ТекстОшибки = "";
	ТекстОшибкиОбщий = "";
	ВремПараметр = "";
	
	Параметры.Свойство("БазаТоваров", ВремПараметр);
	
	Если ПустаяСтрока(ВремПараметр) Тогда
		Результат = Ложь;
		ТекстОшибкиОбщий = НСтр("ru='Файл базы товаров не указан.'");
	КонецЕсли;
	
	Параметры.Свойство("ФайлОтчета", ВремПараметр);
	Если ПустаяСтрока(ВремПараметр) Тогда
		Результат = Ложь;
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + ?(ПустаяСтрока(ТекстОшибкиОбщий), "", Символы.ПС); 
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + НСтр("ru='Файл отчета не указан.'") 
	КонецЕсли;
	
	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
	Если НЕ ПустаяСтрока(ТекстОшибкиОбщий) Тогда
		ВыходныеПараметры.Добавить(ТекстОшибкиОбщий);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АсинхронныеПроцедурыИФункции

#Область ВыгрузкаТоваров

// Процедура осуществляет выгрузку таблицы товаров в ККМ, подключенную в режиме Offline.
//
Процедура НачатьВыгрузкуТоваров(ОповещениеПриЗавершении, Параметры, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры, РасширеннаяВыгрузка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", Параметры.БазаТоваров);
	ДополнительныеПараметры.Вставить("ИмяФайлаФлага", Параметры.ФлагВыгрузки);
	ДополнительныеПараметры.Вставить("Товары", Товары);
	ДополнительныеПараметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
	ДополнительныеПараметры.Вставить("ЧастичнаяВыгрузка", ЧастичнаяВыгрузка);
	ДополнительныеПараметры.Вставить("ФорматОбмена", ?(Параметры.Свойство("ФорматОбмена"), Параметры.ФорматОбмена, 0));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузкаТоваровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ЧастичнаяВыгрузка Тогда
		НачатьПроверкуОбработанностиФайла(ОписаниеОповещения, Параметры.БазаТоваров); // Проверяем обработанность файла.
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина); // Продолжаем выгрузку.
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПроверкуОбработанностиФайла(ОписаниеОповещения, ИмяФайла) 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещенияПриЗавершении", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриПроверкеОбработанностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриПроверкеОбработанностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещенияПриЗавершении = ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении;
	
	Если Результат Тогда
		
		ИмяФайла = ДополнительныеПараметры.ИмяФайла;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияПриЗавершении", ОписаниеОповещенияПриЗавершении);
		ОписаниеЗавершенияПолученияСодержания = Новый ОписаниеОповещения("ПроверкаОбработанностиФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеЗавершенияПолученияСодержания, "ANSI");
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, Истина); // Файла не существует.
	КонецЕсли;
	
КонецПроцедуры

// Проверяет обработанность файла.
// 
// Параметры:
// 	Результат - Структура - .
// 	ДополнительныеПараметры - Структура - где:
// 	*ОписаниеОповещенияПриЗавершении - ОписаниеОповещения - где:
// 	**ДополнительныеПараметры - Структура - где:
// 	***ВыходныеПараметры - Массив - .
Процедура ПроверкаОбработанностиФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении;
	
	Если Результат.Успешно Тогда
		
		Файл = Новый ТекстовыйДокумент;
		Файл.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
		
		Строка = Файл.ПолучитьСтроку(2);
		
		Если СтрДлина(Строка) = 1 И Найти(Строка,"#") > 0 Тогда
			ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(999);
			ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(НСтр("ru='Нельзя сделать выгрузку. Товары предыдущей выгрузки еще не были получены ККМ-offline'"));
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь); // Нельзя если символ во второй строке "#".		
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина); // Можно если символ во второй строке не "#" (если загрузка произошла, там стоит "@").
		КонецЕсли;
		
	Иначе
		ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(999);
		ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь); // Файл не прочитан, следовательно гарантировать обработанность файла нельзя.
	КонецЕсли;
	
КонецПроцедуры

// Завершение выгрузки товаров.
// 
// Параметры:
// 	Результат - Структура - .
// 	ДополнительныеПараметры - Структура - где:
// 	*ВыходныеПараметры - Массив - .
Процедура ВыгрузкаТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		Разделитель = ПолучитьРазделитель();
		ЧастичнаяВыгрузка = ДополнительныеПараметры.ЧастичнаяВыгрузка;
		РасширеннаяВыгрузка = ДополнительныеПараметры.РасширеннаяВыгрузка;
		Товары = ДополнительныеПараметры.Товары;
		ИмяФайла = ДополнительныеПараметры.ИмяФайла;
		ИмяФайлаФлага = ДополнительныеПараметры.ИмяФайлаФлага;
		ФорматОбмена = ДополнительныеПараметры.ФорматОбмена;
		
		Файл = Новый ТекстовыйДокумент();
		
		Результат = СформироватьФайлТоваров(Файл, РасширеннаяВыгрузка, ЧастичнаяВыгрузка, Разделитель, Товары, ФорматОбмена, ВыходныеПараметры);
		
		СформироватьСтавкиНДС(Файл, ФорматОбмена);
		
		Если Результат Тогда
			
			Попытка
				
				Файл.Записать(ИмяФайла, "windows-1251");
				
				Если Не ПустаяСтрока(ИмяФайлаФлага) Тогда
					Файл.Очистить();
					Файл.Записать(ИмяФайлаФлага, "windows-1251");
				КонецЕсли;
				
			Исключение
				
				ВыходныеПараметры.Добавить(999);
				ОписаниеОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
				ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
				Результат = Ложь;
				
			КонецПопытки;
			
		КонецЕсли;
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		
	Иначе
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаРасширенногоОтчета

Процедура НачатьЗагрузкуРасширенногоОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
	
	ИмяФайла = Параметры.ФайлОтчета;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриЗагрузкеРасширенногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

// Проверяет существование файла.
// 
// Параметры:
// 	Результат - Структура - .
// 	ДополнительныеПараметры - Структура - где:
// 	*ВыходныеПараметры - Массив - .
Процедура ПроверкаСуществованияФайлаПриЗагрузкеРасширенногоОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаРасширенногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеОповещения, "ANSI");
		
	Иначе
		
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Файл %Адрес% не существует.'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаРасширенногоОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	ДанныеИзККМ = Неопределено;
	
	Если НЕ Результат.Успешно Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(Результат.ТекстОшибки);
		Результат = Ложь;
	Иначе
		
		Текст = Результат.СодержаниеФайлов[0].ТекстСодержания;
		
		ТекстИсправленный = СтрЗаменить(Текст, МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1(), МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1());
		
		Файл = Новый ТекстовыйДокумент();
		Файл.УстановитьТекст(ТекстИсправленный);
		
		Результат = РазобратьРасширенныйОтчет(Файл, ВыходныеПараметры);
		
		Если Результат Тогда
			ДанныеИзККМ = ВыходныеПараметры[0];
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры, ДанныеИзККМ", Результат, ВыходныеПараметры, ДанныеИзККМ);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ПометкаОтчета

// Функция вызывается после того, как был загружен и обработан отчет о продажах.
//
Процедура НачатьОтчетЗагружен(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
	
	ИмяФайла = Параметры.ФайлОтчета;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриПометкеОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

// Проверка существования файла.
// 
// Параметры:
// 	Результат - Структура - .
// 	ДополнительныеПараметры - Структура - где:
// 	*ВыходныеПараметры - Массив - .
Процедура ПроверкаСуществованияФайлаПриПометкеОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтчетЗагруженЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеОповещения, "ANSI");
		
	Иначе
		
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Файл %Адрес% не существует.'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Завершение выгрузки товаров.
// 
// Параметры:
// 	Результат - Структура - .
// 	ДополнительныеПараметры - Структура - где:
// 	*ВыходныеПараметры - Массив - .
Процедура ОтчетЗагруженЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ТекстОшибки = "";

	Если НЕ Результат.Успешно Тогда
		ТекстОшибки = Результат.ТекстОшибки;
		Результат = Ложь;
	Иначе
		
		ТД = Новый ТекстовыйДокумент;
		ТД.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
		
		Результат = Истина;
		
		ТД.ЗаменитьСтроку(1, "@");
		
		Попытка
			ТД.Записать(ИмяФайла, "windows-1251");
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Адрес%", ИмяФайла);
			Результат = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТоваров

// Процедура осуществляет очистку таблицы товаров в ККМ, подключенную в режиме Offline.
//
Процедура НачатьОчисткуТоваровНаККМ(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры)
	
	Результат = ОчиститьТоварыНаККМ(Параметры, ВыходныеПараметры);
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ТестУстройства

// Процедура осуществляет тестирование устройства.
//
Процедура НачатьТестУстройства(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры)
	
	Результат = ТестУстройства(Параметры, ВыходныеПараметры);
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазобратьРасширенныйОтчет(ТекстовыйДокумент, ВыходныеПараметры)
	
	Возврат ОфлайнОборудованиеШтрихМККМВызовСервера.ОбработатьЗагружаемыеДанныеИзККМ(ТекстовыйДокумент, ВыходныеПараметры);
	
КонецФункции

Функция СформироватьФайлТоваров(ТекстовыйДокумент, РасширеннаяВыгрузка, ЧастичнаяВыгрузка, Разделитель, Товары, ФорматОбмена, ВыходныеПараметры)
	
	Результат = Истина;

	ТекстовыйДокумент = Новый ТекстовыйДокумент();

	Если ЧастичнаяВыгрузка Тогда
		ТекстовыйДокумент.ДобавитьСтроку("##@@&&$$$RPL");
		ТекстовыйДокумент.ДобавитьСтроку("#");
	Иначе
		
		ПерваяСтрока = "##@@&&";
		
		Если РасширеннаяВыгрузка Тогда
			ТекстовыйДокумент.ДобавитьСтроку(ПерваяСтрока + "$$$CLR {COM_GR_TOV}" + " $$$ADD");
		Иначе
			ТекстовыйДокумент.ДобавитьСтроку(ПерваяСтрока + "$$$CLR" + " $$$ADD");
		КонецЕсли;
		
		ТекстовыйДокумент.ДобавитьСтроку("#");
		
	КонецЕсли;
	
	Если РасширеннаяВыгрузка Тогда
		
		Для Каждого ТекГруппа Из Товары.ГруппыТоваров Цикл
			
			ДанныеДляЗаполнения = Новый Структура;
			ДанныеДляЗаполнения.Вставить("Код", Формат(ТекГруппа.Код, "ЧН=0; ЧГ=0"));
			ДанныеДляЗаполнения.Вставить("Наименование", ПодготовитьСтроку(ТекГруппа.Наименование));
			ДанныеДляЗаполнения.Вставить("КодРодительскойГруппы", Формат(ТекГруппа.КодГруппы, "ЧН=0; ЧГ=0"));
			
			ДобавитьСтрокуВФайл(ТекстовыйДокумент, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
	БлокДополнительныхАтрибутов = "";
	
	Для Каждого ТекТовар Из Товары.Товары Цикл
		
		Если Результат Тогда
			
			Параметры = Новый Структура;
			
			Параметры.Вставить("Разделитель",			Разделитель);
			Параметры.Вставить("Уровень",				"Номенклатура");
			Параметры.Вставить("Источник",				ТекТовар);
			Параметры.Вставить("ФорматОбмена",			ФорматОбмена);
			Параметры.Вставить("РасширеннаяВыгрузка",	РасширеннаяВыгрузка);
			
			Если ЗначениеЗаполнено(ТекТовар.КодЕдиницыИзмерения) Тогда
				
				Для Каждого ЕИ Из Товары.ЕдиницыИзмерения Цикл
					
					Если ЕИ.Код = ТекТовар.КодЕдиницыИзмерения Тогда
						Параметры.Вставить("БазоваяЕИ", ЕИ.Наименование);
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				Параметры.Вставить("БазоваяЕИ", "");
			КонецЕсли;
			
			ДополнитьФайл(Результат, ТекстовыйДокумент, Параметры, БлокДополнительныхАтрибутов, ВыходныеПараметры);
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФорматОбмена=0 И НЕ ПустаяСтрока(БлокДополнительныхАтрибутов) Тогда
		ТекстовыйДокумент.ДобавитьСтроку(БлокДополнительныхАтрибутов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает разделитель полей таблицы содержащейся в файле.
//
Функция ПолучитьРазделитель()
	
	Возврат ";";
	
КонецФункции

// Подготавливает строку для выгрузки.
Функция ПодготовитьСтроку(Знач ИсходнаяСтрока)
	
	ИсходнаяСтрока = СтрЗаменить(СокрЛП(ИсходнаяСтрока), ПолучитьРазделитель(), " "); 
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "#", " "); 
	ИсходнаяСтрока = Лев(ИсходнаяСтрока, 100);
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

Функция РазложитьШтрихкодВМассив(ШтрихкодСтрокой)
	
	Штрихкод = СокрЛП(ШтрихкодСтрокой);
	
	СписокРазделителей = Новый Массив;
	
	СписокРазделителей.Добавить(",");
	СписокРазделителей.Добавить(";");
	СписокРазделителей.Добавить(".");
	СписокРазделителей.Добавить(" ");
	
	Для Каждого Разделитель Из СписокРазделителей Цикл
		
		Если Найти(Штрихкод, Разделитель) > 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Массив;
	
	Пока Найти(Штрихкод, Разделитель) > 0 Цикл
		
		ИндексВхождения = Найти(Штрихкод, Разделитель);
		Результат.Добавить(Лев(Штрихкод, ИндексВхождения - 1));
		Штрихкод = Прав(Штрихкод, СтрДлина(Штрихкод) - ИндексВхождения);
		
	КонецЦикла;
	
	Результат.Добавить(Штрихкод);
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьФайл(Результат, Файл, Параметры, БлокДополнительныхАтрибутов = Неопределено, ВыходныеПараметры, Знач ДанныеДляЗаполнения = Неопределено)

	Разделитель			= Параметры.Разделитель;
	Уровень				= Параметры.Уровень;
	Источник			= Параметры.Источник;
	ФорматОбмена		= Параметры.ФорматОбмена;
	РасширеннаяВыгрузка = Параметры.РасширеннаяВыгрузка;
	БазоваяЕИ			= Параметры.БазоваяЕИ;
	
	Если Уровень = "Номенклатура" Тогда
		
		ДанныеДляЗаполнения = Новый Структура;
		
		// Наименование
		ДанныеДляЗаполнения.Вставить("Наименование", ПодготовитьСтроку(Источник.Наименование));
		// КодРодительскойГруппы
		ДанныеДляЗаполнения.Вставить("КодРодительскойГруппы", Формат(Источник.КодГруппы, "ЧДЦ=; ЧГ=0"));
		// Артикул
		ДанныеДляЗаполнения.Вставить("Артикул", ПодготовитьСтроку(Источник.Артикул));
		
		// Ставка НДС
		ДанныеДляЗаполнения.Вставить("СтавкаНДС", Источник.СтавкаНДС);
		
		// ВесовойТовар
		ДанныеДляЗаполнения.Вставить("ВесовойТовар", Источник.ЭтоВесовойТовар);
		// РазрешитьДробноеКоличество
		ДанныеДляЗаполнения.Вставить("РазрешитьДробноеКоличество", ?(Источник.ЭтоВесовойТовар, "1", "0"));
		// Коэффициент
		ДанныеДляЗаполнения.Вставить("Коэффициент", "1.000");
		
		ДанныеДляЗаполнения.Вставить("ПризнакПредметаРасчета", ПолучитьКодПризнакаПредметаРасчета(Источник.ПризнакПредметаРасчета));
		
		Если ЗначениеЗаполнено(Источник.ЭтоАлкоголь) И Источник.ЭтоАлкоголь Тогда
			
			АлкогольныеРеквизиты = Источник.АлкогольныеРеквизиты;
			
			// Алкоголь
			ДанныеДляЗаполнения.Вставить("Алкоголь", Истина);
			// Маркируемый
			ДанныеДляЗаполнения.Вставить("Маркируемый", АлкогольныеРеквизиты.Маркируемый);
			// КодВидаАлкогольнойПродукции
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции);
			// ЕмкостьТары
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", Формат(АлкогольныеРеквизиты.ЕмкостьТары, "ЧДЦ=3; ЧРД=.; ЧГ=0"));
			
			// Крепость
			ДанныеДляЗаполнения.Вставить("Крепость", Формат(АлкогольныеРеквизиты.Крепость, "ЧДЦ=3; ЧРД=.; ЧГ=0"));
			
			ДанныеДляЗаполнения.Вставить("ТипМаркировки", "");
			
		ИначеЕсли ЗначениеЗаполнено(Источник.ЭтоМаркированнаяПродукция) И Источник.ЭтоМаркированнаяПродукция Тогда
			
			ДанныеДляЗаполнения.Вставить("Алкоголь", Ложь);
			ДанныеДляЗаполнения.Вставить("Маркируемый", Истина);
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", "");
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", "");
			ДанныеДляЗаполнения.Вставить("Крепость"   , "");
			Если Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ИзделияИзМеха") ИЛИ Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.ИзделияИзМеха") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0002");
			ИначеЕсли Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ЛекарственныеПрепараты") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0003");
			ИначеЕсли Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция") ИЛИ Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Табак") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0005");
			ИначеЕсли Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары") ИЛИ Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Обувь") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "1520");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.ЛегкаяПромышленность") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0004");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Духи") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0006");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Шины") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0007");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Фотоаппараты") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0008");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.МолочнаяПродукция") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0009");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Велосипеды") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0011");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.КреслаКоляски") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0010");
			Иначе
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "");
			КонецЕсли;
			
		Иначе
			
			ДанныеДляЗаполнения.Вставить("Алкоголь", Ложь);
			ДанныеДляЗаполнения.Вставить("Маркируемый", Ложь);
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", "");
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", "");
			ДанныеДляЗаполнения.Вставить("Крепость"   , "");
			ДанныеДляЗаполнения.Вставить("ТипМаркировки", "");
			
		КонецЕсли;
		
		Если Источник.ИмеетУпаковки Тогда
			
			
			Если ЗначениеЗаполнено(Источник.Код) Тогда
				
				// Код
				ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
				// Цена
				ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
				// Остаток
				ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
				
				// Штрихкод
				Штрихкоды = Новый Массив;
				Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") И НЕ ПустаяСтрока(Источник.Штрихкоды) Тогда
					
					Штрихкоды = РазложитьШтрихкодВМассив(Источник.Штрихкоды);
					
				ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
					
					Если Источник.Штрихкоды.Количество() = 0 Тогда 
						Штрихкоды.Добавить("");
					Иначе
						Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
							Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
						КонецЦикла;
					КонецЕсли;
				Иначе
					Штрихкоды.Добавить("");
				КонецЕсли;
				
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[0], "ЧДЦ=; ЧГ=0"));
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь);
				НачалоИнтервала = 1;
				
				Для Индекс = НачалоИнтервала По Штрихкоды.Количество()-1 Цикл
					
					ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[Индекс], "ЧДЦ=; ЧГ=0"));
					ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь, Истина);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого ТекУпаковка Из Источник.Упаковки Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель",			Разделитель);
				Параметры.Вставить("Уровень",				"Упаковка");
				Параметры.Вставить("Источник",				ТекУпаковка);
				Параметры.Вставить("ФорматОбмена",			ФорматОбмена);
				Параметры.Вставить("РасширеннаяВыгрузка",	РасширеннаяВыгрузка);
				Параметры.Вставить("БазоваяЕИ",				БазоваяЕИ);
				
				ДополнитьФайл(Результат, Файл, Параметры, , ВыходныеПараметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		ИначеЕсли Источник.ИмеетХарактеристики Тогда
			
			Для Каждого ТекХарактеристика Из Источник.Характеристики Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель",			Разделитель);
				Параметры.Вставить("Уровень",				"Характеристика");
				Параметры.Вставить("Источник",				ТекХарактеристика);
				Параметры.Вставить("ФорматОбмена",			ФорматОбмена);
				Параметры.Вставить("РасширеннаяВыгрузка",	РасширеннаяВыгрузка);
				Параметры.Вставить("БазоваяЕИ",				БазоваяЕИ);
				
				ДополнитьФайл(Результат, Файл, Параметры, , ВыходныеПараметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		Иначе
			
			// Код
			ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
			// Цена
			ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			// Остаток
			ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
			
			// Штрихкод
			Штрихкоды = Новый Массив;
			Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") И НЕ ПустаяСтрока(Источник.Штрихкоды) Тогда
				
				Штрихкоды = РазложитьШтрихкодВМассив(Источник.Штрихкоды);
				
			ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
				
				Если Источник.Штрихкоды.Количество() = 0 Тогда 
					Штрихкоды.Добавить("");
				Иначе
					Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
						Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
					КонецЦикла;
				КонецЕсли;
			Иначе
				Штрихкоды.Добавить("");
			КонецЕсли;
			
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[0], "ЧДЦ=; ЧГ=0"));
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь);
			НачалоИнтервала = 1;
			
			Для Индекс = НачалоИнтервала По Штрихкоды.Количество()-1 Цикл
				
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[Индекс], "ЧДЦ=; ЧГ=0"));
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь, Истина);
				
			КонецЦикла;
		
		КонецЕсли;
		
	ИначеЕсли Уровень = "Характеристика" Тогда
		
		Если Источник.ИмеетУпаковки Тогда
			
			// Наименование
			ДанныеДляЗаполнения.Вставить("НаименованиеХарактеристики", ПодготовитьСтроку(Источник.Наименование));
			
			Если ЗначениеЗаполнено(Источник.Код) Тогда
				
				// Код
				ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
				// Цена
				ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
				// Остаток
				ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
				
				// Штрихкод
				Штрихкоды = Новый Массив;
				Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") И НЕ ПустаяСтрока(Источник.Штрихкоды) Тогда
					
					Штрихкоды = РазложитьШтрихкодВМассив(Источник.Штрихкоды);
					
				ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
					
					Если Источник.Штрихкоды.Количество() = 0 Тогда 
						Штрихкоды.Добавить("");
					Иначе
						Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
							Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
						КонецЦикла;
					КонецЕсли;
				Иначе
					Штрихкоды.Добавить("");
				КонецЕсли;
				
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[0], "ЧДЦ=; ЧГ=0"));
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь);
				НачалоИнтервала = 1;
				
				Для Индекс = НачалоИнтервала По Штрихкоды.Количество()-1 Цикл
					
					ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[Индекс], "ЧДЦ=; ЧГ=0"));
					ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь, Истина);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого ТекУпаковка Из Источник.Упаковки Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель",			Разделитель);
				Параметры.Вставить("Уровень",				"Упаковка");
				Параметры.Вставить("Источник",				ТекУпаковка);
				Параметры.Вставить("ФорматОбмена",			ФорматОбмена);
				Параметры.Вставить("РасширеннаяВыгрузка",	РасширеннаяВыгрузка);
				Параметры.Вставить("БазоваяЕИ",				БазоваяЕИ);
				
				ДополнитьФайл(Результат, Файл, Параметры, , ВыходныеПараметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		Иначе
			
			// Наименование
			ДанныеДляЗаполнения.Вставить("НаименованиеХарактеристики", ПодготовитьСтроку(Источник.Наименование));
			// Код
			ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
			// Цена
			ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			// Остаток
			ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
			
			// Штрихкод
			Штрихкоды = Новый Массив;
			Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") И НЕ ПустаяСтрока(Источник.Штрихкоды) Тогда
				
				Штрихкоды = РазложитьШтрихкодВМассив(Источник.Штрихкоды);
				
			ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
				
				Если Источник.Штрихкоды.Количество() = 0 Тогда 
					Штрихкоды.Добавить("");
				Иначе
					Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
						Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
					КонецЦикла;
				КонецЕсли;
			Иначе
				Штрихкоды.Добавить("");
			КонецЕсли;
			
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[0], "ЧДЦ=; ЧГ=0"));
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь);
			НачалоИнтервала = 1;
			
			Для Индекс = НачалоИнтервала По Штрихкоды.Количество()-1 Цикл
				
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[Индекс], "ЧДЦ=; ЧГ=0"));
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь, Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Упаковка" Тогда
		
		МассивСтрокУпаковок = Новый Массив;
		
		// Наименование
		ДанныеДляЗаполнения.Вставить("НаименованиеУпаковки", ПодготовитьСтроку(Источник.Наименование));
		
		// Код
		ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
		// Цена
		ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
		// Остаток
		ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		
		// Штрихкод
		Штрихкоды = Новый Массив;
		Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") И НЕ ПустаяСтрока(Источник.Штрихкоды) Тогда
			
			Штрихкоды = РазложитьШтрихкодВМассив(Источник.Штрихкоды);
			
		ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
			
			Если Источник.Штрихкоды.Количество() = 0 Тогда 
				Штрихкоды.Добавить("");
			Иначе
				Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
					Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Штрихкоды.Добавить("");
		КонецЕсли;
		
		// Коэффициент
		ДанныеДляЗаполнения.Вставить("Коэффициент", Формат(1, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[0], "ЧДЦ=; ЧГ=0"));
		ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь);
		НачалоИнтервала = 1;
		
		Для Индекс = НачалоИнтервала По Штрихкоды.Количество()-1 Цикл
			
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[Индекс], "ЧДЦ=; ЧГ=0"));
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, ЭтоГруппа = Ложь, ДопШтрихкод = Ложь)
	
	ФорматШтрихМКассир = 0;
	
	Наименование = ДанныеДляЗаполнения.Наименование;
	
	Если ДанныеДляЗаполнения.Свойство("НаименованиеХарактеристики") Тогда
		Наименование = Наименование + " " + ДанныеДляЗаполнения.НаименованиеХарактеристики;
	КонецЕсли;
	
	Если ДанныеДляЗаполнения.Свойство("НаименованиеУпаковки") Тогда
		Наименование = Наименование + " " + ДанныеДляЗаполнения.НаименованиеУпаковки;
	КонецЕсли;
	
	Наименование = Лев(Наименование, 100);
	
	Если ДопШтрихкод Тогда
		
		Строка = "# "
			+ ДанныеДляЗаполнения.Код + Разделитель			//	 1. Код
			+ ДанныеДляЗаполнения.Штрихкод + Разделитель	//	 2. Штрихкод
			+ Наименование + Разделитель					//	 3. Наименование
			+ Наименование + Разделитель					//	 4. Наименование для кассы
			+ ДанныеДляЗаполнения.Цена + Разделитель		//	 5. Цена
			+ Разделитель									//	 6. Не используется
			+ Разделитель									//	 7. Не используется
			+ Разделитель									//	 8. Не используется
			+ Разделитель									//	 9. Не используется
			+ ДанныеДляЗаполнения.Коэффициент;				//	10. Коэффициент
			
		Файл.ДобавитьСтроку(Строка);
		
	Иначе
		
		БлокДополнительныхАтрибутов = "";
		
		Если ЭтоГруппа Тогда
			
			Строка =														//   №. Значение для Штрих-М: Кассир / значение для Штрих-М: Кассир miniPOS.
				ДанныеДляЗаполнения.Код + Разделитель						//	 1. Код.
				+ Разделитель												//	 2. Штрихкод.
				+ Наименование + Разделитель								//	 3. Наименование.
				+ Разделитель												//	 4. Текст для чека.
				+ Разделитель												//	 5. Цена.
				+ Разделитель												//	 6. Остаток.
				+ Разделитель												//	 7. Код группы скидок / схема автоматической скидки.
				+ Разделитель												//	 8. Разрешить дробное количество / контроль продажи дробного количества.
				+ Разделитель												//	 9. Номер секции.
				+ Разделитель												//	10. Максимальный процент скидки.
				+ Разделитель												//	11. Код группы налогов / код налоговой схемы.
				+ Разделитель												//	12. Артикул.
				+ Разделитель												//	13. Запрашивать марку / код ценника.
				+ Разделитель												//	14. Не используется / Страна производитель.
				+ Разделитель												//	15. Не используется / Единица измерения.
				+ ДанныеДляЗаполнения.КодРодительскойГруппы + Разделитель	//	16. Код родительской группы.
				+ "0" + Разделитель											//	17. Товар или группа (1 - товар, 0 - группа).
				+ Разделитель												//	18. Список кодов скидочных групп.
				+ Разделитель												//	19. Подакцизный товар / категории блюд.
				+ Разделитель												//	20. Количество модификаторов.
				+ Разделитель												//	21. Комплект.
				+ Разделитель												//	22. Направления печати.
				+ Разделитель												//	23. Отключить контроль остатка.
				+ Разделитель												//	24. Учет по дополнительным характеристикам.
				+ Разделитель												//	25. Макс процент бонуса.
				+ Разделитель												//	26. Признак предмета расчета.
				+ Разделитель												//	27. Группа связанных товаров.
				+ Разделитель												//	28. Тип маркировки.
				+ Разделитель;												//	29. Единица измерения.

					
		Иначе
			
			Строка =																									//	 №. Значение для Штрих-М: Кассир / значение для Штрих-М: Кассир miniPOS.
				ДанныеДляЗаполнения.Код + Разделитель																	//	 1. Код.
				+ ДанныеДляЗаполнения.Штрихкод + Разделитель															//	 2. Штрихкод
				+ Наименование + Разделитель																			//	 3. Наименование
				+ Наименование + Разделитель																			//	 4. Текст для чека
				+ ДанныеДляЗаполнения.Цена + Разделитель																//	 5. Цена
				+ ДанныеДляЗаполнения.Остаток + Разделитель																//	 6. Остаток
				+ Разделитель																							//	 7. Код группы скидок / схема автоматической скидки.
				+ ДанныеДляЗаполнения.РазрешитьДробноеКоличество + Разделитель											//	 8. Разрешить дробное количество / контроль продажи дробного количества.
				+ Разделитель																							//	 9. Номер секции
				+ Разделитель																							//	10. Максимальный процент скидки
				+ ПолучитьКодНалогаПоСтавкеНДС(ДанныеДляЗаполнения.СтавкаНДС) + Разделитель								//	11. Код группы налогов / код налоговой схемы.
				+ ДанныеДляЗаполнения.Артикул + Разделитель																//	12. Артикул
				+ ?(ФорматОбмена = ФорматШтрихМКассир, ?(ДанныеДляЗаполнения.Алкоголь, "1", "0"), "") + Разделитель		//	13. Запрашивать марку / код ценника.
				+ Разделитель																							//	14. Не используется / Страна производитель.
				+ Разделитель																							//	15. Не используется / Единица измерения.
				+ ДанныеДляЗаполнения.КодРодительскойГруппы + Разделитель												//	16. Код родительской группы
				+ "1" + Разделитель																						//	17. Товар или группа (1 - товар, 0 - группа).
				+ Разделитель																							//	18. Список кодов скидочных групп.
				+ ?(ФорматОбмена > ФорматШтрихМКассир, "", ?(ДанныеДляЗаполнения.Маркируемый, "1", "0")) + Разделитель	//	19. Подакцизный товар / категории блюд.
				+ Разделитель																							//	20. Количество модификаторов.
				+ Разделитель																							//	21. Комплект.
				+ Разделитель																							//	22. Направления печати.
				+ Разделитель																							//	23. Отключить контроль остатка.
				+ Разделитель																							//	24. Учет по дополнительным характеристикам.
				+ Разделитель																							//	25. Макс процент бонуса.
				+ ДанныеДляЗаполнения.ПризнакПредметаРасчета + Разделитель												//	26. Признак предмета расчета.
				+ Разделитель																							//	27. Группа связанных товаров.
				+ ДанныеДляЗаполнения.ТипМаркировки + Разделитель														//	28. Тип маркировки.
				+ "";																									//	29. Единица измерения.
				
			Если ДанныеДляЗаполнения.Алкоголь Тогда
				БлокДополнительныхАтрибутов =
					"<goods_attr id=""" + ДанныеДляЗаполнения.Код + """ attr_id=""22"">" + ДанныеДляЗаполнения.КодВидаАлкогольнойПродукции + "</goods_attr>" + Символы.ПС
				  + "<goods_attr id=""" + ДанныеДляЗаполнения.Код + """ attr_id=""23"">" + ДанныеДляЗаполнения.ЕмкостьТары + "</goods_attr>" + Символы.ПС
				  + "<goods_attr id=""" + ДанныеДляЗаполнения.Код + """ attr_id=""24"">" + ?(ДанныеДляЗаполнения.Маркируемый, "0", "1") + "</goods_attr>" + Символы.ПС
				  + "<goods_attr id=""" + ДанныеДляЗаполнения.Код + """ attr_id=""27"">" + ДанныеДляЗаполнения.Крепость + "</goods_attr>";
			КонецЕсли;
			
		КонецЕсли;
		
		Файл.ДобавитьСтроку(Строка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БлокДополнительныхАтрибутов) Тогда
		
		Файл.ДобавитьСтроку(БлокДополнительныхАтрибутов);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКодНалогаПоСтавкеНДС(СтавкаНДС)
	
	КодНалога = Неопределено;
	
	Если СтавкаНДС = "0" Тогда
		
		КодНалога = 4;
		
	ИначеЕсли СтавкаНДС = "10" Тогда
		
		КодНалога = 2;
		
	ИначеЕсли СтавкаНДС = "18" Тогда
		
		КодНалога = 5;
		
	ИначеЕсли СтавкаНДС = "none" Тогда
		
		КодНалога = 3;
		
	ИначеЕсли СтавкаНДС = "20" Тогда
		
		КодНалога = 1;
		
	Иначе
		
		Возврат "";
	КонецЕсли;
	
	Возврат КодНалога;
	
КонецФункции

Функция СформироватьСтавкиНДС(ТекстовыйФайл, ФорматОбмена)
	
	Результат = Истина;
	
	Налоги = СпискиНалоговИКомбинацийНалогов();
	
	БлокСтавок = "";
	БлокГрупп = "";
	
	Если Налоги.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Выгрузка настроек невозможна. Список ставок налога пуст.'");
		Результат = Ложь;
	Иначе
		
		Для Каждого ТекНалог Из Налоги Цикл
			
			Если ТекНалог.Ставки.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru='Выгрузка настроек невозможна. Список ставок налога пуст.'");
				Результат = Ложь;
				Прервать;
			Иначе
				
				Для Каждого ТекСтавка Из ТекНалог.Ставки Цикл
					
					Код = Формат(ТекСтавка.Код, "ЧЦ=2; ЧДЦ=; ЧГ=0");
					Текст30 = ?(СтрДлина(ТекСтавка.Текст)>30, Лев(ТекСтавка.Текст, 30), ТекСтавка.Текст);
					Текст25 = ?(СтрДлина(ТекСтавка.Текст)>25, Лев(ТекСтавка.Текст, 25), ТекСтавка.Текст);
					
					БлокГрупп = БлокГрупп + ?(ЗначениеЗаполнено(БлокГрупп), Символы.ПС, "") + "*"
								+ Код + ";"		// Код группы налогов.
								+ Текст25 + ";"	// Название группы налогов.
								+ Код + ";"		// Номер налога в группе.
								+ Код + ";";	// Код налога.
					
					БлокСтавок = БлокСтавок + ?(ЗначениеЗаполнено(БлокСтавок), Символы.ПС, "") + "+"
								+ Код + ";"																	// Код налога.
								+ Текст25 + ";"																// Название налога.
								+ Текст30 + ";"																// Текст для печати.
								+ Формат(ТекСтавка.Значение, "ЧЦ=5; ЧДЦ=1; ЧРД=.; ЧН=0; ЧГ=0") + ";"		// Процентная ставка налога.
								+ Код;																		// Номер налога в ККМ.
							
				КонецЦикла;
								
			КонецЕсли;
					
		КонецЦикла;
			
	КонецЕсли;
	
	БлокНалогов = БлокГрупп + Символы.ПС + БлокСтавок;
	
	БлокНастроек = БлокНалогов;
	
	Если Результат Тогда
		
		Если ТекстовыйФайл.КоличествоСтрок()>0 Тогда
			
			// Определяем и удаляем блок видов оплаты.
			ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(3);
			
			Если Лев(ТекущаяСтрока, 1) = "*" Тогда
				
				ИндексПервойСтроки = 3;
				
				Для ИндексСтроки = ИндексПервойСтроки По ТекстовыйФайл.КоличествоСтрок() Цикл
					
					ИндексПоследнейСтроки = ИндексСтроки;
					ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(ИндексСтроки);
					
					Если Лев(ТекущаяСтрока, 1) <> "*" И Лев(ТекущаяСтрока, 1) <> "+" Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				ИндексПоследнейСтроки = ИндексПоследнейСтроки - 1;
				
				Пока ИндексПоследнейСтроки>=ИндексПервойСтроки Цикл
					
					ТекстовыйФайл.УдалитьСтроку(ИндексПоследнейСтроки);
					ИндексПоследнейСтроки = ИндексПоследнейСтроки - 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТекстовыйФайл.ВставитьСтроку(3, БлокНастроек);
			
			ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(1);
			
			Если Сред(ТекущаяСтрока, 7, 6) = "$$$CLR" Тогда
				
				Если Найти(ТекущаяСтрока, "{NAL} {GR_NL}")=0 Тогда
					ТекстовыйФайл.ЗаменитьСтроку(1, СтрЗаменить(ТекущаяСтрока, "$$$CLR", "$$$CLR {NAL} {GR_NL}"));
				КонецЕсли;
				
			ИначеЕсли Сред(ТекущаяСтрока, 7, 6) = "$$$RPL" Тогда
				
				Если Найти(ТекущаяСтрока, "{NAL} {GR_NL}")=0 Тогда
					ТекстовыйФайл.ЗаменитьСтроку(1, СтрЗаменить(ТекущаяСтрока, "$$$RPL", "$$$RPL {NAL} {GR_NL}"));
				КонецЕсли;
				
			Иначе
				ТекстовыйФайл.ЗаменитьСтроку(1, СтрЗаменить(ТекущаяСтрока, "##@@&&","##@@&&$$$CLR {NAL} {GR_NL} "));
			КонецЕсли;
			
		Иначе
			
			// Выгружаем в новый файл
			ТекстовыйФайл.ДобавитьСтроку("##@@&&$$$CLR {NAL} {GR_NL}");
			ТекстовыйФайл.ДобавитьСтроку("#");
			ТекстовыйФайл.ДобавитьСтроку(БлокНастроек);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СпискиНалоговИКомбинацийНалогов()
	
	Налоги = Новый Массив;
	
	НалогНДС = Новый Структура;
	
	НалогНДС.Вставить("Код");
	НалогНДС.Вставить("Наименование");
	НалогНДС.Вставить("Ставки", Новый Массив);
	
	НалогНДС.Код = "1";
	НалогНДС.Наименование = "НДС";
	
	// 20%
	СтавкаНалога20 = Новый Структура;
	СтавкаНалога20.Вставить("Код", 1);
	СтавкаНалога20.Вставить("Текст", НСтр("ru = 'НДС 20%'"));
	СтавкаНалога20.Вставить("Значение", 20);
	НалогНДС.Ставки.Добавить(СтавкаНалога20);
	
	// 10%
	СтавкаНалога10 = Новый Структура;
	СтавкаНалога10.Вставить("Код", 2);
	СтавкаНалога10.Вставить("Текст", НСтр("ru = 'НДС 10%'"));
	СтавкаНалога10.Вставить("Значение", 10);
	НалогНДС.Ставки.Добавить(СтавкаНалога10);
	
	// Без НДС
	СтавкаНалогаБезНДС = Новый Структура;
	СтавкаНалогаБезНДС.Вставить("Код", 3);
	СтавкаНалогаБезНДС.Вставить("Текст", НСтр("ru = 'Без НДС'"));
	СтавкаНалогаБезНДС.Вставить("Значение", 0);
	НалогНДС.Ставки.Добавить(СтавкаНалогаБезНДС);
	
	// 0%
	СтавкаНалога0 = Новый Структура;
	СтавкаНалога0.Вставить("Код", 4);
	СтавкаНалога0.Вставить("Текст", НСтр("ru = 'НДС 0%'"));
	СтавкаНалога0.Вставить("Значение", 0);
	НалогНДС.Ставки.Добавить(СтавкаНалога0);
	
	// 18%
	СтавкаНалога18 = Новый Структура;
	СтавкаНалога18.Вставить("Код", 5);
	СтавкаНалога18.Вставить("Текст", НСтр("ru = 'НДС 18%'"));
	СтавкаНалога18.Вставить("Значение", 18);
	НалогНДС.Ставки.Добавить(СтавкаНалога18);
	
	Налоги.Добавить(НалогНДС);
	
	Возврат Налоги;
	
КонецФункции

Функция ПолучитьКодПризнакаПредметаРасчета(ПризнакПредметаРасчета)
	
	//	Признак предмета расчёта:
	//0 – не используется;
	//1 – товар, кроме подакцизного;
	//2 – подакцизный товар;
	//3 – работа;
	//4 – услуга;
	//13 – иной товар;
	
	Если ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар") Тогда
		ПризнакПредметаРасчетаКод = 1;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар") Тогда
		ПризнакПредметаРасчетаКод = 2;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа") Тогда
		ПризнакПредметаРасчетаКод = 3;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга") Тогда
		ПризнакПредметаРасчетаКод = 4;
				
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИнойПредметРасчета") Тогда
		ПризнакПредметаРасчетаКод = 13;
		
	Иначе
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтавкаАзартнойИгры")
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры")
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ЛотерейныйБилет")
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышЛотереи")
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПредоставлениеРИД")
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.АгентскоеВознаграждение")
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата")
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СоставнойПредметРасчета")
		
		ПризнакПредметаРасчетаКод = 1;
	КонецЕсли;
	
	Возврат ПризнакПредметаРасчетаКод;
	
КонецФункции

#КонецОбласти