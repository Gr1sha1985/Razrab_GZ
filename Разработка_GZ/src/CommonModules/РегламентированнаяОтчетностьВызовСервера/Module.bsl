////////////////////////////////////////////////////////////////////////////////
// Модуль содержит общие процедуры и функции для форм регламентированной
// отчетности.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает признак формирования отчета обработкой консолидации отчетности по НДС.
// Параметры:
//   Док - ДокументСсылка.РегламентированныйОтчет - данные сохраненного регламентированного отчета.
//
// Возвращаемое значение:
//   Булево - признак формирования отчета обработкой консолидации отчетности по НДС.
//
Функция ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС(Док) Экспорт
	
	Если Док = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрНайти(ВРег(Док.Комментарий), "КОНСОЛИДИРОВАННАЯ") > 0
		ИЛИ СтрНайти(ВРег(Док.Комментарий), "ЗАГРУЖЕНЫ ИЗ ФАЙЛА") > 0;
	
КонецФункции

Функция ОтчетЗагруженныйОтчет(Док) Экспорт
	
	Если Док = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрНайти(ВРег(Док.Комментарий), "ЗАГРУЖЕНЫ ИЗ ФАЙЛА") > 0;
	
КонецФункции

// Возвращает структуру с выгрузкой бухгалтерской отчетности
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, по которой требуется получить сведения.
//   ОтчетныйПериод - Дата - дата в пределах года, за который требуется получить сведения отчета;
//                  - Число - год, за который требуется получить сведения отчета.
//
// Возвращаемое значение:
//   Структура - выгрузка бухгалтерской отчетности.
//
Функция АктуальнаяБухгалтерскаяОтчетность(Организация, ОтчетныйПериод) Экспорт
	
	ОтчетныйГод = Год(ТекущаяДатаСеанса());
	Если ТипЗнч(ОтчетныйПериод) = Тип("Дата") Тогда
		ОтчетныйГод = Год(ОтчетныйПериод);
	Иначе
		ОтчетныйГод = ОтчетныйПериод;
	КонецЕсли;
	
	ДатаНачала = НачалоГода(Дата(ОтчетныйГод, 1, 1));
	ДатаОкончания = КонецГода(ДатаНачала);
	
	ВидыОтчетов = Новый Массив;
	
	ВидыОтчетов.Добавить("РегламентированныйОтчетБухОтчетность");
	ВидыОтчетов.Добавить("РегламентированныйОтчетБухОтчетностьМП");
	ВидыОтчетов.Добавить("РегламентированныйОтчетБухОтчетностьСОНКО");
	
	Выборка = РегламентированнаяОтчетность.ВыборкаРегламентированныхОтчетов(Организация, ДатаНачала, ДатаОкончания, ВидыОтчетов);
	
	ВыгружаемыйОтчет = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если ВыгружаемыйОтчет = Неопределено Тогда
			ВыгружаемыйОтчет = Выборка.РегламентированныйОтчет;
			
		ИначеЕсли ВыгружаемыйОтчет.ИсточникОтчета <> Выборка.ИсточникОтчета Тогда
			Если Выборка.ИсточникОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
				ВыгружаемыйОтчет = Выборка.РегламентированныйОтчет;
			ИначеЕсли ВыгружаемыйОтчет.ИсточникОтчета <> "РегламентированныйОтчетБухОтчетность"
			        И Выборка.ИсточникОтчета = "РегламентированныйОтчетБухОтчетностьМП" Тогда
				ВыгружаемыйОтчет = Выборка.РегламентированныйОтчет;
			КонецЕсли;
			
		Иначе
			Если ВыгружаемыйОтчет.ДатаОкончания < Выборка.ДатаОкончания Тогда
				ВыгружаемыйОтчет = Выборка.РегламентированныйОтчет;
				
			ИначеЕсли ВыгружаемыйОтчет.ДатаОкончания = Выборка.ДатаОкончания Тогда
				Если ВыгружаемыйОтчет.Вид < Выборка.Вид Тогда
					ВыгружаемыйОтчет = Выборка.РегламентированныйОтчет;
					
				ИначеЕсли ВыгружаемыйОтчет.Вид = Выборка.Вид Тогда
					Если ВыгружаемыйОтчет.МоментВремени().Сравнить(Выборка.МоментВремени) < 0 Тогда
						ВыгружаемыйОтчет = Выборка.РегламентированныйОтчет;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыгружаемыйОтчет;
	
КонецФункции

Функция РеквизитыСохраненнойБухгалтерскойОтчетности(СохраненныйОтчет) Экспорт
	
	Реквизиты = Новый Структура;
	
	Реквизиты.Вставить("ИсточникОтчета", СохраненныйОтчет.ИсточникОтчета);
	Реквизиты.Вставить("ДатаНачала",     СохраненныйОтчет.ДатаНачала);
	Реквизиты.Вставить("ДатаОкончания",  СохраненныйОтчет.ДатаОкончания);
	Реквизиты.Вставить("ВыбраннаяФорма", СохраненныйОтчет.ВыбраннаяФорма);
	
	Возврат Реквизиты;
	
КонецФункции

Функция ПравоДоступаКРегламентированномуОтчету(ИдентификаторОтчета) Экспорт
		
	Если Метаданные.Документы.Найти(ИдентификаторОтчета) <> Неопределено Тогда // это документ
		
		Если НЕ ПравоДоступа("Изменение", Метаданные.Документы[ИдентификаторОтчета]) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли Метаданные.Отчеты.Найти(ИдентификаторОтчета) <> Неопределено Тогда // это отчет
		
		Если НЕ ПравоДоступа("Использование", Метаданные.Отчеты[ИдентификаторОтчета]) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

Функция ЗаполнитьСведенияОбОрганизацииНаСервере(Форма, Знач СписокСведений, Дополнения = "", РазделДляВывода = "Титульный") Экспорт

	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СписокСведений);

	Результат = "";
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Форма.СтруктураРеквизитовФормы.Организация);
	Титульный = Форма["ТабличныйДокумент"];

	// ЕСЛИ В ДЕКЛАРАЦИИ СТАРЫЙ ФОРМАТ "УПОЛНОМОЧЕННЫЙ ПРЕДСТАВИТЕЛЬ", ТОГДА ДАННЫЕ ПО ПРЕДСТАВИТЕЛЮ ПОЛУЧИМ В Т.Ч. ИЗ СПРАВОЧНИКА "РЕГИСТРАЦИИВНАЛОГОВОМОРГАНЕ".
	// Алкогольные декларации.
	Если (Титульный.Области.Найти("ИННУп") <> Неопределено)
	 ИЛИ (Титульный.Области.Найти("ИННУпП") <> Неопределено) Тогда
		// Если в запросе данных передали параметр КодНО, то код Инспекции берем из справочника оргазинаций,
		// иначе, с титульного листа.
		Если ОргСведения.Свойство("КодНО") Тогда
			КодНО = ОргСведения.КодНО;
		Иначе
			КодНО = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КодИМНС");
		КонецЕсли;
		
		Если ОргСведения.Свойство("КППЮЛ") Тогда
			КПП = ОргСведения.КППЮЛ;
		Иначе
			КПП = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КПП1");
		КонецЕсли;

		// Получи данные о представителе.
		ДанныеПредставителя = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОПредставителе(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Ложь, КодНО, КПП);
		
		// "Сольем" данные в общую структуру.
		Если ОргСведения.Свойство("ФИОУпПред") Тогда
			ОргСведения.Вставить("ФИОУпПред", ДанныеПредставителя.ФИОУпПред);
		КонецЕсли;

		Если ОргСведения.Свойство("ИННУпПред") Тогда
			ОргСведения.Вставить("ИННУпПред", ДанныеПредставителя.ИННУпПред);
		КонецЕсли;

	КонецЕсли;

	ФИО = Неопределено;
	Если НЕ ОргСведения.Свойство("ФИО", ФИО) Тогда
		ФИО = Неопределено;
	КонецЕсли;

	НаимЮЛПол = Неопределено;
	Если НЕ ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол) Тогда
		НаимЮЛПол = Неопределено;
	КонецЕсли;

	ТипНП = Неопределено;
	Если ОргСведения.Свойство("ТипНП", ТипНП) Тогда
		Форма.УправлениеЛистамиНаСервере(ТипНП);
	КонецЕсли;

	Для Каждого ПолученныйРезультат Из ОргСведения Цикл

		Результат = ПолученныйРезультат.Значение;
		Параметр  = ПолученныйРезультат.Ключ;

		Если Параметр = "ИННРук" Тогда
			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", "ИННРук", 12, ?(ПБОЮЛ, "            ", Результат));
		ИначеЕсли Параметр = "ИННБух" Тогда
			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", "ИННГБ" , 12, ?(ПБОЮЛ, "            ", Результат));
		ИначеЕсли Параметр = "ИННУпПред" Тогда
			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", "ИННУП" , 12, ?(ПБОЮЛ, "            ", Результат));
		ИначеЕсли Параметр = "НаимЮЛПол" Тогда
			Титульный.Области.ОргНазв.Значение = ?(ФИО = Неопределено, Результат, ?(ПБОЮЛ, ФИО, Результат));
		ИначеЕсли Параметр = "ТелОрганизации" Тогда
			Титульный.Области.ТелОрганизации.Значение = Результат;
		ИначеЕсли Параметр = "ИННЮЛ" Тогда
			Если ЗначениеЗаполнено(Результат) Тогда
				Результат = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, 12, "0");
			Иначе
				Результат = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, 12, " ");
			КонецЕсли;

		ИначеЕсли Параметр = "КППЮЛ" Тогда
			Результат = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, 9, " ");
		ИначеЕсли Параметр = "ОГРН" Тогда
			Если Дополнения = "не предусмотрено для заполнения ФЛ" И ПБОЮЛ Тогда
				ОГРН = "             ";
				ОГРНКоордината = "ОГРН";
			Иначе
				ОГРНКоордината = ?(ТипНП = 3, "ОГРНИП", "ОГРН");
				ОГРН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, ?(ТипНП = 3, 15, 13), " ");
			КонецЕсли;

			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", ОГРНКоордината, СтрДлина(ОГРН), ОГРН);
		ИначеЕсли Параметр = "КодНО" Тогда
			Результат = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, 4, " ");
			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", "КодИМНС", 4, Результат);
		ИначеЕсли Параметр = "НаимНО" Тогда
			Титульный.Области.ОргИМНС.Значение = Результат;
		ИначеЕсли Параметр = "ФИОРук" Тогда
			Титульный.Области.ОргДиректор.Значение  = ?(ПБОЮЛ, "", Результат);
		ИначеЕсли Параметр = "НаимОППол" Тогда
			Если ТипНП = 2 Тогда
				// Если данной организация - обособленное подразделение, то запишем ее название, а в ячейку
				// под название организации, запишем название головной организации.
				Титульный.Области.ОбПодрНазв.Значение = Результат;
				Титульный.Области.ОргНазв.Значение = ОргСведения.НаимГоловнОрг;
			Иначе
				// Если заданная организация не обособка, тогда очистим ее поле.
				Титульный.Области.ОбПодрНазв.Значение = "";
			КонецЕсли;
		ИначеЕсли Параметр = "ФИОБух" Тогда
			Титульный.Области.ОргБухгалтер.Значение = ?(ПБОЮЛ, "", Результат);
		ИначеЕсли Параметр = "ФИОУпПред" Тогда
			Титульный.Области.ОргУП.Значение = ?(ПБОЮЛ, "", Результат);
		ИначеЕсли СтрНайти(Параметр, "ТитульныйЛистФИО_") > 0 Тогда
			Титульный.Области[Сред(Параметр, 18)].Значение = ФИО;
		ИначеЕсли Параметр = "НаимИОПол" Тогда
			Титульный.Области.ИноОргНазв.Значение = Результат;
		КонецЕсли;

		// Если дата подписи поменялась, то перепишем название в декл. только для ПБОЮЛов.
		Если (Параметр = "НаимЮЛПол" Или Параметр = "ФИО") И ПБОЮЛ Тогда
			Титульный.Области.ОргНазв.Значение = ?(ФИО = Неопределено, Результат, ?(ПБОЮЛ, ФИО, Результат));
		КонецЕсли;

	КонецЦикла;

	// Если на титульном листе найдена область ДокУпПред - докуент уполномоченного представителя, тогда получим данные о представителе.
	// В отчете должна быть процедура ПроставитьСведенияОПредставителеОрганизации().
	Если Титульный.Области.Найти("ДокУпПред") <> Неопределено Тогда
		
		Попытка
			
			Титульный.Области["КодИМНС"].Значение = ОргСведения.КодНО;
			Титульный.Области.КПП1.Значение    	  = ОргСведения.КППЮЛ;
			
			Форма.ПроставитьСведенияОПредставителеОрганизации();
			
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;

	Форма.ЗаполнитьДатуВЯчейкахНаСервере();
	
	Возврат ОргСведения;

КонецФункции

Функция ПолучитьСведенияОбОрганизации(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт

	Если Организация = Неопределено ИЛИ Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации") Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(СписокПоказателей) = Тип("Строка") Тогда
		
		СписокПоказателейСтрока = Строка(СписокПоказателей);
		СписокПоказателей = Новый СписокЗначений;
		ВхождениеЗапятой = СтрНайти(СписокПоказателейСтрока, ",");
		Пока ВхождениеЗапятой <> 0 Цикл
			ИмяПоказателя = СокрЛП(Лев(СписокПоказателейСтрока, ВхождениеЗапятой - 1));
			СписокПоказателейСтрока = Сред(СписокПоказателейСтрока, ВхождениеЗапятой + 1);
			ВхождениеЗапятой = СтрНайти(СписокПоказателейСтрока, ",");
			Если ПустаяСтрока(ИмяПоказателя) Тогда
				Продолжить;
			КонецЕсли;
			СписокПоказателей.Добавить("", ИмяПоказателя);
		КонецЦикла;
		ИмяПоказателя = СокрЛП(СписокПоказателейСтрока);
		Если НЕ ПустаяСтрока(ИмяПоказателя) Тогда
			СписокПоказателей.Добавить("", ИмяПоказателя);
		КонецЕсли;
		
	КонецЕсли;	
				
	Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизации(Организация, ДатаЗначения, СписокПоказателей);

КонецФункции

Функция ПолучитьСведенияОПредставителе(ФормаОрганизация, ФормаДатаПодписи, Знач МожетБытьТолькоЮРЛицо = Неопределено, Знач ИФНС = Неопределено, КПП = Неопределено) Экспорт
	
	ДанныеКонтактнойИнформации = Новый Структура("ФИОУпПред, ИННУпПред, ТелУпПред, ВидУдЛичнУпПред, КодУдЛичнУпПред, СерияУдЛичнУпПред
	                                            |,НомерУдЛичнУпПред, ОрганВыданУдЛичнУпПред, ДатаУдЛичнУпПред, ДатаРождУпПред ,МестоРождУпПред
	                                            |,ПолУпПред, ИндексМЖУпПред, СубъектМЖУпПред, КодСубъектМЖУпПред, РайонМЖУпПред, ГородМЖУпПред
	                                            |,НПунктМЖУпПред, УлицаМЖУпПред, ДомМЖУпПред, КорпусМЖУпПред, КвартираМЖУпПред, ГраждУпПред");

	ДанныеКонтактнойИнформации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ФормаОрганизация, ФормаДатаПодписи, "ФИОУпПред"
	                                                                                               + ",ИННУпПред"
	                                                                                               + ",ТелУпПред"
	                                                                                               + ",ВидУдЛичнУпПред"
	                                                                                               + ",КодУдЛичнУпПред"
	                                                                                               + ",СерияУдЛичнУпПред"
	                                                                                               + ",НомерУдЛичнУпПред"
	                                                                                               + ",ОрганВыданУдЛичнУпПред"
	                                                                                               + ",ДатаУдЛичнУпПред"
	                                                                                               + ",ДатаРождУпПред"
	                                                                                               + ",МестоРождУпПред"
	                                                                                               + ",ПолУпПред"
	                                                                                               + ",ИндексМЖУпПред"
	                                                                                               + ",СубъектМЖУпПред"
	                                                                                               + ",КодСубъектМЖУпПред"
	                                                                                               + ",РайонМЖУпПред"
	                                                                                               + ",ГородМЖУпПред"
	                                                                                               + ",НПунктМЖУпПред"
	                                                                                               + ",УлицаМЖУпПред"
	                                                                                               + ",ДомМЖУпПред"
	                                                                                               + ",КорпусМЖУпПред"
	                                                                                               + ",КвартираМЖУпПред"
	                                                                                               + ",ГраждУпПред");

	ДанныеКонтактнойИнформации.Вставить("ПредставительФЛ", Неопределено);
	Если НЕ ПустаяСтрока(ДанныеКонтактнойИнформации.ФИОУпПред) Тогда
		ДанныеКонтактнойИнформации.Вставить("ПредставительФЛ", Истина);
	КонецЕсли;
	ДанныеКонтактнойИнформации.Вставить("ДокументПредставителя", "");
    		
	// Получим данные о представителе из справочника Регистрации ИФНС.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", ФормаОрганизация);
	Запрос.УстановитьПараметр("КодИФНС", ИФНС);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникИФНС.Представитель,
	               |	СправочникИФНС.ДокументПредставителя
	               |ИЗ
	               |Справочник.РегистрацииВНалоговомОргане КАК СправочникИФНС
	               |ГДЕ
	               |СправочникИФНС.Владелец = &Владелец
	               | И СправочникИФНС.Код = &КодИФНС
				   | И СправочникИФНС.КПП = &КПП
                   | И СправочникИФНС.ПометкаУдаления = &ПометкаУдаления";
	СправочникИФНС = Запрос.Выполнить().Выгрузить();

	Если СправочникИФНС.Количество() = 0 Тогда
		Возврат ДанныеКонтактнойИнформации;
	КонецЕсли;

	Представитель = СправочникИФНС[0].Представитель;
	Если Представитель = Неопределено Тогда
		// В справочнике не заполнен представитель ни ФЛ ни ЮР.лицо
		Возврат ДанныеКонтактнойИнформации;
	КонецЕсли;

	Если РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Представитель) Тогда
		
		// В случае, если представитель Физ. лицо, а в отчете только может быть Физ. лицо, тогда возвратим пустую структуру данных.
		Если МожетБытьТолькоЮРЛицо = Истина Тогда
			Возврат ДанныеКонтактнойИнформации;
		КонецЕсли;

		// Признак, что представитель ФИЗ. ЛИЦО.
		ДанныеКонтактнойИнформации.Вставить("ПредставительФЛ", Истина);

		// ФИО Уполномоченного представителя.
		ДанныеФЛ = РегламентированнаяОтчетность.ПолучитьФИОФизЛица(Представитель, ФормаДатаПодписи);
		ДанныеКонтактнойИнформации.Вставить("ФИОУпПред", СокрЛП(СокрЛП(ДанныеФЛ.Фамилия) + " " + СокрЛП(ДанныеФЛ.Имя) + " " + СокрЛП(ДанныеФЛ.Отчество)));

		// ИНН
		ДанныеКонтактнойИнформации.Вставить("ИННУпПред", Представитель.ИНН);

		// Телефон Уполномоченного представителя.

		ДомашнийТелефонФизЛица = ?(РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "ТелефонДомашнийФизическиеЛица"), Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
		Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
		Результат2 = Представитель.КонтактнаяИнформация.НайтиСтроки(Данные);
		ДанныеКонтактнойИнформации.Вставить("ТелУпПред", "");
		Если Результат2.Количество() > 0 Тогда
			ДанныеКонтактнойИнформации.Вставить("ТелУпПред", Результат2[0].Представление);
		КонецЕсли;

		Если Результат2.Количество() > 0 Тогда
			Значение = Результат2[0].Представление;
		Иначе
			Значение = "";
		КонецЕсли;

		// ПАСПОРТНЫЕ ДАННЫЕ ПРЕДСТАВИТЕЛЯ.

		УдЛичн = РегламентированнаяОтчетность.ПолучитьДокФизЛица(Представитель, ФормаДатаПодписи);
		ДанныеКонтактнойИнформации.Вставить("КодУдЛичнУпПред", "");
		ДанныеКонтактнойИнформации.Вставить("ВидУдЛичнУпПред", "");

		Если УдЛичн = Неопределено Тогда
			ДанныеКонтактнойИнформации.Вставить("КодУдЛичнУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("ВидУдЛичнУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("ОрганВыданУдЛичнУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("СерияУдЛичнУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("НомерУдЛичнУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("ДатаУдЛичнУпПред", "");
		Иначе

			Если УдЛичн.ВидДокумента <> Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
				Если Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодМВД") <> Неопределено Тогда
					ДанныеКонтактнойИнформации.Вставить("КодУдЛичнУпПред", УдЛичн.ВидДокумента.КодМВД);
				Иначе
					ДанныеКонтактнойИнформации.Вставить("КодУдЛичнУпПред", "");
				КонецЕсли;
				ДанныеКонтактнойИнформации.Вставить("ВидУдЛичнУпПред", УдЛичн.ВидДокумента.Наименование);
			КонецЕсли;

			ДанныеКонтактнойИнформации.Вставить("ОрганВыданУдЛичнУпПред", УдЛичн.КемВыдан);
			ДанныеКонтактнойИнформации.Вставить("СерияУдЛичнУпПред", УдЛичн.Серия);
			ДанныеКонтактнойИнформации.Вставить("НомерУдЛичнУпПред", УдЛичн.Номер);
			ДанныеКонтактнойИнформации.Вставить("ДатаУдЛичнУпПред", УдЛичн.ДатаВыдачи);
		КонецЕсли;

		// ДАТА РОЖДЕНИЯ.
		ДанныеКонтактнойИнформации.Вставить("ДатаРождУпПред", Представитель.ДатаРождения);
		ДанныеКонтактнойИнформации.Вставить("МестоРождУпПред", Представитель.МестоРождения);
		
		// ПОЛ
		Если Метаданные.Перечисления.Найти("ПолФизическогоЛица") <> Неопределено Тогда

				
			Если Представитель.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				Значение = 2;
			ИначеЕсли Представитель.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				Значение = 1;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		Иначе
			Значение = 0;
		КонецЕсли;
		ДанныеКонтактнойИнформации.Вставить("ПолУпПред", Значение);

		// АДРЕСАНАЯ ЧАСТЬ
		Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
		Результат = Представитель.КонтактнаяИнформация.НайтиСтроки(Данные);

		Если Результат.Количество() = 0 Тогда
			ДанныеКонтактнойИнформации.Вставить("ИндексМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("СубъектМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("КодСубъектМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("РайонМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("ГородМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("НПунктМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("УлицаМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("ДомМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("КорпусМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("КвартираМЖУпПред", "");
		Иначе
			
			СтруктураАдреса = Новый Структура("Индекс, Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира");
			
			РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат[0].ЗначенияПолей, СтруктураАдреса);
									
			// ИНДЕКС М.Ж.
			ДанныеКонтактнойИнформации.Вставить("ИндексМЖУпПред", СтруктураАдреса.Индекс);
			ДанныеКонтактнойИнформации.Вставить("СубъектМЖУпПред", СтруктураАдреса.Регион);
			ДанныеКонтактнойИнформации.Вставить("КодСубъектМЖУпПред", Формат(РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СтруктураАдреса.Регион), "ЧЦ=2; ЧВН="));
			ДанныеКонтактнойИнформации.Вставить("РайонМЖУпПред", СтруктураАдреса.Район);
			ДанныеКонтактнойИнформации.Вставить("ГородМЖУпПред", СтруктураАдреса.Город);
			ДанныеКонтактнойИнформации.Вставить("НПунктМЖУпПред", СтруктураАдреса.НаселенныйПункт);
			ДанныеКонтактнойИнформации.Вставить("УлицаМЖУпПред", СтруктураАдреса.Улица);
			ДанныеКонтактнойИнформации.Вставить("ДомМЖУпПред", СтруктураАдреса.Дом);
			ДанныеКонтактнойИнформации.Вставить("КорпусМЖУпПред", СтруктураАдреса.Корпус);
			ДанныеКонтактнойИнформации.Вставить("КвартираМЖУпПред", СтруктураАдреса.Квартира);
		КонецЕсли;

		Возврат ДанныеКонтактнойИнформации;

	КонецЕсли; // Если представитель физ.лицо.

	Если НЕ РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Представитель) И МожетБытьТолькоЮРЛицо = Ложь Тогда
		Возврат ДанныеКонтактнойИнформации;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, Знач КодПоказателя) Экспорт
	Перем ИмяСтраницы;

	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мПоляПоискаПоказателяВТСП") Тогда
		
		ПоляПоиска = Новый Массив;
		ПоляПоискаСтр = Форма.мПоляПоискаПоказателяВТСП;
		
		ЧислоСимволов = СтрНайти(ПоляПоискаСтр, ",") - 1;
		
		Пока ЧислоСимволов > 0 Цикл
			
			ПоляПоиска.Добавить(СокрЛП(Лев(ПоляПоискаСтр, ЧислоСимволов)));
			
			ПоляПоискаСтр = Сред(ПоляПоискаСтр, ЧислоСимволов + 2);
			
			ЧислоСимволов = СтрНайти(ПоляПоискаСтр, ",") - 1;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПоляПоискаСтр) Тогда
			ПоляПоиска.Добавить(СокрЛП(ПоляПоискаСтр));
		КонецЕсли;
						
	Иначе
		
		ПоляПоиска = Новый Массив;
		ПоляПоиска.Добавить("КодПоказателяПоСоставу");
		ПоляПоиска.Добавить("КодПоказателяПоФорме");
		
	КонецЕсли;

	// В случае, если показатель многострочный (для импорта XML данных в зарплатных отчетах, тогда
	// определим его смысловую часть и найдем раздел.
	Если (Лев(КодПоказателя, 1) = "П") И (СтрНайти(КодПоказателя, "_") = 14) Тогда
		КодПоказателя = Сред(КодПоказателя, 1, СтрНайти(КодПоказателя, "_") - 1);
		// Временный обход для показателя по графе 10 раздела 3. В составе показателей
		// графы 10 нет, поэтому временно привяжем к разделу 3.
		Если КодПоказателя = "П000030001010" Тогда
			Возврат "Раздел3";
		КонецЕсли;
	КонецЕсли;

	Для Каждого ПолеПоиска Из ПоляПоиска Цикл
		
		НайденнаяСтрока = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура(ПолеПоиска, КодПоказателя));
		
		Если НайденнаяСтрока.Количество() > 0 Тогда
			ИмяСтраницы = НайденнаяСтрока[0].ИмяПоляТаблДокумента;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИмяСтраницы;

КонецФункции

Функция ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь, ТипЗнчСуммы = Неопределено, Знач ИмяСекции = "") Экспорт
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницыПанели];

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			// Определим, присутствует ли многостраничность в декларации или нет.
			Попытка
				МногостраничностьЕсть = ?(Форма.мСтруктураМногостраничныхРазделов = Неопределено, Ложь, Истина);
			Исключение
				МногостраничностьЕсть = Ложь;
			КонецПопытки;

			Если МногостраничностьЕсть Тогда
				Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
					
					ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
					
					// Раздел является многостраничным. Определим активную страницу раздела:
					СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

					Если СтрТаблицаСтраницы.Количество() > 0 Тогда
						НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
					КонецЕсли;
				КонецЕсли;

				Если МассивВариантовЗаполненияСтраниц.Количество() < НомерТекущейСтраницы Тогда
					
					Если МассивВариантовЗаполненияСтраниц.Количество() = 0 Тогда
						МассивВариантовЗаполненияСтраниц.Добавить();
					КонецЕсли;
					
					Для Сч = МассивВариантовЗаполненияСтраниц.Количество() По НомерТекущейСтраницы Цикл
						
						Если ТипЗнч(МассивВариантовЗаполненияСтраниц[0].ТаблицаВариантовЗаполнения)
						   = Тип("ДанныеФормыКоллекция") Тогда
						
							ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
							
							КопироватьДанныеФормы(МассивВариантовЗаполненияСтраниц[0].ТаблицаВариантовЗаполнения,
								ТаблВариантов.ТаблицаВариантовЗаполнения);
							
						Иначе
							
							МассивВариантовЗаполненияСтраниц.Добавить(
								МассивВариантовЗаполненияСтраниц[0].ТаблицаВариантовЗаполнения.Скопировать());
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;

			КонецЕсли;
			
			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1].ТаблицаВариантовЗаполнения;
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
			ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));

			ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));

			ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));

			Если ТипЗнчСуммы = Неопределено Тогда
				ОписаниеТиповЧисло15   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
			Иначе
				ОписаниеТиповЧисло15 = ТипЗнчСуммы;
			КонецЕсли;

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

			// варианты заполнения определяем по макету СоставПоказателей
						
			МакетСоставаПоказателей = ОбъектОтчета(Форма.ИмяФормы).ПолучитьМакет(Форма.СтруктураРеквизитовФормы.мСоставПоказателей);

			ИмяСекции = ?(ЗначениеЗаполнено(ИмяСекции) И ТипЗнч(ИмяСекции) = Тип("Строка"), ИмяСекции, ИмяСтраницыПанели);
			
			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСекции);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

					КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
						НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции

Функция ПолучитьНазваниеРегионаПоКоду(КодРегиона) Экспорт
    	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		ЧисловойКодРегиона = Число(КодРегиона);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат АдресныйКлассификатор.НаименованиеРегионаПоКоду(ЧисловойКодРегиона);

КонецФункции

Процедура ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
	
	ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, ,ТипСмещенияТабличногоДокумента.ПоВертикали);
		
КонецПроцедуры

Процедура УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
	
	ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
КонецПроцедуры

Процедура ВывестиРазделВТабличныйДокументНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти    = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти   = КоординатаВерх;
		// Координаты текущей области
		Если Зап.Область = НазвОбласти Тогда
			Низ           = КоординатаНиз;
			Верх          = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
			
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именнованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
		
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
		
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
	КонецЦикла;
		
КонецПроцедуры

Процедура ПолучитьСведения(ОргСведения, ПБОЮЛ, Организация, ДатаПодписи, СписокСведений, ДанныеПредставителя, КодФНС, КПП) Экспорт
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СписокСведений);
	
	// Если в запросе данных передали параметр КодНО, то код Инспекции берем из справочника оргазинаций,
	// иначе, с титульного листа.
	Если ОргСведения.Свойство("КодНО") Тогда
		КодНО = ОргСведения.КодНО;
	Иначе
		КодНО = КодФНС;
	КонецЕсли;
		
	// Получим данные о представителе.
	ДанныеПредставителя = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОПредставителе(Организация, ДатаПодписи, Ложь, КодНО, КПП);
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
		
КонецПроцедуры

Функция КПППоКомбинацииОрганизацииИКодаИФНС(Организация, КодИФНС) Экспорт
	
	Если Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	РегистрацииВНалоговомОргане.КПП КАК КПП
	                      |ИЗ
	                      |	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	                      |ГДЕ
	                      |	РегистрацииВНалоговомОргане.Владелец = &Владелец
	                      |	И РегистрацииВНалоговомОргане.Код = &Код
						  |	И РегистрацииВНалоговомОргане.ПометкаУдаления = &ПометкаУдаления");
						  
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);					  
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("Код", КодИФНС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат СокрЛП(Выборка.КПП);
		
	Иначе
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДатаСеанса(), "КППЮЛ");
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.КППЮЛ) Тогда
			
			Возврат СокрЛП(СведенияОбОрганизации.КППЮЛ);
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Невозможно определить КПП для организации %1 и ИФНС с кодом %2!'"), Организация, КодИФНС);
			
			Сообщение.Сообщить();
			
			Возврат Неопределено;
			
		КонецЕсли
		
	КонецЕсли;
	
КонецФункции

Функция ВывестиСведенияСлужебнойЧастиИОбОтправителе30(Текст, Организация, КПП = Неопределено, КодНалоговогоОргана, ВерсияФормата = "3.00") Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ВывестиСведенияСлужебнойЧасти30(Текст, Организация, , , КПП, КодНалоговогоОргана, , ВерсияФормата)
	 ИЛИ НЕ РегламентированнаяОтчетность.ВывестиСведенияОбОтправителе30(Текст, Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоЮридическоеЛицо(Организация) Экспорт
	
	Возврат РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
	
КонецФункции

Функция ИННСоответствуетТребованиямНаСервере(Знач ИНН, Знач ТипЛица) Экспорт

	ИНН = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИНН);

	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Перечисления.Найти("ЮридическоеФизическоеЛицо") = Неопределено Тогда
		ПроверяетсяИННФизЛица = ТипЛица;
	Иначе
		ПроверяетсяИННФизЛица = (ТипЛица = Истина ИЛИ ТипЛица = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	КонецЕсли;
	
	Если ДлинаИНН = 10  И НЕ ПроверяетсяИННФизЛица Тогда

		КонтрольнаяСумма = 0;

		Для Н = 1 По 9 Цикл

			Если 	  Н = 1 Тогда
				Множитель = 2;
			ИначеЕсли Н = 2 Тогда
				Множитель = 4;
			ИначеЕсли Н = 3 Тогда
				Множитель = 10;
			ИначеЕсли Н = 4 Тогда
				Множитель = 3;
			ИначеЕсли Н = 5 Тогда
				Множитель = 5;
			ИначеЕсли Н = 6 Тогда
				Множитель = 9;
			ИначеЕсли Н = 7 Тогда
				Множитель = 4;
			ИначеЕсли Н = 8 Тогда
				Множитель = 6;
			ИначеЕсли Н = 9 Тогда
				Множитель = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
			
		КонецЦикла; 
		
		КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
		
		Если КонтрольныйРазряд <> Число(Сред(ИНН,10,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	ИначеЕсли ДлинаИНН =12 И ПроверяетсяИННФизЛица Тогда
		
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;
		
		Для Н=1 По 11 Цикл
			
			// Расчет множителя для 11-го и 12-го разрядов
			Если Н = 1 Тогда
				Множитель11 = 7;
				Множитель12 = 3;
			ИначеЕсли Н = 2 Тогда
				Множитель11 = 2;
				Множитель12 = 7;
			ИначеЕсли Н = 3 Тогда
				Множитель11 = 4;
				Множитель12 = 2;
			ИначеЕсли Н = 4 Тогда
				Множитель11 = 10;
				Множитель12 = 4;
			ИначеЕсли Н = 5 Тогда
				Множитель11 = 3;
				Множитель12 = 10;
			ИначеЕсли Н = 6 Тогда
				Множитель11 = 5;
				Множитель12 = 3;
			ИначеЕсли Н = 7 Тогда
				Множитель11 = 9;
				Множитель12 = 5;
			ИначеЕсли Н = 8 Тогда
				Множитель11 = 4;
				Множитель12 = 9;
			ИначеЕсли Н = 9 Тогда
				Множитель11 = 6;
				Множитель12 = 4;
			ИначеЕсли Н = 10 Тогда
				Множитель11 = 8;
				Множитель12 = 6;
			ИначеЕсли Н = 11 Тогда
				Множитель11 = 0;
				Множитель12 = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
			
		КонецЦикла; 
		
		КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
		КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
		
		Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1))
			ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьСчетчикВыгруженныхФайлов(Организация, СчФайлов, ТипСчетчика = Неопределено, ПериодУстановки = Неопределено, ИФНС = "") Экспорт
	
	Если ТипСчетчика = "СчетчикФайловАлко" Тогда
		ТипСчетчика = Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайловАлко;
	КонецЕсли;
		
	МенЗап = РегистрыСведений.СчетчикиВыгрузок.СоздатьМенеджерЗаписи();
	МенЗап.Период = НачалоГода(?(ПериодУстановки = Неопределено, ТекущаяДатаСеанса(), ПериодУстановки));
	МенЗап.Организация = Организация;
	МенЗап.Тип = ?(ТипСчетчика = Неопределено, Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайлов, ТипСчетчика);
	МенЗап.ИФНС = ?(ТекущаяДатаСеанса() < '20070701000000', "", ИФНС);
	МенЗап.Значение = СчФайлов;
	МенЗап.Записать(Истина);
	
КонецПроцедуры

Функция КодРегионаПоНазванию(Название) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Название) Тогда
		Возврат "";
	КонецЕсли;
	
	Назв = СокрЛП(Название);
	КодРегиона = АдресныйКлассификатор.КодРегионаПоНаименованию(Назв);
	
	Если ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат Формат(КодРегиона, "ЧЦ=2; ЧВН=");
	КонецЕсли;
	
	ПервыйПробел = СтрНайти(Назв, " ");
	Если ПервыйПробел <> 0 Тогда
		Назв = Лев(Назв, ПервыйПробел - 1);
	КонецЕсли;
	
	МакетРегионы = Обработки.ОбщиеОбъектыРеглОтчетности.ПолучитьМакет("Регионы");
	НРегАдресРегион = НРег(Название);
	Для Инд = 1 По МакетРегионы.ВысотаТаблицы Цикл
		ТекРегион = СокрЛП(МакетРегионы.Область(Инд, 1, Инд, 1).Текст);
		Если Лев(НРегАдресРегион, СтрДлина(ТекРегион)) = НРег(ТекРегион) Тогда
			Возврат СокрЛП(МакетРегионы.Область(Инд, 2, Инд, 2).Текст);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Процедура ПолучитьШаблонПоИмени(Выгрузка) Экспорт
	Попытка
		РезультатЗапроса = РегламентированнаяОтчетность.ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм(Выгрузка.ИмяФайла);
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Выгрузка.Данные = Выборка.Шаблон.Получить();
				Возврат;
			КонецЦикла;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='ошибка при получении шаблона из регистра'"));
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьШаблоныМашиночитаемыхФорм(Знач ИмяОтчета, ПрефиксИмениМакетаШаблона, КоличествоВыгруженныхШаблонов, ТочныеПараметрыШаблонаЗаданы, ПрефиксИмениШаблона, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм) Экспорт
	
	ШаблоныМашиночитаемыхФорм = Новый СписокЗначений;
	
	ОбъектМетаданных = ОбъектОтчета(ИмяОтчета);
	МакетыОтчета = ОбъектМетаданных.Метаданные().Макеты;
		
	Для Каждого МакетОтчета Из МакетыОтчета Цикл
		Если МакетОтчета.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ДвоичныеДанные
		И Лев(нрег(МакетОтчета.Имя), СтрДлина(ПрефиксИмениМакетаШаблона)) = нрег(ПрефиксИмениМакетаШаблона) Тогда
			СинонимМакета = СокрЛП(МакетОтчета.Синоним);
			ВхождениеПробела = СтрНайти(СинонимМакета, " ");
			ИмяФайлаШаблона = ?(ВхождениеПробела = 0, СинонимМакета, Лев(СинонимМакета, СтрДлина(ВхождениеПробела - 1)));
			Попытка
				ШаблоныМашиночитаемыхФорм.Добавить(ОбъектМетаданных.ПолучитьМакет(МакетОтчета.Имя), ИмяФайлаШаблона);
				КоличествоВыгруженныхШаблонов = КоличествоВыгруженныхШаблонов + 1;
			Исключение
								
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось получить шаблон машиночитаемой формы ""%1""!%2'"), ИмяФайлаШаблона, Символы.ПС + ОписаниеОшибки());
				
				Сообщение.Сообщить();
				
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	// выгружаем внешние шаблоны
	Если ТочныеПараметрыШаблонаЗаданы Тогда
		РезультатЗапроса = РегламентированнаяОтчетность.ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм(ПрефиксИмениШаблона + "%");
		Если КоличествоВыгруженныхШаблонов = 0 И РезультатЗапроса.Пустой() Тогда
			РезультатЗапроса = РегламентированнаяОтчетность.ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм();
		КонецЕсли;
	Иначе
		РезультатЗапроса = РегламентированнаяОтчетность.ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм();
	КонецЕсли;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				ШаблоныМашиночитаемыхФорм.Добавить(Выборка.Шаблон.Получить(), Выборка.ИмяФайлаШаблона);
			Исключение
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось получить шаблон машиночитаемой формы ""%1""!%2'"), Выборка.ИмяФайлаШаблона, Символы.ПС + ОписаниеОшибки());
				
				Сообщение.Сообщить();
				
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
		
	РегламентированнаяОтчетностьВызовСервера.ПолучитьДистрибутивКомпонентыПечатиМашиночитаемыхФорм(ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
	
	Возврат ШаблоныМашиночитаемыхФорм;
	
КонецФункции

Функция ПолучитьШаблоныМашиночитаемыхФормУведомленияОСпецрежимах(ИмяФайлаВыгрузки, ПрефиксИмениМакетаШаблона, КоличествоВыгруженныхШаблонов, ТочныеПараметрыШаблонаЗаданы, ПрефиксИмениШаблона, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ДанныеМакета) Экспорт
	
	ШаблоныМашиночитаемыхФорм = Новый СписокЗначений;
	ШаблоныМашиночитаемыхФорм.Добавить(ДанныеМакета, ИмяФайлаВыгрузки);
	КоличествоВыгруженныхШаблонов = КоличествоВыгруженныхШаблонов + 1;
	
	// выгружаем внешние шаблоны
	Если ТочныеПараметрыШаблонаЗаданы Тогда
		РезультатЗапроса = РегламентированнаяОтчетность.ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм(ПрефиксИмениШаблона + "%");
		Если КоличествоВыгруженныхШаблонов = 0 И РезультатЗапроса.Пустой() Тогда
			РезультатЗапроса = РегламентированнаяОтчетность.ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм();
		КонецЕсли;
	Иначе
		РезультатЗапроса = РегламентированнаяОтчетность.ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм();
	КонецЕсли;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				ШаблоныМашиночитаемыхФорм.Добавить(Выборка.Шаблон.Получить(), Выборка.ИмяФайлаШаблона);
			Исключение
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось получить шаблон машиночитаемой формы ""%1""!%2'"), Выборка.ИмяФайлаШаблона, Символы.ПС + ОписаниеОшибки());
				
				Сообщение.Сообщить();
				
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
		
	РегламентированнаяОтчетностьВызовСервера.ПолучитьДистрибутивКомпонентыПечатиМашиночитаемыхФорм(ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
	
	Возврат ШаблоныМашиночитаемыхФорм;
	
КонецФункции

Процедура ПолучитьДистрибутивКомпонентыПечатиМашиночитаемыхФорм(ДистрибутивКомпонентыПечатиМашиночитаемыхФорм) Экспорт
	
	МетаданныеМакета = Метаданные.Обработки.ОбщиеОбъектыРеглОтчетности.Макеты.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
		
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм.Добавить(Обработки.ОбщиеОбъектыРеглОтчетности.ПолучитьМакет(МетаданныеМакета.Имя), МетаданныеМакета.Синоним);
	
КонецПроцедуры

Функция ПолучитьСсылкуНаФормуРеглОтчета(ТекДок, ПараметрыФормы) Экспорт
			
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ТекДок.ДатаНачала);
	ПараметрыФормы.Вставить("мСохраненныйДок", ТекДок.Ссылка);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", ТекДок.ДатаОкончания);
	ПараметрыФормы.Вставить("Организация", ТекДок.Организация);
	ПараметрыФормы.Вставить("мВыбраннаяФорма", ТекДок.ВыбраннаяФорма);
		
	Возврат Строка(РегламентированнаяОтчетность.ФормаРеглОтчета(ТекДок.ИсточникОтчета, ТекДок.ВыбраннаяФорма, , ТекДок.Ссылка)) + ".Форма." + Строка(ТекДок.ВыбраннаяФорма);
		
КонецФункции

Функция ВерсияФормыСовпадаетСВерсиейСохраненногоОтчета(Док, ВерсияФормы) Экспорт
	
	ВерсияФормыДанных = Док.ДанныеОтчета.Получить().ВерсияФормы;
	
	Если НЕ РегламентированнаяОтчетность.ПродолжитьПриНесоответствииВерсийФорм(ВерсияФормыДанных, ВерсияФормы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПараметрыФормыИзСохраненногоОтчета(Док, ПредставлениеДокументаРеглОтч) Экспорт
	
	ПредставлениеДокументаРеглОтч = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Док.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоДня(Док.ДатаНачала));
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  КонецДня(Док.ДатаОкончания));
	ПараметрыФормы.Вставить("мСохраненныйДок",          Док.Ссылка);
	ПараметрыФормы.Вставить("мПериодичность",           Док.Периодичность);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          Док.ВыбраннаяФорма);
	ПараметрыФормы.Вставить("ИсточникОтчета",           Док.ИсточникОтчета);
	ПараметрыФормы.Вставить("Организация",              Док.Организация);
			
	Возврат ПараметрыФормы;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Доки) Экспорт
	
	Для Каждого Док Из Доки Цикл
		Если Док.Значение.Организация <> Доки.Получить(0).Значение.Организация Тогда
			Возврат 1;
		КонецЕсли;
		Если КонецДня(Док.Значение.ДатаОкончания) <> КонецДня(Доки.Получить(0).Значение.ДатаОкончания) Тогда
			Возврат 2;
		КонецЕсли;
	КонецЦикла;
		
	Возврат 0;
	
КонецФункции

Функция СформироватьСтруктуруПараметровФайлаВыгрузкиНаСервере(Адрес, ВерФормВыгрузки) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	
	ТекстДок = ПолучитьИзВременногоХранилища(Адрес);
		
	ТекстДок.Записать(ВремФайл, ?(СтрЧислоВхождений(ВерФормВыгрузки, "Версия 2") > 0 ИЛИ СтрЧислоВхождений(ВерФормВыгрузки, "Версия 3") > 0, "cp866", "windows-1251"));
	
	СтруктураПараметровФайлаВыгрузки = РегламентированнаяОтчетностьКлиентСервер.СформироватьСтруктуруПараметровФайлаВыгрузки(ВремФайл);
	
	// Удаляем временный файл.
	Попытка
		УдалитьФайлы(ВремФайл);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление временного файла регламентированной отчетности'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат СтруктураПараметровФайлаВыгрузки;

КонецФункции

Функция РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено; // отсутствует активная область табличного документа
	Иначе
		ИмяТекОбласти = ТекущаяОбласть.Имя;
		ПозицияНачалаИмениПараметра = СтрНайти(ИмяТекОбласти, "П0");
		ИмяАктивногоРаздела = Сред(ИмяТекОбласти, ПозицияНачалаИмениПараметра, ДлИмениОбласти);
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСведенияОПредставителеОрганизации(Организация, КодИФНС, КПП, ДатаПодписиОтчета)	Экспорт
	
	Результат = Новый Структура("ПредставительЮр, ПредставительФЛ, ДокументПредставителя, Фамилия, Имя, Отчество", "", "", "", "", "", "");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("КодИФНС", КодИФНС);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникИФНС.КПП,
	               |	СправочникИФНС.Код КАК КодНО,
	               |	СправочникИФНС.НаименованиеИФНС КАК Наименование,
	               |	СправочникИФНС.Представитель,
	               |	СправочникИФНС.ДокументПредставителя
	               |ИЗ
	               |Справочник.РегистрацииВНалоговомОргане КАК СправочникИФНС
	               |ГДЕ
	               |СправочникИФНС.Владелец = &Владелец
	               | И СправочникИФНС.Код = &КодИФНС
				   | И СправочникИФНС.КПП = &КПП
                   | И СправочникИФНС.ПометкаУдаления = &ПометкаУдаления";
	СправочникИФНС = Запрос.Выполнить().Выгрузить();
	Если СправочникИФНС.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// В справочнике регистрации ИФНС может быть только информация по одной ИФНС!
	Представитель = СправочникИФНС[0].Представитель;
	Если НЕ РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Представитель) Тогда
		Если ЗначениеЗаполнено(Представитель) Тогда
			Если Представитель.Метаданные().Реквизиты.Найти("НаименованиеПолное") = Неопределено Тогда
				Результат.Вставить("ПредставительЮр", Представитель.Наименование);	
			Иначе
				Результат.Вставить("ПредставительЮр", Представитель.НаименованиеПолное);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Представитель) Тогда
		ЗаполнитьЗначенияСвойств(Результат, РегламентированнаяОтчетность.ПолучитьФИОФизЛица(Представитель, ДатаПодписиОтчета));
		Результат.Вставить("ПредставительФЛ", СокрЛП(СокрЛП(Результат.Фамилия) + " " + СокрЛП(Результат.Имя) + " " + СокрЛП(Результат.Отчество)));
	КонецЕсли;
	Результат.Вставить("ДокументПредставителя", СправочникИФНС[0].ДокументПредставителя);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП = Неопределено) Экспорт
	
	ТипПодписанта = "1";
	флПредставительЮрЛицо = Истина;
	НаименованиеОрганизацииПредставителя = "";
	ФИОПредставителя = "";
	ПредставительСсылка = Неопределено;
	ДокументПредставителя = "";
	               	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	РегистрацииВНалоговомОргане.Представитель,
	               |	РегистрацииВНалоговомОргане.УполномоченноеЛицоПредставителя,
	               |	РегистрацииВНалоговомОргане.ДокументПредставителя
	               |ИЗ
	               |	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	               |ГДЕ
	               |	(РегистрацииВНалоговомОргане.Владелец = &Организация
				   |			ИЛИ РегистрацииВНалоговомОргане.Владелец = &ГоловнаяОрганизация)
				   |	И РегистрацииВНалоговомОргане.Код = &КодНО
				   |	И НЕ РегистрацииВНалоговомОргане.ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодНО", КодНО);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", РегламентированнаяОтчетность.ГоловнаяОрганизация(Организация));
		
	Если КПП <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И РегистрацииВНалоговомОргане.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Представитель) Тогда
		ТипПодписанта = "2";
		ПредставительСсылка = Выборка.Представитель;
		ДокументПредставителя = Выборка.ДокументПредставителя;
		
		Если НЕ РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Выборка.Представитель) Тогда
			
			флПредставительЮрЛицо = Истина;
			
			НаименованиеОрганизацииПредставителя = СокрЛП(ПредставительСсылка);
			
			Если ТипЗнч(ПредставительСсылка) = Тип("СправочникСсылка.Контрагенты")
			   И НЕ ПредставительСсылка.Метаданные().Реквизиты.Найти("НаименованиеПолное") = Неопределено
			   И ЗначениеЗаполнено(ПредставительСсылка.НаименованиеПолное) Тогда
			   
				НаименованиеОрганизацииПредставителя = СокрЛП(ПредставительСсылка.НаименованиеПолное);
					
			КонецЕсли;
						
			ФИОПредставителя = СокрЛП(Выборка.УполномоченноеЛицоПредставителя);
			
		Иначе
			
			флПредставительЮрЛицо = Ложь;
						
			ФИОПредставителя = СокрЛП(ПредставительСсылка);
			
			Если ТипЗнч(ПредставительСсылка) = Тип("СправочникСсылка.ФизическиеЛица")
			   И НЕ ПредставительСсылка.Метаданные().Реквизиты.Найти("ФИО") = Неопределено
			   И ЗначениеЗаполнено(ПредставительСсылка.ФИО) Тогда
			   
				ФИОПредставителя = СокрЛП(ПредставительСсылка.ФИО);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТипПодписанта", ТипПодписанта);
	Результат.Вставить("флПредставительЮрЛицо", флПредставительЮрЛицо);
	Результат.Вставить("НаименованиеОрганизацииПредставителя", НаименованиеОрганизацииПредставителя);
	Результат.Вставить("ФИОПредставителя", ФИОПредставителя);
	Результат.Вставить("ПредставительСсылка", ПредставительСсылка);
	Результат.Вставить("ДокументПредставителя", ДокументПредставителя);
	
	Возврат Результат;						 
							 
КонецФункции

Функция ЗаменитьТекстРегионаНаКодРегиона(Знач АдресВФормате9зпт) Экспорт

	Параметры = Новый Массив;

	ПредыдущаяЗапятая = 0;
	Для Сч = 1 По СтрДлина(АдресВФормате9зпт) Цикл
		ТекСимв = Сред(АдресВФормате9зпт, Сч, 1);
		Если ТекСимв = "," Тогда
			Параметры.Добавить(Сред(АдресВФормате9зпт, ПредыдущаяЗапятая + 1, Сч - (ПредыдущаяЗапятая + 1)));
			ПредыдущаяЗапятая = Сч;
		КонецЕсли;
	КонецЦикла;

	Если ПредыдущаяЗапятая <> СтрДлина(АдресВФормате9зпт) Тогда
		Параметры.Добавить(Сред(АдресВФормате9зпт, ПредыдущаяЗапятая + 1, СтрДлина(АдресВФормате9зпт) - ПредыдущаяЗапятая));
	КонецЕсли;
	
	Для Сч = Параметры.Количество() + 1 По 13 Цикл
		Параметры.Добавить("");
	КонецЦикла;

	Регион = Параметры[2];

	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Регион) Тогда
		Регион = Формат(РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(Регион), "ЧЦ=2; ЧН=; ЧВН=");
	КонецЕсли;
				
	Возврат Параметры[0] + "," + Параметры[1] + "," + Регион		+ "," + Параметры[3] + ","
		  + Параметры[4] + "," + Параметры[5] + "," + Параметры[6]	+ "," + Параметры[7] + ","
		  + Параметры[8] + "," + Параметры[9] + "," + Параметры[10] + "," + Параметры[11] + "," + Параметры[12];

КонецФункции

Функция ДокументыСУчетомКритериевОтбораКалендарь(ИсточникОтчета, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ОрганизацияОтбор, КодИФНС, Периодичность) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("Организация", ОрганизацияОтбор);
	Запрос.УстановитьПараметр("КодИМНС", КодИФНС);
	ДатаОконч = ?(НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета), '20991231', ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДатаОконч));
	Запрос.УстановитьПараметр("ДатаОкончанияКон", КонецДня(ДатаОконч));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
			   	   |	И РегламентированныйОтчет.Организация = &Организация";
	Если НЕ ПустаяСтрока(КодИФНС) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И РегламентированныйОтчет.КодИМНС = &КодИМНС";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
				   |	И (РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаОкончания И &ДатаОкончанияКон)";
	
	ТаблРез = Запрос.Выполнить().Выгрузить();
	КолТаблРез = ТаблРез.Количество();
	Если КолТаблРез = 0 Тогда
		Возврат 0;
	Иначе
		Возврат КолТаблРез;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьДоступностьОтчета(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ОрганизацияОтбор) Экспорт
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось открыть отчет!'");
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось открыть отчет!'");
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;

	Попытка
		ТекФорма.Организация =  ОрганизацияОтбор;
	Исключение
	КонецПопытки;

	Попытка
		ТекФорма.мДатаНачалаПериодаОтчета = ДатаНач;
		ТекФорма.мДатаКонцаПериодаОтчета = ДатаКон;
	Исключение
	КонецПопытки;

	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТекФорма, "мПериодичность") Тогда
		Если Периодичность <> Неопределено Тогда
			ТекФорма.мПериодичность = Периодичность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьНапоминанияПользователяКалендарьБухгалтера() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|Пользователь
	|, ПоследняяДатаДействия
	|, ИсточникОтчета
	|, ЗаПериодС
	|, ЗаПериодПо
	|, Организация
	|, ТипСообщения
	|, ФормаОтчета
	|, Периодичность
	|, Название
	|, Налогоплательщик
	|, ДобавитьКДате(ПоследняяДатаДействия, День, &ДниНапоминаний) Как СрокНачалаНапоминаний
	|, НарастающийИтог
	|, ДатаПоказа
	|ИЗ РегистрСведений.СобытияКалендаряБухгалтера
	|ГДЕ
	|Пользователь = &Пользователь
	|И &РабочаяДата >= ДобавитьКДате(ПоследняяДатаДействия, День, &ДниНапоминаний)
	|И ДатаПоказа <> &ДатаПоказа";

	КолВоДней = 5;

	ТекРабочаяДата = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ДниНапоминаний", (-1) * КолВоДней);
	Запрос.УстановитьПараметр("РабочаяДата", ТекРабочаяДата);
	Запрос.УстановитьПараметр("ДатаПоказа", ТекРабочаяДата);
	ТаблРезультат = Запрос.Выполнить().Выгрузить();

	Если ТаблРезультат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Напоминания = Новый Массив;
	СпрРегОтчетыПустаяСсылка = Справочники.РегламентированныеОтчеты.ПустаяСсылка();
	Для каждого Зап Из ТаблРезультат Цикл
		Запись = РегистрыСведений.СобытияКалендаряБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Зап);
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.ДатаПоказа = ТекРабочаяДата;
			Запись.Записать();
			Зап.ДатаПоказа = ТекРабочаяДата;
		КонецЕсли;
		
		Если Зап.ТипСообщения = Перечисления.СообщенияДляРегОтчетов.СдачаОтчета Тогда
			ОбъектНапоминание = Зап.ИсточникОтчета;
			НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ОбъектНапоминание);
			
			СкрытыеРегламентированныеОтчеты = РегистрыСведений.СкрытыеРегламентированныеОтчеты.СоздатьМенеджерЗаписи();
			СкрытыеРегламентированныеОтчеты.РегламентированныйОтчет = НайденныйЭлемент.Ссылка;
			СкрытыеРегламентированныеОтчеты.Прочитать();
			
			Если НайденныйЭлемент = СпрРегОтчетыПустаяСсылка
				Или СкрытыеРегламентированныеОтчеты.Выбран() Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		СобытиеКалендаря = Новый Структура;
		СобытиеКалендаря.Вставить("Срок", Зап.ПоследняяДатаДействия);
		СобытиеКалендаря.Вставить("ИсточникОтчета", Зап.ИсточникОтчета);
		СобытиеКалендаря.Вставить("ЗаПериодС", Зап.ЗаПериодС);
		СобытиеКалендаря.Вставить("ЗаПериодПо", Зап.ЗаПериодПо);
		СобытиеКалендаря.Вставить("Организация", Зап.Организация);
		СобытиеКалендаря.Вставить("ТипСообщения", Зап.ТипСообщения);
		СобытиеКалендаря.Вставить("ФормаОтчета", Зап.ФормаОтчета);
		СобытиеКалендаря.Вставить("Периодичность", Зап.Периодичность);
		СобытиеКалендаря.Вставить("НазваниеОтчетаИлиНалога", Зап.Название);
		СобытиеКалендаря.Вставить("Налогоплательщик", Зап.Налогоплательщик);
		СобытиеКалендаря.Вставить("НарастающийИтог", Зап.НарастающийИтог);
		СобытиеКалендаря.Вставить("ДатаПоказа", Зап.ДатаПоказа);
		Напоминания.Добавить(СобытиеКалендаря);
	КонецЦикла;
	
	Возврат Напоминания;

КонецФункции

Функция ВерсияФорматаВыгрузки(ВыбраннаяФорма, ИсточникОтчета, НаДату = Неопределено) Экспорт

	Попытка
		
		Возврат РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета).ВерсияФорматаВыгрузки(НаДату, ВыбраннаяФорма);
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;

КонецФункции

Функция ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ИсточникОтчета, ДатаОкончания, СсылкаНаСохрРеглОтчет = Неопределено) Экспорт
	
	Если НЕ СсылкаНаСохрРеглОтчет = Неопределено Тогда
		
		Возврат СсылкаНаСохрРеглОтчет.ВыбраннаяФорма;
		
	КонецЕсли;
	
	ТаблицаФормОтчета = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета).ТаблицаФормОтчета();
	
	ФормаОтчета = Неопределено;
	
	Для Каждого Строка Из ТаблицаФормОтчета Цикл
		
		Если (Строка.ДатаНачалоДействия > КонецДня(ДатаОкончания))
		 ИЛИ ((Строка.ДатаКонецДействия > '00010101000000') И (Строка.ДатаКонецДействия < НачалоДня(ДатаОкончания))) Тогда

			Продолжить;
			
		КонецЕсли;

		ФормаОтчета = Строка.ФормаОтчета;

		Возврат ФормаОтчета;
		
	КонецЦикла;
		
	Возврат ФормаОтчета;
	
КонецФункции

Функция ФормаРеглОтчетаДействуетВОтчетномПериоде(ИсточникОтчета, ДатаОкончания, ИмяФормыОтчета) Экспорт
	
	Если НЕ (ЗначениеЗаполнено(ИсточникОтчета)
		И ЗначениеЗаполнено(ДатаОкончания)
		И ЗначениеЗаполнено(ИмяФормыОтчета)) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТаблицаФормОтчета = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета).ТаблицаФормОтчета();
	
	Для Каждого Строка Из ТаблицаФормОтчета Цикл
		
		Если (Строка.ДатаНачалоДействия > КонецДня(ДатаОкончания))
		 ИЛИ ((Строка.ДатаКонецДействия > '00010101000000')
		   И (Строка.ДатаКонецДействия < НачалоДня(ДатаОкончания))) Тогда
			
			Продолжить;
			
		ИначеЕсли Строка.ФормаОтчета = ИмяФормыОтчета Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура СформироватьАдрес(КонтактнаяИнформация, РоссийскийАдрес) Экспорт
	
	СтруктураАдресаЗаписи = РаботаСАдресами.СведенияОбАдресе(КонтактнаяИнформация);
			
	СокращенияОбъектовАдресацииАдресаРФ = РегламентированнаяОтчетностьКлиентСервер.СокращенияОбъектовАдресацииАдресаРФ();
	
	Корпуса = "";
	ПредставлениеКорпуса = "";
	
	Если СтруктураАдресаЗаписи.Свойство("Корпуса", Корпуса) Тогда
		
		Для Индекс = 0 По Корпуса.Количество() - 1 Цикл
			
			Корпус = Корпуса[Индекс];
			
			ПредставлениеКорпуса = ПредставлениеКорпуса
			+ СокрЛП(?(Корпус.Свойство("ТипКорпуса") И Индекс > 0,
			НРег(СокращенияОбъектовАдресацииАдресаРФ[НРег(Корпус.ТипКорпуса)]), ""))
			+ " "
			+ СокрЛП(?(Корпус.Свойство("Номер"), Корпус.Номер, ""))
			+ " ";
			
		КонецЦикла;
		
	КонецЕсли;	
	
	СтруктураАдресаЗаписи.Вставить("Корпус", СокрЛП(ПредставлениеКорпуса));
	
	Помещения = "";
	ПредставлениеПомещения = "";
	
	Если СтруктураАдресаЗаписи.Свойство("Помещения", Помещения) Тогда
		
		Для Индекс = 0 По Помещения.Количество() - 1 Цикл
			
			Помещение = Помещения[Индекс];
			
			ПредставлениеПомещения = ПредставлениеПомещения
			+ СокрЛП(?(Помещение.Свойство("ТипПомещения") И Индекс > 0,
			НРег(СокращенияОбъектовАдресацииАдресаРФ[НРег(Помещение.ТипПомещения)]), ""))
			+ " "
			+ СокрЛП(?(Помещение.Свойство("Номер"), Помещение.Номер, ""))
			+ " ";
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураАдресаЗаписи.Вставить("Квартира", СокрЛП(ПредставлениеПомещения));
	
	СтруктураАдресаЗаписи.Вставить("Дом",
		?(СтруктураАдресаЗаписи.Свойство("Здание")
		И СтруктураАдресаЗаписи.Здание.Свойство("Номер"), 
		СокрЛП(СтруктураАдресаЗаписи.Здание.Номер), ""));
	
	СтруктураАдресаЗаписи.Вставить("ТипДома",
		?(СтруктураАдресаЗаписи.Свойство("Здание")
		И СтруктураАдресаЗаписи.Здание.Свойство("ТипЗдания"), 
		СокрЛП(СтруктураАдресаЗаписи.Здание.ТипЗдания), "Дом"));
		
	Если СтруктураАдресаЗаписи.Свойство("НомерЗемельногоУчастка")
		И ТипЗнч(СтруктураАдресаЗаписи.НомерЗемельногоУчастка) = Тип("Строка")
		И ЗначениеЗаполнено(СтруктураАдресаЗаписи.НомерЗемельногоУчастка) Тогда 
		
		СтруктураАдресаЗаписи["Дом"] = СтруктураАдресаЗаписи.НомерЗемельногоУчастка;
		СтруктураАдресаЗаписи["ТипДома"] = "зем. участок";
	КонецЕсли;
	
	СтруктураАдресаЗаписи.Вставить("ТипКорпуса",
		?(СтруктураАдресаЗаписи.Свойство("Корпуса")
		И СтруктураАдресаЗаписи.Корпуса.Количество() > 0
		И СтруктураАдресаЗаписи.Корпуса[0].Свойство("ТипКорпуса"), 
		СокрЛП(СтруктураАдресаЗаписи.Корпуса[0].ТипКорпуса),
		"Корпус"));	  
	
	СтруктураАдресаЗаписи.Вставить("ТипКвартиры",
		?(СтруктураАдресаЗаписи.Свойство("Помещения")
		И СтруктураАдресаЗаписи.Помещения.Количество() > 0
		И СтруктураАдресаЗаписи.Помещения[0].Свойство("ТипПомещения"), 
		СокрЛП(СтруктураАдресаЗаписи.Помещения[0].ТипПомещения),
		"Квартира"));	  
	      	
	Для Каждого Элемент Из РоссийскийАдрес Цикл
		
		РоссийскийАдрес[Элемент.Ключ] = "";
		
	КонецЦикла;
	
	Для Каждого ЗаписьАдреса Из СтруктураАдресаЗаписи Цикл
		
		ПредставлениеСтр = СокрЛП(ЗаписьАдреса.Ключ);
		ЗначениеСтр		 = СокрЛП(ЗаписьАдреса.Значение);
		
		Если ТипЗнч(РоссийскийАдрес) = Тип("Соответствие")
			И ЗначениеЗаполнено(ПредставлениеСтр)
			И НЕ РоссийскийАдрес.Получить(ПредставлениеСтр) = Неопределено Тогда
			
			ПредставлениеСтрСокращение = "";
			
			Если СтруктураАдресаЗаписи.Свойство(ПредставлениеСтр + "Сокращение", ПредставлениеСтрСокращение) Тогда
				
				ЗначениеСтр = ЗначениеСтр + " " + СокрЛП(ПредставлениеСтрСокращение);
				
			КонецЕсли;	
			
			РоссийскийАдрес[ПредставлениеСтр] = СокрЛП(ЗначениеСтр);
			          			
			Если ПредставлениеСтр = "НаселенныйПункт"
			   И СтруктураАдресаЗаписи.Свойство("Территория")
			   И ЗначениеЗаполнено(СтруктураАдресаЗаписи.Территория) Тогда
				
				РоссийскийАдрес[ПредставлениеСтр]
					= СокрЛП(РоссийскийАдрес[ПредставлениеСтр]
					+ " " + СокрЛП(СтруктураАдресаЗаписи.Территория)
					+ " " + СокрЛП(СтруктураАдресаЗаписи.ТерриторияСокращение));
				
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(РоссийскийАдрес) = Тип("Структура")
			И ЗначениеЗаполнено(ПредставлениеСтр)
			И РоссийскийАдрес.Свойство(ПредставлениеСтр) Тогда
			
			ПредставлениеСтрСокращение = "";
			
			Если СтруктураАдресаЗаписи.Свойство(ПредставлениеСтр + "Сокращение", ПредставлениеСтрСокращение) Тогда
				
				ЗначениеСтр = ЗначениеСтр + " " + СокрЛП(ПредставлениеСтрСокращение);
				
			КонецЕсли;	
			            			
			РоссийскийАдрес[ПредставлениеСтр] = СокрЛП(ЗначениеСтр);
			
			Если ПредставлениеСтр = "НаселенныйПункт"
			   И СтруктураАдресаЗаписи.Свойство("Территория")
			   И ЗначениеЗаполнено(СтруктураАдресаЗаписи.Территория) Тогда
				
				РоссийскийАдрес[ПредставлениеСтр]
					= СокрЛП(РоссийскийАдрес[ПредставлениеСтр]
					+ " " + СокрЛП(СтруктураАдресаЗаписи.ТерриторияСокращение)
					+ " " + СокрЛП(СтруктураАдресаЗаписи.Территория));
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеАдресаJSON(Адрес_JSON) Экспорт
	Возврат УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Адрес_JSON);
КонецФункции

Функция ПроверитьВозможностьВыводаМашиночитаемойФормыЧерезВебСервис(АдресПараметровПроксиВоВременномХранилище, ПолучитьОпределенияВебСервиса = Истина, ЭтоВызовИзВебКлиента = Ложь, ВебБраузер = "") Экспорт
	
	ИспользоватьВебСервисДляФормированияМашиночитаемыхФорм = Ложь;
	ИспользоватьВебСервисТолькоВРежимеВебКлиента           = Ложь;
	АдресТочкиПодключенияВебСервиса = "";
	ИмяПользователяВебСервиса       = "";
	ПарольПользователяВебСервиса    = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьВебСервисДляФормированияМашиночитаемыхФорм = Константы.ИспользоватьСервисФормированияМЧБсPDF417.Получить();
	ИспользоватьВебСервисТолькоВРежимеВебКлиента           = Константы.ИспользоватьСервисФормированияМЧБсPDF417ТолькоВРежимеВебКлиента.Получить();
	АдресТочкиПодключенияВебСервиса                        = Константы.АдресСервисаФормированияМЧБсPDF417.Получить();
	ИмяПользователяВебСервиса                              = Константы.ИмяПользователяСервисаФормированияМЧБсPDF417.Получить();
	ПарольПользователяВебСервиса                           = Константы.ПарольПользователяСервисаФормированияМЧБсPDF417.Получить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИспользоватьВебСервисДляФормированияМашиночитаемыхФорм <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИспользоватьВебСервисТолькоВРежимеВебКлиента = Истина И НЕ ЭтоВызовИзВебКлиента Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПолучитьОпределенияВебСервиса Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Невозможно подключиться к веб-сервису формирования машиночитаемых бланков.'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	АдресТочкиПодключенияВебСервиса = СокрЛП(АдресТочкиПодключенияВебСервиса);
	Если ПустаяСтрока(АдресТочкиПодключенияВебСервиса) Тогда
		Если ЭтоВызовИзВебКлиента И НЕ ВебБраузер = "MSIE" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Невозможно выполнить печать через веб-сервис формирования машиночитаемых бланков "
				+ "по причине: ""Не заполнен адрес точки подключения веб-сервиса""!'");
			Сообщение.Сообщить();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ИмяВебСервиса = "CreateRepWithPDF417";
	
	АдресТочкиПодключенияВебСервиса = ?(Прав(АдресТочкиПодключенияВебСервиса, 1) = "/", Сред(АдресТочкиПодключенияВебСервиса, 1, СтрДлина(АдресТочкиПодключенияВебСервиса) - 1), АдресТочкиПодключенияВебСервиса);
	АдресВебСервиса = АдресТочкиПодключенияВебСервиса + "/ws/" + ИмяВебСервиса + "?wsdl";
	URIПространстваИмен = "http://www.1c.ru/LibraryRegulatoryReporting/1.0";
	Таймаут = 45;
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL = АдресВебСервиса;
	ПараметрыПодключения.URIПространстваИмен = URIПространстваИмен;
	ПараметрыПодключения.ИмяСервиса = ИмяВебСервиса;
	ПараметрыПодключения.ИмяТочкиПодключения = "";
	ПараметрыПодключения.ИмяПользователя = ИмяПользователяВебСервиса;
	ПараметрыПодключения.Пароль = ПарольПользователяВебСервиса;
	ПараметрыПодключения.Таймаут = Таймаут;
	ПараметрыПодключения.ДелатьКонтрольныйВызов = Истина;
	
	Попытка
		ПриведенныеПараметры = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ЗаполнитьЗначенияСвойств(ПриведенныеПараметры, ПараметрыПодключения);
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПриведенныеПараметры);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось получить подключение к веб-сервису формирования машиночитаемых бланков!'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	ПараметрыПодключения.ДелатьКонтрольныйВызов = Ложь;
	
	АдресПараметровПроксиВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ФиксированнаяСтруктура(ПараметрыПодключения), Новый УникальныйИдентификатор());
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиМашиночитаемуюФормуЧерезВебСервис(ИмяФормыОтчета, НаименованиеИФНС, ФайлВыгрузкиВоВременномХранилище, ПараметрыСформированногоОтчета, АдресПараметровПроксиВоВременномХранилище) Экспорт
	
	ПараметрыСформированногоОтчета = Новый Структура;
	ПараметрыСформированногоОтчета.Вставить("ИДСессии", "");
	ПараметрыСформированногоОтчета.Вставить("АдресОтчетаВоВременномХранилище");
	ПараметрыСформированногоОтчета.Вставить("ВремяОжиданияДоПолученияОтчета", 0);
	
	Попытка
		ПараметрыПодключения = ПолучитьИзВременногоХранилища(АдресПараметровПроксиВоВременномХранилище);
		ПриведенныеПараметры = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ЗаполнитьЗначенияСвойств(ПриведенныеПараметры, ПараметрыПодключения);
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПриведенныеПараметры);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось получить подключение к веб-сервису! Проверьте адрес точки подключения, имя, пароль или доступность веб-сервиса.'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	АдресФайлаВыгрузкиВоВременномХранилище = Неопределено;
	ИмяФайлаВыгрузки                       = Неопределено;
	КодировкаФайлаВыгрузки                 = Неопределено;
	ФайлВыгрузкиВоВременномХранилище.Свойство("АдресФайлаВыгрузкиВоВременномХранилище", АдресФайлаВыгрузкиВоВременномХранилище);
	ФайлВыгрузкиВоВременномХранилище.Свойство("ИмяФайлаВыгрузки",                       ИмяФайлаВыгрузки);
	ФайлВыгрузкиВоВременномХранилище.Свойство("КодировкаФайлаВыгрузки",                 КодировкаФайлаВыгрузки);
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресФайлаВыгрузкиВоВременномХранилище) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось получить файл выгрузки отчета на сервере!'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	ФайлВыгрузки = ПолучитьИмяВременногоФайла("tmp");
		
	ФайлВыгрузкиДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВыгрузкиВоВременномХранилище);
	ФайлВыгрузкиДвоичныеДанные.Записать(ФайлВыгрузки);
	
	СтруктураПараметров = РегламентированнаяОтчетностьКлиентСервер.СформироватьСтруктуруПараметровФайлаВыгрузки(ФайлВыгрузки);
	Попытка
		УдалитьФайлы(ФайлВыгрузки);
	Исключение
	КонецПопытки;
	
	КНД = СтруктураПараметров["КНД"];
	ВерсияФорматаВыгрузки = ?(СтруктураПараметров["ЭтоXML"] = Истина, СтруктураПараметров["ВерсФорм"], СтруктураПараметров["ВерФОтч"]);
	
	ТочныеПараметрыШаблонаЗаданы = (ЗначениеЗаполнено(КНД) И ЗначениеЗаполнено(ВерсияФорматаВыгрузки));
	
	Если ТочныеПараметрыШаблонаЗаданы Тогда
		Пока СтрДлина(ВерсияФорматаВыгрузки) < 7 Цикл
			ВерсияФорматаВыгрузки = ВерсияФорматаВыгрузки + "0";
		КонецЦикла;
		ПрефиксИмениШаблона = СокрЛП(КНД + "_" + ВерсияФорматаВыгрузки);
		ПрефиксИмениМакетаШаблона = "МБ_" + СтрЗаменить(ПрефиксИмениШаблона, ".", "_");
	Иначе
		ПрефиксИмениШаблона = "";
		ПрефиксИмениМакетаШаблона = "МБ_";
	КонецЕсли;
	
	КоличествоВыгруженныхШаблонов = 0;
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
	// если точные параметры заданы, то сначала пытаемся извлечь внутренний шаблон
	ШаблоныМашиночитаемыхФорм = ПолучитьШаблоныМашиночитаемыхФорм(ИмяФормыОтчета, ПрефиксИмениМакетаШаблона, КоличествоВыгруженныхШаблонов, ТочныеПараметрыШаблонаЗаданы, ПрефиксИмениШаблона, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
	
	Если НЕ ПроверитьИВыборочноОбновитьШаблоныМашиночитаемыхФормНаВебСервисе(ПрефиксИмениШаблона, ШаблоныМашиночитаемыхФорм, Прокси) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось получить файл выгрузки отчета на сервере!!'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "";
	ВремяОжиданияДоПолученияОтчета = 0;
	ИДСессии = Строка(Новый УникальныйИдентификатор());
	Если Прокси.CreateReport(ИДСессии, ФайлВыгрузкиДвоичныеДанные, НаименованиеИФНС, ПрефиксИмениШаблона, ТекстОписанияОшибки, ВремяОжиданияДоПолученияОтчета) <> Истина Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось сформировать файл машиночитаемой формы на сервере! " + Символы.ПС + "Подробнее:"+ Символы.ПС + ТекстОписанияОшибки + "'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСформированногоОтчета.ИДСессии = ИДСессии;
	ПараметрыСформированногоОтчета.ВремяОжиданияДоПолученияОтчета = ВремяОжиданияДоПолученияОтчета;
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахЧерезВебСервис(ФайлВыгрузкиВоВременномХранилище, ПараметрыСформированногоОтчета, АдресПараметровПроксиВоВременномХранилище, ДанныеМакета) Экспорт
	
	ПараметрыСформированногоОтчета = Новый Структура;
	ПараметрыСформированногоОтчета.Вставить("ИДСессии", "");
	ПараметрыСформированногоОтчета.Вставить("АдресОтчетаВоВременномХранилище");
	ПараметрыСформированногоОтчета.Вставить("ВремяОжиданияДоПолученияОтчета", 0);
	
	Попытка
		ПараметрыПодключения = ПолучитьИзВременногоХранилища(АдресПараметровПроксиВоВременномХранилище);
		ПриведенныеПараметры = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ЗаполнитьЗначенияСвойств(ПриведенныеПараметры, ПараметрыПодключения);
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПриведенныеПараметры);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось получить подключение к веб-сервису! Проверьте адрес точки подключения, имя, пароль или доступность веб-сервиса.'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	АдресФайлаВыгрузкиВоВременномХранилище = Неопределено;
	ИмяФайлаВыгрузки                       = Неопределено;
	КодировкаФайлаВыгрузки                 = Неопределено;
	ФайлВыгрузкиВоВременномХранилище.Свойство("АдресФайлаВыгрузкиВоВременномХранилище", АдресФайлаВыгрузкиВоВременномХранилище);
	ФайлВыгрузкиВоВременномХранилище.Свойство("ИмяФайлаВыгрузки",                       ИмяФайлаВыгрузки);
	ФайлВыгрузкиВоВременномХранилище.Свойство("КодировкаФайлаВыгрузки",                 КодировкаФайлаВыгрузки);
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресФайлаВыгрузкиВоВременномХранилище) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось получить файл выгрузки отчета на сервере!'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	ФайлВыгрузки = ПолучитьИмяВременногоФайла("tmp");
	ФайлВыгрузкиДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВыгрузкиВоВременномХранилище);
	ФайлВыгрузкиДвоичныеДанные.Записать(ФайлВыгрузки);
	
	СтруктураПараметров = РегламентированнаяОтчетностьКлиентСервер.СформироватьСтруктуруПараметровФайлаВыгрузки(ФайлВыгрузки);
	Попытка
		УдалитьФайлы(ФайлВыгрузки);
	Исключение
	КонецПопытки;
	
	КНД = СтруктураПараметров["КНД"];
	ВерсияФорматаВыгрузки = ?(СтруктураПараметров["ЭтоXML"] = Истина, СтруктураПараметров["ВерсФорм"], СтруктураПараметров["ВерФОтч"]);
	ПараметрыСформированногоОтчета.Вставить("ИдФайл", СтруктураПараметров["ИдФайл"]);
	
	ТочныеПараметрыШаблонаЗаданы = (ЗначениеЗаполнено(КНД) И ЗначениеЗаполнено(ВерсияФорматаВыгрузки));
	
	Если ТочныеПараметрыШаблонаЗаданы Тогда
		Пока СтрДлина(ВерсияФорматаВыгрузки) < 7 Цикл
			ВерсияФорматаВыгрузки = ВерсияФорматаВыгрузки + "0";
		КонецЦикла;
		ПрефиксИмениШаблона = СокрЛП(КНД + "_" + ВерсияФорматаВыгрузки);
		ПрефиксИмениМакетаШаблона = "МБ_" + СтрЗаменить(ПрефиксИмениШаблона, ".", "_");
	Иначе
		ПрефиксИмениШаблона = "";
		ПрефиксИмениМакетаШаблона = "МБ_";
	КонецЕсли;
	
	КоличествоВыгруженныхШаблонов = 0;
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
	// если точные параметры заданы, то сначала пытаемся извлечь внутренний шаблон
	ШаблоныМашиночитаемыхФорм = ПолучитьШаблоныМашиночитаемыхФормУведомленияОСпецрежимах(ИмяФайлаВыгрузки, ПрефиксИмениМакетаШаблона, КоличествоВыгруженныхШаблонов, ТочныеПараметрыШаблонаЗаданы, ПрефиксИмениШаблона, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ДанныеМакета);
	
	Если НЕ ПроверитьИВыборочноОбновитьШаблоныМашиночитаемыхФормНаВебСервисе(ПрефиксИмениШаблона, ШаблоныМашиночитаемыхФорм, Прокси) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось получить файл выгрузки отчета на сервере!!'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "";
	ВремяОжиданияДоПолученияОтчета = 0;
	ИДСессии = Строка(Новый УникальныйИдентификатор());
	Если Прокси.CreateReport(ИДСессии, ФайлВыгрузкиДвоичныеДанные, "", ПрефиксИмениШаблона, ТекстОписанияОшибки, ВремяОжиданияДоПолученияОтчета) <> Истина Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось сформировать файл машиночитаемой формы на сервере! " + Символы.ПС + "Подробнее:"+ Символы.ПС + ТекстОписанияОшибки + "'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСформированногоОтчета.ИДСессии = ИДСессии;
	ПараметрыСформированногоОтчета.ВремяОжиданияДоПолученияОтчета = ВремяОжиданияДоПолученияОтчета;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьМашиночитаемуюФормуСВебСервиса(ПараметрыСформированногоОтчета) Экспорт
	
	Попытка
		
		ПараметрыПодключения = ПолучитьИзВременногоХранилища(ПараметрыСформированногоОтчета.АдресПараметровПроксиВоВременномХранилище);
		ПриведенныеПараметры = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ЗаполнитьЗначенияСвойств(ПриведенныеПараметры, ПараметрыПодключения);
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПриведенныеПараметры);
		
	Исключение
		
		ВызватьИсключение НСтр("ru='Не удалось получить подключение к веб-сервису! Проверьте адрес точки подключения, имя, пароль или доступность веб-сервиса.'");
		
	КонецПопытки;
	
	СформированныйОтчетДвоичныеДанные = Неопределено;
	Если Прокси.GetFormByID(ПараметрыСформированногоОтчета.ИДСессии, СформированныйОтчетДвоичныеДанные) = Истина Тогда
		ПараметрыСформированногоОтчета.АдресОтчетаВоВременномХранилище = ПоместитьВоВременноеХранилище(СформированныйОтчетДвоичныеДанные, Новый УникальныйИдентификатор());
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Отправляет ранее подготовленную сервисом подготовки машиночитаемых бланков форму на E-mail.
//
// Параметры:
//  ПараметрыОтправки - Структура - содержит всю необходимую информацию о письме:
//
//   * Кому - Массив, Строка - интернет адреса получателей письма.
//          - Массив - коллекция структур адресов:
//              * Адрес         - Строка - почтовый адрес (должно быть обязательно заполнено).
//              * Представление - Строка - имя адресата.
//          - Строка - интернет-адреса получателей письма, разделитель - ";".
//
//   * ПолучателиСообщения - Массив - массив структур, описывающий получателей:
//      ** Адрес - Строка - почтовый адрес получателя сообщения.
//      ** Представление - Строка - представление адресата.
//
//   * Копии        - Массив, Строка - адреса получателей копий письма. См. описание поля Кому.
//
//   * СкрытыеКопии - Массив, Строка - адреса получателей скрытых копий письма. См. описание поля Кому.
//
//   * Тема       - Строка - (обязательный) тема почтового сообщения.
//   * Тело       - Строка - (обязательный) текст почтового сообщения (простой текст в кодировке win-1251).
//   * Важность   - ВажностьИнтернетПочтовогоСообщения.
//
//   * Вложения - Массив - файлы, которые необходимо приложить к письму (описания в виде структур):
//     ** Представление - Строка - имя файла вложения;
//     ** АдресВоВременномХранилище - Строка - адрес двоичных данных вложения во временном хранилище.
//     ** Кодировка - Строка - кодировка вложения (используется, если отличается от кодировки письма).
//     ** Идентификатор - Строка - (необязательный) используется для отметки картинок, отображаемых в теле письма.
//
//   * АдресОтвета - Соответствие - см. описание поля Кому.
//   * ИдентификаторыОснований - Строка - идентификаторы оснований данного письма.
//   * ОбрабатыватьТексты  - Булево - необходимость обрабатывать тексты письма при отправке.
//   * УведомитьОДоставке  - Булево - необходимость запроса уведомления о доставке.
//   * УведомитьОПрочтении - Булево - необходимость запроса уведомления о прочтении.
//   * ТипТекста   - Строка, Перечисление.ТипыТекстовЭлектронныхПисем, ТипТекстаПочтовогоСообщения - определяет тип
//                  переданного теста допустимые значения:
//                  HTML/ТипыТекстовЭлектронныхПисем.HTML - текст почтового сообщения в формате HTML.
//                  ПростойТекст/ТипыТекстовЭлектронныхПисем.ПростойТекст - простой текст почтового сообщения.
//                                                                          Отображается "как есть" (значение по
//                                                                          умолчанию).
//                  РазмеченныйТекст/ТипыТекстовЭлектронныхПисем.РазмеченныйТекст - текст почтового сообщения в формате
//                                                                                  Rich Text.
//   * Соединение - ИнтернетПочта - существующее соединение с почтовым сервером. Если не указано, то создается новое.
//   * ПротоколПочты - Строка - если указано значение "IMAP", то письмо будет передано по протоколу IMAP, если по
//                              указано значение "Все", то по протоколу SMTP и по протоколу IMAP, если ничего не указано
//                              то по протоколу SMTP. Параметр имеет смысл, только наличии действующего соединения,
//                              указанного в параметр Соединение. В противном случае протокол будет определен
//                              автоматически при установке соединения.
//   * ИдентификаторСообщения - Строка - (возвращаемый параметр) идентификатор отправленного почтового сообщения на SMTP-сервере;
//   * ИдентификаторСообщенияОтправкаIMAP - Строка - (возвращаемый параметр) идентификатор отправленного почтового
//                                         сообщения на IMAP сервере;
//   * ОшибочныеПолучатели - Соответствие - (возвращаемый параметр) список адресов, по которым отправка не выполнена. 
//                                          См. возвращаемое значение метода ИнтернетПочта.Послать() в синтакс-помощнике.
//
//  ПараметрыСформированногоОтчета - Структура - Содержит данные для формирования машиночитаемого бланка 
//                                               (см. описание процедуры РегламентированнаяОтчетностьВызовСервера.ВывестиМашиночитаемуюФормуЧерезВебСервис).
//  СообщениеОбОшибке - Строка - переменная, в которую после вызова функции возвращается сообщение об ошибке вызова сервера.
//
// Возвращаемое значение:
//  Булево - признак выполнения операции.
//
Функция ОтправитьМашиночитаемуюФормуНаEmail(ПараметрыОтправки, ПараметрыСформированногоОтчета, СообщениеОбОшибке) Экспорт

	Попытка
		
		ПараметрыПодключения = ПолучитьИзВременногоХранилища(ПараметрыСформированногоОтчета.АдресПараметровПроксиВоВременномХранилище);
		ПриведенныеПараметры = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ЗаполнитьЗначенияСвойств(ПриведенныеПараметры, ПараметрыПодключения);
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПриведенныеПараметры);
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось получить подключение к веб-сервису! Проверьте адрес точки подключения, имя, пароль или доступность веб-сервиса.'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	СериализованныеПараметрыОтправки = ОбщегоНазначения.ЗначениеВСтрокуXML(ПараметрыОтправки);
	
	Если Прокси.SendReportByEMail(ПараметрыСформированногоОтчета.ИДСессии, СериализованныеПараметрыОтправки, СообщениеОбОшибке) = Истина Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДокументыВыгрузкиДекларацииНДС(ПараметрыОтбора) Экспорт
	
	ДокументыВыгрузки = Новый СписокЗначений;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтбора.Организация);
	Запрос.УстановитьПараметр("Основание",   ПараметрыОтбора.Основание);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.ВыгрузкаРегламентированныхОтчетов.Основная КАК Док
	|ГДЕ
	|	Док.Ссылка.Организация = &Организация
	|	И Док.Основание = &Основание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Ссылка.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	Для НомСтр = 0 По ТаблицаЗапроса.Количество() - 1 Цикл
		
		СтрокаТаблицыЗапроса = ТаблицаЗапроса[НомСтр];
		СсылкаНаВыгрузкуОтчета = СтрокаТаблицыЗапроса["Ссылка"];
		
		ТЧ_Осн = СсылкаНаВыгрузкуОтчета.Основная;
		ТЧ_Выг = СсылкаНаВыгрузкуОтчета.Выгрузки;
		
		ТекИмяФайла = Неопределено;
		
		Если ТЧ_Осн.Количество() = ТЧ_Выг.Количество() Тогда
			Для НомСтрТЧ = 0 По ТЧ_Осн.Количество() - 1 Цикл
				Если ТЧ_Осн[НомСтрТЧ]["Основание"] = ПараметрыОтбора.Основание Тогда
					ТекИмяФайла = СокрЛП(ТЧ_Выг[НомСтрТЧ]["ИмяФайла"]);
					Если Лев(ТекИмяФайла, 7) = "NO_NDS_" Тогда
						ДокументыВыгрузки.Добавить(СсылкаНаВыгрузкуОтчета, ТекИмяФайла);
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ТЧ_Осн.Количество() = 1 Тогда
				Для НомСтрТЧ = 0 По ТЧ_Выг.Количество() - 1 Цикл
					ТекИмяФайла = СокрЛП(ТЧ_Выг[НомСтрТЧ]["ИмяФайла"]);
					Если Лев(ТекИмяФайла, 7) = "NO_NDS_" Тогда
						ДокументыВыгрузки.Добавить(СсылкаНаВыгрузкуОтчета, ТекИмяФайла);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыВыгрузки;
	
КонецФункции

Функция ДокументыВыгрузкиДекларацииПоАкцизам(ПараметрыОтбора) Экспорт
	
	КодДекларации = ПараметрыОтбора.КодДекларации;
	
	ДокументыВыгрузки = Новый СписокЗначений;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтбора.Организация);
	Запрос.УстановитьПараметр("Основание",   ПараметрыОтбора.Основание);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.ВыгрузкаРегламентированныхОтчетов.Основная КАК Док
	|ГДЕ
	|	Док.Ссылка.Организация = &Организация
	|	И Док.Основание = &Основание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Ссылка.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	Для НомСтр = 0 По ТаблицаЗапроса.Количество() - 1 Цикл
		
		СтрокаТаблицыЗапроса = ТаблицаЗапроса[НомСтр];
		СсылкаНаВыгрузкуОтчета = СтрокаТаблицыЗапроса["Ссылка"];
		
		ТЧ_Осн = СсылкаНаВыгрузкуОтчета.Основная;
		ТЧ_Выг = СсылкаНаВыгрузкуОтчета.Выгрузки;
		
		ТекИмяФайла = Неопределено;
		
		Если ТЧ_Осн.Количество() = ТЧ_Выг.Количество() Тогда
			Для НомСтрТЧ = 0 По ТЧ_Осн.Количество() - 1 Цикл
				Если ТЧ_Осн[НомСтрТЧ]["Основание"] = ПараметрыОтбора.Основание Тогда
					ТекИмяФайла = СокрЛП(ТЧ_Выг[НомСтрТЧ]["ИмяФайла"]);
					ТекТекст = ТЧ_Выг[НомСтрТЧ]["Текст"];
					ВыполненоУсловиеДобавленияДокумента
					= (КодДекларации = "1151089" И СтрНачинаетсяС(ТекИмяФайла, "NO_AKCAVNEF_"))
					ИЛИ (КодДекларации = "1151090" И СтрНачинаетсяС(ТекИмяФайла, "NO_AKCALK_"))
					ИЛИ (КодДекларации = "1151074" И (СтрНачинаетсяС(ТекИмяФайла, "NO_AKCTABAK_")
					ИЛИ (СтрНайти(ТекТекст, "КНД:1151074") > 0
					И СтрНайти(ТекТекст, "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО АКЦИЗАМ НА ТАБАЧНЫЕ ИЗДЕЛИЯ") > 0)));
					Если ВыполненоУсловиеДобавленияДокумента Тогда
						Если ВРег(Прав(ТекИмяФайла, 12)) = "NNNNNNNN.TXT" Тогда
							Отб = Новый Структура("РегламентированныйОтчет", ПараметрыОтбора.Основание);
							РегВыб = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.Выбрать(Отб);
							Пока РегВыб.Следующий() Цикл
								Если РегВыб.ВидДополнительногоФайла
									= "ИндексВИмениФайлаВыгрузкиДекларации_" + СсылкаНаВыгрузкуОтчета.УникальныйИдентификатор() Тогда
									ТекИмяФайла
									= Лев(ТекИмяФайла, СтрДлина(ТекИмяФайла) - 12)
									+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(РегВыб.СодержимоеФайла.Получить(), "ЧГ="), 8, "0")
									+ Прав(ТекИмяФайла, 4);
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						ДокументыВыгрузки.Добавить(СсылкаНаВыгрузкуОтчета, ТекИмяФайла);
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ТЧ_Осн.Количество() = 1 Тогда
				Для НомСтрТЧ = 0 По ТЧ_Выг.Количество() - 1 Цикл
					ТекИмяФайла = СокрЛП(ТЧ_Выг[НомСтрТЧ]["ИмяФайла"]);
					ТекТекст = ТЧ_Выг[НомСтрТЧ]["Текст"];
					ВыполненоУсловиеДобавленияДокумента
					= (КодДекларации = "1151089" И СтрНачинаетсяС(ТекИмяФайла, "NO_AKCAVNEF_"))
					ИЛИ (КодДекларации = "1151090" И СтрНачинаетсяС(ТекИмяФайла, "NO_AKCALK_"))
					ИЛИ (КодДекларации = "1151074" И (СтрНачинаетсяС(ТекИмяФайла, "NO_AKCTABAK_")
					ИЛИ (СтрНайти(ТекТекст, "КНД:1151074") > 0
					И СтрНайти(ТекТекст, "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО АКЦИЗАМ НА ТАБАЧНЫЕ ИЗДЕЛИЯ") > 0)));
					Если ВыполненоУсловиеДобавленияДокумента Тогда
						Если ВРег(Прав(ТекИмяФайла, 12)) = "NNNNNNNN.TXT" Тогда
							Отб = Новый Структура("РегламентированныйОтчет", ПараметрыОтбора.Основание);
							РегВыб = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.Выбрать(Отб);
							Пока РегВыб.Следующий() Цикл
								Если РегВыб.ВидДополнительногоФайла
									= "ИндексВИмениФайлаВыгрузкиДекларации_" + СсылкаНаВыгрузкуОтчета.УникальныйИдентификатор() Тогда
									ТекИмяФайла
									= Лев(ТекИмяФайла, СтрДлина(ТекИмяФайла) - 12)
									+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(РегВыб.СодержимоеФайла.Получить(), "ЧГ="), 8, "0")
									+ Прав(ТекИмяФайла, 4);
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						ДокументыВыгрузки.Добавить(СсылкаНаВыгрузкуОтчета, ТекИмяФайла);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыВыгрузки;
	
КонецФункции

Функция ДокументыВыгрузкиДекларацииПоНалогуНаПрибыль(ПараметрыОтбора) Экспорт
	
	ДокументыВыгрузки = Новый СписокЗначений;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтбора.Организация);
	Запрос.УстановитьПараметр("Основание",   ПараметрыОтбора.Основание);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.ВыгрузкаРегламентированныхОтчетов.Основная КАК Док
	|ГДЕ
	|	Док.Ссылка.Организация = &Организация
	|	И Док.Основание = &Основание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Ссылка.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	Для НомСтр = 0 По ТаблицаЗапроса.Количество() - 1 Цикл
		
		СтрокаТаблицыЗапроса = ТаблицаЗапроса[НомСтр];
		СсылкаНаВыгрузкуОтчета = СтрокаТаблицыЗапроса["Ссылка"];
		
		ТЧ_Осн = СсылкаНаВыгрузкуОтчета.Основная;
		ТЧ_Выг = СсылкаНаВыгрузкуОтчета.Выгрузки;
		
		ТекИмяФайла = Неопределено;
		
		Если ТЧ_Осн.Количество() = ТЧ_Выг.Количество() Тогда
			Для НомСтрТЧ = 0 По ТЧ_Осн.Количество() - 1 Цикл
				Если ТЧ_Осн[НомСтрТЧ]["Основание"] = ПараметрыОтбора.Основание Тогда
					ТекИмяФайла = СокрЛП(ТЧ_Выг[НомСтрТЧ]["ИмяФайла"]);
					Если СтрНачинаетсяС(ТекИмяФайла, "NO_PRIB_") Тогда
						ДокументыВыгрузки.Добавить(СсылкаНаВыгрузкуОтчета, ТекИмяФайла);
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ТЧ_Осн.Количество() = 1 Тогда
				Для НомСтрТЧ = 0 По ТЧ_Выг.Количество() - 1 Цикл
					ТекИмяФайла = СокрЛП(ТЧ_Выг[НомСтрТЧ]["ИмяФайла"]);
					Если СтрНачинаетсяС(ТекИмяФайла, "NO_PRIB_") Тогда
						ДокументыВыгрузки.Добавить(СсылкаНаВыгрузкуОтчета, ТекИмяФайла);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыВыгрузки;
	
КонецФункции

// Возвращает в параметре функции "НастройкиСравнения" структуру данных, полученную из текстового макета,
// соответствующего форме сравниваемого отчета. Структура содержит имена макетов схем выгрузки,
// имена дополнительных обработчиков. Ключ "РазрешитьСравнение" определяет значение переменной,
// которая регулирует доступность кнопки "Сравнить" в отчете.
// Сама функция возвращает текстовый документ из найденного текстового макета.
// Используется функционалом сравнения отчетов.
//
// Параметры:
//  ПутьКФорме         - Строка     - Полное имя формы отчета, для которой возвращаются параметры настроек.
//
//  НастройкиСравнения - Структура  - Структура данных, содержащих параметры настроек для сравнения отчетов.
//
// Возвращаемое значение:
//   ТекстовыйДокумент - Текстовый документ из найденного шаблона настроек сравнения для формы отчета.
//
Функция ПравилаСравненияДляФормы(ПутьКФорме, НастройкиСравнения = Неопределено) Экспорт
	
	ПравилаСравнения = Неопределено;
	
	ОбъектОтчет = ОбъектОтчета(ПутьКФорме);
	ИмяМакета = СтрЗаменить(Сред(ПутьКФорме, СтрНайти(ПутьКФорме, ".Форма.") + 7), "ФормаОтчета", "НастройкиСравнения");
	
	МакетНайден = Ложь;
	Если ОбъектОтчет.Метаданные().Макеты.Найти("EF_" + ИмяМакета) <> Неопределено Тогда // имя макета из патча
		МакетНайден = Истина;
		ИмяМакета = "EF_" + ИмяМакета;
	ИначеЕсли ОбъектОтчет.Метаданные().Макеты.Найти(ИмяМакета) <> Неопределено Тогда // имя макета из конфигурации
		МакетНайден = Истина;
	КонецЕсли;
	
	Если МакетНайден Тогда
		ПравилаСравнения = ОбъектОтчет.ПолучитьМакет(ИмяМакета);
		КоличествоСтрок = ПравилаСравнения.КоличествоСтрок();
		Если КоличествоСтрок > 0 Тогда
			ОбластьНастройки = Неопределено;
			Для НомСтр = 1 По Мин(КоличествоСтрок, 100) Цикл
				СтрокаМакета = ПравилаСравнения.ПолучитьСтроку(НомСтр);
				Если СтрНайти(СтрокаМакета, "#Область") > 0 И СтрНайти(СтрокаМакета, "Настройки",, 10) > 0 Тогда
					ОбластьНастройки = ПравилаСравнения.ПолучитьОбласть("Настройки");
					ОбластьНастройки.УдалитьСтроку(1);
					ОбластьНастройки.УдалитьСтроку(ОбластьНастройки.КоличествоСтрок());
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ОбластьНастройки <> Неопределено Тогда
				Попытка
					ТекстОбласти = СтрЗаменить(ОбластьНастройки.ПолучитьТекст(), "\", "\\");
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(ТекстОбласти);
					ОбъектНастройки = ПрочитатьJSON(ЧтениеJSON);
					НастройкиСравнения = ОбъектНастройки;
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентированная отчетность'"), УровеньЖурналаРегистрации.Ошибка, , , ПутьКФорме + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
				ЧтениеJSON.Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПравилаСравнения;
	
КонецФункции

// Возвращает в параметре функции "НастройкиЗагрузки" структуру данных, полученную из текстового макета,
// соответствующего форме загружаемого отчета. Структура содержит имена макетов схем выгрузки и версии загружаемых
// форматов, имена дополнительных обработчиков. Ключ "ЗагрузкаРазрешена" определяет значение переменной, которая регулирует
// доступность кнопки "Загрузить" в отчете. Сама функция возвращает текстовый документ из найденного текстового макета.
// Используется функционалом загрузки отчета из файла.
//
// Параметры:
//  ПутьКФорме         - Строка     - Полное имя формы отчета, для которой возвращаются параметры настроек.
//
//  НастройкиЗагрузки  - Структура  - Структура данных, содержащих параметры настроек для загрузки отчета из файла.
//
// Возвращаемое значение:
//   ТекстовыйДокумент - Текстовый документ из найденного шаблона настроек загрузки для формы отчета.
//
Функция ПравилаЗагрузкиДляФормы(ПутьКФорме, НастройкиЗагрузки = Неопределено) Экспорт
	
	ПравилаЗагрузки = Неопределено;
	
	ОбъектОтчет = ОбъектОтчета(ПутьКФорме);
	ИмяМакета = СтрЗаменить(Сред(ПутьКФорме, СтрНайти(ПутьКФорме, ".Форма.") + 7), "ФормаОтчета", "НастройкиЗагрузкиXML");
	
	МакетНайден = Ложь;
	Если ОбъектОтчет.Метаданные().Макеты.Найти("EF_" + ИмяМакета) <> Неопределено Тогда // имя макета из патча
		МакетНайден = Истина;
		ИмяМакета = "EF_" + ИмяМакета;
	ИначеЕсли ОбъектОтчет.Метаданные().Макеты.Найти(ИмяМакета) <> Неопределено Тогда // имя макета из конфигурации
		МакетНайден = Истина;
	КонецЕсли;
	
	Если МакетНайден Тогда
		ПравилаЗагрузки = ОбъектОтчет.ПолучитьМакет(ИмяМакета);
		КоличествоСтрок = ПравилаЗагрузки.КоличествоСтрок();
		Если КоличествоСтрок > 0 Тогда
			ОбластьНастройки = Неопределено;
			Для НомСтр = 1 По Мин(КоличествоСтрок, 100) Цикл
				СтрокаМакета = ПравилаЗагрузки.ПолучитьСтроку(НомСтр);
				Если СтрНайти(СтрокаМакета, "#Область") > 0 И СтрНайти(СтрокаМакета, "Настройки",, 10) > 0 Тогда
					ОбластьНастройки = ПравилаЗагрузки.ПолучитьОбласть("Настройки");
					ОбластьНастройки.УдалитьСтроку(1);
					ОбластьНастройки.УдалитьСтроку(ОбластьНастройки.КоличествоСтрок());
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ОбластьНастройки <> Неопределено Тогда
				Попытка
					ТекстОбласти = СтрЗаменить(ОбластьНастройки.ПолучитьТекст(), "\", "\\");
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(ТекстОбласти);
					ОбъектНастройки = ПрочитатьJSON(ЧтениеJSON);
					НастройкиЗагрузки = ОбъектНастройки;
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентированная отчетность'"), УровеньЖурналаРегистрации.Ошибка, , , ПутьКФорме + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
				ЧтениеJSON.Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПравилаЗагрузки;
	
КонецФункции

// Возвращает структуру параметров для передачи в форму регламентированного отчета при ее открытии.
// Используется функционалом загрузки отчета из файла.
//
// Параметры:
//  РезультатАнализаФайловВыгрузки - Структура - Структура данных, сформированная
//                                               по результатам анализа файла выгрузки.
//  ПолноеИмяФормыОтчета - Строка  - Возвращается сгенерированное полное имя формы отчета, действующее
//                                   в отчетном периоде, полученном из данных результата анализа.
// Возвращаемое значение:
//   Структура - Параметры формы отчета.
//
Функция ПолучитьПараметрыОтчетаИзРезультатаАнализаФайловВыгрузки(РезультатАнализаФайловВыгрузки, ПолноеИмяФормыОтчета) Экспорт
	
	ИсточникОтчета = РезультатАнализаФайловВыгрузки.ВидОтчета.Источник;
	ИмяФормыОтчета = ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ИсточникОтчета, РезультатАнализаФайловВыгрузки.ДатаОкончания);
	
	Если ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета) <> Истина Тогда
		Возврат "Недостаточно прав";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяФормыОтчета) Тогда
		Возврат "Форма отчета не найдена";
	КонецЕсли;
	
	ИмяФормыОтчетаПоФормату = "";
	СвойстваВидаОтчета = Неопределено;
	РезультатАнализаФайловВыгрузки.Свойство("СвойстваВидаОтчета", СвойстваВидаОтчета);
	Если ТипЗнч(СвойстваВидаОтчета) = Тип("Структура") Тогда
		Если СвойстваВидаОтчета.Свойство("ВерсияФормата") Тогда
			Попытка
				ДеревоФормИФорматов = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета).ДеревоФормИФорматов();
				СтрокиФорматов = ДеревоФормИФорматов.Строки.НайтиСтроки(Новый Структура("Код", СвойстваВидаОтчета.ВерсияФормата), Истина);
				Для Каждого СтрокаФормата Из СтрокиФорматов Цикл
					Если СтрокаФормата.Уровень() = 1 Тогда
						ТекИмяФормыОтчета = СокрЛП(СтрокаФормата.Родитель.ИмяОбъекта);
						Если ФормаРеглОтчетаДействуетВОтчетномПериоде(ИсточникОтчета, РезультатАнализаФайловВыгрузки.ДатаОкончания, ТекИмяФормыОтчета) Тогда
							ИмяФормыОтчетаПоФормату = ТекИмяФормыОтчета;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Исключение
				ИмяФормыОтчетаПоФормату = ИмяФормыОтчета;
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка регламентированной отчетности'"), УровеньЖурналаРегистрации.Ошибка, , , ИсточникОтчета + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяФормыОтчетаПоФормату) Тогда
		ИмяФормыОтчета = ИмяФормыОтчетаПоФормату;
	КонецЕсли;
	
	ПараметрыФормыОтчета = Новый Структура;
	ПараметрыФормыОтчета.Вставить("Организация",              РезультатАнализаФайловВыгрузки.Организация);
	ПараметрыФормыОтчета.Вставить("мДатаНачалаПериодаОтчета", РезультатАнализаФайловВыгрузки.ДатаНачала);
	ПараметрыФормыОтчета.Вставить("мДатаКонцаПериодаОтчета",  РезультатАнализаФайловВыгрузки.ДатаОкончания);
	ПараметрыФормыОтчета.Вставить("мПериодичность",           РезультатАнализаФайловВыгрузки.Периодичность);
	ПараметрыФормыОтчета.Вставить("мВыбраннаяФорма",          ИмяФормыОтчета);
	ПараметрыФормыОтчета.Вставить("ИсточникОтчета",           ИсточникОтчета);
	
	ПолноеИмяФормыОтчета = ПолныйПутьКФорме(ИсточникОтчета, ИмяФормыОтчета);
	
	// Попытаемся подобрать организации для физического и юридического лица, если не заполнена в параметрах формы.
	Если ПараметрыФормыОтчета.Организация = Неопределено ИЛИ ПараметрыФормыОтчета.Организация.Пустая() Тогда
		ОргПоУмолчанию = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации").ОрганизацияПоУмолчанию();
		ОрганизацияПустаяСсылка = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации").ПустаяСсылка();
		
		Если НЕ ОргПоУмолчанию.Пустая() И НЕ ЭтоЮридическоеЛицо(ОргПоУмолчанию) Тогда
			ОрганизацияЮЛ = ОрганизацияПустаяСсылка;
			ОрганизацияФЛ = ОргПоУмолчанию;
		Иначе
			ОрганизацияЮЛ = ОргПоУмолчанию;
			ОрганизацияФЛ = ОрганизацияПустаяСсылка;
		КонецЕсли;
		
		Если НЕ ИспользуетсяОднаОрганизация() Тогда
			СписокФизЛиц = Новый СписокЗначений;
			РегламентированнаяОтчетность.ПолучитьСписокДоступныхИндивидуальныхПредпринимателей(СписокФизЛиц);
			Если СписокФизЛиц.Количество() > 0 И ОргПоУмолчанию = ОрганизацияПустаяСсылка Тогда
				ОрганизацияФЛ = ?(ОрганизацияФЛ.Пустая(), СписокФизЛиц[0].Значение, ОрганизацияФЛ);
			КонецЕсли;
			Выборка = Справочники.Организации.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если НЕ Выборка.ЭтоГруппа И ЭтоЮридическоеЛицо(Выборка) Тогда
					ОрганизацияЮЛ = ?(ОрганизацияЮЛ.Пустая(), Выборка.Ссылка, ОрганизацияЮЛ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПараметрыФормыОтчета.Вставить("ОрганизацияЮЛ", ОрганизацияЮЛ);
		ПараметрыФормыОтчета.Вставить("ОрганизацияФЛ", ОрганизацияФЛ);
	КонецЕсли;
	
	Возврат ПараметрыФормыОтчета;
	
КонецФункции

// Возвращает размер файла помещенного во временное хранилище.
// Используется функционалом загрузки отчета из файла.
//
// Параметры:
//  АдресДанных - Строка - Адрес временного хранилища данных файла.
//
// Возвращаемое значение:
//   Число - Размер файла в байтах.
//
Функция РазмерФайлаВоВременномХранилище(АдресДанных) Экспорт
	
	Возврат ПолучитьИзВременногоХранилища(АдресДанных).Размер();
	
КонецФункции

// Удаляет документ. Используется функционалом загрузки отчета из файла.
//
// Параметры:
//  ДокументСсылка  - ДокументСсылка.<ИмяДокумента> - Ссылка на удаляемый документ.
//
Процедура УдалитьСохраненныйДокумент(ДокументСсылка) Экспорт
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ДокументСсылка.ПолучитьОбъект().Удалить();
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при удалении документа: ""%1"".'"), Строка(ДокументСсылка));
		Сообщение.Сообщить();
	КонецПопытки;
КонецПроцедуры

// Перечитывает документ после заполнения в фоновом задании и обновляет версию данных ссылки.
// Используется функционалом загрузки отчета из файла.
//
// Параметры:
//  ДокументСсылка  - ДокументСсылка.<ИмяДокумента> - Ссылка на перечитываемый документ.
//
Процедура ПрочитатьСохраненныйДокумент(ДокументСсылка) Экспорт
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.Прочитать();
	ДокументОбъект.Записать();
	
КонецПроцедуры

#Область РучнойВводСтатусовОтправки

// Определяет, подключен ли документооборот с контролирующим органом для организация.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, для которой определяется
//                наличие подключенного документооборота с контролирующим органом.
//  КонтролирующийОрган - ПеречислениеСсылка.ТипыКонтролирующихОрганов - контролирующий
//                орган, для которого определяется наличие подключения.
//
// Возвращаемое значение:
//  Булево - Истина, если документооборот с контролирующим органом подключен.
//
Функция ПодключенДокументооборотСКонтролирующимОрганом(Организация = Неопределено, КонтролирующийОрган = Неопределено) Экспорт
	
	Возврат ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
		Организация, КонтролирующийОрган);
	
КонецФункции

// Возвращает значение реквизита "ИсточникОтчета" документа "Регламентированный отчет".
//
// Параметр:
//  Ссылка - ДокументСсылка.РегламентированныйОтчет - ссылка на документ "Регламентированный отчет".
//
// Возвращаемое значение: Строка.
//
Функция ИсточникРегламентированногоОтчета(Ссылка) Экспорт
	
	Возврат Ссылка.ИсточникОтчета;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции механизма поддержки внешних регламентированных отчетов.

Функция СвойстваВнешнегоОтчета(ОбъектЭлемент, Отчет) Экспорт
	
	СвойстваОтчета = Новый Структура;
	
	// создаем объект из выбранного внешнего отчета
	Если ЭтоАдресВременногоХранилища(Отчет) Тогда 
		ИмяФайлаОтчета = ПолучитьИмяВременногоФайла("erf");
		ПолучитьИзВременногоХранилища(Отчет).Записать(ИмяФайлаОтчета);
		Попытка
			ОбъектОтчет = ВнешниеОтчеты.Создать(ИмяФайлаОтчета);
		Исключение
			
			ТекстПредупреждения = 	"Ошибка при загрузке внешнего отчета:
									|
									|" + ИнформацияОбОшибке().Описание;
			СвойстваОтчета.Вставить("Результат", Ложь);
			СвойстваОтчета.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			Возврат СвойстваОтчета;
		КонецПопытки;
		УдалитьФайлы(ИмяФайлаОтчета);
	Иначе
		ОбъектОтчет = Отчет;
	КонецЕсли;
	
	// заполняем свойства внешнего отчета
	ПолнаяВерсияВнешнегоОтчета = ПолучитьВерсиюРегламентированногоОтчета(ОбъектОтчет);
	СвойстваПолнойВерсии = РазложитьПолнуюВерсиюРегламентированногоОтчета(ПолнаяВерсияВнешнегоОтчета);
	
	СвойстваОтчета.Вставить("Результат", Истина);
	
	СвойстваОтчета.Вставить("ИДКонфигурацииОтчета", СвойстваПолнойВерсии.ИДКонфигурации);
	СвойстваОтчета.Вставить("ИДКонфигурацииМетаданные", Метаданные.Имя);
	СвойстваОтчета.Вставить("ИДКонфигурацииИмя", РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации());
	
	СвойстваОтчета.Вставить("ВерсияКонфигурацииВнешнегоОтчета", СвойстваПолнойВерсии.ВерсияКонфигурации);
	СвойстваОтчета.Вставить("ВерсияКонфигурацииМетаданные", Метаданные.Версия);
	
	СвойстваОтчета.Вставить("КраткаяВерсияВнешнегоОтчета", СвойстваПолнойВерсии.КраткаяВерсия);
	СвойстваОтчета.Вставить("ОбъектОтчетМетаданныеИмя", ОбъектОтчет.Метаданные().Имя);
	
	Возврат СвойстваОтчета;
	
КонецФункции

Функция ЗарегистрироватьВнешнийОтчет(ОбъектСсылка, Отчет) Экспорт
	
	Результат = Новый Структура;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ТекстПредупреждения = "Метод не предназначен для использования в модели сервиса";
		Результат.Вставить("Зарегистрирован", Ложь);
		Результат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		Возврат Результат;
	КонецЕсли;
	
	// создаем объект из выбранного внешнего отчета
	Если ЭтоАдресВременногоХранилища(Отчет) Тогда 
		ИмяФайлаОтчета = ПолучитьИмяВременногоФайла("erf");
		ПолучитьИзВременногоХранилища(Отчет).Записать(ИмяФайлаОтчета);
		Попытка
			ОбъектОтчет = ВнешниеОтчеты.Создать(ИмяФайлаОтчета);
		Исключение
			ТекстПредупреждения = 	"Ошибка при загрузке внешнего отчета:
									|
									|" + ИнформацияОбОшибке().Описание;
			Результат.Вставить("Зарегистрирован", Ложь);
			Результат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			Возврат Результат;
		КонецПопытки;
		УдалитьФайлы(ИмяФайлаОтчета);
	КонецЕсли;
	
	Если ОбъектСсылка = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда 
		ОбъектЭлемент = Неопределено;
	Иначе
		ОбъектЭлемент = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	МетаданныеОтчета = ОбъектОтчет.Метаданные();
	ИмяМетаданныхОтчета = МетаданныеОтчета.Имя;
	СинонимМетаданныхОтчета = МетаданныеОтчета.Синоним;
	КомментарийКМетаданнымОтчета = МетаданныеОтчета.Комментарий;
	
	Если ОбъектЭлемент = Неопределено ИЛИ ПустаяСтрока(ОбъектЭлемент.ИсточникОтчета) Тогда
		Результат.Вставить("ИсточникОтчета", ИмяМетаданныхОтчета);
	КонецЕсли;
	
	Если ОбъектЭлемент = Неопределено ИЛИ ПустаяСтрока(ОбъектЭлемент.Наименование) Тогда
		Результат.Вставить("Наименование", ?(ЗначениеЗаполнено(СинонимМетаданныхОтчета), СинонимМетаданныхОтчета, ОбъектЭлемент.ИсточникОтчета));
	КонецЕсли;
	
	Если ОбъектЭлемент = Неопределено ИЛИ ПустаяСтрока(ОбъектЭлемент.Описание) И ЗначениеЗаполнено(КомментарийКМетаданнымОтчета) И КомментарийКМетаданнымОтчета <> МетаданныеОтчета.Синоним Тогда
		Результат.Вставить("Описание", КомментарийКМетаданнымОтчета);
	КонецЕсли;
	
	Результат.Вставить("ВнешнийОтчетИспользовать", Истина);
	
	ПолнаяВерсияВнешнегоОтчета = ПолучитьВерсиюРегламентированногоОтчета(ОбъектОтчет);
	СвойстваПолнойВерсии = РазложитьПолнуюВерсиюРегламентированногоОтчета(ПолнаяВерсияВнешнегоОтчета);
	
	Результат.Вставить("ВнешнийОтчетВерсия", СвойстваПолнойВерсии.КраткаяВерсия);
	
	Результат.Вставить("Зарегистрирован", Истина);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВерсиюРегламентированногоОтчета(ОбъектОтчет) Экспорт
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ОбъектОтчет, "мВерсияОтчета") Тогда
		Возврат ОбъектОтчет.мВерсияОтчета;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РазложитьПолнуюВерсиюРегламентированногоОтчета(ПолнаяВерсия) Экспорт
	
	Результат = Новый Структура("ИДКонфигурации, ВерсияКонфигурации, КраткаяВерсия, Подверсия");
	
	Если ЗначениеЗаполнено(ПолнаяВерсия) Тогда
		ВхождениеПробела = СтрНайти(ПолнаяВерсия, " ");
		Если ВхождениеПробела <> 0 Тогда
			Результат.ИДКонфигурации = СокрЛП(Лев(ПолнаяВерсия, ВхождениеПробела - 1));
			Результат.КраткаяВерсия = СокрЛП(Сред(ПолнаяВерсия, ВхождениеПробела + 1));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.КраткаяВерсия) Тогда
		
		КраткаяВерсия = Результат.КраткаяВерсия;
		СтрДлинаКраткаяВерсия = СтрДлина(КраткаяВерсия);
		Для ОбратныйИндекс = 1 По СтрДлинаКраткаяВерсия Цикл
			Инд = СтрДлинаКраткаяВерсия - ОбратныйИндекс + 1;
			ТекСимв = Сред(КраткаяВерсия, Инд, 1);
			Если ТекСимв = "." Тогда
				Результат.ВерсияКонфигурации = СокрЛП(Лев(КраткаяВерсия, Инд - 1));
				Результат.Подверсия = СокрЛП(Сред(КраткаяВерсия, Инд + 1));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПараметрыВнешнихРегламентированныхОтчетов(ИмяПараметра = Неопределено, УстановленныеПараметры = Неопределено) Экспорт
	
	ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов = Новый ФиксированноеСоответствие(Новый Соответствие);
	
КонецПроцедуры

Функция ИсточникОтчета(ИмяФормыСтр) Экспорт
	
	МассивИмениФормы = СтрРазделить(ИмяФормыСтр, ".", Ложь);
	Если СтрНачинаетсяС(МассивИмениФормы[1], "РегламентированныйОтчет") Тогда
		Возврат МассивИмениФормы[1];
		
	КонецЕсли;
	
	Для Каждого ЭлементИмени Из МассивИмениФормы Цикл
		Если СтрНачинаетсяС(ЭлементИмени, "РегламентированныйОтчет") Тогда
			Возврат ЭлементИмени;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ОтчетОбъект(ИсточникОтчета) Экспорт
	
	ЭтоВнешнийОтчет = РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИсточникОтчета);
	Если ЭтоВнешнийОтчет Тогда 
		Возврат ВнешниеОтчеты.Создать(ИсточникОтчета);
	Иначе
		Возврат Отчеты[ИсточникОтчета];
	КонецЕсли;
	
КонецФункции

Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если СтрНайти(ЭтаФормаИмя, "Внешний") > 0 Тогда
		ФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
		Попытка
			Возврат ВнешниеОтчеты.Создать(Сред(Лев(ФормаИмя, СтрНайти(ФормаИмя, ".Форма.") - 1), 7));
		Исключение
			Возврат ВнешнийОтчетВФоновомЗадании(Сред(Лев(ФормаИмя, СтрНайти(ФормаИмя, ".Форма.") - 1), 7));
		КонецПопытки;
	ИначеЕсли СтрНачинаетсяС(ЭтаФормаИмя, "Документ") Тогда
		Возврат Документы[Сред(Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1), 10)].СоздатьДокумент();
	Иначе
		Возврат Отчеты[Сред(Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1), 7)].Создать();
	КонецЕсли;
	
КонецФункции

Функция ВнешнийОтчетВФоновомЗадании(НаимРеглОтч)
	РеглОтч = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", НаимРеглОтч);
	Если РеглОтч = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
		Если Метаданные.Отчеты.Найти(НаимРеглОтч) <> Неопределено Тогда
			Возврат Отчеты[НаимРеглОтч];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать,
	                      |	РегламентированныеОтчеты.ИсточникОтчета,
	                      |	ВЫБОР
	                      |		КОГДА РегламентированныеОтчеты.ВнешнийОтчетИспользовать
	                      |			ТОГДА РегламентированныеОтчеты.ВнешнийОтчетХранилище
	                      |		ИНАЧЕ NULL
	                      |	КОНЕЦ КАК ВнешнийОтчетХранилище
	                      |ИЗ
	                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	                      |ГДЕ
	                      |	РегламентированныеОтчеты.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", РеглОтч);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ПризнакИспользованияВнешнегоОтчета = Выборка.ВнешнийОтчетИспользовать;
	Если ПризнакИспользованияВнешнегоОтчета Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Выборка.ВнешнийОтчетХранилище.Получить());
		ИмяОбработки = ВнешниеОтчеты.Подключить(АдресВоВременномХранилище, , Ложь,
				ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
		Возврат ВнешниеОтчеты.Создать(ИмяОбработки, Истина);
	КонецЕсли;
КонецФункции

Функция ПолныйПутьКФорме(ИсточникОтчета, ВыбраннаяФорма) Экспорт
	
	ЭтоВнешнийОтчет = РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИсточникОтчета);
	Возврат ?(ЭтоВнешнийОтчет, "ВнешнийОтчет.", "Отчет.") + ИсточникОтчета + ".Форма." + ВыбраннаяФорма;
	
КонецФункции

Функция ИспользуетсяОднаОрганизация() Экспорт
	
	// Если нет функциональной опции, то работает как будто в базе несколько организаций.
	Если НЕ ЕстьФункциональнаяОпцияИспользоватьНесколькоОрганизаций() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если функциональная опция есть, то возвращаем ее значение.
	ИспользуетсяОднаОрганизация = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийРегламентированнаяОтчетность");
	
	Возврат ИспользуетсяОднаОрганизация; 
		
КонецФункции

Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт

	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если СтрНайти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли; 
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;
	
КонецПроцедуры

Процедура СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти, Постфикс = "ХХ_1") Экспорт
	
	// Определим область удаляемой строки.
	НазначитьИмяОбластиМЧ = Ложь;
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,, НомерНижнЯчейкиОбласти,);
	Если СтрНайти(УдаляемаяОбласть.Имя, "МногострочнаяЧасть") Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = УдаляемаяОбласть.Имя;
	КонецЕсли;
	// Определяем позицию области ячейки номера строки, если она содержится в удаляемой строке.
	ПозицияОбластиЯчейкиНомераСтроки = 0;
	ОбластьЯчейкиНомераСтроки = ТекТабличноеПоле.ПолучитьОбласть(НомерВерхЯчейкиОбласти,, НомерНижнЯчейкиОбласти,).Области.Найти(ИмяГруппы + Постфикс);
	Если ОбластьЯчейкиНомераСтроки <> Неопределено Тогда
		Если НЕ ОбластьЯчейкиНомераСтроки.СодержитЗначение Тогда
			ПозицияОбластиЯчейкиНомераСтроки = ОбластьЯчейкиНомераСтроки.Лево;
		КонецЕсли; 
	КонецЕсли; 
	// Непосредственно удаляем область строки табличного документа.
	ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали);
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,, НомерНижнЯчейкиОбласти,).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;
	// Восстанавливаем ячейку номера строки, если она была в составе удаленной области.
	Если ПозицияОбластиЯчейкиНомераСтроки > 0 Тогда
		ЗаменяемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, ПозицияОбластиЯчейкиНомераСтроки, НомерНижнЯчейкиОбласти, ПозицияОбластиЯчейкиНомераСтроки);
		ТекстОбластиЯчейкиНомераСтроки = ОбластьЯчейкиНомераСтроки.Текст;
		ЗаполнитьЗначенияСвойств(ЗаменяемаяОбласть, ОбластьЯчейкиНомераСтроки,, "Имя");
		ЗаменяемаяОбласть.Текст = ТекстОбластиЯчейкиНомераСтроки;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Журнал отчетности.

Процедура ОтразитьВЖурналеОтчетов(ПараметрыОтчета) Экспорт
	
	ПредставлениеВида        = ПараметрыОтчета.ПредставлениеВида;
	ДокСсылка                = ПараметрыОтчета.ДокСсылка;
	НаименованиеОтчета       = ПараметрыОтчета.НаименованиеОтчета;
	Организация              = ПараметрыОтчета.Организация;
	ДатаНачалаОП             = ПараметрыОтчета.ДатаНачалаОП;
	ДатаОкончанияОП          = ПараметрыОтчета.ДатаОкончанияОП;
	СтатусОтправки           = ПараметрыОтчета.СтатусОтправки;
	ДатаСоздания             = ПараметрыОтчета.ДатаСоздания;
	ВидКонтролирующегоОргана = ПараметрыОтчета.ВидКонтролирующегоОргана;
	КодКонтролирующегоОргана = ПараметрыОтчета.КодКонтролирующегоОргана;
	Комментарий              = ПараметрыОтчета.Комментарий;
	
	СохрСтатусОтправки = СтатусОтправки;
	
	Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет")
		И ДокСсылка.Периодичность = Перечисления.Периодичность.Месяц Тогда
		
		ПредставлениеФинПериода = ПредставлениеФинансовогоПериода(ДатаНачалаОП, ДатаОкончанияОП, "Ложь");
		
	Иначе
		
		ПредставлениеФинПериода = ПредставлениеФинансовогоПериода(ДатаНачалаОП, ДатаОкончанияОП);
		
	КонецЕсли;
	
	// Переопределение представления периода для форм бухотчетности.
	ФормыБухОтчетности = Новый Массив;
	ФормыБухОтчетности.Добавить("РегламентированныйОтчетБухОтчетность");
	ФормыБухОтчетности.Добавить("РегламентированныйОтчетБухОтчетностьМП");
	ФормыБухОтчетности.Добавить("РегламентированныйОтчетБухОтчетностьСОНКО");
	
	Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Если (ФормыБухОтчетности.Найти(ДокСсылка.ИсточникОтчета) <> Неопределено
			И ДатаНачалаОП <> НачалоГода(ДатаНачалаОП))
			ИЛИ ДокСсылка.ИсточникОтчета = "РегламентированныйОтчетСтрановойОтчет" Тогда
			ПредставлениеФинПериода
			= Формат(ДатаНачалаОП, "ДФ=""дд.ММ.гггг""") + " - " + Формат(ДатаОкончанияОП, "ДФ=""дд.ММ.гггг""");
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ОшибкаУстановкиБлокировки = Ложь;
	
	Попытка
		
		// Определение статуса отчета.
		СостояниеСдачиОтчетности = Неопределено;
		ОбъектОтправляетсяВКонтролирующиеОрганы
			= ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОбъектОтправляетсяВКонтролирующиеОрганы(ДокСсылка);
		Если ОбъектОтправляетсяВКонтролирующиеОрганы Тогда
			ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОпределитьСтатусИСостояниеСдачиОтчетности(
				ДокСсылка, Организация, ВидКонтролирующегоОргана, СостояниеСдачиОтчетности, СтатусОтправки);
		ИначеЕсли ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.Минобороны") Тогда
			ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОпределитьСтатусИСостояниеСдачиОтчетности(
				ДокСсылка, Организация, ВидКонтролирующегоОргана, СостояниеСдачиОтчетности, СтатусОтправки);
			ТекущийСтатус = РегламентированнаяОтчетность.СохраненныйСтатусОтправкиРеглОтчета(ДокСсылка);
			// приводим статус к статусу в журнале
			Если ТекущийСтатус = "Передано в Минобороны" Тогда
				ТекущийСтатус = "Передано";
			КонецЕсли; 
			Если ТекущийСтатус <> Неопределено Тогда
				СтатусОтправки = ТекущийСтатус;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет")
			И НеотправляемыйРеглОтчетИмеетВозможностьИзмененияСтатусаОтправкиИзФормыОтчетаВручную(
				ДокСсылка.ИсточникОтчета) Тогда
			ТекущийСтатус = РегламентированнаяОтчетность.СохраненныйСтатусОтправкиРеглОтчета(ДокСсылка);
			Если ТекущийСтатус <> Неопределено Тогда
				СтатусОтправки = ТекущийСтатус;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураКлюча = Новый Структура("Ссылка", ДокСсылка);
		Ключ = РегистрыСведений.ЖурналОтчетовСтатусы.СоздатьКлючЗаписи(СтруктураКлюча);
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Ключ);
		Исключение
			ОшибкаУстановкиБлокировки = Истина;
			ВызватьИсключение;
		КонецПопытки;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналОтчетовСтатусы");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокСсылка);
		Блокировка.Заблокировать();
		
		Непрочтенное = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОпределитьНепрочтенность(
			ДокСсылка,
			"ЖурналОтчетовСтатусы",
			СостояниеСдачиОтчетности,
			Перечисления.СтраницыЖурналаОтчетность.Отчеты);
			
		ДатаОтправкиОтчета = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьДатуОтправки(ДокСсылка, ВидКонтролирующегоОргана);
		
		Если ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.Минобороны") Тогда
			Непрочтенное = Ложь;
		КонецЕсли; 
		
		НаборЗаписей = РегистрыСведений.ЖурналОтчетовСтатусы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(ДокСсылка);
		Запись = НаборЗаписей.Добавить();
		
		Запись.Ссылка                             = ДокСсылка;
		Запись.НеОтправляетсяВКонтролирующийОрган = ОбъектОтправляетсяВКонтролирующиеОрганы <> Истина;
		Запись.Статус                             = СтатусОтправки;
		Запись.СостояниеСдачиОтчетности           = СостояниеСдачиОтчетности;
		Запись.НаименованиеОтчета                 = НаименованиеОтчета;
		Запись.ВидКонтролирующегоОргана           = ВидКонтролирующегоОргана;
		Запись.КодКонтролирующегоОргана           = КодКонтролирующегоОргана;
		Запись.ПредставлениеКонтролирующегоОргана = ПредставлениеКонтролирующегоОргана(Запись);
		Запись.ДатаНачала                         = ДатаНачалаОП;
		Запись.ДатаОкончания                      = ДатаОкончанияОП;
		Запись.ФинансовыйПериод                   = ПредставлениеФинПериода;
		Запись.Организация                        = Организация;
		Запись.ВариантОтчета                      = ПредставлениеВида;
		Запись.Комментарий                        = Комментарий;
		Запись.ПометкаУдаления                    = ДокСсылка.ПометкаУдаления;
		Запись.ЕстьКритическиеОшибкиОтправки      = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЕстьКритическиеСообщения(ДокСсылка);
		Запись.Непрочтенное                       = Непрочтенное;
		Запись.ДатаОтправки                       = ДатаОтправкиОтчета;
		
		Если СохрСтатусОтправки = "Сдано" Тогда
			
			Запись.Статус = СохрСтатусОтправки;
			
		КонецЕсли;
		
		Если РегламентированнаяОтчетность.ЕстьФайлыПрисоединенныеКОбъекту(ДокСсылка) Тогда
			Запись.ИндексКартинки = ?(Запись.ПометкаУдаления, 1, 3);
		Иначе
			Запись.ИндексКартинки = ?(Запись.ПометкаУдаления, 0, 2);
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Если ОшибкаУстановкиБлокировки Тогда
			Возврат;
		Иначе
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Журнал отчетов (статусы): ошибка записи'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПредставлениеФинансовогоПериода(ДатаНачалаОтчетногоПериода, ДатаОкончанияОтчетногоПериода, ФП = "Истина") Экспорт

	ДатаНачалаОП    = ?(ЗначениеЗаполнено(ДатаНачалаОтчетногоПериода), ДатаНачалаОтчетногоПериода, Дата(1, 1, 1));
	ДатаОкончанияОП = ?(ЗначениеЗаполнено(ДатаОкончанияОтчетногоПериода), ДатаОкончанияОтчетногоПериода, Дата(1, 1, 1));
	ДатаОкончанияОП = ?(ДатаНачалаОП > ДатаОкончанияОП, ДатаНачалаОП, ДатаОкончанияОП);
	
	ПредставлениеФинПериода = ПредставлениеПериода(НачалоДня(ДатаНачалаОП), КонецДня(ДатаОкончанияОП), "Л=ru_RU;ФП=" + ФП);
	
	Если ЗначениеЗаполнено(ДатаОкончанияОтчетногоПериода) Тогда
		
		ПредставлениеФинПериодаГод = ПредставлениеПериода(НачалоГода(ДатаОкончанияОП), КонецГода(ДатаОкончанияОП), "Л=ru_RU;ФП=" + ФП);
		
		Если ФП = "Ложь"
		   И ДатаНачалаОП = НачалоГода(ДатаНачалаОП) Тогда
			
			Если СтрНайти(ПредставлениеФинПериода, "1 квартал") > 0 Тогда
				
				ПредставлениеФинПериода = СтрЗаменить(ПредставлениеФинПериода, НСтр("ru='1 квартал'"), НСтр("ru='Январь - Март'"));
				
			ИначеЕсли ПредставлениеФинПериода = ПредставлениеФинПериодаГод Тогда
				
				ПредставлениеФинПериода = НСтр("ru='Январь - Декабрь '") + ПредставлениеФинПериодаГод;
				
			КонецЕсли;	
			
		КонецЕсли;
						
		Если СтрНайти(ПредставлениеФинПериода, ПредставлениеФинПериодаГод) > 0 Тогда
			
			ПредставлениеФинПериода = СтрЗаменить(СтрЗаменить(ПредставлениеФинПериода, ПредставлениеФинПериодаГод, ""), "  ", " ")
									+ ПредставлениеФинПериодаГод;
									
		КонецЕсли; 
		
								
	КонецЕсли;
		
	Возврат ПредставлениеФинПериода;
	
КонецФункции

Функция ПредставлениеКонтролирующегоОргана(ЗначенияЗаполнения) Экспорт
	
	ПредставлениеКонтролирующегоОргана = "";
	Если ЗначениеЗаполнено(ЗначенияЗаполнения.ВидКонтролирующегоОргана) Тогда
		КодКонтролирующегоОргана = ?(ЗначениеЗаполнено(ЗначенияЗаполнения.КодКонтролирующегоОргана), " " + Строка(ЗначенияЗаполнения.КодКонтролирующегоОргана), "");
		
		Если ЗначенияЗаполнения.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
			ПредставлениеКонтролирующегоОргана = "ФСРАР" + КодКонтролирующегоОргана;
		Иначе
			ПредставлениеКонтролирующегоОргана = Строка(ЗначенияЗаполнения.ВидКонтролирующегоОргана) + КодКонтролирующегоОргана;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначенияЗаполнения) = Тип("Структура") И ЗначенияЗаполнения.Свойство("Ссылка")
		И ТипЗнч(ЗначенияЗаполнения.Ссылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		ПредставлениеКонтролирующегоОргана = ЗначенияЗаполнения.КодКонтролирующегоОргана;
	КонецЕсли;
		
	Возврат ПредставлениеКонтролирующегоОргана;
	
КонецФункции

Функция СведенияПоОбъектуНеВходящемуВБРО(Ссылка) Экспорт
	
	ТаблицаОбъектовНеВходящихВБРО = РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
	СведенияПоОбъекту = ТаблицаОбъектовНеВходящихВБРО.Найти(ТипЗнч(Ссылка), "ТипОбъекта");
	
	// Строку таблицы значений преобразуем в структуру
	Если СведенияПоОбъекту <> Неопределено Тогда
		СтруктураСведений = Новый Структура;
		Для каждого Колонка Из ТаблицаОбъектовНеВходящихВБРО.Колонки Цикл
			СтруктураСведений.Вставить(Колонка.Имя, СведенияПоОбъекту[Колонка.Имя]);
		КонецЦикла;
	Иначе
		СтруктураСведений = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураСведений;
	
КонецФункции

Процедура ЗаполнитьРегистрЖурналОчетовСтатусы(Параметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаДетальныеЗаписи = ВыборкаОбъектовНеЗаписанныхВРегистрЖурналОтчетовСтатусы();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// Запись в регистр
		Предмет = ВыборкаДетальныеЗаписи.Объект;
		Отказ   = Ложь;
		РегламентированнаяОтчетность.ЗаписьОбъектовРегламентированнойОтчетности(Предмет, Отказ);
		
	КонецЦикла;
	
	НастройкиДанныхФормыСозданияОтчетаВыборка = ХранилищеНастроекДанныхФорм.Выбрать(Новый Структура("КлючОбъекта,КлючНастроек",
		"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаСозданияОтчета", "ФормаОтчетность_ФормаСозданияОтчета_РанееСозданныеОтчеты"));
	Пока НастройкиДанныхФормыСозданияОтчетаВыборка.Следующий() Цикл
		Если ТипЗнч(НастройкиДанныхФормыСозданияОтчетаВыборка.Настройки) = Тип("ТаблицаЗначений") Тогда
			ХранилищеНастроекДанныхФорм.Сохранить(НастройкиДанныхФормыСозданияОтчетаВыборка.КлючОбъекта,
				НастройкиДанныхФормыСозданияОтчетаВыборка.КлючНастроек, Неопределено,, НастройкиДанныхФормыСозданияОтчетаВыборка.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция КоличествоОбъектовНеЗаписанныхВРегистрЖурналОтчетовСтатусы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоОбъектов = 0;
	
	ВыборкаОбъектовНеЗаписанныхВРегистр = ВыборкаОбъектовНеЗаписанныхВРегистрЖурналОтчетовСтатусы();
	Пока ВыборкаОбъектовНеЗаписанныхВРегистр.Следующий() Цикл
		Отказ = Ложь;
		СтандартнаяОбработка = Истина;
		РегламентированнаяОтчетностьПереопределяемый.ЗаписьОбъектовРегламентированнойОтчетности(ВыборкаОбъектовНеЗаписанныхВРегистр.Объект, Отказ, СтандартнаяОбработка);
		Если НЕ СтандартнаяОбработка Тогда
			Продолжить;
		КонецЕсли;
		КоличествоОбъектов = КоличествоОбъектов + 1;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КоличествоОбъектов;
	
КонецФункции

Процедура УдалитьНекорректныеЗаписиИзРегистраЖурналОчетовСтатусы() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЖурналОтчетовСтатусы.Ссылка
		|ИЗ
		|	РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
		|ГДЕ
		|	ЖурналОтчетовСтатусы.Ссылка ЕСТЬ NULL ИЛИ ЖурналОтчетовСтатусы.Ссылка = &ПустаяСсылкаОбъекта
		|");
		
	Запрос.УстановитьПараметр("ПустаяСсылкаОбъекта", Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ЖурналОтчетовСтатусы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Выборка.Ссылка);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция КоличествоНекорректныхЗаписейРегистраЖурналОчетовСтатусы() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЖурналОтчетовСтатусы.Ссылка
		|ИЗ
		|	РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
		|ГДЕ
		|	ЖурналОтчетовСтатусы.Ссылка ЕСТЬ NULL ИЛИ ЖурналОтчетовСтатусы.Ссылка = &ПустаяСсылкаОбъекта
		|");
		
	Запрос.УстановитьПараметр("ПустаяСсылкаОбъекта", Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();
	
КонецФункции

// Возвращает признак возможности присоединения файлов к объекту
// (наличие права доступа на добавление файлов не проверяется).
//
// Параметры:
//   ВладелецФайлов - ДокументСсылка, СправочникСсылка - ссылка на объект
//                    в регистре сведений "Журнал отчетов статусы".
//
Функция ВозможноПрисоединениеФайловКОбъекту(ВладелецФайлов) Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
	Если МодульРаботаСФайламиСлужебный = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов, "");
	СправочникПрисоединенныеФайлы = Метаданные.Справочники.Найти(ИмяСправочника);
	Если СправочникПрисоединенныеФайлы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяРегистраСведений = "ДвоичныеДанныеФайлов";
	РегистрСведенийПрисоединенныеФайлы = Метаданные.РегистрыСведений.Найти(ИмяРегистраСведений);
	Если РегистрСведенийПрисоединенныеФайлы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипыХранимыхФайлов = Метаданные.РегистрыСведений[ИмяРегистраСведений].Измерения.Файл.Тип;
	
	Возврат ТипыХранимыхФайлов.СодержитТип(Тип("СправочникСсылка." + ИмяСправочника));
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьИВыборочноОбновитьШаблоныМашиночитаемыхФормНаВебСервисе(ПрефиксИмениШаблона, ШаблоныМашиночитаемыхФорм, Прокси)

	Перем СписокНайденныхШаблонов;
	
	Если Прокси.CheckTemplates(ПрефиксИмениШаблона, СписокНайденныхШаблонов) <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	WSФабрикаXDTO = Прокси.Определение.ФабрикаXDTO;
	WSТипСписокШаблонов = ПолучитьWSТипПоИмени(WSФабрикаXDTO, "TemplatesList");
	Если WSТипСписокШаблонов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	WSСписокНайденныхШаблонов = СписокНайденныхШаблонов.StringItem;
	Если WSСписокНайденныхШаблонов.Количество() > 0 Тогда
		
		Для каждого ИмяВнешнегоШаблона Из WSСписокНайденныхШаблонов Цикл
			ИмяВнешнегоШаблона = СокрЛП(ИмяВнешнегоШаблона);
			
			КоличествоШаблоновВСписке = ШаблоныМашиночитаемыхФорм.Количество();
			Для Ном = 1 По КоличествоШаблоновВСписке Цикл
				ИмяВнутренногоШаблона = СокрЛП(ШаблоныМашиночитаемыхФорм.Получить(КоличествоШаблоновВСписке - Ном).Представление);
				Если Лев(ИмяВнешнегоШаблона, СтрДлина(ИмяВнешнегоШаблона) - 7) =  Лев(ИмяВнутренногоШаблона, СтрДлина(ИмяВнутренногоШаблона) - 7)
				   И Лев(ИмяВнешнегоШаблона, СтрДлина(ИмяВнешнегоШаблона) - 4) >= Лев(ИмяВнутренногоШаблона, СтрДлина(ИмяВнутренногоШаблона) - 4) Тогда
					ШаблоныМашиночитаемыхФорм.Удалить(КоличествоШаблоновВСписке - Ном);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Если ШаблоныМашиночитаемыхФорм.Количество() = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Отсутствует шаблон для формирования машиночитаемой формы!" + Символы.ПС + "Необходимо зарегистрировать в информационной базе внешний шаблон'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ШаблоныМашиночитаемыхФорм.Количество() > 0 Тогда
		
		WSСписокШаблонов = WSФабрикаXDTO.Создать(WSТипСписокШаблонов);
		WSТипЭлементШаблон = ПолучитьWSТипПоИмени(WSФабрикаXDTO, "TemplateItem");
		
		Для каждого ШаблонМашиночитаемойФормы Из ШаблоныМашиночитаемыхФорм Цикл
			WSЭлементШаблон = WSФабрикаXDTO.Создать(WSТипЭлементШаблон);
			WSЭлементШаблон.TemplateName = ШаблонМашиночитаемойФормы.Представление;
			WSЭлементШаблон.TemplateBinData = ШаблонМашиночитаемойФормы.Значение;
			WSЭлементШаблон.DatePlace = ТекущаяДатаСеанса();
			WSСписокШаблонов.TemplateItem.Добавить(WSЭлементШаблон);
		КонецЦикла;
		
		Если Прокси.UploadTemplates(WSСписокШаблонов) <> Истина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не удалось обновить шаблон машиночитаемой формы на веб-сервисе'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПолучитьWSТипПоИмени(WSФабрикаXDTO, ИмяТипаВПакете)

	URIПространстваИмен = "";
	Для каждого WSПакетXDTO Из WSФабрикаXDTO.Пакеты Цикл
		Если СтрНайти(WSПакетXDTO.URIПространстваИмен, "/LibraryRegulatoryReporting/") > 0 Тогда
			URIПространстваИмен = WSПакетXDTO.URIПространстваИмен;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Возврат WSФабрикаXDTO.Тип(URIПространстваИмен, ИмяТипаВПакете);
	Исключение
		Возврат Неопределено;
	КонецПопытки;

КонецФункции

Функция ЕстьФункциональнаяОпцияИспользоватьНесколькоОрганизаций()
	
	ФункциональнаяОпцияПрисутствует = Метаданные.ФункциональныеОпции.Найти("ИспользоватьНесколькоОрганизацийРегламентированнаяОтчетность") <> Неопределено;
	
	Возврат ФункциональнаяОпцияПрисутствует;
		
КонецФункции

Функция ВыборкаОбъектовНеЗаписанныхВРегистрЖурналОтчетовСтатусы()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.РегламентированныйОтчет"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов"));
	
	// Дополняем таблицу типов объектами, не входящими в БРО
	ТаблицаОписанияОбъектовНеВходящихВБРО 	= РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
	ОписанияОбъектовНеВходящихВБРО = ТаблицаОписанияОбъектовНеВходящихВБРО.НайтиСтроки(
		Новый Структура("ВидДокумента", Перечисления.СтраницыЖурналаОтчетность.Отчеты));

	Для каждого Описание Из ОписанияОбъектовНеВходящихВБРО Цикл
		МассивТипов.Добавить(Описание.ТипОбъекта);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	// Составляем запрос
	КоличествоТипов = МассивТипов.Количество();
	Для каждого ТипОбъекта Из МассивТипов Цикл
		
		ИндексЭлемента = МассивТипов.Найти(ТипОбъекта);
		ПолноеИмяТипа  = Метаданные.НайтиПоТипу(ТипОбъекта).ПолноеИмя();
		ИмяТипа        = Метаданные.НайтиПоТипу(ТипОбъекта).Имя;
		
		// Формируем основную часть запроса
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
			|	%1.Ссылка КАК Объект
			|ИЗ
			|	%2 КАК %1
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
			|		ПО (ЖурналОтчетовСтатусы.Ссылка = %1.Ссылка)
			|ГДЕ
			|	ЖурналОтчетовСтатусы.Ссылка Есть NULL";
			
		// Берем не все электронные представление, а только не относящиеся к уведомлениям
		Если ТипОбъекта = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
			Запрос.Текст = Запрос.Текст + "
				|И %1.ВидОтчета НЕ В (&ВидыОтчетовРазделаУведомления)";
				
			ВидыОтчетовРазделаУведомления = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ВидыЭлектронныхПредставленийВРазделеУведомления();
			Запрос.УстановитьПараметр("ВидыОтчетовРазделаУведомления", ВидыОтчетовРазделаУведомления);
		ИначеЕсли ВРег(СокрЛП(ПолноеИмяТипа)) = ВРег("Справочник.КомплектыОтчетностиПерсУчета") Тогда
			Запрос.Текст = Запрос.Текст + "
				|И %1.ОтчетныйПериод < ДАТАВРЕМЯ (2014,01,01)";
			
		КонецЕсли;
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ИмяТипа);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", ПолноеИмяТипа);
			
		// Добавляем объединение между запросами
		Если ИндексЭлемента <> КоличествоТипов - 1 Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
			
		КонецЕсли;
				
	КонецЦикла;
	
	// Выполнение полученного запроса
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

Функция ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(Текст, ТекСтрИмяФайла, КодировкаТекста, УникальныйИДФормы = Неопределено) Экспорт 
		
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("tmp");
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Текст);
	ТД.Записать(ИмяВременногоФайла, КодировкаТекста);	
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Адрес = ПоместитьВоВременноеХранилище(ФайлВыгрузки, ?(ЗначениеЗаполнено(УникальныйИДФормы) = Истина, УникальныйИДФормы, Новый УникальныйИдентификатор()));
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция ПолучитьКодОКПООрганизации(Организация)
	ИмяРеквКодПоОКПО = "КодПоОКПО";
	Если Метаданные.Справочники.Организации.Реквизиты.Найти("КодОКПО") <> Неопределено Тогда
		ИмяРеквКодПоОКПО = "КодОКПО";
	КонецЕсли;
	Возврат СокрЛП(Организация[ИмяРеквКодПоОКПО]);
КонецФункции

Функция ПолучитьОКПОФормыСтатистикиСПодразделением(Форма) Экспорт
	Реквизиты = Форма.ПолучитьРеквизиты();
	ЕстьРеквизитОбособленноеПодразделение = Ложь;
	Для Каждого Рекв Из Реквизиты Цикл 
		Если Рекв.Имя = "ОбособленноеПодразделение" Тогда 
			ЕстьРеквизитОбособленноеПодразделение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьРеквизитОбособленноеПодразделение Тогда 
		Возврат ПолучитьКодОКПООрганизации(Форма.СтруктураРеквизитовФормы.Организация);
	КонецЕсли;
	
	ОбособленноеПодразделение = Форма.ОбособленноеПодразделение;
	ПризнакИспользования = Ложь;
	РегламентированнаяОтчетностьПереопределяемый.ИспользуетсяОтправкаВРосстатПоРазнымНаправлениям(ПризнакИспользования);
	Если Не ЗначениеЗаполнено(ОбособленноеПодразделение) Или Не ПризнакИспользования Тогда 
		Возврат ПолучитьКодОКПООрганизации(Форма.СтруктураРеквизитовФормы.Организация);
	Иначе
		КодОКПО = "";
		РегламентированнаяОтчетностьПереопределяемый.ПолучитьКодОКПОПодразделения(ОбособленноеПодразделение, КодОКПО);
		Если Не ЗначениеЗаполнено(СокрЛП(КодОКПО)) Тогда
			КодОКПО = ПолучитьКодОКПООрганизации(Форма.СтруктураРеквизитовФормы.Организация);
		КонецЕсли;
		Возврат КодОКПО;
	КонецЕсли;
КонецФункции

Функция ПолучитьОКПОПодразделения(ОбособленноеПодразделение, Организация) Экспорт
	ПризнакИспользования = Ложь;
	РегламентированнаяОтчетностьПереопределяемый.ИспользуетсяОтправкаВРосстатПоРазнымНаправлениям(ПризнакИспользования);
	Если Не ЗначениеЗаполнено(ОбособленноеПодразделение) Или Не ПризнакИспользования Тогда 
		Возврат ПолучитьКодОКПООрганизации(Организация);
	Иначе
		КодОКПО = "";
		РегламентированнаяОтчетностьПереопределяемый.ПолучитьКодОКПОПодразделения(ОбособленноеПодразделение, КодОКПО);
		Если Не ЗначениеЗаполнено(СокрЛП(КодОКПО)) Тогда
			КодОКПО = ПолучитьКодОКПООрганизации(Организация);
		КонецЕсли;
		Возврат КодОКПО;
	КонецЕсли;
КонецФункции

Функция ПроверитьКСНаСервере(УникальныйИдентификатор, АдресХранилища, ИдентификаторЗадания, РезультатПроверкиКС, АдресВозвращаемыхПараметровДляПроверкиВФоне) Экспорт 
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("УниверсальныйОтчетСтатистики.ПроверитьКонтрольныеСоотношенияВОтчетеВФоне", 
										Новый Структура("Параметры, АдресХранилища",
										ПолучитьИзВременногоХранилища(АдресВозвращаемыхПараметровДляПроверкиВФоне), ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор)),
										ПараметрыВыполненияВФоне);
										
		
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", НРег(РезультатВыполнения.Статус) = "выполнено");
	АдресХранилища       = РезультатВыполнения.АдресРезультата;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатПроверкиКС = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

Функция СоздатьПустуюСтруктуруДанныхФайлаРазделов()
	Возврат Новый Структура("Имя, ДД, ДДАрх64");
КонецФункции

Процедура ЗаполнитьСтруктуруДанныхФайлаРаздела(ТабличныйДокумент, ДанныеФайловРазделов, АдресФайла, ПолноеИмяФайла, Каталог) Экспорт 
	
	ОбластьUID = ТабличныйДокумент.Области.Найти("UID_файла");
	СоответствиеФайлов = ПолучитьИзВременногоХранилища(ДанныеФайловРазделов);
	
	UIDСтрока = Строка(Новый УникальныйИдентификатор);
	ИмяФайла     = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ФайлЗагрузкиДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	Данные = СоздатьПустуюСтруктуруДанныхФайлаРазделов();
	Данные.Имя = ИмяФайла;
	Данные.ДД = ФайлЗагрузкиДвоичныеДанные;
	
	КаталогВремФайлов = "";
	ИмяПрисоединенногоФайла = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПолноеИмяВременногоФайла(КаталогВремФайлов, ИмяФайла, Истина);
		
	ФайлЗагрузкиДвоичныеДанные.Записать(ИмяПрисоединенногоФайла);
	
	НовыйАрхивИмя = ПолучитьИмяВременногоФайла();
	НовыйАрхив = Новый ЗаписьZIPФайла(НовыйАрхивИмя,,,МетодСжатияZIP.Копирование);
	НовыйАрхив.Добавить(ИмяПрисоединенногоФайла, РежимСохраненияПутейZIP.НеСохранятьПути);
	НовыйАрхив.Записать();
	
	МассивДляУдаления = Новый Массив;
	МассивДляУдаления.Добавить(ИмяПрисоединенногоФайла);
	
	ДанныеАрхива = Новый ДвоичныеДанные(НовыйАрхивИмя);
	Base64СтрокаДанныеАрхива = СтрЗаменить(Base64Строка(ДанныеАрхива), Символы.ПС, "");
	Base64СтрокаДанныеАрхива = СтрЗаменить(Base64СтрокаДанныеАрхива, Символы.ВК, "");
	
	МассивДляУдаления.Добавить(НовыйАрхивИмя);
	Для Каждого ФайлДляУдаления Из МассивДляУдаления Цикл 
		УдалитьФайлы(ФайлДляУдаления);
	КонецЦикла;
	УдалитьФайлы(КаталогВремФайлов);
	
	Данные.ДДАрх64 = Base64СтрокаДанныеАрхива;
	
	СоответствиеФайлов[UIDСтрока] = Данные;
	ОбластьUID.Значение = UIDСтрока;
	ДанныеФайловРазделов = ПоместитьВоВременноеХранилище(СоответствиеФайлов, ДанныеФайловРазделов);
	
КонецПроцедуры

// Возвращает признак возможности изменения статуса отправки из формы объекта,
// для которого выполняются условия:
// а) для объекта законодательством не предусмотрена отправка в электронном виде;
// б) ссылка на объект хранится в регистре сведений "Журнал отчетов статусы".
//
// Параметры:
//   ИмяОбъекта - Строка - имя объекта (заданное в Конфигураторе).
//
Функция НеотправляемыйРеглОтчетИмеетВозможностьИзмененияСтатусаОтправкиИзФормыОтчетаВручную(ИмяОбъекта)
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("РегламентированныйОтчетДеятельностьИнОргВРФ");
	МассивИмен.Добавить("РегламентированныйОтчетЖивотныйМирСведенияОВыданныхЛицензиях");
	МассивИмен.Добавить("РегламентированныйОтчетИсполнениеКонтрактовГОЗ");
	МассивИмен.Добавить("РегламентированныйОтчетПодтверждениеРазмещенияОтчетаНИОКРвГИС");
	МассивИмен.Добавить("РегламентированныйОтчетПрибыльСколковоРасчетНалоговойБазы");
	МассивИмен.Добавить("РегламентированныйОтчетРасчетПоОплатеЗаВоду");
	МассивИмен.Добавить("РегламентированныйОтчетРеестрАкцизыВычетыВиноматериалы");
	МассивИмен.Добавить("РегламентированныйОтчетРеестрАкцизыВычетыЭтиловыйСпирт");
	МассивИмен.Добавить("РегламентированныйОтчетРеестрСФНаПереработкуБензина");
	МассивИмен.Добавить("РегламентированныйОтчетРеестрСФПоАвиационномуКеросину");
	МассивИмен.Добавить("РегламентированныйОтчетРеестрСФПоБензинуИзДавальческогоСырья");
	МассивИмен.Добавить("РегламентированныйОтчетРеестрСФПоБензинуИзСобственногоСырья");
	МассивИмен.Добавить("РегламентированныйОтчетРеестрСФПоБензолуПараксилолуОртоксилолу");
	МассивИмен.Добавить("РегламентированныйОтчетРеестрСФПоВиноматериалам");
	МассивИмен.Добавить("РегламентированныйОтчетРеестрСФПоДенатурированномуЭтиловомуСпирту");
	МассивИмен.Добавить("РегламентированныйОтчетРеестрСФПоНефтяномуСырью");
	МассивИмен.Добавить("РегламентированныйОтчетРеестрСФПоСреднимДистиллятам");
	МассивИмен.Добавить("РегламентированныйОтчетРеестрСФПоЭтиловомуСпирту");
	МассивИмен.Добавить("РегламентированныйОтчетСведенияОрублевыхСчетах");
	МассивИмен.Добавить("РегламентированныйОтчетСведенияОСчетахвВиностраннойВалюте");
	МассивИмен.Добавить("РегламентированныйОтчетСоответствиеУсловийТруда");
	МассивИмен.Добавить("РегламентированныйОтчетСтатистика1Квотирование");
	МассивИмен.Добавить("РегламентированныйОтчетСтатистикаФормаП1Приложение3");
	МассивИмен.Добавить("РегламентированныйОтчетСтраховыеВзносыНСИПЗ");
	МассивИмен.Добавить("РегламентированныйОтчетФорма1ГОЗ");
	МассивИмен.Добавить("РегламентированныйОтчетФормаОН0001");
	МассивИмен.Добавить("РегламентированныйОтчетФормаОН0002");
	МассивИмен.Добавить("РегламентированныйОтчетФормаОН0003");
	
	Возврат МассивИмен.Найти(ИмяОбъекта) <> Неопределено;
	
КонецФункции

#Область Используется1СОтчетность

// Функция возвращает признак использования отправки регламентированной отчетности.
//
// Возвращаемое значение:
//  Истина - отправка регл. отчетности выполняется в стандартном режиме (при подключенном сервисе "1С-Отчетность");
//  Ложь   - отправка регл. отчетности выполняется через DataTransfer БТС.
//
Функция Используется1СОтчетность() Экспорт
	
	ПризнакИспользования = Истина;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакИспользования1СОтчетности(ПризнакИспользования);
	
	Возврат ПризнакИспользования;
	
КонецФункции

// Функция возвращает признак отправки объекта РО без использования "1С-Отчетность" и его состояние (если отправлялся).
//
// Параметры:
//  ОбъектРеглОтчетности - Документ  - Документ регламентированного отчета.
//  Состояние - Строка, Неопределено - Содержит имя значения перечисления состояния отправленного объекта РО
//                  или Неопределено, если отправка не выполнялась.
// Возвращаемое значение:
//  Истина    - отправка РО выполнялась без использования "1С-Отчетность" (через DataTransfer БТС);
//  Ложь      - отправка РО не выполнялась или выполнялась в стандартном режиме.
//
Функция ОбъектРеглОтчетностиОтправлялсяБезИспользования1СОтчетности(ОбъектРеглОтчетности, Состояние = Неопределено) Экспорт
	
	ОбъектОтправлялся = Ложь;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакОбъектРеглОтчетностиОтправлялсяБезИспользования1СОтчетности(
		ОбъектРеглОтчетности, ОбъектОтправлялся, Состояние);
	
	Возврат ОбъектОтправлялся;
	
Конецфункции

// Функция возвращает результат выполнения фонового задания получения данных баннера состояния интеграции с банком.
//
Функция СостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор) Экспорт
	
	Результат = Неопределено;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьСостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор, Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает состояние интеграции для баннера в регламентированных отчетах.
// Результат (Текст баннера, цвет баннера, картинку и т.д.)
//
// Параметры:
//  СсылкаНаОтчет - ДокументСсылка.РегламентированныйОтчет - Ссылка на регламентированный отчет.
//
// Возвращаемое значение:
//  - Структура - Текст баннера, картинка и т.д.
//
Функция ДанныеБаннераИнтеграцииСБанком(СсылкаНаОтчет) Экспорт
	
	ДанныеБаннера = Неопределено;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьДанныеБаннераИнтеграцииСБанком(СсылкаНаОтчет, ДанныеБаннера);
	
	Возврат ДанныеБаннера;
	
КонецФункции

#КонецОбласти

Процедура ПриПолученииНовогоШаблонаФСГС(ПараметрыШаблона) Экспорт
	Если Метаданные.РегистрыСведений.Найти("ШаблоныЭВФОтчетовСтатистики") = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	РегистрыСведений.ШаблоныЭВФОтчетовСтатистики.ПриПолученииНовогоШаблонаФСГС(ПараметрыШаблона);
КонецПроцедуры

Процедура ДополнитьЗаправшиваемыеСведенияОбОрганизации(Организация, Сведения) Экспорт 
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда 
		Сведения.Добавить("", "ФИОБух");
		Сведения.Добавить("", "ТелБух");
		Сведения.Добавить("", "АдресЭлПочтыБух");
		
		Сведения.Добавить("", "ФИОРук");
		Сведения.Добавить("", "ДолжнРук");
		Сведения.Добавить("", "ТелРук");
		Сведения.Добавить("", "АдресЭлПочтыРук");
	Иначе
		Сведения.Добавить("", "ФИО");
		Сведения.Добавить("", "ТелСлуж");
		Сведения.Добавить("", "АдресЭлПочтыИП");
	КонецЕсли;
	
	Сведения.Добавить("", "ФИООтвСтатистика");
	Сведения.Добавить("", "ДолжнОтвСтатистика");
	Сведения.Добавить("", "ТелОтвСтатистика");
	Сведения.Добавить("", "АдресЭлПочтыОтвСтатистика");
	
	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ДолжнИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "АдресЭлПочтыИсп");
	
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "АдресЭлектроннойПочтыОрганизации");
КонецПроцедуры

Процедура ДополнитьПодписантаСтатистическогоОтчета(ФИОИсп, ДолжнИсп, ТелИсп, АдресЭлПочтыИсп, ОргСведения, Организация) Экспорт 
	Попытка
		ОргСведения.Свойство("ФИООтвСтатистика", ФИОИсп);
		ОргСведения.Свойство("ДолжнОтвСтатистика", ДолжнИсп);
		ОргСведения.Свойство("ТелОтвСтатистика", ТелИсп);
		ОргСведения.Свойство("АдресЭлПочтыОтвСтатистика", АдресЭлПочтыИсп);
		Если ЗначениеЗаполнено(ФИОИсп) Тогда
			Если Не ЗначениеЗаполнено(АдресЭлПочтыИсп) Тогда
				ОргСведения.Свойство("АдресЭлектроннойПочтыОрганизации", АдресЭлПочтыИсп);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТелИсп) Тогда
				ОргСведения.Свойство("ТелОрганизации", ТелИсп);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ОргСведения.Свойство("ФИОИсп",          ФИОИсп);
		ОргСведения.Свойство("ДолжнИсп",        ДолжнИсп);
		ОргСведения.Свойство("ТелИсп",          ТелИсп);
		ОргСведения.Свойство("АдресЭлПочтыИсп", АдресЭлПочтыИсп);
		Если ЗначениеЗаполнено(ФИОИсп) Тогда
			Если Не ЗначениеЗаполнено(АдресЭлПочтыИсп) Тогда
				ОргСведения.Свойство("АдресЭлектроннойПочтыОрганизации", АдресЭлПочтыИсп);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТелИсп) Тогда
				ОргСведения.Свойство("ТелОрганизации", ТелИсп);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда 
			ОргСведения.Свойство("ФИОБух", ФИОИсп);
			ОргСведения.Свойство("ТелБух", ТелИсп);
			ОргСведения.Свойство("АдресЭлПочтыБух", АдресЭлПочтыИсп);
			Если ЗначениеЗаполнено(ФИОИсп) Тогда 
				ДолжнИсп = "главный бухгалтер";
				Если Не ЗначениеЗаполнено(АдресЭлПочтыИсп) Тогда
					ОргСведения.Свойство("АдресЭлектроннойПочтыОрганизации", АдресЭлПочтыИсп);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ТелИсп) Тогда
					ОргСведения.Свойство("ТелОрганизации", ТелИсп);
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
			ОргСведения.Свойство("ФИОРук", ФИОИсп);
			ОргСведения.Свойство("ДолжнРук", ДолжнИсп);
			ОргСведения.Свойство("ТелРук", ТелИсп);
			ОргСведения.Свойство("АдресЭлПочтыРук", АдресЭлПочтыИсп);
		Иначе
			ОргСведения.Свойство("ФИО", ФИОИсп);
			ОргСведения.Свойство("ТелСлуж", ТелИсп);
			ОргСведения.Свойство("АдресЭлПочтыИП", АдресЭлПочтыИсп);
			ДолжнИсп = "индивидуальный предприниматель";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(АдресЭлПочтыИсп) Тогда
			ОргСведения.Свойство("АдресЭлектроннойПочтыОрганизации", АдресЭлПочтыИсп);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТелИсп) Тогда
			ОргСведения.Свойство("ТелОрганизации", ТелИсп);
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ОпределитьНаличиеКодаПодразделенияВСправочникеОрганыФСГС(Знач Подразделение) Экспорт
	Попытка
		КодФСГС = "";
		РегламентированнаяОтчетностьПереопределяемый.ПолучитьКодОрганаФСГСПодразделения(Подразделение, КодФСГС);
		Если ЗначениеЗаполнено(КодФСГС) И Не ЗначениеЗаполнено(Справочники.ОрганыФСГС.НайтиПоКоду(КодФСГС)) Тогда 
			Сообщение = "ru='Код органа ФСГС %1 подразделения не найден в справочнике органов ФСГС, проверьте наличие подключенного направления сдачи отчетности'";
			ОбщегоНазначения.СообщитьПользователю(
				НСтр(СтрШаблон(Сообщение, СокрЛП(КодФСГС)))
			);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка получения кода ФСГС подразделения'"), УровеньЖурналаРегистрации.Предупреждение, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры
#КонецОбласти

#Область СобытияДокументаУведомлениеОСпецрежимахНалогообложения

Процедура УведомлениеОСпецрежимахНалогообложения_ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт 
	Если ВидФормы = "ФормаВыбора" Или ВидФормы = "ФормаСписка" Тогда 
		Возврат;
	КонецЕсли;
	
	ВидСообщения = Неопределено;
	Организация = Неопределено;
	Данные = Неопределено;

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		РеквизитыКлюча = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Ключ, "ВидУведомления,Организация,ИмяФормы,ИмяОтчета");
		ВидСообщения = РеквизитыКлюча.ВидУведомления;
		Организация = РеквизитыКлюча.Организация;
		ИмяФормы = РеквизитыКлюча.ИмяФормы;
		ИмяОтчета = РеквизитыКлюча.ИмяОтчета;
	Иначе
		Параметры.Свойство("ВидУведомления", ВидСообщения);
		Параметры.Свойство("Организация", Организация);
		Параметры.Свойство("Данные", Данные);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФормы) И ЗначениеЗаполнено(ИмяОтчета) Тогда
		ВыбраннаяФорма = "ФормаДокумента";
		Параметры.Вставить("ВыбраннаяФорма", "Отчет."+ИмяОтчета+".Форма."+ИмяФормы);
		Параметры.Вставить("Организация", Организация);
		Параметры.Вставить("ВидУведомления", ВидСообщения);
		Параметры.Вставить("Ключ", Параметры.Ключ);
		Параметры.Свойство("Данные", Данные);
	ИначеЕсли ЗначениеЗаполнено(ВидСообщения) И ЗначениеЗаполнено(Организация) Тогда
		СтандартнаяОбработка = Ложь;
		
		ИмяОтчета = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(ВидСообщения);
		Если ЗначениеЗаполнено(ИмяОтчета) Тогда 
			ТФ = Отчеты[ИмяОтчета].ПолучитьТаблицуФорм();
			
			Если ТФ.Количество() > 1 Тогда 
				ОтбСтроки = ТФ.НайтиСтроки(Новый Структура("ВидУведомления", ВидСообщения));
				Если ОтбСтроки.Количество() = 1 Тогда 
					ВыбраннаяФорма = ОтбСтроки[0].ПутьФормы;
				Иначе 
					ВыбраннаяФорма = "Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаВыбораФормыОтчета";
					Параметры.Вставить("ИмяОтчета", ИмяОтчета);
				КонецЕсли;
			Иначе
				ИмяФормы = Отчеты[ИмяОтчета].ПолучитьФормуПоУмолчанию();
				Если ЗначениеЗаполнено(ИмяФормы) Тогда 
					ВыбраннаяФорма = ИмяФормы;
				Иначе
					Если ТФ.Количество() = 1 Тогда 
						ВыбраннаяФорма = ?(ЗначениеЗаполнено(ТФ[0].ПутьФормы), 
											ТФ[0].ПутьФормы,
											"Отчет." + ИмяОтчета + ".Форма." + ТФ[0].ИмяФормы);
					Иначе
						ВыбраннаяФорма = Отчеты[ИмяОтчета].ПолучитьОсновнуюФорму();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Параметры.Вставить("Организация", Организация);
			Параметры.Вставить("ВыбраннаяФорма", ВыбраннаяФорма);
			Параметры.Свойство("Данные", Данные);
			Параметры.Вставить("ВидУведомления", ВидСообщения);
			ВыбраннаяФорма = "ФормаДокумента";
		Иначе 
			ИмяФормы = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПолноеИмяФормыПоВиду(ВидСообщения);
			ВыбраннаяФорма = Прав(ИмяФормы, СтрДлина(ИмяФормы) - СтрДлина("Документ.УведомлениеОСпецрежимахНалогообложения.Форма."));
			Параметры.Вставить("Организация", Организация);
			Параметры.Свойство("Данные", Данные);
			Параметры.Вставить("ВидУведомления", ВидСообщения);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Организация) Тогда 
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаВыбораВидаСообщения";
			Параметры.Вставить("Организация", Организация);
			Параметры.Вставить("Создание_УведомлениеОСпецрежимахНалогообложения", Истина);
			Параметры.Свойство("Данные", Данные);
		ИначеЕсли ЗначениеЗаполнено(ВидСообщения) Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаВыбораУведомления";
			Параметры.Вставить("Тип", ВидСообщения);
			Параметры.Вставить("Создание_УведомлениеОСпецрежимахНалогообложения", Истина);
			Параметры.Свойство("Данные", Данные);
		Иначе
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаВыбораВидаСообщения";
			Параметры.Вставить("Создание_УведомлениеОСпецрежимахНалогообложения", Истина);
			Параметры.Свойство("Данные", Данные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УведомлениеОСпецрежимахНалогообложения_ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) Экспорт
	РегламентированнаяОтчетностьПереопределяемый.ОбработкаПолученияПредставления_УведомлениеОСпецрежимахНалогообложения(Данные, Представление, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Истина Тогда 
		Если ТипЗнч(Данные) = Тип("Структура")
			И Данные.Свойство("ВидУведомления")
			И Данные.Свойство("Дата")
			И Данные.Свойство("Организация")Тогда 
			СтандартнаяОбработка = Ложь;
			Представление = Строка(Данные.Организация) + ": " + Строка(Данные.ВидУведомления) 
							+ " от " + Формат(Данные.Дата, "ДФ=дд.ММ.гггг");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УведомлениеОСпецрежимахНалогообложения_ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка) Экспорт
	РегламентированнаяОтчетностьПереопределяемый.ОбработкаПолученияПолейПредставления_УведомлениеОСпецрежимахНалогообложения(Поля, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Истина Тогда 
		СтандартнаяОбработка = Ложь;
		Поля.Добавить("ВидУведомления");
		Поля.Добавить("Дата");
		Поля.Добавить("Организация");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. РегламентированнаяОтчетность.ПоместитьВКэш
Процедура ПоместитьВКэш(ПомещаемыеДанные, ИдентификаторСеанса, АдресДанных) Экспорт
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ПомещаемыеДанные, ИдентификаторСеанса, АдресДанных);
	
КонецПроцедуры

Функция ОписаниеРегОтчета(ДокументРегОтчет) Экспорт
	
	ОписаниеРегОтч = Новый Структура;
	
	Если ТипЗнч(ДокументРегОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
	
		ОбъектРегОтч = ДокументРегОтчет.ПолучитьОбъект();
		
		ОписаниеРегОтч.Вставить("Организация",             ОбъектРегОтч.Организация);
		ОписаниеРегОтч.Вставить("ДатаНачалаПериодаОтчета", ОбъектРегОтч.ДатаНачала);
		ОписаниеРегОтч.Вставить("ДатаКонцаПериодаОтчета",  ОбъектРегОтч.ДатаОкончания);
		ОписаниеРегОтч.Вставить("КорректирующаяФорма",     ОбъектРегОтч.Вид > 0);
		ОписаниеРегОтч.Вставить("НомерКорректировки",      ОбъектРегОтч.Вид);
		ОписаниеРегОтч.Вставить("ВыбраннаяФорма",          СокрЛП(ОбъектРегОтч.ВыбраннаяФорма));
		
		ОписаниеРегОтч.Вставить("ИсточникОтчета",	  СокрЛП(ОбъектРегОтч.ИсточникОтчета));
		ОписаниеРегОтч.Вставить("НаименованиеОтчета", СокрЛП(ОбъектРегОтч.НаименованиеОтчета));	
		
		ОписаниеРегОтч.Вставить("ДоступнаПечатьPDF417", Истина);
		
		Если СокрЛП(ОбъектРегОтч.НаименованиеОтчета) = "РСВ-1 ПФР" Тогда
			
			Если ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2015Кв1" Тогда
				
				ОписаниеРегОтч.Вставить("ОтчетСтарогоОбразца_20141101", Ложь);
				
				ЗагруженыВнешниеСведенияРаздела6 = Неопределено;
				ОбъектРегОтч.ДанныеОтчета.Получить().Свойство("ВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
				ЗагруженыВнешниеСведенияРаздела6 = ?(ЗагруженыВнешниеСведенияРаздела6 = Неопределено, Ложь, Истина);
				ОписаниеРегОтч.Вставить("ЗагруженыВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
				
			ИначеЕсли ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2014Кв1" Тогда
				
				ОтчетСтарогоОбразца_20141101 = Ложь;
				ОбъектРегОтч.ДанныеОтчета.Получить().Свойство("ОтчетСтарогоОбразца_20141101", ОтчетСтарогоОбразца_20141101);
				ОтчетСтарогоОбразца_20141101 = ?(ОтчетСтарогоОбразца_20141101 = Неопределено, Истина, ОтчетСтарогоОбразца_20141101);
				ОписаниеРегОтч.Вставить("ОтчетСтарогоОбразца_20141101", ОтчетСтарогоОбразца_20141101);
				
				ЗагруженыВнешниеСведенияРаздела6 = Неопределено;
				ОбъектРегОтч.ДанныеОтчета.Получить().Свойство("ВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
				ЗагруженыВнешниеСведенияРаздела6 = ?(ЗагруженыВнешниеСведенияРаздела6 = Неопределено, Ложь, Истина);
				ОписаниеРегОтч.Вставить("ЗагруженыВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
				
			КонецЕсли;
			
		ИначеЕсли СокрЛП(ОбъектРегОтч.НаименованиеОтчета) = "Декларация по УСН" Тогда
			
			Если ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2014Кв1" Тогда
				
				ПоказателиОтчета = Неопределено;
				СписокСохранения = ОбъектРегОтч.ДанныеОтчета.Получить();
				СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
				Если ПоказателиОтчета.ПолеТабличногоДокументаРаздел21.Свойство("П000210012003") Тогда
					ОписаниеРегОтч.Вставить("РекомендованнаяФорма",
						ПоказателиОтчета.ПолеТабличногоДокументаРаздел21.П000210012003 <> 6);
				Иначе
					ОписаниеРегОтч.Вставить("РекомендованнаяФорма", Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СокрЛП(ОбъектРегОтч.НаименованиеОтчета) = "Доходы, выплаченные иностранным организациям" Тогда
			
			Если ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2020Кв1"
			 ИЛИ ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2016Кв1" Тогда
				
				СписокСохранения = ОбъектРегОтч.ДанныеОтчета.Получить();
				ДопПараметры = Неопределено;
				Если СписокСохранения.Свойство("ОкружениеСохранения") Тогда
					ОписаниеРегОтч.Вставить("ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении",
					РегламентированнаяОтчетность.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении(
					ОбъектРегОтч, ДопПараметры));
					Если НЕ ОписаниеРегОтч.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении
						И ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
						Если ДопПараметры.Свойство("ТекстСообщения") Тогда
							ОписаниеРегОтч.Вставить("ТекстСообщения", ДопПараметры.ТекстСообщения);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СокрЛП(ОбъектРегОтч.НаименованиеОтчета) = "Декларация 3-НДФЛ" Тогда
			
			ОписаниеРегОтч.ДоступнаПечатьPDF417 =
				Отчеты["РегламентированныйОтчет3НДФЛ"].ДоступнаПечатьPDF417(ОписаниеРегОтч.ВыбраннаяФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеРегОтч;
	
КонецФункции

Функция ТекстСообщенияОНепройденномКонтролеНомеровКорректировок(ВыбОрганизация,
	КодНалоговогоОргана, ДатаКонцаПериодаОтчета, ТекущийНомерКорректировки) Экспорт
	
	Если Метаданные.Отчеты.Найти("РегламентированныйОтчетНДС") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектОтчет = РегламентированнаяОтчетностьВызовСервера.ОтчетОбъект("РегламентированныйОтчетНДС");
	
	Если НЕ РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ОбъектОтчет, "ЭтотОбъект") Тогда
		ОбъектОтчет = ОбъектОтчет.Создать();
	КонецЕсли;
	
	Возврат ОбъектОтчет.ТекстСообщенияОНепройденномКонтролеНомеровКорректировок(
	ВыбОрганизация, КодНалоговогоОргана, ДатаКонцаПериодаОтчета, ТекущийНомерКорректировки);
	
КонецФункции

Функция ОписаниеЭлектронногоПредставленияРегОтчета(СсылкаНаЭлПредставлениеРегОтчета) Экспорт
	
	ОписаниеЭлПредставления = Новый Структура;
	
	Если ТипЗнч(СсылкаНаЭлПредставлениеРегОтчета)
		= Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		
		Если (ТипЗнч(СсылкаНаЭлПредставлениеРегОтчета.ВидОтчета) = Тип("СправочникСсылка.ВидыОтправляемыхДокументов")
			И СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭлПредставлениеРегОтчета.ВидОтчета, "Источник"))
			= "РегламентированныйОтчетНДС")
			ИЛИ (ТипЗнч(СсылкаНаЭлПредставлениеРегОтчета.ВидОтчета) <> Тип("СправочникСсылка.ВидыОтправляемыхДокументов")
			И СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭлПредставлениеРегОтчета.ВидОтчета, "ИсточникОтчета"))
			= "РегламентированныйОтчетНДС") Тогда
			
			ОписаниеЭлПредставления.Вставить("Организация",            СсылкаНаЭлПредставлениеРегОтчета.Организация);
			ОписаниеЭлПредставления.Вставить("ДатаКонцаПериодаОтчета", СсылкаНаЭлПредставлениеРегОтчета.ДатаОкончания);
			ОписаниеЭлПредставления.Вставить("НомерКорректировки",     СсылкаНаЭлПредставлениеРегОтчета.Версия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеЭлПредставления;
	
КонецФункции

Процедура ЗаписьОбъектовРегламентированнойОтчетности(Отчет, Отказ) Экспорт
	
	РегламентированнаяОтчетность.ЗаписьОбъектовРегламентированнойОтчетности(Отчет, Отказ);
	
КонецПроцедуры

Процедура СохранитьСтатусОтправки(ПараметрыИзменения, УникальныйИдентификатор) Экспорт
	
	ЭтоОтчет = ПараметрыИзменения.ЭтоОтчет;
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(ПараметрыИзменения.СсылкаНаОбъект, , УникальныйИдентификатор);
		
		Если НЕ ЭтоОтчет Тогда
			
			ВыборкаЖОКО = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.Выбрать(
			Новый Структура("Ссылка", ПараметрыИзменения.СсылкаНаОбъект));
			Если ВыборкаЖОКО.Следующий() Тогда
				ЗаписьЖОКО = ВыборкаЖОКО.ПолучитьМенеджерЗаписи();
				ЗаписьЖОКО.СтатусОтправки = ПараметрыИзменения.НовСтатус;
				ЗаписьЖОКО.Записать();
			КонецЕсли;
			
		Иначе
			
			ВыборкаЖОС = РегистрыСведений.ЖурналОтчетовСтатусы.Выбрать(
			Новый Структура("Ссылка", ПараметрыИзменения.СсылкаНаОбъект));
			Если ВыборкаЖОС.Следующий() Тогда
				ЗаписьЖОС = ВыборкаЖОС.ПолучитьМенеджерЗаписи();
				ЗаписьЖОС.Статус = ПараметрыИзменения.НовСтатус;
				ЗаписьЖОС.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(ПараметрыИзменения.СсылкаНаОбъект, УникальныйИдентификатор);
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ИнформацияОбОшибке().Причина.Описание;
		Сообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти