
#Область ПрограммныйИнтерфейс

// Начинает выбор экземпляра кассовой техники для открытия смены, после чего переходит к процедуре
// ОткрытьСменуПослеВыбораУстройства
//
// Параметры:
//  КлючФормы - УникальныйИдентификатор - уникальный идентификатор формы, из которой вызывается операция закрытия смены
//
Процедура НачатьОткрытиеКассовойСмены(КлючФормы) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСменуПослеВыбораУстройства", ЭтотОбъект,
		КлючФормы);
	
	ТипыОборудования = МенеджерОборудованияКлиентСерверБП.ТипыКонтрольноКассовойТехники();
	
	МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, ТипыОборудования,
		НСтр("ru = 'Выберите фискальное устройство'"), , , Истина);
	
КонецПроцедуры

// Открывает кассовую смену, вызывается после выбора экземпляра подключаемого оборудования, для которого
// выполняется операция
//
// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - ссылка на экземпляр подключаемого
//                    оборудования для которого выполняется операция открытия смены
//  КлючФормы - УникальныйИдентификатор - уникальный идентификатор формы, из которой вызывается операция открытия смены
//
Процедура ОткрытьСменуПослеВыбораУстройства(ИдентификаторУстройства, КлючФормы) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Оповестить(СобытиеОшибкаОткрытияСмены());
		Возврат;
	КонецЕсли;
	
	Оповестить(СобытиеВыполняетсяОперацияКассовойСмены());
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	МенеджерОборудованияКлиентСерверПереопределяемый.ОбработкаЗаполненияИмяКассира(ПараметрыОперации.Кассир, Истина);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОткрытьСменуЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеЗавершения,
		КлючФормы, ПараметрыОперации, ИдентификаторУстройства);
	
КонецПроцедуры

// Формирует документы "ОтчетОРозничныхПродажах", а также на кассовом аппарате закрывает
// смену и формирует отчет о закрытии смены (Z-отчет)
//
// Параметры:
//  КлючФормы - УникальныйИдентификатор - уникальный идентификатор формы, из которой вызывается операция закрытия смены
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - передается из формы при вызове операции закрытия смены,
//                        значения отборов из данного компоновщика могут использоваться в качестве значений по-умолчанию
//                        во время выполнения операции
//
Процедура ЗакрытьСмену(КлючФормы, Знач КомпоновщикНастроек) Экспорт
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = Неопределено;
	КонецЕсли;
	
	ДанныеЗакрытия = КассовыеСменыВызовСервераБП.ДанныеЗакрытияКассовойСмены(РабочееМесто,
		КлючФормы, КомпоновщикНастроек);
		
	Если Не ЗначениеЗаполнено(ДанныеЗакрытия.ОткрытыеСмены) Тогда
		Возврат;
	ИначеЕсли ДанныеЗакрытия.ОткрытыеСмены.Количество() = 1 Тогда
		ЗакрытьСменуЗавершение(ДанныеЗакрытия.ОткрытыеСмены[0], ДанныеЗакрытия);
	Иначе
		// Если найдено несколько открытых смен, пользователю предлагается выбрать организацию и
		// кассовое устройство, чтобы по этим параметрам определить, какую смену необходимо закрыть
		//
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗакрытьСменуЗавершение", ЭтотОбъект, ДанныеЗакрытия);
		ОткрытьФорму("Документ.РозничнаяПродажа.Форма.ФормаЗакрытиеСмены", ДанныеЗакрытия, , , , ,
			ОповещениеПриЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя события для оповещения о начале операции, блокирующей работу с кассовой сменой
// 
// Возвращаемое значение:
//  Строка - имя события, которое оповещает о том, что работа с кассовой сменой должна быть заблокирована
//           на время выполнения операции
//
Функция СобытиеВыполняетсяОперацияКассовойСмены() Экспорт
	
	Возврат "ВыполняетсяОперацияБлокирующаяКассовуюСмену";
	
КонецФункции

// Возвращает имя события для оповещения о завершении операции, блокирующей работу с кассовой сменой
// 
// Возвращаемое значение:
//  Строка - имя события, оповещающее о возможности возобновления работы с кассовой сменой
//
Функция СобытиеЗавершиласьОперацияКассовойСмены() Экспорт
	
	Возврат "ЗавершенаОперацияБлокирующаяКассовуюСмену";
	
КонецФункции

// Возвращает имя события для оповещения об ошибке при выполнении оперции откртия кассовой смены
Функция СобытиеОшибкаОткрытияСмены() Экспорт
	
	Возврат "ОшибкаОткрытияКассовойСмены";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Продолжение операции закрытия кассовой смены, вызывается после того как пользователь выбрал значения
// реквизитов, по которым можно определить какую именно кассовую смену требуется закрыть (или эти значения
// определены автоматически, в том случае, когда открытая кассовая смена всего одна)
//
// Параметры:
//  Результат - Структура, Неопределено - содержит следующие свойства, по которым будет определена кассовая смена для
//                                        выполнения операции закрытия:
//                                        * Организация
//                                        * ИдентификаторУстройства
//                                       принимает значение Неопределено если пользователь отказался выбирать реквизиты
//  ДанныеЗакрытия - Структура - содержит параметры операции закрытия кассовой смены.
//                               Подробнее см. КассовыеСменыВызовСервераБП.НовыеДанныеЗакрытияКассовойСмены
//
Процедура ЗакрытьСменуЗавершение(Результат, ДанныеЗакрытия) Экспорт
	
	// Если в форме закрытия смены пользователь нажал "Отмена"
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ИдентификаторУстройства) Тогда
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		Если ЗначениеЗаполнено(ДанныеЗакрытия.Кассир) Тогда
			ПараметрыОперации.Кассир = ДанныеЗакрытия.Кассир;
		Иначе
			ПараметрыОперации.Кассир = КассовыеСменыВызовСервераБП.ПредставлениеКассира(Результат.Организация);
		КонецЕсли;
		Оповестить(СобытиеВыполняетсяОперацияКассовойСмены());
		ДанныеЗакрытия.Организация = Результат.Организация;
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПечатьФискальногоОтчетаЗавершение", ЭтотОбъект, ДанныеЗакрытия);
		МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, ДанныеЗакрытия.КлючФормы,
			ПараметрыОперации, Результат.ИдентификаторУстройства);
	Иначе
		// В форме закрытия кассовой смены пользователь не выбрал кассовое утройство. В этом случае пропускаем операции взаимодействия
		// с драйвером кассового аппарата и переходим к следующему шагу - созданию отчетов о розничных продажах на основании документов
		// "РозничнаяПродажа" (чеков), сформированных без подключения кассы
		//
		ДанныеЗакрытия.Организация = Результат.Организация;
		
		РеквизитыПропущеннойОперации = Новый Структура;
		РеквизитыПропущеннойОперации.Вставить("Результат", Истина);
		РеквизитыПропущеннойОперации.Вставить("ИдентификаторУстройства", 
			ПредопределенноеЗначение("Справочник.ПодключаемоеОборудование.ПустаяСсылка"));
		ПечатьФискальногоОтчетаЗавершение(РеквизитыПропущеннойОперации, ДанныеЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьСменуЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Оповестить(СобытиеЗавершиласьОперацияКассовойСмены());
	Если РезультатВыполнения.Результат Тогда
		ВызватьОповещенияПриИзмененииСтатусаКассовойСмены();
	ИначеЕсли ЗначениеЗаполнено(РезультатВыполнения.ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьФискальногоОтчетаЗавершение(РезультатВыполнения, ДанныеЗакрытия) Экспорт
	
	Оповестить(СобытиеЗавершиласьОперацияКассовойСмены());
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'При формировании отчета произошла ошибка:""%1"".'"),
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе 
		СозданныеДокументы = КассовыеСменыВызовСервераБП.СформироватьОтчетыОРозничныхПродажах(ДанныеЗакрытия.Организация,
			РезультатВыполнения.ИдентификаторУстройства);
		Если СозданныеДокументы.Количество() > 0 Тогда
			ТекстОповещения = СтрШаблон(НСтр("ru = 'Сформировано документов: %1'"), СозданныеДокументы.Количество());
			ПоказатьОповещениеПользователя("Формирование отчетов о розничных продажах", , ТекстОповещения);
		КонецЕсли;
		ОповеститьОбИзменении(Тип("ДокументСсылка.РозничнаяПродажа"));
		ОповеститьОбИзменении(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
		ВызватьОповещенияПриИзмененииСтатусаКассовойСмены();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьОповещенияПриИзмененииСтатусаКассовойСмены()
	
	Оповестить("ОбновитьБаннеры_РозничнаяТорговля");
	Оповестить("ИзменениеСтатусаКассовойСмены");
	
КонецПроцедуры

#КонецОбласти
