
#Область ПрограммныйИнтерфейс

// Возвращает идентификатор модуля для вызова через внешний программный интерфейс.
//
// Возвращаемое значение:
//   Строка - идентификатор модуля.
//
Функция ПубликуемыйИдентификатор() Экспорт
	
	Возврат "personalized_offers";
	
КонецФункции

// Возвращает данные по идентификатору данных и переданным параметрам.
//
// Параметры:
//  ИдентификаторДанных - Строка - идентификатор данных. Может быть переопределено при обработке.
//                        Указывается в качестве имени файла, возвращаемого в результате.
//  Параметры - ДвоичныеДанные - переданные параметры получения данных.
//  КодВозврата - Строка - код возврата обработчика получения данных (по умолчанию - 10200).
//  Ошибка - Булево - признак завершения выполнения метода с ошибкой.
//  СообщениеОбОшибке - Строка - текст сообщения об ошибке.
// 
// Возвращаемое значение:
//   ДвоичныеДанные - возвращаемые данные.
//
Функция ВозвращаемыеДанные(ИдентификаторДанных, Параметры, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Если ВРег(ИдентификаторДанных) <> ВРег(ПубликуемыйИдентификатор()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры) Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Не переданы входящие настройки для отчета.'");
		КодВозврата = АсинхронноеПолучениеДанныхСловарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	НастройкиСтрока = ПолучитьСтрокуИзДвоичныхДанных(Параметры);
	НастройкиЗакрытияБаннера = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(НастройкиСтрока);
	
	Если НастройкиЗакрытияБаннера.Свойство("organization") Тогда
		
		Если НастройкиЗакрытияБаннера.organization.Свойство("inn") Тогда
			
			КПП = Неопределено;
			НастройкиЗакрытияБаннера.organization.Свойство("kpp", КПП);
			Организация = Справочники.Организации.НайтиОрганизацию(НастройкиЗакрытияБаннера.organization.inn, КПП, Ложь);
			Если Организация.Пустая() Тогда
				СообщениеОбОшибке = НСтр("ru = 'Организация с ИНН %1 КПП %2 отсутствует в информационной базе.'");
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке,
					НастройкиЗакрытияБаннера.organization.inn, НастройкиЗакрытияБаннера.organization.kpp);
			КонецЕсли;
			
		Иначе
			
			СообщениеОбОшибке = НСтр("ru = 'В настройках группа organization должна содержать поля inn и kpp.'");
			
		КонецЕсли;
		
	Иначе
		
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Если Организация.Пустая() Тогда
			СообщениеОбОшибке = НСтр("ru = 'В информационной базе не задана организация по-умолчанию.'");
		КонецЕсли;
		
	КонецЕсли;
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		
		КодВозврата = АсинхронноеПолучениеДанныхСловарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИдентификаторБаннера = НастройкиЗакрытияБаннера.id;
	ЗакрытыеБаннеры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		НовыйЗакрытыеПользователемБаннеры());
	БаннерыОрганизации = ЗакрытыеБаннеры.БаннерыПоОрганизации[Организация];
	Если ТипЗнч(БаннерыОрганизации) <> Тип("Структура") Тогда
		БаннерыОрганизации = Новый Структура;
	КонецЕсли;
	
	ОбстоятельстваЗакрытия = Новый Структура;
	ОбстоятельстваЗакрытия.Вставить("ДатаЗакрытия", ТекущаяДатаСеанса());
	ОбстоятельстваЗакрытия.Вставить("Периодичность", "");
	БаннерыОрганизации.Вставить(ИдентификаторБаннера, ОбстоятельстваЗакрытия);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		ЗакрытыеБаннеры);

	Результат = Новый Структура;
	Результат.Вставить("id", ИдентификаторБаннера);
	Результат.Вставить("status", СтатусЗакрытогоБаннера());
	
	ИдентификаторДанных = ПубликуемыйИдентификатор() + ".json";
	
	ИтоговыеДанные = РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(Результат);
	
	Возврат ПолучитьДвоичныеДанныеИзСтроки(ИтоговыеДанные);
	
КонецФункции

// Заполняет перечень доступных возвращаемых данных.
//
// Параметры:
//  ДоступныеВозвращаемыеДанные - Соответствие - данные, доступные для получения через API
//    * Ключ - Строка - Идентификатор данных
//    * Значение - Структура - см. АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных().
//
Процедура УстановитьДоступныеВозвращаемыеДанные(ДоступныеВозвращаемыеДанные) Экспорт
	
	ОписаниеВозвращаемыхДанных = АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных();
	ОписаниеВозвращаемыхДанных.Наименование = НСтр("ru = 'Закрыть баннер'");
	ОписаниеВозвращаемыхДанных.Описание = НСтр("ru = 'Закрыть баннер'"); 
	ОписаниеВозвращаемыхДанных.МодульМенеджер = ПерсонализированныеПредложенияСервисов;
	ОписаниеВозвращаемыхДанных.ТипыРезультата.Добавить(АсинхронноеПолучениеДанныхСловарь.ТипJSON());
	
	ДоступныеВозвращаемыеДанные.Вставить(ПубликуемыйИдентификатор(), ОписаниеВозвращаемыхДанных);
	
КонецПроцедуры

#Область ПолучениеИЗакрытиеБаннеров

// Получает баннер, в случае если есть что показать. Если баннер не найден, в хранилище помещается Неопределено.
// Параметры:
//	СтруктураПараметров - Струкутура - Структура параметров:
//		Организация - СправочникСсылка.Организации - Организация, по которой ищем баннер.
//		Размещение - Строка - Идентификатор формы по которой нужно показать баннер. см. функции ИмяРазмещения...().
//		ПоказатьПредыдущий - Булево - Признак показа предыдущего в очереди баннера. Если Ложь - показывается следующий баннер.
//	АдресХранилища - Строка -Адрес хранилища, по которому будет помещен баннер.
//
Процедура ПолучитьБаннер(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		// Не показываем баннеры, если работа с внешними ресурсами заблокирована.
		// Нет смысла собирать и показывать баннеры для копий информационных баз.
		ПоместитьВоВременноеХранилище(Неопределено, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Организация = СтруктураПараметров.Организация;
	Размещение = СтруктураПараметров.Размещение;
	ПоказатьПредыдущий = СтруктураПараметров.ПоказатьПредыдущий;
	
	// Получаем баннеры в ротации у текущего пользователя в указанном размещении.
	БаннерыВРотации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ПерсонализированныеПредложенияСервисов_НаборБаннеровВРотации",
		Размещение, Новый Массив);
	
	Если ТипЗнч(БаннерыВРотации) <> Тип("Массив") Тогда
		БаннерыВРотации = Новый Массив;
	КонецЕсли;
	
	// Ротируем пользовательский список баннеров.
	Если БаннерыВРотации.Количество() > 1 Тогда
		Если ПоказатьПредыдущий Тогда
			ПоследнийБаннер = БаннерыВРотации[БаннерыВРотации.ВГраница()];
			БаннерыВРотации.Удалить(БаннерыВРотации.ВГраница());
			БаннерыВРотации.Вставить(0, ПоследнийБаннер);
		Иначе
			ПервыйБаннер = БаннерыВРотации[0];
			БаннерыВРотации.Удалить(0);
			БаннерыВРотации.Добавить(ПервыйБаннер);
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяДата = НачалоДня(ОбщегоНазначенияБП.ТекущаяДатаНаСервере());
	
	// Получим список баннеров для пользователя по организации и размещению.
	// Баннеры, привязанные к организации, не показываем, если организация не заполнена.
	// Баннеры, непривязанные к организации, показываем всегда.
	СписокБаннеров = БаннерыПользователя(Организация, Размещение, ТекущаяДата);
	Если СписокБаннеров.Количество() = 0 Тогда
		ПоместитьВоВременноеХранилище(Неопределено, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	// Обновим данные по которым будем получать информацию.
	ИнтервалОбновления = 60 * 60 * 4; // обновляем данные с интервалом 4 часа.
	РегистрыСведений.ПерсонализированныеДанные.ОбновитьДанные(
		Организация,
		ТекущаяДата,
		ИнтервалОбновления,
		РазделыПерсонализированныхДанных(СписокБаннеров));
	
	// Получим данные для баннеров.
	ДанныеБаннеров = ДанныеБаннеров(СписокБаннеров, Организация, ТекущаяДата);
	
	ТекущаяГруппа = Неопределено;
	
	// Собираем идентификаторы всех доступных баннеров.
	ИдентификаторыДоступныхБаннеров = Новый Массив;
	Для Каждого СтрокаСписка Из СписокБаннеров Цикл
		Если ВыполняютсяУсловияБаннера(СтрокаСписка.Баннер, ДанныеБаннеров) Тогда
			Если ТекущаяГруппа = Неопределено Тогда
				ТекущаяГруппа = СтрокаСписка.Баннер.Группа;
			КонецЕсли;
			Если ТекущаяГруппа <> СтрокаСписка.Баннер.Группа Тогда
				Продолжить; // Пропускаем баннеры, которые не входят в текущую группу.
			КонецЕсли;
			
			ИдентификаторыДоступныхБаннеров.Вставить(0, СтрокаСписка.Баннер.Идентификатор);
			// Если исключительный баннер не входит в группу, показывается только он.
			Если СтрокаСписка.Баннер.Исключительный И СтрокаСписка.Баннер.Группа = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторыНовогоНабораБаннеровВРотации = Новый Массив;
	
	// Оставляем в ротации только доступные баннеры.
	Для каждого БаннерВРотации Из БаннерыВРотации Цикл
		Если ИдентификаторыДоступныхБаннеров.Найти(БаннерВРотации.Идентификатор) <> Неопределено Тогда
			ИдентификаторыНовогоНабораБаннеровВРотации.Добавить(БаннерВРотации.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	// Новые доступные баннеры добавляем в начало очереди.
	Для каждого ИдентификаторДоступногоБаннера Из ИдентификаторыДоступныхБаннеров Цикл
		Позиция = ?(ПоказатьПредыдущий И ИдентификаторыНовогоНабораБаннеровВРотации.Количество() > 0, 1, 0);
		Если ИдентификаторыНовогоНабораБаннеровВРотации.Найти(ИдентификаторДоступногоБаннера) = Неопределено Тогда
			ИдентификаторыНовогоНабораБаннеровВРотации.Вставить(Позиция, ИдентификаторДоступногоБаннера);
		КонецЕсли;
	КонецЦикла;
	
	// Заменяем набор баннеров в ротации на новый
	БаннерыВРотации = Новый Массив;
	Для каждого ИдентификаторНовогоБаннераВРотации Из ИдентификаторыНовогоНабораБаннеровВРотации Цикл
		НовыйБаннер = СписокБаннеров.Найти(ИдентификаторНовогоБаннераВРотации, "ИдентификаторБаннера").Баннер;
		ЗаполнитьДанныеБаннера(НовыйБаннер, ДанныеБаннеров);
		БаннерыВРотации.Добавить(НовыйБаннер);
	КонецЦикла;
	
	// Сохраняем баннеры в ротации у текущего пользователя в указанном размещении.
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ПерсонализированныеПредложенияСервисов_НаборБаннеровВРотации",
		Размещение, БаннерыВРотации);
	
	Баннер = Неопределено;
	
	Если БаннерыВРотации.Количество() > 0 Тогда
		Баннер = БаннерыВРотации[0];
		Баннер.Вставить("Единственный", БаннерыВРотации.Количество() = 1);
	КонецЕсли;
	
	Если Баннер <> Неопределено Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Персонализированные предложения сервисов. Показан баннер'"),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Баннер.Идентификатор);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Баннер, АдресХранилища);
	
КонецПроцедуры

// Процедура отображает баннер на форме.
// Параметры:
//		Форма - Форма - Форма, на которой отображается баннер.
//		АдресРезультата - Строка - Адрес временного хранилища, в которое помещен баннер.
//
Процедура УстановитьБаннерНаФорме(Форма, АдресРезультата) Экспорт
	
	Элементы = Форма.Элементы;
	
	Баннер = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если Баннер = Неопределено Тогда
		Элементы.Баннер.Видимость = Ложь;
	Иначе
		Форма.Баннер = Баннер;
		Элементы.ГруппаБаннерОжидание.Видимость = Ложь;
		Элементы.ТекстБаннера.Видимость         = Истина;
		Элементы.КартинкаБаннера.Видимость      = Истина;
		Элементы.Баннер.Видимость               = Истина;
		Элементы.ТекстБаннера.Шрифт             = Новый Шрифт(ШрифтыСтиля.ШрифтТекстаБаннера, , 2);
		Элементы.БаннерСФоном.ЦветФона          = ЦветаСтиля[Баннер.ЦветФонаБаннер];
		Элементы.КартинкаБаннера.Картинка       = БиблиотекаКартинок[Баннер.ИмяКартинкаЛоготипа];
		Форма.ТекстБаннера = Форма.Баннер.ТекстБаннера;
		
		Элементы.КартинкаПредыдущийБаннер.Видимость = НЕ Баннер.Единственный;
		Элементы.КартинкаСледующийБаннер.Видимость = НЕ Баннер.Единственный;
		
		Элементы.КартинкаЗакрытьБаннер.Доступность = Истина;
		Элементы.КартинкаПредыдущийБаннер.Доступность = Истина;
		Элементы.КартинкаСледующийБаннер.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЗакрытиеБаннера(Баннер, Организация) Экспорт
	
	СохранитьОбстоятельстваЗакрытияБаннера(Баннер, Организация);
	
	СписокБаннеров = НовыйТаблицаСписокБаннеров();
	ДобавитьБаннерВТаблицу(СписокБаннеров, Баннер);
	РегистрыСведений.ПерсонализированныеДанные.ОбновитьДанные(
		Организация, Дата(1, 1, 1), 0, РазделыПерсонализированныхДанных(СписокБаннеров));
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Персонализированные предложения сервисов. Закрыт баннер'"),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		Баннер.Идентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет баннер в Общую форму "ПечатьДокументов"
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - Общая форма "ПечатьДокументов"
//
Процедура ПечатьДокументовПриСозданииНаСервере(Форма) Экспорт
	
	НастройкиПечатныхФорм = Форма.НастройкиПечатныхФорм;
	Если НастройкиПечатныхФорм.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиБаннеров = НастройкиБаннеровПечатныхФормДокументов();
	Настройка = НастройкиБаннеров.Найти(НастройкиПечатныхФорм[0].ИмяМакета, "ИмяМакета");
	
	Если Настройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьРеквизитыИЭлементыФормыДляРазмещенияБаннера(Форма);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Параметры.Вставить("Размещение", ИмяРазмещенияПечатьДокументов());
	Параметры.Вставить("ПоказатьПредыдущий", Ложь);
	
	ПолучитьБаннер(Параметры, АдресХранилища);
	
	Баннер = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если Баннер <> Неопределено Тогда
		Баннер.ТекстБаннера = ТекстБаннераПечатьАртикулов(Настройка);
	КонецЕсли;
	
	УстановитьБаннерНаФорме(Форма, АдресХранилища);
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

Процедура ОчиститьБаннерыВРотацииПриОбновленииИнформационнойБазы() Экспорт
	
	ИменаРазмещения = Новый Массив;
	ИменаРазмещения.Добавить(ИмяРазмещенияОбщее());
	ИменаРазмещения.Добавить(ИмяРазмещенияНачислениеЗарплаты());
	ИменаРазмещения.Добавить(ИмяРазмещенияПростойИнтерфейсРазделСотрудники());
	
	ОчиститьБаннерыВРотации(ИменаРазмещения);
	
КонецПроцедуры

Процедура ОчиститьБаннерыВРотации(ИменаРазмещения)
	
	ИмяНастройки = "ПерсонализированныеПредложенияСервисов_НаборБаннеровВРотации";
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда
			
			Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
			Если Пользователь <> Неопределено Тогда
				Для каждого ИмяРазмещения Из ИменаРазмещения Цикл
					ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки,
						ИмяРазмещения, Новый Массив,, Пользователь.Имя);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли НЕ ОбщегоНазначения.РазделениеВключено() Тогда
			
			Для каждого ИмяРазмещения Из ИменаРазмещения Цикл
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки,
					ИмяРазмещения, Новый Массив);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьЗакрытыйБаннерАнтикризис() Экспорт
	
	ПоказатьЗакрытыйБаннерВсемПользователям(ИдентификаторБаннераАнтикризис());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСБаннерами

Функция ДанныеБаннеров(СписокБаннеров, Организация, ТекущаяДата)
	
	// Для получения данных удобнее использовать структуру вместо таблицы.
	// Перенесем данные из списка в структуру.
	СтруктураБаннеров = Новый Структура;
	Для Каждого СтрокаСписка Из СписокБаннеров Цикл
		СтруктураБаннеров.Вставить(СтрокаСписка.Баннер.Идентификатор, СтрокаСписка.Баннер);
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		ТекстЗапросаОтчетнаяКампания(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаЧисленностьСотрудников(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаНДСКВычетуКонтрагент(Запрос, СтруктураБаннеров, НомераТаблиц, ТекущаяДата)
		+ ТекстЗапросаНДСКВычетуСПАРК(Запрос, СтруктураБаннеров, НомераТаблиц, ТекущаяДата)
		+ ТекстЗапросаКрупнейшийДебитор(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаКоличествоКонтрагентов(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаКрупнейшиеДебиторыСПАРК(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаОбщееКоличествоДокументов(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаКоличествоПоступлений(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаКоличествоРеализаций(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаПроверкаОплатыНалогов(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаПроблемыСНалоговымиПлатежами(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаПечатьАртикулов(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаИнтеграцияСоSmartway(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаЗаявкаНаКредит(Запрос, СтруктураБаннеров, НомераТаблиц, Организация)
		+ ТекстЗапросаИспользуетеКредиты(Запрос, СтруктураБаннеров, НомераТаблиц, Организация)
		+ ТекстЗапросаФинОтчетность(Запрос, СтруктураБаннеров, НомераТаблиц, Организация)
		+ ТекстЗапросаПереходиНаНКО(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаПересчитатьВзносы(Запрос, СтруктураБаннеров, НомераТаблиц, Организация)
		+ ТекстЗапросаМоиЗадачи(Запрос, СтруктураБаннеров, НомераТаблиц);
	
	Запрос.УстановитьПараметр("Организация",          Организация);
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		СписокОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
		Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекущаяДата",          ТекущаяДата);
	// Ищем отчетность, которая начнется в течении 2х недель
	Запрос.УстановитьПараметр("СрокНачалаОтчетности", ТекущаяДата + 60*60*24*14);
	Запрос.УстановитьПараметр("НачалоКвартала",       НачалоКвартала(ТекущаяДата));
	Запрос.УстановитьПараметр("КонецКвартала",        КонецКвартала(ТекущаяДата));
	
	МетаданныеРасшифровки = Метаданные.РегистрыСведений.ПерсонализированныеДанные.Ресурсы.ДанныеРасшифровки;
	Запрос.УстановитьПараметр("ПустыеЗначенияДанныеРасшифровки", ОбщегоНазначенияБП.МассивПустыхЗначенийРеквизита(МетаданныеРасшифровки));
	
	ДанныеБаннеров = Новый Структура;
	ДанныеБаннеров.Вставить("ТекущаяДата", ТекущаяДата);
	
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ДанныеБаннеров.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	// Данные по сторонним сертификатам получаются из хранилища общих настроек, поэтому получим их отдельно.
	ПолучитьДанныеПоСтороннемуСертификату(Организация, ДанныеБаннеров, СтруктураБаннеров);
	
	ПолучитьДанныеНадежностьБанковОрганизаций(ДанныеБаннеров, СтруктураБаннеров);

	ПолучитьДанныеПоПлатформеСамозанятые(Организация, ДанныеБаннеров, СтруктураБаннеров);
	ПолучитьДанныеПоддержкаСервиса(ДанныеБаннеров, СтруктураБаннеров);
	
	ПолучитьДанныеБаннераТестовыйТариф(ДанныеБаннеров);
	
	ПолучитьДанныеБаннераНастройкаВидимостиСчетовУчета(ДанныеБаннеров);
	
	ПолучитьДанныеБаннераПредодобренныйКредитВСбербанке(ДанныеБаннеров);
	
	ПолучитьДанныеБаннераНастройкаФункциональности(ДанныеБаннеров);
		ПолучитьДанныеБаннераАнтикризис(ДанныеБаннеров);
	
	ПолучитьДанныеБаннераАнтикризисОсвобождениеОтНалогов(ДанныеБаннеров);
	
	ПолучитьДанныеБаннераАнтикризисЗарплата(ДанныеБаннеров);
	
	ПолучитьДанныеБаннераКадровыеДокументыЭТК(ДанныеБаннеров);
	
	ПолучитьДанныеБаннераСайтАнтикризис(ДанныеБаннеров);
	
	ПолучитьДанныеБаннераЕНВДОтменяется(ДанныеБаннеров);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеБаннеров;
	
КонецФункции

Функция ВыполняютсяУсловияБаннера(Баннер, ДанныеБаннеров)
	
	Идентификатор = Баннер.Идентификатор;
	Если НЕ ДанныеБаннеров.Свойство(Идентификатор) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеБаннера = ДанныеБаннеров[Идентификатор];
	Если Идентификатор = ИдентификаторБаннераСтороннийСертификат() Тогда
		Возврат ВыполняютсяУсловияБаннераСтороннийСертификат(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераЧисленностьСотрудников() Тогда
		Возврат ВыполняютсяУсловияБаннераЧисленностьСотрудников(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераОтчетнаяКампания() Тогда
		Возврат ВыполняютсяУсловияБаннераОтчетнаяКампания(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераНДСКВычетуКонтрагент() Тогда
		Возврат ВыполняютсяУсловияБаннераНДСКВычетуКонтрагент(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераНДСКВычетуСПАРК() Тогда
		Возврат ВыполняютсяУсловияБаннераНДСКВычетуСПАРК(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКрупнейшийДебитор() Тогда
		Возврат ВыполняютсяУсловияБаннераКрупнейшийДебитор(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКоличествоКонтрагентов() Тогда
		Возврат ВыполняютсяУсловияБаннераКоличествоКонтрагентов(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКрупнейшиеДебиторыСПАРК() Тогда
		Возврат ВыполняютсяУсловияБаннераКрупнейшиеДебиторыСПАРК(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераОбщееКоличествоДокументов() Тогда
		Возврат ВыполняютсяУсловияБаннераОбщееКоличествоДокументов(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКоличествоПоступлений() Тогда
		Возврат ВыполняютсяУсловияБаннераКоличествоПоступлений(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКоличествоРеализаций() Тогда
		Возврат ВыполняютсяУсловияБаннераКоличествоРеализаций(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераНадежностьБанков() Тогда
		Возврат ВыполняютсяУсловияБаннераНадежностьБанков(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераПлатформаСамозанятые() Тогда
		Возврат ВыполняютсяУсловияПлатформаСамозанятые(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераПоддержкаСервиса() Тогда
		Возврат ВыполняютсяУсловияБаннераПоддержкаСервиса(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераТестовыйТариф() Тогда
		Возврат ВыполняютсяУсловияБаннераТестовыйТариф(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераПроверкаОплатыНалогов() Тогда
		Возврат ВыполняютсяУсловияБаннераПроверкаОплатыНалогов(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераПроблемыСНалоговымиПлатежами() Тогда
		Возврат ВыполняютсяУсловияБаннераПроблемыСНалоговымиПлатежами(ДанныеБаннера, Баннер);
	
	ИначеЕсли Идентификатор = ИдентификаторБаннераПредодобренныйКредитВСбербанке() Тогда
		Возврат ВыполняютсяУсловияБаннераПредодобренныйКредитВСбербанке(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераНастройкаВидимостиСчетовУчета() Тогда
		Возврат ВыполняютсяУсловияБаннераНастройкаВидимостиСчетовУчета(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераИнтеграцияСоSmartway() Тогда
		Возврат ВыполняютсяУсловияБаннераИнтеграцияСоSmartway(ДанныеБаннера, Баннер);
	
	ИначеЕсли Идентификатор = ИдентификаторБаннераЗаявкаНаКредит() Тогда
		Возврат ВыполняютсяУсловияБаннераЗаявкаНаКредит(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераИспользуетеКредиты() Тогда
		Возврат ВыполняютсяУсловияБаннераИспользуетеКредиты(ДанныеБаннера, Баннер);

	ИначеЕсли Идентификатор = ИдентификаторБаннераФинОтчетность() Тогда
		Возврат ВыполняютсяУсловияБаннераФинОтчетность(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераПереходиНаНКО() Тогда
		Возврат ВыполняютсяУсловияБаннераПереходиНаНКО(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераНастройкаФункциональности() Тогда
		Возврат ВыполняютсяУсловияБаннераНастройкаФункциональности(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераМоиЗадачи() Тогда
		Возврат ВыполняютсяУсловияБаннераМоиЗадачи(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераПечатьАртикулов() Тогда
		Возврат ВыполняютсяУсловияБаннераПечатьАртикулов(ДанныеБаннера, Баннер);	
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераАнтикризис()
		Или Идентификатор = ИдентификаторБаннераАнтикризисЗарплата() Тогда
		Возврат ВыполняютсяУсловияБаннераАнтикризис(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераАнтикризисОсвобождениеОтНалогов() Тогда
		Возврат ВыполняютсяУсловияБаннераАнтикризисОсвобождениеОтНалогов(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКадровыеДокументыЭТК() Тогда
		Возврат ВыполняютсяУсловияБаннераКадровыеДокументыЭТК(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераСайтАнтикризис() Тогда
		Возврат ВыполняютсяУсловияБаннераСайтАнтикризис(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераАнтикризисПересчитатьВзносы() Тогда
		Возврат ВыполняютсяУсловияБаннераАнтикризисПересчитатьВзносы(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераЕНВДОтменяется() Тогда
		Возврат ВыполняютсяУсловияБаннераЕНВДОтменяется(ДанныеБаннера, Баннер);
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннера(Баннер, ДанныеБаннеров)
	
	Идентификатор = Баннер.Идентификатор;
	ДанныеБаннера = ДанныеБаннеров[Идентификатор];
	ТекущаяДата   = ДанныеБаннеров.ТекущаяДата;
	
	Если Идентификатор = ИдентификаторБаннераСтороннийСертификат() Тогда
		ЗаполнитьДанныеБаннераСтороннийСертификат(Баннер, ДанныеБаннера);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераЧисленностьСотрудников() Тогда
		ЗаполнитьДанныеБаннераЧисленностьСотрудников(Баннер, ДанныеБаннера);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераОтчетнаяКампания() Тогда
		ЗаполнитьДанныеБаннераОтчетнаяКампания(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераНДСКВычетуКонтрагент() Тогда
		ЗаполнитьДанныеБаннераНДСКВычетуКонтрагент(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераНДСКВычетуСПАРК() Тогда
		ЗаполнитьДанныеБаннераНДСКВычетуСПАРК(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКрупнейшийДебитор() Тогда
		ЗаполнитьДанныеБаннераКрупнейшийДебитор(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКоличествоКонтрагентов() Тогда
		ЗаполнитьДанныеБаннераКоличествоКонтрагентов(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКрупнейшиеДебиторыСПАРК() Тогда
		ЗаполнитьДанныеБаннераКрупнейшиеДебиторыСПАРК(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераОбщееКоличествоДокументов() Тогда
		ЗаполнитьДанныеБаннераОбщееКоличествоДокументов(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКоличествоПоступлений() Тогда
		ЗаполнитьДанныеБаннераКоличествоПоступлений(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКоличествоРеализаций() Тогда
		ЗаполнитьДанныеБаннераКоличествоРеализаций(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераНадежностьБанков() Тогда
		ЗаполнитьДанныеБаннераНадежностьБанков(Баннер, ДанныеБаннера);

	ИначеЕсли Идентификатор = ИдентификаторБаннераПлатформаСамозанятые() Тогда
		ЗаполнитьДанныеБаннераПлатформаСамозанятые(Баннер, ДанныеБаннера);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераПоддержкаСервиса() Тогда
		ЗаполнитьДанныеБаннераПоддержкаСервиса(Баннер, ДанныеБаннера);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераТестовыйТариф() Тогда
		ЗаполнитьДанныеБаннераТестовыйТариф(Баннер, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераПроверкаОплатыНалогов() Тогда
		ЗаполнитьДанныеБаннераПроверкаОплатыНалогов(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераПроблемыСНалоговымиПлатежами() Тогда
		ЗаполнитьДанныеБаннераПроблемыСНалоговымиПлатежами(Баннер, ДанныеБаннера, ТекущаяДата);

	ИначеЕсли Идентификатор = ИдентификаторБаннераПредодобренныйКредитВСбербанке() Тогда
		ЗаполнитьДанныеБаннераПредодобренныйКредитВСбербанке(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераНастройкаВидимостиСчетовУчета() Тогда
		ЗаполнитьДанныеБаннераНастройкаВидимостиСчетовУчета(Баннер, ДанныеБаннера, ТекущаяДата);
	
	ИначеЕсли Идентификатор = ИдентификаторБаннераИнтеграцияСоSmartway() Тогда
		ЗаполнитьДанныеБаннераИнтеграцияСоSmartway(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераЗаявкаНаКредит() Тогда
		ЗаполнитьДанныеБаннераЗаявкаНаКредит(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераИспользуетеКредиты() Тогда
		ЗаполнитьДанныеБаннераИспользуетеКредиты(Баннер, ДанныеБаннера, ТекущаяДата);

	ИначеЕсли Идентификатор = ИдентификаторБаннераФинОтчетность() Тогда
		ЗаполнитьДанныеБаннераФинОтчетность(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераПереходиНаНКО() Тогда
		ЗаполнитьДанныеБаннераПереходиНаНКО(Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераНастройкаФункциональности() Тогда
		ЗаполнитьДанныеБаннераНастройкаФункциональности(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераПечатьАртикулов() Тогда
		ЗаполнитьДанныеБаннераПечатьАртикулов(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераАнтикризис() 
		Или Идентификатор = ИдентификаторБаннераАнтикризисЗарплата() Тогда
		ЗаполнитьДанныеБаннераАнтикризис(Баннер, ДанныеБаннера);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераАнтикризисОсвобождениеОтНалогов() Тогда
		ЗаполнитьДанныеБаннераАнтикризисОсвобождениеОтНалогов(Баннер, ДанныеБаннера);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКадровыеДокументыЭТК() Тогда
		ЗаполнитьДанныеБаннераКадровыеДокументыЭТК(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераСайтАнтикризис() Тогда
		ЗаполнитьДанныеБаннераСайтАнтикризис(Баннер, ДанныеБаннера);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераАнтикризисПересчитатьВзносы() Тогда
		ЗаполнитьДанныеБаннераАнтикризисПересчитатьВзносы(Баннер, ДанныеБаннера);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераМоиЗадачи() Тогда
		ЗаполнитьДанныеБаннераМоиЗадачи(Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераЕНВДОтменяется() Тогда
		ЗаполнитьДанныеБаннераЕНВДОтменяется(Баннер, ДанныеБаннера);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОписанияБаннеров

// Каждый баннера имеет следующие функции:
// 1. Функция НовыйБаннер... описывает структуру добавления баннера в общий список.
// 2. Функция ТекстЗапроса... формирует текст запроса для получения данных баннера.
// 3. Функция ВыполняютсяУсловияБаннера... проверяет данные баннера на условие срабатывания.
// 4. Функция ЗаполнитьДанныеБаннера... помещает данные из общей коллекции ДанныеБаннеров в данные конкретного баннера, 
// который помещается в реквизит формы. Эта информация может быть перенесена в ОбстоятельстваЗакрытияБаннера.
// 5. Функция ТекстБаннера... возвращает форматированную строку с текстом баннера, который будет размещенна форме.
// 6. Функция ИдентификаторБаннера... ключ баннера, который используется для поиска и идентификации баннера.

#Область СтороннийСертификат

Функция НовыйБаннерСтороннийСертификат()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервис1СОтчетность();
	Баннер.Идентификатор       = ИдентификаторБаннераСтороннийСертификат();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераСтороннийСертификат();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиЛоготип1СОтчетность();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераСтороннийСертификат();
	Баннер.ОбстоятельстваЗакрытия.Вставить("ДатаОкончанияНайденногоСертификата", Дата(1,1,1));
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	
	Возврат Баннер;
	
КонецФункции

Процедура ПолучитьДанныеПоСтороннемуСертификату(Организация, ДанныеБаннеров, СтруктураБаннеров)
	
	Идентификатор = ИдентификаторБаннераСтороннийСертификат();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОСтороннихСертификатах = ИнформацияОСтороннихСертификатах(Организация);
	
	Если ИнформацияОСтороннихСертификатах <> Неопределено И ИнформацияОСтороннихСертификатах.СертификатНайден Тогда
		ДатаСертификата = ИнформацияОСтороннихСертификатах.СрокДействияСертификата;
	Иначе
		ДатаСертификата = Неопределено;
	КонецЕсли;
	ДанныеБаннеров.Вставить(Идентификатор, ДатаСертификата);
	
КонецПроцедуры

Функция ВыполняютсяУсловияБаннераСтороннийСертификат(ДатаОкончанияСертификата, Баннер)
	
	Идентификатор = ИдентификаторБаннераСтороннийСертификат();
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончанияСертификата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Баннер.ОбстоятельстваЗакрытия.ДатаОкончанияНайденногоСертификата = ДатаОкончанияСертификата Тогда
		// Баннер показывали, не повторяемся.
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим условие баннера.
	Возврат ((ДатаОкончанияСертификата > ТекущаяДатаСеанса()) И ДатаОкончанияСертификата <= ДобавитьМесяц(ТекущаяДатаСеанса(), 3));
	
КонецФункции

Функция ЗаполнитьДанныеБаннераСтороннийСертификат(Баннер, ДатаОкончанияНайденногоСертификата)
	
	Баннер.ТекстБаннера = ТекстБаннераСтороннийСертификат(Баннер.НавигационнаяСсылка);
	Баннер.ОбстоятельстваЗакрытия.ДатаОкончанияНайденногоСертификата = ДатаОкончанияНайденногоСертификата;
	
КонецФункции

Функция ТекстБаннераСтороннийСертификат(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru='Пользуетесь электронной отчетностью?'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Делайте это просто -'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='отправляйте отчетность прямо из 1С'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка)
	
КонецФункции

Функция ИдентификаторБаннераСтороннийСертификат()

	Возврат "СтороннийСертификат";

КонецФункции

Функция ДоступностьБаннераСтороннийСертификат()
	
	Возврат НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
КонецФункции

#КонецОбласти

#Область ЧисленностьСотрудников

Функция НовыйБаннерЧисленностьСотрудников()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервис1СОтчетность();
	Баннер.Идентификатор       = ИдентификаторБаннераЧисленностьСотрудников();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераЧисленностьСотрудников();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиЛоготип1СОтчетность();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераЧисленностьСотрудников();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаЧисленностьСотрудников(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераЧисленностьСотрудников();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаЧисленностьСотрудниковПредыдущая", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаЧисленностьСотрудников", НомераТаблиц.Количество());
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК КоличествоСотрудниковПредыдущее,
	|	0 КАК КоличествоСотрудников
	|ПОМЕСТИТЬ ВременнаяТаблицаЧисленностьСотрудниковПредыдущая
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Организация = &Организация
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.СреднесписочнаяЧисленностьПредыдущая)
	|	И ПерсонализированныеДанные.НомерСтрокиРаздела = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	0,
	|	ПерсонализированныеДанные.ЗначениеПоказателя
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Организация = &Организация
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.СреднесписочнаяЧисленность)
	|	И ПерсонализированныеДанные.НомерСтрокиРаздела = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВременнаяТаблицаЧисленностьСотрудниковПредыдущая.КоличествоСотрудниковПредыдущее) КАК КоличествоСотрудниковПредыдущее,
	|	СУММА(ВременнаяТаблицаЧисленностьСотрудниковПредыдущая.КоличествоСотрудников) КАК КоличествоСотрудников
	|ПОМЕСТИТЬ ВременнаяТаблицаЧисленностьСотрудников
	|ИЗ
	|	ВременнаяТаблицаЧисленностьСотрудниковПредыдущая КАК ВременнаяТаблицаЧисленностьСотрудниковПредыдущая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЧисленностьСотрудников.КоличествоСотрудников КАК КоличествоСотрудников
	|ИЗ
	|	ВременнаяТаблицаЧисленностьСотрудников КАК ВременнаяТаблицаЧисленностьСотрудников
	|ГДЕ
	|	ВременнаяТаблицаЧисленностьСотрудников.КоличествоСотрудников > ВременнаяТаблицаЧисленностьСотрудников.КоличествоСотрудниковПредыдущее";
	
	Возврат ТекстЗапроса  + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераЧисленностьСотрудников(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ДанныеБаннера[0].КоличествоСотрудников >= КоличествоСотрудниковДляРекламыОтчетности());
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераЧисленностьСотрудников(Баннер, ДанныеБаннера)
	
	Баннер.ТекстБаннера = ТекстБаннераЧисленностьСотрудников(Баннер.НавигационнаяСсылка, ДанныеБаннера);
	// После закрытия баннер можно исключать из списка баннеров.
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Истина);
	
КонецПроцедуры

Функция ТекстБаннераЧисленностьСотрудников(НавигационнаяСсылка, ДанныеБаннера)
	
	ЧисленностьСотрудников = ДанныеБаннера[0].КоличествоСотрудников;
	ТекстПроСотрудников = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ЧисленностьСотрудников, "сотрудник, сотрудника, сотрудников");
	
	ТекстЗаголовка = НовыйЗаголовок(
		СтрШаблон(НСтр("ru='Ваша компания выросла! У вас %1.'"), ТекстПроСотрудников));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Теперь отчетность в фонды нужно'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='сдавать по-новому'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка)
	
КонецФункции

Функция ИдентификаторБаннераЧисленностьСотрудников()

	Возврат "ЧисленностьСотрудников";

КонецФункции

Функция ДоступностьБаннераЧисленностьСотрудников()
	
	Возврат УправлениеДоступомБПВызовСервера.ПравоПросмотраВсехКадровыхДанных()
		И НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
КонецФункции

#КонецОбласти

#Область ТестовыйТариф

Функция НовыйБаннерТестовыйТариф()
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяСервис1СОтчетность();
	Баннер.Идентификатор        = ИдентификаторБаннераТестовыйТариф();
	Баннер.ИмяКартинкаЛоготипа  = ИмяКартинкиЛоготип1СОтчетность();
	Баннер.НавигационнаяСсылка  = ИдентификаторБаннераТестовыйТариф();
	Баннер.Исключительный       = Истина;
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.ДоступенПоПравам     = ДоступностьБаннераТестовыйТариф();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.День;
	
	Возврат Баннер;
	
КонецФункции

Процедура ПолучитьДанныеБаннераТестовыйТариф(ДанныеБаннеров)
	
	ДанныеБаннера = Новый Структура;
	ДанныеБаннера.Вставить("РазрешенЭлектронныйДокументообротСКонтролирующимиОрганами",
		ТарификацияБПВызовСервераПовтИсп.РазрешенЭлектронныйДокументообротСКонтролирующимиОрганами());
		
	ДанныеБаннеров.Вставить(ИдентификаторБаннераТестовыйТариф(), ДанныеБаннера);
	
КонецПроцедуры

Функция ВыполняютсяУсловияБаннераТестовыйТариф(ДанныеБаннера, Баннер)
	
	Возврат НЕ ДанныеБаннера.РазрешенЭлектронныйДокументообротСКонтролирующимиОрганами;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераТестовыйТариф(Баннер, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннерТестовыйТариф(Баннер.НавигационнаяСсылка);
	
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннерТестовыйТариф(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru='Отправляйте отчетность через Интернет, экономьте Ваше время.'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Подключите платный тариф'"), НавигационнаяСсылка));
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка)
	
КонецФункции

Функция ИдентификаторБаннераТестовыйТариф()

	Возврат "ТестовыйТариф";

КонецФункции

Функция ДоступностьБаннераТестовыйТариф()
	
	Возврат (ПолучитьФункциональнуюОпцию("ОплатаПолныйИнтерфейс") ИЛИ ПолучитьФункциональнуюОпцию("ОплатаПростойИнтерфейс"))
		И ПравоДоступа("Просмотр", Метаданные.Обработки.ОплатаСервисаБП)
		И НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
КонецФункции

#КонецОбласти

#Область ОтчетнаяКампания

Функция НовыйБаннерОтчетнаяКампания()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервис1СОтчетность();
	Баннер.Идентификатор       = ИдентификаторБаннераОтчетнаяКампания();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиЛоготип1СОтчетность();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераОтчетнаяКампания();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераОтчетнаяКампания();
	Баннер.ОбстоятельстваЗакрытия.Вставить("ДатыПрошедшихОтчетныхКампаний", Новый Массив);
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаОтчетнаяКампания(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераОтчетнаяКампания();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.НаименованиеСокращенное КАК ОтчетнаяКампания,
	|	ЗадачиБухгалтера.НачалоВыполнения КАК НачалоОтчетнойКампании
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И НЕ ЗадачиБухгалтера.ВАрхиве
	|	И ЗадачиБухгалтера.НачалоВыполнения МЕЖДУ &ТекущаяДата И &СрокНачалаОтчетности
	|	И ВЫРАЗИТЬ(ЗадачиБухгалтера.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов).Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|	И ВЫРАЗИТЬ(ЗадачиБухгалтера.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов).Периодичность <> ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			И ВЫРАЗИТЬ(ЗадачиБухгалтера.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов).Периодичность <> ЗНАЧЕНИЕ(Перечисление.Периодичность.День)";
	
	// В закрытых ранее баннерах хранятся даты начала отчетных кампания, которые пользователь закрыл.
	// Исключим их из выборки, чтобы не показывать еще раз.
	ОбстоятельстваЗакрытия = СтруктураБаннеров[Идентификатор].ОбстоятельстваЗакрытия;
	Если ОбстоятельстваЗакрытия.ДатыПрошедшихОтчетныхКампаний.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + " И ЗадачиБухгалтера.НачалоВыполнения НЕ В (&ПоказанныеДаты)";
		Запрос.УстановитьПараметр("ПоказанныеДаты", ОбстоятельстваЗакрытия.ДатыПрошедшихОтчетныхКампаний);
	КонецЕсли;

	Возврат ТекстЗапроса  + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераОтчетнаяКампания(ОтчетныеКампании, Баннер)
	
	Возврат (ОтчетныеКампании.Количество() > 0);
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераОтчетнаяКампания(Баннер, ОтчетныеКампании, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераОтчетнаяКампания(Баннер.НавигационнаяСсылка, ОтчетныеКампании, ТекущаяДата);
	
	СтрокаОтчетнойКампании = ОтчетныеКампании[0];
	Баннер.ОбстоятельстваЗакрытия.ДатыПрошедшихОтчетныхКампаний.Добавить(СтрокаОтчетнойКампании.НачалоОтчетнойКампании);
	
КонецПроцедуры

Функция ТекстБаннераОтчетнаяКампания(НавигационнаяСсылка, ОтчетныеКампании, ТекущаяДата)
	
	СтрокаОтчетнойКампании = ОтчетныеКампании[0];
	Если ОтчетныеКампании.Количество() = 1 Тогда
		// Если отчетная кампания по одному отчету, то укажем имя отчета.
		ИмяОтчетнойКампании = ИмяОтчетнойКампании(СтрокаОтчетнойКампании.ОтчетнаяКампания);
	Иначе
		// Если в эту отчетную кампанию нужно сдавать несколько отчетов,
		// то не будем уточнять название отчетов.
		ИмяОтчетнойКампании = "";
	КонецЕсли;
	
	СрокиПоДням        = Перечисления.ОтносительныеСроки.СрокиПоДням();
	ОсталосьДней       = (НачалоДня(СтрокаОтчетнойКампании.НачалоОтчетнойКампании) - НачалоДня(ТекущаяДата))/86400;
	ОтносительныйСрок  = СрокиПоДням.Получить(ОсталосьДней);
	ПредставлениеСрока = НРег(БлокиИнформационнойПанели.ПредставлениеСрока(ОтносительныйСрок, ОсталосьДней));
	
	ТекстОтчетнаяКампания = ?(ПустаяСтрока(ИмяОтчетнойКампании),
		СтрШаблон(НСтр("ru='начинается %1'"),
			ПредставлениеСрока),
		СтрШаблон(НСтр("ru='%1 начинается %2'"),
			ИмяОтчетнойКампании,
			ПредставлениеСрока));
	
	ТекстЗаголовка = НовыйЗаголовок(СтрШаблон(НСтр("ru='Отчетная кампания %1'"), ТекстОтчетнаяКампания));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Узнайте, как просто'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='отправлять отчетность из программы'"),  НавигационнаяСсылка));
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка)
	
КонецФункции

Функция ИдентификаторБаннераОтчетнаяКампания()

	Возврат "ОтчетнаяКампания";

КонецФункции

Функция ДоступностьБаннераОтчетнаяКампания()
	
	ПравоДоступаКЗадачамБухгалтера = ПравоДоступа(
		"Чтение",
		Метаданные.РегистрыСведений.ЗадачиБухгалтера
	);
	
	Возврат ПравоДоступаКЗадачамБухгалтера
		И НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
КонецФункции

#КонецОбласти

#Область НДСКВычетуКонтрагент

Функция НовыйБаннерНДСКВычетуКонтрагент()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервис1СКонтрагент();
	Баннер.Идентификатор       = ИдентификаторБаннераНДСКВычетуКонтрагент();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиЛоготип1СКонтрагент();
	Баннер.ЦветФонаБаннер      = "ЦветФонаБаннерКонтрагент";
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераНДСКВычетуКонтрагент();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераНДСКВычетуКонтрагент();
	Баннер.ДанныеБаннера.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаНДСКВычетуКонтрагент(Запрос, СтруктураБаннеров, НомераТаблиц, ТекущаяДата)
	
	Идентификатор = ИдентификаторБаннераНДСКВычетуКонтрагент();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЭтоПериодНДС(ТекущаяДата) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПерсонализированныеДанные.ДанныеРасшифровки КАК Контрагент,
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК НДСКВычету
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Организация = &Организация
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.НДСКВычету)
	|	И ПерсонализированныеДанные.НомерСтрокиРаздела = 1";
	
	Возврат ТекстЗапроса  + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераНДСКВычетуКонтрагент(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Строка = ДанныеБаннера[0];
	Если Строка.НДСКВычету > ПорогСуммаДля1СКонтрагент() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераНДСКВычетуКонтрагент(Баннер, ДанныеБаннера, ТекущаяДата)
	
	СтрокаДанных = ДанныеБаннера[0];
	Баннер.ТекстБаннера = ТекстБаннераНДСКВычетуКонтрагент(Баннер.НавигационнаяСсылка, СтрокаДанных);
	ЗаполнитьЗначенияСвойств(Баннер.ДанныеБаннера, СтрокаДанных);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннераНДСКВычетуКонтрагент(НавигационнаяСсылка, СтрокаДанных)
	
	НаименованиеКонтрагента = Строка(СтрокаДанных.Контрагент);
	// Ограничим длину наименования контрагента 20 символами, чтобы поместилось в баннер.
	НаименованиеКонтрагента = ?(СтрДлина(НаименованиеКонтрагента) > 20,
		Лев(НаименованиеКонтрагента, 18) + "...",
		НаименованиеКонтрагента);
		
	ТекстЗаголовка = НовыйЗаголовок(СтрШаблон(НСтр("ru='%1 предъявил НДС на сумму %2 руб'"),
		НаименованиеКонтрагента, СтрокаДанных.НДСКВычету));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(СтрШаблон(НСтр("ru='Узнайте всё про %1 в'"), СтрокаДанных.Контрагент)),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='досье контрагента!'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИдентификаторБаннераНДСКВычетуКонтрагент()

	Возврат "НДСКВычетуКонтрагент";

КонецФункции

Функция ДоступностьБаннераНДСКВычетуКонтрагент()
	
	Возврат УправлениеДоступомБПВызовСервера.ПравоДоступаКДаннымБухгалтерии()
		И НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
КонецФункции

#КонецОбласти

#Область НДСКВычетуСПАРК

Функция НовыйБаннерНДСКВычетуСПАРК()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервис1СПАРК();
	Баннер.Идентификатор       = ИдентификаторБаннераНДСКВычетуСПАРК();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиЛоготип1СПАРК();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераНДСКВычетуСПАРК();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераНДСКВычетуСПАРК();
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаНДСКВычетуСПАРК(Запрос, СтруктураБаннеров, НомераТаблиц, ТекущаяДата)
	
	Идентификатор = ИдентификаторБаннераНДСКВычетуСПАРК();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЭтоПериодНДС(ТекущаяДата) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК НДСКВычету
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Организация = &Организация
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.НДСКВычету)
	|	И ПерсонализированныеДанные.ДанныеРасшифровки В (&ПустыеЗначенияДанныеРасшифровки)";
	
	Возврат ТекстЗапроса  + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераНДСКВычетуСПАРК(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Строка = ДанныеБаннера[0];
	Если Строка.НДСКВычету > ПорогСуммаДля1СПАРК() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераНДСКВычетуСПАРК(Баннер, ДанныеБаннера, ТекущаяДата)
	
	СтрокаДанных = ДанныеБаннера[0];
	Баннер.ТекстБаннера = ТекстБаннераНДСКВычетуСПАРК(Баннер.НавигационнаяСсылка, СтрокаДанных, ТекущаяДата);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннераНДСКВычетуСПАРК(НавигационнаяСсылка, СтрокаДанных, ТекущаяДата)
	
	Квартал = Формат(ТекущаяДата, "ДФ=q");
	
	Если Квартал = "2" Тогда
		ПредлогКвартал = НСтр("ru='во'");
	Иначе
		ПредлогКвартал = НСтр("ru='в'");
	КонецЕсли;
	
	ТекстЗаголовка = НовыйЗаголовок(СтрШаблон(НСтр("ru='НДС к вычету %1 %2 квартале составляет %3 руб'"),
		ПредлогКвартал, Квартал, СтрокаДанных.НДСКВычету));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Узнайте, кто из Ваших контрагентов имеет'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='низкие индексы надежности!'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);

КонецФункции

Функция ИдентификаторБаннераНДСКВычетуСПАРК()

	Возврат "НДСКВычетуСПАРК";

КонецФункции

Функция ДоступностьБаннераНДСКВычетуСПАРК()
	
	Возврат УправлениеДоступомБПВызовСервера.ПравоДоступаКДаннымБухгалтерии()
		И НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
КонецФункции

#КонецОбласти

#Область КрупнейшийДебиторКонтрагент

Функция НовыйБаннерКрупнейшийДебитор()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервис1СКонтрагент();
	Баннер.Идентификатор       = ИдентификаторБаннераКрупнейшийДебитор();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиЛоготип1СКонтрагент();
	Баннер.ЦветФонаБаннер      = "ЦветФонаБаннерКонтрагент";
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераКрупнейшийДебитор();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераКрупнейшийДебитор();
	Баннер.ДанныеБаннера.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаКрупнейшийДебитор(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераКрупнейшийДебитор();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СУММА(ДанныеМонитораРуководителя.Сумма) КАК СуммаЗадолженности,
	|	ДанныеМонитораРуководителя.ДанныеРасшифровки КАК Контрагент
	|ИЗ
	|	РегистрСведений.ДанныеМонитораРуководителя КАК ДанныеМонитораРуководителя
	|ГДЕ
	|	ДанныеМонитораРуководителя.Организация = &Организация
	|	И ДанныеМонитораРуководителя.РазделМонитора = ЗНАЧЕНИЕ(Перечисление.РазделыМонитораРуководителя.ЗадолженностьПокупателей)
	|	И НЕ ДанныеМонитораРуководителя.ДанныеРасшифровки В (&ПустыеЗначенияДанныеРасшифровки)
	|	И ДанныеМонитораРуководителя.ПрошлыйПериод = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеМонитораРуководителя.ДанныеРасшифровки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СуммаЗадолженности УБЫВ";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераКрупнейшийДебитор(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Строка = ДанныеБаннера[0];
	Если Строка.СуммаЗадолженности > ПорогСуммаДля1СКонтрагент() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераКрупнейшийДебитор(Баннер, ДанныеБаннера, ТекущаяДата)
	
	СтрокаДанных = ДанныеБаннера[0];
	Баннер.ТекстБаннера = ТекстБаннераКрупнейшийДебиторКонтрагент(Баннер.НавигационнаяСсылка, СтрокаДанных);
	ЗаполнитьЗначенияСвойств(Баннер.ДанныеБаннера, СтрокаДанных);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннераКрупнейшийДебиторКонтрагент(НавигационнаяСсылка, СтрокаДанных)
	
	НаименованиеКонтрагента = Строка(СтрокаДанных.Контрагент);
	// Ограничим длину наименования контрагента 25 символами, чтобы поместилось в баннер.
	НаименованиеКонтрагента = ?(СтрДлина(НаименованиеКонтрагента) > 25,
		Лев(НаименованиеКонтрагента, 23) + "...",
		НаименованиеКонтрагента);
	ТекстЗаголовка = НовыйЗаголовок(СтрШаблон(НСтр("ru='%1 должен нам %2 руб'"),
		НаименованиеКонтрагента, СтрокаДанных.СуммаЗадолженности));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(СтрШаблон(НСтр("ru='Узнайте всё про %1 в'"), СтрокаДанных.Контрагент)),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='досье контрагента!'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);

КонецФункции

Функция ИдентификаторБаннераКрупнейшийДебитор()

	Возврат "КрупнейшийДебиторКонтрагент";

КонецФункции

Функция ДоступностьБаннераКрупнейшийДебитор()
	
	Возврат УправлениеДоступомБПВызовСервера.ПравоДоступаКДаннымБухгалтерии()
		И НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
КонецФункции

#КонецОбласти

#Область КрупнейшиеДебиторыСПАРК

Функция НовыйБаннерКрупнейшийДебиторСПАРК()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервис1СПАРК();
	Баннер.Идентификатор       = ИдентификаторБаннераКрупнейшиеДебиторыСПАРК();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиЛоготип1СПАРК();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераКрупнейшиеДебиторыСПАРК();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераКрупнейшиеДебиторыСПАРК();
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаКрупнейшиеДебиторыСПАРК(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераКрупнейшиеДебиторыСПАРК();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СУММА(ДанныеМонитораРуководителя.Сумма) КАК СуммаЗадолженности
	|ИЗ
	|	РегистрСведений.ДанныеМонитораРуководителя КАК ДанныеМонитораРуководителя
	|ГДЕ
	|	ДанныеМонитораРуководителя.Организация = &Организация
	|	И ДанныеМонитораРуководителя.РазделМонитора = ЗНАЧЕНИЕ(Перечисление.РазделыМонитораРуководителя.ЗадолженностьПокупателей)
	|	И ДанныеМонитораРуководителя.ДанныеРасшифровки В (&ПустыеЗначенияДанныеРасшифровки)
	|	И ДанныеМонитораРуководителя.ПрошлыйПериод = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеМонитораРуководителя.НомерСтрокиРаздела
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеМонитораРуководителя.НомерСтрокиРаздела УБЫВ";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераКрупнейшиеДебиторыСПАРК(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СуммаЗадолженности = ДанныеБаннера[0].СуммаЗадолженности;
	
	Если СуммаЗадолженности > ПорогСуммаДля1СПАРК() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераКрупнейшиеДебиторыСПАРК(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераКрупнейшиеДебиторыСПАРК(Баннер.НавигационнаяСсылка, ДанныеБаннера[0]);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннераКрупнейшиеДебиторыСПАРК(НавигационнаяСсылка, ДанныеБаннера)
	
	ТекстЗаголовка = НовыйЗаголовок(СтрШаблон(НСтр("ru='Покупатели должны нам %1 руб'"), 
		Формат(ДанныеБаннера.СуммаЗадолженности, "ЧДЦ=")));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Узнайте, кто из контрагентов имеет'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='низкие индексы надежности!'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);

КонецФункции

Функция ИдентификаторБаннераКрупнейшиеДебиторыСПАРК()

	Возврат "КрупнейшиеДебиторыСПАРК";

КонецФункции

Функция ДоступностьБаннераКрупнейшиеДебиторыСПАРК()
	
	Возврат УправлениеДоступомБПВызовСервера.ПравоДоступаКДаннымБухгалтерии()
		И НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
КонецФункции

#КонецОбласти

#Область КоличествоДокументов

Функция НовыйБаннерОбщееКоличествоДокументов()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервис1СЭДО();
	Баннер.Идентификатор       = ИдентификаторБаннераОбщееКоличествоДокументов();
	Баннер.ЦветФонаБаннер      = "ЦветФонаБаннерЭДО";
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиЛоготип1СЭДО();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераОбщееКоличествоДокументов();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераОбщееКоличествоДокументов();
	Баннер.ДанныеБаннера.Вставить("КоличествоПоступлений", 0);
	Баннер.ДанныеБаннера.Вставить("КоличествоРеализаций", 0);
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Квартал;
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаОбщееКоличествоДокументов(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераОбщееКоличествоДокументов();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаКоличествоОбщихДокументов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК КоличествоРеализаций,
	|	0 КАК КоличествоПоступлений
	|ПОМЕСТИТЬ ВременнаяТаблицаКоличествоОбщихДокументов
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Организация = &Организация
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.КоличествоРеализаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ПерсонализированныеДанные.ЗначениеПоказателя
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Организация = &Организация
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.КоличествоПоступлений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВременнаяТаблицаКоличествоОбщихДокументов.КоличествоРеализаций), 0) КАК КоличествоРеализаций,
	|	ЕСТЬNULL(СУММА(ВременнаяТаблицаКоличествоОбщихДокументов.КоличествоПоступлений), 0) КАК КоличествоПоступлений
	|ИЗ
	|	ВременнаяТаблицаКоличествоОбщихДокументов КАК ВременнаяТаблицаКоличествоОбщихДокументов";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераОбщееКоличествоДокументов(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоДокументов = ДанныеБаннера[0].КоличествоРеализаций + ДанныеБаннера[0].КоличествоПоступлений;
	
	Если КоличествоДокументов > ОбщееКоличествоДокументовДляРекламыЭДО() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераОбщееКоличествоДокументов(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераОбщееКоличествоДокументов(Баннер.НавигационнаяСсылка, ДанныеБаннера[0], ТекущаяДата);
	ЗаполнитьЗначенияСвойств(Баннер.ДанныеБаннера, ДанныеБаннера[0]);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннераОбщееКоличествоДокументов(НавигационнаяСсылка, ДанныеБаннера, ТекущаяДата)
	
	КоличествоРеализаций = ДанныеБаннера.КоличествоРеализаций;
	КоличествоПоступлений = ДанныеБаннера.КоличествоПоступлений;
	ТекстЗаголовка = НовыйЗаголовок(СтрШаблон(НСтр("ru='Вы ввели %1 реализаций и поступлений в этом году'"),
		СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоРеализаций + КоличествоПоступлений, НСтр("ru='комплект, комплекта, комплектов'"))));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Узнайте, как'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='сэкономить на документообороте!'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);

КонецФункции

Функция ИдентификаторБаннераОбщееКоличествоДокументов()

	Возврат "ОбщееКоличествоДокументов";

КонецФункции

Функция ДоступностьБаннераОбщееКоличествоДокументов()
	
	ПравоДоступаКРеализациям = ПравоДоступа(
		"Просмотр",
		Метаданные.Документы.РеализацияТоваровУслуг
		);
		
	ПравоДоступаКПоступлениям = ПравоДоступа(
		"Просмотр",
		Метаданные.Документы.ПоступлениеТоваровУслуг
		);
		
	Возврат ПравоДоступаКРеализациям
		И ПравоДоступаКПоступлениям
		И НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
КонецФункции

#КонецОбласти

#Область КоличествоПоступлений

Функция НовыйБаннерКоличествоПоступлений()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервис1СЭДО();
	Баннер.Идентификатор       = ИдентификаторБаннераКоличествоПоступлений();
	Баннер.ЦветФонаБаннер      = "ЦветФонаБаннерЭДО";
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиЛоготип1СЭДО();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераКоличествоПоступлений();
	Баннер.ДоступенПоПравам    = ПравоДоступа(
		"Просмотр",
		Метаданные.Документы.ПоступлениеТоваровУслуг);
	Баннер.ДанныеБаннера.Вставить("КоличествоПоступлений", 0);
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Квартал;
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаКоличествоПоступлений(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераКоличествоПоступлений();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК КоличествоПоступлений
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Организация = &Организация
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.КоличествоПоступлений)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераКоличествоПоступлений(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеБаннера[0].КоличествоПоступлений > КоличествоПоступленийДляРекламыЭДО() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераКоличествоПоступлений(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераКоличествоПоступлений(Баннер.НавигационнаяСсылка, ДанныеБаннера[0]);
	ЗаполнитьЗначенияСвойств(Баннер.ДанныеБаннера, ДанныеБаннера[0]);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннераКоличествоПоступлений(НавигационнаяСсылка, ДанныеБаннера)
	
	ТекстЗаголовка = НовыйЗаголовок(СтрШаблон(НСтр("ru='Вы ввели %1 поступлений в этом году'"),
		СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ДанныеБаннера.КоличествоПоступлений, НСтр("ru='комплект, комплекта, комплектов'"))));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Узнайте, как'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='сэкономить на документообороте!'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);

КонецФункции

Функция ИдентификаторБаннераКоличествоПоступлений()

	Возврат "КоличествоПоступлений";

КонецФункции

#КонецОбласти

#Область КоличествоРеализаций

Функция НовыйБаннерКоличествоРеализаций()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервис1СЭДО();
	Баннер.Идентификатор       = ИдентификаторБаннераКоличествоРеализаций();
	Баннер.ЦветФонаБаннер      = "ЦветФонаБаннерЭДО";
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиЛоготип1СЭДО();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераКоличествоРеализаций();
	Баннер.ДоступенПоПравам    = ПравоДоступа(
		"Просмотр",
		Метаданные.Документы.РеализацияТоваровУслуг);
	Баннер.ДанныеБаннера.Вставить("КоличествоРеализаций", 0);
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Квартал;
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаКоличествоРеализаций(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераКоличествоРеализаций();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК КоличествоРеализаций
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Организация = &Организация
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.КоличествоРеализаций)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераКоличествоРеализаций(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеБаннера[0].КоличествоРеализаций > КоличествоРеализацийДляРекламыЭДО() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераКоличествоРеализаций(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераКоличествоРеализаций(Баннер.НавигационнаяСсылка, ДанныеБаннера[0]);
	ЗаполнитьЗначенияСвойств(Баннер.ДанныеБаннера, ДанныеБаннера[0]);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннераКоличествоРеализаций(НавигационнаяСсылка, ДанныеБаннера)
	
	ТекстЗаголовка = НовыйЗаголовок(СтрШаблон(НСтр("ru='Вы оформили %1 реализаций в этом году'"),
		СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ДанныеБаннера.КоличествоРеализаций, НСтр("ru='комплект, комплекта, комплектов'"))));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Узнайте, как'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='сэкономить на документообороте!'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);

КонецФункции

Функция ИдентификаторБаннераКоличествоРеализаций()

	Возврат "КоличествоРеализаций";

КонецФункции

#КонецОбласти

#Область КоличествоКонтрагентов

Функция НовыйБаннерКоличествоКонтрагентов()
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяСервис1СКонтрагент();
	Баннер.Идентификатор        = ИдентификаторБаннераКоличествоКонтрагентов();
	Баннер.ЦветФонаБаннер       = "ЦветФонаБаннерКонтрагент";
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.ИмяКартинкаЛоготипа  = ИмяКартинкиЛоготип1СКонтрагент();
	Баннер.НавигационнаяСсылка  = ИдентификаторБаннераКоличествоКонтрагентов();
	Баннер.ДоступенПоПравам     = ДоступностьБаннераКоличествоКонтрагентов();
	Баннер.ДанныеБаннера.Вставить("КоличествоКонтрагентов", 0);
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Квартал;
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаКоличествоКонтрагентов(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераКоличествоКонтрагентов();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК КоличествоКонтрагентов
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Организация = &Организация
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.КоличествоКонтрагентов)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераКоличествоКонтрагентов(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеБаннера[0].КоличествоКонтрагентов >= КоличествоКонтрагентовДляРекламыКонтрагент() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераКоличествоКонтрагентов(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераКоличествоКонтрагентов(Баннер.НавигационнаяСсылка, ДанныеБаннера[0], ТекущаяДата);
	ЗаполнитьЗначенияСвойств(Баннер.ДанныеБаннера, ДанныеБаннера[0]);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннераКоличествоКонтрагентов(НавигационнаяСсылка, ДанныеБаннера, ТекущаяДата)
	
	МинутНаОдногоКонтрагента = 1;
	ВсегоМинут = ДанныеБаннера.КоличествоКонтрагентов * МинутНаОдногоКонтрагента;
	КоличествоЧасов = Цел(ВсегоМинут / 60);
	КоличествоМинут = ВсегоМинут % 60;
	
	Если КоличествоМинут = 0 Тогда
		ПотраченоВремени = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЧасов, "час, часа, часов");
	ИначеЕсли КоличествоЧасов = 0 Тогда
		ПотраченоВремени = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ВсегоМинут, "минуту, минуты, минут");
	Иначе
		ПотраченоВремени = СтрШаблон("%1 %2",
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЧасов, "час, часа, часов"),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоМинут, "минуту, минуты, минут"));
	КонецЕсли;
	
	ТекстЗаголовка = НовыйЗаголовок(СтрШаблон(НСтр("ru='Вы потратили %1 на ввод контрагентов в этом квартале'"), 
		ПотраченоВремени));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Узнайте, как делать это быстрее с помощью'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='1С:Контрагент!'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИдентификаторБаннераКоличествоКонтрагентов()

	Возврат "КоличествоКонтрагентов";

КонецФункции

Функция ДоступностьБаннераКоличествоКонтрагентов()
	
	ПравоДоступаККонтрагентам = ПравоДоступа(
		"Просмотр",
		Метаданные.Справочники.Контрагенты
	);
	
	Возврат ПравоДоступаККонтрагентам
		И НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
КонецФункции

#КонецОбласти

#Область НадежностьБанков

Функция НовыйБаннерНадежностьБанков()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервисНадежностьБанков();
	Баннер.Идентификатор       = ИдентификаторБаннераНадежностьБанков();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераНадежностьБанков();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераНадежностьБанков();
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИдентификаторыСобытий", Новый Массив);
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	Баннер.ЗависитОтОрганизации = Ложь;
	
	Возврат Баннер;
	
КонецФункции

Процедура ПолучитьДанныеНадежностьБанковОрганизаций(ДанныеБаннеров, СтруктураБаннеров)
	
	Идентификатор = ИдентификаторБаннераНадежностьБанков();
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	Информация = НадежностьБанков.ИнформацияОСобытияхБанковОрганизаций();
	Если НЕ Информация.Используется Тогда
		Возврат;
	КонецЕсли;
	Если Информация.События.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Баннер = СтруктураБаннеров[Идентификатор];
	
	ИдентификаторыЗакрытыхБаннеров = Баннер.ОбстоятельстваЗакрытия.ИдентификаторыСобытий;
	Если ТипЗнч(ИдентификаторыЗакрытыхБаннеров) <> Тип("Массив") Тогда
		ИдентификаторыЗакрытыхБаннеров = Новый Массив;
	КонецЕсли;
	
	Баннер.ДанныеБаннера.Вставить("ДанныеСобытия", НадежностьБанков.НовоеСобытие());
	ТаблицаДанныеБаннера = Новый ТаблицаЗначений;
	Для каждого ЭлементСобытия Из Баннер.ДанныеБаннера.ДанныеСобытия Цикл
		ТаблицаДанныеБаннера.Колонки.Добавить(ЭлементСобытия.Ключ);
	КонецЦикла;
	
	Для каждого ОписаниеСобытия Из Информация.События Цикл
		ДанныеСобытия = ОписаниеСобытия.Значение;
		Если ИдентификаторыЗакрытыхБаннеров.Найти(ДанныеСобытия.Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаДанныеБаннера.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСобытия);
	КонецЦикла;
	ТаблицаДанныеБаннера.Сортировать("Критичное Убыв, Идентификатор Возр");
	
	ДанныеБаннеров.Вставить(Идентификатор, ТаблицаДанныеБаннера);
	
КонецПроцедуры

Функция ВыполняютсяУсловияБаннераНадежностьБанков(ДанныеБаннера, Баннер)
	
	Возврат ДанныеБаннера.Количество() > 0;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераНадежностьБанков(Баннер, ДанныеБаннера)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Баннер.ТекстБаннера = ТекстБаннераНадежностьБанков(Баннер.НавигационнаяСсылка, ДанныеБаннера[0]);
	ЗаполнитьЗначенияСвойств(Баннер.ДанныеБаннера.ДанныеСобытия, ДанныеБаннера[0]);
	Идентификатор = ДанныеБаннера[0].Идентификатор;
	КлючСобытия = "НадежностьБанков" + Формат(Идентификатор, "ЧГ=");
	Баннер.ДанныеБаннера.Вставить("КлючСобытия", КлючСобытия);
	
	Если ДанныеБаннера[0].Критичное Тогда
		Баннер.ЦветФонаБаннер = "КритичноеСобытиеНадежностьБанковЦветФона";
		Баннер.ИмяКартинкаЛоготипа = "КритичноеСобытиеБаннераНадежностьБанков";
	Иначе
		Баннер.ЦветФонаБаннер = "ЦветФонаБлоковИнформационнойПанели";
		Баннер.ИмяКартинкаЛоготипа = "НекритичноеСобытиеБаннераНадежностьБанков";
	КонецЕсли;
	
	Если Баннер.ОбстоятельстваЗакрытия.ИдентификаторыСобытий.Найти(Идентификатор) = Неопределено Тогда
		Баннер.ОбстоятельстваЗакрытия.ИдентификаторыСобытий.Добавить(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстБаннераНадежностьБанков(НавигационнаяСсылка, ДанныеБаннера)
	
	ЧастиЗаголовка = Новый Массив;
	ЧастиЗаголовка.Добавить(НовыйЗаголовокНадежностьБанков(ДанныеБаннера.ТекстСобытия));
	Если ЗначениеЗаполнено(ДанныеБаннера.ИсточникИнформации) Тогда
		ЧастиЗаголовка.Добавить(НовыйЗаголовокНадежностьБанков(" ("));
		Если ДанныеБаннера.Событие = Перечисления.СобытияНадежностьБанков.Информация Тогда
			ТекстИсточник = НСтр("ru='подробнее'");
		Иначе
			ТекстИсточник = СтрЗаменить(НСтр("ru='информация ЦБ РФ'"), " ", Символы.НПП);
		КонецЕсли;
		ЧастиЗаголовка.Добавить(НовыйЗаголовокНадежностьБанков(ТекстИсточник, ДанныеБаннера.ИсточникИнформации));
		ЧастиЗаголовка.Добавить(НовыйЗаголовокНадежностьБанков(")"));
	КонецЕсли;
	ТекстЗаголовка = Новый ФорматированнаяСтрока(ЧастиЗаголовка);
	
	ЧастиПодзаголовка = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеБаннера.ТекстПояснения) Тогда
		ЧастиПодзаголовка.Добавить(НовыйСтрокаНадежностьБанков(ДанныеБаннера.ТекстПояснения));
	КонецЕсли;
	Если ДанныеБаннера.Критичное Тогда
		ЧастиПодзаголовка.Добавить(НовыйСтрокаНадежностьБанков(" "));
		ЧастиПодзаголовка.Добавить(НовыйСтрокаНадежностьБанков(НСтр("ru='Что делать'"), НавигационнаяСсылка));
	КонецЕсли;
	
	Если ЧастиПодзаголовка.Количество() > 0 Тогда
		ТекстПодзаголовка = Новый ФорматированнаяСтрока(ЧастиПодзаголовка);
		Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	Иначе
		Возврат ТекстЗаголовка;
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторБаннераНадежностьБанков()

	Возврат "НадежностьБанков";

КонецФункции

Функция НовыйЗаголовокНадежностьБанков(ТекстЗаголовка, НавигационнаяСсылка = "")
	
	Возврат НовыйЗаголовок(ТекстЗаголовка, НавигационнаяСсылка, ШрифтыСтиля.ШрифтЗаголовкаИнформационнойПанели);
	
КонецФункции

Функция НовыйСтрокаНадежностьБанков(ТекстСтроки, НавигационнаяСсылка = "")
	
	Возврат НовыйСтрокаБаннера(ТекстСтроки, НавигационнаяСсылка, ШрифтыСтиля.ОбычныйШрифтТекста);
	
КонецФункции

Функция ДоступностьБаннераНадежностьБанков()
	
	Возврат НадежностьБанков.СервисИспользуется()
		И НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
КонецФункции

#КонецОбласти

#Область ПлатформаСамозанятые

Функция НовыйБаннерПлатформаСамозанятые()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервисМойНалог();
	Баннер.Идентификатор       = ИдентификаторБаннераПлатформаСамозанятые();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераПлатформаСамозанятые();
	Баннер.Исключительный      = Истина;
	Баннер.ИмяКартинкаЛоготипа = "ПлатформаСамозанятыеИнтеграция";;
	Баннер.ДоступенПоПравам    = ДоступностьБаннераПлатформаСамозанятые();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИдентификаторыСобытий", Новый Массив);
	Возврат Баннер;
	
КонецФункции

Процедура ПолучитьДанныеПоПлатформеСамозанятые(Организация, ДанныеБаннеров, СтруктураБаннеров);
	
	Идентификатор = ИдентификаторБаннераПлатформаСамозанятые();
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые") Тогда
		ДанныеСобытия = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.ИнформацияОСобытияхПлатформыСамозанятые(Организация);
	ИначеЕсли УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(Организация, ТекущаяДатаСеанса()) Тогда
		ДанныеСобытия = Новый Структура("Организация, ПереходВОблако", Организация, "https://1cfresh.com/register");
	КонецЕсли;
	
	Если ДанныеСобытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Баннер = СтруктураБаннеров[Идентификатор];
	
	Баннер.ДанныеБаннера.Вставить("ДанныеСобытия", ДанныеСобытия);
	ДанныеБаннеров.Вставить(Идентификатор, ДанныеСобытия);
	
КонецПроцедуры

Функция ВыполняютсяУсловияПлатформаСамозанятые(ДанныеБаннера, Баннер)
	
	Возврат ДанныеБаннера.Количество() > 0;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераПлатформаСамозанятые(Баннер, ДанныеБаннера)
	
	Баннер.ТекстБаннера        = ТекстБаннераПлатформаСамозанятые(Баннер.НавигационнаяСсылка, ДанныеБаннера);
	Баннер.ЦветФонаБаннер      = ЦветФонаБаннерПлатформаСамозанятые(ДанныеБаннера);
	Баннер.ИмяКартинкаЛоготипа = КартинкаЛоготипаБаннерПлатформаСамозанятые(ДанныеБаннера);
	// После закрытия баннер нельзя исключать из списка баннеров.
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Ложь);
	
КонецПроцедуры

Функция ТекстБаннераПлатформаСамозанятые(НавигационнаяСсылка, ДанныеБаннера)
	
	ЧастиПодзаголовка = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые") Тогда
		
		Если ДанныеБаннера.Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтправлен Тогда
			ТекстЗаголовка = НовыйЗаголовок(НСтр("ru='Не настроен сервис Мой налог'"));
			ТекстПодзаголовка = НСтр("ru='Выполните настройку в личном кабинете сервиса '");
		Иначе
			ТекстЗаголовка = НовыйЗаголовок(НСтр("ru='Отправляйте данные о доходах в ФНС прямо из 1С'"));
			ТекстПодзаголовка = НСтр("ru='Подключитесь к сервису '");
		КонецЕсли;
		
		ТекстПодзаголовка = Новый ФорматированнаяСтрока(
			НовыйСтрокаБаннера(ТекстПодзаголовка),
			НовыйСтрокаБаннера(" "),
			НовыйСтрокаБаннера(НСтр("ru='Мой налог'"), НавигационнаяСсылка));
		
	Иначе
		
		ТекстЗаголовка = НовыйЗаголовок(НСтр("ru='Отправляйте данные о доходах в ФНС прямо из 1С'"));
		ТекстПодзаголовка = НСтр("ru='Для этого перейдите в облако'");
		
		ТекстПодзаголовка = Новый ФорматированнаяСтрока(
			НовыйСтрокаБаннера(ТекстПодзаголовка),
			НовыйСтрокаБаннера(" "),
			НовыйСтрокаБаннера(НСтр("ru='1cfresh.com'"), НавигационнаяСсылка));
		
	КонецЕсли;
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка)
	
КонецФункции

Функция ЦветФонаБаннерПлатформаСамозанятые(ДанныеБаннера)
	
	Если ДанныеБаннера.Свойство("Состояние")
		И ДанныеБаннера.Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтправлен Тогда
		Возврат "ЦветБаннераПлатформаСамозанятыеКрасный";
	Иначе
		Возврат "ЦветБаннераПлатформаСамозанятыеЗеленый";
	КонецЕсли;
	
КонецФункции

Функция КартинкаЛоготипаБаннерПлатформаСамозанятые(ДанныеБаннера)
	
	Если ДанныеБаннера.Свойство("Состояние")
		И ДанныеБаннера.Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтправлен Тогда
		Возврат "ПлатформаСамозанятыеОшибка";
	Иначе
		Возврат "ПлатформаСамозанятыеИнтеграция";
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторБаннераПлатформаСамозанятые()

	Возврат "ПлатформаСамозанятые";

КонецФункции

Функция ДоступностьБаннераПлатформаСамозанятые()
	
	РекламироватьПереходВОблако = Не ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяНалогНаПрофессиональныйДоход")
		И НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсИнтеграцииСБанком")
		И (ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые") Или РекламироватьПереходВОблако);
	
КонецФункции

#КонецОбласти

#Область ПоддержкаСервиса

Функция НовыйБаннерПоддержкаСервиса()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервисПоддержкаСервиса();
	Баннер.Идентификатор       = ИдентификаторБаннераПоддержкаСервиса();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераПоддержкаСервиса();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераПоддержкаСервиса();
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИдентификаторыСобытий", Новый Массив);
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.Исключительный       = Истина;
	
	Возврат Баннер;
	
КонецФункции

Функция ИдентификаторБаннераПоддержкаСервиса()
	
	Возврат "ПоддержкаСервиса";
	
КонецФункции

Функция ДоступностьБаннераПоддержкаСервиса()
	
	Возврат ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
КонецФункции

Функция НовыйЗаголовокПоддержкаСервиса(ТекстЗаголовка, НавигационнаяСсылка = "")
	
	Возврат НовыйЗаголовок(ТекстЗаголовка, НавигационнаяСсылка, ШрифтыСтиля.ШрифтЗаголовкаИнформационнойПанели);
	
КонецФункции

Процедура ПолучитьДанныеПоддержкаСервиса(ДанныеБаннеров, СтруктураБаннеров)
	
	Идентификатор = ИдентификаторБаннераПоддержкаСервиса();
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСообщенийСервиса = Новый ТаблицаЗначений;
	ТаблицаСообщенийСервиса.Колонки.Добавить(
		"СсылкаНаДанные", Новый ОписаниеТипов("СправочникСсылка.ОбщиеДанныеИнформационногоЦентра"));
	УстановитьПривилегированныйРежим(Истина);
	ИнформационныйЦентрСервер.СформироватьСписокНовостейНаРабочийСтол(ТаблицаСообщенийСервиса, 1);
	
	Если ТаблицаСообщенийСервиса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Баннер = СтруктураБаннеров[Идентификатор];
	
	ИдентификаторыЗакрытыхБаннеров = Баннер.ОбстоятельстваЗакрытия.ИдентификаторыСобытий;
	Если ТипЗнч(ИдентификаторыЗакрытыхБаннеров) <> Тип("Массив") Тогда
		ИдентификаторыЗакрытыхБаннеров = Новый Массив;
	КонецЕсли;
	
	РеквизитыСообщения = "Наименование, Идентификатор, Критичность, ТипИнформации";
	ДанныеСообщений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ТаблицаСообщенийСервиса.ВыгрузитьКолонку("СсылкаНаДанные"), РеквизитыСообщения);
	
	Баннер.ДанныеБаннера.Вставить("ДанныеСобытия", Новый Структура(РеквизитыСообщения));
	
	ТаблицаДанныеБаннера = Новый ТаблицаЗначений;
	Для каждого ЭлементСобытия Из Баннер.ДанныеБаннера.ДанныеСобытия Цикл
		ТаблицаДанныеБаннера.Колонки.Добавить(ЭлементСобытия.Ключ);
	КонецЦикла;
	
	Для каждого ОписаниеСобытия Из ДанныеСообщений Цикл
		ДанныеСобытия = ОписаниеСобытия.Значение;
		Если ИдентификаторыЗакрытыхБаннеров.Найти(ДанныеСобытия.Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДанныеБаннера.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСобытия);
	КонецЦикла;
	ТаблицаДанныеБаннера.Сортировать("Критичность Убыв, Идентификатор Возр");
	
	ДанныеБаннеров.Вставить(Идентификатор, ТаблицаДанныеБаннера);
	
КонецПроцедуры

Функция ВыполняютсяУсловияБаннераПоддержкаСервиса(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат КритичноеСообщениеСервиса(ДанныеБаннера[0]);
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераПоддержкаСервиса(Баннер, ДанныеБаннера)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Баннер.ТекстБаннера = ТекстБаннераПоддержкаСервиса(Баннер.НавигационнаяСсылка, ДанныеБаннера[0]);
	ЗаполнитьЗначенияСвойств(Баннер.ДанныеБаннера.ДанныеСобытия, ДанныеБаннера[0]);
	
	Баннер.ЦветФонаБаннер = ЦветФонаБаннераКритичноеСообщениеСервиса();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиКритичноеСообщениеСервиса();
	
КонецПроцедуры

Функция ТекстБаннераПоддержкаСервиса(НавигационнаяСсылка, ДанныеБаннера)
	
	ЧастиЗаголовка = Новый Массив;
	ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Внимание!'"), Новый Шрифт(,, Истина)));
	ЧастиЗаголовка.Добавить(Символы.ПС);
	ЧастиЗаголовка.Добавить(НовыйЗаголовокПоддержкаСервиса(ДанныеБаннера.Наименование));
	ЧастиЗаголовка.Добавить(НовыйСтрокаБаннера(" "));
	ЧастиЗаголовка.Добавить(НовыйЗаголовокПоддержкаСервиса(НСтр("ru = 'Подробнее'"), НавигационнаяСсылка));
	ТекстЗаголовка = НовыйЗаголовок(ЧастиЗаголовка);
	
	Возврат ТекстЗаголовка;
	
КонецФункции

Функция КритичноеСообщениеСервиса(ТекущееСообщение) Экспорт
	
	Возврат ТекущееСообщение.Критичность > 5 Или Строка(ТекущееСообщение.ТипИнформации) = "Недоступность";
	
КонецФункции

Функция ЦветФонаБаннераКритичноеСообщениеСервиса()
	
	Возврат "ЦветФонаПредупреждения";
	
КонецФункции

Функция ИмяКартинкиКритичноеСообщениеСервиса()
	
	Возврат "КотКритичноеСообщениеСервиса";
	
КонецФункции

#КонецОбласти

#Область Антикризис

Функция НовыйБаннерАнтикризис()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяАнтикризис();
	Баннер.Идентификатор       = ИдентификаторБаннераАнтикризис();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиАнтикризис();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераАнтикризис();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераАнтикризис();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.Группа              = "Антикризис";
	
	Возврат Баннер;
	
КонецФункции

Функция ИдентификаторБаннераАнтикризис()
	
	Возврат "Антикризис";
	
КонецФункции

Процедура ПолучитьДанныеБаннераАнтикризис(ДанныеБаннеров)
	
	ДанныеБаннера = Новый Структура;
	ДанныеБаннера.Вставить("ДатаНачалаПоказаБаннера", ДатаНачалаПоказаБаннераАнтикризис());
	
	ДанныеБаннеров.Вставить(ИдентификаторБаннераАнтикризис(), ДанныеБаннера);
	
КонецПроцедуры

Функция ВыполняютсяУсловияБаннераАнтикризис(ДанныеБаннера, Баннер)
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераАнтикризис(Баннер, ДанныеБаннера)
	
	Баннер.ТекстБаннера = ТекстБаннераАнтикризис(Баннер.НавигационнаяСсылка);
	// После закрытия баннер можно исключать из списка баннеров.
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Истина);
	
КонецПроцедуры

Функция ТекстБаннераАнтикризис(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru = 'Антикризисные меры по коронавирусу'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Проверьте'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='настройки налогов и отчетности'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ДоступностьБаннераАнтикризис()
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	ЭтоГлавныйБухгалтер = РольДоступна("ДобавлениеИзменениеНастроекБухгалтерии");
	
	Возврат (ЭтоПолноправныйПользователь ИЛИ ЭтоГлавныйБухгалтер)
		И НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсИнтеграцииСБанком");
		
КонецФункции

Функция ИмяКартинкиАнтикризис()
	
	Возврат "КотАнтикризис";
	
КонецФункции

Функция ДатаНачалаПоказаБаннераАнтикризис()

	ИмяНастройки = ВРег("ДатаНачалаПоказаБаннераАнтикризис");
	ДатаНачалаПоказаБаннера = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяНастройки, Неопределено);
	Если ДатаНачалаПоказаБаннера = Неопределено Тогда
		ДатаНачалаПоказаБаннера = НачалоДня(ТекущаяДатаСеанса());
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки, Неопределено, ДатаНачалаПоказаБаннера);
	КонецЕсли;
	
	Возврат ДатаНачалаПоказаБаннера;

КонецФункции

#КонецОбласти

#Область АнтикризисОсвобождениеОтНалогов

Функция НовыйБаннерАнтикризисОсвобождениеОтНалогов()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяАнтикризисОсвобождениеОтНалогов();
	Баннер.Идентификатор       = ИдентификаторБаннераАнтикризисОсвобождениеОтНалогов();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиАнтикризис();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераАнтикризис();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераАнтикризис();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.Группа              = "Антикризис";
	
	Возврат Баннер;
	
КонецФункции

Функция ИдентификаторБаннераАнтикризисОсвобождениеОтНалогов()
	
	Возврат "АнтикризисОсвобождениеОтНалогов";
	
КонецФункции

Процедура ПолучитьДанныеБаннераАнтикризисОсвобождениеОтНалогов(ДанныеБаннеров)
	
	ДанныеБаннера = Новый Структура;
	ДанныеБаннера.Вставить("ДатаНачалаПоказаБаннераАнтикризисОсвобождениеОтНалогов", ДатаНачалаПоказаБаннераАнтикризисОсвобождениеОтНалогов());
	
	ДанныеБаннеров.Вставить(ИдентификаторБаннераАнтикризисОсвобождениеОтНалогов(), ДанныеБаннера);
	
КонецПроцедуры

Функция ВыполняютсяУсловияБаннераАнтикризисОсвобождениеОтНалогов(ДанныеБаннера, Баннер)
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераАнтикризисОсвобождениеОтНалогов(Баннер, ДанныеБаннера)
	
	Баннер.ТекстБаннера = ТекстБаннераАнтикризисОсвобождениеОтНалогов(Баннер.НавигационнаяСсылка);
	// После закрытия баннер можно исключать из списка баннеров.
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Истина);
	
КонецПроцедуры

Функция ТекстБаннераАнтикризисОсвобождениеОтНалогов(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru = 'Освобождение от налогов во 2 квартале 2020 года'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Проверьте'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='настройки налогов и отчетности'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ДатаНачалаПоказаБаннераАнтикризисОсвобождениеОтНалогов()

	ИмяНастройки = ВРег("ДатаНачалаПоказаБаннераАнтикризисОсвобождениеОтНалогов");
	ДатаНачалаПоказаБаннера = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяНастройки, Неопределено);
	Если ДатаНачалаПоказаБаннера = Неопределено Тогда
		ДатаНачалаПоказаБаннера = НачалоДня(ТекущаяДатаСеанса());
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки, Неопределено, ДатаНачалаПоказаБаннера);
	КонецЕсли;
	
	Возврат ДатаНачалаПоказаБаннера;

КонецФункции

#КонецОбласти

#Область АнтикризисЗарплата

Функция НовыйБаннерАнтикризисЗарплата()
	
	// Копия баннера - НовыйБаннерАнтикризис
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяАнтикризисЗарплата();
	Баннер.Идентификатор       = ИдентификаторБаннераАнтикризисЗарплата();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиАнтикризис();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераАнтикризис();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераАнтикризис();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.Исключительный       = Истина;
	
	Возврат Баннер;
	
КонецФункции

Функция ИдентификаторБаннераАнтикризисЗарплата()
	
	Возврат "АнтикризисЗарплата";
	
КонецФункции

Процедура ПолучитьДанныеБаннераАнтикризисЗарплата(ДанныеБаннеров)
	
	ДанныеБаннера = Новый Структура;
	ДанныеБаннера.Вставить("ДатаНачалаПоказаБаннераАнтикризис", ДатаНачалаПоказаБаннераАнтикризис());
	
	ДанныеБаннеров.Вставить(ИдентификаторБаннераАнтикризисЗарплата(), ДанныеБаннера);
	
КонецПроцедуры

#КонецОбласти

#Область СайтАнтикризис

Функция НовыйБаннерСайтАнтикризис()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСайтАнтикризис();
	Баннер.Идентификатор       = ИдентификаторБаннераСайтАнтикризис();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиСайтАнтикризис();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераСайтАнтикризис();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераСайтАнтикризис();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.Группа              = "Антикризис";
	
	Возврат Баннер;
	
КонецФункции

Функция ИдентификаторБаннераСайтАнтикризис()
	
	Возврат "СайтАнтикризис";
	
КонецФункции

Процедура ПолучитьДанныеБаннераСайтАнтикризис(ДанныеБаннеров)
	
	ДанныеБаннера = Новый Структура;
	ДанныеБаннера.Вставить("ДатаНачалаПоказаБаннера", ДатаНачалаПоказаБаннераСайтАнтикризис());
	
	ДанныеБаннеров.Вставить(ИдентификаторБаннераСайтАнтикризис(), ДанныеБаннера);
	
КонецПроцедуры

Функция ВыполняютсяУсловияБаннераСайтАнтикризис(ДанныеБаннера, Баннер)
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераСайтАнтикризис(Баннер, ДанныеБаннера)
	
	Баннер.ТекстБаннера = ТекстБаннераСайтАнтикризис(Баннер.НавигационнаяСсылка);
	// После закрытия баннер можно исключать из списка баннеров.
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Истина);
	
КонецПроцедуры

Функция ТекстБаннераСайтАнтикризис(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru = 'Решения 1С для здоровья бизнеса в условиях коронавируса'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Узнайте подробности на сайте'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='1С:Антикризис'"), НавигационнаяСсылка));
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ДоступностьБаннераСайтАнтикризис()
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	ЭтоБухгалтер = РольДоступна("ДобавлениеИзменениеДанныхБухгалтерии");
	
	Возврат (ЭтоПолноправныйПользователь ИЛИ ЭтоБухгалтер)
		И НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсИнтеграцииСБанком");
		
КонецФункции

Функция ИмяКартинкиСайтАнтикризис()
	
	Возврат "КотАнтикризис";
	
КонецФункции

Функция ДатаНачалаПоказаБаннераСайтАнтикризис()

	ИмяНастройки = ВРег("ДатаНачалаПоказаБаннераСайтАнтикризис");
	ДатаНачалаПоказаБаннера = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяНастройки, Неопределено);
	Если ДатаНачалаПоказаБаннера = Неопределено Тогда
		ДатаНачалаПоказаБаннера = НачалоДня(ТекущаяДатаСеанса());
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки, Неопределено, ДатаНачалаПоказаБаннера);
	КонецЕсли;
	
	Возврат ДатаНачалаПоказаБаннера;

КонецФункции

#КонецОбласти

#Область ПроверкаОплатыНалогов

Функция НовыйБаннерПроверкаОплатыНалогов(Размещение)
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервисПроверкаОплатыНалогов();
	Баннер.Идентификатор       = ИдентификаторБаннераПроверкаОплатыНалогов();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераПроверкаОплатыНалогов();
	Баннер.ДоступенПоПравам    = Истина;
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиСервисПроверкаОплатыНалогов();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = "";
	Баннер.ЗависитОтОрганизации = Истина;
	Баннер.ДанныеБаннера.Вставить("Размещение", Размещение);
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаПроверкаОплатыНалогов(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераПроверкаОплатыНалогов();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПерсонализированныеДанные.Организация КАК Организация,
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.СервисПроверкаОплатыНалогов)
	|	И ПерсонализированныеДанные.Организация = &Организация";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераПроверкаОплатыНалогов(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Организация        = ДанныеБаннера[0].Организация;
	ЗначениеПоказателя = ДанныеБаннера[0].ЗначениеПоказателя;
	
	Если (Баннер.ДанныеБаннера.Размещение = ИмяРазмещенияОбщее()
			Или Баннер.ДанныеБаннера.Размещение = ИмяРазмещенияСписокЗадач())
		И ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Организация,, Истина) Тогда
		
		Возврат Ложь; // выводим баннер на начальной странице, если не подключена отчетность
		
	КонецЕсли;
	
	Баннер.ДанныеБаннера.Вставить("Организация", Организация);
	
	Возврат Обработки.СверкаНалоговСФНС.ПоказатьБаннерПроверкаОплатыНалогов(
		Организация,
		ЗначениеПоказателя);
		
КонецФункции

Процедура ЗаполнитьДанныеБаннераПроверкаОплатыНалогов(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераПроверкаОплатыНалогов(Баннер.НавигационнаяСсылка);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннераПроверкаОплатыНалогов(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru = 'Самое время выполнить сверку с ФНС!'"));
	
	Если РегламентированнаяОтчетностьБП.Используется1СОтчетность() Тогда
		ТекстПодзаголовка = ТекстПодзаголовкаПроверкаОплатыНалогов_ВозможноПодключить1СОтчетность(НавигационнаяСсылка);
	Иначе
		ТекстПодзаголовка = ТекстПодзаголовкаПроверкаОплатыНалогов_БезПодключения1СОтчетности(НавигационнаяСсылка);
	КонецЕсли;
	
	ПустаяСтрока = Новый ФорматированнаяСтрока(" ", Новый Шрифт(, 2));
	
	Возврат Новый ФорматированнаяСтрока(
		ТекстЗаголовка,
		Символы.ПС, ПустаяСтрока, Символы.ПС, ТекстПодзаголовка);
	
КонецФункции

Функция ТекстПодзаголовкаПроверкаОплатыНалогов_ВозможноПодключить1СОтчетность(НавигационнаяСсылка)
	
	Шрифт = Новый Шрифт(ШрифтыСтиля.ШрифтТекстаБаннера, , 11);
	ПустаяСтрока = Новый ФорматированнаяСтрока(" ", Новый Шрифт(, 2));
	
	Возврат Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера("Дошли ли платежи до ФНС? Нет ли неоплаченных штрафов?", , Шрифт),
		Символы.ПС, ПустаяСтрока, Символы.ПС,
		НовыйСтрокаБаннера(НСтр("ru='Нажмите'"), НавигационнаяСсылка, Шрифт),
		НовыйСтрокаБаннера(", ", , Шрифт),
		НовыйСтрокаБаннера(НСтр("ru='чтобы отправить запрос на сверку и получить ответ через 1-3 дня'"), , Шрифт));
	
КонецФункции

Функция ТекстПодзаголовкаПроверкаОплатыНалогов_БезПодключения1СОтчетности(НавигационнаяСсылка)
	
	Шрифт = Новый Шрифт(ШрифтыСтиля.ШрифтТекстаБаннера, , 11);
	ПустаяСтрока = Новый ФорматированнаяСтрока(" ", Новый Шрифт(, 2));
	
	Возврат Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера("Дошли ли платежи до ФНС? Нет ли неоплаченных штрафов?", , Шрифт),
		Символы.ПС, ПустаяСтрока, Символы.ПС,
		НовыйСтрокаБаннера(НСтр("ru='Узнайте, как '"), , Шрифт),
		НовыйСтрокаБаннера(НСтр("ru='выполнить сверку'"), НавигационнаяСсылка, Шрифт));
	
КонецФункции

Функция ИдентификаторБаннераПроверкаОплатыНалогов() Экспорт

	Возврат "ПроверкаОплатыНалогов";

КонецФункции

Функция ИмяКартинкиСервисПроверкаОплатыНалогов()
	
	Возврат "КотДошелЛиПлатеж";
	
КонецФункции

#КонецОбласти

#Область ПроблемыСНалоговымиПлатежами

Функция НовыйБаннерПроблемыСНалоговымиПлатежами()
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяПроблемыСНалоговымиПлатежами();
	Баннер.Идентификатор        = ИдентификаторБаннераПроблемыСНалоговымиПлатежами();
	Баннер.НавигационнаяСсылка  = ИдентификаторБаннераПроблемыСНалоговымиПлатежами();
	Баннер.ДоступенПоПравам     = Истина;
	Баннер.ИмяКартинкаЛоготипа  = ИмяКартинкиПроблемыСНалоговымиПлатежами();
	Баннер.ЦветФонаБаннер       = ЦветФонаБаннераПроблемыСНалоговымиПлатежами();
	Баннер.ЗависитОтОрганизации = Истина;
	Баннер.ОбстоятельстваЗакрытия.Периодичность = "";
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаПроблемыСНалоговымиПлатежами(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераПроблемыСНалоговымиПлатежами();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЗапросыНаПроверкуОплатНалогов.Дата) КАК Дата,
	|	ЗапросыНаПроверкуОплатНалогов.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ЗапросыНаПроверкуОплатНалогов КАК ЗапросыНаПроверкуОплатНалогов
	|ГДЕ
	|	ЗапросыНаПроверкуОплатНалогов.Организация = &Организация
	|	И ЗапросыНаПроверкуОплатНалогов.ОтветОбработан
	|	И НЕ ЗапросыНаПроверкуОплатНалогов.СверкаПройдена
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросыНаПроверкуОплатНалогов.Организация";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ВыполняютсяУсловияБаннераПроблемыСНалоговымиПлатежами(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДатаЗапроса = ДанныеБаннера[0].Дата;
	Если Не ЗначениеЗаполнено(ДатаЗапроса) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Баннер.ДанныеБаннера.Вставить("Организация", ДанныеБаннера[0].Организация);
	
	Возврат (ДатаЗапроса > Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия);
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераПроблемыСНалоговымиПлатежами(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераПроблемыСНалоговымиПлатежами(Баннер.НавигационнаяСсылка);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДатаСеанса();
	
КонецПроцедуры

Функция ТекстБаннераПроблемыСНалоговымиПлатежами(НавигационнаяСсылка)

	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru = 'В выписке из ФНС не обнаружено сведений о вашем платеже'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Подробнее'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);

КонецФункции

Функция ИдентификаторБаннераПроблемыСНалоговымиПлатежами()

	Возврат "ПроблемыСНалоговымиПлатежами";

КонецФункции

Функция ИмяКартинкиПроблемыСНалоговымиПлатежами()
	
	Возврат "КотПлатежНеДошел";
	
КонецФункции

Функция ЦветФонаБаннераПроблемыСНалоговымиПлатежами()

	Возврат "ЦветФонаБаннераПлатежиНеДошлиДоФНС";

КонецФункции

#КонецОбласти

#Область ПредодобренныйКредитВСбербанке

Функция НовыйБаннерПредодобренныйКредитВСбербанке()
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяСервисПредодобренныйКредитВСбербанке();
	Баннер.Идентификатор        = ИдентификаторБаннераПредодобренныйКредитВСбербанке();
	Баннер.ИмяКартинкаЛоготипа  = ИмяКартинкиЛоготипСбербанк();
	Баннер.ЦветФонаБаннер       = "ЦветФонаБаннерПредодобренныйКредитВСбербанке";
	Баннер.НавигационнаяСсылка  = ИдентификаторБаннераПредодобренныйКредитВСбербанке();
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.ДоступенПоПравам     = ДоступностьБаннераПредодобренныйКредитВСбербанке();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Месяц;
	Баннер.Группа               = "Банки";
	
	Возврат Баннер;
	
КонецФункции

Процедура ПолучитьДанныеБаннераПредодобренныйКредитВСбербанке(ДанныеБаннеров)
	
	МассивИНН = ПредодобренныйКредитВСбербанкеПолучитьПредодобренныеИНН();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИНН", МассивИНН);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.ИНН КАК ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН В(&МассивИНН)";
	ДанныеБаннера = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИНН");
	
	ДанныеБаннеров.Вставить(ИдентификаторБаннераПредодобренныйКредитВСбербанке(), ДанныеБаннера);
	
КонецПроцедуры

Функция ВыполняютсяУсловияБаннераПредодобренныйКредитВСбербанке(ДанныеБаннера, Баннер)
	
	Возврат ДанныеБаннера.Количество() > 0;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераПредодобренныйКредитВСбербанке(Баннер, ДанныеБаннера, ТекущаяДата)
	
	НавигационнаяСсылка = Баннер.НавигационнаяСсылка + ?(ДанныеБаннера.Количество() = 1, ДанныеБаннера[0], "");
	
	Баннер.ТекстБаннера = ТекстБаннерПредодобренныйКредитВСбербанке(ДанныеБаннера, НавигационнаяСсылка);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннерПредодобренныйКредитВСбербанке(ДанныеБаннера, НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru='Оформите СМАРТ-кредит в Сбербанке'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Узнать подробности'"), НавигационнаяСсылка));
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИдентификаторБаннераПредодобренныйКредитВСбербанке()

	Возврат "ПредодобренныйКредитВСбербанке";

КонецФункции

Функция ДоступностьБаннераПредодобренныйКредитВСбербанке()
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	ЭтоГлавныйБухгалтер = РольДоступна("ДобавлениеИзменениеНастроекБухгалтерии");
	
	Возврат (ЭтоПолноправныйПользователь ИЛИ ЭтоГлавныйБухгалтер)
		И НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсИнтеграцииСБанком");
	
КонецФункции

#КонецОбласти

#Область НастройкаВидимостиСчетовУчета

Функция НовыйБаннерНастройкаВидимостиСчетовУчета(Размещение)
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяНастройкаВидимостиСчетовУчета();
	Баннер.Идентификатор        = ИдентификаторБаннераНастройкаВидимостиСчетовУчета();
	Баннер.НавигационнаяСсылка  = ИдентификаторБаннераНастройкаВидимостиСчетовУчета();
	Баннер.ДоступенПоПравам     = ДоступностьБаннераНастройкаВидимостиСчетовУчета();
	Баннер.ИмяКартинкаЛоготипа  = ИмяКартинкиНастройкаВидимостиСчетовУчета();
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.Исключительный       = Истина;
	Баннер.ОбстоятельстваЗакрытия.Периодичность = "";
	Баннер.ДанныеБаннера.Вставить("Размещение", Размещение);
	
	Возврат Баннер;
	
КонецФункции

Процедура ПолучитьДанныеБаннераНастройкаВидимостиСчетовУчета(ДанныеБаннеров)
	
	ДанныеБаннера = Новый Структура;
	ДанныеБаннера.Вставить("ДатаНачалаПоказаБаннера", ДатаНачалаПоказаБаннераНастройкаВидимостиСчетов());
	
	ДанныеБаннеров.Вставить(ИдентификаторБаннераНастройкаВидимостиСчетовУчета(), ДанныеБаннера);
	
КонецПроцедуры

Функция ВыполняютсяУсловияБаннераНастройкаВидимостиСчетовУчета(ДанныеБаннера, Баннер)
	
	ПользовательНеИзменялНастройкуСчетовУчета =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег("ПоказыватьСчетаУчетаВДокументах"), Неопределено) = Неопределено;
	
	БаннерПоказываетсяМеньшеМесяца = НачалоДня(ТекущаяДатаСеанса()) < ДобавитьМесяц(ДанныеБаннера.ДатаНачалаПоказаБаннера, 1);
	
	Возврат ПользовательНеИзменялНастройкуСчетовУчета И БаннерПоказываетсяМеньшеМесяца;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераНастройкаВидимостиСчетовУчета(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераНастройкаВидимостиСчетовУчета(Баннер.НавигационнаяСсылка);
	// После закрытия баннер можно исключать из списка баннеров.
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Истина);
	
КонецПроцедуры

Функция ТекстБаннераНастройкаВидимостиСчетовУчета(НавигационнаяСсылка)

	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru = 'Счета бухгалтерского учета могут показываться или скрываться'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Управляйте этим в'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='Персональных настройках'"), НавигационнаяСсылка));
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);

КонецФункции

Функция ИдентификаторБаннераНастройкаВидимостиСчетовУчета()

	Возврат "НастройкаВидимостиСчетовУчета";

КонецФункции

Функция ДоступностьБаннераНастройкаВидимостиСчетовУчета()
	
	Возврат РаботаВМоделиСервиса.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		И Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком()
		И Пользователи.ЭтоПолноправныйПользователь(,, Ложь);
	
КонецФункции

Функция ИмяКартинкиНастройкаВидимостиСчетовУчета()
	
	Возврат "КотВажноеСообщение";
	
КонецФункции

Функция ДатаНачалаПоказаБаннераНастройкаВидимостиСчетов()

	ИмяНастройки = ВРег("ДатаНачалаПоказаБаннераНастройкаВидимостиСчетов");
	ДатаНачалаПоказаБаннера = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяНастройки, Неопределено);
	Если ДатаНачалаПоказаБаннера = Неопределено Тогда
		ДатаНачалаПоказаБаннера = НачалоДня(ТекущаяДатаСеанса());
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки, Неопределено, ДатаНачалаПоказаБаннера);
	КонецЕсли;
	
	Возврат ДатаНачалаПоказаБаннера;

КонецФункции

#КонецОбласти

#Область ЗаявкаНаКредит

Функция НовыйБаннерЗаявкаНаКредит()
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяСервисЗаявкаНаКредит();
	Баннер.Идентификатор        = ИдентификаторБаннераЗаявкаНаКредит();
	Баннер.ИмяКартинкаЛоготипа  = ИмяКартинкиЛоготипЗаявкаНаКредит();
	Баннер.ЦветФонаБаннер       = "ЦветФонаБаннера1СКредит";
	Баннер.НавигационнаяСсылка  = ИдентификаторБаннераЗаявкаНаКредит();
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.ДоступенПоПравам     = ДоступностьБаннераЗаявкаНаКредит();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Месяц;
	Баннер.Группа               = "Банки";
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаЗаявкаНаКредит(Запрос, СтруктураБаннеров, НомераТаблиц, Организация)
	
	Идентификатор = ИдентификаторБаннераЗаявкаНаКредит();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПерсонализированныеДанные.Организация КАК Организация,
	|	ПерсонализированныеДанные.Организация.ИностраннаяОрганизация КАК ИностраннаяОрганизация,
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК СреднемесячноеПоступлениеНаСчет,
	|	ЕСТЬNULL(ЗаявкаНаКредит.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаявкаНаКредит.ПустаяСсылка)) КАК ЗаявкаНаКредит
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ЗаявкаНаКредит.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ЗаявкаНаКредит КАК ЗаявкаНаКредит
	|		ГДЕ
	|			ЗаявкаНаКредит.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -6), ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)) КАК ЗаявкаНаКредит
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ПерсонализированныеДанные.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.ЗаявкаНаКредит)";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорВложенногоЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[1].Источник.Запрос.Операторы[0];
	Если ЗначениеЗаполнено(Организация) Тогда
		ОператорЗапроса.Отбор.Добавить("ПерсонализированныеДанные.Организация = &Организация");
		ОператорВложенногоЗапроса.Отбор.Добавить("ЗаявкаНаКредит.Организация = &Организация");
	Иначе
		ОператорЗапроса.Отбор.Добавить("ПерсонализированныеДанные.Организация В(&СписокОрганизаций)");
		ОператорВложенногоЗапроса.Отбор.Добавить("ЗаявкаНаКредит.Организация В(&СписокОрганизаций)");
	КонецЕсли;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераЗаявкаНаКредит(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого Данные Из ДанныеБаннера Цикл
		
		Если НЕ Данные.ЗаявкаНаКредит.Пустая() Тогда
			// Создана хотя бы одна заявка на кредит.
			Возврат Ложь;
		КонецЕсли;
		
		Если Данные.ИностраннаяОрганизация Тогда
			Продолжить;
		КонецЕсли;
		
		Если Данные.СреднемесячноеПоступлениеНаСчет >= СреднемесячноеПоступлениеНаСчетДляРекламыЗаявкаНаКредит() Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераЗаявкаНаКредит(Баннер, ДанныеБаннера, ТекущаяДата)
	
	НавигационнаяСсылка = Баннер.НавигационнаяСсылка;
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	ЭтоГлавныйБухгалтер = РольДоступна("ДобавлениеИзменениеНастроекБухгалтерии");
	Если НЕ (ЭтоПолноправныйПользователь ИЛИ ЭтоГлавныйБухгалтер) Тогда
		НавигационнаяСсылка = Сайт1СКредит();
	КонецЕсли;
	
	Баннер.ТекстБаннера = ТекстБаннерЗаявкаНаКредит(ДанныеБаннера, НавигационнаяСсылка);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннерЗаявкаНаКредит(ДанныеБаннера, НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru='Выбирайте выгодные кредиты и оформляйте заявки прямо в 1С'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Подробнее'"), НавигационнаяСсылка));
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИдентификаторБаннераЗаявкаНаКредит()

	Возврат "ЗаявкаНаКредит";

КонецФункции

Функция ДоступностьБаннераЗаявкаНаКредит()
	
	Возврат НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсИнтеграцииСБанком");
	
КонецФункции

#КонецОбласти

#Область ИспользуетеКредиты

Функция НовыйБаннерИспользуетеКредиты()
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяСервисИспользуетеКредиты();
	Баннер.Идентификатор        = ИдентификаторБаннераИспользуетеКредиты();
	Баннер.ИмяКартинкаЛоготипа  = ИмяКартинкиЛоготипИспользуетеКредиты();
	Баннер.ЦветФонаБаннер       = "ЦветФонаБаннера1СКредит";
	Баннер.НавигационнаяСсылка  = ИдентификаторБаннераИспользуетеКредиты();
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.ДоступенПоПравам     = ДоступностьБаннераИспользуетеКредиты();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Месяц;
	Баннер.Группа               = "Банки";
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаИспользуетеКредиты(Запрос, СтруктураБаннеров, НомераТаблиц, Организация)
	
	Идентификатор = ИдентификаторБаннераИспользуетеКредиты();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПерсонализированныеДанные.Организация КАК Организация,
	|	ПерсонализированныеДанные.Организация.ИностраннаяОрганизация КАК ИностраннаяОрганизация,
	|	ВЫБОР
	|		КОГДА ПерсонализированныеДанные.ЗначениеПоказателя <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОборотыПоКредитам,
	|	ЕСТЬNULL(ЗаявкаНаКредит.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаявкаНаКредит.ПустаяСсылка)) КАК ЗаявкаНаКредит
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ЗаявкаНаКредит.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ЗаявкаНаКредит КАК ЗаявкаНаКредит
	|		ГДЕ
	|			ЗаявкаНаКредит.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -6), ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)) КАК ЗаявкаНаКредит
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ПерсонализированныеДанные.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.ИспользуетеКредиты)";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорВложенногоЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[1].Источник.Запрос.Операторы[0];
	Если ЗначениеЗаполнено(Организация) Тогда
		ОператорЗапроса.Отбор.Добавить("ПерсонализированныеДанные.Организация = &Организация");
		ОператорВложенногоЗапроса.Отбор.Добавить("ЗаявкаНаКредит.Организация = &Организация");
	Иначе
		ОператорЗапроса.Отбор.Добавить("ПерсонализированныеДанные.Организация В(&СписокОрганизаций)");
		ОператорВложенногоЗапроса.Отбор.Добавить("ЗаявкаНаКредит.Организация В(&СписокОрганизаций)");
	КонецЕсли;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераИспользуетеКредиты(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого Данные Из ДанныеБаннера Цикл
		
		Если НЕ Данные.ЗаявкаНаКредит.Пустая() Тогда
			// Создана хотя бы одна заявка на кредит.
			Возврат Ложь;
		КонецЕсли;
		
		Если Данные.ЕстьОборотыПоКредитам Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераИспользуетеКредиты(Баннер, ДанныеБаннера, ТекущаяДата)
	
	НавигационнаяСсылка = Баннер.НавигационнаяСсылка;
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	ЭтоГлавныйБухгалтер = РольДоступна("ДобавлениеИзменениеНастроекБухгалтерии");
	Если НЕ (ЭтоПолноправныйПользователь ИЛИ ЭтоГлавныйБухгалтер) Тогда
		НавигационнаяСсылка = Сайт1СКредит();
	КонецЕсли;
	
	Баннер.ТекстБаннера = ТекстБаннерИспользуетеКредиты(ДанныеБаннера, НавигационнаяСсылка);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннерИспользуетеКредиты(ДанныеБаннера, НавигационнаяСсылка)
	
	ЭлементыЗаголовка = Новый Массив;
	ЭлементыЗаголовка.Добавить(НСтр("ru='Используете кредиты?'"));
	ЭлементыЗаголовка.Добавить(Символы.ПС);
	ЭлементыЗаголовка.Добавить(НСтр("ru='Теперь выбрать кредит можно не выходя из 1С'"));
	
	ТекстЗаголовка = НовыйЗаголовок(ЭлементыЗаголовка);
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Подробнее'"), НавигационнаяСсылка));
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИдентификаторБаннераИспользуетеКредиты()

	Возврат "ИспользуетеКредиты";

КонецФункции

Функция ДоступностьБаннераИспользуетеКредиты()
	
	Возврат НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсИнтеграцииСБанком");
	
КонецФункции

#КонецОбласти

#Область ФинОтчетность

Функция НовыйБаннерФинОтчетность()
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяСервисФинОтчетность();
	Баннер.Идентификатор        = ИдентификаторБаннераФинОтчетность();
	Баннер.ИмяКартинкаЛоготипа  = ИмяКартинкиЛоготипФинОтчетность();
	Баннер.ЦветФонаБаннер       = "ЦветФонаБаннера1СКредит";
	Баннер.НавигационнаяСсылка  = ИдентификаторБаннераФинОтчетность();
	Баннер.ЗависитОтОрганизации = Истина;
	Баннер.ДоступенПоПравам     = ДоступностьБаннераФинОтчетность();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Месяц;
	Баннер.Группа               = "Банки";
	// Параметры для открытия формы списка при переходе по гиперссылке.
	Баннер.ДанныеБаннера.Вставить("Организация");
	Баннер.ДанныеБаннера.Вставить("Банк");
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаФинОтчетность(Запрос, СтруктураБаннеров, НомераТаблиц, Организация)
	
	Идентификатор = ИдентификаторБаннераФинОтчетность();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПерсонализированныеДанные.Организация КАК Организация,
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК КоличествоБанков,
	|	ПерсонализированныеДанные.ДанныеРасшифровки КАК Банк,
	|	ЕСТЬNULL(БанкиУниверсальногоОбмена.Наименование, Банки.Наименование) КАК НаименованиеБанка
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналСтатусовФинОтчетностиВБанки КАК ЖурналСтатусовФинОтчетностиВБанки
	|		ПО ПерсонализированныеДанные.Организация = ЖурналСтатусовФинОтчетностиВБанки.Организация
	|			И (ЖурналСтатусовФинОтчетностиВБанки.ДатаОтправки МЕЖДУ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -6), ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ))
	|			И ВЫБОР
	|				КОГДА ПерсонализированныеДанные.ЗначениеПоказателя = 1
	|					ТОГДА ПерсонализированныеДанные.ДанныеРасшифровки = ЖурналСтатусовФинОтчетностиВБанки.Банк
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО ПерсонализированныеДанные.ДанныеРасшифровки = Банки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанкиУниверсальногоОбмена КАК БанкиУниверсальногоОбмена
	|		ПО ПерсонализированныеДанные.ДанныеРасшифровки = БанкиУниверсальногоОбмена.Ссылка
	|ГДЕ
	|	ПерсонализированныеДанные.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.ФинОтчетность)
	|	И ПерсонализированныеДанные.ЗначениеПоказателя <> 0
	|	И ЖурналСтатусовФинОтчетностиВБанки.Предмет ЕСТЬ NULL";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	Если ЗначениеЗаполнено(Организация) Тогда
		ОператорЗапроса.Отбор.Добавить("ПерсонализированныеДанные.Организация = &Организация");
	Иначе
		ОператорЗапроса.Отбор.Добавить("ПерсонализированныеДанные.Организация В(&СписокОрганизаций)");
	КонецЕсли;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераФинОтчетность(ДанныеБаннера, Баннер)
	
	Возврат ДанныеБаннера.Количество() <> 0;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераФинОтчетность(Баннер, ДанныеБаннера, ТекущаяДата)

	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаДанных = ДанныеБаннера[0];
	
	НавигационнаяСсылка = Баннер.НавигационнаяСсылка;
	Баннер.ТекстБаннера = ТекстБаннерФинОтчетность(СтрокаДанных, НавигационнаяСсылка);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
	// Сохраним параметры для открытия формы списка.
	Баннер.ДанныеБаннера.Организация = СтрокаДанных.Организация;
	Баннер.ДанныеБаннера.Банк        = ?(СтрокаДанных.КоличествоБанков = 1, СтрокаДанных.Банк, Неопределено);
	
КонецПроцедуры

Функция ТекстБаннерФинОтчетность(СтрокаДанных, НавигационнаяСсылка)
	
	Если СтрокаДанных.КоличествоБанков = 1 Тогда
		ТекстЗаголовка = СтрШаблон(НСтр("ru='Регулярно сдаете отчеты в %1?'"), СтрокаДанных.НаименованиеБанка);
	Иначе
		ТекстЗаголовка = НСтр("ru='Регулярно сдаете отчеты в банки?'");
	КонецЕсли;
	
	ТекстЗаголовка = НовыйЗаголовок(ТекстЗаголовка);
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Бесплатный сервис поможет подготовить и отправить документы'")),
		НовыйСтрокаБаннера(Символы.ПС),
		НовыйСтрокаБаннера(НСтр("ru='1С:ФинОтчетность'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИдентификаторБаннераФинОтчетность()

	Возврат "ФинОтчетность";

КонецФункции

Функция ДоступностьБаннераФинОтчетность()
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЖурналСтатусовФинОтчетностиВБанки)
		И НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсИнтеграцииСБанком");
	
КонецФункции

#КонецОбласти

#Область ПереходиНаНКО

Функция НовыйБаннерПереходиНаНКО()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервисПереходиНаНКО();
	Баннер.Идентификатор       = ИдентификаторБаннераПереходиНаНКО();
	Баннер.ДоступенПоПравам    = НЕ ОбщегоНазначения.РазделениеВключено() И НЕ ВариантыПриложений.ЭтоВерсияКОРП();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиПереходиНаНКО();
	Баннер.ЦветФонаБаннер      = "ЦветФонаБаннерПереходиНаНКО";
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераПереходиНаНКО();
	Баннер.ЗависитОтОрганизации = Истина;
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаПереходиНаНКО(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераПереходиНаНКО();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Организации.НаименованиеПолное КАК НаименованиеПолное,
	|	Организации.КодОКОПФ КАК КодОКОПФ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераПереходиНаНКО(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КодОКОПФ = СокрЛП(ДанныеБаннера[0].КодОКОПФ);
	Если ЗначениеЗаполнено(КодОКОПФ) Тогда
		Возврат (СписокКодовОКОПФНКО().Найти(КодОКОПФ) <> Неопределено);
	КонецЕсли;
	
	// Если ОКОПФ не задан, то ищем по полному наименованию организации
	НаименованиеОрганизации = ДанныеБаннера[0].НаименованиеПолное;
	Если ПустаяСтрока(НаименованиеОрганизации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаОПФ Из СписокОПФНКО() Цикл
		Если СтрНачинаетсяС(ВРег(НаименованиеОрганизации), ВРег(СтрокаОПФ)) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СписокКодовОКОПФНКО()
	
	КодыОКОПФНКО = "20100;20101;20102;20103;20107;20108;20109;20110;20111;20112;20113;20114;20115;
	|20120;20121;20200;20201;20202;20210;20211;20217;20600;20601;20603;20604;20605;20606;20607;
	|20608;20609;20610;20611;20612;20613;20614;20615;20616;20617;20618;20619;20620;20700;20701;
	|20716;21100;21200;70400;70401;70402;70403;70404;71400;71500;71600;71601;71602;71610;75000;
	|75100;75101;75103;75104;75200;75300;75400;75403;75404;75500;75502;75505";
	
	Возврат СтрРазделить(КодыОКОПФНКО, ";"+Символы.ПС, Ложь);

КонецФункции

Функция СписокОПФНКО()
	
	Список = Новый Массив;
	Список.Добавить("Потребительский кооператив");
	Список.Добавить("Общественное объединение");
	Список.Добавить("Общественное движение");
	Список.Добавить("Общественная организация");
	Список.Добавить("Общественное учреждение");
	Список.Добавить("Общественный фонд");
	Список.Добавить("Религиозное объединение");
	Список.Добавить("Орган общественной самодеятельности");
	Список.Добавить("Политическая партия");
	Список.Добавить("Профсоюз");
	Список.Добавить("Фонд");
	Список.Добавить("Учреждение");
	Список.Добавить("Государственная корпорация");
	Список.Добавить("Некоммерческое партнерство");
	Список.Добавить("Автономная некоммерческая организация");
	Список.Добавить("Община коренных малочисленных народов");
	Список.Добавить("Казачье общество");
	Список.Добавить("Объединение юридических лиц");
	Список.Добавить("Ассоциация");
	Список.Добавить("Союз");
	Список.Добавить("Территориальное общественное самоуправление");
	Список.Добавить("Товарищество собственников жилья");
	Список.Добавить("Садоводческое некоммерческое товарищество");
	Список.Добавить("Огородническое некоммерческое товарищество");
	Список.Добавить("Дачное некоммерческое товарищество");
	
	Возврат Список;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераПереходиНаНКО(Баннер)
	
	Баннер.ТекстБаннера = ТекстБаннераПереходиНаНКО(Баннер.НавигационнаяСсылка);
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Истина);
	
КонецПроцедуры

Функция ТекстБаннераПереходиНаНКО(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru='Ведете учет НКО?'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Переходите на'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='1С:Бухгалтерия некоммерческой организации'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИдентификаторБаннераПереходиНаНКО()

	Возврат "ПереходиНаНКО";

КонецФункции

#КонецОбласти

#Область МоиЗадачи

Функция НовыйБаннерМоиЗадачи()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервисМоиЗадачи();
	Баннер.Идентификатор       = ИдентификаторБаннераМоиЗадачи();
	Баннер.ДоступенПоПравам    = Истина;
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиМоиЗадачи();
	Баннер.ЦветФонаБаннер      = "ЦветФонаБаннерМоиЗадачи";
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераМоиЗадачи();
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаМоиЗадачи(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераМоиЗадачи();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИСТИНА КАК НужноВыводитьБаннер
	|ИЗ
	|	Константа.ИспользоватьБизнесПроцессыИЗадачи КАК ИспользоватьБизнесПроцессыИЗадачи
	|ГДЕ
	|	ИспользоватьБизнесПроцессыИЗадачи.Значение = ЛОЖЬ";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераМоиЗадачи(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераМоиЗадачи(Баннер)
	
	Баннер.ТекстБаннера = ТекстБаннераМоиЗадачи(Баннер.НавигационнаяСсылка);
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Истина);
	
КонецПроцедуры

Функция ТекстБаннераМоиЗадачи(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru='Запутались в своих задачах?'"));
	
	Если МоиЗадачи.ЕстьПравоВключатьМоиЗадачи() Тогда
		
		ТекстПодзаголовка = 
			НовыйСтрокаБаннера(НСтр("ru='Включите Мои задачи в настройках и ведите их в программе'"), НавигационнаяСсылка);
		
	Иначе
		
		ТекстПодзаголовка = 
			НовыйСтрокаБаннера(НСтр("ru='Попросите администратора включить Мои задачи в настройках'"));
		
	КонецЕсли;
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИмяКартинкиМоиЗадачи()
	
	Возврат "КотСПланшетом";
	
КонецФункции

Функция ИдентификаторБаннераМоиЗадачи()

	Возврат "МоиЗадачи";

КонецФункции

#КонецОбласти

#Область НастройкаФункциональности

Функция НовыйБаннерНастройкаФункциональности()
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяНастройкаФункциональности();
	Баннер.Идентификатор        = ИдентификаторБаннераНастройкаФункциональности();
	Баннер.НавигационнаяСсылка  = ИдентификаторБаннераНастройкаФункциональности();
	Баннер.ДоступенПоПравам     = ДоступностьБаннераНастройкаФункциональности();
	Баннер.ИмяКартинкаЛоготипа  = ИмяКартинкиНастройкаФункциональности();
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.Исключительный       = Истина;
	Баннер.ОбстоятельстваЗакрытия.Периодичность = "";
	
	Возврат Баннер;
	
КонецФункции

Процедура ПолучитьДанныеБаннераНастройкаФункциональности(ДанныеБаннеров)
	
	ПоказыватьБаннер = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ПерсонализированныеПредложенияСервисов_НастройкаФункциональности",
		"ПоказыватьБаннер",
		Неопределено
	);
	
	Если ПоказыватьБаннер = Неопределено Тогда
		ПоказыватьБаннер = Ложь;
		Для каждого ФункциональнаяОпция Из ФункциональныеОпцииБаннераНастройкаФункциональности() Цикл
			Если НЕ ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя) Тогда
				ПоказыватьБаннер = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ПерсонализированныеПредложенияСервисов_НастройкаФункциональности",
			"ПоказыватьБаннер",
			ПоказыватьБаннер
		);
	КонецЕсли;
	
	ДанныеБаннера = Новый Структура;
	ДанныеБаннера.Вставить("ПоказыватьБаннер", ПоказыватьБаннер);
	Если ПоказыватьБаннер Тогда
		ДанныеБаннера.Вставить("ФункциональнаяОпция", ПолучитьФункциональнуюОпциюДляБаннераНастройкаФункциональности());
	КонецЕсли;
	
	ДанныеБаннеров.Вставить(ИдентификаторБаннераНастройкаФункциональности(), ДанныеБаннера);
	
КонецПроцедуры

Функция ВыполняютсяУсловияБаннераНастройкаФункциональности(ДанныеБаннера, Баннер)
	
	Возврат ДанныеБаннера.ПоказыватьБаннер;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераНастройкаФункциональности(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераНастройкаФункциональности(Баннер.НавигационнаяСсылка,
		ДанныеБаннера.ФункциональнаяОпция);
	Баннер.ДанныеБаннера = ДанныеБаннера;
	// После закрытия баннер можно исключать из списка баннеров.
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Истина);
	
КонецПроцедуры

Функция ТекстБаннераНастройкаФункциональности(НавигационнаяСсылка, ФункциональнаяОпция)
	
	ПредставлениеПриложения = НСтр("ru='1С:Бухгалтерию'");
	Если ОбщегоНазначенияБП.ЭтоВитринаБизнесСтарта() Тогда
		Если НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
			ПредставлениеПриложения = НСтр("ru='1С:Нулевку'");
		Иначе
			ПредставлениеПриложения = НСтр("ru='1С:БизнесСтарт'");
		КонецЕсли;
	КонецЕсли;
	
	ПроцентИспользуемойФункциональности = ПолучитьПроцентИспользуемойФункциональностиДляБаннераНастройкаФункиональности();
	
	ТекстЗаголовка = НовыйЗаголовок(СтрШаблон(НСтр("ru = 'Вы используете %1 на %2%%'"),
		ПредставлениеПриложения,
		ПроцентИспользуемойФункциональности));
		
	Если ФункциональнаяОпция = Неопределено Тогда
		Если ПроцентИспользуемойФункциональности = 100 Тогда
			ТекстПодзаголовка = Новый ФорматированнаяСтрока(
				НовыйСтрокаБаннера(НСтр("ru='Включена'")),
				НовыйСтрокаБаннера(" "),
				НовыйСтрокаБаннера(НСтр("ru='полная функциональность'"), НавигационнаяСсылка)
			);
		Иначе
			ТекстПодзаголовка = Новый ФорматированнаяСтрока(
				НовыйСтрокаБаннера(НСтр("ru='Настройте'"), НавигационнаяСсылка),
				НовыйСтрокаБаннера(" "),
				НовыйСтрокаБаннера(НСтр("ru='нужную функциональность'"))
			);
		КонецЕсли;
	Иначе
		ТекстПодзаголовка = Новый ФорматированнаяСтрока(
			НовыйСтрокаБаннера(НСтр("ru='Настройте'"), НавигационнаяСсылка),
			НовыйСтрокаБаннера(" "),
			НовыйСтрокаБаннера(СтрШаблон(НСтр("ru='нужную функциональность, например: %1'"),
				Нрег(ФункциональнаяОпция.Представление)))
		);
	КонецЕсли;
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИдентификаторБаннераНастройкаФункциональности()

	Возврат "НастройкаФункциональности";

КонецФункции

Функция ДоступностьБаннераНастройкаФункциональности()
	
	Возврат НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком()
		И ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности()
		И Пользователи.ЭтоПолноправныйПользователь(,, Ложь);
	
КонецФункции

Функция ИмяКартинкиНастройкаФункциональности()
	
	Возврат "КотВажноеСообщение";
	
КонецФункции

Функция ПолучитьПроцентИспользуемойФункциональностиДляБаннераНастройкаФункиональности()
	
	ОписаниеФункциональности = Обработки.ФункциональностьПрограммы.ОписаниеФункциональности();
	СписокВсейФункциональности = Обработки.ФункциональностьПрограммы.СписокВсейФункциональности(ОписаниеФункциональности);
	ВключеннаяФункциональность = Обработки.ФункциональностьПрограммы.ВключеннаяФункциональность(СписокВсейФункциональности);
	
	ОсновнаяФункциональность = 10; // Основная функциональность, которая всегда включена, принимается за 10%.
	НастраиваемаяФункциональность = 90; // Функциональность, которой может управлять пользователь, принимается за 90%.
	ДоляВключеннойФункциональности = ВключеннаяФункциональность.Количество() / СписокВсейФункциональности.Количество();
	Возврат ОсновнаяФункциональность + Окр(НастраиваемаяФункциональность * ДоляВключеннойФункциональности);
	
КонецФункции

Функция ПолучитьФункциональнуюОпциюДляБаннераНастройкаФункциональности()
	
	ВсеФункциональныеОпции = ФункциональныеОпцииБаннераНастройкаФункциональности();
	
	МассивФункциональныхОпций = Новый Массив;
	Для каждого Опция Из ВсеФункциональныеОпции Цикл
		МассивФункциональныхОпций.Добавить(Опция.Имя);
	КонецЦикла;
	
	ВключенныеФункциональныеОпции = Обработки.ФункциональностьПрограммы.ВключеннаяФункциональность(МассивФункциональныхОпций);
	
	ФункциональныеОпции = Новый Массив;
	Для каждого Опция Из ВсеФункциональныеОпции Цикл
		Если ВключенныеФункциональныеОпции.Найти(Опция.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ФункциональныеОпции.Добавить(Опция);
	КонецЦикла;
	
	Если ФункциональныеОпции.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексФункциональнойОпции = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ПерсонализированныеПредложенияСервисов_НастройкаФункциональности",
		"ИндексФункциональнойОпции",
		0
	);
	
	Если ТипЗнч(ИндексФункциональнойОпции) <> Тип("Число") Тогда
		ИндексФункциональнойОпции = 0;
	КонецЕсли;
	
	МаксимальныйИндекс = ФункциональныеОпции.Количество() - 1;
	
	ИндексФункциональнойОпции = Мин(ИндексФункциональнойОпции, МаксимальныйИндекс);
	
	ИндексСледующейФункциональнойОпции = ИндексФункциональнойОпции + 1;
	Если ИндексСледующейФункциональнойОпции > МаксимальныйИндекс Тогда
		ИндексСледующейФункциональнойОпции = 0;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ПерсонализированныеПредложенияСервисов_НастройкаФункциональности",
		"ИндексФункциональнойОпции",
		ИндексСледующейФункциональнойОпции
	);
	
	ФункциональнаяОпция = ФункциональныеОпции[ИндексФункциональнойОпции];
	
	Возврат ФункциональнаяОпция;
	
КонецФункции

Функция ФункциональныеОпцииБаннераНастройкаФункциональности()
	
	ФункциональныеОпции = Новый Массив;
	
	Опция = Новый Структура;
	Опция.Вставить("Имя", "ИспользоватьДокументыРеализации");
	Опция.Вставить("Представление", НСтр("ru='счета, акты, накладные для покупателей'"));
	ФункциональныеОпции.Добавить(Опция);
	
	Опция = Новый Структура;
	Опция.Вставить("Имя", "ВестиУчетПоДоговорам");
	Опция.Вставить("Представление", НСтр("ru='учет по договорам'"));
	ФункциональныеОпции.Добавить(Опция);
	
	Возврат ФункциональныеОпции;
	
КонецФункции

#КонецОбласти

#Область ЕНВДОтменяется

Функция НовыйБаннерЕНВДОтменяется()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяЕНВДОтменяется();
	Баннер.Идентификатор       = ИдентификаторБаннераЕНВДОтменяется();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиЕНВДОтменяется();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераЕНВДОтменяется();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераЕНВДОтменяется();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.Исключительный       = "Истина";
	
	Возврат Баннер;
	
КонецФункции

Функция ИдентификаторБаннераЕНВДОтменяется()
	
	Возврат "ЕНВДОтменяется";
	
КонецФункции

Процедура ПолучитьДанныеБаннераЕНВДОтменяется(ДанныеБаннеров)
	
	ДанныеБаннера = Новый Структура;
	ДанныеБаннера.Вставить("ДатаНачалаПоказаБаннера", ДатаНачалаПоказаБаннераЕНВДОтменяется());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", УчетЕНВДКлиентСервер.ДатаОтменыЕНВД());
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложенияСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&Период, ) КАК НастройкиСистемыНалогообложенияСрезПоследних
	|ГДЕ
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикЕНВД";
	Результат = Запрос.Выполнить();
	
	
	ДанныеБаннера.Вставить("ЕстьПлательщикиЕНВД", Не Результат.Пустой());
	
	ДанныеБаннеров.Вставить(ИдентификаторБаннераЕНВДОтменяется(), ДанныеБаннера);
	
КонецПроцедуры

Функция ВыполняютсяУсловияБаннераЕНВДОтменяется(ДанныеБаннера, Баннер)
	
	Возврат ДанныеБаннера.ЕстьПлательщикиЕНВД;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераЕНВДОтменяется(Баннер, ДанныеБаннера)
	
	Баннер.ТекстБаннера = ТекстБаннераЕНВДОтменяется(Баннер.НавигационнаяСсылка);
	// После закрытия баннер можно исключать из списка баннеров.
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Истина);
	
КонецПроцедуры

Функция ТекстБаннераЕНВДОтменяется(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru = 'ЕНВД отменяется с 2021 года'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Подробная информация'"), НавигационнаяСсылка));
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ДоступностьБаннераЕНВДОтменяется()
	
	Возврат Не ПолучитьФункциональнуюОпцию("ИнтерфейсИнтеграцииСБанком")
		И ОбщегоНазначенияБП.ТекущаяДатаНаСервере() < УчетЕНВДКлиентСервер.ДатаОтменыЕНВД();
	
КонецФункции

Функция ИмяКартинкиЕНВДОтменяется()
	
	Возврат "КотВажноеСообщение";
	
КонецФункции

Функция ДатаНачалаПоказаБаннераЕНВДОтменяется()

	ИмяНастройки = ВРег("ДатаНачалаПоказаБаннераЕНВДОтменяется");
	ДатаНачалаПоказаБаннера = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяНастройки, Неопределено);
	Если ДатаНачалаПоказаБаннера = Неопределено Тогда
		ДатаНачалаПоказаБаннера = НачалоДня(ТекущаяДатаСеанса());
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки, Неопределено, ДатаНачалаПоказаБаннера);
	КонецЕсли;
	
	Возврат ДатаНачалаПоказаБаннера;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСоСпискомБаннеров

Функция ОбщийСписокБаннеров(Размещение)
	
	СписокБаннеров = НовыйТаблицаСписокБаннеров();
	
	Если Размещение = ИмяРазмещенияОбщее()
		Или Размещение = ИмяРазмещенияСписокЗадач() Тогда
		// Исключительные баннеры. Если выполняются условия показа для одного из них,
		// остальные баннеры не показываются.
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПоддержкаСервиса()); // должен быть первым
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЕНВДОтменяется()); // у плательщиков ЕНВД всегда должен быть первым
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПлатформаСамозанятые()); // у самозанятых всегда должен быть первым
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерАнтикризисОсвобождениеОтНалогов());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерАнтикризис());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерСайтАнтикризис());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерНастройкаФункциональности());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерНастройкаВидимостиСчетовУчета(Размещение));
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерТестовыйТариф());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерФинОтчетность());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПереходиНаНКО());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПроверкаОплатыНалогов(Размещение));
		
		Если Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПроблемыСНалоговымиПлатежами());
		КонецЕсли;
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерНадежностьБанков());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерСтороннийСертификат());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЧисленностьСотрудников());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерОтчетнаяКампания());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерНДСКВычетуКонтрагент());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерНДСКВычетуСПАРК());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерКрупнейшийДебитор());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерКоличествоКонтрагентов());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерКрупнейшийДебиторСПАРК());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерОбщееКоличествоДокументов());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИнтеграцияСоSmartway());
		
		Если Размещение = ИмяРазмещенияОбщее() Тогда
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерМоиЗадачи());
		КонецЕсли;
		
	ИначеЕсли Размещение = ИмяРазмещенияДокументы() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерНастройкаФункциональности());
		
	ИначеЕсли Размещение = ИмяРазмещенияПоступление() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерНастройкаВидимостиСчетовУчета(Размещение));
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерКоличествоПоступлений());
		
	ИначеЕсли Размещение = ИмяРазмещенияРеализация() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерНастройкаВидимостиСчетовУчета(Размещение));
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерКоличествоРеализаций());

	ИначеЕсли Размещение = ИмяРазмещенияНалогиИОтчеты() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПлатформаСамозанятые());

	ИначеЕсли Размещение = ИмяРазмещенияБанковскиеВыписки() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПлатформаСамозанятые());
		Если ПолучитьФункциональнуюОпцию("ИнтерфейсТакси") Тогда
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерНастройкаВидимостиСчетовУчета(Размещение));
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПроблемыСНалоговымиПлатежами());
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПроверкаОплатыНалогов(Размещение));
		КонецЕсли;
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерФинОтчетность());
		
	ИначеЕсли Размещение = ИмяРазмещенияДеньги() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПлатформаСамозанятые());
		Если ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерНастройкаФункциональности());
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерНастройкаВидимостиСчетовУчета(Размещение));
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПроблемыСНалоговымиПлатежами());
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПроверкаОплатыНалогов(Размещение));
		КонецЕсли;
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерФинОтчетность());
		
	ИначеЕсли Размещение = ИмяРазмещенияКассовыеДокументы() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПлатформаСамозанятые());
		
	ИначеЕсли Размещение = ИмяРазмещенияМониторНалогов() Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЕНВДОтменяется());
		КонецЕсли;
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПроверкаОплатыНалогов(Размещение));
		Если Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПроблемыСНалоговымиПлатежами());
		КонецЕсли;
		
	ИначеЕсли Размещение = ИмяРазмещенияТребованиеНакладная() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерНастройкаВидимостиСчетовУчета(Размещение));
		
	ИначеЕсли Размещение = ИмяРазмещенияМониторОсновныхПоказателей() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИнтеграцияСоSmartway());
		
	ИначеЕсли Размещение = ИмяРазмещенияПродажиПоКонтрагентам() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИнтеграцияСоSmartway());
		
	ИначеЕсли Размещение = ИмяРазмещенияАвансовыеОтчеты() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИнтеграцияСоSmartway());
		
	ИначеЕсли Размещение = ИмяРазмещенияАнализДвиженийДенежныхСредств() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		
	ИначеЕсли Размещение = ИмяРазмещенияОстаткиДенежныхСредств() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		
	ИначеЕсли Размещение = ИмяРазмещенияПоступленияДенежныхСредств() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		
	ИначеЕсли Размещение = ИмяРазмещенияРасходыДенежныхСредств() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		
	ИначеЕсли Размещение = ИмяРазмещенияДоходыРасходы() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		
	ИначеЕсли Размещение = ИмяРазмещенияОборотныеСредства() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		
	ИначеЕсли Размещение = ИмяРазмещенияСравнениеПродаж() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		
	ИначеЕсли Размещение = ИмяРазмещенияАнализНеоплаченныхСчетовПоставщиков() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		
	ИначеЕсли Размещение = ИмяРазмещенияДинамикаЗадолженностиПоставщикам() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		
	ИначеЕсли Размещение = ИмяРазмещенияЗадолженностьПоставщикам() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		
	ИначеЕсли Размещение = ИмяРазмещенияЗадолженностьПоставщикамПоСрокамДолга() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПредодобренныйКредитВСбербанке());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерЗаявкаНаКредит());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерИспользуетеКредиты());
		
	ИначеЕсли Размещение = ИмяРазмещенияИнтерфейсБанка() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПроверкаОплатыНалогов(Размещение));
		
	ИначеЕсли Размещение = ИмяРазмещенияПечатьДокументов() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПечатьАртикулов(Размещение));
		
	ИначеЕсли Размещение = ИмяРазмещенияНастройкиУчетаЗарплаты() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерАнтикризисЗарплата());
		
	ИначеЕсли Размещение = ИмяРазмещенияНастройкиКадровыеДокументыЭТК() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерКадровыеДокументыЭТК());
		
	ИначеЕсли Размещение = ИмяРазмещенияНачислениеЗарплаты() Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИнтерфейсТакси") Тогда
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерАнтикризисПересчитатьВзносы());
		КонецЕсли;
		
	ИначеЕсли Размещение = ИмяРазмещенияНачислениеЗарплатыФормаСписка() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерАнтикризисПересчитатьВзносы());
		
	ИначеЕсли Размещение = ИмяРазмещенияПростойИнтерфейсРазделСотрудники() Тогда
		
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерАнтикризисПересчитатьВзносы());
		
	КонецЕсли;
	
	Возврат СписокБаннеров;
	
КонецФункции

Функция БаннерыПользователя(Организация, Размещение, ТекущаяДата)
	
	СписокБаннеров             = ОбщийСписокБаннеров(Размещение);
	СписокБаннеровПользователя = НовыйТаблицаСписокБаннеров();
	
	// Если организация не указана, исключим из списка баннеры, зависящие от организации.
	ИсключитьБаннерыПоОрганизации(СписокБаннеров, Организация);
	
	// Исключим из списка баннеры, по которым уже подключены сервисы.
	ИсключитьБаннерыПоПодключеннымСервисам(СписокБаннеров, Организация, ТекущаяДата);
	
	// Дополним список баннеров обстоятельствами закрытия баннера.
	ДополнитьБаннерыОбстоятельствамиЗакрытия(СписокБаннеров, Организация);
	
	Для Каждого СтрокаСписка Из СписокБаннеров Цикл
		
		ОбстоятельстваЗакрытия = СтрокаСписка.Баннер.ОбстоятельстваЗакрытия;
		
		// Пропускаем баннеры, которые уже показывали в этом периоде.
		Если ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.День Тогда
			Если НачалоДня(ОбстоятельстваЗакрытия.ДатаЗакрытия) = НачалоДня(ТекущаяДата) Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Месяц Тогда
			Если НачалоМесяца(ОбстоятельстваЗакрытия.ДатаЗакрытия) = НачалоМесяца(ТекущаяДата) Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Квартал Тогда
			Если НачалоКвартала(ОбстоятельстваЗакрытия.ДатаЗакрытия) = НачалоКвартала(ТекущаяДата) Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ОбстоятельстваЗакрытия.Свойство("ИсключитьБаннер") И ОбстоятельстваЗакрытия.ИсключитьБаннер Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСпискаПользователя = СписокБаннеровПользователя.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСпискаПользователя, СтрокаСписка);
		
	КонецЦикла;
	
	// Отсортируем баннеры по приоритету.
	СписокБаннеровПользователя.Сортировать("Порядок", Новый СравнениеЗначений);
	
	Возврат СписокБаннеровПользователя;
	
КонецФункции

Процедура ИсключитьБаннерыПоПодключеннымСервисам(СписокБаннеров, Организация, ТекущаяДата)
	
	// Обновим данные по которым будем получать информацию.
	Разделы = РазделыПерсонализированныхДанныхПодключенныеСервисы(СписокБаннеров);
	ИнтервалОбновления = 60 * 60 * 24 * 7; // обновляем данные с интервалом 1 неделя.
	РегистрыСведений.ПерсонализированныеДанные.ОбновитьДанные(
		Организация,
		ТекущаяДата,
		ИнтервалОбновления,
		Разделы);
		
	УстановитьПривилегированныйРежим(Истина);
	ПодключенныеСервисы = ПодключенныеСервисы(Организация, Разделы);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Если подключенных сервисов нет, то дальше ничего не делаем.
	Если ПодключенныеСервисы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсключенныеСтроки = Новый Массив;
	Для Каждого ИмяСервиса Из ПодключенныеСервисы Цикл
		Отбор = Новый Структура("ИмяСервиса", ИмяСервиса);
		СтрокиБаннеров = СписокБаннеров.НайтиСтроки(Отбор);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключенныеСтроки, СтрокиБаннеров, Истина);
	КонецЦикла;
	
	УдалитьСтрокиИзТаблицы(СписокБаннеров, ИсключенныеСтроки);
	
КонецПроцедуры

Процедура ДополнитьБаннерыОбстоятельствамиЗакрытия(СписокБаннеров, Организация)
	
	ЗакрытыеПользователемБаннеры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		НовыйЗакрытыеПользователемБаннеры());
	
	Для Каждого КлючИЗначение Из ЗакрытыеПользователемБаннеры.БаннерыБезОрганизации Цикл
		Для Каждого СтрокаСписка Из СписокБаннеров.НайтиСтроки(Новый Структура("ИдентификаторБаннера", КлючИЗначение.Ключ)) Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
				СтрокаСписка.Баннер.ОбстоятельстваЗакрытия,
				КлючИЗначение.Значение,
				Истина);
		КонецЦикла;
	КонецЦикла;
	
	БаннерыПоОрганизации = ЗакрытыеПользователемБаннеры.БаннерыПоОрганизации[Организация];
	Если БаннерыПоОрганизации <> Неопределено Тогда
		Для Каждого КлючИЗначение Из БаннерыПоОрганизации Цикл
			Для Каждого СтрокаСписка Из СписокБаннеров.НайтиСтроки(Новый Структура("ИдентификаторБаннера", КлючИЗначение.Ключ)) Цикл
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
					СтрокаСписка.Баннер.ОбстоятельстваЗакрытия,
					КлючИЗначение.Значение,
					Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключитьБаннерыПоОрганизации(СписокБаннеров, Организация)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ИсключенныеСтроки = Новый Массив;
	Для каждого СтрокаБаннера Из СписокБаннеров Цикл
		Если СтрокаБаннера.Баннер.ЗависитОтОрганизации Тогда
			ИсключенныеСтроки.Добавить(СтрокаБаннера);
		КонецЕсли;
	КонецЦикла;
	УдалитьСтрокиИзТаблицы(СписокБаннеров, ИсключенныеСтроки);

КонецПроцедуры

#КонецОбласти

#Область ПерсонализированныеДанные

// Вызывает обновление записей регистра сведений "ПерсонализированныеДанные" фоновым заданием.
// При обновлении учитывается актуальность данных регистра сведений
// Параметры:
//   Параметры - Структура - Структура с параметрами переданная в фоновое задание
//		*Организация - СправочникСсылка.Организации - организация по которой нужно обновить персонализированные данные.
//									Если не заполнено данные будут обновлены по всем доступным организациям
//	ВременноеХранилищеРезультата - Строка - путь к временному хранилищу (не используется в рамках данной процедуры)	
Процедура ОбновитьПерсонализированныеДанныеВФоне(Параметры, ВременноеХранилищеРезультата) Экспорт

	ОбновитьПерсонализированныеДанные(Параметры.Организация, Истина, Параметры.РазделыПерсонализированныхДанных);

КонецПроцедуры

// Вызывает перезапись данных регистра сведений "ПерсонализированныеДанные" фоновым заданием
// Данные регистра сведений перезаписываются без учета актуальности.
// Параметры:
//   Параметры - Структура - Структура с параметрами переданная в фоновое задание
//		*Организация - СправочникСсылка.Организации - организация по которой нужно обновить персонализированные данные.
//									Если не заполнено данные будут обновлены по всем доступным организациям
//	ВременноеХранилищеРезультата - Строка - путь к временному хранилищу (не используется в рамках данной процедуры).
//
Процедура ПерезаписатьПерсонализированныеДанныеВФоне(Параметры, ВременноеХранилищеРезультата) Экспорт

	ОбновитьПерсонализированныеДанные(Параметры.Организация, Ложь, Параметры.РазделыПерсонализированныхДанных);

КонецПроцедуры	

// Вызывает первоначальное заполнение регистра сведений "ПерсонализированныеДанные" по всем организациям
// Запускается при обновлении версии конфиурации и при переходе с предыдущей версии.
Процедура ЗаполнитьПерсонализированныеДанныеРуководителя() Экспорт
	
	ОбновитьПерсонализированныеДанныеПоВсемОрганизациям(ТекущаяДатаСеанса());
	
КонецПроцедуры

// Создает пустую таблицу контейнер для персонализированных данных
// Возвращаемое значение:
//	ТаблицаЗначений - Пустая таблица персонализированных данных.
//
Функция ТаблицаДанных() Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ПерсонализированныеДанные;
	
	НоваяТаблицаДанных = Новый ТаблицаЗначений;
	
	НоваяТаблицаДанных.Колонки.Добавить("ЗначениеПоказателя", МетаданныеРегистра.Ресурсы.ЗначениеПоказателя.Тип);
	НоваяТаблицаДанных.Колонки.Добавить("Порядок",            Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1)));
	НоваяТаблицаДанных.Колонки.Добавить("ДанныеРасшифровки",  МетаданныеРегистра.Ресурсы.ДанныеРасшифровки.Тип);
	
	Возврат НоваяТаблицаДанных;
	
КонецФункции

// Обновляет данные регистра сведений "ПерсонализированныеДанные".
// Параметры:
//   Параметры - Структура - Структура с параметрами
//		*Организация - СправочникСсылка.Организации - организация по которой нужно обновить персонализированные данные.
//									Если не заполнено данные будут обновлены по всем доступным организациям
//	УчитыватьАктуальностьДанных - булево - Истина - перед обновлением проверить что данные неактуальны, Ложь - не проверять.
//
Процедура ОбновитьПерсонализированныеДанные(Организация, УчитыватьАктуальностьДанных, РазделыПерсонализированныхДанных)
	
	Дата = ТекущаяДатаСеанса();
	
	ИнтервалОбновления = 0;
	Если УчитыватьАктуальностьДанных Тогда
		ИнтервалОбновления = 600;
	КонецЕсли;
	
	// Если организация не заполнена то данные нужно обновить по всем
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
	
		Если СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
			РегистрыСведений.ПерсонализированныеДанные.ОбновитьДанные(Организация, Дата, ИнтервалОбновления, РазделыПерсонализированныхДанных);
		КонецЕсли;
	Иначе
		ОбновитьПерсонализированныеДанныеПоВсемОрганизациям(Дата, ИнтервалОбновления, РазделыПерсонализированныхДанных);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет данные регистра сведений "ПерсонализированныеДанные" по всем организациям
// Параметры:
//  Дата - Дата - Дата на которую нужно получить данные для записи в регистр
//	ИнтервалОбновления - Число - Период в секундах в течении которого данные считаются актуальными
//
Процедура ОбновитьПерсонализированныеДанныеПоВсемОрганизациям(Дата, ИнтервалОбновления = 0, РазделыПерсонализированныхДанных = Неопределено)
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
	
	Для Каждого Организация Из ДоступныеОрганизации Цикл
		
		РегистрыСведений.ПерсонализированныеДанные.ОбновитьДанные(Организация, Дата, ИнтервалОбновления, РазделыПерсонализированныхДанных);
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазделыПерсонализированныхДанных(СписокБаннеров)
	
	МассивРазделов = Новый Массив;
	
	Для Каждого ИдентификаторБаннера Из СписокБаннеров.ВыгрузитьКолонку("ИдентификаторБаннера") Цикл
		
		Если ИдентификаторБаннера = ИдентификаторБаннераНДСКВычетуКонтрагент()
			ИЛИ ИдентификаторБаннера = ИдентификаторБаннераНДСКВычетуСПАРК() Тогда
			
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.НДСКВычету);
			
		ИначеЕсли ИдентификаторБаннера = ИдентификаторБаннераОбщееКоличествоДокументов() Тогда
			
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.КоличествоПоступлений);
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.КоличествоРеализаций);
			
		ИначеЕсли ИдентификаторБаннера = ИдентификаторБаннераЧисленностьСотрудников() Тогда
			
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.СреднесписочнаяЧисленность);
			
		ИначеЕсли ИдентификаторБаннера = ИдентификаторБаннераКоличествоКонтрагентов() Тогда
			
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.КоличествоКонтрагентов);
			
		ИначеЕсли ИдентификаторБаннера = ИдентификаторБаннераПроверкаОплатыНалогов() Тогда
			
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.СервисПроверкаОплатыНалогов);

		ИначеЕсли ИдентификаторБаннера = ИдентификаторБаннераИнтеграцияСоSmartway() Тогда
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.ИнтеграцияСоSmartway);

		ИначеЕсли ИдентификаторБаннера = ИдентификаторБаннераЗаявкаНаКредит() Тогда
			
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.ЗаявкаНаКредит);
			
		ИначеЕсли ИдентификаторБаннера = ИдентификаторБаннераИспользуетеКредиты() Тогда
			
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.ИспользуетеКредиты);

		ИначеЕсли ИдентификаторБаннера = ИдентификаторБаннераФинОтчетность() Тогда
			
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.ФинОтчетность);
			
		ИначеЕсли ИдентификаторБаннера = ИдентификаторБаннераПечатьАртикулов() Тогда
		
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.НастройкаПечатиАртикулов);

		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивРазделов);
	
КонецФункции

Функция РазделыПерсонализированныхДанныхПодключенныеСервисы(СписокБаннеров)
	
	МассивРазделов = Новый Массив;
	
	МассивСервисов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокБаннеров.ВыгрузитьКолонку("ИмяСервиса"));
	Для Каждого ИмяСервиса Из МассивСервисов Цикл
		Если ИмяСервиса = ИмяСервис1СКонтрагент() Тогда
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.Сервис1СКонтрагентПодключен);
			
		ИначеЕсли ИмяСервиса = ИмяСервис1СОтчетность() Тогда
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.Сервис1СОтчетностьПодключен);
			
		ИначеЕсли ИмяСервиса = ИмяСервис1СПАРК() Тогда
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.Сервис1СПАРКПодключен);
			
		ИначеЕсли ИмяСервиса = ИмяСервис1СЭДО() Тогда
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.Сервис1СЭДОПодключен);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРазделов;
	
КонецФункции

// Формирует таблицу данных для персонализированных данных по организации на дату
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	ДатаПолученияДанных - Дата - дата на которую нужны остатки
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для Прсонализированных данных.
//
Функция ПолучитьНДСКВычетуДляПерсонализированныхДанных(Организация, ДатаПолученияДанных) Экспорт
	
	ТаблицаДанных = ТаблицаДанных();
	
	Если НЕ УчетнаяПолитика.ПлательщикНДС(Организация, ДатаПолученияДанных) Тогда
		Возврат ТаблицаДанных;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("НачалоКвартала", НачалоКвартала(ДатаПолученияДанных));
	Запрос.УстановитьПараметр("КонецКвартала",  Новый Граница(КонецДня(ДатаПолученияДанных), ВидГраницы.Включая));
	ВидыЦенностейАвансы = Новый Массив;
	ВидыЦенностейАвансы.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейАвансы.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностейАвансы.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностейАвансы.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейАвансы", ВидыЦенностейАвансы);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДС.Контрагент КАК Контрагент,
	|	СУММА(НДС.ЗначениеПоказателя) КАК ЗначениеПоказателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСПокупки.Поставщик КАК Контрагент,
	|		НДСПокупки.НДСОборот КАК ЗначениеПоказателя
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|				&НачалоКвартала,
	|				&КонецКвартала,
	|				,
	|				Организация = &Организация
	|					И НЕ ВидЦенности В (&ВидыЦенностейАвансы)) КАК НДСПокупки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСПредъявленный.Поставщик,
	|		НДСПредъявленный.НДСОборот
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный.Обороты(
	|				&НачалоКвартала,
	|				&КонецКвартала,
	|				,
	|				Организация = &Организация
	|					И НЕ ВидЦенности В (&ВидыЦенностейАвансы)) КАК НДСПредъявленный) КАК НДС
	|
	|СГРУППИРОВАТЬ ПО
	|	НДС.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеПоказателя УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	УстановитьПривилегированныйРежим(Ложь);
	
	Для ИндексСтроки = 0 По Мин(1, Результат.Количество() - 1) Цикл
		
		СтрокаРезультата = Результат[ИндексСтроки];
		Контрагент = СтрокаРезультата.Контрагент;
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.ДанныеРасшифровки  = Контрагент;
		СтрокаДанных.Порядок            = 1;
		СтрокаДанных.ЗначениеПоказателя = СтрокаРезультата.ЗначениеПоказателя;
		
	КонецЦикла;
	
	// Добавляем итог по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Порядок            = 0;
	СтрокаДанных.ЗначениеПоказателя = Результат.Итог("ЗначениеПоказателя");
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Формирует таблицу данных для персонализированных данных по организации на дату
// Параметры:
//		ДатаПолученияДанных - Дата - дата на которую нужны остатки
// Возвращаемое значение:
//		ТаблицаЗначений - Таблица с данными для Персонализированных данных
//
Функция ПолучитьКоличествоКонтрагентовДляПерсонализированныхДанных(ДатаПолученияДанных) Экспорт
	
	ТаблицаДанных = ТаблицаДанных();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоКвартала", НачалоКвартала(ДатаПолученияДанных));
	Запрос.УстановитьПараметр("КонецКвартала",  КонецДня(ДатаПолученияДанных));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) КАК ЗначениеПоказателя
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ДатаСоздания >= &НачалоКвартала
	|	И Контрагенты.ДатаСоздания <= &КонецКвартала
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Добавляем информацию по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Порядок            = 0;
	СтрокаДанных.ЗначениеПоказателя = Результат.Итог("ЗначениеПоказателя");
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Возвращает Истина, если сервис 1С-Отчетность подключен.
// Параметры:
//		Организация - Справочник.Организация - Организация, для которой проверяется сервис.
// Возвращаемое значение:
//		Булево
//
Функция Сервис1СОтчетностьПодключен(Организация) Экспорт
	
	ТаблицаДанных = ТаблицаДанных();
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Порядок = 0;
	СервисПодключен = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Организация,,Истина);
	СтрокаДанных.ЗначениеПоказателя = ?(СервисПодключен, 1, 0);
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Возвращает Истина, если сервис 1С:ЭДО подключен.
// Параметры:
//		Организация - Справочник.Организация - Организация, для которой проверяется сервис.
// Возвращаемое значение:
//		Булево
//
Функция Сервис1СЭДОПодключен(Организация) Экспорт
	
	ТаблицаДанных = ТаблицаДанных();
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Порядок = 0;
	СервисПодключен = ОбменСКонтрагентами.ОрганизацияПодключена(Организация);
	СтрокаДанных.ЗначениеПоказателя = ?(СервисПодключен, 1, 0);
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Возвращает Истина, если сервис 1С:Контрагент подключен.
//
// Возвращаемое значение:
//		Булево
//
Функция Сервис1СКонтрагентПодключен() Экспорт
	
	ТаблицаДанных = ТаблицаДанных();
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Порядок = 0;
	СтрокаДанных.ЗначениеПоказателя = ?(РаботаСКонтрагентамиБП.Сервис1СКонтрагентПодключен(), 1, 0);
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Возвращает Истина, если сервис 1С:Контрагент подключен.
//
// Возвращаемое значение:
//		Булево
//
Функция Сервис1СПАРКПодключен() Экспорт
	
	ТаблицаДанных = ТаблицаДанных();
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Порядок = 0;
	
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		СервисПодключен = ИнтернетПоддержкаПользователей.УслугаПодключена(
			СПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска());
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ВидОшибки = СПАРКРискиМониторингСобытий.ОбновитьСобытияМониторинга();
		СервисПодключен = НЕ ЗначениеЗаполнено(ВидОшибки);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	СтрокаДанных.ЗначениеПоказателя = ?(СервисПодключен, 1, 0);
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Формирует таблицу данных для персонализированных данных по организации на дату
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	ДатаПолученияДанных - Дата - дата на которую нужны остатки
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для персонализированных данных
//
Функция СреднесписочнаяЧисленностьОрганизацииДляПерсонализированныеДанные(Организация, ДатаПолученияДанных) Экспорт
	
	ТаблицаДанных = ПерсонализированныеПредложенияСервисов.ТаблицаДанных();
	
	СведенияОЧисленностиРаботников = КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(
		Организация,
		НачалоГода(ДатаПолученияДанных),
		КонецДня(ДатаПолученияДанных));
	ТекущаяЧисленностьРаботников = СведенияОЧисленностиРаботников.ЧисленностьРаботников;
	
	// Добавляем итог по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Порядок            = 0;
	СтрокаДанных.ЗначениеПоказателя = ТекущаяЧисленностьРаботников;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Устанавливает значение параметра сеанса РазрешенныеПользователюРазделыПерсонализированныхДанных,
// который используется в тексте ограничения доступа к персонализированных данным.
//
// Подробнее см. СтандартныеПодсистемыСервер.УстановкаПараметровСеанса()
//
Процедура УстановитьРазрешенныеПользователюРазделыПерсонализированныхДанных(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "РазрешенныеПользователюРазделыПерсонализированныхДанных" Тогда
		
		ПараметрыСеанса.РазрешенныеПользователюРазделыПерсонализированныхДанных = 
			Перечисления.РазделыПерсонализированныхДанных.РазрешенныеПользователюРазделыПерсонализированныхДанных();
		УстановленныеПараметры.Добавить(ИмяПараметра);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодключенныеСервисы(Организация, Разделы)
	
	ПодключенныеСервисы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Разделы", Разделы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПерсонализированныеДанные.Раздел,
	|	ПерсонализированныеДанные.ЗначениеПоказателя
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Организация = &Организация
	|	И ПерсонализированныеДанные.Раздел В(&Разделы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЗначениеПоказателя = 1 Тогда
			Если Выборка.Раздел = Перечисления.РазделыПерсонализированныхДанных.Сервис1СКонтрагентПодключен Тогда
				ПодключенныеСервисы.Добавить(ИмяСервис1СКонтрагент());
			ИначеЕсли Выборка.Раздел = Перечисления.РазделыПерсонализированныхДанных.Сервис1СОтчетностьПодключен Тогда
				ПодключенныеСервисы.Добавить(ИмяСервис1СОтчетность());
			ИначеЕсли Выборка.Раздел = Перечисления.РазделыПерсонализированныхДанных.Сервис1СПАРКПодключен Тогда
				ПодключенныеСервисы.Добавить(ИмяСервис1СПАРК());
			ИначеЕсли Выборка.Раздел = Перечисления.РазделыПерсонализированныхДанных.Сервис1СЭДОПодключен Тогда
				ПодключенныеСервисы.Добавить(ИмяСервис1СЭДО());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенныеСервисы;
	
КонецФункции

Процедура ЗаполнитьСреднесписочнаяЧисленностьПредыдущая() Экспорт
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
	Раздел = Перечисления.РазделыПерсонализированныхДанных.СреднесписочнаяЧисленностьПредыдущая;
	ДатаПолученияДанных = ТекущаяДатаСеанса();
	
	Для Каждого Организация Из ДоступныеОрганизации Цикл
		
		СведенияОЧисленностиРаботников = КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(
			Организация,
			НачалоГода(ДатаПолученияДанных),
			КонецДня(ДатаПолученияДанных));
		ТекущаяЧисленностьРаботников = СведенияОЧисленностиРаботников.ЧисленностьРаботников;
		
		НаборЗаписей = РегистрыСведений.ПерсонализированныеДанные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Отбор.Раздел.Установить(Раздел);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация        = Организация;
		Запись.Раздел             = Раздел;
		Запись.ЗначениеПоказателя = ТекущаяЧисленностьРаботников;
		Запись.НомерСтрокиРаздела = 1;
		Запись.ДатаОбновления     = ДатаПолученияДанных;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПолучениеСтороннегоСертификата

// Возвращает признак нужно ли искать сторонний сертификат отчетности.
// Параметры:
//		Организация - СправочникСсылка.Организации - Организация, по которой выполняется поиск.
//
Функция НужноИскатьСертификат(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Организация,,Истина) Тогда
		// Сервис подключен, ничего искать не нужно
		Возврат Ложь;
	КонецЕсли;
	
	ИнформацияОСтороннихСертификатах = ИнформацияОСтороннихСертификатах(Организация);
	Если ИнформацияОСтороннихСертификатах = Неопределено Тогда
		// Никакой информации нет - нужно искать.
		Возврат Истина;
	КонецЕсли;
	
	Если НачалоМесяца(ТекущаяДатаСеанса()) <= НачалоМесяца(ИнформацияОСтороннихСертификатах.ДатаПоиска) Тогда
		// В этом месяце уже искали сертификаты.
		Возврат Ложь;
	КонецЕсли;
	
	Если ИнформацияОСтороннихСертификатах.СертификатНайден 
		И ИнформацияОСтороннихСертификатах.СрокДействияСертификата <= ТекущаяДатаСеанса() Тогда
		// Сертификат найден, снова искать не нужно.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Записывает информацию о сторонних сертификах в хранилище общих настроек.
// Параметры:
//		Организация - СправочникСсылка.Организации - Организация, по которой записывается информация о сертификатах.
//		СторонниеСертификаты - Структура - Ключ - имя удостоверяющего центра, Значение - срок действия сертификата.
//
Процедура ЗаписатьИнформациюОСтороннихСертификатах(Организация, СторонниеСертификаты) Экспорт
	
	Информация = НовыйИнформацияОСтороннихСертификатах();
	Информация.ДатаПоиска           = ТекущаяДатаСеанса();
	Информация.СертификатНайден     = (СторонниеСертификаты.Количество() > 0);
	Информация.СторонниеСертификаты = СторонниеСертификаты;
	СрокДействияСертификата         = '00010101';
	Для Каждого СтороннийСертификат Из СторонниеСертификаты Цикл
		СрокДействия = СтороннийСертификат.Значение;
		Если СрокДействияСертификата = '00010101' Тогда
			СрокДействияСертификата = СрокДействия;
		Иначе
			СрокДействияСертификата = Мин(СрокДействия, СрокДействияСертификата);
		КонецЕсли;
	КонецЦикла;
	Информация.СрокДействияСертификата = СрокДействияСертификата;
	
	// Получим ранее сохраненные данные.
	ИнформацияОСертификатахПоОрганизациям = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастроекСторонниеСертификаты(),
		Новый Соответствие);
		
	// Добавим информация по организации.
	ИнформацияОСертификатахПоОрганизациям.Вставить(Организация, Информация);
	
	// Сохраним всю информацию.
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастроекСторонниеСертификаты(),
		ИнформацияОСертификатахПоОрганизациям);
	
КонецПроцедуры

Функция ИнформацияОСтороннихСертификатах(Организация)

	ИнформацияОСертификатахПоОрганизациям = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастроекСторонниеСертификаты(),
		Новый Соответствие);
		
	Возврат ИнформацияОСертификатахПоОрганизациям[Организация]

КонецФункции

Функция КомандировкиЗаПрошлыйМесяц(Организация, ДатаПолученияДанных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчет.Ссылка КАК Ссылка,
	|	АвансовыйОтчет.ВидОперации КАК ВидОперации,
	|	АвансовыйОтчет.НазначениеАванса КАК НазначениеАванса,
	|	АвансовыйОтчет.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ВТАвансовыеОтчеты
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Проведен
	|	И АвансовыйОтчет.Организация = &Организация
	|	И АвансовыйОтчет.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто
	|ПОМЕСТИТЬ ВТСубконтоСтатьиЗатрат
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчетПрочее.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВТСубконтоСтатьиЗатрат.НомерСубконто = 1
	|			ТОГДА ВЫРАЗИТЬ(АвансовыйОтчетПрочее.Субконто1 КАК Справочник.СтатьиЗатрат)
	|		КОГДА ВТСубконтоСтатьиЗатрат.НомерСубконто = 2
	|			ТОГДА ВЫРАЗИТЬ(АвансовыйОтчетПрочее.Субконто2 КАК Справочник.СтатьиЗатрат)
	|		КОГДА ВТСубконтоСтатьиЗатрат.НомерСубконто = 3
	|			ТОГДА ВЫРАЗИТЬ(АвансовыйОтчетПрочее.Субконто3 КАК Справочник.СтатьиЗатрат)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	АвансовыйОтчетПрочее.Содержание КАК Содержание
	|ПОМЕСТИТЬ ВТТаблицаПрочее
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСубконтоСтатьиЗатрат КАК ВТСубконтоСтатьиЗатрат
	|		ПО АвансовыйОтчетПрочее.СчетЗатрат = ВТСубконтоСтатьиЗатрат.Счет
	|ГДЕ
	|	АвансовыйОтчетПрочее.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТАвансовыеОтчеты.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТАвансовыеОтчеты КАК ВТАвансовыеОтчеты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СтатьиЗатрат.Наименование ПОДОБНО ""%суточные%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%суточных%""
	|			ТОГДА ""СУТОЧНЫЕ""
	|		КОГДА СтатьиЗатрат.Наименование ПОДОБНО ""%проживани%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%гостиниц%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%отель%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%отеле%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%отеля%""
	|			ТОГДА ""ПРОЖИВАНИЕ""
	|		КОГДА СтатьиЗатрат.Наименование ПОДОБНО ""%билет%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%посадочн%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%перелет%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%перелёт%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%рейс%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%самолет%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%самолёт%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%поезд%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%а/б%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%%маршут_квитанция%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%контрольный талон%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%ж/д%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%жд%""
	|			ТОГДА ""БИЛЕТ""
	|		КОГДА СтатьиЗатрат.Наименование ПОДОБНО ""%командировочн%""
	|				ИЛИ СтатьиЗатрат.Наименование ПОДОБНО ""%командиров%""
	|			ТОГДА ""КОМАНДИРОВКА""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВидРасхода
	|ПОМЕСТИТЬ ВТСтатьиЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТТаблицаПрочее.СтатьяЗатрат КАК СтатьяЗатрат
	|			ИЗ
	|				ВТТаблицаПрочее КАК ВТТаблицаПрочее)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаПрочее.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА ВТСтатьиЗатрат.ВидРасхода = ""СУТОЧНЫЕ""
	|				ТОГДА 1
	|			КОГДА ВТТаблицаПрочее.Содержание ПОДОБНО ""%суточные%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%суточных%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%командировочные%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%командировочных%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%командировк%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%командировок%""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПрочееСуточные,
	|	СУММА(ВЫБОР
	|			КОГДА ВТСтатьиЗатрат.ВидРасхода = ""ПРОЖИВАНИЕ""
	|				ТОГДА 1
	|			КОГДА ВТТаблицаПрочее.Содержание ПОДОБНО ""%проживани%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%гостиниц%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%отель%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%отеле%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%отеля%""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПрочееПроживание,
	|	СУММА(ВЫБОР
	|			КОГДА ВТСтатьиЗатрат.ВидРасхода = ""БИЛЕТ""
	|				ТОГДА 1
	|			КОГДА ВТТаблицаПрочее.Содержание ПОДОБНО ""%билет%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%посадочн%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%перелет%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%перелёт%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%рейс%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%самолет%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%самолёт%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%поезд%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%а/б%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%маршут_квитанция%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%контрольный талон%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%ж/д%""
	|					ИЛИ ВТТаблицаПрочее.Содержание ПОДОБНО ""%жд%""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПрочееБилеты,
	|	СУММА(ВЫБОР
	|			КОГДА ВТСтатьиЗатрат.ВидРасхода = ""КОМАНДИРОВКА""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПрочееКомандировки
	|ПОМЕСТИТЬ ВТКомандировкиТаблицаПрочее
	|ИЗ
	|	ВТТаблицаПрочее КАК ВТТаблицаПрочее
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиЗатрат КАК ВТСтатьиЗатрат
	|		ПО ВТТаблицаПрочее.СтатьяЗатрат = ВТСтатьиЗатрат.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТаблицаПрочее.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТАвансовыеОтчеты.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	ВТАвансовыеОтчеты КАК ВТАвансовыеОтчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКомандировкиТаблицаПрочее КАК ВТКомандировкиТаблицаПрочее
	|		ПО ВТАвансовыеОтчеты.Ссылка = ВТКомандировкиТаблицаПрочее.Ссылка
	|ГДЕ
	|	(ВТАвансовыеОтчеты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийАвансовыйОтчет.Командировка)
	|			ИЛИ ВТАвансовыеОтчеты.НазначениеАванса ПОДОБНО ""%командировочные%""
	|			ИЛИ ВТАвансовыеОтчеты.НазначениеАванса ПОДОБНО ""%командировочных%""
	|			ИЛИ ВТАвансовыеОтчеты.НазначениеАванса ПОДОБНО ""%командировк%""
	|			ИЛИ ВТАвансовыеОтчеты.НазначениеАванса ПОДОБНО ""%командирвок%""
	|			ИЛИ ВТАвансовыеОтчеты.НазначениеАванса ПОДОБНО ""%суточные%""
	|			ИЛИ ВТАвансовыеОтчеты.НазначениеАванса ПОДОБНО ""%суточных%""
	|			ИЛИ ВТАвансовыеОтчеты.НазначениеАванса ПОДОБНО ""%проживани%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%суточные%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%суточных%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%командировочные%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%командировочных%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%командировк%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%командировок%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%проживани%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%гостиниц%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%отель%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%отеле%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%отеля%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%билет%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%а/б%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%маршрут_квитанция%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%контрольный талон%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%жд%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%посадочн%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%перелет%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%перелёт%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%рейс%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%самолет%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%самолёт%""
	|			ИЛИ ВТАвансовыеОтчеты.Комментарий ПОДОБНО ""%поезд%""
	|			ИЛИ ВТКомандировкиТаблицаПрочее.ПрочееСуточные > 0
	|			ИЛИ ВТКомандировкиТаблицаПрочее.ПрочееПроживание > 0
	|			ИЛИ ВТКомандировкиТаблицаПрочее.ПрочееБилеты > 0
	|			ИЛИ ВТКомандировкиТаблицаПрочее.ПрочееКомандировки > 0)";
	Период = НачалоМесяца(НачалоМесяца(ДатаПолученияДанных) - 1); // проверяем авансовые отчеты за прошлый месяц.
	Запрос.УстановитьПараметр("НачалоПериода", Период);
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ТаблицаДанных = ТаблицаДанных();
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Порядок = 0;
	СтрокаДанных.ЗначениеПоказателя = Выборка.КоличествоДокументов;
	
	Возврат ТаблицаДанных;

КонецФункции

#КонецОбласти

#Область ПредодобренныйКредитВСбербанке

Функция ПредодобренныйКредитВСбербанкеПолучитьПредодобренныеИНН() Экспорт
	
	ПредодобренныйКредитВСбербанкеПолучитьДанныеИзСервиса(Ложь);
	
	ПредодобренныеИНН = ПредодобренныйКредитВСбербанкеПолучитьЗначениеИзХранилища(
		"ПредодобренныеИНН",
		Новый Массив
	);
	
	Результат = Новый Массив;
	
	Для каждого ПредодобренныйИНН Из ПредодобренныеИНН Цикл
		Если КонецДня(ПредодобренныйИНН.СрокДействия) < ТекущаяДатаСеанса() Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ПредодобренныйИНН.ИНН);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПредодобренныйКредитВСбербанкеПолучитьДанныеИзСервиса(ПолучатьВФоне, ДополнительныеИНН = Неопределено) Экспорт
	
	ДатаОбновления = ПредодобренныйКредитВСбербанкеПолучитьЗначениеИзХранилища(
		"ДатаОбновления",
		Дата(1, 1, 1)
	);
	
	ИнтервалОбновления = 86400 * 14; // Раз в две недели.
	
	Если ТекущаяДатаСеанса() < ДатаОбновления + ИнтервалОбновления Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДополнительныеИНН", ДополнительныеИНН);
	
	Если ПолучатьВФоне Тогда
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Получение данных по предодобренным кредитам Сбербанка'");
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		Результат = ДлительныеОперации.ВыполнитьВФоне(
			"ПерсонализированныеПредложенияСервисов.ПредодобренныйКредитВСбербанкеЗагрузитьДанныеИзСервиса",
			ПараметрыПроцедуры,
			ПараметрыВыполнения
		);
	Иначе
		ПредодобренныйКредитВСбербанкеЗагрузитьДанныеИзСервиса(ПараметрыПроцедуры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредодобренныйКредитВСбербанкеЗагрузитьДанныеИзСервиса(Параметры = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.ИНН КАК ИНН,
		|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо) КАК ЭтоФизЛицо
		|ИЗ
		|	Справочник.Организации КАК Организации";
		Выборка = Запрос.Выполнить().Выбрать();
		
		СписокИНН = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Если ПустаяСтрока(Выборка.ИНН) Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(
				Выборка.ИНН,
				Выборка.ЭтоФизЛицо
			);
			Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
				Продолжить;
			КонецЕсли;
			
			СписокИНН.Добавить(Выборка.ИНН);
		КонецЦикла;
		
		// В параметрах может быть передан дополнительный список ИНН.
		// Его добавляем без дополнительных проверок: считаем, что они были выполнены заранее.
		Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("ДополнительныеИНН")
			И ТипЗнч(Параметры.ДополнительныеИНН) = Тип("Массив")
			И Параметры.ДополнительныеИНН.Количество() > 0 Тогда
			Для каждого ИНН Из Параметры.ДополнительныеИНН Цикл
				СписокИНН.Добавить(ИНН);
			КонецЦикла;
		КонецЕсли;
		
		Если СписокИНН.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("innList", СписокИНН);
		СтруктураДанных.Вставить("programName", Метаданные.Имя);
		СтруктураДанных.Вставить("programVersion", Метаданные.Версия);
		
		JSON = Новый ЗаписьJSON();
		JSON.УстановитьСтроку();
		ЗаписатьJSON(JSON, СтруктураДанных);
		ТелоЗапроса = JSON.Закрыть();
		
		АдресСервиса = ПредодобренныйКредитВСбербанкеИмяСервера() + "/api/advertisement/rest/check";
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервиса);
		ЗапросHTTP = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
		
		ЗащищенноеСоединение = ?(СтруктураURI.Схема = "https", Новый ЗащищенноеСоединениеOpenSSL, Неопределено);
		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			СтруктураURI.Порт,,,,
			20,
			ЗащищенноеСоединение
		);
		
		ОтветСервиса = Соединение.ВызватьHTTPМетод("POST", ЗапросHTTP);
		
		Если ОтветСервиса.КодСостояния <> 200 Тогда
			ВызватьИсключение СтрШаблон(
				"%1: %2 %3",
				НСтр("ru='Сервис получения данных по предодобренным кредитам Сбербанка'"),
				ОтветСервиса.КодСостояния,
				ОтветСервиса.ПолучитьТелоКакСтроку()
			);
		КонецЕсли;
		
		JSON = Новый ЧтениеJSON();
		JSON.УстановитьСтроку(ОтветСервиса.ПолучитьТелоКакСтроку());
		ДанныеОтвета = ПрочитатьJSON(JSON, Ложь, "date");
		
		ПредодобренныеИНН = Новый Массив;
		Для каждого СтрокаОтвета Из ДанныеОтвета.innInfoList Цикл
			ПредодобренныйИНН = Новый Структура;
			ПредодобренныйИНН.Вставить("ИНН", СтрокаОтвета.inn);
			ПредодобренныйИНН.Вставить("СрокДействия", СтрокаОтвета.date);
			ПредодобренныеИНН.Добавить(ПредодобренныйИНН);
		КонецЦикла;
		
		ПредодобренныйКредитВСбербанкеЗаписатьЗначениеВХранилище("ПредодобренныеИНН", ПредодобренныеИНН);
		ПредодобренныйКредитВСбербанкеЗаписатьЗначениеВХранилище("ДатаОбновления", ТекущаяДатаСеанса());
		
	Исключение
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Обновление данных по предодобренным кредитам Сбербанка'"),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПредодобренныйКредитВСбербанкеИмяСервера() Экспорт
	
	Возврат "https://reportbank.1c.ru";
	
КонецФункции

Функция ПредодобренныйКредитВСбербанкеПолучитьЗначениеИзХранилища(Ключ, ЗначениеПоУмолчанию)
	
	УстановитьПривилегированныйРежим(Истина);
	Значение = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(
		ИмяСервисПредодобренныйКредитВСбербанке(),
		Ключ
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Процедура ПредодобренныйКредитВСбербанкеЗаписатьЗначениеВХранилище(Ключ, Значение)
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(
		ИмяСервисПредодобренныйКредитВСбербанке(),
		Значение,
		Ключ
	);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриЗаписиОрганизации(ОбъектЗаписи, Отказ) Экспорт
	
	Перем ЭтоНовый;
	
	Если ОбъектЗаписи.ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовый) Тогда
		
		// При записи новой организации необходимо досрочно
		// обновить список предодобренных Сбербанком ИНН.
		Если ЭтоНовый И НЕ Отказ Тогда
			
			// Если ИНН организации валидный, передаем его в фоновое задание
			// для обработки на сервере, поскольку в результаты запроса он еще не попадет.
			ДополнительныеИНН = Новый Массив;
			Если НЕ ПустаяСтрока(ОбъектЗаписи.ИНН) Тогда
				ЭтоФизЛицо = ОбъектЗаписи.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(
					ОбъектЗаписи.ИНН,
					ЭтоФизЛицо
				);
				Если РезультатПроверки.СоответствуетТребованиям Тогда
					ДополнительныеИНН.Добавить(ОбъектЗаписи.ИНН);
				КонецЕсли;
			КонецЕсли;
			
			ПредодобренныйКредитВСбербанкеЗаписатьЗначениеВХранилище("ДатаОбновления", Дата(1, 1, 1));
			ПредодобренныйКредитВСбербанкеПолучитьДанныеИзСервиса(Истина, ДополнительныеИНН);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьОбстоятельстваЗакрытияБаннера(Баннер, Организация)
	
	ЗакрытыеБаннеры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		НовыйЗакрытыеПользователемБаннеры());
		
	Если НЕ Баннер.ЗависитОтОрганизации Тогда
		ЗакрытыеБаннеры.БаннерыБезОрганизации.Вставить(Баннер.Идентификатор, Баннер.ОбстоятельстваЗакрытия);
	Иначе
		ЗакрытыеБаннерыПоОрганизации = ЗакрытыеБаннеры.БаннерыПоОрганизации[Организация];
		Если ЗакрытыеБаннерыПоОрганизации = Неопределено Тогда
			ЗакрытыеБаннерыПоОрганизации = Новый Структура;
		КонецЕсли;
		ЗакрытыеБаннерыПоОрганизации.Вставить(Баннер.Идентификатор, Баннер.ОбстоятельстваЗакрытия);
		ЗакрытыеБаннеры.БаннерыПоОрганизации.Вставить(Организация, ЗакрытыеБаннерыПоОрганизации);
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		ЗакрытыеБаннеры);
		
КонецПроцедуры

Функция ЭтоПериодНДС(ТекущаяДата)
	
	ЭтотГод = Год(ТекущаяДата);
	Если ТекущаяДата > Дата(ЭтотГод - 1, 12, 15) И ТекущаяДата < Дата(ЭтотГод , 1, 21) Тогда
		Возврат Истина;
		
	ИначеЕсли ТекущаяДата > Дата(ЭтотГод, 3, 15) И ТекущаяДата < Дата(ЭтотГод, 4, 21) Тогда
		Возврат Истина;
		
	ИначеЕсли ТекущаяДата > Дата(ЭтотГод, 6, 15) И ТекущаяДата < Дата(ЭтотГод, 7, 21) Тогда
		Возврат Истина;
		
	ИначеЕсли ТекущаяДата > Дата(ЭтотГод, 9, 15) И ТекущаяДата < Дата(ЭтотГод, 10, 21) Тогда
		Возврат Истина;
		
	ИначеЕсли  ТекущаяДата > Дата(ЭтотГод, 12, 15) И ТекущаяДата < Дата(ЭтотГод + 1, 1, 21) Тогда
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ПорогСуммаДля1СКонтрагент()
	
	// Считаем 1000 рублей ключевой суммой после которой можно показывать баннеры.
	// Используется для определения порога НДС к вычету, НДС к возмещению и дебиторской задолженности.
	Возврат 1000;
	
КонецФункции

Функция ПорогСуммаДля1СПАРК()
	
	// Считаем 10000 рублей ключевой суммой после которой можно показывать баннеры.
	// Используется для определения порога НДС к вычету, НДС к возмещению и дебиторской задолженности.
	Возврат 10000;
	
КонецФункции

Функция ОбщееКоличествоДокументовДляРекламыЭДО()
	
	Возврат 100;
	
КонецФункции

Функция КоличествоПоступленийДляРекламыЭДО()
	
	Возврат 50;
	
КонецФункции

Функция КоличествоРеализацийДляРекламыЭДО()
	
	Возврат 50;
	
КонецФункции

Функция КоличествоКонтрагентовДляРекламыКонтрагент()
	
	Возврат 30;
	
КонецФункции

Функция КоличествоСотрудниковДляРекламыОтчетности()
	
	Возврат 25;
	
КонецФункции

Процедура ДобавитьБаннерВТаблицу(СписокБаннеров, Баннер)
	
	Если НЕ Баннер.ДоступенПоПравам Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока                      = СписокБаннеров.Добавить();
	НоваяСтрока.Порядок              = СписокБаннеров.Количество();
	НоваяСтрока.Баннер               = Баннер;
	НоваяСтрока.ИдентификаторБаннера = Баннер.Идентификатор;
	НоваяСтрока.ИмяСервиса           = Баннер.ИмяСервиса;
	
КонецПроцедуры

Процедура УдалитьСтрокиИзТаблицы(Таблица, СтрокиКУдалению)
	
	КоличествоЭлементов = СтрокиКУдалению.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		Таблица.Удалить(СтрокиКУдалению[КоличествоЭлементов - Индекс]);
	КонецЦикла;
	СтрокиКУдалению = Неопределено;
	
КонецПроцедуры

Функция СтатусЗакрытогоБаннера()
	
	Возврат "close";
	
КонецФункции

#Область Конструкторы

Функция НовыйТаблицаСписокБаннеров()
	
	ТаблицаСпискаБаннеров = Новый ТаблицаЗначений;
	// Колонки
	ТаблицаСпискаБаннеров.Колонки.Добавить("Баннер"); // см. НовыйБаннерДляСписка()
	ТаблицаСпискаБаннеров.Колонки.Добавить("ИдентификаторБаннера", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСпискаБаннеров.Колонки.Добавить("Порядок",              ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ТаблицаСпискаБаннеров.Колонки.Добавить("ИмяСервиса",           ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	// Индексы
	ТаблицаСпискаБаннеров.Индексы.Добавить("ИдентификаторБаннера");
	
	Возврат ТаблицаСпискаБаннеров;
	
КонецФункции

Функция НовыйЗакрытыеПользователемБаннеры() Экспорт
	
	ЗакрытыеПользователемБаннеры = Новый Структура;
	ЗакрытыеПользователемБаннеры.Вставить("БаннерыБезОрганизации", Новый Структура);
	ЗакрытыеПользователемБаннеры.Вставить("БаннерыПоОрганизации",  Новый Соответствие);
	
	Возврат ЗакрытыеПользователемБаннеры;
	
КонецФункции

Функция НовыйБаннерДляСписка()
	
	Баннер = Новый Структура;
	Баннер.Вставить("ИмяСервиса",              "");
	Баннер.Вставить("Идентификатор",           "");
	Баннер.Вставить("НавигационнаяСсылка",     "");
	Баннер.Вставить("ТекстБаннера",            Новый ФорматированнаяСтрока(""));
	Баннер.Вставить("ИмяКартинкаЛоготипа",     "");
	Баннер.Вставить("ЦветФонаБаннер",         "ЦветФонаБаннер");
	Баннер.Вставить("ЗависитОтОрганизации",   Истина);
	Баннер.Вставить("Исключительный",         Ложь);
	Баннер.Вставить("Группа",                 Неопределено);
	Баннер.Вставить("ДоступенПоПравам",       Ложь);
	Баннер.Вставить("ДанныеБаннера",          Новый Структура);
	Баннер.Вставить("ОбстоятельстваЗакрытия", Новый Структура);
	Баннер.ОбстоятельстваЗакрытия.Вставить("ДатаЗакрытия", '00010101');
	Баннер.ОбстоятельстваЗакрытия.Вставить("Периодичность", Перечисления.Периодичность.Месяц);
	
	Возврат Баннер;
	
КонецФункции

Функция НовыйЗаголовок(ТекстЗаголовка, НавигационнаяСсылка = "", Шрифт = Неопределено)
	
	ШрифтЗаголовка = ?(Шрифт = Неопределено, ШрифтыСтиля.ШрифтЗаголовкаБаннера, Шрифт);
	
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстЗаголовка, ШрифтЗаголовка, , , НавигационнаяСсылка);
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстЗаголовка, ШрифтЗаголовка);
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстЗаголовка, ШрифтыСтиля.ШрифтЗаголовкаБаннера);
	
КонецФункции

Функция НовыйСтрокаБаннера(ТекстСтроки, НавигационнаяСсылка = "", Шрифт = Неопределено)
	
	ШрифтСтроки = ?(Шрифт = Неопределено, ШрифтыСтиля.ШрифтТекстаБаннера, Шрифт);
	
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстСтроки, ШрифтСтроки, , , НавигационнаяСсылка);
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстСтроки, ШрифтСтроки);
	КонецЕсли;
	
КонецФункции

Функция НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка)
	
	Возврат Новый ФорматированнаяСтрока(
		ТекстЗаголовка,
		Символы.ПС,
		Новый ФорматированнаяСтрока(" ", Новый Шрифт(,5)), // Отступ между заголовком и подзаголовком.
		Символы.ПС,
		ТекстПодзаголовка);
	
КонецФункции

Функция НовыйИнформацияОСтороннихСертификатах()
	
	Информация = Новый Структура;
	Информация.Вставить("ДатаПоиска",               '00010101');
	Информация.Вставить("СертификатНайден",         Ложь);
	Информация.Вставить("СрокДействияСертификата",  '00010101');
	Информация.Вставить("СторонниеСертификаты",     Новый Структура);
	
	Возврат Информация;
	
КонецФункции 

#КонецОбласти

#Область Имена

// Ключи хранилища общих настроек

Функция ИмяНастройкиПерсонализированныеПредложенияСервисов() Экспорт
	
	Возврат "ПерсонализированныеПредложенияСервисов";
	
КонецФункции

Функция ИмяКлючНастройкиЗакрытыеПользователемБаннеры() Экспорт

	Возврат "ЗакрытыеПользователемБаннеры";

КонецФункции

Функция ИмяКлючНастроекСторонниеСертификаты()

	Возврат "СторонниеСертификаты";

КонецФункции 

// Имена сервисов

Функция ИмяСервис1СОтчетность()

	Возврат "Сервис1СОтчетность";

КонецФункции

Функция ИмяСервис1СЭДО()

	Возврат "Сервис1СЭДО";

КонецФункции

Функция ИмяСервис1СКонтрагент()

	Возврат "Сервис1СКонтрагент";

КонецФункции

Функция ИмяСервис1СПАРК()

	Возврат "Сервис1СПАРК";

КонецФункции

Функция ИмяСервисНадежностьБанков()

	Возврат "СервисНадежностьБанков";

КонецФункции

Функция ИмяСервисМойНалог()

	Возврат "СервисМойНалог";

КонецФункции

Функция ИмяСервисПоддержкаСервиса()
	
	Возврат "ПоддержкаСервиса";
	
КонецФункции

Функция ИмяСервисПроверкаОплатыНалогов()

	Возврат "ПроверкаОплатыНалогов";

КонецФункции

Функция ИмяПроблемыСНалоговымиПлатежами()

	Возврат "ПроблемыСНалоговымиПлатежами";

КонецФункции

Функция ИмяСервисЗаявкаНаКредит()

	Возврат "ЗаявкаНаКредит";

КонецФункции

Функция ИмяСервисИспользуетеКредиты()

	Возврат "ИспользуетеКредиты";

КонецФункции

Функция ИмяСервисФинОтчетность()

	Возврат "ФинОтчетность";

КонецФункции

Функция ИмяСервисПереходиНаНКО()

	Возврат "ПереходиНаНКО";

КонецФункции

Функция ИмяСервисМоиЗадачи()

	Возврат "МоиЗадачи";

КонецФункции

Функция ИмяНастройкаФункциональности()
	
	Возврат "НастройкаФункциональности";
	
КонецФункции

// Имена картинок

Функция ИмяКартинкиЛоготип1СОтчетность()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат "ЛоготипОтчетностьСервис";
	Иначе
		Возврат "ЛоготипОтчетность";
	КонецЕсли;
	
КонецФункции

Функция ИмяКартинкиЛоготип1СЭДО()
	
	Возврат "ЛоготипЭДО";
	
КонецФункции

Функция ИмяКартинкиЛоготип1СКонтрагент()
	
	Возврат "ЛоготипКонтрагент";
	
КонецФункции

Функция ИмяКартинкиЛоготип1СПАРК()
	
	Возврат "ЛоготипКонтрагент";
	
КонецФункции

Функция ИмяКартинкиЛоготипЗаявкаНаКредит()
	
	Возврат "ЛоготипСервисПоКредитам";
	
КонецФункции

Функция ИмяКартинкиЛоготипИспользуетеКредиты()
	
	Возврат "ЛоготипИспользуетеКредиты";
	
КонецФункции

Функция ИмяКартинкиЛоготипФинОтчетность()
	
	Возврат "ЛоготипФинОтчетность";
	
КонецФункции

Функция ИмяКартинкиПереходиНаНКО()
	
	Возврат "ЛоготипПереходиНаНКО";
	
КонецФункции

// Имена размещений

// Возвращает имя размещения для формы настройки налогов и отчетов.
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияНалогиИОтчеты() Экспорт

	Возврат "НалогиИОтчеты"

КонецФункции

// Возвращает имя размещения для формы журнала Документы.
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияДокументы() Экспорт

	Возврат "Документы"

КонецФункции

// Возвращает имя размещения для формы списка Реализации товаров и услуг.
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияРеализация() Экспорт

	Возврат "Реализация"

КонецФункции

// Возвращает имя размещения для формы списка Поступление товаров и услуг.
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияПоступление() Экспорт

	Возврат "Поступление"

КонецФункции

// Возвращает имя размещения для общих форм ИнформационнаяПанель.
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияОбщее() Экспорт

	Возврат "Общее"

КонецФункции

// Возвращает имя размещения для общих форм СписокЗадач.
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияСписокЗадач() Экспорт

	Возврат "СписокЗадач"

КонецФункции

// Возвращает имя размещения в случае запроса из стороннего внешнего приложения
//
// Возвращаемое значение:
//  Строка - Имя размещения
//
Функция ИмяРазмещенияИнтерфейсБанка() Экспорт
	
	Возврат "ИнтерфейсБанка";
	
КонецФункции

// Имя отчетной кампании

Функция ИмяОтчетнойКампании(ОтчетнаяКампания)
	
	// Для текста баннера нужно имя отчетной кампании в дательной падеже,
	// например, "Отчетная кампания по страховым взносам"
	
	ТекстНалогНа = НСтр("ru='Налог на'") + " ";
	ИмяОтчетнойКампании = СтрЗаменить(ОтчетнаяКампания, ТекстНалогНа, "");
	
	Если ВРег(ИмяОтчетнойКампании) = ИмяОтчетнойКампании Тогда
		// Если все символы в строке верхнего регистра, то это аббревиатура
		// и в дательном падеже будет то же имя.
		ОтчетнаяКампанияДательныйПадеж = ИмяОтчетнойКампании;
		
	ИначеЕсли Константы.ИспользоватьСервисСклоненияMorpher.Получить() Тогда
		// Если подключен сервис склонения, то склоняем через него.
		ОтчетнаяКампанияДательныйПадеж = НРег(СклонениеПредставленийОбъектов.ПросклонятьПредставление(ИмяОтчетнойКампании, 3));
		
	Иначе
		// Если сервис не подключен, то используем заданные имена кампаний.
		Если НРег(ИмяОтчетнойКампании) = НСтр("ru='акцизы'") Тогда
			ОтчетнаяКампанияДательныйПадеж = НСтр("ru='акцизам'");
			
		ИначеЕсли НРег(ИмяОтчетнойКампании) = НСтр("ru='игорный бизнес'") Тогда
			ОтчетнаяКампанияДательныйПадеж = НСтр("ru='игорному бизнесу'");
			
		ИначеЕсли НРег(ИмяОтчетнойКампании) = НСтр("ru='таможенный союз'") Тогда
			ОтчетнаяКампанияДательныйПадеж = НСтр("ru='таможенному союзу'");
			
		ИначеЕсли НРег(ИмяОтчетнойКампании) = НСтр("ru='прибыль'") Тогда
			ОтчетнаяКампанияДательныйПадеж = НСтр("ru='прибыли'");
			
		ИначеЕсли НРег(ИмяОтчетнойКампании) = НСтр("ru='водный налог'") Тогда
			ОтчетнаяКампанияДательныйПадеж = НСтр("ru='водному налогу'");
				
		ИначеЕсли НРег(ИмяОтчетнойКампании) = НСтр("ru='страховые взносы'") Тогда
			ОтчетнаяКампанияДательныйПадеж = НСтр("ru='страховым взносам'");
			
		Иначе
			ОтчетнаяКампанияДательныйПадеж = НРег(ИмяОтчетнойКампании);
			
		КонецЕсли;
	КонецЕсли;
	
	// Строка вида "по игорному бизнесу" или "по НДС".
	Возврат СтрШаблон(НСтр("ru='по %1'"), ОтчетнаяКампанияДательныйПадеж);
	
КонецФункции

// Возвращает имя размещения для журнала "Банковские выписки"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияБанковскиеВыписки() Экспорт

	Возврат "БанковскиеВыписки";

КонецФункции

// Возвращает имя размещения для журнала "Деньги"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияДеньги() Экспорт

	Возврат "Деньги";

КонецФункции

// Возвращает имя размещения для журнала "Кассовые документы"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияКассовыеДокументы() Экспорт

	Возврат "КассовыеДокументы";

КонецФункции

// Возвращает имя размещения для отчета "Монитор налогов и отчетности"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияМониторНалогов() Экспорт

	Возврат "МониторНалогов";

КонецФункции

Функция ИмяСервисПредодобренныйКредитВСбербанке()

	Возврат "ПредодобренныйКредитВСбербанке";

КонецФункции

Функция ИмяКартинкиЛоготипСбербанк()
	
	Возврат "ЛоготипСбербанк";
	
КонецФункции

Функция ИмяНастройкаВидимостиСчетовУчета()

	Возврат "НастройкаВидимостиСчетовУчета";

КонецФункции

// Возвращает имя размещения для списка документов "Требования-накладные"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияТребованиеНакладная() Экспорт

	Возврат "ТребованиеНакладная";

КонецФункции

Функция ИмяСервисSmartway()

	Возврат "Smartway";

КонецФункции

// Возвращает имя размещения для документа "Авансовые отчеты"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияАвансовыеОтчеты() Экспорт

	Возврат "АвансовыеОтчеты";

КонецФункции

// Возвращает имя размещения для отчета "Монитор основных показателей"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияМониторОсновныхПоказателей() Экспорт

	Возврат "МониторОсновныхПоказателей";

КонецФункции

// Возвращает имя размещения для отчета "Продажи по контрагентам"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияПродажиПоКонтрагентам() Экспорт

	Возврат "ПродажиПоКонтрагентам";

КонецФункции

// Возвращает имя размещения для отчета "Анализ движений денежных средств"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияАнализДвиженийДенежныхСредств() Экспорт

	Возврат "АнализДвиженийДенежныхСредств";

КонецФункции

// Возвращает имя размещения для отчета "Остатки денежных средств"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияОстаткиДенежныхСредств() Экспорт

	Возврат "ОстаткиДенежныхСредств";

КонецФункции

// Возвращает имя размещения для отчета "Поступления денежных средств"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияПоступленияДенежныхСредств() Экспорт

	Возврат "ПоступленияДенежныхСредств";

КонецФункции

// Возвращает имя размещения для отчета "Расходы денежных средств"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияРасходыДенежныхСредств() Экспорт

	Возврат "РасходыДенежныхСредств";

КонецФункции

// Возвращает имя размещения для отчета "Доходы и расходы"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияДоходыРасходы() Экспорт

	Возврат "ДоходыРасходы";

КонецФункции

// Возвращает имя размещения для отчета "Оборотные средства"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияОборотныеСредства() Экспорт

	Возврат "ОборотныеСредства";

КонецФункции

// Возвращает имя размещения для отчета "Продажи по месяцам"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияСравнениеПродаж() Экспорт

	Возврат "СравнениеПродаж";

КонецФункции

// Возвращает имя размещения для отчета "Динамика задолженности поставщикам"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияДинамикаЗадолженностиПоставщикам() Экспорт

	Возврат "ДинамикаЗадолженностиПоставщикам";

КонецФункции

// Возвращает имя размещения для отчета "Счета, не оплаченные поставщикам"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияАнализНеоплаченныхСчетовПоставщиков() Экспорт

	Возврат "АнализНеоплаченныхСчетовПоставщиков";

КонецФункции

// Возвращает имя размещения для отчета "Задолженность поставщикам"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияЗадолженностьПоставщикам() Экспорт

	Возврат "ЗадолженностьПоставщикам";

КонецФункции

// Возвращает имя размещения для отчета "Задолженность поставщикам по срокам долга"
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияЗадолженностьПоставщикамПоСрокамДолга() Экспорт

	Возврат "ЗадолженностьПоставщикамПоСрокамДолга";

КонецФункции

Функция ИмяАнтикризис()
	
	Возврат "Антикризис";
	
КонецФункции

Функция ИмяАнтикризисОсвобождениеОтНалогов()
	
	Возврат "АнтикризисОсвобождениеОтНалогов";
	
КонецФункции

Функция ИмяАнтикризисЗарплата()
	
	Возврат "АнтикризисЗарплата";
	
КонецФункции

Функция ИмяСайтАнтикризис()
	
	Возврат "СайтАнтикризис";
	
КонецФункции

Функция ИмяЕНВДОтменяется()
	
	Возврат "ЕНВДОтменяется";
	
КонецФункции

// Возвращает имя размещения в случае запроса из стороннего внешнего приложения
//
// Возвращаемое значение:
//  Строка - Имя размещения
//
Функция ИмяРазмещенияНастройкиУчетаЗарплаты() Экспорт
	
	Возврат "НастройкиУчетЗарплаты";
	
КонецФункции

// Возвращает имя размещения для формы списка Завки на кредит.
//
// Возвращаемое значение:
//  Строка - Имя размещения
//
Функция ИмяРазмещенияЗаявкиНаКредит() Экспорт
	
	Возврат "ЗаявкиНаКредит";
	
КонецФункции

// Возвращает имя размещения для журнала Начисление зарплаты.
//
// Возвращаемое значение:
//  Строка - Имя размещения
//
Функция ИмяРазмещенияНачислениеЗарплаты() Экспорт
	
	Возврат "НачислениеЗарплаты";
	
КонецФункции

// Возвращает имя размещения для раздела "Сотрудники" (простой интерфейс).
//
// Возвращаемое значение:
//  Строка - Имя размещения
//
Функция ИмяРазмещенияПростойИнтерфейсРазделСотрудники() Экспорт
	
	Возврат "ПростойИнтерфейсРазделСотрудники";
	
КонецФункции

Функция ИмяКадровыеДокументыЭТК()
	
	Возврат "КадровыеДокументыЭТК";
	
КонецФункции

// Возвращает имя размещения в случае запроса из стороннего внешнего приложения
//
// Возвращаемое значение:
//  Строка - Имя размещения
//
Функция ИмяРазмещенияНастройкиКадровыеДокументыЭТК() Экспорт
	
	Возврат "КадровыеДокументы";
	
КонецФункции

// Возвращает имя размещения для общей формы ПечатьДокументов
// Возвращаемое значение:
//  Строка - Имя размещения
//
Функция ИмяРазмещенияПечатьДокументов() Экспорт
	
	Возврат "ПечатьДокументов";
	
КонецФункции

Функция ИмяАнтикризисПересчитатьВзносы()
	
	Возврат "АнтикризисПересчитатьВзносы";
	
КонецФункции

// Возвращает имя размещения для формы списка Начисление зарплаты.
//
// Возвращаемое значение:
//  Строка - Имя размещения
//
Функция ИмяРазмещенияНачислениеЗарплатыФормаСписка() Экспорт
	
	Возврат "НачислениеЗарплатыФормаСписка";
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСоSmartway

Функция НовыйБаннерИнтеграцияСоSmartway()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервисSmartway();
	Баннер.Идентификатор       = ИдентификаторБаннераИнтеграцияСоSmartway();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераИнтеграцияСоSmartway();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераИнтеграцияСоSmartway();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиЛоготипSmartway();
	Баннер.ДанныеБаннера.Вставить("Организация");
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Квартал;
	Баннер.ЗависитОтОрганизации = Истина;
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаИнтеграцияСоSmartway(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераИнтеграцияСоSmartway();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПерсонализированныеДанные.Организация КАК Организация,
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.ИнтеграцияСоSmartway)
	|	И ПерсонализированныеДанные.Организация = &Организация";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераИнтеграцияСоSmartway(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаДанныеБаннера = ДанныеБаннера[0];
	ЗначениеПоказателя = СтрокаДанныеБаннера.ЗначениеПоказателя;
	Организация        = СтрокаДанныеБаннера.Организация;
	
	Возврат ЗначениеПоказателя >= КоличествоКомандировокДляВыводаБаннераSmartway()
		И Не Обработки.ОтправкаЗаявокВSmartway.ЗаявкаВSmartwayОтправлена(Организация);
	
КонецФункции

Функция КоличествоКомандировокДляВыводаБаннераSmartway()

	Возврат 10;

КонецФункции

Процедура ЗаполнитьДанныеБаннераИнтеграцияСоSmartway(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераИнтеграцияСоSmartway(Баннер.НавигационнаяСсылка);
	ЗаполнитьЗначенияСвойств(Баннер.ДанныеБаннера, ДанныеБаннера[0]);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннераИнтеграцияСоSmartway(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru = 'Отправляете сотрудников в командировки?'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Автоматизируйте заполнение авансовых отчетов по командировкам'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИдентификаторБаннераИнтеграцияСоSmartway()

	Возврат "ИнтеграцияСоSmartway";

КонецФункции

Функция ДоступностьБаннераИнтеграцияСоSmartway()
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.ОтправкаЗаявокВSmartway)
		И Не (ПолучитьФункциональнуюОпцию("ИнтерфейсИнтеграцииСБанком")
		Или ЗначениеЗаполнено(Справочники.НастройкиЗагрузкиДанныхВнешнихСистем.ИспользуемаяНастройкаSmartway())
		Или ОбщегоНазначенияБПВызовСервераПовтИсп.ДанныеSmartway() = Неопределено);
		
КонецФункции

Функция ИмяКартинкиЛоготипSmartway()
	
	Возврат "ЛоготипSmartway";
	
КонецФункции

#КонецОбласти

#Область Кредит

Функция Сайт1СКредит()
	
	Возврат "https://v8.1c.ru/tekhnologii/obmen-dannymi-i-integratsiya/realizovannye-resheniya/1s-kredit/";
	
КонецФункции

#КонецОбласти

#Область ЗаявкаНаКредит

Функция СреднемесячноеПоступлениеНаСчетДляРекламыЗаявкаНаКредит()
	
	Возврат 50000;
	
КонецФункции

Процедура ОбновитьДанныеДляЗаявкиНаКредит(ДатаПолученияДанных) Экспорт
	
	ТаблицаПоступленияНаСчет = Документы.ЗаявкаНаКредит.ПоступлениеНаСчет(ДатаПолученияДанных, 6);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Раздел = Перечисления.РазделыПерсонализированныхДанных.ЗаявкаНаКредит;
	
	НаборЗаписей = РегистрыСведений.ПерсонализированныеДанные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Раздел.Установить(Раздел);
	
	Для каждого СтрокаТаблицы Из ТаблицаПоступленияНаСчет Цикл
		
		Запись = НаборЗаписей.Добавить();
		Запись.Раздел             = Раздел;
		Запись.НомерСтрокиРаздела = 1;
		Запись.Организация        = СтрокаТаблицы.Организация;
		Запись.ЗначениеПоказателя = СтрокаТаблицы.Среднее;
		Запись.ДатаОбновления     = ДатаПолученияДанных;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ИспользуетеКредиты

Процедура ОбновитьДанныеИспользуетеКредиты(ДатаПолученияДанных) Экспорт
	
	ТаблицаПоступленияНаСчет = Документы.ЗаявкаНаКредит.ОборотыПоКредитамИЗаймам(ДатаПолученияДанных, 6);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Раздел = Перечисления.РазделыПерсонализированныхДанных.ИспользуетеКредиты;
	
	НаборЗаписей = РегистрыСведений.ПерсонализированныеДанные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Раздел.Установить(Раздел);
	
	Для каждого СтрокаТаблицы Из ТаблицаПоступленияНаСчет Цикл
		
		Запись = НаборЗаписей.Добавить();
		Запись.Раздел             = Раздел;
		Запись.НомерСтрокиРаздела = 1;
		Запись.Организация        = СтрокаТаблицы.Организация;
		Запись.ЗначениеПоказателя = ?(СтрокаТаблицы.ОборотДт <> 0 ИЛИ СтрокаТаблицы.ОборотКт <> 0, 1, 0);
		Запись.ДатаОбновления     = ДатаПолученияДанных;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ФинОтчетность

Процедура ОбновитьДанныеФинОтчетность(ДатаПолученияДанных) Экспорт

	// Проверяем, есть ли кредиты, займы или лизинговые обязательства перед контрагентами,
	// которые подключены к сервису 1С:ФинОтчетность.

	СчетаКредитовЗаймовЛизинга = Новый Массив;
	СчетаКредитовЗаймовЛизинга.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам); // 66
	СчетаКредитовЗаймовЛизинга.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам);  // 67
	СчетаКредитовЗаймовЛизинга.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАренде);    // 76.07
	СчетаКредитовЗаймовЛизинга.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеВал); // 76.27
	СчетаКредитовЗаймовЛизинга.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеУЕ);  // 76.37

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаКредитовЗаймовЛизинга", СчетаКредитовЗаймовЛизинга);
	Запрос.УстановитьПараметр("ДоступныеБанки",  ФинОтчетностьВБанки.ДоступныеБанки());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаКредитовЗаймовЛизинга)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета.Счет
	|				ИЗ
	|					ВТ_Счета),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			) КАК ХозрасчетныйОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ХозрасчетныйОстатки.Субконто1 = Контрагенты.Ссылка
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|	И Контрагенты.ИНН <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ХозрасчетныйОстатки.Организация КАК Организация
	|ИЗ
	|	ВТ_ХозрасчетныйОстатки КАК ВТ_ХозрасчетныйОстатки";

	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Остатков по кредитам, займам или лизингу нет, баннер показывать не будем,
		// обновлять данные сервиса не требуется.
		Возврат;
	КонецЕсли;
	
	// Запускам принудительное обновление данных сервиса перед тем, как обращаться к его справочника.
	ФинОтчетностьВБанки.ОбновитьДанныеСервисаФинОтчетности(Ложь);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанкиУниверсальногоОбмена.Ссылка КАК Банк,
	|	БанкиУниверсальногоОбмена.ИНН КАК ИНН
	|ПОМЕСТИТЬ ВТ_ДоступныеБанки
	|ИЗ
	|	Справочник.БанкиУниверсальногоОбмена КАК БанкиУниверсальногоОбмена
	|ГДЕ
	|	БанкиУниверсальногоОбмена.Ссылка В(&ДоступныеБанки)
	|	И БанкиУниверсальногоОбмена.ИНН <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Банки.Ссылка,
	|	КлассификаторБанков.ИНН
	|ИЗ
	|	Справочник.Банки КАК Банки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО Банки.Код = КлассификаторБанков.Код
	|ГДЕ
	|	Банки.Ссылка В(&ДоступныеБанки)
	|	И КлассификаторБанков.ИНН <> """"
	|	И НЕ КлассификаторБанков.ПометкаУдаления
	|	И НЕ КлассификаторБанков.ДеятельностьПрекращена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ХозрасчетныйОстатки.Организация КАК Организация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДоступныеБанки.Банк) КАК КоличествоБанков,
	|	МАКСИМУМ(ВТ_ДоступныеБанки.Банк) КАК Банк
	|ИЗ
	|	ВТ_ХозрасчетныйОстатки КАК ВТ_ХозрасчетныйОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДоступныеБанки КАК ВТ_ДоступныеБанки
	|		ПО ВТ_ХозрасчетныйОстатки.ИНН = ВТ_ДоступныеБанки.ИНН
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ХозрасчетныйОстатки.Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Раздел = Перечисления.РазделыПерсонализированныхДанных.ФинОтчетность;
	
	НаборЗаписей = РегистрыСведений.ПерсонализированныеДанные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Раздел.Установить(Раздел);
	
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		Запись.Раздел             = Раздел;
		Запись.НомерСтрокиРаздела = 1;
		Запись.Организация        = Выборка.Организация;
		Запись.ЗначениеПоказателя = Выборка.КоличествоБанков;
		Запись.ДанныеРасшифровки  = Выборка.Банк;
		Запись.ДатаОбновления     = ДатаПолученияДанных;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ДоступКВнешнимРесурсам

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Сервисы = Новый Соответствие;
	Сервисы.Вставить(ПредодобренныйКредитВСбербанкеИмяСервера(), НСтр("ru = 'Информационное взаимодействие с банками'"));
	
	Для каждого Сервис Из Сервисы Цикл
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Сервис.Ключ);
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			ВРег(СтруктураURI.Схема),
			СтруктураURI.Хост,
			СтруктураURI.Порт,
			Сервис.Значение);
		НовыеРазрешения.Добавить(Разрешение);
	КонецЦикла;
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

Процедура ПоказатьЗакрытыйБаннерВсемПользователям(ИдентификаторБаннера)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Если МассивПользователей.Количество() > 0 Тогда
		Для Каждого Пользователь Из МассивПользователей Цикл
			ПоказатьЗакрытыйБаннерПользователю(ИдентификаторБаннера, Пользователь.Имя);
		КонецЦикла;
	Иначе
		ПоказатьЗакрытыйБаннерПользователю(ИдентификаторБаннера);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьЗакрытыйБаннерПользователю(ИдентификаторБаннера, ИмяПользователя = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗакрытыеБаннеры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		НовыйЗакрытыеПользователемБаннеры(),
		,
		ИмяПользователя);
		
	Если ЗакрытыеБаннеры.БаннерыБезОрганизации.Свойство(ИдентификаторБаннера) Тогда
		ЗакрытыеБаннеры.БаннерыБезОрганизации.Удалить(ИдентификаторБаннера);
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		ЗакрытыеБаннеры,
		,
		ИмяПользователя);
	
КонецПроцедуры

#КонецОбласти

#Область КадровыеДокументыЭТК

Функция НовыйБаннерКадровыеДокументыЭТК()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяКадровыеДокументыЭТК();
	Баннер.Идентификатор       = ИдентификаторБаннераКадровыеДокументыЭТК();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиКадровыеДокументыЭТК();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераКадровыеДокументыЭТК();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераКадровыеДокументыЭТК();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Месяц;
	Баннер.ЗависитОтОрганизации = Ложь;
	
	Возврат Баннер;
	
КонецФункции

Функция ИдентификаторБаннераКадровыеДокументыЭТК()
	
	Возврат "КадровыеДокументыЭТК";
	
КонецФункции

Функция ВыполняютсяУсловияБаннераКадровыеДокументыЭТК(ДанныеБаннера, Баннер)
	
	Возврат Истина;
	
КонецФункции

Процедура ПолучитьДанныеБаннераКадровыеДокументыЭТК(ДанныеБаннеров)
	
	ДанныеБаннера = Новый Структура;
	ДанныеБаннера.Вставить("ДатаНачалаПоказаБаннераКадровыеДокументыЭТК", ДатаНачалаПоказаБаннераКадровыеДокументыЭТК());
	
	ДанныеБаннеров.Вставить(ИдентификаторБаннераКадровыеДокументыЭТК(), ДанныеБаннера);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеБаннераКадровыеДокументыЭТК(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераКадровыеДокументыЭТК(Баннер.НавигационнаяСсылка);
	Баннер.ОбстоятельстваЗакрытия.Вставить("ДатаЗакрытия",   ТекущаяДата);
	
КонецПроцедуры

Функция ТекстБаннераКадровыеДокументыЭТК(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru = 'Оформили прием или увольнение сотрудника?'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Не забудьте отправить'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='отчет СЗВ-ТД'"), НавигационнаяСсылка),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='не позднее следующего дня после оформления приказа'"), ));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ДоступностьБаннераКадровыеДокументыЭТК()
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	ЭтоГлавныйБухгалтер = РольДоступна("ДобавлениеИзменениеНастроекБухгалтерии");
	
	Возврат (ЭтоПолноправныйПользователь ИЛИ ЭтоГлавныйБухгалтер)
		И НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсИнтеграцииСБанком");
		
КонецФункции

Функция ИмяКартинкиКадровыеДокументыЭТК()
	
	Возврат "КотВажноеСообщение";
	
КонецФункции

Функция ДатаНачалаПоказаБаннераКадровыеДокументыЭТК()

	ИмяНастройки = ВРег("ДатаНачалаПоказаБаннераКадровыеДокументыЭТК");
	ДатаНачалаПоказаБаннера = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяНастройки, Неопределено);
	Если ДатаНачалаПоказаБаннера = Неопределено Тогда
		ДатаНачалаПоказаБаннера = НачалоДня(ТекущаяДатаСеанса());
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки, Неопределено, ДатаНачалаПоказаБаннера);
	КонецЕсли;
	
	Возврат ДатаНачалаПоказаБаннера;

КонецФункции

#КонецОбласти

#Область ПечатьАртикула

Функция НовыйБаннерПечатьАртикулов(Размещение)
	
	Баннер = НовыйБаннерДляСписка();
	Баннер.Идентификатор = ИдентификаторБаннераПечатьАртикулов();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераПечатьАртикулов();
	Баннер.ДоступенПоПравам = ДоступностьБаннераПечатьАртикулов();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиНастройкаФункциональности();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = "";
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.ДанныеБаннера.Вставить("Размещение", Размещение);
	
	Возврат Баннер;
	
КонецФункции

Функция ИдентификаторБаннераПечатьАртикулов() Экспорт
	
	Возврат "ПечатьАртикулов";
	
КонецФункции

Функция ДоступностьБаннераПечатьАртикулов()
	
	Возврат ПравоДоступа("Редактирование", Метаданные.Константы.ДополнительнаяКолонкаПечатныхФормДокументов);
	
КонецФункции

Функция ПоказательНастройкиПечатиАртикулов() Экспорт
	
	ЗначениеПоказателя = 0;
	НастройкаПечатиАртикулов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	ВключенаНастройкаПоУмолчанию =
		НастройкаПечатиАртикулов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	Если ВключенаНастройкаПоУмолчанию Тогда
		ЗначениеПоказателя = 1;
	КонецЕсли;
	
	ЗакрытыеБаннеры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ПерсонализированныеПредложенияСервисов.ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ПерсонализированныеПредложенияСервисов.ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		ПерсонализированныеПредложенияСервисов.НовыйЗакрытыеПользователемБаннеры());
	Если ЗакрытыеБаннеры.Свойство("БаннерыБезОрганизации")
		И ТипЗнч(ЗакрытыеБаннеры.БаннерыБезОрганизации) = Тип("Структура") Тогда
		Если ЗакрытыеБаннеры.БаннерыБезОрганизации.Свойство(ИдентификаторБаннераПечатьАртикулов()) Тогда
			ЗначениеПоказателя = 0;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДанных = ТаблицаДанных();
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.ЗначениеПоказателя = ЗначениеПоказателя;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ТекстЗапросаПечатьАртикулов(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераПечатьАртикулов();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.НастройкаПечатиАртикулов)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераПечатьАртикулов(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеПоказателя = ДанныеБаннера[0].ЗначениеПоказателя;
	
	Возврат ЗначениеПоказателя > 0;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераПечатьАртикулов(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьДокументов

Функция НастройкиБаннеровПечатныхФормДокументов()
	
	НастройкиБаннеров = НовыеНастройкиБаннеровПечатныхФормДокументов();
	
	ИменаМакетов = МакетыСВозможностьюДополнительнойКолонкиПриПечати();
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		Настройка              = НастройкиБаннеров.Добавить();
		Настройка.ИмяМакета    = ИмяМакета;
		Настройка.Заголовок    = ТекстЗаголовкаДополнительнаяКолонкаАртикул();
		Настройка.Подзаголовок = ТекстПодзаголовкаДобавитьДополнительнуюКолонкуПриПечати();
		Настройка.Гиперссылка  = ТекстГиперссылкиПечатиАртикула();
	КонецЦикла;
	
	Макеты = МакетыСПостояннойДополнительнойКолонкойПриПечати();
	
	Для Каждого Макет Из Макеты Цикл
		Настройка = НастройкиБаннеров.Добавить();
		Настройка.ИмяМакета = Макет.Ключ;
		Настройка.Заголовок = ТекстЗаголовкаПечататьАртикул();
		МассивСтрокПодзаголовка = Новый Массив;
		МассивСтрокПодзаголовка.Добавить(СтрШаблон(НСтр("ru='В колонке ""%1"" можно выводить артикул.'"), Макет.Значение));
		МассивСтрокПодзаголовка.Добавить(Символы.ПС);
		МассивСтрокПодзаголовка.Добавить(НСтр("ru='Управляйте этим в настройке'"));
		Настройка.Подзаголовок = СтрСоединить(МассивСтрокПодзаголовка);
		Настройка.Гиперссылка = ТекстГиперссылкиПечатиАртикула();
	КонецЦикла;
	
	Возврат НастройкиБаннеров;
	
КонецФункции

Функция НовыеНастройкиБаннеровПечатныхФормДокументов()
	
	ОписаниеТипаСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	НастройкиБаннеров = Новый ТаблицаЗначений;
	НастройкиБаннеров.Колонки.Добавить("ИмяМакета", ОписаниеТипаСтрока);
	НастройкиБаннеров.Колонки.Добавить("Заголовок", ОписаниеТипаСтрока);
	НастройкиБаннеров.Колонки.Добавить("Подзаголовок", ОписаниеТипаСтрока);
	НастройкиБаннеров.Колонки.Добавить("Гиперссылка", ОписаниеТипаСтрока);
	
	Возврат НастройкиБаннеров;
	
КонецФункции

Процедура СоздатьРеквизитыИЭлементыФормыДляРазмещенияБаннера(Форма)
	
	РеквизитыФормыБаннер = Новый Массив;
	РеквизитыФормыБаннер.Добавить(Новый РеквизитФормы("Баннер", Новый ОписаниеТипов()));
	РеквизитыФормыБаннер.Добавить(Новый РеквизитФормы("ТекстБаннера", Новый ОписаниеТипов("ФорматированнаяСтрока")));
	Форма.ИзменитьРеквизиты(РеквизитыФормыБаннер);
	
	ГруппаБаннер = Форма.Элементы.Вставить("Баннер", Тип("ГруппаФормы"), , Форма.Элементы.Найти("ГруппаКоманднаяПанель"));
	ГруппаБаннер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаБаннер.РастягиватьПоГоризонтали = Истина;
	ГруппаБаннер.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	ГруппаБаннерСФоном = Форма.Элементы.Добавить("БаннерСФоном", Тип("ГруппаФормы"), ГруппаБаннер);
	ГруппаБаннерСФоном.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаБаннерСФоном.РастягиватьПоГоризонтали = Истина;
	ГруппаБаннерСФоном.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаБаннерСФоном.ОтображатьЗаголовок = Ложь;
	
	ГруппаОжидание = Форма.Элементы.Добавить("ГруппаБаннерОжидание", Тип("ГруппаФормы"), ГруппаБаннерСФоном);
	ГруппаОжидание.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОжидание.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОжидание.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Право;
	ГруппаОжидание.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаОжидание.РастягиватьПоГоризонтали = Ложь;
	ГруппаОжидание.Ширина = 24;
	ГруппаОжидание.ОтображатьЗаголовок = Ложь;
	
	КартинкаОжидание = Форма.Элементы.Добавить("КартинкаОжидание", Тип("ДекорацияФормы"), ГруппаОжидание);
	КартинкаОжидание.Вид = ВидДекорацииФормы.Картинка;
	
	НадписьОжидание = Форма.Элементы.Добавить("НадписьОжидание", Тип("ДекорацияФормы"), ГруппаОжидание);
	НадписьОжидание.Вид = ВидДекорацииФормы.Надпись;
	
	ТекстБаннера = Форма.Элементы.Добавить("ТекстБаннера", Тип("ПолеФормы"), ГруппаБаннерСФоном);
	ТекстБаннера.Вид = ВидПоляФормы.ПолеНадписи;
	ТекстБаннера.ПутьКДанным = "ТекстБаннера";
	ТекстБаннера.Высота = 3;
	ТекстБаннера.РастягиватьПоГоризонтали = Истина;
	ТекстБаннера.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ТекстБаннера.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	ТекстБаннера.АвтоМаксимальнаяШирина = Ложь;
	ТекстБаннера.МаксимальнаяШирина = 0;
	ТекстБаннера.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ТекстБаннера.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
	
	КартинкаБаннера = Форма.Элементы.Добавить("КартинкаБаннера", Тип("ДекорацияФормы"), ГруппаБаннерСФоном);
	КартинкаБаннера.Вид = ВидДекорацииФормы.Картинка;
	КартинкаБаннера.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	КартинкаБаннера.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	КартинкаБаннера.Ширина = 26;
	КартинкаБаннера.Высота = 3;
	
	ГруппаКнопкиБаннера = Форма.Элементы.Добавить("ГруппаКнопкиБаннера", Тип("ГруппаФормы"), ГруппаБаннерСФоном);
	ГруппаКнопкиБаннера.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКнопкиБаннера.РастягиватьПоВертикали = Истина;
	ГруппаКнопкиБаннера.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	ГруппаКнопкиБаннера.ОтображатьЗаголовок = Ложь;
	
	КартинкаЗакрытьБаннер = Форма.Элементы.Добавить("КартинкаЗакрытьБаннер", Тип("ДекорацияФормы"), ГруппаКнопкиБаннера);
	КартинкаЗакрытьБаннер.Вид = ВидДекорацииФормы.Картинка;
	КартинкаЗакрытьБаннер.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	КартинкаЗакрытьБаннер.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
	КартинкаЗакрытьБаннер.Гиперссылка = Истина;
	КартинкаЗакрытьБаннер.Картинка = БиблиотекаКартинок.Очистить;
	КартинкаЗакрытьБаннер.УстановитьДействие("Нажатие", "Подключаемый_ВыполнитьКоманду");
	
	ГруппаКнопкиПереключенияБаннера = Форма.Элементы.Добавить("ГруппаКнопкиПереключенияБаннера", Тип("ГруппаФормы"), ГруппаКнопкиБаннера);
	ГруппаКнопкиПереключенияБаннера.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКнопкиПереключенияБаннера.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
	
	КартинкаПредыдущийБаннер = Форма.Элементы.Добавить("КартинкаПредыдущийБаннер", Тип("ДекорацияФормы"), ГруппаКнопкиПереключенияБаннера);
	КартинкаПредыдущийБаннер.Вид = ВидДекорацииФормы.Картинка;
	КартинкаПредыдущийБаннер.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
	КартинкаПредыдущийБаннер.Гиперссылка = Истина;
	КартинкаПредыдущийБаннер.Картинка = БиблиотекаКартинок.ПредыдущийБаннер;
	
	КартинкаСледующийБаннер = Форма.Элементы.Добавить("КартинкаСледующийБаннер", Тип("ДекорацияФормы"), ГруппаКнопкиПереключенияБаннера);
	КартинкаСледующийБаннер.Вид = ВидДекорацииФормы.Картинка;
	КартинкаСледующийБаннер.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
	КартинкаСледующийБаннер.Гиперссылка = Истина;
	КартинкаСледующийБаннер.Картинка = БиблиотекаКартинок.СледующийБаннер;
	
КонецПроцедуры

Функция МакетыСВозможностьюДополнительнойКолонкиПриПечати()
	
	ИменаМакетов = Новый Массив;
	
	ИменаМакетов.Добавить("СчетЗаказ");
	ИменаМакетов.Добавить("СчетПокупателю");
	ИменаМакетов.Добавить("Накладная");
	
	Возврат ИменаМакетов;
	
КонецФункции

Функция МакетыСПостояннойДополнительнойКолонкойПриПечати()
	
	Макеты = Новый Структура;
	
	Макеты.Вставить("УПДСтатус1", НСтр("ru = 'код товара'"));
	Макеты.Вставить("УПДСтатус1_981", НСтр("ru = 'код товара'"));
	Макеты.Вставить("УПДСтатус2", НСтр("ru = 'код товара'"));
	Макеты.Вставить("УПДСтатус2_981", НСтр("ru = 'код товара'"));
	Макеты.Вставить("ТОРГ12_БезУслуг", НСтр("ru = 'код'"));
	Макеты.Вставить("ТОРГ12", НСтр("ru = 'код'"));
	Макеты.Вставить("ТТН", НСтр("ru = 'Артикул или номер по прейскуранту'"));
	
	Возврат Макеты;
	
КонецФункции

Функция ТекстБаннераПечатьАртикулов(Настройка)
	
	ТекстЗаголовка = НовыйЗаголовок(Настройка.Заголовок);
	
	КоличествоСтрокПодзаголовка = СтрЧислоСтрок(Настройка.Подзаголовок);
	
	Если КоличествоСтрокПодзаголовка = 1 Тогда
		ТекстПодзаголовка = Новый ФорматированнаяСтрока(
			НовыйСтрокаБаннера(Настройка.Подзаголовок),
			НовыйСтрокаБаннера(" "),
			НовыйСтрокаБаннера(Настройка.Гиперссылка, УправлениеПечатьюБП.ГиперссылкаФормыНастройкиПечатиАртикулов()));
			
		Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	Иначе
		ПустаяСтрока = Новый ФорматированнаяСтрока(" ", Новый Шрифт(, 2));
		
		СтрокиПодзаголовка = СтрРазделить(Настройка.Подзаголовок, Символы.ПС);
		ТекстПодзаголовка = Новый ФорматированнаяСтрока(
			НовыйСтрокаБаннера(СтрокиПодзаголовка[0]),
			Символы.ПС, ПустаяСтрока, Символы.ПС,
			НовыйСтрокаБаннера(СтрокиПодзаголовка[1]),
			НовыйСтрокаБаннера(" "),
			НовыйСтрокаБаннера(Настройка.Гиперссылка, УправлениеПечатьюБП.ГиперссылкаФормыНастройкиПечатиАртикулов()));
		
		Возврат Новый ФорматированнаяСтрока(
			ТекстЗаголовка, Символы.ПС, ПустаяСтрока, Символы.ПС, ТекстПодзаголовка);
	КонецЕсли;
	
КонецФункции

Функция ТекстЗаголовкаДополнительнаяКолонкаАртикул()
	
	Возврат НСтр("ru = 'Хотите выводить колонку ""Артикул""?'");
	
КонецФункции

Функция ТекстЗаголовкаПечататьАртикул()
	
	Возврат НСтр("ru = 'Хотите печатать артикул?'");
	
КонецФункции

Функция ТекстГиперссылкиПечатиАртикула()
	
	Возврат НСтр("ru='Печати артикулов'");
	
КонецФункции

Функция ТекстПодзаголовкаДобавитьДополнительнуюКолонкуПриПечати()
	
	Возврат НСтр("ru='Можно добавить колонку с артикулом или кодом в настройке'");
	
КонецФункции

#КонецОбласти

#Область АнтикризисПересчитатьВзносы

Функция НовыйБаннерАнтикризисПересчитатьВзносы()
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяАнтикризисПересчитатьВзносы();
	Баннер.Идентификатор        = ИдентификаторБаннераАнтикризисПересчитатьВзносы();
	Баннер.ИмяКартинкаЛоготипа  = ИмяКартинкиАнтикризис();
	Баннер.ДоступенПоПравам     = ДоступностьБаннераАнтикризис();
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	Баннер.ЦветФонаБаннер       = ЦветФонаБаннераАнтикризисПересчитатьВзносы();
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.Исключительный       = Истина;
	
	Возврат Баннер;
	
КонецФункции

Функция ИдентификаторБаннераАнтикризисПересчитатьВзносы()
	
	Возврат "АнтикризисПересчитатьВзносы";
	
КонецФункции

Функция ТекстЗапросаПересчитатьВзносы(Запрос, СтруктураБаннеров, НомераТаблиц, Организация)
	
	Идентификатор = ИдентификаторБаннераАнтикризисПересчитатьВзносы();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиПродленияСроковНалоговОтчетов.Организация КАК Организация,
	|	НастройкиПродленияСроковНалоговОтчетов.ДеятельностьОтнесенаКПострадавшимОтКоронавируса КАК ДеятельностьОтнесенаКПострадавшимОтКоронавируса
	|ИЗ
	|	РегистрСведений.НастройкиПродленияСроковНалоговОтчетов КАК НастройкиПродленияСроковНалоговОтчетов
	|ГДЕ
	|	НастройкиПродленияСроковНалоговОтчетов.ДеятельностьОтнесенаКПострадавшимОтКоронавируса";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	Если ЗначениеЗаполнено(Организация) Тогда
		ОператорЗапроса.Отбор.Добавить("НастройкиПродленияСроковНалоговОтчетов.Организация = &Организация");
	Иначе
		ОператорЗапроса.Отбор.Добавить("НастройкиПродленияСроковНалоговОтчетов.Организация В (&СписокОрганизаций)");
	КонецЕсли;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераАнтикризисПересчитатьВзносы(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокОрганизаций = ДанныеБаннера.ВыгрузитьКолонку("Организация");
	ПериодОсвобождения = НалоговыйУчет.ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
	
	ЕстьНачислениеЗарплаты = Ложь;
	Для Каждого Организация Из СписокОрганизаций Цикл
		Если УчетЗарплаты.ЕстьНачислениеЗарплаты(Организация, ПериодОсвобождения.Начало, ПериодОсвобождения.Конец) Тогда
			ЕстьНачислениеЗарплаты = Истина;
			Баннер.ДанныеБаннера.Вставить("Организация", Организация);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьНачислениеЗарплаты;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераАнтикризисПересчитатьВзносы(Баннер, ДанныеБаннера)
	
	Баннер.ТекстБаннера = ТекстБаннераАнтикризисПересчитатьВзносы();
	// После закрытия баннер можно исключать из списка баннеров.
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Истина);
	
КонецПроцедуры

Функция ТекстБаннераАнтикризисПересчитатьВзносы()
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru = 'Пересчитайте взносы за 2 квартал 2020 года'"));
	
	ТекстПодзаголовка = НовыйСтрокаБаннера(НСтр("ru='Документ Начисление зарплаты - Еще (в табличной части) - Пересчитать взносы'"));
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ЦветФонаБаннераАнтикризисПересчитатьВзносы()

	Возврат "НекорректныйКонтрагентЦветФонаВСписке";

КонецФункции

#КонецОбласти

