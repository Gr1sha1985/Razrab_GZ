#Область ПрограммныйИнтерфейс

// Возвращает таблицу свойств предопределенных блоков
//
// Возвращаемое значени:
//   ТаблицаЗначений - описание полей см. в методе НоваяТаблицаБлоков()
//
Функция ПредопределенныеБлоки() Экспорт
	
	ТаблицаБлоков = НоваяТаблицаБлоков();
	
	ИспользуетсяРазделениеДанных = РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных()
		И РаботаВМоделиСервиса.РазделениеВключено();
	
	// Монитор основных показателей
	Если ОстаткиДенежныхСредствДоступны() Тогда
		ДобавитьОстаткиДенежныхСредств(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДокументыРеализации")
		И ПокупателиДоступны() Тогда
		ДобавитьПокупатели(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДокументыПоступления")
		И ПоставщикиДоступны() Тогда
		ДобавитьПоставщики(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДокументыРеализации")
		И ПродажиДоступны() Тогда
		ДобавитьПродажи(ТаблицаБлоков);
	КонецЕсли;
	
	// Список задач
	Если ЗадачиДоступны() Тогда
		ДобавитьЗадачи(ТаблицаБлоков);
	КонецЕсли;
	
	// Мои задачи
	Если МоиЗадачиДоступны() Тогда
		ДобавитьМоиЗадачи(ТаблицаБлоков);
	КонецЕсли;
	
	// 1С-Отчетность
	Если РегламентированнаяОтчетностьБП.Используется1СОтчетность() И ОтчетностьДоступна() Тогда
		ДобавитьОтчетность(ТаблицаБлоков);
	КонецЕсли;
	
	// БИП
	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() И Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		ДобавитьНовости(ТаблицаБлоков);
	КонецЕсли;
	
	Если МетодическаяПоддержкаДоступна() И Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		ДобавитьМетодическаяПоддержка(ТаблицаБлоков);
	КонецЕсли;
	
	Если ИспользуетсяРазделениеДанных И Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		// В режиме интеграции предупреждения от менеджера сервиса выводятся в баннере.
		ДобавитьПоддержкаСервиса(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСервисСПАРКРиски")
		И СПАРКРиски.ИспользованиеРазрешено() Тогда
		Добавить1СПАРКРиски(ТаблицаБлоков);
	КонецЕсли;
	
	Если КурсыВалютДоступны() Тогда
		ДобавитьКурсыВалют(ТаблицаБлоков);
	КонецЕсли;
	
	Возврат ТаблицаБлоков;
	
КонецФункции

#КонецОбласти

#Область ДанныеИнформационнойПанели

#Область Задачи

Процедура ДобавитьЗадачи(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаЗадачи(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗадачи(),
		"БлокиИнформационнойПанели.Задачи",
		"БлокиИнформационнойПанели.ОбновитьЗадачи",
		СвойстваЗадачи());
	
КонецПроцедуры

Функция СвойстваЗадачи()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоЗадач() - 1;
	
	Свойства = "Задачи_Заголовок, Задачи_Просрочено";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияЗадачи(Индекс);

	КонецЦикла;
	
	Возврат Свойства;

КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьЗадачи(Параметры) Экспорт

	КалендарьБухгалтера.ОбновитьЗадачи(Параметры.Организация, Параметры.БыстроеОбновление);	
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Задачи(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Задачи_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗадачи()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваЗадачи());
	Результат.Вставить("Задачи_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗадачи()));
	
	ДанныеЗадачиБухгалтера = КалендарьБухгалтера.ДанныеЗадачиБухгалтера(Параметры.Организация);
	
	АктуальныеЗадачи = ДанныеЗадачиБухгалтера.АктуальныеЗадачи;

	ШрифтОбычногоСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветОбычногоСобытия  = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	// Просроченные задачи
	Просрочено = ПредставлениеПросроченныхЗадач(ДанныеЗадачиБухгалтера);
	
	Результат.Вставить("Задачи_Просрочено", Просрочено);
	
	// Актуальные задачи
	Если АктуальныеЗадачи.Количество() > 0 Тогда

		КоличествоЗадач = БлокиИнформационнойПанелиКлиентСервер.КоличествоЗадач();
		
		Актуальные = ПредставлениеАктуальныхЗадач(АктуальныеЗадачи);

		Для Индекс = 0 По Мин(Актуальные.ВГраница(), КоличествоЗадач - 1) Цикл
			Результат.Вставить(
				БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияЗадачи(Индекс),
				Актуальные[Индекс]);
		КонецЦикла;
		
	Иначе
		
		НаименованиеЗадачи = Новый ФорматированнаяСтрока(
			НСтр("ru = 'На ближайший месяц задач нет'"),
			ШрифтОбычногоСобытия, ЦветОбычногоСобытия);
		
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияЗадачи(0), НаименованиеЗадачи);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ПредставлениеАктуальныхЗадач(АктуальныеЗадачи)
	
	Представления = Новый Массив();
	
	ОтборЗадач = Новый Структура("ОтносительныйСрок, ОтносительныйСрокПорядок", 0, 0);
	
	КоличествоСвободныхСтрок = БлокиИнформационнойПанелиКлиентСервер.КоличествоЗадач();
	
	ИндексСтроки = 0;
	
	ПараметрыПредметаИсчисления = Перечисления.ВидыДействийКалендаряБухгалтера.ПредметыИсчисления();
	
	ОтносительныеСрокиЗадач = СгруппироватьЗадачиПоСрокам(АктуальныеЗадачи);
	
	КоличествоОставшихсяПериодов = ОтносительныеСрокиЗадач.Количество();
	
	ШрифтТекста = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	
	ЦветОбычногоСобытия        = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветВажногоСобытия         = ЦветаСтиля.ВажноеСобытие;
	ЦветПриближающегосяСобытия = ЦветаСтиля.ПриближающеесяСобытие;
	
	ПредупреждатьОтправкаОтчетаОграничена = Ложь;
	// Предупреждаем, только если обычно есть возможность отправить отчеты оперативно
	Если ОтносительныеСрокиЗадач.Найти(Истина, "ПредупредитьОтправкаОтчетаОграничена") <> Неопределено Тогда
		ПредупреждатьОтправкаОтчетаОграничена = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом();
	КонецЕсли;
	
	Для Каждого ОтносительныйСрокЗадачи Из ОтносительныеСрокиЗадач Цикл
		
		ОтносительныйСрок = ОтносительныйСрокЗадачи.ОтносительныйСрок;
		
		// Ищем строки с приоритетом
		ОтборЗадач.ОтносительныйСрок        = ОтносительныйСрок;
		ОтборЗадач.ОтносительныйСрокПорядок = ОтносительныйСрокЗадачи.ОтносительныйСрокПорядок;
		
		НайденныеЗадачи = АктуальныеЗадачи.Скопировать(ОтборЗадач);
		НайденныеЗадачи.Сортировать("ОсталосьДней Возр, ДействиеПорядок Возр");
		
		Если ОтносительныйСрок = Перечисления.ОтносительныеСроки.Сегодня Тогда
			ЦветТекста = ЦветВажногоСобытия;
		ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.Завтра Тогда
			ЦветТекста = ЦветПриближающегосяСобытия;
		Иначе
			ЦветТекста = ЦветОбычногоСобытия;
		КонецЕсли;
		
		Задача = НайденныеЗадачи[0];
		ПредставлениеСрока = ПредставлениеСрока(ОтносительныйСрок, Задача.ОсталосьДней);
		
		// "Приблизим" задачи, связанные с отчетами, которые нельзя представить электронно - заранее отметим их цветом.
		Если ПредупреждатьОтправкаОтчетаОграничена 
			И ОтносительныйСрокЗадачи.ПредупредитьОтправкаОтчетаОграничена
			И ЦветТекста = ЦветОбычногоСобытия Тогда
			ЦветТекста = ЦветПриближающегосяСобытия;
		КонецЕсли;
			
		Если НайденныеЗадачи.Количество() = 1 Тогда
			НаименованиеЗадачи = НаименованиеЗадачиПолностью(НайденныеЗадачи[0], ПредставлениеСрока, ЦветТекста, ШрифтТекста);
			Представления.Добавить(НаименованиеЗадачи);
			КоличествоСвободныхСтрок = КоличествоСвободныхСтрок - 1;
			ИндексСтроки = ИндексСтроки + 1;
		Иначе
			КоличествоДоступныхСтрок = Макс(КоличествоСвободныхСтрок - КоличествоОставшихсяПериодов + 1, 1);
			
			ЗадачиВНесколькоСтрок = РаспределитьЗадачиПоСтрокам(НайденныеЗадачи, КоличествоДоступныхСтрок, ПараметрыПредметаИсчисления, ПредставлениеСрока, ЦветТекста, ШрифтТекста);
			Для Каждого НаименованиеЗадачи Из ЗадачиВНесколькоСтрок Цикл
				Представления.Добавить(НаименованиеЗадачи);
				КоличествоСвободныхСтрок = КоличествоСвободныхСтрок - 1;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		КонецЕсли;
		
		КоличествоОставшихсяПериодов = КоличествоОставшихсяПериодов - 1;
		
		Если КоличествоСвободныхСтрок = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Представления;
	
КонецФункции

// Группирует данные о задачах к выполнению по срокам.
//
// Параметры:
//  АктуальныеЗадачи - ТаблицаЗначений - см. КалендарьБухгалтера.НоваяТаблицаЗадачИнформационнойПанели()
// 
// Возвращаемое значение:
//  ТаблицаЗначений - группы задач по срокам. Колонки:
//  * ОтносительныйСрок                    - ПеречислениеСсылка.ОтносительныеСроки 
//  * ОтносительныйСрокПорядок             - Число
//  * ПредупредитьОтправкаОтчетаОграничена - Булево - Истина, если близится срок предупреждения сроков отправки
//                                           и хотя бы у одной из задач с этим сроком отправка ограничена.
//
Функция СгруппироватьЗадачиПоСрокам(ЗадачИнформационнойПанели)
	
	ОтносительныеСрокиЗадач = ЗадачИнформационнойПанели.Скопировать(,"ОтносительныйСрок, ОтносительныйСрокПорядок, ОсталосьДней, ОтправкаОтчетаОграничена");
	
	ОтносительныеСрокиЗадач.Колонки.Добавить("ПредупредитьОтправкаОтчетаОграничена", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Задача Из ОтносительныеСрокиЗадач.НайтиСтроки(Новый Структура("ОтправкаОтчетаОграничена", Истина)) Цикл
		
		Если Задача.ОсталосьДней > ЗадачиБухгалтераКлиентСервер.СрокПредупрежденияПриОграниченииСпособовОтправки() Тогда
			Продолжить;
		КонецЕсли;
		
		Задача.ПредупредитьОтправкаОтчетаОграничена = Истина;
		
	КонецЦикла;
	
	ОтносительныеСрокиЗадач.Свернуть("ОтносительныйСрок, ОтносительныйСрокПорядок", "ПредупредитьОтправкаОтчетаОграничена");
	ОтносительныеСрокиЗадач.Сортировать("ОтносительныйСрокПорядок");
	
	Возврат ОтносительныеСрокиЗадач;
	
КонецФункции

Функция ПредставлениеПросроченныхЗадач(ДанныеЗадачиБухгалтера)
	
	ПараметрыПредметаИсчисления = НСтр("ru = 'задача, задачи, задач'");
	
	ШрифтОбычногоСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветОбычногоСобытия  = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	ШрифтВажногоСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветВажногоСобытия  = ЦветаСтиля.ВажноеСобытие;
	
	ШрифтПриближающегосяСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветПриближающегосяСобытия  = ЦветаСтиля.ПриближающеесяСобытие;
	
	ОтборПросроченныхЗадач = Новый Структура("ОтносительныйСрок", Перечисления.ОтносительныеСроки.Просрочено);
	
	ПросроченнаяЗадача = ДанныеЗадачиБухгалтера.ПросроченнаяЗадача;
	
	КоличествоПросроченных = ДанныеЗадачиБухгалтера.КоличествоПросроченных;
	
	Если КоличествоПросроченных = 0 Тогда
		
		Представление = Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = 'Просроченных %1 нет'"), МножественноеПредставление(ПараметрыПредметаИсчисления)),
			ШрифтОбычногоСобытия, ЦветОбычногоСобытия);
		
	ИначеЕсли КоличествоПросроченных = 1 Тогда
		
		ПредставлениеСрока = Формат(ПросроченнаяЗадача.Срок, "Л=ru; ДФ='d MMMM'");
		
		// Исключим возможность переноса строк в веб-клиенте
		НаименованиеЗадачиБезПробелов = СтрокаБезПереносов(
			СтрШаблон(НСтр("ru = '%1 %2'"), ПредставлениеСрока, ПросроченнаяЗадача.Наименование));
		
		Представление = Новый ФорматированнаяСтрока(
			НаименованиеЗадачиБезПробелов,
			ШрифтВажногоСобытия, ЦветВажногоСобытия);
		
	Иначе
		
		КоличествоПросроченныхПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			КоличествоПросроченных, ПараметрыПредметаИсчисления);
		
		Представление = Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = 'Просрочено: %1'"), КоличествоПросроченныхПрописью),
			ШрифтВажногоСобытия, ЦветВажногоСобытия);
		
	КонецЕсли;

	Возврат Представление;
	
КонецФункции

Функция РаспределитьЗадачиПоСтрокам(Задачи, КоличествоСтрок, ПараметрыПредметаИсчисления, ПредставлениеСрока, ЦветТекста, ШрифтТекста)
	
	СтрокиЗадач = Новый Массив;
	
	НаименованияЗадач = Новый Соответствие();
	Для ИндексЗадачи = 1 По КоличествоСтрок - 1 Цикл
		
		Если Задачи.Количество() > 0 Тогда
			Если НаименованияЗадач[Задачи[0].Наименование] <> Неопределено Тогда
				// Такое наименование уже выведено, повторно выводить не будем.
				Продолжить;
			КонецЕсли;
			СтрокиЗадач.Добавить(НаименованиеЗадачиПолностью(Задачи[0], ПредставлениеСрока, ЦветТекста, ШрифтТекста));
			НаименованияЗадач.Вставить(Задачи[0].Наименование, Истина);
			Задачи.Удалить(0);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УникальноеНаименование Из НаименованияЗадач Цикл
		Задача = Задачи.Найти(УникальноеНаименование.Ключ, "Наименование");
		// В этом периоде строка с такой задачей уже выведена.
		Если Задача <> Неопределено Тогда
			Задачи.Удалить(Задача);
		КонецЕсли;
	КонецЦикла;
	
	Если Задачи.Количество() = 1 Тогда
		СтрокиЗадач.Добавить(НаименованиеЗадачиПолностью(Задачи[0], ПредставлениеСрока, ЦветТекста, ШрифтТекста));
	Иначе
		СтрокиЗадач.Добавить(ВсеЗадачиОднойСтрокой(Задачи, ПараметрыПредметаИсчисления, ПредставлениеСрока, ЦветТекста, ШрифтТекста));
	КонецЕсли;
	
	Возврат СтрокиЗадач;
	
КонецФункции

Функция ВсеЗадачиОднойСтрокой(Задачи, ПараметрыПредметаИсчисления, ПредставлениеСрока, ЦветТекста, ШрифтТекста)
	
	Действия = Задачи.Скопировать();
	Действия.Колонки.Добавить("Количество");
	Действия.ЗаполнитьЗначения(1, "Количество");
	Действия.Свернуть("Действие, ДействиеПорядок", "Количество");
	
	Действия.Сортировать("ДействиеПорядок Возр");
	
	СоставСтроки = Новый Массив;
	СоставСтроки.Добавить(ПредставлениеСрока);
	РегулярныйПлатеж = Перечисления.ВидыДействийКалендаряБухгалтера.РегулярныйПлатеж;
	
	Для Каждого Задача Из Действия Цикл

		Если Задача.Количество = 1 Тогда
			НайденныеЗадачи = Задачи.НайтиСтроки(Новый Структура("Действие, ДействиеПорядок", Задача.Действие, Задача.ДействиеПорядок));
			Если Задача.Действие <> РегулярныйПлатеж И НайденныеЗадачи.Количество() > 0 Тогда
				КоличествоЗадачПрописью = НайденныеЗадачи[0].Наименование;
			Иначе
				КоличествоЗадачПрописью = НРег(Задача.Действие);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Задача.Действие) = Тип("Строка") Тогда
			КоличествоЗадачПрописью = Задачи.Найти(Задача.Действие,"Действие").Наименование;
		Иначе
			КоличествоЗадачПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				Задача.Количество, НРег(ПараметрыПредметаИсчисления.Получить(Задача.Действие)));
		КонецЕсли;
		
		// Все найденные задачи сворачиваем в одну строку
		СоставСтроки.Добавить(Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = ' %1'"),КоличествоЗадачПрописью),
			ШрифтТекста, ЦветТекста));
			
		СоставСтроки.Добавить(",");

	КонецЦикла;
	
	СоставСтроки.Удалить(СоставСтроки.ВГраница());
	
	Если СоставСтроки.Количество() > 2 Тогда
		СоставСтроки.Установить(СоставСтроки.ВГраница() - 1, НСтр("ru = ' и'"));
	КонецЕсли;
	
	НаименованиеЗадачиБезПробелов = СтрокаБезПереносов(СтрСоединить(СоставСтроки, ""));
	
	Возврат Новый ФорматированнаяСтрока(
		НаименованиеЗадачиБезПробелов,
		ШрифтТекста,
		ЦветТекста);

КонецФункции

Функция НаименованиеЗадачиПолностью(Задача, ПредставлениеСрока, ЦветТекста, ШрифтТекста)
	
	// Исключим возможность переноса строк в веб-клиенте
	НаименованиеЗадачиБезПробелов = СтрокаБезПереносов(
		СтрШаблон(НСтр("ru = '%1 %2'"), ПредставлениеСрока, Задача.Наименование));
	
	Возврат Новый ФорматированнаяСтрока(
		НаименованиеЗадачиБезПробелов,
		ШрифтТекста,
		ЦветТекста);

КонецФункции

// Возвращает Истина, если для текущего пользователя можно отображать блок "Задачи" на начальной странице.
// Возможность отображения блока зависит от прав пользователя и состояния регламентного задания по обновлению задач бухгалтера.
//
Функция ЗадачиДоступны()
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.СписокЗадач) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		// В режиме сервиса задачи бухгалтера обновляются всегда.
		Возврат Истина;
	КонецЕсли;
	
	// В "коробках" блок с задачами бухгалтера считаем доступным, если включено соответствующее регламентное задание.
	УстановитьПривилегированныйРежим(Истина);
	ЗаданиеИспользуется = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(Метаданные.РегламентныеЗадания.ОбновлениеЗадачБухгалтера);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗаданиеИспользуется;
	
КонецФункции

#КонецОбласти

#Область МоиЗадачи

Процедура ДобавитьМоиЗадачи(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаМоиЗадачи(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМоиЗадачи(),
		"БлокиИнформационнойПанели.МоиЗадачи",
		"БлокиИнформационнойПанели.ОбновитьМоиЗадачи",
		СвойстваМоиЗадачи());
	
КонецПроцедуры

Функция СвойстваМоиЗадачи()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоМоиЗадачи() - 1;
	
	Свойства = "МоиЗадачи_Заголовок";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияМоиЗадачи(Индекс);
	КонецЦикла;
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьМоиЗадачи(Параметры) Экспорт
	
	// Обновление списка моих задач не предусмотрено.
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура МоиЗадачи(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("МоиЗадачи_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМоиЗадачи()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваМоиЗадачи());
	Результат.Вставить("МоиЗадачи_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМоиЗадачи()));
	
	ДанныеМоиЗадачи = МоиЗадачи.ДанныеМоиЗадачи();
	
	СписокМоихЗадач = ДанныеМоиЗадачи.Задачи;
	
	ШрифтОбычногоСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ШрифтВажногоСобытия = Новый Шрифт(ШрифтОбычногоСобытия, , , Истина);
	ЦветОбычногоСобытия  = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветВажногоСобытия  = ЦветаСтиля.ВажноеСобытие;
	
	КоличествоСтрокВиджета = БлокиИнформационнойПанелиКлиентСервер.КоличествоМоиЗадачи();
	// Если помещаются все задачи - выводим все, которые есть.
	// Если не помещаются - выводим все, что можем, а в последней строке выводим общее количество оставшихся задач.
	МожноВывестиВсеЗадачи = СписокМоихЗадач.Количество() <= КоличествоСтрокВиджета;
	МожноВывестиЗадач = ?(МожноВывестиВсеЗадачи, СписокМоихЗадач.Количество(), КоличествоСтрокВиджета - 1);
	
	ИндексТекущейСтрокиВиджета = -1;
	
	Для Каждого МояЗадача Из СписокМоихЗадач Цикл
		
		ИндексТекущейСтрокиВиджета = ИндексТекущейСтрокиВиджета + 1;
		
		ЦветЗадачи = ?(МояЗадача.Просрочена, ЦветВажногоСобытия, ЦветОбычногоСобытия);
		ШрифтЗадачи = ?(МояЗадача.Важная, ШрифтВажногоСобытия, ШрифтОбычногоСобытия);
		
		НаименованиеЗадачи = СокрЛП(СтрШаблон("%1 %2", МояЗадача.ОтносительныйСрок, 
			ОбщегоНазначенияБПКлиентСервер.ДекапитализироватьСтроку(МояЗадача.Наименование)));
		Результат.Вставить(
			БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияМоиЗадачи(ИндексТекущейСтрокиВиджета),
			Новый ФорматированнаяСтрока(НаименованиеЗадачи, ШрифтЗадачи, ЦветЗадачи));
		
		Если ИндексТекущейСтрокиВиджета + 1 >= МожноВывестиЗадач Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не МожноВывестиВсеЗадачи Тогда
		
		ИндексТекущейСтрокиВиджета = ИндексТекущейСтрокиВиджета + 1;
		
		// Это последняя свободная строка, при этом сообщений нужно вывести больше, чем одно
		ЕщеЗадач = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			СписокМоихЗадач.Количество() - МожноВывестиЗадач, НСтр("ru = 'задача, задачи, задач'"));
		ТекстСообщения = СтрШаблон(НСтр("ru = 'и еще %1'"), ЕщеЗадач);
		
		Результат.Вставить(
			БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияМоиЗадачи(ИндексТекущейСтрокиВиджета),
			Новый ФорматированнаяСтрока(ТекстСообщения, ШрифтОбычногоСобытия, ЦветОбычногоСобытия));
		
	КонецЕсли;
	
	Если СписокМоихЗадач.Количество() = 0 Тогда
		
		НаименованиеЗадачи = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Задач для выполнения нет'"),
			ШрифтОбычногоСобытия, ЦветОбычногоСобытия);
		
		ИндексТекущейСтрокиВиджета = ИндексТекущейСтрокиВиджета + 1;
		
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияМоиЗадачи(ИндексТекущейСтрокиВиджета), НаименованиеЗадачи);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

// Возвращает Истина, если для текущего пользователя можно отображать блок "Задачи" на начальной странице.
// Возможность отображения блока зависит от прав пользователя и состояния регламентного задания по обновлению задач бухгалтера.
//
Функция МоиЗадачиДоступны()
	
	Возврат МоиЗадачи.МоиЗадачиДоступны();
	
КонецФункции

#КонецОбласти

#Область Отчетность

Процедура ДобавитьОтчетность(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОтчетность(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОтчетность(),
		"БлокиИнформационнойПанели.Отчетность",
		"БлокиИнформационнойПанели.ОбновитьОтчетность",
		СвойстваОтчетность());
	
КонецПроцедуры

Функция СвойстваОтчетность()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоСообщенийОтчетности() - 1;
	
	Свойства = "Отчетность_Заголовок, Отчетность_ОтчетностьПодключена";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияСообщения(Индекс);
	КонецЦикла;
	
	Возврат Свойства;
	
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Отчетность(Параметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Отчетность_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОтчетность()));
	Результат.Вставить("Отчетность_ОтчетностьПодключена", 
		ИнтерфейсыВзаимодействияБРО.ОрганизацияИмеетУчетнуюЗапись(Параметры.Организация));
	
	Если Параметры.Инициализация Тогда
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	КоличествоСтрокСообщений = БлокиИнформационнойПанелиКлиентСервер.КоличествоСообщенийОтчетности();
	
	ПредставленияСтрок = Новый Структура();
	Для ИндексСтроки = 0 По КоличествоСтрокСообщений - 1 Цикл
		ПредставленияСтрок.Вставить("Наименование" + ИндексСтроки, "");
	КонецЦикла;
	
	Если Результат.Отчетность_ОтчетностьПодключена Тогда
		ЗаполнитьПредставленияСообщенийОтчетности(
			Параметры.Организация,
			КоличествоСтрокСообщений,
			ПредставленияСтрок);
	КонецЕсли;
	
	Для Индекс = 0 По КоличествоСтрокСообщений - 1 Цикл
		
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияСообщения(Индекс), ПредставленияСтрок["Наименование" + Индекс]);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьОтчетность(Параметры) Экспорт
	
	// Обновление данных не требуется
	
КонецПроцедуры

Процедура ЗаполнитьПредставленияСообщенийОтчетности(Организация, КоличествоСтрок, Представления)
	
	СообщенияОтчетности = ЭлектронныйДокументооборотСКонтролирующимиОрганамиБП.ПолучитьНовыеСообщенияОтчетности(Организация);
	
	ТипыСообщений = РазделитьСообщенияПоТипам(СообщенияОтчетности);
	
	Если ТипыСообщений.Количество()=0 Тогда
		ПараметрыВывода = ПараметрыВыводаПоТипуСообщений("СообщенийНет");
		Представления.Наименование0 = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Новых сообщений нет'"),
			ПараметрыВывода.Шрифт, ПараметрыВывода.Цвет);
		Возврат;
	КонецЕсли;
	
	КоличествоСвободныхСтрок = КоличествоСтрок;
	ИндексСтроки = 0;
	КоличествоТиповДляВывода = ТипыСообщений.Количество();
	Для НомерТипаСообщения = 0 По ТипыСообщений.Количество()-1 Цикл
		
		Если КоличествоСвободныхСтрок = 0 Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоТиповДляВывода = КоличествоТиповДляВывода - 1;
		
		ТипСообщений = ТипыСообщений[НомерТипаСообщения];
		ПараметрыВывода = ПараметрыВыводаПоТипуСообщений(ТипСообщений.ТипСообщения);
		
		Если ПараметрыВывода.ВсегдаГруппировать Тогда
			ГруппироватьСообщения = ТипСообщений.КоличествоСообщений > 1;
		Иначе
			// Определим, можно ли вывести все сообщения в свободные строки
			ГруппироватьСообщения = ТипСообщений.КоличествоСообщений + КоличествоТиповДляВывода > КоличествоСвободныхСтрок;
			// Если все сообщения не умещаются, но это последний тип сообщений и количество свободных строк больше 1,
			// то сообщения в группу не сворачиваются, а в последней строке указывается количество оставшихся сообщений
			Если КоличествоТиповДляВывода = 0
				И ГруппироватьСообщения
				И КоличествоСвободныхСтрок > 1 Тогда
				ГруппироватьСообщения = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ГруппироватьСообщения Тогда
			
			// Не хватает строк для вывода каждого сообщения данного типа и остальных типов данных.
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"), 
								ПараметрыВывода.Префикс, 
								СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
									ТипСообщений.КоличествоСообщений, ПараметрыВывода.НаименованияДляГруппыСообщений));
			
			ТекстСообщения = ?(СтрДлина(ТекстСообщения) < 37, ТекстСообщения, ЛЕВ(ТекстСообщения, 36) + "...");
			Представления["Наименование"+ИндексСтроки] = Новый ФорматированнаяСтрока(
						ТекстСообщения,
						ПараметрыВывода.Шрифт, ПараметрыВывода.Цвет);
			ИндексСтроки = ИндексСтроки + 1;
			КоличествоСвободныхСтрок = КоличествоСвободныхСтрок - 1;
			
		Иначе
			
			ОсталосьСообщений =  ТипСообщений.Сообщения.Количество();
			// Хватает строк, что бы вывести все сообщения данного типа и остальные типы данных.
			Для Каждого Сообщение Из ТипСообщений.Сообщения Цикл
				
				Если КоличествоСвободныхСтрок = 1 
					И ОсталосьСообщений > 1 Тогда
					// Это последняя свободная строка, при этом сообщений нужно вывести больше, чем одно
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 еще %2'"), 
								ПараметрыВывода.Префикс,
								СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
										ОсталосьСообщений, ПараметрыВывода.НаименованияДляГруппыСообщений));
					ОсталосьСообщений = 0;
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"), 
								ПараметрыВывода.Префикс, Сообщение.Наименование);
					ОсталосьСообщений = ОсталосьСообщений - 1;
				КонецЕсли;
				
				ТекстСообщения = ?(СтрДлина(ТекстСообщения) < 37, ТекстСообщения, ЛЕВ(ТекстСообщения, 36) + "...");
				Представления["Наименование"+ИндексСтроки] = Новый ФорматированнаяСтрока(
							ТекстСообщения,
							ПараметрыВывода.Шрифт, ПараметрыВывода.Цвет);
				ИндексСтроки = ИндексСтроки + 1;
				КоличествоСвободныхСтрок = КоличествоСвободныхСтрок -1;
				Если ОсталосьСообщений = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазделитьСообщенияПоТипам(СообщенияОтчетности)
	
	ТипыСообщений = СообщенияОтчетности.Скопировать(, "ТипСообщения, Приоритет");
	ТипыСообщений.Свернуть("ТипСообщения, Приоритет");
	ТипыСообщений.Колонки.Добавить("Сообщения", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТипыСообщений.Колонки.Добавить("КоличествоСообщений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	
	// Заполним колонку Приоритет и Сообщения
	Для Каждого ТипСообщений Из ТипыСообщений Цикл
		Если ТипСообщений.Приоритет > 0 Тогда
			ТипСообщений.Сообщения = СообщенияОтчетности.Скопировать(Новый Структура("ТипСообщения", ТипСообщений.ТипСообщения));
			ТипСообщений.Сообщения.Сортировать("ДатаСообщения Убыв");
			ТипСообщений.КоличествоСообщений = ТипСообщений.Сообщения.Количество();
		КонецЕсли;
	КонецЦикла;
	
	// Строки с приоритетом 0 не обрабатываются, удаляем их
	УдаляемыеСтроки = ТипыСообщений.НайтиСтроки(Новый Структура("Приоритет", 0));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТипыСообщений.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	ТипыСообщений.Сортировать("Приоритет");
	
	Возврат ТипыСообщений;
	
КонецФункции

Функция ПараметрыВыводаПоТипуСообщений(ТипСообщений)
	
	// Параметры вывода "по умолчанию", но могут быть переопределены для разных типов сообщений.
	ПараметрыВывода = Новый Структура();
	ПараметрыВывода.Вставить("Префикс",                        НСтр("ru = 'Получено:'")); // Префикс, который будет выводится перед сообщением
	ПараметрыВывода.Вставить("НаименованияДляГруппыСообщений", НСтр("ru = 'сообщение, сообщения, сообщений'")); // Склонения предмета сообщения прив выводе группы сообщений
	ПараметрыВывода.Вставить("Цвет",                           ЦветаСтиля.ЦветТекстаИнформационнойПанели); // Цвет сообщения
	ПараметрыВывода.Вставить("Шрифт",                          ШрифтыСтиля.ШрифтТекстаИнформационнойПанели); // Шрифт сообщения
	ПараметрыВывода.Вставить("ВсегдаГруппировать",             Истина); // Если установлена Истина, то сообщения будут выведены группой даже в том случае, если хватает строк
	
	Если ТипСообщений = "ОтклоненныйОтчет" Тогда
		ПараметрыВывода.Префикс                        = НСтр("ru = 'Не сдано:'");
		ПараметрыВывода.НаименованияДляГруппыСообщений = НСтр("ru = 'отчет, отчета, отчетов'");
		ПараметрыВывода.Цвет                           = ЦветаСтиля.ВажноеСобытие;
		ПараметрыВывода.ВсегдаГруппировать             = Ложь;
	ИначеЕсли ТипСообщений = "Требование" Тогда
		ПараметрыВывода.НаименованияДляГруппыСообщений = НСтр("ru = 'требование, требования, требований'");
		ПараметрыВывода.Цвет                           = ЦветаСтиля.ВажноеСобытие;
	ИначеЕсли ТипСообщений = "ВходящееПисьмо" Тогда
		ПараметрыВывода.НаименованияДляГруппыСообщений = НСтр("ru = 'письмо, письма, писем'");
	ИначеЕсли ТипСообщений = "ОтветНаЗапрос" Тогда
		ПараметрыВывода.НаименованияДляГруппыСообщений = НСтр("ru = 'ответ на запрос, ответа на запросы, ответов на запросы'");
		ПараметрыВывода.Цвет                           = ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
	ИначеЕсли ТипСообщений = "СданныйОтчет" Тогда
		ПараметрыВывода.Префикс = НСтр("ru = 'Сдано:'");
		ПараметрыВывода.НаименованияДляГруппыСообщений = НСтр("ru = 'отчет, отчета, отчетов'");
		ПараметрыВывода.Цвет                           = ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
		ПараметрыВывода.ВсегдаГруппировать             = Ложь;
	ИначеЕсли ТипСообщений = "СообщенийНет" Тогда
		ПараметрыВывода.Префикс = НСтр("ru = ''");
	КонецЕсли;
	
	Возврат ПараметрыВывода;
	
КонецФункции

Функция ОтчетностьДоступна()
	
	Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.РегламентированнаяОтчетность);
	
КонецФункции

#КонецОбласти

#Область ОстаткиДенежныхСредств

Процедура ДобавитьОстаткиДенежныхСредств(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОстаткиДенежныхСредств(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиДенежныхСредств(),
		"БлокиИнформационнойПанели.ОстаткиДенежныхСредств",
		"БлокиИнформационнойПанели.ОбновитьОстаткиДенежныхСредств",
		СвойстваОстаткиДенежныхСредств());
	
КонецПроцедуры

Функция СвойстваОстаткиДенежныхСредств()
	
	// ВГраница = Количеству, т.к. последняя строка используется для итоговой записи
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоВалютныхОстатков();
	
	Свойства = "ОстаткиДенежныхСредств_Заголовок, "
					+ "ОстаткиДенежныхСредств_Касса, "
					+ "ОстаткиДенежныхСредств_Банк, "
					+ "ОстаткиДенежныхСредств_ИндексИтога,"
					+ "ОстаткиДенежныхСредств_ПредупрежденияПриЗагрузке";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоОстатокДенежныхСредств(Индекс);
	КонецЦикла;
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьОстаткиДенежныхСредств(Параметры) Экспорт
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств);
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Ложь);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.БыстроеОбновление Тогда
		МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	Иначе
		МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ОстаткиДенежныхСредств(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("ОстаткиДенежныхСредств_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиДенежныхСредств()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваОстаткиДенежныхСредств());
	Результат.Вставить("ОстаткиДенежныхСредств_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиДенежныхСредств()));
	
	ОстаткиДенежныхСредств = МониторРуководителя.ДанныеОстаткиДенежныхСредств(Параметры);
	
	ИспользоватьВалютныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");
	Если ИспользоватьВалютныйУчет Тогда
		ВалютаПоУмолчанию = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Иначе
		ВалютаПоУмолчанию = Неопределено;
	КонецЕсли;
	
	// Остаток в кассе
	Касса = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Касса, ВалютаПоУмолчанию);
	Результат.Вставить("ОстаткиДенежныхСредств_Касса", Касса);
	
	ВалютныеОстатки = ОстаткиДенежныхСредств.ВалютныеОстатки;
	
	МожноВывестиВалютныхОстатков = БлокиИнформационнойПанелиКлиентСервер.КоличествоВалютныхОстатков();
	
	ПараметрыОтбораПредупреждений = РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.НовыеПараметрыОтбораПредупреждений();
	ПараметрыОтбораПредупреждений.Организация = Параметры.Организация;
	ЕстьПредупрежденияОЗагрузкеВСписке = 
		РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ЕстьПредупрежденияВСписке(ПараметрыОтбораПредупреждений);
	Если ЕстьПредупрежденияОЗагрузкеВСписке Тогда
		// Одну строку резервируем под сообщение о том, что документы загружены с предупреждением.
		МожноВывестиВалютныхОстатков = МожноВывестиВалютныхОстатков - 1;
	КонецЕсли;
	
	ИндексСтроки = 0;
	
	// Сообщение о загрузке банковских документов с предупреждениями.
	Если ЕстьПредупрежденияОЗагрузкеВСписке Тогда
		СообщениеОПредупрежденияхПриЗагрузке = СообщениеОПредупрежденияхПриЗагрузке();
		Результат.Вставить("ОстаткиДенежныхСредств_ПредупрежденияПриЗагрузке",
			СообщениеОПредупрежденияхПриЗагрузке);
		ИндексСтроки = ИндексСтроки + 1;
	КонецЕсли;
	
	Если Не ИспользоватьВалютныйУчет Тогда
		
		// Остаток на рублевых счетах
		Банк = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Банк, ВалютаПоУмолчанию);
		
	ИначеЕсли ВалютныеОстатки.Количество() <= МожноВывестиВалютныхОстатков Тогда
		
		// Остаток на рублевых счетах
		Банк = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Банк, ВалютаПоУмолчанию);
		
		// Остатки на валютных счетах с разбивкой по валютам
		Для Каждого СтрокаОстатка Из ВалютныеОстатки Цикл
			
			Остаток = ПредставлениеОстаткаДенежныхСредств(СтрокаОстатка.СуммаВВалюте, СтрокаОстатка.Валюта);
			Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОстатокДенежныхСредств(ИндексСтроки), Остаток);
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
	Иначе
		
		// Группируем все остатки в одну строку
		Банк = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Банк + ВалютныеОстатки.Итог("Сумма"), ВалютаПоУмолчанию);
		
	КонецЕсли;
	Результат.Вставить("ОстаткиДенежныхСредств_Банк", Банк);
	
	// Итого
	Итого = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Итого, ВалютаПоУмолчанию, Истина);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОстатокДенежныхСредств(ИндексСтроки), Итого);
	Результат.Вставить("ОстаткиДенежныхСредств_ИндексИтога", ИндексСтроки);
	ИндексСтроки = ИндексСтроки + 1;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ПредставлениеОстаткаДенежныхСредств(Остаток, Валюта, Выделить = Ложь)
	
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		СтроковоеПредставление = СтрШаблон("%1 %2", Формат(Остаток, ФорматнаяСтрока), Валюта);
	Иначе
		СтроковоеПредставление = Формат(Остаток, ФорматнаяСтрока);
	КонецЕсли;
	
	Шрифт      = ?(Выделить, Новый Шрифт(ШрифтыСтиля.ШрифтТекстаИнформационнойПанели,,, Истина), ШрифтыСтиля.ШрифтТекстаИнформационнойПанели);
	ЦветТекста = ?(Остаток >= 0, ЦветаСтиля.ЦветТекстаИнформационнойПанели, ЦветаСтиля.ВажноеСобытие);
	
	Возврат Новый ФорматированнаяСтрока(СтроковоеПредставление, Шрифт, ЦветТекста);
	
КонецФункции

Функция ОстаткиДенежныхСредствДоступны()
	
	// Блок доступен для пользователей, которым доступен отчет "Остатки денежных средств".
	// Сведения об остатках получаются из регистра "ДанныеМонитораРуководителя" в привилегированном режиме.
	Возврат ПравоДоступа("Использование", Метаданные.Отчеты.ОстаткиДенежныхСредств);
	
КонецФункции

Функция СообщениеОПредупрежденияхПриЗагрузке()
	
	СообщениеОПредупрежденияхПриЗагрузке = НСтр("ru = 'Проверьте загрузку документов из банка'");
	Возврат Новый ФорматированнаяСтрока(СообщениеОПредупрежденияхПриЗагрузке, , ЦветаСтиля.ВажноеСобытие, , "ПерейтиВЖурналБанковскихДокументов");
	
КонецФункции

#КонецОбласти

#Область Покупатели

Процедура ДобавитьПокупатели(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПокупатели(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПокупатели(),
		"БлокиИнформационнойПанели.Покупатели",
		"БлокиИнформационнойПанели.ОбновитьПокупатели",
		СвойстваПокупатели());
	
КонецПроцедуры

Функция СвойстваПокупатели()
	
	Свойства = "Покупатели_Заголовок, Покупатели_НеоплаченныеСчета, "
					+ "Покупатели_Задолженность, Покупатели_ЗадолженностьОтклонение, "
					+ "Покупатели_ПросроченнаяЗадолженность, Покупатели_ПросроченнаяЗадолженностьОтклонение,"
					+ "Покупатели_ДоступностьРазделов";
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьПокупатели(Параметры) Экспорт
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПокупателей);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям);
	
	Если ПравоДоступа("Чтение", Метаданные.Константы.СрокОплатыПокупателей) Тогда
		ЗаданСрокОплатыПокупателей = (Константы.СрокОплатыПокупателей.Получить() > 0);
		Если ЗаданСрокОплатыПокупателей Тогда
			РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПокупателей);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.БыстроеОбновление Тогда
		МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	Иначе
		МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Покупатели(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Покупатели_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПокупатели()));
		Результат.Вставить("Покупатели_ДоступностьРазделов", ПокупателиДоступностьРазделов());
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваПокупатели());
	Результат.Вставить("Покупатели_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПокупатели()));
	Результат.Вставить("Покупатели_ДоступностьРазделов", ПокупателиДоступностьРазделов());
	
	Покупатели = МониторРуководителя.ДанныеПокупатели(Параметры);
	
	Шрифт      = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	// Задолженность
	Если Покупатели.Задолженность = 0 И Покупатели.ЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	Задолженность = Новый ФорматированнаяСтрока(
		Формат(Покупатели.Задолженность, ФорматнаяСтрокаЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Покупатели_Задолженность", Задолженность);
	
	// Просроченная задолженность
	Если Покупатели.ПросроченнаяЗадолженность = 0 И Покупатели.ПросроченнаяЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	ПросроченнаяЗадолженность = Новый ФорматированнаяСтрока(
		Формат(Покупатели.ПросроченнаяЗадолженность, ФорматнаяСтрокаПросроченнаяЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Покупатели_ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);
	
	// Отклонения
	Если Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		
		ЗадолженностьОтклонение = ПредставлениеОтклонения(Покупатели.ЗадолженностьОтклонение);
		Результат.Вставить("Покупатели_ЗадолженностьОтклонение", ЗадолженностьОтклонение);
		
		ПросроченнаяЗадолженностьОтклонение = ПредставлениеОтклонения(Покупатели.ПросроченнаяЗадолженностьОтклонение);
		Результат.Вставить("Покупатели_ПросроченнаяЗадолженностьОтклонение",ПросроченнаяЗадолженностьОтклонение);
		
	КонецЕсли;
	
	// Неоплаченные счета
	
	НеоплаченныеСчета = Новый ФорматированнаяСтрока(
		Формат(Покупатели.НеоплаченныеСчета, "ЧДЦ="),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Покупатели_НеоплаченныеСчета", НеоплаченныеСчета);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ПокупателиДоступностьРазделов()
	
	ЗадолженностьПокупателейПоСрокамДолга =
		ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПокупателейПоСрокамДолга)
		И ПравоДоступа("Чтение", Метаданные.Константы.СрокОплатыПокупателей)
		И Константы.СрокОплатыПокупателей.Получить() > 0;
		
	АнализНеоплаченныхСчетовПокупателям =
		ПравоДоступа("Использование", Метаданные.Отчеты.АнализНеоплаченныхСчетовПокупателям)
		И Перечисления.РазделыМонитораРуководителя.ДанныеРазделаДоступны(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям);
		
	ДоступностьРазделов = Новый Структура();
	ДоступностьРазделов.Вставить("ЗадолженностьПокупателей",              ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПокупателей));
	ДоступностьРазделов.Вставить("ЗадолженностьПокупателейПоСрокамДолга", ЗадолженностьПокупателейПоСрокамДолга);
	ДоступностьРазделов.Вставить("АнализНеоплаченныхСчетовПокупателям",   АнализНеоплаченныхСчетовПокупателям);
	ДоступностьРазделов.Вставить("СозданиеСчета",                         ПравоДоступа("Изменение", Метаданные.Документы.СчетНаОплатуПокупателю));
	ДоступностьРазделов.Вставить("СозданиеРеализации",                    ПравоДоступа("Изменение", Метаданные.Документы.РеализацияТоваровУслуг));
	
	Возврат ДоступностьРазделов;
	
КонецФункции

Функция ПокупателиДоступны()
	
	ДоступностьРазделов = ПокупателиДоступностьРазделов();
	
	Возврат ДоступностьРазделов.ЗадолженностьПокупателей
		ИЛИ ДоступностьРазделов.ЗадолженностьПокупателейПоСрокамДолга
		ИЛИ ДоступностьРазделов.АнализНеоплаченныхСчетовПокупателям;
	
КонецФункции

#КонецОбласти

#Область Поставщики

Процедура ДобавитьПоставщики(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПоставщики(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоставщики(),
		"БлокиИнформационнойПанели.Поставщики",
		"БлокиИнформационнойПанели.ОбновитьПоставщики",
		СвойстваПоставщики());
	
КонецПроцедуры

Функция СвойстваПоставщики()
	
	Свойства = "Поставщики_Заголовок, Поставщики_НеоплаченныеСчета, "
					+ "Поставщики_Задолженность, Поставщики_ЗадолженностьОтклонение, "
					+ "Поставщики_ПросроченнаяЗадолженность, Поставщики_ПросроченнаяЗадолженностьОтклонение,"
					+ "Поставщики_ДоступностьРазделов";
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьПоставщики(Параметры) Экспорт
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПоставщикам);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПоставщиков);
	
	ЗаданСрокОплатыПоставщикам = (Константы.СрокОплатыПоставщикам.Получить() > 0);
	Если ЗаданСрокОплатыПоставщикам Тогда
		РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПоставщикам);
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.БыстроеОбновление Тогда
		МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	Иначе
		МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Поставщики(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Поставщики_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоставщики()));
		Результат.Вставить("Поставщики_ДоступностьРазделов", ПоставщикиДоступностьРазделов());
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваПоставщики());
	Результат.Вставить("Поставщики_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоставщики()));
	Результат.Вставить("Поставщики_ДоступностьРазделов", ПоставщикиДоступностьРазделов());
	
	Поставщики = МониторРуководителя.ДанныеПоставщики(Параметры);
	
	Шрифт      = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	// Задолженность
	Если Поставщики.Задолженность = 0 И Поставщики.ЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	Задолженность = Новый ФорматированнаяСтрока(
		Формат(Поставщики.Задолженность, ФорматнаяСтрокаЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Поставщики_Задолженность", Задолженность);
	
	// Просроченная задолженность
	Если Поставщики.ПросроченнаяЗадолженность = 0 И Поставщики.ПросроченнаяЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	ПросроченнаяЗадолженность = Новый ФорматированнаяСтрока(
		Формат(Поставщики.ПросроченнаяЗадолженность, ФорматнаяСтрокаПросроченнаяЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Поставщики_ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);
	
	// Отклонения
	Если Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		
		ЗадолженностьОтклонение = ПредставлениеОтклонения(Поставщики.ЗадолженностьОтклонение);
		Результат.Вставить("Поставщики_ЗадолженностьОтклонение", ЗадолженностьОтклонение);
		
		ПросроченнаяЗадолженностьОтклонение = ПредставлениеОтклонения(Поставщики.ПросроченнаяЗадолженностьОтклонение);
		Результат.Вставить("Поставщики_ПросроченнаяЗадолженностьОтклонение",ПросроченнаяЗадолженностьОтклонение);
		
	КонецЕсли;
	
	// Неоплаченные счета
	
	НеоплаченныеСчета = Новый ФорматированнаяСтрока(
		Формат(Поставщики.НеоплаченныеСчета, "ЧДЦ="),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Поставщики_НеоплаченныеСчета", НеоплаченныеСчета);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ПоставщикиДоступностьРазделов()
	
	ЗадолженностьПоставщикамПоСрокамДолга = 
		ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПоставщикамПоСрокамДолга)
		И Константы.СрокОплатыПоставщикам.Получить() > 0;
	
	ДоступностьРазделов = Новый Структура();
	ДоступностьРазделов.Вставить("ЗадолженностьПоставщикам",              ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПоставщикам));
	ДоступностьРазделов.Вставить("ЗадолженностьПоставщикамПоСрокамДолга", ЗадолженностьПоставщикамПоСрокамДолга);
	ДоступностьРазделов.Вставить("АнализНеоплаченныхСчетовПоставщиков",   ПравоДоступа("Использование", Метаданные.Отчеты.АнализНеоплаченныхСчетовПоставщиков));
	
	Возврат ДоступностьРазделов;
	
КонецФункции

Функция ПоставщикиДоступны()
	
	ДоступностьРазделов = ПоставщикиДоступностьРазделов();
	
	Возврат ДоступностьРазделов.ЗадолженностьПоставщикам
		ИЛИ ДоступностьРазделов.ЗадолженностьПоставщикамПоСрокамДолга
		ИЛИ ДоступностьРазделов.АнализНеоплаченныхСчетовПоставщиков;
	
КонецФункции

#КонецОбласти

#Область Продажи

Процедура ДобавитьПродажи(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПродажи(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПродажи(),
		"БлокиИнформационнойПанели.Продажи",
		"БлокиИнформационнойПанели.ОбновитьПродажи",
		СвойстваПродажи());
	
КонецПроцедуры

Функция СвойстваПродажи()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоПериодовПродаж() - 1;
	
	Свойства = "Продажи_Заголовок";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоПериодПродаж(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоСуммаПродаж(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеПродаж(Индекс);
	КонецЦикла;

	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//
Процедура ОбновитьПродажи(Параметры) Экспорт
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам);
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.БыстроеОбновление Тогда
		МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	Иначе
		МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Продажи(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Продажи_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПродажи()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваПродажи());
	Результат.Вставить("Продажи_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПродажи()));
	
	Продажи = МониторРуководителя.ДанныеПродажи(Параметры);
	
	КонецПериода = КонецДня(ТекущаяДатаСеанса());
	
	НачалоМесяца = НачалоМесяца(КонецПериода);
	НачалоГода   = НачалоГода(КонецПериода);
	
	НачалоПрошлогоМесяца  = НачалоМесяца(ДобавитьМесяц(КонецПериода, -1));
	НачалоПрошлогоПериода = НачалоГода(НачалоПрошлогоМесяца);
	
	Индекс =-1;
	
	// Текущий месяц
	Индекс = Индекс + 1;
	Если КонецПериода <> КонецМесяца(КонецПериода) Тогда
		ДобавитьСтрокуПродаж(Индекс, Результат,
			СтрШаблон(НСтр("ru = 'с %1'"), Формат(НачалоМесяца, "Л=ru_RU; ДФ='д ММММ'")),
			Продажи.ТекущийМесяц,
			Продажи.ТекущийМесяцОтклонение,
			Параметры.ПоказыватьСравнениеСПрошлымГодом,
			БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяца());
	Иначе
		ДобавитьСтрокуПродаж(Индекс, Результат,
			Формат(НачалоМесяца, "Л=ru_RU; ДФ='ММММ'"),
			Продажи.ТекущийМесяц,
			Продажи.ТекущийМесяцОтклонение,
			Параметры.ПоказыватьСравнениеСПрошлымГодом,
			БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяца());
	КонецЕсли;
	
	// С начала года. Не показываем, если дублирует продажи за текущий месяц.
	Если НачалоГода <> НачалоМесяца Тогда 
		Индекс = Индекс + 1;
		Если КонецПериода <> КонецМесяца(КонецПериода) Тогда
			ДобавитьСтрокуПродаж(Индекс, Результат,
				СтрШаблон(НСтр("ru = 'с %1'"), Формат(НачалоГода, "Л=ru_RU; ДФ='д ММММ'")),
				Продажи.ТекущийМесяцСНачалаГода,
				Продажи.ТекущийМесяцСНачалаГодаОтклонение,
				Параметры.ПоказыватьСравнениеСПрошлымГодом,
				БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяцаСНачалаГода());
		Иначе
			ДобавитьСтрокуПродаж(Индекс, Результат,
				СтрШаблон("%1 – %2", Формат(НачалоГода, "Л=ru_RU; ДФ='MMMM'"), Формат(НачалоМесяца, "Л=ru_RU; ДФ='MMMM'")),
				Продажи.ТекущийМесяцСНачалаГода,
				Продажи.ТекущийМесяцСНачалаГодаОтклонение,
				Параметры.ПоказыватьСравнениеСПрошлымГодом,
				БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяцаСНачалаГода());
		КонецЕсли;
	КонецЕсли;
	
	// Прошлый месяц
	Индекс = Индекс + 1;
	ДобавитьСтрокуПродаж(Индекс, Результат,
		Формат(НачалоПрошлогоМесяца, "Л=ru_RU; ДФ='MMMM'"),
		Продажи.ПрошлыйМесяц,
		Продажи.ПрошлыйМесяцОтклонение,
		Параметры.ПоказыватьСравнениеСПрошлымГодом,
		БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиПрошлогоМесяца());
	
	// С начала года по конец прошлого месяца. Не показываем, если дублирует продажи за прошлый месяц.
	Если НачалоПрошлогоПериода <> НачалоПрошлогоМесяца Тогда
		Индекс = Индекс + 1;
		ДобавитьСтрокуПродаж(Индекс, Результат,
			СтрШаблон("%1 – %2", Формат(НачалоПрошлогоПериода, "Л=ru_RU; ДФ='MMMM'"), Формат(НачалоПрошлогоМесяца, "Л=ru_RU; ДФ='MMMM'")),
			Продажи.ПрошлыйМесяцСНачалаГода,
			Продажи.ПрошлыйМесяцСНачалаГодаОтклонение,
			Параметры.ПоказыватьСравнениеСПрошлымГодом,
			БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиПрошлогоМесяцаСНачалаГода());
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Процедура ДобавитьСтрокуПродаж(Индекс, Результат, Период, Сумма, Отклонение, ДобавитьОтклонение, Идентификатор)
	
	Если Сумма = 0 И Отклонение <> 0 И ДобавитьОтклонение Тогда
		ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрока = "ЧДЦ=";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ПредставлениеПериода = Новый ФорматированнаяСтрока(Период, , ЦветГиперссылки, , Идентификатор);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоПериодПродаж(Индекс), ПредставлениеПериода);
	
	ПредставлениеСуммы = Новый ФорматированнаяСтрока(Формат(Сумма, ФорматнаяСтрока), Шрифт, ЦветТекста);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоСуммаПродаж(Индекс), ПредставлениеСуммы);
	
	Если ДобавитьОтклонение Тогда
		
		ПредставлениеОтклонения = ПредставлениеОтклонения(Отклонение);
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеПродаж(Индекс), ПредставлениеОтклонения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПродажиДоступны()
	
	Возврат ПравоДоступа("Использование", Метаданные.Отчеты.Продажи);
	
КонецФункции

#КонецОбласти

#Область Новости

Процедура ДобавитьНовости(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаНовости(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаНовости(),
		"БлокиИнформационнойПанели.Новости",,
		СвойстваНовости());
	
КонецПроцедуры

Функция СвойстваНовости()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоНовостей() - 1;
	
	Свойства = "Новости_Заголовок, Новости_Индекс, Новости_Текст, Новости_АдресХранилища";
	
	Возврат Свойства;
	
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы информационной панели
//
Процедура Новости(Параметры) Экспорт

	Результат = Новый Структура(СвойстваНовости());
	Результат.Вставить("Новости_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаНовости()));
	
	МаксимальноеКоличествоНовостей = БлокиИнформационнойПанелиКлиентСервер.КоличествоНовостей();
	
	ТаблицаНовостей = Новый ТаблицаЗначений;
	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		
		ПараметрыПолученияНовостей = Новый Структура;
		ПараметрыПолученияНовостей.Вставить("ВариантОтбора",      ИнтернетПоддержкаПользователейБП.ВариантОтбораПоЛентеНовостей());
		ПараметрыПолученияНовостей.Вставить("ЛентаНовостей",      ИнтернетПоддержкаПользователейБП.ЛентаНовостейЧтоНового());
		ПараметрыПолученияНовостей.Вставить("КоличествоНовостей", МаксимальноеКоличествоНовостей);
		ПараметрыПолученияНовостей.Вставить("ПорядокСортировки",  "Прочтена Возр, ДатаПубликации Убыв, Важность Убыв");
		
		Справочники.Новости.ПолучитьСписокНовостей(
			ТаблицаНовостей,
			Пользователи.ТекущийПользователь(),
			ПараметрыПолученияНовостей,
			Новый Массив);
		
	КонецЕсли;
	
	Шрифт           = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста      = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ТекстыНовостей = Новый СписокЗначений;
	СсылкиНовостей = Новый СписокЗначений;
	
	КоличествоНовостей = ТаблицаНовостей.Количество();
	Если КоличествоНовостей > 0 Тогда
		
		ВГраница = Мин(МаксимальноеКоличествоНовостей, КоличествоНовостей) - 1;
		Для Индекс = 0 По ВГраница Цикл
			
			Новость = ТаблицаНовостей[Индекс];
			
			ТекстНовости = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(СокрЛП(Новость.Наименование), Шрифт, ЦветТекста),
				Символы.ПС,
				Символы.ПС,
				Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"), , ЦветГиперссылки, , ПолучитьНавигационнуюСсылку(Новость.Ссылка))
			);
			
			ТекстыНовостей.Добавить(ТекстНовости);
			СсылкиНовостей.Добавить(Новость.Ссылка);
			
		КонецЦикла;
		
		Результат.Вставить("Новости_Текст", ТекстыНовостей[0].Значение);
		
	Иначе
		
		Результат.Вставить("Новости_Текст", Новый ФорматированнаяСтрока(БлокиИнформационнойПанелиКлиентСервер.ТекстОтсутствияНовостей(), Шрифт, ЦветТекста));
		
	КонецЕсли;
	
	// Начинаем показывать с первой новости
	Результат.Вставить("Новости_Индекс", 0);
	
	// Список новостей передаем в форму через временное хранилище
	ДанныеНовостей = Новый Структура;
	ДанныеНовостей.Вставить("ТекстыНовостей", ТекстыНовостей);
	ДанныеНовостей.Вставить("СсылкиНовостей", СсылкиНовостей);
	АдресХранилищаНовостей = ПоместитьВоВременноеХранилище(ДанныеНовостей, Параметры.УникальныйИдентификатор);
	Результат.Вставить("Новости_АдресХранилища", АдресХранилищаНовостей);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область МетодическаяПоддержка

Процедура ДобавитьМетодическаяПоддержка(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаМетодическаяПоддержка(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМетодическаяПоддержка(),
		"БлокиИнформационнойПанели.МетодическаяПоддержка",,
		СвойстваМетодическаяПоддержка());
	
КонецПроцедуры

Функция СвойстваМетодическаяПоддержка()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоСсылокМетодическойПоддержки() - 1;
	
	Свойства = "МетодическаяПоддержка_Заголовок";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ","
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоСсылкаМетодическойПоддержки(Индекс);
	КонецЦикла;
	
	Возврат Свойства;

КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//
Процедура МетодическаяПоддержка(Параметры) Экспорт
	
	Результат = Новый Структура(СвойстваМетодическаяПоддержка());
	Результат.Вставить("МетодическаяПоддержка_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМетодическаяПоддержка()));
	
	МаксимальноеКоличествоСсылок = БлокиИнформационнойПанелиКлиентСервер.КоличествоСсылокМетодическойПоддержки();
	
	ТаблицаИнформационныхСсылок = Обработки.МетодическаяПоддержка.ПолучитьТаблицуИнформационныхСсылокДляВиджета();
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ВГраница = Мин(МаксимальноеКоличествоСсылок, ТаблицаИнформационныхСсылок.Количество()) - 1;
	Для Индекс = 0 По ВГраница Цикл
		
		ИнформационнаяСсылка = ТаблицаИнформационныхСсылок[Индекс];
		
		СсылкаМетодическойПоддержки = Новый ФорматированнаяСтрока(
			ИнформационнаяСсылка.Наименование, , ЦветГиперссылки, , ИнформационнаяСсылка.Адрес);
		
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоСсылкаМетодическойПоддержки(Индекс), СсылкаМетодическойПоддержки);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция МетодическаяПоддержкаДоступна()
	
	Возврат ПравоДоступа("Использование", Метаданные.Обработки.МетодическаяПоддержка);
	
КонецФункции

#КонецОбласти

#Область ПоддержкаСервиса

Процедура ДобавитьПоддержкаСервиса(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПоддержкаСервиса(),
		ТекстЗаголовкаПоддержкаСервиса(),
		"БлокиИнформационнойПанели.ПоддержкаСервиса",,
		СвойстваПоддержкаСервиса());
	
КонецПроцедуры

Функция ТекстЗаголовкаПоддержкаСервиса()
	
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		ИмяСервиса = НСтр("ru = 'сервиса'");
	Иначе
		ИмяСервиса = ОбщегоНазначенияБП.ДомашняяСтраницаСервиса();
	КонецЕсли;
	
	Возврат БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоддержкаСервиса(ИмяСервиса);
	
КонецФункции

Функция СвойстваПоддержкаСервиса()
	
	Свойства = "ПоддержкаСервиса_Заголовок, ПоддержкаСервиса_КартинкаСообщения, ПоддержкаСервиса_ТекстСообщения";
	
	Возврат Свойства;
	
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//
Процедура ПоддержкаСервиса(Параметры) Экспорт
	
	Результат = Новый Структура(СвойстваПоддержкаСервиса());
	Результат.Вставить("ПоддержкаСервиса_Заголовок", ЗаголовокБлока(ТекстЗаголовкаПоддержкаСервиса()));
	
	Шрифт      = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	// ТехнологияСервиса.ИнформационныйЦентр
	ТаблицаСообщенийСервиса = Новый ТаблицаЗначений;
	ТаблицаСообщенийСервиса.Колонки.Добавить(
		"СсылкаНаДанные", Новый ОписаниеТипов("СправочникСсылка.ОбщиеДанныеИнформационногоЦентра"));
	УстановитьПривилегированныйРежим(Истина);
	ИнформационныйЦентрСервер.СформироватьСписокНовостейНаРабочийСтол(ТаблицаСообщенийСервиса, 1);
	УстановитьПривилегированныйРежим(Ложь);
	// Конец ТехнологияСервиса.ИнформационныйЦентр
	
	Если ТаблицаСообщенийСервиса.Количество() > 0 Тогда
		
		Сообщение = ТаблицаСообщенийСервиса[0];
		
		СвойстваСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сообщение.СсылкаНаДанные, "Наименование, Критичность");
		
		ИндексКартинки = БлокиИнформационнойПанелиКлиентСервер.ИндексКартинкиСообщенияСервиса(СвойстваСообщения.Критичность > 5);
		Результат.Вставить("ПоддержкаСервиса_КартинкаСообщения", ИндексКартинки);
		
		НаименованиеБезПробелов = СтрокаБезПереносов(СвойстваСообщения.Наименование);
		
		ТекстСообщения = Новый ФорматированнаяСтрока(НаименованиеБезПробелов, Шрифт, ЦветТекста);
		Результат.Вставить("ПоддержкаСервиса_ТекстСообщения", ТекстСообщения);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаБлоков()
	
	ТаблицаБлоков = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаБлоков.Колонки;
	
	Колонки.Добавить("Пометка",                   Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Имя",                       ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("Синоним",                   ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("ПроцедураПолученияДанных",  ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("ПроцедураОбновленияДанных", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("РеквизитыФормы",            ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("ЦветФона",                  Новый ОписаниеТипов("Цвет"));
	Колонки.Добавить("Порядок",                   ОбщегоНазначения.ОписаниеТипаЧисло(3));
	
	Возврат ТаблицаБлоков;
	
КонецФункции

Процедура Добавить(ТаблицаБлоков, Имя, Синоним, ПроцедураПолученияДанных, ПроцедураОбновленияДанных, РеквизитыФормы, Порядок = 100)
	
	НовыйБлок = ТаблицаБлоков.Добавить();
	НовыйБлок.Имя                       = Имя;
	НовыйБлок.Синоним                   = Синоним;
	НовыйБлок.ПроцедураПолученияДанных  = ПроцедураПолученияДанных;
	НовыйБлок.ПроцедураОбновленияДанных = ПроцедураОбновленияДанных;
	НовыйБлок.РеквизитыФормы            = РеквизитыФормы;
	НовыйБлок.Порядок                   = Порядок;
	
КонецПроцедуры

Функция МножественноеПредставление(ПараметрыПредметаИсчисления)
	
	ПредставленияПредмета = СтрРазделить(ПараметрыПредметаИсчисления, ",");
	
	Возврат ?(ПредставленияПредмета.Количество() >= 3, СокрЛП(ПредставленияПредмета[2]), "");
	
КонецФункции

Функция ПредставлениеСрока(ОтносительныйСрок, ОсталосьДней) Экспорт
	
	Если ОтносительныйСрок = Перечисления.ОтносительныеСроки.НесколькоДней Тогда
		
		ОсталосьДнейПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			ОсталосьДней, НСтр("ru = 'день, дня, дней'"));
			
		ПредставлениеСрока = СтрШаблон(НСтр("ru = 'Через %1'"), ОсталосьДнейПрописью);
		
	ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.Неделя Тогда
		
		ПредставлениеСрока = НСтр("ru = 'Через неделю'");
		
	ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.ДвеНедели Тогда
		
		ПредставлениеСрока = НСтр("ru = 'Через 2 недели'");
		
	ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.ТриНедели Тогда
		
		ПредставлениеСрока = НСтр("ru = 'Через 3 недели'");
		
	ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.Месяц Тогда
		
		ПредставлениеСрока = НСтр("ru = 'Через месяц'");
		
	Иначе
		
		ПредставлениеСрока = Строка(ОтносительныйСрок); // Сегодня, Завтра
		
	КонецЕсли;
	
	Возврат ПредставлениеСрока;
	
КонецФункции

Функция ПредставлениеОтклонения(Знач Отклонение)
	
	Отклонение = Окр(Отклонение, 0);
	
	Стрелка = ?(Отклонение > 0, СтрелкаВверх(), СтрелкаВниз());
	
	МодульОтклонения = Макс(Отклонение, -Отклонение);
	
	ПределОтклонения = ПределОтклонения();
	
	Если Отклонение <> 0 Тогда
		Если Отклонение < ПределОтклонения Тогда
			ПредставлениеОтклонения = Стрелка + Формат(МодульОтклонения, "ЧДЦ=") + "%";
		Иначе
			ПредставлениеОтклонения = Стрелка;
		КонецЕсли;
	Иначе
		ПредставлениеОтклонения = "";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтОтклоненияИнформационнойПанели;
	Если Отклонение > 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
	ИначеЕсли Отклонение < 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеОтклонения, Шрифт, ЦветТекста);
	
КонецФункции

Функция ПределОтклонения()
	
	Возврат 999;
	
КонецФункции

Функция СтрелкаВверх()
	
	Возврат Символ(9650);
	
КонецФункции

Функция СтрелкаВниз()
	
	Возврат Символ(9660);
	
КонецФункции

// Заменяет пробелы в строке на неразрывные пробелы для блокировки переносов в браузере
//
Функция СтрокаБезПереносов(ИсходнаяСтрока)
	
	// Для того чтобы строка правильно переносилась в веб-клиенте,
	// вместо запятой используем символ - U+201A:Single Low-9 Quotation Mark (Keystroke: Alt+0130)
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, ",", "‚");
	Возврат СтрЗаменить(ИсходнаяСтрока, " ", Символы.НПП);
	
КонецФункции

Функция ЗаголовокБлока(ТекстЗаголовка)
	
	Шрифт = ШрифтыСтиля.ШрифтЗаголовкаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветЗаголовкаИнформационнойПанели;
	
	Возврат Новый ФорматированнаяСтрока(ТекстЗаголовка, Шрифт, ЦветТекста);
	
КонецФункции

Функция ПредставлениеОтклоненияКурса(Отклонение)
	
	Если Отклонение <> 0 Тогда
		ПредставлениеОтклонения = СтрШаблон("%1%2",
			?(Отклонение > 0, "+", ""), Формат(Отклонение, "ЧДЦ=4"));
	Иначе
		ПредставлениеОтклонения = "";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветПустойГиперссылки;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеОтклонения, Шрифт, ЦветТекста);
	
КонецФункции

#КонецОбласти

#Область Сервис1СПАРКРиски

Процедура Добавить1СПАРКРиски(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлока1СПАРКРиски(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовка1СПАРКРиски(),
		"БлокиИнформационнойПанели.Сервис1СПАРКРиски",
		"БлокиИнформационнойПанели.Обновить1СПАРКРиски",
		Свойства1СПАРКРиски());
	
КонецПроцедуры

Функция Свойства1СПАРКРиски()
	
	Свойства = "Сервис1СПАРКРиски_Заголовок, Сервис1СПАРКРиски_События0, Сервис1СПАРКРиски_События1, Сервис1СПАРКРиски_ВсеСобытия";
	
	Возврат Свойства;
	
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Сервис1СПАРКРиски(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("Сервис1СПАРКРиски_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовка1СПАРКРиски()));
			
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		
		Возврат;
		
	КонецЕсли;
	
	Результат = Новый Структура(Свойства1СПАРКРиски());
	Результат.Вставить("Сервис1СПАРКРиски_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовка1СПАРКРиски()));
		
	ШрифтОбычногоСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветОбычногоСобытия  = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	ШрифтВажногоСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветВажногоСобытия  = ЦветаСтиля.ВажноеСобытие;
	
	ДанныеДляОтображения = Новый Структура("Строка0, Строка1, СтрокаВсеСобытия",
		Новый ФорматированнаяСтрока(""), Новый ФорматированнаяСтрока(""), Новый ФорматированнаяСтрока(""));
	
	ПоказатьРекламуСПАРК = ХранилищеОбщихНастроек.Загрузить("ПоказатьРекламуСПАРКВВиджете");
	ПоказатьРекламуСПАРК = ?(ПоказатьРекламуСПАРК = Неопределено, Ложь, ПоказатьРекламуСПАРК);
	Если Не ПоказатьРекламуСПАРК Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СобытияМониторинга = ИнтернетПоддержкаПользователейБП.СобытияМониторинга();
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'сообщение, сообщения, сообщений'");
		
		ВсегоПроблемы  = СобытияМониторинга.Количество();
		ПроблемыПодробно = ВсегоПроблемы <= 2;
		
		КритичныеПроблемы = СобытияМониторинга.НайтиСтроки(Новый Структура("КритичноеСобытие", Истина));
		ПрочаяИнформация = СобытияМониторинга.НайтиСтроки(Новый Структура("КритичноеСобытие", Ложь));
		ВсегоКритичныхПроблем = КритичныеПроблемы.Количество();
		ВсегоПрочейИнформации = ПрочаяИнформация.Количество();
		
		Если ВсегоПроблемы > 0 Тогда
			
			Если ПроблемыПодробно Тогда
				
				Счетчик = 0;
				Для каждого СтрокаСобытия Из КритичныеПроблемы Цикл
					
					ЧастиСтрокиСобытия = Новый Массив;
					
					ЧастиСтрокиСобытия.Добавить(
						Новый ФорматированнаяСтрока(СтрокаБезПереносов(Строка(СтрокаСобытия.Контрагент)), ШрифтОбычногоСобытия, ЦветОбычногоСобытия));
					ЧастиСтрокиСобытия.Добавить(Символы.ПС);
					ЧастиСтрокиСобытия.Добавить(
						Новый ФорматированнаяСтрока(СтрокаБезПереносов(СтрокаСобытия.НазваниеСобытия), ШрифтВажногоСобытия, ЦветВажногоСобытия));
						
					ДанныеДляОтображения["Строка" + Счетчик] = Новый ФорматированнаяСтрока(ЧастиСтрокиСобытия);
					
					Счетчик = Счетчик + 1;
					
				КонецЦикла;
				
				Для каждого СтрокаСобытия Из ПрочаяИнформация Цикл
					
					ЧастиСтрокиСобытия = Новый Массив;
					
					ЧастиСтрокиСобытия.Добавить(
						Новый ФорматированнаяСтрока(СтрокаБезПереносов(Строка(СтрокаСобытия.Контрагент)), ШрифтОбычногоСобытия, ЦветОбычногоСобытия));
					ЧастиСтрокиСобытия.Добавить(Символы.ПС);
					ЧастиСтрокиСобытия.Добавить(
						Новый ФорматированнаяСтрока(СтрокаБезПереносов(СтрокаСобытия.НазваниеСобытия), ШрифтОбычногоСобытия, ЦветОбычногоСобытия));
						
					ДанныеДляОтображения["Строка" + Счетчик] = Новый ФорматированнаяСтрока(ЧастиСтрокиСобытия);
					
					Счетчик = Счетчик + 1;
					
				КонецЦикла;
				
			Иначе
				
				Счетчик = 0;
				Если ВсегоКритичныхПроблем > 0 Тогда
					
					ЧастиСтрокиСобытия = Новый Массив;
					
					ПараметрыПредметаИсчисления = НСтр("ru = 'критичное событие, критичных события, критичных событий'");
					ТекстСтроки = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ВсегоКритичныхПроблем,
						ПараметрыПредметаИсчисления);
					ЧастиСтрокиСобытия.Добавить(Новый ФорматированнаяСтрока(ТекстСтроки, ШрифтВажногоСобытия, ЦветВажногоСобытия));
					
					ДанныеДляОтображения["Строка" + Счетчик] = Новый ФорматированнаяСтрока(ЧастиСтрокиСобытия);
					
					Счетчик = Счетчик + 1;
					
				КонецЕсли;
				
				Если ВсегоПрочейИнформации > 0 Тогда
					
					ЧастиСтрокиСобытия = Новый Массив;
					
					ПараметрыПредметаИсчисления =
						НСтр("ru = 'сообщение об изменении реквизитов, сообщения об изменении реквизитов, сообщений об изменении реквизитов'");
					ТекстСтроки = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ВсегоПрочейИнформации,
						ПараметрыПредметаИсчисления);
					ЧастиСтрокиСобытия.Добавить(Новый ФорматированнаяСтрока(ТекстСтроки, ШрифтОбычногоСобытия, ЦветОбычногоСобытия));
					
					ДанныеДляОтображения["Строка" + Счетчик] = Новый ФорматированнаяСтрока(ЧастиСтрокиСобытия);
					
					Счетчик = Счетчик + 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВсегоПроблемы = 0 Тогда
			
			ТекстСообщения = 
				НСтр("ru = 'За последние 15 дней нет сообщений о ликвидации, реорганизации, банкротстве, изменении реквизитов контрагентов.'");
			ДанныеДляОтображения.Строка0 = Новый ФорматированнаяСтрока(ТекстСообщения, ШрифтОбычногоСобытия, ЦветОбычногоСобытия);
			
			ДанныеДляОтображения.СтрокаВсеСобытия = Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее о сервисе'"),,,,
				СПАРКРискиКлиентСервер.АдресСтраницыОписанияСервисаСПАРКРиски());
			
		Иначе
			
			ДанныеДляОтображения.СтрокаВсеСобытия = Новый ФорматированнаяСтрока(НСтр("ru = 'Все события'"), , , , "ОтчетСобытияМониторингаСПАРКРиски");
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Сообщения о закрытии, проблемах или изменении реквизитов контрагентов'");
		ДанныеДляОтображения.Строка0 = Новый ФорматированнаяСтрока(ТекстСообщения, ШрифтОбычногоСобытия, ЦветОбычногоСобытия);
		
		ДанныеДляОтображения.СтрокаВсеСобытия = Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее о сервисе'"),,,,
			СПАРКРискиКлиентСервер.АдресСтраницыОписанияСервисаСПАРКРиски());
		
	КонецЕсли;
	
	Результат.Вставить("Сервис1СПАРКРиски_События0", ДанныеДляОтображения.Строка0);
	Результат.Вставить("Сервис1СПАРКРиски_События1", ДанныеДляОтображения.Строка1);
	Результат.Вставить("Сервис1СПАРКРиски_ВсеСобытия", ДанныеДляОтображения.СтрокаВсеСобытия);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура Обновить1СПАРКРиски(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ВидОшибки = СПАРКРискиМониторингСобытий.ОбновитьСобытияМониторинга();
	ХранилищеОбщихНастроек.Сохранить("ПоказатьРекламуСПАРКВВиджете",, ЗначениеЗаполнено(ВидОшибки));
	
КонецПроцедуры

#КонецОбласти

#Область КурсыВалют

Процедура ДобавитьКурсыВалют(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаКурсыВалют(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаКурсыВалют(),
		"БлокиИнформационнойПанели.КурсыВалют",
		"БлокиИнформационнойПанели.ОбновитьКурсыВалют",
		СвойстваКурсыВалют());
	
КонецПроцедуры

Функция СвойстваКурсыВалют()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоКурсовВалют() - 1;
	
	Свойства = "КурсыВалют_Заголовок";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоВалюта(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоВалютаСсылка(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоКурсВалюты(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеКурса(Индекс);
	КонецЦикла;

	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//     * АдресРезультатаКурсыВалют - Строка - адрес временного хранилища, в которое будет помещен результат
//
Процедура ОбновитьКурсыВалют(Параметры) Экспорт
	
	Если РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных()
		И РаботаВМоделиСервиса.РазделениеВключено() Тогда
		// В режиме сервиса курсы валют - поставляемые данные
		Возврат;
	КонецЕсли;
	
	Если Параметры.БыстроеОбновление 
		Или Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КурсыВалют) Тогда
		Возврат;
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	ЕстьОшибкиПриЗагрузке = Ложь;
	Попытка
		РаботаСКурсамиВалют.ЗагрузитьАктуальныйКурс(Неопределено, АдресХранилища);
	Исключение
		ЕстьОшибкиПриЗагрузке = Истина;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Новый Структура("ЕстьОшибкиПриЗагрузке", ЕстьОшибкиПриЗагрузке),
		Параметры.АдресРезультатаКурсыВалют);
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация    - СправочникСсылка.Организации - отбор по организации
//     * Инициализация  - Булево, если Истина - заполнить только статическими данными
//
Процедура КурсыВалют(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаКурсыВалют();
		Результат.Вставить("КурсыВалют_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваКурсыВалют());
	
	МаксимальноеКоличество = БлокиИнформационнойПанелиКлиентСервер.КоличествоКурсовВалют();
	ДанныеКурсовВалют = РаботаСКурсамиВалютБП.ДанныеКурсовВалютДляВиджета(МаксимальноеКоличество);
	
	Валюты = ДанныеКурсовВалют.Валюты;
	
	Для Индекс = 0 По Валюты.Количество() - 1 Цикл
		
		Валюта = Валюты[Индекс];
		ДобавитьСтрокуКурсыВалют(Индекс, Валюта, Результат);
		
	КонецЦикла;
	
	ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаКурсыВалют(ДанныеКурсовВалют.ДатаКурсов);
	Результат.Вставить("КурсыВалют_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Процедура ДобавитьСтрокуКурсыВалют(Индекс, Валюта, Результат)
	
	ВалютаСсылка  = Валюта.Ссылка;
	ВалютаСтрокой = Валюта.Наименование;
	Кратность     = Валюта.Кратность;
	Курс          = Валюта.Курс;
	Отклонение    = Валюта.Отклонение;
	
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	Если Кратность > 1 Тогда
		НаименованиеВалюты = СтрШаблон("%1 %2", Формат(Кратность, "ЧДЦ="), ВалютаСтрокой);
	Иначе
		НаименованиеВалюты = ВалютаСтрокой;
	КонецЕсли;
	
	ПредставлениеВалюты = Новый ФорматированнаяСтрока(НаименованиеВалюты, , ЦветГиперссылки, , "ИсторияКурса");
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоВалюта(Индекс), ПредставлениеВалюты);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоВалютаСсылка(Индекс), ВалютаСсылка);
	
	ПредставлениеКурса = Новый ФорматированнаяСтрока(Формат(Курс, "ЧДЦ=4"), Шрифт, ЦветТекста);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоКурсВалюты(Индекс), ПредставлениеКурса);
	
	ПредставлениеОтклонения = ПредставлениеОтклоненияКурса(Отклонение);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеКурса(Индекс), ПредставлениеОтклонения);
	
КонецПроцедуры

Функция КурсыВалютДоступны() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет")
		И РаботаСКурсамиВалютБП.ЕстьУстановленныеКурсыВалют();
	
КонецФункции

#КонецОбласти
