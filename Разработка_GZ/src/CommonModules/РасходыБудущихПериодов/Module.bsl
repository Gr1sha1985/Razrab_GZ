#Область ПрограммныйИнтерфейс

#Область АлгоритмыРасчета

// Определяет порядок признания расходов (списания актива) способом "По месяцам" для конкретного периода,
// в течение которого стоимость актива включается в расходы.
// Детально порядок расчета описан в комментариях в коде функции.
//
// Параметры:
//  НачалоПериода	 - Дата - начало периода, в течение которого стоимость актива должна быть включена в расходы
//  КонецПериода	 - Дата - конец периода, в течение которого стоимость актива должна быть включена в расходы
// Возвращаемое значение:
//  Структура - описывает порядок признания расходов в течение периода (профиль расходов во времени)
//    * ВсегоКоличествоМесяцев - Число - количество месяцев в периоде, в виде десятичной дроби
//    * ЦелоеКоличествоМесяцев - Число - количество целых календарных месяцев в рамках периода, меньше или равно ВсегоКоличествоМесяцев
//    * НачалоПериодаЦелыхМесяцев - Дата - начало периода целых календарных месяцев в рамках периода
//    * КонецПериодаЦелыхМесяцев - Дата - конец периода целых календарных месяцев в рамках периода
//    * НецелыеМесяцы - ТаблицаЗначений - информация о нецелых календарных месяцах в рамках периода; 
//              каждая строка таблицы соответствует месяцу; может быть до двух нецелых месяцев - первый и последний
//       ** Месяц       - Дата  - начало нецелого месяца
//       ** Числитель   - Число - количество дней признания расходов в месяце
//       ** Знаменатель - Число - количество дней в месяце
//       ** Вес         - Число - вес месяца относительно целого календарного месяца, меньше 1
Функция ПорядокПризнанияРасходовПоМесяцам(Знач НачалоПериода, Знач КонецПериода) Экспорт
	
	Расчет = Новый Структура;
	Расчет.Вставить("ВсегоКоличествоМесяцев",    0);
	
	Расчет.Вставить("ЦелоеКоличествоМесяцев",    0);
	Расчет.Вставить("НачалоПериодаЦелыхМесяцев", '0001-01-01');
	Расчет.Вставить("КонецПериодаЦелыхМесяцев",  '0001-01-01');
	
	Расчет.Вставить("НецелыеМесяцы", Новый ТаблицаЗначений);
	Расчет.НецелыеМесяцы.Колонки.Добавить("Месяц",       ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Расчет.НецелыеМесяцы.Колонки.Добавить("Числитель",   Новый ОписаниеТипов("Число"));
	Расчет.НецелыеМесяцы.Колонки.Добавить("Знаменатель", Новый ОписаниеТипов("Число"));
	Расчет.НецелыеМесяцы.Колонки.Добавить("Вес",         Новый ОписаниеТипов("Число"));
	
	НачалоПериода = НачалоДня(НачалоПериода);
	КонецПериода  = КонецДня(КонецПериода);
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Или Не ЗначениеЗаполнено(КонецПериода) Или НачалоПериода > КонецПериода Тогда
		Возврат Расчет;
	КонецЕсли;
	
	// В общем виде формула выглядит так:
	//
	// ВсегоКоличествоМесяцев = ВесПервогоМесяца + СуммаВесовЦелыхКалендарныхМесяцев + ВесПоследнегоМесяца, 
	// где
	//   ВесПервогоМесяца    = КоличествоДнейДействияВПервомМесяце    / КоличествоДнейПервогоМесяца;
	//   ВесПоследнегоМесяца = КоличествоДнейДействияВПоследнемМесяце / КоличествоДнейПоследнегоМесяца;
	//
	// Отдельные слагаемые могут отсутствовать.
	// Так, если период начинается в первый день месяца и заканчивается в последний день месяца (другими словами, первый и последний месяцы периода - полные),
	// то ВсегоКоличествоМесяцев = СуммаВесовЦелыхКалендарныхМесяцев.
	// СуммаВесовЦелыхКалендарныхМесяцев - натуральное число, включая 0.
	
	ПервыйМесяцПолный    = (НачалоМесяца(НачалоПериода) = НачалоПериода);
	ПоследнийМесяцПолный = (КонецМесяца(КонецПериода) = КонецПериода);
	
	Расчет.НачалоПериодаЦелыхМесяцев = ?(ПервыйМесяцПолный,    НачалоПериода, КонецМесяца(НачалоПериода) + 1);
	Расчет.КонецПериодаЦелыхМесяцев  = ?(ПоследнийМесяцПолный, КонецПериода,  НачалоМесяца(КонецПериода) - 1);
	
	// Часть срока, которая может быть выражена в календарных месяцах (целом числе месяцев)
	Если Расчет.НачалоПериодаЦелыхМесяцев < Расчет.КонецПериодаЦелыхМесяцев Тогда
		Расчет.ЦелоеКоличествоМесяцев    = (Год(Расчет.КонецПериодаЦелыхМесяцев) - Год(Расчет.НачалоПериодаЦелыхМесяцев)) * 12 
			+ Месяц(Расчет.КонецПериодаЦелыхМесяцев) - Месяц(Расчет.НачалоПериодаЦелыхМесяцев) + 1;
		Расчет.ВсегоКоличествоМесяцев    = Расчет.ЦелоеКоличествоМесяцев;
	КонецЕсли;
	
	Если ПервыйМесяцПолный И ПоследнийМесяцПолный Тогда
		Возврат Расчет;
	КонецЕсли;
	
	// Часть (части) периода, которые приходятся на неполные месяцы
	//
	// Не учитываем, что период может быть выражен целым числом месяцев.
	// Например, с 15 января по 14 февраля - это 1 месяц, но для расчета принимаем длину этого периода как 17/31 + 14/28 ~ 1.048 месяца.
	
	Если Не ПервыйМесяцПолный И Не ПоследнийМесяцПолный И НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) Тогда
		
		// вырожденный случай: период начинается после начала месяца и заканчивается до его окончания
		ОписаниеМесяца = Расчет.НецелыеМесяцы.Добавить();
		ОписаниеМесяца.Месяц = НачалоМесяца(НачалоПериода);
		ОписаниеМесяца.Числитель   = День(КонецПериода) - День(НачалоПериода) + 1;
		ОписаниеМесяца.Знаменатель = ОписаниеМесяца.Числитель;
		
	Иначе
	
		Если Не ПервыйМесяцПолный Тогда
			ОписаниеМесяца = Расчет.НецелыеМесяцы.Добавить();
			ОписаниеМесяца.Месяц = НачалоМесяца(НачалоПериода);
			ОписаниеМесяца.Числитель   = День(КонецМесяца(НачалоПериода)) - День(НачалоПериода) + 1;
			ОписаниеМесяца.Знаменатель = День(КонецМесяца(НачалоПериода));
		КонецЕсли;
		
		Если Не ПоследнийМесяцПолный Тогда
			ОписаниеМесяца = Расчет.НецелыеМесяцы.Добавить();
			ОписаниеМесяца.Месяц = НачалоМесяца(КонецПериода);
			ОписаниеМесяца.Числитель   = День(КонецПериода);
			ОписаниеМесяца.Знаменатель = День(КонецМесяца(КонецПериода));
		КонецЕсли;
	
	КонецЕсли;

	Для Каждого ОписаниеМесяца Из Расчет.НецелыеМесяцы Цикл
		ОписаниеМесяца.Вес = ОписаниеМесяца.Числитель / ОписаниеМесяца.Знаменатель;
		Расчет.ВсегоКоличествоМесяцев = Расчет.ВсегоКоличествоМесяцев + ОписаниеМесяца.Вес;
	КонецЦикла;
	
	Возврат Расчет;
	
КонецФункции

Функция ДоляОчередногоМесяцаВОстаткеАктива(Способ, Знач ОчереднойМесяц, Знач НачалоПериода, Знач КонецПериода, ПротоколРасчета = Неопределено) Экспорт
	
	ПротоколРасчета = Новый Структура;
	ПротоколРасчета.Вставить("Числитель",   0); // Вес очередного месяца (при расчете по месяцам - количество месяцев; при расчете по дням - количество дней в очередном месяце)
	ПротоколРасчета.Вставить("Знаменатель", 0); // Количество месяцев (дней), в течение которых осталось погашать стоимость (включая очередной месяц)
	
	ОчереднойМесяц  = НачалоМесяца(ОчереднойМесяц);
	
	Если ОчереднойМесяц < НачалоМесяца(НачалоПериода) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ОчереднойМесяц > НачалоМесяца(КонецПериода) Тогда
		// Это, вероятно, результат ошибки в учете.
		// Ошибку пользователь может исправить разными способами.
		// Для того, чтобы он мог выбрать подходящий способ, автоматически счет не закрываем.
		Возврат 0;
	КонецЕсли;
	
	Если Способ = Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда
		
		Если НачалоМесяца(ОчереднойМесяц) > НачалоМесяца(НачалоПериода) Тогда
			НачалоОстаткаПериода = НачалоМесяца(ОчереднойМесяц);
			ПротоколРасчета.Числитель = День(КонецМесяца(ОчереднойМесяц));
		Иначе
			НачалоОстаткаПериода = НачалоПериода;
			Если НачалоМесяца(ОчереднойМесяц) < НачалоМесяца(НачалоПериода) Тогда
				ПротоколРасчета.Числитель = 0;
			Иначе
				ОчереднойМесяц = Макс(ОчереднойМесяц, НачалоПериода);
				ПротоколРасчета.Числитель = День(КонецМесяца(ОчереднойМесяц)) - День(ОчереднойМесяц) + 1;
			КонецЕсли;
		КонецЕсли;
		
		ПротоколРасчета.Знаменатель = Окр((КонецДня(КонецПериода) - НачалоОстаткаПериода + 1) / 24 / 60 / 60, 0); // количество дней между НачалоОстаткаПериода и КонецПериода
		// Здесь операции с датами имеют следующий смысл:
		// a. КонецДня(КонецПериода) + 1: получаем дату начала следующего дня, чтобы количество секунд было кратным целым суткам
		// b. (a) - НачалоОстаткаПериода: получаем количество секунд.
		// Однако, в выражении порядок слагаемых другой, чтобы обеспечить корректное преобразование типов.
		
		Если ПротоколРасчета.Знаменатель < ПротоколРасчета.Числитель Тогда
			// Такое может быть в последнем месяце признания расходов
			ПротоколРасчета.Числитель = ПротоколРасчета.Знаменатель;
		КонецЕсли;
		
	ИначеЕсли Способ = Перечисления.СпособыПризнанияРасходов.ПоМесяцам Тогда
		
		Если ОчереднойМесяц = НачалоМесяца(НачалоПериода) Тогда
			// Так как оперируем остатком актива, то можно сэкономить и в расчет принимать только оставшийся срок признания расходов
			ПорядокСписания = ПорядокПризнанияРасходовПоМесяцам(НачалоПериода, КонецПериода);
		Иначе
			ПорядокСписания = ПорядокПризнанияРасходовПоМесяцам(ОчереднойМесяц, КонецПериода);
		КонецЕсли;
		
		ПротоколРасчета.Знаменатель = ПорядокСписания.ВсегоКоличествоМесяцев;
		
		Если ОчереднойМесяц >= ПорядокСписания.НачалоПериодаЦелыхМесяцев
			И ОчереднойМесяц <= ПорядокСписания.КонецПериодаЦелыхМесяцев Тогда
			ПротоколРасчета.Числитель = 1;
		Иначе
			НецелыйМесяц = ПорядокСписания.НецелыеМесяцы.Найти(ОчереднойМесяц, "Месяц");
			Если НецелыйМесяц <> Неопределено Тогда
				ПротоколРасчета.Числитель = НецелыйМесяц.Вес;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПротоколРасчета.Знаменатель = 0 Тогда
		Возврат 0;
	Иначе
		Возврат ПротоколРасчета.Числитель / ПротоколРасчета.Знаменатель;
	КонецЕсли;
	
КонецФункции

Функция СуммыРасходовОчередногоМесяца(Остаток, ОписаниеСумм, СпособПризнанияРасходов, ОчереднойМесяц, НачалоПериода, КонецПериода,
	ПротоколРасчета = Неопределено, ОсновнойВидРазниц = Неопределено) Экспорт
	
	Если КоллекцииСумм.Пустая(Остаток, ОписаниеСумм) Тогда
		Возврат Остаток;
	КонецЕсли;
	
	Если СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
		Возврат КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Или Не ЗначениеЗаполнено(КонецПериода) Тогда
		Возврат КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
	КонецЕсли;
		
	Доля = ДоляОчередногоМесяцаВОстаткеАктива(
		СпособПризнанияРасходов,
		ОчереднойМесяц,
		НачалоПериода,
		КонецПериода,
		ПротоколРасчета);
	
	СуммыРасходов = КоллекцииСумм.Доля(Остаток, ОписаниеСумм, Доля, 1);
	НалогНаПрибыльБухгалтерскийУчет.ИсправитьПогрешностиОкругления(
		СуммыРасходов,
		Остаток,
		ОписаниеСумм,
		Доля,
		1,
		ОсновнойВидРазниц);
	
	Возврат СуммыРасходов;
		
КонецФункции

#КонецОбласти

#Область ЧтениеИЗаписьДанных

Функция РаспределитьЧастьРасходовЗаМесяц(Период, Организация, Отказ, Ошибки = Неопределено) Экспорт
	
	Результат = НовыйРасчетСписанияРБП();
	Если Ошибки = Неопределено Тогда
		Ошибки = ВыводСообщенийОбОшибках.НовыйДетальнаяИнформацияОбОшибках();
	КонецЕсли;
	
	// Ограничения:
	ВидыРБП = Новый Массив;
	ВидыРБП.Добавить(Перечисления.ВидыРБП.Прочие);
	ВидыРБП.Добавить(Перечисления.ВидыРБП.ОсвоениеПриродныхРесурсов);
	ВидыРБП.Добавить(Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества);
	ВидыРБП.Добавить(Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни);
	ВидыРБП.Добавить(Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов);
	ВидыРБП.Добавить(Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности);
	ВидыРБП.Добавить(Перечисления.ВидыРБП.ПрочиеВидыСтрахования);
	
	СчетаУчетаРБП = Новый Массив;
	СчетаУчетаРБП.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);
	СчетаУчетаРБП.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	СчетаУчетаРБП.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования);
	
	СчетаУчетаРБП = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаУчетаРБП);   // добавляем субсчета
	
	// Получим списки счетов, где должна быть заполнена аналитика
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонтрольЗатрат.СоздатьВременныеТаблицыСчетаГдеОбязательнаАналитика(МенеджерВременныхТаблиц);
	
	// Получим исходные данные для расчета
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("СледующийМесяц",      КонецМесяца(Период) + 1);
	Запрос.УстановитьПараметр("Счета",               СчетаУчетаРБП);
	Запрос.УстановитьПараметр("ВидыРБП",             ВидыРБП);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК Сумма,
	|	СУММА(ХозрасчетныйОстатки.СуммаНУОстаток) КАК СуммаНУ,
	|	СУММА(ХозрасчетныйОстатки.СуммаПРОстаток) КАК СуммаПР,
	|	СУММА(ХозрасчетныйОстатки.СуммаВРОстаток) КАК СуммаВР,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.РасходыБудущихПериодов)
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РасходыБудущихПериодов)
	|		КОГДА ХозрасчетныйОстатки.Субконто3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РасходыБудущихПериодов)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РасходыБудущихПериодов.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяРБП
	|ПОМЕСТИТЬ ВТ_Сальдо
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&СледующийМесяц,
	|			Счет В (&Счета),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.Подразделение,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.РасходыБудущихПериодов)
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РасходыБудущихПериодов)
	|		КОГДА ХозрасчетныйОстатки.Субконто3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РасходыБудущихПериодов)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РасходыБудущихПериодов.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ХозрасчетныйОстатки.СуммаОстаток) <> 0
	|		ИЛИ СУММА(ХозрасчетныйОстатки.СуммаНУОстаток) <> 0
	|		ИЛИ СУММА(ХозрасчетныйОстатки.СуммаПРОстаток) <> 0
	|		ИЛИ СУММА(ХозрасчетныйОстатки.СуммаВРОстаток) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяРБП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сальдо.Счет КАК Счет,
	|	Сальдо.Подразделение КАК Подразделение,
	|	Сальдо.Субконто1 КАК Субконто1,
	|	Сальдо.Субконто2 КАК Субконто2,
	|	Сальдо.Субконто3 КАК Субконто3,
	|	Сальдо.Сумма КАК Сумма,
	|	Сальдо.СуммаНУ КАК СуммаНУ,
	|	Сальдо.СуммаПР КАК СуммаПР,
	|	Сальдо.СуммаВР КАК СуммаВР,
	|	Сальдо.СтатьяРБП КАК СтатьяРБП,
	|	СтатьиРБП.СпособПризнанияРасходов КАК СпособПризнанияРасходов,
	|	СтатьиРБП.ДатаНачалаСписания КАК ДатаНачалаСписания,
	|	СтатьиРБП.ДатаОкончанияСписания КАК ДатаОкончанияСписания,
	|	СтатьиРБП.СчетЗатрат КАК СчетЗатрат,
	|	СтатьиРБП.СубконтоЗатрат1 КАК СубконтоЗатрат1,
	|	СтатьиРБП.СубконтоЗатрат2 КАК СубконтоЗатрат2,
	|	СтатьиРБП.СубконтоЗатрат3 КАК СубконтоЗатрат3,
	|	СтатьиРБП.Сумма КАК СуммаДоговора,
	|	ВЫБОР
	|		КОГДА СчетаГдеОбязательныПодразделения.Счет ЕСТЬ NULL 
	|				ИЛИ Сальдо.Подразделение <> &ПустоеПодразделение
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаПодразделение,
	|	СчетаГдеОбязательныНоменклатурныеГруппы.НомерСубконто КАК НомерСубконтоОбязательныНоменклатурныеГруппы,
	|	СчетаГдеОбязательныСтатьиЗатрат.НомерСубконто КАК НомерСубконтоОбязательныСтатьиЗатрат
	|ИЗ
	|	ВТ_Сальдо КАК Сальдо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РасходыБудущихПериодов КАК СтатьиРБП
	|			ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныПодразделения КАК СчетаГдеОбязательныПодразделения
	|			ПО СтатьиРБП.СчетЗатрат = СчетаГдеОбязательныПодразделения.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныНоменклатурныеГруппы КАК СчетаГдеОбязательныНоменклатурныеГруппы
	|			ПО СтатьиРБП.СчетЗатрат = СчетаГдеОбязательныНоменклатурныеГруппы.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныСтатьиЗатрат КАК СчетаГдеОбязательныСтатьиЗатрат
	|			ПО СтатьиРБП.СчетЗатрат = СчетаГдеОбязательныСтатьиЗатрат.Счет
	|		ПО Сальдо.СтатьяРБП = СтатьиРБП.Ссылка
	|ГДЕ
	|	СтатьиРБП.ВидРБП В(&ВидыРБП)
	|	И СтатьиРБП.СпособПризнанияРасходов <> ЗНАЧЕНИЕ(Перечисление.СпособыПризнанияРасходов.ВОсобомПорядке)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сальдо.Счет,
	|	Сальдо.Субконто1,
	|	Сальдо.Субконто2,
	|	Сальдо.Субконто3,
	|	Сальдо.Подразделение";
	
	ОписаниеСумм = КоллекцииСумм.НовыйОписаниеКоллекцииСумм();
	КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "БухгалтерскийУчет",        "Сумма");
	КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "НалоговыйУчет",            "СуммаНУ");
	КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "РазницыПоНалогуНаПрибыль", "СуммаПР, СуммаВР");
	
	ОсновнойВидРазниц = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(Период, Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НеЗаполненоПодразделение = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ДатаНачалаСписания) Тогда
			Отказ = Истина;
			ШаблонСообщения = НСтр("ru = 'Не заполнена дата начала списания для статьи расходов будущих периодов ""%1"". 
				|Укажите дату начала списания.'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.СтатьяРБП);
			ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки, ТекстСообщения, Выборка.СтатьяРБП);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ДатаОкончанияСписания) Тогда
			Отказ = Истина;
			ШаблонСообщения = НСтр("ru = 'Не заполнена дата окончания списания для статьи расходов будущих периодов ""%1"". 
				|Укажите дату окончания списания.'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.СтатьяРБП);
			ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки, ТекстСообщения, Выборка.СтатьяРБП);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.СчетЗатрат) Тогда
			Отказ = Истина;
			ШаблонСообщения = НСтр("ru = 'Не заполнен счет списания для статьи расходов будущих периодов ""%1"". 
				|Укажите счет, в дебет которого следует относить расходы по мере списания РБП.'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.СтатьяРБП);
			ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки, ТекстСообщения, Выборка.СтатьяРБП);
		Иначе
		
			НеЗаполненаАналитика = Новый Массив;
			
			// Проверим заполнение аналитики учета затрат
			Если Выборка.ОшибкаПодразделение Тогда
				// В этом контексте сообщение выдавать не следует,
				// потому что причина не в неправильно оформленной статье РБП,
				// а в неправильно оформленном документе, которым приняты к учету РБП.
				// Такие документы найдем отдельно
				НеЗаполненоПодразделение.Добавить(Выборка.СтатьяРБП);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Выборка.НомерСубконтоОбязательныНоменклатурныеГруппы) 
				И НЕ ЗначениеЗаполнено(Выборка["СубконтоЗатрат" + Выборка.НомерСубконтоОбязательныНоменклатурныеГруппы]) Тогда
				НеЗаполненаАналитика.Добавить("НоменклатурнаяГруппа");
			КонецЕсли;
		
			Если ЗначениеЗаполнено(Выборка.НомерСубконтоОбязательныСтатьиЗатрат) 
				И НЕ ЗначениеЗаполнено(Выборка["СубконтоЗатрат" + Выборка.НомерСубконтоОбязательныСтатьиЗатрат]) Тогда
				НеЗаполненаАналитика.Добавить("СтатьяЗатрат");
			КонецЕсли;
		
			Если НеЗаполненаАналитика.Количество() > 0 Тогда
		
				// Сообщим об ошибке
			
				ТекстОшибки = НСтр("ru = 'Не [Заполнены] [Реквизиты] для статьи расходов будущих периодов ""[РБП]"".
					|Заполните аналитику'");
				
				ПараметрыТекста = Новый Структура;
				ПараметрыТекста.Вставить("РБП", "" + Выборка.СтатьяРБП);
			
				СловаДляСклонения = Новый Структура;
				СловаДляСклонения.Вставить("Заполнены", Новый Структура("он,она,оно,они",НСтр("ru='заполнен'"),НСтр("ru='заполнена'"),НСтр("ru='заполнено'"),НСтр("ru='заполнены'")));
				КонтрольЗатрат.ДобавитьСклонениеВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика, СловаДляСклонения); 
				
				// [Реквизиты]
				КонтрольЗатрат.ДобавитьПереченьАналитикиВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика);
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки,  ПараметрыТекста);
				
				ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки, ТекстСообщения, Выборка.СтатьяРБП);
				
			КонецЕсли;
			
		КонецЕсли; // Проверка аналитики
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		НачальноеСальдоАктива = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
		КоллекцииСумм.Заполнить(НачальноеСальдоАктива, Выборка, ОписаниеСумм);
		
		ПротоколРасчета = Неопределено;
		
		СуммыРасходов = СуммыРасходовОчередногоМесяца(
			НачальноеСальдоАктива,
			ОписаниеСумм,
			Выборка.СпособПризнанияРасходов,
			Период,
			Выборка.ДатаНачалаСписания,
			Выборка.ДатаОкончанияСписания,
			ПротоколРасчета,
			ОсновнойВидРазниц);
			
		Если КоллекцииСумм.Пустая(СуммыРасходов, ОписаниеСумм) Тогда
			Продолжить;
		КонецЕсли;
			
		КонечноеСальдоАктива = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
		КоллекцииСумм.Заполнить(КонечноеСальдоАктива, НачальноеСальдоАктива, ОписаниеСумм);
		КоллекцииСумм.Вычесть(КонечноеСальдоАктива, СуммыРасходов, ОписаниеСумм);
		
		СтрокаЗаписьРасчетаРБП = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаписьРасчетаРБП, СуммыРасходов);
		
		СтрокаЗаписьРасчетаРБП.НачОстаток   = НачальноеСальдоАктива.Сумма;
		СтрокаЗаписьРасчетаРБП.НачОстатокНУ = НачальноеСальдоАктива.СуммаНУ;
		СтрокаЗаписьРасчетаРБП.НачОстатокПР = НачальноеСальдоАктива.СуммаПР;
		СтрокаЗаписьРасчетаРБП.НачОстатокВР = НачальноеСальдоАктива.СуммаВР;
		
		СтрокаЗаписьРасчетаРБП.КонОстаток   = КонечноеСальдоАктива.Сумма;
		СтрокаЗаписьРасчетаРБП.КонОстатокНУ = КонечноеСальдоАктива.СуммаНУ;
		СтрокаЗаписьРасчетаРБП.КонОстатокПР = КонечноеСальдоАктива.СуммаПР;
		СтрокаЗаписьРасчетаРБП.КонОстатокВР = КонечноеСальдоАктива.СуммаВР;
		
		Если ПротоколРасчета <> Неопределено Тогда
			СтрокаЗаписьРасчетаРБП.КоличествоМесяцевДнейТекущегоПериода = ПротоколРасчета.Числитель;
			СтрокаЗаписьРасчетаРБП.КоличествоМесяцевДней                = ПротоколРасчета.Знаменатель;
		КонецЕсли;
		
		СтрокаЗаписьРасчетаРБП.ДатаНачала               = Выборка.ДатаНачалаСписания;
		СтрокаЗаписьРасчетаРБП.ДатаОкончания            = Выборка.ДатаОкончанияСписания;
		СтрокаЗаписьРасчетаРБП.СпособПризнанияРасходов  = Выборка.СпособПризнанияРасходов;
		СтрокаЗаписьРасчетаРБП.ПодразделениеОрганизации = Выборка.Подразделение;
		СтрокаЗаписьРасчетаРБП.СчетУчета                = Выборка.Счет;
		СтрокаЗаписьРасчетаРБП.СчетСписания             = Выборка.СчетЗатрат;
		СтрокаЗаписьРасчетаРБП.Статья                   = Выборка.СтатьяРБП;
		СтрокаЗаписьРасчетаРБП.СуммаДоговора            = Выборка.СуммаДоговора;
		
		СтрокаЗаписьРасчетаРБП.СубконтоЗатрат1          = Выборка.СубконтоЗатрат1;
		СтрокаЗаписьРасчетаРБП.СубконтоЗатрат2          = Выборка.СубконтоЗатрат2;
		СтрокаЗаписьРасчетаРБП.СубконтоЗатрат3          = Выборка.СубконтоЗатрат3;
		СтрокаЗаписьРасчетаРБП.СубконтоКт1              = Выборка.Субконто1;
		СтрокаЗаписьРасчетаРБП.СубконтоКт2              = Выборка.Субконто2;
		СтрокаЗаписьРасчетаРБП.СубконтоКт3              = Выборка.Субконто3;
		
	КонецЦикла;
	
	НайтиДокументыНеЗаполненоПодразделениеРБП(Ошибки, Организация, СчетаУчетаРБП, НеЗаполненоПодразделение, Отказ);
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьДвиженияРасчетСписанияРБП(РасчетСписанияРБП, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(РасчетСписанияРБП) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРасчетСписанияРБП(РасчетСписанияРБП, ТаблицаРеквизиты);	
	Реквизиты       = Параметры.Реквизиты[0];
	ПоддержкаПБУ18  = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	// С целью оптимизации производительности напрямую (а не через функции с повторно используемыми значениями) кешируем
	// свойства счетов. При заполнении субконто исключаем лишние проверки на значения субконто (наличие субконто на счете
	// и т.п. существующие в алгоритме как предусловия).
	СвойстваСчетовДтКеш = Новый Соответствие;
	СвойстваСчетовКтКеш = Новый Соответствие;
	
	// С целью оптимизации производительности будем выполнять проверку, является ли счет 08.03, в цикле, а не в вызываемой
	// функции ОпределитьНеПринимаемыеРасходы(). Формируем список субсчетов счета 08.03 .
	СубсчетаСтроительствоОбъектовОсновныхСредств = 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	
	Для каждого СтрокаРасчетРБП Из Параметры.ТаблицаРасчетСписанияРБП Цикл
		Проводка             = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		
		Проводка.СчетДт      = СтрокаРасчетРБП.СчетСписания;
		СвойстваСчетаДт = БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетовДтКеш,
				СтрокаРасчетРБП.СубконтоЗатрат1, СтрокаРасчетРБП.СубконтоЗатрат2, СтрокаРасчетРБП.СубконтоЗатрат3);
		
		Проводка.СчетКт      = СтрокаРасчетРБП.СчетУчета;
		СвойстваСчетаКт = БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетовКтКеш,
				СтрокаРасчетРБП.СубконтоКт1, СтрокаРасчетРБП.СубконтоКт2, СтрокаРасчетРБП.СубконтоКт3);
		
		Проводка.Сумма       = СтрокаРасчетРБП.Сумма;
		
		Проводка.СуммаПРДт = СтрокаРасчетРБП.СуммаПР;
		Проводка.СуммаНУДт = СтрокаРасчетРБП.СуммаНУ;
		ЭтоНепринимаемыеРасходы = СубсчетаСтроительствоОбъектовОсновныхСредств.Найти(Проводка.СчетДт) = Неопределено
			И НалоговыйУчет.ОпределитьНеПринимаемыеРасходы(Проводка, Истина);
		Если ЭтоНепринимаемыеРасходы Тогда 
			Проводка.СуммаПРДт = ?(ПоддержкаПБУ18, Проводка.СуммаПРДт + Проводка.СуммаНУДт, 0);
			Проводка.СуммаНУДт = 0;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтрокаРасчетРБП.ПодразделениеОрганизации, СтрокаРасчетРБП.ПодразделениеОрганизации);
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
			Проводка.СуммаНУДт, СтрокаРасчетРБП.СуммаНУ, Проводка.СуммаПРДт,
			СтрокаРасчетРБП.СуммаПР, СтрокаРасчетРБП.СуммаВР, СтрокаРасчетРБП.СуммаВР,
			Проводка, ПоддержкаПБУ18); 
		
		Проводка.Содержание  = Реквизиты.Содержание;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвиженияРасчетСписанияРБП()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйРасчетСписанияРБП()
	
	ОписаниеТипаДата  = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	ОписаниеТипаВес   = ОбщегоНазначения.ОписаниеТипаЧисло(10, 6);
	ОписаниеТипаСумма = ОбщегоНазначения.ОписаниеТипаЧисло(12, 2);
	
	Расчет = Новый ТаблицаЗначений;
	Расчет.Колонки.Добавить("Организация",              Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Расчет.Колонки.Добавить("СчетУчета",                Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Расчет.Колонки.Добавить("ПодразделениеОрганизации", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	Расчет.Колонки.Добавить("СубконтоКт1");
	Расчет.Колонки.Добавить("СубконтоКт2");
	Расчет.Колонки.Добавить("СубконтоКт3");
	Расчет.Колонки.Добавить("Статья",                   Новый ОписаниеТипов("СправочникСсылка.РасходыБудущихПериодов"));
	
	Расчет.Колонки.Добавить("ДатаНачала",               ОписаниеТипаДата);
	Расчет.Колонки.Добавить("ДатаОкончания",            ОписаниеТипаДата);
	Расчет.Колонки.Добавить("СпособПризнанияРасходов",  Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПризнанияРасходов"));
	
	Расчет.Колонки.Добавить("КоличествоМесяцевДнейТекущегоПериода", ОписаниеТипаВес);
	Расчет.Колонки.Добавить("КоличествоМесяцевДней",                ОписаниеТипаВес);
	
	Расчет.Колонки.Добавить("СчетСписания",             Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Расчет.Колонки.Добавить("СубконтоЗатрат1");
	Расчет.Колонки.Добавить("СубконтоЗатрат2");
	Расчет.Колонки.Добавить("СубконтоЗатрат3");
	
	Расчет.Колонки.Добавить("СуммаДоговора",            ОписаниеТипаСумма);
	
	Расчет.Колонки.Добавить("НачОстаток",               ОписаниеТипаСумма);
	Расчет.Колонки.Добавить("НачОстатокНУ",             ОписаниеТипаСумма);
	Расчет.Колонки.Добавить("НачОстатокПР",             ОписаниеТипаСумма);
	Расчет.Колонки.Добавить("НачОстатокВР",             ОписаниеТипаСумма);
	
	Расчет.Колонки.Добавить("Сумма",                    ОписаниеТипаСумма);
	Расчет.Колонки.Добавить("СуммаНУ",                  ОписаниеТипаСумма);
	Расчет.Колонки.Добавить("СуммаПР",                  ОписаниеТипаСумма);
	Расчет.Колонки.Добавить("СуммаВР",                  ОписаниеТипаСумма);
	
	Расчет.Колонки.Добавить("КонОстаток",               ОписаниеТипаСумма);
	Расчет.Колонки.Добавить("КонОстатокНУ",             ОписаниеТипаСумма);
	Расчет.Колонки.Добавить("КонОстатокПР",             ОписаниеТипаСумма);
	Расчет.Колонки.Добавить("КонОстатокВР",             ОписаниеТипаСумма);
	
	Возврат Расчет;
	
КонецФункции

Процедура НайтиДокументыНеЗаполненоПодразделениеРБП(Ошибки, Организация, СчетаУчетаРБП, РБПНеЗаполненоПодразделение, Отказ)
	
	Если РБПНеЗаполненоПодразделение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Ищем документы принятия к учету РБП. Эти документы могли быть введены ранее месяца,
	// в котором выполняется регламентная операция
	
	// Так как выполняем запрос к виртуальной таблице без отбора,
	// постараемся максимально упростить построение виртуальной таблицы и ограничить отборами данные для ее построения.
	// Для этого предварительно выберем во временные таблицы перечень РБП и перечень подозрительных регистраторов.
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("СчетаУчетаРБП",               СчетаУчетаРБП);
	Запрос.УстановитьПараметр("РБПНеЗаполненоПодразделение", РБПНеЗаполненоПодразделение);
	Запрос.УстановитьПараметр("ПустоеПодразделение", 		 БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка
	|ПОМЕСТИТЬ ПроблемныеРБП
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|ГДЕ
	|	РасходыБудущихПериодов.Ссылка В(&РБПНеЗаполненоПодразделение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйСубконто.Регистратор
	|ПОМЕСТИТЬ ПодозрительныеДокументы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|ГДЕ
	|	ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|	И ХозрасчетныйСубконто.Значение В
	|			(ВЫБРАТЬ
	|				Отбор.Ссылка
	|			ИЗ
	|				ПроблемныеРБП КАК Отбор)
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйСубконто.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор,
	|	Движения.СчетДт КАК СчетРБП,
	|	ВЫБОР
	|		КОГДА Движения.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|			ТОГДА Движения.СубконтоДт1
	|		КОГДА Движения.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|			ТОГДА Движения.СубконтоДт2
	|		КОГДА Движения.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|			ТОГДА Движения.СубконтоДт3
	|	КОНЕЦ КАК СтатьяРБП,
	|	Движения.Период
	|ПОМЕСТИТЬ ПроблемныеДокументы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Организация = &Организация
	|				И ПодразделениеДт = &ПустоеПодразделение
	|				И Регистратор В
	|					(ВЫБРАТЬ
	|						Отбор.Регистратор
	|					ИЗ
	|						ПодозрительныеДокументы КАК Отбор)
	|				И Активность
	|				И (ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|						И СубконтоДт1 В
	|							(ВЫБРАТЬ
	|								Отбор.Ссылка
	|							ИЗ
	|								ПроблемныеРБП КАК Отбор)
	|					ИЛИ ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|						И СубконтоДт2 В
	|							(ВЫБРАТЬ
	|								Отбор.Ссылка
	|							ИЗ
	|								ПроблемныеРБП КАК Отбор)
	|					ИЛИ ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|						И СубконтоДт3 В
	|							(ВЫБРАТЬ
	|								Отбор.Ссылка
	|							ИЗ
	|								ПроблемныеРБП КАК Отбор))
	|				И СчетДт В (&СчетаУчетаРБП),
	|			,
	|			) КАК Движения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроблемныеДокументы.Регистратор,
	|	ПроблемныеДокументы.СчетРБП,
	|	ПроблемныеДокументы.СтатьяРБП,
	|	ПРЕДСТАВЛЕНИЕ(ПроблемныеДокументы.Регистратор),
	|	ПРЕДСТАВЛЕНИЕ(ПроблемныеДокументы.СчетРБП),
	|	ПРЕДСТАВЛЕНИЕ(ПроблемныеДокументы.СтатьяРБП),
	|	ПроблемныеДокументы.Период КАК Период
	|ИЗ
	|	ПроблемныеДокументы КАК ПроблемныеДокументы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";

	// Обработаем результат
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'При принятии к учету расходов будущих периодов по статье ""%НазваниеСпособа%"" не заполнено подразделение на счете %Счет% в документе %Регистратор%.
		|Укажите подразделение'");
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НазваниеСпособа%", Выборка.СтатьяРБП);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Счет%",            Выборка.СчетРБП);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Регистратор%",     Выборка.Регистратор);
		
		ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки, ТекстОшибки, Выборка.Регистратор);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыРасчетСписанияРБП(РасчетСписанияРБП, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетСписанияРБП
	
	СписокОбязательныхКолонок = ""
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "Статья,"                     // <СправочникСсылка.РасходыБудущихПериодов>
	+ "ДатаНачала,"                 // <Дата>
	+ "ДатаОкончания,"              // <Дата>
	+ "СчетУчета,"                  // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетСписания,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособПризнанияРасходов,"    // <ПеречислениеСсылка.СпособыПризнанияРасходов>
	+ "ПодразделениеОрганизации,"   // <Ссылка на справочник подразделений>
	+ "СубконтоЗатрат1,"
	+ "СубконтоЗатрат2,"
	+ "СубконтоЗатрат3,"
	+ "СубконтоКт1,"
	+ "СубконтоКт2,"
	+ "СубконтоКт3,"
	+ "КоличествоМесяцевДнейТекущегоПериода," // <Число, 10, 6>
	+ "КоличествоМесяцевДней,"                // <Число, 10, 6>
	+ "СуммаДоговора,"                        // <Число, 10, 2>
	+ "НачОстаток,"                           // <Число, 12, 2>
	+ "НачОстатокНУ,"                         // <Число, 12, 2>
	+ "НачОстатокПР,"                         // <Число, 12, 2>
	+ "НачОстатокВР,"                         // <Число, 12, 2>
	+ "Сумма,"                                // <Число, 12, 2>
	+ "СуммаНУ,"                              // <Число, 12, 2>
	+ "СуммаПР,"                              // <Число, 12, 2>
	+ "СуммаВР,"                              // <Число, 12, 2>
	+ "КонОстаток,"                           // <Число, 12, 2>
	+ "КонОстатокНУ,"                         // <Число, 12, 2>
	+ "КонОстатокПР,"                         // <Число, 12, 2>
	+ "КонОстатокВР"                          // <Число, 12, 2>
	;
	
	Параметры.Вставить("ТаблицаРасчетСписанияРБП", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(РасчетСписанияРБП, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"           // <Дата>
	+ "НачДата,"          // <Дата>
	+ "КонДата,"          // <Дата>
	+ "Организация,"      // <СправочникСсылка.Организации>
	+ "Регистратор,"      // <ДокументСсылка.*>
	+ "Содержание"        // <Строка, 150>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыРасчетСписанияРБП()

#КонецОбласти
