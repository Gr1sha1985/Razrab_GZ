////////////////////////////////////////////////////////////////////////////////
// Процедуры обмена данными с мобильной бухгалтерией (подсистема зарплаты).

#Область СлужебныйПрограммныйИнтерфейс

Функция ВключенТарифДляСубъектовМалогоБизнесаКоронавирус(ХранилищеПараметров) Экспорт
	
	СтруктураПараметров = ХранилищеПараметров.Получить();
	Организация = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(СтруктураПараметров.Организация, "Организации");
	
	ПериодОсвобождения = ПериодДействияСниженногоТарифаДляСубъектовМалогоБизнеса(Истина);
	ОтборПоОрганизации = Новый Структура("ГоловнаяОрганизация", Организация);
	ТаблицаЗаписей     = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(ПериодОсвобождения.Начало, ОтборПоОрганизации);
	
	Если ТаблицаЗаписей.Количество() > 0 Тогда
		Возврат ТаблицаЗаписей[0].ВидТарифа = ДляСубъектовМалогоПредпринимательства();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция УправлениеТарифамиСтраховыхВзносовКоронавирус(ХранилищеПараметров) Экспорт
	
	СтруктураПараметров = ХранилищеПараметров.Получить();
		
	Результат = Новый Структура();
	Результат.Вставить("ОбработкаНачислений", Ложь);
	Результат.Вставить("ТарифПострадавшие",   Ложь);
	Результат.Вставить("ТарифМалыйБизнес",    Ложь);
	Результат.Вставить("СообщениеОбОшибке",   "");
	
	Если СтруктураПараметров.Свойство("Организация") Тогда
		Организация = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(СтруктураПараметров.Организация, "Организации");
	Иначе
		Результат.СообщениеОбОшибке = НСтр("ru='Не передан обязательный параметр Организация'");
		Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ИспользоватьТарифДляСубъектовМалогоБизнеса") Тогда
		ИспользоватьТарифДляСубъектовМалогоБизнеса = СтруктураПараметров.ИспользоватьТарифДляСубъектовМалогоБизнеса;
	Иначе
		Результат.СообщениеОбОшибке = НСтр("ru='Не передан обязательный параметр ИспользоватьТарифДляСубъектовМалогоБизнеса'");
		Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ДеятельностьОтнесенаКПострадавшимОтКоронавируса") Тогда
		ДеятельностьОтнесенаКПострадавшимОтКоронавируса = СтруктураПараметров.ДеятельностьОтнесенаКПострадавшимОтКоронавируса;
	Иначе
		МенеджерЗаписи = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();
		ДеятельностьОтнесенаКПострадавшимОтКоронавируса = МенеджерЗаписи.ДеятельностьОтнесенаКПострадавшимОтКоронавируса;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("УстановитьДеятельностьОтнесенаКПострадавшимОтКоронавируса")
		И СтруктураПараметров.УстановитьДеятельностьОтнесенаКПострадавшимОтКоронавируса Тогда
		
		МенеджерЗаписи = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			// Если запись не существует, то поле Организация сброшено
			МенеджерЗаписи.Организация = Организация;
		КонецЕсли;	
		Если ДеятельностьОтнесенаКПострадавшимОтКоронавируса <> МенеджерЗаписи.ДеятельностьОтнесенаКПострадавшимОтКоронавируса Тогда
			МенеджерЗаписи.ДеятельностьОтнесенаКПострадавшимОтКоронавируса = ДеятельностьОтнесенаКПострадавшимОтКоронавируса;
			МенеджерЗаписи.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
	
	Результат.ТарифПострадавшие = УчетЗарплаты.УстановитьТарифСтраховыхВзносовДляОтраслейПострадавшихОтКоронавируснойИнфекции(Организация, ДеятельностьОтнесенаКПострадавшимОтКоронавируса);
	Если НЕ Результат.ТарифПострадавшие Тогда
		Результат.СообщениеОбОшибке = НСтр("ru='Не удалось установить тариф для пострадавших от короновирусной инфекции'");
		Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Результат.ТарифМалыйБизнес = УстановитьТарифСтраховыхВзносовДляСубъектовМалогоБизнеса(Организация, ИспользоватьТарифДляСубъектовМалогоБизнеса, ДеятельностьОтнесенаКПострадавшимОтКоронавируса);
	Если НЕ Результат.ТарифМалыйБизнес Тогда
		Результат.СообщениеОбОшибке = НСтр("ru='Не удалось установить тариф для субъектов малого бизнеса'");
		Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	КонецЕсли;
		
	ПериодОсвобождения = ПериодДействияСниженногоТарифаДляСубъектовМалогоБизнеса(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВсяОрганизация", БухгалтерскийУчетПереопределяемый.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("НачалоПериода",  ПериодОсвобождения.Начало);
	Запрос.УстановитьПараметр("КонецПериода",   ПериодОсвобождения.Конец);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеЗарплаты.Ссылка КАК Ссылка,
	|	НачислениеЗарплаты.Сотрудники.(
	|		НомерСтроки КАК НомерСтроки,
	|		Сотрудник КАК Сотрудник
	|	) КАК Сотрудники,
	|	НачислениеЗарплаты.Дата КАК Дата
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.Проведен
	|	И НачислениеЗарплаты.МесяцНачисления МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачислениеЗарплаты.Организация В(&ВсяОрганизация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ ПО
	|	Ссылка";
	
	ДеревоНачислений = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого Начисление Из ДеревоНачислений.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Начисление.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		Если Начисление.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ДокументОбъект = Начисление.Ссылка.ПолучитьОбъект();
			Сотрудники = Начисление.Строки[0].Сотрудники.ВыгрузитьКолонку("Сотрудник");
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			Документы.НачислениеЗарплаты.ОбновитьНДФЛиВзносыСотрудников(ДокументОбъект, Сотрудники, Ложь, Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Результат.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
		КонецПопытки
	КонецЦикла;
	
	Результат.ОбработкаНачислений = Истина;
		
	Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
КонецФункции

#Область ЧастичныйОбменДаннымиПоЗарплате

Функция ЗаявленияНаСтандартныеВычеты(ХранилищеПараметров) Экспорт
	
	ПараметрыРасчета = ХранилищеПараметров.Получить();
	
	Результат = Новый Структура;
	Результат.Вставить("Месяц", Дата(1,1,1));
	Результат.Вставить("ЗаявлениеИдентификатор", "");
	Результат.Вставить("ВычетыНаДетей", Новый ТаблицаЗначений);
	
	ФизическоеЛицо = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ПараметрыРасчета.ФизическоеЛицо, "ФизическиеЛица");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации) КАК МесяцРегистрации
	|ПОМЕСТИТЬ ВТПоследнийМесяцВычетовНаДетей
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
	|ГДЕ
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтандартныеВычетыНаДетейНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ПоследнееЗаявлениеНаВычет
	|ИЗ
	|	ВТПоследнийМесяцВычетовНаДетей КАК ВТПоследнийМесяцВычетовНаДетей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
	|		ПО (СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации = ВТПоследнийМесяцВычетовНаДетей.МесяцРегистрации)
	|			И (СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = &ФизическоеЛицо)
	|ГДЕ
	|	СтандартныеВычетыНаДетейНДФЛ.Регистратор ССЫЛКА Документ.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ
	|	И СтандартныеВычетыНаДетейНДФЛ.КоличествоДетей > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследнееЗаявлениеНаВычет.Регистратор КАК Заявление,
	|	ВТ_ПоследнееЗаявлениеНаВычет.Регистратор.Месяц КАК Месяц
	|ИЗ
	|	ВТ_ПоследнееЗаявлениеНаВычет КАК ВТ_ПоследнееЗаявлениеНаВычет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтандартныеВычетыНаДетейНДФЛ.КодВычета КАК КодВычета,
	|	СтандартныеВычетыНаДетейНДФЛ.КодВычета.Код КАК КодВычетаКод,
	|	СтандартныеВычетыНаДетейНДФЛ.КодВычета.ПолноеНаименование КАК КодВычетаНаименование,
	|	СтандартныеВычетыНаДетейНДФЛ.ДокументПодтверждающийПравоНаВычет КАК ДокументПодтверждающийПравоНаВычет,
	|	СтандартныеВычетыНаДетейНДФЛ.ДействуетДо КАК ДействуетДо
	|ИЗ
	|	Документ.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.ВычетыНаДетей КАК СтандартныеВычетыНаДетейНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследнееЗаявлениеНаВычет КАК ПоследнееЗаявлениеНаВычет
	|		ПО СтандартныеВычетыНаДетейНДФЛ.Ссылка = ПоследнееЗаявлениеНаВычет.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтандартныеВычетыНаДетейНДФЛ.КодВычета.Код,
	|	ДействуетДо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо" , ФизическоеЛицо);
	
	ПакетныйЗапрос = Запрос.ВыполнитьПакет();
	
	ДанныеЗаявления = ПакетныйЗапрос[2].Выбрать();
	
	Если ДанныеЗаявления.Следующий() И НЕ ПакетныйЗапрос[3].Пустой() Тогда
		
		//Возможен ввод только одного заявления в месяц
		//Если сотрудник уволен ему нельзя вводить вычеты
		
		ВычетыНаДетей = ПакетныйЗапрос[3].Выгрузить();
		ВычетыНаДетей.Колонки.Добавить("КодВычетаИдентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(40));
		
		Для каждого СтрокаВычета Из ВычетыНаДетей Цикл
			СтрокаВычета.КодВычетаИдентификатор = МобильнаяБухгалтерия.СериализоватьСсылку(СтрокаВычета.КодВычета);
		КонецЦикла;
		
		Результат.Месяц                  = ДанныеЗаявления.Месяц;
		Результат.ЗаявлениеИдентификатор = МобильнаяБухгалтерия.СериализоватьСсылку(ДанныеЗаявления.Заявление);
		
		ВычетыНаДетей.Колонки.Удалить("КодВычета");
		
		Результат.ВычетыНаДетей = ВычетыНаДетей;
		
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
КонецФункции

Функция ВидыВычетовНДФЛ(ХранилищеПараметров) Экспорт
	
	ПараметрыРасчета = ХранилищеПараметров.Получить();
	
	ДанныеВыбора = Новый Структура;
	ДанныеВыбора.Вставить("Классификатор", Новый Массив);
	
	НалоговыйПериод = ПараметрыРасчета.МесяцНачисления;
	ГруппаВычета = Перечисления.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей;
	
	ДоступныеВычеты = УчетНДФЛ.ВычетыНалогоплательщика(Год(НалоговыйПериод), ГруппаВычета);
	ЗначенияРеквизитовВычетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДоступныеВычеты, "Код, ПолноеНаименование");
	Для каждого Вычет Из ДоступныеВычеты Цикл
		ЗначенияРеквизитовВычета = ЗначенияРеквизитовВычетов.Получить(Вычет);
		Данные = Новый Структура("Идентификатор, Код, Наименование" , XMLСтрока(Вычет), СокрЛП(ЗначенияРеквизитовВычета.Код), ЗначенияРеквизитовВычета.ПолноеНаименование);
		ДанныеВыбора.Классификатор.Добавить(Данные);
	КонецЦикла;
		
	Возврат Новый ХранилищеЗначения(ДанныеВыбора, Новый СжатиеДанных(9));
	
КонецФункции

Функция СоздатьИзменитьЗаявленияНаСтандартныеВычеты(ХранилищеПараметров) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	ПараметрыДокумента = ХранилищеПараметров.Получить();
	
	Попытка
		ЗагрузитьЗаявлениеНаСтандартныйВычет(ПараметрыДокумента);
		Результат.Успешно = Истина;
	Исключение
		Результат.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
КонецФункции

// Выгружает в мобильное приложение данные документов по результатам расчета зарплаты.
//
// Параметры:
//   УзелОбменаКод              - Строка, код узла обмена мобильного устройства.
//   УзелОбменаИмя              - Строка, имя мобильного устройства. Используется при создании нового узла обмена.
//	 ХранилищеПараметров        - ХранилищеЗначения, содержит структуру для отбора результата с ключами:
//		* Организация           - Строка - Сериализованный идентификатор организации.
//   СообщениеОбОшибке          - Строка, возвращает текст сообщения об ошибке.
//
// Возвращаемое значение:
//   ХранилищеЗначения - хранилище, содержащее xml с данными обмена.
//	
Функция ВыгрузитьДанныеВМобильноеПриложениеПоЗарплате(УзелОбменаКод, УзелОбменаИмя, ХранилищеПараметров, СообщениеОбОшибке) Экспорт

	ПараметрыРасчета = ХранилищеПараметров.Получить();
	
	Организация = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ПараметрыРасчета.Организация, "Организации");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.Организация = &Организация
	|	И НачислениеЗарплаты.Проведен";

	Отбор = Новый Массив;
	Отбор = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МобильнаяБухгалтерия.ВыгрузитьДанныеВМобильноеПриложение(УзелОбменаКод, УзелОбменаИмя, СообщениеОбОшибке, Отбор);

КонецФункции

#КонецОбласти

#Область ЗагрузитьДанные

#Область Справочники

Процедура ЗагрузитьДолжности(ОбъектXDTO, УзелОбмена) Экспорт
	
	Ссылка = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Должности");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Должности.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование		   = ОбъектXDTO.Наименование;
	Объект.НаименованиеКраткое = ОбъектXDTO.Наименование;
	Объект.ПометкаУдаления	   = ОбъектXDTO.ПометкаУдаления;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьСотрудники(ОбъектXDTO, УзелОбмена) Экспорт
	
	Ссылка = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Сотрудники");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Сотрудники.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.Код             = ОбъектXDTO.Код;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Объект.ФизическоеЛицо      = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ФизическоеЛицо, "ФизическиеЛица");
	Объект.ГоловнаяОрганизация = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ГоловнаяОрганизация, "Организации");
	
	Если НЕ ЗначениеЗаполнено(Объект.ГоловнойСотрудник) Тогда
		Объект.ГоловнойСотрудник = Ссылка;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка    = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
	ОбновитьМестаВыплатыЗарплатыСотрудников(Объект.ФизическоеЛицо, Объект.Ссылка);
	
КонецПроцедуры

Процедура ЗагрузитьФизическиеЛица(ОбъектXDTO, УзелОбмена) Экспорт
	
	Ссылка = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "ФизическиеЛица");
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.Код             = ОбъектXDTO.Код;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Объект.Фамилия  = ОбъектXDTO.Фамилия;
	Объект.Имя      = ОбъектXDTO.Имя;
	Объект.Отчество = ОбъектXDTO.Отчество;
	Объект.ФИО      = ОбъектXDTO.Фамилия + " " + ОбъектXDTO.Имя + ?(ЗначениеЗаполнено(ОбъектXDTO.Отчество), ОбъектXDTO.Отчество, "");
	Объект.ДатаРождения = ОбъектXDTO.ДатаРождения;
	
	Если ОбъектXDTO.ФаксимилеПодписи <> Неопределено Тогда
		Объект.ФаксимилеПодписи = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ФаксимилеПодписи, "ФизическиеЛицаПрисоединенныеФайлы");
	КонецЕсли;
	
	Если ОбъектXDTO.Пол = "Мужской" Тогда
		Объект.Пол = Перечисления.ПолФизическогоЛица.Мужской;
	ИначеЕсли ОбъектXDTO.Пол = "Женский" Тогда
		Объект.Пол = Перечисления.ПолФизическогоЛица.Женский;
	КонецЕсли;
	
	Объект.ИНН                 = ОбъектXDTO.ИНН;
	Объект.СтраховойНомерПФР   = ОбъектXDTO.СтраховойНомерПФР;
	Объект.ОсновнойБанковскийСчет = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(
		ОбъектXDTO.ОсновнойБанковскийСчет, "БанковскиеСчета");

	Объект.НаименованиеСлужебное = ФизическиеЛицаЗарплатаКадры.НаименованиеСлужебное(ОбъектXDTO.Наименование);
	Объект.Инициалы              = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ИнициалыПоИмениОтчеству(
		Объект.Имя, Объект.Отчество);

	Если НЕ ЭтоНовый Тогда
		ВидыКИ = Новый Массив;
		ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
		ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
		ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица);
		ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
		ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
		
		Для Каждого ВидКИ Из ВидыКИ Цикл
			Отбор = Новый Структура("Вид", ВидКИ);
			Для каждого СтрокаКИ Из Объект.КонтактнаяИнформация.НайтиСтроки(Отбор) Цикл
				Объект.КонтактнаяИнформация.Удалить(СтрокаКИ);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаКИ Из ОбъектXDTO.КонтактнаяИнформация Цикл
		
		ВидыКИ = Новый Массив;
		Если СтрокаКИ.ВидКИ = "ЮридическийАдрес" Тогда
			
			ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
			ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
			ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица);
			
		ИначеЕсли СтрокаКИ.ВидКИ = "Телефон" Тогда
			
			ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
			
		ИначеЕсли СтрокаКИ.ВидКИ = "АдресЭлектроннойПочты" Тогда
			
			ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
			
		КонецЕсли;
		
		Для каждого ВидКи Из ВидыКИ Цикл
			Если ПустаяСтрока(СтрокаКИ.Значение)
			 И ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) Тогда
				ЗначениеКИ = СтрокаКИ.ЗначенияПолей;
			Иначе
				ЗначениеКИ = СтрокаКИ.Значение;
			КонецЕсли;
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Объект, ЗначениеКИ, ВидКИ,, Ложь);
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.ОбменДанными.Загрузка    = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
	ОбновитьМестаВыплатыЗарплатыСотрудников(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрыСведений

Процедура ЗагрузитьДокументыФизическихЛиц(ОбъектXDTO, УзелОбмена) Экспорт
	
	ФизическоеЛицо = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ФизЛицо, "ФизическиеЛица");
	ВидДокумента   = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
	
	НаборЗаписей = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизЛицо.Установить(ФизическоеЛицо);
	НаборЗаписей.Отбор.ВидДокумента.Установить(ВидДокумента);
	НаборЗаписей.Отбор.Период.Установить(ОбъектXDTO.Период);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период               = ОбъектXDTO.Период;
	НоваяЗапись.ФизЛицо              = ФизическоеЛицо;
	НоваяЗапись.ВидДокумента         = ВидДокумента;
	НоваяЗапись.Серия                = ОбъектXDTO.Серия;
	НоваяЗапись.Номер                = ОбъектXDTO.Номер;
	НоваяЗапись.ДатаВыдачи           = ОбъектXDTO.ДатаВыдачи;
	НоваяЗапись.СрокДействия         = ОбъектXDTO.СрокДействия;
	НоваяЗапись.КемВыдан             = ОбъектXDTO.КемВыдан;
	НоваяЗапись.КодПодразделения     = ОбъектXDTO.КодПодразделения;
	НоваяЗапись.Представление        = ОбъектXDTO.Представление;
	НоваяЗапись.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьТекущиеКадровыеДанныеСотрудников(ОбъектXDTO, УзелОбмена) Экспорт
	
	ФизическоеЛицо      = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(
		ОбъектXDTO.ФизическоеЛицо, "ФизическиеЛица");
	Сотрудник           = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(
		ОбъектXDTO.Сотрудник,      "Сотрудники");
	ГоловнаяОрганизация = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(
		ОбъектXDTO.ГоловнаяОрганизация, "Организации");
	
	// В качестве подразделения всегда подставляем единственное подразделение организации.
	ОсновноеПодразделение = Справочники.ПодразделенияОрганизаций.ОсновноеПодразделениеОрганизации(ГоловнаяОрганизация, Истина);
	
	НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ГоловнаяОрганизация);
	НаборЗаписей.Отбор.ТекущаяОрганизация.Установить(ГоловнаяОрганизация);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	// Измерения
	НоваяЗапись.ФизическоеЛицо       = ФизическоеЛицо;
	НоваяЗапись.Сотрудник            = Сотрудник;
	НоваяЗапись.ГоловнаяОрганизация  = ГоловнаяОрганизация;
	НоваяЗапись.ТекущаяОрганизация   = ГоловнаяОрганизация;
	
	// Ресурсы
	НоваяЗапись.ТекущееПодразделение = ОсновноеПодразделение;
	НоваяЗапись.ТекущаяДолжность     = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(
		ОбъектXDTO.ТекущаяДолжность, "Должности");
	НоваяЗапись.ДатаПриема           = ОбъектXDTO.ДатаПриема;
	НоваяЗапись.ДатаУвольнения       = ОбъектXDTO.ДатаУвольнения;
	
	// Совместительства в мобильной бухгалтерии не поддерживаются.
	НоваяЗапись.ОсновноеРабочееМестоВОрганизации = Истина;
	НоваяЗапись.ТекущийВидЗанятости              = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
	НоваяЗапись.ОформленПоТрудовомуДоговору      = Истина;
	
	// Только полная ставка
	НоваяЗапись.КоличествоСтавок = 1;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьТекущаяТарифнаяСтавкаСотрудников(ОбъектXDTO, УзелОбмена) Экспорт
	
	ФизическоеЛицо      = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(
		ОбъектXDTO.ФизическоеЛицо,      "ФизическиеЛица");
	Сотрудник           = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(
		ОбъектXDTO.Сотрудник,           "Сотрудники");
	ГоловнаяОрганизация = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(
		ОбъектXDTO.ГоловнаяОрганизация, "Организации");
	
	НастройкиУчетаЗарплаты = РегистрыСведений.НастройкиУчетаЗарплаты.Получить(
		Новый Структура("Организация", ГоловнаяОрганизация));
	
	НаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ГоловнаяОрганизация);
	НаборЗаписей.Отбор.ТекущаяОрганизация.Установить(ГоловнаяОрганизация);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	// Измерения
	НоваяЗапись.ФизическоеЛицо       = ФизическоеЛицо;
	НоваяЗапись.Сотрудник            = Сотрудник;
	НоваяЗапись.ГоловнаяОрганизация  = ГоловнаяОрганизация;
	НоваяЗапись.ТекущаяОрганизация   = ГоловнаяОрганизация;
	
	// Ресурсы
	НоваяЗапись.ТекущаяТарифнаяСтавка      = ОбъектXDTO.ТекущаяТарифнаяСтавка;
	НоваяЗапись.ТекущийСпособРасчетаАванса = НастройкиУчетаЗарплаты.СпособРасчетаАванса;
	НоваяЗапись.ТекущийАванс               = НастройкиУчетаЗарплаты.Аванс;

	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьФИОФизическихЛиц(ОбъектXDTO, УзелОбмена) Экспорт
	
	ФизическоеЛицо = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(
		ОбъектXDTO.ФизическоеЛицо, "ФизическиеЛица");
	
	НаборЗаписей = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	НаборЗаписей.Отбор.Период.Установить(ОбъектXDTO.Период);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период               = ОбъектXDTO.Период;
	НоваяЗапись.ФизическоеЛицо       = ФизическоеЛицо;
	НоваяЗапись.Фамилия              = ОбъектXDTO.Фамилия;
	НоваяЗапись.Имя                  = ОбъектXDTO.Имя;
	НоваяЗапись.Отчество             = ОбъектXDTO.Отчество;
	НоваяЗапись.Инициалы             = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ИнициалыПоИмениОтчеству(
		ОбъектXDTO.Имя, ОбъектXDTO.Отчество);
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев(ОбъектXDTO, УзелОбмена) Экспорт
	
	Организация = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОрганизацияОтбор, "Организации");
	Период = ОбъектXDTO.ПериодОтбор;
	
	НаборЗаписей = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Период.Установить(Период);
	
	Для каждого Запись из ОбъектXDTO.Записи Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Организация = Организация;
		НоваяЗапись.Период      = Период;
		НоваяЗапись.Ставка      = Запись.Ставка;
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Документы

Процедура ЗагрузитьНачислениеЗарплаты(ОбъектXDTO, УзелОбмена, ПроведениеДокументов) Экспорт
	
	Ссылка = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "НачислениеЗарплаты");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.НачислениеЗарплаты.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Номер = ОбъектXDTO.Номер;
	Объект.Дата  = ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Ложь;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.Организация     = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.МесяцНачисления = ОбъектXDTO.МесяцНачисления;

	// Данные в табличных частях меняем в режиме "дозаписи":
	// сначала пытаемся найти существующую строку и поменять в ней только полученные из мобильного приложения суммы,
	// если такой нет, то создаем новую и заполняем полностью все реквизиты.

	// Дополнительно ведем списки сотрудников и физлиц для обновления сводных ТЧ Сотрудники и ТЧ ФизическиеЛица.
	ЗагруженныеСотрудники     = Новый Массив;
	ЗагруженныеФизическиеЛица = Новый Массив;

	// Начисления

	// Определим виды основных (повременных) начислений.
	ВидыНачисленияПовременно = УчетЗарплаты.НачисленияПоКатегории(
		Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	
	ОсновноеПодразделение = Справочники.ПодразделенияОрганизаций.ОсновноеПодразделениеОрганизации(Объект.Организация, Истина);
		
	Отбор = Новый Структура("Сотрудник");
	Для каждого ЗагружаемаяСтрокаТЧ	Из ОбъектXDTO.Начисления Цикл
		Сотрудник = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Сотрудник, "Сотрудники");
		Отбор.Сотрудник = Сотрудник;
		
		СтрокаТЧ = НайтиДобавитьСтрокуТабличнойЧасти(Объект.Начисления, Отбор);
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Сотрудник) Тогда
			СтрокаТЧ.Сотрудник = Сотрудник;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Подразделение) Тогда
			СтрокаТЧ.Подразделение = ОсновноеПодразделение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Начисление)
			И ВидыНачисленияПовременно.Количество() > 0 Тогда
			СтрокаТЧ.Начисление = ВидыНачисленияПовременно[0];
		КонецЕсли;
		
		СтрокаТЧ.Результат       = ЗагружаемаяСтрокаТЧ.Результат;
		СтрокаТЧ.ОтработаноДней  = ЗагружаемаяСтрокаТЧ.ОтработаноДней;
		СтрокаТЧ.ОтработаноЧасов = ЗагружаемаяСтрокаТЧ.ОтработаноЧасов;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПланируемаяДатаВыплаты) Тогда
			СтрокаТЧ.ПланируемаяДатаВыплаты = КонецМесяца(Объект.МесяцНачисления);
		КонецЕсли;
		
		ЗагруженныеСотрудники.Добавить(Сотрудник);
	КонецЦикла;

	// НДФЛ
	МаксимальныйИдентификаторСтрокиНДФЛ = 0;
	Для каждого СтрокаТЧ Из Объект.НДФЛ Цикл
		МаксимальныйИдентификаторСтрокиНДФЛ = Макс(МаксимальныйИдентификаторСтрокиНДФЛ, СтрокаТЧ.ИдентификаторСтрокиНДФЛ);
	КонецЦикла;
	
	Отбор = Новый Структура("ФизическоеЛицо");
	Для каждого ЗагружаемаяСтрокаТЧ	Из ОбъектXDTO.НДФЛ Цикл
		ФизическоеЛицо = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.ФизическоеЛицо, "ФизическиеЛица");
		Отбор.ФизическоеЛицо = ФизическоеЛицо;
		
		СтрокаТЧ = НайтиДобавитьСтрокуТабличнойЧасти(Объект.НДФЛ, Отбор);
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ФизическоеЛицо) Тогда
			СтрокаТЧ.ФизическоеЛицо = ФизическоеЛицо;
			ЭтоНоваяСтрока = Истина;
		Иначе
			ЭтоНоваяСтрока = Ложь;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.МесяцНалоговогоПериода) Тогда
			СтрокаТЧ.МесяцНалоговогоПериода = КонецМесяца(Объект.МесяцНачисления);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Подразделение) Тогда
			СтрокаТЧ.Подразделение = ОсновноеПодразделение;
		КонецЕсли;
		
		СтрокаТЧ.Налог = ЗагружаемаяСтрокаТЧ.Налог;
		
		УчетНДФЛКлиентСервер.НазначитьИдентификаторСтрокеНДФЛ(СтрокаТЧ, МаксимальныйИдентификаторСтрокиНДФЛ, ЭтоНоваяСтрока);
		
		ЗагруженныеФизическиеЛица.Добавить(ФизическоеЛицо);
	Конеццикла;
	
	// Взносы
	Для каждого ЗагружаемаяСтрокаТЧ	Из ОбъектXDTO.Взносы Цикл
		ФизическоеЛицо = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.ФизическоеЛицо, "ФизическиеЛица");
		Отбор.ФизическоеЛицо = ФизическоеЛицо;
		
		СтрокаТЧ = НайтиДобавитьСтрокуТабличнойЧасти(Объект.Взносы, Отбор);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ФизическоеЛицо) Тогда
			СтрокаТЧ.ФизическоеЛицо = ФизическоеЛицо;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаПолученияДохода) Тогда
			СтрокаТЧ.ДатаПолученияДохода = КонецМесяца(Объект.МесяцНачисления);
		КонецЕсли;
		
		СтрокаТЧ.ФФОМС = ЗагружаемаяСтрокаТЧ.ФФОМС;
		СтрокаТЧ.ФСС   = ЗагружаемаяСтрокаТЧ.ФСС;
		СтрокаТЧ.ФССНесчастныеСлучаи     = ЗагружаемаяСтрокаТЧ.ФССНесчастныеСлучаи;
		СтрокаТЧ.ПФРДоПредельнойВеличины = ЗагружаемаяСтрокаТЧ.ПФРДоПредельнойВеличины;
		СтрокаТЧ.ПФРСПревышения          = ЗагружаемаяСтрокаТЧ.ПФРСПревышения;
		
		СтрокаТЧ.ФФОМСЕНВД                   = ЗагружаемаяСтрокаТЧ.ФФОМСЕНВД;
		СтрокаТЧ.ФССЕНВД                     = ЗагружаемаяСтрокаТЧ.ФССЕНВД;
		СтрокаТЧ.ПФРДоПредельнойВеличиныЕНВД = ЗагружаемаяСтрокаТЧ.ПФРДоПредельнойВеличиныЕНВД;
		СтрокаТЧ.ПФРСПревышенияЕНВД          = ЗагружаемаяСтрокаТЧ.ПФРСПревышенияЕНВД;

		ЗагруженныеФизическиеЛица.Добавить(ФизическоеЛицо);
	КонецЦикла;

	// Подсчет итоговых сумм по документу.
	Объект.ЗаполнитьНачисленоУдержано();
	
	// Обновление сводных табличных частей.
	ТЗСотрудники = Объект.Сотрудники.Выгрузить();
	Для каждого Сотрудник Из ЗагруженныеСотрудники Цикл
		НоваяСтрока = ТЗСотрудники.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
	КонецЦикла;
	ТЗСотрудники.Свернуть("Сотрудник");
	Объект.Сотрудники.Загрузить(ТЗСотрудники);
	
	ТЗФизическиеЛица = Объект.ФизическиеЛица.Выгрузить();
	Для каждого ФизЛицо Из ЗагруженныеФизическиеЛица Цикл
		НоваяСтрока = ТЗФизическиеЛица.Добавить();
		НоваяСтрока.ФизическоеЛицо = ФизЛицо;
	КонецЦикла;
	ТЗФизическиеЛица.Свернуть("ФизическоеЛицо");
	Объект.ФизическиеЛица.Загрузить(ТЗФизическиеЛица);
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьВедомостьНаВыплатуЗарплатыВБанк(ОбъектXDTO, УзелОбмена, ПроведениеДокументов) Экспорт
	
	Ссылка = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ВедомостьНаВыплатуЗарплатыВБанк");
	Объект = Ссылка.ПолучитьОбъект();
	
	ЭтоНовый =(Объект = Неопределено);
	Если ЭтоНовый Тогда
		Объект = Документы.ВедомостьНаВыплатуЗарплатыВБанк.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Номер = ОбъектXDTO.Номер;
	Объект.Дата  = ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока                   = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка            = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата              = ОбъектXDTO.Дата;
		НоваяСтрока.ПорядокСортировки = -1; // Ведомости на выплату необходимо проводить раньше, чем списание с расчетного счета.
		НоваяСтрока.Провести          = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление          = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета    = Ложь;
		НоваяСтрока.ЗаполнитьНДФЛ     = Истина;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.Организация       = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.ПериодРегистрации = ОбъектXDTO.ПериодРегистрации;
	Объект.ВидМестаВыплаты   = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет;
	// Все, что является не авансом, считаем выплатой зарплаты.
	Если ОбъектXDTO.ВыплатаАванса Тогда
		Объект.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.Аванс(); 
	Иначе
		Объект.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию();
	КонецЕсли;
	
	Объект.ВводНачальныхДанных = ОбъектXDTO.ВводНачальныхДанных;
	
	Объект.Округление = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
	
	ЗаполнитьВидДоходаПоУмолчанию = ВедомостьНаВыплатуЗарплатыКлиентСервер.ВидДоходаИсполнительногоПроизводстваОбязателен(Объект);
	Если ЗаполнитьВидДоходаПоУмолчанию Тогда
		Объект.ВидДоходаИсполнительногоПроизводства = Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения;
	КонецЕсли;
	
	ОсновноеПодразделение = Справочники.ПодразделенияОрганизаций.ОсновноеПодразделениеОрганизации(Объект.Организация, Истина);
	
	// Перезаполняем табличную часть полностью.
	ИтогоКВыплате = 0;
	Объект.Зарплата.Очистить();
		
	Для каждого ЗагружаемаяСтрокаТЧ	Из ОбъектXDTO.Зарплата Цикл
		
		НоваяСтрока = Объект.Зарплата.Добавить();

		НоваяСтрока.Сотрудник            = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(
			ЗагружаемаяСтрокаТЧ.Сотрудник, "Сотрудники");

		НоваяСтрока.ФизическоеЛицо       = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(
			ЗагружаемаяСтрокаТЧ.ФизическоеЛицо, "ФизическиеЛица");

		НоваяСтрока.Подразделение        = ОсновноеПодразделение;
		НоваяСтрока.ПериодВзаиморасчетов = ЗагружаемаяСтрокаТЧ.ПериодВзаиморасчетов;

		НоваяСтрока.ДокументОснование    = МобильнаяБухгалтерия.ДесериализоватьСсылку(
			ЗагружаемаяСтрокаТЧ.ДокументОснование, Документы.НачислениеЗарплаты);
		
		НоваяСтрока.КВыплате             = ЗагружаемаяСтрокаТЧ.КВыплате;
		
		Если ЗаполнитьВидДоходаПоУмолчанию Тогда
			НоваяСтрока.ВидДоходаИсполнительногоПроизводства = Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения;
		КонецЕсли;
		
		ИтогоКВыплате = ИтогоКВыплате + ЗагружаемаяСтрокаТЧ.КВыплате;
	КонецЦикла;

	ЗаполнитьИдентификаторыСтрокВедомостиНаВыплату(Объект);

	Объект.СуммаПоДокументу = ИтогоКВыплате;
	
	// Обновление сводных табличных частей.
	ТЗЗарплата = Объект.Зарплата.Выгрузить(, "ИдентификаторСтроки, ФизическоеЛицо, НомерЛицевогоСчета");

	ТЗЗарплата.Свернуть("ИдентификаторСтроки, ФизическоеЛицо, НомерЛицевогоСчета");
	Объект.Состав.Загрузить(ТЗЗарплата);
	
	ТЗЗарплата.Свернуть("ФизическоеЛицо");
	Объект.ФизическиеЛица.Загрузить(ТЗЗарплата);
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьВедомостьНаВыплатуЗарплатыВКассу(ОбъектXDTO, УзелОбмена, ПроведениеДокументов) Экспорт
	
	Ссылка = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ВедомостьНаВыплатуЗарплатыВКассу");
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый =(Объект = Неопределено);
	
	Если ЭтоНовый Тогда
		Объект = Документы.ВедомостьНаВыплатуЗарплатыВКассу.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Номер = ОбъектXDTO.Номер;
	Объект.Дата  = ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока                   = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка            = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата              = ОбъектXDTO.Дата;
		НоваяСтрока.ПорядокСортировки = -1; // Ведомости на выплату через кассу должны проводиться раньше, чем расходный кассовый ордер.
		НоваяСтрока.Провести          = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление          = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета    = Ложь;
		НоваяСтрока.ЗаполнитьНДФЛ     = Истина;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.Организация       = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.ПериодРегистрации = ОбъектXDTO.ПериодРегистрации;
	// Все, что является не авансом, считаем выплатой зарплаты.
	Если ОбъектXDTO.ВыплатаАванса Тогда
		Объект.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.Аванс(); 
	Иначе
		Объект.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию();
	КонецЕсли;
	
	Объект.ВводНачальныхДанных = ОбъектXDTO.ВводНачальныхДанных;
	
	Объект.Округление = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();

	ОсновноеПодразделение = Справочники.ПодразделенияОрганизаций.ОсновноеПодразделениеОрганизации(Объект.Организация, Истина);
	
	// Перезаполняем табличную часть полностью.
	ИтогоКВыплате = 0;
	Объект.Зарплата.Очистить();
	
	ЗаполнитьВидДоходаПоУмолчанию = ВедомостьНаВыплатуЗарплатыКлиентСервер.ВидДоходаИсполнительногоПроизводстваОбязателен(Объект);
	
	Для каждого ЗагружаемаяСтрокаТЧ	Из ОбъектXDTO.Зарплата Цикл
		
		НоваяСтрока = Объект.Зарплата.Добавить();

		НоваяСтрока.Сотрудник            = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(
			ЗагружаемаяСтрокаТЧ.Сотрудник, "Сотрудники");

		НоваяСтрока.ФизическоеЛицо       = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(
			ЗагружаемаяСтрокаТЧ.ФизическоеЛицо, "ФизическиеЛица");

		НоваяСтрока.Подразделение        = ОсновноеПодразделение;
		НоваяСтрока.ПериодВзаиморасчетов = ЗагружаемаяСтрокаТЧ.ПериодВзаиморасчетов;

		НоваяСтрока.ДокументОснование    = МобильнаяБухгалтерия.ДесериализоватьСсылку(
			ЗагружаемаяСтрокаТЧ.ДокументОснование, Документы.НачислениеЗарплаты);
		
		НоваяСтрока.КВыплате             = ЗагружаемаяСтрокаТЧ.КВыплате;
		
		Если ЗаполнитьВидДоходаПоУмолчанию Тогда
			НоваяСтрока.ВидДоходаИсполнительногоПроизводства = Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения;
		КонецЕсли;
		
		ИтогоКВыплате = ИтогоКВыплате + ЗагружаемаяСтрокаТЧ.КВыплате;
	КонецЦикла;

	ЗаполнитьИдентификаторыСтрокВедомостиНаВыплату(Объект);

	Объект.СуммаПоДокументу = ИтогоКВыплате;
	
	// Обновление сводных табличных частей.
	ТЗЗарплата = Объект.Зарплата.Выгрузить(, "ИдентификаторСтроки, ФизическоеЛицо");

	ТЗЗарплата.Свернуть("ИдентификаторСтроки, ФизическоеЛицо");
	Объект.Состав.Загрузить(ТЗЗарплата);
	
	ТЗЗарплата.Свернуть("ФизическоеЛицо");
	Объект.ФизическиеЛица.Загрузить(ТЗЗарплата);
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьЗаявлениеНаСтандартныйВычет(ДанныеДокумента)
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ЗаявлениеИдентификатор) Тогда
		Ссылка = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаДокумент(ДанныеДокумента.ЗаявлениеИдентификатор, "ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ");
		Объект = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЭтоНовыйДокумент = Объект = Неопределено;
	Если ЭтоНовыйДокумент Тогда
		Объект = Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.СоздатьДокумент();
		
		Объект.Дата        = ТекущаяДата();
		Объект.Организация = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ДанныеДокумента.Организация, "Организации");
		
		Объект.УстановитьНовыйНомер();
		Объект.Сотрудник   = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ДанныеДокумента.Сотрудник, "ФизическиеЛица");
	КонецЕсли;
	
	Объект.Месяц = ДанныеДокумента.Месяц;
	
	Объект.ВычетыНаДетей.Очистить();
	Для каждого СтрокаВычета Из ДанныеДокумента.ВычетыНаДетей Цикл
		
		КодВычета = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(СтрокаВычета.КодВычетаИдентификатор, "ВидыВычетовНДФЛ");
		
		НоваяСтрока = Объект.ВычетыНаДетей.Добавить();
		НоваяСтрока.КодВычета                          = КодВычета;
		НоваяСтрока.ДействуетДо                        = СтрокаВычета.ДействуетДо;
		НоваяСтрока.ДокументПодтверждающийПравоНаВычет = СтрокаВычета.ДокументПодтверждающийПравоНаВычет;
		
	КонецЦикла;
	Объект.ИзменитьВычетыНаДетей = ДанныеДокумента.ВычетыНаДетей.Количество() > 0;
	
	ОшибкиПроведения = ПроверитьВозможностьПроведенияЗаявлениеНаСтандартныйВычет(Объект);
	Если Не ПустаяСтрока(ОшибкиПроведения) Тогда
		ВызватьИсключение ОшибкиПроведения;
	КонецЕсли;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Попытка
		Если НЕ Объект.ИзменитьВычетыНаДетей И НЕ Объект.ИзменитьЛичныйВычет Тогда
			Объект.ПометкаУдаления = Истина;
			Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			//Через сервис пишем непосредственно
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕСли;
	Исключение
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки
	
КонецПроцедуры

Функция ПроверитьВозможностьПроведенияЗаявлениеНаСтандартныйВычет(Объект)
	
	ИнформацияОВозможностиПроведения = "";
	
	МассивВычетов = Новый Массив;
	Для Каждого СтрокаВычет Из Объект.ВычетыНаДетей Цикл
		МассивВычетов.Добавить(СтрокаВычет.КодВычета);
	КонецЦикла;
	
	Запрос = УчетНДФЛДокументы.КонфликтующиеРегистраторыВычетов(
		Объект.Ссылка, Объект.Месяц, Объект.Сотрудник, МассивВычетов);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ИнформацияОВозможностиПроведения = Новый ФорматированнаяСтрока(
			НСтр("ru='Документ не может быть проведен. На'") + " ",
			НРег(Формат(Объект.Месяц, "ДФ='ММММ гггг'")) + " ");
			
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ") Тогда
			
			ИнформацияОВозможностиПроведения = Новый ФорматированнаяСтрока(
				ИнформацияОВозможностиПроведения,
				" " + НСтр("ru='уже введено заявление на вычеты'"),
				" (",
				Новый ФорматированнаяСтрока(Выборка.ПредставлениеРегистратора, , , , ПолучитьНавигационнуюСсылку(Выборка.Регистратор)),
				")");
			
		ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПрекращениеСтандартныхВычетовНДФЛ") Тогда
			
			ИнформацияОВозможностиПроведения = Новый ФорматированнаяСтрока(
				ИнформацияОВозможностиПроведения,
				" " + НСтр("ru='уже введено заявление о прекращении вычетов'"));
			
			ОрганизацияРегистратора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Регистратор, "Организация");
			Если Объект.Организация = ОрганизацияРегистратора Тогда
				
				ИнформацияОВозможностиПроведения = Новый ФорматированнаяСтрока(
					ИнформацияОВозможностиПроведения,
					" (",
					Новый ФорматированнаяСтрока(Выборка.ПредставлениеРегистратора, , , , ПолучитьНавигационнуюСсылку(Выборка.Регистратор)),
					")");
				
			Иначе
				
				ИнформацияОВозможностиПроведения = Новый ФорматированнаяСтрока(
					ИнформацияОВозможностиПроведения,
					" " + НСтр("ru='в другой организации. Если необходимо перенести применение вычетов в'") + " ",
					Строка(Объект.Организация) + ", ",
					Новый ФорматированнаяСтрока("отмените заявление", , , , "ОтменаЗаявления"),
					" " + НСтр("ru='о прекращении вычетов и проведите это заявление'") + ".");
				
			КонецЕсли;
			
		Иначе
			
			ОрганизацияРегистратора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Регистратор, "Организация");
			Если Объект.Организация = ОрганизацияРегистратора Тогда
				
				ИнформацияОВозможностиПроведения = Новый ФорматированнаяСтрока(
					ИнформацияОВозможностиПроведения,
					" " + НСтр("ru='введен приказ об увольнении с прекращением вычетов'"),
					" (",
					Новый ФорматированнаяСтрока(Выборка.ПредставлениеРегистратора, , , , ПолучитьНавигационнуюСсылку(Выборка.Регистратор)),
					")");
				
			Иначе
				
				ИнформацияОВозможностиПроведения = Новый ФорматированнаяСтрока(
					ИнформацияОВозможностиПроведения,
					" " + НСтр("ru='введен приказ об увольнении с прекращением вычетов в другой организации. Если необходимо перенести применение вычетов в'"),
					" " + Строка(Объект.Организация) + " ",
					Новый ФорматированнаяСтрока(НСтр("ru='отмените прекращение вычетов'"), , , , "ОтменаЗаявления"),
					" " + НСтр("ru='и проведите это заявление'") + ".");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИнформацияОВозможностиПроведения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВыгрузитьДанные

#Область Справочники

Функция ВыгрузитьДолжности(Данные) Экспорт
	
	ПередаваемыйОбъект = МобильнаяБухгалтерия.СоздатьОбъектXDTO("Должности");
	ПередаваемыйОбъект.Ссылка          = МобильнаяБухгалтерия.СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование    = Данные.Наименование;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьФизическиеЛица(Данные, СтруктураПараметров) Экспорт
	
	Если Данные.ЭтоГруппа Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = МобильнаяБухгалтерия.СоздатьОбъектXDTO("ФизическиеЛица");
	ПередаваемыйОбъект.Ссылка             = МобильнаяБухгалтерия.СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование       = Данные.Наименование;
	ПередаваемыйОбъект.Код                = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления    = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Фамилия            = Данные.Фамилия;
	ПередаваемыйОбъект.Имя                = Данные.Имя;
	ПередаваемыйОбъект.Отчество           = Данные.Отчество;
	
	ПередаваемыйОбъект.ДатаРождения       = Данные.ДатаРождения;
	ПередаваемыйОбъект.СтраховойНомерПФР  = Данные.СтраховойНомерПФР;
	ПередаваемыйОбъект.ИНН                = Данные.ИНН;
	
	Если СтруктураПараметров.ВерсияСхемы >= 14 Тогда
		ПередаваемыйОбъект.ФаксимилеПодписи  = МобильнаяБухгалтерия.СериализоватьСсылку(Данные.ФаксимилеПодписи);
	КонецЕсли;
	
	Если Данные.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		ПередаваемыйОбъект.Пол = "Мужской";
	ИначеЕсли Данные.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		ПередаваемыйОбъект.Пол = "Женский";
	КонецЕсли;
	
	// Банковский счет выгружаем как основной для физлица, если место выплаты зарплаты - на счет.
	МестоВыплатыЗарплаты = МестоВыплатыЗарплатыФизЛица(Данные.Ссылка, СтруктураПараметров.Организация);
	Если МестоВыплатыЗарплаты = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
		ПередаваемыйОбъект.ОсновнойБанковскийСчет = МобильнаяБухгалтерия.СериализоватьСсылку(Данные.ОсновнойБанковскийСчет);
	КонецЕсли;
	
	СоответствиеКИ = Новый Соответствие;
	СоответствиеКИ.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "ЮридическийАдрес");
	СоответствиеКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "Телефон");
	СоответствиеКИ.Вставить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, "АдресЭлектроннойПочты");
	Для каждого СтрокаКИ Из Данные.КонтактнаяИнформация Цикл
		ВидКИ = СоответствиеКИ.Получить(СтрокаКИ.Вид);
		Если ВидКИ <> Неопределено Тогда
			
			ДобавляемаяСтрока = МобильнаяБухгалтерия.СоздатьОбъектXDTO("КонтактнаяИнформация.Строка");
			
			ДобавляемаяСтрока.ВидКИ = ВидКИ;
			
			Если СтруктураПараметров.ВерсияСхемы >= 3 Тогда
				ДобавляемаяСтрока.Значение = СтрокаКИ.Значение;
			КонецЕсли;
			
			ДобавляемаяСтрока.ЗначенияПолей = 
				УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
			
			ПередаваемыйОбъект.КонтактнаяИнформация.Добавить(ДобавляемаяСтрока);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСотрудники(Данные, СтруктураПараметров) Экспорт
	
	Если Данные.ЭтоГруппа ИЛИ Данные.ГоловнаяОрганизация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = МобильнаяБухгалтерия.СоздатьОбъектXDTO("Сотрудники");
	ПередаваемыйОбъект.Ссылка             = МобильнаяБухгалтерия.СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование       = Данные.Наименование;
	ПередаваемыйОбъект.Код                = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления    = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.ФизическоеЛицо      = МобильнаяБухгалтерия.СериализоватьСсылку(Данные.ФизическоеЛицо);
	ПередаваемыйОбъект.ГоловнаяОрганизация = МобильнаяБухгалтерия.СериализоватьСсылку(Данные.ГоловнаяОрганизация);
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

#КонецОбласти

#Область РегистрыСведений

Функция ВыгрузитьДокументыФизическихЛиц(Данные) Экспорт
	
	Если Данные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗаписи = Данные[0];

	Если ДанныеЗаписи.ВидДокумента <> Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемаяЗапись = МобильнаяБухгалтерия.СоздатьОбъектXDTO("ДокументыФизическихЛиц");
	ПередаваемаяЗапись.Период           = ДанныеЗаписи.Период;
	ПередаваемаяЗапись.ФизЛицо          = МобильнаяБухгалтерия.СериализоватьСсылку(ДанныеЗаписи.ФизЛицо);
	ПередаваемаяЗапись.Серия            = ДанныеЗаписи.Серия;
	ПередаваемаяЗапись.Номер            = ДанныеЗаписи.Номер;
	ПередаваемаяЗапись.СрокДействия     = ДанныеЗаписи.СрокДействия;
	ПередаваемаяЗапись.КемВыдан         = ДанныеЗаписи.КемВыдан;
	ПередаваемаяЗапись.КодПодразделения = ДанныеЗаписи.КодПодразделения;
	ПередаваемаяЗапись.ДатаВыдачи       = ДанныеЗаписи.ДатаВыдачи;
	ПередаваемаяЗапись.Представление    = ДанныеЗаписи.Представление;
	
	Возврат ПередаваемаяЗапись;
	
КонецФункции

Функция ВыгрузитьТекущиеКадровыеДанныеСотрудников(Данные, СтруктураПараметров) Экспорт
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДанныеЗаписи = Данные[0];
	
	Если ДанныеЗаписи.ГоловнаяОрганизация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = МобильнаяБухгалтерия.СоздатьОбъектXDTO("ТекущиеКадровыеДанныеСотрудников");
	ПередаваемыйОбъект.ФизическоеЛицо      = МобильнаяБухгалтерия.СериализоватьСсылку(ДанныеЗаписи.ФизическоеЛицо);
	ПередаваемыйОбъект.Сотрудник           = МобильнаяБухгалтерия.СериализоватьСсылку(ДанныеЗаписи.Сотрудник);
	ПередаваемыйОбъект.ГоловнаяОрганизация = МобильнаяБухгалтерия.СериализоватьСсылку(ДанныеЗаписи.ГоловнаяОрганизация);
	
	ПередаваемыйОбъект.ТекущаяДолжность    = МобильнаяБухгалтерия.СериализоватьСсылку(ДанныеЗаписи.ТекущаяДолжность);
	ПередаваемыйОбъект.ДатаПриема   	   = ДанныеЗаписи.ДатаПриема;
	ПередаваемыйОбъект.ДатаУвольнения 	   = ДанныеЗаписи.ДатаУвольнения;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьТекущаяТарифнаяСтавкаСотрудников(Данные, СтруктураПараметров) Экспорт
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДанныеЗаписи = Данные[0];
	
	Если ДанныеЗаписи.ГоловнаяОрганизация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = МобильнаяБухгалтерия.СоздатьОбъектXDTO("ТекущаяТарифнаяСтавкаСотрудников");
	ПередаваемыйОбъект.ФизическоеЛицо      = МобильнаяБухгалтерия.СериализоватьСсылку(ДанныеЗаписи.ФизическоеЛицо);
	ПередаваемыйОбъект.Сотрудник           = МобильнаяБухгалтерия.СериализоватьСсылку(ДанныеЗаписи.Сотрудник);
	ПередаваемыйОбъект.ГоловнаяОрганизация = МобильнаяБухгалтерия.СериализоватьСсылку(ДанныеЗаписи.ГоловнаяОрганизация);
	
	ПередаваемыйОбъект.ТекущаяТарифнаяСтавка = ДанныеЗаписи.ТекущаяТарифнаяСтавка;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев(Данные, СтруктураПараметров) Экспорт
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = МобильнаяБухгалтерия.СоздатьОбъектXDTO("СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев");
	ПередаваемыйОбъект.ПериодОтбор      = Данные.Отбор.Период.Значение;
	ПередаваемыйОбъект.ОрганизацияОтбор = МобильнаяБухгалтерия.СериализоватьСсылку(Данные.Отбор.Организация.Значение);
		
	Для каждого ДанныеЗаписи Из Данные Цикл
		ПередаваемаяЗапись = МобильнаяБухгалтерия.СоздатьОбъектXDTO("СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.Запись");
		ПередаваемаяЗапись.Организация                    = МобильнаяБухгалтерия.СериализоватьСсылку(ДанныеЗаписи.Организация);
		ПередаваемаяЗапись.Период                         = ДанныеЗаписи.Период;
		ПередаваемаяЗапись.Ставка                         = ДанныеЗаписи.Ставка;
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьФИОФизическихЛиц(Данные) Экспорт
	
	ПередаваемыйОбъект = Неопределено;
	
	Если НЕ Данные.Выбран() Тогда
		Данные.Прочитать();
	КонецЕсли;
	
	Если Данные.Количество() > 0 Тогда
		ДанныеЗаписи = Данные[0];
	
		ПередаваемыйОбъект = МобильнаяБухгалтерия.СоздатьОбъектXDTO("ФИОФизическихЛиц");
		ПередаваемыйОбъект.Период         = ДанныеЗаписи.Период;
		ПередаваемыйОбъект.ФизическоеЛицо = МобильнаяБухгалтерия.СериализоватьСсылку(ДанныеЗаписи.ФизическоеЛицо);
		ПередаваемыйОбъект.Фамилия 		  = ДанныеЗаписи.Фамилия;
		ПередаваемыйОбъект.Имя   		  = ДанныеЗаписи.Имя;
		ПередаваемыйОбъект.Отчество 	  = ДанныеЗаписи.Отчество;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

#КонецОбласти

#Область Документы

Функция ВыгрузитьНачислениеЗарплаты(Данные, СтруктураПараметров) Экспорт
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = МобильнаяБухгалтерия.СоздатьОбъектXDTO("НачислениеЗарплаты");
	ПередаваемыйОбъект.Ссылка          = МобильнаяБухгалтерия.СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация     = МобильнаяБухгалтерия.СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.МесяцНачисления = Данные.МесяцНачисления;
	
	Для Каждого СтрокаТЧ Из Данные.Начисления Цикл
		ПередаваемаяСтрокаТЧ = МобильнаяБухгалтерия.СоздатьОбъектXDTO("НачислениеЗарплаты.Начисления");
		
		ПередаваемаяСтрокаТЧ.Сотрудник       = МобильнаяБухгалтерия.СериализоватьСсылку(СтрокаТЧ.Сотрудник);
		ПередаваемаяСтрокаТЧ.Результат       = СтрокаТЧ.Результат;
		ПередаваемаяСтрокаТЧ.ОтработаноДней  = СтрокаТЧ.ОтработаноДней;
		ПередаваемаяСтрокаТЧ.ОтработаноЧасов = СтрокаТЧ.ОтработаноЧасов;
		
		ПередаваемыйОбъект.Начисления.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;

	Для Каждого СтрокаТЧ Из Данные.НДФЛ Цикл
		ПередаваемаяСтрокаТЧ = МобильнаяБухгалтерия.СоздатьОбъектXDTO("НачислениеЗарплаты.НДФЛ");
		
		ПередаваемаяСтрокаТЧ.ФизическоеЛицо  = МобильнаяБухгалтерия.СериализоватьСсылку(СтрокаТЧ.ФизическоеЛицо);
		ПередаваемаяСтрокаТЧ.Налог           = СтрокаТЧ.Налог;
		
		ПередаваемыйОбъект.НДФЛ.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;

	Для Каждого СтрокаТЧ Из Данные.Взносы Цикл
		ПередаваемаяСтрокаТЧ = МобильнаяБухгалтерия.СоздатьОбъектXDTO("НачислениеЗарплаты.Взносы");
		
		ПередаваемаяСтрокаТЧ.ФизическоеЛицо          = МобильнаяБухгалтерия.СериализоватьСсылку(СтрокаТЧ.ФизическоеЛицо);
		ПередаваемаяСтрокаТЧ.ФФОМС                   = СтрокаТЧ.ФФОМС;
		ПередаваемаяСтрокаТЧ.ФСС                     = СтрокаТЧ.ФСС;
		ПередаваемаяСтрокаТЧ.ФССНесчастныеСлучаи     = СтрокаТЧ.ФССНесчастныеСлучаи;
		ПередаваемаяСтрокаТЧ.ПФРДоПредельнойВеличины = СтрокаТЧ.ПФРДоПредельнойВеличины;
		ПередаваемаяСтрокаТЧ.ПФРСПревышения          = СтрокаТЧ.ПФРСПревышения;
		
		ПередаваемаяСтрокаТЧ.ФФОМСЕНВД                   = СтрокаТЧ.ФФОМСЕНВД;
		ПередаваемаяСтрокаТЧ.ФССЕНВД                     = СтрокаТЧ.ФССЕНВД;
		ПередаваемаяСтрокаТЧ.ПФРДоПредельнойВеличиныЕНВД = СтрокаТЧ.ПФРДоПредельнойВеличиныЕНВД;
		ПередаваемаяСтрокаТЧ.ПФРСПревышенияЕНВД          = СтрокаТЧ.ПФРСПревышенияЕНВД;
		
		ПередаваемыйОбъект.Взносы.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
КонецФункции

Функция ВыгрузитьВедомостьНаВыплатуЗарплатыВБанк(Данные, СтруктураПараметров) Экспорт
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = МобильнаяБухгалтерия.СоздатьОбъектXDTO("ВедомостьНаВыплатуЗарплатыВБанк");
	ПередаваемыйОбъект.Ссылка          = МобильнаяБухгалтерия.СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.ВводНачальныхДанных = Данные.ВводНачальныхДанных;
	
	ПередаваемыйОбъект.Организация       = МобильнаяБухгалтерия.СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.ПериодРегистрации = Данные.ПериодРегистрации;
	
	ПередаваемыйОбъект.ВыплатаАванса = (Данные.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.Аванс());
	
	Для Каждого СтрокаТЧ Из Данные.Зарплата Цикл
		ПередаваемаяСтрокаТЧ = МобильнаяБухгалтерия.СоздатьОбъектXDTO("ВедомостьНаВыплатуЗарплатыВБанк.Зарплата");
		
		ПередаваемаяСтрокаТЧ.Сотрудник            = МобильнаяБухгалтерия.СериализоватьСсылку(СтрокаТЧ.Сотрудник);
		ПередаваемаяСтрокаТЧ.ФизическоеЛицо       = МобильнаяБухгалтерия.СериализоватьСсылку(СтрокаТЧ.ФизическоеЛицо);
		ПередаваемаяСтрокаТЧ.ПериодВзаиморасчетов = СтрокаТЧ.ПериодВзаиморасчетов;
		ПередаваемаяСтрокаТЧ.ДокументОснование    = МобильнаяБухгалтерия.СериализоватьТипИСсылку(СтрокаТЧ.ДокументОснование);
		ПередаваемаяСтрокаТЧ.КВыплате             = СтрокаТЧ.КВыплате;
		
		ПередаваемыйОбъект.Зарплата.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;

	Возврат ПередаваемыйОбъект;
КонецФункции

Функция ВыгрузитьВедомостьНаВыплатуЗарплатыВКассу(Данные, СтруктураПараметров) Экспорт
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = МобильнаяБухгалтерия.СоздатьОбъектXDTO("ВедомостьНаВыплатуЗарплатыВКассу");
	ПередаваемыйОбъект.Ссылка          = МобильнаяБухгалтерия.СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.ВводНачальныхДанных = Данные.ВводНачальныхДанных;
	
	ПередаваемыйОбъект.Организация       = МобильнаяБухгалтерия.СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.ПериодРегистрации = Данные.ПериодРегистрации;
	
	ПередаваемыйОбъект.ВыплатаАванса = (Данные.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.Аванс());
	
	Для Каждого СтрокаТЧ Из Данные.Зарплата Цикл
		ПередаваемаяСтрокаТЧ = МобильнаяБухгалтерия.СоздатьОбъектXDTO("ВедомостьНаВыплатуЗарплатыВКассу.Зарплата");
		
		ПередаваемаяСтрокаТЧ.Сотрудник            = МобильнаяБухгалтерия.СериализоватьСсылку(СтрокаТЧ.Сотрудник);
		ПередаваемаяСтрокаТЧ.ФизическоеЛицо       = МобильнаяБухгалтерия.СериализоватьСсылку(СтрокаТЧ.ФизическоеЛицо);
		ПередаваемаяСтрокаТЧ.ПериодВзаиморасчетов = СтрокаТЧ.ПериодВзаиморасчетов;
		ПередаваемаяСтрокаТЧ.ДокументОснование    = МобильнаяБухгалтерия.СериализоватьТипИСсылку(СтрокаТЧ.ДокументОснование);
		ПередаваемаяСтрокаТЧ.КВыплате             = СтрокаТЧ.КВыплате;
		
		ПередаваемыйОбъект.Зарплата.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;

	Возврат ПередаваемыйОбъект;
КонецФункции

Функция ВыгрузитьБольничныйЛист(Данные, СтруктураПараметров) Экспорт
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = МобильнаяБухгалтерия.СоздатьОбъектXDTO("БольничныйЛист");
	ПередаваемыйОбъект.Ссылка          = МобильнаяБухгалтерия.СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация       = МобильнаяБухгалтерия.СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.ПериодРегистрации = Данные.ПериодРегистрации;
	
	Для Каждого СтрокаТЧ Из Данные.Начисления Цикл
		ПередаваемаяСтрокаТЧ = МобильнаяБухгалтерия.СоздатьОбъектXDTO("НачислениеЗарплаты.Начисления");
		
		ПередаваемаяСтрокаТЧ.Сотрудник       = МобильнаяБухгалтерия.СериализоватьСсылку(СтрокаТЧ.Сотрудник);
		ПередаваемаяСтрокаТЧ.Результат       = СтрокаТЧ.Результат;
		ПередаваемаяСтрокаТЧ.ОтработаноДней  = СтрокаТЧ.ОтработаноДней;
		ПередаваемаяСтрокаТЧ.ОтработаноЧасов = СтрокаТЧ.ОтработаноЧасов;
		
		ПередаваемыйОбъект.Начисления.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;

	Для Каждого СтрокаТЧ Из Данные.НДФЛ Цикл
		ПередаваемаяСтрокаТЧ = МобильнаяБухгалтерия.СоздатьОбъектXDTO("НачислениеЗарплаты.НДФЛ");
		
		ПередаваемаяСтрокаТЧ.ФизическоеЛицо  = МобильнаяБухгалтерия.СериализоватьСсылку(СтрокаТЧ.ФизическоеЛицо);
		ПередаваемаяСтрокаТЧ.Налог           = СтрокаТЧ.Налог;
		
		ПередаваемыйОбъект.НДФЛ.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;

	Возврат ПередаваемыйОбъект;
КонецФункции

Функция ВыгрузитьОтпуск(Данные, СтруктураПараметров) Экспорт
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = МобильнаяБухгалтерия.СоздатьОбъектXDTO("Отпуск");
	ПередаваемыйОбъект.Ссылка          = МобильнаяБухгалтерия.СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация       = МобильнаяБухгалтерия.СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.ПериодРегистрации = Данные.ПериодРегистрации;
	
	Для Каждого СтрокаТЧ Из Данные.Начисления Цикл
		ПередаваемаяСтрокаТЧ = МобильнаяБухгалтерия.СоздатьОбъектXDTO("НачислениеЗарплаты.Начисления");
		
		ПередаваемаяСтрокаТЧ.Сотрудник       = МобильнаяБухгалтерия.СериализоватьСсылку(СтрокаТЧ.Сотрудник);
		ПередаваемаяСтрокаТЧ.Результат       = СтрокаТЧ.Результат;
		ПередаваемаяСтрокаТЧ.ОтработаноДней  = СтрокаТЧ.ОтработаноДней;
		ПередаваемаяСтрокаТЧ.ОтработаноЧасов = СтрокаТЧ.ОтработаноЧасов;
		
		ПередаваемыйОбъект.Начисления.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;

	Для Каждого СтрокаТЧ Из Данные.НДФЛ Цикл
		ПередаваемаяСтрокаТЧ = МобильнаяБухгалтерия.СоздатьОбъектXDTO("НачислениеЗарплаты.НДФЛ");
		
		ПередаваемаяСтрокаТЧ.ФизическоеЛицо  = МобильнаяБухгалтерия.СериализоватьСсылку(СтрокаТЧ.ФизическоеЛицо);
		ПередаваемаяСтрокаТЧ.Налог           = СтрокаТЧ.Налог;
		
		ПередаваемыйОбъект.НДФЛ.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;

	Возврат ПередаваемыйОбъект;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбщиеМетоды

Процедура ПроверитьУстановитьНастройкиЗарплаты(Организация) Экспорт
	
	// Процедура вызывается, если при загрузке из мобильной бухгалтерии фиксируется
	// факт смены признака "ИПИспользуетТрудНаемныхРаботников" в организации.

	// Включим ведение учета зарплаты средствами бухгалтерии.
	Если НЕ УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
		Константы.ВедетсяУчетЗарплатыКадров.Установить(Истина);
		УчетЗарплаты.ВключитьПодсистемуУчетаЗарплатыИКадров(Истина, Ложь);
	КонецЕсли;
	
	// В мобильной бухгалтерии кадровый учет используется в упрощенном режиме.
	// В обычном случае при перезаписи константы срабатывает подписка для перезаполнения регистра ТекущиеКадровыеДанныеСотрудников,
	// но при обмене из мобильной бухгалтерии этого не требуется, т.к. данные регистра поступают из нее, записываем в режиме обмена данными.
	Если УчетЗарплаты.ВедетсяКадровыйУчет() Тогда
		УстановитьПривилегированныйРежим(Истина);
		КонстантаМенеджер = Константы.ИспользоватьКадровыйУчет.СоздатьМенеджерЗначения();
		КонстантаМенеджер.ОбменДанными.Загрузка = Истина;
		КонстантаМенеджер.Значение = Ложь;
		КонстантаМенеджер.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// В мобильной бухгалтерии не поддерживается совместительство.
	Если Константы.ПоддержкаСовместительства.Получить() Тогда
		Константы.ПоддержкаСовместительства.Установить(Ложь);
	КонецЕсли;
	
	ЗаполнитьСтавкуФССНСОрганизации(Организация);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетЗарплаты

// Запускает фоновое задание, внутри которого выполняется процедура с указанным именем.
//
// Параметры:
//	ИмяМетода - Строка - Строка вида "ИмяМодуля.ИмяПроцедуры".
//	НаименованиеЗадания - Строка - Описание фонового задания.
//	ХранилищеПараметров - ХранилищеЗначения - Хранилище параметров расчета, полученных из мобильного приложения.
//	СообщениеОбОшибке - Строка - Возвращает сообщение об ошибке, если она произошла, либо пустую строку.
//
// Возвращаемое значение:
//	Строка - Строка с уникальным идентификатором запущенного фонового задания.
//
Функция ВыполнитьВФоне(ИмяМетода, НаименованиеЗадания, ХранилищеПараметров, СообщениеОбОшибке)

	СообщениеОбОшибке = "";
	ИдентификаторФоновогоЗадания = "";

	ПараметрыРасчета = ХранилищеПараметров.Получить();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.АдресРезультата   = "";  // Результат не требуется помещать во временное хранилище.
	
	РезультатДлительнойОперации = ДлительныеОперации.ВыполнитьВФоне(
		ИмяМетода,
		ПараметрыРасчета,
		ПараметрыВыполнения);
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		СообщениеОбОшибке = РезультатДлительнойОперации.ПодробноеПредставлениеОшибки;
	Иначе
		ИдентификаторФоновогоЗадания = Строка(РезультатДлительнойОперации.ИдентификаторЗадания);
	КонецЕсли;

	Возврат ИдентификаторФоновогоЗадания;

КонецФункции

// Запускает фоновое задание, внутри которого выполняется перезаполнение документов НачислениеЗарплаты
// по параметрам из мобильного приложения.
//
// Параметры:
//	ХранилищеПараметров - ХранилищеЗначения - Параметры из мобильного приложения, см. РассчитатьЗарплату().
//	СообщениеОбОшибке - Строка - Записывается сообщение об ошибке, если она возникла в процессе выполнения.
//
// Возвращаемое значение:
//	Строка - Идентификатор запущенного фонового задания в строковом виде.
//
Функция РассчитатьЗарплатуВФоне(ХранилищеПараметров, СообщениеОбОшибке) Экспорт

	ИмяМетода = "МобильнаяБухгалтерияЗарплата.РассчитатьЗарплату";
	НаименованиеЗадания = НСтр("ru = 'Расчет зарплаты в мобильной бухгалтерии'");
	
	Возврат ВыполнитьВФоне(ИмяМетода, НаименованиеЗадания, ХранилищеПараметров, СообщениеОбОшибке);

КонецФункции

// Заполняет документ "Начисление зарплаты" по переданным из мобильного приложения параметрам.
// Возвращает сообщение обмена с данными только одного документа "Начисление зарплаты",
// который был создан/изменен в ходе расчета.
//
Процедура РассчитатьЗарплату(Параметры, АдресХранилища) Экспорт

	Организация          = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(Параметры.Организация, "Организации");
	ПериодВзаиморасчетов = НачалоМесяца(Параметры.ПериодВзаиморасчетов);

	ДокументНачисления = ЗаполнитьИПровестиНачислениеЗарплаты(ПериодВзаиморасчетов, Организация);
	
	// Запустим перерасчет зарплаты за будущие месяцы по сотрудникам, по которым сейчас создали начисление,
	// чтобы в них учесть изменение базы обложения текущего месяца.
	СледующийМесяц = ДобавитьМесяц(ПериодВзаиморасчетов, 1);
	Если СледующийМесяц > НачалоМесяца(ТекущаяДатаСеанса()) Тогда
		// Следующий месяц еще не наступил, перерасчет не требуется.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументНачисления", ДокументНачисления);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧНачисления.Сотрудник
	|ИЗ
	|	Документ.НачислениеЗарплаты.Начисления КАК ТЧНачисления
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументНачисления";
	
	Сотрудники = Запрос.Выполнить().Выгрузить();
	Сотрудники.Колонки.Добавить("ДатаНачала",               ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Сотрудники.Колонки.Добавить("ПроверятьВыплатуЗарплаты", Новый ОписаниеТипов("Булево"));
	
	Сотрудники.ЗаполнитьЗначения(СледующийМесяц, "ДатаНачала");
	Сотрудники.ЗаполнитьЗначения(Истина,         "ПроверятьВыплатуЗарплаты");
	
	ВыполнитьПерерасчетЗарплатыПоСотрудникам(Организация, Сотрудники);
	
КонецПроцедуры

// Находит/создает документ начисления запрлаты за месяц, 
// перезаполняет и проводит его.
//
// Параметры:
//	МесяцНачисления - Дата - Первое число месяца.
//	Организация - СправочникСсылка.Организации - Организация, по которой требуется создать документ.
//	Сотрудники - ТаблицаЗначений или Неопределено - Сотрудники, которых необходимо включить в документ.
//		Если передана, то должна содержать колонки:
//			* Сотрудник - СправочникСсылка.Сотрудники
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение:
//	ДокументСсылка.НачислениеЗарплаты - ссылка на созданный документ.
//	
Функция ЗаполнитьИПровестиНачислениеЗарплаты(МесяцНачисления, Организация, Сотрудники = Неопределено)

	СообщениеОбОшибке = "";	
	
	ДокументСсылка = УчетЗарплаты.ПолучитьДокументНачисленияЗарплаты(МесяцНачисления, Организация, СообщениеОбОшибке);
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		// Прервем фоновое задание по ошибке.
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат ДокументСсылка;
	КонецЕсли;

	// Проводим документ с результатами нового расчета.
	Объект = ДокументСсылка.ПолучитьОбъект();
	Если Объект.ПометкаУдаления Тогда
		Объект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если Сотрудники <> Неопределено Тогда
		// Удалим из документа строки по сотрудникам, которых нет в переданной таблице.
		Если Сотрудники.Индексы.Количество() = 0 Тогда
			Сотрудники.Индексы.Добавить("Сотрудник");
			Сотрудники.Индексы.Добавить("ФизическоеЛицо");
		КонецЕсли;
		
		ОтборСотрудник = Новый Структура("Сотрудник");
		ОтборФизическоеЛицо = Новый Структура("ФизическоеЛицо");
		
		УдалитьЛишниеСтроки(Объект.Начисления,     Сотрудники, ОтборСотрудник);
		УдалитьЛишниеСтроки(Объект.Удержания,      Сотрудники, ОтборСотрудник);
		УдалитьЛишниеСтроки(Объект.НДФЛ,           Сотрудники, ОтборФизическоеЛицо);
		УдалитьЛишниеСтроки(Объект.Взносы,         Сотрудники, ОтборФизическоеЛицо);
		УдалитьЛишниеСтроки(Объект.ФизическиеЛица, Сотрудники, ОтборФизическоеЛицо);
		УдалитьЛишниеСтроки(Объект.Сотрудники,     Сотрудники, ОтборСотрудник);
		УдалитьЛишниеСтроки(Объект.КорректировкиВыплаты, Сотрудники, ОтборФизическоеЛицо);
		
		// Исключим из вычетом те строки, которые были удалены из ТЧ НДФЛ.
		ОтборИдентификаторСтрокиНДФЛ = Новый Структура("ИдентификаторСтрокиНДФЛ");
		УдалитьЛишниеСтроки(
			Объект.ПримененныеВычетыНаДетейИИмущественные,
			Объект.НДФЛ,
			ОтборИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	
	Объект.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокументСсылка;

КонецФункции

// Выполняет расчет зарплаты по одному сотруднику за указанный месяц.
//
// Параметры:
//	ХранилищеПараметров - ХранилищеЗначения - Содержит параметры расчета зарплаты в виде структуры с ключами:
//		* Организация - Строка - Сериализованный GUID организации.
//		* Сотрудник - Строка - Сериализованный GUID сотрудника.
//		* ПериодВзаиморасчетов - Дата - Месяц начисления.
//		* Начислено - Число - Сумма начисления сотруднику за месяц по окладу, введенная в мобильном приложении.
//			Если не указано или 0, то рассчитается по данным базы БП, иначе выполняется только расчет НДФЛ и взносов
//			для указанной суммы начисления.
//	СообщениеОбОшибке - Строка - Содержит текст сообщения об ошибке.
//
// Возвращаемое значение:
//	ХранилищеЗначения - Содержит либо Неопределено, если возникла ошибка в ходе расчета,
//		либо Структуру с ключами (см. переменную РезультатРасчета в РассчитатьЗарплатуПоСотрудникуВТранзакции()).
//
Функция РассчитатьЗарплатуПоСотруднику(ХранилищеПараметров, СообщениеОбОшибке) Экспорт

	СообщениеОбОшибке = "";
	РезультатРасчета = Неопределено;
	
	ПараметрыРасчета = ХранилищеПараметров.Получить();
	
	// Для расчета по одному сотруднику находим документ НачислениеЗарплаты за месяц,
	// временно меняем в нем сумму начислений на значение, полученное из мобильного приложения, 
	// после чего перерассчитываем налоги и взносы по сотруднику.
	// Т.к. этот расчет фактически является "черновиком" (пользователь в мобильном приложении может 
	// отказаться от сохранения его результатов в окончательном варианте),
	// поэтому выполняем его в транзакции, которую откатываем по окончанию расчета.
	НачатьТранзакцию();
	
	Попытка
	
		РезультатРасчета = РассчитатьЗарплатуПоСотрудникуВТранзакции(ПараметрыРасчета);
		
		ОтменитьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
	
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнфоОбОшибке);
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.НачислениеЗарплаты,
			,
			СообщениеОбОшибке);

	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(РезультатРасчета, Новый СжатиеДанных(9));

КонецФункции

Функция РассчитатьЗарплатуПоСотрудникуВТранзакции(ПараметрыРасчета)

	РезультатРасчета = Новый Структура();
	РезультатРасчета.Вставить("Налог",                       0);
	РезультатРасчета.Вставить("ПФРСПревышения",              0);
	РезультатРасчета.Вставить("ПФРДоПредельнойВеличины",     0);
	РезультатРасчета.Вставить("ФФОМС",                       0);
	РезультатРасчета.Вставить("ФСС",                         0);
	РезультатРасчета.Вставить("ПФРСПревышенияЕНВД",          0);
	РезультатРасчета.Вставить("ПФРДоПредельнойВеличиныЕНВД", 0);
	РезультатРасчета.Вставить("ФФОМСЕНВД",                   0);
	РезультатРасчета.Вставить("ФССЕНВД",                     0);
	РезультатРасчета.Вставить("ФССНесчастныеСлучаи",         0);

	Сотрудник            = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ПараметрыРасчета.Сотрудник, "Сотрудники");
	Организация          = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(ПараметрыРасчета.Организация, "Организации");
	ПериодВзаиморасчетов = НачалоМесяца(ПараметрыРасчета.ПериодВзаиморасчетов);

	Начислено = 0;
	Если ПараметрыРасчета.Свойство("Начислено") Тогда
		Начислено = ПараметрыРасчета.Начислено;
	КонецЕсли;

	// Для расчета найдем существующий начисления зарплаты.
	ДокументНачисления = УчетЗарплаты.НайтиДокументНачисленияЗарплаты(ПериодВзаиморасчетов, Организация);
	Если ЗначениеЗаполнено(ДокументНачисления) Тогда
		ДокументОбъект = ДокументНачисления.ПолучитьОбъект();
	Иначе
		// Если документа еще нет, то создаем временный объект в памяти.
		ДокументОбъект = Документы.НачислениеЗарплаты.СоздатьДокумент();
		ДокументОбъект.Дата            = КонецМесяца(ПериодВзаиморасчетов);
		ДокументОбъект.МесяцНачисления = ПериодВзаиморасчетов;
		ДокументОбъект.Организация     = Организация;
	КонецЕсли;

	// Определим виды основных (повременных) начислений.
	ВидыНачисленияПовременно = УчетЗарплаты.НачисленияПоКатегории(
		Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
		
	// Найдем строку сотрудника в документе.
	Отбор = Новый Структура("Сотрудник", Сотрудник);
	СтрокаНачисления = НайтиДобавитьСтрокуТабличнойЧасти(ДокументОбъект.Начисления, Отбор);

	// Обновляем данные в строке ТЧ по переданным из мобильного приложения.
	СтрокаНачисления.Сотрудник = Сотрудник;
	Если НЕ ЗначениеЗаполнено(СтрокаНачисления.Подразделение) Тогда
		СтрокаНачисления.Подразделение   = Справочники.ПодразделенияОрганизаций.ОсновноеПодразделениеОрганизации(Организация, Истина);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаНачисления.Начисление) Тогда
		СтрокаНачисления.Начисление = ?(ВидыНачисленияПовременно.Количество() > 0, ВидыНачисленияПовременно[0], Неопределено);
	КонецЕсли;
	СтрокаНачисления.Результат = Начислено;

	// Удалим других сотрудников из документа, чтобы на них время не тратить при расчете.
	ОбратныйИндекс = ДокументОбъект.Начисления.Количество();
	Пока ОбратныйИндекс > 0 Цикл
		ОбратныйИндекс = ОбратныйИндекс - 1;
		СтрокаТЧ = ДокументОбъект.Начисления[ОбратныйИндекс];
		Если СтрокаТЧ.Сотрудник <> Сотрудник Тогда
			ДокументОбъект.Начисления.Удалить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	// Выполняем собственно сам расчет.
	СотрудникВМассиве = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	ДатаОперации = Мин(ДокументОбъект.Дата, КонецДня(ДокументОбъект.МесяцНачисления));

	// Составляем временные таблицы для расчета НДФЛ и взносов.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РасчетЗарплатыБазовый.СоздатьВТДляРасчетаНДФЛиВзносов(МенеджерВременныхТаблиц, ДокументОбъект, СотрудникВМассиве);

	РезультатРасчетаНДФЛ = РасчетЗарплатыБазовый.РезультатРасчетаНДФЛ(
		МенеджерВременныхТаблиц,
		ДокументОбъект,
		ДатаОперации,
		Истина);
	
	РезультатРасчетаВзносов = РасчетЗарплатыБазовый.РезультатРасчетаВзносов(
		МенеджерВременныхТаблиц,
		ДокументОбъект.Ссылка,
		ДокументОбъект.Организация,
		ДокументОбъект.МесяцНачисления);
	
	// Записываем результаты расчета в возвращаемую структуру.
	РезультатРасчета.Налог = РезультатРасчетаНДФЛ.НДФЛ.Итог("Налог");
	РезультатРасчета.ПФРДоПредельнойВеличины     = РезультатРасчетаВзносов.Итог("ПФРДоПредельнойВеличины");
	РезультатРасчета.ПФРСПревышения              = РезультатРасчетаВзносов.Итог("ПФРСПревышения");
	РезультатРасчета.ФФОМС                       = РезультатРасчетаВзносов.Итог("ФФОМС");
	РезультатРасчета.ФСС                         = РезультатРасчетаВзносов.Итог("ФСС");
	РезультатРасчета.ПФРДоПредельнойВеличиныЕНВД = РезультатРасчетаВзносов.Итог("ПФРДоПредельнойВеличиныЕНВД");
	РезультатРасчета.ПФРСПревышенияЕНВД          = РезультатРасчетаВзносов.Итог("ПФРСПревышенияЕНВД");
	РезультатРасчета.ФФОМСЕНВД                   = РезультатРасчетаВзносов.Итог("ФФОМСЕНВД");
	РезультатРасчета.ФССЕНВД                     = РезультатРасчетаВзносов.Итог("ФССЕНВД");
	РезультатРасчета.ФССНесчастныеСлучаи         = РезультатРасчетаВзносов.Итог("ФССНесчастныеСлучаи");
	
	Возврат РезультатРасчета;

КонецФункции

// Запускает фоновое задание, внутри которого выполняется перерасчет зарплаты по списку сотруников,
// переданных из мобильного приложения.
Функция ПересчитатьЗарплатуПоСотрудникамВФоне(ХранилищеПараметров, СообщениеОбОшибке) Экспорт

	ИмяМетода = "МобильнаяБухгалтерияЗарплата.ПересчитатьЗарплатуПоСотрудникам";
	НаименованиеЗадания = НСтр("ru = 'Перерасчет зарплаты по сотрудникам в мобильной бухгалтерии'");
	
	Возврат ВыполнитьВФоне(ИмяМетода, НаименованиеЗадания, ХранилищеПараметров, СообщениеОбОшибке);

КонецФункции

// Выполняет перезаполнение существующих документов НачислениеЗарплаты
// по списку сотрудников, переданных из мобильного приложения.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//		* Организация - Строка - Сериализованный идентификатор организации.
//		* Сотрудники - ТаблицаЗначений - Содержит колонки:
//			** Сотрудник - Строка - Сериализованная строка с идентификаторам сотрудников.
//			** ДатаНачала - Дата - Первая дата первого месяца, с которого начинать перерасчет.
//				Перезаполняются все документы НачисленияЗарплаты, начиная с указанного месяца 
//				и до последнего проведенного документа.
//			** ПроверятьВыплатуЗарплаты - Булево - Если Истина, то перезаполняются документы НачислениеЗарплаты
//			только за те периоды, в которых не было выплаты зарплаты, если есть выплаты, то изменения не выполняются.
// 	АдресХранилища - Строка - Не используется.
//		
Процедура ПересчитатьЗарплатуПоСотрудникам(Параметры, АдресХранилища) Экспорт

	Организация = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(Параметры.Организация, "Организации");
	
	// Десериализуем ссылки на перерассчитываемых сотрудников.
	Сотрудники = Новый ТаблицаЗначений;
	Сотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Сотрудники.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Сотрудники.Колонки.Добавить("ПроверятьВыплатуЗарплаты", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаТаблицы Из Параметры.Сотрудники Цикл
		НоваяСтрока = Сотрудники.Добавить();
		НоваяСтрока.Сотрудник  = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаСправочник(СтрокаТаблицы.Сотрудник, "Сотрудники");
		НоваяСтрока.ДатаНачала = НачалоМесяца(СтрокаТаблицы.ДатаНачала);
		НоваяСтрока.ПроверятьВыплатуЗарплаты = СтрокаТаблицы.ПроверятьВыплатуЗарплаты;
	КонецЦикла;
	
	ВыполнитьПерерасчетЗарплатыПоСотрудникам(Организация, Сотрудники);

КонецПроцедуры

// Выполняет перезаполнение существующих документов НачислениеЗарплаты
// по списку сотрудников, переданных из мобильного приложения.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация.
//	Сотрудники - ТаблицаЗначений - Содержит колонки:
//		* Сотрудник - СправочникСсылка.Сотрудники - Сотрудник.
//		* ДатаНачала - Дата - Первая дата первого месяца, с которого начинать перерасчет.
//				Перезаполняются все документы НачисленияЗарплаты, начиная с указанного месяца 
//				и до последнего проведенного документа.
//		* ПроверятьВыплатуЗарплаты - Булево - Если Истина, то перезаполняются документы НачислениеЗарплаты
//		только за те периоды, в которых не было выплаты зарплаты, если есть выплаты, то изменения не выполняются.
//		
Процедура ВыполнитьПерерасчетЗарплатыПоСотрудникам(Организация, Сотрудники)

	ПервыйМесяцРасчета = '2999-12-31';
	Для каждого СтрокаТаблицы Из Сотрудники Цикл
		ПервыйМесяцРасчета = Мин(ПервыйМесяцРасчета, СтрокаТаблицы.ДатаНачала);
	КонецЦикла;

	// Выполняем перерасчет документов по месяцам, досоздаем недостающие документы.
	Выборка = ВыбратьПерерассчитываемыеДокументыНачисления(
		Организация,
		Сотрудники,
		ПервыйМесяцРасчета);
		
	Если Выборка = Неопределено Тогда
		// Перерасчет не требуется.
		Возврат;
	КонецЕсли;
	
	ПерерассчитываемыеСотрудники = Новый ТаблицаЗначений;
	ПерерассчитываемыеСотрудники.Колонки.Добавить("Сотрудник",      Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПерерассчитываемыеСотрудники.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	ЕстьДанные = Выборка.Следующий();
	Пока ЕстьДанные Цикл
	
		МесяцНачисления    = Выборка.МесяцНачисления;
		ДокументНачисления = Выборка.ДокументНачисления;

		ПерерассчитываемыеСотрудники.Очистить();

		Пока ЕстьДанные
			И Выборка.МесяцНачисления = МесяцНачисления
			И Выборка.ДокументНачисления = ДокументНачисления Цикл
			
			Если Выборка.МесяцДоступенДляИзменения Тогда
				
				ВключитьВПерерасчет = Истина;
			
				Если НЕ ЗначениеЗаполнено(Выборка.ДокументНачисления) Тогда
					// Новые документы создаем только по тем сотрудникам, которые работали в соответствующем месяце.
					// Существующие документы перерассчитываем для любого сотрудника.
					ВключитьВПерерасчет = Выборка.Работает;
				КонецЕсли;
				
				Если ВключитьВПерерасчет Тогда
					ЗаполнитьЗначенияСвойств(ПерерассчитываемыеСотрудники.Добавить(), Выборка);
				КонецЕсли;
			
			КонецЕсли;
				
			ЕстьДанные = Выборка.Следующий();
			
		КонецЦикла;
		
		Если ПерерассчитываемыеСотрудники.Количество() = 0 Тогда
			// Нет сотрудников для пересчета за текущий месяц, ничего делать не надо.
			Продолжить;
		КонецЕсли;
	
		ПерезаполнитьНачислениеЗарплаты(МесяцНачисления, Организация, ДокументНачисления, ПерерассчитываемыеСотрудники);
		
	КонецЦикла;

КонецПроцедуры

Функция ВыбратьПерерассчитываемыеДокументыНачисления(Организация, Сотрудники, ПервыйМесяцРасчета)

	// Выберем существующие документы НачисленияЗарплаты и определим максимальный месяц, до которого перерассчитывать.
	// При этом из-за изменений в кадровых данных сотрудников может получится так, что может потребуется создать документы,
	// которых сейчас еще нет (например, поменяли дату приема сотрудника на более раннюю).
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сотрудники",  Сотрудники);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ДатаНачала КАК ДатаНачала,
	|	Сотрудники.ПроверятьВыплатуЗарплаты КАК ПроверятьВыплатуЗарплаты
	|ПОМЕСТИТЬ ТаблицаСотрудников
	|ИЗ
	|	&Сотрудники КАК Сотрудники
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудники.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплаты.Ссылка КАК ДокументНачисления,
	|	НачислениеЗарплаты.Ссылка.МесяцНачисления КАК МесяцНачисления,
	|	НачислениеЗарплаты.Сотрудник КАК Сотрудник,
	|	НачислениеЗарплаты.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИСТИНА КАК МесяцДоступенДляИзменения,
	|	ТаблицаСотрудников.ПроверятьВыплатуЗарплаты КАК ПроверятьВыплатуЗарплаты
	|ПОМЕСТИТЬ ВТ_НачислениеЗарплаты
	|ИЗ
	|	ТаблицаСотрудников КАК ТаблицаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплаты
	|		ПО ТаблицаСотрудников.Сотрудник = НачислениеЗарплаты.Сотрудник
	|			И (НачислениеЗарплаты.Ссылка.МесяцНачисления >= ТаблицаСотрудников.ДатаНачала)
	|ГДЕ
	|	НачислениеЗарплаты.Ссылка.Организация = &Организация
	|	И НачислениеЗарплаты.Ссылка.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	МесяцНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(НачислениеЗарплаты.МесяцНачисления) КАК МесяцНачисления
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.Организация = &Организация
	|	И НачислениеЗарплаты.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.МесяцНачисления) Тогда
		ПоследнийМесяцРасчета = Выборка.МесяцНачисления;
	Иначе
		// Никаких документов еще нет, перерассчитываем за первый месяц
		ПоследнийМесяцРасчета = ПервыйМесяцРасчета;
	КонецЕсли;
	
	Если ПоследнийМесяцРасчета < ПервыйМесяцРасчета Тогда
		// Имеющиеся документы относятся к более ранним месяцам, чем первый месяц перерасчета.
		// Поэтому их не перерассчитываем.
		Возврат Неопределено;
	КонецЕсли;

	// Составим таблицу по всем сотрудникам и месяцам, за которые требуется выполнить перерасчет.
	Запрос.УстановитьПараметр("ТаблицаМесяцев", ТаблицаМесяцев(ПервыйМесяцРасчета, ПоследнийМесяцРасчета));

	// Определим, за какие месяцы зарплата уже выплачена, их и более ранние - не будем меняем.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ЗарплатаКВыплате.ПериодВзаиморасчетов) КАК ПериодВзаиморасчетов
	|ПОМЕСТИТЬ ВТ_ПоследнийМесяцВыплатыЗарплаты
	|ИЗ
	|	ТаблицаСотрудников КАК ТаблицаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ПО ТаблицаСотрудников.Сотрудник = ЗарплатаКВыплате.Сотрудник
	|			И (ЗарплатаКВыплате.ПериодВзаиморасчетов >= ТаблицаСотрудников.ДатаНачала)
	|ГДЕ
	|	ТаблицаСотрудников.ПроверятьВыплатуЗарплаты
	|	И ЗарплатаКВыплате.Организация = &Организация
	|	И ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ЗарплатаКВыплате.ДокументОснование ССЫЛКА Документ.НачислениеЗарплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НачислениеЗарплаты.ДокументНачисления КАК ДокументНачисления,
	|	ВТ_НачислениеЗарплаты.МесяцНачисления КАК МесяцНачисления,
	|	ВТ_НачислениеЗарплаты.Сотрудник КАК Сотрудник,
	|	ВТ_НачислениеЗарплаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_НачислениеЗарплаты.ПроверятьВыплатуЗарплаты
	|			ТОГДА ИСТИНА
	|		КОГДА ВТ_НачислениеЗарплаты.МесяцНачисления > ЕСТЬNULL(ВТ_ПоследнийМесяцВыплатыЗарплаты.ПериодВзаиморасчетов, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МесяцДоступенДляИзменения
	|ПОМЕСТИТЬ ВТ_НачислениеЗарплатыСВыплатами
	|ИЗ
	|	ВТ_НачислениеЗарплаты КАК ВТ_НачислениеЗарплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследнийМесяцВыплатыЗарплаты КАК ВТ_ПоследнийМесяцВыплатыЗарплаты
	|		ПО ВТ_НачислениеЗарплаты.Сотрудник = ВТ_ПоследнийМесяцВыплатыЗарплаты.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	МесяцНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМесяцев.МесяцНачисления КАК МесяцНачисления
	|ПОМЕСТИТЬ ВТ_МесяцНачисления
	|ИЗ
	|	&ТаблицаМесяцев КАК ТаблицаМесяцев
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_МесяцНачисления.МесяцНачисления КАК МесяцНачисления,
	|	ВЫБОР
	|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения >= ВТ_МесяцНачисления.МесяцНачисления
	|			ТОГДА ИСТИНА
	|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема <= КОНЕЦПЕРИОДА(ВТ_МесяцНачисления.МесяцНачисления, МЕСЯЦ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Работает
	|ПОМЕСТИТЬ ВТ_ТаблицаСотрудниковПоМесяцам
	|ИЗ
	|	ТаблицаСотрудников КАК ТаблицаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МесяцНачисления КАК ВТ_МесяцНачисления
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО ТаблицаСотрудников.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|			И (ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = &Организация)
	|			И (ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСотрудниковПоМесяцам.МесяцНачисления КАК МесяцНачисления,
	|	ВТ_ТаблицаСотрудниковПоМесяцам.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаСотрудниковПоМесяцам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_ТаблицаСотрудниковПоМесяцам.Работает КАК Работает,
	|	ВТ_НачислениеЗарплатыСВыплатами.ДокументНачисления КАК ДокументНачисления,
	|	ЕСТЬNULL(ВТ_НачислениеЗарплатыСВыплатами.МесяцДоступенДляИзменения, ИСТИНА) КАК МесяцДоступенДляИзменения
	|ИЗ
	|	ВТ_ТаблицаСотрудниковПоМесяцам КАК ВТ_ТаблицаСотрудниковПоМесяцам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НачислениеЗарплатыСВыплатами КАК ВТ_НачислениеЗарплатыСВыплатами
	|		ПО ВТ_ТаблицаСотрудниковПоМесяцам.Сотрудник = ВТ_НачислениеЗарплатыСВыплатами.Сотрудник
	|			И ВТ_ТаблицаСотрудниковПоМесяцам.МесяцНачисления = ВТ_НачислениеЗарплатыСВыплатами.МесяцНачисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	МесяцНачисления,
	|	ДокументНачисления,
	|	Сотрудник";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ТаблицаМесяцев(ДатаНачала, ДатаОкончания)

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("МесяцНачисления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	ТекущаяДата = НачалоМесяца(ДатаНачала);
	Пока ТекущаяДата <= ДатаОкончания Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.МесяцНачисления = НачалоМесяца(ТекущаяДата);
		ТекущаяДата = ДобавитьМесяц(ТекущаяДата, 1);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Перезаполняет в существующем документа НачислениеЗарплаты данные по указанным сотрудникам.
// Строки по другим сотрудникам при этом не меняются.
//
// Параметры:
//	МесяцНачисления - Дата - Месяц расчета.
//	Организация - СправочникСсылка.Организации - Организация.
//	ДокументНачисления - ДокументСсылка.НачислениеЗарплаты - Ссылка на документ, в котором выполняется перезаполнение.
//	Сотрудники - ТаблицаЗначений - Содержит колонки:
//		* Сотрудник - СправочникСсылка.Сотрудники
//		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
Процедура ПерезаполнитьНачислениеЗарплаты(МесяцНачисления, Организация, ДокументНачисления, Сотрудники)

	Если НЕ ЗначениеЗаполнено(ДокументНачисления) Тогда
		// Попробуем найти документ за месяц по организации.
		ДокументНачисления = УчетЗарплаты.НайтиДокументНачисленияЗарплаты(МесяцНачисления, Организация);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументНачисления) Тогда
		// Документа за месяц еще нет ни по одному сотруднику, создаем его.
		ЗаполнитьИПровестиНачислениеЗарплаты(МесяцНачисления, Организация);
		Возврат;
	КонецЕсли;

	Объект = ДокументНачисления.ПолучитьОбъект();
	Если Объект.ПометкаУдаления Тогда
		Объект.ПометкаУдаления = Ложь;
	КонецЕсли;

	// Удалим строки по тем сотрудникам, по которым сейчас будем перезаполнять.
	ОтборСотрудник      = Новый Структура("Сотрудник");
	ОтборФизическоеЛицо = Новый Структура("ФизическоеЛицо");
	
	УдалитьСтроки(Объект.Начисления,     Сотрудники, ОтборСотрудник);
	УдалитьСтроки(Объект.Удержания,      Сотрудники, ОтборСотрудник);
	УдалитьСтроки(Объект.НДФЛ,           Сотрудники, ОтборФизическоеЛицо);
	УдалитьСтроки(Объект.Взносы,         Сотрудники, ОтборФизическоеЛицо);
	УдалитьСтроки(Объект.ФизическиеЛица, Сотрудники, ОтборФизическоеЛицо);
	УдалитьСтроки(Объект.Сотрудники,     Сотрудники, ОтборСотрудник);
	УдалитьСтроки(Объект.КорректировкиВыплаты,  Сотрудники, ОтборФизическоеЛицо);
	
	// Удалим строки вычетов, для которых не осталось связанных строки НДФЛ.
	ОтборИдентификаторСтрокиНДФЛ = Новый Структура("ИдентификаторСтрокиНДФЛ");
	УдалитьЛишниеСтроки(Объект.ПримененныеВычетыНаДетейИИмущественные, Объект.НДФЛ, ОтборИдентификаторСтрокиНДФЛ);
	
	// Отменим проведение документа, чтобы при расчете не учитывал собственные старые движения.
	Если Объект.Проведен Тогда
		Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	СотрудникиКДобавлению = Сотрудники.ВыгрузитьКолонку("Сотрудник");
	
	РезультатНачисления = РасчетЗарплаты.РезультатНачисленияРасчетаЗарплаты(
		Объект.Организация,
		Объект.МесяцНачисления,
		Объект.Ссылка,
		Объект.Подразделение,
		СотрудникиКДобавлению);
		
	Если РезультатНачисления.Количество() > 0 Тогда
		
		РезультатНачисления.Колонки.Добавить("ОтработаноДней");
		РезультатНачисления.Колонки.Добавить("ОтработаноЧасов");
		
		РасчетЗарплатыБазовый.ЗаполнитьОтработанноеВремя(РезультатНачисления, Объект.МесяцНачисления, Организация);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
			МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьРезультатНачисления(Объект, РезультатНачисления);
		КонецЕсли;
	
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатНачисления, Объект.Начисления);
		
		ОбновляемыеСотрудники = Новый ФиксированныйМассив(СотрудникиКДобавлению);
		
		ОбновитьНДФЛиВзносыСотрудников(Объект, СотрудникиКДобавлению);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
			МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьРезультатУдержаний(Объект, РезультатНачисления);
		КонецЕсли;
		
		// Добавим сотрудников и физлиц в служебные табличные части документа.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатНачисления, Объект.Сотрудники);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатНачисления, Объект.ФизическиеЛица);
		
	КонецЕсли;
	
	Объект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбновитьНДФЛиВзносыСотрудников(Объект, Сотрудники)
	
	Если Объект.КорректироватьНДФЛ И Объект.КорректироватьВзносы Тогда
		// Не пересчитываем, т.к. и НДФЛ, и взносы в режиме корректировки.
		Возврат;
	КонецЕсли;
	
	// Составляем временные таблицы для расчета НДФЛ и взносов.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РасчетЗарплатыБазовый.СоздатьВТДляРасчетаНДФЛиВзносов(МенеджерВременныхТаблиц, Объект, Сотрудники);
	
	// Составляем массив физических лиц.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица";
	
	ФизическиеЛицаМассив = Новый Массив;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФизическиеЛицаМассив.Добавить(Выборка.ФизическоеЛицо);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо", ФизическиеЛицаМассив);
	
	// Рассчитываем НДФЛ и взносы
	ДатаОперации = Мин(Объект.Дата, КонецДня(Объект.МесяцНачисления));
	
	НачатьТранзакцию();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Объект.КорректироватьНДФЛ Тогда
		РезультатРасчетаНДФЛ = РасчетЗарплатыБазовый.РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, Объект, ДатаОперации, Истина);
		СдвигИдентификатора = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(Объект.НДФЛ) + 1;
		// Перенумеруем строки новых коллекций.
		УчетНДФЛФормы.НазначитьИдентификаторыНовымСтрокамТаблицамНДФЛИПримененныеВычетыНаДетейИИмущественные(
			СдвигИдентификатора, РезультатРасчетаНДФЛ.НДФЛ, РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные);
		// Выполняем замену прежних строк на новые.
		РасчетЗарплаты.ЗаменитьСтрокиНаНовыеДанные(Объект.НДФЛ, РезультатРасчетаНДФЛ.НДФЛ, "ФизическоеЛицо", , ОтборСтрок);
		// В таблице вычетов, т.к. она не отображается, достаточно просто добавить новые строки в любое место, старые будут
		// удалены перед записью.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные, Объект.ПримененныеВычетыНаДетейИИмущественные);
	КонецЕсли;
	
	Если Не Объект.КорректироватьВзносы Тогда
		РезультатРасчетаВзносов = РасчетЗарплатыБазовый.РезультатРасчетаВзносов(МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);	
		// Выполняем замену прежних строк на новые.
		РасчетЗарплаты.ЗаменитьСтрокиНаНовыеДанные(Объект.Взносы, РезультатРасчетаВзносов, "ФизическоеЛицо", , ОтборСтрок);
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОтменитьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыплатаЗарплаты

Функция МестоВыплатыЗарплатыФизЛица(ФизическоеЛицо, Организация)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Организация",    Организация); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МестаВыплатыЗарплатыСотрудников.Вид
	|ИЗ
	|	РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
	|ГДЕ
	|	МестаВыплатыЗарплатыСотрудников.ФизическоеЛицо = &ФизическоеЛицо
	|	И МестаВыплатыЗарплатыСотрудников.Сотрудник.ГоловнаяОрганизация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Вид;
	КонецЕсли;
	
	Возврат Перечисления.ВидыМестВыплатыЗарплаты.Касса;

КонецФункции

Процедура ОбновитьМестаВыплатыЗарплатыСотрудников(ФизическоеЛицо, Сотрудник = Неопределено)

	// Если у физлица есть основной банковский счет, то считаем, что выплата зарплаты производится на него.
	ОсновнойБанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ОсновнойБанковскийСчет");
	Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
		ВидМестаВыплатыЗарплаты = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет;
	Иначе
		ВидМестаВыплатыЗарплаты = Перечисления.ВидыМестВыплатыЗарплаты.Касса;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	КонецЕсли;
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		Если Запись.Вид <> ВидМестаВыплатыЗарплаты Тогда
			Запись.Вид = ВидМестаВыплатыЗарплаты;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Сотрудник) И НаборЗаписей.Количество() = 0 Тогда
		// Для нового сотрудника назначаем место выплаты.
		Запись = НаборЗаписей.Добавить();
		Запись.ФизическоеЛицо = ФизическоеЛицо;
		Запись.Сотрудник      = Сотрудник;
		Запись.Вид            = ВидМестаВыплатыЗарплаты;
	КонецЕсли;
	
	Если НаборЗаписей.Модифицированность() Тогда
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИдентификаторыСтрокВедомостиНаВыплату(Объект)

	// Всем строкам одного сотрудника необходимо присвоить один и тот же идентификатор,
	// чтобы они свернулись в ТЧ Состав в одну строку.
	ИдентификаторыСтрок = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из Объект.Зарплата Цикл
		
		ИдентификаторСтрокиСотрудника = ИдентификаторыСтрок[СтрокаТаблицы.Сотрудник];
		Если ЗначениеЗаполнено(ИдентификаторСтрокиСотрудника) Тогда
			// Гарантировано приводим идентификаторы всех строк одного сотрудника к одному значению.
			СтрокаТаблицы.ИдентификаторСтроки = ИдентификаторСтрокиСотрудника;
		Иначе
			// Назначаем строке новый идентификатор, если его еще нет, и запоминаем его для сотрудника в целом.
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторСтроки) Тогда
				СтрокаТаблицы.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			КонецЕсли;
			ИдентификаторыСтрок.Вставить(СтрокаТаблицы.Сотрудник, СтрокаТаблицы.ИдентификаторСтроки);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РегламентированнаяОтчетность

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Процедура ЗаполнитьСтавкуФССНСОрганизации(Организация)
	
	ЗаписиСтавокФССНС = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СоздатьНаборЗаписей();
	ЗаписиСтавокФССНС.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
	ЗаписиСтавокФССНС.Отбор.Организация.Установить(Организация);
	ЗаписиСтавокФССНС.Прочитать();
	Если ЗаписиСтавокФССНС.Количество() = 0 Тогда
		
		ЗаписьПоУмолчанию = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.ЗаписьПоУмолчанию();
		НоваяЗапись = ЗаписиСтавокФССНС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьПоУмолчанию);
		НоваяЗапись.Организация = Организация;
		
		УстановитьПривилегированныйРежим(Истина);
		ЗаписиСтавокФССНС.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры


Функция НайтиДобавитьСтрокуТабличнойЧасти(ТабличнаяЧасть, Отбор)

	НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(Отбор);

	Если НайденныеСтроки.Количество() = 0 Тогда
		Результат = ТабличнаяЧасть.Добавить();
	ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
		Результат = НайденныеСтроки[0];
	Иначе
		// Удалим лишние строки, кроме первой.
		Результат = НайденныеСтроки[0];
		Для ИндексСтроки = 1 По НайденныеСтроки.ВГраница() Цикл
			ТабличнаяЧасть.Удалить(НайденныеСтроки[ИндексСтроки]);
		КонецЦикла;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Удаляет строки из табличной части документа, для которых нет соответствия в переданной таблице ТребуемыеДанные.
//
// Параметры:
//	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа.
//	ТребуемыеДанные - ТаблицаЗначений, ТабличнаяЧасть - Содержит данные, которые необходимо оставить.
//	Отбор - Структура - Содержит ключи для отбора строк, которые необходимо оставить.
//
Процедура УдалитьЛишниеСтроки(ТабличнаяЧасть, ТребуемыеДанные, Отбор)

	ОбратныйИндекс = ТабличнаяЧасть.Количество();
	Пока ОбратныйИндекс > 0 Цикл
		ОбратныйИндекс = ОбратныйИндекс - 1;
		
		СтрокаТаблицы = ТабличнаяЧасть[ОбратныйИндекс];
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		
		НайденныеСтроки = ТребуемыеДанные.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			// Нет соответствующей строки в таблице требуемых данных, удаляем такую строку.
			ТабличнаяЧасть.Удалить(ОбратныйИндекс);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Удаляет строки из табличной части, которые соответствуют УдаляемыеДанные.
//
// Параметры:
//	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа.
//	УдаляемыеДанные - ТаблицаЗначений, ТабличнаяЧасть - Содержит данные, которые необходимо удалить.
//	Отбор - Структура - Содержит ключи для отбора строк, которые необходимо оставить.
//
Процедура УдалитьСтроки(ТабличнаяЧасть, УдаляемыеДанные, Отбор)

	Для каждого СтрокаТаблицы Из УдаляемыеДанные Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
	
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(Отбор);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТабличнаяЧасть.Удалить(НайденнаяСтрока);
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаОшибок

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обмен с мобильной бухгалтерией.Зарплата'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Антикризис

// Определяет период действия сниженного тарифа страховых взносов 172-ФЗ
// 
// Возвращаемое значение:
//  Структура - ключи Начало,Конец - даты
//
Функция ПериодДействияСниженногоТарифаДляСубъектовМалогоБизнеса(ДеятельностьОтнесенаКПострадавшимОтКоронавируса)
	
	Если ДеятельностьОтнесенаКПострадавшимОтКоронавируса Тогда
		ТретийКвартал2020 = '2020-07-01';
		Период = Новый Структура;
		Период.Вставить("Начало", ТретийКвартал2020);
		Период.Вставить("Конец",  КонецГода(ТретийКвартал2020));
	Иначе
		ВторойКвартал2020 = '2020-04-01';
		Период = Новый Структура;
		Период.Вставить("Начало", ВторойКвартал2020);
		Период.Вставить("Конец",  КонецГода(ВторойКвартал2020));
	КонецЕсли;
	
	Возврат Период;
	
КонецФункции

Функция ДляСубъектовМалогоПредпринимательства()
	
	Возврат Справочники.ВидыТарифовСтраховыхВзносов.ДляСубъектовМалогоПредпринимательства;
	
КонецФункции

// Устанавливает тариф страховых взносов для субъектов малого предпринимательства.
//
// Параметры:
//  Организация - СправочникСсылка.Организации 
//  Значение    - Булево - Истина, чтобы включить применение; Ложь - чтобы отключить
// 
// Возвращаемое значение:
//  Булево - Истина, если действие выполнено (в ходе вызова или до вызова)
//
Функция УстановитьТарифСтраховыхВзносовДляСубъектовМалогоБизнеса(Организация, Значение, ДеятельностьОтнесенаКПострадавшимОтКоронавируса)
	
	ПериодОсвобождения = ПериодДействияСниженногоТарифаДляСубъектовМалогоБизнеса(ДеятельностьОтнесенаКПострадавшимОтКоронавируса);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов");
	ЭлементБлокировкиДанных.УстановитьЗначение("ГоловнаяОрганизация", Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",               Организация);
	Запрос.УстановитьПараметр("НачалоПериодаОсвобождения", ПериодОсвобождения.Начало);
	Запрос.УстановитьПараметр("ПериодДоОсвобождения",      НачалоГода(ПериодОсвобождения.Начало));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ТарифыНаНачалоПериода.ВидТарифа КАК ВидТарифа
	|ИЗ
	|	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(&ПериодДоОсвобождения, ГоловнаяОрганизация = &Организация) КАК ТарифыНаНачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ПослеНачалаПериодаОсвобождения.Период КАК Период,
	|	ПослеНачалаПериодаОсвобождения.ВидТарифа КАК ВидТарифа
	|ИЗ
	|	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов КАК ПослеНачалаПериодаОсвобождения
	|ГДЕ
	|	ПослеНачалаПериодаОсвобождения.ГоловнаяОрганизация = &Организация
	|	И ПослеНачалаПериодаОсвобождения.Период >= &НачалоПериодаОсвобождения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПослеНачалаПериодаОсвобождения.Период";
	
	ТарифУстановлен = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		РезультатЗапросов = Запрос.ВыполнитьПакет();
		ВыборкаНаНачалоПериода = РезультатЗапросов[0].Выбрать();
		Если Не ВыборкаНаНачалоПериода.Следующий() Тогда
			ТарифНаНачало = Неопределено;
		Иначе
			ТарифНаНачало = ВыборкаНаНачалоПериода.ВидТарифа;
		КонецЕсли;
		
		ДанныеЗаПериод = РезультатЗапросов[1].Выгрузить();
		
		Если Значение Тогда
			ТарифУстановлен = ВключитьТарифСтраховыхВзносовДляСубъектовМалогоБизнеса(
				Организация,
				ДанныеЗаПериод,
				ДеятельностьОтнесенаКПострадавшимОтКоронавируса);
		Иначе
			ТарифУстановлен = ВыключитьТарифСтраховыхВзносовДляСубъектовМалогоБизнеса(
				Организация,
				ТарифНаНачало,
				ДанныеЗаПериод,
				ДеятельностьОтнесенаКПострадавшимОтКоронавируса);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			"РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов,
			Организация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат ТарифУстановлен;
	
КонецФункции

Функция ВключитьТарифСтраховыхВзносовДляСубъектовМалогоБизнеса(Организация, ДанныеЗаПериод, ДеятельностьОтнесенаКПострадавшимОтКоронавируса)
	
	ПериодОсвобождения           = ПериодДействияСниженногоТарифаДляСубъектовМалогоБизнеса(ДеятельностьОтнесенаКПострадавшимОтКоронавируса);
	ПониженныйАнтикризисныйТариф = ДляСубъектовМалогоПредпринимательства();
	
	КоличествоЗаписейЗаПериод = ДанныеЗаПериод.Количество();
	
	Если КоличествоЗаписейЗаПериод >= 1 Тогда
		
		// Может быть, уже установлен 
		Включение = ДанныеЗаПериод[0];
		ВключенКорректно  = (Включение.Период = ПериодОсвобождения.Начало И Включение.ВидТарифа = ПониженныйАнтикризисныйТариф);
		
		Если ВключенКорректно Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// С начала периода применяется тариф для пострадавших
	Запись = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьМенеджерЗаписи();
	Запись.Период                   = ПериодОсвобождения.Начало;
	Запись.ГоловнаяОрганизация      = Организация;
	Запись.ВидТарифа                = ПониженныйАнтикризисныйТариф;
	Запись.ДатаРегистрацииИзменений = Запись.Период;
	Запись.Записать();
	
	Возврат Истина;
	
КонецФункции

Функция ВыключитьТарифСтраховыхВзносовДляСубъектовМалогоБизнеса(Организация, ТарифНаНачало, ДанныеЗаПериод, ДеятельностьОтнесенаКПострадавшимОтКоронавируса)
	
	ПериодОсвобождения           = ПериодДействияСниженногоТарифаДляСубъектовМалогоБизнеса(ДеятельностьОтнесенаКПострадавшимОтКоронавируса);
	СледующийПериод              = ПериодОсвобождения.Конец + 1;
	ПониженныйАнтикризисныйТариф = ДляСубъектовМалогоПредпринимательства();
	
	Если ДанныеЗаПериод.Найти(ПониженныйАнтикризисныйТариф, "ВидТарифа") = Неопределено Тогда
		// не включен
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТарифНаНачало) Тогда
		Если УчетнаяПолитика.ПрименяетсяУСН(Организация, ПериодОсвобождения.Начало) Тогда
			СледующийТариф = Справочники.ВидыТарифовСтраховыхВзносов.УпрощенныйНалоговыйРежим;
		ИначеЕсли УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ПериодОсвобождения.Начало) Тогда
			СледующийТариф = Справочники.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим;
		ИначеЕсли УчетнаяПолитика.ПлательщикЕНВД(Организация, ПериодОсвобождения.Начало) Тогда
			СледующийТариф = Справочники.ВидыТарифовСтраховыхВзносов.ЕНВД;
		ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, ПериодОсвобождения.Начало) Тогда
			СледующийТариф = Справочники.ВидыТарифовСтраховыхВзносов.ИндивидуальныйПредпринимательПрименяющийПатент;
		Иначе
			СледующийТариф = Справочники.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим;
		КонецЕсли;
	Иначе
		СледующийТариф = ТарифНаНачало;
	КонецЕсли;
	
	КоличествоЗаписейЗаПериод = ДанныеЗаПериод.Количество();
	
	Включение = ДанныеЗаПериод[0];
	ВключенКорректно  = (Включение.Период = ПериодОсвобождения.Начало И Включение.ВидТарифа = ПониженныйАнтикризисныйТариф);
	Если Не ВключенКорректно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Запись про включение может понадобиться, если применяется освобождение
	Запись = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьМенеджерЗаписи();
	Запись.Период                   = ПериодОсвобождения.Начало;
	Запись.ГоловнаяОрганизация      = Организация;
	
	Если ДеятельностьОтнесенаКПострадавшимОтКоронавируса Тогда
		//Применяется освобождение
		Запись.ВидТарифа                = СледующийТариф;
		Запись.ДатаРегистрацииИзменений = Запись.Период;
		Запись.Записать();
	ИначеЕсли Не ЗначениеЗаполнено(ТарифНаНачало) Тогда
		//ДляСубъектовМалогоБизнеса первый тариф, надо установить тариф по умолчанию
		Запись.ВидТарифа                = СледующийТариф;
		Запись.ДатаРегистрацииИзменений = Запись.Период;
		Запись.Записать();
	Иначе
		// Не понадобится
		Запись.Удалить();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
