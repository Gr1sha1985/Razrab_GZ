
////////////////////////////////////////////////////////////////////////////////
// Модуль содержит общие процедуры и функции регламентированных отчетов ФСРАР
////////////////////////////////////////////////////////////////////////////////

// Возращает строковое представления числа без разделения на группы, 0 представляется как "0".
//
// Параметры:
// 		ИсходноеЧисло		- Число.
//
// Возвращаемое значение:
// 		Строка - представление числа без разделения на группы, 0 представляется как "0".
//
Функция СтрокаЧГ0(ИсходноеЧисло) Экспорт

	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");

КонецФункции

// Возвращает Индекс страницы в регистре по индексу страницы в Таблице страниц отчета.
// 
// Параметры:
// 	Форма				- Управляемая форма.
// 	ИдГруппы			- Строка - Идентификатор многострочной группы отчета.
// 	ИндексСтраницы		- Число - индекс страницы в таблице страниц отчета.
// 	
// Возвращаемое значение:
// 	Число.
//
Функция ПолучитьИндексСтраницыРегистра(Форма, ИдГруппы, ИндексСтраницы) Экспорт

	СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];

	Возврат СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра;

КонецФункции

// Увеличивает значение в колонке КоличествоСтрок таблицы СервисРегистров отчета для страницы с индексом ИндексСтраницы,
// до переданного значения ИндексСтроки. 
// Если значение ИндексСтроки не передано, значение КоличествоСтрок увеличивается на 1.
// В параметре КоличествоСтрок возвращается установленное значение.
// 
// Параметры:
// 	Форма				- Управляемая форма.
// 	ИдГруппы			- Строка - Идентификатор многострочной группы отчета.
// 	ИндексСтраницы		- Число - индекс страницы в таблице страниц отчета.
// 	КоличествоСтрок		- Число. Необязательный. В параметре возвращается установленное значение количества строк.
// 	НомерСтроки 		- Число. Необязательный. Номер последней строки.
//
Процедура УвеличитьКоличествоСтрокПоТекущейСтранице(Форма, ИдГруппы,
		ИндексСтраницы, КоличествоСтрок = Неопределено, НомерСтроки = Неопределено) Экспорт

	СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];

	Если НомерСтроки = Неопределено Тогда
	// По умолчанию просто наращиваем на 1.
		СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок = СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок
			+ 1;
	Иначе
	// Если передан индес строки - принудительно устанавливаем.
		СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок = НомерСтроки;
	КонецЕсли;

	КоличествоСтрок = СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок;

КонецПроцедуры

// Увеличивает значение в колонке КолвоСтрокПомНаУдаление таблицы СервисРегистров отчета для страницы 
// с индексом ИндексСтраницы на значение переданное в параметре Дельта. 
// 
// Параметры:
// 	Форма				- Управляемая форма.
// 	ИдГруппы			- Строка - Идентификатор многострочной группы отчета.
// 	ИндексСтраницы		- Число - индекс страницы в таблице страниц отчета.
// 	Дельта				- Число. Необязательный.
// 	
Процедура ИзменитьКоличествоПомеченныхНаУдалениеСтрокПоТекущейСтранице(Форма,
		ИдГруппы, ИндексСтраницы, Дельта = 1) Экспорт

	СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];
	СервисРегистровГруппы[ИндексСтраницы].КолвоСтрокПомНаУдаление = СервисРегистровГруппы[ИндексСтраницы].КолвоСтрокПомНаУдаление
		+ Дельта;

КонецПроцедуры

// Возвращает количество строк в таблице группы ИдГруппы по странице с индексом ИндексСтраницы.
// В зависимости от значения БезПомеченныхНаУдаление, возвращается общее количество строк, 
// включая помеченные на удаление, или не включая.
// 
// Параметры:
// 	Форма					- Управляемая форма.
// 	ИдГруппы				- Строка - Идентификатор многострочной группы отчета.
// 	ИндексСтраницы			- Число - индекс страницы в таблице страниц отчета.
// 	БезПомеченныхНаУдаление - Булево. Необязательный.
// 	
// Возвращаемое значение:
// 	Число.
//
Функция ПолучитьКоличествоСтрокПоСтраницеГруппы(Форма, ИдГруппы,
		ИндексСтраницы, БезПомеченныхНаУдаление = Ложь) Экспорт

	СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];

	Возврат ПолучитьКоличествоСтрокПоСтраницеИзСервисРегистровГруппы(
						СервисРегистровГруппы, ИндексСтраницы, БезПомеченныхНаУдаление);

КонецФункции

Функция ПолучитьКоличествоСтрокПоСтраницеИзСервисРегистровГруппы(
			СервисРегистровГруппы, ИндексСтраницы, БезПомеченныхНаУдаление = Ложь) Экспорт

	Если БезПомеченныхНаУдаление Тогда
		Возврат СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок
			- СервисРегистровГруппы[ИндексСтраницы].КолвоСтрокПомНаУдаление;
	Иначе
		Возврат СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок;
	КонецЕсли;

КонецФункции

// Возвращает количество строк в таблицах группы ИдГруппы по всем страницам отчета.
// В зависимости от значения БезПомеченныхНаУдаление, возвращается общее количество строк, 
// включая помеченные на удаление, или не включая.
// 
// Параметры:
// 	Форма				- Управляемая форма.
// 	ИдГруппы			- Строка - Идентификатор многострочной группы отчета.
// 	БезПомеченныхНаУдаление - Булево. Необязательный.
// 	
// Возвращаемое значение:
// 	Число.
//
Функция ПолучитьКоличествоСтрокПоГруппе(Форма, ИдГруппы,
		БезПомеченныхНаУдаление = Ложь) Экспорт

	КолСтрокПоГруппе = 0;

	СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];
	
	Возврат ПолучитьКоличествоСтрокПоГруппеИзСервисРегистровГруппы(СервисРегистровГруппы, БезПомеченныхНаУдаление);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоГруппеИзСервисРегистровГруппы(СервисРегистровГруппы,
		БезПомеченныхНаУдаление = Ложь) Экспорт

	КолСтрокПоГруппе = 0;

	КолСтраницПоГруппе = СервисРегистровГруппы.Количество();
	Для Инд = 0 По КолСтраницПоГруппе - 1 Цикл

		КоличествоСтрокНастранице = ПолучитьКоличествоСтрокПоСтраницеИзСервисРегистровГруппы(СервисРегистровГруппы,
																					Инд, БезПомеченныхНаУдаление);
		КолСтрокПоГруппе = КолСтрокПоГруппе + КоличествоСтрокНастранице;

	КонецЦикла;

	Возврат КолСтрокПоГруппе;

КонецФункции

// Возвращает количество строк в таблицах по всем группам и по всем страницам отчета.
// В зависимости от значения БезПомеченныхНаУдаление, возвращается общее количество строк, 
// включая помеченные на удаление, или не включая.
// 
// Параметры:
// 	Форма					- Управляемая форма.
// 	БезПомеченныхНаУдаление - Булево. Необязательный.
// 	
// Возвращаемое значение:
// 	Число.
//
Функция ПолучитьОбщееКоличествоСтрок(Форма,
		БезПомеченныхНаУдаление = Ложь) Экспорт

	КолСтрокПоВсемРазделам = 0;

	Для каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл

		ИдГруппы = ЭлементСтруктуры.Ключ;
		КолСтрокПоВсемРазделам = КолСтрокПоВсемРазделам
			+ ПолучитьКоличествоСтрокПоГруппе(Форма, ИдГруппы, БезПомеченныхНаУдаление);

	КонецЦикла;

	Возврат КолСтрокПоВсемРазделам;

КонецФункции

// Возвращает имя регистра, как оно задано в конфигурации, в котором хранятся данные таблиц группы ИдГруппы.
// 
// Параметры:
// 	ИдГруппы					- Строка - Идентификатор многострочной группы отчета.
// 	СтруктураРеквизитовФормы	- Структура. Стандартный реквизит формы всех алкоотчетов. 
// 								Формируется при инициализации отчета. 
// 	
// Возвращаемое значение:
// 	Строка.
//
Функция ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы,
		СтруктураРеквизитовФормы) Экспорт

	СоответствиеИдГруппыРегистр = СтруктураРеквизитовФормы.мСоответствиеИдГруппыРегистр;

	Возврат СоответствиеИдГруппыРегистр.Получить(ИдГруппы);

КонецФункции

// Возвращает идентификатор табличной группы по имени регистра сведений, в котором хранятся значения таблиц этой группы.
// 
// Параметры:
// 	ИмяРегистра					- Строка. Имя регистра, как оно задано в конфигурации.
// 	СтруктураРеквизитовФормы	- Структура. Стандартный реквизит формы всех алкоотчетов. 
// 								Формируется при инициализации отчета.
// Возвращаемое значение:
// 	Строка.
//
Функция ПолучитьИдГруппыПоИмениРегистраАЛКО(ИмяРегистра,
		СтруктураРеквизитовФормы) Экспорт

	СоответствиеРегистрИдГруппы = СтруктураРеквизитовФормы.мСоответствиеРегистрИдГруппы;

	Возврат СоответствиеРегистрИдГруппы.Получить(ИмяРегистра);

КонецФункции
 	
Функция ПолучитьТочныйИдГруппыПоРазделуАЛКО(Форма, Раздел) Экспорт

	СписокИдГруппРаздела = ПолучитьСписокИдГруппПоРазделуАЛКО(Раздел, Форма.СтруктураРеквизитовФормы);

	ИдГруппы = ПолучитьИдГруппыПоРазделуАЛКО(Раздел, Форма.СтруктураРеквизитовФормы);

	Если СписокИдГруппРаздела.Количество() > 1 Тогда

	// Определяем по текущей странице группы страниц.
		ГруппаСтраницыТаблицРаздела = Форма.Элементы.Найти("СтраницыТаблиц" + Раздел);

		Если НЕ ГруппаСтраницыТаблицРаздела = Неопределено Тогда

			ТекущаяСтраницаГруппыСтраницТаблицРаздела = ГруппаСтраницыТаблицРаздела.ТекущаяСтраница;
			ИмяТекущейСтраницы = ТекущаяСтраницаГруппыСтраницТаблицРаздела.Имя;

			Для каждого ЭлементИдГруппы Из СписокИдГруппРаздела Цикл

				ИмяТаблицыФормы = ЭлементИдГруппы.Представление;
				Если СтрЗаменить(ИмяТекущейСтраницы, "СтраницаТаблицы", "") = ИмяТаблицыФормы Тогда

					ИдГруппы = ЭлементИдГруппы.Значение;
					Прервать;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат ИдГруппы;

КонецФункции

Функция ПолучитьИдГруппыПоРазделуАЛКО(Раздел, СтруктураРеквизитовФормы) Экспорт

	СоответствиеРазделИдГруппы = СтруктураРеквизитовФормы.мСоответствиеРазделИдГруппы;

	Возврат СоответствиеРазделИдГруппы.Получить(Раздел);

КонецФункции

Функция ПолучитьСписокИдГруппПоРазделуАЛКО(Раздел,
		СтруктураРеквизитовФормы) Экспорт

	СтруктураИдГрупп = СтруктураРеквизитовФормы.мСтруктураИдГрупп;

	СписокИдГрупп = Неопределено;
	СтруктураИдГрупп.Свойство(Раздел, СписокИдГрупп);

	Возврат СписокИдГрупп;

КонецФункции

Функция ПолучитьРазделПоИдГруппыАЛКО(ИдГруппы,
		СтруктураРеквизитовФормы) Экспорт

	СоответствиеИдГруппыРаздел = СтруктураРеквизитовФормы.мСоответствиеИдГруппыРаздел;

	Возврат СоответствиеИдГруппыРаздел.Получить(ИдГруппы);

КонецФункции

Функция ПолучитьСтруктуруИдГруппИменРегистровАЛКО(СтруктураРеквизитовФормы) Экспорт

	Результат = Новый Структура;

	СоответствиеИдГруппыРегистр = СтруктураРеквизитовФормы.мСоответствиеИдГруппыРегистр;

	Для каждого Элемент Из СоответствиеИдГруппыРегистр Цикл

		ИдГруппы = Элемент.Ключ;
		ИмяРегистра = Элемент.Значение;
		Раздел = ПолучитьРазделПоИдГруппыАЛКО(ИдГруппы, СтруктураРеквизитовФормы);

		Результат.Вставить(ИдГруппы, ИмяРегистра);

		Если НЕ Результат.Свойство(Раздел) Тогда
			Результат.Вставить(Раздел, ИмяРегистра);
		Иначе
		// Несколько групп в разделе.
			Результат.Вставить(Раздел + ИдГруппы, ИмяРегистра);
		КонецЕсли;

		Результат.Вставить(Раздел + ИмяРегистра, ИдГруппы);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьСписокИменРегистровАЛКО(СтруктураРеквизитовФормы) Экспорт

	СписокИмен = Новый СписокЗначений;

	СоответствиеИдГруппыРегистр = СтруктураРеквизитовФормы.мСоответствиеИдГруппыРегистр;

	Для каждого Элемент Из СоответствиеИдГруппыРегистр Цикл

	// ИдГруппы в Элемент.Ключ.
		ИмяРегистра = Элемент.Значение;

		СписокИмен.Добавить(ИмяРегистра);

	КонецЦикла;

	Возврат СписокИмен;

КонецФункции

Функция СформироватьОбособленноеПодразделениеАЛКО(СведенияОбОП, ЭтоПБОЮЛ,
		ОрганизацияИНН) Экспорт

	Если НЕ ТипЗнч(СведенияОбОП) = Тип("Структура") Тогда
		Возврат "Заполнить";
	КонецЕсли;

	Наименование = СтрЗначениеПоКлючуСтруктуры("Наименование", СведенияОбОП);
	КПП = СтрЗначениеПоКлючуСтруктуры("КПП", СведенияОбОП);
	ПредставлениеАдреса = СтрЗначениеПоКлючуСтруктуры("ПредставлениеАдреса", СведенияОбОП);

	НаименованиеОП = ПредставлениеОрганизации(Наименование, ОрганизацияИНН, КПП, ПредставлениеАдреса, ЭтоПБОЮЛ);

	НаименованиеОП = ?(НаименованиеОП = "", "Заполнить", НаименованиеОП);

	Возврат НаименованиеОП;

КонецФункции

Функция ПредставлениеОрганизации(Наименование, ИНН, КПП = "",
		ПредставлениеАдреса = "", ЭтоПБОЮЛ = Неопределено,
		АдресНаНовойСтроке = Истина) Экспорт

	ВыводитьРеквизиты = ЗначениеЗаполнено(Наименование) ИЛИ ЗначениеЗаполнено(КПП)
		ИЛИ ЗначениеЗаполнено(СтрЗаменить(ПредставлениеАдреса, ",", ""));

	Если ВыводитьРеквизиты Тогда

		Если НЕ ТипЗнч(ЭтоПБОЮЛ) = Тип("Булево") Тогда

			ЭтоПБОЮЛ = ?((СтрДлина(СокрЛП(ИНН)) = 10)
				ИЛИ ЗначениеЗаполнено(КПП), Ложь, Истина);

		КонецЕсли;

		Результат = "";
		Если НЕ ПустаяСтрока(Наименование) Тогда
			Результат = СокрЛП(Наименование);
		КонецЕсли;

		Если НЕ (ПустаяСтрока(ИНН) или (ИНН = "Заполнить")) Тогда			
			Результат = Результат + ?(ПустаяСтрока(Результат), "", ", ") + "ИНН "
				+ СокрЛП(ИНН);
		КонецЕсли;

		Если НЕ (ЭтоПБОЮЛ или ПустаяСтрока(КПП) или (КПП = "Заполнить")) Тогда
			Результат = Результат + ?(ПустаяСтрока(Результат), "", ", ") + "КПП "
				+ СокрЛП(КПП);
		КонецЕсли;

		Если НЕ ПустаяСтрока(СтрЗаменить(ПредставлениеАдреса, ",", "")) Тогда
			Результат = Результат
				+ ?(ПустаяСтрока(Результат), "", ?(АдресНаНовойСтроке, Символы.ПС, ", "))
				+ СокрЛП(ПредставлениеАдреса);
		КонецЕсли;
	Иначе
		Результат = "";
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПолучитьКодКвартала(ПоказателиТитульногоЛиста) Экспорт

	Если НЕ ПустаяСтрока(ПоказателиТитульногоЛиста.ОтчетныйПериод1Кв) Тогда
		Возврат "3";
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульногоЛиста.ОтчетныйПериод2Кв) Тогда
		Возврат "6";
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульногоЛиста.ОтчетныйПериод3Кв) Тогда
		Возврат "9";
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульногоЛиста.ОтчетныйПериод4Кв) Тогда
		Возврат "0";
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ЭтоУправляемаяФормаИлиФормаКлиентскогоПриложения(Форма) Экспорт

	СтрокаПредставленияТипа = ВРег(Строка(ТипЗнч(Форма)));
	
	// Не используется сравнение с Тип() поскольку в 8.2 например нет типа
	// ФормаКлиентскогоПриложения, а проверять через версию платформы дороже
	// простого сравнения представлений.
	Возврат (СтрокаПредставленияТипа = "УПРАВЛЯЕМАЯ ФОРМА" 
			ИЛИ СтрокаПредставленияТипа = "ФОРМА КЛИЕНТСКОГО ПРИЛОЖЕНИЯ"
			ИЛИ СтрокаПредставленияТипа = "MANAGED FORM"
			ИЛИ СтрокаПредставленияТипа = "CLIENT APPLICATION FORM");			
	
КонецФункции

Функция ЭтоСоответствие(Ответ) Экспорт

	Возврат (СтрНайти(НРег(Строка(ТипЗнч(Ответ))), "соответствие") > 0)

КонецФункции

Функция ЭтоСтруктура(Ответ) Экспорт

	Возврат (СтрНайти(НРег(Строка(ТипЗнч(Ответ))), "структура") > 0)

КонецФункции

Функция ЭтоМассив(Ответ) Экспорт

	Возврат (СтрНайти(НРег(Строка(ТипЗнч(Ответ))), "массив") > 0)

КонецФункции

Функция ВерсияПлатформы() Экспорт

	Возврат РегламентированнаяОтчетностьАЛКОВызовСервера.ВерсияПлатформы();

КонецФункции

// Сравнивает текущую версию платформы и версию в параметре.
// Параметры
//  СтрокаВерсии  – Строка – номер версии в формате РР.{П|ПП}.ЗЗ.СС 
//
// Результат Булево.
// Истина, если текущая версия платформы не ниже переданной в параметре.
Функция ВерсияПлатформыНеНижеВерсии(СтрокаВерсии) Экспорт

	ТекущаяВерсияПлатформы = ВерсияПлатформы();
	
	Возврат (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ТекущаяВерсияПлатформы, СтрокаВерсии) >= 0);
	
КонецФункции

Функция ЗначениеПоКлючуСтруктуры(Ключ, Структура) Экспорт

	Значение = Неопределено;

	Структура.Свойство(Ключ, Значение);

	Возврат Значение;

КонецФункции

Функция СтрЗначениеПоКлючуСтруктуры(Ключ, Структура,
		ЧислоБезГрупп = Истина) Экспорт

	Значение = Неопределено;

	Если Структура.Свойство(Ключ, Значение) Тогда

		Если (ТипЗнч(Значение) = Тип("Число")) и ЧислоБезГрупп Тогда
			Возврат СтрокаЧГ0(Значение);
		КонецЕсли;

		Возврат Строка(Значение);

	КонецЕсли;

	Возврат "";

КонецФункции

Функция ДанныеПоАдресу(Данные, Адрес) Экспорт

	Перем ЗначениеДанных;

	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ПозицияРазделителя = СтрНайти(Адрес, ".");
		Если ПозицияРазделителя = 0 Тогда
			АдресВерхнегоУровня = СокрЛП(Адрес);
			Данные.Свойство(АдресВерхнегоУровня, ЗначениеДанных);
		Иначе
			АдресВерхнегоУровня = СокрЛП(Лев(Адрес, ПозицияРазделителя - 1));
			ДанныеВерхнегоУровня = Неопределено;
			Если Данные.Свойство(АдресВерхнегоУровня, ДанныеВерхнегоУровня) Тогда
				АдресСледующегоУровня = СокрЛП(Сред(Адрес, ПозицияРазделителя + 1));
				ЗначениеДанных = ДанныеПоАдресу(ДанныеВерхнегоУровня, АдресСледующегоУровня);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ЗначениеДанных;

КонецФункции

Функция ИнициализацияЗаголовкаАЛКО(Заголовок, ИмяФормы,
		СтруктураРеквизитовФормы) Экспорт

	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;

	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;

	Заголовок = Заголовок
		+ ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");

	Возврат Заголовок;

КонецФункции

Процедура ПоказатьПериодАЛКО(СтруктураРеквизитовФормы,
		СтруктураДанныхТитульный, ПринудительноЗаполнить = Ложь) Экспорт

	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");

	Если (НЕ ПринудительноЗаполнить)
			И СтруктураРеквизитовФормы.мДокументВосстановлен
			И (СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено) Тогда

		Возврат;

	КонецЕсли;

	НомерКварталаСтр = КварталОтчетаСтрокой(СтруктураРеквизитовФормы);
	НомерГода = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображение на титульном листе отчетного периода.
	Значение1Кв = ?(НомерКварталаСтр = "1", "V", "");
	СтруктураДанныхТитульный.Вставить("ОтчетныйПериод1Кв", Значение1Кв);

	Значение2Кв = ?(НомерКварталаСтр = "2", "V", "");
	СтруктураДанныхТитульный.Вставить("ОтчетныйПериод2Кв", Значение2Кв);

	Значение3Кв = ?(НомерКварталаСтр = "3", "V", "");
	СтруктураДанныхТитульный.Вставить("ОтчетныйПериод3Кв", Значение3Кв);

	Значение4Кв = ?(НомерКварталаСтр = "4", "V", "");
	СтруктураДанныхТитульный.Вставить("ОтчетныйПериод4Кв", Значение4Кв);

	СтруктураДанныхТитульный.Вставить("ОтчетныйГод", НомерГода);

КонецПроцедуры

Функция КварталОтчетаСтрокой(СтруктураРеквизитовФормы) Экспорт

	Возврат Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к");	

КонецФункции
 
Функция УбратьЛишниеПробелы(Знач Стр) Экспорт

	ДлинаСтроки = 0;
	
	Пока СтрДлина(Стр) <> ДлинаСтроки Цикл
		
		ДлинаСтроки = СтрДлина(Стр);
		
		Стр = СтрЗаменить(Стр, "  ", " ");		
	
	КонецЦикла; 
	
	Возврат Стр;

КонецФункции

Функция ЭтоБуква(Символ) Экспорт

	// Цифры в Unicode 0030 - 0039
	// Латинские буквы в Unicode 0041 - 005A, 0061 - 007A
	// Русские буквы 0410 - 044F
	
	СтартЦифры = 48; //0030
	КонецЦифры = 57; //0039
	СтартБольшиеЛатинские = 65; //0041
	КонецБольшиеЛатинские = 90; //005A
	СтартМаленькиеЛатинские = 97; //0061
	КонецМаленькиеЛатинские = 122; //007A
	СтартРусские = 1040; //0410
	КонецРусские = 1103; //044F
	
	

	КодСимволаUnicode = КодСимвола(Символ, 1);

	Результат =	(КодСимволаUnicode >= СтартРусские И КодСимволаUnicode <= КонецРусские)
				ИЛИ
				(КодСимволаUnicode >= СтартБольшиеЛатинские И КодСимволаUnicode <= КонецБольшиеЛатинские)
				ИЛИ 
				(КодСимволаUnicode >= СтартМаленькиеЛатинские И КодСимволаUnicode <= КонецМаленькиеЛатинские);

	Возврат Результат;

КонецФункции

Функция ЭтоЦифра(Символ) Экспорт

	// Цифры в Unicode 0030 - 0039
	// Латинские буквы в Unicode 0041 - 005A, 0061 - 007A
	// Русские буквы 0410 - 044F
	
	СтартЦифры = 48; //0030
	КонецЦифры = 57; //0039
	
	КодСимволаUnicode = КодСимвола(Символ, 1);

	Результат =	(КодСимволаUnicode >= СтартЦифры И КодСимволаUnicode <= КонецЦифры);

	Возврат Результат;

КонецФункции

Функция ЕстьЦифра(Стр) Экспорт

	Если ПустаяСтрока(Стр) Тогда	
		Возврат Ложь	
	КонецЕсли;
	
	Длина = СтрДлина(Стр);
	Для Индекс = 1 По Длина Цикл
	
		Символ = Сред(Стр, Индекс, 1);
		Если ЭтоЦифра(Символ) Тогда		
			Возврат Истина		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Ложь

КонецФункции

Функция ЗаменитьСимволНаРазделительЕслиСимволПередЦифрой(Знач Стр, Символ, Разделитель) Экспорт
	
	Если ПустаяСтрока(Стр) Тогда	
		Возврат Стр	
	КонецЕсли;
	
	Если СтрНайти(Стр, Символ) = 0 Тогда
		// Нет Символа.
		Возврат Стр	
	КонецЕсли;
	
	Для Цифра = 0 По 9 Цикл
	
		СтрПоиска = Символ + СтрокаЧГ0(Цифра);
		СтрЗамены = Разделитель + СтрокаЧГ0(Цифра);
		
		Стр = СтрЗаменить(Стр, СтрПоиска, СтрЗамены)
	
	КонецЦикла; 
	
	Возврат Стр
		
КонецФункции

// Заменяет в строке буквы русского алфавита на буквы латинского, в соответсвии с правилами транслитерации.
//
// Параметры:
// 		Стр				- Строка.
//
// Возвращаемое значение:
// 		Строка	
//
Функция Транслит(Стр) Экспорт

	СоответствиеСимволов = Новый Соответствие;
	СоответствиеСимволов.Вставить("А", "A");
	СоответствиеСимволов.Вставить("Б", "B");
	СоответствиеСимволов.Вставить("В", "V");
	СоответствиеСимволов.Вставить("Г", "G");
	СоответствиеСимволов.Вставить("Д", "D");
	СоответствиеСимволов.Вставить("Е", "E");
	СоответствиеСимволов.Вставить("Ё", "E");
	СоответствиеСимволов.Вставить("Ж", "ZH");
	СоответствиеСимволов.Вставить("З", "Z");
	СоответствиеСимволов.Вставить("И", "I");
	СоответствиеСимволов.Вставить("Й", "Y");
	СоответствиеСимволов.Вставить("К", "K");
	СоответствиеСимволов.Вставить("Л", "L");
	СоответствиеСимволов.Вставить("М", "M");
	СоответствиеСимволов.Вставить("Н", "N");
	СоответствиеСимволов.Вставить("О", "O");
	СоответствиеСимволов.Вставить("П", "P");
	СоответствиеСимволов.Вставить("Р", "R");
	СоответствиеСимволов.Вставить("С", "S");
	СоответствиеСимволов.Вставить("Т", "T");
	СоответствиеСимволов.Вставить("У", "U");
	СоответствиеСимволов.Вставить("Ф", "F");
	СоответствиеСимволов.Вставить("Х", "KH");
	СоответствиеСимволов.Вставить("Ц", "TS");
	СоответствиеСимволов.Вставить("Ч", "CH");
	СоответствиеСимволов.Вставить("Ш", "SH");
	СоответствиеСимволов.Вставить("Щ", "SHCH");
	СоответствиеСимволов.Вставить("Ъ", "");
	СоответствиеСимволов.Вставить("Ы", "Y");
	СоответствиеСимволов.Вставить("Ь", "");
	СоответствиеСимволов.Вставить("Э", "E");
	СоответствиеСимволов.Вставить("Ю", "YU");
	СоответствиеСимволов.Вставить("Я", "YA");

	Результат = "";

	Для Инд = 1 по СтрДлина(Стр) Цикл

		СимволРус = Сред(Стр, Инд, 1);
		СимволАнг = СоответствиеСимволов.Получить(ВРег(СимволРус));

		Если СимволАнг = Неопределено Тогда
		// это английский символ
			Результат = Результат + СимволРус;
		Иначе
			Если ВРег(СимволРус) = СимволРус Тогда
			// Верхний регистр
				Результат = Результат + СимволАнг;
			Иначе
				Результат = Результат + НРег(СимволАнг);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура ЗагрузитьРекивизитыЗаявленияОКорректировкиАЛКО(СтруктураРеквизитовФормы,
		СтруктураДанныхТитульный, ПринудительноЗаполнить = Ложь) Экспорт

	Если (НЕ ПринудительноЗаполнить)
			И СтруктураРеквизитовФормы.мДокументВосстановлен
			И (СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено) Тогда
			// Все уже в СтруктураДанныхТитульный.
		Возврат;

	КонецЕсли;

	СданныйАлкоОтчет = ЗначениеПоКлючуСтруктуры("СданныйАлкоОтчет", СтруктураРеквизитовФормы);

	СтруктураДанныхТитульный.Вставить("СданныйАлкоОтчет", СданныйАлкоОтчет);

	НомерПриложения = ЗначениеПоКлючуСтруктуры("НомерПриложения", СтруктураРеквизитовФормы);
	СтруктураДанныхТитульный.Вставить("НомерПриложения", НомерПриложения);

КонецПроцедуры

Процедура СформироватьДеревоРазделовОтчетаАЛКО(Форма) Экспорт

	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();

	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл

		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда

			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки = 1;
			ЭлементРазделовОтчета.РазделМногостраничный = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный = Ложь;

			НайденноеЗначение = Неопределено;

			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда

				Если НЕ НайденноеЗначение = Неопределено Тогда

					НайденноеЗначение = Форма[НайденноеЗначение];

					ЭлементРазделовОтчета.ИндексКартинки = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;

					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл

						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();

						СтраницаРазделаОтчета.КолонкаРазделыОтчета = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки = 1;
						СтраницаРазделаОтчета.РазделМногостраничный = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный = ЭлементРазделовОтчета.РазделМногострочный;

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаАЛКО(ПоказателиОтчета,
		СтруктураДанныхТитульный, СтруктураРеквизитовФормы, ЭтоПБОЮЛ) Экспорт

	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];

	Для Каждого Показатель Из ПоказателиТаблПоле Цикл

		ИмяПоказателя = Показатель.Ключ;

		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1)
					+ ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1)
					+ ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетныйГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетныйГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетныйГод = СокрЛП(СтруктураДанныхТитульный.ОтчетныйГод)
					+ ПоказателиТаблПоле["ОтчетныйГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетныйГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомКорр1" Тогда
			СтруктураДанныхТитульный.Вставить("НомКорр");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.НомКорр = СокрЛП(СтруктураДанныхТитульный.НомКорр)
					+ ПоказателиТаблПоле["НомКорр" + Ном];
				СтруктураДанныхТитульный.Удалить("НомКорр" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПочтовыйИндекс1" Тогда
			СтруктураДанныхТитульный.Вставить("ПочтовыйИндекс");
			Для Ном = 1 По 6 Цикл
				СтруктураДанныхТитульный.ПочтовыйИндекс = СокрЛП(СтруктураДанныхТитульный.ПочтовыйИндекс)
					+ ПоказателиТаблПоле["ПочтовыйИндекс" + Ном];
				СтруктураДанныхТитульный.Удалить("ПочтовыйИндекс" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КодРегиона1" Тогда
			СтруктураДанныхТитульный.Вставить("КодРегиона");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.КодРегиона = СокрЛП(СтруктураДанныхТитульный.КодРегиона)
					+ ПоказателиТаблПоле["КодРегиона" + Ном];
				СтруктураДанныхТитульный.Удалить("КодРегиона" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил)
					+ ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	СтруктураДанныхТитульный.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);

	СтруктураРеквизитовФормы.Руководитель = Неопределено;
	ПоказателиТаблПоле.Свойство("ОргДиректор", СтруктураРеквизитовФормы.Руководитель);
	СтруктураРеквизитовФормы.Руководитель = ?(СтруктураРеквизитовФормы.Руководитель = Неопределено, "", СтруктураРеквизитовФормы.Руководитель);
	СтруктураДанныхТитульный.Вставить("ОргДиректор", СтруктураРеквизитовФормы.Руководитель);

	СтруктураРеквизитовФормы.Бухгалтер = Неопределено;
	ПоказателиТаблПоле.Свойство("ОргБухгалтер", СтруктураРеквизитовФормы.Бухгалтер);
	СтруктураРеквизитовФормы.Бухгалтер = ?(СтруктураРеквизитовФормы.Бухгалтер = Неопределено, "", СтруктураРеквизитовФормы.Бухгалтер);
	СтруктураДанныхТитульный.Вставить("ОргБухгалтер", СтруктураРеквизитовФормы.Бухгалтер);

	СтруктураРеквизитовФормы.ТелОрганизации = Неопределено;
	ПоказателиТаблПоле.Свойство("ТелОрганизации", СтруктураРеквизитовФормы.ТелОрганизации);
	СтруктураРеквизитовФормы.ТелОрганизации = ?(СтруктураРеквизитовФормы.ТелОрганизации = Неопределено, "", СтруктураРеквизитовФормы.ТелОрганизации);
	СтруктураДанныхТитульный.Вставить("ТелОрганизации", СтруктураРеквизитовФормы.ТелОрганизации);

КонецПроцедуры

Функция СкопироватьЗначение(знач Значение) Экспорт

// Поскольку передается по значению - уже имеем копию.
// только для простых типов!
	Возврат Значение;

КонецФункции

Функция СтруктураВСписокЗначений(СтруктураЗначений) Экспорт

	ЗначенияПолей = Новый СписокЗначений;

	Для каждого ЭлементСтруктуры Из СтруктураЗначений Цикл

		ПредставлениеВСписке = ЭлементСтруктуры.Ключ;
		ЗначениеВСписке = ЭлементСтруктуры.Значение;

		ЗначенияПолей.Добавить(ЗначениеВСписке, ПредставлениеВСписке);

	КонецЦикла;

	Возврат ЗначенияПолей;

КонецФункции

Функция ДесятичноеЧислоИзЧислаДругойСистемыСчисления(знач СтрокаЧислаВСистемеСчисления,
		СтрокаЦифрСистемыСчисления = "0123456789ABCDEF") Экспорт

	СтрокаЧислаВСистемеСчисления = ВРег(СтрокаЧислаВСистемеСчисления);

	ОснованиеСчисления = СтрДлина(СтрокаЦифрСистемыСчисления);

	ДлинаСтрокиЧислаВСистемеСчисления = СтрДлина(СтрокаЧислаВСистемеСчисления);

	Результат = 0;

	Для Позиция = 1 По ДлинаСтрокиЧислаВСистемеСчисления Цикл

		ТекущаяЦифра = Сред(СтрокаЧислаВСистемеСчисления, Позиция, 1);
		ДесятичноеПредставлениеЦифры = Найти(СтрокаЦифрСистемыСчисления, ТекущаяЦифра)
			- 1;

		Результат = Результат * ОснованиеСчисления + ДесятичноеПредставлениеЦифры;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ВерноеИмяКлючаСтруктуры(ИмяКлюча) Экспорт

	Если НЕ ТипЗнч(ИмяКлюча) = Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;

	ДлинаКлюча = СтрДлина(ИмяКлюча);
	Если ДлинаКлюча = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	// Ключ должен соответствовать требованиям к именам переменных 1С.
	// Т.е состоять из букв, цифр и знака подчеркивания, причем первый символ не может быть цифрой.
	// Знак подчеркивания тоже будем считать неверным для первого символа.

	// Цифры в Unicode 0030 - 0039
	// Латинские буквы в Unicode 0041 - 005A, 0061 - 007A
	// Русские буквы 0410 - 044F
	// Знак подчеркивания 005F
	СтартЦифры = 48; //0030
	КонецЦифры = 57; //0039
	СтартБольшиеЛатинские = 65; //0041
	КонецБольшиеЛатинские = 90; //005A
	СтартМаленькиеЛатинские = 97; //0061
	КонецМаленькиеЛатинские = 122; //007A
	СтартРусские = 1040; //0410
	КонецРусские = 1103; //044F
	КодПодчеркивания = 95; //005F
	Для Позиция = 1 По ДлинаКлюча Цикл

		КодСимволаUnicode = КодСимвола(ИмяКлюча, Позиция);

		Если НЕ ((КодСимволаUnicode >= СтартЦифры И КодСимволаUnicode <= КонецЦифры)
				ИЛИ (КодСимволаUnicode >= СтартБольшиеЛатинские
				И КодСимволаUnicode <= КонецБольшиеЛатинские)
				ИЛИ (КодСимволаUnicode >= СтартМаленькиеЛатинские
				И КодСимволаUnicode <= КонецМаленькиеЛатинские)
				ИЛИ (КодСимволаUnicode >= СтартРусские И КодСимволаUnicode <= КонецРусские)
				ИЛИ (КодСимволаUnicode = КодПодчеркивания)) Тогда
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	// Проверим чтобы первый символ не был цифрой или подчеркиванием.
	КодПервыйСимвол = КодСимвола(ИмяКлюча, 1);

	Если (КодПервыйСимвол >= СтартЦифры И КодПервыйСимвол <= КонецЦифры)
			ИЛИ (КодПервыйСимвол = КодПодчеркивания) Тогда

		Возврат Ложь;

	КонецЕсли;

	Возврат Истина;

КонецФункции

// Опеределяет все ли символы в переданной строке - цифры. 
// Не используется посимвольный перебор, благодаря чему работает очень быстро,
// что важно при большом объеме проверок.
// Не подходит для проверки строки произвольной длины.
//
// Параметры:
// 		ПроверяемаяСтрока		- Строка.
//
// Возвращаемое значение:
// 		Булево - Истина если в строке все символы являются цифрами.
//
Функция ВСтрокеВсеЦифры(ПроверяемаяСтрока) Экспорт

	Если ПустаяСтрока(ПроверяемаяСтрока) = 1 Тогда
	// пустая строка не является строкой цифр
		Возврат Ложь;
	КонецЕсли;

	//Добавим цифру "1" для обработки ситуаций:
	// - наличие лидирующих нулей;
	// - введен один единственный символ не цифра. 
	Попытка
		ДлинаПроверяемойСтроки = СтрДлина(Формат(Цел(Число("1"
			+ СокрЛП(ПроверяемаяСтрока))), "ЧГ=0; ЧВН="));
	Исключение
	// Если возникло исключение - значит не смогли преобразовать к числу "1" + СокрЛП(ПроверяемаяСтрока).
		Возврат Ложь;
	КонецПопытки;

	Возврат ДлинаПроверяемойСтроки = (СтрДлина(ПроверяемаяСтрока) + 1);

КонецФункции

Функция ЛицензируемаяДеятельностьАЛКО(ТаблицаСтраницыЛицензии,
		ИмяПоляКодЛицензии = "П000000000105") Экспорт

	Если ТаблицаСтраницыЛицензии.Количество() < 1
			Или ТаблицаСтраницыЛицензии[0].Данные.Количество() < 1
			Или ТаблицаСтраницыЛицензии[0].ДополнительныеДанные.Количество() < 1 Тогда
			// По умолчанию считаем нелицензируемой.
		Возврат Ложь;
	КонецЕсли;

	// Если деятельность нелицензируемая, то все страницы могут содержать в поле
	// П000000000105 только строку, 
	// соответствующую в макете Списки в области Виды Деятельности коду 12.

	// Код вида деятельности сохраняется в Дополнительных Данных
	// в структуре с ключем П000000000105

	// Фактически при реализации в виде многострочной страницы на обычных формах
	// это означает одну единственную страницу с индексом 0.
	СтруктураДополнительныеДанные = ТаблицаСтраницыЛицензии[0].ДополнительныеДанные[0].Значение;

	КодВидДеятельности = Неопределено;

	// КодВидДеятельности в структуре имеет тип строка 2 символа.
	КодВидДеятельности = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры(ИмяПоляКодЛицензии, СтруктураДополнительныеДанные);

	// НЕ нелицензируемые виды деятельности начинаются от значения кода 08.
	Возврат КодТребуетЛицензию(КодВидДеятельности);

КонецФункции

Функция КодТребуетЛицензию(КодВидДеятельности) Экспорт

	КодЗаведомоНелицензионный = 100;
	ГраницаОпределенияЛицензионности = 8;
	
	// По умолчанию считаем нелицензируемой.
	КодВидДеятельности = ?(ЗначениеЗаполнено(КодВидДеятельности), Число(КодВидДеятельности), КодЗаведомоНелицензионный);

	// НЕ нелицензируемые виды деятельности начинаются от значения кода 08.
	Возврат КодВидДеятельности < ГраницаОпределенияЛицензионности;
	
КонецФункции

Функция СтрокаБезСимволов(НеправильнаяСтрока, СтрокаУбираемых = " .,""'«»()<>:;[]{}\|/?*&^%$#№@!~`+=-_") Экспорт

	Результат = Строка(НеправильнаяСтрока);
	ДлинаСтрокиУбираемых = СтрДлина(СтрокаУбираемых);
	
	Для НомерСимвола = 1 По ДлинаСтрокиУбираемых Цикл
	
		УбираемыйСимвол = Сред(СтрокаУбираемых, НомерСимвола, 1);
		Результат = СтрЗаменить(Результат, УбираемыйСимвол, "");
	
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

Функция ПустойАдресXMLилиJSON(Вариант = "JSON", ДляСравнения = Ложь) Экспорт
	
	Если НЕ ТипЗнч(Вариант) = Тип("Строка") Тогда
		Вариант = "JSON";
	ИначеЕсли НЕ (Вариант = "JSON" ИЛИ Вариант = "XML") Тогда	
		Вариант = "JSON";		
	КонецЕсли; 

	Если Вариант = "JSON" Тогда
		
		Если ДляСравнения Тогда
		
			Результат = """area"": """",
						|""areaType"": """",
						|""city"": """",
						|""cityType"": """",
						|""street"": """",
						|""streetType"": """",
						|""id"": """",
						|""areaCode"": """",
						|""areaId"": """",
						|""district"": """",
						|""districtType"": """",
						|""districtId"": """",
						|""munDistrict"": """",
						|""munDistrictType"": """",
						|""munDistrictId"": """",
						|""cityId"": """",
						|""settlement"": """",
						|""settlementType"": """",
						|""settlementId"": """",
						|""cityDistrict"": """",
						|""cityDistrictType"": """",
						|""cityDistrictId"": """",
						|""territory"": """",
						|""territoryType"": """",
						|""territoryId"": """",
						|""locality"": """",
						|""localityType"": """",
						|""localityId"": """",
						|""streetId"": """",
						|""houseType"": """",
						|""houseNumber"": """",
						|""houseId"": """",
						|""buildings"": [],
						|""apartments"": [],
						|""codeKLADR"": """",
						|""oktmo"": """",
						|""okato"": """",
						|""asInDocument"": """",
						|""ifnsFLCode"": """",
						|""ifnsULCode"": """",
						|""ifnsFLAreaCode"": """",
						|""ifnsULAreaCode"": """"
						|}";
			
		Иначе
			
			Результат = "{
						|""value"": """",
						|""comment"": """",
						|""type"": ""Адрес"",
						|""country"": ""РОССИЯ"",
						|""addressType"": ""Административно-территориальный"",
						|""countryCode"": ""643"",
						|""ZIPcode"": """",
						|""area"": """",
						|""areaType"": """",
						|""city"": """",
						|""cityType"": """",
						|""street"": """",
						|""streetType"": """",
						|""id"": """",
						|""areaCode"": """",
						|""areaId"": """",
						|""district"": """",
						|""districtType"": """",
						|""districtId"": """",
						|""munDistrict"": """",
						|""munDistrictType"": """",
						|""munDistrictId"": """",
						|""cityId"": """",
						|""settlement"": """",
						|""settlementType"": """",
						|""settlementId"": """",
						|""cityDistrict"": """",
						|""cityDistrictType"": """",
						|""cityDistrictId"": """",
						|""territory"": """",
						|""territoryType"": """",
						|""territoryId"": """",
						|""locality"": """",
						|""localityType"": """",
						|""localityId"": """",
						|""streetId"": """",
						|""houseType"": """",
						|""houseNumber"": """",
						|""houseId"": """",
						|""buildings"": [],
						|""apartments"": [],
						|""codeKLADR"": """",
						|""oktmo"": """",
						|""okato"": """",
						|""asInDocument"": """",
						|""ifnsFLCode"": """",
						|""ifnsULCode"": """",
						|""ifnsFLAreaCode"": """",
						|""ifnsULAreaCode"": """"
						|}";	
		
		КонецЕсли; 
		
	Иначе
		
		Если ДляСравнения Тогда
			Результат =	"
						|      <СубъектРФ/>
						|      <Округ/>
						|      <СвРайМО>
						|        <Район/>
						|      </СвРайМО>
						|      <Город/>
						|      <ВнутригРайон/>
						|      <НаселПункт/>
						|      <Улица/>
						|    </Состав>
						|  </Состав>
						|</КонтактнаяИнформация>";
		Иначе
			Результат =	"<КонтактнаяИнформация xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" Представление="""">
						|  <Комментарий/>
						|  <Состав xsi:type=""Адрес"" Страна=""РОССИЯ"">
						|    <Состав xsi:type=""АдресРФ"">
						|      <СубъектРФ/>
						|      <Округ/>
						|      <СвРайМО>
						|        <Район/>
						|      </СвРайМО>
						|      <Город/>
						|      <ВнутригРайон/>
						|      <НаселПункт/>
						|      <Улица/>
						|    </Состав>
						|  </Состав>
						|</КонтактнаяИнформация>";	
		КонецЕсли
				
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция XMLилиJSONНеПуст(XMLилиJSON) Экспорт
	
	Если ПустаяСтрока(XMLилиJSON) Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	Если СтрНайти(XMLилиJSON, ПустойАдресXMLилиJSON("JSON", Истина)) > 0 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если СтрНайти(XMLилиJSON, ПустойАдресXMLилиJSON("XML", Истина)) > 0 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции
 
Процедура ЗаполнитьЗаписьРегистраЛицензийИзСтруктурыАдреса(Запись, СтруктураАдреса) Экспорт
	
	Запись.П000000000202 = СтруктураАдреса.Индекс;
    Запись.П000000000203 = СтруктураАдреса.КодРегиона;
	Запись.П000000000204 = СтруктураАдреса.Район;
	
	Запись.П000000000205 = ДополнитьСтроку(СтруктураАдреса.Город, СтруктураАдреса.НаселенныйПункт, " / ");
	
	Запись.П000000000206 = СтруктураАдреса.Улица;
	
	СтрокаДома = СтруктураАдреса.Дом;
	СтрокаДома = ДополнитьСтроку(СтрокаДома, СтруктураАдреса.Корпус, ", ");
	СтрокаДома = ДополнитьСтроку(СтрокаДома, СтруктураАдреса.Литера, ", ");
	СтрокаДома = ДополнитьСтроку(СтрокаДома, СтруктураАдреса.Квартира, ", ");
	
	Запись.П000000000207 = СтрокаДома;	

КонецПроцедуры

Функция ДополнитьСтроку(ДополняемаяСтрока, Дополнение, Разделитель = ", ") Экспорт
	
	Результат = ДополняемаяСтрока;
	
	Если Дополнение <> "" Тогда
		Если ДополняемаяСтрока <> "" Тогда
			Результат = ДополняемаяСтрока + Разделитель + Дополнение;
		Иначе	
			Результат = Дополнение;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
 
Процедура ОбъединитьСтруктурыИлиСоответствия(Приемник, Источник) Экспорт

	Для каждого КлючИЗначение Из Источник Цикл
	
		Приемник.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);			
			
	КонецЦикла;
	
КонецПроцедуры

Функция МассивНомеровВиноградныхДеклараций() Экспорт

	МассивВиноградных = Новый Массив;
	
	МассивВиноградных.Добавить(13);
	МассивВиноградных.Добавить(14);
	МассивВиноградных.Добавить(15);
	МассивВиноградных.Добавить(27);
	МассивВиноградных.Добавить(28);
	МассивВиноградных.Добавить(29);
	
	Возврат МассивВиноградных;

КонецФункции 

Функция ЕстьАдресаВСтрокахТаблицОтчетаАЛКО(НомерАлкоОтчета) Экспорт
	
	Если НомерАлкоОтчета = 18 
		ИЛИ (НомерАлкоОтчета >= 20 И НомерАлкоОтчета <= 26)
		// Фармацевтические - закупки-поставки.
		ИЛИ НомерАлкоОтчета = 31 ИЛИ НомерАлкоОтчета = 32
		ИЛИ НомерАлкоОтчета = 35 ИЛИ НомерАлкоОтчета = 36
		Тогда
	
		Возврат Истина;
	
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции