
////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ОбменДаннымиСВнешнимиСистемами".
// ОбщийМодуль.ОбменДаннымиСВнешнимиСистемами.
//
// Серверные процедуры и функции обмена данными с внешними системами:
//  - получение информации о внешних системах с которыми возможно настроить обмен;
//  - регистрации нового обмена и обновления пользовательского описания;
//  - удаление настроек обмена данными;
//  - выполнение загрузки файлов обмена из внешних систем;
//  - отправки подтверждения о загрузке в сервис;
//  - обработки событий Библиотеки стандартных подсистем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет обновление пользовательского описания настройки обмена данными
// в сервисе обмена данными с внешними системами.
//
// Параметры:
//  ИдентификаторНастройки - Строка - идентификатор обмена данными в сервисе;
//  ОписаниеНастройки      - Строка - новое пользовательское описание настройки обмена данными.
//
// Возвращаемое значение:
//  Структура - содержит результат выполнения операции по изменению описания в сервисе обмена данными:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - операция завершена успешно;
//                    - "НеизвестныйИдентификатор" - неизвестный идентификатор;
//                    - "НеверныйФорматЗапроса" - неверный формат запроса;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//    *СообщениеОбОшибке   - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОбновитьОписаниеНастройкиОбменаДанными(ИдентификаторНастройки, ОписаниеНастройки) Экспорт
	
	// 1. Обновление описание в сервисе Портала 1С:ИТС
	Возврат ОбновитьОписаниеНастройки(ИдентификаторНастройки, ОписаниеНастройки);
	
КонецФункции

// Выполняет обновление настроек обмена в сервисе обмена данными с внешними системами.
//
// Параметры:
//  ИдентификаторНастройки - Строка - идентификатор обмена данными в сервисе;
//  НастройкиОбмена        - Структура - значение настроек обмена. Значение должно
//                           иметь тип "Строка", в противном случае будет вызвано исключение.
//
// Возвращаемое значение:
//  Структура - содержит результат выполнения операции по изменению описания в сервисе обмена данными:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - операция завершена успешно;
//                    - "НеизвестныйИдентификатор" - неизвестный идентификатор;
//                    - "НеверныйФорматЗапроса" - неверный формат запроса;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//    *СообщениеОбОшибке   - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОбновитьНастройкиОбменаДанными(ИдентификаторНастройки, НастройкиОбмена) Экспорт
	
	Для Каждого КлючЗначение Из НастройкиОбмена Цикл
		Если ТипЗнч(КлючЗначение.Значение) <> Тип("Строка") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не верный тип у значения свойства %1.'"),
				КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	// 1. Обновление описание в сервисе Портала 1С:ИТС
	Возврат ОбновитьНастройкиОбмена(ИдентификаторНастройки, НастройкиОбмена);
	
КонецФункции

// Выполняет получение файла обмена и дополнительных параметров обмена из сервиса обмена данными
// с внешними системами.
//
// Параметры:
//  ИдентификаторНастройки - Строка - идентификатор обмена данными на Портале 1С:ИТС;
//
// Возвращаемое значение:
//  Структура - содержит информацию о внешних системах с которыми возможно настроить обмен данными:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - операция завершена успешно;
//                    - "НеизвестныйИдентификатор" - неизвестный идентификатор;
//                    - "НеверныйФорматЗапроса" - неверный формат запроса;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "ФайлНеЗагружен" - при загрузке файлов возникли ошибки;
//                    - "НетФайловДляЗагрузки" - в сервисе нет файлов для обработки;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//    *СообщениеОбОшибке   - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *ОписаниеФайлаОбмена - Структура -содержит информацию о файле обмена:
//      **АдресФайла              - Строка - адрес файла обмена во временном хранилище;
//      **ИдентификаторФайла      - Строка - идентификатор файла обмена;
//      **ДополнительныеПараметры - Соответствие - дополнительные параметры внешней системы;
//      **ИдентификаторСистемы    - Строка - идентификатор внешней системы отправителя сообщения;
//      **ЕстьСледующий           - Булево - признак завершения загрузки;
//
Функция ФайлОбменаДанными(ИдентификаторНастройки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",           "");
	Результат.Вставить("СообщениеОбОшибке",   "");
	Результат.Вставить("ИнформацияОбОшибке",  "");
	Результат.Вставить("ОписаниеФайлаОбмена", ОписаниеФайлаОбмена());
	
	// 1. Получить описание сообщения обмена данными.
	РезультатОперации = ОписаниеФайлаОбменаДанными(ИдентификаторНастройки);
	
	Если РезультатОперации.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			Результат,
			РезультатОперации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат Результат;
	КонецЕсли;
	
	// 2. Загрузить файл обмена данными.
	РезультатЗагрузки = ЗагрузитьФайлОбмена(
		ИдентификаторНастройки,
		РезультатОперации.ОписаниеФайлаОбмена);
	
	Если РезультатЗагрузки.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			Результат,
			РезультатЗагрузки,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат Результат;
	КонецЕсли;
	
	// 3. Подготовка результата.
	Результат.ОписаниеФайлаОбмена = РезультатОперации.ОписаниеФайлаОбмена;
	Результат.ОписаниеФайлаОбмена.Удалить("URLФайла");
	
	Возврат Результат;
	
КонецФункции

// Отправляет подтверждение загрузки файла обмена в сервис обмена с внешними системами.
//
// Параметры:
//  ИдентификаторНастройки - Строка - идентификатор обмена данными на Портале 1С:ИТС;
//  ИдентификаторФайла     - Строка - идентификатор файла обмена на Портале 1С:ИТС.
//
// Возвращаемое значение:
//  Структура - содержит информацию о результатах изменения описания на Портале 1С:ИТС:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - операция завершена успешно;
//                    - "НеизвестныйИдентификатор" - неизвестный идентификатор;
//                    - "НеверныйФорматЗапроса" - неверный формат запроса;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//    *СообщениеОбОшибке   - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ПодтвердитьОбработкуФайлаОбменаДанными(ИдентификаторНастройки, ИдентификаторФайла) Экспорт
	
	// 1. Отправка подтверждения о загрузке файла в сервис.
	Возврат ПодтвердитьПолучениеФайлаОбмена(ИдентификаторНастройки, ИдентификаторФайла);
	
КонецФункции

// Создает таблицу с описанием настроенных обменов пользователя Портала 1С:ИТС.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит информацию, которая используется
//                    для получения информации настроенных обменах пользователя
//                    Портала 1С:ИТС.
//   *ИдентификаторСистемы   - Строка - идентификатор внешней системы в сервисе;
//   *ОписаниеСистемы        - Строка - краткое описание возможностей системы;
//   *ИдентификаторНастройки - Строка - зарегистрированных идентификатор обмена;
//
Функция ОписаниеНастроенныхОбменов() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НаименованиеСистемы",    ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("ИдентификаторНастройки", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	Результат.Колонки.Добавить("ОписаниеНастройки",      ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	
	Возврат Результат;
	
КонецФункции

// Возвращает имя события для журнала регистрации, которое используется для записи событий загрузки
// данных из внешних систем.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными с внешними системами.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаОбменаДанными(),
		443,
		НСтр("ru = 'Сервис обмена данными с внешними системами (ru)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнтерактивнаяРаботаССервисом

// Выполняет загрузку информации о внешних системах и определение списка доступных систем.
//
// Параметры:
//  ИдентификаторыСистем - Массив - идентификаторы внешних систем для которых необходимо
//                         получить информацию из сервиса.
//
// Возвращаемое значение:
//  Структура - содержит информацию о внешних системах с которыми возможно настроить обмен данными:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - операция завершена успешно;
//                    - "НеизвестныйИдентификатор" - неизвестный идентификатор;
//                    - "НеверныйФорматЗапроса" - неверный формат запроса;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//    *СообщениеОбОшибке   - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *ДанныеВнешнихСистем - ТаблицаЗначение - см. функцию ОписаниеВнешнихСистем.
//
Функция ДоступныеВнешниеСистемы(ИдентификаторыСистем = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",             "");
	Результат.Вставить("СообщениеОбОшибке",     "");
	Результат.Вставить("ИнформацияОбОшибке",    "");
	Результат.Вставить("ДанныеВнешнихСистем",   ОписаниеВнешнихСистем());
	
	// 1. Проверка доступности настройки.
	ПроверитьДоступностьНастройкиОбменаДанными();
	
	// 2. Получить описание всех систем из сервиса.
	РезультатОперации = ИнформацияОВнешнихСистемах();
	
	Если РезультатОперации.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			Результат,
			РезультатОперации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат Результат;
	КонецЕсли;
	
	// Формирование результата на основании данных сервиса.
	Если ИдентификаторыСистем = Неопределено Тогда
		Результат.ДанныеВнешнихСистем = РезультатОперации.ДанныеВнешнихСистем;
	Иначе
		Для Каждого ИдентификаторСистемы Из ИдентификаторыСистем Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторСистемы", ИдентификаторСистемы);
			
			НайденныеСтроки = РезультатОперации.ДанныеВнешнихСистем.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Результат.КодОшибки          = "НеизвестныйИдентификатор";
				Результат.СообщениеОбОшибке  = НСтр("ru = 'Не удалось получить информацию о внешней системе.
					|Обратитесь к администратору.'");
				Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Идентификатор внешней системы %1 не обнаружен в сервисе.'"),
					ИдентификаторСистемы);
				Возврат Результат;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(
				Результат.ДанныеВнешнихСистем.Добавить(),
				НайденныеСтроки[0]);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет создание новой настройки загрузки данных в фоновом задании.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для обновления;
//  АдресХранилища - Строка - адрес хранилища результат создания.
//
Процедура ПолучитьИдентификаторОбменДанными(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	// 1. Проверка доступности настройки.
	ПроверитьДоступностьНастройкиОбменаДанными();
	
	// 2. Получить описание всех систем из сервиса.
	Результат = ИдентификаторОбменДанными(
		ПараметрыПроцедуры.ИдентификаторСистемы,
		ПараметрыПроцедуры.ОписаниеНастройки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Выполняет загрузку информации о настроенных обменах данными с внешними системами.
//
// Возвращаемое значение:
//  Структура - содержит информацию о внешних системах с которыми возможно настроить обмен данными:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - операция завершена успешно;
//                    - "НеизвестныйИдентификатор" - неизвестный идентификатор;
//                    - "НеверныйФорматЗапроса" - неверный формат запроса;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//    *СообщениеОбОшибке      - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке     - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *НастройкиОбменаДанными - ТаблицаЗначение - см. функцию НастройкиОбменаДанными.
//
Функция ИдентификаторыОбменаДаннымиПользователяПортала() Экспорт
	
	// 1. Проверка доступности просмотра настроек.
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.'");
	КонецЕсли;
	
	// 2. Получить описание всех настроенных обменов данными.
	Возврат ИнформацияОНастроенныхОбменахДанными();
	
КонецФункции

// Выполняет удаление настройки обмена данными с внешними системами на Портале 1С:ИТС.
//
// Параметры:
//  ИдентификаторНастройки - Строка - идентификатор обмена данными на Портале 1С:ИТС.
//
// Возвращаемое значение:
//  Структура - содержит информацию о внешних системах с которыми возможно настроить обмен данными:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - операция завершена успешно;
//                    - "НеизвестныйИдентификатор" - неизвестный идентификатор;
//                    - "НеверныйФорматЗапроса" - неверный формат запроса;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//    *СообщениеОбОшибке      - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке     - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//
Функция УдалитьНастройкуОбменаДанными(ИдентификаторНастройки) Экспорт
	
	// 1. Проверка доступности удаление настройки обмена данными.
	Если  Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.'");
	КонецЕсли;
	
	// 2. Получить описание всех настроенных обменов данными.
	Возврат УдалитьИдентификаторОбменаДанными(ИдентификаторНастройки);
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийСервиса

////////////////////////////////////////////////////////////////////////////////
// Вызов операции sources/getAvailableList.

// Возвращает список описаний внешних систем, из которыми
// возможен обмен данными.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *Ошибка - Булево - Истина, если в не удалось получить информацию из сервиса;
//    *СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке - Строка - описание ошибки для администратора;
//    *ОписаниеВнешнихСистем - ТаблицаЗначений - см. функцию ОписаниеВнешнихСистем().
//
Функция ИнформацияОВнешнихСистемах()
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало получения информации о доступных внешних системах.'"),
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Ошибка",                Ложь);
	РезультатОперации.Вставить("КодОшибки",             "");
	РезультатОперации.Вставить("СообщениеОбОшибке",     "");
	РезультатОперации.Вставить("ИнформацияОбОшибке",    "");
	РезультатОперации.Вставить("ДанныеВнешнихСистем", ОписаниеВнешнихСистем());
	
	ПараметрыПодключения = ИнициализироватьПараметрыПодключения();
	
	URLОперации = URLОперацииСервиса("/sources/getAvailableList");
	
	Результат = ДанныеАутентификации(URLОперации);
	
	Если Результат.Ошибка Тогда
		РезультатОперации.Ошибка    = Истина;
		РезультатОперации.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = sourcesgetAvailableList(
		Результат.ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.Ошибка            = Истина;
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(НСтр("ru = 'Не удалось получить информацию о доступных внешних системах.'"));
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(РезультатОперации.СообщениеОбОшибке);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Техническая информация об ошибке:
				|При получении информации о доступных внешних системах сервис вернул ошибку.
				|URL: %1
				|Код ошибки: %2
				|Подробная информация:
				|%3'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке));
		
		РезультатОперации.ИнформацияОбОшибке = Новый ФорматированнаяСтрока(ЧастиСтрок);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ПрочитатьДанные_sourcesgetAvailableList(
		РезультатОтправки.Содержимое,
		РезультатОперации.ДанныеВнешнихСистем);
		
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено получение информации о внешних системах'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /sources/getAvailableList.
//
Функция sourcesgetAvailableList(ДанныеАутентификации, ДополнительныеПараметры)
	
	// {
	//    "authenticationInfo": {
	//            "login": "User",
	//            "password":"Pass",
	//            "authToken ":"Token"
	//    },
	//    "additionalParams" : {
	//        "key":"value"
	//    }
	// }
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /sources/getAvailableList.
//
Процедура ПрочитатьДанные_sourcesgetAvailableList(
		ТелоJSON,
		ДанныеВнешнихСистем)
	
	// Ответ сервиса:
	//
	// results – список источников внешних систем;
	// sourceNick – идентификатор внешней системы;
	// name – название внешней системы;
	// description - описание внешней системы;
	// schedule - расписание загрузки по умолчанию;
	// applicationsUrl - ссылка на внешнюю систему.
	//
	// {
	//    "results": [
	//            {
	//            "sourceNick": "nick",
	//            "name":"name",
	//            "description":"description",
	//            "schedule":"schedule"
	//            "applicationsUrl":"Url"
	//    }
	// ]
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса обмена данными с внешними системами:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1 Тогда
			
			Если ЧтениеОтвета.ТекущееЗначение = "sourceNick" Тогда
				ОписаниеСистемы = ДанныеВнешнихСистем.Добавить();
				ОписаниеСистемы.ИдентификаторСистемы = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "name" Тогда
				ОписаниеСистемы.Наименование = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "description" Тогда
				ОписаниеСистемы.ОписаниеСистемы = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "schedule" Тогда
				РасписаниеСтрокой = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
				ОписаниеСистемы.РасписаниеЗагрузки = РасписаниеЗагрузкиДанные(РасписаниеСтрокой);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "applicationUrl" Тогда
				ОписаниеСистемы.СсылкаНаВнешнююСистему = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /exchangeId/getNew.

// Возвращает идентификатор обмена данными, который был создан в сервисе обмена
// данными с внешними системами.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *КодОшибки - Булево  - Истина, если в не удалось получить информацию из сервиса;
//    *СообщениеОбОшибке   - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке  - Строка - описание ошибки для администратора;
//    *Идентификатор       - Строка - идентификатор обмена данными.
//
Функция ИдентификаторОбменДанными(ИдентификаторСистемы, ОписаниеНастройки)
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало получения идентификатора загрузки данных.'"),
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Ошибка",             Ложь);
	РезультатОперации.Вставить("КодОшибки",          "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	РезультатОперации.Вставить("Идентификатор",      "");
	
	ПараметрыПодключения = ИнициализироватьПараметрыПодключения();
	
	URLОперации = URLОперацииСервиса("/exchangeId/getNew");
	
	Результат = ДанныеАутентификации(URLОперации);
	
	Если Результат.Ошибка Тогда
		РезультатОперации.Ошибка    = Истина;
		РезультатОперации.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = exchangeIdgetNew(
		ИдентификаторСистемы,
		ОписаниеНастройки,
		Результат.ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(НСтр("ru = 'Не удалось получить идентификатор обмена данными.'"));
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(РезультатОперации.СообщениеОбОшибке);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Техническая информация об ошибке:
				|При получении идентификатора обмена данными сервис вернул ошибку.
				|URL: %1
				|Код ошибки: %2
				|Подробная информация:
				|%3'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке));
		
		РезультатОперации.ИнформацияОбОшибке = Новый ФорматированнаяСтрока(ЧастиСтрок);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ПрочитатьДанные_exchangeIdgetNew(
		РезультатОтправки.Содержимое,
		РезультатОперации.Идентификатор);
		
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено получение идентификатора обмена данными.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /exchangeId/getNew.
//
Функция exchangeIdgetNew(
		ИдентификаторСистемы,
		ОписаниеНастройки,
		ДанныеАутентификации,
		ДополнительныеПараметры)
	
	// {
	//    "sourceNick": "nick",
	//    "description ": "description ",
	//    "authenticationInfo": {
	//            "login": "User",
	//            "password":"Pass",
	//            "authToken ":"Token"
	//    },
	//    "additionalParams" : {
	//        "key":"value"
	//    }
	// }
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sourceNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторСистемы);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("description");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ОписаниеНастройки);
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /exchangeId/getNew.
//
Процедура ПрочитатьДанные_exchangeIdgetNew(ТелоJSON, Идентификатор)
	
	// Ответ сервиса:
	//
	// newExchangeId – идентификатор обмена данными;
	//
	// {
	//   "newExchangeId ": "Id"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса обмена данными с внешними системами:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ЧтениеОтвета.ТекущееЗначение = "newExchangeId" Тогда
			Идентификатор = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /exchangeId/getAvailableList.

// Возвращает список описаний внешних систем, с которыми
// возможен обмен данными.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *Ошибка - Булево - Истина, если в не удалось получить информацию из сервиса;
//    *СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке - Строка - описание ошибки для администратора;
//    *ОписаниеВнешнихСистем - ТаблицаЗначений - см. функцию ОписаниеВнешнихСистем().
//
Функция ИнформацияОНастроенныхОбменахДанными()
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало получения информации о настроенных обменах данными.'"),
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Ошибка",                 Ложь);
	РезультатОперации.Вставить("КодОшибки",              "");
	РезультатОперации.Вставить("СообщениеОбОшибке",      "");
	РезультатОперации.Вставить("ИнформацияОбОшибке",     "");
	РезультатОперации.Вставить("НастройкиОбменаДанными", ОписаниеНастроенныхОбменов());
	
	ПараметрыПодключения = ИнициализироватьПараметрыПодключения();
	
	URLОперации = URLОперацииСервиса("/exchangeId/getAvailableList");
	
	Результат = ДанныеАутентификации(URLОперации);
	
	Если Результат.Ошибка Тогда
		РезультатОперации.Ошибка    = Истина;
		РезультатОперации.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = exchangeIdgetAvailableList(
		Результат.ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.Ошибка            = Истина;
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(НСтр("ru = 'Не удалось получить информацию о настроенных обменах данными.'"));
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(РезультатОперации.СообщениеОбОшибке);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Техническая информация об ошибке:
				|При получении информации о настроенных обменах данными, сервис вернул ошибку.
				|URL: %1
				|Код ошибки: %2
				|Подробная информация:
				|%3'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке));
		
		РезультатОперации.ИнформацияОбОшибке = Новый ФорматированнаяСтрока(ЧастиСтрок);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ПрочитатьДанные_exchangeIdgetAvailableList(
		РезультатОтправки.Содержимое,
		РезультатОперации.НастройкиОбменаДанными);
		
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено получение информации о настроенных обменах данными.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /exchangeId/getAvailableList.
//
Функция exchangeIdgetAvailableList(ДанныеАутентификации, ДополнительныеПараметры)
	
	// {
	//    "authenticationInfo": {
	//            "login": "User",
	//            "password":"Pass",
	//            "authToken ":"Token"
	//    },
	//    "additionalParams" : {
	//        "key":"value"
	//    }
	// }
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /exchangeId/getAvailableList.
//
Процедура ПрочитатьДанные_exchangeIdgetAvailableList(
		ТелоJSON,
		НастройкиОбменаДанными)
	
	// Ответ сервиса:
	//
	// results – список настроенных обменов данными;
	// exchangeId – идентификатор настройки обмена данными;
	// sourceNick – идентификатор внешней системы;
	// description – пользовательское описание настройки обмена данными;
	//
	// {
	//    "results": [
	//            {
	//            "sourceNick": "nick",
	//            "exchangeId ":"Id",
	//            "description ":"description",
	//    }
	// ]
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса обмена данными с внешними системами:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1 Тогда
			
			Если ЧтениеОтвета.ТекущееЗначение = "exchangeId" Тогда
				ОписаниеСистемы = НастройкиОбменаДанными.Добавить();
				ОписаниеСистемы.ИдентификаторНастройки = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "name" Тогда
				ОписаниеСистемы.НаименованиеСистемы = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "description" Тогда
				ОписаниеСистемы.ОписаниеНастройки = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /exchangeId/delete.

// Выполняет удаление настройки обмена данными с внешними системами на Портале 1С:ИТС.
//
// Параметры:
//  ИдентификаторНастройки - Строка - идентификатор обмена данными на Портале 1С:ИТС.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *Ошибка - Булево - Истина, если в не удалось получить информацию из сервиса;
//    *СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке - Строка - описание ошибки для администратора.
//
Функция УдалитьИдентификаторОбменаДанными(ИдентификаторНастройки)
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало удаления настройки обмена данными.'"),
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки",              "");
	РезультатОперации.Вставить("СообщениеОбОшибке",      "");
	РезультатОперации.Вставить("ИнформацияОбОшибке",     "");
	РезультатОперации.Вставить("НастройкиОбменаДанными", ОписаниеНастроенныхОбменов());
	
	ПараметрыПодключения = ИнициализироватьПараметрыПодключения();
	
	URLОперации = URLОперацииСервиса("/exchangeId/delete");
	
	Результат = ДанныеАутентификации(URLОперации);
	
	Если Результат.Ошибка Тогда
		РезультатОперации.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = exchangeIddelete(
		ИдентификаторНастройки,
		Результат.ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(НСтр("ru = 'Не удалось удалить настройку обмена данными.'"));
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(РезультатОперации.СообщениеОбОшибке);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Техническая информация об ошибке:
				|При удалении настройки обмена данными сервис вернул ошибку.
				|URL: %1
				|Код ошибки: %2
				|Подробная информация:
				|%3'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке));
		
		РезультатОперации.ИнформацияОбОшибке = Новый ФорматированнаяСтрока(ЧастиСтрок);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено удаление настройки обмена данными.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /exchangeId/getAvailableList.
//
Функция exchangeIddelete(ИдентификаторНастройки, ДанныеАутентификации, ДополнительныеПараметры)
	
	// {
	//    "authenticationInfo": {
	//            "login": "User",
	//            "password":"Pass",
	//            "authToken ":"Token"
	//    },
	//    "exchangeId": "Id",
	//    "additionalParams" : {
	//        "key":"value"
	//    }
	// }
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("exchangeId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторНастройки);
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /exchangeId/updateDescription.

// Выполняет обновление пользовательского описания настройки на Портале 1С:ИТС.
//
// Параметры:
//  ИдентификаторНастройки - Строка - идентификатор обмена данными на Портале 1С:ИТС;
//  ОписаниеНастройки      - Строка - новое описание настройки обмена данными на Портале 1С:ИТС.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *КодОшибки - Строка - код ошибки сервиса обмена данными;
//    *СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке - Строка - описание ошибки для администратора.
//
Функция ОбновитьОписаниеНастройки(ИдентификаторНастройки, ОписаниеНастройки)
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало обновления описания настройки обмена данными.'"),
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки",              "");
	РезультатОперации.Вставить("СообщениеОбОшибке",      "");
	РезультатОперации.Вставить("ИнформацияОбОшибке",     "");
	
	ПараметрыПодключения = ИнициализироватьПараметрыПодключения();
	
	URLОперации = URLОперацииСервиса("/exchangeId/updateDescription");
	
	Результат = ДанныеАутентификации(URLОперации);
	
	Если Результат.Ошибка Тогда
		РезультатОперации.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = exchangeIdupdateDescription(
		ИдентификаторНастройки,
		ОписаниеНастройки,
		Результат.ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(НСтр("ru = 'Не удалось обновить описание настройки обмена данными.'"));
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(РезультатОперации.СообщениеОбОшибке);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Техническая информация об ошибке:
				|При обновлении описания настройки обмена данными сервис вернул ошибку.
				|URL: %1
				|Код ошибки: %2
				|Подробная информация:
				|%3'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке));
		
		РезультатОперации.ИнформацияОбОшибке = Новый ФорматированнаяСтрока(ЧастиСтрок);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено обновление описание настройки обмена данными.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /exchangeId/updateDescription.
//
Функция exchangeIdupdateDescription(
		ИдентификаторНастройки,
		ОписаниеНастройки,
		ДанныеАутентификации,
		ДополнительныеПараметры)
	
	// {
	//    "authenticationInfo": {
	//            "login": "User",
	//            "password":"Pass",
	//            "authToken ":"Token"
	//    },
	//    "exchangeId": "Id",
	//    "description": "description",
	//    "additionalParams" : {
	//        "key":"value"
	//    }
	// }
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("exchangeId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторНастройки);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("description");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ОписаниеНастройки);
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /exchangeId/updateSettings.

// Выполняет обновление пользовательского описания настройки на Портале 1С:ИТС.
//
// Параметры:
//  ИдентификаторНастройки - Строка - идентификатор обмена данными на Портале 1С:ИТС;
//  ОписаниеНастройки      - Строка - новое описание настройки обмена данными на Портале 1С:ИТС.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *КодОшибки - Строка - код ошибки сервиса обмена данными;
//    *СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке - Строка - описание ошибки для администратора.
//
Функция ОбновитьНастройкиОбмена(ИдентификаторНастройки, НастройкиОбмена)
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало обновления настроек обмена данными.'"),
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки",              "");
	РезультатОперации.Вставить("СообщениеОбОшибке",      "");
	РезультатОперации.Вставить("ИнформацияОбОшибке",     "");
	РезультатОперации.Вставить("НастройкиОбменаДанными", ОписаниеНастроенныхОбменов());
	
	ПараметрыПодключения = ИнициализироватьПараметрыПодключения();
	
	URLОперации = URLОперацииСервиса("/exchangeId/updateSettings");
	
	Результат = ДанныеАутентификации(URLОперации);
	
	Если Результат.Ошибка Тогда
		РезультатОперации.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = exchangeIdupdateSettings(
		ИдентификаторНастройки,
		НастройкиОбмена,
		Результат.ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(НСтр("ru = 'Не удалось обновить настройки обмена данными.'"));
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(РезультатОперации.СообщениеОбОшибке);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Техническая информация об ошибке:
				|При обновлении настроек обмена данными сервис вернул ошибку.
				|URL: %1
				|Код ошибки: %2
				|Подробная информация:
				|%3'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке));
		
		РезультатОперации.ИнформацияОбОшибке = Новый ФорматированнаяСтрока(ЧастиСтрок);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено обновление настройки обмена данными.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /exchangeId/updateSettings.
//
Функция exchangeIdupdateSettings(
		ИдентификаторНастройки,
		НастройкиОбмена,
		ДанныеАутентификации,
		ДополнительныеПараметры)
	
	// {
	//    "authenticationInfo": {
	//            "login": "User",
	//            "password":"Pass",
	//            "authToken ":"Token"
	//    },
	//    "exchangeId": "Id",
	//    "settingsForSource": "settings",
	//    "additionalParams" : {
	//        "key":"value"
	//    }
	// }
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("exchangeId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторНастройки);
	
	// Настройки будут записаны в виде строки в json.
	ЗаписьНастроек = Новый ЗаписьJSON;
	ЗаписьНастроек.УстановитьСтроку();
	
	ЗаписьНастроек.ЗаписатьНачалоОбъекта();
	Для каждого КлючЗначение Из НастройкиОбмена Цикл
		ЗаписьНастроек.ЗаписатьИмяСвойства(КлючЗначение.Ключ);
		ЗаписьНастроек.ЗаписатьЗначение(КлючЗначение.Значение);
	КонецЦикла;
	ЗаписьНастроек.ЗаписатьКонецОбъекта();
	
	НастройкиСтрокой = ЗаписьНастроек.Закрыть();
	
	// При записи строки json платформа автоматический выполняет экранирование
	// символов. Из строки будут удалены символы \n\r.
	НастройкиСтрокой = СтрЗаменить(НастройкиСтрокой, Символы.ВК, "");
	НастройкиСтрокой = СтрЗаменить(НастройкиСтрокой, Символы.ПС, "");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("settingsForSource");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(НастройкиСтрокой);
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /package/next.

// Возвращает описание сообщения обмена данными внешней системы.
//
// Параметры:
//  ИдентификаторНастройки - Строка - идентификатор обмена данными на Портале 1С:ИТС;
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *Ошибка - Булево     - Истина, если в не удалось получить информацию из сервиса;
//    *СообщениеОбОшибке   - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке  - Строка - описание ошибки для администратора;
//    *ОписаниеФайлаОбмена - Структура - см. функцию ОписаниеФайлаОбмена.
//
Функция ОписаниеФайлаОбменаДанными(ИдентификаторНастройки)
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало получения информации о файле обмена.'"),
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Ошибка",                Ложь);
	РезультатОперации.Вставить("КодОшибки",             "");
	РезультатОперации.Вставить("СообщениеОбОшибке",     "");
	РезультатОперации.Вставить("ИнформацияОбОшибке",    "");
	РезультатОперации.Вставить("ОписаниеФайлаОбмена",   ОписаниеФайлаОбмена());
	
	ПараметрыПодключения = ИнициализироватьПараметрыПодключения();
	
	URLОперации = URLОперацииСервиса("/package/next");
	Результат   = ДанныеАутентификации(URLОперации);
	
	Если Результат.Ошибка Тогда
		РезультатОперации.Ошибка    = Истина;
		РезультатОперации.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = packagenext(
		ИдентификаторНастройки,
		Результат.ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.Ошибка = Истина;
		
		Если РезультатОтправки.КодСостояния = 404 Тогда
			РезультатОперации.КодОшибки = "НетФайловДляЗагрузки";
			РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Отсутствуют файлы для загрузки.'");
			РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Отсутствуют файлы для загрузки.'");
			
			ЗаписатьИнформациюВЖурналРегистрации(
				Строка(РезультатОперации.ИнформацияОбОшибке),
				Ложь);
		Иначе
			РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
			РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
			
			ЧастиСтрок = Новый Массив;
			ЧастиСтрок.Добавить(НСтр("ru = 'Не удалось получить описание файла обмена.'"));
			ЧастиСтрок.Добавить(Символы.ПС);
			ЧастиСтрок.Добавить(РезультатОперации.СообщениеОбОшибке);
			ЧастиСтрок.Добавить(Символы.ПС);
			ЧастиСтрок.Добавить(Символы.ПС);
			ЧастиСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Техническая информация об ошибке:
					|При получении информации о файле обмена сервис вернул ошибку.
					|URL: %1
					|Код ошибки: %2
					|Подробная информация:
					|%3'"),
				URLОперации,
				РезультатОтправки.КодОшибки,
				РезультатОтправки.ИнформацияОбОшибке));
			
			РезультатОперации.ИнформацияОбОшибке = Новый ФорматированнаяСтрока(ЧастиСтрок);
			
			ЗаписатьИнформациюВЖурналРегистрации(
				Строка(РезультатОперации.ИнформацияОбОшибке),
				Истина);
		КонецЕсли;
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ПрочитатьДанные_packagenext(
		РезультатОтправки.Содержимое,
		РезультатОперации.ОписаниеФайлаОбмена);
		
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено получение информации о файле обмена'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /package/next.
//
Функция packagenext(ИдентификаторНастройки, ДанныеАутентификации, ДополнительныеПараметры)
	
	// {
	//    "authenticationInfo": {
	//            "login": "User",
	//            "password":"Pass",
	//            "authToken ":"Token"
	//    },
	//    "additionalParams" : {
	//        "key":"value"
	//    }
	// }
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("exchangeId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторНастройки);
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /package/next.
//
Процедура ПрочитатьДанные_packagenext(
		ТелоJSON,
		ОписаниеФайлаОбмена)
	
	// Ответ сервиса:
	//
	// results – список источников внешних систем;
	// sourceNick – идентификатор источника;
	// name – название источника;
	// createDate - дата создания файла пакета;
	// fileUrl - Url по которому можно скачать пакет;
	// paramsFromSource - дополнительные параметры внешней системы.
	// 
	//
	// {
	//    "results": [
	//            {
	//            "sourceNick": "nick",
	//            "name":"name",
	//            "createDate":"0001-01-01T00:00:00",
	//            "fileUrl":"Url",
	//            "paramsFromSource":["paramsFromSource"],
	//    }
	// ]
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса обмена данными с внешними системами:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			Если ЧтениеОтвета.ТекущееЗначение = "sourceNick" Тогда
				ОписаниеФайлаОбмена.ИдентификаторСистемы = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "packageUin" Тогда
				ОписаниеФайлаОбмена.ИдентификаторФайла = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "hasNext" Тогда
				ОписаниеФайлаОбмена.ЕстьСледующий = ЗначениеСвойстваJSON(ЧтениеОтвета, Ложь);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "createDate" Тогда
				ОписаниеФайлаОбмена.ДатаСоздания = ЗначениеСвойстваJSON(ЧтениеОтвета, Дата("00010101"));
				Если ЗначениеЗаполнено(ОписаниеФайлаОбмена.ДатаСоздания) Тогда
					ОписаниеФайлаОбмена.ДатаСоздания = СтрЗаменить(ОписаниеФайлаОбмена.ДатаСоздания, "-", "");
					ОписаниеФайлаОбмена.ДатаСоздания = СтрЗаменить(ОписаниеФайлаОбмена.ДатаСоздания, "–", "");
					ОписаниеФайлаОбмена.ДатаСоздания = СтрЗаменить(ОписаниеФайлаОбмена.ДатаСоздания, ":", "");
					ОписаниеФайлаОбмена.ДатаСоздания = СтрЗаменить(ОписаниеФайлаОбмена.ДатаСоздания, "T", "");
					ОписаниеФайлаОбмена.ДатаСоздания = Дата(ОписаниеФайлаОбмена.ДатаСоздания);
				КонецЕсли;
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "fileUrl" Тогда
				ОписаниеФайлаОбмена.URLФайла = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "paramsFromSource" Тогда
				Сч = 0;
				Пока ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.КонецМассива Цикл
					Сч = Сч + 1;
					ЧтениеОтвета.Прочитать();
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Null Тогда
						Прервать;
					КонецЕсли;
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
						И ЧтениеОтвета.ТекущееЗначение = "key" Тогда
						Ключ     = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
						ЧтениеОтвета.Прочитать();
						Значение = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
						ОписаниеФайлаОбмена.ДополнительныеПараметры.Вставить(Ключ, Значение);
					КонецЕсли;
					Если Сч > 10000 Тогда
						ВызватьИсключение НСтр("ru = 'Неверный формат ответа.'");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ХостСервиса  = ХостСервисаОбменаДанными();
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ОписаниеФайлаОбмена.URLФайла);
	Если Прав(НРег(СокрЛП(СтруктураURI.Хост)), 6) <> Прав(НРег(СокрЛП(ХостСервиса)), 6) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Неверный адрес файла обмена данными.'");
		ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /package/download/{packageUin}.

// Загружает файл обмена из сервиса Портала 1С:ИТС.
//
// Параметры:
//  ИдентификаторНастройки - Строка - идентификатор обмена данными на Портале 1С:ИТС;
//  ОписаниеФайлаОбмена    - Структура - см. функцию ОписаниеФайлаОбмена.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *Ошибка             - Булево - Истина, если в не удалось получить информацию из сервиса;
//    *СообщениеОбОшибке  - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке - Строка - описание ошибки для администратора;
//
Функция ЗагрузитьФайлОбмена(ИдентификаторНастройки, ОписаниеФайлаОбмена)
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение файла обмена данными: %1'"),
				ОписаниеФайлаОбмена.URLФайла),
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Ошибка",                Ложь);
	РезультатОперации.Вставить("КодОшибки",             "");
	РезультатОперации.Вставить("СообщениеОбОшибке",     "");
	РезультатОперации.Вставить("ИнформацияОбОшибке",    "");
	
	ПараметрыПодключения = ИнициализироватьПараметрыПодключения();
	
	URLОперации = ОписаниеФайлаОбмена.URLФайла;
	Результат   = ДанныеАутентификации(URLОперации);
	
	Если Результат.Ошибка Тогда
		РезультатОперации.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = packagedownload(
		ИдентификаторНастройки,
		Результат.ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 2);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = КодОшибкиФайлНеЗагружен();
		РезультатОперации.Ошибка            = Истина;
		РезультатОперации.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении файла обмена %1: 
				|%2'"),
			ОписаниеФайлаОбмена.ИдентификаторФайла,
			РезультатОтправки.СообщениеОбОшибке);;
		
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(НСтр("ru = 'Не удалось получить файла обмена.'"));
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(РезультатОперации.СообщениеОбОшибке);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Техническая информация об ошибке:
				|При получении файла обмена сервис вернул ошибку.
				|URL: %1
				|Код ошибки: %2
				|Подробная информация:
				|%3'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке));
		
		РезультатОперации.ИнформацияОбОшибке = Новый ФорматированнаяСтрока(ЧастиСтрок);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ОписаниеФайлаОбмена.АдресФайла = ПоместитьВоВременноеХранилище(РезультатОтправки.Содержимое);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено получение файла обмена данными.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /package/download/{packageUin}.
//
Функция packagedownload(ИдентификаторНастройки, ДанныеАутентификации, ДополнительныеПараметры)
	
	// {
	//    "authenticationInfo": {
	//            "login": "User",
	//            "password":"Pass",
	//            "authToken ":"Token"
	//    },
	//    "additionalParams" : {
	//        "key":"value"
	//    }
	// }
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("exchangeId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторНастройки);
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /package/confirm.

// Выполняет отправляет подтверждение загрузки файла обмена на Портал 1С:ИТС.
//
// Параметры:
//  ИдентификаторНастройки - Строка - идентификатор обмена данными на Портале 1С:ИТС;
//  ИдентификаторФайла      - Строка - идентификатор файла обмена в сервисе;
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *Ошибка - Булево - Истина, если в не удалось получить информацию из сервиса;
//    *СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке - Строка - описание ошибки для администратора.
//
Функция ПодтвердитьПолучениеФайлаОбмена(ИдентификаторНастройки, ИдентификаторФайла)
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало отправки подтверждения загрузки файла.'"),
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки",              "");
	РезультатОперации.Вставить("СообщениеОбОшибке",      "");
	РезультатОперации.Вставить("ИнформацияОбОшибке",     "");
	
	ПараметрыПодключения = ИнициализироватьПараметрыПодключения();
	
	URLОперации = URLОперацииСервиса("/package/confirm");
	
	Результат = ДанныеАутентификации(URLОперации);
	
	Если Результат.Ошибка Тогда
		РезультатОперации.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = packageconfirm(
		ИдентификаторНастройки,
		ИдентификаторФайла,
		Результат.ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(НСтр("ru = 'Не удалось отправить подтверждение загрузки файла обмена.'"));
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(РезультатОперации.СообщениеОбОшибке);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Техническая информация об ошибке:
				|При отправке подтверждения загрузки файла сервис вернул ошибку.
				|URL: %1
				|Код ошибки: %2
				|Подробная информация:
				|%3'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке));
		
		РезультатОперации.ИнформацияОбОшибке = Новый ФорматированнаяСтрока(ЧастиСтрок);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершена отправка подтверждения о загрузке файла.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /package/confirm.
//
Функция packageconfirm(
		ИдентификаторНастройки,
		ИдентификаторФайла,
		ДанныеАутентификации,
		ДополнительныеПараметры)
	
	// {
	//    "authenticationInfo": {
	//            "login": "User",
	//            "password":"Pass",
	//            "authToken ":"Token"
	//    },
	//    "exchangeId": "Id",
	//    "packageUin": "uin",
	//    "additionalParams" : {
	//        "key":"value"
	//    }
	// }
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("exchangeId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторНастройки);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("packageUin");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторФайла);
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Создает расписание регламентного задания на основании настроек сервиса.
//
// Параметры:
//  РасписаниеСтрокой  - Строка - параметры расписания в формате JSON
//
// Возвращаемое значение:
//  РасписаниеРегламентногоЗадания - новое расписание регламентного задания.
//
Функция РасписаниеЗагрузкиДанные(РасписаниеСтрокой)
	
	ПериодПовтора    = 0;
	
	// frequencyInDays - количества дней между запусками регламентного задания.
	//
	// {
	//  "frequencyInDays": 10
	// }
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(РасписаниеСтрокой);
	Пока ЧтениеОтвета.Прочитать() Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ЧтениеОтвета.ТекущееЗначение = "frequencyInDays" Тогда
			ПериодПовтора = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Чтобы не создавать пиковых нагрузок на сервис,
	// время загрузки будет выбрано случайным образом
	// между 00:00 и 24:00.
	Генератор = Новый ГенераторСлучайныхЧисел;
	
	РасписаниеЗагрузки = Новый РасписаниеРегламентногоЗадания;
	РасписаниеЗагрузки.ПериодПовтораДней = ПериодПовтора;
	РасписаниеЗагрузки.ВремяНачала       = Дата("00010101") + Генератор.СлучайноеЧисло(0, 60*60*24); // 1 раз в день.
	
	Возврат РасписаниеЗагрузки;
	
КонецФункции

// Создает таблицу с описанием доступных обменов данными.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит информацию, которая используется
//                    для получения информации о внешних системах.
//   *ИдентификаторСистемы   - Строка - идентификатор внешней системы в сервисе;
//   *Наименование           - Строка - пользовательское наименование системы;
//   *ОписаниеСистемы        - Строка, ФорматированнаяСтрока - краткое описание возможностей системы;
//   *СсылкаНаВнешнююСистему - Строка - ссылка для перехода в внешнюю систему;
//   *РасписаниеЗагрузки     - РасписаниеРегламентногоЗадания - расписание регламентного задания по умолчанию;
//
Функция ОписаниеВнешнихСистем()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИдентификаторСистемы",   ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Результат.Колонки.Добавить("Наименование",           ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("ОписаниеСистемы",        ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	Результат.Колонки.Добавить("СсылкаНаВнешнююСистему", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	Результат.Колонки.Добавить("РасписаниеЗагрузки",     Новый ОписаниеТипов("РасписаниеРегламентногоЗадания"));
	
	Возврат Результат;
	
КонецФункции

// Создает структуру с описанием файла обмена.
//
// Возвращаемое значение:
//  Структура - содержит информацию о файле обмена:
//    *ОписаниеФайлаОбмена     - Структура - содержит описание файла обмена:
//    *АдресФайла              - Строка - адрес файла обмена во временном хранилище;
//    *ИдентификаторФайла      - Строка - идентификатор файла обмена в сервисе;
//    *ДополнительныеПараметры - Соответствие - дополнительные параметры внешней системы;
//    *ИдентификаторСистемы    - Строка - идентификатор внешней системы отправителя сообщения;
//    *ДоступныеОбъекты        - Массив - список объектов, которые могут быть загружены из внешней системы;
//    *ЕстьСледующий           - Булево - признак завершения загрузки;
//
Функция ОписаниеФайлаОбмена()
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("ИдентификаторФайла",      "");
	ОписаниеФайла.Вставить("АдресФайла",              "");
	ОписаниеФайла.Вставить("ДатаСоздания",            Дата("00010101"));
	ОписаниеФайла.Вставить("ДополнительныеПараметры", Новый Соответствие);
	ОписаниеФайла.Вставить("ИдентификаторСистемы",    "");
	ОписаниеФайла.Вставить("ДоступныеОбъекты",        "");
	ОписаниеФайла.Вставить("ЕстьСледующий",           Ложь);
	ОписаниеФайла.Вставить("URLФайла",                "");
	
	Возврат ОписаниеФайла;
	
КонецФункции

// Определяет по коду состояния тип ошибку сервиса.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ПереопределитьКодОшибкиСервиса(КодСостояния)
	
	Если КодСостояния = 200 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 400 Тогда
		Возврат "НеверныйФорматЗапроса";
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат "НеизвестныйИдентификатор";
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат КодОшибкиНеверныйЛогинИлиПароль();
	ИначеЕсли КодСостояния = 429 Тогда
		Возврат "ПревышеноКоличествоПопыток";
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат "СервисВременноНеДоступен";
	ИначеЕсли КодСостояния = 500
		Или КодСостояния = 501
		Или КодСостояния = 502
		Или КодСостояния > 503 Тогда
		Возврат "ОшибкаСервиса";
	ИначеЕсли КодСостояния = 0 Тогда
		Возврат "ОшибкаПодключения";
	Иначе
		Возврат "НеизвестнаяОшибка";
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. процедуру
//              ПереопределитьКодОшибкиСервиса.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователю(КодОшибки)
	
	Если КодОшибки = "НеверныйФорматЗапроса" Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйЛогинИлиПароль() Тогда
		Возврат НСтр("ru = 'Ошибка авторизации на Портале 1С:ИТС.
			|Подробнее см. в журнале регистрации.'");
	ИначеЕсли КодОшибки = "НеизвестныйИдентификатор" Тогда
		Возврат НСтр("ru = 'Идентификатор обмена данными не найден на Портале 1С:ИТС.
			|Подробнее см. в журнале регистрации.'");
	ИначеЕсли КодОшибки = "ПревышеноКоличествоПопыток" Тогда
		Возврат НСтр("ru = 'Превышено количество попыток ввода логина и пароля.
			|Проверьте правильность данных авторизации и повторите
			|попытку через 30 минут.'");
	ИначеЕсли КодОшибки = "СервисВременноНеДоступен" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису обмена данными с внешними системами.
			|Сервис временно недоступен. Повторите попытку подключения позже.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса" Тогда
		Возврат НСтр("ru = 'Ошибка работы с сервисом обмена данными с внешними системами.'");
	ИначеЕсли КодОшибки = "ОшибкаПодключения" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису обмена данными с внешними системами.'");
	ИначеЕсли КодОшибки = "НеизвестнаяОшибка" Тогда
		Возврат НСтр("ru = 'Неизвестная ошибка при подключении к сервису.'");;
	КонецЕсли;
	
КонецФункции

// Создает структуру настроек подключения к сервису обмена данными с внешними системами.
//
Функция ИнициализироватьПараметрыПодключения()
	
	ПараметрыОбмена = Новый Структура;
	ПараметрыОбмена.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	
	Возврат ПараметрыОбмена;
	
КонецФункции

// Определяет значение свойства из чтения JSON.
//
// Параметры:
//  ЧтениеОбъектаJSON    - ЧтениеJSON - чтение JSON для определения значения;
//  ЗначениеПоУмолчанию  - Неопределено, Строка, Число, Булево - определяет
//                         значение по умолчанию.
//
// Возвращаемое значение:
//  Неопределено, Строка, Число, Булево - значение.
//
Функция ЗначениеСвойстваJSON(ЧтениеОбъектаJSON, ЗначениеПоУмолчанию = Неопределено)
	
	ИмяСвойства = ЧтениеОбъектаJSON.ТекущееЗначение;
	
	ЧтениеОбъектаJSON.Прочитать();
	Если ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
		Возврат СокрЛП(ЧтениеОбъектаJSON.ТекущееЗначение);
	ИначеЕсли ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Число
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
		Возврат ЧтениеОбъектаJSON.ТекущееЗначение;
	ИначеЕсли ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Null
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Ничего Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось прочитать значение свойства %1.
				|Некорректный тип значения свойства (%2).'"),
			ИмяСвойства,
			Строка(Строка(ЧтениеОбъектаJSON.ТипТекущегоЗначения)));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

// Возвращает логин и пароль Интернет-поддержки или тикет аутентификации.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//              аутентификации пользователя Интернет-поддержки:
//    *ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка               - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификации(URLОперации)
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеАутентификации", Новый Структура);
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLОперации);
		
		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			Результат.ДанныеАутентификации.Вставить("Тикет", РезультатПолученияТикета.Тикет);
		Иначе
			Результат.Ошибка = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			ПодробнаяИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось вызвать операцию %1.
						|Не удалось выполнить аутентификацию.
						|%2'"),
					URLОперации,
					РезультатПолученияТикета.ИнформацияОбОшибке);
			ЗаписатьИнформациюВЖурналРегистрации(
				ПодробнаяИнформацияОбОшибке,
				Истина);
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Результат.ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Для работы с сервисом обмена данными с внешними системами 
					|необходимо подключить Интернет-поддержку пользователей.'");
			ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в запись JSON данные аутентификации.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//                           добавить данные аутентификации;
//  ДанныеАутентификации   - Структура - параметры аутентификации пользователя
//                         Интернет-поддержки. См. ДанныеАутентификации().
//
Процедура ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации)
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authenticationInfo");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authToken");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Тикет);
		
	Иначе
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
		
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Проверяет права доступа на добавление настройки обмена данными .
// В БП проверка выполняется до вызова кода этого модуля.
//
Процедура ПроверитьДоступностьНастройкиОбменаДанными()
	
КонецПроцедуры

// Определяет URL для вызова сервиса обмена данными с внешними системами.
//
// Параметры:
//  Операция  - Строка - путь к ресурсу.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервиса(Операция)
	
	Возврат "https://"
		+ ХостСервисаОбменаДанными()
		+ "/public-api"
		+ Операция;
	
КонецФункции

// Определяет хост для вызова сервиса обмена данными с внешними системами.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаОбменаДанными()
	
	Возврат "package-transfer-service.1c.ru";
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка".
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке, Ошибка = Истина)
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Возвращает код ошибки "НеверныйЛогинИлиПароль".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйЛогинИлиПароль()
	
	Возврат "НеверныйЛогинИлиПароль";
	
КонецФункции

// Возвращает код ошибки "ФайлНеЗагружен".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиФайлНеЗагружен()
	
	Возврат "ФайлНеЗагружен";
	
КонецФункции

#КонецОбласти

#КонецОбласти
