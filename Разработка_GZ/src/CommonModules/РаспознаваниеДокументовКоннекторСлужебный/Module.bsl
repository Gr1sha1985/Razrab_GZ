#Область СлужебныеПроцедурыИФункции

#Область Команды

#Область Авторизация

// Описание:
// Выполнить авторизацию в сервисе распознавания используя логин и праль пилотной программы.
//
// Параметры:
//  Логин - Строка
//  Пароль - Строка
//  Область - Структура
//  ИдентификаторИБ - Строка?
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * ИдентификаторИБ  Строка
//   * ТокенДоступа - Строка
//   * Состояние - Строка - "Активирован" или "Ожидает"
//
Функция ВыполнитьАвторизациюПоЛогинуПаролю(Логин, Пароль, Область, ИдентификаторИБ = Неопределено) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("login", Логин);
	Данные.Вставить("password", Пароль);
	Данные.Вставить("scope", РаспознаваниеДокументовСериализацияСлужебный.JsonDump(Область));
	Данные.Вставить("client_id", ИдентификаторИБ);
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/users_auth";
	КомандаСервиса.Метод = "POST";
	КомандаСервиса.Заголовки.Вставить("Content-Type", "application/json");
	КомандаСервиса.Заголовки.Вставить("Charset", "utf-8");
	КомандаСервиса.Данные = РаспознаваниеДокументовСериализацияСлужебный.JsonDump(Данные);
	
	Возврат ВыполнитьКомандуСервисаАвторизации(КомандаСервиса);
	
КонецФункции

// Описание:
// Выполнить авторизацию в сервисе распознавания используя тикет Портала 1С:ИСТ.
//
// Параметры:
//  Тикет - Строка
//  Область - Структура
//  ИдентификаторИБ - Строка?
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * ИдентификаторИБ  Строка
//   * ТокенДоступа - Строка
//   * Состояние - Строка - "Активирован" или "Ожидает"
//
Функция ВыполнитьАвторизациюПоТикетуИТС(Тикет, Область, ИдентификаторИБ = Неопределено) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("ticket", Тикет);
	Данные.Вставить("scope", РаспознаваниеДокументовСериализацияСлужебный.JsonDump(Область));
	Данные.Вставить("client_id", ИдентификаторИБ);
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/users_its";
	КомандаСервиса.Метод = "POST";
	КомандаСервиса.Заголовки.Вставить("Content-Type", "application/json");
	КомандаСервиса.Заголовки.Вставить("Charset", "utf-8");
	КомандаСервиса.Данные = РаспознаваниеДокументовСериализацияСлужебный.JsonDump(Данные);
	
	Возврат ВыполнитьКомандуСервисаАвторизации(КомандаСервиса);
	
КонецФункции

Функция ВыполнитьКомандуСервисаАвторизации(КомандаСервиса)
	
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	
	Если РезультатКоманды = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка при обращении к сервису распознавания.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если РезультатКоманды.КодСостояния <> КодСостояния_200_ОК()
		И РезультатКоманды.КодСостояния <> КодСостояния_202_Accepted() Тогда
		
		Если РезультатКоманды.КодСостояния = КодСостояния_400_BadRequest() Тогда
			ТекстОшибки = НСтр("ru = 'Неверный логин или пароль.'");
		ИначеЕсли ТипЗнч(РезультатКоманды.ДесериализованноеЗначение) = Тип("Соответствие") Тогда
			ТекстОшибки = РезультатКоманды.ДесериализованноеЗначение.Получить("message");
		Иначе
			ТекстОшибки = НСтр("ru = 'Ошибка при авторизации в сервисе распознавания.'");
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Состояние = XMLСтрока(РезультатКоманды.ДесериализованноеЗначение.Получить("status"));
	Если Состояние = "pending" Тогда
		Состояние = "Ожидает";
	Иначе
		Состояние = "Активирован";
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторИБ", XMLСтрока(РезультатКоманды.ДесериализованноеЗначение.Получить("client_id")));
	Результат.Вставить("ТокенДоступа", XMLСтрока(РезультатКоманды.ДесериализованноеЗначение.Получить("session_id")));
	Результат.Вставить("Состояние", Состояние);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Описание:
// Выполнить проверку состояния активации учетной записи связанной с Порталом 1С:ИТС.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * Состояние - Строка - "Активирован" или "Ожидает"
//
Функция СостояниеАктивацииУчетнойЗаписи() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Состояние", "Ожидает");
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/user_status";
	КомандаСервиса.ОстатолосьПопыток = 0;
	
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	
	Если РезультатКоманды = Неопределено
		Или (РезультатКоманды.КодСостояния <> КодСостояния_200_ОК()
		И РезультатКоманды.КодСостояния <> КодСостояния_202_Accepted()) Тогда
		
		Возврат Новый ФиксированнаяСтруктура(Результат);
	КонецЕсли;
	
	Состояние = XMLСтрока(РезультатКоманды.ДесериализованноеЗначение.Получить("status"));
	Если Состояние = "pending" Тогда
		Состояние = "Ожидает";
	Иначе
		Состояние = "Активирован";
	КонецЕсли;
	
	Результат.Состояние = Состояние;
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

#КонецОбласти

#Область ЗадлачиРаспознавания

Функция СоздатьНовуюЗадачу(Данные) Экспорт
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/ocr/models/" + НомерМодели() + "/new_task?timeout=0&async=1";
	КомандаСервиса.Метод = "POST";
	КомандаСервиса.Заголовки.Вставить("Content-Type", "application/json");
	КомандаСервиса.Заголовки.Вставить("Charset", "utf-8");
	КомандаСервиса.Данные = РаспознаваниеДокументовСериализацияСлужебный.JsonDump(Данные);
	
	Возврат ВыполнитьКомандуСервиса(КомандаСервиса);
	
КонецФункции

Функция ПолучитьРезультатПоИдентификатору(ИдентификаторЗадания) Экспорт
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/ocr/models/" + НомерМодели() + "/result/" + ИдентификаторЗадания;
	
	Возврат ВыполнитьКомандуСервиса(КомандаСервиса);
	
КонецФункции

Функция ПолучитьСведенияОФайлеССервера(ИдентификаторФайла) Экспорт
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/ocr/file_info/" + ИдентификаторФайла;
	
	Возврат ВыполнитьКомандуСервиса(КомандаСервиса);
	
КонецФункции

Функция ЗагрузкаИзображенияПоАдресу(АдресURL, Изображение) Экспорт
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + АдресURL;
	КомандаСервиса.Метод = "POST";
	КомандаСервиса.Заголовки.Вставить("Content-Type", "application/octet-stream");
	КомандаСервиса.Данные = Изображение;
	
	Возврат ВыполнитьКомандуСервиса(КомандаСервиса);
	
КонецФункции

Функция ПолучитьИдентификаторыЗаданий(ТокенАвторизации) Экспорт
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/users/" + ТокенАвторизации + "/tasks";
	
	Возврат ВыполнитьКомандуСервиса(КомандаСервиса);
	
КонецФункции

Функция ТекстОшибкиПоКоду(КодОшибки) Экспорт
	
	Если КодОшибки = 9 Тогда
		Результат = НСтр("ru = 'Не поддерживаемый формат файла или поврежденное изображение. Поддерживаются: tif, jpeg, png, bmp, zip, rar, 7z, pdf, xls. xlsx.'");
	ИначеЕсли КодОшибки = 10 Тогда
		Результат = НСтр("ru = 'Не удалось выполнить распознавание документа.'");
	ИначеЕсли КодОшибки = 11 Тогда
		Результат = НСтр("ru = 'Не удалось определить тип распознаваемого документа.'");
	ИначеЕсли КодОшибки = 12 Тогда
		Результат = НСтр("ru = 'Качество изображения слишком низкое.'");
	ИначеЕсли КодОшибки = 13 Тогда
		Результат = НСтр("ru = 'Качество изображения слишком низкое или изображение не является документом.'");
	ИначеЕсли КодОшибки = 20 Тогда
		Результат = НСтр("ru = 'Ошибка многостраничного документа: Не удалось определить порядок страниц.'");
	ИначеЕсли КодОшибки = 21 Тогда
		Результат = НСтр("ru = 'Ошибка многостраничного документа: Верхний колонтитул не обнаружен.'");
	ИначеЕсли КодОшибки = 22 Тогда
		Результат = НСтр("ru = 'Ошибка многостраничного документа: Нижний колонтитул не обнаружен.'");
	ИначеЕсли КодОшибки = 23 Тогда
		Результат = НСтр("ru = 'Ошибка многостраничного документа: Страница не принадлежит ни одному из найденных документов.'");
	ИначеЕсли КодОшибки = 50 Тогда
		Результат = НСтр("ru = 'Не удалось сформировать json.'");
	ИначеЕсли КодОшибки = 60 Тогда
		Результат = НСтр("ru = 'Ошибка нетипового документа: Не удалось обработать как нетипивой документ.'");
	ИначеЕсли КодОшибки = 61 Тогда
		Результат = НСтр("ru = 'Ошибка нетипового документа: Не удалось определить тип распознаваемого документа.'");
	ИначеЕсли КодОшибки = 62 Тогда
		Результат = НСтр("ru = 'Ошибка нетипового документа: Ошибка анализа документа.'");
	ИначеЕсли КодОшибки = 63 Тогда
		Результат = НСтр("ru = 'Ошибка нетипового документа: Обработка нетипового документа без правильной нетиповой конфигурации не удалась.'");
	ИначеЕсли КодОшибки = 71 Тогда
		Результат =
			НСтр("ru = 'Не хватило средств на счете для распознавания документов.
			           |Пожалуйста, пополните баланс и нажмите ""Отправить повторно"", чтобы отправить файлы на распознавание еще раз.'");
	Иначе
		Результат = НСтр("ru = 'Произошла неизвестная ошибка.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбратнаяСвязь

Функция ПередатьОбратнуюСвязь(ИдентификаторРезультата, Данные) Экспорт
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/ocr/feedback/" + ИдентификаторРезультата;
	КомандаСервиса.Метод = "POST";
	КомандаСервиса.Заголовки.Вставить("Content-Type", "application/json");
	КомандаСервиса.Заголовки.Вставить("Charset", "utf-8");
	КомандаСервиса.Данные = РаспознаваниеДокументовСериализацияСлужебный.JsonDump(Данные);
	
	Возврат ВыполнитьКомандуСервиса(КомандаСервиса);
	
КонецФункции

#КонецОбласти

#Область МобильноеПриложение

// Описание:
// Список подключенных мобильных приложений к текущему приложению.
// 
// Возвращаемое значение:
//  ФиксированныйМассив Из ФиксированнаяСтруктура:
//   * Идентификатор  Строка
//   * Имя - Строка
//   * ДатаПоследнейАктивности - Дата
//
Функция ПодключенныеМобильныеПриложения() Экспорт
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/users/sub_clients";
	
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор");
	Результат.Колонки.Добавить("Имя");
	Результат.Колонки.Добавить("ДатаПоследнейАктивности");
	
	Если РезультатКоманды = Неопределено Или РезультатКоманды.КодСостояния <> КодСостояния_200_ОК() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Элемент Из РезультатКоманды.ДесериализованноеЗначение Цикл
		
		ОписаниеМобильногоПриложения = Новый Структура;
		ОписаниеМобильногоПриложения.Вставить("Идентификатор", Элемент["sub_client_id"]);
		ОписаниеМобильногоПриложения.Вставить("Имя", Элемент["sub_client_name"]);
		ОписаниеМобильногоПриложения.Вставить("ДатаПоследнейАктивности",
			ПрочитатьДатуJSON(Элемент["last_activity"], ФорматДатыJSON.ISO));
		
		Строка = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ОписаниеМобильногоПриложения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Описание:
// Выполняет регистрацию нового мобильного приложения к текущему приложению и задает ему переданное имя.
// 
// Параметры:
//  Имя - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция ЗарегистрироватьМобильноеПриложение(Имя) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("sub_client_name", Имя);
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/users/sub_clients";
	КомандаСервиса.Метод = "POST";
	КомандаСервиса.Заголовки.Вставить("Content-Type", "application/json");
	КомандаСервиса.Заголовки.Вставить("Charset", "utf-8");
	КомандаСервиса.Данные = РаспознаваниеДокументовСериализацияСлужебный.JsonDump(Данные);
	
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	
	Если РезультатКоманды = Неопределено Или РезультатКоманды.КодСостояния <> КодСостояния_200_ОК() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при регистрации мобильного приложения.'");
	КонецЕсли;
	
	Возврат XMLСтрока(РезультатКоманды.ДесериализованноеЗначение);
	
КонецФункции

// Описание:
// Отключает выбранное мобильное приложение от текущего приложения.
// 
// Параметры:
//  Идентификатор - Строка
//
Процедура ОтключитьМобильноеПриложения(Идентификатор) Экспорт
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/users/sub_clients/" + Идентификатор;
	КомандаСервиса.Метод = "DELETE";
	
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	
	Если РезультатКоманды = Неопределено Или РезультатКоманды.КодСостояния <> КодСостояния_200_ОК() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при отключении мобильного приложения.'");
	КонецЕсли;
	
КонецПроцедуры

// Описание:
// Переименовывает выбранное мобильное приложение для текущего приложения.
// 
// Параметры:
//  Идентификатор - Строка
//  Имя - Строка
//
Процедура ПереименоватьМобильноеПриложение(Идентификатор, Имя) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("sub_client_name", Имя);
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/users/sub_clients/" + Идентификатор;
	КомандаСервиса.Метод = "PUT";
	КомандаСервиса.Заголовки.Вставить("Content-Type", "application/json");
	КомандаСервиса.Заголовки.Вставить("Charset", "utf-8");
	КомандаСервиса.Данные = РаспознаваниеДокументовСериализацияСлужебный.JsonDump(Данные);
	
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	
	Если РезультатКоманды = Неопределено Или РезультатКоманды.КодСостояния <> КодСостояния_200_ОК() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при переименовании мобильного приложения.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Биллинг

// Описание:
// Проверяет является ли текущий пользователь распознавания участником пилотной программы.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * УчастникПилотнойПрограммы - Булево
//   * ДатаОкончания - Дата
//
Функция ЭтоУчастникПилотнойПрограммы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("УчастникПилотнойПрограммы", Ложь);
	Результат.Вставить("ДатаОкончания", '00010101');
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/users/pilot_expiration";
	
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	
	Если РезультатКоманды = Неопределено Или РезультатКоманды.КодСостояния <> КодСостояния_200_ОК() Тогда
		Возврат Новый ФиксированнаяСтруктура(Результат);
	КонецЕсли;
	
	Результат.УчастникПилотнойПрограммы = Не РезультатКоманды.ДесериализованноеЗначение["is_its_user"];
	
	ДатаОкончания = РезультатКоманды.ДесериализованноеЗначение["expiration_date"];
	Если ДатаОкончания <> Неопределено Тогда
		Результат.ДатаОкончания = ПрочитатьДатуJSON(ДатаОкончания, ФорматДатыJSON.ISO);
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Описание:
// Проверяет является ли текущий пользователь распознавания участником пилотной программы.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * УчастникПилотнойПрограммы - Булево
//   * ДатаОтключения - Дата
//   * Баланс - Число
//   * ИспользованоСегодня - Число
//
Функция ТекущийБаланс() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("УчастникПилотнойПрограммы", Ложь);
	Результат.Вставить("ДатаОтключения", '00010101');
	Результат.Вставить("Баланс", 0);
	Результат.Вставить("Лимит", 0);
	Результат.Вставить("ИспользованоСегодня", 0);
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/users/balance/struct_docs";
	
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	
	Если РезультатКоманды = Неопределено Или РезультатКоманды.КодСостояния <> КодСостояния_200_ОК() Тогда
		Возврат Новый ФиксированнаяСтруктура(Результат);
	КонецЕсли;
	
	Результат.УчастникПилотнойПрограммы = Не РезультатКоманды.ДесериализованноеЗначение["is_its_user"];
	Результат.Баланс = РезультатКоманды.ДесериализованноеЗначение["balance"];
	Результат.Лимит = РезультатКоманды.ДесериализованноеЗначение["limit"];
	Результат.ИспользованоСегодня = РезультатКоманды.ДесериализованноеЗначение["used_today"];
	
	ДатаОтключения = РезультатКоманды.ДесериализованноеЗначение["expiration_date"];
	Если ДатаОтключения <> Неопределено Тогда
		Результат.ДатаОтключения = ПрочитатьДатуJSON(ДатаОтключения, ФорматДатыJSON.ISO);
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Описание:
// Устанавливает адрес электронной почты для оповещений по состоянию баланса.
// 
// Параметры:
//  АдресЭлПочты - Строка
//
Процедура УстановитьАдресЭлектроннойПочты(АдресЭлПочты) Экспорт
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/users/notification_email";
	КомандаСервиса.Метод = "POST";
	КомандаСервиса.Заголовки.Вставить("Content-Type", "application/json");
	КомандаСервиса.Заголовки.Вставить("Charset", "utf-8");
	КомандаСервиса.Данные = """" + АдресЭлПочты + """";
	
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	
	Если РезультатКоманды = Неопределено Или РезультатКоманды.КодСостояния <> КодСостояния_200_ОК() Тогда
		ВызватьИсключение НСтр("ru = 'Адрес электронной почты не установлен.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Переопределения

Функция БазовыйURL() Экспорт
	
	Возврат "https://ocr.1c.ai/api/v1";
	
КонецФункции

Функция НомерМодели()
	
	Возврат "5";
	
КонецФункции

#КонецОбласти

#Область КодыСостояний

Функция КодСостояния_200_ОК()
	
	Возврат 200;
	
КонецФункции

Функция КодСостояния_202_Accepted()
	
	Возврат 202;
	
КонецФункции

Функция КодСостояния_300_Redirection()
	
	Возврат 300;
	
КонецФункции

Функция КодСостояния_400_BadRequest()
	
	Возврат 400;
	
КонецФункции

Функция КодСостояния_402_PaymentRequired()
	
	Возврат 402;
	
КонецФункции

Функция КодСостояния_500_InternalServerError()
	
	Возврат 500;
	
КонецФункции


#КонецОбласти

#Область Исполнение

Функция НоваяКомандаСервиса()

	Результат = Новый Структура;
	Результат.Вставить("URLЗапроса", "");
	Результат.Вставить("Метод", "GET");
	Результат.Вставить("Заголовки", Новый Соответствие);
	Результат.Вставить("Данные", Неопределено);
	Результат.Вставить("ОстатолосьПопыток", 3);
	
	Возврат Результат;
	
КонецФункции

// Выполнение команды сервиса.
//
// Параметры:
//   КомандаСервиса - Структура - параметры вызова или имя команды.
// Возврат
//   Соответствие - возвращаемые данные сервиса.
//
Функция ВыполнитьКомандуСервиса(КомандаСервиса)
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАвторизации = РаспознаваниеДокументов.ТекущиеПараметрыАвторизации();
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(КомандаСервиса.URLЗапроса);
	
	ПортОбычногоСоединения = 80;
	ПортЗащищенногоСоединения = 443;
	
	Если СтруктураURI.Порт = Неопределено Тогда
		Если СтруктураURI.Схема = "https" Тогда
			СтруктураURI.Порт = ПортЗащищенногоСоединения;
		Иначе
			СтруктураURI.Порт = ПортОбычногоСоединения;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураURI.Порт = ПортЗащищенногоСоединения Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(
		СтруктураURI.Хост,
		СтруктураURI.Порт, , , ,
		60,
		ЗащищенноеСоединение
	);
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	
	// Установка заголовков запроса.
	Если КомандаСервиса.Свойство("Заголовки") Тогда
		Для Каждого ЭлементКоллекции Из КомандаСервиса.Заголовки Цикл
			HTTPЗапрос.Заголовки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		КонецЦикла;
	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("X-Auth-Token", ПараметрыАвторизации.ТокенДоступа);
	
	Если КомандаСервиса.Свойство("Данные") Тогда
		Если ТипЗнч(КомандаСервиса.Данные) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(КомандаСервиса.Данные);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(
				КомандаСервиса.Данные,
				КодировкаТекста.UTF8,
				ИспользованиеByteOrderMark.НеИспользовать
			);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Результат = HTTPСоединение.ВызватьHTTPМетод(КомандаСервиса.Метод, HTTPЗапрос);
	Исключение
		// Запрос не дошел до HTTP-Сервера
		
		Если КомандаСервиса.ОстатолосьПопыток > 0 Тогда
			Приостановить(5);
			
			КомандаСервиса.ОстатолосьПопыток = КомандаСервиса.ОстатолосьПопыток - 1;
			Возврат ВыполнитьКомандуСервиса(КомандаСервиса);
		КонецЕсли;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'По запросу URL: %1 произошла сетевая ошибка
			           |Описание ошибки:
			           |%2'"),
			КомандаСервиса.URLЗапроса,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			РаспознаваниеДокументов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	Если КомандаСервиса.ОстатолосьПопыток > 0
		И Результат.КодСостояния >= КодСостояния_500_InternalServerError() Тогда
		
		Приостановить(5);
		
		КомандаСервиса.ОстатолосьПопыток = КомандаСервиса.ОстатолосьПопыток - 1;
		Возврат ВыполнитьКомандуСервиса(КомандаСервиса);
	КонецЕсли;
	
	Если (Результат.КодСостояния <  КодСостояния_200_ОК()
	 Или Результат.КодСостояния >= КодСостояния_300_Redirection())
	   И Результат.КодСостояния <> КодСостояния_402_PaymentRequired() Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'По запросу URL: %1 получен код состояния %2.
			           |Метод: %3
			           |Тело запроса:
			           |%4
			           |Описание ошибки:
			           |%5'"),
			КомандаСервиса.URLЗапроса,
			Результат.КодСостояния,
			КомандаСервиса.Метод,
			МаскированныйРезультат(Лев(КомандаСервиса.Данные, 800)),
			МаскированныйРезультат(Лев(Результат.ПолучитьТелоКакСтроку(), 800)));
		
		ЗаписьЖурналаРегистрации(
			РаспознаваниеДокументов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРезультата = СтруктураОтветаСервиса(Результат);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Процедура Приостановить(Секунд)
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ФайловаяСистема.ЗапуститьПрограмму("timeout " + Секунд, ПараметрыЗапускаПрограммы);
	
КонецПроцедуры

Функция СтруктураОтветаСервиса(Результат)
	
	ТелоОтветаНаЗапрос = Результат.ПолучитьТелоКакСтроку();
	ДесериализованноеЗначение = ПрочитатьТелоЗапросаJSON(ТелоОтветаНаЗапрос);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Ответ", ТелоОтветаНаЗапрос);
	СтруктураРезультата.Вставить("КодСостояния", Результат.КодСостояния);
	СтруктураРезультата.Вставить("ДесериализованноеЗначение", ДесериализованноеЗначение);
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Функция десериализует строку формата JSON, полученную от сервера, и возвращает результат этого действия
//
// Параметры:
//  СтрокаВФорматеJSON - СтрокаJSON - Строка в формате JSON
//
// Возвращаемое значение:
//  Соответствие, Массив, Структура - десериализованное значение чтения JSON
//
Функция ПрочитатьТелоЗапросаJSON(СтрокаВФорматеJSON)
	
	ДесериализованноеЗначение = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(СтрокаВФорматеJSON);
		// Строка может быть не в формате JSON (например при ошибке)
		ДесериализованноеЗначение = ПрочитатьJSON(ЧтениеJSON, Истина, "create_time");
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Невозможно прочитать тело запроса JSON:
			           |Читаемый объект(первые 150 символов):
			           |%1
			           |Описание ошибки:
			           |%2""'"),
			Лев(Строка(СтрокаВФорматеJSON), 150),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			РаспознаваниеДокументов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстОшибки);
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат ДесериализованноеЗначение;
	
КонецФункции

Функция МаскированныйРезультат(Данные) Экспорт
	
	Данные = ВырезатьМаскированныйФрагмент(Данные, """login""");
	Данные = ВырезатьМаскированныйФрагмент(Данные, """password""");
	Данные = ВырезатьМаскированныйФрагмент(Данные, """client_id""");
	Данные = ВырезатьМаскированныйФрагмент(Данные, """ticket""");
	
	Возврат Данные;
	
КонецФункции

Функция ВырезатьМаскированныйФрагмент(Данные, Фрагмент)
	
	НачальнаяПозиция = СтрНайти(Данные, Фрагмент); // >>"<<key": "value"
	
	Если НачальнаяПозиция > 0 Тогда 
		
		НачальнаяПозиция = СтрНайти(Данные, """", , НачальнаяПозиция + 1); // "key>>"<<: "value"
		НачальнаяПозиция = СтрНайти(Данные, """", , НачальнаяПозиция + 1); // "key": >>"<<value"
		
		НовыеДанные = Лев(Данные, НачальнаяПозиция) + "********";
		
		КонечнаяПозциция = СтрНайти(Данные, """", , НачальнаяПозиция + 1); // "key": "value>>"<<
		Если КонечнаяПозциция > 0 Тогда
			НовыеДанные = НовыеДанные + Сред(Данные, КонечнаяПозциция);
		КонецЕсли;
		
		Данные = НовыеДанные;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#КонецОбласти

