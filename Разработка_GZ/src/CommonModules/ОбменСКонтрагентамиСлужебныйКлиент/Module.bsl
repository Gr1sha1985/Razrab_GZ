////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиСлужебныйКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Признак использования библиотеки интернет поддержки пользователей
//
// Возвращаемое значение:
//  Булево - Истина, если используется библиотека интернет поддержки пользователей.
//
Функция ИспользуетсяИнтернетПоддержкаПользователей() Экспорт
	
	Использование = Неопределено;
	ОбменСКонтрагентамиКлиентПереопределяемый.ПроверитьИспользованиеИнтернетПоддержкаПользователей(Использование);
	
	Если Использование = Неопределено Тогда
		
		Использование = Ложь;
		Если Подключение1СТакскомВызовСервера.ДоступноИспользованиеСервиса1СТакском() Тогда
			ОшибкаОбращенияКВебСервису = Ложь;
			Использование = Подключение1СТакскомКлиент.КонфигурацияЗарегистрированаВСервисе1СТакском(ОшибкаОбращенияКВебСервису);
			Если ОшибкаОбращенияКВебСервису Тогда
				Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Использование;
	
КонецФункции

// Открывает форму просмотра электронного документа.
//
// Параметры:
//  СсылкаДляПросмотра - ДокументСсылка.ЭлектронныйДокументИсходящий, ДокументСсылка.ЭлектронныйДокументВходящий,
//     СправочникСсылка.ЭДПрисоединенныеФайлы, ОпределяемыйТип.ОснованияЭлектронныхДокументов - ссылка на объект для просмотра электронного документа.
//  ПараметрыФормы - Структура - дополнительные параметры просмотра.
//  ВладелецФормы  - ФормаКлиентскогоПриложения - форма, из которой производится открытие.
//
Процедура ОткрытьЭДДляПросмотра(СсылкаДляПросмотра, ПараметрыФормы = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаДляПросмотра) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ТипСсылкиДляПросмотра = ТипЗнч(СсылкаДляПросмотра);
	Если ТипСсылкиДляПросмотра = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		ИмяФормы = "Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД";
		ПараметрыФормы.Вставить("Ключ", СсылкаДляПросмотра);
		
	ИначеЕсли ТипСсылкиДляПросмотра = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		ИмяФормы = "Документ.ЭлектронныйДокументВходящий.Форма.ФормаПросмотраЭД";
		ПараметрыФормы.Вставить("Ключ", СсылкаДляПросмотра);
		
	Иначе
		ФормаПросмотра = ОбменСКонтрагентамиСлужебныйВызовСервера.ФормаПросмотраЭлектронногоДокумента(СсылкаДляПросмотра);
		Если ФормаПросмотра = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИмяФормы = ФормаПросмотра.ИмяФормы;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПросмотра.ПараметрыФормы, Истина);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

// Получение настроек ЭДО и параметров сертификатов.
//
// Параметры:
//  ОбработчикОповещения		 - ОписаниеОповещения - обработчик оповещения.
//  СписокНастроекЭДО			 - Массив, Неопределено - список настроек ЭДО.
//  СписокЭлектронныхДокументов	 - Массив - список электронных документов.
//  ПаролиКСертификатам          - Соответствие - пароли к сертификатам.
//  КонтекстОперации   - Структура - контекст операции, см. ЭлектронноеВзаимодействиеСлужебный.НовыйКонтекстОперации.
//
Процедура ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработчикОповещения, СписокНастроекЭДО,
	СписокЭлектронныхДокументов = Неопределено, ПаролиКСертификатам = Неопределено, КонтекстОперации = Неопределено) Экспорт
	
	МассивСтруктурСертификатов = Новый Массив;
	ВыполнятьКриптооперацииНаСервере = ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере();
	СтМассивовСтруктурСертификатов = Новый Структура;
	
	ПереданКонтекстОперации = КонтекстОперации <> Неопределено;
	Если КонтекстОперации = Неопределено Тогда
		КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
	ДополнительныеПараметры.Вставить("МассивСоглашений", СписокНастроекЭДО);
	ДополнительныеПараметры.Вставить("МассивЭД", СписокЭлектронныхДокументов);
	ДополнительныеПараметры.Вставить("ПаролиКСертификатам", ПаролиКСертификатам);
	ДополнительныеПараметры.Вставить("КонтекстОперации", КонтекстОперации);
	
	ИспользуютсяЭП = ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи();
	
	ЕстьОблачнаяПодпись = Ложь;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ТехнологияСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиентСервер");
		Если МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно()
			И ОбменСКонтрагентамиСлужебныйКлиентПовтИсп.ИспользованиеСертификатовОблачногоСервисаВозможно() Тогда
			ЕстьОблачнаяПодпись = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьОшибку = Не ПереданКонтекстОперации И (ИспользуютсяЭП И НЕ ВыполнятьКриптооперацииНаСервере И НЕ ЕстьОблачнаяПодпись);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеПолученияОтпечатковСертификатов", ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьОтпечаткиСертификатов(ОписаниеОповещения, Истина, ПоказатьОшибку);
	
КонецПроцедуры

// Заполняет данные о способах получения технической поддержки по ЭДО.
//
Процедура ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки) Экспорт

	// Контактные данные ЗАО "Калуга Астрал"
	ТелефонСлужбыПоддержки = "8-800-333-9313";
	АдресЭлектроннойПочтыСлужбыПоддержки = "edo@1c.ru";

КонецПроцедуры

// Формирует форматированную строку со ссылкой для обращения в службу технической поддержки по ЭДО.
// 
// Возвращаемое значение:
// ФорматированнаяСтрока - ссылка для обращения в службу технической поддержки.
//
Функция СформироватьГиперссылкуДляОбращенияВСлужбуПоддержки(Представление = "") Экспорт
	
	Если Представление = "" Тогда
		Представление = НСтр("ru = 'Техподдержка'");
	КонецЕсли;
	
	ШаблонСтроки = "<a style=""font: ЖирныйШрифтБЭД"" href=""http://1c-edo.ru/handbook"">%1</a>";
	Возврат СтроковыеФункцииКлиент.ФорматированнаяСтрока(ШаблонСтроки, Представление);
	
КонецФункции

// Только для внутреннего использования
Процедура ОткрытьИнструкциюПо1СБухфон() Экспорт
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://1c-connect.com/ru/forcustomers/");
	
КонецПроцедуры

// Открывает форму ПроверкаСертификата и возвращает результат проверки.
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - проверяемый сертификат.
//
//  ОбработкаЗавершения  - ОписаниеОповещения - вызывается при закрытии формы.
//  ПроверитьАвторизацию - Булево - если Истина, то к проверкам сертификата будет добавлен тест связи
//                                  с сервером Такском.
//  ВладелецФормы        - ФормаКлиентскогоПриложения - другая форма.
//  ПроверкаПриВыборе    - Булево - если Истина, тогда кнопка Проверить будет называться
//                                  "Проверить и продолжить", а кнопка Закрыть будет называться "Отмена".
//  БезПодтверждения     - Булево - если установить Истина, тогда при наличии пароля
//                            проверка будет выполнена сразу без открытия формы.
//                            Если режим ПроверкаПриВыборе и установлен параметр ОбработкаРезультата, то
//                            форма не будет открыта, если параметр ПроверкиПройдены установлен Истина.
//
Процедура ТестНастроекСПроверкойСертификата(Сертификат, ВладелецФормы, ПроверитьАвторизацию,
	ПроверкаПриВыборе, БезПодтверждения, ОбработкаЗавершения = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	
	ДополнительныеПараметры = Новый Структура;
	ОбработкаРезультата = Новый ОписаниеОповещения("ОбработкаРезультатаТестаСертификата", ЭтотОбъект, ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("ВладелецФормы",       Неопределено);
	ДополнительныеПараметры.Вставить("ПроверкаПриВыборе",   ПроверкаПриВыборе);
	ДополнительныеПараметры.Вставить("БезПодтверждения",    БезПодтверждения);
	
	ДополнительныеПараметры.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	ЗаголовокФормы = НСтр("ru = 'Проверка сертификата %1'");
	ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%1", Сертификат);
	ДополнительныеПараметры.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	ДополнительныеПараметры.Вставить("ОбработкаЗавершения",
		Новый ОписаниеОповещения("ОбработкаЗавершенияТестаСертификата", ЭтотОбъект, Контекст));
	
	Контекст.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ЭлектроннаяПодписьКлиент.ПроверитьСертификатСправочника(Сертификат, ДополнительныеПараметры);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбработкаРезультатаТестаСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		Возврат;
	КонецЕсли;
	
	ВсеПроверки = Новый Массив;
	ВсеПроверки.Добавить(ДополнительныеПараметры.Результат.ПроверкиНаСервере);
	ВсеПроверки.Добавить(ДополнительныеПараметры.Результат.ПроверкиНаКлиенте);
	
	Для каждого Проверка Из ВсеПроверки Цикл
		
		Если ТипЗнч(Проверка) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийРезультат = Ложь;
		
		Для каждого КлючЗначение Из Проверка Цикл
			Значение = КлючЗначение.Значение;
			Если ТипЗнч(Значение) = Тип("Булево") Тогда
				ТекущийРезультат = Значение;
				Если Не ТекущийРезультат Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущийРезультат Тогда
			Результат = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбработатьОтклонениеАннулированиеЭД(ЭД, Отклонить, ОтклонитьАннулирование = Ложь, ОбработчикОповещения = Неопределено, КонтекстОперации = Неопределено) Экспорт
	
	Если ТипЗнч(ЭД) = Тип("Массив") Тогда
		МассивЭД = ЭД;
	Иначе
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(ЭД);
	КонецЕсли;
	
	Если Отклонить Тогда
		ПараметрыОбработкиЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПараметрыОтклоненияЭД(ЭД, Ложь, КонтекстОперации);
		Если ОтклонитьАннулирование Тогда
			Заголовок = НСтр("ru = 'Укажите причины отклонения предложения об аннулировании'");
		Иначе
			
			Если ПараметрыОбработкиЭД.Количество() > 0
				И (ПараметрыОбработкиЭД[0].ЭтоСчетФактура
					ИЛИ Не ПараметрыОбработкиЭД[0].ТребуетсяПодтверждение) Тогда
				Заголовок = НСтр("ru = 'Укажите текст запроса на уточнение'");
			Иначе
				Заголовок = НСтр("ru = 'Укажите причины отклонения документа'");
			КонецЕсли;
		КонецЕсли;
		НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить'");
	Иначе
		ФормироватьЭД = Истина;
		ПараметрыОбработкиЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПараметрыАннулированияЭД(МассивЭД, КонтекстОперации);
		Заголовок = НСтр("ru = 'Укажите причины аннулирования документа'");
		НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Аннулировать'");
	КонецЕсли;
	Если ПараметрыОбработкиЭД.Количество() > 0 Тогда
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ПараметрыОбработкиЭД", ПараметрыОбработкиЭД);
		ПараметрыОбработки.Вставить("Отклонить", Отклонить);
		ПараметрыОбработки.Вставить("КонтекстОперации", КонтекстОперации);
		ПараметрыОбработки.Вставить("ОписаниеОповещения", ОбработчикОповещения);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтклонениеАннулированиеЭДЗавершить", ЭтотОбъект, 
			ПараметрыОбработки);
		ДополнительныеПараметры = ДополнительныеПараметрыВводаСтроки();
		ДополнительныеПараметры.ЗаголовокФормы = Заголовок;
		ДополнительныеПараметры.Многострочность = Истина;
		ДополнительныеПараметры.Обязательность = Истина;
		ДополнительныеПараметры.КомментарийОбязательностиВвода =
			НСтр("ru = 'Для аннулирования документа необходимо указать причину аннулирования.'");
		ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НазваниеКнопкиПоУмолчанию;
		ПоказатьВводСтрокиБЭД(ОписаниеОповещения, ДополнительныеПараметры);
	ИначеЕсли ТипЗнч(ОбработчикОповещения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, Ложь);
	ИначеЕсли КонтекстОперации <> Неопределено Тогда
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбработатьПредложениеОбАннулировании(ПервичныйЭД, ОтклонитьАннулирование = Ложь) Экспорт
	
	СтруктураЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьСсылкиНаЭДДляПОА(ПервичныйЭД);
	Если ЗначениеЗаполнено(СтруктураЭД) Тогда
		Если ОтклонитьАннулирование Тогда
			Оповещение = Новый ОписаниеОповещения("ОбработатьПредложениеОбАннулированииЗавершить", ЭтотОбъект);
			ОбработатьОтклонениеАннулированиеЭД(СтруктураЭД.ПОА, Истина, ОтклонитьАннулирование, Оповещение);
		Иначе
			ОтправитьПодтверждениеЭД(СтруктураЭД.ВладелецФайла, СтруктураЭД.ПОА);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УтвердитьЭД(ПараметрКоманды, ЭД = Неопределено, ФлагОтправки = Истина, ДопПараметры = Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
			ЭлектронноеВзаимодействиеСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Если ФлагОтправки Тогда
		ИмяКоманды = "УтвердитьОтправить";
	Иначе
		ИмяКоманды = "Утвердить";
	КонецЕсли;
	
	ОбработатьЭД(МассивСсылок, ИмяКоманды, ДопПараметры, ЭД);
	
КонецПроцедуры

// Вызывается из процедуры ПодготовитьИОтправитьПЭДПродолжить(...).
// Вызывает процедуру ВыполнитьДействияПослеОтправкиПЭДЗавершить(ДопПараметры).
//
// Параметры:
//   Результат - МенеджерКриптографии - инициализированный менеджер криптографии.
//               Строка - описание ошибки при создании менеджера криптографии.
//               Неопределено - первый вызов метода
//   ДопПараметры - Структура:
//      Параметры                                  - Структура - входящие параметры для отправки ЭД.
//      РезультатОтправкиПЭД                        - Структура:
//         МассивПакетовДляОбработкиНаКлиенте - Массив - элементы - ДокументСсылка.ПакетыЭД.
//         КолОтправленных                    - Число.
//      СоответствиеПрофилейИПараметровСертификатов - Соответствие.
//
Процедура ВыполнитьДействияПослеОтправкиПЭД(Результат, ДопПараметры) Экспорт
	
	Параметры = Неопределено;
	РезультатОтправкиПЭД = Неопределено;
	ОбработчикПослеОтправкиПЭД = Неопределено;
	СоответствиеПрофилейИПараметровСертификатов = Неопределено;
	ДопПараметры.Свойство("Параметры", Параметры);
	ДопПараметры.Свойство("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
	
	ПерейтиКЗавершениюОтправки = Истина;
	МассивПакетовДляОбработкиНаКлиенте = Неопределено;
	Если ТипЗнч(РезультатОтправкиПЭД) = Тип("Структура")
		И РезультатОтправкиПЭД.Свойство("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте)
		И МассивПакетовДляОбработкиНаКлиенте.Количество() > 0 Тогда
		
		Если Результат = Неопределено Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДействияПослеОтправкиПЭД", ЭтотОбъект, ДопПараметры);
			ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "Шифрование");

			ПерейтиКЗавершениюОтправки = Ложь;
		ИначеЕсли ТипЗнч(Результат) = Тип("МенеджерКриптографии") Тогда
			ПерейтиКЗавершениюОтправки = Ложь;
			// По концепции БЭД электронный документ в пакете один.
			СоответствиеДанныхПакетов = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДанныхПакетов(
													РезультатОтправкиПЭД.МассивПакетовДляОбработкиНаКлиенте);
													
			Параметры.Вставить("СоответствиеДанныхПакетов", СоответствиеДанныхПакетов);
			Параметры.Вставить("МенеджерКриптографии", Результат);
			ПодготовитьПакетыДляОтправки(ДопПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Если ПерейтиКЗавершениюОтправки Тогда
		ВыполнитьДействияПослеОтправкиПЭДЗавершить(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из процедуры ПодготовитьИОтправитьПЭД(...).
// Вызывает процедуру ВыполнитьДействияПослеОтправкиПЭД(Результат, ДопПараметры).
//
// Параметры:
//   Результат    - Структура:
//      СоответствиеПрофилейИПараметровСертификатов - Соответствие.
//   ДопПараметры - Структура:
//      Параметры                  - Структура.
//      ПризнакПодписи             - Булево.
//      ДобавленныеФайлы           - СправочникСсылка.ЭДПрисоединенныеФайлы.
//      ОбработчикПослеОтправкиПЭД - ОписаниеОповещения.
//
Процедура ПодготовитьИОтправитьПЭДПродолжить(Результат, ДопПараметры) Экспорт
	
	СоответствиеПрофилейИПараметровСертификатов = Неопределено;
	Если НЕ (ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И ТипЗнч(СоответствиеПрофилейИПараметровСертификатов) = Тип("Соответствие")) Тогда
		
		СоответствиеПрофилейИПараметровСертификатов = Новый Соответствие;
	КонецЕсли;
	
	Параметры = Неопределено;
	ПризнакПодписи = Неопределено;
	ДобавленныеФайлы = Неопределено;
	ОбработчикПослеОтправкиПЭД = Неопределено;
	ДопПараметры.Свойство("Параметры", Параметры);
	ДопПараметры.Свойство("ПризнакПодписи", ПризнакПодписи);
	ДопПараметры.Свойство("ДобавленныеФайлы", ДобавленныеФайлы);
	ДопПараметры.Свойство("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	
	РезультатОтправкиПЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(
		ДобавленныеФайлы, ПризнакПодписи, СоответствиеПрофилейИПараметровСертификатов, ДопПараметры.Параметры.КонтекстОперации);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Параметры", Параметры);
	ДопПараметры.Вставить("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Вставить("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	ДопПараметры.Вставить("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
	
	Если ЗначениеЗаполнено(РезультатОтправкиПЭД.МассивПакетовДляПовторнойОтправки) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьДействияПослеОтправкиПЭД", ЭтотОбъект, ДопПараметры);
		ОтправитьМассивПакетовЭД(РезультатОтправкиПЭД.МассивПакетовДляПовторнойОтправки, Оповещение);
		
	Иначе
		ВыполнитьДействияПослеОтправкиПЭД(Неопределено, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОтправитьМассивПакетовЭД(Знач МассивПЭД, ОбработкаОповещения = Неопределено) Экспорт
	
	КонтекстОтправки = Новый Структура;
	КонтекстОтправки.Вставить("КоличествоПопыток", 0);
	КонтекстОтправки.Вставить("КоличествоОтправленных", 0);
	КонтекстОтправки.Вставить("ОтправленныеДокументы", Новый Массив);
	КонтекстОтправки.Вставить("КонтекстОперации", ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации());
	КонтекстОтправки.Вставить("Пакеты", Новый Массив);
	КонтекстОтправки.Вставить("УчетныеЗаписи", ОбменСКонтрагентамиСлужебныйВызовСервера.МассивПрофилейПакетовЭД(МассивПЭД));
	КонтекстОтправки.Вставить("Оповещение", ОбработкаОповещения);
	
	НачатьОтправкуПакетов(МассивПЭД, КонтекстОтправки);
	
КонецПроцедуры

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеПодписи.
//
// Параметры:
//  ЭД                              - СправочникСсылка.ЭДПрисоединенныеФайлы.
//  ПроверитьТолькоПоследнююПодпись - Булево - если Истина, будет проверяться только последняя установленная подпись.
//  КонтекстОперации - Структура - контекст операции, см. ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации.
//  ПоказатьОшибку - Булево - см. параметр ПоказатьОшибку метода ЭлектроннаяПодписьКлиент.ПроверитьПодпись.
//
Процедура ОпределитьСтатусыПодписей(ЭД, ПроверитьТолькоПоследнююПодпись = Ложь,
	КонтекстОперации = Неопределено, ПоказатьОшибку = Истина) Экспорт
	
	РезультатПроверки = Новый Массив;
	СтруктураСодержимогоЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СтруктураСодержимогоЭД(ЭД);
	СтруктураСодержимогоЭД.Вставить("ПроверяемыйЭД", ЭД);
	
	Если ПроверитьТолькоПоследнююПодпись Тогда
		СтруктураСодержимогоЭД.Вставить("ИндексПроверки", СтруктураСодержимогоЭД.Подписи.Количество() - 2);
	Иначе
		СтруктураСодержимогоЭД.Вставить("ИндексПроверки", -1);
	КонецЕсли;
	СтруктураСодержимогоЭД.Вставить("КонтекстОперации", КонтекстОперации);
	СтруктураСодержимогоЭД.Вставить("ПоказатьОшибку", ПоказатьОшибку);
	
	Если СтруктураСодержимогоЭД.Подписи.Количество() Тогда
		ОпределитьСтатусОчереднойПодписи(Неопределено, СтруктураСодержимогоЭД);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает переданные документы ИБ в системе обмена электронными документами в соответствие с параметрами.
//
// Параметры:
//  МассивСсылокНаОбъект - массив ссылок на объекты ИБ или на ЭД, которые необходимо обработать.
//  Действие             - строка, представление действия, которое необходимо произвести с электронными документами.
//  ДопПараметры         - структура, дополнительные параметры обработки электронных документов.
//  ЭД                   - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы,
//                         если нужно обработать только один ЭД.
//  ОписаниеОповещения   - ОписаниеОповещения - обработчик оповещения, который вызывается по окончании операции.
//                         В качестве результата передается Истина, если удалось выполнить действия хотя бы по одному объекту.
//
Процедура ОбработатьЭД(Знач МассивСсылокНаОбъект,
	Действие, ДопПараметры = "", Знач ЭД = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("МассивСсылокНаОбъект", МассивСсылокНаОбъект);
	Параметры.Вставить("Действие", Действие);
	Параметры.Вставить("ДопПараметры", ДопПараметры);
	Параметры.Вставить("ЭД", ЭД);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("ФормаВладелец", Неопределено);
	
	Если (ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действие, "Подписать")
			ИЛИ ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действие, "Отправить"))
		И ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи() Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьЭДПослеПолученияОтпечатков", ЭтотОбъект, Параметры);
		ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	Иначе
		ОбработатьЭДПослеПолученияОтпечатков(Неопределено, Параметры)
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ПолучитьДвоичныеДанныеДляЭД(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	ЭД = Неопределено;
	ОписаниеДанных = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ЭД", ЭД)
		И ТипЗнч(ЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		ВыбранныйСертификат = Неопределено;
		Если НЕ (ДополнительныеПараметры.Свойство("ОписаниеДанных", ОписаниеДанных)
			И ТипЗнч(ОписаниеДанных) = Тип("Структура")
			И ОписаниеДанных.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
			И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
			И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
			И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")) Тогда
			
			ВыбранныйСертификат = Неопределено;
		КонецЕсли;
		ДвоичныеДанныеЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДвоичныеДанныеФайла(ЭД, ВыбранныйСертификат, КонтекстОперации);
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", ДвоичныеДанныеЭД);
	Параметры.Вставить("КонтекстОперации", КонтекстОперации);
	
	ВыполнитьОбработкуОповещения(Результат.Оповещение, Параметры);
	
КонецПроцедуры

// Подписывает ЭД и переходит в процедуру ДействияПослеПодписанияЭД(Параметры).
//
// Параметры:
//   РезультатВыполнения - Неопределено - в логике работы процедуры не участвует.
//   Параметры - Структура:
//      Результат                    - Структура:
//         СтруктураСтруктурМассивовЭДИСертификатов - Структура:
//            МассивСертификатов - Массив - один или несколько сертификатов, которыми могут быть подписаны
//               ЭД, находящиеся в следующем параметре структуры.
//            СоответствиеЭДИДД  - Соответствие:
//               Ключ     - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на подписываемый ЭД.
//               Значение - Неопределено, Строка - Адрес временного хранилища, ссылающийся на двоичные
//                  данные ЭД. Если значение не заполнено, то двоичные данные ЭД будут определяться
//                  непосредственно перед подписанием ЭД в процедуре указанной в обработчике оповещения,
//                  например: ПолучитьДвоичныеДанныеДляЭД.
//            ДанныеДляСпецОбработки - Соответствие - данные для подписания банковских ЭД.
//            СоответствиеСертификатовПодписаннымЭд - Соответствие - соответствие сертификата и массива ЭД, которые 
//            подписаны этим сертификатом, для данных документов также надо будет обновить статусы.
//      СоответствиеЭДИПодписей      - Соответствие.
//      СоотвСертификатовИИхСтруктур - Соответствие:
//         Ключ     - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования.
//         Значение - Структура - параметры сертификата.
//
Процедура ПодписатьЭД(РезультатВыполнения, Параметры) Экспорт
	
	СтруктураСтруктурМассивовЭДИСертификатов = Неопределено;
	ВходящаяСтруктура = Параметры.Результат;
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		
		Параметры.ИтогКолПодписанных = Параметры.ИтогКолПодписанных
		+ ЭлектронноеВзаимодействиеСлужебныйКлиент.КоличествоПодписанныхЭД(РезультатВыполнения);
		
		ПользовательНажалКнопкуПодписать = Ложь;
		Если Не РезультатВыполнения.Успех И Не РезультатВыполнения.Отказ Тогда
			ТекстОшибки = "";
			Если Не РезультатВыполнения.Свойство("ОписаниеОшибки", ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru = 'Произошла криптографическая ошибка'");
			КонецЕсли;
			ДополнительныеПараметрыОшибки = Новый Структура;
			Если РезультатВыполнения.Свойство("ВыбранныйСертификат") Тогда
				ДополнительныеПараметрыОшибки.Вставить("Сертификат", РезультатВыполнения.ВыбранныйСертификат.Ссылка);
			КонецЕсли;
			Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(НСтр("ru = 'Подписание ЭД'"),
				ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиКриптография(),
				ТекстОшибки, ТекстОшибки, ДополнительныеПараметрыОшибки);
			ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ДобавитьОшибку(Параметры.КонтекстОперации, Ошибка);
		КонецЕсли;
		// Оповещение произошло из процедуры БСП
		Если РезультатВыполнения.Свойство("НаборДанных") Тогда
			// Если Успех, необходимо перебрать элементы массива Набор данных
			// в подписанных эд в элементе массива являющимся структурой будет свойство "Свойства подписи"
			// такие ЭД надо добавить в массив "МассивЭД" для обновления их статусов.
			МассивЭД = Неопределено;
			СоответствиеСертификатовПодписаннымЭд = Неопределено;
			
			Если РезультатВыполнения.Свойство("ВыбранныйСертификат") Тогда
				Если НЕ Параметры.Свойство("СоответствиеСертификатовПодписаннымЭд", СоответствиеСертификатовПодписаннымЭд) Тогда
				
					СоответствиеСертификатовПодписаннымЭд = Новый Соответствие;
					Параметры.Вставить("СоответствиеСертификатовПодписаннымЭд", СоответствиеСертификатовПодписаннымЭд);
					
				КонецЕсли;
				
				МассивЭД = СоответствиеСертификатовПодписаннымЭд[РезультатВыполнения.ВыбранныйСертификат.Ссылка];
				Если МассивЭД = Неопределено Тогда
					МассивЭД = Новый Массив;
					СоответствиеСертификатовПодписаннымЭд.Вставить(РезультатВыполнения.ВыбранныйСертификат.Ссылка, МассивЭД);
				КонецЕсли;
			КонецЕсли;

			Для Каждого ПодписываемыеДанные Из РезультатВыполнения.НаборДанных Цикл
				Если Не ПодписываемыеДанные.Свойство("СвойстваПодписи") Тогда
					Параметры.МассивЭДКУдалениюИзОтправки.Добавить(ПодписываемыеДанные.Объект);
					Продолжить;
				КонецЕсли;
				МассивЭД.Добавить(ПодписываемыеДанные.Объект);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВходящаяСтруктура.Свойство("СтруктураСтруктурМассивовЭДИСертификатов", СтруктураСтруктурМассивовЭДИСертификатов)
		И СтруктураСтруктурМассивовЭДИСертификатов.Количество() > 0 Тогда
		
		СоответствиеЭДИПодписей = Неопределено;
		Если НЕ (Параметры.Свойство("СоответствиеЭДИПодписей", СоответствиеЭДИПодписей)
			ИЛИ ТипЗнч(СоответствиеЭДИПодписей) = Тип("Соответствие")) Тогда
			
			Параметры.Вставить("СоответствиеЭДИПодписей", Новый Соответствие);
		КонецЕсли;
		
		Для Каждого Элемент Из СтруктураСтруктурМассивовЭДИСертификатов Цикл
			
			Структура = Элемент.Значение;
			СтруктураСтруктурМассивовЭДИСертификатов.Удалить(Элемент.Ключ);
			
			МассивСертификатов = Структура.МассивСертификатов;
			ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ПодписатьЭД", ЭтотОбъект, Параметры);
			ДанныеДляСпецОбработки = Неопределено;
			СоответствиеЭдИДд = Неопределено;
			Если Структура.Свойство("СоответствиеЭдИДд", СоответствиеЭдИДд)
				И ТипЗнч(СоответствиеЭдИДд) = Тип("Соответствие") Тогда
				
				Если СоответствиеЭдИДд.Количество() = 1 Тогда
					Операция = НСтр("ru = 'Подписание электронного документа'");
				Иначе
					Операция = НСтр("ru = 'Подписание электронных документов'");
				КонецЕсли;
				
				ОписаниеДанных = Новый Структура;
				ОписаниеДанных.Вставить("Операция",            Операция);
				ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
				ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
				ОписаниеДанных.Вставить("НаборДанных",         Новый Массив);
				ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Документ'"));
				ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
				
				НаборДанных = ОписаниеДанных.НаборДанных;
				МассивЭДДляПредставления = Новый Массив;
				Для Каждого ЭлементДанных Из СоответствиеЭдИДд Цикл
					ЭД = ЭлементДанных.Ключ;
					Данные = Новый Структура;
					
					Если ЭлементДанных.Значение = Неопределено ИЛИ НЕ ЭтоАдресВременногоХранилища(ЭлементДанных.Значение) Тогда
						ПараметрыДляПолученияДД = Новый Структура("ЭД, ОписаниеДанных", ЭД, ОписаниеДанных);
						СсылкаНаДД = Новый ОписаниеОповещения("ПолучитьДвоичныеДанныеДляЭД", ЭтотОбъект, ПараметрыДляПолученияДД);
					Иначе
						СсылкаНаДД = ЭлементДанных.Значение;
					КонецЕсли;
					Данные.Вставить("Данные", СсылкаНаДД);
					Данные.Вставить("Объект", ЭД);
					
					НаборДанных.Добавить(Данные);
					МассивЭДДляПредставления.Добавить(ЭД);
				КонецЦикла;
				
				Если МассивЭДДляПредставления.Количество() = 1 Тогда
					ПредставлениеЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПредставлениеЭД(МассивЭДДляПредставления[0]);
					НаборДанных[0].Вставить("Представление", ПредставлениеЭД);
				Иначе
					ПредставлениеЭД = НСтр("ru = 'Электронные документы (%1)'");
					ПредставлениеЭД = СтрЗаменить(ПредставлениеЭД, "%1", МассивЭДДляПредставления.Количество());
					ПредставлениеЭД = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ПредставлениеЭД);
					СписокПредставленийЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СписокПредставленийЭД(МассивЭДДляПредставления);
					ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставленийЭД);
					ОписаниеДанных.Вставить("ПредставлениеНабора", ПредставлениеЭД);
				КонецЕсли;
				ОписаниеДанных.Вставить("КонтекстОперации", Неопределено);
				ОписаниеДанных.Вставить("ПрекратитьВыполнение", Истина);
				УстановитьПаролиСертификатов(Параметры.СоотвСертификатовИИхСтруктур);
				ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
			Иначе
				ПодписатьЭД(Неопределено, Параметры);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	Иначе
		
		// Временно сохраним пароль закрытого ключа сертификата, на случай истечения маркера.
		// При запросе нового маркера не заставляем пользователя вводить пароль еще раз.
		Если РезультатВыполнения.Свойство("КонтекстОперации") Тогда
			Параметры.Вставить("ПаролиКСертификатам", РезультатВыполнения.КонтекстОперации);
		КонецЕсли;
		
		УстановитьПаролиСертификатов(Параметры.СоотвСертификатовИИхСтруктур, Ложь);
		
		ДействияПослеПодписанияЭД(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из формы просмотра Входящего, Исходящего ЭД.
// Проверяет совпадение переданных в оповещение параметров свойствам формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - ФормаПросмотраЭД документов ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий.
//  Параметр - Структура - параметр передаваемый в обработку оповещение формы.
//  ОбработатьОповещение - Булево - признак выхода из обработки оповещения формы.
//
Процедура ПриОбработкеОповещенияФормыПросмотраЭД(Форма, Параметр, ОбработатьОповещение) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ФлагВыхода = Ложь;
		Если Параметр.Свойство("ЭлектронныеДокументы") Тогда
			ФлагВыхода = Истина;
			Если ТипЗнч(Параметр.ЭлектронныеДокументы) = Тип("Массив")
				И Параметр.ЭлектронныеДокументы.Найти(Форма.ПрисоединенныйФайлСсылка) <> Неопределено Тогда
				ФлагВыхода = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ФлагВыхода2 = Ложь;
		Если Параметр.Свойство("ДокументыВладельцы") Тогда
			ФлагВыхода2 = Истина;
			Если ТипЗнч(Параметр.ДокументыВладельцы) = Тип("Массив")
				И Параметр.ДокументыВладельцы.Найти(Форма.Объект.Ссылка) <> Неопределено Тогда
					ФлагВыхода2 = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ФлагВыхода И ФлагВыхода2 Тогда
			ОбработатьОповещение = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Открывает страницу опроса на сайте ИТС
//
Процедура ОткрытьСтраницуОпроса() Экспорт
	
	ПараметрыЕстьИдея = ОбменСКонтрагентамиСлужебныйВызовСервера.ПараметрыЕстьИдея();
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/survey/service1cedo" + ПараметрыЕстьИдея);
	
КонецПроцедуры

// Получает отпечатки сертификатов пользователя.
//
// Параметры:
//  Оповещение     - ОписаниеОповещение - вызывается для передачи возвращаемого значение:
//                   * Соответствие - Ключ - отпечаток в формате строки Base64, а Значение - Истина;
//                   * Строка - текст ошибки создания менеджера криптографии (или другая ошибка).
//  Личные         - Булево - Если Ложь, то к личным сертификатам добавляются сертификаты получателей.
//  ВыдаватьОшибку - Булево - показать ошибку создания менеджера криптографии.
//
Процедура ПолучитьОтпечаткиСертификатов(ОповещениеОЗавершении, Личные, ПоказатьОшибку = Ложь) Экспорт
	
	Контекст = Новый Структура("Оповещение", ОповещениеОЗавершении);
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьОтпечаткиВСервисеПослеПолученияОтпечатковНаКлиенте", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Личные, ПоказатьОшибку);
	
КонецПроцедуры

// Возвращает ссылку на раздел инструкции http://1c-edo.ru/handbook/
// "Особенности настройки обмена ЭД из решений, работающих в клиент-серверном режиме"
Функция СсылкаНаИнструкциюПоНастройкеЭДО() Экспорт
	
	Возврат "http://1c-edo.ru/handbook/28/2522/";
	
КонецФункции

// Возвращает ссылку на страницу 1С-ЭДО с привязкой к разделу техподдержки.
Функция СсылкаНаСтраницуТехПоддержки() Экспорт
	Возврат "https://portal.1c.ru/applications/30#support";
КонецФункции

// Возвращает ссылку на страницу общего описания 1С-ЭДО.
//
// Возвращаемое значение:
//  Строка - Навигационная ссылка.
//
Функция СсылкаНаОписание1СЭДО() Экспорт
	Возврат "http://1c-edo.ru";
КонецФункции

// Отправка и получение электронных документов асинхронно.
//
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое вызывается при завершении операции.
//  КонтекстКлиент - Структура, Неопределено - клиентский контекст операции:
//  МассивУчетныхЗаписей - Массив, неопределено - список идентификаторов для отправки получения.
//
Процедура НачатьОтправкуПолучениеЭлектронныхДокументов(ОповещениеОЗавершении, КонтекстКлиент = Неопределено, МассивУчетныхЗаписей = Неопределено) Экспорт
	
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоВыполненияОбмена(Истина) Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ИдентификаторЗадания");
	Контекст.Вставить("ПаролиКСертификатам");
	Контекст.Вставить("ПаролиКСертификатам");
	Контекст.Вставить("ПовторноеПолучение", Ложь);
	Контекст.Вставить("КоличествоПопыток", 0);
	Контекст.Вставить("ОбновленоСоглашений", 0);
	Контекст.Вставить("ОтправленоПакетов",   0);
	Контекст.Вставить("ПолученоПакетов",     0);
	Контекст.Вставить("РаспакованоПакетов",  0);
	Контекст.Вставить("КонтекстКлиент", КонтекстКлиент);
	Контекст.Вставить("ПроверятьПодписиНаСервере", Ложь);
	Контекст.Вставить("ПодписыватьНаСервере", Ложь);
	Контекст.Вставить("ОтпечаткиСертификатовНаКлиенте", Новый Массив);
	Контекст.Вставить("МассивУчетныхЗаписей", МассивУчетныхЗаписей);
	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	КонтекстОперации.ЗаголовокОперации = НСтр("ru = 'При отправке и получении документов'"); 
	Контекст.Вставить("КонтекстОперации", КонтекстОперации);
	Контекст.Вставить("ОбработанныеУчетныеЗаписи", Новый Соответствие);
	Контекст.Вставить("ОбрабатыватьОшибки", Истина);
	Контекст.Вставить("ОшибкаПолученияОтпечатков");
	Контекст.Вставить("ЕстьПрямойОбмен", Ложь);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗавершитьОтправкуПолучениеЭлектронныхДокументов", ЭтотОбъект, Контекст);
	Контекст.Вставить("ОповещениеОЗавершенииОтправкиПолучения", ОповещениеОЗакрытии);
	
	#Если МобильныйКлиент Тогда
		Контекст.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	#Иначе
		ПараметрыФормы = Новый Структура("Заголовок", НСтр("ru = 'Отправка и получение документов'"));
		ФормаДлительнойОперации = ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ДлительнаяОперация",ПараметрыФормы,,
			Истина,,,ОповещениеОЗакрытии);
		Контекст.Вставить("ФормаДлительнойОперации", ФормаДлительнойОперации);
		Контекст.Вставить("УникальныйИдентификатор", ФормаДлительнойОперации.УникальныйИдентификатор);
	#КонецЕсли
	
	ИспользоватьЭлектронныеПодписи = ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи();
	Если ИспользоватьЭлектронныеПодписи Тогда
		Контекст.Вставить("ОтпечаткиСертификатовНаКлиенте");
		
		#Если МобильныйКлиент Тогда
			Контекст.Вставить("ПодписыватьНаСервере", Истина);
			Контекст.Вставить("ПроверятьПодписиНаСервере", Истина);
		#Иначе
			Контекст.Вставить("ПодписыватьНаСервере", ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере());
			Контекст.Вставить("ПроверятьПодписиНаСервере", ЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере());
		#КонецЕсли
		
		Оповещение = Новый ОписаниеОповещения("ПолучитьНастройкиЭДОИПараметрыСертификатовНачало", ЭтотОбъект, Контекст);
		ПолучитьОтпечаткиСертификатов(Оповещение, Истина);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
		ОтправитьПолучитьПакетыЭлектронныхДокументовНачало(Результат, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентами.ОтправитьПроизвольныйДокумент.
Функция НовыйПроизвольныйДокумент(ПараметрыФормирования, ПараметрыФайла) Экспорт
	
	// Проверим корректность переданных параметров.
	ШаблонОшибкиПередачиПараметров = НСтр("ru = 'Отсутствует или не заполнен обязательный параметр ""%1""'");
	
	Организация        = Неопределено;
	Контрагент         = Неопределено;
	ДоговорКонтрагента = Неопределено;
	
	Если Не ПараметрыФормирования.Свойство("Организация", Организация) ИЛИ Не ЗначениеЗаполнено(Организация) Тогда
		ВызватьИсключение СтрШаблон(ШаблонОшибкиПередачиПараметров, "ПараметрыФормирования.Организация");
	КонецЕсли;
	
	Если Не ПараметрыФормирования.Свойство("Контрагент", Контрагент) ИЛИ Не ЗначениеЗаполнено(Контрагент) Тогда
		ВызватьИсключение СтрШаблон(ШаблонОшибкиПередачиПараметров, "ПараметрыФормирования.Контрагент");
	КонецЕсли;
	
	ПараметрыФормирования.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	
	ИмяФайла       = Неопределено;
	АдресХранилища = Неопределено;
	
	Если Не ПараметрыФайла.Свойство("ИмяФайла", ИмяФайла) ИЛИ Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ВызватьИсключение СтрШаблон(ШаблонОшибкиПередачиПараметров, "ПараметрыФайла.ИмяФайла");
	КонецЕсли;
	
	Если Не ПараметрыФайла.Свойство("АдресХранилища", АдресХранилища) ИЛИ Не ЗначениеЗаполнено(АдресХранилища) Тогда
		ВызватьИсключение СтрШаблон(ШаблонОшибкиПередачиПараметров, "ПараметрыФайла.АдресХранилища");
	КонецЕсли;
	
	СформированныйДокумент = ОбменСКонтрагентамиСлужебныйВызовСервера.НовыйПроизвольныйДокумент(ПараметрыФормирования, ПараметрыФайла);
	
	Возврат ?(ЗначениеЗаполнено(СформированныйДокумент), СформированныйДокумент, Неопределено);
	
КонецФункции

// Открывает форму настройки отражения в учете.
//
// Параметры:
//  Организация              - СправочникСсылка.Организации - ссылка на организацию.
//  Контрагент               - СправочникСсылка.Контрагенты - ссылка на контрагента.
//  ИдентификаторОрганизации - Строка - идентификатор организации.
//  ИдентификаторКонтрагента - Строка - идентификатор контрагента.
//
Процедура ОткрытьНастройкуОтраженияВУчете(Организация, Контрагент, ИдентификаторОрганизации, ИдентификаторКонтрагента) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	ПараметрыФормы.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	ПараметрыФормы.Вставить("Организация"             , Организация);
	ПараметрыФормы.Вставить("Контрагент"              , Контрагент);
	
	ОткрытьФорму("РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Форма.НастройкиОтраженияДокументовВУчете", ПараметрыФормы);
	
КонецПроцедуры

#Область РаботаСЭП

Процедура ОпределитьСтатусОчереднойПодписи(Результат, Параметры) Экспорт
	
	// Проверка создания менеджера криптографии.
	ОшибкаСозданияМенеджераКриптографии = Результат = Неопределено И Параметры.Свойство("РезультатПроверки");
	
	Параметры.ИндексПроверки = Параметры.ИндексПроверки + 1;
	
	Если Не Параметры.Свойство("РезультатПроверки") Тогда
		РезультатПроверки = Новый Массив;
		Параметры.Вставить("РезультатПроверки", РезультатПроверки);
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура("НомерСтроки", Параметры.ИндексПроверки);
	
	Если Результат = Истина Тогда
		СтруктураЗаписи.Вставить("Результат", Истина);
		Параметры.РезультатПроверки.Добавить(СтруктураЗаписи);
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Или ОшибкаСозданияМенеджераКриптографии Тогда
		ВидОперации = НСтр("ru = 'Проверка подписи'");
		ТекстСообщения = НСтр("ru = 'При проверке подписи электронного документа:
									|%1
									|произошла ошибка: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			Параметры.ПроверяемыйЭД,Результат);
			
		Для каждого Подпись Из Параметры.Подписи Цикл
			Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(ВидОперации,
				ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиКриптография(),
				ТекстСообщения, ТекстСообщения, Новый Структура("Сертификат", Подпись.Отпечаток));
			ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ДобавитьОшибку(Параметры.КонтекстОперации,
				Ошибка,, "ЭлектронноеВзаимодействие");
		КонецЦикла;
		
		СтруктураЗаписи.Вставить("Результат", Ложь);
		Параметры.РезультатПроверки.Добавить(СтруктураЗаписи);
		Параметры.Вставить("ПодписьНеверна");
		Если ОшибкаСозданияМенеджераКриптографии Тогда
			ОповеститьОРезультатахПроверки(Параметры, Параметры.КонтекстОперации);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Подписи.Количество() > Параметры.ИндексПроверки Тогда
		Оповещение = Новый ОписаниеОповещения("ОпределитьСтатусОчереднойПодписи", ЭтотОбъект, Параметры);
		ПоказатьОшибку = Истина;
		Если Не Параметры.Свойство("ПоказатьОшибку", ПоказатьОшибку) Тогда
			ПоказатьОшибку = Истина;
		КонецЕсли;
		ЭлектроннаяПодписьКлиент.ПроверитьПодпись(Оповещение, Параметры.ДанныеЭД,
			Параметры.Подписи[Параметры.ИндексПроверки].Подпись,,, ПоказатьОшибку);
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ПроверяемыйЭД") Тогда
		ОбменСКонтрагентамиСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(Параметры.ПроверяемыйЭД,
			Параметры.РезультатПроверки);
	КонецЕсли;
	
	ОповеститьОРезультатахПроверки(Параметры, Параметры.КонтекстОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаЭлектронныхДокументов

Процедура ОбработатьЭДПослеПолученияОтпечатков(ОтпечаткиСертификатов, Параметры) Экспорт
	
	ИтогКолНовыхЭД = 0;
	ИтогКолУтвержденныхЭД = 0;
	ИтогКолПодписанных = 0;
	ИтогКолПодготовленных = 0;
	ИтогКолОтправленных = 0;
	
	МассивСсылокНаОбъект = Параметры.МассивСсылокНаОбъект;
	Действие = Параметры.Действие;
	ДопПараметры = Параметры.ДопПараметры;
	Если Не ДопПараметры.Свойство("КонтекстОперации") Тогда
		КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
		ДопПараметры.Вставить("КонтекстОперации", КонтекстОперации);
	КонецЕсли;
	ЭД = Параметры.ЭД;
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	
	МассивОтпечатковСертификатов = Новый Массив;
	ОшибкаНастройкиКриптографии =Ложь;
	
	Если ТипЗнч(ОтпечаткиСертификатов) = Тип("Строка") Тогда
		МассивОтпечатковСертификатов = Новый Массив;
		ОшибкаНастройкиКриптографии = Истина;
		ДопПараметры.Вставить("ОшибкаНастройкиКриптографии", ОшибкаНастройкиКриптографии);
		ДопПараметры.Вставить("ТекстОшибкиКриптографии", ОтпечаткиСертификатов);
	ИначеЕсли ТипЗнч(ОтпечаткиСертификатов) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ОтпечаткиСертификатов Цикл
			МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОтпечаткиСертификатов) = Тип("Массив") Тогда
		МассивОтпечатковСертификатов = ОтпечаткиСертификатов;
	КонецЕсли;
	
	СоответствиеСертификатаИПароля = Новый Соответствие;
	
	Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.ВыполнитьДействияПоЭД(МассивСсылокНаОбъект,
																				МассивОтпечатковСертификатов,
																				Действие,
																				ДопПараметры,
																				ЭД,
																				СоответствиеСертификатаИПароля);
	
	ВыполнятьКриптооперацииНаСервере = Неопределено;
	НемедленнаяОтправкаЭД = Неопределено;
	ВыполнитьОповещение = Истина;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ОшибкиПриФормированииДокументов = Неопределено;
		ОписанияОшибокПроверки          = Неопределено;
		
		Если Результат.Свойство("ОшибкиПриФормированииДокументов", ОшибкиПриФормированииДокументов) Тогда
			
			ДополнительныеДанные = Неопределено;
			Результат.Свойство("ДополнительныеДанные", ДополнительныеДанные);
			
			ФормаВладелец = Неопределено;
			Параметры.Свойство("ФормаВладелец", ФормаВладелец);
			Параметры.Вставить("ОповещениеОЗавершении", ОписаниеОповещения);
			
			Оповещение = Новый ОписаниеОповещения("ОбработатьДокументПослеУстраненияОшибок", ЭтотОбъект, Параметры);
			ПоказатьПроблемыПриФормированииДокументов(
				МассивСсылокНаОбъект, ОшибкиПриФормированииДокументов, Оповещение, Действие, ДополнительныеДанные, ФормаВладелец);
				
		ИначеЕсли Результат.Свойство("ОшибкаНастройкиОтправки") Тогда
			ОткрытьПомощникНастройкиОбменаСКонтрагентом(
				Результат.ОшибкаНастройкиОтправки.КлючНастройкиОтправки, МассивСсылокНаОбъект, Действие);
		ИначеЕсли Результат.Свойство("ОшибкаНастройкиВнутреннегоЭДО") Тогда
			Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена(Ложь) Тогда
				Контекст = Новый Структура;
				Контекст.Вставить("МассивСсылок", МассивСсылокНаОбъект);
				Контекст.Вставить("Действие", Действие);
				Контекст.Вставить("ДопПараметры", ДопПараметры);
				Оповещение = Новый ОписаниеОповещения("ОбработатьДокументыПослеДобавленияНастроекВнутреннегоЭДО",
					ЭтотОбъект, Контекст);
				ПараметрыНастройки = Результат.ОшибкаНастройкиВнутреннегоЭДО.ПараметрыНастройки;
				ОписаниеВидаВнутреннегоДокумента = НовоеОписаниеВидаВнутреннегоДокумента();
				ОписаниеВидаВнутреннегоДокумента.ОбъектУчета = ПараметрыНастройки.ИдентификаторОбъектаУчета;
				НастроитьВнутреннийЭлектронныйДокументооборот(
					ПараметрыНастройки.Организация, ОписаниеВидаВнутреннегоДокумента, Оповещение);
			Иначе 
				ВидОперации = НСтр("ru = 'Формирование внутреннего электронного документа'");
				ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиент.ВидОшибкиНетПравДляНастройкиЭДО();
				ТекстОшибки = НСтр("ru = 'Не настроен внутренний документооборот'"); 
				Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки);
				ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ДобавитьОшибку(ДопПараметры.КонтекстОперации, Ошибка, Ложь);
				ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(ДопПараметры.КонтекстОперации);
			КонецЕсли;
		ИначеЕсли Результат.Свойство("ПараметрыПросмотраСтатусов") Тогда
			ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.СтатусыЭлектронныхДокументов",
				Результат.ПараметрыПросмотраСтатусов,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
		
		Результат.Свойство("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
		Результат.Свойство("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
		
		Если НЕ Результат.Свойство("КолПодписанных", ИтогКолПодписанных) Тогда
			ИтогКолПодписанных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КолПодготовленных", ИтогКолПодготовленных) Тогда
			ИтогКолПодготовленных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КолОтправленных", ИтогКолОтправленных) Тогда
			ИтогКолОтправленных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КоличествоНовыхЭД", ИтогКолНовыхЭД) Тогда
			ИтогКолНовыхЭД = 0;
		КонецЕсли;
		
		Если ИтогКолУтвержденныхЭД = 0 И Результат.Свойство("КоличествоУтвержденныхЭД") Тогда
			ИтогКолУтвержденныхЭД = Результат.КоличествоУтвержденныхЭД;
		КонецЕсли;
		
		Если ИтогКолНовыхЭД + ИтогКолУтвержденныхЭД > 0 Тогда
			
			ОбработанныеДокументы = Неопределено;
			Если Параметры.Свойство("ЭД") Тогда
				ОбработанныеДокументы = Новый Массив;
				
				Если ТипЗнч(Параметры.ЭД) = Тип("Массив") Тогда
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбработанныеДокументы, Параметры.ЭД);
				Иначе
					
					ОбработанныеДокументы.Добавить(Параметры.ЭД);
				КонецЕсли;
			КонецЕсли;
			
			СсылкиНаОбъект = Неопределено;
			Если Параметры.Свойство("МассивСсылокНаОбъект") Тогда
				СсылкиНаОбъект = Параметры.МассивСсылокНаОбъект;
			КонецЕсли;
			
			ДокументыВладельцы = Неопределено;
			Если Результат.Свойство("МассивНовыхЭД") Тогда
				ДокументыВладельцы = Результат.МассивНовыхЭД;
			КонецЕсли;
			
			Если СсылкиНаОбъект = Неопределено Тогда
				Если Результат.Свойство("ДокументыУчета") Тогда
					СсылкиНаОбъект = Результат.ДокументыУчета;
				КонецЕсли;
				
			КонецЕсли;
						
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ЭлектронныеДокументы" ,ОбработанныеДокументы);
			ПараметрыОповещения.Вставить("ДокументыУчета", СсылкиНаОбъект);
			
			Если СтрЧислоВхождений(Действие, "Утвердить") + СтрЧислоВхождений(Действие, "Подписать") < 2 Тогда 
				Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
			КонецЕсли;
			
		КонецЕсли;
		
		// Подписание ЭД:
		
		СоотвСертификатовИМассивовЭДКПодписи = Новый Соответствие;
		
		МассивЭДКУдалениюИзОтправки = Новый Массив;
		СтруктураСтруктурМассивовЭДИСертификатов = Неопределено;
		СоотвЭДИСоглашений = Неопределено;
		СоотвСертификатовИИхСтруктур = Неопределено;
		
		ПараметрыКонтекста = Новый Структура();
		ПараметрыКонтекста.Вставить("Результат", Результат);
		ПараметрыКонтекста.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ПараметрыКонтекста.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
		ПараметрыКонтекста.Вставить("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
		ПараметрыКонтекста.Вставить("ИтогКолОтправленных", ИтогКолОтправленных);
		ПараметрыКонтекста.Вставить("ИтогКолПодготовленных", ИтогКолПодготовленных);
		ПараметрыКонтекста.Вставить("ИтогКолНовыхЭД", ИтогКолНовыхЭД);
		ПараметрыКонтекста.Вставить("ИтогКолУтвержденныхЭД", ИтогКолУтвержденныхЭД);
		ПараметрыКонтекста.Вставить("ИтогКолПодписанных", ИтогКолПодписанных);
		ПараметрыКонтекста.Вставить("Действие", Действие);
		ПараметрыКонтекста.Вставить("МассивСсылокНаОбъект", МассивСсылокНаОбъект);
		ПараметрыКонтекста.Вставить("МассивЭДКУдалениюИзОтправки", МассивЭДКУдалениюИзОтправки);
		ПараметрыКонтекста.Вставить("СоотвСертификатовИМассивовЭДКПодписи", СоотвСертификатовИМассивовЭДКПодписи);
		ПараметрыКонтекста.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
		ПараметрыКонтекста.Вставить("КонтекстОперации", ДопПараметры.КонтекстОперации);
		Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("ОповеститьОСозданииУведомления") Тогда
			ПараметрыКонтекста.Вставить("ОповеститьОСозданииУведомления", ДопПараметры.ОповеститьОСозданииУведомления);
		КонецЕсли;

		Если Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И Результат.Свойство("СтруктураСтруктурМассивовЭДИСертификатов", СтруктураСтруктурМассивовЭДИСертификатов)
			И Результат.Свойство("СоотвЭДИСоглашений", СоотвЭДИСоглашений) Тогда
			
			СоответствиеПрофилейИСертификатов = Неопределено;
			Если ДопПараметры.Свойство("СоответствиеСертификатов", СоответствиеПрофилейИСертификатов) И ЗначениеЗаполнено(СоответствиеПрофилейИСертификатов) Тогда
				СоответствиеСертификатов = ПараметрыСертификатов(СоответствиеПрофилейИСертификатов);
				Для Каждого КлючЗначение Из СоотвСертификатовИИхСтруктур Цикл
					ПараметрыСертификата = СоответствиеСертификатов.Получить(КлючЗначение.Ключ);
					ЗаполнитьПароли(КлючЗначение.Значение, ПараметрыСертификата);
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыКонтекста.Вставить("СтруктураСтруктурМассивовЭДИСертификатов", СтруктураСтруктурМассивовЭДИСертификатов);
			ПараметрыКонтекста.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
			ПараметрыКонтекста.Вставить("ИндексПервойИтерации", 0);
			ПараметрыКонтекста.Вставить("ИндексВторойИтерации", 0);
			ПараметрыКонтекста.Вставить("ИндексТретьейИтерации", 0);
			ВыполнитьОповещение = Ложь;
			ПодписатьЭД(Неопределено, ПараметрыКонтекста);
		Иначе
			Если СоотвСертификатовИИхСтруктур = Неопределено Тогда
				СоотвСертификатовИИхСтруктур = Новый Соответствие;
			КонецЕсли;
			ПараметрыКонтекста.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
			// Отправка ЭД:
			ВыполнитьОповещение = Ложь;
			ОтправкаЭД(ПараметрыКонтекста);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполнитьОповещение И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
	НовыйЭД = Неопределено;
	ИДПараметра = Неопределено;
	// Если выполнялось утверждение входящего титула ТОРГ-12 или Акта, то надо открыть
	// ответный титул для подписания, в окне первичного титула.
	Если ДопПараметры.Свойство("НовыйЭД", НовыйЭД) И ЗначениеЗаполнено(НовыйЭД)
		И ДопПараметры.Свойство("ИДПараметра", ИДПараметра) Тогда
		
		ПараметрыФормы = ПараметрыПриложения[ИДПараметра];
		Если ТипЗнч(ПараметрыФормы) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ПараметрыФормы, НовыйЭД);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
 
// Выводит оповещение о смене ответственного.
Процедура ОповеститьПользователяОСменеОтветственного(Ответственный, КоличествоВсего, КоличествоОбработанных) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
			
		ТекстСообщения = НСтр("ru = 'Для %КоличествоОбработанных% из %КоличествоВсего% выделенных эл.документов
							|установлен ответственный ""%Ответственный%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%",          Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен ни для одного эл.документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОтветственного(Знач МассивЭД, Знач ОбработкаОповещения) Экспорт
	
	Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭД", МассивЭД);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ПеренаправлениеЭлектронныхДокументов", ПараметрыФормы, , , , , ОбработкаОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

Процедура СоздатьПакетЭДПослеШифрования(ЗашифрованныеДанные, Параметры) Экспорт
	
	ВложенныеПараметры = Неопределено;
	СоответствиеДанныхПакетов = Неопределено;
	МенеджерКриптографии = Неопределено;
	Если Параметры.Свойство("Параметры", ВложенныеПараметры) И ТипЗнч(ВложенныеПараметры) = Тип("Структура") Тогда
		ВложенныеПараметры.Свойство("СоответствиеДанныхПакетов", СоответствиеДанныхПакетов);
		ВложенныеПараметры.Свойство("МенеджерКриптографии", МенеджерКриптографии);
	КонецЕсли;
	
	Если ТипЗнч(СоответствиеДанныхПакетов) = Тип("Соответствие") Тогда
		ТекИндексПакета = -1;
		Для Каждого КлючЗначение Из СоответствиеДанныхПакетов Цикл
			ТекИндексПакета = ТекИндексПакета + 1;
			Если ТекИндексПакета = Параметры.ИндексПеребораПакетов Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		МассивДанныхЭД = КлючЗначение.Значение;
		ДанныеЭД = МассивДанныхЭД[Параметры.ИндексПеребораДанных];
		
		ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные);
	КонецЕсли;
	
	ПодготовитьПакетыДляОтправки(Параметры)
	
КонецПроцедуры

Процедура СформироватьНовыйЭДКаталогЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Организация = Неопределено;
	Если ЗначениеЗаполнено(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Организация", Организация) Тогда
		
		СтруктураКаталога = Новый Структура;
		СтруктураКаталога.Вставить("Организация", Организация);
		СтруктураКаталога.Вставить("ТоварыКаталога", Результат);
		Параметры = Новый Структура("СтруктураКаталога", СтруктураКаталога);
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ВыгрузкаЭлектронныхДокументовВФайл", Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПодписатьОтправитьКаталогЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	НастройкаЭДО = Неопределено;
	ОткрыватьФормыЭД = Неопределено;
	Если ЗначениеЗаполнено(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("НастройкаЭДО", НастройкаЭДО) Тогда
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(НастройкаЭДО);
		
		МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(НастройкаЭДО);
		Если МассивСсылок = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТоварыКаталога", Результат);
		
		ОбработатьЭД(МассивСсылок, "СформироватьУтвердитьПодписатьОтправить",
			СтруктураПараметров);
		
		Если ДополнительныеПараметры.Свойство("ОткрыватьФормыЭД", ОткрыватьФормыЭД)
			И ОткрыватьФормыЭД = Истина Тогда
			ОткрытьАктуальныйЭД(НастройкаЭДО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияОтпечатковСертификатов(Отпечатки, Параметры) Экспорт
	
	ОбработчикОповещения       = Параметры.ОбработчикОповещения;
	МассивУчетныхЗаписей       = Параметры.МассивСоглашений;
	МассивЭД                   = Параметры.МассивЭД;
	ПаролиКСертификатам        = Параметры.ПаролиКСертификатам;
	КонтекстОперации           = Параметры.КонтекстОперации;
	
	МассивОтпечатков = Новый Массив;
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	Иначе 
		Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(НСтр("ru = 'Получение отпечатков сертификатов'"),
			ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиКриптография(),
			Отпечатки, Отпечатки);
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ДобавитьОшибку(КонтекстОперации, Ошибка, Ложь);
	КонецЕсли;
	
	СтМассивовСтруктурСертификатов = Новый Структура;
	СтМассивовСтруктурСертификатов.Вставить("МассивОтпечатковКлиент", МассивОтпечатков);
	
	СтСоответствий = ОбменСКонтрагентамиСлужебныйВызовСервера.НастройкиЭДОИСертификатыАвторизации(
		МассивУчетныхЗаписей, МассивЭД, СтМассивовСтруктурСертификатов, КонтекстОперации);
	
	СтСоответствий.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
	СтСоответствий.Вставить("КонтекстОперации", КонтекстОперации);
	
	СоответствиеСоглашенийИСертификатов = Неопределено;
	Если СтСоответствий.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоответствиеСоглашенийИСертификатов) Тогда
		
		ИД_Параметров = Строка(Новый УникальныйИдентификатор);
		ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие." + ИД_Параметров, СтСоответствий);
		
		Параметры = Новый Структура;
		Параметры.Вставить("ИД_Параметров",                                 ИД_Параметров);
		Параметры.Вставить("ОбработчикОповещения",                          ОбработчикОповещения);
		Параметры.Вставить("СоответствиеСоглашенийИСертификатов",           СоответствиеСоглашенийИСертификатов);
		Параметры.Вставить("ПаролиКСертификатам",                           ПаролиКСертификатам);
		Параметры.Вставить("КонтекстОперации",                              КонтекстОперации);
		Параметры.Вставить("ОбработанныеУчетныеЗаписи",                     Новый Соответствие);
		
		РасшифроватьМаркер(Неопределено, Параметры);
	Иначе
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов",
			СтСоответствий.СоответствиеПрофилейИПараметровСертификатов);
			
		СоответствиеСоглашенийИСертификатов = Новый Соответствие;
		ПараметрыОповещения.Вставить("СоответствиеСоглашенийИСертификатов", СоответствиеСоглашенийИСертификатов);
		ПараметрыОповещения.Вставить("КонтекстОперации",                    КонтекстОперации);
		
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтпечаткиВСервисеПослеПолученияОтпечатковНаКлиенте(Отпечатки, Контекст) Экспорт
	
	ОтпечаткиВСервисе = Новый Соответствие;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ТехнологияСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиентСервер");
		Если МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно()
			И ОбменСКонтрагентамиСлужебныйКлиентПовтИсп.ИспользованиеСертификатовОблачногоСервисаВозможно() Тогда
			ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьЛичныеОтпечаткиВСервисе(ОтпечаткиВСервисе);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Отпечатки) = Тип("Строка") Тогда
		Если ОтпечаткиВСервисе.Количество() Тогда
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, ОтпечаткиВСервисе);
		Иначе
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, Отпечатки);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Отпечатки, ОтпечаткиВСервисе, Ложь);
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Отпечатки);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПодписатьОтправитьЭДЗавершить(Документы, ДополнительныеПараметры) Экспорт
	
	ОбменСКонтрагентамиКлиент.СформироватьПодписатьОтправитьЭД(Документы);
	
КонецПроцедуры

// Команда открытия электронного документа.
Процедура ОткрытьАктуальныйЭДЗавершить(ПараметрКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	Для Каждого СсылкаНаОбъект Из ПараметрКоманды Цикл
		ПараметрыЭД = Новый Структура;
		Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ОпределитьДействующуюНастройкуЭДО(СсылкаНаОбъект, ПараметрыЭД) Тогда
			
			Если ПараметрыВыполненияКоманды <> Неопределено 
				И ПараметрыВыполненияКоманды.Свойство("БлокироватьОткрытиеМастераНастройки")
				И ПараметрыВыполненияКоманды.БлокироватьОткрытиеМастераНастройки = Истина Тогда
				
				Возврат;
				
			КонецЕсли; 
			
			Если ПараметрыЭД.НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Интеркампани") Тогда
				Возврат;
			ИначеЕсли ПараметрыЭД.НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Внутренний") Тогда
				Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена(Ложь) Тогда
					Оповещение = Новый ОписаниеОповещения("СформироватьВнутреннийДокументПослеНастройки", ЭтотОбъект, СсылкаНаОбъект);
					ОписаниеВидаВнутреннегоДокумента = НовоеОписаниеВидаВнутреннегоДокумента();
					ОписаниеВидаВнутреннегоДокумента.ОбъектУчета = СсылкаНаОбъект;
					НастроитьВнутреннийЭлектронныйДокументооборот(ПараметрыЭД.Организация, ОписаниеВидаВнутреннегоДокумента, Оповещение);
				Иначе 
					КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
					ВидОперации = НСтр("ru = 'Формирование внутреннего электронного документа'");
					ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиент.ВидОшибкиНетПравДляНастройкиЭДО();
					ТекстОшибки = НСтр("ru = 'Не настроен внутренний документооборот'"); 
					Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки);
					ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ДобавитьОшибку(КонтекстОперации, Ошибка, Ложь);
					ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
			Если Не ПараметрыЭД.ЭтоАктуальныйВидЭД Тогда
				СообщитьВидЭДНеПоддерживается(ПараметрыЭД.ВидЭД, НСтр("ru = 'Просмотр электронного документа невозможен.'"));
				Возврат;
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отправитель", ПараметрыЭД.Организация);
			ПараметрыФормы.Вставить("Получатель" , ПараметрыЭД.Контрагент);
			ПараметрыФормы.Вставить("ПредварительнаяНастройка", Истина);
			
			Если Не ПараметрыЭД.НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий") Тогда
				ПараметрыФормы.Вставить("ДокументыОснования", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаОбъект));
				Контекст = Новый Структура("ПроверитьФормирование", Истина); 
				Оповещение = Новый ОписаниеОповещения("ОбработатьДокументПослеУстраненияОшибок", ЭтотОбъект, Контекст);
			Иначе
				Оповещение = Новый ОписаниеОповещения();
			КонецЕсли;
			
			ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.НастройкаОбменаСКонтрагентом", ПараметрыФормы ,,,,,
				Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			Если ПараметрыЭД.НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий") Тогда
				ОткрытьАктуальныйВходящийЭД(ПараметрКоманды, ПараметрыВыполненияКоманды);
			Иначе 
				ДополнительныеПараметры = Новый Структура;
				Если ПараметрыВыполненияКоманды <> Неопределено 
					И ПараметрыВыполненияКоманды.Свойство("КлючиНастроекОбъектов") Тогда
					ДополнительныеПараметры.Вставить("КлючиНастроекОбъектов", ПараметрыВыполненияКоманды.КлючиНастроекОбъектов);
				КонецЕсли;
				ПроверитьФормированиеЭД(СсылкаНаОбъект, ДополнительныеПараметры);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыПодменюЭДО

// Команда открытия исходящего электронного документа.
Процедура ОткрытьАктуальныйЭД(ПараметрКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОбщийМодуль.ОбменСКонтрагентамиКлиентСервер.ОткрытьАктуальныйЭД");
	
	ОчиститьСообщения();
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПросмотра = ОбменСКонтрагентамиСлужебныйВызовСервера.ПараметрыПросмотраАктуальныхДокументов(МассивСсылок);
	МассивСсылокНаОбъект = Новый Массив;
	ЭлектронныеДокументыОбъектовУчета = ПараметрыПросмотра.ЭлектронныеДокументыОбъектовУчета;
	ПараметрыПросмотраСтатусовОбъектовУчета = ПараметрыПросмотра.ПараметрыПросмотраСтатусовОбъектовУчета;
	Для Каждого СсылкаНаОбъект Из МассивСсылок Цикл
		
		ОтсутствуютДанныеДляПросмотра = Истина;
		
		ЭлектронныйДокумент = ЭлектронныеДокументыОбъектовУчета[СсылкаНаОбъект];
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			
			ОтсутствуютДанныеДляПросмотра = Ложь;
			
			ПараметрыФормы = Неопределено;
			ВладелецФормы  = Неопределено;
			
			ТипПараметровОткрытия = ТипЗнч(ПараметрыВыполненияКоманды);
			Если ТипПараметровОткрытия = Тип("ПараметрыВыполненияКоманды")
				ИЛИ (ТипПараметровОткрытия = Тип("Структура")
					И ПараметрыВыполненияКоманды.Свойство("Источник")) Тогда
				ВладелецФормы = ПараметрыВыполненияКоманды.Источник;
			КонецЕсли;
			
			ОткрытьЭДДляПросмотра(ЭлектронныйДокумент, ПараметрыФормы, ВладелецФормы);
		КонецЕсли;
		
		ПараметрыПросмотраСтатусов = ПараметрыПросмотраСтатусовОбъектовУчета[СсылкаНаОбъект];
		Если ЗначениеЗаполнено(ПараметрыПросмотраСтатусов) Тогда
			
			ОтсутствуютДанныеДляПросмотра = Ложь;
			
			ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.СтатусыЭлектронныхДокументов",
				ПараметрыПросмотраСтатусов,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
		Если ОтсутствуютДанныеДляПросмотра Тогда
			МассивСсылокНаОбъект.Добавить(СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСсылокНаОбъект.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Источник", Неопределено); 		
		Если ТипЗнч(ПараметрыВыполненияКоманды) = Тип("Структура") Тогда
			
			Если ПараметрыВыполненияКоманды.Свойство("Источник") Тогда 
				Источник = ПараметрыВыполненияКоманды.Источник;
			КонецЕсли;
			
			Если ПараметрыВыполненияКоманды.Свойство("БлокироватьОткрытиеМастераНастройки") Тогда 
				БлокироватьОткрытиеМастераНастройки = ПараметрыВыполненияКоманды.БлокироватьОткрытиеМастераНастройки;
				ДополнительныеПараметры.Вставить("БлокироватьОткрытиеМастераНастройки", БлокироватьОткрытиеМастераНастройки);
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("Источник", Источник);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОткрытьАктуальныйЭДЗавершить", ОбменСКонтрагентамиСлужебныйКлиент, ДополнительныеПараметры);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ПараметрКоманды", МассивСсылокНаОбъект);
		ДополнительныеПараметры.Вставить("Обработчик", ОбработчикОповещения);
		ДополнительныеПараметры.Вставить("Источник"  , Источник);
		
		ВыполнитьПроверкуПроведенияДокументов(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Команда открытия входящего электронного документа.
Процедура ОткрытьАктуальныйВходящийЭД(ПараметрКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОбщийМодуль.ОбменСКонтрагентамиКлиентСервер.ОткрытьАктуальныйЭД");
	
	ОчиститьСообщения();
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеВладельцевИЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ВладельцыИЭлектронныеДокументы(МассивСсылок);
	Для Каждого СсылкаНаОбъект Из МассивСсылок Цикл
		
		СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(СсылкаНаОбъект);
		Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
			
			ПараметрыФормы = Неопределено;
			ВладелецФормы  = Неопределено;
			
			ТипПараметровОткрытия = ТипЗнч(ПараметрыВыполненияКоманды);
			Если ТипПараметровОткрытия = Тип("ПараметрыВыполненияКоманды")
				ИЛИ (ТипПараметровОткрытия = Тип("Структура")
					И ПараметрыВыполненияКоманды.Свойство("Источник")) Тогда
				ВладелецФормы = ПараметрыВыполненияКоманды.Источник;
			КонецЕсли;
			
			ОткрытьЭДДляПросмотра(СсылкаНаЭД, ПараметрыФормы, ВладелецФормы);
			
		Иначе
			ТекстШаблона = НСтр("ru = '%1. Электронный документ не найден.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, СсылкаНаОбъект);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик завершения вопроса проведения объекта.
Процедура ПроверитьПроведениеПослеВопросаПользователю(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьПроверкуПроведенияДокументов(ДополнительныеПараметры);
	КонецЕсли; 
	
КонецПроцедуры

// Команда Создать, Подписать и отправить электронный документ.
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Источник", ПараметрыВыполненияКоманды.Источник);

	ОбработчикОповещения = Новый ОписаниеОповещения("СформироватьПодписатьОтправитьЭДЗавершить", ОбменСКонтрагентамиСлужебныйКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрКоманды", ПараметрКоманды);
	ДополнительныеПараметры.Вставить("Обработчик", ОбработчикОповещения);
	ДополнительныеПараметры.Вставить("Источник", ПараметрыВыполненияКоманды.Источник);
	
	Если ПараметрКоманды.Количество() > 1 Тогда
		Оповещение = Новый ОписаниеОповещения("ПроверитьПроведениеПослеВопросаПользователю", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Отправить электронные документы выделенных элементов?
			|Если электронных документов нет, они будут созданы автоматически.'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ВыполнитьПроверкуПроведенияДокументов(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Команда открытия формы просмотра электронных документов.
Процедура ДеревоЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОткрытьДеревоЭД(ПараметрКоманды, ПараметрыВыполненияКоманды);
	
КонецПроцедуры

// Команда создания произвольного документа на основании текущего.
Процедура СоздатьПроизвольныйЭДНаОсновании(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ПараметрыФормы = Новый Структура("ДокументОснование", ПараметрКоманды);
	ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник);
	
КонецПроцедуры
// Команда выгрузки данных в файл.
Процедура ВыгрузитьДанныеВФайл(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
		
	ОбменСКонтрагентамиКлиент.БыстрыйОбменСформироватьНовыйЭД(ПараметрКоманды);
	
КонецПроцедуры

// Команда перезаполнения объекта из электронного документа.
Процедура ПерезаполнитьДокумент(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбменСКонтрагентамиКлиент.ПерезаполнитьДокумент(ПараметрКоманды);
	
КонецПроцедуры

// Команда загрузки документа из файла.
Процедура ЗагрузитьДанныеИзФайла(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбменСКонтрагентамиКлиент.БыстрыйОбменЗагрузитьЭДИзФайла();
	
КонецПроцедуры

// Команда открытия обработки "ТекущиеДелаПоЭДО".
//
Процедура ОткрытьТекущиеДелаЭДО(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбменСКонтрагентамиКлиент.ОткрытьТекущиеДелаЭДО();
	
КонецПроцедуры

// Открыть дерево электронных документов.
//
// Параметры:
//  СсылкаНаОбъект		 - Ссылка - документ учета.
//  ПараметрыОткрытия	 - Структура - параметры открытия.
//  ЭД					 - Ссылка - электронный документ.
//
Процедура ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено, ЭД = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоЧтенияЭД(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектОтбора", СсылкаНаОбъект);
	Если ПараметрыОткрытия = Неопределено Тогда
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ДеревоЭлектронныхДокументов", ПараметрыФормы, , СсылкаНаОбъект.УникальныйИдентификатор());
	Иначе
		Окно = Неопределено;
		Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
			ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
			И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
			
			Окно = ПараметрыОткрытия.Окно;
		КонецЕсли;
		
		Если Не ЭД = Неопределено Тогда
			ПараметрыФормы.Вставить("ИсходныйДокумент", ЭД)
		КонецЕсли;
		
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ДеревоЭлектронныхДокументов", ПараметрыФормы,
			СсылкаНаОбъект, СсылкаНаОбъект.УникальныйИдентификатор(), Окно);
		
	КонецЕсли;
	
КонецПроцедуры

// Команда отправки приглашений обмена ЭД
Процедура ПригласитьКОбменуЭДО(ПараметрКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОбщийМодуль.ОбменСКонтрагентамиСлужебныйКлиент.ПригласитьКОбменуЭДО");
	
	ОчиститьСообщения();
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если Не ЗначениеЗаполнено(МассивСсылок) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Пригласить", Истина);
	ПараметрыОткрытия.Вставить("МассивКонтрагентов", МассивСсылок);
	ПараметрыОткрытия.Вставить("ЗапрещеноСоздаватьНастройкиЭДО", Истина);
	ОткрытьФорму("РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ФормаЗаписи", ПараметрыОткрытия);
	
КонецПроцедуры

Процедура ОтправитьКаталогТоваров(Организация, Контрагент, Договор, УникальныйИдентификатор) Экспорт
	
	НастройкиЭДОСсылка = ОбменСКонтрагентамиСлужебныйВызовСервера.СсылкаНаОбъектНастройкиЭДО(
		Организация, Контрагент, Договор);
	Контекст = Новый Структура("НастройкаЭДО", НастройкиЭДОСсылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьПодписатьОтправитьКаталогЗавершить", ЭтотОбъект, Контекст);
	ОбменСКонтрагентамиКлиентПереопределяемый.ОткрытьФормуПодбораТоваров(УникальныйИдентификатор, ОписаниеОповещения);
	
КонецПроцедуры

Процедура СформироватьСоглашениеПоШаблону(Организация, Контрагент, Договор) Экспорт
	
	НастройкиЭДОСсылка = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗаполнитьСоглашениеОбОбменеЭД(
		Организация, Контрагент, Договор);
	
	Если ЗначениеЗаполнено(НастройкиЭДОСсылка) Тогда
		ПараметрыФормы = Новый Структура("ДокументОснование", НастройкиЭДОСсылка);
		ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Команда открытия формы настроек внутреннего ЭДО.
//
Процедура ОткрытьНастройкиВнутреннегоЭДО(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОткрытьФормуНастройкиВнутреннегоЭДО(ПараметрКоманды);
	
КонецПроцедуры

// Обработчик команды отправки печатной формы по ЭДО.
//
// Параметры:
//  ПараметрКоманды - Ссылка - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ПараметрыВыполненияКоманды - Структура - дополнительные параметры просмотра.
//
Процедура ОтправитьПечатнуюФормуПоЭДОКоманда(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	СуществуютЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СуществуютЭДНаОсновании(ПараметрКоманды);
	
	Если СуществуютЭД Тогда 
		ПараметрыФормы = Новый Структура("ДокументОснование", ПараметрКоманды);
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.СписокСформированныхДокументов", ПараметрыФормы, 
		ПараметрКоманды,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	ОтправитьПечатнуюФормуПоЭДО(ПараметрКоманды);
	
КонецПроцедуры

Процедура ОтправитьПечатнуюФормуПоЭДО(ПараметрКоманды) Экспорт

	СписокКоманд = Новый СписокЗначений;
	КомандыПечати = ОбменСКонтрагентамиСлужебныйВызовСервера.ДоступныеКомандыПечатиОбъекта(ПараметрКоманды);
	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		СписокКоманд.Добавить(КомандаПечати, КомандаПечати.Представление);
	КонецЦикла;
	
	Если СписокКоманд.Количество() = 1 Тогда
		
		 ПослеВыбораПечатнойФормы(СписокКоманд[0], ПараметрКоманды);
		
	Иначе
	
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораПечатнойФормы", ЭтотОбъект, ПараметрКоманды);
		СписокКоманд.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выберите печатную форму для формирования'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораПечатнойФормы(Результат, ОбъектПечати) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	РезультатПечати = ОбменСКонтрагентамиСлужебныйВызовСервера.ПечатныеФормыДокументов(Результат.Значение, 
	ОбъектПечати, ТипФайлаТабличногоДокумента.PDF);
	
	Если РезультатПечати.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПечати.Количество() = 1 Тогда
		
		ПараметрыФормы = Новый Структура;   
		ПараметрыФормы.Вставить("ДвоичныеДанныеФайла", РезультатПечати[0].ДвоичныеДанные);
		ПараметрыФормы.Вставить("НаименованиеФайла", СтрЗаменить(РезультатПечати[0].ИмяФайла, ".pdf", ""));
		ПараметрыФормы.Вставить("Расширение", "pdf");
		
		Если ЗначениеЗаполнено(ОбъектПечати) Тогда
			ПараметрыФормы.Вставить("ДокументОснование", ОбъектПечати); 
		КонецЕсли;
		
		ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор); 
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДокументОснование", ОбъектПечати);
		ДанныеДокументов = Новый Массив;
		
		Для Каждого ПечатныйДокумент Из РезультатПечати Цикл
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ДвоичныеДанныеФайла", ПечатныйДокумент.ДвоичныеДанные);
			ПараметрыДокумента.Вставить("НаименованиеФайла", СтрЗаменить(ПечатныйДокумент.ИмяФайла, ".pdf", ""));
			ПараметрыДокумента.Вставить("Расширение", "pdf");  	
			
			ДанныеДокументов.Добавить(ПараметрыДокумента);
			
		КонецЦикла;
		
		ДополнительныеПараметры.Вставить("ДанныеДокументов", ДанныеДокументов);
		
		ШаблонВопроса = НСтр("ru='Будет сформировано %1 электронных документа. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, РезультатПечати.Количество());
		
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросОФормированииДокументов", 
			ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиКлиент"), ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru='Формирование документов'"));
		
	КонецЕсли;

КонецПроцедуры    

#КонецОбласти

#Область ОбработчикиЭлементовФорм

// Только для внутреннего использования
Процедура ОбработкаЗавершенияТестаСертификата(Результат, Контекст) Экспорт
	
	ОбработкаЗавершения = Контекст.ОбработкаЗавершения;
	Контекст.ДополнительныеПараметры.Очистить();
	Контекст.Очистить();
	
	Если ТипЗнч(ОбработкаЗавершения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПредставлениеЗаявленияНаПодключениеКЭДО(РезультатВыполнения, Контекст) Экспорт
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://portal.1c.ru/applications/30/licenseAgreement");
	
КонецПроцедуры

Процедура ОбработатьПредставлениеДанныхДляОператораЭДО(РезультатВыполнения, Контекст) Экспорт
	
	ШаблонИмениВременногоФайла = НСтр("ru = 'Данные для регистрации у оператора ЭДО_%1'");
	ИмяВременногоФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениВременногоФайла,
		Контекст.РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ИмяВременногоФайлаСРасширением = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ИмяВременногоФайла, "xml");
	
	СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(Контекст.ДвоичныеДанныеДляОператораЭДО, Новый УникальныйИдентификатор);
	Контекст.Вставить("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДвоичныеДанныеФайла);
	
	ФайловаяСистемаКлиент.ОткрытьФайл(СсылкаНаДвоичныеДанныеФайла,, ИмяВременногоФайлаСРасширением);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияСертификатовВСервисеЭДО

Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДО(Оповещение, ДанныеПакета, КонтекстОперации = Неопределено) Экспорт
	
	Если НЕ (ДанныеПакета.Свойство("РеквизитыПакета") И ЗначениеЗаполнено(ДанныеПакета.РеквизитыПакета))
		ИЛИ НЕ (ДанныеПакета.Свойство("ДвоичныеДанныеДляОператораЭДО") И ЗначениеЗаполнено(ДанныеПакета.ДвоичныеДанныеДляОператораЭДО))
		ИЛИ НЕ (ДанныеПакета.Свойство("ДвоичныеДанныеСоглашенияНаПодключениеЭДО") 
			И ЗначениеЗаполнено(ДанныеПакета.ДвоичныеДанныеСоглашенияНаПодключениеЭДО)) Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстОперацииПодписания = Неопределено;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДвоичныеДанныеСоглашенияНаПодключениеЭДО", ДанныеПакета.ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	Контекст.Вставить("РеквизитыПакета", ДанныеПакета.РеквизитыПакета);
	Контекст.Вставить("ДвоичныеДанныеДляОператораЭДО", ДанныеПакета.ДвоичныеДанныеДляОператораЭДО);
	Контекст.Вставить("ОператорЭДОСертификат", ДанныеПакета.ОператорЭДОСертификат);
	Контекст.Вставить("Оповещение", Оповещение);
	Контекст.Вставить("КонтекстОперации", КонтекстОперации);
	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("СформироватьИОтправитьРегистрационныйПакет1СЭДОПослеПодписания", ЭтотОбъект, Контекст);
	
	ОписаниеДанных = Новый Структура;
	
	Операция = НСтр("ru = 'Подписание регистрационных данных на подключение к сервису 1С-ЭДО'");
	ОписаниеДанных.Вставить("Операция", Операция);
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(ДанныеПакета.ДобавляемыйСертификат);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	
	ОписаниеДанных.Вставить("НаборДанных",         Новый Массив);
	ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДанныеПакета.ДвоичныеДанныеСоглашенияНаПодключениеЭДО));
	ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДанныеПакета.ДвоичныеДанныеДляОператораЭДО));
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	ОписаниеДанных.Вставить("КонтекстОперации",    КонтекстОперацииПодписания);
	
	СписокПредставлений = Новый СписокЗначений;
	
	Представление = НСтр("ru = 'Пользовательское соглашение на подключение к сервису 1С-ЭДО'");
	ОписаниеПредставленияЗаявления = Новый ОписаниеОповещения("ОбработатьПредставлениеЗаявленияНаПодключениеКЭДО", ЭтотОбъект, Контекст);
	СписокПредставлений.Добавить(ОписаниеПредставленияЗаявления, Представление);
	
	Представление = НСтр("ru = 'Данные для регистрации учетной записи у оператора ЭДО'");
	ОписаниеПредставленияДанных = Новый ОписаниеОповещения("ОбработатьПредставлениеДанныхДляОператораЭДО", ЭтотОбъект, Контекст);
	СписокПредставлений.Добавить(ОписаниеПредставленияДанных, Представление);
	
	ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
	ОписаниеДанных.Вставить("ПредставлениеНабора", НСтр("ru = 'Пользовательское соглашение, Данные для регистрации у оператора ЭДО'"));
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
	
КонецПроцедуры

Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДОПослеШифрования(РезультатВыполнения, Контекст) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если Не РезультатВыполнения.Свойство("ЗашифрованныеДанные") Тогда
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, НовыйРезультатОперацииВСервисе1СЭДО());
			Контекст.Очистить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыполнения.ЗашифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
		ЗашифрованныеДвоичныеДанныеОператораЭДО	= РезультатВыполнения.ЗашифрованныеДанные;
	Иначе
		ЗашифрованныеДвоичныеДанныеОператораЭДО = ПолучитьИзВременногоХранилища(РезультатВыполнения.ЗашифрованныеДанные);
	КонецЕсли;
	Контекст.Вставить("ЗашифрованныеДанныеОператораЭДО", ЗашифрованныеДвоичныеДанныеОператораЭДО);
	СформироватьИОтправитьРегистрационныйПакет1СЭДОЗавершение(Контекст);
	
КонецПроцедуры

Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДОАутентификация(Результат, Контекст = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		// Пользователь отказался от ввода логина и пароля.
		СтруктураВозврата = НовыйРезультатОперацииВСервисе1СЭДО();
		СтруктураВозврата.КонтекстОперации = Контекст.КонтекстОперации;
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	СформироватьИОтправитьРегистрационныйПакет1СЭДОЗавершение(Контекст);
	
КонецПроцедуры

Процедура ПроверитьВыполнениеЗаявкиНаРегистрацию(Результат, Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеВУчете

// Показывает окно для ввод (выбора) значения учетного документа.
// Выбранное значение передается в оповещение о выборе.
//
// Параметры:
//  Настройки - Структура - настройки подбора учетного документа.
//   * ИмяОбъектаМетаданных - Строка - полное имя объекта метаданных для выбора.
//   * ИмяТипаСсылки - Строка - имя типа ссылки для выбора. Например, "ДокументСсылка.ПоступлениеТоваровУслуг".
//   * Контрагент - ОпределяемыйТип.УчастникЭДО - контрагент по электронному документу.
//   * Организация - ОпределяемыйТип.Организация - организация по электронному документу.
//  ОповещениеОВыборе - ОписаниеОповещения - оповещение, которое выполняется при вводе (выборе) значения.
//
Процедура ПоказатьПодборУчетногоДокумента(Знач Настройки, Знач ОповещениеОВыборе) Экспорт
	
	СтандартнаяОбработка = Истина;
	ОбменСКонтрагентамиКлиентПереопределяемый.ПриПодбореУчетногоДокумента(Настройки, ОповещениеОВыборе, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Подсказка = НСтр("ru = 'Укажите документ отражения в учете'");
	ПоказатьВводЗначения(ОповещениеОВыборе,, Подсказка, Новый ОписаниеТипов(Настройки.ИмяТипаСсылки));
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияСертификатовВСервисеЭДО

// Открывает помощник регистрации сертификатов во время выполнении операции подписания или отправки
// электронного документа если для продолжения операции нет валидного сертификата.
//
// Параметры:
//  ПараметрыРегистрации - структура, содержит параметры открытия формы регистрации сертификатов.
//    * Операция        - Строка - Представление текущей операции. "Подписание", "Отправка" или "Прочее".
//    * АдресДанных     - Строка - Адрес таблицы значений во временном хранилище. Используется при виде операции "Подписание".
//    * ПрофилиНастроек - Массив - Профили настроек ЭДО, у которых нет валидных сертификатов.
//                                 Используется при виде операции "Отправка" или "Прочее".
//  ВладелецФормы - ФормаКлиентскогоПриложения - форма-владелец.
//  ОповещениеОЗакрытии - ОписаниеОповещения - описание оповещения, которое будет вызвано при закрытии.
//
Процедура ОткрытьФормуПомощникаРегистрацииСертификатов(ПараметрыРегистрации, ВладелецФормы = Неопределено,
	ОповещениеОЗакрытии = Неопределено) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Операция",              ПараметрыРегистрации.Операция);
	ПараметрыОповещения.Вставить("АдресТаблицыДанных",    ПараметрыРегистрации.АдресТаблицыДанных);
	ПараметрыОповещения.Вставить("ПрофилиНастроек",       ПараметрыРегистрации.ПрофилиНастроек);
	ПараметрыОповещения.Вставить("ФормаПомощникаОткрыта", Ложь);
	
	Оповестить("ПоказатьПомощникРегистрацииСертификатов", ПараметрыОповещения);
	
	Если НЕ ПараметрыОповещения.ФормаПомощникаОткрыта Тогда
		
		Если ВладелецФормы <> Неопределено Тогда
			ОткрытьФорму("РегистрСведений.СертификатыУчетныхЗаписейЭДО.Форма.ПомощникРегистрацииСертификатов", ПараметрыРегистрации,
				ВладелецФормы, ВладелецФормы.УникальныйИдентификатор,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОткрытьФорму("РегистрСведений.СертификатыУчетныхЗаписейЭДО.Форма.ПомощникРегистрацииСертификатов", ПараметрыРегистрации,,,,,
				ОповещениеОЗакрытии);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НачатьОтправкуПолучениеЭлектронныхДокументов

Процедура ПолучитьНастройкиЭДОИПараметрыСертификатовНачало(Результат, Контекст) Экспорт
	
	// Если контекст пустой, значит, операцию уже отменили.
	Если Не ЗначениеЗаполнено(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Неопределено;
	ТипРезультата = ТипЗнч(Результат);
	Если ТипРезультата = Тип("Соответствие") Тогда
		МассивОтпечатков = Новый Массив;
		Для Каждого КлючЗначение Из Результат Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
		ПараметрыЗадания = Новый Структура("ОтпечаткиСертификатов", МассивОтпечатков);
		Контекст.ОтпечаткиСертификатовНаКлиенте = МассивОтпечатков;
	ИначеЕсли ТипРезультата = Тип("Структура") Тогда
		ПараметрыЗадания = Результат;
		Если Контекст.Свойство("ОтпечаткиСертификатовНаКлиенте")
			И ТипЗнч(Контекст.ОтпечаткиСертификатовНаКлиенте) = Тип("Массив")Тогда
			ПараметрыЗадания.Вставить("ОтпечаткиСертификатов", Контекст.ОтпечаткиСертификатовНаКлиенте);
		Иначе 
			ПараметрыЗадания.Вставить("ОтпечаткиСертификатов", Новый Массив);
		КонецЕсли;
	ИначеЕсли Контекст.ПодписыватьНаСервере Тогда
		Контекст.ПроверятьПодписиНаСервере = Истина;
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ЗначениеФункциональнойОпции(
			"ИспользоватьПрямойОбменЭлектроннымиДокументами") Тогда
		Контекст.ОшибкаПолученияОтпечатков = Результат;
	Иначе
		ОбработатьОшибкуПолученияОтпечатков(Результат, Контекст);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗадания = Неопределено Тогда
		ПараметрыЗадания = Новый Структура("ОтпечаткиСертификатов", Новый Массив);
	КонецЕсли;
	
	ПараметрыЗадания.Вставить("ПовторноеПолучение", Контекст.ПовторноеПолучение);
	ПараметрыЗадания.Вставить("МассивУчетныхЗаписей", Контекст.МассивУчетныхЗаписей);
	
	Контекст.ОтпечаткиСертификатовНаКлиенте = ПараметрыЗадания.ОтпечаткиСертификатов;
	Если Не Контекст.Свойство("КонтекстОперации") Тогда
		Контекст.Вставить("КонтекстОперации", ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации());
	КонецЕсли;
	ПараметрыЗадания.Вставить("КонтекстОперации", Контекст.КонтекстОперации);
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗапуститьПолучениеНастроекЭДОИПараметровСертификатов(
		ПараметрыЗадания, Контекст.УникальныйИдентификатор);
	
	Контекст.Вставить("ИдентификаторЗадания", ДлительнаяОперация.ИдентификаторЗадания);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьНастройкиЭДОИПараметрыСертификатовЗавершение", ЭтотОбъект, Контекст);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПолучитьНастройкиЭДОИПараметрыСертификатовЗавершение(Результат, Контекст) Экспорт
	
	// Если контекст пустой, значит, операцию уже отменили.
	Если Не ЗначениеЗаполнено(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		Если Контекст.Свойство("ФормаДлительнойОперации") Тогда
			Контекст.ФормаДлительнойОперации.Закрыть();
		Иначе
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершенииОтправкиПолучения, Неопределено);
		КонецЕсли;
		
		Если Результат.Статус = "Ошибка" Тогда
			ВидОперации = НСтр("ru = 'Получение настроек ЭДО.'");
			ТекстСообщения = НСтр("ru = 'При получении настроек ЭДО произошла ошибка:'")
				+ Символы.ПС + Результат.КраткоеПредставлениеОшибки;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, Результат.ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	РезультатПолученияНастроек = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Контекст.Вставить("КонтекстОперации", РезультатПолученияНастроек.КонтекстОперации);
	
	Если Контекст.Свойство("ОбработанныеУчетныеЗаписи") Тогда
		ОбработанныеУчетныеЗаписи = Контекст.ОбработанныеУчетныеЗаписи;
	Иначе 
		ОбработанныеУчетныеЗаписи = Новый Соответствие;
	КонецЕсли;
	
	ЗначениеСвойства = Неопределено;
	Если РезультатПолученияНастроек.НастройкиЭДОИПараметрыСертификатов.Свойство(
		"УчетныеЗаписиБезДоступаКСертификатам", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		Для каждого КлючИЗначение Из ЗначениеСвойства Цикл
			ОбработаннаяУчетнаяЗапись = ОбменСКонтрагентамиДиагностикаКлиентСервер.НовоеОписаниеОбработаннойУчетнойЗаписи();
			ОбработаннаяУчетнаяЗапись.Идентификатор = КлючИЗначение.Ключ;
			КоличествоСертификатов = КлючИЗначение.Значение.Количество();
			Если КоличествоСертификатов = 1 Тогда
				ТекстОшибки = НСтр("ru = '<a href = ""Сертификаты"">Сертификат</a> доступен, но в поле ""Пользователь"" сертификата учетной записи указан пользователь, отличный от текущего'");
			Иначе 
				ТекстОшибки = НСтр("ru = '<a href = ""Сертификаты"">Сертификаты(%1)</a> доступны, но в поле ""Пользователь"" сертификата учетной записи указан пользователь, отличный от текущего'");
			КонецЕсли;
			ИнформацияОбОшибке = ОбработаннаяУчетнаяЗапись.ИнформацияОбОшибке;
			ИнформацияОбОшибке.ВидОшибки = ВидОшибкиОтправкиИПолученияНетДоступаКСертификатам();
			ИнформацияОбОшибке.КраткоеПредставление = НСтр("ru = 'Нет доступа к сертификатам учетной записи'");
			ИнформацияОбОшибке.ПодробноеПредставление.Текст = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ТекстОшибки, КоличествоСертификатов);
			Обработчик = Новый Структура;
			Обработчик.Вставить("ИмяПроцедуры", "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьСписокСертификатов");
			Обработчик.Вставить("Параметр", КлючИЗначение.Значение);
			ИнформацияОбОшибке.ПодробноеПредставление.ОбработчикиНажатия.Вставить("Сертификаты", Обработчик);
			ОбработанныеУчетныеЗаписи.Вставить(КлючИЗначение.Ключ, ОбработаннаяУчетнаяЗапись);
		КонецЦикла;
		
	КонецЕсли;
	
	Если РезультатПолученияНастроек.НастройкиЭДОИПараметрыСертификатов.Свойство(
		"УчетныеЗаписиБезДоступныхСертификатов", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		Для каждого УчетнаяЗапись Из ЗначениеСвойства Цикл
			ОбработаннаяУчетнаяЗапись = ОбменСКонтрагентамиДиагностикаКлиентСервер.НовоеОписаниеОбработаннойУчетнойЗаписи();
			ОбработаннаяУчетнаяЗапись.Идентификатор = УчетнаяЗапись;
			ТекстОшибки = НСтр("ru = 'Недоступен ни один личный сертификат из привязанных к учетной записи'");
			ИнформацияОбОшибке = ОбработаннаяУчетнаяЗапись.ИнформацияОбОшибке;
			ИнформацияОбОшибке.ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОтправкиИПолученияНетДоступныхСертификатов();
			ИнформацияОбОшибке.КраткоеПредставление = НСтр("ru = 'Нет доступных сертификатов'");
			ИнформацияОбОшибке.ПодробноеПредставление.Текст = ТекстОшибки;
			ОбработанныеУчетныеЗаписи.Вставить(УчетнаяЗапись, ОбработаннаяУчетнаяЗапись);
		КонецЦикла;
		
	КонецЕсли;
	
	Контекст.Вставить("КонтекстОперации", РезультатПолученияНастроек.КонтекстОперации);
	
	ПовторноеПолучение = Неопределено;
	Контекст.Свойство("ПовторноеПолучение", ПовторноеПолучение);
	
	Если Контекст.ПовторноеПолучение = Ложь Тогда
		ПараметрыОтправкиПолучения = РезультатПолученияНастроек.ПараметрыОтправкиПолучения;
	
		Контекст.ЕстьПрямойОбмен = ПараметрыОтправкиПолучения.ЕстьПрямойОбмен;
		ЕстьПрофилиЭДОБезСертификатов = ПараметрыОтправкиПолучения.Свойство("ПрофилиЭДОБезСертификатов");
		Если НЕ ПараметрыОтправкиПолучения.ЕстьВозможностьОтправкиПолученияЭД Тогда
			
			КонтекстОперации = Контекст.КонтекстОперации;
			Если Контекст.Свойство("ФормаДлительнойОперации") Тогда
				Контекст.ФормаДлительнойОперации.Закрыть();
			Иначе
				ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершенииОтправкиПолучения, Неопределено);
			КонецЕсли;
			
			Если ЕстьПрофилиЭДОБезСертификатов Тогда
				ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
	
		Если ЕстьПрофилиЭДОБезСертификатов Тогда
			// Откроем помощник регистрации сертификатов после отправки/получения.
			Контекст.Вставить("ПрофилиЭДОБезСертификатов", ПараметрыОтправкиПолучения.ПрофилиЭДОБезСертификатов);
		КонецЕсли;
	КонецЕсли;
	
	ПринятьУсловияИспользования = Неопределено;
	Если РезультатПолученияНастроек.Свойство("ПринятьУсловияИспользования", ПринятьУсловияИспользования) Тогда
		ОткрытьФормуУсловийИспользованияСервиса(ПринятьУсловияИспользования, Контекст);
		Возврат;
	КонецЕсли;
	
	НастройкиЭДОИПараметрыСертификатов = РезультатПолученияНастроек.НастройкиЭДОИПараметрыСертификатов;
	
	Если НастройкиЭДОИПараметрыСертификатов.Свойство("СоотвСертификатовИИхСтруктур", ЗначениеСвойства)
		И ТипЗнч(ЗначениеСвойства) = Тип("Соответствие")
		И ЗначениеСвойства.Количество() = 0
		И Не Контекст.ЕстьПрямойОбмен Тогда
		ТекстОшибки = НСтр("ru = 'Нет доступных сертификатов'");
		Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(НСтр("ru = 'Получение настроек ЭДО и параметров сертификатов'"),
			ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиКриптография(),
			ТекстОшибки, ТекстОшибки);
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ДобавитьОшибку(Контекст.КонтекстОперации, Ошибка, Ложь);
	КонецЕсли;
	НастройкиЭДОИПараметрыСертификатов.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
	НастройкиЭДОИПараметрыСертификатов.Вставить("КонтекстОперации", Контекст.КонтекстОперации);
	
	СоответствиеСоглашенийИСертификатов = Неопределено;
	Если НастройкиЭДОИПараметрыСертификатов.Свойство(
		"СоотвСоглашенийИМассиваСертификатовАвторизации", СоответствиеСоглашенийИСертификатов) Тогда
		
		ИД_Параметров = Строка(Новый УникальныйИдентификатор);
		ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие." + ИД_Параметров, НастройкиЭДОИПараметрыСертификатов);
		
		Оповещение = Новый ОписаниеОповещения("ОтправитьПолучитьПакетыЭлектронныхДокументовНачало", ЭтотОбъект, Контекст);
		
		Параметры = Новый Структура;
		Параметры.Вставить("ИД_Параметров",                       ИД_Параметров);
		Параметры.Вставить("ОбработчикОповещения",                Оповещение);
		Параметры.Вставить("СоответствиеСоглашенийИСертификатов", СоответствиеСоглашенийИСертификатов);
		Параметры.Вставить("ПаролиКСертификатам",                 Контекст.ПаролиКСертификатам);
		Параметры.Вставить("КонтекстОперации",          Контекст.КонтекстОперации);
		Параметры.Вставить("ОбработанныеУчетныеЗаписи", ОбработанныеУчетныеЗаписи);
		РасшифроватьМаркер(Неопределено, Параметры);
	Иначе
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов",
			НастройкиЭДОИПараметрыСертификатов.СоответствиеПрофилейИПараметровСертификатов);
			
		ОтправитьПолучитьПакетыЭлектронныхДокументовНачало(ПараметрыОповещения, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПолучитьПакетыЭлектронныхДокументовНачало(Результат, Контекст) Экспорт
	
	// Если контекст пустой, значит, операцию уже отменили.
	Если Не ЗначениеЗаполнено(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейИПараметровСертификатов = Неопределено;
	Если ТипЗнч(Результат) <> Тип("Структура")
		ИЛИ НЕ Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов) Тогда
			Если Контекст.Свойство("ФормаДлительнойОперации") Тогда
				Контекст.ФормаДлительнойОперации.Закрыть();
			Иначе
				ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершенииОтправкиПолучения, Неопределено);
			КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Результат.Свойство("ПаролиКСертификатам", Контекст.ПаролиКСертификатам);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
	ПараметрыЗадания.Вставить("ПовторноеПолучение", Контекст.ПовторноеПолучение);
	ПараметрыЗадания.Вставить("КоличествоПопыток", Контекст.КоличествоПопыток);
	ПараметрыЗадания.Вставить("ПроверятьПодписиНаСервере", Контекст.ПроверятьПодписиНаСервере);
	
	КонтекстОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Результат, "КонтекстОперации", Контекст.КонтекстОперации);
	ПараметрыЗадания.Вставить("КонтекстОперации", КонтекстОперации);
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗапуститьОтправкуПолучениеПакетовЭлектронныхДокументов(
		ПараметрыЗадания, Контекст.УникальныйИдентификатор);
	
	Контекст.Вставить("ИдентификаторЗадания", ДлительнаяОперация.ИдентификаторЗадания);
	
	ОбработанныеУчетныеЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Результат, "ОбработанныеУчетныеЗаписи", Новый Соответствие);
	Контекст.Вставить("ОбработанныеУчетныеЗаписи", ОбработанныеУчетныеЗаписи);
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьПолучитьПакетыЭлектронныхДокументовЗавершение", ЭтотОбъект, Контекст);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	КонтекстКлиент = Неопределено;
	Контекст.Свойство("КонтекстКлиент", КонтекстКлиент);
	Если ТипЗнч(КонтекстКлиент) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОжидания, КонтекстКлиент, "ВыводитьСообщения");
	КонецЕсли;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ОтправитьПолучитьПакетыЭлектронныхДокументовЗавершение(Результат, Контекст) Экспорт
	
	// Если контекст пустой, значит, операцию уже отменили.
	Если Не ЗначениеЗаполнено(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ИдентификаторЗадания", Неопределено);
	КонтекстКлиент = Неопределено;
	Контекст.Свойство("КонтекстКлиент", КонтекстКлиент);
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		
		Если Контекст.Свойство("ФормаДлительнойОперации") Тогда
			Контекст.ФормаДлительнойОперации.Закрыть();
		Иначе
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершенииОтправкиПолучения, Неопределено);
		КонецЕсли;
		
		Если Результат.Статус = "Ошибка" Тогда
			ВидОперации = НСтр("ru = 'Отправка и получение электронных документов.'");
			ТекстСообщения = НСтр("ru = 'При выполнении отправки и получения электронных документов произошла ошибка:'")
				+ Символы.ПС + Результат.КраткоеПредставлениеОшибки;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, Результат.ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	РезультатОтправкиПолучения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Контекст.КонтекстОперации = РезультатОтправкиПолучения.КонтекстОперации;
	Если РезультатОтправкиПолучения.Свойство("ТребуетсяПовторноеПолучение") Тогда
		Контекст.ПовторноеПолучение = Истина;
		Контекст.КоличествоПопыток = Контекст.КоличествоПопыток + 1;
		Параметры = Новый Структура;
		Параметры.Вставить("РезультатОтправкиПолучения", РезультатОтправкиПолучения);
		
		ПолучитьНастройкиЭДОИПараметрыСертификатовНачало(Параметры, Контекст);
		Возврат;
	КонецЕсли;
	
	ОбработанныеУчетныеЗаписиПрямогоОбмена = Неопределено;
	Если РезультатОтправкиПолучения.КонтекстОперации.Свойство(
			"ОбработанныеУчетныеЗаписиПрямогоОбмена", ОбработанныеУчетныеЗаписиПрямогоОбмена) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			Контекст.ОбработанныеУчетныеЗаписи, ОбработанныеУчетныеЗаписиПрямогоОбмена, Ложь);
	КонецЕсли;
	
	КонтекстОтправленоПакетов = 0;
	Если Контекст.Свойство("ОтправленоПакетов") Тогда 
		КонтекстОтправленоПакетов = Контекст.ОтправленоПакетов;
	КонецЕсли;
	
	КонтекстПолученоПакетов = 0;
	Если Контекст.Свойство("ПолученоПакетов") Тогда 
		КонтекстПолученоПакетов =  Контекст.ПолученоПакетов;
	КонецЕсли;
	
	РезультатОтправкиПолученияОтправленоПакетов = 0;
	Если РезультатОтправкиПолучения.Свойство("ОтправленоПакетов") Тогда 
		РезультатОтправкиПолученияОтправленоПакетов = РезультатОтправкиПолучения.ОтправленоПакетов;
	КонецЕсли;
	
	РезультатОтправкиПолученияПолученоПакетов = 0;
	Если РезультатОтправкиПолучения.Свойство("ПолученоПакетов") Тогда 
		РезультатОтправкиПолученияПолученоПакетов = РезультатОтправкиПолучения.ПолученоПакетов;
	КонецЕсли;
	
	РезультатОтправкиПриглашенийПолучено = 0;
	Если РезультатОтправкиПолучения.Свойство("ПриглашенийПолучено") Тогда 
		РезультатОтправкиПриглашенийПолучено = РезультатОтправкиПолучения.ПриглашенийПолучено;
	КонецЕсли;
	
	Контекст.Вставить("ОтправленоПакетов"  , КонтекстОтправленоПакетов + РезультатОтправкиПолученияОтправленоПакетов);
	Контекст.Вставить("ПолученоПакетов"    , КонтекстПолученоПакетов   + РезультатОтправкиПолученияПолученоПакетов);
	Контекст.Вставить("ПриглашенийПолучено", РезультатОтправкиПриглашенийПолучено);
	
	ДанныеПакетов             = Неопределено;
	ПроверятьПодписиНаСервере = Неопределено;
	Если Контекст.Свойство("ПроверятьПодписиНаСервере", ПроверятьПодписиНаСервере)
		И ПроверятьПодписиНаСервере = Истина
		И РезультатОтправкиПолучения.Свойство("РаспакованныеДокументы") Тогда
		РаспаковатьПакетыЭлектронныхДокументовЗавершение(РезультатОтправкиПолучения, Контекст);
		
	ИначеЕсли РезультатОтправкиПолучения.Свойство("ДанныеПакетов", ДанныеПакетов) Тогда
		Оповещение = Новый ОписаниеОповещения("РаспаковатьПакетыЭлектронныхДокументовНачало", ЭтотОбъект, Контекст);
		НачатьОбработкуВходящихПакетовЭлектронныхДокументов(Оповещение, ДанныеПакетов, Контекст.КонтекстОперации);
		
	Иначе
		
		Если Контекст.Свойство("ФормаДлительнойОперации") Тогда
			Контекст.ФормаДлительнойОперации.Закрыть();
		Иначе
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершенииОтправкиПолучения, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Сообщения) Тогда
		Для каждого ТекущееСообщение Из Результат.Сообщения Цикл
			Если ТипЗнч(КонтекстКлиент) = Тип("Структура") Тогда
				ТекущееСообщение.ИдентификаторНазначения = КонтекстКлиент.ИдентификаторФормыВладельца;
			КонецЕсли;
			ТекущееСообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспаковатьПакетыЭлектронныхДокументовНачало(Результат, Контекст) Экспорт
	
	// Если контекст пустой, значит, операцию уже отменили.
	Если Не ЗначениеЗаполнено(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПакетовЭД = Результат.ДанныеПакетовЭД;
	КонтекстОперации = Результат.КонтекстОперации;
	
	КоличествоЭлементовКоллекции = ДанныеПакетовЭД.Количество();
	Для Счетчик = 1 По КоличествоЭлементовКоллекции Цикл
		ОбратныйИндекс = КоличествоЭлементовКоллекции - Счетчик;
		ПакетЭД = ДанныеПакетовЭД[ОбратныйИндекс];
		
		Если ПакетЭД.Свойство("ОписаниеОшибки") Тогда
			ШаблонСообщения = НСтр("ru = 'При распаковке пакетаЭД: %1 возникла ошибка:
			|%2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД.ПакетЭДСсылка,
				ПакетЭД.ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			ДанныеПакетовЭД.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДанныеПакетовЭД", ДанныеПакетовЭД);
	ПараметрыЗадания.Вставить("КонтекстОперации", КонтекстОперации);
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗапуститьРаспаковкуПакетовЭлектронныхДокументов(ПараметрыЗадания, Контекст.УникальныйИдентификатор);
	
	Контекст.Вставить("ИдентификаторЗадания", ДлительнаяОперация.ИдентификаторЗадания);
	
	Оповещение = Новый ОписаниеОповещения("РаспаковатьПакетыЭлектронныхДокументовЗавершение", ЭтотОбъект, Контекст);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура РаспаковатьПакетыЭлектронныхДокументовЗавершение(Результат, Контекст) Экспорт
	
	// Если контекст пустой, значит, операцию уже отменили.
	Если Не ЗначениеЗаполнено(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Контекст.ПроверятьПодписиНаСервере Тогда
		РезультатРаспаковки = Результат;
	ИначеЕсли Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		
		Если Контекст.Свойство("ФормаДлительнойОперации") Тогда
			Контекст.ФормаДлительнойОперации.Закрыть();
		Иначе
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершенииОтправкиПолучения, Неопределено);
		КонецЕсли;
		
		Если Результат.Статус = "Ошибка" Тогда
			ВидОперации = НСтр("ru = 'Распаковка пакетов электронных документов.'");
			ТекстСообщения = НСтр("ru = 'При распаковке пакетов электронных документов произошла ошибка:'")
				+ Символы.ПС + Результат.КраткоеПредставлениеОшибки;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, Результат.ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецЕсли;
		
		Возврат;
	Иначе
		РезультатРаспаковки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	МассивСлужебныхЭД = РезультатРаспаковки.РаспакованныеДокументы.МассивСлужебныхЭД;
	
	НовыеДокументы = РезультатРаспаковки.РаспакованныеДокументы.НовыеДокументы;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыеДокументы, МассивСлужебныхЭД);
	
	Контекст.Вставить("РаспакованоПакетов", РезультатРаспаковки.РаспакованоПакетов);
	Контекст.Вставить("НовыеДокументы", НовыеДокументы);
	
	ОшибкиБудутОбработаныАсинхронно = Ложь;
	Если МассивСлужебныхЭД.Количество() > 0 Тогда
		
		ОшибкиБудутОбработаныАсинхронно = Истина;
		// Ошибки будут обработаны при подписании и отправке служебных документов, поэтому при завершении "отправки и получения" их не обрабатываем.
		ПодписатьОтправитьСлужебныеДокументы(МассивСлужебныхЭД, Контекст.ОтпечаткиСертификатовНаКлиенте, РезультатРаспаковки.КонтекстОперации);
		
	КонецЕсли;
	
	Если Контекст.Свойство("ФормаДлительнойОперации") Тогда
		КонтекстОповещения = Контекст.ФормаДлительнойОперации.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры;
		КонтекстОповещения.КонтекстОперации = РезультатРаспаковки.КонтекстОперации;
		КонтекстОповещения.ОбрабатыватьОшибки = Не ОшибкиБудутОбработаныАсинхронно;
		Контекст.ФормаДлительнойОперации.Закрыть();
	Иначе 
		КонтекстОповещения = Контекст.ОповещениеОЗавершенииОтправкиПолучения.ДополнительныеПараметры;
		КонтекстОповещения.КонтекстОперации = РезультатРаспаковки.КонтекстОперации;
		КонтекстОповещения.ОбрабатыватьОшибки = Не ОшибкиБудутОбработаныАсинхронно;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершенииОтправкиПолучения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьОтправкуПолучениеЭлектронныхДокументов(Результат, Контекст) Экспорт
	
	// Если контекст пустой, значит, операцию уже отменили.
	Если Не ЗначениеЗаполнено(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контекст.ИдентификаторЗадания) Тогда
		ОбменСКонтрагентамиСлужебныйВызовСервера.ОтменитьВыполнениеЗадания(Контекст.ИдентификаторЗадания);
	КонецЕсли;
	
	ПриглашенийПолучено = Неопределено;
	Контекст.Свойство("ПриглашенийПолучено", ПриглашенийПолучено);
	
	Если Не ЗначениеЗаполнено(ПриглашенийПолучено) Тогда
		ПриглашенийПолучено = 0;
	КонецЕсли;
	
	ШаблонОповещения = НСтр("ru = 'Документов отправлено:(%1), получено:(%2), распаковано: (%3),
                             |Приглашений получено: (%4)'"); 
	
	ТекстОповещения = СтрШаблон(ШаблонОповещения,
		Контекст.ОтправленоПакетов, Контекст.ПолученоПакетов, Контекст.РаспакованоПакетов, ПриглашенийПолучено);
		
	ЗаголовокОповещения = НСтр("ru = 'Электронные документы'");
	
	ПараметрыДетализации = НовыеПараметрыДетализацииОперацийСДокументами();
	ПараметрыДетализации.КонтекстОперации = Контекст.КонтекстОперации;
	ПараметрыДетализации.ОбработанныеУчетныеЗаписи = Контекст.ОбработанныеУчетныеЗаписи;
	ПараметрыДетализации.РезультатыОтправкиПолучения = Контекст.КонтекстОперации.РезультатыОтправкиПолучения;
	
	ОтсутствуютУчетныеЗаписиСДоступнымиСертификатами = Ложь;
	ВидыОшибокНетДоступныхСертификатов = Новый Массив;
	ВидыОшибокНетДоступныхСертификатов.Добавить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОтправкиИПолученияНетДоступныхСертификатов());
	ВидыОшибокНетДоступныхСертификатов.Добавить(ВидОшибкиОтправкиИПолученияНетДоступаКСертификатам());
	
	Для каждого КлючИЗначение Из ПараметрыДетализации.ОбработанныеУчетныеЗаписи Цикл
		Если ВидыОшибокНетДоступныхСертификатов.Найти(КлючИЗначение.Значение.ИнформацияОбОшибке.ВидОшибки) <> Неопределено Тогда
			ОтсутствуютУчетныеЗаписиСДоступнымиСертификатами = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ДействиеПриНажатии = Новый ОписаниеОповещения("ОткрытьФормуДетализацииОперацийСДокументами",
		ОбменСКонтрагентамиСлужебныйКлиент,
		ПараметрыДетализации);
		
	КартинкаОповещения = ?(ОтсутствуютУчетныеЗаписиСДоступнымиСертификатами Или ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьОшибки(Контекст.КонтекстОперации),
		БиблиотекаКартинок.ПредупреждениеКрасноеБЭД, БиблиотекаКартинок.ЭмблемаСервиса1СЭДО48);
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, ДействиеПриНажатии, ТекстОповещения, КартинкаОповещения,
		СтатусОповещенияПользователя.Важное);
	
	НовыеДокументы = Неопределено;
	Если Контекст.Свойство("НовыеДокументы", НовыеДокументы)
		Или Контекст.Свойство("ПриглашенийПолучено") Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ЭлектронныеДокументы", НовыеДокументы);
		Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении);
	
	Если Контекст.ОбрабатыватьОшибки Тогда
		КонтекстКопия = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Контекст);
		ОбработчикПовторенияДействия = Новый ОписаниеОповещения("ПовторитьНачатьОтправкуПолучениеЭлектронныхДокументов", ЭтотОбъект, КонтекстКопия);
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.НовыеПараметрыОбработкиОшибок();
		ПараметрыОбработкиОшибок.ОбработчикПовторенияДействия = ОбработчикПовторенияДействия;
		Если ТипЗнч(Контекст.КонтекстКлиент) = Тип("Структура")
			И Контекст.КонтекстКлиент.Свойство("ФормаВладелец") Тогда
			ПараметрыОбработкиОшибок.ФормаВладелец = Контекст.КонтекстКлиент.ФормаВладелец;
		КонецЕсли;
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстКопия.КонтекстОперации, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Контекст.Очистить();
	
КонецПроцедуры

Процедура ПродолжитьОтправкуПолучениеЭлектронныхДокументовПослеПринятияУсловийСервиса(УсловияПриняты, Контекст) Экспорт
	
	// Если контекст пустой, значит, операцию уже отменили.
	Если Не ЗначениеЗаполнено(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	Если УсловияПриняты <> Истина Тогда
		Если Контекст.Свойство("ФормаДлительнойОперации") Тогда
			Контекст.ФормаДлительнойОперации.Закрыть();
		Иначе
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершенииОтправкиПолучения, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ОтпечаткиСертификатов", Контекст.ОтпечаткиСертификатовНаКлиенте);
	ПараметрыЗадания.Вставить("ПовторноеПолучение", Контекст.ПовторноеПолучение);
	ПараметрыЗадания.Вставить("МассивУчетныхЗаписей", Контекст.МассивУчетныхЗаписей);
	ПараметрыЗадания.Вставить("КонтекстОперации", Контекст.КонтекстОперации);
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗапуститьПолучениеНастроекЭДОИПараметровСертификатов(
		ПараметрыЗадания, Контекст.УникальныйИдентификатор);
	
	Контекст.Вставить("ИдентификаторЗадания", ДлительнаяОперация.ИдентификаторЗадания);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьНастройкиЭДОИПараметрыСертификатовЗавершение", ЭтотОбъект, Контекст);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПовторитьНачатьОтправкуПолучениеЭлектронныхДокументов(Результат, Контекст) Экспорт
	
	НачатьОтправкуПолучениеЭлектронныхДокументов(Контекст.ОповещениеОЗавершении,
		Контекст.КонтекстКлиент, Контекст.МассивУчетныхЗаписей);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПриглашениями

// Загружает шаблон соглашения на роуминг из облачного хранилища настроек на сервер,
// заполняет данными организации и получает файл на клиенте.
//
// Параметры:
//  Результат - ОписаниеОповещения - оповещение, которое вызывается при завершении процедуры.
//     * ФайлПолучен - Булево - признак получения файла.
//     * ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения.
//  Контекст  - Структура - параметры соглашения на роуминг.
//     * ИдентификаторЭДО - Строка - идентификатор ЭДО организации.
//
Процедура ПолучитьСоглашениеНаРоуминг(Результат, Контекст) Экспорт
	
	Если Не Контекст.Свойство("СледующееДействие") Тогда
		
		Контекст.Вставить("СледующееДействие", "ПодготовитьШаблон");
		ИнициализироватьКонтекстПолученияСоглашенияНаРоуминг(Результат, Контекст);
		
	ИначеЕсли Контекст.СледующееДействие = "ПодготовитьШаблон" Тогда
		
		Контекст.СледующееДействие = "ПолучитьФайл";
		ПодготовитьШаблонСоглашенияНаРоуминг(Результат, Контекст);
		
	ИначеЕсли Контекст.СледующееДействие = "ПолучитьФайл" Тогда
		
		Контекст.СледующееДействие = "Завершить";
		ПолучитьФайлШаблонаСоглашенияНаРоуминг(Результат, Контекст);
		
	ИначеЕсли Контекст.СледующееДействие = "Завершить" Тогда
		
		ПодготовитьРезультатПолученияСоглашенияНаРоуминг(Результат, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры 

// Дополняет учетную запись организации данными файла соглашения на роуминг.
//
// Параметры:
//  Результат - ОписаниеОповещения - оповещение, которое вызывается при завершении процедуры.
//     * Результат - Структура - результат прикрепления файла:
//        * Статус   - Булево - признак того, что файл прикреплен к учетной записи организации.
//        * ИмяФайла - Строка - имя прикрепленного файла.
//        * ОписаниеОшибки - Строка - текст ошибки, если прикрепить файл не удалось.
//     * ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения.
//  Контекст  - Структура - параметры процедуры.
//     * ИдентификаторОрганизации - Строка - идентификатор ЭДО организации.
//
Процедура ПрикрепитьСоглашениеНаРоуминг(Результат, Контекст) Экспорт
	
	Если Не Контекст.Свойство("СледующееДействие") Тогда
		
		Контекст.Вставить("СледующееДействие", "ВыбратьФайл");
		ИнициализироватьКонтекстПрикрепленияСоглашенияНаРоуминг(Результат, Контекст);
		
	ИначеЕсли Контекст.СледующееДействие = "ВыбратьФайл" Тогда
		
		Контекст.СледующееДействие = "ЗаписатьДанныеФайла";
		ВыбратьФайлСоглашенияНаРоуминг(Контекст);
		
	ИначеЕсли Контекст.СледующееДействие = "ЗаписатьДанныеФайла" Тогда
		
		Контекст.СледующееДействие = "Завершить";
		ЗаписатьДанныеФайлаСоглашенияНаРоуминг(Результат, Контекст);
		
	ИначеЕсли Контекст.СледующееДействие = "Завершить" Тогда
		
		ПодготовитьРезультатПрикрепленияСоглашениеНаРоуминг(Результат, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОжиданиеОбновленияИнформацииПоПриглашениямВ1СЭДО(Знач СоответствиеПрофилейИПараметровСертификатов, ОписаниеОповещенияЗавершение) Экспорт
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.НачатьОбновлениеИнформацииПоПриглашениямВ1СЭДО(
		СоответствиеПрофилейИПараметровСертификатов, Новый УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещенияЗавершение, ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

// Открывает форму настройки отправки документов ЭДО
//
// Параметры:
//  ПараметрыФормы		 - Структура - параметры, передаваемые в форму настройки регламента ЭДО.
//  ВладелецФормы		 - Произвольный - форма или элемент управления другой формы.
//  РежимОткрытияОкна	 - РежимОткрытияОкнаФормы - режим открытия окна в котором будет открыта форма
//
Процедура ОткрытьФормуНастройкиОтправкиЭДО(ПараметрыФормы, ВладелецФормы, Знач РежимОткрытияОкна = Неопределено) Экспорт
	
	Если РежимОткрытияОкна = Неопределено Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.Форма.НастройкиОтправкиДокументов.ОткрытиеФормы");
	
	ОткрытьФорму("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.Форма.НастройкиОтправкиДокументов", 
		ПараметрыФормы,
		ВладелецФормы,,,,,
		РежимОткрытияОкна);

КонецПроцедуры

// Открывает форму настройки отражения в учете ЭДО
//
// Параметры:
//  ПараметрыФормы		 - Структура - параметры, передаваемые в форму настройки регламента ЭДО.
//  ВладелецФормы		 - Произвольный - форма или элемент управления другой формы.
//  РежимОткрытияОкна	 - РежимОткрытияОкнаФормы - режим открытия окна в котором будет открыта форма
//
Процедура ОткрытьФормуНастройкиОтраженияВУчетеЭДО(ПараметрыФормы, ВладелецФормы, Знач РежимОткрытияОкна = Неопределено) Экспорт
	
	Если РежимОткрытияОкна = Неопределено Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Форма.НастройкиОтраженияДокументовВУчете.ОткрытиеФормы");
	
	ОткрытьФорму("РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Форма.НастройкиОтраженияДокументовВУчете", 
		ПараметрыФормы,
		ВладелецФормы,,,,,
		РежимОткрытияОкна);

КонецПроцедуры

#Область РаботаСОперациямиЭДО

// Открывает форму настройки операции ЭДО.
//
// Параметры:
//  ОперацияЭДО - Структура - операция для настройки параметров. См. ОбменСКонтрагентами.НоваяОперацияЭДО.
//  ОбработкаЗавершения - ОписаниеОповещения - описание процедуры, которая будет вызвана при закрытии формы со следующими параметрами:
//   * ОперацияЭДО - Структура - измененная в форме операция ЭДО.
//                 - Неопределено - пользователь не сохранил изменения.
//   * ДополнительныеПараметры - Произвольный - параметры указанные при создании объекта ОбработкаЗавершения.
//
Процедура ОткрытьФормуНастройкиОперацииЭДО(Знач ОперацияЭДО, Знач ОбработкаЗавершения) Экспорт
	
	ОперацияПодключенияЭДО = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяОперацияПодключенияЭДО();
	
	Если ОперацияЭДО.Действие = ОперацияПодключенияЭДО.Действие Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", ОперацияЭДО.Параметры.Организация);
		ПараметрыФормы.Вставить("ОперацияЭДО", ОперацияЭДО);
		ПараметрыФормы.Вставить("НастройкаОперацииЭДО", Истина);
		
		ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.ПомощникПодключенияЭДО",
			ПараметрыФормы,,,,, ОбработкаЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, ОперацияЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеОперацииЭДО(Знач ОперацияЭДО, Знач ОбработкаЗавершения, Знач ОбработкаПрогрессаВыполнения = Неопределено) Экспорт
	
	ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьКешиОператоровЭДОИФорматов();
	
	ПроцессВыполнения = НовыйПроцессВыполненияОперацииЭДО(ОперацияЭДО, ОбработкаЗавершения, ОбработкаПрогрессаВыполнения);
	
	ВыполнитьОперациюЭДО(Неопределено, ПроцессВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область Интеграция1СЭДОИ1СОтчетности

Функция СсылкаНаСертификатКриптографии(Знач Сертификат) Экспорт
	
	Отпечаток = Сертификат.Отпечаток;
	ОтпечатокСтрокой = Base64Строка(Отпечаток);
	
	Возврат ОбменСКонтрагентамиСлужебныйВызовСервера.СсылкаНаСертификатКриптографии(ОтпечатокСтрокой);
	
КонецФункции

#КонецОбласти

Процедура УстановитьCryptoPRO(ОповещениеОЗавершении, Форма) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Контекст.Вставить("ВладелецФормы", Форма.ВладелецФормы);
		Контекст.Вставить("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения("УстановитьCryptoProCSPПослеВводаРегистрационныхДанных", ЭтотОбъект, Контекст);
		
		ОткрытьФорму(
			"Обработка.ОбменСКонтрагентами.Форма.УстановкаCryptoProCSPРегистрационныеДанные",,
			Форма.ВладелецФормы,,,, Оповещение);
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Автоматическая установка CryptoPro CSP возможно только на операционных системах семейства Windows.'");
		ПоказатьПредупреждение(, ОписаниеОшибки,, НСтр("ru = 'Установка CryptoPro CSP'"));
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьVipNet(ОповещениеОЗавершении, Форма) Экспорт
	
	// Переход на сайт VipNet вместо скачивания дистрибутива.
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://infotecs.ru/downloads/besplatnye-produkty/vipnet-csp.html");
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Неопределено);
	Возврат;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Контекст.Вставить("ВладелецФормы", Форма.ВладелецФормы);
		Контекст.Вставить("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения("УстановитьViPNetCSPПослеВводаРегистрационныхДанных", ЭтотОбъект, Контекст);
		
		ОткрытьФорму(
			"Обработка.ОбменСКонтрагентами.Форма.УстановкаViPNetCSPРегистрационныеДанные",,
			Форма.ВладелецФормы,,,, Оповещение);
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Установка ViPNet CSP возможно только на операционных системах семейства Windows.'");
		ПоказатьПредупреждение(, ОписаниеОшибки,, НСтр("ru = 'Установка ViPNet CSP'"));
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

// Вызывает диалог для ввода строки.
//
// Параметры:
//  ОписаниеОповещенияОЗавершении - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после
//                                  закрытия окна ввода строки со следующими параметрами:
//    * РезультатВвода - Строка - введенное значение строки или Неопределено, если пользователь отказался от ввода.
//    * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//  Строка - Строка - Начальное значение строки, которое будет использовано в качестве начального значения в окне ввода.
//  Подсказка - Строка - Текст заголовка окна диалога ввода строки. Может использоваться в качестве подсказки пользователю.
//  ДополнительныеПараметры - см. ОбменСКонтрагентамиСлужебныйКлиент.ДополнительныеПараметрыВводаСтроки - параметры ввода строки.
//
Процедура ПоказатьВводСтрокиБЭД(ОписаниеОповещенияОЗавершении, Параметры) Экспорт
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ВводСтроки", Параметры, , , , , ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

Функция ДополнительныеПараметрыВводаСтроки() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ЗаголовокФормы", НСтр("ru = 'Введите строку'"));
	Параметры.Вставить("Многострочность", Ложь);
	Параметры.Вставить("Обязательность", Ложь);
	Параметры.Вставить("КомментарийОбязательностиВвода", "");
	Параметры.Вставить("НазваниеКнопкиПоУмолчанию", НСтр("ru = 'ОК'"));
	Параметры.Вставить("Данные", Неопределено);
	Параметры.Вставить("ПредставлениеДанных", "");
	Параметры.Вставить("ОбработчикПолученияПредставлений", "");
	
	Возврат Параметры;
	
КонецФункции

Процедура СкопироватьВБуферОбмена(Текст, ТекстОповещения ) Экспорт

	ЭлектронноеВзаимодействиеСлужебныйКлиент.СкопироватьВБуферОбмена(Текст, ТекстОповещения);

КонецПроцедуры

#Область Диагностика

// См. ОбменСКонтрагентамиДиагностикаКлиент.ПередФормированиемФайлаДляТехподдержки.
Процедура ПередФормированиемФайлаДляТехподдержки(ТехническаяИнформация, ОповещениеОЗавершении) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ТехническаяИнформация", ТехническаяИнформация);
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Оповещение = Новый ОписаниеОповещения("ИнформацияДляТехПоддержкиПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "", Ложь);
	
КонецПроцедуры

Процедура ИнформацияДляТехПоддержкиПослеСозданияМенеджераКриптографии(МенеджерКриптографии, Контекст) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) = Тип("МенеджерКриптографии") Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияИнформацииМодуляКриптографии", ЭтотОбъект, Контекст);
		МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(Оповещение);
	Иначе
		ПослеПолученияИнформацииМодуляКриптографии(МенеджерКриптографии, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияИнформацииМодуляКриптографии(ИнформацияМодуля, Контекст) Экспорт
	
	Если ТипЗнч(ИнформацияМодуля) = Тип("ИнформацияМодуляКриптографии") Тогда
		Контекст.ТехническаяИнформация.Вставить("КриптопровайдерКлиент", ИнформацияМодуля.Имя);
	Иначе 
		Контекст.ТехническаяИнформация.Вставить("КриптопровайдерКлиент", ИнформацияМодуля);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Контекст.ТехническаяИнформация);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеСлужебныйКлиент.ПриОпределенииПараметровОбращенияВТехподдержку.
Процедура ПриОпределенииПараметровОбращенияВТехподдержку(ПараметрыОбращения, КонтекстОперации) Экспорт
	
	ТелефонСлужбыПоддержки = "";
	АдресЭлектроннойПочтыСлужбыПоддержки = "";
	ЗаполнитьДанныеСлужбыПоддержки(ПараметрыОбращения.ТелефонСлужбыПоддержки, ПараметрыОбращения.АдресЭлектроннойПочтыСлужбыПоддержки);
		
	Если КонтекстОперации.Диагностика.Ошибки.Количество() Тогда
		ВидОшибки = КонтекстОперации.Диагностика.Ошибки[0].ВидОшибки;
		ТекстОбращенияВТехПоддержку = "";
		Если ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиПовторноеПолучениеПакета() Тогда
			ТекстОбращенияВТехПоддержку = НСтр("ru = 'Требуется повторное получение пакетов с идентификаторами:'");
		ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиНетПриглашения() Тогда
			ТекстОбращенияВТехПоддержку = НСтр("ru = 'Не настроена связь с контрагентом, распаковка пакетов невозможна:'");
		КонецЕсли;
		ТекстыСообщений = Новый Массив;
		Для каждого Ошибка Из КонтекстОперации.Диагностика.Ошибки Цикл
			ДополнительныеСвойстваОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.НовыеДополнительныеСвойстваОшибки(Ошибка.ВидОшибки);
			Если ТипЗнч(Ошибка.ДополнительныеДанные) = Тип("Структура") Тогда
				ЗаполнитьЗначенияСвойств(ДополнительныеСвойстваОшибки, Ошибка.ДополнительныеДанные);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДополнительныеСвойстваОшибки.ТекстСообщения) Тогда
				ТекстыСообщений.Добавить(ДополнительныеСвойстваОшибки.ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		ПараметрыОбращения.ТекстОбращения = ТекстОбращенияВТехПоддержку + Символы.ПС + СтрСоединить(ТекстыСообщений, Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Открывает форму выбора договора контрагента.
//
// Параметры:
//  Параметры - Структура - параметры формы.
//     * Организация - ОпределяемыйТип.Организация - ссылка на организацию.
//     * Контрагент  - ОпределяемыйТип.КонтрагентБЭД - ссылка на контрагента.
//  Владелец - ФормаКлиентскогоПриложения, ПолеФормы - форма или элемент управления другой формы.
//  ОповещениеОЗакрытии - ОписаниеОповещения - описание оповещения о закрытии, с которым нужно открыть форму.
//  СтандартнаяОбработка - Булево - признак использования стандартной формы выбора без дополнительного отбора.
//
Процедура ОткрытьФормуВыбораДоговора(Параметры, Владелец, ОповещениеОЗакрытии, СтандартнаяОбработка) Экспорт
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ОткрытьФормуВыбораДоговора(
		Параметры, Владелец, ОповещениеОЗакрытии, СтандартнаяОбработка);
	
КонецПроцедуры

Функция ИмяСобытияИзмененияОбъекта(Источник) Экспорт
	Возврат "Запись_" + ИмяОбъектаМетаданных(ТипЗнч(Источник));
КонецФункции

Функция КлючЗаписиПриглашения(ИдентификаторОрганизации, ИдентификаторКонтрагента) Экспорт
	СтруктураКлюча = Новый Структура("ИдентификаторОрганизации, ИдентификаторКонтрагента",
		ИдентификаторОрганизации, ИдентификаторКонтрагента);
	ТипЗначения = Тип("РегистрСведенийКлючЗаписи.ПриглашенияКОбменуЭлектроннымиДокументами");
	ПараметрыЗаписи = Новый Массив(1);
	ПараметрыЗаписи[0] = СтруктураКлюча;
	КлючЗаписи = Новый(ТипЗначения, ПараметрыЗаписи);
	Возврат КлючЗаписи;
КонецФункции

Функция КлючУчетнойЗаписиЭДО(ИдентификаторЭДО) Экспорт
	СтруктураКлюча = Новый Структура("ИдентификаторЭДО", ИдентификаторЭДО);
	ТипЗначения = Тип("РегистрСведенийКлючЗаписи.УчетныеЗаписиЭДО");
	ПараметрыЗаписи = Новый Массив(1);
	ПараметрыЗаписи[0] = СтруктураКлюча;
	КлючЗаписи = Новый(ТипЗначения, ПараметрыЗаписи);
	Возврат КлючЗаписи;
КонецФункции

Функция НовыеПараметрыПолученияЗашифрованногоМаркера() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИнтернетПоддержкаПользователейПодключена", Истина);
	Параметры.Вставить("ПоказыватьОшибки", Ложь);
	Параметры.Вставить("ПоказыватьОшибкуАутентификацииПриОтсутствииДанных", Истина);
	Параметры.Вставить("КонтекстОперации", ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации());
	
	Возврат Параметры;
	
КонецФункции

#Область МобильныйКлиент

// Открывает файл для просмотра
//
// Параметры:
//  РасположениеФайла    - Строка - полный путь к файлу в файловой системе
//
Процедура ОткрытьФайл(РасположениеФайла) Экспорт
	
	ФайлИнфо = Новый Файл(РасположениеФайла);
	Оповещение = Новый ОписаниеОповещения;
	НачатьЗапускПриложения(Оповещение, ФайлИнфо.ПолноеИмя);
	
КонецПроцедуры

#КонецОбласти

#Область ПрямойОбмен

Процедура ОткрытьФормуУчетнойЗаписиЭДО(ИдентификаторЭДО) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	КлючЗаписи = КлючУчетнойЗаписиЭДО(ИдентификаторЭДО);
	ПараметрыФормы = Новый Структура("Ключ", КлючЗаписи);
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

// См. процедуру ЭлектронноеВзаимодействиеКлиент.ПослеНачалаРаботыСистемы.
//
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	#Если Не МобильныйКлиент Тогда
		ПодключитьОповещенияЭДО();
	#КонецЕсли
	
	ПодключитьОбработчикДействияЧерезСистемуВзаимодействия();
	ОбменСКонтрагентамиСлужебныйВызовСервера.СоздатьСлужебногоПользователяОповещенийЭДО();
	
КонецПроцедуры

Процедура ЗапроситьПодтверждениеОтключенияОжиданияОтветнойПодписи(Оповещение) Экспорт
	
	ТекстВопроса = НСтр("ru = 'Отказ от ответной подписи разрешается, если:
		|- документ выписан на оказание услуг, по которым ГК РФ не требует актирования;
		|- в соглашении об обмене электронными документами предусмотрено отсутствие ответной подписи для данного вида документа.
		|
		|Если документ Не соответствует перечисленным критериям, отказ от ожидания ответной подписи может привести к тому, что документ будет признан недействительным.
		|
		|Вы действительно хотите отказаться от ожидания ответной подписи?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ОткрытьФормуНастройкиВнутреннегоЭДО(Организация) Экспорт 
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", Организация);
	ОткрытьФорму("РегистрСведений.НастройкиВнутреннегоЭДО.Форма.НастройкиВнутреннегоЭДО", Параметры);
	
КонецПроцедуры

#Область ПереопределениеМеханизмаПечатиБСП

#Область События

Процедура ЗавершениеРаботыМастераНастроекВнутреннегоЭДОСобытие(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Оповестить("ЗавершениеРаботыМастераНастроекВнутреннегоЭДО", Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеФормированияЭлектронныхДокументовСобытие(Результат, ДополнительныеПараметры) Экспорт
	Оповестить("ВнутреннийЭДО_ОбновлениеСостоянияФормыПечатиБСП");
КонецПроцедуры

Процедура ПослеОтветаНаВопросОФормированииДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Для Каждого Документ Из ДополнительныеПараметры.ДанныеДокументов Цикл
			
			ПараметрыФормы = Новый Структура;
			
			Если Документ.Свойство("ДвоичныеДанныеФайла") Тогда
				ПараметрыФормы.Вставить("ДвоичныеДанныеФайла", Документ.ДвоичныеДанныеФайла);
			КонецЕсли;
			
			Если Документ.Свойство("ТабличныйДокумент") Тогда
				ПараметрыФормы.Вставить("ТабличныйДокумент", Документ.ТабличныйДокумент);
			КонецЕсли;

			ПараметрыФормы.Вставить("НаименованиеФайла", Документ.НаименованиеФайла);
			ПараметрыФормы.Вставить("Расширение", Документ.Расширение);
			Если ЗначениеЗаполнено(ДополнительныеПараметры.ДокументОснование) Тогда
				ПараметрыФормы.Вставить("ДокументОснование", ДополнительныеПараметры.ДокументОснование); 
			КонецЕсли;
			
			ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор); 
	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура СформироватьЭДИзФормыПечатиБСП(Форма, Параметры = Неопределено) Экспорт
	
	ОбъектыПечати = Форма.ОбъектыПечати.ВыгрузитьЗначения();
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеФормированияЭлектронныхДокументовСобытие", 
	ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиСлужебныйКлиент"));
	
	Идентификатор = ОбменСКонтрагентамиСлужебныйВызовСервера.ИдентификаторОбъектаМетаданных(ТипЗнч(ОбъектыПечати[0])); 
	Команда = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьКомандуПечатиОбъекта(ОбъектыПечати[0], Форма.НастройкиПечатныхФорм[0].ИмяМакета);
	ВидВнутреннегоДокумента = ОбменСКонтрагентамиСлужебныйВызовСервера.НайтиСоздатьВидВнутреннегоДокумента(Идентификатор, Команда);
	
	Если Не ЗначениеЗаполнено(Команда) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры) Тогда
		
		КлючиНастроекОбъектов = Новый Соответствие;
		КлючНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КлючНастройки");
		
		ПодписантыОбъектов = Новый Соответствие;
		Подписанты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Подписанты");
		
		МаршрутыПодписанияОбъектов = Новый Соответствие;
		МаршрутПодписания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Маршрут");
		
		Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
			
			Если ЗначениеЗаполнено(КлючНастройки) Тогда
				МассивКлючейНастроек = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючНастройки);
				КлючиНастроекОбъектов.Вставить(ОбъектПечати, МассивКлючейНастроек);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Подписанты) Тогда
				ПодписантыПоВидам = Новый Соответствие;
				ПодписантыПоВидам.Вставить(ВидВнутреннегоДокумента, Подписанты);
				ПодписантыОбъектов.Вставить(ОбъектПечати, ПодписантыПоВидам);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(МаршрутПодписания) Тогда
				МаршрутыПоВидам = Новый Соответствие;
				МаршрутыПоВидам.Вставить(ВидВнутреннегоДокумента, МаршрутПодписания);
				МаршрутыПодписанияОбъектов.Вставить(ОбъектПечати, МаршрутыПоВидам);
			КонецЕсли;
			
		КонецЦикла;
		
		ДопПараметры = Новый Структура;
		
		Если ЗначениеЗаполнено(КлючиНастроекОбъектов) Тогда
			ДопПараметры.Вставить("КлючиНастроекОбъектов", КлючиНастроекОбъектов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодписантыОбъектов) Тогда
			ДопПараметры.Вставить("ПодписантыОбъектов", ПодписантыОбъектов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МаршрутыПодписанияОбъектов) Тогда
			ДопПараметры.Вставить("МаршрутыПодписанияОбъектов", МаршрутыПодписанияОбъектов);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработатьЭД(ОбъектыПечати, "СформироватьУтвердитьПодписать", ДопПараметры,,Оповещение);
	
КонецПроцедуры

#КонецОбласти 

Процедура УстановитьПризнакИспользованияВнутреннегоЭДО(Использовать) Экспорт   	
	
	ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьПризнакИспользованияВнутреннегоЭДО(Использовать);
	Оповестить("Запись_НаборКонстант", Неопределено, "ИспользоватьВнутренниеДокументыЭДО");

КонецПроцедуры

#Область БизнесСеть

// Если встроена подсистема БизнесСеть, то открывает ссылку на промо сайт сервиса.
// Иначе сообщает, что работа с сервисом не поддерживается.
//
Процедура ОткрытьПромоСайтЭДО() Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		МодульБизнесСетьКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("БизнесСетьКлиентСервер"); 
		СсылкаНаПромоСайтЭДО = МодульБизнесСетьКлиентСервер.ГиперссылкаНаПромоСайтЭДО();
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаНаПромоСайтЭДО);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Работа с сервисом 1С:Бизнес-сеть не поддерживается'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяОбъектаМетаданных(Тип)
	
	ИмяПараметра = "СтандартныеПодсистемы.ИменаОбъектовМетаданных";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый Соответствие);
	КонецЕсли;
	ИменаОбъектовМетаданных = ПараметрыПриложения[ИмяПараметра];
	
	Результат = ИменаОбъектовМетаданных[Тип];
	Если Результат = Неопределено Тогда
		Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.ИмяОбъектаМетаданных(Тип);
		ИменаОбъектовМетаданных.Вставить(Тип, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Готовит к отправке ЭД и ОТПРАВЛЯЕТ (подготовленные электронные документы).
//
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо поместить в пакеты ЭД.
//  ПризнакПодписи - булево, признак того, что электронные документы подписаны ЭП.
//  СтруктураПаролейИМаркеров - содержит данные о паролях сертификатов и маркеров.
//  Параметры - дополнительные параметры обработки.
//
Процедура ПодготовитьИОтправитьПЭД(
	ДобавленныеФайлы,
	ПризнакПодписи,
	СоответствиеПрофилейИПараметровСертификатов = Неопределено,
	Параметры = Неопределено,
	ОбработчикПослеОтправкиПЭД = Неопределено)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДобавленныеФайлы", ДобавленныеФайлы);
	ДопПараметры.Вставить("ПризнакПодписи", ПризнакПодписи);
	ДопПараметры.Вставить("Параметры", Параметры);
	ДопПараметры.Вставить("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	
	НемедленнаяОтправкаЭД = Истина;
	Если НЕ (ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД)
		И ТипЗнч(НемедленнаяОтправкаЭД) = Тип("Булево")) Тогда
		
		ВыполнятьКриптооперацииНаСервере = Неопределено;
		ОбменСКонтрагентамиСлужебныйВызовСервера.ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодготовитьИОтправитьПЭДПродолжить", ЭтотОбъект, ДопПараметры);
	Если (СоответствиеПрофилейИПараметровСертификатов = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов)) И НемедленнаяОтправкаЭД Тогда
		
		ПолучитьНастройкиЭДОИПараметрыСертификатов(ОписаниеОповещения, Неопределено, ДобавленныеФайлы);
	Иначе
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьПакетыДляОтправки(Параметры)
	
	Если Не Параметры.Свойство("ИндексПеребораПакетов") Тогда
		Параметры.Вставить("ИндексПеребораПакетов", 0);
	КонецЕсли;
	
	Если Не Параметры.Свойство("ИндексПеребораДанных") Тогда
		Параметры.Вставить("ИндексПеребораДанных", -1);
	КонецЕсли;
	
	ВложенныеПараметры = Неопределено;
	СоответствиеДанныхПакетов = Неопределено;
	МенеджерКриптографии = Неопределено;
	Если Параметры.Свойство("Параметры", ВложенныеПараметры) И ТипЗнч(ВложенныеПараметры) = Тип("Структура") Тогда
		ВложенныеПараметры.Свойство("СоответствиеДанныхПакетов", СоответствиеДанныхПакетов);
		ВложенныеПараметры.Свойство("МенеджерКриптографии", МенеджерКриптографии);
	КонецЕсли;
	
	Если ТипЗнч(СоответствиеДанныхПакетов) = Тип("Соответствие") Тогда
		Если СоответствиеДанныхПакетов.Количество() > Параметры.ИндексПеребораПакетов Тогда
			ТекИндексПакета = -1;
			// Определяем текущий обрабатываемый пакет
			Для Каждого КлючЗначение Из СоответствиеДанныхПакетов Цикл
				ТекИндексПакета = ТекИндексПакета + 1;
				Если ТекИндексПакета = Параметры.ИндексПеребораПакетов Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			МассивДанныхЭД = КлючЗначение.Значение;
			
			Если Параметры.ИндексПеребораДанных + 1 < МассивДанныхЭД.Количество() Тогда
				Параметры.ИндексПеребораДанных = Параметры.ИндексПеребораДанных + 1;
				
				ДанныеЭД = МассивДанныхЭД[Параметры.ИндексПеребораДанных];
				
				Если ДанныеЭД.ЭтоОтправкаПодтверждения Тогда
					ПодготовитьПакетыДляОтправки(Параметры);
					Возврат;
				КонецЕсли;
				
				ПараметрыШифрования = ДанныеЭД.ПараметрыШифрования;
				Если ПараметрыШифрования = Неопределено Тогда
					ПодготовитьПакетыДляОтправки(Параметры);
					Возврат;
				КонецЕсли;
				
				МассивСертификатов = Новый Массив;
				Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
					ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
					Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
					МассивСертификатов.Добавить(Сертификат);
				КонецЦикла;
				НеЗашифрованныеДанные = ПолучитьИзВременногоХранилища(ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				
				Оповещение = Новый ОписаниеОповещения("СоздатьПакетЭДПослеШифрования", ЭтотОбъект, Параметры);
				
				Попытка
					МенеджерКриптографии.НачатьШифрование(Оповещение, НеЗашифрованныеДанные, МассивСертификатов);
				Исключение
					ВидОперации = НСтр("ru = 'Шифрование данных'");
					ТекстСообщения = НСтр("ru = 'При шифровании данных произошла ошибка: %1'");
					КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ОписаниеОшибки());
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													ТекстСообщения, КраткоеПредставлениеОшибки);
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
									ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, "ЭлектронноеВзаимодействие");
					ПодготовитьПакетыДляОтправки(Параметры);
				КонецПопытки
				
			Иначе
				Параметры.ИндексПеребораДанных = -1;
				Параметры.ИндексПеребораПакетов = Параметры.ИндексПеребораПакетов + 1; // переходим к обработке следующего пакета
				ПодготовитьПакетыДляОтправки(Параметры);
			КонецЕсли;
			Возврат
		КонецЕсли;
		
		Параметры.Удалить("ИндексПеребораПакетов");
		Параметры.Удалить("ИндексПеребораДанных");
		
		КолОтправленных = 0;
		ОбменСКонтрагентамиСлужебныйВызовСервера.СохранитьИОтправитьЗашифрованныеДанные(
				СоответствиеДанныхПакетов, Параметры.СоответствиеПрофилейИПараметровСертификатов, КолОтправленных);
		Параметры.РезультатОтправкиПЭД.КолОтправленных = Параметры.РезультатОтправкиПЭД.КолОтправленных + КолОтправленных;
	КонецЕсли;
	ВыполнитьДействияПослеОтправкиПЭДЗавершить(Параметры);
	
КонецПроцедуры

// Получение соответствия сертификатов.
//
// Параметры:
//  СоответствиеПрофилей - Структура - данные сертификатов.
// 
// Возвращаемое значение:
//  Соответствие - сертификат и значение.
//
Функция ПараметрыСертификатов(СоответствиеПрофилей)
	
	Результат = Новый Соответствие;
	Для Каждого КлючЗначение Из СоответствиеПрофилей Цикл
		Результат.Вставить(КлючЗначение.Значение.СертификатПодписи, КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполнение проверки проведения документов.
Процедура ВыполнитьПроверкуПроведенияДокументов(ДополнительныеПараметры) Экспорт
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПроверкуПроведенияДокументов(
		ДополнительныеПараметры.ПараметрКоманды, ДополнительныеПараметры.Обработчик, ДополнительныеПараметры.Источник);

КонецПроцедуры

// Вызывается из процедуры ВыполнитьДействияПослеОтправкиПЭД(...).
// Выполняет описание оповещения переданное в параметре ОбработчикПослеОтправкиПЭД.
//
// Параметры:
//   ДопПараметры - Структура:
//      РезультатОтправкиПЭД       - Структура:
//         
//      Параметры                  - Структура - необязательный параметр, дополнительные параметры,
//                                               переданные из метода инициировавшего отправку ПЭД.
//      ОбработчикПослеОтправкиПЭД - ОписаниеОповещения - необязательный параметр, обработка результата отправки ПЭД.
//
Процедура ВыполнитьДействияПослеОтправкиПЭДЗавершить(ДопПараметры)
	
	Параметры = Неопределено;
	РезультатОтправкиПЭД = Неопределено;
	ОбработчикПослеОтправкиПЭД = Неопределено;
	ДопПараметры.Свойство("Параметры", Параметры);
	ДопПараметры.Свойство("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Свойство("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
		
	Если ТипЗнч(ОбработчикПослеОтправкиПЭД) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработчикПослеОтправкиПЭД, РезультатОтправкиПЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПодписатьСлужебныйЭД(СсылкаНаЭД,
	ВидЭД, ТекстУточнения = "", ДопПараметры = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	Если ТипЗнч(СсылкаНаЭД) <> Тип("Массив") Тогда
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(СсылкаНаЭД);
	Иначе
		МассивЭД = СсылкаНаЭД;
	КонецЕсли;
	
	ОбменСКонтрагентамиКлиент.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭД, ВидЭД,
		ТекстУточнения, ДопПараметры, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтправитьПодтверждениеЭД(ПараметрКоманды, ЭД = Неопределено, ДопПараметры = Неопределено)
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьЭД(МассивСсылок, "УтвердитьПодписатьОтправить", ДопПараметры, ЭД);
	
КонецПроцедуры

Процедура ЗаполнитьПароли(ПараметрыСертификата, Результат)
	
	ПараметрыСертификата.ПарольПользователя = Результат.ПарольПользователя;
	Если ПараметрыСертификата.Свойство("Пользователь") И Результат.Свойство("Пользователь") Тогда
		ПараметрыСертификата.Пользователь = Результат.Пользователь;
	КонецЕсли;
	ПараметрыСертификата.ПарольПолучен = Истина;
	
КонецПроцедуры

// Проверка статусов подписей после подписания электронных документов
//
// Параметры:
//  Параметры - Структура - данные электронных документов.
//
Процедура ДействияПослеПодписанияЭД(Параметры)
	
	СоответствиеСертификатовПодписаннымЭд = Неопределено;
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("СоответствиеСертификатовПодписаннымЭд", СоответствиеСертификатовПодписаннымЭд)
		И ТипЗнч(СоответствиеСертификатовПодписаннымЭд) = Тип("Соответствие") Тогда
		
		ЭДСНезавершеннойПодписью = Новый Массив;
		ОбменСКонтрагентамиСлужебныйВызовСервера.ДействияПослеПодписанияЭДНаСервере(
			СоответствиеСертификатовПодписаннымЭд, Параметры.КонтекстОперации, ЭДСНезавершеннойПодписью);
		
		// Исключим из очереди к отправке не полностью подписанные документы
		Для Каждого ЭД Из ЭДСНезавершеннойПодписью Цикл
			Параметры.МассивЭДКУдалениюИзОтправки.Добавить(ЭД);
		КонецЦикла;
		
		Для Каждого СертификатМассивЭД Из СоответствиеСертификатовПодписаннымЭд Цикл
			Для Каждого ЭД Из СертификатМассивЭД.Значение Цикл
				ОпределитьСтатусыПодписей(ЭД, Истина, Параметры.КонтекстОперации);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ОтправкаЭД(Параметры);
	
КонецПроцедуры

// Выполнение отправки электронного документа.
// Параметры:
//   Параметры - Структура - данные электронного документа.
//
Процедура ОтправкаЭД(Параметры)
	
	Результат = Параметры.Результат;
	МассивЭДКУдалениюИзОтправки = Параметры.МассивЭДКУдалениюИзОтправки;
	НемедленнаяОтправкаЭД = Параметры.НемедленнаяОтправкаЭД;
	СоотвСертификатовИИхСтруктур = Параметры.СоотвСертификатовИИхСтруктур;
	СоотвСоглашенийИСертификатовАвторизации = Неопределено;
	СоотвСоглашенийИМассивовЭДКОтправке = Неопределено;
	НастройкиЭДОСЭДКОтправке = Неопределено;
	СтруктураКОтправке = Неопределено;
	Если Результат.Свойство("СтруктураКОтправке", СтруктураКОтправке) Тогда
		Параметры.Вставить("СоотвСоглашенийИСтруктурСертификатов", Новый Соответствие);
		СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
		МассивЭД = Неопределено;
		Если СтруктураКОтправке.Свойство("БезПодписи", МассивЭД) И ТипЗнч(МассивЭД) = Тип("Массив")
			И МассивЭД.Количество() > 0 Тогда
			
			Параметры.Вставить("МассивКОтправкеБезПодписи", МассивЭД);
		КонецЕсли;
		
		Если СтруктураКОтправке.Свойство("СПодписью", МассивЭД) И ТипЗнч(МассивЭД) = Тип("Массив") Тогда
			Если МассивЭДКУдалениюИзОтправки.Количество() > 0 И МассивЭД.Количество() > 0 Тогда
				Для Каждого УдаляемыйЭД Из МассивЭДКУдалениюИзОтправки Цикл
					ТекИндекс = МассивЭД.Найти(УдаляемыйЭД);
					Если ТекИндекс <> Неопределено Тогда
						МассивЭД.Удалить(ТекИндекс);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			МассивЭД = Новый Массив;
		КонецЕсли;
		
		Параметры.Вставить("МассивКОтправке", МассивЭД);
		МассивКОтправке = Параметры.МассивКОтправке;
		
		Если НЕ (Результат.Свойство("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации)
			И ТипЗнч(СоотвСоглашенийИСертификатовАвторизации) = Тип("Соответствие")) Тогда
			СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
		КонецЕсли;
			
		РасшифроватьМаркер = Ложь;
		Если СтруктураКОтправке.Свойство("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке)
			И ТипЗнч(СоотвСоглашенийИМассивовЭДКОтправке) = Тип("Соответствие")
			И СоотвСоглашенийИМассивовЭДКОтправке.Количество() Тогда
			Для Каждого ТекЭл Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				УчетнаяЗаписьЭДО = ТекЭл.Ключ;
				РеквизитыУчетнойЗаписиЭДО = ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыУчетнойЗаписи(УчетнаяЗаписьЭДО);
				ЕстьЭдКОтправке = Ложь;
				Для Каждого ОтправляемыйЭД Из ТекЭл.Значение Цикл
					Если МассивЭДКУдалениюИзОтправки.Найти(ОтправляемыйЭД) = Неопределено Тогда
						МассивКОтправке.Добавить(ОтправляемыйЭД);
						ЕстьЭдКОтправке = Истина;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьЭдКОтправке Тогда
					МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(УчетнаяЗаписьЭДО);
					Если НемедленнаяОтправкаЭД И ЗначениеЗаполнено(МассивСертификатов) Тогда
						// На клиента массив ЭД к отправке через ОЭДО, может прийти только в том случае,
						// если не было возможности отправить эти ЭД с сервера (нет пароля к сертификату).
						ЕстьМаркер = Ложь;
						Для Каждого Сертификат Из МассивСертификатов Цикл
							
							КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыУчетнойЗаписиЭДО.ИдентификаторОрганизации;
							СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
							
							МаркерРасшифрованный = Неопределено;
							Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
								И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
								
								СоотвСоглашенийИСтруктурСертификатов.Вставить(УчетнаяЗаписьЭДО, СтруктураСертификата);
								ЕстьМаркер = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если НЕ ЕстьМаркер Тогда
							// Отправка будет продолжена после расшифровки маркеров.
							РасшифроватьМаркер = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если РасшифроватьМаркер Тогда
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ПродолжитьОтправкуЭДПослеРасшифровкиМаркера", ЭтотОбъект, Параметры);
			
			ИД_Параметров = Строка(Новый УникальныйИдентификатор);
			ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие." + ИД_Параметров, Параметры);
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИД_Параметров", ИД_Параметров);
			ДопПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
			ДопПараметры.Вставить("СоответствиеСоглашенийИСертификатов", СоотвСоглашенийИСертификатовАвторизации);
			ДопПараметры.Вставить("ОбработанныеУчетныеЗаписи", Новый Соответствие);
			ДопПараметры.Вставить("КонтекстОперации", Параметры.КонтекстОперации);
			Если Параметры.Свойство("ПаролиКСертификатам") Тогда
				ДопПараметры.Вставить("ПаролиКСертификатам", Параметры.ПаролиКСертификатам);
			КонецЕсли;
			
			РасшифроватьМаркер(Неопределено, ДопПараметры);
		Иначе
			ЗавершитьОтправкуЭД(Неопределено, Параметры);
		КонецЕсли;
	Иначе
		ВыполнитьДействияПослеОтправки(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из процедуры РасшифроватьМаркер(), по выполнению Описания Оповещения созданного
// в процедуре ОтправкаЭД(Параметры).
//
// Параметры:
//   Результат - Структура:
//               СоответствиеПрофилейИПараметровСертификатов - Соответствие:
//                                   Ключ     - СправочникСсылка.ПараметрыНастроекЭДО.
//                                   Значение - Структура:
//                                              МаркерРасшифрованный - ДвоичныеДанные - расшифрованного маркера.
//                                              прочие реквизиты сертификата (необязательно).
//
//   Параметры - Структура:
//               СоотвСоглашенийИСтруктурСертификатов - Соответствие
//                                                      Ключ     - СправочникСсылка.ПараметрыНастроекЭДО.
//                                                      Значение - Структура - Параметры сертификата.
//               МассивКОтправке - Массив - ЭД подготовленные к отправке.
//
Процедура ПродолжитьОтправкуЭДПослеРасшифровкиМаркера(Результат, Параметры) Экспорт
	
	СоотвСоглашенийИСтруктурСертификатов = Неопределено;
	Если НЕ (Параметры.Свойство("СоотвСоглашенийИСтруктурСертификатов", СоотвСоглашенийИСтруктурСертификатов)
			 И ТипЗнч(СоотвСоглашенийИСтруктурСертификатов) = Тип("Соответствие")) Тогда
		
		Параметры.Вставить("СоотвСоглашенийИСтруктурСертификатов", Новый Соответствие);
		СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
	КонецЕсли;
	
	ВозврСоответствие = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие)
		И ТипЗнч(ВозврСоответствие) = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из ВозврСоответствие Цикл
			СоотвСоглашенийИСтруктурСертификатов.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ЗавершитьОтправкуЭД(Неопределено, Параметры);
	
КонецПроцедуры

// Обрабатывает результаты очередной итерации отправки ЭД, при необходимости (во входящих параметрах есть
// не отправленные ЭД) начинает следующую итерацию отправки ЭД.
//
// Параметры:
//    Результат - Структура, Неопределено - в структуре возвращается результат прошедшей итерации отправки ЭД:
//       КолПодготовленных - Число.
//       КолОтправленных   - Число.
//    Параметры - Структура:
//    МассивКОтправке           - Массив.
//    МассивКОтправкеБезПодписи - Массив.
//    Прочие параметры.
//
Процедура ЗавершитьОтправкуЭД(Результат, Параметры) Экспорт
	
	СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
	ПродолжитьВыполнитьДействияПослеОтправки = Истина;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		КолПодготовленных = 0;
		КолОтправленных = 0;
		Если НЕ(Результат.Свойство("КолПодготовленных", КолПодготовленных)
				И ТипЗнч(КолПодготовленных) = Тип("Число")) Тогда
			
			КолПодготовленных = 0;
		КонецЕсли;
		Если НЕ(Результат.Свойство("КолОтправленных", КолОтправленных)
				И ТипЗнч(КолОтправленных) = Тип("Число")) Тогда
			
			КолОтправленных = 0;
		КонецЕсли;
		Параметры.ИтогКолПодготовленных = Параметры.ИтогКолПодготовленных + КолПодготовленных;
		Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + КолОтправленных;
	КонецЕсли;
	
	МассивЭД = Неопределено;
	МассивКОтправке = Неопределено;
	МассивКОтправкеБезПодписи = Неопределено;
	Если Параметры.Свойство("МассивКОтправке", МассивКОтправке)
		И ТипЗнч(МассивКОтправке) = Тип("Массив")
		И МассивКОтправке.Количество() > 0 Тогда
		
		МассивЭД = МассивКОтправке;
		Параметры.Удалить("МассивКОтправке");
		ПризнакПодписи = Истина;
	ИначеЕсли Параметры.Свойство("МассивКОтправкеБезПодписи", МассивКОтправкеБезПодписи)
		И ТипЗнч(МассивКОтправкеБезПодписи) = Тип("Массив")
		И МассивКОтправкеБезПодписи.Количество() > 0 Тогда
		
		МассивЭД = МассивКОтправкеБезПодписи;
		Параметры.Удалить("МассивКОтправкеБезПодписи");
		ПризнакПодписи = Ложь;
	КонецЕсли;
	
	Если МассивЭД <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьОтправкуЭД", ЭтотОбъект, Параметры);
		ПодготовитьИОтправитьПЭД(МассивЭД, ПризнакПодписи, СоотвСоглашенийИСтруктурСертификатов, Параметры, ОписаниеОповещения);
		ПродолжитьВыполнитьДействияПослеОтправки = Ложь;
	КонецЕсли;
	
	Если ПродолжитьВыполнитьДействияПослеОтправки Тогда
		ВыполнитьДействияПослеОтправки(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Оповещение после отправки электронных документов.
//
// Параметры:
//  Параметры - Структура - показатели отправки.
//
Процедура ВыполнитьДействияПослеОтправки(Параметры)
	
	Перем Действие, ИтогКолНовыхЭД, ИтогКолУтвержденныхЭД, ИтогКолПодписанных, ИтогКолПодготовленных, ИтогКолОтправленных;
	
	Если НЕ Параметры.Свойство("ИтогКолНовыхЭД", ИтогКолНовыхЭД) Тогда
		ИтогКолНовыхЭД = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолУтвержденныхЭД", ИтогКолУтвержденныхЭД) Тогда
		ИтогКолУтвержденныхЭД = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолПодписанных", ИтогКолПодписанных) Тогда
		ИтогКолПодписанных = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолПодготовленных", ИтогКолПодготовленных) Тогда
		ИтогКолПодготовленных = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолОтправленных", ИтогКолОтправленных) Тогда
		ИтогКолОтправленных = 0;
	КонецЕсли;

	ОтправленныеДокументы = Неопределено;
	Если Параметры.Свойство("СоответствиеСертификатовПодписаннымЭд") Тогда
		ОтправленныеДокументы = Новый Массив;
		Для Каждого СертификатМассивЭД Из Параметры.СоответствиеСертификатовПодписаннымЭд Цикл
			Для Каждого ЭД Из СертификатМассивЭД.Значение Цикл
				ОтправленныеДокументы.Добавить(ЭД);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ДокументыУчета = Неопределено;
	Если Параметры.Свойство("МассивСсылокНаОбъект") Тогда
		ДокументыУчета = Параметры.МассивСсылокНаОбъект;
	КонецЕсли;
	Если ДокументыУчета = Неопределено
		Или (ТипЗнч(ДокументыУчета) = Тип("Массив") И ДокументыУчета.Количество() = 0) Тогда
		Результат = Неопределено;
		Если Параметры.Свойство("Результат", Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
			Если Результат.Свойство("ДокументыУчета") Тогда
				ДокументыУчета = Результат.ДокументыУчета;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЭлектронныеДокументы", ОтправленныеДокументы);
	ПараметрыОповещения.Вставить("ДокументыУчета", ДокументыУчета);
	
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);

	Если Параметры.Свойство("Действие")
		И ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Параметры.Действие, "Показать") Тогда
		Результат = Параметры.Результат;
		МассивОбработки = "";
		Если Результат.Свойство("МассивНовыхЭД", МассивОбработки) И МассивОбработки <> Неопределено Тогда
			Для Каждого ТекЭл Из МассивОбработки Цикл
				ОткрытьЭДДляПросмотра(ТекЭл);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Действие")
		И ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Параметры.Действие, "Подписать") Тогда
		Результат = Параметры.Результат;
		СоотвСообщенийОбменаИОшибокПодписи = Неопределено;
		МассивСсылокНаОбъект = Неопределено;
		Если Параметры.Свойство("МассивСсылокНаОбъект", МассивСсылокНаОбъект)
			И МассивСсылокНаОбъект <> Неопределено
			И МассивСсылокНаОбъект.Количество() = 1
			И Результат.Свойство("СоотвСообщенийОбменаИОшибокПодписи", СоотвСообщенийОбменаИОшибокПодписи) 
			И СоотвСообщенийОбменаИОшибокПодписи <> Неопределено Тогда
			Для Каждого КлючИЗначение Из СоотвСообщенийОбменаИОшибокПодписи Цикл
				СообщениеОбОшибке = ЭлектронноеВзаимодействиеСлужебныйКлиент.ПредставлениеОшибкиПодписания(КлючИЗначение.Значение);
				ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВывестиИнформациюОбОбработанныхЭД(ТекстЗаголовка,
		ИтогКолНовыхЭД, ИтогКолУтвержденныхЭД, ИтогКолПодписанных, ИтогКолПодготовленных, ИтогКолОтправленных);
		
	// Выводим накопленные сообщения пользователю.
	Если Параметры.Свойство("Результат") И Параметры.Результат <> Неопределено
		И Параметры.Результат.Свойство("СообщенияПользователю") Тогда
		Для Каждого СообщениеПользователю Из Параметры.Результат.СообщенияПользователю Цикл
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ВсегоОбработано = ИтогКолНовыхЭД + ИтогКолУтвержденныхЭД + ИтогКолПодписанных + ИтогКолПодготовленных
					+ ИтогКолОтправленных;
	
	Если Параметры.Свойство("ОповеститьОСозданииУведомления") И ВсегоОбработано > 0 Тогда
		Оповестить("СозданоУведомление", Параметры.ОповеститьОСозданииУведомления);
	КонецЕсли;
	
	ОписаниеОповещения = Неопределено;
	Если Параметры.Свойство("ОписаниеОповещения", ОписаниеОповещения)
		И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, (ВсегоОбработано > 0));
	КонецЕсли;
	
	КонтекстОперации = Неопределено;
	Если Параметры.Свойство("КонтекстОперации", КонтекстОперации) И КонтекстОперации <> Неопределено Тогда
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьПомощникНастройкиОбменаСКонтрагентом(КлючНастройкиОтправки, МассивДокументов, Действие)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументыОснования"      , МассивДокументов);
	ПараметрыФормы.Вставить("Действие"                , Действие);
	ПараметрыФормы.Вставить("ПредварительнаяНастройка", Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, КлючНастройкиОтправки);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьДокументПослеУстраненияОшибок", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.НастройкаОбменаСКонтрагентом",
		ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура СообщитьВидЭДНеПоддерживается(ВидЭД, ДетализацияОперации = "") 
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ОбменСКонтрагентамиСлужебныйКлиентСервер.ТекстСообщенияВидЭДНеПоддерживается(ВидЭД, ДетализацияОперации));
	
КонецПроцедуры

Процедура ОбработатьДокументыПослеДобавленияНастроекВнутреннегоЭДО(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.ДопПараметры.Свойство("ОшибкиПриФормированииДокументов") Тогда
		Контекст.ДопПараметры.Удалить("ОшибкиПриФормированииДокументов");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Подписанты) Тогда
		ПодписантыОбъектов = Новый Соответствие;
		ПодписантыПоВидам = Новый Соответствие;
		ПодписантыПоВидам.Вставить(Результат.КлючНастройки.ВидВнутреннегоДокумента, Результат.Подписанты);
		Для Каждого СсылкаНаОбъект Из Контекст.МассивСсылок Цикл
			ПодписантыОбъектов.Вставить(СсылкаНаОбъект, ПодписантыПоВидам);
		КонецЦикла;
		Контекст.ДопПараметры.Вставить("ПодписантыОбъектов", ПодписантыОбъектов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Маршрут) Тогда
		МаршрутыПоВидам = Новый Соответствие;
		МаршрутыПоВидам.Вставить(Результат.КлючНастройки.ВидВнутреннегоДокумента, Результат.Маршрут);
		МаршрутыПодписанияОбъектов = Новый Соответствие;
		Для Каждого СсылкаНаОбъект Из Контекст.МассивСсылок Цикл
			МаршрутыПодписанияОбъектов.Вставить(СсылкаНаОбъект, МаршрутыПоВидам);
		КонецЦикла;
		Контекст.ДопПараметры.Вставить("МаршрутыПодписанияОбъектов", МаршрутыПодписанияОбъектов);
	КонецЕсли;
	
	КлючиНастроекОбъектов = Новый Соответствие;
	
	Для Каждого СсылкаНаОбъект Из Контекст.МассивСсылок Цикл
		КлючиНастроекОбъектов.Вставить(СсылкаНаОбъект, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат.КлючНастройки));
	КонецЦикла;
	
	Контекст.ДопПараметры.Вставить("КлючиНастроекОбъектов", КлючиНастроекОбъектов);
	
	ОбработатьЭД(Контекст.МассивСсылок, Контекст.Действие, Контекст.ДопПараметры);
	
КонецПроцедуры

#Область НачатьОтправкуПолучениеЭлектронныхДокументов

Процедура НачатьОбработкуВходящихПакетовЭлектронныхДокументов(ОповещениеОЗавершении, ДанныеПакетовЭД, КонтекстОперации)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ДанныеПакетовЭД", ДанныеПакетовЭД);
	Контекст.Вставить("Индекс", -1);
	Контекст.Вставить("КонтекстОперации", КонтекстОперации);
	
	ОбработатьПакетыЭДЦиклНачало(Контекст);
	
КонецПроцедуры

Процедура ПодписатьОтправитьСлужебныеДокументы(МассивДокументов, ОтпечаткиСертификатов, КонтекстОперации)
	
	Параметры = Новый Структура;
	Параметры.Вставить("МассивСсылокНаОбъект", Новый Массив);
	Параметры.Вставить("Действие", "ПодписатьОтправить");
	Параметры.Вставить("ДопПараметры", Новый Структура);
	Параметры.Вставить("ЭД", МассивДокументов);
	Параметры.Вставить("ОписаниеОповещения");
	Параметры.ДопПараметры.Вставить("КонтекстОперации", КонтекстОперации);
	ОбработатьЭДПослеПолученияОтпечатков(ОтпечаткиСертификатов, Параметры);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияОтпечатков(ОшибкаКриптопровайдера, Контекст)
	
	Если ТипЗнч(ОшибкаКриптопровайдера) = Тип("Строка") Тогда
		ВидОперации = НСтр("ru = 'Получение отпечатков сертификатов.'");
		ТекстСообщения = НСтр("ru = 'При получении отпечатков сертификатов'")
			+ Символы.ПС + ОшибкаКриптопровайдера;
		Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(ВидОперации,
			ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиКриптография(),
			ТекстСообщения, ТекстСообщения);
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ДобавитьОшибку(Контекст.КонтекстОперации, Ошибка);
	КонецЕсли;
	
	Если Контекст.Свойство("ФормаДлительнойОперации") Тогда
		Контекст.ФормаДлительнойОперации.Закрыть();
	Иначе
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершенииОтправкиПолучения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Отправка и получение электронных документов одной командой.
Процедура ОтправитьПолучитьОбменСКонтрагентами(КоличествоПопыток = 0, ДополнительныеПараметры = Неопределено) Экспорт
	
	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	ОчиститьСообщения();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоВыполненияОбмена() Тогда
			ЭлектронноеВзаимодействиеСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ПараметрыОтправкиПолученияЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПараметрыОтправкиПолученияЭД(КонтекстОперации);
	
	ЕстьПрофилиЭДОБезСертификатов = ПараметрыОтправкиПолученияЭД.Свойство("ПрофилиЭДОБезСертификатов");
	
	Если НЕ ПараметрыОтправкиПолученияЭД.ЕстьВозможностьОтправкиПолученияЭД И ЕстьПрофилиЭДОБезСертификатов Тогда
		
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КоличествоПопыток", КоличествоПопыток);
	ПараметрыОповещения.Вставить("КонтекстОперации", КонтекстОперации);
	
	ПаролиКСертификатам = Неопределено;
	Если ДополнительныеПараметры <> Неопределено Тогда
		ДополнительныеПараметры.Свойство("ПаролиКСертификатам", ПаролиКСертификатам);
	КонецЕсли;
	
	Если ЕстьПрофилиЭДОБезСертификатов Тогда
		// Откроем помощник регистрации сертификатов после отправки/получения.
		ПараметрыОповещения.Вставить("ПрофилиЭДОБезСертификатов", ПараметрыОтправкиПолученияЭД.ПрофилиЭДОБезСертификатов);
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ОтправитьПолучитьЭДВыполнить", ЭтотОбъект, ПараметрыОповещения);
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	
	Если ПараметрыОтправкиПолученияЭД.ИспользоватьЭП Тогда
		ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработкаОповещения, Неопределено,, ПаролиКСертификатам, КонтекстОперации);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
		ОтправитьПолучитьЭДВыполнить(Результат, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОтправитьПолучитьЭДВыполнить(Результат, ДополнительныеПараметры) Экспорт
	
	СоответствиеПрофилейПараметровСертификатов = Неопределено;
	Если ТипЗнч(Результат) <> Тип("Структура")
		ИЛИ НЕ Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейПараметровСертификатов) Тогда
		Возврат;
	КонецЕсли;
	
	// Блок обновления статусов настроек ЭДО и получения новых приглашений.
	ТекстСообщения = НСтр("ru = 'Выполняется получение информации о приглашениях. Подождите...'");
	Состояние(НСтр("ru = 'Получение.'"), , ТекстСообщения);
	ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьСтатусыПодключенияНастроекЭДО(СоответствиеПрофилейПараметровСертификатов, Результат.КонтекстОперации);
	
	// Блок отправки и получения ЭД.
	ТекстСообщения = НСтр("ru = 'Выполняется отправка и получение пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Отправка и получение.'"), , ТекстСообщения);
	
	// Получение и отправка документов.
	
	ЭтоПоследняяПопытка = ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПоследняяПопыткаОтправкиПолученияДокументов(ДополнительныеПараметры.КоличествоПопыток);
	Если ЭтоПоследняяПопытка Тогда
		ПовторноеПолучение = Истина;// При повторном регистрируются ошибки просроченного маркера.
	Иначе 
		ПовторноеПолучение = Ложь;
	КонецЕсли;
	
	СтруктураВозврата = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправитьИПолучитьДокументы(
		СоответствиеПрофилейПараметровСертификатов, ПовторноеПолучение, ДополнительныеПараметры.КонтекстОперации);
		
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1), получено пакетов: (%2).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения,
		СтруктураВозврата.КолОтправленныхПакетов, СтруктураВозврата.НовыеДокументы.МассивПакетовЭД.Количество());
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	// Распаковываем принятые пакеты с электронными документами.
	
	ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Распаковка.'"), , ТекстСообщения);
	РаспаковатьПакетыЭДНаКлиенте(СтруктураВозврата.НовыеДокументы.МассивПакетовЭД, Результат.КонтекстОперации);
	
	// Если использование маркера превысило 5 минут, необходимо повторное получение.
	Если ПовторноеПолучение И Не ЭтоПоследняяПопытка Тогда
		ДополнительныеПараметры.КоличествоПопыток = ДополнительныеПараметры.КоличествоПопыток + 1;
		ОтправитьПолучитьОбменСКонтрагентами(ДополнительныеПараметры.КоличествоПопыток);
	Иначе
		
		Оповестить("ОбновитьНаличиеЭДО");
		Если ДополнительныеПараметры.Свойство("ПрофилиЭДОБезСертификатов") Тогда
			ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(Результат.КонтекстОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает картинку оповещений 1С-ЭДО.
//
Функция КартинкаОповещенияЭДО() Экспорт
	
	КартинкаОповещений = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьСобытияЭДО() Тогда
		КартинкаОповещений = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	КонецЕсли;
	
	Возврат КартинкаОповещений;
	
КонецФункции

// Только для внутреннего использования
Процедура РаспаковатьПакетыЭДНаКлиенте(Знач МассивПакетовЭД, КонтекстОперации = Неопределено) Экспорт
	
	Если КонтекстОперации = Неопределено Тогда
		КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	КонецЕсли;
	ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Распаковка.'"), , ТекстСообщения);
	// Подготовим данные по пакетам ЭД для занесения в базу.
	ДанныеПакетовЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ДанныеПакетовЭД(МассивПакетовЭД, КонтекстОперации);
	
	// Расшифруем электронные документы.
	Контекст = Новый Структура;
	Контекст.Вставить("ДанныеПакетовЭД", ДанныеПакетовЭД);
	Контекст.Вставить("Индекс", -1);
	Контекст.Вставить("КонтекстОперации", КонтекстОперации);
	
	ОбработатьПакетыЭДЦиклНачало(Контекст);
	
КонецПроцедуры

#Область РаспаковкаПакетовЭД

// Продолжение процедуры РаспаковатьПакетыЭДНаКлиенте.
Процедура ОбработатьПакетыЭДЦиклНачало(Контекст)
	
	Если Контекст.ДанныеПакетовЭД.Количество() <= Контекст.Индекс + 1 Тогда
		ОбработатьПакетыЭДПослеЦикла(Контекст);
		Возврат;
	КонецЕсли;
	Контекст.Индекс = Контекст.Индекс + 1;
	Контекст.Вставить("СтруктураПакетаЭД", Контекст.ДанныеПакетовЭД[Контекст.Индекс]);
	
	// ПакетЭД структура из элементов: МассивЭД, МассивЭП, ПакетЭДСсылка, ОписаниеОшибки.
	
	Контекст.Вставить("МассивЭД", Контекст.СтруктураПакетаЭД.МассивЭД);
	Контекст.Вставить("МассивЭП", Контекст.СтруктураПакетаЭД.МассивЭП);
	Контекст.Вставить("Счетчик", -1);
	
	РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьПакетыЭДЦиклНачало.
Процедура РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало(Контекст)
	
	Если Контекст.МассивЭД.Количество() <= Контекст.Счетчик + 1 Тогда
		РасшифроватьЭлектронныеДокументыПослеВнутреннегоЦикла(Контекст);
		Возврат;
	КонецЕсли;

	Контекст.Счетчик = Контекст.Счетчик + 1;
	Контекст.Вставить("ЭлектронныйДокумент", Контекст.МассивЭД[Контекст.Счетчик]);
	
	Если Не Контекст.ЭлектронныйДокумент.Зашифрован Тогда
		РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("РасшифроватьЭлектронныеДокументыВнутреннийЦиклПослеРасшифровкиЭД", ЭтотОбъект, Контекст);

	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Расшифровка электронного документа'"));
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(Контекст.ЭлектронныйДокумент.СсылкаНаСертификатРасшифровки);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	
	Данные = Неопределено;
	Если НЕ Контекст.ЭлектронныйДокумент.Свойство("ДанныеФайлаЭД", Данные) Тогда
		Данные = Контекст.ЭлектронныйДокумент.АдресЭД;
	КонецЕсли;
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий",       Ложь);
	ОписаниеДанных.Вставить("ИзменятьНабор",             Ложь);
	ОписаниеДанных.Вставить("Данные",                    Данные);
	ОписаниеДанных.Вставить("ЗаголовокДанных",           НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("БезПодтверждения",          Истина);
	ОписаниеДанных.Вставить("Представление",             Контекст.ЭлектронныйДокумент.ИмяБезРасширения);
	ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);
	
КонецПроцедуры

// Завершение процедуры РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало.
Процедура РасшифроватьЭлектронныеДокументыВнутреннийЦиклПослеРасшифровкиЭД(РезультатВыполнения, Контекст) Экспорт
	
	Если Не РезультатВыполнения.Успех Тогда
		Контекст.СтруктураПакетаЭД.Вставить("ОписаниеОшибки", НСтр("ru = 'Не удалось расшифровать электронный документ из пакета.'"));
		ОбработатьПакетыЭДЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыполнения.РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
		Если Контекст.ЭлектронныйДокумент.Свойство("ДанныеФайлаЭД") Тогда
			Контекст.ЭлектронныйДокумент.ДанныеФайлаЭД = РезультатВыполнения.РасшифрованныеДанные;
		Иначе
			АдресЭД = ПоместитьВоВременноеХранилище(РезультатВыполнения.РасшифрованныеДанные, Контекст.ЭлектронныйДокумент.АдресЭД);
		КонецЕсли;
	Иначе
		РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РезультатВыполнения.РасшифрованныеДанные);
		Если Контекст.ЭлектронныйДокумент.Свойство("ДанныеФайлаЭД") Тогда
			Контекст.ЭлектронныйДокумент.ДанныеФайлаЭД = РасшифрованныеДанные;
		Иначе
			АдресЭД = ПоместитьВоВременноеХранилище(РасшифрованныеДанные, Контекст.ЭлектронныйДокумент.АдресЭД);
		КонецЕсли;
	КонецЕсли;
	
	РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало.
Процедура РасшифроватьЭлектронныеДокументыПослеВнутреннегоЦикла(Контекст)
	
	Если Контекст.МассивЭП.Количество() = 0 Тогда
		ОбработатьПакетыЭДЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии = Неопределено;
	Контекст.Свойство("МенеджерКриптографии", МенеджерКриптографии);
	
	Если ТипЗнч(МенеджерКриптографии) <> Тип("МенеджерКриптографии") Тогда
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ПрочитатьСертификатыПодписейПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
			"ПолучениеСертификатов", Ложь);
	Иначе
		ПрочитатьСертификатыПодписейПослеСозданияМенеджераКриптографии(Контекст.МенеджерКриптографии, Контекст)
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии") Тогда
		
		// Если на клиенте нет менеджера криптографии то проверка сертификата, извлекаемого из подписи, производится на сервере.
		ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьСертификатыПодписей(Контекст.ДанныеПакетовЭД, Контекст.КонтекстОперации);
		
		ОбработатьПакетыЭДПослеЦикла(Контекст);
		Возврат;
		
	КонецЕсли;
	
	Контекст.Вставить("Счетчик", -1);
	Контекст.Вставить("МенеджерКриптографии", Результат);
	ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст)
	
	Если Контекст.МассивЭП.Количество() <= Контекст.Счетчик + 1 Тогда
		ОбработатьПакетыЭДЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.Счетчик = Контекст.Счетчик + 1;
	Контекст.Вставить("Подпись", Контекст.МассивЭП[Контекст.Счетчик]);
	
	Если ЗначениеЗаполнено(Контекст.Подпись.Отпечаток) Тогда
		ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ДанныеФайлаЭП = Неопределено;
	Если НЕ Контекст.Подпись.Свойство("ДанныеФайлаЭП", ДанныеФайлаЭП) Тогда
		ДанныеФайлаЭП = ПолучитьИзВременногоХранилища(Контекст.Подпись.АдресЭП);
		Контекст.Подпись.Вставить("ДанныеФайлаЭП", ДанныеФайлаЭП);
	КонецЕсли;
	
	// Подпись не была прочитана при записи объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеФайлаЭП) Тогда
		ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.МенеджерКриптографии.НачатьПолучениеСертификатовИзПодписи(Новый ОписаниеОповещения(
			"ПрочитатьСертификатыПодписейВнутреннийЦиклПослеПолученияСертификатовИзПодписи", ЭтотОбъект, Контекст,
			"ПрочитатьСертификатыПодписейВнутреннийЦиклПослеОшибкиПолученияСертификатовИзПодписи", ЭтотОбъект),
		ДанныеФайлаЭП);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклПослеОшибкиПолученияСертификатовИзПодписи(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ШаблонСообщения = НСтр("ru = 'Получение сертификатов из подписи: %1'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Контекст.СтруктураПакетаЭД.Вставить("ОписаниеОшибки", ТекстСообщения);
	ОбработатьПакетыЭДЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклПослеПолученияСертификатовИзПодписи(СертификатыПодписи, Контекст) Экспорт
	
	Сертификат = ОбменСКонтрагентамиСлужебныйКлиентСервер.СертификатПодписавшейСтороны(СертификатыПодписи);
	Если Сертификат = Неопределено Тогда
		ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
		Возврат;
	Иначе
		Контекст.Вставить("Сертификат", Сертификат);
	КонецЕсли;
	
	Сертификат.НачатьВыгрузку(Новый ОписаниеОповещения(
		"ПрочитатьСертификатыПодписейВнутреннийЦиклПослеВыгрузкиСертификата", ЭтотОбъект, Контекст,
		"ПрочитатьСертификатыПодписейВнутреннийЦиклПослеОшибкиВыгрузкиСертификата", ЭтотОбъект));
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклПослеОшибкиВыгрузкиСертификата(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ШаблонСообщения = НСтр("ru = 'Выгрузка сертификата: %1'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИнформацияОбОшибке);
	
	Контекст.СтруктураПакетаЭД.Вставить("ОписаниеОшибки", ТекстСообщения);
	ОбработатьПакетыЭДЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклПослеВыгрузкиСертификата(ДанныеСертификата, Контекст) Экспорт
	
	Контекст.Подпись.Вставить("Отпечаток", Base64Строка(Контекст.Сертификат.Отпечаток));
	Контекст.Подпись.Вставить("КомуВыданСертификат", ЭлектроннаяПодписьКлиент.ПредставлениеСубъекта(Контекст.Сертификат));
	
	Если Контекст.Подпись.Свойство("ДанныеСертификата") Тогда
		Контекст.Подпись.ДанныеСертификата = ДанныеСертификата;
	Иначе
		Контекст.Подпись.Вставить("АдресСертификата", ПоместитьВоВременноеХранилище(ДанныеСертификата, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	ДанныеЭП = Неопределено;
	Если НЕ Контекст.Подпись.Свойство("ДанныеФайлаЭП", ДанныеЭП)
		И ЗначениеЗаполнено(Контекст.Подпись.АдресЭП) Тогда
		ДанныеЭП = Контекст.Подпись.АдресЭП;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЭП) Тогда
		Контекст.СтруктураПакетаЭД.Вставить("ОписаниеОшибки", НСтр("ru = 'Не удалось найти исходные данные для проверки ответной подписи.'"));
		ОбработатьПакетыЭДЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ДанныеЭД = Неопределено;
	Если НЕ (Контекст.Подпись.Свойство("ДанныеФайлаЭД", ДанныеЭД)
			ИЛИ Контекст.Подпись.Свойство("АдресЭД", ДанныеЭД)) Тогда
		
		ТипДанныхПодписи = Контекст.Подпись.ТипДанных;
		
		Для Каждого СвойстваФайлаЭлектронногоДокумента Из Контекст.МассивЭД Цикл
			
			Если (ТипДанныхПодписи = "ЭП"
					И СвойстваФайлаЭлектронногоДокумента.ТипДанных <> "ДополнительныйЭД")
				ИЛИ (ТипДанныхПодписи = "ПодписьДополнительногоЭД"
					И СвойстваФайлаЭлектронногоДокумента.ТипДанных = "ДополнительныйЭД") Тогда
				
				Если НЕ СвойстваФайлаЭлектронногоДокумента.Свойство("ДанныеФайлаЭД", ДанныеЭД) Тогда
					ДанныеЭД = СвойстваФайлаЭлектронногоДокумента.АдресЭД;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.ПроверитьПодпись(
		Новый ОписаниеОповещения("ПроверитьПодписиПослеПослеВыгрузкиСертификата", ЭтотОбъект, Контекст),
		ДанныеЭД, ДанныеЭП, Контекст.МенеджерКриптографии);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПроверитьПодписиПослеПослеВыгрузкиСертификата(Результат, Контекст) Экспорт
	
	Контекст.Подпись.Вставить("ДатаПроверкиПодписи", ОбщегоНазначенияКлиент.ДатаУниверсальная());
	Если Результат = Истина Тогда
		Контекст.Подпись.Вставить("ПодписьВерна", Истина);
	Иначе
		Контекст.Подпись.Вставить("ПодписьВерна", Ложь);
	КонецЕсли;
	
	ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьПакетыЭДЦиклНачало.
Процедура ОбработатьПакетыЭДПослеЦикла(Контекст)
	
	Если Контекст.Свойство("ОповещениеОЗавершении") Тогда
		Результат = Новый Структура;
		Результат.Вставить("ДанныеПакетовЭД", Контекст.ДанныеПакетовЭД);
		Результат.Вставить("КонтекстОперации", Контекст.КонтекстОперации);
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	// Перебор массива ДанныеПакетовЭД. Отобразить ошибки и удалить ошибочные пакеты из массива.
	КоличествоЭлементовКоллекции = Контекст.ДанныеПакетовЭД.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		Счетчик = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		ПакетЭД = Контекст.ДанныеПакетовЭД[Счетчик];
		
		Если ПакетЭД.Свойство("ОписаниеОшибки") Тогда
			ШаблонСообщения = НСтр("ru = 'При распаковке пакетаЭД: %1 возникла ошибка:
			|%2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД.ПакетЭДСсылка,
				ПакетЭД.ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			Контекст.ДанныеПакетовЭД.Удалить(Счетчик);
		КонецЕсли;
	КонецЦикла;
	
	// Если в массиве остались пакеты, то отправим их на запись в базу.
	РаспакованныеДокументы = Новый Структура;
	РаспакованныеДокументы.Вставить("МассивСлужебныхЭД", Новый Массив);
	РаспакованныеДокументы.Вставить("НовыеДокументы", Новый Массив);
	КолРаспакованныхЭД = 0;
	
	КонтекстОперации = Неопределено;
	Если Не Контекст.Свойство("КонтекстОперации", КонтекстОперации) Тогда
		КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	КонецЕсли;
	ОбменСКонтрагентамиСлужебныйВызовСервера.ЗаписатьДанныеПакетовЭД(Контекст.ДанныеПакетовЭД, РаспакованныеДокументы,
		КолРаспакованныхЭД, КонтекстОперации);
	Контекст.Вставить("КонтекстОперации", КонтекстОперации);
	
	МассивСлужебныхЭД = РаспакованныеДокументы.МассивСлужебныхЭД;
	
	Если МассивСлужебныхЭД.Количество() > 0 Тогда
		
		Действия = "ПодписатьОтправить";
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("КонтекстОперации", КонтекстОперации);
		ОбработатьЭД(Новый Массив, Действия, ДопПараметры, МассивСлужебныхЭД);
		Контекст.Вставить("КонтекстОперации", ДопПараметры.КонтекстОперации);
	КонецЕсли;
	
	ШаблонОповещения = НСтр("ru = 'Распаковано пакетов: %1.'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КолРаспакованныхЭД);
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	НовыеДокументы = РаспакованныеДокументы.НовыеДокументы;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыеДокументы, МассивСлужебныхЭД);
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЭлектронныеДокументы", НовыеДокументы);
	
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(Контекст.КонтекстОперации);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

Процедура ПолучитьДанныеЗашифрованногоМаркера(Результат, ДополнительныеПараметры) Экспорт
	
 	ИД_Параметров = Неопределено;
	МаркерЗашифрованный = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИД_Параметров", ИД_Параметров) Тогда
		
		// В переменной Параметры получаем структуру (СоотвСоглашенийИМассиваСертификатовАвторизации, СоотвСертификатовИИхСтруктур, ВозврСоответствие).
		// ВозврСоответствие - параметр, который передается в метод, указанный в обработке оповещения (ДополнительныеПараметры.ОбработкаОповещения).
		СоотвСертификатовИИхСтруктур = Неопределено;
		Параметры = ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров];
		Если ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур) Тогда
			
			// Результат - структура - ОписаниеДанных которая была передана в метод Расшифровать(),
			// дополненная параметром ВыбранныйСертификат на стороне БСП:
			ОписаниеДанных = Неопределено;
			ВыбранныйСертификат = Неопределено;
			Если Результат.Свойство("ОписаниеДанных", ОписаниеДанных)
				И ТипЗнч(ОписаниеДанных) = Тип("Структура")
				И ОписаниеДанных.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
				И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
				И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
				И СоотвСертификатовИИхСтруктур.Получить(Строка(ВыбранныйСертификат.УникальныйИдентификатор()) + "_" + ДополнительныеПараметры.ИдентификаторОрганизации) <> Неопределено Тогда
				
				СтруктураПараметровЗапросаМаркера = Параметры.СоотвСертификатовИИхСтруктур[Строка(ВыбранныйСертификат.УникальныйИдентификатор()) + "_" + ДополнительныеПараметры.ИдентификаторОрганизации];
				СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", ДополнительныеПараметры.СпособОбменаЭД);
				СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", ДополнительныеПараметры.ИдентификаторОрганизации);
				
				Контекст = Новый Структура;
				Контекст.Вставить("СтруктураПараметровЗапросаМаркера", СтруктураПараметровЗапросаМаркера);
				Контекст.Вставить("Оповещение", Результат.Оповещение);
				Контекст.Вставить("РезультатВыполнения", Результат);
				Контекст.Вставить("КонтекстОперации", Параметры.КонтекстОперации);
				Контекст.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
				ПолучитьДанныеЗашифрованногоМаркераПродолжить(Контекст);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеЗашифрованногоМаркераПродолжить(Контекст)
	
	МаркерЗашифрованный = Неопределено;
	Контекст.СтруктураПараметровЗапросаМаркера.Свойство("МаркерЗашифрованный", МаркерЗашифрованный);
	
	КонтекстОперации = Неопределено;
	Если Не Контекст.Свойство("КонтекстОперации", КонтекстОперации) Тогда
		КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	КонецЕсли;
	Если МаркерЗашифрованный = Неопределено Тогда
		
		КонтекстОперации.ТекущаяУчетнаяЗапись = Контекст.ДополнительныеПараметры.ИдентификаторОрганизации;
		
		ДополнительныеПараметрыЗапросаМаркера = НовыеПараметрыПолученияЗашифрованногоМаркера();
		ДополнительныеПараметрыЗапросаМаркера.ИнтернетПоддержкаПользователейПодключена = Истина;
		ДополнительныеПараметрыЗапросаМаркера.КонтекстОперации = КонтекстОперации;
		
		МаркерЗашифрованный = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(Контекст.СтруктураПараметровЗапросаМаркера,
			ДополнительныеПараметрыЗапросаМаркера);
			
		КонтекстОперации = ДополнительныеПараметрыЗапросаМаркера.КонтекстОперации;
		
		КонтекстОперации.ТекущаяУчетнаяЗапись = "";
		
		Если Не ДополнительныеПараметрыЗапросаМаркера.ИнтернетПоддержкаПользователейПодключена
			И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
			
			ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
				Новый ОписаниеОповещения("ПолучитьДанныеЗашифрованногоМаркераАутентификация", ЭтотОбъект, Контекст),
				ЭтотОбъект);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры = ПараметрыПриложения["ЭлектронноеВзаимодействие." + Контекст.ДополнительныеПараметры.ИД_Параметров];
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если МаркерЗашифрованный = Неопределено Тогда
			УчетныеЗаписиСНеполученнымиМаркерами = Новый Массив;
			Если Не Параметры.Свойство("УчетныеЗаписиСНеполученнымиМаркерами", УчетныеЗаписиСНеполученнымиМаркерами) Тогда
				УчетныеЗаписиСНеполученнымиМаркерами = Новый Массив;
			КонецЕсли;
			УчетныеЗаписиСНеполученнымиМаркерами.Добавить(Контекст.СтруктураПараметровЗапросаМаркера.ИдентификаторОрганизации);
			Параметры.Вставить("УчетныеЗаписиСНеполученнымиМаркерами", УчетныеЗаписиСНеполученнымиМаркерами);
		КонецЕсли;
		Параметры.Вставить("КонтекстОперации", КонтекстОперации);
		ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие." + Контекст.ДополнительныеПараметры.ИД_Параметров, Параметры);
	КонецЕсли;
		
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", МаркерЗашифрованный);
	
	Если МаркерЗашифрованный = Неопределено Тогда
		СертификатПодписи = "";
		Контекст.СтруктураПараметровЗапросаМаркера.Свойство("СертификатПодписи", СертификатПодписи);
		СпособОбменаЭД = "";
		Контекст.СтруктураПараметровЗапросаМаркера.Свойство("СпособОбменаЭД", СпособОбменаЭД);
		
		ВидОперации = НСтр("ru = 'Аутентификация в сервисе оператора ЭДО'");
		ТекстОшибкиШаблон = НСтр("ru = 'Не удалось получить зашифрованный маркер.'") + Символы.ПС 
			+ НСтр("ru = 'Сертификат электронной подписи: %1.'") + Символы.ПС
			+ НСтр("ru = 'Способ обмена: %2.'");
		ТекстОшибки = СтрШаблон(ТекстОшибкиШаблон, СертификатПодписи, СпособОбменаЭД);
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, , "ОбменСКонтрагентами");
			
		ОписаниеОшибки = НСтр("ru = 'Не удалось пройти аутентификацию в сервисе оператора ЭДО.'");
		Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки + Символы.ПС + НСтр("ru = 'Подробнее см. в журнале регистрации.'"));
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Параметры);
	
КонецПроцедуры

Процедура ПолучитьДанныеЗашифрованногоМаркераАутентификация(ПараметрыАутентификации, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура") Тогда
		// Пользователь отказался от ввода логина и пароля.
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеЗашифрованногоМаркераПродолжить(Контекст);
	
КонецПроцедуры

Процедура РасшифроватьМаркер(Результат, ДополнительныеПараметры) Экспорт
	
	ИД_Параметров = Неопределено;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИД_Параметров", ИД_Параметров) Тогда
		
		// В переменной Параметры получаем структуру (СоотвСоглашенийИМассиваСертификатовАвторизации, СоотвСертификатовИИхСтруктур, ВозврСоответствие).
		// ВозврСоответствие - параметр, который передается в метод, указанный в обработке оповещения (ДополнительныеПараметры.ОбработкаОповещения).
		ВозврСоответствие = Неопределено;
		Параметры = ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров];
		
		Если НЕ (ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие)
			И ТипЗнч(ВозврСоответствие) = Тип("Соответствие")) Тогда
			
			Параметры.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
			ВозврСоответствие = Параметры.СоответствиеПрофилейИПараметровСертификатов;
		КонецЕсли;
		
		// В результате приходят расшифрованные данные маркера, поместим их в ВозврСоответствие:
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Успех = Ложь;
			РасшифрованныеДанные = Неопределено;
			ПрофильНастроекЭДО = Неопределено;
			Если Результат.Свойство("РасшифрованныеДанные", РасшифрованныеДанные) Тогда
				Если ЭтоАдресВременногоХранилища(РасшифрованныеДанные) Тогда
					РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные);
				КонецЕсли;
				Если ТипЗнч(РасшифрованныеДанные) = Тип("ДвоичныеДанные")
					И ДополнительныеПараметры.Свойство("ПрофильНастроекЭДО", ПрофильНастроекЭДО) Тогда
					
					ВыбранныйСертификат = Неопределено;
					РеквизитыПрофиляНастроекЭДО = ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыУчетнойЗаписи(ПрофильНастроекЭДО);
					Если Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
						И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
						И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
						И Параметры.СоотвСертификатовИИхСтруктур.Получить(Строка(ВыбранныйСертификат.УникальныйИдентификатор())
							+ "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации) <> Неопределено Тогда
						
						ПараметрыСертификата = Параметры.СоотвСертификатовИИхСтруктур[Строка(ВыбранныйСертификат.УникальныйИдентификатор())
							+ "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации];
						ПараметрыСертификата.Вставить("МаркерРасшифрованный", РасшифрованныеДанные);
						
						ВозврСоответствие.Вставить(ПрофильНастроекЭДО, ПараметрыСертификата);
					Иначе
						ВозврСоответствие.Вставить(ПрофильНастроекЭДО, Новый Структура("МаркерРасшифрованный", РасшифрованныеДанные));
					КонецЕсли;
					
					// Временно сохраним введенный пользователем пароль к сертификату,
					// чтобы не запрашивать его еще раз при повторном получении маркера.
					Если Результат <> Неопределено И Результат.Свойство("КонтекстОперации") Тогда
						
						ПаролиКСертификатам = Неопределено;
						ДополнительныеПараметры.Свойство("ПаролиКСертификатам", ПаролиКСертификатам);
						Если ПаролиКСертификатам = Неопределено Тогда
							ПаролиКСертификатам = Новый Соответствие;
						КонецЕсли;
						
						Если ТипЗнч(ПаролиКСертификатам) = Тип("Соответствие") Тогда
							
							// Происходит Отправка/Получение ЭД из Текущих дел.
							// Сохраним пароли и передадим дальше по стеку, чтобы использовать их еще раз,
							// если нужно будет получить маркер повторно.
							ПаролиКСертификатам.Вставить(ПрофильНастроекЭДО, Результат.КонтекстОперации);
							ДополнительныеПараметры.Вставить("ПаролиКСертификатам", ПаролиКСертификатам);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			ОбработаннаяУчетнаяЗапись = ОбменСКонтрагентамиДиагностикаКлиентСервер.НовоеОписаниеОбработаннойУчетнойЗаписи();
			ОбработаннаяУчетнаяЗапись.Идентификатор = ДополнительныеПараметры.ПрофильНастроекЭДО;
			ОбработаннаяУчетнаяЗапись.ОтправкаПолучениеВыполнялись = Результат.Успех;
			
			УчетныеЗаписиСНеполученнымиМаркерами = Неопределено;
			Если Не Параметры.Свойство("УчетныеЗаписиСНеполученнымиМаркерами", УчетныеЗаписиСНеполученнымиМаркерами) Тогда
				УчетныеЗаписиСНеполученнымиМаркерами = Новый Массив;
			КонецЕсли;
			Если Не Результат.Успех Тогда
				ПользовательОтказалсяОтОперации = Результат.Отказ;
				Если ПользовательОтказалсяОтОперации Тогда
					ОбработаннаяУчетнаяЗапись.ПользовательОтказалсяОтОперации = Истина;
				ИначеЕсли УчетныеЗаписиСНеполученнымиМаркерами.Найти(ДополнительныеПараметры.ПрофильНастроекЭДО) = Неопределено Тогда
					ДополнительныеПараметры.КонтекстОперации.ТекущаяУчетнаяЗапись = ДополнительныеПараметры.ПрофильНастроекЭДО;
					ТекстОшибки = "";
					Если Не Результат.Свойство("ОписаниеОшибки", ТекстОшибки) Тогда
						ТекстОшибки = НСтр("ru = 'Произошла криптографическая ошибка'");
					КонецЕсли;
					Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(НСтр("ru = 'Расшифровка маркера'"),
						ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиКриптография(),
						ТекстОшибки, ТекстОшибки);
					ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ДобавитьОшибку(ДополнительныеПараметры.КонтекстОперации,
						Ошибка, Ложь);
					ИнформацияОбОшибке = ОбработаннаяУчетнаяЗапись.ИнформацияОбОшибке;
					ИнформацияОбОшибке.КраткоеПредставление = НСтр("ru = 'Ошибка при расшифровке маркера'");
					ИнформацияОбОшибке.ПодробноеПредставление.Текст = Ошибка.ПодробноеПредставлениеОшибки;
				Иначе 
					ИнформацияОбОшибке = ОбработаннаяУчетнаяЗапись.ИнформацияОбОшибке;
					ИнформацияОбОшибке.КраткоеПредставление = НСтр("ru = 'Ошибка'");
					ИнформацияОбОшибке.ПодробноеПредставление.Текст = Результат.ОписаниеОшибки;
				КонецЕсли;
			КонецЕсли;
			ДополнительныеПараметры.ОбработанныеУчетныеЗаписи.Вставить(ОбработаннаяУчетнаяЗапись.Идентификатор, ОбработаннаяУчетнаяЗапись);
		КонецЕсли;
		
		ЗапуститьФинальныйОбработчикОповещения = Истина;
		ОбработчикОповещения = Неопределено;
		
		СоответствиеСоглашенийИСертификатов = Неопределено;
		ДополнительныеПараметры.Свойство("СоответствиеСоглашенийИСертификатов", СоответствиеСоглашенийИСертификатов);
		
		Если ТипЗнч(СоответствиеСоглашенийИСертификатов) = Тип("Соответствие") Тогда
			
			// Сохраним полный список доступных сертификатов в разрезе профилей. Позже он будет передан вызывавшему методу.
			Если Не ДополнительныеПараметры.Свойство("СоответствиеСоглашенийИСертификатовИсходное") Тогда
				СоответствиеСоглашенийИСертификатовИсходное = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(СоответствиеСоглашенийИСертификатов);
				ДополнительныеПараметры.Вставить("СоответствиеСоглашенийИСертификатовИсходное", СоответствиеСоглашенийИСертификатовИсходное);
			КонецЕсли;
			
			Для Каждого Элемент Из СоответствиеСоглашенийИСертификатов Цикл
				
				ПрофильНастроекЭДО = Элемент.Ключ;
				Сертификаты        = Элемент.Значение;
				
				Если НЕ (ТипЗнч(Сертификаты) = Тип("Массив") И ЗначениеЗаполнено(ПрофильНастроекЭДО)) Тогда
					Продолжить;
				КонецЕсли;
				
				РеквизитыПрофиляНастроекЭДО = ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыУчетнойЗаписи(ПрофильНастроекЭДО);
				МассивСертификатов = Новый Массив;
				
				Для Каждого Сертификат Из Сертификаты Цикл
					КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
					ПараметрыСтруктура = Параметры.СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
					Если ПараметрыСтруктура.Свойство("МаркерРасшифрованный") Тогда
						ВозврСоответствие.Вставить(ПрофильНастроекЭДО, ПараметрыСтруктура);
						МассивСертификатов = Новый Массив;
						Прервать;
					Иначе
						Если ПараметрыСтруктура.ПарольПолучен Тогда
							// Авторизоваться на сервере оператора можно любым зарегистрированным в соглашении сертификатом,
							// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
							// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
							// диалог выбора сертификата.
							МассивСертификатов = Новый Массив;
							МассивСертификатов.Добавить(Сертификат);
							Прервать;
						Иначе
							МассивСертификатов.Добавить(Сертификат);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// Если массив сертификатов пустой, значит либо уже есть расшифрованный маркер, либо нет сертификатов,
				// в обоих случаях переходим к обработке следующей Настройки ЭДО.
				Если МассивСертификатов.Количество() > 0 Тогда
					
					ОписаниеДанных = Новый Структура;
					ОписаниеДанных.Вставить("ЗаголовокДанных",   НСтр("ru = ''"));
					ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
					ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
					ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
					ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация в сервисе ЭДО'"));
					ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
					
					// Если пароль к сертификату временно сохранен, то получим его и укажем в качестве контекста операции.
					КонтекстОперации = Неопределено;
					Если ДополнительныеПараметры.Свойство("ПаролиКСертификатам") Тогда
						
						Если ТипЗнч(ДополнительныеПараметры.ПаролиКСертификатам) = Тип("Соответствие") Тогда
							КонтекстОперации = ДополнительныеПараметры.ПаролиКСертификатам[ПрофильНастроекЭДО];
						Иначе
							КонтекстОперации = ДополнительныеПараметры.ПаролиКСертификатам; // управляемая форма
						КонецЕсли;
						
					КонецЕсли;
					ОписаниеДанных.Вставить("КонтекстОперации", КонтекстОперации);
					
					СтруктураПараметровЗапросаМаркера = Новый Структура();
					СтруктураПараметровЗапросаМаркера.Вставить("ИД_Параметров",  ИД_Параметров);
					СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
					СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации);
					Если ДополнительныеПараметры.Свойство("КонтекстОперации") Тогда
						СтруктураПараметровЗапросаМаркера.Вставить("КонтекстОперации", ДополнительныеПараметры.КонтекстОперации);
					КонецЕсли;
					Маркер = Новый ОписаниеОповещения("ПолучитьДанныеЗашифрованногоМаркера", ЭтотОбъект, СтруктураПараметровЗапросаМаркера);
					
					ОписаниеДанных.Вставить("Данные", Маркер);
					ОписаниеДанных.Вставить("ПрекратитьВыполнение", Истина);
					
					ДополнительныеПараметры.Вставить("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
					ДополнительныеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
					
					// Удалим из соответствия обработанный элемент:
					СоответствиеСоглашенийИСертификатов.Удалить(ПрофильНастроекЭДО);
					СтруктураПараметровЗапросаМаркера.Вставить("ДополнительныеПараметрыРасшифровкиМаркера", ДополнительныеПараметры);
					ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьМаркер", ЭтотОбъект, ДополнительныеПараметры);
					
					ЗапуститьФинальныйОбработчикОповещения = Ложь;
					УстановитьПаролиСертификатов(Параметры.СоотвСертификатовИИхСтруктур);
					ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗапуститьФинальныйОбработчикОповещения
			И ДополнительныеПараметры.Свойство("ОбработчикОповещения", ОбработчикОповещения)
			И ТипЗнч(ОбработчикОповещения) = Тип("ОписаниеОповещения") Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие);
			
			СоответствиеСоглашенийИСертификатов = Неопределено;
			Если Не ДополнительныеПараметры.Свойство("СоответствиеСоглашенийИСертификатовИсходное", СоответствиеСоглашенийИСертификатов) Тогда
				СоответствиеСоглашенийИСертификатов = Новый Соответствие;
			КонецЕсли;
			
			ПараметрыОповещения.Вставить("СоответствиеСоглашенийИСертификатов",
				ДополнительныеПараметры.СоответствиеСоглашенийИСертификатовИсходное);
			ПаролиКСертификатам = ?(ДополнительныеПараметры.Свойство("ПаролиКСертификатам"),
				ДополнительныеПараметры.ПаролиКСертификатам, Неопределено);
			ПараметрыОповещения.Вставить("ПаролиКСертификатам", ПаролиКСертификатам);
			
			ПараметрыОповещения.Вставить("КонтекстОперации", ДополнительныеПараметры.КонтекстОперации);
			ПараметрыОповещения.Вставить("ОбработанныеУчетныеЗаписи", ДополнительныеПараметры.ОбработанныеУчетныеЗаписи);
			
			Если ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров] <> Неопределено Тогда
				ПараметрыПриложения.Удалить("ЭлектронноеВзаимодействие." + ИД_Параметров);
			КонецЕсли;
			
			УстановитьПаролиСертификатов(Параметры.СоотвСертификатовИИхСтруктур, Ложь);
			
			ВыполнитьОбработкуОповещения(ОбработчикОповещения, ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОтправкуПакетов(Пакеты, КонтекстОтправки) 
	
	КонтекстОтправки.Вставить("Пакеты", Пакеты);
	ОбработчикОповещения = Новый ОписаниеОповещения("ОтправитьМассивПакетовОповещение", ЭтотОбъект, КонтекстОтправки);
	ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработчикОповещения, КонтекстОтправки.УчетныеЗаписи, КонтекстОтправки.Пакеты,,
		КонтекстОтправки.КонтекстОперации);
	
КонецПроцедуры

Процедура ЗавершитьОтправкуПакетов(КонтекстОтправки) 
	
	Если КонтекстОтправки.Оповещение <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(КонтекстОтправки.Оповещение, КонтекстОтправки.КоличествоОтправленных);
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ЭлектронныеДокументы", КонтекстОтправки.ОтправленныеДокументы);
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КонтекстОтправки.КоличествоОтправленных);
	
	ЗаголовокОповещения = НСтр("ru = 'Отправка электронных документов'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	Если КонтекстОтправки.КоличествоОтправленных = 0 И КонтекстОтправки.КонтекстОперации.Диагностика.Ошибки.Количество() > 0 Тогда
		ОбработчикПовторенияДействия = Новый ОписаниеОповещения("ОтправитьМассивПакетовЭДПовторить", ЭтотОбъект, КонтекстОтправки);
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.НовыеПараметрыОбработкиОшибок();
		ПараметрыОбработкиОшибок.ОбработчикПовторенияДействия = ОбработчикПовторенияДействия;
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОтправки.КонтекстОперации, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьМассивПакетовОповещение(Результат, КонтекстОтправки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстОтправки.КонтекстОперации = Результат.КонтекстОперации;
	СоотвСоглашенийИСтруктурСертификатов = Результат.СоответствиеПрофилейИПараметровСертификатов;
	
	КонтекстОтправки.КонтекстОперации.ЗаголовокОперации = НСтр("ru = 'При отправке пакетов электронных документов'");
	
	ЭтоПоследняяПопытка = ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПоследняяПопыткаОтправкиПолученияДокументов(КонтекстОтправки.КоличествоПопыток);
	ПовторнаяОтправка = ЭтоПоследняяПопытка;// При повторной отправке регистрируются ошибки просроченного маркера.
	
	РезультатОтправки = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправкаПакетовЭД(КонтекстОтправки.Пакеты,
		СоотвСоглашенийИСтруктурСертификатов, КонтекстОтправки.ОтправленныеДокументы, КонтекстОтправки.КонтекстОперации, ПовторнаяОтправка);
		
	КонтекстОтправки.КоличествоОтправленных = КонтекстОтправки.КоличествоОтправленных + РезультатОтправки.КоличествоОтправленных;
	Если РезультатОтправки.ПакетыДляПовторнойОтправки.Количество() И Не ЭтоПоследняяПопытка Тогда
		КонтекстОтправки.КоличествоПопыток = КонтекстОтправки.КоличествоПопыток + 1;
		НачатьОтправкуПакетов(РезультатОтправки.ПакетыДляПовторнойОтправки, КонтекстОтправки);
	Иначе 
		ЗавершитьОтправкуПакетов(КонтекстОтправки);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьПредложениеОбАннулировании.
Процедура ОбработатьПредложениеОбАннулированииЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Оповестить("ОбновитьСостояниеЭД", ДополнительныеПараметры);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьОтклонениеАннулированиеЭД.
Процедура ОбработатьОтклонениеАннулированиеЭДЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Неопределено;
	ДополнительныеПараметры.Свойство("ОписаниеОповещения", ОписаниеОповещения);
	
	Если Результат = Неопределено Тогда
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОтклонениеВыполнено = Ложь;
	ОповещениеВыполнено = Ложь;
	
	
	// Определим вид служебного документа
	Если ДополнительныеПараметры.Отклонить Тогда
		ВидСлужебногоЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.УведомлениеОбУточнении");
	Иначе
		ВидСлужебногоЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПредложениеОбАннулировании");
	КонецЕсли;
	
	// Сформируем текст оповещения
	Текст = НСтр("ru = '%1:
	|%2'");
	ТекстУточнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, 
	ПользователиКлиент.ТекущийПользователь(), Результат);
	
	// В зависимости от входящих требований сформируем массив документов для формирования служебных 
	// и массив для простого изменения статуса.
	ДокументыДляФормированияУОУ = Новый Массив;
	ДокументыДляПростогоОтклонения = Новый Массив;
	ВсеДокументы = Новый Массив;
	Для Каждого НаборПараметров Из ДополнительныеПараметры.ПараметрыОбработкиЭД Цикл				
		// При аннулировании параметр ФормироватьЭД всегда имеет значение Истина,
		// при отклонении может иметь значение как Истина, так и Ложь.
		
		ФормироватьУОУ = Ложь;
		Если НЕ (НаборПараметров.Свойство("ФормироватьУОУ", ФормироватьУОУ) И ФормироватьУОУ = Истина) Тогда
			ДокументыДляПростогоОтклонения.Добавить(НаборПараметров.СсылкаНаЭД);
		Иначе
			ДокументыДляФормированияУОУ.Добавить(НаборПараметров.СсылкаНаЭД);
		КонецЕсли;
		ВсеДокументы.Добавить(НаборПараметров.СсылкаНаЭД);
	КонецЦикла;
	
	// Обработаем документы для простого отклонения
	Если ДокументыДляПростогоОтклонения.Количество() > 0 Тогда
		СтруктураПараметров = Новый Структура("ПрисоединенныеФайлы, Отклонить, ПричинаОтклонения", 
			ДокументыДляПростогоОтклонения, ДополнительныеПараметры.Отклонить, Результат);
		ОбменСКонтрагентамиСлужебныйВызовСервера.ОбработатьПростоеОтклонениеАннулирование(СтруктураПараметров);
	КонецЕсли;
	
	// Сформируем служебные документы по тем ЭД, по которым это нужно
	ОповещениеВыполнено = Ложь;
	Если ДокументыДляФормированияУОУ.Количество() > 0 Тогда
		СформироватьПодписатьСлужебныйЭД(ДокументыДляФормированияУОУ, 
		ВидСлужебногоЭД, ТекстУточнения, , ОписаниеОповещения);
		ОповещениеВыполнено = Истина;
	КонецЕсли;
	
	ОтклонениеВыполнено = Истина;
	ОбменСКонтрагентамиСлужебныйВызовСервера.ОповеститьОбОтклоненииАннулированииЭлектронныхДокументов(ВсеДокументы, ДополнительныеПараметры.Отклонить);
	// Если не выполняли оповещение на предыдущем шаге, выполним его сейчас
	Если Не ОповещениеВыполнено И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ОтклонениеВыполнено);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПаролиСертификатов(Знач ОписанияСертификатов, Знач Установить = Истина)
	
	Для каждого КлючЗначение Из ОписанияСертификатов Цикл
		
		Описание = КлючЗначение.Значение;
		Сертификат = Неопределено;
		
		Если ТипЗнч(КлючЗначение.Ключ) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
			Сертификат = КлючЗначение.Ключ;
		ИначеЕсли Описание.Свойство("СертификатПодписи") Тогда
			Сертификат = Описание.СертификатПодписи;
		Иначе
			Продолжить;
		КонецЕсли;
		Если Установить И Описание.ПарольПолучен И Описание.ПарольПользователя <> Неопределено Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, Описание.ПарольПользователя);
		ИначеЕсли Не Установить Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьПроблемыПриФормированииДокументов(СсылкиНаОбъекты, АдресСведенийОбОшибках, Оповещение, Действие, ДополнительныеДанные, ФормаВладелец = Неопределено)
	
	Если Не ЗначениеЗаполнено(АдресСведенийОбОшибках) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСведенийОбОшибках", АдресСведенийОбОшибках);
	ПараметрыФормы.Вставить("ПодписатьОтправить", СтрНайти(Действие, "Подписать") > 0);
	ПараметрыФормы.Вставить("ФормаОткрыта", Ложь);
	ПараметрыФормы.Вставить("СписокДокументовКОтправке", СсылкиНаОбъекты);
	ПараметрыФормы.Вставить("ДополнительныеДанные"     , ДополнительныеДанные);
	
	Оповестить("ПоказатьПроблемыПриФормированииДокументов", ПараметрыФормы);
	
	Если Не ПараметрыФормы.ФормаОткрыта Тогда
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ПроблемыПриФормированииДокументов", ПараметрыФормы, ФормаВладелец,,,,
			Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДокументПослеУстраненияОшибок(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено
		ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылокНаОбъекты = Результат.Документы;
	
	Если ЗначениеЗаполнено(Контекст)
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст, "ПроверитьФормирование", Ложь) Тогда
		ПроверитьФормированиеЭД(МассивСсылокНаОбъекты[0], Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Результат.Свойство("ДополнительныеДанные") Тогда
		ДополнительныеПараметры.Вставить("ДополнительныеДанные", Результат.ДополнительныеДанные);
	КонецЕсли;
	
	Если Результат.Свойство("ПодписантыОбъектов") Тогда
		ДополнительныеПараметры.Вставить("ПодписантыОбъектов", Результат.ПодписантыОбъектов);
	КонецЕсли;
	
	Если Результат.Свойство("КлючиНастроекОбъектов") Тогда
		ДополнительныеПараметры.Вставить("КлючиНастроекОбъектов", Результат.КлючиНастроекОбъектов);
	КонецЕсли;
	
	Если ТипЗнч(Контекст) = Тип("Структура")
			И Контекст.Свойство("ДопПараметры")
			И Контекст.ДопПараметры.Свойство("НастройкиОбмена") Тогда
			
			ДополнительныеПараметры.Вставить("НастройкиОбмена", Контекст.ДопПараметры.НастройкиОбмена);
			
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения;
	Если ЗначениеЗаполнено(Контекст) Тогда
		Оповещение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст, "ОповещениеОЗавершении", Оповещение);
	КонецЕсли; 	
	
	ОбработатьЭД(МассивСсылокНаОбъекты, Результат.Действие, ДополнительныеПараметры,,Оповещение);
	
КонецПроцедуры

Процедура ПроверитьФормированиеЭД(СсылкаНаОбъект, ДополнительныеПараметры = Неопределено)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	ДополнительныеПараметры.Вставить("КонтекстОперации", КонтекстОперации);
	ДополнительныеПараметры.Вставить("ИспользоватьПомощникУстраненияОшибок", Истина);
	
	Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьЭДПоОснованиюИСохранитьВФайл(
		СсылкаНаОбъект, Новый Структура, ДополнительныеПараметры);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Успех = Истина Тогда
			
			СсылкаДляПросмотра = ПредопределенноеЗначение("Документ.ЭлектронныйДокументИсходящий.ПустаяСсылка");
			ФормаПросмотра = ОбменСКонтрагентамиСлужебныйВызовСервера.ФормаПросмотраЭлектронногоДокумента(СсылкаДляПросмотра);
			
			Если ФормаПросмотра = Неопределено 
					Или Не Результат.Свойство("АдресФайловЭД") Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресФайловЭД"        , Результат.АдресФайловЭД);
			ПараметрыФормы.Вставить("ДокументыОснование"   , Результат.МассивСсылокНаОбъект);
			ПараметрыФормы.Вставить("НастройкиОбмена"      , Результат.НастройкиОбмена);
			ПараметрыФормы.Вставить("ДополнительныеДанные" , Результат.ДополнительныеДанные);
			
			ОткрытьФорму(ФормаПросмотра.ИмяФормы, ПараметрыФормы,, СсылкаНаОбъект);
			
		ИначеЕсли Результат.Успех = Ложь Тогда
			
			Если ЗначениеЗаполнено(Результат.ПараметрыПросмотраСтатусов) Тогда
				ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.СтатусыЭлектронныхДокументов",
					Результат.ПараметрыПросмотраСтатусов,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				ДополнительныеДанные = Неопределено;
				Контекст = Новый Структура("ПроверитьФормирование", Истина);
				Результат.Свойство("ДополнительныеДанные", ДополнительныеДанные);
				Оповещение = Новый ОписаниеОповещения("ОбработатьДокументПослеУстраненияОшибок", ЭтотОбъект, Контекст);
				ПоказатьПроблемыПриФормированииДокументов(Результат.МассивСсылокНаОбъект,
					Результат.АдресОшибокФормирования, Оповещение, "Сформировать", ДополнительныеДанные);
			КонецЕсли;
			
		Иначе
			Контекст = Новый Структура;
			Контекст.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
			Контекст.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.НовыеПараметрыОбработкиОшибок();
			ПараметрыОбработкиОшибок.ОбработчикПовторенияДействия = Новый ОписаниеОповещения("ПроверитьФормированиеЭДПовторить", ЭтотОбъект, Контекст);
			ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(ДополнительныеПараметры.КонтекстОперации, ПараметрыОбработкиОшибок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьФормированиеЭДПовторить(КонтекстОперации, Контекст) Экспорт
	
	ПроверитьФормированиеЭД(Контекст.СсылкаНаОбъект, Контекст.ДополнительныеПараметры);
	
КонецПроцедуры

Процедура СформироватьВнутреннийДокументПослеНастройки(Настройки, СсылкаНаОбъект) Экспорт
	
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючиНастроекОбъектов = Новый Соответствие;
	КлючиНастроекОбъектов.Вставить(СсылкаНаОбъект,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Настройки.КлючНастройки));
	
	ПодписантыОбъектов = Новый Соответствие;
	ПодписантыПоВидам = Новый Соответствие;
	ПодписантыПоВидам.Вставить(Настройки.КлючНастройки.ВидВнутреннегоДокумента, Настройки.Подписанты);
	ПодписантыОбъектов.Вставить(СсылкаНаОбъект, ПодписантыПоВидам);
	
	МаршрутыПодписанияОбъектов = Новый Соответствие;
	МаршрутыПоВидам = Новый Соответствие;
	МаршрутыПоВидам.Вставить(Настройки.КлючНастройки.ВидВнутреннегоДокумента, Настройки.Маршрут);
	МаршрутыПодписанияОбъектов.Вставить(СсылкаНаОбъект, МаршрутыПоВидам);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КлючиНастроекОбъектов", КлючиНастроекОбъектов);
	ДополнительныеПараметры.Вставить("ПодписантыОбъектов", ПодписантыОбъектов);
	ДополнительныеПараметры.Вставить("МаршрутыПодписанияОбъектов", МаршрутыПодписанияОбъектов);
	
	ПроверитьФормированиеЭД(СсылкаНаОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

#Область НоваяАрхитектураЭДО

#Область КомандыЭДО

// Открывает форму списка учетных записей организации
//
// Параметры:
//  Организация -ОпределяемыйТип.ОрганизацияБЭД - Организация
//  ДополнительныеПараметры  - Структура - Дополнительные параметры открытия формы
//
Процедура ОткрытьСписокУчетныхЗаписей(Организация, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОтбора   = Новый Структура("Организация", Организация);
	ПараметрыОткрытия = Новый Структура("Отбор", НастройкиОтбора);
	
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.ФормаСписка", ПараметрыОткрытия,,
		Организация.УникальныйИдентификатор());
	
КонецПроцедуры

// Открывает форму для работы с настройкой отправки ЭДО
//
// Параметры:
//  Договор -ОпределяемыйТип.ДоговорыКонтрагентов - Договор
//  ДополнительныеПараметры  - Структура - Дополнительные параметры открытия формы
//
Процедура ОткрытьНастройкиОтправкиДокументовПоДоговору(Договор, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	КлючЗаписи = ОбменСКонтрагентамиСлужебныйВызовСервера.НастройкаПоДоговоруКонтрагента(Договор);
	
	Если КлючЗаписи.Владелец = Неопределено Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Контрагент"  , КлючЗаписи.Получатель);
		ПараметрыОткрытия.Вставить("Организация" , КлючЗаписи.Отправитель);
		ПараметрыОткрытия.Вставить("Договор"     , КлючЗаписи.Договор);
		
		ОткрытьФорму("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.Форма.НастройкиОтправкиДокументов", ПараметрыОткрытия);
		
	Иначе
		
		ОткрытьНастройкиОтправкиДокументовКонтрагента(КлючЗаписи.Владелец);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму для работы с настройкой интеркампани
//
// Параметры:
//  Организация -ОпределяемыйТип.ОрганизацияБЭД - Организация
//  ДополнительныеПараметры  - Структура - Дополнительные параметры открытия формы
//
Процедура НастройкиОтправкиДокументовИнтеркампани(Организация, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Организация", Организация);
	
	ОткрытьФорму("РегистрСведений.НастройкиОтправкиЭлектронныхДокументов.Форма.НастройкиОтправкиИнтеркампани",
		ПараметрыОткрытия,, Организация.УникальныйИдентификатор());
КонецПроцедуры

// Открывает актуальный ЭД по документу ИБ.
//
// Параметры:
//  ПараметрКоманды - Ссылка - ссылка на документ ИБ;
//  Источник - ФормаКлиентскогоПриложения - источник открытия;
//  ПараметрыОткрытия - Структура - дополнительные параметры просмотра.
//
Процедура ОткрытьНастройкиОтправкиДокументовКонтрагента(ПараметрКоманды, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрКоманды) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Контрагент", ПараметрКоманды);
	
	ОткрытьФорму("РегистрСведений.НастройкиОтправкиЭлектронныхДокументов.Форма.НастройкиОтправки",
		ПараметрыОткрытия,, ПараметрКоманды.УникальныйИдентификатор(),,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает актуальный ЭД по документу ИБ.
//
// Параметры:
//  ПараметрКоманды - Ссылка - ссылка на документ ИБ;
//  Источник - ФормаКлиентскогоПриложения - источник открытия;
//  ПараметрыОткрытия - Структура - дополнительные параметры просмотра.
//
Процедура ОткрытьНастройкиОтраженияВУчете(ПараметрКоманды, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрКоманды) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Контрагент", ПараметрКоманды);
	
	ОткрытьФорму("РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Форма.НастройкиОтраженияВходящихДокументов",
				ПараметрыОткрытия,, ПараметрКоманды.УникальныйИдентификатор(),,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Команда подключения к ЭДО
Процедура ПодключитьКЭДО(ПараметрКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	СпособыОЭД = Новый Массив;
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпособыОбменаЭД", СпособыОЭД);
	ПараметрыФормы.Вставить("Организация"    , ПараметрКоманды);

	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыФормы,,
		ПараметрКоманды.УникальныйИдентификатор());

КонецПроцедуры

#КонецОбласти

#Область ПодключениеУчетнойЗаписи

Процедура ОбновитьПараметрыУведомленийВСервисеЭДО(Форма, ОписаниеОповещенияЗавершение, ПараметрыПроцедуры) Экспорт

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.НачатьОбновлениеПараметровУведомленийВСервисеЭДО(ПараметрыПроцедуры);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ОписаниеОповещенияЗавершение,
		ПараметрыОжидания);
		
КонецПроцедуры

Процедура ПолучитьПараметрыУведомленийВСервисеЭДО(Форма, ОписаниеОповещенияЗавершение, ПараметрыПроцедуры) Экспорт

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.НачатьПолучениеПараметровУведомленийВСервисеЭДО(ПараметрыПроцедуры);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ОписаниеОповещенияЗавершение,
		ПараметрыОжидания);
		
КонецПроцедуры

Процедура ОтправитьДанныеАбонентаВСервисНастроек(Форма, ОписаниеОповещенияЗавершение, ПараметрыПроцедуры) Экспорт

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.НачатьОтправкуДанныхАбонентаВСервисНастроек(ПараметрыПроцедуры);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ОписаниеОповещенияЗавершение,
		ПараметрыОжидания);
		
КонецПроцедуры

Процедура ОтправитьРегистрационныйПакетВСервис1СЭДО(Форма, ЗавершениеОжидания, ПараметрыРегистрации, КонтекстОперации = Неопределено) Экспорт
	
	ДанныеПакета = ОбменСКонтрагентамиСлужебныйВызовСервера.ДанныеДляРегистрационногоПакета1СЭДО(ПараметрыРегистрации);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДвоичныеДанныеСоглашенияНаПодключениеЭДО" , ДанныеПакета.ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	Контекст.Вставить("РеквизитыПакета"                          , ДанныеПакета.РеквизитыПакета);
	Контекст.Вставить("ДвоичныеДанныеДляОператораЭДО"            , ДанныеПакета.ДвоичныеДанныеДляОператораЭДО);
	Контекст.Вставить("ОператорЭДОСертификат"                    , ДанныеПакета.ОператорЭДОСертификат);
	Контекст.Вставить("УникальныйИдентификаторЗаявки1СЭДО"       , ДанныеПакета.РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	Контекст.Вставить("Оповещение"                               , ЗавершениеОжидания);
	Контекст.Вставить("Форма"                                    , Форма);
	Если КонтекстОперации = Неопределено Тогда
		КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	КонецЕсли;
	Контекст.Вставить("КонтекстОперации"               , КонтекстОперации);
	
	ЗавершениеОжидания.ДополнительныеПараметры.Вставить("УникальныйИдентификаторЗаявки1СЭДО", ДанныеПакета.РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	
	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("СформироватьИОтправитьРегистрационныйПакет1СЭДОПослеПодписания", ЭтотОбъект, Контекст);
	
	НачатьПодписаниеРегистрационногоПакета1СЭДО(ДанныеПакета, ОписаниеПодписатьЭД);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НоваяАрхитектураЭДО_РегистрацияСертификатовВСервисеЭДО

Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДОПослеПодписания(РезультатВыполнения, Контекст) Экспорт
	
	Если РезультатВыполнения = Неопределено Тогда
		РезультатОперации = НовыйРезультатОперацииВСервисе1СЭДО();
		РезультатОперации.Результат = Ложь;
		Если Контекст.Свойство("КонтекстОперации") Тогда
			РезультатОперации.КонтекстОперации = Контекст.КонтекстОперации;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, РезультатОперации);
		Возврат;
	КонецЕсли;
	
	КонтекстОперации = Неопределено;
	
	Если Контекст.Свойство("СсылкаНаДвоичныеДанныеФайла") Тогда
		УдалитьИзВременногоХранилища(Контекст.СсылкаНаДвоичныеДанныеФайла);
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		// Оповещение произошло из процедуры БСП
		Если РезультатВыполнения.Свойство("НаборДанных") Тогда
			// Если Успех, необходимо перебрать элементы массива Набор данных
			// в подписанных эд в элементе массива являющимся структурой будет свойство "Свойства подписи"
			// такие ЭД надо добавить в массив "МассивЭД" для обновления их статусов.
			Для Каждого ПодписываемыеДанные Из РезультатВыполнения.НаборДанных Цикл
				Если Не ПодписываемыеДанные.Свойство("СвойстваПодписи") Тогда
					РезультатОперации = НовыйРезультатОперацииВСервисе1СЭДО();
					ВыполнитьОбработкуОповещения(Контекст.Оповещение, РезультатОперации);
					Контекст.Очистить();
					Возврат;
				КонецЕсли;
				
				СтруктураПодписи = ПодписываемыеДанные.СвойстваПодписи;
				Если ЭтоАдресВременногоХранилища(ПодписываемыеДанные.СвойстваПодписи) Тогда
					СтруктураПодписи = ПолучитьИзВременногоХранилища(СтруктураПодписи);
				КонецЕсли;
				Если Контекст.ДвоичныеДанныеСоглашенияНаПодключениеЭДО = ПодписываемыеДанные.Данные Тогда
				
					Контекст.Вставить("ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО", СтруктураПодписи.Подпись);
				КонецЕсли;
				Если Контекст.ДвоичныеДанныеДляОператораЭДО = ПодписываемыеДанные.Данные Тогда
				
					Контекст.Вставить("ПодписанныеДвоичныеДанныеДляОператораЭДО", СтруктураПодписи.Подпись);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Контекст.Оповещение.ДополнительныеПараметры.Вставить("КонтекстОперации", РезультатВыполнения.КонтекстОперации);
	
	// Зашифровать
	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("СформироватьИОтправитьРегистрационныйПакет1СЭДОПослеШифрования", ЭтотОбъект, Контекст);
	
	ТекстСертификата = Контекст.ОператорЭДОСертификат;
	Если СтрНайти(ТекстСертификата, "-----BEGIN CERTIFICATE-----") > 0 Тогда
		ТекстСертификата = СтрЗаменить(ТекстСертификата, "-----BEGIN CERTIFICATE-----", "");
		ТекстСертификата = СтрЗаменить(ТекстСертификата, "-----END CERTIFICATE-----", "");
	КонецЕсли;
	ТекстСертификата = СтрЗаменить(ТекстСертификата, " ", ""); // из-за пробелов получаются пустые двоичные данные дальше
	
	// Подготовим сертификат оператора ЭДО для шифрования информации
	Если Не ЗначениеЗаполнено(ТекстСертификата) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка получения сертификата оператора ЭДО.
									|Необходимо повторить получение идентификатора участника ЭДО.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		РезультатОперации = НовыйРезультатОперацииВСервисе1СЭДО();
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, РезультатОперации);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеСертификатаОператораЭДО = Base64Значение(ТекстСертификата);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Шифрование данных для регистрации у оператора ЭДО'"));
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(ДвоичныеДанныеСертификатаОператораЭДО);
	ОписаниеДанных.Вставить("НаборСертификатов",   МассивСертификатов);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
	ОписаниеДанных.Вставить("Данные",              Контекст.ДвоичныеДанныеДляОператораЭДО);
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	
	Представление = Новый Структура;
	Представление.Вставить("Представление", НСтр("ru = 'Данные для регистрации у оператора ЭДО'"));
	ОписаниеПредставленияЗаявления = Новый ОписаниеОповещения("ОбработатьПредставлениеДанныхДляОператораЭДО", ОбменСКонтрагентамиСлужебныйКлиент, Контекст);
	Представление.Вставить("Значение",      ОписаниеПредставленияЗаявления);
	
	ОписаниеДанных.Вставить("Представление",       Представление);
	
	ЭлектроннаяПодписьКлиент.Зашифровать(ОписаниеДанных, , ОписаниеПодписатьЭД);
	
КонецПроцедуры

Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДОЗавершение(Контекст)
	
	ДанныеПакета = Новый Структура;
	ДанныеПакета.Вставить("РеквизитыПакета");
	ДанныеПакета.Вставить("ЗашифрованныеДанныеОператораЭДО");
	ДанныеПакета.Вставить("ПодписанныеДвоичныеДанныеДляОператораЭДО");
	ДанныеПакета.Вставить("ДвоичныеДанныеСоглашенияНаПодключениеЭДО");
	ДанныеПакета.Вставить("ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО");
	ДанныеПакета.Вставить("УникальныйИдентификаторЗаявки1СЭДО",Контекст.РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	
	Если Контекст.Свойство("КонтекстОперации") Тогда
		ДанныеПакета.Вставить("КонтекстОперации", Контекст.КонтекстОперации);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеПакета, Контекст);
	
	ФормаВладелец = Неопределено;
	Если ТипЗнч(Контекст.Оповещение.Модуль) = Тип("ФормаКлиентскогоПриложения") Тогда
		ФормаВладелец = Контекст.Оповещение.Модуль;
	КонецЕсли;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ОтправитьРегистрационныйПакет1СЭДОЗавершение", ЭтотОбъект, Контекст);
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.НачатьОтправкуЗаявлениеНаРегистрациюВСервис1СЭДО(ДанныеПакета);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ОписаниеОповещенияЗавершение,
		ПараметрыОжидания);
		
КонецПроцедуры

Процедура ОтправитьРегистрационныйПакет1СЭДОЗавершение(Результат, Контекст) Экспорт
	
	СтруктураВозврата = НовыйРезультатОперацииВСервисе1СЭДО();
	
	ЕстьОшибки = Истина;
	Если Результат = Неопределено
		Или Результат.Статус <> "Выполнено" Тогда
		
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, СтруктураВозврата);
		Контекст.Очистить();
		Возврат;
		
	КонецЕсли;
	
	Ответ = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Ответ.Свойство("КонтекстОперации") Тогда
		СтруктураВозврата.КонтекстОперации = Ответ.КонтекстОперации;
		Контекст.Вставить("КонтекстОперации", Ответ.КонтекстОперации);
	КонецЕсли;
	
	Если Не Ответ.ИнтернетПоддержкаПользователейПодключена
		И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			Новый ОписаниеОповещения("СформироватьИОтправитьРегистрационныйПакет1СЭДОАутентификация", ЭтотОбъект, Контекст),
			ЭтотОбъект);
		
		Возврат;
		
	КонецЕсли;
	
	Если Ответ.ЕстьОшибки Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, СтруктураВозврата);
		Контекст.Очистить();
		Возврат;
	КонецЕсли;
	
	ЗавершениеОтправки = Неопределено;
	
	СтруктураВозврата.Результат = Истина;
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, СтруктураВозврата);
	
	
КонецПроцедуры

#КонецОбласти

Процедура ОткрытьФормуУсловийИспользованияСервиса(ПараметрыФормы, Контекст)
	
	Оповещение = Новый ОписаниеОповещения("ПродолжитьОтправкуПолучениеЭлектронныхДокументовПослеПринятияУсловийСервиса"
		, ЭтотОбъект, Контекст);
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.УсловияИспользования", ПараметрыФормы,,,,,Оповещение);
	
КонецПроцедуры

#Область РаботаСПриглашениями

Процедура ИнициализироватьКонтекстПолученияСоглашенияНаРоуминг(ОповещениеОЗавершении, Контекст)
	
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПолучитьСоглашениеНаРоуминг(Контекст.ИдентификаторЭДО, Контекст);
	
КонецПроцедуры

Процедура ПодготовитьШаблонСоглашенияНаРоуминг(ИдентификаторЭДО, Контекст);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьСоглашениеНаРоуминг", ЭтотОбъект, Контекст);
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗапуститьПодготовкуШаблонаСоглашенияНаРоуминг(ИдентификаторЭДО);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПолучитьФайлШаблонаСоглашенияНаРоуминг(ДлительнаяОперация, Контекст)
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВидОперации = НСтр("ru = 'Получение шаблона соглашения на роуминг.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации,
			ДлительнаяОперация.ПодробноеПредставлениеОшибки, ДлительнаяОперация.КраткоеПредставлениеОшибки);
		
		ПолучитьСоглашениеНаРоуминг(Ложь, Контекст);
		Возврат;
	ИначеЕсли ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ПолучитьСоглашениеНаРоуминг(Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	ПолучитьФайл(ДлительнаяОперация.АдресРезультата, НСтр("ru = 'Письмо о выборе оператора ЭДО.docx'"));
	
	ПолучитьСоглашениеНаРоуминг(Истина, Контекст);
	
КонецПроцедуры

Процедура ПодготовитьРезультатПолученияСоглашенияНаРоуминг(Результат, Контекст)
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ИнициализироватьКонтекстПрикрепленияСоглашенияНаРоуминг(ОповещениеОЗавершении, Контекст)
	
	Контекст.Вставить("ИмяФайлаСоглашенияНаРоуминг");
	Контекст.Вставить("ОписаниеОшибки");
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Расширение = ОбменСКонтрагентамиСлужебныйВызовСервера.ДоступныеРасширенияСканаЗаявленияНаРоуминг(
		Контекст.ИдентификаторОрганизации);
	
	Контекст.Вставить("Расширение", Расширение);
	
	ПрикрепитьСоглашениеНаРоуминг(Неопределено, Контекст);
	
КонецПроцедуры

Процедура ВыбратьФайлСоглашенияНаРоуминг(Контекст)

#Если ВебКлиент Тогда
	Оповещение = Новый ОписаниеОповещения("ВыбратьФайлСоглашенияНаРоумингБезДиалогаВыбора", ЭтотОбъект, Контекст);
	НачатьПомещениеФайла(Оповещение,,,,Новый УникальныйИдентификатор);
#Иначе
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок          = НСтр("ru = 'Выберите файл для загрузки'"); 
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Если ЗначениеЗаполнено(Контекст.Расширение) Тогда
		МассивРасширений = СтрРазделить(СтрЗаменить(Контекст.Расширение," ",""),",",Ложь);
		Маска = СтрСоединить(МассивРасширений, ";*.");
		ДиалогВыбораФайла.Фильтр = СтрШаблон(НСтр("ru = 'файл %1|*.%2'"), Контекст.Расширение, Маска);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьФайлСоглашенияНаРоумингЧерезДиалогВыбора", ЭтотОбъект, Контекст);
	НачатьПомещениеФайлов(Оповещение,,ДиалогВыбораФайла,,Новый УникальныйИдентификатор);
#КонецЕсли

КонецПроцедуры

Процедура ВыбратьФайлСоглашенияНаРоумингБезДиалогаВыбора(Результат, Адрес, ВыбранноеИмяФайла, Контекст) Экспорт
	
	Если Не Результат Тогда
		ПрикрепитьСоглашениеНаРоуминг(Неопределено, Контекст);
		Возврат;
	КонецЕсли;
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ВыбранноеИмяФайла);
	Если ЗначениеЗаполнено(Контекст.Расширение)
		И СтрНайти(Контекст.Расширение, РасширениеФайла) = 0 Тогда
		Контекст.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка загрузки данных. Неверный формат файла. Ожидается %1.'"),
			Контекст.Расширение);
		ПрикрепитьСоглашениеНаРоуминг(Неопределено, Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.ИмяФайлаСоглашенияНаРоуминг = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранноеИмяФайла).Имя;
	ПрикрепитьСоглашениеНаРоуминг(Адрес, Контекст);
	
КонецПроцедуры

Процедура ВыбратьФайлСоглашенияНаРоумингЧерезДиалогВыбора(ПомещенныеФайлы, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ПомещенныеФайлы) Тогда
		ПрикрепитьСоглашениеНаРоуминг(Неопределено, Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.ИмяФайлаСоглашенияНаРоуминг = ПомещенныеФайлы[0].Имя;
	ПрикрепитьСоглашениеНаРоуминг(ПомещенныеФайлы[0].Хранение, Контекст);
	
КонецПроцедуры

Процедура ЗаписатьДанныеФайлаСоглашенияНаРоуминг(Адрес, Контекст)
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		ПрикрепитьСоглашениеНаРоуминг(Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗаписатьДанныеСоглашенияНаРоуминг(
		Контекст.ИдентификаторОрганизации, Адрес, Контекст.ИмяФайлаСоглашенияНаРоуминг);
	
	Если Результат.Статус Тогда
		ПрикрепитьСоглашениеНаРоуминг(Истина, Контекст);
	Иначе
		Контекст.ОписаниеОшибки = Результат.ОписаниеОшибки;
		ПрикрепитьСоглашениеНаРоуминг(Ложь, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьРезультатПрикрепленияСоглашениеНаРоуминг(Статус, Контекст)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", Статус);
	Результат.Вставить("ИмяФайла", Контекст.ИмяФайлаСоглашенияНаРоуминг);
	Результат.Вставить("ОписаниеОшибки", Контекст.ОписаниеОшибки);
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОперациямиЭДО

#Область Выполнение

Функция НовыйПроцессВыполненияОперацииЭДО(Знач ОперацияЭДО, Знач ОбработкаЗавершения, Знач ОбработкаПрогрессаВыполнения)
	
	ПроцессВыполнения = Новый Структура;
	ПроцессВыполнения.Вставить("ТекущийЭтап");
	ПроцессВыполнения.Вставить("ОперацияЭДО"                 , ОперацияЭДО);
	ПроцессВыполнения.Вставить("ОбработкаЗавершения"         , ОбработкаЗавершения);
	ПроцессВыполнения.Вставить("ОбработкаПрогрессаВыполнения", ОбработкаПрогрессаВыполнения);
	ПроцессВыполнения.Вставить("РезультатПроверки");
	ПроцессВыполнения.Вставить("ЗапросПродолжения");
	ПроцессВыполнения.Вставить("РезультатВыполнения");
	
	Возврат ПроцессВыполнения;
	
КонецФункции

Процедура ВыполнитьОперациюЭДО(Знач РезультатТекущегоЭтапа, Знач ПроцессВыполнения) Экспорт
	
	Если ЗначениеЗаполнено(ПроцессВыполнения.ТекущийЭтап) Тогда
		ПроцессВыполнения.Вставить(ПроцессВыполнения.ТекущийЭтап, РезультатТекущегоЭтапа);
	КонецЕсли;
	
	// Определение выполняемой операции.
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	Если Не ЗначениеЗаполнено(ОперацияЭДО) Тогда
		ЗавершитьВыполнениеОперацииЭДО(ПроцессВыполнения);
		Возврат;
	КонецЕсли;
	
	// Проверка параметров операции.
	РезультатПроверки = ПроцессВыполнения.РезультатПроверки;
	Если РезультатПроверки = Неопределено Тогда
		РезультатПроверки = РезультатПроверкиОперацииЭДО(ОперацияЭДО);
		ПроцессВыполнения.РезультатПроверки = РезультатПроверки;
	КонецЕсли;
	
	// Запрос подтверждения выполнения.
	ЗапросПродолжения = ПроцессВыполнения.ЗапросПродолжения;
	Если ЗапросПродолжения = Неопределено Тогда
		ПроцессВыполнения.ТекущийЭтап = "ЗапросПродолжения";
		ЭтотМетод = Новый ОписаниеОповещения("ВыполнитьОперациюЭДО", ЭтотОбъект, ПроцессВыполнения);
		ПоказатьЗапросПродолженияОперацииЭДО(ОперацияЭДО, РезультатПроверки, ЭтотМетод);
		Возврат;
	ИначеЕсли ТипЗнч(ЗапросПродолжения) = Тип("Структура") Тогда
		Если ЗапросПродолжения.Действие = "Повторить" Тогда
			НачатьВыполнениеОперацииЭДО(ЗапросПродолжения.ОперацияЭДО, ПроцессВыполнения.ОбработкаЗавершения);
			Возврат;
		ИначеЕсли ЗапросПродолжения.Действие = "Прервать" Тогда
			ЗавершитьВыполнениеОперацииЭДО(ПроцессВыполнения);
			Возврат;
		КонецЕсли;
	Иначе
		ЗавершитьВыполнениеОперацииЭДО(ПроцессВыполнения);
		Возврат;
	КонецЕсли;
	
	// Запуск выполнения операции.
	РезультатВыполнения = ПроцессВыполнения.РезультатВыполнения;
	Если РезультатВыполнения = Неопределено Тогда
		ПроцессВыполнения.ТекущийЭтап = "РезультатВыполнения";
		ЭтотМетод = Новый ОписаниеОповещения("ВыполнитьОперациюЭДО", ЭтотОбъект, ПроцессВыполнения);
		ЗапуститьВыполнениеОперацииЭДО(ОперацияЭДО, ЭтотМетод, ПроцессВыполнения.ОбработкаПрогрессаВыполнения);
		Возврат;
	КонецЕсли;
	
	ЗавершитьВыполнениеОперацииЭДО(ПроцессВыполнения);
	
КонецПроцедуры

Процедура ЗавершитьВыполнениеОперацииЭДО(Знач ПроцессВыполнения)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОперацияЭДО", ПроцессВыполнения.ОперацияЭДО);
	
	РезультатВыполнения = ПроцессВыполнения.РезультатВыполнения;
	Если РезультатВыполнения <> Неопределено Тогда
		Результат.Выполнено = РезультатВыполнения.Выполнено;
		Результат.ОперацияЭДО = РезультатВыполнения.ОперацияЭДО;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПроцессВыполнения.ОбработкаЗавершения, Результат);
	
КонецПроцедуры

Процедура ЗапуститьВыполнениеОперацииЭДО(Знач ОперацияЭДО, Знач ОбработкаПродолжения, Знач ОбработкаПрогрессаВыполнения)
	
	ОперацияПодключенияЭДО = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяОперацияПодключенияЭДО();
	ОперацияОбновленияСертификата = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяОперацияОбновленияСертификата();
	
	Если ОперацияЭДО.Действие = ОперацияПодключенияЭДО.Действие Тогда
		
		НачатьПодключениеЭДО(ОперацияЭДО, ОбработкаПродолжения, ОбработкаПрогрессаВыполнения);
		
	ИначеЕсли ОперацияЭДО.Действие = ОперацияОбновленияСертификата.Действие Тогда
		
		НачатьОбновлениеСертификата(ОперацияЭДО, ОбработкаПродолжения);
		
	Иначе
		
		Результат = Новый Структура("Выполнено,ОперацияЭДО", Ложь, ОперацияЭДО);
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Проверка

Функция РезультатПроверкиОперацииЭДО(Знач ОперацияЭДО)
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Новый Массив);
	
	ОперацияПодключенияЭДО = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяОперацияПодключенияЭДО();
	ОперацияОбновленияСертификата = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяОперацияОбновленияСертификата();
	
	Если ОперацияЭДО.Действие = ОперацияПодключенияЭДО.Действие Тогда
		
		Результат = РезультатПроверкиОперацииПодключенияЭДО(ОперацияЭДО);
		
	ИначеЕсли ОперацияЭДО.Действие = ОперацияОбновленияСертификата.Действие Тогда
		
		Результат = РезультатПроверкиОперацииОбновленияСертификата(ОперацияЭДО);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПроверкиОперацииПодключенияЭДО(Знач ОперацияЭДО)
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Новый Массив);
	
	Параметры = ОперацияЭДО.Параметры;
	
	ВключеноРазделениеДанных = Неопределено;
	ОперацияЭДО.СлужебныеПараметры.Свойство("ВключеноРазделениеДанных", ВключеноРазделениеДанных);
		
	Если ВключеноРазделениеДанных <> Истина Тогда
		Если Не ЗначениеЗаполнено(Параметры.Организация) Тогда
			Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнена организация.'"));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Параметры.АдресОрганизации) Тогда
			Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен адрес организации.'"));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Параметры.КодНалоговогоОргана) Тогда
			Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен код налогового органа.'"));
		КонецЕсли;
		Если Параметры.УведомлятьОСобытиях И Не ЗначениеЗаполнено(Параметры.ЭлектроннаяПочтаДляУведомлений) Тогда
			Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнена электронная почта для уведомлений.'"));
		КонецЕсли;
	КонецЕсли;

	Если Не Параметры.ПринятыУсловияИспользования Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не приняты условия использования.'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.Сертификат) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен сертификат криптографии.'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.ОператорЭДО) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен оператор ЭДО.'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.СпособОбменаЭД) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен способ обмена.'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПроверкиОперацииОбновленияСертификата(Знач ОперацияЭДО)
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Новый Массив);
	
	Параметры = ОперацияЭДО.Параметры;
	
	Если Не ЗначениеЗаполнено(Параметры.Организация) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнена организация.'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.Сертификат) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен обновляемый сертификат криптографии.'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.НовыйСертификат) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен новый сертификат криптографии.'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПоказатьЗапросПродолженияОперацииЭДО(Знач ОперацияЭДО, Знач РезультатПроверки, Знач ОбработкаПродолжения)
	
	// Если ошибок при проверке не было, то продолжаем безусловно.
	Если Не ЗначениеЗаполнено(РезультатПроверки.Ошибки) Тогда
		Результат = Новый Структура("Действие, ОперацияЭДО", "Продолжить", Неопределено);
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);
		Возврат;
	КонецЕсли;
	
	ОперацияПодключенияЭДО = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяОперацияПодключенияЭДО();
	ОперацияОбновленияСертификата = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяОперацияОбновленияСертификата();
	
	Если ОперацияЭДО.Действие = ОперацияПодключенияЭДО.Действие Тогда
		
		Если ОперацияЭДО.СлужебныеПараметры.Свойство("ПоказатьЗапросПродолжения")
			И НЕ ОперацияЭДО.СлужебныеПараметры.ПоказатьЗапросПродолжения Тогда
			
			Для Каждого ЭлементКоллекции Из РезультатПроверки.Ошибки Цикл
				Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(НСтр("ru='Проверка заполнения данных при регистрации ЭДО.'"),
					"НеизвестнаяОшибка", ЭлементКоллекции, ЭлементКоллекции);
				ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ДобавитьОшибку(ОперацияЭДО.СлужебныеПараметры.КонтекстОперации, Ошибка);
			КонецЦикла;
			
			Результат = Новый Структура("Действие, ОперацияЭДО", "Прервать", Неопределено);
			ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);

		Иначе
			ПоказатьЗапросПродолженияПодключенияЭДО(ОперацияЭДО, РезультатПроверки, ОбработкаПродолжения);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ОперацияЭДО.Действие = ОперацияОбновленияСертификата.Действие Тогда
		
		ПоказатьЗапросПродолженияОбновленияСертификата(ОперацияЭДО, РезультатПроверки, ОбработкаПродолжения);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьЗапросПродолженияОбновленияСертификата(Знач ОперацияЭДО, Знач РезультатПроверки, Знач ОбработкаПродолжения)
	
	Текст = НСтр("ru = 'Выполнение операции невозможно по причине:'") + Символы.ПС
		+ СтрСоединить(РезультатПроверки.Ошибки, Символы.ПС);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ОбработатьЗапросПродолженияОбновленияСертификата", ЭтотОбъект, ОбработкаПродолжения);
	
	ПоказатьПредупреждение(ОбработкаЗавершения, Текст);
	
КонецПроцедуры

Процедура ОбработатьЗапросПродолженияОбновленияСертификата(ОбработкаПродолжения) Экспорт
	
	Результат = Новый Структура("Действие,ОперацияЭДО", "Прервать", Неопределено);
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);
	
КонецПроцедуры

Процедура ПоказатьЗапросПродолженияПодключенияЭДО(Знач ОперацияЭДО, Знач РезультатПроверки, Знач ОбработкаПродолжения)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОперацияЭДО", ОперацияЭДО);
	Контекст.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработкаВопросаОбУточненииНастроекПодключенияЭДО", ЭтотОбъект, Контекст);
	
	Текст = НСтр("ru = 'Выполнение операции невозможно по причине:'") + Символы.ПС
		+ СтрСоединить(РезультатПроверки.Ошибки, Символы.ПС);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Уточнить настройки'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Закрыть'"));
	
	ПоказатьВопрос(ОбработкаОтвета, Текст, Кнопки,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

Процедура ОбработкаВопросаОбУточненииНастроекПодключенияЭДО(Знач Ответ, Знач Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Результат = Новый Структура("Действие,ОперацияЭДО", "Прервать", Неопределено);
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, Результат);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗакрытия = Новый ОписаниеОповещения("ЗакрытиеФормыУточненияНастроекПодключенияЭДО", ЭтотОбъект, Контекст.ОбработкаПродолжения);
	
	ОткрытьФормуНастройкиОперацииЭДО(Контекст.ОперацияЭДО, ОбработкаЗакрытия);
	
КонецПроцедуры

Процедура ЗакрытиеФормыУточненияНастроекПодключенияЭДО(Знач ОперацияЭДО, Знач ОбработкаПродолжения) Экспорт
	
	Результат = Новый Структура("Действие,ОперацияЭДО", "Прервать", Неопределено);
	
	Если ЗначениеЗаполнено(ОперацияЭДО) Тогда
		Результат = Новый Структура("Действие,ОперацияЭДО", "Повторить", ОперацияЭДО);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеЭДО

Процедура НачатьПодключениеЭДО(Знач ОперацияЭДО, Знач ОбработкаПродолжения, Знач ОбработкаПрогрессаВыполнения)
	
	СпособОбменаЭД = ОперацияЭДО.Параметры.СпособОбменаЭД;
	
	Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		
		НачатьПодключениеЭДО_1СЭДО(ОперацияЭДО, ОбработкаПродолжения, ОбработкаПрогрессаВыполнения);
		
	ИначеЕсли СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		
		НачатьПодключениеЭДО_Такском(ОперацияЭДО, ОбработкаПродолжения, ОбработкаПрогрессаВыполнения);
		
	Иначе
		
		Результат = Новый Структура("Выполнено,ОперацияЭДО", Ложь, ОперацияЭДО);
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Создание учетной записи в информационной базе.

Функция НовыеПараметрыСозданияУчетнойЗаписиЭДО()
	
	Параметры = ОбменСКонтрагентамиСлужебныйКлиентСервер.НовыйДанныеЗаполненияУчетнойЗаписиЭДО();
	
	Параметры.Вставить("Сертификат");
	
	Возврат Параметры;
	
КонецФункции

Функция СоздатьУчетнуюЗаписьЭДО(Знач Параметры)
	
	Возврат ОбменСКонтрагентамиСлужебныйВызовСервера.СоздатьУчетнуюЗаписьЭДО(Параметры);
	
КонецФункции

// Обновление данных абонента в сервисе настроек.

Процедура НачатьОбновлениеДанныхАбонентаВСервисеЭДО(Знач Параметры, Знач ОбработкаПродолжения)
	
	Параметры.Вставить("УникальныйИдентификатор" , Новый УникальныйИдентификатор);
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.НачатьОтправкуДанныхАбонентаВСервисНастроек(Параметры);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьОбновлениеДанныхАбонентаВСервисеЭДО", ЭтотОбъект, ОбработкаПродолжения);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ЗакончитьОбновлениеДанныхАбонентаВСервисеЭДО(Знач Результат, Знач ОбработкаПродолжения) Экспорт
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("Выполнено", Ложь);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Статус = "Выполнено" Тогда
			РезультатОбновления.Выполнено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, РезультатОбновления);
	
КонецПроцедуры

// Работа с регистрационным пакетом 1С-ЭДО.

Процедура НачатьПодписаниеРегистрационногоПакета1СЭДО(Знач ДанныеПакета, Знач ОбработкаПродолжения)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеПакета", ДанныеПакета);
	
	Форма = ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.ПодписаниеРегистрационногоПакета1СЭДО",
		ПараметрыФормы,,,,, ОбработкаПродолжения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Если Форма = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#Область ПодключениеЭДО_Интерактивно

Процедура НачатьИнтерактивноеПодключениеЭДО(Знач ОперацияЭДО, Знач ОбработкаПродолжения)
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьИнтерактивноеПодключениеЭДО", ЭтотОбъект, ОбработкаПродолжения);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ОперацияЭДО.Параметры.Организация);
	ПараметрыФормы.Вставить("ОперацияЭДО", ОперацияЭДО);
	
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.ПомощникПодключенияЭДО",
		ПараметрыФормы,,,,, ОбработкаЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ЗакончитьИнтерактивноеПодключениеЭДО(Знач ОперацияЭДО, Знач ОбработкаПродолжения) Экспорт
	
	ОперацияВыполнена = (ОперацияЭДО = Неопределено);
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", ОперацияВыполнена);
	Результат.Вставить("ОперацияЭДО", ОперацияЭДО);
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеЭДО_1СЭДО

Процедура НачатьПодключениеЭДО_1СЭДО(Знач ОперацияЭДО, Знач ОбработкаПродолжения, Знач ОбработкаПрогрессаВыполнения)
	
	ПроцессВыполнения = НовыйПроцессВыполненияПодключениеЭДО_1СЭДО(ОперацияЭДО, ОбработкаПродолжения, ОбработкаПрогрессаВыполнения);
	
	ВыполнитьПодключениеЭДО_1СЭДО(Неопределено, ПроцессВыполнения);
	
КонецПроцедуры

Функция НовыйПроцессВыполненияПодключениеЭДО_1СЭДО(Знач ОперацияЭДО, Знач ОбработкаЗавершения, Знач ОбработкаПрогрессаВыполнения)
	
	ПроцессВыполнения = Новый Структура;
	ПроцессВыполнения.Вставить("ТекущийЭтап");
	ПроцессВыполнения.Вставить("ОперацияЭДО", ОперацияЭДО);
	ПроцессВыполнения.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	ПроцессВыполнения.Вставить("ОбработкаПрогрессаВыполнения", ОбработкаПрогрессаВыполнения);
	ПроцессВыполнения.Вставить("ОтправкаЗаявки");
	ПроцессВыполнения.Вставить("ОжиданиеПодключения");
	ПроцессВыполнения.Вставить("ПроверкаСвязи");
	ПроцессВыполнения.Вставить("СозданиеУчетнойЗаписи");
	ПроцессВыполнения.Вставить("ОбновлениеПараметровУведомлений");
	ПроцессВыполнения.Вставить("ОбновлениеДанныхАбонента");
	ПроцессВыполнения.Вставить("Ошибка");
	
	Возврат ПроцессВыполнения;
	
КонецФункции

Процедура ОтобразитьПроцессВыполненияПодключенияЭДО_1СЭДО(ПроцессВыполнения, Знач Показать = Истина)
	
	ФормаПроцесса = Неопределено;
	ПроцессВыполнения.Свойство("ФормаПроцесса", ФормаПроцесса);
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	Если ЗначениеЗаполнено(ОперацияЭДО)
		И ОперацияЭДО.Свойство("СлужебныеПараметры")
		И ОперацияЭДО.СлужебныеПараметры.Свойство("ОткрыватьФормуДлительнойОперации")
		И НЕ ОперацияЭДО.СлужебныеПараметры.ОткрыватьФормуДлительнойОперации Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаПроцесса = Неопределено Тогда
		Если Показать Тогда
			ФормаПроцесса = ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ДлительнаяОперация");
			ПроцессВыполнения.Вставить("ФормаПроцесса", ФормаПроцесса);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ФормаОткрыта = ФормаПроцесса.Открыта();
		Если Показать И Не ФормаОткрыта Тогда
			ОткрытьФорму(ФормаПроцесса);
		ИначеЕсли Не Показать И ФормаОткрыта Тогда
			ФормаПроцесса.Закрыть();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ФормаПроцесса.Заголовок = НСтр("ru = 'Подключение ЭДО'");
	
	ТекстСообщения = НСтр("ru = 'Пожалуйста, подождите.'");
	Если ПроцессВыполнения.ОтправкаЗаявки = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отправка заявки.'");
	ИначеЕсли ПроцессВыполнения.ОжиданиеПодключения = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ожидание обработки заявки.'");
	ИначеЕсли ПроцессВыполнения.ПроверкаСвязи = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Проверка связи с оператором ЭДО.'");
	ИначеЕсли ПроцессВыполнения.СозданиеУчетнойЗаписи = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Создание учетной записи ЭДО.'");
	ИначеЕсли ПроцессВыполнения.ОбновлениеПараметровУведомлений = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Обновление настроек уведомления.'");
	ИначеЕсли ПроцессВыполнения.ОбновлениеДанныхАбонента = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Обновление данных об абоненте.'");
	КонецЕсли;
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОперацияВыполнена = ЗначениеЗаполнено(ОперацияЭДО.Результат.УчетнаяЗапись)
		И ОперацияЭДО.Результат.ОбновленыПараметрыУведомлений
		И ОперацияЭДО.Результат.ОбновленыДанныеАбонента;
	
	Если ОперацияВыполнена Тогда
		ТекстСообщения = НСтр("ru = 'Подключение ЭДО завершено.'");
		ФормаПроцесса.Элементы.ФормаОтмена.Заголовок = НСтр("ru = 'Закрыть'");
	КонецЕсли;
	
	ФормаПроцесса.Элементы.ФормаОтмена.Видимость = ОперацияВыполнена;
	ФормаПроцесса.Элементы.КартинкаУспешно.Видимость = ОперацияВыполнена;
	ФормаПроцесса.Элементы.ДекорацияДлительнаяОперация.Видимость = Не ОперацияВыполнена;
	
	ФормаПроцесса.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = ТекстСообщения;
	
КонецПроцедуры

Процедура ВыполнитьПодключениеЭДО_1СЭДО(Знач РезультатТекущегоЭтапа, Знач ПроцессВыполнения) Экспорт
	
	Если ЗначениеЗаполнено(ПроцессВыполнения.ТекущийЭтап) Тогда

		ПроцессВыполнения.Вставить(ПроцессВыполнения.ТекущийЭтап, РезультатТекущегоЭтапа);
		
		Если РезультатТекущегоЭтапа <> Неопределено
			И НЕ РезультатТекущегоЭтапа.Выполнено
			И РезультатТекущегоЭтапа.Свойство("КонтекстОперации")
			И ПроцессВыполнения.ОперацияЭДО.Свойство("СлужебныеПараметры")
			И ПроцессВыполнения.ОперацияЭДО.СлужебныеПараметры.Свойство("КонтекстОперации") Тогда
			ПроцессВыполнения.ОперацияЭДО.СлужебныеПараметры.КонтекстОперации = РезультатТекущегоЭтапа.КонтекстОперации;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтобразитьПроцессВыполненияПодключенияЭДО_1СЭДО(ПроцессВыполнения);
	
	Выполнено = ВыполнитьПодключениеЭДО_1СЭДО_ОтправкаЗаявкиНаПодключение(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;

	Отменено = ПроверитьПрогрессВыполненияПодключения(ПроцессВыполнения.ОбработкаПрогрессаВыполнения);
	Если Отменено Тогда
		ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
		Возврат;
	КонецЕсли;
	
	Выполнено = ВыполнитьПодключениеЭДО_1СЭДО_ОжиданиеОбработкиЗаявкиНаПодключение(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнено = ВыполнитьПодключениеЭДО_1СЭДО_ПроверкаСвязи(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнено = ВыполнитьПодключениеЭДО_1СЭДО_СозданиеУчетнойЗаписи(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьПроцессВыполненияПодключенияЭДО_1СЭДО(ПроцессВыполнения);
	
	Выполнено = ВыполнитьПодключениеЭДО_1СЭДО_ОбновлениеПараметровУведомлений(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнено = ВыполнитьПодключениеЭДО_1СЭДО_ОбновлениеДанныхАбонента(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
	
КонецПроцедуры

Процедура ЗавершитьПодключениеЭДО_1СЭДО(Знач ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	Если Не ЗначениеЗаполнено(ОперацияЭДО.Результат.ИдентификаторЭДО) Тогда
		Если ЗначениеЗаполнено(ПроцессВыполнения.Ошибка) Тогда
			ОтобразитьПроцессВыполненияПодключенияЭДО_1СЭДО(ПроцессВыполнения, Ложь);
			
			ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
			Если НЕ (ЗначениеЗаполнено(ОперацияЭДО)
				И ОперацияЭДО.Свойство("СлужебныеПараметры")
				И ОперацияЭДО.СлужебныеПараметры.Свойство("ОткрыватьФормуДлительнойОперации")
				И НЕ ОперацияЭДО.СлужебныеПараметры.ОткрыватьФормуДлительнойОперации) Тогда
				
				НачатьИнтерактивноеПодключениеЭДО(ОперацияЭДО, ПроцессВыполнения.ОбработкаЗавершения);
				ТекстСообщения = НСтр("ru = 'При необходимости исправьте ошибки и нажмите кнопку ""Подключить""'") + Символы.ПС
					+ ПроцессВыполнения.Ошибка;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
				
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	ОперацияВыполнена = ЗначениеЗаполнено(ОперацияЭДО.Результат.УчетнаяЗапись)
		И ОперацияЭДО.Результат.ОбновленыПараметрыУведомлений
		И ОперацияЭДО.Результат.ОбновленыДанныеАбонента;
	
	ОтобразитьПроцессВыполненияПодключенияЭДО_1СЭДО(ПроцессВыполнения, ОперацияВыполнена);
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", ОперацияВыполнена);
	Результат.Вставить("ОперацияЭДО", ОперацияЭДО);
	
	ВыполнитьОбработкуОповещения(ПроцессВыполнения.ОбработкаЗавершения, Результат);
	
КонецПроцедуры

Функция ВыполнитьПодключениеЭДО_1СЭДО_ОтправкаЗаявкиНаПодключение(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОтправкаЗаявки = ПроцессВыполнения.ОтправкаЗаявки;
	НомерЗаявки = ОперацияЭДО.Результат.НомерЗаявки;
	Если ОтправкаЗаявки = Неопределено И Не ЗначениеЗаполнено(НомерЗаявки) Тогда
		ПроцессВыполнения.ТекущийЭтап = "ОтправкаЗаявки";
		ОбработкаПродолжения          = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_1СЭДО", ЭтотОбъект, ПроцессВыполнения);
		Параметры = ОперацияЭДО.Параметры;
		ПараметрыЗаявки = НовыеПараметрыЗаявкиНаПодключениеЭДО_1СЭДО();
		ПараметрыЗаявки.Организация                    = Параметры.Организация;
		ПараметрыЗаявки.ОператорЭДО                    = Параметры.ОператорЭДО;
		ПараметрыЗаявки.АдресОрганизации               = Параметры.АдресОрганизации;
		ПараметрыЗаявки.АдресОрганизацииЗначение       = Параметры.АдресОрганизацииЗначение;
		ПараметрыЗаявки.СертификатКриптографии         = Параметры.Сертификат;
		ПараметрыЗаявки.ЭлектроннаяПочта               = Параметры.ЭлектроннаяПочтаДляУведомлений;
		ПараметрыЗаявки.КодНалоговогоОргана            = Параметры.КодНалоговогоОргана;
		ПараметрыЗаявки.СертификатыПодписейОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Сертификат);
		НачатьОтправкуЗаявкиНаПодключениеЭДО_1СЭДО(ПараметрыЗаявки, ОбработкаПродолжения);
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ОтправкаЗаявки) = Тип("Структура") Тогда
		Если ОтправкаЗаявки.Выполнено Тогда
			НомерЗаявки = ОтправкаЗаявки.НомерЗаявки;
			ПроцессВыполнения.ОперацияЭДО.Результат.НомерЗаявки = НомерЗаявки;
			
			Если ПроцессВыполнения.ОбработкаПрогрессаВыполнения <> Неопределено Тогда
				ПараметрыОбработкиПрогрессаВыполнения = ПроцессВыполнения.ОбработкаПрогрессаВыполнения.ДополнительныеПараметры;
				Если ТипЗнч(ПараметрыОбработкиПрогрессаВыполнения) = Тип("Структура") Тогда
					Если ПараметрыОбработкиПрогрессаВыполнения.Свойство("ИдентификаторЗаявки") Тогда
						ПараметрыОбработкиПрогрессаВыполнения.ИдентификаторЗаявки = НомерЗаявки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НомерЗаявки) Тогда
		ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПодключениеЭДО_1СЭДО_ОжиданиеОбработкиЗаявкиНаПодключение(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОжиданиеПодключения = ПроцессВыполнения.ОжиданиеПодключения;
	ИдентификаторЭДО    = ОперацияЭДО.Результат.ИдентификаторЭДО;
	Если ОжиданиеПодключения = Неопределено И Не ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		
		НомерЗаявки = ОперацияЭДО.Результат.НомерЗаявки;
		
		ПроцессВыполнения.ТекущийЭтап = "ОжиданиеПодключения";
		ОбработкаПрогрессаВыполнения  = ПроцессВыполнения.ОбработкаПрогрессаВыполнения;
		
		Если ОбработкаПрогрессаВыполнения <> Неопределено Тогда
			ОбработкаПрогрессаВыполнения.ДополнительныеПараметры.ИдентификаторЗаявки = НомерЗаявки;
		КонецЕсли;
		
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_1СЭДО", ЭтотОбъект, ПроцессВыполнения);
		
		НачатьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО(НомерЗаявки, ОбработкаПродолжения, , ОбработкаПрогрессаВыполнения);
		
		Возврат Ложь;
		
	ИначеЕсли ТипЗнч(ОжиданиеПодключения) = Тип("Структура") Тогда
		
		Если ОжиданиеПодключения.Выполнено Тогда
			ИдентификаторЭДО = ОжиданиеПодключения.ИдентификаторЭДО;
			ПроцессВыполнения.ОперацияЭДО.Результат.ИдентификаторЭДО = ИдентификаторЭДО;
		ИначеЕсли ЗначениеЗаполнено(ОжиданиеПодключения.Ошибка) Тогда
			ПроцессВыполнения.Ошибка = ОжиданиеПодключения.Ошибка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПодключениеЭДО_1СЭДО_ПроверкаСвязи(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ПроверкаСвязи = ПроцессВыполнения.ПроверкаСвязи;
	СвязьПроверена = Ложь;
	Если ПроверкаСвязи = Неопределено Тогда
		ПроцессВыполнения.ТекущийЭтап = "ПроверкаСвязи";
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_1СЭДО", ЭтотОбъект, ПроцессВыполнения);
		ПараметрыПроверки = НовыеПараметрыПроверкиСвязиССервисомЭДО_1СЭДО();
		ПараметрыПроверки.Сертификат = ОперацияЭДО.Параметры.Сертификат;
		ПараметрыПроверки.СпособОбменаЭД = ОперацияЭДО.Параметры.СпособОбменаЭД;
		ПараметрыПроверки.ИдентификаторОрганизации = ОперацияЭДО.Результат.ИдентификаторЭДО;
		НачатьПроверкуСвязиССервисомЭДО_1СЭДО(ПараметрыПроверки, ОбработкаПродолжения);
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ПроверкаСвязи) = Тип("Структура") Тогда
		Если ПроверкаСвязи.Выполнено Тогда
			СвязьПроверена = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Не СвязьПроверена Тогда
		ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПодключениеЭДО_1СЭДО_СозданиеУчетнойЗаписи(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	СозданиеУчетнойЗаписи = ПроцессВыполнения.СозданиеУчетнойЗаписи;
	УчетнаяЗапись         = ОперацияЭДО.Результат.УчетнаяЗапись;
	
	Если СозданиеУчетнойЗаписи = Неопределено И Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		
		ПараметрыСоздания = НовыеПараметрыСозданияУчетнойЗаписиЭДО();
		ПараметрыСоздания.Организация                                   = ОперацияЭДО.Параметры.Организация;
		ПараметрыСоздания.АдресОрганизации                              = ОперацияЭДО.Параметры.АдресОрганизации;
		ПараметрыСоздания.КодНалоговогоОргана                           = ОперацияЭДО.Параметры.КодНалоговогоОргана;
		ПараметрыСоздания.СпособОбменаЭД                                = ОперацияЭДО.Параметры.СпособОбменаЭД;
		ПараметрыСоздания.ОператорЭДО                                   = ОперацияЭДО.Параметры.ОператорЭДО;
		ПараметрыСоздания.ИдентификаторЭДО                              = ОперацияЭДО.Результат.ИдентификаторЭДО;
		ПараметрыСоздания.НаименованиеУчетнойЗаписи                     = ОперацияЭДО.Параметры.НаименованиеУчетнойЗаписи;
		ПараметрыСоздания.НазначениеУчетнойЗаписи                       = ОперацияЭДО.Параметры.НазначениеУчетнойЗаписи;
		ПараметрыСоздания.ПодробноеОписаниеУчетнойЗаписи                = ОперацияЭДО.Параметры.ОписаниеУчетнойЗаписи;
		ПараметрыСоздания.Сертификат                                    = ОперацияЭДО.Параметры.Сертификат;
		ПараметрыСоздания.ЭлектроннаяПочтаДляУведомлений                = ОперацияЭДО.Параметры.ЭлектроннаяПочтаДляУведомлений;
		ПараметрыСоздания.УведомлятьОНовыхПриглашениях                  = ОперацияЭДО.Параметры.УведомлятьОНовыхПриглашениях;
		ПараметрыСоздания.УведомлятьОбОтветахНаПриглашения              = ОперацияЭДО.Параметры.УведомлятьОбОтветахНаПриглашения;
		ПараметрыСоздания.УведомлятьОНовыхДокументах                    = ОперацияЭДО.Параметры.УведомлятьОНовыхДокументах;
		ПараметрыСоздания.УведомлятьОНеОбработанныхДокументах           = ОперацияЭДО.Параметры.УведомлятьОНеОбработанныхДокументах;
		ПараметрыСоздания.УведомлятьОбОкончанииСрокаДействияСертификата = ОперацияЭДО.Параметры.УведомлятьОбОкончанииСрокаДействияСертификата;
		ПараметрыСоздания.ПринятыУсловияИспользования                   = ОперацияЭДО.Параметры.ПринятыУсловияИспользования;
		
		Если СоздатьУчетнуюЗаписьЭДО(ПараметрыСоздания) Тогда
			ПроцессВыполнения.СозданиеУчетнойЗаписи = "Создана";
			УчетнаяЗапись = ОперацияЭДО.Результат.ИдентификаторЭДО;
			ПроцессВыполнения.ОперацияЭДО.Результат.УчетнаяЗапись = УчетнаяЗапись;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПодключениеЭДО_1СЭДО_ОбновлениеПараметровУведомлений(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОбновлениеПараметровУведомлений = ПроцессВыполнения.ОбновлениеПараметровУведомлений;
	ОбновленыПараметрыУведомлений = ОперацияЭДО.Результат.ОбновленыПараметрыУведомлений;
	Если ОбновлениеПараметровУведомлений = Неопределено И Не ОбновленыПараметрыУведомлений Тогда
		ПроцессВыполнения.ТекущийЭтап = "ОбновлениеПараметровУведомлений";
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_1СЭДО", ЭтотОбъект, ПроцессВыполнения);
		ПараметрыУведомлений = НовыеПараметрыУведомлений();
		ПараметрыУведомлений.ИдентификаторЭДО = ОперацияЭДО.Результат.ИдентификаторЭДО;
		ПараметрыУведомлений.РасшифрованныйМаркер = ПроцессВыполнения.ПроверкаСвязи.РасшифрованныйМаркер;
		ПараметрыУведомлений.УникальныйИдентификатор = Неопределено;
		ПараметрыУведомлений.УведомлятьОСобытиях = ОперацияЭДО.Параметры.УведомлятьОСобытиях;
		ПараметрыУведомлений.УведомлятьОНовыхПриглашениях = ОперацияЭДО.Параметры.УведомлятьОНовыхПриглашениях;;
		ПараметрыУведомлений.УведомлятьОбОтветахНаПриглашения = ОперацияЭДО.Параметры.УведомлятьОбОтветахНаПриглашения;;
		ПараметрыУведомлений.УведомлятьОНовыхДокументах = ОперацияЭДО.Параметры.УведомлятьОНовыхДокументах;;
		ПараметрыУведомлений.УведомлятьОНеОбработанныхДокументах = ОперацияЭДО.Параметры.УведомлятьОНеОбработанныхДокументах;;
		ПараметрыУведомлений.УведомлятьОбОкончанииСрокаДействияСертификата = ОперацияЭДО.Параметры.УведомлятьОбОкончанииСрокаДействияСертификата;;
		ПараметрыУведомлений.АдресУведомлений = ОперацияЭДО.Параметры.ЭлектроннаяПочтаДляУведомлений;
		НачатьОбновлениеПараметровУведомленийВСервисеЭДО(ПараметрыУведомлений, ОбработкаПродолжения);
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ОбновлениеПараметровУведомлений) = Тип("Структура") Тогда
		Если ОбновлениеПараметровУведомлений.Выполнено Тогда
			ОбновленыПараметрыУведомлений = Истина;
			ПроцессВыполнения.ОперацияЭДО.Результат.ОбновленыПараметрыУведомлений = ОбновленыПараметрыУведомлений;
		КонецЕсли;
	КонецЕсли;
	Если Не ОбновленыПараметрыУведомлений Тогда
		ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПодключениеЭДО_1СЭДО_ОбновлениеДанныхАбонента(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОбновлениеДанныхАбонента = ПроцессВыполнения.ОбновлениеДанныхАбонента;
	ОбновленыДанныеАбонента = ОперацияЭДО.Результат.ОбновленыДанныеАбонента;
	Если ОбновлениеДанныхАбонента = Неопределено И Не ОбновленыДанныеАбонента Тогда
		ПроцессВыполнения.ТекущийЭтап = "ОбновлениеДанныхАбонента";
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_1СЭДО", ЭтотОбъект, ПроцессВыполнения);
		ДанныеАбонента = Новый Структура;
		ДанныеАбонента.Вставить("ИдентификаторЭДО", ОперацияЭДО.Результат.ИдентификаторЭДО);
		НачатьОбновлениеДанныхАбонентаВСервисеЭДО(ДанныеАбонента, ОбработкаПродолжения);
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ОбновлениеДанныхАбонента) = Тип("Структура") Тогда
		Если ОбновлениеДанныхАбонента.Выполнено Тогда
			ОбновленыДанныеАбонента = Истина;
			ПроцессВыполнения.ОперацияЭДО.Результат.ОбновленыДанныеАбонента = ОбновленыДанныеАбонента;
		КонецЕсли;
	КонецЕсли;
	Если Не ОбновленыДанныеАбонента Тогда
		ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьПрогрессВыполненияПодключения(Знач ОбработкаПрогрессаВыполнения, Знач ОбработатьПрогрессВыполнения = Истина)
	
	Если ОбработкаПрогрессаВыполнения <> Неопределено Тогда
		
		Если ОбработатьПрогрессВыполнения Тогда
			ВыполнитьОбработкуОповещения(ОбработкаПрогрессаВыполнения);
		КонецЕсли;
		
		ОтмененаРегистрацияЭДО = Ложь;
		ОбработкаПрогрессаВыполнения.ДополнительныеПараметры.Свойство("ОтмененаРегистрацияЭДО", ОтмененаРегистрацияЭДО);
		Если ОтмененаРегистрацияЭДО = Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Отправка заявки.

Функция НовыеПараметрыЗаявкиНаПодключениеЭДО_1СЭДО()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация");
	Параметры.Вставить("ОператорЭДО");
	Параметры.Вставить("АдресОрганизации");
	Параметры.Вставить("АдресОрганизацииЗначение");
	Параметры.Вставить("СертификатКриптографии");
	Параметры.Вставить("ЭлектроннаяПочта");
	Параметры.Вставить("КодНалоговогоОргана");
	Параметры.Вставить("СертификатыПодписейОрганизации");
	
	Возврат Параметры;
	
КонецФункции

Процедура НачатьОтправкуЗаявкиНаПодключениеЭДО_1СЭДО(Знач Параметры, Знач ОбработкаПродолжения)
	
	ДанныеПакета = ОбменСКонтрагентамиСлужебныйВызовСервера.ДанныеДляРегистрационногоПакета1СЭДО(Параметры);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДанныеПакета", ДанныеПакета);
	Контекст.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("НачатьОтправкуЗаявкиНаПодключениеЭДО_1СЭДО_Подписание", ЭтотОбъект, Контекст);
	
	НачатьПодписаниеРегистрационногоПакета1СЭДО(ДанныеПакета, ОбработкаЗавершения);
	
КонецПроцедуры

Процедура НачатьОтправкуЗаявкиНаПодключениеЭДО_1СЭДО_Подписание(Знач ОписаниеДанных, Знач Контекст) Экспорт
	
	Если ОписаниеДанных = Неопределено Тогда
		ЗакончитьОтправкуЗаявкиНаПодключениеЭДО_1СЭДО(Неопределено, Контекст);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьОтправкуЗаявкиНаПодключениеЭДО_1СЭДО", ЭтотОбъект, Контекст);
	
	ДанныеПакета = Контекст.ДанныеПакета;
	
	КонтекстОтправки = Новый Структура;
	КонтекстОтправки.Вставить("ДвоичныеДанныеСоглашенияНаПодключениеЭДО", ДанныеПакета.ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	КонтекстОтправки.Вставить("РеквизитыПакета", ДанныеПакета.РеквизитыПакета);
	КонтекстОтправки.Вставить("ДвоичныеДанныеДляОператораЭДО", ДанныеПакета.ДвоичныеДанныеДляОператораЭДО);
	КонтекстОтправки.Вставить("ОператорЭДОСертификат", ДанныеПакета.ОператорЭДОСертификат);
	КонтекстОтправки.Вставить("УникальныйИдентификаторЗаявки1СЭДО", ДанныеПакета.РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	КонтекстОтправки.Вставить("Оповещение", ОбработкаЗавершения);
	КонтекстОтправки.Вставить("Форма", Неопределено);
	
	СформироватьИОтправитьРегистрационныйПакет1СЭДОПослеПодписания(ОписаниеДанных, КонтекстОтправки);
	
КонецПроцедуры

Процедура ЗакончитьОтправкуЗаявкиНаПодключениеЭДО_1СЭДО(Знач Результат, Знач Контекст) Экспорт
	
	РезультатОтправкиЗаявки = Новый Структура;
	РезультатОтправкиЗаявки.Вставить("Выполнено"        , Ложь);
	РезультатОтправкиЗаявки.Вставить("НомерЗаявки"      , "");
	
	Если Результат <> Ложь И Результат <> Неопределено Тогда
		
		Если Результат.Свойство("КонтекстОперации") Тогда
			РезультатОтправкиЗаявки.Вставить("КонтекстОперации" , Результат.КонтекстОперации);
		КонецЕсли;
		
		Если Результат.Результат = Истина Тогда
			
			РезультатОтправкиЗаявки.Выполнено   = Истина;
			РезультатОтправкиЗаявки.НомерЗаявки = Контекст.ДанныеПакета.РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО;
			
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, РезультатОтправкиЗаявки);
	
КонецПроцедуры

// Ожидание обработки заявки.

Процедура НачатьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО(Знач НомерЗаявки, Знач ОбработкаПродолжения,
		Знач ПараметрыОжидания = Неопределено, Знач ОповещениеОПрогрессеВыполнения = Неопределено)
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("УникальныйИдентификаторЗаявки1СЭДО", НомерЗаявки);
	
	Операция = ОбменСКонтрагентамиСлужебныйВызовСервера.НачатьПолучениеСостоянияРегистрацииСертификатаВ1СЭДО(
		ПараметрыОперации, Новый УникальныйИдентификатор);
	
	Если Операция.Статус = "Выполнено" Тогда
		Операция.Статус = "Выполняется";
	КонецЕсли;
	
	Если ПараметрыОжидания = Неопределено Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьОкноОжидания           = Ложь;
		ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("НомерЗаявки"                   , НомерЗаявки);
	Контекст.Вставить("ОбработкаПродолжения"          , ОбработкаПродолжения);
	Контекст.Вставить("ПараметрыОжидания"             , ПараметрыОжидания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО", ЭтотОбъект, Контекст);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Операция, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ЗакончитьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО(Знач РезультатОперации, Знач Контекст) Экспорт
	
	РезультатОжидания = Новый Структура;
	РезультатОжидания.Вставить("Выполнено"        , Ложь);
	РезультатОжидания.Вставить("ИдентификаторЭДО" , "");
	РезультатОжидания.Вставить("Ошибка"           , "");
	РезультатОжидания.Вставить("КонтекстОперации" , Неопределено);
	
	Результат        = Неопределено;
	ИдентификаторЭДО = Неопределено;
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		Если РезультатОперации.Статус = "Выполнено" Тогда
			РезультатПроцедуры = ПолучитьИзВременногоХранилища(РезультатОперации.АдресРезультата);
			ИдентификаторЭДО   = РезультатПроцедуры.ИдентификаторОрганизации;
			Результат          = РезультатПроцедуры.Результат;
		ИначеЕсли РезультатОперации.Статус = "Ошибка" Тогда
			РезультатОжидания.Ошибка = Результат.КраткоеПредставлениеОшибки;
			ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, РезультатОжидания);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаПрогрессаВыполнения = Контекст.ОбработкаПродолжения.ДополнительныеПараметры.ОбработкаПрогрессаВыполнения;
	Отменено = ПроверитьПрогрессВыполненияПодключения(ОбработкаПрогрессаВыполнения, Ложь);
	Если Отменено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, РезультатОжидания);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		РезультатОжидания.Выполнено        = Результат;
		РезультатОжидания.ИдентификаторЭДО = ИдентификаторЭДО;
		РезультатОжидания.Ошибка           = РезультатПроцедуры.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, РезультатОжидания);
	ИначеЕсли Результат = Ложь Тогда
		РезультатОжидания.Ошибка           = РезультатПроцедуры.ОписаниеОшибки;
		РезультатОжидания.КонтекстОперации = РезультатПроцедуры.КонтекстОперации;
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, РезультатОжидания);
	Иначе
		Если Контекст.ПараметрыОжидания.Интервал = 0 Тогда
			Контекст.ПараметрыОжидания.Интервал = 1;
		Иначе
			Контекст.ПараметрыОжидания.Интервал = Мин(Контекст.ПараметрыОжидания.Интервал * 1.4, 15);
		КонецЕсли;
		НачатьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО(Контекст.НомерЗаявки, Контекст.ОбработкаПродолжения, Контекст.ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

// Проверка связи.

Функция НовыеПараметрыПроверкиСвязиССервисомЭДО_1СЭДО()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Сертификат");
	Параметры.Вставить("СпособОбменаЭД");
	Параметры.Вставить("ИдентификаторОрганизации");
	
	Возврат Параметры;
	
КонецФункции

Процедура НачатьПроверкуСвязиССервисомЭДО_1СЭДО(Знач Параметры, Знач ОбработкаПродолжения)
	
	СтруктураПараметровЗапросаМаркера = Новый Структура;
	СтруктураПараметровЗапросаМаркера.Вставить("СертификатПодписи"       , Параметры.Сертификат);
	СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД"          , Параметры.СпособОбменаЭД);
	СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", Параметры.ИдентификаторОрганизации);
	
	ДополнительныеПараметрыЗапросаМаркера = НовыеПараметрыПолученияЗашифрованногоМаркера();
	ДополнительныеПараметрыЗапросаМаркера.ИнтернетПоддержкаПользователейПодключена = Истина;
	ДополнительныеПараметрыЗапросаМаркера.ПоказыватьОшибки = Истина;
	ДополнительныеПараметрыЗапросаМаркера.ПоказыватьОшибкуАутентификацииПриОтсутствииДанных = Ложь;
	
	ЗашифрованныеДанные = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(
		СтруктураПараметровЗапросаМаркера, ДополнительныеПараметрыЗапросаМаркера);
		
	Если Не ДополнительныеПараметрыЗапросаМаркера.ИнтернетПоддержкаПользователейПодключена
		И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
		
		ПараметрыПовторения = Новый Структура("Параметры,ОбработкаПродолжения", Параметры, ОбработкаПродолжения);
		ОбработкаПовторнойПроверки = Новый ОписаниеОповещения(
			"ПовторитьПроверкуСвязиССервисомЭДОПослеАутентификации_1СЭДО", ЭтотОбъект, ПараметрыПовторения);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОбработкаПовторнойПроверки);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьПроверкуСвязиССервисомЭДО_1СЭДО", ЭтотОбъект, ОбработкаПродолжения);
	
	Если Не ЗначениеЗаполнено(ЗашифрованныеДанные) Тогда
		
		ОперацияЭДО = ОбработкаПродолжения.ДополнительныеПараметры.ОперацияЭДО;
		Если ЗначениеЗаполнено(ОперацияЭДО)
			И ОперацияЭДО.Свойство("СлужебныеПараметры")
			И ОперацияЭДО.СлужебныеПараметры.Свойство("КонтекстОперации") Тогда
			ОперацияЭДО.СлужебныеПараметры.КонтекстОперации = ДополнительныеПараметрыЗапросаМаркера.КонтекстОперации;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения);
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ЗаголовокДанных", "");
	ОписаниеДанных.Вставить("Операция",        НСтр("ru = 'Тест аутентификации в сервисе ЭДО'"));
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(Параметры.Сертификат);
	
	ОписаниеДанных.Вставить("ОтборСертификатов",МассивСертификатов);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ИзменятьНабор", Ложь);
	ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
	ОписаниеДанных.Вставить("Данные", ЗашифрованныеДанные);
	ОписаниеДанных.Вставить("БезПодтверждения", Истина);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных,, ОбработкаЗавершения);
	
КонецПроцедуры

Процедура ЗакончитьПроверкуСвязиССервисомЭДО_1СЭДО(Знач Результат, Знач ОбработкаПродолжения) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Выполнено", Ложь);
	РезультатПроверки.Вставить("РасшифрованныйМаркер");
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Успех = Истина Тогда
			РезультатПроверки.Выполнено = Истина;
			РезультатПроверки.РасшифрованныйМаркер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
				Результат.РасшифрованныеДанные);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, РезультатПроверки);
	
КонецПроцедуры

Процедура ПовторитьПроверкуСвязиССервисомЭДОПослеАутентификации_1СЭДО(Знач Результат, Знач ПараметрыПовторения) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыПовторения.ОбработкаПродолжения);
	Иначе
		НачатьПроверкуСвязиССервисомЭДО_1СЭДО(ПараметрыПовторения.Параметры, ПараметрыПовторения.ОбработкаПродолжения);
	КонецЕсли;
	
КонецПроцедуры

// Обновление настроек уведомлений.

Функция НовыеПараметрыУведомлений()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИдентификаторЭДО");
	Параметры.Вставить("РасшифрованныйМаркер");
	Параметры.Вставить("УникальныйИдентификатор");
	Параметры.Вставить("УведомлятьОСобытиях");
	Параметры.Вставить("УведомлятьОНовыхПриглашениях");
	Параметры.Вставить("УведомлятьОбОтветахНаПриглашения");
	Параметры.Вставить("УведомлятьОНовыхДокументах");
	Параметры.Вставить("УведомлятьОНеОбработанныхДокументах");
	Параметры.Вставить("УведомлятьОбОкончанииСрокаДействияСертификата");
	Параметры.Вставить("АдресУведомлений");
	
	Возврат Параметры;
	
КонецФункции

Процедура НачатьОбновлениеПараметровУведомленийВСервисеЭДО(Знач Параметры, Знач ОбработкаПродолжения)
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьОбновлениеПараметровУведомленийВСервисеЭДО", ЭтотОбъект, ОбработкаПродолжения);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.НачатьОбновлениеПараметровУведомленийВСервисеЭДО(Параметры);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ЗакончитьОбновлениеПараметровУведомленийВСервисеЭДО(Знач Результат, Знач ОбработкаПродолжения) Экспорт
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("Выполнено", Ложь);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Статус = "Выполнено" Тогда
			РезультатОбновления.Выполнено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, РезультатОбновления);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеЭДО_Такском

Процедура НачатьПодключениеЭДО_Такском(Знач ОперацияЭДО, Знач ОбработкаПродолжения, Знач ОбработкаПрогрессаВыполнения)
	
	ПроцессВыполнения = НовыйПроцессВыполненияПодключениеЭДО_Такском(ОперацияЭДО, ОбработкаПродолжения, ОбработкаПрогрессаВыполнения);
	
	ВыполнитьПодключениеЭДО_Такском(Неопределено, ПроцессВыполнения);
	
КонецПроцедуры

Функция НовыйПроцессВыполненияПодключениеЭДО_Такском(Знач ОперацияЭДО, Знач ОбработкаЗавершения, Знач ОбработкаПрогрессаВыполнения)
	
	ПроцессВыполнения = Новый Структура;
	ПроцессВыполнения.Вставить("ТекущийЭтап");
	ПроцессВыполнения.Вставить("ОперацияЭДО", ОперацияЭДО);
	ПроцессВыполнения.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	ПроцессВыполнения.Вставить("ОбработкаПрогрессаВыполнения", ОбработкаПрогрессаВыполнения);
	ПроцессВыполнения.Вставить("ПолучениеИдентификатора");
	ПроцессВыполнения.Вставить("СозданиеУчетнойЗаписи");
	ПроцессВыполнения.Вставить("ОбновлениеДанныхАбонента");
	ПроцессВыполнения.Вставить("ПроверкаСвязи");
	
	Возврат ПроцессВыполнения;
	
КонецФункции

Процедура ОтобразитьПроцессВыполненияПодключенияЭДО_Такском(ПроцессВыполнения, Знач Показать = Истина)
	
	ФормаПроцесса = Неопределено;
	ПроцессВыполнения.Свойство("ФормаПроцесса", ФормаПроцесса);
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	Если ЗначениеЗаполнено(ОперацияЭДО)
		И ОперацияЭДО.Свойство("СлужебныеПараметры")
		И ОперацияЭДО.СлужебныеПараметры.Свойство("ОткрыватьФормуДлительнойОперации")
		И НЕ ОперацияЭДО.СлужебныеПараметры.ОткрыватьФормуДлительнойОперации Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаПроцесса = Неопределено Тогда
		Если Показать Тогда
			ФормаПроцесса = ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ДлительнаяОперация");
			ПроцессВыполнения.Вставить("ФормаПроцесса", ФормаПроцесса);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ФормаОткрыта = ФормаПроцесса.Открыта();
		Если Показать И Не ФормаОткрыта Тогда
			ОткрытьФорму(ФормаПроцесса);
		ИначеЕсли Не Показать И ФормаОткрыта Тогда
			ФормаПроцесса.Закрыть();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ФормаПроцесса.Заголовок = НСтр("ru = 'Подключение ЭДО'");
	
	ТекстСообщения = НСтр("ru = 'Пожалуйста, подождите.'");
	Если ПроцессВыполнения.ПолучениеИдентификатора = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Получение идентификатора от оператора.'");
	ИначеЕсли ПроцессВыполнения.СозданиеУчетнойЗаписи = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Создание учетной записи ЭДО.'");
	ИначеЕсли ПроцессВыполнения.ОбновлениеДанныхАбонента = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Обновление данных об абоненте.'");
	КонецЕсли;
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОперацияВыполнена = ЗначениеЗаполнено(ОперацияЭДО.Результат.УчетнаяЗапись)
		И ОперацияЭДО.Результат.ОбновленыДанныеАбонента;
	
	Если ОперацияВыполнена Тогда
		ТекстСообщения = НСтр("ru = 'Подключение ЭДО завершено.'");
		ФормаПроцесса.Элементы.ФормаОтмена.Заголовок = НСтр("ru = 'Закрыть'");
	КонецЕсли;
	
	ФормаПроцесса.Элементы.ФормаОтмена.Видимость = ОперацияВыполнена;
	ФормаПроцесса.Элементы.КартинкаУспешно.Видимость = ОперацияВыполнена;
	ФормаПроцесса.Элементы.ДекорацияДлительнаяОперация.Видимость = Не ОперацияВыполнена;
	
	ФормаПроцесса.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = ТекстСообщения;
	
КонецПроцедуры

Процедура ВыполнитьПодключениеЭДО_Такском(Знач РезультатТекущегоЭтапа, Знач ПроцессВыполнения) Экспорт
	
	Если ЗначениеЗаполнено(ПроцессВыполнения.ТекущийЭтап) Тогда
		ПроцессВыполнения.Вставить(ПроцессВыполнения.ТекущийЭтап, РезультатТекущегоЭтапа);
	КонецЕсли;
	
	ОтобразитьПроцессВыполненияПодключенияЭДО_Такском(ПроцессВыполнения);
	
	// Определение выполняемой операции.
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	Если Не ЗначениеЗаполнено(ОперацияЭДО) Тогда
		ЗавершитьПодключениеЭДО_Такском(ПроцессВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ОперацияЭДО.СлужебныеПараметры.Свойство("ВключеноРазделениеДанных")
		И ОперацияЭДО.СлужебныеПараметры.ВключеноРазделениеДанных Тогда
		
		Выполнено = ВыполнитьПодключениеЭДО_Такском_ПроверкаСвязи(ПроцессВыполнения);
		Если Не Выполнено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Выполнено = ВыполнитьПодключениеЭДО_Такском_ПолучениеНовогоИдентификатора(ПроцессВыполнения);
		Если Не Выполнено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Отменено = ПроверитьПрогрессВыполненияПодключения(ПроцессВыполнения.ОбработкаПрогрессаВыполнения);
	Если Отменено Тогда
		ЗавершитьПодключениеЭДО_Такском(ПроцессВыполнения);
		Возврат;
	КонецЕсли;

	Выполнено = ВыполнитьПодключениеЭДО_Такском_СозданиеУчетнойЗаписи(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнено = ВыполнитьПодключениеЭДО_Такском_ОбновлениеДанныхАбонента(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьПодключениеЭДО_Такском(ПроцессВыполнения);
	
КонецПроцедуры

Процедура ЗавершитьПодключениеЭДО_Такском(Знач ПроцессВыполнения)
	
	Если ПроцессВыполнения.Свойство("ФормаПроцесса") Тогда
		Если ПроцессВыполнения.ФормаПроцесса.Открыта() Тогда
			ПроцессВыполнения.ФормаПроцесса.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОперацияВыполнена = ЗначениеЗаполнено(ОперацияЭДО.Результат.УчетнаяЗапись)
		И ОперацияЭДО.Результат.ОбновленыДанныеАбонента;
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", ОперацияВыполнена);
	Результат.Вставить("ОперацияЭДО", ОперацияЭДО);
	
	ВыполнитьОбработкуОповещения(ПроцессВыполнения.ОбработкаЗавершения, Результат);
	
КонецПроцедуры

Функция ВыполнитьПодключениеЭДО_Такском_ПолучениеНовогоИдентификатора(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ПолучениеИдентификатора = ПроцессВыполнения.ПолучениеИдентификатора;
	ИдентификаторЭДО        = ОперацияЭДО.Результат.ИдентификаторЭДО;
	Если ПолучениеИдентификатора = Неопределено И Не ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		ПроцессВыполнения.ТекущийЭтап = "ПолучениеИдентификатора";
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_Такском", ЭтотОбъект, ПроцессВыполнения);
		ПараметрыПолучения = Новый Структура;
		ПараметрыПолучения.Вставить("Организация"         , ОперацияЭДО.Параметры.Организация);
		ПараметрыПолучения.Вставить("Сертификат"          , ОперацияЭДО.Параметры.Сертификат);
		ПараметрыПолучения.Вставить("КодНалоговогоОргана" , ОперацияЭДО.Параметры.КодНалоговогоОргана);
		ПараметрыПолучения.Вставить("АдресОрганизации"    , ОперацияЭДО.Параметры.АдресОрганизации);
		НачатьПолучениеНовогоИдентификатораТакском(ПараметрыПолучения, ОбработкаПродолжения);
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ПолучениеИдентификатора) = Тип("Структура") Тогда
		Если ПолучениеИдентификатора.Выполнено Тогда
			ИдентификаторЭДО = ПолучениеИдентификатора.ИдентификаторЭДО;
			ПроцессВыполнения.ОперацияЭДО.Результат.ИдентификаторЭДО = ИдентификаторЭДО;
			
			Если ПроцессВыполнения.ОбработкаПрогрессаВыполнения <> Неопределено Тогда
				ПараметрыОбработкиПрогрессаВыполнения = ПроцессВыполнения.ОбработкаПрогрессаВыполнения.ДополнительныеПараметры;
				Если ТипЗнч(ПараметрыОбработкиПрогрессаВыполнения) = Тип("Структура") Тогда
					Если ПараметрыОбработкиПрогрессаВыполнения.Свойство("ИдентификаторЭДО") Тогда
						ПараметрыОбработкиПрогрессаВыполнения.ИдентификаторЭДО = ИдентификаторЭДО;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		ЗавершитьПодключениеЭДО_Такском(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПодключениеЭДО_Такском_СозданиеУчетнойЗаписи(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	СозданиеУчетнойЗаписи = ПроцессВыполнения.СозданиеУчетнойЗаписи;
	УчетнаяЗапись = ОперацияЭДО.Результат.УчетнаяЗапись;
	Если СозданиеУчетнойЗаписи = Неопределено И Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ПараметрыСоздания = НовыеПараметрыСозданияУчетнойЗаписиЭДО();
		ПараметрыСоздания.Организация = ОперацияЭДО.Параметры.Организация;
		ПараметрыСоздания.АдресОрганизации = ОперацияЭДО.Параметры.АдресОрганизации;
		ПараметрыСоздания.КодНалоговогоОргана = ОперацияЭДО.Параметры.КодНалоговогоОргана;
		ПараметрыСоздания.СпособОбменаЭД = ОперацияЭДО.Параметры.СпособОбменаЭД;
		ПараметрыСоздания.ОператорЭДО = ОперацияЭДО.Параметры.ОператорЭДО;
		ПараметрыСоздания.ИдентификаторЭДО = ОперацияЭДО.Результат.ИдентификаторЭДО;
		ПараметрыСоздания.НаименованиеУчетнойЗаписи = ОперацияЭДО.Параметры.НаименованиеУчетнойЗаписи;
		ПараметрыСоздания.НазначениеУчетнойЗаписи = ОперацияЭДО.Параметры.НазначениеУчетнойЗаписи;
		ПараметрыСоздания.ПодробноеОписаниеУчетнойЗаписи = ОперацияЭДО.Параметры.ОписаниеУчетнойЗаписи;
		ПараметрыСоздания.Сертификат = ОперацияЭДО.Параметры.Сертификат;
		ПараметрыСоздания.ЭлектроннаяПочтаДляУведомлений = ОперацияЭДО.Параметры.ЭлектроннаяПочтаДляУведомлений;
		ПараметрыСоздания.УведомлятьОНовыхПриглашениях = ОперацияЭДО.Параметры.УведомлятьОНовыхПриглашениях;
		ПараметрыСоздания.УведомлятьОбОтветахНаПриглашения = ОперацияЭДО.Параметры.УведомлятьОбОтветахНаПриглашения;
		ПараметрыСоздания.УведомлятьОНовыхДокументах = ОперацияЭДО.Параметры.УведомлятьОНовыхДокументах;
		ПараметрыСоздания.УведомлятьОНеОбработанныхДокументах = ОперацияЭДО.Параметры.УведомлятьОНеОбработанныхДокументах;
		ПараметрыСоздания.УведомлятьОбОкончанииСрокаДействияСертификата = ОперацияЭДО.Параметры.УведомлятьОбОкончанииСрокаДействияСертификата;
		ПараметрыСоздания.ПринятыУсловияИспользования = ОперацияЭДО.Параметры.ПринятыУсловияИспользования;
		Если СоздатьУчетнуюЗаписьЭДО(ПараметрыСоздания) Тогда
			ПроцессВыполнения.СозданиеУчетнойЗаписи = "Создана";
			УчетнаяЗапись = ОперацияЭДО.Результат.ИдентификаторЭДО;
			ПроцессВыполнения.ОперацияЭДО.Результат.УчетнаяЗапись = УчетнаяЗапись;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЗавершитьПодключениеЭДО_Такском(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПодключениеЭДО_Такском_ОбновлениеДанныхАбонента(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОбновлениеДанныхАбонента = ПроцессВыполнения.ОбновлениеДанныхАбонента;
	ОбновленыДанныеАбонента = ОперацияЭДО.Результат.ОбновленыДанныеАбонента;
	Если ОбновлениеДанныхАбонента = Неопределено И Не ОбновленыДанныеАбонента Тогда
		ПроцессВыполнения.ТекущийЭтап = "ОбновлениеДанныхАбонента";
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_Такском", ЭтотОбъект, ПроцессВыполнения);
		ДанныеАбонента = Новый Структура;
		ДанныеАбонента.Вставить("ИдентификаторЭДО", ОперацияЭДО.Результат.ИдентификаторЭДО);
		НачатьОбновлениеДанныхАбонентаВСервисеЭДО(ДанныеАбонента, ОбработкаПродолжения);
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ОбновлениеДанныхАбонента) = Тип("Структура") Тогда
		Если ОбновлениеДанныхАбонента.Выполнено Тогда
			ОбновленыДанныеАбонента = Истина;
			ПроцессВыполнения.ОперацияЭДО.Результат.ОбновленыДанныеАбонента = ОбновленыДанныеАбонента;
		КонецЕсли;
	КонецЕсли;
	Если Не ОбновленыДанныеАбонента Тогда
		ЗавершитьПодключениеЭДО_Такском(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура НачатьПолучениеНовогоИдентификатораТакском(Знач Параметры, Знач ОбработкаПродолжения)
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьПолучениеНовогоИдентификатораТакском", ЭтотОбъект, ОбработкаПродолжения);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ОбработчикСтатусаЗаявки",
		Новый ОписаниеОповещения("ОбработатьСтатусЗаявкиПриПолученииНовогоИдентификатораТакском", ЭтотОбъект, ОбработкаПродолжения.ДополнительныеПараметры.ОперацияЭДО));
		
	ПараметрыОбработки.Вставить("ОбработчикСозданияЗаявки",
		Новый ОписаниеОповещения("ОбработатьСозданиеЗаявкиПриПолученииНовогоИдентификатораТакском", ЭтотОбъект, Параметры));

	Подключение1СТакскомКлиент.ПолучитьУникальныйИдентификаторАбонента(
		Параметры.Сертификат, Параметры.Организация, ОбработкаЗавершения, ПараметрыОбработки);
	
КонецПроцедуры

Процедура ЗакончитьПолучениеНовогоИдентификатораТакском(Знач Результат, Знач ОбработкаПродолжения) Экспорт
	
	РезультатПолучения = Новый Структура;
	РезультатПолучения.Вставить("Выполнено", Ложь);
	РезультатПолучения.Вставить("ИдентификаторЭДО");
	
	Если ЗначениеЗаполнено(Результат) Тогда
		РезультатПолучения.Выполнено = Истина;
		РезультатПолучения.ИдентификаторЭДО = Результат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, РезультатПолучения);
	
КонецПроцедуры

Процедура ОбработатьСтатусЗаявкиПриПолученииНовогоИдентификатораТакском(Результат, ДополнительныеПараметры) Экспорт

	ОтветДействие = Новый Структура;
	Действие      = "СтандартнаяОбработка";
	СтатусЗаявки  = Неопределено;
	Результат.Свойство("СтатусЗаявки", СтатусЗаявки);
	
	Если СтатусЗаявки = "Отсутствует" Тогда
		
		Действие = "НоваяЗаявка";
		
	ИначеЕсли СтатусЗаявки = "ОжиданиеОбработки"
		ИЛИ СтатусЗаявки = Неопределено Тогда
		
		Действие = "ПроверитьСтатусЗаявки";
		
	ИначеЕсли СтатусЗаявки = "Обработана" Тогда
		
		ДополнительныеПараметры.Результат.ИдентификаторЭДО = Результат.ДанныеЗаявки.ИдентификаторАбонента;
		ДополнительныеПараметры.Результат.НомерЗаявки      = Результат.НомерЗаявки;
		
		Действие = "Завершить";
		
	ИначеЕсли СтатусЗаявки = "Отклонена" Тогда
		
		ОписаниеОшибки = Результат.ОписаниеОшибки;
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			
			ВидОперации = НСтр("ru = 'Обработка статуса заявки при получении идентификатора от оператора 1С-Такском.'");
			
			Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(ВидОперации,
				"НеизвестнаяОшибка", ОписаниеОшибки, ОписаниеОшибки);
			
			ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ДобавитьОшибку(ДополнительныеПараметры.СлужебныеПараметры.КонтекстОперации, Ошибка);
			
		КонецЕсли;
		
		Действие = "Завершить";
		
	КонецЕсли;
	
	ОтветДействие.Вставить("Действие", Действие);

	Если Действие <> "ПроверитьСтатусЗаявки" Тогда
		ВыполнитьОбработкуОповещения(Результат.ОбработчикРезультата, ОтветДействие);
	Иначе
		СлужебныеПараметры = ДополнительныеПараметры.СлужебныеПараметры;
		Если СлужебныеПараметры.Свойство("ПроцедураПроверкиЗаявленияТакском") Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОбработчикПродолженияПроверкиЗаявкиТакском", Результат.ОбработчикРезультата);
			ДополнительныеПараметры.Вставить("ДействиеОбработкиЗаявкиТакском"            , ОтветДействие);
			ВыполнитьОбработкуОповещения(СлужебныеПараметры.ПроцедураПроверкиЗаявленияТакском, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСозданиеЗаявкиПриПолученииНовогоИдентификатораТакском(Результат, ДополнительныеПараметры) Экспорт
	
	ОтветДействие = Новый Структура;
	
	ДанныеЗаявки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Результат.ДанныеЗаявки);
	
	ОбменСКонтрагентамиСлужебныйВызовСервера.ЗаполнитьДанныеЗаявки(ДополнительныеПараметры, ДанныеЗаявки);
	
	Действие = "ОтправитьЗаявку";
	
	ДополнительныеПараметрыЗаявки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры,
		"ДополнительныеПараметрыЗаявкиТакском", Неопределено);
	
	Ошибки = ОшибкиВДанныхЗаявкиТакском(ДанныеЗаявки, ДополнительныеПараметрыЗаявки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Действие = "Завершить";
		СообщитьОбОшибкахВДанныхЗаявкиТакском(Ошибки);
	КонецЕсли;
	
	ОтветДействие.Вставить("Действие"     , Действие);
	ОтветДействие.Вставить("ДанныеЗаявки" , ДанныеЗаявки);
	
	ВыполнитьОбработкуОповещения(Результат.ОбработчикРезультата, ОтветДействие);
	
КонецПроцедуры

Функция ОшибкиВДанныхЗаявкиТакском(Знач ДанныеЗаявки, ДополнительныеПараметрыЗаявки = Неопределено) Экспорт
	
	Если ДополнительныеПараметрыЗаявки = Неопределено Тогда
		ДополнительныеПараметрыЗаявки = НовыеДополнительныеПараметрыЗаявкиТакском();
	КонецЕсли;
	
	КодРегиона = ДанныеЗаявки.КодРегиона;
	Телефон = ДанныеЗаявки.Телефон;
	ИНН = ДанныеЗаявки.ИНН;
	КПП = ДанныеЗаявки.КПП;
	ОГРН = ДанныеЗаявки.ОГРН;
	КодНалоговогоОргана = ДанныеЗаявки.КодНалоговогоОргана;
	ЮрФизЛицо = ДанныеЗаявки.ЮрФизЛицо;
	Фамилия = ДанныеЗаявки.Фамилия;
	Имя = ДанныеЗаявки.Имя;
	
	Ошибки = Новый Массив;
	
	Если ПустаяСтрока(Телефон) Тогда
		ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='Не заполнено поле ""Телефон""'"));
	КонецЕсли;
	
	// Проверка адреса
	
	Если ПустаяСтрока(КодРегиона) Тогда
		ПутьКДаннымАдресОрганизации = ДополнительныеПараметрыЗаявки.ПутьКДаннымАдресОрганизации;
		
		Если ЗначениеЗаполнено(ПутьКДаннымАдресОрганизации) Тогда
			ДополнениеОшибки = НСтр("ru = 'Нажмите для перехода к редактированию адреса.'");
		Иначе 
			ДополнениеОшибки = "";
		КонецЕсли;
		
		ТекстОшибки = НСтр("ru ='Не удалось определить код региона юридического адреса организации. Возможно, адрес указан в свободной форме.
			|Смените тип адреса (команды ""Административно-территориальное"" или ""Муниципальное деление"" меню ""Еще"" формы редактирования адреса.'")
			+ ДополнениеОшибки;
		ДобавитьОшибкуЗаявкиТакском(Ошибки, ТекстОшибки, ПутьКДаннымАдресОрганизации);
	КонецЕсли;
	
	Если ПустаяСтрока(ИНН) Тогда
		ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='Не заполнено поле ""ИНН""'"));
	КонецЕсли;
	
	Если ЮрФизЛицо <> "ЮрЛицо" И ЮрФизЛицо <> "ФизЛицо" Тогда
		ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='Не выбран тип организации (юридическое или физическое лицо)'"));
	КонецЕсли;
	
	Если ПустаяСтрока(КПП) И ЮрФизЛицо = "ЮрЛицо" Тогда
		ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='Не заполнено поле ""КПП""'"));
	КонецЕсли;
	
	Если ПустаяСтрока(ОГРН) И ЮрФизЛицо = "ЮрЛицо" Тогда
		ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='Не заполнено поле ""ОГРН""'"));
	КонецЕсли;
	
	Если ПустаяСтрока(КодНалоговогоОргана) Тогда
		ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='Не заполнено поле ""Код налогового органа""'"));
	КонецЕсли;
	
	Если ПустаяСтрока(Фамилия) Тогда
		ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='Не заполнено поле ""Фамилия""'"));
	КонецЕсли;
	
	Если ПустаяСтрока(Имя) Тогда
		ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='Не заполнено поле ""Имя""'"));
	КонецЕсли;
	
	// Дополнительные проверки
	
	Если НЕ ПустаяСтрока(Телефон) Тогда
		Если СтрДлина(Телефон) > 20 Тогда
			ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""Телефон"" должен содержать не более 20 символов'"));
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	
	Если НЕ ПустаяСтрока(КодРегиона) Тогда
		Если КодРегиона <> "0" Тогда
			КодРегионаЧисло = ОписаниеТипаЧисло.ПривестиЗначение(СокрЛП(КодРегиона));
			Если КодРегионаЧисло = 0 Тогда
				ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='В ""Коде региона"" использованы недопустимые символы'"));
			Иначе
				Если СтрДлина(СокрЛП(КодРегиона)) <> 2 Тогда
					ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""Код региона"" должен содержать 2 цифры'"));
				Иначе
					Если КодРегионаЧисло > 99 ИЛИ КодРегионаЧисло < 1 Тогда
						ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""Код региона"" должен быть от 01 до 99'"));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""Код региона"" должен содержать 2 цифры'"));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИНН) Тогда
		Если ИНН <> "0" Тогда
			ИННЧисло = ОписаниеТипаЧисло.ПривестиЗначение(СокрЛП(ИНН));
			Если ИННЧисло = 0 Тогда
				ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""ИНН"" должен содержать 12 цифр'"));
			Иначе
				Если СтрДлина(СокрЛП(ИНН)) <> 12 И ЮрФизЛицо = "ФизЛицо" Тогда
					ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""ИНН"" должен содержать 12 цифр'"));
				ИначеЕсли СтрДлина(СокрЛП(ИНН)) <> 10 И ЮрФизЛицо = "ЮрЛицо" Тогда
					ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""ИНН"" должен содержать 10 цифр'"));
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""ИНН"" должен содержать 12 цифр'"));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КПП) Тогда
		Если КПП <> "0" Тогда
			КППЧисло = ОписаниеТипаЧисло.ПривестиЗначение(СокрЛП(КПП));
			Если КППЧисло = 0 Тогда
				ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='В ""КПП"" использованы недопустимые символы'"));
			Иначе
				Если СтрДлина(СокрЛП(КПП)) <> 9 Тогда
					ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""КПП"" должен содержать 9 цифр'"));
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""КПП"" должен содержать 9 цифр'"));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОГРН) Тогда
		Если ОГРН <> "0" Тогда
			ОГРНЧисло = ОписаниеТипаЧисло.ПривестиЗначение(СокрЛП(ОГРН));
			Если ОГРНЧисло = 0 Тогда
				ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='В ""ОГРН"" использованы недопустимые символы'"));
			Иначе
				Если СтрДлина(СокрЛП(ОГРН)) <> 13  И ЮрФизЛицо = "ЮрЛицо" Тогда
					ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""ОГРН"" должен содержать 13 цифр'"));
				ИначеЕсли СтрДлина(СокрЛП(ОГРН)) <> 15  И ЮрФизЛицо = "ФизЛицо" Тогда
					ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""ОГРН"" должен содержать 15 цифр'"));
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СтрДлина(СокрЛП(ОГРН)) <> 13  И ЮрФизЛицо = "ЮрЛицо" Тогда
				ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""ОГРН"" должен содержать 13 цифр'"));
			ИначеЕсли СтрДлина(СокрЛП(ОГРН)) <> 15  И ЮрФизЛицо = "ФизЛицо" Тогда
				ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""ОГРН"" должен содержать 15 цифр'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КодНалоговогоОргана) Тогда
		Если КодНалоговогоОргана <> "0" Тогда
			Если ОГРНЧисло = 0 Тогда
				ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='В ""Коде налогового органа"" использованы недопустимые символы'"));
			Иначе
				Если СтрДлина(СокрЛП(КодНалоговогоОргана)) <> 4 Тогда
					ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""Код налогового органа"" должен содержать 4 цифры'"));
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДобавитьОшибкуЗаявкиТакском(Ошибки, НСтр("ru ='""Код налогового органа"" должен содержать 4 цифры'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

Процедура СообщитьОбОшибкахВДанныхЗаявкиТакском(Знач Ошибки) Экспорт
	
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Обнаружены ошибки в заявке оператору ""Такском"":'"));
	
	Для каждого Ошибка Из Ошибки Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка.ТекстСообщения,, Ошибка.ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры

Функция НовыеДополнительныеПараметрыЗаявкиТакском() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПутьКДаннымАдресОрганизации", "");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции 

Функция ВыполнитьПодключениеЭДО_Такском_ПроверкаСвязи(ПроцессВыполнения)
	
	ОперацияЭДО    = ПроцессВыполнения.ОперацияЭДО;
	ПроверкаСвязи  = ПроцессВыполнения.ПроверкаСвязи;
	СвязьПроверена = Ложь;
	
	Если ПроверкаСвязи = Неопределено Тогда
		ПроцессВыполнения.ТекущийЭтап = "ПроверкаСвязи";
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_Такском", ЭтотОбъект, ПроцессВыполнения);
		ПараметрыПроверки = НовыеПараметрыПроверкиСвязиССервисомЭДО_1СЭДО();
		ПараметрыПроверки.Сертификат               = ОперацияЭДО.Параметры.Сертификат;
		ПараметрыПроверки.СпособОбменаЭД           = ОперацияЭДО.Параметры.СпособОбменаЭД;
		ПараметрыПроверки.ИдентификаторОрганизации = ОперацияЭДО.Результат.ИдентификаторЭДО;
		НачатьПроверкуСвязиССервисомЭДО_1СЭДО(ПараметрыПроверки, ОбработкаПродолжения);
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ПроверкаСвязи) = Тип("Структура") Тогда
		Если ПроверкаСвязи.Выполнено Тогда
			СвязьПроверена = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Не СвязьПроверена Тогда
		ЗавершитьПодключениеЭДО_Такском(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбновлениеСертификата

Процедура НачатьОбновлениеСертификата(Знач ОперацияЭДО, Знач ОбработкаПродолжения)
	
	ПроцессВыполнения = НовыйПроцессВыполненияОбновленияСертификата(ОперацияЭДО, ОбработкаПродолжения);
	
	ВыполнитьОбновлениеСертификата(Неопределено, ПроцессВыполнения);
	
КонецПроцедуры

Функция НовыйПроцессВыполненияОбновленияСертификата(Знач ОперацияЭДО, Знач ОбработкаЗавершения)
	
	ПроцессВыполнения = Новый Структура;
	ПроцессВыполнения.Вставить("ТекущийЭтап");
	ПроцессВыполнения.Вставить("ОперацияЭДО", ОперацияЭДО);
	ПроцессВыполнения.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	ПроцессВыполнения.Вставить("УчетныеЗаписи");
	ПроцессВыполнения.Вставить("ОтправленныеЗаявки", Новый Массив);
	ПроцессВыполнения.Вставить("ОтправкаЗаявки");
	ПроцессВыполнения.Вставить("ОдобренныеЗаявки", Новый Массив);
	
	Возврат ПроцессВыполнения;
	
КонецФункции

Процедура ОтобразитьПроцессВыполненияОбновленияСертификата(ПроцессВыполнения, Знач Показать = Истина)
	
	ФормаПроцесса = Неопределено;
	ПроцессВыполнения.Свойство("ФормаПроцесса", ФормаПроцесса);
	
	Если ФормаПроцесса = Неопределено Тогда
		Если Показать Тогда
			ФормаПроцесса = ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ДлительнаяОперация");
			ПроцессВыполнения.Вставить("ФормаПроцесса", ФормаПроцесса);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ФормаОткрыта = ФормаПроцесса.Открыта();
		Если Показать И Не ФормаОткрыта Тогда
			ОткрытьФорму(ФормаПроцесса);
		ИначеЕсли Не Показать И ФормаОткрыта Тогда
			ФормаПроцесса.Закрыть();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ФормаПроцесса.Заголовок = НСтр("ru = 'Обновление сертификатов ЭДО'");
	
	ВсегоЗаявок = ?(ПроцессВыполнения.УчетныеЗаписи = Неопределено, 0 , ПроцессВыполнения.УчетныеЗаписи.Количество());
	ОтправленоЗаявок = ПроцессВыполнения.ОтправленныеЗаявки.Количество();
	ОдобреноЗаявок = ПроцессВыполнения.ОдобренныеЗаявки.Количество();
	
	ТекстСообщения = НСтр("ru = 'Пожалуйста, подождите.'");
	Если ПроцессВыполнения.УчетныеЗаписи = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Поиск учетных записей ЭДО для добавления сертификата.'");
	ИначеЕсли ВсегоЗаявок <> ОтправленоЗаявок Тогда
		ШаблонСообщения = НСтр("ru = 'Отправка сертификата оператору ЭДО (%1 из %2).'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОтправленоЗаявок + 1, ВсегоЗаявок);
	Иначе
		ТекстСообщения = НСтр("ru = 'Добавление сертификата в учетные записи ЭДО.'");
	КонецЕсли;
	
	ОперацияВыполнена = (ВсегоЗаявок = ОдобреноЗаявок) И (ПроцессВыполнения.УчетныеЗаписи <> Неопределено);
	
	Если ОперацияВыполнена Тогда
		ТекстСообщения = НСтр("ru = 'Обновление сертификата завершено.'");
		ФормаПроцесса.Элементы.ФормаОтмена.Заголовок = НСтр("ru = 'Закрыть'");
	КонецЕсли;
	
	ФормаПроцесса.Элементы.ФормаОтмена.Видимость = ОперацияВыполнена;
	ФормаПроцесса.Элементы.КартинкаУспешно.Видимость = ОперацияВыполнена;
	ФормаПроцесса.Элементы.ДекорацияДлительнаяОперация.Видимость = Не ОперацияВыполнена;
	
	ФормаПроцесса.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = ТекстСообщения;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеСертификата(Знач РезультатТекущегоЭтапа, Знач ПроцессВыполнения) Экспорт
	
	ИмяЭтогоМетода = "ВыполнитьОбновлениеСертификата";
	
	Если ЗначениеЗаполнено(ПроцессВыполнения.ТекущийЭтап) Тогда
		ПроцессВыполнения.Вставить(ПроцессВыполнения.ТекущийЭтап, РезультатТекущегоЭтапа);
	КонецЕсли;
	
	ОтобразитьПроцессВыполненияОбновленияСертификата(ПроцессВыполнения);
	
	// Определение выполняемой операции.
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	Если Не ЗначениеЗаполнено(ОперацияЭДО) Тогда
		ЗавершитьОбновлениеСертификата(ПроцессВыполнения);
		Возврат;
	КонецЕсли;
	
	// Определение учетных записей для обновления.
	УчетныеЗаписи = ПроцессВыполнения.УчетныеЗаписи;
	Если УчетныеЗаписи = Неопределено Тогда
		УчетныеЗаписи = ОбменСКонтрагентамиСлужебныйВызовСервера.УчетныеЗаписиЭДОДляОбновленияСертификата(
			ОперацияЭДО.Параметры.Организация, ОперацияЭДО.Параметры.Сертификат, ОперацияЭДО.Параметры.НовыйСертификат);
		ПроцессВыполнения.УчетныеЗаписи = УчетныеЗаписи;
	КонецЕсли;
	
	// Отправка заявок на добавление сертификата.
	//  Проверяем текущую заявку.
	ОтправкаЗаявки = ПроцессВыполнения.ОтправкаЗаявки;
	Если ТипЗнч(ОтправкаЗаявки) = Тип("Структура") Тогда
		ПроцессВыполнения.ОтправленныеЗаявки.Добавить(ОтправкаЗаявки.ИдентификаторЭДО);
		Если ОтправкаЗаявки.Одобрено Тогда
			ПроцессВыполнения.ОдобренныеЗаявки.Добавить(ОтправкаЗаявки.ИдентификаторЭДО);
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьПроцессВыполненияОбновленияСертификата(ПроцессВыполнения);
	
	//  Отправляем оставшиеся заявки.
	Для каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
		Если ПроцессВыполнения.ОтправленныеЗаявки.Найти(УчетнаяЗапись.ИдентификаторЭДО) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПроцессВыполнения.ТекущийЭтап = "ОтправкаЗаявки";
		ЭтотМетод = Новый ОписаниеОповещения(ИмяЭтогоМетода, ЭтотОбъект, ПроцессВыполнения);
		НачатьОтправкуЗаявкиНаДобавлениеСертификата(УчетнаяЗапись, ОперацияЭДО.Параметры.НовыйСертификат, ЭтотМетод);
		Возврат;
	КонецЦикла;
	
	ОтобразитьПроцессВыполненияОбновленияСертификата(ПроцессВыполнения);
	
	// Добавляем новый сертификат по одобренным заявкам.
	ОбменСКонтрагентамиСлужебныйВызовСервера.ДобавитьСертификатВУчетныеЗаписиЭДО(
		ПроцессВыполнения.ОдобренныеЗаявки, ОперацияЭДО.Параметры.НовыйСертификат);
	
	ЗавершитьОбновлениеСертификата(ПроцессВыполнения);
	
КонецПроцедуры

Процедура ЗавершитьОбновлениеСертификата(Знач ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ВсегоЗаявок = ?(ПроцессВыполнения.УчетныеЗаписи = Неопределено, 0, ПроцессВыполнения.УчетныеЗаписи.Количество());
	ОдобреноЗаявок = ПроцессВыполнения.ОдобренныеЗаявки.Количество();
	
	ОперацияВыполнена = (ВсегоЗаявок = ОдобреноЗаявок) И (ПроцессВыполнения.УчетныеЗаписи <> Неопределено);
	
	ОтобразитьПроцессВыполненияОбновленияСертификата(ПроцессВыполнения);
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", ОперацияВыполнена);
	Результат.Вставить("ОперацияЭДО", ОперацияЭДО);
	
	ВыполнитьОбработкуОповещения(ПроцессВыполнения.ОбработкаЗавершения, Результат);
	
КонецПроцедуры


Процедура НачатьОтправкуЗаявкиНаДобавлениеСертификата(Знач УчетнаяЗапись, Знач НовыйСертификат, Знач ОбработкаПродолжения)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ИдентификаторЭДО", УчетнаяЗапись.ИдентификаторЭДО);
	Контекст.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьОтправкуЗаявкиНаДобавлениеСертификата", ЭтотОбъект, Контекст);
	
	Если УчетнаяЗапись.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		
		Если ИспользуетсяИнтернетПоддержкаПользователей() Тогда
			Подключение1СТакскомКлиент.ЗарегистрироватьСертификатАбонента(
				НовыйСертификат, УчетнаяЗапись.ИдентификаторЭДО, УчетнаяЗапись.Организация, ОбработкаЗавершения);
			Возврат;
		Иначе
			// В случае, если в конфигурацию не встроена интернет-поддержка или работа производится в режиме сервиса,
			// сертификат в сервисе 1С-Такском необходимо регистрировать через тех. поддержку.
			ШаблонСообщения = НСтр("ru = 'Учетная запись ""%1"" (%2):'") + Символы.ПС
				+ НСтр("ru = 'Сертификат добавлен в учетную запись, но для регистрации его в сервисе ЭДО необходимо обратиться в техническую поддержку 1С-ЭДО.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, УчетнаяЗапись.НаименованиеУчетнойЗаписи, УчетнаяЗапись.ИдентификаторЭДО);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ЗакончитьОтправкуЗаявкиНаДобавлениеСертификата(Истина, Контекст);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли УчетнаяЗапись.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		
		// Для 1С-ЭДО еще нужно подписать, отправить и ожидать обработки.
		
		ПараметрыРегистрации = Новый Структура;
		ПараметрыРегистрации.Вставить("Организация", УчетнаяЗапись.Организация);
		ПараметрыРегистрации.Вставить("ОператорЭДО", УчетнаяЗапись.ОператорЭДО);
		ПараметрыРегистрации.Вставить("АдресОрганизации", УчетнаяЗапись.АдресОрганизации);
		ПараметрыРегистрации.Вставить("СертификатКриптографии", НовыйСертификат);
		ПараметрыРегистрации.Вставить("ЭлектроннаяПочта", УчетнаяЗапись.ЭлектроннаяПочтаДляУведомлений);
		ПараметрыРегистрации.Вставить("КодНалоговогоОргана", УчетнаяЗапись.КодНалоговогоОргана);
		ПараметрыРегистрации.Вставить("СертификатыПодписейОрганизации", УчетнаяЗапись.ВсеСертификаты);
		ПараметрыРегистрации.Вставить("ИдентификаторОрганизации", УчетнаяЗапись.ИдентификаторЭДО);
		
		НачатьОтправкуЗаявкиНаДобавлениеСертификата_1СЭДО(ПараметрыРегистрации, ОбработкаЗавершения);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОтправкуЗаявкиНаДобавлениеСертификата_1СЭДО(Знач ПараметрыРегистрации, Знач ОбработкаПродолжения)
	
	ДанныеПакета = ОбменСКонтрагентамиСлужебныйВызовСервера.ДанныеДляРегистрационногоПакета1СЭДО(ПараметрыРегистрации);
	
	КонтекстПодписания = Новый Структура;
	КонтекстПодписания.Вставить("ДанныеПакета", ДанныеПакета);
	КонтекстПодписания.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("НачатьОтправкуЗаявкиНаДобавлениеСертификата_1СЭДО_Подписание", ЭтотОбъект, КонтекстПодписания);
	
	НачатьПодписаниеРегистрационногоПакета1СЭДО(ДанныеПакета, ОбработкаЗавершения);
	
КонецПроцедуры

Процедура НачатьОтправкуЗаявкиНаДобавлениеСертификата_1СЭДО_Подписание(Знач ОписаниеДанных, Знач КонтекстПодписания) Экспорт
	
	Если ОписаниеДанных = Неопределено Тогда
		ВыполнитьОбработкуОповещения(КонтекстПодписания.ОбработкаПродолжения, Ложь);
		Возврат;
	КонецЕсли;
	
	ДанныеПакета = КонтекстПодписания.ДанныеПакета;
	
	КонтекстОтправки = Новый Структура;
	КонтекстОтправки.Вставить("УникальныйИдентификаторЗаявки1СЭДО", ДанныеПакета.РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	КонтекстОтправки.Вставить("ОбработкаПродолжения", КонтекстПодписания.ОбработкаПродолжения);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("НачатьОтправкуЗаявкиНаДобавлениеСертификата_1СЭДО_Отправка", ЭтотОбъект, КонтекстОтправки);
	
	Данные = Новый Структура;
	Данные.Вставить("ДвоичныеДанныеСоглашенияНаПодключениеЭДО", ДанныеПакета.ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	Данные.Вставить("РеквизитыПакета", ДанныеПакета.РеквизитыПакета);
	Данные.Вставить("ДвоичныеДанныеДляОператораЭДО", ДанныеПакета.ДвоичныеДанныеДляОператораЭДО);
	Данные.Вставить("ОператорЭДОСертификат", ДанныеПакета.ОператорЭДОСертификат);
	Данные.Вставить("УникальныйИдентификаторЗаявки1СЭДО", ДанныеПакета.РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	Данные.Вставить("Оповещение", ОбработкаЗавершения);
	Данные.Вставить("Форма", Неопределено);
	
	СформироватьИОтправитьРегистрационныйПакет1СЭДОПослеПодписания(ОписаниеДанных, Данные);
	
КонецПроцедуры

Процедура НачатьОтправкуЗаявкиНаДобавлениеСертификата_1СЭДО_Отправка(Знач Результат, Знач КонтекстОтправки) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Результат") Тогда
		Результат = Результат.Результат;
	КонецЕсли;
	
	Если Результат = Истина Тогда
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("УникальныйИдентификаторЗаявки1СЭДО", КонтекстОтправки.УникальныйИдентификаторЗаявки1СЭДО);
		
		Операция = ОбменСКонтрагентамиСлужебныйВызовСервера.НачатьПолучениеСостоянияРегистрацииСертификатаВ1СЭДО(
			ПараметрыОперации, Новый УникальныйИдентификатор);
		
		Если Операция.Статус = "Выполнено" Тогда
			Операция.Статус = "Выполняется";
		КонецЕсли;
		
		ПараметрыОжидания = Неопределено;
		Если Не КонтекстОтправки.Свойство("ПараметрыОжидания", ПараметрыОжидания) Тогда
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			КонтекстОтправки.Вставить("ПараметрыОжидания", ПараметрыОжидания);
		КонецЕсли;
		
		ОбработкаЗавершения = Новый ОписаниеОповещения("НачатьОтправкуЗаявкиНаДобавлениеСертификата_1СЭДО_ОжиданиеОбработки", ЭтотОбъект, КонтекстОтправки);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Операция, ОбработкаЗавершения, ПараметрыОжидания);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(КонтекстОтправки.ОбработкаПродолжения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОтправкуЗаявкиНаДобавлениеСертификата_1СЭДО_ОжиданиеОбработки(Знач Результат, Знач КонтекстОтправки) Экспорт
	
	Если Результат <> Неопределено
		И Результат.Статус = "Выполнено" Тогда
		
		ИдентификаторОрганизации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			
			// Одобрено.
			ВыполнитьОбработкуОповещения(КонтекстОтправки.ОбработкаПродолжения, Истина);
			
		Иначе
			
			// Продолжаем ждать.
			Если КонтекстОтправки.ПараметрыОжидания.Интервал = 0 Тогда
				КонтекстОтправки.ПараметрыОжидания.Интервал = 1;
			Иначе
				КонтекстОтправки.ПараметрыОжидания.Интервал = Мин(КонтекстОтправки.ПараметрыОжидания.Интервал * 1.4, 15);
			КонецЕсли;
			НачатьОтправкуЗаявкиНаДобавлениеСертификата_1СЭДО_Отправка(Истина, КонтекстОтправки);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		// Ошибка или отклонение заявки.
		ВыполнитьОбработкуОповещения(КонтекстОтправки.ОбработкаПродолжения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакончитьОтправкуЗаявкиНаДобавлениеСертификата(Знач Результат, Знач Контекст) Экспорт
	
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("Одобрено", Ложь);
	РезультатОтправки.Вставить("ИдентификаторЭДО", Контекст.ИдентификаторЭДО);
	
	Если Результат = Истина Тогда
		РезультатОтправки.Одобрено = Истина;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, РезультатОтправки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ОтправитьМассивПакетовЭДПовторить(Результат, КонтекстОтправки) Экспорт
	
	ОтправитьМассивПакетовЭД(КонтекстОтправки.Пакеты, КонтекстОтправки.Оповещение);
	
КонецПроцедуры

Процедура ОповеститьОРезультатахПроверки(Параметры, КонтекстОперации)
	
	Если Параметры.Свойство("ПроверяемыйЭД") Тогда
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(Параметры.ПроверяемыйЭД);
		Если Параметры.Свойство("ЭлектронныйДокументВладелец")
			И ЗначениеЗаполнено(Параметры.ЭлектронныйДокументВладелец) Тогда
			МассивЭД.Добавить(Параметры.ЭлектронныйДокументВладелец);
		КонецЕсли;
		Отпечатки = Новый Массив;
		Для каждого Подпись Из Параметры.Подписи Цикл
			Отпечатки.Добавить(Подпись.Отпечаток);
		КонецЦикла; 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("МассивЭД", МассивЭД);
		ПараметрыОповещения.Вставить("КонтекстОперации", КонтекстОперации);
		ПараметрыОповещения.Вставить("Отпечатки", Отпечатки);
		Оповестить("ПроведенаПроверкаЭП", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

#Область УстановкаПрограммКриптографии

#Область УстановитьCryptoPRO

Процедура УстановитьCryptoProCSPПослеВводаРегистрационныхДанных(Результат, ВходящийКонтекст) Экспорт
	
	ОповещениеПослеСозданияКаталога = Новый ОписаниеОповещения(
			"УстановитьКриптопровайдерПослеСозданияВременногоКаталога", ЭтотОбъект, ВходящийКонтекст);
	
	ВходящийКонтекст.Вставить("ПослеСозданияВременногоКаталога", ОповещениеПослеСозданияКаталога);
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		ВходящийКонтекст.Вставить("РегистрационныеДанные", Результат);
		Оповещение = Новый ОписаниеОповещения(
			"УстановитьКриптопровайдерПослеПолученияДистрибутива", ЭтотОбъект, ВходящийКонтекст);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ВходящийКонтекст.Форма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ВходящийКонтекст.Форма.Элементы,
			"УстановитьCryptoPRO", "Картинка", БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация);
		
		ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДистрибутивCryptoProCSP(ВходящийКонтекст.РегистрационныеДанные);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", НСтр("ru = 'Пользователь прервал операцию'"));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстановитьVipNet

Процедура УстановитьViPNetCSPПослеВводаРегистрационныхДанных(РегистрационныеДанные, ВходящийКонтекст) Экспорт
	
	Если РегистрационныеДанные = КодВозвратаДиалога.Отмена
		 Или РегистрационныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		РегистрационныеДанные.Вставить("Разрядность", 32);
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		РегистрационныеДанные.Вставить("Разрядность", 64);
	Иначе
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеСозданияКаталога = Новый ОписаниеОповещения(
			"УстановитьКриптопровайдерПослеСозданияВременногоКаталога", ЭтотОбъект, ВходящийКонтекст);
	
	ВходящийКонтекст.Вставить("ПослеСозданияВременногоКаталога", ОповещениеПослеСозданияКаталога);
		
	Если ЗначениеЗаполнено(РегистрационныеДанные) И ТипЗнч(РегистрационныеДанные) = Тип("Структура") Тогда
		ВходящийКонтекст.Вставить("РегистрационныеДанные", РегистрационныеДанные);
		Оповещение = Новый ОписаниеОповещения(
			"УстановитьКриптопровайдерПослеПолученияДистрибутива", ЭтотОбъект, ВходящийКонтекст);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ВходящийКонтекст.Форма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ВходящийКонтекст.Форма.Элементы,
			"УстановитьVipNet", "Картинка", БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация);
		
		ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДистрибутивViPNetCSP(ВходящийКонтекст.РегистрационныеДанные);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", НСтр("ru = 'Пользователь прервал операцию'"));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура УстановитьКриптопровайдерПослеПолученияДистрибутива(ДлительнаяОперация, ВходящийКонтекст) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ВходящийКонтекст.Форма.Элементы,
		"УстановитьVipNet", "Картинка", Новый Картинка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ВходящийКонтекст.Форма.Элементы,
		"УстановитьCryptoPRO", "Картинка", Новый Картинка);

	Если ДлительнаяОперация = Неопределено Тогда
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Вызов API сервиса выдачи дистрибутивов'"));
		МассивСтрок.Добавить(ВходящийКонтекст.ИмяПрограммы);
		МассивСтрок.Добавить(НСтр("ru = 'Не был завершен штатно.'"));
		
		РезультатВыполнения.Вставить("ОписаниеОшибки", СтрСоединить(МассивСтрок, " "));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		РезультатПолученияДистрибутива = ОбменСКонтрагентамиСлужебныйВызовСервера.РезультатПолученияДистрибутиваКриптопровайдера(
			ДлительнаяОперация, ВходящийКонтекст.Форма.УникальныйИдентификатор);
		
		Если РезультатПолученияДистрибутива.КонтекстОперации.Диагностика.Ошибки.Количество() > 0 Тогда
			ОбработчикПовторенияДействия = Новый ОписаниеОповещения("УстановитьКриптопровайдерПослеВводаРегистрационныхДанныхПовторить",
				ЭтотОбъект, Новый Структура("ВходящийКонтекст, РегистрационныеДанные",
					ВходящийКонтекст, ВходящийКонтекст.РегистрационныеДанные));
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.НовыеПараметрыОбработкиОшибок();
			ПараметрыОбработкиОшибок.ОбработчикПовторенияДействия = ОбработчикПовторенияДействия;
			ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(РезультатПолученияДистрибутива.КонтекстОперации, ПараметрыОбработкиОшибок);
			ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Ложь);
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВходящийКонтекст, РезультатПолученияДистрибутива.ДанныеДистрибутива);
		ФайловаяСистемаКлиент.СоздатьВременныйКаталог(ВходящийКонтекст.ПослеСозданияВременногоКаталога);
	Иначе
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", ДлительнаяОперация.КраткоеПредставлениеОшибки);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКриптопровайдерПослеСозданияВременногоКаталога(ИмяКаталогаВременныхФайлов, ВходящийКонтекст) Экспорт
	
	ИмяКаталогаВременныхФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталогаВременныхФайлов);
	ВходящийКонтекст.Вставить("ВременныйКаталог", ИмяКаталогаВременныхФайлов);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФайловДистрибутива", ЭтотОбъект, ВходящийКонтекст);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Интерактивно = Ложь;
	ПараметрыСохранения.Диалог.Каталог = ИмяКаталогаВременныхФайлов;
	ФайловаяСистемаКлиент.СохранитьФайлы(Оповещение, ВходящийКонтекст.Дистрибутив, ПараметрыСохранения);
	
КонецПроцедуры

Процедура ПослеСохраненияФайловДистрибутива(ПолученныеФайлы, ВходящийКонтекст) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПриложениеНаКлиенте(
		ВходящийКонтекст.ВременныйКаталог + "Setup.bat", ВходящийКонтекст.ВременныйКаталог, Истина, Ложь, ВходящийКонтекст);
	
КонецПроцедуры

Процедура УстановитьКриптопровайдерПослеВводаРегистрационныхДанныхПовторить(Результат, ДополнительныеПараметры) Экспорт 
	
	ВходящийКонтекст = ДополнительныеПараметры.ВходящийКонтекст;
	РегистрационныеДанные = ДополнительныеПараметры.РегистрационныеДанные;
	Если РегистрационныеДанные.ИмяПрограммы = "VipNet CSP" Тогда
		УстановитьViPNetCSPПослеВводаРегистрационныхДанных(РегистрационныеДанные, ВходящийКонтекст);
	ИначеЕсли РегистрационныеДанные.ИмяПрограммы = "CryptoPro CSP" Тогда
		УстановитьCryptoProCSPПослеВводаРегистрационныхДанных(РегистрационныеДанные, ВходящийКонтекст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗапуститьПриложениеНаКлиенте

Процедура ЗапуститьПриложениеНаКлиенте(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, ВыводитьСообщения, ВходящийКонтекст)
	
	Оповещение = Новый ОписаниеОповещения(
			"ЗапуститьПриложениеНаКлиентеПослеЗапускаПриложения", ЭтотОбъект, ВходящийКонтекст,
			"ЗапуститьПриложениеНаКлиентеПриОшибкеЗапускаПриложения", ЭтотОбъект);
	
	ПараметрыЗапуска = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗапуска.Оповещение = Оповещение;
	ПараметрыЗапуска.ТекущийКаталог = ТекущийКаталог;
	ПараметрыЗапуска.ДождатьсяЗавершения = ДождатьсяЗавершения;
	
	ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапуска);
	
КонецПроцедуры

Процедура ЗапуститьПриложениеНаКлиентеПослеЗапускаПриложения(КодВозврата, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(ВходящийКонтекст.ОповещениеОЗавершении) = Тип("ОписаниеОповещения") Тогда
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Выполнено", Истина);
		РезультатВыполнения.Вставить("ОписаниеОшибки", "");
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

Процедура ЗапуститьПриложениеНаКлиентеПриОшибкеЗапускаПриложения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = НСтр("ru = 'Не удалось открыть файл %1.
                           |Возможно файл уже открыт.'");
	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ВходящийКонтекст.СтрокаКоманды);
	ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Выполнено", Ложь);
	РезультатВыполнения.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			РезультатВыполнения);

КонецПроцедуры

#КонецОбласти

#Область ОповещениеОНовыхДокументах

Процедура ПодключитьОбработчикДействияЧерезСистемуВзаимодействия()
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработчикДействияСообщенияЭДО", ЭтотОбъект);
	СистемаВзаимодействия.ПодключитьОбработчикДействияСообщения(Оповещение);
	
КонецПроцедуры

// См. подключение в ПослеНачалаРаботыСистемы.
// 
Процедура ОбработчикДействияСообщенияЭДО(Сообщение, Действие, ДополнительныеПараметры) Экспорт
	
	Если Действие = "СинхронизироватьЭДО" Тогда
		Оповестить("ВыполнитьСинхронизацию");
	ИначеЕсли Действие = "ПодписатьЭД" Или Действие = "ОтклоненАннулированЭД" Тогда
		Если ТипЗнч(Сообщение.Данные) <> Тип("Структура") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Неверный формат данных сообщения чата'"));
			Возврат; 
		КонецЕсли;
		ПараметрыФормы = Новый Структура("ФайлЭлектронногоДокумента", Сообщение.Данные.ЭлектронныйДокумент);
		ОткрытьЭДДляПросмотра(Сообщение.Данные.ЭлектронныйДокументооборот, ПараметрыФормы);
	ИначеЕсли  Действие = "ОткрытьЭД" Тогда
		ПерейтиПоНавигационнойСсылке(Сообщение.Данные);
	КонецЕсли;
	
КонецПроцедуры

// Подключает обработчик ожидания клиентского сеанса.
//
Процедура ПодключитьОповещенияЭДО()
	
	ОповещатьОНовыхЭД = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОповещатьОСобытияхЭДО();
	
	Если Не ОповещатьОНовыхЭД Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОповеститьОНовыхЭД", 15, Истина);
	
КонецПроцедуры

#КонецОбласти

Функция НовыйРезультатОперацииВСервисе1СЭДО() 
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Результат", Ложь);
	РезультатОперации.Вставить("КонтекстОперации", ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации());
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ВидОшибкиОтправкиИПолученияНетДоступаКСертификатам()
	
	Возврат "НетДоступаКСертификатам";
	
КонецФункции

Функция ПользовательОтказалсяОтАутентификации(Результат, УчетнаяЗапись) Экспорт
	
	ОтказОтАутентификации = Ложь;
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ОбработанныеУчетныеЗаписи") Тогда
		РезультатОперацииПоУчетнойЗаписи = Результат.ОбработанныеУчетныеЗаписи[УчетнаяЗапись];
		Если РезультатОперацииПоУчетнойЗаписи <> Неопределено 
			И РезультатОперацииПоУчетнойЗаписи.ПользовательОтказалсяОтОперации Тогда
			ОтказОтАутентификации = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтказОтАутентификации;
	
КонецФункции 

#Область Диагностика

// Открыть форму с подробной информацией об отправке и получении документов.
//
// Параметры:
//  ПараметрыДетализации - Структура - см. ОбменСКонтрагентамиСлужебныйКлиент.НовыеПараметрыДетализацииОперацийСДокументами.
//
Процедура ОткрытьФормуДетализацииОперацийСДокументами(ПараметрыДетализации) Экспорт
	
	#Если НЕ МобильныйКлиент Тогда
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.РезультатыОтправкиИПолученияДокументов",
			Новый Структура("ПараметрыДетализации", ПараметрыДетализации));
	#КонецЕсли
	
КонецПроцедуры

// Возвращает параметры детализации операций с документами
// 
// Возвращаемое значение:
// Структура - со свойствами:
//    * КонтекстОперации - Структура - см. ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации.
//    * ОбработанныеУчетныеЗаписи - Соответствие - обработанные учетные записи.
//    * РезультатыОтправкиПолучения - Структура - см. свойство ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации.
//
Функция НовыеПараметрыДетализацииОперацийСДокументами()
	
	ПараметрыДетализации = Новый Структура;
	ПараметрыДетализации.Вставить("КонтекстОперации", ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации());
	ПараметрыДетализации.Вставить("ОбработанныеУчетныеЗаписи", Новый Соответствие);
	ПараметрыДетализации.Вставить("РезультатыОтправкиПолучения", ПараметрыДетализации.КонтекстОперации.РезультатыОтправкиПолучения);
	
	Возврат ПараметрыДетализации;
	
КонецФункции

#КонецОбласти

Функция ТребуетсяУказаниеПричиныОтказаОтПриглашения(СпособОбмена) Экспорт
	
	Возврат СпособОбмена = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском");
	
КонецФункции

Процедура ПоказатьВопросОПрикрепленииСоглашенияНаРоуминг(Оповещение) Экспорт
	
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Письмо о выборе оператора не было прикреплено. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Открывает мастер настройки внутреннего электронного документооборота.
//
// Параметры:
//  Организация                - ОпределяемыйТип.Организация
//  ВидВнутреннегоДокумента    - СправочникСсылка.ВидыВнутреннихДокументовЭДО
//                             - См. НовоеОписаниеВидаВнутреннегоДокумента
//  ОповещениеОЗавершении      - ОписаниеОповещения - содержит описание процедуры, которая будет выполнена
//                             после завершения настройки со следующими параметрами:
//                               * Результат - Неопределено - форма была закрыта без завершения настройки.
//                                           - Структура:
//                                  ** - КлючНастройки - Структура:
//                                        ***  - Организация - ОпределяемыйТип.Организация
//                                        ***  - ВидВнутреннегоДокумента - СправочникСсылка.ВидыВнутреннихДокументовЭДО
//                                  ** - ВидЭлектроннойПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
//                                  ** - Маршрут - СправочникСсылка.МаршрутыПодписания
//                                  ** - Подписанты - Массив из СправочникСсылка.Пользователи
//                               * - ДополнительныеПараметры - Произвольный - значение, которое было указано 
//                                                при создании объекта ОписаниеОповещения.
//
Процедура НастроитьВнутреннийЭлектронныйДокументооборот(Организация, ВидВнутреннегоДокумента, ОповещениеОЗавершении = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидВнутреннегоДокумента", ВидВнутреннегоДокумента);
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.МастерНастройкиВнутреннегоДокументооборота",
		ПараметрыФормы,,,,, ОповещениеОЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Возвращает описание вида внутреннего документа, см. НастроитьВнутреннийЭлектронныйДокументооборот.
// 
// Возвращаемое значение:
//  Структура:
//   * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументов - (обязательный) - ссылка на объект учета
//                 - СправочникСсылка.ИдентификаторыОбъектовМетаданных - (обязательный) - идентификатор объекта учета
//   * ИдентификаторКомандыПечати - Строка - (необязательный)
Функция НовоеОписаниеВидаВнутреннегоДокумента() Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("ОбъектУчета", Неопределено);
	Описание.Вставить("ИдентификаторКомандыПечати", Неопределено);
	
	Возврат Описание;
	
КонецФункции 

Процедура ОповеститьОбИсправленииОшибкиНеустановленнойПоУмолчаниюПечатнойФормы(Организация, ИдентификаторОбъектаУчета) Экспорт
	
	ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиент.ВидОшибкиНеУстановленаПечатнаяФормаПоУмолчаниюВнутреннийЭДО();
	Отбор = Новый Соответствие;
	Отбор.Вставить("ВидОшибки", ВидОшибки);
	Отбор.Вставить("ДополнительныеДанные.Организация", Организация);
	Отбор.Вставить("ДополнительныеДанные.ИдентификаторОбъектаУчета", ИдентификаторОбъектаУчета);
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОповеститьОбИсправленииОшибок(Отбор);
	
КонецПроцедуры

Процедура СоздатьПроизвольныйДокументИзТабличного(ДокументОснование, ТабличныйДокумент) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументОснование", ДокументОснование);
	ПараметрыФормы.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	
	ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД",
		ПараметрыФормы,, ДокументОснование);
	
КонецПроцедуры

Процедура ОткрытьФормуПросмотраСтатусовДокументов(ПараметрыОбъектовУчета, БлокироватьОткрытиеМастераНастройки = Ложь) Экспорт
	
	ПараметрыПросмотра = ОбменСКонтрагентамиСлужебныйВызовСервера.ПараметрыПросмотраСтатусовЭлектронныхДокументов(ПараметрыОбъектовУчета);
	
	Если ПараметрыПросмотра.РежимПросмотра = "Документ" Тогда
		ЭлектронныйДокумент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПросмотра, "ЭлектронныйДокумент", Неопределено);
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			ОткрытьЭДДляПросмотра(ПараметрыПросмотра.ЭлектронныйДокумент);
		Иначе
			ПараметрыВыполненияКоманды = Новый Структура("БлокироватьОткрытиеМастераНастройки", БлокироватьОткрытиеМастераНастройки);
			ОткрытьАктуальныйЭД(ПараметрыОбъектовУчета[0].Ссылка, ПараметрыВыполненияКоманды);
		КонецЕсли;
	Иначе
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.СтатусыЭлектронныхДокументов",
			ПараметрыПросмотра,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОшибкуЗаявкиТакском(Ошибки, ТекстСообщения, ПутьКДанным = "") 
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("ТекстСообщения", ТекстСообщения);
	Ошибка.Вставить("ПутьКДанным", ПутьКДанным);
	Ошибки.Добавить(Ошибка);
	
КонецПроцедуры

#КонецОбласти










