
#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, см ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения().
//		Отказ - Булево.
//		Удержания
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьУдержания(ДанныеДляПроведения, Отказ, Удержания, ЗаписыватьДвижения = Ложь) Экспорт

	Если Удержания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдержанияПоСотрудникам = РезультатыРаспределенияУдержаний(ДанныеДляПроведения, Удержания);
	УчетНачисленнойЗарплаты.ЗарегистрироватьУдержания(ДанныеДляПроведения, Отказ, УдержанияПоСотрудникам);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РезультатыРаспределенияУдержаний(ДанныеДляПроведения, УдержанияПоСотрудникам)

	Движения 				= ДанныеДляПроведения.Движения;
	Организация 			= ДанныеДляПроведения.Организация;
	ПериодРегистрации 		= ДанныеДляПроведения.ПериодРегистрации;
	МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	ОкончательныйРасчет		= ДанныеДляПроведения.ОкончательныйРасчет;
	
	ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникам;
	ИсключаемыйРегистратор = ДвиженияНачисленийУдержаний.Отбор.Регистратор.Значение;
	
	ТаблицаУдержаний = ОтражениеЗарплатыВУчете.НоваяТаблицаРезультатРасчетаУдержаний();
	
	СтрокиУдержаний = Новый Соответствие;
	НоваяКоллекцияРаспределениеУдержаний = Неопределено;
	Если УдержанияПоСотрудникам <> Неопределено Тогда
		НоваяКоллекцияРаспределениеУдержаний = УдержанияПоСотрудникам.СкопироватьКолонки();
		ИдентификаторСтроки = 1;
		Для каждого СтрокаТЗ Из УдержанияПоСотрудникам Цикл
			Если СтрокаТЗ.Сумма <> 0 Тогда
				СтрокиУдержаний.Вставить(ИдентификаторСтроки, СтрокаТЗ);
				НоваяСтрока = ТаблицаУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.ВидУдержания 		= СтрокаТЗ.Удержание;
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаУдержаний, "ФизическоеЛицо", Истина);
	УдержанияМассив 	 = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаУдержаний, "ВидУдержания", Истина);
	
	УдалитьВТ = Новый Массив;
	
	ИмяВТРаспределениеНачислений = "ВТРаспределениеНачисленийТекущегоДокумента";
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, ИмяВТРаспределениеНачислений) Тогда
		УчетНачисленнойЗарплаты.СоздатьПустуюВТРаспределениеНачисленийТекущегоДокумента(МенеджерВременныхТаблиц);
		УдалитьВТ.Добавить(ИмяВТРаспределениеНачислений);
	КонецЕсли;
	
	// Получение данных для распределения, ДанныеДляРаспределения - структура
	// БазаВсеНачисления - таблица значений с базовыми начислениями
	// УжеУдержано - таблица значений, содержит данные об уже выполненных удержаниях по физическому лиц.
	ПараметрыПолученияДанных = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровПолученияДанныхДляРаспределенияУдержаний();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанных , ДанныеДляПроведения, "МенеджерВременныхТаблиц,Организация,ПериодРегистрации,ОкончательныйРасчет");
	ПараметрыПолученияДанных.ИмяВТДанныеТекущегоДокумента = ИмяВТРаспределениеНачислений;
	ИсключаемыеРегистраторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсключаемыйРегистратор);
	ДанныеДляРаспределения = ОтражениеЗарплатыВУчете.ДанныеДляРаспределенияУдержаний(ФизическиеЛицаМассив, УдержанияМассив, ИсключаемыеРегистраторы, ПараметрыПолученияДанных);
	
	БазовыеНачисления = ДанныеДляРаспределения.БазовыеНачисления;
	СтрокиУжеУдержано = ДанныеДляРаспределения.СтрокиУжеУдержано;
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	ПараметрыРаспределения = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровРаспределенияУдержаний();
	ПараметрыРаспределения.Организация 		 = Организация;
	ПараметрыРаспределения.ПериодРегистрации = ПериодРегистрации;
	ТаблицаРаспределения = ОтражениеЗарплатыВУчете.РаспределениеУдержанийПоРабочимМестамИСтатьям(ТаблицаУдержаний, БазовыеНачисления, СтрокиУжеУдержано, ПараметрыРаспределения);

	Для каждого ЭлементКоллекции Из СтрокиУдержаний Цикл
		Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
		СтрокиРаспределения = ТаблицаРаспределения.НайтиСтроки(Отбор);
		Если СтрокиРаспределения.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяКоллекцияРаспределениеУдержаний.Добавить(),ЭлементКоллекции.Значение);
		Иначе
			Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
				НоваяСтрока = НоваяКоллекцияРаспределениеУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции.Значение);
				НоваяСтрока.Сотрудник 		= СтрокаТЗ.Сотрудник;
				НоваяСтрока.Подразделение	= СтрокаТЗ.Подразделение;
				НоваяСтрока.СтатьяРасходов 	= СтрокаТЗ.СтатьяРасходов;
				НоваяСтрока.ВидДоходаИсполнительногоПроизводства = СтрокаТЗ.ВидДоходаИсполнительногоПроизводства;
				НоваяСтрока.Сумма 			= СтрокаТЗ.Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат НоваяКоллекцияРаспределениеУдержаний;
	
КонецФункции 

Функция ПравилаУчетаНачисленийСотрудников() Экспорт

	ПравилаУчетаНачислений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.ЯвляетсяДоходомВНатуральнойФорме
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|	КОНЕЦ КАК ГруппаНачисленияУдержанияВыплаты,
	|	НЕ Начисления.ЯвляетсяДоходомВНатуральнойФорме КАК УчитыватьВоВзаиморасчетах
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПравилаУчетаНачисления = Новый Структура;
		ПравилаУчетаНачисления.Вставить("ГруппаНачисленияУдержанияВыплаты", Выборка.ГруппаНачисленияУдержанияВыплаты);
		ПравилаУчетаНачисления.Вставить("УчитыватьВоВзаиморасчетах", Выборка.УчитыватьВоВзаиморасчетах);
		
		ПравилаУчетаНачислений.Вставить(Выборка.Ссылка, ПравилаУчетаНачисления);
		
	КонецЦикла;
	
	Возврат ПравилаУчетаНачислений;

КонецФункции 

Функция ЗапросВТНачисленныеДоходы(ИмяВТНачисленныеДоходы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияУдержанияПоСотрудникам.Период КАК МесяцНачисления,
	|	НачисленияУдержанияПоСотрудникам.Организация.ГоловнаяОрганизация КАК Организация,
	|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК ДокументОснование,
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК Начисление,
	|	НачисленияУдержанияПоСотрудникам.Сумма КАК Начислено,
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
	|				И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание ССЫЛКА Перечисление.ВидыОсобыхНачисленийИУдержаний
	|				И (НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты)
	|					ИЛИ НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму)
	|					ИЛИ НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности)
	|					ИЛИ НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка)
	|					ИЛИ НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
	|					ИЛИ НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОблагаетсяНДФЛ
	|ПОМЕСТИТЬ ВТНачисленныеДоходы
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыНачисленныхДоходов КАК ПериодыНачисленныхДоходов
	|		ПО (НачисленияУдержанияПоСотрудникам.Период МЕЖДУ ПериодыНачисленныхДоходов.НачалоПериода И ПериодыНачисленныхДоходов.ОкончаниеПериода)
	|			И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо = ПериодыНачисленныхДоходов.ФизическоеЛицо
	|ГДЕ
	|	(НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|			ИЛИ НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|				И (НачисленияУдержанияПоСотрудникам.НачислениеУдержание <> ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено)
	|					И НачисленияУдержанияПоСотрудникам.НачислениеУдержание <> ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету)))";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТНачисленныеДоходы", ИмяВТНачисленныеДоходы);
	
	Возврат Запрос;	
	
КонецФункции

#Область ПроцедурыИФункцииРаботыСОтчетами

// Формирование отчета Анализ начислений и удержаний.
//
Процедура ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
КонецПроцедуры

// Возвращает начисления в том порядке, в котором они должны быть выведены в отчете.
//
Функция ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	
	НомерКолонки = НачальныйНомерКолонки;
	Для каждого СтрокаНачисления Из Начисления Цикл
		СтрокаНачисления.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Возврат Начисления;
	
КонецФункции

// Возвращает удержания в том порядке, в котором они должны быть выведены в отчете.
//
Функция ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	
	НомерКолонки = НачальныйНомерКолонки;
	Для каждого СтрокаУдержания Из Удержания Цикл
		СтрокаУдержания.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Возврат Удержания;
	
КонецФункции

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НачисленоПовременно
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "НачисленоПовременно";
	НоваяСтрока.Заголовок = НСтр("ru='Повременно'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НДФЛ
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПользовательскоеУсловие = "ВидРасчета = Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "ВидРасчета <> Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)";
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// Аванс
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "Аванс";
	НоваяСтрока.Заголовок = НСтр("ru = 'Выдано за первую половину месяца (аванс)'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПользовательскоеУсловие = "ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса)";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "ВидРасчета <> Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса)";
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ИсполнительныйЛист
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний.ИсполнительныйЛист);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ИсполнительныйЛист";
	НоваяСтрока.Заголовок = НСтр("ru='Удержания по исполнительному листу'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 99;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля) Экспорт
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ДополнительныеПоляКадровыхДанныхСотрудников = КадровыйУчет.ПоляПредставленийКадровыхДанныхСотрудников();
		
		ДополнительныеПоля = Новый Структура;
		ДополнительныеПоля.Вставить("Представления_КадровыеДанныеСотрудниковАнализНачисленийИУдержаний", ДополнительныеПоляКадровыхДанныхСотрудников);
		
		Для Каждого СтрокаДополнительногоПоля Из ДополнительныеПоляКадровыхДанныхСотрудников Цикл
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
				СтрокаДополнительногоПоля,
				"КадровыеДанныеСотрудников",
				СтрокаДополнительногоПоля.ИмяПоля,
				СтрокаДополнительногоПоля.ПутьПоляСКД,
				СтрокаДополнительногоПоля.ЗаголовокПоляСКД);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПустоеЗначениеТерриторияНаЯзыкеЗапросов() Экспорт

	Возврат "НЕОПРЕДЕЛЕНО";

КонецФункции


#КонецОбласти

Функция ВидыДоходовИсполнительногоПроизводстваНачислений() Экспорт
	
	ВидыДоходовНачислений = Новый Соответствие;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		ВидыДоходовНачислений,
		Перечисления.ВидыОсобыхНачисленийИУдержаний.ВидыДоходовИсполнительногоПроизводства(),
		Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		ВидыДоходовНачислений,
		ПланыВидовРасчета.Начисления.ВидыДоходовИсполнительногоПроизводства(),
		Истина);
	
	Возврат ВидыДоходовНачислений
	
КонецФункции

#КонецОбласти