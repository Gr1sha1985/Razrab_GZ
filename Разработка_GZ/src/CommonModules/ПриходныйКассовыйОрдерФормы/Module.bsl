#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	УстановитьВидимостьСчетовУчета(Форма);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере(Форма);
		
		// Если документ скопирован и есть расчеты в у.е., пересчитаем суммы взаиморасчетов на дату документа
		Если Форма.ЕстьРасчетыВУсловныхЕдиницах И ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
			ПересчитатьСуммыВзаиморасчетов(Форма);
		КонецЕсли;
		
		УстановитьДеятельностьНаТорговомСборе(Форма);
	КонецЕсли;
	
	УстановитьУсловноеОформление(Форма);
	
	ВидимостьДоступностьЭлементовОднострочнойФормы(Форма);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, ПроверятьПатент(Форма));
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		Форма,
		"БП.Документ.ПриходныйКассовыйОрдер",
		"ФормаДокумента",
		НСтр("ru = 'Новости: Поступление наличных'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере(Форма);
	
	// Инициализируем свойства платежа
	ИнициализироватьСвойстваПлатежа(Форма,, Истина);
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		ПроверкаРеквизитовОрганизации.ПередЗаписьюНаСервере(
			Объект.Организация,
			Объект.Контрагент,
			Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации,
			Отказ,
			ПараметрыЗаписи);
	КонецЕсли;

КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	УстановитьСостояниеДокумента(Форма);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета(Форма));
	КонецЕсли;
	
	Если Форма.ПлательщикНПД Тогда
		ЧекиНПД.СохранитьЦенуУслугиНПД(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Объект = Форма.Объект;
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ПроверкаЗаполнения(Форма, Объект.Организация, Объект.Дата, ПроверятьПатент(Форма), Отказ);
	
КонецПроцедуры

Процедура ОбработкаОповещенияНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, ПроверятьПатент(Форма));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

Процедура РассчитатьКурсИСуммуВзаиморасчетов(Форма, СтрокаПлатежа)
	
	Объект = Форма.Объект;
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		СтрокаПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);
	
	СтрокаПлатежа.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатежа.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатежа, Форма);
	
КонецПроцедуры

Процедура ПерезаполнитьРасшифровкуПлатежа(Форма, ИзменениеОрганизации = Ложь) 
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СворачиватьТЧПриИзмененииОрганизации = Документы.ПриходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	Если ИзменениеОрганизации И НЕ СворачиватьТЧПриИзмененииОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежа(Форма);
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		
		РасшифровкаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
		
		// При изменении ключевых реквизитов не всегда требуется очищать информацию об услугах НПД.
		// Поэтому перед перезаполнением Расшифровки платежа запомним указанные услуги НПД и восстановим их.
		ШаблонЗаполнения = БанкИКассаФормы.ЭталонРасшифровкиПлатежа(
			Форма,
			РасшифровкаПлатежа,
			ВидимостьУслугиНПД(Форма));
		
		РасшифровкаПлатежа.Очистить();
		
		Для Каждого СтрокаШаблон Из ШаблонЗаполнения Цикл
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СтрокаШаблон);
			
			СтрокаПлатеж.СтавкаНДС = СтавкаНДСпоУмолчанию(Форма);
			
			ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа, , "УслугаНПД");
			
			ПриходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
			ПриходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
			ПриходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
			
			Если НЕ ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
				Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
			КонецЕсли;
			
			СчетаУчетаВДокументах.ЗаполнитьСтроки(Объект.РасшифровкаПлатежа, "РасшифровкаПлатежа", Объект, Документы.ПриходныйКассовыйОрдер);
			ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, СтрокаПлатеж);
		КонецЦикла;
		
	Иначе
		
		РасшифровкаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
		РасшифровкаПлатежа.Очистить();
		
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция СтавкаНДСпоУмолчанию(Форма)
	
	ПлательщикНДС = Форма.ПлательщикНДС И Не РозничнаяВыручкаЕНВД(Форма);
	Возврат УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Форма.Объект.Дата, ПлательщикНДС);
	
КонецФункции

Функция РозничнаяВыручкаЕНВД(Форма)
	
	Возврат Форма.Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка
		И (Форма.УчетВПродажныхЦенах И Форма.НТТНаЕНВД
		Или Не Форма.УчетВПродажныхЦенах И Форма.РозничнаяТорговляОблагаетсяЕНВД);
	
КонецФункции

Процедура ПодготовитьФормуНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	УстановитьПризнакНТТНаЕНВД(Форма);
	
	Если Форма.ПрименяетсяУСНПатент Тогда
		Форма.ПрименяетсяНесколькоПатентов = Справочники.Патенты.ИспользуетсяНесколькоПатентов(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации = 
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	Форма.ОсновнойБанковскийСчетОрганизацииЗаполнен =
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	Форма.ТекущаяДатаДокумента           = Объект.Дата;
	Форма.ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Форма.ОплатаВВалюте = ЗначениеЗаполнено(Объект.ВалютаДокумента) И Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета;
	УстановитьКурсДокумента(Форма);
	
	УстановитьЗаголовкиКолонокРасшифровкаПлатежа(Форма);
	
	БанкИКассаФормы.ПодготовитьРасчетыПриОплате(Форма);
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		ПриходныйКассовыйОрдерФормыКлиентСервер.ИменаЭлементовОтраженияДохода());
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		
		Если Форма.ПлательщикНПД Тогда
			Форма.СведенияОЧекеНПД = РегистрыСведений.ЧекиНПД.СведенияОЧеке(Форма.Ссылка);
		КонецЕсли;
		
		Если Форма.СвойстваПлатежа = Неопределено
			И Форма.РасшифровкаПлатежа.Количество() > 0 Тогда
			Форма.СвойстваПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
			Если ЗначениеЗаполнено(Форма.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств) Тогда
				Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = Форма.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Форма.ВестиУчетПоДоговорам Тогда
			ПараметрыОбъекта = ПриходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
			Форма.СвойстваПлатежа = ПриходныйКассовыйОрдерФормы.СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Ложь);
				
			ПараметрыЗаполненияСчетовУчета = ПриходныйКассовыйОрдерФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
				"Контрагент", Объект, Форма.СвойстваПлатежа);
			СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
				Документы.ПриходныйКассовыйОрдер,
				ПараметрыЗаполненияСчетовУчета.КЗаполнению,
				Объект,
				"РасшифровкаПлатежа",
				Форма.СвойстваПлатежа,
				Ложь);
		КонецЕсли;
		
	Иначе
		
		Если Форма.ПлательщикНПД Тогда
			Форма.СведенияОЧекеНПД = РегистрыСведений.ЧекиНПД.СведенияОЧеке(Объект.Ссылка);
		КонецЕсли;
		
		Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если ВидОперацииСТабличнойЧастью(Объект.ВидОперации) Тогда
				ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина);
			КонецЕсли;
		КонецЕсли;
		
		УстановитьСостояниеДокумента(Форма);
		
		УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма);
		ПриходныйКассовыйОрдерФормыКлиентСервер.УстановитьПараметрыВыбораВалютыДокумента(Форма);
		ПриходныйКассовыйОрдерФормыКлиентСервер.УстановитьОграничениеТипаКонтрагента(Форма);
		
		БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
			Форма, Объект, ПриходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма));
		
	КонецЕсли;
	
	// Заполнение свойств элементов формы
	
	Если Объект.БезЗакрывающихДокументов Тогда
		ПараметрыОбъекта      = ПриходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
		Форма.СвойстваПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(
			ПараметрыОбъекта, Истина);
		Форма.СвойстваПлатежа.ПорядокОтраженияАванса = УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
		
		ПараметрыЗаполненияСчетовУчета = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
			"РасшифровкаПлатежа.ДоговорКонтрагента", Объект, Форма.СвойстваПлатежа);
		СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
			Документы.ПриходныйКассовыйОрдер,
			ПараметрыЗаполненияСчетовУчета.КЗаполнению,
			Объект,
			"РасшифровкаПлатежа",
			Форма.СвойстваПлатежа,
			Ложь);
	КонецЕсли;
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
	
	УправлениеЭлементамиОтраженияВУСННаСервере(Форма);
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	ИзменитьУсловияФормированияСпискаВыбораДоговораСКонтрагентом(Форма);
	
	// Управление внешним видом формы
	УстановитьВидимостьСтраницНаСервере(Форма);
	
	БанкИКассаФормы.НастроитьФормуДокументаДляРежимаИнтеграцииСБанком(Форма);
	ПечатьФискальныхДокументовФормыКлиентСервер.ПодготовитьФормуНаСервере(Форма);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура УстановитьПризнакНТТНаЕНВД(Форма)
	
	ПараметрыОбъекта = ПриходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	Форма.НТТНаЕНВД = Форма.Объект.ВыручкаСНТТ И НТТнаЕНВДилиПатенте(ПараметрыОбъекта);
	
КонецПроцедуры

Процедура УстановитьСостояниеДокумента(Форма)
	
	Форма.СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Форма.Объект);
	
КонецПроцедуры

Процедура УстановитьВидимостьСтраницНаСервере(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ФормаРасшифровкиПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма);
	ФормаДокументаОднострочная = ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	
	Если НЕ ФормаРасшифровкиПлатежа Тогда
		Элементы.ГруппаПолучениеНаличныхВБанке.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке);
		Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Не ВидимостьАналитики(Объект.ВидОперации);
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ЛичныеСредстваПредпринимателя
			Или Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
			Элементы.Контрагент.Видимость = Ложь;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
			Элементы.Контрагент.Видимость = Не Объект.БезЗакрывающихДокументов
				И Справочники.Склады.ИспользуетсяНесколькоСкладов();
		Иначе
			Элементы.Контрагент.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ГруппаСтраницы = ?(ФормаДокументаОднострочная, Элементы.ГруппаАналитика, Элементы.ГруппаСтраницы);
	
	ГруппаСтраницы.Видимость = ВидимостьАналитики(Объект.ВидОперации);
	Если НЕ ГруппаСтраницы.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить(Элементы.ГруппаРозничнаяВыручка);
	МассивГрупп.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	Если НЕ ФормаРасшифровкиПлатежа Тогда
		МассивГрупп.Добавить(Элементы.ГруппаПрочееСтраница);
	КонецЕсли;
	Если ФормаДокументаОднострочная Тогда
		МассивГрупп.Добавить(Элементы.ГруппаБезЗакрывающихДокументов);
		МассивГрупп.Добавить(Элементы.ГруппаРозничнаяВыручкаБезЗакрывающихДокументов);
	КонецЕсли;
	
	ТекущаяГруппа = Неопределено;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		Если ФормаДокументаОднострочная Тогда
			ТекущаяГруппа = ?(Объект.БезЗакрывающихДокументов, 
				Элементы.ГруппаРозничнаяВыручкаБезЗакрывающихДокументов, 
				Элементы.ГруппаРозничнаяВыручка);
		ИначеЕсли РасшифровкаДоступна(Форма) Тогда
			ТекущаяГруппа = Элементы.ГруппаРозничнаяВыручка;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		ТекущаяГруппа = Элементы.Найти("ГруппаПрочееСтраница");
	ИначеЕсли ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Если ФормаДокументаОднострочная Тогда
			ТекущаяГруппа = ?(Объект.БезЗакрывающихДокументов, 
				Элементы.ГруппаБезЗакрывающихДокументов, 
				Элементы.ГруппаРасчетыСКонтрагентами);
		ИначеЕсли РасшифровкаДоступна(Форма) Тогда
			ТекущаяГруппа = Элементы.ГруппаРасчетыСКонтрагентами;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяГруппа <> Неопределено 
		И НЕ ФормаДокументаОднострочная Тогда
		ГруппаСтраницы.ТекущаяСтраница = ТекущаяГруппа;
	КонецЕсли;
	
	Для каждого Группа Из МассивГрупп Цикл
		Группа.Видимость = Группа = ТекущаяГруппа;
	КонецЦикла;
	
	Если ФормаРасшифровкиПлатежа Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьКнопкиПечатиЧека(Форма);
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Элементы.РасшифровкаПлатежаГруппаПогашениеЗадолженности.Видимость = УчетВзаиморасчетов.ПравоУправленияЗачетомАвансов();
		Если ФормаДокументаОднострочная Тогда
			ПриходныйКассовыйОрдерФормыКлиентСервер.ВидимостьДоступностьПолейПриИзмененииСпособаПогашения(Форма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьКнопкиПечатиЧека(Форма)
	
	Элементы = Форма.Элементы;
	НапечататьЧек = Элементы.Найти("НапечататьЧек");
	Если НапечататьЧек <> Неопределено Тогда
		Элементы.НапечататьЧек.Видимость = Элементы.НапечататьЧек.Видимость 
			И ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование)
			И Не Форма.ПлательщикНПД;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ОбщаяКомандаФискальныеОперацииПоДокументу", "Видимость", Не Форма.ПлательщикНПД);
	
КонецПроцедуры

Функция ВидимостьАналитики(ВидОперации)
	
	Возврат (ВидОперации <> Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке
		И ВидОперации <> Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица
		И ВидОперации <> Перечисления.ВидыОперацийПКО.ЛичныеСредстваПредпринимателя
		И ВидОперации <> Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником);
	
КонецФункции

Процедура УстановитьФункциональныеОпцииФормы(Форма)
	
	Объект = Форма.Объект;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма);
	
	Форма.ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	Форма.ПлательщикНПД = УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(Объект.Организация, Объект.Дата);
	
	Форма.ПрименяетсяОсобыйПорядокНалогообложения = УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
	Форма.ПлательщикЕНВД                          = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, Объект.Дата);
	Форма.РозничнаяТорговляОблагаетсяЕНВД         = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Объект.Организация, Объект.Дата);
	
	Форма.ПрименениеУСН                 = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация,       Объект.Дата);
	Форма.ПрименениеУСНДоходы           = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	Форма.ПрименяетсяУСНПатент          = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	Форма.РаздельныйУчетУСНТорговыйСбор = УчетнаяПолитика.РаздельныйУчетТорговыйСборПриУСН(Объект.Организация, Объект.Дата);
	Форма.ПрименяетсяТолькоУСНПатент    = УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата);
	
	Форма.УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата) =
		Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	Форма.ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
КонецПроцедуры

Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	РасшифровкаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	НазваниеТабличнойЧасти = ПриходныйКассовыйОрдерФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	ЭтоОднострочнаяФорма = ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	КоличествоСтрок = РасшифровкаПлатежа.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = Ложь;
	МассивДоговоров   = РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
	Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].РасчетыВУсловныхЕдиницах;
			
			Форма.ЕстьРасчетыВУсловныхЕдиницах = Форма.ЕстьРасчетыВУсловныхЕдиницах
				ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ПорядокОтраженияАванса) И Форма.ОтражениеАвансаВидимость Тогда
			СтрокаПлатеж.ОтражениеАвансаПредставление = БанкИКассаФормыКлиентСервер.ВариантОтраженияДоходовПредставление(
				СтрокаПлатеж.ПорядокОтраженияАванса,
				БанкИКассаФормыКлиентСервер.ВариантыОтраженияДоходов(Форма));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ПорядокОтраженияАванса) И Форма.ОтражениеДоходаВидимость Тогда
			СтрокаПлатеж.ОтражениеДоходаПредставление = БанкИКассаФормыКлиентСервер.ВариантОтраженияДоходовПредставление(
				СтрокаПлатеж.ПорядокОтраженияАванса,
				БанкИКассаФормыКлиентСервер.ВариантыОтраженияДоходов(Форма));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоОднострочнаяФорма И КоличествоСтрок = 1 Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, РасшифровкаПлатежа[0]);
	Иначе
		Если Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
			Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
				ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Не СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Возврат;
	КонецЕсли;
	
	// Счет кассы
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	
	СчетаИсключений = Новый Массив;
	СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументы);
	СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал);
	
	СчетаКассы = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь,, СчетаИсключений);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаКассы)));
	Если НЕ ПриходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Ложь));
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетКасса.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	// Счет банка
	
	СчетаБанка = Документы.РасходныйКассовыйОрдер.СчетаБанка();
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаБанка)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

Процедура УстановитьКурсДокумента(Форма)
	Объект = Форма.Объект;
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Форма.КурсДокумента      = СтруктураКурса.Курс;
	Форма.КратностьДокумента = СтруктураКурса.Кратность;
	
	// Если валюта договора совпадает с валютой документа, то перезаполним курсы взаиморасчетов
	
	ТЧРасшифровкаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Для каждого СтрокаРасшифровкиПлатежа Из ТЧРасшифровкаПлатежа Цикл
		
		Если Объект.ВалютаДокумента = СтрокаРасшифровкиПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов
			И НЕ СтрокаРасшифровкиПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			
			СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
			СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВидОперацииОбработатьИзменение(Форма, ПричиныИзменения)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПричиныИзменения.Добавить("ВидОперации");
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.УстановитьОграничениеТипаКонтрагента(Форма);
	Если Элементы.Контрагент.ОграничениеТипа.Типы().Количество() = 0 Тогда
		Объект.Контрагент = Неопределено;
	Иначе
		Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
	КонецЕсли;
	Если Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады")
		И (Не Справочники.Склады.ИспользуетсяНесколькоСкладов()
			Или Объект.БезЗакрывающихДокументов) Тогда
		Объект.Контрагент = Справочники.Склады.ПустаяСсылка();
		Объект.ВыручкаСНТТ = Ложь;
	КонецЕсли;
	
	БанкИКассаФормы.УстановитьРасчетыПриОплате(Форма);
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		ПриходныйКассовыйОрдерФормыКлиентСервер.ИменаЭлементовОтраженияДохода());
	
	НастроитьСчетаУчетаАвансаВТабличнойЧасти(Форма);
	
	Объект.Основание = ""; // очищаем основание при смене вида операции
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		ПараметрыОбъекта = ПриходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
		НовыеПараметры   = НовыеПараметрыПриИзмененииВидаОперации(ПараметрыОбъекта);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
			ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры,
				"ВалютаДокумента, Основание, СтавкаНДС");
			ЗаполнитьЗначенияСвойств(Форма, НовыеПараметры, "КурсДокумента, КратностьДокумента, НТТНаЕНВД");
			ИнициализироватьСвойстваПлатежа(Форма, Истина);
			ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры, "СтатьяДвиженияДенежныхСредств, СтавкаНДС");
			Форма.СвойстваПлатежа.ПорядокОтраженияАванса = УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(
				ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
			ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Контрагент, ПринятоОт, Основание");
		Иначе
			ИнициализироватьСвойстваПлатежа(Форма, Истина);
			ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
			Форма.СвойстваПлатежа.ПорядокОтраженияАванса = УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(
				ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
			ПриходныйКассовыйОрдерФормыКлиентСервер.УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ОплатаВВалюте И НЕ ПриходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		Форма.ОплатаВВалюте = Ложь;
		Объект.ВалютаДокумента = Форма.ВалютаРегламентированногоУчета;
		ПриходныйКассовыйОрдерФормыКлиентСервер.УстановитьПараметрыВыбораВалютыДокумента(Форма);
		ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения);
	КонецЕсли;
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ИзменитьПараметрыВыбораСчетаКассы(Форма);
	ПриходныйКассовыйОрдерФормыКлиентСервер.ИзменитьПараметрыВыбораСчетаБанка(Форма);
	
	ЗаполнитьСчетаУчета(Форма, "ВидОперации", ПричиныИзменения);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			Форма, Объект, ПриходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма));
			
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	ПерезаполнитьСтатьюДДС(Форма);
	
	УстановитьОтражениеДоходов(Форма);
	
	ЗаполнитьОтражениеВУСН(Форма, Истина, Истина);
	УправлениеЭлементамиОтраженияВУСННаСервере(Форма);
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	УстановитьВидимостьСтраницНаСервере(Форма);
	
	ОбновитьУсловноеОформление(Форма);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, ПроверятьПатент(Форма));
	
КонецПроцедуры

Процедура ПроверитьВидОперацииОрганизации(Форма, ПричиныИзменения)
	Объект = Форма.Объект;
	ОтборВидовОпераций = Новый Структура("Организация", Объект.Организация);
	ДоступныеОперации  = Перечисления.ВидыОперацийПКО.ДопустимыеЗначения(ОтборВидовОпераций);
	
	Если ДоступныеОперации.Количество() > 0
		И ДоступныеОперации.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		
		Объект.ВидОперации = ДоступныеОперации[0].Значение;
		ВидОперацииОбработатьИзменение(Форма, ПричиныИзменения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОплатаВВалютеПриИзмененииСервер(Форма, ПараметрыОбъекта, НовыеПараметры, ПричиныИзменения)
	
	Объект = Форма.Объект;
	ПараметрыОбъекта.ОплатаВВалюте = НовыеПараметры.ОплатаВВалюте;
	
	ЗаполнитьЗначенияСвойств(Форма, НовыеПараметры, "ОплатаВВалюте");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Контрагент, ВалютаДокумента, ПринятоОт");
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ВалютаДокумента");
	КонецЕсли;
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ИзменитьПараметрыВыбораСчетаБанка(Форма);
	
КонецПроцедуры

Процедура ИзменитьУсловияФормированияСпискаВыбораДоговораСКонтрагентом(Форма)
	Объект = Форма.Объект;
	Форма.ПредлагатьНовыйДоговор = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя И НЕ Форма.ОплатаВВалюте И Форма.ВестиУчетПоДоговорам Тогда
		Форма.ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтражениеДоходов(Форма, ИзменениеДаты = Ложь) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка И Объект.ВыручкаСНТТ И Форма.УчетВПродажныхЦенах Тогда
		Если ИзменениеДаты Тогда
			УчетПСН.ДатаПриИзменении(Объект);
		Иначе
			ЗаполнитьЗначенияСвойств(Объект, УчетПСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
		КонецЕсли;
		
		УстановитьДеятельностьНаТорговомСборе(Форма);
	Иначе
		Если Объект.ДеятельностьНаТорговомСборе Тогда
			Объект.ДеятельностьНаТорговомСборе = Ложь;
		КонецЕсли;
		
		Если Объект.ДеятельностьНаПатенте Тогда
			Объект.ДеятельностьНаПатенте = Ложь;
			Объект.Патент                = Справочники.Патенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнитьСтатьюДДС(Форма)
	
	Объект = Форма.Объект;
	
	Если НЕ ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Объект.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(Объект.ВидОперации);
	КонецЕсли;
	
КонецПроцедуры

Функция ОплаченныеСчета(Форма)
	Объект = Форма.Объект;
	ОплаченныеСчета = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		УникальныеЗначения = Новый Соответствие;
		РасшифровкаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
		
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
			Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
				ОплаченныеСчета.Добавить(СчетНаОплату);
				УникальныеЗначения.Вставить(СчетНаОплату, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОплаченныеСчета;
	
КонецФункции

Процедура ЗаполнитьОтражениеВУСН(Форма, ЗаполнитьСуммы = Истина, ЗаполнитьСодержание = Ложь) Экспорт
	
	Объект = Форма.Объект;
	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
	
	Если ЗаполнитьСуммы Тогда
		НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Объект, ПараметрыУСН);
	КонецЕсли;
	
	Если ЗаполнитьСодержание И УчетУСН.СодержаниеУСНРедактируетсяПользователем(Объект) Тогда
		НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(Объект, ПараметрыУСН);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения) Экспорт
	
	Объект = Форма.Объект;
	ПричиныИзменения.Добавить("ВалютаДокумента");
	
	ПараметрыОбъекта = ПриходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма); // Текущие значения реквизитов объекта
	НовыеПараметры   = НовыеПараметрыПриИзмененииВалютыДокумента(ПараметрыОбъекта); // Возможно, изменятся: курс, кратность, ОплатаВВалюте
	
	Если НовыеПараметры.Свойство("ОплатаВВалюте") Тогда
		ОплатаВВалютеПриИзмененииСервер(Форма, ПараметрыОбъекта, НовыеПараметры, ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма, НовыеПараметры, "КурсДокумента, КратностьДокумента");
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Контрагент, ПринятоОт");
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежа(Форма, Истина);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
	
	ЗаполнитьСчетаУчета(Форма, "ВалютаДокумента", ПричиныИзменения);
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	ЗаполнитьОтражениеВУСН(Форма, Истина, Ложь);
	ПриходныйКассовыйОрдерФормыКлиентСервер.УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
	
	ИзменитьУсловияФормированияСпискаВыбораДоговораСКонтрагентом(Форма);

	УстановитьЗаголовкиКолонокУСН(Форма);
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура СчетКассаПриИзмененииСервер(Форма) Экспорт
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("СчетКасса");
	
	ПараметрыОбъекта = ПриходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаКассы(ПараметрыОбъекта);
	
	Если НовыеПараметры.ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		ОплатаВВалютеПриИзмененииСервер(Форма, ПараметрыОбъекта, НовыеПараметры, ПричиныИзменения);
		ПриходныйКассовыйОрдерФормыКлиентСервер.УстановитьПараметрыВыбораВалютыДокумента(Форма);
		ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, "СчетКасса", ПричиныИзменения);
	
КонецПроцедуры

Процедура КонтрагентПриИзмененииСервер(Форма) Экспорт
	Объект = Форма.Объект;
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Контрагент");
	
	ПараметрыОбъекта = ПриходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта);
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
			ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ВыручкаСНТТ, СтавкаНДС");
			ЗаполнитьЗначенияСвойств(Форма, НовыеПараметры, "НТТНаЕНВД");
		Иначе
			ИнициализироватьСвойстваПлатежа(Форма, Истина);
			ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
		КонецЕсли;
		УстановитьОтражениеДоходов(Форма);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ПринятоОт");
	
	ЗаполнитьСчетаУчета(Форма, "Контрагент", ПричиныИзменения);
	
	Если Форма.ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСН(Форма);
	КонецЕсли;
	УправлениеЭлементамиОтраженияВУСННаСервере(Форма);
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	УправлениеФормой(Форма);
	
	ИзменитьУсловияФормированияСпискаВыбораДоговораСКонтрагентом(Форма);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, ПроверятьПатент(Форма));
	
КонецПроцедуры

Процедура ОрганизацияПриИзмененииСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Организация");
	
	УстановитьФункциональныеОпцииФормы(Форма);
	УстановитьПризнакНТТНаЕНВД(Форма);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
			Форма, Объект, ПриходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма));
		
	КонецЕсли;
	
	ПараметрыОбъекта = ПриходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта, ПричиныИзменения);
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Контрагент, ПринятоОт, ПодразделениеОрганизации");
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ПодразделениеОрганизации");
	КонецЕсли;
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.УстановитьПодразделениеКт(Форма);
	
	ИнициализироватьСвойстваПлатежа(Форма, Истина);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
	
	ПроверитьВидОперацииОрганизации(Форма, ПричиныИзменения);
	ЗаполнитьСчетаУчета(Форма, "Организация", ПричиныИзменения);
	
	БанкИКассаФормы.УстановитьРасчетыПриОплате(Форма);
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		ПриходныйКассовыйОрдерФормыКлиентСервер.ИменаЭлементовОтраженияДохода());
	
	НастроитьСчетаУчетаАвансаВТабличнойЧасти(Форма);
	
	УстановитьОтражениеДоходов(Форма);
	
	УправлениеЭлементамиОтраженияВУСННаСервере(Форма);
	
	ПерезаполнитьРасшифровкуПлатежа(Форма, Истина);
	
	ЗаполнитьОтражениеВУСН(Форма, Истина, Истина);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, ПроверятьПатент(Форма));
	
	УправлениеФормой(Форма);
	
	ИзменитьУсловияФормированияСпискаВыбораДоговораСКонтрагентом(Форма);
	
КонецПроцедуры

Процедура ДатаПриИзмененииСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	УстановитьПризнакНТТНаЕНВД(Форма);
	
	БанкИКассаФормы.УстановитьРасчетыПриОплате(Форма);
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		ПриходныйКассовыйОрдерФормыКлиентСервер.ИменаЭлементовОтраженияДохода());
	
	УстановитьКурсДокумента(Форма);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		СчетОперационнойКассы = Неопределено;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			СчетОперационнойКассы = Документы.ПриходныйКассовыйОрдер.СчетКассыИзОРП(Объект.ДокументОснование);
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетОперационнойКассы) Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом = СчетОперационнойКассы;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ПрименениеУСН ИЛИ Форма.ПрименяетсяОсобыйПорядокНалогообложения Тогда
		ИнициализироватьСвойстваПлатежа(Форма);
		Форма.СвойстваПлатежа.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
	ПересчитатьСуммыВзаиморасчетов(Форма);
	
	УстановитьОтражениеДоходов(Форма, Истина);
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Дата");
	
	ЗаполнитьСчетаУчета(Форма, "Дата", ПричиныИзменения);
	УстановитьВидимостьСчетовУчета(Форма);
	
	ЗаполнитьОтражениеВУСН(Форма);
	УправлениеЭлементамиОтраженияВУСННаСервере(Форма);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, ПроверятьПатент(Форма));
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ВидОперацииПриИзмененииСервер(Форма) Экспорт
	
	УстановитьВидимостьСчетовУчета(Форма);
	
	ВидОперацииОбработатьИзменение(Форма, Новый Массив);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ОбработатьИзмененияВОрганизацииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	Форма.ОсновнойБанковскийСчетОрганизацииЗаполнен =
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке И
		ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(Форма, Объект.Организация);
	
КонецПроцедуры

Процедура УправлениеФормой(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		НастроитьЭлементыДляНПД(Форма);
		ПриходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
		Возврат;
	КонецЕсли;
	
	Элементы.РасчетыПриОплате.Видимость = Форма.РасчетыПриОплатеВидимость;
	БанкИКассаФормы.ЗаполнитьВариантыРасчетовПриОплате(
		Элементы.РасчетыПриОплате.СписокВыбора,
		Объект.ВидОперации);
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке
		И ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(Форма, Объект.Организация);
		
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Элементы.ВалютаДокумента.Доступность = Форма.ОплатаВВалюте И ПриходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации);
	Иначе
		Элементы.ВалютаДокумента.Доступность = ПриходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка
		И Объект.ВыручкаСНТТ И Форма.УчетВПРодажныхЦенах Тогда
		
		Элементы.Патент.Доступность = Объект.ДеятельностьНаПатенте ИЛИ Форма.ПрименяетсяТолькоУСНПатент;
		Если Форма.ПрименениеУСН Тогда
			Элементы.РозничнаяВыручкаДоходыУСН.Видимость = НЕ Объект.ДеятельностьНаПатенте;
			Если НЕ Форма.ПрименениеУСНДоходы Тогда
				Элементы.ГруппаРозничнаяВыручкаРасходыУСН.Видимость = НЕ Объект.ДеятельностьНаПатенте;
				Элементы.РозничнаяВыручкаНДСУСН.Доступность         = Объект.Графа7_УСН <> 0;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Элементы.Контрагент.Видимость = ПриходныйКассовыйОрдерФормыВызовСервера.ВидимостьБанковскогоСчета(Объект.Организация);
		ИначеЕсли НЕ Элементы.Контрагент.Видимость Тогда
			Элементы.Контрагент.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаРеквизитыПечатнойФормы", "Видимость", ПолучитьФункциональнуюОпцию("ИспользуетсяКассоваяКнига"));
	
	НастроитьЭлементыДляНПД(Форма);
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаголовокГруппыРеквизитовПечатнойФормы(Форма);
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.СформироватьПрочееТекстДоходыУСН(Форма);
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
	
	ВидимостьДоступностьЭлементовОднострочнойФормы(Форма);
	
КонецПроцедуры

Процедура НастроитьЭлементыДляНПД(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ВидимостьЭлементовНПД = Форма.ПлательщикНПД И ЕстьУслугиНПД(Объект.ВидОперации);
	ДоступнаИнтеграция = ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые");
	ЧекСформирован = Не ЧекиНПДКлиентСервер.НужноНачатьФормированиеЧека(Форма.СведенияОЧекеНПД);
	ВидимостьУслугиНПД = ВидимостьУслугиНПД(Форма);
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		
		Элементы.РасшифровкаПлатежаУслугаНПД.Видимость = ВидимостьУслугиНПД;
		Элементы.РасшифровкаВыручкиУслугаНПД.Видимость = ВидимостьУслугиНПД;
		
	Иначе
		
		НесколькоСтрокВРасшифровке = Объект.РасшифровкаПлатежа.Количество() > 1;
		
		Элементы.ГруппаЧекНПД.Видимость     = ВидимостьЭлементовНПД;
		Элементы.НадписьСтавкаНПД.Видимость = ВидимостьЭлементовНПД;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "УслугаНПД", "Видимость", ВидимостьУслугиНПД И Не НесколькоСтрокВРасшифровке);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "РасшифровкаПлатежаУслугаНПД", "Видимость", ВидимостьУслугиНПД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "РасшифровкаВыручкиУслугаНПД", "Видимость", ВидимостьУслугиНПД);
		
		Если ВидимостьЭлементовНПД Тогда
			
			Элементы.ГруппаЧекНПДКнопка.Видимость = Не ЧекСформирован И ДоступнаИнтеграция;
			Элементы.ДекорацияЧекНПД.Видимость = ЧекСформирован;
			
			Если ЧекСформирован Тогда
				Элементы.ДекорацияЧекНПД.Заголовок = Форма.СведенияОЧекеНПД.ОписаниеЧека;
			КонецЕсли;
			
			Элементы.ГруппаЧекНПДКнопка.Доступность = Не Форма.ТолькоПросмотр;
			
			Элементы.НадписьСтавкаНПД.Заголовок = 
				СтрШаблон(НСтр("ru = 'Ставка налога: %1%%'"),
					ИнтеграцияСПлатформойСамозанятые.СтавкаНПД(Объект.Контрагент));
			
			Элементы.ГруппаЧекОжидаетОтправкиВФНС.Видимость = 
				ЧекиНПДКлиентСервер.ЧекОжидаетОтправкиВФНС(Форма.СведенияОЧекеНПД);
			
		КонецЕсли;
		
		УстановитьВидимостьКнопкиПечатиЧека(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтатусОфлайнЧекаНПД(Форма) Экспорт
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Форма.СведенияОЧекеНПД = РегистрыСведений.ЧекиНПД.СведенияОЧеке(Объект.Ссылка);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ВидимостьДоступностьЭлементовОднострочнойФормы(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если НЕ ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	НазваниеТабличнойЧасти = ПриходныйКассовыйОрдерФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	
	РасчетыПоКредитамИЗаймам        = ЭтоРасчетыПоКредитамИЗаймам(Объект.ВидОперации);
	Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	Элементы.РасшифровкаПлатежаСпособПогашенияЗадолженности.Видимость = НЕ РасчетыПоКредитамИЗаймам;
	Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость                    = НЕ РасчетыПоКредитамИЗаймам;
	Элементы.РасшифровкаПлатежаСуммаНДС.Видимость                     = НЕ РасчетыПоКредитамИЗаймам;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость = НЕ РасчетыПоКредитамИЗаймам;
	КонецЕсли;
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.ВидимостьДоступностьПолейПриИзмененииСпособаПогашения(Форма);
		БанкИКассаФормыКлиентСервер.УстановитьВидимостьПолейГруппыБезЗакрывающихДокументов(Форма, НазваниеТабличнойЧасти);
		БанкИКассаФормыКлиентСервер.УстановитьВидимостьОтраженияАванса(Форма, НазваниеТабличнойЧасти);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		Элементы.РасшифровкаВыручкиСуммаНДС.ТолькоПросмотр = Форма.РасшифровкаПлатежаСтавкаНДС = Перечисления.СтавкиНДС.НДС0
			Или Форма.РасшифровкаПлатежаСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Элементы.ГруппаРасчетыВУЕ.Видимость = Форма.ЕстьРасчетыВУсловныхЕдиницах;
	
	Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = 
		Форма.РасшифровкаПлатежаСпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать;
		
	ПриходныйКассовыйОрдерФормыКлиентСервер.ДоступностьСтавкиНДС(Форма);
	
	ОтобразитьГиперссылкуПерейтиВТаблицу(Форма);
	
КонецПроцедуры

Процедура ОтобразитьГиперссылкуПерейтиВТаблицу(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если НЕ ВидОперацииСТабличнойЧастью(Объект.ВидОперации) Тогда
		ВключитьВидимостьСсылкиНаПлатеж(Элементы, Ложь, Ложь, ВидимостьУслугиНПД(Форма));
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок          = Объект.РасшифровкаПлатежа.Количество();
	ГруппаРасшифровкаПлатежа = Элементы[ГруппаРасшифровкаПлатежа(Объект.ВидОперации, Объект.БезЗакрывающихДокументов)];
	ВидимостьУслугиНПД = ВидимостьУслугиНПД(Форма);
	Если КоличествоСтрок = 1 Тогда
		Если НЕ Объект.БезЗакрывающихДокументов Тогда
			ГруппаРасшифровкаПлатежа.Видимость = Истина;
		КонецЕсли;
		
		НетДопАналитикиВБезЗакрывающих = Объект.БезЗакрывающихДокументов
			И Не (Форма.ОтражениеДоходаВидимость
				Или ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств"));
		Если Не ВидимостьУслугиНПД И НетДопАналитикиВБезЗакрывающих Тогда
			ВключитьВидимостьСсылкиНаПлатеж(Элементы, Ложь, Ложь, ВидимостьУслугиНПД);
		Иначе
			ВключитьВидимостьСсылкиНаПлатеж(Элементы, Ложь, Истина, ВидимостьУслугиНПД);
		КонецЕсли;
	Иначе
		ГруппаРасшифровкаПлатежа.Видимость = Ложь;
		ПараметрыПредметаИсчисления = НСтр("ru = 'строка, строки, строк'");
		
		Форма.НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (%2)'"),
			Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоСтрок, ПараметрыПредметаИсчисления));
			
		ВключитьВидимостьСсылкиНаПлатеж(Элементы, Истина, Истина, ВидимостьУслугиНПД);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьВидимостьСсылкиНаПлатеж(Элементы, ЕстьНесколькоСтрок, ЭтоВидыОперацииСТЧ, ПлательщикНПД)
	
	Элементы.НадписьРазбитьПлатеж.Видимость    = Не ЕстьНесколькоСтрок И (ЭтоВидыОперацииСТЧ Или ПлательщикНПД);
	Элементы.НадписьСуммаДокумента.Видимость   = ЕстьНесколькоСтрок;
	Элементы.СуммаДокумента.Видимость          = Не ЕстьНесколькоСтрок;
	
КонецПроцедуры

Функция ЭтоРасчетыПоКредитамИЗаймам(ВидОперации)
	
	Возврат ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииВидаОперации(ПараметрыОбъекта) 
	
	НовыеПараметры = Новый Структура;
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		
		НовыеПараметры.Вставить("Основание",          Строка(ПараметрыОбъекта.ВидОперации));
		НовыеПараметры.Вставить("ВалютаДокумента",    ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		НовыеПараметры.Вставить("КурсДокумента",      1);
		НовыеПараметры.Вставить("КратностьДокумента", 1);
		НТТНаЕНВД = ПараметрыОбъекта.ВыручкаСНТТ И НТТнаЕНВДилиПатенте(ПараметрыОбъекта);
		НовыеПараметры.Вставить("НТТНаЕНВД", НТТНаЕНВД);
		НовыеПараметры.Вставить("СтавкаНДС", УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(
			ПараметрыОбъекта.Дата, ПараметрыОбъекта.ПлательщикНДС И Не НТТНаЕНВД));
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(НовыйСчетОрганизации,
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.ВалютаДокумента, Истина);
		НовыеПараметры.Вставить("Контрагент", НовыйСчетОрганизации);
		СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыйСчетОрганизации, "Наименование");
		НовыеПараметры.Вставить("ПринятоОт", СвойстваСчета.Наименование);
		НовыеПараметры.Вставить("Основание", Строка(ПараметрыОбъекта.ВидОперации));
		
	Иначе // Параметры для других видов операций
		
		Если ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
			СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
			Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
				НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("СтатьяДвиженияДенежныхСредств", ПараметрыОбъекта.СтатьяДвиженияДенежныхСредств);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта, ПричиныИзменения) 
	
	НовыеПараметры  = Новый Структура;
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(НовыйСчетОрганизации,
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.ВалютаДокумента, Истина);
		НовыеПараметры.Вставить("Контрагент", НовыйСчетОрганизации);
		СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыйСчетОрганизации, "Наименование");
		НовыеПараметры.Вставить("ПринятоОт", СвойстваСчета.Наименование);
		
	КонецЕсли;
	
	ОсновноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ОсновноеПодразделение, ПараметрыОбъекта.Организация) Тогда
		НовыеПараметры.Вставить("ПодразделениеОрганизации", ОсновноеПодразделение);
	Иначе
		НовыеПараметры.Вставить("ПодразделениеОрганизации", Неопределено);
	КонецЕсли;
	
	Если ПараметрыОбъекта.ПрименениеУСН ИЛИ ПараметрыОбъекта.ПрименяетсяОсобыйПорядокНалогообложения
			ИЛИ НЕ ПараметрыОбъекта.ПлательщикНДС Тогда
		НовыеПараметры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
		ПричиныИзменения.Добавить("РасшифровкаПлатежа");
		
	КонецЕсли;
	
	// Порядок отражения аванса по умолчанию
	НовыеПараметры.Вставить("ПорядокОтраженияАвансов",
		УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата));
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта) 
	
	НовыеПараметры = Новый Структура("ПринятоОт");
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		
		СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбъекта.Контрагент, "Наименование, ТипСклада");
		ВыручкаСНТТ = СвойстваСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
		НовыеПараметры.Вставить("ВыручкаСНТТ", ВыручкаСНТТ);
		НовыеПараметры.Вставить("ПринятоОт", СвойстваСклада.Наименование);
		
		НТТНаЕНВД = ВыручкаСНТТ И НТТнаЕНВДилиПатенте(ПараметрыОбъекта);
		НовыеПараметры.Вставить("НТТНаЕНВД", НТТНаЕНВД И ПараметрыОбъекта.УчетВПродажныхЦенах);
		НовыеПараметры.Вставить("СтавкаНДС", УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(
			ПараметрыОбъекта.Дата, ПараметрыОбъекта.ПлательщикНДС И Не НТТНаЕНВД));
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица 
		ИЛИ ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником Тогда
		
		ПараметрыОбъекта.Вставить("ПринятоОтФизЛицо", ПараметрыОбъекта.Контрагент);
		НовыеПараметры = НовыеПараметрыПриВыбореПринятоОт(ПараметрыОбъекта);
		ЗаполнитьЗначенияСвойств(НовыеПараметры, НовыеПараметрыПриВыбореПринятоОт(ПараметрыОбъекта));
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбъекта.Контрагент, "Наименование");
		НовыеПараметры.ПринятоОт = СвойстваСчета.Наименование;
		
	ИначеЕсли ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
		СвойстваКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбъекта.Контрагент,
			"Наименование, НаименованиеПолное");
		НовыеПараметры.ПринятоОт = ?(ПустаяСтрока(СвойстваКонтрагента.НаименованиеПолное),
			СвойстваКонтрагента.Наименование, СвойстваКонтрагента.НаименованиеПолное);
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииСчетаКассы(ПараметрыОбъекта) 
	
	НовыеПараметры = Новый Структура;
	
	ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОбъекта.СчетКасса).Валютный
		И ПриходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(ПараметрыОбъекта.ВидОперации);
	
	Если НЕ ОплатаВВалюте Тогда
		ПараметрыОбъекта.ВалютаДокумента = ПараметрыОбъекта.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	НовыеПараметрыПриИзмененииОплатаВВалюте(НовыеПараметры, ОплатаВВалюте, ПараметрыОбъекта);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииВалютыДокумента(ПараметрыОбъекта) 
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ОплатаВВалютеНов = ПараметрыОбъекта.ОплатаВВалюте;
	Иначе
		ОплатаВВалютеНов = ПараметрыОбъекта.ВалютаДокумента <> ПараметрыОбъекта.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		Если НЕ СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			ОплатаВВалютеТек = ПараметрыОбъекта.ОплатаВВалюте;
			ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалютеНов;
			НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
			ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалютеТек;
		Иначе
			НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		КонецЕсли;
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыеПараметрыПриИзмененииОплатаВВалюте(
		НовыеПараметры,
		ОплатаВВалютеНов,
		ПараметрыОбъекта);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыОбъекта.ВалютаДокумента, ПараметрыОбъекта.Дата);
	НовыеПараметры.Вставить("КурсДокумента",      СтруктураКурса.Курс);
	НовыеПараметры.Вставить("КратностьДокумента", СтруктураКурса.Кратность);
	
	Возврат НовыеПараметры;
	
КонецФункции

Процедура НовыеПараметрыПриИзмененииОплатаВВалюте(НовыеПараметры, ОплатаВВалюте, ПараметрыОбъекта) 
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке
		И ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетОрганизации,
			ПараметрыОбъекта.Организация,
			ПараметрыОбъекта.ВалютаДокумента,
			Истина);
		НовыеПараметры.Вставить("Контрагент", НовыйСчетОрганизации);
		СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыйСчетОрганизации, "Наименование");
		НовыеПараметры.Вставить("ПринятоОт",  СвойстваСчета.Наименование);
	КонецЕсли;
	
	НовыеПараметры.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
	НовыеПараметры.Вставить("ОплатаВВалюте",   ОплатаВВалюте);
	
КонецПроцедуры

Функция НовыеПараметрыПриВыбореПринятоОт(Знач ПараметрыОбъекта) Экспорт
	
	ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.ПринятоОтФизЛицо, ПараметрыОбъекта.Дата);
	
	НовыеПараметры = Новый Структура("ПринятоОт", ДанныеФизЛица.Представление);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НаименованиеКонтрагента(Знач Контрагент) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
		"Наименование, НаименованиеПолное");
	
КонецФункции

Функция ВидимостьБанковскогоСчета(Знач Организация) Экспорт
	
	Возврат Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация);
	
КонецФункции

Процедура ЗаполнитьОтражениеСтрокиВУСННаСервере(СтрокаТЧ, Знач ПараметрыУСН) Экспорт
	
	НалоговыйУчетУСН.ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаТЧ, ПараметрыУСН);
	
КонецПроцедуры

Процедура ДеятельностьНаПатентеПриИзмененииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ДеятельностьНаПатенте Тогда
		Объект.ДеятельностьНаТорговомСборе = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Объект.Патент) Тогда
			Объект.Патент = УчетПСН.ПатентПоУмолчанию(Объект.Организация, Объект.Дата);
		КонецЕсли;
		
		Если Форма.ПрименениеУСН И Форма.УчетВПродажныхЦенах Тогда
			Объект.Графа5_УСН = 0;
			Объект.Графа7_УСН = 0;
			Объект.НДС_УСН    = 0;
		КонецЕсли;
	Иначе
		Объект.Патент = Справочники.Патенты.ПустаяСсылка();
		УстановитьДеятельностьНаТорговомСборе(Форма);
		ЗаполнитьОтражениеВУСН(Форма);
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура УстановитьДеятельностьНаТорговомСборе(Форма)
	
	Документы.ПриходныйКассовыйОрдер.УстановитьДеятельностьНаТорговомСборе(Форма.Объект);
	
КонецПроцедуры

Процедура ДеятельностьНаТорговомСбореПриИзмененииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ДеятельностьНаТорговомСборе И Объект.ДеятельностьНаПатенте Тогда
		Объект.ДеятельностьНаПатенте = Ложь;
		Объект.Патент                = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьОтражениеВУСН(Форма);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьПатентОбработкаВыбораНаСервере(Форма, ВыбранныйПатент) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не УчетПСН.ПатентДоступенДляВыбора(ВыбранныйПатент, Объект.Организация, Объект.Дата) Тогда
		ВыбранныйПатент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранныйПатент) Тогда
		Объект.ДеятельностьНаТорговомСборе = Ложь;
		Объект.ДеятельностьНаПатенте       = Истина;
		Объект.Патент                      = ВыбранныйПатент;
		
		Форма.Модифицированность = Истина;
		
		БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
			ПриходныйКассовыйОрдерФормыКлиентСервер.ИменаЭлементовОтраженияДохода());
		
		УправлениеЭлементамиОтраженияВУСННаСервере(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение настройки по умолчанию для Невтоматизированной торговой точки
//
// Параметры:
//  ПараметрыОбъекта -структура с ключами
//    Организация - СправочникСсылка.Организации
//    Контрагент - СправочникСсылка.Склады
//    Дата - Дата
//    ПлательщикЕНВД - Булево
//    РозничнаяТорговляОблагаетсяЕНВД - Булево
// 
// Возвращаемое значение:
//  Булево - Истина, если торговая точка переведена на ЕНВД или Патент
//
Функция НТТнаЕНВДилиПатенте(ПараметрыОбъекта)
	
	Если Не ПараметрыОбъекта.ПлательщикЕНВД Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(
		ПараметрыОбъекта.Организация,
		ПараметрыОбъекта.Контрагент, // Склад
		ПараметрыОбъекта.Дата,
		Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД));
	
	Возврат БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);
	
КонецФункции

Функция РасшифровкаДоступна(Форма)
	
	РасшифровкаНедоступна = Форма.Объект.БезЗакрывающихДокументов
		И Не Форма.ОтражениеДоходаВидимость
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств")
		И Не ВидимостьУслугиНПД(Форма);
	
	Возврат Не РасшифровкаНедоступна;
	
КонецФункции

Функция ВидимостьУслугиНПД(Форма)
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СведенияОЧекеНПД") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Форма.ПлательщикНПД Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДоступнаИнтеграция = ЧекиНПДВызовСервера.ДоступнаИнтеграцияСПлатформойСамозанятые();
	ЧекСформирован     = Не ЧекиНПДКлиентСервер.НужноНачатьФормированиеЧека(Форма.СведенияОЧекеНПД);
	
	Возврат ЕстьУслугиНПД(Форма.Объект.ВидОперации) И (ЧекСформирован Или ДоступнаИнтеграция);
	
КонецФункции

Функция ЕстьУслугиНПД(ВидОперации)
	
	Возврат ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		Или ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка;
	
КонецФункции

Функция ПроверятьПатент(Форма)
	
	Объект = Форма.Объект;
	
	Возврат Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка
		И Объект.ВыручкаСНТТ
		И Форма.УчетВПРодажныхЦенах;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииУСН

Процедура УправлениеЭлементамиОтраженияВУСННаСервере(Форма)
	
	Элементы = Форма.Элементы;
	
	// Видимость элементов настройки отражения в НУ (аванса и КУДиР):
	// 
	// Для оплаты от покупателя и возврата поставщику
	// отображается порядок отражения аванса в НУ (с учетом функциональных опций)
	//
	// Для остальных видов операций:
	// - Если выключена ФО "ПрименениеУСН", то элементы настройки КУДиР не отображаются
	// - Если применяется УСН, элементы настройки КУДиР отображаются,
	//   состав отображаемых элементов зависит от вида операции и ФО формы
	Объект = Форма.Объект;
	
	ОтображатьДоходыУСН = Форма.ПрименениеУСН И УчетУСН.ТребуетсяНастройкаДоходовПоПрочимРасчетам(Объект.ВидОперации);
	Элементы.РасшифровкаПлатежаДоходыУСН.Видимость = ОтображатьДоходыУСН;
	
	УстановитьЗаголовкиКолонокУСН(Форма);
	
	Если Не ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
	
		Элементы.ГруппаРозничнаяВыручкаОтражениеВНУ.Видимость = Ложь;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
			Элементы.ГруппаОтражениеВУСН.Видимость = Форма.ПрименениеУСН;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
			Если Объект.ВыручкаСНТТ И Форма.УчетВПродажныхЦенах Тогда
				
				Элементы.ГруппаРозничнаяВыручкаОтражениеВНУ.Видимость = Форма.ПрименяетсяУСНПатент ИЛИ Форма.ПрименениеУСН;
				
				Элементы.ДеятельностьНаПатенте.Видимость = НЕ Форма.ПрименяетсяТолькоУСНПатент;
				Элементы.Патент.Видимость                = Форма.ПрименяетсяНесколькоПатентов ИЛИ НЕ Форма.ПрименяетсяТолькоУСНПатент;
				Если Форма.ПрименяетсяТолькоУСНПатент Тогда
					Элементы.Патент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
				Иначе
					Элементы.Патент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				КонецЕсли;
				
				Элементы.ДеятельностьНаТорговомСборе.Видимость        = Форма.РаздельныйУчетУСНТорговыйСбор И НЕ Форма.НТТНаЕНВД;
				Элементы.РозничнаяВыручкаДоходыУСН.Видимость          = Форма.ПрименениеУСН И НЕ Форма.НТТНаЕНВД;
				Элементы.ГруппаРозничнаяВыручкаСуммыУСН.Видимость     = Форма.ПрименениеУСН И НЕ Форма.НТТНаЕНВД;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовкиКолонокУСН(Форма)
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	Если НЕ Форма.ПрименениеУСН И НЕ УчетУСН.ТребуетсяНастройкаДоходовПоПрочимРасчетам(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
		
	ЗаголовокДоходыУСН = НСтр("ru = 'Доходы УСН'");
	Если Форма.ОплатаВВалюте Тогда
		ЗаголовокДоходыУСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Доходы УСН, %1'"), Форма.ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоходыУСН.Заголовок = ЗаголовокДоходыУСН;
	
КонецПроцедуры

Процедура НастроитьСчетаУчетаАвансаВТабличнойЧасти(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = форма.Объект;
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
		Или Не ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	ПоказыватьОтражениеАванса = Форма.ОтражениеАвансаВидимость;
	
	Элементы.РасшифровкаПлатежаОтражениеАвансаСчетУчета.Видимость = ПользовательУправляетСчетамиУчета
		И ПоказыватьОтражениеАванса;
	Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость = ПользовательУправляетСчетамиУчета
		И Не ПоказыватьОтражениеАванса;
	
	ПоказыватьГруппуАвансов = ПользовательУправляетСчетамиУчета И ПоказыватьОтражениеАванса;
	// Если счет авансов и порядок отражения выводятся в группе, то должен быть выведен заголовок группы.
	// Если нет - то заголовок поля с порядком отражения.
	Элементы.РасшифровкаПлатежаОтражениеАвансаПредставление.ОтображатьВШапке = Не ПоказыватьГруппуАвансов;
	Элементы.РасшифровкаПлатежаГруппаОтражениеАванса.ОтображатьВШапке        = ПоказыватьГруппуАвансов;
	
	ПоказыватьГруппуСчетов = ПользовательУправляетСчетамиУчета И Не ПоказыватьГруппуАвансов;
	// Если счет расчетов и счет аванса выводятся в группе, то должен быть выведен заголовок группы.
	// Если нет - то заголовок счета.
	Элементы.РасшифровкаПлатежаГруппаСчетаРасчетов.ОтображатьВШапке            = ПоказыватьГруппуСчетов;
	Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.ОтображатьВШапке = НЕ ПоказыватьГруппуСчетов;
	
КонецПроцедуры

#КонецОбласти

#Область РасшифровкаПлатежа

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(Форма, СтрокаПлатеж) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = ПриходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	Форма.СвойстваПлатежа  = ПриходныйКассовыйОрдерФормыКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Форма.ПредлагатьНовыйДоговор = Ложь;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = ПриходныйКассовыйОрдерФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.ДоговорКонтрагента",
		Объект,
		СтрокаПлатеж);
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПриходныйКассовыйОрдер,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"РасшифровкаПлатежа",
		СтрокаПлатеж);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, Изменения);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж,    Изменения);
	
	Если Форма.ПрименениеУСН Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, Форма);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	ПриходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		Если ЗначениеЗаполнено(Форма.РасшифровкаПлатежаДоговорКонтрагента) Тогда
			Форма.ЕстьРасчетыВУсловныхЕдиницах = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Форма.РасшифровкаПлатежаДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
		Иначе
			Форма.ЕстьРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
	Иначе
		Форма.ЕстьРасчетыВУсловныхЕдиницах = Форма.ЕстьРасчетыВУсловныхЕдиницах ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	Если Не ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	КонецЕсли;
	
	УправлениеФормой(Форма); // возможно нужно отобразить реквизиты курсов валюты
	
КонецПроцедуры

Функция СвойстваСтрокРасшифровкиПлатежаСервер(Знач ПараметрыПлатежа, Знач ПолучатьДоговор) Экспорт
	
	СвойстваПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
	
	Если ПолучатьДоговор Тогда
		ПараметрыПлатежа.ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(ПараметрыПлатежа);
	КонецЕсли;
	
	СвойстваПлатежа.УслугаНПД                     = ПараметрыПлатежа.УслугаНПД;
	СвойстваПлатежа.ДоговорКонтрагента            = ПараметрыПлатежа.ДоговорКонтрагента;
	СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = ПараметрыПлатежа.СтатьяДвиженияДенежныхСредств;
	СвойстваПлатежа.СпособПогашенияЗадолженности  = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	
	Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговора.РасчетыВУсловныхЕдиницах;
		
		Если ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
			СвойстваПлатежа.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(
				ПараметрыПлатежа.Дата, ПараметрыПлатежа.ПлательщикНДС);
		ИначеЕсли ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
			СвойстваПлатежа.СтавкаНДС = Справочники.ДоговорыКонтрагентов.СтавкаНДСПоДоговору(
				ПараметрыПлатежа.Дата, ПараметрыПлатежа.ДоговорКонтрагента);
		КонецЕсли;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		Если ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
			СвойстваПлатежа.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(
				ПараметрыПлатежа.Дата, ПараметрыПлатежа.ПлательщикНДС);
		ИначеЕсли ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
			СвойстваПлатежа.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЕсли;
	
	// Порядок отражения аванса по умолчанию
	СвойстваПлатежа.ПорядокОтраженияАванса
		= УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(ПараметрыПлатежа.Организация, ПараметрыПлатежа.Дата);
	
	Возврат СвойстваПлатежа;
	
КонецФункции

Процедура ИнициализироватьСвойстваПлатежа(Форма, ТолькоСоздатьКлючи = Ложь, ПолучатьДоговор = Ложь) Экспорт
	
	Объект = Форма.Объект;
	
	Если Форма.СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			Форма.СвойстваПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ПараметрыОбъекта = ПриходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
			Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
				ПараметрыОбъекта.Вставить("УслугаНПД",                     Объект.РасшифровкаПлатежа[0].УслугаНПД);
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента",            Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
				ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
			Форма.СвойстваПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор);
			Форма.СвойстваПлатежа.ПорядокОтраженияАванса = УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(
				ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммыВзаиморасчетов(Форма)
	
	Объект = Форма.Объект;
	РасшифровкаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
		И РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.ДанныеРасшифровкиПлатежаОднострочнойФормы(Форма);
		РассчитатьКурсИСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
		
	Иначе
		Отбор = Новый Структура("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Истина);
		ПлатежиВУсловныхЕдиницах = РасшифровкаПлатежа.НайтиСтроки(Отбор);
		Для каждого СтрокаПлатеж Из ПлатежиВУсловныхЕдиницах Цикл
			РассчитатьКурсИСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовкиКолонокРасшифровкаПлатежа(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Установим заголовки табличных частей
	НазваниеТабличнойЧасти = ПриходныйКассовыйОрдерФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	Если НазваниеТабличнойЧасти = "РасшифровкаПлатежа" И Элементы.Найти(НазваниеТабличнойЧасти) <> Неопределено Тогда
		Если Объект.БезЗакрывающихДокументов Тогда
			ТекстЗаголовка = НСтр("ru = 'Статья доходов'");
		ИначеЕсли Форма.ВестиУчетПоДоговорам И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств") Тогда
			ТекстЗаголовка = НСтр("ru = 'Договор / Статья доходов'");
		ИначеЕсли Форма.ВестиУчетПоДоговорам Тогда
			ТекстЗаголовка = НСтр("ru = 'Договор'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Статья доходов'");
		КонецЕсли;
		Элементы.РасшифровкаПлатежаГруппаДоговор.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

Функция ГруппаРасшифровкаПлатежа(ВидОперации, БезЗакрывающихДокументов)
	
	ГруппаРасшифровкаПлатежаТаблица = "ГруппаРасчетыСКонтрагентами";
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		ГруппаРасшифровкаПлатежаТаблица = "ГруппаРозничнаяВыручка"
			+ ?(БезЗакрывающихДокументов, "БезЗакрывающихДокументов", "");
	ИначеЕсли БезЗакрывающихДокументов Тогда
		ГруппаРасшифровкаПлатежаТаблица = "ГруппаБезЗакрывающихДокументов";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		ГруппаРасшифровкаПлатежаТаблица = "ГруппаПрочееСтраница";
	// а затем тех, кто использует основную форму Расшифровки платежа
	ИначеЕсли ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		ГруппаРасшифровкаПлатежаТаблица = "ГруппаРасчетыСКонтрагентами";
	КонецЕсли;
	
	Возврат ГруппаРасшифровкаПлатежаТаблица;
	
КонецФункции

Функция ВидОперацииСТабличнойЧастью(ВидОперации)
	
	Возврат Документы.ПриходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации);
	
КонецФункции

#КонецОбласти

#Область УсловноеОформление

Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	Форма.НастройкиУсловногоОформления = Новый Структура();
	
	Форма.УсловноеОформление.Элементы.Очистить();
	
	ФормаДокументаОднострочная = ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	
	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость(Форма, ФормаДокументаОднострочная);
	
	Если ФормаДокументаОднострочная Тогда
		Возврат;
	КонецЕсли;
	
	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(Форма);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеШапкаИВидимость(Форма, ФормаДокументаОднострочная)
	
	НачалоПутиКДаннымТЧ = "Объект.";
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		НачалоПутиКДаннымТЧ = "";
	КонецЕсли;
	
	// Контрагент
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Контрагент");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ПрочийПриход);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ЛичныеСредстваПредпринимателя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		НачалоПутиКДаннымТЧ + "ВыручкаСНТТ",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Если ФормаДокументаОднострочная Тогда
		Возврат;
	КонецЕсли;
	
	// Реквизиты используются только при расчетах в у.е.
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ЕстьРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Не используются при расчетах по кредитам и займам.
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетНаОплату");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеЗайма);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеКредита);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСчетНаОплату
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетНаОплату");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаОтражениеАвансаПредставление
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаОтражениеАвансаПредставление");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ОтражениеАвансаВидимость",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаВыручкиОтражениеДоходаПредставление
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаВыручкиОтражениеДоходаПредставление");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ОтражениеДоходаВидимость",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	БанкИКассаФормы.УстановитьУсловноеОформлениеБезЗакрывающихДокументов(Форма, НачалоПутиКДаннымТЧ);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеРасшифровкаПлатежа(Форма, НачалоПутиКДаннымТЧ) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	Форма.НастройкиУсловногоОформления.Вставить("РасшифровкаПлатежаПроинициализировано", Истина);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// РасшифровкаПлатежаСтавкаНДС
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтавкаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"УчетВПродажныхЦенах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// РасшифровкаПлатежаСуммаНДС
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СтавкаНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтавкиНДС.НДС0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СтавкаНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтавкиНДС.БезНДС);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.Сделка", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Документ>'"));
	
	// РасшифровкаПлатежаСпособПогашенияЗадолженности
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Способ погашения>'"));
	
	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Статья движения ден. средств>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет расчетов>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам, РасшифровкаПлатежаОтражениеАвансаСчетУчета
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаОтражениеАвансаСчетУчета");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет авансов>'"));
	
	// РасшифровкаПлатежаОтражениеАвансаПредставление
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаОтражениеАвансаПредставление");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ОтражениеАвансаПредставление",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Аванс в НУ>'"));
	
	// РасшифровкаПлатежаДоходыУСН
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоходыУСН");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
		
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеЗайма);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеКредита);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ДоходыУСН",
		ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не принимаются>'"));
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеРасшифровкаВыручки(Форма, НачалоПутиКДаннымТЧ) Экспорт
	
	Форма.НастройкиУсловногоОформления.Вставить("РасшифровкаВыручкиПроинициализировано", Истина);
	
	// РасшифровкаВыручкиСтавкаНДС
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаВыручкиСтавкаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"УчетВПродажныхЦенах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// РасшифровкаВыручкиСуммаНДС
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаВыручкиСуммаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СтавкаНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтавкиНДС.НДС0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СтавкаНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтавкиНДС.БезНДС);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

Процедура ОбновитьУсловноеОформление(Форма)
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПутиКДаннымТЧ = "Объект.";
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		НачалоПутиКДаннымТЧ = "";
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("РасшифровкаПлатежаПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами Тогда
		
		УстановитьУсловноеОформлениеРасшифровкаПлатежа(Форма, НачалоПутиКДаннымТЧ);
		
	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("РасшифровкаВыручкиПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРозничнаяВыручка Тогда
		
		УстановитьУсловноеОформлениеРасшифровкаВыручки(Форма, НачалоПутиКДаннымТЧ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

Процедура УстановитьВидимостьСчетовУчета(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("СчетКасса");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаОтражениеАвансаСчетУчета");
	ЭлементыСчетов.Добавить("СчетБанк");
	ЭлементыСчетов.Добавить("СчетУчета");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	ЕстьРасшифровкаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма);
	
	Если Не ЕстьРасшифровкаПлатежа И Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам Тогда
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.Видимость = Истина;
	КонецЕсли;
	
	// Вне зависимости от настроек пользователя для отдельных видов операций некоторые счета видны,
	// кроме режима Интеграции с банком
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		Элементы.СчетУчета.Видимость = Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
		Элементы.ГруппаОтражениеВБУ.Видимость = Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		Элементы.СчетБанк.Видимость = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета()
			И НЕ УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	// Для счетов аванса есть две колонки, видна из которых может быть только одна
	НастроитьСчетаУчетаАвансаВТабличнойЧасти(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчета(Форма, ПричинаИзменения, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	Если СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Тогда
		
		ПараметрыЗаполнения = ПриходныйКассовыйОрдерФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект);
		
		Если ПричиныИзменения.Найти("СчетКасса") <> Неопределено Тогда
			// Если видны счета, то при изменении счета может быть изменена валюта.
			// А изменение валюты в общем случае приводит к установке счета кассы.
			// В конкретном случае этого нужно избежать.
			ПараметрыЗаполнения.КЗаполнению.Удалить("СчетКасса");
		КонецЕсли;
		
		Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			
			// В этом режиме только автоматическое изменение валюты (запрет оформления в иностранной валюте)
			// должен приводить к смене счета.
			
			Если ПриходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
				ПараметрыЗаполнения.КЗаполнению.Удалить("СчетКасса");
			КонецЕсли;
			
		КонецЕсли;
		
		СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


