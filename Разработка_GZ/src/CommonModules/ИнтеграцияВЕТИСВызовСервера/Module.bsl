#Область ПрограммныйИнтерфейс

Функция ТекстНадписиПоляИнтеграцииВФормеДокументаОснования(Знач ДокументОснование) Экспорт
	
	ТекстНадписи = "";
	
	// Получим структуру вида ИмяДокументаВЕТИС - Статус
	СтатусыОформления = РегистрыСведений.СтатусыОформленияДокументовВЕТИС.СтатусыДокументовВЕТИСПоДокументуОснованию(ДокументОснование);
	
	Если НЕ ЗначениеЗаполнено(СтатусыОформления) Тогда
		Возврат ТекстНадписи;
	КонецЕсли;
	
	// Получим структуру вида ИмяДокументаВЕТИС - Массив(ДокументыВЕТИСДанногоВида)
	ДокументыВЕТИС = ИнтеграцияВЕТИСВызовСервера.ДокументыВЕТИСПоДокументуОснованию(ДокументОснование);
	
	ТекстыНадписиПоДокументам = Новый Массив;
	
	Для Каждого КлючИЗначение Из СтатусыОформления Цикл
		
		МетаданныеДокументаВЕТИС = Метаданные.Документы[КлючИЗначение.Ключ];
		
		Если ИнтеграцияВЕТИС.РеквизитДокументОснованиеДокументаВЕТИС(МетаданныеДокументаВЕТИС).Тип.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
			
			// Получим структуру с ключами "Представление, МассивДокументов, СтатусОформления, МетаданныеДокумента"
			Описание = ИнтеграцияВЕТИС.ОписаниеОформленныхДокументовВЕТИС(МетаданныеДокументаВЕТИС, ДокументОснование, ДокументыВЕТИС, СтатусыОформления);
			
			Если Описание = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекстыНадписиПоДокументам.Количество() > 0 Тогда
				ТекстыНадписиПоДокументам.Добавить(", ");
			КонецЕсли;
			
			ТекстыНадписиПоДокументам.Добавить(Описание.ТекстНадписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстНадписи = Новый ФорматированнаяСтрока(ТекстыНадписиПоДокументам);
	Возврат ТекстНадписи;
	
КонецФункции

#Область РаботаСДокументами

// Подготавливает сообщения к передаче в сервис ВЕТИС.
//
// Параметры:
//  ВходящиеДанные - Массив, ДокументСсылка - Документы к передаче сообщений.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - выполняемая операция обмена.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//  Немедленно - Булево - Признак немедленной передачи сообщения в УТМ, без очереди сообщений.
// 
// Возвращаемое значение:
//  Структура - см. функцию ПодготовитьСообщенияКПередаче().
//
Функция ПодготовитьКПередаче(ВходящиеДанные, ПараметрыПередачи, УникальныйИдентификатор, ХозяйствующиеСубъекты = Неопределено, НастройкаОбмена = Неопределено) Экспорт
	
	ПараметрыОбмена = ИнтеграцияВЕТИС.ПараметрыОбмена(ХозяйствующиеСубъекты, УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Структура;
	Если НастройкаОбмена <> Неопределено Тогда
		ИнтеграцияВЕТИС.ДобавитьНастройкуОбменаВПараметрыОбмена(ПараметрыОбмена, ХозяйствующиеСубъекты, НастройкаОбмена);
		ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	КонецЕсли;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("Массив") Тогда
		МассивДокументов = ВходящиеДанные;
	Иначе
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ВходящиеДанные);
	КонецЕсли;
	
	СообщенияXML = Новый Массив;
	Для Каждого ДокументСсылка Из МассивДокументов Цикл
		
		СообщенияКПередачеXML = СообщениеКПередачеXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры);
		Для Каждого СообщениеXML Из СообщенияКПередачеXML Цикл
			СообщенияXML.Добавить(СообщениеXML);
		КонецЦикла;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИС.ПодготовитьКПередачеСОжиданием(СообщенияXML, ПараметрыОбмена, УникальныйИдентификатор);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Удаляет неотправленную операцию из очереди передачи данных в ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
// Возвращаемое значение:
//  Массив - Массив структур, см. функцию ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения(), или Неопределено (если в очереди нет сообщений).
//
Функция ОтменитьПередачу(ДокументСсылка) Экспорт
	
	Изменения = Новый Массив;
	
	ДанныеПоследнегоСообщения = Справочники.ВЕТИСПрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "ВОчереди");
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		
		ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийВЕТИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(ДанныеПоследнегоСообщения.Сообщение, Истина);
	
	ТекстОшибки = "";
	НачатьТранзакцию();
	Попытка
		НаборЗаписей.Записать();
		НовыйСтатус = ИнтеграцияИС.ОтменитьОперацию(ДокументСсылка, ДанныеПоследнегоСообщения);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДокументОснование = Неопределено;
	Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	КонецЕсли;
	
	СтрокаРезультата = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	СтрокаРезультата.ХозяйствующийСубъект = ДанныеПоследнегоСообщения.ХозяйствующийСубъект;
	СтрокаРезультата.Операция             = ДанныеПоследнегоСообщения.Операция;
	СтрокаРезультата.ФорматОбмена         = ДанныеПоследнегоСообщения.ФорматОбмена;
	СтрокаРезультата.Объект               = ДокументСсылка;
	СтрокаРезультата.ДокументОснование    = ДокументОснование;
	СтрокаРезультата.НовыйСтатус          = НовыйСтатус;
	СтрокаРезультата.ТекстОшибки          = ТекстОшибки;
	
	Изменения.Добавить(СтрокаРезультата);
	
	Возврат Изменения;
	
КонецФункции

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
// Возвращаемое значение:
//  Массив - Массив структур, см. функцию ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения().
//
Функция ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	Изменения = Новый Массив;
	
	ДанныеПоследнегоСообщения = Справочники.ВЕТИСПрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "Передано");
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = "";
	Попытка
		НовыйСтатус = ИнтеграцияИС.ОтменитьОперацию(ДокументСсылка, ДанныеПоследнегоСообщения);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДокументОснование = Неопределено;
	Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	КонецЕсли;
	
	СтрокаРезультата = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	СтрокаРезультата.ХозяйствующийСубъект = ДанныеПоследнегоСообщения.ХозяйствующийСубъект;
	СтрокаРезультата.Операция             = ДанныеПоследнегоСообщения.Операция;
	СтрокаРезультата.ФорматОбмена         = ДанныеПоследнегоСообщения.ФорматОбмена;
	СтрокаРезультата.Объект               = ДокументСсылка;
	СтрокаРезультата.ДокументОснование    = ДокументОснование;
	СтрокаРезультата.НовыйСтатус          = НовыйСтатус;
	СтрокаРезультата.ТекстОшибки          = ТекстОшибки;
	
	Изменения.Добавить(СтрокаРезультата);
	
	Возврат Изменения;
	
КонецФункции

// Восстанавливает статус документа по данным протокола обмена.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется восстановить статус.
//
Процедура ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка) Экспорт
	
	ИнтеграцияВЕТИС.РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
	
КонецПроцедуры

// Архивирует (убирает из интерфейса к обработке) записи из регистра по переданным документам.
//
// Параметры:
//   Основания - Массив Из ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИС - массив распоряжений
//   Документ  - ОпределяемыйТип.ДокументыВЕТИСПоддерживающиеСтатусыОформления - документ, данные по которому
//      необходимо архивировать.
// Возвращаемое значение:
// 	Массив - Выполненные изменения.
//
Функция АрхивироватьРаспоряженияКОформлению(Основания, Документ) Экспорт
	
	Возврат РегистрыСведений.СтатусыОформленияДокументовВЕТИС.АрхивироватьРаспоряженияКОформлению(Основания, Документ)
	
КонецФункции

// Устанавливает статус дальнейших действий переданных в параметре документах - Не требуется.
// 
// Параметры:
// 	ДокументыКАрхивированию - Массив - Коллекция документов для установки дальнейшего действия.
// Возвращаемое значение:
// 	Массив - Массив обработанных документов:
// 	 * Объект - ДокументСсылка - ссылка на обрабатываемый документ.
// 	 * ДокументОснование - ДокументСсылка - ссылка на документ-основание, если имеется.
// 	 * ТекстОшибки - Строка - текст ошибки обработки.
//
Функция АрхивироватьДокументы(ДокументыКАрхивированию) Экспорт
	
	Изменения = Новый Массив;
	
	Для Каждого ДокументСсылка Из ДокументыКАрхивированию Цикл
		Изменения.Добавить(ОтметитьДокументКакОбработанный(ДокументСсылка));
	КонецЦикла;
	
	Возврат Изменения;
	
КонецФункции

// Отмечает документ как обработанный. Устанавливает дальнейшее действие - Не требуется.
// 
// Параметры:
// 	ДокументСсылка - ДокументсСсылка - Документ, которму необходимо установить соответствующий статус.
// Возвращаемое значение:
// 	Структура - Описание:
// * Объект - ДокументОбъект - Документ-объект устанавливаемый.
// * ДокументОснование - ДокументСсылка - Ссылка на документ-основание, если имеется.
// * ТекстОшибки - Строка - текст ошибки установки дальнейшего действия.
// 
Функция ОтметитьДокументКакОбработанный(ДокументСсылка) Экспорт
	
	ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ТекущееСостояние(ДокументСсылка);
	
	ПараметрыОбновления.Вставить("ДальнейшееДействие1", Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется);
	ПараметрыОбновления.Вставить("ДальнейшееДействие2", Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется);
	ПараметрыОбновления.Вставить("ДальнейшееДействие3", Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется);
	ПараметрыОбновления.Вставить("НовыйСтатус",         ПараметрыОбновления.Статус);
	
	ТекстОшибки = "";
	
	Если Не ПравоДоступа("Изменение", ДокументСсылка.Метаданные()) Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа для очистки дальнейших действий по документу'");
	КонецЕсли;
	
	НачатьТранзакцию();
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		
		РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
			ДокументСсылка,
			ПараметрыОбновления);
		
		ДокументОснование = Неопределено;
		Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
			ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОчередьСообщенийВЕТИС.Сообщение КАК Сообщение
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийВЕТИС КАК ОчередьСообщенийВЕТИС
		|ГДЕ
		|	ОчередьСообщенийВЕТИС.Сообщение.Документ = &Документ
		|	ИЛИ ОчередьСообщенийВЕТИС.ДокументОснование = &Документ");
		Запрос.Параметры.Вставить("Документ", ДокументСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ОчередьСообщенийВЕТИС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сообщение.Установить(Выборка.Сообщение, Истина);
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При архивировании документа %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			ДокументСсылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	СтрокаРезультата = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	СтрокаРезультата.Объект            = ДокументСсылка;
	СтрокаРезультата.ДокументОснование = ДокументОснование;
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	
	Возврат СтрокаРезультата;
	
КонецФункции

// Возвращает представления объектов, сопоставленных с хозяйствующим субъектом и предприятием.
//
// Параметры:
//  ХозяйствующийСубъект      - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - хозяйствующий субъект, для которого требуется получить сопоставленный объект.
//  Предприятие               - СправочникСсылка.ПредприятияВЕТИС           - предприятие хозяйствующего субъекта, для которого требуется получить сопоставленный объект.
//  ИмяХозяйствующегоСубъекта - Строка                                      - имя хозяйствующего субъекта, например "Грузополучатель" или "Грузоотправитель".
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//  * КонтрагентХозяйствующегоСубъекта - Структура - Структура со свойствами контрагента хозяйствующего субъекта:
//		** Представление - ФорматированнаяСтрока - форматированная строка, содержащая  представление сопоставленного объекта и навигационную ссылку.
//		** Ссылка - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, Неопределено - ссылка на сопоставленный объект или Неопределено.
//  * ТорговыйОбъект - Структура - Структура со свойствами торгового объекта хозяйствующего субъекта:
//		** Представление - ФорматированнаяСтрока - форматированная строка, содержащая  представление сопоставленного объекта и навигационную ссылку.
//		** Ссылка - ОпределяемыйТип.Склад, Неопределено - ссылка на сопоставленный объект или Неопределено.
//  * ПроизводственныйОбъект - Структура - Структура со свойствами производственного объекта хозяйствующего субъекта:
//		** Представление - ФорматированнаяСтрока - форматированная строка, содержащая  представление сопоставленного объекта и навигационную ссылку.
//		** Ссылка - ОпределяемыйТип.Склад, Неопределено - ссылка на сопоставленный объект или Неопределено.
//
Функция ПредставленияСопоставлений(ХозяйствующийСубъект, Предприятие = Неопределено, ИмяХозяйствующегоСубъекта = "") Экспорт
	
	ПустаяСтрока = Новый ФорматированнаяСтрока("");
	СтруктураВозврата = Новый Структура(
		"КонтрагентХозяйствующегоСубъекта, ТорговыйОбъект, ПроизводственныйОбъект");
	СтруктураВозврата.КонтрагентХозяйствующегоСубъекта = Новый Структура("Представление, Ссылка", ПустаяСтрока, Неопределено);
	СтруктураВозврата.ТорговыйОбъект                   = Новый Структура("Представление, Ссылка", ПустаяСтрока, Неопределено);
	СтруктураВозврата.ПроизводственныйОбъект           = Новый Структура("Представление, Ссылка", ПустаяСтрока, Неопределено);
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ХозяйствующиеСубъектыВЕТИС.Контрагент               КАК Контрагент,
	|	ХозяйствующиеСубъектыВЕТИС.СоответствуетОрганизации КАК СоответствуетОрганизации
	|ИЗ
	|	Справочник.ХозяйствующиеСубъектыВЕТИС КАК ХозяйствующиеСубъектыВЕТИС
	|ГДЕ
	|	ХозяйствующиеСубъектыВЕТИС.Ссылка = &ХозяйствующийСубъект
	|",
	"Контрагент");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозяйствующиеСубъектыВЕТИСПредприятия.ТорговыйОбъект КАК Ссылка
	|ИЗ
	|	Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК ХозяйствующиеСубъектыВЕТИСПредприятия
	|ГДЕ
	|	ХозяйствующиеСубъектыВЕТИСПредприятия.Ссылка = &ХозяйствующийСубъект
	|	И НЕ ХозяйствующиеСубъектыВЕТИСПредприятия.ТорговыйОбъект В (&ПустойТорговыйОбъект)
	|	И ХозяйствующиеСубъектыВЕТИСПредприятия.Предприятие = &Предприятие
	|",
	"СопоставленныеТорговыеОбъекты");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозяйствующиеСубъектыВЕТИСПредприятия.ПроизводственныйОбъект КАК Ссылка
	|ИЗ
	|	Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК ХозяйствующиеСубъектыВЕТИСПредприятия
	|ГДЕ
	|	ХозяйствующиеСубъектыВЕТИСПредприятия.Ссылка = &ХозяйствующийСубъект
	|	И НЕ ХозяйствующиеСубъектыВЕТИСПредприятия.ПроизводственныйОбъект В (&ПустойПроизводственныйОбъект)
	|	И ХозяйствующиеСубъектыВЕТИСПредприятия.Предприятие = &Предприятие
	|",
	"СопоставленныеПроизводственныеОбъекты");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ХозяйствующийСубъект",         ХозяйствующийСубъект);
	Запрос.УстановитьПараметр("Предприятие",                  Предприятие);
	Запрос.УстановитьПараметр("ПустойТорговыйОбъект",         ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа(Метаданные.ОпределяемыеТипы.ТорговыйОбъектВЕТИС));
	Запрос.УстановитьПараметр("ПустойПроизводственныйОбъект", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа(Метаданные.ОпределяемыеТипы.ПроизводственныйОбъектИС));
	
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Выборка                               = РезультатыЗапроса.Контрагент.Выбрать();
	СопоставленныеТорговыеОбъекты         = РезультатыЗапроса.СопоставленныеТорговыеОбъекты.Выгрузить().ВыгрузитьКолонку("Ссылка");
	СопоставленныеПроизводственныеОбъекты = РезультатыЗапроса.СопоставленныеПроизводственныеОбъекты.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда
			
			СтруктураВозврата.КонтрагентХозяйствующегоСубъекта.Представление = Новый ФорматированнаяСтрока(
				Строка(Выборка.Контрагент),,,,
				ПолучитьНавигационнуюСсылку(Выборка.Контрагент));
			
			Список = Новый СписокЗначений;
			Список.Добавить(Выборка.Контрагент);
			
			СтруктураВозврата.КонтрагентХозяйствующегоСубъекта.Ссылка = Список;
			
		ИначеЕсли Выборка.СоответствуетОрганизации
			Или ИнтеграцияВЕТИС.ИспользуетсяСопоставлениеКонтрагентов() Тогда
			
			СтруктураВозврата.КонтрагентХозяйствующегоСубъекта.Представление = Новый ФорматированнаяСтрока(
				НСтр("ru = '<не сопоставлено>'"),,
				ЦветаСтиля.ЦветОсобогоТекста,,
				ПолучитьНавигационнуюСсылку(ХозяйствующийСубъект));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предприятие) Тогда
			
			ЗаполнитьСсылкуИПредставлениеСопоставленияТорговогоОбъекта(
				Выборка.СоответствуетОрганизации,
				ИмяХозяйствующегоСубъекта,
				СтруктураВозврата.ТорговыйОбъект,
				СопоставленныеТорговыеОбъекты);
			
			ЗаполнитьСсылкуИПредставлениеСопоставленияТорговогоОбъекта(
				Выборка.СоответствуетОрганизации,
				ИмяХозяйствующегоСубъекта,
				СтруктураВозврата.ПроизводственныйОбъект,
				СопоставленныеПроизводственныеОбъекты);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаполнитьСсылкуИПредставлениеСопоставленияТорговогоОбъекта(СоответствуетОрганизации, ИмяХозяйствующегоСубъекта, СсылкаИПредставление, СопоставленныеОбъекты)
	
	СопоставленоОбъектов = СопоставленныеОбъекты.Количество();
	
	Если СопоставленоОбъектов = 0
		И (СоответствуетОрганизации Или ИнтеграцияВЕТИС.ИспользуетсяСопоставлениеТорговыхОбъектовКонтрагентов()) Тогда
		
		СсылкаИПредставление.Представление = Новый ФорматированнаяСтрока(
			НСтр("ru = '<не сопоставлено>'"),,
			ЦветаСтиля.ЦветОсобогоТекста,,
			"ОткрытьПредприятияХозяйствующегоСубъекта"
			+ ?(ПустаяСтрока(ИмяХозяйствующегоСубъекта), "", "_" + ИмяХозяйствующегоСубъекта));
		
	ИначеЕсли СопоставленоОбъектов = 1 Тогда
		
		СопоставленныйОбъект = СопоставленныеОбъекты[0];
		
		СсылкаИПредставление.Представление = Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = '%1'"), СопоставленныйОбъект),,,,
			ПолучитьНавигационнуюСсылку(СопоставленныйОбъект));
		
		Список = Новый СписокЗначений;
		Список.Добавить(СопоставленныйОбъект);
		
		СсылкаИПредставление.Ссылка = Список;
		
	ИначеЕсли СопоставленоОбъектов > 1 Тогда
		
		СсылкаИПредставление.Представление = Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = '%1 ( + еще %2 )'"), СопоставленныеОбъекты[0], СопоставленоОбъектов - 1),,,,
			"ОткрытьПредприятияХозяйствующегоСубъекта"
			+ ?(ПустаяСтрока(ИмяХозяйствующегоСубъекта), "", "_" + ИмяХозяйствующегоСубъекта));
		
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(СопоставленныеОбъекты);
		
		СсылкаИПредставление.Ссылка = Список;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает отборы для реквизитов документа по основанию
//
// Параметры:
//  ДокументОснование - ДокументСсылка - ссылка на документ-основание
// 
// Возвращаемое значение:
//  Структура - структура со свойствами, по которым нужно устанавливать отбор:
//  * ГрузоотправительХозяйствующийСубъект - СправочникСсылка - ссылка на элемент справочника,
//  	по которому нужно делать отбор хозяйствующих субъектов грузоотправителя
//  * ГрузоотправительПредприятие - СправочникСсылка - ссылка на элемент справочника,
//  	по которому нужно делать отбор предприятий грузоотправителя
//  * ГрузополучательХозяйствующийСубъект - СправочникСсылка - ссылка на элемент справочника,
//  	по которому нужно делать отбор хозяйствующих субъектов грузополучателя
//  * ГрузополучательПредприятие - СправочникСсылка - ссылка на элемент справочника,
//  	по которому нужно делать отбор предприятий грузополучателя.
//
Функция ОтборыДляРеквизитовДокументаПоОснованию(ТипДокумента, ДокументОснование) Экспорт
	
	ЭлементСоответствияПолейДокумента = ИнтеграцияВЕТИСКлиентСервер.СоответствиеПолейДокументовОснованийИДокументовВЕТИС(
		ТипДокумента, ТипЗнч(ДокументОснование));
	
	Если НЕ(ЭлементСоответствияПолейДокумента = Неопределено) Тогда
		СтруктураВозврата = Новый Структура;
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА
		|ИЗ
		|	Документ.ИмяТаблицыДокумента КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ИмяТаблицыДокумента",ЭлементСоответствияПолейДокумента.Ключ);
		
		Для Каждого СоответствиеПоля Из ЭлементСоответствияПолейДокумента.Значение Цикл
			СтруктураВозврата.Вставить(СоответствиеПоля.Ключ);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"
			|	ИСТИНА",
			СтрШаблон("
			|	%1%2 КАК %3,
			|	ИСТИНА",
				?(ЗначениеЗаполнено(СоответствиеПоля.Значение),"ТаблицаДокумента.","НЕОПРЕДЕЛЕНО"),
				?(ЗначениеЗаполнено(СоответствиеПоля.Значение),СоответствиеПоля.Значение,""),
				СоответствиеПоля.Ключ));
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаДетальныеЗаписи);
		КонецЕсли;
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает право доступа к объекту метаданных,
// полученному по ссылке.
//
// Параметры:
//  Право  - Строка - Название права доступа,
//  Ссылка - Ссылка на объект метаданных.
//
Функция ПравоДоступаПоСсылке(Право, Ссылка) Экспорт
	
	ОбъектМетаданных = Ссылка.Метаданные();
	
	Возврат ПравоДоступа(Право, ОбъектМетаданных);
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

Процедура ВыполнитьСинхронизациюКлассификаторов(ТипыВЕТИС, ПараметрыОбмена = Неопределено) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ТипВЕТИС",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыВЕТИС"));
	ТаблицаЗначений.Колонки.Добавить("ДатаСинхронизации", Новый ОписаниеТипов("Дата"));
	
	Если ТипыВЕТИС = Неопределено Тогда
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.ХозяйствующиеСубъекты;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.ПредприятияРФ;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.ЗарубежныеПредприятия;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.ВидыПродукции;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.Продукция;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.НаименованияПродукции;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.ЕдиницыИзмерения;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.НазначенияГрузов;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.Заболевания;
		
	Иначе
		
		Если ТипЗнч(ТипыВЕТИС) = Тип("Массив") Тогда
			Для Каждого ТипВЕТИС Из ТипыВЕТИС Цикл
				СтрокаТЧ = ТаблицаЗначений.Добавить();
				СтрокаТЧ.ТипВЕТИС = ТипВЕТИС;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ТипыВЕТИС) = Тип("ПеречислениеСсылка.ТипыВЕТИС") Тогда
			СтрокаТЧ = ТаблицаЗначений.Добавить();
			СтрокаТЧ.ТипВЕТИС = ТипыВЕТИС;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.ТипВЕТИС КАК ТипВЕТИС
	|ПОМЕСТИТЬ ВтТипыВЕТИС
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|///////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыВЕТИС.ТипВЕТИС                                             КАК ТипВЕТИС,
	|	ЕСТЬNULL(ТаблицаСинхронизации.ДатаСинхронизации, Неопределено) КАК ДатаСинхронизации
	|ИЗ
	|	ВтТипыВЕТИС КАК ТипыВЕТИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СинхронизацияКлассификаторовВЕТИС КАК ТаблицаСинхронизации
	|		ПО ТаблицаСинхронизации.ТипВЕТИС = ТипыВЕТИС.ТипВЕТИС
	|");
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаЗначений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ДатаСинхронизации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Интервал               = ИнтеграцияВЕТИСКлиентСервер.СтруктураИнтервала(Выборка.ДатаСинхронизации);
		НомерСтраницы          = 1;
		ВыполнятьСинхронизацию = Истина;
		
		Пока ВыполнятьСинхронизацию Цикл
			
			РезультатВыполненияЗапроса = Неопределено;
			Список                     = Неопределено;
			ТаблицаИдентификаторов     = Неопределено;
			
			Если Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ХозяйствующиеСубъекты Тогда
				ОбъектМетаданных = Метаданные.Справочники.ХозяйствующиеСубъектыВЕТИС;
				РезультатВыполненияЗапроса = ЦерберВЕТИСВызовСервера.ИсторияИзмененийХозяйствующихСубъектов(
					Интервал,
					НомерСтраницы,
					500,
					ПараметрыОбмена);
			ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ПредприятияРФ Тогда
				ОбъектМетаданных = Метаданные.Справочники.ПредприятияВЕТИС;
				РезультатВыполненияЗапроса = ЦерберВЕТИСВызовСервера.ИсторияИзмененийПредприятийРФ(
					Интервал,
					НомерСтраницы,
					500,
					ПараметрыОбмена);
			ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ЗарубежныеПредприятия Тогда
				ОбъектМетаданных = Метаданные.Справочники.ПредприятияВЕТИС;
				РезультатВыполненияЗапроса = ЦерберВЕТИСВызовСервера.ИсторияИзмененийЗарубежныхПредприятий(
					Интервал,
					НомерСтраницы,
					500,
					ПараметрыОбмена);
			ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ВидыПродукции Тогда
				ОбъектМетаданных = Метаданные.Справочники.ПродукцияВЕТИС;
				РезультатВыполненияЗапроса = ПродукцияВЕТИСВызовСервера.ИсторияИзмененийВидовПродукции(
					Интервал,
					НомерСтраницы,
					500,
					ПараметрыОбмена);
			ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.Продукция Тогда
				ОбъектМетаданных = Метаданные.Справочники.ПродукцияВЕТИС;
				РезультатВыполненияЗапроса = ПродукцияВЕТИСВызовСервера.ИсторияИзмененийПродукции(
					Интервал,
					НомерСтраницы,
					500,
					ПараметрыОбмена);
			ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.НаименованияПродукции Тогда
				ОбъектМетаданных = Метаданные.Справочники.ПродукцияВЕТИС;
				РезультатВыполненияЗапроса = ПродукцияВЕТИСВызовСервера.ИсторияИзмененийНаименованийПродукции(
					Интервал,
					НомерСтраницы,
					500,
					ПараметрыОбмена);
			ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ЕдиницыИзмерения Тогда
				ОбъектМетаданных = Метаданные.Справочники.ЕдиницыИзмеренияВЕТИС;
				РезультатВыполненияЗапроса = ПрочиеКлассификаторыВЕТИСВызовСервера.ИсторияИзмененийЕдиницИзмерения(
					Интервал,
					НомерСтраницы,
					500,
					ПараметрыОбмена);
			ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.НазначенияГрузов Тогда
				ОбъектМетаданных = Метаданные.Справочники.ЦелиВЕТИС;
				РезультатВыполненияЗапроса = ПрочиеКлассификаторыВЕТИСВызовСервера.ИсторияИзмененийЦелей(
					Интервал,
					НомерСтраницы,
					500,
					ПараметрыОбмена);
			КонецЕсли;
			
			Если РезультатВыполненияЗапроса <> Неопределено
				И РезультатВыполненияЗапроса.Список <> Неопределено
					И РезультатВыполненияЗапроса.Список.Количество() > 0 Тогда
				
				Список = РезультатВыполненияЗапроса.Список;
				
				ДатаСинхронизации = Неопределено;
				Смещение = 0;
				Индекс = -1;
				ТаблицаИдентификаторов = ИнтеграцияВЕТИС.НоваяТаблицаДляСравненияИдентификаторов();
				Для Каждого ЭлементДанных Из Список Цикл
					
					Индекс = Индекс + 1;
					
					Если ДатаСинхронизации = Неопределено
						Или ДатаСинхронизации < ЭлементДанных.updateDate Тогда
						ДатаСинхронизации = ЭлементДанных.updateDate;
						Смещение = 0;
					ИначеЕсли ДатаСинхронизации = ЭлементДанных.updateDate Тогда
						Смещение = Смещение + 1;
					КонецЕсли;
					
					Если Не ЭлементДанных.last Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТЧ = ТаблицаИдентификаторов.Добавить();
					СтрокаТЧ.Идентификатор       = ЭлементДанных.guid;
					СтрокаТЧ.ИдентификаторВерсии = ЭлементДанных.uuid;
					СтрокаТЧ.Индекс              = Индекс;
					
				КонецЦикла;
				
				ЭлементыДанныхСпискаКЗагрузке = ИнтеграцияВЕТИС.ЭлементыДанныхСпискаКЗагрузке(
					Список, ОбъектМетаданных, Истина, Ложь, ТаблицаИдентификаторов);
				
				Если ЭлементыДанныхСпискаКЗагрузке.Количество() > 0 Тогда
					
					НачатьТранзакцию();
					Попытка
						
						Для Каждого ЭлементМассива Из ЭлементыДанныхСпискаКЗагрузке Цикл
							
							СправочникОбъект = ЭлементМассива.Ссылка.ПолучитьОбъект();
							ЭлементДанных = ЭлементМассива.ЭлементДанных;
							
							Если Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ХозяйствующиеСубъекты Тогда
								ИнтеграцияВЕТИС.ЗагрузитьХозяйствующийСубъект(
									ИнтеграцияВЕТИС.ДанныеХозяйствующегоСубъекта(ЭлементДанных),
									СправочникОбъект);
							ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ПредприятияРФ Тогда
								ИнтеграцияВЕТИС.ЗагрузитьПредприятие(
									ИнтеграцияВЕТИС.ДанныеПредприятия(ЭлементДанных),
									СправочникОбъект);
							ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ЗарубежныеПредприятия Тогда
								ИнтеграцияВЕТИС.ЗагрузитьПредприятие(
									ИнтеграцияВЕТИС.ДанныеПредприятия(ЭлементДанных),
									СправочникОбъект);
							ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ВидыПродукции Тогда
								ИнтеграцияВЕТИС.ЗагрузитьВидПродукции(
									ЭлементДанных,
									СправочникОбъект);
							ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.Продукция Тогда
								ИнтеграцияВЕТИС.ЗагрузитьПродукцию(
									ЭлементДанных,
									СправочникОбъект);
							ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.НаименованияПродукции Тогда
								ИнтеграцияВЕТИС.ЗагрузитьНаименованиеПродукции(
									ИнтеграцияВЕТИС.ДанныеНаименованияПродукции(ЭлементДанных),
									СправочникОбъект);
							ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ЕдиницыИзмерения Тогда
								ИнтеграцияВЕТИС.ЗагрузитьЕдиницуИзмерения(
									ЭлементДанных,
									СправочникОбъект);
							ИначеЕсли Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.НазначенияГрузов Тогда
								ИнтеграцияВЕТИС.ЗагрузитьЦель(
									ЭлементДанных,
									СправочникОбъект);
							КонецЕсли;
							
						КонецЦикла;
						
						ИнтеграцияВЕТИС.УстановитьДатуВыполненияСинхронизации(
							Выборка.ТипВЕТИС,
							ДатаСинхронизации, Смещение);
						
						ЗафиксироватьТранзакцию();
						
					Исключение
						
						ОтменитьТранзакцию();
						
						ИнтеграцияВЕТИС.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						
						ВыполнятьСинхронизацию = Ложь;
						
					КонецПопытки;
					
				Иначе
					
					Если Выборка.ДатаСинхронизации = Неопределено
						Или Выборка.ДатаСинхронизации < ДатаСинхронизации Тогда
						
						ИнтеграцияВЕТИС.УстановитьДатуВыполненияСинхронизации(
							Выборка.ТипВЕТИС,
							ДатаСинхронизации, Смещение);
					Иначе
						
						ИнтеграцияВЕТИС.УстановитьДатуВыполненияСинхронизации(
							Выборка.ТипВЕТИС,
							Неопределено, Неопределено);
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ВыполнятьСинхронизацию = Ложь;
				
				ИнтеграцияВЕТИС.УстановитьДатуВыполненияСинхронизации(
					Выборка.ТипВЕТИС,
					Неопределено, Неопределено);
				
			КонецЕсли;
			
			НомерСтраницы = НомерСтраницы + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗагрузитьНезагруженныеЭлементыКлассификаторов(ТипыВЕТИС, ПараметрыОбмена);
	
КонецПроцедуры

Процедура ЗагрузитьНезагруженныеЭлементыКлассификаторов(ТипыВЕТИС = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ТипВЕТИС",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыВЕТИС"));
	ТаблицаЗначений.Колонки.Добавить("ДатаСинхронизации", Новый ОписаниеТипов("Дата"));
	
	Если ТипыВЕТИС = Неопределено Тогда
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.ХозяйствующиеСубъекты;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.ПредприятияРФ;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.ЗарубежныеПредприятия;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.ВидыПродукции;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.Продукция;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.НаименованияПродукции;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.ЕдиницыИзмерения;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.НазначенияГрузов;
		
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ТипВЕТИС = Перечисления.ТипыВЕТИС.Заболевания;
		
	Иначе
		
		Если ТипЗнч(ТипыВЕТИС) = Тип("Массив") Тогда
			Для Каждого ТипВЕТИС Из ТипыВЕТИС Цикл
				СтрокаТЧ = ТаблицаЗначений.Добавить();
				СтрокаТЧ.ТипВЕТИС = ТипВЕТИС;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ТипыВЕТИС) = Тип("ПеречислениеСсылка.ТипыВЕТИС") Тогда
			СтрокаТЧ = ТаблицаЗначений.Добавить();
			СтрокаТЧ.ТипВЕТИС = ТипыВЕТИС;
		КонецЕсли;
		
	КонецЕсли;
	
	Запросы = Новый Массив;
	Если ТаблицаЗначений.Найти(Перечисления.ТипыВЕТИС.ХозяйствующиеСубъекты, "ТипВЕТИС") <> Неопределено Тогда
		Запросы.Добавить(
		"ВЫБРАТЬ
		|	Т.Ссылка        КАК Ссылка,
		|	Т.Идентификатор КАК Идентификатор,
		|	Неопределено    КАК ТипПродукции,
		|	Неопределено    КАК Продукция,
		|	Неопределено    КАК ВидПродукции
		|ИЗ
		|	Справочник.ХозяйствующиеСубъектыВЕТИС КАК Т
		|ГДЕ
		|	Т.ТребуетсяЗагрузка");
	КонецЕсли;

	Если ТаблицаЗначений.Найти(Перечисления.ТипыВЕТИС.ЗарубежныеПредприятия, "ТипВЕТИС") <> Неопределено
		Или ТаблицаЗначений.Найти(Перечисления.ТипыВЕТИС.ПредприятияРФ, "ТипВЕТИС") <> Неопределено Тогда
		Запросы.Добавить(
		"ВЫБРАТЬ
		|	Т.Ссылка        КАК Ссылка,
		|	Т.Идентификатор КАК Идентификатор,
		|	Неопределено    КАК ТипПродукции,
		|	Неопределено    КАК Продукция,
		|	Неопределено    КАК ВидПродукции
		|ИЗ
		|	Справочник.ПредприятияВЕТИС КАК Т
		|ГДЕ
		|	Т.ТребуетсяЗагрузка");
	КонецЕсли;

	Если ТаблицаЗначений.Найти(Перечисления.ТипыВЕТИС.Продукция, "ТипВЕТИС") <> Неопределено
		Или ТаблицаЗначений.Найти(Перечисления.ТипыВЕТИС.ВидыПродукции, "ТипВЕТИС") <> Неопределено
		Или ТаблицаЗначений.Найти(Перечисления.ТипыВЕТИС.НаименованияПродукции, "ТипВЕТИС") <> Неопределено Тогда
		Запросы.Добавить(
		"ВЫБРАТЬ
		|	Т.Ссылка        КАК Ссылка,
		|	Т.Идентификатор КАК Идентификатор,
		|	Т.ТипПродукции  КАК ТипПродукции,
		|	Т.Продукция     КАК Продукция,
		|	Т.ВидПродукции  КАК ВидПродукции
		|ИЗ
		|	Справочник.ПродукцияВЕТИС КАК Т
		|ГДЕ
		|	Т.ТребуетсяЗагрузка");
	КонецЕсли;

	Если ТаблицаЗначений.Найти(Перечисления.ТипыВЕТИС.ЕдиницыИзмерения, "ТипВЕТИС") <> Неопределено Тогда
		Запросы.Добавить(
		"ВЫБРАТЬ
		|	Т.Ссылка        КАК Ссылка,
		|	Т.Идентификатор КАК Идентификатор,
		|	Неопределено    КАК ТипПродукции,
		|	Неопределено    КАК Продукция,
		|	Неопределено    КАК ВидПродукции
		|ИЗ
		|	Справочник.ЕдиницыИзмеренияВЕТИС КАК Т
		|ГДЕ
		|	Т.ТребуетсяЗагрузка");
	КонецЕсли;

	Если ТаблицаЗначений.Найти(Перечисления.ТипыВЕТИС.НазначенияГрузов, "ТипВЕТИС") <> Неопределено Тогда
		Запросы.Добавить(
		"ВЫБРАТЬ
		|	Т.Ссылка        КАК Ссылка,
		|	Т.Идентификатор КАК Идентификатор,
		|	Неопределено    КАК ТипПродукции,
		|	Неопределено    КАК Продукция,
		|	Неопределено    КАК ВидПродукции
		|ИЗ
		|	Справочник.ЦелиВЕТИС КАК Т
		|ГДЕ
		|	Т.ТребуетсяЗагрузка");
	КонецЕсли;

	Если ТаблицаЗначений.Найти(Перечисления.ТипыВЕТИС.Заболевания, "ТипВЕТИС") <> Неопределено Тогда
		Запросы.Добавить(
		"ВЫБРАТЬ
		|	Т.Ссылка        КАК Ссылка,
		|	Т.Идентификатор КАК Идентификатор,
		|	Неопределено    КАК ТипПродукции,
		|	Неопределено    КАК Продукция,
		|	Неопределено    КАК ВидПродукции
		|ИЗ
		|	Справочник.ЗаболеванияВЕТИС КАК Т
		|ГДЕ
		|	Т.ТребуетсяЗагрузка
		|");
	КонецЕсли;

	Запрос = Новый Запрос(СтрСоединить(Запросы, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС") Тогда
			
			ИнтеграцияВЕТИС.ЗагрузитьХозяйствующийСубъектПоИдентификатору(Выборка.Идентификатор, Выборка.Ссылка, Неопределено, ПараметрыОбмена);
			
		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ПредприятияВЕТИС") Тогда
			
			ИнтеграцияВЕТИС.ЗагрузитьПредприятиеПоИдентификатору(Выборка.Идентификатор, Выборка.Ссылка,ПараметрыОбмена);
			
		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ПродукцияВЕТИС") Тогда
			
			Если ЗначениеЗаполнено(Выборка.ВидПродукции) Тогда
				ИнтеграцияВЕТИС.ЗагрузитьНаименованиеПродукцииПоИдентификатору(
					Выборка.Идентификатор,
					Выборка.Ссылка,
					Выборка.ТипПродукции,
					Выборка.Продукция,
					Выборка.ВидПродукции,
					ПараметрыОбмена);
			ИначеЕсли ЗначениеЗаполнено(Выборка.Продукция) Тогда
				ИнтеграцияВЕТИС.ЗагрузитьВидПродукцииПоИдентификатору(
					Выборка.Идентификатор,
					Выборка.Ссылка,
					Выборка.ТипПродукции,
					Выборка.Продукция,
					ПараметрыОбмена);
			ИначеЕсли ЗначениеЗаполнено(Выборка.ТипПродукции) Тогда
				ИнтеграцияВЕТИС.ЗагрузитьПродукциюПоИдентификатору(
					Выборка.Идентификатор,
					Выборка.Ссылка,
					Выборка.ТипПродукции,
					ПараметрыОбмена);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ЕдиницыИзмеренияВЕТИС") Тогда
			
			ИнтеграцияВЕТИС.ЗагрузитьЕдиницуИзмеренияПоИдентификатору(Выборка.Идентификатор, Выборка.Ссылка, ПараметрыОбмена);
			
		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ЦелиВЕТИС") Тогда
			
			ИнтеграцияВЕТИС.ЗагрузитьЦельПоИдентификатору(Выборка.Идентификатор, Выборка.Ссылка, ПараметрыОбмена);
			
		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ЗаболеванияВЕТИС") Тогда
			
			ИнтеграцияВЕТИС.ЗагрузитьЗаболеваниеПоИдентификатору(Выборка.Идентификатор, Выборка.Ссылка, ПараметрыОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьОбмен(ХозяйствующиеСубъекты, УникальныйИдентификатор) Экспорт
	
	ПараметрыОбмена = ИнтеграцияВЕТИС.ПараметрыОбмена(ХозяйствующиеСубъекты, УникальныйИдентификатор);
	
	Для Каждого ХозяйствующийСубъект Из ПараметрыОбмена.ХозяйствующиеСубъектыБезНастроек Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Для хозяйствующего субъекта %1 не заданы настройки подключения к ВетИС'"),
				ХозяйствующийСубъект));
	КонецЦикла;
	
	ИнтеграцияВЕТИС.ПостроитьОчередьСообщений(ПараметрыОбмена);
	
	Если УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Изменения",                 Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",        Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                   Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище", Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Выполнение обмена с ВетИС'");
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыОбмена, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("ИнтеграцияВЕТИСВызовСервера.ВыполнитьОбменДлительнаяОперация",
			ПараметрыОбмена, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ВыполнитьОбменУниверсально(ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПродолжитьВыполнениеОбмена(АдресВоВременномХранилище) Экспорт
	
	ПараметрыОбмена = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Изменения",                 Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",        Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                   Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище", Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыОбмена.УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Выполнение обмена с ВетИС'");
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыОбмена, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("ИнтеграцияВЕТИСВызовСервера.ПродолжитьВыполнениеОбменаДлительнаяОперация",
			ПараметрыОбмена, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ПродолжитьВыполнениеОбменаУниверсально(ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВыполнитьОбменУниверсально(ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",                 Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",        Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                   Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище", Неопределено);
	
	ПараметрыОбмена.ПараметрыПреобразования = ИнтеграцияВЕТИС.ПараметрыПреобразования();
	
	Если ПараметрыОбмена.ВыполнятьСинхронизации Тогда
		// Передача запросов для загрузки входящих ВСД и измененных записей складского журнала.
		ЗаявкиВЕТИС.ПодготовитьЗапросыДляЗагрузкиИзмененныхДанных(ПараметрыОбмена);
	КонецЕсли;
	
	ЕстьСообщенияТребующиеОжидания = ОбработатьОчередьСообщений(ПараметрыОбмена);
	
	ОбработатьОчередьОтложеннойЗагрузкиЭлементовКлассификаторов(ПараметрыОбмена);
	
	ЕстьОшибки = Ложь;
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено Тогда
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВремяОжидания     = Неопределено;
	ТребуетсяОжидание = ЕстьСообщенияТребующиеОжидания
	               Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);
	
	Если ТребуетсяОжидание Тогда
		
		ВремяОжидания = 1;
		Если ПараметрыОбмена.ИнтервалМеждуЗапросамиСписков <> 0 Тогда
			ВремяОжиданияСледующегоЗапроса = ИнтеграцияВЕТИС.ВремяОжиданияСледующегоЗапроса(ПараметрыОбмена);
			Если ВремяОжидания < ВремяОжиданияСледующегоЗапроса Тогда
				ВремяОжидания = ВремяОжиданияСледующегоЗапроса;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ИнтеграцияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ПродолжитьВыполнениеОбменаУниверсально(ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ПродолжитьВыполнениеОбменаУниверсально(ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяОжидание И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ПараметрыПреобразования = Неопределено;
		ПараметрыОбмена.ФоновоеЗадание          = Неопределено;
		
		ВозвращаемоеЗначение.Ожидать                   = ?(ВремяОжидания = 0, Неопределено, ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		ЗагрузитьНезагруженныеЭлементыКлассификаторов(,ПараметрыОбмена);
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПродолжитьВыполнениеОбменаУниверсально(ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",                 Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",        Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                   Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище", Неопределено);
	
	ПараметрыОбмена.ПараметрыПреобразования = ИнтеграцияВЕТИС.ПараметрыПреобразования();
	
	ВыполнитьИтерацию = Истина;
	ВремяОжидания     = 0;
	Пока ВыполнитьИтерацию Цикл
		
		ПараметрыОбмена.НомерИтерации = ПараметрыОбмена.НомерИтерации + 1;
		
		ЕстьСообщенияТребующиеОжидания = ОбработатьОчередьСообщений(ПараметрыОбмена);
		
		ОбработатьОчередьОтложеннойЗагрузкиЭлементовКлассификаторов(ПараметрыОбмена);
		
		ЕстьОшибки = Ложь;
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ТребуетсяОжидание = ЕстьСообщенияТребующиеОжидания
		                Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);
		
		Если ТребуетсяОжидание Тогда
			
			ВремяОжидания = ВремяОжидания(ПараметрыОбмена);
			Если ПараметрыОбмена.ИнтервалМеждуЗапросамиСписков <> 0 Тогда
				ВремяОжиданияСледующегоЗапроса = ИнтеграцияВЕТИС.ВремяОжиданияСледующегоЗапроса(ПараметрыОбмена);
				Если ВремяОжидания < ВремяОжиданияСледующегоЗапроса Тогда
					ВремяОжидания = ВремяОжиданияСледующегоЗапроса;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыОбмена.ОжидатьНаСервере Тогда
				ИнтеграцияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			ИначеЕсли ПараметрыОбмена.ОжидатьНаКлиенте Тогда
				ВыполнитьИтерацию = Ложь;
			КонецЕсли;
			
		Иначе
			
			ВыполнитьИтерацию = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяОжидание И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ПараметрыПреобразования = Неопределено;
		ПараметрыОбмена.ФоновоеЗадание          = Неопределено;
		
		ВозвращаемоеЗначение.Ожидать                   = ?(ВремяОжидания = 0, Неопределено, ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		ЗагрузитьНезагруженныеЭлементыКлассификаторов(,ПараметрыОбмена);
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ВыполнитьОбменДлительнаяОперация(ПараметрыОбмена, АдресРезультата) Экспорт
	
	ВозвращаемоеЗначение = ВыполнитьОбменУниверсально(ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Процедура ПродолжитьВыполнениеОбменаДлительнаяОперация(ПараметрыОбмена, АдресРезультата) Экспорт
	
	ВозвращаемоеЗначение = ПродолжитьВыполнениеОбменаУниверсально(ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Функция ПроверитьРезультатОбработкиЗаявок(ХозяйствующиеСубъекты, СообщениеДокумент, УникальныйИдентификатор) Экспорт
	
	ПараметрыОбмена = ИнтеграцияВЕТИС.ПараметрыОбмена(ХозяйствующиеСубъекты, УникальныйИдентификатор);
	
	Для Каждого ХозяйствующийСубъект Из ПараметрыОбмена.ХозяйствующиеСубъектыБезНастроек Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Для хозяйствующего субъекта %1 не заданы настройки подключения к ВетИС'"),
				ХозяйствующийСубъект));
	КонецЦикла;
	
	ОчередьСообщений     = ИнтеграцияВЕТИС.НоваяТаблицаОчередьСообщений();
	ЗависимостиСообщений = ИнтеграцияВЕТИС.НоваяТаблицаЗависимостиСообщений();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Очередь.ДатаСоздания           КАК ДатаСоздания,
	|	Очередь.Сообщение              КАК Сообщение,
	|	ЕСТЬNULL(Очередь.Сообщение.Операция, Очередь.Операция) КАК Операция,
	|	ЕСТЬNULL(Очередь.Сообщение.ФорматОбмена, НЕОПРЕДЕЛЕНО) КАК ФорматОбмена,
	|	ЕСТЬNULL(Очередь.Сообщение.Документ, НЕОПРЕДЕЛЕНО)     КАК Документ,
	|	Очередь.ХозяйствующийСубъект   КАК ХозяйствующийСубъект,
	|	Очередь.Предприятие            КАК Предприятие,
	|	Очередь.ДокументОснование      КАК ДокументОснование,
	|	Очередь.ПараметрыЗапроса       КАК ПараметрыЗапроса,
	|	Очередь.РеквизитыИсходящегоСообщения КАК РеквизитыИсходящегоСообщения,
	|	Очередь.РеквизитыВходящегоСообщения  КАК РеквизитыВходящегоСообщения,
	|	Очередь.ИдентификаторЗаявки          КАК ИдентификаторЗаявки,
	|	Очередь.ЗагружатьПосле               КАК ЗагружатьПосле
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийВЕТИС КАК Очередь
	|ГДЕ
	|	Очередь.ХозяйствующийСубъект В(&ХозяйствующиеСубъекты)
	|	И Очередь.ИдентификаторЗаявки <> """"
	|");
	
	Запрос.УстановитьПараметр("ХозяйствующиеСубъекты", ПараметрыОбмена.ХозяйствующиеСубъекты);
	
	Если СообщениеДокумент <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + Символы.ПС +
		"И (Очередь.Сообщение В(&СообщениеДокумент)
		|Или ЕСТЬNULL(Очередь.Сообщение.Документ, НЕОПРЕДЕЛЕНО) В(&СообщениеДокумент))";
		Запрос.УстановитьПараметр("СообщениеДокумент", СообщениеДокумент);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.Сообщение) = Тип("Строка") Тогда
			РеквизитыИсходящегоСообщения = Выборка.РеквизитыИсходящегоСообщения.Получить();
		Иначе
			РеквизитыИсходящегоСообщения = Неопределено;
		КонецЕсли;
		
		ЭлементОчереди = ОчередьСообщений.Добавить();
		ЭлементОчереди.ДатаСоздания = Выборка.ДатаСоздания;
		ЭлементОчереди.Сообщение    = Выборка.Сообщение;
		
		ЭлементОчереди.ХозяйствующийСубъект         = Выборка.ХозяйствующийСубъект;
		ЭлементОчереди.Предприятие                  = Выборка.Предприятие;
		ЭлементОчереди.Операция                     = Выборка.Операция;
		ЭлементОчереди.ПараметрыЗапроса             = Выборка.ПараметрыЗапроса;
		ЭлементОчереди.РеквизитыИсходящегоСообщения = Выборка.РеквизитыИсходящегоСообщения;
		ЭлементОчереди.РеквизитыВходящегоСообщения  = Выборка.РеквизитыВходящегоСообщения;
		
		ЭлементОчереди.ДокументОснование   = Выборка.ДокументОснование;
		ЭлементОчереди.ИдентификаторЗаявки = Выборка.ИдентификаторЗаявки;
		
		Если ТипЗнч(Выборка.Сообщение) = Тип("Строка") Тогда
			ЭлементОчереди.ФорматОбмена = РеквизитыИсходящегоСообщения.ФорматОбмена;
			ЭлементОчереди.Документ     = РеквизитыИсходящегоСообщения.Документ;
		Иначе
			ЭлементОчереди.ФорматОбмена = Выборка.ФорматОбмена;
			ЭлементОчереди.Документ     = Выборка.Документ;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОбмена.ОчередьСообщений     = ОчередьСообщений;
	ПараметрыОбмена.ЗависимостиСообщений = ЗависимостиСообщений;
	
	Если УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Изменения",                 Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",        Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                   Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище", Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Выполнение обмена с ВетИС'");
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыОбмена, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("ИнтеграцияВЕТИСВызовСервера.ПродолжитьВыполнениеОбменаДлительнаяОперация",
			ПараметрыОбмена, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ВыполнитьОбменУниверсально(ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция КодРезультатаЛабораторныхИсследований(РезультатЛабораторныхИсследований) Экспорт
	
	Если РезультатЛабораторныхИсследований = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.НетДанных Тогда
		Код = "UNKNOWN";
	ИначеЕсли РезультатЛабораторныхИсследований = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.Положительный Тогда
		Код = "POSITIVE";
	ИначеЕсли РезультатЛабораторныхИсследований = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.Отрицательный Тогда
		Код = "NEGATIVE";
	ИначеЕсли РезультатЛабораторныхИсследований = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.НеПодвергнутаВСЭ Тогда
		Код = "UNFULFILLED";
	ИначеЕсли РезультатЛабораторныхИсследований = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.ИзготовленаИзСырьяПрошедшегоВСЭ Тогда
		Код = "VSERAW";
	ИначеЕсли РезультатЛабораторныхИсследований = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.ПодвергнутаВСЭВПолномОбъеме Тогда
		Код = "VSEFULL";
	КонецЕсли; 
	
	Возврат Код;
	
КонецФункции

#Область ОтправкаЗапросов

// Отправляет запрос для передачи или получения данных.
//
// Параметры:
//  ТекстИсходящегоСообщенияSOAP - Строка - Текст отправляемого запроса в формате SOAP.
//  Сервис - Перечисление.СервисыВЕТИС - Сервис ВЕТИС.
//  SOAPAction - Строка - Операция.
//  НастройкаОбмена - Структура - Настройка обмена.
// 
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса().
//
Функция ОтправитьЗапрос(ТекстИсходящегоСообщенияSOAP, Сервис, SOAPAction, НастройкаОбмена) Экспорт
	
	Если Сервис = ПредопределенноеЗначение("Перечисление.СервисыВЕТИС.КлассификаторыПродукции") Тогда
		АдресРесурса = "platform/services/2.1/ProductService";
	ИначеЕсли Сервис = ПредопределенноеЗначение("Перечисление.СервисыВЕТИС.Цербер") Тогда
		АдресРесурса = "platform/services/2.1/EnterpriseService";
	ИначеЕсли Сервис = ПредопределенноеЗначение("Перечисление.СервисыВЕТИС.Икар") Тогда
		АдресРесурса = "platform/services/2.1/IkarService";
	ИначеЕсли Сервис = ПредопределенноеЗначение("Перечисление.СервисыВЕТИС.ОбработкаЗаявок") Тогда
		АдресРесурса = "platform/services/2.1/ApplicationManagementService";
	ИначеЕсли Сервис = ПредопределенноеЗначение("Перечисление.СервисыВЕТИС.ПрочиеКлассификаторы") Тогда
		АдресРесурса = "platform/services/2.1/DictionaryService";
	ИначеЕсли Сервис = ПредопределенноеЗначение("Перечисление.СервисыВЕТИС.Регионализация") Тогда
		АдресРесурса = "platform/services/2.1/RegionalizationService";
	КонецЕсли;
	
	РезультатОтправкиHTTPЗапроса = ОтправитьДляОбработки(
		ТекстИсходящегоСообщенияSOAP,
		ПортРаботыССервисомВЕТИС(),
		АдресРесурса,
		SOAPAction,
		НастройкаОбмена);
	
	Возврат ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработкаОшибок

// Возвращает текст последней ошибки из протокола обмена
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется показать ошибку обмена
//
// Возвращаемое значение:
//  Строка - текст ошибки обмена.
//
Функция ТекстОшибкиИзПротокола(ДокументСсылка) Экспорт
	
	ТекстОшибки = "";
	
	ДанныеПоследнегоСообщения = Справочники.ВЕТИСПрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "СОшибкой");
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ТекстОшибки = ДанныеПоследнегоСообщения.Описание;
	
	Если ДанныеПоследнегоСообщения.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий
		И ДанныеПоследнегоСообщения.КоличествоЗапросов > 1 Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = '%1 выполнялся с %2 по %3. Количество повторов %4. Ответ от сервиса не получен.'"),
			ТекстОшибки,
			Формат(ДанныеПоследнегоСообщения.ДатаСоздания, "ДФ='dd.MM.yyyy HH:mm'"),
			Формат(ДанныеПоследнегоСообщения.ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm'"),
			ДанныеПоследнегоСообщения.КоличествоЗапросов);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Описание
// Формирует таблицу по ошибкам, возвращаемую сервисом для документа.
// Параметры:
// 	ДокументСсылка - Ссылка на документ.
// Возвращаемое значение:
// 	ТаблицаЗначений, Неопределено - Описание: в случае невозможности разбора возвращает Неопределено
// * НомерСтроки - Number - номер строки из документа.
// * ОписаниеОшибки - String - описание ошибки.
// * КодОшибки - String - код возвращаемой сервисом ошибки.
Функция ОшибкиСервисаПоДокументу(ДокументСсылка) Экспорт
	
	Результат = Неопределено;
	
	ДанныеСообщенияСОшибкой = Справочники.ВЕТИСПрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "СОшибкой");
	Если ДанныеСообщенияСОшибкой <> Неопределено Тогда
		ТекстСообщенияXML = ИнтеграцияИС.ТекстСообщенияXMLИзПротокола(ДанныеСообщенияСОшибкой.Сообщение);
		Результат = ДанныеОшибкиТаблицей(ТекстСообщенияXML);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет запись ошибки в журнал регистрации, добавляя имя события ВЕТИС.
//
// Параметры:
//  Заголовок   - Строка - заголовок сообщения.
//  ТекстОшибки - Строка - текст ошибки.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ОбъектМетаданных = Неопределено, Данные = Неопределено) Экспорт
	
	ИнтеграцияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
		ТекстОшибки,
		НСтр("ru='ВетИС'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ОбъектМетаданных,
		Данные);
	
КонецПроцедуры

#КонецОбласти

// Возвращает имена документов ВЕТИС, основанием для которых может являться указанный документ.
//
// Параметры:
//   ДокументОснование - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИС - документ-основание для документа ВЕТИС
//
// Возвращаемое значение:
//   Массив из Строка - имена документов ВЕТИС
//
Функция ИменаДокументовДляДокументаОснования(ДокументОснование) Экспорт
	
	Возврат РасчетСтатусовОформленияВЕТИС.ИменаДокументовДляДокументаОснования(ДокументОснование);
	
КонецФункции

// Функция - Документы ВетИС по документу основанию
//
// Параметры:
//  ДокументОснование	 - ДокументСсылка - основание по которому надо получить документы ВетИС
// 
// Возвращаемое значение:
//  Структура - см. ИнтеграцияИС.ДокументыИСПоДокументуОснованию()
//
Функция ДокументыВЕТИСПоДокументуОснованию(ДокументОснование) Экспорт
	
	ДокументыВЕТИС = ИнтеграцияИС.ДокументыИСПоДокументуОснованию(
		ДокументОснование,
		Метаданные.РегистрыСведений.СтатусыДокументовВЕТИС);
	
	Возврат ДокументыВЕТИС;
	
КонецФункции

#Область Прочее

// Возвращает параметры для создания номенклатуры.
//
// Параметры:
//   ПродукцияВЕТИС        - СправочникСсылка.ПродукцияВЕТИС        - Продукция ВЕТИС.
//   ЕдиницаИзмеренияВЕТИС - СправочникСсылка.ЕдиницыИзмеренияВЕТИС - Единица измерения ВЕТИС.
//
// Возвращаемое значение:
//   Структура - Структура со свойствами:
//    * НаименованиеВЕТИС     - ОпределяемыйТип.СтрокаВЕТИС      - Наименование номенклатуры.
//    * АртикулВЕТИС          - ОпределяемыйТип.СтрокаВЕТИС      - Артикул номенклатуры.
//    * ШтрихкодВЕТИС         - ОпределяемыйТип.СтрокаВЕТИС      - Штрихкод номенклатуры.
//    * ЕдиницаИзмеренияВЕТИС - ОпределяемыйТип.ЕдиницаИзмерения - Единица измерения.
//
Функция ПараметрыСозданияНоменклатуры(ПродукцияВЕТИС, ЕдиницаИзмеренияВЕТИС) Экспорт
	
	ПараметрыНоменклатуры = Новый Структура;
	ПараметрыНоменклатуры.Вставить("НаименованиеВЕТИС");
	ПараметрыНоменклатуры.Вставить("АртикулВЕТИС");
	ПараметрыНоменклатуры.Вставить("Штрихкод");
	ПараметрыНоменклатуры.Вставить("ЕдиницаИзмеренияВЕТИС");
	
	Если Не ЗначениеЗаполнено(ПродукцияВЕТИС)
		И Не ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС) Тогда
		
		Возврат ПараметрыНоменклатуры;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПродукцияВЕТИС.Наименование КАК Наименование,
	|	ПродукцияВЕТИС.Артикул      КАК Артикул,
	|	ПродукцияВЕТИС.GTIN         КАК Штрихкод
	|ИЗ
	|	Справочник.ПродукцияВЕТИС КАК ПродукцияВЕТИС
	|ГДЕ
	|	ПродукцияВЕТИС.Ссылка = &ПродукцияВЕТИС
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	ЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмеренияВЕТИС КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Ссылка = &ЕдиницаИзмеренияВЕТИС";
	
	Запрос.УстановитьПараметр("ПродукцияВЕТИС",        ПродукцияВЕТИС);
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияВЕТИС", ЕдиницаИзмеренияВЕТИС);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыПродукцииВЕТИС         = РезультатЗапроса[0].Выбрать();
	РеквизитыЕдиницыИзмеренияВЕТИС = РезультатЗапроса[1].Выбрать();
	
	Если РеквизитыПродукцииВЕТИС.Следующий() Тогда
		ПараметрыНоменклатуры.НаименованиеВЕТИС = РеквизитыПродукцииВЕТИС.Наименование;
		ПараметрыНоменклатуры.АртикулВЕТИС      = РеквизитыПродукцииВЕТИС.Артикул;
		ПараметрыНоменклатуры.Штрихкод          = РеквизитыПродукцииВЕТИС.Штрихкод;
	КонецЕсли;
	
	Если РеквизитыЕдиницыИзмеренияВЕТИС.Следующий() Тогда
		ПараметрыНоменклатуры.ЕдиницаИзмеренияВЕТИС = РеквизитыЕдиницыИзмеренияВЕТИС.ЕдиницаИзмерения;
	КонецЕсли;
	
	Возврат ПараметрыНоменклатуры;
	
КонецФункции

// Определяет включение режима использования тестового контура ВЕТИС.
//
// Возвращаемое значение:
//  Булево - Истина, если включен режим работы с тестовым контуром.
//
Функция РежимРаботыСТестовымКонтуромВЕТИС() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("РежимРаботыСТестовымКонтуромВЕТИС");
	
КонецФункции

Функция ДанныеАдресаПоАдресуXML(АдресXML, АдресПредставление) Экспорт
	
	// ДополнительныеПараметры - Структура - параметры контактной информации. 
	//    * БезПредставлений - Булево - Если Истина, то поле представления адреса будет отсутствовать.
	//    * КодыКЛАДР - Булево - Если Истина, то возвращает структуру с кодами КЛАДР по всем частям адреса.
	//    * ПолныеНаименованияСокращений - Булево - Если Истина, то возвращает полное наименование адресных объектов.
	//    * НаименованиеВключаетСокращение - Булево - Если Истина, то поля содержат сокращениям в наименованиях адресных объектов.
	ДополнительныеПараметры = Новый Структура("КодыКЛАДР", Истина);
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(АдресXML, ДополнительныеПараметры);
	
	ДанныеАдреса = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныхАдреса();
	ДанныеАдреса.ПредставлениеАдреса = АдресПредставление;
	
	Результат = ПрочиеКлассификаторыВЕТИСВызовСервера.ДанныеСтраныМира(Справочники.СтраныМира.Россия);
	ДанныеАдреса.СтранаGUID          = Результат.Идентификатор;
	ДанныеАдреса.СтранаПредставление = Результат.Наименование;
	
	Если СведенияОбАдресе.Идентификаторы.Свойство("Регион")
		И ЗначениеЗаполнено(СведенияОбАдресе.Идентификаторы.Регион) Тогда
		ДанныеАдреса.РегионGUID          = Строка(СведенияОбАдресе.Идентификаторы.Регион);
		ДанныеАдреса.РегионПредставление = СтрШаблон("%1 %2", СведенияОбАдресе.РегионСокращение, СведенияОбАдресе.Регион);
	КонецЕсли;
	
	Если СведенияОбАдресе.Идентификаторы.Свойство("Район")
		И ЗначениеЗаполнено(СведенияОбАдресе.Идентификаторы.Район) Тогда
		ДанныеАдреса.РайонGUID          = Строка(СведенияОбАдресе.Идентификаторы.Район);
		ДанныеАдреса.РайонПредставление = СтрШаблон("%1 %2", СведенияОбАдресе.РайонСокращение, СведенияОбАдресе.Район);
	КонецЕсли;
	
	Если СведенияОбАдресе.Идентификаторы.Свойство("Город")
		И ЗначениеЗаполнено(СведенияОбАдресе.Идентификаторы.Город) Тогда
		ДанныеАдреса.ГородGUID          = Строка(СведенияОбАдресе.Идентификаторы.Город);
		ДанныеАдреса.ГородПредставление = СтрШаблон("%1 %2", СведенияОбАдресе.ГородСокращение, СведенияОбАдресе.Город);
	КонецЕсли;
	
	Если СведенияОбАдресе.Идентификаторы.Свойство("НаселенныйПункт")
		И ЗначениеЗаполнено(СведенияОбАдресе.Идентификаторы.НаселенныйПункт) Тогда
		ДанныеАдреса.НаселенныйПунктGUID          = Строка(СведенияОбАдресе.Идентификаторы.НаселенныйПункт);
		ДанныеАдреса.НаселенныйПунктПредставление = СтрШаблон("%1 %2", СведенияОбАдресе.НаселенныйПунктСокращение, СведенияОбАдресе.НаселенныйПункт);
	КонецЕсли;
	
	Если СведенияОбАдресе.Идентификаторы.Свойство("Улица")
		И ЗначениеЗаполнено(СведенияОбАдресе.Идентификаторы.Улица) Тогда
		ДанныеАдреса.УлицаGUID          = Строка(СведенияОбАдресе.Идентификаторы.Улица);
		ДанныеАдреса.УлицаПредставление = СтрШаблон("%1 %2", СведенияОбАдресе.УлицаСокращение, СведенияОбАдресе.Улица);
	КонецЕсли;
	
	ДанныеАдресаПоАдресуXMLАдаптацияПодВЕТИС(ДанныеАдреса, СведенияОбАдресе);
	
	Корпуса = Новый Массив;
	Для Каждого СтрокаТЧ Из СведенияОбАдресе.Корпуса Цикл
		
		Если ВРЕГ(СтрокаТЧ.ТипКорпуса) = ВРЕГ("Строение") Тогда
			Корпуса.Добавить(СтрокаТЧ.Номер);
		Иначе
			Корпуса.Добавить(СтрокаТЧ.ТипКорпуса + " " + СтрокаТЧ.Номер);
		КонецЕсли;
		
	КонецЦикла;
	
	Помещения = Новый Массив;
	Для Каждого СтрокаТЧ Из СведенияОбАдресе.Помещения Цикл
		
		Если ВРЕГ(СтрокаТЧ.ТипПомещения) = ВРЕГ("Офис") Тогда
			Помещения.Добавить(СтрокаТЧ.Номер);
		Иначе
			Помещения.Добавить(СтрокаТЧ.ТипПомещения + " " + СтрокаТЧ.Номер);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВРег(СведенияОбАдресе.Здание.ТипЗдания) = ВРег("Дом") Тогда
		НомерДома = СведенияОбАдресе.Здание.Номер;
	Иначе
		НомерДома = СтрШаблон("%1 %2", СведенияОбАдресе.Здание.ТипЗдания, СведенияОбАдресе.Здание.Номер);
	КонецЕсли;
	
	ДанныеАдреса.НомерДома                = НомерДома;
	ДанныеАдреса.НомерСтроения            = СтрСоединить(Помещения, ", ");
	ДанныеАдреса.НомерОфиса               = СтрСоединить(Помещения, ", ");
	ДанныеАдреса.ПочтовыйИндекс           = СведенияОбАдресе.Индекс;
	
	Возврат ДанныеАдреса;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхВыбора

Функция ПолучитьДанныеВыбораПродукцииСОтборомПоПредприятию(Параметры) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос        = Новый Запрос;
	СтрокаПоиска  = Параметры.СтрокаПоиска;
	
	УсловиеОтбора = "ТаблицаПроизводители.Производитель = &Производитель";
	Запрос.УстановитьПараметр("Производитель", Параметры.ПредприятиеОтбор);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		ПоискПоПодстроке = Параметры.Свойство("СпособПоискаСтроки")
			И Параметры.СпособПоискаСтроки = СпособПоискаСтрокиПриВводеПоСтроке.ЛюбаяЧасть;
	
			УсловиеОтбора = УсловиеОтбора + "
			|	И Таблица.Наименование ПОДОБНО(&СтрокаПоиска)";
			
		Запрос.УстановитьПараметр("СтрокаПоиска", ?(ПоискПоПодстроке,"%","")+СтрокаПоиска+"%");
		
	КонецЕсли;
	
	РеквизитыОтбора = ИнтеграцияИСПовтИсп.РеквизитыСправочника("ПродукцияВЕТИС");
	
	Для Каждого КлючИЗначениеОтбора Из Параметры.Отбор Цикл
		Если РеквизитыОтбора.Свойство(КлючИЗначениеОтбора.Ключ) Тогда
			УсловиеОтбора = УсловиеОтбора + "
				|	И Таблица." + КлючИЗначениеОтбора.Ключ + " В (&" + КлючИЗначениеОтбора.Ключ + ")";
			Запрос.УстановитьПараметр(КлючИЗначениеОтбора.Ключ,КлючИЗначениеОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
	|	Таблица.Ссылка          КАК Ссылка,
	|	Таблица.ПометкаУдаления КАК ПометкаУдаления,
	|	Таблица.Наименование    КАК Наименование
	|ИЗ
	|	Справочник.ПродукцияВЕТИС КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПродукцияВЕТИС.Производители КАК ТаблицаПроизводители
	|		ПО ТаблицаПроизводители.Ссылка = Таблица.Ссылка
	|ГДЕ
	|	&УсловиеОтбора
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления,
	|	Наименование";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора" ,УсловиеОтбора);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
	
	ДанныеВыбора = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстЗначения = СокрЛП(Выборка.Наименование);
		
		ЗначениеСписка = Новый Структура;
		ЗначениеСписка.Вставить("Значение", Выборка.Ссылка);
		ЗначениеСписка.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
	
		ДанныеВыбора.Добавить(ЗначениеСписка, ТекстЗначения);
		
	КонецЦикла;

	Возврат ДанныеВыбора;
	
КонецФункции

#КонецОбласти

#Область ИСМП

// Возвращает список продукции ВетИС сопоставленной с номенклатурой, характеристикой, серией
// 
// Параметры:
//   Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура
//   Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
//   Серия          - ОпределяемыйТип.СерияНоменклатуры          - серия
// Возвращаемое значение:
//   Массив Из Справочникссылка.ПродукцияВЕТИС - сопоставленная продукция.
Функция СопоставленнаяПродукция(Номенклатура, Характеристика, Серия) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыВЕТИС.Продукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|ГДЕ
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура = &Номенклатура
	|	И СоответствиеНоменклатурыВЕТИС.Характеристика = &Характеристика
	|	И %1";
	
	УсловиеНаСерию = "ИСТИНА";
	Если ЗначениеЗаполнено(Серия) Тогда
		УсловиеНаСерию = "СоответствиеНоменклатурыВЕТИС.Серия = &Серия";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(ТекстЗапроса, УсловиеНаСерию);
	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Серия",          Серия);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Продукция");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Определяет, используется ли ограничение на выбор продукции третьего уровня на заданную дату.
// 
// Параметры:
//  ДатаОперации - Дата - Дата, на которую определяется использование ограничения.
// Возвращаемое значение:
//  Булево - Используется ли ограничение.
//
Функция ИспользуетсяОграничениеВыбораПродукцииТретьегоУровня(Знач ДатаОперации) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДатаЗапрета = Константы.ДатаЗапретаИспользованияПродукцииТретьегоУровняВЕТИС.Получить();
	
	Если Не ЗначениеЗаполнено(ДатаОперации) Тогда
		ДатаОперации = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(ДатаЗапрета) И ДатаОперации >= ДатаЗапрета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Отправляет POST запрос для передачи данных на сервер ВетИС.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КодСостояния - Число - Код состояния (ответа) HTTP-сервера.
//   * Заголовки - Соответствие - HTTP-заголовки ответа сервера.
//   * ТекстОтвета - Строка - Текст ответа.
//
Функция ОтправитьДляОбработки(ТелоЗапроса, Порт, АдресРесурса, SOAPAction, НастройкаОбмена)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КодСостояния");
	ВозвращаемоеЗначение.Вставить("Заголовки");
	ВозвращаемоеЗначение.Вставить("ТекстОтвета");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");

	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "text/xml; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("SOAPAction", SOAPAction);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	АдресСервера = АдресСервераВЕТИС();
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru='Ошибка отправки POST-запроса к серверу ВетИС %1'"),
		АдресСервера);
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	ТекстОшибки = "";
	Попытка
		
		Соединение = Новый HTTPСоединение(
			АдресСервера,
			Порт,
			НастройкаОбмена.Логин,
			НастройкаОбмена.Пароль,
			ИнтернетПрокси,
			НастройкаОбмена.Таймаут, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		HTTPОтвет = Неопределено;
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='ВетИС'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
	Если HTTPОтвет <> Неопределено Тогда
		ВозвращаемоеЗначение.КодСостояния = HTTPОтвет.КодСостояния;
		ВозвращаемоеЗначение.Заголовки    = HTTPОтвет.Заголовки;
		ВозвращаемоеЗначение.ТекстОтвета  = HTTPОтвет.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса)
	
	КодСостояния = РезультатОтправкиHTTPЗапроса.КодСостояния;
	ТекстОтвета  = РезультатОтправкиHTTPЗапроса.ТекстОтвета;
	
	Если ЗначениеЗаполнено(ТекстОтвета) Тогда
		
		Возврат ОтветТекстСообщенияXMLПолучен(ТекстОтвета, КодСостояния);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(КодСостояния) Тогда
			ТекстСообщенияXMLОтправлен = Ложь;
			ЗаголовокОшибки = НСтр("ru = 'HTTP-запрос не отправлен.'");
		Иначе
			ТекстСообщенияXMLОтправлен = Истина;
			ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.'"), КодСостояния);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.ТекстОшибки) Тогда
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + РезультатОтправкиHTTPЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ЗаголовокОшибки;
		КонецЕсли;
		
		Возврат ОтветТекстСообщенияXMLНеПолучен(
			ТекстОшибки,
			ТекстСообщенияXMLОтправлен,
			КодСостояния);
		
	КонецЕсли;
	
КонецФункции

// Инициализирует структуру результата исходящего сообщения после получения ответа.
// 
// Возвращаемое значение:
// Структура:
//   ТекстСообщенияXMLОтправлен  - Булево - признак того, что сообщение отправлено.
//   ТекстСообщенияXMLПолучен    - Булево - признак того, что сообщение получено.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияXML  - Строка - текст ответа, на отправленное сообщение.
//
Функция ОтветТекстСообщенияXMLПолучен(ТекстВходящегоСообщенияSOAP, КодСостояния = 200)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLОтправлен",  Истина);
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLПолучен",    Истина);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния",                КодСостояния);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                 "");
	ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияSOAP", ТекстВходящегоСообщенияSOAP);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Инициализирует структуру результата исходящего сообщения после отправки сообщения, но до получения ответа.
// 
// Возвращаемое значение:
// Структура:
//   ТекстСообщенияXMLОтправлен  - Булево - признак того, что сообщение отправлено.
//   ТекстСообщенияXMLПолучен    - Булево - признак того, что сообщение получено.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияXML  - Строка - текст ответа, на отправленное сообщение.
//
Функция ОтветТекстСообщенияXMLНеПолучен(Ошибка, ТекстСообщенияXMLОтправлен, КодСостояния = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLОтправлен",  ТекстСообщенияXMLОтправлен);
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLПолучен",    Ложь);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния",                КодСостояния);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                 Строка(Ошибка));
	ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияSOAP", "");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает адрес сервера ВетИС.
//
// Возвращаемое значение:
//  Строка - Адрес сервера.
Функция АдресСервераВЕТИС() Экспорт
	
	Если РежимРаботыСТестовымКонтуромВЕТИС() Тогда
		Возврат "api2.vetrf.ru";
	Иначе
		Возврат "api.vetrf.ru";
	КонецЕсли;
	
КонецФункции

// Функция - Порт работы с сервисом ВЕТИС
// 
// Возвращаемое значение:
//  Число - Порт для работы с сервисом в зависимости от установленного флага "Тестовый контур"
//
Функция ПортРаботыССервисомВЕТИС()
	
	Если РежимРаботыСТестовымКонтуромВЕТИС() Тогда
		Возврат 8002;
	КонецЕсли;
	Возврат 443;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому формируется сообщение.
//  ДальнейшееДействие - Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив - Сообщения к передаче см. ИнтеграцияВЕТИС.СтруктураСообщенияXML().
//
Функция СообщениеКПередачеXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры = Неопределено)
	
	ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	ВозвращаемоеЗначение = МенеджерОбъекта.СообщениеКПередачеXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область ОчередьСообщений

Функция ОбработатьОчередьСообщений(ПараметрыОбмена)
	
	СтруктураПоискаСтопЛист = Новый Структура("ХозяйствующийСубъект, Предприятие");
	
	ПовторитьЦиклОбработкиСообщений = Истина;
	МинимальноеКоличествоИтераций   = Неопределено;
	ЕстьЭлементыОчередиКУдалению    = Ложь;
	КоличествоОбработанныхСообщений = Неопределено;
	КоличествоСообщенийВОбработке   = Неопределено;
	
	Пока ПовторитьЦиклОбработкиСообщений Цикл
		
		ПовторитьЦиклОбработкиСообщений = Ложь;
		
		КоличествоОбработанныхСообщений = 0;
		КоличествоСообщенийВОбработке   = 0;
		
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
			
			СтруктураПоискаСтопЛист.ХозяйствующийСубъект = ЭлементОчереди.ХозяйствующийСубъект;
			СтруктураПоискаСтопЛист.Предприятие          = ЭлементОчереди.Предприятие;
			
			Если ПараметрыОбмена.СтопЛист.НайтиСтроки(СтруктураПоискаСтопЛист).Количество() > 0 Тогда
				// При выполнении обмена по текущей паре ХозяйствующийСубъект - Предприятие
				// были ошибки. Пропустим сообщения.
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыОбмена.КоличествоПопытокВосстановленияДокументов <= 0 Тогда
				ЕстьПопыткиВосстановления = Истина;
			Иначе
				ЕстьПопыткиВосстановления = (ЭлементОчереди.КоличествоПопытокВосстановления < ПараметрыОбмена.КоличествоПопытокВосстановленияДокументов);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЭлементОчереди.ИдентификаторЗаявки) Тогда
				
				Если Не ИнтеграцияВЕТИС.ИнтервалМеждуЗапросамиСписковВыдержан(ПараметрыОбмена, ЭлементОчереди.Операция) Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныеЗависимости = Неопределено;
				Если ИнтеграцияВЕТИС.СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости)
					И Не ЭлементОчереди.ЕстьОшибкиСервиса
					И (ЕстьПопыткиВосстановления Или ЭлементОчереди.ПроверенаКорректностьОформления) Тогда
					
					КоличествоОбработанныхСообщений = КоличествоОбработанныхСообщений + 1;
					ИнтеграцияВЕТИС.ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена);
					
				ИначеЕсли НайденныеЗависимости <> Неопределено Тогда
					
					// Если зависимых сообщений нет в очереди - сообщение удаляется из очереди (Защита от зацикливания).
					Для Каждого НайденныеЗависимостиЭлементДанных Из НайденныеЗависимости Цикл
						Если ПараметрыОбмена.ОчередьСообщений.Найти(НайденныеЗависимостиЭлементДанных.Сообщение2, "Сообщение") = Неопределено Тогда
							ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				НайденныеЗависимости = Неопределено;
				Если ИнтеграцияВЕТИС.СообщениеМожноЗагружать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости) Тогда
					
					КоличествоОбработанныхСообщений = КоличествоОбработанныхСообщений + 1;
					
					ЕстьЗависимыеСообщенияОжидающиеПередачи = ИнтеграцияВЕТИС.ЕстьЗависимыеСообщенияОжидающиеПередачи(ЭлементОчереди, ПараметрыОбмена);
					ЕстьЗависимыеСообщенияОжидающиеЗагрузки = ИнтеграцияВЕТИС.ЕстьЗависимыеСообщенияОжидающиеЗагрузки(ЭлементОчереди, ПараметрыОбмена);
					
					КоличествоЭлементовОчередиДоОбработки = ПараметрыОбмена.ОбработанныеЭлементыОчереди.Количество();
					ЗаявкиВЕТИС.ЗагрузитьРезультатОбработкиЗаявки(ЭлементОчереди, ПараметрыОбмена);
					КоличествоЭлементовОчередиПослеОбработки = ПараметрыОбмена.ОбработанныеЭлементыОчереди.Количество();
					
					Если КоличествоЭлементовОчередиПослеОбработки = КоличествоЭлементовОчередиДоОбработки
						Или ЭлементОчереди.ЕстьОшибкиСервиса Тогда
						
						КоличествоСообщенийВОбработке = КоличествоСообщенийВОбработке + 1;
						
						Если ЭлементОчереди.КоличествоИтераций = Неопределено Тогда
							ЭлементОчереди.КоличествоИтераций = 1;
						Иначе
							ЭлементОчереди.КоличествоИтераций    = ЭлементОчереди.КоличествоИтераций + 1;
							ЭлементОчереди.ДатаСледующейИтерации = ТекущаяДатаСеанса() + ВремяОжиданияИтерации(ЭлементОчереди.КоличествоИтераций);
						КонецЕсли;
						
					КонецЕсли;
					
					// Минимальное время ожидания перед выполнением следующей итерации.
					Если (ЕстьЗависимыеСообщенияОжидающиеПередачи Или ЕстьЗависимыеСообщенияОжидающиеЗагрузки)
						И КоличествоЭлементовОчередиПослеОбработки > КоличествоЭлементовОчередиДоОбработки Тогда
						
						ПараметрыОбмена.НомерИтерации = 1;
						
						ПовторитьЦиклОбработкиСообщений = Истина;
						
					КонецЕсли;
					
				ИначеЕсли НайденныеЗависимости <> Неопределено Тогда
					
					// Если зависимых сообщений нет в очереди - сообщение удаляется из очереди (Защита от зацикливания).
					Для Каждого НайденныеЗависимостиЭлементДанных Из НайденныеЗависимости Цикл
						Если ПараметрыОбмена.ОчередьСообщений.Найти(НайденныеЗависимостиЭлементДанных.Сообщение2, "Сообщение") = Неопределено Тогда
							ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементОчереди.КоличествоИтераций) Тогда
				Если МинимальноеКоличествоИтераций = Неопределено Тогда
					МинимальноеКоличествоИтераций = ЭлементОчереди.КоличествоИтераций;
				ИначеЕсли ЭлементОчереди.КоличествоИтераций < МинимальноеКоличествоИтераций Тогда
					МинимальноеКоличествоИтераций = ЭлементОчереди.КоличествоИтераций;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭлементОчереди.КоличествоПопытокВосстановления >= ПараметрыОбмена.КоличествоПопытокВосстановленияДокументов
				И ИнтеграцияВЕТИС.СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, Неопределено) Тогда
				ЕстьЭлементыОчередиКУдалению = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		// Действия после основного цикла очереди.
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОбработанныеЭлементыОчереди Цикл
			Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчереди) <> -1 Тогда
				ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчереди);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Очистить();
		
		Если КоличествоСообщенийВОбработке <> КоличествоОбработанныхСообщений Тогда
			
			ПараметрыОбмена.НомерИтерации = 1;
			
			ПовторитьЦиклОбработкиСообщений = Истина;
			
		КонецЕсли;
		
		// Запрос ВСД и записей складского учета при ошибке сервиса.
		ИнтеграцияВЕТИС.ПодготовитьЗапросыДляПроверкиКорректностиОформления(ПараметрыОбмена, ПовторитьЦиклОбработкиСообщений);
		
	КонецЦикла;
	
	Если ЕстьЭлементыОчередиКУдалению Тогда
		
		ЭлементыОчередиКУдалению = Новый Массив;
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
			
			Если ЭлементОчереди.КоличествоПопытокВосстановления > 0
				И ЭлементОчереди.КоличествоПопытокВосстановления >= ПараметрыОбмена.КоличествоПопытокВосстановленияДокументов Тогда
				
				ИнтеграцияВЕТИС.ДобавитьСообщениеПриОшибкеВИзменения(
					ЭлементОчереди,
					ЭлементОчереди.ТекстОшибки, Истина, ПараметрыОбмена);
				ЭлементыОчередиКУдалению.Добавить(ЭлементОчереди);
				
			ИначеЕсли ЭлементОчереди.ЕстьОшибкиСервиса
				И ПараметрыОбмена.КоличествоПопытокВосстановленияДокументов = 0 Тогда
				
				ИнтеграцияВЕТИС.ДобавитьСообщениеПриОшибкеВИзменения(
					ЭлементОчереди,
					ЭлементОчереди.ТекстОшибки, Истина, ПараметрыОбмена);
				ЭлементыОчередиКУдалению.Добавить(ЭлементОчереди);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЭлементОчереди Из ЭлементыОчередиКУдалению Цикл
			ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчереди);
		КонецЦикла;
		
	КонецЕсли;
	
	Если (МинимальноеКоличествоИтераций <> Неопределено И МинимальноеКоличествоИтераций > 20) Тогда
		
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
			
			ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не удалось получить результат операции ""%1"" (id = %2)
					      |При следующем выполнении обмена с ВетИС будет выполнена повторная попытка получения результата.'"),
					ЭлементОчереди.Операция,
					ЭлементОчереди.ИдентификаторЗаявки);
			
			ИнтеграцияВЕТИС.ДобавитьСообщениеПриОшибкеВИзменения(ЭлементОчереди, ТекстОшибки, Ложь, ПараметрыОбмена);
			
		КонецЦикла;
		
		ПараметрыОбмена.ОчередьСообщений.Очистить();
		
	КонецЕсли;
	
	Возврат КоличествоСообщенийВОбработке <> Неопределено И КоличествоСообщенийВОбработке > 0;
	
КонецФункции

Процедура ОбработатьОчередьОтложеннойЗагрузкиЭлементовКлассификаторов(ПараметрыОбмена)
	
	Для Каждого ЭлементДанных Из ПараметрыОбмена.КОтложеннойЗагрузке Цикл
		
		ТекущийКлюч      = ЭлементДанных.Ключ;
		ЗагруженныеКлючи = Новый Массив;
		
		Для Каждого ИдентификаторСсылка Из ЭлементДанных.Значение Цикл
			
			ЗагруженныйЭлемент = Неопределено;
			
			Если ТекущийКлюч = "ХозяйствующиеСубъектыВЕТИС" Тогда
				
				ЗагруженныйЭлемент = ИнтеграцияВЕТИС.ЗагрузитьХозяйствующийСубъектПоИдентификатору(
					ИдентификаторСсылка.Ключ,
					ИдентификаторСсылка.Значение,,
					ПараметрыОбмена);
				
			ИначеЕсли ТекущийКлюч = "ПредприятияВЕТИС" Тогда
				
				ЗагруженныйЭлемент = ИнтеграцияВЕТИС.ЗагрузитьПредприятиеПоИдентификатору(
					ИдентификаторСсылка.Ключ,
					ИдентификаторСсылка.Значение,
					ПараметрыОбмена);
				
			ИначеЕсли ТекущийКлюч = "ПродукцияВЕТИС_НаименованиеПродукции" Тогда
				
				СправочникСсылка = ИдентификаторСсылка.Значение;
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СправочникСсылка,"ТипПродукции,Продукция,ВидПродукции");
				ТипПродукции = Реквизиты.ТипПродукции;
				Продукция    = Реквизиты.Продукция;
				ВидПродукции = Реквизиты.ВидПродукции;
				
				ЗагруженныйЭлемент = ИнтеграцияВЕТИС.ЗагрузитьНаименованиеПродукцииПоИдентификатору(
					ИдентификаторСсылка.Ключ, СправочникСсылка,
					ТипПродукции, Продукция, ВидПродукции,
					ПараметрыОбмена);
				
			ИначеЕсли ТекущийКлюч = "ПродукцияВЕТИС_ВидПродукции" Тогда
				
				СправочникСсылка = ИдентификаторСсылка.Значение;
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СправочникСсылка,"ТипПродукции,Продукция");
				ТипПродукции = Реквизиты.ТипПродукции;
				Продукция    = Реквизиты.Продукция;
				
				ЗагруженныйЭлемент = ИнтеграцияВЕТИС.ЗагрузитьВидПродукцииПоИдентификатору(
					ИдентификаторСсылка.Ключ, СправочникСсылка,
					ТипПродукции, Продукция,
					ПараметрыОбмена);
				
			ИначеЕсли ТекущийКлюч = "ПродукцияВЕТИС_Продукция" Тогда
				
				СправочникСсылка = ИдентификаторСсылка.Значение;
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СправочникСсылка,"ТипПродукции");
				ТипПродукции = Реквизиты.ТипПродукции;
				
				ЗагруженныйЭлемент = ИнтеграцияВЕТИС.ЗагрузитьПродукциюПоИдентификатору(
					ИдентификаторСсылка.Ключ, СправочникСсылка,
					ТипПродукции,
					ПараметрыОбмена);
				
			ИначеЕсли ТекущийКлюч = "ЕдиницыИзмеренияВЕТИС" Тогда
				
				ЗагруженныйЭлемент = ИнтеграцияВЕТИС.ЗагрузитьЕдиницуИзмеренияПоИдентификатору(
					ИдентификаторСсылка.Ключ,
					ИдентификаторСсылка.Значение,
					ПараметрыОбмена);
				
			ИначеЕсли ТекущийКлюч = "ЦелиВЕТИС" Тогда
				
				ЗагруженныйЭлемент = ИнтеграцияВЕТИС.ЗагрузитьЦельПоИдентификатору(
					ИдентификаторСсылка.Ключ,
					ИдентификаторСсылка.Значение,
					ПараметрыОбмена);
				
			ИначеЕсли ТекущийКлюч = "ЗаболеванияВЕТИС" Тогда
				
				ЗагруженныйЭлемент = ИнтеграцияВЕТИС.ЗагрузитьЗаболеваниеПоИдентификатору(
					ИдентификаторСсылка.Ключ,
					ИдентификаторСсылка.Значение,
					ПараметрыОбмена);
				
			КонецЕсли;
			
			Если ЗагруженныйЭлемент <> Неопределено Тогда
				ЗагруженныеКлючи.Добавить(ИдентификаторСсылка.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЗагруженныйКлюч Из ЗагруженныеКлючи Цикл
			
			ЭлементДанных.Значение.Удалить(ЗагруженныйКлюч);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВремяОжиданияИтерации(НомерИтерации)
	
	Если НомерИтерации <= 1 Тогда
		ВремяОжидания = 5;
	ИначеЕсли НомерИтерации < 15 Тогда
		ВремяОжидания = 5 * Pow(1.4, НомерИтерации - 1);
	Иначе
		ВремяОжидания = 120;
	КонецЕсли;
	
	Возврат ВремяОжидания;
	
КонецФункции

Функция ВремяОжидания(ПараметрыОбмена)
	
	ВремяОжидания = ВремяОжиданияИтерации(ПараметрыОбмена.НомерИтерации);
	
	ВремяОжиданияСледующегоЗапроса = ИнтеграцияВЕТИС.ВремяОжиданияСледующегоЗапроса(ПараметрыОбмена);
	
	Если Не ПараметрыОбмена.ОжидатьНаСервере
		И ПараметрыОбмена.ОчередьСообщений.Количество() > 0
		И ВремяОжиданияСледующегоЗапроса > ВремяОжидания Тогда
		
		ВОчередиЕстьЗапросыСписков = Ложь;
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
			Если ИнтеграцияВЕТИС.ЭтоЗапросСписка(ЭлементОчереди) Тогда
				ВОчередиЕстьЗапросыСписков = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВОчередиЕстьЗапросыСписков Тогда
			ВремяОжидания = ВремяОжиданияСледующегоЗапроса;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Окр(ВремяОжидания, 0, РежимОкругления.Окр15как20);
	
КонецФункции

#КонецОбласти

// Описание
// Формирует таблицу по ошибкам, возвращенным из сервиса в формате XML.
// Параметры:
// 	ТекстОшибкиXML - String - сообщение в формате XML.
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * НомерСтроки - Number - номер строки из id сообщения при наличии.
// * ОписаниеОшибки - String -описание ошибки.
// * КодОшибки - String -код возвращаемой сервисом ошибки.
Функция ДанныеОшибкиТаблицей(ТекстОшибкиXML)
	
	Результат = Новый ТаблицаЗначений();
	
	КЧ = Новый КвалификаторыЧисла(10);
	КС = Новый КвалификаторыСтроки(30);
	Результат.Колонки.Добавить("НомерСтрокиСОшибкой", Новый ОписаниеТипов("Число", КЧ));
	Результат.Колонки.Добавить("ОписаниеОшибки",      Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодОшибки",           Новый ОписаниеТипов("Строка", КС));
	
	Попытка
		
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(ТекстОшибкиXML);
		
		Фабрика = Новый ФабрикаXDTO;
		ОшибкаXDTO = Фабрика.ПрочитатьXML(Чтение);
		
		Если ОшибкаXDTO.Свойства().Получить("Body") <> Неопределено
			И ОшибкаXDTO.Body.Свойства().Получить("receiveApplicationresultResponse") <> Неопределено
			И ОшибкаXDTO.Body.receiveApplicationresultResponse.Свойства().Получить("application") <> Неопределено
			И ОшибкаXDTO.Body.receiveApplicationresultResponse.application.Свойства().Получить("Errors") <> Неопределено
			И ОшибкаXDTO.Body.receiveApplicationresultResponse.application.Errors.Свойства().Получить("Error") <> Неопределено Тогда
			
			Если ТипЗнч(ОшибкаXDTO.Body.receiveApplicationresultResponse.application.Errors.Error) = Тип("ОбъектXDTO") Тогда
				Ошибка = ОшибкаXDTO.Body.receiveApplicationresultResponse.application.Errors.Error;
				ЗаполнитьЗначенияСвойств(Результат.Добавить(), ПоляОшибки(Ошибка));
			Иначе
				Для Каждого Ошибка Из ОшибкаXDTO.Body.receiveApplicationresultResponse.application.Errors.Error Цикл
					ПоляОшибки = ПоляОшибки(Ошибка);
					ЗаполнитьЗначенияСвойств(Результат.Добавить(), ПоляОшибки);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.НомерСтрокиСОшибкой = -1;
		НоваяСтрока.ОписаниеОшибки      = ТекстОшибкиXML;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Описание
// Возвращает структуру с разобранными полями ошибки для строки XDTO.
// Параметры:
// 	ОшибкаXDTO
// Возвращаемое значение:
// 	Структура - Описание:
// * НомерСтрокиСОшибкой - Number - номер строки из документа.
// * ОписаниеОшибки - String - описание ошибки.
// * КодОшибки - String - код возвращаемой сервисом ошибки.
Функция ПоляОшибки(ОшибкаXDTO)
	
	Результат = Новый Структура;
	Результат.Вставить("НомерСтрокиСОшибкой", -1);
	Результат.Вставить("ОписаниеОшибки",      "");
	Результат.Вставить("КодОшибки",           "");
	
	Если ОшибкаXDTO.Свойства().Получить("qualifier") <> Неопределено
		И ОшибкаXDTO.qualifier <> "" Тогда
		ОписаниеЧисла = Новый ОписаниеТипов("Число");
		НомерСтрокиСтрокой = СтрЗаменить(ОшибкаXDTO.qualifier, "id", "");
		Результат.НомерСтрокиСОшибкой = ОписаниеЧисла.ПривестиЗначение(НомерСтрокиСтрокой);
	КонецЕсли;
	
	Результат.ОписаниеОшибки = ОшибкаXDTO.Последовательность().ПолучитьТекст(0);
	Если ОшибкаXDTO.Свойства().Получить("Code") <> Неопределено Тогда
		Результат.КодОшибки = ОшибкаXDTO.Code;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредприятияХозяйствующегоСубъекта(ХозяйствующийСубъектВЕТИС) Экспорт 
	
	Возврат Справочники.ХозяйствующиеСубъектыВЕТИС.ПредприятияХозяйствующегоСубъекта(ХозяйствующийСубъектВЕТИС);
	
КонецФункции

Функция ПродукцияПринадлежитТипуЖивыеЖивотные(Продукция) Экспорт
	
	Если ТипЗнч(Продукция) = Тип("Массив") Тогда
		СоответствиеВозврата = Новый Соответствие;
		
		Для каждого Строка Из Продукция Цикл
			СоответствиеВозврата.Вставить(
				Строка,
				СпецификаПродукции(Строка).Живая);
		КонецЦикла;
		
		Возврат СоответствиеВозврата;
		
	Иначе
		Специфика = СпецификаПродукции(Продукция);
		Возврат Специфика.Живая;
	КонецЕсли;

КонецФункции

Функция ПродукцияПринадлежитТипуСыроеМолоко(Продукция) Экспорт
	
	Если ТипЗнч(Продукция) = Тип("Массив") Тогда
		СоответствиеВозврата = Новый Соответствие;
		
		Для Каждого Строка Из Продукция Цикл
			СоответствиеВозврата.Вставить(
				Строка,
				СпецификаПродукции(Строка).СыроеМолоко);
		КонецЦикла;
		
		Возврат СоответствиеВозврата;
		
	Иначе
		Специфика = СпецификаПродукции(Продукция);
		Возврат Специфика.СыроеМолоко;
	КонецЕсли;

КонецФункции

Функция ПараметрыФорматовДатПродукции()

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ФорматДатыВыработки");
	СтруктураРезультата.Вставить("ФорматСрокаГодности");
	СтруктураРезультата.Вставить("ФорматДатыВыработкиМассивом", Новый Массив);
	СтруктураРезультата.Вставить("ФорматСрокаГодностиМассивом", Новый Массив);
	СтруктураРезультата.Вставить("Живая",                       Ложь);
	СтруктураРезультата.Вставить("СыроеМолоко",                 Ложь);
	
	Возврат СтруктураРезультата;

КонецФункции // ПараметрыФорматовДатПродукции()

Функция РазобратьСтрокуФорматовДатВПеречисление(СтрокаФорматов)

	МассивФорматныхСтрок = СтрРазделить(СтрокаФорматов, ";", Ложь);
	Результат = Новый Массив;
	
	Для каждого Строка Из МассивФорматныхСтрок Цикл
		Если Метаданные.Перечисления.ТочностьЗаполненияПериодаВЕТИС.ЗначенияПеречисления.Найти(Строка) <> Неопределено Тогда
			Результат.Добавить(Перечисления.ТочностьЗаполненияПериодаВЕТИС[Строка]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // РазобратьСтрокуФорматовДатВПеречисление() 

//Возвращает структуру с форматами дат для продукции/вида/типа продукции из макета "СпецифическаяПродукция" 
// обработки "КлассификаторыВЕТИС".
//
// Параметры:
//	Продукция  - СправочникСсылка.ПродукцияВЕТИС - Продукция для определения форматов дат
//
// Возвращаемое значение:
//  Структура   - Структура с полями:
//		* ФорматДатыВыработки 			- Строка 	- Формат даты выработки строкой с разделителем ";"
//		* ФорматСрокаГодности			- Строка	- Формат срока годности строкой с разделителем ";"
//		* ФорматДатыВыработкиМассивом 	- Массив 	- Формат даты выработки массивом
//		* ФорматСрокаГодностиМассивом	- Массив	- Формат срока годности массивом
//
Функция СпецификаПродукции(Продукция) Экспорт

	СтруктураРезультата = ПараметрыФорматовДатПродукции();
	
	Если Продукция.Пустая() Тогда
		Возврат СтруктураРезультата;
	КонецЕсли; 
	
	ТаблицаФорматов = ИнтеграцияВЕТИСПовтИсп.СпецифическаяПродукция();
	
	ПоляРеквизитов = Новый Структура;
	ПоляРеквизитов.Вставить("Продукция"   , "Продукция.Идентификатор");
	ПоляРеквизитов.Вставить("ВидПродукции", "ВидПродукции.Идентификатор");
	ПоляРеквизитов.Вставить("ТипПродукции", "ТипПродукции.ИмяПредопределенныхДанных");
	ЗначенияИдентификаторов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Продукция,ПоляРеквизитов);
	
	// Сначала ищем форматы непосредственно для продукции
	Отбор = Новый Структура("ИдентификаторПродукции", ЗначенияИдентификаторов.Продукция);
	СтрокиФорматов = ТаблицаФорматов.НайтиСтроки(Отбор);
	
	Если СтрокиФорматов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРезультата, СтрокиФорматов[0]);
	ИначеЕсли ЗначениеЗаполнено(ЗначенияИдентификаторов.ВидПродукции) Тогда
		
		// Не нашли, ищем для вида продукции
		Отбор.ИдентификаторПродукции = ЗначенияИдентификаторов.ВидПродукции;
		СтрокиФорматов = ТаблицаФорматов.НайтиСтроки(Отбор);
		
		Если СтрокиФорматов.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураРезультата, СтрокиФорматов[0]);
		ИначеЕсли ЗначениеЗаполнено(ЗначенияИдентификаторов.ТипПродукции) Тогда
			
			// Не нашли, ищем для типа продукции
			Отбор.ИдентификаторПродукции = ЗначенияИдентификаторов.ТипПродукции;
			СтрокиФорматов = ТаблицаФорматов.НайтиСтроки(Отбор);
			
			Если СтрокиФорматов.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураРезультата, СтрокиФорматов[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияИдентификаторов.ВидПродукции) Тогда
		ТипСыроеМолоко = ПользователиВЕТИС.ИдентификаторыСырогоМолока().Найти(ЗначенияИдентификаторов.ВидПродукции) <> Неопределено;
		СтруктураРезультата.СыроеМолоко = ТипСыроеМолоко;
	КонецЕсли;
	
	// Заполним возвращаемый массив значениями перечисления
	Если ЗначениеЗаполнено(СтруктураРезультата.ФорматДатыВыработки) Тогда
		СтруктураРезультата.ФорматДатыВыработкиМассивом = РазобратьСтрокуФорматовДатВПеречисление(СтруктураРезультата.ФорматДатыВыработки)
	КонецЕсли;
	
	// Заполним возвращаемый массив значениями перечисления
	Если ЗначениеЗаполнено(СтруктураРезультата.ФорматСрокаГодности) Тогда
		СтруктураРезультата.ФорматСрокаГодностиМассивом = РазобратьСтрокуФорматовДатВПеречисление(СтруктураРезультата.ФорматСрокаГодности);
	КонецЕсли;
	
	
	Возврат СтруктураРезультата;

КонецФункции // ФорматыДатПродукции()

// Определяет необходимо ли указывать срок годности для указанной продукции
//
// Параметры:
//  Продукция  - СправочникСсылка.продукцияВЕТИС - продукция для определения
//
// Возвращаемое значение:
//   Булево   - истина - срок годности необходим, Ложь - нет
//
Функция ПродукцияИмеетСрокГодности(Продукция) Экспорт
	
	СпецификаПродукции = СпецификаПродукции(Продукция);
	
	Если СпецификаПродукции.ФорматСрокаГодностиМассивом.Количество() = 1
		И ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(СпецификаПродукции.ФорматСрокаГодностиМассивом[0]) Тогда
		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // ПродукцияИмеетСрокГодности()

// Проверяет, выполнено ли ранее запущенное фоновое задание по получению данных контрагента по ИНН.
//
// Параметры:
//  ЗаданиеИдентификатор  - Строка - идентификатор фонового задания.
//  АдресХранилища        - Строка - адрес хранилища, в которое будет помещен результат выполнения.
//
// Возвращаемое значение:
//   РезультатВыполнения   - структура, содержит следующие параметры:
//        ЗаданиеВыполнено      - Булево - Истина, если задание выполнено.
//        РеквизитыКонтрагента  - Структура - полученные данные контрагента.
//
Функция ФоновоеЗаданиеВыполнено(ЗаданиеИдентификатор, АдресХранилища) Экспорт
	
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено, РеквизитыКонтрагента", Ложь, Неопределено);
	
	Попытка
		РезультатВыполнения.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ЗаданиеИдентификатор);
	Исключение
		РезультатВыполнения.ЗаданиеВыполнено = Ложь;
	КонецПопытки;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатВыполнения.РеквизитыКонтрагента = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
	Если РезультатВыполнения.РеквизитыКонтрагента <> Неопределено
		И РезультатВыполнения.РеквизитыКонтрагента.Свойство("ИсторияРеквизитов") Тогда
		РезультатВыполнения.РеквизитыКонтрагента.Удалить("ИсторияРеквизитов");
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// см. ОбщегоНазначения.ЗначениеРеквизитаОбъекта()
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);
	
КонецФункции

// Изменяет структуру ДанныеАдреса в соответствии с классификатором ВЕТИС
//
Процедура ДанныеАдресаПоАдресуXMLАдаптацияПодВЕТИС(ДанныеАдреса, СведенияОбАдресе)
	
	// Выполняем проверку только если известны регион
	Если Не ЗначениеЗаполнено(ДанныеАдреса.РегионGUID) Тогда
		Возврат;
	КонецЕсли;
	
	// Исправляем заполнение РайонGUID, ГородGUID
	Если ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктGUID) Тогда
		
		НаселенныйПунктНайден = Ложь;
		РайонGUID = "";
		ГородGUID = "";
	
		НаселенныеПунктыРайона = ИкарВЕТИСВызовСервера.СписокНаселенныхПунктовРегионаСОтборомПоНаименованию(ДанныеАдреса.РегионGUID, СведенияОбАдресе.НаселенныйПункт);
		
		Если ЗначениеЗаполнено(НаселенныеПунктыРайона.ТекстОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		Если НаселенныеПунктыРайона.ОбщееКоличество > 0 Тогда
			Для Каждого НаселенныйПункт Из НаселенныеПунктыРайона.Список Цикл
				Если НаселенныйПункт.guid = ДанныеАдреса.НаселенныйПунктGUID Тогда
					НаселенныйПунктНайден = Истина;
					Если ЗначениеЗаполнено(НаселенныйПункт.districtGuid) Тогда
						РайонGUID = НаселенныйПункт.districtGuid;
					КонецЕсли;
					Если ЗначениеЗаполнено(НаселенныйПункт.cityGuid) Тогда
						ГородGUID = НаселенныйПункт.cityGuid;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НаселенныйПунктНайден Тогда
			Если ДанныеАдреса.РайонGUID <> РайонGUID Тогда
				ДанныеАдреса.РайонGUID = РайонGUID;
				ДанныеАдреса.РайонПредставление = "";
			КонецЕсли;
			
			Если ДанныеАдреса.ГородGUID <> ГородGUID Тогда
				ДанныеАдреса.ГородGUID = ГородGUID;
				ДанныеАдреса.ГородПредставление = "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Исправляем заполнение РайонGUID (пример: Московская обл, Мытищи г)
	Если Не ЗначениеЗаполнено(ДанныеАдреса.РайонGUID)
		И ЗначениеЗаполнено(ДанныеАдреса.ГородGUID)
		И ЗначениеЗаполнено(СведенияОбАдресе.Город) Тогда
		
		НаселенныеПунктыРайона = ИкарВЕТИСВызовСервера.СписокНаселенныхПунктовРегионаСОтборомПоНаименованию(ДанныеАдреса.РегионGUID, СведенияОбАдресе.Город);
		
		Если Не ЗначениеЗаполнено(НаселенныеПунктыРайона.ТекстОшибки) И НаселенныеПунктыРайона.ОбщееКоличество > 0 Тогда
			
			НаселенныйПунктНайден = Ложь;
			РайонGUID = "";
			
			Для Каждого НаселенныйПункт Из НаселенныеПунктыРайона.Список Цикл
				Если НаселенныйПункт.guid = ДанныеАдреса.ГородGUID Тогда
					НаселенныйПунктНайден = Истина;
					Если ЗначениеЗаполнено(НаселенныйПункт.districtGuid) Тогда
						РайонGUID = НаселенныйПункт.districtGuid;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НаселенныйПунктНайден И ЗначениеЗаполнено(РайонGUID) Тогда
				ДанныеАдреса.РайонGUID = РайонGUID;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Исправляем заполнение УлицаGUID
	Если ЗначениеЗаполнено(ДанныеАдреса.УлицаGUID) Тогда
		
		УлицаНаселенногоПунктаНайдена = Ложь;
		
		GUIDНаселенногоПункта = "";
		Если ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктGUID) Тогда
			GUIDНаселенногоПункта = ДанныеАдреса.НаселенныйПунктGUID;
		ИначеЕсли ЗначениеЗаполнено(ДанныеАдреса.ГородGUID) Тогда
			GUIDНаселенногоПункта = ДанныеАдреса.ГородGUID;
		ИначеЕсли ЗначениеЗаполнено(ДанныеАдреса.РегионGUID) Тогда
			GUIDНаселенногоПункта = ДанныеАдреса.РегионGUID;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(GUIDНаселенногоПункта) Тогда
			
			НомерСтраницы = 0;
			КоличествоЭлементовНаСтранице = 1000;
			
			Пока Не УлицаНаселенногоПунктаНайдена Цикл
				
				Если НомерСтраницы = 0 Тогда
					СписокУлицНаселенногоПункта = ИкарВЕТИСВызовСервера.СписокУлицНаселенногоПунктаСОтборомПоНаименованию(GUIDНаселенногоПункта, СведенияОбАдресе.Улица);
				Иначе
					СписокУлицНаселенногоПункта = ИкарВЕТИСВызовСервера.СписокУлицНаселенногоПункта(GUIDНаселенногоПункта, НомерСтраницы, КоличествоЭлементовНаСтранице);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СписокУлицНаселенногоПункта.ТекстОшибки) Тогда
					Прервать;
				КонецЕсли;
				
				Если СписокУлицНаселенногоПункта.ОбщееКоличество > 0 Тогда
					Для Каждого УлицаНаселенногоПункта Из СписокУлицНаселенногоПункта.Список Цикл
						Если УлицаНаселенногоПункта.guid = ДанныеАдреса.УлицаGUID Тогда
							УлицаНаселенногоПунктаНайдена = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Не УлицаНаселенногоПунктаНайдена Тогда
					ЕщеСтраница = (НомерСтраницы = 0) Или (СписокУлицНаселенногоПункта.КоличествоСтраниц >= НомерСтраницы+1);
					Если Не ЕщеСтраница Тогда
						Прервать;
					КонецЕсли;
					НомерСтраницы = НомерСтраницы + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не УлицаНаселенногоПунктаНайдена Тогда
			ДанныеАдреса.УлицаGUID = "";
			ДанныеАдреса.УлицаПредставление = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти