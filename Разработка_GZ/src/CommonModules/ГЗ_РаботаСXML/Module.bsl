Функция ОпределитьНаименованиеИзвещения44ФЗ(СтруктураПрочитанныхДанных) Экспорт 
	ЗначениеВозврата = Неопределено;
	
	МассивИзвещений = ПолучитьМассивВариантовИзвещений44ФЗ();
	
	Для Каждого ЗначениеМассива Из МассивИзвещений Цикл
		Свойство=СтруктураПрочитанныхДанных.Свойства().получить(ЗначениеМассива);
		Если Свойство <> Неопределено Тогда 
			ЗначениеВозврата=ЗначениеМассива;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ЗначениеВозврата;
КонецФункции

Функция ПолучитьМассивВариантовИзвещений44ФЗ()
	МассивИзвещений = Новый Массив;
	МассивИзвещений.Добавить("fcsNotificationEF");
	МассивИзвещений.Добавить("fcsnotificationEP");
	МассивИзвещений.Добавить("fcsnotificationOKD");
	МассивИзвещений.Добавить("fcsnotificationOKOU");
	МассивИзвещений.Добавить("fcsnotificationOK");
	МассивИзвещений.Добавить("fcsnotificationPO");
	МассивИзвещений.Добавить("fcsnotificationZakA");
	МассивИзвещений.Добавить("fcsnotificationZakKD");
	МассивИзвещений.Добавить("fcsnotificationZakKOU");
	МассивИзвещений.Добавить("fcsnotificationZakK");
	МассивИзвещений.Добавить("fcsnotificationZK");
	МассивИзвещений.Добавить("fcsnotificationZP");
	МассивИзвещений.Добавить("fcsnotificationLotChange");
	МассивИзвещений.Добавить("fcsnotification111");
	МассивИзвещений.Добавить("epNotificationEZK2020");
	МассивИзвещений.Добавить("epNotificationEOK");
	МассивИзвещений.Добавить("epNotificationEOKOU");
	МассивИзвещений.Добавить("epNotificationEZP");
	МассивИзвещений.Добавить("fcsClarification");
	МассивИзвещений.Добавить("pprf615NotificationEF");
	МассивИзвещений.Добавить("epClarificationDoc");
	МассивИзвещений.Добавить("epClarificationResult");  
	МассивИзвещений.Добавить("fcsNotificationCancelFailure"); 
	МассивИзвещений.Добавить("epNotificationCancelFailure"); 
	МассивИзвещений.Добавить("epNotificationCancel"); 
	МассивИзвещений.Добавить("fcsNotificationCancel");
	МассивИзвещений.Добавить("epNotificationEZT2020");
	МассивИзвещений.Добавить("epProlongationCancelEOK");
	МассивИзвещений.Добавить("epProlongationCancelEZK");
	МассивИзвещений.Добавить("epProlongationEOKOU");                                                    
	МассивИзвещений.Добавить("epProlongationEOK"); 
	МассивИзвещений.Добавить("epProlongationEZK"); 
	МассивИзвещений.Добавить("pprf615Clarification"); 
	МассивИзвещений.Добавить("pprf615NotificationCancel");
	МассивИзвещений.Добавить("fcsNotificationOrgChange"); 
	МассивИзвещений.Добавить("fcs_notificationEFDateChange");
	МассивИзвещений.Добавить("pprf615NotificationPO"); 
	МассивИзвещений.Добавить("epNotificationEZK");                              
	Возврат МассивИзвещений;
КонецФункции

Функция ПреобразоватьДатуXMLВДату (ДатаXML) Экспорт  	   
	
	  Возврат XMLЗначение(Тип("Дата"),ДатаXML); 
	  
КонецФункции

Функция ПолучитьЗначениеОКПД2НаУровеньВыше (ОКПД2) Экспорт 
	   	ОКПД2НаУровеньВыше = Справочники.КлассификаторОКПД2.ПустаяСсылка();
		
		//СтрРазделить(ОКПД2, ".")
	   	   
	   Возврат ОКПД2НаУровеньВыше;	   
КонецФункции

Функция ЗаполнитьТЧИзвещения_purchaseObjects (xdto_пакет) Экспорт 
	
	ТабличнаяЧастьИзвещения = Документы.ГЗ_ИзвещениеОПроведенииЗакупок.ВернутьСтруктуруТабличнойЧастиДокумента();
	
	Если ТипЗнч(xdto_пакет.purchaseObjects.purchaseObject) = Тип("СписокXDTO") Тогда 
		Для Каждого СтрокаТЧ Из  xdto_пакет.purchaseObjects.purchaseObject Цикл
			
			НоваяСтрокаТЧ = ТабличнаяЧастьИзвещения.Добавить();
			НоваяСтрокаТЧ.OKEI = ?(СтрокаТЧ.Свойства().Получить("OKEI")<> Неопределено, Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(СтрокаТЧ.OKEI.code), Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию()); 
			НоваяСтрокаТЧ.isMedicalProduct = ?(СтрокаТЧ.Свойства().Получить("isMedicalProduct")<> Неопределено, СтрокаТЧ.isMedicalProduct, Ложь);
			НоваяСтрокаТЧ.name = ?(СтрокаТЧ.Свойства().Получить("name")<> Неопределено, СтрокаТЧ.name, ""); 
			НоваяСтрокаТЧ.price= ?(СтрокаТЧ.Свойства().Получить("price")<> Неопределено, СтрокаТЧ.price, 0);
			
			
			НоваяСтрокаТЧ.purchaseObject= ?(СтрокаТЧ.Свойства().Получить("OKPD2")<> Неопределено, Справочники.КлассификаторОКПД2.НайтиПоКоду(СтрокаТЧ.OKPD2.code,Истина), Справочники.КлассификаторОКПД2.ПустаяСсылка());
			НоваяСтрокаТЧ.purchaseObject_Строкой= ?(СтрокаТЧ.Свойства().Получить("OKPD2")<> Неопределено, СтрокаТЧ.OKPD2.code,"");
			
			Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.purchaseObject.Ссылка) Тогда //ОКПД2 получим из КТРУ
				КодКТРУ = ?(СтрокаТЧ.Свойства().Получить("KTRU")<> Неопределено, СтрокаТЧ.KTRU.code, "");
				МассивЗначенийКТРУ = СтрРазделить(КодКТРУ, "-");
				НоваяСтрокаТЧ.purchaseObject= Справочники.КлассификаторОКПД2.НайтиПоКоду(СтрЗаменить(МассивЗначенийКТРУ[0],".000",""));	//Убрать нули на конце
				НоваяСтрокаТЧ.purchaseObject_Строкой= КодКТРУ;
			КонецЕсли;
			
			НоваяСтрокаТЧ.quantity  = ?(СтрокаТЧ.Свойства().Получить("quantity")<> Неопределено, ?(СтрокаТЧ.quantity.Свойства().Получить("value")<>Неопределено,СтрокаТЧ.quantity.value,0),0);
			НоваяСтрокаТЧ.sum = ?(СтрокаТЧ.Свойства().Получить("sum")<> Неопределено, СтрокаТЧ.sum, 0);
		КонецЦикла;
	Иначе
		СтрокаТЧ = xdto_пакет.purchaseObjects.purchaseObject;
		
		НоваяСтрокаТЧ = ТабличнаяЧастьИзвещения.Добавить();
		НоваяСтрокаТЧ.OKEI = ?(СтрокаТЧ.Свойства().Получить("OKEI")<> Неопределено, Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(СтрокаТЧ.OKEI.code), Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию()); 
		НоваяСтрокаТЧ.isMedicalProduct = ?(СтрокаТЧ.Свойства().Получить("isMedicalProduct")<> Неопределено, СтрокаТЧ.isMedicalProduct, Ложь);
		НоваяСтрокаТЧ.name = ?(СтрокаТЧ.Свойства().Получить("name")<> Неопределено, СтрокаТЧ.name, ""); 
		НоваяСтрокаТЧ.price= ?(СтрокаТЧ.Свойства().Получить("price")<> Неопределено, СтрокаТЧ.price, 0);
		НоваяСтрокаТЧ.purchaseObject= ?(СтрокаТЧ.Свойства().Получить("OKPD2")<> Неопределено, Справочники.КлассификаторОКПД2.НайтиПоКоду(СтрокаТЧ.OKPD2.code,Истина), Справочники.КлассификаторОКПД2.ПустаяСсылка());
		НоваяСтрокаТЧ.purchaseObject_Строкой= ?(СтрокаТЧ.Свойства().Получить("OKPD2")<> Неопределено, СтрокаТЧ.OKPD2.code,"");
		
		
		
		Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.purchaseObject.Ссылка) Тогда //ОКПД2 получим из КТРУ
			КодКТРУ = ?(СтрокаТЧ.Свойства().Получить("KTRU")<> Неопределено, СтрокаТЧ.KTRU.code, "");
			МассивЗначенийКТРУ = СтрРазделить(КодКТРУ, "-");
			НоваяСтрокаТЧ.purchaseObject= Справочники.КлассификаторОКПД2.НайтиПоКоду(СтрЗаменить(МассивЗначенийКТРУ[0],".000",""));	//Убрать нули на конце
			НоваяСтрокаТЧ.purchaseObject_Строкой= КодКТРУ;
		КонецЕсли;
		
		НоваяСтрокаТЧ.quantity  = ?(СтрокаТЧ.Свойства().Получить("quantity")<> Неопределено, ?(СтрокаТЧ.quantity.Свойства().Получить("value")<>Неопределено,СтрокаТЧ.quantity.value,0),0);
		НоваяСтрокаТЧ.sum = ?(СтрокаТЧ.Свойства().Получить("sum")<> Неопределено, СтрокаТЧ.sum, 0);	
	КонецЕсли;	
	
	Возврат ТабличнаяЧастьИзвещения;
КонецФункции

Функция ЗаполнитьТЧИзвещения_drugPurchaseObjectsInfo (xdto_пакет) Экспорт 
	
	ТабличнаяЧастьИзвещения = документы.ГЗ_ИзвещениеОПроведенииЗакупок.ВернутьСтруктуруТабличнойЧастиДокумента();
	
	Если xdto_пакет.свойства().Получить("drugPurchaseObjectsInfo") <> Неопределено Тогда   //xdto_пакет.notificationInfo.purchaseObjectsInfo.drugPurchaseObjectsInfo.drugPurchaseObjectInfo
		Если xdto_пакет.drugPurchaseObjectsInfo.Свойства().Получить("drugPurchaseObjectInfo") <> Неопределено Тогда 
			Если ТипЗнч(xdto_пакет.drugPurchaseObjectsInfo.drugPurchaseObjectInfo) = Тип("СписокXDTO") Тогда 
				Для Каждого СтрокаТЧ Из  xdto_пакет.drugPurchaseObjectsInfo.drugPurchaseObjectInfo Цикл
					НоваяСтрокаТЧ = ТабличнаяЧастьИзвещения.Добавить();
					НоваяСтрокаТЧ.OKEI = ?(СтрокаТЧ.Свойства().Получить("OKEI")<> Неопределено, Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(СтрокаТЧ.OKEI.code), Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию()); 
					НоваяСтрокаТЧ.isMedicalProduct = ?(СтрокаТЧ.Свойства().Получить("isMedicalProduct")<> Неопределено, СтрокаТЧ.isMedicalProduct, Ложь);
					НоваяСтрокаТЧ.name = ?(СтрокаТЧ.Свойства().Получить("name")<> Неопределено, СтрокаТЧ.name, ""); 
					НоваяСтрокаТЧ.price= ?(СтрокаТЧ.Свойства().Получить("price")<> Неопределено, СтрокаТЧ.price, 0);
					НоваяСтрокаТЧ.purchaseObject= ?(СтрокаТЧ.Свойства().Получить("OKPD2")<> Неопределено, Справочники.КлассификаторОКПД2.НайтиПоКоду(СтрокаТЧ.OKPD2.OKPDCode,Истина), Справочники.КлассификаторОКПД2.ПустаяСсылка());
					НоваяСтрокаТЧ.purchaseObject_Строкой= ?(СтрокаТЧ.Свойства().Получить("OKPD2")<> Неопределено, СтрокаТЧ.OKPD2.OKPDCode,"");

					Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.purchaseObject.Ссылка) Тогда //ОКПД2 получим из КТРУ
						КодКТРУ = ?(СтрокаТЧ.Свойства().Получить("KTRU")<> Неопределено, СтрокаТЧ.KTRU.code, "");
						МассивЗначенийКТРУ = СтрРазделить(КодКТРУ, "-");
						НоваяСтрокаТЧ.purchaseObject= Справочники.КлассификаторОКПД2.НайтиПоКоду(СтрЗаменить(МассивЗначенийКТРУ[0],".000",""));	//Убрать нули на конце
						НоваяСтрокаТЧ.purchaseObject_Строкой= КодКТРУ;
					КонецЕсли;
					
					НоваяСтрокаТЧ.quantity  = ?(СтрокаТЧ.Свойства().Получить("quantity")<> Неопределено, ?(СтрокаТЧ.quantity.Свойства().Получить("value")<>Неопределено,СтрокаТЧ.quantity.value,0),0);
					НоваяСтрокаТЧ.sum = ?(СтрокаТЧ.Свойства().Получить("sum")<> Неопределено, СтрокаТЧ.sum, 0);
				КонецЦикла;
			Иначе
				СтрокаТЧ = xdto_пакет.drugPurchaseObjectsInfo.drugPurchaseObjectInfo;
				НоваяСтрокаТЧ = ТабличнаяЧастьИзвещения.Добавить();
				НоваяСтрокаТЧ.OKEI = ?(СтрокаТЧ.Свойства().Получить("OKEI")<> Неопределено, Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(СтрокаТЧ.OKEI.code), Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию()); 
				НоваяСтрокаТЧ.isMedicalProduct = ?(СтрокаТЧ.Свойства().Получить("isMedicalProduct")<> Неопределено, СтрокаТЧ.isMedicalProduct, Ложь);
				НоваяСтрокаТЧ.name = ?(СтрокаТЧ.Свойства().Получить("name")<> Неопределено, СтрокаТЧ.name, ""); 
				НоваяСтрокаТЧ.price= ?(СтрокаТЧ.Свойства().Получить("price")<> Неопределено, СтрокаТЧ.price, 0);
				НоваяСтрокаТЧ.purchaseObject= ?(СтрокаТЧ.Свойства().Получить("OKPD2")<> Неопределено, Справочники.КлассификаторОКПД2.НайтиПоКоду(СтрокаТЧ.OKPD2.OKPDCode,Истина), Справочники.КлассификаторОКПД2.ПустаяСсылка());
				НоваяСтрокаТЧ.purchaseObject_Строкой= ?(СтрокаТЧ.Свойства().Получить("OKPD2")<> Неопределено, СтрокаТЧ.OKPD2.OKPDCode,"");
				
				Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.purchaseObject.Ссылка) Тогда //ОКПД2 получим из КТРУ
					КодКТРУ = ?(СтрокаТЧ.Свойства().Получить("KTRU")<> Неопределено, СтрокаТЧ.KTRU.code, "");
					МассивЗначенийКТРУ = СтрРазделить(КодКТРУ, "-");
					НоваяСтрокаТЧ.purchaseObject= Справочники.КлассификаторОКПД2.НайтиПоКоду(СтрЗаменить(МассивЗначенийКТРУ[0],".000",""));	//Убрать нули на конце	
					НоваяСтрокаТЧ.purchaseObject_Строкой= КодКТРУ;
				КонецЕсли;
				
				НоваяСтрокаТЧ.quantity  = ?(СтрокаТЧ.Свойства().Получить("quantity")<> Неопределено, ?(СтрокаТЧ.quantity.Свойства().Получить("value")<>Неопределено,СтрокаТЧ.quantity.value,0),0);
				НоваяСтрокаТЧ.sum = ?(СтрокаТЧ.Свойства().Получить("sum")<> Неопределено, СтрокаТЧ.sum, 0);	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	Возврат ТабличнаяЧастьИзвещения;
КонецФункции

Функция ПреобразоватьЗначениеВБулево (Значение) Экспорт 
	ЗначениеБулево = Ложь;
	Если Значение = "true" Тогда 
		ЗначениеБулево = Истина; 
	ИначеЕсли Значение = "false" Тогда 
		ЗначениеБулево = Ложь; 
	КонецЕсли;
	Возврат ЗначениеБулево;
КонецФункции
	
Функция ПолучитьЗначениеETP (xdto_пакет) Экспорт 
	
	ETP_ЭлектроннаяТорговаяПлощадка = Справочники.ГЗ_ETP_ЭлектроннаяТорговаяПлощадка.ПустаяСсылка();
	
	СтруктураЗаполненияЕТР = Новый Структура;
	СтруктураЗаполненияЕТР.Вставить("GZcode",xdto_пакет.code);
	СтруктураЗаполненияЕТР.Вставить("ГЗ_НаименованиеПолное",?(xdto_пакет.Свойства().Получить("name")<> Неопределено, xdto_пакет.name, "ETP"));
	СтруктураЗаполненияЕТР.Вставить("Наименование",?(xdto_пакет.Свойства().Получить("name")<> Неопределено, xdto_пакет.name, "ETP"));
	СтруктураЗаполненияЕТР.Вставить("url", ?(xdto_пакет.свойства().Получить("url")<> Неопределено, xdto_пакет.url, "url"));
	НайденнаяПлощадка = Справочники.ГЗ_ETP_ЭлектроннаяТорговаяПлощадка.СоздатьЭТП(СтруктураЗаполненияЕТР);
	
	Если ЗначениеЗаполнено(НайденнаяПлощадка) Тогда 
		ETP_ЭлектроннаяТорговаяПлощадка = НайденнаяПлощадка;
	Иначе    		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ПолучениеETP", 
		УровеньЖурналаРегистрации.Ошибка, , ,
		"Значение площадки по коду: "+xdto_пакет.code+" не получено");
	КонецЕсли;
	
	Возврат  ETP_ЭлектроннаяТорговаяПлощадка;
КонецФункции

Функция СоздатьОрганизацию44ФЗ(СтруктураДанныхОрганизации) Экспорт 
	
	НайденнаяОрганизация = Справочники.Организации.НайтиПоРеквизиту("regNum",СтруктураДанныхОрганизации.regNum);
		
	Если ЗначениеЗаполнено(НайденнаяОрганизация) Тогда 
		ОрганизацияЗаявитель = НайденнаяОрганизация;
	Иначе  
		ПараметрыЗадания = Новый Структура("ИНН, СистемаНалогообложения,ПлательщикЕНВД,ПрименяетсяУСНПатент,ПлательщикТорговогоСбора,ИспользуетсяТрудНаемныхРаботников,ВидОрганизации, Реквизиты");
		
		Реквизиты = Новый Структура("ИНН, НаименованиеСокращенное, КПП, regNum,consRegistryNum,fullName,ОписаниеОшибки");
		
		Реквизиты.Вставить("regNum", СтруктураДанныхОрганизации.regNum);
		
		
		Если СтруктураДанныхОрганизации.свойства().получить("consRegistryNum") <> Неопределено Тогда 
			Реквизиты.Вставить("consRegistryNum", СтруктураДанныхОрганизации.consRegistryNum);
		КонецЕсли;
		
	    INN = ?(СтруктураДанныхОрганизации.Свойства().Получить("INN")<>Неопределено,СтруктураДанныхОрганизации.INN, "");  
		KPP = ?(СтруктураДанныхОрганизации.Свойства().Получить("KPP")<>Неопределено,СтруктураДанныхОрганизации.KPP, ""); 
		shortName = ?(СтруктураДанныхОрганизации.Свойства().Получить("shortName")<>Неопределено,СтруктураДанныхОрганизации.shortName, СтруктураДанныхОрганизации.fullName);
		
		
		
		Реквизиты.Вставить("fullName", СтруктураДанныхОрганизации.fullName);
		Реквизиты.Вставить("Наименование", СтруктураДанныхОрганизации.fullName);
		Реквизиты.Вставить("НаименованиеПолное", СтруктураДанныхОрганизации.fullName);
		Реквизиты.Вставить("НаименованиеСокращенное", shortName);
		Реквизиты.Вставить("ИНН",INN);
		Реквизиты.Вставить("КПП", KPP);
		Реквизиты.Вставить("ОписаниеОшибки", "");
		
		
		ПараметрыЗадания.Вставить("ИНН", INN);	
		//ПараметрыЗадания.Вставить("СистемаНалогообложения",Перечисления.СистемыНалогообложения.Общая);
		//ПараметрыЗадания.Вставить("ПлательщикЕНВД",Ложь);
		//ПараметрыЗадания.Вставить("ПрименяетсяУСНПатент",Ложь);
		//ПараметрыЗадания.Вставить("ПлательщикТорговогоСбора",Ложь);
		//ПараметрыЗадания.Вставить("ИспользуетсяТрудНаемныхРаботников",Истина);
		ПараметрыЗадания.Вставить("ВидОрганизации","НеИндивидуальныйПредприниматель");
		ПараметрыЗадания.Вставить("Реквизиты",Реквизиты);
		
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		Справочники.Организации.СоздатьОрганизацию(ПараметрыЗадания, АдресВременногоХранилища);
		ОрганизацияЗаявитель = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
	КонецЕсли;
	
	//УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияЗаявитель.Ссылка, СтруктураДанныхОрганизации.postAddress, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДата()); 
	//УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияЗаявитель.Ссылка, СтруктураДанныхОрганизации.postAddress, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, ТекущаяДата()); 
	//УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияЗаявитель.Ссылка, СтруктураДанныхОрганизации.factAddress, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, ТекущаяДата());
	
	Возврат ОрганизацияЗаявитель;
КонецФункции 

Функция СоздатьОрганизацию223ФЗ(СтруктураДанныхОрганизации) Экспорт 
	
	НайденнаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|	И Организации.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", СтруктураДанныхОрганизации.inn);
	Запрос.УстановитьПараметр("КПП", СтруктураДанныхОрганизации.kpp);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		НайденнаяОрганизация = ВыборкаДетальныеЗаписи.Ссылка;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НайденнаяОрганизация) Тогда 
		ОрганизацияЗаявитель = НайденнаяОрганизация;
	Иначе  
		ПараметрыЗадания = Новый Структура("ИНН, СистемаНалогообложения,ПлательщикЕНВД,ПрименяетсяУСНПатент,ПлательщикТорговогоСбора,ИспользуетсяТрудНаемныхРаботников,ВидОрганизации, Реквизиты");
		
		Реквизиты = Новый Структура("ИНН, НаименованиеСокращенное, КПП,fullName,ОписаниеОшибки");
						
		Реквизиты.Вставить("fullName", СтруктураДанныхОрганизации.fullName);
		Реквизиты.Вставить("Наименование", СтруктураДанныхОрганизации.fullName);
		Реквизиты.Вставить("НаименованиеПолное", СтруктураДанныхОрганизации.fullName);
		Реквизиты.Вставить("НаименованиеСокращенное",?(СтруктураДанныхОрганизации.Свойства().Получить("shortName")<> Неопределено,СтруктураДанныхОрганизации.shortName, ""));
		Реквизиты.Вставить("ИНН",СтруктураДанныхОрганизации.inn);
		Реквизиты.Вставить("КПП", СтруктураДанныхОрганизации.kpp);
		Реквизиты.Вставить("ОписаниеОшибки", "");
		
		
		ПараметрыЗадания.Вставить("ИНН", СтруктураДанныхОрганизации.inn);	
		//ПараметрыЗадания.Вставить("СистемаНалогообложения",Перечисления.СистемыНалогообложения.Общая);
		//ПараметрыЗадания.Вставить("ПлательщикЕНВД",Ложь);
		//ПараметрыЗадания.Вставить("ПрименяетсяУСНПатент",Ложь);
		//ПараметрыЗадания.Вставить("ПлательщикТорговогоСбора",Ложь);
		//ПараметрыЗадания.Вставить("ИспользуетсяТрудНаемныхРаботников",Истина);
		ПараметрыЗадания.Вставить("ВидОрганизации","НеИндивидуальныйПредприниматель");
		ПараметрыЗадания.Вставить("Реквизиты",Реквизиты);
		
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		Справочники.Организации.СоздатьОрганизацию(ПараметрыЗадания, АдресВременногоХранилища);
		ОрганизацияЗаявитель = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
	КонецЕсли;
	
	//УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияЗаявитель.Ссылка, СтруктураДанныхОрганизации.legalAddress, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДата()); 
	//УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияЗаявитель.Ссылка, СтруктураДанныхОрганизации.postalAddress, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, ТекущаяДата()); 
	//УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОрганизацияЗаявитель.Ссылка, СтруктураДанныхОрганизации.legalAddress, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, ТекущаяДата());
	
	Возврат ОрганизацияЗаявитель;
КонецФункции

Функция ОпределитьНаименованиеИзвещения223ФЗ(СтруктураПрочитанныхДанных) Экспорт 
	ЗначениеВозврата = Неопределено;
	
	МассивИзвещений = ПолучитьМассивВариантовИзвещений223ФЗ();
	
	Для Каждого ЗначениеМассива Из МассивИзвещений Цикл
		Свойство=СтруктураПрочитанныхДанных.Свойства().получить(ЗначениеМассива);
		Если Свойство <> Неопределено Тогда 
			ЗначениеВозврата=ЗначениеМассива;
			Возврат ЗначениеВозврата;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ЗначениеВозврата;
КонецФункции

Функция ПолучитьМассивВариантовИзвещений223ФЗ()
	МассивИзвещений = Новый Массив;
	МассивИзвещений.Добавить("purchaseNoticeAEData");
	МассивИзвещений.Добавить("purchaseNoticeData");
	МассивИзвещений.Добавить("purchaseNoticeOKData");
	МассивИзвещений.Добавить("purchaseNoticeOAData");
	МассивИзвещений.Добавить("purchaseNoticeEPData");
	МассивИзвещений.Добавить("purchaseNoticeAE94FZData");
	МассивИзвещений.Добавить("purchaseNoticeKESMBOData");
	МассивИзвещений.Добавить("purchaseNoticeAESMBOData");
	МассивИзвещений.Добавить("purchaseNoticeZKESMBOData");
	МассивИзвещений.Добавить("purchaseNoticeZPESMBOData");
	МассивИзвещений.Добавить("purchaseContractData");
	МассивИзвещений.Добавить("purchaseRejectionData");	
	МассивИзвещений.Добавить("purchaseNoticeZKData");	
	 
	Возврат МассивИзвещений;
КонецФункции

&НаСервере
Функция ВернутьПутьХраненияФайлов (ТипФайлов)  Экспорт 
	Если ТипФайлов = "Извещения44ФЗ" Тогда 
		Возврат Строка(Константы.ГЗ_КаталогХраненияОбработанныхФайловXMLПо44ФЗ.Получить()); 
	ИначеЕсли ТипФайлов = "Договор44ФЗ" Тогда	
		Возврат Строка(Константы.ГЗ_КаталогХраненияОбработанныхФайловXMLПо44ФЗ_Договоры.Получить());
	ИначеЕсли ТипФайлов = "Протоколы44ФЗ" Тогда	
		Возврат Строка(Константы.ГЗ_КаталогХраненияОбработанныхФайловXMLПо44ФЗ_Протоколы.Получить()); 
	ИначеЕсли ТипФайлов = "Извещения223ФЗ" Тогда
		Возврат Строка(Константы.ГЗ_КаталогХраненияОбработанныхФайловXMLПо223ФЗ.Получить()); 
	КонецЕсли;
КонецФункции