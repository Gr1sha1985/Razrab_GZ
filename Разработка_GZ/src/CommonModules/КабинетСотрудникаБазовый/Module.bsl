
#Область СлужебныйПрограммныйИнтерфейс

Процедура РасчетЗарплатыДляНебольшихОрганизацийПриЗаписи() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#Область РегистрацияПубликуемыхОбъектов

Процедура ТекущиеКадровыеДанныеСотрудниковПередЗаписью(НаборЗаписей) Экспорт

	Сотрудники = НаборЗаписей.ВыгрузитьКолонку("Сотрудник");
	ТекущиеДанные = ТекущиеКадровыеДанныеСотрудников(Сотрудники);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПрежниеДанные", ТекущиеДанные);

КонецПроцедуры

Процедура ТекущиеКадровыеДанныеСотрудниковПриЗаписи(НаборЗаписей) Экспорт
	
	ПрежниеДанные = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ПрежниеДанные", ПрежниеДанные);
	Если ПрежниеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(НаборЗаписей, "Сотрудник", Истина);
	НовыеДанные = ТекущиеКадровыеДанныеСотрудников(Сотрудники);
	
	Отбор = Новый Структура("Сотрудник");
	
	УстановитьПривилегированныйРежим(Истина);
	ГоловныеСотрудники = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ГоловнойСотрудник");
	Набор = РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
	Для каждого Сотрудник Из Сотрудники Цикл
		Если Сотрудник <> ГоловныеСотрудники[Сотрудник] Тогда
			Продолжить;
		КонецЕсли;
		Отбор.Сотрудник = Сотрудник;
		ПрежниеДанныеПоСотруднику 	= ПрежниеДанные.Скопировать(Отбор);
		НовыеДанныеПоСотруднику 	= НовыеДанные.Скопировать(Отбор);
		Если Не ОбщегоНазначения.КоллекцииИдентичны(ПрежниеДанныеПоСотруднику, НовыеДанныеПоСотруднику) Тогда
			Набор.Очистить();
			ЗаписьНабора = Набор.Добавить();
			ЗаписьНабора.Сотрудник = Сотрудник;
			Набор.Отбор.Сотрудник.Установить(Сотрудник);
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегистрацияПубликуемыхОбъектов

Процедура ОбъектПриЗаписи(Объект) Экспорт

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		Если Объект.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеНастройкиПубликации") Тогда
			Возврат;
		КонецЕсли;
		ПриЗаписиПозицииШтатногоРасписания(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		КабинетСотрудника.ПриЗаписиПубликуемогоОбъекта(Объект);
	КонецЕсли;

КонецПроцедуры

Процедура ОбъектПередЗаписью(Объект) Экспорт

	Если Объект.ЭтоНовый() И ТипЗнч(Объект) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		Если Объект.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеНастройкиПубликации") Тогда
			Возврат;
		КонецЕсли;
		Объект.ДополнительныеСвойства.Вставить("ОбновитьНастройкуПубликации", Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписиПозицииШтатногоРасписания(Объект)
	
	ОбновитьНастройкуПубликации = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("ОбновитьНастройкуПубликации", ОбновитьНастройкуПубликации);
	Если ОбновитьНастройкуПубликации <> Неопределено Тогда
		// Запись новой позиции штатного расписания.
		
		ПроверяемыеОбъекты = Новый Массив;
		ПроверяемыеОбъекты.Добавить(Объект.Владелец);
		ПроверяемыеОбъекты.Добавить(Объект.Подразделение);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПроверяемыеОбъекты", ПроверяемыеОбъекты);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаПубликацииКабинетСотрудника.ОбъектПравила КАК ОбъектПравила
		|ИЗ
		|	РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликацииКабинетСотрудника
		|ГДЕ
		|	ПравилаПубликацииКабинетСотрудника.ОбъектПравила В(&ПроверяемыеОбъекты)";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			МенеджерЗаписи = РегистрыСведений.ПравилаПубликацииКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ОбъектПравила = Объект.Ссылка;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации 	= Объект.Ссылка;
			МенеджерЗаписи.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
			
			ПодразделениеПредприятия = МестоПозицийВСтруктуреПредприятия(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПодразделениеПредприятия) Тогда
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации 	= ПодразделениеПредприятия;
				МенеджерЗаписи.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();	
			КонецЕсли;
			
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		КабинетСотрудника.ПриЗаписиПубликуемогоОбъекта(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

Функция МестоПозицийВСтруктуреПредприятия(ПозицияШР)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиция", ПозицияШР);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО ШтатноеРасписание.Подразделение = СтруктураПредприятия.Источник
	|ГДЕ
	|	ШтатноеРасписание.Ссылка = &Позиция";
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Выборка.Подразделение;

КонецФункции

Функция ТекущиеКадровыеДанныеСотрудников(Сотрудники)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
	|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК ТекущееПодразделение,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК ТекущаяДолжность,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости КАК ТекущийВидЗанятости
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник В(&Сотрудники)
	|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

Процедура ОбновитьСтруктуруПредприятия() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Блокировка = Новый БлокировкаДанных();
	Блокировка.Добавить("Справочник.СтруктураПредприятия");
	Блокировка.Добавить("Справочник.Организации");
	Блокировка.Добавить("Справочник.ПодразделенияОрганизаций");
	
	НачатьТранзакцию();

	Попытка
		Блокировка.Заблокировать();
		ОбновитьСтруктуруПредприятияПоТаблицеИсточника(Справочники.Организации.ПустаяСсылка());
		ОбновитьСтруктуруПредприятияПоТаблицеИсточника(Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Организационная структура.Полное обновление структуры предприятия по структуре юридических лиц'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьВТШтатноеРасписание(МенеджерВТ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для каждого Организация Из Организации Цикл
		СоздатьПозицииОрганизации(Организация);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Подразделение КАК Подразделение,
	|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания
	|ПОМЕСТИТЬ ВТШтатноеРасписание
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Владелец В(&Организации)";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПубликуемаяСтруктураПредприятия(Позиции) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодразделенияПредприятия = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО (СтруктураПредприятия.Источник = ШтатноеРасписание.Подразделение
	|				И ШтатноеРасписание.Ссылка В (&Позиции))
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Позиции)";
	
	ПодразделенияПредприятия = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если ПодразделенияПредприятия.Количество() > 0 Тогда
		ПодразделенияПредприятия = РодителиПодразделений(ПодразделенияПредприятия);
	КонецЕсли;
	
	Возврат ПодразделенияПредприятия

КонецФункции

Функция РодителиПодразделений(Подразделения)
	
	РодителиПодразделений = Новый Массив;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Подразделения, "Родитель", Ложь);
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			РодителиПодразделений.Добавить(ЭлементКоллекции.Значение);
		КонецЕсли;
	КонецЦикла;
	
	РодителиПодразделений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РодителиПодразделений);
	Если РодителиПодразделений.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
		РодителиПодразделений = РодителиПодразделений(РодителиПодразделений);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(Подразделения);

КонецФункции

Функция ПодразделениеВСтруктуреПредприятия(Подразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Источник = &Подразделение";
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Подразделение;
	КонецЕсли;
	
	Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();

КонецФункции

Функция ИменаКонтролируемыхПолей(Объект) Экспорт

	ИменаКонтролируемыхПолей = "";
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		ИменаКонтролируемыхПолей = "Наименование,Код,Родитель";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		ИменаКонтролируемыхПолей = "Наименование,ПометкаУдаления";
	КонецЕсли;
	
	Возврат ИменаКонтролируемыхПолей;

КонецФункции

Функция ФотографииФизическихЛиц(ФизическиеЛица) Экспорт

	Возврат Неопределено;

КонецФункции

Функция ТипСтруктураПредприятия() Экспорт
		
	Возврат Тип("СправочникСсылка.СтруктураПредприятия");

КонецФункции

Функция ТипШтатноеРасписание() Экспорт

	Возврат Тип("СправочникСсылка.ШтатноеРасписание");

КонецФункции

Функция ДанныеСтруктурыПредприятия(СписокОтбора) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Список", СписокОтбора);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК СтруктураПредприятия,
	|	СтруктураПредприятия.Код КАК Код,
	|	СтруктураПредприятия.Наименование КАК Наименование,
	|	СтруктураПредприятия.Родитель КАК Родитель,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицоРуководителя,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ЕСТЬNULL(СтруктураПредприятия.Источник.РеквизитДопУпорядочиванияИерархического, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Порядок,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.Организации
	|			ТОГДА СтруктураПредприятия.Источник
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА СтруктураПредприятия.Источник.Владелец
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В(&Список)";
	ТаблицаСтруктурыПредприятия = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(ТаблицаСтруктурыПредприятия) Тогда
		Возврат ТаблицаСтруктурыПредприятия;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО (ФизическиеЛица.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|				И НЕ ОшибкиЗаполнения.ЕстьОшибки)
	|ГДЕ
	|	ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();
	ПубликуемыеФизическиеЛица = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПубликуемыеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	РуководителиОрганизаций = Новый Соответствие;
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСтруктурыПредприятия, "Организация", Истина);
	Для Каждого Организация Из Организации Цикл
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Продолжить;
		КонецЕсли;
		ЗапрашиваемыеЗначения = Новый Структура("Организация, Руководитель");
		ЗапрашиваемыеЗначения.Организация = Организация;
		ПодписиДокументов.ЗаполнитьСведенияОПодписяхДокументовПоОрганизации(ЗапрашиваемыеЗначения);
		Если ПубликуемыеФизическиеЛица[ЗапрашиваемыеЗначения.Руководитель] <> Неопределено Тогда
			РуководителиОрганизаций.Вставить(Организация, ЗапрашиваемыеЗначения.Руководитель);
		КонецЕсли;
	КонецЦикла;
	
	ПорядокОрганизаций = ПорядокОрганизаций();
	Для Каждого СтрокаТаблицы Из ТаблицаСтруктурыПредприятия Цикл
		ПорядокОрганизации = ПорядокОрганизаций[СтрокаТаблицы.Организация];
		ПорядокПодразделения = СтрокаТаблицы.Порядок;
		Если ЗначениеЗаполнено(ПорядокОрганизации) Тогда
			СтрокаТаблицы.Порядок = ПорядокОрганизации + ПорядокПодразделения;
		КонецЕсли;
		СтрокаТаблицы.ФизическоеЛицоРуководителя = РуководителиОрганизаций[СтрокаТаблицы.Организация];
	КонецЦикла;
	
	Возврат ТаблицаСтруктурыПредприятия;

КонецФункции

Функция ДанныеШтатногоРасписания(СписокОтбора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Список", СписокОтбора);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Наименование КАК Наименование,
	|	ШтатноеРасписание.Должность КАК Должность,
	|	СтруктураПредприятия.Ссылка КАК МестоВСтруктуреПредприятия
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО ШтатноеРасписание.Подразделение = СтруктураПредприятия.Источник
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Список)";
	
	ДанныеШтатногоРасписания = Запрос.Выполнить().Выгрузить();
	Возврат ДанныеШтатногоРасписания;

КонецФункции

Функция НоваяПубликуемаяСтруктураПредприятияПозиций(Позиции) Экспорт

	ПодразделенияПредприятия = ПубликуемаяСтруктураПредприятия(Позиции);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодразделенияПредприятия", ПодразделенияПредприятия);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации В(&ПодразделенияПредприятия)";
	НовыеПодразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
	
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПодразделенияПредприятия, НовыеПодразделения);

КонецФункции

Функция ТипыОбрабатываемыхЗаявок() Экспорт

	ТипыЗаявок = Новый Массив;
	Для каждого ТипЗаявки Из Перечисления.ТипыЗаявокКабинетСотрудника Цикл
		Если ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска
			Или ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы Тогда
			Продолжить;
		КонецЕсли;
		ТипыЗаявок.Добавить(ТипЗаявки);
	КонецЦикла;
	
	Возврат ТипыЗаявок;

КонецФункции

Функция МестаПозицийВСтруктуреПредприятия(Позиции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК Позиция,
	|	СтруктураПредприятия.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО ШтатноеРасписание.Подразделение = СтруктураПредприятия.Источник
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Позиции)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция КадровыеДанныеСотрудников(МассивОтбора, ВыбираемыеПоля, ВедетсяШтатноеРасписание) Экспорт

	Индекс = ВыбираемыеПоля.Найти("ДолжностьПоШтатномуРасписанию");
	Если Индекс <> Неопределено Тогда
		ВыбираемыеПоля.Удалить(Индекс);
	КонецЕсли;
	Индекс = ВыбираемыеПоля.Найти("МестоВСтруктуреПредприятия");
	Если Индекс <> Неопределено Тогда
		ВыбираемыеПоля.Удалить(Индекс);
	КонецЕсли;
	Индекс = ВыбираемыеПоля.Найти("ПоказательТарифнойСтавки");
	Если Индекс <> Неопределено Тогда
		ВыбираемыеПоля.Удалить(Индекс);
	КонецЕсли;
	
	КадровыеДанные = СтрСоединить(ВыбираемыеПоля, ", ");
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, МассивОтбора, КадровыеДанные);
	
	ПоказательТарифнойСтавки = НСтр("ru = 'Оклад'");
	ТаблицаДанных.Колонки.Добавить("ПоказательТарифнойСтавки");
	ТаблицаДанных.ЗаполнитьЗначения(ПоказательТарифнойСтавки, "ПоказательТарифнойСтавки");
	ТаблицаДанных.Колонки.Добавить("ДолжностьПоШтатномуРасписанию");
	ТаблицаДанных.Колонки.Добавить("МестоВСтруктуреПредприятия");
	
	Возврат ТаблицаДанных;

КонецФункции

Функция КадровыеДанныеОбновляемыхСотрудников(МенеджерВТ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровыеДанные.Организация КАК Владелец,
	|	КадровыеДанные.Подразделение КАК Подразделение,
	|	КадровыеДанные.Должность КАК Должность
	|ИЗ
	|	ВТКадровыеДанные КАК КадровыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
	|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность
	|ГДЕ
	|	ШтатноеРасписание.Ссылка ЕСТЬ NULL
	|	И ЕСТЬNULL(КадровыеДанные.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И ЕСТЬNULL(КадровыеДанные.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПозицияОбъект = Справочники.ШтатноеРасписание.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ПозицияОбъект, Выборка);
		ПозицияОбъект.Наименование = Строка(ПозицияОбъект.Должность) + " /" + Строка(ПозицияОбъект.Подразделение);
		ПозицияОбъект.Записать();
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанные.Сотрудник КАК Сотрудник,
	|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию,
	|	*
	|ИЗ
	|	ВТКадровыеДанные КАК КадровыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
	|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Создает позиции штатного расписания.
//
// Параметры:
// 	Организация - СправочникСсылка.Организации
//
Процедура СоздатьПозицииОрганизации(Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.Организация = Организация;
	ПараметрыПолучения.НачалоПериода = ТекущаяДатаСеанса();
	ПараметрыПолучения.ОкончаниеПериода = ПараметрыПолучения.НачалоПериода;
	ПараметрыПолучения.КадровыеДанные = "Подразделение,Должность";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ПараметрыПолучения,
		"ВТСотрудникиОрганизацииДляСозданияПозиций");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.Подразделение КАК Подразделение,
	|	СотрудникиОрганизации.Должность КАК Должность,
	|	ШтатноеРасписание.Ссылка КАК Позиция
	|ИЗ
	|	ВТСотрудникиОрганизацииДляСозданияПозиций КАК СотрудникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО СотрудникиОрганизации.Подразделение = ШтатноеРасписание.Подразделение
	|			И СотрудникиОрганизации.Должность = ШтатноеРасписание.Должность
	|ГДЕ
	|	ШтатноеРасписание.Ссылка ЕСТЬ NULL
	|	И ЕСТЬNULL(СотрудникиОрганизации.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И ЕСТЬNULL(СотрудникиОрганизации.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПозицияОбъект = Справочники.ШтатноеРасписание.СоздатьЭлемент();
		ПозицияОбъект.Владелец = Организация;
		ЗаполнитьЗначенияСвойств(ПозицияОбъект, Выборка);
		ПозицияОбъект.Наименование = Строка(ПозицияОбъект.Должность) + " /" + Строка(ПозицияОбъект.Подразделение);
		ПозицияОбъект.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПорядокОрганизаций()
	
	Результат = Новый Соответствие;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование");
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Счетчик = 1;
		Пока Выборка.Следующий() Цикл
			Порядок = ДобавитьЛидирующиеНули(Формат(Счетчик, "ЧГ=0"), 3);
			Результат.Вставить(Выборка.Организация, Порядок);
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьЛидирующиеНули(Знач Строка, Знач ДлинаСтроки)
	
	ТекстПолный = Строка;
	Пока СтрДлина(ТекстПолный) < ДлинаСтроки Цикл
		ТекстПолный = "0" + ТекстПолный;
	КонецЦикла;
	
	Возврат ТекстПолный;
	
КонецФункции

Функция ДоступнаяФункциональностьСервиса() Экспорт

	ИспользуемыеФункции = КабинетСотрудника.НовоеОписаниеИспользуемыеФункции();
	Для каждого ЭлементКоллекции Из ИспользуемыеФункции Цикл
		ИспользуемыеФункции[ЭлементКоллекции.Ключ] = Истина;
	КонецЦикла;
	
	ИспользуемыеФункции.ИнформацияОбОтпуске 				= Ложь;
	ИспользуемыеФункции.ГрафикОтпусков 						= Ложь;
	ИспользуемыеФункции.ЗапросСправкиСМестаРаботы 			= Ложь;
	ИспользуемыеФункции.ОтсутствиеПоЛичнымОбстоятельствам 	= Ложь;
	ИспользуемыеФункции.Опоздание 							= Ложь;
	ИспользуемыеФункции.Командировка 						= Ложь;
	ИспользуемыеФункции.Отгул 								= Ложь;
	ИспользуемыеФункции.ОтпускПоУходуЗаРебенком 			= Ложь;
	ИспользуемыеФункции.УходЗаРебенкомИнвалидом 			= Ложь;
	
	Если Не ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		ИспользуемыеФункции.РегистрацияОтсутствий 		= Ложь;
		ИспользуемыеФункции.Отпуск 						= Ложь;
		ИспользуемыеФункции.ОтпускБезОплаты 			= Ложь;
		ИспользуемыеФункции.УчебныйОтпуск 				= Ложь;
		ИспользуемыеФункции.Болезнь 					= Ложь;
		ИспользуемыеФункции.ОтпускПоБеременностиИРодам 	= Ложь;
	КонецЕсли;
	
	Возврат ИспользуемыеФункции;
	
КонецФункции

#Область ОбновлениеСтруктурыПредприятия

Процедура ОбновитьСтруктуруПредприятияПоТаблицеИсточника(ИсточникПустаяСсылка)

	ТаблицаИзмененных = ИзмененныеЭлементыИсточника(ИсточникПустаяСсылка);
	
	Если ТаблицаИзмененных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Отдельным запросом получаем иерархию элементов источника 
	// для корректной расстановки связей подразделений структуры предприятия.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаИсточника.Ссылка КАК Источник,
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	#СтруктураИсточник КАК ТаблицаИсточника
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО (СтруктураПредприятия.Источник = ТаблицаИсточника.Ссылка)
	|ГДЕ
	|	ТаблицаИсточника.Ссылка В(&Источник)
	|ИТОГИ ПО
	|	Источник ИЕРАРХИЯ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СтруктураИсточник", ИсточникПустаяСсылка.Метаданные().ПолноеИмя());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Источник", ТаблицаИзмененных.ВыгрузитьКолонку("Источник"));
	
	РезультатИерархии = Запрос.Выполнить();
	
	СоответствиеПодразделений = Новый Соответствие;
	ОбновитьУровеньИерархииСтруктурыПредприятия(РезультатИерархии, ТаблицаИзмененных, СоответствиеПодразделений);
	
КонецПроцедуры

Процедура ОбновитьУровеньИерархииСтруктурыПредприятия(ВыборкаПоГруппировке, ТаблицаИзмененных, СоответствиеПодразделений)
	
	Выборка = ВыборкаПоГруппировке.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		// Пропускаем, если источник уже обрабатывали на других уровнях группировки.
		Если ЗначениеЗаполнено(Выборка.Источник) 
			И СоответствиеПодразделений[Выборка.Источник] = Неопределено Тогда
			НайденныеСтроки = ТаблицаИзмененных.НайтиСтроки(Новый Структура("Источник", Выборка.Источник));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаИсточника = НайденныеСтроки[0];
				Если ЗначениеЗаполнено(СтрокаИсточника.Ссылка) Тогда
					ПодразделениеОбъект = СтрокаИсточника.Ссылка.ПолучитьОбъект();
				Иначе
					ПодразделениеОбъект = Справочники.СтруктураПредприятия.СоздатьЭлемент();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ПодразделениеОбъект, СтрокаИсточника, , "Код");
				ПодразделениеОбъект.КодИсточника = СтрокаИсточника.Код;
				Родитель = СоответствиеПодразделений[СтрокаИсточника.ИсточникРодитель];
				Если Родитель <> Неопределено И ПодразделениеОбъект.Родитель <> Родитель Тогда
					ПодразделениеОбъект.Родитель = Родитель;
				КонецЕсли;
				ПодразделениеОбъект.ДополнительныеСвойства.Вставить("ОбновлениеПоСтруктуреИсточнику", Истина);
				ЗаполнитьКодПодразделенияПоИсточнику(ПодразделениеОбъект, СтрокаИсточника);
				ПодразделениеОбъект.Записать();
				СоответствиеПодразделений.Вставить(Выборка.Источник, ПодразделениеОбъект.Ссылка);
			КонецЕсли;
		КонецЕсли;
		ОбновитьУровеньИерархииСтруктурыПредприятия(Выборка, ТаблицаИзмененных, СоответствиеПодразделений);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКодПодразделенияПоИсточнику(ПодразделениеОбъект, СведенияИсточника)
	
	// У организации нет кода, получаем очередной код по порядку.
	Если СведенияИсточника.Код = Неопределено И ПодразделениеОбъект.Ссылка.Пустая() Тогда
		УстановитьНовыйКод(ПодразделениеОбъект);
		Возврат;
	КонецЕсли;
	
	// Код подразделения составляем, добавляя в качестве префикса код организации-родителя.
	Если ТипЗнч(СведенияИсточника.Источник) <> Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	// Запросом находим код подразделения структуры предприятия, 
	// соответствующего организации подразделения.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Источник", СведенияИсточника.Источник);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделениеВерхнегоУровня.Ссылка,
		|	ПодразделениеВерхнегоУровня.Код
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК ПодразделениеВерхнегоУровня
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|			ПО (Организации.Ссылка = ПодразделенияОрганизаций.Владелец)
		|		ПО (Организации.Ссылка = ПодразделениеВерхнегоУровня.Источник)
		|			И (ПодразделенияОрганизаций.Ссылка = &Источник)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьНовыйКод(ПодразделениеОбъект, СведенияИсточника.Код, Выборка.Код);
	
КонецПроцедуры

Процедура УстановитьНовыйКод(ПодразделениеОбъект, КодИсточника = Неопределено, КодРодителя = Неопределено)

	ДлинаКода = Метаданные.Справочники.СтруктураПредприятия.ДлинаКода;
	
	Префикс = Лев(КодРодителя, ДлинаПрефиксаРодителя());
	Для ДлинаСередины = 0 По ДлинаКода - ДлинаПрефиксаРодителя() Цикл
		Если КодИсточника <> Неопределено Тогда
			Постфикс = Прав(КодИсточника, ДлинаКода - ДлинаПрефиксаРодителя() - ДлинаСередины);
		Иначе
			Постфикс = Нули(ДлинаКода - ДлинаПрефиксаРодителя() - ДлинаСередины);
		КонецЕсли;
		Для Попыток = 1 По ?(ДлинаСередины = 0 И ЗначениеЗаполнено(Префикс), 1, 5) Цикл
			ЧастиКода = Новый Массив;
			Если Не ЗначениеЗаполнено(Префикс) Или (ДлинаСередины = 0 И Не ЗначениеЗаполнено(КодРодителя)) Тогда
				Префикс = СлучайныеСимволы(ДлинаПрефиксаРодителя(), Истина);
			КонецЕсли;
			ЧастиКода.Добавить(Префикс);
			Если ДлинаСередины > 0 Тогда
				ЧастиКода.Добавить(СлучайныеСимволы(ДлинаСередины));
			КонецЕсли;
			ЧастиКода.Добавить(Постфикс);
			Код = СтрСоединить(ЧастиКода);
			Если Не КодЗанят(Код, ПодразделениеОбъект.Ссылка) Тогда
				ПодразделениеОбъект.Код = Код;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВызватьИсключение НСтр("ru = 'Не удалось установить новый код элементу структуры предприятия.
						   |Пожалуйста, повторите попытку.'");
	
КонецПроцедуры

Функция ИзмененныеЭлементыИсточника(Источник)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИсточника.Ссылка КАК Источник,
		|	СтруктураПредприятия.Ссылка КАК Ссылка,
		|	ТаблицаИсточника.ПометкаУдаления КАК ПометкаУдаления,
		|	ТаблицаИсточника.Код КАК Код,
		|	ТаблицаИсточника.Наименование КАК Наименование,
		|	ТаблицаИсточника.Родитель КАК ИсточникРодитель,
		|	ЕСТЬNULL(СтруктураПредприятияРодитель.Ссылка, СтруктураПредприятияВладелец.Ссылка) КАК Родитель,
		|	ИСТИНА КАК СоответствуетСтруктуреЮридическихЛиц
		|ИЗ
		|	#СтруктураИсточник КАК ТаблицаИсточника
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО (СтруктураПредприятия.Источник = ТаблицаИсточника.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятияРодитель
		|		ПО (СтруктураПредприятияРодитель.Источник = ТаблицаИсточника.Родитель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятияВладелец
		|		ПО (СтруктураПредприятияВладелец.Источник = ТаблицаИсточника.Владелец)
		|ГДЕ
		|	(ТаблицаИсточника.Ссылка = &Источник
		|			ИЛИ &ПоВсемЭлементамИсточника)
		|	И ТаблицаИсточника.Предопределенный = ЛОЖЬ
		|	И &НЕВладелецПредопределенный
		|	И (СтруктураПредприятия.Ссылка ЕСТЬ NULL
		|			ИЛИ СтруктураПредприятия.ПометкаУдаления <> ТаблицаИсточника.ПометкаУдаления
		|			ИЛИ СтруктураПредприятия.Наименование <> ТаблицаИсточника.Наименование
		|			ИЛИ &КодИзменился
		|			ИЛИ &РодительИзменился)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СтруктураИсточник", Источник.Метаданные().ПолноеИмя());
	
	Если Источник.Метаданные().ДлинаКода = 0 Тогда
		// Если нет кода - заменяем обращение к полю Код.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ТаблицаИсточника.Код КАК Код",
		"НЕОПРЕДЕЛЕНО КАК Код");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&КодИзменился",
		"СтруктураПредприятия.КодИсточника <> ТаблицаИсточника.Код");
	КонецЕсли;
	
	Если Источник.Метаданные().Владельцы.Количество() = 0 Тогда
		// Если справочник не подчинен владельцу, то изменяем заполнение поля Родитель.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ЕСТЬNULL(СтруктураПредприятияРодитель.Ссылка, СтруктураПредприятияВладелец.Ссылка)",
		"СтруктураПредприятияРодитель.Ссылка");
		// ..И исключаем соединение по владельцу.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятияВладелец
		|		ПО (СтруктураПредприятияВладелец.Источник = ТаблицаИсточника.Владелец)",
		"");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"&НЕВладелецПредопределенный",
		"ТаблицаИсточника.Владелец.Предопределенный = ЛОЖЬ");
	КонецЕсли;
	
	Если Не Источник.Метаданные().Иерархический Тогда
		// Если справочник не иерархический, то исключаем использование родителя.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтруктураПредприятияРодитель.Ссылка", "НЕОПРЕДЕЛЕНО");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятияРодитель
		|		ПО (СтруктураПредприятияРодитель.Источник = ТаблицаИсточника.Родитель)",
		"");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаИсточника.Родитель", "НЕОПРЕДЕЛЕНО");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"&РодительИзменился", 
			"СтруктураПредприятия.Родитель <> ЕСТЬNULL(СтруктураПредприятияРодитель.Ссылка, СтруктураПредприятияВладелец.Ссылка)");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КодИзменился", Ложь);
	Запрос.УстановитьПараметр("РодительИзменился", Ложь);
	Запрос.УстановитьПараметр("НЕВладелецПредопределенный", Истина);
	
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("ПоВсемЭлементамИсточника", Не ЗначениеЗаполнено(Источник));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДлинаПрефиксаРодителя()
	Возврат 4;
КонецФункции

Функция Нули(Длина)
	Возврат СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("0", Длина);
КонецФункции

Функция СлучайныеСимволы(Длина, ТолькоЦифры = Ложь)
	
	СлучайныеСимволы = Новый Массив;
	
	Интервалы = Новый Массив;
	Интервалы.Добавить(Интервал(48, 57)); // 48..57 цифры от 0 до 9
	Если Не ТолькоЦифры Тогда
		Интервалы.Добавить(Интервал(65, 90)); // 65..90 латиница заглавные
	КонецЕсли;
	
	Генератор = Новый ГенераторСлучайныхЧисел(КодСимвола(Лев(Строка(Новый УникальныйИдентификатор), 1)));
	Для Номер = 1 По Длина Цикл
		Интервал = Интервалы[Генератор.СлучайноеЧисло(0, Интервалы.ВГраница())];
		СлучайныеСимволы.Добавить(Символ(Генератор.СлучайноеЧисло(Интервал.Начало, Интервал.Окончание))); 
	КонецЦикла;
	
	Возврат СтрСоединить(СлучайныеСимволы);
	
КонецФункции

Функция Интервал(Начало, Окончание)
	Возврат Новый Структура("Начало, Окончание", Начало, Окончание);
КонецФункции

Функция КодЗанят(Код, ИсключаяПодразделение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("ТекущееПодразделение", ИсключаяПодразделение);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Код = &Код
		|	И СтруктураПредприятия.Ссылка <> &ТекущееПодразделение";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОбновитьЭлементСтруктурыПредприятия(Источник, Отказ) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("УстановкаПометкиУдаленияСтруктурыПредприятия") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных();
	Блокировка.Добавить("Справочник.СтруктураПредприятия");
	ЭлементБлокировки = Блокировка.Добавить(Источник.Метаданные().ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Источник.Ссылка);
	
	Попытка
		Блокировка.Заблокировать();
		ТаблицаИзмененных = ИзмененныеЭлементыИсточника(Источник.Ссылка);
		Для Каждого СтрокаИсточника Из ТаблицаИзмененных Цикл
			Если ЗначениеЗаполнено(СтрокаИсточника.Ссылка) Тогда
				ПодразделениеОбъект = СтрокаИсточника.Ссылка.ПолучитьОбъект();
			Иначе
				ПодразделениеОбъект = Справочники.СтруктураПредприятия.СоздатьЭлемент();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ПодразделениеОбъект, СтрокаИсточника, , "Код");
			ПодразделениеОбъект.КодИсточника = СтрокаИсточника.Код;
			ЗаполнитьКодПодразделенияПоИсточнику(ПодразделениеОбъект, СтрокаИсточника);
			ПодразделениеОбъект.ДополнительныеСвойства.Вставить("ОбновлениеПоСтруктуреИсточнику", Истина);
			ПодразделениеОбъект.Записать();
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Организационная структура.Обновление элемента структуры предприятия.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , Источник.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти







