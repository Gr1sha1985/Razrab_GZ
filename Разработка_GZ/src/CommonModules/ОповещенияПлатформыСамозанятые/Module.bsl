
#Область ПрограммныйИнтерфейс

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента
Процедура ДобавитьПараметрыЧата(ВсеПараметры) Экспорт
	
	Если Не ОбсужденияСлужебныйВызовСервера.Подключены() Тогда
		Возврат;
	КонецЕсли;
	
	//Если Не ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если Не ОповещенияПлатформыСамозанятыеПереопределяемый.ДоступноЧтениеОповещений() Тогда
	//	Возврат;
	//КонецЕсли;
	
	ПараметрыВсехЧатов = Новый Соответствие;
	
	// Находим (создаем) чат-бота - пользователя ИБ.
	ПользовательБота = Пользователи.НайтиПоИмени(ИмяПользовательИБПомощник());
	Если ПользовательБота = Неопределено Тогда
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Имя = ИмяПользовательИБПомощник();
		ОписаниеПользователяИБ.ПолноеИмя = ПолноеИмяПользовательИБПомощник();
		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Ложь);
		ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
		ОписаниеПользователяИБ.СохраняемоеЗначениеПароля = "";
		
		УстановитьПривилегированныйРежим(Истина);
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
		НовыйПользователь.Служебный = Истина;
		НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		НовыйПользователь.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(ИмяПользовательИБПомощник());
	УстановитьПривилегированныйРежим(Ложь);
	
	// Находим (создаем) чат-бота - пользователя системы взаимодействия.
	Попытка
		ИдентификаторБота = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(
			СвойстваПользователяИБ.УникальныйИдентификатор);
	Исключение
		УстановитьПривилегированныйРежим(Истина);
		ПользовательВзаимодействия = СистемаВзаимодействия.СоздатьПользователя(СвойстваПользователяИБ.ПользовательИБ);
		ПользовательВзаимодействия.Имя = НСтр("ru='ФНС России'");
		ПользовательВзаимодействия.ПолноеИмя = НСтр("ru='ФНС России'");
		ПользовательВзаимодействия.Картинка = БиблиотекаКартинок.ПлатформаСамозанятыеЛоготипФНС;
		ПользовательВзаимодействия.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		ИдентификаторБота = ПользовательВзаимодействия.Идентификатор;
	КонецПопытки;
	
	// Находим (создаем) обсуждение с помощником.
	ПодключенныеОрганизации = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.ПодключенныеОрганизации();
	ИспользуетсяНесколькоОрганизаций = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	Для Каждого Организация Из ПодключенныеОрганизации Цикл
		
		Если ИспользуетсяНесколькоОрганизаций Тогда
			КлючЧата = КлючЧата(Строка(Организация.УникальныйИдентификатор()));
		Иначе
			КлючЧата = КлючЧата("");
		КонецЕсли;
		ЗаголовокЧата = ЗаголовокЧата(Организация, ИспользуетсяНесколькоОрганизаций);
		
		Отбор = Новый ОтборОбсужденийСистемыВзаимодействия;
		Отбор.Ключ = КлючЧата;
		Отбор.ТекущийПользовательЯвляетсяУчастником = Истина;
		ЧатыФНС = СистемаВзаимодействия.ПолучитьОбсуждения(Отбор);
		Если ЧатыФНС.Количество() = 0 Тогда
			УстановитьПривилегированныйРежим(Истина);
			ЧатФНС = СистемаВзаимодействия.СоздатьОбсуждение();
			ЧатФНС.Ключ = КлючЧата;
			Если ИспользуетсяНесколькоОрганизаций Тогда
				ЧатФНС.Групповое = Истина;
				ЧатФНС.Заголовок = ЗаголовокЧата;
			Иначе
				ЧатФНС.Групповое = Ложь;
			КонецЕсли;
			ЧатФНС.Участники.Добавить(ИдентификаторБота);
			ЧатФНС.Участники.Добавить(СистемаВзаимодействия.ИдентификаторТекущегоПользователя());
			ЧатФНС.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		Иначе
			ЧатФНС = ЧатыФНС[0];
			Если ИспользуетсяНесколькоОрганизаций И ЧатФНС.Заголовок <> ЗаголовокЧата Тогда
				УстановитьПривилегированныйРежим(Истина);
				ЧатФНС.Заголовок = ЗаголовокЧата;
				ЧатФНС.Записать();
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЧата = НовыйПараметрыЧата();
		ПараметрыЧата.Организация = Организация;
		ПараметрыЧата.ИдентификаторПомощника = Строка(ИдентификаторБота);
		ПараметрыЧата.ИдентификаторЧата = Строка(ЧатФНС.Идентификатор);
		
		ПараметрыВсехЧатов.Вставить(Строка(ЧатФНС.Идентификатор), ПараметрыЧата);
		
	КонецЦикла;
	
	//ВсеПараметры.Вставить("ОповещенияПлатформыСамозанятые", ПараметрыВсехЧатов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПоказатьОповещения(ПараметрыМетода, АдресРезультата) Экспорт
	
	Если Не ОбсужденияСлужебныйВызовСервера.Подключены() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЧата = ПараметрыМетода.ПараметрыЧата;
	РезультатЗапроса = ПараметрыМетода.РезультатЗапроса;
	
	ТипыОповещений = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ТипыОповещений();
	
	ИдентификаторЧата = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ПараметрыЧата.ИдентификаторЧата);
	ИдентификаторБота = Новый ИдентификаторПользователяСистемыВзаимодействия(ПараметрыЧата.ИдентификаторПомощника);
	
	// Найдем последнее показанное сообщение от платформы Самозанятые.
	ОтборСообщений = Новый ОтборСообщенийСистемыВзаимодействия;
	ОтборСообщений.Количество = 200;
	ОтборСообщений.НаправлениеСортировки = НаправлениеСортировки.Убыв;
	ОтборСообщений.Обсуждение = ИдентификаторЧата;
	
	НайденныеСообщения = СистемаВзаимодействия.ПолучитьСообщения(ОтборСообщений);
	ИдентификаторПоследнегоОповещения = "";
	Для Каждого Сообщение Из НайденныеСообщения Цикл
		
		ДанныеСообщения = ЗначениеИзJSON(Сообщение.Данные, Ложь);
		Если ТипЗнч(ДанныеСообщения) = Тип("Структура") И ДанныеСообщения.Свойство("Идентификатор") Тогда
			ИдентификаторПоследнегоОповещения = ДанныеСообщения.Идентификатор;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ИдентификаторПоследнегоОповещения) Тогда
		// Выберем только те сообщения, которые еще не показывали.
		РезультатЗапроса.Оповещения.Сортировать("ДатаСоздания УБЫВ");
		НовыеОповещения = Новый Массив;
		Для Каждого СтрокаТаблицы Из РезультатЗапроса.Оповещения Цикл
			Если СтрокаТаблицы.Идентификатор = ИдентификаторПоследнегоОповещения Тогда
				Прервать;
			КонецЕсли;
			
			НовыеОповещения.Добавить(СтрокаТаблицы);
		КонецЦикла;
		ТаблицаОповещения = РезультатЗапроса.Оповещения.Скопировать(НовыеОповещения);
	Иначе
		ТаблицаОповещения = РезультатЗапроса.Оповещения;
	КонецЕсли;
	
	ТаблицаОповещения.Сортировать("ДатаСоздания ВОЗР");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Оповещение Из ТаблицаОповещения Цикл
		
		НовоеСообщение = СистемаВзаимодействия.СоздатьСообщение(ИдентификаторЧата);
		НовоеСообщение.Автор = ИдентификаторБота;
		НовоеСообщение.Дата = Оповещение.ДатаСоздания;
		НовоеСообщение.Текст = Оповещение.Сообщение;
		НовоеСообщение.Получатели.Добавить(СистемаВзаимодействия.ИдентификаторТекущегоПользователя());
		
		ДанныеСообщения = НовыйДанныеСообщения();
		ЗаполнитьЗначенияСвойств(ДанныеСообщения, Оповещение);
		НовоеСообщение.Данные = ЗначениеВJSON(ДанныеСообщения);
		
		Если Оповещение.ТипОповещения = ТипыОповещений.ОплатаНалога Тогда
			НовоеСообщение.Действия.Добавить("ПерейтиКОплатеНПД", НСтр("ru = 'Перейти к оплате'"));
		ИначеЕсли Оповещение.ТипОповещения = ТипыОповещений.ЗапросНаПодключение Тогда
			НовоеСообщение.Действия.Добавить(
				"ПерейтиВЛичныйКабинетМойНалог", НСтр("ru = 'Перейти в личный кабинет сервиса Мой налог'"));
		КонецЕсли;
		
		НовоеСообщение.Записать();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УдалитьОповещение(ИдентификаторСообщения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СистемаВзаимодействия.УдалитьСообщение(ИдентификаторСообщения);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Константы

Функция ИмяПользовательИБПомощник()
	
	Возврат "ЧатБотПлатформыСамозанятыеСлужебный";
	
КонецФункции

Функция ПолноеИмяПользовательИБПомощник()
	
	Возврат НСтр("ru = 'Уведомления от ФНС России'");
	
КонецФункции

Функция КлючЧата(ДополнительныйИдентификатор)
	
	СоставКлюча = Новый Массив;
	СоставКлюча.Добавить(ИмяПользовательИБПомощник());
	СоставКлюча.Добавить(СистемаВзаимодействия.ИдентификаторТекущегоПользователя());
	Если ЗначениеЗаполнено(ДополнительныйИдентификатор) Тогда
		СоставКлюча.Добавить(ДополнительныйИдентификатор);
	КонецЕсли;
	
	Возврат СтрСоединить(СоставКлюча, "_");
	
КонецФункции

Функция ЗаголовокЧата(Организация, НесколькоОрганизаций)
	
	Если НесколькоОрганизаций Тогда
		Заголовок = СтрШаблон(
			НСтр("ru = 'ФНС России ⇒ %1'"),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Наименование"));
	Иначе
		Заголовок = НСтр("ru = 'ФНС России'");
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

#КонецОбласти

#Область Конструкторы

Функция НовыйПараметрыЧата()
	
	Результат = Новый Структура;
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("ИдентификаторЧата", "");
	Результат.Вставить("ИдентификаторПомощника", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеСообщения()
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	Результат.Вставить("Заголовок");
	Результат.Вставить("Сообщение");
	Результат.Вставить("Статус");
	Результат.Вставить("ДатаСоздания");
	Результат.Вставить("ДатаОбновления");
	Результат.Вставить("ТипОповещения");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСJSON

Функция ЗначениеВJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	Попытка
		ЗаписатьJSON(ЗаписьJSON, Значение);
		Возврат ЗаписьJSON.Закрыть();
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

Функция ЗначениеИзJSON(ТекстJSON, ВСоответствие = Ложь, СвойстваТипаДата = Неопределено) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		Значение = ПрочитатьJSON(ЧтениеJSON, ВСоответствие, СвойстваТипаДата);
	Исключение
		Значение = Неопределено;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#КонецОбласти
