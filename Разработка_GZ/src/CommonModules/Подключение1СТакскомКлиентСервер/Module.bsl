///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Подключение 1С-Такском".
// ОбщийМодуль.Подключение1СТакскомКлиентСервер.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики бизнес-процессов

// Выполнение команды "Записать коды регионов в сессионные параметры".
//
Процедура СохранитьВПараметрахКодыРегионов(КСКонтекст, Знач СтруктураКоманды) Экспорт
	
	МассивПараметров = СтруктураКоманды.Параметры;
	СписокКодов      = Новый СписокЗначений;
	
	Для каждого Параметр Из МассивПараметров Цикл
		
		// Именем параметра служит код, Значением - наименование региона.
		// Выбирать удобнее по названию региона - поэтому замена.
		СписокКодов.Добавить(
			Параметр.Имя,
			Параметр.Имя + " - " + Параметр.Значение);
		
	КонецЦикла;
	
	ЗаписатьПараметрКонтекста(
		КСКонтекст,
		"codesRegionED",
		СписокКодов);
	
КонецПроцедуры

// Запись сессионного или стартового параметра. Стартовые параметры записываются
// также в общие стартовые параметры.
//
Процедура ЗаписатьПараметрКонтекста(
	КСКонтекст,
	ИмяПараметра,
	ЗначениеПараметра,
	ОбластьВидимости = "",
	ОбщиеСтартовыеПараметры = Неопределено) Экспорт

	ЭтоСтартовыйПараметр = (НРег(ОбластьВидимости) = "startup");
	СессионныеПараметры = КСКонтекст.СессионныеПараметры;

	Параметр = СессионныеПараметры.Получить(ИмяПараметра);

	ОбластьВидимостиЗаписываемого = ?(ЭтоСтартовыйПараметр, "startUp", "");

	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ЗначениеПараметра;
		Параметр.ОбластьВидимости = ОбластьВидимостиЗаписываемого;
	Иначе
		Если НРег(СокрЛП(ИмяПараметра)) <> "password" Тогда
			Параметр = НовыйПараметрИПП(ИмяПараметра, ЗначениеПараметра, ОбластьВидимостиЗаписываемого);
			СессионныеПараметры.Вставить(ИмяПараметра, Параметр);
		КонецЕсли;
	КонецЕсли;

	// Если параметр является стартовым, то он сохраняется для
	// всех пользователей в регистре сведений.
	Если ЭтоСтартовыйПараметр И ОбщиеСтартовыеПараметры <> Неопределено Тогда
		ОбщиеСтартовыеПараметры.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЕсли;

КонецПроцедуры

// Создает описание параметра ИПП.
// Параметры:
// Имя - Строка - имя параметра;
// Значение - Строка - значение параметра;
// ОбластьВидимости - Строка - область видимости параметра (сессионный
//		или стартовый);
//
// Возвращаемое значение:
// Структура - описание параметра с полями:
//	* Имя - Строка - имя параметра;
//	* Значение - Строка - значение параметра;
//	* ОбластьВидимости - Строка - область видимости параметра;
//
Функция НовыйПараметрИПП(Имя, Значение, ОбластьВидимости) Экспорт

	Возврат Новый Структура("Имя, Значение, ОбластьВидимости",
		Имя,
		Значение,
		ОбластьВидимости);

КонецФункции

// Возвращает версию поддерживаемого библиотекой API
// взаимодействия с серверной частью бизнес-процессов.
//
Функция ВерсияAPIСервисаБизнесПроцессов() Экспорт

	Возврат "1.0.1.1";

КонецФункции

// Возвращает тип команды - клиентская или серверная.
//
// Параметры:
// СтруктураКоманды - Структура - сервиса ИПП во внутреннем представлении.
//
// Возвращаемое значение:
// Число - тип команды: -1 - неизвестный тип команды, 0 - выполняется на
//		сервере, 1 - выполняется на клиенте.
//
Функция ТипКоманды(СтруктураКоманды, ОбращениеССервера, МестоЗапуска) Экспорт

	Если СтруктураКоманды = Неопределено Тогда
		Возврат -1; // Неизвестный тип команды
	КонецЕсли;

	ИмяКоманды = НРег(СокрЛП(СтруктураКоманды.ИмяКоманды));
	
	Если ИмяКоманды = "store.put"
		Или ИмяКоманды = "store.get"
		Или ИмяКоманды = "store.delete"
		Или ИмяКоманды = "launchservice"
		Или ИмяКоманды = "store.putorganizations"
		Или ИмяКоманды = "store.putadressclassifier"
		Или ИмяКоманды = "store.putadressclassifier"
		Или ИмяКоманды = "setcodesregion"
		Или ИмяКоманды = "performtheaction.findcertificatefingerprint"
		ИЛИ ИмяКоманды = "performtheaction.getinformationaboutorganization"
		ИЛИ ИмяКоманды = "performtheaction.getcertificate" Тогда

		Возврат 0;

	ИначеЕсли СтруктураКоманды.ИмяКоманды = "ui.open"
		Или ИмяКоманды = "ui.close"
		Или ИмяКоманды = "performtheaction.decode"
		Или ИмяКоманды = "message.show"
		Или ИмяКоманды = "question.show"
		Или ИмяКоманды = "input.field"
		Или ИмяКоманды = "system.halt" Тогда

		Возврат 1;

	КонецЕсли;

КонецФункции

#КонецОбласти
