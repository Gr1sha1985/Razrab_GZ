#Область ПрограммныйИнтерфейс

#Область ДокументыРасходов

// Формы документов расходов должны удовлетворять требованиям из УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы

#Область ИнициализацияФормы

// Описывает особенности конкретного вида документов, в который можно загружать кассовые чеки
// 
// Параметры:
//  ОписаниеФормы - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйОписаниеДокумента(ОписаниеФормы) Экспорт
	
	ОписаниеДокумента = Новый Структура;
	ОписаниеДокумента.Вставить("Номенклатура",               Ложь); // Нужно определять номенклатуру (искать по наименованию)
	ОписаниеДокумента.Вставить("Поставщик",                  Ложь); // Нужно определять поставщика (искать по ИНН)
	ОписаниеДокумента.Вставить("ДополнительныйТекстБаннера", "");   // Например, описывается состав табличных частей
	ОписаниеДокумента.Вставить("ОписаниеФормы",              ОписаниеФормы);
	
	Возврат ОписаниеДокумента;
	
КонецФункции

// Настраивает форму для отображения загруженных чеков (при создании формы или чтении данных)
//
// Параметры:
//  Форма         - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                                     должна соответствовать описанию
//  ОписаниеФормы - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы
//
Процедура НастроитьОтображениеЗагруженныхЧеков(Форма, ОписаниеФормы) Экспорт
	
	Форма[ОписаниеФормы.РеквизитЕстьЗагруженныеЧеки] = ОтображениеНаименованияИзЧека(Форма.Объект.Ссылка);
	
КонецПроцедуры

// Устанавливает условное оформление для реквизита табличной части Описание/Содержание.
//
// Параметры:
//  УсловноеОформление	 - УсловноеОформление - настройки условного оформления формы
//  НаименованиеПоля	 - Строка - имя поля, например, "ТоварыОписание"
//
Процедура УстановитьУсловноеОформлениеНаименованияИзЧека(УсловноеОформление, НаименованиеПоля) Экспорт
	
	Равно = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, НаименованиеПоля);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтображатьНаименованиеИзЧека", Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, НаименованиеПоля);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтображатьНаименованиеИзЧека", Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Настраивает форму для загрузки чеков при создании формы:
// - устанавливает видимость команд
// - получает данные о чеках, готовых к загрузке
// - отрисовывает баннер.
// Также следует вызывать при изменениях контекста, в результате которых чеки может стать бессмысленно загружать:
// например, при оформлении документа в иностранной валюте.
//
// После открытия формы данные о чеках, готовых к загрузке, можно обновить с помощью ОбновитьЧекиКЗагрузке
//
// Параметры:
//  Форма                        - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                                         должна соответствовать описанию
//  ОписаниеДокумента            - Структура - см. НовыйОписаниеДокумента
//  УчетВозможен                 - Булево - Ложь, если в контексте документа загружать чеки нет смысла
//
Процедура НастроитьФорму(Форма, ОписаниеДокумента, УчетВозможен = Истина) Экспорт
	
	МожноСканироватьЧеки = УчетВозможен И РегистрыСведений.МобильноеПриложениеСканированиеЧеков.ВключеноСканированиеЧеков();
	
	ОписаниеФормы = ОписаниеДокумента.ОписаниеФормы;
	
	Для Каждого ИмяКнопки Из ОписаниеФормы.КнопкиЗагрузитьЧеки Цикл
		Форма.Элементы[ИмяКнопки].Видимость = МожноСканироватьЧеки;
	КонецЦикла;
	
	ПолеБаннера = Форма.Элементы[ОписаниеФормы.Баннер];
	ПолеБаннера.Видимость = Ложь; // Может быть установлена позже, при чтении чеков
	Если МожноСканироватьЧеки Тогда
		ПолеБаннера.ЦветФона = ЦветаСтиля.ЦветБаннераБежевый;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование) Тогда
		Форма.ИспользуютсяСканерыШтрихкода = (МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		Форма.ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	МожноЗагружатьЧеки = МожноСканироватьЧеки
		И Не Форма.ТолькоПросмотр
		И (РегистрыСведений.МобильноеПриложениеСканированиеЧеков.ПодключеноМобильноеПриложение()
		Или Форма.ИспользуютсяСканерыШтрихкода);
	
	Если Не МожноЗагружатьЧеки Тогда
		Адрес = Форма[ОписаниеФормы.РеквизитДанныеФормы];
		Если ЭтоАдресВременногоХранилища(Адрес) Тогда
			УдалитьИзВременногоХранилища(Адрес);
			Форма[ОписаниеФормы.РеквизитДанныеФормы] = "";
		КонецЕсли;
		РегистрыСведений.МобильноеПриложениеСканированиеЧеков.НачатьПроверкуСообщений();
		Форма[ОписаниеФормы.РеквизитСледующееДействие] = "";
		Возврат;
	КонецЕсли;
	
	Форма.НастройкаВидимостиБаннераПодключенАппаратныйСканер = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ВРег("ДокументДляЗагрузкиКассовыхЧеков"),
		ВРег("ПодключенАппаратныйСканер"),
		Истина);
	
	Форма[ОписаниеФормы.РеквизитДанныеФормы] = ПоместитьВоВременноеХранилище(
		НовыйДанныеФормыКассовыеЧекиПодотчетныхЛиц(ОписаниеДокумента),
		Форма.УникальныйИдентификатор);
	
	ПрочитатьКассовыеЧекиПодотчетныхЛиц(Форма, ОписаниеФормы);
	
КонецПроцедуры

// Читает в форму кассовые чеки подотчетных лиц к загрузке.
// Используется в серверном контексте: при создании формы, после записи документа.
//
// После записи документа следует вызывать эту процедуру, чтобы сократить клиент-серверное взаимодействие
// для следующего вызова ОбновитьЧекиКЗагрузке.
// В ходе записи документа меняются сведения о включении данных в документы,
// в результате обновление данных о чеках к загрузке прочитает результат с другим хешем.
//
// На момент вызова процедуры хранилище с данными о чеках (ОписаниеФормы.РеквизитДанныеФормы)
// должно содержать значение из НовыйДанныеФормыКассовыеЧекиПодотчетныхЛиц
//
// Параметры:
//  Форма         - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                                     должна соответствовать описанию
//  ОписаниеФормы - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы
//
Процедура ПрочитатьКассовыеЧекиПодотчетныхЛиц(Форма, ОписаниеФормы) Экспорт
	
	АдресКассовыеЧекиПодотчетныхЛиц = Форма[ОписаниеФормы.РеквизитДанныеФормы];
	Если Не ЭтоАдресВременногоХранилища(АдресКассовыеЧекиПодотчетныхЛиц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЧеков = ПолучитьИзВременногоХранилища(АдресКассовыеЧекиПодотчетныхЛиц);
	
	ЧекиКЗагрузке = НовыйЧекиКЗагрузке();
	Документы.КассовыйЧекПодотчетногоЛица.ПрочитатьЧекиКЗагрузке(ЧекиКЗагрузке);
	
	ХешКЗагрузке = ХешКЗагрузке(ЧекиКЗагрузке);
	
	Если ХешКЗагрузке <> ДанныеЧеков.ХешКЗагрузке Тогда
		ДанныеЧеков.КЗагрузке    = ЧекиКЗагрузке;
		ДанныеЧеков.ХешКЗагрузке = ХешКЗагрузке;
		ДанныеЧеков.Загруженные.Очистить();
		ДанныеЧеков.КешПодбора = Неопределено;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеЧеков, АдресКассовыеЧекиПодотчетныхЛиц);
	
	// Обновим значения реквизитов и свойства элементов формы, зависящие от прочитанных данных
	УстановитьБаннерЧекиКЗагрузке(Форма, ДанныеЧеков, ОписаниеФормы);
	Форма[ОписаниеФормы.РеквизитСледующееДействие] = СледующееДействие(ДанныеЧеков.КЗагрузке);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокумента

// Выполняет одно из двух действий:
// 1. заполняет документ 
// 2. переводит форму документа в режим заполнения данными отсканированных чеков.
// 
// Функцию следует вызывать в контексте формы.
//
// Совмещение двух действий в одной процедуре нужно, чтобы сократить объем кода, тиражируемый по формам документов.
//
// Параметры:
//  Форма                        - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                                     должна соответствовать описанию
//  АдресСодержимоеЧеков         - Строка - адрес с результатом ПодготовитьСодержимоеКассовыхЧековПодотчетныхЛиц
//                               - Неопределено - чем заполнять еще неясно: форма будет переведена в режим заполнения, тогда и станет ясно
//  ИмяСписка                    - Строка - имя списка, который нужно заполнить содержимым чеков
//  СуммаВключаетНДС             - Булево - признак из документа, выполняется пересчет цены и суммы, если Ложь (НДС сверху)
//  ОписаниеДокумента            - Структура - см. НовыйОписаниеДокумента
//
// Возвращаемое значение:
//  Массив из ТабличнаяЧастьСтрока - строки, добавленные при заполнении
//
Функция ДействияПоЗаполнениюНаСервере(Форма, АдресСодержимоеЧеков, ИмяСписка, СуммаВключаетНДС, ОписаниеДокумента) Экспорт
	
	Если АдресСодержимоеЧеков = Неопределено Тогда
		НастроитьФорму(Форма, ОписаниеДокумента);
		Возврат Новый Массив;
	Иначе
		Возврат ЗаполнитьДокумент(Форма, ИмяСписка, АдресСодержимоеЧеков, СуммаВключаетНДС, ОписаниеДокумента.ОписаниеФормы);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УстановкаМобильногоПриложения

// Устанавливает видимость в командном интерфейсе формы ПомощникУстановкиМобильногоПриложенияСканированиеЧеков
//
// Параметры:
//  Включить - Булево - Истина, чтобы включить видимость
//
Процедура УстановитьОпциюУстановкаМобильногоПриложения(Включить = Истина) Экспорт
	
	Константы.УстановкаМобильногоПриложенияСканированиеЧеков.Установить(
		Включить И ОбщегоНазначенияБП.ЭтоПолныйИнтерфейс());
		
	Константы.УстановкаМобильногоПриложенияСканированиеЧековПростойИнтерфейс.Установить(
		Включить И ОбщегоНазначенияБП.ЭтоПростойИнтерфейс());
		
КонецПроцедуры

// Описывает для подсистемы тарификации зависимость видимости в командном интерфейсе
// формы ПомощникУстановкиМобильногоПриложенияСканированиеЧеков от права вести учет регулярной деятельности
// 
// Параметры:
//  РазрешенУчет - Булево - Истина, если учет разрешен
//
Процедура УстановитьЗависимыеКонстантыРазрешенУчетРегулярнойДеятельности(РазрешенУчет) Экспорт
	
	РазрешенаУстановка = ПолучитьФункциональнуюОпцию("УстановкаМобильногоПриложенияСканированиеЧеков")
		Или ПолучитьФункциональнуюОпцию("УстановкаМобильногоПриложенияСканированиеЧековПростойИнтерфейс");
	
	Если РазрешенУчет = РазрешенаУстановка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОпциюУстановкаМобильногоПриложения(РазрешенУчет);
	
КонецПроцедуры

// Отложенный обработчик обновления:
// устанавливает видимость в командном интерфейсе формы ПомощникУстановкиМобильногоПриложенияСканированиеЧеков.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//
Процедура УстановитьОпциюУстановкаМобильногоПриложенияОтложенно(ПараметрыОбработчика) Экспорт
	
	УстановитьОпциюУстановкаМобильногоПриложения();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеЧековКЗагрузке // Баннер

// Запускает фоновое задание для получения списка чеков подотчетных лиц к загрузке и данных о чеках для баннера.
// Обработка результата длительной операции выполняется в ЗавершитьОбновлениеЧековКЗагрузке
// См. также УчетКассовыхЧековПодотчетныхЛицКлиент.ОбновитьЧекиКЗагрузке
//
// Параметры:
//  АдресДанныеФормы   - Строка - адрес во временном хранилище, созданный с помощью НастроитьФорму,
//                                содержащем НовыйДанныеФормыКассовыеЧекиПодотчетныхЛиц
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы
// 
// Возвращаемое значение:
//  Структура - параметры выполнения длительной операции
//
Функция НачатьОбновлениеЧековКЗагрузке(АдресДанныеФормы, ИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Обновление списка кассовых чеков подотчетных лиц, доступных к загрузке в документы'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДанныеФормы = ПолучитьИзВременногоХранилища(АдресДанныеФормы);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ХешКЗагрузке", ДанныеФормы.ХешКЗагрузке);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"УчетКассовыхЧековПодотчетныхЛиц.ОбновитьЧекиКЗагрузке",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

// Проверяет наличие новых данных об отсканированных кассовых чеках.
// Чеки, которые были загружены в этой форме (в этом сеансе работы с формой) не исключаются.
// Т.е. под новыми данными понимается результат внешних по отношению к форме документа событиях.
//
// Параметры:
//  Параметры - Структура
//      * ХешКЗагрузке - Число - хеш CRC32 данные о чеках к загрузке, полученных ранее
//  АдресРезультата - Строка - адрес временного хранилища, в которое помещается:
//     -- Структура - информация о новых данных:
//           * КЗагрузке - ТаблицаЗначений, см. НовыйЧекиКЗагрузке - актуальные данные о чеках к загрузке
//           * ХешКЗагрузке - хеш CRC32 этих данных
//     -- Неопределено - если новых данных нет (хеш актуальных данных совпадает с переданным)
// 
Процедура ОбновитьЧекиКЗагрузке(Параметры, АдресРезультата) Экспорт
	
	ЧекиКЗагрузке = НовыйЧекиКЗагрузке();
	Документы.КассовыйЧекПодотчетногоЛица.ПрочитатьЧекиКЗагрузке(ЧекиКЗагрузке);
	
	ХешКЗагрузке = ХешКЗагрузке(ЧекиКЗагрузке);
	
	Если Параметры.ХешКЗагрузке = ХешКЗагрузке(ЧекиКЗагрузке) Тогда
		Результат = Неопределено;
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("КЗагрузке",    ЧекиКЗагрузке);
		Результат.Вставить("ХешКЗагрузке", ХешКЗагрузке);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Обрабатывает результат проверки новых данных об отсканированных кассовых чеках,
// выполненной с помощью ОбновитьЧекиКЗагрузке в фоновом задании:
// - обновляет данные формы о чеках к загрузке, в том числе для использования в подборе
// - готовит сообщение об изменениях для формы документа: текст для баннера, описание следующего действия
//
// Параметры:
//  АдресДанныеФормы   - Строка - адрес во временном хранилище, созданный с помощью НастроитьФорму,
//                                содержащем НовыйДанныеФормыКассовыеЧекиПодотчетныхЛиц
//  АдресОбновленныеДанные - Строка - адрес во временном хранилище, содержащем результат ОбновитьЧекиКЗагрузке
// 
// Возвращаемое значение:
//  Неопределено - новых данных нет
//  Структура - результат обновления
//   * ДанныеОбновлены   - Булево
//   * ТекстБаннера      - Строка
//   * СледующееДействие - Строка, см. СледующееДействие()
//
Функция ЗавершитьОбновлениеЧековКЗагрузке(АдресДанныеФормы, АдресОбновленныеДанные) Экспорт
	
	ОбновленныеДанные = ПолучитьИзВременногоХранилища(АдресОбновленныеДанные);
	Если ОбновленныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Обновим данные подбора
	ДанныеФормы = ПолучитьИзВременногоХранилища(АдресДанныеФормы);
	ЗаполнитьЗначенияСвойств(ДанныеФормы, ОбновленныеДанные);
	ДанныеФормы.КешПодбора = Неопределено;
	УдалитьЗагруженные(ДанныеФормы.КЗагрузке, ДанныеФормы.Загруженные);
	ПоместитьВоВременноеХранилище(ДанныеФормы, АдресДанныеФормы);
	
	// Сообщим форме об изменениях
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("ДанныеОбновлены",   Ложь);
	РезультатОбновления.Вставить("ТекстБаннера",      "");
	РезультатОбновления.Вставить("СледующееДействие", "");
	
	РезультатОбновления.ДанныеОбновлены = Истина;
	
	РезультатОбновления.ТекстБаннера = ТекстБаннера(
		ДанныеФормы.КЗагрузке,
		ДанныеФормы.ОписаниеДокумента.ДополнительныйТекстБаннера);
		
	РезультатОбновления.СледующееДействие = СледующееДействие(ДанныеФормы.КЗагрузке);
	
	Возврат РезультатОбновления;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокумента

// Запускает фоновое задание для получения содержимого чеков подотчетных лиц.
// Далее этими строками будет заполнена табличная часть документа. См. ЗаполнитьДокумент
//
// Параметры:
//  ЗагружаемыеЧеки    - Строка - "ЗагрузитьВсе", чтобы загрузить все чеки к загрузке
//                     - Массив из ДокументСсылка.КассовыйЧекПодотчетногоЛица - загружаемые чеки
//  АдресДанныеФормы   - Строка - адрес во временном хранилище, созданный с помощью НастроитьФорму,
//                                содержащем НовыйДанныеФормыКассовыеЧекиПодотчетныхЛиц
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы
// 
// Возвращаемое значение:
//  Структура - параметры выполнения длительной операции
//  Для обработки завершения длительной операции см. УчетКассовыхЧековПодотчетныхЛицКлиент.ЗавершитьЗаполнениеДокумента
//
Функция НачатьПодготовкуСодержимогоЧеков(Знач ЗагружаемыеЧеки, АдресДанныеФормы, ИдентификаторФормы) Экспорт
	
	ДанныеФормы = ПолучитьИзВременногоХранилища(АдресДанныеФормы);
	
	Если ЗагружаемыеЧеки = "ЗагрузитьВсе" Тогда
		ЗагружаемыеЧеки = ДанныеФормы.КЗагрузке.ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка кассовых чеков подотчетных лиц'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ЗагружаемыеЧеки",   ЗагружаемыеЧеки);
	ПараметрыПроцедуры.Вставить("ОписаниеДокумента", ДанныеФормы.ОписаниеДокумента);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"УчетКассовыхЧековПодотчетныхЛиц.ПодготовитьСодержимоеКассовыхЧековПодотчетныхЛиц",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецФункции

// Готовит данные для заполнения документа содержимым кассовых чеков,
// в том числе, находит номенклатуру и создает контрагентов, если это указано в НовыйОписаниеДокумента
//
// Параметры:
//  Параметры      - Структура
//       * ЗагружаемыеЧеки - Массив из ДокументСсылка.КассовыйЧекПодотчетногоЛица - чеки, содержимое которых нужно получить
//       * ОписаниеДокумента - Структура - см. НовыйОписаниеДокумента
//  АдресХранилища - Строка - адрес во временном хранилище, по которому будет помещен результат.
//     Результат: Структура
//       * ЗагружаемыеЧеки - то же, что параметр ЗагружаемыеЧеки;
//             То есть, это перечень чеков, по которым пользователь принял решение о загрузке
//       * СодержимоеЧеков - ТаблицаЗначений - см. НовыйТаблицаДокумента, универсальные данные для заполнения табличной части
Процедура ПодготовитьСодержимоеКассовыхЧековПодотчетныхЛиц(Параметры, АдресХранилища) Экспорт
	
	ТаблицаДокумента = СодержимоеКассовыхЧековПодотчетныхЛиц(Параметры.ЗагружаемыеЧеки, Параметры.ОписаниеДокумента);
	
	Результат = Новый Структура;
	Результат.Вставить("ЗагружаемыеЧеки", Параметры.ЗагружаемыеЧеки);
	Результат.Вставить("СодержимоеЧеков", ТаблицаДокумента);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область АппаратныйСканер

// Получает данные чека по QR-коду после сканирования аппаратным сканером штрихкода.
//
// Параметры:
//  QRКод	 - Строка - текст QR-кода
// 
// Возвращаемое значение:
//  Структура:
//    * Ссылка - ДокументСсылка.КассовыйЧекПодотчетногоЛица
//    * Сумма  - сумма чека
//
Функция ДанныеЧекаПоQRКоду(QRКод) Экспорт
	
	QRКод = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(QRКод);
	КассовыйЧек = Документы.КассовыйЧекПодотчетногоЛица.ПолучитьПоQRКоду(QRКод);
		
	Если Не ЗначениеЗаполнено(КассовыйЧек) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассовыйЧек, "СуммаДокумента");
	
	Результат = Новый Структура();
	Результат.Вставить("Ссылка",КассовыйЧек);
	Результат.Вставить("Сумма", Сумма);
	
	Возврат Результат;
	
КонецФункции

// Проверяет кассовые чеки, загруженные аппаратным сканером штрихкода.
// По кассовым чекам, которые успешно прошли проверку, готовит данные для заполнения документа.
//
// Параметры:
//  Параметры - Структура
//       * КассовыеЧеки - Массив из ДокументСсылка.КассовыйЧекПодотчетногоЛица - чеки, которые нужно проверить
//       * Ссылка - ДокументСсылка - ссылка на документ, который планируется заполнить содержимым чеков
//       * ОписаниеДокумента - Структура - см. НовыйОписаниеДокумента
//  АдресХранилища - Строка - адрес во временном хранилище, по которому будет помещен результат
//     Результат: Структура
//       * ЗагружаемыеЧеки  - Массив - чеки, успешно прошедшие проверку, по ним будет происходить заполнение документа
//       * НекорректныеЧеки - Массив - чеки, по которым будет выдано сообщение об ошибке
//       * СодержимоеЧеков  - ТаблицаЗначений, Неопределено - см. НовыйТаблицаДокумента
//
Процедура ПроверитьЧекиЗагруженныеПоШтрихкоду(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ЗагружаемыеЧеки",  Новый Массив);
	Результат.Вставить("НекорректныеЧеки", Новый Массив);
	Результат.Вставить("СодержимоеЧеков",  Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КассовыйЧекПодотчетногоЛица.Ссылка КАК КассовыйЧек,
		|	ДокументыПоКассовымЧекамПодотчетныхЛиц.Документ КАК Документ,
		|	ПРЕДСТАВЛЕНИЕ(ДокументыПоКассовымЧекамПодотчетныхЛиц.Документ) КАК ДокументПредставление,
		|	КассовыйЧекПодотчетногоЛица.Статус КАК Статус,
		|	КассовыйЧекПодотчетногоЛица.Номер КАК Номер,
		|	КассовыйЧекПодотчетногоЛица.Дата КАК Дата,
		|	КассовыйЧекПодотчетногоЛица.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.КассовыйЧекПодотчетногоЛица КАК КассовыйЧекПодотчетногоЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоКассовымЧекамПодотчетныхЛиц КАК ДокументыПоКассовымЧекамПодотчетныхЛиц
		|		ПО КассовыйЧекПодотчетногоЛица.Ссылка = ДокументыПоКассовымЧекамПодотчетныхЛиц.КассовыйЧек
		|ГДЕ
		|	КассовыйЧекПодотчетногоЛица.Ссылка В(&СписокЧеков)";
	
	Запрос.УстановитьПараметр("СписокЧеков", Параметры.КассовыеЧеки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Документ <> NULL Тогда
			ПредставлениеСуммы = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Выборка.СуммаДокумента, ВалютаРегламентированногоУчета);
			Если Выборка.Документ = Параметры.Ссылка Тогда
				ШаблонСообщения = НСтр("ru = 'Чек %1 от %2 на сумму %3 уже загружен в документ.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.Номер, Формат(Выборка.Дата, "ДЛФ=D"), ПредставлениеСуммы);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Чек %1 от %2 на сумму %3 уже был включен в другой документ:
				|<a href = ""%4"">%5</a>'");
				ТекстСообщения = СтроковыеФункции.ФорматированнаяСтрока(СтрШаблон(
					ШаблонСообщения,
					Выборка.Номер,
					Формат(Выборка.Дата, "ДЛФ=D"),
					ПредставлениеСуммы,
					ПолучитьНавигационнуюСсылку(Выборка.Документ),
					Выборка.ДокументПредставление));
			КонецЕсли;
			НекорректныйЧек = Новый Структура;
			НекорректныйЧек.Вставить("Ссылка", Выборка.КассовыйЧек);
			НекорректныйЧек.Вставить("ТекстСообщения", ТекстСообщения);
			Результат.НекорректныеЧеки.Добавить(НекорректныйЧек);
			
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыКассовыхЧековПодотчетныхЛиц.Некорректен Тогда
			
			ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Чек %1 от %2 на сумму %3 руб. не прошел проверку в ФНС. Отражение расходов на основании такого чека может нести налоговые риски.
			|Чек недоступен для загрузки.'"), Выборка.Номер, Формат(Выборка.Дата, "ДЛФ=D"), Выборка.СуммаДокумента);
			НекорректныйЧек = Новый Структура;
			НекорректныйЧек.Вставить("Ссылка", Выборка.КассовыйЧек);
			НекорректныйЧек.Вставить("ТекстСообщения", ТекстСообщения);
			Результат.НекорректныеЧеки.Добавить(НекорректныйЧек);
			
		ИначеЕсли Выборка.Статус <> Перечисления.СтатусыКассовыхЧековПодотчетныхЛиц.Ожидает Тогда
			Результат.ЗагружаемыеЧеки.Добавить(Выборка.КассовыйЧек);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Результат.ЗагружаемыеЧеки) Тогда
		Результат.СодержимоеЧеков = СодержимоеКассовыхЧековПодотчетныхЛиц(Результат.ЗагружаемыеЧеки, Параметры.ОписаниеДокумента);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область БизнесСтатистика

// Записывает данные бизнес-статистики в Пульт и Бизнес-статистику 1С-Фреш.
//
// Параметры:
//   ИмяОперации - Строка - имя ключевой операции бизнес-статистики.
//
Процедура ЗаписатьОперациюБизнесСтатистики(ИмяОперации) Экспорт
	
	ИмяКлючевойОперации = СтрШаблон("СтатистикаБП.УчетКассовыхЧековПодотчетныхЛиц.%1",  ИмяОперации);
	
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие(ИмяКлючевойОперации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйДанныеФормыКассовыеЧекиПодотчетныхЛиц(ОписаниеДокумента)
	
	ДанныеФормы = Новый Структура;
	
	ДанныеФормы.Вставить("ОписаниеДокумента", ОписаниеДокумента);
	ДанныеФормы.Вставить("КЗагрузке",         НовыйЧекиКЗагрузке());
	ДанныеФормы.Вставить("ХешКЗагрузке",      -1); //CRC32
	ДанныеФормы.Вставить("Загруженные",       Новый Массив);
	ДанныеФормы.Вставить("КешПодбора",        Неопределено); // см. Документ.КассовыйЧекПодотчетногоЛица.Форма.ПодборКассовыхЧековДляЗагрузки
	
	Возврат ДанныеФормы;
	
КонецФункции

Функция НовыйЧекиКЗагрузке()
	
	ДанныеКассовыхЧеков = Новый ТаблицаЗначений;
	
	ДанныеКассовыхЧеков.Колонки.Добавить("Дата",         ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеКассовыхЧеков.Колонки.Добавить("Сумма",        Метаданные.ОпределяемыеТипы.ДенежнаяСуммаНеотрицательная.Тип);
	ДанныеКассовыхЧеков.Колонки.Добавить("Ссылка",       Новый ОписаниеТипов("ДокументСсылка.КассовыйЧекПодотчетногоЛица"));
	ДанныеКассовыхЧеков.Колонки.Добавить("Поставщик",    Новый ОписаниеТипов("Строка"));
	ДанныеКассовыхЧеков.Колонки.Добавить("Пользователи", Новый ОписаниеТипов("Строка"));
	
	ДанныеКассовыхЧеков.Колонки.Добавить("ОтсканировалТекущийПользователь", Новый ОписаниеТипов("Булево"));
	ДанныеКассовыхЧеков.Колонки.Добавить("ОтсканировалПодотчетноеЛицо",     Новый ОписаниеТипов("Булево"));
	ДанныеКассовыхЧеков.Колонки.Добавить("ОтсканировалИныеПользователи",    Новый ОписаниеТипов("Булево"));
	
	Возврат ДанныеКассовыхЧеков;
	
КонецФункции

Функция ХешКЗагрузке(ЧекиКЗагрузке)
	
	Хеш = Новый ХешированиеДанных(ХешФункция.CRC32);
	
	Для Каждого Запись Из ЧекиКЗагрузке Цикл
		Хеш.Добавить(XMLСтрока(Запись.Ссылка));
	КонецЦикла;
	
	Возврат Хеш.ХешСумма;
	
КонецФункции

Функция СледующееДействие(ЧекиКЗагрузке)
	
	КоличествоЧеков = ЧекиКЗагрузке.Количество();
	
	Если КоличествоЧеков = 0 Тогда
		Если РегистрыСведений.МобильноеПриложениеСканированиеЧеков.ПодключеноМобильноеПриложениеТекущемуПользователю() Тогда
			Возврат "Сканировать";
		Иначе
			Возврат "УстановитьПриложение";
		КонецЕсли;
	ИначеЕсли КоличествоЧеков = 1 Тогда
		Возврат "ЗагрузитьВсе";
	Иначе
		Возврат "Подобрать";
	КонецЕсли;
	
	// Другие строки должны трактоваться как "УстановитьПриложение".
	// При этом пустая строка означает, что мобильное приложение не подключено ни у одного пользователя.
	
КонецФункции

Процедура УдалитьЗагруженные(КЗагрузке, Загруженные)
	
	Отбор = Новый Структура("Ссылка");
	Для Каждого Ссылка Из Загруженные Цикл
		Отбор.Ссылка = Ссылка;
		Для Каждого Запись Из КЗагрузке.НайтиСтроки(Отбор) Цикл
			КЗагрузке.Удалить(Запись);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьБаннерЧекиКЗагрузке(Форма, ДанныеЧеков, ОписаниеФормы)
	
	ТекстБаннера = ТекстБаннера(
		ДанныеЧеков.КЗагрузке,
		ДанныеЧеков.ОписаниеДокумента.ДополнительныйТекстБаннера);
		
	УчетКассовыхЧековПодотчетныхЛицКлиентСервер.ОбновитьБаннерЧекиКЗагрузке(Форма, ОписаниеФормы, ТекстБаннера);
	
КонецПроцедуры

Функция ТекстБаннера(КЗагрузке, ДополнительныйТекстБаннера)
	
	Если Не ЗначениеЗаполнено(КЗагрузке) Тогда
		Возврат "";
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ПредставлениеСуммы = ОбщегоНазначенияБПВызовСервера.ФорматСумм(КЗагрузке.Итог("Сумма"), ВалютаРегламентированногоУчета);
		
	Возврат СтрШаблон(
			НСтр("ru='Отсканированные чеки: %1 шт. на сумму %2 %3'"),
			КЗагрузке.Количество(),
			ПредставлениеСуммы,
			ДополнительныйТекстБаннера);
		
КонецФункции

Функция ОтображениеНаименованияИзЧека(Ссылка)
	
	ОтображатьНаименованиеИзЧека = Ложь;
	
	Если Не Ссылка.Пустая() Тогда
		
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			ИмяДокумента = "АвансовыйОтчет";
			Если Ссылка.ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.Командировка Тогда
				ИмяТЧ = "Прочее";
			Иначе
				ИмяТЧ = "Товары";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РасходыПредпринимателя") Тогда
			ИмяДокумента = "РасходыПредпринимателя";
			ИмяТЧ = "Расходы";
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПутевойЛист") Тогда
			ИмяДокумента = "ПутевойЛист";
			ИмяТЧ = "Топливо";
		Иначе
			Возврат ОтображатьНаименованиеИзЧека;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументТабличнаяЧасть.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.ИмяДокумента.ИмяТЧ КАК ДокументТабличнаяЧасть
		|ГДЕ
		|	ДокументТабличнаяЧасть.Ссылка = &Ссылка
		|	И ДокументТабличнаяЧасть.КассовыйЧек <> ЗНАЧЕНИЕ(Документ.КассовыйЧекПодотчетногоЛица.ПустаяСсылка)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяДокумента", ИмяДокумента);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТЧ", ИмяТЧ);
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ОтображатьНаименованиеИзЧека = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОтображатьНаименованиеИзЧека;

КонецФункции

Функция СодержимоеКассовыхЧековПодотчетныхЛиц(ЗагружаемыеЧеки, ОписаниеДокумента)
	
	ТаблицаДокумента = НовыйТаблицаДокумента();
	
	РезультатЗапроса = РезультатЗапросаЗагрузкиЧеков(ЗагружаемыеЧеки, ОписаниеДокумента.Номенклатура);
	
	ВыборкаЧек = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЧек.Следующий() Цикл
		
		НомерЧека = ВыборкаЧек.НомерЧека;
		ДатаЧека  = ВыборкаЧек.ДатаЧека;
		
		Если ОписаниеДокумента.Поставщик Тогда
			РеквизитыПоставщика = Новый Структура;
			РеквизитыПоставщика.Вставить("ИНН", ВыборкаЧек.ПоставщикИНН);
			РеквизитыПоставщика.Вставить("КПП", "");
			РеквизитыПоставщика.Вставить("Наименование", ВыборкаЧек.ПоставщикНаименование);
			Поставщик = ПоставщикПоРеквизитам(РеквизитыПоставщика);
		КонецЕсли;
		
		Выборка = ВыборкаЧек.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			НоваяСтрока = ТаблицаДокумента.Добавить();
			НоваяСтрока.Содержание = Выборка.НоменклатураНаименование;
			НоваяСтрока.Описание   = Выборка.НоменклатураНаименование;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.НомерВходящегоДокумента = НомерЧека;
			НоваяСтрока.ДатаВходящегоДокумента = ДатаЧека;
			НоваяСтрока.ДокументРасхода = СтрШаблон(НСтр("ru='Кассовый чек %1 от %2'"), НомерЧека, Формат(ДатаЧека, "ДЛФ=D"));
			
			Если ОписаниеДокумента.Поставщик Тогда
				НоваяСтрока.Поставщик = Поставщик;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
				НоваяСтрока.СтавкаНДС  = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			
			НоваяСтрока.Всего = Выборка.Сумма;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаДокумента.ЗаполнитьЗначения(НСтр("ru='Кассовый чек'"),                              "ВидДокВходящий");
	ТаблицаДокумента.ЗаполнитьЗначения(Перечисления.ВидыДокументовПриобретенияГСМ.КассовыйЧек, "ВидВходящегоДокумента");
	ТаблицаДокумента.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.Принимаются,                 "ОтражениеВУСН");
	
	Возврат ТаблицаДокумента;
	
КонецФункции

Функция РезультатЗапросаЗагрузкиЧеков(СписокЧеков, НуженПоискНоменклатуры = Истина)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьДанныеЧеков(Запрос, СписокЧеков);
	
	ДополнитьЗапросПоЧекам(Запрос, НуженПоискНоменклатуры);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПолучитьДанныеЧеков(Запрос, СписокЧеков)
	
	// Левое соединение используется, потому что могут потребоваться данные чеков без номенклатурного состава.
	// Например, чеки со статусом "Отменен".
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеЧека.Ссылка КАК КассовыйЧек,
	|	ДанныеЧека.Номер КАК НомерЧека,
	|	ДанныеЧека.Дата КАК ДатаЧека,
	|	ДанныеЧека.ПоставщикНаименование КАК ПоставщикНаименование,
	|	ДанныеЧека.ПоставщикИНН КАК ПоставщикИНН,
	|	ЕСТЬNULL(ДанныеЧекаТовары.НомерСтроки, 0) КАК НомерСтроки,
	|	ЕСТЬNULL(ДанныеЧекаТовары.НоменклатураНаименование, """") КАК НоменклатураНаименование,
	|	ЕСТЬNULL(ДанныеЧекаТовары.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ДанныеЧекаТовары.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(ДанныеЧекаТовары.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ДанныеЧекаТовары.Сумма, ДанныеЧека.СуммаДокумента) КАК Сумма,
	|	ЕСТЬNULL(ДанныеЧекаТовары.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)) КАК СтавкаНДС,
	|	ЕСТЬNULL(ДанныеЧекаТовары.СуммаНДС, 0) КАК СуммаНДС
	|ПОМЕСТИТЬ ДанныеЧеков
	|ИЗ
	|	Документ.КассовыйЧекПодотчетногоЛица КАК ДанныеЧека
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассовыйЧекПодотчетногоЛица.Товары КАК ДанныеЧекаТовары
	|		ПО ДанныеЧека.Ссылка = ДанныеЧекаТовары.Ссылка
	|ГДЕ
	|	ДанныеЧека.Ссылка В(&СписокЧеков)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураНаименование";
	
	Запрос.УстановитьПараметр("СписокЧеков", СписокЧеков);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДополнитьЗапросПоЧекам(Запрос, НуженПоискНоменклатуры)
	
	Если НуженПоискНоменклатуры Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеЧеков.НоменклатураНаименование КАК Наименование,
		|	ДанныеЧеков.НоменклатураНаименование КАК НаименованиеПолное,
		|	ДанныеЧеков.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	"""" КАК Артикул,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура
		|ИЗ
		|	ДанныеЧеков КАК ДанныеЧеков
		|ГДЕ
		|	ДанныеЧеков.НомерСтроки <> 0";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаСНоменклатурой = РезультатЗапроса.Выгрузить();
		ТаблицаСНоменклатурой.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		Для Сч = 1 По ТаблицаСНоменклатурой.Количество() Цикл
			ТаблицаСНоменклатурой[Сч - 1].НомерСтроки = Сч;
		КонецЦикла;
		ТаблицаСНоменклатурой.Индексы.Добавить("НомерСтроки");
		ПроизвестиПоискНоменклатуры(ТаблицаСНоменклатурой);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСНоменклатурой.Наименование КАК Наименование,
		|	ТаблицаСНоменклатурой.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаСНоменклатурой
		|ИЗ
		|	&ТаблицаСНоменклатурой КАК ТаблицаСНоменклатурой
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЧеков.КассовыйЧек КАК КассовыйЧек,
		|	ДанныеЧеков.НомерЧека КАК НомерЧека,
		|	ДанныеЧеков.ДатаЧека КАК ДатаЧека,
		|	ДанныеЧеков.ПоставщикНаименование КАК ПоставщикНаименование,
		|	ДанныеЧеков.ПоставщикИНН КАК ПоставщикИНН,
		|	ДанныеЧеков.НомерСтроки КАК НомерСтроки,
		|	ДанныеЧеков.НоменклатураНаименование КАК НоменклатураНаименование,
		|	ДанныеЧеков.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДанныеЧеков.Количество КАК Количество,
		|	ДанныеЧеков.Цена КАК Цена,
		|	ДанныеЧеков.Сумма КАК Сумма,
		|	ДанныеЧеков.СтавкаНДС КАК СтавкаНДС,
		|	ДанныеЧеков.СуммаНДС КАК СуммаНДС,
		|	ЕСТЬNULL(ТаблицаСНоменклатурой.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
		|ИЗ
		|	ДанныеЧеков КАК ДанныеЧеков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСНоменклатурой КАК ТаблицаСНоменклатурой
		|		ПО ДанныеЧеков.НоменклатураНаименование = ТаблицаСНоменклатурой.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЧека,
		|	КассовыйЧек,
		|	НомерСтроки
		|ИТОГИ
		|	МИНИМУМ(НомерЧека),
		|	МИНИМУМ(ДатаЧека),
		|	МИНИМУМ(ПоставщикНаименование),
		|	МИНИМУМ(ПоставщикИНН)
		|ПО
		|	КассовыйЧек";
		
		Запрос.УстановитьПараметр("ТаблицаСНоменклатурой", ТаблицаСНоменклатурой);
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеЧеков.КассовыйЧек КАК КассовыйЧек,
		|	ДанныеЧеков.НомерЧека КАК НомерЧека,
		|	ДанныеЧеков.ДатаЧека КАК ДатаЧека,
		|	ДанныеЧеков.ПоставщикНаименование КАК ПоставщикНаименование,
		|	ДанныеЧеков.ПоставщикИНН КАК ПоставщикИНН,
		|	ДанныеЧеков.НоменклатураНаименование КАК НоменклатураНаименование,
		|	ДанныеЧеков.Количество КАК Количество,
		|	ДанныеЧеков.Цена КАК Цена,
		|	ДанныеЧеков.Сумма КАК Сумма,
		|	ДанныеЧеков.СтавкаНДС КАК СтавкаНДС,
		|	ДанныеЧеков.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	ДанныеЧеков КАК ДанныеЧеков
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЧека,
		|	КассовыйЧек,
		|	ДанныеЧеков.НомерСтроки
		|ИТОГИ
		|	МИНИМУМ(НомерЧека),
		|	МИНИМУМ(ДатаЧека),
		|	МИНИМУМ(ПоставщикНаименование),
		|	МИНИМУМ(ПоставщикИНН)
		|ПО
		|	КассовыйЧек";
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПоставщикПоРеквизитам(РеквизитыПоставщика)
	
	Если Не ЗначениеЗаполнено(РеквизитыПоставщика.ИНН) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Контрагент = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Контрагенты", РеквизитыПоставщика.ИНН);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Контрагент;
	КонецЕсли;
	
	Отказ = Ложь;
	ОбменСКонтрагентамиБП.СоздатьКонтрагентаПоРеквизитам(РеквизитыПоставщика, Контрагент, Отказ);
	Если Отказ ИЛИ Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Функция НовыйТаблицаДокумента()
	
	ТаблицаДокумента = Новый ТаблицаЗначений;
	ТаблицаДокумента.Колонки.Добавить("НомерСтроки");
	ТаблицаДокумента.Колонки.Добавить("КассовыйЧек");
	ТаблицаДокумента.Колонки.Добавить("ВидДокВходящий");
	ТаблицаДокумента.Колонки.Добавить("НомерВходящегоДокумента");
	ТаблицаДокумента.Колонки.Добавить("ДатаВходящегоДокумента");
	ТаблицаДокумента.Колонки.Добавить("ВидВходящегоДокумента"); // Путевой лист
	ТаблицаДокумента.Колонки.Добавить("ДокументРасхода"); // Расходы предпринимателя
	ТаблицаДокумента.Колонки.Добавить("Поставщик");
	ТаблицаДокумента.Колонки.Добавить("Номенклатура");
	ТаблицаДокумента.Колонки.Добавить("Описание");
	ТаблицаДокумента.Колонки.Добавить("Содержание"); // ТЧ Прочее авансового отчета
	ТаблицаДокумента.Колонки.Добавить("Количество");
	ТаблицаДокумента.Колонки.Добавить("Цена");
	ТаблицаДокумента.Колонки.Добавить("Сумма");
	ТаблицаДокумента.Колонки.Добавить("Всего"); // ТЧ Товары авансового отчета, Расходы предпринимателя
	ТаблицаДокумента.Колонки.Добавить("СтавкаНДС");
	ТаблицаДокумента.Колонки.Добавить("СуммаНДС");
	ТаблицаДокумента.Колонки.Добавить("ОтражениеВУСН"); // Авансовый отчет
	
	Возврат ТаблицаДокумента;
	
КонецФункции

Процедура ПроизвестиПоискНоменклатуры(Таблица)
	
	Запрос = Обработки.ЗагрузкаНоменклатурыИзФайла.ЗапросПоискаНоменклатуры(Таблица);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНомерСтроки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		
		ВыборкаВесСтроки = ВыборкаНомерСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаВесСтроки.Следующий();
		ВыборкаНоменклатура = ВыборкаВесСтроки.Выбрать();
		
		Если ВыборкаНоменклатура.Следующий() Тогда
			МассивСтрок = Таблица.НайтиСтроки(Новый Структура("НомерСтроки", ВыборкаНомерСтроки.НомерСтроки));
			Если ЗначениеЗаполнено(МассивСтрок) Тогда
				МассивСтрок[0].Номенклатура = ВыборкаНоменклатура.Номенклатура;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет (дополняет) табличную часть документа содержимым кассовых чеков,
// полученным с помощью ПодготовитьСодержимоеКассовыхЧековПодотчетныхЛиц.
//
// Обновляет 
// - данные формы, содержащие перечень чеков для подбора
// - другие свойства формы, используемые для работы с чеками (текст баннера и т.п.)
//
// Параметры:
//  Форма                - УправляемаяФорма - настраиваемая форма документа, в которую можно загружать чеки подотчетных лиц,
//                                     должна соответствовать описанию
//  ИмяСписка            - Строка - имя списка, который нужно заполнить содержимым чеков
//  АдресСодержимоеЧеков - Строка - адрес с результатом ПодготовитьСодержимоеКассовыхЧековПодотчетныхЛиц
//  СуммаВключаетНДС     - Булево - признак из документа, выполняется пересчет цены и суммы, если Ложь (НДС сверху)
//  ОписаниеФормы        - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиентСервер.НовыйОписаниеФормы
// 
// Возвращаемое значение:
//  Массив из ТабличнаяЧастьСтрока - добавленные строки
//
Функция ЗаполнитьДокумент(Форма, ИмяСписка, АдресСодержимоеЧеков, СуммаВключаетНДС, ОписаниеФормы)
	
	ДобавленныеСтроки = Новый Массив;
	
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресСодержимоеЧеков);
	Если ТипЗнч(ЗагружаемыеДанные) <> Тип("Структура") Тогда
		Возврат ДобавленныеСтроки;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицаДокумента Из ЗагружаемыеДанные.СодержимоеЧеков Цикл
		
		НоваяСтрока = Форма.Объект[ИмяСписка].Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицаДокумента);
		Если Не СуммаВключаетНДС Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС;
			Если НоваяСтрока.Свойство("Цена") Тогда
				Если НоваяСтрока.Количество = 0 Тогда
					НоваяСтрока.Цена = НоваяСтрока.Сумма;
				Иначе
					НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДобавленныеСтроки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	// Отметим, что чеки загружены, чтобы удалить их из баннера и формы подбора
	АдресКассовыеЧеки = Форма[ОписаниеФормы.РеквизитДанныеФормы];
	ДанныеФормы = ПолучитьИзВременногоХранилища(АдресКассовыеЧеки);
	УдалитьЗагруженные(ДанныеФормы.КЗагрузке, ЗагружаемыеДанные.ЗагружаемыеЧеки);
	Для Каждого Ссылка Из ЗагружаемыеДанные.ЗагружаемыеЧеки Цикл
		ДанныеФормы.Загруженные.Добавить(Ссылка);
	КонецЦикла;
	ПоместитьВоВременноеХранилище(ДанныеФормы, АдресКассовыеЧеки);
	
	// Обновим состояние документа
	УстановитьБаннерЧекиКЗагрузке(Форма, ДанныеФормы, ОписаниеФормы);
	Форма[ОписаниеФормы.РеквизитСледующееДействие] = СледующееДействие(ДанныеФормы.КЗагрузке);
	Форма[ОписаниеФормы.РеквизитЕстьЗагруженныеЧеки] = Истина;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

#КонецОбласти
