///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ИнтеграцияСКоннект".
// ОбщийМодуль.ИнтеграцияСКоннектКлиент.
//
// Клиентские процедуры интеграции с сервисом 1С-Коннект:
//  - запуск приложения 1С-Коннект;
//  - обработка событий БСП;
//  - настройки интеграции с 1С-Коннект.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму настройки интеграции с сервисом 1С-Коннект.
//
// Параметры:
//  Владелец - ФормаКлиентскогоПриложения, Неопределено - форма, которая будет установлена в качестве владельца.
//  ОписаниеОповещения - ОписаниеОповещения - оповещение, которое необходимо выполнить после завершения
//                      настройки интеграции.
//
Процедура НастройкаИнтеграции(
		Владелец = Неопределено,
		ОписаниеОповещения = Неопределено) Экспорт
	
	ОткрытьФорму(
		"ОбщаяФорма.НастройкаПодключенияКоннект",
		,
		Владелец,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

// Запускает приложение 1С-Коннект. Если приложение не установлено
// на клиентский персональный компьютер, открывается форма настройки
// подключения.
//
Процедура СвязатьсяСоСпециалистом() Экспорт
	
	Если Не ДоступнаИнтеграцияСКоннект() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СвязатьсяСоСпециалистомПослеУстановкиРасширения",
		ЭтотОбъект);
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(
		ОписаниеОповещения,
		НСтр("ru = 'Для запуска приложения необходимо установить расширение для работы с 1С:Предприятием.'"),
		Ложь);
	
КонецПроцедуры

// Определяет имя события, которое будет содержать оповещение
// о завершении настройки интеграции для пользователя.
//
// Возвращаемое значение:
//  Строка - Имя события. Может быть использовано для идентификации
//           сообщений принимающими их формами.
//
Функция ИмяСобытияОбновленияНастроек() Экспорт
	
	Возврат "ИзменениеНастроекИнтеграцииСКоннект";
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область БСПНастройкиПрограммы

// Обработчик элемента БИПИнтеграцияСКоннектПриИзменении
// на форме панели администрирования "Интернет-поддержка и сервисы"
// Библиотеки стандартных подсистем.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма панели администрирования;
//  Элемент - ЭлементФормы - поле ввода информации.
//
Процедура ИнтернетПоддержкаИСервисы_БИПИнтеграцияСКоннектПриИзменении(Форма, Элемент) Экспорт
	
	ИнтеграцияСКоннектВызовСервера.УстановитьИспользованиеИнтеграции(
		Форма.БИПИнтеграцияСКоннект);
	
	Форма.Элементы.БИПНастройкаИнтеграцииСКоннект.Доступность = Форма.БИПИнтеграцияСКоннект;
	ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

// Обработчик команды БИПНастройкаИнтеграцииСКоннект(
// на форме панели администрирования "Интернет-поддержка и сервисы"
// Библиотеки стандартных подсистем.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма панели администрирования;
//  Команда - КомандаФормы - команда на панели администрирования.
//
Процедура ИнтернетПоддержкаИСервисы_БИПНастройкаИнтеграцииСКоннект(ЭтотОбъект, Команда) Экспорт
	
	НастройкаИнтеграции(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВызовПриложенияКоннект

// Запускает приложение 1С-Коннект. Если приложение не установлено
// на клиентский персональный компьютер, открывается форма настройки
// подключения.
//
// Параметры:
//  РасширениеПодключено - Булево - Истина, если расширение работы с файлами установлено успешно;
//  ДополнительныеПараметры - Структура - параметры запуска приложения.
//
Процедура СвязатьсяСоСпециалистомПослеУстановкиРасширения(
		РасширениеПодключено,
		ДополнительныеПараметры) Экспорт
	
	Если НЕ РасширениеПодключено Тогда
		Возврат;
	КонецЕсли;
	
	// Определение параметров запуска.
	РасположениеИзРеестра   = РасположениеИзРеестраWindows();
	РасположениеИзХранилища = ИнтеграцияСКоннектВызовСервера.НастройкиИнтеграции().РасположениеФайла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РасположениеИзРеестра",     РасположениеИзРеестра);
	ДополнительныеПараметры.Вставить("РасположениеИзХранилища",   РасположениеИзХранилища);
	ДополнительныеПараметры.Вставить("ФайлИзРеестраСуществует",   Ложь);
	ДополнительныеПараметры.Вставить("ФайлИзХранилищаСуществует", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СвязатьсяСоСпециалистомЗапускПриложения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПроверитьСуществованиеПриложенияИзРеестра(
		ОписаниеОповещения,
		РасположениеИзРеестра);
	
КонецПроцедуры

// Производит проверку существования файла приложения на основании данных реестра Windows.
//
// Параметры:
//  ОповещениеЗавершениеПроверки - ОписаниеОповещение - оповещение которое необходимо вызвать
//                                 после завершения проверки путей к файлам приложений.
//  РасположениеИзРеестра - Строка - путь к приложению на основании данных реестра.
//
Процедура ПроверитьСуществованиеПриложенияИзРеестра(ОповещениеЗавершениеПроверки, РасположениеИзРеестра)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеПроверкиСуществованиеПриложенияИзРеестра",
		ЭтотОбъект,
		ОповещениеЗавершениеПроверки);
	
	ПроверяемыйФайл = Новый Файл(РасположениеИзРеестра);
	Если НРег(ПроверяемыйФайл.Расширение) <> ".exe" Тогда
		ПослеПроверкиСуществованиеПриложенияИзРеестра(Ложь, ОповещениеЗавершениеПроверки);
	Иначе
		ПроверяемыйФайл.НачатьПроверкуСуществования(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Производит проверку существования файла приложения на основании данных настроек.
//
// Параметры:
//  Существует - Булево - признак существования файла по пути реестра Windows.
//  ОповещениеЗавершениеПроверки - ОписаниеОповещение - оповещение которое необходимо вызвать
//                                 после завершения проверки путей к файлам приложений.
//
Процедура ПослеПроверкиСуществованиеПриложенияИзРеестра(
		Существует,
		ОповещениеЗавершениеПроверки) Экспорт
	
	ОповещениеЗавершениеПроверки.ДополнительныеПараметры.ФайлИзРеестраСуществует = Существует;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеПроверкиСуществованиеПриложенияИзХранилища",
		ЭтотОбъект,
		ОповещениеЗавершениеПроверки);
	
	ПроверяемыйФайл = Новый Файл(
		ОповещениеЗавершениеПроверки.ДополнительныеПараметры.РасположениеИзХранилища);
	
	Если НРег(ПроверяемыйФайл.Расширение) <> ".exe" Тогда
		ПослеПроверкиСуществованиеПриложенияИзХранилища(Ложь, ОповещениеЗавершениеПроверки);
	Иначе
		ПроверяемыйФайл.НачатьПроверкуСуществования(ОписаниеОповещения);
	КонецЕсли;

	
КонецПроцедуры

// Анализирует результат проверки существования файла приложения на основании данных настроек.
//
// Параметры:
//  Существует - Булево - признак существования файла по пути из настроек.
//  ОповещениеЗавершениеПроверки - ОписаниеОповещение - оповещение которое необходимо вызвать
//                                 после завершения проверки путей к файлам приложений.
//
Процедура ПослеПроверкиСуществованиеПриложенияИзХранилища(
		Существует,
		ОповещениеЗавершениеПроверки) Экспорт
	
	ОповещениеЗавершениеПроверки.ДополнительныеПараметры.ФайлИзХранилищаСуществует = Существует;
	ВыполнитьОбработкуОповещения(ОповещениеЗавершениеПроверки);
	
КонецПроцедуры

// Запускает приложение 1С-Коннект. Если приложение не установлено
// на клиентский персональный компьютер, открывается форма настройки
// подключения.
//
// Параметры:
//  Результат - Произвольный - результат проверки файлов приложения;
//  ДополнительныеПараметры - Структура - результат проверки файлов приложения.
//
Процедура СвязатьсяСоСпециалистомЗапускПриложения(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить("/StartedFrom1CConf");
	
	ПараметрыЗапускаПрограммы = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Ложь;
	
	Если ДополнительныеПараметры.ФайлИзХранилищаСуществует Тогда
		
		КомандаЗапуска = Новый Массив;
		КомандаЗапуска.Добавить(ДополнительныеПараметры.РасположениеИзХранилища);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			КомандаЗапуска,
			ПараметрыЗапуска);
		
		ФайловаяСистемаКлиент.ЗапуститьПрограмму(
			КомандаЗапуска,
			ПараметрыЗапускаПрограммы);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Запущено приложение 1С-Коннект'"),
			,
			НСтр("ru = 'Команда на запуск приложения отправлена,
				|дождитесь открытия стартовой страницы.'"),
			БиблиотекаКартинок.Информация32,
			СтатусОповещенияПользователя.Информация);
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ФайлИзРеестраСуществует Тогда
		
		КомандаЗапуска = Новый Массив;
		КомандаЗапуска.Добавить(ДополнительныеПараметры.РасположениеИзРеестра);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			КомандаЗапуска,
			ПараметрыЗапуска);
		
		ФайловаяСистемаКлиент.ЗапуститьПрограмму(
			КомандаЗапуска,
			ПараметрыЗапускаПрограммы);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Запущено приложение 1С-Коннект'"),
			,
			НСтр("ru = 'Команда на запуск приложения отправлена,
				|дождитесь открытия стартовой страницы.'"),
			БиблиотекаКартинок.Информация32,
			СтатусОповещенияПользователя.Информация);
		
		Возврат;
		
	КонецЕсли;
	
	НастройкаИнтеграции();
	
КонецПроцедуры

// Определяет расположение приложения на основании данных реестра Windows.
//
// Возвращаемое значение:
//  Строка - расположение приложения вычисленное из реестра Windows.
//
Функция РасположениеИзРеестраWindows()
	
#Если ВебКлиент Тогда
	Возврат "";
#Иначе
	Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		Возврат "";
	КонецЕсли;
	
	Значение = "";
	
	КомпонентаОбъект = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv");
	КомпонентаОбъект.GetStringValue("2147483649","Software\Buhphone","ProgramPath", Значение);
	
	Если Значение = "" Или  Значение = NULL Тогда
		ЗначениеИзРеестра = "";
	Иначе
		ЗначениеИзРеестра = Значение;
	КонецЕсли;
	
	Возврат ЗначениеИзРеестра;
	
#КонецЕсли
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Определяет доступность интеграции с 1С-Коннект.
// Если интеграция не доступна, показывает предупреждение.
//
// Возвращаемое значение:
//  Булево - если Истина, интеграция с 1С-Коннект доступна.
//
Функция ДоступнаИнтеграцияСКоннект()
	
	Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Для работы с приложением необходима операционная система Microsoft Windows.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
