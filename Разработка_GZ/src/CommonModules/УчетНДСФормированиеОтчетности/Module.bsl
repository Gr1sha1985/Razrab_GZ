////////////////////////////////////////////////////////////////////////////////
// Содержит процедуры для заполнения форм отчетности по НДС:
// - налоговой декларации по НДС с 1 квартала 2015 года
// - выгрузки в электронном виде книг и журнала
// - реестров для подтверждения ставки 0% (Приложение 1 и 5)
// - декларации по косвенным налогам при ввозе из ЕАЭС
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ДекларацияНДС

// Заполняет контейнер с показателями декларации по НДС.
// Для версии отчета ФормаОтчета2020Кв4.
Процедура ЗаполнитьОтчетНДСФормаОтчета2020Кв4(ПараметрыОтчета, Контейнер) Экспорт
	
	ПараметрыОтчета.Вставить("ПравилаЗаполнения", "2020Кв4");
	ЗаполнитьДекларациюНДС(ПараметрыОтчета, Контейнер);
	
КонецПроцедуры

// Заполняет контейнер с показателями декларации по НДС.
// Для версии отчета ФормаОтчета2019Кв1.
Процедура ЗаполнитьОтчетНДСФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ПараметрыОтчета.Вставить("ПравилаЗаполнения", "2019Кв1");
	ЗаполнитьДекларациюНДС(ПараметрыОтчета, Контейнер);
	
КонецПроцедуры

// Заполняет контейнер с показателями декларации по НДС.
// Для версии отчета ФормаОтчета2017Кв1.
Процедура ЗаполнитьОтчетНДСФормаОтчета2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ПараметрыОтчета.Вставить("ПравилаЗаполнения", "2017Кв1");
	ЗаполнитьДекларациюНДС(ПараметрыОтчета, Контейнер);
	
КонецПроцедуры

// Заполняет контейнер с показателями декларации по НДС.
// Для версии отчета ФормаОтчета2015Кв1.
Процедура ЗаполнитьОтчетНДСФормаОтчета2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ПараметрыОтчета.Вставить("ПравилаЗаполнения", "2015Кв1");
	ЗаполнитьДекларациюНДС(ПараметрыОтчета, Контейнер);
	
КонецПроцедуры

// Создает список показателей декларации по НДС, которые будут автоматически заполняться.
// Для версии отчета ФормаОтчета2020Кв4.
Процедура ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2020Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100003003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200009003", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300004003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300004103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300004203", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007005", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300008005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300009005", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300014003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300015003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300016003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300017003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300018003", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310005001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310006001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007002", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007004", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0004М1001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0004М1002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0004М1003003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0006М1001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0006М1002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0006М1003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0006М1004003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000700000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000700000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000700000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000700000104", Истина, Ложь);
	
КонецПроцедуры

// Создает список показателей декларации по НДС, которые будут автоматически заполняться.
// Для версии отчета ФормаОтчета2019Кв1.
Процедура ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2019Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100003003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200009003", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300004003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300004103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300004203", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007005", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300008005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300009005", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300014003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300015003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300016003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300017003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300018003", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310005001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310006001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007002", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007004", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0004М1001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0004М1002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0004М1003003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0006М1001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0006М1002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0006М1003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0006М1004003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000700000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000700000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000700000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000700000104", Истина, Ложь);
	
КонецПроцедуры

// Создает список показателей декларации по НДС, которые будут автоматически заполняться.
// Для версии отчета ФормаОтчета2017Кв1.
Процедура ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2017Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100003003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200009003", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007005", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300008005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300009005", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300014003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300015003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300016003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300017003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300018003", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310005001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310006001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007002", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007004", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0004М1001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0004М1002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0004М1003003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0006М1001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0006М1002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0006М1003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0006М1004003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000700000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000700000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000700000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000700000104", Истина, Ложь);
	
КонецПроцедуры

// Создает список показателей декларации по НДС, которые будут автоматически заполняться.
// Для версии отчета ФормаОтчета2015Кв1.
Процедура ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2015Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100003003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200009003", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007005", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300008005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300009005", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300014003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300015003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300016003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300017003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300018003", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002002", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002007", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002008", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002009", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310005001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310006001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008002", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008004", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400003003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000600001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000600002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000600003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000600004003", Истина, Истина);
	
КонецПроцедуры

Функция ПоказателиДекларацииНДС(Организация, ГруппаОрганизаций, НачалоПериода, КонецПериода, ВесьОборотЗаПериод = Истина) Экспорт
	
	СуммовыеПоказатели = Новый Структура();
	СуммовыеПоказатели.Вставить("ВычетПоЭкспорту");
	СуммовыеПоказатели.Вставить("НачислениеПоЭкспорту");
	СуммовыеПоказатели.Вставить("КУплате");
	СуммовыеПоказатели.Вставить("КВозмещению");
	СуммовыеПоказатели.Вставить("Начисления", 0);
	СуммовыеПоказатели.Вставить("Вычеты", 0);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",              Организация);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций",        ГруппаОрганизаций);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", НачалоПериода);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  КонецПериода);
	ПараметрыОтчета.Вставить("ВесьОборотЗаПериод",       ВесьОборотЗаПериод);
	ПараметрыОтчета.Вставить("ДатаПодписи",              КонецПериода);
	ПараметрыОтчета.Вставить("ВидДокумента");
	
	Контейнер = Новый Структура();
	
	Если КонецПериода < '20190101' Тогда
		
		Контейнер.Вставить("Раздел3", НовыеПоказателиРаздела3Декларации2009Кв4());
		Контейнер.Вставить("Раздел4", НовыеПоказателиРаздела4Декларации2009Кв4());
		Контейнер.Вставить("Раздел6", НовыеПоказателиРаздела6Декларации2009Кв4());
		
		УчетНДС.ЗаполнитьОтчетНДСФормаОтчета2009Кв4(ПараметрыОтчета, Контейнер, Ложь);
		
		СтруктураПоказателейРаздела3 = Контейнер.Раздел3;
		СтруктураПоказателейРаздела4 = Контейнер.Раздел4;
		СтруктураПоказателейРаздела6 = Контейнер.Раздел6;
		
		УчетНДС.РассчитатьПоказателиРаздела3Декларации(СтруктураПоказателейРаздела3);
		
		СуммовыеПоказатели.ВычетПоЭкспорту = Окр(СтруктураПоказателейРаздела4.П000400000103_1)
			+ Окр(СтруктураПоказателейРаздела6.П000600000104_1);
		СуммовыеПоказатели.НачислениеПоЭкспорту = Окр(СтруктураПоказателейРаздела6.П000600000103_1);
		СуммовыеПоказатели.КУплате              = СтруктураПоказателейРаздела3.П000300023003;
		СуммовыеПоказатели.КВозмещению          = СтруктураПоказателейРаздела3.П000300024003;
		СуммовыеПоказатели.Начисления           = Окр(СтруктураПоказателейРаздела3.П000300012005) 
			+ Окр(СтруктураПоказателейРаздела6.П000600000103_1);
		СуммовыеПоказатели.Вычеты               = Окр(СтруктураПоказателейРаздела3.П000300022003) 
			+ Окр(СтруктураПоказателейРаздела4.П000400000103_1)
			+ Окр(СтруктураПоказателейРаздела6.П000600000104_1);
		
	Иначе
		
		Контейнер.Вставить("Раздел3", СтруктураПоказателейРаздела3Декларации2019Кв1());
		Контейнер.Вставить("Раздел4", СтруктураПоказателейРаздела4Декларации2019Кв1());
		Контейнер.Вставить("Раздел6", СтруктураПоказателейРаздела6Декларации2019Кв1());
		
		ДополнитьКонтейнерМногострочнымиДанными(Контейнер);
		Если КонецПериода < '20201001' Тогда
			ПараметрыОтчета.Вставить("ПравилаЗаполнения", "2019Кв1");
		Иначе
			ПараметрыОтчета.Вставить("ПравилаЗаполнения", "2020Кв4");
		КонецЕсли;
		ПараметрыОтчета.Вставить("ТолькоПоказателиДекларацииНДС", Истина);
		ЗаполнитьДекларациюНДС(ПараметрыОтчета,       Контейнер);
		
		СтруктураПоказателейРаздела3 = Контейнер.Раздел3;
		РассчитатьПоказателиРаздела3Декларации2019Кв1(СтруктураПоказателейРаздела3);
		
		ВычетРаздел3      = СтруктураПоказателейРаздела3.П000300019003;
		ВычетРаздел4      = Контейнер.Раздел4_ДанныеДопСтрок010_050.Итог("П0004М1003003");
		ВычетРаздел6      = Контейнер.Раздел6_ДанныеДопСтрок010_040.Итог("П0006М1004003");
		НачислениеРаздел3 = СтруктураПоказателейРаздела3.П000300011805;
		НачислениеРаздел6 = Контейнер.Раздел6_ДанныеДопСтрок010_040.Итог("П0006М1003003");
		
		СуммовыеПоказатели.ВычетПоЭкспорту      = Окр(ВычетРаздел4) + Окр(ВычетРаздел6);
		СуммовыеПоказатели.НачислениеПоЭкспорту = Окр(НачислениеРаздел6);
		СуммовыеПоказатели.КУплате              = СтруктураПоказателейРаздела3.П000300020003;
		СуммовыеПоказатели.КВозмещению          = СтруктураПоказателейРаздела3.П000300021003;
		СуммовыеПоказатели.Начисления           = Окр(НачислениеРаздел3) + Окр(НачислениеРаздел6);
		СуммовыеПоказатели.Вычеты               = Окр(ВычетРаздел3) + Окр(ВычетРаздел4) + Окр(ВычетРаздел6);
		
	КонецЕсли;
	
	Возврат СуммовыеПоказатели;
	
КонецФункции

#КонецОбласти

#Область ЭлектронноеПредставлениеКнигЖурнала

#Область ЭлектронноеПредставлениеКнигиПокупок

Функция ЭлектронноеПредставлениеКнигиПокупок_501(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115102");
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.01");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
	
	ВыгрузитьСведенияОбОрганизации_501(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвКнПок");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
	
	ВывестиУзелКнигиПокупок501_Всего(КомпоновщикXML, ВыгружаемыйДокумент);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Для Каждого СтрокаСведений Из ВыгружаемыйДокумент.ТабличнаяЧасть Цикл
		ВывестиУзелКнигиПокупок501_СвПокупка(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Массив;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	
	РезультатВыгрузки.Добавить(СтруктураВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеКнигиПокупок_502(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115102");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента = Неопределено
		ИЛИ СведенияДокумента.Записи.Количество() = 0 Тогда 
		ТекстИсключения = НСтр("ru = 'Книга покупок не может быть выгружена или отправлена в ФНС по причине:
			|формат выгрузки не предусматривает выгрузку пустой книги покупок.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.02");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайлИсх", ПараметрыВыгрузки.ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайлПерв", ПараметрыВыгрузки.ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КолФайл", 1, "Ч,5");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомФайл", 1, "Ч,5");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	Иначе
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвКнПок");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Всего");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСВыч", СведенияДокумента.ОбщиеСведения.СумНДСВыч, "Ч,19,2");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Для Каждого СтрокаСведений Из СведенияДокумента.Записи Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокупка");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
		
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
		
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
		
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.НаимПрод, "Т,1000");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
		
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего, "Ч,19,2");
		
		Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, КодВидаОперации);
		КонецЦикла;
		
		Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокУплНал Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвДокУплНал");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерДокУплНал", ДокументПодтверждения.НомерДокУплНал, "Т,256");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокУплНал", ДокументПодтверждения.ДатаДокУплНал, "Т,10");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЦикла;
		
		Для Каждого ДатаПринятияНаУчет Из СтрокаСведений.ДатаПринУчет Цикл
			ДатаПринятияНаУчет = Лев(СокрЛП(ДатаПринятияНаУчет), 10);
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДатаПринУчет");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ДатаПринятияНаУчет);
		КонецЦикла;
		
		Если СтрокаСведений.СвПосредн <> Неопределено Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосредн");
			
			Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛ") Тогда
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", СтрокаСведений.СвПосредн.НаимОрг, "Т,1000");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.СвПосредн.ИННЮЛ, "Т,10");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.СвПосредн.КПП, "Т,9");
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			Иначе
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.СвПосредн.ИННФЛ, "Т,12");
				
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
				КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		Для Каждого НомерТД Из СтрокаСведений.НомерТД Цикл
			НомерТД = Лев(СокрЛП(НомерТД), 29);
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "НомерТД");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, НомерТД);
		КонецЦикла;
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДСВыч");
		
		Если ТипЗнч(СтрокаСведений.СумНДСВыч) = Тип("Число") Тогда
			СумНДСВыч = Формат(СтрокаСведений.СумНДСВыч,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СумНДСВыч);
		Иначе
			СумНДСВыч = Лев(СокрЛП(СтрокаСведений.СумНДСВыч), 7);
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СумНДСВыч);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Подписант");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПрПодп", ПараметрыВыгрузки.ПрПодп);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИО");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ПодпФамилия, "Т,60");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ПодпИмя, "Т,60");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ПодпОтчество, "Т,60");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Если ПараметрыВыгрузки.Свойство("НаимДокПодп") И ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПодп) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПред");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимДок", ПараметрыВыгрузки.НаимДокПодп, "Т,120");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Массив;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	
	РезультатВыгрузки.Добавить(СтруктураВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеКнигиПокупок_503(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115102");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента = Неопределено
		ИЛИ СведенияДокумента.Записи.Количество() = 0 Тогда 
		ТекстИсключения = НСтр("ru = 'Книга покупок не может быть выгружена или отправлена в ФНС по причине:
			|формат выгрузки не предусматривает выгрузку пустой книги покупок.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	КомпоновщикXML = НовыйКомпоновщикXML(ИмяВременногоФайла);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Файл");
	
	ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл, "Т,255");
	ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.03");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
	ВывестиАтрибут(КомпоновщикXML, "ИдФайлИсх", ПараметрыВыгрузки.ИдФайл);
	ВывестиАтрибут(КомпоновщикXML, "ИдФайлПерв", ПараметрыВыгрузки.ИдФайл);
	ВывестиАтрибут(КомпоновщикXML, "КолФайл", 1, "Ч,5");
	ВывестиАтрибут(КомпоновщикXML, "НомФайл", 1, "Ч,5");
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	ВывестиУзел503_СвПокуп(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвКнПок");
	
	ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
	ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Всего");
	
	ВывестиАтрибут(КомпоновщикXML, "СумНДСВыч", СведенияДокумента.ОбщиеСведения.СумНДСВыч, "Ч,19,2");
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Всего
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвКнПок
	
	Для Каждого СтрокаСведений Из СведенияДокумента.Записи Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПокупка");
		
		ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
		ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.НаимПрод, "Т,1000");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
		
		ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего, "Ч,19,2");
		
		Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
			КомпоновщикXML.ЗаписатьНачалоЭлемента("КодВидОпер");
			КомпоновщикXML.ЗаписатьТекст(КодВидаОперации);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // КодВидОпер
		КонецЦикла;
		
		Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокУплНал Цикл
			КомпоновщикXML.ЗаписатьНачалоЭлемента("СвДокУплНал");
			
			ВывестиАтрибут(КомпоновщикXML, "НомерДокУплНал", ДокументПодтверждения.НомерДокУплНал, "Т,256");
			ВывестиАтрибут(КомпоновщикXML, "ДатаДокУплНал", ДокументПодтверждения.ДатаДокУплНал, "Т,10");
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвДокУплНал
			
		КонецЦикла;
		
		Для Каждого ДатаПринятияНаУчет Из СтрокаСведений.ДатаПринУчет Цикл
			ДатаПринятияНаУчет = Лев(СокрЛП(ДатаПринятияНаУчет), 10);
			
			КомпоновщикXML.ЗаписатьНачалоЭлемента("ДатаПринУчет");
			КомпоновщикXML.ЗаписатьТекст(ДатаПринятияНаУчет);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // ДатаПринУчет
			
		КонецЦикла;
		
		Если СтрокаСведений.СвПосредн <> Неопределено Тогда
			ВывестиУзел503_504_СвПосредн(КомпоновщикXML, СтрокаСведений.СвПосредн);
		КонецЕсли;
		
		Для Каждого НомерТД Из СтрокаСведений.НомерТД Цикл
			НомерТД = Лев(СокрЛП(НомерТД), 29);
			
			КомпоновщикXML.ЗаписатьНачалоЭлемента("НомерТД");
			КомпоновщикXML.ЗаписатьТекст(НомерТД);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // НомерТД
			
		КонецЦикла;
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДСВыч");
		
		Если ТипЗнч(СтрокаСведений.СумНДСВыч) = Тип("Число") Тогда
			СумНДСВыч = Формат(СтрокаСведений.СумНДСВыч,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			
			КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
			КомпоновщикXML.ЗаписатьТекст(СумНДСВыч);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
			
		Иначе
			СумНДСВыч = Лев(СокрЛП(СтрокаСведений.СумНДСВыч), 7);
			
			КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
			КомпоновщикXML.ЗаписатьТекст(СумНДСВыч);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
			
		КонецЕсли;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДСВыч
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПокупка
		
	КонецЦикла;
	
	ВывестиУзел503_504_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Документ
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Файл
	
	РезультатВыгрузки = Новый Массив;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаХранилищеКомпоновщикаXML(КомпоновщикXML, ИмяВременногоФайла));
	СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	
	РезультатВыгрузки.Добавить(СтруктураВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеДопЛистовКнигиПокупок_502(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115105");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента <> Неопределено Тогда
		
		КомпоновщикXML = КомпоновщикXML_Новый();
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.02");
		
		Для Каждого ЛистКниги Из СведенияДокумента Цикл
			ВывестиДокументДопЛистаКнигиПокупок_502(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги);
		КонецЦикла;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		РезультатВыгрузки = Новый Массив;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
		
		РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеДопЛистовКнигиПокупок_503(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115105");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента <> Неопределено Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		
		КомпоновщикXML = НовыйКомпоновщикXML(ИмяВременногоФайла);
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("Файл");
		
		ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл, "Т,255");
		ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.03");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
		
		Для Каждого ЛистКниги Из СведенияДокумента Цикл
			ВывестиДокументДопЛистаКнигиПокупок_503(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги);
		КонецЦикла;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // Файл
		
		РезультатВыгрузки = Новый Массив;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаХранилищеКомпоновщикаXML(КомпоновщикXML, ИмяВременногоФайла));
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
		
		РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

#КонецОбласти

#Область ЭлектронноеПредставлениеКнигиПродаж

Функция ЭлектронноеПредставлениеКнигиПродаж_501(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115103");
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.01");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПродав");
	
	ВыгрузитьСведенияОбОрганизации_501(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвКнПрод");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВсегоВсПродВклНДС", ВыгружаемыйДокумент.ВсегоПродаж, "Ч,17,2");
	
	ВывестиУзелКнигиПродаж501_Всего(КомпоновщикXML, ВыгружаемыйДокумент);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Для Каждого СтрокаСведений Из ВыгружаемыйДокумент.ТабличнаяЧасть Цикл
		ВывестиУзелКнигиПродаж501_СвПродаж(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Массив;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	
	РезультатВыгрузки.Добавить(СтруктураВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеКнигиПродаж_502(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115103");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента = Неопределено
		ИЛИ СведенияДокумента.Записи.Количество() = 0 Тогда 
		ТекстИсключения = НСтр("ru = 'Книга продаж не может быть выгружена или отправлена в ФНС по причине:
			|формат выгрузки не предусматривает выгрузку пустой книги продаж.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.02");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайлИсх", ПараметрыВыгрузки.ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайлПерв", ПараметрыВыгрузки.ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КолФайл", 1, "Ч,5");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомФайл", 1, "Ч,5");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПродав");
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	Иначе
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвКнПрод");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Всего");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18", СведенияДокумента.ОбщиеСведения.СтТовРубКоп18, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10", СведенияДокумента.ОбщиеСведения.СтТовРубКоп10, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0", СведенияДокумента.ОбщиеСведения.СтТовРубКоп0, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18", СведенияДокумента.ОбщиеСведения.СумНДСРубКоп18, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10", СведенияДокумента.ОбщиеСведения.СумНДСРубКоп10, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", СведенияДокумента.ОбщиеСведения.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Для Каждого СтрокаСведений Из СведенияДокумента.Записи Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПродаж");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
		
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
		
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
		
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.НаимПок, "Т,1000");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
		
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
		
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалВсего",    СтрокаСведений.СтТовУчНалВсего,    "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалРубКоп",   СтрокаСведений.СтТовУчНалРубКоп,   "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      СтрокаСведений.СтТовРубКоп18,      "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      СтрокаСведений.СтТовРубКоп10,      "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       СтрокаСведений.СтТовРубКоп0,       "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     СтрокаСведений.СумНДСРубКоп18,     "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     СтрокаСведений.СумНДСРубКоп10,     "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", СтрокаСведений.СтПродОсвНДСРубКоп, "Ч,19,2");
		
		Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, КодВидаОперации);
		КонецЦикла;
		
		Если СтрокаСведений.СвПосредн <> Неопределено Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосредн");
			
			Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛ") Тогда
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", СтрокаСведений.СвПосредн.НаимОрг, "Т,1000");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.СвПосредн.ИННЮЛ, "Т,10");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.СвПосредн.КПП, "Т,9");
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			Иначе
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.СвПосредн.ИННФЛ, "Т,12");
				
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
				КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокПдтвОпл Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвДокПдтвОпл");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерДокПдтвОпл", ДокументПодтверждения.НомерДокПдтвОпл, "Т,256");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвОпл", ДокументПодтверждения.ДатаДокПдтвОпл, "Т,10");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЦикла;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Массив;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	
	РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеКнигиПродаж_503(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115103");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента = Неопределено
		ИЛИ СведенияДокумента.Записи.Количество() = 0 Тогда 
		ТекстИсключения = НСтр("ru = 'Книга продаж не может быть выгружена или отправлена в ФНС по причине:
			|формат выгрузки не предусматривает выгрузку пустой книги продаж.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	КомпоновщикXML = НовыйКомпоновщикXML(ИмяВременногоФайла);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Файл");
	
	ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл, "Т,255");
	ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.03");
	ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
	ВывестиАтрибут(КомпоновщикXML, "ИдФайлИсх", ПараметрыВыгрузки.ИдФайл, "Т,200");
	ВывестиАтрибут(КомпоновщикXML, "ИдФайлПерв", ПараметрыВыгрузки.ИдФайл, "Т,200");
	ВывестиАтрибут(КомпоновщикXML, "КолФайл", 1, "Ч,5");
	ВывестиАтрибут(КомпоновщикXML, "НомФайл", 1, "Ч,5");
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД, "Т,7");
	
	ВывестиУзел503_504_СвПродав(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвКнПрод");
	
	ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период, "Т,2");
	ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод, "Т,4");
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Всего");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18", СведенияДокумента.ОбщиеСведения.СтТовРубКоп18, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10", СведенияДокумента.ОбщиеСведения.СтТовРубКоп10, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0", СведенияДокумента.ОбщиеСведения.СтТовРубКоп0, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18", СведенияДокумента.ОбщиеСведения.СумНДСРубКоп18, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10", СведенияДокумента.ОбщиеСведения.СумНДСРубКоп10, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", СведенияДокумента.ОбщиеСведения.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Всего
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвКнПрод
	
	Для Каждого СтрокаСведений Из СведенияДокумента.Записи Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПродаж");
		
		ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
		ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
		ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
		
		ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.НаимПок, "Т,1000");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалВсего",    СтрокаСведений.СтТовУчНалВсего,    "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалРубКоп",   СтрокаСведений.СтТовУчНалРубКоп,   "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      СтрокаСведений.СтТовРубКоп18,      "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      СтрокаСведений.СтТовРубКоп10,      "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       СтрокаСведений.СтТовРубКоп0,       "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     СтрокаСведений.СумНДСРубКоп18,     "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     СтрокаСведений.СумНДСРубКоп10,     "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", СтрокаСведений.СтПродОсвНДСРубКоп, "Ч,19,2");
		
		Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
			КомпоновщикXML.ЗаписатьНачалоЭлемента("КодВидОпер");
			КомпоновщикXML.ЗаписатьТекст(КодВидаОперации);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // КодВидОпер
		КонецЦикла;
		
		Для Каждого НомерТД Из СтрокаСведений.НомерТД Цикл
			КомпоновщикXML.ЗаписатьНачалоЭлемента("НомерТД");
			КомпоновщикXML.ЗаписатьТекст(НомерТД);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // НомерТД
		КонецЦикла;
		
		Для Каждого ВидТов Из СтрокаСведений.ВидТов Цикл
			ВидТов = СокрЛП(Лев(ВидТов, 10));
			КомпоновщикXML.ЗаписатьНачалоЭлемента("ВидТов");
			КомпоновщикXML.ЗаписатьТекст(ВидТов);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // ВидТов
		КонецЦикла;
		
		Если СтрокаСведений.СвПосредн <> Неопределено Тогда
			ВывестиУзел503_504_СвПосредн(КомпоновщикXML, СтрокаСведений.СвПосредн);
		КонецЕсли;
		
		Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокПдтвОпл Цикл
			КомпоновщикXML.ЗаписатьНачалоЭлемента("СвДокПдтвОпл");
			
			ВывестиАтрибут(КомпоновщикXML, "НомерДокПдтвОпл", ДокументПодтверждения.НомерДокПдтвОпл, "Т,256");
			ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвОпл", ДокументПодтверждения.ДатаДокПдтвОпл, "Т,10");
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвДокПдтвОпл
		КонецЦикла;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПродаж
		
	КонецЦикла;
	
	ВывестиУзел503_504_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Документ
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Файл
	
	РезультатВыгрузки = Новый Массив;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаХранилищеКомпоновщикаXML(КомпоновщикXML, ИмяВременногоФайла));
	СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	
	РезультатВыгрузки.Добавить(СтруктураВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеКнигиПродаж_504(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115103");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента = Неопределено
		ИЛИ СведенияДокумента.Записи.Количество() = 0 Тогда 
		ТекстИсключения = НСтр("ru = 'Книга продаж не может быть выгружена или отправлена в ФНС по причине:
			|формат выгрузки не предусматривает выгрузку пустой книги продаж.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	КомпоновщикXML = НовыйКомпоновщикXML(ИмяВременногоФайла);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Файл");
	
	ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл, "Т,255");
	ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
	ВывестиАтрибут(КомпоновщикXML, "ИдФайлИсх", ПараметрыВыгрузки.ИдФайл, "Т,200");
	ВывестиАтрибут(КомпоновщикXML, "ИдФайлПерв", ПараметрыВыгрузки.ИдФайл, "Т,200");
	ВывестиАтрибут(КомпоновщикXML, "КолФайл", 1, "Ч,5");
	ВывестиАтрибут(КомпоновщикXML, "НомФайл", 1, "Ч,5");
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД, "Т,7");
	
	ВывестиУзел503_504_СвПродав(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвКнПрод");
	
	ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период, "Т,2");
	ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод, "Т,4");
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Всего");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп20", СведенияДокумента.ОбщиеСведения.СтТовРубКоп20, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18", СведенияДокумента.ОбщиеСведения.СтТовРубКоп18, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10", СведенияДокумента.ОбщиеСведения.СтТовРубКоп10, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0", СведенияДокумента.ОбщиеСведения.СтТовРубКоп0, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп20", СведенияДокумента.ОбщиеСведения.СумНДСРубКоп20, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18", СведенияДокумента.ОбщиеСведения.СумНДСРубКоп18, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10", СведенияДокумента.ОбщиеСведения.СумНДСРубКоп10, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", СведенияДокумента.ОбщиеСведения.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Всего
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвКнПрод
	
	Для Каждого СтрокаСведений Из СведенияДокумента.Записи Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПродаж");
		
		ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
		ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
		ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
		
		ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.НаимПок, "Т,1000");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалВсего",    СтрокаСведений.СтТовУчНалВсего,    "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалРубКоп",   СтрокаСведений.СтТовУчНалРубКоп,   "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп20",      СтрокаСведений.СтТовРубКоп20,      "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      СтрокаСведений.СтТовРубКоп18,      "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      СтрокаСведений.СтТовРубКоп10,      "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       СтрокаСведений.СтТовРубКоп0,       "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп20",     СтрокаСведений.СумНДСРубКоп20,     "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     СтрокаСведений.СумНДСРубКоп18,     "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     СтрокаСведений.СумНДСРубКоп10,     "Ч,19,2");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", СтрокаСведений.СтПродОсвНДСРубКоп, "Ч,19,2");
		
		Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
			КомпоновщикXML.ЗаписатьНачалоЭлемента("КодВидОпер");
			КомпоновщикXML.ЗаписатьТекст(КодВидаОперации);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // КодВидОпер
		КонецЦикла;
		
		Для Каждого НомерТД Из СтрокаСведений.НомерТД Цикл
			КомпоновщикXML.ЗаписатьНачалоЭлемента("НомерТД");
			КомпоновщикXML.ЗаписатьТекст(НомерТД);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // НомерТД
		КонецЦикла;
		
		Для Каждого ВидТов Из СтрокаСведений.ВидТов Цикл
			ВидТов = СокрЛП(Лев(ВидТов, 10));
			КомпоновщикXML.ЗаписатьНачалоЭлемента("ВидТов");
			КомпоновщикXML.ЗаписатьТекст(ВидТов);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // ВидТов
		КонецЦикла;
		
		Если СтрокаСведений.СвПосредн <> Неопределено Тогда
			ВывестиУзел503_504_СвПосредн(КомпоновщикXML, СтрокаСведений.СвПосредн);
		КонецЕсли;
		
		Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокПдтвОпл Цикл
			КомпоновщикXML.ЗаписатьНачалоЭлемента("СвДокПдтвОпл");
			
			ВывестиАтрибут(КомпоновщикXML, "НомерДокПдтвОпл", ДокументПодтверждения.НомерДокПдтвОпл, "Т,256");
			ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвОпл", ДокументПодтверждения.ДатаДокПдтвОпл, "Т,10");
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвДокПдтвОпл
		КонецЦикла;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПродаж
		
	КонецЦикла;
	
	ВывестиУзел503_504_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Документ
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Файл
	
	РезультатВыгрузки = Новый Массив;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаХранилищеКомпоновщикаXML(КомпоновщикXML, ИмяВременногоФайла));
	СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	
	РезультатВыгрузки.Добавить(СтруктураВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеДопЛистовКнигиПродаж_502(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115106");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента <> Неопределено Тогда
		
		КомпоновщикXML = КомпоновщикXML_Новый();
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.02");
		
		Для Каждого ЛистКниги Из СведенияДокумента Цикл
			ВывестиДокументДопЛистаКнигиПродаж_502(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги);
		КонецЦикла;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		РезультатВыгрузки = Новый Массив;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
		
		РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеДопЛистовКнигиПродаж_503(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115106");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента <> Неопределено Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		
		КомпоновщикXML = НовыйКомпоновщикXML(ИмяВременногоФайла);
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("Файл");
		
		ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл, "Т,255");
		ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.03");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
		
		Для Каждого ЛистКниги Из СведенияДокумента Цикл
			ВывестиДокументДопЛистаКнигиПродаж_503(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги);
		КонецЦикла;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // Файл
		
		РезультатВыгрузки = Новый Массив;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаХранилищеКомпоновщикаXML(КомпоновщикXML, ИмяВременногоФайла));
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
		
		РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеДопЛистовКнигиПродаж_504(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115106");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента <> Неопределено Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		
		КомпоновщикXML = НовыйКомпоновщикXML(ИмяВременногоФайла);
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("Файл");
		
		ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл, "Т,255");
		ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
		
		Для Каждого ЛистКниги Из СведенияДокумента Цикл
			ВывестиДокументДопЛистаКнигиПродаж_504(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги);
		КонецЦикла;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // Файл
		
		РезультатВыгрузки = Новый Массив;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаХранилищеКомпоновщикаXML(КомпоновщикXML, ИмяВременногоФайла));
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
		
		РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

#КонецОбласти

#Область ЭлектронноеПредставлениеЖурналаСчетовФактур

Функция ЭлектронноеПредставлениеЖурналаСчетовФактур_501(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115104");
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.01");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвНП");
	
	ВыгрузитьСведенияОбОрганизации_501(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Для Каждого СтрокаСведений Из ВыгружаемыйДокумент.ВыставленныеСчетаФактуры Цикл
		ВывестиУзелЖурналаСчетовФактур501_СвЧ1(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	Для Каждого СтрокаСведений Из ВыгружаемыйДокумент.ПолученныеСчетаФактуры Цикл
		ВывестиУзелЖурналаСчетовФактур501_СвЧ2(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Массив;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	
	РезультатВыгрузки.Добавить(СтруктураВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеЖурналаСчетовФактур_502(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115104");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента <> Неопределено Тогда
		
		КомпоновщикXML = КомпоновщикXML_Новый();
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.02");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайлИсх", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайлПерв", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КолФайл", 1, "Ч,5");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомФайл", 1, "Ч,5");
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвНП");
		
		Если ПараметрыВыгрузки.ЭтоИП Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		Для Каждого СтрокаСведений Из СведенияДокумента.ЗаписиВыставленных Цикл
			ВывестиСвЧ1ЖурналаСчетовФактур_502(КомпоновщикXML, СтрокаСведений);
		КонецЦикла;
		
		Для Каждого СтрокаСведений Из СведенияДокумента.ЗаписиПолученных Цикл
			ВывестиСвЧ2ЖурналаСчетовФактур_502(КомпоновщикXML, СтрокаСведений);
		КонецЦикла;
		
		ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		РезультатВыгрузки = Новый Массив;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
		
		РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеЖурналаСчетовФактур_503(ВыгружаемыйДокумент) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115104");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента <> Неопределено Тогда
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		
		КомпоновщикXML = НовыйКомпоновщикXML(ИмяВременногоФайла);
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("Файл");
		
		ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл, "Т,255");
		ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.03");
		ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
		ВывестиАтрибут(КомпоновщикXML, "ИдФайлИсх", ПараметрыВыгрузки.ИдФайл, "Т,200");
		ВывестиАтрибут(КомпоновщикXML, "ИдФайлПерв", ПараметрыВыгрузки.ИдФайл, "Т,200");
		ВывестиАтрибут(КомпоновщикXML, "КолФайл", 1, "Ч,5");
		ВывестиАтрибут(КомпоновщикXML, "НомФайл", 1, "Ч,5");
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("Документ");
		ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
		ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
		ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
		
		ВывестиУзел503_СвНП(КомпоновщикXML, ПараметрыВыгрузки);
		
		Для Каждого СтрокаСведений Из СведенияДокумента.ЗаписиВыставленных Цикл
			ВывестиСвЧ1ЖурналаСчетовФактур_503(КомпоновщикXML, СтрокаСведений);
		КонецЦикла;
		
		Для Каждого СтрокаСведений Из СведенияДокумента.ЗаписиПолученных Цикл
			ВывестиСвЧ2ЖурналаСчетовФактур_503(КомпоновщикXML, СтрокаСведений);
		КонецЦикла;
		
		ВывестиУзел503_504_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // Документ
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // Файл
		
		РезультатВыгрузки = Новый Массив;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаХранилищеКомпоновщикаXML(КомпоновщикXML, ИмяВременногоФайла));
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
		
		РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РеестрНДСПриложение1

Процедура ПолучитьСведенияОПоказателяхОтчетаРеестрНДСПриложение1ФормаОтчета2021Кв2(ПоказателиОтчета) Экспорт
	
	ПоказателиОтчетаРеестрНДСПриложение1(ПоказателиОтчета);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаРеестрНДСПриложение1ФормаОтчета2020Кв2(ПоказателиОтчета) Экспорт
	
	ПоказателиОтчетаРеестрНДСПриложение1(ПоказателиОтчета);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаРеестрНДСПриложение1ФормаОтчета2015Кв4(ПоказателиОтчета) Экспорт
	
	ПоказателиОтчетаРеестрНДСПриложение1(ПоказателиОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетРеестрНДСПриложение1ФормаОтчета2021Кв2(ПараметрыОтчета, Контейнер) Экспорт

	ПараметрыОтчета.Вставить("ПравилаЗаполнения", "Приложение1");
	ЗаполнитьРеестрДляПодтвержденияСтавки0(Контейнер, ПараметрыОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетРеестрНДСПриложение1ФормаОтчета2020Кв2(ПараметрыОтчета, Контейнер) Экспорт

	ПараметрыОтчета.Вставить("ПравилаЗаполнения", "Приложение1");
	ЗаполнитьРеестрДляПодтвержденияСтавки0(Контейнер, ПараметрыОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетРеестрНДСПриложение1ФормаОтчета2015Кв4(ПараметрыОтчета, Контейнер) Экспорт

	ПараметрыОтчета.Вставить("ПравилаЗаполнения", "Приложение1");
	ЗаполнитьРеестрДляПодтвержденияСтавки0(Контейнер, ПараметрыОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область РеестрНДСПриложение5

Процедура ПолучитьСведенияОПоказателяхОтчетаРеестрНДСПриложение5ФормаОтчета2021Кв2(ПоказателиОтчета) Экспорт
	
	ПоказателиОтчетаРеестрНДСПриложение5(ПоказателиОтчета);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаРеестрНДСПриложение5ФормаОтчета2020Кв2(ПоказателиОтчета) Экспорт
	
	ПоказателиОтчетаРеестрНДСПриложение5(ПоказателиОтчета);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаРеестрНДСПриложение5ФормаОтчета2015Кв4(ПоказателиОтчета) Экспорт
	
	ПоказателиОтчетаРеестрНДСПриложение5(ПоказателиОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетРеестрНДСПриложение5ФормаОтчета2021Кв2(ПараметрыОтчета, Контейнер) Экспорт
	
	ПараметрыОтчета.Вставить("ПравилаЗаполнения", "Приложение5");
	ЗаполнитьРеестрДляПодтвержденияСтавки0(Контейнер, ПараметрыОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетРеестрНДСПриложение5ФормаОтчета2020Кв2(ПараметрыОтчета, Контейнер) Экспорт
	
	ПараметрыОтчета.Вставить("ПравилаЗаполнения", "Приложение5");
	ЗаполнитьРеестрДляПодтвержденияСтавки0(Контейнер, ПараметрыОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетРеестрНДСПриложение5ФормаОтчета2015Кв4(ПараметрыОтчета, Контейнер) Экспорт
	
	ПараметрыОтчета.Вставить("ПравилаЗаполнения", "Приложение5");
	ЗаполнитьРеестрДляПодтвержденияСтавки0(Контейнер, ПараметрыОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область КосвенныеНалогиПриИмпорте

Процедура ЗаполнитьОтчетКосвенныеНалогиПриИмпортеФормаОтчета2017Кв4(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") Тогда
		СписокОрганизаций = ПараметрыОтчета.ГруппаОрганизаций; 
	Иначе
		СписокОрганизаций = Новый СписокЗначений();
	КонецЕсли;
		
	СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);
	
	Если Контейнер.Свойство("Раздел1") Тогда
		
		Раздел1 = Контейнер.Раздел1.Строки[0].Данные;
		
		Если ПараметрыОтчета.ДатаПодписи > ПараметрыОтчета.мДатаКонцаПериодаОтчета Тогда
			ДатаПодписиДекларации = ПараметрыОтчета.ДатаПодписи;
		Иначе
			ДатаПодписиДекларации = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
		КонецЕсли;
		
		НачислениеНДС = НачислениеНДСПоЗаявлениямОВвозе(ПараметрыОтчета, ДатаПодписиДекларации);
		
		Если НЕ НачислениеНДС.Пустой() Тогда
			
			ТаблицаНачислений = НачислениеНДС.Выгрузить();
			Раздел1.П000010003103 = ТаблицаНачислений[0].СуммаНДС;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	
КонецПроцедуры

Функция НачислениеНДСПоЗаявлениямОВвозе(ПараметрыОтчета, ДатаПодписиДекларации) Экспорт
	
	ВидыСубконто6842 = Новый СписокЗначений;
	ВидыСубконто6842.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто6842.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто6842.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",           ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",         ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",          ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаПодписиДекларации", КонецДня(ДатаПодписиДекларации));
	Запрос.УстановитьПараметр("Счет6842",              ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате);
	Запрос.УстановитьПараметр("ВидыСубконто6842",      ВидыСубконто6842);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявленияОВвозе.Ссылка КАК ЗаявлениеОВвозе,
	|	МИНИМУМ(ЗаявленияОВвозе.ДатаПринятияНаУчет) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ЗаявленияПоНалоговымПериодам
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявленияОВвозе
	|ГДЕ
	|	ЗаявленияОВвозе.Ссылка.Организация = &Организация
	|	И ЗаявленияОВвозе.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявленияОВвозе.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявленияПоНалоговымПериодам.ЗаявлениеОВвозе
	|ПОМЕСТИТЬ ДекларируемыеЗаявления
	|ИЗ
	|	ЗаявленияПоНалоговымПериодам КАК ЗаявленияПоНалоговымПериодам
	|ГДЕ
	|	ЗаявленияПоНалоговымПериодам.НалоговыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаявленияПоНалоговымПериодам.ЗаявлениеОВвозе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СуммаОборотКт КАК ЧИСЛО(15, 0)), 0) КАК СуммаНДС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&ДатаПодписиДекларации,
	|			,
	|			Счет = &Счет6842,
	|			&ВидыСубконто6842,
	|			Организация = &Организация
	|				И Субконто3 В
	|					(ВЫБРАТЬ
	|						ДекларируемыеЗаявления.ЗаявлениеОВвозе
	|					ИЗ
	|						ДекларируемыеЗаявления),
	|			,
	|			) КАК ХозрасчетныйОбороты";
	
	Выборка = Запрос.Выполнить();
	Возврат Выборка;

КонецФункции

// Создает список показателей декларации по косвенным налогам при импорте товаров, которые будут автоматически заполняться.
// Для версии отчета ФормаОтчета2017Кв4.
Процедура ПолучитьСведенияОПоказателяхОтчетаКосвенныеНалогиПриИмпортеФормаОтчета2017Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003103", Истина, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область РеестрДокументовПодтверждающихЛьготы

Процедура ПолучитьСведенияОПоказателяхОтчетаРеестрДокументовПодтверждающихЛьготыФорма2020_1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ВидОпер",  Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаДок",  Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ИННФЛ",    Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ИННЮЛ",    Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "Имя",      Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ИмяФайлДог", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КПП",      Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КодОпер",  Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НаимОрг",  Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НомДок",   Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "Отчество", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "СумНеоблОпер", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "СумОпер",  Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ТипДок",   Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "Фамилия",  Истина, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетРеестрДокументовПодтверждающихЛьготыФорма2020_1(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация   = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ПараметрыОтчета.Организация);
	НачалоПериода =  НачалоКвартала(ПараметрыОтчета.ПериодОтчета);
	КонецПериода  =  КонецКвартала(ПараметрыОтчета.ПериодОтчета);
	
	Результат = ПолучитьСведенияРеестраЛьготныхДокументов(Организация, НачалоПериода, КонецПериода);
	
	Реестр = Контейнер.Реестр;
	
	ВыборкаПоКодам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		ВыборкаПоВидам = ВыборкаПоКодам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоВидам.Следующий() Цикл
			СуммаОпераций = 0;
			СтрокаРеестраКодВидОперации = Реестр.Строки.Добавить();
			СтрокаРеестраКодВидОперации.КодОпер = ВыборкаПоВидам.Код;
			Если Не ЗначениеЗаполнено(ВыборкаПоВидам.ВидНеоблагаемойОперации) Тогда
				СтрокаРеестраКодВидОперации.ВидОпер = "--";
			Иначе
				СтрокаРеестраКодВидОперации.ВидОпер = ВыборкаПоВидам.ВидНеоблагаемойОперации;
			КонецЕсли;
			// Имя файла типового договора заполняется вручную в реестре документов,
			// подтверждающих обоснованность применения налоговых льгот.
			СтрокаТиповойДоговор = СтрокаРеестраКодВидОперации.Строки.Добавить();
			
			ВыборкаПоДокументам = ВыборкаПоВидам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДокументам.Следующий() Цикл
				ВыборкаПоОперациям = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоОперациям.Следующий() Цикл
					СтрокаОперация = СтрокаТиповойДоговор.Строки.Добавить();
					
					ВыборкаЗаписи = ВыборкаПоОперациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					ПерваяСтрока = Истина;
					Пока ВыборкаЗаписи.Следующий() Цикл
						Если ПерваяСтрока Тогда
							ПерваяСтрока = Ложь;
							Если ВыборкаЗаписи.НаименованиеКонтрагента = "Розничная продажа" Тогда
								СтрокаОперация.Фамилия = "Розничная";
								СтрокаОперация.Имя = "продажа";
							ИначеЕсли ВыборкаЗаписи.КонтрагентЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
								СтрокаОперация.НаимОрг = ВыборкаЗаписи.НаименованиеКонтрагента;
								СтрокаОперация.ИННЮЛ = ВыборкаЗаписи.ИННКонтрагента;
								СтрокаОперация.КПП = ВыборкаЗаписи.КППКонтрагента;
							Иначе
								ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ВыборкаЗаписи.НаименованиеКонтрагента);
								СтрокаОперация.Фамилия = ФИО.Фамилия;
								СтрокаОперация.Имя = ФИО.Имя;
								СтрокаОперация.Отчество = ФИО.Отчество;
								СтрокаОперация.ИННФЛ = ВыборкаЗаписи.ИННКонтрагента;
							КонецЕсли;
							СтрокаОперация.СумОпер = ВыборкаЗаписи.СуммаОперации;
							СуммаОпераций = СуммаОпераций + ВыборкаЗаписи.СуммаОперации;
						КонецЕсли;
						СтрокаДокумент = СтрокаОперация.Строки.Добавить();
						СтрокаДокумент.ТипДок   = ВыборкаЗаписи.ТипДокумента;
						СтрокаДокумент.НомДок = ВыборкаЗаписи.НомерДокумента;
						СтрокаДокумент.ДатаДок  = ВыборкаЗаписи.ДатаДокумента;
					КонецЦикла;
					СтрокаРеестраКодВидОперации.СумНеоблОпер = СуммаОпераций;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСведенияРеестраЛьготныхДокументов(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("ТекстРозничнаяПродажа", НСтр("ru = 'Розничная продажа'"));
	
	// Реквизиты контрагентов получим на большую дату подтверждающего документа
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Контрагент КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ФормированиеЗаписейРаздела7ДекларацииНДСПодтверждающиеДокументы.ДатаДокумента, ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка.Дата)) КАК ДатаСведений,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КлючСтроки,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка КАК ДокументСсылка
	|ПОМЕСТИТЬ СсылкиНаДаты
	|ИЗ
	|	Документ.ФормированиеЗаписейРаздела7ДекларацииНДС.НеоблагаемыеНДСОперации КАК ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФормированиеЗаписейРаздела7ДекларацииНДС.ПодтверждающиеДокументы КАК ФормированиеЗаписейРаздела7ДекларацииНДСПодтверждающиеДокументы
	|		ПО ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка = ФормированиеЗаписейРаздела7ДекларацииНДСПодтверждающиеДокументы.Ссылка
	|			И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КлючСтроки = ФормированиеЗаписейРаздела7ДекларацииНДСПодтверждающиеДокументы.КлючСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КодыОперацийРаздела7ДекларацииПоНДС КАК КодыОперацийРаздела7ДекларацииПоНДС
	|		ПО ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КодОперации = КодыОперацийРаздела7ДекларацииПоНДС.Ссылка
	|ГДЕ
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка.Организация В(&Организация)
	|	И КодыОперацийРаздела7ДекларацииПоНДС.ВключаетсяВРеестрПодтверждающихДокументов
	|	И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.СуммаРеализации <> 0
	|	И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка.Проведен
	|	И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Контрагент,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КлючСтроки,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка";
	
	Запрос.Выполнить();
	
	УчетНДС.РегистрационныеСведенияНаДаты(МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыОперацийРаздела7ДекларацииПоНДС.Код КАК Код,
	|	СУММА(ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.СуммаРеализации) КАК СуммаРеализации
	|ПОМЕСТИТЬ СуммыПоКоду
	|ИЗ
	|	Документ.ФормированиеЗаписейРаздела7ДекларацииНДС.НеоблагаемыеНДСОперации КАК ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КодыОперацийРаздела7ДекларацииПоНДС КАК КодыОперацийРаздела7ДекларацииПоНДС
	|		ПО ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КодОперации = КодыОперацийРаздела7ДекларацииПоНДС.Ссылка
	|ГДЕ
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка.Организация В(&Организация)
	|	И КодыОперацийРаздела7ДекларацииПоНДС.ВключаетсяВРеестрПодтверждающихДокументов
	|	И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.СуммаРеализации <> 0
	|	И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка.Проведен
	|	И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	КодыОперацийРаздела7ДекларацииПоНДС.Код
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КодОперации КАК КодОперацииСсылка,
	|	СУММА(ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.СуммаРеализации) КАК СуммаРеализации
	|ПОМЕСТИТЬ СуммыПоВиду
	|ИЗ
	|	Документ.ФормированиеЗаписейРаздела7ДекларацииНДС.НеоблагаемыеНДСОперации КАК ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КодыОперацийРаздела7ДекларацииПоНДС КАК КодыОперацийРаздела7ДекларацииПоНДС
	|		ПО ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КодОперации = КодыОперацийРаздела7ДекларацииПоНДС.Ссылка
	|ГДЕ
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка.Организация В(&Организация)
	|	И КодыОперацийРаздела7ДекларацииПоНДС.ВключаетсяВРеестрПодтверждающихДокументов
	|	И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.СуммаРеализации <> 0
	|	И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка.Проведен
	|	И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КодОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодОперацииСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиНаДаты.Ссылка КАК Ссылка,
	|	СсылкиНаДаты.КлючСтроки КАК КлючСтроки,
	|	СведенияОСсылкахНаДаты.Наименование КАК Наименование,
	|	СведенияОСсылкахНаДаты.ИНН КАК ИНН,
	|	СведенияОСсылкахНаДаты.КПП КАК КПП,
	|	СсылкиНаДаты.ДокументСсылка КАК ДокументСсылка
	|ПОМЕСТИТЬ СведенияОКонтрагентах
	|ИЗ
	|	СсылкиНаДаты КАК СсылкиНаДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОСсылкахНаДаты
	|		ПО СсылкиНаДаты.Ссылка = СведенияОСсылкахНаДаты.Ссылка
	|			И СсылкиНаДаты.ДатаСведений = СведенияОСсылкахНаДаты.ДатаСведений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	КлючСтроки,
	|	СсылкиНаДаты.ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Контрагент КАК Контрагент,
	|	СУММА(ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.СуммаРеализации) КАК СуммаОперации,
	|	МАКСИМУМ(СуммыПоКоду.СуммаРеализации) КАК ИтогПоКоду,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КлючСтроки КАК Операция,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка КАК Ссылка,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КодОперации КАК КодОперации,
	|	МАКСИМУМ(СуммыПоВиду.СуммаРеализации) КАК ИтогПоВиду,
	|	ВЫБОР
	|		КОГДА ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.ДокументРеализации ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА &ТекстРозничнаяПродажа
	|		ИНАЧЕ ЕСТЬNULL(СведенияОКонтрагентах.Наименование, """")
	|	КОНЕЦ КАК НаименованиеКонтрагента,
	|	ЕСТЬNULL(СведенияОКонтрагентах.ИНН, """") КАК ИННКонтрагента,
	|	ЕСТЬNULL(СведенияОКонтрагентах.КПП, """") КАК КППКонтрагента,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Контрагент.ЮридическоеФизическоеЛицо КАК КонтрагентЮридическоеФизическоеЛицо
	|ПОМЕСТИТЬ ЗаписиРеестраПредварительная
	|ИЗ
	|	Документ.ФормированиеЗаписейРаздела7ДекларацииНДС.НеоблагаемыеНДСОперации КАК ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КодыОперацийРаздела7ДекларацииПоНДС КАК КодыОперацийРаздела7ДекларацииПоНДС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СуммыПоКоду КАК СуммыПоКоду
	|			ПО КодыОперацийРаздела7ДекларацииПоНДС.Код = СуммыПоКоду.Код
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СуммыПоВиду КАК СуммыПоВиду
	|			ПО КодыОперацийРаздела7ДекларацииПоНДС.Ссылка = СуммыПоВиду.КодОперацииСсылка
	|		ПО ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КодОперации = КодыОперацийРаздела7ДекларацииПоНДС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОКонтрагентах КАК СведенияОКонтрагентах
	|		ПО ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Контрагент = СведенияОКонтрагентах.Ссылка
	|			И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КлючСтроки = СведенияОКонтрагентах.КлючСтроки
	|			И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка = СведенияОКонтрагентах.ДокументСсылка
	|ГДЕ
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка.Организация В(&Организация)
	|	И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка.Проведен
	|	И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КодыОперацийРаздела7ДекларацииПоНДС.ВключаетсяВРеестрПодтверждающихДокументов
	|	И ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.СуммаРеализации <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Контрагент,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КлючСтроки,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Ссылка,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.КодОперации,
	|	ЕСТЬNULL(СведенияОКонтрагентах.ИНН, """"),
	|	ЕСТЬNULL(СведенияОКонтрагентах.КПП, """"),
	|	ВЫБОР
	|		КОГДА ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.ДокументРеализации ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА &ТекстРозничнаяПродажа
	|		ИНАЧЕ ЕСТЬNULL(СведенияОКонтрагентах.Наименование, """")
	|	КОНЕЦ,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСНеоблагаемыеНДСОперации.Контрагент.ЮридическоеФизическоеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Операция,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыОперацийРаздела7ДекларацииПоНДС.Код КАК Код,
	|	КодыОперацийРаздела7ДекларацииПоНДС.Наименование КАК Наименование,
	|	КодыОперацийРаздела7ДекларацииПоНДС.ВидНеоблагаемойОперации КАК ВидНеоблагаемойОперации,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСПодтверждающиеДокументы.ТипДокумента.ПолноеНаименование КАК ТипДокумента,
	|	ФормированиеЗаписейРаздела7ДекларацииНДСПодтверждающиеДокументы.НомерДокумента КАК НомерДокумента,
	|	ЕСТЬNULL(ФормированиеЗаписейРаздела7ДекларацииНДСПодтверждающиеДокументы.ДатаДокумента, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаДокумента,
	|	ЗаписиРеестраПредварительная.СуммаОперации КАК СуммаОперации,
	|	ЗаписиРеестраПредварительная.ИтогПоКоду КАК ИтогПоКоду,
	|	ЗаписиРеестраПредварительная.Операция КАК Операция,
	|	ЗаписиРеестраПредварительная.ИтогПоВиду КАК ИтогПоВиду,
	|	ЗаписиРеестраПредварительная.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	|	ЗаписиРеестраПредварительная.ИННКонтрагента КАК ИННКонтрагента,
	|	ЗаписиРеестраПредварительная.КППКонтрагента КАК КППКонтрагента,
	|	ЗаписиРеестраПредварительная.Контрагент КАК КонтрагентРасшифровка,
	|	ЗаписиРеестраПредварительная.Ссылка КАК Ссылка,
	|	ЗаписиРеестраПредварительная.КонтрагентЮридическоеФизическоеЛицо КАК КонтрагентЮридическоеФизическоеЛицо
	|ИЗ
	|	ЗаписиРеестраПредварительная КАК ЗаписиРеестраПредварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФормированиеЗаписейРаздела7ДекларацииНДС.ПодтверждающиеДокументы КАК ФормированиеЗаписейРаздела7ДекларацииНДСПодтверждающиеДокументы
	|		ПО ЗаписиРеестраПредварительная.Ссылка = ФормированиеЗаписейРаздела7ДекларацииНДСПодтверждающиеДокументы.Ссылка
	|			И ЗаписиРеестраПредварительная.Операция = ФормированиеЗаписейРаздела7ДекларацииНДСПодтверждающиеДокументы.КлючСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КодыОперацийРаздела7ДекларацииПоНДС КАК КодыОперацийРаздела7ДекларацииПоНДС
	|		ПО ЗаписиРеестраПредварительная.КодОперации = КодыОперацийРаздела7ДекларацииПоНДС.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(ЗаписиРеестраПредварительная.КодОперации, ЗНАЧЕНИЕ(Справочник.КодыОперацийРаздела7ДекларацииПоНДС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КодыОперацийРаздела7ДекларацииПоНДС.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код,
	|	ВидНеоблагаемойОперации,
	|	ДатаДокумента
	|ИТОГИ
	|	МАКСИМУМ(Наименование),
	|	МАКСИМУМ(СуммаОперации),
	|	МАКСИМУМ(ИтогПоКоду),
	|	МАКСИМУМ(ИтогПоВиду)
	|ПО
	|	Код,
	|	ВидНеоблагаемойОперации,
	|	Ссылка,
	|	Операция";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДекларацияНДС

// Заполняет контейнер с показателями декларации по НДС.
//
Процедура ЗаполнитьДекларациюНДС(ПараметрыОтчета, Контейнер)

#Область ПодготовкаОбщихДанных

	Перем ТаблицаРасшифровки;

	Если ПараметрыОтчета.Свойство("Декларация") И ЗначениеЗаполнено(ПараметрыОтчета.Декларация) Тогда
		СсылкаНаДекларацию = ПараметрыОтчета.Декларация;
		РегламентированнаяОтчетность.УдалитьДополнительныеФайлыДекларацииНДС(СсылкаНаДекларацию);
	ИначеЕсли НЕ ПараметрыОтчета.Свойство("ТолькоПоказателиДекларацииНДС") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ДатаНачалаРасширенногоПериодаОтчета") Тогда
		НачалоПериодаОтчета = ПараметрыОтчета.ДатаНачалаРасширенногоПериодаОтчета;
	Иначе
		НачалоПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Формирование разделов 1-7'"));
	
	ОрганизацияНеПлательщикНДС = УчетнаяПолитика.СистемаНалогообложения(
		ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета) 
		<> Перечисления.СистемыНалогообложения.Общая;
	ОрганизацияОсвобожденаОтУплатыНДС = УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(
		ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ОрганизацияВедетРаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(
		ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ЗаполняетсяРаздел7 = УчетНДСПереопределяемый.ЗаполняетсяРаздел7ДекларацииНДС(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	
	Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") Тогда
		СписокОрганизаций = ПараметрыОтчета.ГруппаОрганизаций;
	Иначе
		СписокОрганизаций = Новый СписокЗначений();
	КонецЕсли;
		
	СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПараметрыОтчета.Организация, "ИностраннаяОрганизация,КПП");
	
	ОбщиеПараметрыЗапросов = Новый Структура;
	ОбщиеПараметрыЗапросов.Вставить("Организация", СписокОрганизаций);
	ОбщиеПараметрыЗапросов.Вставить("НачалоПериода", НачалоДня(НачалоПериодаОтчета));
	ОбщиеПараметрыЗапросов.Вставить("КонецПериода",  КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	ОбщиеПараметрыЗапросов.Вставить("КонецПериодаУчитываемыхКорректировок", 
		?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи),
		ПараметрыОтчета.ДатаПодписи, КонецДня(ПараметрыОтчета.ДатаПодписи)));
	ОбщиеПараметрыЗапросов.Вставить("СУчетомКорректировок", НЕ ПараметрыОтчета.ВидДокумента = 0);
	
	Запрос = Новый Запрос;
	УстановитьОбщиеПараметрыЗапроса(Запрос, ОбщиеПараметрыЗапросов);
	
	Запрос.УстановитьПараметр("ВесьОборотЗаПериод", 
		?(ПараметрыОтчета.Свойство("ВесьОборотЗаПериод"),ПараметрыОтчета.ВесьОборотЗаПериод, Ложь));
	Запрос.УстановитьПараметр("КППИностраннойОрганизации", 
		?(РеквизитыОрганизации.ИностраннаяОрганизация, РеквизитыОрганизации.КПП, ""));
	
	// События
	СобытиеРеализация = Новый СписокЗначений;
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	// Суммы связанные с расчетами по оплате включаются в общий объем реализации.
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеРеализация", СобытиеРеализация);
	
	СобытиеРеализацияРаздел2 = Новый СписокЗначений;
	СобытиеРеализацияРаздел2.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытиеРеализацияРаздел2.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	Запрос.УстановитьПараметр("СобытиеРеализацияРаздел2", СобытиеРеализацияРаздел2);

	СобытиеПолученАванс = Новый СписокЗначений;
	СобытиеПолученАванс.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	Запрос.УстановитьПараметр("СобытиеПолученАванс", СобытиеПолученАванс);
	
	СобытиеНачисленНДС = Новый СписокЗначений;
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеНачисленНДС", СобытиеНачисленНДС);
	
	СобытиеВосстановлениеНДС = Новый СписокЗначений;
	СобытиеВосстановлениеНДС.Добавить(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
	Запрос.УстановитьПараметр("СобытиеВосстановлениеНДС", СобытиеВосстановлениеНДС);
	
	СобытиеПредъявленКВычетуНДС = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ВосстановленНДС);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС", СобытиеПредъявленКВычетуНДС);
	
	СобытиеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПодтвержденаСтавка0", СобытиеПодтвержденаСтавка0);
	
	СобытиеПредъявленКВычетуНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС0", СобытиеПредъявленКВычетуНДС0);
	
	СобытиеНеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеНеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНеПодтвержденаСтавка0", СобытиеНеПодтвержденаСтавка0);

	СобытиеПредъявленКВычетуНеПодтвержденНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНеПодтвержденНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНеПодтвержденНДС0", СобытиеПредъявленКВычетуНеПодтвержденНДС0);
	
	// Виды ценностей
	
	ВидыЦенностейОбратноеИсчислениеНДС = 
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгентРеализацияТоваров();
		
	Запрос.УстановитьПараметр("ВидыЦенностейОбратноеИсчислениеНДС", 
		ВидыЦенностейОбратноеИсчислениеНДС);
		
	ВидыЦенностейНеРеализация = Новый Массив;
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВидыЦенностейНеРеализация,
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВидыЦенностейНеРеализация,
		ВидыЦенностейОбратноеИсчислениеНДС);
	
	ВидыЦенностейСтр010_040 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейНеРеализация.Найти(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр010_040.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр010_040", ВидыЦенностейСтр010_040);
	
	ВидыЦенностейСтр030 = Новый СписокЗначений;
	ВидыЦенностейСтр030.Добавить(Перечисления.ВидыЦенностей.ТоварыНалоговыйАгент);
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(
		ВидыЦенностейСтр010_040,
		ВидыЦенностейСтр030);
	
	ВидыЦенностейСтр060 = Новый СписокЗначений;
	ВидыЦенностейСтр060.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр060", ВидыЦенностейСтр060);
	
	ВидыЦенностейСтр070 = Новый СписокЗначений;
	ВидыЦенностейСтр070.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейСтр070.Добавить(Перечисления.ВидыЦенностей.АвансыПолученныеНалоговыйАгент);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр070", ВидыЦенностейСтр070);
	
	ВидыЦенностейСтр090 = Новый СписокЗначений;
	ВидыЦенностейСтр090.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	ВидыЦенностейСтр090.Добавить(Перечисления.ВидыЦенностей.АвансыВыданныеНалоговыйАгент);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр090", ВидыЦенностейСтр090);
	
	ВидыЦенностейСтр130 =  Новый СписокЗначений;
	ВидыЦенностейСтр130.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	ВидыЦенностейСтр130.Добавить(Перечисления.ВидыЦенностей.АвансыВыданныеНалоговыйАгент);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр130", ВидыЦенностейСтр130);
	
	ВидыЦенностейСтр140 =  Новый СписокЗначений;
	ВидыЦенностейСтр140.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр140", ВидыЦенностейСтр140);
	
	ВидыЦенностейСтр150 =  Новый СписокЗначений;
	ВидыЦенностейСтр150.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностейСтр150.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр150", ВидыЦенностейСтр150);
	
	ВидыЦенностейСтр160 =  Новый СписокЗначений;
	ВидыЦенностейСтр160.Добавить(Перечисления.ВидыЦенностей.ТаможенныйСоюз);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр160", ВидыЦенностейСтр160);
	
	ВидыЦенностейСтр170 =  Новый СписокЗначений;
	ВидыЦенностейСтр170.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейСтр170.Добавить(Перечисления.ВидыЦенностей.АвансыПолученныеНалоговыйАгент);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр170", ВидыЦенностейСтр170);
	
	МассивВидовЦенностиНалоговыйАгент = Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент();
	ВидыЦенностейСтр180 = Новый СписокЗначений;
	Для Каждого ВидЦенностиНалоговыйАгент Из МассивВидовЦенностиНалоговыйАгент Цикл
		ВидыЦенностейСтр180.Добавить(ВидЦенностиНалоговыйАгент);
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр180", ВидыЦенностейСтр180);
	
	ВидыЦенностейСтр120 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейСтр130.НайтиПоЗначению(ВидЦенности) = Неопределено
			И ВидыЦенностейСтр140.НайтиПоЗначению(ВидЦенности) = Неопределено
			И ВидыЦенностейСтр150.НайтиПоЗначению(ВидЦенности) = Неопределено
			И ВидыЦенностейСтр160.НайтиПоЗначению(ВидЦенности) = Неопределено
			И ВидыЦенностейСтр170.НайтиПоЗначению(ВидЦенности) = Неопределено
			И ВидыЦенностейСтр180.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр120.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр120", ВидыЦенностейСтр120);
	
	ВидыЦенностей_1011703 =  Новый СписокЗначений;
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_1011703", ВидыЦенностей_1011703);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011707", Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011712", Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011713", Перечисления.ВидыЦенностей.НалоговыйАгентЭлектронныеУслуги);
	
	Запрос.УстановитьПараметр("ВидыЦенностейНА", ВидыЦенностейСтр180);
	
	// Ставки НДС
	
	ОбщаяСтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(
		Перечисления.ВидыСтавокНДС.Общая, ОбщиеПараметрыЗапросов.КонецПериода);
	ОбщаяРасчетнаяСтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(
		Перечисления.ВидыСтавокНДС.ОбщаяРасчетная, ОбщиеПараметрыЗапросов.КонецПериода);
	ПониженнаяСтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(
		Перечисления.ВидыСтавокНДС.Пониженная, ОбщиеПараметрыЗапросов.КонецПериода);
	ПрименяетсяСтавка20 = ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
		ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4";
		
	Запрос.УстановитьПараметр("СтавкаНДС10",             Перечисления.СтавкиНДС.НДС10);
	Запрос.УстановитьПараметр("СтавкаНДС10_110",         Перечисления.СтавкиНДС.НДС10_110);
	Запрос.УстановитьПараметр("СтавкаНДС18",             Перечисления.СтавкиНДС.НДС18);
	Запрос.УстановитьПараметр("СтавкаНДС18_118",         Перечисления.СтавкиНДС.НДС18_118);
	Запрос.УстановитьПараметр("ОбщаяСтавкаНДС",          ОбщаяСтавкаНДС);
	Запрос.УстановитьПараметр("ОбщаяРасчетнаяСтавкаНДС", ОбщаяРасчетнаяСтавкаНДС);
	Запрос.УстановитьПараметр("ПрименяетсяСтавка20",     ПрименяетсяСтавка20);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаОбщиеДанные();
	Запрос.Выполнить();
	
	ПолеКомпоновкиДанныхСобытие         = Новый ПолеКомпоновкиДанных("Событие");
	ПолеКомпоновкиДанныхВидЦенности     = Новый ПолеКомпоновкиДанных("ВидЦенности");
	ПолеКомпоновкиДанныхСтавкаНДС       = Новый ПолеКомпоновкиДанных("СтавкаНДС");
	ПолеКомпоновкиДанныхКодВидаОперации = Новый ПолеКомпоновкиДанных("КодВидаОперации");
	
	Если ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
		МакетыРасшифровкиПолей = МакетыРасшифровкиПолей2015Кв1(
			ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
		МакетыРасшифровкиПолей = МакетыРасшифровкиПолей2017Кв1(
			ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
	      ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" Тогда
		МакетыРасшифровкиПолей = МакетыРасшифровкиПолей2019Кв1(
			ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
#КонецОбласти

#Область Раздел2

	Если Контейнер.Свойство("Раздел2") Тогда
		
		Раздел2 = Контейнер.Раздел2;
		
		Запрос.Текст = ТекстЗапросаРаздел2();
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		СтраницаРаздел2 = Раздел2[0].Данные;
		
		Если СтраницаРаздел2.П000200005003 = Неопределено Тогда
			СтраницаРаздел2.П000200005003 = "";
			ОКАТО = "";
		Иначе
			ОКАТО = СтраницаРаздел2.П000200005003;
		КонецЕсли;
		
		Для Каждого Показатель Из СтраницаРаздел2 Цикл
			СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
		КонецЦикла;
		
		Пока Раздел2.Количество() > 1 Цикл
			Раздел2.Удалить(1);
		КонецЦикла;
		
		ПерваяСтраница = Истина;
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел2 Цикл
					СтруктураНовойТаблицы.Вставить(
						Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				НоваяСтраницаРаздела2 = Раздел2.Добавить();
				НоваяСтраницаРаздела2.Данные = СтруктураНовойТаблицы;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			
			СтраницаРаздел2 = Раздел2[Раздел2.Количество()-1].Данные;
			
			ДанныеЛистаРаздел2ФИО = (Выборка.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
			
			СтраницаРаздел2.П000200001003 = Выборка.П000200001003;
			СтраницаРаздел2.П000200002003 = Выборка.П000200002003;
			СтраницаРаздел2.П000200003003 = Выборка.П000200003003;
			СтраницаРаздел2.П000200005003 = ОКАТО;
			СтраницаРаздел2.П000200006003 = Выборка.П000200006003;
			
			#Область Расшифровка_П000200006003
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000200006003"));
			
			ПолеКомпоновкиДанныхКонтрагент = Новый ПолеКомпоновкиДанных("Контрагент");
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхКонтрагент,
				ВидСравненияКомпоновкиДанных.Равно,
				Выборка.П000200002003_Расшифровка);
			
			СписокСобытий = Новый СписокЗначений;
			
			Для Каждого Событие Из СобытиеНачисленНДС Цикл
				СписокСобытий.Добавить(Событие.Значение);
			КонецЦикла;
			
			Для Каждого Событие Из СобытиеПолученАванс Цикл
				СписокСобытий.Добавить(Событие.Значение);
			КонецЦикла;
			
			Для Каждого Событие Из СобытиеРеализация Цикл
				СписокСобытий.Добавить(Событие.Значение);
			КонецЦикла;
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СписокСобытий);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр180);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000200006003_" + Раздел2.Количество(),
				НСтр("ru='Сумма налога, подлежащая уплате в бюджет'"),
				"",
				"",
				СтраницаРаздел2.П000200006003,
				"Раздел2",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти
			
			СтраницаРаздел2.П000200007003 = Выборка.П000200007003;
			СтраницаРаздел2.П000200008003 = Выборка.П000200008003;
			
			#Область Расшифровка_П000200008003
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000200008003"));
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхКонтрагент,
				ВидСравненияКомпоновкиДанных.Равно,
				Выборка.П000200002003_Расшифровка);
			
			ГруппаИЛИ = ДополнительныеПараметрыИОтбор.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ДобавитьЗначениеВОтбор(
				ГруппаИЛИ, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеРеализация);
			
			//ИЛИ
			ГруппаИ = ГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ДобавитьЗначениеВОтбор(
				ГруппаИ,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеНачисленНДС);
			//И
			ДобавитьЗначениеВОтбор(ГруппаИ,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.Равно,
				Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
			
			НаимПоказателя = НСтр("ru='Сумма налога, исчисленная при отгрузке товаров 
				|(выполнении работ, оказании услуг, передаче имущественных прав)'");
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000200008003_" + Раздел2.Количество(),
				НаимПоказателя,
				"",
				"",
				СтраницаРаздел2.П000200008003,
				"Раздел2",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти
			
			СтраницаРаздел2.П000200009003 = Выборка.П000200009003;
			
			#Область Расшифровка_П000200009003
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000200009003"));
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхКонтрагент,
				ВидСравненияКомпоновкиДанных.Равно,
				Выборка.П000200002003_Расшифровка);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеПолученАванс);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр180);
			
			НаимПоказателя = НСтр("ru='Сумма налога, исчисленная при получении оплаты, частичной оплаты в счет предстоящей
				|отгрузки товаров (выполнения работ, оказания услуг, передачи имущественных прав)'");
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000200009003_" + Раздел2.Количество(),
				НаимПоказателя,
				"",
				"",
				СтраницаРаздел2.П000200009003,
				"Раздел2",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
				
			#КонецОбласти
			
			Если ДанныеЛистаРаздел2ФИО Тогда
				СтраницаРаздел2.П000200001003 = "";
				// Если в строке есть запятые, то удалим их, т.к. они являются разделителями.
				П000200002003 = СтрЗаменить(Выборка.П000200002003, ",", "");
				ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(П000200002003);
				ФамилияРаздел2  = СокрЛП(ФИО.Фамилия);
				ИмяРаздел2      = СокрЛП(ФИО.Имя);
				ОтчествоРаздел2 = СокрЛП(ФИО.Отчество);
				
				// Покажем в разделе, разбитое значение по частям, в случае, если что-то ошибочное, необходимо поправить в отчете.
				П000200002003 = СокрЛП(ФамилияРаздел2 + " " + ИмяРаздел2 + " " + ОтчествоРаздел2);
			Иначе
				ФамилияРаздел2 = "";
				ИмяРаздел2 = "";
				ОтчествоРаздел2 = "";
			КонецЕсли;
			
		КонецЦикла;
		
		Если УчетНДС.ВедетсяУчетНДСПоФЗ335(ПараметрыОтчета.мДатаКонцаПериодаОтчета)
		   И ОрганизацияНеПлательщикНДС Тогда
			
			// В соответствии с письмом ФНС России от 16.01.2018 N СД-4-3/480
			// итоговую сумму налога, подлежащую уплате в бюджет налоговыми агентами, указанными в пункте 8 статьи 161 Кодекса,
			// следует отражать по строке 060 раздела 2 налоговой декларации по НДС.

			Запрос.Текст = ТекстЗапросаРаздел2_1();
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				Если ЗначениеЗаполнено(Выборка.СуммаКУплате) Тогда
					
					Если НЕ ПерваяСтраница Тогда
						// Создаем дополнительную страницу в декларации
						СтруктураНовойТаблицы = Новый Структура();
						Для Каждого Показатель Из СтраницаРаздел2 Цикл
							СтруктураНовойТаблицы.Вставить(
								Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
						КонецЦикла;
						
						НоваяСтраницаРаздела2 = Раздел2.Добавить();
						НоваяСтраницаРаздела2.Данные = СтруктураНовойТаблицы;
						
					Иначе
						// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
						ПерваяСтраница = Ложь;
					КонецЕсли;
					
					СтраницаРаздел2 = Раздел2[Раздел2.Количество() - 1].Данные;
					
					СтраницаРаздел2.П000200005003 = ОКАТО;
					// Заявлять возмещение в рамках раздела 2 невозможно,
					// при наличии суммы к возмещению в декларации будет указана нулевая сумма к уплате.
					СтраницаРаздел2.П000200006003 = ?(Выборка.СуммаКУплате < 0, 0, Выборка.СуммаКУплате);
					СтраницаРаздел2.П000200007003 = "1011715";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти

#Область Раздел3

	Если Контейнер.Свойство("Раздел3")
		И НЕ ОрганизацияНеПлательщикНДС
		И НЕ ОрганизацияОсвобожденаОтУплатыНДС Тогда
		
		Раздел3 = Контейнер.Раздел3;
		
		Запрос.Текст = ТекстЗапросаРаздел3Начисления();
		
		Раздел3Начисления = Запрос.Выполнить().Выбрать();
		
		Если Раздел3Начисления.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(Раздел3, Раздел3Начисления);
			
			#Область НаименованиеПоказателейРасшифровки
			
			НаимПоказателя010_040 = НСтр("ru='1. Реализация (передача на территории Российской Федерации для собственных нужд)
					|товаров (работ, услуг), передача имущественных прав по соответствующим ставкам налога,
					|а также суммы, связанные с расчетами по оплате налогооблагаемых товаров (работ, услуг), всего'");
			
			Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
			 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
			 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
				
				НаимПоказателя060 = НСтр("ru='4. Выполнение строительно-монтажных работ для собственного потребления'");
				НаимПоказателя070 = НСтр("ru='5. Суммы полученной оплаты, частичной оплаты в счет предстоящих
					|поставок товаров (выполнения работ, оказания услуг), передачи имущественных прав'");
				НаимПоказателя080 = НСтр("ru='6. Суммы налога, подлежащие восстановлению, всего'");
				НаимПоказателя090 = НСтр("ru='6.1. суммы налога, подлежащие восстановлению в соответствии
					|с подпунктом 3 пункта 3 статьи 170 Налогового кодекса Российской Федерации'");
				НаимПоказателя120 = НСтр("ru='12. Сумма налога, предъявленная налогоплательщику при приобретении товаров 
					|(работ, услуг), имущественных прав на территории Российской Федерации, подлежащая вычету в соответствии с
					|пунктами 2, 4, 13 статьи 171 Налогового кодекса Российской Федерации, а также сумма налога,
					|подлежащая вычету в соответствии с пунктом 5 статьи 171 Налогового кодекса Российской Федерации'");
				НаимПоказателя130 = НСтр("ru='13. Сумма налога, предъявленная налогоплательщику - покупателю 
					|при перечислении суммы оплаты, частичной оплаты в счет предстоящих поставок товаров (выполнения работ, 
					|оказания услуг), передачи имущественных прав, подлежащая вычету у покупателя'");
				НаимПоказателя140 = НСтр("ru='14. Сумма налога, исчисленная при выполнении строительно-монтажных работ для
					|собственного потребления, подлежащая вычету'");
				НаимПоказателя150 = НСтр("ru='15. Сумма налога, уплаченная налогоплательщиком таможенным органам при ввозе товаров
					|на территорию Российской Федерации и иные территории, находящиеся под её юрисдикцией,
					|в таможенных процедурах выпуска для внутреннего потребления, переработки для внутреннего потребления,
					|временного ввоза и переработки вне таможенной территории'");
				НаимПоказателя160 = НСтр("ru='16. Сумма налога, уплаченная налогоплательщиком налоговым органам при ввозе товаров
					|на территорию Российской Федерации и иные территории, находящиеся под её юрисдикцией,
					|с территории государств - членов Евразийского экономического союза'");
				НаимПоказателя170 = НСтр("ru='17. Сумма налога, исчисленная продавцом с сумм оплаты, частичной оплаты, 
					|подлежащая вычету у продавца с даты отгрузки соответствующих товаров (выполнения работ, оказания услуг)'");
				НаимПоказателя180 = НСтр("ru='18. Сумма налога, уплаченная в бюджет налогоплательщиком 
					|в качестве покупателя - налогового агента, подлежащая вычету'");
				
			ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
				
				НаимПоказателя060 = НСтр("ru='3. Выполнение строительно-монтажных работ для собственного потребления'");
				НаимПоказателя070 = НСтр("ru='4. Суммы полученной оплаты, частичной оплаты в счет предстоящих
					|поставок товаров (выполнения работ, оказания услуг), передачи имущественных прав'");
				НаимПоказателя080 = НСтр("ru='5. Суммы налога, подлежащие восстановлению, всего'");
				НаимПоказателя090 = НСтр("ru='5.1. суммы налога, подлежащие восстановлению в соответствии
					|с подпунктом 3 пункта 3 статьи 170 Налогового кодекса Российской Федерации'");
				НаимПоказателя120 = НСтр("ru='9. Сумма налога, предъявленная налогоплательщику при приобретении товаров 
					|(работ, услуг), имущественных прав на территории Российской Федерации, подлежащая вычету в соответствии с
					|пунктами 2, 4, 13 статьи 171 Налогового кодекса Российской Федерации, а также сумма налога,
					|подлежащая вычету в соответствии с пунктом 5 статьи 171 Налогового кодекса Российской Федерации'");
				НаимПоказателя130 = НСтр("ru='10. Сумма налога, предъявленная налогоплательщику - покупателю 
					|при перечислении суммы оплаты, частичной оплаты в счет предстоящих поставок товаров (выполнения работ, 
					|оказания услуг), передачи имущественных прав, подлежащая вычету у покупателя'");
				НаимПоказателя140 = НСтр("ru='11. Сумма налога, исчисленная при выполнении строительно-монтажных работ для
					|собственного потребления, подлежащая вычету'");
				НаимПоказателя150 = НСтр("ru='12. Сумма налога, уплаченная налогоплательщиком таможенным органам при ввозе товаров
					|на территорию Российской Федерации и иные территории, находящиеся под её юрисдикцией,
					|в таможенных процедурах выпуска для внутреннего потребления, переработки для внутреннего потребления,
					|временного ввоза и переработки вне таможенной территории'");
				НаимПоказателя160 = НСтр("ru='13. Сумма налога, уплаченная налогоплательщиком налоговым органам при ввозе товаров
					|на территорию Российской Федерации и иные территории, находящиеся под её юрисдикцией,
					|с территории государств - членов Таможенного союза'");
				НаимПоказателя170 = НСтр("ru='14. Сумма налога, исчисленная продавцом с сумм оплаты, частичной оплаты, 
					|подлежащая вычету у продавца с даты отгрузки соответствующих товаров (выполнения работ, оказания услуг)'");
				НаимПоказателя180 = НСтр("ru='15. Сумма налога, уплаченная в бюджет налогоплательщиком 
					|в качестве покупателя - налогового агента, подлежащая вычету'");
				
			КонецЕсли;

			#КонецОбласти
			
			#Область Расшифровка_П000300001003_и_П000300001005
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300001003"));
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеРеализация);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр010_040);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСтавкаНДС,
				ВидСравненияКомпоновкиДанных.Равно,
				ОбщаяСтавкаНДС);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300001003",
				НаимПоказателя010_040,
				"",
				"",
				Раздел3.П000300001003,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300001005",
				НаимПоказателя010_040,
				"",
				"",
				Раздел3.П000300001005,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти
			
			#Область Расшифровка_П000300002003_и_П000300002005
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300002003"));
			
			ДобавитьЗначениеВОтбор(ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеРеализация);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр010_040);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСтавкаНДС, ВидСравненияКомпоновкиДанных.Равно,
				Перечисления.СтавкиНДС.НДС10);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300002003",
				НаимПоказателя010_040,
				"",
				"",
				Раздел3.П000300002003,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300002005",
				НаимПоказателя010_040,
				"",
				"",
				Раздел3.П000300002005,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти
			
			#Область Расшифровка_П000300003003_и_П000300003005
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300003003"));
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеРеализация);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр030);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСтавкаНДС,
				ВидСравненияКомпоновкиДанных.Равно,
				ОбщаяРасчетнаяСтавкаНДС);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300003003",
				НаимПоказателя010_040,
				"",
				"",
				Раздел3.П000300003003,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300003005",
				НаимПоказателя010_040,
				"",
				"",
				Раздел3.П000300003005,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти

			#Область Расшифровка_П000300004003_и_П000300004005
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300004003"));
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеРеализация);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр010_040);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСтавкаНДС,
				ВидСравненияКомпоновкиДанных.Равно,
				Перечисления.СтавкиНДС.НДС10_110);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300004003",
				НаимПоказателя010_040,
				"",
				"",
				Раздел3.П000300004003,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300004005",
				НаимПоказателя010_040,
				"",
				"",
				Раздел3.П000300004005,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти

		#Область Расшифровка_П000300004103_П000300004105_П000300004203_П000300004205
		
			Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
			 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1" Тогда
			
				ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
					МакетыРасшифровкиПолей.Получить("П000300004103"));
				
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхСобытие,
					ВидСравненияКомпоновкиДанных.ВСписке,
					СобытиеРеализация);
					
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхВидЦенности,
					ВидСравненияКомпоновкиДанных.ВСписке,
					ВидыЦенностейСтр010_040);
					
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхСтавкаНДС,
					ВидСравненияКомпоновкиДанных.Равно,
					Перечисления.СтавкиНДС.НДС18);
				
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
					ТаблицаРасшифровки,
					"П000300004103",
					НаимПоказателя010_040,
					"",
					"",
					Раздел3.П000300004103,
					"Раздел3",
					ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
					
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
					ТаблицаРасшифровки,
					"П000300004105",
					НаимПоказателя010_040,
					"",
					"",
					Раздел3.П000300004105,
					"Раздел3",
					ДополнительныеПараметрыИОтбор.ДополнительныеПараметры); 
					
				ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
					МакетыРасшифровкиПолей.Получить("П000300004203"));
				
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхСобытие,
					ВидСравненияКомпоновкиДанных.ВСписке,
					СобытиеРеализация);
					
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхВидЦенности,
					ВидСравненияКомпоновкиДанных.ВСписке,
					ВидыЦенностейСтр030);
					
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхСтавкаНДС,
					ВидСравненияКомпоновкиДанных.Равно,
					Перечисления.СтавкиНДС.НДС18_118);
				
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
					ТаблицаРасшифровки,
					"П000300004203",
					НаимПоказателя010_040,
					"",
					"",
					Раздел3.П000300004203,
					"Раздел3",
					ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
					
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
					ТаблицаРасшифровки,
					"П000300004205",
					НаимПоказателя010_040,
					"",
					"",
					Раздел3.П000300004205,
					"Раздел3",
					ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			КонецЕсли;
			
			#КонецОбласти
			
			#Область Расшифровка_П000300006003_и_П000300006005
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300006003"));
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеНачисленНДС);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр060);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300006003",
				НаимПоказателя060,
				"",
				"",
				Раздел3.П000300006003,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300006005",
				НаимПоказателя060,
				"",
				"",
				Раздел3.П000300006005,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти
			
			#Область Расшифровка_П000300007003_и_П000300007005
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300007003"));
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.Равно,
				СобытиеПолученАванс);
			ДобавитьЗначениеВОтбор(ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр070);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300007003",
				НаимПоказателя070,
				"",
				"",
				Раздел3.П000300007003,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300007005",
				НаимПоказателя070,
				"",
				"",
				Раздел3.П000300007005,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти
			
			#Область Расшифровка_П000300008005
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300008005"));
				
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеВосстановлениеНДС);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300008005",
				НаимПоказателя080,
				"",
				"",
				Раздел3.П000300008005,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
				
			#КонецОбласти
			
			#Область Расшифровка_П000300009005
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300009005"));
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеВосстановлениеНДС);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр090);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300009005",
				НаимПоказателя090,
				"",
				"",
				Раздел3.П000300009005,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти
			
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапросаРаздел3Вычеты();
		Раздел3Вычеты = Запрос.Выполнить().Выбрать();
		
		Если Раздел3Вычеты.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(Раздел3, Раздел3Вычеты);
			
			#Область Расшифровка_П000300012003
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300012003"));
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеПредъявленКВычетуНДС);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр120);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300012003",
				НаимПоказателя120,
				"",
				"",
				Раздел3.П000300012003,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти
			
			#Область Расшифровка_П000300013003
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300013003"));
			
			ДобавитьЗначениеВОтбор(ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеПредъявленКВычетуНДС);
			ДобавитьЗначениеВОтбор(ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр130);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300013003",
				НаимПоказателя130,
				"",
				"",
				Раздел3.П000300013003,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти

			#Область Расшифровка_ПП000300014003
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300014003"));
			
			ДобавитьЗначениеВОтбор(
			ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеПредъявленКВычетуНДС);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр140);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300014003",
				НаимПоказателя140,
				"",
				"",
				Раздел3.П000300014003,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
				
			#КонецОбласти
			
			#Область Расшифровка_П000300015003
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300015003"));
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеПредъявленКВычетуНДС);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр150);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300015003",
				НаимПоказателя150,
				"",
				"",
				Раздел3.П000300015003,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти
			
			#Область Расшифровка_П000300016003
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300016003"));
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеПредъявленКВычетуНДС);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр160);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300016003",
				НаимПоказателя160,
				"",
				"",
				Раздел3.П000300016003,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти
			
			#Область Расшифровка_П000300017003
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300017003"));
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеПредъявленКВычетуНДС);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр170);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300017003",
				НаимПоказателя170,
				"",
				"",
				Раздел3.П000300017003,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
				
			#КонецОбласти
			
			#Область Расшифровка_П000300018003
			
			ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
				МакетыРасшифровкиПолей.Получить("П000300018003"));
			
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхСобытие,
				ВидСравненияКомпоновкиДанных.ВСписке,
				СобытиеПредъявленКВычетуНДС);
			ДобавитьЗначениеВОтбор(
				ДополнительныеПараметрыИОтбор.Отбор,
				ПолеКомпоновкиДанныхВидЦенности,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидыЦенностейСтр180);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				"П000300018003",
				НаимПоказателя180,
				"",
				"",
				Раздел3.П000300018003,
				"Раздел3",
				ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
			
			#КонецОбласти
			
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти 

#Область Раздел3Приложение1

	Если Контейнер.Свойство("Раздел3_Прил1") Тогда
		
		Если КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета) = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета) Тогда
			
			Раздел3_Прил1         = Контейнер.Раздел3_Прил1;
			СтраницаРаздел3_Прил1 = Раздел3_Прил1[0].Данные;
			ПерваяСтраница        = Истина;
			
			Для Каждого Показатель Из СтраницаРаздел3_Прил1 Цикл
				СтраницаРаздел3_Прил1[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(
					ТипЗнч(Показатель.Значение));
			КонецЦикла;
			
			Пока Раздел3_Прил1.Количество() > 1 Цикл
				Раздел3_Прил1.Удалить(1);
			КонецЦикла;
			
			Запрос = Новый Запрос();
			УстановитьОбщиеПараметрыЗапроса(Запрос, ОбщиеПараметрыЗапросов);
			Запрос.Текст = ТекстЗапросаРаздел3Приложение1();
			РезультатЗапроса = Запрос.Выполнить();
			ОбъектыНедвижимости = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			Пока ОбъектыНедвижимости.Следующий() Цикл
				
				КодыОпераций = ОбъектыНедвижимости.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				
				Пока КодыОпераций.Следующий() Цикл
					
					Если НЕ ПерваяСтраница Тогда
						
						СтруктураНовойТаблицы = Новый Структура();
						Для Каждого Показатель Из СтраницаРаздел3_Прил1 Цикл
							СтруктураНовойТаблицы.Вставить(Показатель.Ключ, 
								ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
						КонецЦикла;
						
						НоваяСтраницаРаздела3 = Раздел3_Прил1.Добавить();
						НоваяСтраницаРаздела3.Данные = СтруктураНовойТаблицы;
						
					Иначе
						// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
						ПерваяСтраница = Ложь;
					КонецЕсли;
					
					СтраницаРаздел3_Прил1 = Раздел3_Прил1[Раздел3_Прил1.Количество() - 1].Данные;
					
					Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
					 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
					 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
						СтраницаРаздел3_Прил1.П000310001001 = ОбъектыНедвижимости.ОбъектНаименованиеПолное;
					ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
						СтраницаРаздел3_Прил1.П000310001000 = ОбъектыНедвижимости.ОбъектНаименованиеПолное;
					КонецЕсли;
					
					#Область РасшифровкаСтроки010_060
					
					ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор("ОткрытьОбъект");
					ДополнительныеПараметрыИОтбор.ДополнительныеПараметры.Вставить("Объект", ОбъектыНедвижимости.ОбъектНедвижимости);
					
					Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
					 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
					 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
						
						НаимПоказателя = НСтр("ru='Наименование объекта основного средства (код строки 010)'");
						ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
							ТаблицаРасшифровки,
							"П000310001001_" + Раздел3_Прил1.Количество(),
							НаимПоказателя,
							"",
							"",
							СтраницаРаздел3_Прил1.П000310001001,
							"Раздел3_Прил1",
							ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
						
						НаимПоказателя = НСтр("ru='Дата ввода объекта основного средства в эксплуатацию 
							|для исчисления амортизации (код строки 030)'");
						ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
							ТаблицаРасшифровки,
							"П000310003001_" + Раздел3_Прил1.Количество(),
							НаимПоказателя,
							"",
							"",
							СтраницаРаздел3_Прил1.П000310003001,
							"Раздел3_Прил1",
							ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
						
						НаимПоказателя = НСтр("ru='Дата начала начисления амортизационных отчислений по объекту 
							|основного средства (код строки 040)'");
						ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
							ТаблицаРасшифровки,
							"П000310004001_" + Раздел3_Прил1.Количество(),
							НаимПоказателя,
							"",
							"",
							СтраницаРаздел3_Прил1.П000310004001,
							"Раздел3_Прил1",
							ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
						
						НаимПоказателя = НСтр("ru='Стоимость объекта основного средства на дату ввода объекта в эксплуатацию
							|без учета налога (код строки 050)'");
						ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
							ТаблицаРасшифровки,
							"П000310005001_" + Раздел3_Прил1.Количество(),
							НаимПоказателя,
							"",
							"",
							СтраницаРаздел3_Прил1.П000310005001,
							"Раздел3_Прил1",
							ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
						
					ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
					
						НаимПоказателя = НСтр("ru='Наименование объекта недвижимости (код строки 010)'");
						ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
							ТаблицаРасшифровки,
							"П000310001000_" + Раздел3_Прил1.Количество(),
							НаимПоказателя,
							"",
							"",
							СтраницаРаздел3_Прил1.П000310001000,
							"Раздел3_Прил1",
							ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
						
						НаимПоказателя = НСтр("ru='Дата ввода объекта недвижимости в эксплуатацию 
							|для исчисления амортизации (код строки 040)'");
						ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
							ТаблицаРасшифровки,
							"П000310004001_" + Раздел3_Прил1.Количество(),
							НаимПоказателя,
							"",
							"",
							СтраницаРаздел3_Прил1.П000310004001,
							"Раздел3_Прил1",
							ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
						
						НаимПоказателя = НСтр("ru='Дата начала начисления амортизационных отчислений 
							|по объекту недвижимости (код строки 050)'");
						ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
							ТаблицаРасшифровки,
							"П000310005001_" + Раздел3_Прил1.Количество(),
							НаимПоказателя,
							"",
							"",
							СтраницаРаздел3_Прил1.П000310005001,
							"Раздел3_Прил1",
							ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
						
						НаимПоказателя = НСтр("ru='Стоимость объекта недвижимости на дату ввода объекта в эксплуатацию
							|без учета НДС (руб.) (код строки 060)'");
						ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
							ТаблицаРасшифровки,
							"П000310006001_" + Раздел3_Прил1.Количество(),
							НаимПоказателя,
							"",
							"",
							СтраницаРаздел3_Прил1.П000310006001,
							"Раздел3_Прил1",
							ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
							
					КонецЕсли;
					
					#КонецОбласти
					
					ГодВосстановления = КодыОпераций.Выбрать();
					НомерСтроки = 0;
					
					Пока ГодВосстановления.Следующий() Цикл
						
						Если НомерСтроки = 0 Тогда
							
							Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
							 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
							 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
								
								СтраницаРаздел3_Прил1.П000310002001 = ГодВосстановления.КодОперацииСтрокой;
								СтраницаРаздел3_Прил1.П000310003001 = ГодВосстановления.ДатаВводаВЭксплуатациюБУ;
								СтраницаРаздел3_Прил1.П000310004001 = ГодВосстановления.ДатаНачисленияАмортизацииНУ;
								СтраницаРаздел3_Прил1.П000310005001 = ГодВосстановления.СтоимостьОбъектаНедвижимости;
								СтраницаРаздел3_Прил1.П000310006001 = ГодВосстановления.НДСПоОбъектуНедвижимости;
							
							ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
								
								Если НЕ ПустаяСтрока(ГодВосстановления.АдресМестонахождения) Тогда
									
									РоссийскийАдрес = Новый Соответствие;
									РоссийскийАдрес.Вставить("Индекс",          );
									РоссийскийАдрес.Вставить("Регион",          );
									РоссийскийАдрес.Вставить("КодРегиона",      );
									РоссийскийАдрес.Вставить("Район",           );
									РоссийскийАдрес.Вставить("Город",           );
									РоссийскийАдрес.Вставить("НаселенныйПункт", );
									РоссийскийАдрес.Вставить("Улица",           );
									РоссийскийАдрес.Вставить("Дом",             );
									РоссийскийАдрес.Вставить("Корпус",          );
									РоссийскийАдрес.Вставить("Квартира",        );
									
									РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(
										ГодВосстановления.АдресМестонахождения, РоссийскийАдрес);
										
									СтраницаРаздел3_Прил1.П000310002001 = РоссийскийАдрес["Индекс"];
									СтраницаРаздел3_Прил1.П000310002002 = РоссийскийАдрес["КодРегиона"];
									СтраницаРаздел3_Прил1.П000310002003 = РоссийскийАдрес["Район"];
									СтраницаРаздел3_Прил1.П000310002004 = РоссийскийАдрес["Город"];
									СтраницаРаздел3_Прил1.П000310002005 = РоссийскийАдрес["НаселенныйПункт"];
									СтраницаРаздел3_Прил1.П000310002006 = РоссийскийАдрес["Улица"];
									СтраницаРаздел3_Прил1.П000310002007 = РоссийскийАдрес["Дом"];
									СтраницаРаздел3_Прил1.П000310002008 = РоссийскийАдрес["Корпус"];
									СтраницаРаздел3_Прил1.П000310002009 = РоссийскийАдрес["Квартира"];
									
								КонецЕсли;
								
								СтраницаРаздел3_Прил1.П000310003001 = ГодВосстановления.КодОперацииСтрокой;
								СтраницаРаздел3_Прил1.П000310004001 = ГодВосстановления.ДатаВводаВЭксплуатациюБУ;
								СтраницаРаздел3_Прил1.П000310005001 = ГодВосстановления.ДатаНачисленияАмортизацииНУ;
								СтраницаРаздел3_Прил1.П000310006001 = ГодВосстановления.СтоимостьОбъектаНедвижимости;
								СтраницаРаздел3_Прил1.П000310007001 = ГодВосстановления.НДСПоОбъектуНедвижимости;
								
							КонецЕсли;
							
						КонецЕсли;
						
						НомерСтроки = НомерСтроки + 1;
						
						Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
						 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
						 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
							СтраницаРаздел3_Прил1["П000310007001_" + НомерСтроки] = Формат(ГодВосстановления.ГодВосстановления, "ЧГ=0");
							СтраницаРаздел3_Прил1["П000310007002_" + НомерСтроки] = ГодВосстановления.ДатаНачалаИспДляНеоблОпераций;
							СтраницаРаздел3_Прил1["П000310007003_" + НомерСтроки] = ГодВосстановления.ДоляНеоблагаемойВыручки;
							СтраницаРаздел3_Прил1["П000310007004_" + НомерСтроки] = ГодВосстановления.СуммаВосстановленногоНДС;
						ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
							СтраницаРаздел3_Прил1["П000310008001_" + НомерСтроки] = Формат(ГодВосстановления.ГодВосстановления, "ЧГ=0");
							СтраницаРаздел3_Прил1["П000310008002_" + НомерСтроки] = ГодВосстановления.ДатаНачалаИспДляНеоблОпераций;
							СтраницаРаздел3_Прил1["П000310008003_" + НомерСтроки] = ГодВосстановления.ДоляНеоблагаемойВыручки;
							СтраницаРаздел3_Прил1["П000310008004_" + НомерСтроки] = ГодВосстановления.СуммаВосстановленногоНДС;
						КонецЕсли;
						
						#Область РасшифровкаСтрока070
						
						Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
						 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
						 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
							ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
								МакетыРасшифровкиПолей.Получить("П000310007001"));
						ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
							ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
								МакетыРасшифровкиПолей.Получить("П000310008001"));
						КонецЕсли;
						
						ПолеКомпоновкиДанныхОбъектНедвижимости       = Новый ПолеКомпоновкиДанных("ОбъектНедвижимости");
						ПолеКомпоновкиДанныхКодОперацииДляДекларации = Новый ПолеКомпоновкиДанных("КодОперацииДляДекларации");
						ПолеКомпоновкиДанныхГодВосстановленияНДС     = Новый ПолеКомпоновкиДанных("ГодВосстановленияНДС");
						
						ДобавитьЗначениеВОтбор(
							ДополнительныеПараметрыИОтбор.Отбор,
							ПолеКомпоновкиДанныхОбъектНедвижимости,
							ВидСравненияКомпоновкиДанных.Равно,
							ГодВосстановления.ОбъектНедвижимости);
						ДобавитьЗначениеВОтбор(
							ДополнительныеПараметрыИОтбор.Отбор,
							ПолеКомпоновкиДанныхКодОперацииДляДекларации,
							ВидСравненияКомпоновкиДанных.Равно,
							ГодВосстановления.КодОперацииДляДекларации);
						ДобавитьЗначениеВОтбор(
							ДополнительныеПараметрыИОтбор.Отбор,
							ПолеКомпоновкиДанныхГодВосстановленияНДС,
							ВидСравненияКомпоновкиДанных.Равно,
							ГодВосстановления.ГодВосстановления);
							
						Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
						 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
						 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
							
							НаимПоказателя = НСтр("ru='(код строки 070) За истекший календарный год (предыдущие календарные годы)'");
							ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
								ТаблицаРасшифровки,
								"П000310007001_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(),
								НаимПоказателя,
								"",
								"",
								СтраницаРаздел3_Прил1["П000310007001_" + НомерСтроки],
								"Раздел3_Прил1",
								ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
							
							НаимПоказателя = НСтр("ru='Дата начала использования объекта основного средства для операций, указанных
								|в пункте 2 статьи 170 Налогового кодекса Российской Федерации'");
							ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
								ТаблицаРасшифровки,
								"П000310007002_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(),
								НаимПоказателя,
								"",
								"",
								СтраницаРаздел3_Прил1["П000310007002_" + НомерСтроки],
								"Раздел3_Прил1",
								ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
							
							НаимПоказателя = НСтр("ru='Доля отгруженных товаров (работ, услуг), имущественных прав,
								|не облагаемых налогом, в общей стоимости отгрузки (%)'");
							ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
								ТаблицаРасшифровки,
								"П000310007003_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(),
								НаимПоказателя,
								"",
								"",
								СтраницаРаздел3_Прил1["П000310007003_" + НомерСтроки],
								"Раздел3_Прил1",
								ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
							
							НаимПоказателя = НСтр("ru='Сумма налога, подлежащая восстановлению и уплате в бюджет
								|за календарный год (истекшие календарные годы) в рублях'");
							ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
								ТаблицаРасшифровки,
								"П000310007004_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(),
								НаимПоказателя,
								"",
								"",
								СтраницаРаздел3_Прил1["П000310007004_" + НомерСтроки],
								"Раздел3_Прил1",
								ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
								
						ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
								
							НаимПоказателя = НСтр("ru='(код строки 080) За истекший календарный год (предыдущие календарные годы)'");
							ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
								ТаблицаРасшифровки,
								"П000310008001_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(),
								НаимПоказателя,
								"",
								"",
								СтраницаРаздел3_Прил1["П000310008001_" + НомерСтроки],
								"Раздел3_Прил1",
								ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
							
							НаимПоказателя = НСтр("ru='Дата начала использования объекта недвижимости для операций,
								|указанных в пункте 2 статьи 170 Налогового кодекса Российской Федерации'");
							ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
								ТаблицаРасшифровки,
								"П000310008002_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(),
								НаимПоказателя,
								"",
								"",
								СтраницаРаздел3_Прил1["П000310008002_" + НомерСтроки],
								"Раздел3_Прил1",
								ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
							
							НаимПоказателя = НСтр("ru='Доля отгруженных товаров (работ, услуг), имущественных прав,
								|не облагаемых налогом, в общей стоимости отгрузки (%)'");
							ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
								ТаблицаРасшифровки,
								"П000310008003_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(),
								НаимПоказателя,
								"",
								"",
								СтраницаРаздел3_Прил1["П000310008003_" + НомерСтроки],
								"Раздел3_Прил1",
								ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
							
							НаимПоказателя = НСтр("ru='Сумма налога, подлежащая восстановлению и уплате в бюджет за
								|календарный год (истекшие календарные годы) в рублях'");
							ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
								ТаблицаРасшифровки,
								"П000310008004_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(),
								НаимПоказателя,
								"",
								"",
								СтраницаРаздел3_Прил1["П000310008004_" + НомерСтроки],
								"Раздел3_Прил1",
								ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
								
						КонецЕсли;
							
						#КонецОбласти
						
						// Восстановление должно быть отражено в течении 10 лет.
						Если НомерСтроки = 10 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
#КонецОбласти 

#Область Раздел4

	Если Контейнер.Свойство("Раздел4") Тогда
		
		ОчиститьРаздел4(Контейнер, ПараметрыОтчета);
		
		Запрос = Новый Запрос;
		УстановитьОбщиеПараметрыЗапроса(Запрос, ОбщиеПараметрыЗапросов);
		Запрос.УстановитьПараметр("КодОперацииПоУмолчанию", "1011410");
		Запрос.УстановитьПараметр("СобытиеВычет",           Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
		Запрос.УстановитьПараметр("СобытиеНачисление",      Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
		Запрос.Текст = ТекстЗапросаРаздел4_6();
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			НомерСтроки = 0;
			
			Пока Выборка.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				НомерСтрокиБезГруппировки = "_" + Формат(НомерСтроки, "ЧГ=0");
				
				ЗаполнитьСведенияРаздел4(
					Контейнер,
					НомерСтрокиБезГруппировки,
					ПараметрыОтчета,
					Выборка);
				
				#Область РасшифровкаРаздел4
				
				Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
				 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
				 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
					Строка020 = "П0004М1002003";
					Строка030 = "П0004М1003003";
				ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
					Строка020 = "П000400002003";
					Строка030 = "П000400003003";
				КонецЕсли;
				
				// Строка 020
				
				ИдентификаторПоказателя = Строка020 + НомерСтрокиБезГруппировки;
				
				ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
					МакетыРасшифровкиПолей.Получить(Строка020));
				
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхСобытие,
					ВидСравненияКомпоновкиДанных.Равно,
					СобытиеПодтвержденаСтавка0);
					
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхКодВидаОперации,
					ВидСравненияКомпоновкиДанных.Равно,
					Выборка.КодОперации);
					
				НаименованиеПоказателя = НСтр("ru='Налоговая база'");
				
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
					ТаблицаРасшифровки,
					ИдентификаторПоказателя,
					НаименованиеПоказателя,
					"",
					"",
					Выборка.ПодтвержденнаяНалоговаяБаза,
					"Раздел4",
					ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
					
				// Строка 030
					
				ИдентификаторПоказателя = Строка030 + НомерСтрокиБезГруппировки;
					
				ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
					МакетыРасшифровкиПолей.Получить(Строка030));
			
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхСобытие,
					ВидСравненияКомпоновкиДанных.Равно,
					СобытиеПредъявленКВычетуНДС0);
					
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхКодВидаОперации,
					ВидСравненияКомпоновкиДанных.Равно,
					Выборка.КодОперации);
					
				НаимПоказателя = НСтр(
					"ru='Налоговые вычеты по операциям, обоснованность применения налоговой ставки
					|0 процентов по которым документально подтверждена'");
				
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
					ТаблицаРасшифровки,
					ИдентификаторПоказателя,
					НаимПоказателя,
					"",
					"",
					Выборка.ВычетНДС,
					"Раздел4",
					ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
					
				#КонецОбласти
				
			КонецЦикла;
		Иначе
			ПараметрыЗаполнения = ПустаяСтруктураПараметровЗаполненияРазд4_6();
			ЗаполнитьСведенияРаздел4(
				Контейнер,
				"_1",
				ПараметрыОтчета,
				ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти

#Область Раздел6

	Если Контейнер.Свойство("Раздел6") Тогда
		
		ОчиститьРаздел6(Контейнер, ПараметрыОтчета);
		
		Запрос = Новый Запрос;
		УстановитьОбщиеПараметрыЗапроса(Запрос, ОбщиеПараметрыЗапросов);
		Запрос.УстановитьПараметр("КодОперацииПоУмолчанию", "1011410");
		Запрос.УстановитьПараметр("СобытиеВычет",           Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);
		Запрос.УстановитьПараметр("СобытиеНачисление",      Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
		Запрос.Текст = ТекстЗапросаРаздел4_6();
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			НомерСтроки = 0;
			
			Пока Выборка.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				НомерСтрокиБезГруппировки = "_" + Формат(НомерСтроки, "ЧГ=0");
				
				ЗаполнитьСведенияРаздел6(
					Контейнер,
					НомерСтрокиБезГруппировки,
					ПараметрыОтчета,
					Выборка);
				
				#Область РасшифровкаРаздел6
				
				Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
				 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
				 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
					Строка020 = "П0006М1002003";
					Строка030 = "П0006М1003003";
					Строка040 = "П0006М1004003";
				ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
					Строка020 = "П000600002003";
					Строка030 = "П000600003003";
					Строка040 = "П000600004003";
				КонецЕсли;
	
				// Строка 020
				
				ИдентификаторПоказателя = Строка020 + НомерСтрокиБезГруппировки;
				
				ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
					МакетыРасшифровкиПолей.Получить(Строка020));
				
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхСобытие,
					ВидСравненияКомпоновкиДанных.Равно,
					СобытиеНеПодтвержденаСтавка0);
					
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхКодВидаОперации,
					ВидСравненияКомпоновкиДанных.Равно,
					Выборка.КодОперации);
					
				НаименованиеПоказателя = НСтр("ru='Налоговая база'");
				
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
					ТаблицаРасшифровки,
					ИдентификаторПоказателя,
					НаименованиеПоказателя,
					"",
					"",
					Выборка.ПодтвержденнаяНалоговаяБаза,
					"Раздел6",
					ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
				
				// Строка 030
				
				ИдентификаторПоказателя = Строка030 + НомерСтрокиБезГруппировки;
				
				НаименованиеПоказателя = НСтр(
					"ru='Суммы налога, исчисленные по налоговым ставкам, предусмотренным пунктами 2, 3
					|статьи 164 Налогового кодекса Российской Федерации'");
				
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
					ТаблицаРасшифровки,
					ИдентификаторПоказателя,
					НаименованиеПоказателя,
					"",
					"",
					Выборка.НачислениеНДС,
					"Раздел6",
					ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
				
				// Строка 040
				
				ИдентификаторПоказателя = Строка040 + НомерСтрокиБезГруппировки;
					
				ДополнительныеПараметрыИОтбор = НовыйДополнительныеПараметрыРасшифровкиИОтбор(
					МакетыРасшифровкиПолей.Получить(Строка040));
			
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхСобытие,
					ВидСравненияКомпоновкиДанных.Равно,
					СобытиеПредъявленКВычетуНеПодтвержденНДС0);
					
				ДобавитьЗначениеВОтбор(
					ДополнительныеПараметрыИОтбор.Отбор,
					ПолеКомпоновкиДанныхКодВидаОперации,
					ВидСравненияКомпоновкиДанных.Равно,
					Выборка.КодОперации);
					
				НаименованиеПоказателя = НСтр(
					"ru='Сумма налоговых вычетов по операциям по реализации товаров (работ, услуг), 
					|обоснованность применения налоговой ставки 0 процентов по которым документально не подтверждена'");
				
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
					ТаблицаРасшифровки,
					ИдентификаторПоказателя,
					НаименованиеПоказателя,
					"",
					"",
					Выборка.ВычетНДС,
					"Раздел6",
					ДополнительныеПараметрыИОтбор.ДополнительныеПараметры);
				
				#КонецОбласти
				
			КонецЦикла;
		Иначе
			ПараметрыЗаполнения = ПустаяСтруктураПараметровЗаполненияРазд4_6();
			ЗаполнитьСведенияРаздел6(
				Контейнер,
				"_1",
				ПараметрыОтчета,
				ПараметрыЗаполнения);
		КонецЕсли;
	
	КонецЕсли;
	
#КонецОбласти

#Область Раздел7
	
	Если Контейнер.Свойство("Раздел7")
		И ОрганизацияВедетРаздельныйУчетНДС 
		И ЗаполняетсяРаздел7 Тогда
		
		ОчиститьРаздел7(Контейнер, ПараметрыОтчета);
		
		Запрос = Новый Запрос;
		УстановитьОбщиеПараметрыЗапроса(Запрос, ОбщиеПараметрыЗапросов);
		Запрос.Текст = ТекстЗапросаРаздел7();
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			НомерСтроки = 0;
			
			Пока Выборка.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				НомерСтрокиБезГруппировки = "_" + Формат(НомерСтроки, "ЧГ=0");
				
				ЗаполнитьСведенияРаздел7(Контейнер, НомерСтрокиБезГруппировки, Выборка);
				
			КонецЦикла;
			
			
		Иначе
			ПараметрыЗаполнения = ПустаяСтруктураПараметровЗаполненияРаздела7();
			ЗаполнитьСведенияРаздел7(Контейнер, "_1", ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЕсли;

#КонецОбласти

#Область ОбщиеПараметрыМногостраничныхРазделов
	
	Если ПараметрыОтчета.Свойство("ТолькоПоказателиДекларацииНДС") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = Новый Структура();
	ОбщиеПараметры.Вставить("Организация",                         ПараметрыОтчета.Организация);
	ОбщиеПараметры.Вставить("НачалоПериода",                       НачалоПериодаОтчета);
	ОбщиеПараметры.Вставить("КонецПериода",                        ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ОбщиеПараметры.Вставить("ГруппироватьПоКонтрагентам",          Ложь);
	ОбщиеПараметры.Вставить("КонтрагентДляОтбора",                 Справочники.Контрагенты.ПустаяСсылка());
	ОбщиеПараметры.Вставить("ВыводитьПокупателейПоАвансам",        Ложь);
	ОбщиеПараметры.Вставить("ВыводитьПродавцовПоАвансам",          Ложь);
	ОбщиеПараметры.Вставить("ВключатьОбособленныеПодразделения",   Истина);
	ОбщиеПараметры.Вставить("СформироватьОтчетПоСтандартнойФорме", Истина);
	ОбщиеПараметры.Вставить("ОтбиратьПоКонтрагенту",               Ложь);
	ОбщиеПараметры.Вставить("СписокОрганизаций",                   СписокОрганизаций);
	ОбщиеПараметры.Вставить("СсылкаНаДекларацию",                  СсылкаНаДекларацию);
	ОбщиеПараметры.Вставить("ЗаполнениеДокумента",                 Ложь);
	ОбщиеПараметры.Вставить("ЗаполнениеДекларации",                Истина);
	ОбщиеПараметры.Вставить("ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС", 
		УчетНДС.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС());
	ОбщиеПараметры.Вставить("ДатаФормированияДопЛиста");
	ОбщиеПараметры.Вставить("ПравилаЗаполнения",                   ПараметрыОтчета.ПравилаЗаполнения);

	ПроверкаКонтрагентов.ДобавитьОбщиеПараметрыДляПроверкиКонтрагентовВОтчете(ОбщиеПараметры);

#КонецОбласти

#Область РазделыС8По9

	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнены разделы 1-7'"));

	Если Контейнер.Свойство("Раздел8") Тогда
		
		// Сведения из книги покупок об операциях, отражаемых за истекший налоговый период
		
		ПараметрыРаздел8 = ОбщиеПараметры;
		ПараметрыРаздел8.Вставить("НачалоПериода",                      НачалоПериодаОтчета);
		ПараметрыРаздел8.Вставить("КонецПериода",                       ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		ПараметрыРаздел8.Вставить("ФормироватьДополнительныеЛисты",     Ложь);
		ПараметрыРаздел8.Вставить("ДополнительныеЛистыЗаТекущийПериод", Ложь);
		ПараметрыРаздел8.Вставить("ВыводитьТолькоДопЛисты",             Ложь);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		Отчеты.КнигаПокупок.СформироватьОтчет(ПараметрыРаздел8, АдресХранилища);
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 8'"));

	Если Контейнер.Свойство("Раздел8_Прил1")
		И НЕ ПараметрыОтчета.ВидДокумента = 0 Тогда
		
		// Сведения из дополнительных листов книги покупок
		
		ПараметрыРаздел81 = ОбщиеПараметры;
		ПараметрыРаздел81.Вставить("КонецПериода",
			?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи), 
			ПараметрыОтчета.ДатаПодписи, 
			КонецДня(ПараметрыОтчета.ДатаПодписи)));
		ПараметрыРаздел81.Вставить("НачалоПериода",                      НачалоКвартала(НачалоПериодаОтчета));
		ПараметрыРаздел81.Вставить("НачалоНалоговогоПериода",            НачалоКвартала(НачалоПериодаОтчета));
		ПараметрыРаздел81.Вставить("КонецНалоговогоПериода",             ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		ПараметрыРаздел81.Вставить("ФормироватьДополнительныеЛисты",     Истина);
		ПараметрыРаздел81.Вставить("ДополнительныеЛистыЗаТекущийПериод", Истина);
		ПараметрыРаздел81.Вставить("ВыводитьТолькоДопЛисты",             Истина);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		Отчеты.КнигаПокупок.СформироватьОтчет(ПараметрыРаздел81, АдресХранилища);
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 8 прил. 1'"));
		
	Если Контейнер.Свойство("Раздел9") Тогда
		
		// Сведения из книги продаж об операциях, отражаемых за истекший налоговый период
		
		ПараметрыРаздел9 = ОбщиеПараметры;
		ПараметрыРаздел9.Вставить("НачалоПериода",                      НачалоПериодаОтчета);
		ПараметрыРаздел9.Вставить("КонецПериода",                       ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		ПараметрыРаздел9.Вставить("ФормироватьДополнительныеЛисты",     Ложь);
		ПараметрыРаздел9.Вставить("ДополнительныеЛистыЗаТекущийПериод", Ложь);
		ПараметрыРаздел9.Вставить("ВыводитьТолькоДопЛисты",             Ложь);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		Отчеты.КнигаПродаж.СформироватьОтчет(ПараметрыРаздел9, АдресХранилища);
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 9'"));

	Если Контейнер.Свойство("Раздел9_Прил1")
		И НЕ ПараметрыОтчета.ВидДокумента = 0 Тогда
		
		// Сведения из дополнительных листов книги продаж
		
		ПараметрыРаздел91 = ОбщиеПараметры;
		ПараметрыРаздел91.Вставить("КонецПериода",
			?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи), 
			ПараметрыОтчета.ДатаПодписи, 
			КонецДня(ПараметрыОтчета.ДатаПодписи)));
		ПараметрыРаздел91.Вставить("НачалоПериода",                      НачалоКвартала(НачалоПериодаОтчета));
		ПараметрыРаздел91.Вставить("НачалоНалоговогоПериода",            НачалоКвартала(НачалоПериодаОтчета));
		ПараметрыРаздел91.Вставить("КонецНалоговогоПериода",             ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		ПараметрыРаздел91.Вставить("ФормироватьДополнительныеЛисты",     Истина);
		ПараметрыРаздел91.Вставить("ДополнительныеЛистыЗаТекущийПериод", Истина);
		ПараметрыРаздел91.Вставить("ВыводитьТолькоДопЛисты",             Истина);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		Отчеты.КнигаПродаж.СформироватьОтчет(ПараметрыРаздел91, АдресХранилища);
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 9 прил. 1'"));
	
#КонецОбласти

#Область СоблюдениеКонтрольныхСоотношений

	Если ПараметрыОтчета.Свойство("ДанныеПомощникаЗаполнения")
		И ЗначениеЗаполнено(Раздел3Начисления)
		И ЗначениеЗаполнено(Раздел3Вычеты) Тогда
		
		ОбщаяСтавкаНДСЧисло      = УчетНДСПереопределяемый.ПолучитьСтавкуНДС(ОбщаяСтавкаНДС);
		ПониженнаяСтавкаНДСЧисло = УчетНДСПереопределяемый.ПолучитьСтавкуНДС(ПониженнаяСтавкаНДС);
		
		НачисленияПоКнигеПродаж = Раздел3Начисления.СуммаНДССтрока010
			+ Раздел3Начисления.СуммаНДССтрока020
			+ Раздел3Начисления.СуммаНДССтрока030
			+ Раздел3Начисления.СуммаНДССтрока040
			+ Раздел3Начисления.СуммаНДССтрока041
			+ Раздел3Начисления.СуммаНДССтрока042
			+ Раздел3Начисления.П000300007005
			+ Раздел3Начисления.П000300008005;
		
		НачисленияПоРазделу3 = Окр(Окр(Раздел3Начисления.П000300001003)*ОбщаяСтавкаНДСЧисло/100)
			+ Окр(Окр(Раздел3Начисления.П000300002003)*ПониженнаяСтавкаНДСЧисло/100)
			+ Окр(Окр(Раздел3Начисления.П000300003003)*ОбщаяСтавкаНДСЧисло/(ОбщаяСтавкаНДСЧисло + 100))
			+ Окр(Окр(Раздел3Начисления.П000300004003)*ПониженнаяСтавкаНДСЧисло/(ПониженнаяСтавкаНДСЧисло + 100))
			+ Окр(Окр(Раздел3Начисления.П000300004103)*18/100)
			+ Окр(Окр(Раздел3Начисления.П000300004203)*18/118)
			+ Окр(Раздел3Начисления.П000300007005)
			+ Окр(Раздел3Начисления.П000300008005);
			
		Если НачисленияПоРазделу3 < НачисленияПоКнигеПродаж Тогда // Не выполняется КС 1.27
			
			// Приведем налоговую базу по реализации к сумме налога по книге продаж (строки 010 - 042).
			
			Раздел3.П000300001003 = Окр(Окр(Раздел3Начисления.СуммаНДССтрока010)/ОбщаяСтавкаНДСЧисло*100);
			Раздел3.П000300002003 = Окр(Окр(Раздел3Начисления.СуммаНДССтрока020)/ПониженнаяСтавкаНДСЧисло*100);
			
			Раздел3.П000300003003 = Окр(Окр(Раздел3Начисления.СуммаНДССтрока030)/ОбщаяСтавкаНДСЧисло*(ОбщаяСтавкаНДСЧисло + 100));
			Раздел3.П000300004003 = Окр(Окр(Раздел3Начисления.СуммаНДССтрока040)/ПониженнаяСтавкаНДСЧисло*(ПониженнаяСтавкаНДСЧисло + 100));
			
			Раздел3.П000300004103 = Окр(Окр(Раздел3Начисления.СуммаНДССтрока041)/18*100);
			Раздел3.П000300004203 = Окр(Окр(Раздел3Начисления.СуммаНДССтрока042)/18*118);
			
		КонецЕсли;
			
		ВычетыПоКнигеПокупок = Раздел3Вычеты.П000300012003
			+ Раздел3Вычеты.П000300013003
			+ Раздел3Вычеты.П000300017003;
			
		ВычетыПоРазделу3 = Окр(Раздел3Вычеты.П000300012003)
			+ Окр(Раздел3Вычеты.П000300013003)
			+ Окр(Раздел3Вычеты.П000300017003);
		
		Если ВычетыПоРазделу3 > ВычетыПоКнигеПокупок Тогда // Не выполняется КС 1.28
			
			// Округлим в меньшую сторону сумму вычета по строке 120.
			Раздел3.П000300012003 = Цел(Раздел3Вычеты.П000300012003);
			
		КонецЕсли;
	
	КонецЕсли;

#КонецОбласти

#Область РазделыС10По11
	
	Если Контейнер.Свойство("Раздел10")
		И Контейнер.Свойство("Раздел11") Тогда
	
		ПараметрыРаздела = ОбщиеПараметры;
		ПараметрыРаздела.Вставить("НалоговыйПериод", НачалоКвартала(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
		ПараметрыРаздела.Вставить("ЭтоЖурналУчетаСчетовФактур", Истина);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		Отчеты.ЖурналУчетаСчетовФактур.СформироватьОтчет(ПараметрыРаздела, АдресХранилища);
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнены разделы 10 и 11'"));
	
#КонецОбласти

#Область Раздел12
	
	Если Контейнер.Свойство("Раздел12") Тогда
		
		Раздел12 = Контейнер.Раздел12;
		ТаблицаРаздел12 = ПустаяТаблицаРаздел12();

		Запрос = Новый Запрос;
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ОрганизацияНеПлательщикНДС",        ОрганизацияНеПлательщикНДС);
		Запрос.УстановитьПараметр("ОрганизацияОсвобожденаОтУплатыНДС", ОрганизацияОсвобожденаОтУплатыНДС);
		Запрос.УстановитьПараметр("Организация",                       СписокОрганизаций);
		Запрос.УстановитьПараметр("НачалоПериода",                     НачалоДня(НачалоПериодаОтчета));
		Запрос.УстановитьПараметр("КонецПериода",                      КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Номер,
		|	НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) КАК ДатаСведений,
		|	СчетФактураВыданный.Контрагент КАК Ссылка,
		|	СчетФактураВыданный.Контрагент,
		|	СчетФактураВыданный.СуммаНДСДокумента,
		|	СчетФактураВыданный.СуммаНДСДокументаКомиссия,
		|	СчетФактураВыданный.СуммаДокумента,
		|	СчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента,
		|	СчетФактураВыданный.Ссылка КАК СчетФактураРасшифровка,
		|	СчетФактураВыданный.КППКонтрагента,
		|	СчетФактураВыданный.Ссылка КАК СчетФактура
		|ПОМЕСТИТЬ СсылкиНаДаты
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	НЕ СчетФактураВыданный.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент))
		|	И СчетФактураВыданный.СуммаНДСДокумента - СчетФактураВыданный.СуммаНДСДокументаКомиссия > 0
		|	И СчетФактураВыданный.Организация В(&Организация)
		|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И (&ОрганизацияНеПлательщикНДС
		|			ИЛИ &ОрганизацияОсвобожденаОтУплатыНДС)
		|	И СчетФактураВыданный.Проведен";
		
		Запрос.Выполнить();
		
		УчетНДС.РегистрационныеСведенияНаДаты(МенеджерВременныхТаблиц);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Номер КАК НомерСчетаФактуры,
		|	СчетФактураВыданный.ДатаСведений КАК ДатаСчетаФактуры,
		|	ЕСТЬNULL(СведенияОСсылкахНаДаты.ИНН, """") КАК ИННПокупателя,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.КППКонтрагента ПОДОБНО """"
		|			ТОГДА ЕСТЬNULL(СведенияОСсылкахНаДаты.КПП, """")
		|		ИНАЧЕ СчетФактураВыданный.КППКонтрагента
		|	КОНЕЦ КАК КПППокупателя,
		|	ЕСТЬNULL(СведенияОСсылкахНаДаты.Наименование, """") КАК КонтрагентНаименование,
		|	СчетФактураВыданный.СуммаНДСДокумента - СчетФактураВыданный.СуммаНДСДокументаКомиссия КАК СумНалПокуп,
		|	СчетФактураВыданный.СуммаДокумента КАК СтоимТовСНалВс,
		|	СчетФактураВыданный.СуммаДокумента - (СчетФактураВыданный.СуммаНДСДокумента - СчетФактураВыданный.СуммаНДСДокументаКомиссия) КАК СтоимТовБНалВс,
		|	СчетФактураВыданный.ВалютаДокумента.Код КАК ОКВ,
		|	СчетФактураВыданный.СчетФактураРасшифровка КАК СчетФактураРасшифровка,
		|	Валюта.НаименованиеПолное КАК НаименованиеВалюты,
		|	Валюта.Наименование КАК НаименованиеВалютыСокращенное,
		|	СчетФактураВыданный.СчетФактура КАК СчетФактураСсылка,
		|	СчетФактураВыданный.Контрагент КАК Контрагент
		|ИЗ
		|	СсылкиНаДаты КАК СчетФактураВыданный
		|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОСсылкахНаДаты
		|		ПО СчетФактураВыданный.Контрагент = СведенияОСсылкахНаДаты.Ссылка
		|			И СчетФактураВыданный.ДатаСведений = СведенияОСсылкахНаДаты.ДатаСведений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюта
		|		ПО СчетФактураВыданный.ВалютаДокумента = Валюта.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСчетаФактуры,
		|	НомерСчетаФактуры";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			ТаблицаСчетовФактур = Результат.Выгрузить();
			
			МакетРаздел12 = ПолучитьОбщийМакет("СведенияИзСчетовФактур");
			ТабличныйДокументРаздел12 = Новый ТабличныйДокумент;
			
			ОбластьШапка = МакетРаздел12.ПолучитьОбласть("Шапка");
			ТабличныйДокументРаздел12.Вывести(ОбластьШапка);
			
			ОбластьСтрока = МакетРаздел12.ПолучитьОбласть("Строка");
			
			НомерСтроки = 0;
			СчетчикСтрокТекущегоСегмента = 0;
			ИтогПоРазделу12 = 0;
			
			Для Каждого СтрокаВыборки Из ТаблицаСчетовФактур Цикл
				
				НомерСтроки = НомерСтроки + 1;
				СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1;
				
				СтрокаРаздела12 = ТаблицаРаздел12.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРаздела12, СтрокаВыборки);
				
				ДополнительныеСведения = Новый Структура;
				ДополнительныеСведения.Вставить("Контрагент");
				ДополнительныеСведения.Вставить("ПредставлениеКонтрагента");
				ДополнительныеСведения.Вставить("Документ");
				ДополнительныеСведения.Вставить("ПредставлениеДокумента");
				
				Если ЗначениеЗаполнено(СтрокаВыборки.ИННПокупателя)
				 ИЛИ ЗначениеЗаполнено(СтрокаВыборки.КПППокупателя) Тогда
					
					СтруктураСвПок = Новый Структура();
					Если СтрДлина(СокрЛП(СтрокаВыборки.ИННПокупателя)) > 10 Тогда
						СтруктураСвПок.Вставить("ИННФЛ", СтрокаВыборки.ИННПокупателя);
					Иначе
						СтруктураСвПок.Вставить("ИННЮЛ", СтрокаВыборки.ИННПокупателя);
						СтруктураСвПок.Вставить("КПП", СтрокаВыборки.КПППокупателя);
					КонецЕсли;
					СтруктураСвПок.Вставить("Контрагент", СтрокаВыборки.Контрагент);
					СтруктураСвПок.Вставить("КонтрагентНаименование", СтрокаВыборки.КонтрагентНаименование);
					СтрокаРаздела12.СвПокуп = СтруктураСвПок;
					
					ДополнительныеСведения.Контрагент = СтрокаВыборки.Контрагент;
					ДополнительныеСведения.ПредставлениеКонтрагента = СтрокаВыборки.КонтрагентНаименование;
					
				КонецЕсли;
				
				СтрокаРаздела12.НомСчФ = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					СтрокаВыборки.НомерСчетаФактуры, Истина, Истина);
				СтрокаРаздела12.ДатаСчФ  = Формат(СтрокаВыборки.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
				СтрокаРаздела12.НомерПор = НомерСтроки;
				ДополнительныеСведения.ПредставлениеДокумента = СтрШаблон(
					НСтр("ru='Счет-фактура выданный № %1 от %2 на сумму %3 %4'"), 
					СтрокаРаздела12.НомСчФ, 
					СтрокаРаздела12.ДатаСчФ, 
					Формат(СтрокаВыборки.СтоимТовСНалВс, "ЧДЦ=2; ЧН="),
					СтрокаВыборки.НаименованиеВалютыСокращенное);
					
				ДополнительныеСведения.Документ = СтрокаВыборки.СчетФактураСсылка;
				СтрокаРаздела12.ДополнительныеСведения = ДополнительныеСведения;
				
				ОбластьСтрока.Параметры.Ном                    = НомерСтроки;
				ОбластьСтрока.Параметры.НомерДата              = "" + СтрокаРаздела12.НомСчФ + ";" +  СтрокаРаздела12.ДатаСчФ;
				ОбластьСтрока.Параметры.Валюта                 = СокрЛП(СтрокаВыборки.НаименованиеВалюты) + ", " + СтрокаВыборки.ОКВ;
				ОбластьСтрока.Параметры.СуммаДокумента         = СтрокаВыборки.СтоимТовСНалВс;
				ОбластьСтрока.Параметры.СуммаНДС               = СтрокаВыборки.СумНалПокуп;
				ОбластьСтрока.Параметры.СуммаБезНДС            = СтрокаВыборки.СтоимТовБНалВс;
				ОбластьСтрока.Параметры.СчетФактураРасшифровка = СтрокаВыборки.СчетФактураРасшифровка;
				ОбластьСтрока.Параметры.КонтрагентНаименование = СтрокаВыборки.КонтрагентНаименование;
				ОбластьСтрока.Параметры.КонтрагентИННКПП       = "" + СтрокаВыборки.ИННПокупателя 
					+ ?(ЗначениеЗаполнено(СтрокаВыборки.КПППокупателя), "/" + Строка(СтрокаВыборки.КПППокупателя), "");
					
				ОбластьСтрока.Область(1, , ОбластьСтрока.ВысотаТаблицы).Имя = "Строка_" + Формат(НомерСтроки, "ЧГ=");
				ТабличныйДокументРаздел12.Вывести(ОбластьСтрока);
				
				ИтогПоРазделу12 = ИтогПоРазделу12 + СтрокаВыборки.СумНалПокуп;
				
				Если СчетчикСтрокТекущегоСегмента = ОбщиеПараметры.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
					
					// Запишем сегмент
					ПерваяСтрокаСегмента = НомерСтроки - СчетчикСтрокТекущегоСегмента + 1;
					
					РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
						ОбщиеПараметры.СсылкаНаДекларацию,
						"Раздел12",
						ПерваяСтрокаСегмента,
						ТаблицаРаздел12);
					
					РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
						ОбщиеПараметры.СсылкаНаДекларацию,
						"Раздел12",
						ПерваяСтрокаСегмента,
						ТабличныйДокументРаздел12);
					
					// Очистим табличный документ и таблицу
					ТабличныйДокументРаздел12.Очистить();
					ТабличныйДокументРаздел12.Вывести(ОбластьШапка);
					ТаблицаРаздел12.Очистить();
					
					// Обнулим счетчик текущего сегмента
					СчетчикСтрокТекущегоСегмента = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СчетчикСтрокТекущегоСегмента <> 0
				И СчетчикСтрокТекущегоСегмента <> ОбщиеПараметры.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
				
				ПерваяСтрокаСегмента = НомерСтроки - СчетчикСтрокТекущегоСегмента + 1;
					
				РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
					ОбщиеПараметры.СсылкаНаДекларацию,
					"Раздел12",
					ПерваяСтрокаСегмента,
					ТаблицаРаздел12);
				
				РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
					ОбщиеПараметры.СсылкаНаДекларацию,
					"Раздел12",
					ПерваяСтрокаСегмента,
					ТабличныйДокументРаздел12);
					
				КонецЕсли;
				
			Если Контейнер.Свойство("Раздел1") Тогда
				
				Раздел1 = Контейнер.Раздел1;
				
				ЗначенияДляЗаполнения = Новый Структура("П000100003003");
				ЗначенияДляЗаполнения.П000100003003 = ИтогПоРазделу12;
				ЗаполнитьЗначенияСвойств(Раздел1, ЗначенияДляЗаполнения);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 12'"));
		
#КонецОбласти

	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);

КонецПроцедуры

Процедура УстановитьОбщиеПараметрыЗапроса(Запрос, ОбщиеПараметры)
	
	Для Каждого Параметр Из ОбщиеПараметры Цикл
		Запрос.Параметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Запрос.Параметры, ОбщиеПараметры);
	
КонецПроцедуры

Функция ТекстЗапросаОбщиеДанные()
	
	Возврат 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель КАК Покупатель
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажОборотыДетальные
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И НЕ ЗаписьДополнительногоЛиста) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Событие,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериодаУчитываемыхКорректировок,
	|			,
	|			Организация В (&Организация)
	|				И ВЫБОР
	|					КОГДА &ВесьОборотЗаПериод
	|						ТОГДА ЗаписьДополнительногоЛиста
	|					КОГДА &СУчетомКорректировок
	|						ТОГДА ЗаписьДополнительногоЛиста
	|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Событие,
	|	ВидЦенности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОборотыДетальные.Событие КАК Событие,
	|	НДСЗаписиКнигиПродажОборотыДетальные.СтавкаНДС КАК СтавкаНДС,
	|	НДСЗаписиКнигиПродажОборотыДетальные.ВидЦенности КАК ВидЦенности,
	|	СУММА(НДСЗаписиКнигиПродажОборотыДетальные.СуммаБезНДСОборот) КАК СуммаБезНДСОборот,
	|	СУММА(НДСЗаписиКнигиПродажОборотыДетальные.НДСОборот) КАК НДСОборот
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажОбороты
	|ИЗ
	|	НДСЗаписиКнигиПродажОборотыДетальные КАК НДСЗаписиКнигиПродажОборотыДетальные
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОборотыДетальные.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОборотыДетальные.Событие,
	|	НДСЗаписиКнигиПродажОборотыДетальные.ВидЦенности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупокОбороты.Событие,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|ПОМЕСТИТЬ НДСЗаписиКнигиПокупокОбороты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И НЕ ЗаписьДополнительногоЛиста) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупокОбороты.Событие,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериодаУчитываемыхКорректировок,
	|			,
	|			Организация В (&Организация)
	|				И ВЫБОР
	|					КОГДА &ВесьОборотЗаПериод
	|						ТОГДА ЗаписьДополнительногоЛиста
	|					КОГДА &СУчетомКорректировок
	|						ТОГДА ЗаписьДополнительногоЛиста
	|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты";

КонецФункции

Функция ТекстЗапросаРаздел2()
	
	Возврат
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Покупатель КАК Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажРаздел2
	|ИЗ
	|	НДСЗаписиКнигиПродажОборотыДетальные КАК НДСЗаписиКнигиПродажОбороты
	|ГДЕ
	|	(НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	|			ИЛИ НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
	|			ИЛИ НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализацияРаздел2))
	|	И НДСЗаписиКнигиПродажОбороты.ВидЦенности В(&ВидыЦенностейНА)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦенности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ Договоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация В(&Организация)
	|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	|	И ДоговорыКонтрагентов.УчетАгентскогоНДС
	|	И ДоговорыКонтрагентов.ВидАгентскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.Нерезидент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйСубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйСубконто.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ НомераПроводок
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Договоры КАК Договоры
	|		ПО (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры))
	|			И ХозрасчетныйСубконто.Значение = Договоры.Договор
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ХозрасчетныйСубконто.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйСубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйСубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйСубконто.Вид,
	|	ХозрасчетныйСубконто.Значение
	|ПОМЕСТИТЬ ЗначенияСубконто
	|ИЗ
	|	НомераПроводок КАК НомераПроводок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО НомераПроводок.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И НомераПроводок.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ХозрасчетныйСубконто.Вид В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Значение КАК Комитент,
	|	ДокументыРасчетов.Значение КАК СчетФактура,
	|	Хозрасчетный.Сумма КАК СуммаОборот
	|ПОМЕСТИТЬ ВТХозрасчетныйОборотыДтКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияСубконто КАК Договоры
	|		ПО Хозрасчетный.Регистратор = Договоры.Регистратор
	|			И Хозрасчетный.НомерСтроки = Договоры.НомерСтроки
	|			И (Договоры.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияСубконто КАК Контрагенты
	|		ПО Хозрасчетный.Регистратор = Контрагенты.Регистратор
	|			И Хозрасчетный.НомерСтроки = Контрагенты.НомерСтроки
	|			И (Контрагенты.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияСубконто КАК ДокументыРасчетов
	|		ПО Хозрасчетный.Регистратор = ДокументыРасчетов.Регистратор
	|			И Хозрасчетный.НомерСтроки = ДокументыРасчетов.НомерСтроки
	|			И (ДокументыРасчетов.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|ГДЕ
	|	Хозрасчетный.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента)
	|	И Хозрасчетный.Организация В(&Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Комитент,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&КППИностраннойОрганизации КАК П000200001003,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК П000200002003,
	|	Контрагент.ИНН КАК П000200003003,
	|	Контрагент.ЮридическоеФизическоеЛицо КАК ЮрФизЛицо,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011703)
	|			ТОГДА ""1011703""
	|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011712)
	|			ТОГДА ""1011712""
	|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011713)
	|			ТОГДА ""1011713""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК П000200007003,
	|	ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажРаздел2.НДСОборот), 0) КАК П000200006003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеРеализацияРаздел2)
	|					ТОГДА НДСЗаписиКнигиПродажРаздел2.НДСОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200008003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеПолученАванс)
	|					ТОГДА НДСЗаписиКнигиПродажРаздел2.НДСОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200009003,
	|	Контрагент.Ссылка КАК П000200002003_Расшифровка
	|ИЗ
	|	НДСЗаписиКнигиПродажРаздел2 КАК НДСЗаписиКнигиПродажРаздел2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагент
	|		ПО НДСЗаписиКнигиПродажРаздел2.Покупатель = Контрагент.Ссылка
	|ГДЕ
	|	НДСЗаписиКнигиПродажРаздел2.ВидЦенности <> ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажРаздел2.Покупатель,
	|	Контрагент.ИНН,
	|	Контрагент.ЮридическоеФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011703)
	|			ТОГДА ""1011703""
	|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011712)
	|			ТОГДА ""1011712""
	|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011713)
	|			ТОГДА ""1011713""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250)
	|	КОНЕЦ,
	|	Контрагент.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&КППИностраннойОрганизации,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ЕСТЬNULL(Контрагент.НаименованиеПолное, """"), 1, 250) = """"
	|			ТОГДА Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ЕСТЬNULL(Контрагент.НаименованиеПолное, """"), 1, 250)
	|	КОНЕЦ,
	|	ЕСТЬNULL(Контрагент.ИНН, """"),
	|	ЕСТЬNULL(Контрагент.ЮридическоеФизическоеЛицо, ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка)),
	|	""1011707"",
	|	ЕСТЬNULL(СУММА(ХозрасчетныйОбороты.СуммаОборот), 0),
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеНачисленНДС)
	|						ИЛИ НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеРеализацияРаздел2)
	|					ТОГДА ХозрасчетныйОбороты.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеПолученАванс)
	|					ТОГДА ХозрасчетныйОбороты.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	ЕСТЬNULL(Контрагент.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|ИЗ
	|	НДСЗаписиКнигиПродажРаздел2 КАК НДСЗаписиКнигиПродажРаздел2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХозрасчетныйОборотыДтКт КАК ХозрасчетныйОбороты
	|		ПО НДСЗаписиКнигиПродажРаздел2.СчетФактура = ХозрасчетныйОбороты.СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагент
	|		ПО (ХозрасчетныйОбороты.Комитент = Контрагент.Ссылка)
	|ГДЕ
	|	НДСЗаписиКнигиПродажРаздел2.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	|	И ХозрасчетныйОбороты.СуммаОборот <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Комитент,
	|	Контрагент.ИНН,
	|	Контрагент.ЮридическоеФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250)
	|	КОНЕЦ,
	|	Контрагент.Ссылка,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ЕСТЬNULL(Контрагент.НаименованиеПолное, """"), 1, 250) = """"
	|			ТОГДА Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ЕСТЬNULL(Контрагент.НаименованиеПолное, """"), 1, 250)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000200002003";

КонецФункции

Функция ТекстЗапросаРаздел2_1()
	
	Возврат 
	"ВЫБРАТЬ
	|	СУММА(ОбратноеИсчислениеНДС.СуммаКУплате) КАК СуммаКУплате
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(Начисления.НДСОборот) КАК СуммаКУплате
	|	ИЗ
	|		НДСЗаписиКнигиПродажОбороты КАК Начисления
	|	ГДЕ
	|		Начисления.ВидЦенности В(&ВидыЦенностейОбратноеИсчислениеНДС)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-СУММА(Вычеты.НДСОборот)
	|	ИЗ
	|		НДСЗаписиКнигиПокупокОбороты КАК Вычеты
	|	ГДЕ
	|		Вычеты.ВидЦенности В(&ВидыЦенностейОбратноеИсчислениеНДС)) КАК ОбратноеИсчислениеНДС";
	
КонецФункции

Функция ТекстЗапросаРаздел3Начисления()
	
	Возврат
	"ВЫБРАТЬ
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА НДСЗаписиКнигиПродажОборотыДетальные.Событие В (&СобытиеПолученАванс)
	|						И НДСЗаписиКнигиПродажОборотыДетальные.ВидЦенности В (&ВидыЦенностейСтр070)
	|						И НДСЗаписиКнигиПродажОборотыДетальные.СуммаБезНДСОборот <> 0
	|					ТОГДА НДСЗаписиКнигиПродажОборотыДетальные.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОборотыДетальные.НДСОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК П000300007003
	|ПОМЕСТИТЬ НалоговаяБазаПоПредоплате
	|ИЗ
	|	НДСЗаписиКнигиПродажОборотыДетальные КАК НДСЗаписиКнигиПродажОборотыДетальные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&ОбщаяСтавкаНДС)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300001003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300002003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&ОбщаяРасчетнаяСтавкаНДС)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&ОбщаяРасчетнаяСтавкаНДС, &ОбщаяСтавкаНДС)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300003003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300004003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА &ПрименяетсяСтавка20
	|							И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300004103,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА &ПрименяетсяСтавка20
	|							И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					КОГДА &ПрименяетсяСтавка20
	|							И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118, &СтавкаНДС18)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300004203,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&ОбщаяСтавкаНДС)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК СуммаНДССтрока010,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК СуммаНДССтрока020,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&ОбщаяРасчетнаяСтавкаНДС)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&ОбщаяРасчетнаяСтавкаНДС)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК СуммаНДССтрока030,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК СуммаНДССтрока040,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА &ПрименяетсяСтавка20
	|							И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК СуммаНДССтрока041,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА &ПрименяетсяСтавка20
	|							И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					КОГДА &ПрименяетсяСтавка20
	|							И НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК СуммаНДССтрока042,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр060)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300006003,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА &ПрименяетсяСтавка20
	|				ТОГДА МАКСИМУМ(НалоговаяБазаПоПредоплате.П000300007003)
	|			ИНАЧЕ СУММА(ВЫРАЗИТЬ(ВЫБОР
	|							КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
	|									И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
	|								ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|							ИНАЧЕ 0
	|						КОНЕЦ КАК ЧИСЛО(15, 2)))
	|		КОНЕЦ, 0) КАК П000300007003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300007005,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300008005,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр090)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300009005
	|ИЗ
	|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты,
	|	НалоговаяБазаПоПредоплате КАК НалоговаяБазаПоПредоплате";

КонецФункции

Функция ТекстЗапросаРаздел3Вычеты()
	
	Возврат 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр120)
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300012003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр130)
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300013003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр140)
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300014003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр150)
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300015003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр160)
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300016003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр170)
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300017003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр180)
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300018003
	|ИЗ
	|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты";

КонецФункции

Функция ТекстЗапросаРаздел3Приложение1()
	
	Возврат 
	"ВЫБРАТЬ
	|	Реквизиты.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(Реквизиты.ОбъектНедвижимости.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА Реквизиты.ОбъектНедвижимости.Наименование
	|		ИНАЧЕ ПОДСТРОКА(Реквизиты.ОбъектНедвижимости.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК ОбъектНаименованиеПолное,
	|	ЕСТЬNULL(ПОДСТРОКА(КонтактнаяИнформация.ЗначенияПолей, 1, 1000), """") КАК АдресМестонахождения,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение)
	|			ТОГДА ""1011803""
	|		КОГДА СчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные)
	|			ТОГДА ""1011801""
	|		КОГДА СчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные)
	|			ТОГДА ""1011802""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодОперацииСтрокой,
	|	Реквизиты.ИспользуетсяДляОперацийНеОблагаемыхНДС,
	|	Реквизиты.ДатаВводаВЭксплуатациюБУ КАК ДатаВводаВЭксплуатациюБУ,
	|	Реквизиты.ДатаНачисленияАмортизацииНУ КАК ДатаНачисленияАмортизацииНУ,
	|	Реквизиты.СтоимостьОбъектаНедвижимости КАК СтоимостьОбъектаНедвижимости,
	|	ЕСТЬNULL(СУММА(СчетаФактуры.НДС), 0) КАК НДСПоОбъектуНедвижимости,
	|	ГОД(Реквизиты.Ссылка.Дата) КАК ГодВосстановления,
	|	Реквизиты.ДатаНачалаИспользованияДляОпераций КАК ДатаНачалаИспДляНеоблОпераций,
	|	Реквизиты.ДоляВыручкиНеОблагаемаяНДС КАК ДоляНеоблагаемойВыручки,
	|	ЕСТЬNULL(СУММА(СчетаФактуры.НДСВосстановлен), 0) КАК СуммаВосстановленногоНДС,
	|	СчетаФактуры.КодОперацииДляДекларации
	|ИЗ
	|	Документ.ВосстановлениеНДСПоОбъектамНедвижимости.ОбъектыНедвижимости КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВосстановлениеНДСПоОбъектамНедвижимости.СчетаФактуры КАК СчетаФактуры
	|		ПО Реквизиты.Ссылка = СчетаФактуры.Ссылка
	|			И Реквизиты.КлючСтроки = СчетаФактуры.КлючСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО Реквизиты.ОбъектНедвижимости = КонтактнаяИнформация.Ссылка
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестонахожденияОсновныеСредства))
	|ГДЕ
	|	Реквизиты.Ссылка.Организация В(&Организация)
	|	И Реквизиты.Ссылка.Дата <= &КонецПериода
	|	И Реквизиты.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.ОбъектНедвижимости,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение)
	|			ТОГДА ""1011803""
	|		КОГДА СчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные)
	|			ТОГДА ""1011801""
	|		КОГДА СчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные)
	|			ТОГДА ""1011802""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	Реквизиты.ИспользуетсяДляОперацийНеОблагаемыхНДС,
	|	Реквизиты.ДатаВводаВЭксплуатациюБУ,
	|	Реквизиты.ДатаНачисленияАмортизацииНУ,
	|	Реквизиты.ДатаНачалаИспользованияДляОпераций,
	|	ГОД(Реквизиты.Ссылка.Дата),
	|	Реквизиты.СтоимостьОбъектаНедвижимости,
	|	Реквизиты.ДоляВыручкиНеОблагаемаяНДС,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(Реквизиты.ОбъектНедвижимости.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА Реквизиты.ОбъектНедвижимости.Наименование
	|		ИНАЧЕ ПОДСТРОКА(Реквизиты.ОбъектНедвижимости.НаименованиеПолное, 1, 250)
	|	КОНЕЦ,
	|	СчетаФактуры.КодОперацииДляДекларации,
	|	ЕСТЬNULL(ПОДСТРОКА(КонтактнаяИнформация.ЗначенияПолей, 1, 1000), """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГодВосстановления
	|ИТОГИ
	|	СУММА(СтоимостьОбъектаНедвижимости),
	|	СУММА(НДСПоОбъектуНедвижимости),
	|	СУММА(ГодВосстановления),
	|	СУММА(ДоляНеоблагаемойВыручки),
	|	СУММА(СуммаВосстановленногоНДС)
	|ПО
	|	ОбъектНедвижимости,
	|	КодОперацииСтрокой";

КонецФункции

Функция ТекстЗапросаРаздел4_6()
	
	Возврат 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС) КАК ПодтвержденнаяНалоговаяБаза,
	|	СУММА(НДСЗаписиКнигиПродаж.НДС) КАК НДС
	|ПОМЕСТИТЬ НалоговаяБаза
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.Событие = &СобытиеНачисление
	|	И НДСЗаписиКнигиПродаж.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.СчетФактура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС),
	|	СУММА(НДСЗаписиКнигиПродаж.НДС)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	&СУчетомКорректировок
	|	И НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериодаУчитываемыхКорректировок
	|	И НДСЗаписиКнигиПродаж.Событие = &СобытиеНачисление
	|	И НДСЗаписиКнигиПродаж.Активность
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.СчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НалоговаяБаза.СчетФактура КАК СчетФактура,
	|	ПодтверждениеНулевойСтавки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ЕСТЬNULL(РеализацияОтгруженныхТоваров.ДокументОтгрузки, ПодтверждениеНулевойСтавки.ДокументОтгрузки) КАК ОснованиеТаможеннойДекларации
	|ПОМЕСТИТЬ ДокументыОтгрузки
	|ИЗ
	|	НалоговаяБаза КАК НалоговаяБаза
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодтверждениеНулевойСтавкиНДС.Состав КАК ПодтверждениеНулевойСтавки
	|		ПО НалоговаяБаза.СчетФактура = ПодтверждениеНулевойСтавки.СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
	|		ПО (ПодтверждениеНулевойСтавки.ДокументОтгрузки = РеализацияОтгруженныхТоваров.Ссылка)
	|			И (НЕ РеализацияОтгруженныхТоваров.ПометкаУдаления)
	|ГДЕ
	|	НалоговаяБаза.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|	И НЕ ПодтверждениеНулевойСтавки.Ссылка.ПометкаУдаления
	|	И ПодтверждениеНулевойСтавки.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НеПодтвержденаСтавка0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговаяБаза.СчетФактура,
	|	НалоговаяБаза.СчетФактура,
	|	РеализацияОтгруженныхТоваров.ДокументОтгрузки
	|ИЗ
	|	НалоговаяБаза КАК НалоговаяБаза
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
	|		ПО НалоговаяБаза.СчетФактура = РеализацияОтгруженныхТоваров.Ссылка
	|			И (НЕ РеализацияОтгруженныхТоваров.ПометкаУдаления)
	|ГДЕ
	|	НалоговаяБаза.СчетФактура ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НалоговаяБаза.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДокументыОтгрузки.ДокументОтгрузки, НалоговаяБаза.СчетФактура) КАК ДокументОтгрузки,
	|	ЕСТЬNULL(ДокументыОтгрузки.ОснованиеТаможеннойДекларации, НалоговаяБаза.СчетФактура) КАК ОснованиеТаможеннойДекларации,
	|	НалоговаяБаза.ПодтвержденнаяНалоговаяБаза КАК ПодтвержденнаяНалоговаяБаза,
	|	НалоговаяБаза.НДС КАК НДС
	|ПОМЕСТИТЬ НалоговаяБазаПоДокументамОтгрузки
	|ИЗ
	|	НалоговаяБаза КАК НалоговаяБаза
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыОтгрузки КАК ДокументыОтгрузки
	|		ПО НалоговаяБаза.СчетФактура = ДокументыОтгрузки.СчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЕСТЬNULL(ДокументыОтгрузки.ДокументОтгрузки, НалоговаяБаза.СчетФактура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалоговаяБаза.ДокументОтгрузки КАК ДокументОтгрузки,
	|	НалоговаяБаза.ПодтвержденнаяНалоговаяБаза КАК ПодтвержденнаяНалоговаяБаза,
	|	НалоговаяБаза.НДС КАК НачислениеНДС,
	|	0 КАК ВычетНДС
	|ПОМЕСТИТЬ НалоговаяБазаИВычет
	|ИЗ
	|	НалоговаяБазаПоДокументамОтгрузки КАК НалоговаяБаза
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупок.ДокументОтгрузки,
	|	0,
	|	0,
	|	НДСЗаписиКнигиПокупок.НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Организация В(&Организация)
	|	И НЕ НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПокупок.Событие = &СобытиеВычет
	|	И НДСЗаписиКнигиПокупок.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупок.ДокументОтгрузки,
	|	0,
	|	0,
	|	НДСЗаписиКнигиПокупок.НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	&СУчетомКорректировок
	|	И НДСЗаписиКнигиПокупок.Организация В(&Организация)
	|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериодаУчитываемыхКорректировок
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПокупок.Событие = &СобытиеВычет
	|	И НДСЗаписиКнигиПокупок.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НалоговаяБазаПоДокументамОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТаможенныеДекларацииПоЭкспорту.Организация КАК Организация,
	|	ТаможенныеДекларацииПоЭкспорту.КодОперации КАК КодОперации
	|ПОМЕСТИТЬ СведенияТаможенныхДекларацийЭкспорт
	|ИЗ
	|	НалоговаяБазаПоДокументамОтгрузки КАК НалоговаяБазаПоДокументамОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияТаможенныхДекларацийЭкспорт КАК ТаможенныеДекларацииПоЭкспорту
	|		ПО НалоговаяБазаПоДокументамОтгрузки.ОснованиеТаможеннойДекларации = ТаможенныеДекларацииПоЭкспорту.ДокументОтгрузки
	|ГДЕ
	|	ТаможенныеДекларацииПоЭкспорту.Организация В(&Организация)
	|	И НЕ ТаможенныеДекларацииПоЭкспорту.КодОперации ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НалоговаяБазаПоДокументамОтгрузки.ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалоговаяБазаИВычет.ПодтвержденнаяНалоговаяБаза КАК ПодтвержденнаяНалоговаяБаза,
	|	НалоговаяБазаИВычет.НачислениеНДС КАК НачислениеНДС,
	|	НалоговаяБазаИВычет.ВычетНДС КАК ВычетНДС,
	|	ЕСТЬNULL(СведенияТаможенныхДекларацийЭкспорт.КодОперации, &КодОперацииПоУмолчанию) КАК КодОперации
	|ПОМЕСТИТЬ НалоговаяБазаИВычетПоКодамОперацийДетальныеЗаписи
	|ИЗ
	|	НалоговаяБазаИВычет КАК НалоговаяБазаИВычет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияТаможенныхДекларацийЭкспорт КАК СведенияТаможенныхДекларацийЭкспорт
	|		ПО НалоговаяБазаИВычет.ДокументОтгрузки = СведенияТаможенныхДекларацийЭкспорт.ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(НалоговаяБазаИВычетПоКодамОперацийДетальныеЗаписи.ПодтвержденнаяНалоговаяБаза) КАК ПодтвержденнаяНалоговаяБаза,
	|	СУММА(НалоговаяБазаИВычетПоКодамОперацийДетальныеЗаписи.НачислениеНДС) КАК НачислениеНДС,
	|	СУММА(НалоговаяБазаИВычетПоКодамОперацийДетальныеЗаписи.ВычетНДС) КАК ВычетНДС,
	|	НалоговаяБазаИВычетПоКодамОперацийДетальныеЗаписи.КодОперации КАК КодОперации
	|ИЗ
	|	НалоговаяБазаИВычетПоКодамОперацийДетальныеЗаписи КАК НалоговаяБазаИВычетПоКодамОперацийДетальныеЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговаяБазаИВычетПоКодамОперацийДетальныеЗаписи.КодОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НалоговаяБаза
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НалоговаяБазаПоДокументамОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НалоговаяБазаИВычет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СведенияТаможенныхДекларацийЭкспорт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НалоговаяБазаИВычетПоКодамОперацийДетальныеЗаписи";

КонецФункции

Процедура ОчиститьРаздел(Раздел)
	
	Если ТипЗнч(Раздел) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	КлючиДляУдаления = Новый СписокЗначений;
	
	Для Каждого ЭлементРаздела Из Раздел Цикл
		Если СтрНайти(ЭлементРаздела.Ключ, "М2")
		 ИЛИ СтрНайти(ЭлементРаздела.Ключ, "М3") Тогда
			Продолжить;
		ИначеЕсли СтрНайти(ЭлементРаздела.Ключ, "_") Тогда
			// Удаление ключа
			КлючиДляУдаления.Добавить(ЭлементРаздела.Ключ);
		Иначе
			// Очистка значения
			Если ТипЗнч(ЭлементРаздела.Значение) = Тип("Строка") Тогда
				Раздел.Вставить(ЭлементРаздела.Ключ, "");
			ИначеЕсли ТипЗнч(ЭлементРаздела.Значение) = Тип("Число") Тогда
				Раздел.Вставить(ЭлементРаздела.Ключ, 0);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючДляУдаления Из КлючиДляУдаления Цикл
		Раздел.Удалить(КлючДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьРаздел4(Контейнер, ПараметрыОтчета)
	
	ОчиститьРаздел(Контейнер.Раздел4);
	
	Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
	 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
	 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
		Контейнер.Раздел4_ДанныеДопСтрок010_050.Очистить();
	ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
		Контейнер.Раздел4_ДанныеДопСтрок.Очистить();
	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьРаздел6(Контейнер, ПараметрыОтчета)
	
	ОчиститьРаздел(Контейнер.Раздел6);
	
	Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
	 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
	 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
		Контейнер.Раздел6_ДанныеДопСтрок010_040.Очистить();
	ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
		Контейнер.Раздел6_ДанныеДопСтрок.Очистить();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСведенияРаздел4(Контейнер, НомерСтрокиБезГруппировки, ПараметрыОтчета, ДанныеЗаполнения)
	
	Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
	 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
	 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
		Строка010 = "П0004М1001003";
		Строка020 = "П0004М1002003";
		Строка030 = "П0004М1003003";
		Строка040 = "П0004М1004003";
		Строка050 = "П0004М1005003";
		СтрокаРаздел4 = Контейнер.Раздел4_ДанныеДопСтрок010_050.Добавить();
	ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
		Строка010 = "П000400001003";
		Строка020 = "П000400002003";
		Строка030 = "П000400003003";
		Строка040 = "П000400004003";
		Строка050 = "П000400005003";
		СтрокаРаздел4 = Контейнер.Раздел4_ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	ИмяКлюча = Строка010 + НомерСтрокиБезГруппировки;
	Контейнер.Раздел4.Вставить(ИмяКлюча, ДанныеЗаполнения.КодОперации);
	
	ИмяКлюча = Строка020 + НомерСтрокиБезГруппировки;
	Контейнер.Раздел4.Вставить(ИмяКлюча, ДанныеЗаполнения.ПодтвержденнаяНалоговаяБаза);
	
	ИмяКлюча = Строка030 + НомерСтрокиБезГруппировки;
	Контейнер.Раздел4.Вставить(ИмяКлюча, ДанныеЗаполнения.ВычетНДС);
	
	ИмяКлюча = Строка040 + НомерСтрокиБезГруппировки;
	Контейнер.Раздел4.Вставить(ИмяКлюча, 0);
	
	ИмяКлюча = Строка050 + НомерСтрокиБезГруппировки;
	Контейнер.Раздел4.Вставить(ИмяКлюча, 0);
	
	СтрокаРаздел4[Строка010] = ДанныеЗаполнения.КодОперации;
	СтрокаРаздел4[Строка020] = ДанныеЗаполнения.ПодтвержденнаяНалоговаяБаза;
	СтрокаРаздел4[Строка030] = ДанныеЗаполнения.ВычетНДС;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияРаздел6(Контейнер, НомерСтрокиБезГруппировки, ПараметрыОтчета, ДанныеЗаполнения)
	
	Если ПараметрыОтчета.ПравилаЗаполнения = "2020Кв4" 
	 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2019Кв1"
	 ИЛИ ПараметрыОтчета.ПравилаЗаполнения = "2017Кв1" Тогда
		Строка010 = "П0006М1001003";
		Строка020 = "П0006М1002003";
		Строка030 = "П0006М1003003";
		Строка040 = "П0006М1004003";
		СтрокаРаздел6 = Контейнер.Раздел6_ДанныеДопСтрок010_040.Добавить();
	ИначеЕсли ПараметрыОтчета.ПравилаЗаполнения = "2015Кв1" Тогда
		Строка010 = "П000600001003";
		Строка020 = "П000600002003";
		Строка030 = "П000600003003";
		Строка040 = "П000600004003";
		СтрокаРаздел6 = Контейнер.Раздел6_ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	ИмяКлюча = Строка010 + НомерСтрокиБезГруппировки;
	Контейнер.Раздел6.Вставить(ИмяКлюча, ДанныеЗаполнения.КодОперации);
	
	ИмяКлюча = Строка020 + НомерСтрокиБезГруппировки;
	Контейнер.Раздел6.Вставить(ИмяКлюча, ДанныеЗаполнения.ПодтвержденнаяНалоговаяБаза);
	
	ИмяКлюча = Строка030 + НомерСтрокиБезГруппировки;
	Контейнер.Раздел6.Вставить(ИмяКлюча, ДанныеЗаполнения.НачислениеНДС);
	
	ИмяКлюча = Строка040 + НомерСтрокиБезГруппировки;
	Контейнер.Раздел6.Вставить(ИмяКлюча, ДанныеЗаполнения.ВычетНДС);
	
	СтрокаРаздел6[Строка010] = ДанныеЗаполнения.КодОперации;
	СтрокаРаздел6[Строка020] = ДанныеЗаполнения.ПодтвержденнаяНалоговаяБаза;
	СтрокаРаздел6[Строка030] = ДанныеЗаполнения.НачислениеНДС;
	СтрокаРаздел6[Строка040] = ДанныеЗаполнения.ВычетНДС;
	
КонецПроцедуры

Функция ПустаяСтруктураПараметровЗаполненияРазд4_6()
	
	СтруктураЗаполнения = Новый Структура();
	СтруктураЗаполнения.Вставить("КодОперации", "");
	СтруктураЗаполнения.Вставить("ПодтвержденнаяНалоговаяБаза", 0);
	СтруктураЗаполнения.Вставить("ВычетНДС", 0);
	СтруктураЗаполнения.Вставить("НачислениеНДС", 0);
	Возврат СтруктураЗаполнения;
	
КонецФункции

Функция ПустаяСтруктураПараметровЗаполненияРаздела7()
	
	СтруктураЗаполнения = Новый Структура();
	СтруктураЗаполнения.Вставить("КодОперации", "");
	СтруктураЗаполнения.Вставить("СуммаРеализации", 0);
	СтруктураЗаполнения.Вставить("СуммаПриобретения", 0);
	СтруктураЗаполнения.Вставить("СуммаНДС", 0);
	Возврат СтруктураЗаполнения;
	
КонецФункции

Функция ТекстЗапросаРаздел7()
	
	Возврат	
	"ВЫБРАТЬ
	|	СУММА(НДСЗаписиРаздела7Декларации.СуммаРеализации) КАК СуммаРеализации,
	|	СУММА(НДСЗаписиРаздела7Декларации.СуммаПриобретения) КАК СуммаПриобретения,
	|	СУММА(НДСЗаписиРаздела7Декларации.СуммаНДС) КАК СуммаНДС,
	|	КодыОперацийРаздела7ДекларацииПоНДС.Код КАК КодОперации
	|ИЗ
	|	РегистрНакопления.НДСЗаписиРаздела7Декларации КАК НДСЗаписиРаздела7Декларации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КодыОперацийРаздела7ДекларацииПоНДС КАК КодыОперацийРаздела7ДекларацииПоНДС
	|		ПО НДСЗаписиРаздела7Декларации.КодОперации = КодыОперацийРаздела7ДекларацииПоНДС.Ссылка
	|ГДЕ
	|	НДСЗаписиРаздела7Декларации.Организация В(&Организация)
	|	И НДСЗаписиРаздела7Декларации.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	КодыОперацийРаздела7ДекларацииПоНДС.Код";
	
КонецФункции

Процедура ОчиститьРаздел7(Контейнер, ПараметрыОтчета)
	
	ОчиститьРаздел(Контейнер.Раздел7);
	
	Контейнер.Раздел7_ДанныеДопСтрок.Очистить();
	
КонецПроцедуры

Процедура ЗаполнитьСведенияРаздел7(Контейнер, НомерСтрокиБезГруппировки, ДанныеЗаполнения)
	
	СтрокаКодОперации           = "П000700000101";
	СтрокаСтоимостьРеализации   = "П000700000102";
	СтрокаСтоимостьПриобретения = "П000700000103";
	СтрокаНДС                   = "П000700000104";
	СтрокаРаздел7 = Контейнер.Раздел7_ДанныеДопСтрок.Добавить();
	
	ИмяКлюча = СтрокаКодОперации + НомерСтрокиБезГруппировки;
	Контейнер.Раздел7.Вставить(ИмяКлюча, ДанныеЗаполнения.КодОперации);
	
	ИмяКлюча = СтрокаСтоимостьРеализации + НомерСтрокиБезГруппировки;
	Контейнер.Раздел7.Вставить(ИмяКлюча, ДанныеЗаполнения.СуммаРеализации);
	
	ИмяКлюча = СтрокаСтоимостьПриобретения + НомерСтрокиБезГруппировки;
	Контейнер.Раздел7.Вставить(ИмяКлюча, ДанныеЗаполнения.СуммаПриобретения);
	
	ИмяКлюча = СтрокаНДС + НомерСтрокиБезГруппировки;
	Контейнер.Раздел7.Вставить(ИмяКлюча, ДанныеЗаполнения.СуммаНДС);
	
	СтрокаРаздел7[СтрокаКодОперации] = ДанныеЗаполнения.КодОперации;
	СтрокаРаздел7[СтрокаСтоимостьРеализации] = ДанныеЗаполнения.СуммаРеализации;
	СтрокаРаздел7[СтрокаСтоимостьПриобретения] = ДанныеЗаполнения.СуммаПриобретения;
	СтрокаРаздел7[СтрокаНДС] = ДанныеЗаполнения.СуммаНДС;
	
КонецПроцедуры

Функция ПустаяТаблицаРаздел12()
	
	ТаблицаРаздел12 = Новый ТаблицаЗначений;
	ТаблицаРаздел12.Колонки.Добавить("НомерПор",       ОбщегоНазначения.ОписаниеТипаЧисло(12, 0));
	ТаблицаРаздел12.Колонки.Добавить("НомСчФ",         ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаРаздел12.Колонки.Добавить("ДатаСчФ",        ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаРаздел12.Колонки.Добавить("ОКВ",            ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ТаблицаРаздел12.Колонки.Добавить("СтоимТовБНалВс", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	ТаблицаРаздел12.Колонки.Добавить("СумНалПокуп",    ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	ТаблицаРаздел12.Колонки.Добавить("СтоимТовСНалВс", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	ТаблицаРаздел12.Колонки.Добавить("СвПокуп");
	ТаблицаРаздел12.Колонки.Добавить("ДополнительныеСведения");
	
	Возврат ТаблицаРаздел12;

КонецФункции

Функция ИмяСобытияЖурналаРегистрации()

	Возврат НСтр("ru = 'Заполнение декларации по НДС'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

#КонецОбласти

#Область ОкруглениеНДС

Функция НовыеПоказателиРаздела3Декларации2009Кв4()
	
	СтруктураПоказателейРаздела3 = Новый Структура;
	
	СтруктураПоказателейРаздела3.Вставить("П000300001003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300002003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300003003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300004003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300005003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300006003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300007003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300008003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300013003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300014003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300015003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300016003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300017003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300018003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300019003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300020003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300021003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300022003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300023003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300024003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300001005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300002005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300003005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300004005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300005005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300006005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300007005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300008005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300009005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300010005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300011005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300012005",0);
	
	Возврат СтруктураПоказателейРаздела3;
	
КонецФункции

Функция НовыеПоказателиРаздела4Декларации2009Кв4()
	
	СтруктураПоказателейРаздела4 = Новый Структура;
	
	СтруктураПоказателейРаздела4.Вставить("П000400000102_1",0);
	СтруктураПоказателейРаздела4.Вставить("П000400000103_1",0);
	
	Возврат СтруктураПоказателейРаздела4;
	
КонецФункции

Функция НовыеПоказателиРаздела6Декларации2009Кв4()

	СтруктураПоказателейРаздела6 = Новый Структура;
	
	СтруктураПоказателейРаздела6.Вставить("П000600000102_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П000600000103_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П000600000104_1", 0);
	
	Возврат СтруктураПоказателейРаздела6;

КонецФункции

Функция СтруктураПоказателейРаздела3Декларации2019Кв1()
	
	СтруктураПоказателейРаздела3 = Новый Структура;
	
	СтруктураПоказателейРаздела3.Вставить("П000300001003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300001005", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300002003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300002005", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300003003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300003005", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004005", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004103", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004105", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004203", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004205", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004303", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004305", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004403", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004405", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004503", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004505", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004603", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300004605", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300005003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300005005", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300006003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300006005", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300007003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300007005", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300008005", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300009005", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300010005", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300010503", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300010505", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300010903", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300010905", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300011005", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300011505", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300011805", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300012003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300012503", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300013003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300013503", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300014003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300015003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300016003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300017003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300018003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300018503", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300019003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300020003", 0);
	СтруктураПоказателейРаздела3.Вставить("П000300021003", 0);
	
	Возврат СтруктураПоказателейРаздела3;
	
КонецФункции

Функция СтруктураПоказателейРаздела4Декларации2019Кв1()
	
	СтруктураПоказателейРаздела4 = Новый Структура;
	
	СтруктураПоказателейРаздела4.Вставить("П0004М1001003_1", 0);
	СтруктураПоказателейРаздела4.Вставить("П0004М1002003_1", 0);
	СтруктураПоказателейРаздела4.Вставить("П0004М1003003_1", 0);
	СтруктураПоказателейРаздела4.Вставить("П0004М1004003_1", 0);
	СтруктураПоказателейРаздела4.Вставить("П0004М1005003_1", 0);
	СтруктураПоказателейРаздела4.Вставить("П0004М2006003_1", 0);
	СтруктураПоказателейРаздела4.Вставить("П0004М2007003_1", 0);
	СтруктураПоказателейРаздела4.Вставить("П0004М2008003_1", 0);
	СтруктураПоказателейРаздела4.Вставить("П0004М3009003_1", 0);
	СтруктураПоказателейРаздела4.Вставить("П0004М3010003_1", 0);
	СтруктураПоказателейРаздела4.Вставить("П0004М3011003_1", 0);
	СтруктураПоказателейРаздела4.Вставить("П000400012003_1", 0);
	СтруктураПоказателейРаздела4.Вставить("П000400013003_1", 0);
	
	Возврат СтруктураПоказателейРаздела4;
	
КонецФункции

Функция СтруктураПоказателейРаздела6Декларации2019Кв1()

	СтруктураПоказателейРаздела6 = Новый Структура;
	
	СтруктураПоказателейРаздела6.Вставить("П0006М1001003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П0006М1002003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П0006М1003003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П0006М1004003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П000600005003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П000600006003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П0006М2007003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П0006М2008003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П0006М2009003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П0006М2010003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П0006М3011003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П0006М3012003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П0006М3013003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П0006М3014003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П0006М3015003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П000600016003_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П000600017003_1", 0);
	
	Возврат СтруктураПоказателейРаздела6;

КонецФункции

Процедура ДополнитьКонтейнерМногострочнымиДанными(Контейнер)
	
	Раздел4_ДанныеДопСтрок010_050 = Новый ТаблицаЗначений;
	Раздел4_ДанныеДопСтрок010_050.Колонки.Добавить("П0004М1001003", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел4_ДанныеДопСтрок010_050.Колонки.Добавить("П0004М1002003", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел4_ДанныеДопСтрок010_050.Колонки.Добавить("П0004М1003003", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));

	Раздел6_ДанныеДопСтрок010_040 = Новый ТаблицаЗначений;
	Раздел6_ДанныеДопСтрок010_040.Колонки.Добавить("П0006М1001003", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел6_ДанныеДопСтрок010_040.Колонки.Добавить("П0006М1002003", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел6_ДанныеДопСтрок010_040.Колонки.Добавить("П0006М1003003", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел6_ДанныеДопСтрок010_040.Колонки.Добавить("П0006М1004003", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок010_050", Раздел4_ДанныеДопСтрок010_050);
	Контейнер.Вставить("Раздел6_ДанныеДопСтрок010_040", Раздел6_ДанныеДопСтрок010_040);
	
КонецПроцедуры

Процедура РассчитатьПоказателиРаздела3Декларации2019Кв1(СтруктураПоказателей)
	
	СтруктураПоказателей.П000300001003 = Окр(СтруктураПоказателей.П000300001003);
	СтруктураПоказателей.П000300001005 = СтруктураПоказателей.П000300001003 * 20 / 100;
	
	СтруктураПоказателей.П000300002003 = Окр(СтруктураПоказателей.П000300002003);
	СтруктураПоказателей.П000300002005 = СтруктураПоказателей.П000300002003 * 10 / 100;
	
	СтруктураПоказателей.П000300003003 = Окр(СтруктураПоказателей.П000300003003);
	СтруктураПоказателей.П000300003005 = СтруктураПоказателей.П000300003003 * 20 / 120;
	
	СтруктураПоказателей.П000300004003 = Окр(СтруктураПоказателей.П000300004003);
	СтруктураПоказателей.П000300004005 = СтруктураПоказателей.П000300004003 * 10 / 110;
	
	СтруктураПоказателей.П000300004103 = Окр(СтруктураПоказателей.П000300004103);
	СтруктураПоказателей.П000300004105 = СтруктураПоказателей.П000300004103 * 18 / 100;
	
	СтруктураПоказателей.П000300004203 = Окр(СтруктураПоказателей.П000300004203);
	СтруктураПоказателей.П000300004205 = СтруктураПоказателей.П000300004203 * 18 / 118;
	
	СтруктураПоказателей.П000300006003 = Окр(СтруктураПоказателей.П000300006003);
	СтруктураПоказателей.П000300006005 = СтруктураПоказателей.П000300006003 * 20 / 100;
	
	СтруктураПоказателей.П000300001005 = Окр(СтруктураПоказателей.П000300001005);
	СтруктураПоказателей.П000300002005 = Окр(СтруктураПоказателей.П000300002005);
	СтруктураПоказателей.П000300003005 = Окр(СтруктураПоказателей.П000300003005);
	СтруктураПоказателей.П000300004005 = Окр(СтруктураПоказателей.П000300004005);
	СтруктураПоказателей.П000300004105 = Окр(СтруктураПоказателей.П000300004105);
	СтруктураПоказателей.П000300004205 = Окр(СтруктураПоказателей.П000300004205);
	СтруктураПоказателей.П000300006005 = Окр(СтруктураПоказателей.П000300006005);
	СтруктураПоказателей.П000300007005 = Окр(СтруктураПоказателей.П000300007005);
	СтруктураПоказателей.П000300008005 = Окр(СтруктураПоказателей.П000300008005);
	
	СтруктураПоказателей.П000300011805 = СтруктураПоказателей.П000300001005 
		+ СтруктураПоказателей.П000300002005
		+ СтруктураПоказателей.П000300003005
		+ СтруктураПоказателей.П000300004005
		+ СтруктураПоказателей.П000300004105
		+ СтруктураПоказателей.П000300004205
		+ СтруктураПоказателей.П000300006005
		+ СтруктураПоказателей.П000300007005
		+ СтруктураПоказателей.П000300008005;
		
	
	СтруктураПоказателей.П000300012003 = Окр(СтруктураПоказателей.П000300012003);
	СтруктураПоказателей.П000300013003 = Окр(СтруктураПоказателей.П000300013003);
	СтруктураПоказателей.П000300014003 = Окр(СтруктураПоказателей.П000300014003);
	СтруктураПоказателей.П000300015003 = Окр(СтруктураПоказателей.П000300015003);
	СтруктураПоказателей.П000300016003 = Окр(СтруктураПоказателей.П000300016003);
	СтруктураПоказателей.П000300017003 = Окр(СтруктураПоказателей.П000300017003);
	СтруктураПоказателей.П000300018003 = Окр(СтруктураПоказателей.П000300018003);
	
	СтруктураПоказателей.П000300019003 = СтруктураПоказателей.П000300012003 
		+ СтруктураПоказателей.П000300013003 
		+ СтруктураПоказателей.П000300014003
		+ СтруктураПоказателей.П000300015003 
		+ СтруктураПоказателей.П000300016003 
		+ СтруктураПоказателей.П000300017003
		+ СтруктураПоказателей.П000300018003;
		
	СтруктураПоказателей.П000300020003 = Макс(СтруктураПоказателей.П000300011805 - СтруктураПоказателей.П000300019003, 0);
	СтруктураПоказателей.П000300021003 = Макс(СтруктураПоказателей.П000300019003 - СтруктураПоказателей.П000300011805, 0);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункцииРасшифровкиДекларацииПоНДС

Функция МакетыРасшифровкиПолей2015Кв1(Организация, Период)
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Организация, Период);
	МакетыРасшифровки = Новый Соответствие();
	
	// Раздел 2: начисления при исполнении обязанностей налогового агента.
	МакетыРасшифровки.Вставить("П000200006003", "РасшифровкаНачислениеИсполнениеОНА");
	МакетыРасшифровки.Вставить("П000200008003", "РасшифровкаНачислениеИсполнениеОНА");
	МакетыРасшифровки.Вставить("П000200009003", "РасшифровкаНачислениеИсполнениеОНА");
	
	// Раздел 3
	// Начисления по реализации.
	Если РаздельныйУчетНДС Тогда
		МакетыРасшифровки.Вставить("П000300001003", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300001005", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300002003", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300002005", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300003003", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300003005", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300004003", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300004005", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
	Иначе
		МакетыРасшифровки.Вставить("П000300001003", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300001005", "РасшифровкаНачислениеРеализация"); 
		МакетыРасшифровки.Вставить("П000300002003", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300002005", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300003003", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300003005", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300004003", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300004005", "РасшифровкаНачислениеРеализация");
	КонецЕсли;
	
	// Начисления при выполнении СМР хоз. способом.
	МакетыРасшифровки.Вставить("П000300006003", "РасшифровкаНачислениеСМРХозСпособом");
	МакетыРасшифровки.Вставить("П000300006005", "РасшифровкаНачислениеСМРХозСпособом");
	// Начисления по авансам полученным.
	МакетыРасшифровки.Вставить("П000300007003", "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС");
	МакетыРасшифровки.Вставить("П000300007005", "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС");
	// Восстановление (начисление) по ранее выданным авансам.
	МакетыРасшифровки.Вставить("П000300009005", "РасшифровкаНачислениеВосстановлениеСАвансовВыданныхУпрощенныйУчетНДС");
	// В декларации с 1 кв 2015 года в строке 120 отображаются сведения, аналогичные строке 130
	// декларации до 1 кв 2015 года, поэтому для расшифровки строки 120 используется набор, 
	// который расшифровывает строку 130 прежней формы декларации.
	МакетыРасшифровки.Вставить("П000300012003", "РасшифровкаСтроки130Декларации");
	// Вычет с авансов выданных.
	МакетыРасшифровки.Вставить("П000300013003", "РасшифровкаВычетАвансыВыданныеУпрощенныйУчетНДС");
	// Вычет по СМР хоз. способом.
	МакетыРасшифровки.Вставить("П000300014003", "РасшифровкаВычетПриобретенныеЦенности");
	// Вычет по импорту.
	МакетыРасшифровки.Вставить("П000300015003", "РасшифровкаВычетПриобретенныеЦенности");
	// Вычет НДС при ввозе из Таможенного союза.
	МакетыРасшифровки.Вставить("П000300016003", "РасшифровкаВычетПриобретенныеЦенности");
	// Вычет с авансов полученных (восстановление).
	МакетыРасшифровки.Вставить("П000300017003", "РасшифровкаВычетСАвансовПолученныхУпрощенныйУчетНДС");
	// Вычет при исполнении обязанностей налогового агента.
	МакетыРасшифровки.Вставить("П000300018003", "РасшифровкаВычетИсполнениеОНА");
	
	// Раздел 3 приложение 1: восстановление НДС по объектам недвижимости.
	МакетыРасшифровки.Вставить("П000310008001", "ВосстановлениеНДСпоОбъектамНедвижимости");
	МакетыРасшифровки.Вставить("П000310008002", "ВосстановлениеНДСпоОбъектамНедвижимости");
	МакетыРасшифровки.Вставить("П000310008003", "ВосстановлениеНДСпоОбъектамНедвижимости");
	МакетыРасшифровки.Вставить("П000310008004", "ВосстановлениеНДСпоОбъектамНедвижимости");
	
	Если РаздельныйУчетНДС Тогда
		// Раздел 4
		МакетыРасшифровки.Вставить("П000400002003", "РасшифровкаНачислениеРеализация0"); 
		МакетыРасшифровки.Вставить("П000400003003", "РасшифровкаВычетПоПриобретеннымЦенностям0");
		// Раздел 6
		МакетыРасшифровки.Вставить("П000600002003", "РасшифровкаНачислениеРеализация0");
		МакетыРасшифровки.Вставить("П000600003003", "РасшифровкаНачислениеРеализация0");
		МакетыРасшифровки.Вставить("П000600004003", "РасшифровкаВычетПоПриобретеннымЦенностям0");
	КонецЕсли;
	
	Возврат МакетыРасшифровки;
	
КонецФункции

Функция МакетыРасшифровкиПолей2017Кв1(Организация, Период)
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Организация, Период);
	МакетыРасшифровки = Новый Соответствие();
	
	// Раздел 2: начисления при исполнении обязанностей налогового агента.
	МакетыРасшифровки.Вставить("П000200006003", "РасшифровкаНачислениеИсполнениеОНА");
	МакетыРасшифровки.Вставить("П000200008003", "РасшифровкаНачислениеИсполнениеОНА");
	МакетыРасшифровки.Вставить("П000200009003", "РасшифровкаНачислениеИсполнениеОНА");
	
	// Раздел 3
	// Начисления по реализации.
	Если РаздельныйУчетНДС Тогда
		МакетыРасшифровки.Вставить("П000300001003", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300001005", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300002003", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300002005", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300003003", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300003005", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300004003", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300004005", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
	Иначе
		МакетыРасшифровки.Вставить("П000300001003", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300001005", "РасшифровкаНачислениеРеализация"); 
		МакетыРасшифровки.Вставить("П000300002003", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300002005", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300003003", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300003005", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300004003", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300004005", "РасшифровкаНачислениеРеализация");
	КонецЕсли;
	
	// Начисления при выполнении СМР хоз. способом.
	МакетыРасшифровки.Вставить("П000300006003", "РасшифровкаНачислениеСМРХозСпособом");
	МакетыРасшифровки.Вставить("П000300006005", "РасшифровкаНачислениеСМРХозСпособом");
	// Начисления по авансам полученным.
	МакетыРасшифровки.Вставить("П000300007003", "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС");
	МакетыРасшифровки.Вставить("П000300007005", "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС");
	// Восстановление (начисление) по ранее выданным авансам.
	МакетыРасшифровки.Вставить("П000300009005", "РасшифровкаНачислениеВосстановлениеСАвансовВыданныхУпрощенныйУчетНДС");
	
	// В декларации с 1 кв 2015 года в строке 120 отображаются сведения, аналогичные строке 130
	// декларации до 1 кв 2015 года, поэтому для расшифровки строки 120 используется набор, 
	// который расшифровывает строку 130 прежней формы декларации.
	МакетыРасшифровки.Вставить("П000300012003", "РасшифровкаСтроки130Декларации");
	// Вычет с авансов выданных.
	МакетыРасшифровки.Вставить("П000300013003", "РасшифровкаВычетАвансыВыданныеУпрощенныйУчетНДС");
	// Вычет по СМР хоз. способом.
	МакетыРасшифровки.Вставить("П000300014003", "РасшифровкаВычетПриобретенныеЦенности");
	// Вычет по импорту.
	МакетыРасшифровки.Вставить("П000300015003", "РасшифровкаВычетПриобретенныеЦенности");
	// Вычет НДС при ввозе из Таможенного союза.
	МакетыРасшифровки.Вставить("П000300016003", "РасшифровкаВычетПриобретенныеЦенности");
	// Вычет с авансов полученных (восстановление)
	МакетыРасшифровки.Вставить("П000300017003", "РасшифровкаВычетСАвансовПолученныхУпрощенныйУчетНДС");
	// Вычет при исполнении обязанностей налогового агента.
	МакетыРасшифровки.Вставить("П000300018003", "РасшифровкаВычетИсполнениеОНА");
	
	// Раздел 3 приложение 1: восстановление НДС по объектам недвижимости.
	МакетыРасшифровки.Вставить("П000310007001", "ВосстановлениеНДСпоОбъектамНедвижимости");
	МакетыРасшифровки.Вставить("П000310007002", "ВосстановлениеНДСпоОбъектамНедвижимости");
	МакетыРасшифровки.Вставить("П000310007003", "ВосстановлениеНДСпоОбъектамНедвижимости");
	МакетыРасшифровки.Вставить("П000310007004", "ВосстановлениеНДСпоОбъектамНедвижимости");
	
	// Раздел 4
	МакетыРасшифровки.Вставить("П0004М1002003", "РасшифровкаНачислениеРеализация0"); 
	Если РаздельныйУчетНДС Тогда
		МакетыРасшифровки.Вставить("П0004М1003003", "РасшифровкаВычетПоПриобретеннымЦенностям0");
	КонецЕсли;
	
	// Раздел 6
	МакетыРасшифровки.Вставить("П0006М1002003", "РасшифровкаНачислениеРеализация0");
	МакетыРасшифровки.Вставить("П0006М1003003", "РасшифровкаНачислениеРеализация0");
	Если РаздельныйУчетНДС Тогда
		МакетыРасшифровки.Вставить("П0006М1004003", "РасшифровкаВычетПоПриобретеннымЦенностям0");
	КонецЕсли;
	
	Возврат МакетыРасшифровки;
	
КонецФункции

Функция МакетыРасшифровкиПолей2019Кв1(Организация, Период)
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Организация, Период);
	МакетыРасшифровки = Новый Соответствие();
	
	// Раздел 2: начисления при исполнении обязанностей налогового агента.
	МакетыРасшифровки.Вставить("П000200006003", "РасшифровкаНачислениеИсполнениеОНА");
	МакетыРасшифровки.Вставить("П000200008003", "РасшифровкаНачислениеИсполнениеОНА");
	МакетыРасшифровки.Вставить("П000200009003", "РасшифровкаНачислениеИсполнениеОНА");
	
	// Раздел 3
	// Начисления по реализации.
	Если РаздельныйУчетНДС Тогда
		МакетыРасшифровки.Вставить("П000300001003", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300001005", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300002003", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300002005", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300003003", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300003005", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300004003", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300004005", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300004103", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300004105", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300004203", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");
		МакетыРасшифровки.Вставить("П000300004205", "РасшифровкаНачислениеРеализацияСложныйУчетНДС");

	Иначе
		МакетыРасшифровки.Вставить("П000300001003", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300001005", "РасшифровкаНачислениеРеализация"); 
		МакетыРасшифровки.Вставить("П000300002003", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300002005", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300003003", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300003005", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300004003", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300004005", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300004103", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300004105", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300004203", "РасшифровкаНачислениеРеализация");
		МакетыРасшифровки.Вставить("П000300004205", "РасшифровкаНачислениеРеализация");

	КонецЕсли;
	
	// Начисления при выполнении СМР хоз. способом.
	МакетыРасшифровки.Вставить("П000300006003", "РасшифровкаНачислениеСМРХозСпособом");
	МакетыРасшифровки.Вставить("П000300006005", "РасшифровкаНачислениеСМРХозСпособом");
	// Начисления по авансам полученным.
	МакетыРасшифровки.Вставить("П000300007003", "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС");
	МакетыРасшифровки.Вставить("П000300007005", "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС");
	// Восстановление (начисление) по ранее выданным авансам.
	МакетыРасшифровки.Вставить("П000300009005", "РасшифровкаНачислениеВосстановлениеСАвансовВыданныхУпрощенныйУчетНДС");
	
	// В декларации с 1 кв 2015 года в строке 120 отображаются сведения, аналогичные строке 130
	// декларации до 1 кв 2015 года, поэтому для расшифровки строки 120 используется набор, 
	// который расшифровывает строку 130 прежней формы декларации.
	МакетыРасшифровки.Вставить("П000300012003", "РасшифровкаСтроки130Декларации");
	// Вычет с авансов выданных.
	МакетыРасшифровки.Вставить("П000300013003", "РасшифровкаВычетАвансыВыданныеУпрощенныйУчетНДС");
	// Вычет по СМР хоз. способом.
	МакетыРасшифровки.Вставить("П000300014003", "РасшифровкаВычетПриобретенныеЦенности");
	// Вычет по импорту.
	МакетыРасшифровки.Вставить("П000300015003", "РасшифровкаВычетПриобретенныеЦенности");
	// Вычет НДС при ввозе из Таможенного союза.
	МакетыРасшифровки.Вставить("П000300016003", "РасшифровкаВычетПриобретенныеЦенности");
	// Вычет с авансов полученных (восстановление)
	МакетыРасшифровки.Вставить("П000300017003", "РасшифровкаВычетСАвансовПолученныхУпрощенныйУчетНДС");
	// Вычет при исполнении обязанностей налогового агента.
	МакетыРасшифровки.Вставить("П000300018003", "РасшифровкаВычетИсполнениеОНА");
	
	// Раздел 3 приложение 1: восстановление НДС по объектам недвижимости.
	МакетыРасшифровки.Вставить("П000310007001", "ВосстановлениеНДСпоОбъектамНедвижимости");
	МакетыРасшифровки.Вставить("П000310007002", "ВосстановлениеНДСпоОбъектамНедвижимости");
	МакетыРасшифровки.Вставить("П000310007003", "ВосстановлениеНДСпоОбъектамНедвижимости");
	МакетыРасшифровки.Вставить("П000310007004", "ВосстановлениеНДСпоОбъектамНедвижимости");
	
	// Раздел 4
	МакетыРасшифровки.Вставить("П0004М1002003", "РасшифровкаНачислениеРеализация0"); 
	Если РаздельныйУчетНДС Тогда
		МакетыРасшифровки.Вставить("П0004М1003003", "РасшифровкаВычетПоПриобретеннымЦенностям0");
	КонецЕсли;
	
	// Раздел 6
	МакетыРасшифровки.Вставить("П0006М1002003", "РасшифровкаНачислениеРеализация0");
	МакетыРасшифровки.Вставить("П0006М1003003", "РасшифровкаНачислениеРеализация0");
	Если РаздельныйУчетНДС Тогда
		МакетыРасшифровки.Вставить("П0006М1004003", "РасшифровкаВычетПоПриобретеннымЦенностям0");
	КонецЕсли;
	
	Возврат МакетыРасшифровки;
	
КонецФункции

Функция НовыйДополнительныеПараметрыРасшифровкиИОтбор(ИдентификаторМакета)
	
	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакета);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Возврат Новый Структура("ДополнительныеПараметры, Отбор", ДополнительныеПараметры, Отбор);
	
КонецФункции

Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение)
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение    = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения     = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры  

#КонецОбласти

#Область РеестрДляПодтвержденияСтавки0

Процедура ЗаполнитьРеестрДляПодтвержденияСтавки0(Контейнер, ПараметрыОтчета)
	
	Если ПараметрыОтчета.Свойство("ДатаНачалаРасширенногоПериодаОтчета") Тогда
		НачалоПериодаОтчета = ПараметрыОтчета.ДатаНачалаРасширенногоПериодаОтчета;
	Иначе
		НачалоПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ПараметрыОтчета.Организация));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Событие", Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
	
	ТекстЗапросаРеестрНДСПриложение(Запрос);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЭтоПриложение5 = ПараметрыОтчета.ПравилаЗаполнения = "Приложение5";
	
	Если Не Результат.Пустой() Тогда
		
		Реестр = Контейнер.Реестр;
		Реестр.Строки.Очистить();
		
		ВыборкаКодОперации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКодОперации.Следующий() Цикл
			
			НоваяСтраница = Реестр.Строки.Добавить();
			НоваяСтраница.Данные = Новый Структура("КодОперации, НалБазаИтого", ВыборкаКодОперации.КодОперации, 0);
			НоваяСтраница.ДанныеМногострочныхЧастей = Новый Структура("П10000", ДеревоЗначенийРеестрНДСПриложение());
			
			Сч = 1;
			
			ВыборкаДекларация = ВыборкаКодОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДекларация.Следующий() Цикл
				
				Если Сч > ПараметрыОтчета.МаксКолСтрокНаСтранице Тогда
					
					НоваяСтраница = Реестр.Строки.Добавить();
					НоваяСтраница.Данные = Новый Структура("КодОперации, НалБазаИтого", ВыборкаКодОперации.КодОперации, 0);
					НоваяСтраница.ДанныеМногострочныхЧастей = Новый Структура("П10000", ДеревоЗначенийРеестрНДСПриложение());
					
					Сч = 1;
					
				КонецЕсли;
				
				НоваяДекларация = НоваяСтраница.ДанныеМногострочныхЧастей.П10000.Строки.Добавить();
				
				СтруктураДанныхДекларации = Новый Структура;
				СтруктураДанныхДекларации.Вставить("П1000001", 0);
				СтруктураДанныхДекларации.Вставить("П1000002", ВыборкаДекларация.НомерТаможеннойДекларации);
				СтруктураДанныхДекларации.Вставить("П1000003", ВыборкаДекларация.ПодтвержденнаяНалоговаяБаза);
				
				Если ЭтоПриложение5 Тогда
					СтруктураДанныхДекларации.Вставить("П1000008", ВыборкаДекларация.Примечание);
				Иначе
					СтруктураДанныхДекларации.Вставить("П1000004", ВыборкаДекларация.Примечание);
				КонецЕсли;
				
				НоваяДекларация.Данные = СтруктураДанныхДекларации;
				НоваяДекларация.ДанныеМногострочныхЧастей = Новый Структура("П11000", ДеревоЗначенийРеестрНДСПриложение());
				
				Если ЭтоПриложение5 Тогда
				
					ВыборкаКодТС = ВыборкаДекларация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаКодТС.Следующий() Цикл
						
						НовыйКодТС = НоваяДекларация.ДанныеМногострочныхЧастей.П11000.Строки.Добавить();
						НовыйКодТС.Данные = Новый Структура("П1100004", ВыборкаКодТС.КодТС);
						НовыйКодТС.ДанныеМногострочныхЧастей = Новый Структура("П11100", ДеревоЗначенийРеестрНДСПриложение());
						
						ВыборкаДокумент = ВыборкаКодТС.Выбрать();
						Пока ВыборкаДокумент.Следующий() Цикл
							
							НовыйДокумент = НовыйКодТС.ДанныеМногострочныхЧастей.П11100.Строки.Добавить();
							НовыйДокумент.Данные = Новый Структура("П1110005, П1110006, П1110007", 
							ВыборкаДокумент.ВидДокумента, ВыборкаДокумент.НомерТСД, ВыборкаДокумент.ДатаТСД);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Сч = Сч + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ТекстЗапросаРеестрНДСПриложение(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК ДокументОтгрузки,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС) КАК ПодтвержденнаяНалоговаяБаза
	|ПОМЕСТИТЬ ПодтвержденныеОтгрузки
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.Событие = &Событие
	|	И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НДСЗаписиКнигиПродаж.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Организация,
	|	РеализацияОтгруженныхТоваров.ДокументОтгрузки,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
	|		ПО НДСЗаписиКнигиПродаж.СчетФактура = РеализацияОтгруженныхТоваров.Ссылка
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.Событие = &Событие
	|	И НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияОтгруженныхТоваров.ДокументОтгрузки,
	|	НДСЗаписиКнигиПродаж.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияТаможенныхДекларацийЭкспорт.Организация,
	|	СведенияТаможенныхДекларацийЭкспорт.ДокументОтгрузки КАК ДокументОтгрузки,
	|	СведенияТаможенныхДекларацийЭкспорт.НомерТаможеннойДекларации
	|ПОМЕСТИТЬ ДокументыОтгрузкиИТД
	|ИЗ
	|	ПодтвержденныеОтгрузки КАК ПодтвержденныеОтгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияТаможенныхДекларацийЭкспорт КАК СведенияТаможенныхДекларацийЭкспорт
	|		ПО ПодтвержденныеОтгрузки.ДокументОтгрузки = СведенияТаможенныхДекларацийЭкспорт.ДокументОтгрузки
	|			И ПодтвержденныеОтгрузки.Организация = СведенияТаможенныхДекларацийЭкспорт.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОтгрузкиИТД.НомерТаможеннойДекларации КАК НомерТаможеннойДекларации,
	|	СУММА(ПодтвержденныеОтгрузки.ПодтвержденнаяНалоговаяБаза) КАК ПодтвержденнаяНалоговаяБаза
	|ПОМЕСТИТЬ НалоговаяБазаПоДекларациям
	|ИЗ
	|	ПодтвержденныеОтгрузки КАК ПодтвержденныеОтгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОтгрузкиИТД КАК ДокументыОтгрузкиИТД
	|		ПО ПодтвержденныеОтгрузки.ДокументОтгрузки = ДокументыОтгрузкиИТД.ДокументОтгрузки
	|			И ПодтвержденныеОтгрузки.Организация = ДокументыОтгрузкиИТД.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОтгрузкиИТД.НомерТаможеннойДекларации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерТаможеннойДекларации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияТаможенныхДекларацийЭкспорт.НомерТаможеннойДекларации КАК НомерТаможеннойДекларации,
	|	СведенияТаможенныхДекларацийЭкспорт.КодОперации КАК КодОперации,
	|	СведенияТаможенныхДекларацийЭкспорт.Примечание КАК Примечание,
	|	СведенияТаможенныхДекларацийЭкспорт.КодТС КАК КодТС,
	|	СведенияТаможенныхДекларацийЭкспорт.ВидДокумента КАК ВидДокумента,
	|	СведенияТаможенныхДекларацийЭкспорт.НомерТСД КАК НомерТСД,
	|	СведенияТаможенныхДекларацийЭкспорт.ДатаТСД КАК ДатаТСД,
	|	НалоговаяБазаПоДекларациям.ПодтвержденнаяНалоговаяБаза КАК ПодтвержденнаяНалоговаяБаза
	|ИЗ
	|	РегистрСведений.СведенияТаможенныхДекларацийЭкспорт КАК СведенияТаможенныхДекларацийЭкспорт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НалоговаяБазаПоДекларациям КАК НалоговаяБазаПоДекларациям
	|		ПО СведенияТаможенныхДекларацийЭкспорт.НомерТаможеннойДекларации = НалоговаяБазаПоДекларациям.НомерТаможеннойДекларации
	|ИТОГИ
	|	МАКСИМУМ(Примечание),
	|	МАКСИМУМ(ПодтвержденнаяНалоговаяБаза)
	|ПО
	|	КодОперации,
	|	НомерТаможеннойДекларации,
	|	КодТС";

КонецПроцедуры

Функция ДеревоЗначенийРеестрНДСПриложение()
	
	НовоеДеревоЗначений = Новый ДеревоЗначений();
	НовоеДеревоЗначений.Колонки.Добавить("Данные");
	НовоеДеревоЗначений.Колонки.Добавить("ДанныеМногострочныхЧастей");
	НовоеДеревоЗначений.Колонки.Добавить("АдресТабличногоДокумента");
	
	Возврат НовоеДеревоЗначений;
	
КонецФункции

Процедура ПоказателиОтчетаРеестрНДСПриложение1(ПоказателиОтчета)

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КодОперации", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П1000001",    Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П1000002",    Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П1000003",    Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П1000004",    Истина, Ложь);

КонецПроцедуры

Процедура ПоказателиОтчетаРеестрНДСПриложение5(ПоказателиОтчета)

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КодОперации", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П1000001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П1000002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П1000003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П1000008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П1100004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П1110005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П1110006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П1110007", Истина, Ложь);

КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеПредставлениеКнигЖурнала

Процедура ВывестиУзелКнигиПокупок501_Всего(КомпоновщикXML, ВыгружаемыйДокумент)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Всего");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", ВыгружаемыйДокумент.ВсегоПокупок, "Ч,17,2");
	
	// НДС 18%.
	Если ВыгружаемыйДокумент.СуммаБезНДС18 <> 0 ИЛИ ВыгружаемыйДокумент.НДС18 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "18", ВыгружаемыйДокумент.СуммаБезНДС18, ВыгружаемыйДокумент.НДС18);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 10%.
	Если ВыгружаемыйДокумент.СуммаБезНДС10 <> 0 ИЛИ ВыгружаемыйДокумент.НДС10 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "10", ВыгружаемыйДокумент.СуммаБезНДС10, ВыгружаемыйДокумент.НДС10);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 0%.
	Если ВыгружаемыйДокумент.НДС0 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "0", ВыгружаемыйДокумент.НДС0);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	// НДС 20%.
	Если ВыгружаемыйДокумент.СуммаБезНДС20 <> 0 ИЛИ ВыгружаемыйДокумент.НДС20 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "20", ВыгружаемыйДокумент.СуммаБезНДС20, ВыгружаемыйДокумент.НДС20);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС Без НДС.
	Если ВыгружаемыйДокумент.СуммаСовсемБезНДС <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "без НДС", ВыгружаемыйДокумент.СуммаСовсемБезНДС); // Не локализуется
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиУзелКнигиПокупок501_СвПокупка(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокупка");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.Ном, "Ч,12");
	
	РеквизитыСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.ДатаНомер, ";");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СокрЛП(РеквизитыСчетаФактуры[0]), "Т,10");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СокрЛП(РеквизитыСчетаФактуры[1]), "Т,1000");
	
	РеквизитыИсправленияСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.НомерДатаИсправления, ";");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СокрЛП(РеквизитыИсправленияСчетаФактуры[0]), "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СокрЛП(РеквизитыИсправленияСчетаФактуры[1]), "Т,10");
	
	РеквизитыКорректировочногоСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.НомерДатаКорректировки, ";");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СокрЛП(РеквизитыКорректировочногоСчетаФактуры[0]), "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ", СокрЛП(РеквизитыКорректировочногоСчетаФактуры[1]), "Т,10");
	
	РеквизитыИсправленияКорректировочногоСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.НомерДатаИсправленияКорректировки, ";");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СокрЛП(РеквизитыИсправленияКорректировочногоСчетаФактуры[0]), "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СокрЛП(РеквизитыИсправленияКорректировочногоСчетаФактуры[1]), "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаПринУчет", СтрокаСведений.ДатаОприходования, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.Продавец, "Т,1000");
	ИНН = СокрЛП(СтрокаСведений.ПродавецИНН);
	Если СтрДлина(ИНН) = 12 Тогда
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", ИНН, "Т,12");
	ИНаче
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", ИНН, "Т,10");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.ПродавецКПП, "Т,9");
	КонецЕсли;
	
	ПроисхождениеТовара = СтрокаСведений.НомерГТД;
	РеквизитыПроисхожденияТовара = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПроисхождениеТовара, ";");
	
	Если РеквизитыПроисхожденияТовара.Количество() >= 2 Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодПроисх", СокрЛП(РеквизитыПроисхожденияТовара[0]), "Т,3");
	КонецЕсли;
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.ВсегоПокупок, "Ч,19,2");
	
	ДатыОплаты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСведений.ДатаОплаты, ",");
	Для Каждого СтрокаДатыОплаты Из ДатыОплаты Цикл
		Если ЗначениеЗаполнено(СтрокаДатыОплаты) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДатаОплСчФПрод");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СокрЛП(СтрокаДатыОплаты), "Т,10");
		КонецЕсли;
	КонецЦикла;
	
	// НДС 18%.
	Если СтрокаСведений.СуммаБезНДС18 <> 0 ИЛИ СтрокаСведений.НДС18 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСтоимПок");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "18", СтрокаСведений.СуммаБезНДС18, СтрокаСведений.НДС18);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 10%.
	Если СтрокаСведений.СуммаБезНДС10 <> 0 ИЛИ СтрокаСведений.НДС10 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСтоимПок");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "10", СтрокаСведений.СуммаБезНДС10, СтрокаСведений.НДС10);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 0%.
	Если СтрокаСведений.НДС0 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСтоимПок");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "0", СтрокаСведений.НДС0);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 20%.
	Если СтрокаСведений.СуммаБезНДС20 <> 0 ИЛИ СтрокаСведений.НДС20 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСтоимПок");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "20", СтрокаСведений.СуммаБезНДС20, СтрокаСведений.НДС20);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС Без НДС.
	Если СтрокаСведений.СуммаСовсемБезНДС <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСтоимПок");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "без НДС", СтрокаСведений.СуммаСовсемБезНДС); // Не локализуется
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если РеквизитыПроисхожденияТовара.Количество() >= 2 Тогда
		Для Инд = 1 По РеквизитыПроисхожденияТовара.Количество() - 1 Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "НомерТД");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СокрЛП(РеквизитыПроисхожденияТовара[Инд]), "Т,29");
		КонецЦикла;
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиДокументДопЛистаКнигиПокупок_502(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги)
	
	ОбщиеСведенияЛиста = ЛистКниги.ОбщиеСведения;
	ЗаписиЛиста = ЛистКниги.Записи;
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	Иначе
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвДопЛКнПок");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерДопЛКнПок", ОбщиеСведенияЛиста.НомерДопЛКнПок);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ОбщиеСведенияЛиста.Период);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ОбщиеСведенияЛиста.ОтчетГод);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДопЛКнПок", ОбщиеСведенияЛиста.ДатаДопЛКнПок);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Итого");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСВыч", ОбщиеСведенияЛиста.Итого.СумНДСВыч, "Ч,19,2");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Всего");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСВыч", ОбщиеСведенияЛиста.Всего.СумНДСВыч, "Ч,19,2");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Для Каждого СтрокаСведений Из ЗаписиЛиста Цикл
		ВывестиСвПокупкаДопЛистаКнигиПокупок_502(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиСвПокупкаДопЛистаКнигиПокупок_502(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокупка");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.НаимПрод, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего, "Ч,19,2");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, КодВидаОперации);
	КонецЦикла;
	
	Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокУплНал Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвДокУплНал");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерДокУплНал", ДокументПодтверждения.НомерДокУплНал, "Т,256");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокУплНал", ДокументПодтверждения.ДатаДокУплНал, "Т,10");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	Для Каждого ДатаПринятияНаУчет Из СтрокаСведений.ДатаПринУчет Цикл
		ДатаПринятияНаУчет = Лев(СокрЛП(ДатаПринятияНаУчет), 10);
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДатаПринУчет");
		
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ДатаПринятияНаУчет);
	КонецЦикла;
	
	Если СтрокаСведений.СвПосредн <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосредн");
		
		Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", СтрокаСведений.СвПосредн.НаимОрг, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.СвПосредн.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.СвПосредн.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.СвПосредн.ИННФЛ, "Т,12");
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Для Каждого НомерТД Из СтрокаСведений.НомерТД Цикл
		НомерТД = Лев(СокрЛП(НомерТД), 29);
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "НомерТД");
		
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, НомерТД);
	КонецЦикла;
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДСВыч");
	
	Если ТипЗнч(СтрокаСведений.СумНДСВыч) = Тип("Число") Тогда
		СумНДСВыч = Формат(СтрокаСведений.СумНДСВыч,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СумНДСВыч);
	Иначе
		СумНДСВыч = Лев(СокрЛП(СтрокаСведений.СумНДСВыч), 7);
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СумНДСВыч);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиДокументДопЛистаКнигиПокупок_503(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги)
	
	ОбщиеСведенияЛиста = ЛистКниги.ОбщиеСведения;
	ЗаписиЛиста = ЛистКниги.Записи;
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	ВывестиУзел503_СвПокуп(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвДопЛКнПок");
	
	ВывестиАтрибут(КомпоновщикXML, "НомерДопЛКнПок", ОбщиеСведенияЛиста.НомерДопЛКнПок);
	ВывестиАтрибут(КомпоновщикXML, "Период", ОбщиеСведенияЛиста.Период);
	ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ОбщиеСведенияЛиста.ОтчетГод);
	ВывестиАтрибут(КомпоновщикXML, "ДатаДопЛКнПок", ОбщиеСведенияЛиста.ДатаДопЛКнПок);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Итого");
	
	ВывестиАтрибут(КомпоновщикXML, "СумНДСВыч", ОбщиеСведенияЛиста.Итого.СумНДСВыч, "Ч,19,2");
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Итого
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Всего");
	
	ВывестиАтрибут(КомпоновщикXML, "СумНДСВыч", ОбщиеСведенияЛиста.Всего.СумНДСВыч, "Ч,19,2");
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Всего
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвДопЛКнПок
	
	Для Каждого СтрокаСведений Из ЗаписиЛиста Цикл
		ВывестиСвПокупкаДопЛистаКнигиПокупок_503(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	ВывестиУзел503_504_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Документ
	
КонецПроцедуры

Процедура ВывестиСвПокупкаДопЛистаКнигиПокупок_503(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПокупка");
	
	ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.НаимПрод, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
	
	ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего, "Ч,19,2");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("КодВидОпер");
		КомпоновщикXML.ЗаписатьТекст(КодВидаОперации);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // КодВидОпер
	КонецЦикла;
	
	Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокУплНал Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СвДокУплНал");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерДокУплНал", ДокументПодтверждения.НомерДокУплНал, "Т,256");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаДокУплНал", ДокументПодтверждения.ДатаДокУплНал, "Т,10");
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвДокУплНал
		
	КонецЦикла;
	
	Для Каждого ДатаПринятияНаУчет Из СтрокаСведений.ДатаПринУчет Цикл
		ДатаПринятияНаУчет = Лев(СокрЛП(ДатаПринятияНаУчет), 10);
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("ДатаПринУчет");
		КомпоновщикXML.ЗаписатьТекст(ДатаПринятияНаУчет);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // ДатаПринУчет
		
	КонецЦикла;
	
	Если СтрокаСведений.СвПосредн <> Неопределено Тогда
		ВывестиУзел503_504_СвПосредн(КомпоновщикXML, СтрокаСведений.СвПосредн);
	КонецЕсли;
	
	Для Каждого НомерТД Из СтрокаСведений.НомерТД Цикл
		НомерТД = Лев(СокрЛП(НомерТД), 29);
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("НомерТД");
		КомпоновщикXML.ЗаписатьТекст(НомерТД);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // НомерТД
		
	КонецЦикла;
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДСВыч");
	
	Если ТипЗнч(СтрокаСведений.СумНДСВыч) = Тип("Число") Тогда
		СумНДСВыч = Формат(СтрокаСведений.СумНДСВыч,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
		КомпоновщикXML.ЗаписатьТекст(СумНДСВыч);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
		
	Иначе
		СумНДСВыч = Лев(СокрЛП(СтрокаСведений.СумНДСВыч), 7);
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
		КомпоновщикXML.ЗаписатьТекст(СумНДСВыч);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДСВыч
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПокупка
	
КонецПроцедуры

Процедура ВывестиУзелКнигиПродаж501_Всего(КомпоновщикXML, ВыгружаемыйДокумент)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Всего");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", ВыгружаемыйДокумент.ВсегоПродаж, "Ч,17,2");
	
	// НДС 18%.
	Если ВыгружаемыйДокумент.СуммаБезНДС18 <> 0 ИЛИ ВыгружаемыйДокумент.НДС18 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "18", ВыгружаемыйДокумент.СуммаБезНДС18, ВыгружаемыйДокумент.НДС18);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 10%.
	Если ВыгружаемыйДокумент.СуммаБезНДС10 <> 0 ИЛИ ВыгружаемыйДокумент.НДС10 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "10", ВыгружаемыйДокумент.СуммаБезНДС10, ВыгружаемыйДокумент.НДС10);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 0%.
	Если ВыгружаемыйДокумент.НДС0 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "0", ВыгружаемыйДокумент.НДС0);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	// НДС 20%.
	Если ВыгружаемыйДокумент.СуммаБезНДС20 <> 0 ИЛИ ВыгружаемыйДокумент.НДС20 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "20", ВыгружаемыйДокумент.СуммаБезНДС20, ВыгружаемыйДокумент.НДС20);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС Без НДС.
	Если ВыгружаемыйДокумент.СуммаСовсемБезНДС <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "без НДС", ВыгружаемыйДокумент.СуммаСовсемБезНДС); // Не локализуется
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиУзелКнигиПродаж501_СвПродаж(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПродаж");
	
	РеквизитыСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.ДатаНомер, ";");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СокрЛП(РеквизитыСчетаФактуры[0]), "Т,10");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СокрЛП(РеквизитыСчетаФактуры[1]), "Т,1000");
	
	РеквизитыИсправленияСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.НомерДатаИсправления, ";");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СокрЛП(РеквизитыИсправленияСчетаФактуры[0]), "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СокрЛП(РеквизитыИсправленияСчетаФактуры[1]), "Т,10");
	
	РеквизитыКорректировочногоСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.НомерДатаКорректировки, ";");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СокрЛП(РеквизитыКорректировочногоСчетаФактуры[0]), "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ", СокрЛП(РеквизитыКорректировочногоСчетаФактуры[1]), "Т,10");
	
	РеквизитыИсправленияКорректировочногоСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.НомерДатаИсправленияКорректировки, ";");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СокрЛП(РеквизитыИсправленияКорректировочногоСчетаФактуры[0]), "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СокрЛП(РеквизитыИсправленияКорректировочногоСчетаФактуры[1]), "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.Покупатель, "Т,1000");
	ИНН = СокрЛП(СтрокаСведений.ПокупательИНН);
	Если СтрДлина(ИНН) = 12 Тогда
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", ИНН, "Т,12");
	ИНаче
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", ИНН, "Т,10");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.ПокупательКПП, "Т,9");
	КонецЕсли;
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.ВсегоПродаж, "Ч,19,2");
	
	ДатыОплаты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСведений.ДатаОплаты, ",");
	Для Каждого СтрокаДатыОплаты Из ДатыОплаты Цикл
		Если ЗначениеЗаполнено(СтрокаДатыОплаты) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДатаОплСчФПрод");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СокрЛП(СтрокаДатыОплаты), "Т,10");
		КонецЕсли;
	КонецЦикла;
	
	// НДС 18%.
	Если СтрокаСведений.СуммаБезНДС18 <> 0 ИЛИ СтрокаСведений.НДС18 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "18", СтрокаСведений.СуммаБезНДС18, СтрокаСведений.НДС18);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 10%.
	Если СтрокаСведений.СуммаБезНДС10 <> 0 ИЛИ СтрокаСведений.НДС10 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "10", СтрокаСведений.СуммаБезНДС10, СтрокаСведений.НДС10);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 0%.
	Если СтрокаСведений.НДС0 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "0", СтрокаСведений.НДС0);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 20%.
	Если СтрокаСведений.СуммаБезНДС20 <> 0 ИЛИ СтрокаСведений.НДС20 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "20", СтрокаСведений.СуммаБезНДС20, СтрокаСведений.НДС20);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС Без НДС.
	Если СтрокаСведений.СуммаСовсемБезНДС <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "без НДС", СтрокаСведений.СуммаСовсемБезНДС); // Не локализуется
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиДокументДопЛистаКнигиПродаж_502(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги)
	
	ОбщиеСведенияЛиста = ЛистКниги.ОбщиеСведения;
	ЗаписиЛиста = ЛистКниги.Записи;
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПродав");
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	Иначе
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвДопЛКнПрод");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерДопЛКнПрод", ОбщиеСведенияЛиста.НомерДопЛКнПрод);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ОбщиеСведенияЛиста.Период);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ОбщиеСведенияЛиста.ОтчетГод);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДопЛКнПрод", ОбщиеСведенияЛиста.ДатаДопЛКнПрод);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Итого");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      ОбщиеСведенияЛиста.Итого.СтТовРубКоп18, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      ОбщиеСведенияЛиста.Итого.СтТовРубКоп10, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       ОбщиеСведенияЛиста.Итого.СтТовРубКоп0, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     ОбщиеСведенияЛиста.Итого.СумНДСРубКоп18, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     ОбщиеСведенияЛиста.Итого.СумНДСРубКоп10, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", ОбщиеСведенияЛиста.Итого.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Всего");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      ОбщиеСведенияЛиста.Всего.СтТовРубКоп18, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      ОбщиеСведенияЛиста.Всего.СтТовРубКоп10, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       ОбщиеСведенияЛиста.Всего.СтТовРубКоп0, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     ОбщиеСведенияЛиста.Всего.СумНДСРубКоп18, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     ОбщиеСведенияЛиста.Всего.СумНДСРубКоп10, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", ОбщиеСведенияЛиста.Всего.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Для Каждого СтрокаСведений Из ЗаписиЛиста Цикл
		ВывестиСвПродажДопЛистаКнигиПродаж_502(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиСвПродажДопЛистаКнигиПродаж_502(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПродаж");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.НаимПок, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалВсего",    СтрокаСведений.СтТовУчНалВсего,    "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалРубКоп",   СтрокаСведений.СтТовУчНалРубКоп,   "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      СтрокаСведений.СтТовРубКоп18,      "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      СтрокаСведений.СтТовРубКоп10,      "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       СтрокаСведений.СтТовРубКоп0,       "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     СтрокаСведений.СумНДСРубКоп18,     "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     СтрокаСведений.СумНДСРубКоп10,     "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", СтрокаСведений.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, КодВидаОперации);
	КонецЦикла;
	
	Если СтрокаСведений.СвПосредн <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосредн");
		
		Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", СтрокаСведений.СвПосредн.НаимОрг, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.СвПосредн.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.СвПосредн.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.СвПосредн.ИННФЛ, "Т,12");
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокПдтвОпл Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвДокПдтвОпл");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерДокПдтвОпл", ДокументПодтверждения.НомерДокПдтвОпл, "Т,256");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвОпл", ДокументПодтверждения.ДатаДокПдтвОпл, "Т,10");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиДокументДопЛистаКнигиПродаж_503(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги)
	
	ОбщиеСведенияЛиста = ЛистКниги.ОбщиеСведения;
	ЗаписиЛиста = ЛистКниги.Записи;
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	ВывестиУзел503_504_СвПродав(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвДопЛКнПрод");
	
	ВывестиАтрибут(КомпоновщикXML, "НомерДопЛКнПрод", ОбщиеСведенияЛиста.НомерДопЛКнПрод);
	ВывестиАтрибут(КомпоновщикXML, "Период", ОбщиеСведенияЛиста.Период);
	ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ОбщиеСведенияЛиста.ОтчетГод);
	ВывестиАтрибут(КомпоновщикXML, "ДатаДопЛКнПрод", ОбщиеСведенияЛиста.ДатаДопЛКнПрод);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Итого");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      ОбщиеСведенияЛиста.Итого.СтТовРубКоп18, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      ОбщиеСведенияЛиста.Итого.СтТовРубКоп10, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       ОбщиеСведенияЛиста.Итого.СтТовРубКоп0, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     ОбщиеСведенияЛиста.Итого.СумНДСРубКоп18, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     ОбщиеСведенияЛиста.Итого.СумНДСРубКоп10, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", ОбщиеСведенияЛиста.Итого.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Итого
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Всего");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      ОбщиеСведенияЛиста.Всего.СтТовРубКоп18, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      ОбщиеСведенияЛиста.Всего.СтТовРубКоп10, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       ОбщиеСведенияЛиста.Всего.СтТовРубКоп0, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     ОбщиеСведенияЛиста.Всего.СумНДСРубКоп18, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     ОбщиеСведенияЛиста.Всего.СумНДСРубКоп10, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", ОбщиеСведенияЛиста.Всего.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Всего
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвДопЛКнПрод
	
	Для Каждого СтрокаСведений Из ЗаписиЛиста Цикл
		ВывестиСвПродажДопЛистаКнигиПродаж_503(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	ВывестиУзел503_504_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Документ
	
КонецПроцедуры

Процедура ВывестиСвПродажДопЛистаКнигиПродаж_503(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПродаж");
	
	ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.НаимПок, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалВсего",    СтрокаСведений.СтТовУчНалВсего,    "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалРубКоп",   СтрокаСведений.СтТовУчНалРубКоп,   "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      СтрокаСведений.СтТовРубКоп18,      "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      СтрокаСведений.СтТовРубКоп10,      "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       СтрокаСведений.СтТовРубКоп0,       "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     СтрокаСведений.СумНДСРубКоп18,     "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     СтрокаСведений.СумНДСРубКоп10,     "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", СтрокаСведений.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("КодВидОпер");
		КомпоновщикXML.ЗаписатьТекст(КодВидаОперации);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // КодВидОпер
	КонецЦикла;
	
	Для Каждого НомерТД Из СтрокаСведений.НомерТД Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("НомерТД");
		КомпоновщикXML.ЗаписатьТекст(НомерТД);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // НомерТД
	КонецЦикла;
	
	Для Каждого ВидТов Из СтрокаСведений.ВидТов Цикл
		ВидТов = СокрЛП(Лев(ВидТов, 10));
		КомпоновщикXML.ЗаписатьНачалоЭлемента("ВидТов");
		КомпоновщикXML.ЗаписатьТекст(ВидТов);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // ВидТов
	КонецЦикла;
	
	Если СтрокаСведений.СвПосредн <> Неопределено Тогда
		ВывестиУзел503_504_СвПосредн(КомпоновщикXML, СтрокаСведений.СвПосредн);
	КонецЕсли;
	
	Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокПдтвОпл Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СвДокПдтвОпл");
		
		ВывестиАтрибут(КомпоновщикXML, "НомерДокПдтвОпл", ДокументПодтверждения.НомерДокПдтвОпл, "Т,256");
		ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвОпл", ДокументПодтверждения.ДатаДокПдтвОпл, "Т,10");
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвДокПдтвОпл
		
	КонецЦикла;
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПродаж
	
КонецПроцедуры

Процедура ВывестиДокументДопЛистаКнигиПродаж_504(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги)
	
	ОбщиеСведенияЛиста = ЛистКниги.ОбщиеСведения;
	ЗаписиЛиста = ЛистКниги.Записи;
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	ВывестиУзел503_504_СвПродав(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвДопЛКнПрод");
	
	ВывестиАтрибут(КомпоновщикXML, "НомерДопЛКнПрод", ОбщиеСведенияЛиста.НомерДопЛКнПрод);
	ВывестиАтрибут(КомпоновщикXML, "Период", ОбщиеСведенияЛиста.Период);
	ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ОбщиеСведенияЛиста.ОтчетГод);
	ВывестиАтрибут(КомпоновщикXML, "ДатаДопЛКнПрод", ОбщиеСведенияЛиста.ДатаДопЛКнПрод);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Итого");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп20",      ОбщиеСведенияЛиста.Итого.СтТовРубКоп20, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      ОбщиеСведенияЛиста.Итого.СтТовРубКоп18, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      ОбщиеСведенияЛиста.Итого.СтТовРубКоп10, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       ОбщиеСведенияЛиста.Итого.СтТовРубКоп0, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп20",     ОбщиеСведенияЛиста.Итого.СумНДСРубКоп20, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     ОбщиеСведенияЛиста.Итого.СумНДСРубКоп18, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     ОбщиеСведенияЛиста.Итого.СумНДСРубКоп10, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", ОбщиеСведенияЛиста.Итого.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Итого
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Всего");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп20",      ОбщиеСведенияЛиста.Всего.СтТовРубКоп20, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      ОбщиеСведенияЛиста.Всего.СтТовРубКоп18, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      ОбщиеСведенияЛиста.Всего.СтТовРубКоп10, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       ОбщиеСведенияЛиста.Всего.СтТовРубКоп0, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп20",     ОбщиеСведенияЛиста.Всего.СумНДСРубКоп20, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     ОбщиеСведенияЛиста.Всего.СумНДСРубКоп18, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     ОбщиеСведенияЛиста.Всего.СумНДСРубКоп10, "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", ОбщиеСведенияЛиста.Всего.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Всего
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвДопЛКнПрод
	
	Для Каждого СтрокаСведений Из ЗаписиЛиста Цикл
		ВывестиСвПродажДопЛистаКнигиПродаж_504(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	ВывестиУзел503_504_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Документ
	
КонецПроцедуры

Процедура ВывестиСвПродажДопЛистаКнигиПродаж_504(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПродаж");
	
	ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.НаимПок, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалВсего",    СтрокаСведений.СтТовУчНалВсего,    "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалРубКоп",   СтрокаСведений.СтТовУчНалРубКоп,   "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп20",      СтрокаСведений.СтТовРубКоп20,      "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      СтрокаСведений.СтТовРубКоп18,      "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      СтрокаСведений.СтТовРубКоп10,      "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       СтрокаСведений.СтТовРубКоп0,       "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп20",     СтрокаСведений.СумНДСРубКоп20,     "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     СтрокаСведений.СумНДСРубКоп18,     "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     СтрокаСведений.СумНДСРубКоп10,     "Ч,19,2");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", СтрокаСведений.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("КодВидОпер");
		КомпоновщикXML.ЗаписатьТекст(КодВидаОперации);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // КодВидОпер
	КонецЦикла;
	
	Для Каждого НомерТД Из СтрокаСведений.НомерТД Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("НомерТД");
		КомпоновщикXML.ЗаписатьТекст(НомерТД);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // НомерТД
	КонецЦикла;
	
	Для Каждого ВидТов Из СтрокаСведений.ВидТов Цикл
		ВидТов = СокрЛП(Лев(ВидТов, 10));
		КомпоновщикXML.ЗаписатьНачалоЭлемента("ВидТов");
		КомпоновщикXML.ЗаписатьТекст(ВидТов);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // ВидТов
	КонецЦикла;
	
	Если СтрокаСведений.СвПосредн <> Неопределено Тогда
		ВывестиУзел503_504_СвПосредн(КомпоновщикXML, СтрокаСведений.СвПосредн);
	КонецЕсли;
	
	Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокПдтвОпл Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СвДокПдтвОпл");
		
		ВывестиАтрибут(КомпоновщикXML, "НомерДокПдтвОпл", ДокументПодтверждения.НомерДокПдтвОпл, "Т,256");
		ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвОпл", ДокументПодтверждения.ДатаДокПдтвОпл, "Т,10");
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвДокПдтвОпл
		
	КонецЦикла;
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПродаж
	
КонецПроцедуры

Процедура ВывестиУзелЖурналаСчетовФактур501_СвЧ1(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвЧ1");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.Ном, "Ч,6");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаВыстСчФ", СтрокаСведений.ДатаПередачиПолучения, "Т,10");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодСпосВыст", СтрокаСведений.КодСпособаВыставления, "Т,1");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчетаФактуры, "Т,256");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчетаФактуры, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКорректировочногоСчетаФактуры, "Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ", СтрокаСведений.ДатаКорректировочногоСчетаФактуры, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаСведений.НомерИсправления, "Т,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИсправления, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.КонтрагентНаименование, "Т,1000");
	РеквизитыКонтрагента = РасщепленнаяСтрока(СтрокаСведений.КонтрагентИННКПП, "/");
	ИНН = СокрЛП(РеквизитыКонтрагента[0]);
	КПП = СокрЛП(РеквизитыКонтрагента[1]);
	Если СтрДлина(ИНН) = 12 Тогда
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", ИНН, "Т,12");
	ИНаче
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", ИНН, "Т,10");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП", КПП, "Т,9");
	КонецЕсли;
	
	РеквизитыВалюты = РасщепленнаяСтрока(СтрокаСведений.Валюта, ",");
	КодОКВ = СокрЛП(РеквизитыВалюты[1]);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодОКВ", КодОКВ, "Т,3");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СуммаДокумента, "Ч,17,2");
	
	КодыОпераций = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСведений.КодВидаОперации, ";");
	Для Каждого КодОперации Из КодыОпераций Цикл
		Если ЗначениеЗаполнено(КодыОпераций) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СокрЛП(КодОперации), "Т,2");
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДС) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСумНДС");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаСведений.СуммаНДС, "Ч,17,2");
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУменьшение)
	 ИЛИ ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУвеличение) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнСтоимКСчФ");
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУменьшение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаСведений.СуммаДокументаРазницаУменьшение, "Ч,17,2");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУвеличение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаСведений.СуммаДокументаРазницаУменьшение, "Ч,17,2");
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУменьшение)
	 ИЛИ ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУвеличение) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнНДСКСчФ");
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУменьшение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаСведений.СуммаНДСРазницаУменьшение, "Ч,17,2");
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУвеличение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаСведений.СуммаНДСРазницаУвеличение, "Ч,17,2");
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиУзелЖурналаСчетовФактур501_СвЧ2(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвЧ2");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.Ном, "Ч,6");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаПолСчФ", СтрокаСведений.ДатаПередачиПолучения, "Т,10");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодСпосВыст", СтрокаСведений.КодСпособаВыставления, "Т,1");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчетаФактуры, "Т,256");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчетаФактуры, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКорректировочногоСчетаФактуры, "Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ", СтрокаСведений.ДатаКорректировочногоСчетаФактуры, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаСведений.НомерИсправления, "Т,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИсправления, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.КонтрагентНаименование, "Т,1000");
	РеквизитыКонтрагента = РасщепленнаяСтрока(СтрокаСведений.КонтрагентИННКПП, "/");
	ИНН = СокрЛП(РеквизитыКонтрагента[0]);
	КПП = СокрЛП(РеквизитыКонтрагента[1]);
	Если СтрДлина(ИНН) = 12 Тогда
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", ИНН, "Т,12");
	ИНаче
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", ИНН, "Т,10");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП", КПП, "Т,9");
	КонецЕсли;
	
	РеквизитыВалюты = РасщепленнаяСтрока(СтрокаСведений.Валюта, ",");
	КодОКВ = СокрЛП(РеквизитыВалюты[1]);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодОКВ", КодОКВ, "Т,3");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СуммаДокумента, "Ч,17,2");
	
	КодыОпераций = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСведений.КодВидаОперации, ";");
	Для Каждого КодОперации Из КодыОпераций Цикл
		Если ЗначениеЗаполнено(КодыОпераций) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СокрЛП(КодОперации), "Т,2");
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДС) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСумНДС");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаСведений.СуммаНДС, "Ч,17,2");
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУменьшение)
	 ИЛИ ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУвеличение) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнСтоимКСчФ");
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУменьшение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаСведений.СуммаДокументаРазницаУменьшение, "Ч,17,2");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУвеличение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаСведений.СуммаДокументаРазницаУменьшение, "Ч,17,2");
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУменьшение)
	 ИЛИ ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУвеличение) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнНДСКСчФ");
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУменьшение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаСведений.СуммаНДСРазницаУменьшение, "Ч,17,2");
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУвеличение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаСведений.СуммаНДСРазницаУвеличение, "Ч,17,2");
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиСвЧ1ЖурналаСчетовФактур_502(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвЧ1");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаВыстСчФ", СтрокаСведений.ДатаВыстСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрСчФ", СтрокаСведений.НомерИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ",  СтрокаСведений.ДатаИспрСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрКСчФ", СтрокаСведений.НомерИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ",  СтрокаСведений.ДатаИспрКСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.НаимПок, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего,    "Ч,19,2");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, КодВидаОперации);
	КонецЦикла;
	
	Если СтрокаСведений.СвПосредн <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосредн");
		
		Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", СтрокаСведений.СвПосредн.НаимОрг, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.СвПосредн.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.СвПосредн.КПП, "Т,9");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФпрод", СтрокаСведений.СвПосредн.НомерСчФпрод, "Т,256");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФпрод", СтрокаСведений.СвПосредн.ДатаСчФпрод, "Т,10");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.СвПосредн.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФпрод", СтрокаСведений.СвПосредн.НомерСчФпрод, "Т,256");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФпрод", СтрокаСведений.СвПосредн.ДатаСчФпрод, "Т,10");
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСумНДС");
	
	Если ТипЗнч(СтрокаСведений.ВтчСумНДС) = Тип("Число") Тогда
		ЗначениеУзла = Формат(СтрокаСведений.ВтчСумНДС,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
	Иначе
		ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.ВтчСумНДС), 7);
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Если СтрокаСведений.РазнСтоимКСчФ <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнСтоимКСчФ");
		
		Если СтрокаСведений.РазнСтоимКСчФ.Свойство("Ум")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.Ум) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			
			ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.Ум,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
		КонецЕсли;
		
		Если СтрокаСведений.РазнСтоимКСчФ.Свойство("Увел")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.Увел) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			
			ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.Увел,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если СтрокаСведений.РазнНДСКСчФ <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнНДСКСчФ");
		
		Если СтрокаСведений.РазнНДСКСчФ.Свойство("Ум")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.Ум) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			
			Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.Ум) = Тип("Число") Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.Ум,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			Иначе
				ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.Ум), 7);
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		Если СтрокаСведений.РазнНДСКСчФ.Свойство("Увел")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.Увел) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			
			Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.Увел) = Тип("Число") Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.Увел,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			Иначе
				ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.Увел), 7);
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиСвЧ2ЖурналаСчетовФактур_502(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвЧ2");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаПолСчФ", СтрокаСведений.ДатаПолСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрСчФ", СтрокаСведений.НомерИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ",  СтрокаСведений.ДатаИспрСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрКСчФ", СтрокаСведений.НомерИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ",  СтрокаСведений.ДатаИспрКСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.НаимПрод, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего, "Ч,19,2");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, КодВидаОперации);
	КонецЦикла;
	
	Если СтрокаСведений.СвПосредн <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосредн");
		
		Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛСубКом") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимСубКом", СтрокаСведений.СвПосредн.НаимСубКом, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛСубКом", СтрокаСведений.СвПосредн.ИННЮЛСубКом, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КППСубКом", СтрокаСведений.СвПосредн.КППСубКом, "Т,9");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодВидСдел", СтрокаСведений.СвПосредн.КодВидСдел, "Т,1");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		ИначеЕсли СтрокаСведений.СвПосредн.Свойство("ИННФЛСубКом") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛСубКом", СтрокаСведений.СвПосредн.ИННФЛСубКом, "Т,12");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодВидСдел", СтрокаСведений.СвПосредн.КодВидСдел, "Т,1");
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСумНДС");
	
	Если ТипЗнч(СтрокаСведений.ВтчСумНДС) = Тип("Число") Тогда
		ЗначениеУзла = Формат(СтрокаСведений.ВтчСумНДС,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
	Иначе
		ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.ВтчСумНДС), 7);
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Если СтрокаСведений.РазнСтоимКСчФ <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнСтоимКСчФ");
		
		Если СтрокаСведений.РазнСтоимКСчФ.Свойство("Ум")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.Ум) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			
			ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.Ум,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
		КонецЕсли;
		
		Если СтрокаСведений.РазнСтоимКСчФ.Свойство("Увел")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.Увел) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			
			ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.Увел,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если СтрокаСведений.РазнНДСКСчФ <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнНДСКСчФ");
		
		Если СтрокаСведений.РазнНДСКСчФ.Свойство("Ум")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.Ум) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			
			Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.Ум) = Тип("Число") Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.Ум,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			Иначе
				ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.Ум), 7);
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		Если СтрокаСведений.РазнНДСКСчФ.Свойство("Увел")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.Увел) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			
			Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.Увел) = Тип("Число") Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.Увел,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			Иначе
				ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.Увел), 7);
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиСвЧ1ЖурналаСчетовФактур_503(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвЧ1");
	
	ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаВыстСчФ", СтрокаСведений.ДатаВыстСчФ, "Т,10");
	
	ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрСчФ", СтрокаСведений.НомерИспрСчФ, "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ",  СтрокаСведений.ДатаИспрСчФ,  "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрКСчФ", СтрокаСведений.НомерИспрКСчФ, "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ",  СтрокаСведений.ДатаИспрКСчФ,  "Т,10");
	
	ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.НаимПок, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("КодВидОпер");
		КомпоновщикXML.ЗаписатьТекст(КодВидаОперации);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // КодВидОпер
	КонецЦикла;
	
	ВывестиСвЧ1ЖурналаСчетовФактур_503_СвГр10_19(КомпоновщикXML, СтрокаСведений);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвЧ1
	
КонецПроцедуры

Процедура ВывестиСвЧ1ЖурналаСчетовФактур_503_СвГр10_19(КомпоновщикXML, СтрокаСведенийСФ)
	
	Для Каждого СтрокаСведений Из СтрокаСведенийСФ.СвГр10_19 Цикл
	
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СвГр10_19");
		
		ВывестиАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
		ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего, "Ч,19,2");
		
		Если СтрокаСведений.СвПосредн <> Неопределено Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПосредн");
			
			Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛ") Тогда
				КомпоновщикXML.ЗаписатьНачалоЭлемента("СведЮЛ");
				
				ВывестиАтрибут(КомпоновщикXML, "НаимОрг", СтрокаСведений.СвПосредн.НаимОрг, "Т,1000");
				ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.СвПосредн.ИННЮЛ, "Т,10");
				ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.СвПосредн.КПП, "Т,9");
				
				ВывестиАтрибут(КомпоновщикXML, "НомерСчФпрод", СтрокаСведений.СвПосредн.НомерСчФпрод, "Т,256");
				ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаСчФпрод", СтрокаСведений.СвПосредн.ДатаСчФпрод, "Т,10");
				
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведЮЛ
				
			Иначе
				КомпоновщикXML.ЗаписатьНачалоЭлемента("СведИП");
				
				ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.СвПосредн.ИННФЛ, "Т,12");
				
				ВывестиАтрибут(КомпоновщикXML, "НомерСчФпрод", СтрокаСведений.СвПосредн.НомерСчФпрод, "Т,256");
				ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаСчФпрод", СтрокаСведений.СвПосредн.ДатаСчФпрод, "Т,10");
				
				КомпоновщикXML.ЗаписатьНачалоЭлемента("ФИОИП");
				
				ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
				ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
				ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
				
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // ФИОИП
				
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведИП
				
			КонецЕсли;
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПосредн
			
		КонецЕсли;
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("ВтчСумНДС");
		
		Если ТипЗнч(СтрокаСведений.ВтчСумНДС) = Тип("Число") Тогда
			ЗначениеУзла = Формат(СтрокаСведений.ВтчСумНДС, "ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
			КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
		Иначе
			ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.ВтчСумНДС), 7);
			КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
			КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
		КонецЕсли;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // ВтчСумНДС
		
		Если СтрокаСведений.РазнСтоимКСчФ <> Неопределено Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("РазнСтоимКСчФ");
			
			Если СтрокаСведений.РазнСтоимКСчФ.Свойство("Ум")
			   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.Ум) Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.Ум, "ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML.ЗаписатьНачалоЭлемента("Ум");
				КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // Ум
			КонецЕсли;
			
			Если СтрокаСведений.РазнСтоимКСчФ.Свойство("Увел")
			   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.Увел) Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.Увел, "ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML.ЗаписатьНачалоЭлемента("Увел");
				КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // Увел
			КонецЕсли;
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // РазнСтоимКСчФ
			
		КонецЕсли;
		
		Если СтрокаСведений.РазнНДСКСчФ <> Неопределено Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("РазнНДСКСчФ");
			
			Если СтрокаСведений.РазнНДСКСчФ.Свойство("Ум")
			   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.Ум) Тогда
				КомпоновщикXML.ЗаписатьНачалоЭлемента("Ум");
				
				Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.Ум) = Тип("Число") Тогда
					ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.Ум, "ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
					КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
					КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
					КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
				Иначе
					ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.Ум), 7);
					КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
					КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
					КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
				КонецЕсли;
				
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // Ум
			КонецЕсли;
			
			Если СтрокаСведений.РазнНДСКСчФ.Свойство("Увел")
			   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.Увел) Тогда
				КомпоновщикXML.ЗаписатьНачалоЭлемента("Увел");
				
				Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.Увел) = Тип("Число") Тогда
					ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.Увел, "ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
					КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
					КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
					КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
				Иначе
					ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.Увел), 7);
					КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
					КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
					КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
				КонецЕсли;
				
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // Увел
			КонецЕсли;
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // РазнНДСКСчФ
			
		КонецЕсли;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвГр10_19
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСвЧ2ЖурналаСчетовФактур_503(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвЧ2");
	
	ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаПолСчФ", СтрокаСведений.ДатаПолСчФ, "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрСчФ", СтрокаСведений.НомерИспрСчФ, "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ",  СтрокаСведений.ДатаИспрСчФ,  "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрКСчФ", СтрокаСведений.НомерИспрКСчФ, "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ",  СтрокаСведений.ДатаИспрКСчФ,  "Т,10");
	
	ВывестиАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.НаимПрод, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	ВывестиАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
	
	ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего, "Ч,19,2");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("КодВидОпер");
		КомпоновщикXML.ЗаписатьТекст(КодВидаОперации);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // КодВидОпер
	КонецЦикла;
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("НомДатаСчФ");
	
	ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // НомДатаСчФ
	
	Если СтрокаСведений.СвПосредн <> Неопределено Тогда
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПосредн");
		
		ВывестиАтрибут(КомпоновщикXML, "КодВидСдел", СтрокаСведений.СвПосредн.КодВидСдел, "Т,1");
		
		Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛСубКом") Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("СведЮЛ");
			
			ВывестиАтрибут(КомпоновщикXML, "НаимСубКом", СтрокаСведений.СвПосредн.НаимСубКом, "Т,1000");
			ВывестиАтрибут(КомпоновщикXML, "ИННЮЛСубКом", СтрокаСведений.СвПосредн.ИННЮЛСубКом, "Т,10");
			ВывестиАтрибут(КомпоновщикXML, "КППСубКом", СтрокаСведений.СвПосредн.КППСубКом, "Т,9");
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведЮЛ
			
		ИначеЕсли СтрокаСведений.СвПосредн.Свойство("ИННФЛСубКом") Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("СведИП");
			
			ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛСубКом", СтрокаСведений.СвПосредн.ИННФЛСубКом, "Т,12");
			
			КомпоновщикXML.ЗаписатьНачалоЭлемента("ФИОИП");
			
			ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
			ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
			ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // ФИОИП
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведИП
			
		КонецЕсли;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПосредн
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("ВтчСумНДС");
	
	Если ТипЗнч(СтрокаСведений.ВтчСумНДС) = Тип("Число") Тогда
		ЗначениеУзла = Формат(СтрокаСведений.ВтчСумНДС,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
		КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
	Иначе
		ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.ВтчСумНДС), 7);
		КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
		КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // ВтчСумНДС
	
	Если СтрокаСведений.РазнСтоимКСчФ <> Неопределено Тогда
		КомпоновщикXML.ЗаписатьНачалоЭлемента("РазнСтоимКСчФ");
		
		Если СтрокаСведений.РазнСтоимКСчФ.Свойство("Ум")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.Ум) Тогда
			ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.Ум,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			КомпоновщикXML.ЗаписатьНачалоЭлемента("Ум");
			КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // Ум
		КонецЕсли;
		
		Если СтрокаСведений.РазнСтоимКСчФ.Свойство("Увел")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.Увел) Тогда
			ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.Увел,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			КомпоновщикXML.ЗаписатьНачалоЭлемента("Увел");
			КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // Увел
		КонецЕсли;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // РазнСтоимКСчФ
		
	КонецЕсли;
	
	Если СтрокаСведений.РазнНДСКСчФ <> Неопределено Тогда
		КомпоновщикXML.ЗаписатьНачалоЭлемента("РазнНДСКСчФ");
		
		Если СтрокаСведений.РазнНДСКСчФ.Свойство("Ум")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.Ум) Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("Ум");
			
			Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.Ум) = Тип("Число") Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.Ум,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
				КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
			Иначе
				ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.Ум), 7);
				КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
				КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
			КонецЕсли;
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // Ум
			
		КонецЕсли;
		
		Если СтрокаСведений.РазнНДСКСчФ.Свойство("Увел")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.Увел) Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("Увел");
			
			Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.Увел) = Тип("Число") Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.Увел,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
				КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
			Иначе
				ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.Увел), 7);
				КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
				КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
			КонецЕсли;
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // Увел
			
		КонецЕсли;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвЧ2
	
КонецПроцедуры

Функция ИдентификаторФайлаЭлектронногоПредставления(СведенияОтправки)
	
	Префикс = СведенияОтправки.КНД;
	Если СведенияОтправки.ЭтоПБОЮЛ Тогда
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННФЛ);
	Иначе
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННЮЛ) + СокрЛП(СведенияОтправки.КПП);
	КонецЕсли;
	ИдентификаторПолучателя = СведенияОтправки.КодНО;
	ИдентификационныйНомер1 = Строка(Новый УникальныйИдентификатор);
	ДатаФормированияФайла = Формат(СведенияОтправки.ДатаФормированияФайла, "ДФ=yyyyMMdd");
	ИдентификационныйНомер2 = Строка(Новый УникальныйИдентификатор);
	
	ИдентификаторФайла = Префикс
	                   + "_" + ИдентификаторОтправителя
	                   + "_" + ИдентификаторПолучателя
	                   + "_" + ИдентификационныйНомер1
	                   + "_" + ДатаФормированияФайла
	                   + "_" + ИдентификационныйНомер2;
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, КНД)
	
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("КНД", КНД);
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ОсновныеСведения.Вставить("ДатаФормированияФайла", ТекущаяДатаСеанса());
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(ВыгружаемыйДокумент.Организация);
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ОсновныеСведения.Вставить("ЭтоЮЛ", НЕ ЭтоПБОЮЛ);
	ОсновныеСведения.Вставить("ЭтоИП", ЭтоПБОЮЛ);
	
	НалоговыйПериод = КонецКвартала(ВыгружаемыйДокумент.НалоговыйПериод);
	СведенияОбОрганизации = СведенияОбОрганизации(ВыгружаемыйДокумент.Организация, НалоговыйПериод);
	
	Если ЭтоПБОЮЛ Тогда
		ОсновныеСведения.Вставить("ИННФЛ", СведенияОбОрганизации.ИННЮЛ);
		СведенияОЮрФизЛице  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
			ВыгружаемыйДокумент.Организация,
			НалоговыйПериод);
		СвидетельствоОРегистрации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОЮрФизЛице, "Свидетельство");
		ОсновныеСведения.Вставить("СвГосРегИП", СвидетельствоОРегистрации);
		
		СведенияОбИП = СведенияОбИП(ВыгружаемыйДокумент);
		ОсновныеСведения.Вставить("ФамилияИП",  СведенияОбИП.Фамилия);
		ОсновныеСведения.Вставить("ИмяИП",      СведенияОбИП.Имя);
		ОсновныеСведения.Вставить("ОтчествоИП", СведенияОбИП.Отчество);
	Иначе
		ОсновныеСведения.Вставить("НаимОрг", СведенияОбОрганизации.НаимЮЛПол);
		ОсновныеСведения.Вставить("ИННЮЛ", СведенияОбОрганизации.ИННЮЛ);
		ОсновныеСведения.Вставить("КПП", СведенияОбОрганизации.КППЮЛ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыгружаемыйДокумент.ИФНС) Тогда
		ОсновныеСведения.Вставить("КодНО", ВыгружаемыйДокумент.ИФНС.Код);
	Иначе
		ОсновныеСведения.Вставить("КодНО", СведенияОбОрганизации.КодНО);
	КонецЕсли;
	
	ДобавитьСведенияОПодписанте(ОсновныеСведения, ВыгружаемыйДокумент);
	
	ОсновныеСведения.Вставить("Период", ВыгружаемыйДокумент.ПериодПоСКНП);
	
	ОтчетныйГод = Формат(ВыгружаемыйДокумент.НалоговыйПериод, "ДФ=yyyy");
	ОсновныеСведения.Вставить("ОтчетГод", ОтчетныйГод);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
	
КонецФункции

Функция СведенияОбОрганизации(Организация, НалоговыйПериод)
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации, ФИО, ОКВЭД, ОКАТО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация,
		НалоговыйПериод,
		СтрокаСведений);
	
	Возврат СведенияОбОрганизации;
	
КонецФункции

Процедура ДобавитьСведенияОПодписанте(ОсновныеСведения, ВыгружаемыйДокумент)
	
	ИФНС = ВыгружаемыйДокумент.ИФНС;
	
	Если ЗначениеЗаполнено(ИФНС) И ЗначениеЗаполнено(ИФНС.Представитель) Тогда
		Если ТипЗнч(ИФНС.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ФИОПодписанта = СведенияОФизЛице(ИФНС.Представитель, ВыгружаемыйДокумент.Дата);
			ОсновныеСведения.Вставить("ПрПодп", "2");
			ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
			ОсновныеСведения.Вставить("НаимДокПодп",  ИФНС.ДокументПредставителя);
			
		ИначеЕсли НЕ ПустаяСтрока(ИФНС.УполномоченноеЛицоПредставителя) Тогда
			ОсновныеСведения.Вставить("ПрПодп", "2");
			СоставляющиеФИО = СоставляющиеФИО(ИФНС.УполномоченноеЛицоПредставителя);
			ОсновныеСведения.Вставить("ПодпФамилия",  СоставляющиеФИО.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      СоставляющиеФИО.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", СоставляющиеФИО.Отчество);
			ОсновныеСведения.Вставить("НаимДокПодп",  ИФНС.ДокументПредставителя);
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОсновныеСведения.Свойство("ПрПодп") ИЛИ (ОсновныеСведения.Свойство("ПрПодп") И ОсновныеСведения.ПрПодп <> "2") Тогда
		Если ЗначениеЗаполнено(ВыгружаемыйДокумент.Подписант) Тогда
			ФИОПодписанта = СведенияОФизЛице(ВыгружаемыйДокумент.Подписант, ВыгружаемыйДокумент.Дата);
			ОсновныеСведения.Вставить("ПрПодп", "1");
			ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
			
		Иначе
			ФИОПодписанта = СведенияОРуководителе(ВыгружаемыйДокумент);
			ОсновныеСведения.Вставить("ПрПодп", "1");
			ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СведенияОРуководителе(ВыгружаемыйДокумент)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	РеквизитыОтветственныхЛиц = ОтветственныеЛицаБП.ОтветственныеЛица(ВыгружаемыйДокумент.Организация, ВыгружаемыйДокумент.Дата);
	Если ЗначениеЗаполнено(РеквизитыОтветственныхЛиц.Руководитель) Тогда
		Результат.Фамилия 	= СокрЛП(РеквизитыОтветственныхЛиц.РуководительФИО.Фамилия);
		Результат.Имя 		= СокрЛП(РеквизитыОтветственныхЛиц.РуководительФИО.Имя);
		Результат.Отчество	= СокрЛП(РеквизитыОтветственныхЛиц.РуководительФИО.Отчество);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СведенияОФизЛице(ФизЛицо, Дата)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(Дата, Новый Структура("ФизическоеЛицо", ФизЛицо));
		Если ДанныеФЛ.Количество() > 0 Тогда
			Результат.Фамилия  = СокрЛП(ДанныеФЛ[0].Фамилия);
			Результат.Имя      = СокрЛП(ДанныеФЛ[0].Имя);
			Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоставляющиеФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = СтрНайти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = СтрНайти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

Функция СведенияОбИП(ВыгружаемыйДокумент)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	НаименованияОрганизации = Справочники.Организации.НаименованияНаДату(ВыгружаемыйДокумент.Организация, ВыгружаемыйДокумент.Дата);
	ЗаполнитьЗначенияСвойств(Результат, НаименованияОрганизации.ФИО);
	
	Возврат Результат;
	
КонецФункции

Функция РасщепленнаяСтрока(СтрокаЗначения, Разделитель)
	
	Результат = Новый Массив;
	
	ПозицияРазделителя = СтрНайти(СтрокаЗначения, Разделитель);
	Если ПозицияРазделителя = 0 Тогда
		Результат.Добавить(СтрокаЗначения);
		Результат.Добавить("");
	Иначе
		Результат.Добавить(Лев(СтрокаЗначения, ПозицияРазделителя - 1));
		Результат.Добавить(Сред(СтрокаЗначения, ПозицияРазделителя + 1));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область УниверсальныеСтруктурыЭлектронныхПредставлений

#Область Форматы501_502

Процедура ВыгрузитьСведенияОбОрганизации_501(КомпоновщикXML, ПараметрыВыгрузки)
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	Иначе
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, Знач СтавкаНДС, СтоимостьБезНДС, СуммаНДС = 0)
	
	Если ТипЗнч(СтавкаНДС) <> Тип("Строка") Тогда
		СтавкаНДС = Строка(СтавкаНДС);
	КонецЕсли;
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовБезНДС", СтоимостьБезНДС, "Ч,17,2");
	
	Если СтавкаНДС = "без НДС" Тогда // Не локализуется
		ТипСтавки = "текст";
		ЗначениеСуммы = "без НДС"; // Не локализуется
	Иначе
		ТипСтавки = "процент";
		ЗначениеСуммы = Формат(СуммаНДС, "ЧДЦ=2; ЧРД=.; ЧН=-; ЧГ=0");
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "НалСт");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НалСтВел", СтавкаНДС, "Т,7");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НалСтТип", ТипСтавки, "Т,7");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНал");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", ЗначениеСуммы, "Т,18");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиУзел_Подписант(КомпоновщикXML,ПараметрыВыгрузки)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Подписант");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПрПодп", ПараметрыВыгрузки.ПрПодп);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИО");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ПодпФамилия, "Т,60");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ПодпИмя, "Т,60");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ПодпОтчество, "Т,60");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Если ПараметрыВыгрузки.Свойство("НаимДокПодп") И ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПодп) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПред");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимДок", ПараметрыВыгрузки.НаимДокПодп, "Т,120");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

#КонецОбласти

#Область Форматы503_504

Процедура ВывестиУзел503_СвПокуп(КомпоновщикXML, ПараметрыВыгрузки)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПокуп");
	
	ВывестиЭлементыУзловНалогоплательщика503_504(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПокуп
	
КонецПроцедуры

Процедура ВывестиУзел503_504_СвПродав(КомпоновщикXML, ПараметрыВыгрузки)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПродав");
	
	ВывестиЭлементыУзловНалогоплательщика503_504(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПродав
	
КонецПроцедуры

Процедура ВывестиУзел503_СвНП(КомпоновщикXML, ПараметрыВыгрузки)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвНП");
	
	ВывестиЭлементыУзловНалогоплательщика503_504(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвНП
	
КонецПроцедуры

Процедура ВывестиЭлементыУзловНалогоплательщика503_504(КомпоновщикXML, ПараметрыВыгрузки)
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СведИП");
		
		ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
		ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("ФИОИП");
		
		ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
		ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // ФИОИП
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведИП
		
	Иначе
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СведЮЛ");
		
		ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
		ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведЮЛ
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит в файлы электронного представления книги покупок, книги продаж и их дополнительных листов
// сведения о посреднике. Процедура неприменима к соотвествующему элементу журнала учета счетов-фактур.
//
Процедура ВывестиУзел503_504_СвПосредн(КомпоновщикXML, СвПосредн)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПосредн");
	
	Если СвПосредн.Свойство("ИННЮЛ") Тогда
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СведЮЛ");
		
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НаимОрг", СвПосредн.НаимОрг, "Т,1000");
		ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СвПосредн.ИННЮЛ, "Т,10");
		ВывестиАтрибут(КомпоновщикXML, "КПП", СвПосредн.КПП, "Т,9");
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведЮЛ
		
	Иначе
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СведИП");
		
		ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СвПосредн.ИННФЛ, "Т,12");
		
		Если ЗначениеЗаполнено(СвПосредн.Фамилия)
		 ИЛИ ЗначениеЗаполнено(СвПосредн.Имя)
		 ИЛИ ЗначениеЗаполнено(СвПосредн.Отчество) Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("ФИОИП");
			
			ВывестиАтрибут(КомпоновщикXML, "Фамилия", СвПосредн.Фамилия, "Т,60");
			ВывестиАтрибут(КомпоновщикXML, "Имя", СвПосредн.Имя, "Т,60");
			ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СвПосредн.Отчество, "Т,60");
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // ФИОИП
			
		КонецЕсли;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведИП
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПосредн
	
КонецПроцедуры

Процедура ВывестиУзел503_504_Подписант(КомпоновщикXML, ПараметрыВыгрузки)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Подписант");
	
	ВывестиАтрибут(КомпоновщикXML, "ПрПодп", ПараметрыВыгрузки.ПрПодп);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("ФИО");
	
	ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ПодпФамилия, "Т,60");
	ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ПодпИмя, "Т,60");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ПодпОтчество, "Т,60");
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // ФИО
	
	Если ПараметрыВыгрузки.Свойство("НаимДокПодп") И ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПодп) Тогда
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПред");
		ВывестиАтрибут(КомпоновщикXML, "НаимДок", ПараметрыВыгрузки.НаимДокПодп, "Т,120");
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПред
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Подписант
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КомпоновщикXML_Версия1

Функция КомпоновщикXML_Новый()
	
	КомпоновщикXML = Новый Структура;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ЗаписьТекста.Записать("<?xml version=""1.0"" encoding=""windows-1251""?>");
	
	КомпоновщикXML.Вставить("ИмяФайла", ИмяВременногоФайла);
	КомпоновщикXML.Вставить("ЗаписьТекста", ЗаписьТекста);
	КомпоновщикXML.Вставить("СтэкУзлов", Новый Массив);
	КомпоновщикXML.Вставить("НовыйУзелЗакрыт", Истина);
	КомпоновщикXML.Вставить("Табуляция", "");
	
	Возврат КомпоновщикXML;
	
КонецФункции

Процедура КомпоновщикXML_СоздатьУзел(КомпоновщикXML, ИмяУзла)
	
	Если НЕ КомпоновщикXML.НовыйУзелЗакрыт Тогда
		КомпоновщикXML.ЗаписьТекста.Записать(">");
		КомпоновщикXML.Табуляция = КомпоновщикXML.Табуляция + Символы.Таб;
	КонецЕсли;
	
	КомпоновщикXML.СтэкУзлов.Вставить(0, ИмяУзла);
	
	КомпоновщикXML.ЗаписьТекста.Записать(Символы.ПС + КомпоновщикXML.Табуляция + "<" + ИмяУзла);
	
	КомпоновщикXML.НовыйУзелЗакрыт = Ложь;
	
КонецПроцедуры

Процедура КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ПредставлениеЗначения = ПредставлениеЗначенияXML(ЗначениеАтрибута, ТипАтрибута);
	
	КомпоновщикXML.ЗаписьТекста.Записать(" " + ИмяАтрибута + "=""" + ПредставлениеЗначения + """");
	
КонецПроцедуры

Процедура КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, Значение, ТипЗначения = "Т")
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПредставлениеЗначения = ПредставлениеЗначенияXML(Значение, ТипЗначения);
		КомпоновщикXML.ЗаписьТекста.Записать(">" + ПредставлениеЗначения + "</" + КомпоновщикXML.СтэкУзлов[0] + ">");
	Иначе
		КомпоновщикXML.ЗаписьТекста.Записать(" />");
	КонецЕсли;
	
	КомпоновщикXML.СтэкУзлов.Удалить(0);
	КомпоновщикXML.НовыйУзелЗакрыт = Истина;
	
КонецПроцедуры

Процедура КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML)
	
	Если КомпоновщикXML.НовыйУзелЗакрыт Тогда
		КомпоновщикXML.Табуляция = Сред(КомпоновщикXML.Табуляция, 2);
		КомпоновщикXML.ЗаписьТекста.Записать(Символы.ПС + КомпоновщикXML.Табуляция + "</" + КомпоновщикXML.СтэкУзлов[0] + ">");
		
	Иначе
		КомпоновщикXML.ЗаписьТекста.Записать("/>");
		КомпоновщикXML.НовыйУзелЗакрыт = Истина;
		
	КонецЕсли;
	
	КомпоновщикXML.СтэкУзлов.Удалить(0);
	
КонецПроцедуры

Функция КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML)
	
	КомпоновщикXML.ЗаписьТекста.Закрыть();
	КомпоновщикXML.ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(КомпоновщикXML.ИмяФайла);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(КомпоновщикXML.ИмяФайла);
	
	Возврат АдресВХранилище;
	
КонецФункции

Функция ПредставлениеЗначенияXML(Значение, ТипЗначения)
	
	ОписаниеТипаАтрибута = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТипЗначения);
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(Значение, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(Значение);
		ПредставлениеЗначения = ЗаменитьСимволыРазметки(ПредставлениеЗначения);
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.; ЧН=; ЧГ=0";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(Значение, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(Значение);
	КонецЕсли;
	
	Возврат ПредставлениеЗначения;
	
КонецФункции

Функция ЗаменитьСимволыРазметки(Знач ПредставлениеЗначения)
	
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "&", "&amp;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "<", "&lt;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, ">", "&gt;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, """", "&quot;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "'", "&apos;");
	
	Возврат ПредставлениеЗначения;
	
КонецФункции

#КонецОбласти

#Область КомпоновщикXML_Версия2

Функция НовыйКомпоновщикXML(ИмяФайла, Кодировка = "windows-1251")
	
	КомпоновщикXML = Новый ЗаписьXML();
	КомпоновщикXML.ОткрытьФайл(ИмяФайла, Кодировка);
	КомпоновщикXML.ЗаписатьОбъявлениеXML();
	
	Возврат КомпоновщикXML;
	
КонецФункции

Процедура ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ОписаниеТипаАтрибута = СтрРазделить(ТипАтрибута, ",");
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьАтрибут(ИмяАтрибута, ПредставлениеЗначения);
	
КонецПроцедуры

Процедура ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкаНаХранилищеКомпоновщикаXML(КомпоновщикXML, ИмяФайла)
	
	КомпоновщикXML.Закрыть();
	КомпоновщикXML = Неопределено;
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат АдресВХранилище;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

