////////////////////////////////////////////////////////////////////////////////
// КадровыйУчетБазовый: методы кадрового учета, работающие на стороне сервера.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует кадровые приказы, при включении ведения кадрового учета документами,
// выполняется в фоновом задании.
//
// Параметры:
//		ПараметрыЗадания - Необходим для поддержки работы длительных операций, для запуска
//							в качестве фонового задания, не используется.
//		АдресВоВременномХранилище - Необходим для поддержки работы длительных операций, для запуска
//							в качестве фонового задания, не используется.
//
Процедура СформироватьКадровыеПриказы(ПараметрыЗадания = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Если Не ФОИспользоватьКадровыйУчет Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение необходимых текущих данных.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК ТекущаяОрганизация,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК ТекущееПодразделение,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК ТекущаяДолжность,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости КАК ТекущийВидЗанятости,
		|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
		|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
		|	ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка КАК ТекущаяТарифнаяСтавка,
		|	ТекущаяТарифнаяСтавкаСотрудников.ТекущийСпособРасчетаАванса КАК ТекущийСпособРасчетаАванса,
		|	ТекущаяТарифнаяСтавкаСотрудников.ТекущийАванс КАК ТекущийАванс,
		|	ТекущиеКадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
		|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
		|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = ТекущаяТарифнаяСтавкаСотрудников.ФизическоеЛицо
		|			И ТекущиеКадровыеДанныеСотрудников.Сотрудник = ТекущаяТарифнаяСтавкаСотрудников.Сотрудник
		|			И ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = ТекущаяТарифнаяСтавкаСотрудников.ГоловнаяОрганизация
		|			И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = ТекущаяТарифнаяСтавкаСотрудников.ТекущаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизации.ТекущаяОрганизация КАК ТекущаяОрганизация,
		|	СотрудникиОрганизации.ТекущееПодразделение КАК ТекущееПодразделение,
		|	СотрудникиОрганизации.ТекущаяДолжность КАК ТекущаяДолжность,
		|	СотрудникиОрганизации.ТекущийВидЗанятости КАК ТекущийВидЗанятости,
		|	СотрудникиОрганизации.ДатаПриема КАК ДатаПриема,
		|	СотрудникиОрганизации.ДатаУвольнения КАК ДатаУвольнения,
		|	СотрудникиОрганизации.ТекущаяТарифнаяСтавка КАК ТекущаяТарифнаяСтавка,
		|	СотрудникиОрганизации.ТекущийСпособРасчетаАванса КАК ТекущийСпособРасчетаАванса,
		|	СотрудникиОрганизации.КоличествоСтавок КАК КоличествоСтавок,
		|	СотрудникиОрганизации.ТекущийАванс КАК ТекущийАванс,
		|	ЕСТЬNULL(ПриемНаРаботу.Ссылка, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)) КАК ПриказОПриеме,
		|	ЕСТЬNULL(Увольнение.Ссылка, ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)) КАК ПриказОбУвольнении
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК СотрудникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ПО СотрудникиОрганизации.Сотрудник = ПриемНаРаботу.Сотрудник
		|			И (ПриемНаРаботу.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Увольнение КАК Увольнение
		|		ПО СотрудникиОрганизации.Сотрудник = Увольнение.Сотрудник
		|			И (Увольнение.Проведен)
		|ГДЕ
		|	(ЕСТЬNULL(ПриемНаРаботу.Ссылка, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)
		|			ИЛИ СотрудникиОрганизации.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
		|				И СотрудникиОрганизации.ДатаУвольнения <> СотрудникиОрганизации.ДатаПриема
		|				И ЕСТЬNULL(Увольнение.Ссылка, ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка))
		|	И СотрудникиОрганизации.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И СотрудникиОрганизации.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НачислениеОклад = ПланыВидовРасчета.Начисления.НачислениеПоУмолчанию(Отбор);
	
	ДанныеСотрудников = РезультатЗапроса.Выбрать();
	Пока ДанныеСотрудников.Следующий() Цикл
		
		// Создание приказов о приеме
		Если ЗначениеЗаполнено(ДанныеСотрудников.ДатаПриема)
			И Не ЗначениеЗаполнено(ДанныеСотрудников.ПриказОПриеме) Тогда
			
			ДокументПриемНаРаботу = Документы.ПриемНаРаботу.СоздатьДокумент();
			
			ДокументПриемНаРаботу.НаименованиеДокумента = НСтр("ru='Приказ'");
			ДокументПриемНаРаботу.ОтразитьВТрудовойКнижке = Истина;
			ДокументПриемНаРаботу.Дата = ДанныеСотрудников.ДатаПриема;
			ДокументПриемНаРаботу.ДатаПриема = ДанныеСотрудников.ДатаПриема;
			ДокументПриемНаРаботу.Организация = ДанныеСотрудников.ТекущаяОрганизация;
			ДокументПриемНаРаботу.Сотрудник = ДанныеСотрудников.Сотрудник;
			ДокументПриемНаРаботу.Подразделение = ДанныеСотрудников.ТекущееПодразделение;
			ДокументПриемНаРаботу.Должность = ДанныеСотрудников.ТекущаяДолжность;
			ДокументПриемНаРаботу.ВидЗанятости = ДанныеСотрудников.ТекущийВидЗанятости;
			ДокументПриемНаРаботу.КоличествоСтавок = ДанныеСотрудников.КоличествоСтавок;
			ДокументПриемНаРаботу.СпособРасчетаАванса = ДанныеСотрудников.ТекущийСпособРасчетаАванса;
			ДокументПриемНаРаботу.Аванс = ДанныеСотрудников.ТекущийАванс;
			
			// Добавление начисления "Оклад" и установка размера тарифной ставки.
			Если ЗначениеЗаполнено(НачислениеОклад) Тогда
				Начисление = ДокументПриемНаРаботу.Начисления.Добавить();
				Начисление.Начисление = НачислениеОклад;
				Начисление.Размер = ДанныеСотрудников.ТекущаяТарифнаяСтавка;
			КонецЕсли;
			
			ДокументПриемНаРаботу.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументПриемНаРаботу.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения",    Истина);
			ДокументПриемНаРаботу.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение",               Истина);
			
			Попытка
				ДокументПриемНаРаботу.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
				ДокументПриемНаРаботу.Записать(РежимЗаписиДокумента.Запись);
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При создании кадровых приказов не удалось провести приказ об увольнении сотрудника %1, необходимо выполнить проведение в ручном режиме.'"),
					ДанныеСотрудников.Сотрудник);
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					ДокументПриемНаРаботу.Ссылка);
				
			КонецПопытки;
			
		КонецЕсли;
		
		// Создание приказов об увольнении.
		Если ЗначениеЗаполнено(ДанныеСотрудников.ДатаУвольнения)
			И Не ЗначениеЗаполнено(ДанныеСотрудников.ПриказОбУвольнении) Тогда
			
			ДокументУвольнение = Документы.Увольнение.СоздатьДокумент();
			
			ДокументУвольнение.НаименованиеДокумента = НСтр("ru='Приказ'");
			ДокументУвольнение.ОтразитьВТрудовойКнижке = Истина;
			ДокументУвольнение.Дата = ДанныеСотрудников.ДатаУвольнения;
			ДокументУвольнение.ДатаУвольнения = ДанныеСотрудников.ДатаУвольнения;
			ДокументУвольнение.Организация = ДанныеСотрудников.ТекущаяОрганизация;
			ДокументУвольнение.Сотрудник = ДанныеСотрудников.Сотрудник;
			
			ДокументУвольнение.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументУвольнение.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения",    Истина);
			ДокументУвольнение.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение",               Истина);
			
			Попытка
				ДокументУвольнение.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
				ДокументУвольнение.Записать(РежимЗаписиДокумента.Запись);
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При создании кадровых приказов не удалось провести приказ о приеме сотрудника %1, необходимо выполнить проведение в ручном режиме.'"),
					ДанныеСотрудников.Сотрудник);
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					ДокументУвольнение.Ссылка);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// См. КадровыйУчет.ПравоНаРазделУчета.
Функция ПравоНаРазделУчета(Право, ВидУчета) Экспорт
	
	Если ВидУчета = "НачисленнаяЗарплата" Тогда
		ОбъектМетаданных = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам;
	ИначеЕсли ВидУчета = "ПлановыеНачисления" Тогда
		ОбъектМетаданных = Метаданные.РегистрыСведений.ПлановыеНачисления;
	ИначеЕсли ВидУчета = "КадровыеДанные" Тогда
		ОбъектМетаданных = Метаданные.РегистрыСведений.ТекущиеКадровыеДанныеСотрудников;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В функции ""%1"", в параметре № 2 ""%2"" не обслуживается значение ""%3"".'"),
			"КадровыйУчет.ПравоНаРазделУчета",
			"ВидУчета",
			ВидУчета);
	КонецЕсли;
	
	Возврат ПравоДоступа(Право, ОбъектМетаданных);
	
КонецФункции

Функция ПравоИзмененияКадровогоСостояния() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.ПриемНаРаботу);
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, ТолькоБронированиеПозиции, Записывать, ЗаполнятьНаборЗаписей = Истина) Экспорт
	
	Если КадровыеДвижения.Количество() > 0 Тогда
		Движения.КадроваяИсторияСотрудников.Записывать = Истина;
	КонецЕсли; 
	
	Если ЗаполнятьНаборЗаписей Тогда
		
		ТаблицаДляПроведения = КадровыеДвижения.Скопировать();
		
		ТаблицаДляПроведения.Колонки.ДатаСобытия.Имя = "Период";
		Движения.КадроваяИсторияСотрудников.Загрузить(ТаблицаДляПроведения);
		ГоловныеСотрудники = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Сотрудник"), "ГоловнойСотрудник");
		Для Каждого СтрокаДанных Из Движения.КадроваяИсторияСотрудников Цикл
			СтрокаДанных.ГоловнойСотрудник = ГоловныеСотрудники.Получить(СтрокаДанных.Сотрудник);
			СтрокаДанных.ЭтоГоловнойСотрудник = (СтрокаДанных.Сотрудник = СтрокаДанных.ГоловнойСотрудник);
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(РегистраторОбъект)) Тогда
		Если РегистраторОбъект.ДополнительныеСвойства.Свойство("ОтключитьПроверкуДатыЗапретаИзменения")
			И РегистраторОбъект.ДополнительныеСвойства.ОтключитьПроверкуДатыЗапретаИзменения Тогда
			
			Движения.КадроваяИсторияСотрудников.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция КритерииПоискаСотрудниковПоКоллекцииОтборов(Отборы) Экспорт
	
	КритерииПоиска = Новый Соответствие;
	
	Для каждого УсловиеПоиска Из Отборы Цикл
		
		Если ТипЗнч(УсловиеПоиска) = Тип("Соответствие") Тогда
			
			Для каждого ЭлементСоответствия Из УсловиеПоиска Цикл
				КритерииПоиска.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
			КонецЦикла;
			
			Продолжить;
			
		ИначеЕсли ДобавитьКритерийПоискаСправочникаФизическиеЛица(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоКонтактнойИнформацииФизическогоЛица(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоДокументамУдостоверяющимЛичность(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОбИнвалидности(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОГражданстве(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОФИОФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или УчетСтраховыхВзносовФизическиеЛица.ДобавитьКритерийПоискаПоСведениямОСтатусахЗастрахованныхЛиц(КритерииПоиска, УсловиеПоиска)
			Или УчетНДФЛФизическиеЛица.ДобавитьКритерийПоискаПоСведениямОСтатусахНалогоплательщиков(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаСправочникаСотрудники(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоТекущимКадровымДаннымСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоТекущимТарифнымСтавкамСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямКадровойИсторииСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОбУчетеЗатрат(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОПлановыхАвансах(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОЗарплатныхПроектах(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОВидахЗанятостиСотрудников(КритерииПоиска, УсловиеПоиска) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля <> ВРег("ДатаНачала")
			И ИмяПоля <> ВРег("ДатаОкончания")
			И ИмяПоля <> ВРег("Период") Тогда
			
			ВызватьИсключение НСтр("ru='Неизвестное условие поиска'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	КадровыйУчет.УдалитьПустыеКритерииПоиска(КритерииПоиска);
	
	КритерииПоискаКадровойИсторииСотрудников = КритерииПоиска.Получить("РегистрСведений.КадроваяИсторияСотрудников");
	Если КритерииПоискаКадровойИсторииСотрудников <> Неопределено Тогда
		
		КритерииПоискаСправочникаСотрудники = КритерииПоиска.Получить("Справочник.Сотрудники");
		Если КритерииПоискаСправочникаСотрудники <> Неопределено Тогда
			
			ЕстьКритерийПоискаФизическихЛиц = Ложь;
			ПереносимыеУсловияПоиска = Новый Массив;
			Для ИндексУсловия = 0 По КритерииПоискаСправочникаСотрудники.Количество() - 1 Цикл
				
				УсловиеПоиска = КритерииПоискаСправочникаСотрудники[ИндексУсловия];
				
				ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
				Если ИмяПоля = ВРег("ФизическоеЛицо")
					Или ИмяПоля = ВРег("ГоловнаяОрганизация") Тогда
					
					ПереносимыеУсловияПоиска.Вставить(0, ИндексУсловия);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПереносимыеУсловияПоиска.Количество() > 0 Тогда
				
				Для каждого ИндексУсловия Из ПереносимыеУсловияПоиска Цикл
					
					УсловиеПоиска = КритерииПоискаСправочникаСотрудники[ИндексУсловия];
					КритерииПоискаКадровойИсторииСотрудников.Добавить(УсловиеПоиска);
					
					ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
					Если ИмяПоля <> ВРег("ФизическоеЛицо") Тогда
						КритерииПоискаСправочникаСотрудники.Удалить(ИндексУсловия);
					КонецЕсли;
					
				КонецЦикла;
				
				КритерииПоиска.Вставить("РегистрСведений.КадроваяИсторияСотрудников", КритерииПоискаКадровойИсторииСотрудников);
				
			КонецЕсли;
			
			Если КадровыйУчет.ЭтоПустыеОтборыКритерияПоиска(КритерииПоискаСправочникаСотрудники) Тогда
				КритерииПоиска.Удалить("Справочник.Сотрудники");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КритерииПоиска;
	
КонецФункции

Процедура ПроверитьУникальностьТабельногоНомера(ТабельныйНомер, Сотрудник) Экспорт
	
	Если Не ЗначениеЗаполнено(ТабельныйНомер) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", ТабельныйНомер);
	Запрос.УстановитьПараметр("Ссылка", Сотрудник);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Код = &Код
		|	И Сотрудники.ГоловнойСотрудник = Сотрудники.Ссылка
		|	И Сотрудники.Ссылка <> &Ссылка";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Значение ""%1"" поля ""Таб. номер"" не уникально'"),
			ТабельныйНомер);
			
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, ПутьКПолямЛичныхДанных) Экспорт
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ФизическоеЛицо";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ФизическоеЛицо";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Возраст";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Возраст";
	
	// Контактная информация
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "EMailПредставление";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".КонтактнаяИнформация.Email";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "АдресДляИнформированияПредставление";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".КонтактнаяИнформация.АдресДляИнформирования";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "АдресЗаПределамиРФПредставление";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".КонтактнаяИнформация.АдресЗаПределамиРФ";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "АдресМестаПроживанияПредставление";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".КонтактнаяИнформация.АдресМестаПроживания";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "АдресПоПропискеПредставление";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".КонтактнаяИнформация.АдресПоПрописке";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ТелефонДомашнийПредставление";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".КонтактнаяИнформация.ТелефонДомашний";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ТелефонРабочийПредставление";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".КонтактнаяИнформация.ТелефонРабочий";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ТелефонМобильныйПредставление";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".КонтактнаяИнформация.ТелефонМобильный";
	
	// Сведения об инвалидности
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ИнвалидностьПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбИнвалидности.ДатаВнесенияСведений";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ИнвалидностьДатаВыдачи";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбИнвалидности.ДатаВыдачи";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Инвалидность";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЛОЖЬ";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбИнвалидности.Инвалидность";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ИнвалидностьСрокДействияСправки";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбИнвалидности.СрокДействия";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ИнвалидностьГруппаИнвалидности";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбИнвалидности.ГруппаИнвалидности";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ИнвалидностьСерияСправки";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбИнвалидности.СерияСправки";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ИнвалидностьНомерСправки";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбИнвалидности.НомерСправки";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ИнвалидностьПроцентПотериТрудоспособности";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0.0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОбИнвалидности.ПроцентПотериТрудоспособности";

	// ФИО
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ФИОПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ФИО.ДатаИзменения";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Фамилия";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ФИО.Фамилия";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Имя";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ФИО.Имя";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Отчество";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ФИО.Отчество";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ФИОПолные";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ФИО.ФамилияИмяОтчество";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ИОФамилия";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ФИО.РасшифровкаПодписи";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ФамилияИО";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ФИО.ФамилияИИнициалы";
	
	// Сведения о гражданстве
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ГражданствоПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОГражданстве.ДатаВнесенияСведений";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ИННВСтранеГражданства";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОГражданстве.ИНН";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Страна";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СведенияОГражданстве.Страна";
	
	// Сведения об удостоверении личности
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДокументВид";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ДокументУдостоверяющийЛичность.Вид";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДокументПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ДокументУдостоверяющийЛичность.ДатаВнесенияСведений";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДокументДатаВыдачи";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ДокументУдостоверяющийЛичность.ДатаВыдачи";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДокументСрокДействия";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ДокументУдостоверяющийЛичность.СрокДействия";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДокументКемВыдан";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ДокументУдостоверяющийЛичность.КемВыдан";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДокументКодМВД";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ДокументУдостоверяющийЛичность.КодМВД";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДокументКодПодразделения";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ДокументУдостоверяющийЛичность.КодПодразделения";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДокументНомер";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ДокументУдостоверяющийЛичность.Номер";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДокументСерия";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ДокументУдостоверяющийЛичность.Серия";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДокументСтранаВыдачи";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ДокументУдостоверяющийЛичность.СтранаВыдачи";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДокументПредставление";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ДокументУдостоверяющийЛичность.Представление";
	
	УчетСтраховыхВзносовФизическиеЛица.ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, ПутьКПолямЛичныхДанных);
	УчетНДФЛФизическиеЛица.ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, ПутьКПолямЛичныхДанных);
	
КонецПроцедуры

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ПутьКПолямЛичныхДанных) Экспорт
	
	КадровыйУчет.ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, ПутьКПолямЛичныхДанных);
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Сотрудник";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".Сотрудник";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Организация";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".Организация";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Подразделение";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".Подразделение";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Должность";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".Должность";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ВидЗанятости";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ВидЗанятости";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ВидЗанятостиПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ВидЗанятостиДатаРегистрации";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ВидСобытия";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ВидИзмененияКадровойИнформации";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДатаЗавершенияРаботы";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ДатаЗавершенияРаботы";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "РабочееМестоПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ДатаИзмененияКадровойИнформации";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДатаПриема";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ДатаПриема";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДатаУвольнения";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ДатаУвольнения";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "КоличествоСтавок";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".КоличествоСтавок";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ДоляНеполногоРабочегоВремени";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ДоляНеполногоРабочегоВремени";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ОсновноеРабочееМестоВОрганизации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ИСТИНА";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ОсновноеРабочееМестоВОрганизации";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ОформленПоТрудовомуДоговору";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ИСТИНА";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ОформленПоТрудовомуДоговору";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ПриказОбУвольнении";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ПриказОбУвольнении";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ПриказОПриеме";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ПриказОПриеме";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "РабочееМестоРегистратор";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "НЕОПРЕДЕЛЕНО";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".Регистратор";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "КлассУсловийТруда";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".КлассУсловийТруда";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "КлассУсловийТрудаПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".КлассУсловийТрудаДатаРегистрации";
	
	// Сведения об учете затрат
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "УчетЗатратПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СведенияОбУчетеЗатрат.ДатаРегистрации";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "УчетЗатратДокументОснование";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СведенияОбУчетеЗатрат.ДокументОснование";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ОтношениеКЕНВД";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СведенияОбУчетеЗатрат.ОтношениеКЕНВД";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "СпособОтраженияЗарплатыВБухучете";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СведенияОбУчетеЗатрат.СпособОтраженияВБухучете";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "СтатьяФинансирования";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СведенияОбУчетеЗатрат.СтатьяФинансирования";
	
	// Сведения об оплате труда
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ОплатаТрудаПериодЗаписи";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СведенияОбОплатеТруда.ДатаИзмененияФОТ";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Надбавка";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СведенияОбОплатеТруда.Надбавка";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ТарифнаяСтавка";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СведенияОбОплатеТруда.ТарифнаяСтавка";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "ФОТ";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СведенияОбОплатеТруда.ФОТ";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Аванс";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СведенияОбОплатеТруда.РазмерАванса";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "АвансПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СведенияОбОплатеТруда.ДатаИзмененияАванса";
	
	ОписаниеПоля = ДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "СпособРасчетаАванса";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".СведенияОбОплатеТруда.СпособРасчетаАванса";
	
	ЭлектронныеТрудовыеКнижки.ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ПутьКПолямЛичныхДанных);
	
КонецПроцедуры


#Область ФормированиеТекстовЗапросовВременныхТаблиц

Функция ЗапросВТОбъектПоИдентификатору(ПолноеИмяОбъекта, ИмяВТОбъектПоИдентификатору, ИдентификаторОбъекта) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Объекты.Ссылка КАК ИдентификаторОбъекта
		|ПОМЕСТИТЬ ВТОбъектПоИдентификатору
		|ИЗ
		|	ПолноеИмяОбъекта КАК Объекты
		|ГДЕ
		|	Объекты.ИдентификаторОбъекта = ""ИдентификаторОбъекта""";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИдентификаторОбъекта", ИдентификаторОбъекта);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТОбъектПоИдентификатору", ИмяВТОбъектПоИдентификатору);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТОбъектПредопределенноеЗначение(ПолноеИмяОбъекта, ИмяВТОбъектПредопределенноеЗначение, ИмяЭлемента) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПредопределенноеЗначениеСсылка", ОбщегоНазначения.ПредопределенныйЭлемент(ПолноеИмяОбъекта + "." + ИмяЭлемента));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Объекты.Ссылка КАК ИмяЭлемента
		|ПОМЕСТИТЬ ВТОбъектПредопределенноеЗначение
		|ИЗ
		|	ПолноеИмяОбъекта КАК Объекты
		|ГДЕ
		|	Объекты.Ссылка = &ПредопределенноеЗначениеСсылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяЭлемента", ИмяЭлемента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТОбъектПредопределенноеЗначение", ИмяВТОбъектПредопределенноеЗначение);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТФункциональныеОпцииОрганизаций(ТолькоРазрешенные, ИмяВТФункциональныеОпцииОрганизаций, МассивФункциональныхОпций) Экспорт
	
	Запрос = Новый Запрос;
	
	СоответствиеХранилищ = Новый Соответствие;
	МассивФункциональныхОпцийСправочникаОрганизации = Новый Массив;
	СоответствиеПериодичностиХранилищ = Новый Соответствие;
	
	Для каждого ИмяФункциональнойОпции Из МассивФункциональныхОпций Цикл
		
		Если ВРег(ИмяФункциональнойОпции) = "ОРГАНИЗАЦИЯ" Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеФункциональнойОпции = Метаданные.ФункциональныеОпции[ИмяФункциональнойОпции];
		ИмяОбъектаХранилища = МетаданныеФункциональнойОпции.Хранение.Родитель().ПолноеИмя();
		
		Если ИмяОбъектаХранилища = "Справочник.Организации" Тогда
			
			МассивФункциональныхОпцийСправочникаОрганизации.Добавить( Новый Структура("ИмяФункциональнойОпции,ИмяХранилища", ИмяФункциональнойОпции, МетаданныеФункциональнойОпции.Хранение.Имя));
			
		Иначе
			
			СоответствиеХранилища = СоответствиеХранилищ.Получить(ИмяОбъектаХранилища);
			Если СоответствиеХранилища = Неопределено Тогда
				СоответствиеХранилища = Новый Массив;
			КонецЕсли;
			
			СоответствиеХранилища.Добавить(Новый Структура("ИмяФункциональнойОпции,ИмяХранилища", ИмяФункциональнойОпции, МетаданныеФункциональнойОпции.Хранение.Имя));
			СоответствиеХранилищ.Вставить(ИмяОбъектаХранилища, СоответствиеХранилища);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить("ВЫБРАТЬ РАЗРЕШЕННЫЕ");
	
	ТекстЗапросаПолей = Новый Массив;
	ТекстЗапросаПолей.Добавить("	Организации.Ссылка КАК Организация");
	
	Для каждого СтруктураОписания Из МассивФункциональныхОпцийСправочникаОрганизации Цикл
		ТекстЗапросаПолей.Добавить("Организации." + СтруктураОписания.ИмяХранилища + " КАК " +  СтруктураОписания.ИмяФункциональнойОпции);
	КонецЦикла;
	
	Для каждого СоответствиеХранилища Из СоответствиеХранилищ Цикл
		
		МетаданныеОбъектаХранилища = Метаданные.НайтиПоПолномуИмени(СоответствиеХранилища.Ключ);
		СоответствиеПериодичностиХранилищ.Вставить(СоответствиеХранилища.Ключ, МетаданныеОбъектаХранилища.ПериодичностьРегистраСведений);
		
		Если Метаданные.РегистрыСведений.Содержит(МетаданныеОбъектаХранилища) Тогда
			
			Для каждого СтруктураОписания Из СоответствиеХранилища.Значение Цикл
				ТекстЗапросаПолей.Добавить(СтрЗаменить(СоответствиеХранилища.Ключ, ".", "") + "." + СтруктураОписания.ИмяХранилища + " КАК " +  СтруктураОписания.ИмяФункциональнойОпции);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстыЗапроса.Добавить(СтрСоединить(ТекстЗапросаПолей, "," + Символы.Таб));
	
	ТекстыЗапроса.Добавить(
		"ПОМЕСТИТЬ ВТФункциональныеОпцииОрганизаций
		|ИЗ Справочник.Организации КАК Организации");
	
	Для каждого СоответствиеХранилища Из СоответствиеХранилищ Цикл
		
		ПериодичностьРегистраСведений = СоответствиеПериодичностиХранилищ.Получить(СоответствиеХранилища.Ключ);
		
		Если ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ПутьКОбъектуХранилища = СоответствиеХранилища.Ключ;
		Иначе
			ПутьКОбъектуХранилища = СоответствиеХранилища.Ключ + ".СрезПоследних";
		КонецЕсли;
		
		ТекстыЗапроса.Добавить(
			"	ЛЕВОЕ СОЕДИНЕНИЕ " + ПутьКОбъектуХранилища + " КАК " + СтрЗаменить(СоответствиеХранилища.Ключ, ".", "") + "
			|		ПО Организации.Ссылка = " + СтрЗаменить(СоответствиеХранилища.Ключ, ".", "") + ".Организация");
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, Символы.ПС);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТФункциональныеОпцииОрганизаций", ИмяВТФункциональныеОпцииОрганизаций);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает структуру, содержащую описание временной таблицы, используемой в качестве фильтра
// для получения контактной информации.
//
//	Параметры:
//		ИмяВТОтборОбъектов - Строка, имя временной таблицы, служащей отбором для получаемой контактной информации.
//		ИмяРеквизитаОбъект - Строка, имя реквизита во временной таблице, содержащего объект отбора контактной информации.
//		ИмяРеквизитаВид - Строка, имя реквизита во временной таблице, содержащего вид контактной информации, если не указано
//							в результирующую таблицу будет помещена контактная информация любого вида.
//		ИмяРеквизитаТип - Строка, имя реквизита во временной таблице, содержащего тип контактной информации, если не указано
//							в результирующую таблицу будет помещена контактная информация любого типа.
//
//	Возвращаемое значение:
//		Структура - содержащая ключи:
//			ИмяВТОтборОбъектов
//			ИмяРеквизитаОбъект
//			ИмяРеквизитаВид
//			ИмяРеквизитаТип
//
Функция ОписаниеВременнойТаблицыОтборовКонтактнойИнформации(ИмяВТОтборОбъектов, ИмяРеквизитаОбъект, ИмяРеквизитаВид = "", ИмяРеквизитаТип = "") Экспорт
	
	ОписаниеВременнойТаблицы = Новый Структура;
	
	ОписаниеВременнойТаблицы.Вставить("ИмяВТОтборОбъектов", ИмяВТОтборОбъектов);
	ОписаниеВременнойТаблицы.Вставить("ИмяРеквизитаОбъект", ИмяРеквизитаОбъект);
	ОписаниеВременнойТаблицы.Вставить("ИмяРеквизитаВид", ИмяРеквизитаВид);
	ОписаниеВременнойТаблицы.Вставить("ИмяРеквизитаТип", ИмяРеквизитаТип);
	
	Возврат ОписаниеВременнойТаблицы;
	
КонецФункции

// Возвращает запрос, с подготовленным текстом, для создания временной таблицы, содержащей контактную информацию.
//
//	Параметры:
//		ТолькоРазрешенные - Булево, если истина - запрос строится с учетом прав доступа к объектам, содержащим
//							контактную информацию, если ложь - без учета прав доступа (возможно, для выполнения запроса
//							потребуется установить привилегированный режим).
//		ИмяВТКонтактнаяИнформация - Строка, имя временной таблицы, которая создастся в ходе выполнения запроса.
//		ПолноеИмяОбъектаМетаданных - Строка, полное имя объекта метаданных, содержащего контактную информацию
//							(например, "Справочник.ФизическиеЛица")
//		ОписаниеВременнойТаблицыОтборов - Структура, подготовленная с помощью метода
//		                                  "ОписаниеВременнойТаблицыОтборовКонтактнойИнформации".
//
//	Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТКонтактнаяИнформация(ТолькоРазрешенные, ИмяВТКонтактнаяИнформация, ПолноеИмяОбъектаМетаданных, ОписаниеВременнойТаблицыОтборов) Экспорт
	
	Запрос = Новый Запрос;
	
	// Формирование текста запроса.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Объект,
		|	КонтактнаяИнформация.НомерСтроки,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.ЗначенияПолей
		|ПОМЕСТИТЬ ВТВсяКонтактнаяИнформация
		|ИЗ
		|	&КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборКонтактнойИнформации КАК ОтборКонтактнойИнформации
		|		ПО КонтактнаяИнформация.Ссылка = ОтборКонтактнойИнформации.РеквизитОбъекта
		|			И (&ТекстОтбораКонтактнойИнформации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсяКонтактнаяИнформация.Объект,
		|	ВсяКонтактнаяИнформация.Вид,
		|	МИНИМУМ(ВсяКонтактнаяИнформация.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТПервыеЗначенияПоВидуКонтактнойИнформации
		|ИЗ
		|	ВТВсяКонтактнаяИнформация КАК ВсяКонтактнаяИнформация
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсяКонтактнаяИнформация.Объект,
		|	ВсяКонтактнаяИнформация.Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсяКонтактнаяИнформация.Объект,
		|	ВсяКонтактнаяИнформация.Тип,
		|	ВсяКонтактнаяИнформация.Вид,
		|	ВсяКонтактнаяИнформация.Представление,
		|	ВсяКонтактнаяИнформация.ЗначенияПолей
		|ПОМЕСТИТЬ ВТКонтактнаяИнформация
		|ИЗ
		|	ВТВсяКонтактнаяИнформация КАК ВсяКонтактнаяИнформация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПервыеЗначенияПоВидуКонтактнойИнформации КАК ПервыеЗначенияПоВидуКонтактнойИнформации
		|		ПО ВсяКонтактнаяИнформация.Объект = ПервыеЗначенияПоВидуКонтактнойИнформации.Объект
		|			И ВсяКонтактнаяИнформация.Вид = ПервыеЗначенияПоВидуКонтактнойИнформации.Вид
		|			И ВсяКонтактнаяИнформация.НомерСтроки = ПервыеЗначенияПоВидуКонтактнойИнформации.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсяКонтактнаяИнформация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПервыеЗначенияПоВидуКонтактнойИнформации";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	ТекстОтбораКонтактнойИнформации = "";
	ТекстыОтбораКонтактнойИнформации = Новый Массив;
	
	Если Не ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаВид) Тогда
		ТекстыОтбораКонтактнойИнформации.Добавить("
			|			И КонтактнаяИнформация.Вид = ОтборКонтактнойИнформации.РеквизитВид");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаТип) Тогда
		ТекстыОтбораКонтактнойИнформации.Добавить("
			|			И КонтактнаяИнформация.Тип = ОтборКонтактнойИнформации.РеквизитТип");
	КонецЕсли;
	
	Если ТекстыОтбораКонтактнойИнформации.Количество() = 0 Тогда
		ТекстОтбораКонтактнойИнформации = "";
	Иначе
		ТекстОтбораКонтактнойИнформации = СтрСоединить(ТекстыОтбораКонтактнойИнформации);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКонтактнаяИнформация", ИмяВТКонтактнаяИнформация);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборКонтактнойИнформации", ОписаниеВременнойТаблицыОтборов.ИмяВТОтборОбъектов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонтактнаяИнформация", ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеквизитОбъекта", ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаОбъект);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (&ТекстОтбораКонтактнойИнформации)", ТекстОтбораКонтактнойИнформации);
	
	Если Не ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаВид) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеквизитВид", ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаВид);
	КонецЕсли; 
	
	Если Не ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаТип) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеквизитТип", ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаТип);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти


#Область ПолучениеРабочихМестСотрудниковОрганизации

Функция ПоляВТРабочиеМестаСотрудников() Экспорт
	
	ПоляВТРабочиеМеста = Новый Структура;
	ПоляВТРабочиеМеста.Вставить("Период");
	ПоляВТРабочиеМеста.Вставить("ПериодЗаписи");
	ПоляВТРабочиеМеста.Вставить("ГоловнаяОрганизация");
	ПоляВТРабочиеМеста.Вставить("Организация");
	ПоляВТРабочиеМеста.Вставить("Сотрудник");
	ПоляВТРабочиеМеста.Вставить("ГоловнойСотрудник");
	ПоляВТРабочиеМеста.Вставить("ФизическоеЛицо");
	ПоляВТРабочиеМеста.Вставить("Подразделение");
	ПоляВТРабочиеМеста.Вставить("Должность");
	ПоляВТРабочиеМеста.Вставить("КоличествоСтавок");
	ПоляВТРабочиеМеста.Вставить("РольСотрудника", Перечисления.РолиСотрудников.Работник);
	ПоляВТРабочиеМеста.Вставить("ВидСобытия");
	ПоляВТРабочиеМеста.Вставить("ДокументОснование");
	
	Возврат ПоляВТРабочиеМеста;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииФормированияОтчетов

#Область УнифицированнаяФормаТ2

Функция ДополнительныеСведенияУнифицированнойФормыТ2(СтрокиДанных, ДатаОтчета, КлючВарианта) Экспорт
	
	ДополнительныеСведения = Новый Соответствие;
	ДанныеЗаполненияКадровойИстории = Новый Соответствие;
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТаблицаСотрудников = Новый ТаблицаЗначений;
		ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		
		Для каждого СтрокаСотрудника Из СтрокиДанных Цикл
			НоваяСтрокаТаблицыСотрудников = ТаблицаСотрудников.Добавить();
			НоваяСтрокаТаблицыСотрудников.Сотрудник = СтрокаСотрудника.Сотрудник;
			НоваяСтрокаТаблицыСотрудников.ДатаОкончания = Макс(СтрокаСотрудника.ПараметрыДанныхПериод, СтрокаСотрудника.РаботаДатаПриема);
		КонецЦикла;
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаСотрудников);
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидСобытия", "<>", "ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)");
	
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
			"КадроваяИсторияСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра,
			ПараметрыПостроения);
		
		ОписанияНачислений = КадровыйУчет.ОписанияСоставаНачисленийПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТКадроваяИсторияСотрудников");
	
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
			|	КадроваяИсторияСотрудников.Должность КАК Должность,
			|	КадроваяИсторияСотрудников.Регистратор.Номер КАК РегистраторНомер,
			|	КадроваяИсторияСотрудников.Регистратор.НомерПриказа КАК РегистраторНомерПриказа,
			|	КадроваяИсторияСотрудников.Регистратор.Дата КАК РегистраторДата
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	Период";
		
		ВыборкаКадроваяИстория = Запрос.Выполнить().Выбрать();
		Пока ВыборкаКадроваяИстория.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ДанныеЗаполненияКадровойИсторииПоСотруднику = Новый Массив;
			ОписанияСотрудника = ОписанияНачислений.Получить(ВыборкаКадроваяИстория.Сотрудник);
			
			Пока ВыборкаКадроваяИстория.Следующий() Цикл
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("ДатаПеревода", ВыборкаКадроваяИстория.Период);
				Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ВыборкаКадроваяИстория.Подразделение) Тогда
					СтруктураСтроки.Вставить("ПодразделениеПеревода", ВыборкаКадроваяИстория.Подразделение.ПолноеНаименование());
				Иначе
					СтруктураСтроки.Вставить("ПодразделениеПеревода", ВыборкаКадроваяИстория.Подразделение);
				КонецЕсли; 
				СтруктураСтроки.Вставить("ДолжностьПеревода", ВыборкаКадроваяИстория.Должность);
				
				Если ОписанияСотрудника <> Неопределено Тогда
					ОписанияПериода = ОписанияСотрудника.Получить(ВыборкаКадроваяИстория.Период);
				КонецЕсли; 
				
				Если ОписанияПериода = Неопределено Тогда
					ОписанияПериода = ОписаниеСоставаНачислений();
				КонецЕсли; 
				
				СтруктураСтроки.Вставить("ТарифнаяСтавка", ПредставлениеОкладаИНадбавок(ОписанияПериода));
				
				НомерПриказа = ЗарплатаКадрыОтчеты.НомерНаПечать(
					ВыборкаКадроваяИстория.РегистраторНомер, ВыборкаКадроваяИстория.РегистраторНомерПриказа);
			
				СтруктураСтроки.Вставить("ОснованиеПеревода", НСтр("ru='Пр'") + ". № "
						+ НомерПриказа + " " + НСтр("ru='от'") + " " + Формат(ВыборкаКадроваяИстория.РегистраторДата, "ДЛФ=D"));
				
				ДанныеЗаполненияКадровойИсторииПоСотруднику.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
			ДанныеЗаполненияКадровойИстории.Вставить(ВыборкаКадроваяИстория.Сотрудник, ДанныеЗаполненияКадровойИсторииПоСотруднику);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДополнительныеСведения.Вставить("ДанныеЗаполненияКадровойИстории", ДанныеЗаполненияКадровойИстории);
	
	// Отпуска
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", СтрокиДанных.ВыгрузитьКолонку("Сотрудник"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.Сотрудник КАК Сотрудник,
		|	Отпуск.Номер КАК НомерПриказа,
		|	Отпуск.Дата КАК ДатаПриказа,
		|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаС,
		|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаПо,
		|	Отпуск.КоличествоДнейОсновногоОтпуска КАК ДнейОтпуска,
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодС,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодПо,
		|	Отпуск.Основание
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Проведен
		|	И Отпуск.Сотрудник В(&Сотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	ДатаС";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеЗаполнения = Новый Соответствие;
		ВыборкаОтпуска = РезультатЗапроса.Выбрать();
		Пока ВыборкаОтпуска.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ДанныеЗаполненияПоСотруднику = Новый Массив;
			Пока ВыборкаОтпуска.Следующий() Цикл
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("ВидОтпуска", НСтр("ru='Основной'"));
				СтруктураСтроки.Вставить("ДатаС", ВыборкаОтпуска.ДатаС);
				СтруктураСтроки.Вставить("ДатаПо", ВыборкаОтпуска.ДатаПо);
				СтруктураСтроки.Вставить("ДнейОтпуска", ВыборкаОтпуска.ДнейОтпуска);
				СтруктураСтроки.Вставить("РабочийГодС", ВыборкаОтпуска.РабочийГодС);
				СтруктураСтроки.Вставить("РабочийГодПо", ВыборкаОтпуска.РабочийГодПо);
				СтруктураСтроки.Вставить("ОснованиеОтпуска", "Пр.№ "+ СокрЛП(ВыборкаОтпуска.НомерПриказа) +" от "
						+ Формат(ВыборкаОтпуска.ДатаПриказа, "ДЛФ=D") + " " + ВыборкаОтпуска.Основание);
						
				ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
			ДанныеЗаполнения.Вставить(ВыборкаОтпуска.Сотрудник, ДанныеЗаполненияПоСотруднику);
			
		КонецЦикла;
			
		ДополнительныеСведения.Вставить("ДанныеЗаполненияОтпуска", ДанныеЗаполнения);

	КонецЕсли; 
	
	Возврат ДополнительныеСведения;
	
КонецФункции

Процедура НастроитьВариантыОтчетаУнифицированнойФормыТ2(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Т2");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Унифицированная форма Т-2.'");
	
КонецПроцедуры

#КонецОбласти

Процедура НастроитьВариантыОтчетаПоСотрудникам(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ШтатныеСотрудники");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Список сотрудников, работающих по трудовым договорам с окладами, 
		|сведениями об авансе, графиком работы и личной информацией.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ЛичныеДанныеСотрудников");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Паспортные данные, ИНН, СНИЛС, дата рождения и прочие личные данные.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "УволенныеСотрудники");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Список уволенных на заданную дату сотрудников.'");
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Увольнение.Ссылка,
		|	Увольнение.ДатаУвольнения КАК Дата,
		|	Увольнение.Сотрудник,
		|	Увольнение.ДатаУвольнения КАК Период,
		|	Увольнение.Номер КАК НомерДок,
		|	Увольнение.Дата КАК ДатаДок,
		|	Увольнение.СтатьяТКРФ,
		|	ВЫБОР
		|		КОГДА Представления.Использовать
		|			ТОГДА Представления.ТекстОснования
		|		ИНАЧЕ Увольнение.СтатьяТКРФ.ТекстОснования
		|	КОНЕЦ КАК ТекстОснования,
		|	Увольнение.Руководитель,
		|	Увольнение.ДолжностьРуководителя,
		|	Увольнение.ОснованиеУвольнения,
		|	Увольнение.ГлавныйБухгалтер
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредставленияОснованийУвольнения КАК Представления
		|		ПО Увольнение.СтатьяТКРФ = Представления.Объект
		|ГДЕ
		|	Увольнение.Проведен
		|	И Увольнение.Ссылка В(&МассивОбъектов)";
	
	Если ПечатьПоЭлементуСправочника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Увольнение.Ссылка В(&МассивОбъектов)", "Увольнение.Сотрудник В(&МассивОбъектов)");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТПлановыеНачисленияСотрудников(ТолькоРазрешенные, ИмяВТПлановыеНачисленияСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень) Экспорт
	
	Если ТипЗнч(ПоляОтбораСотрудников) = Тип("Строка") Тогда
		ПоляОтбораСотрудников = КадровыйУчет.ПоляОтбораСотрудников(ПоляОтбораСотрудников);
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПлановыеНачисления) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(NULL КАК ДАТА) КАК Период,
			|	ВЫРАЗИТЬ(NULL КАК ДАТА) КАК ПериодЗаписи,
			|	NULL КАК Регистратор,
			|	ВЫРАЗИТЬ(NULL КАК Справочник.Сотрудники) КАК Сотрудник,
			|	ВЫРАЗИТЬ(NULL КАК ПланВидовРасчета.Начисления) КАК Начисление,
			|	0 КАК Размер,
			|	NULL КАК ОсновнойПоказатель,
			|	0 КАК ЗначениеОсновногоПоказателя,
			|	ВЫРАЗИТЬ(NULL КАК БУЛЕВО) КАК НачислениеТарифнойСтавки
			|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудников
			|ГДЕ
			|	ЛОЖЬ";
		
	Иначе
		
		МассивТекстов = Новый Массив;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			
			Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
				"ПлановыеНачисления",
				Истина,
				ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
					ИмяВременнойТаблицыОтборовСотрудников,
					ПоляОтбораСотрудников.Сотрудник),
				,
				Истина);
			
			МассивТекстов.Добавить(Запрос.Текст);
			
			НачисленияТарифнойСтавки = РасчетЗарплаты.НачисленияТарифнойСтавки();
			Запрос.УстановитьПараметр("НачисленияТарифнойСтавки", НачисленияТарифнойСтавки);
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	КадровыеДанныеСотрудников.Период КАК Период,
				|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
				|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
				|	ПлановыеНачисления.Начисление КАК Начисление,
				|	ПлановыеНачисления.Размер КАК Результат,
				|	ВЫБОР
				|		КОГДА ПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
				|			ТОГДА ИСТИНА
				|		КОГДА ПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прочее)
				|				И ПлановыеНачисления.Начисление.ВходитВБазуРКИСН
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ВходитВБазуРКиСН,
				|	ПлановыеНачисления.Регистратор КАК Регистратор,
				|	ВЫБОР
				|		КОГДА ПлановыеНачисления.Начисление В (&НачисленияТарифнойСтавки)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК НачислениеТарифнойСтавки
				|ПОМЕСТИТЬ ВТДанныеНачисленийПоСотрудникам
				|ИЗ
				|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
				|		ПО ПлановыеНачисления.Период = КадровыеДанныеСотрудников.Период
				|			И ПлановыеНачисления.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
				|ГДЕ
				|	ПлановыеНачисления.Размер <> 0";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСотрудникиОрганизации", ИмяВременнойТаблицыОтборовСотрудников);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КадровыеДанныеСотрудников.Сотрудник", "КадровыеДанныеСотрудников." + ПоляОтбораСотрудников.Сотрудник);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КадровыеДанныеСотрудников.Период", "КадровыеДанныеСотрудников." + ПоляОтбораСотрудников.Период);
			
			МассивТекстов.Добавить(ТекстЗапроса);
			
		Иначе
			
			
			Запрос = Новый Запрос;
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	КадровыеДанныеСотрудников.Период КАК Период,
				|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
				|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
				|	Начисления.Ссылка КАК Начисление,
				|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК Результат,
				|	ИСТИНА КАК ВходитВБазуРКиСН,
				|	NULL КАК Регистратор,
				|	ИСТИНА КАК НачислениеТарифнойСтавки
				|ПОМЕСТИТЬ ВТДанныеНачисленийПоСотрудникам
				|ИЗ
				|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
				|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда))";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСотрудникиОрганизации", ИмяВременнойТаблицыОтборовСотрудников);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КадровыеДанныеСотрудников.Сотрудник", "КадровыеДанныеСотрудников." + ПоляОтбораСотрудников.Сотрудник);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КадровыеДанныеСотрудников.Период", "КадровыеДанныеСотрудников." + ПоляОтбораСотрудников.Период);
			
			МассивТекстов.Добавить(ТекстЗапроса);
			
		КонецЕсли;
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ДанныеНачисленийПоСотрудникам.Сотрудник,
			|	ДанныеНачисленийПоСотрудникам.Подразделение,
			|	СУММА(ДанныеНачисленийПоСотрудникам.Результат) КАК Результат
			|ПОМЕСТИТЬ ВТСводныеДанныеНачисленийПоСотрудникам
			|ИЗ
			|	ВТДанныеНачисленийПоСотрудникам КАК ДанныеНачисленийПоСотрудникам
			|ГДЕ
			|	ДанныеНачисленийПоСотрудникам.ВходитВБазуРКиСН
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеНачисленийПоСотрудникам.Сотрудник,
			|	ДанныеНачисленийПоСотрудникам.Подразделение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КадровыеДанныеСотрудников.Период,
			|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
			|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
			|	СводныеДанныеНачисленийПоСотрудникам.Результат КАК Результат,
			|	КадровыеДанныеСотрудников.ПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки,
			|	ВЫБОР
			|		КОГДА КадровыеДанныеСотрудников.Подразделение.РайонныйКоэффициент > 1
			|			ТОГДА КадровыеДанныеСотрудников.Подразделение.РайонныйКоэффициент
			|		КОГДА КадровыеДанныеСотрудников.Организация.РайонныйКоэффициент > 1
			|			ТОГДА КадровыеДанныеСотрудников.Организация.РайонныйКоэффициент
			|		КОГДА КадровыеДанныеСотрудников.ГоловнаяОрганизация.РайонныйКоэффициент > 1
			|			ТОГДА КадровыеДанныеСотрудников.ГоловнаяОрганизация.РайонныйКоэффициент
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК РайонныйКоэффициент
			|ПОМЕСТИТЬ ВТДанныеПоКоэффициентамСотрудников
			|ИЗ
			|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСводныеДанныеНачисленийПоСотрудникам КАК СводныеДанныеНачисленийПоСотрудникам
			|		ПО КадровыеДанныеСотрудников.Сотрудник = СводныеДанныеНачисленийПоСотрудникам.Сотрудник
			|			И КадровыеДанныеСотрудников.Подразделение = СводныеДанныеНачисленийПоСотрудникам.Подразделение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеПоКоэффициентамСотрудников.Период,
			|	ДанныеПоКоэффициентамСотрудников.Подразделение КАК СтруктурнаяЕдиница
			|ПОМЕСТИТЬ ВТПодразделенияПериоды
			|ИЗ
			|	ВТДанныеПоКоэффициентамСотрудников КАК ДанныеПоКоэффициентамСотрудников";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСотрудникиОрганизации", ИмяВременнойТаблицыОтборовСотрудников);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КадровыеДанныеСотрудников.Сотрудник", "КадровыеДанныеСотрудников." + ПоляОтбораСотрудников.Сотрудник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КадровыеДанныеСотрудников.Период", "КадровыеДанныеСотрудников." + ПоляОтбораСотрудников.Период);
		
		МассивТекстов.Добавить(ТекстЗапроса);
		
		ЗапросТерриториальныеУсловияПФР = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ТерриториальныеУсловияПФР",
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТПодразделенияПериоды", "СтруктурнаяЕдиница"),
			,
			Истина);
			
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросТерриториальныеУсловияПФР);
		МассивТекстов.Добавить(ЗапросТерриториальныеУсловияПФР.Текст);
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ДанныеПоСотрудникам.Период,
			|	ДанныеПоСотрудникам.Период КАК ПериодЗаписи,
			|	ДанныеПоСотрудникам.Регистратор,
			|	ДанныеПоСотрудникам.Сотрудник КАК Сотрудник,
			|	ДанныеПоСотрудникам.Подразделение КАК Подразделение,
			|	ДанныеПоСотрудникам.Начисление КАК Начисление,
			|	ВЫБОР
			|		КОГДА ДанныеПоСотрудникам.Начисление.КодДоходаНДФЛ.ИмеетЕдинственныйВычет
			|			ТОГДА ДанныеПоСотрудникам.Начисление.КодДоходаНДФЛ.ВычетПоУмолчанию
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
			|	КОНЕЦ КАК КодВычета,
			|	ДанныеПоСотрудникам.Результат КАК Размер,
			|	ДанныеПоСотрудникам.ВходитВБазуРКиСН КАК ВходитВБазуРКиСН,
			|	NULL КАК ОсновнойПоказатель,
			|	0 КАК ЗначениеОсновногоПоказателя,
			|	ДанныеПоСотрудникам.НачислениеТарифнойСтавки,
			|	0 КАК КоэффициентПересчета
			|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудников
			|ИЗ
			|	ВТДанныеНачисленийПоСотрудникам КАК ДанныеПоСотрудникам
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
			|		ПО ДанныеПоСотрудникам.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеПоКоэффициентамСотрудников.Период,
			|	ДанныеПоКоэффициентамСотрудников.Период,
			|	НЕОПРЕДЕЛЕНО,
			|	ДанныеПоКоэффициентамСотрудников.Сотрудник,
			|	ДанныеПоКоэффициентамСотрудников.Подразделение,
			|	Начисления.Ссылка,
			|	ВЫБОР
			|		КОГДА Начисления.КодДоходаНДФЛ.ИмеетЕдинственныйВычет
			|			ТОГДА Начисления.КодДоходаНДФЛ.ВычетПоУмолчанию
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
			|	КОНЕЦ,
			|	ДанныеПоКоэффициентамСотрудников.Результат * (ДанныеПоКоэффициентамСотрудников.РайонныйКоэффициент - 1),
			|	ЛОЖЬ,
			|	NULL,
			|	ДанныеПоКоэффициентамСотрудников.РайонныйКоэффициент,
			|	ЛОЖЬ,
			|	ДанныеПоКоэффициентамСотрудников.РайонныйКоэффициент - 1
			|ИЗ
			|	ВТДанныеПоКоэффициентамСотрудников КАК ДанныеПоКоэффициентамСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
			|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент))
			|			И (ДанныеПоКоэффициентамСотрудников.РайонныйКоэффициент <> 1)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
			|		ПО ДанныеПоКоэффициентамСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеПоКоэффициентамСотрудников.Период,
			|	ДанныеПоКоэффициентамСотрудников.Период,
			|	НЕОПРЕДЕЛЕНО,
			|	ДанныеПоКоэффициентамСотрудников.Сотрудник,
			|	ДанныеПоКоэффициентамСотрудников.Подразделение,
			|	Начисления.Ссылка,
			|	ВЫБОР
			|		КОГДА Начисления.КодДоходаНДФЛ.ИмеетЕдинственныйВычет
			|			ТОГДА Начисления.КодДоходаНДФЛ.ВычетПоУмолчанию
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
			|	КОНЕЦ,
			|	ДанныеПоКоэффициентамСотрудников.Результат * ДанныеПоКоэффициентамСотрудников.ПроцентСевернойНадбавки / 100,
			|	ЛОЖЬ,
			|	NULL,
			|	ДанныеПоКоэффициентамСотрудников.ПроцентСевернойНадбавки,
			|	ЛОЖЬ,
			|	ДанныеПоКоэффициентамСотрудников.ПроцентСевернойНадбавки / 100
			|ИЗ
			|	ВТДанныеПоКоэффициентамСотрудников КАК ДанныеПоКоэффициентамСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
			|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловия
			|		ПО ДанныеПоКоэффициентамСотрудников.Период = ТерриториальныеУсловия.Период
			|			И ДанныеПоКоэффициентамСотрудников.Подразделение = ТерриториальныеУсловия.СтруктурнаяЕдиница
			|			И (ТерриториальныеУсловия.ТерриториальныеУсловияПФР В (ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКСР), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКСМ), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПРОЧ)))
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
			|		ПО ДанныеПоКоэффициентамСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСотрудникиОрганизации", ИмяВременнойТаблицыОтборовСотрудников);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КадровыеДанныеСотрудников.Сотрудник", "КадровыеДанныеСотрудников." + ПоляОтбораСотрудников.Сотрудник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КадровыеДанныеСотрудников.Период", "КадровыеДанныеСотрудников." + ПоляОтбораСотрудников.Период);
		
		МассивТекстов.Добавить(ТекстЗапроса);
		
		Запрос.Текст = СтрСоединить(МассивТекстов, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПлановыеНачисленияСотрудников", ИмяВТПлановыеНачисленияСотрудников);
	
	Возврат Запрос;
	
КонецФункции

Функция ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник, ИмяПоляДатаОкончания, ИспользоватьКраткиеПредставления, ВыводитьДенежныеПоказателиСВалютой, ФормироватьСПериодичностьДень) Экспорт
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц,
		ИмяВТСотрудникиПериоды,
		ИмяПоляСотрудник + "," + ИмяПоляПериод);
	
	ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудниковДляСоставаНачислений";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Организация,ГоловнаяОрганизация,Подразделение,ПроцентСевернойНадбавки,ТарифнаяСтавка");
	
	ЗапросНачислений = КадровыйУчет.ЗапросВТПлановыеНачисленияСотрудников(Истина, "ВТПлановыеНачисления", "ВТКадровыеДанныеСотрудниковДляСоставаНачислений");
	ЗапросНачислений.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросНачислений.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеНачисления.Период КАК Период,
			|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
			|	ПлановыеНачисления.Начисление КАК Начисление,
			|	ПлановыеНачисления.ОсновнойПоказатель КАК ОсновнойПоказатель,
			|	ПлановыеНачисления.ЗначениеОсновногоПоказателя КАК ЗначениеОсновногоПоказателя,
			|	ПлановыеНачисления.Размер КАК Размер,
			|	ПлановыеНачисления.НачислениеТарифнойСтавки КАК НачислениеТарифнойСтавки
			|ИЗ
			|	ВТПлановыеНачисления КАК ПлановыеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
			|		ПО ПлановыеНачисления.Начисление = Начисления.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	Период,
			|	Начисления.РеквизитДопУпорядочивания";
	
	ОписанияНачисленийПоПериодам = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ОписаниеНачисленийПоПериодам = Новый Соответствие;
		Пока Выборка.СледующийПоЗначениюПоля("Период") Цикл
			
			ОписаниеСостава = ОписаниеСоставаНачислений();
			ОписанияНадбавок = Новый Массив;
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.НачислениеТарифнойСтавки Тогда
					
					ОписаниеСостава.ПоказательОкладТариф = НСтр("ru='Оклад'");
					ОписаниеСостава.ОкладТариф = Выборка.Размер;
					ОписаниеСостава.ОписаниеОклада = ОписаниеСостава.ПоказательОкладТариф
						+ ?(ОписаниеСостава.ОкладТариф = 0, "", ": " + Формат(ОписаниеСостава.ОкладТариф, "ЧДЦ=0"));
					
				Иначе
					
					Если ЗначениеЗаполнено(Выборка.ЗначениеОсновногоПоказателя) Тогда
						ОписанияНадбавок.Добавить(Строка(Выборка.Начисление) + ": " + Выборка.ЗначениеОсновногоПоказателя);
					ИначеЕсли ЗначениеЗаполнено(Выборка.Размер) Тогда
						ОписанияНадбавок.Добавить(Строка(Выборка.Начисление) + ": " + Выборка.Размер);
					Иначе
						ОписанияНадбавок.Добавить(Строка(Выборка.Начисление));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОписанияНадбавок.Количество() > 0 Тогда
				ОписаниеСостава.ОписаниеНадбавок = СтрСоединить(ОписанияНадбавок, "; ");
			КонецЕсли;
			
			ОписаниеНачисленийПоПериодам.Вставить(Выборка.Период, ОписаниеСостава);
			
		КонецЦикла;
		
		ОписанияНачисленийПоПериодам.Вставить(Выборка.Сотрудник, ОписаниеНачисленийПоПериодам);
	
	КонецЦикла;
	
	Возврат ОписанияНачисленийПоПериодам;
	
КонецФункции

Функция ОписаниеСоставаНачислений() Экспорт
	
	ОписаниеСостава = Новый Структура("ПоказательТариф,Тариф,ОписаниеОклада,ОписаниеНадбавок");
	ОписаниеСостава.Вставить("ПоказательОкладТариф", "");
	ОписаниеСостава.Вставить("ОкладТариф", 0);
	ОписаниеСостава.Вставить("ОписаниеОклада", "");
	ОписаниеСостава.Вставить("ОписаниеНадбавок", "");

	Возврат ОписаниеСостава;
	
КонецФункции

Функция ПредставлениеОкладаИНадбавок(ОписанияСотрудника)
	
	Если ПустаяСтрока(ОписанияСотрудника.ОписаниеОклада) Тогда
		Возврат ОписанияСотрудника.ОписаниеНадбавок;
	ИначеЕсли ПустаяСтрока(ОписанияСотрудника.ОписаниеНадбавок) Тогда
		Возврат Формат(ОписанияСотрудника.ОкладТариф, "ЧДЦ=0");
	Иначе
		Возврат ОписанияСотрудника.ОписаниеОклада + ", " + ОписанияСотрудника.ОписаниеНадбавок;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьТекущиеТарифныеСтавки(МассивСотрудниковДляОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСотрудниковДляОбновления", МассивСотрудниковДляОбновления);
	
	// Подготовим таблицу ИзмеренияДаты для получения среза последних.
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Сотрудник Из МассивСотрудниковДляОбновления Цикл
		СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		СтрокаИзмеренияДаты.Сотрудник = Сотрудник;
	КонецЦикла;
	
	// Получим последние значения
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	
	КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
		|	СУММА(ПлановыеНачисленияСрезПоследних.Размер) КАК Размер
		|ПОМЕСТИТЬ ВТРазмерНачисленийСотрудников
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|ГДЕ
		|	ПлановыеНачисленияСрезПоследних.Размер <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисленияСрезПоследних.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЕСТЬNULL(РазмерНачисленийСотрудников.Размер, 0) КАК ТекущаяТарифнаяСтавка,
		|	ЕСТЬNULL(ПлановыеАвансы.СпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)) КАК ТекущийСпособРасчетаАванса,
		|	ЕСТЬNULL(ПлановыеАвансы.Аванс, 0) КАК ТекущийАванс,
		|	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0) КАК ТекущаяТарифнаяСтавкаПрежняя,
		|	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийСпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)) КАК ТекущийСпособРасчетаАвансаПрежняя,
		|	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийАванс, 0) КАК ТекущийАвансПрежний,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация
		|ПОМЕСТИТЬ ВТНовыеКадровыеДанные
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
		|		ПО Сотрудники.Ссылка = ТекущаяТарифнаяСтавкаСотрудников.Сотрудник
		|			И Сотрудники.ФизическоеЛицо = ТекущаяТарифнаяСтавкаСотрудников.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|			И Сотрудники.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерНачисленийСотрудников КАК РазмерНачисленийСотрудников
		|		ПО Сотрудники.Ссылка = РазмерНачисленийСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансы
		|		ПО Сотрудники.Ссылка = ПлановыеАвансы.Сотрудник
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудниковДляОбновления)
		|	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеКадровыеДанные.Сотрудник,
		|	НовыеКадровыеДанные.ФизическоеЛицо,
		|	НовыеКадровыеДанные.ГоловнаяОрганизация,
		|	НовыеКадровыеДанные.ТекущаяОрганизация,
		|	НовыеКадровыеДанные.ТекущаяТарифнаяСтавка,
		|	НовыеКадровыеДанные.ТекущийСпособРасчетаАванса,
		|	НовыеКадровыеДанные.ТекущийАванс
		|ИЗ
		|	ВТНовыеКадровыеДанные КАК НовыеКадровыеДанные
		|ГДЕ
		|	(НовыеКадровыеДанные.ТекущаяТарифнаяСтавка <> НовыеКадровыеДанные.ТекущаяТарифнаяСтавкаПрежняя
		|			ИЛИ НовыеКадровыеДанные.ТекущийСпособРасчетаАванса <> НовыеКадровыеДанные.ТекущийСпособРасчетаАвансаПрежняя
		|			ИЛИ НовыеКадровыеДанные.ТекущийАванс <> НовыеКадровыеДанные.ТекущийАвансПрежний)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросВТТарифныеСтавкиСотрудников(ТолькоРазрешенные, ИмяВТТарифныеСтавкиСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень) Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ИмяВременнойТаблицыОтборовСотрудников, "Период,Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ПоляОтбораСотрудников.Период);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ПоляОтбораСотрудников.Сотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПлановыеНачисления", ПоляОтбора);
	КонецЕсли;
	
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПлановыеНачисления",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина);
	
	ТекстЗапросаВТТарифнаяСтавкаСотрудников =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияСрезПоследних.Период,
		|	ПлановыеНачисленияСрезПоследних.ПериодЗаписи КАК ПериодЗаписиНачислений,
		|	ПлановыеНачисленияСрезПоследних.Регистратор,
		|	ПлановыеНачисленияСрезПоследних.Сотрудник,
		|	СУММА(ПлановыеНачисленияСрезПоследних.Размер) КАК ТарифнаяСтавка,
		|	0 КАК Надбавка,
		|	СУММА(ПлановыеНачисленияСрезПоследних.Размер) КАК ФОТ
		|ПОМЕСТИТЬ ВТТарифныеСтавкиСотрудников
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисленияСрезПоследних.Период,
		|	ПлановыеНачисленияСрезПоследних.ПериодЗаписи,
		|	ПлановыеНачисленияСрезПоследних.Регистратор,
		|	ПлановыеНачисленияСрезПоследних.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПлановыеНачисленияСрезПоследних";
	
	ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТТарифныеСтавкиСотрудников", ИмяВТТарифныеСтавкиСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТТарифнаяСтавкаСотрудников);
	
	Возврат Запрос;
	
КонецФункции

Процедура ОбновитьСобытияУвольнений(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Регистраторы.Период КАК Период,
		|	Регистраторы.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.*
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО КадроваяИсторияСотрудников.Регистратор = Регистраторы.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка, , "Период1,Регистратор1");
		
		Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЦикла; 
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Регистраторы.Период КАК Период,
		|	Регистраторы.Регистратор КАК Регистратор,
		|	ПлановыеНачисления.*
		|ИЗ
		|	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ПлановыеНачисления.Регистратор = Регистраторы.Регистратор
		|ИТОГИ ПО
		|	Регистратор";
	
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		Набор = РегистрыСведений.ПлановыеНачисления.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		Выборка = ВыборкаПоРегистраторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка, , "Период1,Регистратор1");
		КонецЦикла;
		
		Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти


#Область КадровыеДанныеФизическихЛиц

Функция НеобходимыКадровыеДанныеФизическогоЛица(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ВозвращаемоеЗначение = Ложь;
	
	Возврат КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(ИмяПоля)
		Или КадровыйУчет.НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(ИмяПоля)
		Или УчетСтраховыхВзносовФизическиеЛица.НеобходимыСведенияОСтатусахЗастрахованныхЛиц(ИмяПоля)
		Или НеобходимыСведенияОГражданстве(ИмяПоля)
		Или НеобходимыСведенияОбИнвалидности(ИмяПоля)
		Или УчетНДФЛФизическиеЛица.НеобходимыСведенияОСтатусахНалогоплательщиков(ИмяПоля)
		Или НеобходимыСведенияДокументовУдостоверяющихЛичность(ИмяПоля)
		Или НеобходимыСведенияОФИОФизическихЛиц(ИмяПоля)
		Или НеобходимаКонтактнаяИнформацияФизическогоЛица(ИмяПоля)
		Или НеобходимыСведенияОВозрасте(ИмяПоля);
	
КонецФункции

Функция НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчет.НеобходимыЗначенияРеквизитовСправочникаФизическиеЛица(ИмяПоля)
		Или НеобходимаКонтактнаяИнформацияФизическогоЛица(ИмяПоля)
		Или НеобходимыДатыСмертиСотрудников(ИмяПоля);
	
КонецФункции

Функция ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц, ТаблицаОтборовСодержитПолеСотрудник, УничтожитьВспомогательныеТаблицы) Экспорт
	
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
	Если ФормироватьТаблицуРазличных Тогда
		
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц = "ВТОтборовРазличныхФизическихЛиц";
		
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		Если ОписательВременнойТаблицыОтборов.Свойство("ИмяПоляСотрудник") Тогда
			ОписательВТОтборов.Вставить("ИмяПоляСотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		КонецЕсли;
		
	Иначе
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
	КонецЕсли;
	
	ТекстыОписанияПолей = ТекстыОписанияПолейЗапросПоляКадровыхДанныхФизическихЛиц(ИменаКадровыхДанных, ИсточникиДанных, ОписательВТОтборов);
	
	ОбработанныеПоляКадровыеДанныеСотрудников = ИсточникиДанных.Получить("ОбработанныеПоляКадровыеДанныеФизическихЛиц");
	Если ОбработанныеПоляКадровыеДанныеСотрудников = Неопределено
		Или ОбработанныеПоляКадровыеДанныеСотрудников.Количество() = 0 Тогда
		
		ФормироватьТаблицуРазличных = Ложь;
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц = "";
		ИсточникиДанных.Удалить("ПостоянныеКадровыеДанныеФизическихЛиц");
		
		Запрос = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(
			ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИменаКадровыхДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц, ТаблицаОтборовСодержитПолеСотрудник, Истина, Ложь);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТКадровыеДанныеФизическихЛиц
			|ИЗ
			|	ВТОтборовРазличныхФизическихЛиц КАК ТаблицаОтборов";
		
		Если Не ТаблицаОтборовСодержитПолеСотрудник Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник КАК Сотрудник,", "");
		ИначеЕсли Не ФормироватьТаблицуРазличных Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляСотрудник);
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		Если Не ФормироватьТаблицуРазличных Тогда
			
			КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст,
				"ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТКадровыеДанныеФизическихЛиц", ИмяВТКадровыеДанныеФизическихЛиц);
	
	ДобавитьВЗапросТекстыОписанияПолейКадровыхДанныхФизическихЛиц(Запрос, ТекстыОписанияПолей, ИсточникиДанных, ОписательВТОтборов, ИмяВТКадровыеДанныеФизическихЛиц);
	ДобавитьВЗапросСоединенияСИсточникамиКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц);
	
	Если ФормироватьТаблицуРазличных Тогда
		
		ТекстЗапросаПолученияРазличныхЗаписей =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТОтборовРазличныхФизическихЛиц
			|ИЗ
			|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов";
		
		Если Не ТаблицаОтборовСодержитПолеСотрудник Тогда
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Сотрудник КАК Сотрудник,", "");
		Иначе
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляСотрудник);
		КонецЕсли;
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовРазличныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаПолученияРазличныхЗаписей, ТолькоРазрешенные);
		
		Запрос.Текст = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(
			ТекстЗапросаПолученияРазличныхЗаписей, Запрос.Текст);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
	КонецЕсли;
	
	Если УничтожитьВспомогательныеТаблицы Тогда
		КадровыйУчет.ДобавитьЗапросыУничтоженияВспомогательныхВременныхТаблиц(Запрос, ИсточникиДанных);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц, ТаблицаОтборовСодержитПолеСотрудник, ТаблицаОтборовСодержитПолеПериод, УничтожитьВспомогательныеТаблицы) Экспорт
	
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
	Если ФормироватьТаблицуРазличных Тогда
		
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц = "ВТОтборовРазличныхПостоянныхФизическихЛиц";
		
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		
		Если ОписательВременнойТаблицыОтборов.Свойство("ИмяПоляСотрудник") Тогда
			ОписательВТОтборов.Вставить("ИмяПоляСотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		КонецЕсли;
		
		Если ОписательВременнойТаблицыОтборов.Свойство("ИмяПоляПериод") Тогда
			ОписательВТОтборов.Вставить("ИмяПоляПериод", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
		КонецЕсли;
		
	Иначе
		ОписательВТОтборов = ОбщегоНазначения.СкопироватьРекурсивно(ОписательВременнойТаблицыОтборов);
		ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц = ОписательВТОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборов.Период КАК Период,
		|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
		|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТПостоянныеКадровыеДанныеФизическихЛиц
		|ИЗ
		|	ВТОтборовРазличныхПостоянныхФизическихЛиц КАК ТаблицаОтборов";
	
	Если Не ТаблицаОтборовСодержитПолеПериод Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Период КАК Период,", "");
	ИначеЕсли Не ФормироватьТаблицуРазличных Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляПериод);
	КонецЕсли;
	
	Если Не ТаблицаОтборовСодержитПолеСотрудник Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник КАК Сотрудник,", "");
	ИначеЕсли Не ФормироватьТаблицуРазличных Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляСотрудник);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхПостоянныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	
	Если Не ФормироватьТаблицуРазличных Тогда
		
		КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст,
			"ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПостоянныеКадровыеДанныеФизическихЛиц", ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	
	ДобавитьВЗапросПоляПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ИменаКадровыхДанных, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	Если ФормироватьТаблицуРазличных Тогда
		
		ТекстЗапросаПолученияРазличныхЗаписей =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТОтборовРазличныхПостоянныхФизическихЛиц
			|ИЗ
			|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов";
		
		Если Не ТаблицаОтборовСодержитПолеПериод Тогда
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Период КАК Период,", "");
		Иначе
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляПериод);
		КонецЕсли;
		
		Если Не ТаблицаОтборовСодержитПолеСотрудник Тогда
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Сотрудник КАК Сотрудник,", "");
		Иначе
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляСотрудник);
		КонецЕсли;
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовРазличныхПостоянныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаПолученияРазличныхЗаписей, ТолькоРазрешенные);
		
		Запрос.Текст = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(
			ТекстЗапросаПолученияРазличныхЗаписей, Запрос.Текст);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
	КонецЕсли;
	
	Если УничтожитьВспомогательныеТаблицы Тогда
		КадровыйУчет.ДобавитьЗапросыУничтоженияВспомогательныхВременныхТаблиц(Запрос, ИсточникиДанных);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТПостоянныеКадровыеДанныеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц)
	
	КадровыеДанные = ИсточникиДанных.Получить("ПостоянныеКадровыеДанныеФизическихЛиц");
	Если КадровыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КадровыйУчет.ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	
КонецПроцедуры

// Значения реквизитов справочника ФизическиеЛица.

Функция ДобавитьПолеРеквизитаСправочникаФизическиеЛица(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если КадровыйУчет.НеобходимыЗначенияРеквизитовСправочникаФизическиеЛица(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("РеквизитыСправочникаФизическиеЛица", Истина);
		
		ПутьКДанным = ПутьКДаннымЗначенийРеквизитовСправочникаФизическиеЛица(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаДанныхРеквизитовСправочникаФизическиеЛица(Запрос, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("РеквизитыСправочникаФизическиеЛица") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СправочникФизическиеЛица
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СправочникФизическиеЛица.Ссылка}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
КонецПроцедуры

Функция НеобходимыЗначенияРеквизитовСправочникаФизическиеЛица(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = ВРег("Фамилия")
		Или ИмяПоля = ВРег("Имя")
		Или ИмяПоля = ВРег("Отчество") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Метаданные.Справочники.ФизическиеЛица.Реквизиты.Найти(ИмяПоля) <> Неопределено
		Или ИмяПоля = ВРег("Наименование")
		Или ИмяПоля = ВРег("ФизическоеЛицоНаименование") 
		Или ИмяПоля = ВРег("Код")
		Или ИмяПоля = ВРег("Родитель")
		Или ИмяПоля = ВРег("ФизическоеЛицоКод")
		Или ИмяПоля = ВРег("ПометкаУдаления");
	
КонецФункции

Функция ДобавитьКритерийПоискаСправочникаФизическиеЛица(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	Если КадровыйУчет.НеобходимыЗначенияРеквизитовСправочникаФизическиеЛица(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Возраст") Тогда
		
		Если ИмяПоля = ВРег("ФизическоеЛицоНаименование") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Наименование";
		ИначеЕсли ИмяПоля = ВРег("ФизическоеЛицоКод") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Код";
		ИначеЕсли ИмяПоля = ВРег("Возраст") Тогда
			
			ТекстЗапросаТекущаяДата = "ДАТАВРЕМЯ(" + Формат(ТекущаяДатаСеанса(), "ДФ='гггг, ММ, дд'; ДП=") + ")";
			УсловиеПоиска.ЛевоеЗначение = СтрЗаменить(
				"	ВЫБОР
				|		КОГДА Т.ДатаРождения > ДАТАВРЕМЯ(1, 1, 1)
				|			И Т.ДатаРождения < &Период
				|			ТОГДА РАЗНОСТЬДАТ(Т.ДатаРождения, &Период, ГОД) + ВЫБОР
				|				КОГДА МЕСЯЦ(Т.ДатаРождения) > МЕСЯЦ(&Период)
				|					ТОГДА -1
				|				КОГДА МЕСЯЦ(Т.ДатаРождения) = МЕСЯЦ(&Период)
				|						И ДЕНЬ(Т.ДатаРождения) > ДЕНЬ(&Период)
				|					ТОГДА -1
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|		ИНАЧЕ NULL
				|	КОНЕЦ", "&Период", ТекстЗапросаТекущаяДата);
				
			УсловиеПоиска.ОтносительныйПуть = Ложь;
				
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "Справочник.ФизическиеЛица", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымЗначенийРеквизитовСправочникаФизическиеЛица(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоляВВерхнемРегистре = ВРег("ФизическоеЛицоНаименование") Тогда
		ПутьКДанным = "	СправочникФизическиеЛица.Наименование";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ФизическоеЛицоКод") Тогда
		ПутьКДанным = "	СправочникФизическиеЛица.Код";
	Иначе
		ПутьКДанным = "	СправочникФизическиеЛица." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Контактная информация

Функция ДобавитьПолеКонтактнойИнформацииФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимаКонтактнаяИнформацияФизическогоЛица(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		
		ПозицияПредставление = СтрНайти(ВРег(ИмяПоля), ВРег("Представление"));
		Если ПозицияПредставление > 0 Тогда
			ИмяТаблицы = Лев(ИмяПоля, ПозицияПредставление - 1);
		Иначе
			ИмяТаблицы = ИмяПоля;
		КонецЕсли; 
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "КонтактнаяИнформацияФизическихЛиц", ИмяТаблицы);
		
		ПутьКДанным = ПутьКДаннымКонтактнойИнформацииФизическихЛиц(ИмяПоля, ИмяТаблицы);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТКонтактнаяИнформация(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	ИменаТаблицКонтактнойИнформации = ИсточникиДанных.Получить("КонтактнаяИнформацияФизическихЛиц");
	Если ИменаТаблицКонтактнойИнформации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидыКонтактнойИнформацииЗапроса = "";
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	Для каждого ИмяТаблицы Из ИменаТаблицКонтактнойИнформации Цикл
		
		ПредставлениеВидаКонтактнойИнформации = "ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации." + ИмяТаблицы + "ФизическиеЛица)";
		ВидыКонтактнойИнформацииЗапроса = ?(ПустаяСтрока(ВидыКонтактнойИнформацииЗапроса), "", ВидыКонтактнойИнформацииЗапроса + ", ") + ПредставлениеВидаКонтактнойИнформации;
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТКонтактнаяИнформация КАК " + ИмяТаблицы + "ФизическиеЛица
			|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = " + ИмяТаблицы + "ФизическиеЛица.Объект
			|		И " + ИмяТаблицы + "ФизическиеЛица.Вид = " + ПредставлениеВидаКонтактнойИнформации + "}");
		
	КонецЦикла;
	
	// Подготовка запроса, создающего временную таблицу - отбор по видам контактной информации.
	ТекстЗапросаФильтраПоВидамКонтактнойИнформации = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВидыКонтактнойИнформации.Ссылка КАК Вид
		|ПОМЕСТИТЬ ВТОтборКонтактнойИнформации
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ПО (ВидыКонтактнойИнформации.Ссылка В (&СписокВидовКонтактнойИнформации))";
	
	ТекстЗапросаФильтраПоВидамКонтактнойИнформации = СтрЗаменить(
		ТекстЗапросаФильтраПоВидамКонтактнойИнформации,
		"ВТОтборовФизическихЛиц",
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(
		ТекстЗапросаФильтраПоВидамКонтактнойИнформации, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ТекстЗапросаФильтраПоВидамКонтактнойИнформации = СтрЗаменить(
		ТекстЗапросаФильтраПоВидамКонтактнойИнформации,
		"&СписокВидовКонтактнойИнформации",
		ВидыКонтактнойИнформацииЗапроса);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаФильтраПоВидамКонтактнойИнформации, ТолькоРазрешенные);
	
	// Подготовка запроса, создающего временную таблицу с контактной информацией.
	ОписаниеТаблицыОтборов = ОписаниеВременнойТаблицыОтборовКонтактнойИнформации(
		"ВТОтборКонтактнойИнформации",
		"ФизическоеЛицо",
		"Вид");
	
	ЗапросВТКонтактнаяИнформация = ЗапросВТКонтактнаяИнформация(
		ТолькоРазрешенные, "ВТКонтактнаяИнформация", "Справочник.ФизическиеЛица", ОписаниеТаблицыОтборов);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТКонтактнаяИнформация);
	
	ЧастиЗапроса.Вставить(0, ТекстЗапросаФильтраПоВидамКонтактнойИнформации);
	ЧастиЗапроса.Вставить(1, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Вставить(2, ЗапросВТКонтактнаяИнформация.Текст);
	ЧастиЗапроса.Вставить(3, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Вставить(4, "УНИЧТОЖИТЬ ВТОтборКонтактнойИнформации");
	ЧастиЗапроса.Вставить(5, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТКонтактнаяИнформация");
	
КонецПроцедуры

Функция НеобходимаКонтактнаяИнформацияФизическогоЛица(ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("АдресДляИнформирования")
		Или ИмяПоля = ВРег("АдресДляИнформированияПредставление")
		Или ИмяПоля = ВРег("АдресЗаПределамиРФ")
		Или ИмяПоля = ВРег("АдресЗаПределамиРФПредставление")
		Или ИмяПоля = ВРег("АдресМестаПроживания")
		Или ИмяПоля = ВРег("АдресМестаПроживанияПредставление")
		Или ИмяПоля = ВРег("АдресПоПрописке")
		Или ИмяПоля = ВРег("АдресПоПропискеПредставление")
		Или ИмяПоля = ВРег("ТелефонДомашний")
		Или ИмяПоля = ВРег("ТелефонДомашнийПредставление")
		Или ИмяПоля = ВРег("ТелефонРабочий")
		Или ИмяПоля = ВРег("ТелефонРабочийПредставление")
		Или ИмяПоля = ВРег("EMail")
		Или ИмяПоля = ВРег("EMailПредставление")
		Или ИмяПоля = ВРег("ТелефонМобильный")
		Или ИмяПоля = ВРег("ТелефонМобильныйПредставление");
	
КонецФункции

Функция ДобавитьКритерийПоискаПоКонтактнойИнформацииФизическогоЛица(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимаКонтактнаяИнформацияФизическогоЛица(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяКритерия = "Справочник.ФизическиеЛица.КонтактнаяИнформация";
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("АдресДляИнформирования") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресДляИнформирования";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("АдресДляИнформированияПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресДляИнформирования";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		ИначеЕсли ИмяПоля = ВРег("АдресЗаПределамиРФ") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресЗаПределамиРФ";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("АдресЗаПределамиРФПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресЗаПределамиРФПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		ИначеЕсли ИмяПоля = ВРег("АдресМестаПроживания") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресМестаПроживания";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("АдресМестаПроживанияПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресМестаПроживанияПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		ИначеЕсли ИмяПоля = ВРег("АдресПоПрописке") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресПоПрописке";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("АдресПоПропискеПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресПоПропискеПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		ИначеЕсли ИмяПоля = ВРег("ТелефонДомашний") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонДомашний";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("ТелефонДомашнийПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонДомашнийПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		ИначеЕсли ИмяПоля = ВРег("ТелефонРабочий") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонРабочий";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("ТелефонРабочийПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонРабочийПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		ИначеЕсли ИмяПоля = ВРег("EMail") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".EMail";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("EMailПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".EMailПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		ИначеЕсли ИмяПоля = ВРег("ТелефонМобильный") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонМобильный";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("ТелефонМобильныйПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонМобильныйПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, УсловиеПоиска);
		
		ДополнительноеУсловие = Новый Структура;
		ДополнительноеУсловие.Вставить("ЛевоеЗначение", "Вид");
		ДополнительноеУсловие.Вставить("ВидСравнения", "=");
		ДополнительноеУсловие.Вставить("ПравоеЗначение", ПравоеЗначение);
		ДополнительноеУсловие.Вставить("ОтносительныйПуть", Ложь);
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, ДополнительноеУсловие);
		
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымКонтактнойИнформацииФизическихЛиц(Знач ИмяПоля, ИмяТаблицы)
	
	ПозицияПредставление = СтрНайти(ВРег(ИмяПоля), ВРег("Представление"));
	Если ПозицияПредставление > 0 Тогда
		ПутьКДанным = Символы.Таб + ИмяТаблицы + "ФизическиеЛица.Представление";
	Иначе
		ПутьКДанным = Символы.Таб + ИмяТаблицы + "ФизическиеЛица.ЗначенияПолей";
	КонецЕсли; 
	
	Возврат ПутьКДанным;
	
КонецФункции

// Возраст физического лица

Функция ДобавитьПолеСведенийОВозрасте(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных, ОписательВременнойТаблицыОтборов)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОВозрасте(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("РеквизитыСправочникаФизическиеЛица", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОВозрасте(ИмяПоля, ОписательВременнойТаблицыОтборов);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОВозрасте(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ИмяПоля = ВРег("Возраст");
	
КонецФункции

Функция ПутьКДаннымСведенийОВозрасте(Знач ИмяПоля, ОписательВременнойТаблицыОтборов)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоляВВерхнемРегистре = ВРег("Возраст") Тогда
		
		ПутьКДаннымПериода =
			"ВЫБОР
			|	КОГДА ТаблицаОтборов.Период = ДАТАВРЕМЯ(1, 1, 1)
			|		ТОГДА &ТекущаяДата
			|	ИНАЧЕ ТаблицаОтборов.Период
			|КОНЕЦ";
		
		ТекстТекущаяДата = "ДАТАВРЕМЯ(" + Формат(ТекущаяДатаСеанса(), "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		ПутьКДаннымПериода = СтрЗаменить(ПутьКДаннымПериода, "&ТекущаяДата", ТекстТекущаяДата);
		ПутьКДаннымПериода = СтрЗаменить(ПутьКДаннымПериода, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
		
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА ТаблицаОтборов.ФизическоеЛицо.ДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА 0
			|		КОГДА ТаблицаОтборов.ФизическоеЛицо.ДатаРождения >= &ПутьКДаннымПериода
			|			ТОГДА 0
			|		ИНАЧЕ
			|			РАЗНОСТЬДАТ(ТаблицаОтборов.ФизическоеЛицо.ДатаРождения, &ПутьКДаннымПериода, ГОД) + ВЫБОР
			|				КОГДА МЕСЯЦ(ТаблицаОтборов.ФизическоеЛицо.ДатаРождения) > МЕСЯЦ(&ПутьКДаннымПериода)
			|					ТОГДА -1
			|				КОГДА МЕСЯЦ(ТаблицаОтборов.ФизическоеЛицо.ДатаРождения) = МЕСЯЦ(&ПутьКДаннымПериода)
			|					И ДЕНЬ(ТаблицаОтборов.ФизическоеЛицо.ДатаРождения) > ДЕНЬ(&ПутьКДаннымПериода)
			|					ТОГДА -1
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ";
		
		ПутьКДанным = СтрЗаменить(ПутьКДанным, "ТаблицаОтборов.ФизическоеЛицо", КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо));
		ПутьКДанным = СтрЗаменить(ПутьКДанным, "&ПутьКДаннымПериода", ПутьКДаннымПериода);
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Документы, удостоверяющие личность.

Функция ДобавитьПолеСведенийОДокументахУдостоверяющихЛичность(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияДокументовУдостоверяющихЛичность(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("ДокументыУдостоверяющиеЛичность", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОДокументахУдостоверяющихЛичность(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТДокументыУдостоверяющиеЛичность(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("ДокументыУдостоверяющиеЛичность") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросВТ = КадровыйУчет.ЗапросВТДокументыУдостоверяющиеЛичность(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыУдостоверяющиеЛичность КАК ДокументыУдостоверяющиеЛичность
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ДокументыУдостоверяющиеЛичность.ФизическоеЛицо
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ДокументыУдостоверяющиеЛичность.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТДокументыУдостоверяющиеЛичность");
	
КонецПроцедуры

Функция НеобходимыСведенияДокументовУдостоверяющихЛичность(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ДокументПериодРегистрации")
		Или ИмяПоля = ВРег("ДокументВид")
		Или ИмяПоля = ВРег("ДокументКодМВД")
		Или ИмяПоля = ВРег("ДокументСерия")
		Или ИмяПоля = ВРег("ДокументНомер")
		Или ИмяПоля = ВРег("ДокументДатаВыдачи")
		Или ИмяПоля = ВРег("ДокументСрокДействия")
		Или ИмяПоля = ВРег("ДокументКемВыдан")
		Или ИмяПоля = ВРег("ДокументКодПодразделения")
		Или ИмяПоля = ВРег("ДокументСтранаВыдачи")
		Или ИмяПоля = ВРег("ДокументПредставление");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоДокументамУдостоверяющимЛичность(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияДокументовУдостоверяющихЛичность(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ДокументПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументВид") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ВидДокумента";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументСерия") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Серия";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументНомер") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Номер";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументДатаВыдачи") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДатаВыдачи";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументСрокДействия") Тогда
			УсловиеПоиска.ЛевоеЗначение = "СрокДействия";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументКемВыдан") Тогда
			УсловиеПоиска.ЛевоеЗначение = "КемВыдан";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументКодПодразделения") Тогда
			УсловиеПоиска.ЛевоеЗначение = "КодПодразделения";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументСтранаВыдачи") Тогда
			УсловиеПоиска.ЛевоеЗначение = "СтранаВыдачи";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументПредставление") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументКодМВД") Тогда
			
			УсловиеПоиска.ЛевоеЗначение = ПутьКДаннымСведенийОДокументахУдостоверяющихЛичность(ИмяПоля);
			УсловиеПоиска.ЛевоеЗначение = СтрЗаменить(УсловиеПоиска.ЛевоеЗначение, "ДокументыУдостоверяющиеЛичность.", "РегистрСведений.");
			УсловиеПоиска.ЛевоеЗначение = СтрЗаменить(УсловиеПоиска.ЛевоеЗначение, ".ДокументВид", ".ВидДокумента");
			
			УсловиеПоиска.ОтносительныйПуть = Ложь;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ДокументыФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОДокументахУдостоверяющихЛичность(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоляВВерхнемРегистре = ВРег("ДокументПериодРегистрации") Тогда
		ПутьКДанным = "	ДокументыУдостоверяющиеЛичность.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ДокументКодМВД") Тогда
		ПутьКДанным = "	ВЫРАЗИТЬ(ДокументыУдостоверяющиеЛичность.ДокументВид КАК Справочник.ВидыДокументовФизическихЛиц).КодМВД";
	Иначе
		ПутьКДанным = "	ДокументыУдостоверяющиеЛичность." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;

КонецФункции

// Сведения об инвалидности

Функция ДобавитьПолеСведенийОбИнвалидности(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбИнвалидности(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбИнвалидности", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОбИнвалидности(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбИнвалидности(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОбИнвалидности") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросВТ = КадровыйУчет.ЗапросВТСведенияОбИнвалидности(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбИнвалидности КАК СведенияОбИнвалидности
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СведенияОбИнвалидности.ФизическоеЛицо
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОбИнвалидности.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОбИнвалидности");
	
КонецПроцедуры

Функция НеобходимыСведенияОбИнвалидности(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ИнвалидностьПериодРегистрации")
		Или ИмяПоля = ВРег("Инвалидность")
		Или ИмяПоля = ВРег("ИнвалидностьДатаВыдачи")
		Или ИмяПоля = ВРег("ИнвалидностьСрокДействияСправки")
		Или ИмяПоля = ВРег("ИнвалидностьГруппаИнвалидности")
		Или ИмяПоля = ВРег("ИнвалидностьСерияСправки")
		Или ИмяПоля = ВРег("ИнвалидностьНомерСправки")
		Или ИмяПоля = ВРег("ИнвалидностьПроцентПотериТрудоспособности");
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбИнвалидности(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОбИнвалидности(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ИнвалидностьПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		ИначеЕсли ИмяПоля = ВРег("ИнвалидностьДатаВыдачи") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДатаВыдачи";
			
		ИначеЕсли ИмяПоля = ВРег("ИнвалидностьСрокДействияСправки") Тогда
			УсловиеПоиска.ЛевоеЗначение = "СрокДействияСправки";
			
		ИначеЕсли ИмяПоля = ВРег("ИнвалидностьГруппаИнвалидности") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ГруппаИнвалидности";
			
		ИначеЕсли ИмяПоля = ВРег("ИнвалидностьСерияСправки") Тогда
			УсловиеПоиска.ЛевоеЗначение = "СерияСправки";
			
		ИначеЕсли ИмяПоля = ВРег("ИнвалидностьНомерСправки") Тогда
			УсловиеПоиска.ЛевоеЗначение = "НомерСправки";
			
		ИначеЕсли ИмяПоля = ВРег("ИнвалидностьПроцентПотериТрудоспособности") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ПроцентПотериТрудоспособности";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.СведенияОбИнвалидностиФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОбИнвалидности(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоляВВерхнемРегистре = ВРег("ИнвалидностьПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОбИнвалидности.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИнвалидностьДатаВыдачи") Тогда
		ПутьКДанным = "	СведенияОбИнвалидности.ДатаВыдачи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИнвалидностьСрокДействияСправки") Тогда
		ПутьКДанным = "	СведенияОбИнвалидности.СрокДействияСправки";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИнвалидностьГруппаИнвалидности") Тогда
		ПутьКДанным = "	СведенияОбИнвалидности.ГруппаИнвалидности";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИнвалидностьСерияСправки") Тогда
		ПутьКДанным = "	СведенияОбИнвалидности.СерияСправки";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИнвалидностьНомерСправки") Тогда
		ПутьКДанным = "	СведенияОбИнвалидности.НомерСправки";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИнвалидностьПроцентПотериТрудоспособности") Тогда
		ПутьКДанным = "	СведенияОбИнвалидности.ПроцентПотериТрудоспособности";
	Иначе
		ПутьКДанным = "	СведенияОбИнвалидности." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о гражданстве

Функция ДобавитьПолеСведенийОГражданстве(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОГражданстве(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОГражданстве", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОГражданстве(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОГражданстве(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОГражданстве") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросВТ = КадровыйУчет.ЗапросВТСведенияОГражданстве(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОГражданстве КАК ГражданствоФизическихЛиц
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ГражданствоФизическихЛиц.ФизическоеЛицо
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ГражданствоФизическихЛиц.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОГражданстве");
	
КонецПроцедуры

Функция НеобходимыСведенияОГражданстве(Знач ИмяПоля)
	
	Возврат ВРег(ИмяПоля) = ВРег("ГражданствоПериодРегистрации")
		Или ВРег(ИмяПоля) = ВРег("Страна")
		Или ВРег(ИмяПоля) = ВРег("ИННВСтранеГражданства");
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОГражданстве(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОГражданстве(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ГражданствоПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ГражданствоФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОГражданстве(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоляВВерхнемРегистре = ВРег("ГражданствоПериодРегистрации") Тогда
		ПутьКДанным = "	ГражданствоФизическихЛиц.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Страна") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ГражданствоФизическихЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИННВСтранеГражданства") Тогда
		ПутьКДанным = "	ГражданствоФизическихЛиц.ИНН";
	КонецЕсли;
	
	Возврат ПутьКДанным;

КонецФункции

// Сведения о ФИО физических лиц.

Функция ДобавитьПолеСведенийОФИОФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных, ИмяПоляФизическоеЛицоТаблицыОтборов)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОФИОФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОФИОФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОФИОФизическихЛиц(ИмяПоля, ИмяПоляФизическоеЛицоТаблицыОтборов);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОФИОФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОФИОФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = КадровыйУчет.ЗапросВТСведенияОФИОФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	СоединениеСВТСведенияОФИОФизическихЛиц =
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОФИОФизическихЛиц КАК СведенияОФИОФизическихЛиц
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СведенияОФИОФизическихЛиц.ФизическоеЛицо
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОФИОФизическихЛиц.Период}";
		
	ЧастиЗапроса.Добавить(СоединениеСВТСведенияОФИОФизическихЛиц);
	
	Если ИсточникиДанных.Получить("РеквизитыСправочникаФизическиеЛица") <> Истина Тогда
		
		СоединениеСВТСведенияОФИОФизическихЛиц =
			"		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СправочникФизическиеЛица
			|			ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СправочникФизическиеЛица.Ссылка}";
			
		ЧастиЗапроса.Добавить(СоединениеСВТСведенияОФИОФизическихЛиц);
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОФИОФизическихЛиц");
	
КонецПроцедуры

Функция НеобходимыСведенияОФИОФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ФИОПериодРегистрации")
		Или ИмяПоля = ВРег("Фамилия")
		Или ИмяПоля = ВРег("Имя")
		Или ИмяПоля = ВРег("Отчество")
		Или ИмяПоля = ВРег("ФИОПолные")
		Или ИмяПоля = ВРег("ФамилияИО")
		Или ИмяПоля = ВРег("ИОФамилия")
		Или ИмяПоля = ВРег("Инициалы");
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОФИОФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОФИОФизическихЛиц(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ФИОПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		ИначеЕсли ИмяПоля = ВРег("ФамилияИО")
			Или ИмяПоля = ВРег("ИОФамилия")
			Или ИмяПоля = ВРег("ФИОПолные") Тогда
			
			УсловиеПоиска.ЛевоеЗначение = ПутьКДаннымСведенийОФИОФизическихЛиц(ИмяПоля);
			УсловиеПоиска.ЛевоеЗначение = СтрЗаменить(УсловиеПоиска.ЛевоеЗначение, "СведенияОФИОФизическихЛиц", "Т");
			
			УсловиеПоиска.ОтносительныйПуть = Ложь;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ФИОФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОФИОФизическихЛиц(Знач ИмяПоля, Знач ИмяПоляФизическоеЛицоТаблицыОтборов = Неопределено)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ФИОПериодРегистрации") Тогда
		
		ПутьКДанным = "	СведенияОФИОФизическихЛиц.ПериодЗаписи";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ФамилияИО")
		Или ИмяПоляВВерхнемРегистре = ВРег("ИОФамилия") Тогда
		
		Если ИмяПоляФизическоеЛицоТаблицыОтборов <> Неопределено Тогда
			
			// Формирование инициалов
			ПутьКДанным = 
				"	ЕСТЬNULL(СведенияОФИОФизическихЛиц.Инициалы, СправочникФизическиеЛица.Инициалы)";
			
			ПутьКДаннымФамилия = "ЕСТЬNULL(СведенияОФИОФизическихЛиц.Фамилия, СправочникФизическиеЛица.Фамилия)";
			
			// Формирование кадровых данных с инициалами
			Если ИмяПоляВВерхнемРегистре = ВРег("ИОФамилия") Тогда
				ПутьКДанным = ПутьКДанным + " + "" "" + " + ПутьКДаннымФамилия;
			Иначе
				ПутьКДанным = ПутьКДаннымФамилия + " + "" "" + " + ПутьКДанным;
			КонецЕсли;
			
		Иначе
			
			ПутьКДанным =
				"	ВЫБОР
				|		КОГДА СведенияОФИОФизическихЛиц.Имя = """"
				|			ТОГДА """"
				|		ИНАЧЕ ПОДСТРОКА(СведенияОФИОФизическихЛиц.Имя, 1, 1) + ""."" + ВЫБОР
				|			КОГДА СведенияОФИОФизическихЛиц.Отчество = """"
				|				ТОГДА """"
				|			ИНАЧЕ ПОДСТРОКА(СведенияОФИОФизическихЛиц.Отчество, 1, 1) + "".""
				|		КОНЕЦ
				|	КОНЕЦ";
				
			// Формирование кадровых данных с инициалами
			Если ИмяПоляВВерхнемРегистре = ВРег("ИОФамилия") Тогда
				ПутьКДанным = ПутьКДанным + " + "" "" + СведенияОФИОФизическихЛиц.Фамилия";
			Иначе
				ПутьКДанным = "СведенияОФИОФизическихЛиц.Фамилия + "" "" + " + ПутьКДанным;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Фамилия")
		Или ИмяПоляВВерхнемРегистре = ВРег("Имя")
		Или ИмяПоляВВерхнемРегистре = ВРег("Отчество")
		Или ИмяПоляВВерхнемРегистре = ВРег("Инициалы") Тогда
		
		ПутьКДанным = "	СведенияОФИОФизическихЛиц." + ИмяПоля;
		
		Если ИмяПоляФизическоеЛицоТаблицыОтборов <> Неопределено Тогда
			
			ПутьКДанным = 
				"	ВЫБОР
				|		КОГДА СведенияОФИОФизическихЛиц.Фамилия ЕСТЬ NULL
				|			ТОГДА СправочникФизическиеЛица." + ИмяПоля + "
				|		ИНАЧЕ " + ПутьКДанным + "
				|	КОНЕЦ";
			
		КонецЕсли;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ФИОПолные") Тогда
		
		ПутьКДанным = "	СведенияОФИОФизическихЛиц.Фамилия + ВЫБОР
			|		КОГДА СведенияОФИОФизическихЛиц.Имя = """"
			|			ТОГДА """"
			|		ИНАЧЕ "" "" + СведенияОФИОФизическихЛиц.Имя
			|	КОНЕЦ + ВЫБОР
			|		КОГДА СведенияОФИОФизическихЛиц.Отчество = """"
			|			ТОГДА """"
			|		ИНАЧЕ "" "" + СведенияОФИОФизическихЛиц.Отчество
			|	КОНЕЦ";
		
		// В случае отсутствия данных выбирается значение реквизита ФИО физического лица
		Если ИмяПоляФизическоеЛицоТаблицыОтборов <> Неопределено Тогда
			
			ПутьКДанным =
				"	ВЫБОР КОГДА СведенияОФИОФизическихЛиц.Фамилия ЕСТЬ NULL
				|		ТОГДА СправочникФизическиеЛица.ФИО
				|		ИНАЧЕ " + ПутьКДанным + "
				|	КОНЕЦ";
			
		КонецЕсли;
		
	Иначе
		ПутьКДанным = "	СведенияОФИОФизическихЛиц." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

#КонецОбласти


#Область КадровыеДанныеСотрудников

Функция ЗапросВТПостоянныеКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеСотрудников, ТаблицаОтборовСодержитПолеПериод, ТаблицаОтборовСодержитПолеФизическоеЛицо, УничтожитьВспомогательныеТаблицы) Экспорт
	
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
	Если ФормироватьТаблицуРазличных Тогда
		
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников = "ВТОтборовРазличныхПостоянныхСотрудников";
		
		ОписательВТОтборов = ОбщегоНазначения.СкопироватьРекурсивно(ОписательВременнойТаблицыОтборов);
		ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников = ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников;
		ОписательВТОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников = "";
		
	Иначе
		ОписательВТОтборов = ОбщегоНазначения.СкопироватьРекурсивно(ОписательВременнойТаблицыОтборов);
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников = ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников;
	КонецЕсли;
	
	ТекстыОписанияПолей = КадровыйУчет.ТекстыОписанияПолейЗапросПоляПостоянныхКадровыхДанныхСотрудников(ИменаКадровыхДанных, ИсточникиДанных);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборов.Период КАК Период,
		|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
		|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТПостоянныеКадровыеДанныеСотрудников
		|ИЗ
		|	ВТОтборовРазличныхПостоянныхСотрудников КАК ТаблицаОтборов";
	
	Если Не ТаблицаОтборовСодержитПолеПериод Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Период КАК Период,", "");
	ИначеЕсли Не ФормироватьТаблицуРазличных Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляПериод);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхПостоянныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	
	Если Не ФормироватьТаблицуРазличных Тогда
		
		ПрочиеРеквизитыСправочникаСотрудники = ИсточникиДанных.Получить("ПрочиеРеквизитыСправочникаСотрудники");
		Если Не ТаблицаОтборовСодержитПолеФизическоеЛицо
			Или ПрочиеРеквизитыСправочникаСотрудники <> Неопределено Тогда
			
			ЧастиЗапроса = Новый Массив;
			ЧастиЗапроса.Добавить(Запрос.Текст);
			ЧастиЗапроса.Добавить(
				"		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО ТаблицаОтборов.Сотрудник = Сотрудники.Ссылка");
			
			Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборов.ФизическоеЛицо", "Сотрудники.ФизическоеЛицо");
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ТаблицаОтборов.ГоловнойСотрудник", "Сотрудники.ГоловнойСотрудник");
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПостоянныеКадровыеДанныеСотрудников", ИмяВТПостоянныеКадровыеДанныеСотрудников);
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстыОписанияПолей, "ПОМЕСТИТЬ " + ИмяВТПостоянныеКадровыеДанныеСотрудников);
	КадровыйУчет.ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных, ФормироватьТаблицуРазличных);
	
	// В конце добавляется запрос функциональных опций организаций.
	ДобавитьТекстЗапросаВТФункциональныеОпцииОрганизаций(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных, "ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация");
	
	Если ФормироватьТаблицуРазличных Тогда
		
		ТекстЗапросаПолученияРазличныхЗаписей =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫРАЗИТЬ(ТаблицаОтборов.Сотрудник КАК Справочник.Сотрудники).ГоловнойСотрудник КАК ГоловнойСотрудникТаблицыРазличных
			|ПОМЕСТИТЬ ВТОтборовРазличныхПостоянныхСотрудников
			|ИЗ
			|	ВТОтборовСотрудников КАК ТаблицаОтборов";
		
		Если Не ТаблицаОтборовСодержитПолеПериод Тогда
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Период КАК Период,", "");
		Иначе
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляПериод);
		КонецЕсли;
		
		ПрочиеРеквизитыСправочникаСотрудники = ИсточникиДанных.Получить("ПрочиеРеквизитыСправочникаСотрудники");
		Если Не ТаблицаОтборовСодержитПолеФизическоеЛицо
			Или ПрочиеРеквизитыСправочникаСотрудники <> Неопределено Тогда
			
			Если ПрочиеРеквизитыСправочникаСотрудники <> Неопределено Тогда
				
				ТекстыОписанияПолейРеквизитовСотрудника = Новый Массив;
				Для каждого ИмяРеквизитаСотрудника Из ПрочиеРеквизитыСправочникаСотрудники Цикл
					
					ТекстыОписанияПолейРеквизитовСотрудника.Добавить(
						ПутьКДаннымЗначенийРеквизитовСправочникаСотрудники(ИмяРеквизитаСотрудника) + " КАК " +ИмяРеквизитаСотрудника);
					
				КонецЦикла;
				
				КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(
					ТекстЗапросаПолученияРазличныхЗаписей, ТекстыОписанияПолейРеквизитовСотрудника, "ПОМЕСТИТЬ ВТОтборовРазличныхПостоянныхСотрудников");
				
			КонецЕсли;
			
			ЧастиЗапроса = Новый Массив;
			ЧастиЗапроса.Добавить(ТекстЗапросаПолученияРазличныхЗаписей);
			ЧастиЗапроса.Добавить(
				"		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СправочникСотрудники
				|		ПО ТаблицаОтборов.Сотрудник = СправочникСотрудники.Ссылка");
				
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрСоединить(ЧастиЗапроса, Символы.ПС);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо", "СправочникСотрудники.ФизическоеЛицо КАК ФизическоеЛицо");
			
		КонецЕсли;
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
			
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаПолученияРазличныхЗаписей, ТолькоРазрешенные);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовРазличныхПостоянныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
		Запрос.Текст = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(
			ТекстЗапросаПолученияРазличныхЗаписей, Запрос.Текст);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
	КонецЕсли;
	
	Если УничтожитьВспомогательныеТаблицы Тогда
		КадровыйУчет.ДобавитьЗапросыУничтоженияВспомогательныхВременныхТаблиц(Запрос, ИсточникиДанных);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных, ИмяВТКадровыеДанныеСотрудников, ТаблицаОтборовСодержитПолеФизическоеЛицо, УничтожитьВспомогательныеТаблицы) Экспорт
	
	ТекстыОписанияПолей = Новый Массив;
	ТекстыОписанияПолейКадровыхДанныхФизическихЛиц = Новый Массив;
	ТекстыОписанияПолейПостоянныхКадровыхДанныхСотрудников = Новый Массив;
	
	ТекстЗапросаПолученияРазличныхЗаписей = "";
	
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	ИмяКоллекцииОбработанныеПоля = "ОбработанныеПоляКадровыеДанныеСотрудников";
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
	Если ФормироватьТаблицуРазличных Тогда
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников = "ВТОтборовРазличныхСотрудников";
	КонецЕсли;
	
	ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
	
	Если ИсточникиДанных.Получить("ЗапрашиваетсяТолькоКадроваяИсторияСотрудников") = Неопределено Тогда
		ИсточникиДанных.Вставить("ЗапрашиваетсяТолькоКадроваяИсторияСотрудников", Истина);
	КонецЕсли;
	
	Для каждого ИмяЗапрашиваемыхДанных Из ИменаКадровыхДанных Цикл
		
		ИмяКадровыхДанных = СокрЛП(ИмяЗапрашиваемыхДанных);
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхСотрудника(ИмяКадровыхДанных) Тогда
			
			Продолжить;
			
		ИначеЕсли КадровыйУчет.ЭтоОбработанноеПолеКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля) Тогда
			
			Продолжить;
			
		ИначеЕсли ДобавитьПолеСведенийКадровойИсторииСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПлановыхАвансах(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОбУчетеЗатрат(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОбОплатеТруда(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОЗарплатныхПроектах(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОКлассахУсловийТруда(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОВидахЗанятостиСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОДолеНеполногоРабочегоВремениСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЭлектронныеТрудовыеКнижки.ДобавитьПолеСведенийЗаявленийОВеденииТрудовойКнижки(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЭлектронныеТрудовыеКнижки.ДобавитьПолеСведенийОМероприятияхТрудовойДеятельности(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных) Тогда
			
			КадровыйУчет.ДобавитьВКоллекциюИмяОбработанныхКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля);
			
			Если Не КадровыйУчет.НеобходимыСведенияКадровойИсторииСотрудников(ИмяКадровыхДанных)
				Или КадровыйУчет.НеобходимыСведенияЗависящиеОтКадровойИсторииСотрудников(ИмяКадровыхДанных) Тогда
				
				ИсточникиДанных.Вставить("ЗапрашиваетсяТолькоКадроваяИсторияСотрудников", Ложь);
				
			КонецЕсли;
			
			Продолжить;
			
		ИначеЕсли Не ЭтоСтандартныйРеквизитСправочника(ИмяКадровыхДанных)
			И ДобавитьПолеКадровыхДанныхФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолейКадровыхДанныхФизическихЛиц, ИсточникиДанных) Тогда
			
			ИсточникиДанных.Вставить("ЗапрашиваетсяТолькоКадроваяИсторияСотрудников", Ложь);
			Продолжить;
			
		ИначеЕсли ДобавитьПолеПостоянныхКадровыхДанныхСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолейПостоянныхКадровыхДанныхСотрудников, ИсточникиДанных) Тогда
			
			ИсточникиДанных.Вставить("ЗапрашиваетсяТолькоКадроваяИсторияСотрудников", Ложь);
			Продолжить;
			
		ИначеЕсли ДобавитьПолеСведенийОМестеВыплатыЗарплаты(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных) Тогда
			
			КадровыйУчет.ДобавитьВКоллекциюИмяОбработанныхКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля);
			Продолжить;
			
		Иначе
			
			ИсточникиДанных.Вставить("ЗапрашиваетсяТолькоКадроваяИсторияСотрудников", Ложь);
			ТекстСообщенияИсключения = НСтр("ru='Среди кадровых данных сотрудников нет данных с именем'") + " """ + ИмяКадровыхДанных + """";
			ВызватьИсключение ТекстСообщенияИсключения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИсточникиДанных.Получить("ЗапрашиваетсяТолькоКадроваяИсторияСотрудников") = Истина Тогда
		
		Запрос = ЗапросВТСведенияКадровойИсторииСотрудников(
			ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТКадровыеДанныеСотрудников);
		
	Иначе
		
		ОбработанныеПоляКадровыеДанныеСотрудников = ИсточникиДанных.Получить("ОбработанныеПоляКадровыеДанныеСотрудников");
		Если (ОбработанныеПоляКадровыеДанныеСотрудников = Неопределено
			Или ОбработанныеПоляКадровыеДанныеСотрудников.Количество() = 0)
				И (ТекстыОписанияПолейПостоянныхКадровыхДанныхСотрудников.Количество() >0
					Или ТекстыОписанияПолейКадровыхДанныхФизическихЛиц.Количество() > 0) Тогда
			
			Если ТекстыОписанияПолейПостоянныхКадровыхДанныхСотрудников.Количество() > 0 Тогда
				
				ПостоянныеКадровыеДанныеСотрудников = ИсточникиДанных.Получить("ПостоянныеКадровыеДанныеСотрудников");
				ИсточникиДанных.Удалить("ПостоянныеКадровыеДанныеСотрудников");
				ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников = "";
				
				Запрос = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПостоянныеКадровыеДанныеСотрудников, ИсточникиДанных, "ВТКадровыеДанныеСотрудников", Истина, ТаблицаОтборовСодержитПолеФизическоеЛицо, Ложь);
				ЗаполнитьЗначенияСвойств(ОписательВТОтборов, ОписательВременнойТаблицыОтборов, "ИмяВременнойТаблицыОтборовРазличныхСотрудников,ИмяВременнойТаблицыОтборовСотрудников");
				
				ФормироватьТаблицуРазличных = Ложь;
				
			ИначеЕсли ТекстыОписанияПолейКадровыхДанныхФизическихЛиц.Количество() > 0 Тогда
				
				КадровыеДанныеФизическихЛиц = ИсточникиДанных.Получить("КадровыеДанныеФизическихЛиц");
				ИсточникиДанных.Удалить("КадровыеДанныеФизическихЛиц");
				
				ОписательВременнойТаблицыОтборовФизическихЛиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
				ОписательВременнойТаблицыОтборовФизическихЛиц.ИмяПоляФизическоеЛицо = ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + ".ФизическоеЛицо";
				ОписательВременнойТаблицыОтборовФизическихЛиц.Вставить("ИмяПоляСотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
				
				Запрос = КадровыйУчет.ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборовФизическихЛиц, КадровыеДанныеФизическихЛиц, ПоляОтбораПериодическихДанных, ИсточникиДанных, "ВТКадровыеДанныеСотрудников", Истина, Ложь);
				
			КонецЕсли;
			
		Иначе
			
			Запрос = Новый Запрос;
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТаблицаОтборов.Период КАК Период,
				|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
				|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников
				|ИЗ
				|	ВТОтборовРазличныхСотрудников КАК ТаблицаОтборов";
			
			Если Не ФормироватьТаблицуРазличных Тогда
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
				
			КонецЕсли;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
			
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
			КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстыОписанияПолей, "ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников");
			
			Если Не ФормироватьТаблицуРазличных Тогда
				
				ПрочиеРеквизитыСправочникаСотрудники = ИсточникиДанных.Получить("ПрочиеРеквизитыСправочникаСотрудники");
				Если Не ТаблицаОтборовСодержитПолеФизическоеЛицо
					Или ПрочиеРеквизитыСправочникаСотрудники <> Неопределено Тогда
					
					ЧастиЗапроса = Новый Массив;
					ЧастиЗапроса.Добавить(Запрос.Текст);
					ЧастиЗапроса.Добавить(
						"		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
						|		ПО ТаблицаОтборов.Сотрудник = Сотрудники.Ссылка");
					
					Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
					
					Запрос.Текст = СтрЗаменить(Запрос.Текст,
						"ТаблицаОтборов.ФизическоеЛицо", "Сотрудники.ФизическоеЛицо");
					
				КонецЕсли;
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"ТаблицаОтборов.ГоловнойСотрудник", "Сотрудники.ГоловнойСотрудник");
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьТекстЗапросаВТПостоянныеКадровыеДанныеСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных, "ВТКадровыеДанныеСотрудников", ФормироватьТаблицуРазличных);
		ДобавитьТекстЗапросаВТКадровыеДанныеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, "ВТКадровыеДанныеСотрудников");
		КадровыйУчет.ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
		ДобавитьТекстЗапросаВТСведенийОПлановыхАвансах(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ФормироватьСПериодичностьДень);
		ДобавитьТекстЗапросаВТСведенияОбУчетеЗатрат(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
		ДобавитьТекстЗапросаВТСведенияОбОплатеТруда(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ФормироватьСПериодичностьДень);
		ДобавитьТекстЗапросаВТСведенияОЗарплатныхПроектах(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
		ДобавитьТекстЗапросаВТСведенияОКлассахУсловийТруда(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
		ДобавитьТекстЗапросаВТСведенийОВидахЗанятостиСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ФормироватьСПериодичностьДень);
		ЭлектронныеТрудовыеКнижки.ДобавитьТекстЗапросаВТСведенийЗаявленийОВеденииТрудовойКнижки(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
		ЭлектронныеТрудовыеКнижки.ДобавитьТекстЗапросаВТСведенийОМероприятияхТрудовойДеятельности(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
		ДобавитьТекстЗапросаВТМестаВыплатыЗарплатыСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
		
		КадровыйУчет.ДобавитьТекстыЗапросовВТСведенийЗависящихОтФункциональныхОпцийОрганизаций(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТКадровыеДанныеСотрудников", ИмяВТКадровыеДанныеСотрудников);
		// В конце добавляется запрос функциональных опций организаций.
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			ПутьКПолюОрганизация = "КадроваяИсторияСотрудников.Организация";
		Иначе
			
			Если ИсточникиДанных.Получить("ТекущиеКадровыеДанныеСотрудников") <> Неопределено Тогда
				ПутьКПолюОрганизация = "ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация";
			Иначе
				ПутьКПолюОрганизация = "ПостоянныеКадровыеДанныеСотрудников.Организация";
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьТекстЗапросаВТФункциональныеОпцииОрганизаций(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных, ПутьКПолюОрганизация);
		
	КонецЕсли;
	
	Если ФормироватьТаблицуРазличных Тогда
		
		ТекстЗапросаПолученияРазличныхЗаписей =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫРАЗИТЬ(ТаблицаОтборов.Сотрудник КАК Справочник.Сотрудники).ГоловнойСотрудник КАК ГоловнойСотрудникТаблицыРазличных
			|ПОМЕСТИТЬ ВТОтборовРазличныхСотрудников
			|ИЗ
			|	ВТОтборовСотрудников КАК ТаблицаОтборов";
		
		ПрочиеРеквизитыСправочникаСотрудники = ИсточникиДанных.Получить("ПрочиеРеквизитыСправочникаСотрудники");
		Если Не ТаблицаОтборовСодержитПолеФизическоеЛицо
			Или ПрочиеРеквизитыСправочникаСотрудники <> Неопределено Тогда
			
			Если ПрочиеРеквизитыСправочникаСотрудники <> Неопределено Тогда
				
				ТекстыОписанияПолейРеквизитовСотрудника = Новый Массив;
				Для каждого ИмяРеквизитаСотрудника Из ПрочиеРеквизитыСправочникаСотрудники Цикл
					
					ТекстыОписанияПолейРеквизитовСотрудника.Добавить(
						ПутьКДаннымЗначенийРеквизитовСправочникаСотрудники(ИмяРеквизитаСотрудника) + " КАК " +ИмяРеквизитаСотрудника);
					
				КонецЦикла;
				
				КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(
					ТекстЗапросаПолученияРазличныхЗаписей, ТекстыОписанияПолейРеквизитовСотрудника, "ПОМЕСТИТЬ ВТОтборовРазличныхСотрудников");
				
			КонецЕсли;
			
			ЧастиЗапроса = Новый Массив;
			ЧастиЗапроса.Добавить(ТекстЗапросаПолученияРазличныхЗаписей);
			ЧастиЗапроса.Добавить(
				"		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СправочникСотрудники
				|		ПО ТаблицаОтборов.Сотрудник = СправочникСотрудники.Ссылка");
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрСоединить(ЧастиЗапроса, Символы.ПС);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборов.ФизическоеЛицо", "СправочникСотрудники.ФизическоеЛицо");
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборовСотрудников.ФизическоеЛицо,", "");
			
		КонецЕсли;
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовРазличныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаПолученияРазличныхЗаписей, ТолькоРазрешенные);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапросаПолученияРазличныхЗаписей) Тогда
		Запрос.Текст = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(ТекстЗапросаПолученияРазличныхЗаписей, Запрос.Текст);
	КонецЕсли;
	
	Если УничтожитьВспомогательныеТаблицы Тогда
		КадровыйУчет.ДобавитьЗапросыУничтоженияВспомогательныхВременныхТаблиц(Запрос, ИсточникиДанных);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЭтоСтандартныйРеквизитСправочника(Знач ИмяПоля)
	
	ИмяПоляВРег = ВРег(ИмяПоля);
	
	Возврат ИмяПоляВРег = ВРег("Код")
		Или ИмяПоляВРег = ВРег("Наименование");
	
КонецФункции

Функция ТекущиеКадровыеДанныеСотрудников() Экспорт
	
	Возврат
		"ДатаПриема,
		|ДатаЗавершенияРаботы,
		|ОформленПоТрудовомуДоговору,
		|ТекущаяОрганизация,
		|ТекущееПодразделение,
		|ТекущаяДолжность,
		|ТекущийВидЗанятости,
		|КоличествоСтавок,
		|ОсновноеРабочееМестоВОрганизации,
		|ДатаУвольнения";
	
КонецФункции

// Данные реквизитов справочника сотрудников.

Функция ДобавитьПолеРеквизитаСправочникаСотрудники(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыЗначенияРеквизитовСправочникаСотрудники(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("РеквизитыСправочникаСотрудники", Истина);
		
		Если ИмяПоля <> "ФизическоеЛицо" Тогда
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПрочиеРеквизитыСправочникаСотрудники", ИмяПоля);
		КонецЕсли;
		
		ПутьКДанным = ПутьКДаннымЗначенийРеквизитовСправочникаСотрудники(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыЗначенияРеквизитовСправочникаСотрудники(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат Метаданные.Справочники.Сотрудники.Реквизиты.Найти(ИмяПоля) <> Неопределено
		Или ИмяПоля = ВРег("ТабельныйНомер") 
		Или ИмяПоля = ВРег("Наименование") 
		Или ИмяПоля = ВРег("Код")
		Или ИмяПоля = ВРег("ПроцентСевернойНадбавки")
		Или ИмяПоля = ВРег("ПометкаУдаления");
	
КонецФункции

Функция ДобавитьКритерийПоискаСправочникаСотрудники(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыЗначенияРеквизитовСправочникаСотрудники(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ТабельныйНомер") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Код";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "Справочник.Сотрудники", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымЗначенийРеквизитовСправочникаСотрудники(ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоляВВерхнемРегистре = ВРег("Наименование") Тогда
		ПутьКДанным = "	СправочникСотрудники.Наименование";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Код") Или ИмяПоляВВерхнемРегистре = ВРег("ТабельныйНомер") Тогда
		ПутьКДанным = "	СправочникСотрудники.Код";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПроцентСевернойНадбавки") Тогда
		ПутьКДанным = "	СправочникСотрудники.ТекущийПроцентСевернойНадбавки";
	Иначе
		ПутьКДанным = "	СправочникСотрудники." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаДанныхРеквизитовСправочникаСотрудники(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ФормироватьТаблицуРазличных)
	
	Если ИсточникиДанных.Получить("РеквизитыСправочникаСотрудники") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ФормироватьТаблицуРазличных Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СправочникСотрудники.", "Сотрудники.");
	ИначеЕсли ИсточникиДанных.Получить("ПрочиеРеквизитыСправочникаСотрудники") <> Неопределено Тогда
		
		Для каждого ПрочийРеквизит Из ИсточникиДанных.Получить("ПрочиеРеквизитыСправочникаСотрудники") Цикл
			
			ПутьКРеквизиту = ПутьКДаннымЗначенийРеквизитовСправочникаСотрудники(ПрочийРеквизит);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ПутьКРеквизиту, "ТаблицаОтборов." + ПрочийРеквизит);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Постоянные кадровые данные физических лиц.

Функция ДобавитьПолеСведенийПостоянныхКадровыхДанныхФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если КадровыйУчет.НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПостоянныеКадровыеДанныеФизическихЛиц", ИмяПоля);
		
		ПутьКДанным = "	ПостоянныеКадровыеДанныеФизическихЛиц." + ИмяПоля;
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	КадровыеДанные = ИсточникиДанных.Получить("ПостоянныеКадровыеДанныеФизическихЛиц");
	Если КадровыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписательТаблиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников,
		ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + ".ФизическоеЛицо");
	
	ОписательТаблиц.Вставить("ИмяПоляСотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ЗапросВТПостоянныеКадровыеДанныеФЛ = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательТаблиц, КадровыеДанные, ИсточникиДанных);
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТПостоянныеКадровыеДанныеФЛ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТПостоянныеКадровыеДанныеФЛ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТПостоянныеКадровыеДанныеФизическихЛиц КАК ПостоянныеКадровыеДанныеФизическихЛиц
		|		ПО ВЫРАЗИТЬ(ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " КАК Справочник.Сотрудники).ФизическоеЛицо = ПостоянныеКадровыеДанныеФизическихЛиц.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТПостоянныеКадровыеДанныеФизическихЛиц");
	
КонецПроцедуры

// Текущие кадровые данные сотрудников.

Функция ДобавитьПолеСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияТекущихКадровыхДанныхСотрудников(ИмяПоля) Тогда
		
		ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
		
		ДобавленоПолеСведений = Истина;
		Если НеобходимыСведенияТекущихКадровыхДанныхГоловныхСотрудников(ИмяПоля) Тогда
			ИсточникиДанных.Вставить("ТекущиеКадровыеДанныеГоловныхСотрудников", Истина);
		ИначеЕсли ФОИспользоватьКадровыйУчет И КадровыйУчет.НеобходимыСведенияТекущихДанныхСотрудников(ИмяПоля) Тогда
			ИсточникиДанных.Вставить("ТекущиеДанныеСотрудников", Истина);
		ИначеЕсли НеобходимыСведенияТекущихВидовЗанятости(ИмяПоля) Тогда
			ИсточникиДанных.Вставить("ТекущиеВидыЗанятостиСотрудников", Истина);
		ИначеЕсли НеобходимыСведенияОбОсновномРабочемМестеВОрганизации(ИмяПоля) Тогда
			ИсточникиДанных.Вставить("ДанныеОбОсновномРабочемМестеВОрганизации", Истина);
		Иначе
			ИсточникиДанных.Вставить("ТекущиеКадровыеДанныеСотрудников", Истина);
		КонецЕсли;
		
		Если Не ФОИспользоватьКадровыйУчет Тогда
			
			ИмяФО = КадровыйУчет.ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(ИмяПоля, ИсточникиДанных);
			Если Не ПустаяСтрока(ИмяФО) Тогда
				КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПостоянныеКадровыеДанныеСотрудников", "Организация");
				КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ФункциональныеОпцииОрганизаций", ИмяФО);
			КонецЕсли;
			
		КонецЕсли; 
		
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияТекущихДанныхСотрудников(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СведенияНеобходимы = 
		ИмяПоля = ВРег("ТекущаяОрганизация")
		Или ИмяПоля = ВРег("ТекущееПодразделение")
		Или ИмяПоля = ВРег("ТекущаяДолжность")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") И ИмяПоля = ВРег("КоличествоСтавок");
	
	Возврат СведенияНеобходимы;
	
КонецФункции

Функция НеобходимыСведенияТекущихВидовЗанятости(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СведенияНеобходимы = ИмяПоля = ВРег("ТекущийВидЗанятости");
	
	Возврат СведенияНеобходимы;
	
КонецФункции

Функция НеобходимыСведенияОбОсновномРабочемМестеВОрганизации(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СведенияНеобходимы = ИмяПоля = ВРег("ОсновноеРабочееМестоВОрганизации");
	
	Возврат СведенияНеобходимы;
	
КонецФункции

Функция НеобходимыСведенияТекущихКадровыхДанныхСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СведенияНеобходимы = 
		(ИмяПоля = ВРег("ДатаПриема")
		Или ИмяПоля = ВРег("ДатаЗавершенияРаботы")
		Или ИмяПоля = ВРег("ОформленПоТрудовомуДоговору")
		Или НеобходимыСведенияТекущихКадровыхДанныхГоловныхСотрудников(ИмяПоля)
		Или КадровыйУчет.НеобходимыСведенияТекущихДанныхСотрудников(ИмяПоля)
		Или НеобходимыСведенияТекущихВидовЗанятости(ИмяПоля)
		Или НеобходимыСведенияОбОсновномРабочемМестеВОрганизации(ИмяПоля));
	
	Если Не СведенияНеобходимы И Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		СведенияНеобходимы = КадровыйУчет.НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля);
		Если Не СведенияНеобходимы Тогда
			СведенияНеобходимы = НеобходимыСведенияОВидахЗанятостиСотрудников(ИмяПоля);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СведенияНеобходимы;
	
КонецФункции

Функция НеобходимыСведенияТекущихКадровыхДанныхГоловныхСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ИмяПоля = ВРег("ДатаУвольнения");
	
КонецФункции

Функция ДобавитьКритерийПоискаПоТекущимКадровымДаннымСотрудников(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияТекущихКадровыхДанныхСотрудников(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		Если ВРег(УсловиеПоиска.ЛевоеЗначение) = ВРег("Организация") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ТекущаяОрганизация";
		ИначеЕсли ВРег(УсловиеПоиска.ЛевоеЗначение) = ВРег("Подразделение") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ТекущееПодразделение";
		ИначеЕсли ВРег(УсловиеПоиска.ЛевоеЗначение) = ВРег("Должность") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ТекущаяДолжность";
		ИначеЕсли ВРег(УсловиеПоиска.ЛевоеЗначение) = ВРег("ВидЗанятости") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ТекущийВидЗанятости";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ТекущиеКадровыеДанныеСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ОформленПоТрудовомуДоговору") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору, ЛОЖЬ)";
		
	ИначеЕсли Не ФОИспользоватьКадровыйУчет
		И КадровыйУчет.НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(ИмяПоляВВерхнемРегистре) Тогда
		
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(ИмяПоля);
		
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("РабочееМестоПериодРегистрации") Тогда
		ПутьКДанным = "	ВЫРАЗИТЬ(NULL КАК ДАТА)";
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("РабочееМестоРегистратор") Тогда
		ПутьКДанным = "	NULL";
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("Организация") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|		ТОГДА &ЗначениеNull
			|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
			|	КОНЕЦ";
		
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("Подразделение") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
			|		ТОГДА &ЗначениеNull
			|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение
			|	КОНЕЦ";
		
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("Должность") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
			|		ТОГДА &ЗначениеNull
			|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность
			|	КОНЕЦ";
		
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("ВидЗанятости") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
			|		ТОГДА &ЗначениеNull
			|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости
			|	КОНЕЦ";
		
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("КоличествоСтавок") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.КоличествоСтавок, 0)";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ДатаПриема") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1))";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ДатаУвольнения") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеГоловныхСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1))";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ДатаЗавершенияРаботы") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1))";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущаяОрганизация") Тогда
		
		Если ФОИспользоватьКадровыйУчет Тогда
			ПутьКДанным = "	ЕСТЬNULL(ТекущиеДанныеСотрудников.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
		Иначе
			ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
		КонецЕсли;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущееПодразделение") Тогда
		
		Если ФОИспользоватьКадровыйУчет Тогда
			ПутьКДанным = "	ЕСТЬNULL(ТекущиеДанныеСотрудников.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))";
		Иначе
			ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))";
		КонецЕсли;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущаяДолжность") Тогда
		
		Если ФОИспользоватьКадровыйУчет Тогда
			ПутьКДанным = "	ЕСТЬNULL(ТекущиеДанныеСотрудников.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))";
		Иначе
			ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))";
		КонецЕсли;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущийВидЗанятости") Тогда
		
		Если ФОИспользоватьКадровыйУчет Тогда
			ПутьКДанным = "	ЕСТЬNULL(ТекущиеВидыЗанятостиСотрудников.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))";
		Иначе
			ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))";
		КонецЕсли;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ОсновноеРабочееМестоВОрганизации") Тогда
		
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА НЕ ДанныеОбОсновномРабочемМестеВОрганизации.Сотрудник ЕСТЬ NULL
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ";
		
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("ВидЗанятостиПериодРегистрации") Тогда
		ПутьКДанным = "	ВЫРАЗИТЬ(NULL КАК ДАТА)";
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("ВидСобытия") Тогда
		ПутьКДанным = "	ВЫРАЗИТЬ(NULL КАК Перечисление.ВидыКадровыхСобытий)";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаТекущихКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапросаСоединений = Новый Массив;
	
	Запрос.УстановитьПараметр("ЗначениеNull", Null);
	
	Если ИсточникиДанных.Получить("ТекущиеКадровыеДанныеСотрудниковСоединениеУстановлено") <> Истина
		И ИсточникиДанных.Получить("ТекущиеКадровыеДанныеСотрудников") <> Неопределено Тогда
		
		ИсточникиДанных.Вставить("ТекущиеКадровыеДанныеСотрудниковСоединениеУстановлено", Истина);
		
		ЧастиЗапросаСоединений.Добавить(
			"		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ТекущиеКадровыеДанныеСотрудников.Сотрудник");
		
	КонецЕсли;
	
	Если ИсточникиДанных.Получить("ТекущиеКадровыеДанныеГоловныхСотрудниковСоединениеУстановлено") <> Истина
		И ИсточникиДанных.Получить("ТекущиеКадровыеДанныеГоловныхСотрудников") <> Неопределено Тогда
		
		ИсточникиДанных.Вставить("ТекущиеКадровыеДанныеГоловныхСотрудниковСоединениеУстановлено", Истина);
		
		ЧастиЗапросаСоединений.Добавить(
			"		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеГоловныхСотрудников
			|		ПО ТаблицаОтборов.ГоловнойСотрудникТаблицыРазличных = ТекущиеКадровыеДанныеГоловныхСотрудников.Сотрудник}");
		
	КонецЕсли;
	
	Если ИсточникиДанных.Получить("ТекущиеДанныеСотрудниковСоединениеУстановлено") <> Истина
		И ИсточникиДанных.Получить("ТекущиеДанныеСотрудников") <> Неопределено Тогда
		
		ИсточникиДанных.Вставить("ТекущиеДанныеСотрудниковСоединениеУстановлено", Истина);
		
		ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборТекущихДанныхСотрудников", "Сотрудник");
		ЗапросСреза = ЗарплатаКадрыПериодическиеРегистры.ЗапросВТИмяРегистраСрез("КадроваяИсторияСотрудников", ТолькоРазрешенные, ОписаниеФильтра, ,Истина, "ВТТекущиеДанныеСотрудников");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросСреза);
		
		ЧастиЗапроса.Добавить(ЗапросСреза.Текст);
		
		ЧастиЗапросаСоединений.Добавить(
			"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеДанныеСотрудников КАК ТекущиеДанныеСотрудников
			|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ТекущиеДанныеСотрудников.Сотрудник}");
		
	КонецЕсли;
	
	Если ИсточникиДанных.Получить("ТекущиеВидыЗанятостиСотрудниковСоединениеУстановлено") <> Истина
		И ИсточникиДанных.Получить("ТекущиеВидыЗанятостиСотрудников") <> Неопределено Тогда
		
		ИсточникиДанных.Вставить("ТекущиеВидыЗанятостиСотрудниковСоединениеУстановлено", Истина);
		
		ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборТекущихДанныхСотрудников", "Сотрудник");
		ЗапросСреза = ЗарплатаКадрыПериодическиеРегистры.ЗапросВТИмяРегистраСрез("ВидыЗанятостиСотрудников", ТолькоРазрешенные, ОписаниеФильтра, ,Истина, "ВТТекущиеВидыЗанятостиСотрудников");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросСреза);
		
		Если ЧастиЗапроса.Количество() > 0 Тогда
			ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		КонецЕсли;
		
		ЧастиЗапроса.Добавить(ЗапросСреза.Текст);
		
		ЧастиЗапросаСоединений.Добавить(
			"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеВидыЗанятостиСотрудников КАК ТекущиеВидыЗанятостиСотрудников
			|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ТекущиеВидыЗанятостиСотрудников.Сотрудник}");
		
	КонецЕсли;
	
	Если ИсточникиДанных.Получить("ДанныеОбОсновномРабочемМестеВОрганизацииСоединениеУстановлено") <> Истина
		И ИсточникиДанных.Получить("ДанныеОбОсновномРабочемМестеВОрганизации") <> Неопределено Тогда
		
		ИсточникиДанных.Вставить("ДанныеОбОсновномРабочемМестеВОрганизацииСоединениеУстановлено", Истина);
		
		Запрос.УстановитьПараметр("МаксимальнаяДатаНачалоДня", НачалоДня(ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата()));
		
		ЧастиЗапросаСоединений.Добавить(
			"		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ДанныеОбОсновномРабочемМестеВОрганизации
			|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ДанныеОбОсновномРабочемМестеВОрганизации.Сотрудник
			|			И ДанныеОбОсновномРабочемМестеВОрганизации.ДатаОкончания = &МаксимальнаяДатаНачалоДня}");
		
	КонецЕсли;
	
	Если ИсточникиДанных.Получить("ОтборТекущихДанныхСотрудниковСоединениеУстановлено") <> Истина
		И (ИсточникиДанных.Получить("ТекущиеДанныеСотрудниковСоединениеУстановлено") = Истина
			Или ИсточникиДанных.Получить("ТекущиеВидыЗанятостиСотрудниковСоединениеУстановлено") = Истина) Тогда
		
		ИсточникиДанных.Вставить("ОтборТекущихДанныхСотрудниковСоединениеУстановлено", Истина);
		
		Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
		
		ЗапросТаблицыОтбора =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаОтбора.Сотрудник КАК Сотрудник,
			|	&МаксимальнаяДата КАК Период
			|ПОМЕСТИТЬ ВТОтборТекущихДанныхСотрудников
			|ИЗ
			|	ВТТаблицаОтбора КАК ТаблицаОтбора";
		
		ЗапросТаблицыОтбора = СтрЗаменить(ЗапросТаблицыОтбора, "ТаблицаОтбора.Сотрудник", "ТаблицаОтбора." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		ЗапросТаблицыОтбора = СтрЗаменить(ЗапросТаблицыОтбора, "ВТТаблицаОтбора", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
		ЧастиЗапроса.Вставить(0, ЗапросТаблицыОтбора);
		ЧастиЗапроса.Вставить(1, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
	КонецЕсли;
	
	Если ЧастиЗапроса.Количество() > 0
		Или ЧастиЗапросаСоединений.Количество() > 0 Тогда
		
		Если ЧастиЗапроса.Количество() > 0 Тогда
			ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		КонецЕсли;
		
		ЧастиЗапроса.Добавить(Запрос.Текст);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЧастиЗапроса, ЧастиЗапросаСоединений);
		
		Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
		
	КонецЕсли;
	
КонецПроцедуры

// Текущие тарифные ставки

Функция ДобавитьПолеСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если КадровыйУчет.НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("ТекущаяТарифнаяСтавкаСотрудников", Истина);
		
		Если ИмяПоля = ВРег("ФОТ") Тогда
			ИсточникиДанных.Вставить("ТекущиеКадровыеДанныеСотрудников", Истина);
		КонецЕсли;
		
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СведенияНеобходимы = (ИмяПоля = ВРег("ТекущаяТарифнаяСтавка")
		Или ИмяПоля = ВРег("ТекущийСпособРасчетаАванса")
		Или ИмяПоля = ВРег("ТекущийАванс"));
		
	Если Не СведенияНеобходимы И Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		СведенияНеобходимы = КадровыйУчет.НеобходимыСведенияОбОплатеТруда(ИмяПоля);
		Если Не СведенияНеобходимы Тогда
			СведенияНеобходимы = НеобходимыСведенияОПлановыхАвансах(ИмяПоля);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СведенияНеобходимы;
	
КонецФункции

Функция ДобавитьКритерийПоискаПоТекущимТарифнымСтавкамСотрудников(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если КадровыйУчет.НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТекущаяТарифнаяСтавка") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0)";
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Если ИмяПоляВВерхнемРегистре = ВРег("ТекущийСпособРасчетаАванса") Тогда
			ПутьКДанным = "	ЕСТЬNULL(ТекущиеПлановыеАвансы.СпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка))";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущийАванс") Тогда
			ПутьКДанным = "	ЕСТЬNULL(ТекущиеПлановыеАвансы.Аванс, 0)";
		КонецЕсли;
		
	Иначе
		
		Если ИмяПоляВВерхнемРегистре = ВРег("ТекущийСпособРасчетаАванса") Тогда
			ПутьКДанным = "	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийСпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка))";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущийАванс") Тогда
			ПутьКДанным = "	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийАванс, 0)";
		КонецЕсли;
		
		Если КадровыйУчет.НеобходимыСведенияОбОплатеТруда(ИмяПоляВВерхнемРегистре) Тогда
			
			Если ИмяПоляВВерхнемРегистре = ВРег("ОплатаТрудаПериодЗаписи") Тогда
				ПутьКДанным = "	ВЫРАЗИТЬ(NULL КАК ДАТА)";
			ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ОплатаТрудаРегистратор") Тогда
				ПутьКДанным = "	NULL";
			ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Надбавка") Тогда
				ПутьКДанным = "	0";
			ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ФОТ") Тогда
				ПутьКДанным = "	ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка * "
					+ КадровыйУчет.ПутьКДаннымСведенийОДолеНеполногоРабочегоВремени("ДоляНеполногоРабочегоВремени")
			Иначе
				ПутьКДанным = "	ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка";
			КонецЕсли;
			
		ИначеЕсли НеобходимыСведенияОПлановыхАвансах(ИмяПоля) Тогда
			
			Если ИмяПоляВВерхнемРегистре = ВРег("АвансПериодРегистрации") Тогда
				ПутьКДанным = "	ВЫРАЗИТЬ(NULL КАК ДАТА)";
			ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("АвансРегистратор") Тогда
				ПутьКДанным = "	NULL";
			ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СпособРасчетаАванса") Тогда
				ПутьКДанным = "	ТекущаяТарифнаяСтавкаСотрудников.ТекущийСпособРасчетаАванса";
			ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Аванс") Тогда
				ПутьКДанным = "	ТекущаяТарифнаяСтавкаСотрудников.ТекущийАванс";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаТекущихТарифныхСтавок(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	
	Если ИсточникиДанных.Получить("ТекущаяТарифнаяСтавкаСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	ЗапросТаблицыОтбора =
		"ВЫБРАТЬ
		|	ТаблицаОтбора.Сотрудник КАК Сотрудник,
		|	&МаксимальнаяДата КАК Период
		|ПОМЕСТИТЬ ВТОтборТекущихАвансов
		|ИЗ
		|	ВТТаблицаОтбора КАК ТаблицаОтбора";
	
	ЗапросТаблицыОтбора = СтрЗаменить(ЗапросТаблицыОтбора, "ТаблицаОтбора.Сотрудник", "ТаблицаОтбора." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	ЗапросТаблицыОтбора = СтрЗаменить(ЗапросТаблицыОтбора, "ВТТаблицаОтбора", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборТекущихАвансов", "Сотрудник");
	ЗапросСреза = ЗарплатаКадрыПериодическиеРегистры.ЗапросВТИмяРегистраСрез("ПлановыеАвансы", ТолькоРазрешенные, ОписаниеФильтра, ,Истина, "ВТТекущиеАвансы");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросСреза);
	
	ЧастиЗапроса = Новый Массив;    
	ЧастиЗапроса.Добавить(ЗапросТаблицыОтбора + ";" + Символы.ПС);
	ЧастиЗапроса.Добавить(ЗапросСреза.Текст + ";" + Символы.ПС);
	ЧастиЗапроса.Добавить(Запрос.Текст);
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ТекущаяТарифнаяСтавкаСотрудников.Сотрудник}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеАвансы КАК ТекущиеПлановыеАвансы
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ТекущиеПлановыеАвансы.Сотрудник}");
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТОтборТекущихАвансов");
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТТекущиеАвансы");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
КонецПроцедуры

// Данные приказов о приеме об увольнении.

Функция ДобавитьПолеСведенийДанныхПриказаОПриемеОбУвольнении(Знач ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	
	НеобходимаДатаНачалаУчета = НеобходимыСведенияОДатеНачалаУчета(ИмяПоля);
	НеобходимыСведенияОПриеме = КадровыйУчет.НеобходимыСведенияПриказаОПриеме(ИмяПоля);
	Если НеобходимаДатаНачалаУчета
		Или НеобходимыСведенияОПриеме
		Или НеобходимыСведенияПриказаОбУвольнении(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		
		НеобходимыеСведения = ИсточникиДанных.Получить("ДанныеПриказаОПриемеОбУвольнении");
		Если НеобходимыеСведения = Неопределено Тогда
			НеобходимыеСведения = Новый Структура("НеобходимаДатаНачалаУчета,НеобходимыСведенияПриказаОПриеме,НеобходимыСведенияПриказаОбУвольнении", Ложь, Ложь, Ложь);
		КонецЕсли; 
		
		Если НеобходимаДатаНачалаУчета Тогда
			НеобходимыеСведения.НеобходимаДатаНачалаУчета = Истина;
		ИначеЕсли НеобходимыСведенияОПриеме Тогда
			НеобходимыеСведения.НеобходимыСведенияПриказаОПриеме = Истина;
		Иначе
			НеобходимыеСведения.НеобходимыСведенияПриказаОбУвольнении = Истина;
		КонецЕсли;
		ИсточникиДанных.Вставить("ДанныеПриказаОПриемеОбУвольнении", НеобходимыеСведения);
		
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОДатеНачалаУчета(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ДатаНачалаУчета");
	
КонецФункции

Функция НеобходимыСведенияПриказаОПриеме(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПриказОПриеме")
		Или ИмяПоля = ВРег("ПриказОПриемеДата")
		Или ИмяПоля = ВРег("ПриказОПриемеНомер")
		Или ИмяПоля = ВРег("ПриказОПриемеНомерПриказа")
		Или ИмяПоля = ВРег("НазначениеПодработки");
	
КонецФункции

Функция НеобходимыСведенияПриказаОбУвольнении(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПриказОбУвольнении")
		Или ИмяПоля = ВРег("ПриказОбУвольненииДата")
		Или ИмяПоля = ВРег("ПриказОбУвольненииНомер")
		Или ИмяПоля = ВРег("ПриказОбУвольненииНомерПриказа")
		Или ИмяПоля = ВРег("ПриказОбУвольненииСтатьяТКРФ")
		Или ИмяПоля = ВРег("ПрекращениеПодработки");
	
КонецФункции

Функция ЗапросВТСведенийПриказовОПриеме(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОПриеме) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботу.Ссылка КАК Ссылка,
		|	ПриемНаРаботу.Номер КАК Номер,
		|	ПриемНаРаботу.НомерПриказа КАК НомерПриказа,
		|	ПриемНаРаботу.Дата КАК Дата,
		|	ПриемНаРаботу.Организация КАК Организация,
		|	ПриемНаРаботу.Подразделение КАК Подразделение,
		|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
		|	ПриемНаРаботу.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПриемНаРаботу.Должность КАК Должность,
		|	ПриемНаРаботу.ДатаПриема КАК ДатаПриема,
		|	ПриемНаРаботу.ВидЗанятости КАК ВидЗанятости,
		|	ПриемНаРаботу.УсловияПриема КАК УсловияПриема,
		|	ПриемНаРаботу.СпособРасчетаАванса КАК СпособРасчетаАванса,
		|	ПриемНаРаботу.Аванс КАК Аванс,
		|	ПриемНаРаботу.Руководитель КАК Руководитель,
		|	ПриемНаРаботу.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ПриемНаРаботу.Проведен КАК Проведен
		|ПОМЕСТИТЬ ВТСведенийПриказовОПриеме
		|{ВЫБРАТЬ
		|	Подразделение.* КАК ПодразделениеПриПриеме,
		|	Организация.* КАК ОрганизацияПриПриеме,
		|	Должность.* КАК ДолжностьПриПриеме}
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО ПриемНаРаботу.Сотрудник = КадроваяИстория.Сотрудник
		|			И ПриемНаРаботу.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадроваяИсторияСотрудников", ИмяВТКадроваяИсторияСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСведенийПриказовОПриеме", ИмяВТСведенийПриказовОПриеме);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенийПриказовОбУвольнении(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОбУвольнении) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Увольнение.Ссылка КАК Ссылка,
		|	Увольнение.Номер КАК Номер,
		|	Увольнение.НомерПриказа КАК НомерПриказа,
		|	Увольнение.Дата КАК Дата,
		|	Увольнение.Организация КАК Организация,
		|	Увольнение.ДатаУвольнения КАК ДатаУвольнения,
		|	Увольнение.Сотрудник КАК Сотрудник,
		|	Увольнение.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Увольнение.СтатьяТКРФ КАК СтатьяТКРФ,
		|	Увольнение.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	Увольнение.Руководитель КАК Руководитель,
		|	Увольнение.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	Увольнение.Проведен КАК Проведен
		|ПОМЕСТИТЬ ВТСведенийПриказовОбУвольнении
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО Увольнение.Сотрудник = КадроваяИстория.Сотрудник
		|			И Увольнение.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадроваяИсторияСотрудников", ИмяВТКадроваяИсторияСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСведенийПриказовОбУвольнении", ИмяВТСведенийПриказовОбУвольнении);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

Функция ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(Знач ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Если ИмяПоляВВерхнемРегистре = ВРег("ДатаНачалаУчета") Тогда
			ПутьКДанным = "	ДатыНачалаУчета.ПериодЗаписи";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриеме") Тогда
			ПутьКДанным = "	ПриказыОПриеме.Ссылка";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеДата") Тогда
			ПутьКДанным = "	ПриказыОПриеме.Дата";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеНомер") Тогда
			ПутьКДанным = "	ПриказыОПриеме.Номер";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеНомерПриказа") Тогда
			ПутьКДанным = "	ПриказыОПриеме.НомерПриказа";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("НазначениеПодработки") Тогда
			ПутьКДанным = "	ДатыНазначенияПодработок.Регистратор";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольнении") Тогда
			ПутьКДанным = "	ПриказыОбУвольнении.Ссылка";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольненииДата") Тогда
			ПутьКДанным = "	ПриказыОбУвольнении.Дата";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольненииНомер") Тогда
			ПутьКДанным = "	ПриказыОбУвольнении.Номер";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольненииНомерПриказа") Тогда
			ПутьКДанным = "	ПриказыОбУвольнении.НомерПриказа";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольненииСтатьяТКРФ") Тогда
			ПутьКДанным = "	ПриказыОбУвольнении.СтатьяТКРФ";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПрекращениеПодработки") Тогда
			ПутьКДанным = "	ДатыПрекращенияПодработок.Регистратор";
		КонецЕсли;
		
	Иначе
		
		Если ИмяПоляВВерхнемРегистре = ВРег("ДатаНачалаУчета")
			Или ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеДата")
			Или ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольненииДата") Тогда
			
			ПутьКДанным = "	ВЫРАЗИТЬ(NULL КАК ДАТА)";
			
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеНомер")
			Или ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольненииНомер")
			Или ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеНомерПриказа")
			Или ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольненииНомерПриказа") Тогда
			
			ПутьКДанным = "	ВЫРАЗИТЬ(NULL КАК СТРОКА(1024))";
			
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольненииСтатьяТКРФ") Тогда
			ПутьКДанным = "	ВЫРАЗИТЬ(NULL КАК Справочник.ОснованияУвольнения)";
		Иначе
			ПутьКДанным = "	NULL";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаДанныхПриказовОПриемеОбУвольнении(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("ДанныеПриказаОПриемеОбУвольнении");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТИзмеренияДатыДляТаблицыПриказов",
		"Сотрудник");
	
	КадровыеСобытия = "";
	Если НеобходимыеСведения.НеобходимаДатаНачалаУчета Тогда
		КадровыеСобытия = "ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)";
	ИначеЕсли НеобходимыеСведения.НеобходимыСведенияПриказаОПриеме Тогда
		КадровыеСобытия = "ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)";
	КонецЕсли;
	
	Если НеобходимыеСведения.НеобходимыСведенияПриказаОбУвольнении Тогда
		КадровыеСобытия = ?(ПустаяСтрока(КадровыеСобытия), "", КадровыеСобытия + ",") + "ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидСобытия", "В", КадровыеСобытия);
	
	ЗапросВТИмяРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТКадроваяИсторияСотрудниковДляТаблицыПриказов");
	
	ТекстДляКомпоновщика =
		"{ВЫБРАТЬ
		|	Организация.* КАК ОрганизацияДляПриказовОПриемеИОбУдалении,
		|	Подразделение.* КАК ПодразделениеДляПриказовОПриемеИОбУдалении,
		|	Должность.* КАК ДолжностьДляПриказовОПриемеИОбУдалении}
		|ПОМЕСТИТЬ ВТКадроваяИсторияСотрудниковДляТаблицыПриказов";
	
	ЗапросВТИмяРегистра.Текст = СтрЗаменить(ЗапросВТИмяРегистра.Текст, "ПОМЕСТИТЬ ВТКадроваяИсторияСотрудниковДляТаблицыПриказов", ТекстДляКомпоновщика);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистра);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	Если НеобходимыеСведения.НеобходимаДатаНачалаУчета Тогда
		
		ЧастиЗапроса.Добавить(
			"{ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковДляТаблицыПриказов КАК ДатыНачалаУчета
			|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ДатыНачалаУчета.Сотрудник
			|		И ДатыНачалаУчета.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))}");
		
	КонецЕсли; 
	
	Если НеобходимыеСведения.НеобходимыСведенияПриказаОПриеме Тогда
		
		ЗапросСведенийПриказовОПриеме = КадровыйУчет.ЗапросВТСведенийПриказовОПриеме("ВТКадроваяИсторияСотрудниковДляТаблицыПриказов", ТолькоРазрешенные);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ЗапросВТИмяРегистра.Текст, ЗапросСведенийПриказовОПриеме.Текст);
		
		ЧастиЗапроса.Добавить(
			"{ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковДляТаблицыПриказов КАК ДатыНачалаУчетаПриемов
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенийПриказовОПриеме КАК ПриказыОПриеме
			|		ПО ДатыНачалаУчетаПриемов.Сотрудник = ПриказыОПриеме.Сотрудник
			|			И ДатыНачалаУчетаПриемов.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
			|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ДатыНачалаУчетаПриемов.Сотрудник
			|		И ДатыНачалаУчетаПриемов.ЭтоГоловнойСотрудник}");
		
		ЧастиЗапроса.Добавить(
			"{ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковДляТаблицыПриказов КАК ДатыНазначенияПодработок
			|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ДатыНазначенияПодработок.Сотрудник
			|		И НЕ ДатыНазначенияПодработок.ЭтоГоловнойСотрудник
			|		И ДатыНазначенияПодработок.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))}");
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенийПриказовОПриеме");
		
	КонецЕсли;
	
	Если НеобходимыеСведения.НеобходимыСведенияПриказаОбУвольнении Тогда
		
		ЗапросСведенийПриказовОбУвольнении = КадровыйУчет.ЗапросВТСведенийПриказовОбУвольнении("ВТКадроваяИсторияСотрудниковДляТаблицыПриказов", ТолькоРазрешенные);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ЗапросВТИмяРегистра.Текст, ЗапросСведенийПриказовОбУвольнении.Текст);
		
		ЧастиЗапроса.Добавить(
			"{ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковДляТаблицыПриказов КАК ДатыУвольнений
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенийПриказовОбУвольнении КАК ПриказыОбУвольнении
			|		ПО ДатыУвольнений.Сотрудник = ПриказыОбУвольнении.Сотрудник
			|			И ДатыУвольнений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
			|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ДатыУвольнений.Сотрудник
			|		И ДатыУвольнений.ЭтоГоловнойСотрудник}");
		
		ЧастиЗапроса.Добавить(
			"{ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковДляТаблицыПриказов КАК ДатыПрекращенияПодработок
			|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ДатыПрекращенияПодработок.Сотрудник
			|		И Не ДатыПрекращенияПодработок.ЭтоГоловнойСотрудник
			|		И ДатыПрекращенияПодработок.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)}");
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенийПриказовОбУвольнении");
		
	КонецЕсли;
	
	ЧастиЗапроса.Вставить(0,
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИзмеренияДаты." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТИзмеренияДатыДляТаблицыПриказов
		|ИЗ
		|	" + ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников + " КАК ИзмеренияДаты");
		
	ЧастиЗапроса.Вставить(1, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Вставить(2, ЗапросВТИмяРегистра.Текст);
	ЧастиЗапроса.Вставить(3, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	Запрос.Текст =  СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТИзмеренияДатыДляТаблицыПриказов");
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТКадроваяИсторияСотрудниковДляТаблицыПриказов");
	
КонецПроцедуры

// Постоянные кадровые данные

Функция ДобавитьПолеПостоянныхКадровыхДанныхСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если КадровыйУчет.НеобходимыПостоянныеКадровыеДанныеСотрудников(ИмяПоля) Тогда
		
		Если НеобходимыЗначенияРеквизитовСправочникаСотрудники(ИмяПоля)
			И ИмяПоля <> "ФизическоеЛицо" Тогда
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПрочиеРеквизитыСправочникаСотрудники", ИмяПоля);
			
		КонецЕсли;
		
		ДобавленоПолеСведений = Истина;
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПостоянныеКадровыеДанныеСотрудников", ИмяПоля);
		
		ПутьКДанным = "	ПостоянныеКадровыеДанныеСотрудников." + ИмяПоля;
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыПостоянныеКадровыеДанныеСотрудников(ИмяПоля) Экспорт
	
	Возврат НеобходимыЗначенияРеквизитовСправочникаСотрудники(ИмяПоля)
		Или НеобходимыСведенияТекущихКадровыхДанныхСотрудников(ИмяПоля)
		Или КадровыйУчет.НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля)
		Или НеобходимыСведенияОДатеНачалаУчета(ИмяПоля)
		Или КадровыйУчет.НеобходимыСведенияПриказаОПриеме(ИмяПоля)
		Или НеобходимыСведенияПриказаОбУвольнении(ИмяПоля);
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТПостоянныеКадровыеДанныеСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ИмяВТКадровыеДанныеСотрудников, ФормироватьТаблицуРазличных);
	
	КадровыеДанные = ИсточникиДанных.Получить("ПостоянныеКадровыеДанныеСотрудников");
	Если КадровыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыОписанияПолей = КадровыйУчет.ТекстыОписанияПолейЗапросПоляПостоянныхКадровыхДанныхСотрудников(КадровыеДанные, ИсточникиДанных);
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстыОписанияПолей, "ПОМЕСТИТЬ " + ИмяВТКадровыеДанныеСотрудников);
	КадровыйУчет.ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ФормироватьТаблицуРазличных);
	
КонецПроцедуры

// Кадровые данные физических лиц.

Функция ДобавитьПолеКадровыхДанныхФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если КадровыйУчет.НеобходимыКадровыеДанныеФизическогоЛица(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "КадровыеДанныеФизическихЛиц", ИмяПоля);
		
		ПутьКДанным = "	КадровыеДанныеФизическихЛиц." + ИмяПоля;
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТКадровыеДанныеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеСотрудников)
	
	КадровыеДанные = ИсточникиДанных.Получить("КадровыеДанныеФизическихЛиц");
	Если КадровыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников) Тогда
		ОписательВременнойТаблицыОтборовФизическихЛиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
	Иначе
		ОписательВременнойТаблицыОтборовФизическихЛиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	КонецЕсли;
	ОписательВременнойТаблицыОтборовФизическихЛиц.Вставить("ИмяПоляСотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ТекстыЗапросов = СтрРазделить(Запрос.Текст, ";");
	
	КоличествоЗапросов = ТекстыЗапросов.Количество();
	Для СдвигНомераЗапроса = 1 По КоличествоЗапросов Цикл
		
		ТекстПоследнегоЗапроса = ТекстыЗапросов[КоличествоЗапросов - СдвигНомераЗапроса];
		Если СтрНайти(ТекстПоследнегоЗапроса, "УНИЧТОЖИТЬ") = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросДляКадровыхДанныхФизическихЛиц = Новый Запрос;
	ЗапросДляКадровыхДанныхФизическихЛиц.Текст = ТекстПоследнегоЗапроса;
	
	КадровыйУчет.ДобавитьВЗапросПоляКадровыхДанныхФизическихЛиц(ЗапросДляКадровыхДанныхФизическихЛиц, КадровыеДанные, ИсточникиДанных, ОписательВременнойТаблицыОтборовФизическихЛиц, ИмяВТКадровыеДанныеСотрудников);
	КадровыйУчет.ДобавитьВЗапросСоединенияСИсточникамиКадровыхДанныхФизическихЛиц(ЗапросДляКадровыхДанныхФизическихЛиц, ТолькоРазрешенные, ОписательВременнойТаблицыОтборовФизическихЛиц, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеСотрудников);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстПоследнегоЗапроса, ЗапросДляКадровыхДанныхФизическихЛиц.Текст);
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросДляКадровыхДанныхФизическихЛиц);
	
КонецПроцедуры

// Дата смерти

Функция ДобавитьПолеСведенийОДатахСмертиСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыДатыСмертиСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОДатахСмертиСотрудников", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОДатахСмертиСотрудников(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыДатыСмертиСотрудников(ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ИмяПоля = ВРег("ДатаСмерти");
	
КонецФункции

Функция ПутьКДаннымСведенийОДатахСмертиСотрудников(ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	ПутьКДанным = "";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		ПутьКДанным = "	СведенияОДатахСмертиСотрудников.ДатаСмерти";
	Иначе
		ПутьКДанным = "	ВЫРАЗИТЬ(NULL КАК ДАТА)";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияОДатахСмертиСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(Увольнение.ДатаУвольнения) КАК ДатаСмерти,
		|	Увольнение.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСведенияОДатахСмертиСотрудников
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ПО Увольнение.ФизическоеЛицо = ТаблицаОтборов.ФизическоеЛицо
		|ГДЕ
		|	Увольнение.Проведен
		|	И Увольнение.СтатьяТКРФ В(&ОснованияУвольненияВСвязиСоСмертьюСотрудника)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.ФизическоеЛицо";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц",
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(
		Запрос.Текст, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Запрос.УстановитьПараметр("ОснованияУвольненияВСвязиСоСмертьюСотрудника",
		КадровыйУчет.ОснованияУвольненияВСвязиСоСмертьюСотрудника());
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОДатахСмертиСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОДатахСмертиСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ЧастиЗапроса = Новый Массив;
		
		ЗапросСведенияОДатахСмертиСотрудников = КадровыйУчет.ЗапросВТСведенияОДатахСмертиСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов);
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросСведенияОДатахСмертиСотрудников);
		
		ЧастиЗапроса.Добавить(ЗапросСведенияОДатахСмертиСотрудников.Текст);
		ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		ЧастиЗапроса.Добавить(Запрос.Текст);
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОДатахСмертиСотрудников КАК СведенияОДатахСмертиСотрудников
			|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СведенияОДатахСмертиСотрудников.ФизическоеЛицо}");
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
КонецПроцедуры

// Значения зависящие от функциональных опций.

Функция ИмяФункциональнойОпцииПоИмениДанныхСотрудника(Знач ИмяПоля) Экспорт
	
	Возврат "";
	
КонецФункции

Функция ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(Знач ИмяПоля, ИсточникиДанных) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = ВРег("ЯвляетсяЧленомЛетногоЭкипажа") Тогда
		
		Возврат "ИспользуетсяТрудЧленовЛетныхЭкипажей";
		
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяШахтером") Тогда
		
		Возврат "ИспользуетсяТрудШахтеров";
		
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяФармацевтом") Тогда
		
		Возврат "ИспользуетсяТрудФармацевтов";
		
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяЧленомЭкипажаСуднаПодФлагомРФ") Или ИмяПоля = ВРег("ПрименяемыйЛьготныйТерриториальныйТариф") Тогда
		
		Возврат "ИспользуетсяТрудЧленовЭкипажейМорскихСудов";
		
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией") Тогда
		
		Возврат "ИспользуютсяРаботыСДосрочнойПенсией";
		
	КонецЕсли; 
	
	Возврат "";
	
КонецФункции

Функция ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(Знач ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		ПутьКДолжности = "ВЫРАЗИТЬ(КадроваяИсторияСотрудников.Должность КАК Справочник.Должности)";
		ПутьКПодразделению = "ВЫРАЗИТЬ(КадроваяИсторияСотрудников.Подразделение КАК Справочник.ПодразделенияОрганизаций)";
	Иначе
		ПутьКДолжности = "ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК Справочник.Должности)";
		ПутьКПодразделению = "ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК Справочник.ПодразделенияОрганизаций)";
	КонецЕсли;
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяЧленомЛетногоЭкипажа") Тогда
		
		ПутьКДанным =
			"	ВЫБОР 
			|		КОГДА ФункциональныеОпции.ИспользуетсяТрудЧленовЛетныхЭкипажей 
			|			ТОГДА ЕСТЬNULL(" + ПутьКДолжности + ".ЯвляетсяДолжностьюЛетногоЭкипажа, ЛОЖЬ) 
			|		ИНАЧЕ ЛОЖЬ 
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяШахтером") Тогда
		
		ПутьКДанным =
			"	ВЫБОР 
			|		КОГДА ФункциональныеОпции.ИспользуетсяТрудШахтеров 
			|			ТОГДА ЕСТЬNULL(" + ПутьКДолжности + ".ЯвляетсяШахтерскойДолжностью, ЛОЖЬ) 
			|		ИНАЧЕ ЛОЖЬ 
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяФармацевтом") Тогда
		
		ПутьКДанным =
			"	ВЫБОР 
			|		КОГДА ФункциональныеОпции.ИспользуетсяТрудФармацевтов 
			|			ТОГДА ЕСТЬNULL(" + ПутьКДолжности + ".ЯвляетсяФармацевтическойДолжностью, ЛОЖЬ) 
			|		ИНАЧЕ ЛОЖЬ 
			|	КОНЕЦ";
	
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией") Тогда
		
		ПутьКДанным =
			"	ВЫБОР 
			|		КОГДА ФункциональныеОпции.ИспользуютсяРаботыСДосрочнойПенсией 
			|			ТОГДА ЕСТЬNULL(" + ПутьКДолжности + ".ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией, ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)) 
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка) 
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяПрокурором")
		Или ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяСудьей")
		Или ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяВоеннослужащим")
		Или ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяВоеннослужащимПоПризыву")
		Или ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяПедагогом")
		Или ИмяПоляВВерхнемРегистре = ВРег("РаботаетВСтуденческомОтряде") Тогда
		
		ПутьКДанным = "	ЛОЖЬ";
	
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяЧленомЭкипажаСуднаПодФлагомРФ") Тогда
		
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА ФункциональныеОпции.ИспользуетсяТрудЧленовЭкипажейМорскихСудов 
			|			ТОГДА ЕСТЬNULL(" + ПутьКПодразделению + ".ПрименяемыйЛьготныйТерриториальныйТариф = ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.ДляЧленовЭкипажейМорскихСудовПодФлагомРФ), ЛОЖЬ)
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПрименяемыйЛьготныйТерриториальныйТариф") Тогда
		
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА ФункциональныеОпции.ИспользуетсяТрудЧленовЭкипажейМорскихСудов 
			|			ТОГДА ЕСТЬNULL(" + ПутьКПодразделению + ".ПрименяемыйЛьготныйТерриториальныйТариф, ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.ПустаяСсылка))
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ";
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТФункциональныеОпцииОрганизаций(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ПутьКПолюОрганизация)
	
	СписокОпций = ИсточникиДанных.Получить("ФункциональныеОпцииОрганизаций");
	Если СписокОпций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ИмяВТФункциональныеОпцииОрганизаций = ИсточникиДанных.Получить("ИмяВТФункциональныеОпцииОрганизаций");
	Если Не ЗначениеЗаполнено(ИмяВТФункциональныеОпцииОрганизаций) Тогда
		
		ИмяВТФункциональныеОпцииОрганизаций = "ВТФункциональныеОпцииОрганизаций";
		ИсточникиДанных.Вставить("ИмяВТФункциональныеОпцииОрганизаций", ИмяВТФункциональныеОпцииОрганизаций);
		
		ЗапросВТФункциональныеОпции = ЗапросВТФункциональныеОпцииОрганизаций(ТолькоРазрешенные, ИмяВТФункциональныеОпцииОрганизаций, СписокОпций);
		
		ЧастиЗапроса.Вставить(0, ЗапросВТФункциональныеОпции.Текст);
		ЧастиЗапроса.Вставить(1, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
	КонецЕсли;
	
	Если ИсточникиДанных.Получить("ФункциональныеОпцииСоединениеУстановлено") <> Истина Тогда
		
		ИсточникиДанных.Вставить("ФункциональныеОпцииСоединениеУстановлено", Истина);
		
		ЧастиЗапроса.Добавить(
			"
			|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТФункциональныеОпцииОрганизаций + " КАК ФункциональныеОпции
			|		ПО " + ПутьКПолюОрганизация + " = ФункциональныеОпции.Организация}");
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ИмяВТФункциональныеОпцииОрганизаций);
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ИмяВТФункциональныеОпцииОрганизаций);
	
КонецПроцедуры

// Кадровая история сотрудников.

Функция ДобавитьПолеСведенийКадровойИсторииСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") И КадровыйУчет.НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		
		ПолучатьКадровыеДанные = Истина;
		Если КадровыйУчет.НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(ИмяПоля) Тогда
			
			ИмяФО = КадровыйУчет.ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(ИмяПоля, ИсточникиДанных);
			Если ПустаяСтрока(ИмяФО) Тогда
				ИмяФО = КадровыйУчет.ИмяФункциональнойОпцииПоИмениДанныхСотрудника(ИмяПоля);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ИмяФО) Тогда
				ПолучатьКадровыеДанные = ПолучитьФункциональнуюОпцию(ИмяФО);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПолучатьКадровыеДанные Тогда
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "КадроваяИсторияСотрудников", ИмяПоля);
			
			ИмяФО = КадровыйУчет.ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(ИмяПоля, ИсточникиДанных);
			Если Не ПустаяСтрока(ИмяФО) Тогда
				КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ФункциональныеОпцииОрганизаций", ИмяФО);
			КонецЕсли; 
			
			ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийКадровойИсторииСотрудников(ИмяПоля);
			ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
			
		Иначе
			
			Если ВРег(ИмяПоля) = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией") Тогда
				ТекстыОписанияПолей.Добавить("	ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка) КАК " + ИмяПоля);
			Иначе
				ТекстыОписанияПолей.Добавить("	ЛОЖЬ КАК " + ИмяПоля);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("РабочееМестоПериодРегистрации")
		Или ИмяПоля = ВРег("РабочееМестоРегистратор")
		Или ИмяПоля = ВРег("Организация")
		Или ИмяПоля = ВРег("Подразделение")
		Или ИмяПоля = ВРег("Должность")
		Или ИмяПоля = ВРег("ВидСобытия")
		Или ИмяПоля = ВРег("КоличествоСтавок")
		Или Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы")
			И ИмяПоля = ВРег("ДоляНеполногоРабочегоВремени")
		Или ИмяПоля = ВРег("ЭтоГоловнойСотрудник")
		Или КадровыйУчет.НеобходимыСведенияЗависящиеОтКадровойИсторииСотрудников(ИмяПоля);
	
КонецФункции

Функция НеобходимыСведенияЗависящиеОтКадровойИсторииСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчет.НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(ИмяПоля);
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямКадровойИсторииСотрудников(КритерииПоиска, УсловиеПоиска)
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если КадровыйУчет.НеобходимыСведенияКадровойИсторииСотрудников(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
			
			Если ИмяПоля = ВРег("РабочееМестоПериодРегистрации") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
			ИначеЕсли ИмяПоля = ВРег("РабочееМестоРегистратор") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Регистратор";
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.КадроваяИсторияСотрудников", УсловиеПоиска);
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийКадровойИсторииСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("РабочееМестоПериодРегистрации") Тогда
		ПутьКДанным = "	КадроваяИсторияСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РабочееМестоРегистратор") Тогда
		ПутьКДанным = "	КадроваяИсторияСотрудников.Регистратор";
	ИначеЕсли КадровыйУчет.НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(ИмяПоляВВерхнемРегистре) Тогда
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(ИмяПоля);
	Иначе
		ПутьКДанным = "	КадроваяИсторияСотрудников." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияКадровойИсторииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияКадровойИсторииСотрудников = "ВТСведенияКадровойИсторииСотрудников")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("КадроваяИсторияСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник,ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + ".ФизическоеЛицо");
	
	ИмяВТТаблицаСведенийКадровойИстории = ИмяВТСведенияКадровойИсторииСотрудников;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ВсеЗаписи = Истина;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	ПараметрыПостроения.ИндексироватьПо = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Сотрудник");
	
	Если ТолькоРазрешенные Тогда
		
		ДоступныеОрганизации = ЗарплатаКадры.ДоступныеОрганизации();
		
		Если ЗначениеЗаполнено(ДоступныеОрганизации.Организации) Тогда
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПостроения.Отборы, "ГоловнаяОрганизация", "В" , ДоступныеОрганизации.Организации);
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПостроения.ОтборыПрименяемыеКСрезу, "Организация", "В" , ДоступныеОрганизации.Филиалы);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"КадроваяИсторияСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТТаблицаСведенийКадровойИстории);
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		ЗапросВТИмяРегистраСрез.Текст = СтрЗаменить(ЗапросВТИмяРегистраСрез.Текст, "РегистрСведений.КоличествоСтавок КАК КоличествоСтавок",
			"РегистрСведений.КоличествоСтавок КАК КоличествоСтавок, РегистрСведений.КоличествоСтавок КАК ДоляНеполногоРабочегоВремени");
	КонецЕсли;
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных, ИмяВТСведенияКадровойИсторииСотрудников = Неопределено) Экспорт
	
	Если ИсточникиДанных.Получить("КадроваяИсторияСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗапроса = Новый Массив;
	
	Если ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИменаТаблицСКадровойИсториейСотрудников.ИмяВТКадроваяИсторияСотрудниковТаблицаРегистра) Тогда
		
		Если ИмяВТСведенияКадровойИсторииСотрудников = Неопределено Тогда
			ИмяВТСведенияКадровойИсторииСотрудников = "ВТСведенияКадровойИсторииСотрудников";
		КонецЕсли;
		
		ЗапросВТ = ЗапросВТСведенияКадровойИсторииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияКадровойИсторииСотрудников);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
		
		ПозицияТаблицыУточнения = СтрНайти(Запрос.Текст, "УНИЧТОЖИТЬ ВТПериодыОтбораКадровойИстории");
		Если ПозицияТаблицыУточнения > 0 Тогда
			
			ЧастиЗапроса.Добавить(Лев(Запрос.Текст, ПозицияТаблицыУточнения + СтрДлина("УНИЧТОЖИТЬ ВТПериодыОтбораКадровойИстории") - 1));
			ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
			ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
			ЧастиЗапроса.Добавить(Сред(Запрос.Текст, ПозицияТаблицыУточнения + СтрДлина("УНИЧТОЖИТЬ ВТПериодыОтбораКадровойИстории")));
			
		Иначе
			
			ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
			ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
			ЧастиЗапроса.Добавить(Запрос.Текст);
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ИмяВТСведенияКадровойИсторииСотрудников);
		
		ИсточникиДанных.Вставить("ИмяВТСведенияКадровойИсторииСотрудников", ИмяВТСведенияКадровойИсторииСотрудников);
		
		ЧастиЗапроса.Добавить(
			"		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияКадровойИсторииСотрудников + " КАК КадроваяИсторияСотрудников
			|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = КадроваяИсторияСотрудников.Сотрудник
			|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = КадроваяИсторияСотрудников.Период");
		
	Иначе
		
		ИмяВТКадроваяИсторияСотрудниковТаблицаРегистра = ОписательВременнойТаблицыОтборов.ИменаТаблицСКадровойИсториейСотрудников.ИмяВТКадроваяИсторияСотрудниковТаблицаРегистра;
		ИмяВТКадроваяИсторияСотрудниковСрезПоследних = ОписательВременнойТаблицыОтборов.ИменаТаблицСКадровойИсториейСотрудников.ИмяВТКадроваяИсторияСотрудниковСрезПоследних;
		
		ЧастиЗапроса.Добавить(Запрос.Текст);
		ЧастиЗапроса.Добавить(
			"		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадроваяИсторияСотрудниковТаблицаРегистра + " КАК КадроваяИсторияСотрудников
			|			ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = КадроваяИсторияСотрудников.Сотрудник
			|				И ТаблицаОтборов.ПериодЗаписи = КадроваяИсторияСотрудников.ПериодЗаписи");
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
КонецПроцедуры

// Сведения об учете затрат

Функция ДобавитьПолеСведенийОбУчетеЗатрат(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбУчетеЗатрат(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбУчетеЗатрат", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОбУчетеЗатрат(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОбУчетеЗатрат(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("УчетЗатратПериодРегистрации")
		Или ИмяПоля = ВРег("СпособОтраженияЗарплатыВБухучете")
		Или ИмяПоля = ВРег("ОтношениеКЕНВД")
		Или ИмяПоля = ВРег("СтатьяФинансирования")
		Или ИмяПоля = ВРег("УчетЗатратДокументОснование");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбУчетеЗатрат(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОбУчетеЗатрат(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("УчетЗатратПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		ИначеЕсли ИмяПоля = ВРег("УчетЗатратДокументОснование") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДокументОснование";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.БухучетЗарплатыСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОбУчетеЗатрат(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("УчетЗатратПериодРегистрации") Тогда
		ПутьКДанным = "	БухучетЗарплатыСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("УчетЗатратДокументОснование") Тогда
		ПутьКДанным = "	БухучетЗарплатыСотрудников.ДокументОснование";
	Иначе
		ПутьКДанным = "	БухучетЗарплатыСотрудников." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияОбУчетеЗатрат(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОбУчетеЗатрат = "ВТСведенияОбУчетеЗатрат") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("БухучетЗарплатыСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД.Вставить("СпособОтраженияЗарплатыВБухучете", "СпособОтраженияЗарплатыВБухучетеРегистра");
	ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД.Вставить("ОтношениеКЕНВД", "ОтношениеКЕНВДРегистра");
	ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД.Вставить("СтатьяФинансирования", "СтатьяФинансированияРегистра");
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"БухучетЗарплатыСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	БухучетЗарплатыСотрудников.Сотрудник,
		|	МАКСИМУМ(БухучетЗарплатыСотрудников.ПериодЗаписи) КАК ПериодЗаписи
		|ПОМЕСТИТЬ ВТПоследниеПериодыСведенияОбУчетеЗатрат
		|ИЗ
		|	ВТБухучетЗарплатыСотрудниковСрезПоследних КАК БухучетЗарплатыСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	БухучетЗарплатыСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БухучетЗарплатыСотрудников.Сотрудник,
		|	БухучетЗарплатыСотрудников.ПериодЗаписи,
		|	МАКСИМУМ(БухучетЗарплатыСотрудников.ДокументОснование) КАК ДокументОснование
		|ПОМЕСТИТЬ ВТПоследниеДокументыСведенияОбУчетеЗатрат
		|ИЗ
		|	ВТПоследниеПериодыСведенияОбУчетеЗатрат КАК ПоследниеПериодыСведенияОбУчетеЗатрат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетЗарплатыСотрудниковСрезПоследних КАК БухучетЗарплатыСотрудников
		|		ПО ПоследниеПериодыСведенияОбУчетеЗатрат.Сотрудник = БухучетЗарплатыСотрудников.Сотрудник
		|			И ПоследниеПериодыСведенияОбУчетеЗатрат.ПериодЗаписи = БухучетЗарплатыСотрудников.ПериодЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	БухучетЗарплатыСотрудников.Сотрудник,
		|	БухучетЗарплатыСотрудников.ПериодЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БухучетЗарплатыСотрудников.Период,
		|	БухучетЗарплатыСотрудников.ПериодЗаписи,
		|	БухучетЗарплатыСотрудников.Сотрудник,
		|	БухучетЗарплатыСотрудников.ДокументОснование,
		|	БухучетЗарплатыСотрудников.СпособОтраженияЗарплатыВБухучете,
		|	БухучетЗарплатыСотрудников.ОтношениеКЕНВД,
		|	БухучетЗарплатыСотрудников.СтатьяФинансирования
		|ПОМЕСТИТЬ ВТСведенияОбУчетеЗатрат
		|ИЗ
		|	ВТПоследниеДокументыСведенияОбУчетеЗатрат КАК ПоследниеПериодыСведенияОбУчетеЗатрат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетЗарплатыСотрудниковСрезПоследних КАК БухучетЗарплатыСотрудников
		|		ПО ПоследниеПериодыСведенияОбУчетеЗатрат.Сотрудник = БухучетЗарплатыСотрудников.Сотрудник
		|			И ПоследниеПериодыСведенияОбУчетеЗатрат.ПериодЗаписи = БухучетЗарплатыСотрудников.ПериодЗаписи
		|			И ПоследниеПериодыСведенияОбУчетеЗатрат.ДокументОснование = БухучетЗарплатыСотрудников.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТБухучетЗарплатыСотрудниковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПоследниеПериодыСведенияОбУчетеЗатрат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПоследниеДокументыСведенияОбУчетеЗатрат";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСведенияОбУчетеЗатрат", ИмяВТСведенияОбУчетеЗатрат);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(
		ЗапросВТИмяРегистраСрез.Текст, ТекстЗапроса);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбУчетеЗатрат(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОбУчетеЗатрат") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОбУчетеЗатрат(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбУчетеЗатрат КАК БухучетЗарплатыСотрудников
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = БухучетЗарплатыСотрудников.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = БухучетЗарплатыСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОбУчетеЗатрат");
	
КонецПроцедуры

// Сведения об оплате труда

Функция ДобавитьПолеСведенийОбОплатеТруда(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") И КадровыйУчет.НеобходимыСведенияОбОплатеТруда(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбОплатеТруда", Истина);
		
		Если ИмяПоля = ВРег("ФОТ") Тогда
			ИсточникиДанных.Вставить("СведенияОГрафикахРаботы", Истина);
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "КадроваяИсторияСотрудников", "КоличествоСтавок");
		КонецЕсли;
		
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийОбОплатеТруда(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОбОплатеТруда(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОплатаТрудаПериодЗаписи")
		Или ИмяПоля = ВРег("ОплатаТрудаРегистратор")
		Или ИмяПоля = ВРег("ТарифнаяСтавка")
		Или ИмяПоля = ВРег("ФОТ")
		Или ИмяПоля = ВРег("Надбавка");
		
КонецФункции

Функция ПутьКДаннымСведенийОбОплатеТруда(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("Надбавка") Тогда
		ПутьКДанным = "	0";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ОплатаТрудаПериодЗаписи") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.ПериодЗаписиНачислений";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ОплатаТрудаРегистратор") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ФОТ") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников." + ИмяПоля + " * "
			+ КадровыйУчет.ПутьКДаннымСведенийОДолеНеполногоРабочегоВремени("ДоляНеполногоРабочегоВремени");
	Иначе
		ПутьКДанным = "	ТарифныеСтавкиСотрудников." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбОплатеТруда(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ФормироватьСПериодичностьДень)
	
	Если ИсточникиДанных.Получить("СведенияОбОплатеТруда") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТТарифныеСтавкиСотрудников = КадровыйУчет.ЗапросВТТарифныеСтавкиСотрудников(
		ТолькоРазрешенные,
		"ВТСведенияОбОплатеТруда",
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников,
		КадровыйУчет.ПоляОтбораСотрудников(ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + "," + ОписательВременнойТаблицыОтборов.ИмяПоляПериод),
		ПоляОтбораПериодическихДанных,
		ФормироватьСПериодичностьДень);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТТарифныеСтавкиСотрудников);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТТарифныеСтавкиСотрудников.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОплатеТруда КАК ТарифныеСтавкиСотрудников
		| 		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ТарифныеСтавкиСотрудников.Сотрудник
		| 			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ТарифныеСтавкиСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОбОплатеТруда");
	
КонецПроцедуры

// Сведения о видах занятости

Функция ДобавитьПолеСведенийОВидахЗанятостиСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") И НеобходимыСведенияОВидахЗанятостиСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОВидахЗанятостиСотрудников", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОВидахЗанятостиСотрудников(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОВидахЗанятостиСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВидЗанятостиПериодРегистрации")
		Или ИмяПоля = ВРег("ВидЗанятостиРегистратор")
		Или ИмяПоля = ВРег("ВидЗанятости")
	
КонецФункции

Функция ПутьКДаннымСведенийОВидахЗанятостиСотрудников(ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ВидЗанятостиПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОВидахЗанятостиСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидЗанятостиРегистратор") Тогда
		ПутьКДанным = "	СведенияОВидахЗанятостиСотрудников.Регистратор";
	Иначе
		ПутьКДанным = "	СведенияОВидахЗанятостиСотрудников." + ИмяПоля;
	КонецЕсли;

	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияОВидахЗанятостиСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОВидахЗанятостиСотрудников = "ВТСведенияОВидахЗанятостиСотрудников", ФормироватьСПериодичностьДень = Истина) Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ВидыЗанятостиСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД = Ложь;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ВидыЗанятостиСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОВидахЗанятостиСотрудников);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОВидахЗанятостиСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ФормироватьСПериодичностьДень)
	
	Если ИсточникиДанных.Получить("СведенияОВидахЗанятостиСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОВидахЗанятостиСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, , ФормироватьСПериодичностьДень);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОВидахЗанятостиСотрудников КАК СведенияОВидахЗанятостиСотрудников
			|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОВидахЗанятостиСотрудников.Сотрудник
			|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОВидахЗанятостиСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОВидахЗанятостиСотрудников");
	
КонецПроцедуры

Функция ДобавитьКритерийПоискаПоСведениямОВидахЗанятостиСотрудников(КритерииПоиска, УсловиеПоиска)
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОВидахЗанятостиСотрудников(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
			
			Если ИмяПоля = ВРег("ВидЗанятостиПериодЗаписи") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
			ИначеЕсли ИмяПоля = ВРег("ВидЗанятостиРегистратор") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Регистратор";
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ВидыЗанятостиСотрудников", УсловиеПоиска);
		
	КонецЕсли;
	
	Возврат КритерийДобавлен;
	
КонецФункции

// Сведения о доле неполного рабочего времени

Функция ДобавитьПолеСведенийОДолеНеполногоРабочегоВремениСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОДолеНеполногоРабочегоВремениСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОГрафикахРаботы", Истина);
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "КоличествоСтавок");
		
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийОДолеНеполногоРабочегоВремени(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОДолеНеполногоРабочегоВремениСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ИмяПоля = ВРег("ДоляНеполногоРабочегоВремени");
	
КонецФункции

Функция ПутьКДаннымСведенийОДолеНеполногоРабочегоВремени(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ДоляНеполногоРабочегоВремени") Тогда
		Если ФОИспользоватьКадровыйУчет Тогда
			ПутьКДанным = "	КадроваяИсторияСотрудников.КоличествоСтавок";
		Иначе
			ПутьКДанным = "	ТекущиеКадровыеДанныеСотрудников.КоличествоСтавок";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о плановых авансах.

Функция ДобавитьПолеСведенийОПлановыхАвансах(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") И НеобходимыСведенияОПлановыхАвансах(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПлановыхАвансах", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОПлановыхАвансах(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОПлановыхАвансах(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("АвансПериодРегистрации")
		Или ИмяПоля = ВРег("АвансРегистратор")
		Или ИмяПоля = ВРег("СпособРасчетаАванса")
		Или ИмяПоля = ВРег("Аванс");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОПлановыхАвансах(КритерииПоиска, УсловиеПоиска)
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОПлановыхАвансах(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
			
			Если ИмяПоля = ВРег("АвансПериодРегистрации") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
			ИначеЕсли ИмяПоля = ВРег("АвансРегистратор") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Регистратор";
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ПлановыеАвансы", УсловиеПоиска);
		
	КонецЕсли;
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОПлановыхАвансах(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("АвансПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОПлановыхАвансах.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("АвансРегистратор") Тогда
		ПутьКДанным = "	СведенияОПлановыхАвансах.Регистратор";
	Иначе
		ПутьКДанным = "	СведенияОПлановыхАвансах." + ИмяПоля;
	КонецЕсли;

	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияОПлановыхАвансах(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОПлановыхАвансах = "ВТСведенияОПлановыхАвансах", ФормироватьСПериодичностьДень = Истина) Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПлановыеАвансы", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД = Ложь;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПлановыеАвансы", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОПлановыхАвансах);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОПлановыхАвансах(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ФормироватьСПериодичностьДень)
	
	Если ИсточникиДанных.Получить("СведенияОПлановыхАвансах") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОПлановыхАвансах(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, , ФормироватьСПериодичностьДень);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОПлановыхАвансах КАК СведенияОПлановыхАвансах
			|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОПлановыхАвансах.Сотрудник
			|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОПлановыхАвансах.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОПлановыхАвансах");
	
КонецПроцедуры

// Сведения о классе условий труда

Функция ИсточникИнформацииОКлассахУсловийТруда() Экспорт
	
	Возврат "Должность";
	
КонецФункции

Функция ДобавитьПолеСведенийОКлассахУсловийТруда(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОКлассахУсловийТруда(ИмяПоля) Тогда
		
		ИмяПоляДолжность = КадровыйУчет.ИсточникИнформацииОКлассахУсловийТруда();
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенийОКлассахУсловийТруда", ИмяПоляДолжность);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "КадроваяИсторияСотрудников", "Организация");
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "КадроваяИсторияСотрудников", ИмяПоляДолжность);
		Иначе
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПостоянныеКадровыеДанныеСотрудников", "Организация");
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПостоянныеКадровыеДанныеСотрудников", "Должность");
		КонецЕсли;
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ФункциональныеОпцииОрганизаций", "ПрименятьРезультатыСпециальнойОценкиУсловийТруда");
		
		ПутьКДанным = ПутьКДаннымСведенийОКлассахУсловийТруда(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОКлассахУсловийТруда(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("КлассУсловийТрудаПериодРегистрации")
		Или ИмяПоля = ВРег("КлассУсловийТруда")
		Или ИмяПоля = ВРег("КлассУсловийТрудаДатаРегистрацииИзменений");
	
КонецФункции

Функция ПутьКДаннымСведенийОКлассахУсловийТруда(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("КлассУсловийТрудаПериодРегистрации") Тогда
		
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА ФункциональныеОпции.ПрименятьРезультатыСпециальнойОценкиУсловийТруда = ИСТИНА
			|			ТОГДА КлассыУсловийТрудаПоДолжностям.ПериодЗаписи
			|		ИНАЧЕ NULL
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("КлассУсловийТруда") Тогда
		
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА ФункциональныеОпции.ПрименятьРезультатыСпециальнойОценкиУсловийТруда = ИСТИНА
			|			ТОГДА КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда
			|		ИНАЧЕ NULL
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("КлассУсловийТрудаДатаРегистрацииИзменений") Тогда
		
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА ФункциональныеОпции.ПрименятьРезультатыСпециальнойОценкиУсловийТруда = ИСТИНА
			|			ТОГДА КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений
			|		ИНАЧЕ NULL
			|	КОНЕЦ";
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияОКлассахУсловийТруда(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТОтборовДолжностей, ИмяПоляДолжность, ИсточникиДанных, ИмяВТСведенияОКлассахУсловийТруда = "ВТСведенияОКлассахУсловийТруда") Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяВТОтборовДолжностей) Тогда
		
		УничтожитьВТОтборовДолжностей = Истина;
		
		ТекстЗапросаТекущихДанных = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК Должность
			|ПОМЕСТИТЬ ВТОтборовДолжностейДляКлассовУсловийТруда
			|ИЗ
			|	ВТОтборовСотрудников КАК ТаблицаОтборов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ПО ТаблицаОтборов.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник";
		
		ТекстЗапросаТекущихДанных = СтрЗаменить(ТекстЗапросаТекущихДанных, "ВТОтборовСотрудников",
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
		ТекстЗапросаТекущихДанных = СтрЗаменить(ТекстЗапросаТекущихДанных, "ТаблицаОтборов.Период",
			"ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
		
		ТекстЗапросаТекущихДанных = СтрЗаменить(ТекстЗапросаТекущихДанных, "ТаблицаОтборов.Сотрудник",
			"ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборовДолжностейДляКлассовУсловийТруда", "Должность");
		
	Иначе
		
		УничтожитьВТОтборовДолжностей = Ложь;
		ТекстЗапросаТекущихДанных = "";
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТОтборовДолжностей, "Должность");
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Должность", ИмяПоляДолжность);
		
	КонецЕсли;
	
	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"КлассыУсловийТрудаПоДолжностям",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		,
		Истина,
		ИмяВТСведенияОКлассахУсловийТруда);
	
	Если Не ПустаяСтрока(ТекстЗапросаТекущихДанных) Тогда
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(ТекстЗапросаТекущихДанных);
		
		Если УничтожитьВТОтборовДолжностей Тогда
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТОтборовДолжностейДляКлассовУсловийТруда");
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(Запрос.Текст);
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОКлассахУсловийТруда(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенийОКлассахУсловийТруда") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляДолжность = ИсточникиДанных.Получить("СведенийОКлассахУсловийТруда");
	
	ЗапросВТ = ЗапросВТСведенияОКлассахУсловийТруда(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов,
		ИсточникиДанных.Получить("ИмяВТСведенияКадровойИсторииСотрудников"), ИмяПоляДолжность, ИсточникиДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ТаблицыЗапроса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Запрос.Текст, ";", , Истина);
	ТекстПоследнегоЗапроса = ТаблицыЗапроса[ТаблицыЗапроса.Количество() - 1];
	
	ТекстЗаменыПоследнегоЗапроса = 
		ЗапросВТ.Текст
		+ Символы.ПС + ";" + Символы.ПС
		+ ТекстПоследнегоЗапроса;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстПоследнегоЗапроса, ТекстЗаменыПоследнегоЗапроса);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ЧастиЗапроса.Добавить(
			"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОКлассахУсловийТруда КАК КлассыУсловийТрудаПоДолжностям
			|		ПО КадроваяИсторияСотрудников." + ИмяПоляДолжность + " = КлассыУсловийТрудаПоДолжностям.Должность
			|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = КлассыУсловийТрудаПоДолжностям.Период}");
		
	Иначе
		
		ЧастиЗапроса.Добавить(
			"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОКлассахУсловийТруда КАК КлассыУсловийТрудаПоДолжностям
			|		ПО ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность = КлассыУсловийТрудаПоДолжностям.Должность
			|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = КлассыУсловийТрудаПоДолжностям.Период}");
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОКлассахУсловийТруда");
	
КонецПроцедуры

// Сведения о зарплатных проектах

Функция ДобавитьПолеСведенийОЗарплатныхПроектах(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОЗарплатныхПроектах(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОЗарплатныхПроектах", Истина);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "КадроваяИсторияСотрудников", "Организация");
		Иначе
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПостоянныеКадровыеДанныеСотрудников", "Организация");
		КонецЕсли;
		
		ПутьКДанным = ПутьКДаннымСведенийОЗарплатныхПроектах(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОЗарплатныхПроектах(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ЗарплатныйПроектДатаОткрытияЛицевогоСчета")
		Или ИмяПоля = ВРег("ЗарплатныйПроектРегистратор")
		Или ИмяПоля = ВРег("ЗарплатныйПроект")
		Или ИмяПоля = ВРег("НомерЛицевогоСчета");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОЗарплатныхПроектах(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОЗарплатныхПроектах(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ЗарплатныйПроектДатаОткрытияЛицевогоСчета") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДатаОткрытияЛицевогоСчета";
			
		ИначеЕсли ИмяПоля = ВРег("ЗарплатныйПроектРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДокументОснование";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли;
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОЗарплатныхПроектах(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ЗарплатныйПроектДатаОткрытияЛицевогоСчета") Тогда
		ПутьКДанным = "	ЛицевыеСчетаСотрудников.ДатаОткрытияЛицевогоСчета";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЗарплатныйПроектРегистратор") Тогда
		ПутьКДанным = "	ЛицевыеСчетаСотрудников.ДокументОснование";
	Иначе
		ПутьКДанным = "	ЛицевыеСчетаСотрудников." + ИмяПоля;
	КонецЕсли;

	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОЗарплатныхПроектах(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОЗарплатныхПроектах") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписательВременнойТаблицыОтборовЛицевыхСчетов = ОбменСБанкамиПоЗарплатнымПроектам.ОписаниеВременнойТаблицыДляСоздатьВТЛицевыеСчетаСотрудников(Неопределено,
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + ".ФизическоеЛицо",
		ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	ЗапросВТ = ОбменСБанкамиПоЗарплатнымПроектам.ЗапросВТЛицевыеСчетаСотрудниковПоВременнойТаблице(
		ТолькоРазрешенные, ОписательВременнойТаблицыОтборовЛицевыхСчетов, ПоляОтбораПериодическихДанных, "ВТЛицевыеСчетаСотрудников");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицевыеСчетаСотрудников КАК ЛицевыеСчетаСотрудников
		|		ПО ВЫРАЗИТЬ(ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " КАК Справочник.Сотрудники).ФизическоеЛицо = ЛицевыеСчетаСотрудников.ФизическоеЛицо");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ЧастиЗапроса.Добавить(
			"		И (ВЫБОР
			|				КОГДА КадроваяИсторияСотрудников.Организация ЕСТЬ NULL
			|						ТОГДА ВЫРАЗИТЬ(ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " КАК Справочник.Сотрудники).ГоловнаяОрганизация
			|				ИНАЧЕ КадроваяИсторияСотрудников.Организация
			|			КОНЕЦ = ВЫБОР
			|				КОГДА КадроваяИсторияСотрудников.Организация ЕСТЬ NULL
			|						ТОГДА ЛицевыеСчетаСотрудников.Организация.ГоловнаяОрганизация
			|				ИНАЧЕ ЛицевыеСчетаСотрудников.Организация
			|			КОНЕЦ)");
		
	Иначе
		
		ЧастиЗапроса.Добавить(
			"		И (ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = ЛицевыеСчетаСотрудников.Организация)");
		
	КонецЕсли;
	
	ЧастиЗапроса.Добавить(
		"		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ЛицевыеСчетаСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТЛицевыеСчетаСотрудников");
	
КонецПроцедуры

Функция ОснованияУвольненияВСвязиСоСмертьюСотрудника() Экспорт
	
	Основания = Новый Массив;
	
	Основание = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ОснованияУвольнения.Статья83ч1п6");
	Если Основание <> Неопределено Тогда
		Основания.Добавить(Основание);
	КонецЕсли;
	
	Возврат Основания;
	
КонецФункции

// Сведения о месте выплаты зарплаты.
//
Функция ДобавитьПолеСведенийОМестеВыплатыЗарплаты(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОМестеВыплатыЗарплаты(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОМестеВыплатыЗарплаты", Истина);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "Организация");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "Подразделение");
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "ТекущаяОрганизация");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "ТекущееПодразделение");
		
		ПутьКДанным = ПутьКДаннымСведенийОМестеВыплатыЗарплаты(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОМестеВыплатыЗарплаты(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВладелецМестаВыплаты")
		Или ИмяПоля = ВРег("ВидМестаВыплаты")
		Или ИмяПоля = ВРег("МестоВыплаты");
		
КонецФункции

Функция ПутьКДаннымСведенийОМестеВыплатыЗарплаты(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ВладелецМестаВыплаты") Тогда
		ПутьКДанным =
			"	ЕСТЬNULL(МестаВыплатыЗарплатыСотрудников.Сотрудник, Значение(Справочник.Сотрудники.ПустаяСсылка))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидМестаВыплаты") Тогда
		ПутьКДанным =
			"	ЕСТЬNULL(МестаВыплатыЗарплатыСотрудников.Вид, Значение(Перечисление.ВидыМестВыплатыЗарплаты.Касса))";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТМестаВыплатыЗарплатыСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОМестеВыплатыЗарплаты");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросМестВыплаты =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборов.Сотрудник,
		|	МестаВыплатыЗарплатыСотрудников.Вид
		|ПОМЕСТИТЬ ВТМестаВыплатыЗарплатыСотрудников
		|ИЗ
		|	ВТСотрудникиПериоды КАК ТаблицаОтборов
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
		|		ПО ТаблицаОтборов.Сотрудник = МестаВыплатыЗарплатыСотрудников.Сотрудник}";
		
	ЗапросМестВыплаты = СтрЗаменить(ЗапросМестВыплаты, "ВТСотрудникиПериоды", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	ЗапросМестВыплаты = СтрЗаменить(ЗапросМестВыплаты, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ЗапросМестВыплаты, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросМестВыплаты);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"{ЛЕВОЕ СОЕДИНЕНИЕ ВТМестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = МестаВыплатыЗарплатыСотрудников.Сотрудник}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТМестаВыплатыЗарплатыСотрудников");
	
КонецПроцедуры

#КонецОбласти


#Область СобытияРегистровСведений

Процедура КадроваяИсторияСотрудниковПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчет.ЗапомнитьСотрудниковДляОбновленияКадровыхДанных(НаборЗаписей);
	
КонецПроцедуры

Процедура КадроваяИсторияСотрудниковПриЗаписи(НаборЗаписей, Отказ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ИзмененияВНаборе = НаборЗаписей.ТаблицаИзменившихсяДанныхНабора();
		
		СотрудникиДляОбновленияКадровыхДанных = Неопределено;
		Если ИзмененияВНаборе <> Неопределено Тогда
			ИзмененияВНаборе.Свернуть("Сотрудник");
			СотрудникиДляОбновленияКадровыхДанных = ИзмененияВНаборе.ВыгрузитьКолонку("Сотрудник");
			НаборЗаписей.ДополнительныеСвойства.Вставить("СотрудникиДляОбновленияКадровыхДанных", СотрудникиДляОбновленияКадровыхДанных);	
		КонецЕсли;	
		
		// Обновлять записи необходимо, только при записи набора, содержащего первичные данные.
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") 
			И НаборЗаписей.ДополнительныеСвойства.ЭтоВторичныйНабор Тогда
			Возврат;
		КонецЕсли;
		
		КадровыйУчет.ОбновитьВторичныеКадровыеДанныеСотрудников(НаборЗаписей);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПлановыеНачисленияПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчет.ЗапомнитьСотрудниковДляОбновленияДанныхОбОплатеТруда(НаборЗаписей);
	
КонецПроцедуры

Процедура ПлановыеНачисленияПриЗаписи(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчет.ОбновитьВторичныеКадровыеДанныеСотрудников(НаборЗаписей);
	
КонецПроцедуры

Процедура ОбновитьВторичныеКадровыеДанныеСотрудников(НаборЗаписей) Экспорт
	
	Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("СотрудникиДляОбновленияКадровыхДанных") Тогда
			
			ИзменившиесяДанные = НаборЗаписей.ТаблицаИзменившихсяДанныхНабора();
			Если ИзменившиесяДанные.Количество() > 0 Тогда
				
				ОбновляемыеСотрудники = Новый Массив;
				СотрудникиСОтмененнымСобытиемПрием = Новый Массив;
				Для Каждого ИзменившиесяДанныеСтрокаИзменений Из ИзменившиесяДанные Цикл
					
					Если ИзменившиесяДанныеСтрокаИзменений.НовоеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
						Или ИзменившиесяДанныеСтрокаИзменений.НовоеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
						Или ИзменившиесяДанныеСтрокаИзменений.НовоеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение
						Или ИзменившиесяДанныеСтрокаИзменений.СтароеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
						Или ИзменившиесяДанныеСтрокаИзменений.СтароеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
						Или ИзменившиесяДанныеСтрокаИзменений.СтароеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
						
						ОбновляемыеСотрудники.Добавить(ИзменившиесяДанныеСтрокаИзменений.Сотрудник);
						
						Если ИзменившиесяДанныеСтрокаИзменений.СтароеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
							И Не ЗначениеЗаполнено(ИзменившиесяДанныеСтрокаИзменений.НовоеЗначениеВидСобытия) Тогда
							
							СотрудникиСОтмененнымСобытиемПрием.Добавить(ИзменившиесяДанныеСтрокаИзменений.Сотрудник);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ОбновляемыеСотрудники.Количество() > 0 Тогда
					КадровыйУчет.ОбновитьТекущиеКадровыеДанныеСпискаСотрудников(ОбновляемыеСотрудники, СотрудникиСОтмененнымСобытиемПрием);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("СотрудникиДляОбновленияДанныхОбОплатеТруда") Тогда
			
			ОбновляемыеСотрудники = НаборЗаписей.ДополнительныеСвойства.СотрудникиДляОбновленияДанныхОбОплатеТруда;
			КадровыйУчет.ОбновитьТекущиеТарифныеСтавки(ОбновляемыеСотрудники);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВЗапросПоляКадровыхДанныхФизическихЛиц(Запрос, КадровыеДанные, ИсточникиДанных, ОписательВТОтборов, ИмяВТКадровыеДанныеФизическихЛиц) Экспорт
	
	ТекстыОписанияПолей = ТекстыОписанияПолейЗапросПоляКадровыхДанныхФизическихЛиц(КадровыеДанные, ИсточникиДанных, ОписательВТОтборов);
	ДобавитьВЗапросТекстыОписанияПолейКадровыхДанныхФизическихЛиц(Запрос, ТекстыОписанияПолей, ИсточникиДанных, ОписательВТОтборов, ИмяВТКадровыеДанныеФизическихЛиц);
	
КонецПроцедуры

Процедура ДобавитьВЗапросТекстыОписанияПолейКадровыхДанныхФизическихЛиц(Запрос, ТекстыОписанияПолей, ИсточникиДанных, ОписательВТОтборов, ИмяВТКадровыеДанныеФизическихЛиц)
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстыОписанияПолей, "ПОМЕСТИТЬ " + ИмяВТКадровыеДанныеФизическихЛиц);
	
	ПостоянныеКадровыеДанныеФизическихЛиц = ИсточникиДанных.Получить("ПостоянныеКадровыеДанныеФизическихЛиц");
	Если ПостоянныеКадровыеДанныеФизическихЛиц <> Неопределено Тогда
		КадровыйУчет.ДобавитьВЗапросПоляПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ПостоянныеКадровыеДанныеФизическихЛиц, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстыОписанияПолейЗапросПоляКадровыхДанныхФизическихЛиц(КадровыеДанные, ИсточникиДанных, ОписательВТОтборов)
	
	ТекстыОписанияПолей = Новый Массив;
	
	ИмяКоллекцииОбработанныеПоля = "ОбработанныеПоляКадровыеДанныеФизическихЛиц";
	
	Для каждого ИмяЗапрашиваемыхДанных Из КадровыеДанные Цикл
		
		ИмяКадровыхДанных = СокрЛП(ИмяЗапрашиваемыхДанных);
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(ИмяКадровыхДанных) Тогда
			
			Продолжить;
			 
		ИначеЕсли КадровыйУчет.ЭтоОбработанноеПолеКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля) Тогда
			
			Продолжить;
			
		ИначеЕсли ДобавитьПолеСведенийОДокументахУдостоверяющихЛичность(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОбИнвалидности(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОГражданстве(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОФИОФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных, ОписательВТОтборов.ИмяПоляФизическоеЛицо)
			Или УчетСтраховыхВзносовФизическиеЛица.ДобавитьПолеСведенийОСтатусахЗастрахованныхЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или УчетНДФЛФизическиеЛица.ДобавитьПолеСведенийОСтатусахНалогоплательщиков(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОВозрасте(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных, ОписательВТОтборов) Тогда
			
			КадровыйУчет.ДобавитьВКоллекциюИмяОбработанныхКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля);
			Продолжить;
			
		ИначеЕсли КадровыйУчет.НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(ИмяКадровыхДанных) Тогда
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПостоянныеКадровыеДанныеФизическихЛиц", ИмяКадровыхДанных);
			Продолжить;
			
		Иначе
			
			ТекстСообщенияИсключения = НСтр("ru='Среди кадровых данных физических лиц нет данных с именем'") + " """ + ИмяКадровыхДанных + """";
			ВызватьИсключение ТекстСообщенияИсключения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстыОписанияПолей;
	
КонецФункции

Процедура ДобавитьВЗапросСоединенияСИсточникамиКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц) Экспорт
	
	ДобавитьТекстЗапросаВТПостоянныеКадровыеДанныеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц);
	ДобавитьТекстЗапросаВТДокументыУдостоверяющиеЛичность(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОбИнвалидности(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОГражданстве(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОФИОФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	УчетСтраховыхВзносовФизическиеЛица.ДобавитьТекстЗапросаВТСведенияОСтатусахЗастрахованныхЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	УчетНДФЛФизическиеЛица.ДобавитьТекстЗапросаВТСведенияОСтатусахНалогоплательщиков(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	
КонецПроцедуры

Процедура ДобавитьВЗапросПоляПостоянныхКадровыхДанныхФизическихЛиц(Запрос, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц) Экспорт
	
	ТекстыОписанияПолей = Новый Массив;
	
	ИмяКоллекцииОбработанныеПоля = "ОбработанныеПоляПостоянныеКадровыеДанныеФизическихЛиц";
	
	Для каждого ИмяЗапрашиваемыхДанных Из КадровыеДанные Цикл
		
		ИмяКадровыхДанных = СокрЛП(ИмяЗапрашиваемыхДанных);
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(ИмяКадровыхДанных) Тогда
			
			Продолжить;
			
		ИначеЕсли КадровыйУчет.ЭтоОбработанноеПолеКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля) Тогда
			
			Продолжить;
			
		ИначеЕсли ДобавитьПолеРеквизитаСправочникаФизическиеЛица(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеКонтактнойИнформацииФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОДатахСмертиСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных) Тогда
			
			КадровыйУчет.ДобавитьВКоллекциюИмяОбработанныхКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля);
			Продолжить;
			
		Иначе
			
			ТекстСообщенияИсключения = НСтр("ru='Среди кадровых данных физических лиц нет данных с именем'") + " """ + ИмяКадровыхДанных + """";
			ВызватьИсключение ТекстСообщенияИсключения;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстыОписанияПолей, "ПОМЕСТИТЬ " + ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	
КонецПроцедуры

Процедура ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных) Экспорт
	
	ДобавитьТекстЗапросаДанныхРеквизитовСправочникаФизическиеЛица(Запрос, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТКонтактнаяИнформация(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОДатахСмертиСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных)
	
КонецПроцедуры

Функция ТекстыОписанияПолейЗапросПоляПостоянныхКадровыхДанныхСотрудников(КадровыеДанные, ИсточникиДанных) Экспорт
	
	ТекстыОписанияПолей = Новый Массив;
	
	ИмяКоллекцииОбработанныеПоля = "ОбработанныеПоляПостоянныеКадровыеДанныеСотрудников";
	
	Для каждого ИмяЗапрашиваемыхДанных Из КадровыеДанные Цикл
		
		ИмяКадровыхДанных = СокрЛП(ИмяЗапрашиваемыхДанных);
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхСотрудника(ИмяКадровыхДанных) Тогда
			
			Продолжить;
			
		ИначеЕсли КадровыйУчет.ЭтоОбработанноеПолеКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля) Тогда
			
			Продолжить;
			
		ИначеЕсли ДобавитьПолеРеквизитаСправочникаСотрудники(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийПостоянныхКадровыхДанныхФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийТекущихКадровыхДанныхСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийТекущихТарифныхСтавокСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийДанныхПриказаОПриемеОбУвольнении(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных) Тогда
			
			КадровыйУчет.ДобавитьВКоллекциюИмяОбработанныхКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля);
			Продолжить;
			
		Иначе
			
			ТекстСообщенияИсключения = НСтр("ru='Среди кадровых данных сотрудников нет данных с именем'") + " """ + ИмяКадровыхДанных + """";
			ВызватьИсключение ТекстСообщенияИсключения;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ТекстыОписанияПолей;
	
КонецФункции

Процедура ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ФормироватьТаблицуРазличных) Экспорт
	
	ДобавитьТекстЗапросаДанныхРеквизитовСправочникаСотрудники(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ФормироватьТаблицуРазличных);
	ДобавитьТекстЗапросаПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаТекущихКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаТекущихТарифныхСтавок(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаДанныхПриказовОПриемеОбУвольнении(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	
КонецПроцедуры

#КонецОбласти


Функция СведенияОСреднемЗаработкеДляСправкиПоБезработице(КадровыеДанныеСотрудников) Экспорт
	
	СведенияОСреднемЗаработке = Новый Соответствие;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.КадровыйУчет") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетДляНебольшихОрганизаций");
		СведенияОСреднемЗаработке = Модуль.СведенияОСреднемЗаработкеДляСправкиПоБезработице(КадровыеДанныеСотрудников);
	КонецЕсли;
	
	Возврат СведенияОСреднемЗаработке;
	
КонецФункции

Функция СведенияОГрафикахРаботыДляСправкиПоБезработице(КадровыеДанныеСотрудников) Экспорт
	
	СведенияОГрафикахРаботы = Новый Соответствие;
	
	Для Каждого ДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
		
		СведенияОГрафике = Новый Структура;
		СведенияОГрафике.Вставить("Часов", 8);
		СведенияОГрафике.Вставить("Дней", 5);
		СведенияОГрафике.Вставить("НачалоПериода", Макс(ДобавитьМесяц(ДанныеСотрудника.ДатаУвольнения, -12), ДанныеСотрудника.ДатаПриема));
		СведенияОГрафике.Вставить("ОкончаниеПериода", ДанныеСотрудника.ДатаУвольнения);
		СведенияОГрафике.Вставить("ПериодРаботыСПолнымРабочимДнем", Истина);
		
		СведенияОГрафикахРаботы.Вставить(ДанныеСотрудника.Сотрудник, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СведенияОГрафике));
		
	КонецЦикла;
	
	Возврат СведенияОГрафикахРаботы;
	
КонецФункции

Процедура ОписаниеГрафикаРаботыДляСправкиПоБезработице(ВходящиеДанные, ШаблонОписанияГрафика, СуммированныйУчетРабочегоВремени, ИсходящиеДанные) Экспорт
	
	ДоляНеполногоРабочегоВремени = ВходящиеДанные.ДоляНеполногоРабочегоВремени;
	
	Если ЗначениеЗаполнено(ДоляНеполногоРабочегоВремени) И ДоляНеполногоРабочегоВремени < 1 Тогда
		
		ИсходящиеДанные.ДанныеГрафикаПолногоРабочегоДня = СтрШаблон(ШаблонОписанияГрафика,
			НСтр("ru='_____'"),
			НСтр("ru='_____'"));
		
		ИсходящиеДанные.ДанныеГрафикаСокращенногоРабочегоДня = СтрШаблон(ШаблонОписанияГрафика,
			Окр(ВходящиеДанные.РаботаГрафикРаботыЧасовВДеньПредставление * ДоляНеполногоРабочегоВремени, 2),
			ВходящиеДанные.РаботаГрафикРаботыДнейВНеделюПредставление);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СведенияОПериодахНеРаботыДляСправкиПоБезработице(КадровыеДанныеСотрудников) Экспорт
	
	СведенияОПериодахНеРаботы = Новый Соответствие;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.КадровыйУчет") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетДляНебольшихОрганизаций");
		СведенияОСреднемЗаработке = Модуль.СведенияОПериодахНеРаботыДляСправкиПоБезработице(КадровыеДанныеСотрудников);
	КонецЕсли;
	
	Возврат СведенияОПериодахНеРаботы;
	
КонецФункции

Процедура ОбработатьИзменениеОрганизацийВНабореПоТаблицеИзменений(ТаблицаАнализаИзменений) Экспорт
	
	// сначала просто удалим дубли
	ТаблицаАнализаИзменений.Свернуть("Организация, Сотрудник, ФлагИзменений");
	
	// Теперь определим организации которые были добавлены в наборы и которые были удалены.
	ТаблицаАнализаИзменений.Свернуть("Организация, Сотрудник", "ФлагИзменений");
	
	СтруктураПоиска = Новый Структура("ФлагИзменений");
	
	СтруктураПоиска.ФлагИзменений = 1;
	ДобавляемыеОрганизацииСотрудников = ТаблицаАнализаИзменений.Скопировать(ТаблицаАнализаИзменений.НайтиСтроки(СтруктураПоиска), "Организация, Сотрудник");
	
	Для Каждого ОрганизацияСотрудника Из ДобавляемыеОрганизацииСотрудников Цикл
		
		Набор = РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Установить(ОрганизацияСотрудника.Организация);
		Набор.Отбор.Сотрудник.Установить(ОрганизацияСотрудника.Сотрудник);
		
		СтрокаНабора = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ОрганизацияСотрудника);
		Набор.Записать();
		
	КонецЦикла;
	
	СтруктураПоиска.ФлагИзменений = -1;
	УдаляемыеОрганизацииСотрудников = ТаблицаАнализаИзменений.Скопировать(ТаблицаАнализаИзменений.НайтиСтроки(СтруктураПоиска), "Организация, Сотрудник");
	
	Если УдаляемыеОрганизацииСотрудников.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УдаляемыеОрганизацииСотрудников", УдаляемыеОрганизацииСотрудников);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УдаляемыеОрганизацииСотрудников.Сотрудник КАК Сотрудник,
			|	УдаляемыеОрганизацииСотрудников.Организация КАК Организация
			|ПОМЕСТИТЬ ВТУдаляемыеОрганизацииСотрудников
			|ИЗ
			|	&УдаляемыеОрганизацииСотрудников КАК УдаляемыеОрганизацииСотрудников
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
			|	ВложенныйЗапрос.Организация КАК Организация
			|ИЗ
			|	(ВЫБРАТЬ
			|		УдаляемыеОрганизацииСотрудников.Сотрудник КАК Сотрудник,
			|		УдаляемыеОрганизацииСотрудников.Организация КАК Организация,
			|		ВЫБОР
			|			КОГДА 1 В
			|					(ВЫБРАТЬ
			|						1 КАК Поле1
			|					ИЗ
			|						РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|					ГДЕ
			|						КадроваяИсторияСотрудников.Сотрудник = УдаляемыеОрганизацииСотрудников.Сотрудник
			|						И КадроваяИсторияСотрудников.Организация = УдаляемыеОрганизацииСотрудников.Организация)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ КАК Удалять
			|	ИЗ
			|		ВТУдаляемыеОрганизацииСотрудников КАК УдаляемыеОрганизацииСотрудников
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		УдаляемыеОрганизацииСотрудников.Сотрудник,
			|		УдаляемыеОрганизацииСотрудников.Организация,
			|		ВЫБОР
			|			КОГДА 1 В
			|					(ВЫБРАТЬ
			|						1 КАК Поле1
			|					ИЗ
			|						Справочник.Сотрудники КАК Сотрудники
			|					ГДЕ
			|						Сотрудники.Ссылка = УдаляемыеОрганизацииСотрудников.Сотрудник
			|						И Сотрудники.ГоловнаяОрганизация = УдаляемыеОрганизацииСотрудников.Организация)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|	ИЗ
			|		ВТУдаляемыеОрганизацииСотрудников КАК УдаляемыеОрганизацииСотрудников) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Сотрудник,
			|	ВложенныйЗапрос.Организация
			|
			|ИМЕЮЩИЕ
			|	МИНИМУМ(ВложенныйЗапрос.Удалять) = ИСТИНА";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			Набор.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтрольВеденияУчета

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки) Экспорт
	
	ИдентификаторГруппыПроверокВеденияУчетаБЗК = ЗарплатаКадры.ИдентификаторГруппыПроверокВеденияУчетаБЗК();
	
	ГруппаПроверокКонтрольВеденияКадровогоУчета = ГруппыПроверок.Добавить();
	ГруппаПроверокКонтрольВеденияКадровогоУчета.Наименование					= НСтр("ru = 'Кадровый учет'");
	ГруппаПроверокКонтрольВеденияКадровогоУчета.Идентификатор					= КадровыйУчет.ИдентификаторГруппыПроверокВеденияКадровогоУчета();
	Если ИдентификаторГруппыПроверокВеденияУчетаБЗК <> Неопределено Тогда
		ГруппаПроверокКонтрольВеденияКадровогоУчета.ИдентификаторГруппы = ИдентификаторГруппыПроверокВеденияУчетаБЗК;
	КонецЕсли;
	ГруппаПроверокКонтрольВеденияКадровогоУчета.КонтекстПроверокВеденияУчета	= ГруппаПроверокКонтрольВеденияКадровогоУчета.Идентификатор;
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование					= НСтр("ru = 'Оформление кадровых приказов'");
	ГруппаПроверок.Идентификатор				= КадровыйУчет.ИдентификаторГруппыПроверокКонтрольОформленияКадровыхПриказов();
	ГруппаПроверок.ИдентификаторГруппы			= ГруппаПроверокКонтрольВеденияКадровогоУчета.Идентификатор;
	ГруппаПроверок.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Виды занятости сотрудников'");
	Проверка.Причины						= НСтр("ru = 'Неправильная последовательность регистрации кадровых приказов'");
	Проверка.Рекомендация					= НСтр("ru = 'Исправить даты событий и устанавливаемые виды занятости кадровых приказов'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаКорректностиВидовЗанятостиСотрудников";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольВеденияКадровогоУчета.ПроверитьКорректностьВидовЗанятостиСотрудников";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Последовательность кадровых событий'");
	Проверка.Причины						= НСтр("ru = 'Отмена проведений кадровых приказов задним числом (не в обратной хронологической последовательности)'");
	Проверка.Рекомендация					= НСтр("ru = 'Восстановить хронологическую последовательность кадровых приказов'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаПоследовательностиКадровыхСобытийСотрудников";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольВеденияКадровогоУчета.ПроверкаПоследовательностиКадровыхСобытийСотрудников";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование					= НСтр("ru = 'Личные данные сотрудников'");
	ГруппаПроверок.ИдентификаторГруппы			= ГруппаПроверокКонтрольВеденияКадровогоУчета.Идентификатор;
	ГруппаПроверок.Идентификатор				= КадровыйУчет.ИдентификаторГруппыПроверокКонтрольЗаполненияЛичныхДанных();
	ГруппаПроверок.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Дата рождения сотрудников, учет которых начался с начала прошлого месяца'");
	Проверка.Причины						= НСтр("ru = 'Не введена дата рождения (или введена «странная») дата рождения'");
	Проверка.Рекомендация					= НСтр("ru = 'Ввести (исправить) дату рождения'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаЗаполненностиДатыРождения";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольВеденияКадровогоУчета.ПроверкаЗаполненностиДатыРождения";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'ИНН сотрудников, учет которых начался с начала прошлого месяца'");
	Проверка.Причины						= НСтр("ru = 'Не введен (введен некорректный) ИНН'");
	Проверка.Рекомендация					= НСтр("ru = 'Ввести (исправить) ИНН'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаЗаполненностиИНН";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольВеденияКадровогоУчета.ПроверкаЗаполненностиИНН";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'СНИЛС сотрудников, учет которых начался с начала прошлого месяца'");
	Проверка.Причины						= НСтр("ru = 'Не введен (введен некорректный) СНИЛС'");
	Проверка.Рекомендация					= НСтр("ru = 'Ввести (исправить) СНИЛС'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаЗаполненностиСНИЛС";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольВеденияКадровогоУчета.ПроверкаЗаполненностиСНИЛС";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Сведения о гражданстве на дату начала учета'");
	Проверка.Причины						= НСтр("ru = 'Не введены (введены некорректно) сведения о гражданстве'");
	Проверка.Рекомендация					= НСтр("ru = 'Ввести (исправить) сведения о гражданстве'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаЗаполненностиГражданства";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольВеденияКадровогоУчета.ПроверкаЗаполненностиГражданства";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Паспортные данные (заполненность)'");
	Проверка.Причины						= НСтр("ru = 'Не введены (введены некорректно) паспортные данные'");
	Проверка.Рекомендация					= НСтр("ru = 'Ввести (исправить) паспортные данные'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаЗаполненностиПаспортныхДанных";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольВеденияКадровогоУчета.ПроверкаЗаполненностиПаспортныхДанных";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Паспортные данные (актуальность)'");
	Проверка.Причины						= НСтр("ru = 'Паспортные данные сотрудника не актуальны'");
	Проверка.Рекомендация					= НСтр("ru = 'Ввести актуальные паспортные данные'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаАктуальностиПаспортныхДанных";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольВеденияКадровогоУчета.ПроверкаАктуальностиПаспортныхДанных";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;

	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Статус физического лица как налогоплательщика НДФЛ на дату начала учета'");
	Проверка.Причины						= НСтр("ru = 'Не указан (указан некорректно) статус налогоплательщика НДФЛ'");
	Проверка.Рекомендация					= НСтр("ru = 'Ввести (исправить) статус налогоплательщика НДФЛ'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаНаличияСтатусаФизическихЛицКакНалогоплательщиковНДФЛ";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольВеденияКадровогоУчета.ПроверкаНаличияСтатусаФизическихЛицКакНалогоплательщиковНДФЛ";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Статус застрахованного физического лица на дату начала учета'");
	Проверка.Причины						= НСтр("ru = 'Не указан (указан некорректно) страховой статус'");
	Проверка.Рекомендация					= НСтр("ru = 'Ввести (исправить) страховой статус'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаНаличияСтатусаЗастрахованныхФизическихЛиц";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольВеденияКадровогоУчета.ПроверкаНаличияСтатусаЗастрахованныхФизическихЛиц";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Проведение документов'");
	Проверка.Причины						= НСтр("ru = 'Документ не проведен и не помечен на удаление'");
	Проверка.Рекомендация					= НСтр("ru = 'Провести или удалить соответствующий документ'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаПроведенияИлиУдаленияДокументов";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольВеденияКадровогоУчета.ПроверкаПроведенияИлиУдаленияДокументов";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

Функция ДанныеГрафиковРаботыДляСправкиОСреднемЗаработке() Экспорт
	
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов());
	ТаблицаСведений.Колонки.Добавить("ЧасовВНеделю", Новый ОписаниеТипов("Число"));
	ТаблицаСведений.Колонки.Добавить("ЧасовВДень", Новый ОписаниеТипов("Число"));
	ТаблицаСведений.Колонки.Добавить("ДнейВНеделю", Новый ОписаниеТипов("Число"));
	ТаблицаСведений.Колонки.Добавить("ЧасовВДеньСокращенный", Новый ОписаниеТипов("Число"));
	ТаблицаСведений.Колонки.Добавить("ДнейВНеделюСокращенный", Новый ОписаниеТипов("Число"));
	ТаблицаСведений.Колонки.Добавить("Недельный", Новый ОписаниеТипов("Булево"));
	ТаблицаСведений.Колонки.Добавить("СуммированныйУчетРабочегоВремени", Новый ОписаниеТипов("Булево"));
	ТаблицаСведений.Колонки.Добавить("Сокращенный", Новый ОписаниеТипов("Булево"));
	
	СтрокаГрафика = ТаблицаСведений.Добавить();
	СтрокаГрафика.ЧасовВДень = 8;
	СтрокаГрафика.ДнейВНеделю = 5;
	СтрокаГрафика.Недельный = Истина;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Процедура ЗаполнитьГоловныхСотрудниковВКадровойИстории(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	НЕ КадроваяИсторияСотрудников.Регистратор В (&МассивОбновленных)
		|	И КадроваяИсторияСотрудников.ГоловнойСотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	СписокРегистраторовДляОбновленияИнтервальногоРегистра = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Регистратор);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.КадроваяИсторияСотрудников.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Не ЗначениеЗаполнено(Запись.ГоловнойСотрудник) Тогда
				Запись.ГоловнойСотрудник = Запись.Сотрудник;
				Запись.ЭтоГоловнойСотрудник = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
		СписокРегистраторовДляОбновленияИнтервальногоРегистра.Добавить(Выборка.Регистратор);
		
	КонецЦикла;
	
	Если СписокРегистраторовДляОбновленияИнтервальногоРегистра.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("СписокОбновленныхРегистраторов", СписокРегистраторовДляОбновленияИнтервальногоРегистра);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТОтборДляПереформирования
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.Регистратор В(&СписокОбновленныхРегистраторов)";
		
		Запрос.Выполнить();
		РегистрыСведений.КадроваяИсторияСотрудников.ОбновитьДвиженияИнтервальногоРегистра(Запрос.МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	
	
КонецПроцедуры


Процедура ЗаполнитьОрганизацииСотрудников(ПараметрыОбновления) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОрганизацииВКоторыхРаботалиСотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ОрганизацииВКоторыхРаботалиСотрудники КАК ОрганизацииВКоторыхРаботалиСотрудники";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
				|	КадроваяИсторияСотрудников.Организация КАК Организация
				|ИЗ
				|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Сотрудники.Ссылка,
				|	Сотрудники.ГоловнаяОрганизация
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники";
		Иначе
			
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(
				Запрос.МенеджерВременныхТаблиц, Ложь);
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
				|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК Организация
				|ИЗ
				|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
				|ГДЕ
				|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Сотрудники.Ссылка,
				|	Сотрудники.ГоловнаяОрганизация
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники";
			
		КонецЕсли;
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
			ПараметрыОбновления, "РегистрСведений.ОрганизацииВКоторыхРаботалиСотрудники", "", "") Тогда
			
			ОбработкаЗавершена = Ложь;
			
		Иначе
			
			Набор = РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники.СоздатьНаборЗаписей();
			Набор.Загрузить(Запрос.Выполнить().Выгрузить());
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	
КонецПроцедуры

Процедура ЗаполнитьОсновныхСотрудниковФизическихЛиц(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеВыполнено = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
			|	Сотрудники.Ссылка КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудникиПериоды
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники";
		
		Запрос.Выполнить();
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
			Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников.Имя,
			Запрос.МенеджерВременныхТаблиц,
			Ложь,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТСотрудникиПериоды", "Сотрудник"));
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(Сотрудники.Ссылка) КАК Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	&МаксимальнаяДата КАК ДатаОкончания
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
			|		ПО Сотрудники.ГоловнаяОрганизация = ВидыЗанятостиСотрудников.ГоловнаяОрганизация
			|			И Сотрудники.ФизическоеЛицо = ВидыЗанятостиСотрудников.ФизическоеЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|		ПО Сотрудники.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
			|			И Сотрудники.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
			|ГДЕ
			|	ВидыЗанятостиСотрудников.ФизическоеЛицо ЕСТЬ NULL
			|	И ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	Сотрудники.ГоловнаяОрганизация,
			|	Сотрудники.ФизическоеЛицо";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ОбновлениеВыполнено = Ложь;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОсновныеСотрудникиФизическихЛиц", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
					Продолжить;
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
				
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВидыЗанятостиСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МАКСИМУМ(ВидыЗанятостиСотрудников.Сотрудник) КАК Сотрудник,
			|	ВЫБОР
			|		КОГДА МАКСИМУМ(ВидыЗанятостиСотрудниковПредыдущие.Период) ЕСТЬ NULL
			|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|		ИНАЧЕ ВидыЗанятостиСотрудников.Период
			|	КОНЕЦ КАК ДатаНачала,
			|	ВЫБОР
			|		КОГДА МИНИМУМ(ВидыЗанятостиСотрудниковСледующие.Период) ЕСТЬ NULL
			|			ТОГДА &МаксимальнаяДата
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(ВидыЗанятостиСотрудниковСледующие.Период), ДЕНЬ, -1)
			|	КОНЕЦ КАК ДатаОкончания
			|ИЗ
			|	ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудниковПредыдущие
			|		ПО ВидыЗанятостиСотрудников.ГоловнаяОрганизация = ВидыЗанятостиСотрудниковПредыдущие.ГоловнаяОрганизация
			|			И ВидыЗанятостиСотрудников.ФизическоеЛицо = ВидыЗанятостиСотрудниковПредыдущие.ФизическоеЛицо
			|			И (ВидыЗанятостиСотрудниковПредыдущие.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)))
			|			И ВидыЗанятостиСотрудников.Период > ВидыЗанятостиСотрудниковПредыдущие.Период
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудниковСледующие
			|		ПО ВидыЗанятостиСотрудников.ГоловнаяОрганизация = ВидыЗанятостиСотрудниковСледующие.ГоловнаяОрганизация
			|			И ВидыЗанятостиСотрудников.ФизическоеЛицо = ВидыЗанятостиСотрудниковСледующие.ФизическоеЛицо
			|			И (ВидыЗанятостиСотрудниковСледующие.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)))
			|			И ВидыЗанятостиСотрудников.Период < ВидыЗанятостиСотрудниковСледующие.Период
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|		ПО ВидыЗанятостиСотрудников.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
			|			И ВидыЗанятостиСотрудников.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
			|ГДЕ
			|	ВидыЗанятостиСотрудников.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
			|	И ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ВидыЗанятостиСотрудников.Период,
			|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация,
			|	ВидыЗанятостиСотрудников.ФизическоеЛицо
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизическоеЛицо,
			|	ГоловнаяОрганизация,
			|	ДатаНачала";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ОбновлениеВыполнено = Ложь;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
				
				Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОсновныеСотрудникиФизическихЛиц", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
					Продолжить;
				КонецЕсли;
				
				Пока Выборка.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
					
					НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
					НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
					
					Пока Выборка.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
					
				КонецЦикла;
				
				ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц, Ложь);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК Сотрудник
			|ПОМЕСТИТЬ ВТРаботающиеФизическиеЛица
			|ИЗ
			|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|ГДЕ
			|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
			|
			|СГРУППИРОВАТЬ ПО
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК Сотрудник
			|ПОМЕСТИТЬ ВТРаботающиеФизическиеЛицаСовместители
			|ИЗ
			|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботающиеФизическиеЛица КАК РаботающиеФизическиеЛица
			|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = РаботающиеФизическиеЛица.ФизическоеЛицо
			|			И ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = РаботающиеФизическиеЛица.ГоловнаяОрганизация
			|ГДЕ
			|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
			|	И РаботающиеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК Сотрудник
			|ПОМЕСТИТЬ ВТОстальныеФизическиеЛица
			|ИЗ
			|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботающиеФизическиеЛица КАК РаботающиеФизическиеЛица
			|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = РаботающиеФизическиеЛица.ФизическоеЛицо
			|			И ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = РаботающиеФизическиеЛица.ГоловнаяОрганизация
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботающиеФизическиеЛицаСовместители КАК РаботающиеФизическиеЛицаСовместители
			|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = РаботающиеФизическиеЛицаСовместители.ФизическоеЛицо
			|			И ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = РаботающиеФизическиеЛицаСовместители.ГоловнаяОрганизация
			|ГДЕ
			|	РаботающиеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
			|	И РаботающиеФизическиеЛицаСовместители.ФизическоеЛицо ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РаботающиеФизическиеЛица.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	РаботающиеФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
			|	РаботающиеФизическиеЛица.Сотрудник КАК Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	&МаксимальнаяДата КАК ДатаОкончания
			|ИЗ
			|	ВТРаботающиеФизическиеЛица КАК РаботающиеФизическиеЛица
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|		ПО РаботающиеФизическиеЛица.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
			|			И РаботающиеФизическиеЛица.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
			|			И РаботающиеФизическиеЛица.Сотрудник = ОсновныеСотрудникиФизическихЛиц.Сотрудник
			|ГДЕ
			|	ОсновныеСотрудникиФизическихЛиц.Сотрудник ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РаботающиеФизическиеЛица.ГоловнаяОрганизация,
			|	РаботающиеФизическиеЛица.ФизическоеЛицо,
			|	РаботающиеФизическиеЛица.Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1),
			|	&МаксимальнаяДата
			|ИЗ
			|	ВТРаботающиеФизическиеЛицаСовместители КАК РаботающиеФизическиеЛица
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|		ПО РаботающиеФизическиеЛица.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
			|			И РаботающиеФизическиеЛица.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
			|			И РаботающиеФизическиеЛица.Сотрудник = ОсновныеСотрудникиФизическихЛиц.Сотрудник
			|ГДЕ
			|	ОсновныеСотрудникиФизическихЛиц.Сотрудник ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОстальныеФизическиеЛица.ГоловнаяОрганизация,
			|	ОстальныеФизическиеЛица.ФизическоеЛицо,
			|	ОстальныеФизическиеЛица.Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1),
			|	&МаксимальнаяДата
			|ИЗ
			|	ВТОстальныеФизическиеЛица КАК ОстальныеФизическиеЛица
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|		ПО ОстальныеФизическиеЛица.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
			|			И ОстальныеФизическиеЛица.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
			|			И ОстальныеФизическиеЛица.Сотрудник = ОсновныеСотрудникиФизическихЛиц.Сотрудник
			|ГДЕ
			|	ОсновныеСотрудникиФизическихЛиц.Сотрудник ЕСТЬ NULL";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ОбновлениеВыполнено = Ложь;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОсновныеСотрудникиФизическихЛиц", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
					Продолжить;
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
				
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбновлениеВыполнено);
	
КонецПроцедуры

#КонецОбласти
