////////////////////////////////////////////////////////////////////////////////
// Отражение зарплаты в учете
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ПолучениеДанныхДляОтраженияВУчете

Функция ДанныеДляОтражениеВУчетеВзносовПоТаблице(СтраховыеВзносы) Экспорт
	
	Если СтраховыеВзносы.Количество() = 0 Тогда
		Возврат НоваяТаблицаСтраховыеВзносы();
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("СтраховыеВзносы", СтраховыеВзносы);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтраховыеВзносы.Организация,
		|	СтраховыеВзносы.ФизическоеЛицо,
		|	СтраховыеВзносы.Сотрудник,
		|	СтраховыеВзносы.Подразделение,
		|	СтраховыеВзносы.Начисление,
		|	НЕОПРЕДЕЛЕНО КАК ПоляВзносов,
		|	СтраховыеВзносы.ОблагаетсяЕНВД,
		|	СтраховыеВзносы.ДатаНачала
		|ПОМЕСТИТЬ ВТСтраховыеВзносы
		|ИЗ
		|	&СтраховыеВзносы КАК СтраховыеВзносы";
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "НЕОПРЕДЕЛЕНО КАК ПоляВзносов", УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина, "СтраховыеВзносы"));
		Запрос.Выполнить();
		
		Возврат ТаблицаВзносовДляОтражениеВУчете(Запрос.МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
КонецФункции

Функция ДанныеДляОтражениеВУчетеВзносов(Организация, ПериодРегистрации, Сотрудники = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТСтраховыеВзносы(МенеджерВременныхТаблиц, Организация, ПериодРегистрации, Сотрудники);
	Возврат ТаблицаВзносовДляОтражениеВУчете(МенеджерВременныхТаблиц);
	
КонецФункции 

Функция ДанныеДляОтражениеВУчетеНачисленийПоТаблице(НачисленияУдержания) Экспорт
	
	Если НачисленияУдержания.Количество() = 0 Тогда
		Возврат НоваяТаблицаНачислений();
	Иначе
		
		ДобавитьКолонкиСторно(НачисленияУдержания);
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		СоздатьВТНачисленияПоТаблицеЗначений(МенеджерВременныхТаблиц, НачисленияУдержания);
		
		Возврат ТаблицаНачисленийДляОтражениеВУчете(МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
КонецФункции

Функция ДанныеДляОтражениеВУчетеНачислений(Организация, ПериодРегистрации, Сотрудники = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТНачисления(МенеджерВременныхТаблиц, Организация, ПериодРегистрации, Сотрудники);
	Возврат ТаблицаНачисленийДляОтражениеВУчете(МенеджерВременныхТаблиц);
	
КонецФункции 

Функция ДанныеДляОтражениеВУчетеНДФЛПоТаблице(НачисленияУдержания) Экспорт
	
	Если НачисленияУдержания.Количество() = 0 Тогда
		Возврат НоваяТаблицаНДФЛ();
	Иначе
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		СоздатьВТТаблицаНДФЛПоТаблицеЗначений(МенеджерВременныхТаблиц, НачисленияУдержания);
		
		Возврат ТаблицаНДФЛДляОтражениеВУчете(МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
КонецФункции

Функция ДанныеДляОтражениеВУчетеНДФЛ(Организация, ПериодРегистрации) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТТаблицаНДФЛ(МенеджерВременныхТаблиц, Организация, ПериодРегистрации);
	Возврат ТаблицаНДФЛДляОтражениеВУчете(МенеджерВременныхТаблиц);
	
КонецФункции 

Функция ДанныеДляОтражениеВУчетеУдержанийПоТаблице(НачисленияУдержания) Экспорт
	
	Если НачисленияУдержания.Количество() = 0 Тогда
		Возврат НоваяТаблицаУдержаннаяЗарплата();
	Иначе
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		СоздатьВТУдержанияПоСотрудникамПоТаблицеЗначений(МенеджерВременныхТаблиц, НачисленияУдержания);
		
		Возврат ТаблицаУдержанийДляОтражениеВУчете(МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
КонецФункции

Функция ДанныеДляОтражениеВУчетеУдержаний(Организация, ПериодРегистрации) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТУдержанияПоСотрудникам(МенеджерВременныхТаблиц, Организация, ПериодРегистрации);
	Возврат ТаблицаУдержанийДляОтражениеВУчете(МенеджерВременныхТаблиц);
	
КонецФункции 

// Функция формирует структуру с данными для отражения зарплаты в учете.
//
// Параметры:
//  ПериодРегистрации - тип дата, первое число месяца.
//  Организация, тип СправочникСсылка.Организации.
//
// Возвращаемое значение
// 		Структура ДанныеДляОтражения
//			Ключ - имя таблицы, соответствует именам разделов данных.
//			Значение - таблица значений.
//
Функция ДанныеДляОтраженияЗарплатыВУчете(ПериодРегистрации, Организация) Экспорт
	
	ТаблицаНачислений = ДанныеДляОтражениеВУчетеНачислений(Организация, ПериодРегистрации);
	ТаблицаВзносов    = ДанныеДляОтражениеВУчетеВзносов(Организация, ПериодРегистрации);
	ТаблицаНачисленныйНДФЛ    = ДанныеДляОтражениеВУчетеНДФЛ(Организация, ПериодРегистрации);
	ТаблицаУдержаннаяЗарплата = ДанныеДляОтражениеВУчетеУдержаний(Организация, ПериодРегистрации);
	
	ДанныеДляОтражения = Новый Структура;
	ДанныеДляОтражения.Вставить("Начисления", ТаблицаНачислений);
	ДанныеДляОтражения.Вставить("СтраховыеВзносы", ТаблицаВзносов);
	ДанныеДляОтражения.Вставить("НДФЛ", ТаблицаНачисленныйНДФЛ);
	ДанныеДляОтражения.Вставить("Удержания", ТаблицаУдержаннаяЗарплата);
	
	Возврат ДанныеДляОтражения;
	
КонецФункции

#КонецОбласти

#Область РаспределениеУдержанийПоРабочимМестамИСтатьям

// Возвращает данные для распределения удержаний по рабочим местам и статьям.
//
// Параметры:
//  ОтборФизическиеЛица - Массив.
//  ОтборУдержания - Массив.
//  ИсключаемыеРегистраторы - Массив.
//  ДополнительныеПараметры - Структура - см НовоеОписаниеПараметровПолученияДанныхДляРаспределенияУдержаний.
//
// Возвращаемое значение:
//  Структура - Ключ содержит имя данных
//  	* БазовыеНачисления - ТаблицаЗначений
//  	* СтрокиУжеУдержано - Соответствие.
//
Функция ДанныеДляРаспределенияУдержаний(ОтборФизическиеЛица, ОтборУдержания, ИсключаемыеРегистраторы, ДополнительныеПараметры) Экспорт
	
	ДанныеДляУчетаУдержаний = Новый Структура("БазовыеНачисления,СтрокиУжеУдержано");
	ДанныеДляУчетаУдержаний.СтрокиУжеУдержано = Новый Соответствие;
	
	МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	Организация 			= ДополнительныеПараметры.Организация;
	ПериодРегистрации 		= ДополнительныеПараметры.ПериодРегистрации;
	ОкончательныйРасчет 	= ДополнительныеПараметры.ОкончательныйРасчет;
	ИмяВТДанныеТекущегоДокумента = ДополнительныеПараметры.ИмяВТДанныеТекущегоДокумента;
	РегистраторыУдержанийОбновленияБухучета = ДополнительныеПараметры.РегистраторыУдержанийОбновленияБухучета;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Удержания", ОтборУдержания);
	Запрос.УстановитьПараметр("ФизическиеЛица", ОтборФизическиеЛица);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	УдалитьВТ = Новый Массив;
	
	Если ОкончательныйРасчет Тогда
		
		// Получим уже зарегистрированное распределение начислений
		// без учета исключаемых регистраторов и без учета начислений межрасчетного периода.
		ОтражениеЗарплатыВУчетеВнутренний.СоздатьВТРаспределениеНачисленийДляУдержаний(ОтборФизическиеЛица, ИсключаемыеРегистраторы, ДополнительныеПараметры);
		УдалитьВТ.Добавить("ВТРаспределениеНачисленийДляУдержаний");
		
		Если РегистраторыУдержанийОбновленияБухучета <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеРегистраторы, РегистраторыУдержанийОбновленияБухучета);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияУдержания.Сотрудник КАК Сотрудник,
		|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияУдержания.Подразделение КАК Подразделение,
		|	НачисленияУдержания.НачислениеУдержание КАК ВидУдержания,
		|	НачисленияУдержания.СтатьяФинансирования КАК СтатьяФинансирования,
		|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
		|	НачисленияУдержания.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	НачисленияУдержания.ДокументОснование КАК ДокументОснование,
		|	НачисленияУдержания.Контрагент КАК Контрагент,
		|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
		|ГДЕ
		|	НачисленияУдержания.Организация = &Организация
		|	И НачисленияУдержания.НачислениеУдержание В(&Удержания)
		|	И НачисленияУдержания.Период = &ПериодРегистрации
		|	И НачисленияУдержания.ФизическоеЛицо В(&ФизическиеЛица)
		|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода
		|	И НЕ НачисленияУдержания.Регистратор В (&ИсключаемыеРегистраторы)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержания.Сотрудник,
		|	НачисленияУдержания.ФизическоеЛицо,
		|	НачисленияУдержания.Подразделение,
		|	НачисленияУдержания.НачислениеУдержание,
		|	НачисленияУдержания.СтатьяФинансирования,
		|	НачисленияУдержания.СтатьяРасходов,
		|	НачисленияУдержания.ДокументОснование,
		|	НачисленияУдержания.Контрагент,
		|	НачисленияУдержания.ВидДоходаИсполнительногоПроизводства";
		ДанныеДляУчетаУдержаний.СтрокиУжеУдержано = СтрокиТаблицыЗначенийПоФизическимЛицам(Запрос.Выполнить().Выгрузить());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Сотрудники.ГоловнойСотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК ГоловнойСотрудник,
		|	РаспределениеНачислений.Сотрудник КАК Сотрудник,
		|	РаспределениеНачислений.Подразделение КАК Подразделение,
		|	РаспределениеНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РаспределениеНачислений.Начисление КАК Начисление,
		|	РаспределениеНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	РаспределениеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	РаспределениеНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	РаспределениеНачислений.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	СУММА(РаспределениеНачислений.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаспределениеНачислений.Сотрудник КАК Сотрудник,
		|		РаспределениеНачислений.Подразделение КАК Подразделение,
		|		РаспределениеНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|		РаспределениеНачислений.НачислениеУдержание КАК Начисление,
		|		РаспределениеНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|		РаспределениеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|		РаспределениеНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|		РаспределениеНачислений.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|		РаспределениеНачислений.Сумма КАК Сумма
		|	ИЗ
		|		ВТРаспределениеНачисленийДляУдержаний КАК РаспределениеНачислений
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РаспределениеНачислений.Сотрудник,
		|		РаспределениеНачислений.Подразделение,
		|		РаспределениеНачислений.ФизическоеЛицо,
		|		РаспределениеНачислений.Начисление,
		|		РаспределениеНачислений.ПодразделениеУчетаЗатрат,
		|		РаспределениеНачислений.СтатьяФинансирования,
		|		РаспределениеНачислений.СтатьяРасходов,
		|		РаспределениеНачислений.ВидДоходаИсполнительногоПроизводства,
		|		РаспределениеНачислений.Сумма
		|	ИЗ
		|		ВТРаспределениеНачисленийТекущегоДокумента КАК РаспределениеНачислений) КАК РаспределениеНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО РаспределениеНачислений.Сотрудник = Сотрудники.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Сотрудники.ГоловнойСотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)),
		|	РаспределениеНачислений.Сотрудник,
		|	РаспределениеНачислений.Подразделение,
		|	РаспределениеНачислений.ФизическоеЛицо,
		|	РаспределениеНачислений.Начисление,
		|	РаспределениеНачислений.СтатьяФинансирования,
		|	РаспределениеНачислений.СтатьяРасходов,
		|	РаспределениеНачислений.ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеНачислений.ПодразделениеУчетаЗатрат
		|
		|ИМЕЮЩИЕ
		|	СУММА(РаспределениеНачислений.Сумма) <> 0";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Сотрудники.ГоловнойСотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК ГоловнойСотрудник,
		|	РаспределениеНачислений.Сотрудник КАК Сотрудник,
		|	РаспределениеНачислений.Подразделение КАК Подразделение,
		|	РаспределениеНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РаспределениеНачислений.Начисление КАК Начисление,
		|	РаспределениеНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	РаспределениеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	РаспределениеНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	РаспределениеНачислений.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	СУММА(РаспределениеНачислений.Сумма) КАК Сумма
		|ИЗ
		|	ВТРаспределениеНачисленийТекущегоДокумента КАК РаспределениеНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО РаспределениеНачислений.Сотрудник = Сотрудники.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Сотрудники.ГоловнойСотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)),
		|	РаспределениеНачислений.Сотрудник,
		|	РаспределениеНачислений.Подразделение,
		|	РаспределениеНачислений.ФизическоеЛицо,
		|	РаспределениеНачислений.Начисление,
		|	РаспределениеНачислений.ПодразделениеУчетаЗатрат,
		|	РаспределениеНачислений.СтатьяФинансирования,
		|	РаспределениеНачислений.СтатьяРасходов,
		|	РаспределениеНачислений.ВидДоходаИсполнительногоПроизводства
		|
		|ИМЕЮЩИЕ
		|	СУММА(РаспределениеНачислений.Сумма) <> 0";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРаспределениеНачисленийТекущегоДокумента", ИмяВТДанныеТекущегоДокумента);
	ДанныеДляУчетаУдержаний.БазовыеНачисления = Запрос.Выполнить().Выгрузить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат ДанныеДляУчетаУдержаний;
	
КонецФункции

// Возвращает таблицу значений с результатом распределения удержаний по рабочим местам и статьям.
//
// Параметры:
//	СтрокиУдержаний - ТаблицаЗначений, Массив - коллекция строк таблицы значений, для распределения,
//		обязательные колонки:
//		* ИдентификаторСтроки
//		* Сотрудник
//		* ФизическоеЛицо
//		* ВидУдержания
//		* Сумма
//		* Подразделение
//		* ДокументОснование
//	БазаУдержаний - ТаблицаЗначений - обязательные колонки:
//		* ФизическоеЛицо
//		* ГоловнойСотрудник
//		* Сотрудник
//		* Подразделение
//		* ПодразделениеУчетаЗатрат
//		* Начисление
//		* СтатьяФинансирования
//		* СтатьяРасходов
//		* Сумма
//	СтрокиУжеУдержано - Соответствие - содержит информацию об уже зарегистрированных удержаниях.
//	ДополнительныеПараметры - Структура - см НовоеОписаниеПараметровРаспределенияУдержаний.
//
// Возвращаемое значение:
//		ТаблицаЗначений - ТаблицаЗначений - см НоваяТаблицаРаспределениеРезультатовУдержаний().
//
Функция РаспределениеУдержанийПоРабочимМестамИСтатьям(СтрокиУдержаний, БазаУдержаний, СтрокиУжеУдержано, ДополнительныеПараметры) Экспорт
	
	РезультатРаспределения = НоваяТаблицаРаспределениеРезультатовУдержаний();
	
	Если СтрокиУдержаний.Количество() = 0 Тогда
		Возврат РезультатРаспределения;
	КонецЕсли;
	
	Организация 		= ДополнительныеПараметры.Организация;
	ПериодРегистрации 	= ДополнительныеПараметры.ПериодРегистрации;
	БазовыеВидыРасчета 	= ДополнительныеПараметры.БазовыеВидыРасчета;
	УчитыватьЗнакБазовыхЗначений = ДополнительныеПараметры.УчитыватьЗнакБазовыхЗначений;
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(БазаУдержаний, "ФизическоеЛицо");
	
	КолонкиГруппировки = 
		"ГоловнойСотрудник,
		|Сотрудник,
		|Подразделение,
		|ПодразделениеУчетаЗатрат,
		|СтатьяФинансирования,
		|СтатьяРасходов,
		|ВидДоходаИсполнительногоПроизводства";
	
	УдержанияТочностьОкругления = УдержанияТочностьОкругленияПриРаспределении();
	
	СтрокиБезБазы = Новый Массив;
	ОтборСтрок = Новый Структура("ФизическоеЛицо");
	Для Каждого СтрокаУдержаний Из СтрокиУдержаний Цикл
		
		УчитыватьУжеРаспределенные = (СтрокаУдержаний.Сумма <> 0);
		УчитыватьПодразделение     = ЗначениеЗаполнено(СтрокаУдержаний.Подразделение);
		
		ОтборСтрок.ФизическоеЛицо = СтрокаУдержаний.ФизическоеЛицо;
		СтрокиРаспределения = БазаУдержаний.Скопировать(ОтборСтрок);

		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокиБезБазы.Добавить(СтрокаУдержаний);
			Продолжить;
		КонецЕсли;
		
		Если БазовыеВидыРасчета <> Неопределено Тогда
			// отберем строки распределения по базовым начислениям
			БазовыеНачисления = БазовыеВидыРасчета[СтрокаУдержаний.ВидУдержания];
			Если БазовыеНачисления <> Неопределено И БазовыеНачисления.Количество()>0 Тогда
				НовыеСтрокиРаспределения = Новый Массив;
				Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
					Если БазовыеНачисления.Найти(СтрокаРаспределения.Начисление) <> Неопределено Тогда
						НовыеСтрокиРаспределения.Добавить(СтрокаРаспределения);
					КонецЕсли;
				КонецЦикла;
				СтрокиРаспределения = БазаУдержаний.Скопировать(НовыеСтрокиРаспределения);
			КонецЕсли;
		КонецЕсли;
		СтрокиРаспределения.Свернуть(КолонкиГруппировки, "Сумма");
		
		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокиБезБазы.Добавить(СтрокаУдержаний);
			Продолжить;
		КонецЕсли;
		
		СтрокиРаспределенияБезУчетаПодразделения = Новый Массив;
		СтрокиРаспределенияСУчетомПодразделения = Новый Массив;
		СтрокиРаспределенияСУчетомОсновногоСотрудника = Новый Массив;
		Для Каждого СтрокаБазыПоФизическомуЛицу Из СтрокиРаспределения Цикл
			СтрокиРаспределенияБезУчетаПодразделения.Добавить(СтрокаБазыПоФизическомуЛицу);
			// Если подразделение совпадает, то эта строка с более точным источником распределением.
			Если УчитыватьПодразделение И СтрокаУдержаний.Подразделение = СтрокаБазыПоФизическомуЛицу.Подразделение Тогда
				СтрокиРаспределенияСУчетомПодразделения.Добавить(СтрокаБазыПоФизическомуЛицу);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) 
				И СтрокаУдержаний.Сотрудник = СтрокаБазыПоФизическомуЛицу.ГоловнойСотрудник Тогда
				СтрокиРаспределенияСУчетомОсновногоСотрудника.Добавить(СтрокаБазыПоФизическомуЛицу);
			КонецЕсли;
		КонецЦикла;
		
		СтрокиРаспределения = СтрокиРаспределенияСУчетомОсновногоСотрудника;
		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокиРаспределения = СтрокиРаспределенияСУчетомПодразделения;
			Если СтрокиРаспределения.Количество() = 0 Тогда
				СтрокиРаспределения = СтрокиРаспределенияБезУчетаПодразделения;
			КонецЕсли;
		КонецЕсли;
		
		Если УчитыватьЗнакБазовыхЗначений Тогда
			УточнитьБазуПоЗнакуРаспределяемойСуммы(СтрокиРаспределения, СтрокаУдержаний.Сумма);
		КонецЕсли;
		
		// Ранее удержано по этому виду удержания
		РанееУдержано = 0;
		СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержано[СтрокаУдержаний.ФизическоеЛицо];
		Если УчитыватьУжеРаспределенные И СтрокиУжеУдержаноПоФизическомуЛицу <> Неопределено Тогда
			Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
				Если СтрокаУжеУдержаноПоФизическомуЛицу.ВидУдержания = СтрокаУдержаний.ВидУдержания 
 						И СтрокаУжеУдержаноПоФизическомуЛицу.ДокументОснование = СтрокаУдержаний.ДокументОснование Тогда
					РанееУдержано = РанееУдержано + СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТочностьОкругления = УдержанияТочностьОкругления[СтрокаУдержаний.ВидУдержания];
		Если ТочностьОкругления = Неопределено Тогда
			ТочностьОкругления = 2;
		КонецЕсли;
		
		// Распределяем пропорционально суммам в найденных строках.
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
		// распределяем суммы с учетом ранее удержанного
		РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаУдержаний.Сумма + РанееУдержано, Коэффициенты, ТочностьОкругления);
		
		Если РаспределенныеСуммы <> Неопределено Тогда
			
			// вычитаем уже удержанные суммы
			Если УчитыватьУжеРаспределенные И СтрокиУжеУдержаноПоФизическомуЛицу <> Неопределено Тогда
				Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
					Если СтрокаУжеУдержаноПоФизическомуЛицу.ВидУдержания = СтрокаУдержаний.ВидУдержания 
 							И СтрокаУжеУдержаноПоФизическомуЛицу.ДокументОснование = СтрокаУдержаний.ДокументОснование Тогда
							
						НоваяСтрока = РезультатРаспределения.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУжеУдержаноПоФизическомуЛицу);
						
						НоваяСтрока.Результат 			= - СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
						НоваяСтрока.ВидУдержания        = СтрокаУдержаний.ВидУдержания;
						НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// добавляем распределенные суммы
			Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
				
				СтрокаРаспределения = СтрокиРаспределения[Индекс];
				НоваяСтрока = РезультатРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				
				НоваяСтрока.ВидУдержания        = СтрокаУдержаний.ВидУдержания;
				НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
				НоваяСтрока.Результат           = РаспределенныеСуммы[Индекс];
				
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = РезультатРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			
			НоваяСтрока.ВидУдержания        = СтрокаУдержаний.ВидУдержания;
			НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
			НоваяСтрока.Результат           = СтрокаУдержаний.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СвернутьТаблицу(РезультатРаспределения);
	
	Если СтрокиБезБазы.Количество() > 0 Тогда
		РаспределитьУдержанияПоБазеПоУмолчанию(РезультатРаспределения, СтрокиБезБазы, Организация, ПериодРегистрации, Истина);
	КонецЕсли;
	
	Возврат РезультатРаспределения;
	
КонецФункции

#КонецОбласти

#Область РаспределениеНДФЛИКорректировокВыплатыПоРабочимМестамИСтатьям

// Возвращает дату, начиная с которой применяется алгоритм распределения НДФЛ с учетом оснований учетных при расчете НДФЛ.
Функция ДатаНачалаИспользованияОснованийВРаспределенииНДФЛ() Экспорт

	Возврат Дата(2015,1,1);

КонецФункции

// Создает временную таблицу ВТУсловияОтбораДляРаспределенияНДФЛ, помещая в нее сведения из таблицы ОснованияУчтенныеПриРасчетеНДФЛ.
// Из таблицы предварительно вычеркиваются строки, соответствующие исключаемому регистратору,
// а так же строки с регистраторами, которые отмечены в учете начисленной зарплаты как данные межрасчетного периода.
//
// Поля таблицы ВТУсловияОтбораДляРаспределенияНДФЛ
//  	* Регистратор - ДокументСсылка или Неопределено.
//  	* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц.
//  ОснованияУчтенныеПриРасчетеНДФЛ - ТаблицаЗначений, содержать любые колонки, среди которых обязательно должны быть:
//  	* ДокументОснование    - ДокументСсылка - документ-основание.
//  	* ФизическоеЛицо       - СправочникСсылка.ФизическиеЛица - физическое лицо.
//  ИсключаемыйРегистратор     - ДокументСсылка.
//  ПериодРегистрации          - Дата - таблица не создается для "старых" периодов.
//
Процедура СоздатьВТУсловияОтбораДляРаспределенияНДФЛ(МенеджерВременныхТаблиц, ОснованияУчтенныеПриРасчетеНДФЛ, ИсключаемыйРегистратор) Экспорт

	ДокументыОснования = ОбщегоНазначения.ВыгрузитьКолонку(ОснованияУчтенныеПриРасчетеНДФЛ, "ДокументОснование", Истина);
	ИндексЗначения = ДокументыОснования.Найти(ИсключаемыйРегистратор);
	Если ИндексЗначения <> Неопределено Тогда
		ДокументыОснования.Удалить(ИндексЗначения);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ДокументыОснования.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Регистратор В(&ДокументыОснования)
		|	И НЕ НачисленияУдержанияПоСотрудникам.ДанныеМежрасчетногоПериода";
		УстановитьПривилегированныйРежим(Истина);
		ДокументыОснования = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если ДокументыОснования.Количество() = 0 Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК Регистратор
		|ПОМЕСТИТЬ ВТУсловияОтбораДляРаспределенияНДФЛ";
		Запрос.Выполнить();
		
	Иначе
		
		ОснованияУчтенныеПриРасчетеНДФЛ.Индексы.Добавить("ДокументОснование");
		Отбор = Новый Структура("ДокументОснование");
		
		НоваяТаблицаОснований = ОснованияУчтенныеПриРасчетеНДФЛ.СкопироватьКолонки();
		
		Для каждого ДокументОснование Из ДокументыОснования Цикл
			Отбор.ДокументОснование = ДокументОснование;
			НайденныеСтроки = ОснованияУчтенныеПриРасчетеНДФЛ.НайтиСтроки(Отбор);
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(НоваяТаблицаОснований.Добавить(), СтрокаТЗ);
			КонецЦикла;
		КонецЦикла;
		
		НоваяТаблицаОснований.Свернуть("ФизическоеЛицо,ДокументОснование");
		
		Запрос.УстановитьПараметр("ОснованияУчтенныеПриРасчетеНДФЛ", НоваяТаблицаОснований);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОснованияУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОснованияУчтенныеПриРасчетеНДФЛ.ДокументОснование КАК Регистратор
		|ПОМЕСТИТЬ ВТУсловияОтбораДляРаспределенияНДФЛ
		|ИЗ
		|	&ОснованияУчтенныеПриРасчетеНДФЛ КАК ОснованияУчтенныеПриРасчетеНДФЛ";
		Запрос.Выполнить();
		
	КонецЕсли;

КонецПроцедуры

// Возвращает данные для распределения НДФЛ по рабочим местам и статьям.
//
// Параметры:
//  ПараметрыРаспределения - Структура, описание см НовоеОписаниеПараметровРаспределенияНДФЛ.
//
// Возвращаемое значение:
//  Структура - Ключ содержит имя данных
//  	* БазаВсеНачисления - ТаблицаЗначений
//  	* СтрокиУжеУдержано - Соответствие.
//
Функция ДанныеДляРаспределенияНДФЛ(ПараметрыРаспределения) Экспорт

	Возврат ОтражениеЗарплатыВУчетеВнутренний.ДанныеДляРаспределенияНДФЛ(ПараметрыРаспределения);

КонецФункции

// Возвращает базу для распределения НДФЛ по рабочим местам статьям.
//
// Параметры
//  ПараметрыПолученияБазы - Структура - описание см НовоеОписаниеПараметровРаспределенияНДФЛ.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит колонки:
//  	* Сотрудник
//  	* ФизическоеЛицо
//  	* Подразделение - подразделение сотрудника.
//  	* Территория - место получения дохода.
//  	* СтатьяФинансирования
//  	* СтатьяРасходов
//  	* ДатаПолученияДохода
//  	* КатегорияДохода
//  	* ДоходМежрасчетногоПериода - признак из учета НДФЛ, используется для "старых" алгоритмов распределения.
//  	* Сумма
//
Функция БазаДляРаспределенияНДФЛ(ПараметрыПолученияБазы) Экспорт
	
	МенеджерВременныхТаблиц = ПараметрыПолученияБазы.МенеджерВременныхТаблиц;
	ОкончательныйРасчет 	= ПараметрыПолученияБазы.ОкончательныйРасчет;
	ИсключаемыйРегистратор 	= ПараметрыПолученияБазы.ИсключаемыйРегистратор;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Если таблица существует, отбор сведений о доходах выполняем по ней,
	// иначе будем использовать отбор по ИсключаемыеРегистраторы.
	СуществуетТаблицаУсловий = ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТУсловияОтбораДляРаспределенияНДФЛ");
	
	ИсключаемыеРегистраторы = Новый Массив;
	ИсключаемыеРегистраторы.Добавить(ИсключаемыйРегистратор);
	
	// Если это окончательный расчет и не заданы основания, учетные при  расчете НДФЛ,
	// заполним массив регистраторов, которые исключаются при получении сведений о доходах НДФЛ.
	Если ОкончательныйРасчет И Не СуществуетТаблицаУсловий Тогда
		
		Запрос.УстановитьПараметр("Организация", 	ПараметрыПолученияБазы.Организация);
		Запрос.УстановитьПараметр("ФизическиеЛица", ПараметрыПолученияБазы.МассивФизическихЛиц);
		Запрос.УстановитьПараметр("ДатаНачала", 	НачалоМесяца(ПараметрыПолученияБазы.ПериодРегистрации));
		Запрос.УстановитьПараметр("ДатаОкончания", 	КонецМесяца(ПараметрыПолученияБазы.ПериодРегистрации));
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления
		|ГДЕ
		|	Начисления.ДанныеМежрасчетногоПериода
		|	И Начисления.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Начисления.ФизическоеЛицо В(&ФизическиеЛица)
		|	И Начисления.Организация = &Организация";
		УстановитьПривилегированныйРежим(Истина);
		Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
		УстановитьПривилегированныйРежим(Ложь);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеРегистраторы, Регистраторы, Истина);
		
		ОтражениеЗарплатыВУчетеВнутренний.ДополнитьИсключаемыеРегистраторыБазыДляРаспределенияНДФЛ(ИсключаемыйРегистратор, ИсключаемыеРегистраторы, ПараметрыПолученияБазы);
		
	КонецЕсли;
	
	// ВТСведенияОДоходахДляРаспределенияНДФЛ содержит поля:
	// Территория - место получения дохода,
	// Подразделение - подразделение сотрудника.
	УчетНДФЛ.СоздатьВТСведенияОДоходахДляРаспределенияНДФЛ(ПараметрыПолученияБазы, ИсключаемыеРегистраторы);
	
	УдалитьВТ = Новый Массив;
	УдалитьВТ.Добавить("ВТСведенияОДоходахДляРаспределенияНДФЛ");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Территория КАК Территория,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|	Начисления.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	СУММА(Начисления.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТНачисленияБазаНДФЛ
	|ИЗ
	|	ВТРаспределениеНачисленийДляБазыНДФЛ КАК Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.Территория,
	|	Начисления.Подразделение,
	|	Начисления.Начисление,
	|	Начисления.ДатаНачала,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.СтатьяФинансирования,
	|	Начисления.СтатьяРасходов,
	|	Начисления.ВидДоходаИсполнительногоПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Территория КАК Территория,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Начисление КАК Начисление,
	|	СУММА(Начисления.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТНачисленияСвод
	|ИЗ
	|	ВТРаспределениеНачисленийДляБазыНДФЛ КАК Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.Подразделение,
	|	Начисления.Территория,
	|	Начисления.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазаНДФЛ.Сотрудник КАК Сотрудник,
	|	БазаНДФЛ.Подразделение КАК Подразделение,
	|	БазаНДФЛ.Территория КАК Территория,
	|	БазаНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БазаНДФЛ.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БазаНДФЛ.СтатьяРасходов КАК СтатьяРасходов,
	|	БазаНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	БазаНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	БазаНДФЛ.ДоходМежрасчетногоПериода КАК ДоходМежрасчетногоПериода,
	|	БазаНДФЛ.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	СУММА(БазаНДФЛ.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		База.Сотрудник КАК Сотрудник,
	|		База.Подразделение КАК Подразделение,
	|		База.Территория КАК Территория,
	|		База.ФизическоеЛицо КАК ФизическоеЛицо,
	|		База.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|		База.КатегорияДохода КАК КатегорияДохода,
	|		Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|		Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|		Начисления.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|		ВЫБОР
	|			КОГДА НачисленияСвод.Сумма = 0
	|				ТОГДА 0
	|			ИНАЧЕ База.Сумма * (ВЫРАЗИТЬ(Начисления.Сумма / НачисленияСвод.Сумма КАК ЧИСЛО(25, 10)))
	|		КОНЕЦ КАК Сумма,
	|		База.ДоходМежрасчетногоПериода КАК ДоходМежрасчетногоПериода
	|	ИЗ
	|		ВТСведенияОДоходахДляРаспределенияНДФЛ КАК База
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияБазаНДФЛ КАК Начисления
	|			ПО База.Сотрудник = Начисления.Сотрудник
	|				И База.Начисление = Начисления.Начисление
	|				И База.Подразделение = Начисления.Подразделение
	|				И База.Территория = Начисления.Территория
	|				И (НЕ База.СторноТекущегоПериода)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСвод КАК НачисленияСвод
	|			ПО База.Сотрудник = НачисленияСвод.Сотрудник
	|				И База.Начисление = НачисленияСвод.Начисление
	|				И База.Подразделение = НачисленияСвод.Подразделение
	|				И База.Территория = НачисленияСвод.Территория
	|				И (НЕ База.СторноТекущегоПериода)) КАК БазаНДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	БазаНДФЛ.ФизическоеЛицо,
	|	БазаНДФЛ.Сотрудник,
	|	БазаНДФЛ.Подразделение,
	|	БазаНДФЛ.Территория,
	|	БазаНДФЛ.СтатьяФинансирования,
	|	БазаНДФЛ.СтатьяРасходов,
	|	БазаНДФЛ.ДатаПолученияДохода,
	|	БазаНДФЛ.КатегорияДохода,
	|	БазаНДФЛ.ДоходМежрасчетногоПериода,
	|	БазаНДФЛ.ВидДоходаИсполнительногоПроизводства
	|
	|ИМЕЮЩИЕ
	|	СУММА(БазаНДФЛ.Сумма) <> 0";
	
	УдалитьВТ.Добавить("ВТНачисленияСвод");
	УдалитьВТ.Добавить("ВТНачисленияБазаНДФЛ");
	БазаРасчетаНДФЛ = Запрос.Выполнить().Выгрузить();
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат БазаРасчетаНДФЛ;

КонецФункции

// Возвращает результат распределения НДФЛ по рабочим местам и статьям.
//
// Параметры:
//  ТаблицаНДФЛ       - ТаблицаЗначений - структура таблицы см НоваяТаблицаРезультатРасчетаНДФЛ.
//  База              - ТаблицаЗначений - рассчитанная база для распределения.
//  БазаВсеНачисления - ТаблицаЗначений - сведения для распределения тех строк, для которых нет базы.
//  СтрокиУжеУдержано - Соответствие    - сведения об уже зарегистрированных распределения НДФЛ в разрезе физических лиц.
//  Организация       - СправочникСсылка.Организации.
//  ПериодРегистрации - Дата.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание см НоваяТаблицаРаспределениеРезультатовУдержаний.
//
Функция НДФЛПоРабочимМестамИСтатьям(ТаблицаНДФЛ, База, БазаВсеНачисления,
										СтрокиУжеУдержано, Организация, ПериодРегистрации) Экспорт
										
	Возврат ОтражениеЗарплатыВУчетеВнутренний.НДФЛПоРабочимМестамИСтатьям(ТаблицаНДФЛ, База, БазаВсеНачисления,
										СтрокиУжеУдержано, Организация, ПериодРегистрации);
	
КонецФункции

// Возвращает результат распределения корректировок выплаты по рабочим местам и статьям.
//
// Параметры:
//  КорректировкиВыплаты - ТаблицаЗначений - структура таблицы см НоваяТаблицаКорректировкиВыплаты.
//  База              - ТаблицаЗначений - рассчитанная база для распределения.
//  БазаВсеНачисления - ТаблицаЗначений - сведения для распределения тех строк, для которых нет базы.
//  Организация       - СправочникСсылка.Организации.
//  ПериодРегистрации - Дата.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание см НоваяТаблицаРаспределениеРезультатовУдержаний.
//
Функция КорректировкиВыплатыПоРабочимМестамИСтатьям(КорректировкиВыплаты, База, БазаВсеНачисления, Организация, ПериодРегистрации) Экспорт
				
	РезультатыРаспределения = НоваяТаблицаРаспределениеРезультатовУдержаний();
	Если КорректировкиВыплаты.Количество() = 0 Тогда
		Возврат РезультатыРаспределения;
	КонецЕсли;
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(База, "ФизическоеЛицо");
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(БазаВсеНачисления, "ФизическоеЛицо");
	
	СтрокиБазаНеопределена = Новый Массив;
	Отбор = Новый Структура("ФизическоеЛицо");
	
	Для Каждого СтрокаРаспределения Из КорректировкиВыплаты Цикл
		
		Отбор.ФизическоеЛицо = СтрокаРаспределения.ФизическоеЛицо;
		СтрокиБазы = Новый Массив;
		
		СтрокиБазы = База.НайтиСтроки(Отбор);
		Если СтрокиБазы.Количество() = 0 Тогда
			СтрокиБазы = БазаВсеНачисления.НайтиСтроки(Отбор);
		КонецЕсли;
		
		Если СтрокиБазы.Количество() = 0 Тогда
			СтрокиБазаНеопределена.Добавить(СтрокаРаспределения);
			Продолжить;
		КонецЕсли;
		
		// Распределяем пропорционально суммам в найденных строках.
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиБазы, "Сумма");
		// распределяем суммы с учетом ранее удержанного
		РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаРаспределения.Сумма, Коэффициенты, 0);
		
		Если РаспределенныеСуммы = Неопределено Тогда
			
			НоваяСтрока = РезультатыРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиБазы[0]);
			
			НоваяСтрока.ВидУдержания        = СтрокаРаспределения.ВидУдержания;
			НоваяСтрока.ИдентификаторСтроки = СтрокаРаспределения.ИдентификаторСтроки;
			НоваяСтрока.Результат           = СтрокаРаспределения.Сумма;
			
		Иначе
			
			Для Индекс = 0 По СтрокиБазы.Количество() - 1 Цикл
				
				НоваяСтрока = РезультатыРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиБазы[Индекс]);
				
				НоваяСтрока.ВидУдержания        = СтрокаРаспределения.ВидУдержания;
				НоваяСтрока.ИдентификаторСтроки = СтрокаРаспределения.ИдентификаторСтроки;
				НоваяСтрока.Результат           = РаспределенныеСуммы[Индекс];
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СвернутьТаблицу(РезультатыРаспределения);
	
	Если СтрокиБазаНеопределена.Количество() > 0 Тогда
		РаспределитьУдержанияПоБазеПоУмолчанию(РезультатыРаспределения, СтрокиБазаНеопределена, Организация, ПериодРегистрации);
	КонецЕсли;
	
	Возврат РезультатыРаспределения;
	
КонецФункции

#КонецОбласти

#Область РаспределениеНДФЛПоСтатьям

// Дополняет записи набора записей регистра НДФЛКПеречислению аналитикой: Статьи финансирования, Статьи расходов.
//
// Параметры:
//  Движения - коллекции наборов записей движений документа,
//				должна содержать коллекцию еще не записанного набора НДФЛКПеречислению.
//  ДанныеДляДополнения - структура см НовоеОписаниеПараметровДополненияНДФЛСтатьями.
//
Процедура ДополнитьНДФЛКПеречислениюСведениямиОРаспределенииПоСтатьям(Движения, ДанныеДляДополнения) Экспорт

	Если Движения.Найти("НДФЛКПеречислению") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БазаРаспределения 	= ДанныеДляДополнения.БазаРаспределения;
	ПоляОтбора 			= ДанныеДляДополнения.ПоляОтбора;
		
	НаборЗаписей = Движения.НДФЛКПеречислению;
	
	Если НаборЗаписей.Количество() = 0 Или БазаРаспределения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиСтатей = "СтатьяРасходов";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		КолонкиСтатей = "СтатьяФинансирования," +КолонкиСтатей;
	КонецЕсли;
	
	НоваяТаблицаНДФЛ = ТаблицаНДФЛДополненнаяСтатьями(НаборЗаписей, БазаРаспределения, ПоляОтбора, КолонкиСтатей);
		
	Если НоваяТаблицаНДФЛ.Количество()>0 Тогда
		НаборЗаписей.Загрузить(НоваяТаблицаНДФЛ);
	КонецЕсли;

КонецПроцедуры

// Возвращает данные для дополнения удержанного НДФЛ статьями.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц, должен содержать таблицу ВТНалогУдержанный.
//
// Возвращаемое значение:
//  Структура - см описание НовоеОписаниеПараметровДополненияНДФЛСтатьями.
//
Функция ДанныеДляДополненияНДФЛУдержанногоСтатьями(МенеджерВременныхТаблиц) Экспорт

	ДанныхДляДополнения = НовоеОписаниеПараметровДополненияНДФЛСтатьями();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалогУдержанный.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НалогУдержанный.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	НалогУдержанный.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НалогУдержанный.КодДохода КАК КодДохода,
	|	НалогУдержанный.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НалогУдержанный.Подразделение КАК Подразделение,
	|	НалогУдержанный.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НалогУдержанный.ДокументОснование КАК ДокументОснование,
	|	НалогУдержанный.КатегорияДохода КАК КатегорияДохода,
	|	НалогУдержанный.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НалогУдержанный.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(НалогУдержанный.Сумма) КАК Сумма,
	|	СУММА(НалогУдержанный.СуммаСПревышения) КАК СуммаСПревышения
	|ИЗ
	|	ВТНалогУдержанный КАК НалогУдержанный
	|
	|СГРУППИРОВАТЬ ПО
	|	НалогУдержанный.СтатьяФинансирования,
	|	НалогУдержанный.СтатьяРасходов,
	|	НалогУдержанный.ДокументОснование,
	|	НалогУдержанный.СтавкаНалогообложенияРезидента,
	|	НалогУдержанный.КатегорияДохода,
	|	НалогУдержанный.МесяцНалоговогоПериода,
	|	НалогУдержанный.КодДохода,
	|	НалогУдержанный.Подразделение,
	|	НалогУдержанный.РегистрацияВНалоговомОргане,
	|	НалогУдержанный.ФизическоеЛицо,
	|	НалогУдержанный.ВключатьВДекларациюПоНалогуНаПрибыль";
	
	НалогУдержанный = Запрос.Выполнить().Выгрузить();
	БазаРаспределения = НалогУдержанный.СкопироватьКолонки();
	БазаРаспределения.Колонки.Добавить("НачислениеУдержание", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	
	Для каждого СтрокаТЗ Из НалогУдержанный Цикл
		Если СтрокаТЗ.Сумма <> 0 Тогда
			НоваяСтрока = БазаРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
		КонецЕсли;
		Если СтрокаТЗ.СуммаСПревышения <> 0 Тогда
			НоваяСтрока = БазаРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Сумма = СтрокаТЗ.СуммаСПревышения;
			НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения;
		КонецЕсли;
	КонецЦикла;
	
	ДанныхДляДополнения.БазаРаспределения = БазаРаспределения;
	
	ПоляОтбора = "ФизическоеЛицо,СтавкаНалогообложенияРезидента,МесяцНалоговогоПериода,
	|КодДохода,РегистрацияВНалоговомОргане,Подразделение,ВключатьВДекларациюПоНалогуНаПрибыль,
	|ДокументОснование,КатегорияДохода,НачислениеУдержание";
	
	ДанныхДляДополнения.БазаРаспределения.Индексы.Добавить(ПоляОтбора);
	ДанныхДляДополнения.ПоляОтбора = ПоляОтбора;
	
	Возврат ДанныхДляДополнения;

КонецФункции

// Возвращает результат распределения налога по статьям.
// Если в параметрах указан фильтр по финансированию, дополнительно будет выполнен
// отбор строк, соответствующих фильтру.
//
// Параметры:
//  НалогиКУдержанию - ТаблицаЗначений
//  ПараметрыРаспределения - Структура - описание см НовоеОписаниеПараметровРаспределенияНалогиКУдержанию.
//
// Возвращаемое значение:
//  ТаблицаЗначений - соответствует структуре таблицы НалогиКУдержанию, дополненную колонками:
//  	* СтатьяФинансирования
//  	* СтатьяРасходов.
//
Функция НалогиКУдержаниюПоСтатьям(НалогиКУдержанию, ПараметрыРаспределения) Экспорт

	Финансирование 			= ПараметрыРаспределения.Финансирование;
	ИсключаемыйРегистратор 	= ПараметрыРаспределения.ИсключаемыйРегистратор;
	УжеРаспределено 		= ПараметрыРаспределения.УжеРаспределено;
	ДатаОперации 			= ПараметрыРаспределения.ДатаОперации;
	ТаблицаВыплат 			= ПараметрыРаспределения.ТаблицаВыплат;
	
	НДФЛКРаспределению = НалогиКУдержанию.СкопироватьКолонки();
	НДФЛКРаспределению.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	НДФЛКРаспределению.Колонки.Удалить("СуммаСПревышения");
	Для каждого СтрокаТЗ Из НалогиКУдержанию Цикл
		Если СтрокаТЗ.Сумма <> 0 Тогда
			НоваяСтрока = НДФЛКРаспределению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Сумма = СтрокаТЗ.Сумма;
			НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
		КонецЕсли;
		Если СтрокаТЗ.СуммаСПревышения <> 0 Тогда
			НоваяСтрока = НДФЛКРаспределению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Сумма = СтрокаТЗ.СуммаСПревышения;
			НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения;
		КонецЕсли;
	КонецЦикла;
	
	ОтборФинансирование = Новый Структура;
	Для каждого Свойство Из Финансирование Цикл
		Если ЗначениеЗаполнено(Свойство.Значение) Тогда
			ОтборФинансирование.Вставить(Свойство.Ключ, Свойство.Значение);
		КонецЕсли;
	КонецЦикла;	
	
	ОснованияВыплат = ТаблицаВыплат.Скопировать(, "ФизическоеЛицо,ДокументОснование");
	ОснованияВыплат.Свернуть("ФизическоеЛицо,ДокументОснование");
	
	// Получение базы НДФЛ для распределения по статьям.
	// Колонки базы распределения: ФизическоеЛицо,Подразделение,ДокументОснование,ВидУдержания,КатегорияДохода,СтатьяФинансирования,СтатьяРасходов,Сумма.
	ТаблицаУсловийОтбораБазы = НДФЛКРаспределению.Скопировать(, "ФизическоеЛицо,ДокументОснование");
	ТаблицаУсловийОтбораБазы.Свернуть("ФизическоеЛицо,ДокументОснование");
	БазаРаспределения = ОтражениеЗарплатыВУчетеВнутренний.БазаРаспределенияНДФЛКУдержанию(ТаблицаУсловийОтбораБазы, ПараметрыРаспределения.НДФЛПоСотрудникам);
	
	КолонкиОтбораБазы = "ФизическоеЛицо,ДокументОснование,ВидУдержания";
	БазаРаспределения.Индексы.Добавить(КолонкиОтбораБазы);
	
	ОснованияНДФЛ = НДФЛКРаспределению.Скопировать(, КолонкиОтбораБазы);
	ОснованияНДФЛ.Свернуть(КолонкиОтбораБазы);
	
	ДополнительныйОтбораБазы = Новый Структура("Подразделение");
	Если ПараметрыРаспределения.НДФЛПоСотрудникам Тогда
		ДополнительныйОтбораБазы.Вставить("КатегорияДохода");
	КонецЕсли;
	
	КолонкиОтбораУжеУдержано = "";
	УжеУдержаноНДФЛ = Новый Массив;
	Если ЗначениеЗаполнено(ОтборФинансирование) Тогда
		
		// Получение сведений об уже удержанном НДФЛ по документам основаниям.
		КолонкиОтбораУжеУдержано = "ФизическоеЛицо,Подразделение,ДокументОснование,КатегорияДохода,
		|СтавкаНалогообложенияРезидента,КодДохода,РегистрацияВНалоговомОргане,ВключатьВДекларациюПоНалогуНаПрибыль";
		ТаблицаОтбораУжеУдержаноНДФЛ = НалогиКУдержанию.Скопировать(, КолонкиОтбораУжеУдержано);
		ТаблицаОтбораУжеУдержаноНДФЛ.Свернуть(КолонкиОтбораУжеУдержано);
		// Колонки УжеУдержаноНДФЛ: КолонкиОтбораУжеУдержано, Сумма, СуммаСПревышения.
		УжеУдержано = УчетНДФЛ.ЗарегистрированоНДФЛКПеречислениюПоДокументамОснованиям(ТаблицаОтбораУжеУдержаноНДФЛ, ИсключаемыйРегистратор, ДатаОперации);
		Если УжеРаспределено <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УжеРаспределено, УжеУдержано);
			УжеУдержано.Свернуть(КолонкиОтбораУжеУдержано, "Сумма,СуммаСПревышения");
		КонецЕсли;
		
		УжеУдержаноНДФЛ = УжеУдержано.СкопироватьКолонки();
		УжеУдержаноНДФЛ.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
		УжеУдержаноНДФЛ.Колонки.Удалить("СуммаСПревышения");
		Для каждого СтрокаТЗ Из УжеУдержано Цикл
			Если СтрокаТЗ.Сумма <> 0 Тогда
				НоваяСтрока = УжеУдержаноНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Сумма = СтрокаТЗ.Сумма;
				НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
			КонецЕсли;
			Если СтрокаТЗ.СуммаСПревышения <> 0 Тогда
				НоваяСтрока = УжеУдержаноНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Сумма = СтрокаТЗ.СуммаСПревышения;
				НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения;
			КонецЕсли;
		КонецЦикла;
		
		КолонкиОтбораУжеУдержано = КолонкиОтбораУжеУдержано + ",ВидУдержания";
		УжеУдержаноНДФЛ.Индексы.Добавить(КолонкиОтбораУжеУдержано);
		
	КонецЕсли;
	
	ТаблицаРаспределенияНДФЛ = НДФЛКРаспределению.СкопироватьКолонки();
	ТаблицаРаспределенияНДФЛ.Колонки.Добавить("СтатьяФинансирования", 	Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаРаспределенияНДФЛ.Колонки.Добавить("СтатьяРасходов", 		Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	
	ТаблицаРаспределения = Новый ТаблицаЗначений;
	ТаблицаРаспределения.Колонки.Добавить("СтатьяФинансирования", 	Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаРаспределения.Колонки.Добавить("СтатьяРасходов", 		Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ТаблицаРаспределения.Колонки.Добавить("Сумма", 					Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(13, 0)));
	
	ОтборФизическихЛиц 	= Новый Структура("ФизическоеЛицо");
	ОтборПоДокументу 	= Новый Структура("ФизическоеЛицо,ДокументОснование");
	ОтборБазы 			= Новый Структура(КолонкиОтбораБазы);
	ОтборУжеУдержано 	= Новый Структура(КолонкиОтбораУжеУдержано);
	
	ОснованияНДФЛ.Индексы.Добавить("ФизическоеЛицо");
	ОснованияВыплат.Индексы.Добавить("ФизическоеЛицо,ДокументОснование");
	
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ОснованияНДФЛ, "ФизическоеЛицо", Истина);
	Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		
		// Строки с документами основаниями.
		ОтборФизическихЛиц.ФизическоеЛицо = ФизическоеЛицо;
		ДокументыОснования = ОснованияНДФЛ.НайтиСтроки(ОтборФизическихЛиц);
		
		Для каждого СтрокаПоДокументу Из ДокументыОснования Цикл
			
			// Строки с основаниями выплат.
			ЗаполнитьЗначенияСвойств(ОтборПоДокументу, СтрокаПоДокументу);
			СтрокиОснованийВыплат = ОснованияВыплат.НайтиСтроки(ОтборПоДокументу);
			
			// Строки базы НДФЛ, отобранные по документу основанию и виду удержания.
			ЗаполнитьЗначенияСвойств(ОтборБазы, СтрокаПоДокументу);
			РаспределениеДокумента = БазаРаспределения.НайтиСтроки(ОтборБазы);
			
			// Строки НДФЛ к удержанию по документу основанию и виду удержания, которые необходимо распределить.
			СтрокиНДФЛ = НДФЛКРаспределению.НайтиСтроки(ОтборБазы);
			
			Если ЗначениеЗаполнено(ОтборФинансирование) И СтрокиОснованийВыплат.Количество() > 0 Тогда
				
				// Рассчитаем сумму Базы, соответствующую указанному финансированию.
				ИтогДокументаПоФинансированию = 0;
				Для Каждого СтрокаРаспределения Из РаспределениеДокумента Цикл
					
					СтрокаПодходит = Истина;
					Для каждого Отбор Из ОтборФинансирование Цикл
						Если ТипЗнч(Отбор.Значение) = Тип("Массив") Тогда
							СтрокаПодходит = Отбор.Значение.Найти(СтрокаРаспределения[Отбор.Ключ]) <> Неопределено;
						Иначе
							СтрокаПодходит = СтрокаРаспределения[Отбор.Ключ] = Отбор.Значение;
						КонецЕсли;	
						Если Не СтрокаПодходит Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если СтрокаПодходит Тогда
						ИтогДокументаПоФинансированию = ИтогДокументаПоФинансированию + СтрокаРаспределения.Сумма;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ИтогДокументаПоФинансированию <= 0 Тогда
					// По документу основанию нет НДФЛ с указанным финансированием,
					// или база отрицательная, пропускаем строки таблицы НДФЛ с этим документом основанием.
					Продолжить;
				КонецЕсли;
				
				Для каждого СтрокаНДФЛ Из СтрокиНДФЛ Цикл
					
					ТаблицаРаспределения.Очистить();
					ЗаполнитьЗначенияСвойств(ДополнительныйОтбораБазы, СтрокаНДФЛ);
					
					// Получим сумму НДФЛ, которая уже зарегистрирована как удержанная.
					УжеУдержано = 0;
					ЗаполнитьЗначенияСвойств(ОтборУжеУдержано, СтрокаНДФЛ);
					СтрокиУжеУдержано = УжеУдержаноНДФЛ.НайтиСтроки(ОтборУжеУдержано);
					Если СтрокиУжеУдержано.Количество() > 0 Тогда
						УжеУдержано = СтрокиУжеУдержано[0].Сумма;
					КонецЕсли;
					
					ИтогПоСтрокеНДФЛ = 0; 				// Сумма базы по Подразделение и КатегорияДохода. 
					ИтогСтрокиНДФЛПоФинансированию = 0; // Сумма базы по Подразделение и КатегорияДохода и заданному финансированию.
					СтрокиРаспределения = Новый Массив; // Строки базы, для распределения.
					Для каждого СтрокаРаспределения Из РаспределениеДокумента Цикл
						
						// Исключаем строки у которых не совпадают значения
						// дополнительного отбора: Подразделение, а для НДФЛ сотрудников еще и КатегорияДохода.
						СтрокаПодходит = Истина;
						Для каждого ЭлементКоллекции Из ДополнительныйОтбораБазы Цикл
							Если ЭлементКоллекции.Ключ = "КатегорияДохода" 
								И СтрокаРаспределения[ЭлементКоллекции.Ключ] = Перечисления.КатегорииДоходовНДФЛ.ДоходыПредыдущихРедакций Тогда
								// Учтем наличие "старых" данных в базе для распределения,
								// считаем, что эта строка подходит для распределения.
								Продолжить;
							КонецЕсли;
							Если СтрокаРаспределения[ЭлементКоллекции.Ключ] <> ЭлементКоллекции.Значение Тогда
								СтрокаПодходит = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если Не СтрокаПодходит Тогда
							Продолжить;
						КонецЕсли;
						
						ИтогПоСтрокеНДФЛ = ИтогПоСтрокеНДФЛ + СтрокаРаспределения.Сумма;
						
						СтрокаПодходит = Истина;
						Для каждого Отбор Из ОтборФинансирование Цикл
							Если ТипЗнч(Отбор.Значение) = Тип("Массив") Тогда
								СтрокаПодходит = Отбор.Значение.Найти(СтрокаРаспределения[Отбор.Ключ]) <> Неопределено;
							Иначе
								СтрокаПодходит = СтрокаРаспределения[Отбор.Ключ] = Отбор.Значение;
							КонецЕсли;	
							Если Не СтрокаПодходит Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если СтрокаПодходит Тогда
							ИтогСтрокиНДФЛПоФинансированию = ИтогСтрокиНДФЛПоФинансированию + СтрокаРаспределения.Сумма;
							СтрокиРаспределения.Добавить(СтрокаРаспределения);
						КонецЕсли;
						
					КонецЦикла;
					
					Если СтрокиРаспределения.Количество() = 0 Тогда
						// У строки НДФЛ нет указанного финансирования, пропускаем ее.
						Продолжить;
					КонецЕсли;
					
					Если ИтогСтрокиНДФЛПоФинансированию <> 0 И ИтогПоСтрокеНДФЛ <> 0 Тогда
						ПолнаяСуммаНДФЛ = СтрокаНДФЛ.Сумма + УжеУдержано;
						СуммаНДФЛСтроки = МИН(Окр(ПолнаяСуммаНДФЛ * ИтогСтрокиНДФЛПоФинансированию / ИтогПоСтрокеНДФЛ, 0), СтрокаНДФЛ.Сумма);
					Иначе
						// Строка не соответствует финансированию указанному в ведомости, пропускаем ее.
						Продолжить;
					КонецЕсли;
					
					Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
					РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СуммаНДФЛСтроки, Коэффициенты, 0);
					
					Если РаспределенныеСуммы = Неопределено Тогда
						// Нет данных по финансированию указанному в ведомости, пропускаем  строку.
						Продолжить;
					Иначе
						
						Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
							
							НоваяСтрока = ТаблицаРаспределения.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНДФЛ);
							
							СтрокаРаспределения = СтрокиРаспределения[Индекс];
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения, "СтатьяФинансирования,СтатьяРасходов");
							НоваяСтрока.Сумма = РаспределенныеСуммы[Индекс];
							
						КонецЦикла;
						
					КонецЕсли;
					
					Для каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
						НоваяСтрока = ТаблицаРаспределенияНДФЛ.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНДФЛ);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе
				
				Для каждого СтрокаНДФЛ Из СтрокиНДФЛ Цикл
					
					ТаблицаРаспределения.Очистить();
					ЗаполнитьЗначенияСвойств(ДополнительныйОтбораБазы, СтрокаНДФЛ);
					
					СтрокиРаспределения = Новый Массив; // Строки базы, для распределения.
					Для каждого СтрокаРаспределения Из РаспределениеДокумента Цикл
						
						// Исключаем строки у которых не совпадают значения
						// дополнительного отбора: Подразделение, а для НДФЛ сотрудников еще и КатегорияДохода.
						СтрокаПодходит = Истина;
						Для каждого ЭлементКоллекции Из ДополнительныйОтбораБазы Цикл
							Если ЭлементКоллекции.Ключ = "КатегорияДохода" 
								И СтрокаРаспределения[ЭлементКоллекции.Ключ] = Перечисления.КатегорииДоходовНДФЛ.ДоходыПредыдущихРедакций Тогда
								// Учтем наличие "старых" данных в базе для распределения,
								// считаем, что эта строка подходит для распределения.
								Продолжить;
							КонецЕсли;
							Если СтрокаРаспределения[ЭлементКоллекции.Ключ] <> ЭлементКоллекции.Значение Тогда
								СтрокаПодходит = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если Не СтрокаПодходит Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокиРаспределения.Добавить(СтрокаРаспределения);
						
					КонецЦикла;
					
					Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
					РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаНДФЛ.Сумма, Коэффициенты, 0);
					
					Если РаспределенныеСуммы = Неопределено Тогда
						НоваяСтрока = ТаблицаРаспределения.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНДФЛ);
					Иначе
						
						Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
							
							НоваяСтрока = ТаблицаРаспределения.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНДФЛ);
							
							СтрокаРаспределения = СтрокиРаспределения[Индекс];
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения, "СтатьяФинансирования,СтатьяРасходов");
							НоваяСтрока.Сумма = РаспределенныеСуммы[Индекс];
							
						КонецЦикла;
						
					КонецЕсли;
					
					Для каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
						НоваяСтрока = ТаблицаРаспределенияНДФЛ.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНДФЛ);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
					КонецЦикла;
					
				КонецЦикла; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; // Цикл по физическим лицам.
	
	НоваяТаблицаНДФЛ = НалогиКУдержанию.СкопироватьКолонки();
	НоваяТаблицаНДФЛ.Колонки.Добавить("СтатьяФинансирования", 	Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	НоваяТаблицаНДФЛ.Колонки.Добавить("СтатьяРасходов", 		Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Для каждого СтрокаТЗ Из ТаблицаРаспределенияНДФЛ Цикл
		НоваяСтрока = НоваяТаблицаНДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ, , "Сумма");
		Если СтрокаТЗ.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ Тогда
			НоваяСтрока.Сумма = СтрокаТЗ.Сумма;
		Иначе
			НоваяСтрока.СуммаСПревышения = СтрокаТЗ.Сумма;
		КонецЕсли;
	КонецЦикла;
	ТаблицаРаспределенияНДФЛ = Неопределено;
	
	// Свернем результат распределения.
	КолонкиГруппировки = 
	"ФизическоеЛицо,
	|МесяцНалоговогоПериода,
	|КатегорияДохода,
	|СтавкаНалогообложенияРезидента,
	|КодДохода,
	|Подразделение,
	|ДокументОснование,
	|РегистрацияВНалоговомОргане,
	|СтатьяФинансирования,
	|СтатьяРасходов";
	НоваяТаблицаНДФЛ.Свернуть(КолонкиГруппировки, "Сумма,СуммаСПревышения");
	НайденныеСтроки = НоваяТаблицаНДФЛ.НайтиСтроки(Новый Структура("Сумма,СуммаСПревышения",0,0));
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		НоваяТаблицаНДФЛ.Удалить(СтрокаТЗ);
	КонецЦикла;
	
	Возврат НоваяТаблицаНДФЛ;

КонецФункции

// Возвращает таблицу, в которой строки дополнены распределением по статьям.
//
// Параметры:
//  СведенияОДоходах - ТаблицаЗначений
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит таблицу ВТРаспределениеНачислений.
//
// Возвращаемое значение:
//  ТаблицаЗначений - соответствует структуре таблицы СведенияОДоходах.
//
Функция НовыеСведенияОДоходахДополненныеСтатьями(СведенияОДоходах, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СведенияОДоходах.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	ИдентификаторСтроки = 1;
	Для каждого СтрокаТЗ Из СведенияОДоходах Цикл
		СтрокаТЗ.ИдентификаторСтроки = ИдентификаторСтроки;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	НовыеСведенияОДоходах = СведенияОДоходах.СкопироватьКолонки();
	
	Запрос.УстановитьПараметр("СведенияОДоходах", СведенияОДоходах);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СведенияОДоходахНДФЛ.Период КАК Период,
	|	СведенияОДоходахНДФЛ.Организация КАК Организация,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.Начисление КАК Начисление,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Территория,
	|	СведенияОДоходахНДФЛ.Сотрудник КАК Сотрудник,
	|	СведенияОДоходахНДФЛ.ПодразделениеСотрудника КАК Подразделение,
	|	СведенияОДоходахНДФЛ.СуммаДохода КАК СуммаДохода,
	|	СведенияОДоходахНДФЛ.СуммаВычета КАК СуммаВычета
	|ПОМЕСТИТЬ ВТСведенияОДоходах
	|ИЗ
	|	&СведенияОДоходах КАК СведенияОДоходахНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеНачисленийВременная.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РаспределениеНачисленийВременная.Начисление КАК Начисление,
	|	РаспределениеНачисленийВременная.Территория КАК Территория,
	|	РаспределениеНачисленийВременная.Сотрудник КАК Сотрудник,
	|	РаспределениеНачисленийВременная.Подразделение КАК Подразделение,
	|	РаспределениеНачисленийВременная.СтатьяФинансирования КАК СтатьяФинансирования,
	|	РаспределениеНачисленийВременная.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(РаспределениеНачисленийВременная.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТРаспределениеНачисленийСвод
	|ИЗ
	|	ВТРаспределениеНачислений КАК РаспределениеНачисленийВременная
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеНачисленийВременная.СтатьяФинансирования,
	|	РаспределениеНачисленийВременная.Сотрудник,
	|	РаспределениеНачисленийВременная.Территория,
	|	РаспределениеНачисленийВременная.ФизическоеЛицо,
	|	РаспределениеНачисленийВременная.СтатьяРасходов,
	|	РаспределениеНачисленийВременная.Подразделение,
	|	РаспределениеНачисленийВременная.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходах.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СведенияОДоходах.СуммаДохода КАК СуммаДохода,
	|	СведенияОДоходах.СуммаВычета КАК СуммаВычета,
	|	РаспределениеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	РаспределениеНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	РаспределениеНачислений.Сумма КАК СуммаБУ
	|ПОМЕСТИТЬ ВТСтрокиКОбработке
	|ИЗ
	|	ВТСведенияОДоходах КАК СведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаспределениеНачисленийСвод КАК РаспределениеНачислений
	|		ПО СведенияОДоходах.ФизическоеЛицо = РаспределениеНачислений.ФизическоеЛицо
	|			И СведенияОДоходах.Начисление = РаспределениеНачислений.Начисление
	|			И СведенияОДоходах.Территория = РаспределениеНачислений.Территория
	|			И СведенияОДоходах.Сотрудник = РаспределениеНачислений.Сотрудник
	|			И СведенияОДоходах.Подразделение = РаспределениеНачислений.Подразделение
	|			И (РаспределениеНачислений.Сумма <> 0)
	|ГДЕ
	|	НЕ(СведенияОДоходах.СуммаДохода = 0
	|				И СведенияОДоходах.СуммаВычета = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходах.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СведенияОДоходах.Период КАК Период,
	|	СведенияОДоходах.Организация КАК Организация,
	|	СведенияОДоходах.Сотрудник КАК Сотрудник,
	|	СведенияОДоходах.Начисление КАК Начисление,
	|	СведенияОДоходах.Подразделение КАК Подразделение,
	|	СведенияОДоходах.Территория КАК ТерриторияВыполненияРаботВОрганизации,
	|	СведенияОДоходах.СуммаДохода КАК СуммаДохода,
	|	СведенияОДоходах.СуммаВычета КАК СуммаВычета
	|ПОМЕСТИТЬ ВТСтрокиБезБазы
	|ИЗ
	|	ВТСведенияОДоходах КАК СведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиКОбработке КАК СтрокиКОбработке
	|		ПО СведенияОДоходах.ИдентификаторСтроки = СтрокиКОбработке.ИдентификаторСтроки
	|ГДЕ
	|	СтрокиКОбработке.ИдентификаторСтроки ЕСТЬ NULL
	|	И НЕ(СведенияОДоходах.СуммаДохода = 0
	|				И СведенияОДоходах.СуммаВычета = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиБезБазы.Период КАК Период,
	|	СотрудникиБезБазы.Организация КАК Организация,
	|	СотрудникиБезБазы.Сотрудник КАК Сотрудник,
	|	СотрудникиБезБазы.Подразделение КАК Подразделение,
	|	СотрудникиБезБазы.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации
	|ПОМЕСТИТЬ ВТСотрудникиБезБазы
	|ИЗ
	|	ВТСтрокиБезБазы КАК СотрудникиБезБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиКОбработке.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СтрокиКОбработке.СуммаДохода КАК СуммаДохода,
	|	СтрокиКОбработке.СуммаВычета КАК СуммаВычета,
	|	СтрокиКОбработке.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СтрокиКОбработке.СтатьяРасходов КАК СтатьяРасходов,
	|	СтрокиКОбработке.СуммаБУ КАК СуммаБУ
	|ИЗ
	|	ВТСтрокиКОбработке КАК СтрокиКОбработке
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СотрудникиБезБазы.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	ВТСтрокиБезБазы КАК СотрудникиБезБазы";
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результат.ВГраница();
	
	РезультатРаспределения = Новый ТаблицаЗначений;
	РезультатРаспределения.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	РезультатРаспределения.Колонки.Добавить("СуммаДохода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РезультатРаспределения.Колонки.Добавить("СуммаВычета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РезультатРаспределения.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	РезультатРаспределения.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	
	// обработка строк, не имеющих базу
	Если Не Результат[КоличествоРезультатов].Пустой() Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
			
			ОтражениеЗарплатыВБухучете.СоздатьВТСведенияОБухучетеЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиБезБазы");
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтрокиБезБазы.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	СведенияОБухучете.СтатьяФинансирования КАК СтатьяФинансирования,
			|	СведенияОБухучете.СтатьяРасходов КАК СтатьяРасходов,
			|	СтрокиБезБазы.СуммаДохода КАК СуммаДохода,
			|	СтрокиБезБазы.СуммаВычета КАК СуммаВычета
			|ИЗ
			|	ВТСтрокиБезБазы КАК СтрокиБезБазы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОБухучетеЗарплатыСотрудников КАК СведенияОБухучете
			|		ПО СтрокиБезБазы.Сотрудник = СведенияОБухучете.Сотрудник
			|			И СтрокиБезБазы.Период = СведенияОБухучете.Период
			|			И СтрокиБезБазы.Подразделение = СведенияОБухучете.Подразделение
			|			И СтрокиБезБазы.ТерриторияВыполненияРаботВОрганизации = СведенияОБухучете.ТерриторияВыполненияРаботВОрганизации
			|			И СтрокиБезБазы.Организация = СведенияОБухучете.Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИдентификаторСтроки";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(РезультатРаспределения.Добавить(), Выборка);
			КонецЦикла;
			
		Иначе
			
			НачислениеУдержаниеВидОперации = НачислениеУдержаниеВидОперации();
			ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
			РасчетыПоОплатеТруда = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
			Запрос.УстановитьПараметр("РасчетыПоОплатеТруда", РасчетыПоОплатеТруда);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтрокиБезБазы.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	СтрокиБезБазы.Начисление КАК Начисление,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	&РасчетыПоОплатеТруда КАК СтатьяРасходов,
			|	СтрокиБезБазы.СуммаДохода КАК СуммаДохода,
			|	СтрокиБезБазы.СуммаВычета КАК СуммаВычета
			|ИЗ
			|	ВТСтрокиБезБазы КАК СтрокиБезБазы
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИдентификаторСтроки";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = РезультатРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				ВидОперации = НачислениеУдержаниеВидОперации[Выборка.Начисление];
				Если ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Дивиденды Тогда
					НоваяСтрока.СтатьяРасходов = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.Дивиденды];
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам 
					Или ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов Тогда
					НоваяСтрока.СтатьяРасходов = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// обработка строк, имеющих базу
	Выборка = Результат[КоличествоРезультатов-1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		
		СуммаДохода = Выборка.СуммаДохода;
		СуммаВычета = Выборка.СуммаВычета;
		
		Коэффициенты = Новый Массив;
		СтатьиФинансирования = Новый Массив;
		СтатьиРасходов = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			Коэффициенты.Добавить(Выборка.СуммаБУ);
			СтатьиФинансирования.Добавить(Выборка.СтатьяФинансирования);
			СтатьиРасходов.Добавить(Выборка.СтатьяРасходов);
		КонецЦикла;
		
		Если Коэффициенты.Количество() = 1 Тогда
			
			НоваяСтрока = РезультатРаспределения.Добавить();
			НоваяСтрока.ИдентификаторСтроки  = Выборка.ИдентификаторСтроки;
			НоваяСтрока.СтатьяФинансирования = СтатьиФинансирования[0];
			НоваяСтрока.СтатьяРасходов 		 = СтатьиРасходов[0];
			НоваяСтрока.СуммаДохода 		 = СуммаДохода;
			НоваяСтрока.СуммаВычета 		 = СуммаВычета;
			
		Иначе
			
			Если СуммаДохода <> 0 Тогда
				РаспределенныеСуммыДохода = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СуммаДохода, Коэффициенты);
			КонецЕсли;
			Если СуммаВычета <> 0 Тогда
				РаспределенныеСуммыВычета = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СуммаВычета, Коэффициенты);	
			КонецЕсли;
			
			Для Индекс = 0 По Коэффициенты.ВГраница() Цикл
				НоваяСтрока = РезультатРаспределения.Добавить();
				НоваяСтрока.ИдентификаторСтроки  = Выборка.ИдентификаторСтроки;
				НоваяСтрока.СтатьяФинансирования = СтатьиФинансирования[Индекс];
				НоваяСтрока.СтатьяРасходов 		 = СтатьиРасходов[Индекс];
				НоваяСтрока.СуммаДохода 		 = ?(СуммаДохода = 0, 0 , РаспределенныеСуммыДохода[Индекс]);
				НоваяСтрока.СуммаВычета 		 = ?(СуммаВычета = 0, 0 , РаспределенныеСуммыВычета[Индекс]);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	

	Если РезультатРаспределения.Количество() > 0 Тогда
		
		РезультатРаспределения.Индексы.Добавить("ИдентификаторСтроки");
		Отбор = Новый Структура("ИдентификаторСтроки");
		
		Для каждого СтрокаДоходов Из СведенияОДоходах Цикл
			
			Отбор.ИдентификаторСтроки = СтрокаДоходов.ИдентификаторСтроки;
			СтрокиРаспределения = РезультатРаспределения.НайтиСтроки(Отбор);
			Если СтрокиРаспределения.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(НовыеСведенияОДоходах.Добавить(), СтрокаДоходов);
			Иначе	
				Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
					НоваяСтрока = НовыеСведенияОДоходах.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоходов);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыеСведенияОДоходах;

КонецФункции 

// Возвращает таблицу, в которой строки дополнены распределением по статьям.
//
// Параметры:
//  НаборЗаписей - НаборЗаписей - набор записей, которые необходимо распределить по статьям.
//  БазаРаспределения - ТаблицаЗначений - содержит базу для распределения по статьям.
//  ПоляОтбора - Строка - список полей, по которым выполняется поиск базовых значений.
//  КолонкиСтатей - Строка - список полей, которые заполняются.
//
// Возвращаемое значение:
//  ТаблицаЗначений - соответствует структуре переданного набора записей.
//
Функция ТаблицаНДФЛДополненнаяСтатьями(НаборЗаписей, БазаРаспределения, ПоляОтбора, КолонкиСтатей) Экспорт

	НоваяТаблицаНДФЛ = НаборЗаписей.ВыгрузитьКолонки();
	
	Отбор = Новый Структура(ПоляОтбора);
	СвойстваИсключения = "Сумма,СуммаСПревышения";
	
	Для каждого СтрокаДвижений Из НаборЗаписей Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаДвижений);
		Для Сч = 1 По 2 Цикл
			
			ИмяПоляСумма = ?(Сч = 1, "Сумма", "СуммаСПревышения");
			ВидыУдержаний = ?(Сч = 1, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения);
			
			Отбор.НачислениеУдержание = ВидыУдержаний;
			
			СтрокиРаспределения = БазаРаспределения.НайтиСтроки(Отбор);
			Если СтрокиРаспределения.Количество() = 1 Тогда
				
				НоваяСтрока = НоваяТаблицаНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижений, , СвойстваИсключения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0], КолонкиСтатей);
				НоваяСтрока[ИмяПоляСумма] = СтрокаДвижений[ИмяПоляСумма];
				
			ИначеЕсли СтрокиРаспределения.Количество() > 1 Тогда
				
				// Распределяем пропорционально суммам в найденных строках.
				Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
				// распределяем суммы с учетом ранее удержанного
				РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаДвижений[ИмяПоляСумма], Коэффициенты, 0);
				
				Если РаспределенныеСуммы <> Неопределено Тогда
					
					Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
						
						СтрокаРаспределения = СтрокиРаспределения[Индекс];
						НоваяСтрока = НоваяТаблицаНДФЛ.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижений, , СвойстваИсключения);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения, КолонкиСтатей);
						НоваяСтрока[ИмяПоляСумма] = РаспределенныеСуммы[Индекс];
						
					КонецЦикла;
					
				Иначе
					
					НоваяСтрока = НоваяТаблицаНДФЛ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижений, , СвойстваИсключения);
					НоваяСтрока[ИмяПоляСумма] = СтрокаДвижений[ИмяПоляСумма];
					
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока = НоваяТаблицаНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижений, , СвойстваИсключения);
				НоваяСтрока[ИмяПоляСумма] = СтрокаДвижений[ИмяПоляСумма];
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СвернутьТаблицу(НоваяТаблицаНДФЛ);
	
	Возврат НоваяТаблицаНДФЛ;
	
КонецФункции

#КонецОбласти

#Область ПрочиеАлгоритмы

Процедура СоздатьВТНачислениеУдержаниеВидОперации(МенеджерВременныхТаблиц) Экспорт
	
	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТНачислениеУдержаниеВидОперации") Тогда
		Возврат;
	КонецЕсли;   
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачислениеУдержаниеВидОперации", ОтражениеЗарплатыВУчетеПовтИсп.ТаблицаНачислениеУдержаниеВидОперации());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеУдержаниеВидОперации.НачислениеУдержание КАК НачислениеУдержание,
	|	НачислениеУдержаниеВидОперации.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ВТНачислениеУдержаниеВидОперации
	|ИЗ
	|	&НачислениеУдержаниеВидОперации КАК НачислениеУдержаниеВидОперации";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция НачислениеУдержаниеВидОперации() Экспорт
	
	НачислениеУдержаниеВидОперации = Новый Соответствие;
	
	Таблица = ОтражениеЗарплатыВУчетеПовтИсп.ТаблицаНачислениеУдержаниеВидОперации();
	Для каждого СтрокаТЗ Из Таблица Цикл
		НачислениеУдержаниеВидОперации.Вставить(СтрокаТЗ.НачислениеУдержание, СтрокаТЗ.ВидОперации);
	КонецЦикла;
	
	Возврат НачислениеУдержаниеВидОперации;
	
КонецФункции

Функция ТаблицаНачислениеУдержаниеВидОперации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОсобыхНачислений.Ссылка КАК НачислениеУдержание,
	|	ВидыОперацийПоЗарплате.Ссылка КАК ВидОперации
	|ИЗ
	|	Перечисление.ВидыОсобыхНачисленийИУдержаний КАК ВидыОсобыхНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ВидыОперацийПоЗарплате КАК ВидыОперацийПоЗарплате
	|		ПО (ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДоговорАвторскогоЗаказа)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПособиеНаПогребение)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.Дивиденды)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.Дивиденды)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДивидендыСотрудников)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДивидендыСотрудников)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛ)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛСПревышения)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НФДЛДивиденды)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НФДЛДивиденды)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НФДЛДивидендыСотрудникам)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НФДЛДивидендыСотрудникам)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛДоначисленныйПоРезультатамПроверки)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛДоначисленныйПоРезультатамПроверки)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛПередачаЗадолженностиВНалоговыйОрган)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛПередачаЗадолженностиВНалоговыйОрган)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛПрочиеРасчетыСПерсоналом)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛДоходыКонтрагентов)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛРасчетыСБывшимиСотрудниками)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПогашениеЗаймаИзЗарплаты)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПогашениеЗаймов)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПроцентыПоЗайму)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПроцентыПоЗайму)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НатуральныйДоход)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НачисленоПроцентовПоЗайму)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДСВРаботодателя)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДСВ)
	|				ИЛИ ВидыОсобыхНачислений.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты)
	|					И ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.КомпенсацияЗаЗадержкуЗарплаты))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокНачислений.Ссылка,
	|	СписокНачислений.ВидОперацииПоЗарплате
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК СписокНачислений
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.Ссылка,
	|	Удержания.ВидОперацииПоЗарплате
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	ОтражениеЗарплатыВУчетеВнутренний.ДополнитьТаблицуНачислениеУдержаниеВидОперации(Таблица);
	
	Возврат Таблица;   
	
КонецФункции

Функция ВидыОсобыхНачисленийИУдержанийНДФЛ(ТолькоОтражаемыеВБухучете = Ложь) Экспорт
	
	НДФЛ = Новый Массив;
	НДФЛ.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	НДФЛ.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения);
	НДФЛ.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛДоначисленныйПоРезультатамПроверки);
	НДФЛ.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛПередачаЗадолженностиВНалоговыйОрган);
	НДФЛ.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛПрочиеРасчетыСПерсоналом);
	НДФЛ.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛДоходыКонтрагентов);
	НДФЛ.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛРасчетыСБывшимиСотрудниками);
	НДФЛ.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НФДЛДивиденды);
	НДФЛ.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НФДЛДивидендыСотрудникам);
	
	Если Не ТолькоОтражаемыеВБухучете Тогда
		НДФЛ.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету);
		НДФЛ.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено);
	КонецЕсли;
	
	Возврат НДФЛ;
	
КонецФункции

Процедура ДобавитьКолонкуИдентификаторСтроки(Таблица, ЗаполнитьИдентификаторСтроки = Ложь, НомерПервойСтроки = 1) Экспорт
	
	Если Таблица.Колонки.Найти("ИдентификаторСтроки") = Неопределено Тогда
		Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
		ЗаполнитьКолонкуИдентификаторСтроки(Таблица, НомерПервойСтроки);
	ИначеЕсли ЗаполнитьИдентификаторСтроки Тогда
		// Колонка есть, установим новые идентификаторы строк.
		ЗаполнитьКолонкуИдентификаторСтроки(Таблица, НомерПервойСтроки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкуИдентификаторСтроки(Таблица, НомерПервойСтроки = 1) Экспорт
	
	ИдентификаторСтроки = НомерПервойСтроки;
	Для каждого Строка Из Таблица Цикл
		Строка.ИдентификаторСтроки = ИдентификаторСтроки;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкиСторно(Таблица) Экспорт
	
	Если Таблица.Колонки.Найти("Сторно") = Неопределено Тогда
		Таблица.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если Таблица.Колонки.Найти("ФиксСторно") = Неопределено Тогда
		Таблица.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает соответствие видов операций и статей расходов.
// 
// Возвращаемое значение - соответствие
//		Ключ - ПеречислениеСсылка.СпособыРасчетовСФизическимиЛицами
//		Значение - СправочникСсылка.СтатьиРасходовЗарплата
//
Функция СтатьиРасходовПоВидуОперации() Экспорт

	СтатьиРасходовПоВидуОперации = Новый Соответствие;
	СтатьиРасходовПоСпособамРасчетов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 		= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	СтатьяРасчетыСКонтрагентами 	= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
	СтатьяПрочиеРасчетыСПерсоналом 	= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ПрочиеРасчетыСПерсоналом];
	СтатьяДивиденды 				= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.Дивиденды];
	Для каждого ВидОперации Из Перечисления.ВидыОперацийПоЗарплате Цикл
		
		СтатьяРасходов = СтатьяРасчетыПоОплатеТруда;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛистыКонтрагенты Тогда
			СтатьяРасходов = СтатьяРасчетыСКонтрагентами;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгентаКонтрагенты Тогда
			СтатьяРасходов = СтатьяРасчетыСКонтрагентами;	
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам Тогда
			СтатьяРасходов = СтатьяРасчетыСКонтрагентами;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов Тогда
			СтатьяРасходов = СтатьяРасчетыСКонтрагентами;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов Тогда
			СтатьяРасходов = СтатьяРасчетыСКонтрагентами;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками Тогда
			СтатьяРасходов = СтатьяРасчетыСКонтрагентами;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПособиеНаПогребение Тогда
			СтатьяРасходов = СтатьяРасчетыСКонтрагентами;	
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Дивиденды Тогда
			СтатьяРасходов = СтатьяДивиденды;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НФДЛДивиденды Тогда
			СтатьяРасходов = СтатьяДивиденды;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПрочиеРасчетыСПерсоналом Тогда
			СтатьяРасходов = СтатьяПрочиеРасчетыСПерсоналом;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом Тогда
			СтатьяРасходов = СтатьяПрочиеРасчетыСПерсоналом;	
		КонецЕсли;
		
		СтатьиРасходовПоВидуОперации.Вставить(ВидОперации, СтатьяРасходов);
	
	КонецЦикла;
	
	Возврат СтатьиРасходовПоВидуОперации;

КонецФункции

Функция ТипыПоляПервичныйРегистратор() Экспорт

	Возврат ОтражениеЗарплатыВУчетеВнутренний.ТипыПоляПервичныйРегистратор();

КонецФункции

// Выполняет распределение удержаний, НДФЛ по рабочим местам и статьям по базе по умолчанию.
//
// Параметры:
//  РезультатыРаспределения - ТаблицаЗначений - см НоваяТаблицаРаспределениеРезультатовУдержаний().
//  СтрокиУдержаний - ТаблицаЗначений, Массив - коллекция строк таблицы значений, для распределения,
//  	обязательные колонки:
//  	* ИдентификаторСтроки
//  	* Сотрудник
//  	* ФизическоеЛицо
//  	* ВидУдержания
//  	* Сумма
//  	* Подразделение
//  	* ДокументОснование
//	Организация - СправочникСсылка.Организации.
//	ПериодРегистрации - Дата
//	УчитыватьПолеСотрудник - Булево.
//
Процедура РаспределитьУдержанияПоБазеПоУмолчанию(РезультатыРаспределения, СтрокиУдержаний, Организация, ПериодРегистрации, УточнятьБазуПоСотруднику = Ложь) Экспорт

	// Массив физических лиц, данные которых еще не распределились.
	МассивФизическихЛиц = Новый Массив;
	Для Каждого СтрокаУдержаний Из СтрокиУдержаний Цикл
		Если МассивФизическихЛиц.Найти(СтрокаУдержаний.ФизическоеЛицо) = Неопределено Тогда
			МассивФизическихЛиц.Добавить(СтрокаУдержаний.ФизическоеЛицо);
		КонецЕсли
	КонецЦикла;
	
	// Описание таблицы базы см РасчетЗарплаты.НоваяТаблицаБазаУдержанийПоУмолчанию.
	БазаПоУмолчанию = РасчетЗарплаты.БазаУдержанийПоУмолчанию(МассивФизическихЛиц, ПериодРегистрации, Организация);
	ОтражениеЗарплатыВУчетеВнутренний.ДополнитьБазуУдержанийПоУмолчаниюСтатьями(БазаПоУмолчанию, Организация, ПериодРегистрации);
	БазаПоУмолчанию.Колонки.Добавить("ВидДоходаИсполнительногоПроизводства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства"));
	БазаПоУмолчанию.ЗаполнитьЗначения(Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения, "ВидДоходаИсполнительногоПроизводства");
	БазаПоУмолчанию.Индексы.Добавить("ФизическоеЛицо");
	
	УдержанияТочностьОкругления = УдержанияТочностьОкругленияПриРаспределении();
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо");
	Для Каждого СтрокаУдержаний Из СтрокиУдержаний Цикл
		
		ОтборСтрок.ФизическоеЛицо = СтрокаУдержаний.ФизическоеЛицо;
		СтрокиРаспределения = БазаПоУмолчанию.НайтиСтроки(ОтборСтрок);
		
		Если УточнятьБазуПоСотруднику Тогда
			
			СтрокиРаспределенияСУчетомОсновногоСотрудника  = Новый Массив;
			СтрокиРаспределенияБезУчетаОсновногоСотрудника = Новый Массив;
			Для Каждого СтрокаБазыПоФизическомуЛицу Из СтрокиРаспределения Цикл
				СтрокиРаспределенияБезУчетаОсновногоСотрудника.Добавить(СтрокаБазыПоФизическомуЛицу);
				Если ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) 
					И СтрокаУдержаний.Сотрудник = СтрокаБазыПоФизическомуЛицу.ГоловнойСотрудник Тогда
					СтрокиРаспределенияСУчетомОсновногоСотрудника.Добавить(СтрокаБазыПоФизическомуЛицу);
				КонецЕсли;
			КонецЦикла;
			
			СтрокиРаспределения = СтрокиРаспределенияСУчетомОсновногоСотрудника;
			Если СтрокиРаспределения.Количество() = 0 Тогда
				СтрокиРаспределения = СтрокиРаспределенияБезУчетаОсновногоСотрудника;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокиРаспределения.Количество() = 0 Тогда
			НоваяСтрока = РезультатыРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			НоваяСтрока.Результат = СтрокаУдержаний.Сумма;
		ИначеЕсли СтрокиРаспределения.Количество() = 1 Тогда
			НоваяСтрока = РезультатыРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			НоваяСтрока.ВидУдержания        = СтрокаУдержаний.ВидУдержания;
			НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
			НоваяСтрока.Результат = СтрокаУдержаний.Сумма;
		Иначе
			
			ТочностьОкругления = УдержанияТочностьОкругления[СтрокаУдержаний.ВидУдержания];
			Если ТочностьОкругления = Неопределено Тогда
				ТочностьОкругления = 2;
			КонецЕсли;
			
			// Распределяем пропорционально суммам в найденных строках.
			Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
			// распределяем суммы с учетом ранее удержанного
			РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаУдержаний.Сумма, Коэффициенты, ТочностьОкругления);
			
			Если РаспределенныеСуммы <> Неопределено Тогда
				
				// добавляем распределенные суммы
				Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
					
					Если РаспределенныеСуммы[Индекс] = 0 Тогда
						Продолжить;
					КонецЕсли;	
					
					СтрокаРаспределения = СтрокиРаспределения[Индекс];
					НоваяСтрока = РезультатыРаспределения.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
					
					НоваяСтрока.ВидУдержания        = СтрокаУдержаний.ВидУдержания;
					НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
					НоваяСтрока.Результат           = РаспределенныеСуммы[Индекс];
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока = РезультатыРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
				
				НоваяСтрока.ВидУдержания        = СтрокаУдержаний.ВидУдержания;
				НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
				НоваяСтрока.Результат           = СтрокаУдержаний.Сумма;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сворачивает переданную таблицу значений.
//
// Параметры
//		Таблица - ТаблицаЗначений.
//
Процедура СвернутьТаблицу(Таблица) Экспорт
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиГруппировок  = Новый Массив;
	КолонкиСуммирования = Новый Массив;
	Для каждого КолонкаТЗ Из Таблица.Колонки Цикл
		Если КолонкаТЗ.ТипЗначения.СодержитТип(Тип("Число")) И Не ВРег(КолонкаТЗ.Имя) = "ИДЕНТИФИКАТОРСТРОКИ" Тогда
			КолонкиСуммирования.Добавить(КолонкаТЗ.Имя);
		Иначе
			КолонкиГруппировок.Добавить(КолонкаТЗ.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если КолонкиСуммирования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиСуммирования = СтрСоединить(КолонкиСуммирования, ", ");
	КолонкиГруппировок = СтрСоединить(КолонкиГруппировок, ", ");
	
	Таблица.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	Отбор = Новый Структура(КолонкиСуммирования);
	Для каждого ЭлементКоллекции Из Отбор Цикл
		Отбор[ЭлементКоллекции.Ключ] = 0;
	КонецЦикла;
	
	НулевыеСтроки = Таблица.НайтиСтроки(Отбор);
	Для каждого УдаляемаяСтрока Из НулевыеСтроки Цикл
		Таблица.Удалить(УдаляемаяСтрока);
	КонецЦикла;

КонецПроцедуры

// Возвращает соответствие, в котором строки таблицы значений "разложены" по физическим лицам.
//
// Параметры:
//  ТаблицаФизическихЛиц - ТаблицаЗначений.
//
// Возвращаемое значение:
//  Соответствие
// 	* Ключ - СправочникСсылка.ФизическиеЛица
// 	* Значение - Массив - массив строк таблицы значений, соответствующих физическому лицу.
//
Функция СтрокиТаблицыЗначенийПоФизическимЛицам(ТаблицаФизическихЛиц) Экспорт

	СтрокиТаблицыПоФизическимЛицам = Новый Соответствие;
	Если ТаблицаФизическихЛиц <> Неопределено Тогда
		Для Каждого Строка Из ТаблицаФизическихЛиц Цикл
			СтрокиПоФизическомуЛицу = СтрокиТаблицыПоФизическимЛицам[Строка.ФизическоеЛицо];
			Если СтрокиПоФизическомуЛицу = Неопределено Тогда
				СтрокиПоФизическомуЛицу = Новый Массив;
			КонецЕсли;
			СтрокиПоФизическомуЛицу.Добавить(Строка);
			СтрокиТаблицыПоФизическимЛицам.Вставить(Строка.ФизическоеЛицо, СтрокиПоФизическомуЛицу);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрокиТаблицыПоФизическимЛицам;

КонецФункции


#КонецОбласти

#Область КонструкторыСлужебногоПрограммногоИнтерфейса

// Возвращает структуру с описание параметров
// для регистрации результатов расчетов в учете начисленной зарплаты и в бухучете.
//
// Возвращаемое значение - Структура
//
Функция ОписаниеДанныеДляПроведения() Экспорт
	
	ДанныеДляПроведения = Новый Структура("
	|Движения,
	|МенеджерВременныхТаблиц,
	|Организация,
	|ПериодРегистрации,
	|ПорядокВыплаты,
	|Авансом,
	|ОкончательныйРасчет,
	|ДниОтпускаАвансом,
	|ВыплатитьКакАванс");
	
	// Признак расчета первой половины месяца.
	ДанныеДляПроведения.Авансом = Ложь;
	
	// Признак того, что для межрасчетной выплаты НДФЛ будет удержан при выплате зарплаты. 
	ДанныеДляПроведения.ВыплатитьКакАванс = Ложь;
	
	// Используется при распределения удержаний и НДФЛ.
	// Признак того, что надо учитывать все начисления.
	ДанныеДляПроведения.ОкончательныйРасчет = Ложь;
	
	// Дни отпуска авансом в разрезе видов расчета.
	ДанныеДляПроведения.ДниОтпускаАвансом = НоваяТаблицаДнейОтпускаАвансом();
	
	ДанныеДляПроведения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция НоваяТаблицаДнейОтпускаАвансом() Экспорт 
	
	ДниОтпускаАвансом = Новый ТаблицаЗначений;
	ДниОтпускаАвансом.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ДниОтпускаАвансом.Колонки.Добавить("КоличествоДнейАвансом", Новый ОписаниеТипов("Число"));
	ДниОтпускаАвансом.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	
	Возврат ДниОтпускаАвансом;
	
КонецФункции

// Создает пустую таблицу значений.
//
// Возвращаемое значение:
//		ТаблицаЗначений.
//
Функция НоваяТаблицаРезультатРасчетаУдержаний() Экспорт
	
	МассивТиповВидУдержания = Новый Массив;
	МассивТиповВидУдержания.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповВидУдержания.Добавить(Тип("ПланВидовРасчетаСсылка.Удержания"));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Сотрудник",  			Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение",  		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ВидУдержания", 		Новый ОписаниеТипов(МассивТиповВидУдержания));
	Таблица.Колонки.Добавить("ДокументОснование", 	Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип));
	Таблица.Колонки.Добавить("ПлатежныйАгент", 		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("Получатель", 			Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("ДатаНачала", 			Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Таблица.Колонки.Добавить("ДатаОкончания", 		Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Таблица.Колонки.Добавить("Сумма", 				Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	
	Возврат Таблица;

КонецФункции

// Создает пустую таблицу значений.
//
// Возвращаемое значение:
//		ТаблицаЗначений.
//
Функция НоваяТаблицаРаспределениеРезультатовУдержаний() Экспорт
	
	МассивТиповВидУдержания = Новый Массив;
	МассивТиповВидУдержания.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповВидУдержания.Добавить(Тип("ПланВидовРасчетаСсылка.Удержания"));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Таблица.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов(МассивТиповВидУдержания));
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ПодразделениеУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("ВидДоходаИсполнительногоПроизводства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства"));
	Таблица.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("КодСтатьиФинансирования", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(3)));

	Возврат Таблица;
	
КонецФункции

// Создает пустую таблицу значений.
//
// Возвращаемое значение:
//		ТаблицаЗначений.
//
Функция НоваяТаблицаРезультатРасчетаНДФЛ() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ДатаПолученияДохода", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Территория", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	Таблица.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	
	Возврат Таблица;

КонецФункции

// Создает пустую таблицу значений.
//
// Возвращаемое значение:
//		ТаблицаЗначений.
//
Функция НоваяТаблицаКорректировкиВыплаты() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	// колонка для совместимости
	Таблица.Колонки.Добавить("ДатаПолученияДохода", Новый ОписаниеТипов("Дата"));
	
	Возврат Таблица;

КонецФункции

// Возвращает структуру с описанием параметров для распределения НДФЛ по рабочим местам и статьям.
//
// Возвращаемое значение:
//  Структура - Ключ содержит имя параметра.
//
Функция НовоеОписаниеПараметровРаспределенияНДФЛ() Экспорт

	ПараметрыРаспределения = Новый Структура("
	|МенеджерВременныхТаблиц,
	|Организация,
	|ПериодРегистрации,
	|МассивФизическихЛиц,
	|МассивУдержаний,
	|ИсключаемыйРегистратор,
	|ОкончательныйРасчет,
	|РегистраторыНДФЛОбновленияБухучета,
	|ИмяВТДанныеТекущегоДокумента");
	
	Возврат ПараметрыРаспределения;

КонецФункции

// Возвращает структуру с описанием параметров для получения данных при распределении
// удержаний по рабочим местам и статьям.
//
// Возвращаемое значение:
//		Структура - Ключ содержит имя параметра.
//
Функция НовоеОписаниеПараметровПолученияДанныхДляРаспределенияУдержаний() Экспорт

	ПолученияДанных = Новый Структура("
	|МенеджерВременныхТаблиц,
	|Организация,
	|ПериодРегистрации,
	|ОкончательныйРасчет,
	|ИмяВТДанныеТекущегоДокумента,
	|РегистраторыУдержанийОбновленияБухучета");
	
	Возврат ПолученияДанных;

КонецФункции

// Возвращает структуру с описанием параметров для распределения удержаний по рабочим местам и статьям.
//
// Возвращаемое значение:
//		Структура - Ключ содержит имя параметра.
//
Функция НовоеОписаниеПараметровРаспределенияУдержаний() Экспорт

	ПолученияРаспределения = Новый Структура("
	|Организация,
	|ПериодРегистрации,
	|БазовыеВидыРасчета,
	|УчитыватьЗнакБазовыхЗначений");
	
	ПолученияРаспределения.БазовыеВидыРасчета = Неопределено;
	ПолученияРаспределения.УчитыватьЗнакБазовыхЗначений = Ложь;
	
	Возврат ПолученияРаспределения;

КонецФункции

// Возвращает структуру с описанием параметров для дополнения удержанного НДФЛ статьями.
//
// Возвращаемое значение:
//		Структура - Ключ содержит имя параметра.
//
Функция НовоеОписаниеПараметровДополненияНДФЛСтатьями() Экспорт

	ДанныхДляДополнения = Новый Структура("БазаРаспределения,ПоляОтбора", Новый Массив, "");
	Возврат ДанныхДляДополнения;

КонецФункции

// Возвращает структуру с описанием параметров для распределения удержанного НДФЛ по статьям.
//
// Возвращаемое значение:
//  Структура:
//     * Финансирование - Структура - фильтр по финансированию:
//        ** СтатьяФинансирования                 - СправочникСсылка.СтатьиФинансированияЗарплата
//        ** СтатьяРасходов                       - СправочникСсылка.СтатьиРасходовЗарплата
//        ** ВидДоходаИсполнительногоПроизводства - Массив из ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства
//     * ИсключаемыйРегистратор
//     * УжеРаспределено
//     * ДатаОперации
//     * НДФЛПоСотрудникам - Булево - Истина, когда распределяется НДФЛ сотрудников, иначе - контрагентов
//     * ТаблицаВыплат
//
Функция НовоеОписаниеПараметровРаспределенияНалогиКУдержанию() Экспорт

	ПараметрыРаспределения = Новый Структура(
		"Финансирование,
		|ИсключаемыйРегистратор,
		|УжеРаспределено,
		|ДатаОперации,
		|НДФЛПоСотрудникам,
		|ТаблицаВыплат");
	
	ПараметрыРаспределения.Финансирование = Новый Структура(
			"СтатьяФинансирования,
			|СтатьяРасходов,
			|ВидДоходаИсполнительногоПроизводства");
	ПараметрыРаспределения.НДФЛПоСотрудникам = Истина;
	
	Возврат ПараметрыРаспределения;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АлгоритмыПолученияДанныхДляОтраженияВУчете

Процедура СоздатьВТУдержанияПоСотрудникамПоТаблицеЗначений(МенеджерВременныхТаблиц, НачисленияУдержания)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СоздатьВТНачислениеУдержаниеВидОперации(МенеджерВременныхТаблиц);
	
	// Получим массив видов особых начислений удержаний, относящихся к НДФЛ.
	ВидыОсобыхНачисленийИУдержанийНДФЛ = ВидыОсобыхНачисленийИУдержанийНДФЛ();
	Запрос.УстановитьПараметр("ВидыОсобыхНачисленийИУдержанийНДФЛ", ВидыОсобыхНачисленийИУдержанийНДФЛ);
	Запрос.УстановитьПараметр("НачисленияУдержания", НачисленияУдержания);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияУдержания.Организация КАК Организация,
	|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	НачисленияУдержания.НачислениеУдержание КАК НачислениеУдержание,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияУдержания.Сумма КАК Сумма,
	|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты,
	|	НачисленияУдержания.Период КАК Период,
	|	НачисленияУдержания.ДокументОснование КАК ДокументОснование,
	|	НачисленияУдержания.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТНачисленияУдержания
	|ИЗ
	|	&НачисленияУдержания КАК НачисленияУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.Организация КАК Организация,
	|	Удержания.Сотрудник КАК Сотрудник,
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Подразделение КАК Подразделение,
	|	НАЧАЛОПЕРИОДА(Удержания.Период, МЕСЯЦ) КАК ДатаНачала,
	|	Удержания.НачислениеУдержание КАК Удержание,
	|	Удержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НАЧАЛОПЕРИОДА(Удержания.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	Удержания.Период КАК Период,
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	Удержания.Контрагент КАК Контрагент,
	|	0 КАК ИдентификаторСтроки,
	|	ЕСТЬNULL(УдержаниеВидОперации.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)) КАК ВидОперации,
	|	Удержания.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТУдержанияПоСотрудникам
	|ИЗ
	|	ВТНачисленияУдержания КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеУдержаниеВидОперации КАК УдержаниеВидОперации
	|		ПО Удержания.НачислениеУдержание = УдержаниеВидОперации.НачислениеУдержание
	|ГДЕ
	|	Удержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	|	И НЕ Удержания.НачислениеУдержание В (&ВидыОсобыхНачисленийИУдержанийНДФЛ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.Организация,
	|	Удержания.Сотрудник,
	|	Удержания.ФизическоеЛицо,
	|	Удержания.Подразделение,
	|	НАЧАЛОПЕРИОДА(Удержания.Период, МЕСЯЦ),
	|	Удержания.НачислениеУдержание,
	|	Удержания.СтатьяРасходов,
	|	НАЧАЛОПЕРИОДА(Удержания.Период, МЕСЯЦ),
	|	Удержания.Период,
	|	Удержания.ДокументОснование,
	|	Удержания.Контрагент,
	|	0,
	|	ЕСТЬNULL(УдержаниеВидОперации.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)),
	|	Удержания.Сумма
	|ИЗ
	|	ВТНачисленияУдержания КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеУдержаниеВидОперации КАК УдержаниеВидОперации
	|		ПО Удержания.НачислениеУдержание = УдержаниеВидОперации.НачислениеУдержание
	|ГДЕ
	|	Удержания.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисленияУдержания";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТУдержанияПоСотрудникам(МенеджерВременныхТаблиц, Организация, ПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СоздатьВТНачислениеУдержаниеВидОперации(МенеджерВременныхТаблиц);
	
	// Получим массив видов особых начислений удержаний, относящихся к НДФЛ.
	ВидыОсобыхНачисленийИУдержанийНДФЛ = ВидыОсобыхНачисленийИУдержанийНДФЛ();
	Запрос.УстановитьПараметр("ВидыОсобыхНачисленийИУдержанийНДФЛ", ВидыОсобыхНачисленийИУдержанийНДФЛ);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Удержания.Организация КАК Организация,
	|	Удержания.Сотрудник КАК Сотрудник,
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Подразделение КАК Подразделение,
	|	Удержания.СтатьяРасходов КАК СтатьяРасходов,
	|	Удержания.ДатаНачала КАК ДатаНачала,
	|	Удержания.НачислениеУдержание КАК Удержание,
	|	Удержания.Сумма КАК Сумма,
	|	НАЧАЛОПЕРИОДА(Удержания.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	Удержания.Период КАК Период,
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	Удержания.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(УдержаниеВидОперации.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)) КАК ВидОперации,
	|	0 КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТУдержанияПоСотрудникам
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеУдержаниеВидОперации КАК УдержаниеВидОперации
	|		ПО Удержания.НачислениеУдержание = УдержаниеВидОперации.НачислениеУдержание
	|ГДЕ
	|	Удержания.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Удержания.Организация = &Организация
	|	И Удержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	|	И НЕ Удержания.НачислениеУдержание В (&ВидыОсобыхНачисленийИУдержанийНДФЛ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.Организация,
	|	Удержания.Сотрудник,
	|	Удержания.ФизическоеЛицо,
	|	Удержания.Подразделение,
	|	Удержания.СтатьяРасходов,
	|	Удержания.ДатаНачала,
	|	Удержания.НачислениеУдержание,
	|	Удержания.Сумма,
	|	НАЧАЛОПЕРИОДА(Удержания.Период, МЕСЯЦ),
	|	Удержания.Период,
	|	Удержания.ДокументОснование,
	|	Удержания.Контрагент,
	|	ЕСТЬNULL(УдержаниеВидОперации.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)),
	|	0
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеУдержаниеВидОперации КАК УдержаниеВидОперации
	|		ПО Удержания.НачислениеУдержание = УдержаниеВидОперации.НачислениеУдержание
	|ГДЕ
	|	Удержания.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Удержания.Организация = &Организация
	|	И Удержания.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму)";
	
	Запрос.Выполнить();
	
	ОтражениеЗарплатыВУчетеВнутренний.ДополнитьТаблицуУдержаний(ПериодРегистрации, Организация, МенеджерВременныхТаблиц);
	
КонецПроцедуры

Функция ТаблицаУдержанийДляОтражениеВУчете(МенеджерВременныхТаблиц)
	
	ТаблицаУдержаний = НоваяТаблицаУдержаннаяЗарплата();
	
	ОтражениеЗарплатыВУчетеВнутренний.СоздатьВТУдержанияПоСотрудникамКонтрагент(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаУдержаний.Организация КАК Организация,
	|	ТаблицаУдержаний.Сотрудник КАК Сотрудник,
	|	ТаблицаУдержаний.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаУдержаний.Подразделение КАК Подразделение,
	|	ТаблицаУдержаний.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаУдержаний.ДатаНачала КАК ДатаНачала,
	|	ТаблицаУдержаний.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаУдержаний.ВидОперации КАК ВидОперации,
	|	ЕСТЬNULL(УдержанияПоСотрудникамКонтрагент.Контрагент, ТаблицаУдержаний.Контрагент) КАК Контрагент,
	|	ТаблицаУдержаний.Удержание КАК Удержание,
	|	ТаблицаУдержаний.Сумма КАК Сумма
	|ИЗ
	|	ВТУдержанияПоСотрудникам КАК ТаблицаУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанияПоСотрудникамКонтрагент КАК УдержанияПоСотрудникамКонтрагент
	|		ПО ТаблицаУдержаний.ДокументОснование = УдержанияПоСотрудникамКонтрагент.ДокументОснование
	|			И ТаблицаУдержаний.ФизическоеЛицо = УдержанияПоСотрудникамКонтрагент.ФизическоеЛицо
	|			И ТаблицаУдержаний.Удержание = УдержанияПоСотрудникамКонтрагент.Удержание
	|			И (ТаблицаУдержаний.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))";
	
	Результат = Запрос.Выполнить().Выгрузить();
	ЗаполнитьКолонкуИдентификаторСтроки(Результат);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаУдержаний);
	
	Возврат ТаблицаУдержаний;
	
КонецФункции 

Процедура СоздатьВТТаблицаНДФЛПоТаблицеЗначений(МенеджерВременныхТаблиц, НачисленияУдержания)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Получим массив видов особых начислений удержаний, относящихся к НДФЛ.
	ВидыОсобыхНачисленийИУдержанийНДФЛ = ВидыОсобыхНачисленийИУдержанийНДФЛ(Истина);
	Запрос.УстановитьПараметр("ВидыОсобыхНачисленийИУдержанийНДФЛ", ВидыОсобыхНачисленийИУдержанийНДФЛ);
	Запрос.УстановитьПараметр("НачисленияУдержания", НачисленияУдержания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияУдержания.Организация КАК Организация,
	|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	НачисленияУдержания.НачислениеУдержание КАК НачислениеУдержание,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияУдержания.Сумма КАК Сумма,
	|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТНачисленияУдержания
	|ИЗ
	|	&НачисленияУдержания КАК НачисленияУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержания.Организация КАК Организация,
	|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	НачисленияУдержания.НачислениеУдержание КАК НачислениеУдержание,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияУдержания.Сумма КАК Сумма,
	|	0 КАК ИдентификаторСтроки,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТТаблицаНДФЛ
	|ИЗ
	|	ВТНачисленияУдержания КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.НачислениеУдержание В(&ВидыОсобыхНачисленийИУдержанийНДФЛ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисленияУдержания";
	Запрос.Выполнить();	
	
КонецПроцедуры

Процедура СоздатьВТТаблицаНДФЛ(МенеджерВременныхТаблиц, Организация, ПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Получим массив видов особых начислений удержаний, относящихся к НДФЛ.
	ВидыОсобыхНачисленийИУдержанийНДФЛ = ВидыОсобыхНачисленийИУдержанийНДФЛ(Истина);
	Запрос.УстановитьПараметр("ВидыОсобыхНачисленийИУдержанийНДФЛ", ВидыОсобыхНачисленийИУдержанийНДФЛ);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияУдержания.Организация КАК Организация,
	|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	НачисленияУдержания.НачислениеУдержание КАК НачислениеУдержание,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияУдержания.Сумма КАК Сумма,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	0 КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТТаблицаНДФЛ
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.Организация = &Организация
	|	И НачисленияУдержания.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачисленияУдержания.НачислениеУдержание В(&ВидыОсобыхНачисленийИУдержанийНДФЛ)";
	Запрос.Выполнить();
	
	ОтражениеЗарплатыВУчетеВнутренний.ДополнитьТаблицуНДФЛ(ПериодРегистрации, Организация, МенеджерВременныхТаблиц);	
	
КонецПроцедуры

Функция ТаблицаНДФЛДляОтражениеВУчете(МенеджерВременныхТаблиц)
	
	ТаблицаНДФЛ = НоваяТаблицаНДФЛ();
	
	// Создадим временную таблицу с соответствием видов особых начислений удержаний видам операций по зарплате.
	СоздатьВТНачислениеУдержаниеВидОперации(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНДФЛ.Организация КАК Организация,
	|	ТаблицаНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаНДФЛ.Сотрудник КАК Сотрудник,
	|	ТаблицаНДФЛ.Подразделение КАК Подразделение,
	|	ТаблицаНДФЛ.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаНДФЛ.Сумма КАК Сумма,
	|	ТаблицаНДФЛ.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	ТаблицаНДФЛ.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(ВидыОсобыхУдержанийВидОперации.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)) КАК ВидОперации
	|ИЗ
	|	ВТТаблицаНДФЛ КАК ТаблицаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеУдержаниеВидОперации КАК ВидыОсобыхУдержанийВидОперации
	|		ПО ТаблицаНДФЛ.НачислениеУдержание = ВидыОсобыхУдержанийВидОперации.НачислениеУдержание
	|ГДЕ
	|	ТаблицаНДФЛ.Сумма <> 0";
	
	Результат = Запрос.Выполнить().Выгрузить();
	ЗаполнитьКолонкуИдентификаторСтроки(Результат);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаНДФЛ);
	
	Возврат ТаблицаНДФЛ;
	
КонецФункции 

Процедура СоздатьВТНачисленияПоТаблицеЗначений(МенеджерВременныхТаблиц, НачисленияУдержания)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ГруппаНачисления = Новый Массив;
	ГруппаНачисления.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено);
	ГруппаНачисления.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы);
	Запрос.УстановитьПараметр("ГруппаНачисления", ГруппаНачисления);
	Запрос.УстановитьПараметр("НачисленияУдержания", НачисленияУдержания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияУдержания.Организация КАК Организация,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.ДатаНачала КАК ДатаНачала,
	|	НачисленияУдержания.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияУдержания.ПериодДействия КАК ПериодДействия,
	|	НачисленияУдержания.НачислениеУдержание КАК НачислениеУдержание,
	|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты,
	|	НачисленияУдержания.ДокументОснование КАК ДокументОснование,
	|	НачисленияУдержания.Сумма КАК Сумма,
	|	НачисленияУдержания.Сторно КАК Сторно,
	|	НачисленияУдержания.ФиксСторно КАК ФиксСторно
	|ПОМЕСТИТЬ ВТНачисленияУдержания
	|ИЗ
	|	&НачисленияУдержания КАК НачисленияУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержания.Организация КАК Организация,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.ДатаНачала КАК ДатаНачала,
	|	НачисленияУдержания.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияУдержания.ПериодДействия КАК ПериодДействия,
	|	НачисленияУдержания.НачислениеУдержание КАК НачислениеУдержание,
	|	НачисленияУдержания.ДокументОснование КАК ДокументОснование,
	|	НачисленияУдержания.Сумма КАК Сумма,
	|	0 КАК ИдентификаторСтроки,
	|	НачисленияУдержания.Сторно КАК Сторно,
	|	НачисленияУдержания.ФиксСторно КАК ФиксСторно
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ВТНачисленияУдержания КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты В(&ГруппаНачисления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияУдержания.Организация,
	|	НачисленияУдержания.Сотрудник,
	|	НачисленияУдержания.ФизическоеЛицо,
	|	НачисленияУдержания.Подразделение,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.ДатаНачала,
	|	НачисленияУдержания.ДатаОкончания,
	|	НачисленияУдержания.ПериодДействия,
	|	НачисленияУдержания.НачислениеУдержание,
	|	НачисленияУдержания.ДокументОснование,
	|	НачисленияУдержания.Сумма,
	|	0,
	|	НачисленияУдержания.Сторно,
	|	НачисленияУдержания.ФиксСторно
	|ИЗ
	|	ВТНачисленияУдержания КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|	И НачисленияУдержания.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияУдержания.Организация,
	|	НачисленияУдержания.Сотрудник,
	|	НачисленияУдержания.ФизическоеЛицо,
	|	НачисленияУдержания.Подразделение,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.ДатаНачала,
	|	НачисленияУдержания.ДатаОкончания,
	|	НачисленияУдержания.ПериодДействия,
	|	НачисленияУдержания.НачислениеУдержание,
	|	НачисленияУдержания.ДокументОснование,
	|	НачисленияУдержания.Сумма,
	|	0,
	|	НачисленияУдержания.Сторно,
	|	НачисленияУдержания.ФиксСторно
	|ИЗ
	|	ВТНачисленияУдержания КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|	И НачисленияУдержания.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисленияУдержания";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТНачисления(МенеджерВременныхТаблиц, Организация, ПериодРегистрации, Сотрудники = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	
	УсловиеПоСотрудникам = "ИСТИНА";
	Если Сотрудники <> Неопределено Тогда
		УсловиеПоСотрудникам = "Начисления.Сотрудник В(&Сотрудники)";
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	КонецЕсли;
	
	ГруппаНачисления = Новый Массив;
	ГруппаНачисления.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено);
	ГруппаНачисления.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы);
	Запрос.УстановитьПараметр("ГруппаНачисления", ГруппаНачисления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.НачислениеУдержание КАК НачислениеУдержание,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	0 КАК ИдентификаторСтроки,
	|	Начисления.Сумма КАК Сумма,
	|	ЛОЖЬ КАК Сторно,
	|	ЛОЖЬ КАК ФиксСторно
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Начисления.ГруппаНачисленияУдержанияВыплаты В(&ГруппаНачисления)
	|	И &УсловиеПоСотрудникам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Организация,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение,
	|	Начисления.СтатьяРасходов,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.ПериодДействия,
	|	Начисления.НачислениеУдержание,
	|	Начисления.ДокументОснование,
	|	0,
	|	Начисления.Сумма,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Начисления.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|	И Начисления.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
	|	И &УсловиеПоСотрудникам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Организация,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение,
	|	Начисления.СтатьяРасходов,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.ПериодДействия,
	|	Начисления.НачислениеУдержание,
	|	Начисления.ДокументОснование,
	|	0,
	|	Начисления.Сумма,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Начисления.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|	И Начисления.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов)
	|	И &УсловиеПоСотрудникам";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотрудникам", УсловиеПоСотрудникам);
	Запрос.Выполнить();
	
	ОтражениеЗарплатыВУчетеВнутренний.ДополнитьТаблицуНачислений(ПериодРегистрации, Организация, МенеджерВременныхТаблиц, Сотрудники);
	
КонецПроцедуры

Функция ТаблицаНачисленийДляОтражениеВУчете(МенеджерВременныхТаблиц)
	
	ТаблицаНачислений = НоваяТаблицаНачислений();
	
	СоздатьВТНачислениеУдержаниеВидОперации(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	ЕСТЬNULL(НачисленияВидОперации.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)) КАК ВидОперации,
	|	Начисления.НачислениеУдержание КАК Начисление,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Сумма КАК Сумма,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.ФиксСторно КАК ФиксСторно
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеУдержаниеВидОперации КАК НачисленияВидОперации
	|		ПО Начисления.НачислениеУдержание = НачисленияВидОперации.НачислениеУдержание";
	
	Результат = Запрос.Выполнить().Выгрузить();
	ЗаполнитьКолонкуИдентификаторСтроки(Результат);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаНачислений);
	
	Возврат ТаблицаНачислений;
	
КонецФункции

Процедура СоздатьВТСтраховыеВзносы(МенеджерВременныхТаблиц, Организация, ПериодРегистрации, Сотрудники)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		Модуль.ОтразитьДокументыВУчетеСтраховыхВзносов(Организация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	
	УсловиеПоСотрудникам = "ИСТИНА";
	Если Сотрудники <> Неопределено Тогда
		УсловиеПоСотрудникам = "СтраховыеВзносы.Сотрудник В(&Сотрудники)";
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтраховыеВзносы.Организация КАК Организация,
	|	СтраховыеВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтраховыеВзносы.Сотрудник КАК Сотрудник,
	|	СтраховыеВзносы.Подразделение КАК Подразделение,
	|	СтраховыеВзносы.Начисление КАК Начисление,
	|	СУММА(0) КАК ПоляВзносов,
	|	СтраховыеВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	СтраховыеВзносы.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ВТСтраховыеВзносы
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК СтраховыеВзносы
	|ГДЕ
	|	СтраховыеВзносы.Организация = &Организация
	|	И СтраховыеВзносы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &УсловиеПоСотрудникам
	|
	|СГРУППИРОВАТЬ ПО
	|	СтраховыеВзносы.Подразделение,
	|	СтраховыеВзносы.Сотрудник,
	|	СтраховыеВзносы.ФизическоеЛицо,
	|	СтраховыеВзносы.Организация,
	|	СтраховыеВзносы.ОблагаетсяЕНВД,
	|	СтраховыеВзносы.ДатаНачала,
	|	СтраховыеВзносы.Начисление";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСотрудникам", УсловиеПоСотрудникам);
	
	ТекстПолейВзносов = "";
	Для каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина)) Цикл
		ТекстПолейВзносов = ТекстПолейВзносов + "СУММА(СтраховыеВзносы." + ИмяПоля + ") КАК " + ИмяПоля + "," + Символы.ПС;
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "СУММА(0) КАК ПоляВзносов,", ТекстПолейВзносов);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТаблицаВзносовДляОтражениеВУчете(МенеджерВременныхТаблиц)
	
	ТаблицаВзносов = НоваяТаблицаСтраховыеВзносы();
	
	ДополнительныеПоля = "ФизическоеЛицо,Сотрудник,Подразделение,Начисление,ОблагаетсяЕНВД,ДатаНачала";
	Результат = ТаблицаСтраховыхВзносовПоВидамОпераций(МенеджерВременныхТаблиц, ДополнительныеПоля);
	
	ДобавитьКолонкуИдентификаторСтроки(Результат);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаВзносов);
	
	Возврат ТаблицаВзносов;
	
КонецФункции

Функция ТаблицаСтраховыхВзносовПоВидамОпераций(МенеджерВременныхТаблиц, ДополнительныеПоля) Экспорт
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРСПревышения);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРДоПредельнойВеличины);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ТФОМС);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ФФОМС);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ФССНС);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ФСС);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраховыеВзносы.Организация КАК Организация,
	|	&ДополнительныеПоля КАК ДополнительныеПоля,
	|	ВидыОперацийПоЗарплате.Ссылка КАК ВидОперации,
	|	СУММА(ВЫБОР
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРСПревышения)
	|				ТОГДА СтраховыеВзносы.ПФРСПревышения
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу)
	|				ТОГДА СтраховыеВзносы.ПФРПоСуммарномуТарифу
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРДоПредельнойВеличины)
	|				ТОГДА СтраховыеВзносы.ПФРДоПредельнойВеличины
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть)
	|				ТОГДА СтраховыеВзносы.ПФРСтраховая
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть)
	|				ТОГДА СтраховыеВзносы.ПФРНакопительная
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ТФОМС)
	|				ТОГДА СтраховыеВзносы.ТФОМС
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ФФОМС)
	|				ТОГДА СтраховыеВзносы.ФФОМС
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ФСС)
	|				ТОГДА СтраховыеВзносы.ФСС
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ФССНС)
	|				ТОГДА СтраховыеВзносы.ФССНесчастныеСлучаи
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ)
	|				ТОГДА СтраховыеВзносы.ПФРНаДоплатуЛетчикам
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры)
	|				ТОГДА СтраховыеВзносы.ПФРНаДоплатуШахтерам
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах)
	|				ТОГДА СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах)
	|				ТОГДА СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки)
	|				ТОГДА СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка)
	|				ТОГДА СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки)
	|				ТОГДА СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка)
	|				ТОГДА СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	ВТСтраховыеВзносы КАК СтраховыеВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыОперацийПоЗарплате КАК ВидыОперацийПоЗарплате
	|		ПО (ВидыОперацийПоЗарплате.Ссылка В (&ВидыОпераций))
	|
	|СГРУППИРОВАТЬ ПО
	|	СтраховыеВзносы.Организация,
	|	ВидыОперацийПоЗарплате.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРСПревышения)
	|				ТОГДА СтраховыеВзносы.ПФРСПревышения
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу)
	|				ТОГДА СтраховыеВзносы.ПФРПоСуммарномуТарифу
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРДоПредельнойВеличины)
	|				ТОГДА СтраховыеВзносы.ПФРДоПредельнойВеличины
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть)
	|				ТОГДА СтраховыеВзносы.ПФРСтраховая
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть)
	|				ТОГДА СтраховыеВзносы.ПФРНакопительная
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ТФОМС)
	|				ТОГДА СтраховыеВзносы.ТФОМС
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ФФОМС)
	|				ТОГДА СтраховыеВзносы.ФФОМС
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ФСС)
	|				ТОГДА СтраховыеВзносы.ФСС
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ФССНС)
	|				ТОГДА СтраховыеВзносы.ФССНесчастныеСлучаи
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ)
	|				ТОГДА СтраховыеВзносы.ПФРНаДоплатуЛетчикам
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры)
	|				ТОГДА СтраховыеВзносы.ПФРНаДоплатуШахтерам
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах)
	|				ТОГДА СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах)
	|				ТОГДА СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки)
	|				ТОГДА СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка)
	|				ТОГДА СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки)
	|				ТОГДА СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки
	|			КОГДА ВидыОперацийПоЗарплате.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка)
	|				ТОГДА СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0";
	
	ТекстДополнительныхПолей = "";
	ТекстГруппировкиДополнительныхПолей = "";
	Для каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДополнительныеПоля) Цикл
		ТекстДополнительныхПолей = ТекстДополнительныхПолей + "СтраховыеВзносы." + ИмяПоля + " КАК " + ИмяПоля + "," + Символы.ПС;
		ТекстГруппировкиДополнительныхПолей = ТекстГруппировкиДополнительныхПолей + "СтраховыеВзносы." + ИмяПоля + "," + Символы.ПС;
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоля КАК ДополнительныеПоля,", ТекстДополнительныхПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СГРУППИРОВАТЬ ПО", "СГРУППИРОВАТЬ ПО" + Символы.ПС + ТекстГруппировкиДополнительныхПолей);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область Конструкторы

Функция НоваяТаблицаНДФЛ() Экспорт
	
	Таблица = Новый ТаблицаЗначений;  
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Сотрудник",  Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Таблица.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	Таблица.Колонки.Добавить("СтатьяРасходов",  Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	
	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаУдержаннаяЗарплата()
	
	МассивТиповУдержания = Новый Массив;
	МассивТиповУдержания.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповУдержания.Добавить(Тип("ПланВидовРасчетаСсылка.Удержания"));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	Таблица.Колонки.Добавить("Удержание", Новый ОписаниеТипов(МассивТиповУдержания));
	Таблица.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Таблица.Колонки.Добавить("СтатьяРасходов",  Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	
	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаНачислений() Экспорт
	
	МассивТиповНачисления = Новый Массив;
	МассивТиповНачисления.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповНачисления.Добавить(Тип("ПланВидовРасчетаСсылка.Начисления"));
	ОтражениеЗарплатыВУчетеВнутренний.ДополнитьМассивТиповНачисления(МассивТиповНачисления);
	
	МассивТиповДокументОснование = ОтражениеЗарплатыВУчетеВнутренний.ТипыПоляДокументОснование();
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Сотрудник",  Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"), НСтр("ru = 'Сотрудник'"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	Таблица.Колонки.Добавить("Начисление", Новый ОписаниеТипов(МассивТиповНачисления));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(МассивТиповДокументОснование));
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Таблица.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Таблица.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("СтатьяРасходов",  Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	
	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаСтраховыеВзносы() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТипов.Добавить(Тип("ПланВидовРасчетаСсылка.Начисления"));
	ОтражениеЗарплатыВУчетеВнутренний.ДополнитьМассивТиповНачисления(МассивТипов);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Сотрудник",  Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"), НСтр("ru = 'Сотрудник'"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	Таблица.Колонки.Добавить("Начисление", Новый ОписаниеТипов(МассивТипов));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	
	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаСтраховыеВзносыБезВидаОперации() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТипов.Добавить(Тип("ПланВидовРасчетаСсылка.Начисления"));
	ОтражениеЗарплатыВУчетеВнутренний.ДополнитьМассивТиповНачисления(МассивТипов);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Сотрудник",  Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"), НСтр("ru = 'Сотрудник'"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("Начисление", Новый ОписаниеТипов(МассивТипов));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	
	Для каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина)) Цикл
		Таблица.Колонки.Добавить(ИмяПоля, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	КонецЦикла;
	
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	
	Возврат Таблица;
	
КонецФункции

Функция НоваяСтруктураРезультатыРасчетаЗарплаты() Экспорт
	
	РезультатыРасчетаЗарплаты = Новый Структура;
	РезультатыРасчетаЗарплаты.Вставить("НачисленияУдержания", Неопределено);
	РезультатыРасчетаЗарплаты.Вставить("СтраховыеВзносы", Неопределено);
	
	Возврат РезультатыРасчетаЗарплаты
	
КонецФункции

#КонецОбласти

Функция УдержанияТочностьОкругленияПриРаспределении()

	ТочностьОкругления = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.Ссылка КАК Ссылка,
	|	&ОкруглятьРезультатРаспределения КАК ОкруглятьРезультатРаспределения
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания";
	
	Если Метаданные.ПланыВидовРасчета.Удержания.Реквизиты.Найти("ОкруглятьРезультатРаспределения") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкруглятьРезультатРаспределения", "Удержания.ОкруглятьРезультатРаспределения");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкруглятьРезультатРаспределения", "ЛОЖЬ");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТочностьОкругления.Вставить(Выборка.Ссылка, ?(Выборка.ОкруглятьРезультатРаспределения,0,2));
	КонецЦикла;
	
	ВидыОсобыхНачисленийИУдержаний = ВидыОсобыхНачисленийИУдержанийНДФЛ();
	Для каждого ЗначениеПеречисления Из ВидыОсобыхНачисленийИУдержаний Цикл
		ТочностьОкругления.Вставить(ЗначениеПеречисления, 0);
	КонецЦикла;
	
	Возврат ТочностьОкругления;

КонецФункции


Процедура УточнитьБазуПоЗнакуРаспределяемойСуммы(СтрокиБазы, РаспределяемаяСумма)
	
	Если РаспределяемаяСумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПоложительнойБазы = Новый Массив;
	СтрокиОтрицательнойБазы = Новый Массив;
	Для каждого СтрокаБазы Из СтрокиБазы Цикл
		Значение = СтрокаБазы["Сумма"];
		Если Значение > 0 Тогда
			СтрокиПоложительнойБазы.Добавить(СтрокаБазы);
		ИначеЕсли Значение < 0 Тогда
			СтрокиОтрицательнойБазы.Добавить(СтрокаБазы);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиПоложительнойБазы.Количество()>0 И СтрокиОтрицательнойБазы.Количество()>0 Тогда
		Если РаспределяемаяСумма > 0 Тогда
			СтрокиБазы = СтрокиПоложительнойБазы;
		Иначе
			СтрокиБазы = СтрокиОтрицательнойБазы;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти