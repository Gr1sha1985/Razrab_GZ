#Область ПрограммныйИнтерфейс

// Вызывает форму, которую нужно открыть при нажатии на гиперссылку в баннере.
// Параметры:
// 		НавигационнаяСсылка - Строка
// 		СтандартнаяОбработка - Булево
// 		Баннер - Произвольный - см. ПерсонализированныеПредложенияСервисов.НовыйБаннерДляСписка()
// 		Форма - Форма, в которой произошло нажатие на навигационную ссылку
//
Процедура ПерейтиПоСсылкеБаннера(НавигационнаяСсылка, СтандартнаяОбработка, Баннер, Форма) Экспорт
	
	Если НавигационнаяСсылка = ИдентификаторБаннераСтороннийСертификат()
		ИЛИ НавигационнаяСсылка = ИдентификаторБаннераЧисленностьСотрудников()
		ИЛИ НавигационнаяСсылка = ИдентификаторБаннераОтчетнаяКампания() Тогда
		
		СтандартнаяОбработка = Ложь;
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение();
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераНДСКВычетуКонтрагент()
		ИЛИ НавигационнаяСсылка = ИдентификаторБаннераКрупнейшийДебитор() Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Контрагент", Баннер.ДанныеБаннера.Контрагент);
		ОткрытьФорму("Отчет.ДосьеКонтрагента.Форма", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераКоличествоКонтрагентов() Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Баннер", Баннер);
		ОткрытьФорму("ОбщаяФорма.Реклама1СКонтрагент", ПараметрыФормы);
	
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераКрупнейшиеДебиторыСПАРК() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодключитьТестовыйПериодЗавершение", 
			ПерсонализированныеПредложенияСервисовКлиент,
			Новый Структура("ИмяОтчета", "НадежностьДебиторовСПАРКРискиБП"));
			
		ПодключениеСервисовСопровожденияКлиент.ПодключитьТестовыйПериод(
			СПАРКРискиКлиентСервер.ИдентификаторСервиса(),
			Неопределено,
			ОписаниеОповещения);
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераНДСКВычетуСПАРК() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодключитьТестовыйПериодЗавершение", 
			ПерсонализированныеПредложенияСервисовКлиент,
			Новый Структура("ИмяОтчета", "ВходящийНДССПАРКРиски"));
			
		ПодключениеСервисовСопровожденияКлиент.ПодключитьТестовыйПериод(
			СПАРКРискиКлиентСервер.ИдентификаторСервиса(),
			Неопределено,
			ОписаниеОповещения);
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераОбщееКоличествоДокументов()
		ИЛИ НавигационнаяСсылка = ИдентификаторБаннераКоличествоПоступлений()
		ИЛИ НавигационнаяСсылка = ИдентификаторБаннераКоличествоРеализаций() Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Баннер", Баннер);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПомощникПодключенияЭДОПриЗакрытииРекламы", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.Реклама1СЭДО", ПараметрыФормы,,,,, ОписаниеОповещения);
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераНадежностьБанков() Тогда
		
		СтандартнаяОбработка = Ложь;
		НадежностьБанковКлиент.ОткрытьИнформациюОСобытии(Баннер.ДанныеБаннера);
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераПлатформаСамозанятые() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеБаннера = Баннер.ДанныеБаннера;
		СсылкаНаОблако = Неопределено;
		Если ДанныеБаннера.Свойство("ДанныеСобытия") И ДанныеБаннера.ДанныеСобытия.Свойство("ПереходВОблако", СсылкаНаОблако) Тогда
			ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(СсылкаНаОблако);
		Иначе
			ПараметрыФормы = Новый Структура("ДанныеБаннера", Баннер.ДанныеБаннера);
			ОткрытьФорму("Обработка.ПомощникИнтеграцииСПлатформойСамозанятые.Форма", ПараметрыФормы);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераПоддержкаСервиса() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущееСообщение = Баннер.ДанныеБаннера.ДанныеСобытия;
		ТипИнформации    = Строка(ТекущееСообщение.ТипИнформации);
		Если ТипИнформации = "Недоступность" Или ТипИнформации = "Новость" Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ОткрытьНовость", Истина);
			ПараметрыФормы.Вставить("Идентификатор",  ТекущееСообщение.Идентификатор);
			ОткрытьФорму("Обработка.ИнформационныйЦентр.Форма.ОтображениеСообщений", ПараметрыФормы);
		ИначеЕсли ТипИнформации = "УведомлениеОПожелании" Тогда
			ИдентификаторИдеи = Строка(ТекущееСообщение.Идентификатор);
			ИнформационныйЦентрКлиент.ПоказатьИдею(ИдентификаторИдеи);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераТестовыйТариф() Тогда

		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОткрыватьФормуОплаты", Истина);
		ОткрытьФорму("Обработка.ОплатаСервисаБП.Форма.ВыборТарифа", ПараметрыФормы);
	
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераПроверкаОплатыНалогов() Тогда
		
		СтандартнаяОбработка = Ложь;
		Если РегламентированнаяОтчетностьВызовСервера.Используется1СОтчетность() Тогда
			ДанныеБаннера = Баннер.ДанныеБаннера;
			СверкаСФНСКлиент.ОтправитьЗапросВыпискиОперацийФНС(ДанныеБаннера.Организация);
		Иначе
			ОткрытьФорму("Обработка.СверкаНалоговСФНС.Форма.ПодсказкаБаннераСверкаСФНС", , Форма);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераПроблемыСНалоговымиПлатежами() Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеБаннера = Баннер.ДанныеБаннера;
		СверкаСФНСКлиент.НавигационнаяСылкаПроблемыСНалоговымиПлатежамиНажатие(ДанныеБаннера.Организация);
		
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылка, ИдентификаторБаннераПредодобренныйКредитВСбербанке()) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НавигационнаяСсылка = ИдентификаторБаннераПредодобренныйКредитВСбербанке() Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИмяФормы", Форма.ИмяФормы);
			ОбработкаВыбораОрганизации = Новый ОписаниеОповещения("ПредодобренныйКредитВСбербанкеОбработкаВыбораОрганизации",
				ЭтотОбъект, ДополнительныеПараметры);
			СписокОрганизаций = ПерсонализированныеПредложенияСервисовВызовСервера.ПредодобренныйКредитВСбербанкеПолучитьСписокОрганизаций();
			Форма.ПоказатьВыборИзМеню(ОбработкаВыбораОрганизации, СписокОрганизаций);
		Иначе
			ИНН = СтрЗаменить(НавигационнаяСсылка, ИдентификаторБаннераПредодобренныйКредитВСбербанке(), "");
			Гиперссылка = ПерсонализированныеПредложенияСервисовВызовСервера.ПредодобренныйКредитВСбербанкеГиперссылкаПоИНН(ИНН, Форма.ИмяФормы);
			ПерейтиПоНавигационнойСсылке(Гиперссылка);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераНастройкаВидимостиСчетовУчета() Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура("АктивныйЭлемент", "ПоказыватьСчетаУчетаВДокументах");
		ОткрытьФорму("ОбщаяФорма.ПерсональныеНастройки", 
			Новый Структура("ПараметрыОткрытия", ПараметрыОткрытия));
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераИнтеграцияСоSmartway() Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеБаннера = Баннер.ДанныеБаннера;
		ОбщегоНазначенияБПКлиент.ОтправитьЗаявкуВSmartway(ДанныеБаннера.Организация);
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераЗаявкаНаКредит()
		ИЛИ НавигационнаяСсылка = ИдентификаторБаннераИспользуетеКредиты() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КлючеваяОперация = "СозданиеФормыЗаявкаНаКредит";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
		
		ОткрытьФорму("Документ.ЗаявкаНаКредит.ФормаОбъекта");

	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераФинОтчетность() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Организация", Баннер.ДанныеБаннера.Организация);
		ПараметрыФормы.Вставить("Банк",        Баннер.ДанныеБаннера.Банк);
		
		ОткрытьФорму("РегистрСведений.ЖурналСтатусовФинОтчетностиВБанки.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераПереходиНаНКО() Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.Реклама1СНКО");
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераНастройкаФункциональности() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		
		Если ЗначениеЗаполнено(Баннер.ДанныеБаннера.ФункциональнаяОпция) Тогда
			ФункциональнаяОпция = Баннер.ДанныеБаннера.ФункциональнаяОпция.Имя;
			Если ФункциональнаяОпция = "ИспользоватьДокументыРеализации" Тогда
				ПараметрыФормы.Вставить("ТекущаяСтраница", "ГруппаДокументы");
			ИначеЕсли ФункциональнаяОпция = "ВестиУчетПоДоговорам" Тогда
				ПараметрыФормы.Вставить("ТекущаяСтраница", "ГруппаУчетПоДоговорам");
			КонецЕсли;
		КонецЕсли;
		
		ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераМоиЗадачи() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ОткрытьМоиЗадачи", Истина);
		
		ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.Органайзер", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераАнтикризис()
		ИЛИ НавигационнаяСсылка = ИдентификаторБаннераАнтикризисЗарплата() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Организация = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");

		
		ПараметрыФормыНалогиИОтчеты = Новый Структура;
		ПараметрыФормыНалогиИОтчеты.Вставить("Организация", Организация);
		ПараметрыФормыНалогиИОтчеты.Вставить("ТекущаяЗакладка", "Антикризис");
		
		ОткрытьФорму("ОбщаяФорма.НалогиИОтчеты", ПараметрыФормыНалогиИОтчеты, , Организация);
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераКадровыеДокументыЭТК() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность",
			,
			,
			"1С-Отчетность");
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераСайтАнтикризис() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПерейтиПоНавигационнойСсылке("https://v8.1c.ru/anticrisis/");
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераЕНВДОтменяется() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПерейтиПоНавигационнойСсылке("https://buh.ru/otmena_envd");

	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьТестовыйПериодЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФормы = СтрШаблон("Отчет.%1.ФормаОбъекта", ДополнительныеПараметры.ИмяОтчета);
	ОткрытьФорму(ИмяФормы);
	
КонецПроцедуры

// Определяет наличие действующих сертификатов удостоверяющих центров.
//
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое будет выполнено по окончанию проверки.
//    *Результат - СторонниеСертификаты - Структура, в которой указан УЦ и дата окончания.
//  ИНН                   - Строка             - ИНН организации, для которой выполняется проверка.
//
Процедура ОпределитьНаличиеСертификатовЭлектроннойОтчетности(ОповещениеОЗавершении, ИНН) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Новый Структура);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() И НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		МенеджерКриптографии = Новый МенеджерКриптографии;
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Контекст.Вставить("ИНН", ИНН);
		Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		Оповещение = Новый ОписаниеОповещения(
			"ОпределитьНаличиеСертификатовЭлектроннойОтчетностиПослеИнициализации", ЭтотОбъект, Контекст);
		МенеджерКриптографии.НачатьИнициализацию(Оповещение, "Microsoft Enhanced Cryptographic Provider v1.0", "", 1);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРежимОжиданияНаБаннере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.ТекстБаннера.Видимость = Ложь;
	Элементы.КартинкаБаннера.Видимость = Ложь;
	Элементы.ГруппаБаннерОжидание.Видимость = Истина;
	
	Элементы.КартинкаЗакрытьБаннер.Доступность = Ложь;
	Элементы.КартинкаПредыдущийБаннер.Доступность = Ложь;
	Элементы.КартинкаСледующийБаннер.Доступность = Ложь;
	
КонецПроцедуры

Функция ИнтервалПереключенияБаннеров() Экспорт
	
	Возврат 60 * 60; // 1 час
	
КонецФункции

Процедура ПредодобренныйКредитВСбербанкеОбработкаВыбораОрганизации(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныйЭлемент) <> Тип("ЭлементСпискаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ИНН = ВыбранныйЭлемент.Значение;
	Гиперссылка = ПерсонализированныеПредложенияСервисовВызовСервера.ПредодобренныйКредитВСбербанкеГиперссылкаПоИНН(ИНН,
		ДополнительныеПараметры.ИмяФормы);
	ПерейтиПоНавигационнойСсылке(Гиперссылка);
	
КонецПроцедуры

// Процедура закрывает баннер на форме.
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - Форма на которой нужно закрыть баннер.
//		Организация - СправочникСсылка.Организации - Организация, по которой ищем баннер.
//
Процедура ЗакрытьБаннер(Форма, Организация) Экспорт
	
	// Закроем баннер на форме.
	Баннер = Форма.Баннер;
	Форма.Баннер = Неопределено;
	Форма.Элементы.Баннер.Видимость = Ложь;
	
	Если Баннер.Идентификатор = ИдентификаторБаннераПроверкаОплатыНалогов() Тогда
		ДополнительныеДействияПриЗакрытииБаннераПроверкаОплатыНалогов(Баннер, Организация);
	Иначе
		ПерсонализированныеПредложенияСервисовВызовСервера.ОбработатьЗакрытиеБаннера(Баннер, Организация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыгрузкаДвоичныхДанныхСертификатов

Процедура ВыгрузитьМассивСертификатов(ОповещениеОЗавершении, Сертификаты)
	
	Если НЕ ЗначениеЗаполнено(Сертификаты) Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Сертификаты);
		Возврат;
	КонецЕсли;
	
	Выгружаемые = Новый Соответствие;
	
	Выгружаемые.Вставить("Осталось", Сертификаты.Количество());
	Выгружаемые.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Для Счетчик = 0 по Сертификаты.Количество()-1 Цикл
		Сертификат = Сертификаты[Счетчик];
		ОписаниеСертификата = Новый Структура("Выгружен, Ошибка", Ложь, Ложь);
		ОписаниеСертификата.Вставить("Данные", Неопределено);
		ОписаниеСертификата.Вставить("Отпечаток", Сертификат.Отпечаток);
		Выгружаемые.Вставить(Счетчик, ОписаниеСертификата);
	КонецЦикла;
	
	Для Счетчик = 0 по Сертификаты.Количество()-1 Цикл
		Сертификат = Сертификаты[Счетчик];
		ПараметрыОповещения = Новый Структура("Выгружаемые, Текущий", Выгружаемые, Счетчик);
		
		Оповещение = Новый ОписаниеОповещения(
			"ВыгрузитьМассивСертификатовПослеВыгрузкиОдиночного", ЭтотОбъект, ПараметрыОповещения,
			"ВыгрузитьМассивСертификатовОшибкаВыгрузкиОдиночного", ЭтотОбъект);
		
		Сертификат.НачатьВыгрузку(Оповещение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьМассивСертификатовОшибкаВыгрузкиОдиночного(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ВходящийКонтекст.Выгружаемые[ВходящийКонтекст.Текущий].Ошибка = Истина;	
	ВходящийКонтекст.Выгружаемые["Осталось"] = ВходящийКонтекст.Выгружаемые["Осталось"] - 1;
	
	Если ВходящийКонтекст.Выгружаемые["Осталось"] = 0 Тогда 
		ОповещениеОЗавершении = ВходящийКонтекст.Выгружаемые["ОповещениеОЗавершении"];
		ВходящийКонтекст.Выгружаемые.Удалить("Осталось");
		ВходящийКонтекст.Выгружаемые.Удалить("ОповещениеОЗавершении");
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ВходящийКонтекст.Выгружаемые);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьМассивСертификатовПослеВыгрузкиОдиночного(ВыгруженныеДанные, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(ВыгруженныеДанные) Тогда 
		ВходящийКонтекст.Выгружаемые[ВходящийКонтекст.Текущий].Выгружен = Истина;
		ВходящийКонтекст.Выгружаемые[ВходящийКонтекст.Текущий].Данные = ВыгруженныеДанные;		
	КонецЕсли;
	
	ВходящийКонтекст.Выгружаемые["Осталось"] = ВходящийКонтекст.Выгружаемые["Осталось"] - 1;
	
	Если ВходящийКонтекст.Выгружаемые["Осталось"] = 0 Тогда 
		ОповещениеОЗавершении = ВходящийКонтекст.Выгружаемые["ОповещениеОЗавершении"];
		ВходящийКонтекст.Выгружаемые.Удалить("Осталось");
		ВходящийКонтекст.Выгружаемые.Удалить("ОповещениеОЗавершении");
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ВходящийКонтекст.Выгружаемые);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазборДвоичныхДанныхASN1

Функция ПрочитатьСвойстваБлока(ЧтениеДанных, ВернутьУказательВНачало = Ложь)
	
	Свойства = Новый Структура;
	
	Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(1);
	ПроскроллитьНазад = 1;
	
	МаскаКлассБлока = 192;   // 1100 0000
	МаскаТег = 31;           // 0001 1111
	МаскаЗначащиеБиты = 127; // 0111 1111
	МаскаСтаршийБит = 128;   // 1000 0000
	
	Свойства.Вставить("Класс", ПобитовоеИ(Буфер[0], МаскаКлассБлока));
	Свойства.Вставить("Тег", ПобитовоеИ(Буфер[0], МаскаТег));
		
	// Прочитать размер блока
	Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(1);
	ПроскроллитьНазад = ПроскроллитьНазад + 1;
	
	// Используется потоковый способ кодирования, т.е. размер блока не указан (окончание блока 00 00)
	Если Буфер[0] = 128 Тогда
		РазмерБлока = -1;
	Иначе
		ДлинныйРазмер = Булево(ПобитовоеИ(Буфер[0], МаскаСтаршийБит));
		Если ДлинныйРазмер Тогда
			КоличествоБайтовПодРазмер = ПобитовоеИ(Буфер[0], МаскаЗначащиеБиты);
			Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(КоличествоБайтовПодРазмер);
			ПроскроллитьНазад = ПроскроллитьНазад + КоличествоБайтовПодРазмер;
			РазмерБлока = 0;
			Для Каждого Байт Из Буфер Цикл
				РазмерБлока = РазмерБлока * 256 + Байт;
			КонецЦикла;
		Иначе
			РазмерБлока = ПобитовоеИ(Буфер[0], МаскаЗначащиеБиты);	
		КонецЕсли;
	КонецЕсли;
	
	Свойства.Вставить("РазмерБлока", РазмерБлока);
	Свойства.Вставить("РазмерБлокаПолный", ПроскроллитьНазад + РазмерБлока);
	
	Если ВернутьУказательВНачало Тогда 
		ПотокДанных = ЧтениеДанных.ИсходныйПоток();
		ЧтениеДанных.Закрыть();
		ПотокДанных.Перейти(-ПроскроллитьНазад, ПозицияВПотоке.Текущая);
		ЧтениеДанных = Новый ЧтениеДанных(ПотокДанных);		
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

Процедура ПропуститьБлок(ЧтениеДанных, СколькоБайт)
	
	Если СколькоБайт > 0 Тогда 
		ЧтениеДанных.Пропустить(СколькоБайт);
	КонецЕсли;
	
КонецПроцедуры

Функция СертификатИмеетПоляКоторыеНевозможноРаспарсить(ДанныеСертификата)
	
	ЧтениеДанных = Новый ЧтениеДанных(ДанныеСертификата);
	ПрочитатьСвойстваБлока(ЧтениеДанных); // SEQUENCE
	ПрочитатьСвойстваБлока(ЧтениеДанных); // SEQUENCE
	Свойства = ПрочитатьСвойстваБлока(ЧтениеДанных, Истина);
	
	ВсегоИтераций = 0;
	// Перебираем все SEQUENCE третьего уровня
	// в которых есть вложенные даты типа UTCTime или GeneralizedTime
	Пока Не ЧтениеДанных.ЧтениеЗавершено Цикл
		
		ВсегоИтераций = ВсегоИтераций + 1;
		Если ВсегоИтераций > 4 Тогда //Странная структура, возможно поврежденный файл
			Прервать;
		КонецЕсли;
		
		Пока Свойства.Тег <> 16 Цикл 			
			ПропуститьБлок(ЧтениеДанных, Свойства.РазмерБлокаПолный);
			Свойства = ПрочитатьСвойстваБлока(ЧтениеДанных, Истина);
		КонецЦикла;	
		
		//Ищем SEQUENCE с вложенным тегом определенного типа
		Свойства = ПрочитатьСвойстваБлока(ЧтениеДанных);
		СвойстваВложенного = ПрочитатьСвойстваБлока(ЧтениеДанных, Истина);	
		Если СвойстваВложенного.Тег = 23 Тогда // UTCTime
			ЧтениеДанных.Закрыть();	
			Возврат Ложь;
		ИначеЕсли СвойстваВложенного.Тег = 24 Тогда // GeneralizedTime
			ЧтениеДанных.Закрыть();	
			Возврат Истина;
		КонецЕсли;	
		
		ПропуститьБлок(ЧтениеДанных, Свойства.РазмерБлока); //SEQUENCE	
		Свойства = ПрочитатьСвойстваБлока(ЧтениеДанных, Истина);
 	КонецЦикла;
	
	ЧтениеДанных.Закрыть();	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОпределениеСертификатовЭлектроннойОтчетности

Процедура ОпределитьНаличиеСертификатовЭлектроннойОтчетностиПослеИнициализации(Менеджер, ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ОпределитьНаличиеСертификатовЭлектроннойОтчетностиПослеПолученияХранилищаСертификатов", 
		ЭтотОбъект, ВходящийКонтекст);
		
	ВходящийКонтекст.МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(
		Оповещение, ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты,
		РасположениеХранилищаСертификатовКриптографии.ДанныеПользователяОС);
		
КонецПроцедуры

Процедура ОпределитьНаличиеСертификатовЭлектроннойОтчетностиПослеПолученияХранилищаСертификатов(Хранилище, ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(	
		"ОпределитьНаличиеСертификатовЭлектроннойОтчетностиПослеПолученияСертификатовПередВыгрузкой", 
		ЭтотОбъект, ВходящийКонтекст);
		
	Хранилище.НачатьПолучениеВсех(Оповещение);
	
КонецПроцедуры

Процедура ОпределитьНаличиеСертификатовЭлектроннойОтчетностиПослеПолученияСертификатовПередВыгрузкой(Сертификаты, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.Вставить("Сертификаты", Сертификаты);
	
	Оповещение = Новый ОписаниеОповещения(
		"ОпределитьНаличиеСертификатовЭлектроннойОтчетностиПослеПолученияСертификатовПослеВыгрузки", 
		ЭтотОбъект, ВходящийКонтекст);
		
	ВыгрузитьМассивСертификатов(Оповещение, Сертификаты);
	
КонецПроцедуры

Процедура ОпределитьНаличиеСертификатовЭлектроннойОтчетностиПослеПолученияСертификатовПослеВыгрузки(Сертификаты, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.Вставить("СертификатыСНеподдерживаемойДатой", Новый Массив);
	
	Для Каждого Сертификат Из Сертификаты Цикл 
		Если Сертификат.Значение.Выгружен Тогда 
			Неподдерживаемый = СертификатИмеетПоляКоторыеНевозможноРаспарсить(Сертификат.Значение.Данные);
			Если Неподдерживаемый Тогда 
				КопияОтпечатка = Сертификат.Значение.Отпечаток;
				ОтпечатокHex = ПолучитьHexСтрокуИзДвоичныхДанных(КопияОтпечатка);
				ВходящийКонтекст.СертификатыСНеподдерживаемойДатой.Добавить(ОтпечатокHex);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьНаличиеСертификатовЭлектроннойОтчетностиПослеПолученияСертификатов(ВходящийКонтекст.Сертификаты, ВходящийКонтекст);
	
КонецПроцедуры

Процедура ОпределитьНаличиеСертификатовЭлектроннойОтчетностиПослеПолученияСертификатов(Сертификаты, ВходящийКонтекст) Экспорт
	Перем СертификатыСНеподдерживаемойДатой;
	
	СторонниеСертификаты = Новый Структура;
	
	ИНН = ВходящийКонтекст.ИНН;
	ТекущаяДата = ТекущаяДата();
	ГраницаСрокаДействия = ДобавитьМесяц(ТекущаяДата, 4); // Истекает через 4 месяца
	
	ПолеИНН = "OID1_2_643_3_131_1_1";
	
	ИспользоватьПредпроверку = ВходящийКонтекст.Свойство("СертификатыСНеподдерживаемойДатой", СертификатыСНеподдерживаемойДатой);
	
	Для Счетчик = 0 по Сертификаты.Количество()-1 Цикл
		Сертификат = Сертификаты[Счетчик];
		Если ИспользоватьПредпроверку Тогда 
			КопияОтпечатка = Сертификат.Отпечаток;
			ОтпечатокHex = ПолучитьHexСтрокуИзДвоичныхДанных(КопияОтпечатка);
			Если СертификатыСНеподдерживаемойДатой.Найти(ОтпечатокHex) <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;			
		Если НЕ (Сертификат.ДатаОкончания > ТекущаяДата И Сертификат.ДатаОкончания < ГраницаСрокаДействия) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ Сертификат.Субъект.Свойство(ПолеИНН) ИЛИ НЕ СтрНайти(Сертификат.Субъект[ПолеИНН], ИНН) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ Сертификат.Издатель.Свойство("O") Тогда
			Продолжить;
		КонецЕсли;
		Слова = РазложитьНазваниеНаОтдельныеСлова(Сертификат.Издатель["O"]);
		
		Для Каждого Индекс Из ПолучитьИндексПоискаДляПроверкиУЦ() Цикл
			Если Слова.Найти(Индекс) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СторонниеСертификаты.Вставить(Индекс, Сертификат.ДатаОкончания);
		КонецЦикла;
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, СторонниеСертификаты);
	
КонецПроцедуры

Функция РазложитьНазваниеНаОтдельныеСлова(Знач Название)
	
	ЗаменяемыеСимволы = "'""()[].,`~!@#$%^&*-+=|\/:; ";
	Для Индекс = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Название = СтрЗаменить(Название, Сред(ЗаменяемыеСимволы, Индекс, 1), "_");
	КонецЦикла;
	
	Возврат СтрРазделить(НРег(Название), "_", Ложь);
	
КонецФункции

Функция ПолучитьИндексПоискаДляПроверкиУЦ()
	
	Индекс = Новый Массив;
	Индекс.Добавить("контур");
	Индекс.Добавить("тензор");
	
	Возврат Индекс;

КонецФункции

#КонецОбласти

#Область ИдентификаторыБаннеров

Функция ИдентификаторБаннераТестовыйТариф()
	
	Возврат "ТестовыйТариф";
	
КонецФункции

Функция ИдентификаторБаннераСтороннийСертификат()
	
	Возврат "СтороннийСертификат";
	
КонецФункции

Функция ИдентификаторБаннераЧисленностьСотрудников()
	
	Возврат "ЧисленностьСотрудников";
	
КонецФункции

Функция ИдентификаторБаннераОтчетнаяКампания()
	
	Возврат "ОтчетнаяКампания";
	
КонецФункции

Функция ИдентификаторБаннераНДСКВычетуКонтрагент()
	
	Возврат "НДСКВычетуКонтрагент";
	
КонецФункции

Функция ИдентификаторБаннераНДСКВычетуСПАРК()
	
	Возврат "НДСКВычетуСПАРК";
	
КонецФункции

Функция ИдентификаторБаннераКрупнейшийДебитор()
	
	Возврат "КрупнейшийДебиторКонтрагент";
	
КонецФункции

Функция ИдентификаторБаннераКрупнейшиеДебиторыСПАРК()
	
	Возврат "КрупнейшиеДебиторыСПАРК";
	
КонецФункции

Функция ИдентификаторБаннераОбщееКоличествоДокументов()
	
	Возврат "ОбщееКоличествоДокументов";
	
КонецФункции

Функция ИдентификаторБаннераКоличествоПоступлений()
	
	Возврат "КоличествоПоступлений";
	
КонецФункции

Функция ИдентификаторБаннераКоличествоРеализаций()
	
	Возврат "КоличествоРеализаций";
	
КонецФункции

Функция ИдентификаторБаннераКоличествоКонтрагентов()
	
	Возврат "КоличествоКонтрагентов";
	
КонецФункции

Функция ИдентификаторБаннераНадежностьБанков()
	
	Возврат "НадежностьБанков";
	
КонецФункции

Функция ИдентификаторБаннераПлатформаСамозанятые()

	Возврат "ПлатформаСамозанятые";

КонецФункции

Функция ИдентификаторБаннераПоддержкаСервиса()
	
	Возврат "ПоддержкаСервиса";
	
КонецФункции

Функция ИдентификаторБаннераПроверкаОплатыНалогов()

	Возврат "ПроверкаОплатыНалогов";

КонецФункции

Функция ИдентификаторБаннераПроблемыСНалоговымиПлатежами()

	Возврат "ПроблемыСНалоговымиПлатежами";

КонецФункции

Функция ИдентификаторБаннераПредодобренныйКредитВСбербанке()

	Возврат "ПредодобренныйКредитВСбербанке";

КонецФункции

Функция ИдентификаторБаннераНастройкаВидимостиСчетовУчета()

	Возврат "НастройкаВидимостиСчетовУчета";

КонецФункции

Функция ИдентификаторБаннераИнтеграцияСоSmartway()

	Возврат "ИнтеграцияСоSmartway";

КонецФункции

Функция ИдентификаторБаннераПереходиНаНКО()

	Возврат "ПереходиНаНКО";

КонецФункции

Функция ИдентификаторБаннераЗаявкаНаКредит()

	Возврат "ЗаявкаНаКредит";

КонецФункции

Функция ИдентификаторБаннераИспользуетеКредиты()

	Возврат "ИспользуетеКредиты";

КонецФункции

Функция ИдентификаторБаннераФинОтчетность()

	Возврат "ФинОтчетность";

КонецФункции

Функция ИдентификаторБаннераНастройкаФункциональности()

	Возврат "НастройкаФункциональности";

КонецФункции

Функция ИдентификаторБаннераМоиЗадачи()

	Возврат "МоиЗадачи";

КонецФункции

Функция ИдентификаторБаннераАнтикризис()

	Возврат "Антикризис";

КонецФункции

Функция ИдентификаторБаннераАнтикризисЗарплата()

	Возврат "АнтикризисЗарплата";

КонецФункции

Функция ИдентификаторБаннераСайтАнтикризис()
	
	Возврат "СайтАнтикризис";
	
КонецФункции

Функция ИдентификаторБаннераКадровыеДокументыЭТК()

	Возврат "КадровыеДокументыЭТК";

КонецФункции

Функция ИдентификаторБаннераЕНВДОтменяется()
	
	Возврат "ЕНВДОтменяется";
	
КонецФункции

#КонецОбласти

#Область ПодключениеКЭДО

Процедура ОткрытьПомощникПодключенияЭДОПриЗакрытииРекламы(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ОткрытьФормуПомощникаПодключенияКЭДО")
		И Результат.ОткрытьФормуПомощникаПодключенияКЭДО = Истина Тогда
		
		ОбменСКонтрагентамиКлиент.ПомощникПодключенияКСервису1СЭДО();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДополнительныеДействияПриЗакрытииБаннера

Процедура ДополнительныеДействияПриЗакрытииБаннераПроверкаОплатыНалогов(Баннер, Организация)
	
	ДополнительныеПараметры = Новый Структура("Баннер, Организация", Баннер, Организация);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДополнительныеДействияПриЗакрытииБаннераПроверкаОплатыНалоговЗавершение",
		ПерсонализированныеПредложенияСервисовКлиент, ДополнительныеПараметры);
	
	ШаблонВопроса = НСтр("ru = 'Вы можете самостоятельно произвести сверку
		|%1.
		|
		|Больше не показывать баннер?'");
	Если ОбщегоНазначенияБПВызовСервера.ЭтоПростойИнтерфейс() Тогда
		ТекстВопроса = СтрШаблон(ШаблонВопроса, НСтр("ru = 'в Налоги - Сверка налогов с ФНС'"));
	Иначе
		ТекстВопроса = СтрШаблон(ШаблонВопроса, НСтр("ru = 'в Отчеты - Сверка налогов с ФНС'"));
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ДополнительныеДействияПриЗакрытииБаннераПроверкаОплатыНалоговЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Истина);
	КонецЕсли;
	
	ПерсонализированныеПредложенияСервисовВызовСервера.ОбработатьЗакрытиеБаннера(ДополнительныеПараметры.Баннер,
		ДополнительныеПараметры.Организация);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПредодобренныйКредитВСбербанке

#КонецОбласти
