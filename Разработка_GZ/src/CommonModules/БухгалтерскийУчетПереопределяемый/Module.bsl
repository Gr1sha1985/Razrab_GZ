////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПРОВЕРКИ НЕОБХОДИМОСТИ ПРОВЕДЕНИЯ ДОКУМЕНТОВ ПО РАЗДЕЛАМ УЧЕТА

// Функция возвращает признак необходимости контроля отрицальных остатков товаров при списании.
//
Функция ОтключитьКонтрольОтрицательныхОстатков() Экспорт
	
	Возврат Константы.ОтключитьКонтрольОтрицательныхОстатков.Получить();
	
КонецФункции // ОтключитьКонтрольОтрицательныхОстатков()

// Функция возвращает 1, если ведется кадровый учет, иначе 0.
//
Функция ВедетсяКадровыйУчет() Экспорт
	
	Возврат УчетЗарплаты.ВедетсяКадровыйУчет();

КонецФункции // ВедетсяКадровыйУчет()

// Процедура устанавливает настройки для ведения кадрового учета
//
// Параметры:
//	ВестиКадровыйУчет - Булево
//
Процедура УстановитьНастройкиКадровогоУчета(ВестиКадровыйУчет, УчетЗарплатыИКадровСредствамиБухгалтерии) Экспорт

	Если НЕ УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
		Возврат;
	КонецЕсли;
	
	УчетЗарплаты.УстановитьНастройкиКадровогоУчета(ВестиКадровыйУчет, УчетЗарплатыИКадровСредствамиБухгалтерии);
	
КонецПроцедуры // УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме()

// Функция возвращает 1, если используется учет зарплаты ведется во внешней программе, иначе 0.
//
Функция УчетЗарплатыИКадровВоВнешнейПрограмме() Экспорт
	
	Возврат ?(Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить(), 1, 0);

КонецФункции // УчетЗарплатыИКадровВоВнешнейПрограмме()

// Процедура устанавливает настройки для ведения учета зарплаты во внешней программе.
//
// Параметры:
//	ВестиУчетЗарплатыИКадровВоВнешнейПрограмме - Булево
//
Процедура УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт

	Если НЕ УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
		Возврат;
	КонецЕсли;

	Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Установить(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме);
	
	Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Установить(НЕ ВестиУчетЗарплатыИКадровВоВнешнейПрограмме);
		
	УчетЗарплаты.УстановитьНастройкиУчетаЗарплаты(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме);
		
КонецПроцедуры // УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме()

// Функция возвращает 1, если используется учет зарплаты ведется сводно, иначе 0.
//
Функция ВедетсяУчетРасчетовПоЗарплатеСводно() Экспорт
	
	Возврат Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Получить();

КонецФункции // ВедетсяУчетРасчетовПоЗарплатеСводно()

// Процедура устанавливает настройки для ведения учета зарплаты во внешней программе.
//
// Параметры:
//	ВестиУчетЗарплатыИКадровВоВнешнейПрограмме - Булево
//
Процедура УстановитьПараметрыУчетаРасчетовПоЗарплате(ВедетсяУчетРасчетовПоЗарплатеСводно) Экспорт

	Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Установить(ВедетсяУчетРасчетовПоЗарплатеСводно);
	Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Установить(НЕ ВедетсяУчетРасчетовПоЗарплатеСводно);

КонецПроцедуры // УстановитьПараметрыУчетаРасчетовПоЗарплате()

// Функция возвращает Истина, если в конфигурации поддерживается отгрузка без перехода права собственности.
//
Функция ПоддерживаетсяОтгрузкаБезПереходаПраваСобственности() Экспорт

	Возврат Истина; 

КонецФункции // ПоддерживаетсяОтгрузкаБезПереходаПраваСобственности()

// Функция возвращает Истина, если в конфигурации ведется учет по валютам.
//
Функция ИспользоватьВалютныйУчет() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");

КонецФункции // ИспользоватьВалютныйУчет()

//// Функция возвращает ИСТИНА, если в конфигурации ведется учет по подразделениями.
//
Функция ВестиУчетПоПодразделениям() Экспорт

	Если Не ТарификацияБПВызовСервераПовтИсп.РазрешенУчетОбособленныхПодразделений() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям");
КонецФункции

// Функция возвращает ИСТИНА, если документ считается проведенным.
//
Функция ДокументПроведен(ДокументСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(ДокументСсылка) Тогда

		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Состояние");		
		Возврат (РеквизитыДокумента.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияБух") Тогда
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ПометкаУдаления");
		Возврат НЕ РеквизитыДокумента.ПометкаУдаления;

	Иначе
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Проведен");
		Возврат РеквизитыДокумента.Проведен;
	
	КонецЕсли;	

КонецФункции // ДокументПроведен()

// Процедура формирует сообщение об учетных ошибках, обнаруженных при выполнении рег. операции.
// Оставлена для совместимости.
// Вызовы проверок следует размещать в процедуре ПроверитьИсходныеДанныеИНастройки() модуля регламентной операции 
// и описание ошибок помещать в коллекцию ошибок - см. общий модуль ЗакрытиеМесяцаСообщенияОбОшибках
// ДобавитьОписаниеОшибки(), ДобавитьПростоеОписаниеОшибки()
//
Процедура СообщитьОбОшибкеРегОперацииСНавигацией(Знач ТекстСообщения, Знач СсылкаНаОшибочныйОбъект = Неопределено, Отказ = Истина, РегОперация) Экспорт
	
	ЗакрытиеМесяцаСообщенияОбОшибках.ОтправитьСлужебноеСообщение(
		ТекстСообщения, 
		СсылкаНаОшибочныйОбъект, 
		Отказ, 
		РегОперация);
	
КонецПроцедуры // СообщитьОбОшибкеРегОперацииСНавигацией()

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОПРЕДЕЛЕНИЯ ХАРАКТЕРА ОПЕРАЦИИ ПО ТИПУ РЕГИСТРАТОРОВ

Функция ДокументЯвляетсяРазукомплектацией(СсылкаНаДокумент) Экспорт

	Возврат ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.КомплектацияНоменклатуры")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаДокумент, "ВидОперации") = ПредопределенноеЗначение("Перечисление.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация"); 

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ДОГОВОРА

//Функция возвращает организацию по договору
//
Функция ПолучитьОрганизациюПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Организация");
	
КонецФункции // ПолучитьОрганизациюПоДоговору()

//Функция возвращает контрагента по договору
//
Функция ПолучитьКонтрагентаПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора());
	
КонецФункции // ПолучитьКонтрагентаПоДоговору()

//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      ПеречислениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
		"ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
	Если РеквизитыДоговора.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
	 ИЛИ НЕ ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов) Тогда
	
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
	
	ИначеЕсли РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
	
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;
	
	Иначе
	
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
	
	Конецесли;
	
	Возврат ВидРасчетовПоДоговору;

КонецФункции

//Функция возвращает валюту договора
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      СправочникСсылка.Валюты
Функция ВалютаВзаиморасчетов(ДоговорКонтрагента) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
КонецФункции // ВалютаВзаиморасчетов()

//Функция возвращает признак расчетов в условных единицах
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      Булево (ИСТИНА если расчеты ведутся в условных единицах)
Функция РасчетыВУсловныхЕдиницах(ДоговорКонтрагента) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
	
КонецФункции // РасчетыВУсловныхЕдиницах()

//Функция возвращает пустое значение договора
//
Функция ПолучитьПустоеЗначениеДоговора() Экспорт
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции // ПолучитьПустоеЗначениеДоговора()

//Функция возвращает текст, для получения свойства ВидДоговора в запросе
//
Функция ТекстЗапросаВидДоговора(ИмяПоля) Экспорт
	
	// Для УП будет
	//
	// ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов).ХозяйственнаяОперация
	
	ИмяРеквизитаВидДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	Возврат СтрЗаменить("ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов)." + ИмяРеквизитаВидДоговора, "ПолеДоговор", ИмяПоля); 
	
КонецФункции // ТекстЗапросаВидДоговора()

//Функция возвращает текст, для получения свойства РасчетыВУсловныхЕдиницах в запросе
//
Функция ТекстЗапросаРасчетыВУЕ(ИмяПоля) Экспорт
	
	Возврат СтрЗаменить("ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах", "ПолеДоговор", ИмяПоля);
	
КонецФункции // ТекстЗапросаРасчетыВУЕ()

// Функция ТекстЗапросаУчетАгентскогоНДС возвращает текст для получения свойства 
// УчетАгентскогоНДС для договора.
//
Функция ТекстЗапросаУчетАгентскогоНДС(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.ДоговорыКонтрагентов).УчетАгентскогоНДС";

КонецФункции // ТекстЗапросаУчетАгентскогоНДС()

// Функция ТекстЗапросаВидАгентскогоДоговора возвращает текст запроса для получения
// свойства договора ВидАгентскогоДоговора.
//
Функция ТекстЗапросаВидАгентскогоДоговора(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.ДоговорыКонтрагентов).ВидАгентскогоДоговора";

КонецФункции // ТекстЗапросаВидАгентскогоДоговора()

// Функция ЭтоВидДоговораСПоставщиком возвращает ИСТИНА, 
// если договор с таким видом является договором с поставщиком.
//
Функция ЭтоВидДоговораСПоставщиком(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;

КонецФункции // ЭтоВидДоговораСПоставщиком()

// Функция ЭтоВидДоговораСПокупателем возвращает ИСТИНА, 
// если договор с таким видом является договором с покупателем.
//
Функция ЭтоВидДоговораСПокупателем(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;

КонецФункции // ЭтоВидДоговораСПокупателем()

// Функция ЭтоВидДоговораСКомитентом возвращает ИСТИНА, 
// если договор с таким видом является договором с комитентом.
//
Функция ЭтоВидДоговораСКомитентом(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

КонецФункции // ЭтоВидДоговораСКомитентом()

// Функция ЭтоВидДоговораСКомиссионером возвращает ИСТИНА, 
// если договор с таким видом является договором с комиссионером.
//
Функция ЭтоВидДоговораСКомиссионером(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;

КонецФункции // ЭтоВидДоговораСКомиссионером()

// Функция ЭтоВидДоговораСКомитентом возвращает ИСТИНА, 
// если договор с таким видом является договором с комитентом.
//
Функция ЭтоВидДоговораСКомитентомНаЗакупку(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку;

КонецФункции // ЭтоВидДоговораСКомитентом()

// Функция ЭтоВидДоговораСКомиссионером возвращает ИСТИНА, 
// если договор с таким видом является договором с комиссионером.
//
Функция ЭтоВидДоговораСКомиссионеромНаЗакупку(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;

КонецФункции // ЭтоВидДоговораСКомиссионером()

// Функция ЭтоВидДоговораСФакторинговойКомпанией возвращает ИСТИНА, 
// если договор с таким видом является договором с факторинговой компанией.
//
Функция ЭтоВидДоговораСФакторинговойКомпанией(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией;

КонецФункции // ЭтоВидДоговораСФакторинговойКомпанией()

// Функция ЭтоВидДоговораСТранспортнойКомпанией возвращает ИСТИНА, 
// если договор с таким видом является договором с транспортной компанией.
//
Функция ЭтоВидДоговораСТранспортнойКомпанией(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = ПолучитьВидДоговораСТранспортнойКомпанией();

КонецФункции

// Функция ПолучитьВидДоговораСПоставщиком возвращает значение вида договоров, 
// которые используются при расчетах с поставщиками.
//
Функция ПолучитьВидДоговораСПоставщиком() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;

КонецФункции // ПолучитьВидДоговораСПоставщиком()

// Функция ПолучитьВидДоговораСПокупателем возвращает значение вида договоров, 
// которые используются при расчетах с покупателями.
//
Функция ПолучитьВидДоговораСПокупателем() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;

КонецФункции // ПолучитьВидДоговораСПокупателем()

// Функция ПолучитьВидДоговораСКомиссионером возвращает значение вида договоров, 
// которые используются при расчетах с комиссионерами.
//
Функция ПолучитьВидДоговораСКомиссионером() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;

КонецФункции // ПолучитьВидДоговораСКомиссионером()

// Функция ПолучитьВидДоговораСКомитентом возвращает значение вида договоров, 
// которые используются при расчетах с комитентами.
//
Функция ПолучитьВидДоговораСКомитентом() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

КонецФункции // ПолучитьВидДоговораСКомитентом()

// Функция ПолучитьВидДоговораСКомиссионеромНаЗакупку возвращает значение вида договоров, 
// которые используются при расчетах с комиссионерами на закупку.
//
Функция ПолучитьВидДоговораСКомиссионеромНаЗакупку() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;

КонецФункции // ПолучитьВидДоговораСКомиссионеромНаЗакупку()

// Функция ПолучитьВидДоговораСКомитентомНаЗакупку возвращает значение вида договоров, 
// которые используются при расчетах с комитентами на закупку.
//
Функция ПолучитьВидДоговораСКомитентомНаЗакупку() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку;

КонецФункции // ПолучитьВидДоговораСКомитентом()

// Функция ПолучитьВидДоговораСФакторинговойКомпанией возвращает значение вида договоров, 
// которые используются при расчетах с комиссионерами.
//
Функция ПолучитьВидДоговораСФакторинговойКомпанией() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией;

КонецФункции // ПолучитьВидДоговораСФакторинговойКомпанией()

// Функция ПолучитьВидДоговораСТранспортнойКомпанией возвращает значение вида договоров, 
// которые используются при расчетах с транспортными компаниями.
//
Функция ПолучитьВидДоговораСТранспортнойКомпанией() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией;

КонецФункции

// Функция ПолучитьМассивВидовДоговоров возвращает массив видов договоров
// в соответствии с переданными параметрами. Функцию можно использовать для
// сокращения числа вызова отдельных функций, возвращающих по одному значению.
//
// Параметры:
//		СПоставщиком - Булево, признак включения видов договоров с поставщиком
//		СПокупателем - Булево, признак включения видов договоров с покупателем
//		СКомитентом  - Булево, признак включения видов договоров с комитентом
//		СКомиссионером  - Булево, признак включения видов договоров с комиссионером
//
Функция ПолучитьМассивВидовДоговоров(СПоставщиком = Ложь, СПокупателем = Ложь, 
	СКомитентом = Ложь, СКомиссионером = Ложь, 
	СКомитентомНаЗакупку = Ложь, СКомиссионеромНаЗакупку = Ложь, Прочее = Ложь,
	СФакторинговойКомпанией = Ложь, СТранспортнойКомпанией = Ложь) Экспорт

	МассивВидыДоговоров = Новый Массив;
	
	Если СПоставщиком Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	КонецЕсли;

	Если СПокупателем Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	КонецЕсли;
	
	Если СТранспортнойКомпанией Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией);
	КонецЕсли; 

	Если СКомитентом Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	КонецЕсли;

	Если СКомиссионером Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;

	Если СКомитентомНаЗакупку Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	КонецЕсли;

	Если СКомиссионеромНаЗакупку Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	КонецЕсли;

	Если Прочее Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;
	
	Если СФакторинговойКомпанией Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
	КонецЕсли;
	
	Возврат МассивВидыДоговоров;

КонецФункции // ПолучитьМассивВидовДоговоров()

// Функция возвращает договор с контрагентом из переданного документа.
//
Функция ПолучитьДоговорКонтрагентаИзДокумента(ДокументОснование) Экспорт

	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		// Взять первый договор из табличной части
		Если ДокументОснование.ДоговорКонтрагента.Пустая() Тогда
			Если ДокументОснование.РасшифровкаПлатежа.Количество() > 0 Тогда
				ДоговорКонтрагента = ДокументОснование.РасшифровкаПлатежа[0].ДоговорКонтрагента;
			КонецЕсли;
		Иначе
			ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;
		КонецЕсли;

	КонецЕсли;

	Возврат ДоговорКонтрагента;

КонецФункции // ПолучитьДоговорКонтрагентаИзДокумента()

// Функция ПолучитьРеквизитыДоговора() возвращает структуру с реквизитами договора, 
// используемыми при проведении документов по регламентированному учету. Функция используется 
// для унификации имен реквизитов справочника ДоговорыКонтрагентов при обращении к ним 
// из разных конфигураций, при этом типы самих реквизитов могут различаться в разных 
// конфигурациях.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//
// Возвращаемое значение:
//  Структура с ключами:
//		Ссылка				 - СправочникСсылка.ДоговорыКонтрагентов, ссылка на сам договор
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты, валюта взаиморасчетов по договору
//		Организация 		 - СправочникСсылка.Организации, организация, с которой заключен договор
//		Владелец 			 - СправочникСсылка.Контрагент, контрагент, с которым заключен договор
//		ВидДоговора 		 - ПеречислениеСсылка.ВидыДоговоровКонтрагентов  (БП)
//							   или ПеречислениеСсылка.ХозяйственныеОперации (УП) 
//		ТипЦен				 - СправочникСсылка.ТипыЦенНоменклатуры (БП)
//							   или НЕОПРЕДЕЛЕНО (УП)
//		УчетАгентскогоНДС	 - Булево
//		ВидАгентскогоДоговора- ПеречислениеСсылка.ВидыАгентскихДоговоров
//		РасчетыВУсловныхЕдиницах - Булево
//		
//		
Функция ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента) Экспорт

	СтруктураРеквизиты = Новый Структура();
	СтруктураРеквизиты.Вставить("Ссылка",  				Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВалютаВзаиморасчетов",	Справочники.Валюты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Владелец",				Справочники.Контрагенты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Организация",			Справочники.Организации.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ТипЦен",				Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВидДоговора",			Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("УчетАгентскогоНДС",	Ложь);
	СтруктураРеквизиты.Вставить("НДСПоСтавкам4и2",		Ложь);
	СтруктураРеквизиты.Вставить("ВидАгентскогоДоговора",Перечисления.ВидыАгентскихДоговоров.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("РасчетыВУсловныхЕдиницах",Ложь);

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
																		"Ссылка,
																		|ВалютаВзаиморасчетов,
																		|Владелец,
																		|Организация,
																		|ТипЦен,
																		|ВидДоговора,
																		|УчетАгентскогоНДС,
																		|НДСПоСтавкам4и2,
																		|ВидАгентскогоДоговора,
																		|РасчетыВУсловныхЕдиницах");
	КонецЕсли;
	
	Возврат СтруктураРеквизиты;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ СКЛАДА

// Функция ТекстЗапросаНоменклатурнаяГруппаСклада возвращает текст запроса
// для получения НоменклатурнойГруппы из склада.
//
Функция ТекстЗапросаНоменклатурнаяГруппаСклада(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.Склады).НоменклатурнаяГруппа"; 

КонецФункции // ТекстЗапросаНоменклатурнаяГруппаСклада()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ НОМЕНКЛАТУРЫ

// Возвращает сведения о номенклатуре
//
// Параметры:
//  Номенклатура       - номенклатура
//  ПараметрыОбъекта   - структура содержащая поля:
//  - Дата                    - обязательный
//  - Организация             - обязательный
//  - ДеятельностьНаПатенте   - не обязательный
//  - Склад                   - не обязательный
//  - ТипЦен                  - не обязательный
//  - ВалютаДокумента         - не обязательный
//  - КурсВзаиморасчетов      - не обязательный
//  - КратностьВзаиморасчетов - не обязательный
//  - СуммаВключаетНДС        - не обязательный
//  - СтавкаНДС               - не обязательный (Если параметр передан,
//    то будет использована переданная ставка, иначе ставка из номенклатуры)
//
// Возвращаемое значение:
//  Структура - структура сведений о номенклатуре.
//
Функция ПолучитьСведенияОНоменклатуре(Номенклатура, ПараметрыОбъекта, ОпределятьСчета = Истина, ОпределятьЦены = Истина) Экспорт

	Если ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	СписокНоменклатуры.Добавить(Номенклатура);
	
	СведенияОНоменклатуре = ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ПараметрыОбъекта, ОпределятьСчета, ОпределятьЦены).Получить(Номенклатура);
	
	Возврат СведенияОНоменклатуре;

КонецФункции

// Возвращает сведения о массиве номенклатуры
//
// Параметры:
//  СписокНоменклатуры - массив номенклатуры
//  ПараметрыОбъекта   - структура содержащая поля:
//  - Дата                    - обязательный
//  - Организация             - обязательный
//  - ДеятельностьНаПатенте   - не обязательный
//  - Склад                   - не обязательный
//  - ТипЦен                  - не обязательный
//  - ВалютаДокумента         - не обязательный
//  - КурсВзаиморасчетов      - не обязательный
//  - КратностьВзаиморасчетов - не обязательный
//  - СуммаВключаетНДС        - не обязательный
//  - СтавкаНДС               - не обязательный (Если параметр передан,
//    то будет использована переданная ставка, иначе ставка из номенклатуры)
//
// Возвращает соответствие:
//  Ключ     - номенклатура
//  Значение - структура сведений о номенклатуре
//
Функция ПолучитьСведенияОСпискеНоменклатуры(Знач СписокНоменклатуры, ПараметрыОбъекта, ОпределятьСчета = Истина, ОпределятьЦены = Истина) Экспорт
	Перем ДеятельностьНаПатенте;
	Перем Склад;
	Перем СтавкаНДС, ЦенаВключаетНДС, СуммаВключаетНДС, ДокументБезНДС;
	Перем ВалютаДокумента, КурсДокумента, КратностьДокумента;
	Перем ТипЦен, ТипЦенРозничнойТорговли, ТипЦенПлановойСебестоимости;
	Перем СпособЗаполненияЦены, СпособЗаполненияРозничнойЦены, СпособЗаполненияПлановойСебестоимости;
	Перем ТаблицаЦен, ТаблицаЦенВРознице, ТаблицаЦенПлановойСебестоимости;
	Перем Реализация, РозничнаяПродажа;
	Перем ЗаполнятьЦеныПродажаиПокупка;
	
	Дата        = ПараметрыОбъекта.Дата;
	Организация = ПараметрыОбъекта.Организация;
	
	Если НЕ ПараметрыОбъекта.Свойство("Реализация", Реализация) Тогда
		Реализация = Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыОбъекта.Свойство("РозничнаяПродажа", РозничнаяПродажа) Тогда
		РозничнаяПродажа = Ложь;
	КонецЕсли;
	
	ВедетсяУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ВедетсяУчетИмпортныхТоваров");
	ОсуществляетсяРеализацияТоваровУслугКомитентов = ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПрименяетсяЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Организация, Дата);
	ПрименяетсяОсвобождениеОтУплатыНДС = УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Организация, Дата);
	ПрименяетсяОсобыйПорядокНалогообложения
		= УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, Дата);
	Если НЕ ПараметрыОбъекта.Свойство("ДеятельностьНаПатенте", ДеятельностьНаПатенте) Тогда
		ДеятельностьНаПатенте = Ложь;
	КонецЕсли;
	
	ЗаполнятьСчетаУчета = ОпределятьСчета И ПравоДоступа("Чтение", Метаданные.ПланыСчетов.Хозрасчетный);
	
	// Ставка НДС реализации может зависеть от счетов учета
	Если Реализация
		//Если применяется ЕНВД или Патент
		И ((ПрименяетсяЕНВД ИЛИ ДеятельностьНаПатенте)
		// Для розничной продажи - счета учета нужны для печати чеков
		ИЛИ РозничнаяПродажа
		ИЛИ ОсуществляетсяРеализацияТоваровУслугКомитентов 
		И (НЕ ПлательщикНДС ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС)) Тогда
		
		Если НЕ ПравоДоступа("Чтение", Метаданные.ПланыСчетов.Хозрасчетный) ИЛИ 
			НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СчетаУчетаНоменклатуры) Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		ОпределятьСчета = Истина;
	КонецЕсли;
	
	ОпределятьСчета = ОпределятьСчета И ПравоДоступа("Чтение", Метаданные.ПланыСчетов.Хозрасчетный);
	
	ПараметрыОбъекта.Свойство("СтавкаНДС", 							   СтавкаНДС);
	ПараметрыОбъекта.Свойство("ТипЦенПлановойСебестоимости", 		   ТипЦенПлановойСебестоимости);
	ПараметрыОбъекта.Свойство("СпособЗаполненияЦены", 				   СпособЗаполненияЦены);
	ПараметрыОбъекта.Свойство("СпособЗаполненияРозничнойЦены", 		   СпособЗаполненияРозничнойЦены);
	ПараметрыОбъекта.Свойство("СпособЗаполненияПлановойСебестоимости", СпособЗаполненияПлановойСебестоимости);
	ПараметрыОбъекта.Свойство("ЗаполнятьЦеныПродажаиПокупка",          ЗаполнятьЦеныПродажаиПокупка);
	ДокументБезНДС = ?(ПараметрыОбъекта.Свойство("ДокументБезНДС"), ПараметрыОбъекта.ДокументБезНДС, Ложь);
	
	
	Если ПараметрыОбъекта.Свойство("Склад", Склад) И ЗначениеЗаполнено(Склад) Тогда
		ТипЦенРозничнойТорговли = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипЦенРозничнойТорговли");
	КонецЕслИ;
	
	Если ПараметрыОбъекта.Свойство("ТипЦен", ТипЦен) И ЗначениеЗаполнено(ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыОбъекта.Свойство("СуммаВключаетНДС", СуммаВключаетНДС) Тогда
		СуммаВключаетНДС = ЦенаВключаетНДС;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если НЕ ПараметрыОбъекта.Свойство("ВалютаДокумента", ВалютаДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		
		ПараметрыОбъекта.Свойство("КурсДокумента", КурсДокумента);
		ПараметрыОбъекта.Свойство("КратностьДокумента", КратностьДокумента);
		
		Если КурсДокумента = Неопределено ИЛИ КратностьДокумента = Неопределено Тогда
			ПараметрыОбъекта.Свойство("КурсВзаиморасчетов", КурсДокумента);
			ПараметрыОбъекта.Свойство("КратностьВзаиморасчетов", КратностьДокумента);
		КонецЕсли;
		
		Если КурсДокумента = Неопределено ИЛИ КратностьДокумента = Неопределено Тогда
			КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсДокумента		= КурсНаДату.Курс;
			КратностьДокумента	= КурсНаДату.Кратность;
		КонецЕсли;
		
	Иначе
		КурсДокумента		= 1;
		КратностьДокумента	= 1;
	КонецЕсли;
	
	ИменаРеквизитов =
		"Код, Наименование, НаименованиеПолное, Артикул,
		|ЕдиницаИзмерения, КодТНВЭД, ВидСтавкиНДС,
		|Услуга, НоменклатурнаяГруппа,
		|СтранаПроисхождения, НомерГТД,
		|СтатьяЗатрат, ОсновнаяСпецификацияНоменклатуры,
		|ПродукцияМаркируемаяДляГИСМ, ПериодичностьУслуги";
	
	ИменаРеквизитов = ИменаРеквизитов + "," + ИнтеграцияИСМПБП.СписокПараметровНоменклатурыИС();
		
	СписокНоменклатурыБезПустыхЗначений = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокНоменклатуры);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(СписокНоменклатурыБезПустыхЗначений);
	
	СоответствиеСведенийОНоменклатуре = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНоменклатурыБезПустыхЗначений, ИменаРеквизитов);
	ДатаОпределенияВидаСтавкиНДС = ?(ЗначениеЗаполнено(Дата), Дата, ОбщегоНазначения.ТекущаяДатаПользователя());
	СоответствиеСведенийОВидахСтавкиНоменклатурыИзИстории = Справочники.Номенклатура.ВидыСтавокНаДатуИзИстории(
		СписокНоменклатурыБезПустыхЗначений, ДатаОпределенияВидаСтавкиНДС);
	
	Если ОпределятьСчета Тогда
		// При особом порядке налогообложения будут использованы счета ЕНВД
		ОсобыйПорядокНалогообложения = ПрименяетсяОсобыйПорядокНалогообложения
			ИЛИ (ДеятельностьНаПатенте И Дата >= УчетПСН.ДатаНачалаДействияПатентнойСистемы());
			
		СоответствиеСчетовУчета = ПолучитьСчетаУчетаСпискаНоменклатуры(
			Организация, СписокНоменклатуры, Склад, Дата, ОсобыйПорядокНалогообложения);
	Иначе
		СоответствиеСчетовУчета = Новый Соответствие;
	КонецЕсли; 
	
	Если ОпределятьЦены Тогда
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			ТаблицаЦен = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, ТипЦен, Дата);
		ИначеЕсли ЗначениеЗаполнено(СпособЗаполненияЦены) Тогда
			ТаблицаЦен = Ценообразование.ПолучитьТаблицуЦенНоменклатурыДокументов(СписокНоменклатуры, 
				СпособЗаполненияЦены,
				Дата);
		ИначеЕсли ЗначениеЗаполнено(ЗаполнятьЦеныПродажаИПокупка) Тогда
			Если ЗаполнятьЦеныПродажаИПокупка Тогда
				ТаблицаЦен = Ценообразование.ПолучитьТаблицуЦенНоменклатурыПродажаИПокупка(
					СписокНоменклатуры, Дата);
			КонецЕсли;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ТипЦенРозничнойТорговли) Тогда
			ТаблицаЦенВРознице = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, ТипЦенРозничнойТорговли, Дата);
		ИначеЕсли ЗначениеЗаполнено(СпособЗаполненияРозничнойЦены) Тогда 
			ТаблицаЦенВРознице = Ценообразование.ПолучитьТаблицуЦенНоменклатурыДокументов(СписокНоменклатуры,
				СпособЗаполненияРозничнойЦены,
				Дата);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда
			ТаблицаЦенПлановойСебестоимости = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, ТипЦенПлановойСебестоимости, Дата);
		ИначеЕсли ЗначениеЗаполнено(СпособЗаполненияПлановойСебестоимости) Тогда 
			ТаблицаЦенПлановойСебестоимости = Ценообразование.ПолучитьТаблицуЦенНоменклатурыДокументов(СписокНоменклатуры,
				СпособЗаполненияПлановойСебестоимости,
				Дата);
		КонецЕсли;
	КонецЕсли;
	
	ВидСубконтоНоменклатурныеГруппы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	ВидСубконтоПрочиеДоходыИРасходы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	
	// Определим основную номенклатурную группу
	ОсновнаяНоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		
		ЦенаВключаетНДСПоДокументу = ЦенаВключаетНДС;
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(Номенклатура);
		СведенияОВидеСтавкиНДСИзИстории = СоответствиеСведенийОВидахСтавкиНоменклатурыИзИстории.Получить(Номенклатура);
		
		Если СведенияОНоменклатуре = Неопределено Тогда
			СведенияОНоменклатуре = Новый Структура(ИменаРеквизитов);
			СоответствиеСведенийОНоменклатуре.Вставить(Номенклатура, СведенияОНоменклатуре);
			
			ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ПустаяСсылка();
		Иначе
			ВидПродукцииИС = ИнтеграцияИСМПБП.ВидПродукцииИС(СведенияОНоменклатуре);
		КонецЕсли;
		
		
		СведенияОНоменклатуре.Вставить("ВидПродукцииИС",       ВидПродукцииИС);
		СведенияОНоменклатуре.Вставить("МаркируемаяПродукция", ВидПродукцииИС <> Перечисления.ВидыПродукцииИС.ПустаяСсылка());
		
		Если СведенияОВидеСтавкиНДСИзИстории = Неопределено Тогда
			ВидСтавкиНДС = СведенияОНоменклатуре.ВидСтавкиНДС;
		Иначе
			ВидСтавкиНДС = СведенияОВидеСтавкиНДСИзИстории;
		КонецЕсли;
		
		СведенияОНоменклатуре.Вставить("СтавкаНДС", 
			Перечисления.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС, ДатаОпределенияВидаСтавкиНДС));
		
		// Если используется одна номенклатурная группа, то используем её, независимо от того, что установлено в Номенклатуре
		Если ЗначениеЗаполнено(ОсновнаяНоменклатурнаяГруппа) Тогда
			СведенияОНоменклатуре.НоменклатурнаяГруппа = ОсновнаяНоменклатурнаяГруппа;
		КонецЕсли;
		
		Если ПустаяСтрока(СведенияОНоменклатуре.НаименованиеПолное) Тогда
			СведенияОНоменклатуре.НаименованиеПолное = СведенияОНоменклатуре.Наименование;
		КонецЕсли;
		
		// Дополним наименование полное периодичностью услуги
		СведенияОНоменклатуре.НаименованиеПолное = РаботаСНоменклатуройКлиентСервер.СодержаниеУслуги(
			СведенияОНоменклатуре.НаименованиеПолное,
			СведенияОНоменклатуре.ПериодичностьУслуги,
			Дата);
		
		Если ЗначениеЗаполнено(СведенияОНоменклатуре.НоменклатурнаяГруппа) Тогда
			СведенияОНоменклатуре.Вставить("СпособУчетаНДС", 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОНоменклатуре.НоменклатурнаяГруппа, "СпособУчетаНДС"));	
		Иначе
			СведенияОНоменклатуре.Вставить("СпособУчетаНДС", Перечисления.СпособыУчетаНДС.ПустаяСсылка());	
		КонецЕсли;
		
		СведенияОНоменклатуре.Вставить("Коэффициент", ?(ЗначениеЗаполнено(СведенияОНоменклатуре.ЕдиницаИзмерения), 1, 0));
		
		СчетаУчета = СоответствиеСчетовУчета.Получить(Номенклатура);
		
		Если ЗаполнятьСчетаУчета Тогда
			СведенияОНоменклатуре.Вставить("СчетаУчета", СчетаУчета);
		Иначе
			СведенияОНоменклатуре.Вставить("СчетаУчета", Неопределено);
		КонецЕсли; 
		
		СведенияОНоменклатуре.Вставить("АлкогольнаяПродукция", Справочники.Номенклатура.ЭтоМаркируемаяАлкогольнаяПродукция(Номенклатура));
		Комиссионный	= Ложь;
		ДоходЕНВД		= Ложь;
		
		ВидСубконто				= Неопределено;
		ВидСубконтоТипЗначения	= Неопределено;
		Субконто				= Неопределено;
		
		Если СчетаУчета <> Неопределено Тогда
			
			СвойстваСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетаУчета.СчетУчета);
			Комиссионный = СвойстваСчетаУчета.Забалансовый;
			
			ДоходЕНВД = (ПрименяетсяЕНВД Или ДеятельностьНаПатенте Или РозничнаяПродажа)
				И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаУчета.СчетДоходов);
			
			СвойстваСчетаДоходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетаУчета.СчетДоходов);
			
			ВидСубконто				= СвойстваСчетаДоходов.ВидСубконто1;
			ВидСубконтоТипЗначения	= СвойстваСчетаДоходов.ВидСубконто1ТипЗначения;
			Если ВидСубконто = ВидСубконтоНоменклатурныеГруппы Тогда
				Субконто = СведенияОНоменклатуре.НоменклатурнаяГруппа;
			ИначеЕсли ВидСубконто = ВидСубконтоПрочиеДоходыИРасходы Тогда
				Субконто = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РеализацияПрочегоИмущества");
			КонецЕсли;
			
		КонецЕсли;
		
		СведенияОНоменклатуре.Вставить("Комиссионный",	Комиссионный);
		СведенияОНоменклатуре.Вставить("ДоходЕНВД",		ДоходЕНВД);
		
		СведенияОНоменклатуре.Вставить("ВидСубконто",				ВидСубконто);
		СведенияОНоменклатуре.Вставить("ВидСубконтоТипЗначения",	ВидСубконтоТипЗначения);
		СведенияОНоменклатуре.Вставить("Субконто",					Субконто);
		
		СведенияОНоменклатуре.Вставить("ОтражениеВУСН", ?(Комиссионный,
			Перечисления.ОтражениеВУСН.НеПринимаются, Перечисления.ОтражениеВУСН.Принимаются));
			
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда;
			// Ставка НДС передана в параметрах
			СведенияОНоменклатуре.СтавкаНДС = СтавкаНДС;
			
		ИначеЕсли Реализация 
			И НЕ (СведенияОНоменклатуре.Комиссионный 
			И НЕ ДокументБезНДС) Тогда
			
			Если ДоходЕНВД ИЛИ НЕ ПлательщикНДС 
				ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС Тогда
				СведенияОНоменклатуре.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			
		ИначеЕсли ПараметрыОбъекта.Свойство("СпособЗаполненияСтавкиНДС") Тогда
			
			СпособЗаполненияСтавкиНДС = ПараметрыОбъекта.СпособЗаполненияСтавкиНДС;
			
			Если ПараметрыОбъекта.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров Тогда 
				СведенияОНоменклатуре.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Дата);
			ИначеЕсли ПараметрыОбъекта.ПоставщикРезидентТаможенногоСоюза И НЕ ПараметрыОбъекта.УчетАгентскогоНДС Тогда
				СведенияОНоменклатуре.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
			ИначеЕсли СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.БезНДС
				И НЕ ПараметрыОбъекта.УчетАгентскогоНДС Тогда
				СведенияОНоменклатуре.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			
		ИначеЕсли НЕ Реализация 
			И ПараметрыОбъекта.Свойство("ДоговорКонтрагента")Тогда 
			
			Если ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) Тогда 
				РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбъекта.ДоговорКонтрагента, "УчетАгентскогоНДС,Владелец,ВидАгентскогоДоговора");
				СпособЗаполненияСтавкиНДС = РаботаСДоговорамиКонтрагентовБП.СпособЗаполненияСтавкиНДСПоДоговору(ПараметрыОбъекта.ДоговорКонтрагента);
				
				Если РеквизитыДоговора.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров Тогда
					СведенияОНоменклатуре.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Дата);
				ИначеЕсли СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.БезНДС
					И НЕ РеквизитыДоговора.УчетАгентскогоНДС Тогда
					
					Если УчетНДС.КонтрагентРезидентТаможенногоСоюза(РеквизитыДоговора.Владелец) Тогда
						СведенияОНоменклатуре.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
					Иначе
						СведенияОНоменклатуре.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Цена = 0;
		Если ОпределятьЦены И (ЗначениеЗаполнено(ТипЦен) ИЛИ ЗначениеЗаполнено(СпособЗаполненияЦены)
			ИЛИ ЗначениеЗаполнено(ЗаполнятьЦеныПродажаиПокупка)) Тогда
			
			НайденнаяСтрока	= ТаблицаЦен.Найти(Номенклатура, "Номенклатура");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				ЦенаВключаетНДСПоДокументу = НайденнаяСтрока.ЦенаВключаетНДС;
				Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
					НайденнаяСтрока.Цена,
					НайденнаяСтрока.Валюта, ВалютаДокумента,
					НайденнаяСтрока.Курс, КурсДокумента,
					НайденнаяСтрока.Кратность, КратностьДокумента);
					
				Если ЗначениеЗаполнено(ТипЦен) И (НайденнаяСтрока.Валюта <> ВалютаДокумента) Тогда
					Цена = Ценообразование.ОкруглитьЦену(Цена, ТипЦен);
				КонецЕсли;
					
				Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					Цена, ЦенаВключаетНДСПоДокументу, СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
					
			КонецЕсли;
			
		КонецЕсли;
		СведенияОНоменклатуре.Вставить("Цена", Цена);
		СведенияОНоменклатуре.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДСПоДокументу);
		
		ЦенаВРознице = 0;
		Если ОпределятьЦены И (ЗначениеЗаполнено(ТипЦенРозничнойТорговли) ИЛИ ЗначениеЗаполнено(СпособЗаполненияРозничнойЦены)) Тогда
			
			НайденнаяСтрока = ТаблицаЦенВРознице.Найти(Номенклатура, "Номенклатура");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				ЦенаВРознице = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
					НайденнаяСтрока.Цена,
					НайденнаяСтрока.Валюта, ВалютаРегламентированногоУчета,
					НайденнаяСтрока.Курс, 1,
					НайденнаяСтрока.Кратность, 1);
					
				Если ЗначениеЗаполнено(ТипЦенРозничнойТорговли) И (НайденнаяСтрока.Валюта <> ВалютаРегламентированногоУчета) Тогда
					ЦенаВРознице = Ценообразование.ОкруглитьЦену(ЦенаВРознице, ТипЦен);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		СведенияОНоменклатуре.Вставить("ЦенаВРознице", ЦенаВРознице);
		
		Если ДоходЕНВД ИЛИ НЕ ПлательщикНДС Тогда
			СведенияОНоменклатуре.Вставить("СтавкаНДСВРознице", Перечисления.СтавкиНДС.БезНДС);
		Иначе
			СведенияОНоменклатуре.Вставить("СтавкаНДСВРознице", СведенияОНоменклатуре.СтавкаНДС);
		КонецЕсли;
		
		ПлановаяСтоимость = 0;
		Если ОпределятьЦены И (ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) ИЛИ ЗначениеЗаполнено(СпособЗаполненияПлановойСебестоимости)) Тогда
			
			НайденнаяСтрока = ТаблицаЦенПлановойСебестоимости.Найти(Номенклатура, "Номенклатура");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				ПлановаяСтоимость = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
					НайденнаяСтрока.Цена,
					НайденнаяСтрока.Валюта, ВалютаРегламентированногоУчета,
					НайденнаяСтрока.Курс, 1,
					НайденнаяСтрока.Кратность, 1);
					
				Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) И (НайденнаяСтрока.Валюта <> ВалютаРегламентированногоУчета) Тогда
					ПлановаяСтоимость = Ценообразование.ОкруглитьЦену(ПлановаяСтоимость, ТипЦен);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		СведенияОНоменклатуре.Вставить("ПлановаяСтоимость", ПлановаяСтоимость);
        
        Если НЕ ВедетсяУчетИмпортныхТоваров Тогда
        
        	СведенияОНоменклатуре.Вставить("НомерГТД", "");
            СведенияОНоменклатуре.Вставить("СтранаПроисхождения", "");
        
		КонецЕсли;
		
		//ИнтеграцияГИСМ
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольныеЗнакиГИСМ")
		 Или СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ = Неопределено Тогда
			СведенияОНоменклатуре.Вставить("ПродукцияМаркируемаяДляГИСМ", Ложь);
		КонецЕсли;
		//Конец ИнтеграцияГИСМ
		
	КонецЦикла;
	
	Возврат СоответствиеСведенийОНоменклатуре;

КонецФункции

// Функция возвращает Истина, если переданная номенклатура является услугой.
//
Функция НоменклатураЯвляетсяУслугой(Номенклатура) Экспорт

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Услуга");

КонецФункции // НоменклатураЯвляетсяУслугой()

// Функция возвращает выражение на языке запросов для получения признака услуги 
// от поля типа Номенклатура.
//
Функция ТекстЗапросаЭтоУслуга(ПолеНоменклатура) Экспорт

	Возврат "ЕСТЬNULL(ВЫРАЗИТЬ(" + ПолеНоменклатура + " КАК Справочник.Номенклатура).Услуга, ЛОЖЬ)";

КонецФункции // ТекстЗапросаЭтоУслуга

Функция ПустойВидНоменклатуры() Экспорт
	
	Возврат Справочники.ВидыНоменклатуры.ПустаяСсылка();
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОПРЕДЕЛЕНИЯ ТИПОВ

//Функция возвращает типы значений, для которых имеет смысл отбор по организации
//
Функция ТипыСвязанныеСОрганизацией() Экспорт
	
	Возврат Новый ОписаниеТипов(Документы.ТипВсеСсылки(), 
		"СправочникСсылка.БанковскиеСчета,СправочникСсылка.ПодразделенияОрганизаций,
		|СправочникСсылка.ДоговорыКонтрагентов,СправочникСсылка.РегистрацииВНалоговомОргане");
		
КонецФункции // ТипыСвязанныеСОрганизацией()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ОРГАНИЗАЦИИ

//Функция возвращает значение головной организации
//
Функция ГоловнаяОрганизация(Организация) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
КонецФункции // ГоловнаяОрганизация()

// Функция возвращает признак того, что организация является обособленным
// подразделением выделенным на отдельный баланс
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, которая может быть обособленным подразделением
// 
// Возвращаемое значение:
//  Булево - Истина, если запись справочника предназначена для учета операций филиала
//           (обособленного подразделения, выделенного на отдельный баланс)
//
Функция ОбособленноеПодразделение(Организация) Экспорт
	
	ЭтоОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОбособленноеПодразделение");
	
	Если ЭтоОбособленноеПодразделение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭтоОбособленноеПодразделение;
	
КонецФункции

// Формирует список головных организаций предприятия
//
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка,
	                      |	Организации.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.ГоловнаяОрганизация = Организации.Ссылка
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Наименование");

	СписокОрганизаций = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции

// Формирует список обособленных структурных подразделений организации
//
Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование  КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.Ссылка <> &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	СписокОП = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		СписокОП.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОП;

КонецФункции // ПолучитьСписокОбособленныхПодразделенийОрганизации()

// Функция ПолучитьБанковскийСчетПоУмолчанию возвращает ссылку на 
// банковский счет организации или контрагента по умолчанию.
//
// Параметры:
//	ЮрФизЛицо 	- СправочникСсылка.Организации, СправочникСсылка.Контрагенты, лицо, 
//					для которого возвращается банковский счет.
//	Валюта 		- СправочникСсылка.Валюты, требуется для единообразия с БРУ и УП
//
// Возвращаемое значение:
// 	СправочникСсылка.БанковскиеСчета - основной банковский счет.
//
Функция ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо, Валюта = Неопределено) Экспорт

	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ОсновнойБанковскийСчет");
		
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.Контрагенты")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		
		БанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
		
	КонецЕсли;
	
	Возврат БанковскийСчет;

КонецФункции // ПолучитьБанковскийСчетПоУмолчанию()

// Функция СтруктураОрганизации возвращает структуру с реквизитами организации
//
Функция СтруктураОрганизации(Организация) Экспорт

	Организации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	СписокОП = Новый СписокЗначений;
	Для Каждого ЭлементМассива Из Организации Цикл
		СписокОП.Добавить(ЭлементМассива);
	КонецЦикла;

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ГоловнаяОрганизация, ОбособленноеПодразделение");
	
	СписокГО = Новый СписокЗначений;
	СписокГО.Добавить(РеквизитыОрганизации.ГоловнаяОрганизация);
	
	Если РеквизитыОрганизации.ГоловнаяОрганизация = Организация
		И СписокОП.Количество() > 1 Тогда
		ТипОрганизации = "ГО";
	ИначеЕсли РеквизитыОрганизации.ОбособленноеПодразделение Тогда
		ТипОрганизации = "ОП";
	Иначе
		ТипОрганизации = "Простая";
	КонецЕсли;
		
	СвойстваОрганизации = Новый Структура("Тип, Организация, ГоловнаяОрганизация", ТипОрганизации, СписокОП, СписокГО);
	
	Возврат СвойстваОрганизации;
	
КонецФункции // СтруктураОрганизации()

// Возвращает перечень (массив) всех структурных частей переданной головной организации, имеющих отдельный баланс.
// В перечень входит головная организация и все ее обособленные подразделения на выделенном балансе.
// В перечень входят только те организации, данные по которым доступны текущему пользователю.
//
Функция ВсяОрганизация(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВЕДЕНИЙ ОБ ОРГАНИЗАЦИИ ИЛИ КОНТРАГЕНТЕ

// Предоставляет реквизиты компании (юридического лица или предпринимателя), например, для вывода в печатной форме.
//
// Параметры:
//  Компания		 - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - компания, реквизиты которой нужно получить
//  Период			 - Дата - дата, на которую нужно получить значения периодических реквизитов
//  БанковскийСчет	 - СправочникСсылка.БанковскиеСчета - банковский счет, реквизиты которого нужно включить в реквизиты компании.
//                     Если не передан, будут включены реквизиты основного банковского счета.
// 
// Возвращаемое значение:
// см. НовыйРеквизитыКомпании() - коллекция общепринятых реквизитов компании.
//
Функция СведенияОЮрФизЛице(Компания, Период = '00010101', Знач БанковскийСчет = Неопределено, ПлатежВБюджет = Ложь, ГосКонтракт = Неопределено) Экспорт
	
	Реквизиты = НовыйРеквизитыКомпании();
	
	Если Не ЗначениеЗаполнено(Компания) Тогда
		Возврат Реквизиты;
	КонецЕсли;
	
	Если ТипЗнч(Компания) = Тип("СправочникСсылка.Организации") Тогда
		ЗаполнитьРеквизитыОрганизации(Реквизиты, Компания, Период);
	ИначеЕсли ТипЗнч(Компания) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЗаполнитьРеквизитыКонтрагента(Реквизиты, Компания, Период);
	Иначе
		Возврат Реквизиты;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.БанковскиеСчета) Тогда
		
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			Если ЗначениеЗаполнено(ГосКонтракт) Тогда
				БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетПоГосОбронЗаказу(Компания, ГосКонтракт);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				БанковскийСчет = ПолучитьБанковскийСчетПоУмолчанию(Компания);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьРеквизитыБанковскогоСчета(Реквизиты, БанковскийСчет);
		
	КонецЕсли;
	
	// Вторичные данные
	Реквизиты.Представление               = СокрЛП(Реквизиты.Представление);
	Реквизиты.ПолноеНаименование          = СокрЛП(Реквизиты.ПолноеНаименование);
	Реквизиты.СокращенноеНаименование     = СокрЛП(Реквизиты.СокращенноеНаименование);
	Реквизиты.НаименованиеДляПечатныхФорм = СокрЛП(Реквизиты.НаименованиеДляПечатныхФорм);
	Реквизиты.ТекстКорреспондента         = СокрЛП(Реквизиты.ТекстКорреспондента);
	
	Если Не ЗначениеЗаполнено(Реквизиты.ПолноеНаименование) Тогда
		Если ЗначениеЗаполнено(Реквизиты.СокращенноеНаименование) Тогда
			Реквизиты.ПолноеНаименование = Реквизиты.СокращенноеНаименование;
		Иначе
			Реквизиты.ПолноеНаименование = Реквизиты.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Если ПлатежВБюджет И Не ПустаяСтрока(Реквизиты.ТекстКорреспондента) Тогда
		Реквизиты.ПолноеНаименование = Реквизиты.ТекстКорреспондента;
	КонецЕсли;
	
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И Не ПустаяСтрока(Реквизиты.СвидетельствоСерияНомер) Тогда
		Реквизиты.Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'свидетельство %1 от %2'"),
			Реквизиты.СвидетельствоСерияНомер,
			Формат(Реквизиты.СвидетельствоДатаВыдачи, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

// Конструктор коллекции, содержащей общепринятые реквизиты компании (юридического лица или индивидуального предпринимателя).
// 
// Возвращаемое значение:
// Структура - см. содержимое функции
//
Функция НовыйРеквизитыКомпании() Экспорт
	
	Реквизиты = Новый Структура();
	Реквизиты.Вставить("ЮридическоеФизическоеЛицо",          Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	// Наименования
	Реквизиты.Вставить("Представление",                      "");
	Реквизиты.Вставить("ПолноеНаименование",                 "");
	Реквизиты.Вставить("СокращенноеНаименование",            "");
	Реквизиты.Вставить("НаименованиеДляПечатныхФорм",        "");
	Реквизиты.Вставить("ФамилияИнициалыФизлица",             ""); // Фамилия И.О.
	Реквизиты.Вставить("ФИОФизлица",                         ""); // Фамилия Имя Отчество
	// Адреса и контактная информация
	Реквизиты.Вставить("ЮридическийАдрес",                   "");
	Реквизиты.Вставить("ЗначенияПолейЮридическийАдрес",      ""); // структурированное строковое представление адреса (XML или в формате "9 запятых")
	Реквизиты.Вставить("ЗначениеJSONЮридическийАдрес",       ""); // структурированное строковое представление адреса (JSON)
	Реквизиты.Вставить("ФактическийАдрес",                   ""); 
	Реквизиты.Вставить("ЗначенияПолейФактическийАдрес",      ""); // структурированное строковое представление адреса (XML или в формате "9 запятых")
	Реквизиты.Вставить("ЗначениеJSONФактическийАдрес",       ""); // структурированное строковое представление адреса (JSON)
	Реквизиты.Вставить("ПочтовыйАдрес",                      ""); 
	Реквизиты.Вставить("ЗначенияПолейПочтовыйАдрес",         ""); // структурированное строковое представление адреса (XML или в формате "9 запятых")
	Реквизиты.Вставить("ЗначениеJSONПочтовыйАдрес",          ""); // структурированное строковое представление адреса (JSON)
	Реквизиты.Вставить("Телефоны",                           "");
	Реквизиты.Вставить("ЗначенияПолейТелефоны",              ""); 
	Реквизиты.Вставить("ЗначениеJSONТелефоны",               ""); 
	Реквизиты.Вставить("ТелефонЮридическогоАдреса",          "");
	Реквизиты.Вставить("ЗначенияПолейТелефонЮридическогоАдреса", ""); 
	Реквизиты.Вставить("ЗначениеJSONТелефонЮридическогоАдреса", ""); 
	Реквизиты.Вставить("Факс",                               ""); 
	Реквизиты.Вставить("Email",                              "");
	// Регистрационные данные
	Реквизиты.Вставить("ОГРН",                               ""); // Здесь же ОГРНИП для ИП, рег. номер для иностранных контрагентов
	Реквизиты.Вставить("ДатаРегистрации",                    "");
	Реквизиты.Вставить("КодПоОКПО",                          "");
	Реквизиты.Вставить("ИНН",                                "");
	Реквизиты.Вставить("КПП",                                ""); // Только для ЮЛ
	Реквизиты.Вставить("СвидетельствоСерияНомер",            "");           // Только для ИП
	Реквизиты.Вставить("СвидетельствоДатаВыдачи",            '0001-01-01'); // Только для ИП
	Реквизиты.Вставить("Свидетельство",                      ""); // Свидетельство строкой, только для ИП
	Реквизиты.Вставить("ДокументУдостоверяющийЛичность",     ""); // Только для физлица
	Реквизиты.Вставить("ИндивидуальныйПредприниматель",      Справочники.ФизическиеЛица.ПустаяСсылка()); // Только для организаций-ИП
	Реквизиты.Вставить("СтранаРегистрации",                  Справочники.СтраныМира.ПустаяСсылка());
	Реквизиты.Вставить("НалоговыйНомерВСтранеРегистрации",   "");
	// Банковские реквизиты
	Реквизиты.Вставить("НомерСчета",                         "");
	Реквизиты.Вставить("ТекстКорреспондента",                "");
	Реквизиты.Вставить("БИК",                                "");
	Реквизиты.Вставить("Банк",                               "");
	Реквизиты.Вставить("АдресБанка",                         "");
	Реквизиты.Вставить("КоррСчет",                           "");
	// Должностные лица юридического лица
	Реквизиты.Вставить("Руководитель"                      , Справочники.ФизическиеЛица.ПустаяСсылка());
	Реквизиты.Вставить("РуководительФИО"                   , "");
	Реквизиты.Вставить("ДолжностьРуководителяПредставление", "");
	
	Возврат Реквизиты;
	
КонецФункции

Процедура ЗаполнитьРеквизитыОрганизации(Реквизиты, Организация, Период)
	
	// Константы
	Реквизиты.СтранаРегистрации = Справочники.СтраныМира.Россия;
	
	// Общие сведения
	ИменаРеквизитовПредпринимателя = "ИндивидуальныйПредприниматель, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи";
	ИменаРеквизитовОбъекта = "ЮридическоеФизическоеЛицо, Представление, ИНН, ОГРН, ДатаРегистрации, КодПоОКПО, "
		+ ИменаРеквизитовПредпринимателя;
	ЗначенияРеквизитовОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, ИменаРеквизитовОбъекта);
	
	ЗаполнитьЗначенияСвойств(Реквизиты, ЗначенияРеквизитовОбъекта, , ИменаРеквизитовПредпринимателя); // Все, кроме реквизитов предпринимателя
	// (некоторые свойства зависят от того, как оформлен бизнес)
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, ЗначенияРеквизитовОбъекта, ИменаРеквизитовПредпринимателя); // Только реквизиты предпринимателя
	Иначе // Юридическое лицо
		
		Реквизиты.КПП = Справочники.Организации.КППНаДату(Организация, Период);
		
		Если Не ЗначениеЗаполнено(Период) Тогда
			// ОтветственныеЛицаБП.ОтветственныеЛица() не интерпретирует пустую дату как "акутальное значение"
			ПериодОтветственныхЛиц = ТекущаяДатаСеанса();
		Иначе
			ПериодОтветственныхЛиц = Период;
		КонецЕсли;
		
		ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ПериодОтветственныхЛиц);
		Если ЗначениеЗаполнено(ОтветственныеЛица) Тогда
			Реквизиты.Руководитель                       = ОтветственныеЛица.Руководитель;
			Реквизиты.РуководительФИО                    = ОтветственныеЛица.РуководительФИО;
			Реквизиты.ДолжностьРуководителяПредставление = ОтветственныеЛица.РуководительДолжностьПредставление; // имена свойств отличаются
		КонецЕсли;
		
	КонецЕсли;
	
	// Наименования
	Наименования = Справочники.Организации.НаименованияНаДату(Организация, Период);
	ЗаполнитьЗначенияСвойств(Реквизиты, Наименования, "ПолноеНаименование, СокращенноеНаименование, НаименованиеДляПечатныхФорм");
	
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		Реквизиты.ФИОФизлица = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
			Наименования.ФИО.Фамилия,
			Наименования.ФИО.Имя,
			Наименования.ФИО.Отчество,
			Ложь);
		
		Реквизиты.ФамилияИнициалыФизлица = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Наименования.ФИО);
		
	КонецЕсли;
	
	// Контактная информация
	ЗаполнитьКонтактнуюИнформациюВРеквизитахКомпании(Реквизиты, Организация, Период);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыКонтрагента(Реквизиты, Контрагент, Период)
	
	// Общие сведения
	ИменаРеквизитовПредпринимателя = "ДокументУдостоверяющийЛичность, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи";
	ИменаРеквизитовОбъекта = "ЮридическоеФизическоеЛицо, Представление, ИНН, КодПоОКПО, РегистрационныйНомер, "
		+ "СтранаРегистрации, НалоговыйНомер, " + ИменаРеквизитовПредпринимателя;
		
	ЗначенияРеквизитовОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, ИменаРеквизитовОбъекта);
		
	Реквизиты.ОГРН                             = ЗначенияРеквизитовОбъекта.РегистрационныйНомер;
	Реквизиты.ДатаРегистрации                  = Дата("00010101");
	Реквизиты.НалоговыйНомерВСтранеРегистрации = ЗначенияРеквизитовОбъекта.НалоговыйНомер;
	
	ЗаполнитьЗначенияСвойств(Реквизиты, ЗначенияРеквизитовОбъекта, , ИменаРеквизитовПредпринимателя); // Все, кроме реквизитов предпринимателя
	
	// (некоторые свойства зависят от того, как оформлен бизнес контрагента)
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, ЗначенияРеквизитовОбъекта, ИменаРеквизитовПредпринимателя);// Только реквизиты предпринимателя
	Иначе // Юридическое лицо
		Реквизиты.КПП = Справочники.Контрагенты.КППНаДату(Контрагент, Период);
	КонецЕсли;
	
	// Наименования
	Наименования = Справочники.Контрагенты.НаименованияНаДату(Контрагент, Период);
	ЗаполнитьЗначенияСвойств(Реквизиты, Наименования, "ПолноеНаименование, СокращенноеНаименование, НаименованиеДляПечатныхФорм");
	
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ПолноеНаименованиеКонтрагента    = ?(Реквизиты.ПолноеНаименование = "ИП " + Реквизиты.Представление, Реквизиты.Представление, Реквизиты.ПолноеНаименование);
		Реквизиты.ФамилияИнициалыФизлица = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ПолноеНаименованиеКонтрагента);
	КонецЕсли;
	
	// Контактная информация
	ЗаполнитьКонтактнуюИнформациюВРеквизитахКомпании(Реквизиты, Контрагент, Период);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыБанковскогоСчета(Реквизиты, БанковскийСчет)
	
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.ТекстКорреспондента КАК ТекстКорреспондента,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.Наименование, ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """")) КАК Банк,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.Код, ЕСТЬNULL(БанковскиеСчета.Банк.Код, """")) КАК БИК,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.Адрес, ЕСТЬNULL(БанковскиеСчета.Банк.Адрес, """")) КАК АдресБанка,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.КоррСчет, ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """")) КАК КоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыКонтактнойИнформацииКомпании(ТипКомпании)
	
	ВидыКонтактнойИнформацииКомпании = Новый Структура();
	ВидыКонтактнойИнформацииКомпании.Вставить("ЮридическийАдрес");
	ВидыКонтактнойИнформацииКомпании.Вставить("ФактическийАдрес");
	ВидыКонтактнойИнформацииКомпании.Вставить("ПочтовыйАдрес");
	ВидыКонтактнойИнформацииКомпании.Вставить("Телефоны");
	ВидыКонтактнойИнформацииКомпании.Вставить("ТелефонЮридическогоАдреса");
	ВидыКонтактнойИнформацииКомпании.Вставить("Факс");
	ВидыКонтактнойИнформацииКомпании.Вставить("Email");
	
	Если ТипКомпании = Тип("СправочникСсылка.Организации") Тогда
		ВидыКонтактнойИнформацииКомпании.ЮридическийАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		ВидыКонтактнойИнформацииКомпании.ФактическийАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		ВидыКонтактнойИнформацииКомпании.ПочтовыйАдрес    = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
		ВидыКонтактнойИнформацииКомпании.Телефоны         = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		ВидыКонтактнойИнформацииКомпании.ТелефонЮридическогоАдреса
			= Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации;
		ВидыКонтактнойИнформацииКомпании.Факс             = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
		ВидыКонтактнойИнформацииКомпании.Email            = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	Иначе
		ВидыКонтактнойИнформацииКомпании.ЮридическийАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		ВидыКонтактнойИнформацииКомпании.ФактическийАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		ВидыКонтактнойИнформацииКомпании.ПочтовыйАдрес    = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
		ВидыКонтактнойИнформацииКомпании.Телефоны         = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		ВидыКонтактнойИнформацииКомпании.ТелефонЮридическогоАдреса = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		ВидыКонтактнойИнформацииКомпании.Факс             = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
		ВидыКонтактнойИнформацииКомпании.Email            = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
	КонецЕсли;
	
	Возврат ВидыКонтактнойИнформацииКомпании;
	
КонецФункции

Процедура ЗаполнитьКонтактнуюИнформациюВРеквизитахКомпании(Реквизиты, Компания, Период)

	ВидыКонтактнойИнформации = Новый ТаблицаЗначений; // Кеш для поиска
	ВидыКонтактнойИнформации.Колонки.Добавить("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	ВидыКонтактнойИнформации.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	Для Каждого ОписаниеВидаКИ Из ВидыКонтактнойИнформацииКомпании(ТипЗнч(Компания)) Цикл
		
		ИдентификаторВида = ВидыКонтактнойИнформации.Добавить();
		ИдентификаторВида.Вид = ОписаниеВидаКИ.Значение;
		ИдентификаторВида.ИмяРеквизита = ОписаниеВидаКИ.Ключ;

	КонецЦикла;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Компания),
		Неопределено, // типы определяются по видам - следующему параметру
		ВидыКонтактнойИнформации.ВыгрузитьКолонку("Вид"),
		Период);

	Для Каждого ЭлементКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		ИдентификаторВида = ВидыКонтактнойИнформации.Найти(ЭлементКонтактнойИнформации.Вид, "Вид");
		Если ИдентификаторВида = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ИмяРеквизита = ИдентификаторВида.ИмяРеквизита;
		Реквизиты[ИмяРеквизита] = ЭлементКонтактнойИнформации.Представление;
		
		Если ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			// Заполним детальнее
			
			Если ИмяРеквизита = "ЮридическийАдрес" Тогда
				ИмяРеквизитаЗначенияПолей = "ЗначенияПолейЮридическийАдрес";
				ИмяРеквизитаЗначенияПолейJSON = "ЗначениеJSONЮридическийАдрес";
			ИначеЕсли ИмяРеквизита = "ФактическийАдрес" Тогда
				ИмяРеквизитаЗначенияПолей = "ЗначенияПолейФактическийАдрес";
				ИмяРеквизитаЗначенияПолейJSON = "ЗначениеJSONФактическийАдрес";
			Иначе // ПочтовыйАдрес
				ИмяРеквизитаЗначенияПолей = "ЗначенияПолейПочтовыйАдрес";
				ИмяРеквизитаЗначенияПолейJSON = "ЗначениеJSONПочтовыйАдрес";
			КонецЕсли;
			
			Реквизиты[ИмяРеквизитаЗначенияПолей] = ЭлементКонтактнойИнформации.ЗначенияПолей;
			Реквизиты[ИмяРеквизитаЗначенияПолейJSON] = ЭлементКонтактнойИнформации.Значение;
			
		ИначеЕсли ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			
			Если ИмяРеквизита = "ТелефонЮридическогоАдреса" Тогда
				ИмяРеквизитаЗначенияПолей = "ЗначенияПолейТелефонЮридическогоАдреса";
				ИмяРеквизитаЗначенияПолейJSON = "ЗначениеJSONТелефонЮридическогоАдреса";
			Иначе // Телефоны
				ИмяРеквизитаЗначенияПолей = "ЗначенияПолейТелефоны";
				ИмяРеквизитаЗначенияПолейJSON = "ЗначениеJSONТелефоны";
			КонецЕсли;
			
			Реквизиты[ИмяРеквизитаЗначенияПолей] = ЭлементКонтактнойИнформации.ЗначенияПолей;
			Реквизиты[ИмяРеквизитаЗначенияПолейJSON] = ЭлементКонтактнойИнформации.Значение;
			
		КонецЕсли;
		
	КонецЦикла; // По КонтактнаяИнформация
	
КонецПроцедуры

// Функция возвращает ссылку на вид контактной информации EMAILКонтрагента.
//
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации - ссылка на вид контактной информации EMAILКонтрагента
//
Функция ВидКонтактнойИнформацииEMAILКонтрагента() Экспорт
	
	Возврат Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ПОДРАЗДЕЛЕНИЯ

// Функция возвращает ссылку на пустое подразделение.
//
Функция ПустоеПодразделение() Экспорт

	Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();

КонецФункции // ПустоеПодразделение()

// Функция возвращает Истина, если переданное подразделение может быть выбрано для 
// указанной организации.
//                         
Функция ПодразделениеПринадлежитОрганизации(Подразделение, Организация) Экспорт

	Результат = Ложь;

	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Организация) Тогда
	
		ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
		Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
			РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаОрганизации);
			Результат = (РеквизитыПодразделения[ИмяРеквизитаОрганизации] = Организация);
		Иначе
			// Если для подразделения нет явно указанного владельца, то считаем, что любое подразделение может 
			// принадлежать любой организации.
			Результат = Истина;
		КонецЕсли;
	
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПодразделениеПринадлежитОрганизации()

// Функция возвращает организацию, соответствующую переданному подразделению.
// Если передан параметр ТекущаяВыбраннаяОрганизация и его значение не противоречит 
// соответствию подразделения и организации, то возвращает значение параметра ТекущаяВыбраннаяОрганизация.
//
Функция ОрганизацияПодразделения(Подразделение, ТекущаяВыбраннаяОрганизация = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
		// Если нет явно заданного владельца, то оставляем текущую организацию.
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаОрганизации);
	Если ЗначениеЗаполнено(ТекущаяВыбраннаяОрганизация) 
		И РеквизитыПодразделения[ИмяРеквизитаОрганизации] = ТекущаяВыбраннаяОрганизация Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыПодразделения[ИмяРеквизитаОрганизации]) Тогда
		Возврат РеквизитыПодразделения[ИмяРеквизитаОрганизации];
	Иначе
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;

КонецФункции // ОрганизацияПодразделения()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ НАСТРОЕК ПОЛЬЗОВАТЕЛЕЙ

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка         - Строка - вид настройки, значение по умолчанию которой необходимо получить
//  ИмяПользователяИБ - Строка - имя пользователя ИБ программы, настройка которого
//				   запрашивается, если параметр не передается настройка возвращается для текущего пользователя
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Настройка, ИмяПользователяИБ = Неопределено) Экспорт

	НастройкаВРег = ВРег(Настройка);
	НастройкаТипаСсылка = Ложь;
	
	Если НастройкаВРег = ВРег("ОсновнаяОрганизация") Тогда
		Возврат Справочники.Организации.ОрганизацияПоУмолчанию(ИмяПользователяИБ);
	ИначеЕсли НастройкаВРег = ВРег("ОсновнойСклад") Тогда
		Возврат Справочники.Склады.ПолучитьСкладПоУмолчанию(ИмяПользователяИБ);
	КонецЕсли;
	
	Если НастройкаВРег = ВРег("ОсновноеПодразделениеОрганизации") Тогда
		ПустоеЗначение = ПустоеПодразделение();
		ИмяОбъекта = "Справочник.ПодразделенияОрганизаций";
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("РабочаяДата") Тогда
		// Для совместимости с предыдущими версиями.
		Возврат ОбщегоНазначения.РабочаяДатаПользователя(ИмяПользователяИБ);
	ИначеЕсли НастройкаВРег = ВРег("ВариантРабочегоСтола") Тогда
		ПустоеЗначение = "ЗадачиБухгалтера";
	ИначеЕсли НастройкаВРег = ВРег("ПоказыватьСчетаУчетаВДокументах") Тогда
		ПустоеЗначение = ПоказыватьСчетаУчетаВДокументахПоУмолчанию();
	ИначеЕсли НастройкаВРег = ВРег("ОсновнойВидНоменклатуры") Тогда
		ПустоеЗначение = ПустойВидНоменклатуры();
		ИмяОбъекта = "Справочник.ВидыНоменклатуры";
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("ОсновнойВидНоменклатурыУслуга") Тогда
		ПустоеЗначение = ПустойВидНоменклатуры();
		ИмяОбъекта = "Справочник.ВидыНоменклатуры";
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("ОсновнойВидНоменклатурыТопливо") Тогда
		ПустоеЗначение = ПустойВидНоменклатуры();
		ИмяОбъекта = "Справочник.ВидыНоменклатуры";
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("ПараметрыОтправкиСкрытыхКопий") Тогда
		ПустоеЗначение = Новый Структура("ОтправлятьСкрытыеКопии, АдресПолучателяСкрытойКопии", Ложь, "");
	ИначеЕсли НастройкаВРег = ВРег("УчетнаяЗаписьЭлектроннойПочты") Тогда
		ПустоеЗначение = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
		ИмяОбъекта = "Справочник.УчетныеЗаписиЭлектроннойПочты";
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("Подпись") Тогда
		ПустоеЗначение = НоваяПодпись();
	ИначеЕсли НастройкаВРег = ВРег("ВидЭДРеализации") Тогда
		ПустоеЗначение = Новый Соответствие;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(НастройкаВРег,,, ИмяПользователяИБ);
	
	Если ТипЗнч(ЗначениеНастройки) = ТипЗнч(ПустоеЗначение) Тогда
		Если НастройкаТипаСсылка Тогда
			Если НЕ ОбщегоНазначения.СсылкаСуществует(ЗначениеНастройки) Тогда
				ЗначениеНастройки = ПустоеЗначение;
			Иначе
				Запроc = Новый Запрос;
				Запроc.УстановитьПараметр("Ссылка", ЗначениеНастройки);
				Запроc.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ЗначенияОбъекта.Ссылка
				|ИЗ
				|	" + ИмяОбъекта + " КАК ЗначенияОбъекта
				|ГДЕ
				|	ЗначенияОбъекта.Ссылка = &Ссылка";
				Результат = Запроc.Выполнить();
				Если Результат.Пустой() Тогда
					ЗначениеНастройки = ПустоеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗначениеНастройки = ПустоеЗначение;
	КонецЕсли;
	
	Возврат ?(ЗначениеНастройки = Неопределено, ПустоеЗначение, ЗначениеНастройки);
	
КонецФункции // ПолучитьЗначениеПоУмолчанию()

Функция ПоказыватьСчетаУчетаВДокументахПоУмолчанию()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Если Не Пользователи.ЭтоПолноправныйПользователь(,, Ложь)
			И УправлениеДоступомБПВызовСервера.ПравоДоступаКДаннымБухгалтерии() Тогда
			// Счета учета в сервисе по умолчанию показываем только бухгалтерам и главным бухгалтерам
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Перечисления.СистемыНалогообложения.ОсновнаяСистемаНалогообложения() <> Перечисления.СистемыНалогообложения.Общая Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ИНФОРМАЦИИ О ПОСТАВЩИКЕ ПО ПАРТИЯМ

//Процедура получает из документов партий информацию о
//комитенте, договоре комитента и счетах расчетов с комитентом
//
Процедура ЗаполнитьПараметрыПартийТоваровКомитентов(ТаблицаТоварыСПартиями, Реквизиты, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ТаблицаТоварыСПартиями", ТаблицаТоварыСПартиями);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоварыСПартиями.Партия КАК Партия
	|ПОМЕСТИТЬ ТаблицаПартий
	|ИЗ
	|	&ТаблицаТоварыСПартиями КАК ТаблицаТоварыСПартиями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПартий.Партия КАК Партия
	|ПОМЕСТИТЬ ДокументыПТиУ
	|ИЗ
	|	ТаблицаПартий КАК ТаблицаПартий
	|ГДЕ
	|	ТаблицаПартий.Партия ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПартий.Партия КАК Партия
	|ПОМЕСТИТЬ ДокументыПартия
	|ИЗ
	|	ТаблицаПартий КАК ТаблицаПартий
	|ГДЕ
	|	ТаблицаПартий.Партия ССЫЛКА Документ.Партия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПартий.Партия КАК Партия
	|ПОМЕСТИТЬ ДокументыРасчетовСКонтрагентом
	|ИЗ
	|	ТаблицаПартий КАК ТаблицаПартий
	|ГДЕ
	|	ТаблицаПартий.Партия ССЫЛКА Документ.ДокументРасчетовСКонтрагентом 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК Партия,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Комитент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКомиссии,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетовСКомитентом,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансовСКомитентом,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетовСКомитентом,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыПТиУ.Партия
	|			ИЗ
	|				ДокументыПТиУ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партия.Ссылка,
	|	Партия.Контрагент,
	|	Партия.ДоговорКонтрагента,
	|	Партия.СчетУчетаРасчетовСКомитентом,
	|	Партия.СчетУчетаРасчетовСКомитентом,
	|	Партия.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	Партия.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Партия.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	Партия.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС
	|ИЗ
	|	Документ.Партия КАК Партия
	|ГДЕ
	|	Партия.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыПартия.Партия
	|			ИЗ
	|				ДокументыПартия)
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументРасчетовСКонтрагентом.Ссылка,
	|	ДокументРасчетовСКонтрагентом.Контрагент,
	|	ДокументРасчетовСКонтрагентом.ДоговорКонтрагента,
	|	ДокументРасчетовСКонтрагентом.СчетУчетаРасчетовСКомитентом,
	|	ДокументРасчетовСКонтрагентом.СчетУчетаРасчетовСКомитентом,
	|	ДокументРасчетовСКонтрагентом.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	ДокументРасчетовСКонтрагентом.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА ДокументРасчетовСКонтрагентом.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ДокументРасчетовСКонтрагентом.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС
	|ИЗ
	|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|ГДЕ
	|	ДокументРасчетовСКонтрагентом.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыРасчетовСКонтрагентом.Партия
	|			ИЗ
	|				ДокументыРасчетовСКонтрагентом)";

	// Заменяем обращение к виду договора и признаку агентского НДС через переопределяемые функции.
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора",
								ТекстЗапросаВидДоговора("ПоступлениеТоваровУслуг.ДоговорКонтрагента") + " КАК ВидДоговора");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"Партия.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора",
								ТекстЗапросаВидДоговора("Партия.ДоговорКонтрагента") + " КАК ВидДоговора");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"ДокументРасчетовСКонтрагентом.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора",
								ТекстЗапросаВидДоговора("ДокументРасчетовСКонтрагентом.ДоговорКонтрагента") + " КАК ВидДоговора");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"ПоступлениеТоваровУслуг.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС",
								ТекстЗапросаУчетАгентскогоНДС("ПоступлениеТоваровУслуг.ДоговорКонтрагента") + " КАК УчетАгентскогоНДС");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"Партия.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС",
								ТекстЗапросаУчетАгентскогоНДС("Партия.ДоговорКонтрагента") + " КАК УчетАгентскогоНДС");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"ДокументРасчетовСКонтрагентом.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС",
								ТекстЗапросаУчетАгентскогоНДС("ДокументРасчетовСКонтрагентом.ДоговорКонтрагента") + " КАК УчетАгентскогоНДС");
	
	ТаблицаПараметровПартий = Запрос.Выполнить().Выгрузить();
	ТаблицаПараметровПартий.Индексы.Добавить("Партия");
	
	Для каждого СтрокаПартии Из ТаблицаТоварыСПартиями Цикл
		
		СтрокаПараметровПартии = ТаблицаПараметровПартий.Найти(СтрокаПартии.Партия, "Партия");
		Если СтрокаПараметровПартии <> Неопределено Тогда
		
			ЗаполнитьЗначенияСвойств(СтрокаПартии, СтрокаПараметровПартии);
			
			Если НЕ ЗначениеЗаполнено(СтрокаПартии.СчетРасчетовСКомитентом) 
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаПартии.СчетАвансовСКомитентом) Тогда
				СчетаРасчетов = ПолучитьСчетаРасчетовСКонтрагентом(
					Реквизиты.Организация, СтрокаПартии.Комитент, СтрокаПартии.ДоговорКомиссии);
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(СтрокаПартии.СчетРасчетовСКомитентом) Тогда
				Если НЕ ЗначениеЗаполнено(СчетаРасчетов.СчетРасчетовСКомитентом) Тогда
					ТекстОшибки = НСтр("ru='При списании комиссионных товаров не определен счет расчетов с комитентом по партии ""%Партия%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Партия%", СтрокаПартии.Партия);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, , , Отказ);
				Иначе
					СтрокаПартии.СчетРасчетовСКомитентом = СчетаРасчетов.СчетРасчетовСКомитентом;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПартии.СчетАвансовСКомитентом) Тогда
				Если НЕ ЗначениеЗаполнено(СчетаРасчетов.СчетАвансов) Тогда
					СтрокаПартии.СчетАвансовСКомитентом = СчетаРасчетов.СчетРасчетовСКомитентом;
				Иначе
					СтрокаПартии.СчетАвансовСКомитентом = СчетаРасчетов.СчетАвансов;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НЕ Отказ Тогда // не выводим ошибку если ранее уже была ошибка (например в подборе партий комиссионных товаров)
		
			ТекстОшибки = НСтр("ru='При списании комиссионных товаров не определены параметры партии ""%Партия%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Партия%", СтрокаПартии.Партия);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, , , Отказ);
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПараметрыПартийТоваровКомитентов()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ИНФОРМАЦИИ О ЦЕНАХ НОМЕНКЛАТУРЫ И СЕБЕСТОИМОСТИ СПИСАНИЯ

//Функция возвращает соответствие Номенклатура - Цена (в рублях)
//в функцию передаются параметры цены - Тип (вид) цен, период (дата), валюта, курс и кратность
//номенклатура передается как массив
//
//Полученное значение используется для определения учетных цен (не цен продажи)
//
Функция ПодготовитьСоответствиеНоменклатураЦена(СтруктураПараметров) Экспорт
	
	Период       = СтруктураПараметров.Период;
	ТипЦен       = СтруктураПараметров.ТипЦен;
	Валюта       = СтруктураПараметров.Валюта;
	Курс         = СтруктураПараметров.Курс;
	Кратность    = СтруктураПараметров.Кратность;
	Номенклатура = СтруктураПараметров.Номенклатура;
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;

	СоответствиеНоменклатураЦена = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Период,
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Номенклатура В (&Номенклатура)
	|				И ТипЦен = &ТипЦен) КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЦенаНоменклатуры = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
			Выборка.Валюта,	Валюта, 
		    Выборка.Курс, Курс, 
		    Выборка.Кратность, Кратность);

		СоответствиеНоменклатураЦена.Вставить(Выборка.Номенклатура, ЦенаНоменклатуры);
		
	КонецЦикла;

	Возврат СоответствиеНоменклатураЦена;

КонецФункции // ПодготовитьСоответствиеНоменклатураЦена()

Функция ПодготовитьСоответствиеНоменклатураЦенаДокументов(СтруктураПараметров) Экспорт
	
	Период			     = СтруктураПараметров.Период;
	Валюта      		 = СтруктураПараметров.Валюта;
	Курс		         = СтруктураПараметров.Курс;
	Кратность		     = СтруктураПараметров.Кратность;
	Номенклатура 		 = СтруктураПараметров.Номенклатура;
	СпособЗаполненияЦены = СтруктураПараметров.СпособЗаполненияЦены;
	
	СоответствиеНоменклатураЦена = Новый Соответствие;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов) Тогда
		Возврат СоответствиеНоменклатураЦена;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Номенклатура"		, Номенклатура);
	Запрос.УстановитьПараметр("СпособЗаполненияЦены", СпособЗаполненияЦены);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Период,
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыДокументов.Номенклатура,
	|	ЦеныНоменклатурыДокументов.Цена,
	|	ЦеныНоменклатурыДокументов.Валюта,
	|	ЦеныНоменклатурыДокументов.ЦенаВключаетНДС,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО ЦеныНоменклатурыДокументов.Валюта = КурсыВалют.Валюта
	|ГДЕ
	|	ЦеныНоменклатурыДокументов.СпособЗаполненияЦены = &СпособЗаполненияЦены
	|	И ЦеныНоменклатурыДокументов.Номенклатура В(&Номенклатура)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЦенаНоменклатуры = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
			Выборка.Валюта,	Валюта, 
		    Выборка.Курс, Курс, 
		    Выборка.Кратность, Кратность);
			
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ЦенаНоменклатуры", ЦенаНоменклатуры);
		СтруктураВозврата.Вставить("ЦенаВключаетНДС",  Выборка.ЦенаВключаетНДС);
			
		СоответствиеНоменклатураЦена.Вставить(Выборка.Номенклатура, СтруктураВозврата);
		
	КонецЦикла;

	Возврат СоответствиеНоменклатураЦена;

КонецФункции

Функция ТаблицаСуммСписанияАктивов(МассивРегистраторов, ДатаНач, ДатаКон) 

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидСубконтоПартия", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Запрос.УстановитьПараметр("СчетГТД", ПланыСчетов.Хозрасчетный.ГТД);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = &ВидСубконтоНоменклатура
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = &ВидСубконтоНоменклатура
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = &ВидСубконтоНоменклатура
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = &ВидСубконтоПартия
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = &ВидСубконтоПартия
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = &ВидСубконтоПартия
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Партия,
	|	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоКт) КАК Количество,
	|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор В (&МассивРегистраторов)
	|				И НЕ СчетКт = &СчетГТД,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = &ВидСубконтоНоменклатура
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = &ВидСубконтоНоменклатура
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = &ВидСубконтоНоменклатура
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = &ВидСубконтоПартия
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = &ВидСубконтоПартия
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = &ВидСубконтоПартия
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Получает сумму списания активов в разрезе партий для заполнения печатных форм документов
//
Функция ПолучитьСуммуСписанияАктивовПоПартиям(МассивРегистраторов, ДатаНач, ДатаКон) Экспорт

	ТаблицаСуммСписания = ТаблицаСуммСписанияАктивов(МассивРегистраторов, ДатаНач, ДатаКон);
	
	ТаблицаСуммСписания.Свернуть("Регистратор, Номенклатура, Партия","Количество,Сумма");
	
	ТаблицаСуммСписания.Индексы.Добавить("Регистратор, Номенклатура, Партия");
	
	Возврат ТаблицаСуммСписания;

КонецФункции

// Получает сумму списания активов для заполнения печатных форм документов
//
Функция ПолучитьСуммуСписанияАктивов(МассивРегистраторов, ДатаНач, ДатаКон) Экспорт
	
	ТаблицаСуммСписания = ТаблицаСуммСписанияАктивов(МассивРегистраторов, ДатаНач, ДатаКон);
	
	ТаблицаСуммСписания.Свернуть("Регистратор, Номенклатура","Количество,Сумма");
	
	ТаблицаСуммСписания.Индексы.Добавить("Регистратор, Номенклатура");
	
	Возврат ТаблицаСуммСписания;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СЧЕТОВ УЧЕТА ПО УМОЛЧАНИЮ

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Знач Организация, Знач Контрагент, Знач Договор) Экспорт

	Результат = Новый Структура("СчетРасчетов, 
	                            |СчетАвансов,
	                            |СчетРасчетовПокупателя, 
	                            |СчетАвансовПокупателя, 
	                            |СчетРасчетовПоПретензиям,
	                            |СчетРасчетовСКомитентом,
	                            |СчетУчетаТары,
	                            |СчетУчетаТарыПокупателя");

	Если ТипЗнч(Договор) = Тип("ПеречислениеСсылка.ВидыРасчетовПоДоговорам") Тогда
		ВидРасчетовПоДоговору = Договор;
		Договор = ПолучитьПустоеЗначениеДоговора();
	Иначе
		ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(Договор);
	КонецЕсли;

	СписокГруппКонтрагентов = ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышеСтоящихГрупп(Контрагент);
	
	СписокГруппДоговоров = ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышеСтоящихГрупп(Договор);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     ПолучитьПустоеЗначениеДоговора());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	Индекс = 1;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	" + Индекс + " КАК Приоритет,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &Договор И НЕ &Договор = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &ПустаяОрганизация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &Контрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетРасчетов              = Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов               = Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетРасчетовПокупателя    = Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя     = Выборка.СчетУчетаАвансовПолученных;
		Результат.СчетРасчетовПоПретензиям  = Выборка.СчетРасчетовПоПретензиям;
		Результат.СчетРасчетовСКомитентом   = Выборка.СчетУчетаРасчетовСКомитентом;
		Результат.СчетУчетаТары             = Выборка.СчетУчетаРасчетовПоТареСПоставщиком;
		Результат.СчетУчетаТарыПокупателя   = Выборка.СчетУчетаРасчетовПоТареСПокупателем;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

Функция ПолучитьСчетаУчетаВНТТ(Организация, Склад, Дата, УчетнаяПолитикаНУ) Экспорт
	
	СтруктураВозврата = Новый Структура("СчетДоходовОтРеализации, СчетРасходовОтРеализации");
	
	Отбор = Новый Структура("Склад");
	Отбор.Склад = Склад;
	
	СрезПоследних   = РегистрыСведений.ПорядокНалогообложенияТорговыхТочек.СрезПоследних(Дата, Отбор);
	
	Если СрезПоследних.Количество() > 0 Тогда
		Если СрезПоследних[0].ОсобыйПорядокНалогообложения Тогда
			СтруктураВозврата.СчетДоходовОтРеализации  = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД;
			СтруктураВозврата.СчетРасходовОтРеализации = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД;
		Иначе
			СтруктураВозврата.СчетДоходовОтРеализации  = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
			СтруктураВозврата.СчетРасходовОтРеализации = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
		КонецЕсли;
	Иначе
		Если УчетнаяПолитикаНУ.РозничнаяТорговляОблагаетсяЕНВД Тогда
			СтруктураВозврата.СчетДоходовОтРеализации  = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД;
			СтруктураВозврата.СчетРасходовОтРеализации = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД;
		Иначе
			СтруктураВозврата.СчетДоходовОтРеализации  = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
			СтруктураВозврата.СчетРасходовОтРеализации = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация  - организация, по которой определяются счета учета
//  Склад        - место хранения, по которому определяются счета учета
//  Номенклатура - номенклатура, по которой определяются счета учета
//  Дата         - дата, на которую определяются счета учета
//  ОсобыйПорядокНалогообложения - признак того, что необходимо получить счета для особого порядка налогообложения (Патент, ЕНВД)
//
// Возвращаемое значение:
//  Структура - структура счетов учета номенклатуры
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад = Неопределено, Дата = Неопределено, ОсобыйПорядокНалогообложения = Ложь) Экспорт

	Если ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокНоменклатуры	= Новый Массив;
	СписокНоменклатуры.Добавить(Номенклатура);
	
	СведенияОНоменклатуре = ПолучитьСчетаУчетаСпискаНоменклатуры(
		Организация, СписокНоменклатуры, Склад, Дата, ОсобыйПорядокНалогообложения).Получить(Номенклатура);
	
	Возврат СведенияОНоменклатуре;

КонецФункции

// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация  - организация, по которой определяются счета учета
//  Склад        - место хранения, по которому определяются счета учета
//  Номенклатура - номенклатура, по которой определяются счета учета
//  Дата         - дата, на которую определяются счета учета
//  ОсобыйПорядокНалогообложения - признак того, что необходимо получить счета для особого порядка налогообложения (Патент, ЕНВД)
//
// Возвращает соответствие:
//  Ключ     - номенклатура
//  Значение - структура счетов учета номенклатуры
//
Функция ПолучитьСчетаУчетаСпискаНоменклатуры(Организация, СписокНоменклатуры, Склад = Неопределено, Знач Дата = Неопределено, Знач ОсобыйПорядокНалогообложения = Ложь) Экспорт
	
	Результат	= Новый Соответствие;
	Если СписокНоменклатуры.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СчетаУчетаНоменклатуры) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
    ПустойСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПустаяСсылка();
	
	Дата = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		Если Номенклатура = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураВозврата = Новый Структура();
		СтруктураВозврата.Вставить("СчетУчета",						ПустойСчет);
		СтруктураВозврата.Вставить("СчетУчетаЯвляетсяЗабалансовым",	Ложь);
		СтруктураВозврата.Вставить("СчетУчетаНДС",					ПустойСчет);
		СтруктураВозврата.Вставить("СчетУчетаНДСПродажи",			ПустойСчет);
		СтруктураВозврата.Вставить("СчетНДСТаможни",				ПустойСчет);
		СтруктураВозврата.Вставить("СчетУчетаДавСырья",				ПустойСчет);
		СтруктураВозврата.Вставить("СчетПередачи",					ПустойСчет);
		СтруктураВозврата.Вставить("СчетПередачиЗаб",				ПустойСчет);
		СтруктураВозврата.Вставить("СчетДоходов",					ПустойСчет);
		СтруктураВозврата.Вставить("СчетРасходов",					ПустойСчет);
		СтруктураВозврата.Вставить("Субконто1",						Неопределено);
		СтруктураВозврата.Вставить("Субконто2",						Неопределено);
		СтруктураВозврата.Вставить("Субконто3",						Неопределено);
		СтруктураВозврата.Вставить("СпособУчетаНДС",				ПустойСпособУчетаНДС);
		
		Результат.Вставить(Номенклатура, СтруктураВозврата);
	КонецЦикла;

	МассивОрганизаций = Новый Массив();
	МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	МассивОрганизаций.Добавить(Организация);
	
	МассивСкладов = Новый Массив();
	МассивСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
	
	МассивТиповСкладов = Новый Массив();
	МассивТиповСкладов.Добавить(Перечисления.ТипыСкладов.ПустаяСсылка());
	
	ТипСклада = Неопределено;
	Если ЗначениеЗаполнено(Склад) Тогда
		ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
		МассивСкладов.Добавить(Склад);
		МассивТиповСкладов.Добавить(ТипСклада);
	КонецЕсли;
	
	Если ОсобыйПорядокНалогообложения <> Неопределено Тогда 
		
		// Для совместимости с предыдущими версиями.
		// В новых версиях ОсобыйПорядокНалогообложения учитывается в СчетаУчетаВДокументах.
		
		РозницаЕНВД = Ложь;
		Если ЗначениеЗаполнено(ТипСклада) Тогда
			ДополнительныеПараметрыОсобыйПорядокНалогообложения = Новый Структура;               // См. РеализацияОсобыйПорядокНалогообложения
			ДополнительныеПараметрыОсобыйПорядокНалогообложения.Вставить("ЭтоУслуга", Ложь);     // Допущение принято в режиме совместимости
			ДополнительныеПараметрыОсобыйПорядокНалогообложения.Вставить("ТипСклада", ТипСклада);
			ОсобыйПорядок = УчетДоходовРасходов.РеализацияОсобыйПорядокНалогообложения(
				Организация,
				Дата,
				ДополнительныеПараметрыОсобыйПорядокНалогообложения);
			РозницаЕНВД = (ОсобыйПорядок.Результат = Истина); // Достаточно оснований полагать, что это ЕНВД
        КонецЕсли;
		
		ОсобыйПорядокНалогообложения = ОсобыйПорядокНалогообложения Или РозницаЕНВД;
		
	КонецЕсли;
		
	//Проверим, указаны ли группы номенклатуры в счетах учета
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетаУчетаНоменклатуры.Номенклатура
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа";
	
	ЕстьНоменклатура = НЕ Запрос.Выполнить().Пустой();
	
	ТаблицаИерархии = Новый ТаблицаЗначений;
	ТаблицаИерархии.Колонки.Добавить("Элемент",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаИерархии.Колонки.Добавить("Родитель",	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаИерархии.Колонки.Добавить("Уровень",		ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	//Если есть группы номенклатуры в счетах учета, построим иерархию номенклатуры
	Если ЕстьНоменклатура Тогда
				
		СоответствиеЭлементовИГрупп = ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышеСтоящихГруппЭлементов(СписокНоменклатуры);
		
		Для каждого Номенклатура Из СписокНоменклатуры Цикл
			
			НоваяСтрока = ТаблицаИерархии.Добавить();
			НоваяСтрока.Элемент		= Номенклатура;
			
			НоваяСтрока = ТаблицаИерархии.Добавить();
			НоваяСтрока.Элемент		= Номенклатура;
			НоваяСтрока.Родитель	= Номенклатура;
			
			СписокГрупп = СоответствиеЭлементовИГрупп.Получить(Номенклатура);
			Если СписокГрупп = Неопределено Тогда
				НоваяСтрока.Уровень = 1;
				Продолжить;
			КонецЕсли;
			
			КоличествоВышеСтоящихГрупп = СписокГрупп.Количество();
			
			НоваяСтрока.Уровень = КоличествоВышеСтоящихГрупп + 1;
			
			Для Индекс = 1 По КоличествоВышеСтоящихГрупп Цикл
				НоваяСтрока = ТаблицаИерархии.Добавить();
				НоваяСтрока.Элемент	= Номенклатура;
				НоваяСтрока.Родитель= СписокГрупп[Индекс - 1];
				НоваяСтрока.Уровень	= КоличествоВышеСтоящихГрупп - Индекс + 1;
			КонецЦикла;						
		КонецЦикла;
	//Если в счетах учета указаны только элементы номенклатуры, иерархию можно не строить
	Иначе
		
		Для каждого Номенклатура Из СписокНоменклатуры Цикл
			
			НоваяСтрока = ТаблицаИерархии.Добавить();
			НоваяСтрока.Элемент		= Номенклатура;
			
			НоваяСтрока = ТаблицаИерархии.Добавить();
			НоваяСтрока.Элемент		= Номенклатура;
			НоваяСтрока.Родитель	= Номенклатура;
			НоваяСтрока.Уровень = 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НоваяСтрока = ТаблицаИерархии.Добавить();	// Корень
	
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИерархии, "Родитель", Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОрганизаций",	МассивОрганизаций);
	Запрос.УстановитьПараметр("МассивОрганизаций",	МассивОрганизаций);
	Запрос.УстановитьПараметр("СписокНоменклатуры",	СписокНоменклатуры);
	Запрос.УстановитьПараметр("МассивНоменклатуры",	МассивНоменклатуры);
	Запрос.УстановитьПараметр("ТаблицаИерархии",	ТаблицаИерархии);
	Запрос.УстановитьПараметр("МассивСкладов",		МассивСкладов);
	Запрос.УстановитьПараметр("МассивТиповСкладов",	МассивТиповСкладов);
	Запрос.УстановитьПараметр("ПустойСчет",			ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Если ОсобыйПорядокНалогообложения = Неопределено Тогда
		// Возвращаем данные "как есть". ОсобыйПорядокНалогообложения будет учтен в СчетаУчетаВДокументах.
		Запрос.УстановитьПараметр("Счет_Выручка",				ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		Запрос.УстановитьПараметр("Счет_СебестоимостьПродаж",	ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Иначе
		// Для совместимости с предыдущей версией
		Запрос.УстановитьПараметр("Счет_Выручка",				?(ОсобыйПорядокНалогообложения, ПланыСчетов.Хозрасчетный.ВыручкаЕНВД,             ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД));
		Запрос.УстановитьПараметр("Счет_СебестоимостьПродаж",	?(ОсобыйПорядокНалогообложения, ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД, ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД));
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИерархии.Элемент КАК Элемент,
	|	ТаблицаИерархии.Родитель КАК Родитель,
	|	ТаблицаИерархии.Уровень КАК Уровень
	|ПОМЕСТИТЬ ВТТаблицаИерархии
	|ИЗ
	|	&ТаблицаИерархии КАК ТаблицаИерархии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИерархии.Элемент КАК Элемент,
	|	ТаблицаИерархии.Родитель КАК Родитель,
	|	ТаблицаИерархии.Уровень КАК Уровень,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ВТТаблицаИерархииСВидами
	|ИЗ
	|	ВТТаблицаИерархии КАК ТаблицаИерархии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ТаблицаИерархии.Элемент = Номенклатура.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИерархии.Элемент КАК Номенклатура,
	|	ТаблицаИерархии.Родитель КАК Родитель,
	|	ТаблицаИерархии.Уровень КАК Уровень,
	|	СчетаУчетаНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СчетаУчетаНоменклатуры.Организация КАК Организация,
	|	СчетаУчетаНоменклатуры.Склад КАК Склад,
	|	СчетаУчетаНоменклатуры.ТипСклада КАК ТипСклада,
	|	СчетаУчетаНоменклатуры.СчетУчета КАК СчетУчета,
	|	ЕСТЬNULL(СчетаУчетаНоменклатуры.СчетУчета.Забалансовый, ЛОЖЬ) КАК СчетУчетаЯвляетсяЗабалансовым,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоПриобретеннымЦенностям КАК СчетУчетаНДС,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПродажи,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСУплаченногоНаТаможне КАК СчетНДСТаможни,
	|	СчетаУчетаНоменклатуры.СчетУчетаЗабалансовый КАК СчетУчетаДавСырья,
	|	ВЫБОР
	|		КОГДА СчетаУчетаНоменклатуры.СчетДоходовОтРеализации = &ПустойСчет
	|			ТОГДА &Счет_Выручка
	|		ИНАЧЕ СчетаУчетаНоменклатуры.СчетДоходовОтРеализации
	|	КОНЕЦ КАК СчетДоходов,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачи КАК СчетПередачи,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиЗабалансовый КАК СчетПередачиЗаб,
	|	ВЫБОР
	|		КОГДА СчетаУчетаНоменклатуры.СчетРасходовОтРеализации = &ПустойСчет
	|			ТОГДА &Счет_СебестоимостьПродаж
	|		ИНАЧЕ СчетаУчетаНоменклатуры.СчетРасходовОтРеализации
	|	КОНЕЦ КАК СчетРасходов,
	|	СчетаУчетаНоменклатуры.Субконто1 КАК Субконто1,
	|	СчетаУчетаНоменклатуры.Субконто2 КАК Субконто2,
	|	СчетаУчетаНоменклатуры.Субконто3 КАК Субконто3,
	|	СчетаУчетаНоменклатуры.СпособУчетаНДС
	|ИЗ
	|	ВТТаблицаИерархииСВидами КАК ТаблицаИерархии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|		ПО ТаблицаИерархии.Родитель = СчетаУчетаНоменклатуры.Номенклатура
	|		И ТаблицаИерархии.ВидНоменклатуры = СчетаУчетаНоменклатуры.ВидНоменклатуры
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Организация В(&МассивОрганизаций)
	|	И СчетаУчетаНоменклатуры.Номенклатура В(&МассивНоменклатуры)
	|	И СчетаУчетаНоменклатуры.Склад В(&МассивСкладов)
	|	И СчетаУчетаНоменклатуры.ТипСклада В(&МассивТиповСкладов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаИерархии.Элемент,
	|	ТаблицаИерархии.Родитель,
	|	ТаблицаИерархии.Уровень,
	|	СчетаУчетаНоменклатуры.ВидНоменклатуры,
	|	СчетаУчетаНоменклатуры.Организация,
	|	СчетаУчетаНоменклатуры.Склад,
	|	СчетаУчетаНоменклатуры.ТипСклада,
	|	СчетаУчетаНоменклатуры.СчетУчета,
	|	ЕСТЬNULL(СчетаУчетаНоменклатуры.СчетУчета.Забалансовый, ЛОЖЬ),
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоПриобретеннымЦенностям,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоРеализации,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетаУчетаНоменклатуры.СчетУчетаЗабалансовый,
	|	ВЫБОР
	|		КОГДА СчетаУчетаНоменклатуры.СчетДоходовОтРеализации = &ПустойСчет
	|			ТОГДА &Счет_Выручка
	|		ИНАЧЕ СчетаУчетаНоменклатуры.СчетДоходовОтРеализации
	|	КОНЕЦ,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачи,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиЗабалансовый,
	|	ВЫБОР
	|		КОГДА СчетаУчетаНоменклатуры.СчетРасходовОтРеализации = &ПустойСчет
	|			ТОГДА &Счет_СебестоимостьПродаж
	|		ИНАЧЕ СчетаУчетаНоменклатуры.СчетРасходовОтРеализации
	|	КОНЕЦ,
	|	СчетаУчетаНоменклатуры.Субконто1,
	|	СчетаУчетаНоменклатуры.Субконто2,
	|	СчетаУчетаНоменклатуры.Субконто3,
	|	СчетаУчетаНоменклатуры.СпособУчетаНДС
	|ИЗ
	|	ВТТаблицаИерархииСВидами КАК ТаблицаИерархии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|		ПО ТаблицаИерархии.Родитель = СчетаУчетаНоменклатуры.Номенклатура
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Организация В(&МассивОрганизаций)
	|	И СчетаУчетаНоменклатуры.Номенклатура В(&МассивНоменклатуры)
	|	И СчетаУчетаНоменклатуры.Склад В(&МассивСкладов)
	|	И СчетаУчетаНоменклатуры.ТипСклада В(&МассивТиповСкладов)
	|	И СчетаУчетаНоменклатуры.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Уровень УБЫВ,
	|	ВидНоменклатуры УБЫВ,
	|	Склад УБЫВ,
	|	ТипСклада УБЫВ,
	|	Организация УБЫВ";
			
	ТаблицаСчетовУчета = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетовУчета.Индексы.Добавить("Номенклатура");
	
	ОтборСчетовУчета = Новый Структура("Номенклатура");
	
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		
		СтруктураВозврата = Результат.Получить(Номенклатура);
		
		ОтборСчетовУчета.Номенклатура = Номенклатура;
		
		НайденныеСтроки = ТаблицаСчетовУчета.НайтиСтроки(ОтборСчетовУчета);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, НайденныеСтроки[0]);
		Иначе
			
			ОтборСчетовУчета.Номенклатура = ПустаяНоменклатура;
			
			НайденныеСтроки = ТаблицаСчетовУчета.НайтиСтроки(ОтборСчетовУчета);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураВозврата, НайденныеСтроки[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция возвращает массив счетов учета затрат по поздразделениям
// 
Функция СчетаУчетаЗатратПоПодразделениям() Экспорт
	
	Запрос = Новый Запрос;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);           // 20
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);            // 20.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);     // 23
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);     // 25
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);        // 26
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);               // 28
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);       // 29
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВыпускПродукции);                 // 40
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);                // 44
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращения);               // 44.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КоммерческиеРасходы);             // 44.02
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);// 76.01.2
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования); // 76.01.9
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);          // 97
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов);// 97.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодовНаДобровольноеСтрахованиеРаботников);// 97.02
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходыБудущихПериодов);    // 97.21
	
	Запрос.УстановитьПараметр("СчетаУчетаЗатрат", МассивСчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаУчетаЗатрат)
	|	И Хозрасчетный.УчетПоПодразделениям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	НЕ Хозрасчетный.УчетПоПодразделениям
	|	И Хозрасчетный.Ссылка В(&СчетаУчетаЗатрат)";
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
КонецФункции

// Функция возвращает счета учета по выбранному объекту строительства.
//
// Параметры:
//  Организация - организация, по которой выполняется поиск
//  Объект      - объект строительства, по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура, содержащая счета учета объекта строительства
// 
Функция СчетаУчетаОбъектовСтроительства(Организация, Объект) Экспорт

	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	ПустойСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПустаяСсылка();
	Результат = Новый Структура("СчетУчета, СчетУчетаНДС, СпособУчетаНДС", ПустойСчет, ПустойСчет, ПустойСпособУчетаНДС);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ПустойОбъект",      Справочники.ОбъектыСтроительства.ПустаяСсылка());
	Запрос.УстановитьПараметр("Объект",            Объект);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчета КАК СчетУчета,
	               |	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС,
	               |	ОбъектыСтроительстваОрганизаций.СпособУчетаНДС
	               |ИЗ
	               |	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	               |ГДЕ
	               |	ОбъектыСтроительстваОрганизаций.Организация = &Организация
	               |	И ОбъектыСтроительстваОрганизаций.ОбъектСтроительства = &Объект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчета,
	               |	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчетаНДС,
	               |	ОбъектыСтроительстваОрганизаций.СпособУчетаНДС
	               |ИЗ
	               |	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	               |ГДЕ
	               |	ОбъектыСтроительстваОрганизаций.Организация = &Организация
	               |	И ОбъектыСтроительстваОрганизаций.ОбъектСтроительства = &ПустойОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчета,
	               |	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчетаНДС,
	               |	ОбъектыСтроительстваОрганизаций.СпособУчетаНДС
	               |ИЗ
	               |	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	               |ГДЕ
	               |	ОбъектыСтроительстваОрганизаций.Организация = &ПустаяОрганизация
	               |	И ОбъектыСтроительстваОрганизаций.ОбъектСтроительства = &Объект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчета,
	               |	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчетаНДС,
	               |	ОбъектыСтроительстваОрганизаций.СпособУчетаНДС
	               |ИЗ
	               |	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	               |ГДЕ
	               |	ОбъектыСтроительстваОрганизаций.Организация = &ПустаяОрганизация
	               |	И ОбъектыСтроительстваОрганизаций.ОбъектСтроительства = &ПустойОбъект";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетУчета  = Выборка.СчетУчета;
		Результат.СчетУчетаНДС = Выборка.СчетУчетаНДС;
		Результат.СпособУчетаНДС = Выборка.СпособУчетаНДС;

	КонецЕсли;

	Возврат Результат;

КонецФункции // СчетаУчетаОбъектовСтроительства()

// Функция возвращает массив счетов, которые необходимо регламентно переоценивать.
// 
Функция СчетаПодлежащиеПереоценке() Экспорт
	
	// Валютные счета, подлежащие переоценке:
	// - все балансовые валютные счета;
	// - отдельные забалансовые валютные счета - см. ЗабалансовыеСчетаПодлежащиеПереоценке().
	// Счета, переоцениваемые в особом порядке, исключаются.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗабалансовыеСчетаПодлежащиеПереоценке", ЗабалансовыеСчетаПодлежащиеПереоценке());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И (НЕ Хозрасчетный.Забалансовый
	|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (&ЗабалансовыеСчетаПодлежащиеПереоценке))
	|	И НЕ Хозрасчетный.Ссылка В
	|				(ВЫБРАТЬ
	|					СчетаСОсобымПорядкомПереоценки.Счет
	|				ИЗ
	|					РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценки)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

// Возвращает забалансовые счета, которые необходимо регламентно переоценивать
// (включая все валютные подчиненные субсчета).
//
Функция ЗабалансовыеСчетаПодлежащиеПереоценке()
	
	Счета = Новый Массив;
	
	Счета.Добавить(ПланыСчетов.Хозрасчетный.УСНВспомогательныеСчета);
	
	Возврат Счета;
	
КонецФункции

// Функция возвращает массив счетов учета выручки по деятельности,
// относящейся к ЕНВД.
// 
Функция СчетаВыручкиЕНВД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счета90_01", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетаДоходовИРасходовЕНВД.Счет КАК Счет
	|ИЗ
	|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|ГДЕ
	|	СчетаДоходовИРасходовЕНВД.Счет В(&Счета90_01)";
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
КонецФункции

// Функция возвращает массив счетов учета расходов по деятельности,
// относящейся к ЕНВД.
// 
Функция СчетаРасходовЕНВД() Экспорт
	
	Запрос = Новый Запрос;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);           // 90.02
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);      // 90.07
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы); // 90.08
	
	Запрос.УстановитьПараметр("СчетаРасходов", МассивСчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО СчетаДоходовИРасходовЕНВД.Счет = Хозрасчетный.Ссылка
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасходов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Порядок";
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ АНАЛИТИКИ ПЛАНА СЧЕТОВ

// Установка типов значений субконто, связанных с именами реквизитов
//
// Параметры:
//  СвязанныеСубконто  - Соответствие - ключ - имя реквизита, значение - описание типов связанных значений субконто
//
Процедура УстановитьТипыСвязанныхСубконто(СвязанныеСубконто) Экспорт
	
	ТипыСубконто = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора();
	ТипыСубконто = Новый ОписаниеТипов(ТипыСубконто, Документы.ТипВсеСсылки().Типы());
	СвязанныеСубконто.Вставить("Контрагент", ТипыСубконто);
	
	ТипыСубконто = Документы.ТипВсеСсылки();
	СвязанныеСубконто.Вставить("ДоговорКонтрагента", ТипыСубконто);
	
	ТипыСубконто = Документы.ТипВсеСсылки();
	СвязанныеСубконто.Вставить("Номенклатура", ТипыСубконто);
	
КонецПроцедуры

// Функция возвращает массив счетов учета выручки по деятельности,
// не относящейся к ЕНВД.
// 
Функция СчетаВыручкиНеЕНВД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счета90_01", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО (СчетаДоходовИРасходовЕНВД.Счет = Хозрасчетный.Ссылка)
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&Счета90_01)
	|	И СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Порядок";
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
		
	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
КонецФункции

// Функция возвращает ИСТИНА, если в конфигурации используются подразделения.
//
Функция ИспользоватьПодразделения() Экспорт

	Возврат Истина;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ПЕРСОНАЛЬНЫХ НАСТРОЕК ЭЛЕКТРОННОЙ ПОЧТЫ

Функция НоваяПодпись()
	
	Подпись = НСтр("ru='С уважением%1'");
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	ДанныеПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АвторизованныйПользователь, "Наименование, Служебный");
	Если ДанныеПользователя.Служебный Тогда
		ПредставлениеПользователя = ".";
		
	Иначе
		ПредставлениеПользователя = ", " + ДанныеПользователя.Наименование + ".";
		
	КонецЕсли;
	
	Подпись = СтрШаблон(Подпись, ПредставлениеПользователя);
	
	Возврат Подпись;
	
КонецФункции

// Функция возвращает ИСТИНА, если в конфигурации используется обратное начисление НДС (НДС начисляется покупателями).
//
Функция ИспользуетсяОбратноеНачислениеНДС() Экспорт
	
	Если Не ТарификацияБПВызовСервераПовтИсп.РазрешеноОбратноеНачислениеНДС() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПолучитьФункциональнуюОпцию("ОбратноеНачислениеНДС");
	
КонецФункции

// Функция возвращает ИСТИНА, если в конфигурации выполняется расчет зарплаты по подразделениям.
//
Функция РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций")
		И Не ВестиУчетПоПодразделениям();
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА КОНТРОЛЬНОГО СООТНОШЕНИЯ В ИТОГАХ ОТЧЕТОВ

// Анализирует результат формирования отчета: была ли зафиксирована проблема с итогами.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - куда выводится отчет.
//  РезультатВыполнения - Структура - см. БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет() .
//
Процедура ОбработатьРезультатПроверкиИтогов(Форма, РезультатВыполнения) Экспорт
	
	Форма.КонтрольноеСоотношениеИтоговВыполняется = РезультатВыполнения.КонтрольноеСоотношениеИтоговВыполняется;
	
	Если РезультатВыполнения.КонтрольноеСоотношениеИтоговВыполняется Тогда
		Возврат;
	КонецЕсли;
	
	МестоРасхождения = БухгалтерскиеОтчетыКлиентСервер.МестоРасхожденияИтогов(Форма);
	ЗарегистрированныеСобытия = БухгалтерскиеОтчеты.ЗаписьВЖурналОРасхожденииИтогов(МестоРасхождения, "Ошибка");
	
КонецПроцедуры

