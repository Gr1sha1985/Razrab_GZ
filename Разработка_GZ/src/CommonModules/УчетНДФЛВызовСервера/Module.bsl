
#Область СлужебныйПрограммныйИнтерфейс

// Получение описания вычета для представления пользователю.
//	Параметры:
//		Вычет - СправочникСсылка.ВидыВычетовНДФЛ - 
//		ВключатьКодВычетаВОписание - булево - необязателен
// 	Возвращает: 
//		Строку описания.
Функция ПолучитьОписаниеВычета(Вычет, ВключатьКодВычетаВОписание = Ложь) Экспорт
	Если ЗначениеЗаполнено(Вычет) Тогда
		ДанныеВычета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Вычет, "ПолноеНаименование, Код");
		Возврат ?(ВключатьКодВычетаВОписание, ДанныеВычета.Код + " ", "") + ДанныеВычета.ПолноеНаименование
	Иначе
		Возврат НСтр("ru = 'Вычет не указан'");
	КонецЕсли;
КонецФункции

Функция ПолучитьОписаниеКодаДохода(КодДохода) Экспорт
	
	ОписаниеКодаДохода = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КодДохода, "ВычетРассчитываетсяАвтоматически, ВычетПоУмолчанию, ИмеетЕдинственныйВычет");
	ОписаниеКодаДохода.Вставить("КатегорияДохода", УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(КодДохода));
	
	Возврат ОписаниеКодаДохода;
КонецФункции	

Функция ВычетыКДоходам(ГодНалоговогоПериода) Экспорт
	Возврат УчетНДФЛ.ВычетыКДоходам(ГодНалоговогоПериода);	
КонецФункции

Процедура ПрочитатьДанныеФизическогоЛицаВДанныеДокумента(ФизическоеЛицо, КонецНалоговогоПериода, ДанныеФизическогоЛица = Неопределено) Экспорт
	МассивФизЛиц = Новый Массив;
	МассивФизЛиц.Добавить(ФизическоеЛицо);
	
	Если ДанныеФизическогоЛица = Неопределено Тогда
		ДанныеФизическогоЛица = Новый Структура;
		ПолучаемыеПоля = "ИНН,Фамилия,Имя,Отчество,АдресПоПрописке,АдресПоПропискеПредставление,ДокументВид,ДокументСерия,ДокументНомер,Страна,ДатаРождения,АдресЗаПределамиРФ,АдресЗаПределамиРФПредставление"; 
		ТаблицаДанныхФизЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, МассивФизЛиц, ПолучаемыеПоля, КонецНалоговогоПериода); 
		Если ТаблицаДанныхФизЛица.Количество() > 0 Тогда
			СтрокаДанныхФизЛица = ТаблицаДанныхФизЛица[0];
			
			ДанныеФизическогоЛица.Вставить("ФизическоеЛицо", ФизическоеЛицо);
			ДанныеФизическогоЛица.Вставить("ДатаРождения", СтрокаДанныхФизЛица.ДатаРождения);
			ДанныеФизическогоЛица.Вставить("Фамилия", СтрокаДанныхФизЛица.Фамилия);
			ДанныеФизическогоЛица.Вставить("Имя", СтрокаДанныхФизЛица.Имя);
			ДанныеФизическогоЛица.Вставить("Отчество", СтрокаДанныхФизЛица.Отчество);
			ДанныеФизическогоЛица.Вставить("Гражданство", СтрокаДанныхФизЛица.Страна);
			ДанныеФизическогоЛица.Вставить("ВидДокумента", СтрокаДанныхФизЛица.ДокументВид);
			ДанныеФизическогоЛица.Вставить("Серия", СтрокаДанныхФизЛица.ДокументСерия);
			ДанныеФизическогоЛица.Вставить("Номер", СтрокаДанныхФизЛица.ДокументНомер);
			ДанныеФизическогоЛица.Вставить("АдресРегистрации", СтрокаДанныхФизЛица.АдресПоПрописке);
			ДанныеФизическогоЛица.Вставить("АдресРегистрацииПредставление", СтрокаДанныхФизЛица.АдресПоПропискеПредставление);
			ДанныеФизическогоЛица.Вставить("АдресЗарубежом", СтрокаДанныхФизЛица.АдресЗаПределамиРФ);
			ДанныеФизическогоЛица.Вставить("АдресЗарубежомПредставление", СтрокаДанныхФизЛица.АдресЗаПределамиРФПредставление);

		КонецЕсли;	
		
	КонецЕсли;	
	
	СтатусРезидент = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент");
	
	ДанныеОСтатусеНДФЛ = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, МассивФизЛиц, "СтатусНалогоплательщика", КонецНалоговогоПериода);
	
	Если ДанныеОСтатусеНДФЛ.Количество() > 0 Тогда
		ДанныеФизическогоЛица.Вставить("СтатусНалогоплательщика", ?(ЗначениеЗаполнено(ДанныеОСтатусеНДФЛ[0].СтатусНалогоплательщика), ДанныеОСтатусеНДФЛ[0].СтатусНалогоплательщика, СтатусРезидент));
	Иначе                                                                                                     
		ДанныеФизическогоЛица.Вставить("СтатусНалогоплательщика", СтатусРезидент);
	КонецЕсли;	
	
КонецПроцедуры	

#Область ПечатьPDF417

Функция ПараметрыФормированияМЧБ2НДФЛ(СправкаНДФЛ, ПараметрыКлиента = Неопределено, ИдентификаторФормы = Неопределено) Экспорт
	
	ПараметрыФормирования = Новый Структура;
	
	Если ПараметрыКлиента = Неопределено Тогда
		ПараметрыКлиента = Новый Структура("ЭтоВебКлиент, ВебБраузер, Форма", Ложь, "", Неопределено);
	КонецЕсли;
	
	Если ИдентификаторФормы = Неопределено Тогда
		ИдентификаторФормы = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	// Код декларации
	ПараметрыФормирования.Вставить("КНД", "1151078");
	ПараметрыФормирования.Вставить("ИмяФайлаМакета", "1151078_5.06000_01.tif");
	
	// Адрес двоичных данных макета
	Макет = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ПолучитьМакет("МБ_1151078_5_06000_01_tif");
	ПараметрыФормирования.Вставить("АдресМакета", ПоместитьВоВременноеХранилище(Макет));
	
	// Адрес данных файла
	Файл = ЗарплатаКадры.ПолучитьДанныеФайла(СправкаНДФЛ);
	ПараметрыФормирования.Вставить("ДанныеСправки", Файл.СсылкаНаДвоичныеДанныеФайла);
	
	ДвоичныеДанные = Новый Структура;
	ДвоичныеДанные.Вставить("ДанныеМакета", Макет);
	ДвоичныеДанные.Вставить("ДанныеСправки", ПолучитьИзВременногоХранилища(Файл.СсылкаНаДвоичныеДанныеФайла));
	
	ПараметрыФормирования.Вставить("ДвоичныеДанные", ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы));
	ПараметрыФормирования.Вставить("ИмяФайла", Файл.Наименование);
	
	// ИФНС
	ПараметрыФормирования.Вставить("НаименованиеИФНС", "");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Справка.РегистрацияВНалоговомОргане) КАК НаименованиеИФНС
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган КАК Справка
	|ГДЕ
	|	Справка.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СправкаНДФЛ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПараметрыФормирования.НаименованиеИФНС = Выборка.НаименованиеИФНС;
	КонецЕсли;
	
	// Проверим, доступен ли веб-сервис 
	ПроксиВХранилище = "";
	ВыводЧерезВебСервис = РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыводаМашиночитаемойФормыЧерезВебСервис(ПроксиВХранилище,, ПараметрыКлиента.ЭтоВебКлиент, ПараметрыКлиента.ВебБраузер);
	ПараметрыФормирования.Вставить("ВыводЧерезВебСервис", ВыводЧерезВебСервис);
	ПараметрыФормирования.Вставить("ПроксиВХранилище", ПроксиВХранилище);
	
	// ПараметрыКлиента
	ПараметрыФормирования.Вставить("ВебБраузер", ПараметрыКлиента.ВебБраузер);
	
	
	Возврат ПараметрыФормирования;
	
КонецФункции

// АПК:441-выкл Временный файл передается во внешнюю среду

Функция ВывестиМашиночитаемуюФормуЧерезВебСервис(ПараметрыФормирования) Экспорт
	
	ПараметрыСформированногоОтчета = Новый Структура;
	ПараметрыСформированногоОтчета.Вставить("ИДСессии", "");
	ПараметрыСформированногоОтчета.Вставить("АдресОтчетаВоВременномХранилище");
	ПараметрыСформированногоОтчета.Вставить("ВремяОжиданияДоПолученияОтчета", 0);
	ПараметрыСформированногоОтчета.Вставить("АдресПараметровПроксиВоВременномХранилище", ПараметрыФормирования.ПроксиВХранилище);
	
	АдресПараметровПроксиВоВременномХранилище = ПараметрыФормирования.ПроксиВХранилище;
	
	Попытка
		ПараметрыПодключения = ПолучитьИзВременногоХранилища(АдресПараметровПроксиВоВременномХранилище);
		ПриведенныеПараметры = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ЗаполнитьЗначенияСвойств(ПриведенныеПараметры, ПараметрыПодключения);
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПриведенныеПараметры);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось получить подключение к веб-сервису. Проверьте адрес точки подключения, имя, пароль или доступность веб-сервиса.'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыФормирования.ДвоичныеДанные);
	
	Если ДвоичныеДанные = Неопределено Или ТипЗнч(ДвоичныеДанные) <> Тип("Структура") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось получить файл выгрузки отчета на сервере.'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("tmp");
	ФайлВыгрузкиДвоичныеДанные = ДвоичныеДанные.ДанныеСправки;
	ФайлВыгрузкиДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ПрефиксИмениШаблона = Лев(ПараметрыФормирования.ИмяФайлаМакета, 15);
	
	ШаблоныМашиночитаемыхФорм = Новый СписокЗначений;
	ШаблоныМашиночитаемыхФорм.Добавить(Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ПолучитьМакет("МБ_1151078_5_06000_01_tif"), "1151078_5.06000_01.tif");
	Если НЕ ПроверитьИВыборочноОбновитьШаблоныМашиночитаемыхФормНаВебСервисе(ПрефиксИмениШаблона, ШаблоныМашиночитаемыхФорм, Прокси) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось получить файл выгрузки отчета на сервере.'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "";
	ВремяОжиданияДоПолученияОтчета = 0;
	ИДСессии = Строка(Новый УникальныйИдентификатор());
	Если Прокси.CreateReport(ИДСессии, ФайлВыгрузкиДвоичныеДанные, ПараметрыФормирования.НаименованиеИФНС, ПрефиксИмениШаблона, ТекстОписанияОшибки, ВремяОжиданияДоПолученияОтчета) <> Истина Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось сформировать файл машиночитаемой формы на сервере по причине:'") + Символы.ПС  + ТекстОписанияОшибки;
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСформированногоОтчета.ИДСессии = ИДСессии;
	ПараметрыСформированногоОтчета.ВремяОжиданияДоПолученияОтчета = ВремяОжиданияДоПолученияОтчета;
	
	ПараметрыФормирования.Вставить("ПараметрыВызоваЭкспортнойПроцедуры", ПараметрыСформированногоОтчета);
	
	Возврат Истина;
	
КонецФункции

// АПК:441-вкл

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьИВыборочноОбновитьШаблоныМашиночитаемыхФормНаВебСервисе(ПрефиксИмениШаблона, ШаблоныМашиночитаемыхФорм, Прокси)

	Перем СписокНайденныхШаблонов;
	
	Если Прокси.CheckTemplates(ПрефиксИмениШаблона, СписокНайденныхШаблонов) <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	WSФабрикаXDTO = Прокси.Определение.ФабрикаXDTO;
	WSТипСписокШаблонов = ПолучитьWSТипПоИмени(WSФабрикаXDTO, "TemplatesList");
	Если WSТипСписокШаблонов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	WSСписокНайденныхШаблонов = СписокНайденныхШаблонов.StringItem;
	Если WSСписокНайденныхШаблонов.Количество() > 0 Тогда
		
		Для каждого ИмяВнешнегоШаблона Из WSСписокНайденныхШаблонов Цикл
			ИмяВнешнегоШаблона = СокрЛП(ИмяВнешнегоШаблона);
			
			КоличествоШаблоновВСписке = ШаблоныМашиночитаемыхФорм.Количество();
			Для Ном = 1 По КоличествоШаблоновВСписке Цикл
				ИмяВнутреннегоШаблона = СокрЛП(ШаблоныМашиночитаемыхФорм.Получить(КоличествоШаблоновВСписке - Ном).Представление);
				Если Лев(ИмяВнешнегоШаблона, СтрДлина(ИмяВнешнегоШаблона) - 7) =  Лев(ИмяВнутреннегоШаблона, СтрДлина(ИмяВнутреннегоШаблона) - 7)
				   И Лев(ИмяВнешнегоШаблона, СтрДлина(ИмяВнешнегоШаблона) - 4) >= Лев(ИмяВнутреннегоШаблона, СтрДлина(ИмяВнутреннегоШаблона) - 4) Тогда
					ШаблоныМашиночитаемыхФорм.Удалить(КоличествоШаблоновВСписке - Ном);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Если ШаблоныМашиночитаемыхФорм.Количество() = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Отсутствует шаблон для формирования машиночитаемой формы.'") + Символы.ПС 
				+ НСтр("ru='Необходимо зарегистрировать в информационной базе внешний шаблон'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ШаблоныМашиночитаемыхФорм.Количество() > 0 Тогда
		
		WSСписокШаблонов = WSФабрикаXDTO.Создать(WSТипСписокШаблонов);
		WSТипЭлементШаблон = ПолучитьWSТипПоИмени(WSФабрикаXDTO, "TemplateItem");
		
		Для каждого ШаблонМашиночитаемойФормы Из ШаблоныМашиночитаемыхФорм Цикл
			WSЭлементШаблон = WSФабрикаXDTO.Создать(WSТипЭлементШаблон);
			WSЭлементШаблон.TemplateName = ШаблонМашиночитаемойФормы.Представление;
			WSЭлементШаблон.TemplateBinData = ШаблонМашиночитаемойФормы.Значение;
			WSЭлементШаблон.DatePlace = ТекущаяДатаСеанса();
			WSСписокШаблонов.TemplateItem.Добавить(WSЭлементШаблон);
		КонецЦикла;
		
		Если Прокси.UploadTemplates(WSСписокШаблонов) <> Истина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не удалось обновить шаблон машиночитаемой формы на веб-сервисе'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПолучитьWSТипПоИмени(WSФабрикаXDTO, ИмяТипаВПакете)

	URIПространстваИмен = "";
	Для каждого WSПакетXDTO Из WSФабрикаXDTO.Пакеты Цикл
		Если СтрНайти(WSПакетXDTO.URIПространстваИмен, "/LibraryRegulatoryReporting/") > 0 Тогда
			URIПространстваИмен = WSПакетXDTO.URIПространстваИмен;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Возврат WSФабрикаXDTO.Тип(URIПространстваИмен, ИмяТипаВПакете);
	Исключение
		Возврат Неопределено;
	КонецПопытки;

КонецФункции

#КонецОбласти