#Область СлужебныйПрограммныйИнтерфейс

#Область Обмен

Процедура ПостроитьОчередьСообщений(ПараметрыОбмена, СообщениеИлиДокумент = Неопределено) Экспорт
	
	ПараметрыОбмена.ОчередьСообщений.Очистить();
	ПараметрыОбмена.ЗависимостиСообщений.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Очередь.ДатаСоздания       КАК ДатаСоздания,
	|	Очередь.Сообщение          КАК Сообщение,
	|	Очередь.СообщениеОснование КАК СообщениеОснование,
	|	
	|	Очередь.ВидПродукции              КАК ВидПродукции,
	|	Очередь.Операция                  КАК Операция,
	|	Очередь.Назначение                КАК Назначение,
	|	Очередь.СтанцияУправленияЗаказами КАК СтанцияУправленияЗаказами,
	|	Очередь.ПроизводственныйОбъект    КАК ПроизводственныйОбъект,
	|	
	|	Очередь.Организация       КАК Организация,
	|	Очередь.Документ          КАК Документ,
	|	Очередь.ДокументОснование КАК ДокументОснование,
	|	
	|	Очередь.РеквизитыИсходящегоСообщения      КАК РеквизитыИсходящегоСообщения,
	|	Очередь.ПротоколОбмена                    КАК ПротоколОбмена,
	|	Очередь.ДатаМодификацииУниверсальная      КАК ДатаМодификацииУниверсальная,
	|	Очередь.ЗагружатьПосле                    КАК ЗагружатьПосле,
	|	Очередь.ЗагружатьДо                       КАК ЗагружатьДо,
	|	Очередь.ИдентификаторЗаявки               КАК ИдентификаторЗаявки,
	|	Очередь.ИдентификаторПоследнегоБлокаКодов КАК ИдентификаторПоследнегоБлокаКодов
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийИСМП КАК Очередь
	|ГДЕ
	|	&УсловиеПоОрганизациям
	|");
	
	Если ПараметрыОбмена.Организации <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизациям", "Очередь.Организация В(&Организации)");
		Запрос.УстановитьПараметр("Организации", ПараметрыОбмена.Организации);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизациям", "ИСТИНА");
	КонецЕсли;
	
	Если СообщениеИлиДокумент <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + Символы.ПС +
			"И (Очередь.Сообщение В(&СообщениеИлиДокумент) Или Очередь.Документ В(&СообщениеИлиДокумент))";
		
		Запрос.УстановитьПараметр("СообщениеИлиДокумент", СообщениеИлиДокумент);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РеквизитыИсходящегоСообщения = Выборка.РеквизитыИсходящегоСообщения.Получить();
		ПротоколОбмена               = Выборка.ПротоколОбмена.Получить();
		
		ЭлементОчереди = ПараметрыОбмена.ОчередьСообщений.Добавить();
		ЭлементОчереди.ДатаСоздания       = Выборка.ДатаСоздания;
		ЭлементОчереди.Сообщение          = Выборка.Сообщение;
		ЭлементОчереди.СообщениеОснование = Выборка.СообщениеОснование;
		
		ЭлементОчереди.ВидПродукции              = Выборка.ВидПродукции;
		ЭлементОчереди.Операция                  = Выборка.Операция;
		ЭлементОчереди.Назначение                = Выборка.Назначение;
		ЭлементОчереди.СтанцияУправленияЗаказами = Выборка.СтанцияУправленияЗаказами;
		ЭлементОчереди.ПроизводственныйОбъект    = Выборка.ПроизводственныйОбъект;
		
		ЭлементОчереди.Организация       = Выборка.Организация;
		ЭлементОчереди.Документ          = Выборка.Документ;
		ЭлементОчереди.ДокументОснование = Выборка.ДокументОснование;
		
		ЭлементОчереди.РеквизитыИсходящегоСообщения      = РеквизитыИсходящегоСообщения;
		ЭлементОчереди.ПротоколОбмена                    = ПротоколОбмена;
		ЭлементОчереди.ДатаМодификацииУниверсальная      = Выборка.ДатаМодификацииУниверсальная;
		ЭлементОчереди.ИдентификаторЗаявки               = Выборка.ИдентификаторЗаявки;
		ЭлементОчереди.ИдентификаторПоследнегоБлокаКодов = Выборка.ИдентификаторПоследнегоБлокаКодов;
		
		Если ЗначениеЗаполнено(Выборка.ЗагружатьПосле) Тогда
			НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
			НоваяЗависимость.Сообщение1 = Выборка.Сообщение;
			НоваяЗависимость.Сообщение2 = Выборка.ЗагружатьПосле;
			НоваяЗависимость.Загрузка   = Ложь;
			НоваяЗависимость.Передача   = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ЗагружатьДо) Тогда
			НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
			НоваяЗависимость.Сообщение1 = Выборка.ЗагружатьДо;
			НоваяЗависимость.Сообщение2 = Выборка.Сообщение;
			НоваяЗависимость.Загрузка   = Ложь;
			НоваяЗависимость.Передача   = Ложь;
		КонецЕсли;
		
		Если ПротоколОбмена <> Неопределено
			И ПротоколОбмена.Количество() > 0 Тогда
			
			ПоследняяЗаписьПротоколаОбмена = ПротоколОбмена[ПротоколОбмена.Количество() - 1];
			ЭлементОчереди.ТекущийСтатусОбработки = ПоследняяЗаписьПротоколаОбмена.СтатусОбработки;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
					ПоследняяЗаписьПротоколаОбмена, "Статус") Тогда
				ЭлементОчереди.ТекущийСтатус = ПоследняяЗаписьПротоколаОбмена.Статус;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗависимостиКУдалению = Новый Соответствие();
	Для Каждого СтрокаТЧ Из ПараметрыОбмена.ЗависимостиСообщений Цикл
		Если ПараметрыОбмена.ОчередьСообщений.Найти(СтрокаТЧ.Сообщение1, "Сообщение") = Неопределено
			Или ПараметрыОбмена.ОчередьСообщений.Найти(СтрокаТЧ.Сообщение2, "Сообщение") = Неопределено Тогда
			ЗависимостиКУдалению.Вставить(СтрокаТЧ, Истина);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючИЗначение Из ЗависимостиКУдалению Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
	ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	ВозвращаемоеЗначение.Вставить(
		"ИзвлекатьДанныеЛогаЗапросов",
		ИнтеграцияИСМПКлиентСерверПовтИсп.ЭтоФоновоеЗаданиеНаСервере());
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыОбмена", ПараметрыОбмена);
	
	// Собрать JSON для передаваемых документов
	// Требуется подписание документа на клиенте? Если да, то документы требуется вернуть на клиент.
	// Нужен ли запрос авторизации? Если да, то документы нужно положить в очередь и вернуться на клиент для авторизации
	// После всего - выполнить передачу и дождаться результата - изменений.
	СообщенияJSON = Новый Массив;
	Для Каждого ПараметрыОбработкиДокумента Из ВходящиеДанные Цикл
		
		СообщенияДокументаJSON = СообщениеКПередачеJSON(
			ПараметрыОбработкиДокумента.Ссылка,
			ПараметрыОбработкиДокумента.ДальнейшееДействие,
			ДополнительныеПараметры);
		
		Для Каждого СообщениеJSON Из СообщенияДокументаJSON Цикл
			СообщенияJSON.Добавить(СообщениеJSON);
		КонецЦикла;
		
	КонецЦикла;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
	
	ЕстьОшибки = Ложь;
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено Тогда
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТребуетсяОжидание = ДатаСледующейИтерации <> Неопределено
	               Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);
	
	ТребуетсяПодписание = ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
	                  Или ПараметрыОбмена.КОбновлениюКлючейСессии <> Неопределено;
	
	Если ТребуетсяОжидание И Не ТребуетсяПодписание Тогда
		
		Если ДатаСледующейИтерации <> Неопределено Тогда
			ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
		Иначе
			ВремяОжидания = 0;
		КонецЕсли;
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ИнтеграцияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
				Неопределено,
				ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
				Неопределено,
				ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		ДоступныеСертификаты = Неопределено;
		Если ТребуетсяПодписание Тогда
			
			ПроверитьКлючиСессии(
				ПараметрыОбмена.СообщенияКПодписанию,
				СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
			
			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			ДоступныеСертификаты(ПараметрыОбмена.КОбновлениюКлючейСессии, ДоступныеСертификаты);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = ПараметрыОбмена.КОбновлениюКлючейСессии;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание          = Неопределено;
		ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию    = Неопределено;
		
		Для Каждого НастройкаОбменаСУЗ Из ПараметрыОбмена.НастройкиОбменаСУЗ.ОбменНаСервере Цикл
			Для Каждого НастройкаПоОрганизации Из НастройкаОбменаСУЗ.Значение Цикл
				НастройкаПоОрганизации.ФоновоеЗадание = Неопределено;
			КонецЦикла;
		КонецЦикла;
		
		ЗаписатьЛогЗапросовВПараметрыОбмена(ПараметрыОбмена);
		
		ВозвращаемоеЗначение.Ожидать                   = ?(ВремяОжидания = 0, Неопределено, ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗагрузитьВходящиеДокументыУниверсально(ПараметрыЗагрузки, ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
	ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	ВозвращаемоеЗначение.Вставить(
		"ИзвлекатьДанныеЛогаЗапросов",
		ИнтеграцияИСМПКлиентСерверПовтИсп.ЭтоФоновоеЗаданиеНаСервере());
	
	Организации = Новый Массив;
	Если ТипЗнч(ПараметрыЗагрузки.Организация) = Тип("Массив") Тогда
		Организации = ПараметрыЗагрузки.Организация;
	Иначе
		Организации.Добавить(ПараметрыЗагрузки.Организация);
	КонецЕсли;
	
	Операция           = Перечисления.ВидыОперацийИСМП.ЗагрузкаВходящихДокументов;
	ВидыПродукцииУчета = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	СообщенияJSON = Новый Массив;
	Для Каждого ОрганизацияДляОбмена Из Организации Цикл
		
		Для Каждого ВидПродукции Из ВидыПродукцииУчета Цикл
			
			Если Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, Ложь) Тогда
				Продолжить;
			КонецЕсли;
			
			АбстрактноеСообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			
			АбстрактноеСообщениеJSON.ИдентификаторЗаявки = СтроковоеПредставлениеПустогоУникальногоИдентификатора();
			АбстрактноеСообщениеJSON.Идентификатор       = СокрЛП(Новый УникальныйИдентификатор());
			
			АбстрактноеСообщениеJSON.Организация       = ОрганизацияДляОбмена;
			АбстрактноеСообщениеJSON.Документ          = Неопределено;
			АбстрактноеСообщениеJSON.ДокументОснование = Неопределено;
			
			АбстрактноеСообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				Операция, Неопределено, Неопределено);
			
			АбстрактноеСообщениеJSON.ТекстСообщенияJSON  = Неопределено;
			АбстрактноеСообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			АбстрактноеСообщениеJSON.Версия              = Неопределено;
			АбстрактноеСообщениеJSON.ТребуетсяПодписание = Ложь;
			АбстрактноеСообщениеJSON.ПараметрыЗапроса    = ПараметрыЗагрузки; //.Инервал;
			
			АбстрактноеСообщениеJSON.ВидПродукции              = ВидПродукции;
			АбстрактноеСообщениеJSON.Операция                  = Операция;
			АбстрактноеСообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
			АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
			
			СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
			
		КонецЦикла;
		
	КонецЦикла;
	
	СертификатыДляПодписанияНаСервере  = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
	
	ЕстьОшибки = Ложь;
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено Тогда
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТребуетсяОжидание = ДатаСледующейИтерации <> Неопределено
	               Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);
	
	ТребуетсяПодписание = ПараметрыОбмена.КОбновлениюКлючейСессии <> Неопределено;
	
	Если ТребуетсяОжидание И Не ТребуетсяПодписание Тогда
		
		Если ДатаСледующейИтерации <> Неопределено Тогда
			ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
		Иначе
			ВремяОжидания = 0;
		КонецЕсли;
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ИнтеграцияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
				Неопределено,
				ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
				Неопределено,
				ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		ДоступныеСертификаты = Неопределено;
		Если ТребуетсяПодписание Тогда
			
			ПроверитьКлючиСессии(
				ПараметрыОбмена.СообщенияКПодписанию,
				СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
			
			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			ДоступныеСертификаты(ПараметрыОбмена.КОбновлениюКлючейСессии, ДоступныеСертификаты);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = ПараметрыОбмена.КОбновлениюКлючейСессии;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание          = Неопределено;
		ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию    = Неопределено;
		
		ЗаписатьЛогЗапросовВПараметрыОбмена(ПараметрыОбмена);
		
		ВозвращаемоеЗначение.Ожидать                   = ?(ВремяОжидания = 0, Неопределено, ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПродолжитьВыполнениеОбменаУниверсально(ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
	ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	ВозвращаемоеЗначение.Вставить(
		"ИзвлекатьДанныеЛогаЗапросов",
		ИнтеграцияИСМПКлиентСерверПовтИсп.ЭтоФоновоеЗаданиеНаСервере());
	
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ВыполнитьИтерацию = Истина;
	ВремяОжидания     = Неопределено;
	Пока ВыполнитьИтерацию Цикл
		
		ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
		
		ЕстьОшибки = Ложь;
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ТребуетсяОжидание = ДатаСледующейИтерации <> Неопределено
		               Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);
		
		ТребуетсяПодписание = ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
		                  Или ПараметрыОбмена.КОбновлениюКлючейСессии <> Неопределено;
		
		Если ТребуетсяОжидание И Не ТребуетсяПодписание Тогда
			
			Если ДатаСледующейИтерации <> Неопределено Тогда
				ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
			Иначе
				ВремяОжидания = 0;
			КонецЕсли;
			
			Если ПараметрыОбмена.ОжидатьНаСервере Тогда
				ИнтеграцияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			ИначеЕсли ПараметрыОбмена.ОжидатьНаКлиенте И ВремяОжидания <> 0 Тогда
				ВыполнитьИтерацию = Ложь;
			КонецЕсли;
			
		Иначе
			
			ВыполнитьИтерацию = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		ДоступныеСертификаты = Неопределено;
		Если ТребуетсяПодписание Тогда
			
			ПроверитьКлючиСессии(
				ПараметрыОбмена.СообщенияКПодписанию,
				Неопределено, ПараметрыОбмена);
			
			ДоступныеСертификаты(ПараметрыОбмена.КОбновлениюКлючейСессии, ДоступныеСертификаты);
			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = ПараметрыОбмена.КОбновлениюКлючейСессии;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание          = Неопределено;
		ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию    = Неопределено;
		
		Для Каждого НастройкаОбменаСУЗ Из ПараметрыОбмена.НастройкиОбменаСУЗ.ОбменНаСервере Цикл
			Для Каждого НастройкаПоОрганизации Из НастройкаОбменаСУЗ.Значение Цикл
				НастройкаПоОрганизации.ФоновоеЗадание = Неопределено;
			КонецЦикла;
		КонецЦикла;
		
		ЗаписатьЛогЗапросовВПараметрыОбмена(ПараметрыОбмена);
		
		ВозвращаемоеЗначение.Ожидать                   = ?(ВремяОжидания = 0, Неопределено, ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВыполнитьОбменУниверсально(ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
	ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	ВозвращаемоеЗначение.Вставить(
		"ИзвлекатьДанныеЛогаЗапросов",
		ИнтеграцияИСМПКлиентСерверПовтИсп.ЭтоФоновоеЗаданиеНаСервере());
	
	ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
	
	ЕстьОшибки = Ложь;
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено Тогда
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТребуетсяОжидание = ДатаСледующейИтерации <> Неопределено
	               Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);
	
	ТребуетсяПодписание = ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
	                  Или ПараметрыОбмена.КОбновлениюКлючейСессии <> Неопределено;
	
	Если ТребуетсяОжидание И Не ТребуетсяПодписание Тогда
		
		Если ДатаСледующейИтерации <> Неопределено Тогда
			ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
		Иначе
			ВремяОжидания = 0;
		КонецЕсли;
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ИнтеграцияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ПродолжитьВыполнениеОбменаУниверсально(Неопределено, ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ПродолжитьВыполнениеОбменаУниверсально(Неопределено, ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		ДоступныеСертификаты = Неопределено;
		Если ТребуетсяПодписание Тогда
			
			ПроверитьКлючиСессии(
				ПараметрыОбмена.СообщенияКПодписанию,
				Неопределено, ПараметрыОбмена);
			
			ДоступныеСертификаты(ПараметрыОбмена.КОбновлениюКлючейСессии, ДоступныеСертификаты);
			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = ПараметрыОбмена.КОбновлениюКлючейСессии;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание          = Неопределено;
		ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию    = Неопределено;
		
		Для Каждого НастройкаОбменаСУЗ Из ПараметрыОбмена.НастройкиОбменаСУЗ.ОбменНаСервере Цикл
			Для Каждого НастройкаПоОрганизации Из НастройкаОбменаСУЗ.Значение Цикл
				НастройкаПоОрганизации.ФоновоеЗадание = Неопределено;
			КонецЦикла;
		КонецЦикла;
		
		ЗаписатьЛогЗапросовВПараметрыОбмена(ПараметрыОбмена);
		
		ВозвращаемоеЗначение.Ожидать                   = ?(ВремяОжидания = 0, Неопределено, ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВремяОжидания(НомерИтерации) Экспорт
	
	Если НомерИтерации <= 1 Тогда
		ВремяОжидания = 5;
	ИначеЕсли НомерИтерации < 15 Тогда
		ВремяОжидания = 5 * Pow(1.4, НомерИтерации - 1);
	Иначе
		ВремяОжидания = 120;
	КонецЕсли;
	
	Возврат ВремяОжидания;
	
КонецФункции

// Формирует пустую структуру сообщения XML
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ТекстОшибки                 - Строка - Текст ошибки.
//   * Ошибки                      - Соответствие - Описание ошибок.
//   * Описание                    - Строка - Описание для отображения в форме подписания.
//   * ТекстСообщенияJSON          - Строка - Текст сообщения JSON.
//   * ТипЗапроса                  - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
//   * Организация                 - ОпределяемыйТип.Организация - Организация.
//   * Операция                    - ПеречислениеСсылка.ВидыОперацийИСМП - Вид операции.
//   * Документ                    - ДокументСсылка - Документ.
//   * Версия                      - Строка - Версия сообщения.
//   * СообщениеОснование          - СправочникСсылка.ИСМППрисоединенныеФайлы - сообщение основание.
//   * ДанныеДляПолученияДокумента - Структура - Данные для получения документа.
//   * ДокументОснование           - ДокументСсылка - Документ основание.
Функция СтруктураСообщенияJSON() Экспорт
	
	СообщениеJSON = Новый Структура;
	
	СообщениеJSON.Вставить("ТекстОшибки", "");
	СообщениеJSON.Вставить("Ошибки", Новый Соответствие);
	СообщениеJSON.Вставить("ИдентификаторЗаявки");

	// Для отображения в форме подписания
	СообщениеJSON.Вставить("Описание", "");
	// Для управления очередностью
	СообщениеJSON.Вставить("Идентификатор");
	СообщениеJSON.Вставить("ЗагружатьДо");
	СообщениеJSON.Вставить("ЗагружатьПосле");
	
	// Для использования в механизмах электронной подписи
	СообщениеJSON.Вставить("ТекстСообщенияJSON");
	СообщениеJSON.Вставить("ТребуетсяПодписание");
	СообщениеJSON.Вставить("ТипСообщения");
	СообщениеJSON.Вставить("Версия", 0);
	
	// Для сохранения в Протокол обмена
	СообщениеJSON.Вставить("ВерсияГосИС");
	СообщениеJSON.Вставить("ВидПродукции");
	СообщениеJSON.Вставить("Операция");
	СообщениеJSON.Вставить("Назначение");
	СообщениеJSON.Вставить("ФорматОбмена");
	СообщениеJSON.Вставить("СтанцияУправленияЗаказами");
	СообщениеJSON.Вставить("ПроизводственныйОбъект");
	
	// Используется при запросах квитанций
	СообщениеJSON.Вставить("СообщениеОснование");
	
	// Используется при получении кодов маркировки из СУЗ
	СообщениеJSON.Вставить("ПараметрыЗапроса");
	
	// Для обновления в формах
	СообщениеJSON.Вставить("Организация");
	СообщениеJSON.Вставить("Документ");
	СообщениеJSON.Вставить("ДокументОснование");
	
	Возврат СообщениеJSON;
	
КонецФункции

// Добавить запись в протокол обмена.
//
// Параметры:
//  ТекстСообщенияJSON - Строка - Текст сообщения XML.
//  Реквизиты - Структура - Значения реквизитов сообщения.
//  ПроверятьХешБезСсылки - Булево - Признак проверки хеша без ссылки.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовоеСообщение - Булево - Это новое сообщение.
//   * Ссылка - СправочникСсылка.ИСМППрисоединенныеФайлы - Ссылка на присоединенный файл.
//
Функция ДобавитьЗаписьВПротоколОбмена(ТекстСообщенияJSON, Реквизиты, ПроверятьХешБезСсылки = Ложь) Экспорт
	
	Реквизиты.Вставить("ВладелецФайлов", Реквизиты.Документ);
	Возврат ИнтеграцияИС.ДобавитьЗаписьВПротоколОбмена(
		Метаданные.Справочники.ИСМППрисоединенныеФайлы,
		ТекстСообщенияJSON,
		Реквизиты,
		ПроверятьХешБезСсылки);
	
КонецФункции

Функция ОпределитьСтанциюУправленияЗаказами(СообщенияJSON, СообщениеJSON, Шапка, ДополнительныеПараметры) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Успешно",                   Истина);
	ВозвращаемоеЗначение.Вставить("СтанцияУправленияЗаказами", Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкаОбмена",           Неопределено);
	
	РезультатПолученияНастройки = НастройкаОбменаСУЗ(
		ДополнительныеПараметры.ПараметрыОбмена,
		НоваяСтруктураПоискаНастроекОбменаСУЗ(Шапка));
	
	Если Не РезультатПолученияНастройки.Успешно Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			РезультатПолученияНастройки.ТекстОшибки);
		СообщенияJSON.Добавить(СообщениеJSON);
		ВозвращаемоеЗначение.Успешно = Ложь;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ВозвращаемоеЗначение.НастройкаОбмена           = РезультатПолученияНастройки.НастройкаОбмена;
	ВозвращаемоеЗначение.СтанцияУправленияЗаказами = РезультатПолученияНастройки.НастройкаОбмена.СтанцияУправленияЗаказами;
	
	Если ВозвращаемоеЗначение.СтанцияУправленияЗаказами = Неопределено Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Не удалось определить активный СУЗ для организации %1.'"), Шапка.Организация));
		СообщенияJSON.Добавить(СообщениеJSON);
		ВозвращаемоеЗначение.Успешно = Ложь;
	ИначеЕсли РезультатПолученияНастройки.НастройкаОбмена.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Формат обмена с СУЗ версии v1 не поддерживается для вида продукции: %1'") , Шапка.ВидПродукции));
		СообщенияJSON.Добавить(СообщениеJSON);
		ВозвращаемоеЗначение.Успешно = Ложь;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НоваяСтруктураПоискаНастроекОбменаСУЗ(Основание = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Организация");
	ВозвращаемоеЗначение.Вставить("Документ");
	ВозвращаемоеЗначение.Вставить("Назначение");
	ВозвращаемоеЗначение.Вставить("СтанцияУправленияЗаказами");
	ВозвращаемоеЗначение.Вставить("ПроизводственныйОбъект");
	
	Если Основание <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, Основание);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

Процедура ПодготовитьКПередачеДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыОбмена   = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ВходящиеДанные    = ПараметрыФоновогоЗадания.ВходящиеДанные;
	ПараметрыСеансаИС = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Процедура ЗагрузитьВходящиеДокументыДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыОбмена   = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ПараметрыЗагрузки = ПараметрыФоновогоЗадания.ПараметрыЗагрузки;
	ПараметрыСеансаИС = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ЗагрузитьВходящиеДокументыУниверсально(ПараметрыЗагрузки, ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Процедура ВыполнитьОбменДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыОбмена   = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ПараметрыСеансаИС = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ВыполнитьОбменУниверсально(ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Процедура ПродолжитьВыполнениеОбменаДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПодписанныеСообщенияПоОрганизациям = ПараметрыФоновогоЗадания.ПодписанныеСообщенияПоОрганизациям;
	ПараметрыОбмена                    = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ПараметрыСеансаИС                  = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ПродолжитьВыполнениеОбменаУниверсально(ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

Процедура ПроверитьЗаполнениеШтрихкодовУпаковок(Объект, Отказ) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Объект, Неопределено, Объект.ВидПродукции); 
	
	СписокУпаковок = Объект.ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки");
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.МаркировкаТоваровИСМП")
			И ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Объект.ВидПродукции) Тогда
		УпаковкиБезСроковГодности = Объект.ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("СрокГодности", Дата(1,1,1)));
		Если УпаковкиБезСроковГодности.Количество()<>СписокУпаковок.Количество() Тогда
			СписокУпаковок = Новый Массив;
			Для Каждого СтрокаТабличнойЧасти Из Объект.ШтрихкодыУпаковок Цикл
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СрокГодности) Тогда
					СписокУпаковок.Добавить(СтрокаТабличнойЧасти.ШтрихкодУпаковки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки = ТаблицаТоварыСоответствуетСпискуУпаковокМаркируемойПродукции(Объект.Товары, СписокУпаковок, ПараметрыСканирования); 
	
	Если РезультатПроверки.ДанныеСоответствуют Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонОшибки = НСтр("ru = 'В строке %1 для номенклатурной позиции %2 должно быть указано кодов маркировки - %3, а указано - %4'");
	ШаблонОшибкиЛишниеКоды = НСтр("ru = 'Для номенклатурной позиции %1 указано %2 кодов маркировки, а соответствующая им строка табличной части ""Товары"" отсутствует'");
	Для Каждого Расхождение Из РезультатПроверки.СтрокиСРасхождением Цикл
		Если Расхождение.НомерСтроки = -1 Тогда
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЛишниеКоды, Расхождение.Номенклатура, Расхождение.Указано);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект,"Товары",, Отказ);
		Иначе
			ТекстОшибки = СтрШаблон(ШаблонОшибки,
				Расхождение.НомерСтроки, Расхождение.Номенклатура, Расхождение.Необходимо, Расхождение.Указано);
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Расхождение.НомерСтроки, "КоличествоУпаковок");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект, ПутьКТабличнойЧасти,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОперацииОбменаДанными

// Сформировать описание операции для документа
//
// Параметры:
//  Описание - Строка - Описание операции
//  ДокументСсылка - ДокументСсылка - Документ
//  НомерВерсии - Число - Номер версии
//  ТекстПоКоличествуСообщений - Строка - Текст с количеством сообщений
// 
// Возвращаемое значение:
//  Строка - Описание операции.
//
Функция ОписаниеОперации(Описание, ДокументСсылка, НомерВерсии = Неопределено, ТекстПоКоличествуСообщений = Неопределено) Экспорт
	
	Если НомерВерсии = Неопределено И ДокументСсылка = Неопределено Тогда
		ТекстВозврата = Описание;
	ИначеЕсли НомерВерсии = Неопределено И ДокументСсылка <> Неопределено Тогда
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1 по документу ""%2""'"), Описание, ДокументСсылка);
	ИначеЕсли НомерВерсии <> Неопределено И ДокументСсылка = Неопределено Тогда
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1. Версия %2'"), Описание, НомерВерсии);
	Иначе
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1 по документу ""%2"". Версия %3'"), Описание, ДокументСсылка, НомерВерсии);
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстПоКоличествуСообщений) Тогда
		ТекстВозврата = ТекстВозврата + ". " + ТекстПоКоличествуСообщений;
	КонецЕсли;
	
	Возврат ТекстВозврата;

КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  ОперацияПередачиДанных - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ЕГАИС
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  НомерВерсии - Число - Номер версии
//  ТекстПоКоличествуСообщений - Строка - Текст с количеством сообщений
// 
// Возвращаемое значение:
//  Строка - Описание операции
//
Функция ОписаниеОперацииПередачиДанных(ОперацияПередачиДанных, ДокументСсылка = Неопределено, НомерВерсии = Неопределено, ТекстПоКоличествуСообщений = Неопределено) Экспорт
	
	КатегорииОпераций = КатегорииОпераций();
	ОписаниеОперации = КатегорииОпераций.ПередачаДанных.Получить(ОперацияПередачиДанных);
	
	Возврат ОписаниеОперации(ОписаниеОперации, ДокументСсылка, НомерВерсии, ТекстПоКоличествуСообщений);
	
КонецФункции

// Формирует текст счетчика по формату N из M.
//
// Параметры:
// 	ТекущийНомерГруппы - Число - текущий номер в группе.
// 	КоличествоГрупп - Число - Всего элементов в группе.
// Возвращаемое значение:
// 	Строка - Сформированный текст счетчика.
Функция ТекстКоличествоИзГруппы(ТекущийНомерГруппы, КоличествоГрупп) Экспорт
	Если КоличествоГрупп > ТекущийНомерГруппы Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 из %2'"), ТекущийНомерГруппы, КоличествоГрупп);
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  ОперацияПередачиДанных - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ЕГАИС
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  НомерВерсии - Число - Номер версии
// 
// Возвращаемое значение:
//  Строка - Описание операции
//
Функция ОписаниеОперацииПолученияДанных(ОперацияПередачиДанных) Экспорт
	
	КатегорииОпераций = КатегорииОпераций();
	ОписаниеОперации = КатегорииОпераций.ПолучениеДанных.Получить(ОперацияПередачиДанных);
	
	Возврат ОписаниеОперации(ОписаниеОперации, Неопределено, Неопределено);
	
КонецФункции

// Возвращает операции обмена с ИС МП, разбитые на категории
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//    * ПередачаДанных - Соответствие - Операции передачи данных.
//    * ПолучениеДанных - Соответствие - Операции получения данных.
//
Функция КатегорииОпераций() Экспорт
	
	ПередачаДанных = Новый Соответствие;
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки,
		НСтр("ru = 'Оформление заказа на эмиссию кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки,
		НСтр("ru = 'Оформление GTIN для маркировки остатков продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса,
		НСтр("ru = 'Расчет статуса заказа на эмиссию (Абстрактная операция)'"));

	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.Агрегация,
		НСтр("ru = 'Передача сведений об агрегации кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияСоздание,
		НСтр("ru = 'Передача сведений о формировании агрегата'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияИзменение,
		НСтр("ru = 'Передача сведений о переагрегации'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияУдаление,
		НСтр("ru = 'Передача сведений о расформировании агрегата'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АТК,
		НСтр("ru = 'Передача сведений об обработке кодов АТК'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АТКСоздание,
		НСтр("ru = 'Передача сведений о формировании АТК'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АТКИзменение,
		НСтр("ru = 'Передача сведений о трансформации АТК'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АТКУдаление,
		НСтр("ru = 'Передача сведений о расформировании АТК'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса,
		НСтр("ru = 'Передача сведений о переагрегации (абстрактная операция)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента,
		НСтр("ru = 'Проверка статуса обработки документа агрегации'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборот,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной продукции собственного производства'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной импортной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной импортной продукции (с ФТС)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной продукции, произведенной по договору'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной продукции, произведенной по договору'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц,
		НСтр("ru = 'Передача сведений о вводе в оборот продукции, полученной от физических лиц'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков,
		НСтр("ru = 'Передача сведений о вводе в оборот остатков продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля,
		НСтр("ru = 'Передача сведений о вводе в оборот при трансграничной торговле'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборота,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при конфискации товаров'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при уничтожении товаров'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при банкротстве или ликвидации организации'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при безвозмездной передаче товара'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при внутреннем использовании продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при возврате товара физическому лицу'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВПроцессеРеализацииПоДоговоруРассрочки,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции в процессе реализации продукции по договору рассрочки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при розничной продаже по кредитному договору'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при порче или учере товара'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при реализации конфискованной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при реализации по договору рассрочки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при розничной продаже'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при экспорте в ЕАЭС'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при экспорте за пределы ЕАЭС'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа,
		НСтр("ru = 'Передача сведений о выводе из оборота при дистанционной торговле'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБрак,
		НСтр("ru = 'Передача сведений о выводе из оборота бракованного товара'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности,
		НСтр("ru = 'Передача сведений о выводе из оборота товара по истечению срока годности'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛабораторныеОбразцы,
		НСтр("ru = 'Передача сведений о выводе из оборота лабораторных образцов'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка,
		НСтр("ru = 'Передача сведений о выводе из оборота при отзыве с рынка'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРекламации,
		НСтр("ru = 'Передача сведений о выводе из оборота при рекламации'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругиеПричины,
		НСтр("ru = 'Передача сведений о выводе из оборота по другим причинам'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаТестированиеПродукта,
		НСтр("ru = 'Передача сведений о выводе из оборота при тестировании продукта'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВозвратВОборот,
		НСтр("ru = 'Передача сведений о возврате в оборот при дистанционной торговле'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи,
		НСтр("ru = 'Передача сведений о возврате в оборот при дистанционной торговле'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации,
		НСтр("ru = 'Передача сведений о возврате в оборот при розничной реализации'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки,
		НСтр("ru = 'Передача сведений в СУЗ об использовании кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию,
		НСтр("ru = 'Передача сведений в СУЗ о передаче кодов маркировки на производственную линию'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер,
		НСтр("ru = 'Передача сведений в СУЗ о передаче кодов маркировки на принтер'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ,
		НСтр("ru = 'Передача сведений в СУЗ о печати кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ,
		НСтр("ru = 'Передача сведений в СУЗ о потере распечатанных кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ,
		НСтр("ru = 'Передача сведений в СУЗ о верификации нанесенных кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса,
		НСтр("ru = 'Передача сведений в СУЗ об использовании кодов маркировки (Расчет статуса)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки,
		НСтр("ru = 'Передача сведений в СУЗ об использовании кодов маркировки (Проверка статуса кодов маркировки)'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки,
		НСтр("ru = 'Передача сведений о списании эмитированных кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.СписаниеВведенныхВОборотКодовМаркировки,
		НСтр("ru = 'Передача сведений о списании введенных в оборот кодов маркировки для последующей перемаркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента,
		НСтр("ru = 'Проверка статуса обработки документа списание'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.Перемаркировка,
		НСтр("ru = 'Передача сведений о перемаркировке продукции'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа,
		НСтр("ru = 'Передача сведений об отгрузке товаров при продаже'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент,
		НСтр("ru = 'Передача сведений об отгрузке товаров при передаче от агента к принципалу'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача,
		НСтр("ru = 'Передача сведений об отгрузке товаров при безвозмездной передаче'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия,
		НСтр("ru = 'Передача сведений об отгрузке товаров при передаче от комитента комиссионеру'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием,
		НСтр("ru = 'Передача сведений об отгрузке товаров при продаже по гос.контракту'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя,
		НСтр("ru = 'Передача сведений об отгрузке товаров при продаже для собственных нужд покупателя'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулировать,
		НСтр("ru = 'Передача сведений об аннулировании отгрузки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование,
		НСтр("ru = 'Передача сведений об аннулировании отгрузки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.Приемка,
		НСтр("ru = 'Передача сведений о приемке товаров'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаПродажа,
		НСтр("ru = 'Передача сведений о приемке товаров при продаже'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаАгент,
		НСтр("ru = 'Передача сведений о приемке товаров при передаче от агента к принципалу'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаБезвозмезднаяПередача,
		НСтр("ru = 'Передача сведений о приемке товаров при безвозмездной передаче'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаКомиссия,
		НСтр("ru = 'Передача сведений о приемке товаров при передаче от комитента комиссионеру'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаПриобретениеГосПредприятием,
		НСтр("ru = 'Передача сведений о приемке товаров при продаже по гос.контракту'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаДляСобственныхНуждПокупателя,
		НСтр("ru = 'Передача сведений о приемке товаров при продаже для собственных нужд покупателя'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля,
		НСтр("ru = 'Передача сведений о приемке товаров при продаже (трансграничная торговля)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаОтклонить,
		НСтр("ru = 'Передача сведений об отклонении приемки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаОтклонен,
		НСтр("ru = 'Передача сведений об отклонении приемки'"));
	
	ПолучениеДанных = Новый Соответствие;
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
		НСтр("ru = 'Получение результата обработки документа ИС МП'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиЗаказаНаЭмиссиюКодовМаркировки,
		НСтр("ru = 'Получение результата обработки Заказа на эмиссию кодов маркировки ИС МП'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ,
		НСтр("ru = 'Получение кодов маркировки из СУЗ'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПовторноеПолучениеКодовМаркировкиИзСУЗ,
		НСтр("ru = 'Повторное получение кодов маркировки из СУЗ'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеСтатусаПулаКодовМаркировкиИзСУЗ,
		НСтр("ru = 'Получение статуса пула кодов маркировки из СУЗ'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки,
		НСтр("ru = 'Оформление GTIN для маркировки остатков продукции'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗагрузкаВходящихДокументов,
		НСтр("ru = 'Загрузка входящих документов'"));
	
	Категории = Новый Структура;
	Категории.Вставить("ПередачаДанных",  ПередачаДанных);
	Категории.Вставить("ПолучениеДанных", ПолучениеДанных);
	
	Возврат Категории;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Формирует пустую структуру изменений данных
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//
Функция СтруктураИзменения() Экспорт
	
	СтруктураИзменения = Новый Структура;
	
	// Назначение сообщений: ИСМП, МОТП или СУЗ
	СтруктураИзменения.Вставить("Операция");
	СтруктураИзменения.Вставить("Назначение");
	СтруктураИзменения.Вставить("СтанцияУправленияЗаказами");
	
	// Источник
	СтруктураИзменения.Вставить("Организация");
	СтруктураИзменения.Вставить("Объект");
	СтруктураИзменения.Вставить("ДокументОснование");
	
	// Событие
	СтруктураИзменения.Вставить("ТекстОшибки",           "");
	СтруктураИзменения.Вставить("ПодготовленоКПередаче", Ложь);
	СтруктураИзменения.Вставить("Передано",              Ложь);
	СтруктураИзменения.Вставить("Принято",               Ложь);
	СтруктураИзменения.Вставить("ОбъектИзменен",         Ложь);
	СтруктураИзменения.Вставить("НовыйСтатус",           Неопределено);
	
	// Описание, протокол
	СтруктураИзменения.Вставить("Сообщение");
	СтруктураИзменения.Вставить("ТекстСообщения");
	СтруктураИзменения.Вставить("ПредставлениеПротоколаОбмена");
	
	Возврат СтруктураИзменения;
	
КонецФункции

// Выполняет запись ошибки в журнал регистрации, добавляя имя события ИС МП.
//
// Параметры:
//  ТекстОшибки      - Строка           - текст ошибки.
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных с ошибкой.
//  Данные           - Произвольный     - объект данных с ошибкой.
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ОбъектМетаданных = Неопределено, Данные = Неопределено) Экспорт
	
	ИнтеграцияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
		ТекстОшибки,
		НСтр("ru = 'ИС МП'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ОбъектМетаданных,
		Данные);
	
КонецПроцедуры

#КонецОбласти

#Область МаркировкаОстатков

// Заполняет колонку GTIN в переданный таблице значениями, пригодными для маркировки остатков, полученными с помощью
// (См. ИнтерфейсИСМП.НайтиПродукциюПоИННПроизводителя)
//
// Параметры:
// 	ТаблицаНоменклатуры   - ДанныеФормыКоллекция                      - Таблица номенклатуры для заполнения колонки GTIN:
// 	 * ЦелевойПол         - ПеречислениеСсылка.ЦелевойПолИСМП         - Целевой пол.
// 	 * СпособВводаВОборот - ПеречислениеСсылка.СпособыВводаВОборотСУЗ - Способ ввода в оборот.
// 	 * КодТНВЭД           - Строка                                    - Код ТНВЭД будет взято первые два символа.
// 	 * GTIN               - Строка                                    - Поле GTIN, значение которого требуется заполнить,
// 	                                                                    если не заполнено.
// 	Организация  - ОпределяемыйТип.Организация - Оранизация-владелец.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	ТекстОшибки  - Строка, Неопределено - Текст ошибки.
// Возвращаемое значение:
// 	Булево - Признак необходимости обновления ключа сессии.
Функция ЗаполнитьGTINМаркировкиОстатков(ТаблицаНоменклатуры, Организация, ВидПродукции, ТекстОшибки = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИНН                     = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация).ИНН;
	НомерСтраницы           = 0;
	ПовторятьИтерацию       = Истина;
	СоответствиеСтрокПоиска = Новый Соответствие;
	
	Для Каждого СтрокаТовары Из ТаблицаНоменклатуры Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.GTIN) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПоиска = СтрокаДляПоискаGTINМаркировкиОстатков(ВидПродукции, СтрокаТовары);
		
		МассивСтрокТоварыПоСоответствию  = СоответствиеСтрокПоиска[СтрокаПоиска];
		
		Если МассивСтрокТоварыПоСоответствию = Неопределено Тогда
			МассивСтрокТоварыПоСоответствию = Новый Массив;
			СоответствиеСтрокПоиска.Вставить(СтрокаПоиска, МассивСтрокТоварыПоСоответствию);
		КонецЕсли;
		
		МассивСтрокТоварыПоСоответствию.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	КешОписанияОстатков = Новый Соответствие();
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ВидПродукции",        ВидПродукции);
	ПараметрыЗаполнения.Вставить("Организация",         Организация);
	ПараметрыЗаполнения.Вставить("КешОписанияОстатков", КешОписанияОстатков);
	ПараметрыЗаполнения.Вставить("СтрокиПоиска",        СоответствиеСтрокПоиска);
	
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		
		ДанныеКэшаОписанияОстатков = РегистрыСведений.КэшОписанияОстатковИСМП.ДанныеДляПоискаПриЗаполненииGTIN(ПараметрыЗаполнения);
		ЗаполнитьПоОписаниюОстатков(
			ПараметрыЗаполнения,
			ДанныеКэшаОписанияОстатков);
		
	КонецЕсли;
	
	ВыполненныеЗапросы = Новый Структура();
	ВыполненныеЗапросы.Вставить("GTINыПоТАПИ",  (Не ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции)));
	ВыполненныеЗапросы.Вставить("ПоискТоваров", Ложь);
	
	Пока СоответствиеСтрокПоиска.Количество() И ПовторятьИтерацию Цикл
		
		ВариантAPI       = ?(ВыполненныеЗапросы.GTINыПоТАПИ, Неопределено, "ТАПИ");
		РезультатЗапроса = ИнтерфейсИСМП.НайтиПродукциюПоИННПроизводителя(ИНН, ВидПродукции, НомерСтраницы, Организация, ВариантAPI);
		НомерСтраницы    = НомерСтраницы + 1;
		
		Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
			Возврат Истина;
		ИначеЕсли РезультатЗапроса.ДанныеПродукцииПоШтрихкодуEAN = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатЗапроса.ТекстОшибки);
			ТекстОшибки = РезультатЗапроса.ТекстОшибки;
			Прервать;
		ИначеЕсли РезультатЗапроса.ДанныеПродукцииПоШтрихкодуEAN.Количество() = 0 Тогда
			Если Не ВыполненныеЗапросы.GTINыПоТАПИ Тогда
				ВыполненныеЗапросы.GTINыПоТАПИ = Истина;
			ИначеЕсли Не ВыполненныеЗапросы.ПоискТоваров Тогда
				ВыполненныеЗапросы.ПоискТоваров = Истина;
			КонецЕсли;
			Если ВыполненныеЗапросы.GTINыПоТАПИ
				И ВыполненныеЗапросы.ПоискТоваров Тогда
				ПовторятьИтерацию = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьПоОписаниюОстатков(
			ПараметрыЗаполнения,
			РезультатЗапроса.ДанныеПродукцииПоШтрихкодуEAN,
			Истина);
		
		Если СоответствиеСтрокПоиска.Количество() = 0 Тогда
			ПовторятьИтерацию = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.КэшОписанияОстатковИСМП.СохранитьПредставлениеОписанияОстатков(КешОписанияОстатков);
	
	Возврат Ложь;
	
КонецФункции

// Формирует строку для передачи описания остатков
// 
// Параметры:
// 	СтрокаТовары - СтрокаТабличнойЧасти - Строка докумемента Заказа на эмиссию СУЗ
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// Возвращаемое значение:
// 	Структура - Описание:
// * release_method - Строка - Способ ввода в оборот;
// * name           - Строка - Наименование товара;
// * model          - Строка - Модель;
// * tnved_code_2   - Число  - Начало кода ТНВЭД.
// * product_gender - Строка - Целевой пол.
// * consumer_age   - Строка - Возрастная категория.
Функция ОбязательныеПоляОписанияОстатковПоСтрокеДокумента(СтрокаТовары, ВидПродукции) Экспорт
	
	СтрокаОписания = Новый Структура;
	ЗначениеТНВЭД  = ИнтеграцияИСКлиентСервер.КодТНВЭДДляПередачиВИСМП(СтрокаТовары.КодТНВЭД, ВидПродукции);
	
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		СтрокаОписания.Вставить("tnved_code_4", ЗначениеТНВЭД);
	Иначе
		СтрокаОписания.Вставить("tnved_code_2", ЗначениеТНВЭД);
	КонецЕсли;
	
	ПараметрыОписанияОстатков = ИнтеграцияИСКлиентСервер.ИспользованиеПараметровОписанияОстатковПоВидуПродукции(
		ВидПродукции, ЗначениеТНВЭД);
	
	Если ПараметрыОписанияОстатков.ИспользоватьЦелевойПол Тогда
		СтрокаОписания.Вставить("product_gender", ИнтерфейсСУЗСлужебный.ЦелевойПол(СтрокаТовары.ЦелевойПол));
	КонецЕсли;
	
	Если ПараметрыОписанияОстатков.ИспользоватьВозрастнуюКатегорию Тогда
		СтрокаОписания.Вставить("consumer_age",
			ИнтерфейсСУЗСлужебный.ВозрастнаяКатегория(СтрокаТовары.ВозрастнаяКатегория));
	КонецЕсли;
	
	Если ПараметрыОписанияОстатков.ИспользоватьМодель Тогда
		СтрокаОписания.Вставить("model", СокрЛП(СтрокаТовары.Модель));
	КонецЕсли;
	
	Если ПараметрыОписанияОстатков.ИспользоватьТоварныйЗнак Тогда
		ТоварныйЗнак = СокрЛП(СтрокаТовары.ТоварныйЗнак);
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции)
			И Не ЗначениеЗаполнено(ТоварныйЗнак)Тогда
			ТоварныйЗнак = "Отсутствует";
		КонецЕсли;
		СтрокаОписания.Вставить("brand", ТоварныйЗнак);
	КонецЕсли;
	
	Если ПараметрыОписанияОстатков.ИспользоватьНаименование Тогда
		Если ЗначениеЗаполнено(СтрокаТовары.Наименование) Тогда
			СтрокаОписания.Вставить(
				"name", СтрокаТовары.Наименование);
		Иначе
			СтрокаОписания.Вставить(
				"name", ИнтеграцияИС.ПредставлениеНоменклатуры(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОписанияОстатков.ИспользоватьСпособВводаВОборот Тогда
		СтрокаОписания.Вставить("release_method",
			ИнтерфейсСУЗСлужебный.СпособВыпускаВОборот(СтрокаТовары.СпособВводаВОборот, "ОСТАТКИ"));
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

Функция НормализованноеСтроковоеЗначение(Знач ВходноеЗначение) Экспорт
	
	ВходноеЗначение = НРег(СокрЛП(ВходноеЗначение));
	
	Пока СтрНайти(ВходноеЗначение, "  ") > 0 Цикл
		ВходноеЗначение = СтрЗаменить(ВходноеЗначение, "  ", " ");
	КонецЦикла;
	
	Возврат ВходноеЗначение;
	
КонецФункции

#КонецОбласти

#Область XDTO

// Устанавливает значение свойства объекта XDTO.
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства = Неопределено, КешОшибок = Неопределено, Глубина = Неопределено) Экспорт
	
	//На текущий момент пользовательского макета расшифровки ошибок нет
	ДанныеДляРасшифровкиОшибок = ИнтеграцияИС.ДанныеДляРасшифровкиОшибок(,Глубина);
	ДанныеДляРасшифровкиОшибок.Таблица = ИнтеграцияИСМППовтИсп.ТаблицаПолейДанныйДляРасшифровкиОшибок();
	
	ИнтеграцияИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, КешОшибок, ДанныеДляРасшифровкиОшибок);
	
КонецПроцедуры

#КонецОбласти

Функция ПодготовитьОчередьЗагрузкиКодовМаркировкиПоЗаказуНаЭмиссию(ПараметрыЗапроса, ЭлементОчереди, ЗагружатьДо, ПараметрыОбмена, НастройкаОбменаСУЗ) Экспорт
	
	Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Идентификатор     = Строка(Новый УникальныйИдентификатор);
	СообщениеJSON.ЗагружатьДо       = ЗагружатьДо;
	
	СообщениеJSON.Организация       = ЭлементОчереди.Организация;
	СообщениеJSON.Документ          = ЭлементОчереди.Документ;
	СообщениеJSON.ДокументОснование = ЭлементОчереди.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПолученияДанных(
		Операция);
	
	СообщениеJSON.ТекстСообщенияJSON  = Неопределено;
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = Неопределено;
	СообщениеJSON.ТребуетсяПодписание = Ложь;
	СообщениеJSON.СообщениеОснование  = ЭлементОчереди.Сообщение;
	СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
	
	СообщениеJSON.ВидПродукции              = ЭлементОчереди.ВидПродукции;
	СообщениеJSON.Операция                  = Операция;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
	СообщениеJSON.ФорматОбмена              = НастройкаОбменаСУЗ.ФорматОбмена;
	СообщениеJSON.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
	
	СообщенияJSON = Новый Массив;
	СообщенияJSON.Добавить(СообщениеJSON);
	
	КоличествоДоВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	ПодготовитьСообщенияКПередаче(
		СообщенияJSON, ПараметрыОбмена,
		СтроковоеПредставлениеПустогоУникальногоИдентификатора());
	КоличествоПослеВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	
	Индекс = КоличествоДоВыполненияОперации;
	Если Индекс < КоличествоПослеВыполненияОперации Тогда
		Возврат ПараметрыОбмена.ОчередьСообщений[Индекс];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьКПередачеСообщениеНаЗакрытиеПодзаказаНаЭмиссиюКодовМаркировки(ЭлементОчередиОснование, Знач ЗагружатьДо, ПараметрыЗапроса, ПараметрыОбмена, НастройкаОбменаСУЗ) Экспорт
	
	ЗагружатьДо = Строка(ЗагружатьДо);
	Операция    = Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор);
	СообщениеJSON.ЗагружатьДо   = ЗагружатьДо;
	
	СообщениеJSON.Организация       = ЭлементОчередиОснование.Организация;
	СообщениеJSON.Документ          = ЭлементОчередиОснование.Документ;
	СообщениеJSON.ДокументОснование = ЭлементОчередиОснование.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПолученияДанных(
		Операция);
	
	СообщениеJSON.ТекстСообщенияJSON  = Неопределено;
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = Неопределено;
	СообщениеJSON.ТребуетсяПодписание = Ложь;
	СообщениеJSON.СообщениеОснование  = ЭлементОчередиОснование.Сообщение;
	СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
	
	СообщениеJSON.ВидПродукции              = ЭлементОчередиОснование.ВидПродукции;
	СообщениеJSON.Операция                  = Операция;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
	СообщениеJSON.ФорматОбмена              = НастройкаОбменаСУЗ.ФорматОбмена;
	СообщениеJSON.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
	
	СообщенияJSON = Новый Массив;
	СообщенияJSON.Добавить(СообщениеJSON);
	
	ДанныеПовторногоПолучения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ДанныеПовторногоПолучения");
	
	Если ДанныеПовторногоПолучения <> Неопределено Тогда
		
		ЗагружатьДо = СообщениеJSON.Идентификатор;
		Операция    = Перечисления.ВидыОперацийИСМП.ПовторноеПолучениеКодовМаркировкиИзСУЗ;
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор);
		СообщениеJSON.ЗагружатьДо   = ЗагружатьДо;
		
		СообщениеJSON.Организация       = ЭлементОчередиОснование.Организация;
		СообщениеJSON.Документ          = ЭлементОчередиОснование.Документ;
		СообщениеJSON.ДокументОснование = ЭлементОчередиОснование.ДокументОснование;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПолученияДанных(
			Операция);
		
		СообщениеJSON.ИдентификаторЗаявки = СтроковоеПредставлениеПустогоУникальногоИдентификатора();
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщениеJSON.СообщениеОснование  = ЭлементОчередиОснование.Сообщение;
		
		СообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
		
		СообщениеJSON.ВидПродукции              = ЭлементОчередиОснование.ВидПродукции;
		СообщениеJSON.Операция                  = Операция;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		СообщениеJSON.ФорматОбмена              = НастройкаОбменаСУЗ.ФорматОбмена;
		СообщениеJSON.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
		
		СообщенияJSON.Вставить(0, СообщениеJSON);
		
	КонецЕсли;
	
	КоличествоДоВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	ПодготовитьСообщенияКПередаче(
		СообщенияJSON, ПараметрыОбмена,
		СтроковоеПредставлениеПустогоУникальногоИдентификатора());
	КоличествоПослеВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	
	Индекс = КоличествоДоВыполненияОперации;
	Если Индекс < КоличествоПослеВыполненияОперации Тогда
		Возврат ПараметрыОбмена.ОчередьСообщений[Индекс];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗапроситьУстановитьКлючСессии(ТребуетсяЗапроситьУстановитьКлючСессии, ПодписанныеСообщенияПоОрганизациям,
	ПараметрыОбмена) Экспорт
	
	Если ТребуетсяЗапроситьУстановитьКлючСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкиУстановкиКлючаСессииПоОрганизациям = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из ТребуетсяЗапроситьУстановитьКлючСессии Цикл
		
		Организация                   = КлючИЗначение.Ключ;
		ДанныеДляУстановкиКлючаСессии = КлючИЗначение.Значение;
		
		МассивОшибок = Новый Массив;
		
		Для Каждого ЭлементДанных Из ДанныеДляУстановкиКлючаСессии Цикл
			
			РезультатЗапросаИУстановкиКлючаСессии = ИнтерфейсАвторизацииИСМПСлужебный.ЗапроситьУстановитьКлючСессии(
				ЭлементДанных.ПараметрыЗапроса,
				ЭлементДанных.ПараметрыАвторизации,
				ПодписьИзСвойствПодписи(ЭлементДанных.СвойстваПодписи));
			
			Если Не РезультатЗапросаИУстановкиКлючаСессии.КлючСессииУстановлен
				И ПодписанныеСообщенияПоОрганизациям <> Неопределено Тогда
				
				// Вывести сообщение об ошибке установке ключа сессии.
				// Дальнейший обмен по организации невозможен.
				Сообщения = ПодписанныеСообщенияПоОрганизациям[Организация];
				Для Каждого Сообщение Из Сообщения Цикл
					Сообщение.ТекстОшибки = РезультатЗапросаИУстановкиКлючаСессии.ТекстОшибки;
				КонецЦикла;
				
			ИначеЕсли ЗначениеЗаполнено(РезультатЗапросаИУстановкиКлючаСессии.ТекстОшибки) Тогда
				
				ЗаголовокОшибки = "";
				СтруктураТекстаОшибки = РазобратьТекстОшибки(РезультатЗапросаИУстановкиКлючаСессии.ТекстОшибки, ЗаголовокОшибки);
				Если СтруктураТекстаОшибки = Неопределено
					Или Не СтруктураТекстаОшибки.Свойство("error_message") Тогда
					ОписаниеОшибки = РезультатЗапросаИУстановкиКлючаСессии.ТекстОшибки;
				Иначе
					ОписаниеОшибки = СтруктураТекстаОшибки.error_message;
					ЗаписатьОшибкуВЖурналРегистрации(РезультатЗапросаИУстановкиКлючаСессии.ТекстОшибки);
				КонецЕсли;
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка авторизации в сервисе ИС МП:
					           |%1 по организации %2'"),
					ОписаниеОшибки, Организация);
				
				МассивОшибок.Добавить(ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивОшибок.Количество() > 0 Тогда
			ОшибкиУстановкиКлючаСессииПоОрганизациям.Вставить(Организация, СтрСоединить(МассивОшибок, Символы.ПС));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОшибкиУстановкиКлючаСессииПоОрганизациям.Количество() > 0 Тогда
		
		ОчередьСообщений = ПараметрыОбмена.ОчередьСообщений;
		Для Каждого Сообщение Из ОчередьСообщений Цикл
			
			ТекстОшибки = ОшибкиУстановкиКлючаСессииПоОрганизациям.Получить(Сообщение.Организация);
			Если ТекстОшибки <> Неопределено Тогда
				ПриОтменеТранзакции(Сообщение, ТекстОшибки, ПараметрыОбмена);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыСеансаИС() Экспорт
	
	ПараметрыСеансаИС = Новый Структура;
	ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииИСМП", Неопределено);
	ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииСУЗ",  Неопределено);
	ПараметрыСеансаИС.Вставить(
		"ПараметрыЛогированияЗапросовИСМП",
		ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов());
	
	УчитываемыеВидыМаркируемойПродукции = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если УчитываемыеВидыМаркируемойПродукции.Количество() > 0 Тогда
		Попытка
			ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииИСМП", ПараметрыСеанса.ДанныеКлючаСессииИСМП);
		Исключение
			// Действие не требуется
		КонецПопытки;
		Попытка
			ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииСУЗ", ПараметрыСеанса.ДанныеКлючаСессииСУЗ);
		Исключение
			// Действие не требуется
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПараметрыСеансаИС;
	
КонецФункции

Процедура ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС) Экспорт
	
	Если ПараметрыСеансаИС.ДанныеКлючаСессииИСМП <> Неопределено Тогда
		ПараметрыСеанса.ДанныеКлючаСессииИСМП = ПараметрыСеансаИС.ДанныеКлючаСессииИСМП;
	КонецЕсли;
	
	Если ПараметрыСеансаИС.ДанныеКлючаСессииСУЗ <> Неопределено Тогда
		ПараметрыСеанса.ДанныеКлючаСессииСУЗ = ПараметрыСеансаИС.ДанныеКлючаСессииСУЗ;
	КонецЕсли;
	
	ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыСеансаИС.ПараметрыЛогированияЗапросовИСМП);
	ЛогированиеЗапросовИСМП.НастроитьПараметрыЛогированияВФоновомЗадании();
	
КонецПроцедуры

Функция СтроковоеПредставлениеПустогоУникальногоИдентификатора() Экспорт
	Возврат "00000000-0000-0000-0000-000000000000";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыОбмена

Функция НоваяСтруктураАктивныхЗаказовПоСУЗ() Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДатаПоследнегоЗапросаПревышения", '00010101');
	СтруктураВозврата.Вставить("ТекущееКоличествоЗаказов",        0);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция МаксимальноеКоличествоЗаказовВОчередиСУЗ()
	Возврат 100;
КонецФункции

Функция ПериодичностьОтправкиЗаказовПослеПревышения()
	Возврат 60;
КонецФункции

#КонецОбласти

#Область МаркировкаОстатков

Процедура ЗаполнитьПоОписаниюОстатков(ПараметрыЗаполнения, ДанныеОписанияОстатков, СохранятьОписание = Ложь)
	
	КешОписанияОстатков = ПараметрыЗаполнения.КешОписанияОстатков;
	ВидПродукции        = ПараметрыЗаполнения.ВидПродукции;
	Организация         = ПараметрыЗаполнения.Организация;
	СтрокиПоиска        = ПараметрыЗаполнения.СтрокиПоиска;
	НайденныеКлючи      = Новый Массив;
		
	Для Каждого КлючИЗначениеИсточник Из СтрокиПоиска Цикл
		
		Для Каждого КлючИЗначение Из ДанныеОписанияОстатков Цикл
			
			Если КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИскомоеНаименование = КлючИЗначениеИсточник.Ключ;
			СтрокиТоваров       = КлючИЗначениеИсточник.Значение;
			GTIN                = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(КлючИЗначение.Ключ);
			ОписаниеПозиции     = КлючИЗначение.Значение;
			НаименованиеПолное  = ОписаниеПозиции.НаименованиеПолное;
			
			Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
				ЧастиНазвания = Новый Массив();
				ЧастиНазвания.Добавить(ОписаниеПозиции.НаименованиеПолное);
				Если ЗначениеЗаполнено(ОписаниеПозиции.ТорговаяМарка) Тогда
					ЧастиНазвания.Добавить(ОписаниеПозиции.ТорговаяМарка);
				Иначе
					ЧастиНазвания.Добавить("Отсутствует");
				КонецЕсли;
				НаименованиеПолное = СтрСоединить(ЧастиНазвания, ". ");
			КонецЕсли;
			
			Если НормализованноеСтроковоеЗначение(НаименованиеПолное) = НормализованноеСтроковоеЗначение(ИскомоеНаименование) Тогда
				
				НайденныеСтроки = Новый Массив;
				
				Для Каждого СтрокаТовары Из СтрокиТоваров Цикл
					
					Если Не СтрНачинаетсяС(СтрокаТовары.КодТНВЭД, ОписаниеПозиции.КодТНВЭД) Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТовары.GTIN = GTIN;
					НайденныеСтроки.Добавить(СтрокаТовары);
					
					Если СохранятьОписание И КешОписанияОстатков.Получить(GTIN) = Неопределено Тогда
						СтруктураОписания = Новый Структура();
						СтруктураОписания.Вставить("Представление",  ОписаниеПозиции.НаименованиеПолное);
						СтруктураОписания.Вставить("КодТНВЭД",       ОписаниеПозиции.КодТНВЭД);
						СтруктураОписания.Вставить("Организация",    Организация);
						СтруктураОписания.Вставить("ВидПродукции",   ВидПродукции);
						СтруктураОписания.Вставить("ДанныеОписания", СтрокаТовары);
						КешОписанияОстатков.Вставить(GTIN, СтруктураОписания);
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого УдаляемаяСтрока Из НайденныеСтроки Цикл
					СтрокиТоваров.Удалить(СтрокиТоваров.Найти(УдаляемаяСтрока));
				КонецЦикла;
				
				Если СтрокиТоваров.Количество() = 0 Тогда
					НайденныеКлючи.Добавить(ИскомоеНаименование);
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаКлюч Из НайденныеКлючи Цикл
		СтрокиПоиска.Удалить(СтрокаКлюч);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоЗапросСуществующихGTINНаОстатки(ЭлементОчереди, ПараметрыОбмена)
	
	Возврат (ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки
		И ЭлементОчереди.ИдентификаторЗаявки = СтроковоеПредставлениеПустогоУникальногоИдентификатора());
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому формируется сообщение.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив - Сообщения к передаче см. ИнтеграцияЕГАИС.СтруктураСообщенияXML().
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено)
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ДокументСсылка);
	ВозвращаемоеЗначение = МенеджерОбъекта.СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Подготавливает сообщения к передаче в ВЕТИС.
//
// Параметры:
//  Сообщения       - Массив - содержит структуру сообщений, которые подготавливаются к передаче
//    (см. ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML).
//  ПараметрыОбмена - Структура, Неопределено - см. функцию ПараметрыОбмена().
Процедура ПодготовитьПодписанныеСообщенияКПередаче(ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена)
	
	Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПодписанныеСообщенияПоОрганизациям Цикл
		
		СообщенияJSON = КлючИЗначение.Значение;
		
		ПодготовитьСообщенияКПередаче(СообщенияJSON, ПараметрыОбмена);
		
	КонецЦикла;
	
	ПодписанныеСообщенияПоОрганизациям = Неопределено;
	
КонецПроцедуры

// Подготавливает сообщения к передаче в ВЕТИС.
//
// Параметры:
//  Сообщения       - Массив - содержит структуру сообщений, которые подготавливаются к передаче
//    (см. ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML).
//  ПараметрыОбмена - Структура, Неопределено - см. функцию ПараметрыОбмена().
Процедура ПодготовитьСообщенияКПередаче(СообщенияXML, ПараметрыОбмена, ИдентификаторЗаявки = Неопределено)
	
	Если ТипЗнч(СообщенияXML) = Тип("Структура") Тогда
		КоллекцияСообщенийXML = Новый Массив;
		КоллекцияСообщенийXML.Добавить(СообщенияXML);
	Иначе
		КоллекцияСообщенийXML = СообщенияXML;
	КонецЕсли;
	
	Для Каждого Сообщение Из КоллекцияСообщенийXML Цикл
		
		Если ЗначениеЗаполнено(Сообщение.ИдентификаторЗаявки) Тогда
			ТекущийИдентификаторЗаявки = Сообщение.ИдентификаторЗаявки;
		Иначе
			ТекущийИдентификаторЗаявки = ИдентификаторЗаявки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сообщение.ТекстОшибки) Тогда
			
			РеквизитыОчереди = Новый Структура;
			// Назначение сообщений: ИСМП, МОТП или СУЗ
			РеквизитыОчереди.Вставить("ВидПродукции",                 Сообщение.ВидПродукции);
			РеквизитыОчереди.Вставить("Операция",                     Сообщение.Операция);
			РеквизитыОчереди.Вставить("Назначение",                   Сообщение.Назначение);
			РеквизитыОчереди.Вставить("СтанцияУправленияЗаказами",    Сообщение.СтанцияУправленияЗаказами);
			РеквизитыОчереди.Вставить("ПроизводственныйОбъект",       Сообщение.ПроизводственныйОбъект);
			
			// Источник
			РеквизитыОчереди.Вставить("Организация",                  Сообщение.Организация);
			РеквизитыОчереди.Вставить("Документ",                     Сообщение.Документ);
			РеквизитыОчереди.Вставить("ДокументОснование",            Сообщение.ДокументОснование);
			
			// Описание, протокол и очередь
			РеквизитыОчереди.Вставить("РеквизитыИсходящегоСообщения", Сообщение);
			РеквизитыОчереди.Вставить("ПротоколОбмена",               Неопределено);
			РеквизитыОчереди.Вставить("ЗагружатьПосле",               Сообщение.ЗагружатьПосле);
			РеквизитыОчереди.Вставить("ЗагружатьДо",                  Сообщение.ЗагружатьДо);
			РеквизитыОчереди.Вставить("ИдентификаторЗаявки",          ТекущийИдентификаторЗаявки);
			РеквизитыОчереди.Вставить("СообщениеОснование",           Сообщение.СообщениеОснование);
			
			Попытка
				
				Результат = ПодготовитьСообщениеКПередаче(
					Сообщение,
					РеквизитыОчереди);
				
				ТекстОшибки            = Результат.ТекстОшибки;
				ПодготовленоКПередаче  = Не ЗначениеЗаполнено(ТекстОшибки);
				ИсходящееСообщение     = Результат.ИсходящееСообщение;
				
			Исключение
				
				ТекстОшибки            = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПодготовленоКПередаче  = Ложь;
				ИсходящееСообщение     = Неопределено;
				
			КонецПопытки;
			
		Иначе
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение ""%1"" не подготовлено к отправке в ИС МП:
				           |%2'"),
				Сообщение.Описание,
				Сообщение.ТекстОшибки);
			ПодготовленоКПередаче = Ложь;
			ИсходящееСообщение    = Неопределено;
			
		КонецЕсли;
		
		Если ПодготовленоКПередаче Тогда
			
			ЭлементОчереди = ПараметрыОбмена.ОчередьСообщений.Добавить();
			
			ЭлементОчереди.ДатаСоздания       = ТекущаяУниверсальнаяДата();
			ЭлементОчереди.Сообщение          = ИсходящееСообщение;
			ЭлементОчереди.СообщениеОснование = Сообщение.СообщениеОснование;
			
			ЭлементОчереди.Организация       = Сообщение.Организация;
			ЭлементОчереди.Документ          = Сообщение.Документ;
			ЭлементОчереди.ДокументОснование = Сообщение.ДокументОснование;
			
			ЭлементОчереди.ВидПродукции              = Сообщение.ВидПродукции;
			ЭлементОчереди.Операция                  = Сообщение.Операция;
			ЭлементОчереди.Назначение                = Сообщение.Назначение;
			ЭлементОчереди.СтанцияУправленияЗаказами = Сообщение.СтанцияУправленияЗаказами;
			ЭлементОчереди.ПроизводственныйОбъект    = Сообщение.ПроизводственныйОбъект;
			
			ЭлементОчереди.РеквизитыИсходящегоСообщения = Сообщение;
			ЭлементОчереди.ПротоколОбмена               = Неопределено;
			ЭлементОчереди.ИдентификаторЗаявки          = ТекущийИдентификаторЗаявки;
			
			Если ЗначениеЗаполнено(Сообщение.ЗагружатьПосле) Тогда
				НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
				НоваяЗависимость.Сообщение1     = ИсходящееСообщение;
				НоваяЗависимость.Сообщение2     = Сообщение.ЗагружатьПосле;
				НоваяЗависимость.Загрузка       = Ложь;
				НоваяЗависимость.Передача       = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Сообщение.ЗагружатьДо) Тогда
				НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
				НоваяЗависимость.Сообщение1     = Сообщение.ЗагружатьДо;
				НоваяЗависимость.Сообщение2     = ИсходящееСообщение;
				НоваяЗависимость.Загрузка       = Ложь;
				НоваяЗависимость.Передача       = Ложь;
			КонецЕсли;
			
		Иначе
			
			СтрокаРезультата = СтруктураИзменения();
			
			СтрокаРезультата.Операция                  = Сообщение.Операция;
			СтрокаРезультата.Назначение                = Сообщение.Назначение;
			СтрокаРезультата.СтанцияУправленияЗаказами = Сообщение.СтанцияУправленияЗаказами;
			
			СтрокаРезультата.Организация           = Сообщение.Организация;
			СтрокаРезультата.Объект                = Сообщение.Документ;
			СтрокаРезультата.ДокументОснование     = Сообщение.ДокументОснование;
			
			СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Ложь;
			СтрокаРезультата.Передано              = Ложь;
			СтрокаРезультата.Принято               = Ложь;
			СтрокаРезультата.НовыйСтатус           = Неопределено;
			СтрокаРезультата.ОбъектИзменен         = Ложь;
			
			СтрокаРезультата.Сообщение                    = Сообщение.Идентификатор;
			СтрокаРезультата.ТекстСообщения               = "";
			СтрокаРезультата.ПредставлениеПротоколаОбмена = "";
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена)
	
	НачатьТранзакцию();
	
	Попытка
		
		ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
			ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчередиОснование;
		КонецЕсли;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
			НаборЗаписейОснование = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
			НаборЗаписейОснование.Отбор.Сообщение.Установить(ЭлементОчередиОснование);
			НаборЗаписейОснование.Прочитать();
		КонецЕсли;
		
		Если НаборЗаписей.Выбран() Тогда
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗначениеЗаполнено(ЗаписьНабора.ИдентификаторЗаявки) Тогда
					
					ОтменитьТранзакцию();
					
					// Сообщение уже передано в ГИС МТ, но еще не обработано.
					ЭлементОчереди.ИдентификаторЗаявки = ЗаписьНабора.ИдентификаторЗаявки;
					Возврат;
					
				КонецЕсли;
			КонецЦикла;
			
			Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
				
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Агрегация Тогда
					ПодготовитьСообщенияПоАбстрактнойАгрегации(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
				ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТК Тогда
					ПодготовитьСообщенияПоАбстрактнойОперацииАТК(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
				ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
					ПодготовитьСообщенияПоАбстрактнойОперацииВводВОборотИмпортСФТС(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
				ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Приемка 
					Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонить Тогда
					ПодготовитьСообщенияПоАбстрактнойОперацииПриемкаИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
				ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулировать Тогда
					ПодготовитьСообщенияПоАбстрактнойОперацииОтгрузкаИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
				Иначе
					ПередатьСообщениеИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование);
				КонецЕсли;
			
			ИначеЕсли ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
				
				РезультатПолученияНастройки = НастройкаОбменаСУЗ(
					ПараметрыОбмена,
					ЭлементОчереди,
					Истина);
				
				Если Не РезультатПолученияНастройки.Успешно Тогда
					Если РезультатПолученияНастройки.ТребуетсяОбновлениеКлючаСессии Тогда
						Возврат;
					Иначе
						ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
					КонецЕсли;
				КонецЕсли;
				
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
					ПередатьЗаказНаЭмиссиюКодовМаркировкиСУЗ(
						ЭлементОчереди,
						ПараметрыОбмена,
						НаборЗаписей,
						РезультатПолученияНастройки.НастройкаОбмена,
						НаборЗаписейОснование);
				Иначе
					ПередатьОтчетСУЗ(
						ЭлементОчереди,
						ПараметрыОбмена,
						НаборЗаписей,
						РезультатПолученияНастройки.НастройкаОбмена,
						НаборЗаписейОснование);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Иначе
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			Возврат;
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При передаче сообщения по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Проверяет статус агрегата, полученный по данным ИС МП, в строках дерева.
// Если агрегат не сформирован, его статус Неопределен.
// 
// Параметры:
//  СтрокаДереваВерхнегоУровня - СтрокаДереваЗначений - Строка дерева значений.
//  
// Возвращаемое значение:
//  Булево - Истина, если найдены сформированные по данным ИС МП агрегаты.
//
Функция НайтиСформированныеАгрегатыПоДаннымИСМП(СтрокаДереваВерхнегоУровня)
	
	СформированныеАгрегатыНайдены = Ложь;
	
	Если СтрокаДереваВерхнегоУровня.Строки.Количество() = 0 Тогда
		Возврат СформированныеАгрегатыНайдены;
	КонецЕсли;
	
	Если СтрокаДереваВерхнегоУровня.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
		СформированныеАгрегатыНайдены = Истина;
	Иначе
		Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
			СформированныеАгрегатыНайдены = НайтиСформированныеАгрегатыПоДаннымИСМП(СтрокаДерева);
			Если СформированныеАгрегатыНайдены Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СформированныеАгрегатыНайдены;
	
КонецФункции

// Формирует и заполняет сообщения для операции "трансформация агрегатов" (с видом удаление) и "расформирование АТК" 
// по таблице маркированных товаров.
// 
// Параметры:
//  МаркированныеТовары - См. ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу.
//  ОбщийЭлементОчереди - СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений).
//  ЗагружатьДо - Строка - Идентификатор сообщения.
//  СообщенияJSONТрансформация - Соответствие - соответствие сообщений для отправки, которое нужно заполнить 
//                                              сформированными сообщениями.
//   * Ключ - Структура - см. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON().
//   * Значение - Строка - Идентификатор сообщения.
//  ПараметрыОбмена - См. ИнтеграцияИСМП.ПараметрыОбмена.
//  ПараметрыОбработки - Структура:
//   * ОбрабатыватьКодыАТК - Булево - Истина, если требуется подготовить сообщения для расформирования АТК.
//
Процедура ПодготовитьКПередачеСообщенияДляТрансформацииАгрегатовИСМП(МаркированныеТовары, ОбщийЭлементОчереди,
	Знач ЗагружатьДо, СообщенияJSONТрансформация, ПараметрыОбмена, ПараметрыОбработки) Экспорт
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;

	АТКДляРасформирования    = Новый Соответствие;
	УпаковкиДляТрансформации = Новый Соответствие;
	
	КешДанныхРазбора = Новый Соответствие;
	Для Каждого СтрокаМаркированногоТовара Из МаркированныеТовары Цикл
		Если ЗначениеЗаполнено(СтрокаМаркированногоТовара.РодительскаяУпаковка) Тогда
			
			НормализованныйКодУпаковки = Неопределено;
			НормализованныйКодУпаковки = КешДанныхРазбора[СтрокаМаркированногоТовара.РодительскаяУпаковка];
			
			Если НормализованныйКодУпаковки = Неопределено Тогда
				РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
					СтрокаМаркированногоТовара.РодительскаяУпаковка, ОбщийЭлементОчереди.ВидПродукции, Ложь);
				НормализованныйКодУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					РезультатРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
				КешДанныхРазбора[СтрокаМаркированногоТовара.РодительскаяУпаковка] = НормализованныйКодУпаковки;
			КонецЕсли;
			
			Если РезультатРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.АгрегированныйТаможенныйКод Тогда
				Если ПараметрыОбработки.ОбрабатыватьКодыАТК Тогда
					АТКДляРасформирования.Вставить(НормализованныйКодУпаковки);
				КонецЕсли;
			Иначе
				ВложенныеКодыМаркировки = УпаковкиДляТрансформации.Получить(НормализованныйКодУпаковки);
				Если ВложенныеКодыМаркировки = Неопределено Тогда
					ВложенныеКодыМаркировки = Новый Массив;
				КонецЕсли;
				
				РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
					СтрокаМаркированногоТовара.Штрихкод, ОбщийЭлементОчереди.ВидПродукции, Ложь);
				НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					РезультатРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
				
				ВложенныеКодыМаркировки.Добавить(НормализованныйКодМаркировки);
				УпаковкиДляТрансформации[НормализованныйКодУпаковки] = ВложенныеКодыМаркировки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если АТКДляРасформирования.Количество() Тогда
		products_list_atk = Новый Массив;
		Для Каждого КлючИЗначение Из АТКДляРасформирования Цикл
			products_list_atk.Добавить(Новый Структура("atk", КлючИЗначение.Ключ));
		КонецЦикла;
		
		ТелоЗапросаРазагрегация = Новый Структура;
		ТелоЗапросаРазагрегация.Вставить("trade_participant_inn", ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаРазагрегация.Вставить("products_list",         products_list_atk);
		
		Операция = Перечисления.ВидыОперацийИСМП.АТКУдаление;
		СообщениеJSON = ЗаполнитьСообщениеJSONКПередаче(ТелоЗапросаРазагрегация, Операция, ОбщийЭлементОчереди);
		СообщениеJSON.ЗагружатьДо = ЗагружатьДо;
		СообщенияJSONТрансформация.Вставить(СообщениеJSON);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из УпаковкиДляТрансформации Цикл
		
		Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение;
		КодУпаковки = КлючИЗначение.Ключ;
		
		ТелоЗапросаУдаление = Новый Структура;
		
		ТелоЗапросаУдаление.Вставить("participantId",      ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаУдаление.Вставить("participant_inn",    ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаУдаление.Вставить("reaggregation_type", "REMOVING");
		ТелоЗапросаУдаление.Вставить("uitu",               КодУпаковки);
		ТелоЗапросаУдаление.Вставить("uit_uitu_list",      Новый Массив);
	
		Для Каждого КодМаркировки Из КлючИЗначение.Значение Цикл
			reaggregationUnit = Новый Структура;
			reaggregationUnit.Вставить("uit_uitu", КодМаркировки);
			ТелоЗапросаУдаление.uit_uitu_list.Добавить(reaggregationUnit);
		КонецЦикла;
		
		СообщениеJSON = ЗаполнитьСообщениеJSONКПередаче(ТелоЗапросаУдаление, Операция, ОбщийЭлементОчереди);
		
		СообщениеJSON.ЗагружатьДо   = ЗагружатьДо;
		СообщениеJSON.Описание = СтрШаблон("%1 %2 (изменение)", ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(Операция), КодУпаковки);
		
		СообщенияJSONТрансформация.Вставить(СообщениеJSON, СообщениеJSON.Идентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует и заполняет массив сообщений для формирования АТК по документу Маркировка товаров ИС МП.
// 
// Параметры:
//  ТаблицаКодовМаркировки - ТаблицаЗначений:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - штрихкод упаковки.
//   * Штрихкод - Строка - значение штрихкода
//  ДанныеШапки - См ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента.
//  ОбщийЭлементОчереди - СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений).
//  ЗагружатьДо - Строка - Идентификатор сообщения.
//  СообщенияJSON - Массив - массив сообщений для отправки (см. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON())
//  ПараметрыОбмена - См. ИнтеграцияИСМП.ПараметрыОбмена.
//
Процедура ПодготовитьКПередачеСообщенияДляФормированияКодовАТКИСМП(ТаблицаКодовМаркировки, ДанныеШапки,
	ОбщийЭлементОчереди, Знач ЗагружатьДо, СообщенияJSON, ПараметрыОбмена) Экспорт
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ТаблицаКодовМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ТаблицаКодовМаркировки.Штрихкод         КАК Штрихкод,
	|	ТаблицаКодовМаркировки.Номенклатура     КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаКодовМаркировки
	|ИЗ
	|	&ТаблицаКодовМаркировки КАК ТаблицаКодовМаркировки
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.КодТНВЭД КАК КодТНВЭД,
	|	Товары.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО 
	|	Товары.Номенклатура,
	|	Товары.КодТНВЭД,
	|	Товары.СтавкаНДС
	|");
	
	ТекстЗапросаТовары = Новый Массив;
	ТекстЗапросаТовары.Добавить(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.КодТНВЭД КАК КодТНВЭД,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаКодовМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ТаблицаКодовМаркировки.Штрихкод КАК Штрихкод
	|ИЗ
	|	ТаблицаТовары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКодовМаркировки КАК ТаблицаКодовМаркировки
	|	ПО Товары.Номенклатура = ТаблицаКодовМаркировки.Номенклатура");

	ТекстЗапросаТовары.Добавить("ИТОГИ ПО");
	
	ВариантФормированияАТКИСМП = ДанныеШапки.ВариантФормированияАТКИСМП;
	Если ВариантФормированияАТКИСМП = Перечисления.ВариантыФормированияАТКИСМП.КодТНВЭД Тогда
		ПолеИтогов = "КодТНВЭД";
	ИначеЕсли ВариантФормированияАТКИСМП = Перечисления.ВариантыФормированияАТКИСМП.КодТНВЭДНДС Тогда
		ПолеИтогов = "КодТНВЭД, СтавкаНДС";
	ИначеЕсли ВариантФормированияАТКИСМП = Перечисления.ВариантыФормированияАТКИСМП.Номенклатура Тогда
		ПолеИтогов = "Номенклатура";
	КонецЕсли;
	ТекстЗапросаТовары.Добавить(ПолеИтогов);
	СписокЗапросов.Добавить(
		СтрСоединить(ТекстЗапросаТовары, Символы.ПС),
		"ШтрихкодыКФормированию");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                 ОбщийЭлементОчереди.Документ);
	Запрос.УстановитьПараметр("ТаблицаКодовМаркировки", ТаблицаКодовМаркировки);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	ШтрихкодыКФормированию = РезультатЗапроса["ШтрихкодыКФормированию"];
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ДанныеШапки.Организация);
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;

	ДеревоУпаковок = ШтрихкодыКФормированию.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		ЗаполнитьСообщенияJSONФормированиеАТК(
			СтрокаДерева,
			СообщенияJSON,
			ОбщийЭлементОчереди,
			ЗагружатьДо,
			ПараметрыНормализацииПрочее,
			РеквизитыОрганизации);
	КонецЦикла;
	
КонецПроцедуры

// Формирует и заполняет массив сообщений для отправки для вида операции "Формирование АТК".
// 
// Параметры:
//  СтрокаДереваВерхнегоУровня - СтрокаДереваЗначений - Строка дерева значений.
//  СообщенияJSON - Массив - массив сообщений для заполнения (см. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON)
//  ОбщийЭлементОчереди - СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений).
//  ЗагружатьДо - Строка - Идентификатор сообщения.
//  ПараметрыНормализацииПрочее - См. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки.
//  РеквизитыОрганизации - См. ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту.
//
Процедура ЗаполнитьСообщенияJSONФормированиеАТК(СтрокаДереваВерхнегоУровня, СообщенияJSON, ОбщийЭлементОчереди, ЗагружатьДо,
	ПараметрыНормализацииПрочее, РеквизитыОрганизации)
	
	Если СтрокаДереваВерхнегоУровня.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание;
	СообщениеJSON = Неопределено;
	products_list = Новый Массив;
	Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.Штрихкод) Тогда
			РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
				СтрокаДерева.Штрихкод, ОбщийЭлементОчереди.ВидПродукции);
			СтрокаТЧ = Новый Структура;
			СтрокаТЧ.Вставить(
				"ki",
				РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					РезультатРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее));
			products_list.Добавить(СтрокаТЧ);
		Иначе
			ЗаполнитьСообщенияJSONФормированиеАТК(СтрокаДерева, СообщенияJSON, ОбщийЭлементОчереди, ЗагружатьДо, ПараметрыНормализацииПрочее, РеквизитыОрганизации);
		КонецЕсли;
		
	КонецЦикла;
	
	Если products_list.Количество() Тогда
		
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("trade_participant_inn", РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("products_list",         products_list);
		СообщениеJSON = ЗаполнитьСообщениеJSONКПередаче(ТелоЗапроса, Операция, ОбщийЭлементОчереди);
		СообщениеJSON.ЗагружатьДо = ЗагружатьДо;
		СообщенияJSON.Добавить(СообщениеJSON);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает структуру сообщения для отправки и заполняет основные значения по общему элементу очереди.
// 
// Параметры:
//  ТелоЗапроса - Структура - Структура данных для создания сообщения.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП -  операция обмена.
//  ОбщийЭлементОчереди - СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений).
//  
// Возвращаемое значение:
//  Структура - см. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON.
//
Функция ЗаполнитьСообщениеJSONКПередаче(ТелоЗапроса, Операция, ОбщийЭлементОчереди)
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
	
	СообщениеJSON.Организация       = ОбщийЭлементОчереди.Организация;
	СообщениеJSON.Документ          = ОбщийЭлементОчереди.Документ;
	СообщениеJSON.ДокументОснование = ОбщийЭлементОчереди.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(Операция, ОбщийЭлементОчереди.Документ);
	
	СообщениеJSON.ТекстСообщенияJSON  = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = Неопределено;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	СообщениеJSON.СообщениеОснование  = ОбщийЭлементОчереди.Сообщение;
	СообщениеJSON.ПараметрыЗапроса    = Неопределено;
	
	СообщениеJSON.ВидПродукции = ОбщийЭлементОчереди.ВидПродукции;
	СообщениеJSON.Операция     = Операция;
	СообщениеJSON.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	
	Возврат СообщениеJSON;
	
КонецФункции

// Создает и заполняет структуру абстрактного сообщения очереди.
// 
// Параметры:
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП -  операция обмена.
//  ОбщийЭлементОчереди - СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений).
//  
// Возвращаемое значение:
//  Структура - см. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON.
//
Функция ЗаполнитьСообщениеJSONАбстрактнаяОперация(Операция, ОбщийЭлементОчереди)
	
	АбстрактноеСообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	
	АбстрактноеСообщениеJSON.Организация       = ОбщийЭлементОчереди.Организация;
	АбстрактноеСообщениеJSON.Документ          = ОбщийЭлементОчереди.Документ;
	АбстрактноеСообщениеJSON.ДокументОснование = ОбщийЭлементОчереди.ДокументОснование;
	АбстрактноеСообщениеJSON.Идентификатор     = Строка(Новый УникальныйИдентификатор());
	АбстрактноеСообщениеJSON.ЗагружатьДо       = ОбщийЭлементОчереди.Сообщение;
	
	АбстрактноеСообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(Операция, ОбщийЭлементОчереди.Документ);
	
	АбстрактноеСообщениеJSON.ИдентификаторЗаявки = СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	АбстрактноеСообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	АбстрактноеСообщениеJSON.Версия              = Неопределено;
	АбстрактноеСообщениеJSON.ТребуетсяПодписание = Ложь;
	АбстрактноеСообщениеJSON.ПараметрыЗапроса    = Неопределено;
	АбстрактноеСообщениеJSON.СообщениеОснование  = ОбщийЭлементОчереди.Сообщение;
	
	АбстрактноеСообщениеJSON.ВидПродукции              = ОбщийЭлементОчереди.ВидПродукции;
	АбстрактноеСообщениеJSON.Операция                  = Операция;
	АбстрактноеСообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	
	Возврат АбстрактноеСообщениеJSON;
	
КонецФункции

// Формирование сообщения по абстрактной операции по расчету статусов агрегации при подготовке очереди сообщений для создания агрегатов или АТК
// и заполнение реквизитов "ЗагружатьДо, ЗагружатьПосле" в подготовленных сообщениях для отправки.
// Последовательность отправки сообщений должна быть: 
// 0. Трансформация (удаление) агрегатов.
// 1. Разагрегация агрегатов и АТК.
// 2. Формирование новых агрегатов или трансформация (добавление).
// 
// Параметры:
//  СообщенияJSON - Массив - массив сообщений для заполнения (см. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON).
//  ОбщийЭлементОчереди -  СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений).
//  СообщенияJSONПриоритет1 - Соответствие - соответствие сообщений, которые должны быть обработаны 
//                                           до отправки основного пула сообщений.
//  СообщенияJSONПриоритет0 - Соответствие - соответствие сообщений, которые должны быть обработаны 
//                                           до отправки пула сообщений из СообщенияJSONПриоритет1.
Процедура ПодготовитьКПередачеСообщениеАбстарктнаяАгрегацияИзменениеРасчетСтатуса(СообщенияJSON, ОбщийЭлементОчереди, 
	СообщенияJSONПриоритет1, СообщенияJSONПриоритет0= Неопределено)
	
	ПодготовленыСообщенияПриоритет1 = Ложь;
	Если СообщенияJSONПриоритет1.Количество() Тогда
		
		// Отправлять последовательность сообщений для разагрегации агрегатов и АТК до агрегации.
		Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса;
		АбстрактноеСообщениеJSON = ЗаполнитьСообщениеJSONАбстрактнаяОперация(Операция, ОбщийЭлементОчереди);
		
		Для Каждого СообщениеJSON Из СообщенияJSON Цикл
			СообщениеJSON.ЗагружатьПосле = АбстрактноеСообщениеJSON.Идентификатор;
		КонецЦикла;
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		Для Каждого КлючИЗначение Из СообщенияJSONПриоритет1 Цикл
			КлючИЗначение.Ключ.ЗагружатьДо = АбстрактноеСообщениеJSON.Идентификатор;
			СообщенияJSON.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		ПодготовленыСообщенияПриоритет1 = Истина;
		
	КонецЕсли;
	
	Если СообщенияJSONПриоритет0 <> Неопределено И СообщенияJSONПриоритет0.Количество() Тогда
		
		// Операции трансформации агрегатов должны выполняться до разагрегации.
		Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса;
		АбстрактноеСообщениеJSON = ЗаполнитьСообщениеJSONАбстрактнаяОперация(Операция, ОбщийЭлементОчереди);
		
		Если ПодготовленыСообщенияПриоритет1 Тогда
			Для Каждого КлючИЗначение Из СообщенияJSONПриоритет1 Цикл
				КлючИЗначение.Ключ.ЗагружатьПосле = АбстрактноеСообщениеJSON.Идентификатор;
			КонецЦикла;
		Иначе
			Для Каждого СообщениеJSON Из СообщенияJSON Цикл
				СообщениеJSON.ЗагружатьПосле = АбстрактноеСообщениеJSON.Идентификатор;
			КонецЦикла;
		КонецЕсли;
	
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		Для Каждого КлючИЗначение Из СообщенияJSONПриоритет0 Цикл
			КлючИЗначение.Ключ.ЗагружатьДо = АбстрактноеСообщениеJSON.Идентификатор;
			СообщенияJSON.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Формирует и заполняет массив сообщений для расформирования агрегатов и АТК по документу Маркировка товаров ИС МП.
// 
// Параметры:
//  МаркированныеТовары См. ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу.
//  ОбщийЭлементОчереди -  СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений).
//  ЗагружатьДо - Строка - Идентификатор сообщения.
//  ПараметрыОбмена - См. ИнтеграцияИСМП.ПараметрыОбмена.
//  УпаковкиДокумента - Соответствие - соотвествие упаковок обрабатываемого документа:
//   * Ключ - Строка - нормализованный код упаковки.
//   * Значение - Строка - код родительской упаковки.
//  СообщенияJSONОперацияУдаление - Соответствие - соответствие сообщений для отправки, которое нужно заполнить 
//                                                 сформированными сообщениями.
//
Процедура ПодготовитьКПередачеСообщенияДляРазагрегацииКодовМаркировкиИСМП(
	МаркированныеТовары, ОбщийЭлементОчереди, Знач ЗагружатьДо,
	ПараметрыОбмена, УпаковкиДокумента, СообщенияJSONОперацияУдаление) Экспорт
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	products_list = Новый Массив;
	products_list_atk = Новый Массив;
	
	ПараметрыОбработкиУпаковок = Новый Структура;
	ПараметрыОбработкиУпаковок.Вставить("КешОбработаннныхУпаковок", Новый Соответствие);
	ПараметрыОбработкиУпаковок.Вставить("КешУпаковокКРазагрегации", Новый Соответствие);
	ПараметрыОбработкиУпаковок.Вставить("КешУпаковокВиртуальнаяРазагрегация", Новый Соответствие);
	
	Для Каждого СтрокаМаркированногоТовара из МаркированныеТовары Цикл
		
		УпаковкаКРазагрегацииНайдена = Ложь;
		Если ЗначениеЗаполнено(СтрокаМаркированногоТовара.РодительскаяУпаковка) Тогда
			КодУпаковки = СтрокаМаркированногоТовара.РодительскаяУпаковка;
			
			Если ПараметрыОбработкиУпаковок.КешОбработаннныхУпаковок[КодУпаковки] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыОбработкиУпаковок.КешОбработаннныхУпаковок[КодУпаковки] = Истина;
			
			Если УпаковкиДокумента[КодУпаковки] = Неопределено Тогда
				
				РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
					СтрокаМаркированногоТовара.РодительскаяУпаковка, ОбщийЭлементОчереди.ВидПродукции, Ложь);
				НормализованныйКодУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					РезультатРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
				
				ПараметрыОбработкиУпаковок.КешОбработаннныхУпаковок[НормализованныйКодУпаковки] = Истина;
				
				Если УпаковкиДокумента[НормализованныйКодУпаковки] = Неопределено Тогда
					УпаковкаКРазагрегацииНайдена = Истина;
					Если РезультатРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.АгрегированныйТаможенныйКод Тогда
						// Согласно документации в АТК указываются только номера КИ.
						products_list_atk.Добавить(Новый Структура("atk", НормализованныйКодУпаковки));
						Продолжить;
					Иначе
						ПараметрыОбработкиУпаковок.КешУпаковокКРазагрегации.Вставить(НормализованныйКодУпаковки, "uitu");
					КонецЕсли;
					
				Иначе
					УпаковкиДокумента[НормализованныйКодУпаковки] = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаМаркированногоТовара.СтрокаДерева <> Неопределено
				И СтрокаМаркированногоТовара.СтрокаДерева.Родитель <> Неопределено
				И ЗначениеЗаполнено(СтрокаМаркированногоТовара.СтрокаДерева.Родитель.РодительскаяУпаковка) Тогда
				
				РодительскаяУпаковка = СтрокаМаркированногоТовара.СтрокаДерева.Родитель.РодительскаяУпаковка;
				
				ОбработатьУпаковкиВерхнегоУровня(
					РодительскаяУпаковка,
					УпаковкиДокумента,
					ПараметрыОбработкиУпаковок,
					УпаковкаКРазагрегацииНайдена,
					ОбщийЭлементОчереди,
					ПараметрыНормализацииПрочее,
					ПараметрыОбмена);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из УпаковкиДокумента Цикл
		Если ПараметрыОбработкиУпаковок.КешОбработаннныхУпаковок[КлючИЗначение.Ключ] = Неопределено Тогда
			ОбработатьУпаковкиВерхнегоУровня(
				КлючИЗначение.Значение,
				УпаковкиДокумента,
				ПараметрыОбработкиУпаковок,
				УпаковкаКРазагрегацииНайдена,
				ОбщийЭлементОчереди,
				ПараметрыНормализацииПрочее,
				ПараметрыОбмена);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ПараметрыОбработкиУпаковок.КешУпаковокКРазагрегации Цикл
		products_list.Добавить(Новый Структура(КлючИЗначение.Значение, КлючИЗначение.Ключ));
	КонецЦикла;
	
	Если products_list.Количество() Тогда
		ТелоЗапросаРазагрегация = Новый Структура;
		ТелоЗапросаРазагрегация.Вставить("participant_inn", ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаРазагрегация.Вставить("products_list",   products_list);
		
		Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление;
		СообщениеJSON = ЗаполнитьСообщениеJSONКПередаче(ТелоЗапросаРазагрегация, Операция, ОбщийЭлементОчереди);
		СообщениеJSON.ЗагружатьДо = ЗагружатьДо;
		СообщенияJSONОперацияУдаление.Вставить(СообщениеJSON, СообщениеJSON.Идентификатор);
		
	КонецЕсли;
	
	Если products_list_atk.Количество() Тогда
		ТелоЗапросаРазагрегация = Новый Структура;
		ТелоЗапросаРазагрегация.Вставить("trade_participant_inn", ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаРазагрегация.Вставить("products_list",         products_list_atk);
		
		Операция = Перечисления.ВидыОперацийИСМП.АТКУдаление;
		СообщениеJSON = ЗаполнитьСообщениеJSONКПередаче(ТелоЗапросаРазагрегация, Операция, ОбщийЭлементОчереди);
		СообщениеJSON.ЗагружатьДо = ЗагружатьДо;
		СообщенияJSONОперацияУдаление.Вставить(СообщениеJSON, СообщениеJSON.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает иерархию родительских упаковок и заполняет соотвествие упаковок к разагрегации.
// Параметры:
//  РодительскаяУпаковка - Строка - значение кода родительской упаковки
//  УпаковкиДокумента - Соответствие - соотвествие упаковок обрабатываемого документа:
//   * Ключ - Строка - нормализованный код упаковки.
//   * Значение - Строка - код родительской упаковки.
//  ПараметрыОбработкиУпаковок - Структура:
//   * КешОбработаннныхУпаковок- Соответствие - кеш упаковок обработанных.
//   * КешУпаковокКРазагрегации - Соответствие - кеш упаковок для разагрегации.
//   * КешУпаковокВиртуальнаяРазагрегация - Соответствие - кеш упаковок, которые будут разагргегированы по данным сервиса.
//  ОбщийЭлементОчереди - СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений).
//  ПараметрыНормализацииПрочее - См. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки.
//  ПараметрыОбмена - См. ИнтеграцияИСМП.ПараметрыОбмена. 
// 
Процедура ОбработатьУпаковкиВерхнегоУровня(Знач РодительскаяУпаковка, УпаковкиДокумента, 
	ПараметрыОбработкиУпаковок, УпаковкаКРазагрегацииНайдена,
	ОбщийЭлементОчереди, ПараметрыНормализацииПрочее, ПараметрыОбмена)
	
	Пока ЗначениеЗаполнено(РодительскаяУпаковка) Цикл
		РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
			РодительскаяУпаковка, ОбщийЭлементОчереди.ВидПродукции, Ложь);
		НормализованныйКодУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			РезультатРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
		
		// Контроль иерархии упаковок, добавленных к разагрегации. Отправлять упаковку нижнего уровня, родительские упаковки будут расформированы автоматически.
		Если УпаковкиДокумента[НормализованныйКодУпаковки] = Неопределено 
			И УпаковкиДокумента[РодительскаяУпаковка] = Неопределено Тогда
			Если УпаковкаКРазагрегацииНайдена Тогда
				ПараметрыОбработкиУпаковок.КешУпаковокВиртуальнаяРазагрегация.Вставить(НормализованныйКодУпаковки);
				Если ПараметрыОбработкиУпаковок.КешУпаковокКРазагрегации.Получить(НормализованныйКодУпаковки) <> Неопределено Тогда
					ПараметрыОбработкиУпаковок.КешУпаковокКРазагрегации.Удалить(НормализованныйКодУпаковки);
					Прервать;
				КонецЕсли;
			Иначе
				ПараметрыОбработкиУпаковок.КешУпаковокКРазагрегации.Вставить(НормализованныйКодУпаковки, "uitu");
				УпаковкаКРазагрегацииНайдена = Истина;
			КонецЕсли;
		ИначеЕсли УпаковкаКРазагрегацииНайдена Тогда
			Прервать;
		КонецЕсли;
		
		ПараметрыОбработкиУпаковок.КешОбработаннныхУпаковок[РодительскаяУпаковка] = Истина;
		ПараметрыОбработкиУпаковок.КешОбработаннныхУпаковок[НормализованныйКодУпаковки] = Истина;
		
		МассивСтрокКодов = Новый Массив;
		ДанныеКодовМаркировки = ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки();
		СтрокаКодаМаркировки = ДанныеКодовМаркировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКодаМаркировки, РезультатРазбора);
		
		МассивСтрокКодов.Добавить(СтрокаКодаМаркировки);
		РезультатЗапросаДанных = ИнтерфейсИСМП.СтатусыКодовМаркировки(МассивСтрокКодов, ОбщийЭлементОчереди.Организация);
		
		Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаДанных, ОбщийЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатЗапросаДанных.ТекстОшибки) Тогда
			ВызватьИсключение РезультатЗапросаДанных.ТекстОшибки;
		КонецЕсли;
		
		РезультатЗапросаПоСтроке = РезультатЗапросаДанных.СтатусыКодовМаркировки.Получить(СтрокаКодаМаркировки);
		
		Если РезультатЗапросаПоСтроке <> Неопределено
			И РезультатЗапросаПоСтроке.Свойство("РодительскаяУпаковка") Тогда
			РодительскаяУпаковка = РезультатЗапросаПоСтроке.РодительскаяУпаковка;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиИСМП(
	СтрокаДереваВерхнегоУровня, ОбщийЭлементОчереди, Знач ЗагружатьДо, СообщенияJSON, 
	ПараметрыОбмена, ОбработанныеУпаковки, СообщенияJSONОперацияУдаление) Экспорт
	
	Если СтрокаДереваВерхнегоУровня.Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	Если СтрокаДереваВерхнегоУровня.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
		
		Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание;
		
		КодУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			СтрокаДереваВерхнегоУровня, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
		
		aggregationUnit = Новый Структура;
		aggregationUnit.Вставить("unitSerialNumber", КодУпаковки);
		aggregationUnit.Вставить("aggregationType", "AGGREGATION");
		aggregationUnit.Вставить("sntins",          Новый Массив);
		
		aggregationUnits = Новый Массив;
		aggregationUnits.Добавить(aggregationUnit);
		Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
			aggregationUnit.sntins.Добавить(
				РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					СтрокаДерева, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее));
		КонецЦикла;
		
		ТелоЗапросаСоздание = Новый Структура;
		// Смена формата ИС МП?
		ТелоЗапросаСоздание.Вставить("participantId",    ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаСоздание.Вставить("participant_inn",  ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаСоздание.Вставить("aggregationUnits", aggregationUnits);
		
	ИначеЕсли ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН = СтрокаДереваВерхнегоУровня.ИННВладельца Тогда
		
		Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение;
		
		КодУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			СтрокаДереваВерхнегоУровня, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
		
		ОбработанныеУпаковки[КодУпаковки] = СтрокаДереваВерхнегоУровня.РодительскаяУпаковка;
		
		ТелоЗапросаУдаление = Новый Структура;
		// Смена формата ИС МП?
		ТелоЗапросаУдаление.Вставить("participantId",      ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаУдаление.Вставить("participant_inn",    ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаУдаление.Вставить("reaggregation_type", "REMOVING");
		ТелоЗапросаУдаление.Вставить("uitu",               КодУпаковки);
		ТелоЗапросаУдаление.Вставить("uit_uitu_list",      Новый Массив);
		
		ТелоЗапросаДобавление = Новый Структура;
		// Смена формата ИС МП?
		ТелоЗапросаДобавление.Вставить("participantId",      ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаДобавление.Вставить("participant_inn",    ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		ТелоЗапросаДобавление.Вставить("reaggregation_type", "ADDING");
		ТелоЗапросаДобавление.Вставить("uitu",               КодУпаковки);
		ТелоЗапросаДобавление.Вставить("uit_uitu_list",      Новый Массив);
		
		СтрокаКодаМаркировки = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(КодУпаковки, ОбщийЭлементОчереди.ВидПродукции);
		
		РезультатЗапросаДанных = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(
			СтрокаКодаМаркировки,
			ОбщийЭлементОчереди.Организация);
		
		Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаДанных, ОбщийЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатЗапросаДанных.ТекстОшибки) Тогда
			ВызватьИсключение РезультатЗапросаДанных.ТекстОшибки;
		КонецЕсли;
		
		РезультатЗапросаПоСтроке = РезультатЗапросаДанных.СтатусыКодовМаркировки.Получить(СтрокаКодаМаркировки);
		ВложенныеШтрихкодыУпаковокИзРезультатаЗапросаДанных = Новый Соответствие;
		
		Если РезультатЗапросаПоСтроке <> Неопределено
			И РезультатЗапросаПоСтроке.ВложенныеУпаковки <> Неопределено Тогда
			Для Каждого КлючИЗначение Из РезультатЗапросаПоСтроке.ВложенныеУпаковки Цикл
				Если КлючИЗначение.Ключ.ДанныеРазбора = Неопределено Тогда
					КодМаркировки = КлючИЗначение.Ключ.Штрихкод;
				Иначе
					КодМаркировки = КлючИЗначение.Ключ.ДанныеРазбора.НормализованныйКодМаркировки;
				КонецЕсли;
				ВложенныеШтрихкодыУпаковокИзРезультатаЗапросаДанных[КодМаркировки] = КлючИЗначение.Ключ;
			КонецЦикла;
		КонецЕсли;
		
		ВложенныеУпаковки = Новый Соответствие;
		Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
			
			Если СтрокаДерева.ДанныеРазбора = Неопределено Тогда
				КодМаркировки = СтрокаДерева.Штрихкод;
			Иначе
				КодМаркировки = СтрокаДерева.ДанныеРазбора.НормализованныйКодМаркировки;
			КонецЕсли;
			
			ВложенныеУпаковки.Вставить(КодМаркировки, СтрокаДерева);
			
			ТребуетсяДобавление = (ВложенныеШтрихкодыУпаковокИзРезультатаЗапросаДанных[КодМаркировки] = Неопределено);
			Если ТребуетсяДобавление Тогда
				
				КодМаркировкиДляПередачи = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					СтрокаДерева, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
				
				reaggregationUnit = Новый Структура;
				reaggregationUnit.Вставить("uit_uitu", КодМаркировкиДляПередачи);
				ТелоЗапросаДобавление.uit_uitu_list.Добавить(reaggregationUnit);
				
			КонецЕсли;
		
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из ВложенныеШтрихкодыУпаковокИзРезультатаЗапросаДанных Цикл
			
			КодМаркировки = КлючИЗначение.Ключ;
			СтрокаДанных  = КлючИЗначение.Значение;
			
			ТребуетсяУдаление = (ВложенныеУпаковки[КодМаркировки] = Неопределено);
			Если ТребуетсяУдаление Тогда
				
				КодМаркировкиДляПередачи = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					СтрокаДанных, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее);
				
				reaggregationUnit = Новый Структура;
				reaggregationUnit.Вставить("uit_uitu", КодМаркировкиДляПередачи);
				ТелоЗапросаУдаление.uit_uitu_list.Добавить(reaggregationUnit);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Упаковка %1 принадлежит ИНН %2'"),
			СтрокаДереваВерхнегоУровня.Штрихкод,
			СтрокаДереваВерхнегоУровня.ИННВладельца);
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
		
		СообщениеJSON.ЗагружатьДо   = ЗагружатьДо;
		
		СообщениеJSON.Организация       = ОбщийЭлементОчереди.Организация;
		СообщениеJSON.Документ          = ОбщийЭлементОчереди.Документ;
		СообщениеJSON.ДокументОснование = ОбщийЭлементОчереди.ДокументОснование;
		
		СообщениеJSON.Описание = СтрШаблон("%1 %2", ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(Операция), СтрокаДереваВерхнегоУровня.Штрихкод);
		
		СообщениеJSON.ТекстСообщенияJSON  = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапросаСоздание, Истина);
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = Неопределено;
		СообщениеJSON.ТребуетсяПодписание = Истина;
		СообщениеJSON.СообщениеОснование  = ОбщийЭлементОчереди.Сообщение;
		СообщениеJSON.ПараметрыЗапроса    = Неопределено;
		
		СообщениеJSON.ВидПродукции = ОбщийЭлементОчереди.ВидПродукции;
		СообщениеJSON.Операция     = Операция;
		СообщениеJSON.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение Тогда
		
		Если ТелоЗапросаДобавление <> Неопределено И ТелоЗапросаДобавление.uit_uitu_list.Количество() > 0 Тогда
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
			СообщениеJSON.ЗагружатьДо   = ЗагружатьДо;
			
			СообщениеJSON.Организация       = ОбщийЭлементОчереди.Организация;
			СообщениеJSON.Документ          = ОбщийЭлементОчереди.Документ;
			СообщениеJSON.ДокументОснование = ОбщийЭлементОчереди.ДокументОснование;
			
			СообщениеJSON.Описание = СтрШаблон("%1 %2 (добавление)", ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(Операция), СтрокаДереваВерхнегоУровня.Штрихкод);
			
			СообщениеJSON.ТекстСообщенияJSON  = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапросаДобавление, Истина);
			СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			СообщениеJSON.Версия              = Неопределено;
			СообщениеJSON.ТребуетсяПодписание = Истина;
			СообщениеJSON.СообщениеОснование  = ОбщийЭлементОчереди.Сообщение;
			СообщениеJSON.ПараметрыЗапроса    = Неопределено;
			
			СообщениеJSON.ВидПродукции = ОбщийЭлементОчереди.ВидПродукции;
			СообщениеJSON.Операция     = Операция;
			СообщениеJSON.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЕсли;
		
		Если ТелоЗапросаУдаление <> Неопределено И ТелоЗапросаУдаление.uit_uitu_list.Количество() > 0 Тогда
			
			СообщениеJSONУдаление = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSONУдаление.Идентификатор = Строка(Новый УникальныйИдентификатор());
			СообщениеJSONУдаление.ЗагружатьДо   = ЗагружатьДо;
			
			СообщениеJSONУдаление.Организация       = ОбщийЭлементОчереди.Организация;
			СообщениеJSONУдаление.Документ          = ОбщийЭлементОчереди.Документ;
			СообщениеJSONУдаление.ДокументОснование = ОбщийЭлементОчереди.ДокументОснование;
			
			СообщениеJSONУдаление.Описание = СтрШаблон("%1 %2 (изменение)", ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(Операция), СтрокаДереваВерхнегоУровня.Штрихкод);
			
			СообщениеJSONУдаление.ТекстСообщенияJSON  = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапросаУдаление, Истина);
			СообщениеJSONУдаление.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			СообщениеJSONУдаление.Версия              = Неопределено;
			СообщениеJSONУдаление.ТребуетсяПодписание = Истина;
			СообщениеJSONУдаление.СообщениеОснование  = ОбщийЭлементОчереди.Сообщение;
			СообщениеJSONУдаление.ПараметрыЗапроса    = Неопределено;
			
			СообщениеJSONУдаление.ВидПродукции = ОбщийЭлементОчереди.ВидПродукции;
			СообщениеJSONУдаление.Операция     = Операция;
			СообщениеJSONУдаление.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
			
			СообщенияJSONОперацияУдаление.Вставить(СообщениеJSONУдаление, СообщениеJSONУдаление.Идентификатор);
			
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если СообщениеJSON <> Неопределено Тогда
		ЗагружатьДо = СообщениеJSON.Идентификатор;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
		ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиИСМП(
			СтрокаДерева, ОбщийЭлементОчереди,
			ЗагружатьДо, СообщенияJSON, ПараметрыОбмена, ОбработанныеУпаковки, СообщенияJSONОперацияУдаление);
	КонецЦикла;
	
КонецФункции

Функция ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиМОТП(ПараметрыОбработки, СтрокаДереваВерхнегоУровня) Экспорт
	
	Если СтрокаДереваВерхнегоУровня.Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПараметрыОбработки.ДанныеШапки.Организация);
	ПараметрыОбработки.ДанныеШапки.Вставить("ИНН", РеквизитыОрганизации.ИНН);
	
	ОбщийЭлементОчереди = ПараметрыОбработки.ЭлементОчереди;
	ПространствоИмен    = ПараметрыОбработки.МетаданныеXDTO.АгрегацияМОТП.ПространствоИмен;
	
	Если ПараметрыОбработки.СообщениеАгрегации = Неопределено Тогда
		
		АгрегацияСоздание = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание;
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
		СообщениеJSON.ЗагружатьДо   = ОбщийЭлементОчереди.Сообщение;
		
		СообщениеJSON.Организация       = ОбщийЭлементОчереди.Организация;
		СообщениеJSON.Документ          = ОбщийЭлементОчереди.Документ;
		СообщениеJSON.ДокументОснование = ОбщийЭлементОчереди.ДокументОснование;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(АгрегацияСоздание);
		
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = Неопределено;
		СообщениеJSON.ТребуетсяПодписание = Истина;
		СообщениеJSON.СообщениеОснование  = ОбщийЭлементОчереди.Сообщение;
		СообщениеJSON.ПараметрыЗапроса    = Неопределено;
		
		СообщениеJSON.ВидПродукции = ОбщийЭлементОчереди.ВидПродукции;
		СообщениеJSON.Операция     = АгрегацияСоздание;
		СообщениеJSON.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		
		ПараметрыОбработки.СообщениеАгрегации = СообщениеJSON;
		
		ФайлXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Файл");
		
		ВерсияПрограммы = ИнтерфейсМОТПСлужебный.ВерсияПрограммы();
		ИмяФайла        = ИнтерфейсМОТПСлужебный.ИмяФайлаXDTO(
			ПараметрыОбработки.ДанныеШапки, ПараметрыОбработки.МетаданныеXDTO.АгрегацияМОТП);
		
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ФайлXDTO, "ИмяФайла",        ИмяФайла,        СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ФайлXDTO, "ВерсияПрограммы", ВерсияПрограммы, СообщениеJSON);
		
		// Уведомление
		УведомлениеXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Уведомление", ФайлXDTO);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ФайлXDTO, "Уведомление", УведомлениеXDTO, СообщениеJSON);
		СведенияОбАгрегацииXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "СведенияОбАгрегации", УведомлениеXDTO);
		
		ЗначениеДаты = Формат(ПараметрыОбработки.ДанныеШапки.Дата, "ДФ=dd.MM.yyyy;");
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(СведенияОбАгрегацииXDTO, "Дата",  ЗначениеДаты,    СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(СведенияОбАгрегацииXDTO, "Время", ПараметрыОбработки.ДанныеШапки.Дата, СообщениеJSON);
		
		// ИНН
		ИННXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "ИНН", СведенияОбАгрегацииXDTO);
		Если СтрДлина(ПараметрыОбработки.ДанныеШапки.ИНН) > 10 Тогда
			ИмяПоляИНН = "ИННФЛТип";
		Иначе
			ИмяПоляИНН = "ИННЮЛТип";
		КонецЕсли;
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ИННXDTO, ИмяПоляИНН, ПараметрыОбработки.ДанныеШапки.ИНН, СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(СведенияОбАгрегацииXDTO, "ИНН", ИННXDTO, СообщениеJSON);
		
		// Сведения об агрегации
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			УведомлениеXDTO, "СведенияОбАгрегации", СведенияОбАгрегацииXDTO, СообщениеJSON);
		
		ПараметрыОбработки.ДанныеСообщений.Вставить(СообщениеJSON, ФайлXDTO);
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
		ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиМОТП(ПараметрыОбработки, СтрокаДерева);
	КонецЦикла;
	
	Если ТипЗнч(СтрокаДереваВерхнегоУровня) = Тип("ДеревоЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаДереваВерхнегоУровня.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен
		Или ОбщийЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН = СтрокаДереваВерхнегоУровня.ИННВладельца Тогда
		
		ДанныеXDTO = ПараметрыОбработки.ДанныеСообщений[ПараметрыОбработки.СообщениеАгрегации];
		ГрупповаяУпаковкаXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			ПространствоИмен, "ИнформацияОбАгрегировании", ДанныеXDTO.Уведомление.СведенияОбАгрегации);
		
		КодУпаковки = ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(
			СтрокаДереваВерхнегоУровня, ПараметрыОбработки.ПараметрыНормализации);
		
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			ГрупповаяУпаковкаXDTO, "КодГрупповойУпаковки", КодУпаковки, ПараметрыОбработки.СообщениеАгрегации);
		
		Если СтрокаДереваВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
				ГрупповаяУпаковкаXDTO, "ТипУпаковки", "Транспортная", ПараметрыОбработки.СообщениеАгрегации);
		Иначе
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
				ГрупповаяУпаковкаXDTO, "ТипУпаковки", "Потребительская", ПараметрыОбработки.СообщениеАгрегации);
		КонецЕсли;
		
		ВложенныеКоды = Новый Массив;
		Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
			
			ВложенныеКоды.Добавить(
				ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(
				СтрокаДерева, ПараметрыОбработки.ПараметрыНормализации));
			
		КонецЦикла;
		
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			ГрупповаяУпаковкаXDTO, "СписокКодовИдентификации",
			СтрСоединить(ВложенныеКоды, " "), ПараметрыОбработки.СообщениеАгрегации);
		
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			ДанныеXDTO.Уведомление.СведенияОбАгрегации,
			"ИнформацияОбАгрегировании",
			ГрупповаяУпаковкаXDTO,
			ПараметрыОбработки.СообщениеАгрегации);
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Упаковка %1 принадлежит ИНН %2'"),
			СтрокаДереваВерхнегоУровня.Штрихкод,
			СтрокаДереваВерхнегоУровня.ИННВладельца);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОбработки.СообщениеАгрегации.ТекстОшибки) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Внутренная ошибка формирования XML:
			|%1'"),
			ПараметрыОбработки.СообщениеАгрегации.ТекстОшибки);
	КонецЕсли;
	
КонецФункции

#Область ПриемкаТоваровИСМП

//Преобразовывает вид операции документа к строковому представлению для передачи в ИС МП
//
// Параметры:
//  ОперацияДокумента - ПеречислениеСсылка.ВидыОперацийИСМП - операция документа.
//  СообщениеJSON - Структура - См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON.
//
// Возвращаемое значение:
//  Строка, Неопределено - вид операции для ИС МП.
Функция ВидОперацииДокументаИСМП(ОперацияДокумента, СообщениеJSON)
	
	ВидОперации = Неопределено;
	
	Если ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаПродажа Тогда
		ВидОперации = "SELLING";
	ИначеЕсли ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаКомиссия Тогда
		ВидОперации = "COMMISSION";
	ИначеЕсли ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаАгент Тогда
		ВидОперации = "AGENT";
	ИначеЕсли ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаБезвозмезднаяПередача Тогда
		ВидОперации = "SELLING";
	ИначеЕсли ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаПриобретениеГосПредприятием Тогда
		ВидОперации = "SELLING";
	ИначеЕсли ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаДляСобственныхНуждПокупателя Тогда
		ВидОперации = "SELLING";
	ИначеЕсли ОперацияДокумента = Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля Тогда
		ВидОперации = "";
	Иначе
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Неизвестный вид операции документа Приемка товаров ИС МП: %1'"), ОперацияДокумента));
	КонецЕсли;
	
	Возврат ВидОперации;
	
КонецФункции

// Выполняет сравнение двух деревьев значений: Дерева по данным информационной базы, сформированнное по данным документа
//  и дерева, полученного из сервиса ИС МП.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - См. ИнициализироватьДеревоУпаковок.
//  ДеревоУпаковокПоДаннымСервиса - ДеревоЗначений - Дерево, полученное из сервиса Гос. ИС.
//  ТекстОшибкиПоРасхождениям - Строка - Текст ошибки в случае выявления расхождений состава деревьев
//  ПолнаяПроверкаДеревьев - Булево - Истина, если требуется двухстороннее сравнение деревьев.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами - См. ВыявитьРасхожденияВСтрокахДеревьев
Функция ВыявитьРасхожденияВСоставахДеревьев(ДеревоУпаковок, ДеревоУпаковокПоДаннымСервиса, ТекстОшибкиПоРасхождениям,
	ПолнаяПроверкаДеревьев = Истина) Экспорт
	
	КэшПроверенныхСтрок = Новый Соответствие;
	КэшНенайденныхСтрок = Новый Массив;
	
	ТекстОшибкиПоРасхождениям = "";
	
	ДеревоУпаковокПоДаннымСервиса.Колонки.Добавить("НарушенСостав",         Новый ОписаниеТипов("Булево"));
	ДеревоУпаковокПоДаннымСервиса.Колонки.Добавить("НайденаВДругойКоробке", Новый ОписаниеТипов("Булево"));
	ДеревоУпаковокПоДаннымСервиса.Колонки.Добавить("ОтсутствуетПоДаннымИБ", Новый ОписаниеТипов("Булево"));
	
	Если ПолнаяПроверкаДеревьев Тогда
		РезультатПроверки = ВыявитьРасхожденияВСтрокахДеревьев(ДеревоУпаковок, ДеревоУпаковокПоДаннымСервиса, КэшПроверенныхСтрок,
			КэшНенайденныхСтрок, Истина);
		Если РезультатПроверки.ЕстьОшибки и КэшНенайденныхСтрок.Количество()>0 Тогда
			ТекстОшибкиПоРасхождениям = СтрШаблон(
				НСтр("ru='Невозможно принять документ, выявлены излишки. %1'"),
				КэшНенайденныхСтрок[0].Штрихкод);
			Возврат РезультатПроверки;
		КонецЕсли;
	КонецЕсли;
	РезультатПроверки = ВыявитьРасхожденияВСтрокахДеревьев(ДеревоУпаковокПоДаннымСервиса, ДеревоУпаковок, КэшПроверенныхСтрок,
		КэшНенайденныхСтрок, Ложь);
	
	Возврат РезультатПроверки;
	
КонецФункции

// Выполняет поиск переданной строки в дереве значений. Поиск выполняется полным перебором строк в дереве значений
//
// Параметры:
//  СтрокаПоиска - СтрокаДереваЗначений - Строка дерева значений
//  ДеревоПроверки - ДеревоЗначений - Дерево значений, в котором осуществляется поиск
//
// Возвращаемое значение:
//  Неопределено, СтрокаДереваЗначений - Найденная строка дерева значений.
Функция НайтиСтрокиВИсходномДереве(СтрокаПоиска, ДеревоПроверки) Экспорт
	
	НайденнаяСтрока = Неопределено;
	СоответствующаяСтрокаДереваПроверки = ДеревоПроверки.Строки.Найти(СтрокаПоиска.НормализованныйШтрихкод, "НормализованныйШтрихкод");
	
	Если СоответствующаяСтрокаДереваПроверки = Неопределено Тогда
		Для Каждого СтрокаДереваПоиска Из ДеревоПроверки.Строки Цикл
			Если СтрокаДереваПоиска.Строки.Количество() Тогда 
				НайденнаяСтрока = НайтиСтрокиВИсходномДереве(СтрокаПоиска, СтрокаДереваПоиска);
				Если НайденнаяСтрока <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НайденнаяСтрока = СоответствующаяСтрокаДереваПроверки;
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

// Получает код маркировки строки дерева в виде, необходимом для системы ИС МП.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева значений
//
// Возвращаемое значение
//  Неопределено, Строка - Код маркировки после нормализации.
Функция КодМаркировкиДляПередачиИСМП(СтрокаДерева)
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
		СтрокаДерева.Штрихкод, СтрокаДерева.ВидПродукции, Ложь);
	Возврат ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее);
	
КонецФункции

// Проверят Дерево значений 1 на соотствие Дерева значений 2. Подготавливает данные для отправки в ИС МП. Фиксирует расхождения.
//
// Параметры:
//  ДеревоЗначений1 - ДеревоЗначений - Дерево значений для проверки
//  ДеревоЗначений2 - ДеревоЗначений - Дерево значений для поиска
//  КэшПроверенныхСтрок - Соответствие - соответствие совпадающих строк, найденных при первой итерации
//  КэшНенайденныхСтрок - Массив - Массив ненайденных строк
//  ПерваяИтерация - Булево - признак первой итерации операции сравнения
//  ДеревоПроверкиИсходное - ДеревоЗначений, Неопределено - Дерево упаковок для сравнения полным перебором.
//
// Возвращаемое значение
//  Структура - Структура со свойствами:
//  * НарушенСостав - Булево - Истина, если расхождений по коробке не выявлено.
//  * СоставУпаковок - Массив - Массив структур для формирования свойства products сообщения JSON.
//  * ЕстьОшибки - Булево - Истина, если выявлены расхождения при первой итерации.
Функция ВыявитьРасхожденияВСтрокахДеревьев(ДеревоЗначений1, ДеревоЗначений2, КэшПроверенныхСтрок,
	КэшНенайденныхСтрок, ПерваяИтерация, ДеревоПроверкиИсходное = Неопределено)
	
	Если ПерваяИтерация И ДеревоПроверкиИсходное = Неопределено Тогда
		ДеревоПроверкиИсходное = ДеревоЗначений2;
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("НарушенСостав",  Ложь);
	ПараметрыПроверки.Вставить("СоставУпаковок", Новый Массив);
	ПараметрыПроверки.Вставить("ЕстьОшибки",     Ложь);
	
	СоставКоробки = Новый Массив;
	
	ПромежуточныйМассив = Новый Массив;
	
	Для Каждого СтрокаДерева1 Из ДеревоЗначений1.Строки Цикл
		
		СоответствующаяСтрокаДерева2 = КэшПроверенныхСтрок.Получить(СтрокаДерева1);
		Если СоответствующаяСтрокаДерева2 <> Неопределено Тогда
			ПараметрыПроверкиВложенныхСтрок = ВыявитьРасхожденияВСтрокахДеревьев(СтрокаДерева1, СоответствующаяСтрокаДерева2,
				КэшПроверенныхСтрок, КэшНенайденныхСтрок, ПерваяИтерация, ДеревоПроверкиИсходное);
			Если ТипЗнч(ДеревоЗначений1) = Тип("СтрокаДереваЗначений") Тогда
				
				Если ПараметрыПроверкиВложенныхСтрок.НарушенСостав Или СтрокаДерева1.НайденаВДругойКоробке
					Или СтрокаДерева1.НарушенСостав Тогда
					ПараметрыПроверки.НарушенСостав = Истина;
				КонецЕсли;
				
			Иначе
				
				ПараметрыПроверки.НарушенСостав = Ложь;
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПромежуточныйМассив, ПараметрыПроверкиВложенныхСтрок.СоставУпаковок);
			Продолжить;
			
		КонецЕсли;
		
		Если ПерваяИтерация Тогда
			
			НайденнаяСтрокаДерева2 = ДеревоЗначений2.Строки.Найти(СтрокаДерева1.Штрихкод, "Штрихкод");
			
			Если НайденнаяСтрокаДерева2 = Неопределено Тогда
				
				НайденнаяСтрокаДерева2 = НайтиСтрокиВИсходномДереве(СтрокаДерева1, ДеревоПроверкиИсходное);
				
				Если НайденнаяСтрокаДерева2 <> Неопределено Тогда
					
					НайденнаяСтрокаДерева2.НайденаВДругойКоробке = Истина;
					КэшПроверенныхСтрок.Вставить(НайденнаяСтрокаДерева2, СтрокаДерева1);
					
					Если ТипЗнч(ДеревоЗначений2) = Тип("СтрокаДереваЗначений") Тогда
						ДеревоЗначений2.НарушенСостав = Истина;
						КэшПроверенныхСтрок.Вставить(ДеревоЗначений2, ДеревоЗначений1);
					КонецЕсли;
					
					Если НайденнаяСтрокаДерева2.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
						ПараметрыПроверкиВложенныхСтрок = ВыявитьРасхожденияВСтрокахДеревьев(СтрокаДерева1, НайденнаяСтрокаДерева2,
							КэшПроверенныхСтрок, КэшНенайденныхСтрок, ПерваяИтерация, ДеревоПроверкиИсходное);
						ПараметрыПроверки.ЕстьОшибки = ПараметрыПроверкиВложенныхСтрок.ЕстьОшибки;
					КонецЕсли;
				Иначе
					
					КэшНенайденныхСтрок.Добавить(СтрокаДерева1);
					ПараметрыПроверки.ЕстьОшибки = Истина;
					Прервать;
					
				КонецЕсли;
				
			Иначе
				КэшПроверенныхСтрок.Вставить(НайденнаяСтрокаДерева2, СтрокаДерева1);
				ПараметрыПроверкиВложенныхСтрок = ВыявитьРасхожденияВСтрокахДеревьев(СтрокаДерева1, НайденнаяСтрокаДерева2,
					КэшПроверенныхСтрок, КэшНенайденныхСтрок, ПерваяИтерация, ДеревоПроверкиИсходное);
				ПараметрыПроверки.ЕстьОшибки = ПараметрыПроверкиВложенныхСтрок.ЕстьОшибки;
				Если ПараметрыПроверки.ЕстьОшибки Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			СтрокаДерева1.ОтсутствуетПоДаннымИБ = Истина;
			ПараметрыПроверкиВложенныхСтрок =  ВыявитьРасхожденияВСтрокахДеревьев(СтрокаДерева1, НайденнаяСтрокаДерева2,
				КэшПроверенныхСтрок, КэшНенайденныхСтрок, ПерваяИтерация, ДеревоПроверкиИсходное);
			
			Если ТипЗнч(ДеревоЗначений1) = Тип("СтрокаДереваЗначений") Тогда
				Если ПараметрыПроверкиВложенныхСтрок.НарушенСостав Или СтрокаДерева1.НайденаВДругойКоробке Тогда
					ПараметрыПроверки.НарушенСостав = Истина;
				КонецЕсли;
			Иначе
				ПараметрыПроверки.НарушенСостав = Ложь;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПромежуточныйМассив, ПараметрыПроверкиВложенныхСтрок.СоставУпаковок);
			
		КонецЕсли;
		
	КонецЦикла;
	Если Не ПерваяИтерация Тогда
		Если ТипЗнч(ДеревоЗначений1) = Тип("СтрокаДереваЗначений") Тогда
			
			СтрокаJSON = Новый Структура;
			
			Если ДеревоЗначений1.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				ИмяРеквизитаКИ = "uit_code";
			ИначеЕсли ДеревоЗначений1.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ИмяРеквизитаКИ = "uitu_code";
			КонецЕсли;
			
			Если ПараметрыПроверки.НарушенСостав Или ДеревоЗначений1.ОтсутствуетПоДаннымИБ
				Или ДеревоЗначений1.НарушенСостав Тогда
				СтрокаJSON.Вставить("accepted", Ложь);
			Иначе
				СтрокаJSON.Вставить("accepted", Истина);
			КонецЕсли;
			
			СтрокаJSON.Вставить(ИмяРеквизитаКИ, КодМаркировкиДляПередачиИСМП(ДеревоЗначений1));
			
			Если ДеревоЗначений1.Строки.Количество()=0 Тогда
				СоставКоробки.Добавить(СтрокаJSON);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыПроверки.СоставУпаковок, СоставКоробки);
			Иначе
				СтрокаJSON.Вставить("children", ПромежуточныйМассив);
				СоставКоробки.Добавить(СтрокаJSON);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыПроверки.СоставУпаковок, СоставКоробки);
			КонецЕсли;
			
			Если ДеревоЗначений1.НайденаВДругойКоробке Или ДеревоЗначений1.ОтсутствуетПоДаннымИБ
				Или ДеревоЗначений1.НарушенСостав Тогда
				ПараметрыПроверки.НарушенСостав = Истина;
			КонецЕсли;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыПроверки.СоставУпаковок, ПромежуточныйМассив);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыПроверки;
КонецФункции

#КонецОбласти

Процедура ЗагрузитьРезультатОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОбработкиДокумента");
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМП.СтатусОбработкиДокументаПоИдентификатору(
		ЭлементОчереди.ИдентификаторЗаявки,
		ЭлементОчереди.Организация, ЭлементОчереди.ВидПродукции, ЭлементОчереди.Операция);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = Ложь;
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния    = 408       // Таймаут
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 500       // Ошибки сервера
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 502       // Bad Gateway
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 503       // Сервер недоступен
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 504       // Gateway Timeout
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 403       // Ошибка авторизации
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 429 Тогда // Слишком много запросов
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ЗапросОтправлен
		Или Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ОтветПолучен Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	// Ошибка валидации. Один или несколько запрошенных ID заказов не найдены.
	// Способ обхода: повтор запроса.
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если ЭлементОчереди.ТекущийСтатус = РезультатОбработкиЗаявки.Статус
		И ЭлементОчереди.ТекущийСтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		ИначеЕсли ЭлементОчереди.ТекущийСтатус = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления
			Или ЭлементОчереди.ТекущийСтатус = Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
				
			Возврат;
			
		КонецЕсли;
		
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		ОбработкаЗагрузкиПереданногоДокумента(
			ЭлементОчереди,
			ПараметрыОбмена,
			РезультатОбработкиЗаявки,
			ПараметрыОбновленияСтатуса);
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			РезультатОбработкиЗаявки.Операция,
			ПараметрыОбновленияСтатуса);
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
			РезультатОбработкиЗаявки);
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ
			Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена))
			
		КонецЕсли;
		
		СтрокаРезультата = СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована) Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ЗагрузитьСодержаниеРезультатаОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьСодержаниеРезультатаОбработкиДокумента");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КоличествоЗаписей", 300);
	ПараметрыОтбора.Вставить("Идентификатор",     ЭлементОчереди.ИдентификаторЗаявки);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ИмяПоляТела",        "products_list");
	ПараметрыОбработки.Вставить("ИмяПоляСотировки",   "key");
	ПараметрыОбработки.Вставить("РасширенныеСтатусы", Истина);
	
	РезультатОбработкиЗаявки = СоставДокументаПоИдентификатору(ЭлементОчереди, ПараметрыОтбора, ПараметрыОбработки);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = Ложь;
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния    = 408       // Таймаут
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 500       // Ошибки сервера
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 502       // Bad Gateway
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 503       // Сервер недоступен
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 504       // Gateway Timeout
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 403       // Ошибка авторизации
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 429 Тогда // Слишком много запросов
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ЗапросОтправлен
		Или Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ОтветПолучен Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	// Ошибка валидации. Один или несколько запрошенных ID заказов не найдены.
	// Способ обхода: повтор запроса.
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если ЭлементОчереди.ТекущийСтатус = РезультатОбработкиЗаявки.Статус
		И ЭлементОчереди.ТекущийСтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		ИначеЕсли ЭлементОчереди.ТекущийСтатус = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления
			Или ЭлементОчереди.ТекущийСтатус = Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
				
			Возврат;
			
		КонецЕсли;
		
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		ОбработкаЗагрузкиПереданногоДокумента(
			ЭлементОчереди,
			ПараметрыОбмена,
			РезультатОбработкиЗаявки,
			ПараметрыОбновленияСтатуса);
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			РезультатОбработкиЗаявки.Операция,
			ПараметрыОбновленияСтатуса);
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
			РезультатОбработкиЗаявки);
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ
			Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена))
			
		КонецЕсли;
		
		СтрокаРезультата = СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована) Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ОбработкаЗагрузкиПереданногоДокумента(ЭлементОчереди, ПараметрыОбмена, РезультатОбработкиЗаявки, ПараметрыОбновленияСтатуса)
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание Тогда
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
			
			БлокировкаДокумент = Новый БлокировкаДанных;
			
			ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
			ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
				"Ссылка", Новый ОписаниеТипов("ДокументСсылка.МаркировкаТоваровИСМП"));
			ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;
			
			ЭлементБлокировки = БлокировкаДокумент.Добавить("Документ.МаркировкаТоваровИСМП");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			БлокировкаДокумент.Заблокировать();
			
			ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
			МассивСтрокОтвета   = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект.body.products_list;
			КодАТК = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект.body.atk;
			
			УстановитьПривилегированныйРежим(Истина);
			НовыйЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
			НовыйЭлемент.ЗначениеШтрихкода = КодАТК;
			
			МассивШтрихкодов = Новый Массив;
			Для Каждого СтрокаКодов Из МассивСтрокОтвета Цикл
				МассивШтрихкодов.Добавить(СтрокаКодов.ki);
			КонецЦикла;
			
			ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(МассивШтрихкодов);
			НоменклатураУпаковки   = Новый Соответствие;
			
			НоменклатураУпаковки   = Новый Соответствие;
			ХарактеристикаУпаковки = Новый Соответствие;
			
			Для Каждого СтрокаТаблицы Из ШтрихкодыУпаковок Цикл
				СтрокаТЧ = НовыйЭлемент.ВложенныеШтрихкоды.Добавить();
				СтрокаТЧ.Штрихкод = СтрокаТаблицы.Ссылка;
				НоменклатураУпаковки.Вставить(СтрокаТаблицы.Номенклатура, Истина);
				ХарактеристикаУпаковки.Вставить(СтрокаТаблицы.Характеристика, Истина);
			КонецЦикла;
			
			Если НоменклатураУпаковки.Количество() > 1 Или ХарактеристикаУпаковки.Количество() > 1 Тогда
				НовыйЭлемент.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
			Иначе 
				НовыйЭлемент.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НовыйЭлемент.ДатаУпаковки) Тогда
				НовыйЭлемент.ДатаУпаковки = ТекущаяДатаСеанса();
			КонецЕсли;
			
			НовыйЭлемент.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
			СтрокаТЧ = ДокументОбъект.ШтрихкодыАТК.Добавить();
			СтрокаТЧ.ШтрихкодУпаковки = НовыйЭлемент.Ссылка;
			
			ДокументОбъект.Записать();
			
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
		
		ПараметрыОбновленияСтатуса.Статус = КонвертированныйОбщийСтатусДокумента(
			РезультатОбработкиЗаявки.Статус, ЭлементОчереди.Документ);
			
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
			
			БлокировкаДокумент = Новый БлокировкаДанных;
			
			ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
			ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
				"Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ"));
			ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;
			
			ЭлементБлокировки = БлокировкаДокумент.Добавить("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			БлокировкаДокумент.Заблокировать();
			
			КешОписанияОстатков = Новый Соответствие();
			ДокументОбъект      = ЭлементОчереди.Документ.ПолучитьОбъект();
			МассивСтрокОтвета   = РезультатОбработкиЗаявки.СоставДокумента;
			
			Для Каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТовары.GTIN) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПоиска = ОбязательныеПоляОписанияОстатковПоСтрокеДокумента(
					СтрокаТовары, ДокументОбъект.ВидПродукции);
					
				Для Каждого СтрокаОтвета Из МассивСтрокОтвета Цикл
					
					СтрокаРезультатаСоответствуетЗапросу = Истина;
					
					Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
						ЗначениеПоиска = Неопределено;
						Если Не СтрокаОтвета.Свойство(КлючИЗначение.Ключ, ЗначениеПоиска) Тогда
							Если ЗначениеЗаполнено(СтруктураПоиска[КлючИЗначение.Ключ]) Тогда
								СтрокаРезультатаСоответствуетЗапросу = Ложь;
								Прервать;
							КонецЕсли;
						ИначеЕсли НормализованноеСтроковоеЗначение(ЗначениеПоиска) <> НормализованноеСтроковоеЗначение(СтруктураПоиска[КлючИЗначение.Ключ]) Тогда
							СтрокаРезультатаСоответствуетЗапросу = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Не СтрокаРезультатаСоответствуетЗапросу Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТовары.GTIN = СтрокаОтвета.gtin;
					
					Если КешОписанияОстатков.Получить(СтрокаТовары.GTIN) = Неопределено Тогда
						СтруктураОписания = Новый Структура();
						Если СтрокаОтвета.Свойство("name") Тогда
							СтруктураОписания.Вставить("Представление", СтрокаОтвета.name);
						Иначе
							ПараметрыОписанияОстатков = ИнтеграцияИСКлиентСервер.ИспользованиеПараметровОписанияОстатковПоВидуПродукции(
								ДокументОбъект.ВидПродукции,
								ИнтеграцияИСКлиентСервер.КодТНВЭДДляПередачиВИСМП(СтрокаТовары.КодТНВЭД, ДокументОбъект.ВидПродукции));
							Если ПараметрыОписанияОстатков.ИспользоватьНаименование Тогда
								Если ЗначениеЗаполнено(СтрокаТовары.Наименование) Тогда
									СтруктураОписания.Вставить("Представление", СтрокаТовары.Наименование);
								Иначе
									СтруктураОписания.Вставить(
										"Представление",
									ИнтеграцияИС.ПредставлениеНоменклатуры(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
								КонецЕсли;
							Иначе
								СтруктураОписания.Вставить(
									"Представление",
										СтрокаДляПоискаGTINМаркировкиОстатков(
										ДокументОбъект.ВидПродукции,
										СтрокаТовары));
							КонецЕсли;
						КонецЕсли;
						СтруктураОписания.Вставить("Организация",    ДокументОбъект.Организация);
						СтруктураОписания.Вставить("ВидПродукции",   ДокументОбъект.ВидПродукции);
						СтруктураОписания.Вставить("ДанныеОписания", СтрокаТовары);
						СтруктураОписания.Вставить("КодТНВЭД",       СтрокаТовары.КодТНВЭД);
						КешОписанияОстатков.Вставить(СтрокаТовары.GTIN, СтруктураОписания);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			РегистрыСведений.КэшОписанияОстатковИСМП.СохранитьПредставлениеОписанияОстатков(КешОписанияОстатков);
			
			Если ДокументОбъект.Модифицированность() Тогда
				ДокументОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием Тогда
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетПодтверждения
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ Тогда
			
			БлокировкаДокумент = Новый БлокировкаДанных;
			
			ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
			ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
				"Ссылка", Новый ОписаниеТипов("ДокументСсылка.ОтгрузкаТоваровИСМП"));
			ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;
			
			ЭлементБлокировки = БлокировкаДокумент.Добавить("Документ.ОтгрузкаТоваровИСМП");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			БлокировкаДокумент.Заблокировать();
			
			ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
			ДокументОбъект.ИдентификаторЗаявкиНаОтгрузку = ЭлементОчереди.ИдентификаторЗаявки;
			ДокументОбъект.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиЗапросаЗаказНаЭмиссиюСУЗАбстрактнаяОперация(ЭлементОчереди, ПараметрыОбмена)
	
	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN КАК GTIN,
		|	СУММА(ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары
		|ГДЕ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗ.GTIN КАК GTIN,
		|	СУММА(1) КАК КоличествоЭмитировано
		|ПОМЕСТИТЬ ДанныеПула
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
		|		ПО ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка = ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ПулКодовМаркировкиСУЗ.GTIN
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN КАК GTIN,
		|	СУММА(ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары
		|ГДЕ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка = &Ссылка
		|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.СервисПровайдер <> ЗНАЧЕНИЕ(Справочник.СервисПровайдерыСУЗ.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ДанныеПула.КоличествоЭмитировано), 0) КАК КоличествоЭмитировано,
		|	ЕСТЬNULL(СУММА(ДанныеДокумента.Количество), 0) КАК Количество
		|ИЗ
		|	ДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПула КАК ДанныеПула
		|		ПО ДанныеДокумента.GTIN = ДанныеПула.GTIN";
	
	Запрос.УстановитьПараметр("Ссылка", ЭлементОчереди.Документ);
	
	ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
		
		Если Не ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.КоличествоЭмитировано) Тогда
			Статус          = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
		ИначеЕсли ВыборкаИзРезультатаЗапроса.КоличествоЭмитировано < ВыборкаИзРезультатаЗапроса.Количество Тогда
			Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично;
		Иначе
			Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы;
		КонецЕсли;
		
	Иначе
		
		Статус          = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
		
	КонецЕсли;
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
	
	ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Статус;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ,
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиЗаказаНаЭмиссиюКодовМаркировки,
		ПараметрыОбновленияСтатуса);
	
	УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	
	УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиОтчетОбИспользованииКМРасчетСтатуса(ЭлементОчереди, ПараметрыОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ КАК Ссылка,
	|	ИСМППрисоединенныеФайлы.Описание
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|	И ИСМППрисоединенныеФайлы.Версия     = &Версия
	|	И ИСМППрисоединенныеФайлы.Операция   = &Операция
	|	И ИСМППрисоединенныеФайлы.Документ   = &Документ");
	
	Запрос.УстановитьПараметр("Документ", ЭлементОчереди.Документ);
	Запрос.УстановитьПараметр("Операция", ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОперацияДокумента);
	Запрос.УстановитьПараметр("Версия",   ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
	
	ВыборкаОшибок = Запрос.Выполнить().Выбрать();
	
	ЕстьОшибки  = Ложь;
	ЕстьУспешно = Ложь;
	
	Пока ВыборкаОшибок.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОшибок.Описание) Тогда
			ЕстьОшибки = Истина;
		Иначе
			ЕстьУспешно = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки И ЕстьУспешно Тогда
		Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	ИначеЕсли Не ЕстьОшибки Тогда
		Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	Иначе
		Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
	КонецЕсли;
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
	
	ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Статус;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ,
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
		ПараметрыОбновленияСтатуса);
	
	УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	
	УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	Описание        = ОшибкаИзПротоколаОбмена(ЭлементОчереди, СтатусОбработки);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
	Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
	Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
	Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
	Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
	Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
	Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
	Реквизиты.Вставить("Описание",             Описание);
	
	ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
	ДобавитьЗаписьВПротоколОбмена(
		ПротоколаОбменаXML,
		Реквизиты);
	
	УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	
	УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
КонецПроцедуры

Функция ОшибкаИзПротоколаОбмена(ЭлементОчереди, СтатусОбработки)
	
	ТекстОшибки = "";
	
	Для Каждого СтрокаТЧ Из ЭлементОчереди.ПротоколОбмена Цикл
		Если СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
			Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ОтветТело) Тогда
				ДанныеОтвета = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(СтрокаТЧ.ОтветТело);
				Если ДанныеОтвета <> Неопределено
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОтвета, "rejectionReason") Тогда
					
					ТекстыОшибок = Новый Массив;
					ТекстыОшибок.Добавить(ДанныеОтвета.rejectionReason);
					
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОтвета, "poolInfos")
						И ТипЗнч(ДанныеОтвета.poolInfos) = Тип("Массив") Тогда
						
						Для каждого СтрокаПула Из ДанныеОтвета.poolInfos Цикл
							
							Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПула, "rejectionReason")
								И ТекстыОшибок.Найти(СтрокаПула.rejectionReason) = Неопределено Тогда
								ТекстыОшибок.Добавить(СтрокаПула.rejectionReason);
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					ТекстОшибки = СокрЛП(СтрСоединить(ТекстыОшибок, Символы.ПС));
					Прервать;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура ЗагрузитьРезультатОбработкиВводаВОборот(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ КАК Ссылка,
	|	ИСМППрисоединенныеФайлы.Описание
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|	И ИСМППрисоединенныеФайлы.Версия     = &Версия
	|	И ИСМППрисоединенныеФайлы.Операция   = &Операция
	|	И ИСМППрисоединенныеФайлы.Документ   = &Документ");

	Запрос.УстановитьПараметр("Документ", ЭлементОчереди.Документ);
	Запрос.УстановитьПараметр("Операция", ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОперацияДокумента);
	Запрос.УстановитьПараметр("Версия",   ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);

	ВыборкаОшибок = Запрос.Выполнить().Выбрать();
	
	ЕстьОшибки  = Ложь;
	ЕстьУспешно = Ложь;
	
	Пока ВыборкаОшибок.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОшибок.Описание) Тогда
			ЕстьОшибки = Истина;
		Иначе
			ЕстьУспешно = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки И ЕстьУспешно Тогда
		Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	ИначеЕсли Не ЕстьОшибки Тогда
		Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	Иначе
		Статус          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи;
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
	КонецЕсли;
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
	
	ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Статус;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ,
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
		ПараметрыОбновленияСтатуса);
	
	УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	
	УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
КонецПроцедуры

// Компанует строку наименования - ключ для поиска в национальном каталоге GTIN для маркировки остатков, используя
// переданные параметры.
//
// Параметры:
// 	ВидПродукции       - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	СтрокаТовары       - СтрокаТабличнойЧасти               - Строка табличной части.
// Возвращаемое значение:
// 	Строка - Итоговое наименование в каталоге.
//
Функция СтрокаДляПоискаGTINМаркировкиОстатков(ВидПродукции, СтрокаТовары)
	
	ТребуетсяВозрастнаяКатегория = Ложь;
	
	ЧастиНазвания = Новый Массив();
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Обувь Тогда
		ЧастиНазвания.Добавить("Остатки");
		ЧастиНазвания.Добавить("Обувь");
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Шины Тогда
		ЧастиНазвания.Добавить("Шины");
		ЧастиНазвания.Добавить(ОписаниеТоварногоЗнака(СтрокаТовары.ТоварныйЗнак));
		ЧастиНазвания.Добавить(СокрЛП(СтрокаТовары.Модель));
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Фотоаппараты Тогда
		ЧастиНазвания.Добавить(
			ИнтеграцияИС.ПредставлениеНоменклатуры(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность Тогда
		ТребуетсяВозрастнаяКатегория = ИнтеграцияИСКлиентСервер.КодТНВЭДТребуетВозрастнуюКатегорию(
			ИнтеграцияИСКлиентСервер.КодТНВЭДДляПередачиВИСМП(СтрокаТовары.КодТНВЭД, ВидПродукции));
		Если ТребуетсяВозрастнаяКатегория Тогда
			ЧастиНазвания.Добавить("Белье");
		Иначе
			ЧастиНазвания.Добавить("Одежда");
		КонецЕсли;
		ЧастиНазвания.Добавить(ОписаниеТоварногоЗнака(СтрокаТовары.ТоварныйЗнак));
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		Если ЗначениеЗаполнено(СтрокаТовары.Наименование) Тогда
			ЧастиНазвания.Добавить(СокрЛП(СтрокаТовары.Наименование));
		Иначе
			ЧастиНазвания.Добавить(
				СокрЛП(
					ИнтеграцияИС.ПредставлениеНоменклатуры(
						СтрокаТовары.Номенклатура,
						СтрокаТовары.Характеристика)));
		КонецЕсли;
		ЧастиНазвания.Добавить(ОписаниеТоварногоЗнака(СтрокаТовары.ТоварныйЗнак, "Отсутствует"));
	КонецЕсли;
	
	Если ТребуетсяВозрастнаяКатегория Тогда
		Если ЗначениеЗаполнено(СтрокаТовары.ВозрастнаяКатегория) Тогда
			ЧастиНазвания.Добавить(СокрЛП(СтрокаТовары.ВозрастнаяКатегория));
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СтрокаТовары.ЦелевойПол) Тогда
			ЧастиНазвания.Добавить(ЦелевойПолПредставлениеДляПоискаGTIN(СтрокаТовары.ЦелевойПол));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		Если СтрокаТовары.СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Производство") Тогда
			ЧастиНазвания.Добавить("Произведен в РФ");
		ИначеЕсли СтрокаТовары.СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт") Тогда
			ЧастиНазвания.Добавить("Ввезен в РФ");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиНазвания, ". ");
	
КонецФункции

Функция ЦелевойПолПредставлениеДляПоискаGTIN(ЦелевойПол)
	
	Если ЦелевойПол = ПредопределенноеЗначение("Перечисление.ЦелевойПолИСМП.Мужская") Тогда
		Представление = "Мужская";
	ИначеЕсли ЦелевойПол = ПредопределенноеЗначение("Перечисление.ЦелевойПолИСМП.Женская") Тогда
		Представление = "Женская";
	ИначеЕсли ЦелевойПол = ПредопределенноеЗначение("Перечисление.ЦелевойПолИСМП.Детская") Тогда
		Представление = "Детская";
	ИначеЕсли ЦелевойПол = ПредопределенноеЗначение("Перечисление.ЦелевойПолИСМП.Унисекс") Тогда
		Представление = "Унисекс";
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Целевой пол %1 не поддерживается'"),
			Представление);
	КонецЕсли;
	
	Возврат Представление;

КонецФункции

Процедура ЗапроситьСуществующиеGTINНаОстатки(ЭлементОчереди, ПараметрыОбмена)

	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗапроситьСуществующиеGTINНаОстатки");
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();

	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		БлокировкаДокумент = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылокДокумент = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылокДокумент.Колонки.Добавить(
			"Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ"));
		ТаблицыБлокируемыхСсылокДокумент.Добавить().Ссылка = ЭлементОчереди.Документ;
		
		ЭлементБлокировки = БлокировкаДокумент.Добавить("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылокДокумент;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		БлокировкаДокумент.Заблокировать();
		
		ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
		ТекстОшибки    = "";
		
		ЗаполнитьGTINМаркировкиОстатков(
			ДокументОбъект.Товары, ДокументОбъект.Организация, ДокументОбъект.ВидПродукции, ТекстОшибки);
		
		Если ДокументОбъект.Модифицированность() Тогда
			ДокументОбъект.Записать();
		КонецЕсли;
		
		ТребуетсяОписатьОстатки = Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ТребуетсяЗапросGTIN(ДокументОбъект);
		СтатусОбработки         = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		МенеджерОбъекта         = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		Если ТребуетсяОписатьОстатки Тогда
			
			Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбрабатывается;
			
			СообщенияJSON = МенеджерОбъекта.ОписаниеОстатковJSON(ЭлементОчереди.Документ, Неопределено);
			
			СертификатыДляПодписанияНаСервере  = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
			ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
			
			ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
			
			ПодготовитьПодписанныеСообщенияКПередаче(
				ПодписанныеСообщенияПоОрганизациям,
				ПараметрыОбмена);
			
		Иначе
			
			Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПGTINНаОстаткиПолучены;
			
		КонецЕсли;
		
		ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		
		ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
		
		КонецЕсли;
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Статус;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			ЭлементОчереди.Операция,
			ПараметрыОбновленияСтатуса);
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
		
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
			Реквизиты.Вставить("Описание",             ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		Иначе
		
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена))
		
		КонецЕсли;
		
		СтрокаРезультата = СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = "";
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При получении GTIN на остатки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
			
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Функция ОписаниеТоварногоЗнака(ТоварныйЗнак, ЗначениеТоварногоЗнакаПоУмолчанию = "Без товарного знака")
	Если ЗначениеЗаполнено(ТоварныйЗнак) Тогда
		Возврат СокрЛП(ТоварныйЗнак);
	Иначе
		Возврат ЗначениеТоварногоЗнакаПоУмолчанию;
	КонецЕсли;
КонецФункции

#КонецОбласти

Процедура ЗагрузитьРезультатОбработкиОтчетаСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОбработкиДокумента");
	
	РезультатОбработкиЗаявки = ИнтерфейсСУЗ.СтатусОбработкиОтчета_V2(
		ЭлементОчереди.ИдентификаторЗаявки, ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = Ложь;
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния    = 408       // Таймаут
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 500       // Ошибки сервера
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 502       // Bad Gateway
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 503       // Сервер недоступен
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 504       // Gateway Timeout
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 403       // Ошибка авторизации
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 429 Тогда // Слишком много запросов
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ЗапросОтправлен
		Или Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ОтветПолучен Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	// Ошибка валидации. Один или несколько запрошенных ID заказов не найдены.
	// Способ обхода: повтор запроса.
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если ЭлементОчереди.ТекущийСтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			РезультатОбработкиЗаявки.Операция,
			ПараметрыОбновленияСтатуса);
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
			РезультатОбработкиЗаявки);
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
			
			Если Не ЗначениеЗаполнено(Реквизиты.Описание)
				И РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
				Реквизиты.Описание = НСтр("ru = 'Ошибка обработки сообщения. Заявка отклонена.'");
			КонецЕсли;
			
			Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
				
				Если ПараметрыЗапроса <> Неопределено Тогда
					
					Если ПараметрыЗапроса.Свойство("КонтролироватьСтатусДокументаАгрегацияИСМП") Тогда
						ОперацияИСМП = Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента;
					ИначеЕсли ПараметрыЗапроса.Свойство("КонтролироватьСтатусДокументаСписаниеИСМП") Тогда
						ОперацияИСМП = Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента;
					ИначеЕсли ПараметрыЗапроса.Свойство("КодыМаркировкиДляКонтроляСтатусов") Тогда
						ОперацияИСМП = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОперацияИСМП <> Неопределено Тогда
					
					СообщениеJSON = ЗаполнитьСообщениеJSONАбстрактнаяОперация(ОперацияИСМП, ЭлементОчереди);
					СообщениеJSON.ИдентификаторЗаявки = ЭлементОчереди.ИдентификаторЗаявки;
					СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
					СообщениеJSON.Версия              = ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия;
					
					СообщенияJSON = Новый Массив;
					СообщенияJSON.Добавить(СообщениеJSON);
					
					ПодготовитьСообщенияКПередаче(СообщенияJSON, ПараметрыОбмена, СтроковоеПредставлениеПустогоУникальногоИдентификатора());
					
					ОбновитьИдентификаторЗаявкиСообщенияОчереди(
						НаборЗаписей,,,
						Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
					
				Иначе
					
					ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
					ДобавитьЗаписьВПротоколОбмена(
						ПротоколаОбменаXML,
						Реквизиты);
					
					УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
					
				КонецЕсли;
				
			Иначе
				
				ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
				ДобавитьЗаписьВПротоколОбмена(
					ПротоколаОбменаXML,
					Реквизиты);
				
				УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
				
			КонецЕсли;
			
		Иначе
			
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
			
		КонецЕсли;
		
		СтрокаРезультата = СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки отчета об использовании кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
		   Или (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		        И ОперацияИСМП = Неопределено)) Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Функция ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена)
	
	Если Не ЗначениеЗаполнено(ЭлементОчереди.СообщениеОснование) Тогда
		Возврат ЭлементОчереди;
	Иначе
		Возврат ПараметрыОбмена.ОчередьСообщений.Найти(ЭлементОчереди.СообщениеОснование, "Сообщение");
	КонецЕсли;
	
КонецФункции

Функция ЗапроситьКодыМаркировкиИзБизнесЗаказа(ПараметрыЗапроса, ДанныеПула, ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Шапка.ВидПродукции            КАК ВидПродукции,
		|	ВЫБОР
		|		КОГДА Шапка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
		|			ТОГДА ТабличнаяЧасть.СпособВводаВОборот
		|		ИНАЧЕ Шапка.СпособВводаВОборот
		|	КОНЕЦ                         КАК СпособВводаВОборот,
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ТабличнаяЧасть.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяНоменклатура
		|		ИНАЧЕ ТабличнаяЧасть.Номенклатура
		|	КОНЕЦ                         КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ТабличнаяЧасть.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяХарактеристика
		|		ИНАЧЕ ТабличнаяЧасть.Характеристика
		|	КОНЕЦ                         КАК Характеристика,
		|
		|	ТабличнаяЧасть.GTIN           КАК GTIN,
		|	ТабличнаяЧасть.Шаблон         КАК Шаблон,
		|	ТабличнаяЧасть.СрокГодности   КАК СрокГодности,
		|	ВЫБОР
		|		КОГДА
		|			ТабличнаяЧасть.СпособФормированияСерийногоНомера = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно)
		|				ИЛИ Шапка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
		|				ИЛИ Шапка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
		|				ИЛИ ТабличнаяЧасть.Шаблон = ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС)
		|				ИЛИ ТабличнаяЧасть.Шаблон = ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС)
		|				ТОГДА ТабличнаяЧасть.ИдентификаторСтроки
		|		ИНАЧЕ """"
		|	КОНЕЦ                                    КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.МаксимальнаяРозничнаяЦена КАК МаксимальнаяРозничнаяЦена,
		|	СУММА(ТабличнаяЧасть.Количество)         КАК Количество,
		|	ВЫБОР
		|		КОГДА Шапка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК МаркировкаОстатков
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ТабличнаяЧасть
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Шапка
		|		ПО ТабличнаяЧасть.Ссылка = Шапка.Ссылка
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И ТабличнаяЧасть.GTIN = &GTIN
		|СГРУППИРОВАТЬ ПО
		|	Шапка.ВидПродукции,
		|	ВЫБОР
		|		КОГДА Шапка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
		|			ТОГДА ТабличнаяЧасть.СпособВводаВОборот
		|		ИНАЧЕ Шапка.СпособВводаВОборот
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ТабличнаяЧасть.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяНоменклатура
		|		ИНАЧЕ ТабличнаяЧасть.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ТабличнаяЧасть.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяХарактеристика
		|		ИНАЧЕ ТабличнаяЧасть.Характеристика
		|	КОНЕЦ,
		|	ТабличнаяЧасть.GTIN,
		|	ТабличнаяЧасть.Шаблон,
		|	ТабличнаяЧасть.СрокГодности,
		|	ВЫБОР
		|		КОГДА
		|			ТабличнаяЧасть.СпособФормированияСерийногоНомера = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно)
		|				ИЛИ Шапка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
		|				ИЛИ Шапка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
		|				ИЛИ ТабличнаяЧасть.Шаблон = ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС)
		|				ИЛИ ТабличнаяЧасть.Шаблон = ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС)
		|				ТОГДА ТабличнаяЧасть.ИдентификаторСтроки
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ТабличнаяЧасть.МаксимальнаяРозничнаяЦена,
		|	ВЫБОР
		|		КОГДА Шапка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗ.МаксимальнаяРозничнаяЦена КАК МаксимальнаяРозничнаяЦена,
		|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот КАК СпособВводаВОборот,
		|	ПулКодовМаркировкиСУЗ.Номенклатура       КАК Номенклатура,
		|	ПулКодовМаркировкиСУЗ.Характеристика     КАК Характеристика,
		|	ПулКодовМаркировкиСУЗ.GTIN               КАК GTIN,
		|	ПулКодовМаркировкиСУЗ.Шаблон             КАК Шаблон,
		|	ПулКодовМаркировкиСУЗ.СрокГодности       КАК СрокГодности,
		|	СУММА(1)                                 КАК КоличествоПолучено
		|ПОМЕСТИТЬ ДанныеПула
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &Ссылка
		|	И ПулКодовМаркировкиСУЗ.GTIN = &GTIN
		|СГРУППИРОВАТЬ ПО
		|	ПулКодовМаркировкиСУЗ.МаксимальнаяРозничнаяЦена,
		|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот,
		|	ПулКодовМаркировкиСУЗ.GTIN,
		|	ПулКодовМаркировкиСУЗ.Номенклатура,
		|	ПулКодовМаркировкиСУЗ.Характеристика,
		|	ПулКодовМаркировкиСУЗ.Шаблон,
		|	ПулКодовМаркировкиСУЗ.СрокГодности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.ВидПродукции                           КАК ВидПродукции,
		|	ТабличнаяЧасть.СпособВводаВОборот                     КАК СпособВводаВОборот,
		|	ТабличнаяЧасть.Номенклатура                           КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика                         КАК Характеристика,
		|	ТабличнаяЧасть.GTIN                                   КАК GTIN,
		|	ТабличнаяЧасть.Шаблон                                 КАК Шаблон,
		|	ТабличнаяЧасть.ИдентификаторСтроки                    КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.СпособВводаВОборот                     КАК ТоварыСпособВводаВОборот,
		|	ТабличнаяЧасть.МаксимальнаяРозничнаяЦена              КАК МаксимальнаяРозничнаяЦена,
		|	ТабличнаяЧасть.Количество                             КАК Количество,
		|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.КоличествоПолучено, 0) КАК КоличествоПолучено,
		|	ТабличнаяЧасть.МаркировкаОстатков                     КАК МаркировкаОстатков
		|ИЗ
		|	ТаблицаТовары КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПула КАК ПулКодовМаркировкиСУЗ
		|		ПО ТабличнаяЧасть.Номенклатура      = ПулКодовМаркировкиСУЗ.Номенклатура
		|		И ТабличнаяЧасть.Характеристика     = ПулКодовМаркировкиСУЗ.Характеристика
		|		И ТабличнаяЧасть.СпособВводаВОборот = ПулКодовМаркировкиСУЗ.СпособВводаВОборот
		|		И ТабличнаяЧасть.СрокГодности       = ПулКодовМаркировкиСУЗ.СрокГодности
		|		И ТабличнаяЧасть.Шаблон             = ПулКодовМаркировкиСУЗ.Шаблон
		|		И ТабличнаяЧасть.МаксимальнаяРозничнаяЦена = ПулКодовМаркировкиСУЗ.МаксимальнаяРозничнаяЦена");
	
	СтруктураПоискаСтрокиЗаказа = Новый Структура;
	СтруктураПоискаСтрокиЗаказа.Вставить("GTIN",                ДанныеПула.GTIN);
	СтруктураПоискаСтрокиЗаказа.Вставить("ИдентификаторСтроки", ПараметрыЗапроса.ИдентификаторСтрокиЗаказа);
	СтруктураПоискаСтрокиЗаказа.Вставить("Шаблон",              ПараметрыЗапроса.Шаблон);
	
	Запрос.УстановитьПараметр("GTIN",       ДанныеПула.GTIN);
	Запрос.УстановитьПараметр("Ссылка",     ЭлементОчереди.Документ);
	Запрос.УстановитьПараметр("НачалоGTIN", ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков());
	Запрос.УстановитьПараметр(
		"ПустаяНоменклатура",
		ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр(
		"ПустаяХарактеристика",
		ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	МассивПолейИндекса = Новый Массив();
	Для Каждого КлючИЗначение Из СтруктураПоискаСтрокиЗаказа Цикл
		МассивПолейИндекса.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	Товары.Индексы.Добавить(СтрСоединить(МассивПолейИндекса, ","));
	
	СтрокиЗаказа = Товары.НайтиСтроки(СтруктураПоискаСтрокиЗаказа);
	Если СтрокиЗаказа.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка:
		                             |При загрузке кодов маркировки не найдена исходная строка заказа на эмиссию'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаОбменаСУЗ.ПолучатьКодовЗаИтерацию) Тогда
		МаксимальноеКоличествоКодовМаркировкиЗагружаемыхИзПула = НастройкаОбменаСУЗ.ПолучатьКодовЗаИтерацию;
	Иначе
		МаксимальноеКоличествоКодовМаркировкиЗагружаемыхИзПула = 1000;
	КонецЕсли;
	
	Если МаксимальноеКоличествоКодовМаркировкиЗагружаемыхИзПула > ДанныеПула.Остаток Тогда
		КоличествоЗагружаемыхКодов = ДанныеПула.Остаток;
	Иначе
		КоличествоЗагружаемыхКодов = МаксимальноеКоличествоКодовМаркировкиЗагружаемыхИзПула;
	КонецЕсли;
	
	Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		РезультатЗапросаКодовМаркировки = ИнтерфейсСУЗ.ЗапроситьКодыМаркировкиИзБизнесЗаказа_V1(
			ПараметрыЗапроса, КоличествоЗагружаемыхКодов,
			НастройкаОбменаСУЗ);
	ИначеЕсли НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
		РезультатЗапросаКодовМаркировки = ИнтерфейсСУЗ.ЗапроситьКодыМаркировкиИзБизнесЗаказа_V2(
			ПараметрыЗапроса, КоличествоЗагружаемыхКодов, ЭлементОчереди.ИдентификаторПоследнегоБлокаКодов,
			ЭлементОчереди, НастройкаОбменаСУЗ);
		Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаКодовМаркировки, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат РезультатЗапросаКодовМаркировки;
		КонецЕсли;
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Формат обмена %1 не поддерживается'"),
			ЭлементОчереди.ФорматОбмена);
	КонецЕсли;
	
	Если РезультатЗапросаКодовМаркировки.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается Тогда
		ЭлементОчередиДляЗаписиПротоколаОбмена = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		Если ЭлементОчередиДляЗаписиПротоколаОбмена <> Неопределено Тогда
			ДобавитьВПротоколОбмена(
				ЭлементОчередиДляЗаписиПротоколаОбмена,
				РезультатЗапросаКодовМаркировки);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатЗапросаКодовМаркировки.ДанныеБлока <> Неопределено Тогда
		
		НаборЗаписейПулКодовМаркировкиСУЗ = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
		НаборЗаписейПулКодовМаркировкиСУЗ.Отбор.ЗаказНаЭмиссию.Установить(ЭлементОчереди.Документ, Истина);
		НаборЗаписейПулКодовМаркировкиСУЗ.Отбор.ДокументОснование.Установить(ЭлементОчереди.ДокументОснование, Истина);
		
		СтрокаЗаказаНаЭмиссию = СтрокиЗаказа.Получить(0);
		
		КэшРазбораКодаМаркировки = Неопределено;
		
		ДатаЭмиссииУниверсальная = ТекущаяУниверсальнаяДата();
		Для Каждого ЗначениеШтрихкода Из РезультатЗапросаКодовМаркировки.ДанныеБлока.КодыМаркировки Цикл
			
			Если СтрокаЗаказаНаЭмиссию.Количество >= СтрокаЗаказаНаЭмиссию.КоличествоПолучено
				И Не ЗначениеЗаполнено(СтруктураПоискаСтрокиЗаказа.ИдентификаторСтроки) Тогда
				СтрокаЗаказаНаЭмиссию = Неопределено;
				Для Каждого СтрокаЗаказаПоиск Из СтрокиЗаказа Цикл
					Если СтрокаЗаказаПоиск.Количество > СтрокаЗаказаПоиск.КоличествоПолучено Тогда
						СтрокаЗаказаНаЭмиссию = СтрокаЗаказаПоиск;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаЗаказаНаЭмиссию = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Внутренняя ошибка:
				                             |Не найдена строка для распределения полученных КМ.'");
			КонецЕсли;
			
			РезультатРазбора = РазобратьКодМаркировкиДляБизнесЗаказа(
				ЗначениеШтрихкода,
				СтрокаЗаказаНаЭмиссию,
				КэшРазбораКодаМаркировки);
			
			ЗаписьНабора = НаборЗаписейПулКодовМаркировкиСУЗ.Добавить();
			// Измерения
			ЗаписьНабора.ЗаказНаЭмиссию    = ЭлементОчереди.Документ;
			ЗаписьНабора.ДокументОснование = ЭлементОчереди.ДокументОснование;
			
			ЗаписьНабора.КодМаркировки = РезультатРазбора.НормализованныйКодМаркировки;
			ЗаписьНабора.ТипШтрихкода  = РезультатРазбора.ТипШтрихкода;
			
			// Ресурсы
			ЗаписьНабора.Статус                    = Перечисления.СтатусыКодовМаркировкиСУЗ.Сгенерирован;
			// Реквизиты
			ЗаписьНабора.Организация               = ЭлементОчереди.Организация;
			ЗаписьНабора.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
			
			ЗаписьНабора.Номенклатура              = СтрокаЗаказаНаЭмиссию.Номенклатура;
			ЗаписьНабора.Характеристика            = СтрокаЗаказаНаЭмиссию.Характеристика;
			
			ЗаписьНабора.ПолныйКодМаркировки       = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ЗначениеШтрихкода);
			ЗаписьНабора.GTIN                      = ДанныеПула.GTIN;
			ЗаписьНабора.ВидПродукции              = СтрокаЗаказаНаЭмиссию.ВидПродукции;
			Если СтрокаЗаказаНаЭмиссию.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
				ЗаписьНабора.МаксимальнаяРозничнаяЦена = СтрокаЗаказаНаЭмиссию.МаксимальнаяРозничнаяЦена;
			ИначеЕсли СтрокаЗаказаНаЭмиссию.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
				ЗаписьНабора.СрокГодности = РезультатРазбора.СрокГодности;
			КонецЕсли;
			
			СпособВводаВОборот = Неопределено;
			Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаЗаказаНаЭмиссию.ВидПродукции) Тогда
				СпособВводаВОборот = СтрокаЗаказаНаЭмиссию.СпособВводаВОборот;
			КонецЕсли;
			
			ЗаписьНабора.СпособВводаВОборот        = СпособВводаВОборот;
			ЗаписьНабора.Шаблон                    = СтрокаЗаказаНаЭмиссию.Шаблон;
			ЗаписьНабора.ДатаЭмиссииУниверсальная  = ДатаЭмиссииУниверсальная;
			ЗаписьНабора.ХешСуммаКодаМаркировки    = ИнтеграцияИС.ХешированиеДанныхSHA256(ЗаписьНабора.КодМаркировки);
			ЗаписьНабора.МаркировкаОстатков        = СтрокаЗаказаНаЭмиссию.МаркировкаОстатков;
			
			ЗаписьНабора.ИдентификаторБлокаСУЗ     = РезультатЗапросаКодовМаркировки.ДанныеБлока.ИдентификаторПоследнегоБлокаКодов;
			ЗаписьНабора.ИдентификаторЗаказаСУЗ    = ПараметрыЗапроса.ИдентификаторБизнесЗаказа;
			
			СтрокаЗаказаНаЭмиссию.КоличествоПолучено = СтрокаЗаказаНаЭмиссию.КоличествоПолучено + 1;
			
		КонецЦикла;
		
		НаборЗаписейПулКодовМаркировкиСУЗ.Записать(Ложь);
		
	КонецЕсли;
	
	Возврат РезультатЗапросаКодовМаркировки;
	
КонецФункции

Функция ЗапроситьСтатусПулаКодовМаркировкиПоСтрокеЗаказаИПолучитьКоды(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	РезультатОбработкиПула = Новый Структура;
	РезультатОбработкиПула.Вставить("ОбработкаПулаЗавершена");
	РезультатОбработкиПула.Вставить("ИдентификаторПоследнегоБлокаКодов");
	РезультатОбработкиПула.Вставить("ОбновитьИдентификаторЗаявкиСообщенияОчереди", Ложь);
	РезультатОбработкиПула.Вставить("ТребуетсяОбновлениеКлючаСессии",              Ложь);
	
	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		Результат = ИнтерфейсСУЗ.СтатусПулаКодовМаркировкиИзБизнесЗаказа_V1(
			ПараметрыЗапроса,
			НастройкаОбменаСУЗ);
	ИначеЕсли НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
		Результат = ИнтерфейсСУЗ.СтатусПулаКодовМаркировкиИзБизнесЗаказа_V2(
			ПараметрыЗапроса, ЭлементОчереди.ВидПродукции,
			НастройкаОбменаСУЗ);
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Формат обмена %1 не поддерживается'"),
			ЭлементОчереди.ФорматОбмена);
	КонецЕсли;
	
	ДанныеПула = Результат.ДанныеПула;
	
	Если ДанныеПула <> Неопределено Тогда
		
		ЭлементОчередиСообщенияОснования = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		
		ДобавлятьЗаписьВПротоколОбмена = Истина;
		Если ЭлементОчередиСообщенияОснования <> Неопределено Тогда
			КоличествоСтрокПротоколаОбмена = ЭлементОчередиСообщенияОснования.ПротоколОбмена.Количество();
			Если КоличествоСтрокПротоколаОбмена > 0 Тогда
				ПоследняяЗаписьПротокола = ЭлементОчередиСообщенияОснования.ПротоколОбмена[КоличествоСтрокПротоколаОбмена - 1];
				Если ПоследняяЗаписьПротокола.СтатусОбработки = Результат.СтатусОбработки
					И ПоследняяЗаписьПротокола.ОтветТело = Результат.РезультатОтправкиЗапроса.ТекстВходящегоСообщения Тогда
					ДобавлятьЗаписьВПротоколОбмена = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДобавлятьЗаписьВПротоколОбмена = Ложь;
		КонецЕсли;
		
		Если ДобавлятьЗаписьВПротоколОбмена Тогда
			ДобавитьВПротоколОбмена(
				ЭлементОчередиСообщенияОснования,
				Результат);
			РезультатОбработкиПула.ОбновитьИдентификаторЗаявкиСообщенияОчереди = Истина;
		КонецЕсли;
		
		Если ДанныеПула.Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Готов Тогда
			
			РезультатЗапросаКодовМаркировки = ЗапроситьКодыМаркировкиИзБизнесЗаказа(
				ПараметрыЗапроса, ДанныеПула,
				ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
			
			Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаКодовМаркировки, ЭлементОчереди, ПараметрыОбмена) Тогда
				РезультатОбработкиПула.ТребуетсяОбновлениеКлючаСессии = Истина;
				Возврат РезультатОбработкиПула;
			КонецЕсли;
			
			Если РезультатЗапросаКодовМаркировки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается Тогда
				
				// Требуется ожидание
				Если ЭлементОчереди.ТекущийСтатус = ДанныеПула.Статус
					И ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки Тогда
					// Если с момента последнего изменения статуса прошло более 5 минут,
					// то отложим обработку элемента очереди до следующей попытки обмена.
					Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
						И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
						ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
					Иначе
						УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
					КонецЕсли;
				Иначе
					
					ЭлементОчереди.ТекущийСтатус          = ДанныеПула.Статус;
					ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки;
					
					Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
						ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
					КонецЕсли;
					
				КонецЕсли;
				
				РезультатОбработкиПула.ОбработкаПулаЗавершена = Ложь;
				
			Иначе
				
				Если ЗначениеЗаполнено(РезультатЗапросаКодовМаркировки.ТекстОшибки) Тогда
					ВызватьИсключение РезультатЗапросаКодовМаркировки.ТекстОшибки;
				Иначе
					РезультатОбработкиПула.ОбработкаПулаЗавершена = (ДанныеПула.Остаток - РезультатЗапросаКодовМаркировки.ДанныеБлока.КодыМаркировки.Количество()) <= 0;
					РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов = РезультатЗапросаКодовМаркировки.ДанныеБлока.ИдентификаторПоследнегоБлокаКодов;
				КонецЕсли;
				
				ЭлементОчереди.ТекущийСтатус          = ДанныеПула.Статус;
				ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки;
				
				Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
					ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ДанныеПула.Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Обрабатывается Тогда
			
			// Требуется ожидание
			Если ЭлементОчереди.ТекущийСтатус = ДанныеПула.Статус
				И ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки Тогда
				// Если с момента последнего изменения статуса прошло более 5 минут,
				// то отложим обработку элемента очереди до следующей попытки обмена.
				Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
					И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
					ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
				Иначе
					УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
				КонецЕсли;
			Иначе
				
				ЭлементОчереди.ТекущийСтатус          = ДанныеПула.Статус;
				ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки;
				
				Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
					ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
				КонецЕсли;
				
			КонецЕсли;
			
			РезультатОбработкиПула.ОбработкаПулаЗавершена = Ложь;
			
		ИначеЕсли ДанныеПула.Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Закрыт Тогда
			
			// Элемент очереди отработан
			РезультатОбработкиПула.ОбработкаПулаЗавершена = Истина;
			
			ЭлементОчереди.ТекущийСтатус          = ДанныеПула.Статус;
			ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки;
			
			Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
				ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			КонецЕсли;
			
		ИначеЕсли ДанныеПула.Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Ошибка
			Или ДанныеПула.Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Отклонен Тогда
			
			// Элемент очереди отработан
			РезультатОбработкиПула.ОбработкаПулаЗавершена = Истина;
			
			ЭлементОчереди.ТекущийСтатус          = ДанныеПула.Статус;
			ЭлементОчереди.ТекущийСтатусОбработки = Результат.СтатусОбработки;
			
			Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
				ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Результат.РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
		
		// Элемент очереди отработан
		РезультатОбработкиПула.ОбработкаПулаЗавершена = Истина;
		
	ИначеЕсли Результат.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
		
		// Подзаказ утерян
		РезультатОбработкиПула.ОбработкаПулаЗавершена = Истина;
		ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Подзаказ %1 не найден в ГИС МТ.'"),
			ПараметрыЗапроса.ИдентификаторБизнесЗаказа);
			
		Результат.ТекстОшибки = ТекстОшибки + Символы.ПС + Результат.ТекстОшибки;
		
		ЭлементОчередиСообщенияОснования = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		Если ЭлементОчередиСообщенияОснования <> Неопределено Тогда
			ДобавитьВПротоколОбмена(
				ЭлементОчередиСообщенияОснования,
				Результат);
		КонецЕсли;
		
		ЭлементОчереди.ТекущийСтатус          = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Ошибка;
		ЭлементОчереди.ТекущийСтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
	
	Иначе
		
		ВызватьИсключение Результат.ТекстОшибки;
		
	КонецЕсли;
	
	Возврат РезультатОбработкиПула;
	
КонецФункции

Процедура ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировкиИСМП(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировки");
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМП.СтатусОбработкиЗаказаКодовМаркировкиПоИдентификатору(
		ЭлементОчереди.ИдентификаторЗаявки, ЭлементОчереди.Организация);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = Ложь;
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния    = 408       // Таймаут
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 500       // Ошибки сервера
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 502       // Bad Gateway
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 503       // Сервер недоступен
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 504       // Gateway Timeout
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 403       // Ошибка авторизации
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 429 Тогда // Слишком много запросов
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ЗапросОтправлен
		Или Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ОтветПолучен Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	// Ошибка валидации. Один или несколько запрошенных ID заказов не найдены.
	// Способ обхода: повтор запроса.
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	// Ошибка валидации. Один или несколько запрошенных ID заказов не найдены.
	// Способ обхода: повтор запроса.
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект,
		"error_code")
		И РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект.error_code = 412102 Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	СтатусыЗаказов = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП;
	Если ЭлементОчереди.ТекущийСтатус = РезультатОбработкиЗаявки.Статус
		И ЭлементОчереди.ТекущийСтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		ИначеЕсли РезультатОбработкиЗаявки.Статус = СтатусыЗаказов.ИСМПНаРассмотренииОператором
			Или РезультатОбработкиЗаявки.Статус = СтатусыЗаказов.КОплате Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		ПолноеИмя = ЭлементОчереди.Документ.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			РезультатОбработкиЗаявки.Операция,
			ПараметрыОбновленияСтатуса);
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
			РезультатОбработкиЗаявки);
	
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
		КонецЕсли;
		
		Если РезультатОбработкиЗаявки.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКПроизводству
			Или РезультатОбработкиЗаявки.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично Тогда
			
			ТребуетсяЗапроситьКоды = Истина;
			Если РезультатОбработкиЗаявки.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично Тогда
				Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК КодМаркировки
				|ИЗ
				|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
				|ГДЕ
				|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &ЗаказНаЭмиссию");
				Запрос.УстановитьПараметр("ЗаказНаЭмиссию", ЭлементОчереди.Документ);
				ТребуетсяЗапроситьКоды = Не Запрос.Выполнить().Пустой();
			КонецЕсли;
			
			Объект = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект;
			Если Объект <> Неопределено И ТребуетсяЗапроситьКоды Тогда
				
				ЗагружатьДо = ЭлементОчереди.Сообщение;
				
				document_information = Объект.document_information;
				Для Каждого ЭлементДанных Из document_information.products_information Цикл
					
					ПараметрыЗапроса = Новый Структура;
					ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа", ЭлементОчереди.ИдентификаторЗаявки);
					ПараметрыЗапроса.Вставить("ИдентификаторСтрокиЗаказа", ЭлементДанных.order_line_id);
					ПараметрыЗапроса.Вставить("GTIN",                      ЭлементДанных.gtin);
					
					НовыйЭлементОчереди = ПодготовитьОчередьЗагрузкиКодовМаркировкиПоЗаказуНаЭмиссию(
						ПараметрыЗапроса,
						ЭлементОчереди, ЗагружатьДо, ПараметрыОбмена, НастройкаОбменаСУЗ);
					
					Если НовыйЭлементОчереди <> Неопределено Тогда
						
						// Коды маркировки загружаются строго последовательно.
						ЗагружатьДо = НовыйЭлементОчереди.Сообщение;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаРезультата = СтруктураИзменения();
		СтрокаРезультата.Организация               = ЭлементОчереди.Организация;
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен     = Ложь;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена) Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура УстановитьДатуСледующейИтерации(ЭлементОчереди, Инкремент = 1)
	
	Если Инкремент > 0 Тогда
		ЭлементОчереди.КоличествоИтераций = ЭлементОчереди.КоличествоИтераций + Инкремент;
	Иначе
		ЭлементОчереди.КоличествоИтераций = 1;
	КонецЕсли;
	
	ЭлементОчереди.ДатаСледующейИтерации = ТекущаяДатаСеанса() + ВремяОжидания(ЭлементОчереди.КоличествоИтераций);
	
КонецПроцедуры

Процедура ЗагрузитьКодыМаркировки(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьКодыМаркировки");
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	РезультатОбработкиПула = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.СообщениеОснование;
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
		НаборЗаписейОснования.Прочитать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписейОснования.Выбран()
			Или Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		РезультатОбработкиПула = ЗапроситьСтатусПулаКодовМаркировкиПоСтрокеЗаказаИПолучитьКоды(
			ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
		
		Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиПула, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		Если РезультатОбработкиПула.ОбновитьИдентификаторЗаявкиСообщенияОчереди
			И ЭлементОчередиОснование <> Неопределено Тогда
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписейОснования,,,
				Новый ХранилищеЗначения(ЭлементОчередиОснование.ПротоколОбмена));
		КонецЕсли;
		
		ОбновитьИдентификаторЗаявкиСообщенияОчереди(
			НаборЗаписей,,,,
			РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов);
		
		Если РезультатОбработкиПула.ОбработкаПулаЗавершена Тогда
			
			Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
				
				Если ЭлементОчереди.ТекущийСтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
					
					ПараметрыЗапроса = Новый Структура;
					ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ИдентификаторБизнесЗаказа);
					ПараметрыЗапроса.Вставить("ИдентификаторСтрокиЗаказа",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ИдентификаторСтрокиЗаказа);
					ПараметрыЗапроса.Вставить("GTIN",                              ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.GTIN);
					ПараметрыЗапроса.Вставить("Шаблон",                            ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Шаблон);
					ПараметрыЗапроса.Вставить("ИдентификаторПоследнегоБлокаКодов", РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов);
					ПараметрыЗапроса.Вставить("ДанныеПовторногоПолучения",         Неопределено);
					
					РезультатДанныхПовтороногоПолучения = ДанныеПовторногоПолученияКодов(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
					Если ТребуетсяОбновлениеКлючаСессии(РезультатДанныхПовтороногоПолучения, ЭлементОчереди, ПараметрыОбмена) Тогда
						Возврат;
					КонецЕсли;
					
					ПараметрыЗапроса.ДанныеПовторногоПолучения = РезультатДанныхПовтороногоПолучения.Данные;
					
					Если ЭлементОчередиОснование = Неопределено Тогда
						ЭлементОчередиКПередаче            = ЭлементОчереди;
						ЭлементОчередиКПередачеЗагружатьДо = "";
					Иначе
						ЭлементОчередиКПередаче            = ЭлементОчередиОснование;
						ЭлементОчередиКПередачеЗагружатьДо = ЭлементОчередиОснование.Сообщение;
					КонецЕсли;
					
					ПодготовитьКПередачеСообщениеНаЗакрытиеПодзаказаНаЭмиссиюКодовМаркировки(
						ЭлементОчередиКПередаче, ЭлементОчередиКПередачеЗагружатьДо, ПараметрыЗапроса, ПараметрыОбмена, НастройкаОбменаСУЗ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		КонецЕсли;
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			"");
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если (РезультатОбработкиПула <> Неопределено
		И РезультатОбработкиПула.ОбработкаПулаЗавершена)
		И ТранзакцияЗафиксирована Тогда
		
		ЭлементОчереди.ИдентификаторПоследнегоБлокаКодов = РезультатОбработкиПула.ИдентификаторПоследнегоБлокаКодов;
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ЗагрузитьКодыМаркировкиПовторно(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьКодыМаркировкиПовторно");
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.СообщениеОснование;
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
		НаборЗаписейОснования.Прочитать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписейОснования.Выбран()
			Или Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		Для Каждого СтрокаПовторногоПолучения Из ПараметрыЗапроса.ДанныеПовторногоПолучения Цикл
		
			ДанныеПулаПовторно = Новый Структура();
			ДанныеПулаПовторно.Вставить("GTIN",    ПараметрыЗапроса.GTIN);
			ДанныеПулаПовторно.Вставить("Остаток", СтрокаПовторногоПолучения.Количество);
			
			ЭлементОчереди.ИдентификаторПоследнегоБлокаКодов = СтрокаПовторногоПолучения.ИдентификаторБлока;
			
			РезультатЗапросаКодовМаркировки = ЗапроситьКодыМаркировкиИзБизнесЗаказа(
				ПараметрыЗапроса, ДанныеПулаПовторно,
				ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
			
			Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаКодовМаркировки, ЭлементОчереди, ПараметрыОбмена) Тогда
				Возврат;
			КонецЕсли;
			
			ДанныеОбработаны = Истина;
			
			Если РезультатЗапросаКодовМаркировки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается Тогда
				
				// Требуется ожидание
				Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
					И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
					ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
				Иначе
					УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
				КонецЕсли;
				ЭлементОчереди.ТекущийСтатус = Перечисления.СтатусыДокументовИСМП.Обрабатывается;
			
				ДанныеОбработаны = Ложь;
				
			ИначеЕсли РезультатЗапросаКодовМаркировки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
				
				ЭлементОчереди.ТекущийСтатус                = Перечисления.СтатусыДокументовИСМП.Принят;
				ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
				
			Иначе
				
				ЭлементОчереди.ТекущийСтатус                = Перечисления.СтатусыДокументовИСМП.Ошибка;
				ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
				
			КонецЕсли;
			
			Если ДанныеОбработаны Тогда
				ИндексСтроки = ПараметрыЗапроса.ДанныеПовторногоПолучения.Найти(СтрокаПовторногоПолучения);
				ПараметрыЗапроса.ДанныеПовторногоПолучения.Удалить(ИндексСтроки);
			КонецЕсли;
			
			Прервать;
			
		КонецЦикла;
		
		Если ПараметрыЗапроса.ДанныеПовторногоПолучения.Количество() = 0 Тогда
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		КонецЕсли;
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке кодов маркировки (повторно) по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке кодов маркировки (повторно) по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			"");
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ПараметрыЗапроса.ДанныеПовторногоПолучения.Количество() = 0
		И ТранзакцияЗафиксирована Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Функция ДанныеПовторногоПолученияКодов(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("Данные",                         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ПараметрыЗапросаКодов = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Количество = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапросаКодов, "Количество", 0);
	GTIN       = ПараметрыЗапросаКодов.GTIN;
	
	Если Не ЗначениеЗаполнено(Количество) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ПулКодовМаркировкиСУЗ.КодМаркировки) КАК Количество,
		|	ПулКодовМаркировкиСУЗ.ИдентификаторБлокаСУЗ     КАК ИдентификаторБлока
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию           = &ЗаказНаЭмиссию
		|	И ПулКодовМаркировкиСУЗ.ИдентификаторЗаказаСУЗ = &ИдентификаторЗаказаСУЗ
		|	И ПулКодовМаркировкиСУЗ.GTIN                   = &GTIN
		|СГРУППИРОВАТЬ ПО
		|	ПулКодовМаркировкиСУЗ.ИдентификаторБлокаСУЗ";
	
	Запрос.УстановитьПараметр("GTIN",                   GTIN);
	Запрос.УстановитьПараметр("ИдентификаторЗаказаСУЗ", ПараметрыЗапросаКодов.ИдентификаторБизнесЗаказа);
	Запрос.УстановитьПараметр("ЗаказНаЭмиссию",         ЭлементОчереди.Документ);
	
	ТаблицаБлоков = Запрос.Выполнить().Выгрузить();
	ПолученоКодов = ТаблицаБлоков.Итог("Количество");
	
	Если ПолученоКодов >= Количество Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатЗапроса = ИнтерфейсСУЗ.ЗапроситьСписокИдентификаторовПакетовБизнесЗаказа_V2(
		ПараметрыЗапросаКодов, ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ);
	
	Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если РезультатЗапроса.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ДанныеПовторногоПолучения = Новый Массив();
	
	Для Каждого СтрокаРезультат Из РезультатЗапроса.ДанныеБлоков Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ИдентификаторБлока", СтрокаРезультат.ИдентификаторБлока);
		
		ПоискБлоков = ТаблицаБлоков.НайтиСтроки(СтруктураПоиска);
		
		Если ПоискБлоков.Количество() = 0 Тогда
			ДанныеПовторногоПолучения.Добавить(СтрокаРезультат);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеПовторногоПолучения.Количество() <> 0 Тогда
		ВозвращаемоеЗначение.Данные = ДанныеПовторногоПолучения
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗагрузитьРезультатОбработкиАгрегацииПриемкиОтгрузкиТоваров(ЭлементОчереди, ПараметрыОбмена)
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатАгрегации";
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование Тогда
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОтгрузкиТоваровИСМП";
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКУдаление Тогда
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатУдаленияАТК";
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКИзменение Тогда
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультаИзмененияАТК";
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание Тогда
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатСозданияАТК";
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатВводВОборотИмпортСФТС";
	Иначе
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатПриемкиТоваровИСМП";
	КонецЕсли;
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМП.СтатусОбработкиДокументаПоИдентификатору(
		ЭлементОчереди.ИдентификаторЗаявки,
		ЭлементОчереди.Организация, ЭлементОчереди.ВидПродукции);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = Ложь;
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния    = 408       // Таймаут
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 500       // Ошибки сервера
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 502       // Bad Gateway
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 503       // Сервер недоступен
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 504       // Gateway Timeout
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 403       // Ошибка авторизации
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 429 Тогда // Слишком много запросов
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ЗапросОтправлен
		Или Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ОтветПолучен Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	// Ошибка валидации. Один или несколько запрошенных ID заказов не найдены.
	// Способ обхода: повтор запроса.
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если ЭлементОчереди.ТекущийСтатус = РезультатОбработкиЗаявки.Статус
		И ЭлементОчереди.ТекущийСтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ЭлементОчередиАбстрактнаяАгрегация = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчередиАбстрактнаяАгрегация.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиАбстрактнаяАгрегация, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиАбстрактнаяАгрегация,
			РезультатОбработкиЗаявки);
			
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ
			Тогда
			
			МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			
			ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.Статус            = Неопределено;
			ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
			ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
			ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
			
			ЕстьЗависимыеСообщения = Ложь;
			Для Каждого ЭлементОчередиКУдалению Из ПараметрыОбмена.ОчередьСообщений Цикл
				Если ЭлементОчередиКУдалению.Сообщение <> ЭлементОчереди.Сообщение
					И ЭлементОчередиКУдалению.СообщениеОснование = ЭлементОчереди.СообщениеОснование Тогда
					ЕстьЗависимыеСообщения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ПараметрыОбновленияСтатуса.Вставить("ЕстьЗависимыеСообщения", ЕстьЗависимыеСообщения);
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ЭлементОчереди.Документ,
				Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
				ПараметрыОбновленияСтатуса);
			
			Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
				ОбработкаЗагрузкиПереданногоДокумента(
					ЭлементОчереди,
					ПараметрыОбмена,
					РезультатОбработкиЗаявки,
					ПараметрыОбновленияСтатуса);
			КонецЕсли;
			
			Если РезультатОбработкиЗаявки.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
				СтрокаРезультата = СтруктураИзменения();
				СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
				СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
				СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
				
				СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
				СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
				СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
				
				СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
				СтрокаРезультата.ПодготовленоКПередаче = Ложь;
				СтрокаРезультата.Передано              = Ложь;
				СтрокаРезультата.Принято               = Истина;
				СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
				СтрокаРезультата.ОбъектИзменен         = Ложь;
				
				СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
				СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
				СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
				
				ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			КонецЕсли;
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		КонецЕсли;
		
		ОбновитьИдентификаторЗаявкиСообщенияОчереди(
			НаборЗаписей,,,
			Новый ХранилищеЗначения(ЭлементОчередиАбстрактнаяАгрегация.ПротоколОбмена));
			
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена) Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ЗагрузитьВходящиеДокументы(ЭлементОчереди, ПараметрыОбмена)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьВходящиеДокументы");
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТипИСМП = "ЗагрузитьВходящиеДокументы";
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		// Загрузка входящих документов в ИБ
		ПараметрыЗагрузки = Новый Структура;
		Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("НачалоПериода")
			Или ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("КонецПериода") Тогда
			ПараметрыЗагрузки.Вставить("НачалоПериода", ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.НачалоПериода);
			ПараметрыЗагрузки.Вставить("КонецПериода",  ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.КонецПериода);
		КонецЕсли;
		
		Результат = ЗагрузитьДокументы(ЭлементОчереди, ПараметрыОбмена, ПараметрыЗагрузки);
		
		Если ТребуетсяОбновлениеКлючаСессии(Результат, ЭлементОчереди, ПараметрыОбмена)
			Или ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = Результат.ТекстОшибки;
			ТранзакцияЗафиксирована = Ложь;
			
		Иначе
			
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
			
			ТранзакцияЗафиксирована = Истина;
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке входящих документов возникла ошибка:
			           |Текст ошибки: %1
			           |Организация: %2
			           |Текст JSON см. в журнале регистрации.'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке входящих документов возникла ошибка:
			           |Текст ошибки: %1
			           |Организация: %2'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, Неопределено, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована Тогда
		
		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	Иначе
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

#Область ЗагрузкаДокументовПриемкаТоваровИСМП

// Загрузка входящих документов Приемка товаров из ИС МП.
//
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений).
//  ПараметрыОбмена - Структура - (См. ИнтеграцияИСМП.ПараметрыОбмена).
//  ПараметрыЗагрузки - Структура - параметры отбора для загрузки
//   * НачалоПериода - Дата - дата начала отбора по периоду.
//   * КонецПериода  - Дата - дата окончания отбора по периоду.
// 
// Возвращаемое значение:
//  Структура - См. ИнтерфейсИСМП.НайтиДокументыПоОтбору, ИнтерфейсИСМП.СоставДокументаПоИдентификатору.
Функция ЗагрузитьДокументы(ЭлементОчереди, ПараметрыОбмена, ПараметрыЗагрузки)
	
	РезультатЗапросаДокументов = ВходящиеДокументы(ЭлементОчереди, ПараметрыЗагрузки);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаДокументов, ЭлементОчереди, ПараметрыОбмена)
		Или ЗначениеЗаполнено(РезультатЗапросаДокументов.ТекстОшибки)
		Или РезультатЗапросаДокументов.НайденныеДокументы = Неопределено Тогда
		Возврат РезультатЗапросаДокументов;
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДоступныеДокументы.Идентификатор Как Идентификатор
	|ПОМЕСТИТЬ втДоступныеДокументы
	|ИЗ
	|	&ДоступныеДокументы как ДоступныеДокументы
	|ИНДЕКСИРОВАТЬ ПО 
	|	ДоступныеДокументы.Идентификатор");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	втДоступныеДокументы.Идентификатор
	|ИЗ
	|	втДоступныеДокументы КАК втДоступныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП
	|		ПО втДоступныеДокументы.Идентификатор = ПриемкаТоваровИСМП.НомерЗаявкиНаОтгрузку
	|		И НЕ ПриемкаТоваровИСМП.ПометкаУдаления
	|ГДЕ
	|	ПриемкаТоваровИСМП.Ссылка ЕСТЬ NULL",
	"ДокументыДляЗагрузки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоступныеДокументы", РезультатЗапросаДокументов.ДоступныеДокументы);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	ДокументыДляЗагрузки = РезультатЗапроса["ДокументыДляЗагрузки"].Выгрузить();
	
	Если ДокументыДляЗагрузки.Количество() = 0 Тогда
		Возврат РезультатЗапросаДокументов;
	КонецЕсли;
	
	Для Каждого ИдентификаторДокумента Из ДокументыДляЗагрузки Цикл
		
		ЭлементОчередиДляЗагрузкиДокумента = Новый Структура;
		ЭлементОчередиДляЗагрузкиДокумента.Вставить("ПротоколОбмена");
		ЭлементОчередиДляЗагрузкиДокумента.Вставить("СообщениеОснование");
		ЭлементОчередиДляЗагрузкиДокумента.Вставить("Операция",     Перечисления.ВидыОперацийИСМП.ЗагрузкаВходящихДокументов);
		ЭлементОчередиДляЗагрузкиДокумента.Вставить("Организация",  ЭлементОчереди.Организация);
		ЭлементОчередиДляЗагрузкиДокумента.Вставить("ВидПродукции", ЭлементОчереди.ВидПродукции);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КоличествоЗаписей", 300);
		ПараметрыОтбора.Вставить("Идентификатор",     ИдентификаторДокумента.Идентификатор);
		
		СтруктураОбработкиДокумента = СоставДокументаПоИдентификатору(ЭлементОчередиДляЗагрузкиДокумента, ПараметрыОтбора);
		
		Если ЗначениеЗаполнено(СтруктураОбработкиДокумента.ТекстОшибки)
			Или СтруктураОбработкиДокумента.ТребуетсяОбновлениеКлючаСессии
			Или СтруктураОбработкиДокумента.ДанныеДокумента = Неопределено Тогда
			
			Возврат СтруктураОбработкиДокумента;
			
		КонецЕсли;
		
		СоставДокумента = СтруктураОбработкиДокумента.СоставДокумента;
		Если СоставДокумента.Количество() > 0 Тогда
			
			РезультатПроверкиТоварнойГруппы = Неопределено;
			ПроверитьВидПродукцииДокументаПоДаннымСервиса(
				СоставДокумента, 
				ЭлементОчереди.Организация,
				ЭлементОчереди.ВидПродукции,
				РезультатПроверкиТоварнойГруппы);
			
			Если РезультатПроверкиТоварнойГруппы <> Неопределено Тогда
					
				Если РезультатПроверкиТоварнойГруппы.Свойство("РазличныеТоварныеГруппы") Тогда
					Продолжить;
				КонецЕсли;
				СтрокаРезультата = СтруктураИзменения();
				
				СтрокаРезультата.Операция          = ЭлементОчереди.Операция;
				СтрокаРезультата.Назначение        = ЭлементОчереди.Назначение;
				СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
				СтрокаРезультата.Объект            = Неопределено;
				СтрокаРезультата.ДокументОснование = Неопределено;
				
				СтрокаРезультата.ТекстОшибки           = РезультатПроверкиТоварнойГруппы.ТекстОшибки;
				СтрокаРезультата.ПодготовленоКПередаче = Ложь;
				СтрокаРезультата.Передано              = Ложь;
				СтрокаРезультата.Принято               = Истина;
				СтрокаРезультата.НовыйСтатус           = Неопределено;
				СтрокаРезультата.ОбъектИзменен         = Ложь;
				
				СтрокаРезультата.Сообщение             = ЭлементОчереди.Сообщение;
				СтрокаРезультата.ТекстСообщения        = "";
				
				ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = Документы.ПриемкаТоваровИСМП.СоздатьДокумент();
			ДокументОбъект.Организация  = ЭлементОчереди.Организация;
			ДокументОбъект.ВидПродукции = ЭлементОчереди.ВидПродукции;
			
			ТелоДокумента = СтруктураОбработкиДокумента.ДанныеДокумента.body;
			ВыводИзОборота = Ложь;
			ВидБезвозмезднойОперации = Неопределено;
			Если ТелоДокумента.Свойство("withdrawal_from_turnover", ВыводИзОборота) и ВыводИзОборота Тогда
				ВидБезвозмезднойОперации = ТелоДокумента.withdrawal_type;
			КонецЕсли;
			
			ИННОтправителя = ТелоДокумента.sender_inn;
			Если ТелоДокумента.Свойство("turnover_type") Тогда
				ДокументОбъект.Операция = ВидОперацииПриемкаТоваров(ТелоДокумента.turnover_type, ВидБезвозмезднойОперации);
			ИначеЕсли СтруктураОбработкиДокумента.ДанныеДокумента.Свойство("type")
				И СтруктураОбработкиДокумента.ДанныеДокумента.type = "LP_SHIP_GOODS_CROSSBORDER" Тогда
				ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля;
				Если СтруктураОбработкиДокумента.ДанныеДокумента.Свойство("exporter_taxpayer_id") Тогда
					ИННОтправителя = ТелоДокумента.exporter_taxpayer_id;
				КонецЕсли;
			КонецЕсли;
			
			ДокументОбъект.НомерПервичногоДокумента = ТелоДокумента.document_num;
			Если ЗначениеЗаполнено(ТелоДокумента.document_date) Тогда
				ДокументОбъект.ДатаПервичногоДокумента = ПрочитатьДатуJSON(ТелоДокумента.document_date, ФорматДатыJSON.ISO);
			КонецЕсли;
			
			ДокументОбъект.ИННОтправителя = ИННОтправителя;
			
			Если ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля Тогда
				КонтрагентПоИНН = ИнтеграцияИСМП.КонтрагентПоНалоговомуНомеру(ДокументОбъект.ИННОтправителя);
			Иначе
				КонтрагентПоИНН = ИнтеграцияИСМП.КонтрагентПоИНН(ДокументОбъект.ИННОтправителя);
			КонецЕсли;
			
			Если КонтрагентПоИНН <> Неопределено Тогда
				ДокументОбъект.Контрагент = КонтрагентПоИНН;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТелоДокумента.transfer_date) Тогда
				ДокументОбъект.ДатаОтгрузки = ПрочитатьДатуJSON(ТелоДокумента.transfer_date, ФорматДатыJSON.ISO);
			КонецЕсли;
			
			ДокументОбъект.НомерЗаявкиНаОтгрузку = СтруктураОбработкиДокумента.ДанныеДокумента.number;
			
			ДанныеШтрихкодов = Новый Массив;
			
			Для Каждого СтрокаКодаМаркировки Из СоставДокумента Цикл
				Если СтрокаКодаМаркировки.Свойство("uit_code") Тогда
					ИмяСвойстваКодМаркировки = "uit_code";
				ИначеЕсли СтрокаКодаМаркировки.Свойство("uitu_code") Тогда
					ИмяСвойстваКодМаркировки = "uitu_code";
				Иначе
					Продолжить;
				КонецЕсли;
				
				СтруктураШтрихкодов = Новый Структура;
				СтруктураШтрихкодов.Вставить("Штрихкод", СтрокаКодаМаркировки[ИмяСвойстваКодМаркировки]);
				СтруктураШтрихкодов.Вставить("Количество", 1);
				
				ДанныеШтрихкодов.Добавить(СтруктураШтрихкодов);
				
				СтрокаШтрихкода = ДокументОбъект.ШтрихкодыУпаковок.добавить();
				СтрокаШтрихкода.ЗначениеШтрихкода = СтрокаКодаМаркировки[ИмяСвойстваКодМаркировки];
				
				Если СтрокаКодаМаркировки.Свойство("product_cost") Тогда
					СтрокаШтрихкода.Цена = СтрокаКодаМаркировки.product_cost/100;
				КонецЕсли;
				Если СтрокаКодаМаркировки.Свойство("product_tax") Тогда
					СтрокаШтрихкода.СуммаНДС = СтрокаКодаМаркировки.product_tax/100;
				КонецЕсли;
				Если СтрокаКодаМаркировки.Свойство("count_children") Тогда
					СтрокаШтрихкода.КоличествоУпаковок = СтрокаКодаМаркировки.count_children;
				Иначе
					СтрокаШтрихкода.КоличествоУпаковок = 1;
				КонецЕсли;
				
			КонецЦикла;
			
			РезультатЗапросаВложенныхШтриходов = Неопределено;
			ДополнитьТабличныеЧастиПоДаннымИСМП(ДокументОбъект, ДанныеШтрихкодов, РезультатЗапросаВложенныхШтриходов);
			
			Если РезультатЗапросаВложенныхШтриходов <> Неопределено Тогда
				СтрокаРезультата = СтруктураИзменения();
				
				СтрокаРезультата.Операция          = ЭлементОчереди.Операция;
				СтрокаРезультата.Назначение        = ЭлементОчереди.Назначение;
				СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
				СтрокаРезультата.Объект            = Неопределено;
				СтрокаРезультата.ДокументОснование = Неопределено;
				
				СтрокаРезультата.ТекстОшибки           = РезультатЗапросаВложенныхШтриходов.ТекстОшибки;
				СтрокаРезультата.ПодготовленоКПередаче = Ложь;
				СтрокаРезультата.Передано              = Ложь;
				СтрокаРезультата.Принято               = Истина;
				СтрокаРезультата.НовыйСтатус           = Неопределено;
				СтрокаРезультата.ОбъектИзменен         = Ложь;
				
				СтрокаРезультата.Сообщение             = ЭлементОчереди.Сообщение;
				СтрокаРезультата.ТекстСообщения        = "";
				
				ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
			ДокументОбъект.Записать();
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ДокументОбъект.Ссылка);
			Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.Сообщение);
			Реквизиты.Вставить("Версия",               "1.0");
			Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
			Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята);
			Реквизиты.Вставить("Описание",             "");
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчередиДляЗагрузкиДокумента.ПротоколОбмена);
			ИнтеграцияИСМПСлужебный.ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Назначение",      Перечисления.НазначениеСообщенийИСМП.ИСМП);
			ДополнительныеПараметры.Вставить("СтатусОбработки", Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята);
			ДополнительныеПараметры.Вставить("ВидПродукции",    ЭлементОчереди.ВидПродукции);
			МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДокументОбъект.Ссылка, ЭлементОчереди.Операция, ДополнительныеПараметры);
			
			СтрокаРезультата = СтруктураИзменения();
			
			СтрокаРезультата.Операция          = ЭлементОчереди.Операция;
			СтрокаРезультата.Назначение        = ЭлементОчереди.Назначение;
			СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
			СтрокаРезультата.Объект            = ДокументОбъект.Ссылка;
			СтрокаРезультата.ДокументОснование = Неопределено;
			
			СтрокаРезультата.ТекстОшибки           = СтруктураОбработкиДокумента.ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Ложь;
			СтрокаРезультата.Передано              = Ложь;
			СтрокаРезультата.Принято               = Истина;
			СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
			СтрокаРезультата.ОбъектИзменен         = Истина;
			
			СтрокаРезультата.Сообщение             = ЭлементОчереди.Сообщение;
			СтрокаРезультата.ТекстСообщения        = "";
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураОбработкиДокумента;
	
КонецФункции

//Инициализация таблицы документов для входящих документов из ИС МП
//
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//  * Идентификатор - Строка - Идентификатор документа.
//  * Статус - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа.
Функция ИнициализироватьТаблицуДокументов()
	
	ТаблицаЗагруженныхДокументов = Новый ТаблицаЗначений;
	ТаблицаЗагруженныхДокументов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ТаблицаЗагруженныхДокументов.Колонки.Добавить("Статус",        Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыДокументовИСМП"));
	
	Возврат ТаблицаЗагруженныхДокументов;
	
КонецФункции

// Инициализация таблицы протокола обмена элемента очереди из ИС МП
//
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//  * ДатаУниверсальная - Дата - Дата.
//  * Операция - ПеречислениеСсылка.ВидыОперацийИСМП - вид операции.
//  * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - статус обработки сообщения.
//  * Запрос - Строка - запрос.
//  * ЗапросЗаголовки - Строка - заголовки запроса.
//  * ЗапросТело - Строка - тело запроса.
//  * ОтветЗаголовки - Строка - заголовки ответа.
//  * ОтветТело - Строка - ответ.
//  * КодСостояния - Строка - код состояния запроса.
Функция ИнициализироватьТаблицуПротоколОбмена(ВключитьКодСостояния = Ложь) Экспорт
	
	ПротоколОбмена = Новый ТаблицаЗначений;
	ПротоколОбмена.Колонки.Добавить("ДатаУниверсальная", Новый ОписаниеТипов("Дата"));
	ПротоколОбмена.Колонки.Добавить("Операция",          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийИСМП"));
	ПротоколОбмена.Колонки.Добавить("СтатусОбработки",   Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП"));
	ПротоколОбмена.Колонки.Добавить("Запрос",            Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ЗапросЗаголовки",   Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ЗапросТело",        Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ОтветЗаголовки",    Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ОтветТело",         Новый ОписаниеТипов("Строка"));
	Если ВключитьКодСостояния Тогда
		ПротоколОбмена.Колонки.Добавить("КодСостояния", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Возврат ПротоколОбмена;
	
КонецФункции

// Получает из сервиса ИС МП доступные для загрузки документы со статусом ОжидаетсяПодтверждениеПоступления
//
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений).
//  ПараметрыЗагрузки - Структура - параметры отбора для загрузки.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//  * РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//  * НайденныеДокументы - Массив Из См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеШапкиДокумента.
//                       - Неопределено - Если при получении данных возникла ошибка.
//  * ТекстОшибки        - Строка - Текст сообщения об ошибке.
//  * ПараметрыНавигации - Структура - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигацииПоДокументам).
//                       - Неопределено - Если при получении данных возникла ошибка.
//  * ДоступныеДокументы - ТаблицаЗначений - См. ИнициализироватьТаблицуДокументов.
Функция ВходящиеДокументы(ЭлементОчереди, ПараметрыЗагрузки)
	
	ДоступныеДокументы = ИнициализироватьТаблицуДокументов();
	
	РезультатЗапроса = Новый Структура;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипЗапроса", Перечисления.ТипыЗапросовИС.Входящий);
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.НачалоПериода)
		Или ЗначениеЗаполнено(ПараметрыЗагрузки.КонецПериода) Тогда
		ПараметрыОтбора.Вставить("Интервал",      Истина);
		ПараметрыОтбора.Вставить("НачалоПериода", ПараметрыЗагрузки.НачалоПериода);
		Если ЗначениеЗаполнено(ПараметрыЗагрузки.КонецПериода) Тогда
			ПараметрыОтбора.Вставить("КонецПериода",  КонецДня(ПараметрыЗагрузки.КонецПериода));
		Иначе
			ПараметрыОтбора.Вставить("КонецПериода",  ПараметрыЗагрузки.КонецПериода);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("КоличествоЗаписей", 10);
	ПараметрыОтбора.Вставить(
		"ТипДокумента",
		"LP_SHIP_GOODS_CROSSBORDER,
		|LP_SHIP_GOODS,
		|LP_SHIP_GOODS_CSV,LP_SHIP_GOODS_XML");
	
	ПараметрыНавигации = Неопределено;
	
	Пока ПараметрыНавигации = Неопределено 
		Или ПараметрыНавигации.КоличествоЗаписейОбработано = ПараметрыОтбора.КоличествоЗаписей Цикл
		
		РезультатЗапроса = ИнтерфейсИСМП.НайтиДокументыПоОтбору(
			ЭлементОчереди.Организация, ЭлементОчереди.ВидПродукции,
			ПараметрыОтбора, ПараметрыНавигации);
		
		Если ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки)
			Или РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии
			Или РезультатЗапроса.НайденныеДокументы = Неопределено
			Или РезультатЗапроса.НайденныеДокументы.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого ЭлементМассива Из РезультатЗапроса.НайденныеДокументы Цикл
			Если ЭлементМассива.Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления Тогда
				ЗаполнитьЗначенияСвойств(ДоступныеДокументы.Добавить(), ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	РезультатЗапроса.Вставить("ДоступныеДокументы", ДоступныеДокументы);
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Получает из сервиса ИС МП состав продукции по идентификатору документа
//
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений).
//  ПараметрыОтбора - Структура - параметры отбора для загрузки:
//  * КоличествоЗаписей - Число - Количество считываемых записей.
//  * Идентификатор - Строка - Идентификатор документа.
//  ПараметрыОбработки - Структура, Неопределено - Параметры обработки результата.
// Возвращаемое значение:
//  Структура - Структура со свойствами - См. ИнтерфейсИСМП.СоставДокументаПоИдентификатору.
Функция СоставДокументаПоИдентификатору(ЭлементОчереди, ПараметрыОтбора, ПараметрыОбработки = Неопределено)
	
	Результат = Новый Структура;
	
	ПараметрыНавигации = Неопределено;
	
	Пока ПараметрыНавигации = Неопределено
		Или ПараметрыНавигации.КоличествоЗаписейОбработано = ПараметрыОтбора.КоличествоЗаписей Цикл
		
		РезультатЗапроса = ИнтерфейсИСМП.СоставДокументаПоИдентификатору(
			ЭлементОчереди.Организация, ЭлементОчереди.ВидПродукции,
			ПараметрыОтбора, ПараметрыНавигации, ПараметрыОбработки);
		
		Если РезультатЗапроса.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
			Возврат РезультатЗапроса;
		КонецЕсли;
		
		Если РезультатЗапроса.СоставДокумента = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если ПараметрыНавигации = Неопределено Тогда
			Результат = РезультатЗапроса;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				Результат.СоставДокумента,
				РезультатЗапроса.СоставДокумента);
		КонецЕсли;
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, РезультатЗапроса);
		
		ПараметрыНавигации = РезультатЗапроса.ПараметрыНавигации;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьВидПродукцииДокументаПоДаннымСервиса(СоставДокумента, Организация, ВидПродукции, РезультатЗапроса)
	
	ПакетКодовМаркировки = Новый Массив();
	Для Каждого СтрокаКодаМаркировки Из СоставДокумента Цикл
		
		Если СтрокаКодаМаркировки.Свойство("uit_code") Тогда
			ИмяСвойстваКодМаркировки = "uit_code";
		ИначеЕсли СтрокаКодаМаркировки.Свойство("uitu_code") Тогда
			ИмяСвойстваКодМаркировки = "uitu_code";
		Иначе
			Продолжить;
		КонецЕсли;
		
		ПакетКодовМаркировки.Добавить(СтрокаКодаМаркировки[ИмяСвойстваКодМаркировки]);
		Прервать;
		
	КонецЦикла;
	
	РезультатПолученияДанных = ИнтерфейсИСМП.ТоварнаяГруппаПоКодамИдентификации(ПакетКодовМаркировки, Организация);
	
	Если ЗначениеЗаполнено(РезультатПолученияДанных.ТекстОшибки) Тогда
		РезультатЗапроса = РезультатПолученияДанных;
		Возврат;
	КонецЕсли;
	
	Если РезультатПолученияДанных.ВидПродукции <> ВидПродукции Тогда
		РезультатЗапроса = РезультатПолученияДанных;
		РезультатЗапроса.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Товарная группа сообщения %1 отличается от товарной группы документа %2.
			|Документ пропущен для загрузки'"),
			ВидПродукции,
			РезультатЗапроса.ВидПродукции);
		РезультатЗапроса.Вставить("РазличныеТоварныеГруппы", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

//Выполняет заполнение табличных частей переданного документа по данным ИС МП
//
// Параметры:
//  ДокументПриемка - ДокументОбъект.ПриемкаТоваровИСМП - документ для заполнения.
//  ДанныеШтрихкодов - Массив - Массив из подготовленных структур для получения данных вложенных штрихкодов по данным ИС МП.
Процедура ДополнитьТабличныеЧастиПоДаннымИСМП(ДокументПриемка, ДанныеШтрихкодов, РезультатЗапроса)
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДокументПриемка, Неопределено, ДокументПриемка.ВидПродукции);
	ПараметрыСканирования.ЗапрашиватьСтатусыИСМП = Ложь;
	
	РезультатПолученияДанных = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыПоДаннымИСМП(
		ДанныеШтрихкодов, ПараметрыСканирования);
	
	Если РезультатПолученияДанных.ЕстьОшибки Тогда
		РезультатЗапроса = РезультатПолученияДанных;
		Возврат;
	КонецЕсли;
	
	МаркированныеТовары = Новый ТаблицаЗначений();
	МаркированныеТовары = РезультатПолученияДанных.ВложенныеШтрихкоды.МаркированныеТовары.Скопировать(,
		"GTIN, Номенклатура, Характеристика, Серия, КоличествоВложенныхЕдиниц");
	МаркированныеТовары.Свернуть(
		"GTIN, Номенклатура, Характеристика, Серия",
		"КоличествоВложенныхЕдиниц");
	МаркированныеТовары.Колонки.КоличествоВложенныхЕдиниц.Имя = "КоличествоУпаковок";
	ДокументПриемка.Товары.Загрузить(МаркированныеТовары);
	
	Для Каждого СтрокаТоваров Из ДокументПриемка.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.КоличествоУпаковок;
	КонецЦикла;
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(ДокументПриемка, Документы.ПриемкаТоваровИСМП);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ДокументПриемка, ПараметрыУказанияСерий);
	
	ДанныеУпаковокСКоличеством = ЗаполнитьКоличествоВложенныхЕдиницУпаковок(РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок);
	
	Для Каждого СтрокаУпаковки Из ДокументПриемка.ШтрихкодыУпаковок Цикл
		КоличествоУпаковок = ДанныеУпаковокСКоличеством.Получить(СтрокаУпаковки.ЗначениеШтрихкода);
		Если КоличествоУпаковок <> Неопределено Тогда
			СтрокаУпаковки.КоличествоУпаковок = КоличествоУпаковок;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Заполняет соотвествие штрихкодов упаковок количеством вложенных единиц продукции
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений, СтрокаДереваЗначений - дерево упаковок.
//
// Возвращаемое значение:
//  Соответствие:
//  * Ключ - См. ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП
//  * Значение - Число - Количество вложенных потребительских упаковок
Функция ЗаполнитьКоличествоВложенныхЕдиницУпаковок(ДеревоУпаковок)
	
	СоответствиеУпаковок = Новый Соответствие;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Количество = КоличествоВложенныхПотребительскихУпаковок(СтрокаДерева);
		СоответствиеУпаковок.Вставить(КодМаркировкиДляПередачиИСМП(СтрокаДерева), Количество);
	КонецЦикла;
	
	Возврат СоответствиеУпаковок;
	
КонецФункции

//Выполняет расчет количество вложенных потребительских упаковок в дереве упаковок
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений, СтрокаДереваЗначений - дерево упаковок.
//
// Возвращаемое значение:
//  Число - количество вложенных единиц.
Функция КоличествоВложенныхПотребительскихУпаковок(ДеревоУпаковок)
	
	КоличествоВложенныхЕдиниц = 0;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		КоличествоВложенныхЕдиниц = КоличествоВложенныхЕдиниц + КоличествоВложенныхПотребительскихУпаковок(СтрокаДерева);
	КонецЦикла;
	
	Если ДеревоУпаковок.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат КоличествоВложенныхЕдиниц;
	
КонецФункции

//Преобразовывает тип операции, полученный по данным ИС МП в перечисление для документов Отгрузка товаров ИС МП, Приемка товаров ИС МП
//
// Параметры:
//  ТипОперацииПродажа - Строка - тип операции по данным сервиса.
//  ВидБезвозмезднойОперации - Строка - вид операции по данным сервиса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыОперацийИСМП, Неопределено - вид операции для документа.
Функция ВидОперацииПриемкаТоваров(ТипОперацииПродажа, ВидБезвозмезднойОперации = Неопределено)
	Если ТипОперацииПродажа = "SELLING" Тогда
		Если ВидБезвозмезднойОперации = Неопределено Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПриемкаПродажа;
		ИначеЕсли ВидБезвозмезднойОперации = "DONATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПриемкаБезвозмезднаяПередача;
		ИначеЕсли ВидБезвозмезднойОперации = "STATE_ENTERPRISE" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПриемкаПриобретениеГосПредприятием;
		ИначеЕсли ВидБезвозмезднойОперации = "NO_RETAIL_USE" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПриемкаДляСобственныхНуждПокупателя;
		КонецЕсли;
	ИначеЕсли ТипОперацииПродажа = "COMMISSION" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ПриемкаКомиссия;
	ИначеЕсли ТипОперацииПродажа = "AGENT" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ПриемкаАгент;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

// Дополняет таблицу протокола обмена данными лога запросов.
// 
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений()).
//  СлужебныйПротоколОбмена - См. ИнициализироватьТаблицуПротоколОбмена - таблица протокола заполненная по данным лога.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП -  операция обмена.
// 
// Возвращаемое значение:
//  Строка - представление протокола обмена.
Функция ДополнитьПротоколОбмена(ЭлементОчереди, СлужебныйПротоколОбмена, СтатусОбработки, Операция)
	
	Если ЭлементОчереди.ПротоколОбмена = Неопределено Тогда
		ЭлементОчереди.ПротоколОбмена = ИнициализироватьТаблицуПротоколОбмена();
	КонецЕсли;
	
	МассивСтрокПротокола = Новый Массив;
	Для Каждого ЗаписьПротокола Из СлужебныйПротоколОбмена Цикл
		
		ЗаписьПротокола.СтатусОбработки = СтатусОбработки;
		ЗаписьПротокола.Операция        = Операция;
		
		МассивСтрокПротокола.Добавить(ЗаписьПротокола.Запрос);
		МассивСтрокПротокола.Добавить(ЗаписьПротокола.ЗапросТело);
		МассивСтрокПротокола.Добавить(ЗаписьПротокола.КодСостояния);
		МассивСтрокПротокола.Добавить(ЗаписьПротокола.ОтветТело);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СлужебныйПротоколОбмена, ЭлементОчереди.ПротоколОбмена);
	
	Результат = СтрСоединить(МассивСтрокПротокола, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки)
	
	Если ЭлементОчереди.ПротоколОбмена = Неопределено Тогда
		
		ПротоколОбмена = ИнициализироватьТаблицуПротоколОбмена();
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "Статус") Тогда
			ТипыСтатуса = Новый Массив;
			ТипыСтатуса.Добавить(ТипЗнч(ДанныеОбработки.Статус));
			ПротоколОбмена.Колонки.Добавить("Статус", Новый ОписаниеТипов(ТипыСтатуса));
		КонецЕсли;
		
		ЭлементОчереди.ПротоколОбмена = ПротоколОбмена;
		
	Иначе
		ПротоколОбмена = ЭлементОчереди.ПротоколОбмена;
	КонецЕсли;
	
	ДополнительныеПараметрыHTTP   = ДанныеОбработки.РезультатОтправкиЗапроса.ДополнительныеПараметры;
	ПараметрыОтправкиHTTPЗапросов = ДополнительныеПараметрыHTTP.ПараметрыОтправкиHTTPЗапросов;
	HTTPМетод                     = ДополнительныеПараметрыHTTP.HTTPМетод;
	HTTPЗапрос                    = ДополнительныеПараметрыHTTP.HTTPЗапрос;
	HTTPОтвет                     = ДополнительныеПараметрыHTTP.HTTPОтвет;
	
	ЗапросЗаголовки = Новый Массив;
	Для Каждого КлючИЗначение Из HTTPЗапрос.Заголовки Цикл
		ЗапросЗаголовки.Добавить(
			СтрШаблон("%1: %2", КлючИЗначение.Ключ, КлючИЗначение.Значение));
	КонецЦикла;
	
	ЗаписьПротокола = ПротоколОбмена.Добавить();
	ЗаписьПротокола.ДатаУниверсальная = ТекущаяУниверсальнаяДата();
	ЗаписьПротокола.Операция          = ДанныеОбработки.Операция;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗаписьПротокола, "Статус")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "Статус") Тогда
		ЗаписьПротокола.Статус = ДанныеОбработки.Статус;
	КонецЕсли;
	ЗаписьПротокола.СтатусОбработки   = ДанныеОбработки.СтатусОбработки;
	ЗаписьПротокола.Запрос            = ИнтеграцияИСМП.URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод);
	ЗаписьПротокола.ЗапросЗаголовки   = СтрСоединить(ЗапросЗаголовки, Символы.ПС);
	ЗаписьПротокола.ЗапросТело        = HTTPЗапрос.ПолучитьТелоКакСтроку();
	
	Если (ДанныеОбработки.Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ
		Или ДанныеОбработки.Операция = Перечисления.ВидыОперацийИСМП.ПовторноеПолучениеКодовМаркировкиИзСУЗ)
		И ДанныеОбработки.ДанныеБлока <> Неопределено
		И ДанныеОбработки.ДанныеБлока.КодыМаркировки <> Неопределено Тогда
		
		КоличествоКодовВБлоке = ДанныеОбработки.ДанныеБлока.КодыМаркировки.Количество();
		
		Если КоличествоКодовВБлоке > 1 Тогда
			ПервыйКодМаркировки = СтрШаблон(
				НСтр("ru = '%1... (+ еще %2)'"),
				Лев(ДанныеОбработки.ДанныеБлока.КодыМаркировки[0], 21),
				КоличествоКодовВБлоке - 1);
		Иначе
			ПервыйКодМаркировки = СтрШаблон("%1...", Лев(ДанныеОбработки.ДанныеБлока.КодыМаркировки[0], 21));
		КонецЕсли;
		
		ЗаписьПротокола.ОтветЗаголовки = ЗаголовкиИзHTTPОтвета(HTTPОтвет);
		
		ЗаписьПротокола.ОтветТело = СтрШаблон(
			НСтр("ru = '{
			           |  %1
			           |}
			           |Коды маркировки записаны в пул. Количество: %2
			           |Идентификатор последнего блока кодов: %3'"),
			ПервыйКодМаркировки, КоличествоКодовВБлоке,
			ДанныеОбработки.ДанныеБлока.ИдентификаторПоследнегоБлокаКодов);
		
	ИначеЕсли HTTPОтвет <> Неопределено Тогда
		
		ЗаписьПротокола.ОтветЗаголовки = ЗаголовкиИзHTTPОтвета(HTTPОтвет);
		
		ЗаписьПротокола.ОтветТело = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если ДанныеОбработки.Свойство("ТекстОшибки")
			И Не ЗначениеЗаполнено(ЗаписьПротокола.ОтветТело) Тогда
			ЗаписьПротокола.ОтветТело = ДанныеОбработки.ТекстОшибки;
		КонецЕсли;
			
	Иначе
		ЗаписьПротокола.ОтветТело = ДанныеОбработки.ТекстОшибки;
	КонецЕсли;
	
	ПредставлениеПротоколаОбмена = ИнтеграцияИСМП.ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод)
	                             + ИнтеграцияИСМП.ВывестиHTTPЗапросВЛог(HTTPОтвет,  Неопределено, Неопределено,, ДанныеОбработки.ТекстОшибки);
	
	Возврат ПредставлениеПротоколаОбмена;
	
КонецФункции

//Добавляет в протокол описание ошибки, возникшей при подготовке сообщения JSON к отправке в абстрактной операции
//
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений()).
//  ТекстОшибки - Строка - Описание ошибки при подготовке сообщения.
//  Статус - СтатусыОбработкиПриемкиТоваровИСМП - статус обработки (ошибка передачи)
//
Процедура ДобавитьВПротоколОбменаОписаниеОшибки(ЭлементОчереди, ТекстОшибки, Статус)
	
	Если ЭлементОчереди.ПротоколОбмена = Неопределено Тогда
		ПротоколОбмена = Новый ТаблицаЗначений;
		ПротоколОбмена.Колонки.Добавить("ДатаУниверсальная", Новый ОписаниеТипов("Дата"));
		ПротоколОбмена.Колонки.Добавить("Операция", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийИСМП"));
		ПротоколОбмена.Колонки.Добавить("СтатусОбработки",
			Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП"));
		ПротоколОбмена.Колонки.Добавить("Запрос", Новый ОписаниеТипов("Строка"));
		ПротоколОбмена.Колонки.Добавить("ЗапросЗаголовки", Новый ОписаниеТипов("Строка"));
		ПротоколОбмена.Колонки.Добавить("ЗапросТело", Новый ОписаниеТипов("Строка"));
		ПротоколОбмена.Колонки.Добавить("ОтветЗаголовки", Новый ОписаниеТипов("Строка"));
		ПротоколОбмена.Колонки.Добавить("ОтветТело", Новый ОписаниеТипов("Строка"));
		
		ТипыСтатуса = Новый Массив;
		ТипыСтатуса.Добавить(ТипЗнч(Статус));
		ПротоколОбмена.Колонки.Добавить("Статус", Новый ОписаниеТипов(ТипыСтатуса));
		
		ЭлементОчереди.ПротоколОбмена = ПротоколОбмена;
	Иначе
		ПротоколОбмена = ЭлементОчереди.ПротоколОбмена;
	КонецЕсли;

	ЗаписьПротокола = ПротоколОбмена.Добавить();
	ЗаписьПротокола.ДатаУниверсальная = ТекущаяУниверсальнаяДата();
	ЗаписьПротокола.Операция          = ЭлементОчереди.Операция;
	ЗаписьПротокола.Статус            = Статус;

	ЗаписьПротокола.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
	ЗаписьПротокола.Запрос            = "";
	ЗаписьПротокола.ЗапросЗаголовки   = "";
	ЗаписьПротокола.ЗапросТело        = ТекстОшибки;
	
КонецПроцедуры

Процедура ПередатьСообщениеИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование)
	
	СтанцияУправленияЗаказами = Неопределено;
	ФорматОбмена              = Неопределено;
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
		
		РезультатЗапроса = ИнтерфейсИСМП.ЗапроситьИдентификаторАктивногоСУЗ(ЭлементОчереди.Организация);
		Если РезультатЗапроса.Идентификатор <> Неопределено Тогда
			НастройкаОбменаПоОрганизации = ПараметрыОбмена.НастройкиОбменаСУЗ.ОбменНаСервере.Получить(ЭлементОчереди.Организация);
			Если НастройкаОбменаПоОрганизации <> Неопределено
				И НастройкаОбменаПоОрганизации.Идентификатор = РезультатЗапроса.Идентификатор Тогда
				НастройкаОбменаСУЗ        = НастройкаОбменаПоОрганизации;
				СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
				ФорматОбмена              = НастройкаОбменаСУЗ.ФорматОбмена;
			КонецЕсли;
		КонецЕсли;
		
		Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапроса, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось определить активную станцию управления заказами (СУЗ)
				           |по организации %1 в ИС МП.
				           |Текст ошибки: %2.'"),
				ЭлементОчереди.Организация,
				РезультатЗапроса.ТекстОшибки);
			ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
			Возврат;
		ИначеЕсли СтанцияУправленияЗаказами = Неопределено Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'В сервисе ИС МП по организации %1 активная станция управления заказами (СУЗ) имеет идентификатор %2.
				           |В информационной базе не найдена настройка для подключения к СУЗ с идентификатором %2.'"),
				ЭлементОчереди.Организация,
				РезультатЗапроса.Идентификатор);
			ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	ДанныеОбработки = ИнтерфейсИСМП.СоздатьДокументПоСообщению(
		РеквизитыИсходящегоСообщения.Организация,
		РеквизитыИсходящегоСообщения.Операция,
		РеквизитыИсходящегоСообщения.ВидПродукции,
		РеквизитыИсходящегоСообщения.ТекстСообщенияJSON,
		ПодписьИзСвойствПодписи(РеквизитыИсходящегоСообщения.СвойстваПодписи));
	
	Если ТребуетсяОбновлениеКлючаСессии(ДанныеОбработки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
		ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
		ДанныеОбработки);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение по документу %1 не принято ИС МП:
						           |Текст ошибки: %2'"),
						ЭлементОчереди.Документ,
						ДанныеОбработки.ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение не принято ИС МП:
						           |Текст ошибки: %1'"),
						ДанныеОбработки.ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      ДанныеОбработки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             ДанныеОбработки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
				ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			Если НаборЗаписейОснование = Неопределено Тогда
			
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					ДанныеОбработки.ИдентификаторЗаявки,
					СтанцияУправленияЗаказами,
					Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
				
			Иначе
				
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					ДанныеОбработки.ИдентификаторЗаявки,
					СтанцияУправленияЗаказами,
					Неопределено);
				
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписейОснование,
					Неопределено,
					Неопределено,
					Новый ХранилищеЗначения(
						ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена));
						
			КонецЕсли;
			
			ЭлементОчереди.ИдентификаторЗаявки          = ДанныеОбработки.ИдентификаторЗаявки;
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			
			ЭлементОчереди.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			
			МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			
			Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ФорматОбмена",              ФорматОбмена);
				ДополнительныеПараметры.Вставить("СтанцияУправленияЗаказами", СтанцияУправленияЗаказами);
				ДополнительныеПараметры.Вставить("Назначение",                Перечисления.НазначениеСообщенийИСМП.ИСМП);
				
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
					ЭлементОчереди.Документ, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки,
					ДополнительныеПараметры);
				
			Иначе
				
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
					ЭлементОчереди.Документ, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки);
				
			КонецЕсли;
			
		Иначе
			
			НовыйСтатус = ДанныеОбработки.СтатусОбработки;
			
		КонецЕсли;
		
		ЗаписатьИдентификаторЗаявкиВДокумент(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена, МенеджерОбъекта);
		
		РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по документу %1 не принято ИС МП:
					           |Текст ошибки: %2'"),
					ЭлементОчереди.Документ,
					ДанныеОбработки.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято ИС МП:
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаписатьИдентификаторЗаявкиВДокумент(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена, МенеджерОбъекта)
	
	Если ДанныеОбработки.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
		Или Не ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ЭлементОчереди.Документ.Метаданные();
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ИдентификаторЗаявки", МетаданныеДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка        = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить(МетаданныеДокумента.ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
	Блокировка.Заблокировать();
	
	ДокументОбъект                     = ЭлементОчереди.Документ.ПолучитьОбъект();
	ДокументОбъект.ИдентификаторЗаявки = ДанныеОбработки.ИдентификаторЗаявки;
	ДокументОбъект.Записать();
	
КонецПроцедуры

Процедура ПередатьЗаказНаЭмиссиюКодовМаркировкиСУЗ(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НастройкаОбменаСУЗ, НаборЗаписейОснование)
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		ДанныеОбработки = ИнтерфейсСУЗ.СоздатьБизнесЗаказНаЭмиссиюКодовМаркировки_V1(
			РеквизитыИсходящегоСообщения.ТекстСообщенияJSON,
			НастройкаОбменаСУЗ);
	ИначеЕсли НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
		СвойстваПодписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			РеквизитыИсходящегоСообщения, "СвойстваПодписи");
		Подпись = ПодписьИзСвойствПодписи(СвойстваПодписи);
		ДанныеОбработки = ИнтерфейсСУЗ.СоздатьБизнесЗаказНаЭмиссиюКодовМаркировки_V2(
			РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди.ВидПродукции,
			НастройкаОбменаСУЗ, Подпись);
		Если ТребуетсяОбновлениеКлючаСессии(ДанныеОбработки, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Формат обмена %1 не поддерживается'"),
			НастройкаОбменаСУЗ.ФорматОбмена);
	КонецЕсли;
	
	ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
		ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
		ДанныеОбработки);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение по документу %1 не принято ИС МП:
						           |Текст ошибки: %2'"),
						ЭлементОчереди.Документ,
						ДанныеОбработки.ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение не принято ИС МП:
						           |Текст ошибки: %1'"),
						ДанныеОбработки.ТекстОшибки);
				КонецЕсли;
				
				Если ЭтоСообщениеОПревышенииМаксимальногоКоличестваАктивныхЗаказовСУЗ(ДанныеОбработки.ТекстОшибки) Тогда
					ПараметрыКонтроля = ПараметрыКонтроляАктивныхЗаказов(ПараметрыОбмена, ЭлементОчереди, Истина);
					ПараметрыКонтроля.ТекущееКоличествоЗаказов        = МаксимальноеКоличествоЗаказовВОчередиСУЗ();
					ПараметрыКонтроля.ДатаПоследнегоЗапросаПревышения = ТекущаяДатаСеанса();
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      ДанныеОбработки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             ДанныеОбработки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
				ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ЗагружатьДо = ЭлементОчереди.Сообщение;
			
			// Массив Из Структура - Параметры запроса:
			// * ИдентификаторБизнесЗаказа - Строка - Поле для заполнения идентификатора заказа
			// * ИдентификаторСтрокиЗаказа - Строка - Идентификатор строки заказа
			// * GTIN                      - Строка - GTIN
			Для Каждого ПараметрыЗапроса Из ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса Цикл
				
				ПараметрыЗапроса.ИдентификаторБизнесЗаказа = ДанныеОбработки.ДанныеБизнесЗаказа.ИдентификаторЗаявки;
				
				НовыйЭлементОчереди = ПодготовитьОчередьЗагрузкиКодовМаркировкиПоЗаказуНаЭмиссию(
					ПараметрыЗапроса,
					ЭлементОчереди, ЗагружатьДо, ПараметрыОбмена, НастройкаОбменаСУЗ);
				
				Если НовыйЭлементОчереди <> Неопределено Тогда
					
					// Коды маркировки загружаются строго последовательно.
					ЗагружатьДо = НовыйЭлементОчереди.Сообщение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НаборЗаписейОснование = Неопределено Тогда
			
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					ДанныеОбработки.ДанныеБизнесЗаказа.ИдентификаторЗаявки,
					НастройкаОбменаСУЗ.СтанцияУправленияЗаказами,
					Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
				
			Иначе
				
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					ДанныеОбработки.ДанныеБизнесЗаказа.ИдентификаторЗаявки,
					НастройкаОбменаСУЗ.СтанцияУправленияЗаказами,
					Неопределено);
				
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписейОснование,
					Неопределено,
					Неопределено,
					Новый ХранилищеЗначения(
						ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена));
				
			КонецЕсли;
			
			ЭлементОчереди.ИдентификаторЗаявки          = ДанныеОбработки.ДанныеБизнесЗаказа.ИдентификаторЗаявки;
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			
			ЭлементОчереди.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ФорматОбмена",              НастройкаОбменаСУЗ.ФорматОбмена);
			ДополнительныеПараметры.Вставить("СтанцияУправленияЗаказами", НастройкаОбменаСУЗ.СтанцияУправленияЗаказами);
			ДополнительныеПараметры.Вставить("Назначение",                Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами);
			
			МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
				ЭлементОчереди.Документ, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки,
				ДополнительныеПараметры);
			
		Иначе
			
			НовыйСтатус = ДанныеОбработки.СтатусОбработки;
			
		КонецЕсли;
		
		РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по документу %1 не принято СУЗ:
					           |Текст ошибки: %2'"),
					ЭлементОчереди.Документ,
					ДанныеОбработки.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято СУЗ:
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоСообщениеОПревышенииМаксимальногоКоличестваАктивныхЗаказовСУЗ(ТекстСообщения)
	Возврат СтрНайти(ТекстСообщения, "Количество заказов в очереди не может превышать") > 0
		Или СтрНайти(ТекстСообщения, "Количество активных заказов не может превышать") > 0;
КонецФункции

Процедура ПередатьОтчетСУЗ(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НастройкаОбменаСУЗ, НаборЗаписейОснование)
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
			ДанныеОбработки = ИнтерфейсСУЗ.ПередатьОтчетОбИспользованииКодовМаркировкиБизнесЗаказа_V1(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON,
				НастройкаОбменаСУЗ);
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестная операция СУЗ %1'"),
				НастройкаОбменаСУЗ.Операция);
		КонецЕсли;
	ИначеЕсли НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
		
		Подпись = Неопределено;
		Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ТребуетсяПодписание Тогда
			СвойстваПодписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				РеквизитыИсходящегоСообщения, "СвойстваПодписи");
			Подпись = ПодписьИзСвойствПодписи(СвойстваПодписи);
		КонецЕсли;
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ Тогда
			
			ДанныеОбработки = ИнтерфейсСУЗ.ПередатьОтчетОбИспользованииКодовМаркировки_V2(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди,
				НастройкаОбменаСУЗ, Подпись);
				
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки Тогда
			ДанныеОбработки = ИнтерфейсСУЗ.ПередатьОтчетОСписанииКодовМаркировки_V2(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди.ВидПродукции,
				НастройкаОбменаСУЗ, Подпись);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Агрегация
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
			ДанныеОбработки = ИнтерфейсСУЗ.ПередатьОтчетОбАгрегацииКодовМаркировки_V2(
				РеквизитыИсходящегоСообщения.ТекстСообщенияJSON, ЭлементОчереди,
				НастройкаОбменаСУЗ, Подпись);
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестная операция СУЗ %1'"),
				НастройкаОбменаСУЗ.Операция);
		КонецЕсли;
		
		Если ТребуетсяОбновлениеКлючаСессии(ДанныеОбработки, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Формат обмена %1 не поддерживается'"),
			НастройкаОбменаСУЗ.ФорматОбмена);
	КонецЕсли;
	
	ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
		ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
		ДанныеОбработки);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение по документу %1 не принято ИС МП:
						           |Текст ошибки: %2'"),
						ЭлементОчереди.Документ,
						ДанныеОбработки.ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение не принято ИС МП:
						           |Текст ошибки: %1'"),
						ДанныеОбработки.ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      ДанныеОбработки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             ДанныеОбработки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
				ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			Если НаборЗаписейОснование = Неопределено Тогда
			
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					ДанныеОбработки.ИдентификаторЗаявки,,
					Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
				
			Иначе
				
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					ДанныеОбработки.ИдентификаторЗаявки,,
					Неопределено);
				
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписейОснование,
					Неопределено,
					Неопределено,
					Новый ХранилищеЗначения(
						ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена));
						
			КонецЕсли;
			
			ЭлементОчереди.ИдентификаторЗаявки          = ДанныеОбработки.ИдентификаторЗаявки;
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			
			ЭлементОчереди.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			
			МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(ЭлементОчереди.Документ, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки);
			
		Иначе
			
			НовыйСтатус = ДанныеОбработки.СтатусОбработки;
			
		КонецЕсли;
		
		РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по документу %1 не принято СУЗ:
					           |Текст ошибки: %2'"),
					ЭлементОчереди.Документ,
					ДанныеОбработки.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято СУЗ:
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередатьСообщениеОЗакрытииПодзаказаНаЭмиссиюКодовМаркировкиСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ПередатьСообщениеОЗакрытииПодзаказаНаЭмиссиюКодовМаркировкиСУЗ");
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	ЭлементОчередиЗаказНаЭмиссию = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	Если ЭлементОчередиЗаказНаЭмиссию = Неопределено Тогда
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчередиЗаказНаЭмиссию.Сообщение;
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчередиЗаказНаЭмиссию.Сообщение);
		НаборЗаписейОснования.Прочитать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписейОснования.Выбран()
			Или Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		РезультатОбработкиЗаявки = ИнтерфейсСУЗ.ЗакрытьПодзаказПоGTIN_V2(
			ПараметрыЗапроса,
			ЭлементОчереди.ВидПродукции, НастройкаОбменаСУЗ);
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиЗаказНаЭмиссию,
			РезультатОбработкиЗаявки);
		
		ЭлементОчереди.ТекущийСтатус                = Неопределено;
		ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
		ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		
		ОбновитьИдентификаторЗаявкиСообщенияОчереди(
			НаборЗаписейОснования,,,
			Новый ХранилищеЗначения(ЭлементОчередиЗаказНаЭмиссию.ПротоколОбмена));
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка Тогда
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		КонецЕсли;
		
		СтрокаРезультата = СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = Неопределено;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ПараметрыКонтроля = ПараметрыКонтроляАктивныхЗаказов(ПараметрыОбмена, ЭлементОчереди);
		
		Если ПараметрыКонтроля <> Неопределено Тогда
			ПараметрыКонтроля.ТекущееКоличествоЗаказов = ПараметрыКонтроля.ТекущееКоличествоЗаказов - 1;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При передаче закрытия подзаказа по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При передаче закрытия подзаказа по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст XML:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка)
		И ТранзакцияЗафиксирована Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

#Область ПроверкиРезультатаПередачиОтчетаОНанесенииСУЗ

Процедура ЗагрузитьРезультатОбработкиОтчетОбИспользованииКМРасчетСтатусаКодовМаркировки(ЭлементОчереди, ПараметрыОбмена)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.РасчетСтатусаКодовМаркировки");
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.СообщениеОснование;
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
		НаборЗаписейОснования.Прочитать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписейОснования.Выбран()
			Или Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		МассивСтрок = Новый Массив();
		Для Каждого ЗначениеШтрихкода Из ПараметрыЗапроса.КодыМаркировкиДляКонтроляСтатусов Цикл
			СтруктураЗначения = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
				ЗначениеШтрихкода, ЭлементОчереди.ВидПродукции);
			МассивСтрок.Добавить(СтруктураЗначения);
		КонецЦикла;
		
		ЛогированиеЗапросовИСМП.ВключитьЛогированиеЗапросовДляПротоколаОбмена();
		РезультатПолученияДанных = ИнтерфейсИСМП.ДеревоУпаковок(МассивСтрок);
		
		ПараметрыЛогирования = ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов();
		ПротоколОбмена       = ЛогированиеЗапросовИСМП.ЗавершитьЛогированиеЗапросовПоИдентификаторуПротоколаОбмена(ПараметрыЛогирования.ТекущийИдентификаторПротоколОБмена);
		
		Если ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДанных, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатПолученияДанных.ТекстОшибки) Тогда
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
		ИначеЕсли РезультатПолученияДанных.СтатусыКодовМаркировки <> Неопределено Тогда
			Для Каждого КлючИЗначение Из РезультатПолученияДанных.СтатусыКодовМаркировки Цикл
				СтатусКодов = КлючИЗначение.Значение.Статус;
				Если ПараметрыЗапроса.ОжидаемыеСтатусыКодовПослеПередачиОтчетаОНанесении.Найти(СтатусКодов) <> Неопределено Тогда //ожидаемый
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				ИначеЕсли ПараметрыЗапроса.ДопустимыеНачальныеСтатусыКодовОтчетОНанесении.Найти(СтатусКодов) <> Неопределено Тогда // возможный исходный статус
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
				Иначе
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				КонецЕсли;
				Прервать;
			КонецЦикла;
		Иначе
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
		КонецЕсли;
		
		Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается;
		
		Если ЭлементОчереди.ТекущийСтатусОбработки = СтатусОбработки Тогда
			// Если с момента последнего изменения статуса прошло более 5 минут,
			// то отложим обработку элемента очереди до следующей попытки обмена.
			Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
				И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
				ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
			Иначе
				УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ЭлементОчереди.ТекущийСтатус                = Статус;
		ЭлементОчереди.ТекущийСтатусОбработки       = СтатусОбработки;
		ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		
		ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		
		Операция =  Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента;
		ПредставлениеПротокола = ДополнитьПротоколОбмена(ЭлементОчередиОснование, ПротоколОбмена, СтатусОбработки, Операция);
		
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Статус;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;   //основания?
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);
		
		СтрокаРезультата = СтруктураИзменения();
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = РезультатПолученияДанных.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = ПредставлениеПротокола;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротокола;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается Тогда
			
			Если НаборЗаписейОснования = Неопределено Тогда
			
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					Неопределено,
					Неопределено,
					Новый ХранилищеЗначения(ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена));
				
			Иначе
				
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписейОснования,
					Неопределено,
					Неопределено,
					Новый ХранилищеЗначения(
						ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена));
						
			КонецЕсли;
			
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
				
			// Требуется ожидание
			Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
				И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
				ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
			Иначе
				УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
			КонецЕсли;
			
		Иначе
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчередиОснование.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчередиОснование.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчередиОснование.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчередиОснование.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатПолученияДанных.ТекстОшибки);
			
			Если Не ЗначениеЗаполнено(Реквизиты.Описание)
				И СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
				Реквизиты.Описание = НСтр("ru = 'Ошибка обработки сообщения. Заявка отклонена.'");
			КонецЕсли;
			
			ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчередиОснование.ПротоколОбмена);
			
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколОбменаXML,
				Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			УдалитьСообщениеИзОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
			
		КонецЕсли;
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			"");
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована Тогда
		
		Если СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается Тогда
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
			Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчередиОснование) <> -1 Тогда
				ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчередиОснование);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ЗагрузитьРезультатПроверкаСтатусаОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена)
	
	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента Тогда
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатСписаниеПроверкаСтатусаОбработкиДокумента");
	Иначе
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатАгрегацияПроверкаСтатусаОбработкиДокумента");
	КонецЕсли;
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМП.СтатусОбработкиДокументаПоИдентификатору(
		ЭлементОчереди.ИдентификаторЗаявки,
		ЭлементОчереди.Организация, ЭлементОчереди.ВидПродукции, ЭлементОчереди.Операция);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = Ложь;
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния    = 408       // Таймаут
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 500       // Ошибки сервера
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 502       // Bad Gateway
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 503       // Сервер недоступен
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 504       // Gateway Timeout
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 403       // Ошибка авторизации
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 429 Тогда // Слишком много запросов
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ЗапросОтправлен
		Или Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ОтветПолучен Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	// Ошибка валидации. Один или несколько запрошенных ID заказов не найдены.
	// Способ обхода: повтор запроса.
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если ЭлементОчереди.ТекущийСтатус = РезультатОбработкиЗаявки.Статус
		И ЭлементОчереди.ТекущийСтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки Тогда
		ТребуетсяПовторОперации = Истина;
	КонецЕсли;
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		ИначеЕсли ЭлементОчереди.ТекущийСтатус = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления
			Или ЭлементОчереди.ТекущийСтатус = Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.СообщениеОснование;
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
		НаборЗаписейОснования.Прочитать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не НаборЗаписейОснования.Выбран()
			Или Не НаборЗаписей.Выбран() Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			РезультатОбработкиЗаявки.Операция,
			ПараметрыОбновленияСтатуса);
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиОснование,
			РезультатОбработкиЗаявки);
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчередиОснование.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчередиОснование.ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			СтрокаРезультата = СтруктураИзменения();
			
			СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
			СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
			СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
			
			СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
			СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
			СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
			
			СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Ложь;
			СтрокаРезультата.Передано              = Ложь;
			СтрокаРезультата.Принято               = Истина;
			СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
			СтрокаРезультата.ОбъектИзменен         = Ложь;
			
			СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
			СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
			СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			УдалитьСообщениеИзОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
			
		Иначе
			
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписейОснования,,,
				Новый ХранилищеЗначения(ЭлементОчередиОснование.ПротоколОбмена))
			
		КонецЕсли;
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена) Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиОснование, ПараметрыОбмена);
		Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчередиОснование) <> -1 Тогда
			ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчередиОснование);
		КонецЕсли;
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗагрузитьРезультатОбработкиАбстрактнойАгрегацииИзменениеРасчетСтатуса(ЭлементОчереди, ПараметрыОбмена)
	
	ЭлементОчередиАбстрактнаяАгрегация = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	МассивОшибок    = Новый Массив;
	ОписаниеОшибки  = "";
	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
	
	Для Каждого СтрокаТЧ Из ЭлементОчередиАбстрактнаяАгрегация.ПротоколОбмена Цикл
		Если СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
			Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ДанныеОтвета = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(СтрокаТЧ.ОтветТело);
			Если ДанныеОтвета <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОтвета, "errors") Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОшибок, ДанныеОтвета.errors, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
		Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОписаниеОшибки = НСтр("ru = '<Описание ошибки отсутствует>'");
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
	
	ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Неопределено;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ,
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
		ПараметрыОбновленияСтатуса);
	
	Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчередиАбстрактнаяАгрегация.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчередиАбстрактнаяАгрегация.ИдентификаторЗаявки);
		Реквизиты.Вставить("Операция",             ЭлементОчередиАбстрактнаяАгрегация.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчередиАбстрактнаяАгрегация.СообщениеОснование);
		Реквизиты.Вставить("Версия",               ЭлементОчередиАбстрактнаяАгрегация.РеквизитыИсходящегоСообщения.Версия);
		Реквизиты.Вставить("ТипСообщения",         ЭлементОчередиАбстрактнаяАгрегация.РеквизитыИсходящегоСообщения.ТипСообщения);
		Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
		Реквизиты.Вставить("Описание",             ОписаниеОшибки);
		
		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчередиАбстрактнаяАгрегация.ПротоколОбмена);
		ДобавитьЗаписьВПротоколОбмена(
			ПротоколаОбменаXML,
			Реквизиты);
		
		СтрокаРезультата = СтруктураИзменения();
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = ОписаниеОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = СтрокаТЧ.ОтветТело; 
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПротоколаОбменаXML;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		Для Каждого ЭлементОчередиКУдалению Из ПараметрыОбмена.ОчередьСообщений Цикл
			Если ЭлементОчередиКУдалению.СообщениеОснование = ЭлементОчереди.СообщениеОснование Тогда
				УдалитьСообщениеИзОчереди(ЭлементОчередиКУдалению, ПараметрыОбмена);
				Если ЭлементОчередиКУдалению.Сообщение <> ЭлементОчереди.Сообщение Тогда
					УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиКУдалению, ПараметрыОбмена);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		УдалитьСообщениеИзОчереди(ЭлементОчередиАбстрактнаяАгрегация, ПараметрыОбмена);
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиАбстрактнаяАгрегация, ПараметрыОбмена);
		
		Для Каждого ЭлементОчередиКУдалению Из ПараметрыОбмена.ОбработанныеЭлементыОчереди Цикл
			
			Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчередиКУдалению) <> -1 
				И ЭлементОчередиКУдалению.Сообщение <> ЭлементОчереди.Сообщение Тогда
				ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчередиКУдалению);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Очистить();
	КонецЕсли;
	
	УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена)
	
	Если ЭлементОчереди.ПротоколОбмена = Неопределено Тогда
		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		Возврат;
	КонецЕсли;
	
	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	МассивОшибок    = Новый Массив;
	ОписаниеОшибки  = "";
	
	Для Каждого СтрокаТЧ Из ЭлементОчереди.ПротоколОбмена Цикл
		Если СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
			Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ДанныеОтвета = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(СтрокаТЧ.ОтветТело);
			Если ДанныеОтвета <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОтвета, "errors") Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОшибок, ДанныеОтвета.errors, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
		Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОписаниеОшибки = НСтр("ru = '<Описание ошибки отсутствует>'");
		КонецЕсли;
	КонецЕсли;
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
	
	ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Неопределено;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ,
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
		ПараметрыОбновленияСтатуса);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
	Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
	Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
	Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
	Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
	Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
	Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
	Реквизиты.Вставить("Описание",             ОписаниеОшибки);
	
	ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
	ДобавитьЗаписьВПротоколОбмена(
		ПротоколаОбменаXML,
		Реквизиты);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		СтрокаРезультата = СтруктураИзменения();
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = ОписаниеОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = СтатусОбработки;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = СтрокаТЧ.ОтветТело; 
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПротоколаОбменаXML;
	
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	
	УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулировать
		И ЗначениеЗаполнено(ЭлементОчереди.Документ) 
		И СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята Тогда
		ОчиститьОчередьЗапросаСтатусаОтгрузкаТоваровИСМП(ЭлементОчереди, СтатусОбработки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьСообщенияПоАбстрактнойОперацииВводВОборотИмпортСФТС(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСМППрисоединенныеФайлы.Документ КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка = &Ссылка
	|		И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		И Шапка.Ссылка = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.Номер                          КАК Номер,
	|	Шапка.Дата                           КАК Дата,
	|	Шапка.ДокументОснование              КАК ДокументОснование,
	|	
	|	Шапка.Организация                    КАК Организация,
	|	Представление(Шапка.Организация)     КАК ОрганизацияПредставление,
	|
	|	Шапка.Контрагент                     КАК Контрагент,
	|	Представление(Шапка.Контрагент)      КАК КонтрагентПредставление,
	|
	|	Шапка.Ответственный                  КАК Ответственный,
	|	Представление(Шапка.Ответственный)   КАК ОтветственныйПредставление,
	|	
	|	Шапка.ВидПродукции                   КАК ВидПродукции,
	|	Шапка.Операция                       КАК Операция,
	|	Шапка.ОперацияНанесения              КАК ОперацияНанесения,

	|	Шапка.ВариантЗаполненияДекларации    КАК ВариантЗаполненияДекларации,
	|	Шапка.ДатаДекларации                 КАК ДатаДекларации,
	|	Шапка.РегистрационныйНомерДекларации КАК РегистрационныйНомерДекларации,
	|	Шапка.Ссылка                         КАК Ссылка
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки                КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
	|	ШтрихкодыУпаковок.СрокГодности                    КАК СрокГодности
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыАТК.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыАТК КАК ШтрихкодыАТК
	|ГДЕ
	|	ШтрихкодыАТК.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковокАТК");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭлементОчереди.Документ);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	ДанныеШапки             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	//@skip-warning
	ШтрихкодыУпаковокАТК = РезультатЗапроса["ШтрихкодыУпаковокАТК"].Выгрузить();
	
	Если Не ДанныеШапки.Следующий() Или ШтрихкодыУпаковок.Количество() = 0 Тогда
		
		ЗавершитьПодготовкуСообщений(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(
		ДанныеШапки, Неопределено, ЭлементОчереди.ВидПродукции);
	ПараметрыСканирования.ЗапрашиватьСтатусыИСМП    = Истина;
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Ложь;
	
	РезультатПолученияДанных = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу(ЭлементОчереди.Документ, Неопределено, ПараметрыСканирования);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДанных, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПолученияДанных.ЕстьОшибки Тогда
		ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
	КонецЕсли;
	
	СообщениеJSON = ЗаполнитьСообщениеJSONКПередаче(Новый Структура, ДанныеШапки.Операция, ЭлементОчереди);
	
	ТребуетсяАгрегация   = Ложь;
	КодыАгрегированы     = Ложь;
	КодыАТКСформированы  = Ложь;
	
	НомерВерсии          = ДанныеШапки.ПоследнийНомерВерсии + 1;
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ДанныеШапки.Организация);
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеШапки.ДатаДекларации) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""Дата декларации""'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Не заполнено поле ""ИНН"" для организации'"), ДанныеШапки.Организация));
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ТребуетсяАгрегация = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("trade_participant_inn", РеквизитыОрганизации.ИНН);
	ТелоЗапроса.Вставить("declaration_date",      Формат(ДанныеШапки.ДатаДекларации,"ДФ=dd.MM.yyyy"));
	ТелоЗапроса.Вставить("declaration_number",    ДанныеШапки.РегистрационныйНомерДекларации);
	
	ТелоЗапроса.Вставить("products_list",        Новый Массив);
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("ИмяРеквизитаТовары",         "products_list");
	Настройки.Вставить("ИмяРеквизитаКодМаркировки",  "cis");
	Настройки.Вставить("УказыватьТипУпаковки",       Ложь);
	Настройки.Вставить("УровеньВложенностиУпаковок", 1);
	РезультатПоиска = РезультатПолученияДанных.ВложенныеШтрихкоды;
	Если ДанныеШапки.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыМаркировки Тогда
		
		ЗаполнитьСведенияОТоварахПоШтрихкодамУпаковок(СообщениеJSON, ТелоЗапроса,
			РезультатПоиска, ПараметрыНормализацииПрочее, ЭлементОчереди, Настройки);
		
	Иначе
		Если ДанныеШапки.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
			КодыАгрегированы   = Истина;
			ТребуетсяАгрегация = Ложь;
		Иначе
			КодыАТКСформированы = Истина;
			РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
				ШтрихкодыУпаковокАТК.ВыгрузитьКолонку("ШтрихкодУпаковки"),
				ПараметрыСканирования);
		КонецЕсли;
		
		ЗаполнитьСведенияОТоварахИмпортФТС(СообщениеJSON, ТелоЗапроса,
			РезультатПоиска.ДеревоУпаковок, ПараметрыНормализацииПрочее, ЭлементОчереди, Настройки);
		
	КонецЕсли;
	
	ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
	
	СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
	СообщениеJSON.ЗагружатьДо   = ЭлементОчереди.Сообщение;
	СообщениеJSON.Описание      = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		ДанныеШапки.Операция, ЭлементОчереди.Документ, НомерВерсии);
		
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ТребуетсяАгрегация",  ТребуетсяАгрегация);
	ПараметрыЗапроса.Вставить("КодыАгрегированы",    КодыАгрегированы);
	ПараметрыЗапроса.Вставить("КодыАТКСформированы", КодыАТКСформированы);
	ПараметрыЗапроса.Вставить("ОрганизацияИНН",      РеквизитыОрганизации.ИНН);
	
	СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
	
	СообщенияJSON = Новый Массив;
	
	НайденыСформированныеАгрегатыПоДаннымИСМП = Ложь;
	
	Если Не КодыАгрегированы Тогда
		Для Каждого СтрокаДерева Из РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
			НайденыСформированныеАгрегатыПоДаннымИСМП = НайтиСформированныеАгрегатыПоДаннымИСМП(СтрокаДерева);
			Если НайденыСформированныеАгрегатыПоДаннымИСМП Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НайденыСформированныеАгрегатыПоДаннымИСМП Тогда
		
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'В документе найдены упаковки, агрегированные по данным ИС МП.
				           |Для ввода в оборот необходимо использовать режим ""Подготовить для декларации: Упаковки"".'")));
		СообщенияJSON.Добавить(СообщениеJSON);
		
	Иначе
		
		СообщенияJSONТрансформация = Новый Соответствие;
		
		Если Не КодыАгрегированы Тогда // НайденыСформированныеАгрегатыПоДаннымИСМП
			
			ПараметрыОбработки = Новый Структура;
			// Если ввод в оборот осуществляется по кодам АТК, то исключить подготовку операции "расформирование АТК"
			ПараметрыОбработки.Вставить("ОбрабатыватьКодыАТК", Не КодыАТКСформированы);
			
			ПодготовитьКПередачеСообщенияДляТрансформацииАгрегатовИСМП(
				РезультатПолученияДанных.ВложенныеШтрихкоды.МаркированныеТовары,
				ЭлементОчереди,
				ЭлементОчереди.Сообщение,
				СообщенияJSONТрансформация,
				ПараметрыОбмена,
				ПараметрыОбработки);
		КонецЕсли;
			
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Если СообщенияJSONТрансформация.Количество() Тогда
			ПодготовитьКПередачеСообщениеАбстарктнаяАгрегацияИзменениеРасчетСтатуса(СообщенияJSON, ЭлементОчереди, СообщенияJSONТрансформация);
		КонецЕсли;
		
	КонецЕсли;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ИдентификаторЗаявки = СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	ОбновитьИдентификаторЗаявкиСообщенияОчереди(
		НаборЗаписей,
		ИдентификаторЗаявки,
		Неопределено,
		Неопределено);
	
	ЭлементОчереди.ИдентификаторЗаявки = ИдентификаторЗаявки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОТоварахИмпортФТС(
	СообщениеJSON, ТелоЗапроса, ИсточникДанных, ПараметрыНормализацииПрочее, ОбщийЭлементОчереди,
	Настройки = Неопределено, ЗаполнениеВложенныхУпаковкок = Ложь)
	
	Если ЗаполнениеВложенныхУпаковкок Тогда
		Настройки.ИмяРеквизитаТовары = "children";
		Настройки.УровеньВложенностиУпаковок = Настройки.УровеньВложенностиУпаковок + 1;
		ТелоЗапроса.Вставить("children", Новый Массив);
	КонецЕсли;
	
	НастройкиВложенныхУпаковок = ОбщегоНазначения.СкопироватьРекурсивно(Настройки);
	
	Для Каждого СтрокаШтрихкодаУпаковки Из ИсточникДанных.Строки Цикл
		
		РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
			СтрокаШтрихкодаУпаковки.Штрихкод, ОбщийЭлементОчереди.ВидПродукции, Ложь);
		
		СтрокаТЧ = Новый Структура;
		СтрокаТЧ.Вставить(
			Настройки.ИмяРеквизитаКодМаркировки,
			РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				РезультатРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее));
		
		Если РезультатРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.АгрегированныйТаможенныйКод Тогда
			СтрокаТЧ.Вставить("packType", "ATK");
		ИначеЕсли РезультатРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаТЧ.Вставить("packType", "UNIT");
		Иначе
			СтрокаТЧ.Вставить("packType", "LEVEL" + Строка(Настройки.УровеньВложенностиУпаковок));
		КонецЕсли;
	
		Если СтрокаШтрихкодаУпаковки.Строки.Количество() Тогда
			ЗаполнитьСведенияОТоварахИмпортФТС(
				СообщениеJSON, СтрокаТЧ, СтрокаШтрихкодаУпаковки, ПараметрыНормализацииПрочее, ОбщийЭлементОчереди,
				НастройкиВложенныхУпаковок, Истина);
		КонецЕсли;
		
		ТелоЗапроса[Настройки.ИмяРеквизитаТовары].Добавить(СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОТоварахПоШтрихкодамУпаковок(
	СообщениеJSON, ТелоЗапроса, ДанныеПоШтрихкодам, ПараметрыНормализацииПрочее, ОбщийЭлементОчереди, Настройки = Неопределено)
	
	Для Каждого СтрокаТЧМаркированныеТовары Из ДанныеПоШтрихкодам.МаркированныеТовары Цикл
		
		СтрокаТЧ = Новый Структура;
		
		РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
			СтрокаТЧМаркированныеТовары.Штрихкод, ОбщийЭлементОчереди.ВидПродукции, Ложь);
		
		СтрокаТЧ.Вставить(
			Настройки.ИмяРеквизитаКодМаркировки,
			РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				РезультатРазбора, ОбщийЭлементОчереди.ВидПродукции, ПараметрыНормализацииПрочее));
		
		СтрокаТЧ.Вставить("packType", "UNIT");
		
		ТелоЗапроса[Настройки.ИмяРеквизитаТовары].Добавить(СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьСообщенияПоАбстрактнойОперацииАТК(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	// Заполнение данных по маркируемым товарам
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки                КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭлементОчереди.Документ);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	ДанныеШапки = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ЭлементОчереди.Документ);	
	СообщенияJSON = Новый Массив;
	
	Если ШтрихкодыУпаковок.Количество() = 0 Тогда
		ЗавершитьПодготовкуСообщений(ЭлементОчереди, ПараметрыОбмена);
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(
		ДанныеШапки, Неопределено, ЭлементОчереди.ВидПродукции);
	ПараметрыСканирования.ЗапрашиватьСтатусыИСМП    = Истина;
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Ложь;
	
	РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
		ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
		ПараметрыСканирования);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатПоиска, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПоиска.ЕстьОшибки Тогда
		ВызватьИсключение РезультатПоиска.ТекстОшибки;
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ОбрабатыватьКодыАТК", Истина);
	
	СообщенияJSONТрансформация = Новый Соответствие;
	ПодготовитьКПередачеСообщенияДляТрансформацииАгрегатовИСМП(
		РезультатПоиска.МаркированныеТовары,
		ЭлементОчереди,
		ЭлементОчереди.Сообщение,
		СообщенияJSONТрансформация,
		ПараметрыОбмена,
		ПараметрыОбработки);
	
	МаркированныеТовары = Новый ТаблицаЗначений;
	МаркированныеТовары.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	МаркированныеТовары.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	МаркированныеТовары.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатПоиска.МаркированныеТовары, МаркированныеТовары);
		
	ПодготовитьКПередачеСообщенияДляФормированияКодовАТКИСМП(
		МаркированныеТовары, ДанныеШапки,
		ЭлементОчереди, ЭлементОчереди.Сообщение, СообщенияJSON, ПараметрыОбмена);
	
	// Выполнять удаление кодов из агрегатов и разагрегацию АТК в первую очередь
	ПодготовитьКПередачеСообщениеАбстарктнаяАгрегацияИзменениеРасчетСтатуса(СообщенияJSON, ЭлементОчереди, СообщенияJSONТрансформация);
	
	// Если формирование АТК не требуется - завершить операцию
	Если СообщенияJSON.Количество() = 0 Тогда
		
		ЗавершитьПодготовкуСообщений(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ИдентификаторЗаявки = СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	ОбновитьИдентификаторЗаявкиСообщенияОчереди(
		НаборЗаписей,
		ИдентификаторЗаявки,
		Неопределено,
		Неопределено);
	
	ЭлементОчереди.ИдентификаторЗаявки = ИдентификаторЗаявки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
	
КонецПроцедуры

Процедура ПодготовитьСообщенияПоАбстрактнойАгрегации(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	// Заполнение данных по маркируемым товарам
	ДанныеШапки = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ЭлементОчереди.Документ);
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(
		ДанныеШапки, Неопределено, ЭлементОчереди.ВидПродукции);
	ПараметрыСканирования.ЗапрашиватьСтатусыИСМП                        = Истина;
	ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева = Ложь;
	
	Если Не ДанныеШапки.ОтчетПроизводственнойЛинии Тогда
		
		Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ЭлементОчереди.ВидПродукции) Тогда
			РезультатПолученияДанных = ШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(ЭлементОчереди.Документ, Неопределено, ПараметрыСканирования);
		Иначе
			РезультатПолученияДанных = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу(ЭлементОчереди.Документ, Неопределено, ПараметрыСканирования);
		КонецЕсли;
		
		Если ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДанных, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		Если РезультатПолученияДанных.ЕстьОшибки Тогда
			ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
		КонецЕсли;
		
		ВложенныеШтрихкоды = РезультатПолученияДанных.ВложенныеШтрихкоды;
		
	Иначе
		
		СписокЗапросов = Новый СписокЗначений;
		СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ДанныеОтчета.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
		|	ДанныеОтчета.ЗначениеШтрихкодаУпаковки КАК ЗначениеШтрихкодаУпаковки
		|ИЗ
		|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
		|ГДЕ
		|	ДанныеОтчета.Ссылка = &Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|",
		"ДанныеОтчетаПроизводственнойЛинии");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ЭлементОчереди.Документ);
		
		РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
		
		//@skip-warning
		ДанныеОтчета = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
		
		ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
		
		СоответствиеСтрокДереваУпаковок = Новый Соответствие;
		КешДанныхРазбора                = Новый Соответствие;
		НастройкиРазбораКодаМаркировки  = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(ДанныеШапки.ВидПродукции);
		ПроверятьАлфавитКодовМаркировки = Ложь;
		
		Штрихкоды = Новый Массив;
		Для Каждого СтрокаДанныхОтчета Из ДанныеОтчета Цикл
			Штрихкоды.Добавить(
				Новый Структура(
					"Штрихкод, ШтрихкодУпаковки",
					СтрокаДанныхОтчета.ЗначениеШтрихкода, СтрокаДанныхОтчета.ЗначениеШтрихкодаУпаковки));
		КонецЦикла;
		
		ГрупповаяОбработкаШтрихкодовИС.ДополнитьУпорядочитьДанныеТСД(Штрихкоды);
		
		Для Каждого СтрокаДанныхОтчета Из Штрихкоды Цикл
		
			ДанныеРазбораШтрихкода = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкода(
				СтрокаДанныхОтчета.Штрихкод, ДанныеШапки.ВидПродукции, КешДанныхРазбора,
				НастройкиРазбораКодаМаркировки, ПроверятьАлфавитКодовМаркировки);
			
			Если Не ЗначениеЗаполнено(ДанныеРазбораШтрихкода.ВидУпаковки) Тогда
				ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанныхОтчета.ШтрихкодУпаковки) Тогда
				
				ДанныеРазбораШтрихкодаУпаковки = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкода(
					СтрокаДанныхОтчета.ШтрихкодУпаковки, ДанныеШапки.ВидПродукции, КешДанныхРазбора,
					НастройкиРазбораКодаМаркировки, ПроверятьАлфавитКодовМаркировки);
				
				Если ДанныеРазбораШтрихкодаУпаковки <> Неопределено
					И ЗначениеЗаполнено(ДанныеРазбораШтрихкодаУпаковки.НормализованныйШтрихкод) Тогда
					СтрокаДереваВерхнегоУровня = СоответствиеСтрокДереваУпаковок[ДанныеРазбораШтрихкодаУпаковки.НормализованныйШтрихкод];
					Если СтрокаДереваВерхнегоУровня = Неопределено Тогда
						СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
					КонецЕсли;
				Иначе
					СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
				КонецЕсли;
				
			Иначе
				
				СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
				
			КонецЕсли;
			
			СтрокаДерева = СтрокаДереваВерхнегоУровня.Строки.Добавить();
			
			ДанныеРазбораИПримечание = КешДанныхРазбора[СтрокаДанныхОтчета.Штрихкод];
			ДанныеРазбора = ДанныеРазбораИПримечание.ДанныеРазбора;
			
			// Заполнение GTIN и EAN
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеРазбора.СоставКодаМаркировки);
			
			СтрокаДерева.Штрихкод             = ДанныеРазбора.НормализованныйКодМаркировки;
			СтрокаДерева.ТипШтрихкода         = ДанныеРазбора.ТипШтрихкода;
			СтрокаДерева.ВидУпаковки          = ДанныеРазбора.ВидУпаковки;
			СтрокаДерева.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
			СтрокаДерева.ВидПродукции         = ДанныеШапки.ВидПродукции;
			СтрокаДерева.ДанныеРазбора        = ДанныеРазбора;
			
			Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			Иначе
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			КонецЕсли;
			
			СтрокаДерева.НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
			
			Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ДанныеШапки.ВидПродукции) Тогда
				ШтрихкодированиеМОТП.РассчитатьХэшСуммуНормализации(
					СтрокаДерева,
					СтрокаДерева.ДанныеРазбора);
			КонецЕсли;
			
			СоответствиеСтрокДереваУпаковок.Вставить(ДанныеРазбораШтрихкода.НормализованныйШтрихкод, СтрокаДерева);
			
		КонецЦикла;
		
		ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов(ДеревоУпаковок);
		ДанныеПоШтрихкодам.ИерархическаяЗагрузкаИзТСД = Истина;
		
		// Сохранение параметров сканирования.
		// При подготовке дерева упаковок в сценарии работы с ТСД не следует выполнять обращения к ГИС МТ.
		// Все необходимые обращения выполнит механизм штрихкодирования.
		ШтрихкодированиеИСМПСлужебный.НормализоватьДанныеВложенныхШтрихкодов(
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования);
		ШтрихкодированиеИСМПСлужебный.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
		
		ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП = Истина;
		ПараметрыСканирования.ПроверятьДублиКодовМаркировки  = "НеПроверять";
		РезультатОбработкиШтрихкодов = ШтрихкодированиеИС.ОбработатьШтрихкоды(
			Неопределено, ПараметрыСканирования,
			Неопределено, Новый УникальныйИдентификатор, КешДанныхРазбора, ДанныеПоШтрихкодам);
		
		РезультатПолученияДанных = Новый Структура;
		РезультатПолученияДанных.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
		Для Каждого КлючИЗначение Из РезультатОбработкиШтрихкодов.РезультатыОбработки Цикл
			РезультатОбработки = КлючИЗначение.Значение;
			Если РезультатОбработки.Свойство("ТребуетсяАвторизацияИСМП")
					И РезультатОбработки.ТребуетсяАвторизацияИСМП Тогда
				РезультатПолученияДанных.ТребуетсяОбновлениеКлючаСессии = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДанных, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
		
	КонецЕсли;
	
	СообщенияJSON = Новый Массив;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ЭлементОчереди.ВидПродукции) Тогда
		
		ПараметрыОбработки = Новый Структура();
		ПараметрыОбработки.Вставить("СообщениеАгрегации", Неопределено);
		ПараметрыОбработки.Вставить("ЭлементОчереди",     ЭлементОчереди);
		ПараметрыОбработки.Вставить("ПараметрыОбмена",    ПараметрыОбмена);
		ПараметрыОбработки.Вставить("ДанныеСообщений",    Новый Соответствие());
		ПараметрыОбработки.Вставить("МетаданныеXDTO",     Новый Структура());
		ПараметрыОбработки.Вставить("ДанныеШапки",        ДанныеШапки);
		ПараметрыОбработки.МетаданныеXDTO.Вставить("АгрегацияМОТП", Метаданные.ПакетыXDTO.АгрегацияМОТП);
		ПараметрыОбработки.МетаданныеXDTO.Вставить("ВыбытиеМОТП",   Метаданные.ПакетыXDTO.ВыбытиеМОТП);
		ПараметрыОбработки.ДанныеШапки.Вставить("ИНН", ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОрганизацияИНН);
		
		ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
		ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
		ПараметрыОбработки.Вставить("ПараметрыНормализации", ПараметрыНормализацииПрочее);
		
		ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиМОТП(
			ПараметрыОбработки,
			ВложенныеШтрихкоды.ДеревоУпаковок);
		
		Для Каждого КлючИЗначение Из ПараметрыОбработки.ДанныеСообщений Цикл
			ТекстСообщенияXML = ИнтеграцияИСМП.ОбъектXDTOВXML(КлючИЗначение.Значение);
			КлючИЗначение.Ключ.ТекстСообщенияJSON = ТекстСообщенияXML;
		КонецЦикла;
		
		Если ПараметрыОбработки.СообщениеАгрегации <> Неопределено Тогда
			СообщенияJSON.Добавить(ПараметрыОбработки.СообщениеАгрегации);
		КонецЕсли;
		
	Иначе
		
		УпаковкиДокумента = Новый Соответствие;
		СообщенияJSONОперацияТрансформация = Новый Соответствие;
		Для Каждого СтрокаДерева Из ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
			ПодготовитьКПередачеСообщенияДляАгрегацииКодовМаркировкиИСМП(
				СтрокаДерева, ЭлементОчереди, ЭлементОчереди.Сообщение, СообщенияJSON,
				ПараметрыОбмена, УпаковкиДокумента, СообщенияJSONОперацияТрансформация);
		КонецЦикла;
		
		СообщенияJSONОперацияУдаление = Новый Соответствие;
		ПодготовитьКПередачеСообщенияДляРазагрегацииКодовМаркировкиИСМП(
			ВложенныеШтрихкоды.МаркированныеТовары,
			ЭлементОчереди, ЭлементОчереди.Сообщение,
			ПараметрыОбмена, УпаковкиДокумента, СообщенияJSONОперацияУдаление);
		
		ПодготовитьКПередачеСообщениеАбстарктнаяАгрегацияИзменениеРасчетСтатуса(СообщенияJSON, ЭлементОчереди, СообщенияJSONОперацияУдаление, СообщенияJSONОперацияТрансформация);
		
	КонецЕсли;
	
	// Если агрегация не требуется - завершить операцию
	Если СообщенияJSON.Количество() = 0 Тогда
		
		ЗавершитьПодготовкуСообщений(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ИдентификаторЗаявки = СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	ОбновитьИдентификаторЗаявкиСообщенияОчереди(
		НаборЗаписей,
		ИдентификаторЗаявки,
		Неопределено,
		Неопределено);
	
	ЭлементОчереди.ИдентификаторЗаявки = ИдентификаторЗаявки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
	
КонецПроцедуры

Процедура ЗавершитьПодготовкуСообщений(ЭлементОчереди, ПараметрыОбмена, Статус = Неопределено)
	
	ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Статус;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
	МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ,
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
		ПараметрыОбновленияСтатуса);
	
	УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
КонецПроцедуры

// Подготавливает сообщения по операции "аннулирование" документа Отгрузка товаров к передаче в сервис ИС МП.
//
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений()).
//  ПараметрыОбмена - Структура - (См. ИнтеграцияИСМП.ПараметрыОбмена).
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ОчередьСообщенийИСМП - набор записей по сообщению
Процедура ПодготовитьСообщенияПоАбстрактнойОперацииОтгрузкаИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|
	|	Шапка.Организация                        КАК Организация,
	|	Представление(Шапка.Организация)         КАК ОрганизацияПредставление,
	|
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|	Шапка.ИдентификаторЗаявкиНаОтгрузку      КАК ИдентификаторЗаявкиНаОтгрузку,
	|	Шапка.Операция                           КАК Операция,
	|	Шапка.ВидПродукции                       КАК ВидПродукции,
	|	Шапка.Ссылка                             КАК Ссылка
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ЭлементОчереди.Документ);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	
	Если Не Шапка.Следующий()
		Или Не ЗначениеЗаполнено(Шапка.ИдентификаторЗаявкиНаОтгрузку) Тогда
		
		ЗавершитьПодготовкуСообщений(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	СообщенияJSON = Новый Массив;
	ЕстьОшибки    = Ложь;
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМП.СтатусОбработкиДокументаПоИдентификатору(
		Шапка.ИдентификаторЗаявкиНаОтгрузку,
		ЭлементОчереди.Организация, ЭлементОчереди.ВидПродукции);
	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатОбработкиЗаявки.ТекстОшибки) Тогда
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, РезультатОбработкиЗаявки);
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
		Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.Сообщение);
		Реквизиты.Вставить("Версия",               "1.0");
		Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Исходящий);
		Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка);
		Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
		
		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
		ИнтеграцияИСМПСлужебный.ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);
		
		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	Если РезультатОбработкиЗаявки.Статус <> Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления 
		И РезультатОбработкиЗаявки.Статус <> Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		ПараметрыОбновленияСтатуса.Вставить("ВидПродукции",               ЭлементОчереди.ВидПродукции);
		ПараметрыОбновленияСтатуса.Вставить("ОбновлениеСтатусаДокумента", Истина);
		
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ, Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, РезультатОбработкиЗаявки);
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
		Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.Сообщение);
		Реквизиты.Вставить("Версия",               "1.0");
		Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Исходящий);
		Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
		Реквизиты.Вставить("Описание",             "");
		
		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
		ИнтеграцияИСМПСлужебный.ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);
		
		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
	КонецЕсли;
	
	НомерВерсии   = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	
	СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
	СообщениеJSON.ЗагружатьДо   = ЭлементОчереди.Сообщение;
	
	СообщениеJSON.Организация       = ЭлементОчереди.Организация;
	СообщениеJSON.Документ          = ЭлементОчереди.Документ;
	СообщениеJSON.ДокументОснование = ЭлементОчереди.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		ЭлементОчереди.Операция, ЭлементОчереди.Документ, НомерВерсии);
	
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = Неопределено;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	СообщениеJSON.СообщениеОснование  = ЭлементОчереди.Сообщение;
	СообщениеJSON.Назначение          = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	СообщениеJSON.ВидПродукции        = ЭлементОчереди.ВидПродукции;
	
	СообщениеJSON.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование;
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ЭлементОчереди.Организация);
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), ЭлементОчереди.Организация));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
	Иначе
		ТелоЗапроса = Новый Структура;
		
		ТелоЗапроса.Вставить("participant_inn", РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("shipment_number", Шапка.ИдентификаторЗаявкиНаОтгрузку);
		
		ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON = ТекстСообщенияJSON;
		
		СообщенияJSON.Добавить(СообщениеJSON);
	КонецЕсли;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ИдентификаторЗаявки = СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	ОбновитьИдентификаторЗаявкиСообщенияОчереди(
		НаборЗаписей,
		ИдентификаторЗаявки,
		Неопределено,
		Неопределено);
	
	ЭлементОчереди.ИдентификаторЗаявки          = ИдентификаторЗаявки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
	
КонецПроцедуры

// Подготавливает сообщения документа Приемка товаров к передаче в сервис ИС МП.
//
// Параметры:
//  ЭлементОчереди - СтрокаТаблицыЗначений - (См. ИнтеграцияИСМП.ИнициализиоватьОчередьСообщений()).
//  ПараметрыОбмена - Структура - (См. ИнтеграцияИСМП.ПараметрыОбмена).
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ОчередьСообщенийИСМП - набор записей по сообщению
Процедура ПодготовитьСообщенияПоАбстрактнойОперацииПриемкаИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	Шапка.Ответственный                КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление,
	|
	|	Шапка.ДокументОснование               КАК ДокументОснование,
	|
	|	Шапка.Операция                        КАК Операция,
	|	Шапка.НомерПервичногоДокумента        КАК НомерПервичногоДокумента,
	|	Шапка.ДатаПервичногоДокумента         КАК ДатаПервичногоДокумента,
	|	Шапка.ВидПродукции                    КАК ВидПродукции,
	|	Шапка.Контрагент                      КАК Контрагент,
	|	Представление(Шапка.Контрагент)       КАК КонтрагентПредставление,
	|
	|	Шапка.ИННОтправителя                  КАК ИННОтправителя,
	|	Шапка.ДатаПриемки                     КАК ДатаПриемки,
	|	Шапка.ДатаОтгрузки                    КАК ДатаОтгрузки,
	|	Шапка.НомерЗаявкиНаОтгрузку           КАК НомерЗаявкиНаОтгрузку,
	|	Шапка.Ссылка                          КАК Ссылка
	|ИЗ
	|	Документ.ПриемкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ЕстьNull(ШтрихкодыУпаковок.ШтрихкодУпаковки, Неопределено)  КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ЗначениеШтрихкода                         КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковок.КоличествоУпаковок                        КАК КоличествоУпаковок,
	|	ШтрихкодыУпаковок.Цена                                      КАК Цена,
	|	ШтрихкодыУпаковок.СуммаНДС                                  КАК СуммаНДС
	|ИЗ
	|	Документ.ПриемкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ЭлементОчереди.Документ);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или ШтрихкодыУпаковок.Количество() = 0 Тогда
		
		ЗавершитьПодготовкуСообщений(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	СообщенияJSON = Новый Массив;
	ЕстьОшибки    = Ложь;
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМП.СтатусОбработкиДокументаПоИдентификатору(
		Шапка.НомерЗаявкиНаОтгрузку,
		ЭлементОчереди.Организация, ЭлементОчереди.ВидПродукции);
	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатОбработкиЗаявки.ТекстОшибки) Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
		СообщениеJSON.ЗагружатьДо   = ЭлементОчереди.Сообщение;
		
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			РезультатОбработкиЗаявки.ТекстОшибки);
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если РезультатОбработкиЗаявки.Статус <> Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления Тогда
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		ПараметрыОбновленияСтатуса.Вставить("ВидПродукции",               ЭлементОчереди.ВидПродукции);
		ПараметрыОбновленияСтатуса.Вставить("ОбновлениеСтатусаДокумента", Истина);
		
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ, Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, РезультатОбработкиЗаявки);
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
		Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.Сообщение);
		Реквизиты.Вставить("Версия",               "1.0");
		Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Исходящий);
		Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
		Реквизиты.Вставить("Описание",             "");
		
		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
		ИнтеграцияИСМПСлужебный.ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);
		
		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
	КонецЕсли;
	
	// Заполнение данных по маркируемым товарам
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	ПараметрыСканирования.ЗапрашиватьСтатусыИСМП = Ложь;
	ПараметрыСканирования.СопоставлятьНоменклатуру = Ложь;
	
	ОперацияПодтверждениеПриемки = Ложь;
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Приемка Тогда
		ОперацияПодтверждениеПриемки = Истина;
	КонецЕсли;
	
	Если ОперацияПодтверждениеПриемки Тогда
		РезультатПоискаПоДаннымДокумента = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
			ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
			ПараметрыСканирования,, Истина);
		ДеревоУпаковокПоДаннымДокумента = РезультатПоискаПоДаннымДокумента.ДеревоУпаковок;
		
		// Заполнение по данным ИСМП
		ШтрихкодыУпаковокДокументаИСМП = ШтрихкодыУпаковок.ВыгрузитьКолонку("ЗначениеШтрихкода");
		ДанныеШтрихкодовСписок = Новый Массив;
		Для Каждого Штрихкод Из ШтрихкодыУпаковокДокументаИСМП Цикл
			Если ЗначениеЗаполнено(Штрихкод) Тогда
				ДанныеШтрихкодовСписок.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, 1));
			КонецЕсли;
		КонецЦикла;
		
		ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
		ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДанныеШтрихкодовСписок, ПараметрыСканирования);
		ШтрихкодированиеИС.ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		РезультатПолученияДереваИСМП = ИнтерфейсИСМП.ДеревоУпаковок(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, Неопределено,
			ПараметрыСканирования);
		
		Если ТребуетсяОбновлениеКлючаСессии(РезультатПолученияДереваИСМП, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		ДеревоУпаковокПоДаннымДокумента = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
	КонецЕсли;
	
	НомерВерсии   = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	
	СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
	СообщениеJSON.ЗагружатьДо   = ЭлементОчереди.Сообщение;
	
	СообщениеJSON.Организация       = ЭлементОчереди.Организация;
	СообщениеJSON.Документ          = ЭлементОчереди.Документ;
	СообщениеJSON.ДокументОснование = ЭлементОчереди.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		ЭлементОчереди.Операция, ЭлементОчереди.Документ, НомерВерсии);
	
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = Неопределено;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	СообщениеJSON.СообщениеОснование  = ЭлементОчереди.Сообщение;
	СообщениеJSON.Назначение          = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	СообщениеJSON.ВидПродукции        = ЭлементОчереди.ВидПродукции;
	
	Если ОперацияПодтверждениеПриемки Тогда
		СообщениеJSON.Операция = Шапка.Операция;
		Если ЗначениеЗаполнено(РезультатПолученияДереваИСМП.ТекстОшибки) Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				РезультатПолученияДереваИСМП.ТекстОшибки);
			ЕстьОшибки = Истина;
		ИначеЕсли РезультатПолученияДереваИСМП.ДеревоУпаковок = Неопределено Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				НСтр("ru = 'Дерево упаковок по данным сервиса неопределено'"));
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		ДеревоУпаковокПоДаннымИСМП = РезультатПолученияДереваИСМП.ДеревоУпаковок;
		
		ТекстОшибкиСравнения = "";
		РезультатПроверки = ВыявитьРасхожденияВСоставахДеревьев(
			ДеревоУпаковокПоДаннымДокумента,
			ДеревоУпаковокПоДаннымИСМП,
			ТекстОшибкиСравнения,
			ОперацияПодтверждениеПриемки);
		
		Если РезультатПроверки.ЕстьОшибки Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				ТекстОшибкиСравнения);
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не РезультатПроверки.Свойство("СоставУпаковок") 
			Или РезультатПроверки.СоставУпаковок.Количество() = 0 Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					НСтр("ru = 'Нет данных для выгрузки.'"));
			ЕстьОшибки = Истина;
		КонецЕсли;
	Иначе
		СообщениеJSON.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонен;
	КонецЕсли;
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ЭлементОчереди.Организация);
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), ЭлементОчереди.Организация));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		
		Статус = Перечисления.СтатусыОбработкиПриемкиТоваровИСМП.ПодтверждениеПриемкиОшибка;
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Статус;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		ПараметрыОбновленияСтатуса.Вставить("ВидПродукции",      ЭлементОчереди.ВидПродукции);
		ПараметрыОбновленияСтатуса.Вставить("ОперацияКвитанции", ЭлементОчереди.Операция);
		
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ЭлементОчереди.Документ, Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);
		
		ДобавитьВПротоколОбменаОписаниеОшибки(ЭлементОчереди, СообщениеJSON.ТекстОшибки, Статус);
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
		Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.Сообщение);
		Реквизиты.Вставить("Версия",               "1.0");
		Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Исходящий);
		Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка);
		Реквизиты.Вставить("Описание",             СообщениеJSON.ТекстОшибки);
		
		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
		ИнтеграцияИСМПСлужебный.ДобавитьЗаписьВПротоколОбмена(ПротоколаОбменаXML, Реквизиты);

		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		Возврат;
		
	Иначе
		
		ВидОперации = ВидОперацииДокументаИСМП(Шапка.Операция, СообщениеJSON);
		
		ТелоЗапроса = Новый Структура;
		
		ТелоЗапроса.Вставить("document_number",          Шапка.НомерПервичногоДокумента);
		ТелоЗапроса.Вставить("document_date",            ИнтеграцияИС.ДатаUTC(Шапка.ДатаПервичногоДокумента));
		ТелоЗапроса.Вставить("acceptance_date",          ИнтеграцияИС.ДатаUTC(Шапка.ДатаПриемки));
		ТелоЗапроса.Вставить("transfer_date",            ИнтеграцияИС.ДатаUTC(Шапка.ДатаОтгрузки));
		ТелоЗапроса.Вставить("request_type",             "ACCEPTANCE");
		ТелоЗапроса.Вставить("turnover_type",            ВидОперации);
		ТелоЗапроса.Вставить("release_order_number",     Шапка.НомерЗаявкиНаОтгрузку);
		ТелоЗапроса.Вставить("trade_sender_inn",         Шапка.ИННОтправителя);
		ТелоЗапроса.Вставить("trade_recipient_inn",      РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("trade_owner_inn",          "");
		
		Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля Тогда
			ТелоЗапроса.Вставить("release_method",       "CROSSBORDER");
			ТелоЗапроса.Вставить("exporter_taxpayer_id", Шапка.ИННОтправителя);
			ТелоЗапроса.Вставить("exporter_name",        Шапка.КонтрагентПредставление);
		КонецЕсли;
		
		Если ОперацияПодтверждениеПриемки Тогда
			ТелоЗапроса.Вставить("products", Новый Массив);
			ТелоЗапроса.products = РезультатПроверки.СоставУпаковок;
		Иначе
			ТелоЗапроса.Вставить("reject_all", Истина);
		КонецЕсли;
		
		ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	КонецЕсли;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ИдентификаторЗаявки = СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	ОбновитьИдентификаторЗаявкиСообщенияОчереди(
		НаборЗаписей,
		ИдентификаторЗаявки,
		Неопределено,
		Неопределено);
	
	ЭлементОчереди.ИдентификаторЗаявки          = ИдентификаторЗаявки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
	
КонецПроцедуры

Процедура ОбновитьИдентификаторЗаявкиСообщенияОчереди(
	НаборЗаписей, ИдентификаторЗаявки = Неопределено, СтанцияУправленияЗаказами = Неопределено,
	ПротоколОбменаВХранилищеЗначения = Неопределено, ИдентификаторПоследнегоБлокаКодов = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		
		ИзменитьДатуМодификации = Ложь;
		
		Если ИдентификаторЗаявки <> Неопределено
			И ЗаписьНабора.ИдентификаторЗаявки <> ИдентификаторЗаявки Тогда
			ЗаписьНабора.ИдентификаторЗаявки = ИдентификаторЗаявки;
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если ПротоколОбменаВХранилищеЗначения <> Неопределено Тогда
			ЗаписьНабора.ПротоколОбмена = ПротоколОбменаВХранилищеЗначения;
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если СтанцияУправленияЗаказами <> Неопределено
			И ЗаписьНабора.СтанцияУправленияЗаказами <> СтанцияУправленияЗаказами Тогда
			ЗаписьНабора.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если ИдентификаторПоследнегоБлокаКодов <> Неопределено
			И ЗаписьНабора.ИдентификаторПоследнегоБлокаКодов <> ИдентификаторПоследнегоБлокаКодов Тогда
			ЗаписьНабора.ИдентификаторПоследнегоБлокаКодов = ИдентификаторПоследнегоБлокаКодов;
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если ИзменитьДатуМодификации
			Или Не ЗначениеЗаполнено(ЗаписьНабора.ДатаМодификацииУниверсальная) Тогда
			ЗаписьНабора.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена)
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение, Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиДокумент, ПараметрыОбмена)
	
	ЭлементОчереди = Неопределено;
	
	Если ТипЗнч(ЭлементОчередиДокумент) <> Тип("СтрокаТаблицыЗначений") Тогда
		Для Каждого СтрокаТЧ Из ПараметрыОбмена.ОчередьСообщений Цикл
			Если СтрокаТЧ.Документ = ЭлементОчередиДокумент Тогда
				ЭлементОчереди = СтрокаТЧ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭлементОчереди = ЭлементОчередиДокумент;
	КонецЕсли;
	
	Если ЭлементОчереди = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
	НайденныеСтроки = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение2", ЭлементОчереди.Сообщение);
	НайденныеСтроки = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	
КонецПроцедуры

Процедура ОчиститьОчередьЗапросаСтатусаОтгрузкаТоваровИСМП(ЭлементОчередиАбстрактнойОперации, СтатусОбработки)
	
	ПараметрыОбменаОтгрузка = ИнтеграцияИСМП.ПараметрыОбмена(ЭлементОчередиАбстрактнойОперации.Организация);
	
	ИнтеграцияИСМПСлужебный.ПостроитьОчередьСообщений(ПараметрыОбменаОтгрузка, ЭлементОчередиАбстрактнойОперации.Документ);
	
	Для Каждого ЭлементОчереди Из ПараметрыОбменаОтгрузка.ОчередьСообщений Цикл
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
		Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
		Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
		Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
		Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
		Реквизиты.Вставить("Описание",             "");
		
		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
		ДобавитьЗаписьВПротоколОбмена(
			ПротоколаОбменаXML,
			Реквизиты);
		
		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбменаОтгрузка);
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает сообщение к передаче в сервис ВетИС.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст исходящего сообщения.
//  Реквизиты - Структура - Реквизиты передаваемого сообщения и свойства очереди, например:
//   * ТипСообщения - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
//   * Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция.
//   * Документ - ДокументСсылка - Документ.
//   * СообщениеОснование - СправочникСсылка.ВЕТИСПрисоединенныеФайлы - Сообщение-основание
//   * Описание - Строка - Описание сообщения.
//   * ИдентификаторЗапроса - Строка - Идентификатор запроса.
//   * ФорматОбмена - ПеречислениеСсылка.ФорматыОбменаВЕТИС - Формат обмена.
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийВЕТИС - Статус обработки сообщения.
//   * Версия - Число - Номер версии.
//  РеквизитыОчереди - Неопределено, Структура - Параметры очереди сообщений ВетИС
//
// Возвращаемое значение:
//  Структура - результат подготовки сообщения к отправке с полями:
//    * НовыйСтатус
//    * ИсходящееСообщение
//    * ТекстОшибки
//    * ТребуетсяРасчетОчереди
//
Функция ПодготовитьСообщениеКПередаче(Сообщение, РеквизитыОчереди)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("НовыйСтатус",        Неопределено);
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",        "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если Не ЗначениеЗаполнено(Сообщение.Идентификатор) Тогда
			ИсходящееСообщение = Строка(Новый УникальныйИдентификатор);
		Иначе
			ИсходящееСообщение = Сообщение.Идентификатор;
		КонецЕсли;
		
		ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
		
		Если РеквизитыОчереди <> Неопределено Тогда
			
			ДобавитьСообщениеВОчередьНаПередачуДанных(ИсходящееСообщение, РеквизитыОчереди);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сообщение.Документ) Тогда
			
			МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Сообщение.Документ);
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПодготовкиКПередачеДанных(
				Сообщение.Документ, Сообщение.Операция, Сообщение.ПараметрыЗапроса);
			
		Иначе
			НовыйСтатус = Неопределено;
		КонецЕсли;
		
		ВозвращаемоеЗначение.НовыйСтатус = НовыйСтатус;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При подготовке к передаче сообщения по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			Сообщение.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Добавить сообщение в регистра сведений ОчередьСообщенийИСМП.
//
// Параметры:
//  Сообщение - СправочникСсылка.ИСМППрисоединенныеФайлы - сообщение, которое добавляется в очередь.
//  Реквизиты - Структура                          - реквизиты очереди сообщений ИС МП.
//
Процедура ДобавитьСообщениеВОчередьНаПередачуДанных(Сообщение, Реквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяЗапись = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьМенеджерЗаписи();
	НоваяЗапись.ДатаСоздания       = ТекущаяУниверсальнаяДата();
	НоваяЗапись.Сообщение          = Сообщение;
	НоваяЗапись.СообщениеОснование = Реквизиты.СообщениеОснование;
	
	// Назначение сообщений: ИСМП, МОТП или СУЗ
	НоваяЗапись.ВидПродукции              = Реквизиты.ВидПродукции;
	НоваяЗапись.Операция                  = Реквизиты.Операция;
	НоваяЗапись.Назначение                = Реквизиты.Назначение;
	НоваяЗапись.СтанцияУправленияЗаказами = Реквизиты.СтанцияУправленияЗаказами;
	
	// Источник
	НоваяЗапись.Организация       = Реквизиты.Организация;
	НоваяЗапись.Документ          = Реквизиты.Документ;
	НоваяЗапись.ДокументОснование = Реквизиты.ДокументОснование;
	
	// Описание, протокол и очередь
	НоваяЗапись.РеквизитыИсходящегоСообщения = Новый ХранилищеЗначения(Реквизиты.РеквизитыИсходящегоСообщения);
	НоваяЗапись.ПротоколОбмена               = Новый ХранилищеЗначения(Неопределено);
	НоваяЗапись.ЗагружатьПосле               = Реквизиты.ЗагружатьПосле;
	НоваяЗапись.ЗагружатьДо                  = Реквизиты.ЗагружатьДо;
	НоваяЗапись.ИдентификаторЗаявки          = Реквизиты.ИдентификаторЗаявки;
	
	НоваяЗапись.Записать();
	
КонецПроцедуры

Функция ТребуетсяОбновлениеКлючаСессии(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена)
	
	ТребуетсяОбновлениеКлючаСессии = РезультатыПередачиСообщения.ТребуетсяОбновлениеКлючаСессии;
	Если Не ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено Тогда
		ПараметрыОбмена.КОбновлениюКлючейСессии = Новый Соответствие;
	КонецЕсли;
	
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
		
		РезультатПолученияНастройки = НастройкаОбменаСУЗ(
			ПараметрыОбмена,
			ЭлементОчереди);
		
		Если Не РезультатПолученияНастройки.Успешно Тогда
			Если РезультатПолученияНастройки.ТребуетсяОбновлениеКлючаСессии Тогда
				Возврат Истина;
			Иначе
				ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессииСУЗ(
			РезультатПолученияНастройки.НастройкаОбмена);
		
	Иначе
		ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация);
	КонецЕсли;
	
	Если Не ПараметрыЗапросаДобавленыКОбновлению(ПараметрыОбмена, ПараметрыЗапросаКлючаСессии, ЭлементОчереди) Тогда
	
		РезультатЗапроса = ИнтерфейсАвторизацииИСМПВызовСервера.ЗапроситьПараметрыАвторизации(ПараметрыЗапросаКлючаСессии);
		
		ПараметрыАвторизации = РезультатЗапроса.ПараметрыАвторизации;
		Если ПараметрыАвторизации = Неопределено Тогда
			
			ПриОтменеТранзакции(
				ЭлементОчереди, РезультатЗапроса.ТекстОшибки, ПараметрыОбмена);
			
		Иначе
			
			ДобавитьКОбновлениюКлючейСесии(
				ПараметрыОбмена,
				ЭлементОчереди,
				ПараметрыЗапросаКлючаСессии,
				ПараметрыАвторизации);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьКОбновлениюКлючейСесии(ПараметрыОбмена, ЭлементОчереди, ПараметрыЗапросаКлючаСессии, ПараметрыАвторизации)
	
	ДобавляемоеЗначение = Новый Структура();
	ДобавляемоеЗначение.Вставить("ПараметрыЗапроса",     ПараметрыЗапросаКлючаСессии);
	ДобавляемоеЗначение.Вставить("ПараметрыАвторизации", ПараметрыАвторизации);
	ДобавляемоеЗначение.Вставить("Назначение",           ЭлементОчереди.Назначение);
	
	КоллекцияПоОрганизации = ПараметрыОбмена.КОбновлениюКлючейСессии.Получить(ЭлементОчереди.Организация);
	
	Если КоллекцияПоОрганизации = Неопределено Тогда
		КоллекцияПоОрганизации = Новый Соответствие();
		ПараметрыОбмена.КОбновлениюКлючейСессии.Вставить(ЭлементОчереди.Организация, КоллекцияПоОрганизации);
	КонецЕсли;
	
	КоллекцияПоНазначению = КоллекцияПоОрганизации[ЭлементОчереди.Назначение];
	Если КоллекцияПоНазначению = Неопределено Тогда
		КоллекцияПоНазначению = Новый Соответствие();
		КоллекцияПоОрганизации.Вставить(ЭлементОчереди.Назначение, КоллекцияПоНазначению);
	КонецЕсли;
	
	Если ИнтерфейсАвторизацииИСМПСлужебный.ЭтоПараметрыЗапросаСУЗ(ПараметрыЗапросаКлючаСессии) Тогда
		КоллекцияПоНазначению.Вставить(ПараметрыЗапросаКлючаСессии.ПроизводственныйОбъект, ДобавляемоеЗначение);
	Иначе
		КоллекцияПоНазначению.Вставить(ЭлементОчереди.Назначение, ДобавляемоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗапросаДобавленыКОбновлению(ПараметрыОбмена, ПараметрыЗапросаКлючаСессии, ЭлементОчереди)
	
	КоллекцияПоОрганизации = ПараметрыОбмена.КОбновлениюКлючейСессии[ЭлементОчереди.Организация];
	
	Если КоллекцияПоОрганизации = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоллекцияПоНазначению = КоллекцияПоОрганизации[ЭлементОчереди.Назначение];
	Если КоллекцияПоНазначению = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИнтерфейсАвторизацииИСМПСлужебный.ЭтоПараметрыЗапросаСУЗ(ПараметрыЗапросаКлючаСессии) Тогда
		Возврат КоллекцияПоНазначению[ПараметрыЗапросаКлючаСессии.ПроизводственныйОбъект] <> Неопределено;
	Иначе
		Возврат КоллекцияПоНазначению[ЭлементОчереди.Назначение] <> Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена)
	
	ТекстОшибки = "";
	Если ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки;
	ИначеЕсли ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки;
	КонецЕсли;
	
	Передано = Не ЗначениеЗаполнено(ТекстОшибки);
	
	ЭлементОчереди.ТекстОшибки = ТекстОшибки;
	
	СтрокаРезультата = СтруктураИзменения();
	
	СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
	СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
	СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
	
	СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
	СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
	СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;

	СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
	СтрокаРезультата.ПодготовленоКПередаче = Истина;
	СтрокаРезультата.Передано              = Передано;
	СтрокаРезультата.Принято               = Ложь;
	СтрокаРезультата.НовыйСтатус           = РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус;
	СтрокаРезультата.ОбъектИзменен         = Ложь;
	
	СтрокаРезультата.Сообщение                    = РезультатыПередачиСообщения.Сообщение;
	СтрокаРезультата.ТекстСообщения               = РезультатыПередачиСообщения.ТекстСообщения;
	СтрокаРезультата.ПредставлениеПротоколаОбмена = РезультатыПередачиСообщения.ПредставлениеПротоколаОбмена;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
	Если Не Передано Тогда
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена)
	
	СтрокаРезультата = СтруктураИзменения();
	
	СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
	СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
	СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
	
	СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
	СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
	СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
	
	СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
	СтрокаРезультата.ПодготовленоКПередаче = Ложь;
	СтрокаРезультата.Передано              = Ложь;
	СтрокаРезультата.Принято               = Истина;
	СтрокаРезультата.НовыйСтатус           = Неопределено;
	СтрокаРезультата.ОбъектИзменен         = Ложь;
	
	СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
	СтрокаРезультата.ТекстСообщения               = Неопределено;
	СтрокаРезультата.ПредставлениеПротоколаОбмена = Неопределено;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	
	СтрокаСтопЛист = ПараметрыОбмена.СтопЛист.Добавить();
	СтрокаСтопЛист.Организация = ЭлементОчереди.Организация;
	
КонецПроцедуры

Процедура ПроверитьКлючиСессии(СообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена)
	
	Если СообщенияПоОрганизациям = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СертификатыДляПодписанияНаСервере = Неопределено Тогда
		СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СообщенияПоОрганизациям Цикл
		
		Организация = КлючИЗначение.Ключ;
		Сообщения   = КлючИЗначение.Значение;
		
		Для Каждого Сообщение Из Сообщения Цикл
			
			Организация = Сообщение.Организация;
			Если Сообщение.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП
				И ЗначениеЗаполнено(Сообщение.ТекстСообщенияJSON) Тогда
				
				ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация);
				
			ИначеЕсли Сообщение.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами ТОгда
				
				РезультатПолученияНастройки = НастройкаОбменаСУЗ(
					ПараметрыОбмена,
					Сообщение);
					
				Если Не РезультатПолученияНастройки.Успешно Тогда
					ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
				КонецЕсли;
				
				НастройкаОбмена = РезультатПолученияНастройки.НастройкаОбмена;
				
				Если Не ЗначениеЗаполнено(НастройкаОбмена.ИдентификаторСоединения) Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессииСУЗ(НастройкаОбмена);
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
				ПараметрыЗапросаКлючаСессии, Неопределено, Ложь);
	
			ТребуетсяОбновлениеКлючаСессии = (КлючСессии = Неопределено);
			Если ТребуетсяОбновлениеКлючаСессии Тогда
				
				Если ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено Тогда
					ПараметрыОбмена.КОбновлениюКлючейСессии = Новый Соответствие;
				КонецЕсли;
				
				Если Не ПараметрыЗапросаДобавленыКОбновлению(ПараметрыОбмена, ПараметрыЗапросаКлючаСессии, Сообщение) Тогда
					
					РезультатЗапроса = ИнтерфейсАвторизацииИСМПВызовСервера.ЗапроситьПараметрыАвторизации(ПараметрыЗапросаКлючаСессии);
					
					ПараметрыАвторизации = РезультатЗапроса.ПараметрыАвторизации;
					Если ПараметрыАвторизации = Неопределено Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатЗапроса.ТекстОшибки);
						Продолжить;
					КонецЕсли;
					
					СтрокаСертификата = Неопределено;
					Если СертификатыДляПодписанияНаСервере <> Неопределено Тогда
						
						МенеджерКриптографии = СертификатыДляПодписанияНаСервере.МенеджерКриптографии;
						СтрокаСертификата = СертификатыДляПодписанияНаСервере.Сертификаты.Найти(
							Организация, "Организация");
						
					КонецЕсли;
					
					КлючСессииЗапрошенИУстановлен = Ложь;
					Если СтрокаСертификата <> Неопределено Тогда
						
						// Для авторизации требуется прикрепленная подпись
						ПараметрыCMS = ЭлектроннаяПодпись.ПараметрыCMS();
						ПараметрыCMS.Открепленная = Ложь;
						
						МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтрокаСертификата.Пароль;
						РезультатПодписания = ИнтерфейсАвторизацииИСМПСлужебный.Подписать(
							ПараметрыАвторизации.Данные,
							ПараметрыCMS,
							СтрокаСертификата.СертификатКриптографии,
							МенеджерКриптографии);
						
						Если РезультатПодписания.Успех Тогда
							
							РезультатЗапросаИУстановкиКлючаСессии = ИнтерфейсАвторизацииИСМПСлужебный.ЗапроситьУстановитьКлючСессии(
								ПараметрыЗапросаКлючаСессии,
								ПараметрыАвторизации,
								РезультатПодписания.Подпись);
							
							КлючСессииЗапрошенИУстановлен = РезультатЗапросаИУстановкиКлючаСессии.КлючСессииУстановлен;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не КлючСессииЗапрошенИУстановлен Тогда
						
						ДобавитьКОбновлениюКлючейСесии(
							ПараметрыОбмена,
							Сообщение,
							ПараметрыЗапросаКлючаСессии,
							ПараметрыАвторизации)
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьОчередьСообщений(ПараметрыОбмена)
	
	СтруктураПоискаСтопЛист = Новый Структура("Организация");
	
	ПовторитьЦиклОбработкиСообщений  = Истина;
	
	МинимальноеКоличествоИтераций    = 0;
	МинимальнаяДатаСледующейОперации = Неопределено;
	
	Пока ПовторитьЦиклОбработкиСообщений Цикл
		
		ПовторитьЦиклОбработкиСообщений = Ложь;
		
		МинимальноеКоличествоИтераций    = 0;
		МинимальнаяДатаСледующейОперации = Неопределено;
		
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
			
			СтруктураПоискаСтопЛист.Организация = ЭлементОчереди.Организация;
			
			Если ПараметрыОбмена.СтопЛист.НайтиСтроки(СтруктураПоискаСтопЛист).Количество() > 0 Тогда
				// При выполнении обмена по организации были ошибки. Пропустим сообщения.
				Продолжить;
			КонецЕсли;
			
			ДатаСледующейИтерации = Неопределено;
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если Не ЗначениеЗаполнено(ЭлементОчереди.ИдентификаторЗаявки) Тогда
				
				НайденныеЗависимости = Неопределено;
				Если СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации) Тогда
					
					ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена);
					
				ИначеЕсли НайденныеЗависимости <> Неопределено Тогда
					
					// Если зависимых сообщений нет в очереди - сообщение удаляется из очереди (Защита от зацикливания).
					Для Каждого НайденныеЗависимостиЭлементДанных Из НайденныеЗависимости Цикл
						Если ПараметрыОбмена.ОчередьСообщений.Найти(НайденныеЗависимостиЭлементДанных.Сообщение2, "Сообщение") = Неопределено Тогда
							ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				НайденныеЗависимости = Неопределено;
				Если СообщениеМожноЗагружать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации) Тогда
					
					Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
						
						Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
							
							РезультатПолученияНастройки = НастройкаОбменаСУЗ(
								ПараметрыОбмена,
								ЭлементОчереди,
								Истина);
								
							Если Не РезультатПолученияНастройки.Успешно Тогда
								Если РезультатПолученияНастройки.ТребуетсяОбновлениеКлючаСессии Тогда
									Продолжить;
								Иначе
									ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
								КонецЕсли;
							КонецЕсли;
							
							ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировкиИСМП(
								ЭлементОчереди, ПараметрыОбмена, РезультатПолученияНастройки.НастройкаОбмена);
							
						ИначеЕсли ЭтоЗапросСуществующихGTINНаОстатки(ЭлементОчереди, ПараметрыОбмена) Тогда
							ЗапроситьСуществующиеGTINНаОстатки(ЭлементОчереди, ПараметрыОбмена);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Агрегация 
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Приемка 
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонить
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулировать
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТК
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
							// Фиктивная операция по изменению статуса и записи протокола обмена
							ЗагрузитьРезультатОбработкиАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса Тогда
							// Фиктивная операция по изменению статуса для трансформации агрегатов
							ЗагрузитьРезультатОбработкиАбстрактнойАгрегацииИзменениеРасчетСтатуса(ЭлементОчереди, ПараметрыОбмена);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаАгент
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаБезвозмезднаяПередача
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаДляСобственныхНуждПокупателя 
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаКомиссия
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаПриобретениеГосПредприятием 
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаПродажа
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонен
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКИзменение
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКУдаление
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
							ЗагрузитьРезультатОбработкиАгрегацииПриемкиОтгрузкиТоваров(ЭлементОчереди, ПараметрыОбмена);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗагрузкаВходящихДокументов Тогда
							ЗагрузитьВходящиеДокументы(ЭлементОчереди, ПараметрыОбмена);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
							ЗагрузитьСодержаниеРезультатаОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки Тогда
							ЗагрузитьРезультатОбработкиОтчетОбИспользованииКМРасчетСтатусаКодовМаркировки(ЭлементОчереди, ПараметрыОбмена);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента
							Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента Тогда
							ЗагрузитьРезультатПроверкаСтатусаОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена);
						Иначе
							ЗагрузитьРезультатОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена);
						КонецЕсли;
						
					ИначеЕсли ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
						
						РезультатПолученияНастройки = НастройкаОбменаСУЗ(ПараметрыОбмена, ЭлементОчереди, Истина);
						Если Не РезультатПолученияНастройки.Успешно Тогда
							Если РезультатПолученияНастройки.ТребуетсяОбновлениеКлючаСессии Тогда
								Продолжить;
							Иначе
								ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
							КонецЕсли;
						КонецЕсли;
						НастройкаОбменаСУЗ = РезультатПолученияНастройки.НастройкаОбмена;
						
						Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
							// Фиктивная операция по изменению статуса и записи протокола обмена
							ЗагрузитьРезультатОбработкиЗаказаНаЭмиссиюКодовМаркировкиСУЗ(
								ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса Тогда
							// Фиктивная операция для расчета статуса по нескольким сообщениями.
							ЗагрузитьРезультатОбработкиЗапросаЗаказНаЭмиссиюСУЗАбстрактнаяОперация(
								ЭлементОчереди, ПараметрыОбмена);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ Тогда
							ЗагрузитьКодыМаркировки(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПовторноеПолучениеКодовМаркировкиИзСУЗ Тогда
							ЗагрузитьКодыМаркировкиПовторно(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ Тогда
							ПередатьСообщениеОЗакрытииПодзаказаНаЭмиссиюКодовМаркировкиСУЗ(
								ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса Тогда
							//Фиктивная операция для расчета статуса по нескольким сообщениями.
							ЗагрузитьРезультатОбработкиОтчетОбИспользованииКМРасчетСтатуса(
								ЭлементОчереди, ПараметрыОбмена);
						ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
							ЗагрузитьРезультатОбработкиВводаВОборот(
								ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
						Иначе
							ЗагрузитьРезультатОбработкиОтчетаСУЗ(ЭлементОчереди, ПараметрыОбмена, НастройкаОбменаСУЗ);
						КонецЕсли;
						
					Иначе
						ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
					КонецЕсли;
					
				ИначеЕсли НайденныеЗависимости <> Неопределено Тогда
					
					// Если зависимых сообщений нет в очереди - сообщение удаляется из очереди (Защита от зацикливания).
					Для Каждого НайденныеЗависимостиЭлементДанных Из НайденныеЗависимости Цикл
						Если ПараметрыОбмена.ОчередьСообщений.Найти(НайденныеЗависимостиЭлементДанных.Сообщение2, "Сообщение") = Неопределено Тогда
							ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДатаСледующейИтерации <> Неопределено
				И (МинимальнаяДатаСледующейОперации = Неопределено Или МинимальнаяДатаСледующейОперации > ДатаСледующейИтерации) Тогда
				МинимальнаяДатаСледующейОперации = ДатаСледующейИтерации;
			КонецЕсли;
			
			Если ЭлементОчереди.КоличествоИтераций < МинимальноеКоличествоИтераций Тогда
				МинимальноеКоличествоИтераций = ЭлементОчереди.КоличествоИтераций;
			КонецЕсли;
			
		КонецЦикла;
		
		// Действия после основного цикла очереди.
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОбработанныеЭлементыОчереди Цикл
			Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчереди) <> -1 Тогда
				ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчереди);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Очистить();
		
		Если МинимальнаяДатаСледующейОперации <> Неопределено
			И МинимальнаяДатаСледующейОперации < ТекущаяДатаСеанса() Тогда
			ПовторитьЦиклОбработкиСообщений = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МинимальнаяДатаСледующейОперации;
	
КонецФункции

Функция СообщениеМожноЗагружать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости = Неопределено, ДатаСледующейИтерации = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение); // Есть ли сообщения
	ПараметрыОтбора.Вставить("Загрузка",   Ложь);
	
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	ЕстьЗависимости = (НайденныеЗависимости.Количество() > 0);
	
	Если ЕстьЗависимости Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяОбновлениеКлючаСессии = Ложь;
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП
		Или ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
		ТребуетсяОбновлениеКлючаСессии = ДанныеКОбновлениюКлючейСессииПрисутствуют(ПараметрыОбмена, ЭлементОчереди);
	Иначе
		ТребуетсяОбновлениеКлючаСессии = Ложь;
	КонецЕсли;
	
	Если ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяПодписание = Ложь;
	Если ПараметрыОбмена.СообщенияКПодписанию = Неопределено Тогда
		ТребуетсяПодписание = Ложь;
	Иначе
		ТребуетсяПодписание = (ПараметрыОбмена.СообщенияКПодписанию[ЭлементОчереди.Организация] <> Неопределено);
	КонецЕсли;

	Если ТребуетсяПодписание Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяОжидание = Не (ЭлементОчереди.ДатаСледующейИтерации = Неопределено
	                    Или ЭлементОчереди.ДатаСледующейИтерации < ТекущаяДатаСеанса());
	Если ТребуетсяОжидание Тогда
		
		ДатаСледующейИтерации = ЭлементОчереди.ДатаСледующейИтерации;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
		
		РезультатПолученияНастройки = НастройкаОбменаСУЗ(
			ПараметрыОбмена,
			ЭлементОчереди);
		Если Не РезультатПолученияНастройки.Успешно Тогда
			Если РезультатПолученияНастройки.ТребуетсяОбновлениеКлючаСессии Тогда
				Возврат Ложь;
			Иначе
				ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		НастройкаОбменаСУЗ = РезультатПолученияНастройки.НастройкаОбмена;
		
		Если НастройкаОбменаСУЗ <> Неопределено Тогда
			
			ВремяОжидания = ИнтерфейсСУЗ.ВремяОжиданияСледующегоЗапросаСУЗ(НастройкаОбменаСУЗ);
			Если ВремяОжидания > 0 Тогда
				ДатаСледующейИтерации = ТекущаяДатаСеанса() + ВремяОжидания;
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПараметрыКонтроляАктивныхЗаказов(ПараметрыОбмена, ЭлементОчереди, Инициализация = Ложь)
	
	СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
	ПараметрыКонтроля         = ПараметрыОбмена.КонтрольКоличестваЗаказовСУЗ.Получить(СтанцияУправленияЗаказами);
	
	Если Инициализация И ПараметрыКонтроля = Неопределено Тогда
		
		ПараметрыКонтроля = НоваяСтруктураАктивныхЗаказовПоСУЗ();
		ПараметрыОбмена.КонтрольКоличестваЗаказовСУЗ.Вставить(СтанцияУправленияЗаказами, ПараметрыКонтроля);
		
	КонецЕсли;
	
	Возврат ПараметрыКонтроля;
	
КонецФункции

Функция ДанныеКОбновлениюКлючейСессииПрисутствуют(ПараметрыОбмена, ЭлементОчереди)
	
	Если ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоллекцияПоОрганизации = ПараметрыОбмена.КОбновлениюКлючейСессии[ЭлементОчереди.Организация];
	Если КоллекцияПоОрганизации = Неопределено
		Или КоллекцияПоОрганизации.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости = Неопределено, ДатаСледующейИтерации = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
	ПараметрыОтбора.Вставить("Передача",   Ложь);
	
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	ЕстьЗависимости = (НайденныеЗависимости.Количество() > 0);
	
	Если ЕстьЗависимости Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяОбновлениеКлючаСессии = Ложь;
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП
		Или ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
		ТребуетсяОбновлениеКлючаСессии = ДанныеКОбновлениюКлючейСессииПрисутствуют(ПараметрыОбмена, ЭлементОчереди);
	Иначе
		ТребуетсяОбновлениеКлючаСессии = Ложь;
	КонецЕсли;
	
	Если ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ТребуетсяПодписание
		И Не ЭлементОчереди.РеквизитыИсходящегоСообщения.Свойство("СвойстваПодписи") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяОжидание = Не (ЭлементОчереди.ДатаСледующейИтерации = Неопределено
	                    Или ЭлементОчереди.ДатаСледующейИтерации < ТекущаяДатаСеанса());
	Если ТребуетсяОжидание Тогда
		
		ДатаСледующейИтерации = ЭлементОчереди.ДатаСледующейИтерации;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
			
			ПараметрыКонтроля = ПараметрыКонтроляАктивныхЗаказов(ПараметрыОбмена, ЭлементОчереди);
			
			Если ПараметрыКонтроля <> Неопределено Тогда
				
				ВремяСледующегоЗапроса = ПараметрыКонтроля.ДатаПоследнегоЗапросаПревышения + ПериодичностьОтправкиЗаказовПослеПревышения();
				
				НаступилоВремяОбмена = (ВремяСледующегоЗапроса <= ТекущаяДатаСеанса());
				СУЗПолный = (ПараметрыКонтроля.ТекущееКоличествоЗаказов >= МаксимальноеКоличествоЗаказовВОчередиСУЗ());
				
				Если Не НаступилоВремяОбмена И СУЗПолный Тогда
					ДатаСледующейИтерации = ВремяСледующегоЗапроса;
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
		РезультатПолученияНастройки = НастройкаОбменаСУЗ(
			ПараметрыОбмена,
			ЭлементОчереди);
		
		Если Не РезультатПолученияНастройки.Успешно Тогда
			Если РезультатПолученияНастройки.ТребуетсяОбновлениеКлючаСессии Тогда
				Возврат Ложь;
			Иначе
				ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		НастройкаОбменаСУЗ = РезультатПолученияНастройки.НастройкаОбмена;
		
		Если НастройкаОбменаСУЗ <> Неопределено Тогда
			
			ВремяОжидания = ИнтерфейсСУЗ.ВремяОжиданияСледующегоЗапросаСУЗ(НастройкаОбменаСУЗ);
			Если ВремяОжидания > 0 Тогда
				ДатаСледующейИтерации = ТекущаяДатаСеанса() + ВремяОжидания;
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ДоступныеСертификаты(СообщенияПоОрганизациям, ДоступныеСертификаты = Неопределено)
	
	Если СообщенияПоОрганизациям = Неопределено Тогда
		Возврат ДоступныеСертификаты;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СообщенияПоОрганизациям Цикл
		
		Организация = КлючИЗначение.Ключ;
		
		Если ДоступныеСертификаты = Неопределено Тогда
			ДоступныеСертификаты = Новый Соответствие;
		КонецЕсли;
		
		СертификатыПользователяДляПодписиПоОрганизации = ДоступныеСертификаты[Организация];
		Если СертификатыПользователяДляПодписиПоОрганизации = Неопределено Тогда
			ДоступныеСертификаты.Вставить(
				Организация,
				ИнтеграцияГИСМВызовСервера.СертификатыПользователяДляПодписиПоОрганизации(Организация));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныеСертификаты;
	
КонецФункции

Функция СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена)
	
	ПодписанныеСообщенияПоОрганизациям = Неопределено;
	
	Для Каждого СообщениеJSON Из СообщенияJSON Цикл
		
		ТребуетсяПодписание = СообщениеJSON.ТребуетсяПодписание И Не ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки);
		
		СтрокаСертификата = Неопределено;
		Если СертификатыДляПодписанияНаСервере <> Неопределено И ТребуетсяПодписание Тогда
			
			МенеджерКриптографии = СертификатыДляПодписанияНаСервере.МенеджерКриптографии;
			
			СтрокаСертификата = СертификатыДляПодписанияНаСервере.Сертификаты.Найти(
				СообщениеJSON.Организация,
				"Организация");
			
		КонецЕсли;
		
		Если (ТребуетсяПодписание
			И СтрокаСертификата <> Неопределено) Или Не ТребуетсяПодписание Тогда
			
			Если ТребуетсяПодписание Тогда
				
				// Для подписания документов требуется открепленная подпись
				ПараметрыCMS = ЭлектроннаяПодпись.ПараметрыCMS();
				ПараметрыCMS.Открепленная = Истина;
				
				МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтрокаСертификата.Пароль;
				РезультатПодписания = ИнтерфейсАвторизацииИСМПСлужебный.Подписать(
					СообщениеJSON.ТекстСообщенияJSON,
					ПараметрыCMS,
					СтрокаСертификата.СертификатКриптографии,
					МенеджерКриптографии);
				
				Если РезультатПодписания.Успех Тогда
					
					ТребуетсяПодписание = Ложь;
					
					СвойстваПодписи = Новый Структура;
					СвойстваПодписи.Вставить("Подпись", РезультатПодписания.Подпись);
					СообщениеJSON.Вставить("СвойстваПодписи", СвойстваПодписи);
					
					Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
						ПодписанныеСообщенияПоОрганизациям = Новый Соответствие;
					КонецЕсли;
					
					ПодписанныеСообщения = ПодписанныеСообщенияПоОрганизациям[СообщениеJSON.Организация];
					Если ПодписанныеСообщения = Неопределено Тогда
						ПодписанныеСообщенияПоОрганизациям.Вставить(СообщениеJSON.Организация, Новый Массив);
					КонецЕсли;
					
					ПодписанныеСообщенияПоОрганизациям[СообщениеJSON.Организация].Добавить(СообщениеJSON);
					
				КонецЕсли;
				
			Иначе
				
				Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
					ПодписанныеСообщенияПоОрганизациям = Новый Соответствие;
				КонецЕсли;
				
				ПодписанныеСообщения = ПодписанныеСообщенияПоОрганизациям[СообщениеJSON.Организация];
				Если ПодписанныеСообщения = Неопределено Тогда
					ПодписанныеСообщенияПоОрганизациям.Вставить(СообщениеJSON.Организация, Новый Массив);
				КонецЕсли;
				
				ПодписанныеСообщенияПоОрганизациям[СообщениеJSON.Организация].Добавить(СообщениеJSON);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяПодписание Тогда
			
			Если ПараметрыОбмена.СообщенияКПодписанию = Неопределено Тогда
				ПараметрыОбмена.СообщенияКПодписанию = Новый Соответствие;
			КонецЕсли;
			
			СообщенияКПодписанию = ПараметрыОбмена.СообщенияКПодписанию[СообщениеJSON.Организация];
			Если СообщенияКПодписанию = Неопределено Тогда
				ПараметрыОбмена.СообщенияКПодписанию.Вставить(СообщениеJSON.Организация, Новый Массив);
			КонецЕсли;
			
			ПараметрыОбмена.СообщенияКПодписанию[СообщениеJSON.Организация].Добавить(СообщениеJSON);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодписанныеСообщенияПоОрганизациям;
	
КонецФункции

Функция НастройкаОбменаСУЗ(ПараметрыОбмена, ЭлементОчереди, ПроверятьДоступность = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Успешно",                        Истина);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("НастройкаОбмена",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	НастройкиПоОрганизации = ПараметрыОбмена.НастройкиОбменаСУЗ.ОбменНаСервере.Получить(ЭлементОчереди.Организация);
	
	Если НастройкиПоОрганизации <> Неопределено Тогда
		
		НастройкаБезПроизводственногоОбъекта = Неопределено;
		
		Для Каждого НастройкаОбмена Из НастройкиПоОрганизации Цикл
			
			Если ЗначениеЗаполнено(ЭлементОчереди.СтанцияУправленияЗаказами)
				И ЭлементОчереди.СтанцияУправленияЗаказами <> НастройкаОбмена.СтанцияУправленияЗаказами Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НастройкаОбмена.ПроизводственныйОбъект) Тогда
				НастройкаБезПроизводственногоОбъекта = НастройкаОбмена;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЭлементОчереди.ПроизводственныйОбъект)
				Или НастройкаОбмена.ПроизводственныйОбъект = ЭлементОчереди.ПроизводственныйОбъект Тогда
				ВозвращаемоеЗначение.НастройкаОбмена = НастройкаОбмена;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВозвращаемоеЗначение.НастройкаОбмена = Неопределено
			И НастройкаБезПроизводственногоОбъекта <> Неопределено Тогда
			ВозвращаемоеЗначение.НастройкаОбмена = НастройкаБезПроизводственногоОбъекта;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВозвращаемоеЗначение.НастройкаОбмена = Неопределено Тогда
		
		ВозвращаемоеЗначение.Успешно     = Ложь;
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось определить активную настройку СУЗ для документа: %1
			           |Проверьте производственный объект, идентификатор соединения в настройках подключения к СУЗ.'"),
			ЭлементОчереди.Документ);
		
	ИначеЕсли ПроверятьДоступность Тогда
		
		РезультатПроверкиСУЗ = ИнтерфейсСУЗ.ПроверитьДоступностьСУЗ_V2(
			ЭлементОчереди.ВидПродукции,
			ВозвращаемоеЗначение.НастройкаОбмена);
			
		Если ТребуетсяОбновлениеКлючаСессии(РезультатПроверкиСУЗ, ЭлементОчереди, ПараметрыОбмена) Тогда
			ВозвращаемоеЗначение.Успешно                        = Ложь;
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Требуется обновление ключа сессии СУЗ: %1
				           |для документа: %2'"),
				ВозвращаемоеЗначение.НастройкаОбмена.СтанцияУправленияЗаказами,
				ЭлементОчереди.Документ);
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		Если Не РезультатПроверкиСУЗ.Доступен
			Или ЗначениеЗаполнено(РезультатПроверкиСУЗ.ТекстОшибки) Тогда
			
			ВозвращаемоеЗначение.Успешно = Ложь;
			
			Если ЗначениеЗаполнено(РезультатПроверкиСУЗ.ТекстОшибки) Тогда
				ВозвращаемоеЗначение.ТекстОшибки = РезультатПроверкиСУЗ.ТекстОшибки;
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не удалось определить доступность СУЗ: %1 (%2)
					           |для документа: %3'"),
					ВозвращаемоеЗначение.НастройкаОбмена.СтанцияУправленияЗаказами,
					ЭлементОчереди.ПроизводственныйОбъект,
					ЭлементОчереди.Документ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


Функция ЗаголовкиИзHTTPОтвета(HTTPОтвет) Экспорт
	
	ОтветЗаголовки = Новый Массив;
	
	ИгноруемыеЗаголовки = Новый Соответствие;
	ИгноруемыеЗаголовки.Вставить(ВРег("Set-Cookie"),             Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Expires"),                Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Via"),                    Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Connection"),             Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Proxy-Connection"),       Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Server"),                 Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Vary"),                   Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-Frame-Options"),        Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Transfer-Encoding"),      Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Pragma"),                 Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-Content-Type-Options"), Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-XSS-Protection"),       Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Cache-Control"),          Истина);
	
	Для Каждого КлючИЗначение Из HTTPОтвет.Заголовки Цикл
		Заголовок = КлючИЗначение.Ключ;
		Если ИгноруемыеЗаголовки[ВРег(Заголовок)] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОтветЗаголовки.Добавить(
			СтрШаблон("%1: %2", Заголовок, КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат СтрСоединить(ОтветЗаголовки, Символы.ПС);
	
КонецФункции

Функция ПодписьИзСвойствПодписи(ВходящиеДанные) Экспорт

	Если ТипЗнч(ВходящиеДанные) = Тип("Строка") Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		СвойстваПодписи = ВходящиеДанные;
	КонецЕсли;

	Если ТипЗнч(СвойстваПодписи) = Тип("Структура") Тогда
		Подпись = СвойстваПодписи.Подпись;
	Иначе
		Подпись = "";
	КонецЕсли;

	Возврат Подпись;

КонецФункции

Функция КонвертированныйОбщийСтатусДокумента(ИсходныйСтатус, Документ)

	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Документ);
	Возврат МенеджерОбъекта.КонвертированныйОбщийСтатус(ИсходныйСтатус);

КонецФункции

Функция РазобратьТекстОшибки(Знач ТекстОшибки, ЗаголовокОшибки) Экспорт
	
	НомерНачальногоСимвола = СтрНайти(ТекстОшибки, "{");
	Если НомерНачальногоСимвола = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерКонечногоСимвола = СтрНайти(ТекстОшибки, "}");
	Если НомерКонечногоСимвола = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаголовокОшибки = Лев(ТекстОшибки, НомерНачальногоСимвола -1);
	
	ТекстОшибкиJSON = Сред(ТекстОшибки, НомерНачальногоСимвола, НомерКонечногоСимвола - НомерНачальногоСимвола + 1);
	Возврат ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(ТекстОшибкиJSON, Ложь);
	
КонецФункции

// Выполняет разбор кода маркировки для бизнес заказа.
//
// Параметры:
//   КодМаркировки            - Строка                - код маркировки.
//   СтрокаЗаказаНаЭмиссию    - СтрокаТаблицыЗначений - Строка таблицы Товары заказа на эмиссию.
//   КэшРазбораКодаМаркировки - Неопределено          - Заполняется служебными данными при первом вызове.
//
// Возвращаемое значение:
//    Структура:
//     * НормализованныйКодМаркировки - Строка.
//     * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов.
//     * СрокГодности - Дата - Актуально только для молочной продукции.
//
Функция РазобратьКодМаркировкиДляБизнесЗаказа(КодМаркировки, СтрокаЗаказаНаЭмиссию, КэшРазбораКодаМаркировки)
	
	ВидПродукции = СтрокаЗаказаНаЭмиссию.ВидПродукции;
	// Предполагаем, что:
	// 1. В коде маркировки, до "Серийного номера", отсутствуют недопустимые символы (СУЗ передает качественные коды).
	// 2. Коды маркировки однотипные и разбираются по одному шаблону.
	// Полный разбор кода маркировки выполняем один раз, при первом вызове. При последующих вызовах,
	// из кода маркировки получаем только "Серийный номер" по позиции в шаблоне.
	
	Если КэшРазбораКодаМаркировки = Неопределено Тогда
		
		Настройки = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(ВидПродукции);
		
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			КодМаркировки, ВидПродукции, ПримечаниеКРезультатуРазбора, Настройки);
		
		Если ДанныеРазбора = Неопределено Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru ='Не удалось разобрать код маркировки: %1
				          |%2'"),
				СтрЗаменить(КодМаркировки, Символ(29), "<GS>"),
				ПримечаниеКРезультатуРазбора.ТекстОшибки);
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеРазбора.ШаблонРазбораКодаМаркировки) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru ='Не удалось определить шаблон кода маркировки: %1'"),
				КодМаркировки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеРазбора.ВидУпаковки) Тогда
			ВидУпаковкиШаблона = ИнтеграцияИСМПСлужебныйКлиентСервер.ВидУпаковкиПоШаблонуКодаМаркировки(СтрокаЗаказаНаЭмиссию.Шаблон);
			Если Не РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(ВидПродукции, ВидУпаковкиШаблона, ДанныеРазбора) Тогда
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru ='Не удалось определить вид упаковки в код маркировки: %1
				              |%2'"),
				СтрЗаменить(КодМаркировки, Символ(29), "<GS>"),
				ПримечаниеКРезультатуРазбора.ТекстОшибки);
				
			КонецЕсли;
			ДанныеРазбора.ВидУпаковки = ВидУпаковкиШаблона;
		КонецЕсли;
		
		СрокГодности = '00010101';
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
			Если ДанныеРазбора.СоставКодаМаркировки.Свойство("ГоденДо")
				И ЗначениеЗаполнено(ДанныеРазбора.СоставКодаМаркировки.ГоденДо) Тогда
				СрокГодности = ДанныеРазбора.СоставКодаМаркировки.ГоденДо;
			КонецЕсли;
		КонецЕсли;
		
		ПозицииЭлементовКодаМаркировки = Настройки.ШаблоныИОписанияВидовПродукции[ДанныеРазбора.ШаблонРазбораКодаМаркировки].ПозицииЭлементовКодаМаркировки;
		
		НормализованныйКодМаркировки = ДанныеРазбора.НормализованныйКодМаркировки;
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
			ПараметрыНормализации        = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
			НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				ДанныеРазбора,
				ВидПродукции,
				ПараметрыНормализации);
		КонецЕсли;
		
		КодМаркировкиДляНормализации = СтрЗаменить(НормализованныйКодМаркировки, ДанныеРазбора.СоставКодаМаркировки.СерийныйНомер, "СерийныйНомер");
		
		ИмяСвойстваПозиции = "ПозицияЗначения";
		Если СтрНачинаетсяС(КодМаркировки, "(") Тогда
			ИмяСвойстваПозиции = "ПозицияЗначенияСоСкобкой";
		КонецЕсли;
		
		КэшРазбораКодаМаркировки = Новый Структура;
		КэшРазбораКодаМаркировки.Вставить("ТипШтрихкода",                 ДанныеРазбора.ТипШтрихкода);
		КэшРазбораКодаМаркировки.Вставить("СерийныйНомерПозицияЗначения", ПозицииЭлементовКодаМаркировки["СерийныйНомер"][ИмяСвойстваПозиции]);
		КэшРазбораКодаМаркировки.Вставить("СерийныйНомерДлинаЗначения",   ПозицииЭлементовКодаМаркировки["СерийныйНомер"].ДлинаЗначения);
		КэшРазбораКодаМаркировки.Вставить("КодМаркировкиДляНормализации", КодМаркировкиДляНормализации);
		КэшРазбораКодаМаркировки.Вставить("СрокГодности",                 СрокГодности);
		
		РезультатРазбора = Новый Структура;
		РезультатРазбора.Вставить("ТипШтрихкода",                 ДанныеРазбора.ТипШтрихкода);
		РезультатРазбора.Вставить("НормализованныйКодМаркировки", НормализованныйКодМаркировки);
		РезультатРазбора.Вставить("СрокГодности",                 СрокГодности);
		
		Возврат РезультатРазбора;
		
	КонецЕсли;
	
	СерийныйНомер = Сред(КодМаркировки, КэшРазбораКодаМаркировки.СерийныйНомерПозицияЗначения, КэшРазбораКодаМаркировки.СерийныйНомерДлинаЗначения);
	
	НормализованныйКодМаркировки = СтрЗаменить(КэшРазбораКодаМаркировки.КодМаркировкиДляНормализации, "СерийныйНомер", СерийныйНомер);
	
	РезультатРазбора = Новый Структура;
	РезультатРазбора.Вставить("ТипШтрихкода",                 КэшРазбораКодаМаркировки.ТипШтрихкода);
	РезультатРазбора.Вставить("НормализованныйКодМаркировки", НормализованныйКодМаркировки);
	РезультатРазбора.Вставить("СрокГодности",                 КэшРазбораКодаМаркировки.СрокГодности);
	
	Возврат РезультатРазбора;
	
КонецФункции

Процедура ЗаписатьЛогЗапросовВПараметрыОбмена(ПараметрыОбмена)
	
	Если ИнтеграцияИСМПКлиентСерверПовтИсп.ЭтоФоновоеЗаданиеНаСервере() Тогда
		ПараметрыЛогирования = ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов();
		Если ПараметрыЛогирования.Включено Тогда
			ДанныеЛогаЗапросов = ЛогированиеЗапросовИСМП.СодержаниеЛогаЗапросов();
			Если ДанныеЛогаЗапросов <> Неопределено Тогда
				ПараметрыОбмена.АдресДанныхЛогаЗапроса = ПоместитьВоВременноеХранилище(ДанныеЛогаЗапросов, ПараметрыОбмена.АдресДанныхЛогаЗапроса);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Проверяет на соответствие табличной части "Товары" списку штрихкодов упаковок.
// 
// Параметры:
//  Товары - ТабличнаяЧасть - Табличная часть, где хранится список товаров маркируемой продукции.
//  СписокУпаковок - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - список связанных штрихкодов упаковок.
//  ПараметрыСканирования - Структура - См. ПараметрыСканирования.
// Возвращаемое значение:
//  Структура - 
Функция ТаблицаТоварыСоответствуетСпискуУпаковокМаркируемойПродукции(Товары, СписокУпаковок, ПараметрыСканирования)
	
	РезультатПроверки = Новый Структура("ДанныеСоответствуют, СтрокиСРасхождением", Истина, Новый Массив);
	
	ДанныеПоШтрихкодам = ЭлектронноеВзаимодействиеИСМП.Содержимое(СписокУпаковок);
	
	ДанныеДляПроверки = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		СоответствиеНоменклатура = ДанныеДляПроверки.Получить(СтрокаТЧ.Номенклатура);
		Если СоответствиеНоменклатура = Неопределено Тогда
			СоответствиеНоменклатура = Новый Соответствие;
			ДанныеДляПроверки.Вставить(СтрокаТЧ.Номенклатура, СоответствиеНоменклатура);
		КонецЕсли;
		
		СоответствиеХарактеристика = СоответствиеНоменклатура.Получить(СтрокаТЧ.Характеристика);
		Если СоответствиеХарактеристика = Неопределено Тогда
			СоответствиеХарактеристика = Новый Соответствие;
			СоответствиеНоменклатура.Вставить(СтрокаТЧ.Характеристика, СоответствиеХарактеристика);
		КонецЕсли;
		
		ДанныеСерия = СоответствиеХарактеристика.Получить(СтрокаТЧ.Серия);
		Если ДанныеСерия = Неопределено Тогда
			ДанныеСерия = Новый Структура("НомераСтрок,Количество,КодовМаркировки", Новый Массив, 0, 0);
		КонецЕсли;
		
		ДанныеСерия.НомераСтрок.Добавить(СтрокаТЧ.НомерСтроки);
		ДанныеСерия.Количество = ДанныеСерия.Количество + СтрокаТЧ.Количество;
		СоответствиеХарактеристика.Вставить(СтрокаТЧ.Серия, ДанныеСерия);
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ДанныеПоШтрихкодам Цикл
		
		СоответствиеНоменклатура = ДанныеДляПроверки.Получить(СтрокаТЧ.Номенклатура);
		Если СоответствиеНоменклатура = Неопределено Тогда
			СоответствиеНоменклатура = Новый Соответствие;
			ДанныеДляПроверки.Вставить(СтрокаТЧ.Номенклатура, СоответствиеНоменклатура);
		КонецЕсли;
		
		СоответствиеХарактеристика = СоответствиеНоменклатура.Получить(СтрокаТЧ.Характеристика);
		Если СоответствиеХарактеристика = Неопределено Тогда
			СоответствиеХарактеристика = Новый Соответствие;
			СоответствиеНоменклатура.Вставить(СтрокаТЧ.Характеристика, СоответствиеХарактеристика);
		КонецЕсли;
		
		ДанныеСерия = СоответствиеХарактеристика.Получить(СтрокаТЧ.Серия);
		Если ДанныеСерия = Неопределено Тогда
			ДанныеСерия = Новый Структура("НомераСтрок,Количество,КодовМаркировки", Новый Массив, 0, 0);
		КонецЕсли;
		
		ДанныеСерия.КодовМаркировки = ДанныеСерия.КодовМаркировки + СтрокаТЧ.Количество;
		СоответствиеХарактеристика.Вставить(СтрокаТЧ.Серия, ДанныеСерия);
		
	КонецЦикла;
	
	ШаблонРасхождение = Новый Структура("НомерСтроки, Номенклатура, Необходимо, Указано", -1);
	Для Каждого КлючиНоменклатура Из ДанныеДляПроверки Цикл
		Для Каждого КлючиХарактеристика Из КлючиНоменклатура.Значение Цикл
			Для Каждого КлючиСерия Из КлючиХарактеристика.Значение Цикл
				ДанныеСерии = КлючиСерия.Значение;
				Если ДанныеСерии.Количество <> ДанныеСерии.КодовМаркировки Тогда
					РезультатПроверки.ДанныеСоответствуют = Ложь;
					СтрокаСРасхождением = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонРасхождение);
					СтрокаСРасхождением.Номенклатура = КлючиНоменклатура.Ключ;
					СтрокаСРасхождением.Необходимо = ДанныеСерии.Количество;
					СтрокаСРасхождением.Указано = ДанныеСерии.КодовМаркировки;
					Если ДанныеСерии.НомераСтрок.Количество() Тогда
						СтрокаСРасхождением.НомерСтроки = ДанныеСерии.НомераСтрок[0];
					КонецЕсли;
					РезультатПроверки.СтрокиСРасхождением.Добавить(СтрокаСРасхождением);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции
