#Область ПрограммныйИнтерфейс

Функция ДоступенПросмотрЖурналаРегистрации() Экспорт

	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.ЖурналРегистрации);

КонецФункции

Функция ЭтоПростойИнтерфейс() Экспорт
	
	Возврат ОбщегоНазначенияБП.ЭтоПростойИнтерфейс();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДВИЖЕНИЯМИ ДОКУМЕНТОВ

// Процедура удаления существующих движений документа при перепроведении (отмене проведения)
Процедура УдалитьДвиженияРегистратора(ДокументОбъект, Отказ, РучнаяКорректировка = Ложь) Экспорт

	Если РучнаяКорректировка Тогда
		ИзменитьАктивностьПоРегистратору(ДокументОбъект, Отказ, Ложь);
		возврат;
	КонецЕсли;

	//Очистка движений документа
	Для Каждого Движение ИЗ ДокументОбъект.Движения Цикл
		Движение.Очистить();
	КонецЦикла;

	ПропуститьПроверкуЗапретаИзменения = ДокументОбъект.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения");

	//Запись пустых наборов движений в ИБ(очистка старых движений)
	Для Каждого Движение ИЗ ДокументОбъект.Движения Цикл

		Если Движение.Количество() > 0 Тогда
			ПозицияТочки = СтрНайти(Строка(Движение), ".");
			ТипРегистра = Лев(Строка(Движение), ПозицияТочки - 13);
			ИмяРегистра = СокрП(Сред(Строка(Движение), ПозицияТочки + 1));

			ЕСли ТипРегистра = "РегистрНакопления" Тогда
				МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
				Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();

			ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
				МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
				Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();

			ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
				МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
				Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();

			ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
				МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
				Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
				
			КонецЕсли;
			
			Если НЕ ПравоДоступа("Изменение", МетаданныеНабора) Тогда
				// отсутствуют права на всю таблицу регистра
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Нарушение прав доступа: %1'"),
							МетаданныеНабора.Синоним);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
				Возврат;
			КонецЕсли;
			
			Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
			
		Иначе
			Набор = Движение;
		КонецЕсли;
		
		Если ПропуститьПроверкуЗапретаИзменения Тогда
			Набор.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
		
		Попытка
			Набор.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				СобытиеОбработкаДвижений(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ДокументОбъект.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

// Процедура включения активности движений при проведении документа, движения которого
// заданы вручную
Процедура ИзменитьАктивностьПоРегистратору(ДокументОбъект, Отказ,ВключитьАктивность = Истина) Экспорт
	
	ПропуститьПроверкуЗапретаИзменения = ДокументОбъект.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения");
	
	Для Каждого Набор ИЗ ДокументОбъект.Движения Цикл
		
		Набор.Прочитать();
		Набор.УстановитьАктивность(ВключитьАктивность);
		
		Если ПропуститьПроверкуЗапретаИзменения Тогда
			Набор.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
		
		ОбщегоНазначенияБП.ПропуститьБизнесЛогикуПриЗаписи(Набор);
		
		Попытка
			Набор.Записать();
		Исключение
			// возможно, "сработал" RLS или механизм даты запрета изменения
			ОписаниеОшибки = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				СобытиеОбработкаДвижений(),
				УровеньЖурналаРегистрации.Ошибка,
				ДокументОбъект.Метаданные(),
				ДокументОбъект.Ссылка,
				ПодробноеПредставлениеОшибки(ОписаниеОшибки));
				
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктуруИзРезультатаЗапроса(РезультатЗапроса) Экспорт

	СтруктураПараметров = Новый Структура;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Для каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		СтруктураПараметров.Вставить(КолонкаРезультата.Имя, Выборка[КолонкаРезультата.Имя]);
	КонецЦикла;

    Возврат СтруктураПараметров;

КонецФункции

Функция ТекстРазделителяЗапросовПакета() Экспорт

	ТекстРазделителя =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстРазделителя;

КонецФункции

Процедура РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяСумма, Таблица, ИмяКолонки, ИмяКолонкиБазы = "") Экспорт

	Если РаспределяемаяСумма <> 0 Тогда
		Если ПустаяСтрока(ИмяКолонкиБазы) Тогда
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонки);
		Иначе
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонкиБазы);
		КонецЕсли;
		МассивНовыхСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(РаспределяемаяСумма, МассивСтарыхСумм);
		Если МассивНовыхСумм <> Неопределено Тогда
	 		Таблица.ЗагрузитьКолонку(МассивНовыхСумм, ИмяКолонки);
		КонецЕсли; 
	Иначе
		Таблица.ЗаполнитьЗначения(0, ИмяКолонки);
	КонецЕсли;

КонецПроцедуры

// Возвращает список обязательных колонок (через запятую), отсутствующих в таблице значений
//
//Параметры:
//	Таблица 			- <ТаблицаЗначений> - проверяемая таблица
//	ОбязательныеКолонки - <Строка> - имена колонок, которые обязательно должны присутствовать в таблице
//
//Возвращаемое значение:
//	<Строка> - имена отсутствующих в таблице колонок через запятую
Функция ПроверитьКолонкиТаблицыЗначений(Таблица, ОбязательныеКолонки)	Экспорт

	СтруктураКолонок = Новый Структура(ОбязательныеКолонки);
	КолонкиТаблицы = Таблица.Колонки;
	СтрокаНеНайденных = "";

	Для Каждого ОбязательнаяКолонка Из СтруктураКолонок Цикл

		Если КолонкиТаблицы.Найти(ОбязательнаяКолонка.Ключ) = Неопределено Тогда
			СтрокаНеНайденных = СтрокаНеНайденных + ?(СтрокаНеНайденных = "", "", ", ") + ОбязательнаяКолонка.Ключ;
		КонецЕсли;

	КонецЦикла;

	Возврат СтрокаНеНайденных;

КонецФункции

Функция ПолучитьТаблицуПараметровПроведения(ИсходнаяТаблица, СписокКолонок) Экспорт

	Если ИсходнаяТаблица = Неопределено Тогда
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		Колонки = Новый Структура(СписокКолонок);
		Для каждого Колонка Из Колонки Цикл
			ТаблицаРезультат.Колонки.Добавить(Колонка.Ключ);
		КонецЦикла;
		Возврат ТаблицаРезультат;

	Иначе

		Возврат ИсходнаяТаблица.Скопировать(, СписокКолонок);

	КонецЕсли;

КонецФункции

Функция РеквизитыХранящиесяВБазе(НаборРеквизитов, Организация = Неопределено) Экспорт
	
	НаборРеквизитов.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной,             Истина);
	НаборРеквизитов.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный,       Ложь);
	НаборРеквизитов.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта,            Истина);
	НаборРеквизитов.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность,        Истина);
	НаборРеквизитов.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППодразделение,    Истина);
	НаборРеквизитов.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС,            Истина);
	НаборРеквизитов.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПМестоРождения,    Истина);
	НаборРеквизитов.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаРождения,     Истина);
	НаборРеквизитов.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКодПодразделения, Истина);
	НаборРеквизитов.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППол,              Истина);
	
	МожноРедактироватьГражданство = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	НаборРеквизитов.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПГражданство, МожноРедактироватьГражданство);
	
	Если Организация <> Неопределено Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо, ОбособленноеПодразделение");
		ЭтоОбособленноеПодразделение = РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
			И РеквизитыОрганизации.ОбособленноеПодразделение;
		Если ЭтоОбособленноеПодразделение Тогда
			НаборРеквизитов.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НаборРеквизитов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ НАЛИЧИЯ И ЗАПОЛНЕНИЯ РЕВИЗИТОВ

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - строковое имя искомого реквизита,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеДокумента);

КонецФункции // ЕстьРеквизитДокумента()

Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	Возврат ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти);
	
КонецФункции // ЕстьРеквизитТабЧастиДокумента()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФИЗЛИЦАМИ

// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры:
//  ФизЛицо - ссылка на элемент справочника "Физические лица",по которому необходимо
//            получить паспортные данные.
//
// Возвращаемое значение:
//  Строка с данными об удостоверении личности физического лица
//
Функция ПолучитьПаспортныеДанныеСтрокой(Организация, ФизЛицо) Экспорт
    		
	СтруктураПаспортныхДанных = УчетЗарплаты.ДанныеФизическихЛиц(Организация, ФизЛицо, ОбщегоНазначения.ТекущаяДатаПользователя());

	Если ЗначениеЗаполнено(СтруктураПаспортныхДанных.ПредставлениеДокумента) Тогда
		Возврат СтруктураПаспортныхДанных.ПредставлениеДокумента;
	Иначе
		Возврат НСтр("ru = 'Отсутствуют данные об удостоверении личности.'");
	КонецЕсли;

КонецФункции // ПолучитьПаспортныеДанныеСтрокой()

// Функция формирует фамилию, имя и отчество одной строкой
//
// Параметры
//  Фамилия  - фамилия физ. лица.
//  Имя      - имя физ. лица.
//  Отчество - отчество физ. лица.
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы, если Ложь - фамилию и полностью имя и отчество
//
// Возвращаемое значение
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт

	Если ФИОКратко Тогда
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." +
				?(НЕ ПустаяСтрока(Отчество) ,
				Лев(Отчество,1)+".", ""), ""), "");
	Иначе
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Имя +
				?(НЕ ПустаяСтрока(Отчество) , " " + Отчество, ""), ""), "");
	КонецЕсли;

КонецФункции // ПолучитьФамилиюИмяОтчество()

// Функция возвращает совокупность данных о физическом лице в виде структуры,
// В совокупность данных входит ФИО, должность в заданной организации,
// паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица - физическое лицо,
//                 по которому возвращается совокупность данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы, если Ложь - фамилию и полностью имя и отчество
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физическом лице:
//                 - Фамилия
//                 - Имя
//                 - Отчество
//                 - Представление (Фамилия И.О.)
//                 - Подразделение
//                 - ВидДокумента
//                 - Серия
//                 - Номер
//                 - ДатаВыдачи
//                 - КемВыдан
//                 - КодПодразделения
//
Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза, ФИОКратко = Истина) Экспорт
	
	Возврат УчетЗарплаты.ДанныеФизическихЛиц(Организация, ФизЛицо, ДатаСреза, ФИОКратко);

КонецФункции // ДанныеФизЛица

// Функция возвразает ограниченный состав данных о физическом лице соответствующем текущему пользователю
Функция ДанныеФизЛицаТекущегоПользователя(Организация, ДатаСреза = Неопределено, ФИОКратко = Истина) Экспорт
	ФизическоеЛицо      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
	ДатаПолученияДанных = ?(ЗначениеЗаполнено(ДатаСреза), ДатаСреза, ОбщегоНазначения.ТекущаяДатаПользователя());
	
	СтруктураВозврата  = Новый Структура("Представление, Должность, ИНН");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеФизЛица = ДанныеФизЛица(Организация, ФизическоеЛицо, ДатаПолученияДанных, ФИОКратко);
		УстановитьПривилегированныйРежим(Ложь);
		
		СтруктураВозврата.Вставить("ИНН",           ДанныеФизЛица.ИНН);
		СтруктураВозврата.Вставить("Представление", СокрЛП(ДанныеФизЛица.Представление));
		Если ТипЗнч(ДанныеФизЛица.Должность) = Тип("СправочникСсылка.Должности") И НЕ ДанныеФизЛица.Должность.Пустая() Тогда
			ДолжностьНаименования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеФизЛица.Должность, "Наименование, НаименованиеКраткое");
			ДолжностьНаименование = ?(ПустаяСтрока(ДолжностьНаименования.НаименованиеКраткое), ДолжностьНаименования.Наименование, ДолжностьНаименования.НаименованиеКраткое);
			
			СтруктураВозврата.Вставить("Должность", СокрЛП(ДолжностьНаименование));
		КонецЕсли; 
	КонецЕсли;
	
	Возврат СтруктураВозврата;
КонецФункции
 

// Функция возвращает совокупность данных о физических лицах в виде таблицы
// значений. В совокупность данных входит ФИО, должность в заданной
// организации, паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника(ов)
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица или Массив - физическое лицо
//                 или список физ. лиц, по которым возвращается совокупность
//                 данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с совокупностью данных о физическом лице.
//                  Колонки: возвращаемой таблицы:
//                  - Фамилия
//                  - Имя
//                  - Отчество
//                  - Представление (Фамилия И.О.)
//                  - Подразделение
//                  - ВидДокумента
//                  - Серия
//                  - Номер
//                  - ДатаВыдачи
//                  - КемВыдан
//                  - КодПодразделения
//
Функция ДанныеФизЛиц(Организация, ФизЛицо, ДатаСреза) Экспорт
	
	Возврат УчетЗарплаты.ДанныеФизическихЛиц(Организация, ФизЛицо, ДатаСреза, Истина, Истина);

КонецФункции // ДанныеФизЛиц

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДОКУМЕНТАМИ

// Функция формирует представление заголовка документа
//
// Возвращаемое значение:
//  Строка - представление номера документа
//
Функция СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "", ВыводитьИдентификаторГосконтракта = Ложь) Экспорт
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат "";
	Иначе
		
		
		Если ВыводитьИдентификаторГосконтракта И ЗначениеЗаполнено(ДокументОбъект.ГосударственныйКонтракт) Тогда
			ПрефиксНомера = ДокументОбъект.ГосударственныйКонтракт + "/";
		Иначе
			ПрефиксНомера = "";
		КонецЕсли;
		
		Возврат СтрШаблон(
			"%1 № %2 от %3 г.",
			?(НЕ ЗначениеЗаполнено(НазваниеДокумента), ДокументОбъект.Метаданные().Синоним, НазваниеДокумента),
			ПрефиксНомера + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.Номер, Истина, Ложь),
			Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг'"));
	КонецЕсли;
	
КонецФункции


// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописи = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, ,Валюта.ПараметрыПрописи);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры:
//  Сумма  - число, которое мы хотим форматировать,
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2"
					+ ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
					+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции

// Изменяет текущую страницу формы документа, если при открытии формы
// первая страница содержит пустую табличную часть, но на форме есть еще страницы
// с непустой табличной частью.
// Проверяется также видимость элемента
//
// Параметры:
//   Форма                - форма документа, который открывается;
//   СписокТабличныхПолей - Список значений - табличных полей, где
//                            Значение - имя элемента формы,
//                            Представление - имя табличной части (в метаданных)
//
Функция ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(Форма, СписокТабличныхПолей) Экспорт

	Для Каждого Элемент из СписокТабличныхПолей Цикл
		Если Форма.Объект[Элемент.Представление].Количество() > 0 Тогда
			Если Форма.Элементы[Элемент.Значение].Видимость Тогда
				// Эта табличная часть - первая видимая, у которой есть данные
				Возврат Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат "";

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТАБЛИЦАМИ

// Добавляет в таблицу значений строки из другой таблицы значений и
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

Процедура УпорядочитьТаблицуПоДокументу(ТаблицаЗначений, КолонкаДокумента, КолонкаДаты, Направление = "Возр") Экспорт

	Если ТаблицаЗначений.Колонки.Найти(КолонкаДаты) = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить(КолонкаДаты, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДатуДокументаКРезультатуЗапроса(ТаблицаЗначений, КолонкаДокумента, КолонкаДаты);
	
	СписокКолонок = КолонкаДаты + " " + Направление + ", " + КолонкаДокумента + " " + Направление;
	ТаблицаЗначений.Сортировать(СписокКолонок, Новый СравнениеЗначений);
	
КонецПроцедуры

Процедура ДобавитьДатуДокументаКРезультатуЗапроса(Результат, КолонкаДокумента, КолонкаСДатой) Экспорт

	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы из Результат Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
		МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
		Если МассивТипа = Неопределено Тогда
			МассивТипа = Новый Массив;
			КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
		КонецЕсли;
		МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
	КонецЦикла;
	
	Если КэшПоТипам.Количество()=0 тогда
		Возврат;
	КонецЕсли;
	
	Запрос = новый запрос;
	
	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;
		
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "",
			"",
			"
			|Объединить Все
			|");
			
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка,
		|	Док.Дата
		|ИЗ
		|	Документ."+ИмяМетаданных+" КАК Док
		|ГДЕ
		|	Док.Ссылка В(&ДокументыТипа_"+ИмяМетаданных+")";
		
		УдалитьПовторяющиесяЭлементыМассива(КлючИЗначение.Значение);
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Результат.Индексы.Добавить(КолонкаДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);
		
		НайденныеСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
		Для Каждого строка ИЗ НайденныеСтроки Цикл
			строка[КолонкаСДатой] = Выборка.Дата;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьДатуДокументаКРезультатуЗапроса()

Процедура ПронумероватьТаблицу(ТаблицаЗначений, ИмяКолонкиНомера = "НомерСтроки") Экспорт

	Если ТаблицаЗначений.Колонки.Найти(ИмяКолонкиНомера) = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить(ИмяКолонкиНомера, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	КонецЕсли;

	Ном = 1;
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаТаблицы[ИмяКолонкиНомера] = Ном;
		Ном = Ном + 1;
	КонецЦикла;

КонецПроцедуры

Функция ПустаяТаблицаРегистраНакопления(ИмяРегистра) Экспорт

	ПустаяТаблица = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ПустаяТаблица.Колонки.Удалить("Регистратор");
	ПустаяТаблица.Колонки.Удалить("МоментВремени");
	ПустаяТаблица.Колонки.Удалить("Активность");
	Если ПустаяТаблица.Колонки.Найти("ВидДвижения") <> Неопределено Тогда
		ПустаяТаблица.Колонки.Удалить("ВидДвижения");
	КонецЕсли;

	Возврат ПустаяТаблица;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ НОМЕРАМИ ДОКУМЕНТОВ

// Функция возвращает массив вышестоящих групп указанного элемента.
//
// Параметры:
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Массив вышестоящих групп
//
Функция ПолучитьСписокВышеСтоящихГрупп(ЭлементСправочника) Экспорт

	Результат = Новый Массив;

	Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
		Возврат Результат;
	КонецЕсли;

	МетаданныеСправочника = ЭлементСправочника.Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	ИмяСправочника = МетаданныеСправочника.Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка = &Ссылка";

	ТекущийЭлемент = ЭлементСправочника;

	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Для Индекс = 1 по 5 Цикл
				РодительЭлемента = Выборка["Родитель" + Индекс];
				Если РодительЭлемента = ТекущийЭлемент Тогда
					// Иногда из-за ошибок данных в базе может оказаться ситуация, 
					// когда у элемента справочника в качестве родителя указана ссылка на самого себя.
					// Это приведет к образованию бесконечного цикла, поэтому дальше не ищем.
					// Т.к. чаще всего функция вызывается при определении счетов учета в момент ввода данных,
					// то исключение не вызываем, считаем просто, что у элемента нет вышестоящих групп.
					// Сообщим пользователю об этом, чтобы он мог исправить.
					СообщитьОЦиклическойСсылкеВОбъекте(МетаданныеСправочника, ТекущийЭлемент);
					ТекущийЭлемент = Неопределено;
					Прервать;
				КонецЕсли;
				ТекущийЭлемент = РодительЭлемента;
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					Результат.Добавить(ТекущийЭлемент);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекущийЭлемент = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Функция возвращает массив вышестоящих групп указанного элемента.
//
// Параметры:
//  МассивЭлементовСправочника      - Массив элементов справочника, для которого ищются родители
//                                    Все элементы массива должны быть одного вида!
//
// Возвращаемое значение
//  Соответствие массивов вышестоящих групп
//
Функция ПолучитьСписокВышеСтоящихГруппЭлементов(МассивЭлементовСправочника) Экспорт

	Результат = Новый Соответствие;
	
	Если МассивЭлементовСправочника.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ЭлементСправочника Из МассивЭлементовСправочника Цикл
		Результат.Вставить(ЭлементСправочника, Новый Массив);
	КонецЦикла;
	
	МетаданныеСправочника = МассивЭлементовСправочника[0].Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмяСправочника = МетаданныеСправочника.Имя;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Справочник1.Ссылка КАК Элемент,
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник.Номенклатура КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка В(&МассивСсылок)";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "Номенклатура", ИмяСправочника);
	
	//	Таблица соответствия групп и элементов (начальной точки иерархии):
	//		Родитель - группа справочника
	//		Элемент - элемент справочника, для которого строится иерархия
	СоответствиеГруппИЭлементов = Новый ТаблицаЗначений;
	СоответствиеГруппИЭлементов.Колонки.Добавить("Родитель",	Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника));
	СоответствиеГруппИЭлементов.Колонки.Добавить("Элемент",		Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника));
	СоответствиеГруппИЭлементов.Индексы.Добавить("Родитель");
	Для Каждого ЭлементСправочника Из МассивЭлементовСправочника Цикл
		НовоеСоответствие = СоответствиеГруппИЭлементов.Добавить();
		НовоеСоответствие.Родитель	= ЭлементСправочника;
		НовоеСоответствие.Элемент	= ЭлементСправочника;
	КонецЦикла;
	
	Отбор	= Новый Структура("Родитель");
	
	ТекущийМассивСсылок = МассивЭлементовСправочника;
	
	Пока ТекущийМассивСсылок.Количество() > 0 Цикл
		
		Запрос.УстановитьПараметр("МассивСсылок", УдалитьПовторяющиесяЭлементыМассива(ТекущийМассивСсылок));
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущийМассивСсылок	= Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			Отбор.Родитель = Выборка.Элемент;
			
			НайденныеСтроки = СоответствиеГруппИЭлементов.НайтиСтроки(Отбор);
			Для Каждого СоответствиеГруппыИЭлемента Из НайденныеСтроки Цикл
				
				ЭлементСправочника	= СоответствиеГруппыИЭлемента.Элемент;
				
				МассивВышеСтоящихГруп	= Результат.Получить(ЭлементСправочника);
				
				Для Индекс = 1 по 5 Цикл
					
					Родитель = Выборка["Родитель" + Индекс];

					Если Родитель = ЭлементСправочника Тогда
						// Иногда из-за ошибок данных в базе может оказаться ситуация, 
						// когда у элемента справочника в качестве родителя указана ссылка на самого себя.
						// Это приведет к образованию бесконечного цикла, поэтому дальше не ищем.
						// Т.к. чаще всего функция вызывается при определении счетов учета в момент ввода данных,
						// то исключение не вызываем, считаем просто, что у элемента нет вышестоящих групп.
						// Сообщим пользователю об этом, чтобы он мог исправить.
						СообщитьОЦиклическойСсылкеВОбъекте(МетаданныеСправочника, ЭлементСправочника);
						Прервать;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Родитель) Тогда
						
						МассивВышеСтоящихГруп.Добавить(Родитель);
						Если Индекс = 5 Тогда
							ТекущийМассивСсылок.Добавить(Родитель);
							НовоеСоответствие = СоответствиеГруппИЭлементов.Добавить();
							НовоеСоответствие.Родитель	= Родитель;
							НовоеСоответствие.Элемент	= ЭлементСправочника;
						КонецЕсли;
						
					Иначе
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Формирует строку представления документа для сообщений при проведении.
//
// Параметры
//  Документ - ссылка на проводимый документ.
//
// Возвращаемое значение
//  Строка с представлением документа.
//
Функция ПредставлениеДокументаПриПроведении(Документ) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеДокумента) Тогда
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Проведение документа: %1 (%2)'"), СокрЛП(Документ), Документ.ВидОперации);
	Иначе
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Проведение документа: %1'"), СокрЛП(Документ));
	КонецЕсли;
	
	Возврат ПредставлениеДокумента;

КонецФункции // ПредставлениеДокументаПриПроведении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С УПРАВЛЯЕМЫМИ БЛОКИРОВКАМИ

// Устарела. Необходимо напрямую использовать методы объекта "Новый БлокировкаДанных".
// Устанавливает управляемую блокировку таблицы.
//
// Параметры:
//  СтруктураПараметров 		- <Структура>. Структура параметров блокировки. Обязательный параметр.
//								Обязательно должна содержать свойства:
//								"ИмяТаблицы" - <Строка> - имя таблицы, на которую накладывается блокировка.
//									Например: "АвансовыйОтчет"
//								Необязательные свойства:
//								"ТипТаблицы" - <Строка> - тип таблицы, на которую накладывается блокировка.
//									Пространство блокировки состоит из типа таблицы и имени таблицы.
//									Например: "Документ"
//									Значение по умолчанию: "РегистрНакопления"
//								"РежимБлокировки" - <РежимБлокировкиДанных> - режим накладываемой блокировки.
//									Значение по умолчанию: РежимБлокировкиДанных.Исключительный
//								"ИсточникДанных" - источник данных для блокировки.
//									Может передаваться значение любого типа, поддерживаемого свойством ИсточникДанных элемента блокировки,
//									а также типа "Менеджер временных таблиц".
//									Если в структуре нет этого свойства - блокировки через ИспользоватьИзИсточникаДанных() не накладываются.
//								"ИмяВременнойТаблицы" - <Строка> - имя временной таблицы менеджера временных таблиц, которая служит источником данных для блокировки.
//									Обязательно должно указываться, если в качестве источника данных процедуре передан менеджер временных таблиц.
//  КоллекцияЗначенийБлокировки	- <Структура или Соответствие> - описывает значения блокировки, накладываемые с помощью УстановитьЗначение().
//									Ключ - поле блокировки - <Строка или (только для соответствия) ПланыВидовХарактеристикСсылка>,
//										ПланыВидовХарактеристикСсылка используется для блокировки регистра бухгалтерии по виду субконто.
//									Значение - блокируемое значение - <Произвольный тип>.
//									Если передано Неопределено или если коллекция не содержит ни одного элемента -
//									блокировки методом УстановитьЗначение() не накладываются.
//  КоллекцияОписанияИсточника	- <Структура или Соответствие> - описывает значения блокировки, накладываемые с помощью ИспользоватьИзИсточникаДанных().
//									Ключ - поле блокировки - <Строка или (только для соответствия) ПланыВидовХарактеристикСсылка>,
//										ПланыВидовХарактеристикСсылка используется для блокировки регистра бухгалтерии по виду субконто.
//									Значение - поле таблицы источника данных - <Строка>.
//									Если передано Неопределено или если коллекция не содержит ни одного элемента -
//									блокировки методом ИспользоватьИзИсточникаДанных() не накладываются.
//  Отказ 						- <Булево> - при ошибке в процессе установки блокировки в этот параметр процедура возвращает значение Истина
//  Заголовок 					- <Строка> - заголовок сообщения об ошибке при установке блокировки
//
Процедура УстановитьУправляемуюБлокировку(СтруктураПараметров, КоллекцияЗначенийБлокировки = Неопределено, КоллекцияОписанияИсточника = Неопределено, Отказ = Ложь, Заголовок = "") Экспорт

	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ИспользоватьЗначенияБлокировки = КоллекцияЗначенийБлокировки <> Неопределено
		И (ТипЗнч(КоллекцияЗначенийБлокировки) = Тип("Структура")
			ИЛИ ТипЗнч(КоллекцияЗначенийБлокировки) = Тип("Соответствие"))
		И КоллекцияЗначенийБлокировки.Количество() > 0;

	ИспользоватьИсточникДанных     = КоллекцияОписанияИсточника <> Неопределено
		И (ТипЗнч(КоллекцияОписанияИсточника) = Тип("Структура")
			ИЛИ ТипЗнч(КоллекцияОписанияИсточника) = Тип("Соответствие"))
		И КоллекцияОписанияИсточника.Количество() > 0
		И СтруктураПараметров.Свойство("ИсточникДанных");

	Если НЕ ИспользоватьЗначенияБлокировки И НЕ ИспользоватьИсточникДанных Тогда
		Возврат;
	КонецЕсли;

	Блокировка = Новый БлокировкаДанных;

	ТипТаблицы = ?(СтруктураПараметров.Свойство("ТипТаблицы"), СтруктураПараметров.ТипТаблицы, "РегистрНакопления");
	ИмяТаблицы = СтруктураПараметров.ИмяТаблицы;
	ПространствоБлокировки = ТипТаблицы  + "." + ИмяТаблицы;
	ЭлементБлокировки = Блокировка.Добавить(ПространствоБлокировки);

	РежимБлокировки = ?(СтруктураПараметров.Свойство("РежимБлокировки"), СтруктураПараметров.РежимБлокировки, РежимБлокировкиДанных.Исключительный);
	ЭлементБлокировки.Режим = РежимБлокировки;

	Если ИспользоватьЗначенияБлокировки Тогда

		Для каждого ЭлементКоллекции Из КоллекцияЗначенийБлокировки Цикл

			ЭлементБлокировки.УстановитьЗначение(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);

		КонецЦикла;

	КонецЕсли;

	Если ИспользоватьИсточникДанных Тогда

		ИсточникДанных = СтруктураПараметров.ИсточникДанных;

		Если ТипЗнч(ИсточникДанных) = Тип("МенеджерВременныхТаблиц") Тогда

			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = ИсточникДанных;
			ТекстЗапроса = "";
			Для каждого ЭлементКоллекции Из КоллекцияОписанияИсточника Цикл
				ТекстЗапроса = ТекстЗапроса + ",
				|	Таб." + ЭлементКоллекции.Значение;
			КонецЦикла;
			ТекстЗапроса = Сред(ТекстЗапроса, 2);
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ"
			+ ТекстЗапроса + "
			|ИЗ
			|	" + СтруктураПараметров.ИмяВременнойТаблицы + " КАК Таб";
			Запрос.Текст = ТекстЗапроса;
			Результат    = Запрос.Выполнить();

			ЭлементБлокировки.ИсточникДанных = Результат;

		Иначе

			ЭлементБлокировки.ИсточникДанных = ИсточникДанных;

		КонецЕсли;

		Для каждого ЭлементКоллекции Из КоллекцияОписанияИсточника Цикл

			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);

		КонецЦикла;

	КонецЕсли;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ И УСТАНОВКИ НАСТРОЕК ПОЛЬЗОВАТЕЛЕЙ

// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки
//  Значение     - значение настройки
//  ИмяПользователяИБ - Строка - имя пользователя программы, для которого устанавливается настройка
//
// Возвращаемое значение:
//  Нет
//
Процедура УстановитьЗначениеПоУмолчанию(Настройка, Значение, ИмяПользователяИБ = Неопределено) Экспорт

	Если ВРег(Настройка) = ВРег("ОсновнаяОрганизация")
		ИЛИ ВРег(Настройка) = ВРег("ОсновноеПодразделениеОрганизации")
		ИЛИ ВРег(Настройка) = ВРег("ОсновнойСклад")
		ИЛИ ВРег(Настройка) = ВРег("ВариантРабочегоСтола") Тогда
		
		
		ТекущаяНастройка = ПолучитьЗначениеПоУмолчанию(Настройка, ИмяПользователяИБ);
		
		Если ВРег(Настройка) = ВРег("ОсновнаяОрганизация")
			И НЕ ТекущаяНастройка = Настройка Тогда
			
			ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновноеПодразделениеОрганизации"),,
				БухгалтерскийУчетПереопределяемый.ПустоеПодразделение(),, ИмяПользователяИБ);
		
		КонецЕсли;
		
		ХранилищеОбщихНастроек.Сохранить(ВРег(Настройка),, Значение,, ИмяПользователяИБ);
		
	ИначеЕсли ВРег(Настройка) = ВРег("РабочаяДата") Тогда
		ОбщегоНазначения.УстановитьРабочуюДатуПользователя(Значение, ИмяПользователяИБ);
	ИначеЕсли ВРег(Настройка) = ВРег("ПоказыватьСчетаУчетаВДокументах")
		ИЛИ ВРег(Настройка) = ВРег("ОсновнойВидНоменклатуры")
		ИЛИ ВРег(Настройка) = ВРег("ОсновнойВидНоменклатурыУслуга")
		ИЛИ ВРег(Настройка) = ВРег("ПараметрыОтправкиСкрытыхКопий")
		ИЛИ ВРег(Настройка) = Врег("УчетнаяЗаписьЭлектроннойПочты")
		ИЛИ ВРег(Настройка) = Врег("Подпись")
		ИЛИ ВРег(Настройка) = ВРег("ВидЭДРеализации") Тогда
		
		ХранилищеОбщихНастроек.Сохранить(ВРег(Настройка),, Значение,, ИмяПользователяИБ);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначениеПоУмолчанию()

Функция ПолучитьЗначениеПоУмолчанию(Настройка, ИмяПользователяИБ = Неопределено) Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(Настройка, ИмяПользователяИБ);
	
КонецФункции

Функция ПолучитьПодразделение(Организация, Склад) Экспорт
	
	Возврат ОбщегоНазначенияБП.ПолучитьПодразделение(Организация, Склад);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФУНКЦИОНАЛЬНЫМИ ОПЦИЯМИ

Функция ПериодНастройкиСистемыНалогообложения(Организация, Период) Экспорт
	
	Возврат УчетнаяПолитика.ПериодНастройкиСистемыНалогообложения(Организация, Период);
	
КонецФункции

Функция ПолучитьФункциональнуюОпциюОбъекта(Имя, Объект) Экспорт

	ПараметрыФО = Новый Структура("Организация, Период",
		Объект.Организация, ПериодНастройкиСистемыНалогообложения(Объект.Организация, Объект.Дата));

	Возврат ПолучитьФункциональнуюОпцию(Имя, ПараметрыФО);

КонецФункции

Функция ИспользуетсяНеСтандартныйИнтерфейс() Экспорт
		
	Возврат Константы.ИнтерфейсВерсии77.Получить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКИМИ СПИСКАМИ

// Возвращает отборы динамического списка как значения заполнения при программном вводе новой строки в список
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекДинамическогоСписка - компоновщик настроек списка
//
// Возвращаемое значение:
//   Структура   - значения отборов для заполнения нового элемента списка
//
Функция ЗначенияЗаполненияДинамическогоСписка(Знач КомпоновщикНастроек) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	
	НастройкиСписка = КомпоновщикНастроек.ПолучитьНастройки();
	ДобавитьЗначенияЗаполнения(НастройкиСписка.Отбор.Элементы, ЗначенияЗаполнения);
	
	Возврат ЗначенияЗаполнения;

КонецФункции 

// Устанавливает основной статус для нескольких документов.
// Статус может быть измененен только у тех документов, на редактирование которых у пользователя есть права.
//
// Параметры:
//  СписокДокументов - СписокЗначений - содержит ссылки на документы (должны быть одного вида!).
//  СтатусДокумента - ПеречислениеСсылка - новый статус документа.
//
// Возвращаемое значение:
//  Булево - Истина, если статус хотя бы одного документа изменен.
//
Функция УстановитьСтатусыДокументов(СписокДокументов, СтатусДокумента) Экспорт
	
	СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусыДокумента.Статус = СтатусДокумента;
	
	СтатусИзменен = РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокументов(
		СписокДокументов.ВыгрузитьЗначения(), СтатусыДокумента);
		
	Возврат СтатусИзменен;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ЗаменитьСвязьПараметровВыбора(Элемент, Имя, НоваяСвязьПараметровВыбора) Экспорт


	МассивСвязей = Новый Массив;
	Для Каждого СвязьПараметровВыбора Из Элемент.СвязиПараметровВыбора Цикл
		Если ВРег(СвязьПараметровВыбора.Имя) <> ВРег(Имя) Тогда
			МассивСвязей.Добавить(СвязьПараметровВыбора);
		КонецЕсли;
	КонецЦикла;

	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	МассивСвязей.Добавить(НоваяСвязьПараметровВыбора);
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);

КонецПроцедуры

// Процедура вызывается из форм платежных документов при смене кассы или
// банковского счета. Меняет валюту, курс документа и пересчитывает сумму.
//
// Параметры:
//  ВалютаДокумента  - ссылка на справочник, валюта документа до изменения;
//  КурсДокумента    - число, курс документа до изменения;
//  ДатаДокумента    - дата, дата на которую будем получать новый курс;
//  СуммаДокумента   - число, сумма документа;
//  ВалютаДенежныхСредств - ссылка на справочник, валюта выбранного счета или кассы
//                     (новая валюта документа);
//
Процедура ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаДокумента,
	                                        СуммаДокумента, ВалютаДенежныхСредств) Экспорт

	СтараяВалюта    = ВалютаДокумента;
	СтарыйКурс      = КурсДокумента;
	СтараяКратность = КратностьДокумента;
	ВалютаДокумента = ВалютаДенежныхСредств;

	СтруктураКурсаВалютаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

	Если ВалютаДокумента <>  СтараяВалюта
	   И СуммаДокумента > 0 Тогда

		СуммаДокумента = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтараяВалюта, ВалютаДокумента, СтарыйКурс,
									    КурсДокумента,СтараяКратность,КратностьДокумента);

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПодразделениеПриИзмененииСчета(Подразделение, Организация, ПодразделениеПоУмолчанию = Неопределено) Экспорт

	Если Не (ЗначениеЗаполнено(Подразделение) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(Подразделение, Организация)) Тогда
		Если ПодразделениеПоУмолчанию = Неопределено Тогда
			ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		КонецЕсли;

		Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
			Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Организация) Тогда
				Подразделение = ПодразделениеПоУмолчанию;
			Иначе
				Подразделение = Неопределено;
			КонецЕсли;
		Иначе
			Подразделение = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат Подразделение;

КонецФункции

// Выполняет установку отбора по указанной организации в динамических списках.
// Вызывать необходимо из обработчика формы ПриСозданииНаСервере.
// Если в форму при открытии был передан отбор по организации, то функция не будет выполнена.
//
// Параметры
//  Форма          - ФормаКлиентскогоПриложения  - форма, в которой необходимо установить отбор
//  ИмяСписка      - Строка - имя реквизита формы типа ДинамическийСписок.
//  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
//  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
//                   Если значение не задано, то будет подставлена основная организация из
//                   настроек пользователя.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
//
Функция УстановитьОтборПоОсновнойОрганизации(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт

	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		
		Если Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Свойство(ИмяРеквизита) Тогда
			// Если значение отбора передается в параметрах формы - берем его оттуда, параметр при этом удаляем
			ОсновнаяОрганизация = Форма.Параметры.Отбор[ИмяРеквизита];
			Форма.Параметры.Отбор.Удалить(ИмяРеквизита);
		ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") 
			ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") 
			ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
			ОсновнаяОрганизация = ЗначениеОтбора;
		Иначе
			ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
		
		Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
		Иначе
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		КонецЕсли;
		
		ИспользованиеОтбора = ЗначениеЗаполнено(ОсновнаяОрганизация);
		
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		
	Иначе
		
		ОсновнаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ВидСравненияОтбора  = ВидСравненияКомпоновкиДанных.Равно;
		ИспользованиеОтбора = Ложь;
		РежимОтображения    = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма[ИмяСписка], ИмяРеквизита, ОсновнаяОрганизация, ВидСравненияОтбора, , ИспользованиеОтбора, РежимОтображения);
	
	Возврат ОсновнаяОрганизация;
	
КонецФункции

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры:
//  СписокСведений - список значений со значениями параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организации
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Перем Префикс, СтрокаДополнения;

	Результат = Новый Массив;

	СоответствиеПараметров = Новый Структура;
	СоответствиеПараметров.Вставить("ПолноеНаименование",			" ");
	СоответствиеПараметров.Вставить("СокращенноеНаименование",		" ");
	СоответствиеПараметров.Вставить("НаименованиеДляПечатныхФорм",	" ");
	СоответствиеПараметров.Вставить("ИНН",							" ИНН ");
	СоответствиеПараметров.Вставить("КПП",							" КПП ");
	СоответствиеПараметров.Вставить("Свидетельство",				" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",		" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",				" ");
	СоответствиеПараметров.Вставить("ФактическийАдрес",				" ");
	СоответствиеПараметров.Вставить("Телефоны",						" тел.: ");
	СоответствиеПараметров.Вставить("ТелефонЮридическогоАдреса",	" тел.: ");
	СоответствиеПараметров.Вставить("Факс",							" факс: ");
	СоответствиеПараметров.Вставить("НомерСчета",					" р/с ");
	СоответствиеПараметров.Вставить("Банк",               			" в банке ");
	СоответствиеПараметров.Вставить("БИК",                			" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           			" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          			" Код по ОКПО ");
	СоответствиеПараметров.Вставить("ОГРН",                         " ОГРН ");
	СоответствиеПараметров.Вставить("СтранаРегистрации",            " ");
	
	Если ПустаяСтрока(Список) Тогда

		Список = "ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
		Если НЕ СписокСведений.Свойство("НаименованиеДляПечатныхФорм") Тогда
			Список = "НаименованиеПолное," + Список;
		Иначе
			Список = "НаименованиеДляПечатныхФорм," + Список;
		КонецЕсли;
		Если СписокСведений.Свойство("ТелефонЮридическогоАдреса") Тогда
			Список = "ТелефонЮридическогоАдреса," + Список;
		КонецЕсли;

	КонецЕсли;
	
	СписокПараметров = СтрРазделить(Список, ",", Ложь);
	
	Для каждого ИмяПараметра Из СписокПараметров Цикл
		
		Если СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения) Тогда

			Если ПустаяСтрока(СтрокаДополнения) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СПрефиксом = Истина И СоответствиеПараметров.Свойство(ИмяПараметра, Префикс) Тогда
				Результат.Добавить(Префикс + СтрокаДополнения);
			Иначе
				Результат.Добавить(СтрокаДополнения);
			КонецЕсли; 
			
		Иначе
			
			ТекстСообщения = НСТр("ru = 'Не удалось определить значение параметра организации:'") + " " + ИмяПараметра;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Формирование сведений об организации'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Организации,, 
				ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		КонецЕсли;
		
	КонецЦикла; 

	СтрокаРезультата = СтрСоединить(Результат, ",");
	
	Пока СтрНайти(СтрокаРезультата, "  ") > 0 Цикл
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "  ", " ");
	КонецЦикла;
	
	Возврат СокрЛП(СтрокаРезультата);

КонецФункции

// Стандартная функция форматирования прописи количества
//
// Параметры:
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";

	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";

	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";

	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";

	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

// Устарела. Следует использовать ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке)
// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент       – Табличный документ
//  ВыводимыеОбласти  – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		ШаблонСообщения = НСТр("ru = 'Невозможно получить информацию о текущем принтере (возможно, в системе не установлено ни одного принтера)
                                |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка вывода на печать'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()


// Функция возвращает часть запроса для корректного заполнения содержания услуг
// при формировании печатных форм.
//
// Параметр:
//  ТабличнаяЧасть - имя табличной части, из которой выбирается содержание
//                   услуг.
//
// Возвращаемое значение:
//  Строка - текст части запроса.
//
Функция ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг(Знач ТабличнаяЧасть) Экспорт

	ТабличнаяЧасть = ТабличнаяЧасть + ?(ПустаяСтрока(ТабличнаяЧасть), "", ".");

	ЧастьЗапроса =
	"	ВЫБОР
	|		КОГДА НЕ (" + ТабличнаяЧасть + "Содержание ПОДОБНО """") ТОГДА
	|			" + ТабличнаяЧасть + "Содержание
	|		КОГДА НЕ (" + ТабличнаяЧасть + "Номенклатура.НаименованиеПолное ПОДОБНО """") ТОГДА
	|			" + ТабличнаяЧасть + "Номенклатура.НаименованиеПолное
	|		ИНАЧЕ
	|			" + ТабличнаяЧасть + "Номенклатура.Наименование
	|	КОНЕЦ";

	Возврат ЧастьЗапроса;

КонецФункции // ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг()

Функция ПолучитьМассивПустыхЗначенийПоОписаниюТипов(ОписаниеТипов) Экспорт

	МассивПустыхЗначений = Новый Массив;
	МассивПустыхЗначений.Добавить(Неопределено);

	Для каждого Тип Из ОписаниеТипов.Типы() Цикл

		МассивПустыхЗначений.Добавить(Новый(Тип));

	КонецЦикла;

	Возврат МассивПустыхЗначений;

КонецФункции

Функция ПолучитьКопиюКоллекции(Знач Коллекция) Экспорт

	Возврат СериализаторXDTO.ПрочитатьXDTO(СериализаторXDTO.ЗаписатьXDTO(Коллекция));

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ФОРМАМИ

Процедура УстановитьУсловноеОформлениеОсновногоЭлемента(Список, ПараметрыОтбора, 
			ИмяНастройки = "ОсновнойЭлемент", ПредставлениеНастройки = "Выделение основного элемента") Экспорт
	
	Если ТипЗнч(ПараметрыОтбора)<>Тип("Структура") Тогда
		Возврат;
	ИначеЕсли НЕ (ПараметрыОтбора.Свойство("ЛевоеЗначение") 
				И ПараметрыОтбора.Свойство("ВидСравнения") 
				И ПараметрыОтбора.Свойство("ПравоеЗначение")) Тогда
		Возврат;
	КонецЕсли;
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из Список.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение  = ПараметрыОтбора.ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения   = ПараметрыОтбора.ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = ПараметрыОтбора.ПравоеЗначение;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки;
	ЭлементУсловногоОформления.Представление = ПредставлениеНастройки;
	
КонецПроцедуры

Функция ПолучитьПараметрыУсловногоОформленияОсновногоЭлемента(ИмяПоляОтбораЛевое, ИмяПоляОтбораПравое, ВидСравнения = "Равно") Экспорт
	
	Возврат(Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение",
		Новый ПолеКомпоновкиДанных(ИмяПоляОтбораЛевое), ВидСравненияКомпоновкиДанных[ВидСравнения],
		Новый ПолеКомпоновкиДанных(ИмяПоляОтбораПравое)));
	
КонецФункции

// Выбирает, нужно ли перед открытием основной формы открывать форму для ожидания.
// Источниками для подписки могут быть только объекты метаданных, у которых в указана ФормаСписка по-умолчанию.
//
Процедура ОпределитьФормуСпискаСОжиданием(Источник, ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы <> "ФормаСписка" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтключитьОжиданиеПриОткрытииФорм") Тогда
		Параметры.Удалить("ОтключитьОжиданиеПриОткрытииФорм");
		Возврат;
	КонецЕсли;
	
	// Выбираем режим открытия для формы.
	ОткрываемаяФормаУказанаЯвно = (ВыбраннаяФорма <> Неопределено
								И ТипЗнч(ВыбраннаяФорма) <> Тип("Строка"));
	Если ОткрываемаяФормаУказанаЯвно Тогда // форма-объект метаданных

		ИмяФормы = ВыбраннаяФорма.ПолноеИмя();
		
	Иначе // требуется подобрать форму
		
		ОписаниеИсточника = Метаданные.НайтиПоТипу(ТипЗнч(Источник));
		ИмяФормы = ОписаниеИсточника.ПолноеИмя() + "." +
			?(ВыбраннаяФорма = Неопределено, ВидФормы, "Форма." + ВыбраннаяФорма);
			
	КонецЕсли;
	ОжидаетсяДлительноеОткрытие = ОбщегоНазначенияБПКлиентСервер.ОжидаетсяДлительноеОткрытиеФормы(ИмяФормы);
	Если Не ОжидаетсяДлительноеОткрытие Тогда		
		Возврат;
	КонецЕсли;
	
	// Определяем заголовок, который будет выводиться во время ожидания открытия основной формы.
	Заголовок = "";
	Если Не Параметры.Свойство("Заголовок", Заголовок) Тогда
		
		Если ОткрываемаяФормаУказанаЯвно Тогда
			
			Заголовок = ВыбраннаяФорма.Синоним;
			
		Иначе
			
			Если ВыбраннаяФорма <> Неопределено Тогда

				МетаданныеФормы = ОписаниеИсточника.Формы.Найти(ВыбраннаяФорма);
				Если МетаданныеФормы <> Неопределено
				   И Не ПустаяСтрока(МетаданныеФормы.Синоним)
				   И МетаданныеФормы.Синоним <> НСтр("ru = 'Форма списка'") Тогда
					Заголовок = МетаданныеФормы.Синоним;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПустаяСтрока(Заголовок) Тогда
				
				Если Не ПустаяСтрока(ОписаниеИсточника.РасширенноеПредставлениеСписка) Тогда
					
					Заголовок = ОписаниеИсточника.РасширенноеПредставлениеСписка;
					
				ИначеЕсли Не ПустаяСтрока(ОписаниеИсточника.ПредставлениеСписка) Тогда
					
					Заголовок = ОписаниеИсточника.ПредставлениеСписка;
					
				Иначе
					
					Заголовок = ОписаниеИсточника.Синоним;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	// На время ожидания откроем легкую форму "с котом".
	
	СтандартнаяОбработка = Ложь;
	ВыбраннаяФорма = "ОбщаяФорма.ДлительнаяОперацияОткрытиеСписка";
	
	ПараметрыОткрытия = ОбщегоНазначенияБПКлиентСервер.ПараметрыОткрытияФормыСОжиданием();
	ПараметрыОткрытия.ПереопределенаНаСервере = Истина;
	ПараметрыОткрытия.ИмяФормы                = ИмяФормы;
	ПараметрыОткрытия.Заголовок               = Заголовок;
	
	ПараметрыОткрываемойФормы = Новый Структура;
	Для каждого ПараметрФормы Из Параметры Цикл
		ПараметрыОткрываемойФормы.Вставить(ПараметрФормы.Ключ, ПараметрФормы.Значение);
	КонецЦикла; 
	
	Параметры.Очистить();
	Параметры.Вставить("Заголовок",                 ПараметрыОткрытия.Заголовок);
	Параметры.Вставить("ПараметрыОткрываемойФормы", ПараметрыОткрываемойФормы);
	Параметры.Вставить("ПереопределенаНаСервере",   ПараметрыОткрытия.ПереопределенаНаСервере);
	Параметры.Вставить("ПараметрыОткрытия",         ПараметрыОткрытия);

КонецПроцедуры

Процедура СохранитьСтатистикуОткрытияФорм(Знач СтатистикаОткрытияФорм) Экспорт
	
	// Структура, сохраняемая в параметре сеанса СтатистикаОткрытияФорм, создается при первом вызове функции
	// ОбщегоНазначенияБПКлиентСервер.ОжидаетсяДлительноеОткрытиеФормы()
	// Она содержит следующие свойства:
	// * ОтключитьОжиданиеПриОткрытииФорм - Булево - Отключение показа формы ожидания;
	// * МедленныйРежимРаботы - Булево - Оценка аппаратных возможностей компьютера;
	// * КоличествоОткрытий - Число - Сколько раз за текущий сеанс вызывался алгоритм;
	// * ОткрывавшиесяФормы - Массив - Список полных имен форм, которые открывались за сеанс;
	// * ЗамерыОткрытий - Массив из структур - время и длительность последнего открытия форм.
	
	ЗамерыОткрытий = Новый ФиксированныйМассив(СтатистикаОткрытияФорм.ЗамерыОткрытий);
	ОткрывавшиесяФормы = Новый ФиксированныйМассив(СтатистикаОткрытияФорм.ОткрывавшиесяФормы);
	СтатистикаОткрытияФормФиксированная = Новый ФиксированнаяСтруктура(
		"ОтключитьОжиданиеПриОткрытииФорм, МедленныйРежимРаботы, КоличествоОткрытий, ЗамерыОткрытий, ОткрывавшиесяФормы",
	    СтатистикаОткрытияФорм.ОтключитьОжиданиеПриОткрытииФорм,
		СтатистикаОткрытияФорм.МедленныйРежимРаботы,
		СтатистикаОткрытияФорм.КоличествоОткрытий,
		ЗамерыОткрытий,
		ОткрывавшиесяФормы);

	ПараметрыСеанса.СтатистикаОткрытияФорм = СтатистикаОткрытияФормФиксированная;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАПРОСЫ, ПОЛЯ И РЕКВИЗИТЫ

// Получение незаполненного значения для типа определенного реквизита.
// Результат - массив значений (актуально для составного типа)
//
Функция ПолучитьНезаполненноеЗначениеРеквизита(ТипДанныхРеквизита) Экспорт
	
	ПустыеЗначенияТипа = Новый Массив;

	Для Каждого Тип Из ТипДанныхРеквизита.Типы() Цикл
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип);
		Описание = Новый ОписаниеТипов(МассивТипов);
		ПустыеЗначенияТипа.Добавить(Описание.ПривестиЗначение());
	КонецЦикла;

	Возврат Новый ФиксированныйМассив(ПустыеЗначенияТипа);
	
КонецФункции                                  

// Возвращает массив ссылок на все договоры данной организации
//
Функция ПолучитьВсеДоговорыОрганизации(Организация) Экспорт
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорСсылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	                                                        
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.ДоговорСсылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодобратьВероятнуюДолжностьОтветственногоЛица(ОтветственноеЛицо) Экспорт
	
	Возврат ОтветственныеЛицаБП.ПодобратьВероятнуюДолжностьОтветственногоЛица(ОтветственноеЛицо);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КЛАССИФИКАТОРАМИ

Функция ПолучитьКлассификатор(ИмяМакета) Экспорт

	Классификатор = Новый Соответствие();
	
	Макет = Справочники.Организации.ПолучитьМакет(ИмяМакета);
	
	ТекущаяОбласть = Макет.Область("Классификатор");

	Если ТекущаяОбласть <> Неопределено Тогда	
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебор строк макета.
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				Классификатор.Вставить(КодПоказателя, Название);
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый ФиксированноеСоответствие(Классификатор);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СПРАВОЧНИКАМИ

Функция ПолучитьКоличествоЭлементовСправочника(ИмяСправочника) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(Организации.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	Справочник.Организации КАК Организации";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организации", ИмяСправочника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЭлементов;
	КонецЕсли;
	
	Возврат 0;

КонецФункции

Функция ПроверитьНаличиеДоступныхОрганизаций() Экспорт

	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
	 	Возврат Истина;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ПолучитьКоличествоЭлементовСправочника("Организации") > 0;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НУМЕРАЦИЕЙ

Функция ПолучитьНомерБП20(НомерОбъекта, ПрефиксРазрешен = Истина) Экспорт
	
	МассивПрефиксовДляОбхода = ОбщегоНазначенияБПВызовСервераПовтИсп.ПрефиксыОрганизацийБП20();
	
	Номер = НомерОбъекта;
	НомерИзменен = Ложь;
	
	Номер = ПолучитьНомерБезПрефиксов(Номер, МассивПрефиксовДляОбхода, ПрефиксРазрешен);
	
	УдаленПрефиксСФНаАванс = Ложь;
	ОтдельнаяНумерацияСФНаАванс = Константы.ОтдельнаяНумерацияСчетовФактурНаАванс.Получить();
	Если ОтдельнаяНумерацияСФНаАванс
		И Сред(Номер, 1, 1) = "А" Тогда
		
		УдаленПрефиксСФНаАванс = Истина;
		Номер = Сред(Номер, 2);
		Если Сред(Номер, 1, 1) = "-" Тогда 
			Номер = Сред(Номер, 2);
		КонецЕсли;
		Номер = ПолучитьНомерБезПрефиксов(Номер, МассивПрефиксовДляОбхода, ПрефиксРазрешен);
	КонецЕсли;
	
	Если УдаленПрефиксСФНаАванс Тогда
		Номер = "А" + Номер;
	КонецЕсли;
	
	Возврат Номер;
	
КонецФункции

// Функция возвращает массив с префиксами организаций в формате БП 2.0
// Для кэширования необходимо вызывать эту функцию из общего модуля 
// ОбщегоНазначенияБПВызовСервераПовтИсп.
//
Функция ПрефиксыОрганизацийБП20() Экспорт
	
	//Получим значения всех возможных префиксов организаций
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	
	// Функция работает в привилегированном режиме во всех случаях,
	// кроме вызова ее из СКД - т.к. в этом случае используется безопасный режим.
	// Поэтому в тексте запросов дополнительно используется ключевое слово РАЗРЕШЕННЫЕ.
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.ПрефиксБП20 КАК Префикс
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ПрефиксБП20 <> """"";
	Запрос.Текст = ТекстЗапроса;
	ПрефиксыОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Префикс");
	
	Запрос = Новый Запрос();
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодразделенияОрганизаций.ПрефиксБП20 КАК Префикс
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.ПрефиксБП20 <> """"";
	Запрос.Текст = ТекстЗапроса;
	ПрефиксыПодразделений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Префикс");
	
	МассивПрефиксов = СформироватьМассивПрефиксовДляРИБИОрганизации(ПрефиксыОрганизаций, ПрефиксыПодразделений);
	
	Возврат МассивПрефиксов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС ПОЛЯ ВЫБОРА ОРГАНИЗАЦИИ С ОБОСОБЛЕННЫМИ ПОДРАЗДЕЛЕНИЯМИ
//

Процедура ЗаполнитьСписокОрганизаций(ЭлементПолеОрганизация, СоответствиеОрганизаций) Экспорт
	
	СоответствиеОрганизаций = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборОрганизаций.Организация КАК Организация,
	|	НаборОрганизаций.ОрганизацияПредставление КАК ОрганизацияПредставление,
	|	НаборОрганизаций.ВключатьОбособленныеПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Ссылка КАК Организация,
	|		Организации.Наименование КАК ОрганизацияПредставление,
	|		ЛОЖЬ КАК ВключатьОбособленныеПодразделения
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Организации.ГоловнаяОрганизация,
	|		Организации.ГоловнаяОрганизация.Наименование,
	|		ИСТИНА
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.ОбособленноеПодразделение) КАК НаборОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПредставление";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭлементПолеОрганизация.СписокВыбора.Очистить();
	МаксКоличествоСимволов = 40;
	Пока Выборка.Следующий() Цикл
		Ключ     = СтрЗаменить(Строка(Выборка.ВключатьОбособленныеПодразделения) + Выборка.Организация.УникальныйИдентификатор(), "-", "");
		Значение = Новый Структура("Организация,ВключатьОбособленныеПодразделения", Выборка.Организация, Выборка.ВключатьОбособленныеПодразделения);
		СоответствиеОрганизаций.Вставить(Ключ, Значение);
		
		ОрганизацияПредставление = Выборка.ОрганизацияПредставление;
		
		Если Выборка.ВключатьОбособленныеПодразделения Тогда
			ОрганизацияПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 с обособленными подразделениями'"),
				Выборка.ОрганизацияПредставление);
		КонецЕсли;
		
		ЭлементПолеОрганизация.СписокВыбора.Добавить(Ключ, ОрганизацияПредставление);
		
		МаксКоличествоСимволов = Макс(МаксКоличествоСимволов, СтрДлина(ОрганизацияПредставление));
	КонецЦикла;
	
	ЭлементПолеОрганизация.ШиринаСпискаВыбора = Окр(?(МаксКоличествоСимволов > 200, 200, МаксКоличествоСимволов) * 1.3);
	ЭлементПолеОрганизация.ВысотаСпискаВыбора = ?(ЭлементПолеОрганизация.СписокВыбора.Количество() > 15, 15, ЭлементПолеОрганизация.СписокВыбора.Количество());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДАННЫМИ В БАЗЕ

// Процедура активизирует элемент формы.
// Если это - табличная часть, то тогда анализируется,
// может табличная часть на закладке и если так,
// то закладка становится текущей, но табличная часть не активизируется
//
// Параметры:
//  Форма            - Управляемая форма
//  ИмяЭлементаФормы - Строка - имя элемента, который необходимо активизировать
//
Процедура АктивизироватьЭлементФормы(Форма, ИмяЭлементаФормы) Экспорт

	Если НЕ ПустаяСтрока(ИмяЭлементаФормы) Тогда
		НайденныйЭлементФормы = Форма.Элементы.Найти(ИмяЭлементаФормы);
		Если НайденныйЭлементФормы <> Неопределено Тогда
			Если ТипЗнч(НайденныйЭлементФормы) = Тип("ТаблицаФормы") Тогда
				// Для таблицы определить - если она находится на закладке, то не активизировать элемент,
				// а сделать активной страницу, на которой находится эта табличная часть
				Страница = НайденныйЭлементФормы.Родитель;
				Пока Страница <> Неопределено И ТипЗнч(Страница) = Тип("ГруппаФормы") И Страница.Вид = ВидГруппыФормы.ОбычнаяГруппа Цикл
					// Таблица может быть внутри группы, а группа на странице
					Страница = Страница.Родитель;
				КонецЦикла;
				Если (Страница <> Неопределено) И ТипЗнч(Страница) = Тип("ГруппаФормы") И (Страница.Вид = ВидГруппыФормы.Страница) Тогда
					// Определим владельца этой страницы и активизируем эту страницу
					ПанельСтраниц = Страница.Родитель;
					Если (ПанельСтраниц <> Неопределено) И (ПанельСтраниц.Вид = ВидГруппыФормы.Страницы) Тогда
						ПанельСтраниц.ТекущаяСтраница = Страница;
					Иначе
						Форма.ТекущийЭлемент = НайденныйЭлементФормы;
					КонецЕсли;
				Иначе
					Форма.ТекущийЭлемент = НайденныйЭлементФормы;
				КонецЕсли;
			Иначе
				Форма.ТекущийЭлемент = НайденныйЭлементФормы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция НовыйОписаниеТаблицПараметровПроведения() Экспорт
	
	Возврат Новый Массив; // См. ДобавитьОписаниеТаблицыПараметровПроведения()
	
КонецФункции

Функция ДобавитьОписаниеТаблицыПараметровПроведения(ОписаниеТаблиц, ИмяТаблицы, Таблица) Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("ИмяТаблицы", ИмяТаблицы);
	Описание.Вставить("Таблица",    Таблица);
	Описание.Вставить("Колонки",    Новый Массив);
	
	ОписаниеТаблиц.Добавить(Описание);
	
	Возврат Описание;
	
КонецФункции

Функция ПодготовитьТаблицыПараметрыПроведения(ОписаниеТаблиц) Экспорт
	
	Параметры = Новый Структура;
	
	Для Каждого Описание Из ОписаниеТаблиц Цикл
	
		ИменаКолонок = СтрСоединить(Описание.Колонки, ",");
		Таблица      = ПолучитьТаблицуПараметровПроведения(Описание.Таблица, ИменаКолонок);
		
		Параметры.Вставить(Описание.ИмяТаблицы, Таблица);
		
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьНомерБезПрефиксов(Номер, МассивПрефиксовДляОбхода, ПрефиксРазрешен = Истина)

	ПрефиксНомера = "";
	
	Для Каждого ТекущийПрефикс ИЗ МассивПрефиксовДляОбхода Цикл
	
		ТекущийНомер = СтрНайти(Номер, ТекущийПрефикс);
		
		Если ТекущийНомер = 1 Тогда
			Номер = Сред(Номер, СтрДлина(ТекущийПрефикс)+1);
			Если ОбщегоНазначенияБПВызовСервераПовтИсп.ВыводитьПрефиксИБ(ТекущийПрефикс) И ПрефиксРазрешен Тогда
				ПрефиксНомера = ПрефиксНомера + ТекущийПрефикс;
			КонецЕсли;
		КонецЕсли;
		
		// так же, может остаться "минус" впереди
		Если Лев(Номер, 1) = "-" Тогда
			Номер = Сред(Номер, 2);
		КонецЕсли;
		
		// удаление ведущих нулей
		Пока Лев(Номер, 1)="0" Цикл
			Номер = Сред(Номер, 2);
		КонецЦикла;
	КонецЦикла;
	
	Номер = ПрефиксНомера + Номер;
	
	Возврат Номер;

КонецФункции

// Удаляет повторяющиеся элементы массива.
//
// Параметры:
//  ОбрабатываемыйМассив - Массив - элементы произвольных типов, из которых удаляются неуникальные.
//  НеИспользоватьНеопределено - Булево - если Истина, то все значения Неопределено удаляются из массива.
//  АнализироватьСсылкиКакИдентификаторы - Булево - если Истина, то для ссылок вызывается функция УникальныйИдентификатор()
//                                                  и уникальность определяется по строкам-идентификаторам.
//
// Возвращаемое значение:
//   Массив      - элементы ОбрабатываемыйМассив после удаления лишних.
//
Функция УдалитьПовторяющиесяЭлементыМассива(ОбрабатываемыйМассив, НеИспользоватьНеопределено = Ложь, АнализироватьСсылкиКакИдентификаторы = Ложь) Экспорт

	Если ТипЗнч(ОбрабатываемыйМассив) <> Тип("Массив") Тогда
		Возврат ОбрабатываемыйМассив;
	КонецЕсли;
	
	УжеВМассиве = Новый Соответствие;
	Если АнализироватьСсылкиКакИдентификаторы Тогда   // сравниваем ссылки как строки-уникальные идентификаторы
		
		ОписаниеСсылочныхТипов = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
		
	 	БылоНеопределено = Ложь;
		КоличествоЭлементовВМассиве = ОбрабатываемыйМассив.Количество();

		Для ОбратныйИндекс = 1 По КоличествоЭлементовВМассиве Цикл
			
			ЭлементМассива = ОбрабатываемыйМассив[КоличествоЭлементовВМассиве - ОбратныйИндекс];
			ТипЭлемента = ТипЗнч(ЭлементМассива);
			Если ЭлементМассива = Неопределено Тогда
				Если БылоНеопределено или НеИспользоватьНеопределено Тогда
					ОбрабатываемыйМассив.Удалить(КоличествоЭлементовВМассиве - ОбратныйИндекс);
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				Продолжить;
			ИначеЕсли ОписаниеСсылочныхТипов.СодержитТип(ТипЭлемента) Тогда

				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор());

			Иначе

				ИДЭлемента = ЭлементМассива;

			КонецЕсли;

			Если УжеВМассиве[ИДЭлемента] = Истина Тогда
				ОбрабатываемыйМассив.Удалить(КоличествоЭлементовВМассиве - ОбратныйИндекс);
			Иначе
				УжеВМассиве[ИДЭлемента] = Истина;
			КонецЕсли;
			
		КонецЦикла;

	Иначе
		
		ИндексЭлемента = 0;
		КоличествоЭлементов = ОбрабатываемыйМассив.Количество();
		Пока ИндексЭлемента < КоличествоЭлементов Цикл
			
			ЭлементМассива = ОбрабатываемыйМассив[ИндексЭлемента];
			Если НеИспользоватьНеопределено И ЭлементМассива = Неопределено
			 Или УжеВМассиве[ЭлементМассива] = Истина Тогда      // удаляем, переходя к следующему
			 
				ОбрабатываемыйМассив.Удалить(ИндексЭлемента);
				КоличествоЭлементов = КоличествоЭлементов - 1;
				
			Иначе   // запоминаем, переходя к следующему
				
				УжеВМассиве.Вставить(ЭлементМассива, Истина);
				ИндексЭлемента = ИндексЭлемента + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат ОбрабатываемыйМассив;

КонецФункции

// Проверяет, что в массиве объекты одного типа
//
// Параметры:
//  МассивОбъектов - Массив - массив объектов, которые нужно проверить
//
// Возвращаемое значение:
//  Булево
//
Функция ОбъектыОдногоТипаВМассиве(МассивОбъектов) Экспорт
	
	ТипОбъекта = Неопределено;
	Для каждого Объект Из МассивОбъектов Цикл
		Если ТипОбъекта = Неопределено Тогда
			ТипОбъекта = ТипЗнч(Объект);
			Продолжить;
		КонецЕсли;
		
		Если ТипОбъекта <> ТипЗнч(Объект) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция НаличиеОрганизацийВУчетнойСистеме() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РеквизитыОрганизацииЗаполнены", Справочники.Организации.КоличествоОрганизаций() > 0);
	Результат.Вставить("ДоступноРедактированиеРеквизитовОрганизации", ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.Организации));
	
	Возврат Результат;

КонецФункции

Процедура УстановитьИнтерфейсНачалаРаботы(РежимНачалаРаботы) Экспорт
	
	Настройки = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	Настройки.УстановитьСостав(НастройкиСостава);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Настройки);
	
	Если РежимНачалаРаботы = "АктивацияПрограммы" Тогда
		Форма = "Обработка.НачалоРаботы.Форма.АктивацияПрограммы";
	ИначеЕсли ОбщегоНазначенияБП.ВыбиратьВариантНачалаРаботы() Тогда
		Форма = "Обработка.НачалоРаботы.Форма.ВыборВариантаНачалаРаботы";
	ИначеЕсли ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		Форма = "Обработка.НачалоРаботы.Форма.ЭлектронныеТрудовыеКнижки_БыстрыйСтарт";
	ИначеЕсли ТарификацияБПВызовСервераПовтИсп.НачинатьРаботуСоСравненияРежимовНалогообложения() Тогда
		Форма = "Обработка.СравнениеРежимовНалогообложения.Форма";
	Иначе
		Форма = "Обработка.НачалоРаботы.Форма.БыстрыйСтарт";
	КонецЕсли;
	
	НачальнаяСтраница = Новый НастройкиНачальнойСтраницы;
	СоставФорм = Новый СоставФормНачальнойСтраницы;
	СоставФорм.ЛеваяКолонка.Добавить(Форма);
	НачальнаяСтраница.УстановитьСоставФорм(СоставФорм);
	
	ОбщегоНазначенияБП.СохранитьНастройкиНачальнойСтраницы(НачальнаяСтраница);
	
КонецПроцедуры

Процедура УстановитьСтандартныйИнтерфейс(ИмяПользователя = Неопределено) Экспорт
	
	Настройки = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	Настройки.УстановитьСостав(ОбщегоНазначенияБП.НастройкиСоставаИнтерфейсаКлиентскогоПриложения());
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Настройки, , ИмяПользователя);
	
	НачальнаяСтраница = Новый НастройкиНачальнойСтраницы;
	СоставФорм = Новый СоставФормНачальнойСтраницы;
	Если ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ЭлектронныеТрудовыеКнижки_НачалоРаботы");
	Иначе
		СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.НачалоРаботы");
		СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ИнформационнаяПанель");
	КонецЕсли;
	НачальнаяСтраница.УстановитьСоставФорм(СоставФорм);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", "", НачальнаяСтраница, , ИмяПользователя);
	
КонецПроцедуры

Функция ЭтоМедленныйРежимРаботы() Экспорт
	
	Возврат ПроверкаКонтрагентов.ЭтоМедленныйРежимРаботы();
	
КонецФункции

Процедура УстановитьСтандартныйИнтерфейсДляВсехпользователей() Экспорт
	
	Для Каждого ИмяПользователя Из ПользователиДляИзмененияИнтерфейса() Цикл
		УстановитьСтандартныйИнтерфейс(ИмяПользователя);
	КонецЦикла;
	
КонецПроцедуры

Функция ПользователиДляИзмененияИнтерфейса() Экспорт
	
	ИменаПользователей = Новый Массив;
	
	ВсеПользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Если ВсеПользователи.Количество() > 0 Тогда
		Для Каждого ПользовательИБ Из ВсеПользователи Цикл
			ИменаПользователей.Добавить(ПользовательИБ.Имя);
		КонецЦикла;
	Иначе
		ИменаПользователей.Добавить();
	КонецЕсли;
	
	Возврат ИменаПользователей;
	
КонецФункции

#Область ОтправкаЗаявокВSmartway

Функция РезультатОтправкиЗаявкиВSmartway(ПараметрыЗаявки) Экспорт

	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания  = НСтр("ru = 'Отправка заявки в Smartway'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ОтправкаЗаявокВSmartway.ОтправкаЗаявкиВSmartwayВФоне", 
		ПараметрыЗаявки, ПараметрыВыполненияВФоне);

КонецФункции

#КонецОбласти

// Записывает в регистр "СтатусыДокументов" две записи для оптимизации открытия списков 
// входящих документов, в которых отражаются статусы счетов-фактур.
//
// Параметры:
//  СписокСчетовФактур - СписокЗначений - содержит ссылки на счета-фактуры полученные.
//  СписокОснований    - СписокЗначений - содержит ссылки на основания полученных счетов-фактур в формах
//  списков которых отображаются статусы счетов-фактур.
//  СтатусДокумента    - Перечисления.СтатусыДокументовПоступления - статус оригинала счета-фактуры.
//
// Возвращаемое значение:
//  Структура статусов с ключами:
//  *СтатусСФИзменен - Булево - Истина, если статус хотя бы одного счета-фактуры изменен.
//  *СтатусОснованийИзменен - Булево - Истина, если статус хотя бы одного счета-фактуры по указанному основанию изменен.
//
Функция УстановитьСтатусыОригиналаСчетовФактур(СписокСчетовФактур, СписокОснований, СтатусДокумента) Экспорт
	
	СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусыДокумента.Статус = СтатусДокумента;
	
	СтатусСФИзменен = РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокументов(
		СписокСчетовФактур.ВыгрузитьЗначения(), СтатусыДокумента);
		
	ТипыОбъектов = ОбщегоНазначенияБП.РазложитьСписокПоТипамОбъектов(СписокОснований.ВыгрузитьЗначения());
	
	СтатусОснованийИзменен = Ложь;
	Для Каждого ОбъектыТипа Из ТипыОбъектов Цикл
		СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
		СтатусыДокумента.СтатусОригиналаСФ = СтатусДокумента;
		ЕстьИзменения = РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокументов(
			ОбъектыТипа.Значение, СтатусыДокумента);
		Если ЕстьИзменения Тогда 
			СтатусОснованийИзменен = ЕстьИзменения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("СтатусСФИзменен,СтатусОснованийИзменен",
		СтатусСФИзменен, СтатусОснованийИзменен);
	
КонецФункции

Функция ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Экспорт
	
	Возврат СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек()
		ИЛИ ТарификацияБПВызовСервераПовтИсп.РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОрганизацияПодключаемогоОборудованияПоУмолчанию(ТипыОборудования) Экспорт
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокОборудования = Справочники.ПодключаемоеОборудование.ОборудованиеПоПараметрам(ТипыОборудования);
	
	МассивОборудования = Новый Массив;
	Для каждого ПараметрыОборудования Из СписокОборудования Цикл
		МассивОборудования.Добавить(ПараметрыОборудования.Ссылка);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОборудования", МассивОборудования);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПодключаемоеОборудование.Организация
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка В(&МассивОборудования)
	|	И ПодключаемоеОборудование.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ОсновнаяОрганизация = ?(ЗначениеЗаполнено(ОсновнаяОрганизация), ОсновнаяОрганизация, Неопределено);
	
	Если МассивОрганизаций.Количество() = 1 Тогда
		Возврат МассивОрганизаций[0];
	ИначеЕсли МассивОрганизаций.Количество() = 0 
		ИЛИ МассивОрганизаций.Найти(ОсновнаяОрганизация) <> Неопределено Тогда 
		Возврат ОсновнаяОрганизация;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция СформироватьМассивПрефиксовДляРИБИОрганизации(ПрефиксыОрганизаций, ПрефиксыПодразделений)
	
	МассивПрефиксов = ПолучитьМассивПрефиксовРИБ();
	
	Для Каждого ПрефиксОрганизации Из ПрефиксыОрганизаций Цикл
		Если ПрефиксОрганизации <> "" Тогда
			МассивПрефиксов.Добавить(ПрефиксОрганизации);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПрефиксПодразделения Из ПрефиксыПодразделений Цикл
		Если ПрефиксПодразделения <> "" Тогда
			МассивПрефиксов.Добавить(ПрефиксПодразделения);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПрефиксов.Количество() = 0 Тогда
		МассивПрефиксов.Добавить("");
	КонецЕсли;
	
	Возврат МассивПрефиксов;
	
КонецФункции

Функция ПолучитьМассивПрефиксовРИБ()
	
	МассивПрефиксов = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПрефиксыИнформационныхБаз.Префикс КАК Префикс
	               |ИЗ
	               |	РегистрСведений.ПрефиксыИнформационныхБаз КАК ПрефиксыИнформационныхБаз
	               |ГДЕ
	               |	НЕ ПрефиксыИнформационныхБаз.ФорматБСП";
	
	ВыборкаУзлов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		
		Если Не ПустаяСтрока(ВыборкаУзлов.Префикс) Тогда
			
			МассивПрефиксов.Добавить(ВыборкаУзлов.Префикс);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат МассивПрефиксов;
	
КонецФункции

Процедура ДобавитьЗначенияЗаполнения(КоллекцияОтборов, ЗначенияЗаполнения)

	Для каждого ЭлементОтбора Из КоллекцияОтборов Цикл
	
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование 
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			
			НаименованиеОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если СтрНайти(НаименованиеОтбора, ".") = 0 Тогда
				ЗначенияЗаполнения.Вставить(НаименованиеОтбора, ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование 
			И ЭлементОтбора.ТипГруппы <> ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
			
			ДобавитьЗначенияЗаполнения(ЭлементОтбора.Элементы, ЗначенияЗаполнения);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Функция СобытиеОбработкаДвижений()

	Возврат НСТр("ru = 'Обработка движений'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

Функция ПолучитьТекстВопросаПриУдаленииСубконто(Знач СтруктураПараметровУчета, Знач СнятьПризнакУчетаПоПодразделениям = Ложь) Экспорт
	
	ДействияИзмененияСубконто = ОбщегоНазначенияБП.ПолучитьДействияИзмененияСубконто(СтруктураПараметровУчета);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДействий", ДействияИзмененияСубконто);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Счет КАК Счет,
	|	ВЫРАЗИТЬ(Таблица.Субконто КАК ПланВидовХарактеристик.ВидыСубконтоХозрасчетные) КАК Субконто,
	|	-Таблица.Действие КАК Действие,
	|	-Таблица.Количественный КАК Количественный,
	|	-Таблица.Суммовой КАК Суммовой,
	|	Таблица.ТолькоОбороты КАК ТолькоОбороты,
	|	-Таблица.Валютный КАК Валютный
	|ПОМЕСТИТЬ СчетаСубконто
	|ИЗ
	|	&ТаблицаДействий КАК Таблица
	|ГДЕ
	|	(Таблица.Действие = -1
	|			ИЛИ Таблица.Количественный = -1
	|			ИЛИ Таблица.Суммовой = -1
	|			ИЛИ Таблица.ТолькоОбороты = 1
	|			ИЛИ Таблица.Валютный = -1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаСубконто.Субконто.Наименование КАК Субконто,
	|	МАКСИМУМ(СчетаСубконто.Действие) КАК Действие,
	|	МАКСИМУМ(СчетаСубконто.Количественный) КАК Количественный,
	|	МАКСИМУМ(СчетаСубконто.Суммовой) КАК Суммовой,
	|	МАКСИМУМ(СчетаСубконто.ТолькоОбороты) КАК ТолькоОбороты,
	|	МАКСИМУМ(СчетаСубконто.Валютный) КАК Валютный
	|ИЗ
	|	СчетаСубконто КАК СчетаСубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаСубконто.Субконто.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Субконто";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() и Не СнятьПризнакУчетаПоПодразделениям Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаДействий = РезультатЗапроса.Выгрузить();
	
	ВидыДействий = Новый Структура;
	ВидыДействий.Вставить("Действие", НСтр("ru = 'Будут удалены следующие субконто: %1'"));
	ВидыДействий.Вставить("Количественный", НСтр("ru = 'Будут очищены количественные обороты по следующим субконто: %1'"));
	ВидыДействий.Вставить("Суммовой", НСтр("ru = 'Будут очищены суммовые обороты по следующим субконто: %1'"));
	ВидыДействий.Вставить("ТолькоОбороты", НСтр("ru = 'Будут очищены остатки по следующим субконто: %1'"));
	ВидыДействий.Вставить("Валютный", НСтр("ru = 'Будут очищены валютные обороты по следующим субконто: %1'"));
	
	ТекстВопроса = "";
	Для каждого ВидДействия Из ВидыДействий Цикл
		ИзменениеПризнакаСубконто = ВидДействия.Ключ <> "Действие";
		
		СписокСубконто = "";
		СтрокиСубконто = ТаблицаДействий.НайтиСтроки(Новый Структура(ВидДействия.Ключ, 1));
		Для каждого СтрокаСубконто Из СтрокиСубконто Цикл
			Если ИзменениеПризнакаСубконто И СтрокаСубконто.Действие <> 0 Тогда
				// При добавлении / удалении субконто других сообщений выводить не нужно
				Продолжить;
			КонецЕсли;
			
			СписокСубконто = СписокСубконто + ", " + СтрокаСубконто.Субконто;
		КонецЦикла;
		
		Если ПустаяСтрока(СписокСубконто) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстВопроса) Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС;
		КонецЕсли;
		
		ТекстДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВидДействия.Значение,
			Сред(СписокСубконто, 3));
		ТекстВопроса = ТекстВопроса + ТекстДействия;
	КонецЦикла;
	
	Если СнятьПризнакУчетаПоПодразделениям Тогда
		Если НЕ ПустаяСтрока(ТекстВопроса) Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС;
		КонецЕсли;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Будет отключен учет по подразделениям на счетах затрат.
			|После его отключения следует проверить настройки учетной политики:
			|""Методы определения прямых расходов производства в НУ"" на закладке ""Налог на прибыль"" и 
			|""Методы распределения косвенных расходов"" на закладке ""Затраты""'");
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстВопроса) Тогда
		Возврат "";
	КонецЕсли;
	
	ШаблонТекста = НСтр("ru = '%1
		|Продолжить?'");
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ТекстВопроса);
	
	Возврат ТекстВопроса;
	
КонецФункции

// Выводит сообщения, сформированные фоновым заданием по переключению режима отложенного проведения,
// и обновляет кеши.
//
// Параметры:
//	ИдентификаторЗадания - УникальныйИдентификатор - Идентификатор фонового задания.
//
Процедура ОбработатьЗавершениеПереключенияОтложенногоПроведения(Знач ИдентификаторЗадания) Экспорт

	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		СообщенияПользователю = ОбщегоНазначенияБП.ПолучитьСообщенияПользователюБезСлужебных(Истина, ИдентификаторЗадания);
		
		Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли;

	// Обновим повторно используемые значения, чтобы применились изменения настроек,
	// сделанные в фоновом задании.
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Выводит пользователю и записывает в журнал регистрации сообщение о том, 
// что в элементе справочнике или плана видов характеристик обнаружена 
// циклическая ссылка на самого себя в поле Родитель.
//
Процедура СообщитьОЦиклическойСсылкеВОбъекте(МетаданныеОбъекта, ЭлементДанных)

	ВидОбъекта = "";
	Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
		ВидОбъекта = НСтр("ru = 'В справочнике'");
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеОбъекта) Тогда
		ВидОбъекта = НСтр("ru = 'В плане видов характеристик'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 %2 элемент ""%3"" в поле ""%4"" содержит циклическую ссылку на самого себя. Необходимо указать правильную группу.'"),
		ВидОбъекта,
		МетаданныеОбъекта.Синоним,
		ЭлементДанных,
		МетаданныеОбъекта.СтандартныеРеквизиты.Родитель.Синоним);
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ЦиклическаяСсылка'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение,
		МетаданныеОбъекта,
		ЭлементДанных,
		ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭлементДанных, "Родитель", "Объект");

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ПАРАМЕТРОВ СЕАНСА

// Функция применяется при необходимости получить сведения об учетной политике организации
// или настройках налога
//
// Параметры: нет
//
// Возвращаемое значение - дерево значений.
//  На первом уровне дерева - список организаций, для которых задана учетная политика
//  На втором уровне дерева - записи учетной политики по организации, каждая запись хранится в дереве как структура
//
Функция ЗаполнениеНастройкиУчетнойПолитики(ИмяНастройки) Экспорт

	Запрос = Новый Запрос();

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика";
	
	Если ИмяНастройки <> "УчетнаяПолитика" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УчетнаяПолитика", ИмяНастройки);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Сортировать("Период");

	ДеревоУчетнойПолитики = Новый ДеревоЗначений;
	ДеревоУчетнойПолитики.Колонки.Добавить("Организация");
	ДеревоУчетнойПолитики.Колонки.Добавить("Период");
	ДеревоУчетнойПолитики.Колонки.Добавить("УчетнаяПолитика");

	Для каждого Строка Из Результат Цикл
		УчетнаяПолитикаОрганизации = ДеревоУчетнойПолитики.Строки.Найти(Строка.Организация, "Организация");
		Если УчетнаяПолитикаОрганизации = Неопределено Тогда
			УчетнаяПолитикаОрганизации = ДеревоУчетнойПолитики.Строки.Добавить();
			УчетнаяПолитикаОрганизации.Организация = Строка.Организация;
		КонецЕсли;
		ПоПериоду = УчетнаяПолитикаОрганизации.Строки.Добавить();
		ПоПериоду.Период = Строка.Период;

		СтруктураУчетнойПолитики = Новый Структура;
		Для Каждого Колонка Из Результат.Колонки Цикл
			СтруктураУчетнойПолитики.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла;

		ПоПериоду.УчетнаяПолитика = СтруктураУчетнойПолитики;

	КонецЦикла;

	Возврат ДеревоУчетнойПолитики;

КонецФункции

Функция ПолучитьФильтрПоФункциональнымОпциям() Экспорт
	
	МассивОпций = Новый Массив;
	МакетОпций = ПолучитьОбщийМакет("СписокФункциональныхОпций");
	Для Счетчик = 1 По МакетОпций.КоличествоСтрок() Цикл
		ИмяОпции = СокрЛП(МакетОпций.ПолучитьСтроку(Счетчик));
		Если НЕ ПустаяСтрока(ИмяОпции) Тогда
			МассивОпций.Добавить(ИмяОпции);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивОпций.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаHEXЦифр = "0123456789ABCDEF";
	СтрокаФильтра = "";
	ДвоичныйРазряд = 1;
	HEXЧисло = 0;
	Счетчик = 0;
	
	Для каждого Опция из МассивОпций Цикл
		Счетчик = Счетчик + 1;
		HEXЧисло = HEXЧисло + ДвоичныйРазряд * ?(ОбщегоНазначенияБП.ПолучитьЗначениеФункциональности(Опция), 1, 0);
		Если Счетчик % 4 > 0 Тогда
			ДвоичныйРазряд = ДвоичныйРазряд * 2;
		Иначе 
			СтрокаФильтра = Сред(СтрокаHEXЦифр, HEXЧисло + 1, 1) + СтрокаФильтра; 
			HEXЧисло = 0;
			ДвоичныйРазряд = 1;
		КонецЕсли;
	КонецЦикла;
	
	// Если число опций не кратно 4, дописываем старшую цифру.
	Если ДвоичныйРазряд > 1 Тогда
		СтрокаФильтра = Сред(СтрокаHEXЦифр, HEXЧисло + 1, 1) + СтрокаФильтра; 
	КонецЕсли;
	
	// Делаем длину строки фильтра кратной 8.
	Если СтрДлина(СтрокаФильтра) % 8 <> 0 Тогда
		СтрокаФильтра = ",filter" + Лев("00000000", 8 - СтрДлина(СтрокаФильтра) % 8 ) + СтрокаФильтра;
	КонецЕсли;
	
	Возврат СтрокаФильтра;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры для команд печати

Функция ТипыПечатныхФормПоУмолчанию(МассивОбъектов) Экспорт
	
	Результат = Новый Массив;
	
	ПечатнаяФормаСчетПокупателю = Ложь;
	ПечатнаяФормаСчетПоставщика = Ложь;
	ПечатнаяФормаАктРеализация = Ложь;
	ПечатнаяФормаАктПоступление = Ложь;
	ПечатнаяФормаНакладнаяРеализация = Ложь;
	ПечатнаяФормаНакладнаяПоступление = Ложь;
	ПечатнаяФормаАктСверки = Ложь;
	ПечатнаяФормаПлатежноеПоручение = Ложь;
	
	Для каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПечатнаяФормаСчетПокупателю И ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ПечатнаяФормаСчетПокупателю = Истина;
			Результат.Добавить("СчетПокупателю");
		ИначеЕсли НЕ ПечатнаяФормаСчетПоставщика И ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ПечатнаяФормаСчетПоставщика = Истина;
			Результат.Добавить("СчетПоставщика");
		ИначеЕсли НЕ ПечатнаяФормаАктРеализация 
			И ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
			И Документ.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
			ПечатнаяФормаАктРеализация = Истина;
			Результат.Добавить("АктРеализация");
		ИначеЕсли НЕ ПечатнаяФормаАктПоступление 
			И ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			И Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
			ПечатнаяФормаАктПоступление = Истина;
			Результат.Добавить("АктПоступление");
		ИначеЕсли НЕ ПечатнаяФормаНакладнаяРеализация 
			И ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
			И Документ.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
			ПечатнаяФормаНакладнаяРеализация = Истина;
			Результат.Добавить("НакладнаяРеализация");
		ИначеЕсли НЕ ПечатнаяФормаНакладнаяПоступление 
			И ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			И Документ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
			ПечатнаяФормаНакладнаяПоступление = Истина;
			Результат.Добавить("НакладнаяПоступление");
		ИначеЕсли НЕ ПечатнаяФормаАктСверки И ТипЗнч(Документ) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда
			ПечатнаяФормаАктСверки = Истина;
			Результат.Добавить("АктСверки");
		ИначеЕсли НЕ ПечатнаяФормаПлатежноеПоручение И ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			ПечатнаяФормаПлатежноеПоручение = Истина;
			Результат.Добавить("ПлатежноеПоручение");
		КонецЕсли;
		
		Если ПечатнаяФормаСчетПокупателю
			И ПечатнаяФормаСчетПоставщика
			И ПечатнаяФормаАктРеализация
			И ПечатнаяФормаАктПоступление
			И ПечатнаяФормаНакладнаяРеализация
			И ПечатнаяФормаНакладнаяПоступление
			И ПечатнаяФормаАктСверки
			И ПечатнаяФормаПлатежноеПоручение Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция МакетСообщенияОСтарыхРеквизитахНалоговой() Экспорт
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Таблица = Новый ТабличныйДокумент;
	
	Таблица.ОтображатьСетку = Ложь;
	Таблица.ОтображатьЗаголовки = Ложь;
	Таблица.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Таблица.АвтоМасштаб = Истина;
	Таблица.ТолькоПросмотр = Истина;
	
	Макет = ПолучитьОбщийМакет("ПредупреждениеОСменеРеквизитов");
	
	Таблица.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	НастройкиСообщения = ОбщегоНазначенияБП.НастройкиСообщенияОСтарыхРеквизитахНалоговой();
	Если ЗначениеЗаполнено(НастройкиСообщения) Тогда
		Если НастройкиСообщения.Количество() > 0 Тогда
			
			Если НастройкиСообщения.Свойство("РеквизитыМосква") Тогда
				
				ВывестиТаблицуСтарыхРеквизитовНалоговой(Таблица, Макет, "РеквизитыМосква", НастройкиСообщения.РеквизитыМосква);
				
			КонецЕсли;
			
			Если НастройкиСообщения.Свойство("РеквизитыМО") Тогда
				
				ВывестиТаблицуСтарыхРеквизитовНалоговой(Таблица, Макет, "РеквизитыМО", НастройкиСообщения.РеквизитыМО);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Удалить("СообщениеОСтарыхРеквизитахНалоговой", "" , ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	Возврат Таблица;
	
КонецФункции

Процедура ВывестиТаблицуСтарыхРеквизитовНалоговой(Таблица, Макет, ИмяМакета, ПлатежныеПоручения)
	
	Таблица.Вывести(Макет.ПолучитьОбласть(ИмяМакета));
	
	Если ПлатежныеПоручения.Количество() > 0 Тогда
		
		Таблица.Вывести(Макет.ПолучитьОбласть("ШапкаВыводаДокументов"));
		
		ОбластьОрганизация           = Макет.ПолучитьОбласть("Организация");
		ОбластьПлатежка              = Макет.ПолучитьОбласть("Платежка");
		
		ПлатежныеПоручения.Сортировать("НаименованиеОрганизации, Организация, ДатаПлатежногоПоручения");
		ТекущаяОрганизация = Неопределено;
		Для Каждого ПлатежноеПоручение Из ПлатежныеПоручения Цикл
			Если ТекущаяОрганизация = Неопределено
				ИЛИ ТекущаяОрганизация <> ПлатежноеПоручение.Организация Тогда
				
				Если ТекущаяОрганизация <> Неопределено Тогда
					Таблица.ЗакончитьГруппуСтрок();
				КонецЕсли;
				
				ОбластьОрганизация.Параметры.СтрОрганизация = ПлатежноеПоручение.Организация;
				Таблица.Вывести(ОбластьОрганизация);
				Таблица.НачатьГруппуСтрок("Организация");
				
				ТекущаяОрганизация = ПлатежноеПоручение.Организация;
				
			КонецЕсли;
			
			ОбластьПлатежка.Параметры.СтрПлатежка          = ПлатежноеПоручение.ПлатежноеПоручение;
			ОбластьПлатежка.Параметры.РасшифровкаДокумента = ПлатежноеПоручение.ПлатежноеПоручение;
			Таблица.Вывести(ОбластьПлатежка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СЭДО_ФСС

Функция ТекущемуПользователюСЭДОФССДоступен() Экспорт
	
	Возврат УчетЗарплаты.ТекущемуПользователюСЭДОФССДоступен();
	
КонецФункции

#КонецОбласти
