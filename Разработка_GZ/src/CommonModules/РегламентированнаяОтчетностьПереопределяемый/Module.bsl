////////////////////////////////////////////////////////////////////////////////
// Модуль содержит переопределяемые процедуры и функции.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции получения сведений об организации.

// Функция возвращает сведения об организации.
//
// Параметры:
//   Организация       - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   ДатаЗначения      - Дата - дата, на которую нужно получить сведения.
//   СписокПоказателей - СписокЗначений - список показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//   Структура - структура с ключами из списка показателей и возвращаемыми значениями.
//
// Пример:
//	 ОргСведения = Новый Структура;
//   Для Каждого Показатель Из СписокПоказателей Цикл
//  	 ИмяПоказателя = Показатель.Представление;
//       Если Имяпоказателя = "КодНО" Тогда
//      	 Значение = Организация.КодНалоговогоОргана;
//       ИначеЕсли ИмяПоказателя = "ОГРН" Тогда
//      	 Значение = Организация.ОГРН;
//       Иначе
//      	 Значение = "";
//       КонецЕсли;
//       ОргСведения.Вставить(ИмяПоказателя, Значение);
//   КонецЦикла;
//   Возврат ОргСведения;
//
Функция ПолучитьСведенияОбОрганизации(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	Возврат РегламентированнаяОтчетностьБП.ПолучитьСведенияОбОрганизации(Организация, ДатаЗначения, СписокПоказателей);
	
КонецФункции

// Функция возвращает сведения о физлице.
//
// Параметры:
//   ФизЛицо           - СправочникСсылка.ФизическиеЛица - ссылка на элемент справочника "ФизическиеЛица".
//   ДатаЗначения      - Дата - дата, на которую нужно получить сведения.
//   МассивПоказателей - Массив - массив показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//   Структура - структура с ключами из массива показателей и возвращаемыми значениями.
//
// Пример:
//	 Если МассивПоказателей = Неопределено Тогда
//		 МассивПоказателей = Новый Массив;
//		 МассивПоказателей.Добавить("ИНН");
//		 МассивПоказателей.Добавить("Фамилия");
//		 МассивПоказателей.Добавить("Имя");
//		 МассивПоказателей.Добавить("Отчество");
//	 КонецЕсли;
//	 ФЛСведения = Новый Структура;
//	 Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
//		 Если ИмяПоказателя = "ИНН" Тогда
//			 Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизЛицо, "ИНН");
//		 ИначеЕсли ИмяПоказателя = "Фамилия"
//			   ИЛИ ИмяПоказателя = "Имя"
//			   ИЛИ ИмяПоказателя = "Отчество" Тогда
//			 ТаблицаСрезПоследних = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо", ФизЛицо));
//			 Если ТаблицаСрезПоследних.Количество() > 0 Тогда
//				 Значение = ТаблицаСрезПоследних[0][ИмяПоказателя];
//			 Иначе
//				 Значение = "";
//			 КонецЕсли;
//		 ИначеЕсли ИмяПоказателя = "ТелефонРабочий" Тогда
//			 Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
//				 Справочники.ВидыКонтактнойИнформации, "ТелефонРабочийФизическиеЛица") Тогда
//				 Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
//				 ФизЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, ДатаЗначения);
//			 Иначе
//				 Значение = "";
//			 КонецЕсли;
//		 ИначеЕсли ИмяПоказателя = "ТелефонДомашний" Тогда
//			 Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
//				 Справочники.ВидыКонтактнойИнформации, "ТелефонДомашнийФизическиеЛица") Тогда
//				 Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
//				 ФизЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, ДатаЗначения);
//			 Иначе
//				 Значение = "";
//			 КонецЕсли;
//		 ИначеЕсли ИмяПоказателя = "АдресЭлектроннойПочты" Тогда
//			 Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
//				 Справочники.ВидыКонтактнойИнформации, "EMailФизическиеЛица") Тогда
//				 Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
//				 ФизЛицо, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, ДатаЗначения);
//			 Иначе
//				 Значение = "";
//			 КонецЕсли;
//		 Иначе
//			 Значение = "";
//		 КонецЕсли;
//		 ФЛСведения.Вставить(ИмяПоказателя, Значение);
//	 КонецЦикла;
//	 Возврат ФЛСведения;
//
Функция ПолучитьСведенияОФизЛице(Знач ФизЛицо, Знач МассивПоказателей = Неопределено, Знач ДатаЗначения = Неопределено) Экспорт
	
	Возврат ФизическиеЛицаЗарплатаКадры.ДанныеФизическогоЛицаДляРегламентированнойОтчетности(ФизЛицо, МассивПоказателей, ДатаЗначения);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции получения сведений об обособленном подразделении.

// Процедура возвращает признак того, что в конфигурации используется механизм отправки
// по различным направлениям в Росстат (для обособленных подразделений).
//
// Параметры:
// ПризнакИспользования - Булево - Истина, если реализована отправка по различным направлениям
Процедура ИспользуетсяОтправкаВРосстатПоРазнымНаправлениям(ПризнакИспользования) Экспорт
	
	ПризнакИспользования = ВариантыПриложений.ЭтоВерсияКОРП();
	
КонецПроцедуры

// Получает код ОКПО обособленного подразделения.
// 
// Параметры:
//   Подразделение - СправочникСсылка.ПодразделенияОрганизаций - подразделение организации.
//   КодОКПО       - Строка (длина - 14) - код ОКПО обособленного подразделения.
//
Процедура ПолучитьКодОКПОПодразделения(Знач Подразделение, КодОКПО) Экспорт
	
	КодОКПО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "КодПоОКПО");
	
КонецПроцедуры

// Получает код органа ФСГС обособленного подразделения.
// 
// Параметры:
//   Подразделение - СправочникСсылка.ПодразделенияОрганизаций - подразделение организации.
//   КодФСГС       - Строка (длина - 5) - код органа ФСГС для подразделения (например, "23-45").
//
Процедура ПолучитьКодОрганаФСГСПодразделения(Знач Подразделение, КодФСГС) Экспорт
	
	КодФСГС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "КодОрганаФСГС");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции механизма автоматического заполнения.

// Функция возвращает структуру показателей.
// Ключ структуры - идентификатор показателя.
// Значение структуры – массив из трех элементов:
// 	- признак автозаполнения показателя;
//  - признак расшифровки показателя;
//  - признак запрета редактирования показателя.
//
// Параметры:
// 	 ИДОтчета         - Строка - идентификатор отчета.
//	 ИДРедакцииОтчета - Строка - идентификатор редакции формы отчета.
//   ПараметрыОтчета  - Структура - структура параметров отчета.
//
// Возвращаемое значение:
//   Структура - показатели отчета.
//
// Пример реализации:
//	 ПоказателиОтчета = Новый Структура;
//	 Если ИДОтчета = "РегламентированныйОтчетРСВ1" Тогда
//		 Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
//			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010003", Истина, Истина, Истина);
//		 КонецЕсли;
//	 КонецЕсли;
//	 Возврат ПоказателиОтчета;
//
Функция ПолучитьСведенияОПоказателяхОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета = Неопределено) Экспорт
	
	ПоказателиОтчета = Новый Структура;
	
	Если НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		Возврат ПоказателиОтчета;
	КонецЕсли;
	
	Если ИДОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
		
		ЗаполнениеБухгалтерскойОтчетности.ПолучитьСведенияОПоказателяхОтчетаБухОтчетность(ИДРедакцииОтчета, ПоказателиОтчета, ПараметрыОтчета);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетБухОтчетностьМП" Тогда
		
		ЗаполнениеБухгалтерскойОтчетности.ПолучитьСведенияОПоказателяхОтчетаБухОтчетностьМП(ИДРедакцииОтчета, ПоказателиОтчета, ПараметрыОтчета);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетБухОтчетностьСОНКО" Тогда
		
		ЗаполнениеБухгалтерскойОтчетности.ПолучитьСведенияОПоказателяхОтчетаБухОтчетностьСОНКО(ИДРедакцииОтчета, ПоказателиОтчета, ПараметрыОтчета);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетНДС" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2009Кв4" Тогда
			
			УчетНДС.ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2009Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			
			УчетНДСФормированиеОтчетности.ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2015Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв1" Тогда
			
			УчетНДСФормированиеОтчетности.ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2017Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
			
			УчетНДСФормированиеОтчетности.ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2019Кв1(ПоказателиОтчета); 
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2020Кв4" Тогда
			
			УчетНДСФормированиеОтчетности.ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2020Кв4(ПоказателиОтчета);
	
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетКосвенныеНалогиТамСоюз" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2017Кв4" Тогда
			
			УчетНДСФормированиеОтчетности.ПолучитьСведенияОПоказателяхОтчетаКосвенныеНалогиПриИмпортеФормаОтчета2017Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2010Кв3" Тогда
		
			УчетНДС.ПолучитьСведенияОПоказателяхОтчетаКосвенныеНалогиТамСоюзФормаОтчета2010Кв3(ПоказателиОтчета);
		
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетРеестрНДСПриложение1" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2015Кв4" Тогда
		
			УчетНДСФормированиеОтчетности.ПолучитьСведенияОПоказателяхОтчетаРеестрНДСПриложение1ФормаОтчета2015Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2020Кв2" Тогда
			
			УчетНДСФормированиеОтчетности.ПолучитьСведенияОПоказателяхОтчетаРеестрНДСПриложение1ФормаОтчета2020Кв2(ПоказателиОтчета);
		
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2021Кв2" Тогда
			
			УчетНДСФормированиеОтчетности.ПолучитьСведенияОПоказателяхОтчетаРеестрНДСПриложение1ФормаОтчета2021Кв2(ПоказателиОтчета);
		
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетРеестрНДСПриложение5" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2015Кв4" Тогда
		
			УчетНДСФормированиеОтчетности.ПолучитьСведенияОПоказателяхОтчетаРеестрНДСПриложение5ФормаОтчета2015Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2020Кв2" Тогда
		
			УчетНДСФормированиеОтчетности.ПолучитьСведенияОПоказателяхОтчетаРеестрНДСПриложение5ФормаОтчета2020Кв2(ПоказателиОтчета);
				
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2021Кв2" Тогда
		
			УчетНДСФормированиеОтчетности.ПолучитьСведенияОПоказателяхОтчетаРеестрНДСПриложение5ФормаОтчета2021Кв2(ПоказателиОтчета);

		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированноеУведомлениеРеестрДокументовПодтверждающихЛьготы" Тогда
		
		Если ИДРедакцииОтчета = "Форма2020_1" Тогда
			
			УчетНДСФормированиеОтчетности.ПолучитьСведенияОПоказателяхОтчетаРеестрДокументовПодтверждающихЛьготыФорма2020_1(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетПрибыль" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2010Кв4" Тогда
			НалоговыйУчет.ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2010Кв4(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
			НалоговыйУчет.ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2012Кв1(ПоказателиОтчета);
		Иначе
			// ФормаОтчета2013Кв4 и более поздние
			// часть показателей заполняется модулем НалогНаПрибыльДекларация
			НомераЯчеек = НалогНаПрибыльДекларация.ЗаполняемыеЯчейкиРегламентированногоОтчета(
				ИДРедакцииОтчета,
				ПараметрыОтчета.Организация,
				ПараметрыОтчета.мДатаКонцаПериодаОтчета);
				
			// ... другая - с помощью БЗКБ
			// Она имеет опосредованное отношение к декларации по налогу на прибыль,
			// поскольку данные в ней не влияют на расчет налога, уплачиваемого организацией.
			// В настоящее время сведения о физических лицах из декларации исключены.
			Если ИДРедакцииОтчета = "ФормаОтчета2015Кв1"
				ИЛИ ИДРедакцииОтчета = "ФормаОтчета2016Кв4" Тогда
				АвтоматическоеЗаполнениеОтчетности.ОписаниеПоказателей_РасчетПоНалогуНаПрибыль_2015Кв1(ПоказателиОтчета);
			КонецЕсли;
			
			// ... третья - модулем УставныйКапитал
			// Сведения о расчетах по доходам, в отношении которых
			// организация выступает в качестве налогового агента
			Если ИДРедакцииОтчета = "ФормаОтчета2016Кв4" Тогда
				УставныйКапитал.ОписаниеПоказателей_РасчетПоНалогуНаПрибыль_2016Кв4(ПоказателиОтчета);
			ИначеЕсли РегламентированныйОтчетПрибыль.ВерсияКонтейнера(ИДРедакцииОтчета) >= '2019-10-01' Тогда
				УставныйКапитал.ОписаниеПоказателей_РасчетПоНалогуНаПрибыль_2019Кв4(ПоказателиОтчета);
			КонецЕсли;
			
			Для Каждого НомерЯчейки Из НомераЯчеек Цикл
				РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, НомерЯчейки, Истина, Истина);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАвансыИмущество" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв3" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаАвансыИмуществоФормаОтчета2011Кв3(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаАвансыИмуществоФормаОтчета2013Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаАвансыИмуществоФормаОтчета2017Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаАвансыИмуществоФормаОтчета2019Кв1(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетЗемельныйНалог" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаЗемельныйНалогФормаОтчета2011Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаЗемельныйНалогФормаОтчета2013Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаЗемельныйНалогФормаОтчета2014Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаЗемельныйНалогФормаОтчета2017Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2018Кв1" ИЛИ ИДРедакцииОтчета = "ФормаОтчета2018Кв3" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаЗемельныйНалогФормаОтчета2018(
				ПоказателиОтчета, ИДРедакцииОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетУСН" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2009Кв1" Тогда
			
			УчетУСН.ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2009Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УчетУСН.ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2014Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			
			УчетУСН.ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2015Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2021Кв1" Тогда
			
			УчетУСН.ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2021Кв1(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетТранспортныйНалог" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2007Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2007Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2012Кв1(ПоказателиОтчета);

		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2012Кв4(ПоказателиОтчета);
		
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2013Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2014Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2016Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2016Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2019Кв1(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированноеУведомлениеЛьготаТранспортЗемля" Тогда
		
		УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхЗаявленияОЛьготеПоТранспортномуЗемельномуНалогу(ПоказателиОтчета);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетИмущество" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв3" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаИмуществоФормаОтчета2011Кв3(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаИмуществоФормаОтчета2013Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаИмуществоФормаОтчета2017Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв1" 
			 Или ИДРедакцииОтчета = "ФормаОтчета2019Кв4" 
			 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4" 
			 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4_1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаИмуществоФормаОтчета2019_2020(ПоказателиОтчета, ИДРедакцииОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАлкоПриложение11" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв3" Тогда
			
			УчетТоваров.ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УчетТоваров.ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение11ФормаОтчета2014Кв1(ПоказателиОтчета);
			
		КонецЕсли;
		
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАлкоПриложение12" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв3" Тогда
			
			УчетТоваров.ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение12ФормаОтчета2012Кв3(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАлкоПриложение25" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2021Кв1" Тогда
			
			УчетТоваров.ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение25ФормаОтчета2019Кв1(ПоказателиОтчета);
			
		КонецЕсли;
		
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАлкоПриложение26" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2021Кв1" Тогда
			
			УчетТоваров.ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение26ФормаОтчета2019Кв1(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ЗаполнениеФормСтатистикиКлиентСервер.РеализованоАвтозаполнениеФормы(ИДОтчета) Тогда
		
		ЗаполнениеФормСтатистики.ЗаполнитьСписокАвтозаполняемыхПолей(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета.Период);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП4"
		И ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
		
		УчетЗарплаты.ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетСтатистикаФормаП4ФормаОтчета2012Кв1(ПоказателиОтчета);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетПодтверждениеВидаДеятельности" Тогда
		
		УчетЗарплаты.ПолучитьСведенияОПоказателяхОтчетаПодтверждениеВидаДеятельностиСтрахователяДляФСС(ПоказателиОтчета);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчет3НДФЛ" Тогда
		
		УчетДоходовИРасходовПредпринимателя.ПолучитьСведенияОПоказателяхОтчета3НДФЛ(ИДРедакцииОтчета, ПоказателиОтчета);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетОперацииСДенежнымиСредствамиНФО" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2015Кв3" Тогда
			
			УчетНФО.ПолучитьСведенияОПоказателяхОтчетаОперацииСДенежнымиСредствамиНФО2015Кв3(ПоказателиОтчета);

		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв2" Тогда
			
			УчетНФО.ПолучитьСведенияОПоказателяхОтчетаОперацииСДенежнымиСредствамиНФО2017Кв2(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв2" Тогда
			
			УчетНФО.ПолучитьСведенияОПоказателяхОтчетаОперацииСДенежнымиСредствамиНФО2019Кв2(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = УчетЕНВД.ИдентификаторДекларации() Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2016Кв1"
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2017Кв1" Тогда
			
			УчетЕНВД.ПолучитьСведенияОПоказателяхДекларации2016Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2018Кв1"
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2018Кв3"
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2018Кв4" Тогда
			
			УчетЕНВД.ПолучитьСведенияОПоказателяхДекларации2018Кв1(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = УчетЕНВД.ИдентификаторЗаявления(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1) Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			УчетЕНВД.ПолучитьСведенияОПоказателяхЗаявленияЕНВД1_2014(ПоказателиОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = УчетЕНВД.ИдентификаторЗаявления(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2) Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			УчетЕНВД.ПолучитьСведенияОПоказателяхЗаявленияЕНВД2_2014(ПоказателиОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = УчетЕНВД.ИдентификаторЗаявления(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3) Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			УчетЕНВД.ПолучитьСведенияОПоказателяхЗаявленияЕНВД3_2014(ПоказателиОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = УчетЕНВД.ИдентификаторЗаявления(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4) Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			УчетЕНВД.ПолучитьСведенияОПоказателяхЗаявленияЕНВД4_2014(ПоказателиОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(
			Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОбУтратеПраваНаПатент) Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			УчетПСН.ПолучитьСведенияОПоказателяхЗаявленияУтратаПраваФорма2014_1(ПоказателиОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(
			Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме) Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			УчетПСН.ПолучитьСведенияОПоказателяхЗаявленияПрекращениеПатентаФорма2014_1(ПоказателиОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСведенияОрублевыхСчетах" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			УчетДенежныхСредствБП.ПолучитьСведенияОПоказателяхСправкиОРублевыхСчетах(ПоказателиОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСведенияОСчетахвВиностраннойВалюте" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			УчетДенежныхСредствБП.ПолучитьСведенияОПоказателяхСправкиОСчетахвВиностраннойВалюте(ПоказателиОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "БухгалтерскаяОтчетностьВБанк" Тогда
		ЗаполнениеОтчетностиВБанки.ПолучитьСведенияОПоказателях(ИДРедакцииОтчета, ПоказателиОтчета, ПараметрыОтчета);
		
	ИначеЕсли ИДОтчета = "РегламентированноеУведомлениеБумажныеФормы" И ИДРедакцииОтчета = "ФормаОсвобождениеНДС" Тогда
		ДатаОсвобожденияОтУплаты = УведомлениеОбОсвобожденииОтУплатыНДСВызовСервера.ДатаОсвобожденияОтУплатыНДС(
			ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаНачало);
		ПоказателиОтчета.Вставить("ДатаОсвобожденияОтУплаты", ДатаОсвобожденияОтУплаты);
		Если ПараметрыОтчета.Свойство("ПриСозданииФормы") Тогда
			ПараметрыБаннера = УведомлениеОбОсвобожденииОтУплатыНДСВызовСервера.ПараметрыБаннера(
				ПараметрыОтчета.Организация);
			ПоказателиОтчета.Вставить("ЗаголовокБаннера", ПараметрыБаннера.ТекстЗаголовок);
			ПоказателиОтчета.Вставить("КотикБаннерИзмененияНастроекУчетаНДС", ПараметрыБаннера.КартинкаКотик);
			ПоказателиОтчета.Вставить("ЗакрытьБаннерИзмененияНастроекУчетаНДС", ПараметрыБаннера.КартинкаЗакрытие);
			ПоказателиОтчета.Вставить("ЦветФонаБаннераИзмененияНастроекУчетаНДС", ПараметрыБаннера.ЦветФонаБаннера);
			ПоказателиОтчета.Вставить("НазваниеФормыНалогиИОтчеты", "ОбщаяФорма.НалогиИОтчеты");
		КонецЕсли;
		
	Иначе
		
		Если ИДОтчета = "РегламентированныйОтчет4ФСС"
			И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
			Если ИДРедакцииОтчета = "ФормаОтчета2017Кв1"
				ИЛИ ИДРедакцииОтчета = "ФормаОтчета2017Кв3" Тогда
				УчетЗарплаты.ПолучитьСведенияОПоказателях4ФСС(ПоказателиОтчета);
			КонецЕсли;
		Иначе
			ЗарплатаКадры.ЗаполнитьПоказателиРегламентированногоОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПоказателиОтчета;
	
КонецФункции

// Функция возвращает признак реализации настройки автозаполняемых показателей регл. отчета.
//
// Параметры:
//   ИДОтчета         - Строка - идентификатор отчета.
//	 ИДРедакцииОтчета - Строка - идентификатор редакции формы отчета.
//
// Возвращаемое значение:
//   Булево - признак реализации настройки автозаполняемых показателей регл. отчета.
//
// Пример:
//   Если ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП1" Тогда
//		 Если ИДРедакцииОтчета = "ФормаОтчета2010Кв1" Тогда	
//			 Возврат Истина;
//		 КонецЕсли;
//	 КонецЕсли;
//	 Возврат Ложь;
//
Функция РеализованаНастройкаАвтозаполняемыхПоказателейРеглОтчета(ИДОтчета, ИДРедакцииОтчета) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяОтчета", ИДОтчета);
	Отбор.Вставить("ИмяФормы",  ИДРедакцииОтчета);
	НастраиваемыеФормыСтатистики = ЗаполнениеФормСтатистики.НастраиваемыеФормыСтатистики(Отбор);
	Возврат НастраиваемыеФормыСтатистики.Количество() > 0;
	
КонецФункции

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
// Параметры:
//   ИДОтчета - Строка - имя регл. отчета.
//   ИДРедакцииОтчета - Строка - имя формы регл. отчета.
//   ПараметрыОтчета - Структура - параметры регл. отчета.
//   Контейнер - Структура - данные регл. отчета.
//
// Пример:
//	Если ИДОтчета = "РегламентированныйОтчетРСВ1" Тогда
//		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда	
//			Контейнер.Раздел30.П000300030103 = 100;
//			Контейнер.Раздел41.Добавить();
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ЗаполнитьОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
// Если не разрешен учет регулярной деятельности заполняется только ограниченный набор отчетов.
	Если НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности()
		И НЕ НулеваяОтчетность.АвтозаполняемыйОтчет(ИДОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИДОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
		
		ЗаполнениеБухгалтерскойОтчетности.ЗаполнитьБухотчетность(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетБухОтчетностьМП" Тогда
		
		ЗаполнениеБухгалтерскойОтчетности.ЗаполнитьБухотчетностьМП(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетБухОтчетностьСОНКО" Тогда
		
		ЗаполнениеБухгалтерскойОтчетности.ЗаполнитьБухОтчетностьСОНКО(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетНДС" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2009Кв4" Тогда
			
			УчетНДС.ЗаполнитьОтчетНДСФормаОтчета2009Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			
			УчетНДСФормированиеОтчетности.ЗаполнитьОтчетНДСФормаОтчета2015Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв1" Тогда
			
			УчетНДСФормированиеОтчетности.ЗаполнитьОтчетНДСФормаОтчета2017Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
			
			УчетНДСФормированиеОтчетности.ЗаполнитьОтчетНДСФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер);
		
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2020Кв4" Тогда
			
			УчетНДСФормированиеОтчетности.ЗаполнитьОтчетНДСФормаОтчета2020Кв4(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетКосвенныеНалогиТамСоюз" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2017Кв4" Тогда
			
			УчетНДСФормированиеОтчетности.ЗаполнитьОтчетКосвенныеНалогиПриИмпортеФормаОтчета2017Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2010Кв3" Тогда
		
			УчетНДС.ЗаполнитьОтчетКосвенныеНалогиТамСоюзФормаОтчета2010Кв3(ПараметрыОтчета, Контейнер);
		
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетРеестрНДСПриложение1" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2015Кв4" Тогда
		
			УчетНДСФормированиеОтчетности.ЗаполнитьОтчетРеестрНДСПриложение1ФормаОтчета2015Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2020Кв2" Тогда
		
			УчетНДСФормированиеОтчетности.ЗаполнитьОтчетРеестрНДСПриложение1ФормаОтчета2020Кв2(ПараметрыОтчета, Контейнер);
		
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2021Кв2" Тогда
		
			УчетНДСФормированиеОтчетности.ЗаполнитьОтчетРеестрНДСПриложение1ФормаОтчета2021Кв2(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетРеестрНДСПриложение5" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2015Кв4" Тогда
		
			УчетНДСФормированиеОтчетности.ЗаполнитьОтчетРеестрНДСПриложение5ФормаОтчета2015Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2020Кв2" Тогда
		
			УчетНДСФормированиеОтчетности.ЗаполнитьОтчетРеестрНДСПриложение5ФормаОтчета2020Кв2(ПараметрыОтчета, Контейнер);
		
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2021Кв2" Тогда
		
			УчетНДСФормированиеОтчетности.ЗаполнитьОтчетРеестрНДСПриложение5ФормаОтчета2021Кв2(ПараметрыОтчета, Контейнер);
		
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированноеУведомлениеРеестрДокументовПодтверждающихЛьготы" Тогда
		
		Если ИДРедакцииОтчета = "Форма2020_1" Тогда
			
			УчетНДСФормированиеОтчетности.ЗаполнитьОтчетРеестрДокументовПодтверждающихЛьготыФорма2020_1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетПрибыль" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2010Кв4" Тогда	
			
			НалоговыйУчет.ЗаполнитьОтчетПрибыльФормаОтчета2010Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда	

			НалоговыйУчет.ЗаполнитьОтчетПрибыльФормаОтчета2012Кв1(ПараметрыОтчета, Контейнер);
			
		Иначе
			
			// ФормаОтчета2013Кв4 и более поздние
			
			// Таблица для сбора сведений о расшифровке. 
			// Инициализируется в процедуре добавления записи 
			// с помощью ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки()
			ТаблицаРасшифровки = Неопределено; 
			
			// Определим, какие данные должна содержать декларация:
			// - по всей организации
			// - или по одному обособленному подразделению.
			// Первая представляется по месту нахождения организации,
			// вторая - по месту нахождения обособленного подразделения.
			Если ПараметрыОтчета.КПП = ПараметрыОтчета.Организация.КПП Тогда
				КППОбособленногоПодразделения = ""; // в целом по организации
			Иначе
				КППОбособленногоПодразделения = ПараметрыОтчета.КПП; // по обособленному подразделению
			КонецЕсли;
			
			ДатаПодписи = Неопределено;
			ПараметрыОтчета.Свойство("ДатаПодписи", ДатаПодписи);
			
			Периодичность = Неопределено;
			ПараметрыОтчета.Свойство("Периодичность", Периодичность);
			
			КонтекстРасчета = НалогНаПрибыльДекларация.НовыйКонтекстРасчета(
				ПараметрыОтчета.Организация,
				ПараметрыОтчета.мДатаКонцаПериодаОтчета,
				ДатаПодписи,
				КППОбособленногоПодразделения,
				Периодичность);
				
			Если КонтекстРасчета <> Неопределено Тогда
					
				// часть показателей заполняется модулем НалогНаПрибыльДекларация...
				НалогНаПрибыльДекларация.ЗаполнитьРегламентированныйОтчет(
					Контейнер,
					ТаблицаРасшифровки,
					ИДРедакцииОтчета,
					КонтекстРасчета);
			КонецЕсли;
			
			// ... другая - с помощью БЗКБ
			// Она имеет опосредованное отношение к декларации по налогу на прибыль,
			// поскольку данные в ней не влияют на расчет налога, уплачиваемого организацией
			// В настоящее время сведения о физических лицах из декларации исключены.
			Если ИДРедакцииОтчета = "ФормаОтчета2015Кв1" 
				ИЛИ ИДРедакцииОтчета = "ФормаОтчета2016Кв4" Тогда
				АвтоматическоеЗаполнениеОтчетности.ЗначенияПоказателей_РасчетПоНалогуНаПрибыль_2015Кв1(ПараметрыОтчета, Контейнер);
			КонецЕсли;
			
			// ... третья - модулем УставныйКапитал
			// Сведения о расчетах по доходам, в отношении которых
			// организация выступает в качестве налогового агента
			Если ИДРедакцииОтчета = "ФормаОтчета2016Кв4" Тогда
				УставныйКапитал.ЗначенияПоказателей_РасчетПоНалогуНаПрибыль_2016Кв4(ПараметрыОтчета, Контейнер);
			ИначеЕсли РегламентированныйОтчетПрибыль.ВерсияКонтейнера(ИДРедакцииОтчета) >= '2019-10-01' Тогда
				УставныйКапитал.ЗначенияПоказателей_РасчетПоНалогуНаПрибыль_2019Кв4(ПараметрыОтчета, Контейнер);
			КонецЕсли;
			
			// Так как расшифровка составляется разными алгоритмами, то в общем случае порядок показателей в ней может оказаться непонятным для пользователя.
			// Поэтому отсортируем показатели расшифровки по возрастанию их номеров ячеек.
			// Исходя из формата ячеек это должно привести к тому, что показатели в расшифровке будут идти в том же порядке,
			// как в распечатанном отчете.
			// Однако, так как номер ячейки - не ключевое поле, то сортировку нужно выполнять так,
			// чтобы не нарушить порядок записей расшифровки каждого конкретного поля.
			Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") 
				И ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя") <> Неопределено
				И ТаблицаРасшифровки.Колонки.Найти("ИсходныйПорядок") = Неопределено Тогда
				ТаблицаРасшифровки.Колонки.Добавить("ИсходныйПорядок", Новый ОписаниеТипов("Число"));
				Для Каждого СтрокаРасшифровки Из ТаблицаРасшифровки Цикл
					СтрокаРасшифровки.ИсходныйПорядок = ТаблицаРасшифровки.Индекс(СтрокаРасшифровки);
				КонецЦикла;
				ТаблицаРасшифровки.Сортировать("ИмяПоказателя, ИсходныйПорядок");
				ТаблицаРасшифровки.Колонки.Удалить("ИсходныйПорядок");
			КонецЕсли;
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ЗаполнитьКолонкуОрганизация(ТаблицаРасшифровки, ПараметрыОтчета.Организация);
			
			РегламентированныйОтчетПрибыль.ПринятьРезультатАвтозаполнения(Контейнер, ТаблицаРасшифровки, ПараметрыОтчета, ИДРедакцииОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАвансыИмущество" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв3" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетАвансыИмуществоФормаОтчета2011Кв3(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетАвансыИмуществоФормаОтчета2013Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетАвансыИмуществоФормаОтчета2017Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетАвансыИмуществоФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетЗемельныйНалог" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетЗемельныйНалогФормаОтчета2011Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетЗемельныйНалогФормаОтчета2013Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетЗемельныйНалогФормаОтчета2014Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетЗемельныйНалогФормаОтчета2017Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2018Кв1" ИЛИ ИДРедакцииОтчета = "ФормаОтчета2018Кв3" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетЗемельныйНалогФормаОтчета2018(
				ПараметрыОтчета, Контейнер, ИДРедакцииОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетУСН" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2009Кв1" Тогда
			
			УчетУСН.ЗаполнитьОтчетУСНФормаОтчета2009Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УчетУСН.ЗаполнитьОтчетУСНФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			
			УчетУСН.ЗаполнитьОтчетУСНФормаОтчета2015Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2021Кв1" Тогда
			
			УчетУСН.ЗаполнитьОтчетУСНФормаОтчета2021Кв1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетТранспортныйНалог" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2007Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетТранспортныйНалогФормаОтчета2007Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетТранспортныйНалогФормаОтчета2012Кв1(ПараметрыОтчета, Контейнер);

		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетТранспортныйНалогФормаОтчета2012Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетТранспортныйНалогФормаОтчета2013Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетТранспортныйНалогФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2016Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетТранспортныйНалогФормаОтчета2016Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетТранспортныйНалогФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированноеУведомлениеЛьготаТранспортЗемля" Тогда
		
		УправлениеВнеоборотнымиАктивами.ЗаполнитьЗаявлениеОЛьготеПоТранспортномуЗемельномуНалогу(ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетИмущество" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв3" Тогда	
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетИмуществоФормаОтчета2011Кв3(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда	
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетИмуществоФормаОтчета2013Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетИмуществоФормаОтчета2017Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв1" 
			 Или ИДРедакцииОтчета = "ФормаОтчета2019Кв4" 
			 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4"
			 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4_1" Тогда
			 
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетИмуществоФормаОтчета2019_2020(ПараметрыОтчета, Контейнер, ИДРедакцииОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАлкоПриложение11" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв3" Тогда
			
			УчетТоваров.ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УчетТоваров.ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАлкоПриложение12" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв3" Тогда
			
			УчетТоваров.ЗаполнитьРегламентированныйОтчетАлкоПриложение12ФормаОтчета2012Кв3(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАлкоПриложение25" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2021Кв1" Тогда
			
			УчетТоваров.ЗаполнитьРегламентированныйОтчетАлкоПриложение25ФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАлкоПриложение26" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2021Кв1" Тогда
			
			УчетТоваров.ЗаполнитьРегламентированныйОтчетАлкоПриложение26ФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ЗаполнениеФормСтатистикиКлиентСервер.РеализованоАвтозаполнениеФормы(ИДОтчета) Тогда
		
		ЗаполнениеФормСтатистики.ЗаполнитьФормуСтатистики(Контейнер, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП4"
		И ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
		
		УчетЗарплаты.ЗаполнитьРегламентированныйОтчетСтатистикаФормаП4ФормаОтчета2012Кв1(ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетПодтверждениеВидаДеятельности" Тогда
		
		УчетЗарплаты.ЗаполнитьПодтверждениеВидаДеятельностиСтрахователяДляФСС(ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчет3НДФЛ" Тогда
		
		УчетДоходовИРасходовПредпринимателя.ЗаполнитьОтчет3НДФЛ(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетОперацииСДенежнымиСредствамиНФО" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2015Кв3" Тогда
			
			УчетНФО.ЗаполнитьРегламентированныйОтчетОперацииСДенежнымиСредствамиНФО2015Кв3(ПараметрыОтчета, Контейнер);

		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв2" Тогда
			
			УчетНФО.ЗаполнитьРегламентированныйОтчетОперацииСДенежнымиСредствамиНФО2017Кв2(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв2" Тогда
			
			УчетНФО.ЗаполнитьРегламентированныйОтчетОперацииСДенежнымиСредствамиНФО2019Кв2(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = УчетЕНВД.ИдентификаторДекларации() Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2016Кв1"
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2017Кв1" Тогда
			
			УчетЕНВД.ЗаполнитьДекларацию2016Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2018Кв1"
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2018Кв3"
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2018Кв4" Тогда
			
			УчетЕНВД.ЗаполнитьДекларацию2018Кв1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = УчетЕНВД.ИдентификаторЗаявления(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1) Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			УчетЕНВД.ЗаполнитьЗаявлениеЕНВД1_2014(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = УчетЕНВД.ИдентификаторЗаявления(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2) Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			УчетЕНВД.ЗаполнитьЗаявлениеЕНВД2_2014(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = УчетЕНВД.ИдентификаторЗаявления(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3) Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			УчетЕНВД.ЗаполнитьЗаявлениеЕНВД3_2014(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = УчетЕНВД.ИдентификаторЗаявления(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4) Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			УчетЕНВД.ЗаполнитьЗаявлениеЕНВД4_2014(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(
			Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОбУтратеПраваНаПатент) Тогда
			
		Если ИДРедакцииОтчета = "Форма2014_1"
			Или ИДРедакцииОтчета = "Форма2019_1" Тогда
			УчетПСН.ЗаполнитьЗаявлениеУтратаПраваПатентаФорма2014_1(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(
			Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме) Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			УчетПСН.ЗаполнитьЗаявлениеПрекращениеПатентаФорма2014_1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "Форма2020_1" Тогда
			УчетПСН.ЗаполнитьЗаявлениеПрекращениеПатентаФорма2020_1(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСведенияОрублевыхСчетах" Тогда
		
		УчетДенежныхСредствБП.ЗаполнитьСведенияОрублевыхСчетах(ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСведенияОСчетахвВиностраннойВалюте" Тогда
		
		УчетДенежныхСредствБП.ЗаполнитьСведенияОСчетахвВиностраннойВалюте(ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДОтчета = "БухгалтерскаяОтчетностьВБанк" Тогда
		
		ЗаполнениеОтчетностиВБанки.ЗаполнитьОтчетностьВБанки(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);

	ИначеЕсли ИДОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
		
		ЗаполнениеРасшифровокБухОтчетности.ЗаполнитьРасшифровкиБухгалтерскойОтчетности(
			ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДОтчета = "РегламентированноеУведомлениеФормаР11001" Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Или ИДРедакцииОтчета = "Форма2020_4" Тогда
			Обработки.РегистрацияОрганизации.ЗаполнитьЗаявлениеОПостановкеНаУчетООО(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированноеУведомлениеФормаР13001" Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			Обработки.РегистрацияОрганизации.ЗаполнитьЗаявлениеРегистрацииИзмененийУчредительныхДокументов(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированноеУведомлениеФормаР13014" Тогда
		
		Если ИДРедакцииОтчета = "Форма2020_4" Тогда
			Обработки.РегистрацияОрганизации.ЗаполнитьЗаявлениеРегистрацииИзмененийЕГРЮЛ(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированноеУведомлениеФормаР14001" Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			Обработки.РегистрацияОрганизации.ЗаполнитьЗаявлениеРегистрацииИзмененийЕГРЮЛ(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированноеУведомлениеФормаР21001" Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Или ИДРедакцииОтчета = "Форма2020_4" Тогда
			Обработки.РегистрацияОрганизации.ЗаполнитьУведомлениеОПостановкеНаУчетИП(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированноеУведомлениеФормаР24001" Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Или ИДРедакцииОтчета = "Форма2020_4" Тогда
			Обработки.РегистрацияОрганизации.ЗаполнитьЗаявлениеРегистрацииИзмененийЕГРИП(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированноеУведомлениеПереходНаУСН" Тогда
		
		Если ИДРедакцииОтчета = "Форма2014_1" Тогда
			УчетУСН.ЗаполнитьУведомлениеОПереходеНаУСН(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированноеУведомлениеБумажныеФормы" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОсвобождениеНДС" Тогда
			УведомлениеОбОсвобожденииОтУплатыНДСВызовСервера.ЗаполнитьУведомление(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	Иначе
		
		Если ИДОтчета = "РегламентированныйОтчет4ФСС"
			И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
			Если ИДРедакцииОтчета = "ФормаОтчета2017Кв1"
				ИЛИ ИДРедакцииОтчета = "ФормаОтчета2017Кв3" Тогда
				УчетЗарплаты.ЗаполнитьРегламентированныйОтчет4ФСС(ПараметрыОтчета, Контейнер);
			КонецЕсли;
		Иначе
			ЗарплатаКадры.ЗаполнитьРегламентированныйОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции статистики.

// Автоматически заполняет отчет в фоновом режиме.
//
Процедура ЗаполнитьОтчетВФоне(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ЗаполнитьОтчет(ПараметрыОтчета.ИДОтчета, ПараметрыОтчета.ИДРедакцииОтчета, ПараметрыОтчета.ПараметрыОтчета, ПараметрыОтчета.Контейнер);
	Попытка
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыОтчета.ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	Исключение
		ТаблицаРасшифровки = Неопределено;
	КонецПопытки;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Контейнер", ПараметрыОтчета.Контейнер);
	СтруктураДанных.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры интеграции со списком задач бухгалтера.

// Процедура изменят заголовки кнопок.
//
// Параметры:
//   КнопкаСправочникОтчетов - Строка - заголовок кнопки, при щелчке по которой открывается справочник регл. отчетов.
//   КнопкаКалендарь - Строка - заголовок кнопки, при щелчке по которой открывается календарь бухгалтера.
//
Процедура НастроитьКнопкиКалендаряБухгалтера(КнопкаСправочникОтчетов = Неопределено, КнопкаКалендарь = Неопределено) Экспорт
	
	Если КнопкаКалендарь <> Неопределено Тогда
		КнопкаКалендарь.Заголовок = НСтр("ru = 'Календарь бухгалтера'");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры интерфейса взаимодействия с конфигурациями (библиотеками)
// - потребителями.

// Процедура возвращает структуру с табличными документами разделов 2.5 и 6 формы РСВ-1.
//
// Параметры:
//   СсылкаНаСохрРеглОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на регламентированный отчет.
//   СтруктураРазделов     - Структура - разделы:
//     * ключ     - Строка - имя раздела;
//     * значение - Массив - массив структур с полями:
//      ** Описание - Строка - описание;
//      ** ТабличныйДокумент - ТабличныйДокумент - раздел.
//   НумероватьСтраницы              - Булево - признак нумерации страниц.
//   НомерПервойстраницыРаздела25    - Число - номер первой страницы раздела 2.5.
//   НомерПоследнейстраницыРаздела25 - Число - номер последней страницы раздела 2.5.
//   НомерПервойстраницыРаздела6     - Число - номер первой страницы раздела 6.
//   ОбщееКоличествоСтраницРаздела6  - Число - общее количество страниц раздела 6.
//
Процедура ПолучитьРаздел25иРаздел6ФормыРСВ1(СсылкаНаСохрРеглОтчет, СтруктураРазделов,
	                                        НумероватьСтраницы,
											НомерПервойстраницыРаздела25,
											НомерПоследнейстраницыРаздела25,
											НомерПервойстраницыРаздела6,
											ОбщееКоличествоСтраницРаздела6) Экспорт
	
	ПерсонифицированныйУчет.ЗаполнитьПечатныеФормыРазделовРСВ1(
		СсылкаНаСохрРеглОтчет,
		СтруктураРазделов,
		НумероватьСтраницы,
		НомерПервойстраницыРаздела25,
		НомерПоследнейстраницыРаздела25,
		НомерПервойстраницыРаздела6,
		ОбщееКоличествоСтраницРаздела6);
	
КонецПроцедуры

// Процедура заполняет данные для выгрузки раздела 2.5 формы РСВ-1
//
// Параметры:
//   СсылкаНаСохрРеглОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на регламентированный отчет.
//   ДанныеРаздела25       - Структура - с ключами "Таблица_2_5_1" и "Таблица_2_5_2":
//     * Таблица_2_5_1     - ТаблицаЗначений - заполняется данными многострочной
//                           части подраздела 2.5.1 по колонкам 2 - 5:
//       ** П000251000102  - Число - (длина - 15, точность - 2);
//       ** П000251000103  - Число - (длина - 15, точность - 2);
//       ** П000251000104  - Число - (длина - 3, точность - 0);
//       ** П000251000105  - Строка - (длина - 100);
//     * Таблица_2_5_2     - ТаблицаЗначений - заполняется данными многострочной
//                           части подраздела 2.5.2 по колонкам 2 - 8:
//       ** П000252000102  - Число - (длина - 1, точность - 0);
//       ** П000252000103  - Число - (длина - 4, точность - 0);
//       ** П000252000104  - Число - (длина - 15, точность - 2);
//       ** П000252000105  - Число - (длина - 15, точность - 2);
//       ** П000252000106  - Число - (длина - 15, точность - 2);
//       ** П000252000107  - Число - (длина - 3, точность - 0);
//       ** П000252000108  - Строка - (длина - 100).
//
Процедура ЗаполнитьДанныеДляВыгрузкиРаздела25РСВ_1(СсылкаНаСохрРеглОтчет, ДанныеРаздела25) Экспорт
	
	ПерсонифицированныйУчет.ЗаполнитьДанныеДляВыгрузкиРаздела25РСВ_1(СсылкаНаСохрРеглОтчет, ДанныеРаздела25);
	
КонецПроцедуры

// Процедура вызывается при создании на сервере формы регламентированного отчета.
//
// Параметры:
//  ИмяОтчета - Строка - имя отчета в дереве объектов метаданных;
//  ИмяФормы  - Строка - имя формы отчета;
//  Форма     - УправляемаФорма - форма, из которой вызывается процедура.
//
Процедура ПриСозданииФормыРеглОтчета(ИмяОтчета, ИмяФормы, Форма) Экспорт
			
КонецПроцедуры

#Область ПроцедурыИФункцииСпискаЗадачБухгалтера

// Вызывается при изменении ручных статусов.
// См. также ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента
//
// Параметры:
//	Ссылка - ДокументСсылка - ссылка на документ.
//	Статус - Строка         - актуальный статус; предполагает сравнение с СтатусСданоСтрокой().
//
// Пример реализации:
//  ВыполнениеЗадачБухгалтера.ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиОтчета(Ссылка, Статус);
//
Процедура ИзменитьРучнойСтатус(Ссылка, Статус) Экспорт
	
	ВыполнениеЗадачБухгалтера.ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиОтчета(Ссылка, Статус);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОтчетностиПоАлкогольнойПродукции

// Возвращает в параметре "СтрокаИмениОбъекта" имя объекта, 
// соответствующего "РегистрСведений.СведенияОбАлкогольнойПродукции" в БП.
// Если такого объекта нет - пустая строка.
//
// Параметры:
//  СтрокаИмениОбъекта - Строка - имя объекта, соответствующего "РегистрСведений.СведенияОбАлкогольнойПродукции" в БП. 
//
// Пример реализации:
//  СтрокаИмениОбъекта = "РегистрСведений.СведенияОбАлкогольнойПродукции";
//
Процедура СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции(СтрокаИмениОбъекта) Экспорт
	СтрокаИмениОбъекта = "РегистрСведений.СведенияОбАлкогольнойПродукции";
КонецПроцедуры

// Возвращает в параметре "СтрокаИмениОбъекта" имя объекта,
// соответствующего "Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво" в БП.
// Если такого объекта нет - пустая строка.
//
// Параметры:
//	СтрокаИмениОбъекта - Строка - имя объекта, соответствующего "Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво" в БП.
//
// Пример реализации:
//  СтрокаИмениОбъекта = "Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво";
//
Процедура СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво(СтрокаИмениОбъекта) Экспорт
	СтрокаИмениОбъекта = "Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво";
КонецПроцедуры

// Возвращает в параметре "СтрокаИмениОбъекта" имя объекта,
// соответствующего "РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции" в БП.
// Если такого объекта нет - пустая строка.
//
// Параметры:
//	СтрокаИмениОбъекта - Строка - имя объекта, соответствующего "РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции" в БП.
//
// Пример реализации:
//  СтрокаИмениОбъекта = "РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции";
//
Процедура СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции(СтрокаИмениОбъекта) Экспорт
	СтрокаИмениОбъекта = "РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции";
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции.

// Функция возвращает идентификатор конфигурации.
// Длина идентификатора не должна превышать 8 символов.
//
// Возвращаемое значение:
//   Строка - идентификатор конфигурации.
//
// Пример:
//   Возврат "БПКОРП";
//
Функция ИДКонфигурации() Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	Если МетаданныеИмя = "БухгалтерияПредприятия" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая1" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияУчебная" Тогда
		Возврат "БП";
	ИначеЕсли МетаданныеИмя = "БухгалтерияПредприятияКОРП" Тогда
		Возврат "БПКОРП";
	Иначе
		Возврат МетаданныеИмя;
	КонецЕсли;
	
КонецФункции

// Функция возвращает краткое название конфигурации.
// Длина возвращаемого значения не должна превышать 30 символов.
//
// Возвращаемое значение:
//   Строка - краткое название конфигурации.
//
// Пример:
//   Возврат "1С:Бухгалтерия";
//
Функция КраткоеНазваниеПрограммы() Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	
	Если МетаданныеИмя = "БухгалтерияПредприятия" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая"
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая1"
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияУчебная" Тогда
		Возврат "1С:Бухгалтерия";
	ИначеЕсли МетаданныеИмя = "БухгалтерияПредприятияКОРП" Тогда
		Возврат "1С:Бухгалтерия КОРП";
	Иначе
		Возврат МетаданныеИмя;
	КонецЕсли;
	
КонецФункции

// Функция возвращает список используемых в конфигурации регламентированных отчетов.
//
// Возвращаемое значение:
//   СписокЗначений - список регламентированных отчетов.
//
// Пример:
//   СписокРегламентированныхОтчетов = Новый СписокЗначений;
//   СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНДС");
//	 Возврат СписокРегламентированныхОтчетов;
//
Функция ПолучитьСписокРегламентированныхОтчетов() Экспорт
	
	СписокРегламентированныхОтчетов = Новый СписокЗначений;
	
	// Бухгалтерская отчетность
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетБухОтчетность");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетБухОтчетностьМП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетБухОтчетностьСОНКО");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРасчетЧистыхАктивов");
	
	// Налоговая отчетность
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНДС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПрибыль");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетДоходыЗаПределамиРФ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетИмущество");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетИзвещениеОбУплатеАвансовогоПлатежаАкциза");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетИзвещениеОбОсвАвансовогоПлатежаАкциза");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАкцизыПриложение1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАкцизыПриложение5");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАкцизыПриложение7");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрАкцизыПриложение1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрАкцизыПриложение2");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАкцизыТабак");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАкцизыАлкоголь");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАкцизыГСМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАкцизыНефтяноеСырье");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРозничныеЦеныНаТабак");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНалогНаИгорныйБизнес");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНедра");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетУСН");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетВода");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЖивотныйМир");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЖивотныйМирСведенияОВыданныхЛицензиях");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетВодныеБиоресурсы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетВодныеБиоресурсыПрилов");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНДПИ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЕСХН");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРасчетПлатыОкрСредаСвод");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетОтходыСубъектовМСП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРасчетПоОплатеЗаВоду");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетДоходыИностраннымОрганизациям");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЗемельныйНалог");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПрибыльСРП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетТранспортныйНалог");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЕУНД");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАвансыИмущество");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетКосвенныеНалогиТамСоюз");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЗаявлениеОВвозеТоваров");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПрибыльСколковоРасчетПрибыли");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПрибыльСколковоРасчетНалоговойБазы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСведенияОДолеДоходовОтОбразовательнойИлиМедДеятельности");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетФинансовыйРезультатИнвестиционногоТоварищества");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетФорма2ТПОтходы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетФорма2ТПРекультивация");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПереченьЗаявленийОВвозеТоваров");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетДвижениеСредствПоСчетуВБанкеЗаПределамиРФ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение2");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение3");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение4");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение5");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение6");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение7");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение8");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение9");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение10");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение11");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение12");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение13");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСПриложение14");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСДокументыДляКомпенсацииНалога");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСДекларацииИТаможенныеДекларации23");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрНДСДекларацииНаЭкспрессГрузы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСведенияОДолеДоходовОрганизацииПоСоцУслугам");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРасчетЭкологическийСбор");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетДекларацияПлатаНВОС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетДекларацияОВоздействииНаОкружающуюСреду");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрСФНаПереработкуБензина");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрСФПоАвиационномуКеросину");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрСФПоБензинуИзДавальческогоСырья");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрСФПоБензинуИзСобственногоСырья");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрСФПоБензолуПараксилолуОртоксилолу");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрСФПоЭтиловомуСпирту");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрСФПоСреднимДистиллятам");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрСФПоНефтяномуСырью");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПодтверждениеРазмещенияОтчетаНИОКРвГИС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНДДУ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетДоходыОтТуристскоРекреационнойДеятельности");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетИнОргНДСУслугиВЭлектроннойФорме");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРасчетСовокупногоРазмераПрибыли");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрСФПоВиноматериалам");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрСФПоДенатурированномуЭтиловомуСпирту");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрАкцизыВычетыВиноматериалы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРеестрАкцизыВычетыЭтиловыйСпирт");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетКоличествоТоваровПодлежащихУтилизации");
	
	// Отчетность по физлицам
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет4НДФЛ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет3НДФЛ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет6НДФЛ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет6_НДФЛ");
	
	// Отчетность в фонды
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет4ФСС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет4аФСС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтраховыеВзносыНСИПЗ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПодтверждениеВидаДеятельности");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРВ3");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРСВ1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРСВ2");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистика1Квотирование");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСоответствиеУсловийТруда");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРасчетПоСтраховымВзносам");
	
	
	// Налоговая отчетность иностранных организаций
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПрибыльИностраннойОрганизации");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетДеятельностьИнОргВРФ");
	
	// Статистика
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаБухОтчетность");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП1Приложение3");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП1СХ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП2");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП3");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП4");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП4НЗ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП5М");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП6");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаПМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаПМПром");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаПМТорг");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1И");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПмес");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма3Информ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма3Ф");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма5З");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП2инв");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП2к");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма11");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма11К");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Т");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1П");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1РП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаМПм");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПОбразование");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПКультура");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПНаука");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПСоц");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПЗдрав");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаС1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаС2");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ДАП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаДАС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма22ЖКХсв");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Автотранс");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Алкоголь");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1АлкогольОпт");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2ЦеныПриобр");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма9КС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПсвед");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Услуги");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ЦеныПроизв");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ДАуслуги");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма65Автотранс");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Закупки");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма3СБвывоз");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма11Сделка");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаДАППМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма3ТОРГПМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2НаукаКр");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ТРавто");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Учет");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма8ВЭСуслуги");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ВЭС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма11ТЭР");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма4ТЭР");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма12Ф");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ТОРГ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1НатураБМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма7Травматизм");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2ТПВоздух");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма26ЖКХ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма12Строительство");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма4Запасы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Технология");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаДАФЛ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаМПмсх");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ЦеныПриобр");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма4Инновация");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма24Энергетика");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма14МЕТлом");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Туст");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Тчзп");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма85К");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ТЕП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Кадры");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1КСРКраткая");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1КСР");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ДМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2ДМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2ДМприл");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2ДМДавальческоеСырье");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма4ДМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1РабочаяСила");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1СХцены");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2СБСеверСр");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2МПинн");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма11НА");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаПрочиеФормы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1РЖ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаТОРГм");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаИЖС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма8ВЭСТрусл");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма57Т");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Предприниматель");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаМПСП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаТЗВМП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаПУслуги");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаМПмикронатура");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПуслуги");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Тпроф");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаМГОЗ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1СОНКО");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1НКО");	
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма22ЖКХжилище");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма22ЖКХресурсы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма11ФСС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Фермер");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПАвтогруз");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Конъюнктура");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1КонъюнктураОпт");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ЛХ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма4ОС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПФизическаяКультураИСпорт");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1РЦ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2РЦ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2ТПОхота");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаПМ1Автогруз");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма6Нефть");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2Наука");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаИАП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1КХ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма30");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма18КС");
	
	// Справки
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСведенияОрублевыхСчетах");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСведенияОСчетахвВиностраннойВалюте");
	
	// Декларирование производства и оборота алкогольной продукции
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение2");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение3");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение4");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение5");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение6");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение7");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение8");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение9");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение10");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение11");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение12");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение13");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение14");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение15");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение16");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение17");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение18");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоЗаявлениеОКорректировке");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоУведомлениеВыездногоОбслуживания");
	
	// Отчеты с 2019 года.
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение19");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение20");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение21");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение22");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение23");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение24");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение25");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение26");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение27");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение28");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение29");
	
	// Отчетность в Минобороны
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетИсполнениеКонтрактовГОЗ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетФорма1ГОЗ");
	
	// Отчетность прочая
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетУтилизационныйСбор");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетУтилизационныйСборСамоходныеМашины");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЭкологическийКонтроль");
	
	УчетОбособленныхПодразделений.ПриПолученииСпискаРегламентированныхОтчетов(СписокРегламентированныхОтчетов);
	
	Возврат СписокРегламентированныхОтчетов;
	
КонецФункции

// Функция возвращает признак - является ли организация физ. или юр. лицом.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//   Истина - организация является юр. лицом;
//   Ложь   - организация является физ. лицом.
//
// Пример:
//   Если Организация.ИностраннаяОрганизация Тогда
//		 Возврат Истина;
//	 Иначе
//		 Возврат (Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
//	 КонецЕсли;
//
Функция ЭтоЮридическоеЛицо(Организация) Экспорт
	
	Возврат (Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
КонецФункции

// Возвращает признак уплаты налогоплательщиком единого налога на вмененный доход (ЕНВД).
//
// Параметры:
//   Организация   - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   Период        - Дата - дата, на которую нужно получить признак.
//   НачалоПериода - Дата - дата начала периода, за который нужно получить признак.
//
// Возвращаемое значение:
//   Истина - налогоплательщик уплачивает ЕНВД.
//   Ложь   - налогоплательщик не уплачивает ЕНВД.
//
// Пример:
// Если НачалоПериода = Неопределено Тогда
//     Возврат УчетнаяПолитика.ПлательщикЕНВД(Организация, Период);
// Иначе
//     Возврат УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоПериода, Период);
// КонецЕсли;
//
Функция ПлательщикЕНВД(Организация, Период, НачалоПериода = Неопределено) Экспорт
	
	Если НачалоПериода = Неопределено Тогда
		Возврат УчетнаяПолитика.ПлательщикЕНВД(Организация, Период);
	Иначе
		Возврат УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоПериода, Период);
	КонецЕсли;
	
КонецФункции

// Функция возвращает систему налогообложения организации.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   Период      - Дата - дата, на которую нужно получить систему налогообложения.
//
// Возвращаемое значение:
//   Общая      - общая система налогообложения.
//   Упрощенная - упрощенная система налогообложения.
//
// Пример:
//   УчетнаяПолитикаОрганизации = УчетнаяПолитика.СистемаНалогообложения(Организация, Период);
//	 Если УчетнаяПолитикаОрганизации = Перечисления.СистемыНалогообложения.Общая Тогда
//		 Возврат "Общая";
//	 Иначе
//		 Возврат "Упрощенная";
//	 КонецЕсли;
//
Функция СистемаНалогообложения(Организация, Период) Экспорт
	
	УчетнаяПолитикаОрганизации = УчетнаяПолитика.СистемаНалогообложения(Организация, Период);
	
	Если УчетнаяПолитикаОрганизации = Перечисления.СистемыНалогообложения.Общая Тогда
		Возврат "Общая";
	Иначе
		Возврат "Упрощенная";
	КонецЕсли;
	
КонецФункции

// Функция возвращает признак применения ПБУ 18/02.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   Период      - Дата - дата, на которую нужно получить признак.
//
// Возвращаемое значение:
//   Истина - ПБУ 18/02 применяется.
//   Ложь   - ПБУ 18/02 не применяется.
//
// Пример:
//   Возврат УчетнаяПолитика.ПоддержкаПБУ18(Организация, Период);
//
Функция ПрименяетсяПБУ18(Организация, Период) Экспорт
	
	ВариантУчетаОтложенногоНалога = НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(Период, Организация);
	Возврат ВариантУчетаОтложенногоНалога <> Перечисления.ВариантыУчетаОтложенногоНалога.Нет;
	
КонецФункции

// Функция возвращает признак - является ли организация иностранной.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//   Истина - организация является иностранной;
//   Ложь   - организация не является иностранной.
//
// Пример:
//   Если Организация.Метаданные().Реквизиты.Найти("ИностраннаяОрганизация") <> Неопределено Тогда
//		 Возврат Организация.ИностраннаяОрганизация;
//	 Иначе
//		 Возврат Ложь;
//	 КонецЕсли;
//
Функция ЭтоИностраннаяОрганизация(Организация) Экспорт
	
	Если Организация.Метаданные().Реквизиты.Найти("ИностраннаяОрганизация") <> Неопределено Тогда
		Возврат Организация.ИностраннаяОрганизация;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция возвращает сведения о сотрудниках (застрахованных лицах) организации по состоянию на указанную дату.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника Организации, по которому требуется получить сведения.
//   ДатаЗапроса - Дата - дата, по состоянию на которую требуется получить сведения.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с колонками "Фамилия", "Имя", "Отчество" и "СтраховойНомерПФР",
//                     в которых содержится информация о фамилии, имени, отчестве и страховом номере (СНИЛС)
//                     каждого из сотрудников (застрахованных лиц) организации соответственно.
//
// Пример:
//   СтруктураПараметров = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизаций();
//   СтруктураПараметров.Организация = Организация;
//   СтруктураПараметров.ОкончаниеПериода = ДатаЗапроса;
//
//   Сотрудники = КадровыйУчет.СотрудникиОрганизации(Истина, СтруктураПараметров);
//
//   Возврат КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники.ВыгрузитьКолонку("Сотрудник"), "Фамилия,Имя,Отчество,СтраховойНомерПФР", ДатаЗапроса);
//
Функция ПолучитьСписокЗастрахованныхЛицОрганизации(Организация, ДатаЗапроса) Экспорт
	
	Возврат ЗарплатаКадры.СписокЗастрахованныхЛицОрганизацииЗаОтчетныйПериодПФР(Организация, ДатаЗапроса);
	
КонецФункции

// Процедура добавляет в форму назначаемую команду.
//
// Параметры:
//   Форма - Форма - форма, в которую добавляется команда.
//   ГруппаФормы - Форма.Элементы - группа формы, в которой будет располагаться команда.
//
Процедура ДобавитьНазначаемуюКоманду(Форма, ГруппаФормы) Экспорт
	
	ИмяКоманды = "ОткрытьЭкспрессПроверкуВеденияУчета";
	
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Заголовок = НСтр("ru = 'Экспресс-проверка ведения учета'");
	Команда.Действие = "Подключаемый_ВыполнитьНазначаемуюКоманду";
	
	Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаФормы);
	Кнопка.ИмяКоманды = ИмяКоманды;
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	
	ГруппаФормы.Видимость = Истина;
	
КонецПроцедуры

// Функция возвращает заголовок формы "УправлениеОтчетностью" обработки "ОбщиеОбъектыРеглОтчетности".
// Если функция возвращает пустую строку, то используется заголовок формы, указанный по умолчанию.
//
// Возвращаемое значение:
//   Строка - заголовок формы управление отчетностью.
//
// Пример:
//   Возврат "";
//
Функция ЗаголовокФормыУправлениеОтчетностью() Экспорт
	
	Возврат "";
	
КонецФункции

// Процедура возвращает признак - является ли индивидуальный предприниматель работодателем для наемных сотрудников.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//  ИПИспользуетТрудНаемныхРаботников - Булево - признак - является ли индивидуальный предприниматель
//                                               работодателем для наемных сотрудников.
//                                               Истина - ИП является работодателем;
//                                               Ложь   - ИП не является работодателем.
//  ДатаНачалаПериодаОтчета - Дата - дата начала периода отчета.
//  ДатаКонцаПериодаОтчета - Дата - дата конца периода отчета.
//
// Пример:
//	ИПИспользуетТрудНаемныхРаботников = НЕ ЭтоЮридическоеЛицо(Организация)
//		И (ЗначениеЗаполнено(Организация.РегистрационныйНомерПФР)
//		ИЛИ ЗначениеЗаполнено(Организация.КодОрганаПФР)
//		ИЛИ ЗначениеЗаполнено(Организация.НаименованиеТерриториальногоОрганаПФР)
//		ИЛИ ЗначениеЗаполнено(Организация.РегистрационныйНомерТФОМС)
//		ИЛИ ЗначениеЗаполнено(Организация.РегистрационныйНомерФСС)
//		ИЛИ ЗначениеЗаполнено(Организация.КодПодчиненностиФСС)
//		ИЛИ ЗначениеЗаполнено(Организация.НаименованиеТерриториальногоОрганаФСС));
//
Процедура ПолучитьПризнакИспользованияИПТрудаНаемныхРаботников(Организация,
															   ИПИспользуетТрудНаемныхРаботников,
															   ДатаНачалаПериодаОтчета = Неопределено,
										  					   ДатаКонцаПериодаОтчета  = Неопределено) Экспорт
	
	Если ДатаНачалаПериодаОтчета = Неопределено ИЛИ ДатаКонцаПериодаОтчета = Неопределено Тогда
		ИПИспользуетТрудНаемныхРаботников = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация);
	Иначе
		ИПИспользуетТрудНаемныхРаботников = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(Организация, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает имя справочника обособленных подразделений,
// используемого для автоматического заполнения статистической отчетности.
//
// Параметры:
//   ИмяОтчета - Строка - имя регламентированного отчета (например, "РегламентированныйОтчетСтатистикаФорма1ТГМС").
//
// Возвращаемое значение:
//   Строка - имя справочника обособленных подразделений.
//
// Пример реализации:
//   Возврат "ПодразделенияОрганизаций";
//
Функция ИмяСправочникаОбособленныхПодразделений(ИмяОтчета = "") Экспорт
	
	Возврат "ПодразделенияОрганизаций";
	
КонецФункции

// Функция возвращает имя реквизита справочника подразделений, который
// определяет, является ли подразделение обособленным (в трактовке Росстата).
// Используется для автоматического заполнения статистической отчетности.
//
// Параметры:
//   ИмяОтчета - Строка - имя регламентированного отчета (например, "РегламентированныйОтчетСтатистикаФорма1ТГМС").
//
// Возвращаемое значение:
//   Булево - если значение реквизита равно Истина - подразделение является обособленным,
//            иначе значение реквизита равно Ложь - подразделение не является обособленным.
//
// Пример реализации:
//   Возврат "ИмеетНомерТерриториальногоОрганаРосстата";
//
Функция ИмяРеквизитаПризнакаОбособленногоПодразделения(ИмяОтчета = "") Экспорт
	
	Возврат "ОбособленноеПодразделение";
	
КонецФункции

// Функция возвращает значение Раздела 3 Строки 130 Книги учета доходов и расходов.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, по которой построен регл. отчет.
//   ДатаОкончанияПериода - Дата - дата окончания периода отчета (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).
//
// Возвращаемое значение:
//   Число - значение по строке 130 раздела 3 книги учета доходов и расходов.
//
Функция СуммаФактическогоУменьшенияНалоговойБазы(Организация, ДатаОкончанияПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КнигаУчетаДоходовИРасходовОбороты.Графа4Оборот КАК Графа4,
	               |	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Графа5,
	               |	КнигаУчетаДоходовИРасходовОбороты.Графа6Оборот КАК Графа6,
	               |	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Графа7
	               |ИЗ
	               |	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";
				   
	НачалоПериода = НачалоГода(ДатаОкончанияПериода);
	КонецПериода = ДатаОкончанияПериода;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Графа5 = 0;
	Графа7 = 0;
	ВыборкаКУДиР = Запрос.Выполнить().Выбрать();
	Если ВыборкаКУДиР.Следующий() Тогда		
		Графа5 = ВыборкаКУДиР.Графа5;
		Графа7 = ВыборкаКУДиР.Графа7;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ДатаОкончанияПериода);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(РегистрацияСуммыУбыткаУСН.СуммаНеПеренесенныхУбытков) КАК СуммаНеПеренесенныхУбытков,
	               |	РегистрацияСуммыУбыткаУСН.Ссылка
	               |ПОМЕСТИТЬ НеперенесенныеУбытки
	               |ИЗ
	               |	Документ.РегистрацияСуммыУбыткаУСН.Убытки КАК РегистрацияСуммыУбыткаУСН
	               |ГДЕ
	               |	РегистрацияСуммыУбыткаУСН.Ссылка.Организация = &Организация
	               |	И РегистрацияСуммыУбыткаУСН.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ГОД) И КОНЕЦПЕРИОДА(&Период, ГОД)
	               |	И РегистрацияСуммыУбыткаУСН.Ссылка.Проведен
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РегистрацияСуммыУбыткаУСН.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(РегистрацияСуммыУбыткаУСН.УбытокОтУплатыМинимальногоНалога), 0) КАК УбытокОтУплатыМинимальногоНалога,
	               |	ЕСТЬNULL(СУММА(НеперенесенныеУбытки.СуммаНеПеренесенныхУбытков), 0) КАК СуммаНеПеренесенныхУбытков
	               |ИЗ
	               |	НеперенесенныеУбытки КАК НеперенесенныеУбытки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСуммыУбыткаУСН КАК РегистрацияСуммыУбыткаУСН
	               |		ПО НеперенесенныеУбытки.Ссылка = РегистрацияСуммыУбыткаУСН.Ссылка";
	
	СуммаНеПеренесенныхУбытков = 0;
	УбытокОтУплатыМинимальногоНалога = 0;
	ВыборкаУбытки = Запрос.Выполнить().Выбрать();
	Если ВыборкаУбытки.Следующий() Тогда
		СуммаНеПеренесенныхУбытков       = ВыборкаУбытки.СуммаНеПеренесенныхУбытков;
		УбытокОтУплатыМинимальногоНалога = ВыборкаУбытки.УбытокОтУплатыМинимальногоНалога;
	КонецЕсли; 
	
	Раздел1_П010 = Графа5;
	Раздел1_П020 = Графа7;
	
	Раздел1_П030 = УбытокОтУплатыМинимальногоНалога;
	Раздел1_П040 = ?(Раздел1_П010 - Раздел1_П020 - Раздел1_П030 >= 0, Раздел1_П010 - Раздел1_П020 - Раздел1_П030, 0);
	
	П010 = СуммаНеПеренесенныхУбытков;
	
	Возврат Мин(Раздел1_П040, П010);
	
КонецФункции

// Функция возвращает код вида документа физического лица.
//
// Параметры:
//   ВидДокументаФизическогоЛица - СправочникСсылка.ВидыДокументовФизическихЛиц - ссылка на элемент справочника "ВидыДокументовФизическихЛиц".
//
// Возвращаемое значение:
//   Строка (длина - 2) - код вида документа физического лица.
//
// Пример:
//	 Возврат ВидДокументаФизическогоЛица.КодМВД;
//
Функция ПолучитьКодВидаДокументаФизическогоЛица(ВидДокументаФизическогоЛица) Экспорт
	
	КодВидаДокумента = "";
	
	Если ЗначениеЗаполнено(ВидДокументаФизическогоЛица) Тогда
		КодВидаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокументаФизическогоЛица, "КодМВД");
	КонецЕсли;
	
	Возврат КодВидаДокумента;
	
КонецФункции

// Процедура возвращает ссылку на предопределенный элемент из справочника "ВидыКонтактнойИнформации".
//
// Параметры:
//   ВидКИ      - СправочникСсылка.ВидыКонтактнойИнформации - ссылка на предопределенный элемент справочника "ВидыКонтактнойИнформации".
//   НаимВидаКИ - Строка - наименование предопределенного элемента справочника "ВидыКонтактнойИнформации".
//
// Пример:
//   ВидКИ = Справочники.ВидыКонтактнойИнформации[НаимВидаКИ];
//
Процедура ПолучитьВидКонтактнойИнформации(ВидКИ, НаимВидаКИ) Экспорт
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации[НаимВидаКИ];
	
КонецПроцедуры

// Процедура возвращает признак ведения персонифицированного учета во внешней программе.
//
// Параметры:
//  ПризнакПерсУчета - булево - признак ведения персонифицированного учета во внешней программе.
//                     Истина - персонифицированный учет ведется во внешней программе;
//                     Ложь   - персонифицированный учет ведется в конфигурации.
//
Процедура ПолучитьПризнакВеденияПерсонифицированногоУчетаВоВнешнейПрограмме(ПризнакПерсУчета) Экспорт
	
	ПризнакПерсУчета = БухгалтерскийУчетПереопределяемый.УчетЗарплатыИКадровВоВнешнейПрограмме();
	
КонецПроцедуры

// Процедура возвращает признак учета расходов по элементам затрат.
//
// Параметры:
//  НачалоПериода        - Дата - начало периода отчета (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета).
//  КонецПериода         - Дата - окончание периода отчета (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).
//  Организация          - СправочникСсылка - ссылка на элемент справочника "Организации".
//  ПризнакУчетаРасходов - Булево или Неопределено - признак учета расходов по элементам затрат.
//                           Истина       - расходы учитываются по элементам затрат;
//                           Ложь         - расходы не учитываются по элементам затрат;
//                           Неопределено - в конфигурации не реализован функционал учета расходов по элементам затрат.
// Пример:
//  ПризнакУчетаРасходов = ЭлементыЗатратНастройкаПараметровУчета.РасходыУчитываютсяПоЭлементамЗатрат(
//  	НачалоПериода, КонецПериода, Организация);
//
Процедура ПолучитьПризнакУчетаРасходовПоЭлементамЗатрат(НачалоПериода, КонецПериода, Организация, ПризнакУчетаРасходов) Экспорт
	
	Если УчетнаяПолитика.ПоддерживаетсяУчетПоЭлементамЗатрат() Тогда
		ПризнакУчетаРасходов = ЭлементыЗатратНастройкаПараметровУчета.РасходыУчитываютсяПоЭлементамЗатрат(НачалоПериода, КонецПериода, Организация);
	Иначе
		ПризнакУчетаРасходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура возвращает признак плательщика торгового сбора.
//
// Параметры:
//  НачалоПериода        - Дата - начало года, предшествовавшему периоду отчета
//                               (НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, - 12))).
//  КонецПериода         - Дата - окончание периода отчета (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).
//  Организация          - СправочникСсылка - ссылка на элемент справочника "Организации".
//  ПризнакПлательщикаТС - Булево - признак плательщика торгового сбора.
//                           Истина - организация является плательщиком торгового сбора;
//                           Ложь   - организация не является плательщиком торгового сбора.
// Пример:
//  ПризнакПлательщикаТС = УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(Организация, НачалоПериода, КонецПериода);
//
Процедура ПолучитьПризнакПлательщикаТорговогоСбораЗаПериод(Организация, НачалоПериода, КонецПериода, ПризнакПлательщикаТС) Экспорт
	
	ПризнакПлательщикаТС = УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(Организация, НачалоПериода, КонецПериода);
	
КонецПроцедуры

// Процедура возвращает объект налогообложения УСН.
//
// Параметры:
//  НачалоПериода - Дата - начало периода отчета (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета).
//  КонецПериода  - Дата - окончание периода отчета (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).
//  Организация   - СправочникСсылка - ссылка на элемент справочника "Организации".
//  ОбъектНалУСН  - Число или Неопределено - объект налогообложения УСН.
//                    1 - объект налогообложения - доходы;
//                    2 - объект налогообложения - доходы, уменьшенные на величину расходов;
//                    Неопределено - не применялась УСН за период или в конфигурации не реализован
//                                   функционал получения объекта налогообложения УСН за период.
//
Процедура ПолучитьОбъектНалогообложенияУСНЗаПериод(Организация, НачалоПериода, КонецПериода, ОбъектНалУСН) Экспорт
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходыЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		ОбъектНалУСН = 1;
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходыЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		ОбъектНалУСН = 2;
	КонецЕсли;
	
КонецПроцедуры

// Процедура возвращает УИД конфигурации для целей регламентированной отчетности.
//
// Параметры:
// 	УИДКонфигурации - Строка - Уникальный идентификатор конфигурации 
//							   для целей регламентированной отчетности.
//
// Пример:
//  УИДКонфигурации = "e54b72a0-171f-11df-85fa-001b24e002fe";
//
Процедура ПолучитьУИДКонфигурации(УИДКонфигурации) Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	Если МетаданныеИмя = "БухгалтерияПредприятия"
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая"
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая1"
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияУчебная" Тогда
		УИДКонфигурации = "0daf6254-b4b4-42ac-8f62-e0c6ccd5e421";
	ИначеЕсли МетаданныеИмя = "БухгалтерияПредприятияКОРП" Тогда
		УИДКонфигурации = "16cce818-2e61-481d-acc9-0d1b3a8e73ff";
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат проверки актуализации данных учета.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//  Период      - Дата - отчетный период.
//  РезультатПроверки - Структура - возвращаемая структура параметров актуализации.
//
// Пример реализации:
//  АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
//  ПараметрыПроверки = Новый Структура;
//  ПараметрыПроверки.Вставить("Организация", Организация);
//  ПараметрыПроверки.Вставить("Период",      Период);
//  ПараметрыПроверки.Вставить("УИДЗамера",   Новый УникальныйИдентификатор);
//  ПараметрыПроверки.Вставить("АктуализироватьВесьПериод", Истина);
//  Обработки.ЗакрытиеМесяца.ПроверитьАктуальностьВФоне(ПараметрыПроверки, АдресХранилища);
//  РезультатПроверки = ПолучитьИзВременногоХранилища(АдресХранилища);
//
Процедура ПолучитьРезультатПроверкиАктуализацииДанныхУчета(Организация, Период, РезультатПроверки) Экспорт
КонецПроцедуры

// Возвращает массив ссылок на элементы справочника "РегистрацииВНалоговомОргане".
//
// Параметры:
//   Организация            - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   ДатаКонцаПериодаОтчета - Дата - дата конца периода отчета.
//   НалоговыеОрганы        - Массив - ссылки на элементы справочника "РегистрацииВНалоговомОргане".
//   НаименованиеРеглОтчета - Строка - наименование регламентированного отчета.
//
// Пример реализации:
//   Если НаименованиеРеглОтчета = "РегламентированныйОтчетПрибыль" Тогда
//		...
//	 ИначеЕсли НаименованиеРеглОтчета = "РегламентированныйОтчет6НДФЛ" Тогда	
//	 	...
//	 КонецЕсли;	
//
Процедура ПолучитьНалоговыеОрганы(Организация, ДатаКонцаПериодаОтчета, НалоговыеОрганы, НаименованиеРеглОтчета = "") Экспорт
	
	Если НаименованиеРеглОтчета = "РегламентированныйОтчет6НДФЛ"
		или НаименованиеРеглОтчета = "РегламентированныйОтчет6_НДФЛ" Тогда
		ЗарплатаКадры.ПолучитьНалоговыеОрганы(Организация, ДатаКонцаПериодаОтчета, НалоговыеОрганы);
	ИначеЕсли НаименованиеРеглОтчета = "РегламентированныйОтчетПрибыль" Тогда
		НалоговыйУчетОбособленныхПодразделений.НалоговыеОрганыПолучателиДекларацийПоПрибыли(Организация, ДатаКонцаПериодаОтчета, НалоговыеОрганы);
	КонецЕсли;	
	
КонецПроцедуры

// Устанавливает флаг того, что конфигурация дает возможность интерактивно задать подписантов непосредственно
// из формы отчетности.
//
// Параметры:
//   ПризнакИспользования - Булево - флаг, который необходимо установить, если конфигурация будет давать
//									 возможность настроить подписанта прямо из формы отчетности.
//
// Пример реализации:
//   ПризнакИспользования = Истина;
//
Процедура ИспользоватьКонтекстнуюНастройкуПодписантовСтатистики(ПризнакИспользования) Экспорт
КонецПроцедуры

#Область НоваяФормаРегламентированнойОтчетности

// Процедура переопределяет обработчик подписки на событие "ЗаписьОбъектовРегламентированнойОтчетности*"
//
// Параметры:
//	Ссылка - СправочникСсылка, ДокументСсылка - Ссылка на объект - источник события
//	Отказ  - Булево - Управляет значением параметра "Отказ" вызывающего обработчика подписки на событие
//	СтандартнаяОбработка - Булево - Если СтандартнаяОбработка = Истина, то будут выполнены действия вызывающего обработчика подписки на событие
//
// Пример реализации:
//
//  	// БПКОРП с ФО "Расширенный функционал".
//  	Если НЕ ПолучитьФункциональнуюОпцию("РасширенныйФункционал") Тогда
//  		ОтчетыВходяшиеВРасширенныйФункционал = Новый СписокЗначений;
//  		ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(ОтчетыВходяшиеВРасширенныйФункционал);
//  		
//  		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
//  			Если ОтчетыВходяшиеВРасширенныйФункционал.НайтиПоЗначению(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ИсточникОтчета")) <> Неопределено Тогда
//  				Сообщение = Новый СообщениеПользователю;
//  				Сообщение.Текст = НСтр("ru='Сохранение отчета в текущем используемом тарифе программы недоступно.'");
//  				Сообщение.Сообщить();
//  				
//  				Отказ = Истина;
//  				СтандартнаяОбработка = Ложь;
//  			КонецЕсли;
//  		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
//  			Если ОтчетыВходяшиеВРасширенныйФункционал.НайтиПоЗначению(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидУведомления")) <> Неопределено Тогда
//  				Сообщение = Новый СообщениеПользователю;
//  				Сообщение.Текст = НСтр("ru='Сохранение уведомления в текущем используемом тарифе программы недоступно.'");
//  				Сообщение.Сообщить();
//  				
//  				Отказ = Истина;
//  				СтандартнаяОбработка = Ложь;
//  			КонецЕсли;
//  		КонецЕсли;
//  	КонецЕсли;
//
Процедура ЗаписьОбъектовРегламентированнойОтчетности(Ссылка, Отказ, СтандартнаяОбработка) Экспорт
	
	ЗарплатаКадры.ЗаписьОбъектовРегламентированнойОтчетности(Ссылка, Отказ, СтандартнаяОбработка);
	
	РегистрыСведений.ДокументыИнтеграцииСБанком.ПриЗаписиРегламентированногоОтчета(Ссылка);
	
	// БПКОРП с ФО "Расширенный функционал".
	Если НЕ ПолучитьФункциональнуюОпцию("РасширенныйФункционал") Тогда
		ОтчетыВходяшиеВРасширенныйФункционал = Новый СписокЗначений;
		ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(ОтчетыВходяшиеВРасширенныйФункционал);
		
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			Если ОтчетыВходяшиеВРасширенныйФункционал.НайтиПоЗначению(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ИсточникОтчета")) <> Неопределено Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Сохранение отчета недоступно. Чтобы отредактировать отчет, включите флаг ""Расширенный функционал"" (Главное - Функциональность - Дополнительно)'");
				Сообщение.Сообщить();
				
				Отказ = Истина;
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
			Если ОтчетыВходяшиеВРасширенныйФункционал.НайтиПоЗначению(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидУведомления")) <> Неопределено Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Сохранение уведомления недоступно. Чтобы отредактировать уведомление, включите флаг ""Расширенный функционал"" (Главное - Функциональность - Дополнительно)'");
				Сообщение.Сообщить();
				
				Отказ = Истина;
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Для декларации по НДС проверим установлена ли пометка удаления или модифицирован ли отчет, если да,
	// то снимем актуальность в регистре "Выполненные операции НДС" по декларации для целей помощника расчета НДС, если нет
	// то установим актуальность.
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ИсточникОтчета") = "РегламентированныйОтчетНДС" Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ДанныеОтчета, ПометкаУдаления, Дата, Организация");
		Если РеквизитыОбъекта.ПометкаУдаления
			ИЛИ УчетНДСПереопределяемый.ДекларацияПоНДСМодифицирована(РеквизитыОбъекта.ДанныеОтчета.Получить()) Тогда
			РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СброситьФактВыполненияРегламентнойОперации(
				РеквизитыОбъекта.Организация, РеквизитыОбъекта.Дата, Перечисления.РегламентныеОперации.ФормированиеДекларации);
		ИначеЕсли УчетНДСПереопределяемый.ДекларацияПоНДСАвтозаполнена(РеквизитыОбъекта.ДанныеОтчета.Получить()) Тогда
			РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(
					НачалоКвартала(РеквизитыОбъекта.Дата),
					РеквизитыОбъекта.Организация, Неопределено, Перечисления.РегламентныеОперации.ФормированиеДекларации, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - Таблица, содержащая в себе описания ссылок, переданных в закладке Ссылка таблицы
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- ДатаСоздания - Дата - Дата создания объекта
//			- Наименование - Строка - Наименование объекта, с которым он будет отображаться в форме Отчетность
//			- КодКонтролирующегоОргана - Строка - Код контролирующего органа, в который отправляется отчетности по ТКС
//			- ДатаНачала - Дата - Дата начала периода. Пустая, если дата начала периода отсуствует
//			- ДатаОкончания - Дата - Дата окончания периода. Пустая, если дата окончания периода отсуствует 
//			- ВариантОтчета - Строка, Число - Если первичный, то указываем "П", если нет признака первичный/корректирующий - "-",
//				иначе - "К/" + <номер корректировки>; вариант отчета в числовом коде: 0 - первичный, число больше нуля - корректирующий
//			- ПометкаУдаления - Булево - Истина, если объект помечен на удаление 
//			- Организация - СправочникСсылка.Организации - Организация, которой принадлежит объект
//			- Комментарий - Строка - Комментарий из объекта
//
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	УчетОбособленныхПодразделений.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов);
	
	ЗарплатаКадры.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов);
	
	УчетНДС.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов);
	
КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности содания новый объектов из формы Отчетность
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений - Таблица, содержащая в себе описания объектов конфигураций-потребителей
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- Наименование - Строка - Наименование вида отчета, как оно должно отображаться в форме создания отчета
//			- ТипОбъекта - Тип - Тип описываемого объекта
//			- ВидКонтролирующегоОргана - Перечисления.ТипыКонтролирующихОрганов - контролирующий орган, в который сдается отчетности
//			- ГруппаВДереве - Строка - Определяет имя группы, в которой будет отображаться объект в случае иерархическкого отображения списка объектов
//			- ВидДокумента - Перечисления.СтраницыЖурналаОтчетность - Определяет страницу формы Отчетность, на которой будет отображаться объект
//				Может принимать одно из следующих значений:
//						Перечисления.СтраницыЖурналаОтчетность.Уведомления
//						Перечисления.СтраницыЖурналаОтчетность.Отчеты
//			- НеОтправляетсяВКонтролирующийОрган - Булево - Истина, если объект не отправляется в контролирующий орган по ТКС
//			- ЯвляетсяАктуальным - Булево - Определяет, можно ли создавать новые объекты данного вида
//			- ИмяОсновногоМакетаДляПечати - Строка - имя макета, который будет использоваться для печати по умолчанию
//			- ВидЭлектронногоПредставления - СправочникСсылка.ВидыОтправляемыхДокументов - вид электронного представления (справочник 
// ЭлектронныеПредставленияРегламентированныхОтчетов), соответствующий данному типу объекта. Неопределено, если такого вида отправляемого документа не существует
//
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	Если СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		СервисЭлектронныхТрудовыхКнижек.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
		Возврат;
	КонецЕсли;
	
	УчетОбособленныхПодразделений.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
	
	Если ПолучитьФункциональнуюОпцию("ВедетсяУчетЗарплатыКадров") Тогда
		ЗарплатаКадры.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
	КонецЕсли;
	
	УчетНДС.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
	
КонецПроцедуры

// Дополняет дерево регламентированных отчетов для использования в форме выбора видов отчетов,
// которая вызывается из формы "Отчетность" при нажатии на кнопку "Создать" на вкладке "Отчеты"
//
// Параметры:
//  ДеревоОтчетов - ДеревоЗначений - Дерево содержит описания видов отчетов, дополняемые из конфигураций-потребителей
//		Деревоз значений содержит следующие колонки:
//			- Наименование - Строка - Наименование вида отчета, как оно должно отображаться в форме
//			- ПолноеИмя - Строка - Полное имя (как в метаданных) документа или справочник для хранения данных отчета,
//				например: "Документ.РегламентированныйОтчет" или "Документ.УниверсальныйРегламентированныйОтчет" (для БГУ)
//			- Ссылка - СправочникСсылка - Ссылка на элемент справочника, содержащий описание вида отчета (если существует),
//				например, ссылка на элемент справочника "ВидыОтчетов" в БГУ
//			- ТипПолучателя - Перечисления.ТипыКонтролирующихОрганов - контролирующий орган, в который сдается отчетность
//			- Категория - Строка - Наименование категории отчета или название группы, в которую входит отчет (для группировки в форме)
//			- ЭтоГруппа - Булево - Если элемент дерева должен отображаться в форме как группа
//
Процедура ДобавитьВДеревоРегламентированныхОтчетовДругиеОтчеты(ДеревоОтчетов) Экспорт
	
КонецПроцедуры

// Процедура переопределяет параметры отчета
//
// Параметры:
//  Отчет                      - Структура("Наименование,ПолноеИмя,Ссылка").
//  ОрганизацияОтчета          - Ссылка или Неопределено, организация отчета.
//  ДатаНачалаПериодаОтчета    - Дата или Неопределено, дата начала периода отчета.
//  ДатаОкончанияПериодаОтчета - Дата или Неопределено, дата окончания периода отчета.
//  ПараметрыОткрытия          - Структура, переопределяемые параметры открытия формы отчета.
//
Процедура ПереопределитьПараметрыОтчета(Отчет, ОрганизацияОтчета, ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета, ПараметрыОткрытия) Экспорт
	
КонецПроцедуры

// Дополняет функционал обработчика "ПриСозданииНаСервере" общей формы "Регламентированная отчетность",
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, общая форма "Регламентированная отчетность".
//
// Пример:
//  ГруппаКоманды = Форма.Элементы["ОтчетыГруппа3"];
//  
//  ИмяКоманды = "ОтчетыПоказатьДополнительнуюИнформацию";
//  Команда = Форма.Команды.Добавить(ИмяКоманды);
//  Команда.Подсказка = НСтр("ru = 'Показать дополнительную информацию'");
//  Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
//  Команда.Картинка = БиблиотекаКартинок.Лупа;
//  Команда.Действие = "Подключаемый_ВыполнитьНазначаемуюКоманду";
//  
//  Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаКоманды);
//  Кнопка.Заголовок = НСтр("ru = 'Инфо'");
//  Команда.ИзменяетСохраняемыеДанные = Ложь;
//  Кнопка.ИмяКоманды = ИмяКоманды;
//
Процедура ФормаРегламентированнойОтчетности_ПриСозданииНаСервере(Форма) Экспорт
	
	СверкаСФНС.ФормаНовыхСобытий_ПриСозданииНаСервере(Форма);
	СервисЭлектронныхТрудовыхКнижек.ФормаРегламентированнойОтчетности_ПриСозданииНаСервере(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область РасширенныйФункционал

// Дополняет функционал обработчика "ПриСозданииНаСервере" формы списка справочника "Регламентированные отчеты",
// здесь можно инициализировать переменные, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка справочника "Регламентированные отчеты".
//
// Пример реализации:
//
//  ОтчетыВходяшиеВРасширенныйФункционал = Новый СписокЗначений;
//  ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(ОтчетыВходяшиеВРасширенныйФункционал);
//  
//  Для Каждого ЭлементСписка Из ОтчетыВходяшиеВРасширенныйФункционал Цикл
//  	Если ТипЗнч(ЭлементСписка.Значение) = Тип("Строка") Тогда
//  		
//  		Форма.Ограничения.Добавить(ЭлементСписка.Представление);
//  		
//  	КонецЕсли;
//  КонецЦикла;
//
Процедура СправочникРегламентированныеОтчеты_ПриСозданииНаСервере(Форма) Экспорт
	
	ОтчетыВходяшиеВРасширенныйФункционал = Новый СписокЗначений;
	ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(ОтчетыВходяшиеВРасширенныйФункционал);
	
	Для Каждого ЭлементСписка Из ОтчетыВходяшиеВРасширенныйФункционал Цикл
		Если ТипЗнч(ЭлементСписка.Значение) = Тип("Строка") Тогда
			
			Форма.Ограничения.Добавить(ЭлементСписка.Представление);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура удаляет из исходного дерева отчеты, которые отключатся функциональной опцией "Расширенный функционал".
//
// Параметры:
//  ДеревоОтчетов - Дерево значений - Содержит исходное дерево используемых в конфигурации регламентированных отчетов.
//
// Пример реализации:
//  РасширенныйФункционалФО = ПолучитьФункциональнуюОпцию("РасширенныйФункционал");
//
//  Если НЕ РасширенныйФункционалФО Тогда // удаляем отчеты входящие в расширенный функционал
//  	
//  	ОтчетыВходяшиеВРасширенныйФункционал = Новый СписокЗначений;
//  	ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(ОтчетыВходяшиеВРасширенныйФункционал);
//  	
//  	Для Каждого ЭлементСписка Из ОтчетыВходяшиеВРасширенныйФункционал Цикл
//  		Если СтрНачинаетсяС(ЭлементСписка.Значение, "РегламентированныйОтчет") Тогда
//  			
//  			НаименованиеОтчета = ЭлементСписка.Представление;
//  			
//  			УдаляемыеОтчеты = ДеревоОтчетов.Строки.НайтиСтроки(
//  				Новый Структура("Наименование,ЭтоГруппа", НаименованиеОтчета, Ложь), Истина);
//  				
//  			Для Каждого ЭлементОтчет Из УдаляемыеОтчеты Цикл
//  				РодительЭлемента = ЭлементОтчет.Родитель;
//  				Если РодительЭлемента = Неопределено Тогда
//  					РодительЭлемента = ЭлементОтчет.Владелец();
//  				КонецЕсли;
//  				
//  				КоличествоЭлементовВДеревеОтчетов = КоличествоЭлементовВДеревеОтчетов - 1;
//  				
//  				РодительЭлемента.Строки.Удалить(ЭлементОтчет);
//  			КонецЦикла;
//  			
//  		КонецЕсли;
//  	КонецЦикла;
//  	
//  	ВсеГруппыОтчетов = ДеревоОтчетов.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина), Истина);
//  	
//  	КоличествоГрупп = ВсеГруппыОтчетов.Количество();
//  	Для НомГруппы = 1 По КоличествоГрупп Цикл // просматриваем группы в обратном порядке
//  		
//  		ГруппаОтчетов = ВсеГруппыОтчетов[КоличествоГрупп - НомГруппы];
//  		Если ГруппаОтчетов.Строки.Количество() = 0 Тогда
//  			РодительГруппы = ГруппаОтчетов.Родитель;
//  			Если РодительГруппы = Неопределено Тогда
//  				РодительГруппы = ГруппаОтчетов.Владелец();
//  			КонецЕсли;
//  			
//  			РодительГруппы.Строки.Удалить(ГруппаОтчетов);
//  		КонецЕсли;
//  		
//  	КонецЦикла;
//  	
//  КонецЕсли;
//
Процедура УдалитьОтчетыВходяшиеВРасширенныйФункционал(ДеревоОтчетов, КоличествоЭлементовВДеревеОтчетов) Экспорт
	
	РасширенныйФункционалФО = ПолучитьФункциональнуюОпцию("РасширенныйФункционал");
	
	Если НЕ РасширенныйФункционалФО Тогда // удаляем отчеты входящие в расширенный функционал
		
		ОтчетыВходяшиеВРасширенныйФункционал = Новый СписокЗначений;
		ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(ОтчетыВходяшиеВРасширенныйФункционал);
		
		Для Каждого ЭлементСписка Из ОтчетыВходяшиеВРасширенныйФункционал Цикл
			Если СтрНачинаетсяС(ЭлементСписка.Значение, "РегламентированныйОтчет") Тогда
				
				НаименованиеОтчета = ЭлементСписка.Представление;
				
				УдаляемыеОтчеты = ДеревоОтчетов.Строки.НайтиСтроки(
					Новый Структура("Наименование,ЭтоГруппа", НаименованиеОтчета, Ложь), Истина);
					
				Для Каждого ЭлементОтчет Из УдаляемыеОтчеты Цикл
					РодительЭлемента = ЭлементОтчет.Родитель;
					Если РодительЭлемента = Неопределено Тогда
						РодительЭлемента = ЭлементОтчет.Владелец();
					КонецЕсли;
					
					КоличествоЭлементовВДеревеОтчетов = КоличествоЭлементовВДеревеОтчетов - 1;
					
					РодительЭлемента.Строки.Удалить(ЭлементОтчет);
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		ВсеГруппыОтчетов = ДеревоОтчетов.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина), Истина);
		
		КоличествоГрупп = ВсеГруппыОтчетов.Количество();
		Для НомГруппы = 1 По КоличествоГрупп Цикл // просматриваем группы в обратном порядке
			
			ГруппаОтчетов = ВсеГруппыОтчетов[КоличествоГрупп - НомГруппы];
			Если ГруппаОтчетов.Строки.Количество() = 0 Тогда
				РодительГруппы = ГруппаОтчетов.Родитель;
				Если РодительГруппы = Неопределено Тогда
					РодительГруппы = ГруппаОтчетов.Владелец();
				КонецЕсли;
				
				РодительГруппы.Строки.Удалить(ГруппаОтчетов);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура возвращает в параметре список регламентированных отчетов и регламентированных уведомлений, входящих в расширенный функционал,
// который определяется функциональной опцией "Расширенный функционал".
//
// Параметры:
//  СписокОтчетовИУведомлений - СписокЗначений - Список регламентированных отчетов и регламентированных уведомлений:
//   Значение      - источник регламентированного отчета или вид уведомления,
//   Представление - синоним основной формы регламентированного отчета или синоним объекта метаданных регламентированного уведомления.
//
// Пример реализации:
//  Если ТипЗнч(СписокОтчетовИУведомлений) <> Тип("СписокЗначений") Тогда
//  	СписокОтчетовИУведомлений = Новый СписокЗначений;
//  КонецЕсли;
//  
//  Если ПолучитьФункциональнуюОпцию("РасширенныйФункционал") Тогда
//  	Возврат; // возвращаем пустой список при включенной ФО
//  КонецЕсли;
//  	
//  СписокОтчетовИУведомлений.Добавить("РегламентированныйОтчетОперацииСДенежнымиСредствамиНФО",
//  	"Информация об операциях с денежными средствами НФО");
//  
//  СписокОтчетовИУведомлений.Добавить(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК,
//  	"Уведомление о контролируемых иностранных компаниях");
//
Процедура ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(СписокОтчетовИУведомлений) Экспорт
	
	Если ТипЗнч(СписокОтчетовИУведомлений) <> Тип("СписокЗначений") Тогда
		СписокОтчетовИУведомлений = Новый СписокЗначений;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("РасширенныйФункционал") Тогда
		Возврат; // возвращаем пустой список при включенной ФО
	КонецЕсли;
	
	// Отчетность некредитных финансовых организаций.
	СписокОтчетовИУведомлений.Добавить("РегламентированныйОтчетОперацииСДенежнымиСредствамиНФО",
		"Информация об операциях с денежными средствами НФО");
	
	// Участие в иностранных организациях.
	СписокОтчетовИУведомлений.Добавить(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК,
		"Уведомление о контролируемых иностранных компаниях");
	
КонецПроцедуры

#КонецОбласти

#Область ФильтрацияОрганизацийВСтартовойФормеРегламентированногоОтчета

// Процедура возвращает текст запроса для получения организаций - юридических лиц.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса для получения организаций, являющихся юридическими лицами.
//
// Пример:
//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	Организации.Ссылка,
//				   |	Организации.Наименование
//				   |ИЗ
//				   |	Справочник.Организации КАК Организации
//				   |ГДЕ
//				   |	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
//				   |	И НЕ Организации.ПометкаУдаления
//				   |
//				   |УПОРЯДОЧИТЬ ПО
//				   |	Наименование";
//
Процедура СформироватьТекстЗапросаДляПолученияДоступныхЮридическихЛиц(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	Ссылка";
	
КонецПроцедуры

// Процедура возвращает текст запроса для получения организаций - индивидуальных предпринимателей.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса для получения организаций, являющихся индивидуальными предпринимателями.
//
// Пример:
//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	Организации.Ссылка,
//				   |	Организации.Наименование
//				   |ИЗ
//				   |	Справочник.Организации КАК Организации
//				   |ГДЕ
//				   |	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
//				   |	И НЕ Организации.ПометкаУдаления
//				   |
//				   |УПОРЯДОЧИТЬ ПО
//				   |	Наименование";
//
Процедура СформироватьТекстЗапросаДляПолученияДоступныхИндивидуальныхПредпринимателей(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	Ссылка";
	
КонецПроцедуры

// Процедура возвращает текст запроса для получения организаций -
// юридических лиц и индивидуальных предпринимателей.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса для получения организаций -
//                          юридических лиц и индивидуальных предпринимателей.
//
// Пример:
//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	Организации.Ссылка,
//				   |	Организации.Наименование
//				   |ИЗ
//				   |	Справочник.Организации КАК Организации
//				   |ГДЕ
//				   |	НЕ Организации.ПометкаУдаления
//				   |
//				   |УПОРЯДОЧИТЬ ПО
//				   |	Наименование";
//
Процедура СформироватьТекстЗапросаДляПолученияДоступныхОрганизаций(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование";
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеПредставленияУведомления

// Процедура используется для переопределения представления документа УведомлениеОСпецрежимахНалогообложения.
// В случае, если такое переопределение произошло, необходимо установить флаг СтандартнаяОбработка в Ложь.
// Параметры аналогичны событию ОбработкаПолученияПолейПредставления в модуле менеджера документа УведомлениеОСпецрежимахНалогообложения.
//
// Параметры:
//   Поля - Массив - содержит имена полей, которые нужны для формирования представления объекта или ссылки.
//   СтандартнаяОбработка - Булево - в данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаПолученияПолейПредставления_УведомлениеОСпецрежимахНалогообложения(Поля, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Процедура используется для переопределения представления документа УведомлениеОСпецрежимахНалогообложения.
// В случае, если такое переопределение произошло, необходимо установить флаг СтандартнаяОбработка в Ложь.
// Параметры аналогичны событию ОбработкаПолученияПредставления в модуле менеджера документа УведомлениеОСпецрежимахНалогообложения.
//
// Параметры:
//   Данные - Структура - содержит значения полей, из которых формируется представление.
//   Представление - Строка - строка, в которую нужно поместить представление объекта или ссылки.
//   СтандартнаяОбработка - Булево - в данный параметр передается признак формирования стандартного представления объекта или ссылки.
//
Процедура ОбработкаПолученияПредставления_УведомлениеОСпецрежимахНалогообложения(Данные, Представление, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросВФНСНаПроверкуСведенийРаботников

// Процедура формирует сведения, необходимые для представления в налоговую инспекцию
// запроса работодателя на проверку ИНН, ФИО, СНИЛС работающих лиц в электронной форме.
//
// Параметры:
//  СтруктураПараметров - Структура - свойства:
//     * Организация - СправочникСсылка.Организации - организация, по работникам
//                     которой будут формироваться сведения для файла;
//     * ДатаПодписи - Дата - дата, на которую будут формироваться сведения для файла.
//     * ИНН - Строка - возвращается ИНН организации;
//     * КПП - Строка - возвращается КПП организации (пустая строка в случае ИП);
//     * КодНалоговогоОргана - Строка - возвращается четырехзначный код налогового органа;
//     * РазмерПачки - Число - допустимое количество физических лиц в одном файле
//                     (необязательный параметр, по умолчанию допустимое количество равно 200;
//                     в случае превышения, будет записано необходимое количество файлов);
//     * СведенияОРаботниках - ТаблицаЗначений - возвращается таблица с колонками:
//        ** Фамилия - Строка - фамилия физического лица;
//        ** Имя - Строка - имя физического лица;
//        ** Отчество - Строка - отчество физического лица;
//        ** ИНН - Строка - ИНН физического лица;
//        ** СтраховойНомерПФР - Строка - СНИЛС физического лица;
//        ** ДатаРождения - Дата - дата рождения физического лица;
//        ** ВидДокумента - Строка - двузначный код вида документа, удостоверяющего личность физического лица;
//        ** СерияДокумента - Строка - серия документа, удостоверяющего личность физического лица;
//        ** НомерДокумента - Строка - номер документа, удостоверяющего личность физического лица.
//
Процедура ПолучитьДанныеДляЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров) Экспорт
	ПерсонифицированныйУчет.ПолучитьДанныеДляЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров);
КонецПроцедуры

#КонецОбласти

#Область Используется1СОтчетность

// Процедура возвращает признак использования отправки регламентированной отчетности.
//
// Параметры:
//  ПризнакИспользования - Булево - признак использования отправки регламентированной отчетности.
//                         Истина - отправка регл. отчетности выполняется в стандартном режиме
//                                  (при подключенном сервисе "1С-Отчетность");
//                         Ложь   - отправка регл. отчетности выполняется через DataTransfer БТС.
// Пример реализации:
//
//  ПризнакИспользования = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
//
//
Процедура ПолучитьПризнакИспользования1СОтчетности(ПризнакИспользования) Экспорт
	
	ПризнакИспользования = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
	
КонецПроцедуры

// Процедура возвращает признак отправки объекта РО без использования "1С-Отчетность", состояние (если отправлялся).
//
// Параметры:
//  ОбъектРеглОтчетности - Документ  - Документ регламентированного отчета.
//  ОбъектОтправлялся    - Булево    - признак использования отправки объекта регламентированной отчетности.
//                         Истина    - отправка РО выполнялась без использования "1С-Отчетность" (через DataTransfer БТС);
//                         Ложь      - отправка РО не выполнялась или выполнялась в стандартном режиме.
//  Состояние - Строка, Неопределено - Содержит имя значения перечисления состояния отправленного объекта РО.
// 
//  Пример реализации:
//
//  	ОбъектОтправлялся = Ложь;
//  	
//  	Запрос = Новый Запрос();
//  	Запрос.Параметры.Вставить("Документ", ОбъектРеглОтчетности);
//  	
//  	Запрос.Текст = "ВЫБРАТЬ
//  	|	ДокументыИнтеграцииСБанком.Состояние КАК Состояние
//  	|ИЗ
//  	|	РегистрСведений.ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
//  	|ГДЕ
//  	|	ДокументыИнтеграцииСБанком.Документ = &Документ";
//  	
//  	Выборка = Запрос.Выполнить().Выбрать();
//  	Если Выборка.Следующий() Тогда
//  		
//  		ОбъектОтправлялся = Истина;
//  		
//  		Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
//  			Состояние = ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.Состояние);
//  		Иначе
//  			Состояние = "";
//  		КонецЕсли;
//  		
//  	КонецЕсли;
//
Процедура ПолучитьПризнакОбъектРеглОтчетностиОтправлялсяБезИспользования1СОтчетности(ОбъектРеглОтчетности, ОбъектОтправлялся, Состояние) Экспорт
	
	ОбъектОтправлялся = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Документ", ОбъектРеглОтчетности);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументыИнтеграцииСБанком.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
	|ГДЕ
	|	ДокументыИнтеграцииСБанком.Документ = &Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ОбъектОтправлялся = Истина;
		
		Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
			Состояние = ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.Состояние);
		Иначе
			Состояние = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура возвращает результат выполнения фонового задания для получения данных баннера состояния интеграции с банком.
//
//  Пример реализации:
//
//  	ПараметрыПроцедуры = Новый Структура;
//  	
//  	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
//  	ПараметрыВыполнения.ОжидатьЗавершение = 0;
//  	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка состояния интеграции с банками.'");
//  	
//  	Результат = ДлительныеОперации.ВыполнитьВФоне(
//  		"РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомВФоне",
//  		ПараметрыПроцедуры,
//  		ПараметрыВыполнения);
//
Процедура ПолучитьСостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор, Результат) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка состояния интеграции с банками.'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецПроцедуры

// Показывает баннер по предварительно полученным данным баннера.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - Форма "1С-Отчетность".
//                     Форма должна иметь группу ГруппаБаннерСостоянияОтправки с 2 элементами: БаннерСостоянияОтправкиТекст и ДекорацияБаннерСостоянияОтправкиКартинка.
//                     Также форма должна иметь реквизиты формы ИнтервалПроверкиСостоянияИнтеграцииСБанком (Число) и ХешДанныхБаннера (Число).
//  ДанныеБаннера    - Структура - Структура с данными баннера.
//                     См. РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомДляПомощников.
//  Пример реализации:
//
//  	ИнтеграцияСБанкамиФормы.ПоказатьБаннерСостоянияОтправки(Форма, ДанныеБаннера);
//
Процедура ПоказатьБаннерСостоянияОтправки(Форма, ДанныеБаннера) Экспорт
	
	ИнтеграцияСБанкамиФормы.ПоказатьБаннерСостоянияОтправки(Форма, ДанныеБаннера);
	
КонецПроцедуры

// Процедура возвращает данные интеграции для баннера в регламентированных отчетах.
//
// Параметры:
//  СсылкаНаОтчет - ДокументСсылка.РегламентированныйОтчет - Ссылка на регламентированный отчет.
//  ДанныеБаннера - Структура - Текст баннера, картинка и т.д.
//                  См. РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомДляПомощников.
//  Пример реализации:
//
//  	СостоянияИнтеграцииДокументов = РегистрыСведений.ДокументыИнтеграцииСБанком.СостоянияИнтеграцииДокументов(
//  		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаОтчет));
//  		
//  	Если СостоянияИнтеграцииДокументов <> Неопределено 
//  		И ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
//  		
//  		ДанныеБаннера = РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомДляПомощников(
//  			СостоянияИнтеграцииДокументов);
//  	КонецЕсли;
//
Процедура ПолучитьДанныеБаннераИнтеграцииСБанком(СсылкаНаОтчет, ДанныеБаннера) Экспорт
	
	СостоянияИнтеграцииДокументов = РегистрыСведений.ДокументыИнтеграцииСБанком.СостоянияИнтеграцииДокументов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаОтчет));
		
	Если СостоянияИнтеграцииДокументов <> Неопределено 
		И ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
		
		ДанныеБаннера = РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомДляПомощников(
			СостоянияИнтеграцииДокументов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФильтрацияИзбранного

// Заполняется таблица избранного по правилам, определяемым в самом потребителе.
//
// Параметры:
// ПараметрыОтбора - структура, содержащая значения:
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника Организации.
//   РанееСозданныеОтчеты - пустая таблица избранного с колонками:
//     * Наименование - Строка - наименование отчета.
//     * ПолноеИмя    - Строка - имя объекта отчета.
//     * Ссылка       - ДокументСсылка.РегламентированныйОтчет или иной документ, который приравнен к отчетам.
//     * ЭтоГруппа    - Булево.
//
Процедура ЗаполнитьИзбранноеДоступнымиОтчетами(ПараметрыОтбора) Экспорт
	
	РегистрыСведений.ИзбранныеРегламентированныеОтчеты.ЗаполнитьТаблицуДоступныхОтчетов(ПараметрыОтбора);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет таблицу действующими льготами по кадастровым номерам замельных участков.
// Параметры:
//   ТаблицаЗемельныхУчастков - пустая таблица земельных участков с колонками:
//     * КадастровыйНомер - Строка - кадастровый номер земельного участка.
//     * ПроцентУменьшенияСуммыНалога - Число - значение льготы в виде уменьшения суммы налога.
//     * СниженнаяНалоговаяСтавка - Число - значение льготы в виде понижения налоговой ставки.
//   ОрганизацияВладелец - СправочникСсылка.Организации - ссылка на элемент справочника Организации.
//   ДатаСреза - Дата - дата, на момент которой определяются льготы.
//
// Пример:
//
//  Запрос = Новый Запрос;
//  Запрос.Текст = "ВЫБРАТЬ
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.КадастровыйНомер КАК КадастровыйНомер,
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.ПроцентУменьшенияСуммыНалога КАК ПроцентУменьшенияСуммыНалога,
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.СниженнаяНалоговаяСтавка КАК СниженнаяНалоговаяСтавка
//                 |ИЗ
//                 |	РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК РегистрацияЗемельныхУчастковСрезПоследних";
//  Запрос.УстановитьПараметр("Организация", ОрганизацияВладелец);
//  Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
//
//  ТаблицаЗемельныхУчастков = Запрос.Выполнить().Выгрузить();
//  ТаблицаЗемельныхУчастков.Индексы.Добавить("КадастровыйНомер");
//
// Пример:
//
//  Запрос = Новый Запрос;
//  Запрос.Текст = "ВЫБРАТЬ
//                 |	СведенияКадастровогоУчетаСрезПоследних.КадастровыйНомер КАК КадастровыйНомер,
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.ПроцентУменьшенияСуммыНалога КАК ПроцентУменьшенияСуммыНалога,
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.СниженнаяНалоговаяСтавка КАК СниженнаяНалоговаяСтавка
//                 |ИЗ
//                 |	РегистрСведений.СведенияКадастровогоУчета.СрезПоследних(&ДатаСреза, Учреждение = &Организация) КАК СведенияКадастровогоУчетаСрезПоследних
//                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК РегистрацияЗемельныхУчастковСрезПоследних
//                 |		ПО СведенияКадастровогоУчетаСрезПоследних.ОсновноеСредство = РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство
//                 |			И СведенияКадастровогоУчетаСрезПоследних.Учреждение = РегистрацияЗемельныхУчастковСрезПоследних.Организация";
//  Запрос.УстановитьПараметр("Организация", ОрганизацияВладелец);
//  Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
//
//  ТаблицаЗемельныхУчастков = Запрос.Выполнить().Выгрузить();
//  ТаблицаЗемельныхУчастков.Индексы.Добавить("КадастровыйНомер");
//
Процедура ПолучитьЛьготыПоКадастровымНомерам(ТаблицаЗемельныхУчастков, ОрганизацияВладелец, ДатаСреза) Экспорт
	              	
КонецПроцедуры

// Заполняет контейнер данными бухгалтерской отчетности и помещает его во временное хранилище.
Процедура ПолучитьПоказателиАвтозаполненияБухгалтерскойОтчетности(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв4(ПараметрыОтчета, Контейнер);
	
КонецПроцедуры

// Процедура возращает код тарифа или размер тарифа страховых взносов в процентах по коду категории и отчетному году.
//
// Параметры:
//  КодКатегории - Строка - код из приложения № 8 Приказ ФНС России от 10.10.2016 N ММВ-7-11/551@
//                          "Об утверждении формы расчета по страховым взносам, порядка его заполнения,
//                          а также формата представления расчета по страховым взносам в электронной форме".
//  ОтчетныйГод - Число - четырехзначное число, соответствующее отчетному году.
//  КодИлиРазмерТарифа  - Строка, Число, Неопределено - код тарифа("Строка"), размер тарифа ("Число"),
//                                      "Неопределено" - в случае, если соответствие коду категории не найдено.
//  ВернутьРазмерТарифа - Булево - если "Истина", то возвращается размер тарифа в процентах, иначе - код тарифа.
//
// Пример реализации:
//  ОтчетныйПериод = Дата(ОтчетныйГод, 1, 1);
//  КатегорияЗастрахованногоЛица = Перечисления.КатегорииЗастрахованныхЛицДляПФР[КодКатегории];
//  
//  Если ВернутьРазмерТарифа Тогда
//  	
//  	ЗначенияТарифов = 
//  		ПерсонифицированныйУчет.ТарифыПоКатегориям(ОтчетныйПериод).Получить(КатегорияЗастрахованногоЛица);
//  	Если ЗначенияТарифов = Неопределено Тогда
//  		КодИлиРазмерТарифа = Неопределено;
//  	Иначе
//  		КодИлиРазмерТарифа = ЗначенияТарифов.ПФРСтраховая;
//  	КонецЕсли;
//  	
//  Иначе
//  	
//  	Запрос = Новый Запрос;
//  	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//  	Запрос.УстановитьПараметр("ОтчетныйГод", ОтчетныйГод);
//  	Запрос.УстановитьПараметр("КатегорияЗастрахованногоЛица", КатегорияЗастрахованногоЛица);
//  	
//  	ПерсонифицированныйУчет.СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(
//  		Запрос.МенеджерВременныхТаблиц, ОтчетныйГод);
//  	УчетСтраховыхВзносов.СоздатьВТКодыВидовТарифаСтраховыхВзносов(
//  		ОтчетныйПериод, ОтчетныйПериод, Запрос.МенеджерВременныхТаблиц);
//  	
//  	ТекстЗапроса =
//  		"ВЫБРАТЬ
//  		|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
//  		|	МИНИМУМ(СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов) КАК ВидТарифаСтраховыхВзносов
//  		|ПОМЕСТИТЬ ВТТарифыПоКатегориям
//  		|ИЗ
//  		|	ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
//  		|ГДЕ
//  		|	&ОтчетныйГод МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо
//  		|
//  		|СГРУППИРОВАТЬ ПО
//  		|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц
//  		|;
//  		|
//  		|////////////////////////////////////////////////////////////////////////////////
//  		|ВЫБРАТЬ
//  		|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
//  		|	КодыВидовТарифаСтраховыхВзносов.ИмяПоля КАК КодТарифа
//  		|ИЗ
//  		|	ВТТарифыПоКатегориям КАК СоответствиеТарифаКатегории
//  		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыВидовТарифаСтраховыхВзносов КАК КодыВидовТарифаСтраховыхВзносов
//  		|		ПО СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов =
//  		|			КодыВидовТарифаСтраховыхВзносов.ВидТарифаСтраховыхВзносов
//  		|			И (&ОтчетныйГод = КодыВидовТарифаСтраховыхВзносов.РасчетныйПериод)
//  		|			И (&КатегорияЗастрахованногоЛица = СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц) ";
//  	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяПоля", ?(ОтчетныйГод < 2017, "КодПФР", "КодФНС"));
//  	
//  	КодИлиРазмерТарифа = Неопределено;
//  	
//  	Выборка = Запрос.Выполнить().Выбрать();
//  	Пока Выборка.Следующий() Цикл
//  		Если ЗначениеЗаполнено(Выборка.КатегорияЗастрахованныхЛиц) Тогда
//  			КодИлиРазмерТарифа = Выборка.КодТарифа;
//  			Прервать;
//  		КонецЕсли;
//  	КонецЦикла;
//  	
//  КонецЕсли;
//
Процедура ПолучитьКодИлиРазмерТарифаПоКодуКатегории(КодКатегории,
													ОтчетныйГод,
													КодИлиРазмерТарифа,
													ВернутьРазмерТарифа) Экспорт
	
	ЗарплатаКадры.ПолучитьКодИлиРазмерТарифаПоКодуКатегории(КодКатегории, ОтчетныйГод, КодИлиРазмерТарифа, ВернутьРазмерТарифа);
	
КонецПроцедуры

// Определяет признак учета отложенного налога балансовым методом
// по ПБУ 18/02 с изменениями по приказу Минфина от 20.11.2018 N 236н.
//
// Параметры:
//   УчетБалансовымМетодом - Булево - переменная, в которую будет помещен результат определения.
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   Период - Дата - дата, на которую нужно получить признак.
//
// Пример реализации:
//   СпособУчетаОтложенногоНалога = НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(Период, Организация);
//   УчетБалансовымМетодом = (СпособУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетод);
//
Процедура ОпределитьУчетОтложенногоНалогаБалансовымМетодом(УчетБалансовымМетодом, Организация, Период) Экспорт
	
	ВариантУчета = НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(Период, Организация);
	УчетБалансовымМетодом = Перечисления.ВариантыУчетаОтложенногоНалога.ЭтоБалансовыйМетод(ВариантУчета);
	
КонецПроцедуры

// Определяет признак разделения авансов по видам активов для отражения в бухгалтерской отчетности.
// 
// Параметры:
//   РазделятьАвансы - Булево - переменная, в которую будет помещен результат определения.
//   Организация - СправочникСсылка.Организации - организация, по которой нужно определить признак.
//   Период - Дата - дата, на которую нужно получить признак.
//
// Пример реализации:
//   СпособОтражения = УчетнаяПолитика.СпособОтраженияАвансовВыданных(Организация, Период);
//   РазделятьАвансы = (СпособОтражения = Перечисления.СпособОтраженияАвансовВыданных.РазделятьПоВидамАктивов);
//
Процедура ОпределитьРазделениеАвансовПоВидамАктивов(РазделятьАвансы, Организация, Период) Экспорт
	
	СпособОтражения = УчетнаяПолитика.СпособОтраженияАвансовВыданных(Организация, Период);
	РазделятьАвансы = (СпособОтражения = Перечисления.СпособОтраженияАвансовВыданных.РазделятьПоВидамАктивов);
	
КонецПроцедуры

// Изменяет признаки включения разделов регламентированного отчета при создании.
//
// Параметры:
//   ИДОтчета - Строка - имя регламентированного отчета.
//   ИДРедакцииОтчета - Строка - имя формы регламентированного отчета.
//   ПараметрыОтчета - Структура - параметры регламентированного отчета, требующиеся для изменения признаков.
//   РазделыОтчета - ДеревоЗначений - разделы и признаки разделов регламентированного отчета:
//     * Идентификатор - Строка - идентификатор отчета
//     * Название - Строка - название отчета
//     * ВключенВОтчет - Булево - признак включения отчета в состав отчетности.
//
// Пример реализации:
//   Если ИДОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
//       Если ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
//           ОписаниеРаздела = РазделыОтчета.Строки.Найти("Баланс", "Идентификатор");
//           Если ОписаниеРаздела <> Неопределено Тогда
//               ОписаниеРаздела.ВключенВОтчет = Истина;
//           КонецЕсли;
//       КонецЕсли;
//   КонецЕсли;
//
Процедура ИзменитьСоставОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, РазделыОтчета) Экспорт
КонецПроцедуры

#КонецОбласти