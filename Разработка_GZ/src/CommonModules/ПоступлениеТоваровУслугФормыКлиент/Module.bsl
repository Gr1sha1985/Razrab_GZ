////////////////////////////////////////////////////////////////////////////////
// ПоступлениеТоваровУслугФормыКлиент: клиентские процедуры и функции, вызываемые 
// из форм документа "Поступление (акт, накладная, УПД)".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт

	ТекущийОбъект = Форма.Объект;
	
 	ОбработатьПередЗаписью(Форма, Отказ, ПараметрыЗаписи);
	
	Для каждого ИмяТабличнойЧасти Из СтрРазделить("Товары,Услуги,АгентскиеУслуги", ",") Цикл
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущийОбъект, ИмяТабличнойЧасти) Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из ТекущийОбъект[ИмяТабличнойЧасти] Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
				СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;

	Если НЕ Отказ 
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		КлючеваяОперация = "ПроведениеПоступлениеТоваровИУслуг";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;

КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	Оповестить("Запись_ПоступлениеТоваровУслуг", ПараметрыЗаписи, Объект.Ссылка);

	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И ЗначениеЗаполнено(Объект.СчетНаОплатуПоставщика) Тогда
		ОповеститьОбИзменении(Объект.СчетНаОплатуПоставщика);
	КонецЕсли;

КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

Процедура НомерВходящегоДокументаПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;

	Если ЗначениеЗаполнено(Форма.ЗначениеРабочейДаты) Тогда
		Если ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) 
			И НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
			Объект.ДатаВходящегоДокумента = Форма.ЗначениеРабочейДаты;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ЭтоУниверсальныйДокумент 
	   И ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
		УчетНДСКлиентСервер.ОтобразитьПолеУПД(Форма);
	КонецЕсли;

КонецПроцедуры

Процедура ДатаВходящегоДокументаПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ЭтоУниверсальныйДокумент
	   И ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
		УчетНДСКлиентСервер.ОтобразитьПолеУПД(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПорядокУчетаРасчетовНажатие(Форма, Элемент, СтандартнаяОбработка, АдресХранилищаЗачетАвансов) Экспорт

	Объект = Форма.Объект;

	Если НЕ Форма.ТолькоПросмотр Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	
	ЭтоКомиссия           = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	ТипыДокументов        = "Метаданные.Документы.ПоступлениеТоваровУслуг.ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип";
	РежимОтбораДокументов = ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр",                 Форма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата",                           Объект.Дата);
	ПараметрыФормы.Вставить("ДоговорКонтрагента",             Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент",                     Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация",                    Объект.Организация);
	ПараметрыФормы.Вставить("ОстаткиОбороты",                 "Дт");
	ПараметрыФормы.Вставить("ТипыДокументов",                 ТипыДокументов);
	ПараметрыФормы.Вставить("РежимОтбораДокументов",          РежимОтбораДокументов);
	ПараметрыФормы.Вставить("АдресХранилищаЗачетАвансов",     АдресХранилищаЗачетАвансов);
	ПараметрыФормы.Вставить("СпособЗачетаАвансов",            Объект.СпособЗачетаАвансов);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовСКонтрагентом", Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовПоАвансам",     Объект.СчетУчетаРасчетовПоАвансам);
	ПараметрыФормы.Вставить("ДоступенЗачетАвансов",           НЕ ЭтоКомиссия);
	ПараметрыФормы.Вставить("СрокОплаты",                     Форма.СрокОплаты);
	ПараметрыФормы.Вставить("ИспользуетсяСрокОплаты",         Форма.ИспользуетсяПланированиеПлатежей);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПорядкаУчетаРасчетов", ПараметрыФормы, Форма);

КонецПроцедуры

Процедура ЦеныИВалютаНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Форма);

КонецПроцедуры

Процедура ГрузоотправительГрузополучательНажатие(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;

	СтандартнаяОбработка = Ложь;

	Если НЕ Форма.ТолькоПросмотр Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр", 				Форма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("Грузоотправитель",				Объект.Грузоотправитель);
	ПараметрыФормы.Вставить("ГрузоотправительПоУмолчанию",	Объект.Контрагент);
	ПараметрыФормы.Вставить("Грузополучатель",				Объект.Грузополучатель);
	ПараметрыФормы.Вставить("ГрузополучательПоУмолчанию",	Объект.Организация);
	ПараметрыФормы.Вставить("ПоставщикРезидентТаможенногоСоюза", Форма.ПоставщикРезидентТаможенногоСоюза);
	ПараметрыФормы.Вставить("КодВидаТранспорта", Объект.КодВидаТранспорта);

	ОткрытьФорму("ОбщаяФорма.ВводГрузоотправителяГрузополучателя", ПараметрыФормы, Форма);

КонецПроцедуры

Процедура ОбработкаВыбораГрузоотправителяГрузополучателя(Форма, ВыбранноеЗначение) Экспорт

	Объект = Форма.Объект;
	
	Объект.Грузоотправитель = ВыбранноеЗначение.Грузоотправитель;
	Объект.Грузополучатель = ВыбранноеЗначение.Грузополучатель;
	Объект.КодВидаТранспорта = ВыбранноеЗначение.КодВидаТранспорта;
	
	Форма.Модифицированность = Истина;

КонецПроцедуры

Процедура НомерСчетаФактурыПолученногоПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;

	Если НЕ ЗначениеЗаполнено(Форма.ДатаСчетаФактурыПолученного) Тогда
		Форма.ДатаСчетаФактурыПолученного = Объект.ДатаВходящегоДокумента;
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

Процедура ПодборНоменклатуры(Форма, ИмяТаблицы, Команда) Экспорт

	ПараметрыПодбора = ПолучитьПараметрыПодбора(Форма, ИмяТаблицы);
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			Форма, Форма.УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

Процедура ИзменитьТовары(Форма, Команда, АдресХранилищаТовары) Экспорт

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары(Форма, АдресХранилищаТовары);
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			Форма, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьСчетФактуру(Форма, Команда) Экспорт
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруПолученный(Форма, Форма.ЭтоКомиссияНаЗакупку);
	
	Если РеквизитыСФ <> Неопределено Тогда 
		ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(Форма, РеквизитыСФ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.СчетФактура) Тогда
		Форма.НомерСчетаФактурыПолученного = "";
		Форма.ДатаСчетаФактурыПолученного  = '00010101';
	КонецЕсли;
	
КонецПроцедуры

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМ ДОКУМЕНТА ПоступлениеТоваровУслуг

Процедура ОткрытьФормуВыбораСчетаНаОплату(Форма, ТабличнаяЧасть) Экспорт
	
	Объект = Форма.Объект;

	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтруктураОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СтруктураОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	КонецЕсли;
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы",         ТабличнаяЧасть);
	
	ОткрытьФорму("Документ.СчетНаОплатуПоставщика.ФормаВыбора", СтруктураПараметров, Форма);
	
КонецПроцедуры

Функция ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(Форма, СтрокаТабличнойЧасти) Экспорт
	
	Объект = Форма.Объект;
	
	РассчитыватьСуммаВРознице 	= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");
	НТТ 						= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "НТТ");
	УчетВПродажныхЦенах 		= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "УчетВПродажныхЦенах");
	РазделениеПоСтавкамВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РазделениеПоСтавкамВРознице");	
	ЭтоКомиссия					= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	ПрименяютсяСтавки4и2		= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ПрименяютсяСтавки4и2");
	СпособЗаполненияСтавкиНДС = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма,
		"СпособЗаполненияСтавкиНДС");
	УчетАгентскогоНДС = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма,"УчетАгентскогоНДС");
	ВидАгентскогоДоговора = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма,
		"ВидАгентскогоДоговора");
	ПоставщикРезидентТаможенногоСоюза = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма,
		"ПоставщикРезидентТаможенногоСоюза");

	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|НадписьПоДокументу, КоличествоПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, ЦенаПоДокументу, ВсегоПоДокументу,
		|НадписьОтклонение, КоличествоОтклонение, СуммаОтклонение,  СуммаНДСОтклонение, ЦенаОтклонение, ВсегоОтклонение, 
		|НадписьПоФакту, НомерГТД, СтранаПроисхождения,
		|ЦенаВРознице, СуммаВРознице, СтавкаНДСВРознице,
		|ОтражениеВУСН, МаркируемаяПродукцияГосИС,
		|ПродукцияМаркируемаяДляГИСМ");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ЕстьРасхождения,
		|РассчитыватьСуммаВРознице, ЗаполнятьСтавкуНДСВРознице, ЭтоКомиссия,
		|ДоговорКонтрагента, ПрименяютсяСтавки4и2, СпособЗаполненияСтавкиНДС,
		|УчетАгентскогоНДС, ВидАгентскогоДоговора, ПоставщикРезидентТаможенногоСоюза");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.РассчитыватьСуммаВРознице         = РассчитыватьСуммаВРознице;
	ДанныеОбъекта.ЗаполнятьСтавкуНДСВРознице        = НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице;
	ДанныеОбъекта.ЭтоКомиссия                       = ЭтоКомиссия;
	ДанныеОбъекта.ПрименяютсяСтавки4и2              = ПрименяютсяСтавки4и2;
	ДанныеОбъекта.СпособЗаполненияСтавкиНДС         = СпособЗаполненияСтавкиНДС;
	ДанныеОбъекта.УчетАгентскогоНДС                 = УчетАгентскогоНДС;
	ДанныеОбъекта.ВидАгентскогоДоговора             = ВидАгентскогоДоговора;
	ДанныеОбъекта.ПоставщикРезидентТаможенногоСоюза = ПоставщикРезидентТаможенногоСоюза;
	ДанныеОбъекта.ЕстьРасхождения                   = Объект.ЕстьРасхождения;
	
	Если Объект.НДСНеВыделять Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		ДанныеОбъекта.Вставить("СуммаВключаетНДС", Истина);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
		
		ДанныеОбъекта.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		СтрокаТабличнойЧасти,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	 ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		 ДанныеОбъекта);
	ПараметрыОбработки.Вставить("СчетаУчетаКЗаполнению", ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

Функция ПодготовитьПараметрыОбработкиУслугиНоменклатураПриИзменении(Форма, СтрокаТабличнойЧасти) Экспорт
	
	Объект = Форма.Объект;
	
	УчетАгентскогоНДС = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма,"УчетАгентскогоНДС");
	ВидАгентскогоДоговора = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма,
		"ВидАгентскогоДоговора");
	ПоставщикРезидентТаможенногоСоюза = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма,
		"ПоставщикРезидентТаможенногоСоюза");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, ОтражениеВУСН, 
		|НадписьПоДокументу, КоличествоПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, ЦенаПоДокументу, ВсегоПоДокументу,
		|НадписьОтклонение, КоличествоОтклонение, СуммаОтклонение, СуммаНДСОтклонение, ЦенаОтклонение, ВсегоОтклонение, НадписьПоФакту");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ВидОперации, Склад, ТипЦен, СуммаВключаетНДС, ПодразделениеОрганизации,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ЭтоКомиссия, ДоговорКонтрагента,
		|СпособЗаполненияСтавкиНДС, УчетАгентскогоНДС, ВидАгентскогоДоговора, ЕстьРасхождения,
		|ПоставщикРезидентТаможенногоСоюза");
	ДанныеОбъекта.ЭтоКомиссия = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	ДанныеОбъекта.СпособЗаполненияСтавкиНДС = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма,
		"СпособЗаполненияСтавкиНДС");
	ДанныеОбъекта.УчетАгентскогоНДС         = УчетАгентскогоНДС;
	ДанныеОбъекта.ВидАгентскогоДоговора     = ВидАгентскогоДоговора;
	ДанныеОбъекта.ПоставщикРезидентТаможенногоСоюза = ПоставщикРезидентТаможенногоСоюза;
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если Объект.НДСНеВыделять Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		ДанныеОбъекта.Вставить("СуммаВключаетНДС", Истина);
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Услуги.Номенклатура",
		Объект,
		СтрокаТабличнойЧасти,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	 ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		 ДанныеОбъекта);
	ПараметрыОбработки.Вставить("СчетаУчетаКЗаполнению", ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

Функция ПолучитьПараметрыПодбора(Форма, ИмяТаблицы)
	
	Объект = Форма.Объект;

	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов     = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	Валюта = Объект.ВалютаДокумента;
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;
	
	Если ИмяТаблицы = "Оборудование" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Оборудование'");
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		
	ИначеЕсли ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Возвратная тара'");
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Услуги'");
	КонецЕсли;
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение"     , Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Склад"             , Объект.Склад);
	ПараметрыФормы.Вставить("Кратность"			, Объект.КратностьВзаиморасчетов);
	ПараметрыФормы.Вставить("Курс"        		, Объект.КурсВзаиморасчетов);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПокупке", Истина);
		ПараметрыФормы.Вставить("СуммаВключаетНДС"		, Объект.СуммаВключаетНДС);
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку")
			ИЛИ Объект.НДСНеВыделять
			ИЛИ Форма.СпособЗаполненияСтавкиНДС =
				 ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСтавкиНДС.БезНДС") Тогда
			ПараметрыФормы.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		КонецЕсли;
		
		Если ИмяТаблицы = "ВозвратнаяТара" ИЛИ Объект.НДСНеВыделять Тогда
			ПараметрыФормы.Вставить("СуммаВключаетНДС", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары(Форма, АдресХранилищаТовары)

	Объект = Форма.Объект;

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		АдресХранилищаТовары);
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Истина);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 				Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 				Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("НДСНеВыделять",               	Объект.НДСНеВыделять);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);

	Возврат ПараметрыОбработки;
	
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Форма)

	Объект = Форма.Объект;
	
	ЭтоКомиссия = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");

	// Формирование структуры параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"     , Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс"                , Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность"           , Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент"          , Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор"             , Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация"         , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента"       , Объект.Дата);
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков") Тогда
		СтруктураПараметров.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТолькоПросмотр"      , Форма.ТолькоПросмотр);
	
	Если Не Форма.ПлательщикНДС Тогда
		СтруктураПараметров.Вставить("НДСНеВыделять"	   , Объект.НДСНеВыделять);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку")
		Тогда
		СтруктураПараметров.Вставить("ЭтоПоступление", Истина);
	Иначе
		Если НЕ ЭтоКомиссия Тогда
			СтруктураПараметров.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
		КонецЕсли;
		СтруктураПараметров.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	Если (НЕ Форма.РаздельныйУчетНДСНаСчете19 И НЕ ЭтоКомиссия И НЕ Объект.НДСНеВыделять)
		ИЛИ Форма.ИспользоватьТипыЦенНоменклатуры
		ИЛИ (Форма.ЕстьВалютныйУчет И Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета)
		ИЛИ Форма.РасчетыВУЕ Тогда 
		
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		Если Форма.ПлательщикНДС Тогда
			СтруктураПараметров.Вставить("НДСНеВыделять", Ложь);
		КонецЕсли;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		Если Не Форма.ПлательщикНДС Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСНеВыделять"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		Если НЕ Форма.ТолькоПросмотр Тогда
			Форма.ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Форма.Элементы.ЦеныИВалюта);
		КонецЕсли;
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;

	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСНеВыделять") Тогда
			СтруктураЦеныИВалюта.НДСНеВыделять		= Истина;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.НДСНеВыделять 		= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.НДСНеВыделять 		= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.НДСНеВыделять <> СтруктураЦеныИВалюта.НДСНеВыделять);

	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения      = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Если СтруктураЦеныИВалюта.Свойство("ТипЦен") Тогда
			Объект.ТипЦен              = СтруктураЦеныИВалюта.ТипЦен;
		КонецЕсли;
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Если Форма.РасчетыВУЕ И Объект.ВалютаДокумента = Форма.ВалютаРегламентированногоУчета Тогда
			// Документ оформляется в рублях. Используем курс расчетов.
			Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.КурсРасчетов;
		Иначе
			Если ВалютаДоИзменения = Форма.ВалютаРегламентированногоУчета Тогда
				// Ранее документ был оформлен в рублях, для правильного пересчета цен сбросим курс.
				КурсДоИзменения = 1;
			КонецЕсли;
			Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		КонецЕсли;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСНеВыделять		   = СтруктураЦеныИВалюта.НДСНеВыделять;
		Если СтруктураЦеныИВалюта.Свойство("НДСВключенВСтоимость") Тогда
			Объект.НДСВключенВСтоимость    = СтруктураЦеныИВалюта.НДСВключенВСтоимость;
		КонецЕсли;
		
		Форма.Модифицированность = Истина;
		
		Форма.ПриИзмененииЦеныИВалюты(
			ВалютаДоИзменения, 
			КурсДоИзменения,
			КратностьДоИзменения,
			СтруктураЦеныИВалюта.ПерезаполнитьЦены,
			СтруктураЦеныИВалюта.ПересчитатьЦены,
			СтруктураЦеныИВалюта.ПересчитатьНДС);
			
		Форма.ОбновитьОтображениеДанных();	
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт

	Если НЕ ЗначениеЗаполнено(Форма.НомерСчетаФактурыПолученного) И ЗначениеЗаполнено(Форма.ДатаСчетаФактурыПолученного) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Номер счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НомерСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ДатаСчетаФактурыПолученного) И ЗначениеЗаполнено(Форма.НомерСчетаФактурыПолученного)  Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДатаСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
	Если Форма.ЭтоКомиссияНаЗакупку И НЕ ЗначениеЗаполнено(Форма.Продавец)
		И (ЗначениеЗаполнено(Форма.ДатаСчетаФактурыПолученного) ИЛИ ЗначениеЗаполнено(Форма.НомерСчетаФактурыПолученного)) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Составлен от имени'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Продавец",, Отказ);
	КонецЕсли;
	
	Если Форма.ОригиналСчетаФактуры
		И НЕ ЗначениеЗаполнено(Форма.СчетФактура)
		И НЕ ЗначениеЗаполнено(Форма.ДатаСчетаФактурыПолученного)
		И НЕ ЗначениеЗаполнено(Форма.НомерСчетаФактурыПолученного) Тогда
			ТекстСообщения = НСтр("ru = 'По документу счет-фактура не выписан'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОригиналСчетаФактуры",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

Процедура ПровестиИЗакрыть(Форма, Команда) Экспорт
	
	КлючеваяОперация = "ПроведениеПоступлениеТоваровИУслуг";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Если Форма.Записать(ПараметрыЗаписи) Тогда
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Создание поступления товаров и услуг по накладной ЕГАИС

Процедура СоздатьПоступлениеПоТТНЕГАИС(НакладнаяЕГАИС) Экспорт
	ДополнительныеПараметры = Новый Структура("Основание", НакладнаяЕГАИС);
	
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(Форма);
	
	Если Форма.ИспользуютсяСканерыШтрихкода И НЕ Форма.ТолькоПросмотр Тогда
		// Попробуем подключить сканер штрихкода
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьСканерШКЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма));
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, Форма.УникальныйИдентификатор, "СканерШтрихкода");
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы) Экспорт
	Если Форма.СканерШтрихкодаПодключен И ЗавершениеРаботы Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии(Форма) Экспорт
	Если Форма.СканерШтрихкодаПодключен Тогда
		ТипыПО = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СканерШтрихкода");
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ОтключитьСканерШКЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма));
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриПодключении, Форма.УникальныйИдентификатор, ТипыПО);
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ПодключитьСканерШКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	Форма.СканерШтрихкодаПодключен = РезультатВыполнения.Результат;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСканерШКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При отключении оборудования произошла ошибка: ""%1"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		Форма.СканерШтрихкодаПодключен = Ложь;
	КонецЕсли;
	
КонецПроцедуры
