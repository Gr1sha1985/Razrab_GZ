#Область СлужебныйПрограммныйИнтерфейс

Функция ДобавитьПоле(Форма, Родитель, Описание, ДополнениеТекстаПодсказки = Неопределено) Экспорт
	
	Если Описание.ТипПоказателя = "Строка" Тогда
		Возврат ДобавитьПолеСтрока(Форма, Родитель, Описание, ДополнениеТекстаПодсказки);
	ИначеЕсли Описание.ТипПоказателя = "Число" Тогда
		Возврат ДобавитьПолеЧисло(Форма, Родитель, Описание, ДополнениеТекстаПодсказки);
	ИначеЕсли Описание.ТипПоказателя = "Дата" Тогда
		Возврат ДобавитьПолеДата(Форма, Родитель, Описание, ДополнениеТекстаПодсказки);
	ИначеЕсли Описание.ТипПоказателя = "Булево" Тогда
		Возврат ДобавитьПолеБулево(Форма, Родитель, Описание, ДополнениеТекстаПодсказки);
	ИначеЕсли Описание.ТипПоказателя = "Перечисление" Тогда
		Возврат ДобавитьПолеПеречисление(Форма, Родитель, Описание, ДополнениеТекстаПодсказки);
	КонецЕсли;
	
КонецФункции

Функция НовыйТаблицаДополнительныеПоказатели() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",                    ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Результат.Колонки.Добавить("КраткоеПредставление",             ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Результат.Колонки.Добавить("ПодробноеПредставление",           ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Результат.Колонки.Добавить("ТипПоказателя",                    ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Результат.Колонки.Добавить("Разрядность",                      ОбщегоНазначения.ОписаниеТипаЧисло(3));
	Результат.Колонки.Добавить("РазрядностьДробнойЧасти",          ОбщегоНазначения.ОписаниеТипаЧисло(2));
	Результат.Колонки.Добавить("НеОтрицательный",                  Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ПодсказкаВвода",                   ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("Маска",                            ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("ФорматРедактирования",             ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("МинимальноеЗначение",              ОбщегоНазначения.ОписаниеТипаЧисло(20, 6));
	Результат.Колонки.Добавить("МаксимальноеЗначение",             ОбщегоНазначения.ОписаниеТипаЧисло(20, 6));
	Результат.Колонки.Добавить("Обязательный",                     Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЗначенияПеречисления",             Новый ОписаниеТипов("ТаблицаЗначений"));
	Результат.Колонки.Добавить("Банки",                            Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("КоличествоБанков",                 ОбщегоНазначения.ОписаниеТипаЧисло(15));
	Результат.Колонки.Добавить("ИдентификаторыКредитныхПродуктов", Новый ОписаниеТипов("Массив"));
	
	Результат.Индексы.Добавить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаЗначенияПеречисления() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Порядок",                ОбщегоНазначения.ОписаниеТипаЧисло(15));
	Результат.Колонки.Добавить("Идентификатор",          ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Результат.Колонки.Добавить("КраткоеПредставление",   ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("ПодробноеПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоРазличныхБанковТребующихПоказатели(Показатели) Экспорт
	
	Банки = Новый Массив;
	
	Для каждого Показатель Из Показатели Цикл
		Для каждого Банк Из Показатель.Банки Цикл
			Если Банки.Найти(Банк) = Неопределено Тогда
				Банки.Добавить(Банк);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Банки.Количество();
	
КонецФункции

Функция ПолучитьДобавляемыеРеквизитыФормы(Описание) Экспорт
	
	Результат = Новый Массив;
	
	Если Описание.ТипПоказателя = "Строка" Тогда
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор),
			ОбщегоНазначения.ОписаниеТипаСтрока(0),,
			Описание.КраткоеПредставление,
			Истина
		));
	ИначеЕсли Описание.ТипПоказателя = "Число" Тогда
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор),
			ОбщегоНазначения.ОписаниеТипаЧисло(
				Описание.Разрядность,
				Описание.РазрядностьДробнойЧасти,
				?(Описание.Неотрицательный, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой)
			),,
			Описание.КраткоеПредставление,
			Истина
		));
	ИначеЕсли Описание.ТипПоказателя = "Дата" Тогда
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор),
			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),,
			Описание.КраткоеПредставление,
			Истина
		));
	ИначеЕсли Описание.ТипПоказателя = "Булево" Тогда
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор),
			ОбщегоНазначения.ОписаниеТипаСтрока(0),,
			Описание.КраткоеПредставление,
			Истина
		));
	ИначеЕсли Описание.ТипПоказателя = "Перечисление" Тогда
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор),
			ОбщегоНазначения.ОписаниеТипаСтрока(0),,
			Описание.КраткоеПредставление,
			Истина
		));
		Если ИспользоватьФормуВыбораПеречисления(Описание) Тогда
			// Реквизит для хранения адреса значений перечисления.
			Результат.Добавить(Новый РеквизитФормы(
				УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяАдресаЗначений(
					УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)),
				ОбщегоНазначения.ОписаниеТипаСтрока(0),,
				Описание.КраткоеПредставление,
				Истина
			));
			// Реквизит для хранения представления выбранного значения перечисления.
			Результат.Добавить(Новый РеквизитФормы(
				УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(
					УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)),
				ОбщегоНазначения.ОписаниеТипаСтрока(0),,
				Описание.КраткоеПредставление,
				Истина
			));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Описание.Обязательный Тогда
		// Переключатель показателя.
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(
				УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)),
			Новый ОписаниеТипов("Булево"),,
			Описание.КраткоеПредставление,
			Истина
		));
		// Заглушка.
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(
				УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)),
			ОбщегоНазначения.ОписаниеТипаСтрока(0)
		));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьУдаляемыеРеквизитыФормы(Описание) Экспорт
	
	Результат = Новый Массив;
	
	// Значение показателя.
	Результат.Добавить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор));
	
	Если НЕ Описание.Обязательный Тогда
		// Переключатель показателя.
		Результат.Добавить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)));
		// Заглушка.
		Результат.Добавить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)));
	КонецЕсли;
	
	Если ИспользоватьФормуВыбораПеречисления(Описание) Тогда
		// Представление показателя.
		Результат.Добавить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)));
		// Значения перечисления.
		Результат.Добавить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяАдресаЗначений(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИспользоватьФормуВыбораПеречисления(Описание) Экспорт
	
	Если Описание.ТипПоказателя <> "Перечисление" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	
	КолонкаПодробноеПредставлениеЗаполнена = Ложь;
	Для каждого ЗначениеПеречисления Из Описание.ЗначенияПеречисления Цикл
		Если ЗначениеЗаполнено(ЗначениеПеречисления.ПодробноеПредставление) Тогда
			КолонкаПодробноеПредставлениеЗаполнена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	МаксимальноеЧислоЭлементовСпискаВыбора = 10;
	
	Результат = КолонкаПодробноеПредставлениеЗаполнена
		ИЛИ Описание.ЗначенияПеречисления.Количество() > МаксимальноеЧислоЭлементовСпискаВыбора;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьПодчиненныеЭлементы(Форма, КоллекцияЭлементов) Экспорт
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			УдалитьПодчиненныеЭлементы(Форма, Элемент.ПодчиненныеЭлементы);
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла;
	
	Для каждого Элемент Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьГруппуНеобязательныхДополнительныхПоказателей(Форма, Родитель) Экспорт
	
	ИмяГруппы = СтрШаблон("Группа_%1", СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));
	
	Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
	Группа.ОтображатьЗаголовок = Истина;
	Группа.Заголовок = НСтр("ru='Снимите флажок, если показатель неприменим для Вашего бизнеса'");
	Группа.ЦветТекстаЗаголовка = ЦветаСтиля.ПоясняющийТекст;
	Группа.Ширина = 60;
	
	Возврат Группа;
	
КонецФункции

Процедура ИнициализироватьДобавляемыеРеквизитыФормы(Форма, ДобавляемыеПоказатели) Экспорт
	
	Для каждого Показатель Из ДобавляемыеПоказатели Цикл
		
		ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Показатель.Идентификатор);
		
		Если НЕ Показатель.Обязательный Тогда
			ИмяРеквизитаПереключателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизита);
			Форма[ИмяРеквизитаПереключателя] = Истина;
		КонецЕсли;
		
		Если ИспользоватьФормуВыбораПеречисления(Показатель) Тогда
			ИмяРеквизитаАдресаЗначений = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяАдресаЗначений(ИмяРеквизита);
			ИмяРеквизитаПредставления = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(ИмяРеквизита);
		
			ЗначенияПеречисления = Новый Массив;
			Для каждого Значение Из Показатель.ЗначенияПеречисления Цикл
				ЗначениеПеречисления = Новый Структура;
				ЗначениеПеречисления.Вставить("Идентификатор",          Значение.Идентификатор);
				ЗначениеПеречисления.Вставить("КраткоеПредставление",   Значение.КраткоеПредставление);
				ЗначениеПеречисления.Вставить("ПодробноеПредставление", Значение.ПодробноеПредставление);
				ЗначенияПеречисления.Добавить(ЗначениеПеречисления);
			КонецЦикла;
			
			Форма[ИмяРеквизитаАдресаЗначений] = ПоместитьВоВременноеХранилище(ЗначенияПеречисления, Форма.УникальныйИдентификатор);
			Форма[ИмяРеквизитаПредставления] = "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Поля

Функция ДобавитьПолеСтрока(Форма, Родитель, Описание, ДополнениеТекстаПодсказки = Неопределено)
	
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор);
	
	Группа = ДобавитьГруппуГоризонтальную(Форма, Родитель);
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьПолеПереключателяПоказателя(Форма, Группа, Описание);
	КонецЕсли;
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ИмяЭлемента;
	Элемент.ПодсказкаВвода = Описание.ПодсказкаВвода;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Элемент.РасширеннаяПодсказка.Заголовок = СформироватьТекстПодсказки(
		СтроковыеФункции.ФорматированнаяСтрока(Описание.ПодробноеПредставление),
		ДополнениеТекстаПодсказки
	);
	Элемент.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиДополнительногоПоказателя");
	Элемент.ФорматРедактирования = Описание.ФорматРедактирования;
	Элемент.Маска = Описание.Маска;
	Элемент.АвтоОтметкаНезаполненного = Истина;
	Если Описание.Обязательный Тогда
		Элемент.Заголовок = Описание.КраткоеПредставление;
		Элемент.ВысотаЗаголовка = ВысотаЗаголовка(Описание.КраткоеПредставление);
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоПоказателя");
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.МаксимальнаяШирина = 37;
		Элемент.Видимость = Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяЭлемента)];
	КонецЕсли;
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьЗаглушкуДополнительногоПоказателя(Форма, Группа, ИмяЭлемента);
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ДобавитьПолеЧисло(Форма, Родитель, Описание, ДополнениеТекстаПодсказки = Неопределено)
	
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор);
	
	Группа = ДобавитьГруппуГоризонтальную(Форма, Родитель);
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьПолеПереключателяПоказателя(Форма, Группа, Описание);
	КонецЕсли;
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ИмяЭлемента;
	Элемент.ФорматРедактирования = Описание.ФорматРедактирования;
	Элемент.МинимальноеЗначение = Описание.МинимальноеЗначение;
	Элемент.МаксимальноеЗначение = Описание.МаксимальноеЗначение;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Элемент.РасширеннаяПодсказка.Заголовок = СформироватьТекстПодсказки(
		СтроковыеФункции.ФорматированнаяСтрока(Описание.ПодробноеПредставление),
		ДополнениеТекстаПодсказки
	);
	Элемент.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиДополнительногоПоказателя");
	Элемент.АвтоОтметкаНезаполненного = Истина;
	Элемент.Ширина = 14;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.МаксимальнаяШирина = Элемент.Ширина;
	Если Описание.Обязательный Тогда
		Элемент.Заголовок = Описание.КраткоеПредставление;
		Элемент.ВысотаЗаголовка = ВысотаЗаголовка(Описание.КраткоеПредставление);
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоПоказателя");
		Элемент.Видимость = Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяЭлемента)];
	КонецЕсли;
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьЗаглушкуДополнительногоПоказателя(Форма, Группа, ИмяЭлемента);
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ДобавитьПолеДата(Форма, Родитель, Описание, ДополнениеТекстаПодсказки = Неопределено)
	
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор);
	
	Группа = ДобавитьГруппуГоризонтальную(Форма, Родитель);
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьПолеПереключателяПоказателя(Форма, Группа, Описание);
	КонецЕсли;
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ИмяЭлемента;
	Элемент.ФорматРедактирования = Описание.ФорматРедактирования;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Элемент.РасширеннаяПодсказка.Заголовок = СформироватьТекстПодсказки(
		СтроковыеФункции.ФорматированнаяСтрока(Описание.ПодробноеПредставление),
		ДополнениеТекстаПодсказки
	);
	Элемент.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиДополнительногоПоказателя");
	Элемент.АвтоОтметкаНезаполненного = Истина;
	Элемент.Ширина = 14;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.МаксимальнаяШирина = Элемент.Ширина;
	Если Описание.Обязательный Тогда
		Элемент.Заголовок = Описание.КраткоеПредставление;
		Элемент.ВысотаЗаголовка = ВысотаЗаголовка(Описание.КраткоеПредставление);
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоПоказателя");
		Элемент.Видимость = Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяЭлемента)];
	КонецЕсли;
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьЗаглушкуДополнительногоПоказателя(Форма, Группа, ИмяЭлемента);
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ДобавитьПолеБулево(Форма, Родитель, Описание, ДополнениеТекстаПодсказки = Неопределено)
	
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор);
	
	Группа = ДобавитьГруппуГоризонтальную(Форма, Родитель);
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьПолеПереключателяПоказателя(Форма, Группа, Описание);
	КонецЕсли;
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ИмяЭлемента;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Элемент.РасширеннаяПодсказка.Заголовок = СформироватьТекстПодсказки(
		СтроковыеФункции.ФорматированнаяСтрока(Описание.ПодробноеПредставление),
		ДополнениеТекстаПодсказки
	);
	Элемент.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиДополнительногоПоказателя");
	Элемент.РежимВыбораИзСписка = Истина;
	Элемент.СписокВыбора.Добавить("1", НСтр("ru='Да'"));
	Элемент.СписокВыбора.Добавить("0", НСтр("ru='Нет'"));
	Элемент.Ширина = 14;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.МаксимальнаяШирина = Элемент.Ширина;
	Элемент.АвтоОтметкаНезаполненного = Истина;
	Если Описание.Обязательный Тогда
		Элемент.Заголовок = Описание.КраткоеПредставление;
		Элемент.ВысотаЗаголовка = ВысотаЗаголовка(Описание.КраткоеПредставление);
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоПоказателя");
		Элемент.Видимость = Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяЭлемента)];
	КонецЕсли;
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьЗаглушкуДополнительногоПоказателя(Форма, Группа, ИмяЭлемента);
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ДобавитьПолеПеречисление(Форма, Родитель, Описание, ДополнениеТекстаПодсказки = Неопределено)
	
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор);
	
	Группа = ДобавитьГруппуГоризонтальную(Форма, Родитель);
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьПолеПереключателяПоказателя(Форма, Группа, Описание);
	КонецЕсли;
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПодсказкаВвода = Описание.ПодсказкаВвода;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Элемент.РасширеннаяПодсказка.Заголовок = СформироватьТекстПодсказки(
		СтроковыеФункции.ФорматированнаяСтрока(Описание.ПодробноеПредставление),
		ДополнениеТекстаПодсказки
	);
	Элемент.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиДополнительногоПоказателя");
	Элемент.АвтоОтметкаНезаполненного = Истина;
	Если Описание.Обязательный Тогда
		Элемент.Заголовок = Описание.КраткоеПредставление;
		Элемент.ВысотаЗаголовка = ВысотаЗаголовка(Описание.КраткоеПредставление);
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоПоказателя");
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.МаксимальнаяШирина = 37;
		Элемент.Видимость = Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяЭлемента)];
	КонецЕсли;
	Если ИспользоватьФормуВыбораПеречисления(Описание) Тогда
		Элемент.ПутьКДанным = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(ИмяЭлемента);
		Элемент.КнопкаВыбора = Истина;
		Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСпискеИВПолеВвода;
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораПеречисления");
		Элемент.УстановитьДействие("АвтоПодбор", "Подключаемый_АвтоПодборПеречисления");
		Элемент.УстановитьДействие("Очистка", "Подключаемый_ОчисткаПеречисления");
		Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораПеречисления");
		Элемент.УстановитьДействие("ОкончаниеВводаТекста", "Подключаемый_ОкончаниеВводаТекстаПеречисления");
	Иначе
		Элемент.ПутьКДанным = ИмяЭлемента;
		Элемент.РежимВыбораИзСписка = Истина;
		Для каждого ЗначениеПеречисления Из Описание.ЗначенияПеречисления Цикл
			Элемент.СписокВыбора.Добавить(ЗначениеПеречисления.Идентификатор, ЗначениеПеречисления.КраткоеПредставление);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьЗаглушкуДополнительногоПоказателя(Форма, Группа, ИмяЭлемента);
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ДобавитьПолеПереключателяПоказателя(Форма, Родитель, Описание)
	
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(
		УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор));
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Родитель);
	Элемент.Вид = ВидПоляФормы.ПолеФлажка;
	Элемент.ПутьКДанным = ИмяЭлемента;
	Элемент.Заголовок = Описание.КраткоеПредставление;
	Элемент.ВысотаЗаголовка = ВысотаЗаголовка(Описание.КраткоеПредставление);
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииПереключателяДополнительногоПоказателя");
	
	Возврат Элемент;
	
КонецФункции

#КонецОбласти

Функция ДобавитьЗаглушкуДополнительногоПоказателя(Форма, Родитель, ИмяЭлемента)
	
	ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(ИмяЭлемента);
	
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Родитель);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.Ширина = 1;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.МаксимальнаяШирина = Элемент.Ширина;
	Элемент.Доступность = Ложь;
	Элемент.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
	
	Возврат Элемент;
	
КонецФункции

Функция ДобавитьГруппуГоризонтальную(Форма, Родитель)
	
	ИмяГруппы = СтрШаблон("Группа_%1", СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));
	
	Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Группа.ОтображатьЗаголовок = Ложь;
	
	Возврат Группа;
	
КонецФункции

Функция СформироватьТекстПодсказки(Знач ТекстПодсказки, Знач ДополнениеТекстаПодсказки)
	
	Если ЗначениеЗаполнено(ТекстПодсказки) И ЗначениеЗаполнено(ДополнениеТекстаПодсказки) Тогда
		ЗнакиПрепинания = ".;!?";
		Если СтрНайти(ЗнакиПрепинания, Прав(ТекстПодсказки, 1)) = 0 Тогда
			ТекстПодсказки = Новый ФорматированнаяСтрока(ТекстПодсказки, ".");
		КонецЕсли;
		Если СтрНайти(ЗнакиПрепинания, Прав(ДополнениеТекстаПодсказки, 1)) = 0 Тогда
			ДополнениеТекстаПодсказки = Новый ФорматированнаяСтрока(ДополнениеТекстаПодсказки, ".");
		КонецЕсли;
		Возврат Новый ФорматированнаяСтрока(
			ТекстПодсказки,
			Символы.ПС,
			ДополнениеТекстаПодсказки
		);
	ИначеЕсли ЗначениеЗаполнено(ТекстПодсказки) Тогда
		Возврат ТекстПодсказки;
	ИначеЕсли ЗначениеЗаполнено(ДополнениеТекстаПодсказки) Тогда
		Возврат ДополнениеТекстаПодсказки;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ВысотаЗаголовка(ТекстЗаголовка)
	
	МаксимальнаяДлинаЗаголовка = 25;
	
	Возврат ?(СтрДлина(ТекстЗаголовка) > МаксимальнаяДлинаЗаголовка, 2, 0);
	
КонецФункции

#Область СлужебныеПроцедурыИФункции

Процедура ЗаявкиНаКредитСброситьВерсиюУслугБанка() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;

	Если ОбменДаннымиСервер.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;
	
	УниверсальныйОбменСБанками.СброситьВерсиюУслугБанка(Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
