////////////////////////////////////////////////////////////////////////////////
// ПоступлениеТоваровУслугФормы: серверные процедуры и функции, вызываемые из форм
// документа "Поступление (акт, накладная, УПД)".
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Форма.ЗначениеРабочейДаты = ОбщегоНазначения.РабочаяДатаПользователя();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Форма.Параметры.Свойство("ИзменитьВидОперации")
		И Форма.Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Форма.Объект.ВидОперации = Форма.Параметры.ЗначенияЗаполнения.ВидОперации;
		ВидОперацииОбработатьИзменение(Форма);
		ЗаполнитьДанныеОРасхождениях(Форма);
		
		ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(Форма);

		УстановитьЗаголовокФормы(Форма);
		Форма.ОбновитьИтогиНаСервере();
		Форма.УправлениеФормойНаСервере();
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	Если НЕ Форма.Параметры.Свойство("ИзменитьВидОперации")
		ИЛИ НЕ Форма.Параметры.ИзменитьВидОперации Тогда
		
			ЗаполнитьДанныеОРасхождениях(Форма);
	КонецЕсли;
	
	Форма.ПодготовитьФормуНаСервере();
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	Объект = Форма.Объект;
	
	СтатусыДокументов.ВходящийДокументПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	ДанныеФормы = Новый Структура("АктОРасхожденияхСсылка", Неопределено);
	ЗаполнитьЗначенияСвойств(ДанныеФормы, Форма);
	
	Если Объект.ЕстьРасхождения Тогда
		ДанныеЗаполнения = Новый Структура("Товары, Услуги, АгентскиеУслуги");
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Объект);
		
		// Создание (актуализацию) акта о расхождениях делаем в ПриЗаписи() модуля объекта.
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеТабличныхЧастейРасхождения", ДанныеЗаполнения);
	ИначеЕсли ЗначениеЗаполнено(ДанныеФормы.АктОРасхожденияхСсылка) Тогда
		
		// Пользователь снял флаг "Есть расхождения" на форме - удалим объект
		АктОРасхожденияхОбъект = ДанныеФормы.АктОРасхожденияхСсылка.ПолучитьОбъект();
		АктОРасхожденияхОбъект.ДополнительныеСвойства.Вставить("НеПроверятьВозможностьУдаления");
		Попытка
			АктОРасхожденияхОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось изменить документ ""Акт о расхождениях"". Попробуйте позже.'"),,,,Отказ);
		КонецПопытки;
	КонецЕсли; 
КонецПроцедуры

Процедура ПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	ОсобенностиУчетаРасчетов = Документы.ПоступлениеТоваровУслуг.ОсобенностиУчетаРасчетов(
		Форма.Объект.ВидОперации,
		Форма.Объект.ДоговорКонтрагента);
		
	Если ОсобенностиУчетаРасчетов.ТребуетсяУчетСроковОплаты Тогда
		СрокиОплатыДокументов.ОбновитьСрокОплаты(Объект.Ссылка, Форма.СрокОплаты, Форма.АвторасчетСрокаОплаты);
		ПараметрыЗаписи.Вставить("СрокОплаты", Форма.СрокОплаты);
	КонецЕсли;
	
	Если Не Объект.ЭтоУниверсальныйДокумент Тогда
		ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт

	Объект = Форма.Объект;

	УстановитьЗаголовокФормы(Форма);
	
	ЗаполнитьДанныеОРасхождениях(Форма);
	
	Форма.ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьПорядокУчетаРасчетов(Форма);
	
	// Счет-фактура создается из формы документа, состояние проведения счета-фактуры запишет документ-основание.
	ОбновлятьСтатусСчетаФактурыПоДокументу = Ложь;
	
	Если Объект.ЭтоУниверсальныйДокумент
	   И ЗначениеЗаполнено(Объект.НомерВходящегоДокумента)
	   И ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента)
	   И РаботаСДоговорамиКонтрагентовБП.ДокументСНДС(Объект.Ссылка) Тогда
		
		ПараметрыСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
		ПараметрыСчетаФактуры.Основание = ТекущийОбъект.Ссылка;
		ПараметрыСчетаФактуры.НомерСчетаФактурыПолученного = Объект.НомерВходящегоДокумента;
		ПараметрыСчетаФактуры.ДатаСчетаФактурыПолученного  = Объект.ДатаВходящегоДокумента;
		ПараметрыСчетаФактуры.Продавцы = Форма.Продавцы;
		ПараметрыСчетаФактуры.КодВидаОперации = Форма.КодВидаОперации;
		ПараметрыСчетаФактуры.НДСПредъявленКВычету = Форма.НДСПредъявленКВычету;
		ПараметрыСчетаФактуры.ЭтоУниверсальныйДокумент = Истина;
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(
			ПараметрыСчетаФактуры,,
			ОбновлятьСтатусСчетаФактурыПоДокументу,
			Форма.ОригиналПолучен);
			
		ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(
			Форма, Результат);
	
	ИначеЕсли ЗначениеЗаполнено(Форма.НомерСчетаФактурыПолученного)
		И ЗначениеЗаполнено(Форма.ДатаСчетаФактурыПолученного) И Форма.ТребуетсяСчетФактура Тогда
		
		Если Форма.ЭтоКомиссияНаЗакупку И Не ЗначениеЗаполнено(Форма.Продавец) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
		ПараметрыСчетаФактуры.Основание = ТекущийОбъект.Ссылка;
		ПараметрыСчетаФактуры.НомерСчетаФактурыПолученного = Форма.НомерСчетаФактурыПолученного;
		ПараметрыСчетаФактуры.ДатаСчетаФактурыПолученного  = Форма.ДатаСчетаФактурыПолученного;
		ПараметрыСчетаФактуры.Продавец = ?(Форма.ЭтоКомиссияНаЗакупку, Форма.Продавец, Неопределено);
		ПараметрыСчетаФактуры.ЭтоУниверсальныйДокумент = Ложь;
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(
			ПараметрыСчетаФактуры,,
			ОбновлятьСтатусСчетаФактурыПоДокументу,
			Форма.ОригиналСчетаФактуры);
		
		ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(
			Форма, Результат);
			
		Если ЗначениеЗаполнено(Форма.СчетФактура) Тогда
			Форма.НомерСчетаФактурыПолученного = "";
			Форма.ДатаСчетаФактурыПолученного  = '00010101';
		КонецЕсли;
	
		Форма.УправлениеФормойНаСервере();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура ДатаПриИзменении(Форма) Экспорт
	
	ДатаОбработатьИзменение(Форма);
	Объект = Форма.Объект;
	
	Если Объект.Свойство("Услуги") Тогда
		РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Объект.Услуги, Объект.Дата, Форма.ТекущаяДатаДокумента);
	КонецЕсли;
	Если Объект.Свойство("АгентскиеУслуги") Тогда
		РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Объект.АгентскиеУслуги, Объект.Дата, Форма.ТекущаяДатаДокумента);
	КонецЕсли;
	
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Форма) Экспорт

	ОрганизацияОбработатьИзменение(Форма);
	ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(Форма);
	Форма.УправлениеФормойНаСервере();

КонецПроцедуры

Процедура СкладПриИзменении(Форма) Экспорт

	СкладОбработатьИзменение(Форма);	
	
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Форма) Экспорт

	КонтрагентОбработатьИзменение(Форма, Новый Массив);
	ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(Форма);
	Форма.УправлениеФормойНаСервере();

КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Форма) Экспорт

	ДоговорКонтрагентаОбработатьИзменение(Форма, Новый Массив);
	ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(Форма);
	Форма.УправлениеФормойНаСервере();

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыТовары

Процедура ТоварыНоменклатураПриИзменении(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению) Экспорт
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
			
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("СпособЗаполненияРозничнойЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения				= СведенияОНоменклатуре.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент					= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена							= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС						= СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.НомерГТД						= СведенияОНоменклатуре.НомерГТД;
	СтрокаТабличнойЧасти.СтранаПроисхождения			= СведенияОНоменклатуре.СтранаПроисхождения;
	СтрокаТабличнойЧасти.МаркируемаяПродукцияГосИС		= СведенияОНоменклатуре.ТабачнаяПродукция;
	СтрокаТабличнойЧасти.ПродукцияМаркируемаяДляГИСМ	= СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ;
	
	ПрименяетсяМалоценка = УчетнаяПолитика.ПрименяетсяФСБУ5_2019(ДанныеОбъекта.Дата);
	Если ПрименяетсяМалоценка
		И СтрокаТабличнойЧасти.Свойство("Малоценка")
		И СтрокаТабличнойЧасти.Свойство("СчетУчета") Тогда
		СтрокаТабличнойЧасти.Малоценка = СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов;
	КонецЕсли;
	
	Если ДанныеОбъекта.ЕстьРасхождения Тогда
		СтрокаТабличнойЧасти.ЦенаПоДокументу			= СведенияОНоменклатуре.Цена;
	КонецЕсли; 
	
	Если СтрокаТабличнойЧасти.ПродукцияМаркируемаяДляГИСМ Тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	Если ДанныеОбъекта.РассчитыватьСуммаВРознице Тогда
		СтрокаТабличнойЧасти.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
	КонецЕсли;
	
	Если ДанныеОбъекта.ЗаполнятьСтавкуНДСВРознице Тогда
		СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДС;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(
		ДанныеОбъекта.ВидОперации, ДанныеОбъекта.ЭтоКомиссия);
		
	ПоступлениеТоваровУслугФормыКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	ПоступлениеТоваровУслугФормыКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, 
		ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.ПрименяютсяСтавки4и2);
	
	Если ДанныеОбъекта.ЕстьРасхождения Тогда
		ПоступлениеТоваровУслугФормыКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,, "ПоДокументу");
		ПоступлениеТоваровУслугФормыКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, 
			ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.ПрименяютсяСтавки4и2, "ПоДокументу");
	КонецЕсли; 
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТовары(Форма, Параметры) Экспорт

	Объект = Форма.Объект;
	
	СтрокиДляДополнительнойОбработки = Обработки.ИзменениеТаблицыТоваров.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	Для каждого СтрокаТаблицы Из СтрокиДляДополнительнойОбработки Цикл
		СтрокаТаблицы.ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(Объект.ВидОперации, Ложь);
	КонецЦикла; 
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.ПоступлениеТоваровУслуг, Истина);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыУслуги

Процедура УслугиНоменклатураПриИзменении(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению) Экспорт
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Услуги",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
		
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;	

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание      = СведенияОНоменклатуре.НаименованиеПолное;
	
	Если ДанныеОбъекта.ЕстьРасхождения Тогда
		СтрокаТабличнойЧасти.ЦенаПоДокументу = СведенияОНоменклатуре.Цена;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.Цена            = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС       = СведенияОНоменклатуре.СтавкаНДС;
	
	СтрокаТабличнойЧасти.ОтражениеВУСН	= ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(
		ДанныеОбъекта.ВидОперации, ДанныеОбъекта.ЭтоКомиссия);
	
	ПоступлениеТоваровУслугФормыКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
	ПоступлениеТоваровУслугФормыКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	Если ДанныеОбъекта.ЕстьРасхождения Тогда
		ПоступлениеТоваровУслугФормыКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1, "ПоДокументу");
		ПоступлениеТоваровУслугФормыКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС,,"ПоДокументу");
	КонецЕсли; 
	
	
КонецПроцедуры

#КонецОбласти 

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМ ДОКУМЕНТА ПоступлениеТоваровУслуг

Функция ДобавитьНоменклатуруНаСервере(Форма, Номенклатура) Экспорт
	Объект = Форма.Объект;

	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("Количество",   ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	ТаблицаТовары.Колонки.Добавить("Цена",         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаТовары.Колонки.Добавить("Сумма",        ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, СуммаВключаетНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("ТипЦен", Объект.ТипЦен);
	Иначе
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Номенклатура, ДанныеОбъекта, Ложь, Истина);
	Иначе
		СведенияОНоменклатуре = Неопределено;
	КонецЕсли;
	
	СтрокаТаблицаТовары = ТаблицаТовары.Добавить();
	
	СтрокаТаблицаТовары.Номенклатура = Номенклатура;
	СтрокаТаблицаТовары.Количество   = 1;
	СтрокаТаблицаТовары.Цена         = ?(СведенияОНоменклатуре = Неопределено, 0, СведенияОНоменклатуре.Цена);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицаТовары);
	
	Возврат Новый Структура("АдресПодобраннойНоменклатурыВХранилище, КоличествоДобавленныхСтрок", ПоместитьВоВременноеХранилище(ТаблицаТовары, Форма.УникальныйИдентификатор), 1);
КонецФункции 

Функция ОбработкаВыбораПодборВставкаИзБуфера(Форма, ВыбранноеЗначение, ИмяТаблицы) Экспорт

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	Объект = Форма.Объект;

	ЭтоКомиссия					= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	НТТ 						= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "НТТ");
	УчетВПродажныхЦенах 		= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "УчетВПродажныхЦенах");
	РассчитыватьСуммаВРознице 	= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");
	РазделениеПоСтавкамВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РазделениеПоСтавкамВРознице");
	ПрименяютсяСтавки4и2 		= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ПрименяютсяСтавки4и2");	
	СпособЗаполненияСтавкиНДС     = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(
		Форма, "СпособЗаполненияСтавкиНДС");
	ВидАгентскогоДоговора = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ВидАгентскогоДоговора");
	УчетАгентскогоНДС = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "УчетАгентскогоНДС");
	ПоставщикРезидентТаможенногоСоюза = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ПоставщикРезидентТаможенногоСоюза");
	
	ДобавленныеИзмененныеСтроки = Новый Структура;
	ДобавленныеИзмененныеСтроки.Вставить("Оборудование", 	Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("Товары", 		Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("Услуги", 		Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("ВозвратнаяТара",Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("Топливо",       Новый Массив);

	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, ПодразделениеОрганизации, Склад,
		|ЭтоКомиссия, ДоговорКонтрагента, СпособЗаполненияСтавкиНДС, ВидАгентскогоДоговора, 
		|УчетАгентскогоНДС, ПоставщикРезидентТаможенногоСоюза");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия                       = ЭтоКомиссия;
	ДанныеОбъекта.СпособЗаполненияСтавкиНДС         = СпособЗаполненияСтавкиНДС;
	ДанныеОбъекта.ВидАгентскогоДоговора             = ВидАгентскогоДоговора;
	ДанныеОбъекта.УчетАгентскогоНДС                 = УчетАгентскогоНДС;
	ДанныеОбъекта.ПоставщикРезидентТаможенногоСоюза = ПоставщикРезидентТаможенногоСоюза;
	СтавкаБезНДС = Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку ИЛИ Объект.НДСНеВыделять;
	
	Если СтавкаБезНДС Тогда 
		ДанныеОбъекта.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС)
	КонецЕсли;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		Если ИмяТаблицы = "ВозвратнаяТара" Тогда
			ЦенаВключаетНДС = Истина;
		Иначе
			ЦенаВключаетНДС = Объект.СуммаВключаетНДС;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// При копировании всегда добавляем новые строки, если это вставка из буфера
		СтрокаТабличнойЧасти  = Неопределено;
		Если Не ЭтоВставкаИзБуфера Тогда
			
			СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
			СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(Форма, ИмяТаблицы, СтруктураОтбора);
			
		КонецЕсли;
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Оборудование" Тогда	
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
				
			ИначеЕсли ИмяТаблицы = "Товары" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				// Рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если ЭтоВставкаИзБуфера
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда
				
				Если СведенияОНоменклатуре.Услуга Тогда
					
					Если ИмяТаблицы = "Товары" ИЛИ ИмяТаблицы = "Оборудование" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				Иначе
					
					Если ИмяТаблицы = "Услуги" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяТаблицы = "Оборудование" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.ЕдиницаИзмерения		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения),
					СтрокаТабличнойЧасти.ЕдиницаИзмерения, СведенияОНоменклатуре.ЕдиницаИзмерения);
				СтрокаТабличнойЧасти.Коэффициент			= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент),
					СтрокаТабличнойЧасти.Коэффициент, СведенияОНоменклатуре.Коэффициент);
				СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
				СтрокаТабличнойЧасти.НомерГТД				= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД),
					СтрокаТабличнойЧасти.НомерГТД, СведенияОНоменклатуре.НомерГТД);
				СтрокаТабличнойЧасти.СтранаПроисхождения	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения),
					СтрокаТабличнойЧасти.СтранаПроисхождения, СведенияОНоменклатуре.СтранаПроисхождения);
					
					
				// Рассчитываем реквизиты табличной части
				Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС ИЛИ ЭтоВставкаИзБуфера Тогда
					СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "Товары" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.ЕдиницаИзмерения		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения),
					СтрокаТабличнойЧасти.ЕдиницаИзмерения, СведенияОНоменклатуре.ЕдиницаИзмерения);
				СтрокаТабличнойЧасти.Коэффициент			= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент),
					СтрокаТабличнойЧасти.Коэффициент, СведенияОНоменклатуре.Коэффициент);
				СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
				СтрокаТабличнойЧасти.НомерГТД				= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД),
					СтрокаТабличнойЧасти.НомерГТД, СведенияОНоменклатуре.НомерГТД);
				СтрокаТабличнойЧасти.СтранаПроисхождения	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения),
					СтрокаТабличнойЧасти.СтранаПроисхождения, СведенияОНоменклатуре.СтранаПроисхождения);
			
				Если РассчитыватьСуммаВРознице Тогда
					СтрокаТабличнойЧасти.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
				КонецЕсли;
				
				Если НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице Тогда
					СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДС;
				КонецЕсли;
				
				СтрокаТабличнойЧасти.ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(
					Объект.ВидОперации, ЭтоКомиссия);
				
				// Рассчитываем реквизиты табличной части
				Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС ИЛИ ЭтоВставкаИзБуфера Тогда
					СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС, ПрименяютсяСтавки4и2));
						
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.Содержание	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Содержание),
					СтрокаТабличнойЧасти.Содержание, СведенияОНоменклатуре.НаименованиеПолное);
				СтрокаТабличнойЧасти.СтавкаНДС	= СведенияОНоменклатуре.СтавкаНДС;
				
				
				// Рассчитываем реквизиты табличной части
				Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС ИЛИ ЭтоВставкаИзБуфера Тогда
					
					СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
							СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
							УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,
						?(ЭтоВставкаИзБуфера, 1, 0));
						
				КонецЕсли;
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
				СтрокаТабличнойЧасти.ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(
					Объект.ВидОперации, ЭтоКомиссия);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				Если НЕ ЦенаВключаетНДС ИЛИ ЭтоВставкаИзБуфера Тогда
					СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Истина,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС, ПрименяютсяСтавки4и2));
					
					// Рассчитать реквизиты табличной части
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Запоминаем 
		ДобавленныеИзмененныеСтроки[ИмяТаблицы].Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла; // По ТаблицаТоваров
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.ПоступлениеТоваровУслуг);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;
	
	Возврат ДобавленныеИзмененныеСтроки;

КонецФункции

Функция ДоступноСозданиеОсновногоДоговораПоВидуОперации(ВидОперации) Экспорт
	ДоступныеВидыОпераций = Новый Массив;
	ДоступныеВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары);
	ДоступныеВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги);
	ДоступныеВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства);
	ДоступныеВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков);
	ДоступныеВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
	
	Возврат ДоступныеВидыОпераций.Найти(ВидОперации) <> Неопределено;
КонецФункции

Процедура ПараметрыВыбораПоВидуОперации(НовыйМассивПараметров, ВидОперации) Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга Тогда
		// Для услуг не позволяем выбрать договор налогового агента "Реализаци товаров (п.8 ст.161 НК РФ)"
		МассивВидовНалоговогоАгента = Новый Массив;
		МассивВидовНалоговогоАгента.Добавить(Перечисления.ВидыАгентскихДоговоров.ПустаяСсылка());
		МассивВидовНалоговогоАгента.Добавить(Перечисления.ВидыАгентскихДоговоров.Аренда);
		МассивВидовНалоговогоАгента.Добавить(Перечисления.ВидыАгентскихДоговоров.Нерезидент);
		МассивВидовНалоговогоАгента.Добавить(Перечисления.ВидыАгентскихДоговоров.НерезидентЭлектронныеУслуги);
		МассивВидовНалоговогоАгента.Добавить(Перечисления.ВидыАгентскихДоговоров.РеализацияИмущества);
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидАгентскогоДоговора", 
		Новый ФиксированныйМассив(МассивВидовНалоговогоАгента)));
	КонецЕсли;

КонецПроцедуры

Процедура СвернутьТовары(Форма) Экспорт

	Объект = Форма.Объект;

	ТаблицаТоваров = Объект.Товары.Выгрузить();
	ТаблицаТоваров.Свернуть("СтавкаНДС, ОтражениеВУСН, СтавкаНДСВРознице", "Сумма, СуммаНДС, Всего, СуммаВРознице");
	Объект.Товары.Загрузить(ТаблицаТоваров);
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ТоварыСвернуты", Истина);

КонецПроцедуры

Процедура ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма) Экспорт
	
	Объект = Форма.Объект;
	УчетВПродажныхЦенах = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "УчетВПродажныхЦенах");

	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада");
	Если ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
		И УчетВПродажныхЦенах
		И (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование)
		И Форма.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		РассчитыватьСуммаВРознице = Истина;
	Иначе
		РассчитыватьСуммаВРознице = Ложь;
	КонецЕсли;

	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице", РассчитыватьСуммаВРознице);
	
	НТТ = ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "НТТ", НТТ);
	
КонецПроцедуры

Процедура ЗаполнитьРассчитатьСуммы(Форма, 
					Знач ВалютаДоИзменения, 
					КурсДоИзменения, 
					КратностьДоИзменения, 
					ПерезаполнитьЦены = Ложь, 
					ПересчитатьЦены = Ложь, 
					ПересчитатьНДС = Ложь,
					ПрименяютсяСтавки4и2 = Ложь) Экспорт

	Объект = Форма.Объект;

	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда 
		СписокНоменклатуры	=  Новый Массив;
		
		Если Объект.Свойство("Товары") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
				ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура"), Истина);
		КонецЕсли;
		
		Если Объект.Свойство("Услуги") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
				ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура"), Истина);
		КонецЕсли;
		
		Если Объект.Свойство("ВозвратнаяТара") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
				ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"), Истина);
		КонецЕсли;
		
		Если Объект.Свойство("АгентскиеУслуги") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
				ОбщегоНазначения.ВыгрузитьКолонку(Объект.АгентскиеУслуги, "Номенклатура"), Истина);
		КонецЕсли;
		
		Если Объект.Свойство("Оборудование") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
				ОбщегоНазначения.ВыгрузитьКолонку(Объект.Оборудование, "Номенклатура"), Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
				СписокНоменклатуры, Объект.ТипЦен, Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли ПересчитатьЦены Тогда

	Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
		СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
	Иначе
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
	КонецЕсли;

	КонецЕсли;
	
	Если Объект.Свойство("Товары") Тогда
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
				СтруктураКурса,  ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, ПрименяютсяСтавки4и2, Объект.НДСНеВыделять);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("ОбъектыСтроительства") Тогда
		Для Каждого СтрокаТаблицы Из Объект.ОбъектыСтроительства Цикл
			ЗаполнитьРассчитатьСуммыВСтрокеПоОбъектамСтроительства(Форма, СтрокаТаблицы, ВалютаДоИзменения,
				СтруктураКурса, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, ПрименяютсяСтавки4и2, Объект.НДСНеВыделять);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("Оборудование") Тогда
		Для Каждого СтрокаТаблицы Из Объект.Оборудование Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
				СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, ПрименяютсяСтавки4и2, Объект.НДСНеВыделять);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("ВозвратнаяТара") Тогда
		Для Каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
				СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 0, ПрименяютсяСтавки4и2, Объект.НДСНеВыделять);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("Услуги") Тогда
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
				СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, ПрименяютсяСтавки4и2, Объект.НДСНеВыделять);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("АгентскиеУслуги") Тогда
		Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
				СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, ПрименяютсяСтавки4и2, Объект.НДСНеВыделять);
		КонецЦикла;	
	КонецЕсли;
	
	Если Объект.Свойство("Топливо") Тогда
		Для Каждого СтрокаТаблицы Из Объект.Топливо Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
				СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1,
				ПрименяютсяСтавки4и2, Объект.НДСНеВыделять);
		КонецЦикла;
	КонецЕсли;
	
	Форма.ЗаполнитьДобавленныеКолонкиТаблиц();
	Форма.ОбновитьИтогиНаСервере();

КонецПроцедуры

Процедура УстановитьПорядокУчетаРасчетов(Форма) Экспорт
	
	ОсобенностиУчетаРасчетов = Документы.ПоступлениеТоваровУслуг.ОсобенностиУчетаРасчетов(
		Форма.Объект.ВидОперации,
		Форма.Объект.ДоговорКонтрагента);
		
	УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов(Форма, ОсобенностиУчетаРасчетов);

КонецПроцедуры

Процедура УстановитьПараметрыПоДоговору(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, 
			"ВидДоговора, ВалютаВзаиморасчетов, УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2, ВидАгентскогоДоговора, ЭлектронныеУслуги");
		Форма.ВидДоговора          = РеквизитыДоговора.ВидДоговора;
		Форма.ЭтоКомиссия          = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		Форма.ЭтоКомиссияНаЗакупку = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
		Форма.УчетАгентскогоНДС    = РеквизитыДоговора.УчетАгентскогоНДС;
		Форма.ВидАгентскогоДоговора = РеквизитыДоговора.ВидАгентскогоДоговора;
		Форма.ВалютаВзаиморасчетов  = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Форма.РасчетыВУЕ            = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
		Форма.ПрименяютсяСтавки4и2  = РеквизитыДоговора.НДСПоСтавкам4и2;
		Форма.ЭлектронныеУслуги     = РеквизитыДоговора.ЭлектронныеУслуги;
	Иначе
		Форма.ВидДоговора          = Неопределено;
		Форма.ЭтоКомиссияНаЗакупку = Ложь;
		Форма.УчетАгентскогоНДС    = Ложь;
		Форма.РасчетыВУЕ           = Ложь;
		Форма.ПрименяютсяСтавки4и2 = Ложь;
		Форма.ЭлектронныеУслуги    = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПараметрыВыбора(Форма) Экспорт

	МассивВидовДоговоров = Новый ФиксированныйМассив(Форма.ПолучитьМассивВидовДоговоров());

	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров));

	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Форма.Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;

КонецПроцедуры

Процедура ОбработкаВыбораПорядокУчетаРасчетов(Форма, ВыбранноеЗначение) Экспорт

	УчетВзаиморасчетовФормы.ОбработкаВыбораПорядокУчетаРасчетов(Форма, ВыбранноеЗначение);
	УстановитьПорядокУчетаРасчетов(Форма);

КонецПроцедуры

Процедура ОбработкаЗаполненияПоСчету(Форма, ВыбранноеЗначение, ТабличнаяЧасть) Экспорт

	Объект = Форма.Объект;

	// Заполняем полностью весь документ по счету на оплату
	РеквизитыСчетаНаОплату = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВыбранноеЗначение, "Контрагент, ДоговорКонтрагента");

	Объект.СчетНаОплатуПоставщика 	= ВыбранноеЗначение;
	Объект.Контрагент 				= РеквизитыСчетаНаОплату.Контрагент;
	Объект.ДоговорКонтрагента 		= РеквизитыСчетаНаОплату.ДоговорКонтрагента;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("СчетНаОплатуПоставщика"); // В результате в обработчиках изменения контрагента и договора счета учета заполнены не будут
	
	КонтрагентОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
	ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);

	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоСчету(ТабличнаяЧасть, ВыбранноеЗначение); // Счета учета заполняются здесь
	Форма.ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

КонецПроцедуры

Процедура УстановитьЗаголовокФормы(Форма) Экспорт
	
	Объект = Форма.Объект;

	ТекстЗаголовка = НСтр("ru = 'Поступление'");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' товаров: Накладная, УПД'");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' услуг: Акт, УПД'");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' основных средств'");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков Тогда
		ТекстЗаголовка = НСтр("ru = 'Приобретение земельных участков'");
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + ": " + Строка(Объект.ВидОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Форма.Заголовок = ТекстЗаголовка;

КонецПроцедуры

Процедура ЗаполнитьДанныеОРасхождениях(Форма)
	
	
	Объект = Форма.Объект;
	
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
		И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
		И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
	
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктОРасхождениях.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_АктОРасхождениях
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктОРасхождениях КАК АктОРасхождениях
	|		ПО ПоступлениеТоваровУслуг.Ссылка = АктОРасхождениях.ДокументПоступления
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
	|	И АктОРасхождениях.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийАктОРасхождениях.РасхожденияПриПриемке)
	|	И АктОРасхождениях.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АктОРасхождениях.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_АктОРасхождениях КАК ВТ_АктОРасхождениях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктОРасхожденияхТовары.КоличествоПоДокументу КАК КоличествоПоДокументу,
	|	АктОРасхожденияхТовары.ЦенаПоДокументу КАК ЦенаПоДокументу,
	|	АктОРасхожденияхТовары.СуммаПоДокументу КАК СуммаПоДокументу,
	|	АктОРасхожденияхТовары.СуммаНДСПоДокументу КАК СуммаНДСПоДокументу,
	|	АктОРасхожденияхТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	""Товары"" КАК ИмяТабличнойЧасти
	|ИЗ
	|	ВТ_АктОРасхождениях КАК АктОРасхождениях
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктОРасхождениях.Товары КАК АктОРасхожденияхТовары
	|		ПО АктОРасхождениях.Ссылка = АктОРасхожденияхТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктОРасхожденияхУслуги.КоличествоПоДокументу,
	|	АктОРасхожденияхУслуги.ЦенаПоДокументу,
	|	АктОРасхожденияхУслуги.СуммаПоДокументу,
	|	АктОРасхожденияхУслуги.СуммаНДСПоДокументу,
	|	АктОРасхожденияхУслуги.ИдентификаторСтроки,
	|	""Услуги""
	|ИЗ
	|	ВТ_АктОРасхождениях КАК АктОРасхождениях
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктОРасхождениях.Услуги КАК АктОРасхожденияхУслуги
	|		ПО АктОРасхождениях.Ссылка = АктОРасхожденияхУслуги.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктОРасхожденияхАгентскиеУслуги.КоличествоПоДокументу,
	|	АктОРасхожденияхАгентскиеУслуги.ЦенаПоДокументу,
	|	АктОРасхожденияхАгентскиеУслуги.СуммаПоДокументу,
	|	АктОРасхожденияхАгентскиеУслуги.СуммаНДСПоДокументу,
	|	АктОРасхожденияхАгентскиеУслуги.ИдентификаторСтроки,
	|	""АгентскиеУслуги""
	|ИЗ
	|	ВТ_АктОРасхождениях КАК АктОРасхождениях
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктОРасхождениях.АгентскиеУслуги КАК АктОРасхожденияхАгентскиеУслуги
	|		ПО АктОРасхождениях.Ссылка = АктОРасхожденияхАгентскиеУслуги.Ссылка
	|ИТОГИ ПО
	|	ИмяТабличнойЧасти";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = РезультатЗапроса[1].Выбрать();
	
	ЕстьРасхождения  = ВыборкаПоДокументам.Следующий();
	
	Если Объект.ЕстьРасхождения <> ЕстьРасхождения Тогда
		Форма.Модифицированность = Истина;
		Объект.ЕстьРасхождения   = ЕстьРасхождения;
	КонецЕсли; 
	
	Если ЕстьРасхождения Тогда
		Форма.АктОРасхожденияхСсылка = ВыборкаПоДокументам.Ссылка;
		
		ВыборкаПоТабличнымЧастям = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоТабличнымЧастям.Следующий() Цикл
			// При открытии из простых форм у объекта может не быть определенной табличной части
			Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ВыборкаПоТабличнымЧастям.ИмяТабличнойЧасти) Тогда
				Продолжить;
			КонецЕсли; 
			
			ТабличнаяЧасть = Объект[ВыборкаПоТабличнымЧастям.ИмяТабличнойЧасти];
			
			ВыборкаПоСтрокам = ВыборкаПоТабличнымЧастям.Выбрать();
			Пока ВыборкаПоСтрокам.Следующий() Цикл
				НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ВыборкаПоСтрокам.ИдентификаторСтроки));
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаПоИдентификатору = НайденныеСтроки[0];
					
					ЗаполнитьЗначенияСвойств(СтрокаПоИдентификатору, ВыборкаПоСтрокам, , "ИдентификаторСтроки");
					
					СтрокаПоИдентификатору.КоличествоОтклонение = СтрокаПоИдентификатору.Количество - СтрокаПоИдентификатору.КоличествоПоДокументу;
					СтрокаПоИдентификатору.ЦенаОтклонение       = СтрокаПоИдентификатору.Цена       - СтрокаПоИдентификатору.ЦенаПоДокументу;
					СтрокаПоИдентификатору.СуммаОтклонение      = СтрокаПоИдентификатору.Сумма      - СтрокаПоИдентификатору.СуммаПоДокументу;
					СтрокаПоИдентификатору.СуммаНДСОтклонение   = СтрокаПоИдентификатору.СуммаНДС   - СтрокаПоИдентификатору.СуммаНДСПоДокументу;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла; 
	Иначе
		ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьДобавленныеКолонкиРасхождения(Форма);
	КонецЕсли; 
КонецПроцедуры

#Область УсловноеОформление

Процедура УстановитьУсловноеОформлениеТовары(Форма) Экспорт

	// ЕстьРасхождения
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппаТоварыЗаголовкиСтрок");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНадписьПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНадписьПоФакту");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНадписьОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоОтклонение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЕстьРасхождения", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНадписьОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоОтклонение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.КоличествоОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЦенаОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СуммаОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СуммаНДСОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

 
Процедура УстановитьУсловноеОформлениеУслуги(Форма) Экспорт

	// ЕстьРасхождения
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппаУслугиЗаголовкиСтрок");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНадписьПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНадписьПоФакту");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиВсегоПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНадписьОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиВсегоОтклонение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЕстьРасхождения", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНадписьОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиВсегоОтклонение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.КоличествоОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ЦенаОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СуммаОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СуммаНДСОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеАгентскиеУслуги(Форма) Экспорт

	// ЕстьРасхождения
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппаАгентскиеУслугиЗаголовкиСтрок");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиНадписьПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиНадписьПоФакту");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДСПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиВсегоПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиНадписьОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДСОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиВсегоОтклонение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЕстьРасхождения", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиНадписьОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДСОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиВсегоОтклонение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.КоличествоОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.ЦенаОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.СуммаОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.СуммаНДСОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

Процедура ДобавитьОформляемоеПолеРасхождения(Поля, ИмяПоля) Экспорт

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Поля, ИмяПоля);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Поля, ИмяПоля+"ПоДокументу");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Поля, ИмяПоля+"Отклонение");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРеквизитыДокумента(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НомерВходящегоДокумента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЭтоУниверсальныйДокумент", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НомерВходящегоДокумента", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДатаВходящегоДокумента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЭтоУниверсальныйДокумент", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДатаВходящегоДокумента", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
		
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НомерВходящегоДокумента");
	
	ГруппаОтбораИли = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
			"Объект.ЭтоУниверсальныйДокумент", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
			"ОтметкаНезаполненногоНомерВходящегоДокумента", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
			"Объект.НомерВходящегоДокумента", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДатаВходящегоДокумента");
	
	ГруппаОтбораИли = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
			"Объект.ЭтоУниверсальныйДокумент", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
			"ОтметкаНезаполненногоДатаВходящегоДокумента", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
			"Объект.ДатаВходящегоДокумента", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры
 
#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ВидОперацииОбработатьИзменение(Форма)
	
	Объект = Форма.Объект;
	ЭтоКомиссия = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("ВидОперации");
	
	МассивВидовДоговоров = Форма.ПолучитьМассивВидовДоговоров();

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если МассивВидовДоговоров.Найти(Форма.ВидДоговора) = Неопределено Тогда
			Объект.ДоговорКонтрагента = Неопределено;
			Форма.ВидДоговора = МассивВидовДоговоров[0];
		КонецЕсли;
	КонецЕсли;

	Если Объект.Свойство("ВозвратнаяТара") Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга Тогда
			Если Объект.ВозвратнаяТара.Количество() > 0 Тогда
				Объект.ВозвратнаяТара.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Объект.Свойство("Товары") Тогда
		Если ЭтоКомиссия ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			// Очистим реквизиты счетов в табличных частях.
			Для каждого Строка Из Объект.Товары Цикл
				Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
			Объект.Контрагент, Объект.Организация, МассивВидовДоговоров);
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
		ЭтоКомиссия = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "ВидОперации");
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", 
		Новый ФиксированныйМассив(МассивВидовДоговоров)));
		
	ПараметрыВыбораПоВидуОперации(НовыйМассивПараметров, Объект.ВидОперации);
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Форма.Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;
	
	Форма.УстановитьПараметрыВыбораДляСчетовУчета();
	
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(Форма);
	ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(Форма);
	
КонецПроцедуры

Процедура ДатаОбработатьИзменение(Форма)
	
	Объект = Форма.Объект;

	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.УстановитьФункциональныеОпцииФормы();
	
	ПересчитатьЦены   = Ложь;
	ПерезаполнитьЦены = Ложь;
	
	НовыйТипЦен = Объект.ТипЦен;
	ВалютаДоИзменения 	= Объект.ВалютаДокумента;
	КурсДоИзменения 	= Объект.КурсВзаиморасчетов;
	КратностьДоИзменения= Объект.КратностьВзаиморасчетов;

	ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма);
	ТоварыСвернуты 	= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ТоварыСвернуты");
	НТТ 			= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "НТТ");
	ПлательщикНДС	= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ПлательщикНДС");
	
	РассчитыватьСуммаВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");
	ТоварыСвернуты	= ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ТоварыСвернуты", ТоварыСвернуты);
	
	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	НДСНеВыделять = Не УчетНДСБП.ВыделятьНДСприПоступленииТоваровУслуг(Объект.Организация, Объект.Дата);
	Если Объект.НДСНеВыделять <> НДСНеВыделять Тогда
		Объект.НДСНеВыделять = НДСНеВыделять;
		// Если НДС сверху, то при установке "НДС не выделять" надо включить его в стоимость.
		ПересчитатьНДС = НЕ Объект.СуммаВключаетНДС;
		Объект.СуммаВключаетНДС = Истина;
		
		ЗаполнитьРассчитатьСуммы(Форма, Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, , , ПересчитатьНДС);
	КонецЕсли;
	
	// При изменении даты предложить перезаполнить курс валюты

	Если Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		СтарыйКурс      = Объект.КурсВзаиморасчетов;
		СтараяКратность = Объект.КратностьВзаиморасчетов;
		ПересчитатьНДС    = Ложь;

		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

		Если СтарыйКурс <> Объект.КурсВзаиморасчетов ИЛИ СтараяКратность <> Объект.КратностьВзаиморасчетов Тогда
			ПересчитатьЦены = ЕстьСтрокиВТабличныхЧастях(Форма);
			ЗаполнитьРассчитатьСуммы(Форма, ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
		КонецЕсли;
	КонецЕсли;
	
	Форма.ОбновитьУсловноеОформлениеНаСервере();
	
КонецПроцедуры

Процедура ОрганизацияОбработатьИзменение(Форма)

	Объект = Форма.Объект;

	Форма.УстановитьФункциональныеОпцииФормы();
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("Организация");
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	Если Объект.Свойство("Услуги") Тогда
		Для каждого СтрокаУслуги Из Объект.Услуги Цикл
			ПодразделениеУслуг = Объект.ПодразделениеОрганизации;
			Если НЕ СтрокаУслуги.СчетЗатрат.УчетПоПодразделениям Тогда
				СтрокаУслуги.ПодразделениеЗатрат = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаУслуги.ПодразделениеЗатрат)
				И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(СтрокаУслуги.ПодразделениеЗатрат, Объект.Организация) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаУслуги.ПодразделениеЗатрат = Объект.ПодразделениеОрганизации;
		КонецЦикла;
	КонецЕсли;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма);
	
	ТоварыСвернуты 			  = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ТоварыСвернуты");
	НТТ 					  = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "НТТ");
	РассчитыватьСуммаВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");
	
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ТоварыСвернуты", ТоварыСвернуты);
	
	Объект.НДСВключенВСтоимость	= НЕ Форма.ПлательщикНДС;
	
	НДСНеВыделять = Не УчетНДСБП.ВыделятьНДСприПоступленииТоваровУслуг(Объект.Организация, Объект.Дата);
	Если Объект.НДСНеВыделять <> НДСНеВыделять Тогда
		Объект.НДСНеВыделять = НДСНеВыделять;
		ЗаполнитьРассчитатьСуммы(Форма, Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, , , Истина);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "Организация");

	Форма.ОбновитьУсловноеОформлениеНаСервере();

КонецПроцедуры

Процедура СкладОбработатьИзменение(Форма)
	
	Объект = Форма.Объект;

	ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма);
	
	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	
	ЗаполнитьСчетаУчета(Форма, Новый Массив, "Склад");
	
КонецПроцедуры

Процедура КонтрагентОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета)

	Объект = Форма.Объект;

	ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	
	МассивВидовДоговоров = Форма.ПолучитьМассивВидовДоговоров();

	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
		Объект.Контрагент, Объект.Организация, МассивВидовДоговоров);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
	ИначеЕсли НЕ Форма.ВестиУчетПоДоговорам Тогда
		ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(Форма);
	ИначеЕсли ДоступноСозданиеОсновногоДоговораПоВидуОперации(Объект.ВидОперации) Тогда
		Форма.ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "Контрагент");
	
	Форма.ПоставщикРезидентТаможенногоСоюза = УчетНДС.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент);

КонецПроцедуры

Процедура ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета)
	
	Объект = Форма.Объект;
	
	Форма.АвторасчетСрокаОплаты = Истина;
	
	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");

	ВалютаДоИзменения    = Объект.ВалютаДокумента;
	КурсДоИзменения      = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	
	ПерезаполнитьЦены = Ложь;
	ПересчитатьЦены   = Ложь;
	ПересчитатьНДС    = Ложь;
	
	ДоговорУказан 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента,
		"ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2, ВидАгентскогоДоговора, ЭлектронныеУслуги");
	
	ЭтоКомиссия                 = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ЭтоКомиссия", ЭтоКомиссия);
	Форма.ВидАгентскогоДоговора = РеквизитыДоговора.ВидАгентскогоДоговора;
	Форма.ЭтоКомиссияНаЗакупку  = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
	Форма.УчетАгентскогоНДС     = ДоговорУказан И РеквизитыДоговора.УчетАгентскогоНДС;
	Форма.ПрименяютсяСтавки4и2  = ДоговорУказан И РеквизитыДоговора.НДСПоСтавкам4и2;
	Форма.РасчетыВУЕ            = ДоговорУказан И РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
	Форма.ЭлектронныеУслуги     = ДоговорУказан И РеквизитыДоговора.ЭлектронныеУслуги;
	
	ВедетсяУчетНДСПоФЗ335 = УчетНДС.ВедетсяУчетНДСПоФЗ335(Объект.Дата);
	НалоговыйАгентРеализацияТоваров = ДоговорУказан И РеквизитыДоговора.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров;
	
	Если ДоговорУказан Тогда
		
		ПараметрыДоговора               = РаботаСДоговорамиКонтрагентовБП.ПараметрыДоговора(Объект.ДоговорКонтрагента);
		Форма.СпособЗаполненияСтавкиНДС = ПараметрыДоговора.СпособЗаполненияСтавкиНДС;
		Объект.ЭтоУниверсальныйДокумент                   = ПараметрыДоговора.ЭтоУниверсальныйДокумент;
		ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Объект);

		Форма.ВидДоговора           = РеквизитыДоговора.ВидДоговора;
		Форма.ВалютаВзаиморасчетов  = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента 		= Форма.ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
		Форма.ПредлагатьНовыйДоговор = Ложь;
	Иначе
		Объект.ВалютаДокумента = Форма.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	НовыйТипЦен = Объект.ТипЦен;
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		НовыйТипЦен = РеквизитыДоговора.ТипЦен;
	КонецЕсли;
	
	ЕстьСтроки = ЕстьСтрокиВТабличныхЧастях(Форма);
	
	Если Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ КурсДоИзменения <> Объект.КурсВзаиморасчетов 
		ИЛИ Объект.ТипЦен <> НовыйТипЦен Тогда
		ПересчитатьЦены = ЕстьСтроки;
	КонецЕсли;
	
	ПрежнийСуммаВключаетНДС = Объект.СуммаВключаетНДС;
	Если ДоговорУказан И ЗначениеЗаполнено(НовыйТипЦен) Тогда
		Объект.ТипЦен 			= НовыйТипЦен;
		Объект.СуммаВключаетНДС = НовыйТипЦен.ЦенаВключаетНДС;
		ПересчитатьНДС 			= Объект.СуммаВключаетНДС <> ПрежнийСуммаВключаетНДС;
	КонецЕсли;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма);
	
	ТоварыСвернуты			  = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ТоварыСвернуты");
	НТТ 					  = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "НТТ");
	РассчитыватьСуммаВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");
	
	Если НТТ И РассчитыватьСуммаВРознице И НЕ ТоварыСвернуты И Объект.Свойство("Товары") Тогда
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл
			Если СтрокаТаблицы.ЦенаВРознице = 0 Тогда
				СтрокаТаблицы.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТаблицы.Номенклатура,
					Объект.Склад.ТипЦенРозничнойТорговли, Объект.Дата, Форма.ВалютаРегламентированногоУчета, 1, 1);
				СтрокаТаблицы.СуммаВРознице = СтрокаТаблицы.Количество * СтрокаТаблицы.ЦенаВРознице;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ТоварыСвернуты", ТоварыСвернуты);
	
	Если ДоговорУказан Тогда
		Форма.УстановитьПараметрыВыбораДляСчетовУчета();
	КонецЕсли;
	
	Если Объект.ЗачетАвансов.Количество() > 0 Тогда
		Объект.ЗачетАвансов.Очистить();
	КонецЕсли;
	
	Если НалоговыйАгентРеализацияТоваров И ВедетсяУчетНДСПоФЗ335 Тогда
		
		Если Объект.Свойство("Услуги") Тогда
			Если Объект.Услуги.Количество() > 0 Тогда
				Объект.Услуги.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Свойство("АгентскиеУслуги") Тогда
			Если Объект.АгентскиеУслуги.Количество() > 0 Тогда
				Объект.АгентскиеУслуги.Очистить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "ДоговорКонтрагента");
	
	Если ЕстьСтроки И (ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(Форма, ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	КонецЕсли;
	
	ЗаполнитьОтражениеВУСНВТабличнойЧасти(Форма);
	
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(Форма);
	
	Форма.ОбновитьУсловноеОформлениеНаСервере();
	
КонецПроцедуры

Процедура ЗаполнитьРассчитатьСуммыВСтроке(Форма, 
					СтрокаТаблицы, 
					ТаблицаЦенНоменклатуры, 
					ВалютаПередИзменением, 
					СтруктураКурса, 
					ПерезаполнитьЦены, 
					ПересчитатьЦены, 
					ПересчитатьНДС,  
					ЕстьНДС, 
					ЗначениеПустогоКоличества,
					ПрименяютсяСтавки4и2,
					НДСНеВыделять)

	Объект = Форма.Объект;

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока = ТаблицаЦенНоменклатуры.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
			Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
				ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
			Иначе
				ЦенаВключаетНДС = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);

		Иначе
			Цена = СтрокаТаблицы.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		
		Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС,
			Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
			

		Если СтрокаТаблицы.Цена <> Цена Тогда
			СтрокаТаблицы.Цена = Цена;
			СтрокаТаблицы.Сумма = Цена * ?(СтрокаТаблицы.Количество = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);
		КонецЕсли;

		Если НДСНеВыделять Тогда
			СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
			
	ИначеЕсли СтрокаТаблицы.Цена <> Цена Тогда
		
		СтрокаТаблицы.Цена = Цена;
		СтрокаТаблицы.Сумма = Цена * ?(СтрокаТаблицы.Количество =0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьРассчитатьСуммыВСтрокеПоОбъектамСтроительства(Форма, 
					СтрокаТаблицы, 
					ВалютаПередИзменением, 
					СтруктураКурса,
					ПересчитатьЦены,
					ПересчитатьНДС,
					ЕстьНДС, 
					ЗначениеПустогоКоличества,
					ПрименяютсяСтавки4и2,
					НДСНеВыделять)

	Объект = Форма.Объект;

	Если ПересчитатьЦены Тогда
		Сумма = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма,
			ВалютаПередИзменением,
			Объект.ВалютаДокумента,
			СтруктураКурса.Курс,
			Объект.КурсВзаиморасчетов,
			СтруктураКурса.Кратность,
			Объект.КратностьВзаиморасчетов);
	Иначе
		Сумма = СтрокаТаблицы.Сумма;
	КонецЕсли;

	// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
	ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);

	Если ЕстьНДС Тогда
		
		Если НДСНеВыделять Тогда
			СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Сумма,
			ЦенаВключаетНДС,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));

		СтрокаТаблицы.Сумма = Сумма;

		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
	Иначе
		СтрокаТаблицы.Сумма = Сумма;
	КонецЕсли;

КонецПроцедуры

Функция ЕстьСтрокиВТабличныхЧастях(Форма)

	Объект = Форма.Объект;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга Тогда
		Возврат (Объект.Свойство("Товары") И Объект.Товары.Количество() > 0 
			ИЛИ Объект.Свойство("Услуги") И Объект.Услуги.Количество() > 0 
			ИЛИ Объект.Свойство("ВозвратнаяТара") И Объект.ВозвратнаяТара.Количество() > 0 
			ИЛИ Объект.Свойство("АгентскиеУслуги") И Объект.АгентскиеУслуги.Количество() > 0);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Возврат (Объект.Товары.Количество() > 0);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		Возврат (Объект.Оборудование.Количество() > 0 ИЛИ Объект.Товары.Количество() > 0 
			ИЛИ Объект.Услуги.Количество() > 0 ИЛИ Объект.ВозвратнаяТара.Количество() > 0);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		Возврат (Объект.ОбъектыСтроительства.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0);

	Иначе
		Возврат Ложь;

	КонецЕсли;

КонецФункции

Процедура ЗаполнитьОтражениеВУСНВТабличнойЧасти(Форма)

	Объект = Форма.Объект;

	Если НЕ Объект.Свойство("Товары") Тогда
		Возврат;
	КонецЕсли;

	ЭтоКомиссия = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");

	ОтражениеВУСН	= ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(Объект.ВидОперации, ЭтоКомиссия);
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.ОтражениеВУСН	= ОтражениеВУСН;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтрокуТабличнойЧасти(Форма, ИмяТабличнойЧасти, СтруктураОтбора)

	Объект = Форма.Объект;

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

Процедура ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗаполнения = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Форма.Объект);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Для Каждого ИмяТабличнойЧасти Из СчетаУчетаВДокументахКлиентСервер.ТабличныеЧастиКЗаполнению(ПараметрыЗаполнения.КЗаполнению) Цикл
		Форма.ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТабличнойЧасти);
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработкаВыбораУниверсальныйПередаточныйДокумент(Форма, ВыбранноеЗначение) Экспорт

	ЗаполнитьЗначенияСвойств(Форма, ВыбранноеЗначение, "КодВидаОперации,НДСПредъявленКВычету");
	Форма.Продавцы.Очистить();
	
	ТаблицаПродавцы = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаПродавцы);
	Форма.Продавцы.Загрузить(ТаблицаПродавцы);
	
	Форма.Модифицированность = Истина;

КонецПроцедуры

Процедура ЗаполнитьРеквизитыУПД(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Форма.СчетФактура) Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Форма.СчетФактура, "КодВидаОперации,НДСПредъявленКВычету,Продавцы");
		ЗаполнитьЗначенияСвойств(Форма, РеквизитыОбъекта, "КодВидаОперации,НДСПредъявленКВычету");
		
		Продавцы = РеквизитыОбъекта.Продавцы.Выгрузить();
		Форма.Продавцы.Очистить();
		
		Для Каждого СтрокаПродавцы Из Продавцы Цикл
			НоваяСтрока = Форма.Продавцы.Добавить();
			НоваяСтрока.Продавец = СтрокаПродавцы.Продавец;
		КонецЦикла;

	Иначе
		
		ОснованияСчетаФактуры = Новый ТаблицаЗначений;
		ОснованияСчетаФактуры.Колонки.Добавить("ДокументОснование");
		СтрокаОснования = ОснованияСчетаФактуры.Добавить();
		СтрокаОснования.ДокументОснование = Объект;
		
		Параметры = Новый Структура;
		Параметры.Вставить("Дата",                           Объект.Дата);
		Параметры.Вставить("ВидСчетаФактуры",                Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
		Параметры.Вставить("Исправление",                    Ложь);
		Параметры.Вставить("ВозвратЧерезКомиссионера",       Ложь);
		Параметры.Вставить("КодВидаОперацииОснования",       "");
		Параметры.Вставить("НДСПоСтавкам4и2",                Ложь);
		Параметры.Вставить("НДСИсчисляетсяНалоговымАгентом", Ложь);
		Параметры.Вставить("ДокументыОснования",             ОснованияСчетаФактуры);
		
		Форма.КодВидаОперации = Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(Параметры);
		Форма.НДСПредъявленКВычету = Не УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, Объект.Дата);
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти 
