///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняется перед интерактивным началом работы пользователя с областью данных или в локальном режиме.
// Соответствует обработчику ПередНачаломРаботыСистемы.
//
// Параметры:
//  Параметры - Структура:
//   * Отказ         - Булево - возвращаемое значение. Если установить Истина, то работа программы будет прекращена.
//   * Перезапустить - Булево - возвращаемое значение. Если установить Истина, и параметр Отказ тоже установлен
//                              в Истина, то выполняется перезапуск программы.
// 
//   * ДополнительныеПараметрыКоманднойСтроки - Строка - возвращаемое значение. Имеет смысл, когда Отказ
//                              и Перезапустить установлены Истина.
//
//   * ИнтерактивнаяОбработка - ОписаниеОповещения - возвращаемое значение. Для открытия окна, блокирующего вход в
//                              программу, следует присвоить в этот параметр описание обработчика
//                              оповещения, который открывает окно. Смотри пример ниже.
//
//   * ОбработкаПродолжения   - ОписаниеОповещения - если открывается окно, блокирующее вход в программу, то в обработке
//                              закрытия этого окна необходимо выполнить оповещение ОбработкаПродолжения. Смотри пример ниже.
//
//   * Модули                 - Массив - ссылки на модули, в которых нужно вызвать эту же процедуру после возврата.
//                              Модули можно добавлять только в рамках вызова в процедуру переопределяемого модуля.
//                              Используется для упрощения реализации нескольких последовательных асинхронных вызовов
//                              в разные подсистемы. См. пример ИнтеграцияПодсистемБСПКлиент.ПередНачаломРаботыСистемы.
//
// Пример:
//  Следующий код открывает окно, блокирующее вход в программу.
//
//		Если ОткрытьОкноПриЗапуске Тогда
//			Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("ОткрытьОкно", ЭтотОбъект);
//		КонецЕсли;
//
//	Процедура ОткрытьОкно(Параметры, ДополнительныеПараметры) Экспорт
//		// Показываем окно, по закрытию которого вызывается обработчик оповещения ОткрытьОкноЗавершение.
//		Оповещение = Новый ОписаниеОповещения("ОткрытьОкноЗавершение", ЭтотОбъект, Параметры);
//		Форма = ОткрытьФорму(... ,,, ... Оповещение);
//		Если Не Форма.Открыта() Тогда // Если ПриСозданииНаСервере Отказ установлен Истина.
//			ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
//		КонецЕсли;
//	КонецПроцедуры
//
//	Процедура ОткрытьОкноЗавершение(Результат, Параметры) Экспорт
//		...
//		ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
//		
//	КонецПроцедуры
//
Процедура ПередНачаломРаботыСистемы(Параметры) Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	//Если ПараметрыРаботыКлиента.ПоказатьПомощникПереходаСРедакции20 Тогда
	//	Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("ОткрытьПомощникПереходаСРедакции20", ОбщегоНазначенияБПКлиент);
	//КонецЕсли;
	
КонецПроцедуры

// Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
// Соответствует обработчику ПриНачалеРаботыСистемы.
//
// Параметры:
//  Параметры - Структура:
//   * Отказ         - Булево - возвращаемое значение. Если установить Истина, то работа программы будет прекращена.
//   * Перезапустить - Булево - возвращаемое значение. Если установить Истина и параметр Отказ тоже установлен
//                              в Истина, то выполняется перезапуск программы.
//
//   * ДополнительныеПараметрыКоманднойСтроки - Строка - возвращаемое значение. Имеет смысл
//                              когда Отказ и Перезапустить установлены Истина.
//
//   * ИнтерактивнаяОбработка - ОписаниеОповещения - возвращаемое значение. Для открытия окна, блокирующего вход
//                              в программу, следует присвоить в этот параметр описание обработчика оповещения,
//                              который открывает окно. См. пример в ПередНачаломРаботыСистемы.
//
//   * ОбработкаПродолжения   - ОписаниеОповещения - если открывается окно, блокирующее вход в программу, то в
//                              обработке закрытия этого окна необходимо выполнить оповещение ОбработкаПродолжения.
//                              См. пример в ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы.
//                              
//   * Модули                 - Массив - ссылки на модули, в которых нужно вызвать эту же процедуру после возврата.
//                              Модули можно добавлять только в рамках вызова в процедуру переопределяемого модуля.
//                              Используется для упрощения реализации нескольких последовательных асинхронных вызовов
//                              в разные подсистемы. См. пример ИнтеграцияПодсистемБСПКлиент.ПередНачаломРаботыСистемы.
//
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	//Если ПараметрыРаботыКлиента.Свойство("ЗаблокироватьПриложение") Тогда
	//	ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗавершениеРаботыСистемы", ОбщегоНазначенияБПКлиент),
	//		ПараметрыРаботыКлиента.ЗаблокироватьПриложение);
	//	Возврат;
	//КонецЕсли;
	
	//Если ПараметрыРаботыКлиента.Свойство("СообщитьОРекомендуемойВерсииПлатформы")
	//		И ПараметрыРаботыКлиента.СообщитьОРекомендуемойВерсииПлатформы = Истина
	//		И Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
	//	Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("ПоказатьРекомендуемуюВерсиюПлатформы", ОбщегоНазначенияБПКлиент);
	//КонецЕсли;
	
КонецПроцедуры

// Вызывается для обработки собственных параметров запуска программы,
// передаваемых с помощью ключа командной строки /C, например: 1cv8.exe ... /CРежимОтладки;ОткрытьИЗакрыть.
//
// Параметры:
//  ПараметрыЗапуска  - Массив - массив строк разделенных символом ";" в параметре запуска,
//                      переданным в конфигурацию с помощью ключа командной строки /C.
//  Отказ             - Булево - если установить Истина, то запуск будет прерван.
//
Процедура ПриОбработкеПараметровЗапуска(ПараметрыЗапуска, Отказ) Экспорт
	
КонецПроцедуры

// Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
// Вызывается после завершения действий ПриНачалеРаботыСистемы.
// Используется для подключения обработчиков ожидания, которые не должны вызываться
// в случае интерактивных действий перед и при начале работы системы.
//
// Начальная страница (рабочий стол) в этот момент еще не открыта, поэтому запрещено открывать
// формы напрямую, а следует использовать для этих целей обработчик ожидания.
// Запрещено использовать это событие для интерактивного взаимодействия с пользователем
// (ПоказатьВопрос и аналогичные действия). Для этих целей следует размещать код в процедуре ПриНачалеРаботыСистемы.
//
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		
		Если ПараметрыРаботыКлиента.Свойство("ИспользуетсяНедоступнаяФункциональность") Тогда
			ФункциональностьПрограммыКлиент.ПоказатьПредупреждениеОбИспользованииНедоступнойФункциональности();
			// Если используется недоступная функциональность, то ничего больше не показываем - только окно недоступной функциональности.
			Возврат;
		КонецЕсли;
		
		ИнтерфейсОбновлен = Ложь;
		
		// В чистой базе устанавливается специальный интерфейс начала работы.
		РежимНачалаРаботы = "";
		//Если ПараметрыРаботыКлиента.Свойство("АктивироватьПрограмму")
		//	ИЛИ ПараметрыРаботыКлиента.ПоказыватьБыстрыйСтарт Тогда
		//	
		//	РежимНачалаРаботы = ?(ПараметрыРаботыКлиента.Свойство("АктивироватьПрограмму"), "АктивацияПрограммы", "БыстрыйСтарт");
		//	ОбщегоНазначенияБПВызовСервера.УстановитьИнтерфейсНачалаРаботы(РежимНачалаРаботы);
		//	Если НЕ ПараметрыРаботыКлиента.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
		//		ОбновитьИнтерфейс();
		//		ИнтерфейсОбновлен = Истина;
		//	КонецЕсли;
		//	
		//// Иначе отображается монитор интернет-поддержки, очень важные новости,
		//// а также в режиме интеграции с банком устанавливается стандартный интерфейс.
		//Иначе
		//	
		//	// ИнтернетПоддержкаПользователей
		//	ИнтернетПоддержкаПользователейКлиент.ПриНачалеРаботыСистемы(Неопределено);
		//	// Конец ИнтернетПоддержкаПользователей
		//	
		//КонецЕсли;
		//
		//ДокументооборотСКОКлиент.ПослеЗапускаСистемы();
		//ФинОтчетностьВБанкиКлиент.ПослеЗапускаСистемы();
		ОбщегоНазначенияБПКлиент.ПослеЗапускаСистемы();
		
		// 1. Регистрация, путеводители, справочная информация
		
		//Если НЕ ЗначениеЗаполнено(РежимНачалаРаботы)
		//	И ПараметрыРаботыКлиента.Свойство("ОткрытьМониторНалоговИОтчетности") 
		//	И ПараметрыРаботыКлиента.ОткрытьМониторНалоговИОтчетности Тогда
		//	
		//	ОбщегоНазначенияБПКлиент.ОткрытьМониторНалоговИОтчетности();
		//	
		//ИначеЕсли ПараметрыРаботыКлиента.Свойство("ПоказыватьБыстрыйСтартПриРегистрации") 
		//	И ПараметрыРаботыКлиента.ПоказыватьБыстрыйСтартПриРегистрации Тогда
		//	
		//	Если ПараметрыРаботыКлиента.Свойство("ПараметрыБыстрогоСтартаПриРегистрации") Тогда
		//		ОбщегоНазначенияБПКлиент.ОткрытьБыстрыйСтарт(
		//			ПараметрыРаботыКлиента.ПараметрыБыстрогоСтартаПриРегистрации);
		//	Иначе
		//		ОбщегоНазначенияБПКлиент.ОткрытьБыстрыйСтарт();
		//	КонецЕсли;
		//	
		//ИначеЕсли ПараметрыРаботыКлиента.Свойство("ОткрытьПомощникРегистрации") 
		//	И ПараметрыРаботыКлиента.ОткрытьПомощникРегистрации Тогда
		//	
		//	ОбщегоНазначенияБПКлиент.ОткрытьРегистрацияОрганизации(ПараметрыРаботыКлиента.НавигацияНомерШага);
		//	
		//	Если ПараметрыРаботыКлиента.ПоказатьНачалоРаботыВСервисе Тогда
		//		// Ссылки на основные разделы программы для предпринимателей в сервисе
		//		ОбщегоНазначенияБПКлиент.ОткрытьНачалоРаботыВСервисе();
		//	КонецЕсли;
		//	
		//ИначеЕсли ПараметрыРаботыКлиента.Свойство("ОткрытьПомощникВнесенияИзменений") 
		//	И ПараметрыРаботыКлиента.ОткрытьПомощникВнесенияИзменений Тогда
		//	
		//	ОбщегоНазначенияБПКлиент.ОткрытьПомощникВнесенияИзменений(ПараметрыРаботыКлиента.НавигацияНомерШага);
		//	
		//	Если ПараметрыРаботыКлиента.ПоказатьНачалоРаботыВСервисе Тогда
		//		// Ссылки на основные разделы программы для предпринимателей в сервисе
		//		ОбщегоНазначенияБПКлиент.ОткрытьНачалоРаботыВСервисе();
		//	КонецЕсли;
		//	
		//ИначеЕсли ПараметрыРаботыКлиента.ПоказатьОписаниеИзмененийСистемы Тогда
		//	
		//	// При обновлении версии открываем только описание изменений, 
		//	// если не выполняется процесс регистрации организации.
		//	
		//ИначеЕсли ПараметрыРаботыКлиента.ПоказатьНачалоРаботыВСервисе
		//	И НЕ ПараметрыРаботыКлиента.Свойство("АктивироватьПрограмму")
		//	И НЕ ПараметрыРаботыКлиента.ПоказыватьБыстрыйСтарт Тогда
		//	
		//	// Ссылки на основные разделы программы для предпринимателей в сервисе
		//	ОбщегоНазначенияБПКлиент.ОткрытьНачалоРаботыВСервисе();
		//	
		//ИначеЕсли ПараметрыРаботыКлиента.ПоказатьЗнакомствоСРедакциейВ30 Тогда
		//	
		//	// Знакомство с редакцией 3.0
		//	ОбщегоНазначенияБПКлиент.ОткрытьНачинаемРаботатьВ30(ПараметрыРаботыКлиента.ИмяОбработкиЗнакомствоСРедакциейВ30);
		//	
		//ИначеЕсли ПараметрыРаботыКлиента.ПоказатьПутеводительПоДемоБазе Тогда
		//	
		//	// Путеводитель по демо-базе
		//	ОбщегоНазначенияБПКлиент.ОткрытьПутеводительПоДемоБазеПриЗапуске();
		//	
		//КонецЕсли;
		
		// 2. Окна, которые требуют от пользователя каких-либо действий
		
		//Если ПараметрыРаботыКлиента.ПоказатьОписаниеИзмененийСистемы Тогда
		//	
		//	// При обновлении версии открываем только описание изменений,
		//	// если не выполняется процесс регистрации организации.
		//
		//ИначеЕсли ПараметрыРаботыКлиента.ПоказатьСвертку Тогда
		//	
		//	// Свертка базы (продолжение работы)
		//	ОбщегоНазначенияБПКлиент.ОткрытьСверткуБазы();
		//	
		//ИначеЕсли ПараметрыРаботыКлиента.ФормированиеОстатковПоНДС Тогда 
		//	
		//	// Открытие формы "Налоги и отчеты" для формирования остатков,
		//	// необходимых для начала ведения раздельного учета НДС.
		//	// Форма открывается при включении раздельного учета НДС в Простом интерфейсе,
		//	// после перезапуска приложения.
		//	ОбщегоНазначенияБПКлиент.ОткрытьНалогиИОтчетыДляФормированияОстатковПоНДС(ПараметрыРаботыКлиента);
		//	
		//ИначеЕсли ПараметрыРаботыКлиента.ПоказатьПредложитьОбновитьВерсиюПрограммы Тогда
		//	
		//	// Информация о необходимости обновить конфигурацию
		//	ОбщегоНазначенияБПКлиент.ПредупредитьОНеобходимостиОбновленияПрограммы(ПараметрыРаботыКлиента);
		//	
		//ИначеЕсли ПараметрыРаботыКлиента.ПоказатьВключитьОсновнойИнтерфейс Тогда
		//	
		//	// Предложение включить основной интерфейс
		//	ОбщегоНазначенияБПКлиент.ПредложитьИспользоватьОсновнойИнтерфейс(
		//		ПараметрыРаботыКлиента.ВариантПредложенияВключитьОсновнойИнтерфейс);
		//	
		//КонецЕсли;
		
		//Если ПараметрыРаботыКлиента.ПроверкаАналитикиСчетовУчетаКапитала Тогда
		//	ОбщегоНазначенияБПКлиент.ОткрытьПроверкуАналитикиСчетовУчетаКапитала();
		//КонецЕсли;
		//
		//Если ПараметрыРаботыКлиента.ПроверкаРегистрацииСчетовФактурНаАванс Тогда
		//	ОбщегоНазначенияБПКлиент.ОткрытьПроверкуРегистрацииСчетовФактурНаАванс();
		//КонецЕсли;
		//
		//Если ПараметрыРаботыКлиента.ПроверкаРеквизитовПлатежныхПоручений Тогда
		//	ОбщегоНазначенияБПКлиент.ОткрытьПроверкуРеквизитовПлатежныхПоручений();
		//КонецЕсли;
		//
		//Если ПараметрыРаботыКлиента.ПоказатьСообщениеОСтарыхРеквизитахНалоговой Тогда
		//	ОбщегоНазначенияБПКлиент.ПоказатьСообщениеОСтарыхРеквизитахНалоговой();
		//КонецЕсли;
		//
		//Если ПараметрыРаботыКлиента.Свойство("ПрименениеТолькоЕНВДПослеОтмены") Тогда
		//	ОбщегоНазначенияБПКлиент.ОткрытьФормуОтменаЕНВД(ПараметрыРаботыКлиента.ПрименениеТолькоЕНВДПослеОтмены);
		//КонецЕсли;
		//
		//Если ПараметрыРаботыКлиента.Свойство("ФоновоеЗаданиеПроверкаОкончанияПодписки") Тогда
		//	ОбщегоНазначенияБПКлиент.ОжидатьОткрытиеФормыОплатыСервиса(Новый Структура(ПараметрыРаботыКлиента.ФоновоеЗаданиеПроверкаОкончанияПодписки));
		//КонецЕсли;
		
		Если Не ИнтерфейсОбновлен
			И ПараметрыРаботыКлиента.Свойство("ОбновитьИнтерфейс")
			И ПараметрыРаботыКлиента.ОбновитьИнтерфейс Тогда
			ОбновитьИнтерфейс();
		КонецЕсли;
		
		//НадежностьБанковКлиент.ПослеНачалаРаботыСистемы();
		//
		//ЗаявкиНаКредитКлиент.ПослеНачалаРаботыСистемы();
		
		ОповещенияПлатформыСамозанятыеКлиент.ПослеНачалаРаботы();
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняется перед интерактивном завершении работы пользователя с областью данных или в локальном режиме.
// Соответствует обработчику ПередЗавершениемРаботыСистемы.
// Позволяет определить список предупреждений, выводимых пользователю перед завершением работы.
//
// Параметры:
//  Отказ          - Булево - если установить данному параметру значение Истина, то работа с программой не будет 
//                            завершена.
//  Предупреждения - Массив - добавить элементы типа Структура, свойства которой описывают внешний вид предупреждения,
//                            а также дальнейшие действия.
//                            См. описание свойств в СтандартныеПодсистемыКлиент.ПредупреждениеПриЗавершенииРаботы.
//
Процедура ПередЗавершениемРаботыСистемы(Отказ, Предупреждения) Экспорт
	
КонецПроцедуры

// Позволяет переопределить заголовок программы.
//
// Параметры:
//  ЗаголовокПриложения - Строка - текст заголовка программы;
//  ПриЗапуске          - Булево - Истина, если вызывается при начале работы программы.
//                                 В этом случае недопустимо вызывать те серверные функции конфигурации,
//                                 которые рассчитывают на то, что запуск уже полностью завершен. 
//                                 Например, вместо СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента
//                                 следует вызывать СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске. 
//
// Пример:
//  Для того чтобы в начале заголовка программы вывести название текущего проекта, следует определить параметр 
//  ТекущийПроект в процедуре ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента и вписать код:
//
//  Если ПриЗапуске Тогда
//    Возврат;
//  КонецЕсли;
//  ПараметрыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
//  ТекущийПроект = Неопределено;	
//  Если ПараметрыКлиента.ДоступноИспользованиеРазделенныхДанных И ПараметрыКлиента.Свойство("ТекущийПроект", ТекущийПроект) 
//	  И Не ПараметрыКлиента.ТекущийПроект.Пустая() Тогда
//	  ЗаголовокПриложения = Строка(ПараметрыКлиента.ТекущийПроект) + " / " + ЗаголовокПриложения;
//  КонецЕсли;
//
Процедура ПриУстановкеЗаголовкаКлиентскогоПриложения(ЗаголовокПриложения, ПриЗапуске) Экспорт
	
	ПараметрыКлиента = ?(ПриЗапуске, СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске(),
		СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента());
	
	ПараметрыКлиентаПриЗапуске = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если ПараметрыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		
		ПредставлениеЗаголовка = ПараметрыКлиента.ЗаголовокПриложения;
		ПредставлениеКонфигурации = ПараметрыКлиента.ПодробнаяИнформация;
		
		Если ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
			Если ПараметрыКлиента.Свойство("ПредставлениеОбластиДанных") Тогда
				ЗаголовокПриложения = ПараметрыКлиента.ПредставлениеОбластиДанных;
			Иначе
				ЗаголовокПриложения = ПредставлениеКонфигурации;
			КонецЕсли;
		Иначе
			ЗаголовокПриложения = СокрЛП(ПредставлениеЗаголовка);
		КонецЕсли;
		
	Иначе
		ШаблонЗаголовка = "%1 / %2";
		ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, НСтр("ru = 'Не установлены разделители'"), ПараметрыКлиента.ПодробнаяИнформация);
	КонецЕсли;
	
	Если ПараметрыКлиента.Свойство("РаботаСВнешнимиРесурсамиЗаблокирована")
		И ПараметрыКлиента.Свойство("РазделениеВключено")
		И Не ПараметрыКлиента.РазделениеВключено Тогда
		ЗаголовокПриложения = НСтр("ru = '[КОПИЯ]'") + " " + ЗаголовокПриложения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
