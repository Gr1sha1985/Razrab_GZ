#Область СлужебныеПроцедурыИФункции

Функция СформироватьКонтекстДляПроверок(Шаблон, ФайлВырузки, ВыгрузкаПрошлогоПериода = Неопределено) Экспорт 
	Попытка
		Результат = Истина;
		Контекст = Новый Структура;
		Контекст.Вставить("СтруктураПоискаСекцияСтрока", Новый Структура("section, row"));
		Контекст.Вставить("ВыполнятьПроверку", Истина);
		Контекст.Вставить("ПроверкаОтчетаНаПустоту", Истина);
		Контекст.Вставить("ОТЧ", Новый ОписаниеТипов("Число"));
		Контекст.Вставить("ОПС", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		Контекст.Вставить("ОПБ", Новый ОписаниеТипов("Булево"));
		Контекст.Вставить("ПолучитьВсеАргументыКромеСуммированийВВыражении", Новый Соответствие);
		Контекст.Вставить("ПолучитьВсеАргументыВыражения", Новый Соответствие);
		Контекст.Вставить("СписокЗначений", Новый СписокЗначений);
		ВариантыГраф = Новый Соответствие;
		ДополнитьКонтекстТаблицейВариацийСтрок(Контекст);
		СформироватьСоответствиеЗамен(Контекст);
		Результат = Результат И ПолучитьТаблицуДанныеШаблона(Шаблон, Контекст);
		ДанныеОтчетаВТаблицу(ФайлВырузки, Контекст, "ОсновнойПериод_");
		Контекст.Вставить("ОсновнойПериод_ДанныеОтчета_МножественныеСтроки", ОтобратьМножественныеСтроки(Контекст["ОсновнойПериод_ДанныеОтчета"]));
		Если Не ВыгрузкаПрошлогоПериода = Неопределено Тогда
			Если ТипЗнч(ВыгрузкаПрошлогоПериода) = Тип("ТекстовыйДокумент") Тогда 
				Если ЗначениеЗаполнено(ВыгрузкаПрошлогоПериода.ПолучитьТекст()) Тогда 
					ДанныеОтчетаВТаблицу(ВыгрузкаПрошлогоПериода.ПолучитьТекст(), Контекст, "ПредыдущийПериод_");
					Контекст.Вставить("ПредыдущийПериод_ДанныеОтчета_МножественныеСтроки", ОтобратьМножественныеСтроки(Контекст["ПредыдущийПериод_ДанныеОтчета"]));
				КонецЕсли;
			Иначе
				ДанныеОтчетаВТаблицу(ВыгрузкаПрошлогоПериода, Контекст, "ПредыдущийПериод_");
				Контекст.Вставить("ПредыдущийПериод_ДанныеОтчета_МножественныеСтроки", ОтобратьМножественныеСтроки(Контекст["ПредыдущийПериод_ДанныеОтчета"]));
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Проверка контрольных соотношений осуществляться не будет'"));
		Возврат Неопределено;
	КонецПопытки;
	
	Если Результат Тогда 
		Возврат Контекст;
	КонецЕсли;
КонецФункции

Функция ОтобратьМножественныеСтроки(Таблица)
	ТаблицаРез = Таблица.СкопироватьКолонки();
	Для Каждого Стр Из Таблица Цикл
		Если Стр.s1_isPresent Или Стр.s2_isPresent Или Стр.s3_isPresent Тогда 
			ЗаполнитьЗначенияСвойств(ТаблицаРез.Добавить(), Стр);
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаРез;
КонецФункции

Процедура ДополнитьКонтекстТаблицейВариацийСтрок(Контекст)
	Строки = Новый ТаблицаЗначений;
	Строки.Колонки.Добавить("section");
	Строки.Колонки.Добавить("row");
	Строки.Колонки.Добавить("s1", Контекст.ОПС);
	Строки.Колонки.Добавить("s1_isPresent", Контекст.ОПБ);
	Строки.Колонки.Добавить("s2", Контекст.ОПС);
	Строки.Колонки.Добавить("s2_isPresent", Контекст.ОПБ);
	Строки.Колонки.Добавить("s3", Контекст.ОПС);
	Строки.Колонки.Добавить("s3_isPresent", Контекст.ОПБ);
	Контекст.Вставить("ВариацииСтрок", Строки);
КонецПроцедуры

Процедура СформироватьСоответствиеЗамен(Контекст)
	Замены = Новый Соответствие;
	Замены["abs"] = "ИнтерпретаторКонтрольныхСоотношенийРосстата._Абс";
	Замены["coalesce"] = "ИнтерпретаторКонтрольныхСоотношенийРосстата._Соединение";
	Замены["floor"] = "ИнтерпретаторКонтрольныхСоотношенийРосстата._БлижЦел";
	Замены["isnull"] = "ИнтерпретаторКонтрольныхСоотношенийРосстата._ЕстьНулл";
	Замены["nullif"] = "ИнтерпретаторКонтрольныхСоотношенийРосстата._НуллИф";
	Замены["round"] = "ИнтерпретаторКонтрольныхСоотношенийРосстата._Окр";
	Сравнения = Новый Соответствие;
	Сравнения["|>|"] = ">";
	Сравнения["|>=|"] = ">=";
	Сравнения["|<>|"] = "<>";
	Сравнения["|<=|"] = "<=";
	Сравнения["|<|"] = "<";
	
	Контекст.Вставить("ФункцииЯзыкаКС", Замены);
	Контекст.Вставить("ОперацииСравнения", Сравнения);
КонецПроцедуры

Функция ПреобразоватьАргументСуммы(Выражение)
	Результат = Выражение;
	ВсегоСумм = СтрЧислоВхождений(Результат, "sum");
	Если ВсегоСумм = 0 Тогда 
		Возврат Результат;
	КонецЕсли;
	Для Инд = 1 По ВсегоСумм Цикл
		ИндСум = СтрНайти(Результат, "sum", НаправлениеПоиска.СНачала, 1, ВсегоСумм + 1 - Инд);
		Если Не Сред(Результат, ИндСум + 3, 1) = "(" Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		ИндНачАрг = ИндСум + 4;
		Инд = ИндНачАрг;
		Счетчик = 1;
		Пока Счетчик <> 0 И Инд <= СтрДлина(Результат) Цикл 
			Символ = Сред(Результат, Инд, 1);
			Если Символ = "(" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Символ = ")" Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		Аргумент = Сред(Результат, ИндНачАрг, Инд - ИндНачАрг - 1);
		Если СтрНайти(Аргумент, "+") <> 0 Тогда 
			МассивАрг = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Аргумент, "+");
			ПреобразованныйАрг = "";
			Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Аргумент, "+") Цикл 
				ПреобразованныйАрг = ПреобразованныйАрг + ?(ЗначениеЗаполнено(ПреобразованныйАрг), "+", "") + "sum(" + Элт + ")";
			КонецЦикла;
			Результат = Лев(Результат, ИндСум - 1) + "(" + ПреобразованныйАрг + ")" + Сред(Результат, Инд);
		КонецЕсли;
	КонецЦикла;
	ПроверкаВыражения(Результат);
	Возврат Результат;
КонецФункции

Функция ПреобразоватьЦепочкуСравнений(Выражение)
	Если СтрНайти(Выражение, "or") > 0 Или СтрНайти(Выражение, "and") > 0 Тогда 
		Возврат Выражение;
	КонецЕсли;
	КоличествоРазделителей = СтрЧислоВхождений(Выражение, "|");
	Если КоличествоРазделителей < 3 Тогда 
		Возврат Выражение;
	КонецЕсли;
	Если СтрЧислоВхождений(Выражение, "|>|")+СтрЧислоВхождений(Выражение, "|>=|")
		+СтрЧислоВхождений(Выражение, "|<|")+СтрЧислоВхождений(Выражение, "|<=|") < 2 Тогда 
		Возврат Выражение;
	КонецЕсли;
	
	Если КоличествоРазделителей % 2 = 1 Тогда 
		ВызватьИсключение "";
	КонецЕсли;
	
	ИгогДляФормирования = Новый Массив;
	ПредИнд = 1;
	Инд = 1;
	Пока Инд < КоличествоРазделителей Цикл 
		Индекс1 = СтрНайти(Выражение, "|", НаправлениеПоиска.СНачала, 1, Инд);
		Индекс2 = СтрНайти(Выражение, "|", НаправлениеПоиска.СНачала, 1, Инд+1);
		Если Индекс1 = 0 Или Индекс2 = 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		Инд = Инд + 2;
		ИгогДляФормирования.Добавить("(" + Сред(Выражение, ПредИнд, Индекс1-ПредИнд) + ")");
		ИгогДляФормирования.Добавить(Сред(Выражение, Индекс1, Индекс2-Индекс1+1));
		ПредИнд = Индекс2+1;
	КонецЦикла;
	
	ИгогДляФормирования.Добавить("(" + Сред(Выражение, ПредИнд) + ")");
	Инд = 1;
	Результат = "";
	Пока Инд < ИгогДляФормирования.ВГраница() Цикл
		Результат = Результат + ?(ЗначениеЗаполнено(Результат), "and", "") + "(" + ИгогДляФормирования[Инд-1] + ИгогДляФормирования[Инд] + ИгогДляФормирования[Инд+1] + ")";
		Инд = Инд + 2;
	КонецЦикла;
	ПроверкаВыражения(Результат);
	Возврат Результат;
КонецФункции

Функция ПреобразоватьНезаполненныеАргументы(Выражение, ЗаменыФункций)
	КоличествоРазделителей = СтрЧислоВхождений(Выражение, "%");
	Если КоличествоРазделителей = 0 Тогда 
		Возврат Выражение;
	КонецЕсли;
	Если КоличествоРазделителей%2=1 Тогда 
		ВызватьИсключение "";
	КонецЕсли;
	
	ИгогДляФормирования = Новый Соответствие;
	ПредИнд = 1;
	Инд = 1;
	Пока Инд < КоличествоРазделителей Цикл 
		Индекс1 = СтрНайти(Выражение, "%", НаправлениеПоиска.СНачала, 1, Инд);
		Индекс2 = СтрНайти(Выражение, "%", НаправлениеПоиска.СНачала, 1, Инд+1);
		Если Индекс1 = 0 Или Индекс2 = 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		Контекст = Индекс1;
		Пока Контекст > 0 Цикл 
			Контекст = Контекст - 1;
			Если Контекст = 0 Тогда
				Аргумент = Сред(Выражение, Индекс1, Индекс2-Индекс1+1);
				ИгогДляФормирования[Аргумент] = ЗаменыФункций["isnull"] + "(" + Аргумент + ",0)";
				Прервать;
			КонецЕсли;
			
			Символ = Сред(Выражение, Контекст, 1);
			Если Символ = "*" Или Символ = "-" Или Символ = "+" Или Символ = "|" Тогда 
				Аргумент = Сред(Выражение, Индекс1, Индекс2-Индекс1+1);
				ИгогДляФормирования[Аргумент] = ЗаменыФункций["isnull"] + "(" + Аргумент + ",0)";
				Прервать;
			ИначеЕсли Символ = "/" Тогда
				Аргумент = Сред(Выражение, Индекс1, Индекс2-Индекс1+1);
				ИгогДляФормирования[Аргумент] = ЗаменыФункций["isnull"] + "(" + Аргумент + ",1)";
				Прервать;
			ИначеЕсли Символ = "(" Тогда
				Символ = Сред(Выражение, Индекс2 + 1, 1);
				Если Символ = "*" Или Символ = "-" Или Символ = "+" Или Символ = "|" Тогда
					Аргумент = Сред(Выражение, Индекс1, Индекс2-Индекс1+1);
					ИгогДляФормирования[Аргумент] = ЗаменыФункций["isnull"] + "(" + Аргумент + ",0)";
					Прервать;
				ИначеЕсли Символ = "/" Тогда
					Аргумент = Сред(Выражение, Индекс1, Индекс2-Индекс1+1);
					ИгогДляФормирования[Аргумент] = ЗаменыФункций["isnull"] + "(" + Аргумент + ",1)";
					Прервать;
				КонецЕсли;
				Продолжить;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Инд = Инд + 2;
		ПредИнд = Индекс2+1;
	КонецЦикла;
	
	Результат = Выражение;
	Для Каждого КЗ Из ИгогДляФормирования Цикл 
		Результат = СтрЗаменить(Результат, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	ПроверкаВыражения(Результат);
	Возврат Результат;
КонецФункции

Функция ОкруглитьОперанды(Выражение, ЗаменыФункций, ЗнаковОкругления)
	ОперацииСравнения = Новый Соответствие;
	ОперацииСравнения.Вставить("|>|", Истина);
	ОперацииСравнения.Вставить("|>=|", Истина);
	ОперацииСравнения.Вставить("|<>|", Истина);
	ОперацииСравнения.Вставить("|<=|", Истина);
	ОперацииСравнения.Вставить("|<|", Истина);
	ОперацииСравнения.Вставить("|=|", Истина);
	
	Результат = "";
	Инд = 1;
	ДлИсх = СтрДлина(Выражение);
	НачалоТерма = 1;
	СчетчикСкобок = 0;
	Пока Истина Цикл 
		Если СтрНачинаетсяС(Сред(Выражение, Инд), "or") Тогда 
			Результат = Лев(Результат, СтрДлина(Результат) + СчетчикСкобок) + "or";
			Инд = Инд + 2;
			НачалоТерма = СтрДлина(Результат) + 1;
			СчетчикСкобок = 0;
			Продолжить;
		КонецЕсли;
		Если СтрНачинаетсяС(Сред(Выражение, Инд), "and") Тогда 
			Результат = Лев(Результат, СтрДлина(Результат) + СчетчикСкобок) + "and";
			Инд = Инд + 3;
			НачалоТерма = СтрДлина(Результат) + 1;
			СчетчикСкобок = 0;
			Продолжить;
		КонецЕсли;
		
		ПервыйСимвол = Сред(Выражение, Инд, 1);
		Если ПервыйСимвол = "(" Тогда
			СчетчикСкобок = СчетчикСкобок + 1;
		ИначеЕсли ПервыйСимвол = ")" Тогда
			СчетчикСкобок = СчетчикСкобок - 1;
		КонецЕсли;
		
		ОпСравнения = Сред(Выражение, Инд, 3);
		Если ОперацииСравнения.Получить(ОпСравнения) = Истина Тогда 
			Результат = Лев(Результат, НачалоТерма - 1) + Сред(Результат, НачалоТерма + СчетчикСкобок);
			Результат = Лев(Результат, НачалоТерма - 1) + "(" + ЗаменыФункций["round"] + "(" + Сред(Результат, НачалоТерма) + "," + ЗнаковОкругления + "))" + ОпСравнения;
			Инд = Инд + 3;
			НачалоТерма = СтрДлина(Результат) + 1;
			СчетчикСкобок = 0;
			Продолжить;
		КонецЕсли;
		ОпСравнения = Сред(Выражение, Инд, 4);
		Если ОперацииСравнения.Получить(ОпСравнения) = Истина Тогда
			Результат = Лев(Результат, НачалоТерма - 1) + Сред(Результат, НачалоТерма + СчетчикСкобок);
			Результат = Лев(Результат, НачалоТерма - 1) + "(" + ЗаменыФункций["round"] + "(" + Сред(Результат, НачалоТерма) + "," + ЗнаковОкругления + "))" + ОпСравнения;
			Инд = Инд + 4;
			НачалоТерма = СтрДлина(Результат) + 1;
			СчетчикСкобок = 0;
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + Сред(Выражение, Инд, 1);
		Инд = Инд + 1;
		Если Инд > ДлИсх Тогда 
			Если ЗначениеЗаполнено(Сред(Результат, НачалоТерма)) Тогда
				Результат = Лев(Результат, СтрДлина(Результат) + СчетчикСкобок);
				Результат = Лев(Результат, НачалоТерма - 1) + "(" + ЗаменыФункций["round"] + "(" + Сред(Результат, НачалоТерма) + "," + ЗнаковОкругления + "))";
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ПроверкаВыражения(Результат);
	Возврат Результат;
КонецФункции

Функция ПроверкаВыражения(Результат)
	Возврат Неопределено;
	Если СтрЧислоВхождений(Результат, "(") <> СтрЧислоВхождений(Результат, ")")
		Или СтрЧислоВхождений(Результат, "{") <> СтрЧислоВхождений(Результат, "}")
		Или СтрЧислоВхождений(Результат, "@")%2 <> 0
		Или СтрЧислоВхождений(Результат, "%")%2 <> 0
		Или СтрЧислоВхождений(Результат, "[") <> СтрЧислоВхождений(Результат, "]") Тогда 
		
		ВызватьИсключение "";
	КонецЕсли;
	
	Если СтрНайти(Результат, "null-") > 0 Тогда 
		ВызватьИсключение "";
	КонецЕсли;
	
	Проверка = "";
	Для Инд = 1 По СтрДлина(Результат) Цикл 
		Символ = Сред(Результат, Инд, 1);
		Если Символ = "(" Или Символ = "{" Или Символ = "[" Тогда 
			Проверка = Проверка + Символ;
		ИначеЕсли Символ = "]" Тогда 
			Если Прав(Проверка, 1) = "[" Тогда 
				Проверка = Лев(Проверка, СтрДлина(Проверка) - 1);
			Иначе
				ВызватьИсключение "";
			КонецЕсли;
		ИначеЕсли Символ = "}" Тогда 
			Если Прав(Проверка, 1) = "{" Тогда 
				Проверка = Лев(Проверка, СтрДлина(Проверка) - 1);
			Иначе
				ВызватьИсключение "";
			КонецЕсли;
		ИначеЕсли Символ = ")" Тогда 
			Если Прав(Проверка, 1) = "(" Тогда 
				Проверка = Лев(Проверка, СтрДлина(Проверка) - 1);
			Иначе
				ВызватьИсключение "";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Проверка) Тогда 
		ВызватьИсключение "";
	КонецЕсли;
КонецФункции

Функция ПривестиВыражениеККаноническомуВиду(Выражение, ЗнаковОкругления = 2) 
	Аргументы = Новый Соответствие;
	Результат = СокрЛП(Выражение);
	Инд = 0;
	
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("{{,{", ",") Цикл 
		Пока Истина Цикл 
			Если СтрНайти(Результат, Элт) = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			Инд = Инд + 1;
			ЧтоЗаменили = "";
			НаЧтоЗаменили = "%" + Инд + "%";
			Если Не ЗаменитьВыражение(Результат, НаЧтоЗаменили, ЧтоЗаменили, Элт) Тогда 
				Прервать;
			КонецЕсли;
			Если ЧтоЗаменили = "" Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			Аргументы[НаЧтоЗаменили] = ЧтоЗаменили;
		КонецЦикла;
	КонецЦикла;
	Результат = СтрЗаменить(НРег(Результат), " ", "");
	Результат = СтрЗаменить(Результат, Символы.НПП, "");
	ПроверкаВыражения(Результат);
	
	ЗаменыФункций = Новый Соответствие;
	ЗаменыФункций["abs"] = "@func1@";
	ЗаменыФункций["coalesce"] = "@func2@";
	ЗаменыФункций["floor"] = "@func3@";
	ЗаменыФункций["isnull"] = "@func4@";
	ЗаменыФункций["nullif"] = "@func5@";
	ЗаменыФункций["round"] = "@func6@";
	Для Каждого КЗ Из ЗаменыФункций Цикл 
		Результат = СтрЗаменить(Результат, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	ПроверкаВыражения(Результат);
	
	Для Инд = 1 По СтрЧислоВхождений(Результат, "sum") Цикл 
		ИндСум = СтрНайти(Результат, "sum", НаправлениеПоиска.СНачала, 1, Инд);
		СледСимвол = Сред(Результат, ИндСум + 3, 1);
		Если СледСимвол = "(" Тогда 
			Продолжить;
		ИначеЕсли СледСимвол = "%" Тогда 
			ПозЗакр = СтрНайти(Результат, "%", НаправлениеПоиска.СНачала, ИндСум + 4);
			Если ПозЗакр = 0 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			Результат = Лев(Результат, ИндСум + 2) + "(" + Сред(Результат, ИндСум + 3, ПозЗакр - ИндСум - 2) + ")" + Сред(Результат, ПозЗакр + 1);
		Иначе
			ПозЗакр = СтрНайти(Результат, ")", НаправлениеПоиска.СНачала, ИндСум + 3);
			Если ПозЗакр = 0 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			Результат = Лев(Результат, ИндСум + 2) + "(" + Сред(Результат, ИндСум + 3, ПозЗакр - ИндСум - 2) + ")" + Сред(Результат, ПозЗакр + 1);
		КонецЕсли;
	КонецЦикла;
	ПроверкаВыражения(Результат);
	
	Результат = ПреобразоватьАргументСуммы(Результат);
	Результат = ПреобразоватьЦепочкуСравнений(Результат);
	Результат = ПреобразоватьНезаполненныеАргументы(Результат, ЗаменыФункций);
	Результат = ОкруглитьОперанды(Результат, ЗаменыФункций, ЗнаковОкругления);
	
	Для Каждого КЗ Из ЗаменыФункций Цикл 
		Результат = СтрЗаменить(Результат, КЗ.Значение, НРег(КЗ.Ключ));
	КонецЦикла;
	Для Каждого КЗ Из Аргументы Цикл 
		Результат = СтрЗаменить(Результат, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	Возврат НРег(Результат);
КонецФункции

Функция _Абс(p) Экспорт 
	// abs
	Если ТипЗнч(p) = Тип("Число") Тогда 
		Возврат ?(p > 0, p, (-1) * p);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция _Соединение(p1 = Неопределено,
					p2 = Неопределено,
					p3 = Неопределено,
					p4 = Неопределено,
					p5 = Неопределено,
					p6 = Неопределено) Экспорт 
	// coalesce (p1, …pn)
	Если p1 <> Null Тогда 
		Возврат p1;
	КонецЕсли;
	Если p2 <> Null Тогда 
		Возврат p2;
	КонецЕсли;
	Если p3 <> Null Тогда 
		Возврат p3;
	КонецЕсли;
	Если p4 <> Null Тогда 
		Возврат p4;
	КонецЕсли;
	Если p5 <> Null Тогда 
		Возврат p5;
	КонецЕсли;
	Если p6 <> Null Тогда 
		Возврат p6;
	КонецЕсли;
	Возврат Null
КонецФункции

Функция _БлижЦел(p) Экспорт 
	// floor 
	Если ТипЗнч(p) = Тип("Число") Тогда 
		Рез = Окр(p, 0);
		Возврат ?(p >= Рез, Рез, Рез - 1);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция _ЕстьНулл(p1, p2) Экспорт 
	// isnull 
	Возврат ?(p1 = Null, p2, p1);
КонецФункции

Функция _НуллИф(p1, p2) Экспорт 
	// nullif
	Возврат ?(p1 = p2, Null, p1);
КонецФункции

Функция _Окр(p1, p2 = 0, p3 = 0) Экспорт
	// round
	Если ТипЗнч(p1) = Тип("Число") Тогда 
		Возврат ?(p3 = 0, Окр(p1 * Pow(10, p2), 0), _БлижЦел(p1 * Pow(10, p2))) / Pow(10, p2);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПолучитьПустуюТаблицуТиповСтрок()
	ОПС = ОбщегоНазначения.ОписаниеТипаСтрока(32);
	ОПБ = Новый ОписаниеТипов("Булево");
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("section", ОПС);
	ПустаяТаблица.Колонки.Добавить("row", ОПС);
	ПустаяТаблица.Колонки.Добавить("rowtype", ОПС);
	ПустаяТаблица.Колонки.Добавить("s1_isPresent", ОПБ);
	ПустаяТаблица.Колонки.Добавить("s2_isPresent", ОПБ);
	ПустаяТаблица.Колонки.Добавить("s3_isPresent", ОПБ);
	ПустаяТаблица.Колонки.Добавить("s1", ОПС);
	ПустаяТаблица.Колонки.Добавить("s2", ОПС);
	ПустаяТаблица.Колонки.Добавить("s3", ОПС);
	ПустаяТаблица.Индексы.Добавить("section,row,rowtype");
	Возврат ПустаяТаблица;
КонецФункции

Функция ПолучитьПустуюТаблицуМножественныхСтрок()
	ОПС = ОбщегоНазначения.ОписаниеТипаСтрока(32);
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("section", ОПС);
	ПустаяТаблица.Колонки.Добавить("row", ОПС);
	ПустаяТаблица.Индексы.Добавить("section,row");
	Возврат ПустаяТаблица;
КонецФункции

Функция ПолучитьПустуюТаблицуПроверокКонтролей()
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("Описание");
	ПустаяТаблица.Колонки.Добавить("Нарушение");
	ПустаяТаблица.Колонки.Добавить("Расшифровка");
	ПустаяТаблица.Колонки.Добавить("ЭтоОшибка", Новый ОписаниеТипов("Булево"));
	ПустаяТаблица.Колонки.Добавить("ТекстовоеПредставлениеФормулы");
	ПустаяТаблица.Колонки.Добавить("Комментарий");
	Возврат ПустаяТаблица;
КонецФункции

Функция ПолучитьПустуюТаблицуДанныхОтчета(КоличествоКолонок)
	ОПБ = Новый ОписаниеТипов("Булево");
	ОписаниеТиповКолонки = Новый ОписаниеТипов(ОбщегоНазначения.ОписаниеТипаСтрока(256), "Число", , Новый КвалификаторыЧисла(15,3));
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("section", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	ПустаяТаблица.Колонки.Добавить("row", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	Для Инд = 1 По 3 Цикл
		ПустаяТаблица.Колонки.Добавить("s" + Инд, ОписаниеТиповКолонки);
		ПустаяТаблица.Колонки.Добавить("s" + Инд + "_isPresent", ОПБ);
	КонецЦикла;
	
	Для Инд = 1 По КоличествоКолонок Цикл
		ПустаяТаблица.Колонки.Добавить("col" + Прав("0000" + Инд, 4), ОписаниеТиповКолонки);
		ПустаяТаблица.Колонки.Добавить("col" + Прав("0000" + Инд, 4) + "_isPresent", ОПБ);
	КонецЦикла;
	
	Возврат ПустаяТаблица;
КонецФункции

Функция ПолучитьПустуюТаблицуКонтрольныхСоотношений()
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("id", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	ПустаяТаблица.Колонки.Добавить("name");
	ПустаяТаблица.Колонки.Добавить("condition");
	ПустаяТаблица.Колонки.Добавить("rule");
	ПустаяТаблица.Колонки.Добавить("periodClause", ОбщегоНазначения.ОписаниеТипаСтрока(128));
	ПустаяТаблица.Колонки.Добавить("precision");
	ПустаяТаблица.Колонки.Добавить("fault");
	ПустаяТаблица.Колонки.Добавить("tip");
	Возврат ПустаяТаблица;
КонецФункции

Функция ПолучитьПустуюТаблицуКодовПериодичности()
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("id", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	ПустаяТаблица.Колонки.Добавить("alt_id", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	Возврат ПустаяТаблица;
КонецФункции

Процедура ДополнительныеПреобразованияУсловия(ПреобразованноеУсловие)
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, " ", "");
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.НПП, "");
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.Таб, "");
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "and", " и ");
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "or", " или ");
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "null+", "0+");
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "+null", "+0");
КонецПроцедуры

Процедура ДанныеОтчетаВТаблицу(ФайлВырузки, Контекст, Заголовок)
	ТДО = ПолучитьПустуюТаблицуДанныхОтчета(Контекст.КоличествоКолонок);
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ФайлВырузки);
	Исключение
		ЧтениеXML.УстановитьСтроку(ФайлВырузки);
	КонецПопытки;
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Для Каждого Узел Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы Цикл
		Если "ОсновнойПериод_" = Заголовок И НРег(Узел.ИмяУзла) = "title" Тогда 
			Для Каждого ПолеТитула Из Узел.ДочерниеУзлы Цикл
				УзелИмя = ПолеТитула.Атрибуты.ПолучитьИменованныйЭлемент("name");
				УзелЗначение = ПолеТитула.Атрибуты.ПолучитьИменованныйЭлемент("value");
				Если УзелИмя <> Неопределено Тогда
					Контекст.ЗначенияПолейТитула.Вставить(УзелИмя.ЗначениеУзла, ?(УзелЗначение = Неопределено, УзелИмя.ЗначениеУзла, УзелЗначение.ЗначениеУзла));
				КонецЕсли;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		Если НРег(Узел.ИмяУзла) <> "sections" Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого Секция Из Узел.ДочерниеУзлы Цикл 
			КодСекции = Прав("000" + Секция.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 3);
			Для Каждого Строка Из Секция.ДочерниеУзлы Цикл
				НовСтр = ТДО.Добавить();
				КодСтроки = Прав("00000" + Строка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 5);
				НовСтр.section = КодСекции;
				НовСтр.row = КодСтроки;
				Для Инд = 1 По 3 Цикл
					Специфика = Строка.Атрибуты.ПолучитьИменованныйЭлемент("s" + Инд);
					Если Специфика <> Неопределено Тогда 
						НовСтр["s" + Инд] = Специфика.ЗначениеУзла;
						НовСтр["s" + Инд + "_isPresent"] = Истина;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Колонка Из Строка.ДочерниеУзлы Цикл
					КодКолонки = "col" + Прав("0000" + Колонка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 4);
					Если ТДО.Колонки.Найти(КодКолонки) <> Неопределено Тогда 
						НовСтр[КодКолонки] = Колонка.ДочерниеУзлы[0].ЗначениеУзла;
						НовСтр[КодКолонки + "_isPresent"] = Истина;
					Иначе
						Если "ОсновнойПериод_" = Заголовок Тогда 
							ВызватьИсключение "";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Прервать;
	КонецЦикла;
	
	Контекст.Вставить(Заголовок + "Период", ДокументDOM.ДочерниеУзлы[0].Атрибуты.ПолучитьИменованныйЭлемент("period").ЗначениеУзла);
	Контекст.Вставить(Заголовок + "ДанныеОтчета", ТДО);
КонецПроцедуры

Функция СформироватьТаблицуОбязательныхДляВводаГраф(ДокументDOM, Контекст)
	Результат = Новый ТаблицаЗначений;
	ОПС = ОбщегоНазначения.ОписаниеТипаСтрока(16);
	Результат.Колонки.Добавить("Секция", ОПС);
	Результат.Колонки.Добавить("Строка", ОПС);
	Результат.Колонки.Добавить("Колонка", ОПС);
	ОбязательныеКолонкиПоСекциям = Новый Соответствие;
	Контекст.Вставить("ИменаСекций", Новый Соответствие);
	
	КолонкиСпецифик = Новый ТаблицаЗначений;
	КолонкиСпецифик.Колонки.Добавить("Секция", ОПС);
	КолонкиСпецифик.Колонки.Добавить("Колонка", ОПС);
	КолонкиСпецифик.Колонки.Добавить("Специфика", ОПС);
	Контекст.Вставить("КолонкиСпецифик", КолонкиСпецифик);
	
	Для Каждого Узел Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы Цикл 
		Если НРег(Узел.ИмяУзла) = "sections" Тогда
			Для Каждого Секция Из Узел.ДочерниеУзлы Цикл
				Если НРег(Секция.ИмяУзла) <> "section" Тогда
					Продолжить;
				КонецЕсли;
				КодСекции = Прав("000" + Секция.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 3);
				Контекст.ИменаСекций.Вставить(КодСекции, Секция.Атрибуты.ПолучитьИменованныйЭлемент("name").ЗначениеУзла);
				
				ОбязательныеКолонкиПоСекциям.Вставить(КодСекции, Новый СписокЗначений);
				Для Каждого УзелКолонки Из Секция.ДочерниеУзлы Цикл 
					Если НРег(УзелКолонки.ИмяУзла) <> "columns" Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Колонка Из УзелКолонки.ДочерниеУзлы Цикл
						Если НРег(Колонка.ИмяУзла) <> "column" Тогда
							Продолжить;
						КонецЕсли;
						
						fld = Колонка.Атрибуты.ПолучитьИменованныйЭлемент("fld");
						type = Колонка.Атрибуты.ПолучитьИменованныйЭлемент("type");
						Если fld <> Неопределено И type <> Неопределено 
							И СтрНачинаетсяС(НРег(fld.ЗначениеУзла), "s")
							И НРег(type.ЗначениеУзла) = "s" Тогда
							
							НовСтр = Контекст.КолонкиСпецифик.Добавить();
							НовСтр.Секция = Прав("000" + Секция.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 3);
							НовСтр.Колонка = Прав("0000" + Колонка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 4);
							НовСтр.Специфика = НРег(fld.ЗначениеУзла);
						КонецЕсли;
						
						Если Колонка.ДочерниеУзлы.Количество() > 0 Тогда 
							inputType = Колонка.ДочерниеУзлы[0].Атрибуты.ПолучитьИменованныйЭлемент("inputType");
							Если inputType <> Неопределено И inputType.ЗначениеУзла = "1" Тогда
								ОбязательныеКолонкиПоСекциям[КодСекции].Добавить(Прав("0000" + Колонка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 4));
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Узел Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы Цикл 
		Если НРег(Узел.ИмяУзла) = "sections" Тогда
			Для Каждого Секция Из Узел.ДочерниеУзлы Цикл
				Если НРег(Секция.ИмяУзла) <> "section" Тогда
					Продолжить;
				КонецЕсли;
				КодСекции = Прав("000" + Секция.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 3);
				Для Каждого УзелСтроки Из Секция.ДочерниеУзлы Цикл 
					Если НРег(УзелСтроки.ИмяУзла) <> "rows" Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Строка Из УзелСтроки.ДочерниеУзлы Цикл
						Если НРег(Строка.ИмяУзла) <> "row" Тогда
							Продолжить;
						КонецЕсли;
						КодСтроки = Прав("00000" + Строка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 5);
						Если Контекст.ОТЧ.ПривестиЗначение(КодСтроки) = 0 Тогда 
							Продолжить;
						КонецЕсли;
						ОбязательныеКолонкиВСтроке = ОбязательныеКолонкиПоСекциям[КодСекции].Скопировать();
						
						Для Каждого Ячейка Из Строка.ДочерниеУзлы Цикл
							Если НРег(Ячейка.ИмяУзла) = "cell" Тогда
								inputType = Ячейка.Атрибуты.ПолучитьИменованныйЭлемент("inputType");
								Если inputType <> Неопределено И inputType.ЗначениеУзла = "1" Тогда
									НовСтр = Результат.Добавить();
									НовСтр.Секция = КодСекции;
									НовСтр.Строка = КодСтроки;
									НовСтр.Колонка = Прав("0000" + Ячейка.Атрибуты.ПолучитьИменованныйЭлемент("column").ЗначениеУзла, 4);
								КонецЕсли;
								Если inputType <> Неопределено И inputType.ЗначениеУзла <> "1" Тогда
									КолонкаКод = Прав("0000" + Ячейка.Атрибуты.ПолучитьИменованныйЭлемент("column").ЗначениеУзла, 4);
									Элт = ОбязательныеКолонкиВСтроке.НайтиПоЗначению(КолонкаКод);
									Если Элт <> Неопределено Тогда 
										ОбязательныеКолонкиВСтроке.Удалить(Элт);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Для Каждого Элт Из ОбязательныеКолонкиВСтроке Цикл
							НовСтр = Результат.Добавить();
							НовСтр.Секция = КодСекции;
							НовСтр.Строка = КодСтроки;
							НовСтр.Колонка = Элт.Значение;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Свернуть("Секция,Строка,Колонка");
	Возврат Результат;
КонецФункции

Функция СформироватьТаблицуЗапрещенныхДляВводаГраф(ДокументDOM)
	Результат = Новый ТаблицаЗначений;
	ОПС = ОбщегоНазначения.ОписаниеТипаСтрока(16);
	Результат.Колонки.Добавить("Секция", ОПС);
	Результат.Колонки.Добавить("Строка", ОПС);
	Результат.Колонки.Добавить("Колонка", ОПС);
	ЗапрещенныеКолонкиПоСекциям = Новый Соответствие;
	
	Для Каждого Узел Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы Цикл 
		Если НРег(Узел.ИмяУзла) = "sections" Тогда
			Для Каждого Секция Из Узел.ДочерниеУзлы Цикл
				Если НРег(Секция.ИмяУзла) <> "section" Тогда
					Продолжить;
				КонецЕсли;
				КодСекции = Прав("000" + Секция.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 3);
				ЗапрещенныеКолонкиПоСекциям.Вставить(КодСекции, Новый СписокЗначений);
				Для Каждого УзелКолонки Из Секция.ДочерниеУзлы Цикл 
					Если НРег(УзелКолонки.ИмяУзла) <> "columns" Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Колонка Из УзелКолонки.ДочерниеУзлы Цикл
						Если НРег(Колонка.ИмяУзла) <> "column" Тогда
							Продолжить;
						КонецЕсли;
						
						Если Колонка.ДочерниеУзлы.Количество() > 0 Тогда 
							inputType = Колонка.ДочерниеУзлы[0].Атрибуты.ПолучитьИменованныйЭлемент("inputType");
							Если inputType <> Неопределено И inputType.ЗначениеУзла = "0" Тогда
								ЗапрещенныеКолонкиПоСекциям[КодСекции].Добавить(Прав("0000" + Колонка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 4));
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Узел Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы Цикл 
		Если НРег(Узел.ИмяУзла) = "sections" Тогда
			Для Каждого Секция Из Узел.ДочерниеУзлы Цикл
				Если НРег(Секция.ИмяУзла) <> "section" Тогда
					Продолжить;
				КонецЕсли;
				КодСекции = Прав("000" + Секция.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 3);
				Для Каждого УзелСтроки Из Секция.ДочерниеУзлы Цикл 
					Если НРег(УзелСтроки.ИмяУзла) <> "rows" Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Строка Из УзелСтроки.ДочерниеУзлы Цикл
						Если НРег(Строка.ИмяУзла) <> "row" Тогда
							Продолжить;
						КонецЕсли;
						КодСтроки = Прав("00000" + Строка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 5);
						ЗапрещенныеКолонкиВСтроке = ЗапрещенныеКолонкиПоСекциям[КодСекции].Скопировать();
						
						Для Каждого Ячейка Из Строка.ДочерниеУзлы Цикл
							Если НРег(Ячейка.ИмяУзла) = "cell" Тогда
								inputType = Ячейка.Атрибуты.ПолучитьИменованныйЭлемент("inputType");
								Если inputType <> Неопределено И inputType.ЗначениеУзла = "0" Тогда
									НовСтр = Результат.Добавить();
									НовСтр.Секция = КодСекции;
									НовСтр.Строка = КодСтроки;
									НовСтр.Колонка = Прав("0000" + Ячейка.Атрибуты.ПолучитьИменованныйЭлемент("column").ЗначениеУзла, 4);
								КонецЕсли;
								Если inputType <> Неопределено И inputType.ЗначениеУзла <> "0" Тогда
									КолонкаКод = Прав("0000" + Ячейка.Атрибуты.ПолучитьИменованныйЭлемент("column").ЗначениеУзла, 4);
									Элт = ЗапрещенныеКолонкиВСтроке.НайтиПоЗначению(КолонкаКод);
									Если Элт <> Неопределено Тогда 
										ЗапрещенныеКолонкиВСтроке.Удалить(Элт);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Для Каждого Элт Из ЗапрещенныеКолонкиВСтроке Цикл
							НовСтр = Результат.Добавить();
							НовСтр.Секция = КодСекции;
							НовСтр.Строка = КодСтроки;
							НовСтр.Колонка = Элт.Значение;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Свернуть("Секция,Строка,Колонка");
	Возврат Результат;
КонецФункции

Функция ПолучитьТаблицуДанныеШаблона(Шаблон, Контекст) Экспорт 
	ТКС = ПолучитьПустуюТаблицуКонтрольныхСоотношений();
	КодыПериодичности = ПолучитьПустуюТаблицуКодовПериодичности();
	ТТС = ПолучитьПустуюТаблицуТиповСтрок();
	ТМС = ПолучитьПустуюТаблицуМножественныхСтрок();
	МаксКодКолонки = 0;
	СтрокиСекции = Новый Соответствие;
	ГрафыСекции = Новый Соответствие;
	Контекст.Вставить("СписокПолейТитула", Новый Соответствие);
	Контекст.Вставить("ЗначенияПолейТитула", Новый Соответствие);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Шаблон); 
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Для Каждого Атрибут Из ДокументDOM.ДочерниеУзлы[0].Атрибуты Цикл
		Если НРег(Атрибут.ИмяУзла) = "idp" Тогда
			Контекст.Вставить("Периодичность", Прав("00" + Атрибут.ЗначениеУзла, 2));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Узел Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы Цикл 
		Если НРег(Узел.ИмяУзла) = "settings" Тогда
			Для Каждого Настройка Из Узел.ДочерниеУзлы Цикл
				Если НРег(Настройка.ИмяУзла) = "validation" Тогда
					Если Настройка.ДочерниеУзлы.Количество() = 1
						И НРег(Настройка.ПервыйДочерний.ЗначениеУзла) = "skip" Тогда 
					
						Контекст.ВыполнятьПроверку = Ложь;
					КонецЕсли;
				ИначеЕсли НРег(Настройка.ИмяУзла) = "notempty" Тогда
					
					Если Настройка.ДочерниеУзлы.Количество() = 1
						И НРег(Настройка.ПервыйДочерний.ЗначениеУзла) = "false" Тогда 
					
						Контекст.ПроверкаОтчетаНаПустоту = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НРег(Узел.ИмяУзла) = "title" Тогда
			Для Каждого ПолеТитула Из Узел.ДочерниеУзлы Цикл
				УзелПоле = ПолеТитула.Атрибуты.ПолучитьИменованныйЭлемент("field");
				УзелИмя = ПолеТитула.Атрибуты.ПолучитьИменованныйЭлемент("name");
				Если УзелПоле <> Неопределено И УзелИмя <> Неопределено Тогда 
					Контекст.СписокПолейТитула.Вставить(УзелПоле.ЗначениеУзла, УзелИмя.ЗначениеУзла);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НРег(Узел.ИмяУзла) = "sections" Тогда
			Для Каждого Секция Из Узел.ДочерниеУзлы Цикл
				Если НРег(Секция.ИмяУзла) <> "section" Тогда
					Продолжить;
				КонецЕсли;
				КодСекции = Прав("000" + Секция.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 3);
				СтрокиСекции.Вставить(КодСекции, Новый Соответствие);
				ГрафыСекции.Вставить(КодСекции, Новый Соответствие);
				Для Каждого Строка Из Секция.ДочерниеУзлы Цикл
					Если НРег(Строка.ИмяУзла) = "rows" Тогда
						Для Каждого Строка Из Строка.ДочерниеУзлы Цикл
							Если НРег(Строка.ИмяУзла) = "row" Тогда
								ТипСтроки = Строка.Атрибуты.ПолучитьИменованныйЭлемент("type").ЗначениеУзла;
								Если ВРег(ТипСтроки) = "M" Или ВРег(ТипСтроки) = "F" Тогда 
									НовСтр = ТТС.Добавить();
									НовСтр.section = КодСекции;
									НовСтр.row = Прав("00000" + Строка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 5);
									НовСтр.rowtype = ТипСтроки;
									Если ВРег(ТипСтроки) = "M" Тогда
										Если Строка.Атрибуты.ПолучитьИменованныйЭлемент("grv") = Неопределено Тогда 
											НовСтр.rowtype = "F";
										Иначе
											Для Инд = 1 По СтрЧислоВхождений(Строка.Атрибуты.ПолучитьИменованныйЭлемент("grv").ЗначениеУзла, ",") + 1 Цикл 
												НовСтр["s" + Инд + "_isPresent"] = Истина;
											КонецЦикла;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								Если ВРег(ТипСтроки) = "M" И Строка.Атрибуты.ПолучитьИменованныйЭлемент("grv") <> Неопределено Тогда 
									НовСтр = ТМС.Добавить();
									НовСтр.section = КодСекции;
									НовСтр.row = Прав("00000" + Строка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 5);
								КонецЕсли;
								СтрокиСекции[КодСекции].Вставить(Прав("00000" + Строка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 5));
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли НРег(Строка.ИмяУзла) = "columns" Тогда
						Для Каждого Колонка Из Строка.ДочерниеУзлы Цикл
							Если НРег(Колонка.ИмяУзла) = "column" Тогда
								ТипСтроки = Колонка.Атрибуты.ПолучитьИменованныйЭлемент("type").ЗначениеУзла;
								Если ВРег(ТипСтроки) = "Z" Или ВРег(ТипСтроки) = "F" Тогда
									КодКолонки = Контекст.ОТЧ.ПривестиЗначение(Колонка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла);
									Если КодКолонки > МаксКодКолонки Тогда 
										МаксКодКолонки = КодКолонки;
									КонецЕсли;
								КонецЕсли;
								ГрафыСекции[КодСекции].Вставить(Прав("0000" + Колонка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 4), Истина);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Узел Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы Цикл 
		Если НРег(Узел.ИмяУзла) = "controls" Тогда
			Для Каждого Контроль Из Узел.ДочерниеУзлы Цикл 
				НовСтр = ТКС.Добавить();
				НовСтр.precision = 2;
				НовСтр.tip = 1;
				Для Каждого Атрибут Из Контроль.Атрибуты Цикл
					НовСтр[Атрибут.ИмяУзла] = Атрибут.ЗначениеУзла;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли НРег(Узел.ИмяУзла) = "dics" Тогда
			Для Каждого Справочник Из Узел.ДочерниеУзлы Цикл 
				АтрИД = Справочник.Атрибуты.ПолучитьИменованныйЭлемент("id");
				Если АтрИД <> Неопределено И НРег(АтрИД.ЗначениеУзла) = "s_mes" Тогда 
					Инд = 0;
					Для Каждого ИдентификаторПериода Из Справочник.ДочерниеУзлы Цикл 
						АтрИД = ИдентификаторПериода.Атрибуты.ПолучитьИменованныйЭлемент("id");
						Если АтрИД <> Неопределено Тогда
							Инд = Инд + 1;
							НовСтр = КодыПериодичности.Добавить();
							НовСтр.id = АтрИД.ЗначениеУзла;
							Если Контекст.Свойство("Периодичность") Тогда 
								НовСтр.alt_id = Контекст.Периодичность + Прав("00" + Инд, 2);
							Иначе
								НовСтр.alt_id = АтрИД.ЗначениеУзла;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТТС.Свернуть("section,row,rowtype,s1_isPresent,s2_isPresent,s3_isPresent,s1,s2,s3");
	ТМС.Свернуть("section,row");
	Контекст.Вставить("ТаблицаКонтрольныхСоотношений", ТКС);
	Контекст.Вставить("ТаблицаТиповСтрок", ТТС);
	Контекст.Вставить("ТаблицаМножественныхСтрок", ТМС);
	Контекст.Вставить("КоличествоКолонок", МаксКодКолонки);
	Контекст.Вставить("КодыПериодов", КодыПериодичности);
	Контекст.Вставить("РезультатПроверки", ПолучитьПустуюТаблицуПроверокКонтролей());
	Контекст.Вставить("ЗапрещенныеДляВводаГрафы", СформироватьТаблицуЗапрещенныхДляВводаГраф(ДокументDOM));
	Контекст.Вставить("ОбязательныеДляВводаГрафы", СформироватьТаблицуОбязательныхДляВводаГраф(ДокументDOM, Контекст));
	Контекст.Вставить("СтрокиСекции", СтрокиСекции);
	Контекст.Вставить("ГрафыСекции", ГрафыСекции);
	Возврат Истина;
КонецФункции

// По результатам перебора всех шаблонов Росстата нашли такие типы условий:
// (&NP in(1,2,3,4,5,6,7,8,9,10,11))
// (&NP>1  ),(&NP=1  ),(&NP>=1  ),(&NP<>3  ),(&NP<3  ),(&NP<=3  )
// (&NP=1 or &NP=3)
// (&NP in(1203,1206,1209,1212))
Функция ПроверитьУсловиеНаПериод(Контекст, УсловиеНаПериод) 
	Если Не ЗначениеЗаполнено(УсловиеНаПериод) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		УсловиеНаПериодПреобразованное = ВРег(УсловиеНаПериод);
		Если СтрНайти(УсловиеНаПериодПреобразованное, "AND") <> 0 Тогда 
			УсловиеНаПериодПреобразованное = "(" + СтрЗаменить(УсловиеНаПериодПреобразованное, "AND", ") И (") + ")";
		КонецЕсли;
		Если СтрНайти(УсловиеНаПериодПреобразованное, "OR") <> 0 Тогда 
			УсловиеНаПериодПреобразованное = "(" + СтрЗаменить(УсловиеНаПериодПреобразованное, "OR", ") ИЛИ (") + ")";
		КонецЕсли;
		Пока Истина Цикл 
			ИндексИн = СтрНайти(УсловиеНаПериодПреобразованное, "IN");
			Если ИндексИн = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			ИндОткр = 0;
			ИндЗакр = 0;
			Итер = 2;
			Пока ИндОткр = 0 Или ИндЗакр = 0 Цикл 
				Если Сред(УсловиеНаПериодПреобразованное, ИндексИн + Итер, 1) = "(" И ИндОткр = 0 Тогда 
					ИндОткр = Итер;
				ИначеЕсли Сред(УсловиеНаПериодПреобразованное, ИндексИн + Итер, 1) = ")" И ИндЗакр = 0 Тогда 
					Если ИндОткр = 0 Тогда 
						ВызватьИсключение "";
					КонецЕсли;
					ИндЗакр = Итер;
				КонецЕсли;
				
				Итер = Итер + 1;
				Если Итер > СтрДлина(УсловиеНаПериодПреобразованное) Тогда 
					ВызватьИсключение "";
				КонецЕсли;
				Если ИндОткр <> 0 И ИндЗакр <> 0 Тогда 
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Условие = "";
			Для Каждого Период Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Сред(УсловиеНаПериодПреобразованное, ИндексИн + ИндОткр + 1, ИндЗакр - ИндОткр - 1), ",", Истина) Цикл 
				Периоды = Контекст.КодыПериодов.НайтиСтроки(Новый Структура("id", СокрЛП(Период)));
				Если Периоды.Количество() > 0 Тогда 
					КаноническийПериод = Периоды[0].alt_id;
				Иначе
					КаноническийПериод = СокрЛП(Период);
				КонецЕсли;
				Условие = ?(ЗначениеЗаполнено(Условие), Условие + " ИЛИ ", "") + "(&NP=" + КаноническийПериод + ")";
			КонецЦикла;
			ИндексИнНачало = ИндексИн - 1;
			Пока ИндексИнНачало > 0 Цикл 
				Если Сред(УсловиеНаПериодПреобразованное, ИндексИнНачало, 3) = "&NP" Тогда 
					Прервать;
				КонецЕсли;
				ИндексИнНачало = ИндексИнНачало - 1;
			КонецЦикла;
			Если ИндексИнНачало <= 0 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			
			УсловиеНаПериодПреобразованное = "(" + Лев(УсловиеНаПериодПреобразованное, ИндексИнНачало - 1) + ") ИЛИ (" 
											+ Условие + ") ИЛИ (" + Сред(УсловиеНаПериодПреобразованное, ИндексИн + ИндЗакр + 1) + ")";
		КонецЦикла;
		
		ЕстьАльИд = Ложь;
		Для Каждого СтрПериоды Из Контекст.КодыПериодов Цикл 
			Если СтрНайти(УсловиеНаПериодПреобразованное, СтрПериоды.alt_id) > 0 Тогда 
				ЕстьАльИд = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Периоды = Контекст.КодыПериодов.НайтиСтроки(Новый Структура("id", СокрЛП(Контекст.ОсновнойПериод_Период)));
		Если Периоды.Количество() > 0 Тогда 
			Если ЕстьАльИд Тогда
				ОсновнойПериод_Период = Периоды[0].alt_id;
			Иначе
				ОсновнойПериод_Период = Периоды[0].id;
			КонецЕсли;
		Иначе
			Периоды = Контекст.КодыПериодов.НайтиСтроки(Новый Структура("alt_id", СокрЛП(Контекст.ОсновнойПериод_Период)));
			Если Периоды.Количество() > 0 Тогда
				Если ЕстьАльИд Тогда
					ОсновнойПериод_Период = Периоды[0].alt_id;
				Иначе
					ОсновнойПериод_Период = Периоды[0].id;
				КонецЕсли;
			Иначе
				ОсновнойПериод_Период = СокрЛП(Контекст.ОсновнойПериод_Период);
			КонецЕсли;
		КонецЕсли;
		
		УсловиеНаПериодПреобразованное = СтрЗаменить(УсловиеНаПериодПреобразованное, "()", "ЛОЖЬ");
		УсловиеНаПериодПреобразованное = СтрЗаменить(УсловиеНаПериодПреобразованное, "( )", "ЛОЖЬ");
		УсловиеНаПериодПреобразованное = СтрЗаменить(УсловиеНаПериодПреобразованное, "&NP", ОсновнойПериод_Период);
		Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(УсловиеНаПериодПреобразованное);
	Исключение
		Возврат Истина;
	КонецПопытки;
КонецФункции

Функция ЗаменитьСуммуВУсловии(Условие)
	УсловиеПреобразованное = НРег(Условие);
	Если СтрНайти(УсловиеПреобразованное, "sum") = 0 Тогда 
		Возврат УсловиеПреобразованное;
	КонецЕсли;
	
	Пока Истина Цикл 
		ИндексСум = СтрНайти(УсловиеПреобразованное, "sum(");
		СимволОткр = "(";
		СимволЗакр = ")";
		Если ИндексСум = 0 Тогда
			ИндексСум = СтрНайти(УсловиеПреобразованное, "sum{");
			СимволОткр = "{";
			СимволЗакр = "}";
			Если ИндексСум = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Инд = 4;
		Счетчик = 1;
		СтрДлинаУсловиеПреобразованное = СтрДлина(УсловиеПреобразованное);
		Пока Счетчик > 0 И Инд < СтрДлинаУсловиеПреобразованное Цикл 
			СледСимвол = Сред(УсловиеПреобразованное, ИндексСум + Инд, 1);
			Если СледСимвол = СимволОткр Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли СледСимвол = СимволЗакр Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		УсловиеПреобразованное = Лев(УсловиеПреобразованное, ИндексСум - 1) + "(@)" + Сред(УсловиеПреобразованное, ИндексСум + Инд);
	КонецЦикла;
	Возврат УсловиеПреобразованное;
КонецФункции

Функция ЭтоВариацияПоСпецификам(Контекст, Условие, Соотношение, Строки, Специфики)
	Если Не ЗначениеЗаполнено(Условие) Или Не ЭтоВариацияПоСтрокам(Контекст, Условие, Строки) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	АргументыУсловие = ПолучитьВсеАргументыКромеСуммированийВВыражении(Контекст, Условие);
	ВсеВариацииУсловие = Новый Соответствие;
	ВариацияЭталон = "";
	Для Каждого КЗ Из АргументыУсловие Цикл 
		Для Инд = 1 По 3 Цикл
			АргСкобок = ПолучитьАргументСкобки(КЗ.Ключ, Инд);
			Если Контекст.ОТЧ.ПривестиЗначение(АргСкобок) = 0 Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Вариация = "";
		Для Инд = 4 По 6 Цикл
			Вариация = Вариация + "[" + ПолучитьАргументСкобки(КЗ.Ключ, Инд) + "]";
		КонецЦикла;
		ВсеВариацииУсловие.Вставить(Вариация, Истина);
		ВариацияЭталон = Вариация;
	КонецЦикла;
	
	Если ВсеВариацииУсловие.Количество() <> 1 Или ВариацияЭталон = "[][][]" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	АргументыСоотношение = ПолучитьВсеАргументыКромеСуммированийВВыражении(Контекст, Соотношение);
	ВсеВариацииСоотношение = Новый Соответствие;
	Для Каждого КЗ Из АргументыСоотношение Цикл 
		Для Инд = 1 По 3 Цикл
			АргСкобок = ПолучитьАргументСкобки(КЗ.Ключ, Инд);
			Если Контекст.ОТЧ.ПривестиЗначение(АргСкобок) = 0 Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Вариация = "";
		Для Инд = 4 По 6 Цикл
			Вариация = Вариация + "[" + ПолучитьАргументСкобки(КЗ.Ключ, Инд) + "]";
		КонецЦикла;
		ВсеВариацииСоотношение.Вставить(Вариация, Истина);
	КонецЦикла;
	Если ВсеВариацииСоотношение.Количество() <> 1 Или ВсеВариацииСоотношение[ВариацияЭталон] <> Истина Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Специфики = Строки.Скопировать(, "s1,s2,s3,s1_isPresent,s2_isPresent,s3_isPresent");
	Инд = Специфики.Количество();
	Пока Инд > 0 Цикл 
		Инд = Инд - 1;
		Если Не Специфики[Инд]["s1_isPresent"] И Не Специфики[Инд]["s2_isPresent"] И Не Специфики[Инд]["s3_isPresent"] Тогда 
			Специфики.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	Специфики.Свернуть("s1,s2,s3,s1_isPresent,s2_isPresent,s3_isPresent");
	Если Специфики.Количество() = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ЭтоВариацияПоСтрокам(Контекст, Условие, Строки)
	Аргументы = ПолучитьВсеАргументыКромеСуммированийВВыражении(Контекст, Условие);
	ДополнитьСтрокамиПрошлогоПериода = Контекст.Свойство("ПредыдущийПериод_ДанныеОтчета") 
								И СтрНайти(Условие, "{{") > 0
								И Аргументы.Количество() = 1;
	
	ЕстьВариация = Ложь;
	Для Каждого КЗ Из Аргументы Цикл 
		АргСкобок = ПолучитьАргументСкобки(КЗ.Ключ, 1);
		Если Контекст.ОТЧ.ПривестиЗначение(АргСкобок) = 0 Или СтрНайти(АргСкобок, ",") > 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		АргСкобок = ПолучитьАргументСкобки(КЗ.Ключ, 3);
		Если Контекст.ОТЧ.ПривестиЗначение(АргСкобок) = 0 Или СтрНайти(АргСкобок, ",") > 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Для Инд = 2 По 6 Цикл
			Если Инд = 3 Тогда 
				Продолжить;
			КонецЕсли;
			
			Специфика = ПолучитьАргументСкобки(КЗ.Ключ, Инд);
			Если Не ЗначениеЗаполнено(Специфика) Тогда 
				Прервать;
			КонецЕсли;
			Если СтрНайти(Специфика, "-") > 0 Или СтрНайти(Специфика, ",") > 0 Или СтрНайти(Специфика, "*") > 0 Тогда 
				ЕстьВариация = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЕстьВариация Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Строки = Контекст.ВариацииСтрок;
	Строки.Очистить();
	
	Для Каждого Аргумент Из ПолучитьВсеАргументыВыражения(Контекст, Условие) Цикл 
		Если СтрНачинаетсяС(Аргумент.Ключ, "{{") Тогда 
			ТаблицаДанных = Контекст.ПредыдущийПериод_ДанныеОтчета;
			ТаблицаДанныхМножественныеСтроки = Контекст.ПредыдущийПериод_ДанныеОтчета_МножественныеСтроки;
		Иначе
			ТаблицаДанных = Контекст.ОсновнойПериод_ДанныеОтчета;
			ТаблицаДанныхМножественныеСтроки = Контекст.ОсновнойПериод_ДанныеОтчета_МножественныеСтроки;
		КонецЕсли;
		
		ОбработкаВставкиСтрокиВТаблицуИзФормата(Контекст, Аргумент.Ключ, Строки);
		Если СтрЧислоВхождений(Аргумент.Ключ, "[") > 3 Тогда 
			Для Каждого СтрокаТаблицы Из ТаблицаДанныхМножественныеСтроки Цикл
				ОбработкаВставкиСтрокиВТаблицу(Контекст, СтрокаТаблицы, Аргумент.Ключ, Строки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ДополнитьСтрокамиПрошлогоПериода = Истина Тогда
		ОбработкаВставкиСтрокиВТаблицуИзФормата(Контекст, Аргумент.Ключ, Строки);
		Если СтрЧислоВхождений(Аргумент.Ключ, "[") > 3 Тогда 
			Для Каждого СтрокаТаблицы Из Контекст.ПредыдущийПериод_ДанныеОтчета_МножественныеСтроки Цикл
				ОбработкаВставкиСтрокиВТаблицу(Контекст, СтрокаТаблицы, Аргумент.Ключ, Строки);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Строки.Свернуть("section,row,s1,s2,s3,s1_isPresent,s2_isPresent,s3_isPresent");
	Возврат Истина;
КонецФункции

Функция ЭтоЗапрещеннаяДляВводаКолонка(Контекст, Секция, Строка, Колонка)
	Возврат Контекст.ЗапрещенныеДляВводаГрафы.НайтиСтроки(Новый Структура("Секция, Строка, Колонка", Секция, Строка, Колонка)).Количество() > 0;
КонецФункции

Функция ЭтоВариацияПоГрафам(Контекст, Условие, Графы)
	УсловиеПреобразованное = ЗаменитьСуммуВУсловии(Условие);
	Аргументы = Новый Соответствие;
	ЕстьПредидущийПериод = СтрНайти(УсловиеПреобразованное, "{{") > 0;
	Пока Истина Цикл
		ИндексОткр = СтрНайти(УсловиеПреобразованное, "{");
		Если ИндексОткр = 0 Тогда 
			Прервать;
		КонецЕсли;
		Если ЕстьПредидущийПериод И Сред(УсловиеПреобразованное, ИндексОткр, 2) = "{{" Тогда 
			ИндексЗакр = СтрНайти(УсловиеПреобразованное, "}}");
			Аргумент = Сред(УсловиеПреобразованное, ИндексОткр + 2, ИндексЗакр - ИндексОткр - 2);
			УсловиеПреобразованное = Сред(УсловиеПреобразованное, ИндексЗакр + 2);
		Иначе
			ИндексЗакр = СтрНайти(УсловиеПреобразованное, "}");
			Аргумент = Сред(УсловиеПреобразованное, ИндексОткр + 1, ИндексЗакр - ИндексОткр - 1);
			УсловиеПреобразованное = Сред(УсловиеПреобразованное, ИндексЗакр + 1);
		КонецЕсли;
		Аргументы.Вставить(Аргумент);
	КонецЦикла;
	
	ВариантыГраф = Новый Соответствие;
	ИтогГрСтр = "";
	Для Каждого КЗ Из Аргументы Цикл
		АргСкобок = ПолучитьАргументСкобки(КЗ.Ключ, 1);
		Если Контекст.ОТЧ.ПривестиЗначение(АргСкобок) = 0 Или СтрНайти(АргСкобок, ",") > 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		СекцияАргумента = Прав("000" + АргСкобок, 3);
		
		АргСкобок = ПолучитьАргументСкобки(КЗ.Ключ, 2);
		Если Контекст.ОТЧ.ПривестиЗначение(АргСкобок) = 0 Или СтрНайти(АргСкобок, ",") > 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		СтрокаАргумента = Прав("00000" + АргСкобок, 5);
		
		Контекст.СтруктураПоискаСекцияСтрока.section = СекцияАргумента;
		Контекст.СтруктураПоискаСекцияСтрока.row = СтрокаАргумента;
		Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(Контекст.СтруктураПоискаСекцияСтрока).Количество() > 0 Тогда 
			Для Инд = 4 По 6 Цикл 
				Специфика = ПолучитьАргументСкобки(КЗ.Ключ, Инд);
				Если ЗначениеЗаполнено(Специфика) И СтрНайти(Специфика, "-") > 0 Или СтрНайти(Специфика, ",") > 0 Или СтрНайти(Специфика, "*") > 0 Тогда 
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ГрСтр = ПолучитьАргументСкобки(КЗ.Ключ, 3);
		Если Не (СтрНайти(ГрСтр, "-") > 0 Или СтрНайти(ГрСтр, ",") > 0 Или СтрНайти(ГрСтр, "*") > 0) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Контекст.СписокЗначений.Очистить();
		Для Каждого Кол Из Контекст.ОсновнойПериод_ДанныеОтчета.Колонки Цикл 
			КолИмя = Сред(Кол.Имя, 4);
			КолЧисло = Контекст.ОТЧ.ПривестиЗначение(КолИмя);
			Если Не КолЧисло = 0 
				И ЧислоВходитВДиапазон(Контекст, КолЧисло, ГрСтр)
				И Не ЭтоЗапрещеннаяДляВводаКолонка(Контекст, СекцияАргумента, СтрокаАргумента, КолИмя)
				И Контекст.ГрафыСекции[СекцияАргумента][КолИмя] = Истина Тогда 
				
				Если Контекст.СписокЗначений.НайтиПоЗначению(КолИмя) = Неопределено Тогда 
					Контекст.СписокЗначений.Добавить(КолИмя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Контекст.СписокЗначений.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		ИтогГрСтр = "";
		Для Каждого Зн Из Контекст.СписокЗначений Цикл 
			ИтогГрСтр = ИтогГрСтр + Зн.Значение;
		КонецЦикла;
		ВариантыГраф.Вставить(ИтогГрСтр);
	КонецЦикла;
	
	Графы = ИтогГрСтр;
	Возврат (ВариантыГраф.Количество() = 1);
КонецФункции

Функция ЧислоВходитВДиапазон(Контекст, Число, Диапазон)
	Если Диапазон = "*" Тогда 
		Возврат Истина;
	КонецЕсли;
	Если ТипЗнч(Число) <> Тип("Число") Тогда 
		ПриведенноеЧисло = Контекст.ОТЧ.ПривестиЗначение(Число);
	Иначе
		ПриведенноеЧисло = Число;
	КонецЕсли;
	
	Если СтрНайти(Диапазон, ",") > 0 Тогда 
		Для Каждого Терм Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Диапазон, ",") Цикл 
			Если ПриведенноеЧисло = Контекст.ОТЧ.ПривестиЗначение(Терм) Тогда 
				Возврат Истина;
			ИначеЕсли СтрНайти(Терм, "-") > 0 Тогда
				ВерхНиз = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Терм, "-");
				Если ПриведенноеЧисло >= Контекст.ОТЧ.ПривестиЗначение(ВерхНиз[0]) И ПриведенноеЧисло <= Контекст.ОТЧ.ПривестиЗначение(ВерхНиз[1]) Тогда 
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПриведенноеЧисло = Контекст.ОТЧ.ПривестиЗначение(Диапазон) Тогда 
		Возврат Истина;
	Иначе
		ВерхНиз = СтрНайти(Диапазон, "-");
		Если ВерхНиз > 0 Тогда
			Если ПриведенноеЧисло >= Контекст.ОТЧ.ПривестиЗначение(Лев(Диапазон, ВерхНиз - 1)) И ПриведенноеЧисло <= Контекст.ОТЧ.ПривестиЗначение(Сред(Диапазон, ВерхНиз + 1)) Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция СпецификаВходитВДиапазон(Специфика, Диапазон, Контекст)
	СпецификаСр = НРег(Специфика);
	Диапазон = НРег(Диапазон);
	Если Диапазон = "*" Или СпецификаСр = Диапазон Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если СтрНайти(Диапазон, ",") > 0 Тогда
		Для Каждого Терм Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Диапазон, ",") Цикл 
			Если СпецификаСр = Терм Тогда 
				Возврат Истина;
			ИначеЕсли СтрНайти(Терм, "-") > 0 Тогда
				ВерхНиз = СтрНайти(Терм, "-");
				чСпецифика = Контекст.ОТЧ.ПривестиЗначение(СпецификаСр);
				чНиз = Контекст.ОТЧ.ПривестиЗначение(Лев(Терм, ВерхНиз - 1));
				чВерх = Контекст.ОТЧ.ПривестиЗначение(Сред(Терм, ВерхНиз + 1));
				Если ЗначениеЗаполнено(чСпецифика) И ЗначениеЗаполнено(чНиз) И ЗначениеЗаполнено(чВерх) Тогда 
					Если чСпецифика >= чНиз И чСпецифика <= чВерх Тогда 
						Возврат Истина;
					КонецЕсли;
				ИначеЕсли СпецификаСр >= Лев(Терм, ВерхНиз - 1) И СпецификаСр <= Сред(Терм, ВерхНиз + 1) Тогда 
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если СпецификаСр = Диапазон Тогда 
			Возврат Истина;
		ИначеЕсли СтрНайти(Диапазон, "-") > 0 Тогда
			ВерхНиз = СтрНайти(Диапазон, "-");
			Если СпецификаСр >= Лев(Диапазон, ВерхНиз - 1) И СпецификаСр <= Сред(Диапазон, ВерхНиз + 1) Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Процедура ПодстановкаИзвестныхСкалярныхАргументов(Контекст, Условие, РазрядностьОкругления)
	ВсеАргументы = ПолучитьВсеАргументыВыражения(Контекст, Условие);
	Для Каждого Арг Из ВсеАргументы Цикл
		Если СтрЧислоВхождений(Арг.Ключ, "[") > 3
			Или СтрЧислоВхождений(Условие, Арг.Ключ) <> 1 Тогда 
			
			Продолжить;
		КонецЕсли;
		
		СекцияАрг = ПолучитьАргументСкобки(Арг.Ключ, 1);
		СтрокаАрг = ПолучитьАргументСкобки(Арг.Ключ, 2);
		КолонкаАрг = ПолучитьАргументСкобки(Арг.Ключ, 3);
		Если Контекст.ОТЧ.ПривестиЗначение(СекцияАрг) = 0 Или СтрНайти(СекцияАрг, ",") > 0
			Или Контекст.ОТЧ.ПривестиЗначение(СтрокаАрг) = 0 Или СтрНайти(СтрокаАрг, ",") > 0
			Или Контекст.ОТЧ.ПривестиЗначение(КолонкаАрг) = 0 Или СтрНайти(КолонкаАрг, ",") > 0 Тогда 
			
			Продолжить;
		КонецЕсли;
		
		Контекст.СтруктураПоискаСекцияСтрока.row = Прав("00000" + СтрокаАрг, 5);
		Контекст.СтруктураПоискаСекцияСтрока.section = Прав("000" + СекцияАрг, 3);
		Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(Контекст.СтруктураПоискаСекцияСтрока).Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ИндексВх = СтрНайти(Условие, Арг.Ключ);
		Если СтрНачинаетсяС(Сред(Условие, ИндексВх - 2), "{{") Тогда 
			Таблица = "ПредыдущийПериод_ДанныеОтчета";
		ИначеЕсли СтрНачинаетсяС(Сред(Условие, ИндексВх - 1), "{") Тогда 
			Таблица = "ОсновнойПериод_ДанныеОтчета";
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтрокаСДанными = Контекст[Таблица].НайтиСтроки(Контекст.СтруктураПоискаСекцияСтрока);
		Если СтрокаСДанными.Количество() = 1 Тогда
			СтрокаСДанными = СтрокаСДанными[0];
			Если СтрокаСДанными["col" + Прав("0000" + КолонкаАрг, 4) + "_isPresent"] Тогда 
				ЗнПодст = СтрокаСДанными["col" + Прав("0000" + КолонкаАрг, 4)];
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если Таблица = "ОсновнойПериод_ДанныеОтчета" Тогда 
				Условие = Лев(Условие, ИндексВх - 2) + ЗнПодст + Сред(Условие, ИндексВх + 1 + СтрДлина(Арг.Ключ));
			Иначе
				Условие = Лев(Условие, ИндексВх - 3) + ЗнПодст + Сред(Условие, ИндексВх + 2 + СтрДлина(Арг.Ключ));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЭтоСкалярноеУсловие(Контекст, Условие)
	УсловиеПреобразованное = ВРег(Условие);
	УсловиеПреобразованное = СтрЗаменить(УсловиеПреобразованное, " ", "");
	УсловиеПреобразованное = СтрЗаменить(УсловиеПреобразованное, Символы.НПП, "");
	Пока Истина Цикл 
		ИндексСум = СтрНайти(УсловиеПреобразованное, "SUM(");
		Если ИндексСум = 0 Тогда 
			Прервать;
		КонецЕсли;
		
		Инд = 4;
		Счетчик = 1;
		Пока Счетчик > 0 И Инд < СтрДлина(УсловиеПреобразованное) Цикл 
			Если Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "(" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = ")" Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		УсловиеПреобразованное = Лев(УсловиеПреобразованное, ИндексСум - 1) + "(@)" + Сред(УсловиеПреобразованное, ИндексСум + Инд);
	КонецЦикла;
	
	Пока Истина Цикл 
		ИндексСум = СтрНайти(УсловиеПреобразованное, "SUM");
		Если ИндексСум = 0 Тогда 
			Прервать;
		КонецЕсли;
		
		Инд = 4;
		Счетчик = 1;
		Пока Счетчик > 0 И Инд < СтрДлина(УсловиеПреобразованное) Цикл 
			Если Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "{" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "}" Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		УсловиеПреобразованное = Лев(УсловиеПреобразованное, ИндексСум - 1) + "(@)" + Сред(УсловиеПреобразованное, ИндексСум + Инд);
	КонецЦикла;
	
	Пока Истина Цикл
		ИндексСум = СтрНайти(УсловиеПреобразованное, "{");
		Если ИндексСум = 0 Тогда 
			Возврат Истина;
		КонецЕсли;
		
		Инд = 1;
		Счетчик = 1;
		Пока Счетчик > 0 И Инд < СтрДлина(УсловиеПреобразованное) Цикл 
			Если Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "{" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "}" Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		Аргумент = Сред(УсловиеПреобразованное, ИндексСум, Инд);
		Отбор = Новый Структура;
		Для Итер = 1 По 3 Цикл 
			ОткрСк = СтрНайти(Аргумент, "[", НаправлениеПоиска.СНачала, 1, Итер);
			ЗакрСк = СтрНайти(Аргумент, "]", НаправлениеПоиска.СНачала, 1, Итер);
			Если ОткрСк = 0 Или ЗакрСк = 0 Тогда 
				Возврат Ложь;
			КонецЕсли;
			ТекОперанд = Сред(Аргумент, ОткрСк + 1, ЗакрСк - ОткрСк - 1);
			Если СтрНайти(ТекОперанд, "-") <> 0 Или СтрНайти(ТекОперанд, ",") <> 0 Или СтрНайти(ТекОперанд, "*") <> 0 Тогда 
				Возврат Ложь;
			КонецЕсли;
			Если Итер = 1 Тогда 
				Отбор.Вставить("section", Прав("000" + ТекОперанд, 3));
			ИначеЕсли Итер = 2 Тогда 
				Отбор.Вставить("row", Прав("00000" + ТекОперанд, 5));
			КонецЕсли;
		КонецЦикла;
		
		Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(Отбор).Количество() > 0 Тогда 
			Если СтрНайти(Аргумент, "-") <> 0 Или СтрНайти(Аргумент, ",") <> 0 Или СтрНайти(Аргумент, "*") <> 0 Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		УсловиеПреобразованное = Лев(УсловиеПреобразованное, ИндексСум - 1) + "(@)" + Сред(УсловиеПреобразованное, ИндексСум + Инд);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ЗаменитьВыражение(ИсходнаяСтрока, НаЧтоЗаменяем, ЧтоЗаменили, ОткрывающийСимвол)
	ИндексОткр = СтрНайти(ИсходнаяСтрока, ОткрывающийСимвол);
	Если ИндексОткр = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ОткрывающийСимвол = "(" Тогда 
		ЗакрывающийСимвол = ")";
	ИначеЕсли ОткрывающийСимвол = "{" Тогда 
		ЗакрывающийСимвол = "}";
	ИначеЕсли ОткрывающийСимвол = "{{" Тогда 
		ЗакрывающийСимвол = "}}";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ИндексЗакр = СтрНайти(ИсходнаяСтрока, ЗакрывающийСимвол, НаправлениеПоиска.СНачала, ИндексОткр);
	Если ИндексЗакр = 0 Тогда 
		ВызватьИсключение "";
	КонецЕсли;
	ЧтоЗаменили = Сред(ИсходнаяСтрока, ИндексОткр, ИндексЗакр - ИндексОткр + СтрДлина(ЗакрывающийСимвол));
	ИсходнаяСтрока = Лев(ИсходнаяСтрока, ИндексОткр - 1) + НаЧтоЗаменяем + Сред(ИсходнаяСтрока, ИндексЗакр + СтрДлина(ЗакрывающийСимвол));
	Возврат Истина;
КонецФункции

Функция ВычислитьСкалярноеУсловие(Условие, Контекст, РазрядностьОкругления = 2)
	ПреобразованноеУсловие = ПривестиВыражениеККаноническомуВиду(Условие, РазрядностьОкругления);
	СтрДлПреобразованноеУсловие = СтрДлина(ПреобразованноеУсловие);
	КоличествоСуммирований = СтрЧислоВхождений(ПреобразованноеУсловие, "sum(");
	МассивАргументовСуммирований = Новый Массив;
	Для Инд = 1 По КоличествоСуммирований Цикл 
		ИндНач = СтрНайти(ПреобразованноеУсловие, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
		ИндТек = ИндНач + 4;
		Счетчик = 1;
		Пока ИндТек < СтрДлПреобразованноеУсловие Цикл 
			Если Сред(ПреобразованноеУсловие, ИндТек, 1) = "(" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(ПреобразованноеУсловие, ИндТек, 1) = ")" Тогда 
				Счетчик = Счетчик - 1;
				Если Счетчик = 0 Тогда 
					Прервать;
				КонецЕсли;
			КонецЕсли;
			ИндТек = ИндТек + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		АргументыСуммирований = Новый Структура;
		АргументыСуммирований.Вставить("НачалоВыражения", ИндНач);
		АргументыСуммирований.Вставить("ДлинаВыражения", ИндТек - ИндНач);
		СтрРез = Строка(ВычислитьАргументСуммированияВУсловии(Сред(ПреобразованноеУсловие, ИндНач+3, ИндТек - ИндНач - 2), Контекст));
		СтрРез = СтрЗаменить(СтрРез, ",", ".");
		СтрРез = СтрЗаменить(СтрРез, " ", "");
		СтрРез = СтрЗаменить(СтрРез, Символы.НПП, "");
		АргументыСуммирований.Вставить("Результат", СтрРез);
		МассивАргументовСуммирований.Вставить(Инд - 1, АргументыСуммирований);
	КонецЦикла;
	
	ПроверкаВыражения(ПреобразованноеУсловие);
	Для Инд = 1 По КоличествоСуммирований Цикл
		АргументСуммирования = МассивАргументовСуммирований[КоличествоСуммирований - Инд];
		ПреобразованноеУсловие = Лев(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения - 1) + АргументСуммирования.Результат
								+ Сред(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения + АргументСуммирования.ДлинаВыражения + 1);
		ПроверкаВыражения(ПреобразованноеУсловие);
	КонецЦикла;
	
	Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	Для Каждого КЗ Из Контекст.ОперацииСравнения Цикл
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "|=|", "=");
	ПреобразованноеУсловие = ЗаменитьСкалярныеАргументыВВыражении(ПреобразованноеУсловие, Контекст);
	ДополнительныеПреобразованияУсловия(ПреобразованноеУсловие);
	Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПреобразованноеУсловие);
КонецФункции

Функция ВычислитьУсловиеПоГрафам(Условие, Контекст, РазрядностьОкругления = 2, Графы = Неопределено)
	ГрафыИтер = Графы;
	
	Пока Истина Цикл
		Кол = Лев(ГрафыИтер, 4);
		ГрафыИтер = Сред(ГрафыИтер, 5);
		Если Контекст.ОТЧ.ПривестиЗначение(Кол) = 0 Тогда 
			Прервать;
		КонецЕсли;
		
		ПреобразованноеУсловие = ПривестиВыражениеККаноническомуВиду(Условие, РазрядностьОкругления);
		СтрДлПреобразованноеУсловие = СтрДлина(ПреобразованноеУсловие);
		КоличествоСуммирований = СтрЧислоВхождений(ПреобразованноеУсловие, "sum(");
		МассивАргументовСуммирований = Новый Массив;
		Для Инд = 1 По КоличествоСуммирований Цикл 
			ИндНач = СтрНайти(ПреобразованноеУсловие, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
			ИндТек = ИндНач + 4;
			Счетчик = 1;
			Пока ИндТек < СтрДлПреобразованноеУсловие Цикл 
				Если Сред(ПреобразованноеУсловие, ИндТек, 1) = "(" Тогда 
					Счетчик = Счетчик + 1;
				ИначеЕсли Сред(ПреобразованноеУсловие, ИндТек, 1) = ")" Тогда 
					Счетчик = Счетчик - 1;
					Если Счетчик = 0 Тогда 
						Прервать;
					КонецЕсли;
				КонецЕсли;
				ИндТек = ИндТек + 1;
			КонецЦикла;
			Если Счетчик <> 0 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			
			Контекст.СписокЗначений.Очистить();
			Контекст.СписокЗначений.Добавить(Кол);
			АргументыСуммирований = Новый Структура;
			АргументыСуммирований.Вставить("НачалоВыражения", ИндНач);
			АргументыСуммирований.Вставить("ДлинаВыражения", ИндТек - ИндНач);
			СтрРез = Строка(ВычислитьАргументСуммированияВУсловии(Сред(ПреобразованноеУсловие, ИндНач + 3, ИндТек - ИндНач - 2), Контекст, Контекст.СписокЗначений));
			СтрРез = СтрЗаменить(СтрРез, ",", ".");
			СтрРез = СтрЗаменить(СтрРез, " ", "");
			СтрРез = СтрЗаменить(СтрРез, Символы.НПП, "");
			АргументыСуммирований.Вставить("Результат", СтрРез);
			МассивАргументовСуммирований.Вставить(Инд - 1, АргументыСуммирований);
		КонецЦикла;
		
		ПроверкаВыражения(ПреобразованноеУсловие);
		Для Инд = 1 По КоличествоСуммирований Цикл
			АргументСуммирования = МассивАргументовСуммирований[КоличествоСуммирований - Инд];
			ПреобразованноеУсловие = Лев(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения - 1) + АргументСуммирования.Результат
									+ Сред(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения + АргументСуммирования.ДлинаВыражения + 1);
			ПроверкаВыражения(ПреобразованноеУсловие);
		КонецЦикла;
		
		Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		Для Каждого КЗ Из Контекст.ОперацииСравнения Цикл
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "|=|", "=");
		ПреобразованноеУсловие = ЗаменитьСкалярныеАргументыВВыражении(ПреобразованноеУсловие, Контекст, Кол);
		ДополнительныеПреобразованияУсловия(ПреобразованноеУсловие);
		Если Не ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПреобразованноеУсловие) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ЗаменитьСкалярныеАргументыВВыраженииПоСтроке(Выражение, Контекст, АргументПоискаСтроки)
	Аргументы = Новый Соответствие;
	Инд = 0;
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("{{,{", ",") Цикл 
		Пока Истина Цикл 
			Если СтрНайти(Выражение, Элт) = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			Инд = Инд + 1;
			ЧтоЗаменили = "";
			НаЧтоЗаменили = "%" + Инд + "%";
			Если Не ЗаменитьВыражение(Выражение, НаЧтоЗаменили, ЧтоЗаменили, Элт) Тогда 
				Прервать;
			КонецЕсли;
			Если ЧтоЗаменили = "" Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			Аргументы[НаЧтоЗаменили] = ЧтоЗаменили;
		КонецЦикла;
	КонецЦикла;
	ВыражениеПреобразованное = СтрЗаменить(Выражение, " ", "");
	ВыражениеПреобразованное = СтрЗаменить(ВыражениеПреобразованное, Символы.НПП, "");
	ПроверкаВыражения(ВыражениеПреобразованное);
	
	Для Каждого КЗ Из Аргументы Цикл 
		КолонкаНачало = СтрНайти(КЗ.Значение, "[", НаправлениеПоиска.СНачала, 1, 3);
		КолонкаКонец = СтрНайти(КЗ.Значение, "]", НаправлениеПоиска.СНачала, 1, 3);
		Колонка = "col" + Прав("0000" + Сред(КЗ.Значение, КолонкаНачало + 1, КолонкаКонец - КолонкаНачало - 1), 4);
		СекцияАрг = Прав("000" + ПолучитьАргументСкобки(КЗ.Значение, 1), 3);
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("section", АргументПоискаСтроки["section"]);
		Если СекцияАрг <> АргументПоискаСтроки["section"]
			И Контекст.ОТЧ.ПривестиЗначение(СекцияАрг) > 0 Тогда 
			СтруктураОтбора.section = СекцияАрг;
		КонецЕсли;
		СтруктураОтбора.Вставить("row", АргументПоискаСтроки["row"]);
		Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(СтруктураОтбора).Количество() > 0 Тогда
			Для Инд = 1 По 3 Цикл 
				Если АргументПоискаСтроки["s" + Инд + "_isPresent"] Тогда 
					СтруктураОтбора.Вставить("s" + Инд + "_isPresent", Истина);
					СтруктураОтбора.Вставить("s" + Инд, АргументПоискаСтроки["s" + Инд]);
				Иначе
					СтруктураОтбора.Вставить("s" + Инд + "_isPresent", Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		ПодставляемоеЗначение = "null";
		Таблица = ?(СтрНачинаетсяС(КЗ.Значение, "{{"), "ПредыдущийПериод_ДанныеОтчета", "ОсновнойПериод_ДанныеОтчета");
		ОтобранныеСтроки = Контекст[Таблица].НайтиСтроки(СтруктураОтбора);
		Для Каждого ОтобраннаяСтрока Из ОтобранныеСтроки Цикл 
			Если Контекст[Таблица].Колонки.Найти(Колонка) <> Неопределено
				И ОтобраннаяСтрока[Колонка + "_isPresent"] Тогда
				
				Если СтрокаВходитВДиапазон(Контекст, КЗ.Значение, ОтобраннаяСтрока) Тогда 
					ПодставляемоеЗначение = ОтобраннаяСтрока[Колонка];
					Прервать;
				КонецЕсли;
			КонецЕсли;
		Конеццикла;
		
		ВыражениеПреобразованное = СтрЗаменить(ВыражениеПреобразованное, КЗ.Ключ, ПодставляемоеЗначение);
	КонецЦикла;
	
	ПроверкаВыражения(ВыражениеПреобразованное);
	Возврат ВыражениеПреобразованное;
КонецФункции

Функция ЗаменитьСкалярныеАргументыВВыражении(Выражение, Контекст, Колонка = Неопределено, СтрокаОтбора = Неопределено)
	Аргументы = Новый Соответствие;
	Инд = 0;
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("{{,{", ",") Цикл 
		Пока Истина Цикл 
			Если СтрНайти(Выражение, Элт) = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			Инд = Инд + 1;
			ЧтоЗаменили = "";
			НаЧтоЗаменили = "%" + Инд + "%";
			Если Не ЗаменитьВыражение(Выражение, НаЧтоЗаменили, ЧтоЗаменили, Элт) Тогда 
				Прервать;
			КонецЕсли;
			Если ЧтоЗаменили = "" Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			Аргументы[НаЧтоЗаменили] = ЧтоЗаменили;
		КонецЦикла;
	КонецЦикла;
	ВыражениеПреобразованное = СтрЗаменить(Выражение, " ", "");
	ВыражениеПреобразованное = СтрЗаменить(ВыражениеПреобразованное, Символы.НПП, "");
	ПроверкаВыражения(ВыражениеПреобразованное);
	
	Для Каждого КЗ Из Аргументы Цикл 
		Секция = Прав("000" + ПолучитьАргументСкобки(КЗ.Значение, 1), 3);
		Строка = Прав("00000" + ПолучитьАргументСкобки(КЗ.Значение, 2), 5);
		Если ЗначениеЗаполнено(Колонка) Тогда 
			КолонкаОтбор = "col" + Прав("0000" + Колонка, 4);
		Иначе
			КолонкаОтбор = "col" + Прав("0000" + ПолучитьАргументСкобки(КЗ.Значение, 3), 4);
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("section", Секция);
		СтруктураОтбора.Вставить("row", Строка);
		
		Контекст.СтруктураПоискаСекцияСтрока.section = Секция;
		Контекст.СтруктураПоискаСекцияСтрока.row = Строка;
		Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(Контекст.СтруктураПоискаСекцияСтрока).Количество() > 0 Тогда 
			КоличествоСпецифик = СтрЧислоВхождений(КЗ.Значение, "[");
			Для Инд = 4 По КоличествоСпецифик Цикл
				Специфика = ВРег(ПолучитьАргументСкобки(КЗ.Значение, Инд));
				Если ЗначениеЗаполнено(Специфика) И СтрНайти(Специфика, "*") = 0 И СтрНайти(Специфика, "-") = 0 Тогда 
					СтруктураОтбора.Вставить("s" + (Инд - 3) + "_isPresent", Истина);
					СтруктураОтбора.Вставить("s" + (Инд - 3), Специфика);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПодставляемоеЗначение = "null";
		Таблица = ?(СтрНачинаетсяС(КЗ.Значение, "{{"), "ПредыдущийПериод_ДанныеОтчета", "ОсновнойПериод_ДанныеОтчета");
		ОтобранныеСтроки = Контекст[Таблица].НайтиСтроки(СтруктураОтбора);
		Если СтрокаОтбора <> Неопределено Тогда 
			ВремТаб = Контекст[Таблица].СкопироватьКолонки();
			Для Каждого ОтобраннаяСтр Из ОтобранныеСтроки Цикл 
				ЗаполнитьЗначенияСвойств(ВремТаб.Добавить(), ОтобраннаяСтр);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("section", СтрокаОтбора.section);
			СтруктураОтбора.Вставить("row", СтрокаОтбора.row);
			Для Инд = 4 По 6 Цикл
				СтруктураОтбора.Вставить("s" + (Инд - 3) + "_isPresent", СтрокаОтбора["s" + (Инд - 3) + "_isPresent"]);
				Если СтрокаОтбора["s" + (Инд - 3) + "_isPresent"] Тогда 
					СтруктураОтбора.Вставить("s" + (Инд - 3), СтрокаОтбора["s" + (Инд - 3)]);
				КонецЕсли;
			КонецЦикла;
			
			ОтобранныеСтроки = ВремТаб.НайтиСтроки(СтруктураОтбора);
		КонецЕсли;
		Если ОтобранныеСтроки.Количество() > 0 Тогда 
			Если Контекст[Таблица].Колонки.Найти(КолонкаОтбор) <> Неопределено
				И ОтобранныеСтроки[0][КолонкаОтбор + "_isPresent"] Тогда
				
				ПодставляемоеЗначение = ОтобранныеСтроки[0][КолонкаОтбор];
			КонецЕсли;
		КонецЕсли;
		
		ВыражениеПреобразованное = СтрЗаменить(ВыражениеПреобразованное, КЗ.Ключ, ПодставляемоеЗначение);
	КонецЦикла;
	
	ПроверкаВыражения(ВыражениеПреобразованное);
	Возврат ВыражениеПреобразованное;
КонецФункции

Функция ПолучитьЕдинственныйАргументВыражения(АргументСуммирования)
	Результат = АргументСуммирования;
	Замен = 0;
	ЧтоЗаменили = "";
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("{{,{", ",") Цикл 
		Пока Истина Цикл 
			Если СтрНайти(Результат, Элт) = 0 Тогда 
				Прервать;
			КонецЕсли;
			Если Не ЗаменитьВыражение(Результат, "", ЧтоЗаменили, Элт) Тогда 
				Прервать;
			КонецЕсли;
			Если ЧтоЗаменили = "" Или Замен = 1 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЧтоЗаменили;
КонецФункции

Функция СтрокаВходитВДиапазон(Контекст, Выборка, Стр)
	Контекст.СтруктураПоискаСекцияСтрока.section = Стр.section;
	Контекст.СтруктураПоискаСекцияСтрока.row = Стр.row;
	Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(Контекст.СтруктураПоискаСекцияСтрока).Количество() > 0 Тогда 
		КоличествоСпецифик = СтрЧислоВхождений(Выборка, "[");
		Для Инд = 4 По КоличествоСпецифик Цикл 
			Если Не Стр["s" + (Инд-3) + "_isPresent"] Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		КоличествоСпецифик = 0;
	КонецЕсли;
	
	ОТЧ = Новый ОписаниеТипов("Число");
	КодСекции = ОТЧ.ПривестиЗначение(Стр.section);
	Результат = Ложь;
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолучитьАргументСкобки(Выборка, 1)) Цикл 
		Если Элт = "*" Или ОТЧ.ПривестиЗначение(Элт) = КодСекции Тогда 
			Результат = Истина;
			Прервать;
		КонецЕсли;
		Если СтрНайти(Элт, "-") > 0 Тогда
			ВерхНиз = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элт, "-");
			Если ОТЧ.ПривестиЗначение(ВерхНиз[0]) <= КодСекции И ОТЧ.ПривестиЗначение(ВерхНиз[1]) >= КодСекции Тогда 
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Не Результат Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	КодСтроки = ОТЧ.ПривестиЗначение(Стр.row);
	Результат = Ложь;
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолучитьАргументСкобки(Выборка, 2)) Цикл 
		Если Элт = "*" Или ОТЧ.ПривестиЗначение(Элт) = КодСтроки Тогда 
			Результат = Истина;
			Прервать;
		КонецЕсли;
		Если СтрНайти(Элт, "-") > 0 Тогда
			ВерхНиз = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элт, "-");
			Если ОТЧ.ПривестиЗначение(ВерхНиз[0]) <= КодСтроки И ОТЧ.ПривестиЗначение(ВерхНиз[1]) >= КодСтроки Тогда 
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Не Результат Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Для Инд = 4 По КоличествоСпецифик Цикл 
		Специфика = Стр["s" + (Инд - 3)];
		Результат = Ложь;
		Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолучитьАргументСкобки(Выборка, Инд)) Цикл 
			Если Элт = "*" Или Элт = НРег(Специфика) Тогда 
				Результат = Истина;
				Прервать;
			КонецЕсли;
			Если СтрНайти(Элт, "-") > 0 Тогда
				ВерхНиз = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элт, "-");
				Если ВерхНиз[0] <= Специфика И ВерхНиз[1] >= Специфика Тогда 
					Результат = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Не Результат Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция КолонкаВходитВДиапазон(Выборка, Кол)
	ОТЧ = Новый ОписаниеТипов("Число");
	ИндОткр = СтрНайти(Выборка, "[", НаправлениеПоиска.СНачала, 1, 3);
	ИндЗакр = СтрНайти(Выборка, "]", НаправлениеПоиска.СНачала, 1, 3);
	
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Сред(Выборка, ИндОткр + 1, ИндЗакр - ИндОткр - 1)) Цикл 
		Если Элт = "*" Или ОТЧ.ПривестиЗначение(Элт) = Кол Тогда 
			Возврат Истина;
		КонецЕсли;
		Если СтрНайти(Элт, "-") > 0 Тогда
			ВерхНиз = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элт, "-");
			Если ОТЧ.ПривестиЗначение(ВерхНиз[0]) <= Кол И ОТЧ.ПривестиЗначение(ВерхНиз[1]) >= Кол Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ВычислитьАргументСуммированияВУсловии(АргументСуммирования, Контекст, ОтборПоКолонкам = Неопределено)
	АргументСуммированияПреобразованная = "isnull(" + АргументСуммирования + ", 0)";
	Выборка = ПолучитьЕдинственныйАргументВыражения(АргументСуммированияПреобразованная);
	
	Итог = 0;
	Таблица = ?(СтрНайти(АргументСуммирования, "{{") > 0, "ПредыдущийПериод_ДанныеОтчета", "ОсновнойПериод_ДанныеОтчета");
	Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
		АргументСуммированияПреобразованная = СтрЗаменить(АргументСуммированияПреобразованная, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	Для Каждого Стр Из Контекст[Таблица] Цикл 
		Если Не СтрокаВходитВДиапазон(Контекст, Выборка, Стр) Тогда 
			Продолжить;
		КонецЕсли;
		
		Кол = 0;
		Пока Кол <= Контекст[Таблица].Колонки.Количество() / 2 Цикл 
			Кол = Кол + 1;
			Если Не КолонкаВходитВДиапазон(Выборка, Кол) Тогда 
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ОтборПоКолонкам) = Тип("СписокЗначений")
				И ОтборПоКолонкам.НайтиПоЗначению(Формат(Кол, "ЧЦ=4; ЧВН=; ЧГ=")) = Неопределено Тогда 
				
				Продолжить;
			КонецЕсли;
			НазваниеКолонки = "col" + Формат(Кол, "ЧЦ=4; ЧВН=; ЧГ=");
			Если Контекст[Таблица].Колонки.Найти(НазваниеКолонки) = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			Если Стр[НазваниеКолонки + "_isPresent"] Тогда 
				Итог = Итог + ОбщегоНазначения.ВычислитьВБезопасномРежиме(СтрЗаменить(АргументСуммированияПреобразованная, Выборка, Стр[НазваниеКолонки]));
			Иначе
				Итог = Итог + ОбщегоНазначения.ВычислитьВБезопасномРежиме(СтрЗаменить(АргументСуммированияПреобразованная, Выборка, "null"));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Итог;
КонецФункции

Функция ВычислитьАргументСуммированияВУсловииПоСтроке(АргументСуммирования, Контекст, СтрокаОтбора)
	АргументСуммированияПреобразованная = "isnull(" + АргументСуммирования + ", 0)";
	Выборка = ПолучитьЕдинственныйАргументВыражения(АргументСуммированияПреобразованная);
	
	Итог = 0;
	Таблица = ?(СтрНайти(АргументСуммирования, "{{") > 0, "ПредыдущийПериод_ДанныеОтчета", "ОсновнойПериод_ДанныеОтчета");
	Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
		АргументСуммированияПреобразованная = СтрЗаменить(АргументСуммированияПреобразованная, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("section", СтрокаОтбора.section);
	СтруктураОтбора.Вставить("row", СтрокаОтбора.row);
	СтруктураОтбора.Вставить("rowtype", "M");
	
	ТипыСтрок = Контекст.ТаблицаТиповСтрок.НайтиСтроки(СтруктураОтбора);
	Если ТипыСтрок.Количество() > 0 Тогда
		Для Инд = 1 По 3 Цикл 
			Если ТипыСтрок[0]["s" + Инд + "_isPresent"] Тогда
				Если Не СтрокаОтбора.Свойство("s" + Инд + "_Filter") Тогда 
					СтруктураОтбора.Вставить("s" + Инд + "_isPresent", Истина);
					СтруктураОтбора.Вставить("s" + Инд, СтрокаОтбора["s" + Инд]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураОтбора.Удалить("rowtype");
	
	ОтобранныеСтроки = Контекст[Таблица].НайтиСтроки(СтруктураОтбора);
	ИндОткСк = СтрНайти(АргументСуммирования, "[", НаправлениеПоиска.СНачала, 1, 3);
	ИндЗакрСк = СтрНайти(АргументСуммирования, "]", НаправлениеПоиска.СНачала, 1, 3);
	ВариацииГраф = Сред(АргументСуммирования, ИндОткСк + 1, ИндЗакрСк - ИндОткСк - 1);
	Фильтр = "";
	Для Каждого Стр Из ОтобранныеСтроки Цикл 
		НеобходимоВключатьВСуммирование = Истина;
		Для Инд = 1 По 3 Цикл
			Если СтрокаОтбора.Свойство("s" + Инд + "_Filter", Фильтр) Тогда 
				Если Не СпецификаВходитВДиапазон(Стр["s" + Инд], Фильтр, Контекст) Тогда 
					НеобходимоВключатьВСуммирование = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не НеобходимоВключатьВСуммирование Тогда 
			Продолжить;
		КонецЕсли;
		
		Кол = 0;
		Пока Кол <= Контекст.КоличествоКолонок Цикл
			Кол = Кол + 1;
			Если Не КолонкаВходитВДиапазон(ВариацииГраф, Кол) Тогда 
				Продолжить;
			КонецЕсли;
			НазваниеКолонки = "col" + Формат(Кол, "ЧЦ=4; ЧВН=; ЧГ=");
			Если Стр[НазваниеКолонки + "_isPresent"] Тогда 
				Итог = Итог + ОбщегоНазначения.ВычислитьВБезопасномРежиме(СтрЗаменить(АргументСуммированияПреобразованная, Выборка, Стр[НазваниеКолонки]));
			Иначе
				Итог = Итог + ОбщегоНазначения.ВычислитьВБезопасномРежиме(СтрЗаменить(АргументСуммированияПреобразованная, Выборка, "null"));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Итог;
КонецФункции

Функция ЭтоВариацияПоСтрокамИлиГрафам(Контекст, Условие, СтрокиИГрафы)
	УсловиеПреобразованное = ЗаменитьСуммуВУсловии(Условие);
	Аргументы = Новый Соответствие;
	Пока Истина Цикл
		ИндексСум = СтрНайти(УсловиеПреобразованное, "{");
		Если ИндексСум = 0 Тогда 
			Прервать;
		КонецЕсли;
		
		Инд = 1;
		Счетчик = 1;
		Пока Счетчик > 0 И Инд < СтрДлина(УсловиеПреобразованное) Цикл 
			Если Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "{" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "}" Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		Аргумент = Сред(УсловиеПреобразованное, ИндексСум, Инд);
		УсловиеПреобразованное = Лев(УсловиеПреобразованное, ИндексСум - 1) + "(@)" + Сред(УсловиеПреобразованное, ИндексСум + Инд);
		Аргументы.Вставить(Аргумент);
	КонецЦикла;
	
	ЕстьВариация = Ложь;
	Для Каждого КЗ Из Аргументы Цикл 
		Для Инд = 1 По 3 Цикл 
			ОткрСк = СтрНайти(КЗ.Ключ, "[", НаправлениеПоиска.СНачала, 1, Инд);
			ЗакрСк = СтрНайти(КЗ.Ключ, "]", НаправлениеПоиска.СНачала, 1, Инд);
			АргСкобок = Сред(КЗ.Ключ, ОткрСк + 1, ЗакрСк - ОткрСк - 1);
			Если Контекст.ОТЧ.ПривестиЗначение(АргСкобок) = 0 Или СтрНайти(АргСкобок, ",") > 0 Тогда 
				ЕстьВариация = Истина;
			КонецЕсли;
		КонецЦикла;
		Для Инд = 4 По 6 Цикл 
			ОткрСк = СтрНайти(КЗ.Ключ, "[", НаправлениеПоиска.СНачала, 1, Инд);
			ЗакрСк = СтрНайти(КЗ.Ключ, "]", НаправлениеПоиска.СНачала, 1, Инд);
			Если ОткрСк = 0 Или ЗакрСк = 0 Тогда 
				Прервать;
			КонецЕсли;
			АргСкобок = Сред(КЗ.Ключ, ОткрСк + 1, ЗакрСк - ОткрСк - 1);
			Если СтрНайти(АргСкобок, ",") > 0 Или СтрНайти(АргСкобок, "-") > 0 Или СтрНайти(АргСкобок, "*") > 0 Тогда 
				ЕстьВариация = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЕстьВариация Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	СтрокиИГрафы = Новый ТаблицаЗначений;
	СтрокиИГрафы.Колонки.Добавить("section");
	СтрокиИГрафы.Колонки.Добавить("row");
	СтрокиИГрафы.Колонки.Добавить("s1");
	СтрокиИГрафы.Колонки.Добавить("s1_isPresent", Контекст.ОПБ);
	СтрокиИГрафы.Колонки.Добавить("s2");
	СтрокиИГрафы.Колонки.Добавить("s2_isPresent", Контекст.ОПБ);
	СтрокиИГрафы.Колонки.Добавить("s3");
	СтрокиИГрафы.Колонки.Добавить("s3_isPresent", Контекст.ОПБ);
	СтрокиИГрафы.Колонки.Добавить("columns");
	
	Для Каждого Аргумент Из Аргументы Цикл 
		Если СтрНачинаетсяС(Аргумент.Ключ, "{{") Тогда 
			ТаблицаДанных = Контекст.ПредыдущийПериод_ДанныеОтчета;
		Иначе
			ТаблицаДанных = Контекст.ОсновнойПериод_ДанныеОтчета;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл 
			Если СтрокаТаблицы.s1_IsPresent Или СтрокаТаблицы.s2_IsPresent Или СтрокаТаблицы.s3_IsPresent Тогда 
				ОбработкаВставкиСтрокиВТаблицу(Контекст, СтрокаТаблицы, Аргумент.Ключ, СтрокиИГрафы)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Процедура ОбработкаВставкиСтрокиВТаблицуИзФормата(Контекст, Операнд, СтрокиИГрафы)
	ЗначОтбора1 = ПолучитьАргументСкобки(Операнд, 1);
	ЗначОтбора2 = ПолучитьАргументСкобки(Операнд, 2);
	Если СтрНайти(ЗначОтбора1, ",") = 0 
		И СтрНайти(ЗначОтбора2, ",") = 0
		И ЗначениеЗаполнено(Контекст.ОТЧ.ПривестиЗначение(ЗначОтбора2)) 
		И ЗначениеЗаполнено(Контекст.ОТЧ.ПривестиЗначение(ЗначОтбора1)) Тогда 
		Контекст.СтруктураПоискаСекцияСтрока.section = Прав("000" + ЗначОтбора1, 3);
		Контекст.СтруктураПоискаСекцияСтрока.row = Прав("00000" + ЗначОтбора2, 5);
		ТТС = Контекст.ТаблицаТиповСтрок.НайтиСтроки(Контекст.СтруктураПоискаСекцияСтрока);
		Для Каждого Стр Из ТТС Цикл
			Если Стр.rowtype <> "F" Тогда 
				Продолжить;
			КонецЕсли;
			Если СтрокиИГрафы.НайтиСтроки(Контекст.СтруктураПоискаСекцияСтрока).Количество() > 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Не ЧислоВходитВДиапазон(Контекст, Контекст.ОТЧ.ПривестиЗначение(Стр.section), ЗначОтбора1) Тогда 
				Продолжить;
			КонецЕсли;
			Если Не ЧислоВходитВДиапазон(Контекст, Контекст.ОТЧ.ПривестиЗначение(Стр.row), ЗначОтбора2) Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокиИГрафы.Добавить(), Стр);
		КонецЦикла;
	Иначе
		Для Каждого Стр Из Контекст.ТаблицаТиповСтрок Цикл
			Если Стр.rowtype <> "F" Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗначОтбора = ПолучитьАргументСкобки(Операнд, 1);
			Если Не ЧислоВходитВДиапазон(Контекст, Контекст.ОТЧ.ПривестиЗначение(Стр.section), ЗначОтбора) Тогда 
				Продолжить;
			КонецЕсли;
			ЗначОтбора = ПолучитьАргументСкобки(Операнд, 2);
			Если Не ЧислоВходитВДиапазон(Контекст, Контекст.ОТЧ.ПривестиЗначение(Стр.row), ЗначОтбора) Тогда 
				Продолжить;
			КонецЕсли;
			Если СтрокиИГрафы.НайтиСтроки(Новый Структура("section, row", Стр.section, Стр.row)).Количество() > 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокиИГрафы.Добавить(), Стр);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаВставкиСтрокиВТаблицу(Контекст, СтрокаТаблицы, Операнд, СтрокиИГрафы)
	КоличествоОтборов = СтрЧислоВхождений(Операнд, "[");
	Если КоличествоОтборов >= 6 И Не СтрокаТаблицы.s3_isPresent 
		Или КоличествоОтборов >= 5 И Не СтрокаТаблицы.s2_isPresent 
		Или КоличествоОтборов >= 4 И Не СтрокаТаблицы.s1_isPresent Тогда 
		
		Возврат;
	КонецЕсли;
	
	ЗначОтбора = ПолучитьАргументСкобки(Операнд, 1);
	Если Не ЧислоВходитВДиапазон(Контекст, Контекст.ОТЧ.ПривестиЗначение(СтрокаТаблицы.section), ЗначОтбора) Тогда 
		Возврат;
	КонецЕсли;
	ЗначОтбора = ПолучитьАргументСкобки(Операнд, 2);
	Если Не ЧислоВходитВДиапазон(Контекст, Контекст.ОТЧ.ПривестиЗначение(СтрокаТаблицы.row), ЗначОтбора) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Инд = 4 По 6 Цикл 
		ЗначОтбора = ПолучитьАргументСкобки(Операнд, Инд);
		Если Не ЗначениеЗаполнено(ЗначОтбора) Тогда 
			Прервать;
		КонецЕсли;
		Если Не СпецификаВходитВДиапазон(СтрокаТаблицы["s" + (Инд - 3)], ЗначОтбора, Контекст) Тогда 
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НовСтр = СтрокиИГрафы.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТаблицы);
	
	Если СтрокиИГрафы.Колонки.Найти("columns") = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИтогГрСтр = "";
	Контекст.СписокЗначений.Очистить();
	ГрСтр = ПолучитьАргументСкобки(Операнд, 3);
	
	Для Каждого Кол Из СтрокаТаблицы.Владелец().Колонки Цикл 
		КолЧисло = Контекст.ОТЧ.ПривестиЗначение(Сред(Кол.Имя, 4));
		Если Не КолЧисло = 0 И ЧислоВходитВДиапазон(Контекст, КолЧисло, ГрСтр) Тогда 
			Контекст.СписокЗначений.Добавить(Сред(Кол.Имя, 4));
		КонецЕсли;
	КонецЦикла;
	Контекст.СписокЗначений.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Для Каждого Зн Из Контекст.СписокЗначений Цикл 
		ИтогГрСтр = ИтогГрСтр + Зн.Значение;
	КонецЦикла;
	НовСтр.columns = ИтогГрСтр;
КонецПроцедуры

Функция ВычислитьУсловиеПоСпецификамСУсловием(ОтборУсловие, Условие, Контекст, РазрядностьОкругления = 2, Специфики = Неопределено)
	ВсеАргументыКромеСуммированийВВыражении = ПолучитьВсеАргументыКромеСуммированийВВыражении(Контекст, Условие);
	ВсеАргументыКромеСуммированийВВыраженииОтбор = ПолучитьВсеАргументыКромеСуммированийВВыражении(Контекст, ОтборУсловие);
	Для Каждого Стр Из Специфики Цикл
		Для Каждого КЗ Из ВсеАргументыКромеСуммированийВВыражении Цикл 
			ПреобразованноеВыражение = КЗ.Ключ;
			Для Инд = 1 По 3 Цикл 
				Если Стр["s"+Инд+"_isPresent"] Тогда 
					ОткрСк = СтрНайти(ПреобразованноеВыражение, "[", НаправлениеПоиска.СНачала, 1, Инд+3);
					ЗакрСк = СтрНайти(ПреобразованноеВыражение, "]", НаправлениеПоиска.СНачала, 1, Инд+3);
					ПреобразованноеВыражение = Лев(ПреобразованноеВыражение, ОткрСк) + Стр["s"+Инд] + Сред(ПреобразованноеВыражение, ЗакрСк);
				КонецЕсли;
			КонецЦикла;
			ВсеАргументыКромеСуммированийВВыражении[КЗ.Ключ] = ПреобразованноеВыражение;
		КонецЦикла;
		ПреобразованноеУсловие = Условие;
		Для Каждого КЗ Из ВсеАргументыКромеСуммированийВВыражении Цикл 
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
			ВсеАргументыКромеСуммированийВВыражении[КЗ.Ключ] = Неопределено;
		КонецЦикла;
		
		Для Каждого КЗ Из ВсеАргументыКромеСуммированийВВыраженииОтбор Цикл 
			ПреобразованноеВыражениеОтбор = КЗ.Ключ;
			Для Инд = 1 По 3 Цикл 
				Если Стр["s"+Инд+"_isPresent"] Тогда 
					ОткрСк = СтрНайти(ПреобразованноеВыражениеОтбор, "[", НаправлениеПоиска.СНачала, 1, Инд+3);
					ЗакрСк = СтрНайти(ПреобразованноеВыражениеОтбор, "]", НаправлениеПоиска.СНачала, 1, Инд+3);
					ПреобразованноеВыражениеОтбор = Лев(ПреобразованноеВыражениеОтбор, ОткрСк) + Стр["s"+Инд] + Сред(ПреобразованноеВыражениеОтбор, ЗакрСк);
				КонецЕсли;
			КонецЦикла;
			ВсеАргументыКромеСуммированийВВыраженииОтбор[КЗ.Ключ] = ПреобразованноеВыражениеОтбор;
		КонецЦикла;
		ПреобразованноеОтборУсловие = ОтборУсловие;
		Для Каждого КЗ Из ВсеАргументыКромеСуммированийВВыраженииОтбор Цикл 
			ПреобразованноеОтборУсловие = СтрЗаменить(ПреобразованноеОтборУсловие, КЗ.Ключ, КЗ.Значение);
			ВсеАргументыКромеСуммированийВВыраженииОтбор[КЗ.Ключ] = Неопределено;
		КонецЦикла;
		
		Если ВычислитьСкалярноеУсловие(ПреобразованноеОтборУсловие, Контекст, РазрядностьОкругления) 
			И Не ВычислитьСкалярноеУсловие(ПреобразованноеУсловие, Контекст, РазрядностьОкругления) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ВычислитьУсловиеПоСтрокам(Условие, Контекст, РазрядностьОкругления = 2, Строки = Неопределено)
	ОбработкаВыполнена = Ложь;
	
	Для Каждого Стр Из Строки Цикл
		НеобходимаОбработка = Ложь;
		ВсеАргументыКромеСуммированийВВыражении = ПолучитьВсеАргументыКромеСуммированийВВыражении(Контекст, Условие);
		Для Каждого КЗ Из ВсеАргументыКромеСуммированийВВыражении Цикл 
			Если СтрокаВходитВДиапазон(Контекст, КЗ.Ключ, Стр) Тогда 
				НеобходимаОбработка = Истина;
				ОбработкаВыполнена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПреобразованноеУсловие = ПривестиВыражениеККаноническомуВиду(Условие, РазрядностьОкругления);
		СтрДлПреобразованноеУсловие = СтрДлина(ПреобразованноеУсловие);
		КоличествоСуммирований = СтрЧислоВхождений(ПреобразованноеУсловие, "sum(");
		МассивАргументовСуммирований = Новый Массив;
		Для Инд = 1 По КоличествоСуммирований Цикл 
			ИндНач = СтрНайти(ПреобразованноеУсловие, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
			ИндТек = ИндНач + 4;
			Счетчик = 1;
			Пока ИндТек < СтрДлПреобразованноеУсловие Цикл 
				Если Сред(ПреобразованноеУсловие, ИндТек, 1) = "(" Тогда 
					Счетчик = Счетчик + 1;
				ИначеЕсли Сред(ПреобразованноеУсловие, ИндТек, 1) = ")" Тогда 
					Счетчик = Счетчик - 1;
					Если Счетчик = 0 Тогда 
						Прервать;
					КонецЕсли;
				КонецЕсли;
				ИндТек = ИндТек + 1;
			КонецЦикла;
			Если Счетчик <> 0 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			
			АргументыСуммирований = Новый Структура;
			АргументыСуммирований.Вставить("НачалоВыражения", ИндНач);
			АргументыСуммирований.Вставить("ДлинаВыражения", ИндТек - ИндНач);
			АргументСуммированияДляВычисления = Сред(ПреобразованноеУсловие, ИндНач+3, ИндТек - ИндНач - 2);
			СтрОтборСтрок = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Стр);
			Для АргСк = 4 По 6 Цикл 
				АргСкСтр = ПолучитьАргументСкобки(АргументСуммированияДляВычисления, АргСк);
				Если ЗначениеЗаполнено(АргСкСтр) Тогда 
					Для Каждого АргСкСкаляр Из ВсеАргументыКромеСуммированийВВыражении Цикл
						АргСкСтрСтр = ПолучитьАргументСкобки(АргСкСкаляр.Ключ, АргСк);
						Если ЗначениеЗаполнено(АргСкСтрСтр) И АргСкСтрСтр <> АргСкСтр Тогда 
							СтрОтборСтрок["s" + (АргСк-3) + "_isPresent"] = Ложь;
							СтрОтборСтрок["s" + (АргСк-3)] = Неопределено;
							СтрОтборСтрок.Вставить("s" + (АргСк-3) + "_Filter", АргСкСтр);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			СтрРез = Строка(ВычислитьАргументСуммированияВУсловииПоСтроке(АргументСуммированияДляВычисления, Контекст, СтрОтборСтрок));
			СтрРез = СтрЗаменить(СтрРез, ",", ".");
			СтрРез = СтрЗаменить(СтрРез, " ", "");
			СтрРез = СтрЗаменить(СтрРез, Символы.НПП, "");
			АргументыСуммирований.Вставить("Результат", СтрРез);
			МассивАргументовСуммирований.Вставить(Инд - 1, АргументыСуммирований);
		КонецЦикла;
		
		ПроверкаВыражения(ПреобразованноеУсловие);
		Для Инд = 1 По КоличествоСуммирований Цикл
			АргументСуммирования = МассивАргументовСуммирований[КоличествоСуммирований - Инд];
			ПреобразованноеУсловие = Лев(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения - 1) + АргументСуммирования.Результат
									+ Сред(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения + АргументСуммирования.ДлинаВыражения + 1);
			ПроверкаВыражения(ПреобразованноеУсловие);
		КонецЦикла;
		
		Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		Для Каждого КЗ Из Контекст.ОперацииСравнения Цикл
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "|=|", "=");
		ДополнительныеПреобразованияУсловия(ПреобразованноеУсловие);
		ПреобразованноеУсловие = ЗаменитьСкалярныеАргументыВВыраженииПоСтроке(ПреобразованноеУсловие, Контекст, Стр);
		Если (НеобходимаОбработка Или (Не ОбработкаВыполнена И Строки.Индекс(Стр) = Строки.Количество() - 1))
			И Не ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПреобразованноеУсловие) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ВычислитьБезусловноеВыражениеПоСтрокамИГрафам(Контекст, Выражение, РазрядностьОкругления = 2)
	ВыражениеПреобразованное = НРег(Выражение);
	СтрДлПреобразованноеУсловие = СтрДлина(ВыражениеПреобразованное);
	КоличествоСуммирований = СтрЧислоВхождений(ВыражениеПреобразованное, "sum(");
	АргументыСуммирований = Новый Соответствие;
	Для Инд = 1 По КоличествоСуммирований Цикл 
		ИндНач = СтрНайти(ВыражениеПреобразованное, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
		ИндТек = ИндНач + 4;
		Счетчик = 1;
		Пока ИндТек <= СтрДлПреобразованноеУсловие Цикл 
			Если Сред(ВыражениеПреобразованное, ИндТек, 1) = "(" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(ВыражениеПреобразованное, ИндТек, 1) = ")" Тогда 
				Счетчик = Счетчик - 1;
				Если Счетчик = 0 Тогда 
					Прервать;
				КонецЕсли;
			КонецЕсли;
			ИндТек = ИндТек + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		ВыражениеВрем = СокрЛП(Сред(ВыражениеПреобразованное, ИндНач+3, ИндТек - ИндНач - 2));
		Пока Лев(ВыражениеВрем, 1) = "(" Цикл 
			ВыражениеВрем =СокрЛП(Сред(ВыражениеВрем, 2, СтрДлина(ВыражениеВрем) - 2));
		КонецЦикла;
		ПроверкаВыражения(ВыражениеВрем);
		АргументыСуммирований.Вставить(ВыражениеВрем);
	КонецЦикла;
	СтрДлПреобразованноеУсловие = СтрДлина(ВыражениеПреобразованное);
	КоличествоСуммирований = СтрЧислоВхождений(ВыражениеПреобразованное, "sum{");
	Для Инд = 1 По КоличествоСуммирований Цикл 
		ИндНач = СтрНайти(ВыражениеПреобразованное, "sum{", НаправлениеПоиска.СНачала, 1, Инд);
		ИндТек = ИндНач + 4;
		Счетчик = 1;
		Пока ИндТек <= СтрДлПреобразованноеУсловие Цикл 
			Если Сред(ВыражениеПреобразованное, ИндТек, 1) = "{" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(ВыражениеПреобразованное, ИндТек, 1) = "}" Тогда 
				Счетчик = Счетчик - 1;
				Если Счетчик = 0 Тогда 
					Прервать;
				КонецЕсли;
			КонецЕсли;
			ИндТек = ИндТек + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		ВыражениеВрем = СокрЛП(Сред(ВыражениеПреобразованное, ИндНач+3, ИндТек - ИндНач - 2));
		ПроверкаВыражения(ВыражениеВрем);
		АргументыСуммирований.Вставить(ВыражениеВрем);
	КонецЦикла;
	
	ВыражениеПреобразованное = ЗаменитьСуммуВУсловии(Выражение);
	Аргументы = Новый Соответствие;
	Пока Истина Цикл
		ИндексСум = СтрНайти(ВыражениеПреобразованное, "{");
		Если ИндексСум = 0 Тогда 
			Прервать;
		КонецЕсли;
		
		Инд = 1;
		Счетчик = 1;
		Пока Счетчик > 0 И Инд <= СтрДлина(ВыражениеПреобразованное) Цикл 
			Если Сред(ВыражениеПреобразованное, ИндексСум + Инд, 1) = "{" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(ВыражениеПреобразованное, ИндексСум + Инд, 1) = "}" Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		Аргумент = Сред(ВыражениеПреобразованное, ИндексСум, Инд);
		ВыражениеПреобразованное = Лев(ВыражениеПреобразованное, ИндексСум - 1) + "(@)" + Сред(ВыражениеПреобразованное, ИндексСум + Инд);
		Аргументы.Вставить(Аргумент);
	КонецЦикла;
	
	ВариацииГраф = Новый Соответствие;
	Для Каждого КЗ Из АргументыСуммирований Цикл 
		ВариацииГраф.Вставить(СокрЛП(ПолучитьАргументСкобки(КЗ.Ключ, 3)));
	КонецЦикла;
	Для Каждого КЗ Из Аргументы Цикл 
		ВариацииГраф.Вставить(СокрЛП(ПолучитьАргументСкобки(КЗ.Ключ, 3)));
	КонецЦикла;
	
	Если ВариацииГраф.Количество() <> 1 Тогда 
		Возврат Истина;
	КонецЕсли;
	Для Каждого КЗ Из ВариацииГраф Цикл 
		ВариацияПоГрафам = КЗ.Ключ;
	КонецЦикла;
	
	Для Инд = 1 По Контекст.ОсновнойПериод_ДанныеОтчета.Колонки.Количество() / 2 Цикл 
		Если Контекст.ОсновнойПериод_ДанныеОтчета.Колонки.Найти("col" + Прав("0000" + Инд, 4)) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Если Не ЧислоВходитВДиапазон(Контекст, Инд, ВариацияПоГрафам) Тогда 
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ПолучитьВсеАргументыКромеСуммированийВВыражении(Контекст, Выражение)
	КонтекстПолучитьВсеАргументыВыражения = Контекст.ПолучитьВсеАргументыКромеСуммированийВВыражении[Выражение];
	Если КонтекстПолучитьВсеАргументыВыражения <> Неопределено Тогда 
		Возврат КонтекстПолучитьВсеАргументыВыражения;
	КонецЕсли;
	Возврат ПолучитьВсеАргументыВыражения(Контекст, ЗаменитьСуммуВУсловии(НРег(Выражение)));
КонецФункции

Функция ПолучитьВсеАргументыВыражения(Контекст, Выражение)
	КонтекстПолучитьВсеАргументыВыражения = Контекст.ПолучитьВсеАргументыВыражения[Выражение];
	Если КонтекстПолучитьВсеАргументыВыражения <> Неопределено Тогда 
		Возврат КонтекстПолучитьВсеАргументыВыражения;
	КонецЕсли;
	
	ЕстьПредидущийПериод = СтрНайти(Выражение, "{{") > 0;
	ВыражениеПреобразованное = Выражение;
	ВсеАргументы = Новый Соответствие;
	Пока Истина Цикл
		ИндексОткр = СтрНайти(ВыражениеПреобразованное, "{");
		Если ИндексОткр = 0 Тогда 
			Прервать;
		КонецЕсли;
		Если ЕстьПредидущийПериод И Сред(ВыражениеПреобразованное, ИндексОткр, 2) = "{{" Тогда 
			ИндексЗакр = СтрНайти(ВыражениеПреобразованное, "}}");
			Аргумент = Сред(ВыражениеПреобразованное, ИндексОткр + 2, ИндексЗакр - ИндексОткр - 2);
			ВыражениеПреобразованное = Сред(ВыражениеПреобразованное, ИндексЗакр + 2);
		Иначе
			ИндексЗакр = СтрНайти(ВыражениеПреобразованное, "}");
			Аргумент = Сред(ВыражениеПреобразованное, ИндексОткр + 1, ИндексЗакр - ИндексОткр - 1);
			ВыражениеПреобразованное = Сред(ВыражениеПреобразованное, ИндексЗакр + 1);
		КонецЕсли;
		ВсеАргументы.Вставить(Аргумент);
	КонецЦикла;
	Контекст.ПолучитьВсеАргументыВыражения.Вставить(Выражение, ВсеАргументы);
	Возврат ВсеАргументы;
КонецФункции

функция ПолучитьВариацииГраф(Контекст, ВсеАргументы)
	ВариацииГраф = Новый Соответствие;
	Для Каждого КЗ Из ВсеАргументы Цикл 
		ВариацииГраф.Вставить(ПолучитьАргументСкобки(КЗ.Ключ, 3));
	КонецЦикла;
	Возврат ВариацииГраф;
КонецФункции

функция ЗаменитьВариациюПоГрафамВВыражении(Выражение, ВсеАргументы, Контекст, ВариацииГраф, Колонка)
	ПреобразованноеВыражение = СокрЛП(ВРег(Выражение));
	Для Каждого Аргумент Из ВсеАргументы Цикл
		ОткрСк = СтрНайти(Аргумент.Ключ, "[", НаправлениеПоиска.СНачала, 1, 3);
		ЗакрСк = СтрНайти(Аргумент.Ключ, "]", НаправлениеПоиска.СНачала, 1, 3);
		ПреобразованноеВыражение = СтрЗаменить(ПреобразованноеВыражение, ВРег(Аргумент.Ключ), Лев(Аргумент.Ключ, ОткрСк) + Колонка + Сред(Аргумент.Ключ, ЗакрСк));
	КонецЦикла;
	Возврат ПреобразованноеВыражение;
КонецФункции

Функция ПолучитьАргументСкобки(Выражение, НомерСкобки)
	ИндОткр = СтрНайти(Выражение, "[", НаправлениеПоиска.СНачала, 1, НомерСкобки);
	Если ИндОткр = 0 Тогда
		Возврат "";
	Иначе
		Возврат Сред(Выражение, ИндОткр + 1, СтрНайти(Выражение, "]", НаправлениеПоиска.СНачала, 1, НомерСкобки) - ИндОткр - 1);
	КонецЕсли;
КонецФункции

Функция ВычислитьУсловиеПоСтрокамИлиГрафам(Условие, Контекст, РазрядностьОкругления = 2, СтрокиИГрафы = Неопределено)
	СтруктураОтбора = Новый Структура;
	Для Каждого Кол Из СтрокиИГрафы.Колонки Цикл
		Если Кол.Имя <> "columns" Тогда 
			СтруктураОтбора.Вставить(Кол.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ВсеАргументыВыражения = ПолучитьВсеАргументыВыражения(Контекст, Условие);
	Для Каждого Стр Из СтрокиИГрафы Цикл
		ГрафыИтер = Стр.columns;
		Пока Истина Цикл
			Кол = Лев(ГрафыИтер, 4);
			ГрафыИтер = Сред(ГрафыИтер, 5);
			Если Контекст.ОТЧ.ПривестиЗначение(Кол) = 0 Тогда 
				Прервать;
			КонецЕсли;
			Если Контекст.ЗапрещенныеДляВводаГрафы.НайтиСтроки(Новый Структура("Секция, Строка, Колонка", Стр.section, Стр.row, Кол)).Количество() > 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			ПреобразованноеУсловие = ЗаменитьВариациюПоГрафамВВыражении(Условие, ВсеАргументыВыражения, Контекст, , Контекст.ОТЧ.ПривестиЗначение(Кол));
			ПреобразованноеУсловие = ПривестиВыражениеККаноническомуВиду(ПреобразованноеУсловие, РазрядностьОкругления);
			СтрДлПреобразованноеУсловие = СтрДлина(ПреобразованноеУсловие);
			КоличествоСуммирований = СтрЧислоВхождений(ПреобразованноеУсловие, "sum(");
			МассивАргументовСуммирований = Новый Массив;
			Для Инд = 1 По КоличествоСуммирований Цикл 
				ИндНач = СтрНайти(ПреобразованноеУсловие, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
				ИндТек = ИндНач + 4;
				Счетчик = 1;
				Пока ИндТек < СтрДлПреобразованноеУсловие Цикл 
					Если Сред(ПреобразованноеУсловие, ИндТек, 1) = "(" Тогда 
						Счетчик = Счетчик + 1;
					ИначеЕсли Сред(ПреобразованноеУсловие, ИндТек, 1) = ")" Тогда 
						Счетчик = Счетчик - 1;
						Если Счетчик = 0 Тогда 
							Прервать;
						КонецЕсли;
					КонецЕсли;
					ИндТек = ИндТек + 1;
				КонецЦикла;
				Если Счетчик <> 0 Тогда 
					ВызватьИсключение "";
				КонецЕсли;
				
				АргументыСуммирований = Новый Структура;
				АргументыСуммирований.Вставить("НачалоВыражения", ИндНач);
				АргументыСуммирований.Вставить("ДлинаВыражения", ИндТек - ИндНач);
				СтрРез = Строка(ВычислитьАргументСуммированияВУсловии(Сред(ПреобразованноеУсловие, ИндНач+3, ИндТек - ИндНач - 2), Контекст));
				СтрРез = СтрЗаменить(СтрРез, ",", ".");
				СтрРез = СтрЗаменить(СтрРез, " ", "");
				СтрРез = СтрЗаменить(СтрРез, Символы.НПП, "");
				АргументыСуммирований.Вставить("Результат", СтрРез);
				МассивАргументовСуммирований.Вставить(Инд - 1, АргументыСуммирований);
			КонецЦикла;
			
			ПроверкаВыражения(ПреобразованноеУсловие);
			Для Инд = 1 По КоличествоСуммирований Цикл
				АргументСуммирования = МассивАргументовСуммирований[КоличествоСуммирований - Инд];
				ПреобразованноеУсловие = Лев(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения - 1) + АргументСуммирования.Результат
										+ Сред(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения + АргументСуммирования.ДлинаВыражения + 1);
				ПроверкаВыражения(ПреобразованноеУсловие);
			КонецЦикла;
			
			Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
				ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
			КонецЦикла;
			Для Каждого КЗ Из Контекст.ОперацииСравнения Цикл
				ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
			КонецЦикла;
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "|=|", "=");
			ПреобразованноеУсловие = ЗаменитьСкалярныеАргументыВВыражении(ПреобразованноеУсловие, Контекст, Кол, Стр);
			ДополнительныеПреобразованияУсловия(ПреобразованноеУсловие);
			Если Не ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПреобразованноеУсловие) Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Процедура ОбработатьУсловиеПоСтрокам(Условие, Контекст, РазрядностьОкругления = 2, Строки = Неопределено)
	СтрокиИтог = Строки.СкопироватьКолонки();
	Для Каждого Стр Из Строки Цикл 
		ПреобразованноеУсловие = ПривестиВыражениеККаноническомуВиду(Условие, РазрядностьОкругления);
		СтрДлПреобразованноеУсловие = СтрДлина(ПреобразованноеУсловие);
		КоличествоСуммирований = СтрЧислоВхождений(ПреобразованноеУсловие, "sum(");
		МассивАргументовСуммирований = Новый Массив;
		Для Инд = 1 По КоличествоСуммирований Цикл 
			ИндНач = СтрНайти(ПреобразованноеУсловие, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
			ИндТек = ИндНач + 4;
			Счетчик = 1;
			Пока ИндТек < СтрДлПреобразованноеУсловие Цикл 
				Если Сред(ПреобразованноеУсловие, ИндТек, 1) = "(" Тогда 
					Счетчик = Счетчик + 1;
				ИначеЕсли Сред(ПреобразованноеУсловие, ИндТек, 1) = ")" Тогда 
					Счетчик = Счетчик - 1;
					Если Счетчик = 0 Тогда 
						Прервать;
					КонецЕсли;
				КонецЕсли;
				ИндТек = ИндТек + 1;
			КонецЦикла;
			Если Счетчик <> 0 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			
			АргументыСуммирований = Новый Структура;
			АргументыСуммирований.Вставить("НачалоВыражения", ИндНач);
			АргументыСуммирований.Вставить("ДлинаВыражения", ИндТек - ИндНач);
			СтрРез = Строка(ВычислитьАргументСуммированияВУсловии(Сред(ПреобразованноеУсловие, ИндНач+3, ИндТек - ИндНач - 2), Контекст));
			СтрРез = СтрЗаменить(СтрРез, ",", ".");
			СтрРез = СтрЗаменить(СтрРез, " ", "");
			СтрРез = СтрЗаменить(СтрРез, Символы.НПП, "");
			АргументыСуммирований.Вставить("Результат", СтрРез);
			МассивАргументовСуммирований.Вставить(Инд - 1, АргументыСуммирований);
		КонецЦикла;
		
		ПроверкаВыражения(ПреобразованноеУсловие);
		Для Инд = 1 По КоличествоСуммирований Цикл
			АргументСуммирования = МассивАргументовСуммирований[КоличествоСуммирований - Инд];
			ПреобразованноеУсловие = Лев(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения - 1) + АргументСуммирования.Результат
									+ Сред(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения + АргументСуммирования.ДлинаВыражения + 1);
			ПроверкаВыражения(ПреобразованноеУсловие);
		КонецЦикла;
		
		Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		Для Каждого КЗ Из Контекст.ОперацииСравнения Цикл
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "|=|", "=");
		ПреобразованноеУсловие = ЗаменитьСкалярныеАргументыВВыраженииПоСтроке(ПреобразованноеУсловие, Контекст, Стр);
		ДополнительныеПреобразованияУсловия(ПреобразованноеУсловие);
		Если ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПреобразованноеУсловие) Тогда
			ЗаполнитьЗначенияСвойств(СтрокиИтог.Добавить(), Стр);
		КонецЕсли;
	КонецЦикла;
	
	Строки.Очистить();
	Для Каждого Стр Из СтрокиИтог Цикл
		ЗаполнитьЗначенияСвойств(Строки.Добавить(), Стр);
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьУсловиеПоСтрокамИлиГрафам(Условие, Контекст, РазрядностьОкругления = 2, СтрокиИГрафы = Неопределено)
	СтруктураОтбора = Новый Структура;
	Для Каждого Кол Из СтрокиИГрафы.Колонки Цикл
		Если Кол.Имя <> "columns" Тогда 
			СтруктураОтбора.Вставить(Кол.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиИГрафы Цикл
		ОтобранныеГрафы = "";
		ГрафыИтер = Стр.columns;
		Пока Истина Цикл
			Кол = Лев(ГрафыИтер, 4);
			ГрафыИтер = Сред(ГрафыИтер, 5);
			Если Контекст.ОТЧ.ПривестиЗначение(Кол) = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			ПреобразованноеУсловие = ПривестиВыражениеККаноническомуВиду(Условие, РазрядностьОкругления);
			СтрДлПреобразованноеУсловие = СтрДлина(ПреобразованноеУсловие);
			КоличествоСуммирований = СтрЧислоВхождений(ПреобразованноеУсловие, "sum(");
			МассивАргументовСуммирований = Новый Массив;
			Для Инд = 1 По КоличествоСуммирований Цикл 
				ИндНач = СтрНайти(ПреобразованноеУсловие, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
				ИндТек = ИндНач + 4;
				Счетчик = 1;
				Пока ИндТек < СтрДлПреобразованноеУсловие Цикл 
					Если Сред(ПреобразованноеУсловие, ИндТек, 1) = "(" Тогда 
						Счетчик = Счетчик + 1;
					ИначеЕсли Сред(ПреобразованноеУсловие, ИндТек, 1) = ")" Тогда 
						Счетчик = Счетчик - 1;
						Если Счетчик = 0 Тогда 
							Прервать;
						КонецЕсли;
					КонецЕсли;
					ИндТек = ИндТек + 1;
				КонецЦикла;
				Если Счетчик <> 0 Тогда 
					ВызватьИсключение "";
				КонецЕсли;
				
				АргументыСуммирований = Новый Структура;
				АргументыСуммирований.Вставить("НачалоВыражения", ИндНач);
				АргументыСуммирований.Вставить("ДлинаВыражения", ИндТек - ИндНач);
				СтрРез = Строка(ВычислитьАргументСуммированияВУсловии(Сред(ПреобразованноеУсловие, ИндНач+3, ИндТек - ИндНач - 2), Контекст));
				СтрРез = СтрЗаменить(СтрРез, ",", ".");
				СтрРез = СтрЗаменить(СтрРез, " ", "");
				СтрРез = СтрЗаменить(СтрРез, Символы.НПП, "");
				АргументыСуммирований.Вставить("Результат", СтрРез);
				МассивАргументовСуммирований.Вставить(Инд - 1, АргументыСуммирований);
			КонецЦикла;
			
			ПроверкаВыражения(ПреобразованноеУсловие);
			Для Инд = 1 По КоличествоСуммирований Цикл
				АргументСуммирования = МассивАргументовСуммирований[КоличествоСуммирований - Инд];
				ПреобразованноеУсловие = Лев(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения - 1) + АргументСуммирования.Результат
										+ Сред(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения + АргументСуммирования.ДлинаВыражения + 1);
				ПроверкаВыражения(ПреобразованноеУсловие);
			КонецЦикла;
			
			Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
				ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
			КонецЦикла;
			Для Каждого КЗ Из Контекст.ОперацииСравнения Цикл
				ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
			КонецЦикла;
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "|=|", "=");
			ПреобразованноеУсловие = ЗаменитьСкалярныеАргументыВВыражении(ПреобразованноеУсловие, Контекст, Кол, Стр);
			ДополнительныеПреобразованияУсловия(ПреобразованноеУсловие);
			Если ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПреобразованноеУсловие) Тогда
				ОтобранныеГрафы = ОтобранныеГрафы + Прав("0000" + Кол, 4);
			КонецЕсли;
		КонецЦикла;
		Стр.columns = ОтобранныеГрафы;
	КонецЦикла;
КонецПроцедуры

Функция СтруктурироватьВыражение(Выражение, Контекст)
	Если Не ЗначениеЗаполнено(Выражение) Тогда 
		Возврат Выражение;
	КонецЕсли;
	
	Результат = НРег(Выражение);
	Для Каждого Терм Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("sumisnull,sumnullif,sumround,sumabs,sumcoalesce,sumfloor", ",") Цикл 
		ДлТерм = СтрДлина(Терм);
		ЗаменаНа = "sum(" + Сред(Терм, 4);
		Пока Истина Цикл 
			ИндексСум = СтрНайти(Результат, Терм);
			Если ИндексСум = 0 Тогда 
				Прервать;
			КонецЕсли;
			ОткрСимвол = Сред(Результат, ИндексСум + ДлТерм, 1);
			Если ОткрСимвол = "(" Тогда 
				ЗакрСимвол = ")";
			ИначеЕсли ОткрСимвол = "{" Тогда 
				ЗакрСимвол = "}";
			Иначе
				ВызватьИсключение "";
			КонецЕсли;
			
			Инд = ДлТерм + 1;
			Счетчик = 1;
			Пока Счетчик > 0 И Инд < СтрДлина(Результат) Цикл 
				Если Сред(Результат, ИндексСум + Инд, 1) = ОткрСимвол Тогда 
					Счетчик = Счетчик + 1;
				ИначеЕсли Сред(Результат, ИндексСум + Инд, 1) = ЗакрСимвол Тогда 
					Счетчик = Счетчик - 1;
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
			Если Счетчик <> 0 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			
			НовыйАрг = ЗаменаНа + Сред(Результат, ИндексСум + ДлТерм, ИндексСум + Инд) + ")";
			Результат = Лев(Результат, ИндексСум - 1) + НовыйАрг + Сред(Результат, ИндексСум + Инд);
		КонецЦикла;
	КонецЦикла;
	
	Аргументы = ПолучитьВсеАргументыВыражения(Контекст, Результат);
	Для Каждого КЗ Из Аргументы Цикл
		Аргумент = Кз.Ключ;
		Если ЗначениеЗаполнено(Контекст.ОТЧ.ПривестиЗначение(ПолучитьАргументСкобки(Аргумент, 2))) Тогда 
			Продолжить;
		КонецЕсли;
		Секция = Прав("000" + Контекст.ОТЧ.ПривестиЗначение(ПолучитьАргументСкобки(Аргумент, 1)), 3);
		Если Контекст.СтрокиСекции[Секция] = Неопределено
			Или Контекст.СтрокиСекции[Секция].Количество() <> 1 Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого Кз1 Из Контекст.СтрокиСекции[Секция] Цикл 
			НовАрг = Лев(Аргумент, СтрНайти(Аргумент, "[", НаправлениеПоиска.СНачала, 1, 2)) + Контекст.ОТЧ.ПривестиЗначение(Кз1.Ключ) + Сред(Аргумент, СтрНайти(Аргумент, "]", НаправлениеПоиска.СНачала, 1, 2));
			Результат = СтрЗаменить(Результат, Аргумент, НовАрг);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция УсловиеИКонтрольИзРазныхРазделов(Контекст, condition, rule)
	СекцииУсловия = Новый Соответствие;
	СекцииКонтроля = Новый Соответствие;
	Аргументы = ПолучитьВсеАргументыКромеСуммированийВВыражении(Контекст, condition);
	Для Каждого Арг Из Аргументы Цикл 
		СекцииУсловия.Вставить(ПолучитьАргументСкобки(Арг.Ключ, 1), Истина);
	КонецЦикла;
	Аргументы = ПолучитьВсеАргументыКромеСуммированийВВыражении(Контекст, rule);
	Для Каждого Арг Из Аргументы Цикл 
		СекцииКонтроля.Вставить(ПолучитьАргументСкобки(Арг.Ключ, 1), Истина);
	КонецЦикла;
	Если СекцииКонтроля.Количество() = 1
		И СекцииУсловия.Количество() = 1 Тогда 
		
		Возврат (Неопределено = СекцииУсловия[ПолучитьАргументСкобки(Арг.Ключ, 1)]);
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ПроверитьКонтрольноеСоотношение(СтрокаТаблицы, Контекст) Экспорт
	Если Не Контекст.Свойство("ПредыдущийПериод_ДанныеОтчета")
		И (СтрНайти(СтрокаТаблицы.condition, "{{") > 0 Или СтрНайти(СтрокаТаблицы.rule, "{{") > 0) Тогда 
		
		// Нет данных предидущего периода
		// Соотношение не проверяется
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.periodClause) Тогда 
		Если Не ПроверитьУсловиеНаПериод(Контекст, СтрокаТаблицы.periodClause) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТаблицы.condition = СтруктурироватьВыражение(СтрокаТаблицы.condition, Контекст);
	СтрокаТаблицы.rule = СтруктурироватьВыражение(СтрокаТаблицы.rule, Контекст);
	
	Графы = Неопределено;
	Строки = Неопределено;
	Специфики = Неопределено;
	СтрокиИГрафы = Неопределено;
	Если ЗначениеЗаполнено(СтрокаТаблицы.condition) Тогда
		Если ЭтоСкалярноеУсловие(Контекст, СтрокаТаблицы.condition) Тогда
			Если Не ВычислитьСкалярноеУсловие(СтрокаТаблицы.condition, Контекст, СтрокаТаблицы.precision) Тогда 
				Возврат Истина;
			Иначе
				Если ЭтоСкалярноеУсловие(Контекст, СтрокаТаблицы.rule) Тогда
					Возврат ВычислитьСкалярноеУсловие(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision);
				ИначеЕсли ЭтоВариацияПоГрафам(Контекст, СтрокаТаблицы.rule, Графы) Тогда
					Возврат ВычислитьУсловиеПоГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, Графы);
				ИначеЕсли ЭтоВариацияПоСтрокам(Контекст, СтрокаТаблицы.rule, Строки) Тогда
					Возврат ВычислитьУсловиеПоСтрокам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, Строки);
				ИначеЕсли ЭтоВариацияПоСтрокамИлиГрафам(Контекст, СтрокаТаблицы.rule, СтрокиИГрафы) Тогда
					Возврат ВычислитьУсловиеПоСтрокамИлиГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, СтрокиИГрафы);
				Иначе
					ВызватьИсключение "";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭтоВариацияПоГрафам(Контекст, СтрокаТаблицы.condition, Графы) Тогда
			ОтбГрафы = "";
			ГрафыИтер = Графы;
			Пока Истина Цикл
				Гр = Лев(ГрафыИтер, 4);
				Если Контекст.ОТЧ.ПривестиЗначение(Гр) = 0 Тогда 
					Прервать;
				КонецЕсли;
				ГрафыИтер = Сред(ГрафыИтер, 5);
				Если ВычислитьУсловиеПоГрафам(СтрокаТаблицы.condition, Контекст, СтрокаТаблицы.precision, Гр) Тогда 
					ОтбГрафы = ОтбГрафы + Гр;
				КонецЕсли;
			КонецЦикла;
			Если ЭтоСкалярноеУсловие(Контекст, СтрокаТаблицы.rule) Тогда
				Возврат (Не ЗначениеЗаполнено(ОтбГрафы)) Или ВычислитьСкалярноеУсловие(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision);
			Иначе
				Возврат ВычислитьУсловиеПоГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, ОтбГрафы);
			КонецЕсли;
		ИначеЕсли ЭтоВариацияПоСпецификам(Контекст, СтрокаТаблицы.condition, СтрокаТаблицы.rule, Строки, Специфики) Тогда
			Возврат ВычислитьУсловиеПоСпецификамСУсловием(СтрокаТаблицы.condition, СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, Специфики);
		ИначеЕсли ЭтоВариацияПоСтрокам(Контекст, СтрокаТаблицы.condition, Строки) Тогда
			ОбработатьУсловиеПоСтрокам(СтрокаТаблицы.condition, Контекст, СтрокаТаблицы.precision, Строки);
			Если Строки.Количество() = 0 Тогда 
				Возврат Истина;
			КонецЕсли;
			Если ЭтоСкалярноеУсловие(Контекст, СтрокаТаблицы.rule) Тогда
				Возврат ВычислитьСкалярноеУсловие(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision);
			Иначе
				Если УсловиеИКонтрольИзРазныхРазделов(Контекст, СтрокаТаблицы.condition, СтрокаТаблицы.rule) Тогда 
					ПодстановкаИзвестныхСкалярныхАргументов(Контекст, СтрокаТаблицы.rule, СтрокаТаблицы.precision);
					Если ЭтоСкалярноеУсловие(Контекст, СтрокаТаблицы.rule) Тогда
						Возврат ВычислитьСкалярноеУсловие(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision);
					ИначеЕсли ЭтоВариацияПоГрафам(Контекст, СтрокаТаблицы.rule, Графы) Тогда
						Возврат ВычислитьУсловиеПоГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, Графы);
					ИначеЕсли ЭтоВариацияПоСтрокам(Контекст, СтрокаТаблицы.rule, Строки) Тогда
						Возврат ВычислитьУсловиеПоСтрокам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, Строки);
					ИначеЕсли ЭтоВариацияПоСтрокамИлиГрафам(Контекст, СтрокаТаблицы.rule, СтрокиИГрафы) Тогда
						ВсеАргументыВыражения = ПолучитьВсеАргументыВыражения(Контекст, СтрокаТаблицы.rule);
						ВариацииГраф = ПолучитьВариацииГраф(Контекст, ВсеАргументыВыражения);
						
						Если ВариацииГраф.Количество() = 1 Тогда
							ГрафыВУсловии = "";
							Для Каждого КЗ Из ВариацииГраф Цикл 
								ГрафыВУсловии = КЗ.Ключ;
							КонецЦикла;
							
							Для Кол = 1 По Контекст.КоличествоКолонок Цикл
								Если Не ЧислоВходитВДиапазон(Контекст, Кол, ГрафыВУсловии) Тогда 
									Продолжить;
								КонецЕсли;
								Выражение = ЗаменитьВариациюПоГрафамВВыражении(СтрокаТаблицы.rule, ВсеАргументыВыражения, Контекст, ГрафыВУсловии, Кол);
								Если ЭтоВариацияПоСтрокам(Контекст, Выражение, Строки) Тогда 
									Если Не ВычислитьУсловиеПоСтрокам(Выражение, Контекст, СтрокаТаблицы.precision, Строки) Тогда
										Возврат Ложь;
									КонецЕсли;
								ИначеЕсли ЭтоСкалярноеУсловие(Контекст, Выражение) Тогда
									Если Не ВычислитьСкалярноеУсловие(Выражение, Контекст, СтрокаТаблицы.precision) Тогда 
										Возврат Ложь;
									КонецЕсли;
								Иначе
									ВызватьИсключение "";
								КонецЕсли;
							КонецЦикла;
							Возврат Истина;
						КонецЕсли;
						
						Если СтрНайти(НРег(СтрокаТаблицы.rule), "sum") > 0 Тогда 
							Возврат ВычислитьБезусловноеВыражениеПоСтрокамИГрафам(Контекст, СтрокаТаблицы.rule, СтрокаТаблицы.precision);
						Иначе
							Возврат ВычислитьУсловиеПоСтрокамИлиГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, СтрокиИГрафы);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Возврат ВычислитьУсловиеПоСтрокам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, Строки);
			КонецЕсли;
		ИначеЕсли ЭтоВариацияПоСтрокамИлиГрафам(Контекст, СтрокаТаблицы.condition, СтрокиИГрафы) Тогда
			ОбработатьУсловиеПоСтрокамИлиГрафам(СтрокаТаблицы.condition, Контекст, СтрокаТаблицы.precision, СтрокиИГрафы);
			Возврат ВычислитьУсловиеПоСтрокамИлиГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, СтрокиИГрафы);
		Иначе
			ВызватьИсключение "";
		КонецЕсли;
	Иначе
		ПодстановкаИзвестныхСкалярныхАргументов(Контекст, СтрокаТаблицы.rule, СтрокаТаблицы.precision);
		Если ЭтоСкалярноеУсловие(Контекст, СтрокаТаблицы.rule) Тогда
			Возврат ВычислитьСкалярноеУсловие(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision);
		ИначеЕсли ЭтоВариацияПоГрафам(Контекст, СтрокаТаблицы.rule, Графы) Тогда
			Возврат ВычислитьУсловиеПоГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, Графы);
		ИначеЕсли ЭтоВариацияПоСтрокам(Контекст, СтрокаТаблицы.rule, Строки) Тогда
			Возврат ВычислитьУсловиеПоСтрокам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, Строки);
		ИначеЕсли ЭтоВариацияПоСтрокамИлиГрафам(Контекст, СтрокаТаблицы.rule, СтрокиИГрафы) Тогда
			ВсеАргументыВыражения = ПолучитьВсеАргументыВыражения(Контекст, СтрокаТаблицы.rule);
			ВариацииГраф = ПолучитьВариацииГраф(Контекст, ВсеАргументыВыражения);
			
			Если ВариацииГраф.Количество() = 1 Тогда
				ГрафыВУсловии = "";
				Для Каждого КЗ Из ВариацииГраф Цикл 
					ГрафыВУсловии = КЗ.Ключ;
				КонецЦикла;
				
				Для Кол = 1 По Контекст.КоличествоКолонок Цикл
					Если Не ЧислоВходитВДиапазон(Контекст, Кол, ГрафыВУсловии) Тогда 
						Продолжить;
					КонецЕсли;
					Выражение = ЗаменитьВариациюПоГрафамВВыражении(СтрокаТаблицы.rule, ВсеАргументыВыражения, Контекст, ГрафыВУсловии, Кол);
					Если ЭтоВариацияПоСтрокам(Контекст, Выражение, Строки) Тогда 
						Если Не ВычислитьУсловиеПоСтрокам(Выражение, Контекст, СтрокаТаблицы.precision, Строки) Тогда
							Возврат Ложь;
						КонецЕсли;
					ИначеЕсли ЭтоСкалярноеУсловие(Контекст, Выражение) Тогда
						Если Не ВычислитьСкалярноеУсловие(Выражение, Контекст, СтрокаТаблицы.precision) Тогда 
							Возврат Ложь;
						КонецЕсли;
					Иначе
						ВызватьИсключение "";
					КонецЕсли;
				КонецЦикла;
				Возврат Истина;
			КонецЕсли;
			
			Если СтрНайти(НРег(СтрокаТаблицы.rule), "sum") > 0 Тогда 
				Возврат ВычислитьБезусловноеВыражениеПоСтрокамИГрафам(Контекст, СтрокаТаблицы.rule, СтрокаТаблицы.precision);
			Иначе
				Возврат ВычислитьУсловиеПоСтрокамИлиГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, СтрокиИГрафы);
			КонецЕсли;
		Иначе
			ВызватьИсключение "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьСведенияОШаблоне(Форма, ИмяМакетаАтрибутов)
	Результат = Новый Структура("ОКУД,КодШаблона,Версия,Шифр,КодФормы,Наименование,КодПериодичности");
	Если ТипЗнч(ИмяМакетаАтрибутов) = Тип("Строка") Тогда 
		ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов(Форма, ИмяМакетаАтрибутов);
		ДопАтрибуты.Свойство("OKUD", Результат.ОКУД);
		ДопАтрибуты.Свойство("code", Результат.КодШаблона);
		ДопАтрибуты.Свойство("version", Результат.Версия);
		ДопАтрибуты.Свойство("shifr", Результат.Шифр);
		ДопАтрибуты.Свойство("name", Результат.Наименование);
		ДопАтрибуты.Свойство("idf", Результат.КодФормы);
		ДопАтрибуты.Свойство("idp", Результат.КодПериодичности);
	ИначеЕсли ТипЗнч(ИмяМакетаАтрибутов) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, ИмяМакетаАтрибутов);
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	Результат.КодФормы = ТипЧисло.ПривестиЗначение(Результат.КодФормы);
	Результат.КодПериодичности = ТипЧисло.ПривестиЗначение(Результат.КодПериодичности);
	Возврат Результат;
КонецФункции

Функция ПроверитьКонтрольныеСоотношенияИзШаблона(Форма, ПараметрыПроверкиКонтрольныхСоотношений) Экспорт
	СведШаблон = ПолучитьСведенияОШаблоне(Форма, ПараметрыПроверкиКонтрольныхСоотношений.Атрибуты);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ВерсияШаблона", СведШаблон.Версия);
	ДанныеШаблонаИзРегистра = РегламентированнаяОтчетность.ПолучитьДанныеШаблона(Форма,
																				ПараметрыПроверкиКонтрольныхСоотношений.Атрибуты,
																				ПараметрыПроверкиКонтрольныхСоотношений.ШаблонРосстата,
																				СведШаблон,
																				СведШаблон.Версия);
	Если Не ПараметрыПроверкиКонтрольныхСоотношений.ДоступноФормированиеТекстаВыгрузкиБезКонтекстаФормы Тогда 
		Если ПараметрыПроверкиКонтрольныхСоотношений.ТиповойСпособФормированияТекстаВыгрузки Тогда 
			РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(Форма);
			ПараметрыВыгрузки = Форма.СформироватьСтруктуруПараметров();
			Если ТипЗнч(ДанныеШаблонаИзРегистра) = Тип("ХранилищеЗначения") И ПараметрыВыгрузки.Свойство("ВерсияШаблона") Тогда
				ПараметрыВыгрузки.ВерсияШаблона = СведШаблон.Версия;
			КонецЕсли;
			Если ТипЗнч(ПараметрыПроверкиКонтрольныхСоотношений.СхемаВыгрузки) = Тип("Строка") Тогда 
				ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(Форма, ПараметрыПроверкиКонтрольныхСоотношений.СхемаВыгрузки);
			ИначеЕсли ТипЗнч(ПараметрыПроверкиКонтрольныхСоотношений.СхемаВыгрузки) = Тип("ДеревоЗначений") Тогда
				ДеревоВыгрузки = ПараметрыПроверкиКонтрольныхСоотношений.СхемаВыгрузки;
			КонецЕсли;
			Форма.ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
			ПараметрыПроверкиКонтрольныхСоотношений.ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПроверкиКонтрольныхСоотношений.Свойство("ВыполнятьСинхронно")
		И ПараметрыПроверкиКонтрольныхСоотношений.ВыполнятьСинхронно = Истина Тогда 
		
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор));
		ПроверитьКонтрольныеСоотношенияВОтчетеВФоне(ПараметрыПроверкиКонтрольныхСоотношений, РезультатВыполнения.АдресХранилища);
		Возврат РезультатВыполнения;
	Иначе
		ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Форма.УникальныйИдентификатор);
		ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
		РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("ИнтерпретаторКонтрольныхСоотношенийРосстата.ПроверитьКонтрольныеСоотношенияВОтчетеВФоне",
																ПараметрыПроверкиКонтрольныхСоотношений, ПараметрыВыполненияВФоне);
											
		РезультатВыполнения.Вставить("ЗаданиеВыполнено", НРег(РезультатВыполнения.Статус) = "выполнено");
		ПараметрыПроверкиКонтрольныхСоотношений.АдресХранилища       = РезультатВыполнения.АдресРезультата;
		ПараметрыПроверкиКонтрольныхСоотношений.ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		
		Если РезультатВыполнения.ЗаданиеВыполнено Тогда
			РезультатПроверкиКонтрольныхСоотношений = ПолучитьИзВременногоХранилища(ПараметрыПроверкиКонтрольныхСоотношений.АдресХранилища);
		КонецЕсли;
		
		Возврат РезультатВыполнения;
	КонецЕсли;
КонецФункции

Процедура ПроверитьКонтрольныеСоотношенияВОтчетеВФоне(ПараметрыДляПроверки, АдресХранилища) Экспорт 
	Результат = ПроверитьКонтрольныеСоотношенияВОтчете(ПараметрыДляПроверки);
	ПоместитьВоВременноеХранилище(Результат, ПараметрыДляПроверки.АдресХранилища);
КонецПроцедуры

Процедура ИзменитьВерсиюФорматаСПроверкойСовместимостиШаблонов(МодульОтчета, ПараметрыДляПроверки, ИтоговыйФайл) Экспорт
	Попытка
		Если СтрНачинаетсяС(ПараметрыДляПроверки.ИмяФормы, "Внешний") Тогда
			Возврат;
		КонецЕсли;
		
		ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов(ПараметрыДляПроверки.ИмяФормы, ПараметрыДляПроверки.Атрибуты);
		Если (НЕ ДопАтрибуты.Свойство("OKUD"))
		 ИЛИ (НЕ ДопАтрибуты.Свойство("code"))
		 ИЛИ (НЕ ЗначениеЗаполнено(ДопАтрибуты.code)) Тогда 
			Возврат;
		КонецЕсли;
		
		ИмяПоследнейФормыОчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
			РегламентированнаяОтчетностьВызовСервера.ИсточникОтчета(ПараметрыДляПроверки.ИмяФормы),
			ДобавитьМесяц(ТекущаяДатаСеанса(), 24));
		
		ЭтоПоследняяРеализацияОтчета = СтрЗаканчиваетсяНа(ПараметрыДляПроверки.ИмяФормы, ИмяПоследнейФормыОчета);
		
		Если ЭтоПоследняяРеализацияОтчета Тогда
			// В запросе будут отобраны шаблоны с любым "idf" длиной 3 символа в составе кода.
			КодШаблона = Лев(ДопАтрибуты.code, СтрДлина(ДопАтрибуты.code) - 6) + "___" + Прав(ДопАтрибуты.code, 3);
		Иначе
			// В запросе будут отобраны шаблоны с кодом равным коду текущего шаблона формы отчета.
			КодШаблона = ДопАтрибуты.code;
		КонецЕсли;
		
		КодФормыШаблона = Сред(ДопАтрибуты.code, СтрДлина(ДопАтрибуты.code) - 5, 3);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	РАЗНОСТЬДАТ(&ТекущаяДата, ШаблоныЭВФОтчетовСтатистики.ДатаДобавления, СЕКУНДА) КАК РазностьДат,
			|	ШаблоныЭВФОтчетовСтатистики.КодШаблона КАК КодШаблона,
			|	ШаблоныЭВФОтчетовСтатистики.Версия КАК Версия,
			|	ШаблоныЭВФОтчетовСтатистики.Шаблон КАК Шаблон,
			|	ПОДСТРОКА(ШаблоныЭВФОтчетовСтатистики.Версия, 7, 4)
			|	+ ПОДСТРОКА(ШаблоныЭВФОтчетовСтатистики.Версия, 4, 2)
			|	+ ПОДСТРОКА(ШаблоныЭВФОтчетовСтатистики.Версия, 1, 2) КАК ВерсияСортировка
			|ИЗ
			|	РегистрСведений.ШаблоныЭВФОтчетовСтатистики КАК ШаблоныЭВФОтчетовСтатистики
			|ГДЕ
			|	ШаблоныЭВФОтчетовСтатистики.ОКУД = &ОКУД
			|	И ШаблоныЭВФОтчетовСтатистики.КодШаблона ПОДОБНО &КодШаблона
			|УПОРЯДОЧИТЬ ПО
			|	ВерсияСортировка УБЫВ,
			|	КодШаблона УБЫВ,
			|	РазностьДат УБЫВ";
		Запрос.УстановитьПараметр("ОКУД", ДопАтрибуты.OKUD);
		Запрос.УстановитьПараметр("КодШаблона", КодШаблона);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		ЗаменитьФормат = Ложь;
		Пока Выборка.Следующий() Цикл
			
			КодФормыШаблонаВыб = Сред(Выборка.КодШаблона, СтрДлина(Выборка.КодШаблона) - 5, 3);
			Если (ДатаВерсии(Выборка.Версия) <= ДатаВерсии(ДопАтрибуты.version)) ИЛИ (КодФормыШаблона > КодФормыШаблонаВыб) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ (Выборка.РазностьДат < 3600 И Выборка.РазностьДат > -3600) Тогда 
				Продолжить;
			КонецЕсли;
			
			ИтоговоеИмяШаблона = ПараметрыДляПроверки.ШаблонРосстата;
			Для Каждого Мкт Из МодульОтчета.Метаданные().Макеты Цикл 
				Если СтрНачинаетсяС(Мкт.Имя, "EF_")
					И СтрЗаканчиваетсяНа(Мкт.Имя, ПараметрыДляПроверки.ШаблонРосстата) Тогда 
					ИтоговоеИмяШаблона = Мкт.Имя;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ УниверсальныйОтчетСтатистики.СравнитьСтруктурыШаблонов(Выборка.Шаблон,
				МодульОтчета.ПолучитьМакет(ИтоговоеИмяШаблона)) Тогда 
				Продолжить;
			КонецЕсли;
			
			Если НЕ РегламентированнаяОтчетность.ПроверкаФорматаПоПериодуПрименения(ПараметрыДляПроверки, Выборка.Версия) Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗаменитьФормат = Истина;
			Прервать;
		КонецЦикла;
		
		Если НЕ ЗаменитьФормат Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыДляПроверки.ВерсияШаблона = Выборка.Версия;
		
		УдалитьФайлы(ИтоговыйФайл);
		ИтоговыйФайл = ПолучитьИмяВременногоФайла("xml");
		Выборка.Шаблон.Получить().Записать(ИтоговыйФайл);
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ПроверитьСпецификиНаЗаполненность(Контекст, Результат, Инд, ПараметрыДляПроверки)
	Для Каждого МнгСтр Из Контекст.ТаблицаМножественныхСтрок Цикл 
		Контекст.СтруктураПоискаСекцияСтрока.section = МнгСтр.section;
		Контекст.СтруктураПоискаСекцияСтрока.row = МнгСтр.row;
		МнгИнфо = Контекст.ТаблицаТиповСтрок.НайтиСтроки(Контекст.СтруктураПоискаСекцияСтрока);
		Если МнгИнфо.Количество() <> 1 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		МнгИнфо = МнгИнфо[0];
		
		ОтбСтроки = Контекст.ОсновнойПериод_ДанныеОтчета.НайтиСтроки(Контекст.СтруктураПоискаСекцияСтрока);
		ЕстьНезаполненныеСпецифики = Ложь;
		Для Каждого СтрокаДанных Из ОтбСтроки Цикл
			Для Итер = 1 По 3 Цикл
				Если МнгИнфо["s" + Итер + "_isPresent"]
					И (Не СтрокаДанных["s" + Итер + "_isPresent"] Или Не ЗначениеЗаполнено(СтрокаДанных["s" + Итер])) Тогда 
					
					ЕстьНезаполненныеСпецифики = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьНезаполненныеСпецифики Тогда 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьНезаполненныеСпецифики Тогда 
			Инд = Инд + 1;
			ИндСтр = Формат(Инд, "ЧГ=");
			Результат.СтруктураОшибок.Вставить("Описание" + ИндСтр, "");
			Результат.КоличествоНайденныхОшибок = Результат.КоличествоНайденныхОшибок + 1;
			Результат.СтруктураОшибок.Вставить("Комментарий" + ИндСтр, "Вероятная ошибка");
			Результат.СтруктураОшибок.Вставить("Нарушение" + ИндСтр, "XML шаблон от " + ПараметрыДляПроверки.ВерсияШаблона);
			Результат.СтруктураОшибок.Вставить("Расшифровка" + ИндСтр, "");
			Результат.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндСтр, "По строке " + Контекст.ОТЧ.ПривестиЗначение(МнгСтр.row) 
																				+ ", секция " + Контекст.ОТЧ.ПривестиЗначение(МнгСтр.section) 
																				+ " есть незаполненные ключевые поля");
			Результат.СтруктураОшибок.Вставить("ЭтоОшибка" + ИндСтр, Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьСпецификиНаДублирование(Контекст, Результат, Инд, ПараметрыДляПроверки)
	ВариантыСпецифик = Новый Соответствие;
	Для Каждого МнгСтр Из Контекст.ТаблицаМножественныхСтрок Цикл 
		Контекст.СтруктураПоискаСекцияСтрока.section = МнгСтр.section;
		Контекст.СтруктураПоискаСекцияСтрока.row = МнгСтр.row;
		МнгИнфо = Контекст.ТаблицаТиповСтрок.НайтиСтроки(Контекст.СтруктураПоискаСекцияСтрока);
		Если МнгИнфо.Количество() <> 1 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		МнгИнфо = МнгИнфо[0];
		КлючПрефикс = МнгСтр.section + "@" + МнгСтр.row + "@";
		
		ОтбСтроки = Контекст.ОсновнойПериод_ДанныеОтчета.НайтиСтроки(Контекст.СтруктураПоискаСекцияСтрока);
		Для Каждого СтрокаДанных Из ОтбСтроки Цикл
			Ключ = КлючПрефикс;
			Для Итер = 1 По 3 Цикл
				Если МнгИнфо["s" + Итер + "_isPresent"] Тогда 
					Ключ = Ключ + СтрокаДанных["s" + Итер] + "@";
				КонецЕсли;
			КонецЦикла;
			Если ВариантыСпецифик[Ключ] = Неопределено Тогда 
				ВариантыСпецифик.Вставить(Ключ, 1);
			Иначе
				ВариантыСпецифик[Ключ] = 2;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КЗ Из ВариантыСпецифик Цикл 
		Если КЗ.Значение = 1 Тогда 
			Продолжить;
		КонецЕсли;
		
		Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КЗ.Ключ, "@");
		Пока Разложение.Количество() < 5 Цикл 
			Разложение.Добавить(Неопределено);
		КонецЦикла;
		ОписаниеОшибки = "По строке " + Контекст.ОТЧ.ПривестиЗначение(Разложение[1]) + ", секция " + Контекст.ОТЧ.ПривестиЗначение(Разложение[0])
						+ " в отчете имеются дублирующиеся строки с ключевыми полями "
						+ ?(ЗначениеЗаполнено(Разложение[2]), Разложение[2], "")
						+ ?(ЗначениеЗаполнено(Разложение[3]), "/" + Разложение[3], "")
						+ ?(ЗначениеЗаполнено(Разложение[4]), "/" + Разложение[4], "");
						
		Инд = Инд + 1;
		ИндСтр = Формат(Инд, "ЧГ=");
		Результат.СтруктураОшибок.Вставить("Описание" + ИндСтр, "");
		Результат.КоличествоНайденныхОшибок = Результат.КоличествоНайденныхОшибок + 1;
		Результат.СтруктураОшибок.Вставить("Комментарий" + ИндСтр, "Вероятная ошибка");
		Результат.СтруктураОшибок.Вставить("Нарушение" + ИндСтр, "XML шаблон от " + ПараметрыДляПроверки.ВерсияШаблона);
		Результат.СтруктураОшибок.Вставить("Расшифровка" + ИндСтр, "");
		Результат.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндСтр, ОписаниеОшибки);
		Результат.СтруктураОшибок.Вставить("ЭтоОшибка" + ИндСтр, Истина);
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьЗаполненностьПолейТитула(Контекст, Результат, Инд, ПараметрыДляПроверки)
	Для Каждого КЗ Из Контекст.СписокПолейТитула Цикл 
		Если Не ЗначениеЗаполнено(Контекст.ЗначенияПолейТитула[КЗ.Ключ]) Тогда 
			Инд = Инд + 1;
			ИндСтр = Формат(Инд, "ЧГ=");
			Результат.СтруктураОшибок.Вставить("Описание" + ИндСтр, "");
			Результат.КоличествоНайденныхОшибок = Результат.КоличествоНайденныхОшибок + 1;
			Результат.СтруктураОшибок.Вставить("Комментарий" + ИндСтр, "Обязательно к заполнению");
			Результат.СтруктураОшибок.Вставить("Нарушение" + ИндСтр, "XML шаблон от " + ПараметрыДляПроверки.ВерсияШаблона);
			Результат.СтруктураОшибок.Вставить("Расшифровка" + ИндСтр, "");
			Результат.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндСтр, "Не заполнено поле титула: " + КЗ.Значение);
			Результат.СтруктураОшибок.Вставить("ЭтоОшибка" + ИндСтр, Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьОбязательныеДляЗаполненияГрафы(Контекст, Результат, Инд, ПараметрыДляПроверки)
	Отбор = Новый Структура("section,row");
	ОтборСпецифик = Новый Структура("Секция,Колонка");
	
	Для Каждого Стр Из Контекст.ОбязательныеДляВводаГрафы Цикл 
		ФлагОшибки = Ложь;
		Отбор.section = Стр.Секция;
		Отбор.row = Стр.Строка;
		Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(Отбор).Количество() > 0 Тогда 
			Если Контекст.ОсновнойПериод_ДанныеОтчета.НайтиСтроки(Отбор).Количество() = 0 Тогда 
				ФлагОшибки = Истина;
			Иначе
				ОтборСпецифик.Секция = Стр.Секция;
				ОтборСпецифик.Колонка = Стр.Колонка;
				Специфики = Контекст.КолонкиСпецифик.НайтиСтроки(ОтборСпецифик);
				Если Специфики.Количество() > 0 Тогда 
					ИмяКол = Специфики[0].Специфика + "_isPresent";
				Иначе
					ИмяКол = "col" + Стр.Колонка + "_isPresent";
				КонецЕсли;
				Отбор.Вставить(ИмяКол, Истина);
				ОтобранныеСтроки = Контекст.ОсновнойПериод_ДанныеОтчета.НайтиСтроки(Отбор);
				Если ОтобранныеСтроки.Количество() = 0
					Или Не ЗначениеЗаполнено(ОтобранныеСтроки[0][Специфики[0].Специфика]) Тогда 
					ФлагОшибки = Истина;
				КонецЕсли;
				Отбор.Удалить(ИмяКол);
			КонецЕсли;
		Иначе
			Если Контекст.ОсновнойПериод_ДанныеОтчета.НайтиСтроки(Отбор).Количество() = 0 Тогда 
				ФлагОшибки = Истина;
			Иначе
				ИмяКол = "col" + Стр.Колонка + "_isPresent";
				Отбор.Вставить(ИмяКол, Истина);
				Если Контекст.ОсновнойПериод_ДанныеОтчета.НайтиСтроки(Отбор).Количество() = 0 Тогда 
					ФлагОшибки = Истина;
				КонецЕсли;
				Отбор.Удалить(ИмяКол);
			КонецЕсли;
		КонецЕсли;
		
		Если ФлагОшибки Тогда 
			Инд = Инд + 1;
			ИндСтр = Формат(Инд, "ЧГ=");
			Результат.СтруктураОшибок.Вставить("Описание" + ИндСтр, "");
			Результат.КоличествоНайденныхОшибок = Результат.КоличествоНайденныхОшибок + 1;
			Результат.СтруктураОшибок.Вставить("Комментарий" + ИндСтр, "Поле необходимо заполнить");
			Результат.СтруктураОшибок.Вставить("Нарушение" + ИндСтр, "XML шаблон от " + ПараметрыДляПроверки.ВерсияШаблона);
			Результат.СтруктураОшибок.Вставить("Расшифровка" + ИндСтр, "");
			Результат.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндСтр, 
				"Не заполнено обязательное поле: " + Контекст.ИменаСекций[Стр.Секция]
				+ " строка:" + Формат(Контекст.ОТЧ.ПривестиЗначение(Отбор.row), "ЧГ=")
				+ " колонка:" + Формат(Контекст.ОТЧ.ПривестиЗначение(Стр.Колонка), "ЧГ="));
			Результат.СтруктураОшибок.Вставить("ЭтоОшибка" + ИндСтр, Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПроверитьКонтрольныеСоотношенияВОтчете(ПараметрыДляПроверки)
	МодульОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПараметрыДляПроверки.ИмяФормы);
	Если Не ЗначениеЗаполнено(ПараметрыДляПроверки.ТекстВыгрузки)
		И ПараметрыДляПроверки.ДоступноФормированиеТекстаВыгрузкиБезКонтекстаФормы Тогда
		
		РазложениеИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыДляПроверки.ИмяФормы, ".");
		Если СтрНайти(ПараметрыДляПроверки.ИмяФормы, "Внешний") > 0 Тогда 
			ПараметрыДляПроверки.ТекстВыгрузки = МодульОтчета.ТекстВыгрузкиОтчетаСтатистики(ПараметрыДляПроверки.Ссылка, РазложениеИмени[3]);
		Иначе
			ПараметрыДляПроверки.ТекстВыгрузки = ОбщегоНазначения.ОбщийМодуль("Отчеты." + РазложениеИмени[1]).ТекстВыгрузкиОтчетаСтатистики(ПараметрыДляПроверки.Ссылка, РазложениеИмени[3]);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыДляПроверки.ШаблонРосстата) = Тип("Строка") Тогда
		ИтоговоеИмяШаблона = ПараметрыДляПроверки.ШаблонРосстата;
		Для Каждого Мкт Из МодульОтчета.Метаданные().Макеты Цикл 
			Если СтрНачинаетсяС(Мкт.Имя, "EF_")
				И СтрЗаканчиваетсяНа(Мкт.Имя, ПараметрыДляПроверки.ШаблонРосстата) Тогда 
				ИтоговоеИмяШаблона = Мкт.Имя;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеШаблона = МодульОтчета.ПолучитьМакет(ИтоговоеИмяШаблона);
		ВФАрх = ПолучитьИмяВременногоФайла("zip");
		ДанныеШаблона.Записать(ВФАрх);
		КаталогРазархивирования = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(КаталогРазархивирования);
		КаталогРазархивирования = КаталогРазархивирования + ПолучитьРазделительПути();
		
		ЧтениеZip = Новый ЧтениеZipФайла(ВФАрх);
		ЧтениеZip.Извлечь(ЧтениеZip.Элементы[0], КаталогРазархивирования);
		ИтоговыйФайл = КаталогРазархивирования + ЧтениеZip.Элементы[0].Имя;
		ЧтениеZip.Закрыть();
	ИначеЕсли ТипЗнч(ПараметрыДляПроверки.ШаблонРосстата) = Тип("ДвоичныеДанные") Тогда 
		ДанныеШаблона = ПараметрыДляПроверки.ШаблонРосстата;
		ИтоговыйФайл = ПолучитьИмяВременногоФайла("xml");
		ДанныеШаблона.Записать(ИтоговыйФайл);
	КонецЕсли;
	
	ВыгрузкаПредидущегоПериода = Неопределено;
	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыДляПроверки.Ссылка, "ДанныеОтчета").Получить().Свойство("ВыгрузкаПредидущегоПериода", ВыгрузкаПредидущегоПериода);
	ИзменитьВерсиюФорматаСПроверкойСовместимостиШаблонов(МодульОтчета, ПараметрыДляПроверки, ИтоговыйФайл);
	Контекст = СформироватьКонтекстДляПроверок(ИтоговыйФайл, ПараметрыДляПроверки.ТекстВыгрузки, ВыгрузкаПредидущегоПериода);
	УдалитьФайлы(ИтоговыйФайл);
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоНайденныхБезОшибок", 0);
	Результат.Вставить("КоличествоНайденныхОшибок", 0);
	Результат.Вставить("ЭтоАвтопроверкаСтатистики", Истина);
	Результат.Вставить("СтруктураОшибок", Новый Структура);
	
	Инд = 0;
	Если Контекст.ПроверкаОтчетаНаПустоту И Контекст.ОсновнойПериод_ДанныеОтчета.Количество() = 0 Тогда 
		Инд = Инд + 1;
		ИндСтр = Формат(Инд, "ЧГ=");
		Результат.СтруктураОшибок.Вставить("Описание" + ИндСтр, "");
		Результат.КоличествоНайденныхОшибок = Результат.КоличествоНайденныхОшибок + 1;
		Результат.СтруктураОшибок.Вставить("Комментарий" + ИндСтр, "");
		Результат.СтруктураОшибок.Вставить("Нарушение" + ИндСтр, "XML шаблон от " + ПараметрыДляПроверки.ВерсияШаблона);
		Результат.СтруктураОшибок.Вставить("Расшифровка" + ИндСтр, "");
		Результат.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндСтр, "Отчет не может быть пустым");
		Результат.СтруктураОшибок.Вставить("ЭтоОшибка" + ИндСтр, Истина);
	КонецЕсли;
	
	Попытка
		ПроверитьЗаполненностьПолейТитула(Контекст, Результат, Инд, ПараметрыДляПроверки);
		ПроверитьСпецификиНаЗаполненность(Контекст, Результат, Инд, ПараметрыДляПроверки);
		ПроверитьСпецификиНаДублирование(Контекст, Результат, Инд, ПараметрыДляПроверки);
		ПроверитьОбязательныеДляЗаполненияГрафы(Контекст, Результат, Инд, ПараметрыДляПроверки);
	Исключение
	КонецПопытки;
	
	Для Каждого Стр Из Контекст.ТаблицаКонтрольныхСоотношений Цикл
		Контекст.ПолучитьВсеАргументыВыражения.Очистить();
		Контекст.ПолучитьВсеАргументыКромеСуммированийВВыражении.Очистить();
		Инд = Инд + 1;
		ИндСтр = Формат(Инд, "ЧГ=");
		Результат.СтруктураОшибок.Вставить("Описание" + ИндСтр, "");
		Попытка
			Если ПроверитьКонтрольноеСоотношение(Стр, Контекст) Тогда 
				Результат.КоличествоНайденныхБезОшибок = Результат.КоличествоНайденныхБезОшибок + 1;
				Результат.СтруктураОшибок.Вставить("Комментарий" + ИндСтр, "");
				Результат.СтруктураОшибок.Вставить("Нарушение" + ИндСтр, "XML шаблон от " + ПараметрыДляПроверки.ВерсияШаблона);
				Результат.СтруктураОшибок.Вставить("Расшифровка" + ИндСтр, Стр.rule);
				Результат.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндСтр, Стр.name);
				Результат.СтруктураОшибок.Вставить("ЭтоОшибка" + ИндСтр, Ложь);
			Иначе
				Результат.КоличествоНайденныхОшибок = Результат.КоличествоНайденныхОшибок + 1;
				Результат.СтруктураОшибок.Вставить("Комментарий" + ИндСтр, ?(Контекст.ОТЧ.ПривестиЗначение(Стр.tip) = 1, "", НСтр("ru='Контролировать необязательно'")));
				Результат.СтруктураОшибок.Вставить("Нарушение" + ИндСтр, "XML шаблон от " + ПараметрыДляПроверки.ВерсияШаблона);
				Результат.СтруктураОшибок.Вставить("Расшифровка" + ИндСтр, Стр.rule);
				Результат.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндСтр, Стр.name);
				Результат.СтруктураОшибок.Вставить("ЭтоОшибка" + ИндСтр, Истина);
			КонецЕсли;
		Исключение
			Результат.КоличествоНайденныхБезОшибок = Результат.КоличествоНайденныхБезОшибок + 1;
			Результат.СтруктураОшибок.Вставить("Комментарий" + ИндСтр, НСтр("ru='Не удалось вычислить условие'") + ?(Контекст.ОТЧ.ПривестиЗначение(Стр.tip) = 1, "", Символы.ПС + НСтр("ru='Контролировать необязательно'")));
			Результат.СтруктураОшибок.Вставить("Нарушение" + ИндСтр, "XML шаблон от " + ПараметрыДляПроверки.ВерсияШаблона);
			Результат.СтруктураОшибок.Вставить("Расшифровка" + ИндСтр, Стр.rule);
			Результат.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндСтр, Стр.name);
			Результат.СтруктураОшибок.Вставить("ЭтоОшибка" + ИндСтр, Ложь);
		КонецПопытки;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ДатаВерсии(СтрДата)
	
	Разделители = "-.,/:";
	
	ДлинаСтроки = СтрДлина(СтрДата);
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("");
	
	Для НС = 1 По ДлинаСтроки Цикл
		Сим = Сред(СтрДата, НС, 1);
		Если СтрНайти(Разделители, Сим) > 0 Тогда
			МассивПолей.Добавить("");
		ИначеЕсли СтрНайти("0123456789", Сим) > 0 Тогда
			МассивПолей[МассивПолей.ВГраница()] = МассивПолей[МассивПолей.ВГраница()] + Сим;
		КонецЕсли;
	КонецЦикла;
	
	День  = Макс(1, Число("0" + СокрЛП(МассивПолей[0])));
	Месяц = Макс(1, Число("0" + ?(МассивПолей.ВГраница() < 1, "1", СокрЛП(МассивПолей[1]))));
	Год   = Макс(1, Число("0" + ?(МассивПолей.ВГраница() < 2, "1", СокрЛП(МассивПолей[2]))));
	
	Возврат Дата(Год, Месяц, День);
	
КонецФункции

#Область Авторасчет
Функция ПолучитьВсеАргументыСуммированияВВыражении(Выражение)
	ВсеАргументыСуммирования = Новый Соответствие;
	ВыражениеИтер = Выражение;
	ИндексСуммы = СтрНайти(ВыражениеИтер, "sum");
	Пока Не ИндексСуммы = 0 Цикл 
		ИндексОткр = СтрНайти(ВыражениеИтер, "{", НаправлениеПоиска.СНачала, ИндексСуммы);
		ИндексЗакр = СтрНайти(ВыражениеИтер, "}", НаправлениеПоиска.СНачала, ИндексОткр);
		ВсеАргументыСуммирования.Вставить(Сред(ВыражениеИтер, ИндексОткр, ИндексЗакр - ИндексОткр + 1));
		ВыражениеИтер = Лев(ВыражениеИтер, ИндексСуммы - 1) + Сред(ВыражениеИтер, ИндексСуммы + 3);
		ИндексСуммы = СтрНайти(ВыражениеИтер, "sum");
	КонецЦикла;
	
	Возврат ВсеАргументыСуммирования;
КонецФункции

Процедура ЗаменитьЕстьНулл(Контекст, Формула, ФормулаПодходит)
	Попытка
		СтрДл = СтрДлина("isnull(");
		СтрДлФ = СтрДлина(Формула);
		Пока ФормулаПодходит Цикл 
			ИндексЕстьНулл = СтрНайти(Формула, "isnull(");
			Если ИндексЕстьНулл = 0 Тогда 
				Возврат;
			КонецЕсли;
			
			Итер = ИндексЕстьНулл + СтрДл;
			Счетчик = 1;
			Пока Истина Цикл 
				Если Сред(Формула, Итер, 1) = "(" Тогда 
					Счетчик = Счетчик + 1;
					Итер = Итер + 1;
				ИначеЕсли Сред(Формула, Итер, 1) = ")" Тогда 
					Счетчик = Счетчик - 1;
					Если Счетчик = 0 Тогда 
						Итер2 = Итер - 1;
						Пока Не Сред(Формула, Итер2, 1) = "," Цикл 
							Итер2 = Итер2 - 1;
							Если Итер2 = 0 Тогда 
								ФормулаПодходит = Ложь;
								Возврат;
							КонецЕсли;
						КонецЦикла;
						
						Если Не Сред(Формула, Итер2 + 1, Итер - Итер2 - 1) = "0" Тогда 
							ФормулаПодходит = Ложь;
							Возврат;
						КонецЕсли;
						
						Формула = Лев(Формула, ИндексЕстьНулл - 1) + Сред(Формула, ИндексЕстьНулл + СтрДл, Итер2 - ИндексЕстьНулл - СтрДл) + Сред(Формула, Итер + 1);
						Прервать;
					КонецЕсли;
					Итер = Итер + 1;
				ИначеЕсли Итер > СтрДлФ Тогда
					ФормулаПодходит = Ложь;
					Возврат;
				Иначе
					Итер = Итер + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Исключение
		ФормулаПодходит = Ложь;
	КонецПопытки;
КонецПроцедуры

Процедура УстановитьТипРасчета(Контекст, ОтобранныеКонтрольныеСоотношения)
	Для Каждого Стр Из ОтобранныеКонтрольныеСоотношения Цикл
		Попытка
			ЧастиСравнения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр.Формула, "|=|");
			
			ВсеАргументыЛевойЧасти = ПолучитьВсеАргументыВыражения(Контекст, ЧастиСравнения[0]);
			ВсеАргументыПравойЧасти = ПолучитьВсеАргументыВыражения(Контекст, ЧастиСравнения[1]);
			Для Каждого КЗ Из ВсеАргументыЛевойЧасти Цикл 
				АргументЛевойЧасти = КЗ.Ключ;
			КонецЦикла;
			
			СтрокиРасчета = ПолучитьАргументСкобки(АргументЛевойЧасти, 2);
			ГрафыРасчета = ПолучитьАргументСкобки(АргументЛевойЧасти, 3);
			Если СтрНайти(СтрокиРасчета, ",") <> 0 Или Контекст.ОТЧ.ПривестиЗначение(СтрокиРасчета) = 0 Тогда
				СтрокиВПравойЧасти = Новый Соответствие;
				Для Каждого КЗ Из ВсеАргументыПравойЧасти Цикл
					СтрокаВПравойЧасти = ПолучитьАргументСкобки(КЗ.Ключ, 2);
					СтрокиВПравойЧасти.Вставить(СтрокаВПравойЧасти);
				КонецЦикла;
				Если СтрокаВПравойЧасти = СтрокиРасчета И СтрокиВПравойЧасти.Количество() = 1 Тогда 
					Стр.ТипРасчета = 3;
				КонецЕсли;
			ИначеЕсли СтрНайти(ГрафыРасчета, ",") <> 0 Или Контекст.ОТЧ.ПривестиЗначение(ГрафыРасчета) = 0 Тогда 
				ГрафыВПравойЧасти = Новый Соответствие;
				Для Каждого КЗ Из ВсеАргументыПравойЧасти Цикл
					ГрафаВПравойЧасти = ПолучитьАргументСкобки(КЗ.Ключ, 3);
					ГрафыВПравойЧасти.Вставить(ГрафаВПравойЧасти);
				КонецЦикла;
				Если ГрафаВПравойЧасти = ГрафыРасчета И ГрафыВПравойЧасти.Количество() = 1 Тогда 
					Стр.ТипРасчета = 2;
				КонецЕсли;
			Иначе
				ВсеОбычныеАргументыПравойЧасти = ПолучитьВсеАргументыКромеСуммированийВВыражении(Контекст, ЧастиСравнения[1]);
				ВсеАргументыСуммированияПравойЧасти = ПолучитьВсеАргументыСуммированияВВыражении(ЧастиСравнения[1]);
				Если ВсеАргументыСуммированияПравойЧасти.Количество() = 0 Тогда 
					СтрокиВПравойЧасти = Новый Соответствие;
					Для Каждого КЗ Из ВсеАргументыПравойЧасти Цикл
						СтрокаВПравойЧасти = ПолучитьАргументСкобки(КЗ.Ключ, 2);
						СтрокиВПравойЧасти.Вставить(СтрокаВПравойЧасти);
					КонецЦикла;
					Если СтрокаВПравойЧасти = СтрокиРасчета И СтрокиВПравойЧасти.Количество() = 1 Тогда 
						Стр.ТипРасчета = 3;
					КонецЕсли;
					
					ГрафыВПравойЧасти = Новый Соответствие;
					Для Каждого КЗ Из ВсеАргументыПравойЧасти Цикл
						ГрафаВПравойЧасти = ПолучитьАргументСкобки(КЗ.Ключ, 3);
						ГрафыВПравойЧасти.Вставить(ГрафаВПравойЧасти);
					КонецЦикла;
					Если ГрафаВПравойЧасти = ГрафыРасчета И ГрафыВПравойЧасти.Количество() = 1 Тогда 
						Стр.ТипРасчета = 2;
					КонецЕсли;
				Иначе
					СтрокиПравойЧасти = Новый Соответствие;
					ГрафыПравойЧасти = Новый Соответствие;
					Для Каждого КЗ Из ВсеАргументыСуммированияПравойЧасти Цикл
						СтрокаВПравойЧасти = ПолучитьАргументСкобки(КЗ.Ключ, 2);
						ГрафаВПравойЧасти = ПолучитьАргументСкобки(КЗ.Ключ, 3);
						СтрокиПравойЧасти.Вставить(СтрокаВПравойЧасти);
						ГрафыПравойЧасти.Вставить(ГрафаВПравойЧасти);
					КонецЦикла;
					
					Если СтрокиПравойЧасти.Количество() = 1 И СтрокаВПравойЧасти = СтрокиРасчета Тогда 
						УдалитьИзРасчета = Ложь;
						Для Каждого КЗ Из ВсеОбычныеАргументыПравойЧасти Цикл
							Если СтрокиРасчета <> ПолучитьАргументСкобки(КЗ.Ключ, 2) Тогда 
								УдалитьИзРасчета = Истина;
							КонецЕсли;
						КонецЦикла;
						Если Не УдалитьИзРасчета Тогда 
							Стр.ТипРасчета = 3;
						КонецЕсли;
					ИначеЕсли ГрафыПравойЧасти.Количество() = 1 И ГрафаВПравойЧасти = ГрафыРасчета Тогда
						УдалитьИзРасчета = Ложь;
						Для Каждого КЗ Из ВсеОбычныеАргументыПравойЧасти Цикл
							Если ГрафыРасчета <> ПолучитьАргументСкобки(КЗ.Ключ, 3) Тогда 
								УдалитьИзРасчета = Истина;
							КонецЕсли;
						КонецЦикла;
						Если Не УдалитьИзРасчета Тогда 
							Стр.ТипРасчета = 2;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
			Стр.ТипРасчета = 0;
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого Стр Из ОтобранныеКонтрольныеСоотношения.НайтиСтроки(Новый Структура("ТипРасчета", 0)) Цикл 
		ОтобранныеКонтрольныеСоотношения.Удалить(Стр);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПервыйКлючСоответствия(Соотв)
	Для Каждого Элт Из Соотв Цикл 
		Возврат Элт.Ключ;
	КонецЦикла;
КонецФункции

Функция ПорядковыйНомерПериодаВГоду(Контекст)
	Если Контекст.Периодичность = "1" Или Контекст.Периодичность = 1 Тогда 
		Возврат "0101";
	ИначеЕсли Контекст.Периодичность = "2" Или Контекст.Периодичность = 2 Тогда 
		Возврат "02" + ?(Месяц(Контекст.ПараметрыПериода.мДатаКонцаПериодаОтчета) <= 6 , "01", "02");
	ИначеЕсли Контекст.Периодичность = "4" Или Контекст.Периодичность = 4 Тогда 
		Возврат "04" + Формат(Месяц(Контекст.ПараметрыПериода.мДатаКонцаПериодаОтчета)/3, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=");
	ИначеЕсли Контекст.Периодичность = "12" Или Контекст.Периодичность = 12 Тогда 
		Возврат "12" + Формат(Месяц(Контекст.ПараметрыПериода.мДатаКонцаПериодаОтчета), "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=");
	ИначеЕсли Контекст.Периодичность = "36" Или Контекст.Периодичность = 36 Тогда
		НомерПериода = Окр((ДеньГода(Контекст.ПараметрыПериода.мДатаКонцаПериодаОтчета) - 2) / 10, 0);
		Возврат "36" + Формат(НомерПериода, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=");
	ИначеЕсли Контекст.Периодичность = "52" Или Контекст.Периодичность = 52 Тогда
		НомерПериода = НеделяГода(Контекст.ПараметрыПериода.мДатаКонцаПериодаОтчета);
		Возврат "52" + Формат(НомерПериода, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=");
	Иначе
		Возврат "12" + Формат(Месяц(Контекст.ПараметрыПериода.мДатаКонцаПериодаОтчета), "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=");
	КонецЕсли;
КонецФункции

Функция ПервичныйОтборКонтрольныхСоотношений(Контекст)
	ОтобранныеКонтрольныеСоотношения = Контекст.ТаблицаКонтрольныхСоотношений.СкопироватьКолонки();
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("Секция");
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("Строка");
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("Графа");
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("Формула");
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("ТипРасчета");
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("ЛеваяЧасть");
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("ПраваяЧасть");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("fault");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("id");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("name");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("periodClause");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("precision");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("condition");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("tip");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("rule");
	
	Для Каждого Стр Из Контекст.ТаблицаКонтрольныхСоотношений Цикл 
		Если ЗначениеЗаполнено(Стр.condition) Или (Стр.tip <> 1 И Стр.tip <> "1") Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.periodClause) Тогда 
			Если Не ПроверитьУсловиеНаПериод(Контекст, Стр.periodClause) Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Формула = СтрЗаменить(НРег(Стр.rule), " ", "");
		Если СтрНайти(Формула, "|=|") = 0 Или СтрНайти(Формула, "|>|") <> 0 Или СтрНайти(Формула, "|>=|") <> 0
			Или СтрНайти(Формула, "|<|") <> 0 Или СтрНайти(Формула, "|<=|") <> 0
			Или СтрНайти(Формула, "|<>|") <> 0 Или СтрНайти(Формула, "|{{|") <> 0 Тогда 
			
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Формула, "abs") <> 0 Или СтрНайти(Формула, "coalesce") <> 0 
			Или СтрНайти(Формула, "floor") <> 0 Или СтрНайти(Формула, "round") <> 0 Или СтрНайти(Формула, "nullif") Тогда 
			
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(Формула, "|=|") <> 1 Тогда 
			Продолжить;
		КонецЕсли;
		
		ЧастиСравнения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Формула, "|=|");
		Если ЧастиСравнения.Количество() <> 2 Тогда 
			Продолжить;
		КонецЕсли;
		
		ВсеАргументыЛевойЧасти = ПолучитьВсеАргументыВыражения(Контекст, ЧастиСравнения[0]);
		ВсеАргументыПравойЧасти = ПолучитьВсеАргументыВыражения(Контекст, ЧастиСравнения[1]);
		Если ВсеАргументыЛевойЧасти.Количество() <> 1 И ВсеАргументыПравойЧасти.Количество() <> 1 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(ЧастиСравнения[0], "sum") > 0 И СтрНайти(ЧастиСравнения[1], "sum") > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ВсеАргументыЛевойЧасти.Количество() = 1 И СтрНайти(ЧастиСравнения[0], "sum") = 0 Тогда 
			ЛеваяЧасть = ЧастиСравнения[0];
			ПраваяЧасть = ЧастиСравнения[1];
		Иначе
			ЛеваяЧасть = ЧастиСравнения[1];
			ПраваяЧасть = ЧастиСравнения[0];
			Тмп = ВсеАргументыПравойЧасти;
			ВсеАргументыПравойЧасти = ВсеАргументыЛевойЧасти;
			ВсеАргументыЛевойЧасти = Тмп;
		КонецЕсли;
		Формула = ЛеваяЧасть + "|=|" + ПраваяЧасть;
		
		ФормулаПодходит = Истина;
		ЗаменитьЕстьНулл(Контекст, Формула, ФормулаПодходит);
		ЗаменитьЕстьНулл(Контекст, ЛеваяЧасть, ФормулаПодходит);
		ЗаменитьЕстьНулл(Контекст, ПраваяЧасть, ФормулаПодходит);
		Если Не ФормулаПодходит Тогда 
			Продолжить;
		КонецЕсли;
		
		Если "{" + ПолучитьПервыйКлючСоответствия(ВсеАргументыЛевойЧасти) + "}" <> ЛеваяЧасть Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ОтобранныеКонтрольныеСоотношения.НайтиСтроки(Новый Структура("ЛеваяЧасть", ЛеваяЧасть)).Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ВсеСекции = Новый Соответствие;
		ВсеАргументыВыражения = ПолучитьВсеАргументыВыражения(Контекст, Формула);
		Для Каждого Арг Из ВсеАргументыВыражения Цикл 
			Если ЗначениеЗаполнено(ПолучитьАргументСкобки(Арг.Ключ, 4)) 
				Или ЗначениеЗаполнено(ПолучитьАргументСкобки(Арг.Ключ, 5))
				Или ЗначениеЗаполнено(ПолучитьАргументСкобки(Арг.Ключ, 6)) Тогда
				
				СекцияСтр = Прав("000" + ПолучитьАргументСкобки(Арг.Ключ, 1), 3);
				СтрокаСтр = Прав("00000" + ПолучитьАргументСкобки(Арг.Ключ, 2), 5);
				Контекст.ОтборОбычныхСтрок.section = СекцияСтр;
				Контекст.ОтборОбычныхСтрок.row = СтрокаСтр;
				Контекст.ОтборМножественныхСтрок.section = СекцияСтр;
				Контекст.ОтборМножественныхСтрок.row = СтрокаСтр;
				
				Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(Контекст.ОтборМножественныхСтрок).Количество() <> 0
					Или Контекст.ТаблицаТиповСтрок.НайтиСтроки(Контекст.ОтборОбычныхСтрок).Количество() = 0 Тогда 
					ФормулаПодходит = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Секция = Контекст.ОТЧ.ПривестиЗначение(ПолучитьАргументСкобки(Арг.Ключ, 1));
			Если Не ЗначениеЗаполнено(Секция) Тогда
				ФормулаПодходит = Ложь;
				Прервать;
			КонецЕсли;
			
			ВсеСекции.Вставить(Секция);
		КонецЦикла;
		
		Если Не ФормулаПодходит Или ВсеСекции.Количество() <> 1 Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого МнгСтр Из Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(Новый Структура("section", Прав("000" + Секция, 3))) Цикл 
			МнгСтрЧисло = Контекст.ОТЧ.ПривестиЗначение(МнгСтр.row);
			Для Каждого Арг Из ВсеАргументыВыражения Цикл
				Если ЧислоВходитВДиапазон(Контекст, МнгСтрЧисло, ПолучитьАргументСкобки(Арг.Ключ, 2)) Тогда 
					ФормулаПодходит = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ФормулаПодходит Тогда 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ФормулаПодходит Тогда 
			Продолжить;
		КонецЕсли;
		
		НовСтр = ОтобранныеКонтрольныеСоотношения.Добавить();
		НовСтр.Формула = Формула;
		НовСтр.Секция = Секция;
		НовСтр.ЛеваяЧасть = ЛеваяЧасть;
		НовСтр.ПраваяЧасть = ПраваяЧасть;
		НовСтр.ТипРасчета = 0;
		НовСтр.Строка = 0;
		НовСтр.Графа = 0;
	КонецЦикла;
	
	ОтобранныеКонтрольныеСоотношения.Сортировать("Секция");
	УстановитьТипРасчета(Контекст, ОтобранныеКонтрольныеСоотношения);
	Возврат ОтобранныеКонтрольныеСоотношения;
КонецФункции

Функция ПервичныйОтборДляМножественныхСтрок(Контекст)
	ОтобранныеКонтрольныеСоотношения = Контекст.ТаблицаКонтрольныхСоотношений.СкопироватьКолонки();
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("Секция");
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("Строка");
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("Графа");
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("Формула");
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("ТипРасчета");
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("ЛеваяЧасть");
	ОтобранныеКонтрольныеСоотношения.Колонки.Добавить("ПраваяЧасть");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("fault");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("id");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("name");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("periodClause");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("precision");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("condition");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("tip");
	ОтобранныеКонтрольныеСоотношения.Колонки.Удалить("rule");
	
	Для Каждого Стр Из Контекст.ТаблицаКонтрольныхСоотношений Цикл 
		Если ЗначениеЗаполнено(Стр.condition) Или (Стр.tip <> 1 И Стр.tip <> "1") Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.periodClause) Тогда 
			Если Не ПроверитьУсловиеНаПериод(Контекст, Стр.periodClause) Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Формула = СтрЗаменить(НРег(Стр.rule), " ", "");
		Если СтрНайти(Формула, "|=|") = 0 Или СтрНайти(Формула, "|>|") <> 0 Или СтрНайти(Формула, "|>=|") <> 0
			Или СтрНайти(Формула, "|<|") <> 0 Или СтрНайти(Формула, "|<=|") <> 0
			Или СтрНайти(Формула, "|<>|") <> 0 Или СтрНайти(Формула, "|{{|") <> 0 Тогда 
			
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Формула, "abs") <> 0 Или СтрНайти(Формула, "coalesce") <> 0 
			Или СтрНайти(Формула, "floor") <> 0 Или СтрНайти(Формула, "round") <> 0 Или СтрНайти(Формула, "nullif") Тогда 
			
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(Формула, "|=|") <> 1 Тогда 
			Продолжить;
		КонецЕсли;
		
		ЧастиСравнения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Формула, "|=|");
		Если ЧастиСравнения.Количество() <> 2 Тогда 
			Продолжить;
		КонецЕсли;
		
		ВсеАргументыЛевойЧасти = ПолучитьВсеАргументыВыражения(Контекст, ЧастиСравнения[0]);
		ВсеАргументыПравойЧасти = ПолучитьВсеАргументыВыражения(Контекст, ЧастиСравнения[1]);
		Если ВсеАргументыЛевойЧасти.Количество() <> 1 И ВсеАргументыПравойЧасти.Количество() <> 1 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(ЧастиСравнения[0], "sum") > 0 И СтрНайти(ЧастиСравнения[1], "sum") > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ВсеАргументыЛевойЧасти.Количество() = 1 И СтрНайти(ЧастиСравнения[0], "sum") = 0 Тогда 
			ЛеваяЧасть = ЧастиСравнения[0];
			ПраваяЧасть = ЧастиСравнения[1];
		Иначе
			ЛеваяЧасть = ЧастиСравнения[1];
			ПраваяЧасть = ЧастиСравнения[0];
			Тмп = ВсеАргументыПравойЧасти;
			ВсеАргументыПравойЧасти = ВсеАргументыЛевойЧасти;
			ВсеАргументыЛевойЧасти = Тмп;
		КонецЕсли;
		Формула = ЛеваяЧасть + "|=|" + ПраваяЧасть;
		
		ФормулаПодходит = Истина;
		ЗаменитьЕстьНулл(Контекст, Формула, ФормулаПодходит);
		ЗаменитьЕстьНулл(Контекст, ЛеваяЧасть, ФормулаПодходит);
		ЗаменитьЕстьНулл(Контекст, ПраваяЧасть, ФормулаПодходит);
		Если Не ФормулаПодходит Тогда 
			Продолжить;
		КонецЕсли;
		
		Если "{" + ПолучитьПервыйКлючСоответствия(ВсеАргументыЛевойЧасти) + "}" <> ЛеваяЧасть Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ОтобранныеКонтрольныеСоотношения.НайтиСтроки(Новый Структура("ЛеваяЧасть", ЛеваяЧасть)).Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ВсеСекции = Новый Соответствие;
		ВсеАргументыВыражения = ПолучитьВсеАргументыВыражения(Контекст, Формула);
		Для Каждого Арг Из ВсеАргументыЛевойЧасти Цикл 
			Арг1 = ПолучитьАргументСкобки(Арг.Ключ, 1);
			Арг2 = ПолучитьАргументСкобки(Арг.Ключ, 2);
			Арг4 = ПолучитьАргументСкобки(Арг.Ключ, 4);
			Арг5 = ПолучитьАргументСкобки(Арг.Ключ, 5);
			Арг6 = ПолучитьАргументСкобки(Арг.Ключ, 6);
			Если (ЗначениеЗаполнено(Арг4) И Арг4 <> "*")
				Или (ЗначениеЗаполнено(Арг5) И Арг5 <> "*")
				Или (ЗначениеЗаполнено(Арг6) И Арг6 <> "*") Тогда 
				
				ФормулаПодходит = Ложь;
				Прервать;
			КонецЕсли;
			СекцияСтр = Прав("000" + Арг1, 3);
			СтрокаСтр = Прав("00000" + Арг2, 5);
			ВсеСекции.Вставить(Арг1 + "#" + Арг4 + "#" + Арг5 + "#" + Арг5 + "#" + Арг6);
			Контекст.ОтборОбычныхСтрок.section = СекцияСтр;
			Контекст.ОтборОбычныхСтрок.row = СтрокаСтр;
			Контекст.ОтборМножественныхСтрок.section = СекцияСтр;
			Контекст.ОтборМножественныхСтрок.row = СтрокаСтр;
			СекцияФормулы = Контекст.ОТЧ.ПривестиЗначение(Арг1);
			СтрокаФормулы = Контекст.ОТЧ.ПривестиЗначение(Арг2);
			Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(Контекст.ОтборМножественныхСтрок).Количество() = 0
				Или Контекст.ТаблицаТиповСтрок.НайтиСтроки(Контекст.ОтборОбычныхСтрок).Количество() <> 0
				Или СтрНайти(Арг1, ",") > 0
				Или СтрНайти(Арг2, ",") > 0 Тогда 
				ФормулаПодходит = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ФормулаПодходит Или ВсеСекции.Количество() <> 1
			Или СекцияФормулы = 0 Или СтрокаФормулы = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		НовСтр = ОтобранныеКонтрольныеСоотношения.Добавить();
		НовСтр.Формула = Формула;
		НовСтр.Секция = СекцияФормулы;
		НовСтр.ЛеваяЧасть = ЛеваяЧасть;
		НовСтр.ПраваяЧасть = ПраваяЧасть;
		НовСтр.ТипРасчета = 0;
		НовСтр.Строка = СтрокаФормулы;
		НовСтр.Графа = 0;
	КонецЦикла;
	
	ОтобранныеКонтрольныеСоотношения.Сортировать("Секция");
	УстановитьТипРасчета(Контекст, ОтобранныеКонтрольныеСоотношения);
	Возврат ОтобранныеКонтрольныеСоотношения;
КонецФункции

Функция УстановитьАргументСкобкиВВвражении(Контекст, Выражение, НомерСкобки, НовоеВыражение)
	ВыражениеИтер = Выражение;
	Для Каждого Арг Из ПолучитьВсеАргументыВыражения(Контекст, Выражение) Цикл 
		ИндексОткр = СтрНайти(Арг.Ключ, "[", НаправлениеПоиска.СНачала, 1, НомерСкобки);
		ИндексЗакр = СтрНайти(Арг.Ключ, "]", НаправлениеПоиска.СНачала, 1, НомерСкобки);
		АргНов = Лев(Арг.Ключ, ИндексОткр) + НовоеВыражение + Сред(Арг.Ключ, ИндексЗакр);
		ВыражениеИтер = СтрЗаменить(ВыражениеИтер, Арг.Ключ, АргНов);
	КонецЦикла;
	Возврат ВыражениеИтер;
КонецФункции

Процедура ОтброситьДублирующиеКонтрольныеСоотношенияВРазделе(Контекст, ОтобранныеКонтрольныеСоотношенияВРазделе, Секция)
	СекцияСтр = Прав("000"+ Секция, 3);
	ВсеГрафыСекции = Контекст.ГрафыСекции[СекцияСтр];
	Если ВсеГрафыСекции = Неопределено Тогда
		ОтобранныеКонтрольныеСоотношенияВРазделе.Очистить();
		Возврат;
	КонецЕсли;
	
	ВсеСтроки = Контекст.ТаблицаТиповСтрок.НайтиСтроки(Новый Структура("section, rowtype", СекцияСтр, "F"));
	Если ВсеСтроки.Количество() = 0 Тогда 
		ОтобранныеКонтрольныеСоотношенияВРазделе.Очистить();
		Возврат;
	КонецЕсли;
	
	Результат = ОтобранныеКонтрольныеСоотношенияВРазделе.СкопироватьКолонки();
	Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияВРазделе.НайтиСтроки(Новый Структура("ТипРасчета", 3)) Цикл 
		СтрокиЛевойЧасти = ПолучитьАргументСкобки(Стр.ЛеваяЧасть, 2);
		Если СтрНайти(СтрокиЛевойЧасти, ",") <> 0 Или Контекст.ОТЧ.ПривестиЗначение(СтрокиЛевойЧасти) = 0 Тогда
			Для Каждого Элт Из ВсеСтроки Цикл
				НомерСтрокиЧисло = Контекст.ОТЧ.ПривестиЗначение(Элт.row);
				Если ЗначениеЗаполнено(НомерСтрокиЧисло) И ЧислоВходитВДиапазон(Контекст, НомерСтрокиЧисло, СтрокиЛевойЧасти) Тогда 
					ЛеваяЧасть = УстановитьАргументСкобкиВВвражении(Контекст, Стр.ЛеваяЧасть, 2, Формат(НомерСтрокиЧисло, "ЧГ=0"));
					Если Результат.НайтиСтроки(Новый Структура("ТипРасчета, ЛеваяЧасть", Стр.ТипРасчета, ЛеваяЧасть)).Количество() > 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					НовСтр = Результат.Добавить();
					НовСтр.Секция = Секция;
					НовСтр.ТипРасчета = 3;
					НовСтр.ЛеваяЧасть = ЛеваяЧасть;
					НовСтр.ПраваяЧасть = УстановитьАргументСкобкиВВвражении(Контекст, Стр.ПраваяЧасть, 2, Формат(НомерСтрокиЧисло, "ЧГ=0"));
					НовСтр.Формула = УстановитьАргументСкобкиВВвражении(Контекст, Стр.Формула, 2, Формат(НомерСтрокиЧисло, "ЧГ=0"));
					НовСтр.Строка = НомерСтрокиЧисло;
					НовСтр.Графа = Контекст.ОТЧ.ПривестиЗначение(ПолучитьАргументСкобки(НовСтр.ЛеваяЧасть, 3));
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Результат.НайтиСтроки(Новый Структура("ТипРасчета, ЛеваяЧасть", Стр.ТипРасчета, Стр.ЛеваяЧасть)).Количество() > 0 Тогда 
				Продолжить;
			КонецЕсли;
			НовСтр = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			НовСтр.Строка = Контекст.ОТЧ.ПривестиЗначение(СтрокиЛевойЧасти);
			НовСтр.Графа = Контекст.ОТЧ.ПривестиЗначение(ПолучитьАргументСкобки(НовСтр.ЛеваяЧасть, 3));
		КонецЕсли;
	КонецЦикла;
	
	Контекст.СтруктураПоискаЗапрещенныхГраф["Секция"] = Формат(Секция, "ЧЦ=3; ЧВН=; ЧГ=");
	Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияВРазделе.НайтиСтроки(Новый Структура("ТипРасчета", 2)) Цикл
		ГрафыЛевойЧасти = ПолучитьАргументСкобки(Стр.ЛеваяЧасть, 3);
		Если СтрНайти(ГрафыЛевойЧасти, ",") <> 0 Или Контекст.ОТЧ.ПривестиЗначение(ГрафыЛевойЧасти) = 0 Тогда
			Для Каждого Элт Из ВсеГрафыСекции Цикл
				НомерГрафыЧисло = Контекст.ОТЧ.ПривестиЗначение(Элт.Ключ);
				Если ЗначениеЗаполнено(НомерГрафыЧисло) И ЧислоВходитВДиапазон(Контекст, НомерГрафыЧисло, ГрафыЛевойЧасти) Тогда
					ЛеваяЧасть = УстановитьАргументСкобкиВВвражении(Контекст, Стр.ЛеваяЧасть, 3, Формат(НомерГрафыЧисло, "ЧГ=0"));
					Если Результат.НайтиСтроки(Новый Структура("ТипРасчета, ЛеваяЧасть", Стр.ТипРасчета, ЛеваяЧасть)).Количество() > 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					НомерСтрокиЧисло = Контекст.ОТЧ.ПривестиЗначение(ПолучитьАргументСкобки(ЛеваяЧасть, 2));
					Контекст.СтруктураПоискаЗапрещенныхГраф["Колонка"] = Формат(НомерГрафыЧисло, "ЧЦ=4; ЧВН=; ЧГ=");
					Контекст.СтруктураПоискаЗапрещенныхГраф["Строка"] = Формат(НомерСтрокиЧисло, "ЧЦ=4; ЧВН=; ЧГ=");
					Если Контекст.ЗапрещенныеДляВводаГрафы.НайтиСтроки(Контекст.СтруктураПоискаЗапрещенныхГраф).Количество() > 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					НовСтр = Результат.Добавить();
					НовСтр.Секция = Секция;
					НовСтр.ТипРасчета = 2;
					НовСтр.ЛеваяЧасть = ЛеваяЧасть;
					НовСтр.ПраваяЧасть = УстановитьАргументСкобкиВВвражении(Контекст, Стр.ПраваяЧасть, 3, Формат(НомерГрафыЧисло, "ЧГ=0"));
					НовСтр.Формула = УстановитьАргументСкобкиВВвражении(Контекст, Стр.Формула, 3, Формат(НомерГрафыЧисло, "ЧГ=0"));
					НовСтр.Строка = НомерСтрокиЧисло;
					НовСтр.Графа = НомерГрафыЧисло;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Результат.НайтиСтроки(Новый Структура("ТипРасчета, ЛеваяЧасть", Стр.ТипРасчета, Стр.ЛеваяЧасть)).Количество() > 0 Тогда 
				Продолжить;
			КонецЕсли;
			НовСтр = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			НовСтр.Строка = Контекст.ОТЧ.ПривестиЗначение(ПолучитьАргументСкобки(НовСтр.ЛеваяЧасть, 2));
			НовСтр.Графа = Контекст.ОТЧ.ПривестиЗначение(ГрафыЛевойЧасти);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из Результат.НайтиСтроки(Новый Структура("Графа", 0)) Цикл 
		Результат.Удалить(Стр);
	КонецЦикла;
	Для Каждого Стр Из Результат.НайтиСтроки(Новый Структура("Строка", 0)) Цикл 
		Результат.Удалить(Стр);
	КонецЦикла;
	
	ОтобранныеКонтрольныеСоотношенияВРазделе.Очистить();
	Для Каждого Стр Из Результат Цикл 
		ЗаполнитьЗначенияСвойств(ОтобранныеКонтрольныеСоотношенияВРазделе.Добавить(), Стр);
	КонецЦикла;
КонецПроцедуры

Процедура ОтброситьДублирующиеКонтрольныеСоотношения(Контекст, ОтобранныеКонтрольныеСоотношения)
	ВсеСекции = Новый Соответствие;
	Для Каждого Стр Из ОтобранныеКонтрольныеСоотношения Цикл 
		ВсеСекции.Вставить(Стр.Секция);
	КонецЦикла;
	
	ОтобранныеКонтрольныеСоотношенияВРазделе = ОтобранныеКонтрольныеСоотношения.СкопироватьКолонки();
	ИтоговыеКонтрольныеСоотношения = ОтобранныеКонтрольныеСоотношения.СкопироватьКолонки();
	Для Каждого Секция Из ВсеСекции Цикл 
		ОтобранныеКонтрольныеСоотношенияВРазделе.Очистить();
		Для Каждого Стр Из ОтобранныеКонтрольныеСоотношения.НайтиСтроки(Новый Структура("Секция", Секция.Ключ))  Цикл 
			ЗаполнитьЗначенияСвойств(ОтобранныеКонтрольныеСоотношенияВРазделе.Добавить(), Стр);
		КонецЦикла;
		ОтброситьДублирующиеКонтрольныеСоотношенияВРазделе(Контекст, ОтобранныеКонтрольныеСоотношенияВРазделе, Секция.Ключ);
		Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияВРазделе Цикл
			ЗаполнитьЗначенияСвойств(ИтоговыеКонтрольныеСоотношения.Добавить(), Стр);
		КонецЦикла;
	КонецЦикла;
	
	ОтобранныеКонтрольныеСоотношения = ИтоговыеКонтрольныеСоотношения.Скопировать();
КонецПроцедуры

Функция ПолучитьПодвыражениеСуммирования(Выражение, ИндексСуммы)
	Если Сред(Выражение, ИндексСуммы + 3, 1) = "(" Тогда 
		ОткрСк = "(";
		ЗакрСк = ")";
	ИначеЕсли Сред(Выражение, ИндексСуммы + 3, 1) = "{" Тогда 
		ОткрСк = "{";
		ЗакрСк = "}";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Счетчик = 1;
	Итер = ИндексСуммы + 4;
	СтрДлинаВыражение = СтрДлина(Выражение) + 2;
	Пока Итер < СтрДлинаВыражение Цикл 
		Если Сред(Выражение, Итер, 1) = ОткрСк Тогда 
			Счетчик = Счетчик + 1;
			Итер = Итер + 1;
		ИначеЕсли Сред(Выражение, Итер, 1) = ЗакрСк Тогда
			Счетчик = Счетчик - 1;
			Если Счетчик = 0 Тогда 
				Возврат Сред(Выражение, ИндексСуммы + 3, Итер - ИндексСуммы - 2);
			КонецЕсли;
			Итер = Итер + 1;
		Иначе
			Итер = Итер + 1;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Процедура ЗаменитьСуммуВРасчете(Контекст, ОтобранныеКонтрольныеСоотношения)
	СтрокиКУдалению = Новый Массив;
	ТекущаяСекция = -1;
	Для Каждого Стр Из ОтобранныеКонтрольныеСоотношения Цикл 
		Если СтрНайти(Стр.ПраваяЧасть, "sum") = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Стр.Секция <> ТекущаяСекция Тогда 
			СекцияСтр = Прав("000"+ Стр.Секция, 3);
			ВсеГрафыСекции = Контекст.ГрафыСекции[СекцияСтр];
			ВсеСтрокиСекции = Контекст.ТаблицаТиповСтрок.НайтиСтроки(Новый Структура("section, rowtype", СекцияСтр, "F"));
		КонецЕсли;
		
		Если Стр.ТипРасчета = 2 Тогда 
			НоваяПраваяЧасть = Стр.ПраваяЧасть;
			ИндексСуммы = СтрНайти(НоваяПраваяЧасть, "sum");
			Пока ИндексСуммы <> 0 Цикл
				АргументСуммирования = ПолучитьПодвыражениеСуммирования(НоваяПраваяЧасть, ИндексСуммы);
				Если Не ЗначениеЗаполнено(АргументСуммирования) Тогда 
					СтрокиКУдалению.Добавить(Стр);
					Прервать;
				КонецЕсли;
				
				ВсеАргументы = ПолучитьВсеАргументыВыражения(Контекст, АргументСуммирования);
				Если ВсеАргументы.Количество() <> 1 Тогда
					СтрокиКУдалению.Добавить(Стр);
					Прервать;
				КонецЕсли;
				
				ИсходныйАргумент = ПолучитьПервыйКлючСоответствия(ВсеАргументы);
				Секция = ПолучитьАргументСкобки(ИсходныйАргумент, 1);
				Строки = ПолучитьАргументСкобки(ИсходныйАргумент, 2);
				Графа = ПолучитьАргументСкобки(ИсходныйАргумент, 3);
				НовыйАргумент = "";
				
				Для Каждого Элт Из ВсеСтрокиСекции Цикл
					НомерСтрокиЧисло = Контекст.ОТЧ.ПривестиЗначение(Элт.row);
					Если ЗначениеЗаполнено(НомерСтрокиЧисло) И ЧислоВходитВДиапазон(Контекст, НомерСтрокиЧисло, Строки) Тогда
						НовыйАргумент = ?(ЗначениеЗаполнено(НовыйАргумент), НовыйАргумент + "+", "");
						НовыйАргумент = НовыйАргумент + "{["+Секция+"]["+Формат(НомерСтрокиЧисло, "ЧГ=0")+"]["+Графа+"]}";
					КонецЕсли;
				КонецЦикла;
				
				НовыйАргумент = "(" + НовыйАргумент + ")";
				НоваяПраваяЧастьВрем = СтрЗаменить(НоваяПраваяЧасть, "sum" + АргументСуммирования, НовыйАргумент);
				Если НоваяПраваяЧастьВрем = НоваяПраваяЧасть Тогда
					СтрокиКУдалению.Добавить(Стр);
					Прервать;
				КонецЕсли;
				
				НоваяПраваяЧасть = НоваяПраваяЧастьВрем;
				ИндексСуммы = СтрНайти(НоваяПраваяЧасть, "sum");
			КонецЦикла;
			Стр.ПраваяЧасть = НоваяПраваяЧасть;
		ИначеЕсли Стр.ТипРасчета = 3 Тогда 
			НоваяПраваяЧасть = Стр.ПраваяЧасть;
			ИндексСуммы = СтрНайти(НоваяПраваяЧасть, "sum");
			Пока ИндексСуммы <> 0 Цикл
				АргументСуммирования = ПолучитьПодвыражениеСуммирования(НоваяПраваяЧасть, ИндексСуммы);
				Если Не ЗначениеЗаполнено(АргументСуммирования) Тогда 
					СтрокиКУдалению.Добавить(Стр);
					Прервать;
				КонецЕсли;
				
				ВсеАргументы = ПолучитьВсеАргументыВыражения(Контекст, АргументСуммирования);
				Если ВсеАргументы.Количество() <> 1 Тогда
					СтрокиКУдалению.Добавить(Стр);
					Прервать;
				КонецЕсли;
				
				ИсходныйАргумент = ПолучитьПервыйКлючСоответствия(ВсеАргументы);
				Секция = ПолучитьАргументСкобки(ИсходныйАргумент, 1);
				Строка = ПолучитьАргументСкобки(ИсходныйАргумент, 2);
				Графы = ПолучитьАргументСкобки(ИсходныйАргумент, 3);
				НовыйАргумент = "";
				
				Для Каждого Элт Из ВсеГрафыСекции Цикл
					НомерГрафыЧисло = Контекст.ОТЧ.ПривестиЗначение(Элт.Ключ);
					Если ЗначениеЗаполнено(НомерГрафыЧисло) И ЧислоВходитВДиапазон(Контекст, НомерГрафыЧисло, Графы) Тогда
						НовыйАргумент = ?(ЗначениеЗаполнено(НовыйАргумент), НовыйАргумент + "+", "");
						НовыйАргумент = НовыйАргумент + "{["+Секция+"]["+Строка+"]["+Формат(НомерГрафыЧисло, "ЧГ=0")+"]}";
					КонецЕсли;
				КонецЦикла;
				
				НовыйАргумент = "(" + НовыйАргумент + ")";
				НоваяПраваяЧастьВрем = СтрЗаменить(НоваяПраваяЧасть, "sum" + АргументСуммирования, НовыйАргумент);
				Если НоваяПраваяЧастьВрем = НоваяПраваяЧасть Тогда
					СтрокиКУдалению.Добавить(Стр);
					Прервать;
				КонецЕсли;
				
				НоваяПраваяЧасть = НоваяПраваяЧастьВрем;
				ИндексСуммы = СтрНайти(НоваяПраваяЧасть, "sum");
			КонецЦикла;
			Стр.ПраваяЧасть = НоваяПраваяЧасть;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиКУдалению Цикл 
		ОтобранныеКонтрольныеСоотношения.Удалить(Стр);
	КонецЦикла;
КонецПроцедуры

Процедура ОтброситьНекорректныеВыражения(Контекст, ОтобранныеКонтрольныеСоотношения)
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого Стр Из ОтобранныеКонтрольныеСоотношения Цикл
		Попытка
			ПраваяЧастьДляТеста = Стр.ПраваяЧасть;
			Для Каждого Элт Из ПолучитьВсеАргументыВыражения(Контекст, Стр.ПраваяЧасть) Цикл 
				ПраваяЧастьДляТеста = СтрЗаменить(ПраваяЧастьДляТеста, "{" + Элт.Ключ + "}", "0");
			КонецЦикла;
			ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПраваяЧастьДляТеста);
		Исключение
			СтрокиКУдалению.Добавить(Стр);
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиКУдалению Цикл 
		ОтобранныеКонтрольныеСоотношения.Удалить(Стр);
	КонецЦикла;
КонецПроцедуры

Функция СформироватьДанныеАвторасчета(Шаблон, ПараметрыПериода) Экспорт 
	Попытка
		Контекст = Новый Структура;
		Контекст.Вставить("ПараметрыПериода", ПараметрыПериода);
		Контекст.Вставить("ОТЧ", Новый ОписаниеТипов("Число"));
		Контекст.Вставить("ОПС", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		Контекст.Вставить("ОПБ", Новый ОписаниеТипов("Булево"));
		Контекст.Вставить("ПолучитьВсеАргументыВыражения", Новый Соответствие);
		Контекст.Вставить("ПолучитьВсеАргументыКромеСуммированийВВыражении", Новый Соответствие);
		Контекст.Вставить("ПроверкаОтчетаНаПустоту");
		Контекст.Вставить("СтруктураПоискаЗапрещенныхГраф", Новый Структура("Колонка, Строка, Секция"));
		Контекст.Вставить("ОтборОбычныхСтрок", Новый Структура("section, row, rowtype", "", "", "F"));
		Контекст.Вставить("ОтборМножественныхСтрок", Новый Структура("section, row", "", ""));
		Результат = ПолучитьТаблицуДанныеШаблона(Шаблон, Контекст);
		Если Не Результат Тогда 
			Возврат Неопределено;
		КонецЕсли;
		ОсновнойПериод_Период = ПорядковыйНомерПериодаВГоду(Контекст);
		КодПериодаНовый = "";
		КодПериодаСтарый = "";
		ОтбСтроки = Контекст.КодыПериодов.НайтиСтроки(Новый Структура("alt_id", ОсновнойПериод_Период));
		Если Не ОтбСтроки.Количество() = 0 Тогда 
			КодПериодаНовый = ОтбСтроки[0].alt_id;
			КодПериодаСтарый = ОтбСтроки[0].id;
		КонецЕсли;
		Контекст.Вставить("ОсновнойПериод_Период", КодПериодаСтарый);
		Контекст.Вставить("КодПериодаНовый", КодПериодаНовый);
		Контекст.Вставить("КодПериодаСтарый", КодПериодаСтарый);
		
		ОтобранныеКонтрольныеСоотношения = ПервичныйОтборКонтрольныхСоотношений(Контекст);
		ОтброситьДублирующиеКонтрольныеСоотношения(Контекст, ОтобранныеКонтрольныеСоотношения);
		ЗаменитьСуммуВРасчете(Контекст, ОтобранныеКонтрольныеСоотношения);
		ОтброситьНекорректныеВыражения(Контекст, ОтобранныеКонтрольныеСоотношения);
		Контекст.Вставить("ОтобранныеКонтрольныеСоотношения", ОтобранныеКонтрольныеСоотношения);
		Результат = СформироватьФормулыАвторасчета(Контекст);
		Если ТипЗнч(Результат) = Тип("Структура") Тогда 
			Контекст.Вставить("РасчитываемыеЯчейки", Результат.РасчитываемыеЯчейки);
			Контекст.Вставить("Зависимости", Результат.Зависимости);
		Иначе 
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			ОтобранныеКонтрольныеСоотношения = ПервичныйОтборДляМножественныхСтрок(Контекст);
			ОтброситьДублирующиеКонтрольныеСоотношения(Контекст, ОтобранныеКонтрольныеСоотношения);
			ЗаменитьСуммуВРасчете(Контекст, ОтобранныеКонтрольныеСоотношения);
			ОтброситьНекорректныеВыражения(Контекст, ОтобранныеКонтрольныеСоотношения);
			Контекст.Вставить("ОтобранныеКонтрольныеСоотношенияМножественныхСтрок", ОтобранныеКонтрольныеСоотношения);
			Результат = СформироватьФормулыАвторасчетаМножественныхСтрок(Контекст);
			Если ТипЗнч(Результат) = Тип("Структура") Тогда 
				Контекст.Вставить("РасчитываемыеЯчейкиМножественныхСтрок", Результат.РасчитываемыеЯчейкиМножественныхСтрок);
				Контекст.Вставить("ЗависимостиМножественныхСтрок", Результат.ЗависимостиМножественныхСтрок);
			КонецЕсли;
		Исключение
			Возврат Контекст;
		КонецПопытки;
		
		Возврат Контекст;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Процедура РаскрытьФормулы(Контекст, Таблица)
	Пока Истина Цикл 
		ЕстьИзменения = Ложь;
		Для Каждого Стр Из Таблица Цикл 
			ВсеАргументы = ПолучитьВсеАргументыВыражения(Контекст, Стр.ПраваяЧасть);
			Для Каждого Арг Из ВсеАргументы Цикл 
				АргСк = "{"+Арг.Ключ+"}";
				Если АргСк = Стр.ЛеваяЧасть Тогда 
					ВызватьИсключение "";
				КонецЕсли;
				Зависимости = Таблица.НайтиСтроки(Новый Структура("ЛеваяЧасть", АргСк));
				Если Зависимости.Количество() = 1 Тогда 
					Стр.ПраваяЧасть = СтрЗаменить(Стр.ПраваяЧасть, АргСк, "(" + Зависимости[0].ПраваяЧасть + ")");
					ЕстьИзменения = Истина;
				ИначеЕсли Зависимости.Количество() > 1 Тогда 
					ВызватьИсключение "";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если Не ЕстьИзменения Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьФормулыАвторасчетаДляСтрокиСекции(Контекст, ОтобранныеКонтрольныеСоотношенияДляСтроки, Секция, Строка)
	Пока Истина Цикл 
		ВсеГрафыРасчета = Новый Соответствие;
		Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляСтроки Цикл 
			ВсеГрафыРасчета.Вставить(ПолучитьАргументСкобки(Стр.ЛеваяЧасть, 3), Новый Соответствие);
			Для Каждого КЗ Из ПолучитьВсеАргументыВыражения(Контекст, Стр.ПраваяЧасть) Цикл 
				ВсеГрафыРасчета.Вставить(ПолучитьАргументСкобки(КЗ.Ключ, 3), Новый Соответствие);
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляСтроки Цикл
			Зависимости = ВсеГрафыРасчета[ПолучитьАргументСкобки(Стр.ЛеваяЧасть, 3)];
			Для Каждого КЗ Из ПолучитьВсеАргументыВыражения(Контекст, Стр.ПраваяЧасть) Цикл
				Зависимости.Вставить(ПолучитьАргументСкобки(КЗ.Ключ, 3));
			КонецЦикла;
		КонецЦикла;
		
		КУдалению = ПолучитьКольцевуюЗависимость(ВсеГрафыРасчета);
		Если Не ЗначениеЗаполнено(КУдалению) Тогда 
			Прервать;
		КонецЕсли;
		
		Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляСтроки.НайтиСтроки(Новый Структура("Графа", Контекст.ОТЧ.ПривестиЗначение(КУдалению))) Цикл 
			ОтобранныеКонтрольныеСоотношенияДляСтроки.Удалить(Стр);
		КонецЦикла;
	КонецЦикла;
	
	РаскрытьФормулы(Контекст, ОтобранныеКонтрольныеСоотношенияДляСтроки);
КонецФункции

Функция ПолучитьФормулыАвторасчетаДляГрафыСекции(Контекст, ОтобранныеКонтрольныеСоотношенияДляГрафы, Секция, Графа)
	Пока Истина Цикл 
		ВсеСтрокиРасчета = Новый Соответствие;
		Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляГрафы Цикл 
			ВсеСтрокиРасчета.Вставить(ПолучитьАргументСкобки(Стр.ЛеваяЧасть, 2), Новый Соответствие);
			Для Каждого КЗ Из ПолучитьВсеАргументыВыражения(Контекст, Стр.ПраваяЧасть) Цикл 
				ВсеСтрокиРасчета.Вставить(ПолучитьАргументСкобки(КЗ.Ключ, 2), Новый Соответствие);
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляГрафы Цикл
			Зависимости = ВсеСтрокиРасчета[ПолучитьАргументСкобки(Стр.ЛеваяЧасть, 2)];
			Для Каждого КЗ Из ПолучитьВсеАргументыВыражения(Контекст, Стр.ПраваяЧасть) Цикл
				Зависимости.Вставить(ПолучитьАргументСкобки(КЗ.Ключ, 2));
			КонецЦикла;
		КонецЦикла;
		
		КУдалению = ПолучитьКольцевуюЗависимость(ВсеСтрокиРасчета);
		Если Не ЗначениеЗаполнено(КУдалению) Тогда 
			Прервать;
		КонецЕсли;
		
		Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляГрафы.НайтиСтроки(Новый Структура("Строка", Контекст.ОТЧ.ПривестиЗначение(КУдалению))) Цикл 
			ОтобранныеКонтрольныеСоотношенияДляГрафы.Удалить(Стр);
		КонецЦикла;
	КонецЦикла;
	
	РаскрытьФормулы(Контекст, ОтобранныеКонтрольныеСоотношенияДляГрафы);
КонецФункции

Функция ПолучитьКольцевуюЗависимость(ГрафЗависимостией)
	ПройденныеВершины = Новый Соответствие;
	Для Каждого КЗ Из ГрафЗависимостией Цикл 
		ПройденныеВершины.Очистить();
		Если ЕстьКольцеваяЗависимостьРек(ГрафЗависимостией, ПройденныеВершины, КЗ.Ключ) Тогда 
			Возврат КЗ.Ключ;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция ЕстьКольцеваяЗависимостьРек(ГрафЗависимостией, ПройденныеВершины, ТекущаяВершина)
	Если ПройденныеВершины[ТекущаяВершина] = Истина Тогда 
		Возврат Истина;
	КонецЕсли;
	ПройденныеВершины.Вставить(ТекущаяВершина, Истина);
	Для Каждого КЗ Из ГрафЗависимостией[ТекущаяВершина] Цикл
		Если ЕстьКольцеваяЗависимостьРек(ГрафЗависимостией, ПройденныеВершины, КЗ.Ключ) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьФормулыАвторасчетаДляСекции(Контекст, ОтобранныеКонтрольныеСоотношенияДляСекции, Секция)
	ВсеСтрокиДляАвторасчета = Новый Соответствие;
	Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляСекции.НайтиСтроки(Новый Структура("ТипРасчета", 3)) Цикл 
		ВсеСтрокиДляАвторасчета.Вставить(Стр.Строка);
	КонецЦикла;
	
	Результат = ОтобранныеКонтрольныеСоотношенияДляСекции.СкопироватьКолонки();
	ОтобранныеКонтрольныеСоотношенияДляСтроки = ОтобранныеКонтрольныеСоотношенияДляСекции.СкопироватьКолонки();
	Для Каждого Строка Из ВсеСтрокиДляАвторасчета Цикл
		ОтобранныеКонтрольныеСоотношенияДляСтроки.Очистить();
		Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляСекции.НайтиСтроки(Новый Структура("ТипРасчета, Строка", 3, Строка.Ключ)) Цикл 
			ЗаполнитьЗначенияСвойств(ОтобранныеКонтрольныеСоотношенияДляСтроки.Добавить(), Стр);
		КонецЦикла;
		ПолучитьФормулыАвторасчетаДляСтрокиСекции(Контекст, ОтобранныеКонтрольныеСоотношенияДляСтроки, Секция, Строка.Ключ);
		Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляСтроки Цикл 
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Стр);
		КонецЦикла;
	КонецЦикла;
	
	ВсеГрафыДляАвторасчета = Новый Соответствие;
	Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляСекции.НайтиСтроки(Новый Структура("ТипРасчета", 2)) Цикл 
		ВсеГрафыДляАвторасчета.Вставить(Стр.Графа);
	КонецЦикла;
	ОтобранныеКонтрольныеСоотношенияДляГрафы = ОтобранныеКонтрольныеСоотношенияДляСекции.СкопироватьКолонки();
	Для Каждого Графа Из ВсеГрафыДляАвторасчета Цикл
		ОтобранныеКонтрольныеСоотношенияДляГрафы.Очистить();
		Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляСекции.НайтиСтроки(Новый Структура("ТипРасчета, Графа", 2, Графа.Ключ)) Цикл 
			ЗаполнитьЗначенияСвойств(ОтобранныеКонтрольныеСоотношенияДляГрафы.Добавить(), Стр);
		КонецЦикла;
		ПолучитьФормулыАвторасчетаДляГрафыСекции(Контекст, ОтобранныеКонтрольныеСоотношенияДляГрафы, Секция, Графа.Ключ);
		Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляГрафы Цикл 
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Стр);
		КонецЦикла;
	КонецЦикла;
	
	ОтобранныеКонтрольныеСоотношенияДляСекции.Очистить();
	Для Каждого Стр Из Результат Цикл 
		ЗаполнитьЗначенияСвойств(ОтобранныеКонтрольныеСоотношенияДляСекции.Добавить(), Стр);
	КонецЦикла;
КонецФункции

Процедура ДополнитьРасчитываемыеЯчейки(Контекст, РасчитываемыеЯчейки, ОтобранныеКонтрольныеСоотношенияДляСекции, Секция, Многострочный = Ложь)
	СекцияСтр = "Раздел" + Формат(Секция, "ЧГ=0");
	Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляСекции Цикл 
		НовСтр = РасчитываемыеЯчейки.Добавить();
		НовСтр.Раздел = СекцияСтр;
		НовСтр.ТипРасчета = Стр.ТипРасчета;
		НовСтр.Параметры = Новый СписокЗначений;
		Формула = Стр.ПраваяЧасть;
		НовСтр.ЗависимоеЗначение = УниверсальныйОтчетСтатистики.ИмяПоказателяЯчейки(Формат(Стр.Секция, "ЧГ=0"), 
			Формат(Стр.Строка, "ЧГ=0"), Формат(Стр.Графа, "ЧГ=0"), Многострочный);
		Для Каждого Арг Из ПолучитьВсеАргументыВыражения(Контекст, Стр.ПраваяЧасть) Цикл 
			АргСк1 = Формат(Контекст.ОТЧ.ПривестиЗначение(ПолучитьАргументСкобки(Арг.Ключ, 1)), "ЧГ=0");
			АргСк2 = Формат(Контекст.ОТЧ.ПривестиЗначение(ПолучитьАргументСкобки(Арг.Ключ, 2)), "ЧГ=0");
			АргСк3 = Формат(Контекст.ОТЧ.ПривестиЗначение(ПолучитьАргументСкобки(Арг.Ключ, 3)), "ЧГ=0");
			Парам = УниверсальныйОтчетСтатистики.ИмяПоказателяЯчейки(АргСк1, АргСк2, АргСк3, Многострочный);
			НовАрг = "Параметры." + Парам;
			Формула = СтрЗаменить(Формула, "{" + Арг.Ключ + "}", НовАрг);
			НовСтр.Параметры.Добавить(Парам);
		КонецЦикла;
		НовСтр.Формула = Формула;
	КонецЦикла;
КонецПроцедуры

Процедура ДополнитьЗависимости(Контекст, Зависимости, ОтобранныеКонтрольныеСоотношенияДляСекции, Секция, Многострочный = Ложь)
	СекцияСтр = "Раздел" + Формат(Секция, "ЧГ=0");
	Для Каждого Стр Из ОтобранныеКонтрольныеСоотношенияДляСекции Цикл 
		ЗависимоеЗначение = УниверсальныйОтчетСтатистики.ИмяПоказателяЯчейки(Формат(Стр.Секция, "ЧГ=0"), 
				Формат(Стр.Строка, "ЧГ=0"), Формат(Стр.Графа, "ЧГ=0"), Многострочный);
		Для Каждого Арг Из ПолучитьВсеАргументыВыражения(Контекст, Стр.ПраваяЧасть) Цикл 
			НовСтр = Зависимости.Добавить();
			НовСтр.ЗависимоеЗначение = ЗависимоеЗначение;
			АргСк1 = Формат(Контекст.ОТЧ.ПривестиЗначение(ПолучитьАргументСкобки(Арг.Ключ, 1)), "ЧГ=0");
			АргСк2 = Формат(Контекст.ОТЧ.ПривестиЗначение(ПолучитьАргументСкобки(Арг.Ключ, 2)), "ЧГ=0");
			АргСк3 = Формат(Контекст.ОТЧ.ПривестиЗначение(ПолучитьАргументСкобки(Арг.Ключ, 3)), "ЧГ=0");
			НовАрг = УниверсальныйОтчетСтатистики.ИмяПоказателяЯчейки(АргСк1, АргСк2, АргСк3, Многострочный);
			НовСтр.Аргумент = НовАрг;
			НовСтр.Раздел = СекцияСтр;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция СформироватьФормулыАвторасчета(Контекст)
	Попытка
		РасчитываемыеЯчейки = Новый ТаблицаЗначений;
		РасчитываемыеЯчейки.Колонки.Добавить("Раздел");
		РасчитываемыеЯчейки.Колонки.Добавить("ЗависимоеЗначение");
		РасчитываемыеЯчейки.Колонки.Добавить("Формула");
		РасчитываемыеЯчейки.Колонки.Добавить("ТипРасчета");
		РасчитываемыеЯчейки.Колонки.Добавить("Параметры");
		
		Зависимости = Новый ТаблицаЗначений;
		Зависимости.Колонки.Добавить("Раздел");
		Зависимости.Колонки.Добавить("ЗависимоеЗначение");
		Зависимости.Колонки.Добавить("Аргумент");
		
		ВсеСекции = Новый Соответствие;
		Для Каждого Стр Из Контекст.ОтобранныеКонтрольныеСоотношения Цикл 
			ВсеСекции.Вставить(Стр.Секция);
		КонецЦикла;
		
		ОтобранныеКонтрольныеСоотношенияДляСекции = Контекст.ОтобранныеКонтрольныеСоотношения.СкопироватьКолонки();
		Для Каждого Секция Из ВсеСекции Цикл 
			ОтобранныеКонтрольныеСоотношенияДляСекции.Очистить();
			Для Каждого Стр Из Контекст.ОтобранныеКонтрольныеСоотношения.НайтиСтроки(Новый Структура("Секция", Секция.Ключ)) Цикл 
				ЗаполнитьЗначенияСвойств(ОтобранныеКонтрольныеСоотношенияДляСекции.Добавить(), Стр);
			КонецЦикла;
			ПолучитьФормулыАвторасчетаДляСекции(Контекст, ОтобранныеКонтрольныеСоотношенияДляСекции, Секция.Ключ);
			ОтброситьНекорректныеВыражения(Контекст, ОтобранныеКонтрольныеСоотношенияДляСекции);
			ДополнитьРасчитываемыеЯчейки(Контекст, РасчитываемыеЯчейки, ОтобранныеКонтрольныеСоотношенияДляСекции, Секция.Ключ);
			ДополнитьЗависимости(Контекст, Зависимости, ОтобранныеКонтрольныеСоотношенияДляСекции, Секция.Ключ);
		КонецЦикла;
		
		Зависимости.Свернуть("Раздел, ЗависимоеЗначение, Аргумент");
		Возврат Новый Структура("РасчитываемыеЯчейки, Зависимости", РасчитываемыеЯчейки, Зависимости);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Функция СформироватьФормулыАвторасчетаМножественныхСтрок(Контекст)
	Попытка
		РасчитываемыеЯчейкиМножественныхСтрок = Новый ТаблицаЗначений;
		РасчитываемыеЯчейкиМножественныхСтрок.Колонки.Добавить("Раздел");
		РасчитываемыеЯчейкиМножественныхСтрок.Колонки.Добавить("ЗависимоеЗначение");
		РасчитываемыеЯчейкиМножественныхСтрок.Колонки.Добавить("Формула");
		РасчитываемыеЯчейкиМножественныхСтрок.Колонки.Добавить("ТипРасчета");
		РасчитываемыеЯчейкиМножественныхСтрок.Колонки.Добавить("Параметры");
		
		ЗависимостиМножественныхСтрок = Новый ТаблицаЗначений;
		ЗависимостиМножественныхСтрок.Колонки.Добавить("Раздел");
		ЗависимостиМножественныхСтрок.Колонки.Добавить("ЗависимоеЗначение");
		ЗависимостиМножественныхСтрок.Колонки.Добавить("Аргумент");
		
		ВсеСекции = Новый Соответствие;
		Для Каждого Стр Из Контекст.ОтобранныеКонтрольныеСоотношенияМножественныхСтрок Цикл 
			ВсеСекции.Вставить(Стр.Секция);
		КонецЦикла;
		
		ОтобранныеКонтрольныеСоотношенияДляСекции = Контекст.ОтобранныеКонтрольныеСоотношенияМножественныхСтрок.СкопироватьКолонки();
		Для Каждого Секция Из ВсеСекции Цикл 
			ОтобранныеКонтрольныеСоотношенияДляСекции.Очистить();
			Для Каждого Стр Из Контекст.ОтобранныеКонтрольныеСоотношенияМножественныхСтрок.НайтиСтроки(Новый Структура("Секция", Секция.Ключ)) Цикл 
				ЗаполнитьЗначенияСвойств(ОтобранныеКонтрольныеСоотношенияДляСекции.Добавить(), Стр);
			КонецЦикла;
			ПолучитьФормулыАвторасчетаДляСекции(Контекст, ОтобранныеКонтрольныеСоотношенияДляСекции, Секция.Ключ);
			ОтброситьНекорректныеВыражения(Контекст, ОтобранныеКонтрольныеСоотношенияДляСекции);
			ДополнитьРасчитываемыеЯчейки(Контекст, РасчитываемыеЯчейкиМножественныхСтрок, ОтобранныеКонтрольныеСоотношенияДляСекции, Секция.Ключ, Истина);
			ДополнитьЗависимости(Контекст, ЗависимостиМножественныхСтрок, ОтобранныеКонтрольныеСоотношенияДляСекции, Секция.Ключ, Истина);
		КонецЦикла;
		
		ЗависимостиМножественныхСтрок.Свернуть("Раздел, ЗависимоеЗначение, Аргумент");
		Возврат Новый Структура("РасчитываемыеЯчейкиМножественныхСтрок, ЗависимостиМножественныхСтрок", РасчитываемыеЯчейкиМножественныхСтрок, ЗависимостиМножественныхСтрок);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

#КонецОбласти

#КонецОбласти
