////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ, ОТРАЖАЮЩИЕ ХОЗЯЙСТВЕННЫЕ ОПЕРАЦИИ В ПОДСИСТЕМЕ НДС

// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ

// Формирование движений при реализации товаров и услуг
//
Процедура СформироватьДвиженияРеализацияТоваровУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаРеализованныеТоварыУслуги <> Неопределено
		И ТаблицаРеализованныеТоварыУслуги.Колонки.Найти("ВыставленСФ") = Неопределено Тогда
		Параметры = ПодготовитьПараметрыРеализацияТоваровУслуг(
			ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
		КомиссияПоПокупателям = Ложь;
	Иначе
		Параметры = ПодготовитьПараметрыКомиссияТоваровУслуг(
			ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
		КомиссияПоПокупателям = НЕ (Параметры.РеализованныеТоварыУслуги.Количество() = 1 
			И Параметры.РеализованныеТоварыУслуги[0].Контрагент = Параметры.РеализованныеТоварыУслуги[0].Покупатель);
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	УчетНДСПереопределяемый.СформироватьПроводкиСписаниеГТД(Параметры.Товары, Реквизиты, Движения, Отказ);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	УчитыватьНДСНеплательщиков = УчетНДС.ВедетсяУчетНДСНеплательщиковПоФЗ84(Реквизиты.Период)
		Или Не Реквизиты.ДеятельностьНаПатенте;
	
	Если НЕ ПлательщикНДС
		И УчитыватьНДСНеплательщиков Тогда // Организация-неплательщик предъявляет НДС покупателю по п.5 ст.173 НК РФ
		
		Если Параметры.РеализованныеТоварыУслуги.Итог("СуммаНДСРуб") <> 0 Тогда
			ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(Параметры.РеализованныеТоварыУслуги);
		Иначе
			Возврат;
		КонецЕсли;
		
		Если НЕ (ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО") 
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяНДФЛИП")
			ИЛИ ПолучитьФункциональнуюОпцию("УплачиватьНДСспецРежимы")) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			Константы.УплачиватьНДСспецРежимы.Установить(Истина);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		Если НЕ ВедетсяУчетНДСПоФЗ134 Тогда
			// Формируется только проводка по начислению НДС в бух. учете
			СформироватьПроводкиРеализацияТоваровУслуг(Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьВидыЦенностей(Параметры.РеализованныеТоварыУслуги, Неопределено, "СчетУчета", Реквизиты.Регистратор);

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	Если ПлательщикНДС ИЛИ УчитыватьНДСНеплательщиков Тогда
		
		Если ВерсияУчетаНДС > 1 ИЛИ УпрощенныйУчетНДС Тогда
			// Начисление НДС сразу отражается в книге продаж
			Если КомиссияПоПокупателям Тогда
				СформироватьДвиженияНДСЗаписиКнигиПродажРеализацияТоваровУслугКомиссионером(
					Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
			Иначе
				СформироватьДвиженияНДСЗаписиКнигиПродажРеализацияТоваровУслуг(
					Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
			КонецЕсли; 
		Иначе
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйРеализацияТоваровУслуг(
				Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
		КонецЕсли;
		
		Если ЕстьТоварыУслугиПоСтавке0(Параметры.РеализованныеТоварыУслуги) Тогда
			
			РеализованныеТоварыУслуги0 = ТоварыУслугиПоСтавке0(
				Параметры.РеализованныеТоварыУслуги,
				РаздельныйУчетНДС);
				
			Если КомиссияПоПокупателям Тогда
				СформироватьДвиженияНДСРеализация0РеализацияТоваровУслугКомиссионером(
					РеализованныеТоварыУслуги0, Реквизиты, Движения, Отказ);
			Иначе
				СформироватьДвиженияНДСРеализация0РеализацияТоваровУслуг(
					РеализованныеТоварыУслуги0, Реквизиты, Движения, Отказ);
			КонецЕсли;
				
		КонецЕсли;
		
		СформироватьПроводкиРеализацияТоваровУслуг(Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
		
	КонецЕсли;

	// Списание товаров

	Если НЕ УпрощенныйУчетНДС И ПлательщикНДС Тогда

		Если РаздельныйУчетНДС Тогда
			
			СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
				Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
				
			Если КомиссияПоПокупателям Тогда
				ЗаполнитьСведенияОДокументахОтгрузки(СписанныеПартииНДС, Параметры.РеализованныеТоварыУслуги);
			КонецЕсли;
				
			УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
				СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
			УчетНДСПереопределяемый.СформироватьДвиженияРеализацияБезНДС(
				СписанныеПартииНДС, Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);	
		Иначе
			ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
			Параметры.Товары.Индексы.Добавить("ВидЦенности");
			ОсновныеСредства = Параметры.Товары.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
			СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
				ОсновныеСредства, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
			УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
				СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыРеализацияТоваровУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата>
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "КодОперацииПоСделке,"            // <СправочникСсылка.КодыОперацийРаздела7ДекларацииПоНДС> - 
	                                    // код операции для раздела 7 Декларации по НДС, указанный в договоре контрагента.
	+ "НДСИсчисляетсяНалоговымАгентом," // <Булево> - признак покупателя-налогового агента.
	+ "ДеятельностьНаПатенте";          // <Булево> - признак деятельности на патенте
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Необходимость включения/исключения НДС Из стоимости при реализации определяется ставкой НДС партии товара
	// и ставкой НДС, указанной в документе реализации
	Параметры.Реквизиты.Колонки.Добавить("НДСВСтоимостиТоваров");
	Параметры.Реквизиты.ЗаполнитьЗначения(Неопределено, "НДСВСтоимостиТоваров");
	// Для списания на расходы ранее принятого к вычету НДС при реализации используются счет и аналитика списания товара
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "СписыватьНДСнаКорСчетИАналитикуТовара");
	
	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "ЭтоНесырьевойТовар,"
	+ "КодРаздел7ДекларацииНДС,"
	+ "КодСоответствуетСт149НКРФ,"
	+ "КодВключаетсяВРеестр,"
	+ "УслугиЗаРубежом,"
	+ "Содержание,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаБУ,"
	+ "СуммаНДСРуб,"
	+ "СуммаБезНДСРуб,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Контрагент,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение"
	;
	Параметры.Вставить("РеализованныеТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеТоварыУслуги, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка> - имя табличной части документа
	+ "СинонимСписка,"        // <Строка> - синоним табличной части документа
	+ "НомерСтрокиДокумента," // <Число,10,0> - номер строки документа
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "СтавкаНДС,"            // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС, указанная в документе
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество"	          // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	// В таблице списанных партий СтавкаНДС используется для ставки, указанной в документе поступления товара.
	// Она может отличаться от ставки НДС документа реализации, поэтому ставку реализации переименовываем
	Если Параметры.Товары.Количество() > 0 Тогда
		Параметры.Товары.Колонки.СтавкаНДС.Имя = "СтавкаНДСДокумента";
	КонецЕсли;
	
	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыКомиссияТоваровУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата>
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Контрагент,"
	+ "КодОперацииПоСделке,"            // <СправочникСсылка.КодыОперацийРаздела7ДекларацииПоНДС> - 
	                                    // код операции для раздела 7 Декларации по НДС, указанный в договоре контрагента
	+ "НДСИсчисляетсяНалоговымАгентом," // <Булево> - признак покупателя-налогового агента.
	+ "ДеятельностьНаПатенте"           // <Булево> - признак деятельности на патенте
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Необходимость включения/исключения НДС Из стоимости при реализации определяется ставкой НДС партии товара
	// и ставкой НДС, указанной в документе реализации
	Параметры.Реквизиты.Колонки.Добавить("НДСВСтоимостиТоваров");
	Параметры.Реквизиты.ЗаполнитьЗначения(Неопределено, "НДСВСтоимостиТоваров");
	// Для списания на расходы ранее принятого к вычету НДС при реализации используются счет и аналитика списания товара
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "СписыватьНДСнаКорСчетИАналитикуТовара");

	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "ЭтоНесырьевойТовар,"
	+ "КодРаздел7ДекларацииНДС,"
	+ "КодСоответствуетСт149НКРФ,"
	+ "КодВключаетсяВРеестр,"
	+ "УслугиЗаРубежом,"
	+ "Содержание,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаБУ,"
	+ "СуммаНДСРуб,"
	+ "СуммаБезНДСРуб,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Контрагент,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "Покупатель,"                 //  <СправочникСсылка.Контрагенты>
	+ "ВыставленСФ,"                //  <Булево>
	+ "ДатаСФ,"                     //  <Дата>
	+ "СчетФактура"                //  <ДокументСсылка.СчетФактураВыданный>
	;
	Параметры.Вставить("РеализованныеТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеТоварыУслуги, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка> - имя табличной части документа
	+ "СинонимСписка,"        // <Строка> - синоним табличной части документа
	+ "НомерСтрокиДокумента," // <Число,10,0> - номер строки документа
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "СтавкаНДС,"            // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС, указанная в документе
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество"	          // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	// В таблице списанных партий СтавкаНДС используется для ставки, указанной в документе поступления товара.
	// Она может отличаться от ставки НДС документа реализации, поэтому ставку реализации переименовываем
	Если Параметры.Товары.Количество() > 0 Тогда
		Параметры.Товары.Колонки.СтавкаНДС.Имя = "СтавкаНДСДокумента";
	КонецЕсли;

	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ЗаполнитьСведенияОДокументахОтгрузки(СписанныеПартииНДС, РеализованныеТоварыУслуги)
	
	Если СписанныеПартииНДС.Количество() = 0 
		ИЛИ РеализованныеТоварыУслуги.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаРеализации Из РеализованныеТоварыУслуги Цикл
		
		СтруктураПоиска = Новый Структура("ИмяСписка,НомерСтрокиДокумента",
			СтрокаРеализации.ИмяСписка, СтрокаРеализации.НомерСтроки);
		СписанныеПартииПоСтроке = СписанныеПартииНДС.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ПартияПоСтроке Из СписанныеПартииПоСтроке Цикл
			
			ПартияПоСтроке.ДокументОтгрузки = СтрокаРеализации.СчетФактура;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияРеализацияКомиссионныхТоваров(ТаблицаРеализованныеКомиссионныеТовары, ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРеализацияКомиссионныхТоваров(ТаблицаРеализованныеКомиссионныеТовары, ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	УчетНДСПереопределяемый.СформироватьПроводкиСписаниеГТД(Параметры.Товары, Реквизиты, Движения, Отказ);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС И НЕ ВедетсяУчетНДСПоФЗ134 Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДвиженияРеализацияТоваровУслугКомитентаНерезидента(Параметры.ТаблицаТоварыУслугиКомитентов, Параметры.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыРеализацияКомиссионныхТоваров(ТаблицаРеализованныеКомиссионныеТовары, ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
		+ "Период,"         // <Дата>
		+ "Регистратор,"    // <ДокументСсылка>
		+ "Подразделение,"  // СправочникСсылка.ПодразделенияОрганизации
		+ "Организация"     // <СправочникСсылка.Организации>
		;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Необходимость включения/исключения НДС Из стоимости при реализации определяется ставкой НДС партии товара
	// и ставкой НДС, указанной в документе реализации
	Параметры.Реквизиты.Колонки.Добавить("НДСВСтоимостиТоваров");
	Параметры.Реквизиты.ЗаполнитьЗначения(Неопределено, "НДСВСтоимостиТоваров");
	// Для списания на расходы ранее принятого к вычету НДС при реализации используются счет и аналитика списания товара
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "СписыватьНДСнаКорСчетИАналитикуТовара");

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка> - имя табличной части документа
	+ "СинонимСписка,"        // <Строка> - синоним табличной части документа
	+ "НомерСтрокиДокумента," // <Число,10,0> - номер строки документа
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "СтавкаНДС,"            // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС, указанная в документе
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество"	          // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеКомиссионныеТовары, СписокОбязательныхКолонок));
	// В таблице списанных партий СтавкаНДС используется для ставки, указанной в документе поступления товара.
	// Она может отличаться от ставки НДС документа реализации, поэтому ставку реализации переименовываем
	Если Параметры.Товары.Количество() > 0 Тогда
		Параметры.Товары.Колонки.СтавкаНДС.Имя = "СтавкаНДСДокумента";
	КонецЕсли;

	СписокОбязательныхКолонок = ""
	+ "Контрагент,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "Номенклатура,"
	+ "СуммаБезНДСРуб,"
	+ "СуммаНДСРуб,"
	+ "СтавкаНДС,"
	+ "СчетРасчетовСКомитентом";
	
	Параметры.Вставить("ТаблицаТоварыУслугиКомитентов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслугиКомитентов, СписокОбязательныхКолонок));	
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРеализацияТоваровУслугКомитентаНерезидента(ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаТоварыУслугиКомитентов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРеализацияТоваровУслугКомитентаНерезидента(ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты);	
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	ФормироватьДвиженияПоРегистрам = Истина;
	
	Если НЕ ПлательщикНДС Тогда // Организация на УСН
		
		Если ТаблицаТоварыУслугиКомитентов.Итог("СуммаНДСРуб") <> 0 Тогда 
			ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ТаблицаТоварыУслугиКомитентов);
		Иначе
			Возврат;
		КонецЕсли;
		
		Если НЕ ВедетсяУчетНДСПоФЗ134 Тогда
			ФормироватьДвиженияПоРегистрам = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоварыУслугиКомитентов", Параметры.ТаблицаТоварыУслугиКомитентов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоварыУслугиКомитентов.Контрагент КАК Покупатель,
	|	ТаблицаТоварыУслугиКомитентов.Комитент КАК Комитент,
	|	ТаблицаТоварыУслугиКомитентов.ДоговорКомиссии КАК ДоговорКонтрагента,
	|	ТаблицаТоварыУслугиКомитентов.ВалютаРасчетовСКомитентом КАК Валюта,
	|	ТаблицаТоварыУслугиКомитентов.Номенклатура,
	|	ТаблицаТоварыУслугиКомитентов.СуммаБезНДСРуб КАК Сумма,
	|	ТаблицаТоварыУслугиКомитентов.СуммаНДСРуб КАК НДС,
	|	ТаблицаТоварыУслугиКомитентов.СтавкаНДС,
	|	ТаблицаТоварыУслугиКомитентов.СчетРасчетовСКомитентом КАК СчетРасчетов
	|ПОМЕСТИТЬ ТоварыУслугиКомитентов
	|ИЗ
	|	&ТаблицаТоварыУслугиКомитентов КАК ТаблицаТоварыУслугиКомитентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыУслугиКомитентов.Покупатель,
	|	ТоварыУслугиКомитентов.Комитент,
	|	ТоварыУслугиКомитентов.ДоговорКонтрагента,
	|	ТоварыУслугиКомитентов.Валюта,
	|	ТоварыУслугиКомитентов.Номенклатура,
	|	ТоварыУслугиКомитентов.Сумма,
	|	ТоварыУслугиКомитентов.НДС,
	|	ТоварыУслугиКомитентов.СтавкаНДС,
	|	ТоварыУслугиКомитентов.СчетРасчетов
	|ИЗ
	|	ТоварыУслугиКомитентов КАК ТоварыУслугиКомитентов
	|ГДЕ
	|	ТоварыУслугиКомитентов.ДоговорКонтрагента.УчетАгентскогоНДС";
	
	// Заменим обращение к реквизитам договора через переопределяемые функции
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"ТоварыУслугиКомитентов.ДоговорКонтрагента.УчетАгентскогоНДС",
								БухгалтерскийУчетПереопределяемый.ТекстЗапросаУчетАгентскогоНДС("ТоварыУслугиКомитентов.ДоговорКонтрагента"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыУслугиКомитентовНерезидентов = Результат.Выгрузить();
	
	ВерсияУчетаНДС = УчетНДСКлиентСервер.Версия(Реквизиты.Период);

	Если ФормироватьДвиженияПоРегистрам Тогда
		
		Если ВерсияУчетаНДС = 1 Тогда
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйРеализацияТоваровУслугКомитентаНерезидента(Реквизиты, ТоварыУслугиКомитентовНерезидентов, Движения, Отказ);
		Иначе
			ТоварыУслугиКомитентовНерезидентов.Свернуть("Комитент,Покупатель,ДоговорКонтрагента,Валюта,СтавкаНДС,СчетРасчетов","Сумма,НДС");
			СформироватьДвиженияНДСЗаписиКнигиПродажРеализацияТоваровУслугКомитентаНерезидента(Реквизиты, ТоварыУслугиКомитентовНерезидентов, Движения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	ТоварыУслугиКомитентовНерезидентов.Свернуть("Комитент,ДоговорКонтрагента,Валюта,СчетРасчетов","НДС");
	СформироватьПроводкиРеализацияТоваровУслугКомитентаНерезидента(Реквизиты, ТоварыУслугиКомитентовНерезидентов, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыРеализацияТоваровУслугКомитентаНерезидента(ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "Подразделение,"
	+ "Организация";
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "Номенклатура,"
	+ "СуммаБезНДСРуб,"
	+ "СуммаНДСРуб,"
	+ "СтавкаНДС,"
	+ "СчетРасчетовСКомитентом";
	
	Параметры.Вставить("ТаблицаТоварыУслугиКомитентов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслугиКомитентов, СписокОбязательныхКолонок));	
	
	Возврат Параметры;
	
КонецФункции	

// Формирование движений при оказании услуг
//
Процедура СформироватьДвиженияОказаниеУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если Не ПлательщикНДС И ТаблицаРеализованныеТоварыУслуги.Итог("СуммаНДСРуб") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОказаниеУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	УчитыватьНДСНеплательщиков = УчетНДС.ВедетсяУчетНДСНеплательщиковПоФЗ84(Реквизиты.Период)
		Или Не Реквизиты.ДеятельностьНаПатенте;
	
	ЗаполнитьВидыЦенностей(Параметры.РеализованныеТоварыУслуги, Неопределено, "СчетУчета");

	ТаблицаНачисленийДляНДС = Параметры.РеализованныеТоварыУслуги.Скопировать();
		
	Если НЕ ПлательщикНДС Тогда // Организация на УСН
		
		ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ТаблицаНачисленийДляНДС);
		
		Если НЕ ВедетсяУчетНДСПоФЗ134 Тогда
			// Формируется только проводка по начислению НДС в бух. учете
			СформироватьПроводкиРеализацияТоваровУслуг(Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РаздельныйУчетНДС	= УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС		= УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС	= ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ПлательщикНДС Или УчитыватьНДСНеплательщиков Тогда
	
		Если ВерсияУчетаНДС = 1 Тогда
			
			Если УпрощенныйУчетНДС Тогда
				// Организация ведет упрощенный учет НДС 
				СформироватьДвиженияНДСЗаписиКнигиПродажОказаниеУслуг(
					ТаблицаНачисленийДляНДС, Реквизиты, Движения, Отказ);
			Иначе

				УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйОказаниеУслуг(
					ТаблицаНачисленийДляНДС, Реквизиты, Движения, Отказ);
					
					
				Если РаздельныйУчетНДС Тогда
					// Организация осуществляет реализацию без НДС или с НДС 0% 
					
					РеализованныеТоварыУслуги0 = ТоварыУслугиПоСтавке0(
						Параметры.РеализованныеТоварыУслуги,
						РаздельныйУчетНДС);
						
					СформироватьДвиженияНДСРеализация0ОказаниеУслуг(
						РеализованныеТоварыУслуги0, Реквизиты, Движения, Отказ);
						
				КонецЕсли;
					
			КонецЕсли;
				
		Иначе
			
			СформироватьДвиженияНДСЗаписиКнигиПродажОказаниеУслуг(
				ТаблицаНачисленийДляНДС, Реквизиты, Движения, Отказ);
				
			Если РаздельныйУчетНДС Тогда
				// Организация осуществляет реализацию без НДС или с НДС 0% 
				
				РеализованныеТоварыУслуги0 = ТоварыУслугиПоСтавке0(
					Параметры.РеализованныеТоварыУслуги,
					РаздельныйУчетНДС);
					
				СформироватьДвиженияНДСРеализация0ОказаниеУслуг(
					РеализованныеТоварыУслуги0, Реквизиты, Движения, Отказ);
					
				УчетНДСПереопределяемый.СформироватьДвиженияРеализацияБезНДС(
					Неопределено, Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
						
			КонецЕсли;
				
		КонецЕсли;
	
		СформироватьПроводкиРеализацияТоваровУслуг(Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
	
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыОказаниеУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата>
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "КодОперацииПоСделке,"            // <СправочникСсылка.КодыОперацийРаздела7ДекларацииПоНДС> - 
	                                    // код операции для раздела 7 Декларации по НДС, указанный в номенклатуре.
	+ "НДСИсчисляетсяНалоговымАгентом," // <Булево> - признак покупателя-налогового агента.
	+ "ДеятельностьНаПатенте"           // <Булево> - признак деятельности на патенте
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Необходимость включения/исключения НДС Из стоимости при реализации определяется ставкой НДС партии товара
	// и ставкой НДС, указанной в документе реализации
	Параметры.Реквизиты.Колонки.Добавить("НДСВСтоимостиТоваров");
	Параметры.Реквизиты.ЗаполнитьЗначения(Неопределено, "НДСВСтоимостиТоваров");
	// Для списания на расходы ранее принятого к вычету НДС при реализации используются счет и аналитика списания товара
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "СписыватьНДСнаКорСчетИАналитикуТовара");

	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "КодРаздел7ДекларацииНДС,"
	+ "КодСоответствуетСт149НКРФ,"
	+ "КодВключаетсяВРеестр,"
	+ "УслугиЗаРубежом,"
	+ "Содержание,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаБезНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНДСРуб,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Контрагент,"
	+ "СчетФактура,"
	+ "ВыданСФ,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение"
	;
	Параметры.Вставить("РеализованныеТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеТоварыУслуги, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

// Формирование движений при отгрузке без перехода права собственности
//
Процедура СформироватьДвиженияОтгрузкаБезПереходаПраваСобственности(ТаблицаОтгрузка, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОтгрузка) 
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС И НЕ ВедетсяУчетНДСПоФЗ134 Тогда
		Возврат;
	КонецЕсли;
	
	НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Реквизиты.Организация, Реквизиты.Период);

	// В процедуры реализации и отгрузки передаются все таблицы в исходном виде
	Если НачислятьНДСПоОтгрузке Тогда
		СформироватьДвиженияРеализацияТоваровУслуг(
			ТаблицаОтгрузка, ТаблицаОтгрузка, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ);
	Иначе
		УчетНДСПереопределяемый.СформироватьДвиженияОтгрузкаТоваров(
			ТаблицаОтгрузка, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияРеализацияОтгруженныхТоваров(ТаблицаРеализованныеТовары, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС И НЕ ВедетсяУчетНДСПоФЗ134 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРеализацияОтгруженныхТоваров(ТаблицаРеализованныеТовары, ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.НДСНачисленПриОтгрузке Тогда
		РеализованныеТовары = Параметры.РеализованныеТовары.Скопировать(Новый Структура("ЭтоУслуга", Ложь));
		СформироватьПроводкиРеализацияОтгруженныхТоваров(
			РеализованныеТовары, Реквизиты, Движения, Отказ);
			
		ПустаяТаблицаТовары          = Параметры.Товары.СкопироватьКолонки();
		ПустаяТаблицаСписанныеТовары = ТаблицаСписанныеТоварыБухУчет.СкопироватьКолонки();
		РеализованныеУслуги = ТаблицаРеализованныеТовары.Скопировать(Новый Структура("ЭтоУслуга", Истина));
		СформироватьДвиженияРеализацияТоваровУслуг(
			РеализованныеУслуги, ПустаяТаблицаТовары, ПустаяТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ)
			
	Иначе
		// Таблицы реализации и списанных партий передаются в исходном виде,
		// а таблица товаров - с добавленными пустыми колонками ГТД.
		СформироватьДвиженияРеализацияТоваровУслуг(
			ТаблицаРеализованныеТовары, Параметры.Товары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыРеализацияОтгруженныхТоваров(ТаблицаРеализованныеТовары, ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата>
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "КодОперацииПоСделке,"            // <СправочникСсылка.КодыОперацийРаздела7ДекларацииПоНДС> - 
	                                    // код операции для раздела 7 Декларации по НДС, указанный в договоре контрагента
	+ "ДокументОтгрузки,"               // <ДокументСсылка.РеализацияТоваровУслуг>
	+ "НДСИсчисляетсяНалоговымАгентом," // <Булево> - признак покупателя-налогового агента.
	+ "НДСНачисленПриОтгрузке"          // <Булево>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы сумм НДС по реализованным товарам:
	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"
	+ "ЭтоУслуга,"
	+ "КодРаздел7ДекларацииНДС,"
	+ "КодСоответствуетСт149НКРФ,"
	+ "КодВключаетсяВРеестр,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "СтавкаНДС,"
	+ "Субконто,"
	+ "Подразделение,"
	+ "СуммаНДСРуб"
	;
	Параметры.Вставить("РеализованныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка> - имя табличной части документа
	+ "СинонимСписка,"        // <Строка> - синоним табличной части документа
	+ "НомерСтрокиДокумента," // <Число,10,0> - номер строки документа
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "СтавкаНДС,"            // <ПеречислениеСсылка.СтавкиНДС>
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "Количество"            // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	// ГТД были списаны при отгрузке, поэтому добавляем пустые колонки
	Параметры.Товары.Колонки.Добавить("НомерГТД",            Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
	Параметры.Товары.Колонки.Добавить("СтранаПроисхождения", Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));

	Возврат Параметры;

КонецФункции

// Формирование движений по начислению НДС для розничной реализации в НТТ при учете по продажной стоимости
//
Процедура СформироватьДвиженияРозничнаяВыручка(ТаблицаНачислениеНДС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНачислениеНДС) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если Не ПлательщикНДС И ТаблицаНачислениеНДС.Итог("НДС") = 0 Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыДвиженияРозничнаяВыручка(ТаблицаНачислениеНДС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС Тогда // Организация на УСН
		
		ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(Параметры.ТаблицаНачислениеНДС);
		
		Если НЕ ВедетсяУчетНДСПоФЗ134 Тогда
			// Формируется только проводка по начислению НДС в бух. учете
			СформироватьПроводкиРозничнаяВыручка(Параметры.ТаблицаНачислениеНДС, Движения, Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьПроводкиРозничнаяВыручка(Параметры.ТаблицаНачислениеНДС, Движения, Отказ);

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда

		Если  ВерсияУчетаНДС = 1 Тогда
			
			Если УпрощенныйУчетНДС Тогда
				СформироватьДвиженияНДСЗаписиКнигиПродажРозничнаяПродажа(Параметры.ТаблицаНачислениеНДС, Движения, Отказ);
			Иначе
				УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйРозничнаяПродажа(Параметры.ТаблицаНачислениеНДС, Движения, Отказ);	
			КонецЕсли;
			
		Иначе	
			
			СформироватьДвиженияНДСЗаписиКнигиПродажРозничнаяПродажа(Параметры.ТаблицаНачислениеНДС, Движения, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыДвиженияРозничнаяВыручка(ТаблицаНачислениеНДС, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаНачислениеНДС
	СписокОбязательныхКолонок = ""
	+ "Период,"				// <Дата>
	+ "Организация,"		// <СправочникСсылка.Организации>
	+ "Подразделение,"		// <Ссылка на справочник подразделений>
	+ "ДокументОснование,"	// <ДокументСсылка.*>
	+ "СуммаБезНДС,"		// <Число, 15, 2> - сумма выручки без НДС в рублях
	+ "НДС,"				// <Число, 15, 2> - сумма НДС в рублях
	+ "СтавкаНДС,"			// <ПеречислениеСсылка.СтавкиНДС> - ставка НДС
	+ "СчетУчетаНДС," 		// <ПланСчетовСсылка.Хозрасчетный> - счет учета НДС
	+ "СчетДоходов," 		// <ПланСчетовСсылка.Хозрасчетный> - счет доходов
	+ "Субконто,"			// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа розничной выручки
	+ "Содержание"			// <Строка> - содержание операции
	;
	Параметры.Вставить("ТаблицаНачислениеНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНачислениеНДС, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"				// <Дата>
	+ "Регистратор,"		// <ДокументСсылка>
	+ "Организация"			// <СправочникСсылка.Организации>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// Формирование движений по реализации при возврате товаров поставщику
//
Процедура СформироватьДвиженияВозвратТоваровПоставщику(ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписаниеГТД, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	УчетНДСПереопределяемый.СформироватьПроводкиСписаниеГТД(ТаблицаСписаниеГТД, Реквизиты, Движения, Отказ);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если Не ПлательщикНДС
	   И (Не ЗначениеЗаполнено(ТаблицаРеализованныеТоварыУслуги)
		Или ТаблицаРеализованныеТоварыУслуги.Итог("СуммаНДСРуб") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВозвратТоваровПоставщику(
		ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписаниеГТД, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС Тогда // Организация на УСН
		
		ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(Параметры.РеализованныеТовары);
		
		Если НЕ ВедетсяУчетНДСПоФЗ134 Тогда
			// Формируется только проводка по начислению НДС в бух. учете
			СформироватьПроводкиВозвратТоваровПоставщику(Параметры.РеализованныеТовары, Реквизиты, Движения, Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	ЗаполнитьВидыЦенностей(Параметры.РеализованныеТовары, Неопределено, "СчетУчета");

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ВерсияУчетаНДС = 1 Тогда
		
		Если УпрощенныйУчетНДС Тогда
			// Организация ведет упрощенный учет НДС
			СформироватьДвиженияНДСЗаписиКнигиПродажВозвратТоваровПоставщику(
				Параметры.РеализованныеТовары, Реквизиты, Движения, Отказ);
		Иначе	
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйРеализацияТоваровУслуг(
				Параметры.РеализованныеТовары, Реквизиты, Движения, Отказ);
		КонецЕсли;
		
	Иначе
		
		СформироватьДвиженияНДСЗаписиКнигиПродажВозвратПоставщику(
			Параметры.РеализованныеТовары, Реквизиты, Движения, Отказ);
			
		Если ЕстьТоварыУслугиПоСтавке0(Параметры.РеализованныеТовары) Тогда
			
			РеализованныеТоварыУслуги0 = ТоварыУслугиПоСтавке0(
				Параметры.РеализованныеТовары,
				РаздельныйУчетНДС);
				
			СформироватьДвиженияНДСРеализация0РеализацияТоваровУслуг(
				РеализованныеТоварыУслуги0, Реквизиты, Движения, Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьПроводкиВозвратТоваровПоставщику(Параметры.РеализованныеТовары, Реквизиты, Движения, Отказ);
	
	// Списание товаров

	Если НЕ УпрощенныйУчетНДС Тогда

		Если РаздельныйУчетНДС Тогда
			СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
				Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
			УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
				СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
			УчетНДСПереопределяемый.СформироватьДвиженияРеализацияБезНДС(
				СписанныеПартииНДС, Параметры.РеализованныеТовары, Реквизиты, Движения, Отказ);
		Иначе
			ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
			Параметры.Товары.Индексы.Добавить("ВидЦенности");
			ОсновныеСредства   = Параметры.Товары.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
			СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
				ОсновныеСредства, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
			УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
				СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВозвратТоваровПоставщику(ТаблицаРеализованныеТовары, ТаблицаТовары, ТаблицаСписаниеГТД, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата>
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Контрагент,"
	+ "КодОперацииПоСделке,"            // <СправочникСсылка.КодыОперацийРаздела7ДекларацииПоНДС> - 
	                                    // код операции для раздела 7 Декларации по НДС, указанный в договоре контрагента
	+ "НДСИсчисляетсяНалоговымАгентом," // <Булево> - признак покупателя-налогового агента.
	+ "НДСВключенВСтоимость,"            //
	+ "КорректировочныйСчетФактураПолученОтПоставщика"  //<Булево> - признак того, что введена корр. счет-фактура по документу
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	Параметры.Реквизиты.Колонки.Добавить("НДСВСтоимостиТоваров");
	Параметры.Реквизиты.ЗаполнитьЗначения(Неопределено, "НДСВСтоимостиТоваров");
	// Для списания на расходы ранее принятого к вычету НДС при реализации используются счет и аналитика списания товара
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "СписыватьНДСнаКорСчетИАналитикуТовара");

	// Подготовка таблицы реализованных товаров:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Содержание,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаБУ,"
	+ "СуммаБезНДСРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаНДСВзаиморасчетов,"
	+ "СчетУчета,"
	+ "СтавкаНДС,"
	+ "ЭтоНесырьевойТовар,"
	+ "КодРаздел7ДекларацииНДС,"
	+ "КодСоответствуетСт149НКРФ,"
	+ "КодВключаетсяВРеестр,"
	+ "УслугиЗаРубежом,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение"
	;
	Параметры.Вставить("РеализованныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеТовары, СписокОбязательныхКолонок));
	// Счет доходов при возврате не заполняется
	Параметры.РеализованныеТовары.Колонки.Добавить("СчетДоходов", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка> - имя табличной части документа
	+ "СинонимСписка,"        // <Строка> - синоним табличной части документа
	+ "НомерСтрокиДокумента," // <Число,10,0> - номер строки документа
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "СтавкаНДС,"            // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС, указанная в документе
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество"	          // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	Параметры.Вставить("СписаниеГТД", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписаниеГТД, СписокОбязательныхКолонок));
		
	// В таблице списанных партий СтавкаНДС используется для ставки, указанной в документе поступления товара.
	// Она может отличаться от ставки НДС документа реализации, поэтому ставку реализации переименовываем
	Если Параметры.Товары.Количество() > 0 Тогда
		Параметры.Товары.Колонки.СтавкаНДС.Имя = "СтавкаНДСДокумента";
	КонецЕсли;

	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Формирование записей книги продаж

Процедура СформироватьДвиженияНачислениеНДСНачислениеНДСПоРеализации(ТаблицаРеквизиты, ТаблицаПоРеализации, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСКлиентСервер.Версия(Реквизиты.Период) <> 1
	 Или УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеНДСПоРеализации(ТаблицаРеквизиты, ТаблицаПоРеализации);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.Реализация0 Тогда

		// НДС реализация 0%
		СформироватьДвиженияНДСРеализация0НачислениеНДСПоРеализации0(Реквизиты, Параметры.ТаблицаПоРеализации, Движения, Отказ);

	КонецЕсли;

	// НДС начисленный
	УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйНачислениеНДСПоРеализации(Реквизиты, Параметры.ТаблицаПоРеализации, Движения, Отказ);

	Если НЕ Реквизиты.ФормироватьСторнирующиеЗаписиДопЛистовВручную Тогда
		ДополнитьСторнирующимиЗаписямиДопЛистов(Параметры.ТаблицаПоРеализации)
	КонецЕсли;

	// НДС записи книги продаж
	СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСПоРеализации(Параметры.ТаблицаПоРеализации, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеНДСПоРеализации(ТаблицаРеквизиты, ТаблицаПоРеализации)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Организация,"
	+ "Период,"
	+ "Реализация0,"
	+ "ФормироватьСторнирующиеЗаписиДопЛистовВручную";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Покупатель,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"
	+ "НДС,"						// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "Состояние,"
	+ "ВидНачисления,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ДатаОплаты,"
    + "ВидЦенности,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "КорректируемыйПериод,"
	+ "Период,"						// <Дата> формирования движений (период)
	+ "Регистратор,"				// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";				// <СправочникСсылка.Организации>

	Параметры.Вставить("ТаблицаПоРеализации", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПоРеализации, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеНДСПоНДСНачисленномуКУплате(ТаблицаРеквизиты, ТаблицаПоРеализации, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСКлиентСервер.Версия(Реквизиты.Период) <> 1
	 Или УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеНДСПоНДСНачисленномуКУплате(ТаблицаРеквизиты, ТаблицаПоРеализации);
	Реквизиты = Параметры.Реквизиты[0];

	// НДС начисленный
	УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйНачислениеНДСПоРеализации(Реквизиты, Параметры.ТаблицаПоРеализации, Движения, Отказ);

	Если НЕ Реквизиты.ФормироватьСторнирующиеЗаписиДопЛистовВручную Тогда
		ДополнитьСторнирующимиЗаписямиДопЛистов(Параметры.ТаблицаПоРеализации)
	КонецЕсли;

	// НДС записи книги продаж
	СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСПоРеализации(Параметры.ТаблицаПоРеализации, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеНДСПоНДСНачисленномуКУплате(ТаблицаРеквизиты, ТаблицаПоРеализации)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Организация,"
	+ "Период,"
	+ "ФормироватьСторнирующиеЗаписиДопЛистовВручную";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Покупатель,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"
	+ "НДС,"						// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "ВидНачисления,"
	+ "ДокументОплаты,"
	+ "ДатаОплаты,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ВидЦенности,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "КорректируемыйПериод,"
	+ "Период,"						// <Дата> формирования движений (период)
	+ "Регистратор,"				// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";				// <СправочникСсылка.Организации>

	Параметры.Вставить("ТаблицаПоРеализации", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПоРеализации, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеНДСНеОтражаютсяВКниге(ТаблицаРеквизиты, ТаблицаПоРеализации, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСКлиентСервер.Версия(Реквизиты.Период) <> 1
	 Или УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеНДСНеОтражаютсяВКниге(ТаблицаРеквизиты, ТаблицаПоРеализации);
	Реквизиты = Параметры.Реквизиты[0];

	// НДС начисленный
	УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйНачислениеНДСПоРеализации(Реквизиты, Параметры.ТаблицаПоРеализации, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеНДСНеОтражаютсяВКниге(ТаблицаРеквизиты, ТаблицаПоРеализации)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Организация,"
	+ "Период,"
	+ "ФормироватьСторнирующиеЗаписиДопЛистовВручную";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Покупатель,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "НДС,"						// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "ВидНачисления,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ВидЦенности,"
	+ "Период,"						// <Дата> формирования движений (период)
	+ "Регистратор,"				// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";				// <СправочникСсылка.Организации>

	Параметры.Вставить("ТаблицаПоРеализации", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПоРеализации, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеНДСВосстановлениеНДС(ТаблицаРеквизиты, ТаблицаПоРеализации, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСКлиентСервер.Версия(Реквизиты.Период) <> 1
	 Или УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеНДСВосстановлениеНДС(ТаблицаРеквизиты, ТаблицаПоРеализации);
	Реквизиты = Параметры.Реквизиты[0];

	// НДС начисленный
	УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйНачислениеНДСПоРеализации(Реквизиты, Параметры.ТаблицаПоРеализации, Движения, Отказ);

	// Проводка Дт 19.х Кт 68.02
	СформироватьПроводкиВосстановлениеНДСПоПрочимОперациям(Параметры.ТаблицаПоРеализации, Движения, Отказ);

	Если НЕ Реквизиты.ФормироватьСторнирующиеЗаписиДопЛистовВручную Тогда
		ДополнитьСторнирующимиЗаписямиДопЛистов(Параметры.ТаблицаПоРеализации)
	КонецЕсли;

	// НДС записи книги продаж
	СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСПоРеализации(Параметры.ТаблицаПоРеализации, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеНДСВосстановлениеНДС(ТаблицаРеквизиты, ТаблицаПоРеализации)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Организация,"
	+ "Период,"
	+ "ФормироватьСторнирующиеЗаписиДопЛистовВручную";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Покупатель,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"
	+ "НДС,"						// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "СчетУчетаНДС,"
	+ "ВидНачисления,"
	+ "ВидЦенности,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "КорректируемыйПериод,"
	+ "Период,"						// <Дата> формирования движений (период)
	+ "Регистратор,"				// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";				// <СправочникСсылка.Организации>

	Параметры.Вставить("ТаблицаПоРеализации", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПоРеализации, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

Процедура ДополнитьСторнирующимиЗаписямиДопЛистов(ТаблицаДвижений, РучнаяОперация = Ложь) Экспорт

	Если ТаблицаДвижений.Найти(Истина, "ЗаписьДополнительногоЛиста") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СвернутаяТаблицаЗаписейДопЛиста = ТаблицаДвижений.Скопировать();

	Для каждого ТекущаяСтрока Из СвернутаяТаблицаЗаписейДопЛиста Цикл
		// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
		Если НЕ (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.ВозвратАвансовПолученных
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные) Тогда

			ТекущаяСтрока.СтавкаНДС = Неопределено;

		КонецЕсли;
		// Авансы и налоговый агент (комитент) отрабатываются с учетом договора (на каждуй
		// договор отдельный счет-фактура или отдельное лист декларации)
		Если НЕ (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.ВозвратАвансовПолученных
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные) Тогда

			// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
			ТекущаяСтрока.ДоговорКонтрагента = Неопределено;

		КонецЕсли;
	КонецЦикла;

	СвернутаяТаблицаЗаписейДопЛиста.Свернуть("Период, Организация, Регистратор, СчетФактура, СтавкаНДС, ДоговорКонтрагента, ЗаписьДополнительногоЛиста, КорректируемыйПериод",
		"СуммаБезНДС, НДС");

	СтрокиДопЛистов = СвернутаяТаблицаЗаписейДопЛиста.НайтиСтроки(Новый Структура("ЗаписьДополнительногоЛиста", Истина));

	ОтработанныеСФпоПериодам = Новый ТаблицаЗначений();
	ОтработанныеСФпоПериодам.Колонки.Добавить("СчетФактура");
	ОтработанныеСФпоПериодам.Колонки.Добавить("НалоговыйПериод");
	ОтработанныеСФпоПериодам.Колонки.Добавить("СтавкаНДС");
	ОтработанныеСФпоПериодам.Колонки.Добавить("ДоговорКонтрагента");

	Для каждого СтрокаДопЛиста Из СтрокиДопЛистов Цикл

		НачалоНалоговогоПериодаКорректировки = НачалоКвартала(СтрокаДопЛиста.КорректируемыйПериод);
		ОтборОтработанныхЗаписей = Новый Структура("СчетФактура, НалоговыйПериод", СтрокаДопЛиста.СчетФактура, НачалоНалоговогоПериодаКорректировки);

		Если ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС) Тогда
			ОтборОтработанныхЗаписей.Вставить("СтавкаНДС", СтрокаДопЛиста.СтавкаНДС);
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента) Тогда
			ОтборОтработанныхЗаписей.Вставить("ДоговорКонтрагента", СтрокаДопЛиста.ДоговорКонтрагента);
		КонецЕсли;

		Если НЕ (ОтработанныеСФпоПериодам.НайтиСтроки(ОтборОтработанныхЗаписей).Количество() = 0) Тогда
			// СФ по данному налоговому периоду уже отработан
			Продолжить;
		Иначе
			НоваяЗапись = ОтработанныеСФпоПериодам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ОтборОтработанныхЗаписей);
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Организация,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты,
		|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты,
		|	НДСЗаписиКнигиПродажОбороты.Событие,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот * -1 КАК СуммаБезНДССторно,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот * -1 КАК НДССторно,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС,
		|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаГраница,
		|			Квартал,
		|			СчетФактура = &СчетФактура
		|				И СчетФактура <> &Регистратор
		|				И ВЫБОР
		|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ДоговорКонтрагента = &ДоговорКонтрагента
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &СтавкаНДС = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ СтавкаНДС = &СтавкаНДС
		|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	(НЕ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста
		|				И НДСЗаписиКнигиПродажОбороты.Период = &НачалоПериода
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста
		|				И (НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&НачалоПериода, МЕСЯЦ)))";

		Запрос.УстановитьПараметр("НачалоПериода", 		 НачалоНалоговогоПериодаКорректировки);
		Запрос.УстановитьПараметр("КонецПериода", 		 КонецДня(СтрокаДопЛиста.Период));
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтрокаДопЛиста.Период), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СчетФактура", 		 СтрокаДопЛиста.СчетФактура);
		Запрос.УстановитьПараметр("Регистратор", 		 СтрокаДопЛиста.Регистратор);
		Запрос.УстановитьПараметр("СтавкаНДС", ?		 (ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС), СтрокаДопЛиста.СтавкаНДС, Неопределено));
		Запрос.УстановитьПараметр("ДоговорКонтрагента",  ?(ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента), СтрокаДопЛиста.ДоговорКонтрагента, Неопределено));

		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда

			ТаблицаЗаписей = Результат.Выгрузить();

			ТаблицаЗаписей.Колонки.Добавить("ЗаписьДополнительногоЛиста");
			ТаблицаЗаписей.Колонки.Добавить("КорректируемыйПериод");
			ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия");
			ТаблицаЗаписей.Колонки.Добавить("СторнирующаяЗаписьДопЛиста");

			ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "ЗаписьДополнительногоЛиста,СторнирующаяЗаписьДопЛиста");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаДопЛиста.КорректируемыйПериод, "КорректируемыйПериод");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаДопЛиста.Период, "ДатаСобытия");

			ТаблицаДвижений.Колонки.СуммаБезНДС.Имя = "СуммаБезНДССторно";
			ТаблицаДвижений.Колонки.НДС.Имя = "НДССторно";

			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений);

			ТаблицаДвижений.Колонки.СуммаБезНДССторно.Имя = "СуммаБезНДС";
			ТаблицаДвижений.Колонки.НДССторно.Имя = "НДС";
						
			Если НЕ РучнаяОперация Тогда
				
				ТаблицаЗаписей.ЗаполнитьЗначения(Ложь, "СторнирующаяЗаписьДопЛиста");
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений);
				
			КонецЕсли;	

			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаДопЛиста.Период, 	  "Период");
			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаДопЛиста.Организация, "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаДопЛиста.Регистратор, "Регистратор");

		КонецЕсли;

	КонецЦикла;

	ТаблицаДвижений.Свернуть("Период, Организация, Регистратор, ВидЦенности, Событие, ДатаСобытия, СчетФактура, СтавкаНДС,
							|Покупатель, ДоговорКонтрагента, ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста",
							"СуммаБезНДС, НДС");

КонецПроцедуры

// Формирование движений по книге продаж при доплате по корректировке
Процедура СформироватьДвиженияКорректировкаКнигиПродажУвеличение(ТаблицаКорректировкаКнигиПродаж, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаКорректировкаКнигиПродаж) Тогда
		Возврат;
	КонецЕсли;	
	
	Параметры = ПодготовитьПараметрыКорректировкаКнигиПродажУвеличение(ТаблицаКорректировкаКнигиПродаж, ТаблицаРеквизиты);

	// НДС записи книги продаж
	СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСПоРеализации(Параметры.ТаблицаКорректировкаКнигиПродаж, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыКорректировкаКнигиПродажУвеличение(ТаблицаКорректировкаКнигиПродаж, ТаблицаРеквизиты)
	Параметры = Новый Структура;
	
	// Реквизиты шапки документа:
	СписокОбязательныхКолонок = ""
	+ "Организация,"
	+ "Период";
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Покупатель,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"
	+ "НДС,"						// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ДатаОплаты,"
	+ "ВидЦенности,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "КорректируемыйПериод,"
	+ "Период,"						// <Дата> формирования движений (период)
	+ "Регистратор,"				// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";				// <СправочникСсылка.Организации>
	
	Параметры.Вставить("ТаблицаКорректировкаКнигиПродаж", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаКорректировкаКнигиПродаж, СписокОбязательныхКолонок));
	
	Возврат Параметры;
КонецФункции

// ПОСТУПЛЕНИЕ ТОВАРОВ И УСЛУГ

// Формирование движений при поступлении товаров, услуг, оборудования, объектов строительства от поставщика
//
Процедура СформироватьДвиженияПоступлениеТоваровУслугОтПоставщика(ТаблицаТовары, ТаблицаУслуги, ТаблицаНомераГТД, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеТоваровУслугОтПоставщика(
		ТаблицаТовары, ТаблицаУслуги, ТаблицаНомераГТД, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДСПереопределяемый.СформироватьПроводкиПоступлениеГТД(Параметры.НомераГТД, Реквизиты, Движения, Отказ);
	
	ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Товары, Реквизиты, Неопределено, "СчетУчета");
	ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Услуги, Реквизиты, Неопределено, "СчетЗатрат");

	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПоставщика(
		Параметры.Товары, Параметры.Услуги, Реквизиты);
		
	ДанныеДвиженийНДСПоАренднымОбязательствам = ПодготовитьДанныеДвиженийНДСПоАренднымОбязательствам(
		Параметры.Услуги, Реквизиты);

	ПлательщикНДС              = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДС          = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС             = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС          = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ДвиженияРаздельныйУчетНДС  = РаздельныйУчетНДС И НЕ РаздельныйУчетНДСНаСчете19;
	НДСВключенВСтоимость       = Реквизиты.НДСВключенВСтоимость И НЕ РаздельныйУчетНДСНаСчете19;
	
	// Бухгалтерские проводки

	Если ДанныеДвижений.Итог("НДС") <> 0 Тогда

		РеквизитыПроводок = ПодготовитьРеквизитыПроводокПоступлениеТоваровУслугОтПоставщика(Реквизиты);

		Если Реквизиты.УчетАгентскогоНДС Тогда
			Если Перечисления.ВидыАгентскихДоговоров.ЭтоНерезидент(Реквизиты.ВидАгентскогоДоговора) 
			 ИЛИ Реквизиты.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров
			   И ВедетсяУчетНДСПоФЗ335(Реквизиты.Период) Тогда
				СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгентНерезидент(ДанныеДвижений, Движения, Отказ);
			Иначе
				СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгент(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
			КонецЕсли;
		ИначеЕсли НЕ НДСВключенВСтоимость Тогда
			СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
		КонецЕсли;

	КонецЕсли;

	Если ДанныеДвиженийНДСПоАренднымОбязательствам.Итог("НДС") <> 0 Тогда
		СформироватьПроводкиСписаниеНДСПоАренднымОбязательствам(
			ДанныеДвиженийНДСПоАренднымОбязательствам, РеквизитыПроводок, НДСВключенВСтоимость, Движения, Отказ);
	КонецЕсли;
	
	Если Реквизиты.УчетАгентскогоНДС И НДСВключенВСтоимость Тогда
		НДСВключенныйВСтоимость = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугНалоговыйАгент(
			Параметры.Товары, Параметры.Услуги, Реквизиты);
		СформироватьПроводкиВключениеНДСВСтоимость(НДСВключенныйВСтоимость, Движения, Отказ);
	КонецЕсли;
	
	// Движения регистров подсистемы НДС
	
	Если НЕ ПлательщикНДС Тогда
		
		// Сформируем движения по регистру "НДС предъявленный" в случае поступления ценностей
		// по договору в иностранной валюте с исполнением обязанностей налогового агента
		// с целью корректного расчета суммовых разниц при поступлении оплаты,
		// а также в случае приобретения товаров, перечисленных в п. 8 ст. 161 НК (лом, алюминий, макулатура).
		
		ПриобретениеУслугНерезидента = Реквизиты.УчетАгентскогоНДС 
			И Перечисления.ВидыАгентскихДоговоров.ЭтоНерезидент(Реквизиты.ВидАгентскогоДоговора)
			И Реквизиты.ВалютаВзаиморасчетов <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()
			И ВерсияУчетаНДС = 2;
			
		ОбратноеНачисление = Реквизиты.УчетАгентскогоНДС
			И Реквизиты.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров;
		
		Если ПриобретениеУслугНерезидента
		 ИЛИ ОбратноеНачисление Тогда
			
			Если ДанныеДвижений.Итог("НДС") <> 0 Тогда
				СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
				Если Реквизиты.НДСВключенВСтоимость Тогда
					СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
		
	Если УпрощенныйУчетНДС Тогда
		Возврат;
	КонецЕсли;
		
	Если ДанныеДвижений.Итог("НДС") <> 0 Тогда
		СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
		Если Реквизиты.НДСВключенВСтоимость Тогда
			СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ДвиженияРаздельныйУчетНДС Тогда
		
		СкладНТТ = Реквизиты.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
		ОценкаТоваровПоПродажнойСтоимости = 
			УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период)
			= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
		НТТПоПродажнойСтоимости = СкладНТТ И ОценкаТоваровПоПродажнойСтоимости;
			
		Если НЕ НТТПоПродажнойСтоимости 
			  И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства
			  И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Топливо Тогда
			УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(
				Параметры.Товары, Реквизиты, Движения, Отказ);
		КонецЕсли;
		
		РаспределеляемыеРасходы = УчетНДСПереопределяемый.ОпределитьРаспределеляемыеРасходы(Параметры.Услуги);
		УчетНДСПереопределяемый.СформироватьДвиженияНДСКосвенныеРасходыПоступлениеУслуг(
			РаспределеляемыеРасходы, Реквизиты, Движения, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДанныеДвиженийПоступлениеТоваровУслугНалоговыйАгент(Товары, Услуги, Реквизиты)

	Если Товары <> Неопределено Тогда
		
		ПартионныйУчет = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период) = Перечисления.СпособыОценки.ФИФО;
		
		Если Товары.Колонки.Найти("СчетУчетаЗабалансовый") = Неопределено Тогда
			ДанныеДвижений = Товары.Скопировать(,
				"СчетУчета,Подразделение,Номенклатура,Склад,Партия,СтатьяЗатрат,СпособСтроительства,
				|СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС,
				|Количество,СуммаБезНДСРуб,СуммаНДСРуб");
		Иначе 
			ДанныеДвижений = Товары.Скопировать(Новый Структура("СчетУчетаЗабалансовый", Ложь),
				"СчетУчета,Подразделение,Номенклатура,Склад,Партия,СтатьяЗатрат,СпособСтроительства,
				|СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС,
				|Количество,СуммаБезНДСРуб,СуммаНДСРуб");
		КонецЕсли;
		ДанныеДвижений.Колонки.СчетУчета.Имя = "СчетЗатрат";
	
		ДанныеДвижений.Колонки.Добавить("Субконто1");
		ДанныеДвижений.Колонки.Добавить("Субконто2");
		ДанныеДвижений.Колонки.Добавить("Субконто3");
		
		Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
			Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
				 ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
				ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
					Если БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетЗатрат) Тогда
						СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Склад;
					КонецЕсли;
		        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
					Если ПартионныйУчет Тогда
						СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Партия;
					КонецЕсли;
		        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.СтатьяЗатрат;
		        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.СпособСтроительства;
				КонецЕсли;
			КонецЦикла;
			Если НЕ СвойстваСчета.УчетПоПодразделениям Тогда
				СтрокаТаблицы.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			КонецЕсли;
			
		КонецЦикла;

		ДанныеДвижений.Колонки.Удалить("Номенклатура");
		ДанныеДвижений.Колонки.Удалить("Склад");
		ДанныеДвижений.Колонки.Удалить("СтатьяЗатрат");
		ДанныеДвижений.Колонки.Удалить("СпособСтроительства");
		
		Если Услуги <> Неопределено Тогда
			Для каждого СтрокаУслуг Из Услуги Цикл
				СтрокаТаблицыДвижений = ДанныеДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыДвижений, СтрокаУслуг);
				СтрокаТаблицыДвижений.Подразделение = СтрокаУслуг.ПодразделениеЗатрат;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		ДанныеДвижений = Услуги.Скопировать(,
			"СчетЗатрат,ПодразделениеЗатрат,Субконто1,Субконто2,Субконто3,Партия,
			|СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС,
			|СуммаБезНДСРуб,СуммаНДСРуб");
		ДанныеДвижений.Колонки.ПодразделениеЗатрат.Имя = "Подразделение";
		ДанныеДвижений.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;
	
	ДанныеДвижений.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор");
	
	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");

	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Если Реквизиты.УчетАгентскогоНДС Тогда // Договор должен указываться только для налогового агента
		ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.ДоговорКонтрагента, "ДоговорКонтрагента");
	КонецЕсли;
	
	Возврат ДанныеДвижений;

КонецФункции

Процедура СформироватьПроводкиВключениеНДСВСтоимость(ДанныеПроводок, Движения, Отказ)
	
	Если ДанныеПроводок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проводки по включению НДС в стоимость
	// Дт <Счет учета затрат> Кт <Счет учета НДС>

	Для каждого СтрокаТаблицы Из ДанныеПроводок Цикл

		Если СтрокаТаблицы.СуммаНДСРуб = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаНДСРуб;
		Проводка.Содержание  = НСтр("ru = 'НДС включен в стоимость ценностей'");

		Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				СвойстваСчета["ВидСубконто" + Ном], СтрокаТаблицы["Субконто" + Ном]);	
			
		КонецЦикла;
			
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
	
		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);	
			
	КонецЦикла;
		
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеТоваровУслугОтПоставщика(ТаблицаТовары, ТаблицаУслуги, ТаблицаНомераГТД, ТаблицаРеквизиты) Экспорт

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "ВидОперации,"                    // <ПеречислениеСсылка.ВидыОперацийПоступлениеТоваровУслуг; Неопределено>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "ТипСклада,"                      // <ПеречислениеСсылка.ТипыСкладов>
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ЭлектронныеУслуги,"              // <Булево>
	+ "ВидАгентскогоДоговора,"          // <ПеречислениеСсылка.ВидыАгентскихДоговоров> - заполняется, если УчетАгентскогоНДС = Истина
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов"           // <СправочникСсылка.Валюты>
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура>
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС,"               // <ПеречислениеСсылка.СтавкиНДС>
	+ "Количество"               // <Число,15,3>
	;
	
	ДобавитьНеобязательнуюКолонкуВСписок(ТаблицаТовары, СписокОбязательныхКолонок, "СтатьяЗатрат");
	ДобавитьНеобязательнуюКолонкуВСписок(ТаблицаТовары, СписокОбязательныхКолонок, "СуммаПодтвержденнаяРуб");
	ДобавитьНеобязательнуюКолонкуВСписок(ТаблицаТовары, СписокОбязательныхКолонок, "СуммаНДСПодтвержденнаяРуб");
	
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии и документом-основанием счета-фактуры при поступлении от поставщика выступает документ поступления
	Параметры.Товары.Колонки.Добавить("Партия",      Документы.ТипВсеСсылки());
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия,СчетФактура");
	// Склад берем Из шапки документа поступления
	Параметры.Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Склад, "Склад");
	// Подразделение берем из шапки документа поступления
	Параметры.Товары.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
	
	ЕстьСтатьяЗатрат = ТаблицаТовары <> Неопределено И ТаблицаТовары.Колонки.Найти("СтатьяЗатрат") <> Неопределено;
	Если НЕ ЕстьСтатьяЗатрат Тогда
		Параметры.Товары.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	КонецЕсли;
	
	Параметры.Товары.Колонки.Добавить("СпособСтроительства", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыСтроительства"));
	Параметры.Товары.ЗаполнитьЗначения(Перечисления.СпособыСтроительства.Подрядный, "СпособСтроительства");
	
	// Подготовка таблицы Услуги

	СписокОбязательныхКолонок = ""
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетЗатрат,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто1,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто2,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто3,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СтатьяЗатрат,"            // <СправочникСсылка.СтатьиЗатрат>
	+ "ПодразделениеЗатрат,"     // <Ссылка на справочник подразделений>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС"               // <ПеречислениеСсылка.СтавкиНДС>
	;
	
	ДобавитьНеобязательнуюКолонкуВСписок(ТаблицаУслуги, СписокОбязательныхКолонок, "СуммаПодтвержденнаяРуб");
	ДобавитьНеобязательнуюКолонкуВСписок(ТаблицаУслуги, СписокОбязательныхКолонок, "СуммаНДСПодтвержденнаяРуб");
	
	Параметры.Вставить("Услуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));
	// Документом-основанием счета-фактуры при поступлении от поставщика выступает документ поступления
	Параметры.Услуги.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Услуги.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");

	// Подготовка таблицы НомераГТД

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество,"	          // <Число,15,3>
	+ "Содержание"	          // <Строка,150>
	;
	Параметры.Вставить("НомераГТД", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНомераГТД, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПоставщика(Товары, Услуги, Реквизиты) Экспорт
	
	СписокКолонокГруппировок = "СчетФактура,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС,ВидЦенности,Содержание";
	СписокКолонокСуммирования = "СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов";
	Если Товары <> Неопределено Тогда
		
		ДобавитьНеобязательнуюКолонкуВСписок(Товары, СписокКолонокСуммирования, "СуммаПодтвержденнаяРуб");
		ДобавитьНеобязательнуюКолонкуВСписок(Товары, СписокКолонокСуммирования, "СуммаНДСПодтвержденнаяРуб");
		СписокКолонок = СписокКолонокГруппировок + "," + СписокКолонокСуммирования;
		
		Если Товары.Колонки.Найти("СчетУчетаЗабалансовый") = Неопределено Тогда
			ДанныеДвижений = Товары.Скопировать(,СписокКолонок);
		Иначе
			ДанныеДвижений = Товары.Скопировать(Новый Структура("СчетУчетаЗабалансовый", Ложь),СписокКолонок);
		КонецЕсли;
		Если Услуги <> Неопределено Тогда
			ДобавитьНеобязательнуюКолонкуВСписок(Услуги, СписокКолонокСуммирования, "СуммаПодтвержденнаяРуб");
			ДобавитьНеобязательнуюКолонкуВСписок(Услуги, СписокКолонокСуммирования, "СуммаНДСПодтвержденнаяРуб");
			Если ДанныеДвижений.Колонки.Найти("СуммаПодтвержденнаяРуб") = Неопределено
				И ДанныеДвижений.Колонки.Найти("СуммаНДСПодтвержденнаяРуб") = Неопределено
				И Услуги.Колонки.Найти("СуммаПодтвержденнаяРуб") <> Неопределено
				И Услуги.Колонки.Найти("СуммаНДСПодтвержденнаяРуб") <> Неопределено Тогда 
				ДанныеДвижений.Колонки.Добавить("СуммаПодтвержденнаяРуб", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
				ДанныеДвижений.Колонки.Добавить("СуммаНДСПодтвержденнаяРуб", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
			КонецЕсли;
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(Услуги, ДанныеДвижений);
		КонецЕсли;
	Иначе
		ДобавитьНеобязательнуюКолонкуВСписок(Услуги, СписокКолонокСуммирования, "СуммаПодтвержденнаяРуб");
		ДобавитьНеобязательнуюКолонкуВСписок(Услуги, СписокКолонокСуммирования, "СуммаНДСПодтвержденнаяРуб");
		СписокКолонок = СписокКолонокГруппировок + "," + СписокКолонокСуммирования;
		ДанныеДвижений = Услуги.Скопировать(,СписокКолонок);
	КонецЕсли;
	ДанныеДвижений.Свернуть(СписокКолонокГруппировок, СписокКолонокСуммирования); 
	
	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");

	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Если Реквизиты.УчетАгентскогоНДС Тогда
		ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.ДоговорКонтрагента, "ДоговорКонтрагента");
	КонецЕсли;

	ДанныеДвижений.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		Если Реквизиты.НДСВключенВСтоимость Тогда
		    СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		Иначе
		    СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		    СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов + СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;
	КонецЦикла;
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";
	ДанныеДвижений.Колонки.Удалить("СуммаРуб");
	ДанныеДвижений.Колонки.Удалить("СуммаБезНДСРуб");

	Возврат ДанныеДвижений;

КонецФункции

Функция ПодготовитьРеквизитыПроводокПоступлениеТоваровУслугОтПоставщика(Реквизиты)

	РеквизитыПроводок = Новый Структура;

	РеквизитыПроводок.Вставить("СчетКт",          Реквизиты.СчетУчетаРасчетовСКонтрагентом);
	РеквизитыПроводок.Вставить("СубконтоКт1",     Реквизиты.Контрагент);
	РеквизитыПроводок.Вставить("СубконтоКт2",     Реквизиты.ДоговорКонтрагента);
	РеквизитыПроводок.Вставить("СубконтоКт3",     Реквизиты.Регистратор);
	РеквизитыПроводок.Вставить("ВалютаКт",        Реквизиты.ВалютаВзаиморасчетов);
	РеквизитыПроводок.Вставить("ПодразделениеКт", Реквизиты.Подразделение);

	Возврат РеквизитыПроводок;

КонецФункции

Функция ПодготовитьРеквизитыПроводокПоступлениеДопРасходовОтПоставщика(Реквизиты)

	РеквизитыПроводок = Новый Структура;

	РеквизитыПроводок.Вставить("СчетКт",          Реквизиты.СчетУчетаРасчетовСКонтрагентом);
	РеквизитыПроводок.Вставить("СубконтоКт1",     Реквизиты.Контрагент);
	РеквизитыПроводок.Вставить("СубконтоКт2",     Реквизиты.ДоговорКонтрагента);
	РеквизитыПроводок.Вставить("СубконтоКт3",     Реквизиты.Регистратор);
	РеквизитыПроводок.Вставить("ВалютаКт",        Реквизиты.ВалютаВзаиморасчетов);

	Возврат РеквизитыПроводок;

КонецФункции

// Формирование движений при поступлении товаров, услуг, оборудования, объектов строительства от подотчетного лица
//
Процедура СформироватьДвиженияПоступлениеТоваровУслугОтПодотчетногоЛица(ТаблицаТовары, ТаблицаУслуги, ТаблицаНомераГТД, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеТоваровУслугОтПодотчетногоЛица(
		ТаблицаТовары, ТаблицаУслуги, ТаблицаНомераГТД, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];
	
	УчетНДСПереопределяемый.СформироватьПроводкиПоступлениеГТД(Параметры.НомераГТД, Реквизиты, Движения, Отказ);
	
	ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Товары, Реквизиты, Неопределено, "СчетУчета");
	ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Услуги, Реквизиты, Неопределено, "СчетЗатрат");

	ДанныеПроводок = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПодотчетногоЛица(
		Параметры.Товары, Параметры.Услуги, Реквизиты);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ДвиженияРаздельныйУчетНДС  = РаздельныйУчетНДС И НЕ РаздельныйУчетНДСНаСчете19;

	// Бухгалтерские проводки

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ДанныеПроводок.Итог("НДС") <> 0 Тогда

		РеквизитыПроводок = ПодготовитьРеквизитыПроводокПоступлениеТоваровУслугОтПодотчетногоЛица(Реквизиты);
		СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеПроводок, РеквизитыПроводок, Движения, Отказ);
		
		Если ПлательщикНДС Тогда
			РеквизитыСписания = ПодготовитьРеквизитыСписанияНДСПоДокументу(Реквизиты);
			СформироватьПроводкиСписаниеНДС(РеквизитыСписания, ДанныеПроводок, Движения, Отказ);
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;

	// Движения регистров подсистемы НДС

	Если УпрощенныйУчетНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПроводок.Итог("НДС") <> 0 Тогда
		СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеПроводок, Движения, Отказ);
		СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеПроводок, Движения, Истина, Отказ);
	КонецЕсли;

	Если ДвиженияРаздельныйУчетНДС Тогда

		УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(
			Параметры.Товары, Реквизиты, Движения, Отказ);

		Параметры.Услуги.Индексы.Добавить("ПредъявленСчетФактура");
		УслугиСоСчетомФактурой  = Параметры.Услуги.Скопировать(Новый Структура("ПредъявленСчетФактура", Истина));
		РаспределеляемыеРасходы = УчетНДСПереопределяемый.ОпределитьРаспределеляемыеРасходы(УслугиСоСчетомФактурой);
		УчетНДСПереопределяемый.СформироватьДвиженияНДСКосвенныеРасходыПоступлениеУслуг(
			РаспределеляемыеРасходы, Реквизиты, Движения, Отказ);

	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьРеквизитыСписанияНДСПоДокументу(Реквизиты)

	РеквизитыСписания = Новый Структура;

	РеквизитыСписания.Вставить("СчетСписанияНДС",       ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("ПланСчетов.Хозрасчетный.ПрочиеРасходы"));
	РеквизитыСписания.Вставить("СубконтоСписанияНДС1",  Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("СписаниеВыделенногоНДСНаПрочиеРасходы"));
	РеквизитыСписания.Вставить("СубконтоСписанияНДС2",  Неопределено);
	РеквизитыСписания.Вставить("СубконтоСписанияНДС3",  Неопределено);
	РеквизитыСписания.Вставить("Организация",           Реквизиты.Организация);
	РеквизитыСписания.Вставить("ПодразделениеСписания", Реквизиты.Подразделение);
	РеквизитыСписания.Вставить("Период",                Реквизиты.Период);
	
	Возврат РеквизитыСписания;

КонецФункции

Функция ПодготовитьПараметрыПоступлениеТоваровУслугОтПодотчетногоЛица(ТаблицаТовары, ТаблицаУслуги, ТаблицаНомераГТД, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.АвансовыйОтчет>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ЭлектронныеУслуги,"              // <Булево>
	+ "РасходыПредпринимателя,"         // <Булево>
	+ "ФизЛицо,"                        // <СправочникСсылка.ФизическиеЛица>
	+ "ВалютаДокумента"                 // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ПредъявленСчетФактура,"   // <Булево> - признак, что на момент поступления товаров счет-фактура предъявлен поставщиком
	+ "СчетФактура,"             // <ДокументСсылка.СчетФактураПолученный>
	+ "Контрагент,"              // <СправочникСсылка.Контрагенты>
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура>
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "НДСВключенВСтоимость,"    // <Булево>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС,"               // <ПеречислениеСсылка.СтавкиНДС>
	+ "Количество"               // <Число,15,3>
	;
	Параметры.Реквизиты.Колонки.Добавить("Контрагент");
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии при поступлении от подотчетного лица выступает авансовый отчет
	Параметры.Товары.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия");
	// Склад берем Из шапки авансового отчета
	Параметры.Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Склад, "Склад");

	// Подготовка таблицы Услуги

	СписокОбязательныхКолонок = ""
	+ "ПредъявленСчетФактура,"   // <Булево> - признак, что на момент поступления товаров счет-фактура предъявлен поставщиком
	+ "СчетФактура,"             // <ДокументСсылка.СчетФактураПолученный>
	+ "Контрагент,"              // <СправочникСсылка.Контрагенты>
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетЗатрат,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто1,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто2,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто3,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СтатьяЗатрат,"            // <СправочникСсылка.СтатьиЗатрат>
	+ "ПодразделениеЗатрат,"     // <Ссылка на справочник подразделений>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>	
	+ "НДСВключенВСтоимость,"    // <Булево>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС"                // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("Услуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));

	// Подготовка таблицы НомераГТД

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество,"	          // <Число,15,3>
	+ "Содержание"	          // <Строка,150>
	;
	Параметры.Вставить("НомераГТД", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНомераГТД, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПодотчетногоЛица(Товары, Услуги, Реквизиты)

	ДанныеДвижений = Товары.Скопировать(,
		"Контрагент,ПредъявленСчетФактура,СчетФактура,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС,ВидЦенности,Содержание,
		|СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов,НДСВключенВСтоимость");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(Услуги, ДанныеДвижений);
	ДанныеДвижений.Свернуть(
		"Контрагент,ПредъявленСчетФактура,СчетФактура,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС, НДСВключенВСтоимость, ВидЦенности, Содержание",
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Контрагент.Имя = "Поставщик";
	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", // колонка договор всегда пустая
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));

	ДанныеДвижений.Колонки.СчетФактура.Имя = "СчетФактураДокумент";	
	ДанныеДвижений.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
		
	ДанныеДвижений.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		Если СтрокаТаблицы.НДСВключенВСтоимость Тогда
		    СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		Иначе
		    СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		    СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов + СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;
		Если СтрокаТаблицы.ПредъявленСчетФактура Тогда
			СтрокаТаблицы.СчетФактура = СтрокаТаблицы.СчетФактураДокумент;
		Иначе	
			СтрокаТаблицы.СчетФактура = Реквизиты.Регистратор;
		КонецЕсли;
	КонецЦикла;
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";
	ДанныеДвижений.Колонки.Удалить("СуммаРуб");
	ДанныеДвижений.Колонки.Удалить("СуммаБезНДСРуб");

	Возврат ДанныеДвижений;

КонецФункции

Функция ПодготовитьРеквизитыПроводокПоступлениеТоваровУслугОтПодотчетногоЛица(Реквизиты)

	РеквизитыПроводок = Новый Структура;

	Если Реквизиты.РасходыПредпринимателя Тогда
		РеквизитыПроводок.Вставить("СчетКт", ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению); // 84.01
	ИначеЕсли Реквизиты.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		РеквизитыПроводок.Вставить("СчетКт", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами); // 71.01
	Иначе
		РеквизитыПроводок.Вставить("СчетКт", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал); //71.21
	КонецЕсли;
	
	РеквизитыПроводок.Вставить("СубконтоКт1",     Реквизиты.ФизЛицо);
	РеквизитыПроводок.Вставить("СубконтоКт2",     Неопределено);
	РеквизитыПроводок.Вставить("СубконтоКт3",     Неопределено);
	РеквизитыПроводок.Вставить("ВалютаКт",        Реквизиты.ВалютаДокумента);
	РеквизитыПроводок.Вставить("ПодразделениеКт", Реквизиты.Подразделение);

	Возврат РеквизитыПроводок;

КонецФункции

// Формирование движений при фактическом использовании билетов для командировок
//
Процедура СформироватьДвиженияИспользованиеБилетов(ТаблицаБилеты, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИспользованиеБилетов(ТаблицаБилеты, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];
		
	ДанныеПроводок = ПодготовитьДанныеДвиженийИспользованиеБилетов(Параметры.Билеты, Реквизиты);
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	// Бухгалтерские проводки

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ДанныеПроводок.Итог("НДС") <> 0 Тогда
		СформироватьПроводкиИспользованиеБилетов(ДанныеПроводок, Движения, Отказ);
	КонецЕсли;

	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;

	// Движения регистров подсистемы НДС

	Если УпрощенныйУчетНДС Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеПроводок, Движения, Отказ);
	СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеПроводок, Движения, Истина, Отказ);
			
КонецПроцедуры

Функция ПодготовитьПараметрыИспользованиеБилетов(ТаблицаБилеты, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.АвансовыйОтчет>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение"                   // <Ссылка на справочник подразделений>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Билеты

	СписокОбязательныхКолонок = ""
	+ "СчетФактура,"             // <ДокументСсылка.СчетФактураПолученный>
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "Поставщик,"               // <СправочникСсылка.Контрагенты>
	+ "Билет,"            		 // <СправочникСсылка.Номенклатура>
	+ "Сотрудник,"            	 // <СправочникСсылка.ФизическиеЛица>
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаБезНДС,"             // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СпособУчетаНДС,"     	 // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "НДСВключенВСтоимость,"    // <Булево>
	+ "СтавкаНДС"                // <ПеречислениеСсылка.СтавкиНДС>
	;
	
	Параметры.Вставить("Билеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаБилеты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийИспользованиеБилетов(Билеты, Реквизиты)

	ДанныеДвижений = Билеты.Скопировать();

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
	
	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", // колонка договор всегда пустая
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		
	ДанныеДвижений.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ДанныеДвижений.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам, "СчетУчетаНДС"); // 19.04 
	
	ДанныеДвижений.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ДанныеДвижений.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.КомандировочныеРасходы, "ВидЦенности");
			
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";

	Возврат ДанныеДвижений;

КонецФункции

Процедура СформироватьПроводкиИспользованиеБилетов(ДанныеДвижений, Движения, Отказ)

	ВключениеВСтоимостьВТаблице	= ДанныеДвижений.Колонки.Найти("НДСВключенВСтоимость") <> Неопределено;
	
	СчетКт = УчетКомандировок.СчетУчетаБилетов();
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 
			ИЛИ (ВключениеВСтоимостьВТаблице И СтрокаТаблицы.НДСВключенВСтоимость) Тогда
			Продолжить;
		КонецЕсли;

		// Проводка Дт 19.4 Кт 76.14

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты",  СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СпособыУчетаНДС",  СтрокаТаблицы.СпособУчетаНДС);

		Проводка.СчетКт = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			1, СтрокаТаблицы.Сотрудник);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			2, СтрокаТаблицы.Билет);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Формирование движений при поступлении доп.расходов по товарам, оборудованию от поставщика
//
Процедура СформироватьДвиженияПоступлениеДопРасходовОтПоставщика(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеДопРасходовОтПоставщика(ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	// Вид ценности по умолчанию для доп.расходов - прочие работы и услуги
	ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Товары, Реквизиты, Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги, "СчетУчета");

	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеДопРасходовОтПоставщика(Параметры.Товары, Реквизиты);

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС		= УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ДвиженияРаздельныйУчетНДС  = РаздельныйУчетНДС И НЕ РаздельныйУчетНДСНаСчете19;
	НДСВключенВСтоимость	   = Реквизиты.НДСВключенВСтоимость И НЕ РаздельныйУчетНДСНаСчете19;
	
	// Бухгалтерские проводки

	Если НЕ НДСВключенВСтоимость
		И ДанныеДвижений.Итог("НДС") <> 0 Тогда

		РеквизитыПроводок = ПодготовитьРеквизитыПроводокПоступлениеДопРасходовОтПоставщика(Реквизиты);

		Если Реквизиты.УчетАгентскогоНДС Тогда
			Если Перечисления.ВидыАгентскихДоговоров.ЭтоНерезидент(Реквизиты.ВидАгентскогоДоговора) Тогда
				СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгентНерезидент(ДанныеДвижений, Движения, Отказ);
			Иначе
				СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгент(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
			КонецЕсли;
		Иначе
			СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
		КонецЕсли;

	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Движения регистров подсистемы НДС
	Если ВерсияУчетаНДС = 1 Тогда
		
		Если НЕ УпрощенныйУчетНДС Тогда
			
			Если ДанныеДвижений.Итог("НДС") <> 0 Тогда
				СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
				Если Реквизиты.НДСВключенВСтоимость Тогда
					СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если РаздельныйУчетНДС Тогда
				// Организация осуществляет реализацию без НДС или с НДС 0%.
				УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(
					Параметры.Товары, Реквизиты, Движения, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеДвижений.Итог("НДС") <> 0 Тогда
			СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			Если НДСВключенВСтоимость Тогда
				СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
			КонецЕсли;
		КонецЕсли;
	
		Если ДвиженияРаздельныйУчетНДС Тогда
			// Организация осуществляет реализацию без НДС или с НДС 0%.
			УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(
				Параметры.Товары, Реквизиты, Движения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеДопРасходовОтПоставщика(ТаблицаТовары, ТаблицаРеквизиты) Экспорт

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ЭлектронныеУслуги,"              // <Булево>
	+ "ВидАгентскогоДоговора,"          // <ПеречислениеСсылка.ВидыАгентскихДоговоров> - заполняется, если УчетАгентскогоНДС = Истина
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов"            // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ДокументПартии,"          // <ДокументСсылка> - документ поступления товаров
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура> - поступивший ранее товар
	+ "Склад,"                   // <СправочникСсылка.Склады> - склад, на который поступил ранее товар
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "Подразделение,"           // Подразделение для проводок
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "КодВидаОперации,"         // <Строка, 10>
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС"                // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии при поступлении доп.расходов служит документ поступления товаров
	Параметры.Товары.Колонки.ДокументПартии.Имя = "Партия";
	// Документом-основанием счета-фактуры при поступлении доп.расходов выступает документ поступления
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	// Для доп.расходов количество в регистре НДСпоПриобретеннымЦенностям всегда равно нулю
	Параметры.Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийПоступлениеДопРасходовОтПоставщика(Товары, Реквизиты) Экспорт

	ДанныеДвижений = Товары.Скопировать(,
		"СчетФактура,СтавкаНДС,СчетУчетаНДС,ВидЦенности,КодВидаОперации,Содержание,Подразделение,СпособУчетаНДС,
		|СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");

	ДанныеДвижений.Свернуть(
		"СчетФактура,СтавкаНДС,СчетУчетаНДС,ВидЦенности,КодВидаОперации,Содержание,Подразделение,СпособУчетаНДС",
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");

	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Если Реквизиты.УчетАгентскогоНДС Тогда 	// Договор должен указываться только для налогового агента
		ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.ДоговорКонтрагента, "ДоговорКонтрагента");
	КонецЕсли;

	ДанныеДвижений.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		Если Реквизиты.НДСВключенВСтоимость Тогда
		    СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		Иначе
		    СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		    СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов + СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;
	КонецЦикла;
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";
	ДанныеДвижений.Колонки.Удалить("СуммаРуб");
	ДанныеДвижений.Колонки.Удалить("СуммаБезНДСРуб");

	Возврат ДанныеДвижений;

КонецФункции

// Формирование движений при поступлении посреднических услуг по отчету комиссионера
//
Процедура СформироватьДвиженияПоступлениеПосредническихУслуг(ТаблицаУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаУслуги)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеПосредническихУслуг(ТаблицаУслуги, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ЗаполнитьВидыЦенностей(Параметры.Услуги, Перечисления.ВидыЦенностей.ПосредническиеУслуги, "СчетЗатрат");

	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПоставщика(
		Неопределено, Параметры.Услуги, Реквизиты);

	ПлательщикНДС     = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ДвиженияРаздельныйУчетНДС  = РаздельныйУчетНДС И НЕ РаздельныйУчетНДСНаСчете19;
	НДСВключенВСтоимость	   = Реквизиты.НДСВключенВСтоимость И НЕ РаздельныйУчетНДСНаСчете19;
	
	// Бухгалтерские проводки

	Если НЕ НДСВключенВСтоимость
		И ДанныеДвижений.Итог("НДС") <> 0 Тогда

		РеквизитыПроводок = ПодготовитьРеквизитыПроводокПоступлениеТоваровУслугОтПоставщика(Реквизиты);

		СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);

	КонецЕсли;
		
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
    
	// Движения регистров подсистемы НДС
	
	Если ВерсияУчетаНДС = 1 Тогда
		
		Если НЕ УпрощенныйУчетНДС Тогда
			
			Если ДанныеДвижений.Итог("НДС") <> 0 Тогда
				СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
				Если Реквизиты.НДСВключенВСтоимость Тогда
					СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если РаздельныйУчетНДС Тогда
				
				РаспределеляемыеРасходы = УчетНДСПереопределяемый.ОпределитьРаспределеляемыеРасходы(Параметры.Услуги);
				УчетНДСПереопределяемый.СформироватьДвиженияНДСКосвенныеРасходыПоступлениеУслуг(РаспределеляемыеРасходы, Реквизиты, Движения, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе	
		
		Если ДанныеДвижений.Итог("НДС") <> 0 Тогда
			СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			Если НДСВключенВСтоимость Тогда
				СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
			КонецЕсли;
		КонецЕсли;

		Если ДвиженияРаздельныйУчетНДС Тогда
			
			РаспределеляемыеРасходы = УчетНДСПереопределяемый.ОпределитьРаспределеляемыеРасходы(Параметры.Услуги);
			УчетНДСПереопределяемый.СформироватьДвиженияНДСКосвенныеРасходыПоступлениеУслуг(РаспределеляемыеРасходы, Реквизиты, Движения, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеПосредническихУслуг(ТаблицаУслуги, ТаблицаРеквизиты) Экспорт

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // Подразделение для проводок
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов"            // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	Параметры.Реквизиты.Колонки.Добавить("УчетАгентскогоНДС", Новый ОписаниеТипов("Булево"));

	// Подготовка таблицы Услуги

	СписокОбязательныхКолонок = ""
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетЗатрат,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто1,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто2,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто3,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СтатьяЗатрат,"            // <СправочникСсылка.СтатьиЗатрат>
	+ "ПодразделениеЗатрат,"     // <Ссылка на справочник подразделений>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС,"               // <ПеречислениеСсылка.СтавкиНДС>
	+ "СпособУчетаНДС"           // <ПеречислениеСсылка.СпособыУчетаНДС>
	;
	Параметры.Вставить("Услуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));
	// Документом-основанием счета-фактуры при поступлении от поставщика выступает документ поступления
	Параметры.Услуги.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Если Параметры.Реквизиты.Количество() > 0 Тогда
		Реквизиты = Параметры.Реквизиты[0];
		Параметры.Услуги.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	КонецЕсли;

	Возврат Параметры;

КонецФункции

// Формирование движений по НДС, уплаченному на таможне при ввозе товаров
//
Процедура СформироватьДвиженияУплатаНДСнаТаможне(ТаблицаТовары, ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТовары) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыУплатаНДСнаТаможне(ТаблицаТовары, ТаблицаВзаиморасчетов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	// Выделяем таможенные платежи по ОС
	ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
	Для каждого СтрокаТаблицы Из Параметры.Товары Цикл
		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ОС Тогда
			СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС;
		Иначе
			СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеДопРасходовОтПоставщика(Параметры.Товары, Реквизиты);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ДвиженияРаздельныйУчетНДС  = РаздельныйУчетНДС И НЕ РаздельныйУчетНДСНаСчете19;
	НДСВключенВСтоимость       = Реквизиты.НДСВключенВСтоимость И НЕ РаздельныйУчетНДСНаСчете19;
	НДСПредъявленКВычету       = Реквизиты.НДСПредъявленКВычету И НЕ РаздельныйУчетНДСНаСчете19;
	ВычетНДСМожноОтразитьСразу = УпрощенныйУчетНДС ИЛИ ВерсияУчетаНДС = 2;
	
	// Бухгалтерские проводки
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ НДСВключенВСтоимость Тогда
		
		РеквизитыПроводок = ПодготовитьРеквизитыПроводокПоступлениеДопРасходовОтПоставщика(Реквизиты);
		ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Содержание, "Содержание");
		СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
		
		Если ВычетНДСМожноОтразитьСразу
		   И НДСПредъявленКВычету И ПлательщикНДС Тогда
			СформироватьПроводкиПоступлениеТоваровУслугВычетНДС(ДанныеДвижений, Движения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Движения регистров подсистемы НДС
	
	Если НЕ УпрощенныйУчетНДС Тогда
		СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
		Если НДСВключенВСтоимость Тогда
			СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ВычетНДСМожноОтразитьСразу
	И НЕ Реквизиты.НДСВключенВСтоимость
	   И Реквизиты.НДСПредъявленКВычету Тогда
	
		Если НЕ УпрощенныйУчетНДС Тогда
			СформироватьДвиженияНДСПредъявленныйВычетНДС(ДанныеДвижений, Движения,,, Отказ);
			ОпределитьРеквизитыОплатыТаможенногоНДС(Параметры.ТаблицаВзаиморасчетов, ДанныеДвижений, Реквизиты);
		КонецЕсли; 
		СформироватьДвиженияНДСЗаписиКнигиПокупокПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
		
	КонецЕсли;
	
	Если ДвиженияРаздельныйУчетНДС Тогда
		УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(
			Параметры.Товары, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыУплатаНДСнаТаможне(ТаблицаТовары, ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "НДСПредъявленКВычету,"           // <Булево> - признак, что НДС по ГТД сразу предъявляется к вычету
	+ "НДСВключенВСтоимость,"           // <Булево> - признак, что НДС по ГТД включается в стоимость номенклатуры
	+ "ВалютаВзаиморасчетов,"           // <СправочникСсылка.Валюты>
	+ "Содержание"                      // <Строка, 150> - содержание для проводок
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// При уплате НДС на таможне всегда УчетАгентскогоНДС=Ложь
	Параметры.Реквизиты.Колонки.Добавить("УчетАгентскогоНДС", Новый ОписаниеТипов("Булево"));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ДокументПартии,"          // <ДокументСсылка> - документ поступления товаров
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура> - поступивший ранее товар
	+ "Склад,"                   // <СправочникСсылка.Склады> - склад, на который поступил ранее товар
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "Подразделение,"           // Подразделение для проводок
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с таможней
	+ "СтавкаНДС,"               // <ПеречислениеСсылка.СтавкиНДС>
	+ "КодВидаОперации,"         // <Строка, 10>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаБезНДСРуб"           // <Число,15,2> - Фактурная стоимость в рублях
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии служит документ поступления товаров
	Параметры.Товары.Колонки.ДокументПартии.Имя = "Партия";
	// Документом-основанием счета-фактуры выступает сам документ ГТД по импорту
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	// Для расходов по уплате НДС на таможне, как и для всех остальных доп.расходов,
	// количество в регистре НДСпоПриобретеннымЦенностям всегда равно нулю
	Параметры.Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	// При уплате НДС на таможне в регистре НДСпоПриобретеннымЦенностям отражается только сам уплаченный НДС,
	// поэтому СуммаРуб, СуммаБезНДСРуб и СуммаВзаиморасчетов равны 0
	Параметры.Товары.Колонки.Добавить("СуммаРуб", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Параметры.Товары.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	// Подготовка таблицы для определения реквизитов документа уплаты НДС
	СписокОбязательныхКолонок = ""
	+ "ДокументРасчетов,"      // <ДокументСсылка> - документ расчетов
	+ "ОстатокВзаиморасчетов"; // <Число,15,2>     - сумма зачитываемого аванса
	
	Параметры.Вставить("ТаблицаВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура ОпределитьРеквизитыОплатыТаможенногоНДС(ТаблицаВзаиморасчеты, ТаблицаДвижений, Реквизиты)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаВзаиморасчеты", ТаблицаВзаиморасчеты);
	Запрос.УстановитьПараметр("Организация",          Реквизиты.Организация);
	Запрос.УстановитьПараметр("Регистратор",          Реквизиты.Регистратор);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаВзаиморасчеты.ДокументРасчетов,
	|	ТаблицаВзаиморасчеты.ОстатокВзаиморасчетов
	|ПОМЕСТИТЬ ДокументыРасчетов
	|ИЗ
	|	&ТаблицаВзаиморасчеты КАК ТаблицаВзаиморасчеты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаВзаиморасчеты.ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.Номер, """") КАК НомерДокументаОплаты,
	|	ДокументыРасчетов.ДокументРасчетов,
	|	ДокументыРасчетов.ОстатокВзаиморасчетов КАК СуммаБазис
	|ИЗ
	|	ДокументыРасчетов КАК ДокументыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
	|			И ДокументыРасчетов.ДокументРасчетов = РеквизитыДокументовРасчетов.Документ
	|ГДЕ
	|	ДокументыРасчетов.ДокументРасчетов <> &Регистратор";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ОплаченныйНДС = Результат.Выгрузить();

		Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Реквизиты.Период) >= 3 Тогда
			ТаблицаДвижений.Колонки.Добавить("НомерДокументаОплаты", ОбщегоНазначения.ОписаниеТипаСтрока(30));
			ТаблицаДвижений.Колонки.Добавить("ДатаДокументаОплаты",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		Иначе
			ТаблицаДвижений.Колонки.Добавить("ДатаОплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		КонецЕсли;

		ДополнительныеДокументыОплатыПоГТД = ТаблицаДвижений.СкопироватьКолонки();
		
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			
			Если ОплаченныйНДС.Количество() = 0 Тогда
				Продолжить;
			ИначеЕсли ОплаченныйНДС.Количество() = 1 Тогда
				// Документ оплаты один, распределение оплат не требуется
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОплаченныйНДС[0]);
				Продолжить;
			КонецЕсли;
			
			БазисРаспределения = Новый Массив();
			ПустойМассив = Новый Массив();
			
			Для каждого СтрокаОплаты Из ОплаченныйНДС Цикл
				БазисРаспределения.Добавить(СтрокаОплаты.СуммаБазис);
				ПустойМассив.Добавить(0);
			КонецЦикла;
			
			Если СтрокаТаблицы.СуммаБезНДС > 0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаТаблицы.СуммаБезНДС, БазисРаспределения);
			Иначе
				МассивСуммаБезНДС = ПустойМассив;
			КонецЕсли;
			
			Если СтрокаТаблицы.НДС > 0 Тогда
				МассивНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаТаблицы.НДС, БазисРаспределения);
			Иначе
				МассивНДС = ПустойМассив;
			КонецЕсли; 
			
			Счетчик = 0;
			ПерваяСтрока = Истина;
			
			Для каждого СтрокаОтбора Из ОплаченныйНДС Цикл
				Если ПерваяСтрока Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаОтбора);
					СтрокаТаблицы.СуммаБезНДС = МассивСуммаБезНДС[Счетчик];
					СтрокаТаблицы.НДС = МассивНДС[Счетчик];
					ПерваяСтрока = Ложь;
				Иначе
					ДополнительнаяСтрока = ДополнительныеДокументыОплатыПоГТД.Добавить();
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаТаблицы, ,"СуммаБезНДС, НДС");
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаОтбора);
					ДополнительнаяСтрока.СуммаБезНДС = МассивСуммаБезНДС[Счетчик];
					ДополнительнаяСтрока.НДС = МассивНДС[Счетчик];
				КонецЕсли;
				Счетчик = Счетчик + 1;
			КонецЦикла;

		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДополнительныеДокументыОплатыПоГТД, ТаблицаДвижений);
		
	КонецЕсли;

КонецПроцедуры

// Формирование движений при возврате товаров от покупателя
//
Процедура СформироватьДвиженияВозвратТоваровОтПокупателя(
	ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаНомераГТД, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВозвратТоваровОтПокупателя(
		ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаНомераГТД, ТаблицаРеквизиты);
		
	Реквизиты = Параметры.Реквизиты[0];
	
	УчетНДСПереопределяемый.СформироватьПроводкиПоступлениеГТД(Параметры.НомераГТД, Реквизиты, Движения, Отказ);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСПартиями = ПодготовитьТаблицуСписанныхПартийДляВозврата(Реквизиты, Параметры);
	
	Если ТаблицаСПартиями.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если ВерсияУчетаНДС <> 1
		ИЛИ Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат
		ИЛИ Реквизиты.ОтразитьВКнигеПокупок Тогда
		ВидЦенности = Перечисления.ВидыЦенностей.Возврат;
	Иначе
		ВидЦенности = Неопределено;
	КонецЕсли;
	ЗаполнитьВидыЦенностей(ТаблицаСПартиями, ВидЦенности, "СчетУчета");

	ШаблонСодержания = НСтр("ru = 'Возврат %1 от покупателя'");
	
	Для каждого СтрокаТаблицы Из ТаблицаСПартиями Цикл
		СтрокаТаблицы.Содержание  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
			БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТаблицы.СчетУчета));
		
		// СуммаРуб не должна включать НДС - как в других документах поступления
		СтрокаТаблицы.СуммаРуб = СтрокаТаблицы.СуммаРуб - СтрокаТаблицы.СуммаНДСРуб;
	КонецЦикла;

	ДанныеДвижений = ПодготовитьДанныеДвиженийВозвратТоваровОтПокупателя(ТаблицаСПартиями, Реквизиты);

	// Бухгалтерские проводки

	Если ДанныеДвижений.Итог("НДС") <> 0 Тогда
		СформироватьПроводкиВозвратТоваровОтПокупателя(ТаблицаСПартиями, Реквизиты, Движения, Отказ);
	КонецЕсли;

	Если ВерсияУчетаНДС = 1 Тогда
		
		Если УпрощенныйУчетНДС Тогда

			Если НЕ Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат И Реквизиты.ОтразитьВКнигеПокупок Тогда

               СформироватьДвиженияНДСЗаписиКнигиПокупокПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);

			Иначе

				// Сторно в книге продаж
				СформироватьДвиженияНДСЗаписиКнигиПродажВозвратТоваровОтПокупателя(ДанныеДвижений, Реквизиты, Движения, Отказ);

			КонецЕсли;

		Иначе // не-упрощенный учет

			// Движения по начислению НДС

			Если Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат
				ИЛИ Реквизиты.ОтразитьВКнигеПокупок Тогда
				// Обычное поступление
				СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			Иначе
				// Сторно движений регистров НДС начисленный, НДС реализация 0%
				УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйВозвратТоваровОтПокупателя(ДанныеДвижений, Движения, Отказ);
			КонецЕсли;

			// Движения по партионному учету НДС

			Если Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат
				ИЛИ НЕ ЗначениеЗаполнено(Реквизиты.ДокументОтгрузки) Тогда

				// Обычное поступление
				Если РаздельныйУчетНДС Тогда
					УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(
						ТаблицаСПартиями, Реквизиты, Движения, Отказ);
				КонецЕсли;

			Иначе
				// Сторно движений документа отгрузки по регистру НДС по приобретенным ценностям
				УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямВозвратТоваровПокупателем(
					ТаблицаСПартиями, Реквизиты, Движения, Отказ);
			КонецЕсли;

		КонецЕсли;
		
	Иначе
		
		Если ДанныеДвижений.Итог("НДС") <> 0 Тогда
			
			// С 01.01.2019 года вычет по возврату формируем сразу.
			Если Реквизиты.Период >= '20190101'
				И ЗначениеЗаполнено(Реквизиты.ДокументОтгрузки) Тогда 
				СформироватьПроводкиПоступлениеТоваровУслугВычетНДС(ДанныеДвижений, Движения, Отказ);
				Если ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
					ДанныеДвижений.ЗаполнитьЗначения(Справочники.Контрагенты.ПустаяСсылка(), "Поставщик");
					ДанныеДвижений.ЗаполнитьЗначения("17", "КодВидаОперации");
				КонецЕсли;
				СформироватьДвиженияНДСПредъявленныйВычетНДС(ДанныеДвижений, Движения, Ложь, Ложь, Отказ);
				СформироватьДвиженияНДСПредъявленныйВычетНДС(ДанныеДвижений, Движения, Истина, Ложь, Отказ);
				СформироватьДвиженияНДСЗаписиКнигиПокупокПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			Иначе
				СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			КонецЕсли;
			
		КонецЕсли;

		// Движения по партионному учету НДС

		// Обычное поступление
		Если РаздельныйУчетНДСНаСчете19 Тогда
			УчетНДСПереопределяемый.СформироватьДвиженияВозвратТоваровОтПокупателя(ТаблицаСПартиями, Реквизиты, Движения, Отказ);
		ИначеЕсли РаздельныйУчетНДС Тогда
			Если ЗначениеЗаполнено(Реквизиты.ДокументОтгрузки) Тогда
				// Сторно движений документа отгрузки по регистру НДС по приобретенным ценностям
				УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямВозвратТоваровПокупателем(
					ТаблицаСПартиями, Реквизиты, Движения, Отказ);
			Иначе
				// Фиксируем приход по регистру НДС по приобретенным ценностям
				УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(
					ТаблицаСПартиями, Реквизиты, Движения, Отказ);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВозвратТоваровОтПокупателя(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаНомераГТД, ТаблицаРеквизиты) Экспорт

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "СчетУчетаНДС,"                   // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов,"           // <СправочникСсылка.Валюты>
	+ "ДокументОтгрузки,"               // <ДокументСсылка> - документ, которым были отгружены возвращаемые товары
	+ "ОтразитьВКнигеПокупок,"          // <Булево> - отражать возврат в книге покупок или в книге продаж
	                                    // (выбор возможен если покупатель не выставляет счет-фактуру на возврат)
	+ "ПокупателемВыставляетсяСчетФактураНаВозврат," // <Булево> - признак, что покупатель выставляет нам счет-фактуру на возвращаемый товар
	+ "ПокупателюВыставляетсяКорректировочныйСчетФактура," // <Булево> - признак, что покупателю выставляется корректировочная счет-фактура на возвращаемый товар
	+ "ТипСкладаПолучателя,"
	+ "ВидОперации"                     // <ПеречислениеСсылка.ВидыОперацийВозвратТоваровОтПокупателя> - вид операции документа.
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// При возврате не может быть агентского НДС (всегда УчетАгентскогоНДС = Ложь)
	Параметры.Реквизиты.Колонки.Добавить("УчетАгентскогоНДС", Новый ОписаниеТипов("Булево"));
	// При возврате нет возможности включить НДС в стоимость (всегда НДСВключенВСтоимость = Ложь)
	Параметры.Реквизиты.Колонки.Добавить("НДСВключенВСтоимость", Новый ОписаниеТипов("Булево"));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"             // <СправочникСсылка.Номенклатура>
	+ "СуммаРуб,"                 // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"           // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"              // <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"                // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетДоходов,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДСпоРеализации," // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто,"                 // <Характеристика.ВидыСубконтоХозрасчетные> - субконто по счету учета НДС по реализации
	+ "Подразделение,"            // <Ссылка на справочник подразделений>
	+ "СтавкаНДС,"                // <ПеречислениеСсылка.СтавкиНДС>
	+ "СпособУчетаНДС,"           // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "Количество"                // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"             	// <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"                	// <ПланСчетовСсылка.Хозрасчетный>
	+ "Партия," 					// 
	+ "Количество"                  // <Число,15,3>
	;	
	
	Параметры.Вставить("СписанныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
		
	Реквизиты = Параметры.Реквизиты[0];
	
	Параметры.Товары.Свернуть(
		"Номенклатура,СчетУчета,СчетДоходов,СчетУчетаНДСпоРеализации,Субконто,Подразделение,СтавкаНДС,СпособУчетаНДС", 
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,Количество");

	Параметры.Товары.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	// Документом-основанием счета-фактуры может быть или сам документ возврата,
	// или документ отгрузки (если он указан и покупателем не выставляется счет-фактура на возврат)
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	Если Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат
		ИЛИ Реквизиты.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда
		Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.ДокументОтгрузки) Тогда
		Параметры.Товары.ЗаполнитьЗначения(Реквизиты.ДокументОтгрузки, "СчетФактура");
	Иначе
		Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	КонецЕсли;
	// Склад берем из шапки документа возврата
	Параметры.Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Склад, "Склад");
	// Счет учета НДС по приобретенным ценностям берем из шапки документа возврата
	Параметры.Товары.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.СчетУчетаНДС, "СчетУчетаНДС");
	
	// Подготовка таблицы НомераГТД

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество,"	          // <Число,15,3>
	+ "Содержание"	          // <Строка,150>
	;
	Параметры.Вставить("НомераГТД", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНомераГТД, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийВозвратТоваровОтПокупателя(Товары, Реквизиты) Экспорт

	ВозвратОтгруженныхТоваров = Реквизиты.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары;
	// При отгрузке без перехода права собственности не зачитывались предварительные оплаты
	ВозвратБезВычета = ВозвратОтгруженныхТоваров
		И Не УчетнаяПолитика.НачислятьНДСПоОтгрузке(Реквизиты.Организация, Реквизиты.Период);
	
	Если Товары.Количество() = 0 Или ВозвратБезВычета Тогда
		ПустаяТаблица = Товары.СкопироватьКолонки();
		НайденнаяКолонка = ПустаяТаблица.Колонки.Найти("СуммаБезНДСРуб");
		Если НайденнаяКолонка <> Неопределено Тогда
			НайденнаяКолонка.Имя = "СуммаБезНДС";
		КонецЕсли;
		НайденнаяКолонка = ПустаяТаблица.Колонки.Найти("СуммаНДСРуб");
		Если НайденнаяКолонка <> Неопределено Тогда
			НайденнаяКолонка.Имя = "НДС";
		КонецЕсли;
		Возврат ПустаяТаблица;
	КонецЕсли;

	ДанныеДвижений = Товары.Скопировать(,
		"СчетФактура,СтавкаНДС,СчетДоходов,СчетУчетаНДС,ВидЦенности,Содержание,
		|СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СчетУчета");
		
	ДанныеДвижений.Свернуть(
		"СчетФактура,СтавкаНДС,СчетДоходов,СчетУчетаНДС,ВидЦенности,Содержание", 
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("ПродавцомВыступаетОрганизация",      Новый ОписаниеТипов("Булево"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.ПокупателюВыставляетсяКорректировочныйСчетФактура, "ПродавцомВыступаетОрганизация");

	// Для отражения в книге покупок
	ДанныеДвижений.Колонки.Добавить("Поставщик",  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	// Для отражения в книге продаж
	ДанныеДвижений.Колонки.Добавить("Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик,Покупатель");

	// Договор указывается только для налогового агента, при возврате от покупателя всегда пустой
	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));

	ДанныеДвижений.Колонки.СуммаБезНДСРуб.Имя    = "СуммаБезНДС";
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";

	ДанныеДвижений.Колонки.Добавить("КодВидаОперации", Новый ОписаниеТипов("Строка"));
	
	Возврат ДанныеДвижений;

КонецФункции

Функция ПодготовитьТаблицуСписанныхПартийДляВозврата(Реквизиты, Параметры) Экспорт

	Параметры.СписанныеТовары.Свернуть("СчетУчета,Номенклатура,Партия", "Количество");
	УчетТоваров.ПроставитьСторноТаблицы(Параметры.СписанныеТовары, Новый Структура("Количество"), -1);

	ТаблицаСПартиями = Параметры.Товары.СкопироватьКолонки();
	
	Для каждого СтрокаРеализации Из Параметры.Товары Цикл
	
		СтруктураОтбора = Новый Структура("Номенклатура, СчетУчета");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаРеализации);
		НайденныеСтроки = Параметры.СписанныеТовары.НайтиСтроки(СтруктураОтбора);
		
		ТаблицаСТекущейПартией = Параметры.Товары.СкопироватьКолонки();
		
		Для каждого СтрокаСписания Из НайденныеСтроки Цикл
			
			Если СтрокаСписания.Количество <> 0 Тогда
				
				КоличествоПоПартии = Мин(СтрокаСписания.Количество, СтрокаРеализации.Количество);
			
				НоваяСтрока = ТаблицаСТекущейПартией.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРеализации, ,"Количество,СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб");
				НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаСписания.Партия), СтрокаСписания.Партия, Реквизиты.Регистратор);
				НоваяСтрока.Количество = КоличествоПоПартии;
				СтрокаСписания.Количество = СтрокаСписания.Количество - НоваяСтрока.Количество;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если ТаблицаСТекущейПартией.Количество() <> 0 Тогда
			
			МассивРаспределенияСуммаРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаРеализации.СуммаРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
			
			Если МассивРаспределенияСуммаРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаРуб ,"СуммаРуб");
			Иначе	
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаРуб");
			КонецЕсли;
			
			МассивРаспределенияСуммаБезНДСРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаРеализации.СуммаБезНДСРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
				
			Если МассивРаспределенияСуммаБезНДСРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаБезНДСРуб ,"СуммаБезНДСРуб");
			Иначе	
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаБезНДСРуб");
			КонецЕсли;
				
			МассивРаспределенияСуммаНДСРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаРеализации.СуммаНДСРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
			
			Если МассивРаспределенияСуммаНДСРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаНДСРуб, "СуммаНДСРуб");
			Иначе
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаНДСРуб");
			КонецЕсли; 
			
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСТекущейПартией, ТаблицаСПартиями);
	
		КонецЕсли; 
	
	КонецЦикла; 
	
	ТаблицаСПартиями.Свернуть(
		"Номенклатура,СчетУчета,СчетДоходов,СчетУчетаНДСпоРеализации,Субконто,Подразделение,СтавкаНДС,Партия,
		|Содержание,СчетФактура,Склад,СчетУчетаНДС,СпособУчетаНДС", 
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,Количество");
	
	Возврат ТаблицаСПартиями;

КонецФункции

Процедура СформироватьДвиженияВозвратТоваровКомиссионеру(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаНомераГТД, ТаблицаРеквизиты, Движения, Отказ) Экспорт 
	
	Если Не ЗначениеЗаполнено(ТаблицаСписанныеТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Движения.НДСРаздельныйУчет.Записать();
		Движения.НДСПоПриобретеннымЦенностям.Записать();
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВозвратТоваровКомиссионеру(ТаблицаТовары, 
		ТаблицаСписанныеТовары, 
		ТаблицаНомераГТД, 
		ТаблицаРеквизиты);
	
	// При возврате не может быть агентского НДС (всегда УчетАгентскогоНДС = Ложь)
	Параметры.Реквизиты.Колонки.Добавить("УчетАгентскогоНДС", Новый ОписаниеТипов("Булево"));
	// При возврате нет возможности включить НДС в стоимость (всегда НДСВключенВСтоимость = Ложь)
	Параметры.Реквизиты.Колонки.Добавить("НДСВключенВСтоимость", Новый ОписаниеТипов("Булево"));
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Параметры.Товары.Свернуть(
		"Номенклатура,СчетУчета,СчетДоходов,СчетУчетаНДСпоРеализации,Субконто,Подразделение,СтавкаНДС,СпособУчетаНДС,СчетФактура,Сделка,Покупатель,КодВидаОперации", 
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,Количество");

	Параметры.Товары.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	// Документом-основанием счета-фактуры может быть или сам документ возврата,
	// или документ отгрузки (если он указан и покупателем не выставляется счет-фактура на возврат)
	Параметры.Товары.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	// Склад берем из шапки документа возврата
	Параметры.Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));

	Параметры.Товары.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	// Счет учета НДС 19.09
	Если Реквизиты.НаВозвратыВыставляетсяКорректировочныйСчетФактура Тогда
		Параметры.Товары.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации, "СчетУчетаНДС");
		Параметры.Реквизиты.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации, "СчетУчетаНДС");
	Иначе
	// Счет учета НДС по приобретенным ценностям берем из шапки документа возврата
		Параметры.Товары.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ, "СчетУчетаНДС");
	КонецЕсли;
	
	УчетНДСПереопределяемый.СформироватьПроводкиПоступлениеГТД(Параметры.НомераГТД, Реквизиты, Движения, Отказ);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСПартиями = ПодготовитьТаблицуСписанныхПартийДляВозвратаКомиссионеру(Реквизиты, Параметры);
	
	Если ТаблицаСПартиями.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВидыЦенностей(ТаблицаСПартиями, Перечисления.ВидыЦенностей.Возврат, "СчетУчета");
	
	ШаблонСодержания = НСтр("ru = 'Возврат %1 от покупателя'");
	
	Для каждого СтрокаТаблицы Из ТаблицаСПартиями Цикл
		СтрокаТаблицы.Содержание  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
			БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТаблицы.СчетУчета)); 
		
		// СуммаРуб не должна включать НДС - как в других документах поступления
		СтрокаТаблицы.СуммаРуб = СтрокаТаблицы.СуммаРуб - СтрокаТаблицы.СуммаНДСРуб;
	КонецЦикла;
	
	ДанныеДвижений = ПодготовитьДанныеДвиженийВозвратТоваровКомиссионеру(ТаблицаСПартиями, Реквизиты);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	ДвиженияНДСПредъявленныйСформированы = Ложь;
	
	Если ДанныеДвижений.Итог("НДС") <> 0 Тогда

		// Бухгалтерские проводки
		СформироватьПроводкиВозвратТоваровКомиссионеру(ТаблицаСПартиями, Реквизиты, Движения, Отказ);

		// С 01.01.2019 года вычет по возврату формируем сразу.
		Если Реквизиты.Период >= '20190101'
			И Реквизиты.НаВозвратыВыставляетсяКорректировочныйСчетФактура Тогда 
			СформироватьПроводкиПоступлениеТоваровУслугВычетНДС(ДанныеДвижений, Движения, Отказ);
			СформироватьДвиженияНДСПредъявленныйВычетНДС(ДанныеДвижений, Движения, Ложь, Ложь, Отказ);
			СформироватьДвиженияНДСПредъявленныйВычетНДС(ДанныеДвижений, Движения, Истина, Ложь, Отказ);
			СформироватьДвиженияНДСЗаписиКнигиПокупокПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			ДвиженияНДСПредъявленныйСформированы = Истина;
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ ДвиженияНДСПредъявленныйСформированы Тогда
	
		// Движения по начислению НДС
		СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
		
	КонецЕсли;
	
	// Движения по партионному учету НДС
	Если РаздельныйУчетНДСНаСчете19 Тогда
		УчетНДСПереопределяемый.СформироватьДвиженияВозвратТоваровКомиссионеру(ТаблицаСПартиями, Реквизиты, Движения, Отказ);
	ИначеЕсли РаздельныйУчетНДС Тогда
		УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(
			ТаблицаСПартиями, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
	// Запишем движения, чтобы при реализации возвращенных товаров правильно определились партии
	Движения.НДСРаздельныйУчет.Записать();
	Движения.НДСПоПриобретеннымЦенностям.Записать();
	
КонецПроцедуры

Функция ПодготовитьПараметрыВозвратТоваровКомиссионеру(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаНомераГТД, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "СчетУчетаНДС,"                   // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты>
	+ "НаВозвратыВыставляетсяКорректировочныйСчетФактура" // <Булево>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"				// <СправочникСсылка.Номенклатура>
	+ "СуммаРуб,"					// <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"				// <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"				// <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетДоходов,"				// <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДСпоРеализации,"	// <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто,"					// <Характеристика.ВидыСубконтоХозрасчетные> - субконто по счету учета НДС по реализации
	+ "Подразделение,"				// <Ссылка на справочник подразделений>
	+ "СтавкаНДС,"					// <ПеречислениеСсылка.СтавкиНДС>
	+ "СпособУчетаНДС,"				// <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "Количество,"					// <Число,15,3>
	+ "Сделка,"						// <ДокументСсылка.ОтчетКомиссионераОПродажах> - документ реализации возвращенного товара
	+ "СчетФактура,"				// <ДокументСсылка.*>
	+ "Покупатель,"					// <Справочник.Контрагенты> - контрагент
	+ "КодВидаОперации"				// <Строка> - КодВидаОперации
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"				// <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный>
	+ "Партия," 					// <ДокументСсылка.*> - партия на которую возвращаем товар
	+ "Сделка," 					// <ДокументСсылка.ОтчетКомиссионераОПродажах> - документ, которым были реализованы возвращаемые товары
	+ "ВыставленСФ,"				// <<Булево> - признак выставленного покупателем комиссионеру счета-фактуры по возвращаемым товарам
	+ "СчетФактура,"				// <<ДокументСсылка.СчетФактураПолученный> - счет-фактура полученный от комиссионера по возвращаемым товарам
	+ "Количество"					// <Число,15,3>
	;	
	
	Параметры.Вставить("СписанныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
		
	// Подготовка таблицы НомераГТД

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество,"	          // <Число,15,3>
	+ "Содержание"	          // <Строка,150>
	;
	Параметры.Вставить("НомераГТД", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНомераГТД, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийВозвратТоваровКомиссионеру(Товары, Реквизиты)

	Если Товары.Количество() = 0 Тогда
		ПустаяТаблица = Товары.СкопироватьКолонки();
		НайденнаяКолонка = ПустаяТаблица.Колонки.Найти("СуммаБезНДСРуб");
		Если НайденнаяКолонка <> Неопределено Тогда
			НайденнаяКолонка.Имя = "СуммаБезНДС";
		КонецЕсли;
		НайденнаяКолонка = ПустаяТаблица.Колонки.Найти("СуммаНДСРуб");
		Если НайденнаяКолонка <> Неопределено Тогда
			НайденнаяКолонка.Имя = "НДС";
		КонецЕсли;
		Возврат ПустаяТаблица;
	КонецЕсли;

	ДанныеДвижений = Товары.Скопировать(,
		"СчетФактура,СтавкаНДС,СчетДоходов,СчетУчетаНДС,ВидЦенности,Содержание,
		|СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СчетУчета,
		|ПокупателемВыставляетсяСчетФактураНаВозврат,Покупатель,КодВидаОперации");
		
	ДанныеДвижений.Колонки.ПокупателемВыставляетсяСчетФактураНаВозврат.Имя = "ПредъявленСчетФактура";
		
	ДанныеДвижений.Свернуть(
		"СчетФактура,СтавкаНДС,СчетДоходов,СчетУчетаНДС,ВидЦенности,Содержание,
		|ПредъявленСчетФактура,Покупатель,КодВидаОперации",
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	
	ДанныеДвижений.Колонки.Добавить("НДСВключенВСтоимость", Новый ОписаниеТипов("Булево"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.НДСВключенВСтоимость, "НДСВключенВСтоимость");

	Если Реквизиты.НаВозвратыВыставляетсяКорректировочныйСчетФактура Тогда

		// Записываем в книгу покупок покупателя как поставщика
		ДанныеДвижений.Колонки.Покупатель.Имя = "Поставщик";
	
	Иначе
	
		// Для отражения в книге покупок
		ДанныеДвижений.Колонки.Добавить("Поставщик",  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик,Покупатель");
	
	КонецЕсли;

	// Договор указывается только для налогового агента, при возврате от покупателя всегда пустой
	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));

	ДанныеДвижений.Колонки.СуммаБезНДСРуб.Имя    = "СуммаБезНДС";
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";

	Возврат ДанныеДвижений;

КонецФункции

Функция ПодготовитьТаблицуСписанныхПартийДляВозвратаКомиссионеру(Реквизиты, Параметры)

	ТаблицаСписанныеТовары = Параметры.СписанныеТовары.Скопировать(,"СчетУчета,Номенклатура,Партия, Сделка, Количество");
	ТаблицаСписанныеТовары.Свернуть("СчетУчета,Номенклатура,Партия, Сделка", "Количество");
	ТаблицаСписанныеТовары.Индексы.Добавить("Сделка");
	
	УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСписанныеТовары, Новый Структура("Количество"), -1);

	ТаблицаСПартиями = Параметры.Товары.СкопироватьКолонки();
	ТаблицаСПартиями.Колонки.Добавить("ПокупателемВыставляетсяСчетФактураНаВозврат", Новый ОписаниеТипов("Булево")); 
	
	СтруктураОтбора = Новый Структура("Номенклатура, СчетУчета, Сделка");
	
	Для каждого СтрокаРеализации Из Параметры.Товары Цикл
	
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаРеализации);
		НайденныеСтроки = ТаблицаСписанныеТовары.НайтиСтроки(СтруктураОтбора);
		
		ТаблицаСТекущейПартией = ТаблицаСПартиями.СкопироватьКолонки();
		
		Для каждого СтрокаСписания Из НайденныеСтроки Цикл
			
			Если СтрокаСписания.Количество <> 0 Тогда
				
				КоличествоПоПартии = Мин(СтрокаСписания.Количество, СтрокаРеализации.Количество);
			
				НоваяСтрока = ТаблицаСТекущейПартией.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРеализации, ,"Количество, СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб");
				НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаСписания.Партия), СтрокаСписания.Партия, Реквизиты.Регистратор);
				НоваяСтрока.ПокупателемВыставляетсяСчетФактураНаВозврат =  ЗначениеЗаполнено(НоваяСтрока.СчетФактура);
				НоваяСтрока.Количество									=  КоличествоПоПартии;
				СтрокаСписания.Количество = СтрокаСписания.Количество - НоваяСтрока.Количество;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		// Суммы восстанавливаемого НДС заполняем только по возвратам по которым получен счет-фактура от покупателя
		Если ТаблицаСТекущейПартией.Количество() <> 0 и ЗначениеЗаполнено(СтрокаРеализации.СчетФактура) Тогда
			
			МассивРаспределенияСуммаРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаРеализации.СуммаРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
			
			Если МассивРаспределенияСуммаРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаРуб ,"СуммаРуб");
			Иначе	
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаРуб");
			КонецЕсли;
			
			МассивРаспределенияСуммаБезНДСРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаРеализации.СуммаБезНДСРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
				
			Если МассивРаспределенияСуммаБезНДСРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаБезНДСРуб ,"СуммаБезНДСРуб");
			Иначе	
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаБезНДСРуб");
			КонецЕсли;
				
			МассивРаспределенияСуммаНДСРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаРеализации.СуммаНДСРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
			
			Если МассивРаспределенияСуммаНДСРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаНДСРуб, "СуммаНДСРуб");
			Иначе
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаНДСРуб");
			КонецЕсли; 
			
		КонецЕсли; 
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСТекущейПартией, ТаблицаСПартиями);
	
	КонецЦикла; 
	
	ТаблицаСПартиями.Свернуть(
		"Номенклатура,СчетУчета,СчетДоходов,СчетУчетаНДСпоРеализации,Субконто,Подразделение,СтавкаНДС,Партия,Покупатель,
		|КодВидаОперации,Содержание,СчетФактура,Склад,СчетУчетаНДС,СпособУчетаНДС,
		|Сделка, ПокупателемВыставляетсяСчетФактураНаВозврат", 
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,Количество");
	
	Возврат ТаблицаСПартиями;

КонецФункции

Процедура СформироватьДвиженияВычетНДСПоПриобретеннымЦенностям(ТаблицаРеквизиты, ТаблицаВычетПоПриобретеннымЦенностям, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСКлиентСервер.Версия(Реквизиты.Период) = 1
	   И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыВычетНДСПоПриобретеннымЦенностям(ТаблицаРеквизиты, ТаблицаВычетПоПриобретеннымЦенностям);
	Реквизиты = Параметры.Реквизиты[0];
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	// НДС предъявленный.
	Если Не РаздельныйУчетНДСНаСчете19
	 Или Не Реквизиты.ПредъявленНДСКВычету0 Тогда
		СформироватьДвиженияНДСПредъявленныйВычетНДС(Параметры.ТаблицаДвижений, Движения,,, Отказ);
	КонецЕсли;

	// НДС записи книги покупок.
	СформироватьДвиженияНДСЗаписиКнигиПокупок(Параметры.ТаблицаДвижений, Движения, Отказ);
	
	Если Реквизиты.ПредъявленНДСКВычету0 Тогда
		
		// НДС предъявленный реализация 0%.
		УчетНДСПереопределяемый.СформироватьДвиженияНДСПредъявленныйРеализация0ВычетПоРеализации(Параметры.ТаблицаДвижений, Движения, Отказ);
		// Проводки 68.02 19.07
		Если РаздельныйУчетНДСНаСчете19 Тогда
			УчетНДСПереопределяемый.СформироватьПроводкиВычетНДСПоТоварамРеализованнымПоСтавке0(Параметры.ТаблицаДвижений, Движения, Отказ);
		Иначе
			СформироватьПроводкиВычетНДСПоТоварамРеализованнымПоСтавке0(Параметры.ТаблицаДвижений, Движения, Отказ);
		КонецЕсли;
		
	Иначе
		
		// Проводки 68.02 19.х.
		СформироватьПроводкиПоступлениеТоваровУслугВычетНДС(Параметры.ТаблицаДвижений, Движения, Отказ);
		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВычетНДСПоПриобретеннымЦенностям(ТаблицаРеквизиты, ТаблицаВычетПоПриобретеннымЦенностям)

	Параметры = Новый Структура;

	// Реквизиты шапки документа
	ОбязательныеКолонки = ""
		+ "Организация,"
		+ "Период,"
		+ "ПредъявленНДСКВычету0";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Реквизиты табличной части
	ОбязательныеКолонки = ""
		+ "СчетФактура,"                // <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
		+ "Поставщик,"                  // <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
		+ "ДоговорКонтрагента,"
		+ "НДС,"                        // <Число> - сумма НДС;
		+ "СуммаБезНДС,"                // <Число> - сумма без НДС по определенной ставке НДС;
		+ "СтавкаНДС,"                  // <ПеречислениеСсылка.СтавкаНДС> - ставка НДС;
		+ "СчетУчетаНДС,"               // <ПланСчетовСсылка.Хозрасчетный> - счет, на котором учитывается НДС
		+ "ДокументОтгрузки,"
		+ "ДокументОплаты,"
		+ "Состояние,"
		+ "Событие,"
		+ "ДатаСобытия,"
		+ "ДатаОплаты,"
		+ "НомерДокументаОплаты,"
		+ "ДатаДокументаОплаты,"
		+ "КодВидаОперации,"
		+ "ВидЦенности,"
		+ "ЗаписьДополнительногоЛиста,"
		+ "КорректируемыйПериод,"
		+ "ИсправленныйСчетФактура,"
		+ "Содержание,"
		+ "Период,"                     // <Дата> формирования движений (период)
		+ "Регистратор,"                // <ДокументСсылка.СчетФактураПолученный> - проводимый документ
		+ "Организация";                // <СправочникСсылка.Организации>

	Параметры.Вставить("ТаблицаДвижений", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВычетПоПриобретеннымЦенностям, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

// ПОЛУЧЕНИЕ СЧЕТА-ФАКТУРЫ

// Процедура формирует движения по вычету НДС и по обратному начислению НДС по поступлению,
// вызывается из документа СчетФактураПолученный.
//
Процедура СформироватьДвиженияПолученСчетФактураНаПоступление(ТаблицаРеквизиты, ТаблицаПредъявленногоНДС, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаПредъявленногоНДС)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Реквизиты.НДСИсчисляетсяНалоговымАгентом 
		И НЕ Реквизиты.Исправление
		И НЕ Реквизиты.ИсправлениеСобственнойОшибки Тогда
		ОбратноеНачислениеНДС.СформироватьДвиженияСчетФактураНаПоступление(
			Реквизиты, ТаблицаПредъявленногоНДС, Движения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСКлиентСервер.Версия(Реквизиты.Период) = 1
	 Или Не Реквизиты.НДСПредъявленКВычету Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПолученСчетФактураНаПоступление(ТаблицаРеквизиты, ТаблицаПредъявленногоНДС);
	Реквизиты = Параметры.Реквизиты[0];

	СформироватьДвиженияНДСПредъявленныйВычетНДС(Параметры.НДСПредъявленный, Движения,,, Отказ);
	СформироватьДвиженияНДСЗаписиКнигиПокупокПоступлениеТоваровУслуг(Параметры.НДСПредъявленный, Движения, Отказ);
	СформироватьПроводкиПоступлениеТоваровУслугВычетНДС(Параметры.НДСПредъявленный, Движения, Отказ);

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьДвиженияПолученСчетФактураНаПоступление()
//
Функция ПодготовитьПараметрыПолученСчетФактураНаПоступление(ТаблицаРеквизиты, ТаблицаПредъявленногоНДС)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"               // <Дата> формирования движений (период)
	+ "Организация,"          // <СправочникСсылка.Организации>
	+ "НДСПредъявленКВычету";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "Период,"
	+ "ДатаСобытия,"
	+ "Организация,"
	+ "СчетФактура,"
	+ "ВидЦенности,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДС,"
	+ "Поставщик,"
	+ "ДатаОплаты,"
	+ "КодВидаОперации,"
	+ "ДоговорКонтрагента,"
	+ "ИсправленныйСчетФактура,"
	+ "СуммаБезНДС,"
	+ "НДС,"
	+ "Содержание,"
	+ "НомерДокументаОплаты,"
	+ "ДатаДокументаОплаты";
	
	Параметры.Вставить("НДСПредъявленный", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПредъявленногоНДС, ОбязательныеКолонки));
	
	Возврат Параметры;

КонецФункции

Функция ПолучитьСвязанныеСчетаФактурыПолученные(СчетФактура, ПоОдномуОснованию = Истина)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", СчетФактура);
	
	Если ПоОдномуОснованию Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураПолученный.Ссылка КАК СчетФактура
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ИсправляемыйСчетФактура = &ИсправляемыйСчетФактура
		|	И НЕ СчетФактураПолученный.ИсправлениеСобственнойОшибки";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КорректировкаПоступления.Ссылка КАК ДокументСсылка
		|ПОМЕСТИТЬ ВТДокументы
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|		ПО КорректировкаПоступления.ИсправляемыйДокументПоступления = СчетФактураПолученныйДокументыОснования.ДокументОснование
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.Ссылка = &ИсправляемыйСчетФактура
		|	И НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ИсправлениеСобственнойОшибки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураПолученныйДокументыОснования.Ссылка КАК СчетФактура,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Корректировочный
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы
		|		ПО СчетФактураПолученныйДокументыОснования.ДокументОснование = ВТДокументы.ДокументСсылка
		|ГДЕ
		|	НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ИсправлениеСобственнойОшибки";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат;
	КонецЕсли;

КонецФункции

// ВЫСТАВЛЕНИЕ СЧЕТА-ФАКТУРЫ

Функция ПолучитьСвязанныеСчетаФактурыВыданные(СчетФактура, ПоОдномуОснованию = Истина)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", СчетФактура);
	
	Если ПоОдномуОснованию Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураВыданный.Ссылка КАК СчетФактура
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ИсправляемыйСчетФактура = &ИсправляемыйСчетФактура";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КорректировкаРеализации.Ссылка КАК ДокументСсылка
		|ПОМЕСТИТЬ ВТДокументы
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|		ПО КорректировкаРеализации.ИсправляемыйДокументРеализации = СчетФактураВыданныйДокументыОснования.ДокументОснование
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка = &ИсправляемыйСчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Корректировочный
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы
		|		ПО СчетФактураВыданныйДокументыОснования.ДокументОснование = ВТДокументы.ДокументСсылка";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат;
	КонецЕсли;

КонецФункции

// ПЕРЕМЕЩЕНИЕ ТОВАРОВ

Процедура СформироватьДвиженияСписаниеТоваровПрочее(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	УчетНДСПереопределяемый.СформироватьДвиженияСписаниеТоваровПрочее(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияПринятиеНаУчетОС(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет,
		ТаблицаЗатратПоВключениюНДСВСоставРасходов,ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаСписанныеТоварыБухУчет) Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если Не ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСКлиентСервер.Версия(Реквизиты.Период) = 1
	   И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПринятиеНаУчетОС(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
		Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
	УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
		СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
	УчетНДСПереопределяемый.ВключитьНДСВРасходыНУ(СписанныеПартииНДС, ТаблицаЗатратПоВключениюНДСВСоставРасходов,
		Реквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеНаУчетОС(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Подразделение,"             // <Ссылка на справочник подразделений>
	+ "ПроцентАмортизационнойПремии"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	Параметры.Реквизиты.Колонки.Добавить("НДСвСтоимостиТоваров", Новый ОписаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять, "НДСвСтоимостиТоваров");

	// Подготовка таблицы товаров документа:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "НовыйСпособУчетаНДС"
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	Реквизиты = Параметры.Реквизиты[0];	
	Параметры.Товары.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
		
	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПОСТУПЛЕНИЕ НМА

Процедура СформироватьДвиженияПоступлениеНематериальныхАктивовОтПоставщика(ТаблицаНМА, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНМА) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеНематериальныхАктивовОтПоставщика(ТаблицаНМА, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.НематериальныеАктивы, Реквизиты, Неопределено, "СчетУчета");
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	НДСВключенВСтоимость       = Реквизиты.НДСВключенВСтоимость И НЕ РаздельныйУчетНДСНаСчете19;
	
	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеНематериальныхАктивов(
		Параметры.НематериальныеАктивы, Реквизиты);
	
	// Бухгалтерские проводки
	Если ДанныеДвижений.Итог("НДС") <> 0 Тогда
		
		РеквизитыПроводок = ПодготовитьРеквизитыПроводокПоступлениеТоваровУслугОтПоставщика(Реквизиты);
		
		Если Реквизиты.УчетАгентскогоНДС Тогда
			Если Перечисления.ВидыАгентскихДоговоров.ЭтоНерезидент(Реквизиты.ВидАгентскогоДоговора) Тогда
				СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгентНерезидент(ДанныеДвижений, Движения, Отказ);
			Иначе
				СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгент(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
			КонецЕсли;
		ИначеЕсли НЕ НДСВключенВСтоимость Тогда
			СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
		КонецЕсли;

	КонецЕсли;
	
	Если Реквизиты.УчетАгентскогоНДС И НДСВключенВСтоимость Тогда
		НДСВключенныйВСтоимость = 
			ПодготовитьДанныеДвиженийПоступлениеНематериальныхАктивовНалоговыйАгент(Параметры.НематериальныеАктивы, Реквизиты);
		СформироватьПроводкиВключениеНДСВСтоимость(НДСВключенныйВСтоимость, Движения, Отказ);
	КонецЕсли;
		
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Движения регистров подсистемы НДС
	Если ВерсияУчетаНДС = 1 Тогда
		
		Если НЕ УпрощенныйУчетНДС Тогда
			
			Если ДанныеДвижений.Итог("НДС") <> 0 Тогда
				СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
				Если Реквизиты.НДСВключенВСтоимость Тогда
					СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеДвижений.Итог("НДС") <> 0 Тогда
			СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			Если НДСВключенВСтоимость Тогда
				СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеНематериальныхАктивовОтПоставщика(ТаблицаНМА, ТаблицаРеквизиты) Экспорт
	Параметры = Новый Структура;
	
	// Подготовка таблицы Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ЭлектронныеУслуги,"              // <Булево>
	+ "ВидАгентскогоДоговора,"          // <ПеречислениеСсылка.ВидыАгентскихДоговоров> - заполняется, если УчетАгентскогоНДС = Истина
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов"            // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Нематериальные активы

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив,"     // <СправочникСсылка.НематериальныеАктивы>
	+ "ВидОбъектаУчета,"         // <ПеречислениеСсылка.ВидыОбъектовУчетаНМА>
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС"                // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("НематериальныеАктивы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНМА, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом-основанием счета-фактуры при поступлении от поставщика выступает документ поступления
	Параметры.НематериальныеАктивы.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.НематериальныеАктивы.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийПоступлениеНематериальныхАктивов(НематериальныеАктивы, Реквизиты) Экспорт

	ДанныеДвижений = НематериальныеАктивы.Скопировать(,
		"СчетФактура,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС,ВидЦенности,Содержание,
		|СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");
	ДанныеДвижений.Свернуть(
		"СчетФактура,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС,ВидЦенности,Содержание",
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");

	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Если Реквизиты.УчетАгентскогоНДС Тогда 	// Договор должен указываться только для налогового агента
		ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.ДоговорКонтрагента, "ДоговорКонтрагента");
	КонецЕсли;

	ДанныеДвижений.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		Если Реквизиты.НДСВключенВСтоимость Тогда
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		Иначе
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
			СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов + СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;
	КонецЦикла;
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";
	ДанныеДвижений.Колонки.Удалить("СуммаРуб");
	ДанныеДвижений.Колонки.Удалить("СуммаБезНДСРуб");
	
	Возврат ДанныеДвижений;
КонецФункции

Функция ПодготовитьДанныеДвиженийПоступлениеНематериальныхАктивовНалоговыйАгент(НематериальныеАктивы, Реквизиты)

	ДанныеДвижений = НематериальныеАктивы.Скопировать(,"СчетУчета,НематериальныйАктив,СчетФактура,СчетУчетаНДС,СуммаНДСРуб");
	
	ДанныеДвижений.Колонки.СчетУчета.Имя = "СчетЗатрат";
	
	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");

	ДанныеДвижений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
	
	ДанныеДвижений.Колонки.Добавить("Субконто1");
	ДанныеДвижений.Колонки.Добавить("Субконто2");
	ДанныеДвижений.Колонки.Добавить("Субконто3");
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы
				ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР Тогда
				СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.НематериальныйАктив;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СвойстваСчета.УчетПоПодразделениям Тогда
			СтрокаТаблицы.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;

	ДанныеДвижений.Колонки.Удалить("НематериальныйАктив");
	
	Возврат ДанныеДвижений;

КонецФункции

// ВЫДАННЫЕ АВАНСЫ


Функция ПодготовитьТаблицуСторноНаВыданныйАванс(ТаблицаРеквизиты, Отказ) Экспорт
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("Период");
	ПустаяТаблица.Колонки.Добавить("Регистратор");
	ПустаяТаблица.Колонки.Добавить("СчетФактура");
	ПустаяТаблица.Колонки.Добавить("Контрагент");
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента");
	ПустаяТаблица.Колонки.Добавить("НДС");
	ПустаяТаблица.Колонки.Добавить("СуммаБезНДС");
	ПустаяТаблица.Колонки.Добавить("СтавкаНДС");
	ПустаяТаблица.Колонки.Добавить("СчетУчетаНДС");
	ПустаяТаблица.Колонки.Добавить("Содержание");
	ПустаяТаблица.Колонки.Добавить("ВидЦенности");
	ПустаяТаблица.Колонки.Добавить("ДокументОплаты");
	ПустаяТаблица.Колонки.Добавить("ДатаОплаты");
	ПустаяТаблица.Колонки.Добавить("Событие");
	ПустаяТаблица.Колонки.Добавить("ДатаСобытия");
	ПустаяТаблица.Колонки.Добавить("ЗаписьДополнительногоЛиста");
	ПустаяТаблица.Колонки.Добавить("СторнирующаяЗаписьДопЛиста");
	ПустаяТаблица.Колонки.Добавить("КорректируемыйПериод");
	ПустаяТаблица.Колонки.Добавить("ИсправленныйСчетФактура");
	ПустаяТаблица.Колонки.Добавить("НомерДокументаОплаты");
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаОплаты");
	ПустаяТаблица.Колонки.Добавить("НДСИсчисляетсяНалоговымАгентом");
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Реквизиты.Период);
	Если НЕ ИспользуетсяПостановлениеНДС1137 Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	ЭтоИсправление = Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс 
		И (Реквизиты.Исправление ИЛИ Реквизиты.ИсправлениеСобственнойОшибки) ;
	Если НЕ ЭтоИсправление Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыСторноНаВыданныйАванс(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", Реквизиты.ДокументОснование);
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("МоментДокумента", 
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование вычета НДС с выданного аванса"" КАК Содержание,
	|	ЗаписиКнигиПокупок.Организация КАК Организация,
	|	ЗаписиКнигиПокупок.Поставщик КАК Контрагент,
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПокупок.ВидЦенности КАК ВидЦенности,
	|	ЗаписиКнигиПокупок.СтавкаНДС КАК СтавкаНДС,
	|	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПокупок.ДокументОплаты КАК ДокументОплаты,
	|	ЗаписиКнигиПокупок.Событие КАК Событие,
	|	&Период КАК ДатаСобытия,
	|	ЗаписиКнигиПокупок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	-ЗаписиКнигиПокупок.СуммаБезНДСОборот КАК СуммаБезНДС,
	|	-ЗаписиКнигиПокупок.НДСОборот КАК НДС,
	|	ЗаписиКнигиПокупок.СчетУчетаНДС КАК СчетУчетаНДС
	|ПОМЕСТИТЬ СторноВычета
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ЗаписиКнигиПокупок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СторноВычета.Период КАК Период,
	|	СторноВычета.Регистратор КАК Регистратор,
	|	СторноВычета.Содержание КАК Содержание,
	|	СторноВычета.Организация КАК Организация,
	|	СторноВычета.Контрагент КАК Контрагент,
	|	СторноВычета.СчетФактура КАК СчетФактура,
	|	СторноВычета.ВидЦенности КАК ВидЦенности,
	|	СторноВычета.СтавкаНДС КАК СтавкаНДС,
	|	СторноВычета.ДатаОплаты КАК ДатаОплаты,
	|	СторноВычета.ДокументОплаты КАК ДокументОплаты,
	|	СторноВычета.Событие КАК Событие,
	|	СторноВычета.ДатаСобытия КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ДанныеПервичныхДокументов.ДатаРегистратора, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ДанныеПервичныхДокументов.ДатаРегистратора, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ДанныеПервичныхДокументов.ДатаРегистратора, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.ДатаРегистратора, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	СторноВычета.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СторноВычета.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	СторноВычета.СуммаБезНДС КАК СуммаБезНДС,
	|	СторноВычета.НДС КАК НДС,
	|	СторноВычета.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерДокументаОплаты,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты,
	|	ВЫБОР
	|		КОГДА СторноВычета.ДатаСобытия < ДАТАВРЕМЯ(2018, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЕСТЬNULL(ДоговорыКонтрагентов.УчетАгентскогоНДС, ЛОЖЬ) = ИСТИНА
	|				И ЕСТЬNULL(ДоговорыКонтрагентов.ВидАгентскогоДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров)
	|	КОНЕЦ КАК НДСИсчисляетсяНалоговымАгентом
	|ИЗ
	|	СторноВычета КАК СторноВычета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО СторноВычета.СчетФактура = ДанныеПервичныхДокументов.Документ
	|			И (ДанныеПервичныхДокументов.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО СторноВычета.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;

	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСторноНаВыданныйАванс(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"                       // <Дата> формирования движений (период)
	+ "Регистратор,"                  // <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация,"                  // <СправочникСсылка.Организации>
	+ "Исправление,"                  // <Булево>
	+ "ИсправлениеСобственнойОшибки," // <Булево>
	+ "ВидСчетаФактуры,"              // <ПеречислениеСсылка.ВидСчетаФактуры>
	+ "ДокументОснование,"            // <ДокументСсылка>
	+ "ДоговорКонтрагента";           // <СправочникСсылка.ДоговорыКонтрагентов>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));
	
	Возврат Параметры;

КонецФункции

// ПОЛУЧЕННЫЕ АВАНСЫ

// Процедура формирует движения по начислению НДС при получении аванса, вызывается Из документа Счет-фактура выданный
//
Процедура СформироватьДвиженияВыписанСчетФактураНаПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаАвансов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ПлательщикНДС	  = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134  = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);

	Если НЕ ПлательщикНДС И НЕ ВедетсяУчетНДСПоФЗ134 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметыВыписанСчетФактураНаПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Параметры.Авансы.Свернуть(
		"СчетФактура, ДокументОплаты, Контрагент, ДоговорКонтрагента, ВидЦенности, ВалютаДокумента, СтавкаНДС, СчетУчетаНДС,
		| ДатаОплаты, ДатаСобытия, ИсправленныйСчетФактура, ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста",
		"СуммаНДС, СуммаБезНДС, СуммаВВалютеРасчетов");

	СформироватьПроводкиНачислениеНДСПолученныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);

	Если ВерсияУчетаНДС = 1 Тогда
		Если УпрощенныйУчетНДС Тогда
			СформироватьДвиженияНДСЗаписиКнигиПродажПолученныйАванс(Реквизиты, Параметры.Авансы, Движения, Отказ);
		Иначе
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйПолученныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);
			УчетНДСПереопределяемый.СформироватьДвиженияНДСсАвансовПолученныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);
		КонецЕсли;
	Иначе
		СформироватьДвиженияНДСЗаписиКнигиПродажПолученныйАванс(Реквизиты, Параметры.Авансы, Движения, Отказ);
		Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Реквизиты.Период) >= 3
			И Движения.НДСЗаписиКнигиПродаж.Количество() > 0
			И НЕ Реквизиты.Исправление Тогда
			СформироватьДвиженияНДСНомераДокументовОплатыПоТекущимДвижениям(Реквизиты, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьДвиженияВыписанСчетФактураНаПолученныйАванс()
//
Функция ПодготовитьПараметыВыписанСчетФактураНаПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "ВидСчетаФактуры,"
	+ "Исправление,"
	+ "НомерПлатежноРасчетногоДокумента,"
	+ "ДатаПлатежноРасчетногоДокумента,"
	+ "НДСИсчисляетсяНалоговымАгентом";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Список сумм авансов в разбивке по ставкам НДС:
	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "ДокументОплаты,"				// <ДокументСсылка...>  
	+ "Контрагент,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов> - договор взаиморасчетов;
	+ "ВидЦенности,"			
	+ "ВалютаДокумента,"
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "СчетУчетаНДС,"				// <ПланСчетовСсылка.Хозрасчетный> - счет, на котором учитывается НДС
	+ "ДатаОплаты,"
	+ "ДатаСобытия,"
	+ "ИсправленныйСчетФактура,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "СуммаНДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СуммаВВалютеРасчетов";

	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

// Процедура формирует движения по начислению НДС при получении аванса, вызывается Из
// документа ФормированиеЗаписейКнигиПродаж
Процедура СформироватьДвиженияНачислитьНДССПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСКлиентСервер.Версия(Реквизиты.Период) <> 1
	 Или УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеквизиты.Колонки.Добавить("НДСИсчисляетсяНалоговымАгентом",   Новый ОписаниеТипов("Булево"));
	ТаблицаРеквизиты.Колонки.Добавить("Исправление",                      Новый ОписаниеТипов("Булево"));
	ТаблицаРеквизиты.Колонки.Добавить("ДатаПлатежноРасчетногоДокумента",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРеквизиты.Колонки.Добавить("НомерПлатежноРасчетногоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	
	Параметры = ПодготовитьПараметрыНачислитьНДССПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов);
	Реквизиты = Параметры.Реквизиты[0];

	СформироватьДвиженияНДСЗаписиКнигиПродажПолученныйАванс(Реквизиты, ТаблицаАвансов, Движения, Отказ);
	УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйПолученныйАвансРасход(
		ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьДвиженияНачислитьНДССПолученногоАванса()
//
Функция ПодготовитьПараметрыНачислитьНДССПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "Исправление,"
	+ "ДатаПлатежноРасчетногоДокумента,"
	+ "НомерПлатежноРасчетногоДокумента,"
	+ "НДСИсчисляетсяНалоговымАгентом";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Список сумм авансов в разбивке по ставкам НДС:
	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Контрагент,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов> - договор взаиморасчетов;
	+ "СуммаНДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "ДатаСобытия,"
	+ "ДатаОплаты,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "СторнирующаяЗаписьДопЛиста";

	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСчетФактураВыданныйКорректировочныйНаАванс(
	ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаАвансов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Реквизиты.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметыСчетФактураВыданныйКорректировочныйНаАванс(ТаблицаРеквизиты, ТаблицаАвансов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Параметры.Авансы.Свернуть(
		"СчетФактура, Контрагент, ДоговорКонтрагента, ВидЦенности, СтавкаНДС, СчетУчетаНДС,
		| ДатаСобытия, ИсправленныйСчетФактура, ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста",
		"СуммаНДС, СуммаБезНДС");

	СформироватьПроводкиНачислениеНДСПолученныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);

	СформироватьДвиженияНДСЗаписиКнигиПродажПолученныйАванс(Реквизиты, Параметры.Авансы, Движения, Отказ);
	Если Движения.НДСЗаписиКнигиПродаж.Количество() > 0
		И НЕ Реквизиты.Исправление Тогда
		СформироватьДвиженияНДСНомераДокументовОплатыПоТекущимДвижениям(Реквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьДвиженияВыписанСчетФактураНаПолученныйАванс()
//
Функция ПодготовитьПараметыСчетФактураВыданныйКорректировочныйНаАванс(ТаблицаРеквизиты, ТаблицаАвансов)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "ВидСчетаФактуры,"
	+ "Исправление,"
	+ "НомерПлатежноРасчетногоДокумента,"
	+ "ДатаПлатежноРасчетногоДокумента,"
	+ "НДСИсчисляетсяНалоговымАгентом";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Список сумм авансов в разбивке по ставкам НДС:
	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Контрагент,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов> - договор взаиморасчетов;
	+ "ВидЦенности,"			
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "СчетУчетаНДС,"				// <ПланСчетовСсылка.Хозрасчетный> - счет, на котором учитывается НДС
	+ "ДатаСобытия,"
	+ "ИсправленныйСчетФактура,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "СуммаНДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС";				// <Число> - сумма без НДС по определенной ставке НДС;

	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

// РАСЧЕТЫ ПО ОПЛАТЕ

// Процедуры формирования движений по курсовым разницам
//
Процедура СформироватьДвиженияКурсовыеРазницы(ТаблицаРеквизиты, ТаблицаВзаиморасчетов, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьДанныеКурсовыеРазницы(ТаблицаРеквизиты, ТаблицаВзаиморасчетов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаДоОктября2011 = Параметры.ТаблицаВзаиморасчетов.СкопироватьКолонки();
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаВзаиморасчетов Цикл
		Если СтрокаТаблицы.ДатаДокументаРасчетов >= '20111001' Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаДоОктября2011.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	Если ТаблицаДоОктября2011.Количество() = 0 Тогда
		// По документам отгрузки с датой, начиная с октября 2011, налоговая база по НДС 
		// при подтверждении реализации со ставкой 0% определяется по курсу на дату реализации,
		// корректировки налоговой базы при последующей оплате не производятся
		Возврат;
	КонецЕсли;
	
	ТаблицаОстатковПоРеализации0 = ПолучитьДанныеРеализация0(Реквизиты, ТаблицаДоОктября2011);

	Если ТаблицаОстатковПоРеализации0.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СформироватьДвиженияНДСРеализация0КурсовыеРазницы(Реквизиты, ТаблицаДоОктября2011, ТаблицаОстатковПоРеализации0, Движения);

КонецПроцедуры

Функция ПодготовитьДанныеКурсовыеРазницы(ТаблицаРеквизиты, ТаблицаВзаиморасчетов)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация";              // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы взаиморасчетов:
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"
	+ "ДокументРасчетов,"
	+ "ДатаДокументаРасчетов,"
	+ "СтавкаНДС,"
	+ "ОстатокВзаиморасчетов,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаБУ,";

	Параметры.Вставить("ТаблицаВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПолучитьДанныеРеализация0(ТаблицаРеквизиты, ТаблицаВзаиморасчетов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", 		 ТаблицаРеквизиты.Период);
	Запрос.УстановитьПараметр("Покупатели",  ТаблицаВзаиморасчетов.ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("СчетФактуры", ТаблицаВзаиморасчетов.ВыгрузитьКолонку("ДокументРасчетов"));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСРеализация0Остатки.Организация,
	|	НДСРеализация0Остатки.СчетФактура,
	|	НДСРеализация0Остатки.ВидЦенности,
	|	НДСРеализация0Остатки.СтавкаНДС,
	|	НДСРеализация0Остатки.Состояние,
	|	НДСРеализация0Остатки.Покупатель КАК Покупатель,
	|	НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(
	|			&Дата,
	|			Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)
	|				И Покупатель В (&Покупатели)
	|				И СчетФактура В (&СчетФактуры)) КАК НДСРеализация0Остатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Покупатель";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Процедуры формирования движений по суммовым разницам
//
Процедура СформироватьДвиженияСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаСуммовыеРазницы) Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	СформироватьПроводкиСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ);
	
	Если ВерсияУчетаНДС = 1 Тогда
		Если УпрощенныйУчетНДС Тогда
			СформироватьДвиженияНДСЗаписиКнигиПродажСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ);
		Иначе
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ);
		КонецЕсли;
	Иначе
		СформироватьДвиженияНДСЗаписиКнигиПродажСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицуСуммовыхРазниц(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	ТаблицаСуммовыхРазниц = ТаблицаВзаиморасчеты.СкопироватьКолонки(
		"СчетРасчетов, ВалютаВзаиморасчетов, Подразделение, Контрагент, ДоговорКонтрагента, ДокументРасчетов, СтавкаНДС, Разница");
	ТаблицаСуммовыхРазниц.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммовыхРазниц.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));

	Если НЕ ОтражатьВНалоговомУчете
	 Или Не ЗначениеЗаполнено(ТаблицаВзаиморасчеты) Тогда

		Возврат ТаблицаСуммовыхРазниц;

	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыСуммовыхРазниц(ТаблицаВзаиморасчеты, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	// Отберем строки, в которых есть с суммовые разницы.
	Счет76_37_1 = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ;

	Для Каждого СтрокаВзаиморасчетов Из Параметры.Взаиморасчеты Цикл

		Если СтрокаВзаиморасчетов.РасчетыВУсловныхЕдиницах = Истина
			И СтрокаВзаиморасчетов.Разница <> 0
			И СтрокаВзаиморасчетов.СчетРасчетов <> Счет76_37_1 Тогда
			
			СтрокаТаблицыСуммовыхРазниц = ТаблицаСуммовыхРазниц.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыСуммовыхРазниц, СтрокаВзаиморасчетов);
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыСуммовыхРазниц.СтавкаНДС) Тогда
				СтрокаТаблицыСуммовыхРазниц.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Реквизиты.Период);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаСуммовыхРазниц.Количество() = 0 Тогда
		Возврат ТаблицаСуммовыхРазниц;
	КонецЕсли;
	
	ТаблицаСуммовыхРазниц.Свернуть(
		"ВалютаВзаиморасчетов, Подразделение, Контрагент, ДоговорКонтрагента, 
		|ДокументРасчетов, ДатаДокументаРасчетов, СчетРасчетов, СтавкаНДС",
		"Разница");
	
	ТаблицаСуммовыхРазниц.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	КорректировкаРегистровНДСПоСуммовымРазницам(ТаблицаРеквизиты, ТаблицаСуммовыхРазниц);

	Возврат ТаблицаСуммовыхРазниц;

КонецФункции

Функция ПодготовитьПараметрыТаблицыСуммовыхРазниц(ТаблицаВзаиморасчеты, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"		          // <Дата>
	+ "Регистратор,"	      // <ДокументСсылка>
	+ "Организация,"          // <СправочникСсылка.Организации>
	+ "НаправлениеДвижения,"
	+ "РасчетыПоРеализации";  // <Булево>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "СчетРасчетов,"             // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов,"     // <СправочникСсылка.Валюты>
	+ "РасчетыВУсловныхЕдиницах," // <Булево>
	+ "Подразделение,"            // <Ссылка на справочник подразделений>
	+ "Контрагент,"               // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"       // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДатаДокументаРасчетов,"    // <Дата>
	+ "ДокументРасчетов,"         // <ДокументСсылка>
	+ "СтавкаНДС,"                // <ПеречислениеСсылка.СтавкиНДС>
	+ "Разница";                  // <Число,15,2>

	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура КорректировкаРегистровНДСПоСуммовымРазницам(ТаблицаРеквизиты, ИсходнаяТаблицаСуммовыхРазниц)

	Реквизиты = ТаблицаРеквизиты[0];

	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ВерсияУчетаНДС = 1 
		И УпрощенныйУчетНДС Тогда
		// Движения по этому документу делать не нужно
		// Нужно добавить информацию о НДС в таблицу суммовых разниц
		Для каждого СтрокаТаблицы Из ИсходнаяТаблицаСуммовыхРазниц Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
				СтрокаТаблицы.СтавкаНДС = УчетНДСКлиентСервер.РасчетнаяСтавкаНДСПоУмолчанию(Реквизиты.Период);
			КонецЕсли;
			ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
			СтрокаТаблицы.НДС = Окр(СтрокаТаблицы.Разница * ПроцентНДС / (100 + ПроцентНДС), 2);

		КонецЦикла;

		Возврат;

	КонецЕсли;

	НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Реквизиты.Организация, Реквизиты.Период);
	ТаблицаСуммовыхРазниц  = ИсходнаяТаблицаСуммовыхРазниц.Скопировать();

	Для каждого СтрокаТаблицы Из ТаблицаСуммовыхРазниц Цикл

		Если НачислятьНДСПоОтгрузке
			И ТипЗнч(СтрокаТаблицы.ДокументРасчетов) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			СтрокаТаблицы.ДокументРасчетов = СтрокаТаблицы.ДокументРасчетов.ДокументОтгрузки;
		КонецЕсли;
		
	КонецЦикла;

	// Формируем дерево счетов-фактур по которым нужно отразить суммовые разницы
    РеестрСчетовФактур = УчетНДСПереопределяемый.ПолучитьДанныеПоКорректируемымСчетамФактурам(ТаблицаРеквизиты, ТаблицаСуммовыхРазниц);

	Если РеестрСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Отразить распределение в таблице суммовых разниц
	РеестрСчетовФактур.Колонки.Добавить("Разница", 	 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_БезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_НДС", 	 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	РеестрСчетовФактур.ЗагрузитьКолонку(РеестрСчетовФактур.ВыгрузитьКолонку("Базис_СНДС"), "Разница");

	Распределение = Новый Структура("Разница", "Разница");
	Отбор         = Новый Структура("СчетФактура", "ДокументРасчетов");

	РеестрСчетовФактур = СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц, РеестрСчетовФактур, Распределение, Отбор);

	СтрокиКУдалению = Новый Массив();

	// Разделим суммовую разницу на сумму без НДС и сумму с НДС
	Для каждого СтрокаРеестра Из РеестрСчетовФактур Цикл
		Если СтрокаРеестра.Разница = 0 ИЛИ СтрокаРеестра.Базис_СНДС = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			Продолжить;
		Иначе
			Если СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
				СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120;
			ИначеЕсли СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
				СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
			ИначеЕсли СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
				СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110;
			ИначеЕсли СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				// Отражение суммовой разницы в данном режиме по ставке НДС 0% не предусмотрено
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрокаРеестра.СР_НДС 	= Окр(СтрокаРеестра.Разница * УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРеестра.СтавкаНДС) / (100 + УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРеестра.СтавкаНДС)), 2);
		СтрокаРеестра.СР_БезНДС = СтрокаРеестра.Разница - СтрокаРеестра.СР_НДС;
	КонецЦикла;

	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	Если СтрокиКУдалению.Количество() > 0 Тогда
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РеестрСчетовФактур.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;

	Если РеестрСчетовФактур.Количество() = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	РеестрСчетовФактур.Колонки.СР_БезНДС.Имя = "СуммаБезНДС";
	РеестрСчетовФактур.Колонки.СР_НДС.Имя = "НДС";
	
	// Скопировать сумму НДС в исходную таблицу суммовых разниц
	РеестрСчетовФактур.Свернуть("СчетФактура, Покупатель", "НДС");
	СтруктураОтбора = Новый Структура("ДокументРасчетов, Контрагент");
	Для Каждого СтрокаТаблицы Из РеестрСчетовФактур Цикл
		
		СтруктураОтбора.ДокументРасчетов = СтрокаТаблицы.СчетФактура;
		СтруктураОтбора.Контрагент 		 = СтрокаТаблицы.Покупатель;
		
		НайденныеСтроки = ИсходнаяТаблицаСуммовыхРазниц.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			НайденныеСтроки[0].НДС = СтрокаТаблицы.НДС;
		КонецЕсли;
		
	КонецЦикла;
           
КонецПроцедуры

//Процедура для распределения записей Из одной таблицы значений по базису (таблица значений или  набору записей)
//Источник 		: ТаблицаЗначений
//Базис 		: ТаблицаЗначений или НаборЗаписей
//Распределение : ключ - поля базиса, значение - поля источника
//Фильтр 		: ключ - поля базиса, значение - поля источника (если не указан - по совпадающим колонкам)
//Игнорировать  : ключ - поля базиса, значение - поля источника
//Дополнить		: ключ - имя нового поля базиса, значение - значение для заполнения
Функция СформироватьКорректирующиеЗаписи(Источник, Базис, Распределение, Фильтр=Неопределено, Игнорировать=Неопределено, Дополнить=Неопределено, НераспределенныеЗаписи_AsIs = Ложь) Экспорт

	Если ТипЗнч(Базис) = Тип("ТаблицаЗначений") Тогда
		Временный_Базис	= Базис.Скопировать();
	Иначе
		Временный_Базис	= Базис.Выгрузить();
	Конецесли;

	КолонкиИсточника = Новый Структура();
	Для каждого Колонка Из источник.Колонки Цикл
		КолонкиИсточника.Вставить(Колонка.Имя);
	КонецЦикла;
	КолонкиБазиса = Новый Структура();
	Для каждого Колонка Из Временный_Базис.Колонки Цикл
		Если НЕ(НЕ ЗначениеЗаполнено(Колонка.Имя)) Тогда
			КолонкиБазиса.Вставить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;

	Если НЕ ЗначениеЗаполнено(Игнорировать) Тогда
		 Игнорировать = новый Структура();
	Иначе
		//Зачистим колонки источника и базиса на игнорируемые колонки
		Для Каждого Колонка Из Игнорировать Цикл
			Если КолонкиИсточника.Свойство(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)) Тогда
				 КолонкиИсточника.Удалить(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение));
			Конецесли;
			Если КолонкиБазиса.Свойство(Колонка.Ключ) Тогда
				 КолонкиБазиса.Удалить(Колонка.Ключ);
			Конецесли;
		КонецЦикла;
 	КонецЕсли;

	//Зачистим колонки источника на распределяемые колонки. Они учитываются отдельно.
	Для Каждого Колонка Из Распределение Цикл
		Если КолонкиИсточника.Свойство(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)) Тогда
			 КолонкиИсточника.Удалить(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение));
		Иначе
			 Если Источник.Колонки.Найти(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение))=Неопределено Тогда
				 //Не хватает колонок к распределению
				 //Но одну и ту же колонку можно распределить дважды
				 Возврат ложь;
			 КонецЕсли;
		Конецесли;
		Если КолонкиБазиса.Свойство(Колонка.Ключ) Тогда
			 КолонкиБазиса.Удалить(Колонка.Ключ);
		Иначе
			  //Не хватает колонок базиса распределения
			 Возврат ложь;
		Конецесли;
	КонецЦикла;

	Если ЗначениеЗаполнено(Дополнить) Тогда
		//Проверим на отсутствие дополняемых колонок!
		Для Каждого Колонка Из Дополнить Цикл
			Если КолонкиБазиса.Свойство(Колонка.Ключ) Тогда
				//Такая колонка уже есть, нельзя добавить новую
				Возврат Ложь;
			Конецесли;
		КонецЦикла;
 	КонецЕсли;

	//Если фильтр не задан - по всем совпадающим колонкам
	Если Фильтр=Неопределено Тогда
		Фильтр = Новый Структура();
		Для каждого Колонка Из КолонкиБазиса Цикл
			Если КолонкиИсточника.Свойство(Колонка.Ключ)  и не(Игнорировать.Свойство(Колонка.Ключ)) Тогда
				Фильтр.Вставить(Колонка.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Фильтр) Тогда
		//Должно быть хоть одно объединяющее поле!
		Возврат Ложь;
	КонецЕсли;

	Для Каждого Колонка Из Фильтр Цикл
		Если не КолонкиБазиса.Свойство(Колонка.Ключ) Тогда
			  //Не хватает колонок базиса распределения
			 Возврат ложь;
		Конецесли;
	КонецЦикла;


	//Подготовить сворачивание для источника
	СтрокаСверткиИсточник = ВыгрузитьСтруктуруВСтроку(Фильтр,Истина,КолонкиИсточника);
	Если СтрокаСверткиИсточник = ложь Тогда
		//попытка фильтровать по полю, отсутствующему в источнике!
		Возврат ложь;
	КонецЕсли;
	КолонкиКРаспределениюИсточник = ВыгрузитьСтруктуруВСтроку(Распределение,Истина);
	Если КолонкиКРаспределениюИсточник = ложь Тогда
		//попытка распределить поле, отсутствующее в источнике!
		Возврат ложь;
	КонецЕсли;

	//Подготовить сворачивание для базиса
	СтрокаСверткиБазис = ВыгрузитьСтруктуруВСтроку(КолонкиБазиса,Ложь);
	Если СтрокаСверткиБазис = ложь Тогда
		//попытка фильтровать по полю, отсутствующему в базисе!
		Возврат ложь;
	КонецЕсли;
	КолонкиКРаспределениюБазис = ВыгрузитьСтруктуруВСтроку(Распределение,Ложь);
	Если КолонкиКРаспределениюБазис = ложь Тогда
		//попытка распределить поле, отсутствующее в базисе!
		Возврат ложь;
	КонецЕсли;

	Временный_Источник = Источник.Скопировать();

	Временный_Базис.Свернуть(СтрокаСверткиБазис,КолонкиКРаспределениюБазис);
	Временный_Источник.Свернуть(СтрокаСверткиИсточник,КолонкиКРаспределениюИсточник);

	НоваяТаблица = новый ТаблицаЗначений();
	Для каждого Колонка Из Временный_Базис.Колонки Цикл
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Разрядность = Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность;
			РазрядностьДробнойЧасти = Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);

			ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения,,,КвалификаторЧисла);
		Иначе
			ТипЗначения = Колонка.ТипЗначения;
		КонецЕсли;

		НоваяТаблица.Колонки.Добавить(Колонка.Имя, ТипЗначения,,10);
	КонецЦикла;

	ТаблицаБазисовРаспределения = Новый ТаблицаЗначений();
	Для каждого Колонка Из Распределение Цикл
		ТаблицаБазисовРаспределения.Колонки.Добавить(Колонка.Ключ);
	КонецЦикла;

	Для каждого СтрокаИсточника Из Временный_Источник Цикл
		Отбор = новый структура();
		Для каждого Колонка Из Фильтр Цикл
			Отбор.Вставить(Колонка.Ключ,СтрокаИсточника[?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)]);
		КонецЦикла;
		СтрокиБазиса = Временный_Базис.НайтиСтроки(Отбор);
		Временный_Базис_СтрокаНераспределеннойЗаписи = Неопределено;
		Если СтрокиБазиса.Количество() = 0 и НераспределенныеЗаписи_AsIs Тогда
			Временный_Базис_СтрокаНераспределеннойЗаписи = Временный_Базис.Добавить();
			ЗаполнитьЗначенияСвойств(Временный_Базис_СтрокаНераспределеннойЗаписи, СтрокаИсточника);
			СтрокиБазиса.Добавить(Временный_Базис_СтрокаНераспределеннойЗаписи);
		КонецЕсли;

		ТаблицаБазисовРаспределения.Очистить();
		Для каждого Строка Из СтрокиБазиса Цикл
			СтрокаТБР = ТаблицаБазисовРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТБР, Строка);
		КонецЦикла;
		Для каждого Колонка Из Распределение Цикл
			РаспределяемаяСумма =  СтрокаИсточника[?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)];
			МассивДляРаспределения = ТаблицаБазисовРаспределения.ВыгрузитьКолонку(Колонка.Ключ);
			РазрядностьДробнойЧасти = Временный_Источник.Колонки[?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)].ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			МассивРезультата = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(РаспределяемаяСумма, МассивДляРаспределения,?(РазрядностьДробнойЧасти = 0, 3, РазрядностьДробнойЧасти));
			Если МассивРезультата = Неопределено Тогда
				ТаблицаБазисовРаспределения.ЗаполнитьЗначения(0,Колонка.Ключ);
			Иначе
				ТаблицаБазисовРаспределения.ЗагрузитьКолонку(МассивРезультата,Колонка.Ключ);
			КонецЕсли;
		КонецЦикла;

		СтрокаРезультата = 0;
		Для каждого Строка Из СтрокиБазиса Цикл
			СтрокаНовая = НоваяТаблица.Добавить();
			СрокаРезультатаРаспределения = ТаблицаБазисовРаспределения[СтрокаРезультата];
			СтрокаРезультата = СтрокаРезультата +1;
			Для каждого Колонка Из Временный_Базис.Колонки Цикл
				Если Распределение.Свойство(Колонка.Имя) Тогда
					СтрокаНовая[Колонка.Имя] = СрокаРезультатаРаспределения[Колонка.Имя];
				Иначе
					СтрокаНовая[Колонка.Имя] = Строка[Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		Если не Временный_Базис_СтрокаНераспределеннойЗаписи = Неопределено Тогда
		    Временный_Базис.удалить(Временный_Базис_СтрокаНераспределеннойЗаписи);
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(Дополнить) Тогда
		Для каждого Колонка Из Дополнить Цикл
			НоваяТаблица.Колонки.Добавить(Колонка.Ключ,,,10);
			НоваяТаблица.ЗаполнитьЗначения(Колонка.Значение,Колонка.Ключ);
		КонецЦикла;
	КонецЕсли;

	СтрокиС0Распределением = Новый Массив();

	Для каждого Строка Из НоваяТаблица Цикл
		СуммаРаспределений0=Истина;
		Для каждого Колонка Из распределение Цикл
			Если ЗначениеЗаполнено(Строка[Колонка.Ключ]) Тогда
				СуммаРаспределений0=Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СуммаРаспределений0 Тогда
			СтрокиС0Распределением.Добавить(Строка);
		Конецесли;
	КонецЦикла;

	Для каждого ПустаяСтрока Из СтрокиС0Распределением Цикл
		НоваяТаблица.Удалить(ПустаяСтрока);
	КонецЦикла;

	Возврат НоваяТаблица;

КонецФункции

Функция ВыгрузитьСтруктуруВСтроку(Структура,ПоЗначениям = Ложь,СтруктураПроверки = Неопределено)

	НеПроверять = (СтруктураПроверки = Неопределено);
	НоваяСтрока = "";

	Для каждого Колонка Из Структура Цикл

		Если НеПроверять Тогда
			НоваяСтрока = НоваяСтрока + ?(НЕ ЗначениеЗаполнено(Колонка.Значение)или не ПоЗначениям,Колонка.Ключ,Колонка.Значение)+",";

		ИначеЕсли СтруктураПроверки.Свойство(?(НЕ ЗначениеЗаполнено(Колонка.Значение) или не ПоЗначениям,Колонка.Ключ,Колонка.Значение)) Тогда
			НоваяСтрока = НоваяСтрока + ?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)+",";

		Иначе
			//Нет в проверке!
			Возврат Ложь;

		КонецЕсли;

	КонецЦикла;

	Если ЗначениеЗаполнено(НоваяСтрока) Тогда
		НоваяСтрока = Лев(НоваяСтрока,СтрДлина(НоваяСтрока)-1);
	КонецЕсли;

	Возврат НоваяСтрока;

КонецФункции // ВыгрузитьСтруктуруВСтроку


// НАЛОГОВЫЙ АГЕНТ

Процедура СформироватьДвиженияВыписанСчетФактураНалоговогоАгента(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаАвансов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];

	Если НЕ Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыВыписанСчетФактураНалоговогоАгента(ТаблицаРеквизиты, ТаблицаАвансов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	СформироватьПроводкиНачисленНДСНалоговымАгентом(Реквизиты, Параметры.Авансы, Движения, Отказ);
	
	Если ВерсияУчетаНДС = 1 Тогда
		Если УпрощенныйУчетНДС Тогда
			СформироватьДвиженияНДСЗаписиКнигиПродажНачисленНДСНалоговымАгентом(
				Реквизиты, Параметры.Авансы, Движения, Отказ);
		Иначе
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйНачисленНДСНалоговымАгентом(
				Реквизиты, Параметры.Авансы, Движения, Отказ);
		КонецЕсли;
	Иначе
		СформироватьДвиженияНДСЗаписиКнигиПродажНачисленНДСНалоговымАгентом(
			Реквизиты, Параметры.Авансы, Движения, Отказ);
		Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Реквизиты.Период) >= 3
			И Движения.НДСЗаписиКнигиПродаж.Количество() > 0
			И НЕ Реквизиты.Исправление Тогда
			СформироватьДвиженияНДСНомераДокументовОплатыПоТекущимДвижениям(Реквизиты, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВыписанСчетФактураНалоговогоАгента(ТаблицаРеквизиты, ТаблицаАвансов)

	Параметры = Новый Структура();

	СписокОбязательныхКолонок = ""
	+ "Организация,"
	+ "Период,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ВидСчетаФактуры,"
	+ "Исправление,"
	+ "НомерПлатежноРасчетногоДокумента,"
	+ "ДатаПлатежноРасчетногоДокумента,"
	+ "ДокументОснование";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "ИсправленныйСчетФактура,"
	+ "ЗаписьДополнительногоЛиста,"		// <Булево> - Запись дополнительного листа
	+ "КорректируемыйПериод,"			// <Дата> - Корректируемый период
	+ "СторнирующаяЗаписьДопЛиста,"		// <Булево> - Сторнирующая запись доп. листа
	+ "ДатаОплаты,"
	+ "ВидЦенности,"
	+ "СтавкаНДС,"
	+ "СуммаНДС,"
	+ "СуммаБезНДС";

	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЛОГОВЫЙ АГЕНТ КУРСОВЫЕ РАЗНИЦЫ

Процедура СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(ТаблицаРеквизитов, ТаблицаВзаиморасчетов, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизитов[0];
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	Если УпрощенныйУчетНДС ИЛИ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКурсовыеРазницыНалоговыйАгент(ТаблицаРеквизитов, ТаблицаВзаиморасчетов);
	Реквизиты = Параметры.Реквизиты[0];

	РеестрСчетовФактур = ПодготовитьТаблицуКурсовыеРазницыНалоговыйАгент(Реквизиты, Параметры.ТаблицаВзаиморасчетов);
	Если РеестрСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РеестрСчетовФактур.Колонки.СР_НДС.Имя 	 = "НДС";
	РеестрСчетовФактур.Колонки.СР_БезНДС.Имя = "СуммаБезНДС";

	РеестрСчетовФактур.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	РеестрСчетовФактур.ЗаполнитьЗначения(Реквизиты.Период, "ДатаСобытия");

	СтруктураТаблицДляДвижений = УчетНДСПереопределяемый.ПодготовитьТаблицыПоВидамРегистровНДС(РеестрСчетовФактур, Реквизиты);

	// Проводки
	СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгентНерезидент(РеестрСчетовФактур, Движения, Отказ);

	// НДС предъявленный
	СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(РеестрСчетовФактур, Движения, Отказ);

	// НДС по косвенным расходам
	УчетНДСПереопределяемый.СформироватьДвиженияНДСКосвенныеРасходы(СтруктураТаблицДляДвижений.КосвенныеРасходы, Движения, Отказ);

	// НДС по приобретенным ценностям
	УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностям(СтруктураТаблицДляДвижений.Партии, Движения, Отказ);

	// НДС реализация 0%
	СформироватьДвиженияНДСПредъявленныйРеализация0(СтруктураТаблицДляДвижений.НДСПредъявленныйРеализация0, Реквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыКурсовыеРазницыНалоговыйАгент(ТаблицаРеквизиты, ТаблицаВзаиморасчетов)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация";              // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы взаиморасчетов:
	СписокОбязательныхКолонок = ""

	+ "ВалютаВзаиморасчетов,"
	+ "ДокументРасчетов,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "СуммаБУ,"
	+ "СуммаВзаиморасчетов";

	Параметры.Вставить("ТаблицаВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуКурсовыеРазницыНалоговыйАгент(Реквизиты, ТаблицаВзаиморасчетов)

	// Отбираем взаиморасчеты по договору с исполнением обязанностей налогового агента
	ТаблицаВзаиморасчетовНалоговыйАгент = ПолучитьТаблицуВзаиморасчетовНалоговыйАгент(Реквизиты, ТаблицаВзаиморасчетов);

	Если ТаблицаВзаиморасчетовНалоговыйАгент.Количество() = 0 Тогда
		Возврат ТаблицаВзаиморасчетовНалоговыйАгент;
	КонецЕсли;

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	РеестрСчетовФактур = УчетНДСПереопределяемый.ПолучитьДанныеПоКорректируемымСчетамФактурамНалоговыйАгент(Реквизиты, ТаблицаВзаиморасчетовНалоговыйАгент);

	Если РеестрСчетовФактур.Количество() = 0 Тогда
		Возврат РеестрСчетовФактур;
	КонецЕсли;

	РеестрСчетовФактур.Колонки.Добавить("Период", 	  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	РеестрСчетовФактур.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	РеестрСчетовФактур.ЗаполнитьЗначения(Реквизиты.Период, "Период");

	// Вычисляем суммовую разницу
	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетовНалоговыйАгент Цикл
		
		СчетФактура = СтрокаВзаиморасчетов.СчетФактура;
		МетаданныеСчетаФактуры = СчетФактура.Метаданные();
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсВзаиморасчетов", МетаданныеСчетаФактуры)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьВзаиморасчетов", МетаданныеСчетаФактуры) Тогда
			
			КурсПоДокументу = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура, "КурсВзаиморасчетов, КратностьВзаиморасчетов");
			СуммаБУПоКурсуПоступления = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаВзаиморасчетов.СуммаВзаиморасчетов,
				СтрокаВзаиморасчетов.ВалютаВзаиморасчетов,
				ВалютаРегламентированногоУчета,
				КурсПоДокументу.КурсВзаиморасчетов, 1,
				КурсПоДокументу.КратностьВзаиморасчетов, 1);
				
		Иначе
			КурсНаДатуПоступления = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				СтрокаВзаиморасчетов.ВалютаВзаиморасчетов, СтрокаВзаиморасчетов.СчетФактура.Дата);
			СуммаБУПоКурсуПоступления = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаВзаиморасчетов.СуммаВзаиморасчетов,
				СтрокаВзаиморасчетов.ВалютаВзаиморасчетов,
				ВалютаРегламентированногоУчета,
				КурсНаДатуПоступления.Курс, 1,
				КурсНаДатуПоступления.Кратность, 1);
		КонецЕсли;
		
		СтрокаВзаиморасчетов.СуммоваяРазница = СтрокаВзаиморасчетов.СуммаБУ - СуммаБУПоКурсуПоступления;

		НайденныеСтроки = РеестрСчетовФактур.НайтиСтроки(Новый Структура("СчетФактура", СтрокаВзаиморасчетов.СчетФактура));
		Для каждого СтрокаРеестра Из НайденныеСтроки Цикл
			СтрокаРеестра.ДоговорКонтрагента = СтрокаВзаиморасчетов.ДоговорКонтрагента;
			СтрокаРеестра.Содержание = "Корректировка НДС по договору " + СтрокаВзаиморасчетов.ДоговорКонтрагента;
		КонецЦикла;

	КонецЦикла;

	ТаблицаВзаиморасчетовНалоговыйАгент.Свернуть("СчетФактура", "СуммоваяРазница");

	РеестрСчетовФактур.Колонки.Добавить("СуммоваяРазница", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_БезНДС", 	   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_НДС", 		   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	РеестрСчетовФактур.ЗагрузитьКолонку(РеестрСчетовФактур.ВыгрузитьКолонку("Базис_БезНДС"), "СуммоваяРазница");

	Распределение = Новый Структура("СуммоваяРазница", "СуммоваяРазница");
	Отбор         = Новый Структура("СчетФактура", "СчетФактура");

	РеестрСчетовФактур = СформироватьКорректирующиеЗаписи(ТаблицаВзаиморасчетовНалоговыйАгент, РеестрСчетовФактур, Распределение, Отбор);

	СтрокиКУдалению = Новый Массив();

	// Разделим суммовую разницу на сумму без НДС и сумму с НДС
	Для каждого СтрокаРеестра Из РеестрСчетовФактур Цикл

		Если СтрокаРеестра.СуммоваяРазница = 0 ИЛИ СтрокаРеестра.Базис_СНДС = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			Продолжить;
		КонецЕсли;

		СтрокаРеестра.СР_БезНДС = СтрокаРеестра.СуммоваяРазница;
		СтрокаРеестра.СР_НДС 	= УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаРеестра.СР_БезНДС, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРеестра.СтавкаНДС));

	КонецЦикла;

	Если СтрокиКУдалению.Количество() > 0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РеестрСчетовФактур.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;

	Возврат РеестрСчетовФактур;

КонецФункции

Функция ПолучитьТаблицуВзаиморасчетовНалоговыйАгент(Реквизиты, ТаблицаВзаиморасчетов) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивВидовДоговоровСНерезидентом",
		Перечисления.ВидыАгентскихДоговоров.МассивВидовДоговоровСНерезидентом());
	Запрос.Текст =

	"ВЫБРАТЬ
	|	Взаиморасчеты.ВалютаВзаиморасчетов,
	|	Взаиморасчеты.ДокументРасчетов КАК ДокументРасчетов,
	|	Взаиморасчеты.Контрагент,
	|	Взаиморасчеты.ДоговорКонтрагента,
	|	Взаиморасчеты.СуммаБУ КАК СуммаБУ,
	|	Взаиморасчеты.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТВзаиморасчеты
	|ИЗ
	|	&Взаиморасчеты КАК Взаиморасчеты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.ВалютаВзаиморасчетов,
	|	Взаиморасчеты.ДокументРасчетов КАК СчетФактура,
	|	Взаиморасчеты.Контрагент,
	|	Взаиморасчеты.ДоговорКонтрагента,
	|	СУММА(Взаиморасчеты.СуммаБУ) КАК СуммаБУ,
	|	СУММА(Взаиморасчеты.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	0 КАК СуммоваяРазница,
	|	Взаиморасчеты.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС
	|ИЗ
	|	ВТВзаиморасчеты КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.ДоговорКонтрагента.УчетАгентскогоНДС
	|	И Взаиморасчеты.ВалютаВзаиморасчетов <> &ВалютаРеглУчета
	|	И Взаиморасчеты.ДокументРасчетов <> &Регистратор
	|	И Взаиморасчеты.ДоговорКонтрагента.ВидАгентскогоДоговора В (&МассивВидовДоговоровСНерезидентом)
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.ВалютаВзаиморасчетов,
	|	Взаиморасчеты.ДокументРасчетов,
	|	Взаиморасчеты.Контрагент,
	|	Взаиморасчеты.ДоговорКонтрагента,
	|	Взаиморасчеты.ДоговорКонтрагента.УчетАгентскогоНДС
	|";

	// Заменим обращение к реквизитам договора через переопределяемые функции.
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"Взаиморасчеты.ДоговорКонтрагента.УчетАгентскогоНДС",
								БухгалтерскийУчетПереопределяемый.ТекстЗапросаУчетАгентскогоНДС("Взаиморасчеты.ДоговорКонтрагента"));
								
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"Взаиморасчеты.ДоговорКонтрагента.ВидАгентскогоДоговора",
								БухгалтерскийУчетПереопределяемый.ТекстЗапросаВидАгентскогоДоговора("Взаиморасчеты.ДоговорКонтрагента"));								

	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Взаиморасчеты", ТаблицаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// ВОССТАНОВЛЕНИЕ НДС

Процедура СформироватьДвиженияВосстановлениеНДС(ТаблицаРеквизиты, ТаблицаСоставДокумента, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВосстановлениеНДС(ТаблицаРеквизиты, ТаблицаСоставДокумента);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.ОтразитьВКнигеПродаж Тогда 
		СформироватьДвиженияКнигиПродажВосстановлениеНДС(Реквизиты,  Параметры.ТаблицаСоставДокумента, Движения, Отказ);
	Иначе
		СформироватьДвиженияКнигиПокупокВосстановлениеНДС(Реквизиты,  Параметры.ТаблицаСоставДокумента, Движения, Отказ);
	КонецЕсли;
	
	Если НЕ Реквизиты.УпрощенныйУчетНДС И НЕ Реквизиты.СписатьНДС Тогда
		// НДС Предъявленный
		СформироватьДвиженияНДСПредъявленныйВосстановлениеНДС(Реквизиты,  Параметры.ТаблицаСоставДокумента, Движения, Отказ);
	КонецЕсли;
	
	СформироватьДвиженияХозрасчетныйВосстановлениеНДС(Реквизиты,  Параметры.ТаблицаСоставДокумента, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыВосстановлениеНДС(ТаблицаРеквизиты, ТаблицаСоставДокумента)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"
	+ "Организация,"
	+ "Регистратор,"
	+ "УпрощенныйУчетНДС,"
	+ "ОтразитьВКнигеПродаж,"
	+ "СписатьНДС";

	Параметры.Вставить("Реквизиты", ТаблицаРеквизиты.Скопировать(, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "Период,"
	+ "Организация,"
	+ "Регистратор,"
	+ "Покупатель,"
	+ "НетДанныхОСчетеФактуре,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "ИсправленныйСчетФактура,"
	+ "СчетФактура,"			// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Поставщик,"				// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"		// <СправочникСсылка.ДоговорыКонтрагентов> договор контрагента (для списания НДС по налоговому агенту)
	+ "НДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"			// <Число> - сумма без НДС по определенной ставке НДС;
	+ "ВидЦенности,"
	+ "КодВидаОперации,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДС,"
	+ "ДокументОплаты,"
	+ "ДатаОплаты,"
	+ "НомерДокументаОплаты,"
	+ "ДатаДокументаОплаты,"
	+ "ДатаСобытия";

	Параметры.Вставить("ТаблицаСоставДокумента", ТаблицаСоставДокумента.Скопировать(, ОбязательныеКолонки));

	Параметры.ТаблицаСоставДокумента.Колонки.Добавить("СпособУчетаНДС", 
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	Параметры.ТаблицаСоставДокумента.ЗаполнитьЗначения(
		Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету, "СпособУчетаНДС");
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияКнигиПродажВосстановлениеНДС(Реквизиты, ТаблицаДвижений, Движения, Отказ)
	
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Движение.Событие = Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС;
		Если СтрокаТаблицы.НетДанныхОСчетеФактуре Тогда
			Движение.СчетФактура = Реквизиты.Регистратор;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияКнигиПокупокВосстановлениеНДС(Реквизиты, ТаблицаДвижений, Движения, Отказ)
	
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Движение.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету; 
		Движение.НДС         = Движение.НДС * (-1);
		Движение.СуммаБезНДС = Движение.СуммаБезНДС * (-1);
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйВосстановлениеНДС(Реквизиты, ТаблицаДвижений, Движения, Отказ)
	
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если СтрокаТаблицы.НетДанныхОСчетеФактуре Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.НДСПредъявленный.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Движение.Событие     = Перечисления.СобытияПоНДСПокупки.ВосстановленНДС; 
		Движение.НДС         = Движение.НДС * (-1);
		Движение.СуммаБезНДС = Движение.СуммаБезНДС * (-1);
		
	КонецЦикла;
	
	Движения.НДСПредъявленный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияХозрасчетныйВосстановлениеНДС(Реквизиты, ТаблицаДвижений, Движения, Отказ)
	
	Для каждого СтрокаПроведения Из ТаблицаДвижений Цикл
		
		Если СтрокаПроведения.НДС <> 0 Тогда
			
			Движение = Движения.Хозрасчетный.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаПроведения);
			Движение.Содержание = "Восстановлен НДС";
			
			Движение.СчетДт = СтрокаПроведения.СчетУчетаНДС; // 19.XX
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 
				"Контрагенты", СтрокаПроведения.Поставщик);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 
				"СФПолученные", ?(СтрокаПроведения.НетДанныхОСчетеФактуре, Реквизиты.Регистратор, СтрокаПроведения.СчетФактура));
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 
				"СпособыУчетаНДС", СтрокаПроведения.СпособУчетаНДС);
				
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС;  // 68.02
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 
				"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			Движение.Сумма = СтрокаПроведения.НДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры


// СПИСАНИЕ НДС

Процедура СформироватьДвиженияСписаниеНДС(ТаблицаРеквизиты, ТаблицаДокумента, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Реквизиты.СписатьНДС Тогда // Для документа "Восстановление НДС" списание НДС - опция.
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписаниеНДС(ТаблицаРеквизиты, ТаблицаДокумента);
	Реквизиты = Параметры.Реквизиты[0];

	Если НЕ Реквизиты.УпрощенныйУчетНДС Тогда
		// Списание остатков из регистра "НДС Предъявленный"
		СформироватьДвиженияНДСПредъявленныйВычетНДС(
			Параметры.ТаблицаСписаниеИзРегистра,
			Движения,
			Истина,
			Истина,
			Отказ);
	КонецЕсли;

	// Проводка Дт СчетСписания Кт 19.х/76.АВ
	СформироватьПроводкиСписаниеНДС(
		Реквизиты,
		Параметры.ТаблицаДокумента,
		Движения,
		Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеНДС(ТаблицаРеквизиты, ТаблицаДокумента)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"
	+ "Организация,"
	+ "Регистратор,"
	+ "СчетСписанияНДС,"
	+ "СубконтоСписанияНДС1,"
	+ "СубконтоСписанияНДС2,"
	+ "СубконтоСписанияНДС3,"
	+ "СписатьНДС,"
	+ "УпрощенныйУчетНДС,"
	+ "ПодразделениеСписания";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "Период,"
	+ "Организация,"
	+ "Регистратор,"
	+ "СчетФактура,"			// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Поставщик,"				// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"		// <СправочникСсылка.ДоговорыКонтрагентов> договор контрагента (для списания НДС по налоговому агенту)
	+ "НДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"			// <Число> - сумма без НДС по определенной ставке НДС;
	+ "ВидЦенности,"
	+ "СписатьНДСИзРегистра,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДС,"
	+ "ДокументОплаты,"
	+ "ДатаОплаты,"
	+ "Событие,"
	+ "ДатаСобытия";

	Параметры.Вставить("ТаблицаДокумента", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДокумента, ОбязательныеКолонки));

	Параметры.ТаблицаДокумента.Индексы.Добавить("СписатьНДСИзРегистра");
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("СписатьНДСИзРегистра", Истина);
	
	Параметры.Вставить("ТаблицаСписаниеИзРегистра", Параметры.ТаблицаДокумента.Скопировать(СтруктураОтбора));
	
	Параметры.ТаблицаДокумента.Колонки.Добавить("СпособУчетаНДС", 
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	Параметры.ТаблицаДокумента.ЗаполнитьЗначения(
		Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету, "СпособУчетаНДС");
		
	Возврат Параметры;

КонецФункции


// ПОДТВЕРЖДЕНИЕ СТАВКИ 0%

Функция ПодготовитьТаблицуНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(ТаблицаРеквизиты, ТаблицаСостав, Движения) Экспорт

	СтруктураТаблиц = Новый Структура("ТаблицаРеализация0,НДСПредъявленныйРеализация0СнятиеБлокировкиВычета");
	
	Если Не ЗначениеЗаполнено(ТаблицаСостав) Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если Не ПлательщикНДС Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(ТаблицаРеквизиты, ТаблицаСостав);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаДокумента = Параметры.Состав;
	ТаблицаДокумента.Свернуть("СчетФактура, ВидЦенности, Событие", "СуммаБезНДС, НДС");
	
	НДСПредъявленныйРеализация0СнятиеБлокировкиВычета = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
	
	СписокСчетовФактур	= ТаблицаДокумента.ВыгрузитьКолонку("СчетФактура");
	СписокВидовЦенности	= ТаблицаДокумента.ВыгрузитьКолонку("ВидЦенности");
	
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокСчетовФактур);
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокВидовЦенности);
	
	// Управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСПредъявленныйРеализация0");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных = ТаблицаДокумента;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОтгрузки", "СчетФактура");
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КонецПериода",						Новый Граница(КонецДня(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",						Реквизиты.Организация);
	Запрос.УстановитьПараметр("СостояниеОжидаетсяПодтверждение",	Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("СписокСчетовФактур",					СписокСчетовФактур);

	Запрос.Текст =
 	"ВЫБРАТЬ
 	|	НДСПредъявленныйРеализация0.СчетФактура КАК СчетФактура,
 	|	НДСПредъявленныйРеализация0.Состояние КАК Состояние,
 	|	НДСПредъявленныйРеализация0.ДокументОтгрузки КАК ДокументОтгрузки,
 	|	НДСПредъявленныйРеализация0.ВидЦенности КАК ВидЦенности,
 	|	НДСПредъявленныйРеализация0.СтавкаНДС КАК СтавкаНДС,
 	|	НДСПредъявленныйРеализация0.СчетУчетаНДС КАК СчетУчетаНДС,
 	|	ЕСТЬNULL(НДСПредъявленныйРеализация0.СуммаБезНДСКонечныйОстаток, 0) КАК ОсталосьСуммаБезНДС,
 	|	ЕСТЬNULL(НДСПредъявленныйРеализация0.НДСКонечныйОстаток, 0) КАК ОсталосьНДС,
 	|	ЕСТЬNULL(НДСПредъявленныйРеализация0.СуммаБезНДСПриход, 0) КАК СуммаБезНДС,
 	|	ЕСТЬNULL(НДСПредъявленныйРеализация0.НДСПриход, 0) КАК НДС,
 	|	НДСПредъявленныйРеализация0.Поставщик КАК Поставщик,
 	|	НДСПредъявленныйРеализация0.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
 	|ИЗ
 	|	РегистрНакопления.НДСПредъявленныйРеализация0.ОстаткиИОбороты(
 	|			,
 	|			&КонецПериода,
 	|			Период,
 	|			,
 	|			Организация = &Организация
 	|				И Состояние = &СостояниеОжидаетсяПодтверждение
 	|				И ДокументОтгрузки В (&СписокСчетовФактур)) КАК НДСПредъявленныйРеализация0";
	
	Результат	= Запрос.Выполнить();
	ТаблицаОжиданияПодтверждения	= Результат.Выгрузить();
	ТаблицаОжиданияПодтверждения.Индексы.Добавить("ДокументОтгрузки");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КонецПериода",						Новый Граница(КонецДня(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",						Реквизиты.Организация);
	Запрос.УстановитьПараметр("СостояниеОжидаетсяПодтверждение",	Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("СписокСчетовФактур",					СписокСчетовФактур);
	Запрос.УстановитьПараметр("СписокВидовЦенности",				СписокВидовЦенности);
	Запрос.УстановитьПараметр("ТаблицаДокумента",					ТаблицаДокумента);
	
	ТекстПостановление1137 =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.СчетФактура,
	|	ТаблицаДокумента.ВидЦенности,
	|	ТаблицаДокумента.Событие,
	|	ТаблицаДокумента.СуммаБезНДС + ТаблицаДокумента.НДС КАК СуммаСНДС
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСРеализация0Обороты.СчетФактура,
	|	НДСРеализация0Обороты.ВидЦенности,
	|	ЕСТЬNULL(НДСРеализация0Обороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСРеализация0Обороты.НДСПриход, 0) КАК СуммаРеализации
	|ПОМЕСТИТЬ ВТНДСРеализация0
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И Состояние = &СостояниеОжидаетсяПодтверждение
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И ВидЦенности В (&СписокВидовЦенности)) КАК НДСРеализация0Обороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.Событие КАК СобытиеПродажи,
	|	ТаблицаДокумента.СуммаСНДС КАК СуммаСНДС,
	|	НДСРеализация0.СуммаРеализации КАК СуммаРеализации
	|ИЗ
	|	ВТТаблицаДокумента КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНДСРеализация0 КАК НДСРеализация0
	|		ПО ТаблицаДокумента.СчетФактура = НДСРеализация0.СчетФактура
	|			И ТаблицаДокумента.ВидЦенности = НДСРеализация0.ВидЦенности
	|ИТОГИ
	|	СУММА(СуммаСНДС),
	|	СУММА(СуммаРеализации)
	|ПО
	|	СобытиеПродажи,
	|	СчетФактура";
	
	ТекстПостановление735 = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.Событие,
	|	ТаблицаДокумента.СуммаБезНДС,
	|	ТаблицаДокумента.СуммаБезНДС + ТаблицаДокумента.НДС КАК СуммаСНДС
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	НДСРеализация0Остатки.ВидЦенности,
	|	ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0) КАК СуммаРеализации,
	|	НДСРеализация0Остатки.Состояние,
	|	НДСРеализация0Остатки.Покупатель,
	|	НДСРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДС
	|ПОМЕСТИТЬ ВТНДСРеализация0
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Состояние = &СостояниеОжидаетсяПодтверждение
	|				И СчетФактура В (&СписокСчетовФактур)) КАК НДСРеализация0Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.Событие КАК СобытиеПродажи,
	|	ТаблицаДокумента.СуммаСНДС КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаБезНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0) КАК СтавкаНДС,
	|	ЕСТЬNULL(НДСРеализация0.СуммаРеализации, 0) КАК СуммаРеализации,
	|	ЕСТЬNULL(НДСРеализация0.ВидЦенности, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка)) КАК ВидЦенности,
	|	ЕСТЬNULL(НДСРеализация0.Состояние, ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПустаяСсылка)) КАК Состояние,
	|	ЕСТЬNULL(НДСРеализация0.Покупатель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Покупатель
	|ИЗ
	|	ВТТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДСРеализация0 КАК НДСРеализация0
	|		ПО ТаблицаДокумента.СчетФактура = НДСРеализация0.СчетФактура
	|ИТОГИ
	|	СУММА(СуммаСНДС),
	|	СУММА(СуммаРеализации)
	|ПО
	|	СобытиеПродажи,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНДСРеализация0.СчетФактура,
	|	ВТНДСРеализация0.ВидЦенности,
	|	ВТНДСРеализация0.Состояние,
	|	ВТНДСРеализация0.Покупатель,
	|	ВТНДСРеализация0.СуммаБезНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0) КАК СтавкаНДС
	|ИЗ
	|	ВТНДСРеализация0 КАК ВТНДСРеализация0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидЦенности";
	
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Реквизиты.Период) >= 3 Тогда
		Запрос.Текст = ТекстПостановление735;
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаСобытие = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СобытиеПродажи");
		
		ТаблицаРеализация0 = Результат[3].Выгрузить();
		ТаблицаРеализация0.Индексы.Добавить("СчетФактура");
		Отбор = Новый Структура;
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
			НужноРаспределить = СтрокаДокумента.СуммаБезНДС;
			Отбор.Вставить("СчетФактура", СтрокаДокумента.СчетФактура);
			Реализации0 = ТаблицаРеализация0.НайтиСтроки(Отбор);
			Для Каждого СтрокаРеализации Из Реализации0 Цикл
				Если НужноРаспределить = 0 Тогда
					СтрокиКУдалению.Добавить(СтрокаРеализации);
				КонецЕсли;
				МожноРаспределить = Мин(НужноРаспределить, СтрокаРеализации.СуммаБезНДС);
				СтрокаРеализации.СуммаБезНДС = МожноРаспределить;
				НужноРаспределить = НужноРаспределить - МожноРаспределить;
			КонецЦикла;
			
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаРеализация0.Удалить(СтрокаКУдалению);
			КонецЦикла;
			СтрокиКУдалению.Очистить();
			
		КонецЦикла;
		
		СтруктураТаблиц.ТаблицаРеализация0 = ТаблицаРеализация0;
		
	Иначе
		Запрос.Текст = ТекстПостановление1137;
		Результат	= Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат СтруктураТаблиц;
		КонецЕсли;
		ВыборкаСобытие = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СобытиеПродажи");
	КонецЕсли;
	
	Если ТаблицаОжиданияПодтверждения.Количество() = 0 Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Пока ВыборкаСобытие.Следующий() Цикл
		
		Если ВыборкаСобытие.СобытиеПродажи = Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0 Тогда
			Событие		= Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
			Состояние	= Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
		Иначе	
			Событие		= Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
			Состояние	= Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
		КонецЕсли;
		
		ВыборкаСчетФактура	= ВыборкаСобытие.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетФактура");
		Пока ВыборкаСчетФактура.Следующий() Цикл
			
			Если ВыборкаСчетФактура.СуммаСНДС = 0 ИЛИ ВыборкаСчетФактура.СуммаРеализации = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаСчетФактура.СуммаСНДС < ВыборкаСчетФактура.СуммаРеализации Тогда
				Коэффициент = ВыборкаСчетФактура.СуммаСНДС / ВыборкаСчетФактура.СуммаРеализации;
			Иначе
				Коэффициент = 1;
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаОжиданияПодтверждения.НайтиСтроки(Новый Структура("ДокументОтгрузки",ВыборкаСчетФактура.СчетФактура));
			Для каждого СтрокаПредположения Из НайденныеСтроки Цикл
				
				КПогашениюБезНДС	= Мин(СтрокаПредположения.СуммаБезНДС * Коэффициент, СтрокаПредположения.ОсталосьСуммаБезНДС);
				КПогашениюНДС		= Мин(СтрокаПредположения.НДС * Коэффициент, СтрокаПредположения.ОсталосьНДС);
				
				Если КПогашениюБезНДС = 0 И КПогашениюНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока	= НДСПредъявленныйРеализация0СнятиеБлокировкиВычета.Добавить(); 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПредположения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
				
				НоваяСтрока.СуммаБезНДС	= КПогашениюБезНДС;
				НоваяСтрока.НДС			= КПогашениюНДС;
				НоваяСтрока.ДатаСобытия	= Реквизиты.Период;
				
				НоваяСтрока.Событие		= Событие;
				НоваяСтрока.Состояние	= Состояние;
				
				СтрокаПредположения.ОсталосьСуммаБезНДС	= СтрокаПредположения.ОсталосьСуммаБезНДС - КПогашениюБезНДС;
				СтрокаПредположения.ОсталосьСуммаБезНДС	= СтрокаПредположения.ОсталосьСуммаБезНДС - КПогашениюНДС;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураТаблиц.НДСПредъявленныйРеализация0СнятиеБлокировкиВычета = НДСПредъявленныйРеализация0СнятиеБлокировкиВычета;

	Возврат СтруктураТаблиц;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(ТаблицаРеквизиты, ТаблицаСостав)

	Параметры = Новый Структура;

	// Подготовка таблицы "Состав"
	
	СписокОбязательныхКолонок = ""
		+ "СчетФактура,"		// <ДокументСсылка.*> - Счет-фактура (документ реализации)
		+ "Состояние,"			// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
		+ "ВидЦенности,"		// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
		+ "СтавкаНДС,"			// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
		+ "СуммаБезНДС,"		// <Число,15,2> - Сумма без НДС
		+ "НДС,"				// <Число,15,2> - НДС
		+ "ДатаСобытия,"		// <Дата> - Дата события
		+ "Событие";			// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие

	Параметры.Вставить("Состав", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСостав, СписокОбязательныхКолонок));

	// Подготовка таблицы "Реквизиты"
	
	СписокОбязательныхКолонок = ""
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Организация";	// <СправочникСсылка.ПрочиеДоходыИРасходы> - Статья прочих расходов (при неподтверждении экспорта)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуНДСНачисленныйСторно(ТаблицаРеквизиты, ТаблицаСтавкаНеПодтверждена, Движения) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаСтавкаНеПодтверждена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];	
	Если Не УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период)
	 Или Не УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыНДСНачисленныйСторно(ТаблицаРеквизиты, ТаблицаСтавкаНеПодтверждена);	
	Реквизиты = Параметры.Реквизиты[0];
	СтавкаНеПодтверждена = Параметры.СтавкаНеПодтверждена;
	
	НДСНачисленныйСторно	= Движения.НДСНачисленный.ВыгрузитьКолонки();
	
	СписокСчетовФактур	= СтавкаНеПодтверждена.ВыгрузитьКолонку("СчетФактура");
	СписокВидовЦенности	= СтавкаНеПодтверждена.ВыгрузитьКолонку("ВидЦенности");
	СписокПокупателей	= СтавкаНеПодтверждена.ВыгрузитьКолонку("Покупатель");
	
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокСчетовФактур);
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокВидовЦенности);
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокПокупателей);
	
	// Управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСНачисленный");
	ЭлементБлокировки.УстановитьЗначение("Организация",        Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период",             Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("СтавкаНДС",          Перечисления.СтавкиНДС.НДС0);
	ЭлементБлокировки.УстановитьЗначение("ВидНачисления",      Перечисления.НДСВидНачисления.Реализация0);
	ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ЭлементБлокировки.ИсточникДанных = СтавкаНеПодтверждена;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетФактура", "СчетФактура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВидЦенности", "ВидЦенности");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Покупатель",  "Покупатель");
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода",		Новый Граница(КонецДня(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",		Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтавкаНДС",			Перечисления.СтавкиНДС.НДС0);
	Запрос.УстановитьПараметр("ВидНачисления",		Перечисления.НДСВидНачисления.Реализация0);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",	Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("СписокСчетовФактур",	СписокСчетовФактур);
	Запрос.УстановитьПараметр("СписокВидовЦенности",СписокВидовЦенности);
	Запрос.УстановитьПараметр("СписокПокупателей",	СписокПокупателей);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСНачисленныйОстатки.СчетФактура,
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	НДСНачисленныйОстатки.ВидНачисления,
		|	НДСНачисленныйОстатки.ДоговорКонтрагента,
		|	НДСНачисленныйОстатки.ДатаОплаты,
		|	НДСНачисленныйОстатки.СуммаБезНДСОстаток,
		|	НДСНачисленныйОстатки.НДСОстаток
		|ИЗ
		|	РегистрНакопления.НДСНачисленный.Остатки(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И СтавкаНДС = &СтавкаНДС
		|				И ВидНачисления = &ВидНачисления
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И СчетФактура В (&СписокСчетовФактур)
		|				И ВидЦенности В (&СписокВидовЦенности)
		|				И Покупатель В (&СписокПокупателей)) КАК НДСНачисленныйОстатки";

	Результат = Запрос.Выполнить();

	ТаблицаОстатков = Результат.Выгрузить();
    ТаблицаОстатков.Индексы.Добавить("СчетФактура,ВидЦенности,Покупатель");
	
	Отбор	= Новый Структура("СчетФактура,ВидЦенности,Покупатель");
	
	Для каждого СтрокаДокумента Из СтавкаНеПодтверждена Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаДокумента);
		
		РаспределяемаяСумма	= СтрокаДокумента.СуммаБезНДС + СтрокаДокумента.НДС;
		
		НайденныеСтроки	= ТаблицаОстатков.НайтиСтроки(Отбор);
		Для каждого СтрокаОстатков Из НайденныеСтроки Цикл
		
			СторнируемаяСумма	= Мин(РаспределяемаяСумма, СтрокаОстатков.СуммаБезНДСОстаток);
			
			СтрокаОстатков.СуммаБезНДСОстаток	= СтрокаОстатков.СуммаБезНДСОстаток - СторнируемаяСумма;
			РаспределяемаяСумма	= РаспределяемаяСумма - СторнируемаяСумма;
			
			НоваяСтрока	= НДСНачисленныйСторно.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			
			НоваяСтрока.СуммаБезНДС		= -СторнируемаяСумма;
			НоваяСтрока.НДС				= 0;
			НоваяСтрока.ДатаСобытия		= СтрокаДокумента.ДатаСобытия;
			НоваяСтрока.Событие			= СтрокаДокумента.Событие;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат НДСНачисленныйСторно;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыНДСНачисленныйСторно(ТаблицаРеквизиты, ТаблицаСтавкаНеПодтверждена)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.СтавкаНеПодтверждена
	
	СписокОбязательныхКолонок = ""
	+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
	+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
    + "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
	+ "ВидНачисления,"			// <ПеречислениеСсылка.НДСВидНачисления> - Вид начисления НДС (реализация, налоговый агент, НДС с авансов)
	+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
	+ "НДС,"					// <Число,15,2> - НДС
	+ "ДатаСобытия,"			// <Дата> - Дата события
	+ "Событие";				// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие

	Параметры.Вставить("СтавкаНеПодтверждена", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтавкаНеПодтверждена, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"					// <Дата> - период движений - дата документа
	+ "Организация";	// <СправочникСсылка.ПрочиеДоходыИРасходы> - Статья прочих расходов (при неподтверждении экспорта)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСтавка0Подтверждена(ТаблицаРеквизиты, ТаблицаСтавкаПодтверждена, ТаблицаРеализация0,
	ТаблицаСнятиеБлокировкиВычета, ТаблицаСтавкаПодтвержденаРеализация0, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаСтавкаПодтверждена) Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС  = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСтавка0Подтверждена(
		ТаблицаРеквизиты,
		ТаблицаСтавкаПодтверждена,
		ТаблицаРеализация0,
		ТаблицаСнятиеБлокировкиВычета,
		ТаблицаСтавкаПодтвержденаРеализация0);
	
	Реквизиты = Параметры.Реквизиты[0];
	СтавкаПодтверждена		= Параметры.СтавкаПодтверждена;
	Реализация0				= Параметры.Реализация0;
	СнятиеБлокировкиВычета	= Параметры.СнятиеБлокировкиВычета;
	
	ВерсияУчетаНДС = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	
	УчетНДСПереопределяемый.СформироватьДвиженияНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(Реквизиты, СнятиеБлокировкиВычета, Движения, Отказ);

	// НДС реализация 0 - расход по состоянию "Ожидается подтверждение"
	СформироватьДвиженияНДСРеализация0НачислениеНДСПоРеализации0(Реквизиты, Реализация0, Движения, Отказ);
	
	// По документам отгрузки с датой до 1 октября 2011 налоговая база по НДС 
	// при подтверждении реализации со ставкой 0% корректируется с учетом курса на дату оплаты
	ТаблицаНДСНачисленный = СтавкаПодтверждена.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицы Из СтавкаПодтверждена Цикл
		Если СтрокаТаблицы.ДатаРеализации < '20111001' Тогда
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.КурсоваяРазница;
			Если ВерсияУчетаНДС = 1 Тогда
				НоваяСтрока = ТаблицаНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.КурсоваяРазница;
			КонецЕсли;
			СтрокаТаблицы.КурсоваяРазница	= 0;
		КонецЕсли;
	КонецЦикла;
	
	Если ВерсияУчетаНДС = 1 Тогда
		
		// НДС начисленный для отражения курсовой разницы
		УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйСтавка0КурсоваяРазница(Реквизиты, ТаблицаНДСНачисленный, Движения, Отказ);
		
		// НДС реализация 0 - приход по состоянию "Подтверждена реализация 0%"
		СформироватьДвиженияНДСРеализация0(СтавкаПодтверждена, Реквизиты, Движения, Отказ);
		
	Иначе
		
		//Запись в книге продаж по ставке 0%
		СформироватьДвиженияНДСЗаписиКнигиПродаж(Реквизиты, СтавкаПодтверждена, Движения, Отказ);
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПодготовитьПараметрыСтавка0Подтверждена(ТаблицаРеквизиты, ТаблицаСтавкаПодтверждена, ТаблицаРеализация0,
	ТаблицаСнятиеБлокировкиВычета, ТаблицаСтавкаПодтвержденаРеализация0)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.СнятиеБлокировкиВычета
	
	СписокОбязательныхКолонок = ""
	+ "СчетФактура,"				// <ДокументСсылка.*> - Счет-фактура
	+ "Состояние,"					// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
	+ "ДокументОтгрузки,"			// <ДокументСсылка.*> - Документ отгрузки
	+ "ВидЦенности,"				// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
	+ "СтавкаНДС,"					// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "СчетУчетаНДС,"				// <ПланСчетовСсылка.Хозрасчетный> - Счет учета НДС
	+ "СуммаБезНДС,"				// <Число,15,2> - Сумма без НДС
	+ "НДС,"						// <Число,15,2> - НДС
	+ "ДатаСобытия,"				// <Дата> - Дата события
	+ "Событие,"					// <ПеречислениеСсылка.СобытияПоНДСПокупки> - Событие
	+ "Поставщик,"					// <СправочникСсылка.Контрагенты> - Поставщик
	+ "ИсправленныйСчетФактура";	// <ДокументСсылка.КорректировкаПоступления> - ИсправленныйСчетФактура
	
	Параметры.Вставить("СнятиеБлокировкиВычета", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСнятиеБлокировкиВычета, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"					// <Дата> - период движений - дата документа
	+ "Организация,"			// <СправочникСсылка.Организации> - организация документа
	+ "СтатьяПрочихРасходов";	// <СправочникСсылка.ПрочиеДоходыИРасходы> - Статья прочих расходов (при неподтверждении экспорта)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СтавкаПодтверждена
	
	СписокОбязательныхКолонок = ""
	+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
	+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
	+ "ДатаРеализации," 		// <Дата> - Дата документа реализации
	+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
	+ "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
	+ "ВидНачисления,"			// <ПеречислениеСсылка.НДСВидНачисления> - Вид начисления НДС (реализация, налоговый агент, НДС с авансов)
	+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
	+ "КурсоваяРазница,"        // <Число,15,2> - Курсовая разница
	+ "НДС,"					// <Число,15,2> - НДС
	+ "ДатаСобытия,"			// <Дата> - Дата события
	+ "Событие,"				// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие
	+ "Содержание";				// <Строка> - Содержание операции

	Параметры.Вставить("СтавкаПодтверждена", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтавкаПодтверждена, СписокОбязательныхКолонок));
	
	СтрокаРеквизиты = Параметры.Реквизиты[0];
	
	// ТаблицаСтавкаПодтвержденаРеализация0
				
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтрокаРеквизиты.Период) >= 3 Тогда
		
		// Используется таблица остатков "ТаблицаСтавкаПодтвержденаРеализация0"
		
		СписокОбязательныхКолонок = ""
		+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
		+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
		+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
		+ "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
		+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
		+ "СуммаБезНДС";			// <Число,15,2> - Сумма без НДС
		
		Параметры.Вставить("Реализация0", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаСтавкаПодтвержденаРеализация0, СписокОбязательныхКолонок));
			
		Параметры.Реализация0.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		Параметры.Реализация0.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПродажи"));
			
		Параметры.Реализация0.ЗаполнитьЗначения(СтрокаРеквизиты.Период, "ДатаСобытия");
		Параметры.Реализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0, "Событие");
		
	Иначе	
		
		// Подготовка таблицы Параметры.Реализация0
		
		СписокОбязательныхКолонок = ""
		+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
		+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
		+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
		+ "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
		+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
		+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
		+ "НДС,"					// <Число,15,2> - НДС
		+ "КурсоваяРазница,"		// <Число,15,2> - Курсовая разница
		+ "ДатаСобытия,"			// <Дата> - Дата события
		+ "Событие";				// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие

		Параметры.Вставить("Реализация0", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаРеализация0, СписокОбязательныхКолонок));
			
	КонецЕсли;
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСтавка0НеПодтверждена(ТаблицаРеквизиты, ТаблицаСтавкаНеПодтверждена, ТаблицаРеализация0,
	ТаблицаСнятиеБлокировкиВычета, ТаблицаНДСНачисленныйСторно, ТаблицаСтавкаПодтвержденаРеализация0, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаСтавкаНеПодтверждена) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если Не ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСтавка0НеПодтверждена(
		ТаблицаРеквизиты,
		ТаблицаСтавкаНеПодтверждена,
		ТаблицаРеализация0,
		ТаблицаСнятиеБлокировкиВычета,
		ТаблицаНДСНачисленныйСторно,
		ТаблицаСтавкаПодтвержденаРеализация0);
		
	Реквизиты = Параметры.Реквизиты[0];

	СтавкаНеПодтверждена	= Параметры.СтавкаНеПодтверждена;
	Реализация0				= Параметры.Реализация0;
	НДСНачисленныйСторно	= Параметры.НДСНачисленныйСторно;
	СнятиеБлокировкиВычета	= Параметры.СнятиеБлокировкиВычета;
	
	ВерсияУчетаНДС = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Реквизиты.Период) >= 3 Тогда
		ОпределитьСуммуИСтавкуНДСПоДокументамОтгрузки(Реквизиты, СтавкаНеПодтверждена);
	КонецЕсли;
	
	УчетНДСПереопределяемый.СформироватьДвиженияНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(Реквизиты, СнятиеБлокировкиВычета, Движения, Отказ);

	// НДС реализация 0 - расход по состоянию "Ожидается подтверждение"
	СформироватьДвиженияНДСРеализация0НачислениеНДСПоРеализации0(Реквизиты, Реализация0, Движения, Отказ);

	// НДС начисленный - сторно по состоянию "Ожидается подтверждение"
	// Сторно-движения нужно делать в том числе и если ВерсияУчетаНДС = 2
	УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйСтавка0НеПодтверждена(Реквизиты, НДСНачисленныйСторно, Движения, Отказ);

	Если ВерсияУчетаНДС = 1 Тогда	
		// НДС реализация 0 - приход по состоянию "Не подтверждена реализация 0%"
		СформироватьДвиженияНДСРеализация0(СтавкаНеПодтверждена, Реквизиты, Движения, Отказ);

		// НДС начисленный - приход по состоянию "Не подтверждена реализация 0%"
		УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйСтавка0НеПодтверждена(Реквизиты, СтавкаНеПодтверждена, Движения, Отказ);
		
	Иначе
		
		// Запись в книге продаж по заданной ставке
		СформироватьДвиженияНДСЗаписиКнигиПродаж(
			Реквизиты, СтавкаНеПодтверждена, Движения, Отказ);
		
	КонецЕсли;

	// Проводки при неподтверждении ставки
	// Дт 68.22 Кт 68.02
	// Дт 91.02 Кт 68.22
	СформироватьПроводкиСтавка0НеПодтверждена(Реквизиты, СтавкаНеПодтверждена, Движения, Отказ);

КонецПроцедуры


Функция ПодготовитьПараметрыСтавка0НеПодтверждена(ТаблицаРеквизиты, ТаблицаСтавкаНеПодтверждена, ТаблицаРеализация0,
	ТаблицаСнятиеБлокировкиВычета, ТаблицаНДСНачисленныйСторно, ТаблицаСтавкаПодтвержденаРеализация0)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.СнятиеБлокировкиВычета
	
	СписокОбязательныхКолонок = ""
	+ "СчетФактура,"				// <ДокументСсылка.*> - Счет-фактура
	+ "Состояние,"					// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
	+ "ДокументОтгрузки,"			// <ДокументСсылка.*> - Документ отгрузки
	+ "ВидЦенности,"				// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
    + "СтавкаНДС,"					// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "СчетУчетаНДС,"				// <ПланСчетовСсылка.Хозрасчетный> - Счет учета НДС
	+ "СуммаБезНДС,"				// <Число,15,2> - Сумма без НДС
	+ "НДС,"						// <Число,15,2> - НДС
	+ "ДатаСобытия,"				// <Дата> - Дата события
	+ "Событие,"					// <ПеречислениеСсылка.СобытияПоНДСПокупки> - Событие
	+ "Поставщик,"					// <СправочникСсылка.Контрагенты> - Поставщик
	+ "ИсправленныйСчетФактура";	// <ДокументСсылка.КорректировкаПоступления> - Исправленный счет фактура 
	Параметры.Вставить("СнятиеБлокировкиВычета", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСнятиеБлокировкиВычета, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"					// <Дата> - период движений - дата документа
	+ "Организация,"			// <СправочникСсылка.Организации> - организация документа
	+ "СтатьяПрочихРасходов";	// <СправочникСсылка.ПрочиеДоходыИРасходы> - Статья прочих расходов (при неподтверждении экспорта)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	СтрокаРеквизиты = Параметры.Реквизиты[0];
		
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтрокаРеквизиты.Период) >= 3 Тогда
		
		// Используется таблица остатков "ТаблицаСтавкаПодтвержденаРеализация0"
		
		СписокОбязательныхКолонок = ""
		+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
		+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
		+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
		+ "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
		+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
		+ "СуммаБезНДС";			// <Число,15,2> - Сумма без НДС
		
		Параметры.Вставить("Реализация0", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаСтавкаПодтвержденаРеализация0, СписокОбязательныхКолонок));
			
		Параметры.Реализация0.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		Параметры.Реализация0.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПродажи"));
			
		Параметры.Реализация0.ЗаполнитьЗначения(СтрокаРеквизиты.Период, "ДатаСобытия");
		Параметры.Реализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
		
	Иначе	
		
		// Подготовка таблицы Параметры.Реализация0
		
		СписокОбязательныхКолонок = ""
		+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
		+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
		+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
	    + "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
		+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
		+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
		+ "НДС,"					// <Число,15,2> - НДС
		+ "КурсоваяРазница,"		// <Число,15,2> - Курсовая разница
		+ "ДатаСобытия,"			// <Дата> - Дата события
		+ "Событие";				// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие

		Параметры.Вставить("Реализация0", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаРеализация0, СписокОбязательныхКолонок));
			
	КонецЕсли;
		
	// Подготовка таблицы Параметры.НДСНачисленныйСторно
	
	СписокОбязательныхКолонок = ""
	+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
	+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
	+ "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
	+ "ВидНачисления,"			// <ПеречислениеСсылка.НДСВидНачисления> - Вид начисления НДС (реализация, налоговый агент, НДС с авансов)
	+ "ДоговорКонтрагента,"		// <СправочникСсылка.ДоговорыКонтрагентов> - Договор контрагента (для СФ на аванс, нал.агента по 161.5)
	+ "ДатаОплаты,"				// <Дата> - Дата оплаты
	+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
	+ "НДС,"					// <Число,15,2> - НДС
	+ "ДатаСобытия,"			// <Дата> - Дата события
	+ "Событие";				// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие
	
	Параметры.Вставить("НДСНачисленныйСторно", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНДСНачисленныйСторно, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СтавкаНеПодтверждена
	
	СписокОбязательныхКолонок = ""
	+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
	+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
	+ "СчетФактураВыданный,"	// <ДокументСсылка.СчетФактураВыданный> - Счет-фактура выписаный при неподтверждении нулевой ставки
	+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
	+ "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
	+ "ВидНачисления,"			// <ПеречислениеСсылка.НДСВидНачисления> - Вид начисления НДС (реализация, налоговый агент, НДС с авансов)
	+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
	+ "НДС,"					// <Число,15,2> - НДС
	+ "ДатаСобытия,"			// <Дата> - Дата события
	+ "Событие,"				// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие
	+ "Содержание,"				// <Строка> - Содержание операции
	+ "КорректируемыйПериод," 	// <Дата> - Корректируемый период
	+ "ЗаписьДополнительногоЛиста"; // <Булево> - Признак записи дополнительного листа

	Параметры.Вставить("СтавкаНеПодтверждена", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтавкаНеПодтверждена, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура ОпределитьСуммуИСтавкуНДСПоДокументамОтгрузки(Реквизиты, ТаблицаСтавкаНеПодтверждена)

	ТаблицаСтавкаНДСНеПодтвержденаПоСчетуФактуре = ТаблицаСтавкаНеПодтверждена.СкопироватьКолонки();
	
	Для каждого СтрокаНеПодтверждения Из ТаблицаСтавкаНеПодтверждена Цикл
		
		ДанныеСчетаФактуры = Новый Структура(
			"СчетФактура,ВидСчетаФактуры,Контрагент,ДоговорКонтрагента,ИспользуетсяПостановлениеНДС1137,
			|НеподтверждениеНулевойСтавки,СводныйКомиссионный");
			
		ДанныеСчетаФактуры.Контрагент = СтрокаНеПодтверждения.Покупатель;
		ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137 = Истина;
		ДанныеСчетаФактуры.НеподтверждениеНулевойСтавки = Истина;
		ДанныеСчетаФактуры.СводныйКомиссионный = Ложь;
			
		Если ТипЗнч(СтрокаНеПодтверждения.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНеПодтверждения.СчетФактура, "ДокументОснование");

			Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;

			РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаНеПодтверждения.СчетФактура, "ДоговорКонтрагента,ВидСчетаФактуры");
			ДанныеСчетаФактуры.ДоговорКонтрагента = РеквизитыСчетаФактуры.ДоговорКонтрагента;
			ДанныеСчетаФактуры.ВидСчетаФактуры    = РеквизитыСчетаФактуры.ВидСчетаФактуры;
			ДанныеСчетаФактуры.СчетФактура        = СтрокаНеПодтверждения.СчетФактура;
			ПараметрыДокумента = ПодготовитьДанныеДляПечатиСчетовФактур(ДокументОснование, ДанныеСчетаФактуры);
			
		Иначе
			
			ДанныеСчетаФактуры.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ДанныеСчетаФактуры.СчетФактура = СтрокаНеПодтверждения.СчетФактураВыданный;
			ПараметрыДокумента = ПодготовитьДанныеДляПечатиСчетовФактур(СтрокаНеПодтверждения.СчетФактура, ДанныеСчетаФактуры);
			
		КонецЕсли;
		
		Если ПараметрыДокумента.Реквизиты = Неопределено 
			ИЛИ ПараметрыДокумента.ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		Иначе
			
			// Формируем строки таблицы по конкретному документу реализации
			
			ТаблицаДокумента = ПараметрыДокумента.ТаблицаДокумента;
			ТаблицаДокумента.Свернуть("СтавкаНДС", "СуммаБезНДС,СуммаНДС");
			
			Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
			
				НоваяСтрока = ТаблицаСтавкаНДСНеПодтвержденаПоСчетуФактуре.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНеПодтверждения, , "СтавкаНДС,СуммаБезНДС,НДС,СчетФактура");
				
				НоваяСтрока.СчетФактура = СтрокаНеПодтверждения.СчетФактураВыданный;
				
				НоваяСтрока.СтавкаНДС = СтрокаДокумента.СтавкаНДС;
				НоваяСтрока.СуммаБезНДС = СтрокаДокумента.СуммаБезНДС;
				НоваяСтрока.НДС = СтрокаДокумента.СуммаНДС;
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаСтавкаНеПодтверждена = ТаблицаСтавкаНДСНеПодтвержденаПоСчетуФактуре;
	
КонецПроцедуры

// НДС ПО СМР

Процедура СформироватьДвиженияНачислениеНДСпоСМРХозспособом(ТаблицаРеквизиты, СМРХозспособом, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеНДСпоСМРХозспособом(ТаблицаРеквизиты, СМРХозспособом);
	Реквизиты = Параметры.Реквизиты[0];

	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	СформироватьПроводкиНачислениеНДСпоСМРХозспособом(Реквизиты, Параметры.СМРХозспособом, Движения, Отказ);

	Если ВерсияУчетаНДС = 1 Тогда
		
		Если УпрощенныйУчетНДС Тогда
			СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСпоСМРХозспособом(Реквизиты, Параметры.СМРХозспособом, Движения, Отказ);
		Иначе
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйНачислениеНДСпоСМРХозспособом(Реквизиты, Параметры.СМРХозспособом, Движения, Отказ);
			Параметры.СМРХозспособом.Колонки.Событие.Имя = "СобытиеПродажи";
			Параметры.СМРХозспособом.Колонки.СобытиеПокупки.Имя = "Событие";
			СформироватьДвиженияНДСПредъявленныйНачислениеНДСпоСМРХозспособом(Реквизиты, Параметры.СМРХозспособом, Движения, Отказ);
		КонецЕсли;
	
	Иначе
		
		СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСпоСМРХозспособом(Реквизиты, Параметры.СМРХозспособом, Движения, Отказ);
		
		Параметры.СМРХозспособом.Колонки.Событие.Имя = "СобытиеПродажи";
		Параметры.СМРХозспособом.Колонки.СобытиеПокупки.Имя = "Событие";
		СформироватьДвиженияНДСПредъявленныйНачислениеНДСпоСМРХозспособом(Реквизиты, Параметры.СМРХозспособом, Движения, Отказ);
		
	КонецЕсли;


КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеНДСпоСМРХозспособом(ТаблицаРеквизиты, СМРХозспособом)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
    + "Период,"
	+ "Организация,"
	+ "ПодразделениеОрганизации,"
	+ "СчетУчетаНДС,"
	+ "РаздельныйУчетНДСНаСчете19";

    Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "Регистратор,"
	+ "Объект,"
	+ "СуммаБезНДС,"
	+ "СтавкаНДС,"
	+ "НДС,"
	+ "СчетФактура,"
	+ "ВидЦенности,"
	+ "Событие,"
	+ "СобытиеПокупки,"
	+ "ВидНачисления,"
	+ "ДатаСобытия,"
	+ "СчетУчетаНДС";

	Параметры.Вставить("СМРХозспособом", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		СМРХозспособом, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

// КОРРЕКТИРОВКА НДС

// Формирование движений при корректировке реализации
//
Процедура СформироватьДвиженияКорректировкиРеализацияТоваровУслуг(ТаблицыНДСПоКурсуАванса, ПараметрыПроведения, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ПараметрыПроведения.НДСРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроведения.НДСРеквизиты[0].ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
		И ТипЗнч(ПараметрыПроведения.НДСРеквизиты[0].ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат;
	КонецЕсли;
		
	Параметры = ПодготовитьПараметрыКорректировкиРеализацияТоваровУслуг(
		ТаблицыНДСПоКурсуАванса,
		ПараметрыПроведения);

	Реквизиты = Параметры.Реквизиты[0];

	// Списываем ГТД
	Для Каждого СтрокаГТД Из Параметры.ТоварыГТД Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = "Корректировка списания ГТД";
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ГТД;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаГТД.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НомераГТД", СтрокаГТД.НомерГТД);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтраныПроисхождения", СтрокаГТД.СтранаПроисхождения);
		Проводка.КоличествоКт = СтрокаГТД.Количество;

	КонецЦикла;
	
	Если НЕ Реквизиты.ПлательщикНДС И НЕ Реквизиты.ВедетсяУчетНДСПоФЗ134 Тогда
		СформироватьПроводкиКорректировкиРеализацияТоваровУслуг(
			ТаблицыНДСПоКурсуАванса.ТаблицаТоварыУслуги,
			ПараметрыПроведения.НДСРеквизиты,
			Движения,
			Отказ);
		Возврат;
	КонецЕсли;

	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		// Корректировочный счет-фактура
		
		СформироватьКорректировочныеДвиженияКорректировкаРеализации(
			Реквизиты,
			Параметры.ТаблицаНДСВычет,
			Параметры.ТаблицаНДСВосстановление,
			Движения,
			Отказ);
		
	Иначе
		
		// Исправительный счет-фактура
		
		// Сторно движений исправляемого документа
		СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСПоРеализации(
			Параметры.ТаблицаНДССторноКнигиПродаж,
			Движения,
			Отказ);
		
		ОтразитьСведенияПоДокументамОплатыИсправляемогоСчетаФактуры(
			Параметры.ТаблицаНДССторноКнигиПродаж,
			Параметры.ТаблицаНДССведенияПоДокументамОплаты,
			Движения,
			Отказ);
				
		// Формирование исправленных движений
		СформироватьИсправительныеДвиженияКорректировкаРеализации(
			Реквизиты,
			Параметры,
			Движения,
			Отказ);
		
	КонецЕсли;
	
	СформироватьПроводкиКорректировкиРеализацияТоваровУслуг(
		ТаблицыНДСПоКурсуАванса.ТаблицаТоварыУслуги,
		ПараметрыПроведения.НДСРеквизиты,
		Движения,
		Отказ);
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыКорректировкиРеализацияТоваровУслуг(ТаблицыНДСПоКурсуАванса, ПараметрыПроведения)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"							// <Дата>
	+ "Регистратор,"					// <ДокументСсылка>
	+ "ВидОперации,"					// <Булево>
	+ "ОтчетностьПодписана,"			// <Булево>
	+ "ПрошлыйПериод,"					// <Булево>
	+ "КорректироватьБУиНУ,"			// <Булево>
	+ "ДокументРеализации,"             // <ДокументСсылка>
	+ "СтатьяПрочихДоходовИРасходов,"	// <СправочникСсылка.ПрочиеДоходыИРасходы>
	+ "Организация"						// <СправочникСсылка.Организации>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ПараметрыПроведения.НДСРеквизиты, СписокОбязательныхКолонок));
		
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Параметры;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты;
	СтрокаРеквизиты = Параметры.Реквизиты[0];
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(СтрокаРеквизиты.Организация, СтрокаРеквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(СтрокаРеквизиты.Период);
	
	Реквизиты.Колонки.Добавить("ПлательщикНДС");
	Реквизиты.Колонки.Добавить("ВедетсяУчетНДСПоФЗ134");
	
	Реквизиты.ЗаполнитьЗначения(ПлательщикНДС, "ПлательщикНДС");
	Реквизиты.ЗаполнитьЗначения(ВедетсяУчетНДСПоФЗ134, "ВедетсяУчетНДСПоФЗ134");
	
	Если НЕ ПлательщикНДС
		И ВедетсяУчетНДСПоФЗ134 Тогда
		
		ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ТаблицыНДСПоКурсуАванса.ТаблицаНачисление);
		ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ПараметрыПроведения.НДСКнигаПродаж);
		ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ТаблицыНДСПоКурсуАванса.ТаблицаВосстановление);
		
	КонецЕсли; 
	
	// Подготовка таблицы движений по данным документа
	СписокОбязательныхКолонок = ""
	+ "ВидЦенности,"				
	+ "Содержание,"				
	+ "СтавкаНДС,"				
	+ "СуммаБезНДС,"		
	+ "НДС,"
	+ "Регистратор,"
	+ "Период,"
	+ "Организация,"				
	+ "Покупатель,"				
	+ "ИсправленныйСчетФактура,"				
	+ "Событие,"		
	+ "ДатаСобытия,"
	+ "СчетФактура,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "КорректируемыйПериод,"
	+ "ЭтоУслуга,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Субконто"
	;
	Параметры.Вставить("ТаблицаНДСНачислениеНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицыНДСПоКурсуАванса.ТаблицаНачисление, СписокОбязательныхКолонок));
		
	// Подготовка таблицы сторно движений по книге продаж
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "Содержание,"
	+ "Организация,"
	+ "Покупатель,"
	+ "СчетФактура,"
	+ "ВидЦенности,"
	+ "СтавкаНДС,"
	+ "ДатаОплаты,"
	+ "ДокументОплаты,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "КорректируемыйПериод,"
	+ "ДоговорКонтрагента,"
	+ "ИсправленныйСчетФактура,"
	+ "СуммаБезНДС,"
	+ "НДС";
	
	Параметры.Вставить("ТаблицаНДССторноКнигиПродаж", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ПараметрыПроведения.НДСКнигаПродаж, СписокОбязательныхКолонок));

	// Подготовка таблицы с реквизитами документа оплаты.
	СписокОбязательныхКолонок = ""
	+ "НомерДокументаОплаты,"
	+ "ДатаДокументаОплаты";
		
	Параметры.Вставить("ТаблицаНДССведенияПоДокументамОплаты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ПараметрыПроведения.НДССведенияПоДокументамОплаты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы восстановление НДС
	СписокОбязательныхКолонок = ""
	+ "СчетФактура,"
	+ "ИсправленныйСчетФактура,"
	+ "Содержание,"
	+ "ЭтоУслуга,"
	+ "ВидЦенности,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "Номенклатура,"
	+ "СтавкаНДС,"
	+ "НДС,"
	+ "СуммаБезНДС,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Период,"
	+ "Организация,"
	+ "Покупатель,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "НомерСтроки,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Субконто,"
	+ "Регистратор"
	;
	Параметры.Вставить("ТаблицаНДСВосстановление", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицыНДСПоКурсуАванса.ТаблицаВосстановление, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка> - имя табличной части документа
	+ "СинонимСписка,"        // <Строка> - синоним табличной части документа
	+ "НомерСтрокиДокумента," // <Число,10,0> - номер строки документа
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "СтавкаНДС,"            // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС, указанная в документе
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество"	          // <Число,15,3>
	;
	Параметры.Вставить("ТоварыГТД", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ПараметрыПроведения.НДСТоварыГТД, СписокОбязательныхКолонок));

	// Подготовка таблицы сторно движений по книге покупок
	СписокОбязательныхКолонокНДСПредъявленный = ""
		+ "Период,"
		+ "Регистратор,"
		+ "Организация,"
		+ "СчетФактура,"
		+ "ВидЦенности,"
		+ "СтавкаНДС,"
		+ "СчетУчетаНДС,"
		+ "Поставщик,"
		+ "ДатаОплаты,"
		+ "ДоговорКонтрагента,"
		+ "ИсправленныйСчетФактура,"
		+ "СуммаБезНДС,"
		+ "НДС,"
		+ "Событие,"
		+ "ДатаСобытия"
		;
		
	// Подготовка таблицы сторно движений по книге покупок
	СписокОбязательныхКолонокСторноКнигиПокупок = ""
		+ "Период,"
		+ "Регистратор,"
		+ "Содержание,"
		+ "Организация,"
		+ "Поставщик,"
		+ "СчетФактура,"
		+ "ВидЦенности,"
		+ "СтавкаНДС,"
		+ "ДатаОплаты,"
		+ "ДокументОплаты,"
		+ "Событие,"
		+ "ДатаСобытия,"
		+ "ЗаписьДополнительногоЛиста,"
		+ "КорректируемыйПериод,"
		+ "ДоговорКонтрагента,"
		+ "ИсправленныйСчетФактура,"
		+ "СуммаБезНДС,"
		+ "НДС,"
		+ "КодВидаОперации"
		;
		
	// Подготовка таблицы сторно движений по книге покупок
	СписокОбязательныхКолонокВычет = ""
		+ "СчетФактура,"
		+ "ИсправленныйСчетФактура,"
		+ "Содержание,"
		+ "ЭтоУслуга,"
		+ "ВидЦенности,"
		+ "Событие,"
		+ "Номенклатура,"
		+ "СтавкаНДС,"
		+ "НДС,"
		+ "СуммаБезНДС,"
		+ "СчетУчета,"
		+ "СчетДоходов,"
		+ "Период,"
		+ "ДатаСобытия,"
		+ "Организация,"
		+ "Поставщик,"
		+ "ЗаписьДополнительногоЛиста,"
		+ "КорректируемыйПериод,"
		+ "СторнирующаяЗаписьДопЛиста,"
		+ "НомерСтроки,"
		+ "СчетУчетаНДСПоРеализации,"
		+ "СчетУчетаНДС,"
		+ "Субконто,"
		+ "Регистратор"
		;
		
	Если ПлательщикНДС Тогда
	
		Параметры.Вставить("ТаблицаНДСОстаткиНДСПредъявленный", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ПараметрыПроведения.НДСПредъявленный, СписокОбязательныхКолонокНДСПредъявленный));
		
		Параметры.Вставить("ТаблицаНДССторноКнигиПокупок", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ПараметрыПроведения.НДСКнигаПокупок, СписокОбязательныхКолонокСторноКнигиПокупок));

		Параметры.Вставить("ТаблицаНДСВычет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ПараметрыПроведения.НДСВычет, СписокОбязательныхКолонокВычет));
			
	Иначе
			
		Параметры.Вставить("ТаблицаНДСОстаткиНДСПредъявленный", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(, 
			СписокОбязательныхКолонокНДСПредъявленный));
		
		Параметры.Вставить("ТаблицаНДССторноКнигиПокупок", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(, 
			СписокОбязательныхКолонокСторноКнигиПокупок));

		Параметры.Вставить("ТаблицаНДСВычет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(, 
			СписокОбязательныхКолонокВычет));	
			
	КонецЕсли; 
			
	Возврат Параметры;

КонецФункции

Процедура СформироватьКорректировочныеДвиженияКорректировкаРеализации(Реквизиты, ТаблицаНДСВычет, ТаблицаНДСВосстановление, Движения, Отказ)
	
	ТаблицаНДСВычет.Индексы.Добавить("Событие");
	
	ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Реквизиты.ДокументРеализации);
	
	ДатаДокументаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокумент, "Дата");
	
	СтруктураОтбора = Новый Структура("Событие", Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	ТаблицаНДСПредъявленный = ТаблицаНДСВычет.Скопировать(СтруктураОтбора);
	// Отражение предъявленного НДС по строкам на уменьшение стоимости
	СформироватьДвиженияПредъявленНДС(ТаблицаНДСПредъявленный, ДатаДокументаРеализации, Движения, Отказ, Истина);
	
	СтруктураОтбора = Новый Структура("Событие", Перечисления.СобытияПоНДСПокупки.НалогИсчисляетПокупатель);
	ТаблицаНДСПокупки = ТаблицаНДСВычет.Скопировать(СтруктураОтбора);
	// Отражение вычета НДС по строкам на уменьшение стоимости
	СформироватьДвиженияНДСЗаписиКнигиПокупок(ТаблицаНДСПокупки, Движения, Отказ);
	
	СформироватьДвиженияЗаписьКнигиПродаж(ТаблицаНДСВосстановление, ДатаДокументаРеализации, Движения, Отказ);
	
КонецПроцедуры

Процедура СформироватьДвиженияПредъявленНДС(ТаблицаПредъявленногоНДС, ДатаДокументаРеализации, Движения, Отказ, ЗаполнятьВидЦенности = Ложь, Сторно = Ложь)
	
	Если ТаблицаПредъявленногоНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаполнятьВидЦенности Тогда
		ЗаполнитьВидыЦенностей(ТаблицаПредъявленногоНДС, , "СчетУчета");
	КонецЕсли;
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(ТаблицаПредъявленногоНДС[0].Организация, ДатаДокументаРеализации);
	
	ЕстьСчетДоходов = Ложь;
	КолонкиГруппировок = "ВидЦенности, СтавкаНДС, Поставщик, Организация, СчетФактура, ИсправленныйСчетФактура, Событие,
		|ДатаСобытия, СчетУчетаНДС, Регистратор, Период";
	Если ТаблицаПредъявленногоНДС.Колонки.Найти("СчетДоходов") <> Неопределено Тогда
		КолонкиГруппировок = КолонкиГруппировок + ", СчетДоходов";
		ЕстьСчетДоходов = Истина;
	КонецЕсли;
	
	ТаблицаПредъявленногоНДС.Свернуть(КолонкиГруппировок, "СуммаБезНДС, НДС");
	
	Для каждого СтрокаДвижения Из ТаблицаПредъявленногоНДС Цикл
		
		Если ЕстьСчетДоходов И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СтрокаДвижения.СчетДоходов)
			И ПлательщикЕНВД Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Сторно Тогда
			Движение = Движения.НДСПредъявленный.ДобавитьРасход();
		Иначе
			Движение = Движения.НДСПредъявленный.ДобавитьПриход();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
	
	КонецЦикла;
	
	Движения.НДСПредъявленный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияСторноВычетаНДС(Реквизиты, ТаблицаСторноНДС, Движения, Отказ)
	
	СформироватьДвиженияНДСЗаписиКнигиПокупок(ТаблицаСторноНДС, Движения, Отказ);
	
	Если Реквизиты.КорректироватьБУиНУ Тогда
		СформироватьПроводкиСторноВычетаНДС(Реквизиты, ТаблицаСторноНДС, Движения, Отказ);	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СформироватьПроводкиСторноВычетаНДС(Реквизиты, ТаблицаСторноНДС, Движения, Отказ)
                            	
	Для Каждого СтрокаСторно Из ТаблицаСторноНДС Цикл
				
		Движение = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно, , "Период, Регистратор");
		
		Движение.Период = СтрокаСторно.Период;
		
		Движение.Организация = СтрокаСторно.Организация;
		Движение.Содержание  = "Сторнирование НДС";
		
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации; // 19.09
		
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФПолученные", СтрокаСторно.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", СтрокаСторно.Поставщик);
		
		Движение.Сумма = СтрокаСторно.НДС;
			
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
			
КонецПроцедуры	

Процедура СформироватьДвиженияЗаписьКнигиПродаж(ТаблицаДвижений, ДатаДокументаРеализации, Движения, Отказ)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВидыЦенностей(ТаблицаДвижений, , "СчетУчета");
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(ТаблицаДвижений[0].Организация, ДатаДокументаРеализации);
	
	ЕстьСчетДоходов = Ложь;
	КолонкиГруппировок = "ВидЦенности, СтавкаНДС, Покупатель, Организация, СчетФактура, ИсправленныйСчетФактура, Событие,
		|ЗаписьДополнительногоЛиста, СторнирующаяЗаписьДопЛиста, КорректируемыйПериод, ДатаСобытия, Регистратор, Период";
	Если ТаблицаДвижений.Колонки.Найти("СчетДоходов") <> Неопределено Тогда
		КолонкиГруппировок = КолонкиГруппировок + ", СчетДоходов";
		ЕстьСчетДоходов = Истина;
	КонецЕсли;
	
	ТаблицаДвижений.Свернуть(КолонкиГруппировок, "СуммаБезНДС, НДС");
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		
		Если СтрокаДвижения.СуммаБезНДС = 0 И СтрокаДвижения.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьСчетДоходов И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СтрокаДвижения.СчетДоходов)
			И ПлательщикЕНВД Тогда
			Продолжить;
		КонецЕсли;
		
		// НДС Продажи
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьИсправительныеДвиженияКорректировкаРеализации(Реквизиты, Параметры, Движения, Отказ)
	
	ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Реквизиты.ДокументРеализации);
	ДатаДокументаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокумент, "Дата");
	
	Если ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		// Сторно движений исправляемого документа
		СформироватьДвиженияПредъявленНДС(
			Параметры.ТаблицаНДСОстаткиНДСПредъявленный,
			ДатаДокументаРеализации,
			Движения,
			Отказ, ,
			Истина);
			
		СформироватьДвиженияСторноВычетаНДС(
			Реквизиты,
			Параметры.ТаблицаНДССторноКнигиПокупок,
			Движения,
			Отказ);
		
		// Новые движения по исправленному корректировочному счету-фактуре
		СформироватьКорректировочныеДвиженияКорректировкаРеализации(
			Реквизиты,
			Параметры.ТаблицаНДСВычет,
			Параметры.ТаблицаНДСВосстановление,
			Движения,
			Отказ);
		
	Иначе
		СформироватьДвиженияЗаписьКнигиПродаж(
			Параметры.ТаблицаНДСНачислениеНДС,
			ДатаДокументаРеализации,
			Движения,
			Отказ);
			
		ОтразитьСведенияПоДокументамОплатыИсправляемогоСчетаФактуры(
			Параметры.ТаблицаНДСНачислениеНДС,
			Параметры.ТаблицаНДССведенияПоДокументамОплаты,
			Движения,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиКорректировкиРеализацияТоваровУслуг(ТаблицаНДСТоварыУслуги, ТаблицаРеквизиты, Движения, Отказ)
	
	Параметры = ПодготовитьПараметрыПроводкиКорректировкиРеализацияТоваровУслуг(ТаблицаНДСТоварыУслуги, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Для Каждого СтрокаНДС Из Параметры.ТаблицаНДСТоварыУслуги Цикл
		
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			СуммаНДС = СтрокаНДС.СуммаНДС - СтрокаНДС.СуммаНДСДоИзменения;
			СчетНДС  = ?(СуммаНДС < 0, ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации, ПланыСчетов.Хозрасчетный.НДС);
			ВтораяПроводка = Ложь;
		Иначе
			Если ТипЗнч(СтрокаНДС.СчетФактура)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				СписатьНа19Счет = (СтрокаНДС.СуммаНДСДоИзменения - СтрокаНДС.СуммаНДСДоКорректировки) < 0;
				СписатьНа19СчетИсправление = (СтрокаНДС.СуммаНДС - СтрокаНДС.СуммаНДСДоКорректировки) < 0;
				ВтораяПроводка = СписатьНа19Счет <> СписатьНа19СчетИсправление;
				СуммаНДС = ?(ВтораяПроводка, СтрокаНДС.СуммаНДСДоКорректировки - СтрокаНДС.СуммаНДСДоИзменения,
					СтрокаНДС.СуммаНДС - СтрокаНДС.СуммаНДСДоИзменения);
				СчетНДС = ?(СписатьНа19Счет, 
					ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации, ПланыСчетов.Хозрасчетный.НДС);
			ИначеЕсли СтрокаНДС.СтавкаНДС = СтрокаНДС.СтавкаНДСДоИзменения Тогда 
				СуммаНДС = СтрокаНДС.СуммаНДС - СтрокаНДС.СуммаНДСДоИзменения;
				СчетНДС  = ПланыСчетов.Хозрасчетный.НДС;
				
				ВтораяПроводка = Ложь;
			Иначе
				СуммаНДС = - СтрокаНДС.СуммаНДСДоИзменения;
				СчетНДС  = ПланыСчетов.Хозрасчетный.НДС;
				
				СформироватьПроводкуКорректировкиРеализацииТоваровУслуг(Реквизиты, СтрокаНДС, СтрокаНДС.СтавкаНДСДоИзменения, СуммаНДС, СчетНДС, Движения, Отказ);
				
				СуммаНДС = СтрокаНДС.СуммаНДС;
				
				ВтораяПроводка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СформироватьПроводкуКорректировкиРеализацииТоваровУслуг(Реквизиты, СтрокаНДС, СтрокаНДС.СтавкаНДС, СуммаНДС, СчетНДС, Движения, Отказ);
		
		Если ВтораяПроводка Тогда
			СуммаНДС = СтрокаНДС.СуммаНДС - СтрокаНДС.СуммаНДСДоКорректировки;
			СчетНДС  = ?(СуммаНДС < 0, ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации, ПланыСчетов.Хозрасчетный.НДС);
			СформироватьПроводкуКорректировкиРеализацииТоваровУслуг(Реквизиты, СтрокаНДС, СтрокаНДС.СтавкаНДС, СуммаНДС, СчетНДС, Движения, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроводкиКорректировкиРеализацияТоваровУслуг(ТаблицаНДСТоварыУслуги, ТаблицаРеквизиты)
	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "ПериодПроводки,"					// <Дата>
	+ "Период,"						// <Дата>
	+ "Регистратор,"					// <ДокументСсылка>
	+ "ВидОперации,"					// <Булево>
	+ "Контрагент,"						// <СправочникСсылка.Контрагенты>
	+ "Подразделение,"					// <Ссылка на справочник подразделений>
	+ "КорректироватьБУиНУ,"			// <Булево>
	+ "ОтчетностьПодписана,"			// <Булево>
	+ "ПрошлыйПериод,"					// <Булево>
	+ "ДокументРеализации,"             // <ДокументСсылка>
	+ "СтатьяПрочихДоходовИРасходов,"	// <СправочникСсылка.ПрочиеДоходыИРасходы>
	+ "Организация"						// <СправочникСсылка.Организации>
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы таблицы движений по проводкам
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"
	+ "Регистратор,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Субконто,"
	+ "Содержание,"
	+ "СчетФактура,"
	+ "Номенклатура,"
	+ "СтавкаНДС,"
	+ "СтавкаНДСДоИзменения,"
	+ "СуммаНДС,"
	+ "СуммаНДСДоИзменения,"
	+ "СуммаНДСДоКорректировки"
	;
	
	Параметры.Вставить("ТаблицаНДСТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНДСТоварыУслуги, СписокОбязательныхКолонок));

	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьПроводкуКорректировкиРеализацииТоваровУслуг(Реквизиты, СтрокаНДС, СтавкаНДС, СуммаНДС, СчетНДС, Движения, Отказ)
	
	Если СуммаНДС = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Проводка = Движения.Хозрасчетный.Добавить();
	Проводка.Период       = Реквизиты.ПериодПроводки;
	Проводка.Организация  = Реквизиты.Организация;
	Проводка.Содержание   = "Корректировка реализации";
	
	КорреспонденцияСчетНДС = ?(СуммаНДС < 0 И Реквизиты.ПрошлыйПериод И Реквизиты.ОтчетностьПодписана, "Дт", "Кт");
	КорреспонденцияКорСчет = ?(КорреспонденцияСчетНДС = "Дт", "Кт", "Дт");
	ПрочиеДоходыИРасходы   = СтрокаНДС.Субконто;
	
	Если Реквизиты.ПрошлыйПериод И Реквизиты.ОтчетностьПодписана Тогда
		КорСчетНДС = ?(КорреспонденцияКорСчет = "Кт", ПланыСчетов.Хозрасчетный.ПрочиеДоходы, ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
		ПрочиеДоходыИРасходы = Реквизиты.СтатьяПрочихДоходовИРасходов;
	Иначе
		КорСчетНДС = СтрокаНДС.СчетУчетаНДСПоРеализации;
	КонецЕсли;
	
	Проводка["Счет"+КорреспонденцияКорСчет] = КорСчетНДС;
	БухгалтерскийУчет.УстановитьСубконто(КорСчетНДС, Проводка["Субконто"+КорреспонденцияКорСчет], 1, СтрокаНДС.Субконто);
	БухгалтерскийУчет.УстановитьСубконто(КорСчетНДС, Проводка["Субконто"+КорреспонденцияКорСчет], "СтавкиНДС", СтавкаНДС);
	БухгалтерскийУчет.УстановитьСубконто(КорСчетНДС, Проводка["Субконто"+КорреспонденцияКорСчет], "РеализуемыеАктивы", СтрокаНДС.Номенклатура);
	БухгалтерскийУчет.УстановитьСубконто(КорСчетНДС, Проводка["Субконто"+КорреспонденцияКорСчет], "ПрочиеДоходыИРасходы", ПрочиеДоходыИРасходы);
	
	Проводка["Счет"+КорреспонденцияСчетНДС] = СчетНДС;
	БухгалтерскийУчет.УстановитьСубконто(СчетНДС, Проводка["Субконто"+КорреспонденцияСчетНДС], "Контрагенты", Реквизиты.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(СчетНДС, Проводка["Субконто"+КорреспонденцияСчетНДС], "СФПолученные", СтрокаНДС.СчетФактура);
	БухгалтерскийУчет.УстановитьСубконто(СчетНДС, Проводка["Субконто"+КорреспонденцияСчетНДС], "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	БухгалтерскийУчет.УстановитьСубконто(СчетНДС, Проводка["Субконто"+КорреспонденцияСчетНДС], "СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
	
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
	Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеДт = Реквизиты.Подразделение;
	КонецЕсли;
	
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеКт = Реквизиты.Подразделение;
	КонецЕсли;

	Проводка.Сумма = ?(КорреспонденцияСчетНДС = "Кт", 1, -1) * СуммаНДС;

КонецПроцедуры

Процедура СформироватьДвиженияСторноНачисленияНДС(ТаблицаРеквизиты, ТаблицаНДСНачисленный, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНДСНачисленный)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Реквизиты.Период);
	
	Если Не ПлательщикНДС Или Не ИспользуетсяПостановлениеНДС1137 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСторноНачисленияНДС(ТаблицаРеквизиты, ТаблицаНДСНачисленный);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаНДСНачисленный Из Параметры.НДСНачисленный Цикл 
		
		// НДС Продажи
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаНДСНачисленный);
		
		Движение.СуммаБезНДС = -СтрокаНДСНачисленный.СуммаБезНДС;
		Движение.НДС 		 = -СтрокаНДСНачисленный.НДС;

		// Хозрасчетный
		Движение = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Сумма	= -СтрокаНДСНачисленный.НДС;
		
		Если Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; // 76.АВ
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаНДСНачисленный.Покупатель);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФВыданные", СтрокаНДСНачисленный.СчетФактура);
            			
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			Движение.Содержание = "Сторнирование НДС по предоплате";
			
		Иначе
			
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента; // 76.НА
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаНДСНачисленный.Покупатель);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Договоры", СтрокаНДСНачисленный.ДоговорКонтрагента);
			
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента; // 68.32
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", СтрокаНДСНачисленный.Покупатель);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Договоры", СтрокаНДСНачисленный.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументОснование);
            Движение.Содержание = "Сторнирование НДС";
			
		КонецЕсли;			
			                                     		
	КонецЦикла;	
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
    Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры	

Функция ПодготовитьПараметрыСторноНачисленияНДС(ТаблицаРеквизиты, ТаблицаНДСНачисленный)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.НДСНачисленный
	
	СписокОбязательныхКолонок = ""
	+ "Организация,"					// <СправочникСсылка.Организации> - Организация
	+ "Покупатель,"						// <СправочникСсылка.Контрагенты> - Покупатель
	+ "СчетФактура,"					// <ДокументСсылка.*> - Счет-фактура
	+ "ВидЦенности,"					// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
	+ "СтавкаНДС,"						// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "ДатаОплаты,"						// <Дата> - Дата оплаты
	+ "ДокументОплаты,"					// <ДокументСсылка.*> - Документ оплаты
	+ "Событие,"						// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие
	+ "ДатаСобытия,"					// <Дата> - Дата события
	+ "ЗаписьДополнительногоЛиста,"		// <Булево> - Запись дополнительного листа
	+ "КорректируемыйПериод,"			// <Дата> - Корректируемый период
	+ "СторнирующаяЗаписьДопЛиста,"		// <Булево> - Сторнирующая запись доп. листа
	+ "ДоговорКонтрагента,"				// <СправочникСсылка.ДоговорыКонтрагентов> - Договор контрагента
	+ "ИсправленныйСчетФактура,"		// <ДокументСсылка.*> - Исправленный счет-фактура
	+ "СуммаБезНДС,"					// <Число,15,2> - Сумма без НДС
	+ "НДС";							// <Число,15,2> - НДС

	Параметры.Вставить("НДСНачисленный", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНДСНачисленный, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
	+ "Организация,"			// <СправочникСсылка.Организации> - Организация
	+ "Период,"					// <Дата> - период движений - дата документа
	+ "ВидСчетаФактуры,"		// <ПеречислениеСсылка.ВидСчетаФактурыВыставленного> - вид счета-фактуры
	+ "ДокументОснование";		// <ДокументСсылка.*> - сторнируемый документ
                                 
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

// Формирование движений при реализации основных средств
//
Процедура СформироватьДвиженияПередачаОС(ТаблицаОтгрузка, ТаблицаРеализация, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПередачаОС(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПриПередачеНедвижимости(Реквизиты.Организация, Реквизиты.Период);
	
	Если Реквизиты.ПравоСобственностиПереходитПослеГосРегистрации И НачислятьНДСПоОтгрузке Тогда
		
		СформироватьДвиженияРеализацияТоваровУслуг(
			ТаблицаОтгрузка, Неопределено, Неопределено, ТаблицаРеквизиты, Движения, Отказ);
			
	ИначеЕсли НЕ Реквизиты.ПравоСобственностиПереходитПослеГосРегистрации Тогда
		
		СформироватьДвиженияРеализацияТоваровУслуг(
			ТаблицаРеализация, Неопределено, Неопределено, ТаблицаРеквизиты, Движения, Отказ);
			
	КонецЕсли;

КонецПроцедуры

Процедура ОтразитьСведенияПоДокументамОплатыИсправляемогоСчетаФактуры(
	ТаблицаНДСНачислениеНДС, ТаблицаНДССведенияПоДокументамОплаты, Движения, Отказ)
	
	Если ТаблицаНДСНачислениеНДС.Количество() = 0 ИЛИ ТаблицаНДССведенияПоДокументамОплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СведенияОНачислении = ТаблицаНДСНачислениеНДС[0];
		
	Для Каждого СтрокаСведений Из ТаблицаНДССведенияПоДокументамОплаты Цикл
		
		Если ЗначениеЗаполнено(СтрокаСведений.НомерДокументаОплаты)
		   И ЗначениеЗаполнено(СтрокаСведений.ДатаДокументаОплаты) Тогда
			
			Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СведенияОНачислении, , "СуммаБезНДС,НДС");
			ЗаполнитьЗначенияСвойств(Движение, СтрокаСведений);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ, ВЫПОЛНЯЮЩИЕ ДВИЖЕНИЯ ПО РЕГИСТРАМ

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ПО РЕАЛИЗАЦИИ 0%"

Процедура СформироватьДвиженияНДСРеализация0РеализацияТоваровУслуг(ТоварыУслуги0, Реквизиты, Движения, Отказ)
	
	Если ТоварыУслуги0.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТоварыУслуги0.Свернуть("Контрагент,ВидЦенности,СтавкаНДС,ЭтоНесырьевойТовар", "СуммаБезНДСРуб,СуммаБУ");

	ТаблицаНДСРеализация0 = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСРеализация0");

	Для каждого СтрокаТаблицы Из ТоварыУслуги0 Цикл

		СтрокаНДСРеализация0 = ТаблицаНДСРеализация0.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНДСРеализация0, СтрокаТаблицы);

		СтрокаНДСРеализация0.Покупатель  = СтрокаТаблицы.Контрагент;
		СтрокаНДСРеализация0.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		Если Реквизиты.Период < '20111001' Тогда
			// Начиная с 01.10.2011 налоговая база по НДС при подтверждении реализации со ставкой 0% 
			// должна определяться по курсу на дату реализации
			СтрокаНДСРеализация0.КурсоваяРазница = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаБезНДСРуб;
		КонецЕсли;
		Если СтрокаТаблицы.ЭтоНесырьевойТовар Тогда
			СтрокаНДСРеализация0.ВидЦенности = Перечисления.ВидыЦенностей.ТоварыНесырьевые;
		КонецЕсли;
	КонецЦикла;

	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");

	Для каждого СтрокаТаблицы Из ТаблицаНДСРеализация0 Цикл
		Запись = Движения.НДСРеализация0.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСРеализация0.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСРеализация0РеализацияТоваровУслугКомиссионером(ТоварыУслуги0, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги0.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТоварыУслуги0.Свернуть(
		"СчетФактура,Контрагент,Покупатель,ВыставленСФ,ВидЦенности,СтавкаНДС,ЭтоНесырьевойТовар",
		"СуммаБезНДСРуб,СуммаБУ");

	ТаблицаНДСРеализация0 = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСРеализация0");

	Для каждого СтрокаТаблицы Из ТоварыУслуги0 Цикл

		СтрокаНДСРеализация0 = ТаблицаНДСРеализация0.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНДСРеализация0, СтрокаТаблицы);
		
		Если СтрокаТаблицы.ВыставленСФ Тогда
			СтрокаНДСРеализация0.СчетФактура = СтрокаТаблицы.СчетФактура;
		Иначе
			СтрокаНДСРеализация0.СчетФактура = Реквизиты.Регистратор;
		КонецЕсли;
		
		СтрокаНДСРеализация0.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		Если Реквизиты.Период < '20111001' Тогда
			// Начиная с 01.10.2011 налоговая база по НДС при подтверждении реализации со ставкой 0% 
			// должна определяться по курсу на дату реализации
			СтрокаНДСРеализация0.КурсоваяРазница = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаБезНДСРуб;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭтоНесырьевойТовар Тогда
			СтрокаНДСРеализация0.ВидЦенности = Перечисления.ВидыЦенностей.ТоварыНесырьевые;
		КонецЕсли;

	КонецЦикла;

	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");

	Для каждого СтрокаТаблицы Из ТаблицаНДСРеализация0 Цикл
		Запись = Движения.НДСРеализация0.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСРеализация0.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСРеализация0ОказаниеУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыУслуги.Индексы.Добавить("ВыданСФ");
	ТоварыУслуги0 = ТоварыУслуги.Скопировать(
		Новый Структура("ВыданСФ", Истина), 
		"Контрагент,ВидЦенности,СтавкаНДС,СчетФактура,СуммаБезНДСРуб,СуммаБУ");

	Если ТоварыУслуги0.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТоварыУслуги0.Свернуть("Контрагент,ВидЦенности,СтавкаНДС,СчетФактура", "СуммаБезНДСРуб,СуммаБУ");

	ТаблицаНДСРеализация0 = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСРеализация0");
		
	Для каждого СтрокаТаблицы Из ТоварыУслуги0 Цикл

		СтрокаНДСРеализация0 = ТаблицаНДСРеализация0.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНДСРеализация0, СтрокаТаблицы);
		
		СтрокаНДСРеализация0.Покупатель  = СтрокаТаблицы.Контрагент;
		СтрокаНДСРеализация0.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		Если Реквизиты.Период < '20111001' Тогда
			// Начиная с 01.10.2011 налоговая база по НДС при подтверждении реализации со ставкой 0% 
			// должна определяться по курсу на дату реализации
			СтрокаНДСРеализация0.КурсоваяРазница = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаБезНДСРуб;
		КонецЕсли;
	КонецЦикла;

	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");

	Для каждого СтрокаТаблицы Из ТаблицаНДСРеализация0 Цикл
		Запись = Движения.НДСРеализация0.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСРеализация0.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСРеализация0КурсовыеРазницы(Реквизиты, ТаблицаВзаиморасчетов, ТаблицаОстатков, Движения)

	ТаблицаОстатков.Колонки.Добавить("КурсоваяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	СтруктураОтбора = Новый Структура("Покупатель, СчетФактура");
	МассивСумм = Новый Массив;

	ЕстьСтавкаНДС = ТаблицаВзаиморасчетов.Колонки.Найти("СтавкаНДС") <> Неопределено;

	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл

		Если ЕстьСтавкаНДС
			И ЗначениеЗаполнено(СтрокаВзаиморасчетов.СтавкаНДС)
			И НЕ СтрокаВзаиморасчетов.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора.Покупатель = СтрокаВзаиморасчетов.Контрагент;
		СтруктураОтбора.СчетФактура = СтрокаВзаиморасчетов.ДокументРасчетов;
		СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);

		СуммаОплатыКоэф = СтрокаВзаиморасчетов.ОстатокВзаиморасчетов/СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		СуммаРеализации0 = 0;

		МассивСумм.Очистить();

		Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
			СуммаРеализации0 = СуммаРеализации0 + СтрокаОстатков.Сумма;
			МассивСумм.Добавить(СтрокаОстатков.Сумма);
		КонецЦикла;

		Если СуммаРеализации0 = 0 Тогда
			Продолжить;
		КонецЕсли;

		КурсоваяРазница = СтрокаВзаиморасчетов.СуммаБУ - СуммаРеализации0 / СуммаОплатыКоэф;

		Если КурсоваяРазница = 0 Тогда
			Продолжить;
		КонецЕсли;

		МассивРаспределения = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(КурсоваяРазница, МассивСумм);

		Для К = 0 По МассивРаспределения.Количество() - 1 Цикл

			СтрокаОстатков = СтрокиОстатков[К];

			Движение = Движения.НДСРеализация0.ДобавитьПриход();

			ЗаполнитьЗначенияСвойств(Движение, СтрокаОстатков);

			Движение.Период 		 = Реквизиты.Период;
			Движение.ДатаСобытия 	 = Реквизиты.Период;
			Движение.КурсоваяРазница = МассивРаспределения[К];

		КонецЦикла;

	КонецЦикла;

	Движения.НДСРеализация0.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСРеализация0(ТаблицаДвижений, Реквизиты, Движения, Отказ)

	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Запись = Движения.НДСРеализация0.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
        ЗаполнитьЗначенияСвойств(Запись, Реквизиты);
		
	КонецЦикла;

	Движения.НДСРеализация0.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСРеализация0НачислениеНДСПоРеализации0(Реквизиты, ТаблицаПоРеализации, Движения, Отказ)

	Для каждого СтрокаРеализации Из ТаблицаПоРеализации Цикл

		Движение = Движения.НДСРеализация0.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаРеализации);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

	КонецЦикла;

	Движения.НДСРеализация0.Записывать = Истина;

КонецПроцедуры

// ДВИЖЕНИЯ РЕГИСТРА "НДС ПРЕДЪЯВЛЕННЫЙ РЕАЛИЗАЦИЯ 0%"

Процедура СформироватьДвиженияНДСПредъявленныйРеализация0(ТаблицаДвижений, Реквизиты, Движения, Отказ) Экспорт

	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Запись = Движения.НДСПредъявленныйРеализация0.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Запись, Реквизиты);
		
	КонецЦикла;

	Движения.НДСПредъявленныйРеализация0.Записывать = Истина;

КонецПроцедуры


// ДВИЖЕНИЯ РЕГИСТРА "НДС ЗАПИСИ КНИГИ ПРОДАЖ"

Процедура СформироватьДвиженияНДСНомераДокументовОплатыПоТекущимДвижениям(Реквизиты, Движения, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.НомерПлатежноРасчетногоДокумента)
	   И НЕ ЗначениеЗаполнено(Реквизиты.ДатаПлатежноРасчетногоДокумента) Тогда
		Возврат;
	КонецЕсли;

	Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Движения.НДСЗаписиКнигиПродаж[0], , "СуммаБезНДС, НДС");
	Движение.ДатаДокументаОплаты  = Реквизиты.ДатаПлатежноРасчетногоДокумента;
	Движение.НомерДокументаОплаты = Реквизиты.НомерПлатежноРасчетногоДокумента;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажРеализацияТоваровУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВерсияУчетаНДС = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	ПлательщикНДС  = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, Реквизиты.Период);
	
	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");
	
	Для каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		
		Если ВерсияУчетаНДС > 1 И СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПлательщикНДС
			И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СтрокаТаблицы.СчетДоходов)
			И ПлательщикЕНВД Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗаписиКнигиПродаж.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.Покупатель  = СтрокаТаблицы.Контрагент;
		НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		НоваяСтрока.НДС         = СтрокаТаблицы.СуммаНДСРуб;

	КонецЦикла;
	
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	
	Если Реквизиты.НДСИсчисляетсяНалоговымАгентом = Истина
	   И УчетНДС.ВедетсяУчетНДСПоФЗ335(Реквизиты.Период) Тогда
		ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НалогИсчисляетПокупатель, "Событие");
	Иначе
		ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	КонецЕсли;
	
	// Для операций поступления/реализации договор не заполняется
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");

	ТаблицаЗаписиКнигиПродаж.Свернуть("Период,Организация,Покупатель,СчетФактура,ВидЦенности,СтавкаНДС,
		|ДатаОплаты,ДокументОплаты,Событие,ДатаСобытия,ДоговорКонтрагента",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажРеализацияТоваровУслугКомиссионером(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВерсияУчетаНДС = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, Реквизиты.Период);
	
	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");
	Для каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		
		Если ВерсияУчетаНДС > 1 И СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СтрокаТаблицы.СчетДоходов)
			И ПлательщикЕНВД Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗаписиКнигиПродаж.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
 		Если СтрокаТаблицы.ВыставленСФ Тогда
			НоваяСтрока.СчетФактура = СтрокаТаблицы.СчетФактура;
		Иначе
			НоваяСтрока.СчетФактура = Реквизиты.Регистратор;
		КонецЕсли;
		
		НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		НоваяСтрока.НДС         = СтрокаТаблицы.СуммаНДСРуб;

	КонецЦикла;
	
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	// Для операций поступления/реализации договор не заполняется
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");

	ТаблицаЗаписиКнигиПродаж.Свернуть("Период,Организация,Покупатель,СчетФактура,ВидЦенности,СтавкаНДС,
		|ДатаОплаты,ДокументОплаты,Событие,ДатаСобытия,ДоговорКонтрагента",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажОказаниеУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	ПлательщикНДС  = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ПлательщикЕНВД =УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, Реквизиты.Период);
	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");

	Для каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		
		Если ВерсияУчетаНДС > 1 И СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПлательщикНДС
			И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СтрокаТаблицы.СчетДоходов) 
			И ПлательщикЕНВД Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Покупатель = СтрокаТаблицы.Контрагент;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
			НоваяСтрока.СчетФактура = Реквизиты.Регистратор;
		КонецЕсли; 

		НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		НоваяСтрока.НДС         = СтрокаТаблицы.СуммаНДСРуб;

	КонецЦикла;

	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	// Для операций поступления/реализации договор не заполняется
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");

	ТаблицаЗаписиКнигиПродаж.Свернуть("Период,Организация,Покупатель,СчетФактура,ВидЦенности,СтавкаНДС,
		|ДатаОплаты,ДокументОплаты,Событие,ДатаСобытия,ДоговорКонтрагента",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажПолученныйАванс(Реквизиты, ТаблицаАвансов, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();

		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);

		Движение.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
		Движение.НДС         = СтрокаТаблицы.СуммаНДС;
		Движение.Покупатель  = СтрокаТаблицы.Контрагент;
		
		Если Реквизиты.НДСИсчисляетсяНалоговымАгентом = Истина Тогда
			Движение.Событие = Перечисления.СобытияПоНДСПродажи.НалогИсчисляетПокупатель;
		Иначе
			Движение.Событие = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		КонецЕсли;
		
		Если Реквизиты.Исправление Тогда
			Движение.ДатаДокументаОплаты  = Реквизиты.ДатаПлатежноРасчетногоДокумента;
			Движение.НомерДокументаОплаты = Реквизиты.НомерПлатежноРасчетногоДокумента;
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажРозничнаяПродажа(ТаблицаЦенности, Движения, Отказ)

	Для каждого СтрокаЦенности Из ТаблицаЦенности Цикл

		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();

		ЗаполнитьЗначенияСвойств(Движение, СтрокаЦенности);

		Движение.СчетФактура    = СтрокаЦенности.ДокументОснование;
		Движение.ДокументОплаты = СтрокаЦенности.ДокументОснование;

		Движение.ДатаОплаты     = СтрокаЦенности.Период;
		Движение.ДатаСобытия    = СтрокаЦенности.Период;

		Движение.ВидЦенности    = Перечисления.ВидыЦенностей.Товары;
		Движение.Событие        = Перечисления.СобытияПоНДСПродажи.Реализация;

	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ)

	Реквизиты = ТаблицаРеквизиты[0];

	Если Реквизиты.НаправлениеДвижения = "Поступление" Тогда
		ЗнакОстатков = 1;
	Иначе
		ЗнакОстатков = -1;
	КонецЕсли;

	Для каждого СтрокаРазниц Из ТаблицаСуммовыеРазницы Цикл

		СуммоваяРазница = СтрокаРазниц.Разница * ЗнакОстатков;

		Если СуммоваяРазница > 0 И СтрокаРазниц.НДС <> 0 
			И СтрокаРазниц.ДатаДокументаРасчетов < '20111001' Тогда

			Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();

			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

			Движение.ДоговорКонтрагента = СтрокаРазниц.ДоговорКонтрагента;

			Движение.СчетФактура = Реквизиты.Регистратор;
			Движение.ДатаОплаты  = Реквизиты.Период;
			Движение.ДатаСобытия = Реквизиты.Период;
			Движение.Покупатель	 = СтрокаРазниц.Контрагент;
			Движение.ВидЦенности = Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате;
			Движение.Событие     = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			Движение.СтавкаНДС	 = СтрокаРазниц.СтавкаНДС;
			Движение.СуммаБезНДС = СтрокаРазниц.Разница - СтрокаРазниц.НДС;
			Движение.НДС 		 = СтрокаРазниц.НДС;

		КонецЕсли;

	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажНачисленНДСНалоговымАгентом(Реквизиты, ТаблицаАвансы, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ТаблицаАвансы Цикл
		
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
		Движение.Покупатель     = Реквизиты.Контрагент;
		Движение.СчетФактура    = Реквизиты.ДокументОснование;
		Движение.ДокументОплаты = Реквизиты.ДокументОснование;
		
		Движение.НДС            = СтрокаТаблицы.СуммаНДС;
		Движение.Событие        = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
		Движение.ДатаСобытия    = Реквизиты.Период;
		
		Если Реквизиты.Исправление Тогда
			Движение.ДатаДокументаОплаты  = Реквизиты.ДатаПлатежноРасчетногоДокумента;
			Движение.НомерДокументаОплаты = Реквизиты.НомерПлатежноРасчетногоДокумента;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажРеализацияТоваровУслугКомитентаНерезидента(Реквизиты, ТаблицаДвижений, Движения, Отказ)
	
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Покупатель			= СтрокаТаблицы.Покупатель;
		Движение.СчетФактура		= Реквизиты.Регистратор;
		
		Движение.ВидЦенности		= Перечисления.ВидыЦенностей.НалоговыйАгентКомитент;
		Движение.СтавкаНДС			= СтрокаТаблицы.СтавкаНДС;
		Движение.СуммаБезНДС		= СтрокаТаблицы.Сумма;
		Движение.НДС 				= СтрокаТаблицы.НДС;
		Движение.Событие			= Перечисления.СобытияПоНДСПродажи.Реализация;
		Движение.ДатаСобытия		= Реквизиты.Период;
		Движение.ДоговорКонтрагента	= Неопределено;
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСПоРеализации(ТаблицаПоРеализации, Движения, Отказ)

	Для каждого СтрокаРеализации Из ТаблицаПоРеализации Цикл

		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаРеализации);

	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСпоСМРХозспособом(Реквизиты, СМРХозспособом, Движения, Отказ)

	Для каждого СтрокаСМР Из СМРХозспособом Цикл

		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСМР);

	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажВозвратТоваровПоставщику(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");

	Для каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		
		НоваяСтрока = ТаблицаЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Покупатель = СтрокаТаблицы.Контрагент;

		НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		НоваяСтрока.НДС         = СтрокаТаблицы.СуммаНДСРуб;

	КонецЦикла;

	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	// Для операций поступления/реализации договор не заполняется
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");

	ТаблицаЗаписиКнигиПродаж.Свернуть("Период,Организация,Покупатель,СчетФактура,ВидЦенности,СтавкаНДС,
		|ДатаОплаты,ДокументОплаты,Событие,ДатаСобытия,ДоговорКонтрагента",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажВозвратТоваровОтПокупателя(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВерсияУчетаНДС	= УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	
	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");

	Для каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		
		Если ВерсияУчетаНДС > 1 И СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;			

		НоваяСтрока = ТаблицаЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.СуммаБезНДС	= -НоваяСтрока.СуммаБезНДС;
		НоваяСтрока.НДС			= -НоваяСтрока.НДС;

	КонецЦикла;
	
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	// Для операций поступления/реализации договор не заполняется
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");

	ТаблицаЗаписиКнигиПродаж.Свернуть("Период,Организация,Покупатель,СчетФактура,ВидЦенности,СтавкаНДС,
		|ДатаОплаты,ДокументОплаты,Событие,ДатаСобытия,ДоговорКонтрагента",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродаж(Реквизиты, ТаблицаДвижений, Движения, Отказ)

	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Запись, Реквизиты);
		
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНомераДокументовОплаты(ТаблицаДвижений, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаДвижений) Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
					
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записать(Истина);

КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ЗАПИСИ КНИГИ ПОКУПОК"

Процедура СформироватьДвиженияНДСЗаписиКнигиПокупокПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ)

	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Запись = Движения.НДСЗаписиКнигиПокупок.Добавить();

		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;

	КонецЦикла;

	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПокупок(ДанныеДвижений, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Запись = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);

	КонецЦикла;

	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;

КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ПРЕДЪЯВЛЕННЫЙ"

Процедура СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ) Экспорт
	
	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписаниеНДСБезСчетаФактуры = ДанныеДвижений.Колонки.Найти("ПредъявленСчетФактура") <> Неопределено;
	// В случае если по документу есть расхождения, то фиксируем в регистре документально подтвержденные суммы.
	ЕстьРасхождения = ДанныеДвижений.Колонки.Найти("СуммаПодтвержденнаяРуб") <> Неопределено
		И ДанныеДвижений.Колонки.Найти("СуммаНДСПодтвержденнаяРуб") <> Неопределено;
		
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		
		Если СписаниеНДСБезСчетаФактуры 
			И Не СтрокаТаблицы.ПредъявленСчетФактура
			И Не СтрокаТаблицы.НДСВключенВСтоимость Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Движения.НДСПредъявленный.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Если ЕстьРасхождения
			И (СтрокаТаблицы.СуммаПодтвержденнаяРуб <> 0 
			ИЛИ СтрокаТаблицы.СуммаНДСПодтвержденнаяРуб <> 0) Тогда 
			Запись.СуммаБезНДС = СтрокаТаблицы.СуммаПодтвержденнаяРуб - СтрокаТаблицы.СуммаНДСПодтвержденнаяРуб;
			Запись.НДС         = СтрокаТаблицы.СуммаНДСПодтвержденнаяРуб;
		КонецЕсли;
		Запись.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
		
	КонецЦикла;
	
	Движения.НДСПредъявленный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения, НДСОтПодотчетногоЛица = Ложь, Отказ) Экспорт

	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В случае если по документу есть расхождения, то фиксируем в регистре документально подтвержденные суммы.
	ЕстьРасхождения = ДанныеДвижений.Колонки.Найти("СуммаПодтвержденнаяРуб") <> Неопределено
		И ДанныеДвижений.Колонки.Найти("СуммаНДСПодтвержденнаяРуб") <> Неопределено;

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если НДСОтПодотчетногоЛица И Не СтрокаТаблицы.НДСВключенВСтоимость Тогда 
			Продолжить;	
		КонецЕсли;
		
		Запись = Движения.НДСПредъявленный.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		
		Если ЕстьРасхождения
			И (СтрокаТаблицы.СуммаПодтвержденнаяРуб <> 0 
			ИЛИ СтрокаТаблицы.СуммаНДСПодтвержденнаяРуб <> 0) Тогда 
			Запись.СуммаБезНДС = СтрокаТаблицы.СуммаПодтвержденнаяРуб - СтрокаТаблицы.СуммаНДСПодтвержденнаяРуб;
			Запись.НДС         = СтрокаТаблицы.СуммаНДСПодтвержденнаяРуб;
		КонецЕсли;

		Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
		Запись.Событие = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;

	КонецЦикла;

	Движения.НДСПредъявленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйВычетНДС(ТаблицаДвижений, Движения, Списание = Ложь, РассчитыватьСуммы = Истина, Отказ)

	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Если Списание Тогда 
			Запись = Движения.НДСПредъявленный.ДобавитьПриход();	
		Иначе
			Запись = Движения.НДСПредъявленный.ДобавитьРасход();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		
		Если РассчитыватьСуммы Тогда
			Запись.СуммаБезНДС = ?(Списание, - СтрокаТаблицы.СуммаБезНДС, СтрокаТаблицы.СуммаБезНДС);
			Запись.НДС         = ?(Списание, - СтрокаТаблицы.НДС, СтрокаТаблицы.НДС);
		Иначе
			Запись.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС;
			Запись.НДС         = СтрокаТаблицы.НДС;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Запись.Событие) Тогда
			Запись.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
		КонецЕсли;
		
		Если Перечисления.ВидыЦенностей.ЭтоНалоговыйАгент(СтрокаТаблицы.ВидЦенности) Тогда
			Запись.ДатаОплаты = '00010101';
		КонецЕсли;

	КонецЦикла;

	Движения.НДСПредъявленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйНачислениеНДСпоСМРХозспособом(Реквизиты, СМРХозспособом, Движения, Отказ)

	Для каждого СтрокаТаблицы Из СМРХозспособом Цикл

		Движение = Движения.НДСПредъявленный.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);

	КонецЦикла;

	Движения.НДСПредъявленный.Записывать = Истина;

КонецПроцедуры

// ДВИЖЕНИЯ РЕГИСТРА "ЖУРНАЛ УЧЕТА СЧЕТОВ-ФАКТУР"

Функция ПодготовитьЗаписьЖурналаУчетаСчетовФактур(ТаблицаРеквизиты) Экспорт

	Если ТаблицаРеквизиты = Неопределено
		ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписиЖурналаУчетаСчетовФактур	= ТаблицаРеквизиты.Скопировать();
	
	КолонкиГруппировки = ""
	+ "Период,"											// <Дата> - период движений - дата документа
	+ "Регистратор,"									// <ДокументСсылка.*> - документ-регистратор движений
	+ "Организация,"									// <СправочникСсылка.Организации> - организация
	+ "Контрагент,"										// <СправочникСсылка.Контрагенты, СправочникСсылка.Организации> - контрагент
	+ "КППКонтрагента,"									// <Строка> - КПП контрагента, может отличаться от Контрагент.КПП
	+ "Продавец,"										// <СправочникСсылка.Контрагенты> - от чьего имени составлен счет-фактура
	+ "Посредник,"										// <СправочникСсылка.Контрагенты> - посредник(комиссионер,агент)
	+ "СчетФактура,"									// <ДокументСсылка.*> - Счет-фактура
	+ "ЧастьЖурнала,"									// <ПеречислениеСсылка.ЧастиЖурналаУчетаСчетовФактур> - Часть журнала
	+ "ДатаВыставленияПолучения,"						// <Дата> - Дата выставления/получения
	+ "КодСпособаВыставленияПолучения,"					// <Число,1,0> - Код способа выставления/получения
	+ "КодВидаОперации,"								// <Строка,10> - код вида операции
	+ "КодВидаОперацииКомиссия,"						// <Строка,10> - код вида операции для журнала с 2015 года
	+ "КодВидаОперацииНаУменьшение,"					// <Строка,10> - код вида операции на уменьшение
	+ "НомерСчетаФактуры,"								// <Строка,15> - Номер счета-фактуры
	+ "ДатаСчетаФактуры,"								// <Дата> - Дата счета-фактуры
	+ "НомерКорректировочногоСчетаФактуры,"				// <Строка,15> - Номер корректировочного счета-фактуры
	+ "ДатаКорректировочногоСчетаФактуры,"				// <Дата> - Дата корректировочного счета-фактуры
	+ "НомерИсправления,"								// <Строка,11> - Номер исправления
	+ "ДатаИсправления,"								// <Дата> - Дата исправления
	+ "Валюта,"											// <СправочникСсылка.Валюты> - валюта документа
	+ "ПоСтавкеБезНДС,"									// <Булево> - По ставке "Без НДС"
	+ "СчетФактураНеВыставляется,"						// <Булево> - Счет-фактура не выставляется
	+ "НомерИсправленияКорректировочногоСчетаФактуры,"	// <Строка,10> - Номер исправления корректировочного счета-фактуры
	+ "ДатаИсправленияКорректировочногоСчетаФактуры,"	// <Дата> - Дата исправления корректировочного счета-фактуры
	+ "Субкомиссионер,"									// <СправочникСсылка.Контрагенты> - Субкомиссионер
	+ "СчетФактураВыданныйПокупателю,"					// <ДокументСсылка.СчетФактураВыданный> - Счет-фактура выданный покупателю при реализации товаров комитента
	+ "КодВидаСделки,"									// <Строка, 2> - Код вида сделки
	+ "НомерСчетаФактурыПродавца,"						// <Строка, 50> - Номер счета-фактуры продавца
	+ "ДатаСчетаФактурыПродавца,"						//  <Дата> - Дата счета-фактуры продавца
	+ "ИндексСтроки,"									// <Число,10,0> - Служебное измерение для сводного корректировочного счета-фактуры
	+ "ИсправлениеСобственнойОшибки,"					// <Булево> - Исправление собственной ошибки
	+ "ИсправляемыйСчетФактура,"						// <ДокументСсылка.*> - Исправляемый счет-фактура
	+ "ИсправленныйСчетФактура,"						// <ДокументСсылка.*> - Исправленный счет-фактура
	+ "ИННКонтрагента,"									// <Строка> - ИНН контрагента, может отличаться от Контрагент.ИНН
	+ "Сторно,"											// <Булево> - Сторно
	+ "ИННПродавца,"									// <Строка> - ИНН продавца,используется при исправлении собственных ошибок
	+ "КПППродавца,"									// <Строка> - КПП продавца,используется при исправлении собственных ошибок
	+ "ИННСубкомиссионера,"								// <Строка> - ИНН субкомиссионера,используется при исправлении собственных ошибок
	+ "КППСубкомиссионера,"								// <Строка> - КПП субкомиссионера,используется при исправлении собственных ошибок
	+ "СчетФактураПолученныйОтПродавца";				// <ДокументСсылка.СчетФактураПолученный> - Счет-фактура полученный от продавца
	
	КолонкиСуммирования = ""
	+ "СуммаПоСчетуФактуре,"							// <Число,15,2> - Сумма по счету-фактуре с НДС
	+ "СуммаПоСчетуФактуреКомиссия,"					// <Число,15,2> - Сумма по счету-фактуре с НДС по комиссионным операциям
	+ "СуммаНДС,"										// <Число,15,2> - Сумма НДС
	+ "СуммаНДСКомиссия,"								// <Число,15,2> - Сумма НДС по комиссии
	+ "СуммаПоСчетуФактуреРазницаУменьшение,"			// <Число,15,2> - Сумма по счету-фактуре (разница к уменьшению)
	+ "СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,"	// <Число,15,2> - Сумма по счету-фактуре (разница к уменьшению) по комиссионным товарам
	+ "СуммаПоСчетуФактуреРазницаУвеличение,"			// <Число,15,2> - Сумма по счету фактуре (разница к доплате)
	+ "СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,"	// <Число,15,2> - Сумма по счету фактуре (разница к доплате) по комиссионным товарам
	+ "СуммаНДСРазницаУменьшение,"						// <Число,15,2> - Сумма НДС (разница к уменьшению)
	+ "СуммаНДСРазницаУменьшениеКомиссия,"				// <Число,15,2> - Сумма НДС (разница к уменьшению) по комиссионным товарам
	+ "СуммаНДСРазницаУвеличение,"						// <Число,15,2> - Сумма НДС (разница к доплате)
	+ "СуммаНДСРазницаУвеличениеКомиссия";				// <Число,15,2> - Сумма НДС (разница к доплате) по комиссионным товарам
	
	ЗаписиЖурналаУчетаСчетовФактур.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
	
	Возврат ЗаписиЖурналаУчетаСчетовФактур;	

КонецФункции

Процедура СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЖурналУчетаСчетовФактурРегистрация(ТаблицаРеквизиты);
	ЗаписиЖурнала = Параметры.ЗаписьЖурнала;
	
	Для каждого ЗаписьЖурнала Из ЗаписиЖурнала Цикл
		
		ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(ЗаписьЖурнала.Период);
		
		Если НЕ ИспользуетсяПостановлениеНДС1137 Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗаписьЖурнала.СуммаПоСчетуФактуреКомиссия <> 0
		 ИЛИ ЗаписьЖурнала.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
		 ИЛИ ЗаписьЖурнала.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0 Тогда
		
			ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(ЗаписьЖурнала.Период);
			ВозможенСоставнойКод     = (ВерсияКодовВидовОпераций < 3);
			КодВидаОперацииКомиссия   = "";
			КодВидаОперацииУменьшение = "";
			
			Если СтрДлина(ЗаписьЖурнала.КодВидаОперации) >= 4
			   И ВозможенСоставнойКод Тогда 
				// Обрабатывается составной код в случае одновременной реализации (приобретения)
				// собственных и комиссионных товаров.
				Если СтрНайти(ЗаписьЖурнала.КодВидаОперации, "04") > 0 Тогда
					КодВидаОперацииКомиссия = "04";
				ИначеЕсли СтрНайти(ЗаписьЖурнала.КодВидаОперации, "05") > 0 Тогда
					КодВидаОперацииКомиссия = "05"
				ИначеЕсли СтрНайти(ЗаписьЖурнала.КодВидаОперации, "13") > 0 Тогда
					КодВидаОперацииКомиссия = "13"
				КонецЕсли;
			Иначе
				// Для счетов-фактур, выставленных при исполнении обязанностей налогового агента комиссионером по закупке, а также 
				// перевыставленных на основании счетов-фактур используется код "01".
				Если ВерсияКодовВидовОпераций >= 3 Тогда
					КодВидаОперацииКомиссия = ?(ЗаписьЖурнала.КодВидаОперации = "06", "01", ЗаписьЖурнала.КодВидаОперации);
				Иначе
					КодВидаОперацииКомиссия = ЗаписьЖурнала.КодВидаОперации;
				КонецЕсли;
			КонецЕсли;
			
			// Для корректировочных счетов-фактур по комиссии дополнительно проверим код вида операции
			Если ЗаписьЖурнала.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
				ИЛИ ЗаписьЖурнала.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0 Тогда
				
				Если ЗаписьЖурнала.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия = 0 Тогда
					КодВидаОперацииКомиссия = "";
				КонецЕсли;
				
				Если ЗаписьЖурнала.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0 Тогда 
					КодВидаОперацииУменьшение = ЗаписьЖурнала.КодВидаОперацииНаУменьшение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КодВидаОперацииКомиссия)
				И ЗначениеЗаполнено(КодВидаОперацииУменьшение) Тогда 
				КодВидаОперацииКомиссия = КодВидаОперацииКомиссия + ";" + КодВидаОперацииУменьшение;
			ИначеЕсли НЕ ЗначениеЗаполнено(КодВидаОперацииКомиссия) Тогда 
				КодВидаОперацииКомиссия = КодВидаОперацииУменьшение;
			КонецЕсли;
			
			ЗаписьЖурнала.КодВидаОперацииКомиссия = КодВидаОперацииКомиссия;
			
		КонецЕсли;
		
		Если ЗаписьЖурнала.ИсправлениеСобственнойОшибки
			И ЗначениеЗаполнено(ЗаписьЖурнала.ИсправляемыйСчетФактура) Тогда
			ИсходныйСчетФактура = УчетНДСПереопределяемый.ПолучитьИсходныйСчетФактуру(ЗаписьЖурнала.ИсправляемыйСчетФактура);
			ЗаписьЖурнала.ДатаВыставленияПолучения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходныйСчетФактура, "Дата");
		КонецЕсли;
		
		// Дополнительно искать посредника необходимо в случае, если была сделана корректировка на корректировку 
		Если ЗначениеЗаполнено(ЗаписьЖурнала.ИсправляемыйСчетФактура) И НЕ ЗначениеЗаполнено(ЗаписьЖурнала.Посредник) Тогда
			ЗаписьЖурнала.Посредник = ПосредникДляКорректировочногоСчетаФактуры(ЗаписьЖурнала.ИсправляемыйСчетФактура);
		КонецЕсли;
		
		Движение = Движения.ЖурналУчетаСчетовФактур.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ЗаписьЖурнала);
		
	КонецЦикла;
	
	Движения.ЖурналУчетаСчетовФактур.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыЖурналУчетаСчетовФактурРегистрация(ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ЗаписьЖурнала
	
	СписокОбязательныхКолонок = ""
		+ "Период,"											// <Дата> - период движений - дата документа
		+ "Регистратор,"									// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"									// <СправочникСсылка.Организации> - организация
		+ "Контрагент,"										// <СправочникСсылка.Контрагенты, СправочникСсылка.Организации> - контрагент
		+ "КППКонтрагента,"									// <Строка> - КПП контрагента, может отличаться от Контрагент.КПП
															// если сделка осуществляется через обособленное подразделение контрагента
		+ "Продавец,"										// <СправочникСсылка.Контрагенты> - от чьего имени составлен счет-фактура
		+ "Посредник,"										// <СправочникСсылка.Контрагенты> - посредник
		+ "СчетФактура,"									// <ДокументСсылка.*> - Счет-фактура
		+ "ЧастьЖурнала,"									// <ПеречислениеСсылка.ЧастиЖурналаУчетаСчетовФактур> - Часть журнала
		+ "ДатаВыставленияПолучения,"						// <Дата> - Дата выставления/получения
		+ "КодСпособаВыставленияПолучения,"					// <Число,1,0> - Код способа выставления/получения
		+ "КодВидаОперации,"								// <Строка,10> - код вида операции
		+ "КодВидаОперацииКомиссия,"						// <Строка,10> - код вида операции для журнала с 2015 года
		+ "КодВидаОперацииНаУменьшение,"					// <Строка,10> - код вида операции на уменьшение
		+ "НомерСчетаФактуры,"								// <Строка,15> - Номер счета-фактуры
		+ "ДатаСчетаФактуры,"								// <Дата> - Дата счета-фактуры
		+ "НомерКорректировочногоСчетаФактуры,"				// <Строка,15> - Номер корректировочного счета-фактуры
		+ "ДатаКорректировочногоСчетаФактуры,"				// <Дата> - Дата корректировочного счета-фактуры
		+ "НомерИсправления,"								// <Строка,11> - Номер исправления
		+ "ДатаИсправления,"								// <Дата> - Дата исправления
		+ "Валюта,"											// <СправочникСсылка.Валюты> - валюта документа
		+ "СуммаПоСчетуФактуре,"							// <Число,15,2> - Сумма по счету-фактуре с НДС
		+ "СуммаПоСчетуФактуреКомиссия,"					// <Число,15,2> - Сумма по счету-фактуре с НДС по комиссионным операциям
		+ "СуммаНДС,"										// <Число,15,2> - Сумма НДС
		+ "СуммаНДСКомиссия,"								// <Число,15,2> - Сумма НДС по комиссионным товарам
		+ "СуммаПоСчетуФактуреРазницаУменьшение,"			// <Число,15,2> - Сумма по счету-фактуре (разница к уменьшению)
		+ "СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,"	// <Число,15,2> - Сумма по счету-фактуре (разница к уменьшению) по комиссионным товарам
		+ "СуммаПоСчетуФактуреРазницаУвеличение,"			// <Число,15,2> - Сумма по счету фактуре (разница к доплате)
		+ "СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,"	// <Число,15,2> - Сумма по счету фактуре (разница к доплате) по комиссионным товарам
		+ "СуммаНДСРазницаУменьшение,"						// <Число,15,2> - Сумма НДС (разница к уменьшению)
		+ "СуммаНДСРазницаУменьшениеКомиссия,"				// <Число,15,2> - Сумма НДС (разница к уменьшению) по комиссионным товарам
		+ "СуммаНДСРазницаУвеличение,"						// <Число,15,2> - Сумма НДС (разница к доплате)
		+ "СуммаНДСРазницаУвеличениеКомиссия,"				// <Число,15,2> - Сумма НДС (разница к доплате) по комиссионным товарам
		+ "ПоСтавкеБезНДС,"									// <Булево> - По ставке "Без НДС"
		+ "СчетФактураНеВыставляется,"						// <Булево> - Счет-фактура не выставляется
		+ "НомерИсправленияКорректировочногоСчетаФактуры,"	// <Строка,10> - Номер исправления корректировочного счета-фактуры
		+ "ДатаИсправленияКорректировочногоСчетаФактуры,"	// <Дата> - Дата исправления корректировочного счета-фактуры
		+ "Субкомиссионер,"									// <СправочникСсылка.Контрагенты> - Субкомиссионер
		+ "СчетФактураВыданныйПокупателю,"					// <ДокументСсылка.СчетФактураВыданный> - Счет-фактура выданный покупателю при реализации товаров комитента
		+ "КодВидаСделки,"									// <Строка, 2> - Код вида сделки
		+ "НомерСчетаФактурыПродавца,"						// <Строка, 50> - Номер счета-фактуры продавца
		+ "ДатаСчетаФактурыПродавца,"						// <Дата> - Дата счета-фактуры продавца
		+ "ИндексСтроки,"									// <Число,10,0> - Служебное измерение для сводного корректировочного счета-фактуры
		+ "ИсправлениеСобственнойОшибки,"					// <Булево> - Исправление собственной ошибки
		+ "ИсправляемыйСчетФактура,"						// <ДокументСсылка.*> - Исправляемый счет-фактура
		+ "ИсправленныйСчетФактура,"						// <ДокументСсылка.*> - Исправленный счет-фактура
		+ "ИННКонтрагента,"									// <Строка> - ИНН контрагента, может отличаться от Контрагент.ИНН
		+ "Сторно,"											// <Булево> - Сторно
		+ "ИННПродавца,"									// <Строка> - ИНН продавца,используется при исправлении собственных ошибок
		+ "КПППродавца,"									// <Строка> - КПП продавца,используется при исправлении собственных ошибок
		+ "ИННСубкомиссионера,"								// <Строка> - ИНН субкомиссионера,используется при исправлении собственных ошибок
		+ "КППСубкомиссионера,"								// <Строка> - КПП субкомиссионера,используется при исправлении собственных ошибок
		+ "СчетФактураПолученныйОтПродавца";				// <ДокументСсылка.СчетФактураПолученный> - Счет-фактура полученный от продавца
		
		Параметры.Вставить("ЗаписьЖурнала", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// ДВИЖЕНИЯ РЕГИСТРА "ОШИБОЧНЫЕ РЕКВИЗИТЫ КОНТРАГЕНТА"

Процедура СформироватьДвиженияОшибочныеРеквизитыКонтрагентов(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОшибочныеРеквизитыКонтрагентов(ТаблицаРеквизиты);
	
	Для Каждого ЗаписьОшибочныеРеквизиты Из Параметры.ТаблицаОшибочныеРеквизитыКонтрагентов Цикл
		Движение = Движения.ОшибочныеРеквизитыКонтрагентов.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ЗаписьОшибочныеРеквизиты);
	КонецЦикла;
	
	Движения.ОшибочныеРеквизитыКонтрагентов.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОшибочныеРеквизитыКонтрагентов(ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
		+ "Период,"              // <Дата> - период движений - дата документа
		+ "Регистратор,"         // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"         // <СправочникСсылка.Организации> - организация
		+ "СчетФактура,"         // <ДокументСсылка.*> - Счет-фактура
		+ "ИсходныйСчетФактура," // <ДокументСсылка.*> - Счет-фактура
		+ "Контрагент,"          // <СправочникСсылка.Контрагенты, СправочникСсылка.Организации> - контрагент
		+ "ИНН,"                 // <Строка> - ИНН контрагента
		+ "КПП";                 // <Строка> - КПП контрагента
		
	Параметры.Вставить("ТаблицаОшибочныеРеквизитыКонтрагентов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// ДВИЖЕНИЯ РЕГИСТРА БУХГАЛТЕРИИ

Процедура СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ)

	ЕстьПодразделениеВТаблице 		= ДанныеДвижений.Колонки.Найти("Подразделение") <> Неопределено;
	ЕстьПодразделениеВШапке 		= РеквизитыПроводок.Свойство("ПодразделениеКт");
	ВключениеВСтоимостьВТаблице		= ДанныеДвижений.Колонки.Найти("НДСВключенВСтоимость") <> Неопределено;
		
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 
			ИЛИ (ВключениеВСтоимостьВТаблице И СтрокаТаблицы.НДСВключенВСтоимость) Тогда
			Продолжить;
		КонецЕсли;

		ПодразделениеКт 	= Неопределено;
		Если ЕстьПодразделениеВТаблице Тогда
			ПодразделениеКт = СтрокаТаблицы.Подразделение;
		ИначеЕсли ЕстьПодразделениеВШапке Тогда
			ПодразделениеКт = РеквизитыПроводок.ПодразделениеКт;
		КонецЕсли;

		// Проводка Дт 19.х Кт 60.х

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты",  СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СпособыУчетаНДС",  СтрокаТаблицы.СпособУчетаНДС);

		Проводка.СчетКт = РеквизитыПроводок.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			1, РеквизитыПроводок.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			2, РеквизитыПроводок.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			3, РеквизитыПроводок.СубконтоКт3);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = ПодразделениеКт;
		КонецЕсли;
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = РеквизитыПроводок.ВалютаКт;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.НДС;
		Если Движения.Хозрасчетный.ДополнительныеСвойства.Свойство("СуммыНалоговогоУчетаЗаполнены")
			И Движения.Хозрасчетный.ДополнительныеСвойства.СуммыНалоговогоУчетаЗаполнены Тогда
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.НДС;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгент(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ)

	ЕстьПодразделениеВТаблице 		= ДанныеДвижений.Колонки.Найти("Подразделение") <> Неопределено;
	ЕстьПодразделениеВШапке 		= РеквизитыПроводок.Свойство("ПодразделениеКт");

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПодразделениеКт 	= Неопределено;
		Если ЕстьПодразделениеВТаблице Тогда
			ПодразделениеКт = СтрокаТаблицы.Подразделение;
		ИначеЕсли ЕстьПодразделениеВШапке Тогда
			ПодразделениеКт = РеквизитыПроводок.ПодразделениеКт;
		КонецЕсли;

		// Дт 19.х Кт 60.х
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);

		Проводка.СчетКт = РеквизитыПроводок.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			1, РеквизитыПроводок.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			2, РеквизитыПроводок.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			3, РеквизитыПроводок.СубконтоКт3);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = ПодразделениеКт;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = РеквизитыПроводок.ВалютаКт;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.НДС;

		// Дт 60.х Кт 76.НА
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Содержание  = "Начислен НДС в качестве налогового агента";

		Проводка.СчетДт = РеквизитыПроводок.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, РеквизитыПроводок.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			2, РеквизитыПроводок.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			3, РеквизитыПроводок.СубконтоКт3);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = ПодразделениеКт;
		КонецЕсли;

		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = РеквизитыПроводок.ВалютаКт;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента; // 76.НА
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Договоры", СтрокаТаблицы.ДоговорКонтрагента);

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгентНерезидент(ДанныеДвижений, Движения, Отказ) Экспорт

	РаздельныйУчетНДСНаСчете19 = ДанныеДвижений.Колонки.Найти("СпособУчетаНДС") <> Неопределено;
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		// Дт 19.х Кт 76.НА

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период		 = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты", СтрокаТаблицы.Поставщик);

		Если РаздельныйУчетНДСНаСчете19 Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				"СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента; // 76.НА
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Договоры", СтрокаТаблицы.ДоговорКонтрагента);

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиПоступлениеТоваровУслугВычетНДС(ДанныеДвижений, Движения, Отказ)
	
	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проводки Дт 68 Кт 19.х
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ТоварыНалоговыйАгент Тогда
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгентаПоОтдельнымВидамТоваров; // 68.52
		Иначе
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиРеализацияТоваровУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	//Проводки по начислению НДС от реализации:
	// Дт <СчетУчетаНДСПоРеализации> Кт 68.02

	ТаблицаВыручки = ТоварыУслуги.Скопировать(,
		"Контрагент,Номенклатура,Содержание,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение,СуммаНДСРуб");

	// Оставляем номенклатуру только для проводок по 91 счету
	ВидСубконтоРеализуемыеАктивы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы;
	Для каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаНДСПоРеализации);
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто2 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто3 <> ВидСубконтоРеализуемыеАктивы Тогда
			СтрокаТаблицы.Номенклатура = Неопределено;
		КонецЕсли;
	КонецЦикла;

	ТаблицаВыручки.Свернуть(
		"Контрагент,Номенклатура,Содержание,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение", "СуммаНДСРуб");

	Для каждого СтрокаВыручки Из ТаблицаВыручки Цикл

		Если СтрокаВыручки.СуммаНДСРуб = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаВыручки.СуммаНДСРуб;
		Проводка.Содержание  = СтрокаВыручки.Содержание;

		Проводка.СчетДт = СтрокаВыручки.СчетУчетаНДСПоРеализации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, СтрокаВыручки.Субконто); // Для счетов 90.03 и 91.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СтавкиНДС", СтрокаВыручки.СтавкаНДС); // Для счета 90.03
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"РеализуемыеАктивы", СтрокаВыручки.Номенклатура); // Для счета 91.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты", СтрокаВыручки.Контрагент); // Для счета 76.ОТ
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СФВыданные", Реквизиты.Регистратор); // Для счета 76.ОТ

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаВыручки.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
		Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаВыручки.Подразделение;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиРеализацияОтгруженныхТоваров(Товары, Реквизиты, Движения, Отказ)

	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Проводки
	// Дт <Счет учета НДС от реализации> Кт 76.ОТ

	ТаблицаВыручки = Товары.Скопировать(,
		"Номенклатура,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение,СуммаНДСРуб");

	// Оставляем номенклатуру только для проводок по 91 счету
	ВидСубконтоРеализуемыеАктивы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы;
	Для каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаНДСПоРеализации);
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто2 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто3 <> ВидСубконтоРеализуемыеАктивы Тогда
			СтрокаТаблицы.Номенклатура = Неопределено;
		КонецЕсли;
	КонецЦикла;

	ТаблицаВыручки.Свернуть(
		"Номенклатура,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение", "СуммаНДСРуб");

	Для каждого СтрокаТаблицы Из ТаблицаВыручки Цикл

		Если СтрокаТаблицы.СуммаНДСРуб = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаНДСРуб;
		Проводка.Содержание  = "Реализация отгруженных товаров";

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, СтрокаТаблицы.Субконто);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;  // 76.ОТ
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФВыданные", Реквизиты.ДокументОтгрузки);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиВозвратТоваровПоставщику(РеализованныеТовары, Реквизиты, Движения, Отказ)

	Если РеализованныеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Начисление НДС при возврате товаров:
	// Проводки Дт 76.х (счет расчетов по претензиям) Кт 68.02

	ТаблицаВыручки = РеализованныеТовары.Скопировать(,
		"Содержание,Контрагент,ДоговорКонтрагента,ВалютаВзаиморасчетов,Подразделение,СчетУчетаНДСПоРеализации,
		|СтавкаНДС,СуммаНДСРуб,СуммаНДСВзаиморасчетов");
	ТаблицаВыручки.Свернуть(
		"Содержание,Контрагент,ДоговорКонтрагента,ВалютаВзаиморасчетов,Подразделение,СчетУчетаНДСПоРеализации,СтавкаНДС",
		"СуммаНДСРуб,СуммаНДСВзаиморасчетов");

	Для каждого СтрокаТаблицы Из ТаблицаВыручки Цикл

		Если СтрокаТаблицы.СуммаНДСРуб = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаНДСРуб;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты", СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Договоры", СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = СтрокаТаблицы.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
		Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиВозвратТоваровОтПокупателя(Товары, Реквизиты, Движения, Отказ)

	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Проводки по выделению НДС предъявленного поставщиком при возврате:
	// Дт <СчетУчетаНДСПоРеализации> Кт <СчетУчетаНДС>
	// например:
	// Дт 90.03 Кт 19.х
	// или Дт 90.03 Кт 68.02
	// или Дт 76.ОТ Кт 68.02 (при возврате отгруженных товаров)

	ТаблицаВыручки = Товары.Скопировать(,
		"Номенклатура,Содержание,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение,СуммаНДСРуб,СпособУчетаНДС");

	// Оставляем номенклатуру только для проводок по 91 счету
	ВидСубконтоРеализуемыеАктивы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы;
	Для каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаНДСПоРеализации);
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто2 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто3 <> ВидСубконтоРеализуемыеАктивы Тогда
			СтрокаТаблицы.Номенклатура = Неопределено;
		КонецЕсли;
	КонецЦикла;

	ТаблицаВыручки.Свернуть(
		"Номенклатура,Содержание,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение,СтавкаНДС,СпособУчетаНДС", "СуммаНДСРуб");
		
	Если Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат
		ИЛИ Реквизиты.ПокупателюВыставляетсяКорректировочныйСчетФактура Тогда
		
		СчетФактура = Реквизиты.Регистратор;
		
	Иначе
		
		СчетФактура = Реквизиты.ДокументОтгрузки;
		
	КонецЕсли;	
		
	Для каждого СтрокаВыручки Из ТаблицаВыручки Цикл

		Если СтрокаВыручки.СуммаНДСРуб = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = -СтрокаВыручки.СуммаНДСРуб;
		Проводка.Содержание  = СтрокаВыручки.Содержание;

		Проводка.СчетДт = СтрокаВыручки.СчетУчетаНДСПоРеализации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, СтрокаВыручки.Субконто);                       // Для счетов 90.03 и 91.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СтавкиНДС", СтрокаВыручки.СтавкаНДС);            // Для счета 90.03
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"РеализуемыеАктивы", СтрокаВыручки.Номенклатура); // Для счета 91.02
		// Для счета 76.ОТ (возврат отгруженных товаров)
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СФВыданные", Реквизиты.ДокументОтгрузки);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаВыручки.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты",  Реквизиты.Контрагент);                                // Для счета 19.х
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СчетФактура);                          				  // Для счета 19.х
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СпособыУчетаНДС", ?(Реквизиты.Период >= '20190101', 
			Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету, 
			СтрокаВыручки.СпособУчетаНДС));                                       // Для счета 19.х
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог); // Для счета 68.02

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаВыручки.Подразделение;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Проводки по выделению НДС предъявленного покупателем комиссионеру при возврате:
// Дт <СчетУчетаНДСПоРеализации> Кт <СчетУчетаНДС>
Процедура СформироватьПроводкиВозвратТоваровКомиссионеру(Товары, Реквизиты, Движения, Отказ)

	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВидСубконтоРеализуемыеАктивы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы;
		
	Для каждого СтрокаВыручки Из Товары Цикл

		Если СтрокаВыручки.СуммаНДСРуб = 0 ИЛИ НЕ СтрокаВыручки.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаВыручки.СчетУчетаНДСПоРеализации);
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто2 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто3 <> ВидСубконтоРеализуемыеАктивы Тогда
			НоменклатураПоСтроке = Неопределено;
		Иначе
			НоменклатураПоСтроке = СтрокаВыручки.Номенклатура;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = -СтрокаВыручки.СуммаНДСРуб;
		Проводка.Содержание  = СтрокаВыручки.Содержание;

		Проводка.СчетДт = СтрокаВыручки.СчетУчетаНДСПоРеализации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, СтрокаВыручки.Субконто);                       // Для счетов 90.03 и 91.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СтавкиНДС", СтрокаВыручки.СтавкаНДС);            // Для счета 90.03
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"РеализуемыеАктивы", НоменклатураПоСтроке); // Для счета 91.02

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаВыручки.Подразделение;
		КонецЕсли;
		
		Если Реквизиты.НаВозвратыВыставляетсяКорректировочныйСчетФактура Тогда
			Покупатель = СтрокаВыручки.Покупатель;
		Иначе
			Покупатель = Реквизиты.Контрагент;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты",  Покупатель);                                // Для счета 19.х
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаВыручки.СчетФактура);           				  // Для счета 19.х
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СпособыУчетаНДС", СтрокаВыручки.СпособУчетаНДС);         			  // Для счета 19.х
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог); // Для счета 68.02

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаВыручки.Подразделение;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиНачислениеНДСПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		// Проводки по вычету НДС с выданного аванса
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);

		Проводка.Содержание  = "НДС по предоплате";

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; // 76.АВ
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);


		Проводка.Сумма = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Проводка по начислению НДС с суммовых разниц при расчетах в у.е.
Процедура СформироватьПроводкиСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ)

	Параметры = ПодготовитьПараметрыПроводкиСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаСуммовыхРазниц = Параметры.СуммовыеРазницы;

	ТаблицаСуммовыхРазниц.Свернуть("Подразделение,ДатаДокументаРасчетов", "Разница,НДС");

	Если Реквизиты.НаправлениеДвижения = "Поступление" Тогда
		ЗнакОстатков = 1;
	Иначе
		ЗнакОстатков = -1;
	КонецЕсли;

	Для каждого СтрокаРазницы Из ТаблицаСуммовыхРазниц Цикл

		СуммоваяРазница = СтрокаРазницы.Разница * ЗнакОстатков;

		Если СуммоваяРазница > 0 И СтрокаРазницы.НДС <> 0 
			И СтрокаРазницы.ДатаДокументаРасчетов < '20111001' Тогда

			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = "НДС по курсовым разницам по расчетам в у.е.";

			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			Проводка.СубконтоДт.ПрочиеДоходыИРасходы = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("КурсовыеРазницыПоРасчетамВУЕ");

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;

			Проводка.Сумма 	   = СтрокаРазницы.НДС;
			Проводка.СуммаПРДт = СтрокаРазницы.НДС;

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтрокаРазницы.Подразделение, СтрокаРазницы.Подразделение);

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьПроводкиСуммовыеРазницы
//
Функция ПодготовитьПараметрыПроводкиСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы реквизитов
	СписокОбязательныхКолонок = ""

	+ "Период,"                 //
	+ "Организация,"             //
	+ "Регистратор,"             //
	+ "НаправлениеДвижения";    //

    Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы суммовых разниц
	СписокОбязательныхКолонок = ""

	+ "ДатаДокументаРасчетов,"
	+ "Подразделение,"          //
	+ "Разница,"
	+ "НДС"; 	//

	Параметры.Вставить("СуммовыеРазницы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСуммовыеРазницы, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиРозничнаяВыручка(ТаблицаНачислениеНДС, Движения, Отказ)

	Параметры = ПодготовитьПараметрыПроводкиРозничнаяВыручка(ТаблицаНачислениеНДС);
	НачислениеНДС = Параметры.НачислениеНДС;

	НачислениеНДС.Колонки.Добавить("КорСубконто1");
	НачислениеНДС.Колонки.Добавить("КорСубконто2");
	НачислениеНДС.Колонки.Добавить("КорСубконто3");
	НачислениеНДС.Колонки.Добавить("ВидКорСубконто1");
	НачислениеНДС.Колонки.Добавить("ВидКорСубконто2");
	НачислениеНДС.Колонки.Добавить("ВидКорСубконто3");

	Для каждого СтрокаТаблицы Из НачислениеНДС Цикл

		СтрокаТаблицы.КорСубконто1 = СтрокаТаблицы.Субконто;
		СтрокаТаблицы.КорСубконто2 = СтрокаТаблицы.СтавкаНДС;

	КонецЦикла;

	НачислениеНДС.ЗаполнитьЗначения(1, "ВидКорСубконто1");
	НачислениеНДС.ЗаполнитьЗначения("СтавкиНДС", "ВидКорСубконто2");

	СформироватьПроводкиНачислениеНДСРозничнаяВыручка(НачислениеНДС, Движения, Отказ);

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьПроводкиРозничнаяВыручка
//
Функция ПодготовитьПараметрыПроводкиРозничнаяВыручка(ТаблицаНачислениеНДС)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""

	+ "Период,"				//
	+ "Организация,"		//
	+ "ДокументОснование,"	//
	+ "СтавкаНДС,"			//
	+ "СчетУчетаНДС,"		//
	+ "НДС,"			//
	+ "Подразделение,"		//
	+ "Субконто,"			//
	+ "Содержание";			//

    Параметры.Вставить("НачислениеНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНачислениеНДС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Проводка по начислению НДС по Кт 68.02
//
Процедура СформироватьПроводкиНачислениеНДСРозничнаяВыручка(ТаблицаНачислениеНДС, Движения, Отказ)

	Параметры = ПодготовитьПараметрыПроводкиНачислениеНДСРозничнаяВыручка(ТаблицаНачислениеНДС);
	НачислениеНДС = Параметры.НачислениеНДС;

	Для каждого СтрокаТаблицы Из НачислениеНДС Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Сумма       = СтрокаТаблицы.НДС;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Продажи_НДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;  // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьПроводкиНачислениеНДС
//
Функция ПодготовитьПараметрыПроводкиНачислениеНДСРозничнаяВыручка(ТаблицаНачислениеНДС)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""

	+ "Период,"				//
	+ "Организация,"		//
	+ "ДокументОснование,"	//
	+ "СчетУчетаНДС,"		//
	+ "НДС,"			//
	+ "Подразделение,"		//
	+ "Содержание,"			//
	+ "ВидКорСубконто1,"	//
    + "ВидКорСубконто2,"	//
	+ "ВидКорСубконто3,"	//
	+ "КорСубконто1,"		//
	+ "КорСубконто2,"		//
	+ "КорСубконто3";		//

    Параметры.Вставить("НачислениеНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНачислениеНДС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиНачисленНДСНалоговымАгентом(Реквизиты, ТаблицаАвансы, Движения, Отказ)

	СуммаНалога = ТаблицаАвансы.Итог("СуммаНДС");
	
	Если СуммаНалога = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.Хозрасчетный.Добавить();

	Движение.Период = Реквизиты.Период;
	Движение.Организация = Реквизиты.Организация;
	Движение.Содержание  = "НДС";

	Движение.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
	Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;

	Движение.Сумма  = СуммаНалога;

	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);

	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументОснование);

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиВычетНДСПоТоварамРеализованнымПоСтавке0(ДанныеДвижений, Движения, Отказ)

	// Проводки Дт 68.хх Кт 19.07

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;

		Проводка.Содержание = СокрЛП(СтрокаТаблицы.Содержание);

		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ТоварыНалоговыйАгент Тогда
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгентаПоОтдельнымВидамТоваров; // 68.52
		Иначе
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"ДокументыРеализации", СтрокаТаблицы.ДокументОтгрузки);

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиВосстановлениеНДСПоПрочимОперациям(ТаблицаПоВосстановлению, Движения, Отказ)

	Для каждого СтрокаВосстановления Из ТаблицаПоВосстановлению Цикл

		Движение = Движения.Хозрасчетный.Добавить();

		Движение.Период 	 = СтрокаВосстановления.Период;
		Движение.Организация = СтрокаВосстановления.Организация;
		Движение.Сумма 		 = СтрокаВосстановления.НДС;
		Движение.Содержание  = "Восстановление НДС";

		Движение.СчетДт = СтрокаВосстановления.СчетУчетаНДС; // 19.х
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаВосстановления.Покупатель);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФполученные", СтрокаВосстановления.СчетФактура);

		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиСписаниеНДС(Реквизиты, ТаблицаДвижений, Движения, Отказ)

	СписаниеНДСБезСчетаФактуры = ТаблицаДвижений.Колонки.Найти("ПредъявленСчетФактура") <> Неопределено;
	
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Если СписаниеНДСБезСчетаФактуры 
			И (СтрокаТаблицы.ПредъявленСчетФактура
			ИЛИ СтрокаТаблицы.НДС = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = "Списан НДС";

		Проводка.СчетДт = Реквизиты.СчетСписанияНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Реквизиты.СубконтоСписанияНДС1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Реквизиты.СубконтоСписанияНДС2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Реквизиты.СубконтоСписанияНДС3);

		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС; // 19.х или 76.АВ
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Поставщик);
		
		СчетФактура = ?(ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура), СтрокаТаблицы.СчетФактура, Реквизиты.Регистратор);
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФВыданные", СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);
		
		Проводка.Сумма  = СтрокаТаблицы.НДС;

		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.ПодразделениеСписания, Реквизиты.ПодразделениеСписания);
			
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Проводка.Сумма, , , , , , Проводка);

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиСтавка0НеПодтверждена(Реквизиты, ТаблицаСтавкаНеПодтверждена, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ТаблицаСтавкаНеПодтверждена Цикл

		// Дт 68.22 Кт 68.02
		Движение = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению; // 68.22
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаТаблицы.Покупатель);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФВыданные", СтрокаТаблицы.СчетФактура);

		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		Движение.Сумма = СтрокаТаблицы.НДС;

		// Дт 91.02 Кт 68.22
		Движение = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

		Движение.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы; // 91.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяПрочихРасходов);

		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению; //68.22
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", СтрокаТаблицы.Покупатель);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФВыданные", СтрокаТаблицы.СчетФактура);

		Движение.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиНачислениеНДСпоСМРХозспособом(Реквизиты, СМРХозспособом, Движения, Отказ)

	Для каждого СтрокаДвижения Из СМРХозспособом Цикл

		Если СтрокаДвижения.НДС <> 0 Тогда

			Движение = Движения.Хозрасчетный.Добавить();

			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

			Движение.Содержание = "Начислен НДС по строительству хоз. способом";

			Движение.СчетДт = СтрокаДвижения.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура);
			Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт,
					"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
			КонецЕсли;
			
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

			Движение.Сумма = СтрокаДвижения.НДС;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиРеализацияТоваровУслугКомитентаНерезидента(Реквизиты, ТаблицаДвижений, Движения, Отказ)
	
	Для каждого СтрокаДвижения Из ТаблицаДвижений Цикл

		Если СтрокаДвижения.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			СтрокаДвижения.Валюта, Реквизиты.Период);

		Движение = Движения.Хозрасчетный.Добавить();

		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);

		Движение.Сумма = СтрокаДвижения.НДС;
		
		СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаДвижения.СчетРасчетов);
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Движение.ВалютнаяСуммаДт = СтрокаДвижения.НДС/СтруктураКурсаВзаиморасчетов.Курс*СтруктураКурсаВзаиморасчетов.Кратность;
			Движение.ВалютаДт = СтрокаДвижения.Валюта;
		КонецЕсли;
		
		Движение.Содержание = "Начислен НДС в качестве налогового агента";

		Движение.СчетДт = СтрокаДвижения.СчетРасчетов;
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Движение.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Движение.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаДвижения.Комитент);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Договоры", СтрокаДвижения.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
		
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", СтрокаДвижения.Комитент);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Договоры", СтрокаДвижения.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;
		
КонецПроцедуры	

#Область КорректировкаПоступления

Процедура СформироватьДвиженияНДСКорректировкиПоступлениеТоваровУслуг(РеквизитыДокумента, СтруктураТаблицДокумента, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(РеквизитыДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = РеквизитыДокумента[0];
	Если НЕ Реквизиты.ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;	
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПолучитьРеквизитыКорректировкиПоступленияПоНДС(РеквизитыДокумента);
	Реквизиты = Параметры.Реквизиты[0];

	// Корректировочный счет-фактура
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		// Уменьшение стоимости
		ОтразитьКорректировкуПоступленияВКнигеПродаж(
			Реквизиты,
			СтруктураТаблицДокумента.ТаблицаВосстановление,
			Движения,
			Отказ);
		
		// Увеличение стоимости
		ОтразитьКорректировкуПоступленияВКнигеПокупок(
			Реквизиты,
			СтруктураТаблицДокумента.ТаблицаВычет,
			СтруктураТаблицДокумента.КнигаПокупок,
			Движения,
			Отказ);
		
	// Исправленный счет-фактура либо исправление собственной ошибки
	Иначе
		
		// Сторно движений исправляемого счета-фактуры
		СформироватьСторнирующиеДвиженияКорректировкаПоступления(
			Реквизиты,
			СтруктураТаблицДокумента,
			Движения,
			Отказ);
	
		// Новые движения по исправленному счету-фактуре
		СформироватьИсправленныеДвиженияКорректировкаПоступления(
			Реквизиты,
			СтруктураТаблицДокумента,
			Движения,
			Отказ);
		
	КонецЕсли;
	
	УчетНДСПереопределяемый.СформироватьДвиженияКорректировкаНДСКосвенныхРасходов(
		Реквизиты,
		СтруктураТаблицДокумента.КорректировкаНДСКосвенныхРасходов, 
		Движения,
		Отказ);
		
	УчетНДСПереопределяемый.СформироватьДвиженияКорректировкаНДСПоПартиямЗапасов(
		Реквизиты,
		Движения,
		Отказ);
	
КонецПроцедуры

Процедура СформироватьСторнирующиеДвиженияКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента, Движения, Отказ) Экспорт
	
	СформироватьДвиженияЗаписьКнигиПокупок(
		Реквизиты,
		СтруктураТаблицДокумента.КнигаПокупок,
		Движения,
		Отказ);
		
	СформироватьДвиженияНДСПредъявленный(
		СтруктураТаблицДокумента.НДСПредъявленный,
		Движения,
		Отказ,
		Истина);
		
	СформироватьДвиженияЗаписьКнигиПродажКорректировкаПоступления(
		Реквизиты,
		СтруктураТаблицДокумента.КнигаПродаж,
		Истина,
		Движения,
		Отказ);

КонецПроцедуры

Функция ПолучитьРеквизитыКорректировкиПоступленияПоНДС(РеквизитыДокумента)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "ВидОперации,"
	+ "Регистратор,"
	+ "Период,"
	+ "Организация,"
	+ "ИсправляемыйСчетФактура,"
	+ "КорректироватьБУиНУ,"
	+ "ДокументПоступленияСсылка,"
	+ "ВосстановитьНДС,"
	+ "Склад,"
	+ "ПлательщикНДС,"
	+ "РаздельныйУчетНДС,"
	+ "РаздельныйУчетНДСНаСчете19,"
	+ "КурсДокумента,"
	+ "КратностьДокумента,"
	+ "ДокументОснование,"
	+ "ДоговорКонтрагента,"
	+ "Контрагент,"
	+ "НДСВключенВСтоимость";
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(РеквизитыДокумента, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияЗаписьКнигиПокупок(Реквизиты, ТаблицаДвиженийПоКнигеПокупок, Движения, Отказ)
	
	Если ТаблицаДвиженийПоКнигеПокупок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвиженийПоКнигеПокупок Цикл
		
		Если СтрокаТаблицы.НДС = 0 И СтрокаТаблицы.СуммаБезНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// НДС Покупки
		Запись = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		
		Если Реквизиты.КорректироватьБУиНУ 
			И СтрокаТаблицы.НДС <> 0 Тогда
			
			// Хозрасчетный
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = СтрокаТаблицы.Период;
			Проводка.Организация = СтрокаТаблицы.Организация;
			Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
			
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			Проводка.СчетКт      = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаТаблицы.СчетФактура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Поставщик);
			
			Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
				Если НЕ Реквизиты.СокращеннаяАналитика
					И СтрокаТаблицы.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0 Тогда
					БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, "СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.ДляОперацийПо0);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, "СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
				КонецЕсли;
			КонецЕсли;
				
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;
	Движения.Хозрасчетный.Записывать          = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленный(ТаблицаПредъявленногоНДС, Движения, Отказ, Сторно = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПредъявленногоНДС) Тогда
		Возврат;
	КонецЕсли;
	
	ОтслеживатьРасхождения = ТаблицаПредъявленногоНДС.Колонки.Найти("СуммаНДСПерепоставкиРуб") <> Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаПредъявленногоНДС Цикл
		
		Если НулевыеСуммыВСтроке(СтрокаТаблицы, ОтслеживатьРасхождения)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Сторно Тогда
			Запись = Движения.НДСПредъявленный.ДобавитьРасход();
		Иначе
			Запись = Движения.НДСПредъявленный.ДобавитьПриход();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		// Отразим отклонения, зафиксированные при приемке.
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИсправленныйСчетФактура) 
			И ОтслеживатьРасхождения
			И (СтрокаТаблицы.СуммаНДСПерепоставкиРуб <> 0 ИЛИ СтрокаТаблицы.СуммаПерепоставкиРуб <> 0) Тогда
			Запись.НДС = ?(Сторно,Запись.НДС, 0) + СтрокаТаблицы.СуммаНДСПерепоставкиРуб;
			Запись.СуммаБезНДС = ?(Сторно, Запись.СуммаБезНДС, 0) + СтрокаТаблицы.СуммаПерепоставкиРуб - СтрокаТаблицы.СуммаНДСПерепоставкиРуб;
		КонецЕсли;
	КонецЦикла;
	
	Движения.НДСПредъявленный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьИсправленныеДвиженияКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента, Движения, Отказ)
	
	Если ТипЗнч(Реквизиты.ИсправляемыйСчетФактура) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
	// Исправление корректировочного счета-фактуры
	
		// Уменьшение стоимости
		ОтразитьКорректировкуПоступленияВКнигеПродаж(
			Реквизиты,
			СтруктураТаблицДокумента.ТаблицаВосстановление,
			Движения,
			Отказ);
		
		// Увеличение стоимости
		ОтразитьКорректировкуПоступленияВКнигеПокупок(
			Реквизиты,
			СтруктураТаблицДокумента.ТаблицаВычет,
			СтруктураТаблицДокумента.КнигаПокупок,
			Движения,
			Отказ);
		
	Иначе
	// Исправление обычного счета-фактуры
		
		ОтразитьКорректировкуПоступленияВКнигеПокупок(
			Реквизиты,
			СтруктураТаблицДокумента.ВычетНДСНаОснованииДокумента,
			СтруктураТаблицДокумента.КнигаПокупок,
			Движения,
			Отказ);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОтразитьКорректировкуПоступленияВКнигеПродаж(Реквизиты, ТаблицаВосстановление, Движения, Отказ)

	Если Не ЗначениеЗаполнено(ТаблицаВосстановление) Тогда
		Возврат;
	КонецЕсли;
	
	// Восстановление в книге продаж либо уменьшение вычета по корректируемому счету-фактуре
	ТаблицаВосстановление = ПодготовитьТаблицуВосстановленияНДССУчетомПропорции(Реквизиты, ТаблицаВосстановление);
	
	Если Реквизиты.ВосстановитьНДС Тогда
		
		ТаблицаВосстановление.Колонки.Добавить("Событие");
		ТаблицаВосстановление.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");
		
		СформироватьДвиженияЗаписьКнигиПродажКорректировкаПоступления(
			Реквизиты,
			ТаблицаВосстановление,
			Ложь,
			Движения,
			Отказ);
	Иначе
		
		ТаблицаВосстановление.Колонки.Покупатель.Имя = "Поставщик";
		ТаблицаВосстановление.Колонки.Добавить("Событие");
		ТаблицаВосстановление.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком, "Событие");
		
		СформироватьДвиженияНДСПредъявленный(
			ТаблицаВосстановление,
			Движения,
			Отказ, 
			Истина);
			
	КонецЕсли;

КонецПроцедуры

Процедура ОтразитьКорректировкуПоступленияВКнигеПокупок(
	Реквизиты, ВычетНДСНаОснованииДокумента, ТаблицаСторноВычета, Движения, Отказ)

	ОтслеживатьРасхождения = ВычетНДСНаОснованииДокумента <> Неопределено
		И ВычетНДСНаОснованииДокумента.Колонки.Найти("СуммаНДСПерепоставкиРуб") <> Неопределено;
		
	Если НулевыеСуммыВТаблице(ВычетНДСНаОснованииДокумента, ОтслеживатьРасхождения) Тогда 
		Возврат;
	КонецЕсли;
	
	// Приход всей суммы предъявленного НДС по регистру "НДС предъявленный"
	СформироватьДвиженияНДСПредъявленный(
		ВычетНДСНаОснованииДокумента, 
		Движения, 
		Отказ,
		Ложь);
	
	Если ВычетНДСНаОснованииДокумента.Итог("СуммаНДСПерепоставкиРуб")<> 0
		И Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		СформироватьПроводкиПерепоставка(Реквизиты, ВычетНДСНаОснованииДокумента, Движения, Отказ)
	КонецЕсли;
	
	// Определение налога, включенного в стоимость
	СтруктураТаблиц = ПодготовитьТаблицыВычетНДССУчетомПропорции(
		Реквизиты,
		ВычетНДСНаОснованииДокумента,
		ТаблицаСторноВычета);
	
	// Блокировка НДС, включенного в стоимость путем списания из регистра "НДС предъявленный"
	СформироватьДвиженияНДСПредъявленный(
		СтруктураТаблиц.ТаблицаНДСВключенныйВСтоимость, 
		Движения, 
		Отказ,
		Истина);
	
	Если СтруктураТаблиц.ТаблицаНДСВычетСУчетомПропорции.Количество() > 0 Тогда
		СтрокаТаблицыНДС = СтруктураТаблиц.ТаблицаНДСВычетСУчетомПропорции[0];
		ОтражатьВычетВДопЛисте = 
			Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
			И УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтрокаТаблицыНДС.КорректируемыйПериод) >= 4
			ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВычетВДопЛисте Тогда
		
		СформироватьДвиженияНДСПредъявленный(
			СтруктураТаблиц.ТаблицаНДСПредъявленыйСУчетомПропорции, 
			Движения, 
			Отказ,
			Истина);
		
		СформироватьДвиженияЗаписьКнигиПокупок(
			Реквизиты, 
			СтруктураТаблиц.ТаблицаНДСВычетСУчетомПропорции, 
			Движения, 
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияЗаписьКнигиПродажКорректировкаПоступления(Реквизиты, ТаблицаДвижений, Сторно = Ложь, Движения, Отказ)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		
		// НДС Продажи
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		
		Если НЕ Сторно И Реквизиты.КорректироватьБУиНУ
			И СтрокаДвижения.НДС <> 0 Тогда
			
			// Хозрасчетный
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период = СтрокаДвижения.Период;
			Проводка.Организация = СтрокаДвижения.Организация;
			Проводка.Содержание  = СтрокаДвижения.Содержание;
			
			Проводка.СчетДт = СтрокаДвижения.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты" , СтрокаДвижения.Покупатель);
			Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, "СпособыУчетаНДС" , Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			Проводка.Сумма = СтрокаДвижения.НДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Сторно И Реквизиты.КорректироватьБУиНУ Тогда
		СформироватьПроводкиСторноВосстановленияНДС(Реквизиты, Движения, Отказ);
	КонецЕсли;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	Движения.Хозрасчетный.Записывать         = Истина;
	
КонецПроцедуры

Процедура СформироватьПроводкиСторноВосстановленияНДС(Реквизиты, Движения, Отказ)
	
	НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписейХозрасчетный.Отбор.Регистратор.Значение = Реквизиты.ДокументОснование;
	НаборЗаписейХозрасчетный.Прочитать();
	
	Для Каждого ДвижениеСторнируемое Из НаборЗаписейХозрасчетный Цикл

		Если ДвижениеСторнируемое.СчетКт = ПланыСчетов.Хозрасчетный.НДС
			И ДвижениеСторнируемое.Сумма > 0 Тогда
			
			Движение = Движения.Хозрасчетный.Добавить();
			
			Движение.Период = Реквизиты.Период;
			
			ЗаполнитьЗначенияСвойств(Движение, ДвижениеСторнируемое, , "Период, Регистратор");
			
			Для каждого Субконто Из ДвижениеСторнируемое.СубконтоДт Цикл
				Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
			КонецЦикла;
			
			Для каждого Субконто Из ДвижениеСторнируемое.СубконтоКт Цикл
				Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			КонецЦикла;
			
			Движение.Сумма = -ДвижениеСторнируемое.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяТаблицаКоэффициентовКорректировкиПоступления() Экспорт

	ТаблицаКоэффициентов = Новый ТаблицаЗначений;
	ТаблицаКоэффициентов.Колонки.Добавить("ВидЦенности", 	Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаКоэффициентов.Колонки.Добавить("СтавкаНДС", 		Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаКоэффициентов.Колонки.Добавить("СчетУчетаНДС", 	Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаКоэффициентов.Колонки.Добавить("НДСКоэффициент", ОбщегоНазначения.ОписаниеТипаЧисло(6, 4));
	ТаблицаКоэффициентов.Колонки.Добавить("СуммаБезНДСКоэффициент", ОбщегоНазначения.ОписаниеТипаЧисло(6, 4));

	Возврат ТаблицаКоэффициентов;

КонецФункции

Функция ПодготовитьТаблицыВычетНДССУчетомПропорции(Реквизиты, ВычетНДСНаОснованииДокумента, ТаблицаСторноВычета)
	
	ТаблицаКоэффициентов = УчетНДСПереопределяемый.ПодготовитьТаблицуКоэффициентовКорректировкиПоступления(Реквизиты);
	ТаблицаКоэффициентов.Индексы.Добавить("ВидЦенности,СтавкаНДС,СчетУчетаНДС");
	
	ТаблицаНДСВключенныйВСтоимость         = ВычетНДСНаОснованииДокумента.Скопировать();
	СтрокаГруппировки = "ВидЦенности,СтавкаНДС,Регистратор,Период,Организация,Поставщик,Событие,ДатаСобытия,СчетФактура,
		|ИсправленныйСчетФактура,СчетУчетаНДС,СчетУчета,СтатьяЗатрат,ПодразделениеЗатрат,Субконто1,Субконто2,Субконто3";
	
	СтрокаРесурсов = "СуммаБезНДС,НДС,НДСВал";
	
	ОтслеживатьРасхождения = ВычетНДСНаОснованииДокумента.Колонки.Найти("СуммаНДСПерепоставкиРуб") <> Неопределено;
	Если ОтслеживатьРасхождения Тогда 
		СтрокаРесурсов = СтрокаРесурсов + ",СуммаНДСПерепоставкиРуб, СуммаПерепоставкиРуб"
	КонецЕсли;

	ТаблицаНДСВключенныйВСтоимость.Свернуть(СтрокаГруппировки, СтрокаРесурсов);
	
	ТаблицаНДСПредъявленыйСУчетомПропорции = ТаблицаНДСВключенныйВСтоимость.СкопироватьКолонки();
	
	СтруктураПоиска = Новый Структура("ВидЦенности,СтавкаНДС,СчетУчетаНДС");
	
	Для каждого СтрокаНДСВключенныйВСтоимость Из ТаблицаНДСВключенныйВСтоимость Цикл
		
		СтрокаВычет = ТаблицаНДСПредъявленыйСУчетомПропорции.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНДСВключенныйВСтоимость);
		СтрокиКоэффициентов = ТаблицаКоэффициентов.НайтиСтроки(СтруктураПоиска);
		Если СтрокиКоэффициентов.Количество() > 0 Тогда
			Коэффициенты = СтрокиКоэффициентов[0];
		Иначе
			Коэффициенты = Новый Структура("СуммаБезНДСКоэффициент,НДСКоэффициент", 0, 0);
		КонецЕсли;
		
		// Суммы налога, подлежащие включению в стоимость
		СуммаБезНДС = Окр(СтрокаНДСВключенныйВСтоимость.СуммаБезНДС * Коэффициенты.СуммаБезНДСКоэффициент, 2);
		НДС         = Окр(СтрокаНДСВключенныйВСтоимость.НДС * Коэффициенты.НДСКоэффициент, 2);
		НДСВал      = Окр(СтрокаНДСВключенныйВСтоимость.НДСВал * Коэффициенты.НДСКоэффициент, 2);
		Если ОтслеживатьРасхождения Тогда 
			СтрокаНДСВключенныйВСтоимость.СуммаПерепоставкиРуб = 
				Окр(СтрокаНДСВключенныйВСтоимость.СуммаПерепоставкиРуб * Коэффициенты.СуммаБезНДСКоэффициент, 2);
			СтрокаНДСВключенныйВСтоимость.СуммаНДСПерепоставкиРуб = 
				Окр(СтрокаНДСВключенныйВСтоимость.СуммаНДСПерепоставкиРуб * Коэффициенты.НДСКоэффициент, 2);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаВычет, СтрокаНДСВключенныйВСтоимость);
		
		СтрокаВычет.СуммаБезНДС = СтрокаВычет.СуммаБезНДС - СуммаБезНДС;
		СтрокаВычет.НДС         = СтрокаВычет.НДС - НДС;
		СтрокаВычет.НДСВал      = СтрокаВычет.НДСВал - НДСВал;
		
		СтрокаНДСВключенныйВСтоимость.СуммаБезНДС = СуммаБезНДС;
		СтрокаНДСВключенныйВСтоимость.НДС         = НДС;
		СтрокаНДСВключенныйВСтоимость.НДСВал      = НДСВал;
		СтрокаНДСВключенныйВСтоимость.Событие     = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
		
	КонецЦикла;
	
	// Если по исправляемому счету-фактуре был отражен и сторнирован вычет НДС
	// сформируем таблицу для отражения вычета НДС по исправленному счету-фактуре
	// Вычет отразим в доп листе или основном разделе той книги покупок, 
	// в которой ранее осуществили сторнирующую запись доп листа.

	Если ТаблицаСторноВычета.Количество() > 0 Тогда
		
		ТаблицаНДСВычетСУчетомПропорции = ТаблицаНДСПредъявленыйСУчетомПропорции.СкопироватьКолонки();
		ТаблицаНДСВычетСУчетомПропорции.Колонки.Добавить("ЗаписьДополнительногоЛиста");
		ТаблицаНДСВычетСУчетомПропорции.Колонки.Добавить("КорректируемыйПериод");
		ТаблицаНДСВычетСУчетомПропорции.Колонки.Добавить("Содержание");
		
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки Тогда
			ЗаполнятьТаблицуНДСВычетСУчетомПропорции = Истина;
		Иначе
			// Если ранее вычет был отражен и отсторнирован в нескольких налоговых периодах
			// или суммы сторно НДС не совпадают с суммой НДС к вычету, то 
			// новый вычет не отражаем. В таком случае вычет будет отражен документом "Формирование записей книги покупок".
			
			ПериодыВнесенияИсправлений = ТаблицаСторноВычета.ВыгрузитьКолонку("КорректируемыйПериод");
			ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ПериодыВнесенияИсправлений);
			
			СуммыСторноИВычетаСовпадают = ТаблицаНДСПредъявленыйСУчетомПропорции.Итог("НДС") = - ТаблицаСторноВычета.Итог("НДС");
			ЗаполнятьТаблицуНДСВычетСУчетомПропорции = 
				ПериодыВнесенияИсправлений.Количество() = 1
				И СуммыСторноИВычетаСовпадают;
		КонецЕсли;
		
		Если ЗаполнятьТаблицуНДСВычетСУчетомПропорции Тогда 
			
			СтрокаСторнирующейЗаписи = ТаблицаСторноВычета[0];
			
			Для Каждого СтрокаТаблицы ИЗ ТаблицаНДСПредъявленыйСУчетомПропорции Цикл
				
				СтрокаНДСВычетСУчетомПропорции = ТаблицаНДСВычетСУчетомПропорции.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНДСВычетСУчетомПропорции, СтрокаТаблицы);
				
				СтрокаНДСВычетСУчетомПропорции.ЗаписьДополнительногоЛиста = СтрокаСторнирующейЗаписи.ЗаписьДополнительногоЛиста;
				СтрокаНДСВычетСУчетомПропорции.КорректируемыйПериод       = СтрокаСторнирующейЗаписи.КорректируемыйПериод;
				СтрокаНДСВычетСУчетомПропорции.Содержание                 = НСтр("ru='НДС'");
				СтрокаНДСВычетСУчетомПропорции.Событие                    = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
				СтрокаНДСВычетСУчетомПропорции.ДатаСобытия                = СтрокаСторнирующейЗаписи.ДатаСобытия;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		ТаблицаНДСВычетСУчетомПропорции = ВычетНДСНаОснованииДокумента.СкопироватьКолонки();
	КонецЕсли;
	
	Результат = Новый Структура(
		"ТаблицаНДСВключенныйВСтоимость,ТаблицаНДСПредъявленыйСУчетомПропорции,ТаблицаНДСВычетСУчетомПропорции", 
		ТаблицаНДСВключенныйВСтоимость, ТаблицаНДСПредъявленыйСУчетомПропорции, ТаблицаНДСВычетСУчетомПропорции);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТаблицуВосстановленияНДССУчетомПропорции(Реквизиты, ТаблицаДокумента)
	
	ТаблицаКоэффициентов = УчетНДСПереопределяемый.ПодготовитьТаблицуКоэффициентовКорректировкиПоступления(Реквизиты);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ТаблицаКоэффициентов", ТаблицаКоэффициентов);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности КАК ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.НДС КАК НДС,
	|	ТаблицаДокумента.НДСВал КАК НДСВал,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Покупатель КАК Покупатель,
	|	ТаблицаДокумента.Событие КАК Событие,
	|	ТаблицаДокумента.ДатаСобытия КАК ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаДокумента.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
	|	ТаблицаДокумента.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	|	ТаблицаДокумента.КорректируемыйПериод КАК КорректируемыйПериод,
	|	ТаблицаДокумента.ЗаписьДополнительногоЛиста КАК ЗаписьДополнительногоЛиста,
	|	ТаблицаДокумента.Содержание КАК Содержание,
	|	ТаблицаДокумента.КодВидаОперации
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.Регистратор,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Покупатель,
	|	ТаблицаДокумента.Событие,
	|	ТаблицаДокумента.ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура,
	|	ТаблицаДокумента.СчетУчетаНДС,
	|	ТаблицаДокумента.СчетУчета,
	|	ТаблицаДокумента.СторнирующаяЗаписьДопЛиста,
	|	ТаблицаДокумента.КорректируемыйПериод,
	|	ТаблицаДокумента.ЗаписьДополнительногоЛиста,
	|	ТаблицаДокумента.Содержание,
	|	СУММА(ТаблицаДокумента.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ТаблицаДокумента.НДС) КАК НДС,
	|	СУММА(ТаблицаДокумента.НДСВал) КАК НДСВал,
	|	ТаблицаДокумента.КодВидаОперации
	|ПОМЕСТИТЬ ВТСгруппированнаяТаблицаДокумента
	|ИЗ
	|	ВТТаблицаДокумента КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.Регистратор,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Покупатель,
	|	ТаблицаДокумента.Событие,
	|	ТаблицаДокумента.ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура,
	|	ТаблицаДокумента.СчетУчетаНДС,
	|	ТаблицаДокумента.СчетУчета,
	|	ТаблицаДокумента.СторнирующаяЗаписьДопЛиста,
	|	ТаблицаДокумента.КорректируемыйПериод,
	|	ТаблицаДокумента.ЗаписьДополнительногоЛиста,
	|	ТаблицаДокумента.Содержание,
	|	ТаблицаДокумента.КодВидаОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКоэффициентов.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаКоэффициентов.ВидЦенности КАК ВидЦенности,
	|	ТаблицаКоэффициентов.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ТаблицаКоэффициентов.НДСКоэффициент КАК НДСКоэффициент,
	|	ТаблицаКоэффициентов.СуммаБезНДСКоэффициент КАК СуммаБезНДСКоэффициент
	|ПОМЕСТИТЬ ВТТаблицаКоэффициентов
	|ИЗ
	|	&ТаблицаКоэффициентов КАК ТаблицаКоэффициентов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтавкаНДС,
	|	СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСгруппированнаяТаблицаДокумента.ВидЦенности,
	|	ВТСгруппированнаяТаблицаДокумента.СтавкаНДС,
	|	ВТСгруппированнаяТаблицаДокумента.СуммаБезНДС * (1 - ЕСТЬNULL(ВТТаблицаКоэффициентов.СуммаБезНДСКоэффициент, 0)) КАК СуммаБезНДС,
	|	ВТСгруппированнаяТаблицаДокумента.НДС * (1 - ЕСТЬNULL(ВТТаблицаКоэффициентов.НДСКоэффициент, 0)) КАК НДС,
	|	ВТСгруппированнаяТаблицаДокумента.НДСВал * (1 - ЕСТЬNULL(ВТТаблицаКоэффициентов.НДСКоэффициент, 0)) КАК НДСВал,
	|	ВТСгруппированнаяТаблицаДокумента.Регистратор,
	|	ВТСгруппированнаяТаблицаДокумента.Период,
	|	ВТСгруппированнаяТаблицаДокумента.Организация,
	|	ВТСгруппированнаяТаблицаДокумента.Покупатель,
	|	ВТСгруппированнаяТаблицаДокумента.ДатаСобытия,
	|	ВТСгруппированнаяТаблицаДокумента.СчетФактура,
	|	ВТСгруппированнаяТаблицаДокумента.ИсправленныйСчетФактура,
	|	ВТСгруппированнаяТаблицаДокумента.СчетУчетаНДС,
	|	ВТСгруппированнаяТаблицаДокумента.СчетУчета,
	|	ВТСгруппированнаяТаблицаДокумента.СторнирующаяЗаписьДопЛиста,
	|	ВТСгруппированнаяТаблицаДокумента.КорректируемыйПериод,
	|	ВТСгруппированнаяТаблицаДокумента.ЗаписьДополнительногоЛиста,
	|	ВТСгруппированнаяТаблицаДокумента.Содержание,
	|	ВТСгруппированнаяТаблицаДокумента.КодВидаОперации
	|ПОМЕСТИТЬ ТаблицаВосстановления
	|ИЗ
	|	ВТСгруппированнаяТаблицаДокумента КАК ВТСгруппированнаяТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаКоэффициентов КАК ВТТаблицаКоэффициентов
	|		ПО ВТСгруппированнаяТаблицаДокумента.СтавкаНДС = ВТТаблицаКоэффициентов.СтавкаНДС
	|			И ВТСгруппированнаяТаблицаДокумента.ВидЦенности = ВТТаблицаКоэффициентов.ВидЦенности
	|			И ВТСгруппированнаяТаблицаДокумента.СчетУчетаНДС = ВТТаблицаКоэффициентов.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВосстановления.ВидЦенности,
	|	ТаблицаВосстановления.СтавкаНДС,
	|	ТаблицаВосстановления.СуммаБезНДС,
	|	ТаблицаВосстановления.НДС,
	|	ТаблицаВосстановления.НДСВал,
	|	ТаблицаВосстановления.Регистратор,
	|	ТаблицаВосстановления.Период,
	|	ТаблицаВосстановления.Организация,
	|	ТаблицаВосстановления.Покупатель,
	|	ТаблицаВосстановления.ДатаСобытия,
	|	ТаблицаВосстановления.СчетФактура,
	|	ТаблицаВосстановления.ИсправленныйСчетФактура,
	|	ТаблицаВосстановления.СчетУчетаНДС,
	|	ТаблицаВосстановления.СчетУчета,
	|	ТаблицаВосстановления.СторнирующаяЗаписьДопЛиста,
	|	ТаблицаВосстановления.КорректируемыйПериод,
	|	ТаблицаВосстановления.ЗаписьДополнительногоЛиста,
	|	ТаблицаВосстановления.Содержание,
	|	ТаблицаВосстановления.КодВидаОперации
	|ИЗ
	|	ТаблицаВосстановления КАК ТаблицаВосстановления
	|ГДЕ
	|	ТаблицаВосстановления.НДС <> 0
	|	И ТаблицаВосстановления.СуммаБезНДС <> 0";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НулевыеСуммыВСтроке(СтрокаТаблицы, ОтслеживатьРасхождения)
	
	НулевыеСуммы = Ложь;
	
	Если СтрокаТаблицы.НДС = 0 Тогда
		Если ОтслеживатьРасхождения Тогда
			НулевыеСуммы = СтрокаТаблицы.СуммаНДСПерепоставкиРуб = 0;
		Иначе 
			НулевыеСуммы = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НулевыеСуммы;
	
КонецФункции

Функция НулевыеСуммыВТаблице(Таблица, ОтслеживатьРасхождения)
	
	НулевыеСуммы = Ложь;
	
	Если Таблица = Неопределено Тогда 
		НулевыеСуммы = Истина;
		Возврат НулевыеСуммы;
	КонецЕсли;
	
	Если Таблица.Итог("НДС") = 0 Тогда
		Если ОтслеживатьРасхождения Тогда
			НулевыеСуммы = Таблица.Итог("СуммаНДСПерепоставкиРуб") = 0;
		Иначе 
			НулевыеСуммы = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НулевыеСуммы;
	
КонецФункции

Процедура СформироватьПроводкиПерепоставка(Реквизиты, ВычетНДСНаОснованииДокумента, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ВычетНДСНаОснованииДокумента) 
		ИЛИ Реквизиты.НДСВключенВСтоимость Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ВычетНДСНаОснованииДокумента Цикл
		
		Если СтрокаТаблицы.СуммаНДСПерепоставкиРуб = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаТаблицы.Регистратор);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",  Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);
		
		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные",    Реквизиты.ДокументПоступленияСсылка);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",     Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);
		
		Проводка.Сумма = СтрокаТаблицы.СуммаНДСПерепоставкиРуб;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Формирует список счетов учета ценностей
// ОС - основных средств
// НМА - нематериальных активов
// ВНА - внеоборотных активов
// ОбъектыСтроительства - объектов строительства
// Материалы - материалов
//
Функция ОпределитьСчетаУчетаЦенностей(ОбъектыУчета = "", ДатаОбъекта = '00010101') Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;

	СчетаУчетаЗатрат = Новый СписокЗначений();
	Если ОбъектыУчета = "Оборудование" Или ОбъектыУчета = "ВНА" Тогда
		Если ДатаОбъекта >= '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		Иначе
			Возврат СчетаУчетаЗатрат;
		КонецЕсли;
	КонецЕсли;
	Если ОбъектыУчета = "ОС" Или ОбъектыУчета = "ВНА" Тогда
		Если ДатаОбъекта < '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		КонецЕсли;
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	КонецЕсли;
	Если ОбъектыУчета = "НМА" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	КонецЕсли;
	Если ОбъектыУчета = "ОбъектыСтроительства" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	КонецЕсли;
	Если ОбъектыУчета = "Материалы" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Родитель =&Счет
		|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";

	ВременныеСчетаУчетаЗатрат = СчетаУчетаЗатрат.Скопировать();

	Для каждого Счет из ВременныеСчетаУчетаЗатрат Цикл

		Запрос.УстановитьПараметр("Счет",Счет.Значение);
		Результат = Запрос.Выполнить().Выгрузить();

		Пока Результат.Количество()>0 Цикл

			Для каждого строка из Результат цикл
				СчетаУчетаЗатрат.Добавить(строка.Ссылка);
			КонецЦикла;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Родитель","Родитель.Родитель");
			Результат = Запрос.Выполнить().Выгрузить();

		КонецЦикла;

    КонецЦикла;

	Возврат СчетаУчетаЗатрат;


КонецФункции

Функция ОпределитьВидЦенности(СчетУчета, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено) Экспорт

	ВидЦенности = Перечисления.ВидыЦенностей.ПустаяСсылка();

	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;

	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) Тогда

		Если Субконто1 = Перечисления.СпособыСтроительства.Хозспособ
			ИЛИ Субконто2 = Перечисления.СпособыСтроительства.Хозспособ
			ИЛИ Субконто3 = Перечисления.СпособыСтроительства.Хозспособ Тогда

			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			
		ИначеЕсли Субконто1 = Перечисления.СпособыСтроительства.Подрядный
			ИЛИ Субконто2 = Перечисления.СпособыСтроительства.Подрядный
			ИЛИ Субконто3 = Перечисления.СпособыСтроительства.Подрядный Тогда

			ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
			
		ИначеЕсли ТипЗнч(Субконто1) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
			
			ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства;

		Иначе

			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;

		КонецЕсли;

	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОсновноеПроизводство)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ИздержкиОбращения)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.КоммерческиеРасходы) Тогда

		Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтатьяЗатрат = Субконто1;
		ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтатьяЗатрат = Субконто2;
		ИначеЕсли ТипЗнч(Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтатьяЗатрат = Субконто3;
		Иначе
			СтатьяЗатрат = Неопределено;
		КонецЕсли;

		Если СтатьяЗатрат = Неопределено Тогда

			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;

		Иначе

			Если СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.КомандировочныеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы;
			ИначеЕсли СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ПредставительскиеРасходы;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Материалы) Тогда

		ВидЦенности = Перечисления.ВидыЦенностей.Материалы;

	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Товары)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ГотоваяПродукция)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Полуфабрикаты) Тогда

		ВидЦенности = Перечисления.ВидыЦенностей.Товары;

	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОсновныеСредства) Тогда

		ВидЦенности = Перечисления.ВидыЦенностей.ОС;

	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.НематериальныеАктивы) Тогда

		ВидЦенности = Перечисления.ВидыЦенностей.НМА;

	Иначе

		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;

	КонецЕсли;

	Возврат ВидЦенности;

КонецФункции

//Функция определения вида ценности по группе критериев
//
Функция ОпределитьВидЦенностиПоОперации(Объект, СчетУчета, ЭтоДопРасходы = Ложь, ЭтоАгентскийНДС = Ложь, ВидАгентскогоДоговора = "", СпособСтроительства = Неопределено, ЭтоУслуга = Неопределено, ВидыЦенностейПоСчетамУчета = Неопределено, СтруктураШапкиДокумента = Неопределено) Экспорт

	ВидЦенности = Перечисления.ВидыЦенностей.ПустаяСсылка();
	Если ВидыЦенностейПоСчетамУчета = Неопределено Тогда
		ВидыЦенностейПоСчетамУчета = Новый Соответствие;
	КонецЕсли;

	Если ЭтоАгентскийНДС Тогда
		
		ВидЦенности = Перечисления.ВидыЦенностей.ВидЦенностиПоВидуАгентскогоДоговора(ВидАгентскогоДоговора);
		
	ИначеЕсли ЭтоДопРасходы Тогда
		// Это всегда услуги
		Если ЗначениеЗаполнено(СчетУчета)
			И БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) тогда
			ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕслИ;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") тогда
		ВидЦенности = ?(ВидыЦенностейПоСчетамУчета = Неопределено, Неопределено, ВидыЦенностейПоСчетамУчета[СчетУчета]);
		ДатаДокумента = ?(СтруктураШапкиДокумента = Неопределено, '00010101', СтруктураШапкиДокумента.Дата);


		Если ВидЦенности = Неопределено Тогда
			ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
			Если  СчетУчета = "нет" Или Не ЗначениеЗаполнено(СчетУчета) Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.Товары;
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланСчетовБУ.Материалы) Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.Материалы;
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланСчетовБУ.ПриобретениеОбъектовОсновныхСредств)
				ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланСчетовБУ.ОборудованиеКУстановке) Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ОС;
			ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланСчетовБУ.ПриобретениеНематериальныхАктивов)   Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.НМА;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.Товары;
			КонецЕсли;
		КонецЕсли;

		Если ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги ИЛИ ВидЦенности = Перечисления.ВидыЦенностей.Товары Тогда
			Если ЭтоУслуга = Неопределено Или ЭтоУслуга = Null Тогда
				ЭтоУслуга = ?(ЗначениеЗаполнено(Объект), БухгалтерскийУчетПереопределяемый.НоменклатураЯвляетсяУслугой(Объект), Ложь);
			КонецЕсли;
			Если ЭтоУслуга Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.Товары;
			КонецЕсли;
		КонецЕсли;
		ВидыЦенностейПоСчетамУчета.Вставить(СчетУчета, ВидЦенности);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.НематериальныеАктивы") тогда
		ВидЦенности = Перечисления.ВидыЦенностей.НМА;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ОсновныеСредства") тогда
		ВидЦенности = Перечисления.ВидыЦенностей.ОС;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ОбъектыСтроительства") тогда
		ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.СтатьиЗатрат") тогда
		СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["ОбъектыСтроительства"];
		Если СчетаУчетаЦенностей = Неопределено Тогда
			СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("ОбъектыСтроительства");
			ВидыЦенностейПоСчетамУчета.Вставить("ОбъектыСтроительства", СчетаУчетаЦенностей);
		КонецЕсли;
		Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
			Если СпособСтроительства = Перечисления.СпособыСтроительства.Хозспособ Тогда
				//Такая ситуация возникает при приобретении услуг, включаемых в затраты по строительству
				// не от строительной организации (не от подрядчика) (например, это услуги по охране объекта строительства).
				// Необходимо учитывать данные услуги как "Прочие работы и услуги".
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
			КонецЕсли;

		ИначеЕсли ЗначениеЗаполнено(Объект) Тогда
			Если Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.КомандировочныеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы;
			ИначеЕсли Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ПредставительскиеРасходы;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			КонецЕсли;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕсли;
		Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
			  ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности, ВидЦенности);
		КонецЦикла;

	Иначе
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;

	КонецЕсли;

	Возврат ВидЦенности;

КонецФункции // ОпределитьВидЦенностиПоОперации()

Процедура ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(ТаблицаТоварыУслуги, Реквизиты, ВидЦенности = Неопределено, ИмяКолонкиСчетУчета) Экспорт
	
	Если ТаблицаТоварыУслуги = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаТоварыУслуги.Колонки.Найти("ВидЦенности") = Неопределено Тогда
		ТаблицаТоварыУслуги.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	КонецЕсли;
	
	Если ТаблицаТоварыУслуги.Колонки.Найти("СчетУчетаЗабалансовый") = Неопределено Тогда
		ТаблицаТоварыУслуги.Колонки.Добавить("СчетУчетаЗабалансовый", Новый ОписаниеТипов("Булево"));
	КонецЕсли; 
	
	Если ТаблицаТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаТоварыУслуги.Колонки.Найти("Услуга") = Неопределено Тогда
		ТаблицаТоварыУслуги.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ОпределятьВидЦенностиНМА = Ложь;
	Если ТаблицаТоварыУслуги.Колонки.Найти("Номенклатура") = Неопределено Тогда
		НетКолонкиНоменклатура = Истина;
		Если ТаблицаТоварыУслуги.Колонки.Найти("ВидОбъектаУчета") <> Неопределено 
			И ВедетсяУчетНДСПоФЗ325(Реквизиты.Период) Тогда // порядок вычета зависит от вида объекта НМА 
			ОпределятьВидЦенностиНМА = Истина;
		КонецЕсли;
	Иначе	
		НетКолонкиНоменклатура = Ложь;
	КонецЕсли;
	
	Если Реквизиты.ЭлектронныеУслуги Тогда
		ТаблицаТоварыУслуги.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ЭлектронныеУслуги, "ВидЦенности");
	ИначеЕсли Реквизиты.УчетАгентскогоНДС Тогда
		ТаблицаТоварыУслуги.ЗаполнитьЗначения(
			Перечисления.ВидыЦенностей.ВидЦенностиПоВидуАгентскогоДоговора(Реквизиты.ВидАгентскогоДоговора), 
			"ВидЦенности");
	ИначеЕсли ВидЦенности <> Неопределено Тогда
		ТаблицаТоварыУслуги.ЗаполнитьЗначения(ВидЦенности, "ВидЦенности");
	Иначе
		
		СтруктураАналитики	= Новый Структура("Субконто1, Субконто2, Субконто3");
		
		Для каждого СтрокаТовара Из ТаблицаТоварыУслуги Цикл
			
			Если НетКолонкиНоменклатура
				ИЛИ СтрокаТовара.Услуга Тогда
				
				Если ОпределятьВидЦенностиНМА 
					И СтрокаТовара.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
					СтрокаТовара.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
					Продолжить;
				КонецЕсли;
				
				Для НомерСубконто = 1 По 3 Цикл
					ИмяАналитики = "Субконто" + НомерСубконто;
					Если НЕ ТаблицаТоварыУслуги.Колонки.Найти(ИмяАналитики) = Неопределено Тогда
						СтруктураАналитики.Вставить(ИмяАналитики, СтрокаТовара[ИмяАналитики]);
					КонецЕсли;
				КонецЦикла;
				
				СтрокаТовара.ВидЦенности = ОпределитьВидЦенности(СтрокаТовара[ИмяКолонкиСчетУчета],
					СтруктураАналитики.Субконто1, СтруктураАналитики.Субконто2, СтруктураАналитики.Субконто3);
			Иначе
				СтрокаТовара.ВидЦенности = ОпределитьВидЦенности(СтрокаТовара[ИмяКолонкиСчетУчета], СтрокаТовара.Номенклатура);
				
				Если ЗначениеЗаполнено(СтрокаТовара[ИмяКолонкиСчетУчета]) Тогда
					СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТовара[ИмяКолонкиСчетУчета]);
					СтрокаТовара.СчетУчетаЗабалансовый = СвойстваСчета.Забалансовый;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВидыЦенностей(ТаблицаТоварыУслуги, ВидЦенности = Неопределено, ИмяКолонкиСчетУчета, Регистратор = Неопределено) Экспорт

	Если ТаблицаТоварыУслуги = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаТоварыУслуги.Колонки.Найти("ВидЦенности") = Неопределено Тогда
		ТаблицаТоварыУслуги.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	КонецЕсли;
	
	Если ТаблицаТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Для услуг не на территории РФ особый вид ценностей.
	ПроверятьУслугиЗаРубеж = Ложь;
	Если ТаблицаТоварыУслуги.Колонки.Найти("УслугиЗаРубежом") <> Неопределено Тогда
		ПроверятьУслугиЗаРубеж = Истина;
	КонецЕсли;
	
	ВидЦенностиДляЗаполнения = ВидЦенности;
	Если ВидЦенностиДляЗаполнения = Неопределено И Регистратор <> Неопределено Тогда
		Если БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяОтчетомКомитенту(Регистратор) Тогда
			ВидЦенностиДляЗаполнения = Перечисления.ВидыЦенностей.ПосредническиеУслуги;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидЦенностиДляЗаполнения <> Неопределено Тогда
		ТаблицаТоварыУслуги.ЗаполнитьЗначения(ВидЦенностиДляЗаполнения, "ВидЦенности");
	Иначе
		
		СтруктураАналитики	= Новый Структура("Субконто1, Субконто2, Субконто3");
		
		Для каждого СтрокаТовара Из ТаблицаТоварыУслуги Цикл
			
			Для НомерСубконто = 1 По 3 Цикл
				ИмяАналитики	= "Субконто" + НомерСубконто;
				Если НЕ ТаблицаТоварыУслуги.Колонки.Найти(ИмяАналитики) = Неопределено Тогда
					СтруктураАналитики.Вставить(ИмяАналитики, СтрокаТовара[ИмяАналитики]);
				КонецЕсли;
			КонецЦикла;
			
			Если ПроверятьУслугиЗаРубеж 
				И СтрокаТовара.УслугиЗаРубежом Тогда
				СтрокаТовара.ВидЦенности = Перечисления.ВидыЦенностей.УслугиНеНаТерриторииРФ;
			// Вид ценности по услугам не на территории РФ может быть уже определен в документе
			ИначеЕсли СтрокаТовара.ВидЦенности <> Перечисления.ВидыЦенностей.УслугиНеНаТерриторииРФ Тогда
				СтрокаТовара.ВидЦенности = ОпределитьВидЦенности(СтрокаТовара[ИмяКолонкиСчетУчета],
					СтруктураАналитики.Субконто1, СтруктураАналитики.Субконто2, СтруктураАналитики.Субконто3);
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ЗАПОЛНЕНИЕ СЧЕТОВ-ФАКТУР

// Формирует список кодов видов операций, актуальный на переданную дату.
//
// Параметры:
//   ЧастьЖурнала         - Перечисления.ЧастиЖурналаУчетаСчетовФактур - список различается для полученных и выставленных счетов-фактур.
//   СписокКодовОпераций  - СписокЗначений - список выбора элемента формы, в который помещается формируемый список кодов видов операций.
//   Дата                 - Дата - дата, на которую требуется получить список кодов видов операций.
//
Процедура ЗаполнитьСписокКодовВидовОпераций(ЧастьЖурнала, СписокКодовОпераций, Период) Экспорт
	
	СписокКодовОпераций.Очистить();
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Период);
	
	Если ВерсияКодовВидовОпераций = 1 Тогда
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Получение товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы выданные'"));
			СписокКодовОпераций.Добавить("03", НСтр("ru = '03 - Возврат от покупателя'"));
			СписокКодовОпераций.Добавить("04", НСтр("ru = '04 - Товары, работы, услуги комитента'"));
			СписокКодовОпераций.Добавить("05", НСтр("ru = '05 - Авансы за товары, работы, услуги комитента'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездное получение товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("11", НСтр("ru = '11 - Полученные товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК'"));
			СписокКодовОпераций.Добавить("12", НСтр("ru = '12 - Авансы выданные за товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости'"));
			СписокКодовОпераций.Добавить("99", НСтр("ru = '99 - Вычет НДС по налоговым накладным'"));
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Реализованные товары, работы, услуги'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы полученные'"));
			СписокКодовОпераций.Добавить("03", НСтр("ru = '03 - Возврат поставщику'"));
			СписокКодовОпераций.Добавить("04", НСтр("ru = '04 - Товары, работы, услуги комитента'"));
			СписокКодовОпераций.Добавить("05", НСтр("ru = '05 - Авансы за товары, работы, услуги комитента'"));
			СписокКодовОпераций.Добавить("06", НСтр("ru = '06 - Налоговый агент, ст. 161 НК'"));
			СписокКодовОпераций.Добавить("07", НСтр("ru = '07 - Списание за счет прибыли, пп.2 п.1 ст. 146 НК'"));
			СписокКодовОпераций.Добавить("08", НСтр("ru = '08 - Строительно-монтажные работы, пп.3 п.1 ст. 146 НК'"));
			СписокКодовОпераций.Добавить("09", НСтр("ru = '09 - Суммы, связанные с расчетами по оплате, ст. 162 НК'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездная передача товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("11", НСтр("ru = '11 - Реализованные товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК'"));
			СписокКодовОпераций.Добавить("12", НСтр("ru = '12 - Авансы полученные за товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости'"));
		КонецЕсли;
	ИначеЕсли ВерсияКодовВидовОпераций = 2 Тогда
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Получение товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы выданные'"));
			СписокКодовОпераций.Добавить("03", НСтр("ru = '03 - Возврат от покупателя'"));
			СписокКодовОпераций.Добавить("04", НСтр("ru = '04 - Товары, работы, услуги комитента'"));
			СписокКодовОпераций.Добавить("05", НСтр("ru = '05 - Авансы за товары, работы, услуги комитента'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездное получение товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("11", НСтр("ru = '11 - Полученные товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК'"));
			СписокКодовОпераций.Добавить("12", НСтр("ru = '12 - Авансы выданные за товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС'"));
			СписокКодовОпераций.Добавить("17", НСтр("ru = '17 - Возврат от покупателя-физического лица'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения'"));
			СписокКодовОпераций.Добавить("19", НСтр("ru = '19 - Ввоз товаров из Евразийского экономического союза'"));
			СписокКодовОпераций.Добавить("20", НСтр("ru = '20 - Ввоз импортных товаров на территорию РФ'"));
			СписокКодовОпераций.Добавить("22", НСтр("ru = '22 - Возврат, зачет авансовых платежей, п.5 ст. 171, п.6 ст. 172 НК'"));
			СписокКодовОпераций.Добавить("23", НСтр("ru = '23 - Командировочные расходы по бланку строгой отчетности, п.7 ст. 171 НК'"));
			СписокКодовОпераций.Добавить("24", НСтр("ru = '24 - Подтверждение ставки 0% после истечения 180 дней'"));
			СписокКодовОпераций.Добавить("25", НСтр("ru = '25 - Подтверждение ставки 0% по ранее восстановленному НДС'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("99", НСтр("ru = '99 - Вычет НДС по налоговым накладным'"));
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Реализованные товары, работы, услуги'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы полученные'"));
			СписокКодовОпераций.Добавить("03", НСтр("ru = '03 - Возврат поставщику'"));
			СписокКодовОпераций.Добавить("04", НСтр("ru = '04 - Товары, работы, услуги комитента'"));
			СписокКодовОпераций.Добавить("05", НСтр("ru = '05 - Авансы за товары, работы, услуги комитента'"));
			СписокКодовОпераций.Добавить("06", НСтр("ru = '06 - Налоговый агент, ст. 161 НК'"));
			СписокКодовОпераций.Добавить("07", НСтр("ru = '07 - Списание за счет прибыли, пп.2 п.1 ст. 146 НК'"));
			СписокКодовОпераций.Добавить("08", НСтр("ru = '08 - Строительно-монтажные работы, пп.3 п.1 ст. 146 НК'"));
			СписокКодовОпераций.Добавить("09", НСтр("ru = '09 - Суммы, связанные с расчетами по оплате, ст. 162 НК'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездная передача товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("11", НСтр("ru = '11 - Реализованные товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК'"));
			СписокКодовОпераций.Добавить("12", НСтр("ru = '12 - Авансы полученные за товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения'"));
			СписокКодовОпераций.Добавить("21", НСтр("ru = '21 - Восстановление НДС, п.8 ст. 145, п.3 ст. 170, ст. 171.1 НК, а также при операциях, облагаемых по ставке 0%'"));
			СписокКодовОпераций.Добавить("26", НСтр("ru = '26 - Счета-фактуры не составляются по письменному согласию сторон'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК'"));
		КонецЕсли;
	ИначеЕсли ВерсияКодовВидовОпераций = 3 Тогда
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Получение товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы выданные'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости'"));
			СписокКодовОпераций.Добавить("15", НСтр("ru = '15 - Совместное приобретение товаров, работ, услуг для собственных нужд и для комитента'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС'"));
			СписокКодовОпераций.Добавить("17", НСтр("ru = '17 - Возврат от покупателя-физического лица'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения'"));
			СписокКодовОпераций.Добавить("19", НСтр("ru = '19 - Ввоз товаров из Евразийского экономического союза'"));
			СписокКодовОпераций.Добавить("20", НСтр("ru = '20 - Ввоз импортных товаров на территорию РФ'"));
			СписокКодовОпераций.Добавить("22", НСтр("ru = '22 - Возврат, зачет авансовых платежей, п.5 ст. 171, п.6 ст. 172 НК'"));
			СписокКодовОпераций.Добавить("23", НСтр("ru = '23 - Командировочные расходы по бланку строгой отчетности, п.7 ст. 171 НК'"));
			СписокКодовОпераций.Добавить("24", НСтр("ru = '24 - Подтверждение ставки 0% после истечения 180 дней'"));
			СписокКодовОпераций.Добавить("25", НСтр("ru = '25 - Вычет НДС при подтверждении ставки 0% по ранее восстановленному НДС, а также п.7 ст.172 НК'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("32", НСтр("ru = '32 - Вычет НДС в ОЭЗ Калининградской обл., п.14 ст. 171 НК'"));
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Реализация товаров, работ, услуг и операции, приравненные к ней'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы полученные'"));
			СписокКодовОпераций.Добавить("06", НСтр("ru = '06 - Налоговый агент, ст. 161 НК'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездная передача товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости'"));
			СписокКодовОпераций.Добавить("14", НСтр("ru = '14 - Реализация прав, пп.1-4 ст. 155 НК'"));
			СписокКодовОпераций.Добавить("15", НСтр("ru = '15 - Совместная реализация собственных и комиссионных товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения'"));
			СписокКодовОпераций.Добавить("21", НСтр("ru = '21 - Восстановление НДС, п.8 ст. 145, п.3 ст. 170, ст. 171.1 НК, а также при операциях, облагаемых по ставке 0%'"));
			СписокКодовОпераций.Добавить("26", НСтр("ru = '26 - Реализация товаров, работ, услуг неплательщикам НДС, получение авансов'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("29", НСтр("ru = '29 - Корректировка по п.6 ст. 105.3 НК'"));
			СписокКодовОпераций.Добавить("30", НСтр("ru = '30 - Отгрузка товаров в ОЭЗ Калининградской обл., абз.1 пп.1.1 п.1 ст. 151 НК'"));
			СписокКодовОпераций.Добавить("31", НСтр("ru = '31 - Уплата НДС в ОЭЗ Калининградской обл., абз.2 пп.1.1 п.1 ст. 151 НК'"));
		КонецЕсли;
	ИначеЕсли ВерсияКодовВидовОпераций = 4 Тогда 
		
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Получение товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы выданные'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости'"));
			СписокКодовОпераций.Добавить("15", НСтр("ru = '15 - Совместное приобретение товаров, работ, услуг для собственных нужд и для комитента'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС'"));
			СписокКодовОпераций.Добавить("17", НСтр("ru = '17 - Возврат от покупателя-физического лица'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения'"));
			СписокКодовОпераций.Добавить("19", НСтр("ru = '19 - Ввоз товаров из Евразийского экономического союза'"));
			СписокКодовОпераций.Добавить("20", НСтр("ru = '20 - Ввоз импортных товаров на территорию РФ'"));
			СписокКодовОпераций.Добавить("22", НСтр("ru = '22 - Возврат, зачет авансовых платежей, п.5 ст. 171, п.6 ст. 172 НК'"));
			СписокКодовОпераций.Добавить("23", НСтр("ru = '23 - Командировочные расходы по бланку строгой отчетности, п.7 ст. 171 НК'"));
			СписокКодовОпераций.Добавить("24", НСтр("ru = '24 - Подтверждение ставки 0% после истечения 180 дней'"));
			СписокКодовОпераций.Добавить("25", НСтр("ru = '25 - Вычет НДС при подтверждении ставки 0% по ранее восстановленному НДС, а также п.7 ст.172 НК'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("32", НСтр("ru = '32 - Вычет НДС в ОЭЗ Калининградской обл., п.14 ст. 171 НК'"));
			// Коды, введенные в действие с 1 января 2018 года.
			СписокКодовОпераций.Добавить("36", НСтр("ru = '36 - Вычет НДС при реализации гражданину иностранного государства, п.4.1 ст. 171 НК'"));
			СписокКодовОпераций.Добавить("41", НСтр("ru = '41 - Авансы выданные за товары п.8 ст. 161 НК'"));
			СписокКодовОпераций.Добавить("42", НСтр("ru = '42 - Получение товаров п.8 ст. 161 НК'"));
			СписокКодовОпераций.Добавить("43", НСтр("ru = '43 - Возврат, зачет авансовых платежей за товары п.8 ст. 161 НК'"));
			СписокКодовОпераций.Добавить("44", НСтр("ru = '44 - Изменение стоимости полученных товаров п.8 ст. 161 НК в сторону уменьшения'"));
			
			// Код, рекомендованный в письме ФНС от 14.05.2019 № СД-4-3/8916@
			СписокКодовОпераций.Добавить("45", НСтр("ru = '45 - Приобретение у иностранной организации услуг в электронной форме, п.2.1 ст. 171 НК'"));
			
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Реализация товаров, работ, услуг и операции, приравненные к ней'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы полученные'"));
			СписокКодовОпераций.Добавить("06", НСтр("ru = '06 - Налоговый агент, ст. 161 НК'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездная передача товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости'"));
			СписокКодовОпераций.Добавить("14", НСтр("ru = '14 - Реализация прав, пп.1-4 ст. 155 НК'"));
			СписокКодовОпераций.Добавить("15", НСтр("ru = '15 - Совместная реализация собственных и комиссионных товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС'"));
			СписокКодовОпераций.Добавить("17", НСтр("ru = '17 - Возврат от покупателя-физического лица'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения'"));
			СписокКодовОпераций.Добавить("21", НСтр("ru = '21 - Восстановление НДС, п.8 ст. 145, п.3 ст. 170, ст. 171.1 НК, а также при операциях, облагаемых по ставке 0%'"));
			СписокКодовОпераций.Добавить("26", НСтр("ru = '26 - Реализация товаров, работ, услуг неплательщикам НДС, получение авансов'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("29", НСтр("ru = '29 - Корректировка по п.6 ст. 105.3 НК'"));
			СписокКодовОпераций.Добавить("30", НСтр("ru = '30 - Отгрузка товаров в ОЭЗ Калининградской обл., абз.1 пп.1.1 п.1 ст. 151 НК'"));
			СписокКодовОпераций.Добавить("31", НСтр("ru = '31 - Уплата НДС в ОЭЗ Калининградской обл., абз.2 пп.1.1 п.1 ст. 151 НК'"));
			
			// Коды, введенные в действие с 1 января 2018 года.
			СписокКодовОпераций.Добавить("33", НСтр("ru = '33 - Авансы полученные за товары п.8 ст. 161 НК'"));
			СписокКодовОпераций.Добавить("34", НСтр("ru = '34 - Реализация товаров п.8 ст. 161 НК'"));
			СписокКодовОпераций.Добавить("35", НСтр("ru = '35 - Оформление документа для компенсации НДС гражданину иностранного государства'"));
			СписокКодовОпераций.Добавить("37", НСтр("ru = '37 - Реализация сырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК'"));
			СписокКодовОпераций.Добавить("38", НСтр("ru = '38 - Реализация несырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК'"));
			СписокКодовОпераций.Добавить("39", НСтр("ru = '39 - Реализация несырьевых товаров на экспорт по ставке 10%, п.7 ст.164 НК'"));
			СписокКодовОпераций.Добавить("40", НСтр("ru = '40 - Реализация работ (услуг) в отношении экспортируемых товаров по ставке 18%, пп.2.1-2.5,2.7 и 2.8 п.1, п.7 ст.164 НК'"));
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыСчетаФактурыДляИсправленияСобственнойОшибки(СчетФактура, СчетФактураИсправляемый) Экспорт
	
	Реквизиты = НовыйРеквизитыСчетаФактурыДляИсправленияСобственнойОшибки();
	
	Если ЗначениеЗаполнено(СчетФактура)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ИсправляемыйСчетФактура") = СчетФактураИсправляемый Тогда
		ЗаполнитьРеквизитыДляИсправленияСобственнойОшибки(Реквизиты, СчетФактура, Истина);
	ИначеЕсли ЗначениеЗаполнено(СчетФактураИсправляемый) Тогда
		ЗаполнитьРеквизитыДляИсправленияСобственнойОшибки(Реквизиты, СчетФактураИсправляемый, Ложь);
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция НовыйРеквизитыСчетаФактурыДляИсправленияСобственнойОшибки()
	
	Результат = Новый Структура;
	Результат.Вставить("НомерСчетаФактурыДоИзменения"                         , "");
	Результат.Вставить("НомерСчетаФактурыПослеИзменения"                      , "");
	Результат.Вставить("НомерИсправленияСчетаФактурыДоИзменения"              , 0);
	Результат.Вставить("НомерИсправленияСчетаФактурыПослеИзменения"           , 0);
	Результат.Вставить("ДатаСчетаФактурыДоИзменения"                          , '00010101');
	Результат.Вставить("ДатаСчетаФактурыПослеИзменения"                       , '00010101');
	Результат.Вставить("ИННКонтрагентаДоИзменения"                            , "");
	Результат.Вставить("ИННКонтрагента"                                       , "");
	Результат.Вставить("КППКонтрагентаДоИзменения"                            , "");
	Результат.Вставить("КППКонтрагента"                                       , "");
	Результат.Вставить("КодВидаОперацииСчетаФактурыДоИзменения"               , "");
	Результат.Вставить("КодВидаОперацииСчетаФактурыПослеИзменения"            , "");
	Результат.Вставить("КодВидаОперацииСчетаФактурыНаУменьшениеДоИзменения"   , "");
	Результат.Вставить("КодВидаОперацииСчетаФактурыНаУменьшениеПослеИзменения", "");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРеквизитыДляИсправленияСобственнойОшибки(Реквизиты, СчетФактура, ПоДаннымИсправленногоСФ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Запрос.Текст = ТекстЗапросаЗаполнениеРеквизитовИсправленияСобственнойОшибки(ПоДаннымИсправленногоСФ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	РеквизитыСчетаФактуры = Результат[0];
	
	ЗаполнитьЗначенияСвойств(Реквизиты, РеквизитыСчетаФактуры);
	
	Если НЕ ПоДаннымИсправленногоСФ Тогда
		Для Каждого КлючЗначение Из Реквизиты Цикл
			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) И СтрЗаканчиваетсяНа(КлючЗначение.Ключ, "ДоИзменения") Тогда
				ИмяКлючаПослеИзменения = СтрЗаменить(КлючЗначение.Ключ, "ДоИзменения", "ПослеИзменения");
				Реквизиты.Свойство(ИмяКлючаПослеИзменения, Реквизиты[КлючЗначение.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.ИННКонтрагентаДоИзменения) Тогда
			Реквизиты.ИННКонтрагентаДоИзменения = Реквизиты.ИННКонтрагента;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.КППКонтрагентаДоИзменения) Тогда
			Реквизиты.КППКонтрагентаДоИзменения = Реквизиты.КППКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыСчетаФактуры.Исправление Тогда
		Реквизиты.ДатаСчетаФактурыДоИзменения    = РеквизитыСчетаФактуры.ДатаИсправленияСчетаФактурыДоИзменения;
		Реквизиты.ДатаСчетаФактурыПослеИзменения = РеквизитыСчетаФактуры.ДатаИсправленияСчетаФактурыПослеИзменения;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполнениеРеквизитовИсправленияСобственнойОшибки(ПоДаннымИсправленногоСФ)
	
	Если ПоДаннымИсправленногоСФ Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СчетФактураПолученный.КППКонтрагентаДоИзменения,
		|	СчетФактураПолученный.ИННКонтрагентаДоИзменения,
		|	СчетФактураПолученный.КодВидаОперацииДоИзменения КАК КодВидаОперацииСчетаФактурыДоИзменения,
		|	СчетФактураПолученный.КодВидаОперацииНаУменьшениеДоИзменения КАК КодВидаОперацииСчетаФактурыНаУменьшениеДоИзменения,
		|	СчетФактураПолученный.ДатаИсправленияДоИзменения КАК ДатаИсправленияСчетаФактурыДоИзменения,
		|	СчетФактураПолученный.НомерИсправленияДоИзменения КАК НомерИсправленияСчетаФактурыДоИзменения,
		|	СчетФактураПолученный.ДатаВходящегоДокументаДоИзменения КАК ДатаСчетаФактурыДоИзменения,
		|	СчетФактураПолученный.НомерВходящегоДокументаДоИзменения КАК НомерСчетаФактурыДоИзменения,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.ИННКонтрагента = """"
		|			ТОГДА СчетФактураПолученный.Контрагент.ИНН
		|		ИНАЧЕ СчетФактураПолученный.ИННКонтрагента
		|	КОНЕЦ КАК ИННКонтрагента,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.КППКонтрагента = """"
		|			ТОГДА СчетФактураПолученный.Контрагент.КПП
		|		ИНАЧЕ СчетФактураПолученный.КППКонтрагента
		|	КОНЕЦ КАК КППКонтрагента,
		|	СчетФактураПолученный.КодВидаОперации КАК КодВидаОперацииСчетаФактурыПослеИзменения,
		|	СчетФактураПолученный.КодВидаОперацииНаУменьшение КАК КодВидаОперацииСчетаФактурыНаУменьшениеПослеИзменения,
		|	СчетФактураПолученный.ДатаИсправления КАК ДатаИсправленияСчетаФактурыПослеИзменения,
		|	СчетФактураПолученный.НомерИсправления КАК НомерИсправленияСчетаФактурыПослеИзменения,
		|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаСчетаФактурыПослеИзменения,
		|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСчетаФактурыПослеИзменения,
		|	СчетФактураПолученный.Исправление
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.Ссылка = &СчетФактура";
		
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.ИННКонтрагента = """"
		|			ТОГДА СчетФактураПолученный.Контрагент.ИНН
		|		ИНАЧЕ СчетФактураПолученный.ИННКонтрагента
		|	КОНЕЦ КАК ИННКонтрагентаДоИзменения,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.КППКонтрагента = """"
		|			ТОГДА СчетФактураПолученный.Контрагент.КПП
		|		ИНАЧЕ СчетФактураПолученный.КППКонтрагента
		|	КОНЕЦ КАК КППКонтрагентаДоИзменения,
		|	СчетФактураПолученный.КодВидаОперации КАК КодВидаОперацииСчетаФактурыДоИзменения,
		|	СчетФактураПолученный.КодВидаОперацииНаУменьшение КАК КодВидаОперацииСчетаФактурыНаУменьшениеДоИзменения,
		|	СчетФактураПолученный.ДатаИсправления КАК ДатаИсправленияСчетаФактурыДоИзменения,
		|	СчетФактураПолученный.НомерИсправления КАК НомерИсправленияСчетаФактурыДоИзменения,
		|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаСчетаФактурыДоИзменения,
		|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСчетаФактурыДоИзменения,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.ИННКонтрагента = """"
		|			ТОГДА СчетФактураПолученный.Контрагент.ИНН
		|		ИНАЧЕ СчетФактураПолученный.ИННКонтрагента
		|	КОНЕЦ КАК ИННКонтрагента,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.КППКонтрагента = """"
		|			ТОГДА СчетФактураПолученный.Контрагент.КПП
		|		ИНАЧЕ СчетФактураПолученный.КППКонтрагента
		|	КОНЕЦ КАК КППКонтрагента,
		|	СчетФактураПолученный.КодВидаОперации КАК КодВидаОперацииСчетаФактурыПослеИзменения,
		|	СчетФактураПолученный.КодВидаОперацииНаУменьшение КАК КодВидаОперацииСчетаФактурыНаУменьшениеПослеИзменения,
		|	СчетФактураПолученный.ДатаИсправления КАК ДатаИсправленияСчетаФактурыПослеИзменения,
		|	СчетФактураПолученный.НомерИсправления КАК НомерИсправленияСчетаФактурыПослеИзменения,
		|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаСчетаФактурыПослеИзменения,
		|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСчетаФактурыПослеИзменения,
		|	СчетФактураПолученный.Исправление
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.Ссылка = &СчетФактура";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ПЕЧАТЬ СЧЕТОВ-ФАКТУР

Процедура УстановкаМинимальныхПолейДляПечати(ТабличныйДокумент)

	// Принудительная установка минимальных полей
	Если ТабличныйДокумент.ПолеСлева < 10 Тогда
		ТабличныйДокумент.ПолеСлева = 10;
	КонецЕсли; 
	
	// Проверка на веб-клиент
	СисИнфо = Новый СистемнаяИнформация;
	ЗначениеПоляСправа = ?(ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра), 5, 10); 
		
	Если ТабличныйДокумент.ПолеСправа < ЗначениеПоляСправа Тогда
		ТабличныйДокумент.ПолеСправа = ЗначениеПоляСправа;
	КонецЕсли; 

	Если ТабличныйДокумент.ПолеСверху < 5 Тогда
		ТабличныйДокумент.ПолеСверху = 5;
	КонецЕсли; 

	Если ТабличныйДокумент.ПолеСнизу < 5 Тогда
		ТабличныйДокумент.ПолеСнизу = 5;
	КонецЕсли; 	

КонецПроцедуры

Функция ПечатьСчетовФактур1137(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура1137";
	
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура1137");
	
	Возврат ТабличныйДокументСчетаФактуры1137(
		Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати);
		
КонецФункции

Функция ПечатьСчетовФактур981(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура981";
	
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура981");
	
	Возврат ТабличныйДокументСчетаФактуры1137(
		Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати);
	
КонецФункции

Функция ТабличныйДокументСчетаФактуры1137(Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати)
	
	ДанныеСчетовФактур = ПолучитьДанныеДляПечатиСчетаФактуры1137(МассивОбъектов, ТекстЗапросаПоСчетамФактурам);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ВыборкаСФ ИЗ ДанныеСчетовФактур Цикл
		
		ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);
			
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабДокумент, ВыборкаСФ, ОбъектыПечати, ПараметрыПечати);
		
	КонецЦикла;
	
	Если МассивОбъектов.Количество() = 1 И ПервыйДокумент Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для %1 печатная форма ""Счет-фактура"" не применяется'"), Строка(МассивОбъектов[0]));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ, ЭтоУниверсальныйПередаточныйДокумент = Ложь)
	
	ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
	
	// Вывод шапки

	ДанныеШапки   = ВыборкаСФ.ДанныеШапки;
	
	ВедетсяУчетНДСПоФЗ56    = ВедетсяУчетНДСПоФЗ56(ДанныеШапки.Дата);
	ВерсияПостановления1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДанныеШапки.Дата);
	
	Если ВерсияПостановления1137 >= 4
		ИЛИ НЕ ВедетсяУчетНДСПоФЗ56 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	Иначе
		Если НЕ ЗначениеЗаполнено(Макет.Области.Найти("Шапка625")) Тогда 
			ТекстИсключения = НСтр("ru = 'C 01.07.2017 г. изменился типовой макет печатной формы счета-фактуры. Для использования 
			|новой формы необходимо обновить отредактированный ранее макет. 
			|Вы можете отредактировать макет самостоятельно в разделе ""Администрирование - Печатные формы,
			|отчеты, обработки - Макеты печатных форм"" или обратиться к специалисту обслуживающей организации.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка625");
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	
	Если ЭтоУниверсальныйПередаточныйДокумент Тогда
		
		НомерСчетаФактуры = "Универсальный передаточный документ № " + ДанныеШапки.Номер + " от " + Формат(ДанныеШапки.Дата, "ДЛФ='ДД'");
		
		ОбластьМакета.Параметры.Номер = ДанныеШапки.Номер;
		ОбластьМакета.Параметры.Дата  = Формат(ДанныеШапки.Дата, "ДЛФ='ДД'");
		
		ОбластьМакета.Параметры.НомерИсправления = ДанныеШапки.НомерИсправления;
		ОбластьМакета.Параметры.ДатаИсправления  = Формат(ДанныеШапки.ДатаИсправления, "ДЛФ='ДД'");
		
		ОбластьМакета.Параметры.ПоДокументу = ДанныеШапки.ПоДокументу;
		ОбластьМакета.Параметры.Валюта = ДанныеШапки.ВалютаНаименование;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ДанныеШапки.ПредставлениеПоставщика;
		ОбластьМакета.Параметры.ИННПоставщика = ?(ДанныеШапки.Свойство("ИННКПППоставщика"), 
			ДанныеШапки.ИННКПППоставщика, 
			"" + ДанныеШапки.ИННПоставщика + ?(ЗначениеЗаполнено(ДанныеШапки.КПППоставщика), "/" + ДанныеШапки.КПППоставщика, ""));
		ОбластьМакета.Параметры.АдресПоставщика = ДанныеШапки.АдресПоставщика;
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ДанныеШапки.ПредставлениеГрузоотправителя;
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ДанныеШапки.ПредставлениеПокупателя;
		ОбластьМакета.Параметры.ИННПокупателя = ?(ДанныеШапки.Свойство("ИННКПППокупателя"), 
			ДанныеШапки.ИННКПППокупателя, 
			"" + ДанныеШапки.ИННПокупателя + ?(ЗначениеЗаполнено(ДанныеШапки.КПППокупателя), "/" + ДанныеШапки.КПППокупателя, ""));
		ОбластьМакета.Параметры.АдресПокупателя = ДанныеШапки.АдресПокупателя;
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ДанныеШапки.ПредставлениеГрузополучателя;
		
	Иначе
		
		НомерСчетаФактуры = "Счет-фактура № " + ДанныеШапки.Номер + " от " + Формат(ДанныеШапки.Дата, "ДЛФ='ДД'");
		
		ОбластьМакета.Параметры.Номер = НомерСчетаФактуры;
		ОбластьМакета.Параметры.НомерИсправления = "Исправление № " + ДанныеШапки.НомерИсправления + " от " + Формат(ДанныеШапки.ДатаИсправления, "ДЛФ='ДД'");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " + ДанныеШапки.ПредставлениеПоставщика;
		ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " + ДанныеШапки.АдресПоставщика;
		ОбластьМакета.Параметры.ИННПоставщика = "ИНН/КПП продавца: " + ?(ДанныеШапки.Свойство("ИННКПППоставщика"), 
			ДанныеШапки.ИННКПППоставщика, 
			"" + ДанныеШапки.ИННПоставщика + ?(ЗначениеЗаполнено(ДанныеШапки.КПППоставщика), "/" + ДанныеШапки.КПППоставщика, ""));
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: " + ДанныеШапки.ПредставлениеГрузоотправителя;
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " + ДанныеШапки.ПредставлениеГрузополучателя;
		ОбластьМакета.Параметры.ПоДокументу = "К платежно-расчетному документу № " + ДанныеШапки.ПоДокументу;
		ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " + ДанныеШапки.ПредставлениеПокупателя;
		ОбластьМакета.Параметры.АдресПокупателя = "Адрес: " + ДанныеШапки.АдресПокупателя;
		ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: " + ?(ДанныеШапки.Свойство("ИННКПППокупателя"), 
			ДанныеШапки.ИННКПППокупателя, 
			"" + ДанныеШапки.ИННПокупателя + ?(ЗначениеЗаполнено(ДанныеШапки.КПППокупателя), "/" + ДанныеШапки.КПППокупателя, ""));
		ОбластьМакета.Параметры.Валюта = "Валюта: наименование, код " + ДанныеШапки.ВалютаНаименование;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ВедетсяУчетНДСПоФЗ56 Тогда 
		
		Если НЕ ЗначениеЗаполнено(Макет.Области.Найти("ИдентификаторГосКонтракта")) Тогда 
			ТекстИсключения = НСтр("ru = 'C 01.07.2017 г. изменился типовой макет печатной формы счета-фактуры. Для использования 
			|новой формы необходимо обновить отредактированный ранее макет. 
			|Вы можете отредактировать макет самостоятельно в разделе ""Администрирование - Печатные формы,
			|отчеты, обработки - Макеты печатных форм"" или обратиться к специалисту обслуживающей организации.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
		Если ЭтоУниверсальныйПередаточныйДокумент Тогда 
			ОбластьМакета.Параметры.ИдентификаторГосКонтракта = ДанныеШапки.ИдентификаторГосКонтракта;
		Иначе
			Если ВерсияПостановления1137 >= 4 Тогда
				ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения) (при наличии): %1'");
			Иначе
				ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения): %1'");
			КонецЕсли;
			ОбластьМакета.Параметры.ИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовкаГосконтракт, ДанныеШапки.ИдентификаторГосКонтракта);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Вывод заголовка таблицы

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывод табличной части
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	КоличествоСтраниц = 1;
	
	СчетФактураБезНДС = Истина;
	НДСНеВыставляетя  = Истина;
	
	НомерСтроки = 0;
	НомерЛиста = 1;
	КоличествоСтрок = ТаблицаДокумента.Количество();
	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаДокумента.НомерСтроки = НомерСтроки;
		
		Если ВерсияПостановления1137 >= 4 Тогда
			Если ЭтоУниверсальныйПередаточныйДокумент Тогда
				СтрокаДокумента.Акциз = "без
					|акциза";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДокумента.РегистрационныйНомерТД) Тогда
				СтрокаДокумента.ПредставлениеГТД = СтрокаДокумента.РегистрационныйНомерТД;
			Иначе
				СтрокаДокумента.ПредставлениеГТД = "";
				СтрокаДокумента.ПредставлениеСтраны = "";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаДокумента);
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтавкаНДС) Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "--";
			Если СтрокаДокумента.СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.СуммаНДС = "--";
			КонецЕсли;
		КонецЕсли;
		
		ДозаполнитьСтрокуСчетаФактуры1137(ОбластьМакета, ВыборкаСФ.ВидСчетаФактуры);
		
		Если ДанныеШапки.НДСИсчисляетсяНалоговымАгентом Тогда
			ОбластьМакета.Параметры.СтавкаНДС = НадписьСтавкаНДСИсчисляетсяНалоговымАгентом();
			ОбластьМакета.Параметры.СуммаНДС  = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
			ОбластьМакета.Параметры.Всего     = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
			ОбластьМакета.Параметры.Стоимость = СтрокаДокумента.Стоимость;
		КонецЕсли;
		
		Если НЕ ПроверитьВыводСчетаФактурыНаСтраницу(ТабДокумент, ОбластьМакета, (НомерСтроки = КоличествоСтрок), Макет, НомерЛиста, НомерСчетаФактуры, ЭтоУниверсальныйПередаточныйДокумент) Тогда
			КоличествоСтраниц = КоличествоСтраниц + 1;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		СчетФактураБезНДС = СчетФактураБезНДС И СтрокаДокумента.СуммаНДС = 0
			И СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		
		НДСНеВыставляетя = НДСНеВыставляетя И СтрокаДокумента.СуммаНДС = 0
			И НЕ ЗначениеЗаполнено(СтрокаДокумента.СтавкаНДС);
		
	КонецЦикла;

	ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	
	// Вывод итоговых сумм

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	Если ДанныеШапки.НДСИсчисляетсяНалоговымАгентом Тогда
		ОбластьМакета.Параметры.ИтогоСтоимость = ТаблицаДокумента.Итог("Стоимость");
	ИначеЕсли ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
	      ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
	      ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		ОбластьМакета.Параметры.ИтогоСтоимость = "--";
	Иначе
		ОбластьМакета.Параметры.ИтогоСтоимость = ТаблицаДокумента.Итог("Стоимость");
	КонецЕсли;
	
	Если ДанныеШапки.НДСИсчисляетсяНалоговымАгентом Тогда
		ОбластьМакета.Параметры.ИтогоСуммаНДС = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
	ИначеЕсли НДСНеВыставляетя Тогда
		ОбластьМакета.Параметры.ИтогоСуммаНДС = "--";
	ИначеЕсли СчетФактураБезНДС Тогда
		ОбластьМакета.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакета.Параметры.ИтогоСуммаНДС = ТаблицаДокумента.Итог("СуммаНДС");
	КонецЕсли;
	
	Если ДанныеШапки.НДСИсчисляетсяНалоговымАгентом Тогда
		ОбластьМакета.Параметры.ИтогоВсего = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
	Иначе
		ОбластьМакета.Параметры.ИтогоВсего = ТаблицаДокумента.Итог("Всего");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывод подвала
	КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
		ОбщегоНазначенияБПКлиентСервер.ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц));
	
	ДанныеШапки.Вставить("КоличествоЛистов", КоличествоЛистов);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывод информации о комиссионере по договорам комиссии на закупку
	
	Если НЕ ЭтоУниверсальныйПередаточныйДокумент И ЗначениеЗаполнено(ДанныеШапки.ПредставлениеКомиссионера) Тогда
	
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыКомиссионера");
		ОбластьМакета.Параметры.ПредставлениеКомиссионера = ДанныеШапки.ПредставлениеКомиссионера;
		ТабДокумент.Вывести(ОбластьМакета);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнитьСтрокуСчетаФактуры1137(ОбластьМакета, ВидСчетаФактуры)

	Если ОбластьМакета.Параметры.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
		ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
	КонецЕсли;
		
	// Проставляем прочерки в незаполненные графы в соответствии с Постановлением 1137
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		
		ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
		ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		
		ОбластьМакета.Параметры.Количество = "--";
		ОбластьМакета.Параметры.Цена       = "--";
		ОбластьМакета.Параметры.Стоимость  = "--";
		ОбластьМакета.Параметры.Акциз      = "--";
		
		ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
		ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
		ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
			ОбластьМакета.Параметры.Количество = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
			ОбластьМакета.Параметры.Цена = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредставлениеСтраны) Тогда
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредставлениеГТД) Тогда 
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьВыводСчетаФактурыНаСтраницу(ТабДокумент, ОбластьТекСтроки, ЭтоПоследняяСтрока, Макет, НомерЛиста, НомерСчетаФактуры, ЭтоУниверсальныйПередаточныйДокумент = Ложь)
	
	// Проверим возможность вывода табличного документа
	СтрокаСПодвалом = Новый Массив;
	СтрокаСПодвалом.Добавить(ОбластьТекСтроки);
	Если ЭтоПоследняяСтрока Тогда
		// Если последняя строка, то должен поместиться еще итог и подвал
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Итого"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Подвал"));
		Если ЭтоУниверсальныйПередаточныйДокумент Тогда
			СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалНакладной"));
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом);
	
	Если НЕ РезультатПроверки Тогда
		// Вывод разделителя и заголовка таблицы на новой странице
		
		НомерЛиста = НомерЛиста + 1;
		
		ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
		ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактуры;
		ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерЛиста;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТабДокумент.Вывести(ОбластьНумерацияЛистов);
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПечатьКорректировочныхСчетовФактур1137(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_КорректировочныйСчетФактура1137";
	
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура1137");
	
	Возврат ТабличныйДокументКорректировочногоСчетаФактуры(
		Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати);

КонецФункции

Функция ПечатьКорректировочныхСчетовФактур952(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_КорректировочныйСчетФактура952";

	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура952");
	
	Возврат ТабличныйДокументКорректировочногоСчетаФактуры(
		Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати);
		
КонецФункции

Функция ПечатьКорректировочныхСчетовФактур981(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_КорректировочныйСчетФактура981";
	
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура981");
	Возврат ТабличныйДокументКорректировочногоСчетаФактуры(
		Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати);
		
КонецФункции

Функция ПечатьКорректировочныхСчетовФактур981Аванс(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_КорректировочныйСчетФактура981Аванс";
	
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура981Аванс");
	Возврат ТабличныйДокументКорректировочногоСчетаФактуры(
		Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати);
		
КонецФункции

Функция ТабличныйДокументКорректировочногоСчетаФактуры(Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати)
	
	ДанныеСчетовФактур = ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(МассивОбъектов, ТекстЗапросаПоСчетамФактурам);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ВыборкаСФ ИЗ ДанныеСчетовФактур Цикл
		
		ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);
			
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабДокумент, ВыборкаСФ, ОбъектыПечати, ПараметрыПечати);

	КонецЦикла;
		
	Возврат ТабДокумент;
	
КонецФункции

Процедура ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ, ЭтоУниверсальныйКорректировочныйДокумент = Ложь)
	
	ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
	
	// Вывод шапки
	ДанныеШапки   = ВыборкаСФ.ДанныеШапки;
	
	НаАванс = ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс;
	
	ВедетсяУчетНДСПоФЗ56    = ВедетсяУчетНДСПоФЗ56(ДанныеШапки.Дата);
	ВерсияПостановления1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДанныеШапки.Дата);
	
	Если НЕ ЭтоУниверсальныйКорректировочныйДокумент Тогда
		Если ВедетсяУчетНДСПоФЗ56 
			И ВерсияПостановления1137 < 4 Тогда 
			Если НЕ ЗначениеЗаполнено(Макет.Области.Найти("Шапка625")) Тогда 
				ТекстИсключения = НСтр("ru = 'C 01.07.2017 г. изменился типовой макет печатной формы счета-фактуры. Для использования 
				|новой формы необходимо обновить отредактированный ранее макет. 
				|Вы можете отредактировать макет самостоятельно в разделе ""Администрирование - Печатные формы,
				|отчеты, обработки - Макеты печатных форм"" или обратиться к специалисту обслуживающей организации.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка625");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		КонецЕсли;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	КонецЕсли;
	
	Если ЭтоУниверсальныйКорректировочныйДокумент Тогда
		
		Если ВедетсяУчетНДСПоФЗ56 
			И ВерсияПостановления1137 < 4 Тогда 
			Если НЕ ЗначениеЗаполнено(Макет.Области.Найти("ЗаголовокДокумента625")) Тогда 
				ТекстИсключения = НСтр("ru = 'C 01.07.2017 г. изменился типовой макет печатной формы счета-фактуры. Для использования 
				|новой формы необходимо обновить отредактированный ранее макет. 
				|Вы можете отредактировать макет самостоятельно в разделе ""Администрирование - Печатные формы,
				|отчеты, обработки - Макеты печатных форм"" или обратиться к специалисту обслуживающей организации.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			ОбластьЗаголовка = Макет.ПолучитьОбласть("ЗаголовокДокумента625");
		Иначе
			ОбластьЗаголовка = Макет.ПолучитьОбласть("ЗаголовокДокумента");
		КонецЕсли;
		
		НомерСчетаФактуры = ДанныеШапки.Номер;
		ДатаСчетаФактуры = Формат(ДанныеШапки.Дата, "ДЛФ=ДД; ДП=--");
		ОбластьЗаголовка.Параметры.Номер = НомерСчетаФактуры;
		ОбластьЗаголовка.Параметры.Дата  = ДатаСчетаФактуры;
		
		ОбластьЗаголовка.Параметры.НомерИсправленияКорректировочного = ДанныеШапки.НомерИсправленияКорректировочного;
		ОбластьЗаголовка.Параметры.ДатаИсправленияКорректировочного  = Формат(ДанныеШапки.ДатаИсправленияКорректировочного, "ДЛФ=ДД; ДП=--");
		
		ТабДокумент.Вывести(ОбластьЗаголовка);
		
		Если ДанныеШапки.ТаблицаРеквизитовОснований.Количество() > 1 Тогда
			
			ОбластьОснований = Макет.ПолучитьОбласть("ОбластьОснований");
			
			РеквизитыОснований = "";
			
			Для каждого Основание Из ДанныеШапки.ТаблицаРеквизитовОснований Цикл
				РеквизитыОснований = ?(РеквизитыОснований = "", РеквизитыОснований,РеквизитыОснований + ", ") + "№ " + Основание.НомерСчетаФактуры + " от " 
				+ Формат(Основание.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--") + ", с учетом исправления № "
				+ Основание.НомерИсправления + " от " + Формат(Основание.ДатаИсправления, "ДЛФ=ДД; ДП=--");
			КонецЦикла;
			
			ОбластьОснований.Параметры.РеквизитыОснований = РеквизитыОснований;
			
		ИначеЕсли ДанныеШапки.ТаблицаРеквизитовОснований.Количество() = 1 Тогда
			
			ОбластьОснований = Макет.ПолучитьОбласть("ОбластьОснования");
			
			Основание = ДанныеШапки.ТаблицаРеквизитовОснований[0];
			
			ОбластьОснований.Параметры.НомерОснования 				= Основание.НомерСчетаФактуры;
			ОбластьОснований.Параметры.ДатаОсновнания  			= Формат(Основание.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--");
			ОбластьОснований.Параметры.НомерИсправленияОснования 	= Основание.НомерИсправления;
			ОбластьОснований.Параметры.ДатаИсправленияОснования  	= Формат(Основание.ДатаИсправления, "ДЛФ=ДД; ДП=--");
		Иначе
			
			ОбластьОснований = Макет.ПолучитьОбласть("ОбластьОснования");
			
			ОбластьОснований.Параметры.НомерОснования 				= "--";
			ОбластьОснований.Параметры.ДатаОсновнания  			= "--";
			ОбластьОснований.Параметры.НомерИсправленияОснования 	= "--";
			ОбластьОснований.Параметры.ДатаИсправленияОснования  	= "--";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьОснований);
		
		ОбластьМакета.Параметры.Валюта = ДанныеШапки.ВалютаНаименованиеУКД;
		
		ОбластьМакета.Параметры.СтатусУКД  = ДанныеШапки.СтатусУКД;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ДанныеШапки.НаименованиеПродавца;
		ОбластьМакета.Параметры.ИННПоставщика = ДанныеШапки.ИННПродавца + ?(ЗначениеЗаполнено(ДанныеШапки.КПППродавца), "/" + ДанныеШапки.КПППродавца, "");
		ОбластьМакета.Параметры.АдресПоставщика = ДанныеШапки.АдресПродавца;
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ДанныеШапки.НаименованиеПокупателя;
		ОбластьМакета.Параметры.ИННПокупателя = ДанныеШапки.ИННПокупателя + ?(ЗначениеЗаполнено(ДанныеШапки.КПППокупателя), "/" + ДанныеШапки.КПППокупателя, "");
		ОбластьМакета.Параметры.АдресПокупателя = ДанныеШапки.АдресПокупателя;
		
	Иначе
		НомерСчетаФактуры = ДанныеШапки.Номер;
		ДатаСчетаФактуры = Формат(ДанныеШапки.Дата, "ДЛФ=ДД; ДП=--");
		ОбластьМакета.Параметры.Номер = НомерСчетаФактуры;
		ОбластьМакета.Параметры.Дата  = ДатаСчетаФактуры;
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = ДанныеШапки.НомерИсправленияКорректировочного;
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = Формат(ДанныеШапки.ДатаИсправленияКорректировочного, "ДЛФ=ДД; ДП=--");
		
		РеквизитыОснований = "";
		
		Для каждого Основание Из ДанныеШапки.ТаблицаРеквизитовОснований Цикл
			РеквизитыОснований = ?(РеквизитыОснований = "", РеквизитыОснований,РеквизитыОснований + ", ") + "№ " + Основание.НомерСчетаФактуры + " от " 
			+ Формат(Основание.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--") + ", с учетом исправления № "
			+ Основание.НомерИсправления + " от " + Формат(Основание.ДатаИсправления, "ДЛФ=ДД; ДП=--");
		КонецЦикла;
		
		ОбластьМакета.Параметры.РеквизитыОснований = РеквизитыОснований;
		ОбластьМакета.Параметры.НаименованиеПродавца = ДанныеШапки.НаименованиеПродавца;
		ОбластьМакета.Параметры.АдресПродавца = ДанныеШапки.АдресПродавца;
		ОбластьМакета.Параметры.ИННКПППродавца = ДанныеШапки.ИННКПППродавца;
		ОбластьМакета.Параметры.НаименованиеПокупателя = ДанныеШапки.НаименованиеПокупателя;
		ОбластьМакета.Параметры.АдресПокупателя = ДанныеШапки.АдресПокупателя;
		ОбластьМакета.Параметры.ИННКПППокупателя = ДанныеШапки.ИННКПППокупателя;
		ОбластьМакета.Параметры.Валюта = ДанныеШапки.ВалютаНаименование;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ВедетсяУчетНДСПоФЗ56 Тогда 
		Если НЕ ЗначениеЗаполнено(Макет.Области.Найти("ИдентификаторГосКонтракта")) Тогда 
			ТекстИсключения = НСтр("ru = 'C 01.07.2017 г. изменился типовой макет печатной формы счета-фактуры. Для использования 
			|новой формы необходимо обновить отредактированный ранее макет. 
			|Вы можете отредактировать макет самостоятельно в разделе ""Администрирование - Печатные формы,
			|отчеты, обработки - Макеты печатных форм"" или обратиться к специалисту обслуживающей организации.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
		Если ЭтоУниверсальныйКорректировочныйДокумент Тогда 
			ОбластьМакета.Параметры.ИдентификаторГосКонтракта = ДанныеШапки.ИдентификаторГосКонтракта;
		Иначе
			Если ВерсияПостановления1137 >= 4 Тогда 
				ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения) (при наличии): %1'");
			Иначе
				ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения): %1'");
			КонецЕсли;
			ОбластьМакета.Параметры.ИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовкаГосконтракт, ДанныеШапки.ИдентификаторГосКонтракта);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Вывод заголовка таблицы
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ДанныеШапки   = ВыборкаСФ.ДанныеШапки;
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	ТабДокумент.Вывести(ОбластьМакета);
	
	НомерСтроки = 0;
	НомерЛиста = 1;
	КоличествоСтрок = ТаблицаДокумента.Количество();
	
	// Вывод табличной части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаДокумента.НомерСтроки = НомерСтроки;

		ОбластьМакета.Параметры.Заполнить(СтрокаДокумента);
		ДозаполнитьСтрокуКорректировочногоСчетаФактуры1137(ОбластьМакета, НаАванс);
		
		Если ЭтоУниверсальныйКорректировочныйДокумент Тогда
			
			Если ДанныеШапки.СтатусУКД = 2 Тогда
				Если НаАванс Тогда
					ОбластьМакета.Параметры.СтавкаНДСДоИзменения    = "--";
					ОбластьМакета.Параметры.СтавкаНДСПослеИзменения = "--";
				Иначе
					ОбластьМакета.Параметры.СтавкаНДС = "--";
				КонецЕсли;
				ОбластьМакета.Параметры.Акциз     = "--";
				ОбластьМакета.Параметры.СуммаНДСДоИзменения = "--";
				ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "--";
				ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
				ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
			ИначеЕсли ВерсияПостановления1137 >= 4 Тогда
				СтрокаДокумента.Акциз = "без
					|акциза";
			Иначе
				ОбластьМакета.Параметры.Акциз = "без акциза";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеШапки.НДСИсчисляетсяНалоговымАгентом Тогда
			
			Если НаАванс Тогда
				ОбластьМакета.Параметры.СтавкаНДСДоИзменения    = НадписьСтавкаНДСИсчисляетсяНалоговымАгентом();
				ОбластьМакета.Параметры.СтавкаНДСПослеИзменения = НадписьСтавкаНДСИсчисляетсяНалоговымАгентом();
			Иначе
				ОбластьМакета.Параметры.СтавкаНДС = НадписьСтавкаНДСИсчисляетсяНалоговымАгентом();
			КонецЕсли; 
			
			ОбластьМакета.Параметры.СуммаНДСДоИзменения         = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
			ОбластьМакета.Параметры.СуммаНДСПослеИзменения      = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
			ОбластьМакета.Параметры.РазницаНДСУвеличение        = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
			ОбластьМакета.Параметры.РазницаНДСУменьшение        = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
			ОбластьМакета.Параметры.СтоимостьСНДСДоИзменения    = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
			ОбластьМакета.Параметры.СтоимостьСНДСПослеИзменения = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
			ОбластьМакета.Параметры.РазницаСНДСУвеличение       = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
			ОбластьМакета.Параметры.РазницаСНДСУменьшение       = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
		КонецЕсли;
		
		ПроверитьВыводКорректировочногоСчетаФактурыНаСтраницу(
			ТабДокумент, ОбластьМакета, (НомерСтроки = КоличествоСтрок), Макет, НомерЛиста, НомерСчетаФактуры, ДатаСчетаФактуры, ЭтоУниверсальныйКорректировочныйДокумент);
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	// Вывод итоговых сумм
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.РазницаБезНДСУменьшение = ТаблицаДокумента.Итог("РазницаБезНДСУменьшение");
	ОбластьМакета.Параметры.РазницаБезНДСУвеличение = ТаблицаДокумента.Итог("РазницаБезНДСУвеличение");
	ОбластьМакета.Параметры.РазницаСНДСУменьшение   = ТаблицаДокумента.Итог("РазницаСНДСУменьшение");
	ОбластьМакета.Параметры.РазницаСНДСУвеличение   = ТаблицаДокумента.Итог("РазницаСНДСУвеличение");
	
	Если ДанныеШапки.НДСИсчисляетсяНалоговымАгентом Тогда
		ОбластьМакета.Параметры.РазницаНДСУменьшение  = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
		ОбластьМакета.Параметры.РазницаНДСУвеличение  = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
		ОбластьМакета.Параметры.РазницаСНДСУменьшение = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
		ОбластьМакета.Параметры.РазницаСНДСУвеличение = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
	ИначеЕсли ЭтоУниверсальныйКорректировочныйДокумент И ДанныеШапки.СтатусУКД = 2 Тогда
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
	ИначеЕсли ВыборкаСФ.СчетФактураБезНДС Тогда
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "без НДС";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "без НДС";
	Иначе
		ОбластьМакета.Параметры.РазницаНДСУменьшение = ТаблицаДокумента.Итог("РазницаНДСУменьшение");
		ОбластьМакета.Параметры.РазницаНДСУвеличение = ТаблицаДокумента.Итог("РазницаНДСУвеличение");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывод подвала
	
	КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, НомерЛиста,
		ОбщегоНазначенияБПКлиентСервер.ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), НомерЛиста));
			
	ДанныеШапки.Вставить("КоличествоЛистов", КоличествоЛистов);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывод информации о комиссионере по договорам комиссии на закупку
	
	Если НЕ ЭтоУниверсальныйКорректировочныйДокумент И ЗначениеЗаполнено(ДанныеШапки.ПредставлениеКомиссионера) Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыКомиссионера");
		ОбластьМакета.Параметры.ПредставлениеКомиссионера = ДанныеШапки.ПредставлениеКомиссионера;
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнитьСтрокуКорректировочногоСчетаФактуры1137(ОбластьМакета, НаАванс)

	Если НаАванс И НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.НаименованиеНоменклатуры) Тогда
		ОбластьМакета.Параметры.НаименованиеНоменклатуры = НСтр("ru='Предварительная оплата'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения) Тогда
		ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения = "--";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоДоИзменения) Тогда
		ОбластьМакета.Параметры.КоличествоДоИзменения = "--";
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоПослеИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоПослеИзменения = "--";
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаДоИзменения) Тогда
		ОбластьМакета.Параметры.ЦенаДоИзменения = "--";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаПослеИзменения) Тогда
		ОбластьМакета.Параметры.ЦенаПослеИзменения = "--";
	КонецЕсли;
	
	Если НЕ НаАванс И ОбластьМакета.Параметры.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
		ОбластьМакета.Параметры.СуммаНДСДоИзменения = "без НДС";
		ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "без НДС";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВыводКорректировочногоСчетаФактурыНаСтраницу(ТабДокумент, ОбластьТекСтроки, ЭтоПоследняяСтрока, Макет, НомерЛиста, НомерСчетаФактуры, ДатаСчетаФактуры, ЭтоУниверсальныйКорректировочныйДокумент = Ложь)
	
	// Проверим возможность вывода табличного документа
	СтрокаСПодвалом = Новый Массив;
	СтрокаСПодвалом.Добавить(ОбластьТекСтроки);
	
	Если ЭтоПоследняяСтрока Тогда
		// Если последняя строка, то должен поместиться еще итог
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Подвал"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Итого"));
		Если ЭтоУниверсальныйКорректировочныйДокумент Тогда
			СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалНакладной"));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
		// Вывод разделителя и заголовка таблицы на новой странице
		
		НомерЛиста = НомерЛиста + 1;
		
		ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
		ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактуры;
		ОбластьНумерацияЛистов.Параметры.Дата = ДатаСчетаФактуры;
		ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерЛиста;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТабДокумент.Вывести(ОбластьНумерацияЛистов);
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураФИО(СтрокаТаблицыЗначений)
	СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
	ЗаполнитьЗначенияСвойств(СтруктураФИО, СтрокаТаблицыЗначений);
	Возврат СтруктураФИО;
КонецФункции

Функция ПодготовитьДанныеШапкиСчетаФактуры1137(ВыборкаСФ, СтрокаТаблицыРеквизиты, ПлатежноРасчетныеДокументы, ДополнитьДаннымиУПД, ФормированиеЭД = Ложь)

	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыРеквизиты);
	
	СведенияОЮрФизЛицах = Новый Соответствие; // для хранения ранее полученных сведений
	
	ДанныеШапки = Новый Структура;
	
	// Номер и дата
	Если ВыборкаСФ.УдалитьПрефиксыИзНомера Тогда
		Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаСФ.Номер, Истина, Ложь);
	Иначе
		Номер = ВыборкаСФ.Номер;
	КонецЕсли;
	
	// Дополняем номер индексом обособленного подразделения (при необходимости)
	Если ЗначениеЗаполнено(Реквизиты.ЦифровойИндексОбособленногоПодразделения)
		И ВыборкаСФ.ЭтоСчетФактураВыданный
		И ЗначениеЗаполнено(ВыборкаСФ.ВидСчетаФактуры) Тогда
		Номер = Номер + "/" + Реквизиты.ЦифровойИндексОбособленногоПодразделения;
	КонецЕсли;
	
	Если УчетНДСПереопределяемый.ЭтоСчетФактураНаАванс(ВыборкаСФ.ВидСчетаФактуры) Тогда
		// Методически неверно оформлять УПД в случае получения предварительной оплаты.
		ДополнитьДаннымиУПД = Ложь;
	КонецЕсли;
	
	ДанныеШапки.Вставить("Номер", СокрЛП(Номер));
	ДанныеШапки.Вставить("Дата", ВыборкаСФ.Дата);
	
	// Номер и дата исправления
	ДанныеШапки.Вставить("Исправление", ВыборкаСФ.Исправление);
	Если ВыборкаСФ.Исправление Тогда
		ДанныеШапки.Вставить("НомерИсправления", ВыборкаСФ.НомерИсправления);
		ДанныеШапки.Вставить("ДатаИсправления", ВыборкаСФ.ДатаИсправления);
	Иначе 	
		ДанныеШапки.Вставить("НомерИсправления", "--");
		ДанныеШапки.Вставить("ДатаИсправления", "--");
	КонецЕсли;

	ДанныеШапки.Вставить("Поставщик", Реквизиты.Поставщик);

	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Организация, ВыборкаСФ.ДатаСведений);
	СведенияОЮрФизЛицах.Вставить(Реквизиты.Организация, СведенияОбОрганизации);
	
	Если Реквизиты.СводныйСФКомиссияПоЗакупке Тогда
		
		СведенияОПоставщике = СведенияОбОрганизации;
		
		ДанныеШапки.Вставить("ПредставлениеПоставщика", Реквизиты.Поставщик);
		
		ДанныеШапки.Вставить("АдресПоставщика", Реквизиты.АдресПоставщика);
		
		ДанныеШапки.Вставить("ИННКППпоставщика", Реквизиты.ИННКППпоставщика);
		
	Иначе	
		
		СведенияОПоставщике = СведенияОЮрФизЛицах[Реквизиты.Поставщик];
		Если СведенияОПоставщике = Неопределено Тогда
			СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Поставщик, ВыборкаСФ.ДатаСведений);
			СведенияОЮрФизЛицах.Вставить(Реквизиты.Поставщик, СведенияОПоставщике);
		КонецЕсли;
		
		ДанныеШапки.Вставить("ПредставлениеПоставщика", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,"));
		
		// Адрес продавца
		ДанныеШапки.Вставить("АдресПоставщика", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,"));
		
	КонецЕсли;
	
	ДанныеШапки.Вставить("ИННпоставщика", Реквизиты.ИННпоставщика);
	
	Если НЕ ВыборкаСФ.ЭтоСчетФактураВыданный И ЗначениеЗаполнено(ВыборкаСФ.КППСчетаФактуры) Тогда
		КППпоставщика = ВыборкаСФ.КППСчетаФактуры;
	ИначеЕсли ВыборкаСФ.ЭтоСчетФактураВыданный
		И ЗначениеЗаполнено(ВыборкаСФ.КПППродавца) Тогда 
		КППпоставщика = ВыборкаСФ.КПППродавца;
	Иначе
		КПППоставщика = УчетНДСБП.КППНаДату(Реквизиты.ОбособленноеПодразделениеПоставщика, ВыборкаСФ.ДатаСведений);
	КонецЕсли;
	
	ДанныеШапки.Вставить("КППпоставщика", КППпоставщика);
	
	// Наименование покупателя
	ДанныеШапки.Вставить("Покупатель", Реквизиты.Покупатель);
	
	Если Реквизиты.СводныйСФКомиссияПоПродаже Тогда
		
		ДанныеШапки.Вставить("ПредставлениеПокупателя", Реквизиты.Покупатель);
		
		ДанныеШапки.Вставить("АдресПокупателя", Реквизиты.АдресПокупателя);
		
		ДанныеШапки.Вставить("ИННКПППокупателя", Реквизиты.ИННКППпокупателя);

	Иначе
		
		СведенияОПокупателе = СведенияОЮрФизЛицах[Реквизиты.Покупатель];
		Если СведенияОПокупателе = Неопределено Тогда
			СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Покупатель, ВыборкаСФ.ДатаСведений);
			СведенияОЮрФизЛицах.Вставить(Реквизиты.Покупатель, СведенияОПокупателе);
		КонецЕсли;
		
		ДанныеШапки.Вставить("ПредставлениеПокупателя", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "НаименованиеДляПечатныхФорм,"));
		
		// Адрес покупателя
		ДанныеШапки.Вставить("АдресПокупателя", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
			
	КонецЕсли;
	
	ДанныеШапки.Вставить("ИННпокупателя", Реквизиты.ИННпокупателя);
	
	Если ВыборкаСФ.ЭтоСчетФактураВыданный И ЗначениеЗаполнено(ВыборкаСФ.КППСчетаФактуры) Тогда
		КППпокупателя = ВыборкаСФ.КППСчетаФактуры;
	Иначе
		КППпокупателя = УчетНДСБП.КППНаДату(Реквизиты.ОбособленноеПодразделениеПокупателя, ВыборкаСФ.ДатаСведений);
	КонецЕсли;
	
	ДанныеШапки.Вставить("КППпокупателя", КППпокупателя);
	
	// Грузоотправитель
	Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		Грузоотправитель = Неопределено;
		ПредставлениеГрузоотправителя = "--";
	ИначеЕсли Реквизиты.ЕстьТовары 
		И ЗначениеЗаполнено(Реквизиты.Грузоотправитель) Тогда
		Если ТипЗнч(Реквизиты.Грузоотправитель) = Тип("Строка") Тогда
			ПредставлениеГрузоотправителя = Реквизиты.Грузоотправитель;
		ИначеЕсли ТипЗнч(Реквизиты.Грузоотправитель) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			СведенияОГрузоотправителе = СведенияОЮрФизЛицах[Реквизиты.Грузоотправитель];
			Если СведенияОГрузоотправителе = Неопределено Тогда
				СведенияОГрузоотправителе = УчетНДСПереопределяемый.СведенияОПодразделенииОрганизации(Реквизиты.Грузоотправитель);
				СведенияОЮрФизЛицах.Вставить(Реквизиты.Грузоотправитель, СведенияОГрузоотправителе);
			КонецЕсли;
			ПредставлениеГрузоотправителя = СведенияОГрузоотправителе;
		Иначе
			СведенияОГрузоотправителе = СведенияОЮрФизЛицах[Реквизиты.Грузоотправитель];
			Если СведенияОГрузоотправителе = Неопределено Тогда
				СведенияОГрузоотправителе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Грузоотправитель, ВыборкаСФ.ДатаСведений);
				СведенияОЮрФизЛицах.Вставить(Реквизиты.Грузоотправитель, СведенияОГрузоотправителе);
			КонецЕсли;
			ПредставлениеГрузоотправителя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ПочтовыйАдрес,");
		КонецЕсли;
		Грузоотправитель = Реквизиты.Грузоотправитель;	
	Иначе
		Грузоотправитель = Неопределено;
		ПредставлениеГрузоотправителя = "--";
	КонецЕсли;
	ДанныеШапки.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеШапки.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);

	// Грузополучатель
	Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		Грузополучатель = Неопределено;
		ПредставлениеГрузополучателя = "--";
	ИначеЕсли Реквизиты.ЕстьТовары 
		И ЗначениеЗаполнено(Реквизиты.Грузополучатель) Тогда
		Если ТипЗнч(Реквизиты.Грузополучатель) = Тип("Строка") Тогда
			ПредставлениеГрузополучателя = Реквизиты.Грузополучатель;
		Иначе
			СведенияОГрузополучателе = СведенияОЮрФизЛицах[Реквизиты.Грузополучатель];
			Если СведенияОГрузополучателе = Неопределено Тогда
				СведенияОГрузополучателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Грузополучатель, ВыборкаСФ.ДатаСведений);
				СведенияОЮрФизЛицах.Вставить(Реквизиты.Грузополучатель, СведенияОГрузополучателе);
			КонецЕсли;
			Если Реквизиты.АдресДоставки <> "" Тогда 
				СведенияОГрузополучателе.ПочтовыйАдрес = Реквизиты.АдресДоставки;
			КонецЕсли;
			ПредставлениеГрузополучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ПочтовыйАдрес,");
		КонецЕсли;
		Грузополучатель = Реквизиты.Грузополучатель;
	Иначе
		Грузополучатель = Неопределено;
		ПредставлениеГрузополучателя = "--";
	КонецЕсли;
	ДанныеШапки.Вставить("Грузополучатель", Грузополучатель);
	ДанныеШапки.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	
	// Платежно-расчетный документ
	ПоДокументу = "";
	Если ПлатежноРасчетныеДокументы <> Неопределено Тогда
		ТаблицаПлатежныхДокументов = ПлатежноРасчетныеДокументы.СкопироватьКолонки();
		Если ТипЗнч(ПлатежноРасчетныеДокументы) = Тип("ТаблицаЗначений") Тогда
			Отбор = Новый Структура("СчетФактура", ВыборкаСФ.СчетФактура);
			НайденныеСтроки = ПлатежноРасчетныеДокументы.НайтиСтроки(Отбор);
			РазделятьПоКонтрагентам = ТаблицаПлатежныхДокументов.Колонки.Найти("Контрагент") <> Неопределено;
			ПредыдущийКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
			Для каждого ДокументОплаты Из НайденныеСтроки Цикл
				Контрагент = ?(РазделятьПоКонтрагентам, ДокументОплаты.Контрагент, Справочники.Контрагенты.ПустаяСсылка());
				Если ЗначениеЗаполнено(ДокументОплаты.НомерДокумента)
					И ЗначениеЗаполнено(ДокументОплаты.ДатаДокумента) Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаПлатежныхДокументов.Добавить(), ДокументОплаты);
					ПоДокументу = ПоДокументу + ?(Не ДокументОплаты.НомерСтроки = 1 И Контрагент <> ПредыдущийКонтрагент, ";", ?(ПустаяСтрока(ПоДокументу), "",", ")) +
						ДокументОплаты.НомерДокумента + " от " + Формат(ДокументОплаты.ДатаДокумента, "ДЛФ='Д'") + " г.";
				КонецЕсли;
				ПредыдущийКонтрагент = Контрагент;	
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПоДокументу) Тогда
		Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			ПоДокументу = "-- от --";
		Иначе
			ПоДокументу = "   от   ";
		КонецЕсли;
	КонецЕсли;
	ДанныеШапки.Вставить("ТаблицаПлатежныхДокументов", ТаблицаПлатежныхДокументов);
	ДанныеШапки.Вставить("ПоДокументу", ПоДокументу);
	
	Валюта = ""; 
	ВалютаКод = "";
	ВалютаКурс = 0; 
	ВалютаКратность = 0;
	ВалютаНаименование = "";
	
	// Валюта
	Если ЗначениеЗаполнено(Реквизиты.Валюта) Тогда
		РеквизитыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.Валюта, "НаименованиеПолное,Код");
		СтруктураКурса  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.Валюта, Реквизиты.ДатаОснования);
		
		Валюта             = РеквизитыВалюты.НаименованиеПолное + ", " + РеквизитыВалюты.Код;
		ВалютаНаименование = РеквизитыВалюты.НаименованиеПолное;
		ВалютаКод          = РеквизитыВалюты.Код;
		ВалютаКурс         = СтруктураКурса.Курс;
		ВалютаКратность    = СтруктураКурса.Кратность;
	КонецЕсли;
	
	ДанныеШапки.Вставить("Валюта", Реквизиты.Валюта);
	ДанныеШапки.Вставить("ВалютаНаименование", Валюта);
	ДанныеШапки.Вставить("ВалютаНаименованиеПолное", ВалютаНаименование);
	ДанныеШапки.Вставить("ВалютаКод", ВалютаКод);
	ДанныеШапки.Вставить("ВалютаКурс", ВалютаКурс);
	ДанныеШапки.Вставить("ВалютаКратность", ВалютаКратность);
	ДанныеШапки.Вставить("ИдентификаторГосКонтракта", ВыборкаСФ.ИдентификаторГосКонтракта);
	
	Если Реквизиты.Свойство("НДСИсчисляетсяНалоговымАгентом") Тогда
		НДСИсчисляетсяНалоговымАгентом = Реквизиты.НДСИсчисляетсяНалоговымАгентом = Истина
			И УчетНДС.ВедетсяУчетНДСПоФЗ335(ВыборкаСФ.Дата);
	Иначе
		НДСИсчисляетсяНалоговымАгентом = Ложь;
	КонецЕсли;
	
	ДанныеШапки.Вставить("НДСИсчисляетсяНалоговымАгентом", НДСИсчисляетсяНалоговымАгентом);
	
	// Сведения о комиссионере
	Если ВыборкаСФ.ЭтоСчетФактураВыданный 
		И (ТипЗнч(Реквизиты.Поставщик) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(Реквизиты.Поставщик) = Тип("Строка"))
		И ТипЗнч(Реквизиты.Покупатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		Комиссионер = Реквизиты.Организация;
	ИначеЕсли НЕ ВыборкаСФ.ЭтоСчетФактураВыданный 
		И ВыборкаСФ.Контрагент <> Реквизиты.Поставщик
		И ВыборкаСФ.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
		Комиссионер = ВыборкаСФ.Контрагент;
	Иначе
		Комиссионер = Неопределено;
	КонецЕсли;
	
	СведенияОКомиссионере = Неопределено;
	Если ЗначениеЗаполнено(Комиссионер) Тогда
		ДанныеШапки.Вставить("Комиссионер", Комиссионер);
		
		СведенияОКомиссионере = СведенияОЮрФизЛицах[Комиссионер];
		Если СведенияОКомиссионере = Неопределено Тогда
			СведенияОКомиссионере = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Комиссионер, ВыборкаСФ.ДатаСведений);
			СведенияОЮрФизЛицах.Вставить(Комиссионер, СведенияОКомиссионере);
		КонецЕсли;
		КППКомиссионера = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
		ДанныеШапки.Вставить("ПредставлениеКомиссионера", "Составлен комиссионером (агентом): " 
			+ ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "НаименованиеДляПечатныхФорм,")
			+ ", " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ЮридическийАдрес,")
			+ ", ИНН/КПП: " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь)
			+ ?(ЗначениеЗаполнено(КППКомиссионера), "/" + КППКомиссионера, ""));
	
	Иначе
		ДанныеШапки.Вставить("Комиссионер", Неопределено);
		ДанныеШапки.Вставить("ПредставлениеКомиссионера", "");
	КонецЕсли;
	
	// Данные комиссионера на стороне комитентов 
	Если ВыборкаСФ.ЭтоСчетФактураВыданный Тогда

		Если Реквизиты.Свойство("Комиссионер") И ЗначениеЗаполнено(Реквизиты.Комиссионер) Тогда
		
			СведенияОКомиссионере = СведенияОЮрФизЛицах[Реквизиты.Комиссионер];
			Если СведенияОКомиссионере = Неопределено Тогда
				СведенияОКомиссионере = 
					БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Комиссионер, ВыборкаСФ.ДатаСведений);
				СведенияОЮрФизЛицах.Вставить(Реквизиты.Комиссионер, СведенияОКомиссионере);
			КонецЕсли;
		
			КППКомиссионера = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
			ПредставлениеКомиссионера =
				ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "НаименованиеДляПечатныхФорм,");
			ПредставлениеКомиссионераНаПечать = ПредставлениеКомиссионера
			+ ", ИНН/КПП: " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь)
			+ ?(ЗначениеЗаполнено(КППКомиссионера), "/" + КППКомиссионера, "");
			
			Если Реквизиты.Свойство("СчетаФактурыКомиссионера") И ЗначениеЗаполнено(Реквизиты.СчетаФактурыКомиссионера) Тогда

				ДанныеШапки.ПредставлениеКомиссионера = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выставлен комиссионеру %1, по счетам-фактурам %2'"),
					ПредставлениеКомиссионераНаПечать, Реквизиты.СчетаФактурыКомиссионера);
			
			Иначе
				ДанныеШапки.ПредставлениеКомиссионера = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выставлен комиссионеру %1, по счету-фактуре № %2 от %3'"),
					ПредставлениеКомиссионераНаПечать, Реквизиты.НомерСФКомиссионера,
						Формат(Реквизиты.ДатаСФКоммиссионера, "ДФ=dd.MM.yyyy"));
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	// Данные для подвала
	Если ВыборкаСФ.ЭтоСчетФактураВыданный Тогда
		
		ОрганизацияЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация);
		
		// Получаем за один вызов данные по всем необходимым физлицам.
		СписокФизЛиц = Новый Массив;
		Если (ОрганизацияЭтоЮрЛицо ИЛИ ВедетсяУчетНДСПоФЗ81(ВыборкаСФ.Дата))
		   И ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
			СписокФизЛиц.Добавить(ВыборкаСФ.Руководитель);
		КонецЕсли;
		Если ОрганизацияЭтоЮрЛицо
		   И ЗначениеЗаполнено(ВыборкаСФ.ГлавныйБухгалтер) Тогда
			СписокФизЛиц.Добавить(ВыборкаСФ.ГлавныйБухгалтер);
		КонецЕсли;
		Если ДополнитьДаннымиУПД Тогда
			Если Реквизиты.ЕстьТовары Тогда
				Кладовщик = ?(ЗначениеЗаполнено(Реквизиты.ОтпускПроизвел), Реквизиты.ОтпускПроизвел,
					ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Реквизиты.Склад, Реквизиты.ДатаОснования));
				Если ЗначениеЗаполнено(Кладовщик) Тогда
					СписокФизЛиц.Добавить(Кладовщик);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда
				СписокФизЛиц.Добавить(Реквизиты.Исполнитель);
			КонецЕсли;
			Если ЗначениеЗаполнено(Реквизиты.ОтветственныйЗаОформление) Тогда
				СписокФизЛиц.Добавить(Реквизиты.ОтветственныйЗаОформление);
			КонецЕсли; 
		КонецЕсли;
		Если СписокФизЛиц.Количество() > 0 Тогда
			ДанныеОтветственныхЛиц = УчетЗарплаты.ДанныеФизическихЛиц(Реквизиты.Организация, СписокФизЛиц, ВыборкаСФ.ДатаСведений, Истина, Истина);
		Иначе
			ДанныеОтветственныхЛиц = Новый ТаблицаЗначений;
			ДанныеОтветственныхЛиц.Колонки.Добавить("ФизическоеЛицо");
		КонецЕсли;
		
		Если ОрганизацияЭтоЮрЛицо Тогда
			
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Реквизиты.Организация, ВыборкаСФ.Дата, Реквизиты.Подразделение);
			// Должность руководителя в организации.
			ДанныеШапки.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжностьПредставление);
			Если ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
				ДанныеФизЛица = ДанныеОтветственныхЛиц.Найти(ВыборкаСФ.Руководитель, "ФизическоеЛицо");
				ПредставлениеФизЛица = ?(ДанныеФизЛица = Неопределено, "", ДанныеФизЛица.Представление);
				ФизическоеЛицо       = ?(ДанныеФизЛица = Неопределено, Справочники.ФизическиеЛица.ПустаяСсылка(), ДанныеФизЛица.ФизическоеЛицо);
				СтруктураФИО         = ?(ДанныеФизЛица = Неопределено, Новый Структура("Фамилия, Имя, Отчество, Представление"), СтруктураФИО(ДанныеФизЛица));
				
				ДанныеШапки.Вставить("ФИОРуководителя", ПредставлениеФизЛица);
				ДанныеШапки.Вставить("Руководитель",    ФизическоеЛицо);
				ДанныеШапки.Вставить("РуководительФИО", СтруктураФИО);
				
				// Должность уполномоченного лица обладающего правом подписи за руководителя.
				Если Руководители.Руководитель = ВыборкаСФ.Руководитель 
					И НЕ ЗначениеЗаполнено(ДанныеФизЛица.Должность) Тогда
					ДанныеШапки.Вставить("РуководительДолжность", Руководители.РуководительДолжностьПредставление);
				Иначе
					ДанныеШапки.Вставить("РуководительДолжность", ДанныеФизЛица.Должность);
				КонецЕсли;
			Иначе 
				ДанныеШапки.Вставить("ФИОРуководителя", Руководители.РуководительПредставление);
				ДанныеШапки.Вставить("Руководитель",    Руководители.Руководитель);
				ДанныеШапки.Вставить("РуководительФИО", Руководители.РуководительФИО);
				ДанныеШапки.Вставить("РуководительДолжность", Руководители.РуководительДолжностьПредставление);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаСФ.ГлавныйБухгалтер) Тогда
				ДанныеФизЛица = ДанныеОтветственныхЛиц.Найти(ВыборкаСФ.ГлавныйБухгалтер, "ФизическоеЛицо");
				ПредставлениеФизЛица = ?(ДанныеФизЛица = Неопределено, "", ДанныеФизЛица.Представление);
				ФизическоеЛицо       = ?(ДанныеФизЛица = Неопределено, Справочники.ФизическиеЛица.ПустаяСсылка(), ДанныеФизЛица.ФизическоеЛицо);
				СтруктураФИО         = ?(ДанныеФизЛица = Неопределено, Новый Структура("Фамилия, Имя, Отчество, Представление"), СтруктураФИО(ДанныеФизЛица));
				
				ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", ПредставлениеФизЛица);
				ДанныеШапки.Вставить("ГлавныйБухгалтер",      ФизическоеЛицо);
				ДанныеШапки.Вставить("ГлавныйБухгалтерФИО",   СтруктураФИО);
			Иначе 
				ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);
				ДанныеШапки.Вставить("ГлавныйБухгалтер",      Руководители.ГлавныйБухгалтер);
				ДанныеШапки.Вставить("ГлавныйБухгалтерФИО",   Руководители.ГлавныйБухгалтерФИО);
			КонецЕсли;
		
		Иначе
			ДанныеШапки.Вставить("ДолжностьРуководителя", НСтр("ru = 'Индивидуальный предприниматель'"));
			ДанныеШапки.Вставить("Свидетельство",         ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "Свидетельство,"));
			ДанныеШапки.Вставить("Руководитель",          ВыборкаСФ.Руководитель);
			
			Если ВедетсяУчетНДСПоФЗ81(ВыборкаСФ.Дата) 
			   И ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
				ДанныеФизЛица = ДанныеОтветственныхЛиц.Найти(ВыборкаСФ.Руководитель, "ФизическоеЛицо");
				СтруктураФИО         = ?(ДанныеФизЛица = Неопределено, Новый Структура("Фамилия, Имя, Отчество, Представление"), СтруктураФИО(ДанныеФизЛица));
				ДанныеШапки.Вставить("ФИОПБОЮЛ", ?(ДанныеФизЛица = Неопределено, "", ДанныеФизЛица.Представление));
				ДанныеШапки.Вставить("ПБОЮЛФИО", СтруктураФИО);
				
				// Должность уполномоченного лица обладающего правом подписи за руководителя.
				Если СведенияОбОрганизации.ИндивидуальныйПредприниматель = ВыборкаСФ.Руководитель 
					И НЕ ЗначениеЗаполнено(ДанныеФизЛица.Должность) Тогда
					ДанныеШапки.Вставить("РуководительДолжность", ДанныеШапки.ДолжностьРуководителя);
				Иначе
					ДанныеШапки.Вставить("РуководительДолжность", ДанныеФизЛица.Должность);
				КонецЕсли;
			Иначе
				СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбОрганизации.ФИОФизлица);
				СтруктураФИО.Вставить("Представление", СведенияОбОрганизации.ФИОФизлица);
				
				ДанныеШапки.Вставить("ФИОПБОЮЛ", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ФамилияИнициалыФизлица,"));
				ДанныеШапки.Вставить("ПБОЮЛФИО", СтруктураФИО);
				ДанныеШапки.Вставить("РуководительДолжность", ДанныеШапки.ДолжностьРуководителя);
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если НЕ ТипЗнч(Реквизиты.Поставщик) = Тип("Строка")
			И НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Поставщик) Тогда
			ДанныеШапки.Вставить("Свидетельство",         ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
		КонецЕсли;
	КонецЕсли;
	
	Если Реквизиты.Свойство("БезвозмезднаяПередача") Тогда
		Если Реквизиты.БезвозмезднаяПередача И НЕ ЗначениеЗаполнено(Реквизиты.Покупатель) Тогда
			ДанныеШапки.Покупатель = Неопределено;
			ДанныеШапки.ПредставлениеПокупателя="--";
			// Адрес покупателя
			ДанныеШапки.АдресПокупателя="--";
			ДанныеШапки.ИННпокупателя="--";
		КонецЕсли;
	КонецЕсли;
	
	// Данные для универсального передаточного документа
	Если ДополнитьДаннымиУПД Тогда
		
		// Наименование экономического субъекта - составителя документа
		Если ЗначениеЗаполнено(Комиссионер) И СведенияОКомиссионере <> Неопределено Тогда
			ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "НаименованиеДляПечатныхФорм,");
			ИННПоставщика           = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь);
			КПППоставщика           = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
		Иначе
			ПредставлениеПоставщика = ДанныеШапки.ПредставлениеПоставщика;
			ИННПоставщика           = ДанныеШапки.ИННПоставщика;
			КПППоставщика           = ДанныеШапки.КПППоставщика;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КПППоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ПредставлениеПоставщика, ИННПоставщика, КПППоставщика);
		ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ПредставлениеПоставщика, ИННПоставщика);
		Иначе
			ПредставлениеОрганизации = ПредставлениеПоставщика;
		КонецЕсли;
		ДанныеШапки.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		
		Если ЗначениеЗаполнено(ДанныеШапки.КППпокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ДанныеШапки.ПредставлениеПокупателя, ДанныеШапки.ИННпокупателя, ДанныеШапки.КППпокупателя);
		ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.ИННпокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ДанныеШапки.ПредставлениеПокупателя, ДанныеШапки.ИННпокупателя);
		Иначе
			ПредставлениеКонтрагента = ДанныеШапки.ПредставлениеПокупателя;
		КонецЕсли;
		
		ДанныеШапки.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
		
		// Статус
		Если НЕ ЗначениеЗаполнено(ВыборкаСФ.ВидСчетаФактуры) Тогда
			СтатусУПД = 2;
			ДанныеШапки.Вставить("ПоДокументу",  "-- от --");
		Иначе
			СтатусУПД = 1;
		КонецЕсли;
		
		ДанныеШапки.Вставить("СтатусУПД", СтатусУПД);
		ДанныеШапки.Вставить("СопроводительныеДокументы", Реквизиты.СопроводительныеДокументы);
		
		ДанныеТранспортнаяНакладная = Новый Массив;
		
		Если Реквизиты.ПеревозкаАвтотранспортом И ЗначениеЗаполнено(Реквизиты.ДокументОснование) Тогда
			
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.ДокументОснование, "Дата,Номер");
			НомерОснования     = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОснования.Номер, Истина, Ложь);
			
			ДанныеШапки.Вставить("ТранспортнаяНакладнаяДата",  РеквизитыОснования.Дата);
			ДанныеШапки.Вставить("ТранспортнаяНакладнаяНомер", НомерОснования);
			
			ПредставлениеТранспортнаяНакладная = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Транспортная накладная № %1 от %2'"),
				ДанныеШапки.ТранспортнаяНакладнаяНомер, 
				Формат(ДанныеШапки.ТранспортнаяНакладнаяДата, "ДЛФ=ДД"));

			ДанныеТранспортнаяНакладная.Добавить(ПредставлениеТранспортнаяНакладная);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Реквизиты.Перевозчик) Тогда
			ДанныеШапки.Вставить("Перевозчик", Реквизиты.Перевозчик);
			
			 // Данные перевозчика в электронном документе выводятся в отдельном реквизите.
			Если Не ФормированиеЭД Тогда
				ДанныеПеревозчик = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Перевозчик, ВыборкаСФ.ДатаСведений);
				
				ПредставлениеПеревозчик = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Перевозчик %1'"),
					ДанныеПеревозчик.НаименованиеДляПечатныхФорм);
					
				ДанныеТранспортнаяНакладная.Добавить(ПредставлениеПеревозчик);
			КонецЕсли;
		Иначе
			ДанныеШапки.Вставить("Перевозчик", Неопределено);
		КонецЕсли;
		
		ДанныеШапки.Вставить("СведенияОТранспортировке", Реквизиты.СведенияОТранспортировкеИГрузе);
		
		Если ЗначениеЗаполнено(Реквизиты.СведенияОТранспортировкеИГрузе) Тогда
			ДанныеТранспортнаяНакладная.Добавить(Реквизиты.СведенияОТранспортировкеИГрузе);
		КонецЕсли; 
		
		
		ДанныеШапки.Вставить("ДанныеТранспортнаяНакладная", СтрСоединить(ДанныеТранспортнаяНакладная, ", "));
		
		// Номер
		Если СтатусУПД = 2 Тогда
			Если ТипЗнч(ВыборкаСФ.ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
				ДанныеШапки.Номер = ДанныеШапки.Номер + "/" + ВыборкаСФ.НомерСтроки;
			КонецЕсли;
		КонецЕсли;
		
		ПередачаТоваровКомиссионеру = Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			И ТипЗнч(Реквизиты.ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах");
		// По отчету комиссионера печатается УПД за поставщика (комиссионера).
		ПередачаТоваровКомитенту = ТипЗнч(Реквизиты.ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваров");
			
		БезПереходаПраваСобственности = ПередачаТоваровКомиссионеру ИЛИ ПередачаТоваровКомитенту;
			
		Если Реквизиты.Свойство("БезвозмезднаяПередача") Тогда
			Если Реквизиты.БезвозмезднаяПередача Тогда
				БезПереходаПраваСобственности = Ложь;
			КонецЕсли;
		КонецЕсли;
			
		// В соответствии с письмом ФНС России от 21.10.2013 N ММВ-20-3/96@ "Об отсутствии налоговых рисков при применении 
		// налогоплательщиками первичного документа, составленного на основе формы счета-фактуры", в УПД со статусом 2 при передаче
		// без перехода права собственности строки (2),(2а),(2б) и (6),(6а),(6б) не заполняются.
		
		Если БезПереходаПраваСобственности И СтатусУПД = 2 Тогда
			
			// Поставщик и Грузоотправитель
			Если ТипЗнч(ДанныеШапки.Грузоотправитель) = Тип("Строка") Тогда // "он же"
				ДанныеШапки.Грузоотправитель              = ДанныеШапки.Поставщик;
				ДанныеШапки.ПредставлениеГрузоотправителя = ДанныеШапки.ПредставлениеПоставщика 
					+ ?(ПустаяСтрока(ДанныеШапки.АдресПоставщика), "", ", ") + ДанныеШапки.АдресПоставщика;
			КонецЕсли;
			
			ДанныеШапки.Поставщик               = Неопределено; //
			ДанныеШапки.ПредставлениеПоставщика = "--";         // (2)
			ДанныеШапки.АдресПоставщика         = "--";         // (2а)
			ДанныеШапки.ИННПоставщика           = "--";         //
			ДанныеШапки.КПППоставщика           = "";           // (2б)
		
			// Покупатель и Грузополучатель
			Если ТипЗнч(ДанныеШапки.Грузополучатель) = Тип("Строка") Тогда // "он же"
				ДанныеШапки.Грузополучатель              = ДанныеШапки.Покупатель;
				ДанныеШапки.ПредставлениеГрузополучателя = ДанныеШапки.ПредставлениеПокупателя
					+ ?(ПустаяСтрока(ДанныеШапки.АдресПокупателя), "", ", ") + ДанныеШапки.АдресПокупателя;
			КонецЕсли;
			
			ДанныеШапки.Покупатель              = Неопределено; //
			ДанныеШапки.ПредставлениеПокупателя = "--";         // (6)
			ДанныеШапки.АдресПокупателя         = "--";         // (6а)
			ДанныеШапки.ИННПокупателя           = "--";         //
			ДанныеШапки.КПППокупателя           = "";           // (6б)
			
		КонецЕсли;
		
		// Основание передачи (сдачи)
		Основание = СокрП(Реквизиты.Основание);
		
		ДанныеШапки.Вставить("ОснованиеДата", Реквизиты.ОснованиеДата);
		ДанныеШапки.Вставить("ОснованиеНомер", Реквизиты.ОснованиеНомер);
		ДанныеШапки.Вставить("ОснованиеВид", Реквизиты.ВидДоговора);
		
		ФИОТоварПолучил = "";
		
		Если ЗначениеЗаполнено(Реквизиты.ДоверенностьНомер)
			ИЛИ ЗначениеЗаполнено(Реквизиты.ДоверенностьДата)
			ИЛИ ЗначениеЗаполнено(Реквизиты.ДоверенностьВыдана)
			 Тогда
			
			Доверенность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по доверенности №%1 от %2 выданной %3'"),
				Реквизиты.ДоверенностьНомер, Формат(Реквизиты.ДоверенностьДата, "ДЛФ=ДД"),
				Реквизиты.ДоверенностьВыдана);
			
			Основание = Основание + ?(ПустаяСтрока(Основание), "", "; ") + Доверенность;
			
			ФИОТоварПолучил =  Реквизиты.ДоверенностьЧерезКого;
			
		ИначеЕсли ЗначениеЗаполнено(Реквизиты.ДоверенностьЧерезКого) Тогда
			
			ФИОТоварПолучил = Реквизиты.ДоверенностьЧерезКого+?(ЗначениеЗаполнено(Реквизиты.ЗаЗаказчикаНаОсновании),", "+Реквизиты.ЗаЗаказчикаНаОсновании,"");
			
		КонецЕсли;
		
		ДанныеШапки.Вставить ("Основание",       Основание);
		ДанныеШапки.Вставить ("ФИОТоварПолучил", ФИОТоварПолучил);
		Если Реквизиты.Свойство("БанковскийСчетПродавца") Тогда
			ДанныеШапки.Вставить ("БанковскийСчетПродавца", Реквизиты.БанковскийСчетПродавца);
		КонецЕсли;
		
		Если ВыборкаСФ.ЭтоСчетФактураВыданный Тогда
			
			// Товар (груз) передал / услуги, результаты работ, права сдал
			
			Если Реквизиты.ЕстьТовары Тогда
				
				ДанныеКладовщика = ДанныеОтветственныхЛиц.Найти(Кладовщик, "ФизическоеЛицо");
				Если ДанныеКладовщика = Неопределено Тогда
					ДанныеШапки.Вставить("Кладовщик", Справочники.ФизическиеЛица.ПустаяСсылка());
					
					ДанныеШапки.Вставить("ДолжностьКладовщика");
					ДанныеШапки.Вставить("ФИОКладовщика", "");
					ДанныеШапки.Вставить("КладовщикФИО", Новый Структура("Фамилия, Имя, Отчество, Представление"));
				Иначе
					ДанныеШапки.Вставить("Кладовщик", Кладовщик);
					
					ДанныеШапки.Вставить("ДолжностьКладовщика", ДанныеКладовщика.Должность);
					ДанныеШапки.Вставить("ФИОКладовщика",       ДанныеКладовщика.Представление);
					ДанныеШапки.Вставить("КладовщикФИО", СтруктураФИО(ДанныеКладовщика));
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда
					
					ДанныеИсполнителя = ДанныеОтветственныхЛиц.Найти(Реквизиты.Исполнитель, "ФизическоеЛицо");
					Если ДанныеИсполнителя = Неопределено Тогда
						ДанныеШапки.Вставить("Кладовщик", Справочники.ФизическиеЛица.ПустаяСсылка());
						
						ДанныеШапки.Вставить("ДолжностьКладовщика");
						ДанныеШапки.Вставить("ФИОКладовщика", "");
						ДанныеШапки.Вставить("КладовщикФИО", Новый Структура("Фамилия, Имя, Отчество, Представление"));
					Иначе
						ДанныеШапки.Вставить("Кладовщик",           Реквизиты.Исполнитель);
						ДанныеШапки.Вставить("ДолжностьКладовщика", ДанныеИсполнителя.Должность);
						ДанныеШапки.Вставить("ФИОКладовщика",       ?(ЗначениеЗаполнено(ДанныеИсполнителя.Представление), ДанныеИсполнителя.Представление, "")
							+ ?(ЗначениеЗаполнено(Реквизиты.ИсполнительНаОсновании), " ", "") + Реквизиты.ИсполнительНаОсновании);
						ДанныеШапки.Вставить("КладовщикФИО", СтруктураФИО(ДанныеИсполнителя));
					КонецЕсли;
					
				ИначеЕсли ОрганизацияЭтоЮрЛицо Тогда
					ДанныеШапки.Вставить("Кладовщик",           ДанныеШапки.Руководитель);
					ДанныеШапки.Вставить("ДолжностьКладовщика", ДанныеШапки.РуководительДолжность);
					ДанныеШапки.Вставить("ФИОКладовщика",       ДанныеШапки.ФИОРуководителя);
					ДанныеШапки.Вставить("КладовщикФИО",        ДанныеШапки.РуководительФИО);
				Иначе
					ДанныеШапки.Вставить("Кладовщик",           ДанныеШапки.Руководитель);
					ДанныеШапки.Вставить("ДолжностьКладовщика", ДанныеШапки.РуководительДолжность);
					ДанныеШапки.Вставить("ФИОКладовщика",       ДанныеШапки.ФИОПБОЮЛ);
					ДанныеШапки.Вставить("КладовщикФИО",        ДанныеШапки.ПБОЮЛФИО);
				КонецЕсли;
				
			КонецЕсли;
			
			// Ответственный за правильность оформления факта хозяйственной жизни
			Если ЗначениеЗаполнено(Реквизиты.ОтветственныйЗаОформление) Тогда
				ДанныеОтветственного        = ДанныеОтветственныхЛиц.Найти(Реквизиты.ОтветственныйЗаОформление, "ФизическоеЛицо");
				
				ДолжностьОтветственного     = ?(ДанныеОтветственного = Неопределено, "", ДанныеОтветственного.Должность);
				ПредставлениеОтветственного = ?(ДанныеОтветственного = Неопределено, "", ДанныеОтветственного.Представление);
				СтруктураФИО                = ?(ДанныеОтветственного = Неопределено, Новый Структура("Фамилия, Имя, Отчество, Представление"), СтруктураФИО(ДанныеОтветственного));
				
				ДанныеШапки.Вставить("ДолжностьОтветственного", ДолжностьОтветственного);
				ДанныеШапки.Вставить("ФИООтветственного",       ПредставлениеОтветственного);
				ДанныеШапки.Вставить("ОтветственныйФИО",        СтруктураФИО);
				ДанныеШапки.Вставить("ОтветственныйЗаОформление", Реквизиты.ОтветственныйЗаОформление);
				
			ИначеЕсли ОрганизацияЭтоЮрЛицо Тогда
				
				ДанныеШапки.Вставить("ДолжностьОтветственного", ДанныеШапки.РуководительДолжность);
				ДанныеШапки.Вставить("ФИООтветственного",       ДанныеШапки.ФИОРуководителя);
				ДанныеШапки.Вставить("ОтветственныйФИО",        ДанныеШапки.РуководительФИО);
				ДанныеШапки.Вставить("ОтветственныйЗаОформление", ДанныеШапки.Руководитель);
				
			Иначе
				
				ДанныеШапки.Вставить("ДолжностьОтветственного", ДанныеШапки.РуководительДолжность);
				ДанныеШапки.Вставить("ФИООтветственного",       ДанныеШапки.ФИОПБОЮЛ);
				ДанныеШапки.Вставить("ОтветственныйФИО",        ДанныеШапки.ПБОЮЛФИО);
				ДанныеШапки.Вставить("ОтветственныйЗаОформление", ДанныеШапки.Руководитель);
				
			КонецЕсли;
			
			// Дата отгрузки, передачи (сдачи)
			ШаблонДатыОтгрузкиПередачи = Формат(Реквизиты.ДатаОснования, "ДФ='« дд » %1 ММММ %2 гггг  %3'");
			
			ДлинаДаты = 30;
			ДобавитьСимволовСлева  = Окр((ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи))/2, 0);
			ДобавитьСимволовСправа = ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи) - ДобавитьСимволовСлева;
			
			ДатаОтгрузкиПередачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДатыОтгрузкиПередачи, 
				СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСлева),
				СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСправа),
				НСтр("ru = 'года'"));
			
			ДанныеШапки.Вставить ("ДатаОтгрузкиПередачи", ДатаОтгрузкиПередачи);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ДанныеШапки;

КонецФункции

Функция ПодготовитьДанныеШапкиКорректировочногоСчетаФактуры1137(ВыборкаСФ, СтрокаТаблицыРеквизиты, ДополнитьДаннымиУПД) Экспорт

	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыРеквизиты);
	
	ДанныеШапки = Новый Структура;
	ТекстПустойПоказатель = "--";
	
	// Номер и дата
	Если ВыборкаСФ.Исправление И ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		Номер = ВыборкаСФ.НомерИсправляемогоКорректировочногоДокумента;
		ДанныеШапки.Вставить("Дата", ВыборкаСФ.ДатаИсправляемогоКорректировочногоДокумента);
	Иначе
		Если ВыборкаСФ.УдалитьПрефиксыИзНомера Тогда
			Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаСФ.Номер, Истина, Ложь);
		Иначе
			Номер = ВыборкаСФ.Номер;
		КонецЕсли;
		ДанныеШапки.Вставить("Дата", ВыборкаСФ.Дата);
	КонецЕсли;
	
	// Дополняем номер индексом обособленного подразделения (при необходимости)
	Если ЗначениеЗаполнено(Реквизиты.ЦифровойИндексОбособленногоПодразделения)
		И ВыборкаСФ.ЭтоСчетФактураВыданный Тогда
		Номер = Номер + "/" + Реквизиты.ЦифровойИндексОбособленногоПодразделения;
	КонецЕсли;

	ДанныеШапки.Вставить("Номер", СокрЛП(Номер));
	
	// Номер и дата исправления
	ДанныеШапки.Вставить("Исправление", ВыборкаСФ.Исправление);
	Если ВыборкаСФ.Исправление Тогда
		Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			НомерИсправленияКорректировочного = ВыборкаСФ.НомерИсправления;
			ДатаИсправленияКорректировочного  = ВыборкаСФ.ДатаИсправления;
		Иначе
			НомерИсправленияКорректировочного = ВыборкаСФ.НомерИсправленияКорректировочного;
			ДатаИсправленияКорректировочного  = ВыборкаСФ.ДатаИсправленияКорректировочного;
		КонецЕсли;
	Иначе
		НомерИсправленияКорректировочного = "--";
		ДатаИсправленияКорректировочного  = '00010101';
	КонецЕсли;
	
	ДанныеШапки.Вставить("НомерИсправленияКорректировочного", НомерИсправленияКорректировочного);
	ДанныеШапки.Вставить("ДатаИсправленияКорректировочного",  ДатаИсправленияКорректировочного);
	
	ТаблицаРеквизитовОснований = Новый ТаблицаЗначений;
	ТаблицаРеквизитовОснований.Колонки.Добавить("НомерСчетаФактуры");
	ТаблицаРеквизитовОснований.Колонки.Добавить("ДатаСчетаФактуры");
	ТаблицаРеквизитовОснований.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	ТаблицаРеквизитовОснований.Колонки.Добавить("НомерИсправления");
	ТаблицаРеквизитовОснований.Колонки.Добавить("ДатаИсправления");
	
	ВыборкаОснования = ВыборкаСФ.Выбрать();
	Пока ВыборкаОснования.Следующий() Цикл
		
		НовоеОснование = ТаблицаРеквизитовОснований.Добавить();
		
		// Номер и дата исходного счета-фактуры
		Если ЗначениеЗаполнено(Реквизиты.ЦифровойИндексОбособленногоПодразделения)
			И ВыборкаСФ.ЭтоСчетФактураВыданный Тогда
			НовоеОснование.НомерСчетаФактуры = СокрЛП(ВыборкаОснования.НомерИсходногоДокумента) + "/" + Реквизиты.ЦифровойИндексОбособленногоПодразделения;
		Иначе
			НовоеОснование.НомерСчетаФактуры = СокрЛП(ВыборкаОснования.НомерИсходногоДокумента);
		КонецЕсли;
		
		НовоеОснование.ДатаСчетаФактуры  = ВыборкаОснования.ДатаИсходногоДокумента;
		
		НовоеОснование.УчитыватьИсправлениеИсходногоДокумента = ВыборкаОснования.УчитыватьИсправлениеИсходногоДокумента;
		// Номер и дата исправления исходного счета-фактуры
		Если ВыборкаОснования.УчитыватьИсправлениеИсходногоДокумента = Истина Тогда
			НовоеОснование.НомерИсправления = ВыборкаОснования.НомерИсправленияИсходногоДокумента;
			НовоеОснование.ДатаИсправления	 = ВыборкаОснования.ДатаИсправленияИсходногоДокумента;
		Иначе
			НовоеОснование.НомерИсправления = "--";
			НовоеОснование.ДатаИсправления	= '00010101';
		КонецЕсли;

		ИсходныйДокументСводныйКомиссионный = Ложь;
		ПараметрыСводногоСФПоКомиссии = Неопределено;
		
		// Ищем сводный комиссионный
		Если Не ДополнитьДаннымиУПД
			И ВыборкаСФ.ЭтоСчетФактураВыданный 
			И ВыборкаОснования.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
			И ЗначениеЗаполнено(ВыборкаОснования.ИсходныйДокумент)
			И ВыборкаОснования.Количество() = 1 Тогда
			
				ИсходныйДокументСводныйКомиссионный = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаОснования.ИсходныйДокумент, "СводныйКомиссионный"); 
					
				Если ИсходныйДокументСводныйКомиссионный Тогда	
					ПараметрыСводногоСФПоКомиссии = 
						ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоПродаже(ВыборкаОснования.ИсходныйДокумент,
							Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
				КонецЕсли; 
				
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРеквизитовОснований.Свернуть("НомерСчетаФактуры,ДатаСчетаФактуры, УчитыватьИсправлениеИсходногоДокумента, НомерИсправления,ДатаИсправления");
	ДанныеШапки.Вставить("ТаблицаРеквизитовОснований", ТаблицаРеквизитовОснований);

	ДанныеШапки.Вставить("Поставщик", Реквизиты.Поставщик);
	
	// ИНН и КПП продавца
	ДанныеШапки.Вставить("ИННпродавца", Реквизиты.ИННпоставщика);
	
	Если НЕ ВыборкаСФ.ЭтоСчетФактураВыданный 
		И ЗначениеЗаполнено(ВыборкаСФ.КППСчетаФактуры)
		И Реквизиты.Поставщик = ВыборкаСФ.Контрагент Тогда
		КППпоставщика = ВыборкаСФ.КППСчетаФактуры;
	Иначе
		КПППоставщика = УчетНДСБП.КППНаДату(Реквизиты.ОбособленноеПодразделениеПоставщика, ВыборкаСФ.ДатаСведений);
	КонецЕсли;
	
	ДанныеШапки.Вставить("КППпродавца", УчетНДСБП.КППНаДату(Реквизиты.ОбособленноеПодразделениеПоставщика, ВыборкаСФ.ДатаСведений));

	Если ТипЗнч(Реквизиты.Поставщик) = Тип("Строка") Тогда
		
		ДанныеШапки.Вставить("НаименованиеПродавца", Реквизиты.Поставщик);
		ДанныеШапки.Вставить("АдресПродавца",        Реквизиты.АдресПоставщика);
		ДанныеШапки.Вставить("ИННКППпродавца",       Реквизиты.ИННКПППоставщика);
		
	Иначе
		
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Поставщик, ВыборкаСФ.ДатаСведений);
		
		ДанныеШапки.Вставить("НаименованиеПродавца",
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,"));
		
		// Адрес продавца
		ДанныеШапки.Вставить("АдресПродавца",
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,"));
			
		ДанныеШапки.Вставить("ИННКППпродавца",
			ДанныеШапки.ИННпродавца
			+ ?(ЗначениеЗаполнено(ДанныеШапки.КППпродавца), "/", "")
			+ ДанныеШапки.КППпродавца);
		
	КонецЕсли;
	
	Если Не ДополнитьДаннымиУПД
		И ИсходныйДокументСводныйКомиссионный 
		И ЕстьЗаполненныеЭлементыВСтруктуре(ПараметрыСводногоСФПоКомиссии) Тогда

		ДанныеШапки.Вставить("Покупатель", Реквизиты.Покупатель);
		ДанныеШапки.Вставить("НаименованиеПокупателя", ПараметрыСводногоСФПоКомиссии.ПредставлениеПокупателя);
		ДанныеШапки.Вставить("АдресПокупателя", ПараметрыСводногоСФПоКомиссии.АдресПокупателя);
		ДанныеШапки.Вставить("ИННКПППокупателя", ПараметрыСводногоСФПоКомиссии.ИННКПППокупателя);
		ДанныеШапки.Вставить("КППпокупателя", "");
		ДанныеШапки.Вставить("ИННпокупателя", "");
	
	Иначе
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Покупатель, ВыборкаСФ.ДатаСведений);
		
		// Наименование покупателя
		ДанныеШапки.Вставить("Покупатель", Реквизиты.Покупатель);
		ДанныеШапки.Вставить("НаименованиеПокупателя",
		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "НаименованиеДляПечатныхФорм,"));
		
		// Адрес покупателя
		ДанныеШапки.Вставить("АдресПокупателя",
		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
		
		// ИНН и КПП покупателя
		ДанныеШапки.Вставить("ИННпокупателя", Реквизиты.ИННпокупателя);
		
		Если ВыборкаСФ.ЭтоСчетФактураВыданный
			И ЗначениеЗаполнено(ВыборкаСФ.ВидСчетаФактуры) 
			И Реквизиты.Покупатель = ВыборкаСФ.Контрагент
			И ЗначениеЗаполнено(ВыборкаСФ.КППСчетаФактуры) Тогда
			КППпокупателя = ВыборкаСФ.КППСчетаФактуры;
		Иначе
			КППпокупателя = УчетНДСБП.КППНаДату(Реквизиты.ОбособленноеПодразделениеПокупателя, ВыборкаСФ.ДатаСведений);
		КонецЕсли;
		
		ДанныеШапки.Вставить("КППпокупателя", КППпокупателя);
		
		ДанныеШапки.Вставить("ИННКППпокупателя",
		ДанныеШапки.ИННпокупателя
		+ ?(ЗначениеЗаполнено(ДанныеШапки.КППпокупателя), "/", "")
		+ ДанныеШапки.КППпокупателя);
		
	КонецЕсли;
	
	Валюта = ""; 
	ВалютаКод = "";
	ВалютаКурс = 0; 
	ВалютаКратность = 0;
	
	// Валюта
	Если ЗначениеЗаполнено(Реквизиты.Валюта) Тогда
		РеквизитыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.Валюта, "НаименованиеПолное,Код");
		СтруктураКурса  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.Валюта, Реквизиты.ДатаОснования);
		
		Валюта             = РеквизитыВалюты.НаименованиеПолное + ", " + РеквизитыВалюты.Код;
		ВалютаНаименование = РеквизитыВалюты.НаименованиеПолное;
		ВалютаКод          = РеквизитыВалюты.Код;
		ВалютаКурс         = СтруктураКурса.Курс;
		ВалютаКратность    = СтруктураКурса.Кратность;
	КонецЕсли;
	
	ДанныеШапки.Вставить("Валюта", Реквизиты.Валюта);
	ДанныеШапки.Вставить("ВалютаНаименование", "Валюта: наименование, код " + Валюта);
	ДанныеШапки.Вставить("ВалютаНаименованиеУКД", Валюта);
	ДанныеШапки.Вставить("ВалютаНаименованиеПолное", ВалютаНаименование);
	ДанныеШапки.Вставить("ВалютаКод", ВалютаКод);
	ДанныеШапки.Вставить("ВалютаКурс", ВалютаКурс);
	ДанныеШапки.Вставить("ВалютаКратность", ВалютаКратность);
	ДанныеШапки.Вставить("ИдентификаторГосКонтракта", ВыборкаСФ.ИдентификаторГосКонтракта);
	
	Если Реквизиты.Свойство("НДСИсчисляетсяНалоговымАгентом") Тогда
		НДСИсчисляетсяНалоговымАгентом = Реквизиты.НДСИсчисляетсяНалоговымАгентом = Истина
			И УчетНДС.ВедетсяУчетНДСПоФЗ335(ВыборкаСФ.Дата);
	Иначе
		НДСИсчисляетсяНалоговымАгентом = Ложь;
	КонецЕсли;
	
	ДанныеШапки.Вставить("НДСИсчисляетсяНалоговымАгентом", НДСИсчисляетсяНалоговымАгентом);
	
	// Сведения о комиссионере
	Если ВыборкаСФ.ЭтоСчетФактураВыданный 
		И (ТипЗнч(Реквизиты.Поставщик) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(Реквизиты.Поставщик) = Тип("Строка"))
		И ТипЗнч(Реквизиты.Покупатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		Комиссионер = Реквизиты.Организация;
	ИначеЕсли НЕ ВыборкаСФ.ЭтоСчетФактураВыданный 
		И ВыборкаСФ.Контрагент <> Реквизиты.Поставщик Тогда
		Комиссионер = ВыборкаСФ.Контрагент;
	Иначе
		Комиссионер = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Комиссионер) Тогда
	
		СведенияОКомиссионере = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Комиссионер, ВыборкаСФ.ДатаСведений);
		КППКомиссионера = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
		ДанныеШапки.Вставить("ПредставлениеКомиссионера", "Составлен комиссионером (агентом): " 
			+ ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "НаименованиеДляПечатныхФорм,")
			+ ", " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ЮридическийАдрес,")
			+ ", ИНН/КПП: " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь)
			+ ?(ЗначениеЗаполнено(КППКомиссионера), "/" + КППКомиссионера, ""));
	
	Иначе
	
		ДанныеШапки.Вставить("ПредставлениеКомиссионера", "");
	
	КонецЕсли;
	
	// Данные комиссионера на стороне комитентов
	Если ВыборкаСФ.ЭтоСчетФактураВыданный Тогда

		Если Реквизиты.Свойство("Комиссионер") И ЗначениеЗаполнено(Реквизиты.Комиссионер) Тогда
		
			СведенияОКомиссионере = 
				БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Комиссионер, ВыборкаСФ.ДатаСведений);
			
			КППКомиссионера = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
			ПредставлениеКомиссионера = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОКомиссионере, "НаименованиеДляПечатныхФорм,");
			ПредставлениеКомиссионераНаПечать = ПредставлениеКомиссионера
			+ ", ИНН/КПП: " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь)
			+ ?(ЗначениеЗаполнено(КППКомиссионера), "/" + КППКомиссионера, "");

			ДанныеШапки.ПредставлениеКомиссионера = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выставлен комиссионеру %1, по корректировочному счету-фактуре № %2 от %3'"),
				ПредставлениеКомиссионераНаПечать, Реквизиты.НомерСФКомиссионера,
					Формат(Реквизиты.ДатаСФКомиссионера, "ДФ=dd.MM.yyyy"));

		КонецЕсли;
	КонецЕсли;
	
	// Данные для подвала
	Если ВыборкаСФ.ЭтоСчетФактураВыданный ИЛИ ДополнитьДаннымиУПД Тогда
		
		Если ТипЗнч(Реквизиты.Поставщик) = Тип("Строка") Тогда
			ОрганизацияДляРеквизитовПодвала = Реквизиты.Организация;
		Иначе
			ОрганизацияДляРеквизитовПодвала = Реквизиты.Поставщик;
		КонецЕсли;
		
		ОрганизацияЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОрганизацияДляРеквизитовПодвала);
		
		// Получаем за один вызов данные по всем необходимым физлицам.
		СписокФизЛиц = Новый Массив;
		Если (ОрганизацияЭтоЮрЛицо ИЛИ ВедетсяУчетНДСПоФЗ81(ВыборкаСФ.Дата) ИЛИ ДополнитьДаннымиУПД)
		   И ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
			СписокФизЛиц.Добавить(ВыборкаСФ.Руководитель);
		КонецЕсли;
		Если ОрганизацияЭтоЮрЛицо
		   И ЗначениеЗаполнено(ВыборкаСФ.ГлавныйБухгалтер) Тогда
			СписокФизЛиц.Добавить(ВыборкаСФ.ГлавныйБухгалтер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизиты.ОтветственныйЗаОформление) Тогда
			СписокФизЛиц.Добавить(Реквизиты.ОтветственныйЗаОформление);
		КонецЕсли; 
		Если СписокФизЛиц.Количество() > 0 Тогда
			ДанныеОтветственныхЛиц = УчетЗарплаты.ДанныеФизическихЛиц(Реквизиты.Организация, СписокФизЛиц, ВыборкаСФ.Дата, Истина, Истина);
		Иначе
			ДанныеОтветственныхЛиц = Новый ТаблицаЗначений;
			ДанныеОтветственныхЛиц.Колонки.Добавить("ФизическоеЛицо");
		КонецЕсли;
		
		Если ОрганизацияЭтоЮрЛицо Тогда
			
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(ОрганизацияДляРеквизитовПодвала, ВыборкаСФ.Дата, Реквизиты.Подразделение);
			
			Если ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
				ДанныеФизЛица        = ДанныеОтветственныхЛиц.Найти(ВыборкаСФ.Руководитель, "ФизическоеЛицо");
				ФизическоеЛицо       = ?(ДанныеФизЛица = Неопределено, Справочники.ФизическиеЛица.ПустаяСсылка(), ДанныеФизЛица.ФизическоеЛицо);
				ПредставлениеФизЛица = ?(ДанныеФизЛица = Неопределено, "", ДанныеФизЛица.Представление);
				СтруктураФИО = ?(ДанныеФизЛица = Неопределено, Новый Структура("Фамилия, Имя, Отчество, Представление"), СтруктураФИО(ДанныеФизЛица));
				ДанныеШапки.Вставить("ФИОРуководителя", ПредставлениеФизЛица);
				ДанныеШапки.Вставить("Руководитель",    ФизическоеЛицо);
				ДанныеШапки.Вставить("РуководительФИО", СтруктураФИО);
			Иначе 
				ДанныеШапки.Вставить("ФИОРуководителя", Руководители.РуководительПредставление);
				ДанныеШапки.Вставить("Руководитель",    Руководители.Руководитель);
				ДанныеШапки.Вставить("РуководительФИО", Руководители.РуководительФИО);
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаСФ.ГлавныйБухгалтер) Тогда
				ДанныеФизЛица        = ДанныеОтветственныхЛиц.Найти(ВыборкаСФ.ГлавныйБухгалтер, "ФизическоеЛицо");
				ФизическоеЛицо       = ?(ДанныеФизЛица = Неопределено, Справочники.ФизическиеЛица.ПустаяСсылка(), ДанныеФизЛица.ФизическоеЛицо);
				ПредставлениеФизЛица = ?(ДанныеФизЛица = Неопределено, "", ДанныеФизЛица.Представление);
				СтруктураФИО = ?(ДанныеФизЛица = Неопределено, Новый Структура("Фамилия, Имя, Отчество, Представление"), СтруктураФИО(ДанныеФизЛица));
				ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", ПредставлениеФизЛица);
				ДанныеШапки.Вставить("ГлавныйБухгалтер",      ФизическоеЛицо);
				ДанныеШапки.Вставить("ГлавныйБухгалтерФИО",   СтруктураФИО);
			Иначе 
				ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);
				ДанныеШапки.Вставить("ГлавныйБухгалтер",      Руководители.ГлавныйБухгалтер);
				ДанныеШапки.Вставить("ГлавныйБухгалтерФИО",   Руководители.ГлавныйБухгалтерФИО);
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(СведенияОПоставщике) Тогда
				Свидетельство = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
			ИначеЕсли Реквизиты.Свойство("Организация") Тогда
				СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Организация, Реквизиты.ДатаОснования);
				Свидетельство = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "Свидетельство,");
			КонецЕсли;
			
			ДанныеШапки.Вставить("Свидетельство", Свидетельство);
			ДанныеШапки.Вставить("Руководитель",  ВыборкаСФ.Руководитель);
			
			Если ВедетсяУчетНДСПоФЗ81(ВыборкаСФ.Дата) 
			   И ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
				ДанныеФизЛица = ДанныеОтветственныхЛиц.Найти(ВыборкаСФ.Руководитель, "ФизическоеЛицо");
				СтруктураФИО   = ?(ДанныеФизЛица = Неопределено, Новый Структура("Фамилия, Имя, Отчество, Представление"), СтруктураФИО(ДанныеФизЛица));
				ДанныеШапки.Вставить("ФИОПБОЮЛ", ?(ДанныеФизЛица = Неопределено, "", ДанныеФизЛица.Представление));
				ДанныеШапки.Вставить("ПБОЮЛФИО", ?(ДанныеФизЛица = Неопределено, Новый Структура("Фамилия, Имя, Отчество, Представление"), СтруктураФИО));
			Иначе
				СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОПоставщике.ФИОФизлица);
				СтруктураФИО.Вставить("Представление", СведенияОПоставщике.ФИОФизлица);
				
				ДанныеШапки.Вставить("ФИОПБОЮЛ", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ФамилияИнициалыФизлица,"));
				ДанныеШапки.Вставить("ПБОЮЛФИО", СтруктураФИО);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Данные для универсального передаточного документа
	Если ДополнитьДаннымиУПД Тогда
		
		// Наименование экономического субъекта - составителя документа
		Если ЗначениеЗаполнено(Комиссионер) И СведенияОКомиссионере <> Неопределено Тогда
			ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "НаименованиеДляПечатныхФорм,");
			ИННПоставщика           = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь);
			КПППоставщика           = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
		Иначе
			ПредставлениеПоставщика = ДанныеШапки.НаименованиеПродавца;
			ИННПоставщика           = ДанныеШапки.ИННПродавца;
			КПППоставщика           = ДанныеШапки.КПППродавца;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КПППоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ПредставлениеПоставщика, ИННПоставщика, КПППоставщика);
		ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ПредставлениеПоставщика, ИННПоставщика);
		Иначе
			ПредставлениеОрганизации = ПредставлениеПоставщика;
		КонецЕсли;
		ДанныеШапки.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		
		Если ЗначениеЗаполнено(ДанныеШапки.КППпокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ДанныеШапки.НаименованиеПокупателя, ДанныеШапки.ИННпокупателя, ДанныеШапки.КППпокупателя);
		ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.ИННпокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ДанныеШапки.НаименованиеПокупателя, ДанныеШапки.ИННпокупателя);
		Иначе
			ПредставлениеКонтрагента = ДанныеШапки.НаименованиеПокупателя;
		КонецЕсли;
		
		ДанныеШапки.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
		
		ДанныеШапки.Вставить("Основание", Реквизиты.Основание);
		ДанныеШапки.Вставить("ОснованиеДата", Реквизиты.ОснованиеДата);
		ДанныеШапки.Вставить("ОснованиеНомер", Реквизиты.ОснованиеНомер);
		ДанныеШапки.Вставить("ОснованиеВид", Реквизиты.ВидДоговора);
		ДанныеШапки.Вставить("ИныеСведения", Реквизиты.СопроводительныеДокументы);
		Если Реквизиты.Свойство("БанковскийСчетПродавца") Тогда
			ДанныеШапки.Вставить("БанковскийСчетПродавца", Реквизиты.БанковскийСчетПродавца);
		КонецЕсли;
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Реквизиты.Поставщик, ВыборкаСФ.Дата, Реквизиты.Подразделение);
		ДанныеШапки.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжностьПредставление);
		Если ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
			ДанныеФизЛица = ДанныеОтветственныхЛиц.Найти(ВыборкаСФ.Руководитель, "ФизическоеЛицо");
			СтруктураФИО = ?(ДанныеФизЛица = Неопределено, Новый Структура("Фамилия, Имя, Отчество, Представление"), СтруктураФИО(ДанныеФизЛица));
			
			ДанныеШапки.Вставить("ФИОРуководителяНакладная", ?(ДанныеФизЛица = Неопределено, "", ДанныеФизЛица.Представление));
			ДанныеШапки.Вставить("РуководительНакладнаяФИО", СтруктураФИО);

		Иначе 

			ДанныеШапки.Вставить("ФИОРуководителяНакладная", Руководители.РуководительПредставление);
			ДанныеШапки.Вставить("РуководительНакладнаяФИО", Руководители.РуководительФИО);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты.ОтветственныйЗаОформление) Тогда
			ДанныеОтветственного        = ДанныеОтветственныхЛиц.Найти(Реквизиты.ОтветственныйЗаОформление, "ФизическоеЛицо");
			
			ДолжностьОтветственного     = ?(ДанныеОтветственного = Неопределено, "", ДанныеОтветственного.Должность);
			ПредставлениеОтветственного = ?(ДанныеОтветственного = Неопределено, "", ДанныеОтветственного.Представление);
			ОтветственныйФИО            = ?(ДанныеОтветственного = Неопределено, 
				Новый Структура("Фамилия, Имя, Отчество, Представление"), 
				СтруктураФИО(ДанныеОтветственного));
			
			ДанныеШапки.Вставить("ДолжностьОтветственного",   ДолжностьОтветственного);
			ДанныеШапки.Вставить("ФИООтветственного",         ПредставлениеОтветственного);
			ДанныеШапки.Вставить("ОтветственныйФИО",          ОтветственныйФИО);
			ДанныеШапки.Вставить("ОтветственныйЗаОформление", Реквизиты.ОтветственныйЗаОформление);
			
		ИначеЕсли ОрганизацияЭтоЮрЛицо Тогда
			
			ДанныеШапки.Вставить("ДолжностьОтветственного",   ДанныеШапки.ДолжностьРуководителя);
			ДанныеШапки.Вставить("ФИООтветственного",         ДанныеШапки.ФИОРуководителя);
			ДанныеШапки.Вставить("ОтветственныйФИО",          ДанныеШапки.РуководительФИО);
			ДанныеШапки.Вставить("ОтветственныйЗаОформление", ДанныеШапки.Руководитель);
			
		Иначе
			
			ДанныеШапки.Вставить("ДолжностьОтветственного",   ДанныеШапки.ДолжностьРуководителя);
			ДанныеШапки.Вставить("ФИООтветственного",         ДанныеШапки.ФИОПБОЮЛ);
			ДанныеШапки.Вставить("ОтветственныйФИО",          ДанныеШапки.ПБОЮЛФИО);
			ДанныеШапки.Вставить("ОтветственныйЗаОформление", ДанныеШапки.Руководитель);
			
		КонецЕсли;
		
		// Статус
		Если НЕ ЗначениеЗаполнено(ВыборкаСФ.ВидСчетаФактуры) Тогда
			СтатусУКД = 2;
		Иначе
			СтатусУКД = 1;
		КонецЕсли;
		
		ДанныеШапки.Вставить("СтатусУКД", СтатусУКД);
			
	КонецЕсли;

	Возврат ДанныеШапки;

КонецФункции

Функция ЕстьЗаполненныеЭлементыВСтруктуре(ПараметрыСводногоСФПоКомиссии)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСводногоСФПоКомиссии) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ТекущийЭлемент Из ПараметрыСводногоСФПоКомиссии Цикл
		
		Если ЗначениеЗаполнено(ТекущийЭлемент.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает структуру из 2 таблиц для печати счета-фактуры:
// - Реквизиты - реквизиты шапки
// - ТаблицаДокумента - строки табличных частей.
//   Если СФ по договору в у.е. печатается в рублях, таблица содержит суммы, соответствующие
//   суммам бухгалтерских проводок, то есть скорректированные с учетом курсов зачтенных авансов
//
// Параметры:
// ДокументОснование - ДокументСсылка
//   В модуле менеджера документа должна быть экспортная функция
//   ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц)
// СчетФактура - ДокументСсылка.СчетФактураВыданный - распечатываемый счет-фактура
//   Используется при печати счета-фактуры по документу ОказаниеУслуг
// ВидСчетаФактура - ПеречислениеСсылка.ВидСчетаФактурыВыставленного или .ВидСчетаФактурыПолученного - реквизит счета-фактуры
// ИспользуетсяПостановлениеНДС1137 - Булево - применяется ли на дату счета-фактуры Постановление 1137 от 26.12.2011 (Истина)
//   или применяется Постановление 914 (Ложь)
//
Функция ПодготовитьДанныеДляПечатиСчетовФактур(ДокументОснование, ДанныеСчетаФактуры) Экспорт

	ДанныеДляПечати = Новый Структура;
	
	СчетФактураПолученныйИзСтранТаможенногоСоюза = 
		КонтрагентРезидентТаможенногоСоюза(ДанныеСчетаФактуры.Контрагент)
		И ТипЗнч(ДанныеСчетаФактуры.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный");
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПринятиеКУчетуОС")
		ИЛИ СчетФактураПолученныйИзСтранТаможенногоСоюза Тогда
		ДанныеДляПечати.Вставить("Реквизиты",			Неопределено);
		ДанныеДляПечати.Вставить("ТаблицаДокумента",	Неопределено);
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	ЦифровойИндексОбособленногоПодразделения = "";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") 
		И ЗначениеЗаполнено(ДокументОснование.ДокументОснование) Тогда 
		ОснованиеСчетаФактуры = ДокументОснование.ДокументОснование;
		Если ОснованиеСчетаФактуры.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			ЦифровойИндексОбособленногоПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеСчетаФактуры,
				"ПодразделениеОрганизации.ЦифровойИндексОбособленногоПодразделения");
		КонецЕсли;
	КонецЕсли;
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	
	Если НЕ ДанныеСчетаФактуры.Свойство("НеподтверждениеНулевойСтавки") Тогда
		ДанныеСчетаФактуры.Вставить("НеподтверждениеНулевойСтавки", Ложь);
	КонецЕсли;
	
	Если НЕ ДанныеСчетаФактуры.Свойство("СводныйКомиссионный") Тогда
		ДанныеСчетаФактуры.Вставить("СводныйКомиссионный", Ложь);
	КонецЕсли;
	
	Если НЕ ДанныеСчетаФактуры.Свойство("СчетаФактурыОтИмениОрганизации") Тогда
		ДанныеСчетаФактуры.Вставить("СчетаФактурыОтИмениОрганизации", Ложь);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаРеглУчета",					ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ДокументОснование",					ДокументОснование);
	
	СводныйСФКомиссияПоЗакупке 	= Ложь;
	СводныйСФКомиссияПоПродаже	= Ложь;
	
	ПредставлениеПоставщика 	= "";
	АдресПоставщика 			= "";
	Грузоотправитель 			= "";
	ИННКПППоставщика 			= "";
	
	ПредставлениеПокупателя  = "";
	АдресПокупателя 		 = "";
	Грузополучатель			 = "";
	ИННКПППокупателя 		 = "";
	СчетаФактурыКомиссионера = "";
	
	Если ДанныеСчетаФактуры.СводныйКомиссионный
		И НЕ ДанныеСчетаФактуры.СчетаФактурыОтИмениОрганизации Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			//значит авансовый, нужно определить по закупке или по продаже
			Если ДанныеСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
				//Значит авансовый выданный комиссионером (комиссия по закупке)
				СводныйСФКомиссияПоЗакупке = Истина;
				
				ПараметрыСводногоСФПоКомиссии = ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоЗакупке(ДанныеСчетаФактуры.СчетФактура, ДанныеСчетаФактуры.ВидСчетаФактуры);
				
				ПредставлениеПоставщика = ПараметрыСводногоСФПоКомиссии.ПредставлениеПоставщика;
				АдресПоставщика 		= ПараметрыСводногоСФПоКомиссии.АдресПоставщика;
				Грузоотправитель 		= ПараметрыСводногоСФПоКомиссии.Грузоотправитель;
				ИННКПППоставщика 		= ПараметрыСводногоСФПоКомиссии.ИННКПППоставщика;	
			Иначе			
				//Значит авансовый выданный комитентом (комиссия по продаже)
				СводныйСФКомиссияПоПродаже	= Истина;
				
				ПараметрыСводногоСФПоКомиссии = ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоПродаже(ДанныеСчетаФактуры.СчетФактура, ДанныеСчетаФактуры.ВидСчетаФактуры);
				
				ПредставлениеПокупателя = ПараметрыСводногоСФПоКомиссии.ПредставлениеПокупателя;
				АдресПокупателя 		= ПараметрыСводногоСФПоКомиссии.АдресПокупателя;
				Грузополучатель 		= ПараметрыСводногоСФПоКомиссии.Грузополучатель;
				ИННКПППокупателя 		= ПараметрыСводногоСФПоКомиссии.ИННКПППокупателя;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") 
			И ЗначениеЗаполнено(ДанныеСчетаФактуры.СчетФактура.Продавец) Тогда 
			//Значит комиссия по закупке СФ выданный комиссионером
			СводныйСФКомиссияПоЗакупке = Истина;
			
			ПараметрыСводногоСФПоКомиссии = ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоЗакупке(ДанныеСчетаФактуры.СчетФактура, ДанныеСчетаФактуры.ВидСчетаФактуры);
			
			ПредставлениеПоставщика = ПараметрыСводногоСФПоКомиссии.ПредставлениеПоставщика;
			АдресПоставщика 		= ПараметрыСводногоСФПоКомиссии.АдресПоставщика;
			Грузоотправитель 		= ПараметрыСводногоСФПоКомиссии.Грузоотправитель;
			ИННКПППоставщика 		= ПараметрыСводногоСФПоКомиссии.ИННКПППоставщика;
			
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			//Значит комиссия по продаже СФ выданный комитентом
			СводныйСФКомиссияПоПродаже	= Истина;
			
			ПараметрыСводногоСФПоКомиссии = ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоПродаже(ДанныеСчетаФактуры.СчетФактура, ДанныеСчетаФактуры.ВидСчетаФактуры);
			
			ПредставлениеПокупателя  = ПараметрыСводногоСФПоКомиссии.ПредставлениеПокупателя;
			АдресПокупателя 		 = ПараметрыСводногоСФПоКомиссии.АдресПокупателя;
			Грузополучатель 		 = ПараметрыСводногоСФПоКомиссии.Грузополучатель;
			ИННКПППокупателя 		 = ПараметрыСводногоСФПоКомиссии.ИННКПППокупателя;
			СчетаФактурыКомиссионера = ПараметрыСводногоСФПоКомиссии.СчетаФактурыКомиссионера;
			
		ИначеЕсли  ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			//Значит комиссия по закупке СФ полученный от комиссионера
			СводныйСФКомиссияПоЗакупке = Истина;
			
			ПараметрыСводногоСФПоКомиссии = ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоЗакупке(ДанныеСчетаФактуры.СчетФактура, ДанныеСчетаФактуры.ВидСчетаФактуры);
			
			ПредставлениеПоставщика = ПараметрыСводногоСФПоКомиссии.ПредставлениеПоставщика;
			АдресПоставщика 		= ПараметрыСводногоСФПоКомиссии.АдресПоставщика;
			Грузоотправитель 		= ПараметрыСводногоСФПоКомиссии.Грузоотправитель;
			ИННКПППоставщика 		= ПараметрыСводногоСФПоКомиссии.ИННКПППоставщика;
			
		КонецЕсли;
	КонецЕсли;
	
	ПониженныеВидыСтавок = Новый Массив;
	ЗначениеОбщейСтавкиНДС = 0;
	ЗначениеПониженнойСтавкиНДС = 0;
	ОбщаяСтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	ПониженнаяСтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	Если ДанныеСчетаФактуры.НеподтверждениеНулевойСтавки Тогда
		ПониженныеВидыСтавок.Добавить(Перечисления.ВидыСтавокНДС.Пониженная);
		ПониженныеВидыСтавок.Добавить(Перечисления.ВидыСтавокНДС.ПониженнаяРасчетная);
		
		ДатаДокументаОтгрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");
		
		ОбщаяСтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая, ДатаДокументаОтгрузки);
		ПониженнаяСтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Пониженная, ДатаДокументаОтгрузки);
		
		ЗначениеОбщейСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ОбщаяСтавкаНДС);
		ЗначениеПониженнойСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ПониженнаяСтавкаНДС);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СводныйСФКомиссияПоЗакупке",			СводныйСФКомиссияПоЗакупке);
	Запрос.УстановитьПараметр("СводныйСФКомиссияПоПродаже",			СводныйСФКомиссияПоПродаже);
	Запрос.УстановитьПараметр("ПредставлениеПоставщика",			ПредставлениеПоставщика);
	Запрос.УстановитьПараметр("АдресПоставщика",					АдресПоставщика);
	Запрос.УстановитьПараметр("Грузоотправитель",					Грузоотправитель);
	Запрос.УстановитьПараметр("СчетаФактурыКомиссионера",			СчетаФактурыКомиссионера);
	Запрос.УстановитьПараметр("ИННКПППоставщика",					ИННКПППоставщика);
	Запрос.УстановитьПараметр("ПредставлениеПокупателя",			ПредставлениеПокупателя);
	Запрос.УстановитьПараметр("АдресПокупателя",					АдресПокупателя);
	Запрос.УстановитьПараметр("Грузополучатель",					Грузополучатель);
	Запрос.УстановитьПараметр("ИННКПППокупателя",					ИННКПППокупателя);
	Запрос.УстановитьПараметр("СчетФактура",						ДанныеСчетаФактуры.СчетФактура);
	Запрос.УстановитьПараметр("ВидСчетаФактуры",					ДанныеСчетаФактуры.ВидСчетаФактуры);
	Запрос.УстановитьПараметр("Контрагент",							ДанныеСчетаФактуры.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",					ДанныеСчетаФактуры.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ИспользуетсяПостановлениеНДС1137",	ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137);
	Запрос.УстановитьПараметр("НеподтверждениеНулевойСтавки",		ДанныеСчетаФактуры.НеподтверждениеНулевойСтавки);
	Запрос.УстановитьПараметр("НомерСтроки",						?(ЗначениеЗаполнено(ДанныеСчетаФактуры.СчетФактура), Неопределено, ДанныеСчетаФактуры.НомерСтроки));
	Запрос.УстановитьПараметр("ПустоеПодразделение",				БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.УстановитьПараметр("ЦифровойИндексОбособленногоПодразделения", 
		ЦифровойИндексОбособленногоПодразделения);
	Запрос.УстановитьПараметр("ТекстБезАкциза",
		?(ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137, НСтр("ru = 'без акциза'"), ""));
	Запрос.УстановитьПараметр("ТекстКомиссионноеВознаграждение",	НСтр("ru = 'Комиссионное вознаграждение'"));
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов",
		ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияШтука", 
		Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию());
	Запрос.УстановитьПараметр("ПониженныеВидыСтавок", ПониженныеВидыСтавок);
	Запрос.УстановитьПараметр("ЗначениеОбщейСтавкиНДС", ЗначениеОбщейСтавкиНДС);
	Запрос.УстановитьПараметр("ЗначениеПониженнойСтавкиНДС", ЗначениеПониженнойСтавкиНДС);
	Запрос.УстановитьПараметр("ОбщаяСтавкаНДС", ОбщаяСтавкаНДС);
	Запрос.УстановитьПараметр("ПониженнаяСтавкаНДС", ПониженнаяСтавкаНДС);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Организация, Дата");
		Запрос.УстановитьПараметр("НачислятьНДСПоОтгрузке", УчетнаяПолитика.НачислятьНДСПоОтгрузке(РеквизитыОснования.Организация, РеквизитыОснования.Дата));
		Запрос.УстановитьПараметр("НачислятьНДСПриПередачеНедвижимости", УчетнаяПолитика.НачислятьНДСПриПередачеНедвижимости(РеквизитыОснования.Организация, РеквизитыОснования.Дата));
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = Документы[ДокументОснование.Метаданные().Имя].ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц)
		+ ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();

	Если Результат[НомераТаблиц.Реквизиты].Пустой()
		ИЛИ Результат[НомераТаблиц.ТаблицаДокумента].Пустой() Тогда
		
		ДанныеДляПечати.Вставить("Реквизиты",			Неопределено);
		ДанныеДляПечати.Вставить("ТаблицаДокумента",	Неопределено);

		Возврат ДанныеДляПечати;
		
	КонецЕсли;	
			
	ТаблицаРеквизиты = Результат[НомераТаблиц.Реквизиты].Выгрузить();
	ТаблицаДокумента = Результат[НомераТаблиц.ТаблицаДокумента].Выгрузить();
	Реквизиты = ТаблицаРеквизиты[0];

	РасчетыВУсловныхЕдиницах = ?(ТипЗнч(Реквизиты.РасчетыВУсловныхЕдиницах) = Тип("Булево"), Реквизиты.РасчетыВУсловныхЕдиницах, Ложь);
	
	НуженПересчетВРубли = (РасчетыВУсловныхЕдиницах ИЛИ ДанныеСчетаФактуры.НеподтверждениеНулевойСтавки)
		И Реквизиты.Валюта <> ВалютаРеглУчета
		И ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137;

	Если НуженПересчетВРубли Тогда
		ТаблицаРеквизиты.ЗаполнитьЗначения(ВалютаРеглУчета, "Валюта");
	КонецЕсли;

	СчетФактураНаРеализацию = ДанныеСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	
	СтруктураРеквизитов = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Реквизиты);
	НДСИсчисляетсяНалоговымАгентом = СтруктураРеквизитов.Свойство("НДСИсчисляетсяНалоговымАгентом") 
		И СтруктураРеквизитов.НДСИсчисляетсяНалоговымАгентом;
		
	Если СтруктураРеквизитов.Свойство("ЕстьРасхождения")
	   И СтруктураРеквизитов.ЕстьРасхождения
	   И (Реквизиты.Валюта <> ВалютаРеглУчета ИЛИ РасчетыВУсловныхЕдиницах) Тогда
		// Невозможно корректно рассчитать рублевые суммы счета-фактуры при наличии расхождений при приемке.
		ДанныеДляПечати.Вставить("Реквизиты",			Неопределено);
		ДанныеДляПечати.Вставить("ТаблицаДокумента",	Неопределено);

		Возврат ДанныеДляПечати;

	КонецЕсли;
		
	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		Если НуженПересчетВРубли Тогда
			
			СтрокаДокумента.Всего	 = СтрокаДокумента.ВсегоРуб;
			СтрокаДокумента.СуммаНДС = СтрокаДокумента.НДСРуб;
			СтрокаДокумента.Цена	 = 0;
			
		КонецЕсли;	
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПериодичностьУслуг") Тогда
			// Дополним наименование периодичностью услуги.
			// В таблицах документах у которых есть поле "Содержание" наименование формируется сразу с периодичностью, 
			// в этом случае ПериодичностьУслуги будет неопределено.
			// В остальных документах формируем наименование в момент печати.
			СтрокаДокумента.ТоварНаименование = РаботаСНоменклатуройКлиентСервер.СодержаниеУслуги(
				СтрокаДокумента.ТоварНаименование, СтрокаДокумента.ПериодичностьУслуги, Реквизиты.ДатаОснования);
		КонецЕсли;
		// Определяем окончательную сумму без НДС с учетом всех корректировок и цену
		СтрокаДокумента.СуммаБезНДС = СтрокаДокумента.Всего - СтрокаДокумента.СуммаНДС;
	
		Если СчетФактураНаРеализацию
			И НЕ НДСИсчисляетсяНалоговымАгентом
			И (СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
			ИЛИ СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
			ИЛИ СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			
			// В счетах-фактурах, составляемых по товарам (работам, услугам),
			// реализуемым по государственным регулируемым ценам,
			// в графе 7 следует указывать ставку налога в размере 18 (10) процентов,
			// а в графе 5 – стоимость поставляемых по счету-фактуре товаров
			// (выполненных работ, оказанных услуг) без налога на добавленную стоимость
			
			Если СтрокаДокумента.Количество <> 0 Тогда
				СтрокаДокумента.Цена = Окр(СтрокаДокумента.Всего / СтрокаДокумента.Количество, 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ЕдиницаИзмерения) Тогда
			СтрокаДокумента.Количество = 0;
			СтрокаДокумента.Цена = 0;
		ИначеЕсли СтрокаДокумента.Количество = 0 Тогда
			СтрокаДокумента.ЕдиницаИзмерения = "";
			СтрокаДокумента.Цена = 0;
		ИначеЕсли СтрокаДокумента.Цена = 0 Тогда
			СтрокаДокумента.Цена = Окр(СтрокаДокумента.СуммаБезНДС / СтрокаДокумента.Количество, 2);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРеквизиты.Колонки.Добавить("ДокументОснование", Документы.ТипВсеСсылки());
	ТаблицаРеквизиты.ЗаполнитьЗначения(ДокументОснование, "ДокументОснование");
	
	Если ТаблицаРеквизиты.Колонки.Найти("СводныйСФКомиссияПоЗакупке") = Неопределено Тогда
		ТаблицаРеквизиты.Колонки.Добавить("СводныйСФКомиссияПоЗакупке", Новый ОписаниеТипов("Булево"));
		ТаблицаРеквизиты.ЗаполнитьЗначения(Ложь, "СводныйСФКомиссияПоЗакупке");
	КонецЕсли;
	
	Если ТаблицаРеквизиты.Колонки.Найти("СводныйСФКомиссияПоПродаже") = Неопределено Тогда
		ТаблицаРеквизиты.Колонки.Добавить("СводныйСФКомиссияПоПродаже", Новый ОписаниеТипов("Булево"));
		ТаблицаРеквизиты.ЗаполнитьЗначения(Ложь, "СводныйСФКомиссияПоПродаже");
		
	КонецЕсли;
	//ГосИС
	Если НомераТаблиц.Свойство("ШтрихкодыУпаковок") Тогда
		ШтрихкодыУпаковок = Результат[НомераТаблиц.ШтрихкодыУпаковок].Выгрузить();
		ДанныеДляПечати.Вставить("ШтрихкодыУпаковок", ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимое(ШтрихкодыУпаковок));
	КонецЕсли;
	//Конец ГосИС
	
	ДанныеДляПечати.Вставить("Реквизиты",			ТаблицаРеквизиты);
	ДанныеДляПечати.Вставить("ТаблицаДокумента",	ТаблицаДокумента);

	Возврат ДанныеДляПечати;

КонецФункции

Функция ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоЗакупке(СчетФактура, ВидСчетаФактуры)

	ПараметрыДляСводногоСФПоКомиссии = Новый Структура;
	
	ПредставлениеПоставщика = "";
	АдресПоставщика 		= "";
	Грузоотправитель 		= "";
	ИННКПППоставщика 		= "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ОтчетКомитентуОПродажахПоставщики.Поставщик.ОбособленноеПодразделение
		|				И ОтчетКомитентуОПродажахПоставщики.Поставщик.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|			ТОГДА ОтчетКомитентуОПродажахПоставщики.Поставщик.ГоловнойКонтрагент
		|		ИНАЧЕ ОтчетКомитентуОПродажахПоставщики.Поставщик
		|	КОНЕЦ КАК Поставщик,
		|	ВЫБОР
		|		КОГДА НЕ ОтчетКомитентуОПродажахПоставщики.Поставщик.ОбособленноеПодразделение
		|				И (ЕСТЬNULL(ОтчетКомитентуОПродажахПоставщики.Партия.Грузоотправитель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|					ИЛИ ЕСТЬNULL(ОтчетКомитентуОПродажахПоставщики.Партия.Грузоотправитель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ОтчетКомитентуОПродажахПоставщики.Поставщик)
		|			ТОГДА ""он же""
		|		КОГДА ОтчетКомитентуОПродажахПоставщики.Поставщик.ОбособленноеПодразделение
		|			ТОГДА ОтчетКомитентуОПродажахПоставщики.Поставщик
		|		ИНАЧЕ ОтчетКомитентуОПродажахПоставщики.Партия.Грузоотправитель
		|	КОНЕЦ КАК Грузоотправитель,
		|	ОтчетКомитентуОПродажахПоставщики.Ссылка.Дата КАК Дата,
		|	МИНИМУМ(ОтчетКомитентуОПродажахПоставщики.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.ОтчетКомитентуОПродажах.Поставщики КАК ОтчетКомитентуОПродажахПоставщики
		|ГДЕ
		|	ОтчетКомитентуОПродажахПоставщики.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ОтчетКомитентуОПродажахПоставщики.СчетФактура = &СчетФактура
		|	И ОтчетКомитентуОПродажахПоставщики.Ссылка.ВыписыватьСчетаФактурыСводно
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетКомитентуОПродажахПоставщики.Ссылка.Дата,
		|	ВЫБОР
		|		КОГДА ОтчетКомитентуОПродажахПоставщики.Поставщик.ОбособленноеПодразделение
		|				И ОтчетКомитентуОПродажахПоставщики.Поставщик.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|			ТОГДА ОтчетКомитентуОПродажахПоставщики.Поставщик.ГоловнойКонтрагент
		|		ИНАЧЕ ОтчетКомитентуОПродажахПоставщики.Поставщик
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НЕ ОтчетКомитентуОПродажахПоставщики.Поставщик.ОбособленноеПодразделение
		|				И (ЕСТЬNULL(ОтчетКомитентуОПродажахПоставщики.Партия.Грузоотправитель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|					ИЛИ ЕСТЬNULL(ОтчетКомитентуОПродажахПоставщики.Партия.Грузоотправитель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ОтчетКомитентуОПродажахПоставщики.Поставщик)
		|			ТОГДА ""он же""
		|		КОГДА ОтчетКомитентуОПродажахПоставщики.Поставщик.ОбособленноеПодразделение
		|			ТОГДА ОтчетКомитентуОПродажахПоставщики.Поставщик
		|		ИНАЧЕ ОтчетКомитентуОПродажахПоставщики.Партия.Грузоотправитель
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СчетФактураПолученныйПродавцы.Продавец КАК Поставщик,
		|	МАКСИМУМ(""он же"") КАК Грузоотправитель,
		|	СчетФактураПолученныйПродавцы.Ссылка.Дата,
		|	МИНИМУМ(СчетФактураПолученныйПродавцы.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.СчетФактураПолученный.Продавцы КАК СчетФактураПолученныйПродавцы
		|ГДЕ
		|	СчетФактураПолученныйПродавцы.Ссылка = &СчетФактура
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураПолученныйПродавцы.Продавец,
		|	СчетФактураПолученныйПродавцы.Ссылка.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйАвансы.Контрагент КАК Поставщик,
		|	СчетФактураВыданныйАвансы.Ссылка.Дата,
		|	МИНИМУМ(СчетФактураВыданныйАвансы.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
		|ГДЕ
		|	СчетФактураВыданныйАвансы.Ссылка = &СчетФактура
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураВыданныйАвансы.Контрагент,
		|	СчетФактураВыданныйАвансы.Ссылка.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		
		ПараметрыДляСводногоСФПоКомиссии.Вставить("ПредставлениеПоставщика",	ПредставлениеПоставщика);	
		ПараметрыДляСводногоСФПоКомиссии.Вставить("АдресПоставщика", 			АдресПоставщика);	
		ПараметрыДляСводногоСФПоКомиссии.Вставить("Грузоотправитель", 			Грузоотправитель);	
		ПараметрыДляСводногоСФПоКомиссии.Вставить("ИННКПППоставщика", 			ИННКПППоставщика);
		
		Возврат ПараметрыДляСводногоСФПоКомиссии;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Поставщик, Выборка.Дата);
		
		ПредставлениеПоставщика = ?(ПустаяСтрока(ПредставлениеПоставщика), "", ПредставлениеПоставщика + ";") + 
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,");
		
		АдресПоставщика = ?(ПустаяСтрока(АдресПоставщика), "", АдресПоставщика + ";") + 
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
			
		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда 
			Если ТипЗнч(Выборка.Грузоотправитель) = Тип("Строка") Тогда
				ПредставлениеГрузоотправителя = Выборка.Грузоотправитель;
			Иначе
				СведенияОГрузоотправителе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Грузоотправитель, Выборка.Дата);
				ПредставлениеГрузоотправителя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
					СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ПочтовыйАдрес,");
			КонецЕсли;
			
			Грузоотправитель = ?(ПустаяСтрока(Грузоотправитель), "", Грузоотправитель + ";") + ПредставлениеГрузоотправителя;
		КонецЕсли;
		
		ИННКПППоставщика = 	?(ПустаяСтрока(ИННКПППоставщика), "", ИННКПППоставщика + ";") + 
			СведенияОПоставщике.ИНН + ?(ПустаяСтрока(СведенияОПоставщике.КПП), "", "/" + СведенияОПоставщике.КПП);
		
	КонецЦикла;
		
	ПараметрыДляСводногоСФПоКомиссии.Вставить("ПредставлениеПоставщика",	ПредставлениеПоставщика);	
	ПараметрыДляСводногоСФПоКомиссии.Вставить("АдресПоставщика", 			АдресПоставщика);	
	ПараметрыДляСводногоСФПоКомиссии.Вставить("Грузоотправитель", 			Грузоотправитель);	
	ПараметрыДляСводногоСФПоКомиссии.Вставить("ИННКПППоставщика", 			ИННКПППоставщика);
	
	Возврат ПараметрыДляСводногоСФПоКомиссии;
	
КонецФункции

Функция ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоПродаже(СчетФактура, ВидСчетаФактуры)

	ПараметрыДляСводногоСФПоКомиссии = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Покупатель,
		|	ОтчетКомиссионераОПродажахПокупатели.Ссылка.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА ОтчетКомиссионераОПродажахПокупатели.Ссылка.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ОтчетКомиссионераОПродажахПокупатели.Ссылка.Грузополучатель
		|		ИНАЧЕ ОтчетКомиссионераОПродажахПокупатели.Покупатель
		|	КОНЕЦ КАК Грузополучатель,
		|	МИНИМУМ(ОтчетКомиссионераОПродажахПокупатели.НомерСтроки) КАК НомерСтроки,
		|	ОтчетКомиссионераОПродажахПокупатели.НомерСФ КАК НомерСФ,
		|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ КАК ДатаСФ,
		|	ИСТИНА КАК ЭтоОтчетКомиссионера
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
		|ГДЕ
		|	ОтчетКомиссионераОПродажахПокупатели.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &СчетФактура
		|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.ВыписыватьСчетаФактурыСводно
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетКомиссионераОПродажахПокупатели.Покупатель,
		|	ОтчетКомиссионераОПродажахПокупатели.Ссылка.Дата,
		|	ВЫБОР
		|		КОГДА ОтчетКомиссионераОПродажахПокупатели.Ссылка.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ОтчетКомиссионераОПродажахПокупатели.Ссылка.Грузополучатель
		|		ИНАЧЕ ОтчетКомиссионераОПродажахПокупатели.Покупатель
		|	КОНЕЦ,
		|	ОтчетКомиссионераОПродажахПокупатели.НомерСФ,
		|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		//авансовый
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйАвансы.Контрагент КАК Покупатель,
		|	СчетФактураВыданныйАвансы.Ссылка.Дата КАК Дата,
		|	МИНИМУМ(СчетФактураВыданныйАвансы.НомерСтроки) КАК НомерСтроки,
		|	ЛОЖЬ КАК ЭтоОтчетКомиссионера
		|ИЗ
		|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
		|ГДЕ
		|	СчетФактураВыданныйАвансы.Ссылка = &СчетФактура
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураВыданныйАвансы.Контрагент,
		|	СчетФактураВыданныйАвансы.Ссылка.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	КонецЕсли;	
			
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредставлениеПокупателя  = "";
	АдресПокупателя 		 = "";
	Грузополучатель 		 = "";
	ИННКПППокупателя 		 = "";
	СчетаФактурыКомиссионера = "";

	Пока Выборка.Следующий() Цикл
		
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Покупатель, Выборка.Дата);
		
		ПредставлениеПокупателя = ?(ПустаяСтрока(ПредставлениеПокупателя), "", ПредставлениеПокупателя + ";") + 
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "НаименованиеДляПечатныхФорм,");
		
		АдресПокупателя = ?(ПустаяСтрока(АдресПокупателя), "", АдресПокупателя + ";") + 
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
			
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 			
			СведенияОГрузополучателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Грузополучатель, Выборка.Дата);
			ПредставлениеГрузополучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ПочтовыйАдрес,");
			
			Грузополучатель = 	?(ПустаяСтрока(Грузополучатель), "", Грузополучатель + ";") + ПредставлениеГрузополучателя;
		КонецЕсли;
		
		ИННКПППокупателя = 	?(ПустаяСтрока(ИННКПППокупателя), "", ИННКПППокупателя + ";") + 
			СведенияОПокупателе.ИНН + ?(ПустаяСтрока(СведенияОПокупателе.КПП), "", "/" + СведенияОПокупателе.КПП);
		
		Если Выборка.ЭтоОтчетКомиссионера Тогда
		
			СведениеСчетаФактуры = ?(ПустаяСтрока(Выборка.НомерСФ), "",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '№ %1 от %2'"),
				Выборка.НомерСФ, Формат(Выборка.ДатаСФ, "ДФ=dd.MM.yyyy")));
				
			СчетаФактурыКомиссионера = ?(ПустаяСтрока(СчетаФактурыКомиссионера), "", СчетаФактурыКомиссионера + ",")
			+ СведениеСчетаФактуры;

		Иначе
			СчетаФактурыКомиссионера = "";
		КонецЕсли;
			
	КонецЦикла;
		
	ПараметрыДляСводногоСФПоКомиссии.Вставить("ПредставлениеПокупателя",	ПредставлениеПокупателя);	
	ПараметрыДляСводногоСФПоКомиссии.Вставить("АдресПокупателя", 			АдресПокупателя);	
	ПараметрыДляСводногоСФПоКомиссии.Вставить("Грузополучатель", 			Грузополучатель);	
	ПараметрыДляСводногоСФПоКомиссии.Вставить("ИННКПППокупателя", 			ИННКПППокупателя);
	ПараметрыДляСводногоСФПоКомиссии.Вставить("СчетаФактурыКомиссионера",   СчетаФактурыКомиссионера);
	
	Возврат ПараметрыДляСводногоСФПоКомиссии;
	
КонецФункции

Функция ПодготовитьДанныеДляПечатиКорректировочныхСчетовФактур(ДокументОснование, СчетФактура, ВидСчетаФактуры, ИспользуетсяПостановлениеНДС1137) Экспорт

	ДанныеДляПечати = Новый Структура;

	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	
	ПредставлениеПоставщика = "";
	АдресПоставщика         = "";
	Грузоотправитель        = "";
	ИННКПППоставщика        = "";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ПараметрыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, Новый Структура(
			"ДокументРеализации,ВидДоговораКонтрагента", "ДокументРеализации", "ДоговорКонтрагента.ВидДоговора"));
			
		Если ТипЗнч(ПараметрыОснования.ДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный")
			И ПараметрыОснования.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
			
			// Корректировка счета-фактуры ранее перевыставленного комитенту-покупателю
			
			ПараметрыСводногоСФПоКомиссии = ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоЗакупке(ПараметрыОснования.ДокументРеализации, 
				Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
			
			ПредставлениеПоставщика = ПараметрыСводногоСФПоКомиссии.ПредставлениеПоставщика;
			АдресПоставщика         = ПараметрыСводногоСФПоКомиссии.АдресПоставщика;
			ИННКПППоставщика        = ПараметрыСводногоСФПоКомиссии.ИННКПППоставщика;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",                  ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ДокументОснование",                ДокументОснование);
	Запрос.УстановитьПараметр("СчетФактура",                      СчетФактура);
	Запрос.УстановитьПараметр("ВидСчетаФактуры",                  ВидСчетаФактуры);
	Запрос.УстановитьПараметр("ТекстБезАкциза",                   ?(ИспользуетсяПостановлениеНДС1137, "без акциза", ""));
	Запрос.УстановитьПараметр("ИспользуетсяПостановлениеНДС1137", ИспользуетсяПостановлениеНДС1137);
	Запрос.УстановитьПараметр("ПустоеПодразделение",              БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.УстановитьПараметр("ПредставлениеПоставщика",          ПредставлениеПоставщика);
	Запрос.УстановитьПараметр("АдресПоставщика",                  АдресПоставщика);
	Запрос.УстановитьПараметр("ИННКПППоставщика",                 ИННКПППоставщика);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = Документы[ДокументОснование.Метаданные().Имя].ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц)
		+ ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц);

	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[НомераТаблиц.Реквизиты].Пустой()
		ИЛИ Результат[НомераТаблиц.ТаблицаДокумента].Пустой() Тогда
		
		ДанныеДляПечати.Вставить("Реквизиты",        Неопределено);
		ДанныеДляПечати.Вставить("ТаблицаДокумента", Неопределено);

		Возврат ДанныеДляПечати;
		
	КонецЕсли;

	ТаблицаРеквизиты = Результат[НомераТаблиц.Реквизиты].Выгрузить();
	ТаблицаДокумента = Результат[НомераТаблиц.ТаблицаДокумента].Выгрузить();
	Реквизиты        = ТаблицаРеквизиты[0];

	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.НаименованиеЕдиницыИзмерения) Тогда
			СтрокаДокумента.КоличествоДоИзменения    = 0;
			СтрокаДокумента.КоличествоПослеИзменения = 0;
			СтрокаДокумента.ЦенаДоИзменения          = 0;
			СтрокаДокумента.ЦенаПослеИзменения       = 0;
		Иначе
			
			Если СтрокаДокумента.КоличествоДоИзменения = 0 Тогда
				СтрокаДокумента.ЦенаДоИзменения = 0;
			ИначеЕсли СтрокаДокумента.ЦенаДоИзменения = 0 Тогда
				СтрокаДокумента.ЦенаДоИзменения = Окр(СтрокаДокумента.СтоимостьБезНДСДоИзменения / СтрокаДокумента.КоличествоДоИзменения, 2);
			КонецЕсли;
			
			Если СтрокаДокумента.КоличествоПослеИзменения = 0 Тогда
				СтрокаДокумента.ЦенаПослеИзменения = СтрокаДокумента.ЦенаДоИзменения;
			ИначеЕсли СтрокаДокумента.ЦенаПослеИзменения = 0 Тогда
				СтрокаДокумента.ЦенаПослеИзменения = Окр(СтрокаДокумента.СтоимостьБезНДСПослеИзменения / СтрокаДокумента.КоличествоПослеИзменения, 2);
			КонецЕсли;
			
			Если СтрокаДокумента.КоличествоДоИзменения = 0 
				И СтрокаДокумента.КоличествоПослеИзменения = 0 Тогда
				СтрокаДокумента.НаименованиеЕдиницыИзмерения = "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//ГосИС
	Если НомераТаблиц.Свойство("ШтрихкодыУпаковок") Тогда
		ШтрихкодыУпаковок = Результат[НомераТаблиц.ШтрихкодыУпаковок].Выгрузить();
		ДанныеДляПечати.Вставить("ШтрихкодыУпаковок", ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимое(ШтрихкодыУпаковок));
	КонецЕсли;
	//Конец ГосИС

	ДанныеДляПечати.Вставить("Реквизиты",        ТаблицаРеквизиты);
	ДанныеДляПечати.Вставить("ТаблицаДокумента", ТаблицаДокумента);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаДокумента", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерТабЧасти КАК НомерТабЧасти,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Товар = ""СуммоваяРазница""
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаДокумента.Товар
	|	КОНЕЦ КАК Товар,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ТаблицаДокумента.ТоварАртикул
	|		ИНАЧЕ ТаблицаДокумента.ТоварКод
	|	КОНЕЦ КАК ТоварКод,
	|	ТаблицаДокумента.ТоварНаименование КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ТоварКодТНВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|			ТОГДА ""--""
	|		ИНАЧЕ ТаблицаДокумента.ТоварКодТНВЭД
	|	КОНЕЦ КАК ТоварКодТНВЭД,
	|	ТаблицаДокумента.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.РОССИЯ)
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(СтраныМира.Наименование, """")
	|	КОНЕЦ КАК ПредставлениеСтраны,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.РОССИЯ)
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(СтраныМира.Код, """")
	|	КОНЕЦ КАК СтранаПроисхожденияКод,
	|	ТаблицаДокумента.НомерГТД КАК НомерГТД,
	|	ТаблицаДокумента.ПредставлениеГТД КАК ПредставлениеГТД,
	|	ТаблицаДокумента.РегистрационныйНомерТД КАК РегистрационныйНомерТД,
	|	ТаблицаДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаВключаетНДС
	|				И НЕ &НеподтверждениеНулевойСтавки
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.Количество = 0
	|						ТОГДА 0
	|					КОГДА ТаблицаДокумента.СуммаНДС = 0
	|						ТОГДА ТаблицаДокумента.Цена
	|					ИНАЧЕ ВЫРАЗИТЬ((ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС) / ТаблицаДокумента.Количество КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаВключаетНДС
	|				И НЕ &НеподтверждениеНулевойСтавки
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ ТаблицаДокумента.Сумма + ВЫБОР
	|				КОГДА &НеподтверждениеНулевойСтавки
	|					ТОГДА ТаблицаДокумента.Сумма * ВЫБОР
	|							КОГДА СтавкиНДСНоменклатура.ВидСтавкиНДС В (&ПониженныеВидыСтавок)
	|								ТОГДА &ЗначениеПониженнойСтавкиНДС / 100
	|							ИНАЧЕ &ЗначениеОбщейСтавкиНДС / 100
	|						КОНЕЦ
	|				ИНАЧЕ ТаблицаДокумента.СуммаНДС
	|			КОНЕЦ
	|	КОНЕЦ КАК Всего,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Товар = ""СуммоваяРазница""
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДокумента.СуммаВключаетНДС
	|					ТОГДА ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС
	|				ИНАЧЕ ТаблицаДокумента.Сумма
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА &НеподтверждениеНулевойСтавки
	|			ТОГДА ТаблицаДокумента.Сумма * ВЫБОР
	|					КОГДА СтавкиНДСНоменклатура.ВидСтавкиНДС В (&ПониженныеВидыСтавок)
	|						ТОГДА &ЗначениеПониженнойСтавкиНДС / 100
	|					ИНАЧЕ &ЗначениеОбщейСтавкиНДС / 100
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &НеподтверждениеНулевойСтавки
	|			ТОГДА ВЫБОР
	|					КОГДА СтавкиНДСНоменклатура.ВидСтавкиНДС В (&ПониженныеВидыСтавок)
	|						ТОГДА &ПониженнаяСтавкаНДС
	|					ИНАЧЕ &ОбщаяСтавкаНДС
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	&ТекстБезАкциза КАК Акциз,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.ЭтоКомиссия КАК ЭтоКомиссия,
	|	ВЫБОР
	|		КОГДА &НеподтверждениеНулевойСтавки
	|			ТОГДА ТаблицаДокумента.СуммаБезНДСРуб + ТаблицаДокумента.СуммаБезНДСРуб * ВЫБОР
	|					КОГДА СтавкиНДСНоменклатура.ВидСтавкиНДС В (&ПониженныеВидыСтавок)
	|						ТОГДА &ЗначениеПониженнойСтавкиНДС / 100
	|					ИНАЧЕ &ЗначениеОбщейСтавкиНДС / 100
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.ВсегоРуб
	|	КОНЕЦ КАК ВсегоРуб,
	|	ВЫБОР
	|		КОГДА &НеподтверждениеНулевойСтавки
	|			ТОГДА ТаблицаДокумента.СуммаБезНДСРуб * ВЫБОР
	|					КОГДА СтавкиНДСНоменклатура.ВидСтавкиНДС В (&ПониженныеВидыСтавок)
	|						ТОГДА &ЗначениеПониженнойСтавкиНДС / 100
	|					ИНАЧЕ &ЗначениеОбщейСтавкиНДС / 100
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.НДСРуб
	|	КОНЕЦ КАК НДСРуб,
	|	ТаблицаДокумента.СуммаБезНДСРуб КАК СуммаБезНДСРуб,
	|	ТаблицаДокумента.КонтрагентСводныйСФ КАК КонтрагентСводныйСФ,
	|	ТаблицаДокумента.ПериодичностьУслуги КАК ПериодичностьУслуги
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
	|		ПО (СтраныМира.Ссылка = ТаблицаДокумента.СтранаПроисхождения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО (КлассификаторЕдиницИзмерения.Ссылка = ТаблицаДокумента.ЕдиницаИзмерения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СтавкиНДСНоменклатура
	|		ПО (СтавкиНДСНоменклатура.Ссылка = ТаблицаДокумента.Товар)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НеподтверждениеНулевойСтавки
	|				ТОГДА НЕ ТаблицаДокумента.ЭтоКомиссия
	|						И ТаблицаДокумента.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаДокумента", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.НомерТабЧасти КАК НомерТабЧасти,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Товар КАК Товар,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ТаблицаДокумента.ТоварАртикул
	|		ИНАЧЕ ТаблицаДокумента.ТоварКод
	|	КОНЕЦ КАК ТоварКод,
	|	ТаблицаДокумента.ТоварНаименование КАК НаименованиеНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ТоварКодТНВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|			ТОГДА ""--""
	|		ИНАЧЕ ТаблицаДокумента.ТоварКодТНВЭД
	|	КОНЕЦ КАК ТоварКодТНВЭД,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ТоварКодТНВЭДДоИзменения = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|			ТОГДА ""--""
	|		ИНАЧЕ ТаблицаДокумента.ТоварКодТНВЭДДоИзменения
	|	КОНЕЦ КАК ТоварКодТНВЭДДоИзменения,
	|	ТаблицаДокумента.ЕдиницаИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|	ТаблицаДокумента.КоличествоПослеИзменения КАК КоличествоПослеИзменения,
	|	ТаблицаДокумента.ЦенаДоИзменения КАК ЦенаДоИзменения,
	|	ТаблицаДокумента.ЦенаПослеИзменения КАК ЦенаПослеИзменения,
	|	ТаблицаДокумента.СтоимостьБезНДСДоИзменения КАК СтоимостьБезНДСДоИзменения,
	|	ТаблицаДокумента.СтоимостьБезНДСПослеИзменения КАК СтоимостьБезНДСПослеИзменения,
	|	ТаблицаДокумента.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
	|	ТаблицаДокумента.СтавкаНДСПослеИзменения КАК СтавкаНДСПослеИзменения,
	|	ТаблицаДокумента.СтавкаНДСДоИзменения КАК СтавкаНДС,
	|	&ТекстБезАкциза КАК Акциз,
	|	ТаблицаДокумента.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|	ТаблицаДокумента.СуммаНДСПослеИзменения КАК СуммаНДСПослеИзменения,
	|	ТаблицаДокумента.СтоимостьСНДСДоИзменения КАК СтоимостьСНДСДоИзменения,
	|	ТаблицаДокумента.СтоимостьСНДСПослеИзменения КАК СтоимостьСНДСПослеИзменения,
	|	ТаблицаДокумента.РазницаБезНДСУвеличение КАК РазницаБезНДСУвеличение,
	|	ТаблицаДокумента.РазницаБезНДСУменьшение КАК РазницаБезНДСУменьшение,
	|	ТаблицаДокумента.РазницаНДСУвеличение КАК РазницаНДСУвеличение,
	|	ТаблицаДокумента.РазницаНДСУменьшение КАК РазницаНДСУменьшение,
	|	ТаблицаДокумента.РазницаСНДСУвеличение КАК РазницаСНДСУвеличение,
	|	ТаблицаДокумента.РазницаСНДСУменьшение КАК РазницаСНДСУменьшение,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО ТаблицаДокумента.ЕдиницаИзмерения = КлассификаторЕдиницИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ТаблицаДокумента.Товар = Номенклатура.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция НовыйТаблицаСчетовФактур()
	ТаблицаСчетовФактур = Новый ТаблицаЗначений();
	ТаблицаСчетовФактур.Колонки.Добавить("ДанныеШапки");
	ТаблицаСчетовФактур.Колонки.Добавить("ТаблицаДокумента");
	ТаблицаСчетовФактур.Колонки.Добавить("ДокументыОснования");
	ТаблицаСчетовФактур.Колонки.Добавить("ВидСчетаФактуры");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактура");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактураБезНДС");
	ТаблицаСчетовФактур.Колонки.Добавить("Дата");
	ТаблицаСчетовФактур.Колонки.Добавить("Ссылка");
	ТаблицаСчетовФактур.Колонки.Добавить("НомерСтроки");
	ТаблицаСчетовФактур.Колонки.Добавить("ШтрихкодыУпаковок");
		
	Возврат ТаблицаСчетовФактур;
КонецФункции

Функция ПолучитьДанныеДляПечатиСчетаФактуры1137(МассивОбъектов, ТекстЗапросаПоСчетамФактурам, ДополнитьДаннымиУПД = Ложь, ФормированиеЭД = Ложь) Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда
		// Исключим из массива документы на чтение которых у пользователя нет прав
		УправлениеДоступомБП.УдалитьНедоступныеЭлементыИзМассива(МассивОбъектов);
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления1137",
		УчетНДСБП.ПолучитьДатуНачалаДействияПостановления1137());
	Запрос.Текст = ТекстЗапросаПоСчетамФактурам;
	Результаты   = Запрос.ВыполнитьПакет();
	
	ВыборкаСФ = Результаты[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетФактура");
	
	ПлатежноРасчетныеДокументы	= Неопределено;
	Если Результаты.Количество() > 1 И НЕ Результаты[1].Пустой() Тогда
		ПлатежноРасчетныеДокументы = Результаты[1].Выгрузить();
		ПлатежноРасчетныеДокументы.Индексы.Добавить("СчетФактура");
	КонецЕсли;
	
	ТаблицаСчетовФактур = НовыйТаблицаСчетовФактур();
	
	ДанныеСчетаФактуры = Новый Структура(
		"СчетФактура,ВидСчетаФактуры,Контрагент,ДоговорКонтрагента,
		|ИспользуетсяПостановлениеНДС1137,НеподтверждениеНулевойСтавки,СводныйКомиссионный,СчетаФактурыОтИмениОрганизации");
	ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137 = Истина;
	ДанныеСчетаФактуры.НеподтверждениеНулевойСтавки = Ложь;
	ДанныеСчетаФактуры.СчетаФактурыОтИмениОрганизации = Ложь;
	Пока ВыборкаСФ.Следующий() Цикл
		
		ТаблицаДокумента    = Неопределено;
		ШтрихкодыУпаковок   = Неопределено;
		ДокументыОснования  = Новый Массив;
		ВыборкаПоОснованиям = ВыборкаСФ.Выбрать();
		КоличествоОснований = 0;
		
		Пока ВыборкаПоОснованиям.Следующий() Цикл
			
			Если ТипЗнч(ВыборкаПоОснованиям.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный")
			   И ДополнитьДаннымиУПД 
			   И ВыборкаПоОснованиям.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда
				// УПД за поставщика только по счету-фактуре на поступление
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованиям.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументыОснования.Добавить(ВыборкаПоОснованиям.ДокументОснование);
			ЗаполнитьЗначенияСвойств(ДанныеСчетаФактуры, ВыборкаСФ);
			ПараметрыОснования = ПодготовитьДанныеДляПечатиСчетовФактур(ВыборкаПоОснованиям.ДокументОснование, ДанныеСчетаФактуры);
				
			Если ПараметрыОснования.Реквизиты = Неопределено 
			 ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Реквизиты = ПараметрыОснования.Реквизиты[0];
			
			Если ТаблицаДокумента = Неопределено Тогда
				ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
			Иначе
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ПараметрыОснования.ТаблицаДокумента, ТаблицаДокумента);
			КонецЕсли;
			//ГосИС
			Если ПараметрыОснования.Свойство("ШтрихкодыУпаковок") Тогда
				Если ШтрихкодыУпаковок = Неопределено Тогда
					ШтрихкодыУпаковок = ПараметрыОснования.ШтрихкодыУпаковок;
				Иначе
					ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ПараметрыОснования.ШтрихкодыУпаковок, ШтрихкодыУпаковок);
				КонецЕсли;
			КонецЕсли;
			//Конец ГосИС
			КоличествоОснований = КоличествоОснований + 1;
			
		КонецЦикла;
		
		Если УчетНДСПереопределяемый.ЭтоСчетФактураНаАванс(ВыборкаСФ.ВидСчетаФактуры) И ДополнитьДаннымиУПД Тогда
			// Методически неверно оформлять УПД в случае получения предварительной оплаты.
			Продолжить;
		КонецЕсли;

		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДокумента.Колонки.СуммаБезНДС.Имя = "Стоимость";
		
		Если ВыборкаСФ.Дата >= Дата(2016, 07, 01) 
			И ВыборкаСФ.Дата < Дата(2017, 10, 01)
			И ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
				Если СокрЛП(СтрокаДокумента.ТоварКодТНВЭД) <> "--" Тогда
					МассивСтрок = Новый Массив();
					МассивСтрок.Добавить(СтрокаДокумента.ТоварНаименование);
					МассивСтрок.Добавить(НСтр("ru=', код ТН ВЭД'"));
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(СокрЛП(СтрокаДокумента.ТоварКодТНВЭД));
					СтрокаДокумента.ТоварНаименование = СтрСоединить(МассивСтрок);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КоличествоОснований > 1 Тогда
			ТаблицаДокумента.ЗаполнитьЗначения(1, "НомерСтроки,НомерТабЧасти");
		КонецЕсли;
		
		КолонкиГруппировок = ""
			+ "Товар,"
			+ "ТоварКод,"
			+ "ТоварКодТНВЭД,"
			+ "ТоварНаименование,"
			+ "СтранаПроисхождения,"
			+ "ПредставлениеСтраны,"
			+ "СтранаПроисхожденияКод,"
			+ "НомерГТД,"
			+ "ПредставлениеГТД,"
			+ "РегистрационныйНомерТД,"
			+ "ЕдиницаИзмерения,"
			+ "ЕдиницаИзмеренияКод,"
			+ "ЕдиницаИзмеренияНаименование,"
			+ "Цена,"
			+ "СтавкаНДС,"
			+ "КонтрагентСводныйСФ,"
			+ "Акциз,"
			+ "НомерСтроки,"
			+ "НомерТабЧасти";
		
		КолонкиСуммирования = ""
			+ "Количество,"
			+ "Всего,"
			+ "Стоимость,"
			+ "СуммаНДС,"
			+ "ВсегоРуб,"
			+ "НДСРуб,"
			+ "СуммаБезНДСРуб";
		
		ТаблицаДокумента.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
		ДанныеШапки = ПодготовитьДанныеШапкиСчетаФактуры1137(ВыборкаСФ, Реквизиты, ПлатежноРасчетныеДокументы, ДополнитьДаннымиУПД, ФормированиеЭД);
		
		СчетФактура                    = ТаблицаСчетовФактур.Добавить();
		СчетФактура.Дата               = ВыборкаСФ.Дата;
		СчетФактура.СчетФактура        = ВыборкаСФ.СчетФактура;
		СчетФактура.ВидСчетаФактуры    = ВыборкаСФ.ВидСчетаФактуры;
		СчетФактура.СчетФактураБезНДС  = ВыборкаСФ.СчетФактураБезНДС;
		СчетФактура.ДанныеШапки        = ДанныеШапки;
		СчетФактура.ТаблицаДокумента   = ТаблицаДокумента;
		СчетФактура.ШтрихкодыУпаковок  = ШтрихкодыУпаковок;
		СчетФактура.ДокументыОснования = ДокументыОснования;
		СчетФактура.Ссылка             = ВыборкаСФ.СчетФактура;
		
	КонецЦикла;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

Функция ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(МассивОбъектов, ТекстЗапросаПоСчетамФактурам, ДополнитьДаннымиУПД = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления1137", УчетНДСБП.ПолучитьДатуНачалаДействияПостановления1137());
	Запрос.Текст = ТекстЗапросаПоСчетамФактурам;
	Результаты   = Запрос.ВыполнитьПакет();
	
	ВыборкаСФ = Результаты[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетФактура");
	
	ТаблицаСчетовФактур = НовыйТаблицаСчетовФактур();
	
	Пока ВыборкаСФ.Следующий() Цикл
		
		ШтрихкодыУпаковок = Неопределено;
		ТаблицаДокумента = Неопределено;
		ДокументыОснования = Новый Массив;
		ВыборкаПоОснованиям = ВыборкаСФ.Выбрать();
		Пока ВыборкаПоОснованиям.СледующийПоЗначениюПоля("ДокументОснование") Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованиям.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДополнитьДаннымиУПД И ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
				 И ТипЗнч(ВыборкаПоОснованиям.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				 Продолжить;
			КонецЕсли; 
			
			ДокументыОснования.Добавить(ВыборкаПоОснованиям.ДокументОснование);
			ПараметрыОснования = ПодготовитьДанныеДляПечатиКорректировочныхСчетовФактур(
				ВыборкаПоОснованиям.ДокументОснование, ВыборкаСФ.СчетФактура, ВыборкаСФ.ВидСчетаФактуры, Истина);
				
			Если ПараметрыОснования.Реквизиты = Неопределено ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
				Продолжить;
			Иначе
				Реквизиты = ПараметрыОснования.Реквизиты[0];
			КонецЕсли; 

			Если ТаблицаДокумента = Неопределено Тогда
				ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
			Иначе
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ПараметрыОснования.ТаблицаДокумента, ТаблицаДокумента);
			КонецЕсли;
			
			Если ВыборкаПоОснованиям.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
				// Основание у счета-фактуры одно
				Прервать;
			КонецЕсли;
			
			//ГосИС
			Если ПараметрыОснования.Свойство("ШтрихкодыУпаковок") Тогда
				Если ШтрихкодыУпаковок = Неопределено Тогда
					ШтрихкодыУпаковок = ПараметрыОснования.ШтрихкодыУпаковок;
				Иначе
					ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ПараметрыОснования.ШтрихкодыУпаковок, ШтрихкодыУпаковок);
				КонецЕсли;
			КонецЕсли;
			//Конец ГосИС
			
		КонецЦикла;
		
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
			И ВыборкаСФ.ДатаИсходногоДокумента >= Дата(2016, 07, 01)
			И ВыборкаСФ.Дата < Дата(2017, 10, 01) Тогда
			Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
				Если СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И СокрЛП(СтрокаДокумента.ТоварКодТНВЭД) <> "--" Тогда
					МассивСтрок = Новый Массив();
					МассивСтрок.Добавить(СтрокаДокумента.НаименованиеНоменклатуры);
					МассивСтрок.Добавить(НСтр("ru=', код ТН ВЭД'"));
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(СокрЛП(СтрокаДокумента.ТоварКодТНВЭД));
					СтрокаДокумента.НаименованиеНоменклатуры = СтрСоединить(МассивСтрок);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КолонкиГруппировок = ""
		+"Товар,"
		+"ТоварКод,"
		+"ТоварКодТНВЭДДоИзменения,"
		+"ТоварКодТНВЭД,"
		+"НаименованиеНоменклатуры,"
		+"НаименованиеЕдиницыИзмерения,"
		+"ЕдиницаИзмеренияКод,"
		+"ЕдиницаИзмеренияНаименование,"
		+"ЦенаДоИзменения,"
		+"ЦенаПослеИзменения,"
		+"СтавкаНДС,"
		+"СтавкаНДСДоИзменения,"
		+"СтавкаНДСПослеИзменения,"
		+"Акциз";
		
		КолонкиСуммирования = ""
		+"СуммаНДСДоИзменения,"
		+"СуммаНДСПослеИзменения,"
		+"СтоимостьСНДСДоИзменения,"
		+"СтоимостьСНДСПослеИзменения,"
		+"РазницаБезНДСУвеличение,"
		+"РазницаБезНДСУменьшение,"
		+"РазницаНДСУвеличение,"
		+"РазницаНДСУменьшение,"
		+"РазницаСНДСУвеличение,"
		+"РазницаСНДСУменьшение,"
		+"СтоимостьБезНДСДоИзменения,"
		+"СтоимостьБезНДСПослеИзменения,"
		+"КоличествоДоИзменения,"
		+"КоличествоПослеИзменения";
		
		ТаблицаДокумента.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		ТаблицаДокумента.Колонки.Добавить("НомерСтроки");
			
		СчетФактура = ТаблицаСчетовФактур.Добавить();
		СчетФактура.СчетФактура = ВыборкаСФ.СчетФактура;
		СчетФактура.ВидСчетаФактуры = ВыборкаСФ.ВидСчетаФактуры;
		СчетФактура.СчетФактураБезНДС = ВыборкаСФ.СчетФактураБезНДС;
		СчетФактура.ДанныеШапки = ПодготовитьДанныеШапкиКорректировочногоСчетаФактуры1137(ВыборкаСФ, Реквизиты, ДополнитьДаннымиУПД);
		СчетФактура.ТаблицаДокумента = ТаблицаДокумента;
		СчетФактура.ДокументыОснования = ДокументыОснования;
		СчетФактура.Ссылка             = ВыборкаСФ.СчетФактура;
		СчетФактура.ШтрихкодыУпаковок  = ШтрихкодыУпаковок;
		
		Если ДополнитьДаннымиУПД Тогда
			РеквизитыПередаточныхДокументов = "";
			Для каждого Основание Из ДокументыОснования Цикл
				Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					ИсправляемыйДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Сделка");
				Иначе
					ИсправляемыйДокументРеализации = 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ИсправляемыйДокументРеализации");
				КонецЕсли;
				
				СсылкаНаСчетФактуру = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ИсправляемыйДокументРеализации);
				СсылкаНаСчетФактуру = ?(ЗначениеЗаполнено(СсылкаНаСчетФактуру), СсылкаНаСчетФактуру, ИсправляемыйДокументРеализации);
				РеквизитыПередаточныхДокументов = ?(РеквизитыПередаточныхДокументов = "", РеквизитыПередаточныхДокументов,РеквизитыПередаточныхДокументов + ", ") 
				+ "Универсальный передаточный документ " + НалоговыйУчетУСН.РеквизитыПервичногоДокумента(СсылкаНаСчетФактуру);
			КонецЦикла;
			СчетФактура.ДанныеШапки.Вставить("РеквизитыПередаточныхДокументов", РеквизитыПередаточныхДокументов);			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

Процедура ПечатьКомплектаСчетовФактур(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода = Неопределено) Экспорт

	ИсходнаяСтрокаКоллекции = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КоллекцияПечатныхФорм.Найти("СчетФактураКомплект", "ИмяМакета"));
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиСчетовФактур(МассивОбъектов);
	
	Для каждого ДокументБезСчетаФактуры Из НастройкиПечати.ДокументыБезСчетовФактур Цикл
		
		ТекстСообщения = НСтр("ru='По документу %1 счет-фактура не выписан.'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
	СоответствиеОбъектовПечати = Новый ТаблицаЗначений;
	СоответствиеОбъектовПечати.Колонки.Добавить("ДокументРеализации");
	СоответствиеОбъектовПечати.Колонки.Добавить("СчетФактура");
	
	// Для хранения счетов фактур по макетам печати, определим соответствие, в котором ключом будет имя макета,
	// а значением - массив соответствующих счетов - фактур
	МакетыСчетовФактур = Новый Соответствие;
	
	ЕстьДокументыБезСчетаФактуры = Ложь;
	
	Если ПараметрыВывода = Неопределено Тогда
		ПараметрыВывода = Новый Структура;
	КонецЕсли; 
	
	Если НЕ ПараметрыВывода.Свойство("ДокументыКомплекта") Тогда
		ПараметрыВывода.Вставить("ДокументыКомплекта", Новый Соответствие);
	КонецЕсли; 
	
	Для Каждого ЭлементМассиваОбъектов Из МассивОбъектов Цикл
		
		ПараметрМассив = Новый Массив;
		ПараметрМассив.Добавить(ЭлементМассиваОбъектов);
		НастройкиПечатиПоДокументу = УчетНДСВызовСервера.ПолучитьНастройкиПечатиСчетовФактур(ПараметрМассив);
		
		СчетаФактурыПоДокументу = НастройкиПечатиПоДокументу.СчетаФактуры;
		
		СтрокаТаблицыСоответствия = СоответствиеОбъектовПечати.Добавить();
		СтрокаТаблицыСоответствия.ДокументРеализации = ЭлементМассиваОбъектов;
		Если СчетаФактурыПоДокументу.Количество() > 0 Тогда
			СтрокаТаблицыСоответствия.СчетФактура = СчетаФактурыПоДокументу[0];
		Иначе
			СтрокаТаблицыСоответствия.СчетФактура = Неопределено;
			ЕстьДокументыБезСчетаФактуры = Истина;
		КонецЕсли;
		
		ЭлементСоответствияМакетов = МакетыСчетовФактур.Получить(НастройкиПечатиПоДокументу.СписокМакетов);
		Если ЭлементСоответствияМакетов = Неопределено Тогда
			МакетыСчетовФактур.Вставить(НастройкиПечатиПоДокументу.СписокМакетов,НастройкиПечатиПоДокументу.СчетаФактуры);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлементСоответствияМакетов, НастройкиПечатиПоДокументу.СчетаФактуры, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектыПечатиСчетаФактуры = Новый СписокЗначений;
	Для Каждого ЭлементОбъектыПечати Из ОбъектыПечати Цикл
		СтрокаТаблицыСоответствия = СоответствиеОбъектовПечати.Найти(ЭлементОбъектыПечати.Значение, "ДокументРеализации");
		Если СтрокаТаблицыСоответствия <> Неопределено Тогда
			ОбъектыПечатиСчетаФактуры.Добавить(СтрокаТаблицыСоответствия.СчетФактура, ЭлементОбъектыПечати.Представление);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоЗначащихМакетов = МакетыСчетовФактур.Количество() - ?(ЕстьДокументыБезСчетаФактуры, 1, 0);
	
	Для Каждого МакетСчетаФактуры Из МакетыСчетовФактур Цикл
		
		ВыводитьМакет = Истина;
		МассивОбъектовПечатьСчетовФактур = МакетСчетаФактуры.Значение;
		
		СтрокаКоллекции = КоллекцияПечатныхФорм.Найти("СчетФактураКомплект", "ИмяМакета");
		Если СтрокаКоллекции = Неопределено Тогда
			СтрокаКоллекции = КоллекцияПечатныхФорм.Найти(МакетСчетаФактуры.Ключ, "ИмяМакета");
		КонецЕсли;
		Если СтрокаКоллекции = Неопределено Тогда
			СтрокаКоллекции = КоллекцияПечатныхФорм.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКоллекции,ИсходнаяСтрокаКоллекции);
		КонецЕсли;
		
		Если МакетСчетаФактуры.Ключ <> "" Тогда
			СтрокаКоллекции.ИмяМакета = МакетСчетаФактуры.Ключ;
			СтрокаКоллекции.ИмяВРЕГ = ВРЕГ(МакетСчетаФактуры.Ключ);
		КонецЕсли;
		
		Если МакетСчетаФактуры.Ключ = "СчетФактура" Тогда
			СинонимМакета = НСтр("ru = 'Счет-фактура'");
			ТабДокумент = УчетНДСБП.ПечатьСчетовФактур(МассивОбъектовПечатьСчетовФактур, ОбъектыПечатиСчетаФактуры,
				Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур(Ложь,,Ложь), ПараметрыПечати);
		ИначеЕсли МакетСчетаФактуры.Ключ = "СчетФактура1137" Тогда
			СинонимМакета = ?(КоличествоЗначащихМакетов > 1, НСтр("ru = 'Счет-фактура 1137'"), НСтр("ru = 'Счет-фактура'"));
			ТабДокумент = ПечатьСчетовФактур1137(МассивОбъектовПечатьСчетовФактур, ОбъектыПечатиСчетаФактуры,
				Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур(,,Ложь), ПараметрыПечати);
		ИначеЕсли МакетСчетаФактуры.Ключ = "СчетФактура981" Тогда
			СинонимМакета = ?(КоличествоЗначащихМакетов > 1, НСтр("ru = 'Счет-фактура 1137'"), НСтр("ru = 'Счет-фактура'"));
			ТабДокумент = ПечатьСчетовФактур981(МассивОбъектовПечатьСчетовФактур, ОбъектыПечатиСчетаФактуры,
				Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур(Истина,,Истина), ПараметрыПечати);
		// Ни по одному из документов не выписан счет-фактура
		ИначеЕсли КоличествоЗначащихМакетов = 0 Тогда
			СинонимМакета = НСтр("ru = 'Счет-фактура'");
			ТабДокумент = Новый ТабличныйДокумент;
			СтрокаКоллекции.ИмяМакета = "СчетФактура";
			СтрокаКоллекции.ИмяВРЕГ = ВРЕГ("СчетФактура");
		Иначе
			ВыводитьМакет = Ложь;
			КоллекцияПечатныхФорм.Удалить(СтрокаКоллекции);
			СтрокаКоллекции = Неопределено;
		КонецЕсли;
		
		Если ВыводитьМакет И СтрокаКоллекции <> Неопределено Тогда
			
			Для Каждого ЭлементОбъектыПечати Из ОбъектыПечатиСчетаФактуры Цикл
				СтрокиТаблицыСоответствия = СоответствиеОбъектовПечати.НайтиСтроки(Новый Структура("СчетФактура", ЭлементОбъектыПечати.Значение));
				Для Каждого СтрокаТаблицыСоответствия Из СтрокиТаблицыСоответствия Цикл
					Если ОбъектыПечати.НайтиПоЗначению(СтрокаТаблицыСоответствия.ДокументРеализации) = Неопределено Тогда
						ОбъектыПечати.Добавить(СтрокаТаблицыСоответствия.ДокументРеализации, ЭлементОбъектыПечати.Представление);
					КонецЕсли;
					
					Если ПараметрыВывода.ДокументыКомплекта[СтрокаТаблицыСоответствия.ДокументРеализации] = Неопределено Тогда
						ПараметрыВывода.ДокументыКомплекта.Вставить(СтрокаТаблицыСоответствия.ДокументРеализации, Новый Соответствие);
					КонецЕсли; 
					
					ПараметрыВывода.ДокументыКомплекта[СтрокаТаблицыСоответствия.ДокументРеализации].Вставить(СинонимМакета, СтрокаТаблицыСоответствия.СчетФактура);
				КонецЦикла;
			КонецЦикла;
			
			ИменаФайлов = Новый Соответствие;
			
			Шаблон = НСтр("ru = 'Счет-фактура №[Номер] от [Дата]'");
			ЗначенияРеквизитовДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектовПечатьСчетовФактур, "Номер, Дата, Ссылка");
			Для Каждого ЭлементМассива Из МассивОбъектовПечатьСчетовФактур Цикл
				ЗначенияРеквизитовДокумента = ЗначенияРеквизитовДокументов[ЭлементМассива];
				ПредставлениеДаты = Формат(ЗначенияРеквизитовДокумента.Дата, "ДЛФ=DD");
				ДлинаСтроки = СтрДлина(ПредставлениеДаты);
				ПредставлениеДаты = ?(Сред(ПредставлениеДаты, ДлинаСтроки) = ".", Лев(ПредставлениеДаты, ДлинаСтроки - 1), ПредставлениеДаты);
				ЗначенияРеквизитовДокумента.Дата = ПредставлениеДаты;
				ЗначенияРеквизитовДокумента.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЗначенияРеквизитовДокумента.Номер, Истина, Ложь);
				ИмяФайла = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ЗначенияРеквизитовДокументов[ЭлементМассива]);
				СтрокиТаблицыСоответствия = СоответствиеОбъектовПечати.НайтиСтроки(Новый Структура("СчетФактура", ЭлементМассива));
				Для Каждого СтрокаТаблицыСоответствия Из СтрокиТаблицыСоответствия Цикл
					ИменаФайлов.Вставить(СтрокаТаблицыСоответствия.ДокументРеализации, ИмяФайла);
				КонецЦикла;
			КонецЦикла;
			
			СтрокаКоллекции.ТабличныйДокумент = ТабДокумент;
			СтрокаКоллекции.СинонимМакета = СинонимМакета;
			СтрокаКоллекции.ИмяФайлаПечатнойФормы = ИменаФайлов;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ УНИВЕРСАЛЬНЫХ ПЕРЕДАТОЧНЫХ ДОКУМЕНТОВ

Функция ПечатьУниверсальныхПередаточныхДокументов(МассивОбъектов, ОбъектыПечати, ТекстЗапросаДокументам, ТолькоПередаточныйДокумент = Ложь, ТабДокумент = Неопределено, ПараметрыПечати) Экспорт
	
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	Иначе
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ТабДокумент.АвтоМасштаб        = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
	
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьУПД.ПФ_MXL_УниверсальныйПередаточныйДокумент");
	
	Возврат ТабличныйДокументУПД(
		Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаДокументам, ТолькоПередаточныйДокумент, ПараметрыПечати);
		
КонецФункции

Функция ПечатьУниверсальныхПередаточныхДокументов981(МассивОбъектов, ОбъектыПечати, ТекстЗапросаДокументам, ТолькоПередаточныйДокумент = Ложь, ТабДокумент = Неопределено, ПараметрыПечати) Экспорт
	
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	Иначе
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ТабДокумент.АвтоМасштаб        = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент_981";
	
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьУПД.ПФ_MXL_УниверсальныйПередаточныйДокумент981");
	
	Возврат ТабличныйДокументУПД(
		Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаДокументам, ТолькоПередаточныйДокумент, ПараметрыПечати);
		
КонецФункции

Функция ПолучитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(МассивОбъектов, ТекстЗапросаДокументам, ФормированиеЭД = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаДокументам;
	
	ТаблицаСчетовФактур = НовыйТаблицаСчетовФактур();
	
	ДанныеСчетаФактуры = Новый Структура("СчетФактура, ВидСчетаФактуры, Контрагент, ДоговорКонтрагента, ИспользуетсяПостановлениеНДС1137, НомерСтроки");
	ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137 = Истина;
	
	ВыборкаПоОснованиям = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоОснованиям.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованиям.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументыОснования = Новый Массив;
		ДокументыОснования.Добавить(ВыборкаПоОснованиям.ДокументОснование);
		
		ЗаполнитьЗначенияСвойств(ДанныеСчетаФактуры, ВыборкаПоОснованиям);
		ПараметрыОснования = ПодготовитьДанныеДляПечатиУниверсальныхПередаточныхДокументов(ВыборкаПоОснованиям.ДокументОснование, ДанныеСчетаФактуры, ФормированиеЭД);
		
		Если ПараметрыОснования.Реквизиты = Неопределено ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
		
		ТаблицаДокумента.Колонки.СуммаБезНДС.Имя = "Стоимость";
		
		ДанныеШапки = ПодготовитьДанныеШапкиУниверсальногоПередаточногоДокумента(ВыборкаПоОснованиям, ПараметрыОснования.Реквизиты[0], ФормированиеЭД);
		
		СчетФактура = ТаблицаСчетовФактур.Добавить();
		СчетФактура.Дата               = ВыборкаПоОснованиям.Дата;
		СчетФактура.СчетФактура        = ВыборкаПоОснованиям.СчетФактура;
		СчетФактура.ВидСчетаФактуры    = ВыборкаПоОснованиям.ВидСчетаФактуры;
		СчетФактура.СчетФактураБезНДС  = ВыборкаПоОснованиям.СчетФактураБезНДС;
		СчетФактура.ДанныеШапки        = ДанныеШапки;
		СчетФактура.ТаблицаДокумента   = ТаблицаДокумента;
		СчетФактура.ДокументыОснования = ДокументыОснования;
		СчетФактура.Ссылка             = ВыборкаПоОснованиям.ДокументОснование;
		СчетФактура.НомерСтроки        = ВыборкаПоОснованиям.НомерСтроки;
		Если ПараметрыОснования.Свойство("ШтрихкодыУпаковок") Тогда
			СчетФактура.ШтрихкодыУпаковок = ПараметрыОснования.ШтрихкодыУпаковок;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

Функция ПодготовитьДанныеДляПечатиУниверсальныхПередаточныхДокументов(ДокументОснование, ДанныеСчетаФактуры, ФормированиеЭД = Ложь)
	
	ТекстПустойПоказатель = "--";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		ДанныеДляПечати = Документы.ПередачаТоваров.ПодготовитьДанныеДляПечатиУниверсальныхПередаточныхДокументов(ДокументОснование);
	Иначе
		ДанныеДляПечати = ПодготовитьДанныеДляПечатиСчетовФактур(ДокументОснование, ДанныеСчетаФактуры);
	КонецЕсли;
	
	// Поля, которые в УПД со статусом 2 должны быть пустыми,
	// если не производится получение данных для формирования электронного документа
	Если Не ФормированиеЭД Тогда
	
		ПустыеПоляУПД = Новый Структура;
		ПустыеПоляУПД.Вставить("Акциз",                  ТекстПустойПоказатель);
		ПустыеПоляУПД.Вставить("СтавкаНДС",              Перечисления.СтавкиНДС.ПустаяСсылка());
		ПустыеПоляУПД.Вставить("НомерГТД",               Справочники.НомераГТД.ПустаяСсылка());
		ПустыеПоляУПД.Вставить("ПредставлениеГТД",       ТекстПустойПоказатель);
		ПустыеПоляУПД.Вставить("СтранаПроисхождения",    Справочники.СтраныМира.ПустаяСсылка());
		ПустыеПоляУПД.Вставить("СтранаПроисхожденияКод", ТекстПустойПоказатель);
		ПустыеПоляУПД.Вставить("ПредставлениеСтраны",    ТекстПустойПоказатель);
		ПустыеПоляУПД.Вставить("РегистрационныйНомерТД", ТекстПустойПоказатель);
		
	
		Если ДанныеДляПечати.ТаблицаДокумента <> Неопределено Тогда
			Для Каждого СтрокаДокумента Из ДанныеДляПечати.ТаблицаДокумента Цикл
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, ПустыеПоляУПД);
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПодготовитьДанныеШапкиУниверсальногоПередаточногоДокумента(ВыборкаСФ, Реквизиты, ФормированиеЭД = Ложь) 

	Возврат ПодготовитьДанныеШапкиСчетаФактуры1137(ВыборкаСФ, Реквизиты, Неопределено, Истина, ФормированиеЭД);

КонецФункции

Функция ПечатьКомплектаУПД(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати, ИменаФайлов, ПараметрыПечати, ПараметрыВывода = Неопределено) Экспорт

	ИсходнаяСтрокаКоллекции = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КоллекцияПечатныхФорм.Найти("УниверсальныйПередаточныйДокументКомплект", "ИмяМакета"));
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхПередаточныхДокументов(МассивОбъектов);
	
	Если ПараметрыВывода = Неопределено Тогда
		ПараметрыВывода = Новый Структура;
	КонецЕсли; 
	
	Если НЕ ПараметрыВывода.Свойство("ДокументыКомплекта") Тогда
		ПараметрыВывода.Вставить("ДокументыКомплекта", Новый Соответствие);
	КонецЕсли; 
	
	Для каждого ДокументБезСчетаФактуры Из НастройкиПечати.ДокументыБезСчетовФактур Цикл
		
		Если НастройкиПечати.ДокументыСчетФактураНеТребуются.Найти(ДокументБезСчетаФактуры) = Неопределено Тогда
			
			Если ТипЗнч(ДокументБезСчетаФактуры) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
				ТекстСообщения = НСтр("ru = 'По документу %1 счета-фактуры не выписаны'");
			Иначе
				ТекстСообщения = НСтр("ru = 'По документу %1 счет-фактура не выписан'");
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеОбъектовПечати = Новый ТаблицаЗначений;
	СоответствиеОбъектовПечати.Колонки.Добавить("ДокументРеализации");
	СоответствиеОбъектовПечати.Колонки.Добавить("СчетФактура");
	
	МакетыУПД = Новый Соответствие;
	
	Для Каждого ЭлементМассиваОбъектов Из МассивОбъектов Цикл
		
		ПараметрМассив = Новый Массив;
		ПараметрМассив.Добавить(ЭлементМассиваОбъектов);
		НастройкиПечатиПоДокументу = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхПередаточныхДокументов(ПараметрМассив);
		УПДПоДокументу = НастройкиПечатиПоДокументу.УниверсальныеПередаточныеДокументы;
		
		СтрокаТаблицыСоответствия = СоответствиеОбъектовПечати.Добавить();
		СтрокаТаблицыСоответствия.ДокументРеализации = ЭлементМассиваОбъектов;
		Если УПДПоДокументу.Количество() > 0 Тогда
			СтрокаТаблицыСоответствия.СчетФактура = УПДПоДокументу[0];
		Иначе
			СтрокаТаблицыСоответствия.СчетФактура = Неопределено;
		КонецЕсли;
		
		ЭлементСоответствияМакетов = МакетыУПД.Получить(НастройкиПечатиПоДокументу.СписокМакетов);
		Если ЭлементСоответствияМакетов = Неопределено Тогда
			МакетыУПД.Вставить(НастройкиПечатиПоДокументу.СписокМакетов,НастройкиПечатиПоДокументу.УниверсальныеПередаточныеДокументы);
		Иначе
			Для Каждого ЭлементМассиваУПД Из НастройкиПечатиПоДокументу.УниверсальныеПередаточныеДокументы Цикл
				ЭлементСоответствияМакетов.Добавить(ЭлементМассиваУПД);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектыПечатиУПД = Новый СписокЗначений;
	Для Каждого ЭлементОбъектовПечати Из ОбъектыПечати Цикл
		СтрокаТаблицыСоответствия = СоответствиеОбъектовПечати.Найти(ЭлементОбъектовПечати.Значение, "ДокументРеализации");
		Если СтрокаТаблицыСоответствия <> Неопределено Тогда
			ОбъектыПечатиУПД.Добавить(СтрокаТаблицыСоответствия.СчетФактура, ЭлементОбъектовПечати.Представление);
		КонецЕсли;
	КонецЦикла;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Для Каждого МакетУПД Из МакетыУПД Цикл
		
		МассивОбъектовПечатьУПД = МакетУПД.Значение;
		
		СтрокаКоллекции = КоллекцияПечатныхФорм.Найти("УниверсальныйПередаточныйДокументКомплект", "ИмяМакета");
		Если СтрокаКоллекции = Неопределено Тогда
			СтрокаКоллекции = КоллекцияПечатныхФорм.Найти(МакетУПД.Ключ, "ИмяМакета");
		КонецЕсли;
		Если СтрокаКоллекции = Неопределено Тогда
			СтрокаКоллекции = КоллекцияПечатныхФорм.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКоллекции,ИсходнаяСтрокаКоллекции);
		КонецЕсли;
		
		Если МакетУПД.Ключ <> "" Тогда
			СтрокаКоллекции.ИмяМакета = МакетУПД.Ключ;
			СтрокаКоллекции.ИмяВРЕГ = ВРЕГ(МакетУПД.Ключ);
		КонецЕсли;
		
		ТабДокумент = Новый ТабличныйДокумент;
		Если МакетУПД.Ключ = "УПДСтатус1" Тогда
			ТабДокумент = ПечатьУниверсальныхПередаточныхДокументов(МассивОбъектовПечатьУПД, ОбъектыПечатиУПД, 
				Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур(Истина, Истина, Ложь),, ТабДокумент, ПараметрыПечати);
		ИначеЕсли МакетУПД.Ключ = "УПДСтатус1_981" Тогда
			ТабДокумент = ПечатьУниверсальныхПередаточныхДокументов981(МассивОбъектовПечатьУПД, ОбъектыПечатиУПД, 
				Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур(Истина, Истина, Истина),, ТабДокумент, ПараметрыПечати);
		ИначеЕсли МакетУПД.Ключ = "УПДСтатус2" Тогда
			ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов = "";
			Для каждого Объект Из МассивОбъектовПечатьУПД Цикл
				Если ТипЗнч(Объект) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
					ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов = 
						Документы[Объект.Метаданные().Имя].ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов(Ложь);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ПустаяСтрока(ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов) Тогда
				ТабДокумент = ПечатьУниверсальныхПередаточныхДокументов(МассивОбъектовПечатьУПД, ОбъектыПечатиУПД, 
					ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов, Истина, ТабДокумент, ПараметрыПечати);
			КонецЕсли;
		ИначеЕсли МакетУПД.Ключ = "УПДСтатус2_981" Тогда
			ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов = "";
			Для каждого Объект Из МассивОбъектовПечатьУПД Цикл
				Если ТипЗнч(Объект) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
					ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов = 
						Документы[Объект.Метаданные().Имя].ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов(Истина);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ПустаяСтрока(ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов) Тогда
				ТабДокумент = ПечатьУниверсальныхПередаточныхДокументов981(МассивОбъектовПечатьУПД, ОбъектыПечатиУПД, 
					ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов, Истина, ТабДокумент, ПараметрыПечати);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ЭлементОбъектыПечати Из ОбъектыПечатиУПД Цикл
			СтрокиТаблицыСоответствия = СоответствиеОбъектовПечати.НайтиСтроки(Новый Структура("СчетФактура", ЭлементОбъектыПечати.Значение));
			Для Каждого СтрокаТаблицыСоответствия Из СтрокиТаблицыСоответствия Цикл
				Если ОбъектыПечати.НайтиПоЗначению(СтрокаТаблицыСоответствия.ДокументРеализации) = Неопределено Тогда
					ОбъектыПечати.Добавить(СтрокаТаблицыСоответствия.ДокументРеализации, ЭлементОбъектыПечати.Представление);
				КонецЕсли;
				
				Если ПараметрыВывода.ДокументыКомплекта[СтрокаТаблицыСоответствия.ДокументРеализации] = Неопределено Тогда
					ПараметрыВывода.ДокументыКомплекта.Вставить(СтрокаТаблицыСоответствия.ДокументРеализации, Новый Соответствие);
				КонецЕсли; 
				
				ПараметрыВывода.ДокументыКомплекта[СтрокаТаблицыСоответствия.ДокументРеализации].Вставить(НСтр("ru = 'Универсальный передаточный документ'"), СтрокаТаблицыСоответствия.СчетФактура);
			КонецЦикла;
		КонецЦикла;
		
		ИменаФайлов = Новый Соответствие;
		
		Шаблон = НСтр("ru = 'УПД №[Номер] от [Дата]'");
		ЗначенияРеквизитовДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектовПечатьУПД, "Номер, Дата, Ссылка");
		Для Каждого ЭлементМассива Из МассивОбъектовПечатьУПД Цикл
			ЗначенияРеквизитовДокумента = ЗначенияРеквизитовДокументов[ЭлементМассива];
			ПредставлениеДаты = Формат(ЗначенияРеквизитовДокумента.Дата, "ДЛФ=DD");
			ДлинаСтроки = СтрДлина(ПредставлениеДаты);
			ПредставлениеДаты = ?(Сред(ПредставлениеДаты, ДлинаСтроки) = ".", Лев(ПредставлениеДаты, ДлинаСтроки - 1), ПредставлениеДаты);
			ЗначенияРеквизитовДокумента.Дата = ПредставлениеДаты;
			ЗначенияРеквизитовДокумента.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЗначенияРеквизитовДокумента.Номер, Истина, Ложь);
			ИмяФайла = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ЗначенияРеквизитовДокументов[ЭлементМассива]);
			СтрокиТаблицыСоответствия = СоответствиеОбъектовПечати.НайтиСтроки(Новый Структура("СчетФактура", ЭлементМассива));
			Для Каждого СтрокаТаблицыСоответствия Из СтрокиТаблицыСоответствия Цикл
				ИменаФайлов.Вставить(СтрокаТаблицыСоответствия.ДокументРеализации, ИмяФайла);
			КонецЦикла;
		КонецЦикла;
		
		СтрокаКоллекции.ТабличныйДокумент = ТабДокумент;
		СтрокаКоллекции.СинонимМакета = НСтр("ru = 'Универсальный передаточный документ'");
		СтрокаКоллекции.ИмяФайлаПечатнойФормы = ИменаФайлов;
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

Функция ТабличныйДокументУПД(Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаДокументам, ТолькоПередаточныйДокумент, ПараметрыПечати)
	
	// Исключим из массива документы на чтение которых у пользователя нет прав
	УправлениеДоступомБП.УдалитьНедоступныеЭлементыИзМассива(МассивОбъектов);
	
	УстановитьПривилегированныйРежим(Истина);
	
 	Если МассивОбъектов.Количество() = 0 Тогда
		ДанныеУниверсальныхПередаточныхДокументов = НовыйТаблицаСчетовФактур();
	ИначеЕсли ТолькоПередаточныйДокумент Тогда
		ДанныеУниверсальныхПередаточныхДокументов = ПолучитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(
			МассивОбъектов, ТекстЗапросаДокументам);
	Иначе
		ДанныеУниверсальныхПередаточныхДокументов = ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивОбъектов, ТекстЗапросаДокументам, Истина);
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	
	СтрокиПечати = Новый СписокЗначений;
	
	Для Каждого ВыборкаУПД ИЗ ДанныеУниверсальныхПередаточныхДокументов Цикл
		
		ОбъектыПечати.Добавить(ВыборкаУПД.Ссылка);
		
		Если ЗначениеЗаполнено(ВыборкаУПД.Дата)
		   И ВыборкаУПД.Дата < '20130101'
		   И ТипЗнч(ВыборкаУПД.СчетФактура) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДокумента = ВыборкаУПД.ТаблицаДокумента;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаУПД, Истина);
		
		// Вывод подвала накладной
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
		ОбластьМакета.Параметры.Заполнить(ВыборкаУПД.ДанныеШапки);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабДокумент, НомерСтрокиНачало, СтрокиПечати, ВыборкаУПД.Ссылка);
			
		ЭлементСписка               = ОбъектыПечати.НайтиПоЗначению(ВыборкаУПД.Ссылка);
		ЭлементСписка.Представление = СтрокиПечати[СтрокиПечати.Количество()-1].Представление;
			
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабДокумент, ВыборкаУПД, ОбъектыПечати, ПараметрыПечати);
			
	КонецЦикла;
	
	Если МассивОбъектов.Количество() = 1 И ПервыйДокумент Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для %1 универсальный передаточный документ не применяется'"), Строка(МассивОбъектов[0]));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ УНИВЕРСАЛЬНЫХ КОРРЕКТИРОВОЧНЫХ ДОКУМЕНТОВ

Функция ПечатьУниверсальныхКорректировочныхДокументов(МассивОбъектов, ОбъектыПечати, ТекстЗапросаДокументам, ТолькоПередаточныйДокумент = Ложь, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб        = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйКорректировочныйДокумент";
		
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьУКД.ПФ_MXL_УниверсальныйКорректировочныйДокумент");
	
	Возврат ТабличныйДокументУКД(
		Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаДокументам, ТолькоПередаточныйДокумент, ПараметрыПечати);
		
КонецФункции

Функция ПечатьУниверсальныхКорректировочныхДокументов981(МассивОбъектов, ОбъектыПечати, ТекстЗапросаДокументам, ТолькоПередаточныйДокумент = Ложь, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб        = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйКорректировочныйДокумент_981";
	
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьУКД.ПФ_MXL_УниверсальныйКорректировочныйДокумент981");
	
	Возврат ТабличныйДокументУКД(
		Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаДокументам, ТолькоПередаточныйДокумент, ПараметрыПечати);
	
КонецФункции

Функция ПолучитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(МассивОбъектов, ТекстЗапросаДокументам) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаДокументам;
	
	ТаблицаСчетовФактур = НовыйТаблицаСчетовФактур();
	
	ДанныеСчетаФактуры = Новый Структура("СчетФактура, ВидСчетаФактуры, Контрагент, ДоговорКонтрагента, ИспользуетсяПостановлениеНДС1137");
	ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137 = Истина;
	
	ВыборкаПоОснованиям = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоОснованиям.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованиям.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументыОснования = Новый Массив;
		ДокументыОснования.Добавить(ВыборкаПоОснованиям.ДокументОснование);
		
		ЗаполнитьЗначенияСвойств(ДанныеСчетаФактуры, ВыборкаПоОснованиям);
		ПараметрыОснования = ПодготовитьДанныеДляПечатиУниверсальныхКорректировочныхДокументов(ВыборкаПоОснованиям.ДокументОснование, ДанныеСчетаФактуры);
		
		Если ПараметрыОснования.Реквизиты = Неопределено ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
		
		ДанныеШапки = ПодготовитьДанныеШапкиУниверсальногоКорректировочногоДокумента(ВыборкаПоОснованиям, ПараметрыОснования.Реквизиты[0]);
		
		СчетФактура = ТаблицаСчетовФактур.Добавить();
		СчетФактура.Дата               = ВыборкаПоОснованиям.Дата;
		СчетФактура.СчетФактура        = ВыборкаПоОснованиям.СчетФактура;
		СчетФактура.ВидСчетаФактуры    = ВыборкаПоОснованиям.ВидСчетаФактуры;
		СчетФактура.СчетФактураБезНДС  = ВыборкаПоОснованиям.СчетФактураБезНДС;
		СчетФактура.ДанныеШапки        = ДанныеШапки;
		СчетФактура.ТаблицаДокумента   = ТаблицаДокумента;
		СчетФактура.ДокументыОснования = ДокументыОснования;
		СчетФактура.Ссылка             = ВыборкаПоОснованиям.ДокументОснование;
		Если ПараметрыОснования.Свойство("ШтрихкодыУпаковок") Тогда
			СчетФактура.ШтрихкодыУпаковок = ПараметрыОснования.ШтрихкодыУпаковок;
		КонецЕсли;
		
		СчетФактура.ДанныеШапки.Вставить("РеквизитыПередаточныхДокументов", "Универсальный передаточный документ "
			+ НалоговыйУчетУСН.РеквизитыПервичногоДокумента(ВыборкаПоОснованиям.ИсправляемыйДокументРеализации));
		
	КонецЦикла;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

Функция ПодготовитьДанныеДляПечатиУниверсальныхКорректировочныхДокументов(ДокументОснование, ДанныеСчетаФактуры)
	
	ТекстПустойПоказатель = "--";
	
	ДанныеДляПечати = ПодготовитьДанныеДляПечатиКорректировочныхСчетовФактур(ДокументОснование, ДанныеСчетаФактуры.СчетФактура, ДанныеСчетаФактуры.ВидСчетаФактуры, Истина);
		
	// Поля, которые в УПД со статусом 2 должны быть пустыми
	ПустыеПоляУКД = Новый Структура;
	ПустыеПоляУКД.Вставить("Акциз", ТекстПустойПоказатель);
	
	Если ДанныеДляПечати.ТаблицаДокумента <> Неопределено Тогда
		Для Каждого СтрокаДокумента Из ДанныеДляПечати.ТаблицаДокумента Цикл
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, ПустыеПоляУКД);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПодготовитьДанныеШапкиУниверсальногоКорректировочногоДокумента(ВыборкаСФ, Реквизиты) 

	Возврат ПодготовитьДанныеШапкиКорректировочногоСчетаФактуры1137(ВыборкаСФ, Реквизиты, Истина);

КонецФункции

Функция ТабличныйДокументУКД(Макет, МассивОбъектов, ОбъектыПечати, ТабДокумент, ТекстЗапросаДокументам, ТолькоПередаточныйДокумент, ПараметрыПечати)
	
	Если ТолькоПередаточныйДокумент Тогда
		ДанныеУниверсальныхКорректировочныхДокументов = ПолучитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(
			МассивОбъектов, ТекстЗапросаДокументам);
	Иначе
		ДанныеУниверсальныхКорректировочныхДокументов = ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(
			МассивОбъектов, ТекстЗапросаДокументам, Истина);
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ВыборкаУКД ИЗ ДанныеУниверсальныхКорректировочныхДокументов Цикл
		
		ТаблицаДокумента = ВыборкаУКД.ТаблицаДокумента;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаУКД, Истина);
		
		// Вывод подвала накладной
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
		ОбластьМакета.Параметры.Заполнить(ВыборкаУКД.ДанныеШапки);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаУКД.Ссылка);
			
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабДокумент, ВыборкаУКД, ОбъектыПечати, ПараметрыПечати);
		
	КонецЦикла;
	
	Если МассивОбъектов.Количество() = 1 И ПервыйДокумент Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для %1 универсальный корректировочный документ не применяется'"), Строка(МассивОбъектов[0]));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТИ ПО НДС

//Возвращает идентификатор макета для расшифровки показателей декларации по НДС.
// Для версии отчета ФормаОтчета2009Кв4.
Функция ПолучитьИдентификаторМакетаРасшифровки(Показатель, РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012)
	
	ИдентификаторМакета = "";
	Если УпрощенныйУчетНДС Тогда
		Если УчетНДС2012 Тогда
			// ВидКарты = "УчетСРегламентнымиДокументами";
			Если Показатель = "П000300001003" ИЛИ Показатель = "П000300001005" 
				ИЛИ Показатель = "П000300002003" ИЛИ Показатель = "П000300002005"
				ИЛИ Показатель = "П000300003003" ИЛИ Показатель = "П000300003005"
				ИЛИ Показатель = "П000300004003" ИЛИ Показатель = "П000300004005" Тогда
				//	1.1 - Начисления по реализации
				ИдентификаторМакета = "РасшифровкаНачислениеРеализация";
			ИначеЕсли Показатель = "П000300007003" ИЛИ Показатель = "П000300007005" Тогда
				//	1.2 - Начисления по авансам полученным
				ИдентификаторМакета = "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС"; 
			ИначеЕсли Показатель = "П000200006003" ИЛИ Показатель = "П000200008003" ИЛИ Показатель = "П000200009003" Тогда
				//	1.3 - Начисления при исполнении обязанностей налогового агента
				ИдентификаторМакета = "РасшифровкаНачислениеИсполнениеОНА";
			ИначеЕсли Показатель = "П000200006003" ИЛИ Показатель = "П000200008003" ИЛИ Показатель = "П000200009003" 
				ИЛИ Показатель = "П000300009005" ИЛИ Показатель = "П000300011005" Тогда
				//	1.4 - Восстановление (начисление) по ранее выданным авансам
				ИдентификаторМакета = "РасшифровкаНачислениеВосстановлениеСАвансовВыданныхУпрощенныйУчетНДС"; 
			ИначеЕсли Показатель = "П000300006003" ИЛИ Показатель = "П000300006005" Тогда
				//	1.5 - Начисления при выполнении СМР хоз. способом
				ИдентификаторМакета = "РасшифровкаНачислениеСМРХозСпособом";
			ИначеЕсли Показатель = "П000300013003" Тогда
				// Специальный набор для расшифровки строки 130 раздела 3 декларации НДС
				ИдентификаторМакета = "РасшифровкаСтроки130Декларации";
			ИначеЕсли Показатель = "П000300014003" 
				ИЛИ Показатель = "П000300016003" ИЛИ Показатель = "П000300018003" ИЛИ Показатель = "П000300019003" Тогда
				//	2.1 - Вычет по приобретенным ценностям
				ИдентификаторМакета = "РасшифровкаВычетПриобретенныеЦенности";
			ИначеЕсли Показатель = "П000300021003" Тогда
				//	2.2 - Вычет при исполнении обязанностей налогового агента
				ИдентификаторМакета = "РасшифровкаВычетИсполнениеОНА";
			ИначеЕсли Показатель = "П000300020003" Тогда
				//	2.3 - Вычет с авансов полученных (восстановление)
				ИдентификаторМакета = "РасшифровкаВычетСАвансовПолученныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300015003" Тогда
				//	2.4 - Вычет с авансов выданных
				ИдентификаторМакета = "РасшифровкаВычетАвансыВыданныеУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000310008001" ИЛИ Показатель = "П000310008002" ИЛИ Показатель = "П000310008003" ИЛИ Показатель = "П000310008004" Тогда
				//	X.X - Восстановление НДС по объектам недвижимости
				ИдентификаторМакета = "ВосстановлениеНДСпоОбъектамНедвижимости";
			КонецЕсли;
		Иначе
			// ВидКарты = "УпрощенныйУчетНДС";
			Если Показатель = "П000300001003" ИЛИ Показатель = "П000300001005" 
				ИЛИ Показатель = "П000300002003" ИЛИ Показатель = "П000300002005"
				ИЛИ Показатель = "П000300003003" ИЛИ Показатель = "П000300003005"
				ИЛИ Показатель = "П000300004003" ИЛИ Показатель = "П000300004005"
				Тогда
				//	1.1 - Начисления по реализации
				ИдентификаторМакета = "РасшифровкаНачислениеРеализацияУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300007003" ИЛИ Показатель = "П000300007005" Тогда
				//	1.2 - Начисления по авансам полученным
				ИдентификаторМакета = "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000200006003" ИЛИ Показатель = "П000200008003" ИЛИ Показатель = "П000200009003" 
				ИЛИ Показатель = "П000300009005" ИЛИ Показатель = "П000300011005" 
				Тогда
				//	1.3 - Восстановление (начисление) по ранее выданным авансам
				ИдентификаторМакета = "РасшифровкаНачислениеВосстановлениеСАвансовВыданныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300013003" Тогда
				// Специальный набор для расшифровки строки 130 раздела 3 декларации НДС
				ИдентификаторМакета = "РасшифровкаСтроки130Декларации";
			ИначеЕсли Показатель = "П000300014003" 
				ИЛИ Показатель = "П000300016003" ИЛИ Показатель = "П000300018003" ИЛИ Показатель = "П000300019003" Тогда
				//	2.1 - Вычет по приобретенным ценностям
				ИдентификаторМакета = "РасшифровкаВычетПриобретенныеЦенностиУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300015003" Тогда
				//	2.2 - Вычет с авансов выданных
				ИдентификаторМакета = "РасшифровкаВычетАвансыВыданныеУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300020003" Тогда
				//	2.3 - Вычет с авансов полученных (восстановление)
				ИдентификаторМакета = "РасшифровкаВычетСАвансовПолученныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000310008001" ИЛИ Показатель = "П000310008002" ИЛИ Показатель = "П000310008003" ИЛИ Показатель = "П000310008004" Тогда
				//	X.X - Восстановление НДС по объектам недвижимости
				ИдентификаторМакета = "ВосстановлениеНДСпоОбъектамНедвижимости";
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если НЕ РаздельныйУчетНДС Тогда
			// ВидКарты = "УчетСРегламентнымиДокументами";
			Если Показатель = "П000300001003" ИЛИ Показатель = "П000300001005" 
				ИЛИ Показатель = "П000300002003" ИЛИ Показатель = "П000300002005"
				ИЛИ Показатель = "П000300003003" ИЛИ Показатель = "П000300003005"
				ИЛИ Показатель = "П000300004003" ИЛИ Показатель = "П000300004005" Тогда
				//	1.1 - Начисления по реализации
				ИдентификаторМакета = "РасшифровкаНачислениеРеализация";
			ИначеЕсли Показатель = "П000300007003" ИЛИ Показатель = "П000300007005" Тогда
				//	1.2 - Начисления по авансам полученным
				ИдентификаторМакета = "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000200006003" ИЛИ Показатель = "П000200008003" ИЛИ Показатель = "П000200009003" Тогда
				//	1.3 - Начисления при исполнении обязанностей налогового агента
				ИдентификаторМакета = "РасшифровкаНачислениеИсполнениеОНА";
			ИначеЕсли Показатель = "П000300009005" ИЛИ Показатель = "П000300011005" Тогда
				//	1.4 - Восстановление (начисление) по ранее выданным авансам
				ИдентификаторМакета = "РасшифровкаНачислениеВосстановлениеСАвансовВыданныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300006003" ИЛИ Показатель = "П000300006005" Тогда
				//	1.5 - Начисления при выполнении СМР хоз. способом
				ИдентификаторМакета = "РасшифровкаНачислениеСМРХозСпособом";
			ИначеЕсли Показатель = "П000300013003" Тогда
				// Специальный набор для расшифровки строки 130 раздела 3 декларации НДС
				ИдентификаторМакета = "РасшифровкаСтроки130Декларации";
			ИначеЕсли Показатель = "П000300014003" 
				ИЛИ Показатель = "П000300016003" ИЛИ Показатель = "П000300018003" ИЛИ Показатель = "П000300019003" Тогда
				//	2.1 - Вычет по приобретенным ценностям
				ИдентификаторМакета = "РасшифровкаВычетПриобретенныеЦенности";
			ИначеЕсли Показатель = "П000300021003" Тогда
				//	2.2 - Вычет при исполнении обязанностей налогового агента
				ИдентификаторМакета = "РасшифровкаВычетИсполнениеОНА";
			ИначеЕсли Показатель = "П000300020003" Тогда
				//	2.3 - Вычет с авансов полученных (восстановление)
				ИдентификаторМакета = "РасшифровкаВычетСАвансовПолученныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300015003" Тогда
				//	2.4 - Вычет с авансов выданных
				ИдентификаторМакета = "РасшифровкаВычетАвансыВыданныеУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000310008001" ИЛИ Показатель = "П000310008002" ИЛИ Показатель = "П000310008003" ИЛИ Показатель = "П000310008004" Тогда
				//	X.X - Восстановление НДС по объектам недвижимости
				ИдентификаторМакета = "ВосстановлениеНДСпоОбъектамНедвижимости";
			КонецЕсли;
		Иначе
			// ВидКарты = "СложныйУчетНДС";
			Если Показатель = "П000300001003" ИЛИ Показатель = "П000300001005" 
				ИЛИ Показатель = "П000300002003" ИЛИ Показатель = "П000300002005"
				ИЛИ Показатель = "П000300003003" ИЛИ Показатель = "П000300003005"
				ИЛИ Показатель = "П000300004003" ИЛИ Показатель = "П000300004005"
				ИЛИ Показатель = "П000300008003" ИЛИ Показатель = "П000300008005" Тогда
				//	1.1 - Начисления по реализации
				ИдентификаторМакета = "РасшифровкаНачислениеРеализацияСложныйУчетНДС";
			ИначеЕсли Показатель = "П000300007003" ИЛИ Показатель = "П000300007005" Тогда
				//	1.2 - Начисления по авансам полученным
				ИдентификаторМакета = "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС";
				
			ИначеЕсли Показатель = "П000200006003" ИЛИ Показатель = "П000200008003" ИЛИ Показатель = "П000200009003" Тогда
				//	1.3 - Начисления при исполнении обязанностей налогового агента
				ИдентификаторМакета = "РасшифровкаНачислениеИсполнениеОНА";
			ИначеЕсли Показатель = "П000300009005" ИЛИ Показатель = "П000300011005" Тогда
				//	1.4 - Восстановление (начисление) по ранее выданным авансам
				ИдентификаторМакета = "РасшифровкаНачислениеВосстановлениеСАвансовВыданныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300006003" ИЛИ Показатель = "П000300006005" Тогда
				//	1.5 - Начисления при выполнении СМР хоз. способом
				ИдентификаторМакета = "РасшифровкаНачислениеСМРХозСпособом";
			ИначеЕсли Показатель = "П000400000102_1" 
				ИЛИ Показатель = "П000600000102_1" ИЛИ Показатель = "П000600000103_1" Тогда
				//	1.6 - Начисления по реализации по ставке 0%
				ИдентификаторМакета = "РасшифровкаНачислениеРеализация0";
			ИначеЕсли Показатель = "П000300013003" Тогда
				// Специальный набор для расшифровки строки 130 раздела 3 декларации НДС
				ИдентификаторМакета = "РасшифровкаСтроки130Декларации";
			ИначеЕсли Показатель = "П000300014003" 
				ИЛИ Показатель = "П000300016003" ИЛИ Показатель = "П000300018003" ИЛИ Показатель = "П000300019003" Тогда
				//	2.1 - Вычет по приобретенным ценностям
				ИдентификаторМакета = "РасшифровкаВычетПриобретенныеЦенности";
			ИначеЕсли Показатель = "П000300021003" Тогда
				//	2.2 - Вычет при исполнении обязанностей налогового агента
				ИдентификаторМакета = "РасшифровкаВычетИсполнениеОНА";
			ИначеЕсли Показатель = "П000300020003" Тогда
				//	2.3 - Вычет с авансов полученных (восстановление)
				ИдентификаторМакета = "РасшифровкаВычетСАвансовПолученныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300015003" Тогда
				//	2.4 - Вычет с авансов выданных
				ИдентификаторМакета = "РасшифровкаВычетАвансыВыданныеУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000400000103_1" ИЛИ Показатель = "П000600000104_1" Тогда
				//	2.5 - Вычет по приобретенным ценностям по ставке 0%
				ИдентификаторМакета = "РасшифровкаВычетПоПриобретеннымЦенностям0";
			ИначеЕсли Показатель = "П000310008001" ИЛИ Показатель = "П000310008002" ИЛИ Показатель = "П000310008003" ИЛИ Показатель = "П000310008004" Тогда
				//	X.X - Восстановление НДС по объектам недвижимости
				ИдентификаторМакета = "ВосстановлениеНДСпоОбъектамНедвижимости";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторМакета;
	  
КонецФункции	

// Создает список показателей декларации по НДС, которые будут автоматически заполняться.
// Для версии отчета ФормаОтчета2009Кв4.
Процедура ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2009Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200006003", Истина, Истина);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200009003", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300004003", Истина, Истина);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300008005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300009005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300011005", Истина, Истина);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300014003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300015003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300016003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300018003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300019003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300020003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300021003", Истина, Истина);			
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_01", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_02", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_03", Истина, Истина);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_04", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_05", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_06", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_07", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_08", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_09", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310003000", Истина, Истина);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310004000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310005000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310006000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008002", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008004", Истина, Истина);
	
КонецПроцедуры


Процедура ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры = Неопределено)
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры);
КонецПроцедуры

Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение)
		  
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение 	= ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения 		= ВидСравнения;
	ЭлементОтбора.ПравоеЗначение 	= ПравоеЗначение;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры  

// Заполняет контейнер с показателями декларации по НДС для версии отчета ФормаОтчета2009Кв4.
Процедура ЗаполнитьОтчетНДСФормаОтчета2009Кв4(ПараметрыОтчета, Контейнер,СохранятьТаблицуРасшифровок = Истина) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	///////////////////////////////////////////////////////////////////////
	// ПОДГОТОВКА ОБЩИХ ДАННЫХ
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	УчетНДС2012 = ПараметрыОтчета.мДатаКонцаПериодаОтчета >= '20120101';
	
	Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") Тогда
		СписокОрганизаций = ПараметрыОтчета.ГруппаОрганизаций; 
	Иначе
		СписокОрганизаций = Новый СписокЗначений();
	КонецЕсли;
		
	СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("СУчетомКорректировок", НЕ ПараметрыОтчета.ВидДокумента = 0);
	Запрос.УстановитьПараметр("ВесьОборотЗаПериод", 
		?(ПараметрыОтчета.Свойство("ВесьОборотЗаПериод"),ПараметрыОтчета.ВесьОборотЗаПериод, Ложь));
	Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", 
		?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи), ПараметрыОтчета.ДатаПодписи, КонецДня(ПараметрыОтчета.ДатаПодписи)));
	
	// События	
	СобытиеРеализация = Новый СписокЗначений;
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеРеализация", СобытиеРеализация);
	
	СобытиеПолученАванс = Новый СписокЗначений;
	СобытиеПолученАванс.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	Запрос.УстановитьПараметр("СобытиеПолученАванс", СобытиеПолученАванс);
	
	СобытиеНачисленНДС = Новый СписокЗначений;
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеНачисленНДС", СобытиеНачисленНДС);
	
	СобытиеВосстановлениеНДС = Новый СписокЗначений;
	СобытиеВосстановлениеНДС.Добавить(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
	Запрос.УстановитьПараметр("СобытиеВосстановлениеНДС", СобытиеВосстановлениеНДС);
	
	СобытиеПредъявленКВычетуНДС = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ВосстановленНДС);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС", СобытиеПредъявленКВычетуНДС);
	
	СобытиеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПодтвержденаСтавка0", СобытиеПодтвержденаСтавка0);
	
	СобытиеПредъявленКВычетуНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС0", СобытиеПредъявленКВычетуНДС0);
	
	СобытиеНеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеНеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНеПодтвержденаСтавка0", СобытиеНеПодтвержденаСтавка0);

	СобытиеПредъявленКВычетуНеПодтвержденНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНеПодтвержденНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНеПодтвержденНДС0", СобытиеПредъявленКВычетуНеПодтвержденНДС0);
	
	// Виды ценностей
	ВидыЦенностейНеРеализация = Новый Массив;
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВидыЦенностейНеРеализация,
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	
	ВидыЦенностейСтр010_040 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейНеРеализация.Найти(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр010_040.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр010_040", ВидыЦенностейСтр010_040);
	
	ВидыЦенностейСтр060 = Новый СписокЗначений;
	ВидыЦенностейСтр060.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр060", ВидыЦенностейСтр060);
	
	ВидыЦенностейСтр070 = Новый СписокЗначений;
	ВидыЦенностейСтр070.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр070", ВидыЦенностейСтр070);
	
	ВидыЦенностейСтр080 =  Новый СписокЗначений;
	ВидыЦенностейСтр080.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр080", ВидыЦенностейСтр080);
	
	ВидыЦенностейСтр110 =  Новый СписокЗначений;
	ВидыЦенностейСтр110.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр110", ВидыЦенностейСтр110);
	
	ВидыЦенностейСтр140 =  Новый СписокЗначений;
	ВидыЦенностейСтр140.Добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр140", ВидыЦенностейСтр140);
	
	ВидыЦенностейСтр150 =  Новый СписокЗначений;
	ВидыЦенностейСтр150.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр150", ВидыЦенностейСтр150);
	
	ВидыЦенностейСтр160 =  Новый СписокЗначений;
	ВидыЦенностейСтр160.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр160", ВидыЦенностейСтр160);
	
	ВидыЦенностейСтр180 =  Новый СписокЗначений;
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр180", ВидыЦенностейСтр180);
	
	ВидыЦенностейСтр190 =  Новый СписокЗначений;
	ВидыЦенностейСтр190.Добавить(Перечисления.ВидыЦенностей.ТаможенныйСоюз);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр190", ВидыЦенностейСтр190);
	
	ВидыЦенностейСтр200 =  Новый СписокЗначений;
	ВидыЦенностейСтр200.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр200", ВидыЦенностейСтр200);
	
	ВидыЦенностейСтр210 = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВидыЦенностейСтр210,
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	Запрос.УстановитьПараметр("ВидыЦенностейСтр210", ВидыЦенностейСтр210);
	
	ВидыЦенностейСтр130 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейСтр150.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр160.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр180.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр190.НайтиПоЗначению(ВидЦенности) = Неопределено
			И ВидыЦенностейСтр200.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр210.Найти(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр130.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр130", ВидыЦенностейСтр130);
	
	ВидыЦенностей_1011703 =  Новый СписокЗначений;
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_1011711", Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011703", ВидыЦенностей_1011703);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011707", Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	Запрос.УстановитьПараметр("ВидыЦенностейНА", ВидыЦенностейСтр210);
	
	// Ставки НДС
	Запрос.УстановитьПараметр("СтавкаНДС10", 	 Перечисления.СтавкиНДС.НДС10);
	Запрос.УстановитьПараметр("СтавкаНДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	Запрос.УстановитьПараметр("СтавкаНДС18",	 Перечисления.СтавкиНДС.НДС18);
	Запрос.УстановитьПараметр("СтавкаНДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Событие,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажОбороты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И НЕ ЗаписьДополнительногоЛиста) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Событие,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериодаУчитываемыхКорректировок,
	|			,
	|			Организация В (&Организация)
	|				И ВЫБОР
	|					КОГДА &ВесьОборотЗаПериод = ИСТИНА
	|						ТОГДА ЗаписьДополнительногоЛиста
	|					КОГДА &СУчетомКорректировок = ИСТИНА
	|						ТОГДА ЗаписьДополнительногоЛиста
	|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты";

	Запрос.Выполнить();
	
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 2
	
	Если Контейнер.Свойство("Раздел2") Тогда   
		Раздел2 = Контейнер.Раздел2;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
		|				И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|				И НЕ НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента.Владелец
		|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
		|	КОНЕЦ КАК Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот
		|ПОМЕСТИТЬ НДСЗаписиКнигиПродажРаздел2
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	(НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация))
		|	И НДСЗаписиКнигиПродажОбороты.ВидЦенности В(&ВидыЦенностейНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Покупатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагент.КПП КАК П000200001003,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА Контрагент.Наименование
		|		ИНАЧЕ ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250)
		|	КОНЕЦ КАК П000200002003,
		|	Контрагент.ИНН КАК П000200003003,
		|	Контрагент.ЮридическоеФизическоеЛицо КАК ПокупательЮридическоеФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011711)
		|			ТОГДА ""1011711""
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011703)
		|			ТОГДА ""1011703""
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011707)
		|			ТОГДА ""1011707""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК П000200007003,
		|	ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажРаздел2.НДСОборот), 0) КАК П000200006003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011707)
		|							И НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеНачисленНДС)
		|						ИЛИ НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеРеализация)
		|					ТОГДА НДСЗаписиКнигиПродажРаздел2.НДСОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000200008003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеПолученАванс)
		|					ТОГДА НДСЗаписиКнигиПродажРаздел2.НДСОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000200009003,
		|	Контрагент.Ссылка КАК П000200002003_Расшифровка
		|ИЗ
		|	НДСЗаписиКнигиПродажРаздел2 КАК НДСЗаписиКнигиПродажРаздел2
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагент
		|		ПО НДСЗаписиКнигиПродажРаздел2.Покупатель = Контрагент.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажРаздел2.Покупатель,
		|	Контрагент.ИНН,
		|	Контрагент.КПП,
		|	Контрагент.ЮридическоеФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011711)
		|			ТОГДА ""1011711""
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011703)
		|			ТОГДА ""1011703""
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011707)
		|			ТОГДА ""1011707""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА Контрагент.Наименование
		|		ИНАЧЕ ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250)
		|	КОНЕЦ,
		|	Контрагент.Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		// Заменим обращение к реквизиту контрагент договора
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорКонтрагента.Владелец", "ДоговорКонтрагента." + БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора());
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		ПолеКомпоновкиДанныхСобытие 	= Новый ПолеКомпоновкиДанных("Событие");
		ПолеКомпоновкиДанныхВидЦенности = Новый ПолеКомпоновкиДанных("ВидЦенности");
		
		СтраницаРаздел2 = Раздел2[0].Данные[0].Значение;
		
		Если СтраницаРаздел2.П000200005003 = Неопределено Тогда
			СтраницаРаздел2.П000200005003 = "";
			ОКАТО = "";
		Иначе
			ОКАТО = СтраницаРаздел2.П000200005003;
		КонецЕсли;
		
		Для Каждого Показатель Из СтраницаРаздел2 Цикл
			СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
		КонецЦикла;
		
		Пока Раздел2.Количество() > 1 Цикл
			Раздел2.Удалить(1);
		КонецЦикла;
		
		ПерваяСтраница = Истина;
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел2 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				Раздел2.Добавить().Данные = Новый СписокЗначений();
				Раздел2[Раздел2.Количество()-1].Данные.Добавить(СтруктураНовойТаблицы); 
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			
			СтраницаРаздел2 = Раздел2[Раздел2.Количество()-1].Данные[0].Значение;	
			
			ДанныеЛистаРаздел2ФИО = (Выборка.ПокупательЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
			
			СтраницаРаздел2.П000200001003 = Выборка.П000200001003;
			СтраницаРаздел2.П000200002003 = Выборка.П000200002003;
			СтраницаРаздел2.П000200003003 = Выборка.П000200003003;
			СтраницаРаздел2.П000200005003 = ОКАТО;
			СтраницаРаздел2.П000200006003 = Выборка.П000200006003;
			
			//Расшифровка П000200006003
			ДополнительныеПараметры = Новый Структура;
			
			ИдентификаторМакетаРаздел2 = ПолучитьИдентификаторМакетаРасшифровки("П000200006003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел2);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанныхКонтрагент = Новый ПолеКомпоновкиДанных("Контрагент");
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхКонтрагент, ВидСравненияКомпоновкиДанных.Равно, Выборка.П000200002003_Расшифровка);		
			
			СписокСобытий = Новый СписокЗначений;
			
			Для Каждого Событие Из СобытиеНачисленНДС Цикл
				СписокСобытий.Добавить(Событие.Значение);	
			КонецЦикла;
			
			Для Каждого Событие Из СобытиеПолученАванс Цикл
				СписокСобытий.Добавить(Событие.Значение);	
			КонецЦикла;
			
			Для Каждого Событие Из СобытиеРеализация Цикл
				СписокСобытий.Добавить(Событие.Значение);	
			КонецЦикла;
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СписокСобытий);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр210);		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000200006003_" + Раздел2.Количество(), "Сумма налога, исчисленная к уплате в бюджет (руб.)", "", "", СтраницаРаздел2.П000200006003, "Раздел2", ДополнительныеПараметры);
			
			// конец Расшифровка П000200006003
			
			СтраницаРаздел2.П000200007003 = Выборка.П000200007003;
			СтраницаРаздел2.П000200008003 = Выборка.П000200008003;
			
			//Расшифровка П000200008003
			
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел2);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхКонтрагент, ВидСравненияКомпоновкиДанных.Равно, Выборка.П000200002003_Расшифровка);		
			
			ГруппаИЛИ = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ДобавитьЗначениеВОтбор(ГруппаИЛИ, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеРеализация);		
			
			//ИЛИ
			ГруппаИ = ГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
			ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ДобавитьЗначениеВОтбор(ГруппаИ, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеНачисленНДС);		
			//И
			ДобавитьЗначениеВОтбор(ГруппаИ, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Перечисление.ВидыЦенностей.НалоговыйАгентКомитент"));		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "Сумма налога, исчисленная при отгрузке товаров (выполнении работ, оказании услуг, передаче имущественных прав) (руб.)";
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000200008003_" + Раздел2.Количество(), НаимПоказателя, "", "", СтраницаРаздел2.П000200008003, "Раздел2", ДополнительныеПараметры);
			
			// конец Расшифровка П000200008003
			
			
			СтраницаРаздел2.П000200009003 = Выборка.П000200009003;
			
			//Расшифровка П000200009003
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел2);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхКонтрагент, ВидСравненияКомпоновкиДанных.Равно, Выборка.П000200002003_Расшифровка);		
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПолученАванс);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр210);		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "Сумма налога, исчисленная при получении оплаты, частичной оплаты в счет предстоящей отгрузки товаров (выполнения работ, оказания услуг, передачи имущественных прав) (руб.)";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000200009003_" + Раздел2.Количество(), НаимПоказателя, "", "", СтраницаРаздел2.П000200009003, "Раздел2", ДополнительныеПараметры);
			
			// конец Расшифровка П000200009003
			
			Если ДанныеЛистаРаздел2ФИО Тогда
				СтраницаРаздел2.П000200001003 = "";
				// Если в строке есть запятые, то удалим их, т.к. они являются разделителями.
				П000200002003 = СтрЗаменить(Выборка.П000200002003, ",", "");
				ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(П000200002003);
				ФамилияРаздел2  = СокрЛП(ФИО.Фамилия);
				ИмяРаздел2      = СокрЛП(ФИО.Имя);
				ОтчествоРаздел2 = СокрЛП(ФИО.Отчество);
				
				// Покажем в разделе, разбитое значение по частям, в случае, если что-то ошибочное, необходимо поправить в отчете.
				П000200002003 = СокрЛП(ФамилияРаздел2 + " " + ИмяРаздел2 + " " + ОтчествоРаздел2);
			Иначе
				ФамилияРаздел2 = "";
				ИмяРаздел2 = "";
				ОтчествоРаздел2 = "";
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 3
	
	Если Контейнер.Свойство("Раздел3") Тогда
		Раздел3 = Контейнер.Раздел3;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300001003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300002003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300003003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300004003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр060)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300006003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300007003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300007005,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр080)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300008003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр080)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300008005,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300009005,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр110)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300011005
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		
		ПолеКомпоновкиДанныхСтавкаНДС = Новый ПолеКомпоновкиДанных("СтавкаНДС");
		
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел3,ЗначенияДляЗаполнения);
			
			//Расшифровка П000300001003 и П000300001005
			
			ДополнительныеПараметры = Новый Структура;
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300001003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеРеализация);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр010_040);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСтавкаНДС, ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "1. Реализация (передача для собственных нужд) товаров (работ, услуг), передача имущественных прав по соответствующим ставкам налога, всего";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300001003", НаимПоказателя, "", "", Раздел3.П000300001003, "Раздел3", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300001005", НаимПоказателя, "", "", Раздел3.П000300001005, "Раздел3", ДополнительныеПараметры);
			
			//Расшифровка П000300002003 и П000300002005
			
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета",ИдентификаторМакетаРаздел3);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеРеализация);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр010_040);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСтавкаНДС, ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "1. Реализация (передача для собственных нужд) товаров (работ, услуг), передача имущественных прав по соответствующим ставкам налога, всего";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300002003", НаимПоказателя, "", "", Раздел3.П000300002003, "Раздел3", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300002005", НаимПоказателя, "", "", Раздел3.П000300002005, "Раздел3", ДополнительныеПараметры);
			
			//Расшифровка П000300003003 и П000300003005
			
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеРеализация);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр010_040);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСтавкаНДС, ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"));		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "1. Реализация (передача для собственных нужд) товаров (работ, услуг), передача имущественных прав по соответствующим ставкам налога, всего";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300003003", НаимПоказателя, "", "", Раздел3.П000300003003, "Раздел3", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300003005", НаимПоказателя, "", "", Раздел3.П000300003005, "Раздел3", ДополнительныеПараметры);
			
			//Расшифровка П000300004003 и П000300004005
			
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеРеализация);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр010_040);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСтавкаНДС, ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110"));		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "1. Реализация (передача для собственных нужд) товаров (работ, услуг), передача имущественных прав по соответствующим ставкам налога, всего";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300004003", НаимПоказателя, "", "", Раздел3.П000300004003, "Раздел3", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300004005", НаимПоказателя, "", "", Раздел3.П000300004005, "Раздел3", ДополнительныеПараметры);
			
			
			//Расшифровка П000300006003 и П000300006005
			
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ПолучитьИдентификаторМакетаРасшифровки("П000300006003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012));
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеНачисленНДС);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр060);		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "3. Выполнение строительно-монтажных работ для собственного потребления";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300006003", НаимПоказателя, "", "", Раздел3.П000300006003, "Раздел3", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300006005", НаимПоказателя, "", "", Раздел3.П000300006005, "Раздел3", ДополнительныеПараметры);
			
			//Расшифровка П000300007003 и П000300007005
			
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ПолучитьИдентификаторМакетаРасшифровки("П000300007003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012));
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.Равно, СобытиеПолученАванс);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр070);		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "4. Суммы полученной оплаты, частичной оплаты в счет предстоящих поставок товаров (выполнения работ, оказания услуг), передачи имущественных прав";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300007003", НаимПоказателя, "", "", Раздел3.П000300007003, "Раздел3", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300007005", НаимПоказателя, "", "", Раздел3.П000300007005, "Раздел3", ДополнительныеПараметры);
			
			
			//Расшифровка П000300008003 и П000300008005
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300008003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеНачисленНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр080);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "5. Суммы, связанные с расчетами по оплате налогооблагаемых товаров (работ, услуг)";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300008003", НаимПоказателя, "", "", Раздел3.П000300008003, "Раздел3", ДополнительныеПараметры);
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300008005", НаимПоказателя, "", "", Раздел3.П000300008005, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			
			//Расшифровка П000300009005
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300009005", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеВосстановлениеНДС);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "6. Суммы налога, подлежащие восстановлению, всего";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300009005", НаимПоказателя, "", "", Раздел3.П000300009005, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			//Расшифровка П000300011005
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300011005", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеВосстановлениеНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр110);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "6.2. суммы налога, подлежащие восстановлению в соответствии с подпунктом 3 пункта 3 статьи 170 Налогового кодекса Российской Федерации";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300011005", НаимПоказателя, "", "", Раздел3.П000300011005, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПокупокОбороты.Событие,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
		|	НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|ПОМЕСТИТЬ НДСЗаписиКнигиПокупокОбороты
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация В (&Организация)
		|				И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПокупокОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НДСЗаписиКнигиПокупокОбороты.Событие,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
		|	НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаУчитываемыхКорректировок,
		|			,
		|			Организация В (&Организация)
		|				И ВЫБОР
		|					КОГДА &ВесьОборотЗаПериод = ИСТИНА
		|						ТОГДА ЗаписьДополнительногоЛиста
		|					КОГДА &СУчетомКорректировок = ИСТИНА
		|						ТОГДА ЗаписьДополнительногоЛиста
		|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты";
		
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр130)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300013003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр140)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300014003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр150)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300015003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр160)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300016003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр180)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300018003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр190)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300019003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр200)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300020003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр210)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300021003
		|ИЗ
		|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел3,ЗначенияДляЗаполнения);
			
			//Расшифровка П000300013003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300013003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр130);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "8. Сумма налога, предъявленная налогоплательщику при приобретении на территории Российской Федерации товаров (работ, услуг), имущественных прав,
				|подлежащая вычету в соответствии с пунктом 2 статьи 171 Налогового кодекса Российской Федерации, а также сумма налога, подлежащая вычету в соответствии с
				|пунктом 5 статьи 171 Налогового кодекса Российской Федерации";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300013003", НаимПоказателя, "", "", Раздел3.П000300013003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			
			//Расшифровка П000300014003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300014003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр140);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "8.1. в том числе предъявленная подрядными организациями (заказчиками-застройщиками) по выполненным работам при проведении капитального строительства";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300014003", НаимПоказателя, "", "", Раздел3.П000300014003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			//Расшифровка П000300015003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300015003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр150);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "8.1. в том числе предъявленная подрядными организациями (заказчиками-застройщиками) по выполненным работам при проведении капитального строительства";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300015003", НаимПоказателя, "", "", Раздел3.П000300015003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			
			//Расшифровка П000300016003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300016003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр160);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "10. Сумма налога, исчисленная при выполнении строительно-монтажных работ для собственного потребления, подлежащая вычету";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300016003", НаимПоказателя, "", "", Раздел3.П000300016003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			
			//Расшифровка П000300018003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300018003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр180);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "11.1. таможенным органам по товарам, ввезенным в таможенных режимах выпуска для внутреннего потребления, временного ввоза и переработки вне таможенной территории";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300018003", НаимПоказателя, "", "", Раздел3.П000300018003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			// Расшифровка П000300019003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300019003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
			
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр190);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "11.2. налоговым органам при ввозе товаров с территории Республики Беларусь";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300019003", НаимПоказателя, "", "", Раздел3.П000300019003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			// Расшифровка П000300020003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300020003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр200);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "12. Сумма налога, исчисленная продавцом с сумм оплаты, частичной оплаты, подлежащая вычету у продавца с даты отгрузки соответствующих товаров (выполнения работ, оказания услуг)";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300020003", НаимПоказателя, "", "", Раздел3.П000300020003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			//Расшифровка П000300021003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300021003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр210);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "13. Сумма налога, уплаченная в бюджет налогоплательщиком в качестве покупателя – налогового агента, подлежащая вычету";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300021003", НаимПоказателя, "", "", Раздел3.П000300021003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 3 ПРИЛ. 1
	Если Контейнер.Свойство("Раздел3_Прил1") Тогда
		Если КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета) = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета) Тогда
			
			Раздел3_Прил1 = Контейнер.Раздел3_Прил1;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости КАК ОбъектНедвижимости,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250) = """"
			|			ТОГДА ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.Наименование
			|		ИНАЧЕ ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250)
			|	КОНЕЦ КАК П000310001000,
			|	ПОДСТРОКА(ОсновныеСредстваКонтактнаяИнформация.ЗначенияПолей, 1, 1000) КАК АдресМестонахождения,
			|	ВЫБОР
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение)
			|			ТОГДА ""1011803""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные)
			|			ТОГДА ""1011801""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные)
			|			ТОГДА ""1011802""
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК П000310003000,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС КАК ИспользуетсяДляОперацийНеОблагаемыхНДС,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаВводаВЭксплуатациюБУ КАК П000310004000,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачисленияАмортизацииНУ КАК П000310005000,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.СтоимостьОбъектаНедвижимости КАК П000310006000,
			|	ЕСТЬNULL(СУММА(ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.НДС), 0) КАК П000310007000,
			|	ГОД(ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата) КАК П000310008001_,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачалаИспользованияДляОпераций КАК П000310008002_,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДоляВыручкиНеОблагаемаяНДС КАК П000310008003_,
			|	ЕСТЬNULL(СУММА(ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.НДСВосстановлен), 0) КАК П000310008004_,
			|	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации КАК КодОперацииДляДекларации
			|ИЗ
			|	Документ.ВосстановлениеНДСПоОбъектамНедвижимости.ОбъектыНедвижимости КАК ВосстановлениеНДСпоОбъектамНедвижимости
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВосстановлениеНДСПоОбъектамНедвижимости.СчетаФактуры КАК ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры
			|		ПО ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка = ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.Ссылка
			|			И ВосстановлениеНДСпоОбъектамНедвижимости.КлючСтроки = ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КлючСтроки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства.КонтактнаяИнформация КАК ОсновныеСредстваКонтактнаяИнформация
			|		ПО ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости = ОсновныеСредстваКонтактнаяИнформация.Ссылка
			|			И (ОсновныеСредстваКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестонахожденияОсновныеСредства))
			|ГДЕ
			|	ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Организация В(&Организация)
			|	И ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата <= &КонецПериода
			|	И ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости,
			|	ВЫБОР
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение)
			|			ТОГДА ""1011803""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные)
			|			ТОГДА ""1011801""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные)
			|			ТОГДА ""1011802""
			|		ИНАЧЕ """"
			|	КОНЕЦ,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаВводаВЭксплуатациюБУ,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачисленияАмортизацииНУ,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачалаИспользованияДляОпераций,
			|	ГОД(ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата),
			|	ВосстановлениеНДСпоОбъектамНедвижимости.СтоимостьОбъектаНедвижимости,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДоляВыручкиНеОблагаемаяНДС,
			|	ПОДСТРОКА(ОсновныеСредстваКонтактнаяИнформация.ЗначенияПолей, 1, 1000),
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250) = """"
			|			ТОГДА ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.Наименование
			|		ИНАЧЕ ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250)
			|	КОНЕЦ,
			|	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации
			|
			|УПОРЯДОЧИТЬ ПО
			|	П000310008001_
			|ИТОГИ
			|	СУММА(П000310006000),
			|	СУММА(П000310007000),
			|	СУММА(П000310008001_),
			|	СУММА(П000310008003_),
			|	СУММА(П000310008004_)
			|ПО
			|	ОбъектНедвижимости,
			|	П000310003000
			|АВТОУПОРЯДОЧИВАНИЕ";
			
			ПерваяСтраница = Истина;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ОбъектыНедвижимости = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			СтраницаРаздел3_Прил1 =  Раздел3_Прил1[0].Данные[0].Значение;
			
			Для Каждого Показатель Из СтраницаРаздел3_Прил1 Цикл
				СтраницаРаздел3_Прил1[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
			КонецЦикла;
			
			Пока Раздел3_Прил1.Количество()>1 Цикл
				Раздел3_Прил1.Удалить(1);
			КонецЦикла;
			
			
			Пока ОбъектыНедвижимости.Следующий() Цикл
				
				КодыОпераций = ОбъектыНедвижимости.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				
				Пока КодыОпераций.Следующий() Цикл
					
					Если Не ПерваяСтраница Тогда
						
						
						СтруктураНовойТаблицы = Новый Структура();
						Для Каждого Показатель Из СтраницаРаздел3_Прил1 Цикл
							СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
						КонецЦикла;
						
						Раздел3_Прил1.Добавить().Данные = Новый СписокЗначений();
						Раздел3_Прил1[Раздел3_Прил1.Количество()-1].Данные.Добавить(СтруктураНовойТаблицы); 
						
					Иначе
						// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
						ПерваяСтраница = Ложь;
					КонецЕсли;
					
					СтраницаРаздел3_Прил1 = Раздел3_Прил1[Раздел3_Прил1.Количество()-1].Данные[0].Значение;		
					
					СтраницаРаздел3_Прил1.П000310001000 = ОбъектыНедвижимости.П000310001000;
					
					//Расшифровка
					
					ИдентификаторМакетаРаздел3П1 = "ОткрытьОбъект";
					
					ДополнительныеПараметры = Новый Структура;
					
					ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3П1);
					ДополнительныеПараметры.Вставить("Объект", ОбъектыНедвижимости.ОбъектНедвижимости);
					
					НаимПоказателя = "Наименование объекта недвижимости (код строки 010)";
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310001000_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1.П000310001000, "Раздел3_Прил1", ДополнительныеПараметры);
					
					НаимПоказателя = "Дата ввода объекта недвижимости в эксплуатацию для исчисления амортизации (код строки 040)";
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310004000_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1.П000310004000, "Раздел3_Прил1", ДополнительныеПараметры);
					
					НаимПоказателя = "Дата начала начисления амортизационных отчислений по объекту недвижимости (код строки 050)";
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310005000_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1.П000310005000, "Раздел3_Прил1", ДополнительныеПараметры);
					
					НаимПоказателя = "Стоимость объекта недвижимости на дату ввода объекта в эксплуатацию без учета НДС (руб.) (код строки 060)";
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310006000_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1.П000310006000, "Раздел3_Прил1", ДополнительныеПараметры);
					
					Год = КодыОпераций.Выбрать();
					
					НомерСтроки = 0;
					
					Пока Год.Следующий() Цикл
						
						Если НомерСтроки = 0 Тогда
							
							Если НЕ ПустаяСтрока(Год.АдресМестонахождения) Тогда
								
								РоссийскийАдрес = Новый Соответствие;
								РоссийскийАдрес.Вставить("Индекс",          );
								РоссийскийАдрес.Вставить("Регион",          );
								РоссийскийАдрес.Вставить("КодРегиона",      );
								РоссийскийАдрес.Вставить("Район",           );
								РоссийскийАдрес.Вставить("Город",           );
								РоссийскийАдрес.Вставить("НаселенныйПункт", );
								РоссийскийАдрес.Вставить("Улица",           );
								РоссийскийАдрес.Вставить("Дом",             );
								РоссийскийАдрес.Вставить("Корпус",          );
								РоссийскийАдрес.Вставить("Квартира",        );
								
								РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(
									Год.АдресМестонахождения, РоссийскийАдрес);
									
								СтраницаРаздел3_Прил1.П000310002000_01 = РоссийскийАдрес["Индекс"];
								СтраницаРаздел3_Прил1.П000310002000_02 = РоссийскийАдрес["КодРегиона"];
								СтраницаРаздел3_Прил1.П000310002000_03 = РоссийскийАдрес["Район"];
								СтраницаРаздел3_Прил1.П000310002000_04 = РоссийскийАдрес["Город"];
								СтраницаРаздел3_Прил1.П000310002000_05 = РоссийскийАдрес["НаселенныйПункт"];
								СтраницаРаздел3_Прил1.П000310002000_06 = РоссийскийАдрес["Улица"];
								СтраницаРаздел3_Прил1.П000310002000_07 = РоссийскийАдрес["Дом"];
								СтраницаРаздел3_Прил1.П000310002000_08 = РоссийскийАдрес["Корпус"];
								СтраницаРаздел3_Прил1.П000310002000_09 = РоссийскийАдрес["Квартира"];
								
							КонецЕсли;
							
							СтраницаРаздел3_Прил1.П000310003000 = Год.П000310003000;
							СтраницаРаздел3_Прил1.П000310004000 = Год.П000310004000;
							СтраницаРаздел3_Прил1.П000310005000 = Год.П000310005000;
							СтраницаРаздел3_Прил1.П000310006000 = Год.П000310006000;
							СтраницаРаздел3_Прил1.П000310007000 = Год.П000310007000;
							
						КонецЕсли;
						
						НомерСтроки = НомерСтроки + 1;
						
						СтраницаРаздел3_Прил1["П000310008001_" + НомерСтроки] = Формат(Год.П000310008001_, "ЧГ=0");
						СтраницаРаздел3_Прил1["П000310008002_" + НомерСтроки] = Год.П000310008002_;
						СтраницаРаздел3_Прил1["П000310008003_" + НомерСтроки] = Год.П000310008003_;
						СтраницаРаздел3_Прил1["П000310008004_" + НомерСтроки] = Год.П000310008004_;
						
						
						
						//Расшифровка П000310008001
						
						ИдентификаторМакетаРаздел3П1 = ПолучитьИдентификаторМакетаРасшифровки("П000310008001", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
						
						Если ИдентификаторМакетаРаздел3П1 <> "" Тогда
							
							ПолеКомпоновкиДанныхОбъектНедвижимости 			= Новый ПолеКомпоновкиДанных("ОбъектНедвижимости");
							ПолеКомпоновкиДанныхКодОперацииДляДекларации 	= Новый ПолеКомпоновкиДанных("КодОперацииДляДекларации");
							ПолеКомпоновкиДанныхГодВосстановленияНДС   		= Новый ПолеКомпоновкиДанных("ГодВосстановленияНДС");
							ДополнительныеПараметры = Новый Структура;
							
							ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3П1);
							
							ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
							
							Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
							Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
							
							ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхОбъектНедвижимости, ВидСравненияКомпоновкиДанных.Равно, Год.ОбъектНедвижимости);		
							ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхКодОперацииДляДекларации, ВидСравненияКомпоновкиДанных.Равно, Год.КодОперацииДляДекларации);		
							ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхГодВосстановленияНДС, ВидСравненияКомпоновкиДанных.Равно, Год.П000310008001_);		
							
							ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
							
							НаимПоказателя = "(код строки 080) За отчетный год (предыдущие отчетные годы)";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310008001_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1["П000310008001_" + НомерСтроки], "Раздел3_Прил1", ДополнительныеПараметры);
							
							НаимПоказателя = "Дата начала использования объекта недвижимости для операций, указанных в п.2 ст.170 Налогового кодекса Российской Федерации";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310008002_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1["П000310008002_" + НомерСтроки], "Раздел3_Прил1", ДополнительныеПараметры);
							
							НаимПоказателя = "Доля отгруженных товаров (работ, услуг), имущественных прав, не облагаемых НДС, в общей стоимости отгрузки (%)";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310008003_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1["П000310008003_" + НомерСтроки], "Раздел3_Прил1", ДополнительныеПараметры);
							
							НаимПоказателя = "Сумма НДС, подлежащая восстановлению и уплате в бюджет за календарный год (истекшие календарные годы) (руб.)";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310008004_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1["П000310008004_" + НомерСтроки], "Раздел3_Прил1", ДополнительныеПараметры);
						КонецЕсли;
						
						// Восстановление должно быть отражено в течении 10 лет.
						Если НомерСтроки = 10 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 4
	
	Если Контейнер.Свойство("Раздел4") Тогда
		Раздел4 = Контейнер.Раздел4;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000400000102_1
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПродажОбороты.Событие В(&СобытиеПодтвержденаСтавка0)";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел4,ЗначенияДляЗаполнения);
			
			//Расшифровка П000400000102_1
			
			ИдентификаторМакетаРаздел4 = ПолучитьИдентификаторМакетаРасшифровки("П000400000102_1", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел4 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел4);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПодтвержденаСтавка0);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "Налоговая база";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000400000102_1", НаимПоказателя, "", "", Раздел4.П000400000102_1, "Раздел4", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000400000103_1
		|ИЗ
		|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПокупокОбороты.Событие В(&СобытиеПредъявленКВычетуНДС0)";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел4,ЗначенияДляЗаполнения);
			
			//Расшифровка П000400000103_1
			
			ИдентификаторМакетаРаздел4 = ПолучитьИдентификаторМакетаРасшифровки("П000400000103_1", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел4 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел4);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС0);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "Налоговые вычеты по операциям , обоснованность применения налоговой ставки 0 процентов по которым документально подтверждена";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000400000103_1", НаимПоказателя, "", "", Раздел4.П000400000103_1, "Раздел4", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 6
	
	Если Контейнер.Свойство("Раздел6") Тогда 
		Раздел6 = Контейнер.Раздел6;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600000102_1,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600000103_1
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПродажОбороты.Событие В(&СобытиеНеПодтвержденаСтавка0)";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел6,ЗначенияДляЗаполнения);
			
			//Расшифровка П000600000102_1
			
			ИдентификаторМакетаРаздел6 = ПолучитьИдентификаторМакетаРасшифровки("П000600000102_1", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел6 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел6);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеНеПодтвержденаСтавка0);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "Налоговая база";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000600000102_1", НаимПоказателя, "", "", Раздел6.П000600000102_1, "Раздел6", ДополнительныеПараметры);
				
				НаимПоказателя = "Суммы НДС, исчисленные по налоговым ставкам, предусмотренным пунктами 2-3 статьи 164 Налогового кодекса Российской Федерации";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000600000103_1", НаимПоказателя, "", "", Раздел6.П000600000103_1, "Раздел6", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600000104_1
		|ИЗ
		|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПокупокОбороты.Событие В(&СобытиеПредъявленКВычетуНеПодтвержденНДС0)";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел6,ЗначенияДляЗаполнения);
			
			//Расшифровка П000600000104_1
			
			ИдентификаторМакетаРаздел6 = ПолучитьИдентификаторМакетаРасшифровки("П000600000104_1", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел6 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел6);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНеПодтвержденНДС0);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "Сумма налоговых вычетов по операциям по реализации товаров (работ, услуг), обоснованность применения налоговой ставки 0 процентов по которым документально не подтверждена";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000600000104_1", НаимПоказателя, "", "", Раздел6.П000600000104_1, "Раздел6", ДополнительныеПараметры);
				
			КонецЕсли;
			
			
		КонецЕсли;
	КонецЕсли;
	
	// Сохраняем таблицу расшифровок во временном хранилище в привязке к уникальному идентификатору формы
	
	Если СохранятьТаблицуРасшифровок Тогда
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(
			ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ НАЧИСЛЕНИЯ НДС

// Формирование движений при отражении начисления НДС
//
Процедура СформироватьДвиженияОтражениеНачисленияНДС(ТаблицаНачисленияНДС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОтражениеНачисленияНДС(ТаблицаНачисленияНДС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СформироватьДвиженияОтражениеНачисленияНДСЗаписиКнигиПродаж(Параметры.ТаблицаНачисленияНДС, Реквизиты, Движения, Отказ);

	СформироватьПроводкиОтражениеНачисленияНДСЗаписиКнигиПродаж(Параметры.ТаблицаНачисленияНДС, Реквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыОтражениеНачисленияНДС(ТаблицаНачисленияНДС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"			                            // <Дата>
	+ "Регистратор,"	                            // <ДокументСсылка>
	+ "Организация,"	                            // <СправочникСсылка.Организации>
	+ "ИспользоватьДокументРасчетовКакСчетФактуру," // <Булево>
	+ "РасчетныйДокумент,"		                    // <ДокументСсылка.>
	+ "Подразделение,"                              // <Ссылка на справочник подразделений>
	+ "ФормироватьПроводки"		                    // <Булево>
	;

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы отгрузки без перехода права собственности:

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                 // <Строка> - имя табличной части документа
	+ "НомерСтроки,"               // <Число,10,0> - номер строки документа
	+ "Номенклатура,"              // <СправочникСсылка.Номенклатура>
	+ "СуммаБезНДС,"               // <Число,15,2> - сумма отгрузки в рублях без НДС
	+ "НДС,"                       // <Число,15,2> - сумма НДС отгрузки в рублях
	+ "СтавкаНДС,"                 // <ПеречислениеСсылка.СтавкиНДС>
	+ "Покупатель,"                // <СправочникСсылка.Контрагенты>
	+ "ВидЦенности,"               // <ПеречислениеСсылка.ВидыЦенностей>
	+ "ВидНачисления,"             // <ПеречислениеСсылка.НДСВидНачисления>
	+ "Событие,"                   // <ПеречислениеСсылка.СобытияПоНДСПродажи>
	+ "ЗаписьДополнительногоЛиста,"// <Булево>
	+ "КорректируемыйПериод,"      // <Дата>
	+ "ДатаОплаты,"                // <Дата>
	+ "ДокументОплаты";            // <ДокументСсылка.>

	Если ТаблицаРеквизиты[0].ФормироватьПроводки Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок + ","
		+ "СчетУчетаБУ,"               // <ПланСчетовСсылка.Хозрасчетный> - счет учета ценностей
		+ "СчетДоходовБУ,"             // <ПланСчетовСсылка.Хозрасчетный> - счет доходов для бух.учета
		+ "СчетУчетаНДСПоРеализации,"  // <ПланСчетовСсылка.Хозрасчетный>
		+ "СубконтоБУ";                // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>
	КонецЕсли;

	Если ТаблицаРеквизиты[0].ФормироватьСторнирующиеЗаписиДопЛистовВручную Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок + ","
		+ "СторнирующаяЗаписьДопЛиста";// <Булево>
	КонецЕсли;

	Параметры.Вставить("ТаблицаНачисленияНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНачисленияНДС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияОтражениеНачисленияНДСЗаписиКнигиПродаж(ТаблицаНачисленияНДС, Реквизиты, Движения, Отказ)

	Если ТаблицаНачисленияНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");

	Для каждого СтрокаВыручки Из ТаблицаНачисленияНДС Цикл

		СтрокаКнигиПродаж = ТаблицаЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКнигиПродаж, СтрокаВыручки);

	КонецЦикла;

	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период, "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период, "ДатаСобытия");

	Если Реквизиты.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.РасчетныйДокумент, "СчетФактура");
	Иначе
		ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		НовоеДвижение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиОтражениеНачисленияНДСЗаписиКнигиПродаж(ТаблицаНачисленияНДС, Реквизиты, Движения, Отказ)

	Если НЕ Реквизиты.ФормироватьПроводки Тогда
		Возврат;
	КонецЕсли;

	СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДС;
	ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;

	Для каждого СтрокаТаблицы Из ТаблицаНачисленияНДС Цикл

		Если ПустаяСтрока(СтрокаТаблицы.ИмяСписка) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = "Начисление НДС";

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, СтрокаТаблицы.СубконтоБУ);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СтавкиНДС",  СтрокаТаблицы.СтавкаНДС);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"ВидыПлатежейВГосБюджет", ВидПлатежаВГосБюджет);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ КНИГ И ЖУРНАЛОВ

// Формирование электронных отчетов по НДС

Функция СформироватьДокументыОтчетности(СтруктураПараметров) Экспорт
	
	ДокументыОтчетности = НовыйСтруктураДокументовОтчетности();
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.НалоговыйПериод) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Дата", КонецКвартала(СтруктураПараметров.НалоговыйПериод));
	СтруктураПараметров.Вставить("ФорматПоПостановлению735", СтруктураПараметров.НалоговыйПериод >= '20141001');
	СписокДокументов = ПолучитьСписокДокументовОтчетности(СтруктураПараметров);
	
	Для каждого СтрокаСписка Из СписокДокументов Цикл
		СоздатьЗаполнитьДокумент(СтрокаСписка, СтруктураПараметров, ДокументыОтчетности);
	КонецЦикла;
	
	Возврат ДокументыОтчетности;
	
КонецФункции

Функция НовыйСтруктураДокументовОтчетности()
	
	Результат = Новый Структура();
	
	Результат.Вставить("СозданныеДокументы"      , Новый Массив);
	Результат.Вставить("ПерезаполненныеДокументы", Новый Массив);
	Результат.Вставить("УдаленныеДокументы"      , Новый Массив);
	Результат.Вставить("Ошибки"                  , Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьЗаполнитьДокумент(СтрокаСписка, СтруктураПараметров, Результат)
	
	Если НЕ ЗначениеЗаполнено(СтрокаСписка.Документ) Тогда
		ДокументОбъект                 = Документы[СтрокаСписка.Имя].СоздатьДокумент();
		ДокументОбъект.Организация     = СтруктураПараметров.Организация;
		ДокументОбъект.Дата            = СтрокаСписка.Дата;
		ДокументОбъект.НалоговыйПериод = СтрокаСписка.НалоговыйПериод;
		ДокументОбъект.ПериодПоСКНП    = УчетНДСКлиентСервер.ПолучитьКодПоСКНП(СтрокаСписка.НалоговыйПериод);
		
		ДокументОбъект.УстановитьВремя(РежимАвтоВремя.Последним);
		
		СтруктураПараметров.Дата            = СтрокаСписка.Дата;
		СтруктураПараметров.НалоговыйПериод = СтрокаСписка.НалоговыйПериод;
	Иначе
		ДокументОбъект	= СтрокаСписка.Документ.ПолучитьОбъект();
		
		СтруктураПараметров.Дата            = ДокументОбъект.Дата;
		СтруктураПараметров.НалоговыйПериод = ДокументОбъект.НалоговыйПериод;
		ДокументОбъект.ПериодПоСКНП         = УчетНДСКлиентСервер.ПолучитьКодПоСКНП(СтрокаСписка.НалоговыйПериод);
	КонецЕсли;
	
	Документы[СтрокаСписка.Имя].ЗаполнитьОбъект(ДокументОбъект, СтруктураПараметров);
	
	ЭтоНовый = ДокументОбъект.ЭтоНовый();
	
	Попытка
	
		Если НЕ ЭтоНовый
			И (СтрокаСписка.Имя = "ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде"
				ИЛИ СтрокаСписка.Имя = "ДопЛистКнигиПродажДляПередачиВЭлектронномВиде")
			И ДокументОбъект.ТабличнаяЧасть.Количество() = 0 
			И НЕ СтруктураПараметров.ФорматПоПостановлению735 Тогда
			
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
			Результат.УдаленныеДокументы.Добавить(ДокументОбъект.Ссылка);
			
		Иначе
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
			Если ЭтоНовый Тогда
				Результат.СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
			Иначе
				Результат.ПерезаполненныеДокументы.Добавить(ДокументОбъект.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ЭтоНовый, НСтр("ru = 'Не создан документ %1: %2'"), НСтр("ru = 'Не перезаполнен документ %1: %2'")),
			ДокументОбъект.Метаданные().Синоним,
			ОписаниеОшибки());
			
		Результат.Ошибки.Добавить(ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСписокДокументовОтчетности(СтруктураПараметров)
	
	Перем ФормироватьКнигуПокупок, ФормироватьКнигуПродаж;
	Перем ФормироватьЖурналУчетаСчетовФактур;
	Перем ФормироватьДопЛистыКнигиПокупок, ФормироватьДопЛистыКнигиПродаж;
	Перем СписокДокументов;
	
	Если НЕ СтруктураПараметров.Свойство("ФормироватьКнигуПокупок", ФормироватьКнигуПокупок) Тогда
		ФормироватьКнигуПокупок = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьКнигуПродаж", ФормироватьКнигуПродаж) Тогда
		ФормироватьКнигуПродаж = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьЖурналУчетаСчетовФактур", ФормироватьЖурналУчетаСчетовФактур) Тогда
		ФормироватьЖурналУчетаСчетовФактур = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьДопЛистыКнигиПокупок", ФормироватьДопЛистыКнигиПокупок) Тогда
		ФормироватьДопЛистыКнигиПокупок = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьДопЛистыКнигиПродаж", ФормироватьДопЛистыКнигиПродаж) Тогда
		ФормироватьДопЛистыКнигиПродаж = Ложь;
	КонецЕсли;
	
	СписокДокументов	= Новый ТаблицаЗначений;
	СписокДокументов.Колонки.Добавить("Имя",				ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СписокДокументов.Колонки.Добавить("Документ",			Документы.ТипВсеСсылки());
	СписокДокументов.Колонки.Добавить("Дата",				ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СписокДокументов.Колонки.Добавить("Номер",				ОбщегоНазначения.ОписаниеТипаСтрока(30));
	СписокДокументов.Колонки.Добавить("НалоговыйПериод",	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Возврат СписокДокументов;
	КонецЕсли;
	
	НачалоПериода	= НачалоКвартала(СтруктураПараметров.НалоговыйПериод);
	КонецПериода	= КонецКвартала(СтруктураПараметров.НалоговыйПериод);
	
	НачалоПримененияПостановления1137 	= '20120401';
	НачалоПримененияПостановления735 	= '20141001';
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления1137",  НачалоПримененияПостановления1137);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления735",  	НачалоПримененияПостановления735);
	Запрос.УстановитьПараметр("ФормироватьКнигуПокупок",			ФормироватьКнигуПокупок);
	Запрос.УстановитьПараметр("ФормироватьКнигуПродаж",				ФормироватьКнигуПродаж);
	Запрос.УстановитьПараметр("ФормироватьЖурналУчетаСчетовФактур",	ФормироватьЖурналУчетаСчетовФактур);
	Запрос.УстановитьПараметр("ФормироватьДопЛистыКнигиПокупок",	ФормироватьДопЛистыКнигиПокупок);
	Запрос.УстановитьПараметр("ФормироватьДопЛистыКнигиПродаж",		ФормироватьДопЛистыКнигиПродаж);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.Период, ДЕНЬ) КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПокупокДо735
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И НДСЗаписиКнигиПокупок.Организация = &Организация
	|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод < &НачалоПримененияПостановления735
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоПримененияПостановления1137
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&КонецПериода КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПокупок735
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И НДСЗаписиКнигиПокупок.Организация = &Организация
	|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоПримененияПостановления735
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ) КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПродажДо735
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И НДСЗаписиКнигиПродаж.Организация = &Организация
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод < &НачалоПримененияПостановления735
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоПримененияПостановления1137
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&КонецПериода КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПродаж735
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И НДСЗаписиКнигиПродаж.Организация = &Организация
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоПримененияПостановления735
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныйЛистКнигиПокупок.Ссылка,
	|	ДополнительныйЛистКнигиПокупок.Дата,
	|	НАЧАЛОПЕРИОДА(ДополнительныйЛистКнигиПокупок.Дата, ДЕНЬ) КАК День,
	|	ДополнительныйЛистКнигиПокупок.Номер,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПокупокДо735
	|ИЗ
	|	Документ.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И ДополнительныйЛистКнигиПокупок.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПокупок.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПокупок.НалоговыйПериод = &НачалоПериода
	|	И ДополнительныйЛистКнигиПокупок.НалоговыйПериод < &НачалоПримененияПостановления735
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныйЛистКнигиПокупок.Ссылка,
	|	ДополнительныйЛистКнигиПокупок.Дата,
	|	&КонецПериода КАК День,
	|	ДополнительныйЛистКнигиПокупок.Номер,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПокупок735
	|ИЗ
	|	Документ.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И ДополнительныйЛистКнигиПокупок.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПокупок.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПокупок.НалоговыйПериод = &НачалоПериода
	|	И ДополнительныйЛистКнигиПокупок.НалоговыйПериод >= &НачалоПримененияПостановления735
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныйЛистКнигиПродаж.Ссылка,
	|	ДополнительныйЛистКнигиПродаж.Дата,
	|	НАЧАЛОПЕРИОДА(ДополнительныйЛистКнигиПродаж.Дата, ДЕНЬ) КАК День,
	|	ДополнительныйЛистКнигиПродаж.Номер,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПродажДо735
	|ИЗ
	|	Документ.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И ДополнительныйЛистКнигиПродаж.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПродаж.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПродаж.НалоговыйПериод = &НачалоПериода
	|	И ДополнительныйЛистКнигиПродаж.НалоговыйПериод < &НачалоПримененияПостановления735
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныйЛистКнигиПродаж.Ссылка,
	|	ДополнительныйЛистКнигиПродаж.Дата,
	|	&КонецПериода КАК День,
	|	ДополнительныйЛистКнигиПродаж.Номер,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПродаж735
	|ИЗ
	|	Документ.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И ДополнительныйЛистКнигиПродаж.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПродаж.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПродаж.НалоговыйПериод = &НачалоПериода
	|	И ДополнительныйЛистКнигиПродаж.НалоговыйПериод >= &НачалоПримененияПостановления735
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""КнигаПокупокДляПередачиВЭлектронномВиде"" КАК Имя,
	|	КнигаПокупок.Ссылка КАК Документ,
	|	КнигаПокупок.Дата КАК Дата,
	|	КнигаПокупок.Номер КАК Номер,
	|	КнигаПокупок.НалоговыйПериод КАК НалоговыйПериод
	|ИЗ
	|	Документ.КнигаПокупокДляПередачиВЭлектронномВиде КАК КнигаПокупок
	|ГДЕ
	|	&ФормироватьКнигуПокупок
	|	И КнигаПокупок.Организация = &Организация
	|	И КнигаПокупок.НалоговыйПериод = &НачалоПериода
	|	И НЕ КнигаПокупок.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КнигаПродажДляПередачиВЭлектронномВиде"",
	|	КнигаПродаж.Ссылка,
	|	КнигаПродаж.Дата,
	|	КнигаПродаж.Номер,
	|	КнигаПродаж.НалоговыйПериод
	|ИЗ
	|	Документ.КнигаПродажДляПередачиВЭлектронномВиде КАК КнигаПродаж
	|ГДЕ
	|	&ФормироватьКнигуПродаж
	|	И КнигаПродаж.Организация = &Организация
	|	И КнигаПродаж.НалоговыйПериод = &НачалоПериода
	|	И НЕ КнигаПродаж.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде"",
	|	ЖурналУчетаСчетовФактур.Ссылка,
	|	ЖурналУчетаСчетовФактур.Дата,
	|	ЖурналУчетаСчетовФактур.Номер,
	|	ЖурналУчетаСчетовФактур.НалоговыйПериод
	|ИЗ
	|	Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	&ФормироватьЖурналУчетаСчетовФактур
	|	И ЖурналУчетаСчетовФактур.Организация = &Организация
	|	И ЖурналУчетаСчетовФактур.НалоговыйПериод = &НачалоПериода
	|	И НЕ ЖурналУчетаСчетовФактур.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде"",
	|	ВТ_ДополнительныеЛистыКнигиПокупокДо735.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупокДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупокДо735.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупокДо735.Дата
	|	КОНЕЦ,
	|	ВТ_ДополнительныеЛистыКнигиПокупокДо735.Номер,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупокДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупокДо735.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупокДо735.НалоговыйПериод
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПокупокДо735 КАК ВТ_НДСЗаписиКнигиПокупокДо735
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПокупокДо735 КАК ВТ_ДополнительныеЛистыКнигиПокупокДо735
	|		ПО ВТ_НДСЗаписиКнигиПокупокДо735.День = ВТ_ДополнительныеЛистыКнигиПокупокДо735.День
	|			И ВТ_НДСЗаписиКнигиПокупокДо735.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПокупокДо735.НалоговыйПериод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде"",
	|	ВТ_ДополнительныеЛистыКнигиПокупок735.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупок735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупок735.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупок735.Дата
	|	КОНЕЦ,
	|	ВТ_ДополнительныеЛистыКнигиПокупок735.Номер,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупок735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупок735.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупок735.НалоговыйПериод
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПокупок735 КАК ВТ_НДСЗаписиКнигиПокупок735
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПокупок735 КАК ВТ_ДополнительныеЛистыКнигиПокупок735
	|		ПО ВТ_НДСЗаписиКнигиПокупок735.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПокупок735.НалоговыйПериод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПродажДляПередачиВЭлектронномВиде"",
	|	ВТ_ДополнительныеЛистыКнигиПродажДо735.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродажДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродажДо735.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродажДо735.Дата
	|	КОНЕЦ,
	|	ВТ_ДополнительныеЛистыКнигиПродажДо735.Номер,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродажДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродажДо735.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродажДо735.НалоговыйПериод
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПродажДо735 КАК ВТ_НДСЗаписиКнигиПродажДо735
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПродажДо735 КАК ВТ_ДополнительныеЛистыКнигиПродажДо735
	|		ПО ВТ_НДСЗаписиКнигиПродажДо735.День = ВТ_ДополнительныеЛистыКнигиПродажДо735.День
	|			И ВТ_НДСЗаписиКнигиПродажДо735.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПродажДо735.НалоговыйПериод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПродажДляПередачиВЭлектронномВиде"",
	|	ВТ_ДополнительныеЛистыКнигиПродаж735.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродаж735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж735.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродаж735.Дата
	|	КОНЕЦ,
	|	ВТ_ДополнительныеЛистыКнигиПродаж735.Номер,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродаж735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж735.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродаж735.НалоговыйПериод
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПродаж735 КАК ВТ_НДСЗаписиКнигиПродаж735
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПродаж735 КАК ВТ_ДополнительныеЛистыКнигиПродаж735
	|		ПО ВТ_НДСЗаписиКнигиПродаж735.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПродаж735.НалоговыйПериод";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		СписокДокументов = Результат.Выгрузить();
	КонецЕсли;
	
	СписокДокументов.Индексы.Добавить("Имя");
	
	Если ФормироватьКнигуПокупок
		И СписокДокументов.Найти("КнигаПокупокДляПередачиВЭлектронномВиде", "Имя") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(0);
		НоваяСтрока.Имя				= "КнигаПокупокДляПередачиВЭлектронномВиде";
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Если ФормироватьКнигуПродаж
		И СписокДокументов.Найти("КнигаПродажДляПередачиВЭлектронномВиде", "Имя") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(1);
		НоваяСтрока.Имя				= "КнигаПродажДляПередачиВЭлектронномВиде";
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Если ФормироватьЖурналУчетаСчетовФактур
		И СписокДокументов.Найти("ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде", "Имя") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(2);
		НоваяСтрока.Имя				= "ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде";
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Возврат	СписокДокументов;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЫВОД КНИГ И ЖУРНАЛОВ

Процедура ВывестиШапкуДопЛиста(ТабличныйДокумент, Макет, СтруктураПараметров, НомерДополнительногоЛиста) Экспорт
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Организация = СтруктураПараметров.Организация;
	
	Если СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
		ТабличныйДокумент.Вывести(Секция);
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	Если Секция.Области.Найти("НомераГрафДекларация") <> Неопределено Тогда 
		Секция.Область("НомераГрафДекларация").Видимость = Ложь;
	КонецЕсли;
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.Период = ПредставлениеПериода(
		СтруктураПараметров.НалоговыйПериод, КонецДня(СтруктураПараметров.КонецНалоговогоПериода), "ФП = Истина");
	
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;	
	КонецЕсли;
		
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
		Организация, СтруктураПараметров.ДатаОформления);
	
	НазваниеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
	ИННОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН", Ложь);
	КППОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "КПП", Ложь);
	
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННКППОрганизации   = ИННОрганизации 
		+ ?(НЕ ЗначениеЗаполнено(КППОрганизации), "", ("/" + КППОрганизации));
	Секция.Параметры.ДатаСоставления = Формат(СтруктураПараметров.ДатаОформления, "ДФ=dd.MM.yyyy");
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
		И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
		Секция.Параметры.УстановленныйОтбор = СтрШаблон(
			?(ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора),
				НСтр("ru='Отбор: Контрагент в группе %1'"),
				НСтр("ru='Отбор: Контрагент = %1'")),
			СтруктураПараметров.КонтрагентДляОтбора);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

// Вспомогательные процедуры

// Возвращает структуру реквизитов счета-фактуры
//
// Параметры
//  ЗаписьКниги - ВыборкаИзРезультатаЗапроса - выборка из регистра накопления
//
// Возвращаемое значение:
// - Структура -  Структура реквизитов счета-фактуры
//                См. функцию УчетНДСПереопределяемый.НовыйПредставлениеСчетаФактуры()
//
Функция ОпределитьДатуИНомерСФ(ЗаписьКниги) Экспорт
	
	ВариантыПредставленияСФ = УчетНДСПереопределяемый.ОпределитьДатуИНомерСчетаФактурыДляПечати(
		ЗаписьКниги);
	
	Возврат ВариантыПредставленияСФ;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовКонтрагента(ИНН, КПП, Знач КонтрагентНаименование = "") Экспорт
	
	СтруктураРеквизитовКонтрагента = Новый Структура();
	
	Если СтрДлина(СокрЛП(ИНН)) > 10 Тогда
		СтруктураРеквизитовКонтрагента.Вставить("ИННФЛ", ИНН);
		КонтрагентНаименование = СокрЛП(КонтрагентНаименование);
		Если ЗначениеЗаполнено(КонтрагентНаименование) Тогда 
			Если ВРег(Лев(КонтрагентНаименование, 3))  = "ИП " Тогда 
				КонтрагентНаименование = Сред(КонтрагентНаименование, 4)
			ИначеЕсли ВРег(Прав(КонтрагентНаименование, 3))  = " ИП" Тогда 
				КонтрагентНаименование = Лев(КонтрагентНаименование, СтрДлина(КонтрагентНаименование) - 3);
			КонецЕсли;	
			СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(КонтрагентНаименование);
			СтруктураРеквизитовКонтрагента.Вставить("Фамилия", 	?(СтруктураФИО.Фамилия <> Неопределено, СтруктураФИО.Фамилия, ""));
			СтруктураРеквизитовКонтрагента.Вставить("Имя", 		?(СтруктураФИО.Имя <> Неопределено, СтруктураФИО.Имя, ""));
			СтруктураРеквизитовКонтрагента.Вставить("Отчество", ?(СтруктураФИО.Отчество <> Неопределено, СтруктураФИО.Отчество, ""));
		КонецЕсли;	
	Иначе
		СтруктураРеквизитовКонтрагента.Вставить("ИННЮЛ", ИНН);
		СтруктураРеквизитовКонтрагента.Вставить("КПП", КПП);
		Если  ЗначениеЗаполнено(КонтрагентНаименование) Тогда 
			СтруктураРеквизитовКонтрагента.Вставить("НаимОрг", КонтрагентНаименование);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СтруктураРеквизитовКонтрагента;

КонецФункции

// Получает пакет электронных представлений документов.
//
// Параметры:
//  ВыгружаемыеДокументы - Массив - перечень документов для которых
//                 необходимо получить электронные представления в виде двоичных данных.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор по которому
//                 осуществляется привязка двоичных данных во временном хранилище.
//
// Возвращаемое значение:
//   Соответствие - соответствие переданных ссылок на документы и массива структур с полями:
//                 * ТипФайла - Строка - описание типа файла;
//                 * ИмяФайла - Строка - имя файла с расширением;
//                 * АдресВременногоХранилища - Строка - адрес временного хранилища, в котором размещены двоичные данные файла.
//
Функция ПолучитьЭлектронныеДокументы(ВыгружаемыеДокументы, УникальныйИдентификатор = Неопределено) Экспорт
	
	Возврат УчетНДСПереопределяемый.СформироватьЭлектронныеДокументы(ВыгружаемыеДокументы, УникальныйИдентификатор);
	
КонецФункции

// Возвращает порядок корректировки НДС (Федеральный Закон N 39)
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить порядок корректировки НДС
// Возвращаемое значение:
//  Число   - 	порядок корректировки, 
//				1 - корректировка НДС выполняется по периоду отгрузки 
//              2 - корректировка НДС выполняется по периоду соглашения об изменении условий договора
//
Функция ПолучитьПорядокКорректировкиНДС(Дата) Экспорт 

	НачалоПримененияПравила = '20130701';
	
	Если Дата < НачалоПримененияПравила Тогда
		Возврат 1;
	Иначе
		Возврат 2;
	КонецЕсли;

КонецФункции // ПолучитьПорядокКорректировкиНДС()

Процедура ОбновитьРеквизитыСвязанныхСчетовФактур(ДокументОбъект, ТипСчетаФактуры, Отказ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипСчетаФактуры = "СчетФактураВыданный" Тогда
		
		РеквизитыСсылки = Новый Структура;
		РеквизитыСсылки.Вставить("Номер", 	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Ссылка, "Номер"));
		РеквизитыСсылки.Вставить("Дата", 	НачалоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Ссылка, "Дата")));
		РеквизитыСсылки.Вставить("ДокументСсылка", 	ДокументОбъект.Ссылка);
		
		РеквизитыОбъекта = Новый Структура;
		РеквизитыОбъекта.Вставить("Номер", 	ДокументОбъект.Номер);
		РеквизитыОбъекта.Вставить("Дата", 	НачалоДня(ДокументОбъект.Дата));
		РеквизитыОбъекта.Вставить("ВидСчетаФактуры", 	ДокументОбъект.ВидСчетаФактуры);
		
		Если РеквизитыСсылки.Номер <> РеквизитыОбъекта.Номер 
			ИЛИ	РеквизитыСсылки.Дата <> РеквизитыОбъекта.Дата Тогда 
						
			ОбновитьРеквизитыВыданныхСчетовФактур(РеквизитыСсылки, РеквизитыОбъекта, Отказ);
					
		КонецЕсли;
		
	ИначеЕсли ТипСчетаФактуры = "СчетФактураПолученный" Тогда 
			
		РеквизитыСсылки = Новый Структура;
		РеквизитыСсылки.Вставить("НомерВходящегоДокумента", 	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Ссылка, "НомерВходящегоДокумента"));
		РеквизитыСсылки.Вставить("ДатаВходящегоДокумента", 	НачалоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Ссылка, "ДатаВходящегоДокумента")));
		РеквизитыСсылки.Вставить("ДокументСсылка", 	ДокументОбъект.Ссылка);
		
		РеквизитыОбъекта = Новый Структура;
		РеквизитыОбъекта.Вставить("НомерВходящегоДокумента", 	ДокументОбъект.НомерВходящегоДокумента);
		РеквизитыОбъекта.Вставить("ДатаВходящегоДокумента", 	НачалоДня(ДокументОбъект.ДатаВходящегоДокумента));
		РеквизитыОбъекта.Вставить("ВидСчетаФактуры", 	ДокументОбъект.ВидСчетаФактуры);
		
		Если РеквизитыСсылки.НомерВходящегоДокумента <> РеквизитыОбъекта.НомерВходящегоДокумента 
			ИЛИ	РеквизитыСсылки.ДатаВходящегоДокумента <> РеквизитыОбъекта.ДатаВходящегоДокумента Тогда
			
			ОбновитьРеквизитыПолученныхСчетовФактур(РеквизитыСсылки, РеквизитыОбъекта, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры

Процедура ОбновитьРеквизитыВыданныхСчетовФактур(РеквизитыСсылки, РеквизитыОбъекта, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РеквизитыОбъекта.ВидСчетаФактуры 		= Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ РеквизитыОбъекта.ВидСчетаФактуры 	= Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ РеквизитыОбъекта.ВидСчетаФактуры	= Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
		ИЛИ РеквизитыОбъекта.ВидСчетаФактуры	= Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		
		ТаблицаСчетовФактур = ПолучитьСвязанныеСчетаФактурыВыданные(РеквизитыСсылки.ДокументСсылка);
		
		Если ТаблицаСчетовФактур <> Неопределено Тогда 
			
			ВыборкаСчетовФактур = ТаблицаСчетовФактур.Выбрать();
			
			Пока ВыборкаСчетовФактур.Следующий() Цикл
				
				СчетФактураОбъект = ВыборкаСчетовФактур.Счетфактура.ПолучитьОбъект();	
				
				СчетФактураОбъект.НомерИсходногоДокумента 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				РеквизитыОбъекта.Номер, Истина, Ложь);
				СчетФактураОбъект.ДатаИсходногоДокумента 		= РеквизитыОбъекта.Дата;
				СчетФактураОбъект.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
				
				Попытка
					СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Исключение
					Отказ = Истина;
					
					ТекстОшибки = НСтр("ru = 'Не удалось записать документ.
                                        |%1'");
					ОписаниеОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(
						НСТр("ru = 'Обновление реквизитов счетов-фактур'", ОбщегоНазначения.КодОсновногоЯзыка()), 
						УровеньЖурналаРегистрации.Ошибка,
						СчетФактураОбъект.Метаданные(),
						СчетФактураОбъект.Ссылка, 
						ОписаниеОшибки);
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли РеквизитыОбъекта.ВидСчетаФактуры 	= Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию 
		ИЛИ РеквизитыОбъекта.ВидСчетаФактуры 	= Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		ТаблицаСчетовФактур = ПолучитьСвязанныеСчетаФактурыВыданные(РеквизитыСсылки.ДокументСсылка, Ложь);
		
		Если ТаблицаСчетовФактур <> Неопределено Тогда 
			
			СчетаФактуры = ТаблицаСчетовФактур.Выгрузить();
			
			Для Каждого ВыборкаСчетовФактур Из СчетаФактуры Цикл
				
				СчетФактураОбъект = ВыборкаСчетовФактур.Счетфактура.ПолучитьОбъект();	
				
				СчетФактураОбъект.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
				
				Если ВыборкаСчетовФактур.Корректировочный Тогда
					
					Если ВыборкаСчетовФактур.Счетфактура.Исправление тогда
						Если СчетФактураОбъект.ИсправляемыйСчетФактура = РеквизитыСсылки.ДокументСсылка Тогда
							СчетФактураОбъект.НомерИсправляемогоКорректировочногоДокумента 	= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
								РеквизитыОбъекта.Номер,
								Истина,
								Ложь);
							СчетФактураОбъект.ДатаИсправляемогоКорректировочногоДокумента	= РеквизитыОбъекта.Дата
						Иначе
							СчетФактураОбъект.НомерИсправляемогоКорректировочногоДокумента 	= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
								СчетФактураОбъект.ИсправляемыйСчетФактура.Номер,
								Истина,
								Ложь);
							СчетФактураОбъект.ДатаИсправляемогоКорректировочногоДокумента	= СчетФактураОбъект.ИсправляемыйСчетФактура.Дата;	
						КонецЕсли;
					КонецЕсли;	
					
				Иначе
					
					СчетФактураОбъект.НомерИсходногоДокумента 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
						РеквизитыОбъекта.Номер, Истина, Ложь);
					СчетФактураОбъект.ДатаИсходногоДокумента 		= РеквизитыОбъекта.Дата;
					
				КонецЕсли;
				
				Попытка
					СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Исключение
					Отказ = Истина;
					
					ТекстОшибки = НСтр("ru = 'Не удалось записать документ.
                                        |%1'");
					ОписаниеОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(
						НСТр("ru = 'Обновление реквизитов счетов-фактур'", ОбщегоНазначения.КодОсновногоЯзыка()), 
						УровеньЖурналаРегистрации.Ошибка,
						СчетФактураОбъект.Метаданные(),
						СчетФактураОбъект.Ссылка, 
						ОписаниеОшибки);
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРеквизитыПолученныхСчетовФактур(РеквизитыСсылки, РеквизитыОбъекта, Отказ)
	
	Если РеквизитыОбъекта.ВидСчетаФактуры 		= Перечисления.ВидСчетаФактурыПолученного.НаАванс 
		ИЛИ РеквизитыОбъекта.ВидСчетаФактуры 	= Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		
		ТаблицаСчетовФактур = ПолучитьСвязанныеСчетаФактурыПолученные(РеквизитыСсылки.ДокументСсылка);
		
		Если ТаблицаСчетовФактур <> Неопределено Тогда 
			
			ВыборкаСчетовФактур = ТаблицаСчетовФактур.Выбрать();
			
			Пока ВыборкаСчетовФактур.Следующий() Цикл
				
				СчетФактураОбъект = ВыборкаСчетовФактур.Счетфактура.ПолучитьОбъект();	
				
				СчетФактураОбъект.НомерВходящегоДокумента 		= РеквизитыОбъекта.НомерВходящегоДокумента;
				СчетФактураОбъект.ДатаВходящегоДокумента		= РеквизитыОбъекта.ДатаВходящегоДокумента;
				СчетФактураОбъект.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
				
				Попытка
					СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Исключение
					Отказ = Истина;
					
					ТекстОшибки = НСтр("ru = 'Не удалось записать документ.
                                        |%1'");
					ОписаниеОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(
						НСТр("ru = 'Обновление реквизитов счетов-фактур'", ОбщегоНазначения.КодОсновногоЯзыка()), 
						УровеньЖурналаРегистрации.Ошибка,
						СчетФактураОбъект.Метаданные(),
						СчетФактураОбъект.Ссылка, 
						ОписаниеОшибки);
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли РеквизитыОбъекта.ВидСчетаФактуры 	= Перечисления.ВидСчетаФактурыПолученного.НаПоступление 
		ИЛИ РеквизитыОбъекта.ВидСчетаФактуры 	= Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		
		ТаблицаСчетовФактур = ПолучитьСвязанныеСчетаФактурыПолученные(РеквизитыСсылки.ДокументСсылка, Ложь);
		
		Если ТаблицаСчетовФактур <> Неопределено Тогда 
			
			СчетаФактуры = ТаблицаСчетовФактур.Выгрузить();
			
			Для Каждого ВыборкаСчетовФактур Из СчетаФактуры Цикл
				
				СчетФактураОбъект = ВыборкаСчетовФактур.Счетфактура.ПолучитьОбъект();	
				
				СчетФактураОбъект.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
				
				Если ВыборкаСчетовФактур.Корректировочный Тогда
					
					Если ВыборкаСчетовФактур.Счетфактура.Исправление тогда
						Если СчетФактураОбъект.ИсправляемыйСчетФактура = РеквизитыСсылки.ДокументСсылка Тогда
							СчетФактураОбъект.НомерВходящегоДокумента 	= РеквизитыОбъекта.НомерВходящегоДокумента;
							СчетФактураОбъект.ДатаВходящегоДокумента	= РеквизитыОбъекта.ДатаВходящегоДокумента;
						Иначе
							СчетФактураОбъект.НомерВходящегоДокумента 	= СчетФактураОбъект.ИсправляемыйСчетФактура.НомерВходящегоДокумента;
							СчетФактураОбъект.ДатаВходящегоДокумента	= СчетФактураОбъект.ИсправляемыйСчетФактура.ДатаВходящегоДокумента;	
						КонецЕсли;
					КонецЕсли;	
					
				Иначе
					
					СчетФактураОбъект.НомерВходящегоДокумента 		= РеквизитыОбъекта.НомерВходящегоДокумента;
					СчетФактураОбъект.ДатаВходящегоДокумента		= РеквизитыОбъекта.ДатаВходящегоДокумента;
					
				КонецЕсли;
				
				Попытка
					СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Исключение
					Отказ = Истина;
					
					ТекстОшибки = НСтр("ru = 'Не удалось записать документ.
                                        |%1'");
					ОписаниеОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(
						НСТр("ru = 'Обновление реквизитов счетов-фактур'", ОбщегоНазначения.КодОсновногоЯзыка()), 
						УровеньЖурналаРегистрации.Ошибка,
						СчетФактураОбъект.Метаданные(),
						СчетФактураОбъект.Ссылка, 
						ОписаниеОшибки);
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак применения Федерального Закона 134-ФЗ
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить признак применения 134-ФЗ
// Возвращаемое значение:
//  Булево - 	признак применения
//				Истина 	- ФЗ-134 применяется
//				Ложь 	- ФЗ-134 не применяется
//
Функция ВедетсяУчетНДСПоФЗ134(Дата) Экспорт

	НачалоПримененияФЗ134 = '20140101';
	
	Если Дата < НачалоПримененияФЗ134 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ВедетсяУчетНДСПоФЗ134()

Функция ВедетсяУчетНДСПоФЗ81(Дата) Экспорт

	НачалоПримененияФЗ81 = '20140701';
	
	Если Дата < НачалоПримененияФЗ81 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ВедетсяУчетНДСПоФЗ81()

// Возвращает признак применения правил заполнения декларации НДС по приказу ФНС от 19.08.2020 N ЕД-7-3/591@.
// Помимо прочего, приказом меняется порядок заполнения раздела 7 декларации, графы 3 и 4 с 01.10.2020 заполняются
// для всех операций, кроме операций реализации не на территории РФ.
//
// Параметры:
//  Дата   - тип дата, в данном параметре передается
//           дата на которую необходимо определить признак применения приказа
// Возвращаемое значение:
//  Булево - признак применения
//        Истина - приказ применяется
//        Ложь   - приказ не применяется
//
Функция ПравилаЗаполненияДекларацииС4кв2020(Дата) Экспорт
	
	НачалоПримененияПравил = '20201001';
	
	Если Дата < НачалоПримененияПравил Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает порядок округления НДС (Федеральный Закон N 248-ФЗ).
//
// Параметры
//  Дата  - Дата - в данном параметре передается дата на которую необходимо определить порядок округления НДС.
// Возвращаемое значение:
//  Булево - признак применения:
//              1 - сумма НДС исчисляется с копейками;
//              2 - сумма НДС исчисляется в полных рублях.
//
Функция ПолучитьПорядокОкругленияНДС(Дата) Экспорт

	НачалоПримененияОкругления = '20140101';
	
	Если Дата < НачалоПримененияОкругления Тогда
		Возврат 1;
	Иначе
		Возврат 2;
	КонецЕсли;

КонецФункции // ПолучитьПорядокОкругленияНДС()

Процедура ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ТаблицаНачисленияНДС)

	СтрокиКУдалению = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТаблицаНачисленияНДС Цикл
		
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС
			ИЛИ СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаНачисленияНДС.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, Строка, ОбластьТабличногоДокумента, ДетальнаяЗапись = Неопределено, НомерРаздела = 0) Экспорт
	
	// Если это заполнение документа или декларации по НДС, тогда игнорируем
	Если СтруктураПараметров.Свойство("ЗаполнениеДокумента") И СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.Свойство("ЗаполнениеДекларации") И СтруктураПараметров.ЗаполнениеДекларации Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполненности даты события
	Если СтруктураПараметров.Свойство("ЭтоКнигаПокупок") 
		ИЛИ СтруктураПараметров.Свойство("ЭтоКнигаПродаж") Тогда
		ДатаСобытия	= Строка.ДатаСчетаФактурыСортировка;
	ИначеЕсли СтруктураПараметров.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		ДатаСобытия	= Строка.ДатаСчетаФактуры;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	// Если это детальные записи, то ИНН, КПП и контрагента берем из них
	// Если это итоговая запись, то ИНН, КПП и контрагента берем из их строк
	Если ДетальнаяЗапись <> Неопределено Тогда
		ДанныеВСтроке = ДетальнаяЗапись;
	Иначе
		ДанныеВСтроке = Строка;
	КонецЕсли;
	
	Контрагент 						= Строка.Контрагент;
	НомерСтрокиТабличногоДокумента 	= ОбластьТабличногоДокумента.Верх;
	Дата 							= НачалоДня(ДатаСобытия);
	Если СтруктураПараметров.Свойство("ЭтоКнигаПокупок") Тогда
		ИНН = ДанныеВСтроке.ПродавецИНН;
		КПП = ДанныеВСтроке.ПродавецКПП;
	ИначеЕсли СтруктураПараметров.Свойство("ЭтоКнигаПродаж") Тогда
		ИНН = ДанныеВСтроке.ПокупательИНН;
		КПП = ДанныеВСтроке.ПокупательКПП;
	ИначеЕсли СтруктураПараметров.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		ИНН = ДанныеВСтроке.КонтрагентИНН;
		КПП = ДанныеВСтроке.КонтрагентКПП;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ДобавитьКонтрагентаНаПроверку(
		СтруктураПараметров, 
		НомерСтрокиТабличногоДокумента, 
		Контрагент, 
		ИНН, 
		КПП, 
		Дата, 
		НомерРаздела);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

Функция ВыводитьСтроку(СтруктураПараметров, Строка, ЭтоИтог = Ложь, ДетальнаяЗапись = Неопределено) Экспорт
	
	// Если это детальные записи, то ИНН, КПП и контрагента берем из них
	// Если это итоговая запись, то ИНН, КПП и контрагента берем из их строк
	Если ДетальнаяЗапись <> Неопределено Тогда
		ДанныеВСтроке = ДетальнаяЗапись;
	Иначе
		ДанныеВСтроке = Строка;
	КонецЕсли;
	
	ВыводитьСтроку = Истина;
	Если ЭтоИтог Тогда
		// В строке итога нет ИНН, КПП и даты, есть только контрагент 
		СтруктураПараметров.Вставить("ЭтоИтог", Истина);
		
		ВыводитьСтроку = ПроверкаКонтрагентов.ВыводитьСтрокуОтчета(
				СтруктураПараметров, 
				ДанныеВСтроке.Контрагент, 
				Неопределено, 
				Неопределено, 
				Неопределено);
	Иначе
		
		СтруктураПараметров.Вставить("ЭтоИтог", Ложь);
		
		Если СтруктураПараметров.Свойство("ЭтоКнигаПокупок") Тогда
				
			ДатаПроверки = ?(ЗначениеЗаполнено(ДанныеВСтроке.ДатаСчетаФактурыСортировка),
				ДанныеВСтроке.ДатаСчетаФактурыСортировка, ДанныеВСтроке.СчетФактураДата);
			Если НЕ ЗначениеЗаполнено(ДатаПроверки) Тогда
				ДатаПроверки = ДанныеВСтроке.ДатаСобытия;
			КонецЕсли;
		
			ВыводитьСтроку = ПроверкаКонтрагентов.ВыводитьСтрокуОтчета(
				СтруктураПараметров, 
				ДанныеВСтроке.Контрагент, 
				ДанныеВСтроке.ПродавецИНН, 
				ДанныеВСтроке.ПродавецКПП, 
				ДатаПроверки);
					
		ИначеЕсли СтруктураПараметров.Свойство("ЭтоКнигаПродаж") Тогда
				
				ВыводитьСтроку = ПроверкаКонтрагентов.ВыводитьСтрокуОтчета(
				СтруктураПараметров, 
				ДанныеВСтроке.Контрагент, 
				ДанныеВСтроке.ПокупательИНН, 
				ДанныеВСтроке.ПокупательКПП, 
				?(ЗначениеЗаполнено(ДанныеВСтроке.ДатаСчетаФактурыСортировка), ДанныеВСтроке.ДатаСчетаФактурыСортировка, ДанныеВСтроке.СчетФактураДата));
				
		ИначеЕсли СтруктураПараметров.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
				
			ВыводитьСтроку = ПроверкаКонтрагентов.ВыводитьСтрокуОтчета(
				СтруктураПараметров, 
				ДанныеВСтроке.Контрагент, 
				ДанныеВСтроке.КонтрагентИНН, 
				ДанныеВСтроке.КонтрагентКПП, 
				ДанныеВСтроке.ДатаСчетаФактуры);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВыводитьСтроку;
	
КонецФункции

Процедура УменьшитьСуммуИтога(СтрокаИтога, СтрокаВычитаемая, СтруктураПараметров) Экспорт
	
	Для каждого Колонка Из СтрокаИтога Цикл
		Параметр = Колонка.Ключ;
		СтрокаИтога[Параметр] = СтрокаИтога[Параметр] - СтрокаВычитаемая[Параметр];
	КонецЦикла; 
	
КонецПроцедуры

Функция НоваяСтрокаИтоговКнигиПокупок() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ВсегоПокупок", 		0);
	Результат.Вставить("НДС",				0);
	Результат.Вставить("СуммаБезНДС18", 	0);
	Результат.Вставить("НДС18",				0);
	Результат.Вставить("СуммаБезНДС10", 	0);
	Результат.Вставить("НДС10", 			0);
	Результат.Вставить("НДС0", 				0);
	Результат.Вставить("СуммаСовсемБезНДС",	0);
	
	Возврат Результат;

КонецФункции

Процедура ПривестиПустоеИзмерениеИсправленныйСчетФактура(Движения) Экспорт
	
	Для каждого Движение Из Движения Цикл
	
		Если НЕ ЗначениеЗаполнено(Движение.ИсправленныйСчетФактура)
			И Движение.ИсправленныйСчетФактура <> Неопределено Тогда
			
			Движение.ИсправленныйСчетФактура = Неопределено;
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйПараметрыПоискаСчетовФактур() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НачалоПериода"      , Неопределено);
	Результат.Вставить("КонецПериода"       , Неопределено);
	Результат.Вставить("Организация"        , Неопределено);
	Результат.Вставить("Фильтр"             , Неопределено);
	Результат.Вставить("НаличиеСчетаФактуры", Неопределено);
	Результат.Вставить("СчетФактураПроведен", Неопределено);
	Результат.Вставить("ДатаСФНеБолее"      , Неопределено);
	Результат.Вставить("ИскатьПоОборотам"   , Ложь);
	Результат.Вставить("УчитыватьОригиналы" , Ложь);
	
	Возврат Результат;
	
КонецФункции

#Область СчетаУчета
Функция СчетПредъявленногоНалогаПоВидуЦенности(ВидЦенности) Экспорт
	
	Если ВидЦенности = Перечисления.ВидыЦенностей.ОС Тогда
		
		Возврат ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств; // 19.01
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НМА Тогда
		
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам; // 19.02
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.Материалы
		Или ВидЦенности = Перечисления.ВидыЦенностей.Товары Тогда
		
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ; // 19.03
		
	ИначеЕсли  ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные
		Или ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства Тогда
		
		Возврат ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств; // 19.08
		
	Иначе
		
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам; // 19.04
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТаможенныйСоюз

Процедура СформироватьДвиженияВвозТоваровИзТаможенногоСоюза(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары) Тогда
		Возврат;
	КонецЕсли;
		
	Параметры = ПодготовитьПараметрыВвозТоваровИзТаможенногоСоюза(ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ДанныеДвижений = ПодготовитьДанныеДвиженийВвозТоваровИзТаможенногоСоюза(Параметры.Товары, Реквизиты);

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС	  = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ДвиженияРаздельныйУчетНДС  = РаздельныйУчетНДС И НЕ РаздельныйУчетНДСНаСчете19;

	Если ДанныеДвижений.Итог("НДС") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Бухгалтерские проводки
	
	СформироватьПроводкиНачислениеНДСПриВвозеТоваровИзТаможенногоСоюза(Реквизиты, ДанныеДвижений, Движения, Отказ);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Движения по регистрам
	
	СформироватьДвиженияНДСПредъявленныйВвозТоваровИзТаможенногоСоюза(Реквизиты, ДанныеДвижений, Движения, Отказ);
	
	Если ДвиженияРаздельныйУчетНДС Тогда
		УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямВвозТоваровИзТаможенногоСоюза(Параметры.Товары, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВвозТоваровИзТаможенногоСоюза(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "Партия,"                  // <ДокументСсылка> - документ поступления товаров
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура> - поступивший ранее товар
	+ "Склад,"                   // <СправочникСсылка.Склады> - склад, на который поступил ранее товар
	+ "Подразделение,"           // Подразделение для проводок
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "ВидЦенности,"             // <ПеречислениеСсылка.ВидыЦенностей>
	+ "СуммаБезНДС,"             // <Число,15,2> - сумма без НДС в рублях
	+ "НДС,"                     // <Число,15,2> - сумма НДС в рублях
	+ "Стоимость,"               // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СтавкаНДС"                // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии при поступлении доп.расходов служит документ поступления товаров
	
	// Документом-основанием счета-фактуры при поступлении доп.расходов выступает документ поступления
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	// Для доп.расходов количество в регистре НДСпоПриобретеннымЦенностям всегда равно нулю
	Параметры.Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийВвозТоваровИзТаможенногоСоюза(Товары, Реквизиты)

	ДанныеДвижений = Товары.Скопировать(,
		"СчетФактура,СтавкаНДС,СчетУчетаНДС,ВидЦенности,СпособУчетаНДС,СуммаБезНДС,НДС");

	ДанныеДвижений.Свернуть(
		"СчетФактура,СтавкаНДС,СчетУчетаНДС,ВидЦенности,СпособУчетаНДС",
		"СуммаБезНДС,НДС");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");
	
	Возврат ДанныеДвижений;

КонецФункции

Функция ПодготовитьТаблицуСнятиеБлокировкиВычетаПриВвозеТоваров(ТаблицаОплатаПодтверждена, ТаблицаРеквизиты) Экспорт
	
	Параметры = ПодготовитьПараметрыСнятиеБлокировкиВычетаПриВвозеТоваров(ТаблицаОплатаПодтверждена, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДанныеОЗаявлениях", Параметры.ТаблицаОплатаПодтверждена);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеОЗаявлениях.ЗаявлениеОВвозе,
	|	ДанныеОЗаявлениях.ДатаДокументаОплаты,
	|	ДанныеОЗаявлениях.НомерДокументаОплаты
	|ПОМЕСТИТЬ ДанныеОЗаявлениях
	|ИЗ
	|	&ДанныеОЗаявлениях КАК ДанныеОЗаявлениях
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДанныеОЗаявлениях.ЗаявлениеОВвозе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.ДатаОплаты,
	|	НДСПредъявленныйОбороты.ДоговорКонтрагента,
	|	НДСПредъявленныйОбороты.ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			,
	|			&КонецПериодаГраница,
	|			,
	|			СчетФактура В
	|					(ВЫБРАТЬ
	|						ДанныеОЗаявлениях.ЗаявлениеОВвозе
	|					ИЗ
	|						ДанныеОЗаявлениях)
	|				И Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)) КАК НДСПредъявленныйОбороты";
	
	НДСПредъявленныйПриВвозе = Запрос.Выполнить().Выгрузить();
	НДСПредъявленныйПриВвозе.Индексы.Добавить("СчетФактура");
	
	ТаблицаДвижений = НДСПредъявленныйПриВвозе.СкопироватьКолонки();
	ТаблицаДвижений.Колонки.Добавить("ДатаДокументаОплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДвижений.Колонки.Добавить("НомерДокументаОплаты", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	
	Для каждого СтрокаЗаявления Из Параметры.ТаблицаОплатаПодтверждена Цикл
		
		СтруктураПоиска = Новый Структура("СчетФактура", СтрокаЗаявления.ЗаявлениеОВвозе);
		ПредъявленныйНДСПоЗаявлению = НДСПредъявленныйПриВвозе.НайтиСтроки(СтруктураПоиска);
		
		Если ПредъявленныйНДСПоЗаявлению.Количество() > 0 Тогда
			НоваяСтрокаДвижения = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижения, СтрокаЗаявления);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижения, ПредъявленныйНДСПоЗаявлению[0]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция ПодготовитьПараметрыСнятиеБлокировкиВычетаПриВвозеТоваров(ТаблицаОплатаПодтверждена, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация"                    // <СправочникСсылка.Организации>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ЗаявлениеОВвозе,"         // <ДокументСсылка.ЗаявлениеОВвозеТоваров> - заявление, оплата которого подтверждена
	+ "ДатаДокументаОплаты,"     // <Дата>  - дата документа подтверждающего оплату заявления по данным документа
	+ "НомерДокументаОплаты"     // <Номер> - номер документа подтверждающего оплату заявления по данным документа
	;
	
	Параметры.Вставить("ТаблицаОплатаПодтверждена", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплатаПодтверждена, СписокОбязательныхКолонок));

	Возврат Параметры;	

КонецФункции

Процедура СформироватьДвиженияПодтвержденаОплатаНДСПоВвезеннымТоварам(ТаблицаРеквизиты, ТаблицаСнятиеБлокировкиВычета, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПодтвержденаОплатаНДСПоВвезеннымТоварам(ТаблицаРеквизиты, ТаблицаСнятиеБлокировкиВычета);
	Реквизиты = Параметры.Реквизиты[0];

	СформироватьДвиженияНДСЗаписиКнигиПокупок(Параметры.ТаблицаСнятиеБлокировкиВычета, Движения, Отказ)
	
КонецПроцедуры

Функция ПодготовитьПараметрыПодтвержденаОплатаНДСПоВвезеннымТоварам(ТаблицаРеквизиты, ТаблицаСнятиеБлокировкиВычета)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация"                     // <СправочникСсылка.Организации>
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы подтверждения оплаты

	СписокОбязательныхКолонок = ""
	
	+ "СчетФактура,"
	+ "Организация,"
	+ "ВидЦенности,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДС,"
	+ "Поставщик,"
	+ "ДатаОплаты,"
	+ "ДоговорКонтрагента,"
	+ "ИсправленныйСчетФактура,"
	+ "ДатаДокументаОплаты,"
	+ "НомерДокументаОплаты"
	;
	
	Параметры.Вставить("ТаблицаСнятиеБлокировкиВычета", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСнятиеБлокировкиВычета, СписокОбязательныхКолонок));
		
	Реквизиты = Параметры.Реквизиты[0];	
		
	Параметры.ТаблицаСнятиеБлокировкиВычета.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	Параметры.ТаблицаСнятиеБлокировкиВычета.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Параметры.ТаблицаСнятиеБлокировкиВычета.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор");
	Параметры.ТаблицаСнятиеБлокировкиВычета.ЗаполнитьЗначения(Реквизиты.Период, "Период");

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНДСПредъявленныйВвозТоваровИзТаможенногоСоюза(Реквизиты, ДанныеДвижений, Движения, Отказ)

	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Запись = Движения.НДСПредъявленный.ДобавитьПриход();
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Регистратор = Реквизиты.Регистратор;
		Запись.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;

	КонецЦикла;

	Движения.НДСПредъявленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиНачислениеНДСПриВвозеТоваровИзТаможенногоСоюза(Реквизиты, ТаблицаДвижений, Движения, Отказ)

	// Проводка по начислению налога к уплате не зависит от системы налогообложения
	// Проводка Дт 19.10 Кт 68.42
	
	ДанныеДвижений = ТаблицаДвижений.Скопировать();
	
	ДанныеДвижений.Свернуть("СпособУчетаНДС, СчетУчетаНДС", "НДС, СуммаБезНДС");
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = НСтр("ru = 'Начислен НДС при ввозе товаров из Таможенного союза'");

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС; // 19.х
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СФПолученные", Реквизиты.Регистратор);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);
	
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", Реквизиты.Регистратор);
		
		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Создает список показателей декларации по косвенным налогам, которые будут автоматически заполняться.
// Для версии отчета ФормаОтчета2010Кв3.
Процедура ПолучитьСведенияОПоказателяхОтчетаКосвенныеНалогиТамСоюзФормаОтчета2010Кв3(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100003101", Истина, Истина);
	
КонецПроцедуры

// Заполняет контейнер с показателями декларации по косвенным налогам (таможенный союз).
// Для версии отчета ФормаОтчета2010Кв3.
Процедура ЗаполнитьОтчетКосвенныеНалогиТамСоюзФормаОтчета2010Кв3(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") Тогда
		СписокОрганизаций = ПараметрыОтчета.ГруппаОрганизаций; 
	Иначе
		СписокОрганизаций = Новый СписокЗначений();
	КонецЕсли;
		
	СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);
	
	Если Контейнер.Свойство("Раздел1") Тогда
		
		Раздел1 = Контейнер.Раздел1;
		
		Если ПараметрыОтчета.ДатаПодписи > ПараметрыОтчета.мДатаКонцаПериодаОтчета Тогда
			ДатаПодписиДекларации = ПараметрыОтчета.ДатаПодписи;
		Иначе
			ДатаПодписиДекларации = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
		КонецЕсли;
		
		НачислениеНДС = УчетНДСФормированиеОтчетности.НачислениеНДСПоЗаявлениямОВвозе(ПараметрыОтчета, ДатаПодписиДекларации);
		
		Если НЕ НачислениеНДС.Пустой() Тогда
			
			ТаблицаНачислений = НачислениеНДС.Выгрузить();
			Раздел1.П000100003101 = ТаблицаНачислений[0].СуммаНДС;
			
		КонецЕсли; 
			
		
	КонецЕсли;
	
	// Сохраняем таблицу расшифровок во временном хранилище в привязке к уникальному идентификатору формы
	ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);

КонецПроцедуры



// Определяет, является ли страна мира государством-членом таможенного союза (ЕвразЭС)
// Параметры
// СтранаРегистрацииКонтрагента - Справочники.СтраныМира - страна мира
//
// Возвращаемое значение:
//  Булево - Истина, если переданная страна является государством-членом таможенного союза (ЕвразЭС)
//  Для российских контрагентов возвращается Ложь.
Функция ГосударствоЧленТаможенногоСоюза(СтранаРегистрацииКонтрагента) Экспорт

	Если ЗначениеЗаполнено(СтранаРегистрацииКонтрагента)
		И ТипЗнч(СтранаРегистрацииКонтрагента) = Тип("СправочникСсылка.СтраныМира")
		И СтранаРегистрацииКонтрагента <> Справочники.СтраныМира.Россия Тогда
		
		Возврат УправлениеКонтактнойИнформацией.ЭтоСтранаУчастникЕАЭС(СтранаРегистрацииКонтрагента);
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;

КонецФункции

Функция КонтрагентРезидентТаможенногоСоюза(Контрагент) Экспорт
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		СтранаРегистрацииКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СтранаРегистрации");
		Возврат ГосударствоЧленТаможенногоСоюза(СтранаРегистрацииКонтрагента);
			
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеОбъекта = ТаблицаОписания.Добавить();
	ОписаниеОбъекта.Наименование = НСтр("ru='Заявление о ввозе товаров (на основании поступления)'");
	ОписаниеОбъекта.ТипОбъекта = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров");
	ОписаниеОбъекта.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ОписаниеОбъекта.ГруппаВДереве = "Налоговая отчетность";
	ОписаниеОбъекта.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеОбъекта.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеОбъекта.ЯвляетсяАктуальным = Истина;
	ОписаниеОбъекта.ИмяОсновногоМакетаДляПечати = "";
	
	ОписаниеОбъекта = ТаблицаОписания.Добавить();
	ОписаниеОбъекта.ТипОбъекта = Тип("ДокументСсылка.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде");
	ОписаниеОбъекта.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ОписаниеОбъекта.ГруппаВДереве = "Налоговая отчетность";
	ОписаниеОбъекта.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеОбъекта.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеОбъекта.ЯвляетсяАктуальным = Истина;
	ОписаниеОбъекта.ИмяОсновногоМакетаДляПечати = "";
	
КонецПроцедуры

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - Таблица, содержащая в себе описания ссылок, переданных в закладке Ссылка таблицы
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- ДатаСоздания - Дата - Дата создания объекта
//			- Наименование - Строка - Наименование объекта, с которым он будет отображаться в форме Отчетность
//			- КодКонтролирующегоОргана - Строка - Код контролирующего органа, в который отправляется отчетности по ТКС
//			- ДатаНачала - Дата - Дата начала периода. Пустая, если дата начала периода отсуствует
//			- ДатаОкончания - Дата - Дата окончания периода. Пустая, если дата окончания периода отсуствует 
//			- ВариантОтчета - Строка(3) - Корректировочный номер (0 - Первичный)
//			- ПометкаУдаления - Булево - Истина, если объект помечен на удаление 
//			- Организация - СправочникСсылка.Организации - Организация, которой принадлежит объект
//			- Комментарий - Строка - Комментарий из объекта
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	МассивЗаявленийОВвозеТоваров = Новый Массив();
	Для Каждого СвойстваОбъекта ИЗ СвойстваОбъектов Цикл
		Если ТипЗнч(СвойстваОбъекта.Ссылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
			МассивЗаявленийОВвозеТоваров.Добавить(СвойстваОбъекта.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаявленийОВвозеТоваров.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("МассивЗаявленийОВвозеТоваров", МассивЗаявленийОВвозеТоваров);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваров.Ссылка,
		|	ЗаявлениеОВвозеТоваров.Дата КАК ДатаСоздания,
		|	ЗаявлениеОВвозеТоваров.Организация КАК Организация,
		|	НАЧАЛОПЕРИОДА(ЗаявлениеОВвозеТоваров.Дата, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(ЗаявлениеОВвозеТоваров.Дата, МЕСЯЦ) КАК ДатаОкончания,
		|	ЗаявлениеОВвозеТоваров.ПометкаУдаления,
		|	ЗаявлениеОВвозеТоваров.СтруктураРеквизитовВыгрузки,
		|	""-"" КАК ВариантОтчета,
		|	ЗаявлениеОВвозеТоваров.Комментарий КАК Комментарий
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
		|ГДЕ
		|	ЗаявлениеОВвозеТоваров.Ссылка В(&МассивЗаявленийОВвозеТоваров)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокиОбъектов = СвойстваОбъектов.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
			Для Каждого СтрокаОбъекта ИЗ СтрокиОбъектов Цикл
				
				ЗаполнитьЗначенияСвойств(СтрокаОбъекта, Выборка);
				СтрокаОбъекта.Наименование = НСтр("ru = 'Заявление о ввозе товаров (на основании поступления)'");
				
				СтруктураРеквизитовВыгрузки = Выборка.СтруктураРеквизитовВыгрузки.Получить();
		
				Если ТипЗнч(СтруктураРеквизитовВыгрузки) = Тип("Структура") И СтруктураРеквизитовВыгрузки.Свойство("КодИФНС") Тогда
					СтрокаОбъекта.КодКонтролирующегоОргана = СтруктураРеквизитовВыгрузки.КодИФНС;
				Иначе
					СтрокаОбъекта.КодКонтролирующегоОргана = "";
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	МассивЖурналовСчетовФактур = Новый Массив();
	Для Каждого СвойстваОбъекта ИЗ СвойстваОбъектов Цикл
		Если ТипЗнч(СвойстваОбъекта.Ссылка) = Тип("ДокументСсылка.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде") Тогда
			МассивЖурналовСчетовФактур.Добавить(СвойстваОбъекта.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЖурналовСчетовФактур.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("МассивЖурналовСчетовФактур", МассивЖурналовСчетовФактур);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Ссылка,
		|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Дата КАК ДатаСоздания,
		|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Организация КАК Организация,
		|	0 КАК НомерКорректировки,
		|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.НалоговыйПериод КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.НалоговыйПериод, КВАРТАЛ) КАК ДатаОкончания,
		|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.ПометкаУдаления,
		|	ЕСТЬNULL(ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Организация.РегистрацияВНалоговомОргане.Код, """") КАК КодКонтролирующегоОргана
		|ИЗ
		|	Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде КАК ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде
		|ГДЕ
		|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Ссылка В(&МассивЖурналовСчетовФактур)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокиОбъектов = СвойстваОбъектов.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
			Для Каждого СтрокаОбъекта ИЗ СтрокиОбъектов Цикл
				ЗаполнитьЗначенияСвойств(СтрокаОбъекта, Выборка);
				СтрокаОбъекта.Наименование = НСтр("ru = 'Журнал учета счетов-фактур для передачи в электронном виде'");
				СтрокаОбъекта.ВариантОтчета = Формат(Выборка.НомерКорректировки, "ЧЦ=3; ЧГ=0");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет какие из переданного массива контрагентов зарегистрированы в странах ЕАЭС (кроме зарегистрированных в России)
// Параметры
// Контрагенты - массив контрагентов из которых необходимо отобрать резидентов ЕАЭС
//
// Возвращаемое значение:
// Массив - массив контрагентов-резидентов ЕАЭС.
Функция КонтрагентыРезидентыЕАЭС(Контрагенты) Экспорт
	
	КонтрагентыЕАЭС = Новый Массив;
	Если Контрагенты.Количество() = 0 Тогда 
		Возврат КонтрагентыЕАЭС;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивКонтрагентов", Контрагенты);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
	|		ПО Контрагенты.СтранаРегистрации = СтраныМира.Ссылка
	|ГДЕ
	|	Контрагенты.Ссылка В(&МассивКонтрагентов)
	|	И СтраныМира.УчастникЕАЭС
	|	И СтраныМира.Ссылка <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда 
		КонтрагентыЕАЭС = Результат.Выгрузить().ВыгрузитьКолонку("Контрагент");
	КонецЕсли;
	
	Возврат КонтрагентыЕАЭС;
	
КонецФункции
#КонецОбласти

#Область СведенияОЮридическихИФизическихЛицах

Процедура РегистрационныеСведенияНаДаты(МенеджерВременныхТаблиц) Экспорт
	
	// Запрос требует обязательного наличия в МенеджерВременныхТаблиц таблицы с именем
	// СсылкиНаДаты с колонками Ссылка, ДатаСведений
	// Результатом является временная таблица СведенияОСсылкахНаДаты
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СсылкиНаДаты.Ссылка КАК Ссылка,
	|	СсылкиНаДаты.ДатаСведений КАК ДатаСведений,
	|	МАКСИМУМ(ИсторияКППКонтрагентов.Период) КАК Период
	|ПОМЕСТИТЬ ДатыСведенийОКППКонтрагентов
	|ИЗ
	|	СсылкиНаДаты КАК СсылкиНаДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|		ПО СсылкиНаДаты.Ссылка = ИсторияКППКонтрагентов.Ссылка
	|			И СсылкиНаДаты.ДатаСведений >= ИсторияКППКонтрагентов.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СсылкиНаДаты.Ссылка,
	|	СсылкиНаДаты.ДатаСведений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ДатаСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиНаДаты.Ссылка КАК Ссылка,
	|	СсылкиНаДаты.ДатаСведений КАК ДатаСведений,
	|	ВЫБОР
	|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ВЫБОР
	|					КОГДА Контрагенты.ЮридическоеФизическоеЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|							И ЕСТЬNULL(ИсторияКППКонтрагентов.КПП, Контрагенты.КПП) = """"
	|						ТОГДА """"
	|					ИНАЧЕ Контрагенты.ИНН
	|				КОНЕЦ
	|		КОГДА Контрагенты.ИНН <> """"
	|				И ЕСТЬNULL(ИсторияКППКонтрагентов.КПП, Контрагенты.КПП) <> """"
	|			ТОГДА Контрагенты.ИНН
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИНН,
	|	ВЫБОР
	|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|				ИЛИ Контрагенты.ИНН <> """"
	|					И ЕСТЬNULL(ИсторияКППКонтрагентов.КПП, Контрагенты.КПП) <> """"
	|			ТОГДА ЕСТЬNULL(ИсторияКППКонтрагентов.КПП, Контрагенты.КПП)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КПП,
	|	ВЫБОР
	|		КОГДА Контрагенты.ОбособленноеПодразделение
	|				И ГоловныеКонтрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ГоловныеКонтрагенты.Ссылка
	|		ИНАЧЕ Контрагенты.Ссылка
	|	КОНЕЦ КАК КонтрагентДляПолученияНаименования,
	|	ВЫБОР
	|		КОГДА Контрагенты.ОбособленноеПодразделение
	|				И ГоловныеКонтрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ГоловныеКонтрагенты.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ГоловныеКонтрагенты.Наименование
	|					ИНАЧЕ ГоловныеКонтрагенты.НаименованиеПолное
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(Контрагенты.НаименованиеПолное, 1, 250) = """"
	|					ТОГДА Контрагенты.Наименование
	|				ИНАЧЕ Контрагенты.НаименованиеПолное
	|			КОНЕЦ
	|	КОНЕЦ КАК Наименование
	|ПОМЕСТИТЬ СведенияОКонтрагентах
	|ИЗ
	|	СсылкиНаДаты КАК СсылкиНаДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СсылкиНаДаты.Ссылка = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ГоловныеКонтрагенты
	|		ПО (Контрагенты.ГоловнойКонтрагент = ГоловныеКонтрагенты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыСведенийОКППКонтрагентов КАК ДатыСведенийОКППКонтрагентов
	|		ПО СсылкиНаДаты.Ссылка = ДатыСведенийОКППКонтрагентов.Ссылка
	|			И СсылкиНаДаты.ДатаСведений = ДатыСведенийОКППКонтрагентов.ДатаСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|		ПО (ДатыСведенийОКППКонтрагентов.Ссылка = ИсторияКППКонтрагентов.Ссылка)
	|			И (ДатыСведенийОКППКонтрагентов.Период = ИсторияКППКонтрагентов.Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыСведенийОКППКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОКонтрагентах.Ссылка КАК Ссылка,
	|	СведенияОКонтрагентах.ДатаСведений КАК ДатаСведений,
	|	СведенияОКонтрагентах.КонтрагентДляПолученияНаименования КАК КонтрагентДляПолученияНаименования,
	|	МАКСИМУМ(ИсторияНаименованийКонтрагентов.Период) КАК Период
	|ПОМЕСТИТЬ ДатыСведенийОНаименованияхКонтрагентов
	|ИЗ
	|	СведенияОКонтрагентах КАК СведенияОКонтрагентах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияНаименований КАК ИсторияНаименованийКонтрагентов
	|		ПО СведенияОКонтрагентах.КонтрагентДляПолученияНаименования = ИсторияНаименованийКонтрагентов.Ссылка
	|			И СведенияОКонтрагентах.ДатаСведений >= ИсторияНаименованийКонтрагентов.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОКонтрагентах.Ссылка,
	|	СведенияОКонтрагентах.ДатаСведений,
	|	СведенияОКонтрагентах.КонтрагентДляПолученияНаименования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОКонтрагентах.Ссылка,
	|	СведенияОКонтрагентах.ДатаСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОКонтрагентах.Ссылка КАК Ссылка,
	|	СведенияОКонтрагентах.ДатаСведений КАК ДатаСведений,
	|	ЕСТЬNULL(ИсторияНаименованийКонтрагентов.НаименованиеПолное, СведенияОКонтрагентах.Наименование) КАК Наименование,
	|	СведенияОКонтрагентах.ИНН КАК ИНН,
	|	СведенияОКонтрагентах.КПП КАК КПП
	|ПОМЕСТИТЬ СведенияОКонтрагентахНаДаты
	|ИЗ
	|	СведенияОКонтрагентах КАК СведенияОКонтрагентах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыСведенийОНаименованияхКонтрагентов КАК ДатыСведенийОНаименованияхКонтрагентов
	|		ПО (ДатыСведенийОНаименованияхКонтрагентов.Ссылка = СведенияОКонтрагентах.Ссылка)
	|			И (ДатыСведенийОНаименованияхКонтрагентов.ДатаСведений = СведенияОКонтрагентах.ДатаСведений)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияНаименований КАК ИсторияНаименованийКонтрагентов
	|		ПО (ДатыСведенийОНаименованияхКонтрагентов.КонтрагентДляПолученияНаименования = ИсторияНаименованийКонтрагентов.Ссылка)
	|			И (ДатыСведенийОНаименованияхКонтрагентов.Период = ИсторияНаименованийКонтрагентов.Период)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ДатаСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СведенияОКонтрагентах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыСведенийОНаименованияхКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиНаДаты.Ссылка КАК Ссылка,
	|	СсылкиНаДаты.ДатаСведений КАК ДатаСведений,
	|	МАКСИМУМ(ИсторияРегистрацийВНалоговомОргане.Период) КАК Период
	|ПОМЕСТИТЬ ДатыСведенийОКППОрганизаций
	|ИЗ
	|	СсылкиНаДаты КАК СсылкиНаДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО СсылкиНаДаты.Ссылка = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И СсылкиНаДаты.ДатаСведений >= ИсторияРегистрацийВНалоговомОргане.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СсылкиНаДаты.Ссылка,
	|	СсылкиНаДаты.ДатаСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыСведенийОКППОрганизаций.Ссылка КАК Ссылка,
	|	ДатыСведенийОКППОрганизаций.ДатаСведений КАК ДатаСведений,
	|	ВЫБОР
	|		КОГДА Организации.ОбособленноеПодразделение
	|			ТОГДА Организации.ГоловнаяОрганизация
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК ОрганизацияДляПолученияНаименования,
	|	Организации.ИНН КАК ИНН,
	|	ЕСТЬNULL(ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, Организации.КПП) КАК КПП
	|ПОМЕСТИТЬ СведенияОбОрганизациях
	|ИЗ
	|	ДатыСведенийОКППОрганизаций КАК ДатыСведенийОКППОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДатыСведенийОКППОрганизаций.Ссылка = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО ДатыСведенийОКППОрганизаций.Ссылка = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И ДатыСведенийОКППОрганизаций.Период = ИсторияРегистрацийВНалоговомОргане.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыСведенийОКППОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОбОрганизациях.Ссылка КАК Ссылка,
	|	СведенияОбОрганизациях.ДатаСведений КАК ДатаСведений,
	|	СведенияОбОрганизациях.ОрганизацияДляПолученияНаименования КАК ОрганизацияДляПолученияНаименования,
	|	МАКСИМУМ(ИсторияНаименованийОрганизаций.Период) КАК Период
	|ПОМЕСТИТЬ ДатыСведенийОНаименованияхОрганизаций
	|ИЗ
	|	СведенияОбОрганизациях КАК СведенияОбОрганизациях
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.ИсторияНаименований КАК ИсторияНаименованийОрганизаций
	|		ПО СведенияОбОрганизациях.ОрганизацияДляПолученияНаименования = ИсторияНаименованийОрганизаций.Ссылка
	|			И СведенияОбОрганизациях.ДатаСведений >= ИсторияНаименованийОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОбОрганизациях.Ссылка,
	|	СведенияОбОрганизациях.ДатаСведений,
	|	СведенияОбОрганизациях.ОрганизацияДляПолученияНаименования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОбОрганизациях.Ссылка,
	|	СведенияОбОрганизациях.ДатаСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОбОрганизациях.Ссылка КАК Ссылка,
	|	СведенияОбОрганизациях.ДатаСведений КАК ДатаСведений,
	|	ВЫБОР
	|		КОГДА СведенияОбОрганизациях.ОрганизацияДляПолученияНаименования.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ЕСТЬNULL(ИсторияНаименованийОрганизаций.НаименованиеСокращенное, СведенияОбОрганизациях.ОрганизацияДляПолученияНаименования.НаименованиеСокращенное)
	|		ИНАЧЕ ЕСТЬNULL(ИсторияНаименованийОрганизаций.НаименованиеПолное, СведенияОбОрганизациях.ОрганизацияДляПолученияНаименования.НаименованиеПолное)
	|	КОНЕЦ КАК Наименование,
	|	СведенияОбОрганизациях.ИНН КАК ИНН,
	|	СведенияОбОрганизациях.КПП КАК КПП
	|ПОМЕСТИТЬ СведенияОбОрганизацияхНаДаты
	|ИЗ
	|	СведенияОбОрганизациях КАК СведенияОбОрганизациях
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыСведенийОНаименованияхОрганизаций КАК ДатыСведенийОНаименованияхОрганизаций
	|		ПО (ДатыСведенийОНаименованияхОрганизаций.Ссылка = СведенияОбОрганизациях.Ссылка)
	|			И (ДатыСведенийОНаименованияхОрганизаций.ДатаСведений = СведенияОбОрганизациях.ДатаСведений)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.ИсторияНаименований КАК ИсторияНаименованийОрганизаций
	|		ПО (ДатыСведенийОНаименованияхОрганизаций.ОрганизацияДляПолученияНаименования = ИсторияНаименованийОрганизаций.Ссылка)
	|			И (ДатыСведенийОНаименованияхОрганизаций.Период = ИсторияНаименованийОрганизаций.Период)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ДатаСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СведенияОбОрганизациях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыСведенийОНаименованияхОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СсылкиНаДаты.Ссылка КАК Ссылка,
	|	СсылкиНаДаты.ДатаСведений КАК ДатаСведений,
	|	ЕСТЬNULL(СведенияОКонтрагентахНаДаты.Наименование, СведенияОбОрганизацияхНаДаты.Наименование) КАК Наименование,
	|	ЕСТЬNULL(СведенияОКонтрагентахНаДаты.ИНН, СведенияОбОрганизацияхНаДаты.ИНН) КАК ИНН,
	|	ЕСТЬNULL(СведенияОКонтрагентахНаДаты.КПП, СведенияОбОрганизацияхНаДаты.КПП) КАК КПП
	|ПОМЕСТИТЬ СведенияОСсылкахНаДаты
	|ИЗ
	|	СсылкиНаДаты КАК СсылкиНаДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОКонтрагентахНаДаты КАК СведенияОКонтрагентахНаДаты
	|		ПО СсылкиНаДаты.Ссылка = СведенияОКонтрагентахНаДаты.Ссылка
	|			И СсылкиНаДаты.ДатаСведений = СведенияОКонтрагентахНаДаты.ДатаСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОбОрганизацияхНаДаты КАК СведенияОбОрганизацияхНаДаты
	|		ПО СсылкиНаДаты.Ссылка = СведенияОбОрганизацияхНаДаты.Ссылка
	|			И СсылкиНаДаты.ДатаСведений = СведенияОбОрганизацияхНаДаты.ДатаСведений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ДатаСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СведенияОКонтрагентахНаДаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СведенияОбОрганизацияхНаДаты";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС() Экспорт

	Результат = Константы.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС.Получить();
	Если Результат = 0 Тогда
		Результат = 10000;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СформироватьЗаголовокЛиста(НазваниеРаздела, СчетчикСегментов) Экспорт

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 (часть %2)'"), НазваниеРаздела, СчетчикСегментов);

КонецФункции

Функция ДоступностьИННВОрганизации() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПоступлениеУслугЛизинга

Процедура СформироватьПроводкиСписаниеНДСПоАренднымОбязательствам(ДанныеДвижений, РеквизитыПроводок, НДСВключенВСтоимость, Движения, Отказ)

	Если РеквизитыПроводок.Свойство("ПодразделениеКт") Тогда
		Подразделение = РеквизитыПроводок.ПодразделениеКт;
	Иначе
		Подразделение = Неопределено;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
		Проводка.Сумма = СтрокаТаблицы.НДС;

		Если НДСВключенВСтоимость Тогда
			
			Проводка.СчетДт = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("ПланСчетов.Хозрасчетный.ПрочиеРасходы");
			СтатьяДоходов = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("СписаниеВыделенногоНДСНаПрочиеРасходы");
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт,
				Проводка.СубконтоДт,
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
				СтатьяДоходов);
			
			Проводка.СуммаПРДт = СтрокаТаблицы.НДС;
			
		Иначе
			
			Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				1, РеквизитыПроводок.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				2, РеквизитыПроводок.СубконтоКт2);
			
		КонецЕсли;
			
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Подразделение;
		КонецЕсли;
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = РеквизитыПроводок.ВалютаКт;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;

		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			1, РеквизитыПроводок.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			2, РеквизитыПроводок.СубконтоКт2);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = РеквизитыПроводок.ВалютаКт;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияПоступлениеПредметовЛизингаОтПоставщика(ТаблицаПредметыЛизинга, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПредметыЛизинга) Тогда
		Возврат;
	КонецЕсли;	
	
	Параметры = ПодготовитьПараметрыПоступлениеПредметовЛизингаОтПоставщика(ТаблицаПредметыЛизинга, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.ПредметыЛизинга, Реквизиты, Неопределено, "СчетУчета");
	
	ПлательщикНДС               = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСДо2014Года = УчетнаяПолитика.РаздельныйУчетНДСДо2014Года(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19  = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	НДСВключенВСтоимость        = Реквизиты.НДСВключенВСтоимость И НЕ РаздельныйУчетНДСНаСчете19;
	
	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеПредметовЛизинга(Параметры.ПредметыЛизинга, Реквизиты);
	
	// Бухгалтерские проводки
	Если НЕ НДСВключенВСтоимость
		И ДанныеДвижений.Итог("НДС") <> 0 Тогда
		
		СформироватьПроводкиПоступлениеПредметовЛизинга(ДанныеДвижений, Реквизиты, Движения, Отказ);
	
	КонецЕсли;
	
	Если ПлательщикНДС И РаздельныйУчетНДСДо2014Года Тогда
		
		// Сформируем проводки для целей партионного учета НДС.
		УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(
			Параметры.ПредметыЛизинга, Реквизиты, Движения, Отказ);
		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеПредметовЛизингаОтПоставщика(ТаблицаПредметыЛизинга, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ЭлектронныеУслуги,"              // <Булево>
	+ "ВидАгентскогоДоговора,"          // <ПеречислениеСсылка.ВидыАгентскихДоговоров>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов,"           // <СправочникСсылка.Валюты>
	+ "Склад"                           // <СправочникСсылка.Склады>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Нематериальные активы
	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"           // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "СтавкаНДС,"              // <ПеречислениеСсылка.СтавкиНДС>
	+ "Количество,"             // <Число,15,3>
	+ "Содержание,"             // <Строка,150> - содержание для проводок
	+ "СуммаБезНДСРуб,"         // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"            // <Число,15,2> - сумма НДС в рублях
	+ "СуммаНДСВзаиморасчетов," // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СчетУчетаНДС"            // <ПланСчетовСсылка.Хозрасчетный>
	;
	Параметры.Вставить("ПредметыЛизинга", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПредметыЛизинга, СписокОбязательныхКолонок));
		
	Реквизиты = Параметры.Реквизиты[0];
	
	// Документом партии и документом-основанием счета-фактуры при поступлении от поставщика выступает документ поступления
	Параметры.ПредметыЛизинга.Колонки.Добавить("Партия",      Документы.ТипВсеСсылки());
	Параметры.ПредметыЛизинга.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.ПредметыЛизинга.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия,СчетФактура");
	// Склад берем Из шапки документа поступления
	Параметры.ПредметыЛизинга.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Параметры.ПредметыЛизинга.ЗаполнитьЗначения(Реквизиты.Склад, "Склад");
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийПоступлениеПредметовЛизинга(ПредметыЛизинга, Реквизиты)

	ДанныеДвижений = ПредметыЛизинга.Скопировать(,
		"СчетУчетаНДС,Содержание,СуммаНДСРуб,СуммаНДСВзаиморасчетов");
	ДанныеДвижений.Свернуть(
		"СчетУчетаНДС,Содержание,", "СуммаНДСРуб,СуммаНДСВзаиморасчетов");

	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";
	
	Возврат ДанныеДвижений;
	
КонецФункции

Процедура СформироватьПроводкиПоступлениеПредметовЛизинга(ДанныеДвижений, Реквизиты, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты",  Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Договоры", Реквизиты.ДоговорКонтрагента);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			1, Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			2, Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			3, Реквизиты.Регистратор);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Функция осуществляет поиск в информационной базе счета-фактуры по переданным реквизитам
//
// Параметры
//
// НомерСчетаФактуры                             - строка
// ДатаСчетаФактуры                              - дата
// НомерИсправленияСчетаФактуры                  - число
// ДатаИсправленияСчетаФактуры                   - дата
// НомерКорректировочногоСчетаФактуры            - строка 
// ДатаКорректировочногоСчетаФактуры             - дата
// НомерИсправленияКорректировочногоСчетаФактуры - число
// ДатаИсправленияКорректировочногоСчетаФактуры  - дата
//
// ИННКонтрагента - строка
// Организация - СправочникСсылка.Организации
// СчетФактураВыданный - Булево - "Истина" при проверке разделов 9, 9.1, 10 (кроме графы с реквизитами счета-фактуры продавца), 12
//
Функция НайтиСчетФактуруПоРеквизитам(ПараметрыПоиска) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПоиска.НомерСчетаФактуры)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПоиска.ДатаСчетаФактуры) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПоиска.ИННКонтрагента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПоиска.Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИННОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПоиска.Организация, "ИНН");
	
	Если СокрЛП(ИННОрганизации) = СокрЛП(ПараметрыПоиска.ИННКонтрагента) Тогда 
		// Повторная регистрация счета-фактуры, однозначно определить документ по реквизитам невозможно
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И НЕ Контрагенты.ОбособленноеПодразделение
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИНН", СокрЛП(ПараметрыПоиска.ИННКонтрагента));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаКонтрагентов = Результат.Выгрузить();
	МассивКонтрагентов = ТаблицаКонтрагентов.ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	Запрос.УстановитьПараметр("Организация", ПараметрыПоиска.Организация);
	
	Запрос.УстановитьПараметр("НомерСчетаФактуры", ПараметрыПоиска.НомерСчетаФактуры);
	Запрос.УстановитьПараметр("ДатаСчетаФактуры", НачалоДня(ПараметрыПоиска.ДатаСчетаФактуры));
	Запрос.УстановитьПараметр("НомерИсправленияСчетаФактуры", ПараметрыПоиска.НомерИсправленияСчетаФактуры);
	Запрос.УстановитьПараметр("ДатаИсправленияСчетаФактуры", НачалоДня(ПараметрыПоиска.ДатаИсправленияСчетаФактуры));
	Запрос.УстановитьПараметр("НомерКорректировочногоСчетаФактуры", ПараметрыПоиска.НомерКорректировочногоСчетаФактуры);
	Запрос.УстановитьПараметр("ДатаКорректировочногоСчетаФактуры", НачалоДня(ПараметрыПоиска.ДатаКорректировочногоСчетаФактуры));
	Запрос.УстановитьПараметр("НомерИсправленияКорректировочногоСчетаФактуры", ПараметрыПоиска.НомерИсправленияКорректировочногоСчетаФактуры);
	Запрос.УстановитьПараметр("ДатаИсправленияКорректировочногоСчетаФактуры", НачалоДня(ПараметрыПоиска.ДатаИсправленияКорректировочногоСчетаФактуры));
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПоиска.НомерКорректировочногоСчетаФактуры) Тогда
		
		// Счет-фактура
		
		// Осуществляется поиск по реквизитам
		// НомерСчетаФактуры, ДатаСчетаФактуры
		// НомерИсправленияСчетаФактуры, ДатаИсправленияСчетаФактуры
		
		Если ПараметрыПоиска.СчетФактураВыданный Тогда
			
			Если НЕ ЗначениеЗаполнено(ПараметрыПоиска.НомерИсправленияСчетаФактуры) Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка КАК СчетФактура
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
				|	И СчетФактураВыданный.Организация = &Организация
				|	И СчетФактураВыданный.Контрагент В(&МассивКонтрагентов)
				|	И СчетФактураВыданный.ПредставлениеНомера = &НомерСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) = &ДатаСчетаФактуры
				|	И НЕ СчетФактураВыданный.ПометкаУдаления";
				
			Иначе
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка КАК СчетФактура
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
				|	И СчетФактураВыданный.Организация = &Организация
				|	И СчетФактураВыданный.Контрагент В(&МассивКонтрагентов)
				|	И СчетФактураВыданный.НомерИсходногоДокумента = &НомерСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураВыданный.ДатаИсходногоДокумента, ДЕНЬ) = &ДатаСчетаФактуры
				|	И СчетФактураВыданный.НомерИсправления = &НомерИсправленияСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) = &ДатаИсправленияСчетаФактуры
				|	И НЕ СчетФактураВыданный.ПометкаУдаления";
			
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ПараметрыПоиска.НомерИсправленияСчетаФактуры) Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СчетФактураПолученный.Ссылка КАК СчетФактура
				|ИЗ
				|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
				|ГДЕ
				|	СчетФактураПолученный.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
				|	И СчетФактураПолученный.Организация = &Организация
				|	И СчетФактураПолученный.Контрагент В(&МассивКонтрагентов)
				|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаСчетаФактуры
				|	И НЕ СчетФактураПолученный.ПометкаУдаления";
				
			Иначе
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СчетФактураПолученный.Ссылка КАК СчетФактура
				|ИЗ
				|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
				|ГДЕ
				|	СчетФактураПолученный.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
				|	И СчетФактураПолученный.Организация = &Организация
				|	И СчетФактураПолученный.Контрагент В(&МассивКонтрагентов)
				|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаСчетаФактуры
				|	И СчетФактураПолученный.НомерИсправления = &НомерИсправленияСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаИсправления, ДЕНЬ) = &ДатаИсправленияСчетаФактуры
				|	И НЕ СчетФактураПолученный.ПометкаУдаления";
			
			КонецЕсли;
	
		КонецЕсли;
		
	Иначе
		
		// Корректировочный счет-фактура
		
		// Осуществляется поиск по реквизитам
		// НомерСчетаФактуры, ДатаСчетаФактуры
		// НомерИсправленияСчетаФактуры, ДатаИсправленияСчетаФактуры
		// НомерКорректировочногоСчетаФактуры, ДатаКорректировочногоСчетаФактуры
		// НомерИсправленияКорректировочногоСчетаФактуры, ДатаИсправленияКорректировочногоСчетаФактуры
		
		Если ПараметрыПоиска.СчетФактураВыданный Тогда
			
			Если НЕ ЗначениеЗаполнено(ПараметрыПоиска.НомерИсправленияКорректировочногоСчетаФактуры) Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка КАК СчетФактура
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураДокументыОснования
				|		ПО СчетФактураВыданный.Ссылка = СчетФактураДокументыОснования.Ссылка
				|ГДЕ
				|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
				|	И СчетФактураВыданный.Организация = &Организация
				|	И СчетФактураВыданный.Контрагент В(&МассивКонтрагентов)
				|	И СчетФактураВыданный.ПредставлениеНомера = &НомерКорректировочногоСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) = &ДатаКорректировочногоСчетаФактуры
				|	И СчетФактураДокументыОснования.НомерИсходногоДокумента = &НомерСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураДокументыОснования.ДатаИсходногоДокумента, ДЕНЬ) = &ДатаСчетаФактуры
				|	И СчетФактураДокументыОснования.НомерИсправленияИсходногоДокумента = &НомерИсправленияСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураДокументыОснования.ДатаИсправленияИсходногоДокумента, ДЕНЬ) = &ДатаИсправленияСчетаФактуры
				|	И НЕ СчетФактураВыданный.ПометкаУдаления";
				
			Иначе
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка КАК СчетФактура
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураДокументыОснования
				|		ПО СчетФактураВыданный.Ссылка = СчетФактураДокументыОснования.Ссылка
				|ГДЕ
				|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
				|	И СчетФактураВыданный.Организация = &Организация
				|	И СчетФактураВыданный.Контрагент В(&МассивКонтрагентов)
				|	И СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента = &НомерКорректировочногоСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента, ДЕНЬ) = &ДатаКорректировочногоСчетаФактуры
				|	И СчетФактураВыданный.НомерИсправления = &НомерИсправленияКорректировочногоСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) = &ДатаИсправленияКорректировочногоСчетаФактуры
				|	И СчетФактураДокументыОснования.НомерИсходногоДокумента = &НомерСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураДокументыОснования.ДатаИсходногоДокумента, ДЕНЬ) = &ДатаСчетаФактуры
				|	И СчетФактураДокументыОснования.НомерИсправленияИсходногоДокумента = &НомерИсправленияСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураДокументыОснования.ДатаИсправленияИсходногоДокумента, ДЕНЬ) = &ДатаИсправленияСчетаФактуры
				|	И НЕ СчетФактураВыданный.ПометкаУдаления";
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ПараметрыПоиска.НомерИсправленияКорректировочногоСчетаФактуры) Тогда
			
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СчетФактураПолученный.Ссылка КАК СчетФактура
				|ИЗ
				|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураДокументыОснования
				|		ПО СчетФактураПолученный.Ссылка = СчетФактураДокументыОснования.Ссылка
				|ГДЕ
				|	СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
				|	И СчетФактураПолученный.Организация = &Организация
				|	И СчетФактураПолученный.Контрагент В (&МассивКонтрагентов)
				|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерКорректировочногоСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаКорректировочногоСчетаФактуры
				|	И СчетФактураДокументыОснования.НомерИсходногоДокумента = &НомерСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураДокументыОснования.ДатаИсходногоДокумента, ДЕНЬ) = &ДатаСчетаФактуры
				|	И СчетФактураДокументыОснования.НомерИсправленияИсходногоДокумента = &НомерИсправленияСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураДокументыОснования.ДатаИсправленияИсходногоДокумента, ДЕНЬ) = &ДатаИсправленияСчетаФактуры
				|	И НЕ СчетФактураПолученный.ПометкаУдаления";

			Иначе
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СчетФактураПолученный.Ссылка КАК СчетФактура
				|ИЗ
				|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураДокументыОснования
				|		ПО СчетФактураПолученный.Ссылка = СчетФактураДокументыОснования.Ссылка
				|ГДЕ
				|	СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
				|	И СчетФактураПолученный.Организация = &Организация
				|	И СчетФактураПолученный.Контрагент В (&МассивКонтрагентов)
				|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерКорректировочногоСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаКорректировочногоСчетаФактуры
				|	И СчетФактураПолученный.НомерИсправления = &НомерИсправленияКорректировочногоСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаИсправления, ДЕНЬ) = &ДатаИсправленияКорректировочногоСчетаФактуры
				|	И СчетФактураДокументыОснования.НомерИсходногоДокумента = &НомерСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураДокументыОснования.ДатаИсходногоДокумента, ДЕНЬ) = &ДатаСчетаФактуры
				|	И СчетФактураДокументыОснования.НомерИсправленияИсходногоДокумента = &НомерИсправленияСчетаФактуры
				|	И НАЧАЛОПЕРИОДА(СчетФактураДокументыОснования.ДатаИсправленияИсходногоДокумента, ДЕНЬ) = &ДатаИсправленияСчетаФактуры
				|	И НЕ СчетФактураПолученный.ПометкаУдаления";
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СчетФактура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область ПроверкаКонтрагентаНаФорматныйКонтроль

Функция ФорматныйКонтрольИННиКППКонтрагентаПройден(Контрагент, ТипСчетФактуры, ВыводитьСообщенияАдресно = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ФорматныйКонтрольПройден = Истина;
	ТекстОшибкиИНН = "";
	ТекстОшибкиКПП = "";
	
	СтруктураДляПроверки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Контрагент, 
		"СтранаРегистрации, ИНН, КПП, ИННВведенКорректно, КППВведенКорректно, ЮридическоеФизическоеЛицо, ОбособленноеПодразделение");
		
	// Для иностранцев особый порядок проверки, КПП проверяем если только заполнен.
	ИностранныйКонтрагент =  
		СтруктураДляПроверки.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	ИностранецБезКПП = ИностранныйКонтрагент И НЕ ЗначениеЗаполнено(СтруктураДляПроверки.КПП);
		
	Если СтруктураДляПроверки.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		// Если хотя бы одно поле заполнено, то обязательно проверяем оба. Так как отдельно ИНН или КПП не имеет смысла
		Если ЗначениеЗаполнено(СтруктураДляПроверки.ИНН) ИЛИ ЗначениеЗаполнено(СтруктураДляПроверки.КПП) Тогда
			СтруктураДляПроверки.Вставить("ПроверитьИНН", НЕ СтруктураДляПроверки.ИННВведенКорректно);
			СтруктураДляПроверки.Вставить("ПроверитьКПП", НЕ СтруктураДляПроверки.КППВведенКорректно И НЕ ИностранецБезКПП);
		Иначе
			СтруктураДляПроверки.Вставить("ПроверитьИНН", Ложь);
			СтруктураДляПроверки.Вставить("ПроверитьКПП", Ложь);
		КонецЕсли;
	Иначе
		СтруктураДляПроверки.Вставить("ПроверитьИНН", (ЗначениеЗаполнено(СтруктураДляПроверки.ИНН) И НЕ СтруктураДляПроверки.ИННВведенКорректно));
		СтруктураДляПроверки.Вставить("ПроверитьКПП", Ложь);
	КонецЕсли;
	
	ЭтоЮрЛицо = (СтруктураДляПроверки.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	Если СтруктураДляПроверки.ПроверитьИНН Тогда
		РезультатПроверки =  ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(СтруктураДляПроверки.ИНН, ЭтоЮрЛицо);
		Если НЕ РезультатПроверки.СоответствуетТребованиям ИЛИ РезультатПроверки.ЭтоЮрЛицо <> ЭтоЮрЛицо Тогда
			ФорматныйКонтрольПройден = Ложь;
			ТекстОшибкиИНН = СтрШаблон(
				НСтр("ru='В контрагенте неверно указан ИНН: %1.
				|%2.'"),
				СтруктураДляПроверки.ИНН,
				РезультатПроверки.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДляПроверки.ПроверитьКПП Тогда
		РезультатПроверки =  ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(СтруктураДляПроверки.КПП, ЭтоЮрЛицо, СтруктураДляПроверки.ОбособленноеПодразделение);
		Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
			ФорматныйКонтрольПройден = Ложь;
			Если ПустаяСтрока(СтруктураДляПроверки.КПП) Тогда
				ТекстОшибкиКПП = СтрШаблон(
					НСтр("ru='В контрагенте не указан КПП.'"));
			Иначе
				ТекстОшибкиКПП = СтрШаблон(
					НСтр("ru='В контрагенте неверно указан КПП: %1.
					|%2.'"),
					СтруктураДляПроверки.КПП,
					РезультатПроверки.ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ФорматныйКонтрольПройден Тогда
		Возврат Истина;
	// Если форматный контроль не пройден, то выводим сообщения
	Иначе
		ВыписанЗарегистрирован = ?((ТипСчетФактуры = "Выданный"), НСтр("ru='выписан'"), НСтр("ru='зарегистрирован'"));
		// Выводим сообщения с привязкой к полю
		Если ВыводитьСообщенияАдресно Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Счет-фактура не %1!'"), ВыписанЗарегистрирован));
			Если НЕ ПустаяСтрока(ТекстОшибкиИНН) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИНН,, "Контрагент", "Объект");
			КонецЕсли;
			Если НЕ ПустаяСтрока(ТекстОшибкиКПП) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиКПП,, "Контрагент", "Объект");
			КонецЕсли;
		// Выводим одно общее сообщение (используется для счет-фактур в табличных частях)
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru='Для %1 счет-фактура не %2!'"), Контрагент, ВыписанЗарегистрирован);
			Если НЕ ПустаяСтрока(ТекстОшибкиИНН) Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОшибкиИНН;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ТекстОшибкиКПП) Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОшибкиКПП;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции

Функция ФорматныйКонтрольИННиКПППоСчетуФактуреПройден(Объект) Экспорт

	// Объект в данном случае может отсутствовать в ИБ, поэтому запрос к нему выполнять нельзя
	Контрагент     = Объект.Контрагент;
	КППКонтрагента = Объект.КППКонтрагента;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Не выполняем проверки для корректировочных счетов-фактур и для перевозочных документов,
	// отражаемых в программе в виде полученных счетов-фактур с признаком "Бланк строгой отчетности".
	Если ТипЗнч(Объект.ВидСчетаФактуры) = Тип("ПеречислениеСсылка.ВидСчетаФактурыВыставленного") 
		И Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(Объект.ВидСчетаФактуры) = Тип("ПеречислениеСсылка.ВидСчетаФактурыПолученного") 
		И (Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный
		   ИЛИ Объект.БланкСтрогойОтчетности) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ФорматныйКонтрольПройден = Истина;
	
	СтруктураДляПроверки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Контрагент,
		"СтранаРегистрации, ИНН, КПП, ИННВведенКорректно, КППВведенКорректно, ЮридическоеФизическоеЛицо, ОбособленноеПодразделение");
		
	// Для иностранцев особый порядок проверки, КПП проверяем если только заполнен.
	ИностранныйКонтрагент =  
		СтруктураДляПроверки.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	ИностранецБезКПП = ИностранныйКонтрагент И НЕ ЗначениеЗаполнено(СтруктураДляПроверки.КПП);
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ИННКонтрагента", Объект.Метаданные())
		И ЗначениеЗаполнено(Объект.ИННКонтрагента) Тогда
		ИННКонтрагента = Объект.ИННКонтрагента;
	Иначе
		ИННКонтрагента = Неопределено;
	КонецЕсли;
	
	// Если пользователь указал КПП контрагента в форме, то проверяем его обязательно.
	Если НЕ ПустаяСтрока(ИННКонтрагента) Тогда
		СтруктураДляПроверки.ИНН                = ИННКонтрагента;
		СтруктураДляПроверки.ИННВведенКорректно = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КППКонтрагента) Тогда
		СтруктураДляПроверки.КПП                = КППКонтрагента;
		СтруктураДляПроверки.КППВведенКорректно = Ложь;
	КонецЕсли;
	
	// Если хотя бы одно поле заполнено, то обязательно проверяем оба. Так как отдельно ИНН или КПП не имеет смысла
	Если СтруктураДляПроверки.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Если ЗначениеЗаполнено(СтруктураДляПроверки.ИНН) ИЛИ ЗначениеЗаполнено(СтруктураДляПроверки.КПП) Тогда
			СтруктураДляПроверки.Вставить("ПроверитьИНН", НЕ СтруктураДляПроверки.ИННВведенКорректно);
			СтруктураДляПроверки.Вставить("ПроверитьКПП", НЕ СтруктураДляПроверки.КППВведенКорректно И НЕ ИностранецБезКПП);
		Иначе
			СтруктураДляПроверки.Вставить("ПроверитьИНН", Ложь);
			СтруктураДляПроверки.Вставить("ПроверитьКПП", Ложь);
		КонецЕсли;
	Иначе
		СтруктураДляПроверки.Вставить("ПроверитьИНН", (ЗначениеЗаполнено(СтруктураДляПроверки.ИНН) И НЕ СтруктураДляПроверки.ИННВведенКорректно));
		СтруктураДляПроверки.Вставить("ПроверитьКПП", Ложь);
	КонецЕсли;
	
	ЭтоЮрЛицо = (СтруктураДляПроверки.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	Если СтруктураДляПроверки.ПроверитьИНН Тогда
		РезультатПроверки =  ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(СтруктураДляПроверки.ИНН, ЭтоЮрЛицо);
		Если НЕ РезультатПроверки.СоответствуетТребованиям ИЛИ ЭтоЮрЛицо <> РезультатПроверки.ЭтоЮрЛицо Тогда
			ФорматныйКонтрольПройден = Ложь;
			ТекстОшибкиИНН = СтрШаблон(
				НСтр("ru='В контрагенте неверно указан ИНН: %1.
				|%2.'"),
				СтруктураДляПроверки.ИНН,
				РезультатПроверки.ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИНН, Объект, "Контрагент");
		КонецЕсли; 
	КонецЕсли;
	
	Если СтруктураДляПроверки.ПроверитьКПП Тогда
		РезультатПроверки =  ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(СтруктураДляПроверки.КПП, ЭтоЮрЛицо, СтруктураДляПроверки.ОбособленноеПодразделение);
		Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
			ФорматныйКонтрольПройден = Ложь;
			
			Если ПустаяСтрока(СтруктураДляПроверки.КПП) Тогда
				ТекстОшибкиКПП = НСтр("ru='В контрагенте не указан КПП.'");
			ИначеЕсли РезультатПроверки.ОписаниеОшибки = "Введен КПП обособленного подразделения. Измените вид контрагента" Тогда
				// Если указан КПП обособленного контрагента в счет-фактуре, то не считаем ошибкой некорректный вид контрагента
				ФорматныйКонтрольПройден = Истина;
			Иначе
				ТекстОшибкиКПП = СтрШаблон(
					НСтр("ru='В контрагенте неверно указан КПП: %1.
					|%2.'"),
					СтруктураДляПроверки.КПП,
					РезультатПроверки.ОписаниеОшибки);
			КонецЕсли;
			// В зависимости от того, где КПП указал пользователь выводим ошибку к тому полю
			Если ПустаяСтрока(КППКонтрагента) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиКПП, Объект, "Контрагент");
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиКПП, Объект, ,"ПредставлениеКППКонтрагента");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФорматныйКонтрольПройден;
	
КонецФункции

Функция ПроверятьКонтрагентаНаФорматныйКонтрольВДокументе(ДокументОснование) Экспорт
	
	// Не проверяем на форматный контроль контрагента для счетов-фактур, созданных на основании следующих документов
	МассивНеПроверяемыхТиповДокументов = Новый Массив;
	// "Корректировка реализации" - Проверка была выполнена для первичного счета-фактуры.
	МассивНеПроверяемыхТиповДокументов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	// "Начисление НДС по СМР хоз способом" - В качестве контрагента используется наша организация.
	МассивНеПроверяемыхТиповДокументов.Добавить(Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом"));
	
	НеПроверяемыеДокументы = Новый ОписаниеТипов(МассивНеПроверяемыхТиповДокументов);
	ПроверяемыйДокумент    = ТипЗнч(ДокументОснование);
	ПроверятьКонтрагента   = НЕ НеПроверяемыеДокументы.СодержитТип(ПроверяемыйДокумент);
	
	Возврат ПроверятьКонтрагента;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийНДСПоАренднымОбязательствам(Услуги, Реквизиты)

	ДанныеДвижений = Услуги.СкопироватьКолонки(
		"СчетЗатрат,СчетУчетаНДС,Содержание,СуммаНДСРуб,СуммаНДСВзаиморасчетов");
	
	Для Каждого СтрокаТаблицы Из Услуги Цикл
		
		Если СтрокаТаблицы.СчетЗатрат = ПланыСчетов.Хозрасчетный.АрендныеОбязательства Тогда
			СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствам;
		ИначеЕсли СтрокаТаблицы.СчетЗатрат = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ Тогда
			СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствамУЕ;
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеДвижений.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ,"СчетУчетаНДС");
		НоваяСтрока.СчетУчетаНДС = СчетУчетаНДС;
		
	КонецЦикла;
	
	ДанныеДвижений.Свернуть("СчетЗатрат,СчетУчетаНДС,Содержание", "СуммаНДСРуб,СуммаНДСВзаиморасчетов");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";

	Возврат ДанныеДвижений;

КонецФункции

#КонецОбласти 

#Область ТаможеннаяДекларацияЭкспорт

Процедура СформироватьДвиженияТаможеннаяДекларацияЭкспорт(ТаблицаСведения, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаСведения) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыДвиженийТаможеннаяДекларацияЭкспорт(ТаблицаСведения, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаСведения Цикл
		Движение = Движения.СведенияТаможенныхДекларацийЭкспорт.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
	КонецЦикла;

	Движения.СведенияТаможенныхДекларацийЭкспорт.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийТаможеннаяДекларацияЭкспорт(ТаблицаСведения, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСведения

	СписокОбязательныхКолонок = ""
	+ "ДокументОтгрузки,"          // <ДокументСсылка.РеализацияТоваровУслуг>
	+ "НомерТаможеннойДекларации," // <Строка, 29>
	+ "КодОперации,"               // <Строка, 7>
	+ "КодТС,"                     // <Строка, 2>
	+ "ВидДокумента,"              // <Строка, 2>
	+ "НомерТСД,"                  // <Строка, 50>
	+ "ДатаТСД,"                   // <Дата>
	+ "Примечание";                // <Строка, 0>

	Параметры.Вставить("ТаблицаСведения",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСведения, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"               // <ДокументСсылка.ТаможеннаяДекларацияЭкспорт>
	+ "Период,"                    // <Дата>
	+ "Организация";               // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ВедетсяУчетНДСНеплательщиковПоФЗ84(Дата) Экспорт

	Возврат Дата >= '20160101';

КонецФункции

Процедура РаспределитьНачисленныйПриОтгрузкеНДСПоТаблице(ТаблицаРеализованныеТовары, Реквизиты, ИменаКолонок) Экспорт
	
	ЭтоРеализацияОсновногоСредства = ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС");
	Если ЭтоРеализацияОсновногоСредства Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДокументОтгрузки, "Дата");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОтгрузки", Реквизиты.ДокументОтгрузки);
	Запрос.УстановитьПараметр("Организация",      Реквизиты.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",    НачалоДня(ДатаОснования));
	Запрос.УстановитьПараметр("КонецПериода",     КонецДня(ДатаОснования));
	Запрос.УстановитьПараметр("ДатаРеализации",   Реквизиты.Период);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС
	|ПОМЕСТИТЬ ВТ_ОборотыОтгрузки
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ДокументОтгрузки) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(-НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0),
	|	ЕСТЬNULL(-НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0)
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(&НачалоПериода, &ДатаРеализации, , ) КАК НДСЗаписиКнигиПокупокОбороты
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = НДСЗаписиКнигиПокупокОбороты.СчетФактура
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Проведен
	|	И ВозвратТоваровОтПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары)
	|	И ВозвратТоваровОтПокупателя.Сделка = &ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_ОборотыОтгрузки.НДС) КАК НДС,
	|	СУММА(ВТ_ОборотыОтгрузки.СуммаБезНДС) КАК СуммаБезНДС
	|ИЗ
	|	ВТ_ОборотыОтгрузки КАК ВТ_ОборотыОтгрузки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			Выборка.НДС,
			ТаблицаРеализованныеТовары,
			ИменаКолонок.НДС);
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			Выборка.СуммаБезНДС,
			ТаблицаРеализованныеТовары,
			ИменаКолонок.СуммаБезНДС);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПередачаОС(ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "ПравоСобственностиПереходитПослеГосРегистрации," // <Булево> - признак реалиации объекта недвижимости
	+ "Период,"                                         // <Дата>
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "КодОперацииПоСделке,"            // <СправочникСсылка.КодыОперацийРаздела7ДекларацииПоНДС> - 
	                                    // код операции для раздела 7 Декларации по НДС, указанный в договоре контрагента.
	+ "НДСИсчисляетсяНалоговымАгентом," // <Булево> - признак покупателя-налогового агента.
	+ "Организация"                     // <СправочникСсылка.Организации>
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Преобразует переданный код вида операции в актуальный на переданную версию кодов
// Параметры:
//   КодВидаОперации - Строка - код операции, который необходимо преобразовать в актуальный
//   ВерсияКодовВидовОпераций - Число - номер версии кодов см. УчетНДСКлиентСервер.ВерсияКодовВидовОпераций
// Возвращаемое значение:
//  Строка - код операции
Функция АктуальныйКодВидаОперации(КодВидаОперации, ВерсияКодовВидовОпераций) Экспорт
	
	Если ВерсияКодовВидовОпераций < 3 Тогда
		Возврат КодВидаОперации;
	КонецЕсли;
	
	Если КодВидаОперации = "03"
	 ИЛИ КодВидаОперации = "04"
	 ИЛИ КодВидаОперации = "07"
	 ИЛИ КодВидаОперации = "08"
	 ИЛИ КодВидаОперации = "09"
	 ИЛИ КодВидаОперации = "11" Тогда
		Возврат "01";
	ИначеЕсли КодВидаОперации = "05"
		ИЛИ КодВидаОперации = "02;05"
		ИЛИ КодВидаОперации = "05;02"
		ИЛИ КодВидаОперации = "12" Тогда
		Возврат "02";
	ИначеЕсли КодВидаОперации = "01;04"
		ИЛИ КодВидаОперации = "04;01" Тогда
		Возврат "15";
	Иначе
		Возврат КодВидаОперации;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область УправлениеФормой

Процедура ПрименитьПраваДоступаСчетаФактуры(СчетФактура, ПолеПросмотр, ПолеРедактирование) Экспорт
	
	ОбъектМетаданных = СчетФактура.Метаданные();
	ПолеПросмотр.Видимость       = ПравоДоступа("Просмотр",       ОбъектМетаданных);
	ПолеРедактирование.Видимость = ПравоДоступа("Редактирование", ОбъектМетаданных);
	
КонецПроцедуры

#КонецОбласти

#Область ПраваДоступа

// Выполняет проверку прав пользователя на регистрацию счета-фактуры.
//
// Параметры:
//  ВидСФ - ПеречисленияСсылка.ВидСчетаФактурыВыставленного, ПеречисленияСсылка.ВидСчетаФактурыПолученного.
//
// Возвращаемое значение:
//  Булево - Истина если регистрация разрешена.
//
Функция ПравоРегистрироватьВидСчетаФактуры(ВидСФ) Экспорт
	
	Результат = Ложь;
	
	// Считаем, что пользователь может регистрировать счета-фактуры если у него есть права хотя бы
	// на один тип документа-основания.
	Если ВидСФ = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
	 Или ВидСФ = Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка
	 Или ВидСФ = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка
	 Или ВидСФ = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
	 Или ВидСФ = Перечисления.ВидСчетаФактурыПолученного.Корректировочный
	 Или ВидСФ = Перечисления.ВидСчетаФактурыПолученного.НаАванс
	 Или ВидСФ = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента
	 Или ВидСФ = Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда
		
		Если ТипЗнч(ВидСФ) = Тип("ПеречислениеСсылка.ВидСчетаФактурыВыставленного") Тогда
			ТипыОснованийПоВидуСФ = УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(ВидСФ);
		Иначе
			ТипыОснованийПоВидуСФ = УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыПолученного(ВидСФ);
		КонецЕсли;
		
		Для Каждого ТипОснования Из ТипыОснованийПоВидуСФ Цикл
			
			МетаданныеОснования = Метаданные.НайтиПоТипу(ТипОснования);
			Если ПравоДоступа("Редактирование", МетаданныеОснования) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	// Считаем, что пользователь может регистрировать счета-фактуры этого вида если у него есть
	// права на специализированные обработки по регистрации счетов-фактур.
	ИначеЕсли ВидСФ = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
	      Или ВидСФ = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
	      Или ВидСФ = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
	      Или ВидСФ = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		
		Результат = ПравоДоступа("Использование", Метаданные.Обработки.РегистрацияСчетовФактурНаАванс);
		
	ИначеЕсли ВидСФ = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		
		Результат = ПравоДоступа("Использование", Метаданные.Обработки.РегистрацияСчетовФактурНаСуммовыеРазницы);
		
	ИначеЕсли ВидСФ = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		
		Результат = ПравоДоступа("Использование", Метаданные.Обработки.РегистрацияСчетовФактурНалоговогоАгента);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак применения Федерального Закона 56-ФЗ
//
// Параметры
// Дата - тип дата, в данном параметре передается
//        дата на которую необходимо определить признак применения 56-ФЗ
// Возвращаемое значение:
//  Булево - признак применения
//           Истина - ФЗ-56 применяется
//           Ложь   - ФЗ-56 не применяется
//
Функция ВедетсяУчетНДСПоФЗ56(Дата) Экспорт
	
	НачалоПримененияФЗ56 = '20170701';
	
	Если Дата < НачалоПримененияФЗ56 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ВедетсяУчетНДСПоФЗ56()

#КонецОбласти

#Область НДСИсчисляетсяНалоговымАгентомПокупателем

Функция НадписьСуммаНДСИсчисляетсяНалоговымАгентом() Экспорт
	
	Возврат НСтр("ru='--'");
	
КонецФункции

Функция НадписьСтавкаНДСИсчисляетсяНалоговымАгентом() Экспорт
	
	Возврат НСтр("ru='НДС исчисляется налоговым агентом'");
	
КонецФункции

// Возвращает признак применения Федерального Закона от 27.11.2017 №335-ФЗ,
// который возлагает исчисление НДС на покупателя товаров, перечисленных в п.8 ст. 161:
// - лом и отходы черных и цветных металлов,
// - алюминий вторичный и его сплавы,
// - сырые шкуры животных.
// Параметры
// Дата - тип дата, в данном параметре передается
//        дата на которую необходимо определить признак применения 335-ФЗ
// Возвращаемое значение:
//  Булево - признак применения
//           Истина - ФЗ применяется
//           Ложь   - ФЗ не применяется
Функция ВедетсяУчетНДСПоФЗ335(Дата) Экспорт
	
	НачалоПримененияФЗ335 = '20180101';
	
	Если Дата < НачалоПримененияФЗ335 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Копирует из таблицы ТоварыУслуги строки по ставке 0%.
// Если раздельный учет НДС не ведется копируются строки с несырьевым товаром.
Функция ТоварыУслугиПоСтавке0(ТоварыУслуги, РаздельныйУчетНДС)
	
	СтруктураОтбораСтрок = Новый Структура();
	СтруктураОтбораСтрок.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС0);
	ИндексируемыеКолонки = "СтавкаНДС";
	
	Если НЕ РаздельныйУчетНДС Тогда
		СтруктураОтбораСтрок.Вставить("ЭтоНесырьевойТовар", Истина);
		ИндексируемыеКолонки = "СтавкаНДС,ЭтоНесырьевойТовар";
	КонецЕсли;
	
	ТоварыУслуги.Индексы.Добавить(ИндексируемыеКолонки);
	Возврат ТоварыУслуги.Скопировать(СтруктураОтбораСтрок);
	
КонецФункции

// Возвращает Истина, если в переданной таблице есть строки по ставке 0%.
Функция ЕстьТоварыУслугиПоСтавке0(ТаблицаТоварыУслуги)
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоварыУслуги Цикл
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура СформироватьДвиженияПеревыставленныйСчетФактураНалоговогоАгента(ТаблицаРеквизиты, ТаблицаПеревыставленныйСчетФактура, ЗачетАвансовТаблицаАвансов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПеревыставленныйСчетФактура) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПеревыставленСчетФактураНалоговогоАгента(ТаблицаПеревыставленныйСчетФактура);

	// Зачет аванса комитента
	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ЗачетАвансовТаблицаАвансов,
		Неопределено,
		ТаблицаРеквизиты, 
		Отказ);
	
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(
		ТаблицаВзаиморасчетов,
		ТаблицаРеквизиты, 
		Движения, 
		Отказ);
		
	// Расходы по уплате НДС перевыставляются на комитента
	ПеревыставленныйСчетФактура = Параметры.ПеревыставленныйСчетФактура[0];
	
	СформироватьПроводкиПеревыставленныйСчетФактураНалоговогоАгента(
		ПеревыставленныйСчетФактура, Движения, Отказ);
		
	// Сумма НДС отражается в регистре "Закупленные товары комитентов" с пустой номенклатурой
	УчетТоваров.СформироватьДвиженияПоступлениеЗакупленныхТоваровУслугКомитентов(
		ТаблицаПеревыставленныйСчетФактура, ТаблицаПеревыставленныйСчетФактура, Движения, Отказ);
		
КонецПроцедуры

Функция ПодготовитьПараметрыПеревыставленСчетФактураНалоговогоАгента(ТаблицаПеревыставленныйСчетФактура)
	
	Параметры = Новый Структура();
	
	СписокОбязательныхКолонок = ""
	+ "Организация,"
	+ "Подразделение,"
	+ "Период,"
	+ "ДокументОплатыНерезиденту,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "Комитент,"
	+ "ДоговорКомитента,"
	+ "СчетРасчетов,"
	+ "СуммаНДС,"
	+ "СуммаБезНДС";

	Параметры.Вставить("ПеревыставленныйСчетФактура", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПеревыставленныйСчетФактура, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьПроводкиПеревыставленныйСчетФактураНалоговогоАгента(ПеревыставленныйСчетФактура, Движения, Отказ)
	
	Движение = Движения.Хозрасчетный.Добавить();
	
	Движение.Период = ПеревыставленныйСчетФактура.Период;
	Движение.Организация = ПеревыставленныйСчетФактура.Организация;
	Движение.Содержание  = "НДС";
	
	Движение.СчетДт = ПеревыставленныйСчетФактура.СчетРасчетов;
	Движение.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
	
	Движение.Сумма  = ПеревыставленныйСчетФактура.СуммаНДС;
	
	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", ПеревыставленныйСчетФактура.Комитент);
	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Договоры", ПеревыставленныйСчетФактура.ДоговорКомитента);
	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ДокументыРасчетовСКонтрагентами", ПеревыставленныйСчетФактура.ДокументОплатыНерезиденту);
	
	СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Движение.СчетДт);
	Если СвойстваСчетаРасчетов.УчетПоПодразделениям Тогда
		Движение.ПодразделениеДт = ПеревыставленныйСчетФактура.Подразделение;
	КонецЕсли;
	
	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоКт, "Контрагенты", ПеревыставленныйСчетФактура.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоКт, "Договоры", ПеревыставленныйСчетФактура.ДоговорКонтрагента);
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

// Возвращает признак применения Федерального Закона от 30.05.2016 №150-ФЗ,
// который обязывает указывать код ТН ВЭД в счетах-фактурах при экспорте в страны ЕАЭС.
//
// Параметры
// Дата - тип дата, в данном параметре передается
//        дата на которую необходимо определить признак применения 150-ФЗ
// Возвращаемое значение:
//  Булево - признак применения
//           Истина - ФЗ-150 применяется
//           Ложь   - ФЗ-150 не применяется
//
Функция ВедетсяУчетНДСПоФЗ150(Дата) Экспорт
	
	НачалоПримененияФЗ150 = '20160701';
	
	Если Дата < НачалоПримененияФЗ150 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает признак применения Федерального Закона от 29.09.2019 №325-ФЗ,
// который разрешает заявлять вычет по товарам, работам, услугам, приобретенным для создания НМА до
// принятия на учет самого НМА.
//
// Параметры
// Дата - тип дата, в данном параметре передается
//        дата на которую необходимо определить признак применения 325-ФЗ
// Возвращаемое значение:
//  Булево - признак применения
//           Истина - ФЗ-325 применяется
//           Ложь   - ФЗ-325 не применяется
//
Функция ВедетсяУчетНДСПоФЗ325(Дата)
	
	НачалоПримененияФЗ325 = '20200101';
	
	Если Дата < НачалоПримененияФЗ325 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу сторно записей, необходимых для проведения исправленного счета-фактуры,
// выставляемого покупателю.
// Также используется для проведения полученного счета-фактуры на выданный аванс,
// в случае если налог исчисляется налоговым агентом-покупателем (обратное начисление НДС).
Функция ТаблицаСторноНачисленияНДС(Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ИсправляемыйСчетФактура = Реквизиты.ИсправляемыйСчетФактура;
	Иначе
		ИсправляемыйСчетФактура = Реквизиты.ДокументОснование;
	КонецЕсли;
	
	МассивАвансИНалоговыйАгент = Новый Массив;
	МассивАвансИНалоговыйАгент.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	МассивАвансИНалоговыйАгент.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	
	МоментДокумента = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", ИсправляемыйСчетФактура);
	Запрос.УстановитьПараметр("МоментДокумента",         МоментДокумента);
	Запрос.УстановитьПараметр("Период",                  Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",                  Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Организация",             Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",      Реквизиты.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("АвансИНалоговыйАгент",    Новый ФиксированныйМассив(МассивАвансИНалоговыйАгент));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	ЗаписиКнигиПродаж.Покупатель КАК Покупатель,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПродаж.ВидЦенности КАК ВидЦенности,
	|	ЗаписиКнигиПродаж.СтавкаНДС КАК СтавкаНДС,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие КАК Событие,
	|	ЗаписиКнигиПродаж.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	-ЗаписиКнигиПродаж.СуммаБезНДСОборот КАК СуммаБезНДС,
	|	-ЗаписиКнигиПродаж.НДСОборот КАК НДС
	|ПОМЕСТИТЬ ЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура
	|				И ДоговорКонтрагента = &ДоговорКонтрагента
	|				И Событие В (&АвансИНалоговыйАгент)) КАК ЗаписиКнигиПродаж
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	ЗаписиКнигиПродаж.Покупатель КАК Контрагент,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПродаж.ВидЦенности КАК ВидЦенности,
	|	ЗаписиКнигиПродаж.СтавкаНДС КАК СтавкаНДС,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие КАК Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, &Период), КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, &Период), КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, &Период), КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.ДатаРегистратора, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерДокументаОплаты,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты,
	|	ЗаписиКнигиПродаж.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.СуммаБезНДС КАК СуммаБезНДС,
	|	ЗаписиКнигиПродаж.НДС КАК НДС
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ЗаписиКнигиПродаж.Организация = ДанныеПервичныхДокументов.Организация
	|			И ЗаписиКнигиПродаж.СчетФактура = ДанныеПервичныхДокументов.Документ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.Выгрузить();

КонецФункции

Процедура РассчитатьПоказателиРаздела3Декларации(СтруктураПоказателей) Экспорт
	
	СтруктураПоказателей.П000300001003 = Окр(СтруктураПоказателей.П000300001003);
	СтруктураПоказателей.П000300001005 = СтруктураПоказателей.П000300001003 * 18 / 100;
	СтруктураПоказателей.П000300002003 = Окр(СтруктураПоказателей.П000300002003);
	СтруктураПоказателей.П000300002005 = СтруктураПоказателей.П000300002003 * 10 / 100;
	СтруктураПоказателей.П000300003003 = Окр(СтруктураПоказателей.П000300003003);
	СтруктураПоказателей.П000300003005 = СтруктураПоказателей.П000300003003 * 18 / 118;
	СтруктураПоказателей.П000300004003 = Окр(СтруктураПоказателей.П000300004003);
	СтруктураПоказателей.П000300004005 = СтруктураПоказателей.П000300004003 * 10 / 110;
	СтруктураПоказателей.П000300006003 = Окр(СтруктураПоказателей.П000300006003);
	СтруктураПоказателей.П000300006005 = СтруктураПоказателей.П000300006003 * 18 / 100;
	СтруктураПоказателей.П000300001005 = Окр(СтруктураПоказателей.П000300001005);
	СтруктураПоказателей.П000300002005 = Окр(СтруктураПоказателей.П000300002005);
	СтруктураПоказателей.П000300003005 = Окр(СтруктураПоказателей.П000300003005);
	СтруктураПоказателей.П000300004005 = Окр(СтруктураПоказателей.П000300004005);
	СтруктураПоказателей.П000300005005 = Окр(СтруктураПоказателей.П000300005005);
	СтруктураПоказателей.П000300006005 = Окр(СтруктураПоказателей.П000300006005);
	СтруктураПоказателей.П000300007005 = Окр(СтруктураПоказателей.П000300007005);
	СтруктураПоказателей.П000300008005 = Окр(СтруктураПоказателей.П000300008005);
	СтруктураПоказателей.П000300009005 = Окр(СтруктураПоказателей.П000300009005);
	
	СтруктураПоказателей.П000300012005 = СтруктураПоказателей.П000300001005 + СтруктураПоказателей.П000300002005 + СтруктураПоказателей.П000300003005
		+ СтруктураПоказателей.П000300004005 + СтруктураПоказателей.П000300005005 + СтруктураПоказателей.П000300006005
		+ СтруктураПоказателей.П000300007005 + СтруктураПоказателей.П000300008005 + СтруктураПоказателей.П000300009005;
			
	СтруктураПоказателей.П000300018003 = Окр(СтруктураПоказателей.П000300018003);
	СтруктураПоказателей.П000300019003 = Окр(СтруктураПоказателей.П000300019003);
	
	СтруктураПоказателей.П000300017003 = СтруктураПоказателей.П000300018003 + СтруктураПоказателей.П000300019003;
		
	СтруктураПоказателей.П000300013003 = Окр(СтруктураПоказателей.П000300013003);
	СтруктураПоказателей.П000300015003 = Окр(СтруктураПоказателей.П000300015003);
	СтруктураПоказателей.П000300016003 = Окр(СтруктураПоказателей.П000300016003);
	СтруктураПоказателей.П000300017003 = Окр(СтруктураПоказателей.П000300017003);
	СтруктураПоказателей.П000300020003 = Окр(СтруктураПоказателей.П000300020003);
	СтруктураПоказателей.П000300021003 = Окр(СтруктураПоказателей.П000300021003);
			
	СтруктураПоказателей.П000300022003 = СтруктураПоказателей.П000300013003 + СтруктураПоказателей.П000300015003 + СтруктураПоказателей.П000300016003
		+ СтруктураПоказателей.П000300017003 + СтруктураПоказателей.П000300020003 + СтруктураПоказателей.П000300021003;
		
	СтруктураПоказателей.П000300023003 = Макс(СтруктураПоказателей.П000300012005 - СтруктураПоказателей.П000300022003, 0);
	
	СтруктураПоказателей.П000300024003 = Макс(СтруктураПоказателей.П000300022003 - СтруктураПоказателей.П000300012005, 0);
			
КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажВозвратПоставщику(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВерсияУчетаНДС = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	ПлательщикНДС  = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, Реквизиты.Период);
	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");
	
	Для каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		
		Если ВерсияУчетаНДС > 1 И СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПлательщикНДС
			И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СтрокаТаблицы.СчетДоходов) 
			И ПлательщикЕНВД Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗаписиКнигиПродаж.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.Покупатель  = СтрокаТаблицы.Контрагент;
		НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		НоваяСтрока.НДС         = СтрокаТаблицы.СуммаНДСРуб;

	КонецЦикла;
	
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	
	Если Реквизиты.НДСИсчисляетсяНалоговымАгентом = Истина
	   И УчетНДС.ВедетсяУчетНДСПоФЗ335(Реквизиты.Период) Тогда
		ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НалогИсчисляетПокупатель, "Событие");
	Иначе
		Если Реквизиты.КорректировочныйСчетФактураПолученОтПоставщика Тогда
			ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");
		Иначе 
			ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
		КонецЕсли;
	КонецЕсли;
	
	// Для операций поступления/реализации договор не заполняется
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");

	ТаблицаЗаписиКнигиПродаж.Свернуть("Период,Организация,Покупатель,СчетФактура,ВидЦенности,СтавкаНДС,
		|ДатаОплаты,ДокументОплаты,Событие,ДатаСобытия,ДоговорКонтрагента",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Функция ПосредникДляКорректировочногоСчетаФактуры(ИсправляемыйСчетФактура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЖурналУчетаСчетовФактур.Посредник КАК Посредник
			|ИЗ
			|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
			|ГДЕ
			|	ЖурналУчетаСчетовФактур.СчетФактура = &ИсправляемыйСчетФактура";
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", ИсправляемыйСчетФактура);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Посредник;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
КонецФункции

#КонецОбласти

Процедура ДобавитьНеобязательнуюКолонкуВСписок(Таблица, СписокОбязательныхКолонок, ИмяКолонки)
	
	ЕстьКолонка = Ложь;
	ЕстьКолонка = Таблица <> Неопределено И Таблица.Колонки.Найти(ИмяКолонки) <> Неопределено;
	Если ЕстьКолонка
		И СтрНайти(СписокОбязательныхКолонок, ИмяКолонки) = 0 Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок + "," + ИмяКолонки;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйРеализация0Расход(ТаблицаДвижений, Реквизиты, Движения, Отказ) Экспорт

	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Запись = Движения.НДСПредъявленныйРеализация0.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Запись, Реквизиты);
		
	КонецЦикла;

	Движения.НДСПредъявленныйРеализация0.Записывать = Истина;

КонецПроцедуры

#Область ПутевыеЛисты

Функция ПодготовитьПараметрыПокупкаТопливаПоКассовомуЧеку(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	РазделительПолей = ",";

	// Подготовка таблицы Реквизиты

	ОбязательныеКолонки = Новый Массив;
	ОбязательныеКолонки.Добавить("Регистратор");          // <ДокументСсылка.ПутевойЛист>
	ОбязательныеКолонки.Добавить("Период");               // <Дата>
	ОбязательныеКолонки.Добавить("Организация");          // <СправочникСсылка.Организации>
	ОбязательныеКолонки.Добавить("Подразделение");        // <СправочникСсылка.ПодразделенияОрганизаций>
	ОбязательныеКолонки.Добавить("ТранспортноеСредство"); // <СправочникСсылка.ТранспортныеСредства>
	ОбязательныеКолонки.Добавить("ФизЛицо");              // <СправочникСсылка.ФизическиеЛица>
	ОбязательныеКолонки.Добавить("НДСНеВыделять");        // <Булево>
	
	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты,
		СтрСоединить(ОбязательныеКолонки, РазделительПолей));
	
	Реквизиты.Колонки.Добавить("УчетАгентскогоНДС", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("ЭлектронныеУслуги", Новый ОписаниеТипов("Булево"));
	
	Параметры.Вставить("Реквизиты", Реквизиты);
	
	// Подготовка таблицы Товары
	
	ОбязательныеКолонки = Новый Массив;
	ОбязательныеКолонки.Добавить("ТранспортноеСредство");    // <СправочникСсылка.ТранспортныеСредства>
	ОбязательныеКолонки.Добавить("Номенклатура");            // <СправочникСсылка.Номенклатура>
	ОбязательныеКолонки.Добавить("СчетУчета");               // <ПланСчетовСсылка.Хозрасчетный>
	ОбязательныеКолонки.Добавить("СчетУчетаНДС");            // <ПланСчетовСсылка.Хозрасчетный>
	ОбязательныеКолонки.Добавить("СпособУчетаНДС");          // <ПеречислениеСсылка.СпособыУчетаНДС>
	ОбязательныеКолонки.Добавить("НДСВключенВСтоимость");    // <Булево>
	ОбязательныеКолонки.Добавить("СтавкаНДС");               // <ПеречислениеСсылка.СтавкиНДС>
	ОбязательныеКолонки.Добавить("Партия");                  // <ДокументСсылка.ПутевойЛист>
	ОбязательныеКолонки.Добавить("СуммаБезНДС");             // <Число,15,2> - сумма без НДС в рублях
	ОбязательныеКолонки.Добавить("СуммаВзаиморасчетов");     // <Число,15,2> - сумма взаиморасчетов в рублях
	ОбязательныеКолонки.Добавить("СуммаНДСВзаиморасчетов");  // <Число,15,2> - сумма взаиморасчетов без НДС в рублях
	ОбязательныеКолонки.Добавить("НДС");                     // <Число,15,2> - сумма НДС в рублях
	ОбязательныеКолонки.Добавить("Количество");              // <Число,15,3>
	ОбязательныеКолонки.Добавить("ВидВходящегоДокумента");   // <ПеречислениеСсылка.ВидыДокументовПриобретенияГСМ>
	ОбязательныеКолонки.Добавить("НомерВходящегоДокумента"); // <Строка>
	ОбязательныеКолонки.Добавить("ДатаВходящегоДокумента");  // <Дата>
	
	Топливо = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары,
		СтрСоединить(ОбязательныеКолонки, РазделительПолей));
	
	Параметры.Вставить("Топливо", Топливо);
	
	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийПокупкаТопливаПоКассовомуЧеку(Топливо, Реквизиты)
	
	КолонкиГруппировок = Новый Массив;
	КолонкиГруппировок.Добавить("СтавкаНДС");
	КолонкиГруппировок.Добавить("СчетУчетаНДС");
	КолонкиГруппировок.Добавить("СпособУчетаНДС");
	КолонкиГруппировок.Добавить("ТранспортноеСредство");
	КолонкиГруппировок.Добавить("ВидВходящегоДокумента");
	КолонкиГруппировок.Добавить("НомерВходящегоДокумента");
	КолонкиГруппировок.Добавить("ДатаВходящегоДокумента");
	
	КолонкиСуммирования = Новый Массив;
	КолонкиСуммирования.Добавить("СуммаБезНДС");
	КолонкиСуммирования.Добавить("НДС");
	КолонкиСуммирования.Добавить("СуммаВзаиморасчетов");
	КолонкиСуммирования.Добавить("СуммаНДСВзаиморасчетов");
	КолонкиСуммирования.Добавить("НДСВключенВСтоимость");
	
	Разделитель = ",";
	
	ИменаКолонокГруппировок = СтрСоединить(КолонкиГруппировок, Разделитель);
	ИменаКолонокСуммирования = СтрСоединить(КолонкиСуммирования, Разделитель);
	
	КолонкиТаблицы = Новый Массив;
	КолонкиТаблицы.Добавить(ИменаКолонокГруппировок);
	КолонкиТаблицы.Добавить(ИменаКолонокСуммирования);
	
	ДанныеДвижений = Топливо.Скопировать(, СтрСоединить(КолонкиТаблицы, Разделитель));
	ДанныеДвижений.Свернуть(ИменаКолонокГруппировок, ИменаКолонокСуммирования);
	
	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период, ДатаСобытия");
	
	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	
	ДанныеДвижений.Колонки.Добавить("Поставщик");
	ДанныеДвижений.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов("ДокументСсылка.ПутевойЛист"));
	ДанныеДвижений.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	Для Каждого ТекущаяСтрока Из ДанныеДвижений Цикл
		
		ТекущаяСтрока.СчетФактура = Реквизиты.Регистратор;
		
		ТекущаяСтрока.Содержание = УчетТоваров.СодержаниеПроводкиПокупкаПоПутевомуЛисту(
			ТекущаяСтрока.ТранспортноеСредство,
			ТекущаяСтрока.ВидВходящегоДокумента,
			ТекущаяСтрока.НомерВходящегоДокумента,
			ТекущаяСтрока.ДатаВходящегоДокумента);
		
	КонецЦикла;
	
	ДанныеДвижений.Колонки.Удалить("ТранспортноеСредство");
	ДанныеДвижений.Колонки.Удалить("ВидВходящегоДокумента");
	ДанныеДвижений.Колонки.Удалить("НомерВходящегоДокумента");
	ДанныеДвижений.Колонки.Удалить("ДатаВходящегоДокумента");
	
	Возврат ДанныеДвижений;
	
КонецФункции

Функция ПодготовитьРеквизитыПроводокПокупкаТопливаПоКассовомуЧеку(Реквизиты)
	
	РеквизитыПроводок = Новый Структура;
	
	СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами; // 71.01
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетКт);
	ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	
	Для НомерСубконто = 1 По 3 Цикл
		
		ИмяСубконто = СтрШаблон("СубконтоКт%1", НомерСубконто);
		Если СвойстваСчета[СтрШаблон("ВидСубконто%1", НомерСубконто)] = ВидСубконто Тогда
			РеквизитыПроводок.Вставить(ИмяСубконто, Реквизиты.ФизЛицо);
		Иначе
			РеквизитыПроводок.Вставить(ИмяСубконто, Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыПроводок.Вставить("СчетКт",          СчетКт);
	РеквизитыПроводок.Вставить("ВалютаКт",        Константы.ВалютаРегламентированногоУчета.Получить());
	РеквизитыПроводок.Вставить("ПодразделениеКт", Реквизиты.Подразделение);
	
	Возврат РеквизитыПроводок;
	
КонецФункции

// Формирование движений при отражении путевых листов
//
Процедура СформироватьДвиженияПокупкаТопливаПоКассовомуЧеку(ТаблицаТопливо, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПокупкаТопливаПоКассовомуЧеку(ТаблицаТопливо, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.НДСНеВыделять Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПроводок = ПодготовитьДанныеДвиженийПокупкаТопливаПоКассовомуЧеку(Параметры.Топливо, Реквизиты);
	
	// Бухгалтерские проводки
	
	Если ДанныеПроводок.Итог("НДС") <> 0 Тогда
	
		РеквизитыПроводок = ПодготовитьРеквизитыПроводокПокупкаТопливаПоКассовомуЧеку(Реквизиты);
		СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеПроводок, РеквизитыПроводок, Движения, Отказ);
		
		ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
		
		Если ПлательщикНДС Тогда
			РеквизитыСписания = ПодготовитьРеквизитыСписанияНДСПоДокументу(Реквизиты);
			СформироватьПроводкиСписаниеНДС(РеквизитыСписания, ДанныеПроводок, Движения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

