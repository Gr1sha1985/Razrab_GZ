
#Область СлужебныйПрограммныйИнтерфейс

// Добавляет в ДанныеДляПроведения таблицы значений с данными начислений по договорам.
//
// Параметры:
//  ДанныеДляПроведения - Структура.
//  Ссылка - ДокументСсылка.
//  Организация - СправочникСсылка.Организации.
//  ПериодРегистрации - Дата.
//  ФизическиеЛица - Массив, Неопределено.
//
Процедура ЗаполнитьДанныеПоДоговорамПодряда(ДанныеДляПроведения, Ссылка, Организация, ПериодРегистрации, ФизическиеЛица = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
	Если ФизическиеЛица <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", ФизическиеЛица);
	КонецЕсли;
	
	МетаданныеДокумента = Ссылка.Метаданные();
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.НомерСтроки + 1000000 КАК ИдентификаторСтроки,
	|	Начисления.Ссылка.Организация КАК Организация,
	|	Начисления.Ссылка.МесяцНачисления КАК ПериодРегистрации,
	|	Начисления.Ссылка КАК ДокументСсылка,
	|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги) КАК Начисление,
	|	Начисления.Результат КАК Сумма,
	|	Начисления.СуммаВычета КАК СуммаВычета,
	|	Начисления.СкидкаПоВзносам КАК СкидкаПоВзносам,
	|	Начисления.КодДохода КАК КодДохода,
	|	Начисления.КатегорияДохода КАК КатегорияДохода,
	|	Начисления.КодВычета КАК КодВычета,
	|	Начисления.ДокументОснование КАК Договор,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	Начисления.Ссылка.МесяцНачисления КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(Начисления.Ссылка.МесяцНачисления, МЕСЯЦ) КАК ДатаОкончания,
	|	Начисления.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
	|ПОМЕСТИТЬ ВТЗаписиНачисленийПоДоговорам
	|ИЗ
	|	#ТаблицаНачислений КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаНачислений", ИмяДокумента + ".НачисленияПоДоговорам");
	
	Если ФизическиеЛица <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И Начисления.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
	КонецЕсли; 
	Запрос.Выполнить();
	
	УдалитьВТ = Новый Массив;
	
	// Создание временной таблицы ВТНачисленияСтраховыеВзносы.
	// ВТНачисленияСтраховыеВзносы используется при вызове УчетСтраховыхВзносов.СведенияОДоходахПоДоговорамСтраховыеВзносы.
	ОтражениеЗарплатыВБухучетеБазовый.СоздатьВТНачисленияСтраховыеВзносы(Запрос.МенеджерВременныхТаблиц, Организация, ПериодРегистрации, "ВТНачисленияСтраховыеВзносы");
	
	// Таблица значений для регистрации в учете 
	// - договоров подряда.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|	НачисленияПоДоговорам.Подразделение КАК Подразделение,
	|	НачисленияПоДоговорам.Подразделение КАК ПодразделениеСотрудника,
	|	НачисленияПоДоговорам.Начисление КАК Начисление,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.Договор КАК Договор,
	|	НачисленияПоДоговорам.ДатаНачала КАК ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияПоДоговорам.ДокументОснование КАК ДокументОснование,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.КодДохода КАК КодДохода,
	|	НачисленияПоДоговорам.КатегорияДохода КАК КатегорияДохода,
	|	НачисленияПоДоговорам.ДокументОснование.СпособОплаты КАК СпособОплаты,
	|	НачисленияПоДоговорам.Сумма КАК СуммаДохода,
	|	НачисленияПоДоговорам.КодВычета КАК КодВычета,
	|	НачисленияПоДоговорам.СуммаВычета КАК СуммаВычета,
	|	НачисленияПоДоговорам.СкидкаПоВзносам КАК СкидкаПоВзносам
	|ИЗ
	|	ВТЗаписиНачисленийПоДоговорам КАК НачисленияПоДоговорам";
	
	ДанныеДляПроведения.Вставить("НачисленияПоДоговорам", Запрос.Выполнить().Выгрузить());
	
	// - В учете начисленной зарплаты.
	ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	РасчетыСКонтрагентами = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
	Запрос.УстановитьПараметр("СтатьяРасходов", РасчетыСКонтрагентами);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&СтатьяРасходов КАК СтатьяРасходов,
	|	ЗаписиНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЗаписиНачислений.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
	|	ЗаписиНачислений.Сумма КАК Сумма,
	|	ЗаписиНачислений.СуммаВычета КАК СуммаВычета,
	|	ЗаписиНачислений.СкидкаПоВзносам КАК СкидкаПоВзносам,
	|	ЗаписиНачислений.*
	|ИЗ
	|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачислений";
	ДанныеДляПроведения.Вставить("НачисленияПоДоговорамСРаспределением", Запрос.Выполнить().Выгрузить());
	
	// - В учете НДФЛ.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|	НачисленияПоДоговорам.Подразделение КАК Подразделение,
	|	НачисленияПоДоговорам.Подразделение КАК ПодразделениеСотрудника,
	|	НачисленияПоДоговорам.Начисление КАК Начисление,
	|	СУММА(НачисленияПоДоговорам.Сумма) КАК Сумма,
	|	НачисленияПоДоговорам.Договор КАК Договор,
	|	НачисленияПоДоговорам.ДатаНачала КАК ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияПоДоговорам.ДокументОснование КАК ДокументОснование,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.КодДохода КАК КодДохода,
	|	НачисленияПоДоговорам.КатегорияДохода КАК КатегорияДохода,
	|	СУММА(НачисленияПоДоговорам.Сумма) КАК СуммаДохода,
	|	НачисленияПоДоговорам.КодВычета КАК КодВычета,
	|	СУММА(НачисленияПоДоговорам.СуммаВычета) КАК СуммаВычета
	|ИЗ
	|	ВТЗаписиНачисленийПоДоговорам КАК НачисленияПоДоговорам
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоДоговорам.КодВычета,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.КатегорияДохода,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты,
	|	НачисленияПоДоговорам.ДокументОснование,
	|	НачисленияПоДоговорам.ДатаОкончания,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.Договор,
	|	НачисленияПоДоговорам.Начисление,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.ФизическоеЛицо";
	
	ДанныеДляПроведения.Вставить("НачисленияПоДоговорамДляУчетаНДФЛ", Запрос.Выполнить().Выгрузить());
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьДвиженияПлановыхНачислений(РегистраторОбъект, Движения, СтруктураДанных, ФормироватьЗаписиТолькоДляИзменений, ЗаполнятьНаборЗаписей) Экспорт
	
	Если СтруктураДанных.ДанныеОПлановыхНачислениях = Неопределено
		ИЛИ СтруктураДанных.ДанныеОПлановыхНачислениях.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Движения.ПлановыеНачисления.Записывать = Истина;
	
	Если ЗаполнятьНаборЗаписей Тогда
		СтруктураДанных.ДанныеОПлановыхНачислениях.Колонки.ДатаСобытия.Имя = "Период";
		Движения.ПлановыеНачисления.Загрузить(СтруктураДанных.ДанныеОПлановыхНачислениях);
	КонецЕсли; 
	
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(РегистраторОбъект)) Тогда
		Если РегистраторОбъект.ДополнительныеСвойства.Свойство("ОтключитьПроверкуДатыЗапретаИзменения")
			И РегистраторОбъект.ДополнительныеСвойства.ОтключитьПроверкуДатыЗапретаИзменения Тогда
			
			Движения.ПлановыеНачисления.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПлановыхУдержаний(Движения, СтруктураДанных) Экспорт
	
	ДанныеПлановыхУдержаний = СтруктураДанных.ДанныеПлановыхУдержаний;
	
	ЗаполнятьДокументОснование = ДанныеПлановыхУдержаний.Колонки.Найти("ДокументОснование") <> Неопределено;
	ИспользуютсяВозвратныеСобытия = ДанныеПлановыхУдержаний.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	// Признак Использования по окончании может быть и в явном виде указан в таблице, 
	// в этом случае используем именно его значение.
	ИспользованиеПоОкончанииОпределено = ДанныеПлановыхУдержаний.Колонки.Найти("ИспользуетсяПоОкончании") <> Неопределено;
	
	Регистратор = Движения.ПлановыеУдержания.Отбор.Регистратор.Значение;
	
	Если ИспользуютсяВозвратныеСобытия Тогда
		
		// Получим действующие начисления, чтобы записать возвратные движения,
		// Признак Используется начисления должен соответствовать значению, действующему на дату текущего события.
		
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ИзмеренияДаты.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ИзмеренияДаты.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
		Если ЗаполнятьДокументОснование Тогда
			ИзмеренияДаты.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ПлановыеУдержания.Измерения.ДокументОснование.Тип);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПлановыхУдержаний, ИзмеренияДаты);
		ИзмеренияДаты.Колонки.ДатаСобытия.Имя = "Период";
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеУдержания",
			МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			ПараметрыПостроения);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеУдержания.ФизическоеЛицо,
		|	ПлановыеУдержания.Организация,
		|	ПлановыеУдержания.Удержание,
		|	ПлановыеУдержания.ДокументОснование,
		|	ПлановыеУдержания.Размер
		|ИЗ
		|	ВТПлановыеУдержанияСрезПоследних КАК ПлановыеУдержания
		|ГДЕ
		|	ПлановыеУдержания.Используется");
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ДействующиеУдержания = Запрос.Выполнить().Выгрузить();
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ФизическоеЛицо");
		ОтборСтрок.Вставить("Организация");
		ОтборСтрок.Вставить("Удержание");
		
		Если ЗаполнятьДокументОснование Тогда
			ОтборСтрок.Вставить("ДокументОснование");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПлановыхУдержаний Цикл
		
		СтрокаДвижений = Движения.ПлановыеУдержания.Добавить();
		СтрокаДвижений.Период = СтрокаДанных.ДатаСобытия;
		СтрокаДвижений.Организация = СтрокаДанных.Организация;
		СтрокаДвижений.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		СтрокаДвижений.Удержание = СтрокаДанных.Удержание;
		
		Если ЗаполнятьДокументОснование Тогда
			СтрокаДвижений.ДокументОснование = СтрокаДанных.ДокументОснование;
		КонецЕсли;
		
		СтрокаДвижений.Используется = СтрокаДанных.Используется;
		СтрокаДвижений.Размер = СтрокаДанных.Размер;
		
		Если ИспользуютсяВозвратныеСобытия И ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
			
			СтрокаДвижений.ДействуетДо = СтрокаДанных.ДействуетДо;
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаДвижений);
			НайденныеСтроки = ДействующиеУдержания.НайтиСтроки(ОтборСтрок);
			УдержаниеИспользовалось = НайденныеСтроки.Количество() > 0;
			
			Если ИспользованиеПоОкончанииОпределено Тогда
				// Использование по окончании указано в исходной таблице.
				СтрокаДвижений.ИспользуетсяПоОкончании = СтрокаДанных.ИспользуетсяПоОкончании;
			Иначе
				// Использование по окончании соответствует действию удержания до текущего события.
				СтрокаДвижений.ИспользуетсяПоОкончании = УдержаниеИспользовалось;
			КонецЕсли;
			
			Если УдержаниеИспользовалось Тогда 
				СтрокаДвижений.РазмерПоОкончании = НайденныеСтроки[0].Размер;
			КонецЕсли;
			
		КонецЕсли;
		
		Движения.ПлановыеУдержания.Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПлановыхВыплат(Движения, ДанныеОПлановыхВыплатах) Экспорт
	
	Для Каждого СтрокаДанных Из ДанныеОПлановыхВыплатах Цикл
		
		Движения.ПлановыеАвансы.Записывать = Истина;
		
		НоваяСтрока = Движения.ПлановыеАвансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодобратьДокументНачисленияЗарплаты(ДокументСсылка, МесяцНачисления, Организация, Подразделение = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеЗарплаты.Ссылка КАК Документ
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.МесяцНачисления = &МесяцНачисления
	|	И НачислениеЗарплаты.Организация = &Организация
	|	И (НачислениеЗарплаты.Подразделение = &Подразделение
	|			ИЛИ &ПоВсемПодразделениям)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачислениеЗарплаты.Дата,
	|	НачислениеЗарплаты.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Подразделение = Неопределено);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.НачислениеЗарплаты.СоздатьДокумент();
		ДокументОбъект.Дата = НачалоДня(КонецМесяца(МесяцНачисления));
		ДокументОбъект.МесяцНачисления = МесяцНачисления;
		ДокументОбъект.Организация = Организация;
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ДокументОбъект.Подразделение = Подразделение;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьДокументНачисленияЗарплаты(ДокументОбъект);
	ДокументОбъект.Записать();
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
КонецПроцедуры

Функция ОснованиеИсчисленияНалогаСОтсроченнойУплатой(Основания) Экспорт

	Результаты = Новый Соответствие;
	БольничныйЛист = Тип("ДокументСсылка.БольничныйЛист");
	Отпуск = Тип("ДокументСсылка.Отпуск");
	Для каждого Основание Из Основания Цикл
		ТипОснования = ТипЗнч(Основание);
		Результаты.Вставить(Основание, ТипОснования = БольничныйЛист Или ТипОснования = Отпуск);
	КонецЦикла;
	
	Возврат Результаты
	
КонецФункции 

Функция РазностьДатПроизводственныхКалендарейПоВидамДней(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДнейПроизводственногоКалендаря.Ссылка КАК ВидДня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПроизводственногоКалендаря.Дата) КАК КоличествоДней
		|ИЗ
		|	Перечисление.ВидыДнейПроизводственногоКалендаря КАК ВидыДнейПроизводственногоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО ВидыДнейПроизводственногоКалендаря.Ссылка = ДанныеПроизводственногоКалендаря.ВидДня
		|			И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|			И (ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыДнейПроизводственногоКалендаря.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидДня";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоДнейПоВидам = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		КоличествоДнейПоВидам.Вставить(Выборка.ВидДня, Выборка.КоличествоДней);
	КонецЦикла;
		
	Возврат КоличествоДнейПоВидам;
	
КонецФункции

Функция РабочихДнейЧасовВПериоде(Календарь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	РабочихДнейЧасов = Новый Структура("Дней,Часов,ПредпраздничныхДней", 0, 0, 0);
	
	Если ТипЗнч(Календарь) <> Тип("СправочникСсылка.ПроизводственныеКалендари")
		И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		Возврат МодульРасчетЗарплатыДляНебольшихОрганизаций.РабочихДнейЧасовВПериоде(Календарь, НачалоПериода, ОкончаниеПериода);
		
	КонецЕсли;
	
	ДанныеКалендаря = РазностьДатПроизводственныхКалендарейПоВидамДней(Календарь, НачалоПериода, ОкончаниеПериода);
	
	РабочиеДни = ДанныеКалендаря.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	ПредпраздничныеДни = ДанныеКалендаря.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	РабочихДнейЧасов.Дней                 = РабочиеДни + ПредпраздничныеДни;
	РабочихДнейЧасов.Часов                = РабочиеДни * 8 + ПредпраздничныеДни * 7;
	РабочихДнейЧасов.ПредпраздничныхДней  = ПредпраздничныеДни;
	
	Возврат РабочихДнейЧасов;
	
КонецФункции

// Заполняет таблицу значений, содержащую данные для начисления зарплаты.
//
// Параметры:
// 	см. РасчетЗарплаты.РезультатНачисленияРасчетаЗарплаты
//	МесяцНачисления - в базовой реализации начисления получаются 
//	только за месяц в целом, а не за произвольный период.
//
Функция РезультатНачисленияРасчетаЗарплаты(Организация, МесяцНачисления, Документ, Подразделение, Сотрудники) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Документ);
	Запрос.УстановитьПараметр("ПланируемаяДатаВыплаты", КонецМесяца(МесяцНачисления));
	
	КадровыеДанныеДокумента = "ГоловнаяОрганизация,Организация,Подразделение,ДоляНеполногоРабочегоВремени,ТарифнаяСтавка,ПроцентСевернойНадбавки,ДатаРождения";
	КадровыеДанные = КадровыеДанныеДокумента;
	Если ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(КадровыеДанные) Тогда
		ПоляСортировки = Сред(КадровыеДанные, СтрДлина(КадровыеДанныеДокумента) + 2);
	Иначе
		ПоляСортировки = "";
	КонецЕсли;
	
	Если Сотрудники = Неопределено Тогда
		
		ИмяВТСотрудникиОрганизации = "ВТСотрудникиОрганизацииПредварительно";
		
		// Получаем сотрудников, работавших в организации из подсистемы КадровыйУчет.
		ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудниковОрганизаций.Организация 					= Организация;
		ПараметрыПолученияСотрудниковОрганизаций.Подразделение 					= Подразделение;
		ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации 	= Ложь;
		ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 					= МесяцНачисления;
		ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода 				= КонецМесяца(МесяцНачисления);
		ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные					= КадровыеДанные;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций, ИмяВТСотрудникиОрганизации);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СотрудникиОрганизации.Период КАК Период,
			|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
			|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СотрудникиОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	СотрудникиОрганизации.Организация КАК Организация,
			|	СотрудникиОрганизации.Подразделение КАК Подразделение,
			|	СотрудникиОрганизации.ДоляНеполногоРабочегоВремени КАК ДоляНеполногоРабочегоВремени,
			|	СотрудникиОрганизации.ТарифнаяСтавка КАК ТарифнаяСтавка,
			|	СотрудникиОрганизации.ПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки,
			|	СотрудникиОрганизации.ДатаРождения КАК ДатаРождения
			|ПОМЕСТИТЬ ВТСотрудникиОрганизации
			|ИЗ
			|	ВТСотрудникиОрганизацииПредварительно КАК СотрудникиОрганизации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|		ПО (НАЧАЛОПЕРИОДА(СотрудникиОрганизации.Период, МЕСЯЦ) = НачисленияУдержанияПоСотрудникам.Период)
			|			И СотрудникиОрганизации.Сотрудник = НачисленияУдержанияПоСотрудникам.Сотрудник
			|			И (НачисленияУдержанияПоСотрудникам.Регистратор <> &Регистратор)
			|			И (НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)
			|ГДЕ
			|	НачисленияУдержанияПоСотрудникам.Сумма ЕСТЬ NULL
			|	И СотрудникиОрганизации.Подразделение В ИЕРАРХИИ(&Подразделение)";
			
		Если Не ПустаяСтрока(ПоляСортировки) Тогда
			
			СтрокаЗамены = "СотрудникиОрганизации.ДатаРождения КАК ДатаРождения";
			ПоляСортировки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляСортировки);
			
			Для каждого ПолеСортировки Из ПоляСортировки Цикл
				СтрокаЗамены = СтрокаЗамены + "," + Символы.ПС + Символы.Таб
					+ "СотрудникиОрганизации." + ПолеСортировки + " КАК " + ПолеСортировки;
			КонецЦикла;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиОрганизации.ДатаРождения КАК ДатаРождения", СтрокаЗамены);
			
		КонецЕсли; 
			
		Если Не ЗначениеЗаполнено(Подразделение) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СотрудникиОрганизации.Подразделение В ИЕРАРХИИ(&Подразделение)", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.Выполнить();
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	&Период КАК Период,
			|	Сотрудники.Ссылка КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудникиПериоды
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|		ПО (НачисленияУдержанияПоСотрудникам.Период = &Месяц)
			|			И Сотрудники.Ссылка = НачисленияУдержанияПоСотрудникам.Сотрудник
			|			И (НачисленияУдержанияПоСотрудникам.Регистратор <> &Регистратор)
			|			И (НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)
			|ГДЕ
			|	Сотрудники.Ссылка В(&Сотрудники)
			|	И НачисленияУдержанияПоСотрудникам.Сумма ЕСТЬ NULL ";
				
			
		Запрос.УстановитьПараметр("Период", КонецМесяца(МесяцНачисления));
		Запрос.УстановитьПараметр("Месяц", НачалоМесяца(МесяцНачисления));
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.Выполнить();
		
		ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
		ОписательВТ.ИмяВТКадровыеДанныеСотрудников = "ВТСотрудникиОрганизации";
		
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, КадровыеДанные);
		
	КонецЕсли;
	
	Если МесяцНачисления < УчетСтраховыхВзносовКлиентСервер.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР() Тогда
		КадровыйУчет.ПроверитьЗаполнениеДатыРожденияПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиОрганизации");
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеНачисления",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТСотрудникиОрганизации",
				"Сотрудник"));
			
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	ПлановыеНачисления.Начисление КАК Начисление,
		|	ПлановыеНачисления.Размер * ЕСТЬNULL(КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени, 0) КАК Результат,
		|	КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени,
		|	ВЫБОР
		|		КОГДА ПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
		|			ТОГДА ИСТИНА
		|		КОГДА ПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прочее)
		|				И ПлановыеНачисления.Начисление.ВходитВБазуРКИСН
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВходитВБазуРКиСН,
		|	&ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
		|ПОМЕСТИТЬ ВТДанныеНачисленийПоСотрудникам
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ПО ПлановыеНачисления.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|ГДЕ
		|	ПлановыеНачисления.Размер <> 0";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	Начисления.Ссылка КАК Начисление,
		|	КадровыеДанныеСотрудников.ТарифнаяСтавка * ЕСТЬNULL(КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени, 0) КАК Результат,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени, 0) КАК ДоляНеполногоРабочегоВремени,
		|	ИСТИНА КАК ВходитВБазуРКиСН,
		|	&ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
		|ПОМЕСТИТЬ ВТДанныеНачисленийПоСотрудникам
		|ИЗ
		|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда))";
		
	КонецЕсли;
	
	Запрос.Выполнить();
		
	Возврат ТаблицаЗаполненияНачислений(Запрос.МенеджерВременныхТаблиц);
	
КонецФункции

Функция ТаблицаЗаполненияНачислений(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеНачисленийПоСотрудникам.Сотрудник КАК Сотрудник,
		|	ДанныеНачисленийПоСотрудникам.Подразделение КАК Подразделение,
		|	ДанныеНачисленийПоСотрудникам.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
		|	ДанныеНачисленийПоСотрудникам.ДоляНеполногоРабочегоВремени КАК ДоляНеполногоРабочегоВремени,
		|	СУММА(ДанныеНачисленийПоСотрудникам.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТСводныеДанныеНачисленийПоСотрудникам
		|ИЗ
		|	ВТДанныеНачисленийПоСотрудникам КАК ДанныеНачисленийПоСотрудникам
		|ГДЕ
		|	ДанныеНачисленийПоСотрудникам.ВходитВБазуРКиСН
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеНачисленийПоСотрудникам.Сотрудник,
		|	ДанныеНачисленийПоСотрудникам.Подразделение,
		|	ДанныеНачисленийПоСотрудникам.ДоляНеполногоРабочегоВремени,
		|	ДанныеНачисленийПоСотрудникам.ПланируемаяДатаВыплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадровыеДанныеСотрудников.Период КАК Период,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
		|	СводныеДанныеНачисленийПоСотрудникам.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
		|	СводныеДанныеНачисленийПоСотрудникам.Результат КАК Результат,
		|	СводныеДанныеНачисленийПоСотрудникам.ДоляНеполногоРабочегоВремени КАК ДоляНеполногоРабочегоВремени,
		|	КадровыеДанныеСотрудников.ПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки,
		|	КадровыеДанныеСотрудников.Подразделение.РайонныйКоэффициент КАК РайонныйКоэффициент
		|ПОМЕСТИТЬ ВТДанныеПоКоэффициентамСотрудников
		|ИЗ
		|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСводныеДанныеНачисленийПоСотрудникам КАК СводныеДанныеНачисленийПоСотрудникам
		|		ПО КадровыеДанныеСотрудников.Сотрудник = СводныеДанныеНачисленийПоСотрудникам.Сотрудник
		|			И КадровыеДанныеСотрудников.Подразделение = СводныеДанныеНачисленийПоСотрудникам.Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПоКоэффициентамСотрудников.Период КАК Период,
		|	ДанныеПоКоэффициентамСотрудников.Подразделение КАК СтруктурнаяЕдиница
		|ПОМЕСТИТЬ ВТПодразделенияПериоды
		|ИЗ
		|	ВТДанныеПоКоэффициентамСотрудников КАК ДанныеПоКоэффициентамСотрудников";
		
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ТерриториальныеУсловияПФР",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТПодразделенияПериоды", "СтруктурнаяЕдиница"));
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеПоСотрудникам.Сотрудник КАК Сотрудник,
		|	ДанныеПоСотрудникам.Подразделение КАК Подразделение,
		|	ДанныеПоСотрудникам.Начисление КАК Начисление,
		|	ВЫБОР
		|		КОГДА ДанныеПоСотрудникам.Начисление.КодДоходаНДФЛ.ИмеетЕдинственныйВычет
		|			ТОГДА ДанныеПоСотрудникам.Начисление.КодДоходаНДФЛ.ВычетПоУмолчанию
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|	КОНЕЦ КАК КодВычета,
		|	ДанныеПоСотрудникам.Результат КАК Результат,
		|	ДанныеПоСотрудникам.ВходитВБазуРКиСН КАК ВходитВБазуРКиСН,
		|	0 КАК КоэффициентПересчета,
		|	ДанныеПоСотрудникам.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
		|	ДанныеПоСотрудникам.ДоляНеполногоРабочегоВремени КАК ДоляНеполногоРабочегоВремени
		|ИЗ
		|	ВТДанныеНачисленийПоСотрудникам КАК ДанныеПоСотрудникам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ПО ДанныеПоСотрудникам.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоКоэффициентамСотрудников.Сотрудник,
		|	ДанныеПоКоэффициентамСотрудников.Подразделение,
		|	Начисления.Ссылка,
		|	ВЫБОР
		|		КОГДА Начисления.КодДоходаНДФЛ.ИмеетЕдинственныйВычет
		|			ТОГДА Начисления.КодДоходаНДФЛ.ВычетПоУмолчанию
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|	КОНЕЦ,
		|	ДанныеПоКоэффициентамСотрудников.Результат * (ДанныеПоКоэффициентамСотрудников.РайонныйКоэффициент - 1),
		|	ЛОЖЬ,
		|	ДанныеПоКоэффициентамСотрудников.РайонныйКоэффициент - 1,
		|	ДанныеПоКоэффициентамСотрудников.ПланируемаяДатаВыплаты,
		|	ДанныеПоКоэффициентамСотрудников.ДоляНеполногоРабочегоВремени
		|ИЗ
		|	ВТДанныеПоКоэффициентамСотрудников КАК ДанныеПоКоэффициентамСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент))
		|			И (ДанныеПоКоэффициентамСотрудников.РайонныйКоэффициент <> 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ПО ДанныеПоКоэффициентамСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоКоэффициентамСотрудников.Сотрудник,
		|	ДанныеПоКоэффициентамСотрудников.Подразделение,
		|	Начисления.Ссылка,
		|	ВЫБОР
		|		КОГДА Начисления.КодДоходаНДФЛ.ИмеетЕдинственныйВычет
		|			ТОГДА Начисления.КодДоходаНДФЛ.ВычетПоУмолчанию
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|	КОНЕЦ,
		|	ДанныеПоКоэффициентамСотрудников.Результат * ДанныеПоКоэффициентамСотрудников.ПроцентСевернойНадбавки / 100,
		|	ЛОЖЬ,
		|	ДанныеПоКоэффициентамСотрудников.ПроцентСевернойНадбавки / 100,
		|	ДанныеПоКоэффициентамСотрудников.ПланируемаяДатаВыплаты,
		|	ДанныеПоКоэффициентамСотрудников.ДоляНеполногоРабочегоВремени
		|ИЗ
		|	ВТДанныеПоКоэффициентамСотрудников КАК ДанныеПоКоэффициентамСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))
		|			И (ДанныеПоКоэффициентамСотрудников.ПроцентСевернойНадбавки <> 0)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловия
		|		ПО ДанныеПоКоэффициентамСотрудников.Период = ТерриториальныеУсловия.Период
		|			И ДанныеПоКоэффициентамСотрудников.Подразделение = ТерриториальныеУсловия.СтруктурнаяЕдиница
		|			И (ТерриториальныеУсловия.ТерриториальныеУсловияПФР В (ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКСР), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКСМ), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПРОЧ)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ПО ДанныеПоКоэффициентамСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисление";
	
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "КадровыеДанныеСотрудников");
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Конструирует объект для хранения данных для проведения.
// Структура может содержать
//		НачисленияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//
//		УдержанияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Удержание
//			Сумма
//
//		ИсчисленныйНДФЛ - таблица значений.
//
//		ИсчисленныеВзносы - таблица значений.
//
//		МенеджерВременныхТаблиц - менеджер временных таблиц на котором могут 
//		удерживаться таблицы
//			ВТНачисления (данные о начисленных суммах).
//				Сотрудник
//				ПериодДействия
//				ДатаНачала
//				Начисление
//				СуммаДохода
//				СуммаВычетаНДФЛ
//				СуммаВычетаВзносы
//				КодВычетаНДФЛ
//				Подразделение
//			ВТФизическиеЛица (список людей по которым выполняется расчет)
//				ФизическоеЛицо.
//
Функция СоздатьДанныеДляПроведенияНачисленияЗарплаты() Экспорт
	
	ПоляСтруктуры = 
	"МенеджерВременныхТаблиц, 
	|НачисленияПоСотрудникам,
	|ОтработанноеВремяПоСотрудникам,
	|УдержанияПоСотрудникам, 
	|ИсчисленныйНДФЛ,
	|НДФЛ, 
	|НДФЛПоСотрудникам,
	|КорректировкиВыплаты, 
	|КорректировкиВыплатыПоСотрудникам,
	|ИсчисленныеВзносы";
	
	ДанныеДляПроведения = Новый Структура(ПоляСтруктуры);
	ДанныеДляПроведения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ЗаполнитьНачисления(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаНачислений, ПолеДатыДействия, ФизическиеЛица) Экспорт
	
	Если ФизическиеЛица = Неопределено Тогда
		ОтборПоФизическимЛицам = Ложь;
	Иначе
		ОтборПоФизическимЛицам = Истина;
	КонецЕсли;
	
	// Получаем массив имен табличных частей.
	ИменаТаблицНачислений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТаблицаНачислений);
	
	// Метаданные документа используем для обращения к таблице.
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	
	// Составляем текст запроса создания временной таблицы.
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса 
				+ "
				|ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса 
			+ "ВЫБРАТЬ
			|	ТаблицаНачислений.НомерСтроки КАК ИдентификаторСтроки,
			|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
			|	НАЧАЛОПЕРИОДА(ТаблицаНачислений.ДатаДействия, МЕСЯЦ) КАК ПериодДействия,
			|	ТаблицаНачислений.ДатаДействия КАК ДатаНачала,
			|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ТаблицаНачислений.ДатаДействия, МЕСЯЦ), ДЕНЬ) КАК ДатаОкончания,
			|	ТаблицаНачислений.Начисление КАК Начисление,
			|	ТаблицаНачислений.Результат КАК СуммаДохода,
			|	ТаблицаНачислений.Результат КАК Сумма,
			|	ТаблицаНачислений.СуммаВычета КАК СуммаВычетаНДФЛ,
			|	ТаблицаНачислений.СуммаВычета КАК СуммаВычетаВзносы,
			|	ТаблицаНачислений.КодВычета КАК КодВычетаНДФЛ,
			|	ТаблицаНачислений.Подразделение,
			|	ТаблицаНачислений.Подразделение КАК ПодразделениеОрганизации,
			|	ТаблицаНачислений.Подразделение КАК ТерриторияВыполненияРаботВОрганизации
			|";
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ПланируемаяДатаВыплаты") <> Неопределено Тогда
			
			ТекстЗапроса = ТекстЗапроса + ",
				|	ТаблицаНачислений.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты";
			
		КонецЕсли;
		
		Если ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса 
				+ "
				|ПОМЕСТИТЬ ВТНачисления
				|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса 
			+ "
			|ИЗ
			|	#ТаблицаНачислений КАК ТаблицаНачислений
			|ГДЕ
			|	ТаблицаНачислений.Ссылка = &Ссылка
			|";
		Если ОтборПоФизическимЛицам Тогда
			ТекстЗапроса = ТекстЗапроса 
				+ "
				|	И ВЫРАЗИТЬ(ТаблицаНачислений.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо В (&ФизическиеЛица)
				|";
		КонецЕсли; 
		ПерваяТаблица = Ложь;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
	КонецЦикла;
	
	// Устанавливаем поле даты действия.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаДействия, МЕСЯЦ) КАК ПериодДействия", ПолеДатыДействия + ", МЕСЯЦ) КАК ПериодДействия");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаДействия КАК ДатаНачала", ПолеДатыДействия + " КАК ДатаНачала");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаДействия, МЕСЯЦ), ДЕНЬ) КАК ДатаОкончания", ПолеДатыДействия + ", МЕСЯЦ), ДЕНЬ) КАК ДатаОкончания");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведенияНачисленияЗарплаты.МенеджерВременныхТаблиц;
	Если ОтборПоФизическимЛицам Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	КонецЕсли; 
	Запрос.Выполнить();
	
	// Составляем текст запроса таблицы значений.
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса 
				+ "
				|ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		
		ТекстЗапросаПолей =
			"ВЫБРАТЬ
			|	Начисления.НомерСтроки КАК ИдентификаторСтроки,
			|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.Подразделение,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.Результат КАК Сумма,
			|	Начисления.ОтработаноДней КАК ОтработаноДней,
			|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
			|	Начисления.ОтработаноДней КАК ОплаченоДней,
			|	Начисления.ОтработаноЧасов КАК ОплаченоЧасов,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
			|ИЗ
			|	#ТаблицаНачислений КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &Ссылка
			|";
		Если ОтборПоФизическимЛицам Тогда
			ТекстЗапросаПолей = ТекстЗапросаПолей 
				+ "
				|	И ВЫРАЗИТЬ(Начисления.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо В (&ФизическиеЛица)
				|";
		КонецЕсли;
			
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ОплаченоДней") <> Неопределено Тогда
			
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "Начисления.ОтработаноДней КАК ОплаченоДней", "Начисления.ОплаченоДней КАК ОплаченоДней");
			
			Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ОплаченоЧасов") <> Неопределено Тогда
				ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "Начисления.ОтработаноЧасов КАК ОплаченоЧасов", "Начисления.ОплаченоЧасов КАК ОплаченоЧасов");
			Иначе
				ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "Начисления.ОтработаноЧасов КАК ОплаченоЧасов", "Начисления.ОплаченоДней * 8 КАК ОплаченоЧасов");
			КонецЕсли;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ДатаНачала") <> Неопределено Тогда
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала", "Начисления.ДатаНачала КАК ДатаНачала");
		Иначе
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала", "Начисления." + ПолеДатыДействия + " КАК ДатаНачала");
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ДатаОкончания") <> Неопределено Тогда
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания", "Начисления.ДатаОкончания КАК ДатаОкончания");
		Иначе
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания", "НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Начисления." + ПолеДатыДействия + ", МЕСЯЦ), ДЕНЬ) КАК ДатаОкончания");
		КонецЕсли;
		
		ПерваяТаблица = Ложь;
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПолей;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
	КонецЦикла;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Сотрудник,
		|	Начисления.Подразделение,
		|	Начисления.Начисление,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	СУММА(Начисления.Сумма) КАК Сумма,
		|	СУММА(Начисления.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(Начисления.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(Начисления.ОплаченоДней) КАК ОплаченоДней,
		|	СУММА(Начисления.ОплаченоЧасов) КАК ОплаченоЧасов
		|ПОМЕСТИТЬ ВТНачисленияИОтработанноеВремя
		|ИЗ
		|(" + ТекстЗапроса + ") КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Сотрудник,
		|	Начисления.Подразделение,
		|	Начисления.Начисление,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания";
	
	ТекстЗапроса = ТекстЗапроса + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() 
		+ "ВЫБРАТЬ
		  |	НачисленияИОтработанноеВремя.ИдентификаторСтроки КАК ИдентификаторСтроки,
		  |	НачисленияИОтработанноеВремя.ФизическоеЛицо КАК ФизическоеЛицо,
		  |	НачисленияИОтработанноеВремя.Сотрудник КАК Сотрудник,
		  |	НачисленияИОтработанноеВремя.Подразделение КАК Подразделение,
		  |	НачисленияИОтработанноеВремя.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
		  |	&РасчетыПоОплатеТруда КАК СтатьяРасходов,
		  |	НачисленияИОтработанноеВремя.Начисление КАК Начисление,
		  |	НачисленияИОтработанноеВремя.ДатаНачала КАК ДатаНачала,
		  |	НачисленияИОтработанноеВремя.ДатаОкончания КАК ДатаОкончания,
		  |	НачисленияИОтработанноеВремя.Сумма КАК Сумма,
		  |	НачисленияИОтработанноеВремя.ОтработаноДней КАК ОтработаноДней,
		  |	НачисленияИОтработанноеВремя.ОтработаноЧасов КАК ОтработаноЧасов,
		  |	НачисленияИОтработанноеВремя.ОплаченоДней КАК ОплаченоДней,
		  |	НачисленияИОтработанноеВремя.ОплаченоЧасов КАК ОплаченоЧасов
		  |ИЗ
		  |	ВТНачисленияИОтработанноеВремя КАК НачисленияИОтработанноеВремя
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	НачисленияИОтработанноеВремя.ИдентификаторСтроки КАК ИдентификаторСтроки,
		  |	НачисленияИОтработанноеВремя.ФизическоеЛицо КАК ФизическоеЛицо,
		  |	НачисленияИОтработанноеВремя.Сотрудник КАК Сотрудник,
		  |	НачисленияИОтработанноеВремя.Подразделение КАК Подразделение,
		  |	НачисленияИОтработанноеВремя.Начисление КАК Начисление,
		  |	НачисленияИОтработанноеВремя.ДатаНачала КАК ДатаНачала,
		  |	СУММА(НачисленияИОтработанноеВремя.ОтработаноДней) КАК ОтработаноДней,
		  |	СУММА(НачисленияИОтработанноеВремя.ОтработаноЧасов) КАК ОтработаноЧасов,
		  |	СУММА(НачисленияИОтработанноеВремя.ОплаченоДней) КАК ОплаченоДней,
		  |	СУММА(НачисленияИОтработанноеВремя.ОплаченоЧасов) КАК ОплаченоЧасов
		  |ИЗ
		  |	ВТНачисленияИОтработанноеВремя КАК НачисленияИОтработанноеВремя
		  |ГДЕ
		  |	НЕ(НачисленияИОтработанноеВремя.ОтработаноДней = 0
		  |				И НачисленияИОтработанноеВремя.ОтработаноЧасов = 0
		  |				И НачисленияИОтработанноеВремя.ОплаченоДней = 0
		  |				И НачисленияИОтработанноеВремя.ОплаченоЧасов = 0)
		  |
		  |СГРУППИРОВАТЬ ПО
		  |	НачисленияИОтработанноеВремя.ИдентификаторСтроки,
		  |	НачисленияИОтработанноеВремя.ФизическоеЛицо,
		  |	НачисленияИОтработанноеВремя.Сотрудник,
		  |	НачисленияИОтработанноеВремя.Подразделение,
		  |	НачисленияИОтработанноеВремя.Начисление,
		  |	НачисленияИОтработанноеВремя.ДатаНачала";

	Запрос = Новый Запрос(ТекстЗапроса);
	
	СтатьиРасходовПоСпособамРасчетов  = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	РасчетыПоОплатеТруда = СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("РасчетыПоОплатеТруда", РасчетыПоОплатеТруда);
	Если ОтборПоФизическимЛицам Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	КонецЕсли; 
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведенияНачисленияЗарплаты.НачисленияПоСотрудникам = РезультатыЗапроса[1].Выгрузить();
	ДанныеДляПроведенияНачисленияЗарплаты.ОтработанноеВремяПоСотрудникам = РезультатыЗапроса[2].Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения удержаниями.
//	
// Параметры:	
// 		ДанныеДляПроведенияНачисленияЗарплаты.
//		Документ
//		ТаблицаУдержаний - имя табличной части с удержаниями, не обязательно, по умолчанию - "Удержания".
//
Процедура ЗаполнитьУдержания(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаУдержаний, ФизическиеЛица) Экспорт
	
	Если ФизическиеЛица = Неопределено Тогда
		ОтборПоФизическимЛицам = Ложь;
	Иначе
		ОтборПоФизическимЛицам = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если ОтборПоФизическимЛицам Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	КонецЕсли; 
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	ИмяТаблицыУдержаний = МетаданныеДокумента.ПолноеИмя() + "." + ТаблицаУдержаний;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Удержания.НомерСтроки КАК ИдентификаторСтроки,
	|	Удержания.Сотрудник КАК ФизическоеЛицо,
	|	Удержания.Удержание КАК Удержание,
	|	Удержания.Удержание.КатегорияУдержания КАК КатегорияУдержания,
	|	Удержания.Контрагент КАК Контрагент,
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка) КАК ВидДоходаИсполнительногоПроизводства,
	|	СУММА(Удержания.Результат) КАК Сумма
	|ИЗ
	|	#ТаблицаУдержаний КАК Удержания
	|ГДЕ
	|	Удержания.Ссылка = &Ссылка
	|	И Удержания.Сотрудник В(&ФизическиеЛица)
	|
	|СГРУППИРОВАТЬ ПО
	|	Удержания.НомерСтроки,
	|	Удержания.Сотрудник,
	|	Удержания.Удержание,
	|	Удержания.Контрагент,
	|	Удержания.ДокументОснование,
	|	Удержания.Удержание.КатегорияУдержания";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаУдержаний", ИмяТаблицыУдержаний);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Удержания.Сотрудник В(&ФизическиеЛица)", "");
	
	ДанныеДляПроведенияНачисленияЗарплаты.УдержанияПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Дополняет структуру данных для проведения таблицей НДФЛ.
//
Процедура ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем данные из документа.
	УчетНДФЛ.СоздатьВТДанныеНДФЛПоДокументу(МенеджерВременныхТаблиц, ДокументСсылка, , ФизическиеЛица);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	// Формируем таблицы для регистрации: 
	
	// 1. НДФЛ
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТДанныеНДФЛ";
	ДанныеДляПроведения.НДФЛ = Запрос.Выполнить().Выгрузить();
	
	// 2. НДФЛ для учета начисленной зарплаты.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ) КАК ВидУдержания,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеСотрудника,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка) КАК ВидДоходаИсполнительногоПроизводства,
	|	НДФЛ.НалогПоСтавке13 - НДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13 КАК Сумма,
	|	НДФЛ.*
	|ИЗ
	|	ВТДанныеНДФЛ КАК НДФЛ
	|ГДЕ
	|	(НДФЛ.НалогПоСтавке13 <> 0
	|			ИЛИ НДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13 <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения),
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка),
	|	НДФЛ.НалогСПревышенияПоСтавке13 - НДФЛ.ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13,
	|	НДФЛ.*
	|ИЗ
	|	ВТДанныеНДФЛ КАК НДФЛ
	|ГДЕ
	|	(НДФЛ.НалогСПревышенияПоСтавке13 <> 0
	|			ИЛИ НДФЛ.ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13 <> 0)";
	
	ДанныеДляПроведения.НДФЛПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Дополняет структуру данных для проведения таблицей КорректировкиВыплаты.
//
Процедура ЗаполнитьДанныеКорректировкиВыплаты(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем данные из документа.
	РасчетЗарплаты.СоздатьВТДанныеКорректировкиВыплатыПоДокументу(МенеджерВременныхТаблиц, ДокументСсылка, , ФизическиеЛица);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Формируем таблицы для регистрации: 
	
	// 1. КорректировкиВыплаты
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТДанныеКорректировкиВыплаты";
	ДанныеДляПроведения.КорректировкиВыплаты = Запрос.Выполнить().Выгрузить();
	
	// 2. КорректировкиВыплаты с возможным распределением по источникам финансирования.
	ДанныеДляПроведения.КорректировкиВыплатыПоСотрудникам = ДанныеДляПроведения.КорректировкиВыплаты.Скопировать();
	ДанныеДляПроведения.КорректировкиВыплатыПоСотрудникам.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеДляПроведения.КорректировкиВыплатыПоСотрудникам.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ДанныеДляПроведения.КорректировкиВыплатыПоСотрудникам.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ДанныеДляПроведения.КорректировкиВыплатыПоСотрудникам.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ДанныеДляПроведения.КорректировкиВыплатыПоСотрудникам.Колонки.Добавить("ВидДоходаИсполнительногоПроизводства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства"));
	
КонецПроцедуры

// Дополняет структуру данных для проведения таблицей страховых взносов.
//
Процедура ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица) Экспорт
	
	ДанныеДляПроведения.Вставить("СтраховыеВзносы", УчетСтраховыхВзносов.ДанныеОВзносахИзДокумента(ДокументСсылка, , , ФизическиеЛица));

КонецПроцедуры

// Возвращает таблицу значений с данными для распределения удержаний физлица 
// пропорционально начислениям по всем местам работы.
//
// Параметры:
//		ФизическиеЛица   - Массив.
//  	МесяцНачисления  - Дата.
//		Организация      - СправочникСсылка.Организации.
//
// Возвращаемое значение:
//		ТаблицаЗначений - ТаблицаЗначений - см РасчетЗарплаты.НоваяТаблицаБазаУдержанийПоУмолчанию().
//
Функция БазаУдержанийПоУмолчанию(ФизическиеЛица, МесяцНачисления, Организация) Экспорт
	
	БазаПоУмолчанию = РасчетЗарплаты.НоваяТаблицаБазаУдержанийПоУмолчанию();
	
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат БазаПоУмолчанию;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= ФизическиеЛица;
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные			= "ТарифнаяСтавка,Подразделение,ГоловнойСотрудник,ДатаПриема,ДатаЗавершенияРаботы,ВАрхиве";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст  = 
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудник,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ТарифнаяСтавка, 0) КАК Сумма
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
	|ГДЕ
	|	(КадровыеДанныеСотрудников.ДатаЗавершенияРаботы = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.ДатаЗавершенияРаботы, МЕСЯЦ) >= &МесяцНачисления)
	|	И КадровыеДанныеСотрудников.ДатаПриема < КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)";
	
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	
	ЗарплатаКадры.ВыгрузитьРезультатВТаблицуЗначений(Запрос.Выполнить(), БазаПоУмолчанию);
	
	Возврат БазаПоУмолчанию
	
КонецФункции

Процедура СформироватьПланВидовРасчетаПоНастройкам() Экспорт
	
	ПланыВидовРасчета.Начисления.СоздатьНачисленияПоНастройкам();
	ПланыВидовРасчета.Удержания.СоздатьУдержанияПоНастройкам();

КонецПроцедуры

Процедура СформироватьВидыРасчетаРКиСН() Экспорт
	
	ПланыВидовРасчета.Начисления.СоздатьНачисленияРКиСН();
	
КонецПроцедуры

// Помещает в переданный МенеджерВременныхТаблиц таблицу 
// 	ВТДополнительныеСвойстваНачислений с полями
//		Начисление - ПланВидовРасчетаСсылка.Начисления,
//		ЯвляетсяДенежнымСодержанием - Булево,
//		ЯвляетсяДенежнымДовольствием - Булево.
//		ЯвляетсяДоходомВНатуральнойФорме - Булево.
//		НачисляетсяВЦеломЗаМесяц - Булево.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//
Процедура СоздатьВТДополнительныеСвойстваНачислений(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланВидовРасчетаНачисления.Ссылка КАК Начисление,
	|	ЛОЖЬ КАК ЯвляетсяДенежнымСодержанием,
	|	ЛОЖЬ КАК ЯвляетсяДенежнымДовольствием,
	|	ПланВидовРасчетаНачисления.ЯвляетсяДоходомВНатуральнойФорме КАК ЯвляетсяДоходомВНатуральнойФорме,
	|	ИСТИНА КАК НачисляетсяВЦеломЗаМесяц,
	|	НЕОПРЕДЕЛЕНО КАК ВидПособияСоциальногоСтрахования
	|ПОМЕСТИТЬ ВТДополнительныеСвойстваНачислений
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК ПланВидовРасчетаНачисления";
	
	Запрос.Выполнить();  
	
КонецПроцедуры

Процедура ЗаполнитьДокументНачисленияЗарплаты(Объект) Экспорт
	
	ЗаполнитьРезультатНачисления(Объект);
	ЗаполнитьРезультатНачисленияПоДоговорам(Объект);
	ЗаполнитьНДФЛиВзносы(Объект);
	ЗаполнитьКорректировкиВыплаты(Объект);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьРезультатУдержаний(Объект);
		МодульРасчетЗарплатыДляНебольшихОрганизаций.СформироватьТабличнуюЧастьСотрудники(Объект);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьРезультатНачисления(Объект)
	
	Объект.Начисления.Очистить();
	
	РезультатНачисления = РасчетЗарплаты.РезультатНачисленияРасчетаЗарплаты(Объект.Организация, Объект.МесяцНачисления, Объект.Ссылка, Объект.Подразделение);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатНачисления, Объект.Начисления);
	
	ЗаполнитьОтработанноеВремя(Объект.Начисления, Объект.МесяцНачисления, Объект.Организация);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьРезультатНачисления(Объект, Объект.Начисления);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатНачисленияПоДоговорам(Объект)
	
	Объект.НачисленияПоДоговорам.Очистить();
	СотрудникиДляНачислений = СотрудникиДляНачисленияПоДоговорам(Объект.Организация, Объект.Подразделение, Объект.МесяцНачисления);
	НачисленияПоДоговорам   = РезультатНачисленияПоДоговорам(Объект.Организация, Объект.МесяцНачисления, Объект.Ссылка, Объект.Подразделение, СотрудникиДляНачислений);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НачисленияПоДоговорам, Объект.НачисленияПоДоговорам);
	
КонецПроцедуры

Функция СотрудникиДляНачисленияПоДоговорам(Организация, Подразделение, МесяцНачисления) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", КонецМесяца(МесяцНачисления)); 
	Запрос.УстановитьПараметр("КонецПериодаОборотов", Новый Граница(МесяцНачисления, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УсловияДоговораГПХСрезПоследних.Организация КАК Организация,
	|	УсловияДоговораГПХСрезПоследних.Сотрудник КАК Сотрудник,
	|	УсловияДоговораГПХСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УсловияДоговораГПХСрезПоследних.Договор КАК Договор,
	|	УсловияДоговораГПХСрезПоследних.Сумма КАК Сумма,
	|	УсловияДоговораГПХСрезПоследних.ДатаНачала КАК ДатаНачала,
	|	УсловияДоговораГПХСрезПоследних.ДатаОкончания КАК ДатаОкончания,
	|	УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа КАК РазмерЕжемесячногоАвансовогоПлатежа
	|ПОМЕСТИТЬ ВТДоговорникиСАвансовымиПлатежами
	|ИЗ
	|	РегистрСведений.УсловияДоговораГПХ.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ),
	|			Организация = &Организация
	|				И Подразделение В ИЕРАРХИИ (&Подразделение)) КАК УсловияДоговораГПХСрезПоследних
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаНачала, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|	И КОНЕЦПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаОкончания, МЕСЯЦ) >= КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	Организация,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорамГПХОбороты.Организация КАК Организация,
	|	НачисленияПоДоговорамГПХОбороты.Договор КАК Договор,
	|	НачисленияПоДоговорамГПХОбороты.СуммаОборот КАК СуммаОборот
	|ПОМЕСТИТЬ ВТОборотыПоДоговорам
	|ИЗ
	|	РегистрНакопления.НачисленияПоДоговорамГПХ.Обороты(
	|			,
	|			&КонецПериодаОборотов,
	|			,
	|			(ФизическоеЛицо, Договор) В
	|				(ВЫБРАТЬ
	|					ВТДоговорникиСАвансовымиПлатежами.Договор,
	|					ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо
	|				ИЗ
	|					ВТДоговорникиСАвансовымиПлатежами КАК ВТДоговорникиСАвансовымиПлатежами)) КАК НачисленияПоДоговорамГПХОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	Организация,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорамГПХОбороты.Организация КАК Организация,
	|	НачисленияПоДоговорамГПХОбороты.Договор КАК Договор,
	|	НачисленияПоДоговорамГПХОбороты.СуммаОборот КАК СуммаОборот
	|ПОМЕСТИТЬ ВТОборотыПоДоговорамЗаМесяц
	|ИЗ
	|	РегистрНакопления.НачисленияПоДоговорамГПХ.Обороты(
	|			НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ),
	|			,
	|			(ФизическоеЛицо, Договор) В
	|				(ВЫБРАТЬ
	|					ВТДоговорникиСАвансовымиПлатежами.Договор,
	|					ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо
	|				ИЗ
	|					ВТДоговорникиСАвансовымиПлатежами КАК ВТДоговорникиСАвансовымиПлатежами)) КАК НачисленияПоДоговорамГПХОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	Организация,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОНЕЦПЕРИОДА(ПлановыеНачисленияПоДоговорам.МесяцНачисления, МЕСЯЦ) КАК Период,
	|	КОНЕЦПЕРИОДА(ПлановыеНачисленияПоДоговорам.МесяцНачисления, МЕСЯЦ) КАК ПериодЗаписи,
	|	ПлановыеНачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|	ПлановыеНачисленияПоДоговорам.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДоговорники
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияПоДоговорам КАК ПлановыеНачисленияПоДоговорам
	|ГДЕ
	|	ПлановыеНачисленияПоДоговорам.МесяцНачисления = &МесяцНачисления
	|	И ПлановыеНачисленияПоДоговорам.Организация = &Организация
	|	И ПлановыеНачисленияПоДоговорам.Подразделение В ИЕРАРХИИ(&Подразделение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&МесяцНачисления,
	|	&МесяцНачисления,
	|	ВТДоговорникиСАвансовымиПлатежами.Сотрудник,
	|	ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо
	|ИЗ
	|	ВТДоговорникиСАвансовымиПлатежами КАК ВТДоговорникиСАвансовымиПлатежами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОборотыПоДоговорам КАК ВТОборотыПоДоговорам
	|		ПО ВТДоговорникиСАвансовымиПлатежами.Договор = ВТОборотыПоДоговорам.Договор
	|			И ВТДоговорникиСАвансовымиПлатежами.Организация = ВТОборотыПоДоговорам.Организация
	|			И ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо = ВТОборотыПоДоговорам.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОборотыПоДоговорамЗаМесяц КАК ВТОборотыПоДоговорамЗаМесяц
	|		ПО ВТДоговорникиСАвансовымиПлатежами.Договор = ВТОборотыПоДоговорамЗаМесяц.Договор
	|			И ВТДоговорникиСАвансовымиПлатежами.Организация = ВТОборотыПоДоговорамЗаМесяц.Организация
	|			И ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо = ВТОборотыПоДоговорамЗаМесяц.ФизическоеЛицо
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(ВТДоговорникиСАвансовымиПлатежами.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0) - ЕСТЬNULL(ВТОборотыПоДоговорамЗаМесяц.СуммаОборот, 0) > 0
	|							ТОГДА ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0) - ЕСТЬNULL(ВТОборотыПоДоговорамЗаМесяц.СуммаОборот, 0)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВТДоговорникиСАвансовымиПлатежами.РазмерЕжемесячногоАвансовогоПлатежа > ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0)
	|						ТОГДА ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0)
	|					ИНАЧЕ ВТДоговорникиСАвансовымиПлатежами.РазмерЕжемесячногоАвансовогоПлатежа - ЕСТЬNULL(ВТОборотыПоДоговорамЗаМесяц.СуммаОборот, 0)
	|				КОНЕЦ
	|		КОНЕЦ > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСотрудникиОрганизацииДоговорники.Период КАК Период,
	|	ВТСотрудникиОрганизацииДоговорники.ПериодЗаписи КАК ПериодЗаписи,
	|	ВТСотрудникиОрганизацииДоговорники.Сотрудник КАК Сотрудник,
	|	ВТСотрудникиОрганизацииДоговорники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизации
	|ИЗ
	|	ВТСотрудникиОрганизацииДоговорники КАК ВТСотрудникиОрганизацииДоговорники";
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПлановыеНачисленияПоДоговорам.Подразделение В ИЕРАРХИИ(&Подразделение)", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Подразделение В ИЕРАРХИИ (&Подразделение)", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТВсеСотрудникиОрганизации КАК Сотрудники";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

Функция РезультатНачисленияПоДоговорам(Организация, МесяцНачисления, ДокументСсылка, Подразделение, Сотрудники)

	НачисленияПоДоговорам = ТаблицаНачисленияПоДоговорам();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
		// Договоры гражданско-правового характера не используются.
		Возврат НачисленияПоДоговорам;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("БезОтбораПоПодразделению", Не ЗначениеЗаполнено(Подразделение));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("КонецПериодаОборотов", Новый Граница(МесяцНачисления, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ДатаСреза", КонецМесяца(МесяцНачисления));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияДоговораГПХ.Организация КАК Организация,
	|	УсловияДоговораГПХ.Сотрудник КАК Сотрудник,
	|	УсловияДоговораГПХ.Договор КАК Договор,
	|	МАКСИМУМ(УсловияДоговораГПХ.Период) КАК Период
	|ПОМЕСТИТЬ ВТУсловияДоговораГПХМаксимальныеПериоды
	|ИЗ
	|	РегистрСведений.УсловияДоговораГПХ КАК УсловияДоговораГПХ
	|ГДЕ
	|	УсловияДоговораГПХ.Период <= &ДатаСреза
	|	И УсловияДоговораГПХ.Организация = &Организация
	|	И УсловияДоговораГПХ.Сотрудник В(&Сотрудники)
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияДоговораГПХ.Организация,
	|	УсловияДоговораГПХ.Сотрудник,
	|	УсловияДоговораГПХ.Договор";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&МесяцНачисления КАК МесяцНачисления,
	|	УсловияДоговораГПХ.Период КАК Период,
	|	УсловияДоговораГПХ.Регистратор КАК Регистратор,
	|	УсловияДоговораГПХ.НомерСтроки КАК НомерСтроки,
	|	УсловияДоговораГПХ.Организация КАК Организация,
	|	УсловияДоговораГПХ.Сотрудник КАК Сотрудник,
	|	УсловияДоговораГПХ.Договор КАК Договор,
	|	УсловияДоговораГПХ.КодДохода КАК КодДохода,
	|	УсловияДоговораГПХ.КатегорияДохода КАК КатегорияДохода,
	|	УсловияДоговораГПХ.КодВычета КАК КодВычета,
	|	УсловияДоговораГПХ.КодДоходаСтраховыеВзносы КАК КодДоходаСтраховыеВзносы,
	|	УсловияДоговораГПХ.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	УсловияДоговораГПХ.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	УсловияДоговораГПХ.Подразделение КАК Подразделение,
	|	УсловияДоговораГПХ.Сумма КАК Сумма,
	|	УсловияДоговораГПХ.РазмерЕжемесячногоАвансовогоПлатежа КАК РазмерЕжемесячногоАвансовогоПлатежа,
	|	УсловияДоговораГПХ.СуммаВычета КАК СуммаВычета,
	|	УсловияДоговораГПХ.СуммаЕНВД КАК СуммаЕНВД,
	|	УсловияДоговораГПХ.ДатаНачала КАК ДатаНачала,
	|	УсловияДоговораГПХ.ДатаОкончания КАК ДатаОкончания,
	|	УсловияДоговораГПХ.ЗаключенСоСтудентомРаботающимВСтудотряде КАК ЗаключенСоСтудентомРаботающимВСтудотряде,
	|	УсловияДоговораГПХ.СтатьяФинансирования КАК СтатьяФинансирования,
	|	УсловияДоговораГПХ.СтатьяРасходов КАК СтатьяРасходов,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаВыплаты,
	|	УсловияДоговораГПХ.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТУсловияДоговораГПХ
	|ИЗ
	|	ВТУсловияДоговораГПХМаксимальныеПериоды КАК УсловияДоговораГПХМаксимальныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговораГПХ КАК УсловияДоговораГПХ
	|		ПО УсловияДоговораГПХМаксимальныеПериоды.Организация = УсловияДоговораГПХ.Организация
	|			И УсловияДоговораГПХМаксимальныеПериоды.Сотрудник = УсловияДоговораГПХ.Сотрудник
	|			И УсловияДоговораГПХМаксимальныеПериоды.Договор = УсловияДоговораГПХ.Договор
	|			И УсловияДоговораГПХМаксимальныеПериоды.Период = УсловияДоговораГПХ.Период
	|ГДЕ
	|	&УсловиеПодразделение
	|	И НАЧАЛОПЕРИОДА(УсловияДоговораГПХ.ДатаНачала, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|	И КОНЕЦПЕРИОДА(УсловияДоговораГПХ.ДатаОкончания, МЕСЯЦ) >= КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)";
	
	ТекстУсловияПодразделение = "ИСТИНА";
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ТекстУсловияПодразделение = "УсловияДоговораГПХ.Подразделение В ИЕРАРХИИ (&Подразделение)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПодразделение", ТекстУсловияПодразделение);
			
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорамГПХОбороты.Организация КАК Организация,
	|	НачисленияПоДоговорамГПХОбороты.Договор КАК Договор,
	|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорамГПХОбороты.СуммаОборот КАК СуммаОборот
	|ПОМЕСТИТЬ НачисленияПоДоговорамГПХ
	|ИЗ
	|	РегистрНакопления.НачисленияПоДоговорамГПХ.Обороты(
	|			,
	|			&КонецПериодаОборотов,
	|			,
	|			Организация = &Организация
	|				И Договор В
	|					(ВЫБРАТЬ
	|						УсловияДоговораГПХ.Договор
	|					ИЗ
	|						ВТУсловияДоговораГПХ КАК УсловияДоговораГПХ)) КАК НачисленияПоДоговорамГПХОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоДоговорамГПХ.Организация КАК Организация,
	|	НачисленияПоДоговорамГПХ.Договор КАК Договор,
	|	НачисленияПоДоговорамГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(НачисленияПоДоговорамГПХ.СуммаОборот) КАК СуммаОборот
	|ПОМЕСТИТЬ НачисленияПоДоговорамГПХОбороты
	|ИЗ
	|	НачисленияПоДоговорамГПХ КАК НачисленияПоДоговорамГПХ
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоДоговорамГПХ.Организация,
	|	НачисленияПоДоговорамГПХ.Договор,
	|	НачисленияПоДоговорамГПХ.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоДоговорамГПХ.Организация КАК Организация,
	|	НачисленияПоДоговорамГПХ.Договор КАК Договор,
	|	НачисленияПоДоговорамГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(НачисленияПоДоговорамГПХ.Сумма) КАК СуммаОборот
	|ПОМЕСТИТЬ НачисленияПоДоговорамГПХЗаМесяц
	|ИЗ
	|	РегистрНакопления.НачисленияПоДоговорамГПХ КАК НачисленияПоДоговорамГПХ
	|ГДЕ
	|	НачисленияПоДоговорамГПХ.Период >= НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|	И НачисленияПоДоговорамГПХ.Период <= КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|	И НачисленияПоДоговорамГПХ.Организация = &Организация
	|	И НачисленияПоДоговорамГПХ.Договор В
	|			(ВЫБРАТЬ
	|				УсловияДоговораГПХ.Договор
	|			ИЗ
	|				ВТУсловияДоговораГПХ КАК УсловияДоговораГПХ)
	|	И НачисленияПоДоговорамГПХ.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоДоговорамГПХ.Организация,
	|	НачисленияПоДоговорамГПХ.ФизическоеЛицо,
	|	НачисленияПоДоговорамГПХ.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплаченныеДоговоры.ДоговорАкт КАК ДоговорАкт
	|ПОМЕСТИТЬ ОплаченныеДоговоры
	|ИЗ
	|	РегистрСведений.ОплаченныеДоговоры КАК ОплаченныеДоговоры
	|ГДЕ
	|	ОплаченныеДоговоры.Регистратор <> &Ссылка
	|	И ОплаченныеДоговоры.МесяцНачисления = &МесяцНачисления";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.УстановитьПараметр("ВычетВСуммеРасходовПоДоговорамГПХКромеАвторских", УчетНДФЛ.ВычетВСуммеРасходовПоДоговорамГПХКромеАвторских());
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Период КАК Период,
	|	Начисления.МесяцНачисления КАК МесяцНачисления,
	|	Начисления.Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Договор КАК Договор,
	|	Начисления.ДоговорАкт КАК ДоговорАкт,
	|	Начисления.КодДохода КАК КодДохода,
	|	Начисления.КатегорияДохода КАК КатегорияДохода,
	|	Начисления.КодВычета КАК КодВычета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги) КАК Начисление,
	|	ВЫБОР
	|		КОГДА Начисления.КодДоходаСтраховыеВзносы = ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ)
	|				И Начисления.ЗаключенСоСтудентомРаботающимВСтудотряде
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору)
	|		ИНАЧЕ Начисления.КодДоходаСтраховыеВзносы
	|	КОНЕЦ КАК КодДоходаСтраховыеВзносы,
	|	ВЫБОР
	|		КОГДА Начисления.КодДоходаСтраховыеВзносы = ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ)
	|				И Начисления.ЗаключенСоСтудентомРаботающимВСтудотряде
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору)
	|		ИНАЧЕ Начисления.КодДоходаСтраховыеВзносы
	|	КОНЕЦ КАК ВидДохода,
	|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Начисления.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Сумма КАК Сумма,
	|	Начисления.СуммаВычета КАК СуммаВычета,
	|	ВЫБОР
	|		КОГДА Начисления.КодВычета = &ВычетВСуммеРасходовПоДоговорамГПХКромеАвторских
	|			ТОГДА 0
	|		ИНАЧЕ Начисления.СкидкаПоВзносам
	|	КОНЕЦ КАК СкидкаПоВзносам,
	|	Начисления.СуммаЕНВД КАК СуммаЕНВД,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.КоличествоДетей КАК КоличествоДетей
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачисленияПоДоговорам.МесяцНачисления КАК Период,
	|		НачисленияПоДоговорам.МесяцНачисления КАК МесяцНачисления,
	|		НачисленияПоДоговорам.Организация КАК Организация,
	|		НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|		НачисленияПоДоговорам.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|		НачисленияПоДоговорам.Договор КАК Договор,
	|		НачисленияПоДоговорам.ДоговорАкт КАК ДоговорАкт,
	|		НачисленияПоДоговорам.КодДохода КАК КодДохода,
	|		НачисленияПоДоговорам.КатегорияДохода КАК КатегорияДохода,
	|		НачисленияПоДоговорам.КодВычета КАК КодВычета,
	|		НачисленияПоДоговорам.КодДоходаСтраховыеВзносы КАК КодДоходаСтраховыеВзносы,
	|		НачисленияПоДоговорам.ЗаключенСоСтудентомРаботающимВСтудотряде КАК ЗаключенСоСтудентомРаботающимВСтудотряде,
	|		НачисленияПоДоговорам.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|		НачисленияПоДоговорам.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|		НачисленияПоДоговорам.Подразделение КАК Подразделение,
	|		НачисленияПоДоговорам.Сумма КАК Сумма,
	|		НачисленияПоДоговорам.СуммаВычета КАК СуммаВычета,
	|		НачисленияПоДоговорам.СуммаВычета КАК СкидкаПоВзносам,
	|		НачисленияПоДоговорам.СуммаЕНВД КАК СуммаЕНВД,
	|		НачисленияПоДоговорам.ДатаНачала КАК ДатаНачала,
	|		НачисленияПоДоговорам.ДатаОкончания КАК ДатаОкончания,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаВыплаты,
	|		НачисленияПоДоговорам.Регистратор КАК Регистратор,
	|		НачисленияПоДоговорам.НомерСтроки КАК НомерСтроки,
	|		0 КАК КоличествоДетей
	|	ИЗ
	|		РегистрСведений.ПлановыеНачисленияПоДоговорам КАК НачисленияПоДоговорам
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОплаченныеДоговоры КАК СуществующиеНачисления
	|			ПО НачисленияПоДоговорам.ДоговорАкт = СуществующиеНачисления.ДоговорАкт
	|	ГДЕ
	|		НачисленияПоДоговорам.Организация = &Организация
	|		И НачисленияПоДоговорам.МесяцНачисления = &МесяцНачисления
	|		И СуществующиеНачисления.ДоговорАкт ЕСТЬ NULL
	|		И &УсловиеПодразделение
	|		И НачисленияПоДоговорам.Сотрудник В(&Сотрудники)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&МесяцНачисления,
	|		&МесяцНачисления,
	|		УсловияДоговораГПХСрезПоследних.Организация,
	|		УсловияДоговораГПХСрезПоследних.Сотрудник,
	|		УсловияДоговораГПХСрезПоследних.ФизическоеЛицо,
	|		УсловияДоговораГПХСрезПоследних.Договор,
	|		УсловияДоговораГПХСрезПоследних.Договор,
	|		УсловияДоговораГПХСрезПоследних.КодДохода,
	|		УсловияДоговораГПХСрезПоследних.КатегорияДохода,
	|		УсловияДоговораГПХСрезПоследних.КодВычета,
	|		УсловияДоговораГПХСрезПоследних.КодДоходаСтраховыеВзносы,
	|		УсловияДоговораГПХСрезПоследних.ЗаключенСоСтудентомРаботающимВСтудотряде,
	|		УсловияДоговораГПХСрезПоследних.СпособОтраженияЗарплатыВБухучете,
	|		УсловияДоговораГПХСрезПоследних.ОтношениеКЕНВД,
	|		УсловияДоговораГПХСрезПоследних.Подразделение,
	|		ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|				ТОГДА ВЫБОР
	|						КОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0) > 0
	|							ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа > УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0)
	|						ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|					ИНАЧЕ УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|				КОНЕЦ
	|		КОНЕЦ,
	|		УсловияДоговораГПХСрезПоследних.СуммаВычета,
	|		УсловияДоговораГПХСрезПоследних.СуммаВычета,
	|		УсловияДоговораГПХСрезПоследних.СуммаЕНВД,
	|		УсловияДоговораГПХСрезПоследних.ДатаНачала,
	|		УсловияДоговораГПХСрезПоследних.ДатаОкончания,
	|		УсловияДоговораГПХСрезПоследних.ПланируемаяДатаВыплаты,
	|		УсловияДоговораГПХСрезПоследних.Регистратор,
	|		УсловияДоговораГПХСрезПоследних.НомерСтроки,
	|		0
	|	ИЗ
	|		ВТУсловияДоговораГПХ КАК УсловияДоговораГПХСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачисленияПоДоговорамГПХОбороты КАК НачисленияПоДоговорамГПХОбороты
	|			ПО УсловияДоговораГПХСрезПоследних.Договор = НачисленияПоДоговорамГПХОбороты.Договор
	|				И УсловияДоговораГПХСрезПоследних.Организация = НачисленияПоДоговорамГПХОбороты.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачисленияПоДоговорамГПХЗаМесяц КАК НачисленияПоДоговорамГПХЗаМесяц
	|			ПО УсловияДоговораГПХСрезПоследних.Договор = НачисленияПоДоговорамГПХЗаМесяц.Договор
	|				И УсловияДоговораГПХСрезПоследних.Организация = НачисленияПоДоговорамГПХЗаМесяц.Организация
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА НАЧАЛОПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|					ТОГДА ВЫБОР
	|							КОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0) > 0
	|								ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа > УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0)
	|							ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|						ИНАЧЕ УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|					КОНЕЦ
	|			КОНЕЦ > 0) КАК Начисления";
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ТекстУсловияПодразделение = "НачисленияПоДоговорам.Подразделение В ИЕРАРХИИ (&Подразделение)";
	Иначе
		ТекстУсловияПодразделение = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПодразделение", ТекстУсловияПодразделение);
	Запрос.Выполнить();
	
	// Рассчитаем вычеты в пределах нормативов затрат.
	УчетНДФЛ.СоздатьВТВычетыКДоходамФизическихЛиц(ДокументСсылка, Организация, МесяцНачисления, МенеджерВременныхТаблиц,,"ВТПредоставленныеВычеты");
	
	УчетСтраховыхВзносов.СоздатьВТСкидкиКДоходамФизическихЛиц(Организация, МесяцНачисления, МенеджерВременныхТаблиц, ДокументСсылка,, "ВТПредоставленныеСкидки");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.МесяцНачисления КАК МесяцНачисления,
	|	Начисления.Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДоговорАкт КАК ДокументОснование,
	|	Начисления.КодДохода КАК КодДохода,
	|	Начисления.КатегорияДохода КАК КатегорияДохода,
	|	Начисления.КодВычета КАК КодВычета,
	|	Начисления.КодДоходаСтраховыеВзносы КАК КодДоходаСтраховыеВзносы,
	|	Начисления.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Сумма КАК Результат,
	|	ЕСТЬNULL(ВычетыВПределахНормативовЗатрат.СуммаВычета, Начисления.СуммаВычета) КАК СуммаВычета,
	|	ЕСТЬNULL(СкидкиКДоходамФизическихЛиц.СуммаСкидки, Начисления.СкидкаПоВзносам) КАК СкидкаПоВзносам,
	|	Начисления.СуммаЕНВД КАК СуммаЕНВД,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА Начисления.ПланируемаяДатаВыплаты = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ПланируемаяДатаВыплаты
	|		ИНАЧЕ Начисления.ПланируемаяДатаВыплаты
	|	КОНЕЦ КАК ПланируемаяДатаВыплаты
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыКДоходамФизическихЛиц КАК ВычетыВПределахНормативовЗатрат
	|		ПО Начисления.Регистратор = ВычетыВПределахНормативовЗатрат.Регистратор
	|			И Начисления.НомерСтроки = ВычетыВПределахНормативовЗатрат.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСкидкиКДоходамФизическихЛиц КАК СкидкиКДоходамФизическихЛиц
	|		ПО Начисления.Регистратор = СкидкиКДоходамФизическихЛиц.Регистратор
	|			И Начисления.НомерСтроки = СкидкиКДоходамФизическихЛиц.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
	|		ПО Начисления.Договор = ДоговорРаботыУслуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОплаченныеДоговоры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачисленияПоДоговорамГПХЗаМесяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачисленияПоДоговорамГПХОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачисленияПоДоговорамГПХ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТУсловияДоговораГПХ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТУсловияДоговораГПХМаксимальныеПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПредоставленныеВычеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПредоставленныеСкидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВычетыКДоходамФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСкидкиКДоходамФизическихЛиц";
		
	ПланируемаяДатаВыплатыЗарплаты = УчетЗарплаты.ПланируемаяДатаВыплатыЗарплаты(Организация, ДобавитьМесяц(МесяцНачисления, 1));
	Запрос.УстановитьПараметр("ПланируемаяДатаВыплаты", ПланируемаяДатаВыплатыЗарплаты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаНачисления = НачисленияПоДоговорам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисления, Выборка);
	КонецЦикла;
	
	Возврат НачисленияПоДоговорам;

КонецФункции

Функция ТаблицаНачисленияПоДоговорам()
	
	НачисленияПоДоговорам = Новый ТаблицаЗначений;
	НачисленияПоДоговорам.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияПоДоговорам.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	НачисленияПоДоговорам.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	НачисленияПоДоговорам.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	НачисленияПоДоговорам.Колонки.Добавить("КодДоходаСтраховыеВзносы", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовПоСтраховымВзносам"));
	НачисленияПоДоговорам.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	НачисленияПоДоговорам.Колонки.Добавить("СуммаВычета", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	НачисленияПоДоговорам.Колонки.Добавить("СкидкаПоВзносам", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	НачисленияПоДоговорам.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов("ДокументСсылка.ДоговорРаботыУслуги"));
	НачисленияПоДоговорам.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	НачисленияПоДоговорам.Колонки.Добавить("ПланируемаяДатаВыплаты", Новый ОписаниеТипов("Дата"));
	
	Возврат НачисленияПоДоговорам;
	
КонецФункции

Процедура ЗаполнитьОтработанноеВремя(СтрокиНачислений, МесяцНачисления, Организация) Экспорт
	
	КоличествоДней                = 0;
	КоличествоЧасов               = 0;
	КоличествоПредпраздничныхДней = 0;
	
	// Получаем количество дней по календарю.
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизацийПовтИсп = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизацийПовтИсп");
		КалендарьОрганизации = МодульРасчетЗарплатыДляНебольшихОрганизацийПовтИсп.КалендарьОрганизации(Организация);
	Иначе
		КалендарьОрганизации = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	КонецЕсли;
	
	Если КалендарьОрганизации <> Неопределено Тогда
		
		// Если производственный календарь определить не удалось - оставляем число дней нулевым.
		РабочихДнейЧасов = РабочихДнейЧасовВПериоде(КалендарьОрганизации, НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
		
		КоличествоДней                = РабочихДнейЧасов.Дней;
		КоличествоЧасов               = РабочихДнейЧасов.Часов;
		КоличествоПредпраздничныхДней = РабочихДнейЧасов.ПредпраздничныхДней;
		
	КонецЕсли;
	
	Если ТипЗнч(СтрокиНачислений) = Тип("ТаблицаЗначений") Тогда
		СотрудникиНачислений = СтрокиНачислений.ВыгрузитьКолонку("Сотрудник");
	Иначе
		СотрудникиНачислений = СтрокиНачислений.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиНачислений, "ДатаПриема,ДатаЗавершенияРаботы,ДоляНеполногоРабочегоВремени");
	
	Начисления = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиНачислений, "Начисление", Истина);
	КатегорииНачислений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Начисления, "КатегорияНачисленияИлиНеоплаченногоВремени");
	
	КоэффициентыПересчетаСотрудников = Новый Соответствие;
	
	Для Каждого Строка Из СтрокиНачислений Цикл
		
		Если КатегорииНачислений[Строка.Начисление] = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда Тогда
			
			НачалоПериодаРаботы = НачалоМесяца(МесяцНачисления);
			ОкончаниеПериодаРаботы = КонецМесяца(МесяцНачисления);
			
			ДоляНеполногоРабочегоВремени = 1;
			
			ДанныеСотрудника = КадровыеДанные.НайтиСтроки(Новый Структура("Сотрудник", Строка.Сотрудник));
			Если КалендарьОрганизации <> Неопределено
				И ДанныеСотрудника.Количество() > 0
				И (ДанныеСотрудника[0].ДатаПриема > НачалоПериодаРаботы
					ИЛИ ЗначениеЗаполнено(ДанныеСотрудника[0].ДатаЗавершенияРаботы)
						И ДанныеСотрудника[0].ДатаЗавершенияРаботы < ОкончаниеПериодаРаботы) Тогда
						
				Если ДанныеСотрудника[0].ДатаПриема > НачалоПериодаРаботы Тогда
					НачалоПериодаРаботы = ДанныеСотрудника[0].ДатаПриема;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(ДанныеСотрудника[0].ДатаЗавершенияРаботы)
					И ДанныеСотрудника[0].ДатаЗавершенияРаботы < ОкончаниеПериодаРаботы Тогда
					
					ОкончаниеПериодаРаботы = ДанныеСотрудника[0].ДатаЗавершенияРаботы;
					
				КонецЕсли;
				
				РабочихДнейЧасов = РабочихДнейЧасовВПериоде(КалендарьОрганизации, НачалоПериодаРаботы, ОкончаниеПериодаРаботы);
				
				КоличествоОтработанныхДней    = РабочихДнейЧасов.Дней;
				КоличествоОтработанныхЧасов   = РабочихДнейЧасов.Часов;
				КоличествоПредпраздничныхДней = РабочихДнейЧасов.ПредпраздничныхДней;
			Иначе
				КоличествоОтработанныхДней  = КоличествоДней;
				КоличествоОтработанныхЧасов = КоличествоЧасов;
			КонецЕсли;
			
			Если ДанныеСотрудника.Количество() > 0
				И ЗначениеЗаполнено(ДанныеСотрудника[0].ДоляНеполногоРабочегоВремени) Тогда
				ДоляНеполногоРабочегоВремени = ДанныеСотрудника[0].ДоляНеполногоРабочегоВремени;
			КонецЕсли;
			
			// Для расчета отработанного времени с учетом доли неполного времени сначала "возвращаем" часы, на которые
			// короче предпраздничный день: 1 час за каждый день (т.к. прибавляем количество предпраздничных дней).
			// После поправки отработанного времени на долю неполного времени, количество предпраздничных часов вычитаем
			// (предпраздничный день короче на 1 час независимо от того какова доля рабочего времени).
			КоличествоОтработанныхЧасов = Макс(0,
				(КоличествоОтработанныхЧасов + КоличествоПредпраздничныхДней) *
					ДоляНеполногоРабочегоВремени - КоличествоПредпраздничныхДней);
			
			Строка.ОтработаноДней = КоличествоОтработанныхДней;
			Строка.ОтработаноЧасов = КоличествоОтработанныхЧасов;
			
			Если ТипЗнч(Строка) = Тип("ДанныеФормыЭлементКоллекции") Тогда
				
				Если Строка.Свойство("РабочихДней") Тогда
					Строка.РабочихДней = КоличествоДней;
				КонецЕсли;
				
				Если Строка.Свойство("РабочихЧасов") Тогда
					Строка.РабочихЧасов = КоличествоЧасов * ДоляНеполногоРабочегоВремени;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Строка.ОтработаноДней <> КоличествоДней И КоличествоДней <> 0 Тогда
				
				КоэффициентыПересчета = Строка.ОтработаноДней / КоличествоДней;
				КоэффициентыПересчетаСотрудников.Вставить(Строка.Сотрудник, КоэффициентыПересчета);
				Строка.Результат = Строка.Результат * КоэффициентыПересчета;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиНачислений Цикл
		
		Если КатегорииНачислений[Строка.Начисление] <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда Тогда
			
			КоэффициентыПересчета = КоэффициентыПересчетаСотрудников.Получить(Строка.Сотрудник);
			Если КоэффициентыПересчета <> Неопределено Тогда
				Строка.Результат = Строка.Результат * КоэффициентыПересчета;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТДляРасчетаНДФЛиВзносов(МенеджерВременныхТаблиц, Объект, Сотрудники = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Начисление КАК Начисление,
	|	&МесяцНачисления КАК ПериодДействия,
	|	&МесяцНачисления КАК ДатаНачала,
	|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ), ДЕНЬ) КАК ДатаОкончания,
	|	Начисления.Результат КАК СуммаДохода,
	|	Начисления.КодВычета КАК КодВычетаНДФЛ,
	|	Начисления.СуммаВычета КАК СуммаВычетаНДФЛ,
	|	Начисления.СуммаВычета КАК СуммаВычетаВзносы,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
	|ПОМЕСТИТЬ ВТВсеНачисления
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	СУММА(Начисления.СуммаДохода) КАК СуммаДохода,
	|	СУММА(Начисления.СуммаДохода) КАК Сумма,
	|	Начисления.КодВычетаНДФЛ КАК КодВычетаНДФЛ,
	|	Начисления.СуммаВычетаНДФЛ КАК СуммаВычетаНДФЛ,
	|	Начисления.СуммаВычетаВзносы КАК СуммаВычетаВзносы,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Подразделение КАК ПодразделениеОрганизации,
	|	Начисления.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ВТВсеНачисления КАК Начисления
	|ГДЕ
	|	Начисления.Сотрудник В(&Сотрудники)
	|	И &ПоВсемСотрудникам = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.Начисление,
	|	Начисления.ПериодДействия,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.КодВычетаНДФЛ,
	|	Начисления.СуммаВычетаНДФЛ,
	|	Начисления.СуммаВычетаВзносы,
	|	Начисления.Подразделение,
	|	Начисления.Подразделение,
	|	Начисления.Подразделение,
	|	Начисления.ПланируемаяДатаВыплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Начисление,
	|	Начисления.ПериодДействия,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	СУММА(Начисления.СуммаДохода),
	|	СУММА(Начисления.СуммаДохода),
	|	Начисления.КодВычетаНДФЛ,
	|	Начисления.СуммаВычетаНДФЛ,
	|	Начисления.СуммаВычетаВзносы,
	|	Начисления.Подразделение,
	|	Начисления.Подразделение,
	|	Начисления.Подразделение,
	|	Начисления.ПланируемаяДатаВыплаты
	|ИЗ
	|	ВТВсеНачисления КАК Начисления
	|ГДЕ
	|	&ПоВсемСотрудникам = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.Начисление,
	|	Начисления.ПериодДействия,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.КодВычетаНДФЛ,
	|	Начисления.СуммаВычетаНДФЛ,
	|	Начисления.СуммаВычетаВзносы,
	|	Начисления.Подразделение,
	|	Начисления.Подразделение,
	|	Начисления.Подразделение,
	|	Начисления.ПланируемаяДатаВыплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&МесяцНачисления КАК ПериодРегистрации,
	|	Начисления.НомерСтроки + 1000000 КАК ИдентификаторСтроки,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги) КАК Начисление,
	|	Начисления.Результат КАК Сумма,
	|	Начисления.СуммаВычета КАК СуммаВычета,
	|	Начисления.СкидкаПоВзносам КАК СкидкаПоВзносам,
	|	Начисления.КодДохода КАК КодДохода,
	|	Начисления.КатегорияДохода КАК КатегорияДохода,
	|	Начисления.КодВычета КАК КодВычета,
	|	Начисления.ДокументОснование КАК Договор,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	&МесяцНачисления КАК ДатаНачала,
	|	&МесяцНачисления КАК ДатаОкончания,
	|	Начисления.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
	|ПОМЕСТИТЬ ВТВсеНачисленияПоДоговорам
	|ИЗ
	|	&НачисленияПоДоговорам КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(НачисленияПоДоговорам.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорам.Организация КАК Организация,
	|	НачисленияПоДоговорам.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияПоДоговорам.Подразделение КАК Подразделение,
	|	НачисленияПоДоговорам.Начисление КАК Начисление,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.СуммаВычета КАК СуммаВычета,
	|	НачисленияПоДоговорам.СкидкаПоВзносам КАК СкидкаПоВзносам,
	|	НачисленияПоДоговорам.КодДохода КАК КодДохода,
	|	НачисленияПоДоговорам.КатегорияДохода КАК КатегорияДохода,
	|	НачисленияПоДоговорам.КодВычета КАК КодВычета,
	|	НачисленияПоДоговорам.Договор КАК Договор,
	|	НачисленияПоДоговорам.ДокументОснование КАК ДокументОснование,
	|	НачисленияПоДоговорам.ДатаНачала КАК ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	НачисленияПоДоговорам.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТНачисленияПоДоговорам
	|ИЗ
	|	ВТВсеНачисленияПоДоговорам КАК НачисленияПоДоговорам
	|ГДЕ
	|	НачисленияПоДоговорам.Сотрудник В(&Сотрудники)
	|	И &ПоВсемСотрудникам = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияПоДоговорам.Сотрудник,
	|	Сотрудники.ФизическоеЛицо,
	|	НачисленияПоДоговорам.Организация,
	|	НачисленияПоДоговорам.ПериодРегистрации,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.Начисление,
	|	НачисленияПоДоговорам.Сумма,
	|	НачисленияПоДоговорам.СуммаВычета,
	|	НачисленияПоДоговорам.СкидкаПоВзносам,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.КатегорияДохода,
	|	НачисленияПоДоговорам.КодВычета,
	|	НачисленияПоДоговорам.Договор,
	|	НачисленияПоДоговорам.ДокументОснование,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты,
	|	НачисленияПоДоговорам.ИдентификаторСтроки
	|ИЗ
	|	ВТВсеНачисленияПоДоговорам КАК НачисленияПоДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО НачисленияПоДоговорам.Сотрудник = Сотрудники.Ссылка
	|ГДЕ
	|	&ПоВсемСотрудникам = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|	НачисленияПоДоговорам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорам.Организация КАК Организация,
	|	НачисленияПоДоговорам.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияПоДоговорам.Подразделение КАК Подразделение,
	|	НачисленияПоДоговорам.Начисление КАК Начисление,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.СуммаВычета КАК СуммаВычета,
	|	НачисленияПоДоговорам.СкидкаПоВзносам КАК СкидкаПоВзносам,
	|	НачисленияПоДоговорам.КодДохода КАК КодДохода,
	|	НачисленияПоДоговорам.КатегорияДохода КАК КатегорияДохода,
	|	НачисленияПоДоговорам.КодВычета КАК КодВычета,
	|	НачисленияПоДоговорам.Договор КАК Договор,
	|	НачисленияПоДоговорам.ДокументОснование КАК ДокументОснование,
	|	НачисленияПоДоговорам.ДатаНачала КАК ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	НачисленияПоДоговорам.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТЗаписиНачисленийПоДоговорам
	|ИЗ
	|	ВТНачисленияПоДоговорам КАК НачисленияПоДоговорам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|	НачисленияПоДоговорам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорам.Организация КАК Организация,
	|	НачисленияПоДоговорам.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияПоДоговорам.Подразделение КАК Подразделение,
	|	НачисленияПоДоговорам.Подразделение КАК ПодразделениеСотрудника,
	|	НачисленияПоДоговорам.Начисление КАК Начисление,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.Сумма КАК СуммаДохода,
	|	НачисленияПоДоговорам.СуммаВычета КАК СуммаВычета,
	|	НачисленияПоДоговорам.СкидкаПоВзносам КАК СкидкаПоВзносам,
	|	НачисленияПоДоговорам.КодДохода КАК КодДохода,
	|	НачисленияПоДоговорам.КатегорияДохода КАК КатегорияДохода,
	|	НачисленияПоДоговорам.КодВычета КАК КодВычета,
	|	НачисленияПоДоговорам.Договор КАК Договор,
	|	НачисленияПоДоговорам.ДокументОснование КАК ДокументОснование,
	|	НачисленияПоДоговорам.ДатаНачала КАК ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТНачисленияПоДоговорамДляНДФЛ
	|ИЗ
	|	ВТНачисленияПоДоговорам КАК НачисленияПоДоговорам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.Сотрудник КАК ФизическоеЛицо,
	|	Удержания.Удержание КАК Удержание,
	|	Удержания.Результат КАК Сумма
	|ПОМЕСТИТЬ ВТВсеУдержания
	|ИЗ
	|	&Удержания КАК Удержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Удержание КАК Удержание,
	|	Удержания.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	ВТВсеУдержания КАК Удержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СотрудникОтбор
	|		ПО Удержания.ФизическоеЛицо = СотрудникОтбор.ФизическоеЛицо
	|ГДЕ
	|	СотрудникОтбор.Ссылка В(&Сотрудники)
	|	И &ПоВсемСотрудникам = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.ФизическоеЛицо,
	|	Удержания.Удержание,
	|	Удержания.Сумма
	|ИЗ
	|	ВТВсеУдержания КАК Удержания
	|ГДЕ
	|	&ПоВсемСотрудникам = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Сотрудники)
	|	И &ПоВсемСотрудникам = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = Начисления.Сотрудник)
	|ГДЕ
	|	&ПоВсемСотрудникам = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо
	|ИЗ
	|	ВТНачисленияПоДоговорам КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = Начисления.Сотрудник)
	|ГДЕ
	|	&ПоВсемСотрудникам = ИСТИНА";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления", Объект.Начисления.Выгрузить());
	Запрос.УстановитьПараметр("НачисленияПоДоговорам", Объект.НачисленияПоДоговорам.Выгрузить());
	Запрос.УстановитьПараметр("Удержания", Объект.Удержания.Выгрузить());
	Запрос.УстановитьПараметр("МесяцНачисления", Объект.МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
	Запрос.Выполнить();
	
	ОтражениеЗарплатыВБухучетеБазовый.СоздатьВТНачисленияСтраховыеВзносы(МенеджерВременныхТаблиц, Объект.Организация, Объект.МесяцНачисления, "ВТНачисленияСтраховыеВзносы");
	
КонецПроцедуры

Процедура ЗаполнитьНДФЛиВзносы(Объект, ЗаполнятьНДФЛ = Истина, ЗаполнятьВзносы = Истина) Экспорт
	
	Если Объект.КорректироватьНДФЛ И Объект.КорректироватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	// Составляем временные таблицы для расчета НДФЛ и взносов.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДляРасчетаНДФЛиВзносов(МенеджерВременныхТаблиц, Объект);

	ДатаОперации = Мин(Объект.Дата, КонецМесяца(Объект.МесяцНачисления));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗаполнятьНДФЛ Тогда
		ЗаполнитьНДФЛ(Объект, МенеджерВременныхТаблиц, ДатаОперации);
	КонецЕсли; 
	
	Если ЗаполнятьВзносы Тогда
		ЗаполнитьВзносы(Объект, МенеджерВременныхТаблиц, ДатаОперации);
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьНДФЛ(Объект, МенеджерВременныхТаблиц, ДатаОперации)
	
	Если Объект.КорректироватьНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет НДФЛ
	РезультатРасчетаНДФЛ = РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, Объект, ДатаОперации);
	СортироватьРезультатРасчетаНДФЛ(РезультатРасчетаНДФЛ, Объект);
	
	Объект.НДФЛ.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчетаНДФЛ.НДФЛ, Объект.НДФЛ);
	
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные, Объект.ПримененныеВычетыНаДетейИИмущественные);
	
КонецПроцедуры

Процедура СортироватьРезультатРасчетаНДФЛ(РезультатРасчетаНДФЛ, Объект)
	
	СортируемыеКоллекции = Новый Массив;
	Коллекция = СотрудникиФормы.СортируемаяКоллекцияФизическихЛиц(РезультатРасчетаНДФЛ.НДФЛ);
	Коллекция.ОписаниеКоллекции.Псевдоним = "НДФЛ";
	Коллекция.ОписаниеКоллекции.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	МетаданныеРеквизитов = Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НДФЛ.Реквизиты;
	СотрудникиФормы.ДобавитьДополнительноеПолеСортировки(Коллекция, "МесяцНалоговогоПериода", МетаданныеРеквизитов.МесяцНалоговогоПериода.Тип);
	СотрудникиФормы.ДобавитьДополнительноеПолеСортировки(Коллекция, "Подразделение", МетаданныеРеквизитов.Подразделение.Тип);
	
	СортируемыеКоллекции.Добавить(Коллекция);
	
	ПорядокСортировки = СотрудникиФормы.ПорядокСортировкиКоллекцияФизическихЛиц(СортируемыеКоллекции, Объект.Организация, КонецМесяца(Объект.МесяцНачисления));
	
	РезультатРасчетаНДФЛ.НДФЛ.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Если ПорядокСортировки.Свойство("НДФЛ") Тогда
		
		Для Каждого СтрокаПорядка Из ПорядокСортировки.НДФЛ Цикл
			СтрокаТаблицы = РезультатРасчетаНДФЛ.НДФЛ[СтрокаПорядка.ИндексСтрокиИсходнойТаблицы];
			СтрокаТаблицы.Порядок = СтрокаПорядка.Порядок;
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатРасчетаНДФЛ.НДФЛ.Сортировать("Порядок");
	РезультатРасчетаНДФЛ.НДФЛ.Колонки.Удалить("Порядок");
	
КонецПроцедуры

Процедура ЗаполнитьКорректировкиВыплаты(Объект, МесяцНачисленияИмя = "МесяцНачисления") Экспорт
	
	// Расчет НДФЛ
	РезультатРасчетаКорректировкиВыплаты = РезультатРасчетаКорректировкиВыплаты(Объект, МесяцНачисленияИмя);
	
	Объект.КорректировкиВыплаты.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчетаКорректировкиВыплаты, Объект.КорректировкиВыплаты);
	
КонецПроцедуры

Процедура ЗаполнитьВзносы(Объект, МенеджерВременныхТаблиц, ДатаОперации)
	
	Если Объект.КорректироватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет страховых взносов
	Взносы = РезультатРасчетаВзносов(МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);
	
	// Перенос результата расчета страховых взносов в форму.
	Объект.Взносы.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Взносы, Объект.Взносы);
	
КонецПроцедуры

Функция РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, Объект, ДатаОперации, ПланируемаяДатаВыплатыВТаблицеНачислений = Ложь) Экспорт
	
	// Подготавливаем структуру наборов записей документа, имитирующую коллекцию Движения.
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
	
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьЗапись = Истина;
	КонецЕсли;
	
	УчетНДФЛ.СформироватьСоциальныеВычетыПоВременнойТаблице(Объект.Ссылка, НаборыЗаписей,  Неопределено, Объект.Организация, ДатаОперации, Объект.МесяцНачисления, МенеджерВременныхТаблиц);
	УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(НаборыЗаписей, Неопределено, Объект.Организация, ДатаОперации, ?(ПланируемаяДатаВыплатыВТаблицеНачислений, Неопределено, КонецМесяца(Объект.МесяцНачисления)), МенеджерВременныхТаблиц, Объект.МесяцНачисления);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНачисленияПоДоговорамДляНДФЛ";
	НачисленияПоДоговорам = Запрос.Выполнить().Выгрузить();
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(НаборыЗаписей, Неопределено, Объект.Организация, ДатаОперации, НачисленияПоДоговорам);
	
	// Расчет НДФЛ
	РезультатРасчетаНДФЛ = УчетНДФЛ.РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления, Истина, НачалоДня(КонецМесяца(Объект.МесяцНачисления)), НаборыЗаписей);
	
	Если ОтменятьЗапись = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат РезультатРасчетаНДФЛ;
	
КонецФункции

Функция РезультатРасчетаКорректировкиВыплаты(Объект, МесяцНачисленияИмя = "МесяцНачисления", ФизическиеЛица = Неопределено) Экспорт
	
	// Расчет КорректировкиВыплаты
	РезультатРасчетаНДФЛ = Объект.НДФЛ.Выгрузить();
	Если ФизическиеЛица <> Неопределено Тогда
		Для Каждого СтрокаТаблицы ИЗ РезультатРасчетаНДФЛ Цикл
			Если ФизическиеЛица.Найти(СтрокаТаблицы.ФизическоеЛицо) = Неопределено Тогда
				РезультатРасчетаНДФЛ.Удалить(РезультатРасчетаНДФЛ.Индекс(СтрокаТаблицы));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	РезультатРасчетаНДФЛ.Колонки.Налог.Имя = "НалогПоСтавке13";
	РезультатРасчетаНДФЛ.Колонки.ЗачтеноАвансовыхПлатежей.Имя = "ЗачтеноАвансовыхПлатежейПоСтавке13";
	РезультатРасчетаНДФЛ.Колонки.НалогСПревышения.Имя = "НалогСПревышенияПоСтавке13";
	РезультатРасчетаНДФЛ.Колонки.ЗачтеноАвансовыхПлатежейСПревышения.Имя = "ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13";
	Для каждого СтрокаНДФЛ Из РезультатРасчетаНДФЛ Цикл
		СтрокаНДФЛ.НалогПоСтавке13 = СтрокаНДФЛ.НалогПоСтавке13 + СтрокаНДФЛ.НалогСПревышенияПоСтавке13; 
		СтрокаНДФЛ.НалогСПревышенияПоСтавке13 = 0;
	    СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13 = СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13 + СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13;
	    СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13 = 0;
	КонецЦикла;
	
	ДатаОперации = Мин(Объект.Дата, КонецМесяца(Объект[МесяцНачисленияИмя]));
	НалогКУдержанию = УчетНДФЛ.НалогКУдержаниюПоРезультатамРасчета(Объект.Ссылка, Объект.Организация, ДатаОперации, РезультатРасчетаНДФЛ);
	НалогКУдержаниюФизическиеЛица = НалогКУдержанию.ВыгрузитьКолонку("ФизическоеЛицо");
	ВозвратНДФЛПрошлыхЛет = УчетНДФЛ.ВозвратНДФЛПрошлыхЛет(Объект.Организация, ДатаОперации, НалогКУдержаниюФизическиеЛица);
	ТекущиеОстаткиВзаиморасчетов = ВзаиморасчетыССотрудниками.КорректировкиВыплаты(Объект.Организация, Объект[МесяцНачисленияИмя], НалогКУдержаниюФизическиеЛица, Объект.Ссылка);
	
	КЗачетуВозврату = РасчетЗарплаты.РекомендуемыеКорректировкиВыплаты(
		НалогКУдержанию,
		ВозвратНДФЛПрошлыхЛет,
		ТекущиеОстаткиВзаиморасчетов,
		Год(Объект[МесяцНачисленияИмя]));
	
	Возврат КЗачетуВозврату;
	
КонецФункции

// Составляет таблицу для заполнения страховых взносов в форме документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - менеджер временных таблиц, в котором определены таблицы ВТНачисления и ВТФизическиеЛица.
//
// Возвращаемое значение - таблица значений Взносы.
//
Функция РезультатРасчетаВзносов(МенеджерВременныхТаблиц, ДокументСсылка, Организация, МесяцНачисления) Экспорт
	
	// Подготавливаем структуру наборов записей документа, имитирующую коллекцию Движения.
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(ДокументСсылка.Метаданные(),?(ДокументСсылка.Пустая(), Неопределено, ДокументСсылка));
	
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьЗапись = Истина;
	КонецЕсли;
	
	// Расчет страховых взносов
	ОтражениеЗарплатыВБухучетеБазовый.ДополнитьСведенияОДоходахДаннымиОЕНВДПриРасчете(Организация, МесяцНачисления, МенеджерВременныхТаблиц);
	УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(НаборыЗаписей, Неопределено, Организация, МесяцНачисления, МенеджерВременныхТаблиц, , Истина);
	
	//ВТНачисленияСтраховыеВзносы
	СведенияОДоходахСтраховыеВзносы = УчетСтраховыхВзносов.СведенияОДоходахПоДоговорамСтраховыеВзносы(Организация, МесяцНачисления, МенеджерВременныхТаблиц);
	УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(НаборыЗаписей, Неопределено, Организация, МесяцНачисления, СведенияОДоходахСтраховыеВзносы, Истина);
	
	Взносы = УчетСтраховыхВзносов.РассчитатьВзносы(ДокументСсылка, Организация, МесяцНачисления, МенеджерВременныхТаблиц, Ложь);
	
	Если ОтменятьЗапись = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Взносы;
	
КонецФункции

Функция ИзмеренияРасчетаПлановыхНачислений() Экспорт
	
	Возврат "Сотрудник, Начисление, ГоловнаяОрганизация";	
	
КонецФункции

Процедура СоздатьНачислениеОтпускБезОплаты(ПараметрыОбновления = Неопределено) Экспорт
	
	// Оплата отпуска
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.Код							= НСтр("ru = 'ОТПОЗ'");
	Описание.Наименование					= НСтр("ru = 'Отпуск без оплаты согласно ТК РФ'");
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	
	НачисленияПоОписанию = ПланыВидовРасчета.Начисления.НачисленияПоКатегории(Описание.КатегорияНачисленияИлиНеоплаченногоВремени);
	Если НачисленияПоОписанию.Количество() = 0 Тогда
		
		НачислениеОбъект = ПланыВидовРасчета.Начисления.СоздатьВидРасчета();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Описание);
		НачислениеОбъект.КраткоеНаименование = НСтр("ru='Отп. без опл.'");
		НачислениеОбъект.Записать();
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Функция ЗначениеПоказателяПоИдентификатору(Показатели, Идентификатор) Экспорт
	
	Возврат Показатели[Идентификатор];
	
КонецФункции

Функция НачисленияТарифнойСтавки() Экспорт
	
	КатегорииОкладов = Новый Массив;
	КатегорииОкладов.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорииОкладов", КатегорииОкладов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииОкладов)
		|	И Начисления.ЗачетОтработанногоВремени";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция КатегорииСдельнойОплатыТруда() Экспорт
	
	Возврат Новый Массив;
	
КонецФункции

Функция КатегорииНачисленийКомпенсационныхВыплат() Экспорт
	
	КатегорииКомпенсаций = Новый Массив;
	КатегорииКомпенсаций.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	КатегорииКомпенсаций.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	
	Возврат КатегорииКомпенсаций;
	
КонецФункции

Функция ТипыДокументовНачисленияАванса(ТипРезультата) Экспорт
	
	Если ТипРезультата = "Соответствие" Тогда
		Возврат	Новый Соответствие
	ИначеЕсли ТипРезультата = "Массив" Тогда
		Возврат	Новый Массив
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаменитьСтрокиНДФЛ(ОбновляемаяКоллекцияНДФЛ, НДФЛ, ОбновляемаяКоллекцияВычеты, ПримененныеВычеты, ОтборСтрок = Неопределено, СохранятьИсправления = Истина, КлючевыеКолонки = "ФизическоеЛицо") Экспорт
	
	МаксимальныйИдентификаторСтрокиНДФЛ = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(ОбновляемаяКоллекцияНДФЛ);
	
	// Заполняем строки идентификатором, увеличенным на единицу относительно максимального.
	УчетНДФЛФормы.НазначитьИдентификаторыНовымСтрокамТаблицамНДФЛИПримененныеВычетыНаДетейИИмущественные(
		МаксимальныйИдентификаторСтрокиНДФЛ + 1, НДФЛ, ПримененныеВычеты);

	// Сохранение идентификаторов заменяемых строк НДФЛ.
	ИдентификаторыСтрокНДФЛ = Новый Массив;
	
	Если ОтборСтрок = Неопределено Тогда
		ЗаменяемыеСтрокиНДФЛ = ОбновляемаяКоллекцияНДФЛ;
	Иначе
		ЗаменяемыеСтрокиНДФЛ = НайтиСтрокиОтборПоМассиву(ОбновляемаяКоллекцияНДФЛ, "ФизическоеЛицо", ОтборСтрок.ФизическоеЛицо);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыСтрокНДФЛ, 
		ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ"));
		
	// Таблица ПримененныеВычеты, является расширением строк таблицы НДФЛ,
	// поэтому замена строк в таблицы ПримененныеВычеты, должна выполняться на тех же условиях, что
	// и замена строк таблицы НДФЛ.
	
	// Сбор информации об идентификаторах строка НДФЛ принимающих участие в замене.
	ИдентификаторыСтрокНДФЛУчаствующихВЗамене = ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ");
	
	ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекцияНДФЛ, НДФЛ, КлючевыеКолонки, ОтборСтрок);
	
	// Удаление из коллекции ИдентификаторыСтрокНДФЛУчаствующихВЗамене, идентификаторов
	// строк, не подвергшихся замене, добавление в коллекцию идентификаторов 
	// новых строк НДФД.
	
	Если ОтборСтрок = Неопределено Тогда
		ЗаменяемыеСтрокиНДФЛ = ОбновляемаяКоллекцияНДФЛ;
	Иначе
		ЗаменяемыеСтрокиНДФЛ = НайтиСтрокиОтборПоМассиву(ОбновляемаяКоллекцияНДФЛ, "ФизическоеЛицо", ОтборСтрок.ФизическоеЛицо);
	КонецЕсли;
	
	ОбновленныеИдентификаторыСтрокНДФЛУчаствующихВЗамене = ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ");
	Для каждого ИдентификаторСтрокиНДФЛ Из ОбновленныеИдентификаторыСтрокНДФЛУчаствующихВЗамене Цикл
		
		ИндексЭлемента = ИдентификаторыСтрокНДФЛУчаствующихВЗамене.Найти(ИдентификаторСтрокиНДФЛ);
		Если ИндексЭлемента = Неопределено Тогда
			ИдентификаторыСтрокНДФЛУчаствующихВЗамене.Добавить(ИдентификаторСтрокиНДФЛ);
		Иначе
			ИдентификаторыСтрокНДФЛУчаствующихВЗамене.Удалить(ИндексЭлемента);
		КонецЕсли;
		
	КонецЦикла;
		
	// Обновление строк таблицы ПримененныеВычеты.
	ЗаменитьСтрокиНаНовыеДанные(
		ОбновляемаяКоллекцияВычеты, 
		ПримененныеВычеты, 
		"ИдентификаторСтрокиНДФЛ",
		Новый Структура("ИдентификаторСтрокиНДФЛ", ИдентификаторыСтрокНДФЛУчаствующихВЗамене));
	
КонецПроцедуры

Функция НайтиСтрокиОтборПоМассиву(КоллекцияСтрок, ИмяПоля, МассивЗначений) Экспорт
	
	НайденныеСтроки = Новый Массив;
	
	// Имя может быть передано как составное, например "Сотрудник.ФизическоеЛицо".
	// Это значит, что прежде нужно определить значения через ".", 
	// от значений в искомых полях, и искать затем уже именно по ним.
	ЧастиИмениПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПоля, ".");
	Если ЧастиИмениПоля.Количество() > 1 Тогда
		ЗначенияПервыйУровень = ОбщегоНазначения.ВыгрузитьКолонку(КоллекцияСтрок, ЧастиИмениПоля[0], Истина);
		СоответствиеЗначений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗначенияПервыйУровень, ЧастиИмениПоля[1]);
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СоответствуетУсловиям = Истина;
		Если МассивЗначений <> Неопределено Тогда
			Если ЧастиИмениПоля.Количество() > 1 Тогда
				// Соответствие по имени поля через ".".
				СоответствуетУсловиям = МассивЗначений.Найти(СоответствиеЗначений[СтрокаКоллекции[ЧастиИмениПоля[0]]]) <> Неопределено;
			Иначе	
				// Соответствие по простому имени поля.
				СоответствуетУсловиям = МассивЗначений.Найти(СтрокаКоллекции[ИмяПоля]) <> Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если СоответствуетУсловиям Тогда
			НайденныеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

Функция ЗаменитьСтрокиНаНовыеДанные(ЗаменяемыеДанные, ЗаменяющиеДанные, КлючевыеКолонки, ОтборСтрок = Неопределено) Экспорт
	
	// Возвращаемым значением является массив идентификаторов замененных строк.
	ЗамененныеСтроки = Новый Массив;
	
	МассивКлючевыхКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючевыеКолонки);
	
	// Собираем строки коллекции для обработки, 
	// если задан отбор строк, то добавляем только те, которые ему соответствуют.
	КоллекцииСтрок = Новый Массив;
	КоллекцииСтрок.Добавить(ЗаменяемыеДанные);
	КоллекцииСтрок.Добавить(ЗаменяющиеДанные);
	
	НайденныеСтроки = Новый Массив;
	Для Каждого КоллекцияСтрок Из КоллекцииСтрок Цикл
		Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
			СоответствуетУсловиям = Истина;
			Если ОтборСтрок <> Неопределено Тогда
				Для Каждого КлючИЗначение Из ОтборСтрок Цикл
					ИмяОтбора = КлючИЗначение.Ключ;
					ЗначениеОтбора = КлючИЗначение.Значение;
					Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
						СоответствуетУсловиям = ЗначениеОтбора.Найти(СтрокаКоллекции[ИмяОтбора]) <> Неопределено;
					Иначе
						СоответствуетУсловиям = СтрокаКоллекции[ИмяОтбора] = ЗначениеОтбора;
					КонецЕсли;
					Если Не СоответствуетУсловиям Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СоответствуетУсловиям Тогда
				НайденныеСтроки.Добавить(СтрокаКоллекции);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СочетанияКлючевых = Новый ТаблицаЗначений;
	Для Каждого ИмяКолонки Из МассивКлючевыхКолонок Цикл
		СочетанияКлючевых.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	// Используем ключ поиска для того, чтобы найти все строки 
	// и выбрать из них все возможные сочетания значений ключевых полей по обеим коллекциям.
	КлючОтбора = Новый Структура(КлючевыеКолонки);
	Для Каждого СтрокаКоллекции Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(КлючОтбора, СтрокаКоллекции);
		Если СочетанияКлючевых.НайтиСтроки(КлючОтбора).Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(СочетанияКлючевых.Добавить(), СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
		
	// Для всех возможных сочетаний выполняем замену строк.
	Для Каждого СочетаниеКлючевых Из СочетанияКлючевых Цикл
		ЗаполнитьЗначенияСвойств(КлючОтбора, СочетаниеКлючевых); 
		СтарыеСтроки = ЗаменяемыеДанные.НайтиСтроки(КлючОтбора);
		НовыеСтроки = НайтиСтроки(ЗаменяющиеДанные, КлючОтбора);
		ИндексСтроки = 0;
		ИндексДляВставки = 0;
		Если СтарыеСтроки.Количество() = 0 И МассивКлючевыхКолонок.Количество() > 0 Тогда
			// Предполагается, что первой колонкой передан сотрудник или физическое лицо.
			ИмяПоляРаботник = МассивКлючевыхКолонок[0];
			СтрокиРаботника = ЗаменяемыеДанные.НайтиСтроки(Новый Структура(ИмяПоляРаботник, СочетаниеКлючевых[ИмяПоляРаботник]));
			КоличествоСтрокРаботника = СтрокиРаботника.Количество();
			Если КоличествоСтрокРаботника > 0 Тогда 
				ИндексДляВставки = ЗаменяемыеДанные.Индекс(СтрокиРаботника[КоличествоСтрокРаботника - 1]) + 1;
			КонецЕсли;
		КонецЕсли;
		Для Каждого Строка Из НовыеСтроки Цикл
			Если СтарыеСтроки.ВГраница() < ИндексСтроки Тогда
				СтрокаДляЗаполнения = ЗаменяемыеДанные.Вставить(ИндексДляВставки);
			Иначе
				СтрокаДляЗаполнения = СтарыеСтроки[ИндексСтроки];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаДляЗаполнения, Строка);
			ИндексДляВставки = ЗаменяемыеДанные.Индекс(СтрокаДляЗаполнения) + 1;
			ИндексСтроки = ИндексСтроки + 1;
			Если ЕстьПолеВСтрокеКоллекции(Строка, "ИдентификаторСтрокиВидаРасчета") Тогда
				ЗамененныеСтроки.Добавить(Строка.ИдентификаторСтрокиВидаРасчета);
			КонецЕсли;
		КонецЦикла;
		Для Счетчик = ИндексСтроки По СтарыеСтроки.ВГраница() Цикл
			ЗаменяемыеДанные.Удалить(ЗаменяемыеДанные.Индекс(СтарыеСтроки[Счетчик]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗамененныеСтроки;
	
КонецФункции

Функция ЕстьПолеВСтрокеКоллекции(СтрокаКоллекции, ИмяПоля) Экспорт
	
	Если ТипЗнч(СтрокаКоллекции) = Тип("СтрокаТаблицыЗначений") Тогда
		Возврат СтрокаКоллекции.Владелец().Колонки.Найти(ИмяПоля) <> Неопределено;
	Иначе
		Возврат СтрокаКоллекции.Свойство(ИмяПоля);
	КонецЕсли;
	
КонецФункции

Функция НайтиСтроки(КоллекцияСтрок, Отбор)
	
	НайденныеСтроки = Новый Массив;
	
	Если Отбор.Количество() = 0 Тогда
		Возврат НайденныеСтроки;
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СоответствуетОтбору = Истина;
		Для Каждого КлючИЗначение Из Отбор Цикл
			ИмяОтбора = КлючИЗначение.Ключ;
			ЗначениеОтбора = КлючИЗначение.Значение;
			Если СтрокаКоллекции[ИмяОтбора] <> ЗначениеОтбора Тогда
				СоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СоответствуетОтбору Тогда
			НайденныеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

#Область ФормированиеПечатныхФорм

Функция НалогиИВзносыПодробнее(ДокументОбъект, Модифицированность, ФизическиеЛица, ДатаОтчета, ИсходныйДокументОбъект = Неопределено) Экспорт
	
	
	Возврат ОтчетПоНачислениямПодробнее("НалогиИВзносыКратко",
										"",
										ДокументОбъект,
										Модифицированность,
										ФизическиеЛица,
										ДатаОтчета,
										ИсходныйДокументОбъект)
	
КонецФункции

Функция АнализЗарплатыПодробнее(ДокументОбъект, Модифицированность, ФизическиеЛица, ДатаОтчета, ИсходныйДокументОбъект = Неопределено) Экспорт
	
	
	Возврат ОтчетПоНачислениямПодробнее("АнализНачисленийИУдержаний",
										"АнализЗарплатыПоПодразделениямИСотрудникамЗаПериод",
										ДокументОбъект,
										Модифицированность,
										ФизическиеЛица,
										ДатаОтчета,
										ИсходныйДокументОбъект)
	
	
КонецФункции

Функция СводНачисленийИУдержанийПодробнее(ДокументОбъект, Модифицированность, ФизическиеЛица, ДатаОтчета, ИсходныйДокументОбъект = Неопределено) Экспорт
	
	Возврат ОтчетПоНачислениямПодробнее("АнализНачисленийИУдержаний",
										"КраткийСводНачисленийИУдержаний",
										ДокументОбъект,
										Модифицированность,
										ФизическиеЛица,
										ДатаОтчета,
										ИсходныйДокументОбъект)
	
КонецФункции

Функция ОтчетПоНачислениямПодробнее(ИмяОтчета,
									ИмяНастройки,
									ДокументОбъект,
									Модифицированность,
									ФизическиеЛица,
									ДатаОтчета,
									ИсходныйДокументОбъект = Неопределено)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ОтображатьЗаголовки = Ложь;
	ДокументРезультат.ОтображатьСетку = Ложь;
	
	Если ДокументОбъект.ПометкаУдаления Тогда
		ВызватьИсключение НСтр("ru='Документ помечен на удаление, отчет не будет сформирован'");
	Иначе
		
		Попытка
			
			НачатьТранзакцию();
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если ТипЗнч(ФизическиеЛица) = Тип("Массив") Тогда
				ФизическиеЛицаОтчета = ФизическиеЛица;
			Иначе
				ФизическиеЛицаОтчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
			КонецЕсли;
			
			Если НЕ ДокументОбъект.Проведен ИЛИ Модифицированность Тогда
				
				ДокументОбъект.ДополнительныеСвойства.Вставить("ФизическиеЛица", ФизическиеЛицаОтчета);
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
			
			ТекущийОтчет = Отчеты[ИмяОтчета].Создать();
			Если ЗначениеЗаполнено(ИмяНастройки) Тогда
				
				ТекущийОтчет.ИнициализироватьОтчет();
				
				ТекущийОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(
					ТекущийОтчет.СхемаКомпоновкиДанных.ВариантыНастроек[ИмяНастройки].Настройки);
				
			КонецЕсли;
			
			Отбор = ТекущийОтчет.КомпоновщикНастроек.Настройки.Отбор;
			Отбор.Элементы.Очистить();
			
			СтандартныйПериод = Новый СтандартныйПериод;
			СтандартныйПериод.ДатаНачала    = НачалоМесяца(ДатаОтчета);
			СтандартныйПериод.ДатаОкончания = КонецМесяца(ДатаОтчета);
			
			ПараметрыДанных = ТекущийОтчет.КомпоновщикНастроек.Настройки.ПараметрыДанных;
			ПараметрыДанных.УстановитьЗначениеПараметра("Период", СтандартныйПериод);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
																	"Организация",
																	ВидСравненияКомпоновкиДанных.Равно,
																	ДокументОбъект.Организация);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
																	"ФизическоеЛицо",
																	ВидСравненияКомпоновкиДанных.ВСписке,
																	ФизическиеЛицаОтчета);
			
			ТекущийОтчет.СкомпоноватьРезультат(ДокументРезультат);
			
			ОтменитьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Если ПривилегированныйРежим() Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли; 
			
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru = 'Не удалось, сформировать отчет.'") + " " + Инфо.Описание;

		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
