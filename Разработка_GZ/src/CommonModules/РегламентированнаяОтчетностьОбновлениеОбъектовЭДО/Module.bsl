////////////////////////////////////////////////////////////////////////////////
// Блок переноса данных ЭДО при обновлении
//

Процедура ПереносДанныхЭДОПриОбновлении20() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Обновление данных информационной базы по ЭДО с КО'");
	ЗаписатьИнформацию(ТекстСообщения);
	
	СоответствиеКонвертированныхОбъектов = Новый Соответствие;
	
	// Справочники
	ЗаполнитьЦиклыОбменаПриПереходеС20(СоответствиеКонвертированныхОбъектов);
	
	// Документы
	
	//Документ.ЗаявлениеАбонентаСпецоператораСвязи.Реквизит.ВладелецЭЦПВидДокумента
	ЗаполнитьЗаявлениеАбонентаСпецоператораСвязиПриПереходеС20(СоответствиеКонвертированныхОбъектов);
	
	// Регистры
	ЗаполнитьСтатусыОтправкиПриПереходеС20(СоответствиеКонвертированныхОбъектов);
	
КонецПроцедуры

Процедура ПереносДанныхЭДОПриОбновлении() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Обновление данных информационной базы по ЭДО с КО'");
	ЗаписатьИнформацию(ТекстСообщения);
	
	ДатаНачала = '00010101';
	ДатаОкончания = КонецГода(ТекущаяДата());
	
	СоответствиеКонвертированныхОбъектов = Новый Соответствие;
	
	// Справочники
	КонвертироватьСправочникСерверыДокументооборота(СоответствиеКонвертированныхОбъектов);
	КонвертироватьСправочникНалоговыеОрганы(СоответствиеКонвертированныхОбъектов);
	КонвертироватьСправочникВидыНалоговыхОрганов(СоответствиеКонвертированныхОбъектов);
	КонвертироватьСправочникУчетныеЗаписиДокументооборота(СоответствиеКонвертированныхОбъектов);
	КонвертироватьСправочникОрганыПФР(СоответствиеКонвертированныхОбъектов);
	КонвертироватьСправочникПерепискаСКонтролирующимиОрганами(СоответствиеКонвертированныхОбъектов);
	КонвертироватьСправочникВидыОтправляемыхДокументов(СоответствиеКонвертированныхОбъектов);
	КонвертироватьСправочникДокументыРеализацииПолномочийНалоговыхОрганов(СоответствиеКонвертированныхОбъектов);
	КонвертироватьСправочникОтправкиФСС(СоответствиеКонвертированныхОбъектов);
	
	// Документы
	КонвертироватьДокументыЗапросНаИОН(ПолучитьСписокКонвертируемыхДокументовЗапросНаИОН(ДатаНачала, ДатаОкончания),
		СоответствиеКонвертированныхОбъектов);
	КонвертироватьДокументыЗаявлениеАбонентаСпецоператораСвязи(
		ПолучитьСписокКонвертируемыхДокументовЗаявлениеАбонентаСпецоператораСвязи(ДатаНачала, ДатаОкончания),
		СоответствиеКонвертированныхОбъектов);
	
	// Регистры сведений
	ВложенияНеформализованныхДокументовКонвертация(СоответствиеКонвертированныхОбъектов);
	ОтветыНаЗапросыИОНКонвертация(СоответствиеКонвертированныхОбъектов);
	ФайлыСведенийРОКИКонвертация(СоответствиеКонвертированныхОбъектов);
	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетовКонвертация(СоответствиеКонвертированныхОбъектов);
	НастройкиОбменаФССКонвертация(СоответствиеКонвертированныхОбъектов);
	ФайлыСведенийСпецоператорыКонвертация(СоответствиеКонвертированныхОбъектов);
	ФайлыДокументовРеализацииПолномочийНалоговыхОргановКонвертация(СоответствиеКонвертированныхОбъектов);
	
	ЗаполнитьУчетныеЗаписиОрганизаций(СоответствиеКонвертированныхОбъектов);
	ЗаполнитьВидыОбменаОрганизаций(СоответствиеКонвертированныхОбъектов);
	ЗаполнитьЦиклыОбмена(СоответствиеКонвертированныхОбъектов);
	ЗаполнитьПользователиУчетныхЗаписейДокументооборота(СоответствиеКонвертированныхОбъектов);
	ЗаполнитьСтатусыОтправки(СоответствиеКонвертированныхОбъектов);
	ЗаполнитьСодержимоеТранспортныхКонтейнеров(СоответствиеКонвертированныхОбъектов);
	ЗаполнитьТранспортноеСообщение(СоответствиеКонвертированныхОбъектов);
	
КонецПроцедуры

Процедура ЗаполнениеДанныхЭДОПриОбновлении20() Экспорт
	
	ЗаполнитьВидыОтправляемыхДокументов20();
	ЗаполнитьЭлектронныеПредставленияРегламентированныхОтчетов20();
	ЗаполнитьЗаявлениеАбонентаСпецоператораСвязи20();
	ЗаполнитьПерепискаСКонтролирующимиОрганами20();
	
КонецПроцедуры

Процедура ПолностьюЗаполнитьСправочникВидыОтправляемыхДокументов() Экспорт
	
	// Заполнение всех реквизитов всех предопределенных элементов справочника ВидыОтправляемыхДокументов.
	Справочники.ВидыОтправляемыхДокументов.ЗаполнитьПредопределенныеВидыОтправляемыхДокументов(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные ф-ции для ЗаполнениеДанныхЭДОПриОбновлении20

Процедура ЗаполнитьПерепискаСКонтролирующимиОрганами20()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ПерепискаСКонтролирующимиОрганами.Ссылка
	               |ИЗ
	               |	Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаСКонтролирующимиОрганами
	               |ГДЕ
				   |	ПерепискаСКонтролирующимиОрганами.Получатель Ссылка Справочник.ОрганыФСГС
				   |	И ПерепискаСКонтролирующимиОрганами.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПустаяСсылка)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Объект.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФСГС;
		
		Попытка
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьОшибку(ТекстСообщения);
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗаявлениеАбонентаСпецоператораСвязи20()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявлениеАбонентаСпецоператораСвязиПолучатели.Ссылка
	               |ИЗ
	               |	Документ.ЗаявлениеАбонентаСпецоператораСвязи.Получатели КАК ЗаявлениеАбонентаСпецоператораСвязиПолучатели
	               |ГДЕ
	               |	ЗаявлениеАбонентаСпецоператораСвязиПолучатели.ТипПолучателя = ЗНАЧЕНИЕ(Перечисление.ТипыКонтролирующихОрганов.ПустаяСсылка)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для каждого СтрокаТЧПолучатели Из Объект.Получатели Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧПолучатели.ТипПолучателя) Тогда
				СтрокаТЧПолучатели.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьОшибку(ТекстСообщения);
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыОтправляемыхДокументов20()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВидыОтправляемыхДокументов.Ссылка
	               |ИЗ
	               |	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
	               |ГДЕ
	               |	ВидыОтправляемыхДокументов.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОтправляемыхДокументов.ОтчетФСГС)
				   |	И ВидыОтправляемыхДокументов.ТипПолучателя = ЗНАЧЕНИЕ(Перечисление.ТипыКонтролирующихОрганов.ПустаяСсылка)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Объект.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
		
		Попытка
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьОшибку(ТекстСообщения);
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЭлектронныеПредставленияРегламентированныхОтчетов20()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ЭлектронныеПредставленияРегламентированныхОтчетов.Ссылка
	               |ИЗ
	               |	Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов КАК ЭлектронныеПредставленияРегламентированныхОтчетов
	               |ГДЕ
				   |	ЭлектронныеПредставленияРегламентированныхОтчетов.Получатель Ссылка Справочник.ОрганыФСГС
				   |	И ЭлектронныеПредставленияРегламентированныхОтчетов.ТипПолучателя =  ЗНАЧЕНИЕ(Перечисление.ТипыКонтролирующихОрганов.ПустаяСсылка)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Объект.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
		
		Попытка
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьОшибку(ТекстСообщения);
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Протоколирование хода обновелния

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обновление информационной базы'");
	
КонецФункции	

Процедура ЗаписатьИнформацию(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, Текст);
	
КонецПроцедуры

Процедура ЗаписатьОшибку(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Текст);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные ф-ции

Функция КонвертироватьДанные(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов = Неопределено, СсылкаНаПриемник = Неопределено)
	
	Если (Не ЗначениеЗаполнено(КонвертируемыеДанные)) ИЛИ НеПроизводитьКонвертациюЗначения(ТипЗнч(КонвертируемыеДанные)) Тогда
		Возврат КонвертируемыеДанные;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонвертируемыеДанные)) Тогда
		СсылкаНаКонвертируемоеЗначение = КонвертируемыеДанные;
	Иначе
		Структура = Новый Структура("Ссылка");
		ЗаполнитьЗначенияСвойств(Структура, КонвертируемыеДанные);
		
		Если ЗначениеЗаполнено(Структура.Ссылка) Тогда
			СсылкаНаКонвертируемоеЗначение = КонвертируемыеДанные.Ссылка;
		Иначе
			Возврат КонвертируемыеДанные;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаКонвертируемоеЗначение)) Тогда
		Возврат КонвертироватьДокумент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов);
	Иначе
		Возврат КонвертироватьСсылочныеДанные(СсылкаНаКонвертируемоеЗначение, 
			КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	КонецЕсли;
	
КонецФункции

Функция КонвертироватьСсылочныеДанные(СсылкаНаКонверируемоеЗначение, КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник)
	
	ТипЗначения = ТипЗнч(СсылкаНаКонверируемоеЗначение);
	
	Если ТипЗначения = Тип("СправочникСсылка.УдалитьНалоговыеОрганы") Тогда
		Возврат КонвертироватьЭлементНалоговыеОрганы(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьОтправкиФСС") Тогда
		Возврат КонвертироватьЭлементОтправкиФСС(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьВидыНалоговыхОрганов") Тогда
		Возврат КонвертироватьЭлементВидыНалоговыхОрганов(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьУчетныеЗаписиДокументооборота") Тогда
		Возврат КонвертироватьЭлементУчетныеЗаписиДокументооборота(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		Возврат КонвертироватьЭлементЭлектронныеПредставленияРегламентированныхОтчетов(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьОрганыПФР") Тогда
		Возврат КонвертироватьЭлементСправочникОрганыПФР(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьПерепискаСКонтролирующимиОрганами") Тогда
		Возврат КонвертироватьЭлементПерепискаСКонтролирующимиОрганами(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьСерверыДокументооборота") Тогда
		Возврат КонвертироватьЭлементСерверыДокументооборота(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Организации") Тогда
		Возврат КонвертироватьЭлементОрганизации(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ОрганыФСГС") Тогда
		Возврат КонвертироватьЭлементОрганыФСГС(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		Возврат КонвертироватьЭлементРегистрацииВНалоговомОргане(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.РегламентированныеОтчеты") Тогда
		Возврат КонвертироватьЭлементРегламентированныеОтчеты(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьВидыОтправляемыхДокументов") Тогда
		Возврат КонвертироватьЭлементВидыОтправляемыхДокументов(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
		Возврат КонвертироватьЭлементДокументыРеализацииПолномочийНалоговыхОрганов(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
		Возврат КонвертироватьЭлементСправочникиДокументыРеализацииПолномочийНалоговыхОрганов(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
		Возврат КонвертироватьЭлементВидыДокументовФизическихЛиц(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьДокументыУдостоверяющиеЛичность") Тогда
		Возврат ОбновлениеСПредыдущейРедакции.КонвертироватьЭлементДокументыУдостоверяющиеЛичность(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
		
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьВидыНалоговыхДокументов") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияВидыНалоговыхДокументов(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьВидыОбменаСКонтролирующимиОрганами") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияВидыОбменаСКонтролирующимиОрганами(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьВидыЦикловОбмена") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияВидыЦикловОбмена(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьТипыПерепискиСКонтролирующимиОрганами") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыПерепискиСКонтролирующимиОрганами(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьТипыСодержимогоФайлов") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыСодержимогоФайлов(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьТипыФайловОтчетностиПФР") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыФайловОтчетностиПФР(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьФорматыДокументооборотаСФНС") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияФорматыДокументооборотаСФНС(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьТипыКонтролирующихОрганов") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыКонтролирующихОрганов(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьСтатусыЗаявленияАбонентаСпецоператораСвязи") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияСтатусыЗаявленияАбонентаСпецоператораСвязи(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьТипыЗаявленияАбонентаСпецоператораСвязи") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыЗаявленияАбонентаСпецоператораСвязи(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьСпецоператорыСвязи") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияСпецоператорыСвязи(КонвертируемыеДанные);
		
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ТипыОтправляемыхДокументов") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыОтправляемыхДокументов(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ВидыУслугПриИОН") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияВидыУслугПриИОН(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ТипыВложенийНеформализованныхДокументовНалогоплательщика") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыВложенийНеформализованныхДокументовНалогоплательщика(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ТипыФайловБухОтчетности") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыФайловБухОтчетности(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.СтатусыПисем") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияСтатусыПисем(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.РежимыАвтонастройкиУчетнойЗаписиНалогоплательщика") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияРежимыАвтонастройкиУчетнойЗаписиНалогоплательщика(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ТипыСодержимогоТранспортногоКонтейнера") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыСодержимогоТранспортногоКонтейнера(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ТипыТранспортныхСообщений") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыТранспортныхСообщений(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ТипыЦикловОбмена") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияТипыЦикловОбмена(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ФорматОтветаНаЗапросИОН") Тогда 
		Возврат ПолучитьСоответствиеЭлементаПеречисленияФорматОтветаНаЗапросИОН(КонвертируемыеДанные);
	КонецЕсли;
	
КонецФункции

Процедура ВставитьСсылкуНаКонвертированныйОбъект(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта, СоответствиеКонвертированныхОбъектов)
	
	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(СсылкаИсходногоОбъетка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		СоответствиеКонвертированныхОбъектовПоТипу = Новый Соответствие;
		СоответствиеКонвертированныхОбъектов.Вставить(ТипЗнч(СсылкаИсходногоОбъетка), СоответствиеКонвертированныхОбъектовПоТипу);
	КонецЕсли;
	
	СоответствиеКонвертированныхОбъектовПоТипу.Вставить(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта);
	
КонецПроцедуры	

Функция ПолучитьСоответствиеПредопределенногоЭлемент(Элемент)
	
	Если ТипЗнч(Элемент) = Тип("СправочникСсылка.УдалитьВидыОтправляемыхДокументов") Тогда
		Возврат ПолучитьСоответствиеПредопределенногоЭлементаВидыОтправляемыхДокументов(Элемент);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСоответствиеПредопределенногоЭлементаВидыОтправляемыхДокументов(Элемент)
	
	ИмяПредопределенного = Справочники.УдалитьВидыОтправляемыхДокументов.ПолучитьИмяПредопределенного(Элемент);
	
	Если ПустаяСтрока(ИмяПредопределенного) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Справочники.ВидыОтправляемыхДокументов[ИмяПредопределенного];
	
КонецФункции

Функция ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов)
	
	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(Ссылка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СоответствиеКонвертированныхОбъектовПоТипу.Получить(Ссылка);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонвертируемыеДанные)) Тогда
		Ссылка = КонвертируемыеДанные;
	Иначе 
		Ссылка = КонвертируемыеДанные.Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СсылкаНаКонвертированныйОбъект = ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов);
	Если СсылкаНаКонвертированныйОбъект <> Неопределено Тогда
		Возврат СсылкаНаКонвертированныйОбъект;
	КонецЕсли;
	
	Если КонвертируемыеДанные.Предопределенный Тогда
		Элемент = ПолучитьСоответствиеПредопределенногоЭлемент(Ссылка);
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаПриемник) Тогда
		ВставитьСсылкуНаКонвертированныйОбъект(Ссылка, СсылкаНаПриемник, СоответствиеКонвертированныхОбъектов);
		Возврат СсылкаНаПриемник;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НеПроизводитьКонвертациюЗначения(Тип)
	
	Если Тип = Тип("Число") 
		Или Тип = Тип("Строка")
		Или Тип = Тип("Дата") 
		Или Тип = Тип("Булево")
		Или Тип = Тип("УникальныйИдентификатор") 
		Или Тип = Тип("ХранилищаНастроекМенеджер") 
		Или Тип = Тип("Null") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьКодСправочника(ОбъектПриемник, ДанныеИсточника)
	
	СтруктураДанныхИсточника = Новый Структура("Код", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураДанныхИсточника, ДанныеИсточника);
	
	Если СтруктураДанныхИсточника.Код <> Неопределено И ОбъектПриемник.Метаданные().ДлинаКода <> 0 Тогда
		ОбъектПриемник.Код = СтруктураДанныхИсточника.Код;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на объект по полному имени метаданных и заданному идентификатору
// Объекты, которые предполагают идентификацию должны содержать реквизит "ИдентификаторОбъекта"
// Если объекта с заданным идентификатором нет, возвращает пустую ссылку соответствующего типа
//
Функция СсылкаНаОбъектПоИдентификатору(ПолноеИмяОбъекта, ИдентификаторОбъекта) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Объекты.Ссылка КАК Ссылка
	|ИЗ
	|	#ПолноеИмяОбъекта КАК Объекты
	|ГДЕ
	|	Объекты.ИдентификаторОбъекта = &ИдентификаторОбъекта");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъекта);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕЧИСЛЕНИЯ

//Перечисление ВидыНалоговыхДокументов
//
Функция ПолучитьСоответствиеЭлементаПеречисленияВидыНалоговыхДокументов(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЗначениеПеречисления = Метаданные.Перечисления.УдалитьВидыНалоговыхДокументов.ЗначенияПеречисления.Получить(
			Перечисления.УдалитьВидыНалоговыхДокументов.Индекс(Элемент));
		ИмяЗначения = ЗначениеПеречисления.Имя;
		Возврат Перечисления.ВидыНалоговыхДокументов[ИмяЗначения];
		//Возврат СсылкаНаОбъектПоИдентификатору(Метаданные.Перечисления.ВидыНалоговыхДокументов.ЗначенияПеречисления, ИмяЗначения);
		//Возврат СсылкаНаОбъектПоИдентификатору("Перечисление.ВидыНалоговыхДокументов", ИмяЗначения);
	Иначе
		Возврат Перечисления.ВидыНалоговыхДокументов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

//Перечисление ВидыОбменаСКонтролирующимиОрганами
//
Функция ПолучитьСоответствиеЭлементаПеречисленияВидыОбменаСКонтролирующимиОрганами(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЗначениеПеречисления = Метаданные.Перечисления.УдалитьВидыОбменаСКонтролирующимиОрганами.ЗначенияПеречисления.Получить(
			Перечисления.УдалитьВидыОбменаСКонтролирующимиОрганами.Индекс(Элемент));
		ИмяЗначения = ЗначениеПеречисления.Имя;
		Возврат Перечисления.ВидыОбменаСКонтролирующимиОрганами[ИмяЗначения];
		//Возврат СсылкаНаОбъектПоИдентификатору("Перечисления.ВидыОбменаСКонтролирующимиОрганами", ИмяЗначения);
	Иначе
		Возврат Перечисления.ВидыОбменаСКонтролирующимиОрганами.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

//Перечисление ВидыЦикловОбмена
//
Функция ПолучитьСоответствиеЭлементаПеречисленияВидыЦикловОбмена(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЗначениеПеречисления = Метаданные.Перечисления.УдалитьВидыЦикловОбмена.ЗначенияПеречисления.Получить(
			Перечисления.УдалитьВидыЦикловОбмена.Индекс(Элемент));
		ИмяЗначения = ЗначениеПеречисления.Имя;
		Возврат Перечисления.ВидыЦикловОбмена[ИмяЗначения];
		//Возврат СсылкаНаОбъектПоИдентификатору("Перечисление.ВидыЦикловОбмена", ИмяЗначения);
	Иначе
		Возврат Перечисления.ВидыЦикловОбмена.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

//Перечисление ТипыПерепискиСКонтролирующимиОрганами
//
Функция ПолучитьСоответствиеЭлементаПеречисленияТипыПерепискиСКонтролирующимиОрганами(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЗначениеПеречисления = Метаданные.Перечисления.УдалитьТипыПерепискиСКонтролирующимиОрганами.ЗначенияПеречисления.Получить(
			Перечисления.УдалитьТипыПерепискиСКонтролирующимиОрганами.Индекс(Элемент));
		ИмяЗначения = ЗначениеПеречисления.Имя;
		Возврат Перечисления.ТипыПерепискиСКонтролирующимиОрганами[ИмяЗначения];
		//Возврат СсылкаНаОбъектПоИдентификатору("Перечисление.ТипыПерепискиСКонтролирующимиОрганами", ИмяЗначения);
	Иначе
		Возврат Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

//Перечисление ТипыСодержимогоФайлов
//
Функция ПолучитьСоответствиеЭлементаПеречисленияТипыСодержимогоФайлов(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЗначениеПеречисления = Метаданные.Перечисления.УдалитьТипыСодержимогоФайлов.ЗначенияПеречисления.Получить(
			Перечисления.УдалитьТипыСодержимогоФайлов.Индекс(Элемент));
		ИмяЗначения = ЗначениеПеречисления.Имя;
		Возврат Перечисления.ТипыСодержимогоФайлов[ИмяЗначения];
		//Возврат СсылкаНаОбъектПоИдентификатору("Перечисление.ТипыСодержимогоФайлов", ИмяЗначения);
	Иначе
		Возврат Перечисления.ТипыСодержимогоФайлов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

//Перечисление ТипыФайловОтчетностиПФР
//
Функция ПолучитьСоответствиеЭлементаПеречисленияТипыФайловОтчетностиПФР(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЗначениеПеречисления = Метаданные.Перечисления.УдалитьТипыФайловОтчетностиПФР.ЗначенияПеречисления.Получить(
			Перечисления.УдалитьТипыФайловОтчетностиПФР.Индекс(Элемент));
		ИмяЗначения = ЗначениеПеречисления.Имя;
		Возврат Перечисления.ТипыФайловОтчетностиПФР[ИмяЗначения];
		//Возврат СсылкаНаОбъектПоИдентификатору("Перечисление.ТипыФайловОтчетностиПФР", ИмяЗначения);
	Иначе
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

//Перечисление ФорматыДокументооборотаСФНС
//
Функция ПолучитьСоответствиеЭлементаПеречисленияФорматыДокументооборотаСФНС(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЗначениеПеречисления = Метаданные.Перечисления.УдалитьФорматыДокументооборотаСФНС.ЗначенияПеречисления.Получить(
			Перечисления.УдалитьФорматыДокументооборотаСФНС.Индекс(Элемент));
		ИмяЗначения = ЗначениеПеречисления.Имя;
		Возврат Перечисления.ФорматыДокументооборотаСФНС[ИмяЗначения];
		//Возврат СсылкаНаОбъектПоИдентификатору("Перечисление.ФорматыДокументооборотаСФНС", ИмяЗначения);
	Иначе
		Возврат Перечисления.ФорматыДокументооборотаСФНС.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции


//Перечисление ТипыКонтролирующихОрганов
//
Функция ПолучитьСоответствиеЭлементаПеречисленияТипыКонтролирующихОрганов(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЗначениеПеречисления = Метаданные.Перечисления.УдалитьТипыКонтролирующихОрганов.ЗначенияПеречисления.Получить(
			Перечисления.УдалитьТипыКонтролирующихОрганов.Индекс(Элемент));
		ИмяЗначения = ЗначениеПеречисления.Имя;
		Возврат Перечисления.ТипыКонтролирующихОрганов[ИмяЗначения];
	Иначе
		Возврат Перечисления.ТипыКонтролирующихОрганов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

//Перечисление СтатусыЗаявленияАбонентаСпецоператораСвязи
//
Функция ПолучитьСоответствиеЭлементаПеречисленияСтатусыЗаявленияАбонентаСпецоператораСвязи(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЗначениеПеречисления = Метаданные.Перечисления.УдалитьСтатусыЗаявленияАбонентаСпецоператораСвязи.ЗначенияПеречисления.Получить(
			Перечисления.УдалитьСтатусыЗаявленияАбонентаСпецоператораСвязи.Индекс(Элемент));
		ИмяЗначения = ЗначениеПеречисления.Имя;
		Возврат Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи[ИмяЗначения];
	Иначе
		Возврат Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

//Перечисление ТипыЗаявленияАбонентаСпецоператораСвязи
//
Функция ПолучитьСоответствиеЭлементаПеречисленияТипыЗаявленияАбонентаСпецоператораСвязи(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЗначениеПеречисления = Метаданные.Перечисления.УдалитьТипыЗаявленияАбонентаСпецоператораСвязи.ЗначенияПеречисления.Получить(
			Перечисления.УдалитьТипыЗаявленияАбонентаСпецоператораСвязи.Индекс(Элемент));
		ИмяЗначения = ЗначениеПеречисления.Имя;
		Возврат Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи[ИмяЗначения];
	Иначе
		Возврат Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

//Перечисление СпецоператорыСвязи
//
Функция ПолучитьСоответствиеЭлементаПеречисленияСпецоператорыСвязи(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЗначениеПеречисления = Метаданные.Перечисления.УдалитьСпецоператорыСвязи.ЗначенияПеречисления.Получить(
			Перечисления.УдалитьСпецоператорыСвязи.Индекс(Элемент));
		ИмяЗначения = ЗначениеПеречисления.Имя;
		Возврат Перечисления.СпецоператорыСвязи[ИмяЗначения];
	Иначе
		Возврат Перечисления.СпецоператорыСвязи.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

//Перечисление ТипыОтправляемыхДокументов
//
Функция ПолучитьСоответствиеЭлементаПеречисленияТипыОтправляемыхДокументов(Элемент)
	Возврат Элемент;
КонецФункции

//Перечисление ВидыУслугПриИОН
//
Функция ПолучитьСоответствиеЭлементаПеречисленияВидыУслугПриИОН(Элемент)
	Возврат Элемент;
КонецФункции

//Перечисление ТипыВложенийНеформализованныхДокументовНалогоплательщика
//
Функция ПолучитьСоответствиеЭлементаПеречисленияТипыВложенийНеформализованныхДокументовНалогоплательщика(Элемент)
	Возврат Элемент;
КонецФункции

//Перечисление ТипыФайловБухОтчетности
//
Функция ПолучитьСоответствиеЭлементаПеречисленияТипыФайловБухОтчетности(Элемент)
	Возврат Элемент;
КонецФункции

//Перечисление СтатусыПисем
//
Функция ПолучитьСоответствиеЭлементаПеречисленияСтатусыПисем(Элемент)
	Возврат Элемент;
КонецФункции

//Перечисление РежимыАвтонастройкиУчетнойЗаписиНалогоплательщика
//
Функция ПолучитьСоответствиеЭлементаПеречисленияРежимыАвтонастройкиУчетнойЗаписиНалогоплательщика(Элемент)
	Возврат Элемент;
КонецФункции

//Перечисление ТипыЦикловОбмена
//
Функция ПолучитьСоответствиеЭлементаПеречисленияТипыЦикловОбмена(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Если Элемент = Перечисления.ТипыЦикловОбмена.УдалитьДокумент Тогда 
			Возврат Перечисления.ТипыЦикловОбмена.Документ;
		ИначеЕсли Элемент = Перечисления.ТипыЦикловОбмена.УдалитьЗаявление Тогда 
			Возврат Перечисления.ТипыЦикловОбмена.Заявление;
		Иначе
			Возврат Элемент;
		КонецЕсли;
	Иначе
		Возврат Перечисления.ТипыЦикловОбмена.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

//Перечисление ФорматОтветаНаЗапросИОН
//
Функция ПолучитьСоответствиеЭлементаПеречисленияФорматОтветаНаЗапросИОН(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Если Элемент = Перечисления.ФорматОтветаНаЗапросИОН.УдалитьXLS Тогда 
			Возврат Перечисления.ФорматОтветаНаЗапросИОН.XLS;
		Иначе
			Возврат Элемент;
		КонецЕсли;
	Иначе
		Возврат Перечисления.ФорматОтветаНаЗапросИОН.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

//Перечисление ТипыСодержимогоТранспортногоКонтейнера
//
Функция ПолучитьСоответствиеЭлементаПеречисленияТипыСодержимогоТранспортногоКонтейнера(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Если Элемент = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьДокумент Тогда 
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Документ;
		ИначеЕсли Элемент = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьЗаявление Тогда 
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Заявление;
		ИначеЕсли Элемент = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьКвитанцияОПриемеДокумент Тогда 
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеДокумент;
		ИначеЕсли Элемент = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьКвитанцияОПриемеЗаявления Тогда 
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеЗаявления;
		ИначеЕсли Элемент = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьОписаниеДокумент Тогда 
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеДокумент;
		ИначеЕсли Элемент = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьОписаниеСведенийЗаявление Тогда 
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗаявление;
		ИначеЕсли Элемент = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьСообщениеОбОтзывеЗаявления Тогда 
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОбОтзывеЗаявления;
		ИначеЕсли Элемент = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьСообщениеОНесоответствиях Тогда 
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОНесоответствиях;
		ИначеЕсли Элемент = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьСообщениеОПроверке Тогда 
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПроверке;
		ИначеЕсли Элемент = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьУведомлениеОбОтказеДокумент Тогда 
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеДокумент;
		Иначе
			Возврат Элемент;
		КонецЕсли;
	Иначе
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

//Перечисление ТипыТранспортныхСообщений
//
Функция ПолучитьСоответствиеЭлементаПеречисленияТипыТранспортныхСообщений(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Если Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПрочее Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.Прочее;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПервичноеСообщениеСодержащееОтчетностьПФР Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПодтверждениеПолученияОтчетностиПФР Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПротоколПФР Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПротоколПФР;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПротоколКвитанцияПФР Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьУведомлениеОбОшибкеПФР Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПисьмоВходящееПФР Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПисьмоВходящееКвитанцияПФР Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПисьмоИсходящееПФР Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПисьмоИсходящееКвитанцияПФР Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьДекларацияНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ДекларацияНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПодтверждениеДекларацияНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеПодтверждениеНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеДекларацияНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьРезультатПриемаДекларацияНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеРезультатПриемаНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьРезультатОбработкиДекларацияНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеРезультатОбработкиНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьУведомлениеОбОшибкеФНС Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьФорма2НДФЛНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПодтверждениеФорма2НДФЛНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеФорма2НДФЛНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьРезультатПриемаФорма2НДФЛНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьОбращениеНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ОбращениеНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеОбращениеНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьРезультатПриемаОбращениеНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПодтверждениеОбращениеНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПисьмоНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьРассылкаНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.РассылкаНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеПисьмоНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеРассылкаНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьЗапросНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ЗапросНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПодтверждениеЗапросНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеЗапросНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьРезультатПриемаЗапросНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьРезультатОбработкиЗапросНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьЗаявлениеНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеЗаявлениеНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗаявлениеНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьРезультатПриемаЗаявлениеНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьРезультатОбработкиЗаявлениеРФНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеРезультатОбработкиРФНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьСообщениеОбОтзывеЗаявлениеРФНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеОбОтзывеЗаявлениеРФНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьРезультатОбработкиЗаявлениеТСНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеРезультатОбработкиТСНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьПодтверждениеЗаявлениеНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьДокументНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ДокументНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеДокументНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьРезультатПриемаДокументНП Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьИзвещениеРезультатПриемаНО Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНО;
		ИначеЕсли Элемент = Перечисления.ТипыТранспортныхСообщений.УдалитьКритическаяОшибка Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка;
		Иначе
			Возврат Элемент;
		КонецЕсли;
	Иначе
		Возврат Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРЫ СВЕДЕНИЙ

////////////////////////////////////////////////////////////////////////////////
// Вложения неформализованных документов

Процедура ВложенияНеформализованныхДокументовКонвертация(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ВложенияНеформализованныхДокументов.НеформализованныйДокумент
	                      |ИЗ
	                      |	РегистрСведений.ВложенияНеформализованныхДокументов КАК ВложенияНеформализованныхДокументов");
	
	Если Запрос.Выполнить().Пустой() Тогда 
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьВложенияНеформализованныхДокументов.НеформализованныйДокумент,
		|	УдалитьВложенияНеформализованныхДокументов.ИмяФайла,
		|	УдалитьВложенияНеформализованныхДокументов.Данные,
		|	УдалитьВложенияНеформализованныхДокументов.Тип,
		|	УдалитьВложенияНеформализованныхДокументов.Размер
		|ИЗ
		|	РегистрСведений.УдалитьВложенияНеформализованныхДокументов КАК УдалитьВложенияНеформализованныхДокументов";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.ВложенияНеформализованныхДокументов.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.НеформализованныйДокумент = КонвертироватьДанные(Выборка.НеформализованныйДокумент, СоответствиеКонвертированныхОбъектов);
			Запись.ИмяФайла					 = Выборка.ИмяФайла;
			Запись.Данные					 = Выборка.Данные;
			Запись.Тип						 = КонвертироватьДанные(Выборка.Тип, СоответствиеКонвертированныхОбъектов);
			Запись.Размер					 = Выборка.Размер;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ответы на запросы ИОН

Процедура ОтветыНаЗапросыИОНКонвертация(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОтветыНаЗапросыИОН.Запрос
	                      |ИЗ
	                      |	РегистрСведений.ОтветыНаЗапросыИОН КАК ОтветыНаЗапросыИОН");
	
	Если Запрос.Выполнить().Пустой() Тогда 
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьОтветыНаЗапросыИОН.Запрос,
		|	УдалитьОтветыНаЗапросыИОН.ИмяФайла,
		|	УдалитьОтветыНаЗапросыИОН.Данные,
		|	УдалитьОтветыНаЗапросыИОН.Размер,
		|	УдалитьОтветыНаЗапросыИОН.ТипСодержимого
		|ИЗ
		|	РегистрСведений.УдалитьОтветыНаЗапросыИОН КАК УдалитьОтветыНаЗапросыИОН";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.ОтветыНаЗапросыИОН.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Запрос			 = КонвертироватьДанные(Выборка.Запрос, СоответствиеКонвертированныхОбъектов);
			Запись.ИмяФайла			 = Выборка.ИмяФайла;
			Запись.Данные			 = Выборка.Данные;
			Запись.Размер			 = Выборка.Размер;
			Запись.ТипСодержимого	 = КонвертироватьДанные(Выборка.ТипСодержимого, СоответствиеКонвертированныхОбъектов);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Кэш файлов с ресурса общей ключевой информации "Такском"

Процедура ФайлыСведенийРОКИКонвертация(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ФайлыСведенийРОКИ.УчетнаяЗапись
	                      |ИЗ
	                      |	РегистрСведений.ФайлыСведенийРОКИ КАК ФайлыСведенийРОКИ");
	
	Если Запрос.Выполнить().Пустой() Тогда 
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьФайлыСведенийРОКИ.УчетнаяЗапись,
		|	УдалитьФайлыСведенийРОКИ.ИмяРесурса,
		|	УдалитьФайлыСведенийРОКИ.Данные,
		|	УдалитьФайлыСведенийРОКИ.Расшифрован,
		|	УдалитьФайлыСведенийРОКИ.ДатаФайла,
		|	УдалитьФайлыСведенийРОКИ.Размер
		|ИЗ
		|	РегистрСведений.УдалитьФайлыСведенийРОКИ КАК УдалитьФайлыСведенийРОКИ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.ФайлыСведенийРОКИ.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.УчетнаяЗапись = КонвертироватьДанные(Выборка.УчетнаяЗапись, СоответствиеКонвертированныхОбъектов);
			Запись.ИмяРесурса	 = Выборка.ИмяРесурса;
			Запись.Данные		 = Выборка.Данные;
			Запись.Расшифрован	 = Выборка.Расшифрован;
			Запись.ДатаФайла	 = Выборка.ДатаФайла;
			Запись.Размер		 = Выборка.Размер;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Хранилище электронных представлений регламентированных отчетов

Процедура ХранилищеЭлектронныхПредставленийРегламентированныхОтчетовКонвертация(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ЭлектронноеПредставление
	                      |ИЗ
	                      |	РегистрСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов КАК ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов");
	
	Если Запрос.Выполнить().Пустой() Тогда 
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УдалитьХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ЭлектронноеПредставление,
		               |	УдалитьХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ИмяФайла,
		               |	УдалитьХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.Данные,
		               |	УдалитьХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.Размер,
		               |	УдалитьХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ТипФайлаОтчетности
		               |ИЗ
		               |	РегистрСведений.УдалитьХранилищеЭлектронныхПредставленийРегламентированныхОтчетов КАК УдалитьХранилищеЭлектронныхПредставленийРегламентированныхОтчетов";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.ЭлектронноеПредставление	 = КонвертироватьДанные(Выборка.ЭлектронноеПредставление, СоответствиеКонвертированныхОбъектов);
			Запись.ИмяФайла					 = Выборка.ИмяФайла;
			Запись.Данные					 = Выборка.Данные;
			Запись.Размер					 = Выборка.Размер;
			Запись.ТипФайлаОтчетности		 = КонвертироватьДанные(Выборка.ТипФайлаОтчетности, СоответствиеКонвертированныхОбъектов);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройки обмена с ФСС

Процедура НастройкиОбменаФССКонвертация(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НастройкиОбменаФСС.Организация
	                      |ИЗ
	                      |	РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС");
	
	Если Запрос.Выполнить().Пустой() Тогда 
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УдалитьНастройкиОбменаФСС.Организация,
		               |	УдалитьНастройкиОбменаФСС.ИспользоватьОбмен,
		               |	УдалитьНастройкиОбменаФСС.СертификатСтрахователяОтпечаток,
		               |	УдалитьНастройкиОбменаФСС.СертификатФССОтпечаток,
		               |	УдалитьНастройкиОбменаФСС.ИспользоватьАвтонастройку
		               |ИЗ
		               |	РегистрСведений.УдалитьНастройкиОбменаФСС КАК УдалитьНастройкиОбменаФСС";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.НастройкиОбменаФСС.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Организация						 = КонвертироватьДанные(Выборка.Организация, СоответствиеКонвертированныхОбъектов);
			Запись.ИспользоватьОбмен				 = Выборка.ИспользоватьОбмен;
			Запись.СертификатСтрахователяОтпечаток	 = Выборка.СертификатСтрахователяОтпечаток;
			Запись.СертификатФССОтпечаток			 = Выборка.СертификатФССОтпечаток;
			Запись.ИспользоватьАвтонастройку		 = Выборка.ИспользоватьАвтонастройку;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Кэш файлов с ресурсов спецоператоров по универсальной схеме

Процедура ФайлыСведенийСпецоператорыКонвертация(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ФайлыСведенийСпецоператоры.УчетнаяЗапись
	                      |ИЗ
	                      |	РегистрСведений.ФайлыСведенийСпецоператоры КАК ФайлыСведенийСпецоператоры");
	
	Если Запрос.Выполнить().Пустой() Тогда 
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФайлыСведенийСпецоператоры.УчетнаяЗапись,
		               |	ФайлыСведенийСпецоператоры.Данные,
		               |	ФайлыСведенийСпецоператоры.ДатаФайла,
		               |	ФайлыСведенийСпецоператоры.Размер
		               |ИЗ
		               |	РегистрСведений.УдалитьФайлыСведенийСпецоператоры КАК ФайлыСведенийСпецоператоры";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.ФайлыСведенийСпецоператоры.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.УчетнаяЗапись = КонвертироватьДанные(Выборка.УчетнаяЗапись, СоответствиеКонвертированныхОбъектов);
			Запись.Данные		 = Выборка.Данные;
			Запись.ДатаФайла	 = Выборка.ДатаФайла;
			Запись.Размер		 = Выборка.Размер;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Файлы документов реализации полномочий налоговых органов

Процедура ФайлыДокументовРеализацииПолномочийНалоговыхОргановКонвертация(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ
	                      |ИЗ
	                      |	РегистрСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов");
	
	Если Запрос.Выполнить().Пустой() Тогда 
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ,
		               |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла,
		               |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Данные,
		               |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Размер,
		               |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ТипСодержимого
		               |ИЗ
		               |	РегистрСведений.УдалитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Документ = КонвертироватьДанные(Выборка.Документ, СоответствиеКонвертированныхОбъектов);
			Запись.ИмяФайла			 = Выборка.ИмяФайла;
			Запись.Данные			 = Выборка.Данные;
			Запись.Размер			 = Выборка.Размер;
			Запись.ТипСодержимого	 = КонвертироватьДанные(Выборка.ТипСодержимого, СоответствиеКонвертированныхОбъектов);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ДОКУМЕНТЫ

Функция КонвертироватьДокумент(ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	
	// Объекты не из подсистемы БРО
	Если ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПередачаДСВвПФР") 
		ИЛИ ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСведенияОВзносахИСтраховомСтажеСПВ1")
		ИЛИ ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьАнкетаЗастрахованногоЛица")
		ИЛИ ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСведенияОНачисленномЗаработкеСЗВ63")
		ИЛИ  ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства")
		ИЛИ ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСправкаПоНДФЛВНалоговыйОрган")
		ИЛИ ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПередачаСЗВ4вПФР") Тогда 

		Возврат ЗарплатаКадрыОбновлениеСПредыдущейРедакции.КонвертироватьДанные(ДанныеДокумента.Ссылка);
	КонецЕсли;
	
	СсылкаНаНовыйДокумент = ПолучитьСсылкуНаКонвертированныйОбъект(ДанныеДокумента.Ссылка, СоответствиеКонвертированныхОбъектов);
	
	Если СсылкаНаНовыйДокумент <> Неопределено Тогда 
		Возврат СсылкаНаНовыйДокумент;
	КонецЕсли;
	
	ДокументОбъект = ПолучитьДокументСоответсвующийКонвертируемому(ДанныеДокумента.Ссылка);
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> ТипЗнч(ДанныеДокумента.Ссылка) Тогда
		
		ПолноеИмяДокумента = ДокументОбъект.Метаданные().ПолноеИмя();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументПриемник.Ссылка
		|ИЗ
		|	#ДокументПриемник КАК ДокументПриемник
		|ГДЕ
		|	ДокументПриемник.Номер = &Номер
		|	И ДокументПриемник.Дата = &Дата";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументПриемник", ПолноеИмяДокумента);
		Запрос.УстановитьПараметр("Номер", ДанныеДокумента.Номер);
		Запрос.УстановитьПараметр("Дата", ДанныеДокумента.Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			ВставитьСсылкуНаКонвертированныйОбъект(ДанныеДокумента.Ссылка, Выборка.Ссылка, СоответствиеКонвертированныхОбъектов);
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьБизнесЛогикуПриЗаписи", Истина);
	Если ТипЗнч(ДокументОбъект.Ссылка) <> ТипЗнч(ДанныеДокумента.Ссылка) Тогда 
		ЗаполнитьРеквизитыНовогоДокумента(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	КонецЕсли;
	
	КонвертацияДанныхДокумента(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ВставитьСсылкуНаКонвертированныйОбъект(ДанныеДокумента.Ссылка, ДокументОбъект.Ссылка, СоответствиеКонвертированныхОбъектов);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьДокументСоответсвующийКонвертируемому(ДанныеДокумента)
	
	Если ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда
		Возврат Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьЗаявлениеАбонентаСпецоператораСвязи") Тогда
		Возврат Документы.ЗаявлениеАбонентаСпецоператораСвязи.СоздатьДокумент();
	Иначе
		Возврат ДанныеДокумента.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
КонецФункции

Процедура КонвертацияДанныхДокумента(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	
	// Для отсутствующих или несовпавших реквитов документа.
	Если ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьЗаявлениеАбонентаСпецоператораСвязи") Тогда
		ЗаявлениеАбонентаСпецоператораСвязиКонвертацияДанных(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНовогоДокумента(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	
	СоотвествиеРеквизитов = ПолучитьСоответсвиеРеквизитовКонвертируемогоДокумента(ДанныеДокумента);
	
	Для Каждого Реквизит Из СоотвествиеРеквизитов Цикл
		Если ТипЗнч(Реквизит.Значение) = Тип("Структура") Тогда 
			ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект[Реквизит.Ключ],
				ДанныеДокумента[Реквизит.Значение.ИмяТЧ], Реквизит.Значение, СоответствиеКонвертированныхОбъектов);
		Иначе
			ДокументОбъект[Реквизит.Ключ] = КонвертироватьДанные(ДанныеДокумента[Реквизит.Значение],
				СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокумента(ТЧПриемник, ДанныеИсточник, СоответствиеРеквизитовТЧ, СоответствиеКонвертированныхОбъектов)
	
	Если ТипЗнч(ДанныеИсточник) = Тип("РезультатЗапроса") Тогда
		ТЧИсточник = ДанныеИсточник.Выгрузить();
	Иначе 
		ТЧИсточник = ДанныеИсточник;
	КонецЕсли;
	
	ТЧПриемник.Очистить();
	Для Каждого СтрокаТЧИсточник Из ТЧИсточник Цикл
		СтрокаТЧПриемник = ТЧПриемник.Добавить();
		Для Каждого РеквизитТЧ Из СоответствиеРеквизитовТЧ Цикл
			Если РеквизитТЧ.Ключ <> "ИмяТЧ" Тогда
				СтрокаТЧПриемник[РеквизитТЧ.Ключ] = КонвертироватьДанные(СтрокаТЧИсточник[РеквизитТЧ.Значение], СоответствиеКонвертированныхОбъектов);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоответсвиеРеквизитовКонвертируемогоДокумента(ДанныеДокумента)
	
	Если ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда 
		Возврат ПолучитьСоответсвиеРеквизитовЗапросНаИОН(ДанныеДокумента);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьЗаявлениеАбонентаСпецоператораСвязи") Тогда 
		Возврат ПолучитьСоответсвиеРеквизитовЗаявлениеАбонента(ДанныеДокумента);
	Иначе
		Возврат Новый Соответствие;
	КонецЕсли;
	
КонецФункции

Функция ВписатьДанныеВыборкиПоДокументуВСтруткуры(Выборка, Колонки)
	
	Структура = Новый Структура;
	
	Для Каждого Колонка Из Колонки Цикл
		Структура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция ВписатьДанныеВыборкиПоТабличнойЧастиВТаблицу(Выборка, СсылкаНаВладельцаТЧ, Колонки)
	
	Таблица = Новый ТаблицаЗначений;
		
	Для Каждого Колонка Из Колонки Цикл
		Таблица.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Выборка.Сбросить();
	Если Выборка.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаВладельцаТЧ)) Тогда
		
		Выборка.СледующийПоЗначениюПоля("Ссылка");
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			
			Пока Выборка.Следующий() Цикл
				
				СтрокаТаблицы = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ЗапросНаИнформационноеОбслуживаниеНалогоплательщика

Функция ПолучитьСписокКонвертируемыхДокументовЗапросНаИОН(ДатаНачала, ДатаОкончания)
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	//Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Ссылка
	|ИЗ
	|	Документ.УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика КАК УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика
	//|ГДЕ
	//|	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ОтчетныйПериод МЕЖДУ ГОД(&ДатаНачала) И ГОД(&ДатаОкончания)
	//|	И УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Проведен
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Процедура КонвертироватьДокументыЗапросНаИОН(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Ссылка
	               |ИЗ
	               |	Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика КАК ЗапросНаИнформационноеОбслуживаниеНалогоплательщика";
	Если НЕ Запрос.Выполнить().Пустой() Тогда 
		Возврат; // Объект не пустой, значит конвертация уже производилась.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Ссылка КАК Ссылка,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ВерсияДанных,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПометкаУдаления,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Номер,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Дата,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Проведен,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Организация,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Получатель,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ДатаНачалаПериода,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ДатаОкончанияПериода,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ВидУслуги,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ФорматОтвета,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.АдресПредставленияСправки,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ДополнительныйПараметр,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ФорматЗапроса
	               |ИЗ
	               |	Документ.УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика КАК УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика
	               |ГДЕ
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.Ссылка КАК Ссылка,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.НомерСтроки КАК НомерСтроки,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.КБК,
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.ОКАТО
	               |ИЗ
	               |	Документ.УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ЗапрашиваемыеНалоги КАК УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги
	               |ГДЕ
	               |	УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
	ВыборкаПоТЧЗапрашиваемыеНалоги =  Результаты[1].Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		СтруктураДанныхДокумента = ВписатьДанныеВыборкиПоДокументуВСтруткуры(ВыборкаПоДокументам, Результаты[0].Колонки);
		
		СтруктураДанныхДокумента.Вставить("ЗапрашиваемыеНалоги",
			ВписатьДанныеВыборкиПоТабличнойЧастиВТаблицу(ВыборкаПоТЧЗапрашиваемыеНалоги, ВыборкаПоДокументам.Ссылка, Результаты[1].Колонки));
		
		КонвертироватьДанные(СтруктураДанныхДокумента, СоответствиеКонвертированныхОбъектов);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоответсвиеРеквизитовЗапросНаИОН(ДанныеДокумента)
	
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Получатель", "Получатель");
	СоответствиеРеквизитов.Вставить("ДатаНачалаПериода", "ДатаНачалаПериода");
	СоответствиеРеквизитов.Вставить("ДатаОкончанияПериода", "ДатаОкончанияПериода");
	СоответствиеРеквизитов.Вставить("ВидУслуги", "ВидУслуги");
	СоответствиеРеквизитов.Вставить("ФорматОтвета", "ФорматОтвета");
	СоответствиеРеквизитов.Вставить("АдресПредставленияСправки", "АдресПредставленияСправки");
	СоответствиеРеквизитов.Вставить("ДополнительныйПараметр", "ДополнительныйПараметр");
	СоответствиеРеквизитов.Вставить("ФорматЗапроса", "ФорматЗапроса");
	
	СоответствиеРеквизитовТЧЗапрашиваемыеНалоги = Новый Структура;
	СоответствиеРеквизитовТЧЗапрашиваемыеНалоги.Вставить("ИмяТЧ", "ЗапрашиваемыеНалоги");
	СоответствиеРеквизитовТЧЗапрашиваемыеНалоги.Вставить("КБК", "КБК");
	СоответствиеРеквизитовТЧЗапрашиваемыеНалоги.Вставить("ОКАТО", "ОКАТО");
	
	СоответствиеРеквизитов.Вставить("ЗапрашиваемыеНалоги", СоответствиеРеквизитовТЧЗапрашиваемыеНалоги);
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции

Функция ПолучитьСоответсвиеРеквизитовЗаявлениеАбонента(ДанныеДокумента)
	
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("ИдентификаторДокументооборота", "ИдентификаторДокументооборота");
	СоответствиеРеквизитов.Вставить("ТипЗаявления", "ТипЗаявления");
	СоответствиеРеквизитов.Вставить("Статус", "Статус");
	СоответствиеРеквизитов.Вставить("УчетнаяЗапись", "УчетнаяЗапись");
	СоответствиеРеквизитов.Вставить("ТипОрганизации", "ТипОрганизации");
	СоответствиеРеквизитов.Вставить("ИНН", "ИНН");
	СоответствиеРеквизитов.Вставить("КПП", "КПП");
	СоответствиеРеквизитов.Вставить("ПолноеНаименование", "ПолноеНаименование");
	СоответствиеРеквизитов.Вставить("КраткоеНаименование", "КраткоеНаименование");
	СоответствиеРеквизитов.Вставить("ПризнакУполномоченногоПредставителя", "ПризнакУполномоченногоПредставителя");
	СоответствиеРеквизитов.Вставить("ПризнакКрупнейшегоНалогоплательщика", "ПризнакКрупнейшегоНалогоплательщика");
	СоответствиеРеквизитов.Вставить("ПризнакОбособленногоПодразделения", "ПризнакОбособленногоПодразделения");
	СоответствиеРеквизитов.Вставить("АдресЮридический", "АдресЮридический");
	СоответствиеРеквизитов.Вставить("АдресФактический", "АдресФактический");
	СоответствиеРеквизитов.Вставить("РегНомерПФР", "РегНомерПФР");
	СоответствиеРеквизитов.Вставить("РегНомерФСС", "РегНомерФСС");
	СоответствиеРеквизитов.Вставить("ТелефонОсновной", "ТелефонОсновной");
	СоответствиеРеквизитов.Вставить("ТелефонДополнительный", "ТелефонДополнительный");
	СоответствиеРеквизитов.Вставить("ЭлектроннаяПочта", "ЭлектроннаяПочта");
	СоответствиеРеквизитов.Вставить("ВладелецЭЦПФамилия", "ВладелецЭЦПФамилия");
	СоответствиеРеквизитов.Вставить("ВладелецЭЦПИмя", "ВладелецЭЦПИмя");
	СоответствиеРеквизитов.Вставить("ВладелецЭЦПОтчество", "ВладелецЭЦПОтчество");
	СоответствиеРеквизитов.Вставить("ВладелецЭЦПДолжность", "ВладелецЭЦПДолжность");
	СоответствиеРеквизитов.Вставить("ВладелецЭЦППодразделение", "ВладелецЭЦППодразделение");
	СоответствиеРеквизитов.Вставить("ВладелецЭЦПВидДокумента", "ВладелецЭЦПВидДокумента");
	СоответствиеРеквизитов.Вставить("ВладелецЭЦПНомерДокумента", "ВладелецЭЦПНомерДокумента");
	СоответствиеРеквизитов.Вставить("ВладелецЭЦПСерияДокумента", "ВладелецЭЦПСерияДокумента");
	СоответствиеРеквизитов.Вставить("ВладелецЭЦПДатаВыдачиДокумента", "ВладелецЭЦПДатаВыдачиДокумента");
	СоответствиеРеквизитов.Вставить("ВладелецЭЦПКемВыданДокумент", "ВладелецЭЦПКемВыданДокумент");
	СоответствиеРеквизитов.Вставить("ВладелецЭЦПТип", "ВладелецЭЦПТип");
	СоответствиеРеквизитов.Вставить("ТипКриптопровайдера", "ТипКриптопровайдера");
	СоответствиеРеквизитов.Вставить("ПутьКонтейнерЗакрытогоКлюча", "ПутьКонтейнерЗакрытогоКлюча");
	СоответствиеРеквизитов.Вставить("Комментарий", "Комментарий");
	СоответствиеРеквизитов.Вставить("СтатусКомментарий", "СтатусКомментарий");
	СоответствиеРеквизитов.Вставить("ДатаОтправкиЗаявления", "ДатаОтправкиЗаявления");
	СоответствиеРеквизитов.Вставить("СпецоператорСвязи", "СпецоператорСвязи");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("ДатаПолученияОтвета", "ДатаПолученияОтвета");
	СоответствиеРеквизитов.Вставить("Ответственный", "Ответственный");
	СоответствиеРеквизитов.Вставить("ДатаСозданияУчетнойЗаписи", "ДатаСозданияУчетнойЗаписи");
	СоответствиеРеквизитов.Вставить("ДополнительныйКодФСС", "ДополнительныйКодФСС");
	СоответствиеРеквизитов.Вставить("НомерОсновнойПоставки1с", "НомерОсновнойПоставки1с");
	
	СоответствиеРеквизитовТЧПолучатели = Новый Структура;
	СоответствиеРеквизитовТЧПолучатели.Вставить("ИмяТЧ", "Получатели");
	СоответствиеРеквизитовТЧПолучатели.Вставить("ТипПолучателя", "ТипПолучателя");
	СоответствиеРеквизитовТЧПолучатели.Вставить("КодПолучателя", "КодПолучателя");
	СоответствиеРеквизитовТЧПолучатели.Вставить("КПП", "КПП");
	
	СоответствиеРеквизитов.Вставить("Получатели", СоответствиеРеквизитовТЧПолучатели);
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции

Функция ЗаявлениеАбонентаСпецоператораСвязиКонвертацияДанных(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	
	ТабличнаяЧастьОбъекта = ДокументОбъект.Получатели;
	
	СтруктураДляПоиска = Новый Структура("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ПустаяСсылка());
	
	МассивПустыхСтрок = ТабличнаяЧастьОбъекта.НайтиСтроки(СтруктураДляПоиска); 
	
	Для каждого Строка Из МассивПустыхСтрок Цикл 
		Строка.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
	КонецЦикла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗаявлениеАбонентаСпецоператораСвязи

Функция ПолучитьСписокКонвертируемыхДокументовЗаявлениеАбонентаСпецоператораСвязи(ДатаНачала, ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьЗаявлениеАбонентаСпецоператораСвязи.Ссылка
	|ИЗ
	|	Документ.УдалитьЗаявлениеАбонентаСпецоператораСвязи КАК УдалитьЗаявлениеАбонентаСпецоператораСвязи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Процедура КонвертироватьДокументыЗаявлениеАбонентаСпецоператораСвязи(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка
	               |ИЗ
	               |	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи";
	Если НЕ Запрос.Выполнить().Пустой() Тогда 
		Возврат; // Объект не пустой, значит конвертация уже производилась.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.Ссылка КАК Ссылка,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.Номер,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.Дата,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ИдентификаторДокументооборота,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ТипЗаявления,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.Статус,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.УчетнаяЗапись,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ТипОрганизации,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ИНН,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.КПП,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ПолноеНаименование,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.КраткоеНаименование,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ПризнакУполномоченногоПредставителя,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ПризнакКрупнейшегоНалогоплательщика,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ПризнакОбособленногоПодразделения,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.АдресЮридический,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.АдресФактический,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.РегНомерПФР,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.РегНомерФСС,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ТелефонОсновной,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ТелефонДополнительный,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ЭлектроннаяПочта,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦПФамилия,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦПИмя,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦПОтчество,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦПДолжность,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦППодразделение,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦПВидДокумента,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦПНомерДокумента,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦПСерияДокумента,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦПДатаВыдачиДокумента,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦПКемВыданДокумент,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦПТип,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ТипКриптопровайдера,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ПутьКонтейнерЗакрытогоКлюча,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.Комментарий,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.СтатусКомментарий,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.СпецоператорСвязи,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.Организация,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ДатаОтправкиЗаявления,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ДатаПолученияОтвета,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ДатаСозданияУчетнойЗаписи,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.Ответственный,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.ДополнительныйКодФСС,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.НомерОсновнойПоставки1с
	               |ИЗ
	               |	Документ.УдалитьЗаявлениеАбонентаСпецоператораСвязи КАК УдалитьЗаявлениеАбонентаСпецоператораСвязи
	               |ГДЕ
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязи.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязиПолучатели.Ссылка КАК Ссылка,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязиПолучатели.НомерСтроки КАК НомерСтроки,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязиПолучатели.ТипПолучателя,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязиПолучатели.КодПолучателя,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязиПолучатели.КПП
	               |ИЗ
	               |	Документ.УдалитьЗаявлениеАбонентаСпецоператораСвязи.Получатели КАК УдалитьЗаявлениеАбонентаСпецоператораСвязиПолучатели
	               |ГДЕ
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязиПолучатели.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	УдалитьЗаявлениеАбонентаСпецоператораСвязиПолучатели.НомерСтроки";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
	ВыборкаПоТЧПолучатели = Результаты[1].Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		СтруктураДанныхДокумента = ВписатьДанныеВыборкиПоДокументуВСтруткуры(ВыборкаПоДокументам, Результаты[0].Колонки);
		
		СтруктураДанныхДокумента.Вставить("Получатели",
			ВписатьДанныеВыборкиПоТабличнойЧастиВТаблицу(ВыборкаПоТЧПолучатели, ВыборкаПоДокументам.Ссылка, Результаты[1].Колонки));
		
		КонвертироватьДанные(СтруктураДанныхДокумента, СоответствиеКонвертированныхОбъектов);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ КОНВЕРТАЦИИ ОБЪЕКТОВ

//Справочник УдалитьНалоговыеОрганы
//
Процедура КонвертироватьСправочникНалоговыеОрганы(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыеОрганы.Ссылка
	               |ИЗ
	               |	Справочник.НалоговыеОрганы КАК НалоговыеОрганы";
	Если НЕ Запрос.Выполнить().Пустой() Тогда 
		Возврат; // Объект не пустой, значит конвертация уже производилась.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьНалоговыеОрганы.Ссылка,
	               |	УдалитьНалоговыеОрганы.ВерсияДанных,
	               |	УдалитьНалоговыеОрганы.ПометкаУдаления,
	               |	УдалитьНалоговыеОрганы.Предопределенный,
	               |	УдалитьНалоговыеОрганы.Родитель,
	               |	УдалитьНалоговыеОрганы.Код,
	               |	УдалитьНалоговыеОрганы.Наименование,
	               |	УдалитьНалоговыеОрганы.Вид,
	               |	УдалитьНалоговыеОрганы.ПолноеНаименование,
	               |	УдалитьНалоговыеОрганы.УчетНалогоплательщиков,
	               |	УдалитьНалоговыеОрганы.ПриемНалоговойОтчетности,
	               |	УдалитьНалоговыеОрганы.ИНН,
	               |	УдалитьНалоговыеОрганы.КПП,
	               |	УдалитьНалоговыеОрганы.Адрес,
	               |	УдалитьНалоговыеОрганы.Телефон,
	               |	УдалитьНалоговыеОрганы.АдресЭлектроннойПочты,
	               |	УдалитьНалоговыеОрганы.АдресСайта,
	               |	УдалитьНалоговыеОрганы.Комментарий,
	               |	УдалитьНалоговыеОрганы.УдалитьСертификат,
	               |	УдалитьНалоговыеОрганы.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками,
	               |	УдалитьНалоговыеОрганы.Представление,
	               |	НалоговыеОрганы.Ссылка КАК ПриемникСсылка
	               |ИЗ
	               |	Справочник.УдалитьНалоговыеОрганы КАК УдалитьНалоговыеОрганы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НалоговыеОрганы КАК НалоговыеОрганы
	               |		ПО УдалитьНалоговыеОрганы.Код = НалоговыеОрганы.Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);
	КонецЦикла;
	
КонецПроцедуры

//Справочник УдалитьВидыНалоговыхОрганов
//
Процедура КонвертироватьСправочникВидыНалоговыхОрганов(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыНалоговыхОрганов.Ссылка
	               |ИЗ
	               |	Справочник.ВидыНалоговыхОрганов КАК ВидыНалоговыхОрганов";
	Если НЕ Запрос.Выполнить().Пустой() Тогда 
		Возврат; // Объект не пустой, значит конвертация уже производилась.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьВидыНалоговыхОрганов.Ссылка,
	               |	УдалитьВидыНалоговыхОрганов.ВерсияДанных,
	               |	УдалитьВидыНалоговыхОрганов.ПометкаУдаления,
	               |	УдалитьВидыНалоговыхОрганов.Предопределенный,
	               |	УдалитьВидыНалоговыхОрганов.Код,
	               |	УдалитьВидыНалоговыхОрганов.Наименование,
	               |	УдалитьВидыНалоговыхОрганов.Представление,
	               |	ВидыНалоговыхОрганов.Ссылка КАК ПриемникСсылка
	               |ИЗ
	               |	Справочник.УдалитьВидыНалоговыхОрганов КАК УдалитьВидыНалоговыхОрганов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНалоговыхОрганов КАК ВидыНалоговыхОрганов
	               |		ПО УдалитьВидыНалоговыхОрганов.Код = ВидыНалоговыхОрганов.Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);
	КонецЦикла;
	
КонецПроцедуры

//Справочник УдалитьУчетныеЗаписиДокументооборота
//
Процедура КонвертироватьСправочникУчетныеЗаписиДокументооборота(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныеЗаписиДокументооборота.Ссылка
	               |ИЗ
	               |	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота";
	Если НЕ Запрос.Выполнить().Пустой() Тогда 
		Возврат; // Объект не пустой, значит конвертация уже производилась.
	КонецЕсли;
	
	// Конвертация не производилась. Можно сконвертировать константы
	КонвертироватьКонстанты();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьУчетныеЗаписиДокументооборота.Ссылка,
	               |	УдалитьУчетныеЗаписиДокументооборота.ВерсияДанных,
	               |	УдалитьУчетныеЗаписиДокументооборота.ПометкаУдаления,
	               |	УдалитьУчетныеЗаписиДокументооборота.Предопределенный,
	               |	УдалитьУчетныеЗаписиДокументооборота.Код,
	               |	УдалитьУчетныеЗаписиДокументооборота.Наименование,
	               |	УдалитьУчетныеЗаписиДокументооборота.ИмяПользователяPOP3,
	               |	УдалитьУчетныеЗаписиДокументооборота.ПарольPOP3,
	               |	УдалитьУчетныеЗаписиДокументооборота.СерверPOP3,
	               |	УдалитьУчетныеЗаписиДокументооборота.ПортPOP3,
	               |	УдалитьУчетныеЗаписиДокументооборота.ИмяПользователяSMTP,
	               |	УдалитьУчетныеЗаписиДокументооборота.ПарольSMTP,
	               |	УдалитьУчетныеЗаписиДокументооборота.СерверSMTP,
	               |	УдалитьУчетныеЗаписиДокументооборота.ПортSMTP,
	               |	УдалитьУчетныеЗаписиДокументооборота.ТребуетсяSMTPАутентификация,
	               |	УдалитьУчетныеЗаписиДокументооборота.АдресЭлектроннойПочты,
	               |	УдалитьУчетныеЗаписиДокументооборота.НалоговыйОрган,
	               |	УдалитьУчетныеЗаписиДокументооборота.СерверДокументооборота,
	               |	УдалитьУчетныеЗаписиДокументооборота.СертификатРуководителя,
	               |	УдалитьУчетныеЗаписиДокументооборота.СертификатГлавногоБухгалтера,
	               |	УдалитьУчетныеЗаписиДокументооборота.СертификатДляШифрования,
	               |	УдалитьУчетныеЗаписиДокументооборота.УдалитьАвтоматическоеОпределениеНабораПодписей,
	               |	УдалитьУчетныеЗаписиДокументооборота.ИспользуютсяСъемныеКлючевыеНосители,
	               |	УдалитьУчетныеЗаписиДокументооборота.УдалитьНестандартныеТаймауты,
	               |	УдалитьУчетныеЗаписиДокументооборота.УдалитьТаймаутНалоговогоОргана,
	               |	УдалитьУчетныеЗаписиДокументооборота.УдалитьТаймаутНалогоплательщика,
	               |	УдалитьУчетныеЗаписиДокументооборота.УдалитьИспользуетсяОбособленнымиПодразделениями,
	               |	УдалитьУчетныеЗаписиДокументооборота.ОбменНапрямую,
	               |	УдалитьУчетныеЗаписиДокументооборота.НеФормироватьПодтвержденияАвтоматически,
	               |	УдалитьУчетныеЗаписиДокументооборота.РежимАвтонастройки,
	               |	УдалитьУчетныеЗаписиДокументооборота.ИспользоватьСервисОнлайнПроверкиОтчетов,
	               |	УдалитьУчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСФНС,
	               |	УдалитьУчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСПФР,
	               |	УдалитьУчетныеЗаписиДокументооборота.ИдентификаторСпецоператора,
	               |	УдалитьУчетныеЗаписиДокументооборота.ИдентификаторАбонента,
	               |	УдалитьУчетныеЗаписиДокументооборота.ИдентификаторСистемыОтправителяПФР,
	               |	УдалитьУчетныеЗаписиДокументооборота.ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя,
	               |	УдалитьУчетныеЗаписиДокументооборота.ИННУполномоченногоПредставителя,
	               |	УдалитьУчетныеЗаписиДокументооборота.КППУполномоченногоПредставителя,
	               |	УдалитьУчетныеЗаписиДокументооборота.ПолноеНаименованиеУполномоченногоПредставителя,
	               |	УдалитьУчетныеЗаписиДокументооборота.СтатусУчетнойЗаписи,
	               |	УдалитьУчетныеЗаписиДокументооборота.СпецоператорСвязи,
	               |	УдалитьУчетныеЗаписиДокументооборота.Представление,
	               |	УчетныеЗаписиДокументооборота.Ссылка КАК ПриемникСсылка,
	               |	УдалитьУчетныеЗаписиДокументооборота.ОбменНапрямуюСФСГС,
	               |	УдалитьУчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСФСГС,
	               |	УдалитьУчетныеЗаписиДокументооборота.ИдентификаторСистемыОтправителяФСГС,
	               |	УдалитьУчетныеЗаписиДокументооборота.ОтключитьАвтообмен
	               |ИЗ
	               |	Справочник.УдалитьУчетныеЗаписиДокументооборота КАК УдалитьУчетныеЗаписиДокументооборота
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	               |		ПО УдалитьУчетныеЗаписиДокументооборота.Код = УчетныеЗаписиДокументооборота.Код
	               |			И УдалитьУчетныеЗаписиДокументооборота.Наименование = УчетныеЗаписиДокументооборота.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);
	КонецЦикла;
	
КонецПроцедуры

//Справочник УдалитьОрганыПФР
//
Процедура КонвертироватьСправочникОрганыПФР(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОрганыПФР.Ссылка
	               |ИЗ
	               |	Справочник.ОрганыПФР КАК ОрганыПФР";
	Если НЕ Запрос.Выполнить().Пустой() Тогда 
		Возврат; // Объект не пустой, значит конвертация уже производилась.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьОрганыПФР.Ссылка,
	               |	УдалитьОрганыПФР.ВерсияДанных,
	               |	УдалитьОрганыПФР.ПометкаУдаления,
	               |	УдалитьОрганыПФР.Предопределенный,
	               |	УдалитьОрганыПФР.Код,
	               |	УдалитьОрганыПФР.Наименование,
	               |	ОрганыПФР.Ссылка КАК ПриемникСсылка
	               |ИЗ
	               |	Справочник.УдалитьОрганыПФР КАК УдалитьОрганыПФР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОрганыПФР КАК ОрганыПФР
	               |		ПО УдалитьОрганыПФР.Код = ОрганыПФР.Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);
	КонецЦикла;
	
КонецПроцедуры

//Справочник УдалитьПерепискаСКонтролирующимиОрганами
//
Процедура КонвертироватьСправочникПерепискаСКонтролирующимиОрганами(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПерепискаСКонтролирующимиОрганами.Ссылка
	               |ИЗ
	               |	Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаСКонтролирующимиОрганами";
	Если НЕ Запрос.Выполнить().Пустой() Тогда 
		Возврат; // Объект не пустой, значит конвертация уже производилась.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьПерепискаСКонтролирующимиОрганами.Ссылка,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.ВерсияДанных,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.ПометкаУдаления,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.Предопределенный,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.Код,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.Наименование,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.Тип,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.Статус,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.Организация,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.Отправитель,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.Получатель,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.Содержание,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.ДатаСообщения,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.ДатаОтправки,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.Идентификатор,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.ИдентификаторОснования,
	               |	УдалитьПерепискаСКонтролирующимиОрганами.Ретроконверсия,
	               |	ПерепискаСКонтролирующимиОрганами.Ссылка КАК ПриемникСсылка
	               |ИЗ
	               |	Справочник.УдалитьПерепискаСКонтролирующимиОрганами КАК УдалитьПерепискаСКонтролирующимиОрганами
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаСКонтролирующимиОрганами
	               |		ПО УдалитьПерепискаСКонтролирующимиОрганами.Код = ПерепискаСКонтролирующимиОрганами.Код
	               |			И УдалитьПерепискаСКонтролирующимиОрганами.Наименование = ПерепискаСКонтролирующимиОрганами.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);
	КонецЦикла;
	
КонецПроцедуры

//Справочник УдалитьОтправкиФСС
//
Процедура КонвертироватьСправочникОтправкиФСС(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтправкиФСС.Ссылка
	               |ИЗ
	               |	Справочник.ОтправкиФСС КАК ОтправкиФСС";
	Если НЕ Запрос.Выполнить().Пустой() Тогда 
		Возврат; // Объект не пустой, значит конвертация уже производилась.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьОтправкиФСС.Ссылка,
	               |	УдалитьОтправкиФСС.ВерсияДанных,
	               |	УдалитьОтправкиФСС.ПометкаУдаления,
	               |	УдалитьОтправкиФСС.Предопределенный,
	               |	УдалитьОтправкиФСС.Код,
	               |	УдалитьОтправкиФСС.Наименование,
	               |	УдалитьОтправкиФСС.ОтчетСсылка,
	               |	УдалитьОтправкиФСС.ИдентификаторОтправкиНаСервере,
	               |	УдалитьОтправкиФСС.ЗашифрованныйПакет,
	               |	УдалитьОтправкиФСС.ИмяФайлаПакета,
	               |	УдалитьОтправкиФСС.СтатусОтправки,
	               |	УдалитьОтправкиФСС.Протокол,
	               |	УдалитьОтправкиФСС.ДатаОтправки,
	               |	УдалитьОтправкиФСС.ДатаПолученияРезультата,
	               |	УдалитьОтправкиФСС.Организация,
	               |	УдалитьОтправкиФСС.КодОрганаФСС,
	               |	УдалитьОтправкиФСС.Квитанция,
	               |	ОтправкиФСС.Ссылка КАК ПриемникСсылка
	               |ИЗ
	               |	Справочник.УдалитьОтправкиФСС КАК УдалитьОтправкиФСС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтправкиФСС КАК ОтправкиФСС
	               |		ПО УдалитьОтправкиФСС.Код = ОтправкиФСС.Код
	               |			И УдалитьОтправкиФСС.Наименование = ОтправкиФСС.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);
	КонецЦикла;
	
КонецПроцедуры

//Справочник УдалитьСерверыДокументооборота
//
Процедура КонвертироватьСправочникСерверыДокументооборота(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СерверыДокументооборота.Ссылка
	               |ИЗ
	               |	Справочник.СерверыДокументооборота КАК СерверыДокументооборота";
	Если НЕ Запрос.Выполнить().Пустой() Тогда 
		Возврат; // Объект не пустой, значит конвертация уже производилась.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьСерверыДокументооборота.Ссылка,
	               |	УдалитьСерверыДокументооборота.ВерсияДанных,
	               |	УдалитьСерверыДокументооборота.ПометкаУдаления,
	               |	УдалитьСерверыДокументооборота.Предопределенный,
	               |	УдалитьСерверыДокументооборота.Код,
	               |	УдалитьСерверыДокументооборота.Наименование,
	               |	УдалитьСерверыДокументооборота.АдресЭлектроннойПочтыФНС,
	               |	УдалитьСерверыДокументооборота.ДлительностьОжиданияСервера,
	               |	УдалитьСерверыДокументооборота.Сертификат,
	               |	УдалитьСерверыДокументооборота.АдресЭлектроннойПочтыПФР,
	               |	УдалитьСерверыДокументооборота.АдресЭлектроннойПочтыФСГС,
	               |	УдалитьСерверыДокументооборота.Представление,
	               |	СерверыДокументооборота.Ссылка КАК ПриемникСсылка
	               |ИЗ
	               |	Справочник.УдалитьСерверыДокументооборота КАК УдалитьСерверыДокументооборота
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерверыДокументооборота КАК СерверыДокументооборота
	               |		ПО УдалитьСерверыДокументооборота.Код = СерверыДокументооборота.Код
	               |			И УдалитьСерверыДокументооборота.Наименование = СерверыДокументооборота.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);
	КонецЦикла;
	
КонецПроцедуры

//Справочник УдалитьВидыОтправляемыхДокументов
//
Процедура КонвертироватьСправочникВидыОтправляемыхДокументов(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыОтправляемыхДокументов.Ссылка
	               |ИЗ
	               |	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов";
	Если НЕ Запрос.Выполнить().Пустой() Тогда 
		Возврат; // Объект не пустой, значит конвертация уже производилась.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьВидыОтправляемыхДокументов.Ссылка,
	               |	УдалитьВидыОтправляемыхДокументов.ВерсияДанных,
	               |	УдалитьВидыОтправляемыхДокументов.ПометкаУдаления,
	               |	УдалитьВидыОтправляемыхДокументов.Предопределенный,
	               |	УдалитьВидыОтправляемыхДокументов.Родитель,
	               |	УдалитьВидыОтправляемыхДокументов.ЭтоГруппа,
	               |	УдалитьВидыОтправляемыхДокументов.Код,
	               |	УдалитьВидыОтправляемыхДокументов.Наименование,
	               |	УдалитьВидыОтправляемыхДокументов.Описание,
	               |	УдалитьВидыОтправляемыхДокументов.Источник,
	               |	УдалитьВидыОтправляемыхДокументов.ТипПолучателя,
	               |	УдалитьВидыОтправляемыхДокументов.ТипДокумента,
	               |	УдалитьВидыОтправляемыхДокументов.Представление,
	               |	ВидыОтправляемыхДокументов.Ссылка КАК ПриемникСсылка
	               |ИЗ
	               |	Справочник.УдалитьВидыОтправляемыхДокументов КАК УдалитьВидыОтправляемыхДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
	               |		ПО УдалитьВидыОтправляемыхДокументов.Код = ВидыОтправляемыхДокументов.Код
	               |			И УдалитьВидыОтправляемыхДокументов.Наименование = ВидыОтправляемыхДокументов.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);
	КонецЦикла;
	
КонецПроцедуры

//Справочник УдалитьДокументыРеализацииПолномочийНалоговыхОрганов
//
Процедура КонвертироватьСправочникДокументыРеализацииПолномочийНалоговыхОрганов(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокументыРеализацииПолномочийНалоговыхОрганов.Ссылка
	               |ИЗ
	               |	Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов КАК ДокументыРеализацииПолномочийНалоговыхОрганов";
	Если НЕ Запрос.Выполнить().Пустой() Тогда 
		Возврат; // Объект не пустой, значит конвертация уже производилась.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.Ссылка,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.ВерсияДанных,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.ПометкаУдаления,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.Предопределенный,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.Код,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.Наименование,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.НалоговыйОрган,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.Организация,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.Идентификатор,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.ИдентификаторОснования,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.ВидДокумента,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.НомерДокумента,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.ДатаДокумента,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.ДатаСообщения,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.ДатаОтправки,
	               |	УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.Представление,
	               |	ДокументыРеализацииПолномочийНалоговыхОрганов.Ссылка КАК ПриемникСсылка
	               |ИЗ
	               |	Справочник.УдалитьДокументыРеализацииПолномочийНалоговыхОрганов КАК УдалитьДокументыРеализацииПолномочийНалоговыхОрганов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов КАК ДокументыРеализацииПолномочийНалоговыхОрганов
	               |		ПО УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.Код = ДокументыРеализацииПолномочийНалоговыхОрганов.Код
	               |			И УдалитьДокументыРеализацииПолномочийНалоговыхОрганов.Наименование = ДокументыРеализацииПолномочийНалоговыхОрганов.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);
	КонецЦикла;
	
КонецПроцедуры

// Константы
Процедура КонвертироватьКонстанты()
	
	//ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера
	ЗначениеКонстанты = Константы.УдалитьДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера.Получить();
	Константы.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера.Установить(ЗначениеКонстанты);
	//ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера
	ЗначениеКонстанты = Константы.УдалитьДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера.Получить();
	Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера.Установить(ЗначениеКонстанты);
	//ДокументооборотСКонтролирующимиОрганами_ОтпечатокСертификатаОнлайнПроверки
	ЗначениеКонстанты = Константы.УдалитьДокументооборотСКонтролирующимиОрганами_ОтпечатокСертификатаОнлайнПров;
	Константы.ДокументооборотСКонтролирующимиОрганами_ОтпечатокСертификатаОнлайнПроверки.Установить(ЗначениеКонстанты);
	//ДокументооборотСКонтролирующимиОрганами_СертификатСервераОнлайнПроверки
	ЗначениеКонстанты = Константы.УдалитьДокументооборотСКонтролирующимиОрганами_СертификатСервераОнлайнПроверки.Получить();
	Константы.ДокументооборотСКонтролирующимиОрганами_СертификатСервераОнлайнПроверки.Установить(ЗначениеКонстанты);
	//ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль
	ЗначениеКонстанты = Константы.УдалитьДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Получить();
	УстановитьПривилегированныйРежим(Истина);
	Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Установить(ЗначениеКонстанты);
	УстановитьПривилегированныйРежим(Ложь);
	//ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль
	ЗначениеКонстанты = Константы.УдалитьДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль.Получить();
	УстановитьПривилегированныйРежим(Истина);
	Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль.Установить(ЗначениеКонстанты);
	УстановитьПривилегированныйРежим(Ложь);
	//ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля
	ЗначениеКонстанты = Константы.УдалитьДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля.Получить();
	УстановитьПривилегированныйРежим(Истина);
	Константы.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля.Установить(ЗначениеКонстанты);
	УстановитьПривилегированныйРежим(Ложь);
	//
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ КОНВЕРТАЦИИ ЭЛЕМЕНТОВ

//Справочник УдалитьОтправкиФСС
//
Функция КонвертироватьЭлементОтправкиФСС(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		
		Элемент = Справочники.ОтправкиФСС.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		
		Элемент.ИдентификаторОтправкиНаСервере = КонвертируемыеДанные.ИдентификаторОтправкиНаСервере;
		Элемент.ЗашифрованныйПакет = КонвертируемыеДанные.ЗашифрованныйПакет;
		Элемент.ИмяФайлаПакета = КонвертируемыеДанные.ИмяФайлаПакета;
		Элемент.СтатусОтправки = КонвертируемыеДанные.СтатусОтправки;
		Элемент.Протокол = КонвертируемыеДанные.Протокол;
		Элемент.ДатаОтправки = КонвертируемыеДанные.ДатаОтправки;
		Элемент.ДатаПолученияРезультата = КонвертируемыеДанные.ДатаПолученияРезультата;
		Элемент.КодОрганаФСС = КонвертируемыеДанные.КодОрганаФСС;
		Элемент.Квитанция = КонвертируемыеДанные.Квитанция;
		
		Элемент.ОтчетСсылка = КонвертироватьДанные(КонвертируемыеДанные.ОтчетСсылка, СоответствиеКонвертированныхОбъектов);
		Элемент.Организация = КонвертироватьДанные(КонвертируемыеДанные.Организация, СоответствиеКонвертированныхОбъектов);
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
	
КонецФункции

//Справочник УдалитьСерверыДокументооборота
//
Функция КонвертироватьЭлементСерверыДокументооборота(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		
		Элемент = Справочники.СерверыДокументооборота.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		
		Элемент.АдресЭлектроннойПочтыФНС = КонвертируемыеДанные.АдресЭлектроннойПочтыФНС;
		Элемент.ДлительностьОжиданияСервера = КонвертируемыеДанные.ДлительностьОжиданияСервера;
		Элемент.Сертификат = КонвертируемыеДанные.Сертификат;
		Элемент.АдресЭлектроннойПочтыПФР = КонвертируемыеДанные.АдресЭлектроннойПочтыПФР;
		Элемент.АдресЭлектроннойПочтыФСГС = КонвертируемыеДанные.АдресЭлектроннойПочтыФСГС;
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
	
КонецФункции


//Справочник УдалитьПерепискаСКонтролирующимиОрганами
//
Функция КонвертироватьЭлементПерепискаСКонтролирующимиОрганами(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		
		Элемент = Справочники.ПерепискаСКонтролирующимиОрганами.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		
		Элемент.Тип			 = КонвертироватьДанные(КонвертируемыеДанные.Тип, СоответствиеКонвертированныхОбъектов);
		Элемент.Статус		 = КонвертироватьДанные(КонвертируемыеДанные.Статус, СоответствиеКонвертированныхОбъектов);
		
		Элемент.Организация	 = КонвертироватьДанные(КонвертируемыеДанные.Организация, СоответствиеКонвертированныхОбъектов);
		Элемент.Отправитель	 = КонвертироватьДанные(КонвертируемыеДанные.Отправитель, СоответствиеКонвертированныхОбъектов);
		Элемент.Получатель	 = КонвертироватьДанные(КонвертируемыеДанные.Получатель, СоответствиеКонвертированныхОбъектов);
		
		Элемент.Содержание              = КонвертируемыеДанные.Содержание;
		Элемент.ДатаСообщения           = КонвертируемыеДанные.ДатаСообщения;
		Элемент.ДатаОтправки            = КонвертируемыеДанные.ДатаОтправки;
		Элемент.Идентификатор           = КонвертируемыеДанные.Идентификатор;
		Элемент.ИдентификаторОснования  = КонвертируемыеДанные.ИдентификаторОснования;
		Элемент.Ретроконверсия          = КонвертируемыеДанные.Ретроконверсия;
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
	
КонецФункции

//Справочник УдалитьСправочникОрганыПФР
//
Функция КонвертироватьЭлементСправочникОрганыПФР(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		
		Элемент = Справочники.ОрганыПФР.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		
		//Элемент. = КонвертируемыеДанные.;
		Для Каждого ЭлементСертификат Из КонвертируемыеДанные.Ссылка.Сертификаты Цикл 
			НоваяСтрока = Элемент.Сертификаты.Добавить();
			НоваяСтрока.Сертификат = ЭлементСертификат.Сертификат
		КонецЦикла;
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
	
КонецФункции

//Справочник УдалитьЭлектронныеПредставленияРегламентированныхОтчетов
//
Функция КонвертироватьЭлементЭлектронныеПредставленияРегламентированныхОтчетов(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		
		Элемент = Справочники.ЭлектронныеПредставленияРегламентированныхОтчетов.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		
		Элемент.Организация = КонвертироватьДанные(КонвертируемыеДанные.Организация, СоответствиеКонвертированныхОбъектов);
		Элемент.Получатель = КонвертироватьДанные(КонвертируемыеДанные.Получатель, СоответствиеКонвертированныхОбъектов);
		Элемент.ВидОтчета = КонвертироватьДанные(КонвертируемыеДанные.ВидОтчета, СоответствиеКонвертированныхОбъектов);
		Элемент.ТипПолучателя = КонвертироватьДанные(КонвертируемыеДанные.ТипПолучателя, СоответствиеКонвертированныхОбъектов);
		
		Элемент.ДатаНачала             = КонвертируемыеДанные.ДатаНачала;
		Элемент.ДатаОкончания          = КонвертируемыеДанные.ДатаОкончания;
		Элемент.Версия                 = КонвертируемыеДанные.Версия;
		Элемент.Комментарий            = КонвертируемыеДанные.Комментарий;
		Элемент.Периодичность          = КонвертируемыеДанные.Периодичность;
		Элемент.ДатаИмпорта            = КонвертируемыеДанные.ДатаИмпорта;
		
		Элемент.ПредставлениеПериода = ПредставлениеПериода(КонвертируемыеДанные.ДатаНачала, КонецДня(КонвертируемыеДанные.ДатаОкончания), "ФП=Истина");
		Элемент.ПредставлениеВерсии = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(КонвертируемыеДанные.Версия);
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
	
КонецФункции

//Справочник УдалитьСправочникУчетныеЗаписиДокументооборота
//
Функция КонвертироватьЭлементУчетныеЗаписиДокументооборота(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		
		Элемент = Справочники.УчетныеЗаписиДокументооборота.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		
		Элемент.ИмяПользователяPOP3                                = КонвертируемыеДанные.ИмяПользователяPOP3;
		Элемент.ПарольPOP3                                         = КонвертируемыеДанные.ПарольPOP3;
		Элемент.СерверPOP3                                         = КонвертируемыеДанные.СерверPOP3;
		Элемент.ПортPOP3                                           = КонвертируемыеДанные.ПортPOP3;
		Элемент.ИмяПользователяSMTP                                = КонвертируемыеДанные.ИмяПользователяSMTP;
		Элемент.ПарольSMTP                                         = КонвертируемыеДанные.ПарольSMTP;
		Элемент.СерверSMTP                                         = КонвертируемыеДанные.СерверSMTP;
		Элемент.ПортSMTP                                           = КонвертируемыеДанные.ПортSMTP;
		Элемент.ТребуетсяSMTPАутентификация                        = КонвертируемыеДанные.ТребуетсяSMTPАутентификация;
		Элемент.АдресЭлектроннойПочты                              = КонвертируемыеДанные.АдресЭлектроннойПочты;
		
		Элемент.НалоговыйОрган = КонвертироватьДанные(КонвертируемыеДанные.НалоговыйОрган, СоответствиеКонвертированныхОбъектов);
		Элемент.СерверДокументооборота = КонвертироватьДанные(КонвертируемыеДанные.СерверДокументооборота, СоответствиеКонвертированныхОбъектов);
		
		Элемент.СертификатРуководителя                             = КонвертируемыеДанные.СертификатРуководителя;
		Элемент.СертификатГлавногоБухгалтера                       = КонвертируемыеДанные.СертификатГлавногоБухгалтера;
		Элемент.СертификатДляШифрования                            = КонвертируемыеДанные.СертификатДляШифрования;
		Элемент.УдалитьАвтоматическоеОпределениеНабораПодписей     = КонвертируемыеДанные.УдалитьАвтоматическоеОпределениеНабораПодписей;
		Элемент.ИспользуютсяСъемныеКлючевыеНосители                = КонвертируемыеДанные.ИспользуютсяСъемныеКлючевыеНосители;
		Элемент.УдалитьНестандартныеТаймауты                       = КонвертируемыеДанные.УдалитьНестандартныеТаймауты;
		Элемент.УдалитьТаймаутНалоговогоОргана                     = КонвертируемыеДанные.УдалитьТаймаутНалоговогоОргана;
		Элемент.УдалитьТаймаутНалогоплательщика                    = КонвертируемыеДанные.УдалитьТаймаутНалогоплательщика;
		Элемент.УдалитьИспользуетсяОбособленнымиПодразделениями    = КонвертируемыеДанные.УдалитьИспользуетсяОбособленнымиПодразделениями;
		Элемент.ОбменНапрямую                                      = КонвертируемыеДанные.ОбменНапрямую;
		Элемент.НеФормироватьПодтвержденияАвтоматически            = КонвертируемыеДанные.НеФормироватьПодтвержденияАвтоматически;
		Элемент.РежимАвтонастройки = КонвертироватьДанные(КонвертируемыеДанные.РежимАвтонастройки, СоответствиеКонвертированныхОбъектов);
		Элемент.ИспользоватьСервисОнлайнПроверкиОтчетов            = КонвертируемыеДанные.ИспользоватьСервисОнлайнПроверкиОтчетов;
		Элемент.ПредназначенаДляДокументооборотаСФНС               = КонвертируемыеДанные.ПредназначенаДляДокументооборотаСФНС;
		Элемент.ПредназначенаДляДокументооборотаСПФР               = КонвертируемыеДанные.ПредназначенаДляДокументооборотаСПФР;
		Элемент.ИдентификаторСпецоператора                         = КонвертируемыеДанные.ИдентификаторСпецоператора;
		Элемент.ИдентификаторАбонента                              = КонвертируемыеДанные.ИдентификаторАбонента;
		Элемент.ИдентификаторСистемыОтправителяПФР                 = КонвертируемыеДанные.ИдентификаторСистемыОтправителяПФР;
		Элемент.ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя = КонвертируемыеДанные.ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя;
		Элемент.ИННУполномоченногоПредставителя                    = КонвертируемыеДанные.ИННУполномоченногоПредставителя;
		Элемент.КППУполномоченногоПредставителя                    = КонвертируемыеДанные.КППУполномоченногоПредставителя;
		Элемент.ПолноеНаименованиеУполномоченногоПредставителя     = КонвертируемыеДанные.ПолноеНаименованиеУполномоченногоПредставителя;
		Элемент.СтатусУчетнойЗаписи                                = КонвертируемыеДанные.СтатусУчетнойЗаписи;
		Элемент.СпецоператорСвязи                                  = КонвертироватьДанные(КонвертируемыеДанные.СпецоператорСвязи, СоответствиеКонвертированныхОбъектов);
		Элемент.ОбменНапрямуюСФСГС                                 = КонвертируемыеДанные.ОбменНапрямуюСФСГС;
		Элемент.ПредназначенаДляДокументооборотаСФСГС              = КонвертируемыеДанные.ПредназначенаДляДокументооборотаСФСГС;
		Элемент.ИдентификаторСистемыОтправителяФСГС                = КонвертируемыеДанные.ИдентификаторСистемыОтправителяФСГС;
		
		Элемент.ОтключитьАвтообмен					               = КонвертируемыеДанные.ОтключитьАвтообмен;
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
	
КонецФункции

//Справочник УдалитьВидыНалоговыхОрганов
//
Функция КонвертироватьЭлементВидыНалоговыхОрганов(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		
		Элемент = Справочники.ВидыНалоговыхОрганов.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		
		//Элемент. = КонвертируемыеДанные.;
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
	
КонецФункции

//Справочник УдалитьНалоговыеОрганы
//
Функция КонвертироватьЭлементНалоговыеОрганы(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		
		Элемент = Справочники.НалоговыеОрганы.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		
		Элемент.Адрес = КонвертируемыеДанные.Адрес;
		Элемент.АдресСайта = КонвертируемыеДанные.АдресСайта;
		Элемент.АдресЭлектроннойПочты = КонвертируемыеДанные.АдресЭлектроннойПочты;
		Элемент.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками = КонвертируемыеДанные.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками;
		
		Элемент.ИНН = КонвертируемыеДанные.ИНН;
		Элемент.Комментарий = КонвертируемыеДанные.Комментарий;
		Элемент.КПП = КонвертируемыеДанные.КПП;
		Элемент.ПолноеНаименование = КонвертируемыеДанные.ПолноеНаименование;
		Элемент.ПриемНалоговойОтчетности = КонвертируемыеДанные.ПриемНалоговойОтчетности;
		Элемент.Телефон = КонвертируемыеДанные.Телефон;
		Элемент.УдалитьСертификат = КонвертируемыеДанные.УдалитьСертификат;
		Элемент.УчетНалогоплательщиков = КонвертируемыеДанные.УчетНалогоплательщиков;
		
		Элемент.Вид = КонвертироватьДанные(КонвертируемыеДанные.Вид, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого ЭлементСертификат Из КонвертируемыеДанные.Ссылка.Сертификаты Цикл 
			НоваяСтрока = Элемент.Сертификаты.Добавить();
			НоваяСтрока.Сертификат = ЭлементСертификат.Сертификат
		КонецЦикла;
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
	
КонецФункции

//Справочник УдалитьКонвертироватьЭлементВидыОтправляемыхДокументов
//
Функция КонвертироватьЭлементВидыОтправляемыхДокументов(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		
		Если КонвертируемыеДанные.ЭтоГруппа Тогда 
			
			Элемент = Справочники.ВидыОтправляемыхДокументов.СоздатьГруппу();
			УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
			Элемент.Родитель		= КонвертироватьДанные(КонвертируемыеДанные.Родитель, СоответствиеКонвертированныхОбъектов);
			Элемент.Описание		= КонвертируемыеДанные.Описание;
			
		Иначе
			
			Элемент = Справочники.ВидыОтправляемыхДокументов.СоздатьЭлемент();
			Элемент.Наименование = КонвертируемыеДанные.Наименование;
			УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
			
			Элемент.Родитель		= КонвертироватьДанные(КонвертируемыеДанные.Родитель, СоответствиеКонвертированныхОбъектов);
			Элемент.Описание		= КонвертируемыеДанные.Описание;
			Элемент.Источник		= КонвертируемыеДанные.Источник;
			
			Элемент.ТипПолучателя = КонвертироватьДанные(КонвертируемыеДанные.ТипПолучателя, СоответствиеКонвертированныхОбъектов);
			Элемент.ТипДокумента = КонвертироватьДанные(КонвертируемыеДанные.ТипДокумента, СоответствиеКонвертированныхОбъектов);
			
		КонецЕсли;
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
	
КонецФункции

// Справочник РегламентированныеОтчеты
//
Функция КонвертироватьЭлементРегламентированныеОтчеты(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Возврат Ссылка;
	
КонецФункции

// Справочник Организации
//
Функция КонвертироватьЭлементОрганизации(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Возврат Ссылка;
	
КонецФункции

// Справочник ОрганыФСГС
//
Функция КонвертироватьЭлементОрганыФСГС(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Возврат Ссылка;
	
КонецФункции

// Справочник РегистрацииВНалоговомОргане
//
Функция КонвертироватьЭлементРегистрацииВНалоговомОргане(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Возврат Ссылка;
	
КонецФункции

// Справочник ВидыДокументовФизическихЛиц
//
Функция КонвертироватьЭлементВидыДокументовФизическихЛиц(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Возврат Ссылка;
	
КонецФункции


// Справочник ДокументыРеализацииПолномочийНалоговыхОрганов
//
Функция КонвертироватьЭлементДокументыРеализацииПолномочийНалоговыхОрганов(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		
		Элемент = Справочники.ДокументыРеализацииПолномочийНалоговыхОрганов.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		
		Элемент.НалоговыйОрган = КонвертироватьДанные(КонвертируемыеДанные.НалоговыйОрган, СоответствиеКонвертированныхОбъектов);
		Элемент.Организация = КонвертируемыеДанные.Организация;
		Элемент.Идентификатор = КонвертируемыеДанные.Идентификатор;
		Элемент.ИдентификаторОснования = КонвертируемыеДанные.ИдентификаторОснования;
		Элемент.ВидДокумента = КонвертироватьДанные(КонвертируемыеДанные.ВидДокумента, СоответствиеКонвертированныхОбъектов);
		Элемент.НомерДокумента = КонвертируемыеДанные.НомерДокумента;
		Элемент.ДатаДокумента = КонвертируемыеДанные.ДатаДокумента;
		Элемент.ДатаСообщения = КонвертируемыеДанные.ДатаСообщения;
		Элемент.ДатаОтправки = КонвертируемыеДанные.ДатаОтправки;
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
	
КонецФункции

Функция КонвертироватьЭлементСправочникиДокументыРеализацииПолномочийНалоговыхОрганов(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		
		Элемент = Справочники.ДокументыРеализацииПолномочийНалоговыхОрганов.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		
		Элемент.НалоговыйОрган = КонвертироватьДанные(КонвертируемыеДанные.НалоговыйОрган, СоответствиеКонвертированныхОбъектов);
		Элемент.Организация = КонвертироватьДанные(КонвертируемыеДанные.Организация, СоответствиеКонвертированныхОбъектов);
		Элемент.ВидДокумента = КонвертироватьДанные(КонвертируемыеДанные.ВидДокумента, СоответствиеКонвертированныхОбъектов);
		
		Элемент.Идентификатор = КонвертируемыеДанные.Идентификатор;
		Элемент.ИдентификаторОснования = КонвертируемыеДанные.ИдентификаторОснования;
		Элемент.НомерДокумента = КонвертируемыеДанные.НомерДокумента;
		Элемент.ДатаДокумента = КонвертируемыеДанные.ДатаДокумента;
		Элемент.ДатаСообщения = КонвертируемыеДанные.ДатаСообщения;
		Элемент.ДатаОтправки = КонвертируемыеДанные.ДатаОтправки;
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
	
КонецФункции

Процедура ЗаполнитьУчетныеЗаписиОрганизаций(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.УчетнаяЗаписьОбмена КАК УчетнаяЗапись,
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.УчетнаяЗаписьОбмена ССЫЛКА Справочник.УдалитьУчетныеЗаписиДокументооборота";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Выборка.УчетнаяЗапись) Тогда
			ОрганизацияОбъект.УчетнаяЗаписьОбмена = КонвертироватьДанные(Выборка.УчетнаяЗапись, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;
		ОрганизацияОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыОбменаОрганизаций(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.ВидОбменаСКонтролирующимиОрганами КАК ВидОбмена,
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ВидОбменаСКонтролирующимиОрганами ССЫЛКА Перечисление.УдалитьВидыОбменаСКонтролирующимиОрганами";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Выборка.ВидОбмена) Тогда
			ОрганизацияОбъект.ВидОбменаСКонтролирующимиОрганами = КонвертироватьДанные(Выборка.ВидОбмена, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;
		ОрганизацияОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЦиклыОбменаПриПереходеС20(СоответствиеКонвертированныхОбъектов)
	
	Выборка = Справочники.ЦиклыОбмена.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если НЕ ЗначениеЗаполнено(Объект.ПредставлениеПериода) Тогда 
			
			Если Объект.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность
				ИЛИ Объект.Тип = Перечисления.ТипыЦикловОбмена.Заявление
				ИЛИ Объект.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
				Объект.Период = СокрЛП(Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd") + Формат('39991231' - Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd"));
				Объект.ПредставлениеПериода = ПредставлениеПериода(Объект.ДатаНачалаПериода, КонецДня(Объект.ДатаОкончанияПериода), "ФП=Истина");
			ИначеЕсли Объект.Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание
				ИЛИ Объект.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
				Объект.Период = СокрЛП(Формат(Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd") + Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd"));
			ИначеЕсли Объект.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда 
				Объект.Период = СокрЛП(Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd") + Формат('39991231' - Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd"));
				Объект.ПредставлениеПериода = ПредставлениеПериода(Объект.ДатаНачалаПериода, КонецДня(Объект.ДатаОкончанияПериода), "ФП=Истина");
			ИначеЕсли Объект.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьФСГС Тогда 
				Объект.Период = СокрЛП(Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd") + Формат('39991231' - Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd"));
				Объект.ПредставлениеПериода = ПредставлениеПериода(Объект.ДатаНачалаПериода, КонецДня(Объект.ДатаОкончанияПериода), "ФП=Истина");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПредставлениеВидаДокумента) Тогда 
			
			Если Объект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС
				И Объект.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534
				И (Объект.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность
				ИЛИ Объект.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ) Тогда 
				
				Объект.ПредставлениеВидаДокумента = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Объект.ВидДокумента);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.УдалитьПередачаДСВвПФР") 
			ИЛИ ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.УдалитьСведенияОВзносахИСтраховомСтажеСПВ1") 
			ИЛИ ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.УдалитьАнкетаЗастрахованногоЛица") 
			ИЛИ ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.УдалитьСведенияОНачисленномЗаработкеСЗВ63") 
			ИЛИ ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства") 
			ИЛИ ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.УдалитьПередачаСЗВ4вПФР") 
			ИЛИ ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.УдалитьСправкаПоНДФЛВНалоговыйОрган") Тогда
			Объект.Предмет = КонвертироватьДанные(Выборка.Предмет, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЦиклыОбмена(СоответствиеКонвертированныхОбъектов)
	
	Выборка = Справочники.ЦиклыОбмена.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.ПолучитьОбъект();
		
		Если (
			ТипЗнч(Объект.ВнешняяОрганизация) = Тип("СправочникСсылка.УдалитьОрганыПФР") 
			ИЛИ ТипЗнч(Объект.ВнешняяОрганизация) = Тип("СправочникСсылка.УдалитьНалоговыеОрганы")
			)
			И ЗначениеЗаполнено(Выборка.ВнешняяОрганизация) Тогда 
			Объект.ВнешняяОрганизация = КонвертироватьДанные(Выборка.ВнешняяОрганизация, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Если ТипЗнч(Объект.УчетнаяЗапись) = Тип("СправочникСсылка.УдалитьУчетныеЗаписиДокументооборота") Тогда 
			Объект.УчетнаяЗапись = КонвертироватьДанные(Выборка.УчетнаяЗапись, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Если (ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.УдалитьЭлектронныеПредставленияРегламентированныхОтчетов")
			ИЛИ ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.УдалитьПерепискаСКонтролирующимиОрганами")
			ИЛИ ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика")
			ИЛИ ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.УдалитьДокументыРеализацииПолномочийНалоговыхОрганов"))
			И ЗначениеЗаполнено(Выборка.Предмет) Тогда 
			Объект.Предмет = КонвертироватьДанные(Выборка.Предмет, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Если ТипЗнч(Объект.ВидОтчета) = Тип("СправочникСсылка.УдалитьВидыОтправляемыхДокументов") Тогда 
			Объект.ВидОтчета = КонвертироватьДанные(Выборка.ВидОтчета, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Если ТипЗнч(Объект.ФорматОтвета) = Тип("ПеречислениеСсылка.ФорматОтветаНаЗапросИОН") Тогда 
			Объект.ФорматОтвета = КонвертироватьДанные(Выборка.ФорматОтвета, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Если ТипЗнч(Объект.Тип) = Тип("ПеречислениеСсылка.ТипыЦикловОбмена") Тогда 
			Объект.Тип = КонвертироватьДанные(Выборка.Тип, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Если ТипЗнч(Объект.Вид) = Тип("ПеречислениеСсылка.УдалитьВидыЦикловОбмена") Тогда 
			Объект.Вид = КонвертироватьДанные(Выборка.Вид, СоответствиеКонвертированныхОбъектов);
		ИначеЕсли Объект.Вид = Неопределено Тогда 
			Объект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФСГС;
		КонецЕсли;
		
		Если ТипЗнч(Объект.ФорматДокументооборота) = Тип("ПеречислениеСсылка.УдалитьФорматыДокументооборотаСФНС") Тогда
			Объект.ФорматДокументооборота = КонвертироватьДанные(Выборка.ФорматДокументооборота, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Для Каждого ТекущаяСтрока Из Объект.ДополнительныеПредметы Цикл 
			Если (ТипЗнч(ТекущаяСтрока.Предмет) = Тип("СправочникСсылка.УдалитьЭлектронныеПредставленияРегламентированныхОтчетов")
				ИЛИ ТипЗнч(ТекущаяСтрока.Предмет) = Тип("СправочникСсылка.УдалитьПерепискаСКонтролирующимиОрганами")
				ИЛИ ТипЗнч(ТекущаяСтрока.Предмет) = Тип("ДокументСсылка.УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика")
				ИЛИ ТипЗнч(ТекущаяСтрока.Предмет) = Тип("СправочникСсылка.УдалитьДокументыРеализацииПолномочийНалоговыхОрганов"))
				И ЗначениеЗаполнено(ТекущаяСтрока.Предмет) Тогда 
				ТекущаяСтрока.Предмет = КонвертироватьДанные(ТекущаяСтрока.Предмет, СоответствиеКонвертированныхОбъектов);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекущаяСтрока Из Объект.ДополнительныеПредметы Цикл 
			Если (ТипЗнч(ТекущаяСтрока.Предмет) = Тип("ДокументСсылка.УдалитьПередачаДСВвПФР")
				ИЛИ ТипЗнч(ТекущаяСтрока.Предмет) = Тип("ДокументСсылка.УдалитьСведенияОВзносахИСтраховомСтажеСПВ1")
				ИЛИ ТипЗнч(ТекущаяСтрока.Предмет) = Тип("ДокументСсылка.УдалитьАнкетаЗастрахованногоЛица")
				ИЛИ ТипЗнч(ТекущаяСтрока.Предмет) = Тип("ДокументСсылка.УдалитьСведенияОНачисленномЗаработкеСЗВ63")
				ИЛИ ТипЗнч(ТекущаяСтрока.Предмет) = Тип("ДокументСсылка.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства")
				ИЛИ ТипЗнч(ТекущаяСтрока.Предмет) = Тип("ДокументСсылка.УдалитьПередачаСЗВ4вПФР")
				ИЛИ ТипЗнч(ТекущаяСтрока.Предмет) = Тип("ДокументСсылка.УдалитьСправкаПоНДФЛВНалоговыйОрган"))
				И ЗначениеЗаполнено(ТекущаяСтрока.Предмет) Тогда 
				ТекущаяСтрока.Предмет = КонвертироватьДанные(ТекущаяСтрока.Предмет, СоответствиеКонвертированныхОбъектов);
			КонецЕсли;
		КонецЦикла;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТранспортноеСообщение(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТранспортноеСообщение.Отправитель КАК Отправитель,
	               |	ТранспортноеСообщение.Получатель КАК Получатель,
	               |	ТранспортноеСообщение.УчетнаяЗапись КАК УчетнаяЗапись,
	               |	ТранспортноеСообщение.Тип КАК Тип,
	               |	ТранспортноеСообщение.Ссылка
	               |ИЗ
	               |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	               |ГДЕ
	               |	(ТранспортноеСообщение.Отправитель ССЫЛКА Справочник.УдалитьНалоговыеОрганы
	               |			ИЛИ ТранспортноеСообщение.Отправитель ССЫЛКА Справочник.УдалитьОрганыПФР
	               |			ИЛИ ТранспортноеСообщение.Отправитель ССЫЛКА Справочник.УдалитьСерверыДокументооборота
	               |			ИЛИ ТранспортноеСообщение.Получатель ССЫЛКА Справочник.УдалитьНалоговыеОрганы
	               |			ИЛИ ТранспортноеСообщение.Получатель ССЫЛКА Справочник.УдалитьОрганыПФР
	               |			ИЛИ ТранспортноеСообщение.Получатель ССЫЛКА Справочник.УдалитьСерверыДокументооборота
	               |			ИЛИ ТранспортноеСообщение.УчетнаяЗапись ССЫЛКА Справочник.УдалитьУчетныеЗаписиДокументооборота)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТранспортноеСообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(Выборка.УчетнаяЗапись) Тогда
			ТранспортноеСообщениеОбъект.УчетнаяЗапись = КонвертироватьДанные(Выборка.УчетнаяЗапись, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Отправитель) Тогда
			ТранспортноеСообщениеОбъект.Отправитель = КонвертироватьДанные(Выборка.Отправитель, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Получатель) Тогда
			ТранспортноеСообщениеОбъект.Получатель = КонвертироватьДанные(Выборка.Получатель, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.УчетнаяЗапись) Тогда
			ТранспортноеСообщениеОбъект.УчетнаяЗапись = КонвертироватьДанные(Выборка.УчетнаяЗапись, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Тип) Тогда
			ТранспортноеСообщениеОбъект.Тип = КонвертироватьДанные(Выборка.Тип, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
		//ТранспортноеСообщениеОбъект.Записать();
		Попытка
			ТранспортноеСообщениеОбъект.ОбменДанными.Загрузка = Истина;
			ТранспортноеСообщениеОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьОшибку(ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПользователиУчетныхЗаписейДокументооборота(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись,
	               |	ПользователиУчетныхЗаписейДокументооборота.Пользователь
	               |ИЗ
	               |	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
	               |ГДЕ
	               |	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись ССЫЛКА Справочник.УдалитьУчетныеЗаписиДокументооборота";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Запись = РегистрыСведений.ПользователиУчетныхЗаписейДокументооборота.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		Запись.УчетнаяЗапись = Выборка.УчетнаяЗапись;
		Запись.Пользователь	 = Выборка.Пользователь;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда 
			Запись.УчетнаяЗапись = КонвертироватьДанные(Выборка.УчетнаяЗапись, СоответствиеКонвертированныхОбъектов);
			Запись.Пользователь	 = Выборка.Пользователь;
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыОтправкиПриПереходеС20(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыОтправки.Объект,
	               |	СтатусыОтправки.Основание
	               |ИЗ
	               |	РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
	               |ГДЕ
	               |	(СтатусыОтправки.Объект ССЫЛКА Документ.УдалитьПередачаДСВвПФР
	               |			ИЛИ СтатусыОтправки.Объект ССЫЛКА Документ.УдалитьСведенияОВзносахИСтраховомСтажеСПВ1
	               |			ИЛИ СтатусыОтправки.Объект ССЫЛКА Документ.УдалитьАнкетаЗастрахованногоЛица
	               |			ИЛИ СтатусыОтправки.Объект ССЫЛКА Документ.УдалитьСведенияОНачисленномЗаработкеСЗВ63
	               |			ИЛИ СтатусыОтправки.Объект ССЫЛКА Документ.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства
	               |			ИЛИ СтатусыОтправки.Объект ССЫЛКА Документ.УдалитьПередачаСЗВ4вПФР
	               |			ИЛИ СтатусыОтправки.Объект ССЫЛКА Документ.УдалитьСправкаПоНДФЛВНалоговыйОрган)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Запись = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		Запись.Объект	 = Выборка.Объект;
		//Запись.Основание = Выборка.Основание;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда 
			Объект = КонвертироватьДанные(Выборка.Объект, СоответствиеКонвертированныхОбъектов);
			Если ЗначениеЗаполнено(Объект) Тогда
				Запись.Объект = Объект;
			КонецЕсли;
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыОтправки(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыОтправки.Объект,
	               |	СтатусыОтправки.Основание
	               |ИЗ
	               |	РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
	               |ГДЕ
	               |	(СтатусыОтправки.Основание ССЫЛКА Справочник.УдалитьОтправкиФСС
				   |			ИЛИ СтатусыОтправки.Объект ССЫЛКА Справочник.УдалитьЭлектронныеПредставленияРегламентированныхОтчетов
				   |			ИЛИ СтатусыОтправки.Объект ССЫЛКА Документ.УдалитьЗапросНаИнформационноеОбслуживаниеНалогоплательщика
				   |			ИЛИ СтатусыОтправки.Объект ССЫЛКА Справочник.УдалитьПерепискаСКонтролирующимиОрганами
				   |			ИЛИ СтатусыОтправки.Объект ССЫЛКА Справочник.УдалитьДокументыРеализацииПолномочийНалоговыхОрганов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Запись = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		Запись.Объект	 = Выборка.Объект;
		//Запись.Основание = Выборка.Основание;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда 
			Запись.Объект	 = КонвертироватьДанные(Выборка.Объект, СоответствиеКонвертированныхОбъектов);
			Запись.Основание = КонвертироватьДанные(Выборка.Основание, СоответствиеКонвертированныхОбъектов);
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСодержимоеТранспортныхКонтейнеров(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение,
	               |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
	               |	СодержимоеТранспортныхКонтейнеров.Тип,
	               |	СодержимоеТранспортныхКонтейнеров.ТипФайлаОтчетностиПФР,
	               |	СодержимоеТранспортныхКонтейнеров.ТипСодержимогоФайла
	               |ИЗ
	               |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	               |ГДЕ
	               |	(СодержимоеТранспортныхКонтейнеров.Тип В (&Тип)
	               |			ИЛИ СодержимоеТранспортныхКонтейнеров.ТипФайлаОтчетностиПФР ССЫЛКА Перечисление.УдалитьТипыФайловОтчетностиПФР
	               |			ИЛИ СодержимоеТранспортныхКонтейнеров.ТипСодержимогоФайла ССЫЛКА Перечисление.УдалитьТипыСодержимогоФайлов)";
	
	ТипыСодержимого = Новый Массив;
	ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьДокумент);
	ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьЗаявление);
	ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьКвитанцияОПриемеДокумент);
	ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьКвитанцияОПриемеЗаявления);
	ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьОписаниеДокумент);
	ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьОписаниеСведенийЗаявление);
	ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьСообщениеОбОтзывеЗаявления);
	ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьСообщениеОНесоответствиях);
	ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьСообщениеОПроверке);
	ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УдалитьУведомлениеОбОтказеДокумент);
	Запрос.УстановитьПараметр("Тип", ТипыСодержимого);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Запись = РегистрыСведений.СодержимоеТранспортныхКонтейнеров.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		Запись.ТранспортноеСообщение = Выборка.ТранспортноеСообщение;
		Запись.ИмяФайла = Выборка.ИмяФайла;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда 
			Запись.Тип = КонвертироватьДанные(Выборка.Тип, СоответствиеКонвертированныхОбъектов);
			Запись.ТипФайлаОтчетностиПФР = КонвертироватьДанные(Выборка.ТипФайлаОтчетностиПФР, СоответствиеКонвертированныхОбъектов);
			Запись.ТипСодержимогоФайла = КонвертироватьДанные(Выборка.ТипСодержимогоФайла, СоответствиеКонвертированныхОбъектов);
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗаявлениеАбонентаСпецоператораСвязиПриПереходеС20(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка,
	               |	ЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦПВидДокумента
	               |ИЗ
	               |	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
	               |ГДЕ
	               |	ЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦПВидДокумента ССЫЛКА Справочник.УдалитьДокументыУдостоверяющиеЛичность";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Выборка.ВладелецЭЦПВидДокумента) Тогда
			Объект.ВладелецЭЦПВидДокумента = КонвертироватьДанные(Выборка.ВладелецЭЦПВидДокумента, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Блок переноса данных ЭДО при обновлении
//
////////////////////////////////////////////////////////////////////////////////
