///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Подключение 1С-Такском".
// ОбщийМодуль.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет получение в сервисе 1С-Такском уникального идентификатора абонента
// электронного документооборота.
//
// Параметры:
//	СертификатЭП - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат
//		электронной подписи;
//	Организация - Произвольный - организация, с которой связан сертификат,
//		используется для заполнения данных организации в заявке на получение
//		идентификатора абонента (см. Подключение1СТакскомПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации());
//	ОповещениеОЗавершении - ОписаниеОповещения - обработчик, в который
//		передается результат получения идентификатора.
//		Передаваемое значение:
//			Строка - полученный идентификатор абонента;
//			Неопределено - если, идентификатор абонента не был получен.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//		Поля:
//		* ОбработчикСтатусаЗаявки (не обязательное) - ОписаниеОповещения - вызывается взамен открытия
//			стандартной формы "Статус заявки".
//			В обработчик передается параметр Структура с полями:
//			** СтатусЗаявки - Строка - статус текущей заявки:
//				- "Отсутствует" - заявка не создавалась;
//				- "ОжиданиеОбработки" - заявка создана, но еще не обработана;
//				- "Отклонена" - заявка отклонена;
//				- "Обработана" - заявка успешно обработана;
//			** НомерЗаявки - Строка - номер заявки;
//			** КодОшибки - Строка - код ошибки в сервисе Такском;
//			** ОписаниеОшибки - Строка - описание ошибки обработки последней заявки. <Пустая строка>, если ошибки нет;
//			** ДанныеЗаявки - Структура, Неопределено - данные текущей заявки:
//				*** ИдентификаторАбонента - Строка - идентификатор абонента Такском;
//				*** ОтпечатокСертификата - Строка - отпечаток  сертификата в виде base64-строки,
//					указанного при регистрации заявки;
//				*** Индекс - Строка - почтовый индекс организации;
//				*** КодРегиона - Строка - код региона в адресе организации;
//				*** Район - Строка - Район;
//				*** Город - Строка - Город;
//				*** НаселенныйПункт - Строка - населенный пункт расположения организации;
//				*** Улица - Строка - Улица;
//				*** Дом - Строка - Дом;
//				*** Корпус - Строка - Корпус;
//				*** Квартира - Строка - Квартира;
//				*** Телефон - Строка - телефон организации;
//				*** НаименованиеОрганизации - Строка - наименование организации;
//				*** ИНН - Строка - ИНН организации;
//				*** КПП - Строка - КПП организации;
//				*** ОГРН - Строка - ОГРН организации;
//				*** КодНалоговогоОргана - Строка - код ИМНС организации;
//				*** ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо";
//				*** Фамилия - Строка - фамилия руководителя;
//				*** Имя - Строка - имя руководителя;
//				*** Отчество - Строка - отчество руководителя;
//			** ОбработчикРезультата - ОписаниеОповещения - обработчик, который должен быть вызван при
//				завершении выполнения метода. В обработчик передается результат выполнения метода.
//				Структура с полями:
//				*** Действие - Строка - описание действия, которое необходимо выполнить для продолжения бизнес-процесса.
//					Возможные значения:
//					- "СтандартнаяОбработка" - обработать стандартным способом (показать форму "Статус заявки");
//					- "Завершить" - завершить бизнес-процесс (освободить ресурсы);
//					- "НоваяЗаявка" - создать новую заявку;
//					- "ПроверитьСтатусЗаявки" - проверить статус обработки заявки
//						(только для СтатусЗаявки = "ОжиданиеОбработки");
//		* ОбработчикСозданияЗаявки (не обязательное) - ОписаниеОповещения - вызывается взамен открытия
//			стандартной формы "Заявка на регистрацию участника обмена ЭД".
//			В обработчик передается параметр Структура с полями:
//			** ИдентификаторАбонента - Строка - идентификатор абонента Такском;
//			** ДанныеЗаявки - Структура - предзаполненные данные заявки.
//				Структура с полями:
//				*** ИдентификаторАбонента - Строка - идентификатор абонента Такском;
//				*** ОтпечатокСертификата - Строка - отпечаток  сертификата в виде base64-строки,
//					указанного при регистрации заявки;
//				*** Индекс - Строка - почтовый индекс организации;
//				*** КодРегиона - Строка - код региона в адресе организации;
//				*** Район - Строка - Район;
//				*** Город - Строка - Город;
//				*** НаселенныйПункт - Строка - населенный пункт расположения организации;
//				*** Улица - Строка - Улица;
//				*** Дом - Строка - Дом;
//				*** Корпус - Строка - Корпус;
//				*** Квартира - Строка - Квартира;
//				*** Телефон - Строка - телефон организации;
//				*** НаименованиеОрганизации - Строка - наименование организации;
//				*** ИНН - Строка - ИНН организации;
//				*** КПП - Строка - КПП организации;
//				*** ОГРН - Строка - ОГРН организации;
//				*** КодНалоговогоОргана - Строка - код ИМНС организации;
//				*** ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо";
//				*** Фамилия - Строка - фамилия руководителя;
//				*** Имя - Строка - имя руководителя;
//				*** Отчество - Строка - отчество руководителя;
//			** ОбработчикРезультата - ОписаниеОповещения - обработчик, который должен быть вызван
//				при завершении выполнения метода. В обработчик передается результат выполнения метода.
//				Структура с полями:
//				*** Действие - Строка - действие, которое должно быть выполнено.
//					Возможные значения:
//					- "СтандартнаяОбработка" - обработать стандартным способом
//						(открыть стандартную форму создания заявки);
//					- "Завершить" - завершить бизнес-процесс (освободить ресурсы);
//					- "ОтправитьЗаявку" - отправить данные заявки (необходимо передать данные заявки);
//				*** ДанныеЗаявки - Структура - см. поле ДанныеЗаявки параметра обработчика оповещения.
//
Процедура ПолучитьУникальныйИдентификаторАбонента(
	СертификатЭП,
	Организация,
	ОповещениеОЗавершении = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(СертификатЭП) <> Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")
		Или СертификатЭП.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра ""СертификатЭП"".'");
	КонецЕсли;
	
	ПараметрыЭДО = Новый Структура;
	ПараметрыЭДО.Вставить("IDCertificateED"   , СертификатЭП);
	ПараметрыЭДО.Вставить("IDOrganizationED"  , Организация);
	ПараметрыЭДО.Вставить("identifierTaxcomED", "");
	ПараметрыЭДО.Вставить("ToAddCert"         , "NO");
	
	ОбработчикиСобытийБизнесПроцесса = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ОбработчикСтатусаЗаявки") Тогда
			ОбработчикиСобытийБизнесПроцесса.Вставить("СтатусЗаявки", ДополнительныеПараметры.ОбработчикСтатусаЗаявки);
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ОбработчикСозданияЗаявки") Тогда
			ОбработчикиСобытийБизнесПроцесса.Вставить("СозданиеЗаявки", ДополнительныеПараметры.ОбработчикСозданияЗаявки);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметрыСценария = Новый Структура(
		"ОбработчикЗавершения, ОбработчикиСобытийБизнесПроцесса",
		ОповещениеОЗавершении,
		ОбработчикиСобытийБизнесПроцесса);
	
	ВыполнитьСценарий(
		"taxcomGetID",
		ПараметрыЭДО,
		,
		ДополнительныеПараметрыСценария);
	
КонецПроцедуры

// Выполняет регистрацию в сервисе 1С-Такском нового сертификата абонента
// электронного документооборота.
//
// Параметры:
//	СертификатЭП - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат
//		электронной подписи;
//	ИдентификаторАбонента - Строка - уникальный идентификатор абонента,
//		для которого регистрируется сертификат;
//	Организация - Произвольный - организация, с которой связан сертификат,
//		используется для заполнения данных организации в заявке на регистрацию
//		сертификата (см. Подключение1СТакскомПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации());
//	ОповещениеОЗавершении - ОписаниеОповещения - обработчик, в который
//		передается результат регистрации сертификата.
//		Передаваемое значение:
//			Булево - результат регистрации сертификата. Истина - если
//				сертификат зарегистрирован успешно, Ложь - в противном случае.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//		Поля:
//		* ОбработчикСтатусаЗаявки (не обязательное) - ОписаниеОповещения - вызывается взамен открытия
//			стандартной формы "Статус заявки".
//			В обработчик передается параметр Структура с полями:
//			** СтатусЗаявки - Строка - статус текущей заявки:
//				- "Отсутствует" - заявка не создавалась;
//				- "ОжиданиеОбработки" - заявка создана, но еще не обработана;
//				- "Отклонена" - заявка отклонена;
//				- "Обработана" - заявка успешно обработана;
//			** НомерЗаявки - Строка - номер заявки;
//			** КодОшибки - Строка - код ошибки в сервисе Такском;
//			** ОписаниеОшибки - Строка - описание ошибки обработки последней заявки. <Пустая строка>, если ошибки нет;
//			** ДанныеЗаявки - Структура, Неопределено - данные текущей заявки:
//				*** ИдентификаторАбонента - Строка - идентификатор абонента Такском;
//				*** ОтпечатокСертификата - Строка - отпечаток  сертификата в виде base64-строки,
//					указанного при регистрации заявки;
//				*** Индекс - Строка - почтовый индекс организации;
//				*** КодРегиона - Строка - код региона в адресе организации;
//				*** Район - Строка - Район;
//				*** Город - Строка - Город;
//				*** НаселенныйПункт - Строка - населенный пункт расположения организации;
//				*** Улица - Строка - Улица;
//				*** Дом - Строка - Дом;
//				*** Корпус - Строка - Корпус;
//				*** Квартира - Строка - Квартира;
//				*** Телефон - Строка - телефон организации;
//				*** НаименованиеОрганизации - Строка - наименование организации;
//				*** ИНН - Строка - ИНН организации;
//				*** КПП - Строка - КПП организации;
//				*** ОГРН - Строка - ОГРН организации;
//				*** КодНалоговогоОргана - Строка - код ИМНС организации;
//				*** ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо";
//				*** Фамилия - Строка - фамилия руководителя;
//				*** Имя - Строка - имя руководителя;
//				*** Отчество - Строка - отчество руководителя;
//			** ОбработчикРезультата - ОписаниеОповещения - обработчик, который должен быть вызван при
//				завершении выполнения метода. В обработчик передается результат выполнения метода.
//				Структура с полями:
//				*** Действие - Строка - описание действия, которое необходимо выполнить для продолжения бизнес-процесса.
//					Возможные значения:
//					- "СтандартнаяОбработка" - обработать стандартным способом (показать форму "Статус заявки");
//					- "Завершить" - завершить бизнес-процесс (освободить ресурсы);
//					- "НоваяЗаявка" - создать новую заявку;
//					- "ПроверитьСтатусЗаявки" - проверить статус обработки заявки
//						(только для СтатусЗаявки = "ОжиданиеОбработки");
//		* ОбработчикСозданияЗаявки (не обязательное) - ОписаниеОповещения - вызывается взамен открытия
//			стандартной формы "Заявка на регистрацию участника обмена ЭД".
//			В обработчик передается параметр Структура с полями:
//			** ИдентификаторАбонента - Строка - идентификатор абонента Такском;
//			** ДанныеЗаявки - Структура - предзаполненные данные заявки.
//				Структура с полями:
//				*** ИдентификаторАбонента - Строка - идентификатор абонента Такском;
//				*** ОтпечатокСертификата - Строка - отпечаток  сертификата в виде base64-строки,
//					указанного при регистрации заявки;
//				*** Индекс - Строка - почтовый индекс организации;
//				*** КодРегиона - Строка - код региона в адресе организации;
//				*** Район - Строка - Район;
//				*** Город - Строка - Город;
//				*** НаселенныйПункт - Строка - населенный пункт расположения организации;
//				*** Улица - Строка - Улица;
//				*** Дом - Строка - Дом;
//				*** Корпус - Строка - Корпус;
//				*** Квартира - Строка - Квартира;
//				*** Телефон - Строка - телефон организации;
//				*** НаименованиеОрганизации - Строка - наименование организации;
//				*** ИНН - Строка - ИНН организации;
//				*** КПП - Строка - КПП организации;
//				*** ОГРН - Строка - ОГРН организации;
//				*** КодНалоговогоОргана - Строка - код ИМНС организации;
//				*** ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо";
//				*** Фамилия - Строка - фамилия руководителя;
//				*** Имя - Строка - имя руководителя;
//				*** Отчество - Строка - отчество руководителя;
//			** ОбработчикРезультата - ОписаниеОповещения - обработчик, который должен быть вызван
//				при завершении выполнения метода. В обработчик передается результат выполнения метода.
//				Структура с полями:
//				*** Действие - Строка - действие, которое должно быть выполнено.
//					Возможные значения:
//					- "СтандартнаяОбработка" - обработать стандартным способом
//						(открыть стандартную форму создания заявки);
//					- "Завершить" - завершить бизнес-процесс (освободить ресурсы);
//					- "ОтправитьЗаявку" - отправить данные заявки (необходимо передать данные заявки);
//				*** ДанныеЗаявки - Структура - см. поле ДанныеЗаявки параметра обработчика оповещения.
//
Процедура ЗарегистрироватьСертификатАбонента(
	СертификатЭП,
	ИдентификаторАбонента,
	Организация,
	ОповещениеОЗавершении = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(СертификатЭП) <> Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")
		Или СертификатЭП.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра ""СертификатЭП"".'");
	ИначеЕсли ТипЗнч(ИдентификаторАбонента) <> Тип("Строка") Или ПустаяСтрока(ИдентификаторАбонента) Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра ""ИдентификаторАбонента"".'");
	КонецЕсли;
	
	ПараметрыЭДО = Новый Структура;
	ПараметрыЭДО.Вставить("IDCertificateED"   , СертификатЭП);
	ПараметрыЭДО.Вставить("IDOrganizationED"  , Организация);
	ПараметрыЭДО.Вставить("identifierTaxcomED", ИдентификаторАбонента);
	ПараметрыЭДО.Вставить("ToAddCert"         , "YES");
	
	ОповещениеОЗавершенииБизнесПроцесса = Новый ОписаниеОповещения(
		"ЗарегистрироватьСертификатАбонентаЗавершение",
		ЭтотОбъект,
		ОповещениеОЗавершении);
	
	ОбработчикиСобытийБизнесПроцесса = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ОбработчикСтатусаЗаявки") Тогда
			ОбработчикиСобытийБизнесПроцесса.Вставить("СтатусЗаявки", ДополнительныеПараметры.ОбработчикСтатусаЗаявки);
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ОбработчикСозданияЗаявки") Тогда
			ОбработчикиСобытийБизнесПроцесса.Вставить("СозданиеЗаявки", ДополнительныеПараметры.ОбработчикСозданияЗаявки);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметрыСценария = Новый Структура(
		"ОбработчикЗавершения, ОбработчикиСобытийБизнесПроцесса",
		ОповещениеОЗавершенииБизнесПроцесса,
		ОбработчикиСобытийБизнесПроцесса);
	
	ВыполнитьСценарий(
		"taxcomGetID",
		ПараметрыЭДО,
		,
		ДополнительныеПараметрыСценария);
	
КонецПроцедуры

// Открывает личный кабинет абонента сервиса 1С-Такском.
//
// Параметры:
//	СертификатЭП - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат
//		электронной подписи, связанный с абонентом;
//
Процедура ОткрытьЛичныйКабинетАбонента(СертификатЭП) Экспорт
	
	Если ТипЗнч(СертификатЭП) <> Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")
		Или СертификатЭП.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра ""СертификатЭП"".'");
	КонецЕсли;
	
	ПараметрыЭДО = Новый Структура;
	ПараметрыЭДО.Вставить("IDCertificateED"   , СертификатЭП);
	ПараметрыЭДО.Вставить("IDOrganizationED"  , "");
	ПараметрыЭДО.Вставить("identifierTaxcomED", "");
	ПараметрыЭДО.Вставить("ToAddCert"         , "NO");
	
	ВыполнитьСценарий("taxcomPrivat", ПараметрыЭДО);
	
КонецПроцедуры

// Определяет, зарегистрирована ли текущая конфигурация в сервисе
// Интернет-поддержки.
// Проверка выполняется по значению свойства Метаданные.Имя.
//
// Параметры:
//	ОшибкаОбращенияКВебСервису - Булево - в параметре возвращается Истина,
//		если в процессе обращения к сервису ИПП произошла ошибка
//		и "зарегистрированность" конфигурации проверить не удалось;
//
// Возвращаемое значение:
//	Булево - Истина, если конфигурация зарегистрирована в сервисе ИПП,
//		Ложь - если не зарегистрирована или в процессе обращения к сервису ИПП
//			произошла ошибка;
//
Функция КонфигурацияЗарегистрированаВСервисе1СТакском(ОшибкаОбращенияКВебСервису = Ложь) Экспорт
	
	Возврат Подключение1СТакскомВызовСервера.КонфигурацияЗарегистрированаВСервисеИПП(
		ОшибкаОбращенияКВебСервису);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработка переопределяемого события статуса заявки.
//
Процедура ПриПолученииРезультатаСтатусаЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимый тип значения параметра Результат (%1).
				|Ожидается тип Структура.'"),
			Строка(ТипЗнч(Результат)));
	КонецЕсли;
	
	КонтекстВзаимодействия = ДополнительныеПараметры.КонтекстВзаимодействия;
	КонтекстОбработчика    = ДополнительныеПараметры.КонтекстОбработчика;
	Если Результат.Действие = "СтандартнаяОбработка" Тогда
		
		КонтекстОбработчика.Команды.Вставить(0, ДополнительныеПараметры.СтруктураКоманды);
		ОбработкаКомандСервиса(
			КонтекстВзаимодействия,
			Неопределено,
			Неопределено,
			ДополнительныеПараметры.КонтекстОбработчика,
			Новый Структура("ПродолжитьВыполнение, ТолькоСтандартнаяОбработка", Истина, Истина));
		
	ИначеЕсли Результат.Действие = "Завершить" Тогда
		
		ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		
	ИначеЕсли Результат.Действие = "НоваяЗаявка" Тогда
		
		Если ДополнительныеПараметры.СтатусЗаявки <> "Отклонена"
			И ДополнительныеПараметры.СтатусЗаявки <> "Отсутствует" Тогда
			
			ТекстИсключения =
				НСтр("ru = 'Недопустимое значение параметра Действие. Новая заявка может быть создана только
					|при текущем состоянии заявки ""Отсутствует"" или ""Отклонена"".'");
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
		
		ОбработатьКомандуФормы(
			КонтекстВзаимодействия,
			Неопределено,
			"newApplicationED");
		
	ИначеЕсли Результат.Действие = "ПроверитьСтатусЗаявки" Тогда
		
		Если ДополнительныеПараметры.СтатусЗаявки <> "ОжиданиеОбработки" Тогда
			
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недопустимое значение параметра Действие. Состояние выполнения заявки не может быть проверено,
					|т.к. заявка находится в состоянии ""%1"".'"),
				ДополнительныеПараметры.СтатусЗаявки);
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
		
		ОбработатьКомандуФормы(
			КонтекстВзаимодействия,
			Неопределено,
			"getApplicationStatus");
		
	Иначе
		
		// Неизвестное действие.
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение параметра Действие: ""%1"".'"),
			Результат.Действие);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка переопределяемого события создания заявки.
//
Процедура ПриПолученииРезультатаСозданияЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимый тип значения параметра Результат (%1).
				|Ожидается тип Структура.'"),
			Строка(ТипЗнч(Результат)));
	КонецЕсли;
	
	КонтекстВзаимодействия = ДополнительныеПараметры.КонтекстВзаимодействия;
	КонтекстОбработчика    = ДополнительныеПараметры.КонтекстОбработчика;
	Если Результат.Действие = "СтандартнаяОбработка" Тогда
		
		КонтекстОбработчика.Команды.Вставить(0, ДополнительныеПараметры.СтруктураКоманды);
		ОбработкаКомандСервиса(
			КонтекстВзаимодействия,
			Неопределено,
			Неопределено,
			ДополнительныеПараметры.КонтекстОбработчика,
			Новый Структура("ПродолжитьВыполнение, ТолькоСтандартнаяОбработка", Истина, Истина));
		
	ИначеЕсли Результат.Действие = "Завершить" Тогда
		
		ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		
	ИначеЕсли Результат.Действие = "ОтправитьЗаявку" Тогда
		
		Если Не Результат.Свойство("ДанныеЗаявки") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра Результат. Отсутствует поле ДанныеЗаявки.'");
		КонецЕсли;
		
		ДанныеЗаявки = Результат.ДанныеЗаявки;
		Если ТипЗнч(ДанныеЗаявки) <> Тип("Структура") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недопустимый тип значения параметра Результат.ДанныеЗаявки (%1).
					|Ожидается тип Структура.'"),
				Строка(ТипЗнч(ДанныеЗаявки)));
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Массив;
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "endForm"           , "send"));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "postindexED"       , ДанныеЗаявки.Индекс));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "codregionED"       , ДанныеЗаявки.КодРегиона));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addresstownshipED" , ДанныеЗаявки.Район));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addresscityED"     , ДанныеЗаявки.Город));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addresslocalityED" , ДанныеЗаявки.НаселенныйПункт));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addressstreetED"   , ДанныеЗаявки.Улица));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addressbuildingED" , ДанныеЗаявки.Дом));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addresshousingED"  , ДанныеЗаявки.Корпус));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addressapartmentED", ДанныеЗаявки.Квартира));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addressphoneED"    , ДанныеЗаявки.Телефон));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "agencyED"          , ДанныеЗаявки.НаименованиеОрганизации));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "innED"             , ДанныеЗаявки.ИНН));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "kppED"             , ДанныеЗаявки.КПП));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "ogrnED"            , ДанныеЗаявки.ОГРН));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "codeimnsED"        , ДанныеЗаявки.КодНалоговогоОргана));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "lastnameED"        , ДанныеЗаявки.Фамилия));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "firstnameED"       , ДанныеЗаявки.Имя));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "middlenameED"      , ДанныеЗаявки.Отчество));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "identifierTaxcomED", ДанныеЗаявки.ИдентификаторАбонента));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "orgindED"          , ДанныеЗаявки.ЮрФизЛицо));
		
		СертификатЭП = ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"IDCertificateED");
		
		ПредставлениеСертификата  = "";
		ДвоичныеДанныеСертификата = Подключение1СТакскомВызовСервера.ДвоичныеДанныеСертификата(
			СертификатЭП,
			ПредставлениеСертификата);
		
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "nameCertificateED", ПредставлениеСертификата));
		
		Если ДвоичныеДанныеСертификата <> Неопределено Тогда
			
			СтрокаBase64 = Base64Строка(ДвоичныеДанныеСертификата);
			ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "certificateED", СтрокаBase64));
			
		КонецЕсли;
		
		ОбработкаКомандСервиса(
			КонтекстВзаимодействия,
			Неопределено,
			ПараметрыЗапроса);
		
	Иначе
		
		// Неизвестное действие.
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение параметра ""Действие"": ""%1"".'"),
			Результат.Действие);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

// Преобразует информацию о завершении бизнес-процесса для потребителя
// программного интерфейса.
//
Процедура ЗарегистрироватьСертификатАбонентаЗавершение(Результат, ОбработчикЗавершения) Экспорт
	
	Если ОбработчикЗавершения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Истина Тогда
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Истина);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Расшифрование маркера, возвращенного сервисом ИПП для подтверждения
// подлинности владельца сертификата. Кодограмма хранится в сессионном параметре
// с именем "markerED".
//
// Параметры:
// КонтекстВзаимодействия - Структура - см. функцию
//		Подключение1СТакскомВызовСервера.НовыйКонтекстВзаимодействия()
// СтруктураКоманды Структура - данные команды сервиса ИПП.
// КонтекстОбработчика - Структура - см. функцию
//		Подключение1СТакскомВызовСервера.НовыйКонтекстОбработчикаКоманд()
// ТекущаяФорма - ФормаКлиентскогоПриложения - текущая форма ИПП.
//
Процедура РасшифроватьКонтрольныйМаркерЭПСервера(
	КонтекстВзаимодействия,
	СтруктураКоманды,
	КонтекстОбработчика,
	ТекущаяФорма)
	
	СообщениеОбОшибкеДляПользователя = НСтр("ru = 'Ошибка при проверке пароля сертификата.
		|Подробнее см. в журнале регистрации.'");
	
	// Получение необходимых сессионных параметров для выполнения операции расшифрования.
	ПараметрыДляРасшифрования = СессионныеПараметрыДляРасшифрования(КонтекстВзаимодействия.КСКонтекст);
	
	Если ПараметрыДляРасшифрования.markerED = Неопределено Тогда
		// Ошибка бизнес-процесса: отсутствует обязательный параметр "markerED".
		ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		Подключение1СТакскомВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка при проверке подлинности владельца сертификата. Отсутствует маркер аутентификации (markerED)'"));
		ПоказатьПредупреждение(, СообщениеОбОшибкеДляПользователя);
		Возврат;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеМаркера = Base64Значение(ПараметрыДляРасшифрования.markerED);
	Исключение
		// Ошибка получения двоичных данных маркера из base64-строки
		ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		СообщениеДляЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при проверке подлинности владельца сертификата. Не удалось получить двоичные данные маркера (markerED).
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Подключение1СТакскомВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеДляЖурналаРегистрации);
		ПоказатьПредупреждение(, СообщениеОбОшибкеДляПользователя);
		Возврат;
	КонецПопытки;
	
	// Получение внутреннего представления ссылки сертификата
	Если ЗначениеЗаполнено(ПараметрыДляРасшифрования.IDCertificateED_Dop) Тогда
		
		// Ссылка дополнительного сертификата
		СертификатЭП = ПараметрыДляРасшифрования.IDCertificateED_Dop;
		
		УдаляемыеПараметры = Новый Массив;
		УдаляемыеПараметры.Добавить(Новый Структура("Имя", "IDCertificateED_Dop"));
		УдалитьПараметрыКонтекста(
			КонтекстВзаимодействия.КСКонтекст,
			УдаляемыеПараметры,
			КонтекстОбработчика);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыДляРасшифрования.IDCertificateED) Тогда
		
		// Ссылка основного сертификата
		СертификатЭП = ПараметрыДляРасшифрования.IDCertificateED;
		
	Иначе
		
		// Не удалось получить ссылку сертификата - завершение бизнес-процесса
		ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		Подключение1СТакскомВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка при проверке подлинности владельца сертификата. Не указан сертификат (IDCertificateED, IDCertificateED_Dop)'"));
		ПоказатьПредупреждение(, СообщениеОбОшибкеДляПользователя);
		Возврат;
		
	КонецЕсли;
	
	// Вызов программного интерфейса СтандартныеПодсистемы.ЭлектроннаяПодпись.
	// Формирование описания данных для расшифрования.
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Проверка пароля сертификата'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных", "");
	
	ОписаниеДанных.Вставить("ЭтоАутентификация"        , Истина);
	ОписаниеДанных.Вставить("Данные"                   , ДвоичныеДанныеМаркера);
	ОписаниеДанных.Вставить("СертификатыШифрования"    , Новый Массив);
	ОписаниеДанных.Вставить("БезПодтверждения"         , Истина);
	ОписаниеДанных.Вставить("СообщитьОЗавершении"      , Ложь);
	ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
	
	ОтборСертификатов = Новый Массив;
	ОтборСертификатов.Добавить(СертификатЭП);
	ОписаниеДанных.Вставить("ОтборСертификатов", ОтборСертификатов);
	
	// Дополнительные параметры для обработчика оповещения
	ДопПараметрыОбработчика = Новый Структура;
	ДопПараметрыОбработчика.Вставить("СтруктураКоманды"      , СтруктураКоманды);
	ДопПараметрыОбработчика.Вставить("КонтекстОбработчика"   , КонтекстОбработчика);
	ДопПараметрыОбработчика.Вставить("ТекущаяФорма"          , ТекущаяФорма);
	ДопПараметрыОбработчика.Вставить("КонтекстВзаимодействия", КонтекстВзаимодействия);
	
	// Вызов программного интерфейса СтандартныеПодсистемы.ЭлектроннаяПодпись
	// для расшифрования контрольного маркера.
	ЭлектроннаяПодписьКлиент.Расшифровать(
		ОписаниеДанных,
		,
		Новый ОписаниеОповещения("РасшифрованиеЗавершение", ЭтотОбъект, ДопПараметрыОбработчика));
	
КонецПроцедуры

// Возвращает сессионные параметры, необходимые для расшифрования
// контрольного маркера ЭП.
//
Функция СессионныеПараметрыДляРасшифрования(КСКонтекст)
	
	Результат = Новый Структура;
	Результат.Вставить("markerED",
		ЗначениеСессионногоПараметра(КСКонтекст, "markerED"));
	Результат.Вставить("IDCertificateED_Dop",
		ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED_Dop"));
	Результат.Вставить("IDCertificateED",
		ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));
	
	Возврат Результат;
	
КонецФункции

// Обработка завершения расшифрования контрольного маркера
Процедура РасшифрованиеЗавершение(РезультатРасшифрования, ДопПараметры) Экспорт
	
	Если РезультатРасшифрования.Успех Тогда
		
		РасшифрованныеДанные = РезультатРасшифрования.РасшифрованныеДанные;
		Если ТипЗнч(РасшифрованныеДанные) = Тип("Строка") Тогда
			// Результат - во временном хранилище.
			РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные);
		КонецЕсли;
		
		// Запись расшифрованного маркера в сессионные параметры.
		Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(
			ДопПараметры.КонтекстВзаимодействия.КСКонтекст,
			"openMarkerED",
			РасшифрованныеДанные,
			"sessionParameter");
		
		// Продолжение выполнения бизнес-процесса
		ОбработкаКомандСервиса(
			ДопПараметры.КонтекстВзаимодействия,
			ДопПараметры.ТекущаяФорма,
			Неопределено,
			ДопПараметры.КонтекстОбработчика,
			Новый Структура("ПродолжитьВыполнение", Истина));
		
	Иначе
		
		// Завершить бизнес-процесс, т.к. дальнейшее продолжение
		// бизнес-процесса невозможно.
		ЗавершитьБизнесПроцесс(ДопПараметры.КонтекстВзаимодействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Просмотр причины отклонения заявки ЭДО в диалоге предупреждения.
//
Процедура ПоказатьПричинуОтклоненияЗаявкиЭДО(КонтекстВзаимодействия) Экспорт
	
	ОписаниеПричины = ПолучитьПричинуОтклоненияЗаявки(КонтекстВзаимодействия);
	
	ТекстСообщения = "";
	Если НЕ ПустаяСтрока(ОписаниеПричины.КодОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Код ошибки: %1'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеПричины.КодОшибки);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеПричины.ТекстОшибки) Тогда
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС;
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + ОписаниеПричины.ТекстОшибки;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеПричины.ТекстОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Неизвестная ошибка. Обратитесь в службу техподдержки.'");
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

// Чтение причины отклонения заявки ЭДО из сессионных параметров.
//
Функция ПолучитьПричинуОтклоненияЗаявки(КонтекстВзаимодействия)
	
	Результат = Новый Структура;
	
	Результат.Вставить("КодОшибки",
		ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"codeErrorED"));
	Результат.Вставить("ТекстОшибки",
		ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"textErrorED"));
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст технических параметров ЭДО для формирования письма в службу
// тех. поддержки.
//
Функция ТекстТехническихПараметровЭДО(КонтекстВзаимодействия, Знач Сертификат = Неопределено) Экспорт
	
	ТехническиеПараметры = НСтр("ru = 'Параметры участника обмена ЭД:
		|
		|- отпечаток сертификата: %1'");
	
	Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
		Сертификат = ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"IDCertificateED");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сертификат) Тогда
		ОтпечатокСертификата = Подключение1СТакскомВызовСервера.ОтпечатокСертификата(Сертификат);
	Иначе
		ОтпечатокСертификата = "";
	КонецЕсли;
	
	ТехническиеПараметры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТехническиеПараметры,
		ОтпечатокСертификата);
	
	КодОшибки = ЗначениеСессионногоПараметра(
		КонтекстВзаимодействия.КСКонтекст,
		"codeErrorED");
	ТекстОшибки = ЗначениеСессионногоПараметра(
		КонтекстВзаимодействия.КСКонтекст,
		"textErrorED");
	
	Если НЕ ПустаяСтрока(КодОшибки) Тогда
		
		СтрДанныхОшибки = Символы.ПС + НСтр("ru = '- код ошибки: %1,
			|- описание ошибки: %2'");
		
		ТехническиеПараметры = ТехническиеПараметры
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтрДанныхОшибки,
				КодОшибки,
				ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ТехническиеПараметры;
	
КонецФункции

// Удаление параметров контекста. Также удаляются общие стартовые параметры.
//
Процедура УдалитьПараметрыКонтекста(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)

	СессионныеПараметры = КСКонтекст.СессионныеПараметры;

	Если ТипЗнч(СтруктураКоманды) = Тип("Структура") Тогда
		Если СтруктураКоманды.Свойство("Параметры") Тогда
			МассивПараметров = СтруктураКоманды.Параметры;
		Иначе
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(СтруктураКоманды);
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтруктураКоманды) = Тип("Массив") Тогда
		МассивПараметров = СтруктураКоманды;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого ПараметрКоманды Из МассивПараметров Цикл

		Если ПараметрКоманды = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СессионныеПараметры.Удалить(ПараметрКоманды.Имя);

	КонецЦикла;

КонецПроцедуры

// Выполнение сценария запуска механизма Интернет-поддержки пользователей.
//
// Параметры:
//	МестоЗапуска - Строка - место запуска механизма, из которого определяется
//		необходимый бизнес-процесс.
//	СтартовыеПараметры - Структура - стартовые параметры механизма.
//		ключ структуры соответствует имени параметра, значение - значению
//		параметра. Состав параметров произвольный;
//	Повторно - Булево - признак того, что механизм запускается из формы ошибки
//		подключения (ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету)
//		кнопкой "Повторить подключение";
//	ДопПараметры - Структура - дополнительные параметры выполнения сценария. Поля:
//		* КонтекстВзаимодействия - Структура, ФиксированнаяСтруктура, Неопределено
//			- готовый контекст для старта бизнес-процесса;
//		* ОбработчикЗавершения - ОписаниеОповещения - обработчик оповещения о
//			завершении бизнес-процесса.
//
Процедура ВыполнитьСценарий(
	МестоЗапуска,
	СтартовыеПараметры = Неопределено,
	Повторно = Ложь,
	ДопПараметры = Неопределено) Экспорт

	КонтекстВзаимодействия = Неопределено;
	ОбработчикЗавершения   = Неопределено;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("КонтекстВзаимодействия") Тогда
			КонтекстВзаимодействия = ДопПараметры.КонтекстВзаимодействия;
		КонецЕсли;
		Если ДопПараметры.Свойство("ОбработчикЗавершения") Тогда
			ОбработчикЗавершения = ДопПараметры.ОбработчикЗавершения;
		КонецЕсли;
		Если ДопПараметры.Свойство("ОбработчикиСобытийБизнесПроцесса") Тогда
			ОбработчикиСобытийБизнесПроцесса = ДопПараметры.ОбработчикиСобытийБизнесПроцесса;
		КонецЕсли;
	КонецЕсли;

	ОбработчикиЗавершенияБизнесПроцесса = Новый Структура(
		"Обработчик, Обработано",
		ОбработчикЗавершения,
		Ложь);

	Если КонтекстВзаимодействия <> Неопределено Тогда

		Если КонтекстВзаимодействия.Свойство("УправляющаяСтруктураЗапуска") Тогда
			ОбработатьСтруктуруЗапускаИПП(МестоЗапуска, КонтекстВзаимодействия.УправляющаяСтруктураЗапуска);
			ОповеститьОЗавершенииБизнесПроцесса(ОбработчикиЗавершенияБизнесПроцесса, Неопределено);
			Возврат;
		КонецЕсли;

		ПараметрыСозданияКонтекста = Неопределено;

	Иначе

		ПараметрыСозданияКонтекста = Новый Структура(
			"МестоЗапуска, ПовторныйЗапуск, СтартовыеПараметры",
			МестоЗапуска,
			Повторно,
			СтартовыеПараметры);

	КонецЕсли;

	Попытка

		ВызовСервиса(
			КонтекстВзаимодействия,
			ПараметрыСозданияКонтекста,
			ОбработчикиЗавершенияБизнесПроцесса,
			ОбработчикиСобытийБизнесПроцесса,
			ДопПараметры);

	Исключение

		Если КонтекстВзаимодействия <> Неопределено Тогда

			ПриНачалеРаботыСистемы = КонтекстВзаимодействия.КСКонтекст.ПриНачалеРаботыСистемы;
			Логин = ЗначениеСессионногоПараметра(
				КонтекстВзаимодействия.КСКонтекст,
				"login");

		Иначе

			ПриНачалеРаботыСистемы = Ложь;
			Логин = "";

		КонецЕсли;

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Подключение1СТакскомВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ТекстПодробноеПредставлениеОшибки);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МестоЗапуска"          , МестоЗапуска);
		ПараметрыФормы.Вставить("СтартовыеПараметры"    , СтартовыеПараметры);
		ПараметрыФормы.Вставить("ПриНачалеРаботыСистемы", ПриНачалеРаботыСистемы);
		ПараметрыФормы.Вставить("ОписаниеОшибки",
			НСтр("ru = 'Неизвестная ошибка. Подробнее см. в журнале регистрации.'"));
		ПараметрыФормы.Вставить("ПодробноеОписаниеОшибки", ТекстПодробноеПредставлениеОшибки);
		ПараметрыФормы.Вставить("Логин"                  , Логин);

		Форма = ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету", ПараметрыФормы);
		Форма.КонтекстВзаимодействия = КонтекстВзаимодействия;
		
	КонецПопытки;

КонецПроцедуры

// Отправка на сервер управляющей команды для освобождения ресурсов сервиса.
// Обработка ответа сервиса не выполняется.
//
Процедура ЗавершитьБизнесПроцесс(КонтекстВзаимодействия, ЗавершениеРаботы = Ложь) Экспорт

	Если КонтекстВзаимодействия = Неопределено Или ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;

	ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
		КонтекстВзаимодействия);

	ЗакрытьВсеФормы(КонтекстВзаимодействия);
	ПараметрыОбращенияКСервисуИПП = Новый Структура;
	ПараметрыОбращенияКСервисуИПП.Вставить("ОбработатьОтвет"             , Ложь);
	ПараметрыОбращенияКСервисуИПП.Вставить("ОтобразитьСостояниеОбращения", Ложь);

	ОбработатьКомандуФормы(КонтекстВзаимодействия, Неопределено, "CloseBP", ПараметрыОбращенияКСервисуИПП);

КонецПроцедуры

// Обработка выхода пользователя из ИПП (нажатие ссылки "Выход" на форме).
//
Процедура ОбработатьВыходПользователя(КонтекстВзаимодействия, Форма) Экспорт

	ДопПараметры = Новый Структура("КонтекстВзаимодействия, Форма", КонтекстВзаимодействия, Форма);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеПользователяНаВопросОВыходе", ЭтотОбъект, ДопПараметры);

	ТекстВопроса = ВопросПриВыходеАвторизованногоПользователя(КонтекстВзаимодействия);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);

КонецПроцедуры

// Регистрация открытой внутренней формы ИПП в контексте взаимодействия.
//
Процедура ОбработатьОткрытиеФормы(КонтекстВзаимодействия, ОткрытаяФорма) Экспорт

	Если КонтекстВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ФормыОбработки = КонтекстВзаимодействия.ФормыОбработки;

	Если ТипЗнч(ФормыОбработки) <> Тип("Соответствие") Тогда
		ФормыОбработки = Новый Соответствие;
		КонтекстВзаимодействия.ФормыОбработки = ФормыОбработки;
	КонецЕсли;

	ФормыОбработки[ОткрытаяФорма.ИмяФормы] = ОткрытаяФорма;

КонецПроцедуры

// Процедура получает команды от веб-сервиса и выполняет их на стороне клиента
// или передает управление серверу 1С:Предприятия.
//
Процедура ОбработкаКомандСервиса(
	КонтекстВзаимодействия,
	ТекущаяФорма,
	ПараметрыЗапроса,
	КонтекстОбработчика = Неопределено,
	ДопПараметры = Неопределено,
	ДопПараметрыДляПовтораБизнесПроцесса = Неопределено) Экспорт

	ПараметрыОбращенияКСервисуИПП       = Неопределено;
	ДополнительныеПараметрыЗапроса      = Неопределено;
	ПродолжитьВыполнение                = Ложь;
	ПараметрыСозданияКонтекста          = Неопределено;
	ОбработчикиЗавершенияБизнесПроцесса = Неопределено;
	ТолькоСтандартнаяОбработка          = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ПараметрыОбращенияКСервисуИПП") Тогда
			ПараметрыОбращенияКСервисуИПП = ДопПараметры.ПараметрыОбращенияКСервисуИПП;
		КонецЕсли;
		Если ДопПараметры.Свойство("ДополнительныеПараметрыЗапроса") Тогда
			ДополнительныеПараметрыЗапроса = ДопПараметры.ДополнительныеПараметрыЗапроса;
		КонецЕсли;
		Если ДопПараметры.Свойство("ПродолжитьВыполнение") Тогда
			ПродолжитьВыполнение = ДопПараметры.ПродолжитьВыполнение;
		КонецЕсли;
		Если ДопПараметры.Свойство("ПараметрыСозданияКонтекста") Тогда
			ПараметрыСозданияКонтекста = ДопПараметры.ПараметрыСозданияКонтекста;
		КонецЕсли;
		Если ДопПараметры.Свойство("ОбработчикиЗавершенияБизнесПроцесса") Тогда
			ОбработчикиЗавершенияБизнесПроцесса = ДопПараметры.ОбработчикиЗавершенияБизнесПроцесса;
		КонецЕсли;
		Если ДопПараметры.Свойство("ОбработчикиСобытийБизнесПроцесса") Тогда
			ОбработчикиСобытийБизнесПроцесса = ДопПараметры.ОбработчикиСобытийБизнесПроцесса;
		КонецЕсли;
		Если ДопПараметры.Свойство("ТолькоСтандартнаяОбработка") Тогда
			ТолькоСтандартнаяОбработка = ДопПараметры.ТолькоСтандартнаяОбработка;
		КонецЕсли;
	КонецЕсли;

	ОтобразитьСостояниеОбращения = Истина;
	ОбработатьОтвет              = Истина;
	НеобходимоОчиститьСессию     = Ложь;

	Если ТипЗнч(ПараметрыОбращенияКСервисуИПП) = Тип("Структура") Тогда

		Если ПараметрыОбращенияКСервисуИПП.Свойство("ОбработатьОтвет") Тогда
			ОбработатьОтвет = ПараметрыОбращенияКСервисуИПП.ОбработатьОтвет;
		КонецЕсли;

		Если ПараметрыОбращенияКСервисуИПП.Свойство("ОтобразитьСостояниеОбращения") Тогда
			ОтобразитьСостояниеОбращения = ПараметрыОбращенияКСервисуИПП.ОтобразитьСостояниеОбращения;
		КонецЕсли;

		Если ПараметрыОбращенияКСервисуИПП.Свойство("ОчиститьСессиюПередВыполнениемЗапроса") Тогда
			НеобходимоОчиститьСессию = ПараметрыОбращенияКСервисуИПП.ОчиститьСессиюПередВыполнениемЗапроса;
		КонецЕсли;

	КонецЕсли;

	Если ОтобразитьСостояниеОбращения = Истина Тогда
		ОтобразитьСостояниеОбращениеКСервису();
	КонецЕсли;

	Если НеобходимоОчиститьСессию = Истина И КонтекстВзаимодействия <> Неопределено Тогда
		ОчиститьСессию(КонтекстВзаимодействия);
	КонецЕсли;

	// Если контекст обработчика команд не задан, тогда необходимо подготовить его структуру.
	Если КонтекстОбработчика = Неопределено Тогда
		// Создание контекста обработчика команд
		КонтекстОбработчика = НовыйКонтекстОбработчикаКоманд();
	КонецЕсли;

	Если КонтекстВзаимодействия = Неопределено Тогда
		ОсновныеПараметры = Неопределено;
	Иначе
		ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	КонецЕсли;

	Если НЕ ПродолжитьВыполнение Тогда

		Если ПараметрыЗапроса = Неопределено Тогда
			ПараметрыЗапроса = Новый Массив;
		КонецЕсли;

		// Если выполняется первое обращение, тогда необходимо
		// получить команды от веб-сервиса.

		Если КонтекстВзаимодействия = Неопределено Тогда

			// Обработка первого запуска при незаданном контексте взаимодействия
			// создание на стороне сервера ИБ контекста взаимодействия и первое
			// обращение к сервису ИПП (для минимизации клиент-серверных вызовов).
			Подключение1СТакскомВызовСервера.ОбработкаКомандСервиса(
				Неопределено,
				ПараметрыЗапроса,
				КонтекстОбработчика,
				Ложь,
				КонтекстВзаимодействия,
				Новый Структура(
					"ПараметрыОбращенияКСервисуИПП, ПараметрыСозданияКонтекста, МассивСессионныхПараметровЗапроса",
					ПараметрыОбращенияКСервисуИПП,
					ПараметрыСозданияКонтекста,
					ДополнительныеПараметрыЗапроса));

			Если КонтекстВзаимодействия.Свойство("УправляющаяСтруктураЗапуска") Тогда
				ОбработатьСтруктуруЗапускаИПП(ПараметрыСозданияКонтекста.МестоЗапуска,
					КонтекстВзаимодействия.УправляющаяСтруктураЗапуска);
				ОповеститьОЗавершенииБизнесПроцесса(ОбработчикиЗавершенияБизнесПроцесса, Неопределено);
				Возврат;
			КонецЕсли;
			
			КонтекстВзаимодействия.Вставить("ДопПараметрыДляПовтораБизнесПроцесса", ДопПараметрыДляПовтораБизнесПроцесса);
			КонтекстВзаимодействия.Вставить("ОбработчикиЗавершенияБизнесПроцесса",
				ОбработчикиЗавершенияБизнесПроцесса);
			КонтекстВзаимодействия.Вставить("ОбработчикиСобытийБизнесПроцесса",
				ОбработчикиСобытийБизнесПроцесса);
			
			ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;

		Иначе

			// При последующих запусках все выполняется в штатном режиме

			Подключение1СТакскомВызовСервера.ОбработкаКомандСервиса(
				КонтекстВзаимодействия.КСКонтекст,
				ПараметрыЗапроса,
				КонтекстОбработчика,
				Ложь,
				,
				Новый Структура(
					"ПараметрыОбращенияКСервисуИПП, МассивСессионныхПараметровЗапроса",
					ПараметрыОбращенияКСервисуИПП,
					ДополнительныеПараметрыЗапроса));

		КонецЕсли;

	КонецЕсли;

	// Если обрабатывать ответ сервиса не требуется, тогда возврат
	Если ОбработатьОтвет <> Истина Тогда
		Возврат;
	КонецЕсли;

	ПрерватьОбработкуКоманд = Ложь;
	Попытка

		Пока КонтекстОбработчика.Команды.Количество() > 0
			И НЕ КонтекстОбработчика.ПроизошлаОшибка
			И НЕ КонтекстОбработчика.ВыполнитьОстановку
			И НЕ ПрерватьОбработкуКоманд Цикл

			ТекущаяКоманда = КонтекстОбработчика.Команды[0];
			ТипКоманды = Подключение1СТакскомКлиентСервер.ТипКоманды(
				ТекущаяКоманда,
				ОсновныеПараметры.ОбращениеССервера,
				ОсновныеПараметры.МестоЗапуска);

			Если ТипКоманды = -1 Тогда
				// Если тип команды (клиентская или серверная) определить не удалось,
				// тогда пропустить команду.
				КонтекстОбработчика.Команды.Удалить(0);
				Продолжить;

			ИначеЕсли ТипКоманды = 1 Тогда

				// Выполнение команды на клиенте
				КонтекстОбработчика.Команды.Удалить(0);
				ВыполнитьКомандуСервиса(
					КонтекстВзаимодействия,
					ТекущаяФорма,
					ТекущаяКоманда,
					КонтекстОбработчика,
					ТолькоСтандартнаяОбработка,
					ПрерватьОбработкуКоманд);

			Иначе
				// Если команда серверная, тогда передать управление серверу 1С:Предприятия
				// При повторном вызове, обращение к веб-сервису не выполняется
				// поэтому сессионные параметры не передаются.
				Подключение1СТакскомВызовСервера.ОбработкаКомандСервиса(
					КонтекстВзаимодействия.КСКонтекст,
					Неопределено,
					КонтекстОбработчика,
					Истина);

			КонецЕсли;

		КонецЦикла;

	Исключение

		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		КонтекстОбработчика.ПолноеОписаниеОшибки = НСтр("ru = 'Произошло необрабатываемое исключение:'")
			+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Неизвестная ошибка. Подробнее см. в журнале регистрации.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";

	КонецПопытки;

	Если ОтобразитьСостояниеОбращения = Истина Тогда
		Состояние();
	КонецЕсли;

	Если ПрерватьОбработкуКоманд И НЕ КонтекстОбработчика.ПроизошлаОшибка Тогда
		// При возникновении асинхронного действия необходимо прервать обработку
		// команд сервиса. Выполнение будет инициировано завершением асинхронного
		// действия.
		Возврат;
	КонецЕсли;

	// Если в процессе выполнения произошла ошибка, тогда выполнить обработку ошибки
	Если КонтекстОбработчика.ПроизошлаОшибка Тогда

		ЗакрытьВсеФормы(КонтекстВзаимодействия);

		ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
			КонтекстВзаимодействия);

		// Завершение сеанса
		Если КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество() > 0 Тогда

			// Завершение сеанса на сервере информационной базы
			Подключение1СТакскомВызовСервера.ЗавершитьСеансИнтернетПоддержки(
				КонтекстВзаимодействия.КСКонтекст,
				КонтекстОбработчика);

			Если КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество() > 0 Тогда
				// Осталось только действие закрытия сеанса, т.е. требуется отправить
				// из клиентского приложения команду завершения бизнес-процесса.
				ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
			КонецЕсли;

		КонецЕсли;

		Если КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение" Тогда

			ПараметрыФормы = ПараметрыФормыОшибкиОбращения(КонтекстВзаимодействия);
			ПараметрыФормы.Вставить("ОписаниеОшибки",
				КонтекстОбработчика.ПользовательскоеОписаниеОшибки);
			ПараметрыФормы.Вставить("ПодробноеОписаниеОшибки",
				КонтекстОбработчика.ПолноеОписаниеОшибки);

			Форма = ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету", ПараметрыФормы);
			Форма.КонтекстВзаимодействия = КонтекстВзаимодействия;

		ИначеЕсли КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение"
			И НЕ ПустаяСтрока(КонтекстОбработчика.ПользовательскоеОписаниеОшибки) Тогда

			ПоказатьПредупреждение(,
				КонтекстОбработчика.ПользовательскоеОписаниеОшибки,
				,
				НСтр("ru = 'Интернет-поддержка пользователей'"));
			Возврат;

		КонецЕсли;

	ИначеЕсли КонтекстОбработчика.ВыполнитьОстановку Тогда

		ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
			КонтекстВзаимодействия);

		Если КонтекстОбработчика.Свойство("ОписаниеПричиныОстановки") Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Интернет-поддержка пользователей'"),
				,
				КонтекстОбработчика.ОписаниеПричиныОстановки,
				БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
		КонецЕсли;

		ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);

	ИначеЕсли КонтекстВзаимодействия.Свойство("БизнесПроцессУспешноЗавершен")
		И КонтекстВзаимодействия.БизнесПроцессУспешноЗавершен = Истина Тогда

		ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
			КонтекстВзаимодействия);

	КонецЕсли;

КонецПроцедуры

// Обращение к сервису ИПП с заданным параметром.
// Передается один параметр с заданным именем и значением "true".
//
Процедура ОбработатьКомандуФормы(
	КонтекстВзаимодействия,
	Форма,
	ИмяКоманды,
	ПараметрыОбращенияКСервисуИПП = Неопределено) Экспорт

	ПараметрыЗапроса        = Новый Массив;
	ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", ИмяКоманды, "true"));

	ОбработкаКомандСервиса(
		КонтекстВзаимодействия,
		Форма,
		ПараметрыЗапроса,
		,
		Новый Структура("ПараметрыОбращенияКСервисуИПП", ПараметрыОбращенияКСервисуИПП));

КонецПроцедуры

// Определяет, открыта ли заданная форма контекста.
//
Функция ФормаОткрыта(КонтекстВзаимодействия, ИмяПроверяемойФормы) Экспорт

	ФормыОбработки = КонтекстВзаимодействия.ФормыОбработки;

	Если ТипЗнч(ФормыОбработки) <> Тип("Соответствие") Тогда
		ФормыОбработки = Новый Соответствие;
	КонецЕсли;

	ПроверяемаяФорма = ФормыОбработки[ИмяПроверяемойФормы];
	Если ПроверяемаяФорма = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ПроверяемаяФорма.Открыта();
	КонецЕсли;

КонецФункции

// Возвращает ссылку на обработчик события бизнес-процесса, переопределяемый
// в программном интерфейсе.
//
Функция ОбработчикСобытияБизнесПроцесса(КонтекстВзаимодействия, ИмяСобытия)
	
	Если КонтекстВзаимодействия = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не КонтекстВзаимодействия.Свойство("ОбработчикиСобытийБизнесПроцесса") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбработчикиСобытийБизнесПроцесса = КонтекстВзаимодействия.ОбработчикиСобытийБизнесПроцесса;
	Если ОбработчикиСобытийБизнесПроцесса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбработчикиСобытийБизнесПроцесса.Свойство(ИмяСобытия) Тогда
		Возврат ОбработчикиСобытийБизнесПроцесса[ИмяСобытия];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Переопределяет событие бизнес-процесса "Перед открытием формы".
//
Процедура ПередОткрытиемФормы(
	ИмяОткрываемойФормы,
	ПараметрыОткрытияФормы,
	КонтекстВзаимодействия,
	КонтекстОбработчика,
	СтруктураКоманды,
	СтандартнаяОбработка)
	
	Если ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.УникальныйИдентификаторАбонента" Тогда
		
		ОбработчикСтатусаЗаявки = ОбработчикСобытияБизнесПроцесса(КонтекстВзаимодействия, "СтатусЗаявки");
		
		Если ОбработчикСтатусаЗаявки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыСобытия = Новый Структура;
		
		Если ПараметрыОткрытияФормы.applicationStatusED = "obtained" Тогда
			СтатусЗаявки = "Обработана";
		ИначеЕсли ПараметрыОткрытияФормы.applicationStatusED = "rejected" Тогда
			СтатусЗаявки = "Отклонена";
		ИначеЕсли ПараметрыОткрытияФормы.applicationStatusED = "notconsidered" Тогда
			СтатусЗаявки = "ОжиданиеОбработки";
		Иначе
			СтатусЗаявки = "Отсутствует";
		КонецЕсли;
		
		ПараметрыСобытия.Вставить("СтатусЗаявки", СтатусЗаявки);
		Если ПараметрыОткрытияФормы.Свойство("numberRequestED") Тогда
			ПараметрыСобытия.Вставить("НомерЗаявки", ПараметрыОткрытияФормы.numberRequestED);
		Иначе
			ПараметрыСобытия.Вставить("НомерЗаявки", "");
		КонецЕсли;
		
		Если СтатусЗаявки = "Отсутствует" Тогда
			ПараметрыСобытия.Вставить("КодОшибки"     , "");
			ПараметрыСобытия.Вставить("ОписаниеОшибки", "");
			ПараметрыСобытия.Вставить("ДанныеЗаявки"  , Неопределено);
		Иначе
			
			КСКонтекст = КонтекстВзаимодействия.КСКонтекст;
			ПараметрыСобытия.Вставить("КодОшибки",
				ЗначениеСессионногоПараметра(КСКонтекст, "codeErrorED"));
			ПараметрыСобытия.Вставить("ОписаниеОшибки",
				ЗначениеСессионногоПараметра(КСКонтекст, "textErrorED"));
			
			ДанныеЗаявки = Новый Структура;
			ДанныеЗаявки.Вставить("ИдентификаторАбонента",
				ЗначениеСессионногоПараметра(КСКонтекст, "identifierTaxcomED"));
			ДанныеЗаявки.Вставить("ОтпечатокСертификата",
				ЗначениеСессионногоПараметра(КСКонтекст, "certificatefingerprintED"));
			ДанныеЗаявки.Вставить("Индекс",
				ЗначениеСессионногоПараметра(КСКонтекст, "postindexED"));
			ДанныеЗаявки.Вставить("КодРегиона",
				ЗначениеСессионногоПараметра(КСКонтекст, "codregionED"));
			ДанныеЗаявки.Вставить("Район",
				ЗначениеСессионногоПараметра(КСКонтекст, "addresstownshipED"));
			ДанныеЗаявки.Вставить("Город",
				ЗначениеСессионногоПараметра(КСКонтекст, "addresscityED"));
			ДанныеЗаявки.Вставить("НаселенныйПункт",
				ЗначениеСессионногоПараметра(КСКонтекст, "addresslocalityED"));
			ДанныеЗаявки.Вставить("Улица",
				ЗначениеСессионногоПараметра(КСКонтекст, "addressstreetED"));
			ДанныеЗаявки.Вставить("Дом",
				ЗначениеСессионногоПараметра(КСКонтекст, "addressbuildingED"));
			ДанныеЗаявки.Вставить("Корпус",
				ЗначениеСессионногоПараметра(КСКонтекст, "addresshousingED"));
			ДанныеЗаявки.Вставить("Квартира",
				ЗначениеСессионногоПараметра(КСКонтекст, "addressapartmentED"));
			ДанныеЗаявки.Вставить("Телефон",
				ЗначениеСессионногоПараметра(КСКонтекст, "addressphoneED"));
			ДанныеЗаявки.Вставить("НаименованиеОрганизации",
				ЗначениеСессионногоПараметра(КСКонтекст, "agencyED"));
			ДанныеЗаявки.Вставить("ИНН",
				ЗначениеСессионногоПараметра(КСКонтекст, "innED"));
			ДанныеЗаявки.Вставить("КПП",
				ЗначениеСессионногоПараметра(КСКонтекст, "kppED"));
			ДанныеЗаявки.Вставить("ОГРН",
				ЗначениеСессионногоПараметра(КСКонтекст, "ogrnED"));
			ДанныеЗаявки.Вставить("КодНалоговогоОргана",
				ЗначениеСессионногоПараметра(КСКонтекст, "codeimnsED"));
			ДанныеЗаявки.Вставить("ЮрФизЛицо",
				ЗначениеСессионногоПараметра(КСКонтекст, "orgindED"));
			ДанныеЗаявки.Вставить("Фамилия",
				ЗначениеСессионногоПараметра(КСКонтекст, "lastnameED"));
			ДанныеЗаявки.Вставить("Имя",
				ЗначениеСессионногоПараметра(КСКонтекст, "firstnameED"));
			ДанныеЗаявки.Вставить("Отчество",
				ЗначениеСессионногоПараметра(КСКонтекст, "middlenameED"));
			
			ПараметрыСобытия.Вставить("ДанныеЗаявки", ДанныеЗаявки);
			
		КонецЕсли;
		
		ДополнительныеПараметрыОбработчикаРезультата = Новый Структура;
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("КонтекстВзаимодействия", КонтекстВзаимодействия);
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("КонтекстОбработчика"   , КонтекстОбработчика);
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("СтруктураКоманды"      , СтруктураКоманды);
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("СтатусЗаявки"          , СтатусЗаявки);
		
		ОбработчикРезультата = Новый ОписаниеОповещения(
			"ПриПолученииРезультатаСтатусаЗаявки",
			ЭтотОбъект,
			ДополнительныеПараметрыОбработчикаРезультата);
		ПараметрыСобытия.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		
		ВыполнитьОбработкуОповещения(ОбработчикСтатусаЗаявки, ПараметрыСобытия);
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.ЗаявкаНаРегистрациюАбонента"
		И ПараметрыОткрытияФормы.statusApplicationFormED = "new" Тогда
		
		ОбработчикСозданияЗаявки = ОбработчикСобытияБизнесПроцесса(КонтекстВзаимодействия, "СозданиеЗаявки");
		
		Если ОбработчикСозданияЗаявки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		КСКонтекст = КонтекстВзаимодействия.КСКонтекст;
		
		
		ПараметрыСобытия = Новый Структура;
		Если ПараметрыОткрытияФормы.Свойство("identifierTaxcomED") Тогда
			ПараметрыСобытия.Вставить("ИдентификаторАбонента", ПараметрыОткрытияФормы.identifierTaxcomED);
		Иначе
			ПараметрыСобытия.Вставить("ИдентификаторАбонента", "");
		КонецЕсли;
		
		ДанныеЗаявки = Новый Структура;
		ДанныеЗаявки.Вставить("ИдентификаторАбонента",
			ЗначениеСессионногоПараметра(КСКонтекст, "identifierTaxcomED"));
		ДанныеЗаявки.Вставить("Индекс",
			ЗначениеСессионногоПараметра(КСКонтекст, "postindexED"));
		ДанныеЗаявки.Вставить("КодРегиона",
			ЗначениеСессионногоПараметра(КСКонтекст, "codregionED"));
		ДанныеЗаявки.Вставить("Район",
			ЗначениеСессионногоПараметра(КСКонтекст, "addresstownshipED"));
		ДанныеЗаявки.Вставить("Город",
			ЗначениеСессионногоПараметра(КСКонтекст, "addresscityED"));
		ДанныеЗаявки.Вставить("НаселенныйПункт",
			ЗначениеСессионногоПараметра(КСКонтекст, "addresslocalityED"));
		ДанныеЗаявки.Вставить("Улица",
			ЗначениеСессионногоПараметра(КСКонтекст, "addressstreetED"));
		ДанныеЗаявки.Вставить("Дом",
			ЗначениеСессионногоПараметра(КСКонтекст, "addressbuildingED"));
		ДанныеЗаявки.Вставить("Корпус",
			ЗначениеСессионногоПараметра(КСКонтекст, "addresshousingED"));
		ДанныеЗаявки.Вставить("Квартира",
			ЗначениеСессионногоПараметра(КСКонтекст, "addressapartmentED"));
		ДанныеЗаявки.Вставить("Телефон",
			ЗначениеСессионногоПараметра(КСКонтекст, "addressphoneED"));
		ДанныеЗаявки.Вставить("НаименованиеОрганизации",
			ЗначениеСессионногоПараметра(КСКонтекст, "agencyED"));
		ДанныеЗаявки.Вставить("ИНН",
			ЗначениеСессионногоПараметра(КСКонтекст, "innED"));
		ДанныеЗаявки.Вставить("КПП",
			ЗначениеСессионногоПараметра(КСКонтекст, "kppED"));
		ДанныеЗаявки.Вставить("ОГРН",
			ЗначениеСессионногоПараметра(КСКонтекст, "ogrnED"));
		ДанныеЗаявки.Вставить("КодНалоговогоОргана",
			ЗначениеСессионногоПараметра(КСКонтекст, "codeimnsED"));
		ДанныеЗаявки.Вставить("ЮрФизЛицо",
			ЗначениеСессионногоПараметра(КСКонтекст, "orgindED"));
		ДанныеЗаявки.Вставить("Фамилия",
			ЗначениеСессионногоПараметра(КСКонтекст, "lastnameED"));
		ДанныеЗаявки.Вставить("Имя",
			ЗначениеСессионногоПараметра(КСКонтекст, "firstnameED"));
		ДанныеЗаявки.Вставить("Отчество",
			ЗначениеСессионногоПараметра(КСКонтекст, "middlenameED"));
		
		ПараметрыСобытия.Вставить("ДанныеЗаявки", ДанныеЗаявки);
		
		ДополнительныеПараметрыОбработчикаРезультата = Новый Структура;
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("КонтекстВзаимодействия", КонтекстВзаимодействия);
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("КонтекстОбработчика"   , КонтекстОбработчика);
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("СтруктураКоманды"      , СтруктураКоманды);
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("СтатусЗаявки"          , СтатусЗаявки);
		
		ОбработчикРезультата = Новый ОписаниеОповещения(
			"ПриПолученииРезультатаСозданияЗаявки",
			ЭтотОбъект,
			ДополнительныеПараметрыОбработчикаРезультата);
		ПараметрыСобытия.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		
		ВыполнитьОбработкуОповещения(ОбработчикСозданияЗаявки, ПараметрыСобытия);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при запрете запуска ИПП по каким-либо причинам.
// Параметры:
//	МестоЗапуска - Строка - имя кнопки запуска ИПП;
//	СтруктураЗапуска - Структура - управляющая структура запуска.
//
Процедура ОбработатьСтруктуруЗапускаИПП(МестоЗапуска, Знач СтруктураЗапуска)

	Если СтруктураЗапуска = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураЗапуска.Действие = "Возврат" Тогда

		Состояние();

	ИначеЕсли СтруктураЗапуска.Действие = "ПоказатьСообщение" Тогда

		Состояние();

		Если СтруктураЗапуска.ПриНачалеРаботыСистемы Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Интернет-поддержка пользователей'"),
				,
				СтруктураЗапуска.Сообщение,
				БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
		Иначе
			ПоказатьПредупреждение(
				,
				СтруктураЗапуска.Сообщение,
				,
				НСтр("ru = 'Интернет-поддержка пользователей'"));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Вызывается стартовым механизмом для выполнения первого обращения к
// веб-сервису ИПП и получения команд от веб-сервиса для дальнейшего
// их выполнения.
//
// Параметры:
//	ПодготовленныйКонтекстВзаимодействия - Структура, ФиксированнаяСтруктура,
//		Неопределено - подготовленный контекст;
//	ПараметрыСозданияКонтекста - Структура - параметры создания
//		нового контекста взаимодействия, если контекст не существует;
//	ОбработчикиЗавершенияБизнесПроцесса - Структура - обработчики оповещения о
//		завершении бизнес-процесса.
//
Процедура ВызовСервиса(
	ПодготовленныйКонтекстВзаимодействия,
	ПараметрыСозданияКонтекста,
	ОбработчикиЗавершенияБизнесПроцесса,
	ОбработчикиСобытийБизнесПроцесса,
	ДопПараметры)

	Если ПодготовленныйКонтекстВзаимодействия = Неопределено Тогда

		КонтекстВзаимодействия = Неопределено;

	Иначе

		КонтекстВзаимодействия = ПодготовленныйКонтекстВзаимодействия;

		КонтекстВзаимодействия.Вставить("ОбработчикиЗавершенияБизнесПроцесса",
			ОбработчикиЗавершенияБизнесПроцесса);

		КонтекстВзаимодействия.Вставить("ОбработчикиСобытийБизнесПроцесса",
			ОбработчикиСобытийБизнесПроцесса);
		
	КонецЕсли;

	// Параметры, передаваемые сервису при первом вызове и сохраняемые на стороне
	// сервера ИПП в сеансовых переменных.
	ДополнительныеСтартовыеПараметры = Новый Массив;
	ДополнительныеСтартовыеПараметры.Добавить("libraryVersion");
	ДополнительныеСтартовыеПараметры.Добавить("APIVersion");
	ДополнительныеСтартовыеПараметры.Добавить("versionConfiguration");
	ДополнительныеСтартовыеПараметры.Добавить("versionPlatform");
	ДополнительныеСтартовыеПараметры.Добавить("nameConfiguration");
	ДополнительныеСтартовыеПараметры.Добавить("language");
	ДополнительныеСтартовыеПараметры.Добавить("enterPoint");
	
	ДополнительныеПараметрыОбработкиКоманд = Новый Структура;
	ДополнительныеПараметрыОбработкиКоманд.Вставить("ДополнительныеПараметрыЗапроса"     , ДополнительныеСтартовыеПараметры);
	ДополнительныеПараметрыОбработкиКоманд.Вставить("ПараметрыСозданияКонтекста"         , ПараметрыСозданияКонтекста);
	ДополнительныеПараметрыОбработкиКоманд.Вставить("ОбработчикиЗавершенияБизнесПроцесса", ОбработчикиЗавершенияБизнесПроцесса);
	ДополнительныеПараметрыОбработкиКоманд.Вставить("ОбработчикиСобытийБизнесПроцесса"   , ОбработчикиСобытийБизнесПроцесса);
	
	ОбработкаКомандСервиса(
		КонтекстВзаимодействия,
		Неопределено,
		Неопределено,
		,
		ДополнительныеПараметрыОбработкиКоманд,
		ДопПараметры);
	
КонецПроцедуры

// Выполняет заданную команду сервиса.
//
Процедура ВыполнитьКомандуСервиса(
	КонтекстВзаимодействия,
	ТекущаяФорма,
	СтруктураКоманды,
	КонтекстОбработчика,
	ТолькоСтандартнаяОбработка,
	ПрерватьОбработкуКоманд)

	ИмяКоманды = Неопределено;
	СтруктураКоманды.Свойство("ИмяКоманды", ИмяКоманды);

	Если ТипЗнч(ИмяКоманды) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;

	ИмяКоманды = НРег(СокрЛП(ИмяКоманды));

	Если ИмяКоманды = "ui.open" Тогда
		ОткрытьВнутреннююФорму(
			КонтекстВзаимодействия,
			ТекущаяФорма,
			СтруктураКоманды,
			КонтекстОбработчика,
			ТолькоСтандартнаяОбработка,
			ПрерватьОбработкуКоманд);

	ИначеЕсли ИмяКоманды = "ui.close" Тогда
		ЗакрытьВнутреннююФорму(КонтекстВзаимодействия, СтруктураКоманды);

	ИначеЕсли ИмяКоманды = "system.halt" Тогда
		ОстановитьМеханизм(КонтекстВзаимодействия, СтруктураКоманды);

	ИначеЕсли ИмяКоманды = "message.show" Тогда
		ПоказатьСообщениеПользователю(
			СтруктураКоманды,
			КонтекстВзаимодействия,
			ТекущаяФорма,
			КонтекстОбработчика,
			ПрерватьОбработкуКоманд);

	ИначеЕсли ИмяКоманды = "question.show" Тогда
		ЗадатьВопросПользователю(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды);

	ИначеЕсли ИмяКоманды = "input.field" Тогда
		ВвестиДанные(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды);

	ИначеЕсли ИмяКоманды = "setcodesregion" Тогда
		
		Подключение1СТакскомКлиентСервер.СохранитьВПараметрахКодыРегионов(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "performtheaction.decode" Тогда
		
		ПрерватьОбработкуКоманд = Истина;
		РасшифроватьКонтрольныйМаркерЭПСервера(
			КонтекстВзаимодействия,
			СтруктураКоманды,
			КонтекстОбработчика,
			ТекущаяФорма);
		
	КонецЕсли;

КонецПроцедуры

// Выполнение команды открытия формы.
//
Процедура ОткрытьВнутреннююФорму(
	КонтекстВзаимодействия,
	ТекущаяФорма,
	СтруктураКоманды,
	КонтекстОбработчика,
	ТолькоСтандартнаяОбработка,
	ПрерватьОбработкуКоманд)

	ПараметрыФормы = Неопределено;
	СтруктураКоманды.Свойство("ПараметрыФормы", ПараметрыФормы);

	УРЛ = Неопределено;
	СтруктураКоманды.Свойство("УРЛ", УРЛ);

	ТекстФормы = Неопределено;
	СтруктураКоманды.Свойство("Текст", ТекстФормы);

	// Замена параметров в тексте формы
	Если ТекстФормы <> Неопределено Тогда
		Если СтрНайти(ТекстФормы, "%Логин%") Тогда
			СтрокаЗамены = ЗначениеСессионногоПараметра(
				КонтекстВзаимодействия.КСКонтекст,
				"login");
			ТекстФормы = СтрЗаменить(ТекстФормы, "%Логин%", СтрокаЗамены);
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыФормы <> Неопределено Тогда

		ИмяОткрываемойФормы = Неопределено;
		ПараметрыФормы.Свойство("ИмяОткрываемойФормы", ИмяОткрываемойФормы);

		Заголовок = Неопределено;
		ПараметрыФормы.Свойство("Заголовок", Заголовок);

		Текст = Неопределено;
		ПараметрыФормы.Свойство("Текст", Текст);

		Если ИмяОткрываемойФормы = "Вопрос" Тогда

			ТекстПредупреждения = ?(Текст = Неопределено, ТекстФормы, Текст);

			ДопПараметры = Новый Структура("КонтекстВзаимодействия, Форма", КонтекстВзаимодействия, ТекущаяФорма);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииОКВСтатическойФормеПредупреждения",
				ЭтотОбъект,
				ДопПараметры);

			ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения, , Заголовок);

		ИначеЕсли ИмяОткрываемойФормы = "ВсплывающаяПодсказка" Тогда

			ПоказатьОповещениеПользователя(
				Заголовок,
				,
				ТекстФормы,
				БиблиотекаКартинок.ИнтернетПоддержкаПользователей);

		Иначе

			Если ТекущаяФорма <> Неопределено Тогда
				ЗакрытьФормуПрограммно(ТекущаяФорма, КонтекстВзаимодействия);
			КонецЕсли;

			ПараметрыОткрытияФормы = СформироватьПараметрыОткрытияФормы(
				КонтекстВзаимодействия.КСКонтекст,
				ИмяОткрываемойФормы);

			Если УРЛ <> Неопределено Тогда
				ПараметрыОткрытияФормы.Вставить("УРЛ", УРЛ);
			КонецЕсли;

			Если ТолькоСтандартнаяОбработка Тогда
				// Сбросить флаг для текущей команды.
				ТолькоСтандартнаяОбработка = Ложь;
			Иначе
				СтандартнаяОбработка = Истина;
				ПередОткрытиемФормы(
					ИмяОткрываемойФормы,
					ПараметрыОткрытияФормы,
					КонтекстВзаимодействия,
					КонтекстОбработчика,
					СтруктураКоманды,
					СтандартнаяОбработка);
				Если Не СтандартнаяОбработка Тогда
					ПрерватьОбработкуКоманд = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ОткрываемаяФорма = ПолучитьФорму(ИмяОткрываемойФормы, ПараметрыОткрытияФормы);

			Попытка
				ОткрываемаяФорма.КонтекстВзаимодействия = КонтекстВзаимодействия;
			Исключение
				Подключение1СТакскомВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;

			ОткрываемаяФорма.Открыть();

		КонецЕсли;

		Если ПараметрыФормы.Свойство("УспешноеЗавершениеБизнесПроцесса") Тогда
			КонтекстВзаимодействия.Вставить("БизнесПроцессУспешноЗавершен", Истина);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Подготовка параметров для открытия внутренней формы.
//
Функция СформироватьПараметрыОткрытияФормы(КСКонтекст, ИмяОткрываемойФормы)

	ПараметрыНовойФормы = Новый Структура;

	// Во все формы передается значение параметра login
	ПараметрыНовойФормы.Вставить("login",
		ЗначениеСессионногоПараметра(КСКонтекст, "login"));

	Если ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.ПодключениеИнтернетПоддержки" Тогда

		ПараметрыНовойФормы.Вставить("ЭтоФормаБизнесПроцесса", Истина);
		ПараметрыНовойФормы.Вставить("МестоЗапуска"          , КСКонтекст.ОсновныеПараметры.МестоЗапуска);

		ПараметрыНовойФормы.Вставить("ПриНачалеРаботыСистемы", КСКонтекст.ПриНачалеРаботыСистемы);
		ПараметрыНовойФормы.Вставить("ИзменятьФлагЗаполнитьПароль", Истина);
		ПараметрыНовойФормы.Вставить("ЗапомнитьПароль",
			ЗначениеСессионногоПараметра(КСКонтекст,"savePassword") <> "false");

	ИначеЕсли ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.ОбщаяРегНомер" Тогда
		ПараметрыНовойФормы.Вставить("regnumber",
			ЗначениеСессионногоПараметра(КСКонтекст,"regnumber"));

		ПараметрыНовойФормы.Вставить("ПриНачалеРаботыСистемы", КСКонтекст.ПриНачалеРаботыСистемы);

	ИначеЕсли ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.ОбщаяПинкод" Тогда
		ПараметрыНовойФормы.Вставить("regnumber",
			ЗначениеСессионногоПараметра(КСКонтекст,"regnumber"));
		ПараметрыНовойФормы.Вставить("pincode",
			ЗначениеСессионногоПараметра(КСКонтекст,"pincode"));

	ИначеЕсли ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.ИнтернетПоддержкаПродуктаНеОказывается" Тогда

		Если КСКонтекст.Свойство("ПриНачалеРаботыСистемы") Тогда
			ПараметрыНовойФормы.Вставить("ПриНачалеРаботыСистемы", КСКонтекст.ПриНачалеРаботыСистемы);
		КонецЕсли;

	ИначеЕсли ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.УникальныйИдентификаторАбонента" Тогда
		ПараметрыНовойФормы.Вставить("applicationStatusED",
			ЗначениеСессионногоПараметра(КСКонтекст, "applicationStatusED"));
		ПараметрыНовойФормы.Вставить("numberRequestED",
			ЗначениеСессионногоПараметра(КСКонтекст, "numberRequestED"));
		ПараметрыНовойФормы.Вставить("identifierTaxcomED",
			ЗначениеСессионногоПараметра(КСКонтекст, "identifierTaxcomED"));
		ПараметрыНовойФормы.Вставить("dateRequestED",
			ЗначениеСессионногоПараметра(КСКонтекст, "dateRequestED"));
		ПараметрыНовойФормы.Вставить("IDCertificateED",
			ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));
		ПараметрыНовойФормы.Вставить("IDOrganizationED",
			ЗначениеСессионногоПараметра(КСКонтекст, "IDOrganizationED"));
		ПараметрыНовойФормы.Вставить("ToAddCert",
			ЗначениеСессионногоПараметра(КСКонтекст, "ToAddCert"));
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.ЗаявкаНаРегистрациюАбонента" Тогда
		ПараметрыНовойФормы.Вставить("statusApplicationFormED",
			ЗначениеСессионногоПараметра(КСКонтекст, "statusApplicationFormED"));
		ПараметрыНовойФормы.Вставить("numberRequestED",
			ЗначениеСессионногоПараметра(КСКонтекст, "numberRequestED"));
		ПараметрыНовойФормы.Вставить("dateRequestED",
			ЗначениеСессионногоПараметра(КСКонтекст, "dateRequestED"));
		ПараметрыНовойФормы.Вставить("applicationStatusED",
			ЗначениеСессионногоПараметра(КСКонтекст, "applicationStatusED"));
		ПараметрыНовойФормы.Вставить("nameCertificateED",
			ЗначениеСессионногоПараметра(КСКонтекст, "nameCertificateED"));
		ПараметрыНовойФормы.Вставить("orgindED",
			ЗначениеСессионногоПараметра(КСКонтекст, "orgindED"));
		ПараметрыНовойФормы.Вставить("postindexED",
			ЗначениеСессионногоПараметра(КСКонтекст, "postindexED"));
		ПараметрыНовойФормы.Вставить("addressregionED",
			ЗначениеСессионногоПараметра(КСКонтекст, "addressregionED"));
		ПараметрыНовойФормы.Вставить("coderegionED",
			ЗначениеСессионногоПараметра(КСКонтекст, "codregionED"));
		ПараметрыНовойФормы.Вставить("addresstownshipED",
			ЗначениеСессионногоПараметра(КСКонтекст, "addresstownshipED"));
		ПараметрыНовойФормы.Вставить("addresscityED",
			ЗначениеСессионногоПараметра(КСКонтекст, "addresscityED"));
		ПараметрыНовойФормы.Вставить("addresslocalityED",
			ЗначениеСессионногоПараметра(КСКонтекст, "addresslocalityED"));
		ПараметрыНовойФормы.Вставить("addressstreetED",
			ЗначениеСессионногоПараметра(КСКонтекст, "addressstreetED"));
		ПараметрыНовойФормы.Вставить("addressbuildingED",
			ЗначениеСессионногоПараметра(КСКонтекст, "addressbuildingED"));
		ПараметрыНовойФормы.Вставить("addresshousingED",
			ЗначениеСессионногоПараметра(КСКонтекст, "addresshousingED"));
		ПараметрыНовойФормы.Вставить("addressapartmentED",
			ЗначениеСессионногоПараметра(КСКонтекст, "addressapartmentED"));
		ПараметрыНовойФормы.Вставить("addressphoneED",
			ЗначениеСессионногоПараметра(КСКонтекст, "addressphoneED"));
		ПараметрыНовойФормы.Вставить("agencyED",
			ЗначениеСессионногоПараметра(КСКонтекст, "agencyED"));
		ПараметрыНовойФормы.Вставить("innED",
			ЗначениеСессионногоПараметра(КСКонтекст, "innED"));
		ПараметрыНовойФормы.Вставить("kppED",
			ЗначениеСессионногоПараметра(КСКонтекст, "kppED"));
		ПараметрыНовойФормы.Вставить("ogrnED",
			ЗначениеСессионногоПараметра(КСКонтекст, "ogrnED"));
		ПараметрыНовойФормы.Вставить("codeimnsED",
			ЗначениеСессионногоПараметра(КСКонтекст, "codeimnsED"));
		ПараметрыНовойФормы.Вставить("lastnameED",
			ЗначениеСессионногоПараметра(КСКонтекст, "lastnameED"));
		ПараметрыНовойФормы.Вставить("firstnameED",
			ЗначениеСессионногоПараметра(КСКонтекст, "firstnameED"));
		ПараметрыНовойФормы.Вставить("middlenameED",
			ЗначениеСессионногоПараметра(КСКонтекст, "middlenameED"));
		ПараметрыНовойФормы.Вставить("identifierTaxcomED",
			ЗначениеСессионногоПараметра(КСКонтекст, "identifierTaxcomED"));
		ПараметрыНовойФормы.Вставить("IDCertificateED",
			ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.ИзменениеТарифа" Тогда
		ПараметрыНовойФормы.Вставить("freePackagesED",
			ЗначениеСессионногоПараметра(КСКонтекст, "freePackagesED"));
		ПараметрыНовойФормы.Вставить("unallocatedPackagesED",
			ЗначениеСессионногоПараметра(КСКонтекст, "unallocatedPackagesED"));
		ПараметрыНовойФормы.Вставить("begindatetarifED",
			ЗначениеСессионногоПараметра(КСКонтекст, "begindatetarifED"));
		ПараметрыНовойФормы.Вставить("enddatetarifED",
			ЗначениеСессионногоПараметра(КСКонтекст, "enddatetarifED"));
		ПараметрыНовойФормы.Вставить("dateRequestED",
			ЗначениеСессионногоПараметра(КСКонтекст, "dateRequestED"));
		ПараметрыНовойФормы.Вставить("numberRequestED",
			ЗначениеСессионногоПараметра(КСКонтекст, "numberRequestED"));
		ПараметрыНовойФормы.Вставить("applicationStatusED",
			ЗначениеСессионногоПараметра(КСКонтекст, "applicationStatusED"));
		ПараметрыНовойФормы.Вставить("codeErrorED",
			ЗначениеСессионногоПараметра(КСКонтекст, "codeErrorED"));
		ПараметрыНовойФормы.Вставить("textErrorED",
			ЗначениеСессионногоПараметра(КСКонтекст, "textErrorED"));
		
	КонецЕсли;

	Возврат ПараметрыНовойФормы;

КонецФункции

// Выполнение команды закрытия внутренней формы.
//
Процедура ЗакрытьВнутреннююФорму(КонтекстВзаимодействия, СтруктураКоманды)

	ФормыОбработки    = КонтекстВзаимодействия.ФормыОбработки;

	ПараметрыФормы = Неопределено;
	СтруктураКоманды.Свойство("ПараметрыФормы", ПараметрыФормы);

	Если ПараметрыФормы <> Неопределено Тогда

		ИмяОткрываемойФормы = Неопределено;
		ПараметрыФормы.Свойство("ИмяОткрываемойФормы", ИмяОткрываемойФормы);

		Если ИмяОткрываемойФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Форма = ФормыОбработки[ИмяОткрываемойФормы];

		Если Форма = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ЗакрытьФормуПрограммно(Форма, КонтекстВзаимодействия);

	КонецЕсли;

КонецПроцедуры

// Выполнение команды сервиса "Задать вопрос пользователю".
//
Процедура ЗадатьВопросПользователю(КонтекстВзаимодействия, Форма, СтруктураКоманды)

	ТипВопроса = Неопределено;
	СтруктураКоманды.Свойство("Тип", ТипВопроса);

	Если ТипВопроса = "richanswer" Тогда

		СписокКнопок = СтруктураКоманды.Кнопки;

	Иначе

		СписокКнопок = Новый СписокЗначений;
		Для каждого ЭлементКнопка Из СтруктураКоманды.Кнопки Цикл
			Если ЭлементКнопка.Значение = "yes" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.Да);
			ИначеЕсли ЭлементКнопка.Значение = "no" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.Нет);
			ИначеЕсли ЭлементКнопка.Значение = "cancel" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ИначеЕсли ЭлементКнопка.Значение = "ok" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.ОК);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	ДопПараметрыВопроса = Новый Структура("КонтекстВзаимодействия, ТипВопроса, Форма",
		КонтекстВзаимодействия,
		ТипВопроса,
		Форма);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросКомандыВопрос",
		ЭтотОбъект,
		ДопПараметрыВопроса);

	ПоказатьВопрос(ОписаниеОповещения, СтруктураКоманды.ТекстСообщения, СписокКнопок, , , СтруктураКоманды.Заголовок);

КонецПроцедуры

// Асинхронный обработчик ответа пользователя при выполнении команды
// ЗадатьВопросПользователю().
//
Процедура ПриОтветеНаВопросКомандыВопрос(РезультатВопроса, ДопПараметры) Экспорт

	Если ДопПараметры.ТипВопроса = "richanswer" Тогда
		ОтветСервису = РезультатВопроса;

	Иначе
		ОтветСервису = "Cancel";
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ОтветСервису = "Yes";
		ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			ОтветСервису = "No";
		ИначеЕсли РезультатВопроса = КодВозвратаДиалога.ОК Тогда
			ОтветСервису = "OK";
		КонецЕсли;

	КонецЕсли;

	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "answer", ОтветСервису));

	ОбработкаКомандСервиса(ДопПараметры.КонтекстВзаимодействия, ДопПараметры.Форма, ПараметрыЗапроса);

КонецПроцедуры

// Выполнение команды сервиса "Показать сообщение пользователю".
//
Процедура ПоказатьСообщениеПользователю(
	СтруктураКоманды,
	КонтекстВзаимодействия,
	ТекущаяФорма,
	КонтекстОбработчика,
	ПрерватьОбработкуКоманд)

	ТипСообщения = Неопределено;
	СтруктураКоманды.Свойство("Тип", ТипСообщения);

	Если ТипСообщения = "usernotification" Тогда

		ПоказатьОповещениеПользователя(
			СтруктураКоманды.Заголовок,
			,
			СтруктураКоманды.ТекстСообщения,
			БиблиотекаКартинок.ИнтернетПоддержкаПользователей);

	Иначе

		ПрерватьОбработкуКоманд = Истина;
		ДопПараметрыОповещения = Новый Структура("КонтекстВзаимодействия, Форма, КонтекстОбработчика",
			КонтекстВзаимодействия,
			ТекущаяФорма,
			КонтекстОбработчика);

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПриНажатииОКВФормеСообщенияПользователю",
			ЭтотОбъект,
			ДопПараметрыОповещения);

		ПоказатьПредупреждение(ОписаниеОповещения, СтруктураКоманды.ТекстСообщения, , СтруктураКоманды.Заголовок);

	КонецЕсли;

КонецПроцедуры

// Асинхронный обработчик нажатия кнопки "ОК" в форме сообщения пользователю
// при выполнении команды сервиса "Показать сообщение пользователю".
//
Процедура ПриНажатииОКВФормеСообщенияПользователю(ДопПараметры) Экспорт

	ОбработкаКомандСервиса(
		ДопПараметры.КонтекстВзаимодействия,
		ДопПараметры.Форма,
		Неопределено,
		ДопПараметры.КонтекстОбработчика,
		Новый Структура("ПродолжитьВыполнение", Истина));

КонецПроцедуры

// Асинхронный обработчик нажатия пользователем кнопки "ОК" при выполнении
// команды открытия статической формы.
//
Процедура ПриНажатииОКВСтатическойФормеПредупреждения(ДопПараметры) Экспорт

	ОбработкаКомандСервиса(ДопПараметры.КонтекстВзаимодействия, ДопПараметры.Форма, Неопределено);

КонецПроцедуры

// Выполнение команды сервиса "Ввести данные". При выполнении
// открывается универсальная форма ввода данных
// Обработка.Подключение1СТакском.Форма.ВводДанных.
//
Процедура ВвестиДанные(КонтекстВзаимодействия, Форма, СтруктураКоманды)

	ДопПараметры = Новый Структура("Форма, КонтекстВзаимодействия", Форма, КонтекстВзаимодействия);

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриВводеДанныхПользователем",
		ЭтотОбъект,
		ДопПараметры);

	ИмяФормыВводаДанных = "Обработка.Подключение1СТакском.Форма.ВводДанных";
	ОткрытьФорму(ИмяФормыВводаДанных,
		СтруктураКоманды.ПараметрыФормы,
		,
		,
		,
		,
		ОписаниеОповещения);

КонецПроцедуры

// Асинхронный обработчик ввода данных пользователем в результате выполнения
// команды ПриВводеДанныхПользователем().
//
Процедура ПриВводеДанныхПользователем(ВведенныеДанные, ДопПараметры) Экспорт

	Форма = ДопПараметры.Форма;
	КонтекстВзаимодействия = ДопПараметры.КонтекстВзаимодействия;

	ПараметрыЗапроса = Новый Массив;
	Если ВведенныеДанные <> Неопределено И ВведенныеДанные <> КодВозвратаДиалога.Отмена Тогда
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "value", ВведенныеДанные));
	КонецЕсли;

	ОбработкаКомандСервиса(КонтекстВзаимодействия, Форма, ПараметрыЗапроса);

КонецПроцедуры

// Выполнение команды останова механизма ИПП. Закрытие всех форм,
// при необходимости отображается форма ошибки обращения к сервису ИПП
// и записывается ошибка в журнал регистрации.
//
Процедура ОстановитьМеханизм(КонтекстВзаимодействия, СтруктураКоманды)

	ЗакрытьВсеФормы(КонтекстВзаимодействия);

	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);

	Если ПараметрыКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КодОшибки = Неопределено;
	Для каждого ПараметрКоманды Из ПараметрыКоманды Цикл

		Если ПараметрКоманды.Свойство("errorCode", КодОшибки) Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если СокрЛП(Строка(КодОшибки)) <> "0" И КодОшибки <> Неопределено Тогда

		Подключение1СТакскомВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(КодОшибки);
		ПараметрыФормы = ПараметрыФормыОшибкиОбращения(КонтекстВзаимодействия);
		ПараметрыФормы.Вставить("ОписаниеОшибки", КодОшибки);
		ПараметрыФормы.Вставить("ПодробноеОписаниеОшибки",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка сервиса (%1).'"),
				Строка(КодОшибки)));

		Форма = ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету", ПараметрыФормы);
		Форма.КонтекстВзаимодействия = КонтекстВзаимодействия;

	КонецЕсли;

КонецПроцедуры

// Асинхронный обработчик ответа пользователя на вопрос о выходе из ИПП в
// процедуре ОбработатьВыходПользователя().
//
Процедура ПриОтветеПользователяНаВопросОВыходе(РезультатВопроса, ДопПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьВсеФормы(ДопПараметры.КонтекстВзаимодействия);
		ОбработатьКомандуФормы(ДопПараметры.КонтекстВзаимодействия, ДопПараметры.Форма, "exitUser");
	КонецЕсли;

КонецПроцедуры

// Удаление сессионных параметров контекста.
//
Процедура ОчиститьСессию(КонтекстВзаимодействия)

	СессионныеПараметры = КонтекстВзаимодействия.КСКонтекст.СессионныеПараметры;
	КоличествоПараметров = СессионныеПараметры.Количество();
	Если КоличествоПараметров > 0 Тогда
		Для ОбратныйИндекс = 1 По КоличествоПараметров Цикл
			Индекс = КоличествоПараметров - ОбратныйИндекс;
			Если СессионныеПараметры[Индекс].ОбластьВидимости <> "startUp" Тогда
				СессионныеПараметры.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Отображение состояния обращения к веб-сервису ИПП.
//
Процедура ОтобразитьСостояниеОбращениеКСервису()

	Состояние(
		,
		,
		НСтр("ru = 'Ожидание ответа от сервера Интернет-поддержки пользователей'"),
		БиблиотекаКартинок.ИнтернетПоддержкаПользователей);

КонецПроцедуры

// Закрытие всех форм контекста.
//
Процедура ЗакрытьВсеФормы(КонтекстВзаимодействия)

	Если КонтекстВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ФормыОбработки = КонтекстВзаимодействия.ФормыОбработки;
	Если ТипЗнч(ФормыОбработки) = Тип("Соответствие") Тогда

		ТипФормаКлиентскогоПриложения = Тип("ФормаКлиентскогоПриложения");
		Для каждого КлючЗначение Из ФормыОбработки Цикл
			Форма = КлючЗначение.Значение;
			Если ТипЗнч(Форма) = ТипФормаКлиентскогоПриложения И Форма.Открыта() Тогда
				Форма.ПрограммноеЗакрытие = Истина;
				Форма.Закрыть();
			КонецЕсли;
		КонецЦикла;

		// Очистить ссылки на объекты всех форм
		КонтекстВзаимодействия.ФормыОбработки = Новый Соответствие;

	КонецЕсли;

КонецПроцедуры

// Выполняет вызов обработчиков оповещения о завершении бизнес-процесса.
//
// Параметры:
//	ОбработчикиЗавершенияБизнесПроцесса - Структура - обработчики оповещения о
//		завершении бизнес-процесса;
//	КонтекстВзаимодействия - Структура, Неопределено - контекст бизнес-процесса
//		(см. функцию
//		Подключение1СТакскомВызовСервера.НовыйКонтекстВзаимодействия()).
//
Процедура ОповеститьОЗавершенииБизнесПроцесса(ОбработчикиЗавершенияБизнесПроцесса, КонтекстВзаимодействия)

	Если ОбработчикиЗавершенияБизнесПроцесса = Неопределено
		Или ОбработчикиЗавершенияБизнесПроцесса.Обработано Тогда
		Возврат;
	КонецЕсли;

	Если ОбработчикиЗавершенияБизнесПроцесса.Обработчик <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработчикиЗавершенияБизнесПроцесса.Обработчик, Неопределено);
	КонецЕсли;

	ОбработчикиЗавершенияБизнесПроцесса.Обработано = Истина;

КонецПроцедуры

// Программное закрытие формы контекста ИПП.
//
Процедура ЗакрытьФормуПрограммно(ЗакрываемаяФорма, КонтекстВзаимодействия)

	Если ЗакрываемаяФорма <> Неопределено Тогда

		Если ЗакрываемаяФорма.Открыта() Тогда

			Попытка
				ЗакрываемаяФорма.ПрограммноеЗакрытие = Истина;
			Исключение
				Подключение1СТакскомВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;

			ЗакрываемаяФорма.Закрыть();

		КонецЕсли;

		Если КонтекстВзаимодействия <> Неопределено
			И ТипЗнч(КонтекстВзаимодействия.ФормыОбработки) = Тип("Соответствие") Тогда
			КонтекстВзаимодействия.ФормыОбработки.Удалить(ЗакрываемаяФорма.ИмяФормы);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Определяет текст вопроса при выходе авторизованного пользователя из ИПП.
//
Функция ВопросПриВыходеАвторизованногоПользователя(КонтекстВзаимодействия)

	ЛогинПользователя = ЗначениеСессионногоПараметра(
		КонтекстВзаимодействия.КСКонтекст,
		"login");

	ТекстВопроса = НСтр("ru = 'Подключение пользователя с логином %1 к Интернет-поддержке будет
					|прекращено. Для нового подключения нужно заново ввести логин и пароль.
					|Продолжить?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ЛогинПользователя);

	Возврат ТекстВопроса;

КонецФункции

// Возвращает параметры формы "ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету",
// формируемые из контекста взаимодействия с сервисом ИПП.
//
Функция ПараметрыФормыОшибкиОбращения(КонтекстВзаимодействия)

	КСКонтекст        = КонтекстВзаимодействия.КСКонтекст;
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;

	Логин = ЗначениеСессионногоПараметра(КСКонтекст, "login");

	ПараметрыФормыОшибкиДоступа = Новый Структура;
	ПараметрыФормыОшибкиДоступа.Вставить("МестоЗапуска", ОсновныеПараметры.МестоЗапуска);
	ПараметрыФормыОшибкиДоступа.Вставить("СтартовыеПараметры", КонтекстВзаимодействия.СтартовыеПараметрыМеханизма);
	ПараметрыФормыОшибкиДоступа.Вставить("ПриНачалеРаботыСистемы", КСКонтекст.ПриНачалеРаботыСистемы);
	ПараметрыФормыОшибкиДоступа.Вставить("Логин", Логин);

	Возврат ПараметрыФормыОшибкиДоступа;

КонецФункции

// Итерационное копирование списка значений.
//
Процедура СкопироватьСписокЗначенийИтерационно(Источник, Приемник) Экспорт

	Приемник.Очистить();
	Для каждого ЭлементИсточника Из Источник Цикл
		Приемник.Добавить(ЭлементИсточника.Значение, ЭлементИсточника.Представление);
	КонецЦикла;

КонецПроцедуры

// Возвращает значение параметра контекста.
//
Функция ЗначениеСессионногоПараметра(КСКонтекст, ИмяПараметра) Экспорт

	СессионныеПараметры = КСКонтекст.СессионныеПараметры;
	ОсновныеПараметры   = КСКонтекст.ОсновныеПараметры;

	ЗначениеПараметра = Неопределено;

	Если ИмяПараметра = "libraryVersion" Тогда
		ЗначениеПараметра = ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки();

	ИначеЕсли ИмяПараметра = "APIVersion" Тогда
		ЗначениеПараметра = Подключение1СТакскомКлиентСервер.ВерсияAPIСервисаБизнесПроцессов();

	ИначеЕсли ИмяПараметра = "versionPlatform" Тогда
		СистИнфо = Новый СистемнаяИнформация;
		ЗначениеПараметра = СистИнфо.ВерсияПриложения;

	ИначеЕсли ИмяПараметра = "nameConfiguration" Тогда
		ЗначениеПараметра = ИмяКонфигурации();

	ИначеЕсли ИмяПараметра = "versionConfiguration" Тогда
		ЗначениеПараметра = ВерсияКонфигурации();

	ИначеЕсли ИмяПараметра = "language" Тогда
		ЗначениеПараметра = ТекКодЛокализации();

	ИначеЕсли ИмяПараметра = "enterPoint" Тогда
		ЗначениеПараметра = СокрЛП(ОсновныеПараметры.МестоЗапуска);

	ИначеЕсли ИмяПараметра = "versionUpdateConfiguration" Тогда

		ЗначениеПараметра = ВерсияОбработкиОбновления();

	Иначе

		ОписательПараметра = СессионныеПараметры.Получить(ИмяПараметра);
		Если ОписательПараметра <> Неопределено Тогда
			Возврат ОписательПараметра.Значение;
		КонецЕсли;

	КонецЕсли;

	Возврат ЗначениеПараметра;

КонецФункции

Функция ИмяКонфигурации()
	
	ПараметрыИПП = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыИПП.ИмяКонфигурации;
	
КонецФункции

Функция ВерсияКонфигурации()

	ПараметрыИПП = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыИПП.ВерсияКонфигурации;

КонецФункции

// Возвращает текущий код локализации.
Функция ТекКодЛокализации()
	
	ПараметрыИПП = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыИПП.КодЛокализации;
	
КонецФункции

// Возвращает версию обработки обновления конфигурации.
Функция ВерсияОбработкиОбновления()

	ПараметрыИПП = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыИПП.ВерсияОбработкиОбновления;

КонецФункции

// Функция создает и возвращает описатель контекста обработчика команд сервиса.
//
// Возвращаемое значение:
// Структура - структура со свойствами:
//	* Команды - Массив - стек команд сервиса во внутреннем представлении;
//	* ВыполнитьОстановку - Булево - если Истина, то требуется выполнить
//		остановку механизма ИПП;
//	* ПроизошлаОшибка - Булево - в процессе цикла обращения к веб-сервису ИПП
//		произошла ошибка;
//	* ПолноеОписаниеОшибки - Строка - полное описание ошибки для журнала
//		регистрации;
//	* ПользовательскоеОписаниеОшибки - Строка - представление ошибки
//		для пользователя;
//	* ДействияПриОшибкеДляСервера - Массив - массив элементов типа Строка -
//		имена действий, которые необходимо выполнить на сервере 1С:Предприятия;
//	ДействиеПриОшибкеДляКлиента - Строка - действие, которое нужно выполнить на
//		стороне клиента 1С:Предприятия при возникновении ошибки;
//	* ДопСвойства - Структура - структура с дополнительными данными обработчика
//		команд.
//
Функция НовыйКонтекстОбработчикаКоманд()

	КонтекстОбработчика = Новый Структура;
	КонтекстОбработчика.Вставить("Команды"                       , Новый Массив);
	КонтекстОбработчика.Вставить("ВыполнитьОстановку"            , Ложь);
	КонтекстОбработчика.Вставить("ПроизошлаОшибка"               , Ложь);
	КонтекстОбработчика.Вставить("ПолноеОписаниеОшибки"          , "");
	КонтекстОбработчика.Вставить("ПользовательскоеОписаниеОшибки", "");
	КонтекстОбработчика.Вставить("ДействияПриОшибкеДляСервера"   , Новый Массив);
	КонтекстОбработчика.Вставить("ДействиеПриОшибкеДляКлиента"   , "");
	КонтекстОбработчика.Вставить("ПротоколОбмена"                , "");
	КонтекстОбработчика.Вставить("ДопСвойства"                   , Новый Структура);

	Возврат КонтекстОбработчика;

КонецФункции

#КонецОбласти
