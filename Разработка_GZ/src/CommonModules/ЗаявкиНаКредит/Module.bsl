////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции для обработки заявок на кредиты:
// - формирование электронных представлений заявок и отчетов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область XDTO

// Возвращает корневой объект XDTO из пакета ЗаявкиНаКредит для указанного банка.
//
// Параметры:
//	Банк - СправочникСсылка.БанкиУниверсальногоОбмена - Банк.
//	ХарактеристикаСервиса - ПеречислениеСсылка.ХарактеристикиСервисаЗаявкиНаКредит - Характеристика сервиса, которую прочитать.
//
// Возвращаемое значение:
//	ОбъектXDTO или Неопределено.
//
Функция УсловияКредитованияXDTOдляБанка(Банк, ХарактеристикаСервиса) Экспорт

	УслугиБанка = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит,
		ХарактеристикаСервиса,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Банк),
		Истина);
		
	Если УслугиБанка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат УсловияКредитованияXDTO(УслугиБанка[0].Значение);

КонецФункции

// Возвращает объект XDTO УсловияКредитования из корневого элемента XML по схеме пакетаXDTO ЗаявкиНаКредит.
//
// Параметры:
//	ДанныеXML - Строка, ХранилищеЗначения - Данные XML из характеристик сервиса заявок на кредит.
//
// Возвращаемое значение:
//	ОбъектXDTO, Неопределено - Объект XDTO, прочитанный из XML, или Неопределено в случае ошибок или отсутствия данных.
//
Функция УсловияКредитованияXDTO(ДанныеXML) Экспорт

	Если ТипЗнч(ДанныеXML) = Тип("Строка") Тогда
		ТекстXML = ДанныеXML;
	ИначеЕсли ТипЗнч(ДанныеXML) = Тип("ХранилищеЗначения") Тогда
		ТекстXML = ДанныеXML.Получить();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Попытка
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(ТекстXML);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO("УсловияКредитования"));
		
	Исключение
	
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ИмяСобытия = НСтр("ru = 'Прочитать объект XDTO'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ЗаявкиНаКредитКлиентСервер.СобытиеЖурналаРегистрации(ИмяСобытия),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Возвращает XDTO объект из пакета ЗаявкиНаКредит с ответом банка по умолчанию
// или Неопределено, есть ответ по умолчанию не задан.
//
// Параметры:
//	Банк - СправочникСсылка.БанкиУниверсальногоОбмена - Банк.
//	ТипТранзакции - ПеречисленияСсылка.ТипыТранзакцийОбменаСБанкаимЗаявкиНаКредит - Тип ответной транзакции.
//	ДатаАктуальности - Дата - Дата, по состоянию на которую искать ответ банка.
//
// Возвращаемое значение:
//	ОбъектXDTO, Неопределено - Объект ОтветБанка из пакета XDTO ЗаявкиНаКредит 
//                             или Неопределено, если ответ банка по умолчанию отсутствует.
//
Функция ОтветБанкаПоУмолчанию(Банк, ТипТранзакции, Знач ДатаАктуальности) Экспорт

	// Определим по состоянию заявки, какая транзакция было получена из банка перед этим.
	Если НЕ ЗначениеЗаполнено(ТипТранзакции) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИмяТипаТранзакции = ОбщегоНазначения.ИмяЗначенияПеречисления(ТипТранзакции);

	// Найдем условия кредитования банка с текстами ответов по умолчанию.
	ХарактеристикиСервиса = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит,
		Перечисления.ХарактеристикиСервисаЗаявкиНаКредит.УсловияКредитовЗаймов,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Банк),
		Истина);

	Если ХарактеристикиСервиса.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	УсловияКредитования = УсловияКредитованияXDTO(ХарактеристикиСервиса[0].Значение);
	Если УсловияКредитования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТипаТранзакции = ВРег(ИмяТипаТранзакции);
	ДатаАктуальности  = НачалоДня(ДатаАктуальности);
	
	// Для разных ответов банк может задать разные тексты дополнительных сведений по умолчанию,
	// найдем среди них тот, который соответствуют текущему типу транзакции.
	Для каждого ОтветБанка Из УсловияКредитования.ОтветБанка Цикл
		Если ВРег(ОтветБанка.ТипТранзакции) <> ИмяТипаТранзакции Тогда
			Продолжить;
		КонецЕсли;
		Если ОтветБанка.ДатаНачала <= ДатаАктуальности 
			И ДатаАктуальности <= ОтветБанка.ДатаОкончания Тогда
			Возврат ОтветБанка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

// Возвращает XDTO объект из пакета ЗаявкиНаКредит с информацией о кредитном продукте банка.
//
// Параметры:
//	УсловияКредитованияXDTO - ОбъектXDTO - Корневой объект из пакета XDTO ЗаявкиНаКредит, в котором производится поиск.
//	ИдентфикаторКредитногоПродукта - Строка - Идентификатор искомого кредитного продукта.
//	ДатаАктуальности - Дата - Дата, по состоянию на которую возвращает информация.
//
// Возвращаемое значение:
//	ОбъектXDTO или Неопределено
//
Функция НайтиКредитныйПродукт(УсловияКредитованияXDTO, Знач ИдентфикаторКредитногоПродукта, Знач ДатаАктуальности) Экспорт

	Если УсловияКредитованияXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТекущаяВерсияСервиса = УниверсальныйОбменСБанкамиКлиентСервер.ВерсияСервиса(Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит);
	ДатаАктуальности     = НачалоДня(ДатаАктуальности);
	ИдентфикаторКредитногоПродукта = ВРег(ИдентфикаторКредитногоПродукта);

	КредитныйПродуктПоУмолчанию = Неопределено;
	
	Для каждого КредитныйПродукт Из УсловияКредитованияXDTO.КредитныйПродукт Цикл

		Если КредитныйПродукт.ДатаНачала > ДатаАктуальности
			ИЛИ КредитныйПродукт.ДатаОкончания < ДатаАктуальности Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверим версии сервиса, для которых применяются условия.
		Если ЗначениеЗаполнено(КредитныйПродукт.МинВерсияСервиса)
			И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, КредитныйПродукт.МинВерсияСервиса) < 0 Тогда
			// Кредитный продукт может быть корректно отображен только в следующих версиях программы, 
			// для текущей версии его пропускаем.
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КредитныйПродукт.МаксВерсияСервиса)
			И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, КредитныйПродукт.МаксВерсияСервиса) > 0 Тогда
			// Кредитный продукт предназначен для отображения на предыдущих версиях программы,
			// для текущей версии его пропускаем.
			Продолжить;
		КонецЕсли;
	
		Если КредитныйПродукт.Свойства().Получить("Идентификатор") = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(КредитныйПродукт.Идентификатор) Тогда
			// В старых настройках могут быть продукты, у которых еще не было идентификатора.
			// Если не найдем никакого продукта с искомым идентификатором, то вернем без идентификатора.
			КредитныйПродуктПоУмолчанию = КредитныйПродукт;
			Продолжить;
		КонецЕсли;
		
		Если ВРег(КредитныйПродукт.Идентификатор) = ИдентфикаторКредитногоПродукта Тогда
			Возврат КредитныйПродукт;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат КредитныйПродуктПоУмолчанию;

КонецФункции

#КонецОбласти

#Область ОбращениеКСервису

// Структура параметров для алгоритма, передающего информацию о ходе фонового задания в форму с индикатором.
//
// Возвращаемое значение:
//	Структура - см. переменную Состояние.
//
Функция СостояниеПрогрессаПодписанияИОтправки() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяШага", ""); // 1 = "подготовка"; 2 = "подписание"; 3 = "транзакции"; 4 = "отправка"
	
	Состояние = Новый Структура;
	Состояние.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	Состояние.Вставить("ВыполненоДействий", 0);  // часть выполненных действий шага
	Состояние.Вставить("КоличествоДействий", 0); // сколько условных действий составляет шаг
	
	Возврат Состояние;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДанныхСервиса

// Процедура - обработчик начала получения данных о сервисе заявок на кредит.
// Предназначена для вызова из модуля форм, в которых требуются актуальные данные о сервисе.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - должна содержать реквизиты СведенияОСервисе И СведенияОДлительнойОперации
//
Процедура НачатьОбновлениеДанныхСервиса(Форма) Экспорт 

	СведенияОСервисе = Форма.СведенияОСервисе;
	СведенияОДлительнойОперации = Форма.СведенияОДлительнойОперации;
	
	Если Форма.ТолькоПросмотр 
		ИЛИ СведенияОСервисе.ДанныеАктуальны
		ИЛИ СведенияОСервисе.ТребуетсяПодключениеИнтернетПоддержки Тогда
		// Обновление не требуется или невозможно.
		Возврат;
	КонецЕсли;
	
	Если СведенияОДлительнойОперации.ДлительнаяОперация <> Неопределено Тогда
		// Не завершено предыдущее фоновое задание, новое не запускаем.
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Форма.УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение           = 0; // Не ждем завершения.
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление данных сервиса 1С:Кредит'");
	
	СведенияОДлительнойОперации.Имя = "ОбновитьДанныеСервиса";
	СведенияОДлительнойОперации.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ЗаявкаНаКредит.ОбновитьДанныеСервиса",
		Новый Структура(),
		ПараметрыВыполнения);

КонецПроцедуры

#КонецОбласти

#Область СостояниеЗаявокНаКредит

// Возвращает признак того, что заявка была одобрена.
//
// Параметры:
//  Состояние - ПеречислениеСсылка.СостоянияЗаявокНаКредит - текущее состояние заявки.
// 
// Возвращаемое значение:
//   Булево - Истина, если заявка ранее уже была одобрена банком.
//
Функция ЗаявкаОдобрена(Состояние) Экспорт 

	Возврат(Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаКредит.Одобрено")
		ИЛИ Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаКредит.КредитЗапрошен") 
		ИЛИ Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаКредит.Готово"));
	
КонецФункции	

// Возвращает цвет текста или фона для элемента, отображающего состояние заявки на кредит.
//
// Параметры:
//  Состояние - ПеречислениеСсылка.СостоянияЗаявокНаКредит - состояние заявки на кредит.
// 
// Возвращаемое значение:
// 	Цвет - Цвет состояния.
//
Функция ЦветСостояния(Состояние) Экспорт 

	ЦветСостояния = Новый Цвет; // Автоцвет

	Если ЗаявкаОдобрена(Состояние) Тогда
		ЦветСостояния = ЦветаСтиля.ЦветШрифтаСостояниеЗаявкиНаКредитОдобрено;
	КонецЕсли;	
	
	Возврат ЦветСостояния;
	
КонецФункции	

// Возвращает документооборот по заявке на кредит.
//
// Параметры:
//	ЗаявкаНаКредит - ДокументСсылка.ЗаявкаНаКредит - Ссылка на заявку.
//
// Возвращаемое значение:
//	СправочникСсылка.ДокументооборотыОбменаСБанками - ссылка на документооборот по заявке.
//
Функция ДокументооборотПоЗаявке(ЗаявкаНаКредит) Экспорт

	Результат = Справочники.ДокументооборотыОбменаСБанками.ПустаяСсылка();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаКредит", ЗаявкаНаКредит);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СостояниеЗаявокНаКредит.Транзакция.Документооборот КАК Документооборот
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаКредит КАК СостояниеЗаявокНаКредит
	|ГДЕ
	|	СостояниеЗаявокНаКредит.ЗаявкаНаКредит = &ЗаявкаНаКредит";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Документооборот) Тогда
			Результат = Выборка.Документооборот;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Заполняет реквизиты, отражающие состояние документооборота по заявке на кредит.
//
// Параметры:
//  Документооборот - СправочникСсылка.ДокументооборотыОбменаСБанками - набор взаимодействий с банком по определенному
//                                                                      предмету обмена (например, заявке на кредит).
//  ОписаниеСтатуса - Структура - см. УниверсальныйОбменСБанкамиПереопределяемый.СтатусДокументооборота()
//
Процедура СтатусДокументооборота(Документооборот, ОписаниеСтатуса) Экспорт
	
	// По-умолчанию состояние как будто заявка во все банки просрочена.
	ОписаниеСтатуса.Завершен         = Истина;
	ОписаниеСтатуса.ОжидаетсяОтвет   = Ложь;
	
	ДатаСегодня = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документооборот", Документооборот);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостояниеЗаявокНаКредит.Состояние КАК Состояние,
	|	СостояниеЗаявокНаКредит.ЕстьОшибки КАК ЕстьОшибки,
	|	СостояниеЗаявокНаКредит.СрокАктуальности КАК СрокАктуальности,
	|	НАЧАЛОПЕРИОДА(СостояниеЗаявокНаКредит.ДатаИзменения, ДЕНЬ) КАК ДатаИзменения
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаКредит КАК СостояниеЗаявокНаКредит
	|ГДЕ
	|	СостояниеЗаявокНаКредит.Транзакция.Документооборот = &Документооборот
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостояниеЗаявокНаКредит.ДатаИзменения УБЫВ,
	|	СостояниеЗаявокНаКредит.Состояние.Порядок УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);

	Если Выборка.Следующий() Тогда
		
		ИстекСрокАктуальности = ЗначениеЗаполнено(Выборка.СрокАктуальности)
			И Выборка.СрокАктуальности < ДатаСегодня;

		// Может быть ситуация, когда банк сначала прислал одно решение, а потом передумал
		// и через несколько дней прислал другое.
		// Поэтому в течение 3-х месяцев с момента последнего изменения считаем, что можем получить еще какой-то ответ.
		ИзмененияМеньшеТрехМесяцевНазад = ЗначениеЗаполнено(Выборка.ДатаИзменения)
			И ДобавитьМесяц(Выборка.ДатаИзменения, 3) > ДатаСегодня;

		Если Выборка.Состояние = Перечисления.СостоянияЗаявокНаКредит.Черновик
			ИЛИ Выборка.Состояние = Перечисления.СостоянияЗаявокНаКредит.НеОтправлено Тогда
			// В обычной ситуации сюда попасть не должны, т.к. не отправляли еще и документооборот не создавали.
			ОписаниеСтатуса.Завершен       = Ложь;
			ОписаниеСтатуса.ОжидаетсяОтвет = Ложь;

		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияЗаявокНаКредит.Отправлено
			ИЛИ Выборка.Состояние = Перечисления.СостоянияЗаявокНаКредит.ОжидаетРешения
			ИЛИ Выборка.Состояние = Перечисления.СостоянияЗаявокНаКредит.КредитЗапрошен Тогда
			// Ждем ответ от банка на заявку или акцепт.
			ОписаниеСтатуса.Завершен       = Ложь;
			ОписаниеСтатуса.ОжидаетсяОтвет = НЕ ИстекСрокАктуальности ИЛИ ИзмененияМеньшеТрехМесяцевНазад;

		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияЗаявокНаКредит.Одобрено Тогда
			// Получили одобрение, если разобрали файл ответа без ошибок,
			// то теперь пользователь может выбрать или не выбрать данный банк (ждем акцепт пользователя).
			// Если возникла ошибка, то банк может попытаться прислать исправленный вариант ответа,
			// поэтому продолжаем проверять входящие сообщения.
			ОписаниеСтатуса.Завершен       = Ложь;
			ОписаниеСтатуса.ОжидаетсяОтвет = Выборка.ЕстьОшибки
				ИЛИ НЕ ИстекСрокАктуальности
				ИЛИ ИзмененияМеньшеТрехМесяцевНазад;

		Иначе
			// Во всех остальных случаях от банка ничего не ждем, считаем что процесс завершился,
			// если с момента последнего изменения состояния прошло больше месяца.
			ОписаниеСтатуса.ОжидаетсяОтвет = НЕ ИстекСрокАктуальности ИЛИ ИзмененияМеньшеТрехМесяцевНазад;
			ОписаниеСтатуса.Завершен       = НЕ ОписаниеСтатуса.ОжидаетсяОтвет;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу этапов отправки заявки.
//
// Параметры:
//	РеквизитыДокументооборота - Структура - см. УниверсальныйОбменСБанками.РеквизитыДокументооборота().
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры формы.
//	ТаблицаЭтаповОтправки - ТаблицаЗначений - см. УниверсальныйОбменСБанками.ЗаготовкаТаблицыЭтаповОтправки().
//
Процедура ЗаполнитьТаблицуЭтаповОтправки(РеквизитыДокументооборота, ДополнительныеПараметры, ТаблицаЭтаповОтправки) Экспорт

    ДатаОтправкиЗаявки  = '0001-01-01';
    МожноДобавлятьЭтапы = Истина;
    
	Транзакции = УниверсальныйОбменСБанками.ТранзакцииПоДокументообороту(РеквизитыДокументооборота.Документооборот);
	ТаблицаДанныхТранзакций = УниверсальныйОбменСБанками.РеквизитыТранзакций(Транзакции);
	
	ЗначенияПеречисления = Метаданные.Перечисления.СостоянияЗаявокНаКредит.ЗначенияПеречисления;

	// 1. Сама заявка на кредит.
	СведенияОТранзакции = НайтиТранзакцию(
		ТаблицаДанныхТранзакций,
		Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ЗаявкаНаКредит);

	Если СведенияОТранзакции <> Неопределено Тогда
		ДатаОтправкиЗаявки = СведенияОТранзакции.ДатаТранспорта;

		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= ЗначенияПеречисления.Отправлено.Синоним;
		СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.ЭтапПройден					= Истина;
		
		// Покажем в комментарии, когда получена банком.
		СведенияОТранзакции = НайтиТранзакцию(
			ТаблицаДанныхТранзакций,
			Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ИзвещениеОПолученииБанкомЗаявки);
		Если СведенияОТранзакции <> Неопределено Тогда
			СтрокаЭтапа.КомментарийКСостоянию	= СтрШаблон(НСтр("ru = 'Получено %1 %2'"),
				РеквизитыДокументооборота.Банк,
				Формат(СведенияОТранзакции.ДатаТранспорта, "ДЛФ=DT"));
		КонецЕсли;
		
	Иначе
		// Заявка вообще не была отправлена.
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= ЗначенияПеречисления.НеОтправлено.Синоним;
		СтрокаЭтапа.Дата						= '0001-01-01';
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.ЭтапПройден					= Ложь;
		
		// Другие этапы не показываем.
		МожноДобавлятьЭтапы = Ложь;
	КонецЕсли;
	

	// 2. Решение банка.
	Если МожноДобавлятьЭтапы Тогда

		СведенияОТранзакции = НайтиТранзакцию(
			ТаблицаДанныхТранзакций,
			Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ПоложительноеКредитноеРешение,
			ДатаОтправкиЗаявки);
		
		Если СведенияОТранзакции <> Неопределено Тогда
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= ЗначенияПеречисления.Одобрено.Синоним;
			СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
			СтрокаЭтапа.КомментарийКСостоянию		= "";
			СтрокаЭтапа.ЭтапПройден					= Истина;
		Иначе
			СведенияОТранзакции = НайтиТранзакцию(
				ТаблицаДанныхТранзакций,
				Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ОтрицательноеКредитноеРешение,
				ДатаОтправкиЗаявки);
			Если СведенияОТранзакции <> Неопределено Тогда
				СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
				СтрокаЭтапа.ТекстНадписи				= ЗначенияПеречисления.Отказано.Синоним;
				СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
				СтрокаЭтапа.КомментарийКСостоянию		= "";
				СтрокаЭтапа.ЭтапПройден					= Истина;
			
				// Другие этапы не показываем.
				МожноДобавлятьЭтапы = Ложь;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	

	// 3. Акцепт заемщика.
	Если МожноДобавлятьЭтапы Тогда
		СведенияОТранзакции = НайтиТранзакцию(
			ТаблицаДанныхТранзакций,
			Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.АкцептЗаемщика,
			ДатаОтправкиЗаявки);

		Если СведенияОТранзакции <> Неопределено Тогда
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= ЗначенияПеречисления.КредитЗапрошен.Синоним;
			СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
			СтрокаЭтапа.КомментарийКСостоянию		= "";
			СтрокаЭтапа.ЭтапПройден					= Истина;
		Иначе
			// Другие этапы не показываем.
			МожноДобавлятьЭтапы = Ложь;
		КонецЕсли;
	КонецЕсли;

	
	// 4. Получение банком акцепта.
	Если МожноДобавлятьЭтапы Тогда
		СведенияОТранзакции = НайтиТранзакцию(
			ТаблицаДанныхТранзакций,
			Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ИзвещениеОПолученииБанкомАкцептаЗаемщика,
			ДатаОтправкиЗаявки);
			
		Если СведенияОТранзакции <> Неопределено Тогда
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= ЗначенияПеречисления.Готово.Синоним;
			СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
			СтрокаЭтапа.КомментарийКСостоянию		= "";
			СтрокаЭтапа.ЭтапПройден					= Истина;
		Иначе
			// Другие этапы не показываем.
			МожноДобавлятьЭтапы = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Если банк в процессе какого-либо шага прислал тип транзакции "Ошибка", то обмен считается завершенным.
	// Покажем статус ошибки самым последним шагом.
	Если ТаблицаЭтаповОтправки.Количество() < 4 Тогда // Отображение больше 4-х этапов форма не поддерживает.
		СведенияОТранзакции = НайтиТранзакцию(
			ТаблицаДанныхТранзакций,
			Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.Ошибка,
			ДатаОтправкиЗаявки);

		Если СведенияОТранзакции <> Неопределено Тогда
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Ошибка'");
			СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
			СтрокаЭтапа.КомментарийКСостоянию		= "";
			СтрокаЭтапа.ЭтапПройден					= Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область БизнесСтатистика

// Записывает данные бизнес-статистики в Пульт и Бизнес-статистику 1С-Фреш.
//
// Параметры:
//   ИдентификаторБанка - Строка - Идентификатор банка в сервисе.
//   ИмяОперации - Строка - имя ключевой операции бизнес-статистики.
//
Процедура ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, ИмяОперации) Экспорт
	
	ИмяКлючевойОперации = СтрШаблон("СтатистикаБП.ЗаявкиНаКредит.%1.%2", ИдентификаторБанка, ИмяОперации);
	
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие(ИмяКлючевойОперации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СведенияУказаны(ПроверяемыеСведения)
	
	Результат = Ложь;
	
	Для Каждого ЭлементСведений Из ПроверяемыеСведения Цикл
		
		Если ТипЗнч(ЭлементСведений.Значение) = Тип("Булево") Тогда
			// Для булево нет значения, которое соответствует "не заполнено",
			// поэтому булевы поля не учитываем при анализе заполненности всей структуры.
			Продолжить;

		ИначеЕсли ТипЗнч(ЭлементСведений.Значение) = Тип("Структура") Тогда
			Результат = СведенияУказаны(ЭлементСведений.Значение);
		Иначе
			Результат = ЗначениеЗаполнено(ЭлементСведений.Значение);
		КонецЕсли;
		
		Если Результат Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область XDTO

// Возвращает URI пространства имен XDTO пакета с характеристиками сервиса по кредитам.
//
// Возвращаемое значение:
//	Строка - URI пространства имен.
//
Функция URIПространстваИмен()
	Возврат "http://www.v8.1c.ru/banks/CreditApplication";
КонецФункции

// Возвращает XDTO-тип по его имени.
//
// Возвращаемое значение:
//	ТипЗначенияXDTO, ТипОбъектаXDTO - ссылка на запрошенный XDTO-тип.
//
Функция ТипXDTO(ИмяТипа)
	Возврат ФабрикаXDTO.Тип(URIПространстваИмен(), ИмяТипа);
КонецФункции

#КонецОбласти

#Область ФормированиеЗаявкиНаКредит

Процедура ВывестиУзел_ЗаявкаНаКредит_Документ(Компоновщик, ПараметрыПредставления)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(Компоновщик, "ПредметОбмена",                   ПараметрыПредставления.ИдентификаторЗаявки, "Т,255");
	ВывестиАтрибут(Компоновщик, "ДатаПредметаОбмена",              ПараметрыПредставления.ДатаЗаявки, "Д");
	ВывестиАтрибут(Компоновщик, "СуммаКредита",                    ПараметрыПредставления.СуммаКредита, "Ч,15");
	ВывестиАтрибут(Компоновщик, "Срок",                            ПараметрыПредставления.СрокКредита, "Ч,4");
	ВывестиАтрибут(Компоновщик, "ЦельКредита",                     ПараметрыПредставления.ЦельКредита, "Т,2");
	ВывестиАтрибут(Компоновщик, "ИдентификаторКредитногоПродукта", ПараметрыПредставления.ИдентификаторКредитногоПродукта);
	
	ВывестиУзел_ЗаявкаНаКредит_Банк(Компоновщик, ПараметрыПредставления);
	
	ВывестиУзел_ЗаявкаНаКредит_Организация(Компоновщик, ПараметрыПредставления);
	
	ВывестиУзел_ЗаявкаНаКредит_КонтактноеЛицо(Компоновщик, ПараметрыПредставления);
	
	ВывестиУзел_ЗаявкаНаКредит_ПоказателиБизнеса(Компоновщик, ПараметрыПредставления);
	
	ВывестиУзел_ЗаявкаНаКредит_ДополнительныеПоказатели(Компоновщик, ПараметрыПредставления);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Документ
	
КонецПроцедуры

Процедура ВывестиУзел_ЗаявкаНаКредит_Банк(Компоновщик, ПараметрыПредставления)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Банк");
	
	ВывестиАтрибут(Компоновщик, "ИНН",  ПараметрыПредставления.Банк.ИНН);
	ВывестиАтрибут(Компоновщик, "Наим", ПараметрыПредставления.Банк.Наименование);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Банк
	
КонецПроцедуры

Процедура ВывестиУзел_ЗаявкаНаКредит_Организация(Компоновщик, ПараметрыПредставления)
	
	ОтправительЮЛ = ПараметрыПредставления.ОтправительЮЛ;
	ОтправительИП = ПараметрыПредставления.ОтправительИП;
	
	Компоновщик.ЗаписатьНачалоЭлемента("Организация");
	
	ВывестиАтрибут(Компоновщик, "ОКВЭД", 	ПараметрыПредставления.ОКВЭД, "Т,8");
	ВывестиАтрибут(Компоновщик, "ОКОПФ", 	ПараметрыПредставления.ОКОПФ, "Т,5");
	ВывестиАтрибут(Компоновщик, "ДатаРег", 	ПараметрыПредставления.ДатаРегистрации, "Д");
	
	Если ПараметрыПредставления.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Компоновщик.ЗаписатьНачалоЭлемента("ЮЛ");
		
		ВывестиАтрибут(Компоновщик, "ПолнНаимОрг", ОтправительЮЛ.Наименование,     "Т,1000");
		ВывестиАтрибут(Компоновщик, "СокрНаимОрг", ОтправительЮЛ.СокрНаименование, "Т,255");
		ВывестиАтрибут(Компоновщик, "ИННЮЛ",       ОтправительЮЛ.ИНН,              "Т,10");
		ВывестиАтрибут(Компоновщик, "КПП",         ОтправительЮЛ.КПП,              "Т,9");
		ВывестиАтрибут(Компоновщик, "ОГРН",        ОтправительЮЛ.ОГРН,             "Т,13");
		ВывестиАтрибут(Компоновщик, "Нерезидент",  ОтправительЮЛ.Нерезидент,       "Ч,1");
		
		ВывестиУниверсальныйУзел_СведенияОФЛТип(Компоновщик, ПараметрыПредставления.Руководитель, "Руководитель");
		
		ВывестиУзел_ЗаявкаНаКредит_Учредители(Компоновщик, ПараметрыПредставления);
		
		ВывестиУниверсальныйУзел_АдресТип(Компоновщик, ОтправительЮЛ.СведенияОбАдресе);
		
		Если ЗначениеЗаполнено(ОтправительЮЛ.СокращенноеНаименованиеДоРеорганизации) 
			ИЛИ ЗначениеЗаполнено(ОтправительЮЛ.ПолноеНаименованиеДоРеорганизации) Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("СвРеорг");
			ВывестиАтрибут(Компоновщик, "ПолнНаимРеорг", ОтправительЮЛ.ПолноеНаименованиеДоРеорганизации, "Т,1000");
			ВывестиАтрибут(Компоновщик, "СокрНаимРеорг", ОтправительЮЛ.СокращенноеНаименованиеДоРеорганизации, "Т,255");
			Компоновщик.ЗаписатьКонецЭлемента(); // СвРеорг
		КонецЕсли;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // ЮЛ
		
	Иначе
		Компоновщик.ЗаписатьНачалоЭлемента("ИП");
		
		ВывестиАтрибут(Компоновщик, "ОГРНИП",  ОтправительИП.ОГРН,            "Т,15");
		
		ВывестиУниверсальныйУзел_СведенияОФЛТип(Компоновщик, ПараметрыПредставления.Руководитель, "Предприниматель");
		
		Компоновщик.ЗаписатьКонецЭлемента(); // ИП
		
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Организация
	
КонецПроцедуры

Процедура ВывестиУзел_ЗаявкаНаКредит_КонтактноеЛицо(Компоновщик, ПараметрыПредставления)
	
	КонтактноеЛицо = ПараметрыПредставления.КонтактноеЛицо;
	
	Если НЕ СведенияУказаны(КонтактноеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Компоновщик.ЗаписатьНачалоЭлемента("КонтактноеЛицо");
	
	ВывестиНеобязательныйАтрибут(Компоновщик, "Должность", КонтактноеЛицо.Должность, "Т,255");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Телефон", КонтактноеЛицо.Телефон, "Т,255");
	ВывестиНеобязательныйАтрибут(Компоновщик, "ЭлПочта", КонтактноеЛицо.ЭлПочта, "Т,255");
	
	ВывестиУниверсальныйУзел_ФИОТип(Компоновщик, КонтактноеЛицо.ФИО);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // КонтактноеЛицо
	
КонецПроцедуры

Процедура ВывестиУзел_ЗаявкаНаКредит_ПоказателиБизнеса(Компоновщик, ПараметрыПредставления)
	
	Компоновщик.ЗаписатьНачалоЭлемента("ПоказателиБизнеса");
	
	ВывестиАтрибут(Компоновщик, "ДатаФактНачалаДеят", ПараметрыПредставления.ДатаФактНачалаДеят, "Д");
	ВывестиАтрибут(Компоновщик, "ДатаНачалаУчета", ПараметрыПредставления.ДатаНачалаУчета, "Д");
	ВывестиНеобязательныйАтрибут(Компоновщик, "ДатаОтчетности", ПараметрыПредставления.ДатаОтчетности, "Д");
	
	ВывестиУзел_ЗаявкаНаКредит_СистемыНО(Компоновщик, ПараметрыПредставления);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ПоказателиБизнеса
	
КонецПроцедуры

Процедура ВывестиУзел_ЗаявкаНаКредит_ДополнительныеПоказатели(Компоновщик, ПараметрыПредставления)
	
	Если ПараметрыПредставления.ДополнительныеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Компоновщик.ЗаписатьНачалоЭлемента("ДополнительныеПоказатели");
	
	Для каждого Показатель Из ПараметрыПредставления.ДополнительныеПоказатели Цикл
		Компоновщик.ЗаписатьНачалоЭлемента(Показатель.Идентификатор);
		Если Показатель.ДанныеОтсутствуют Тогда
			ВывестиАтрибут(Компоновщик, "ДанныеОтсутствуют", Число(Показатель.ДанныеОтсутствуют), "Ч,1");
		ИначеЕсли ЗначениеЗаполнено(Показатель.Значение) Тогда
			ВывестиТекст(Компоновщик, Показатель.Значение);
		КонецЕсли;
		Компоновщик.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ДополнительныеПоказатели
	
КонецПроцедуры

Процедура ВывестиУзел_ЗаявкаНаКредит_СистемыНО(Компоновщик, ПараметрыПредставления)
	
	Компоновщик.ЗаписатьНачалоЭлемента("СистемыНО");
	
	Для Каждого СистемаНО Из ПараметрыПредставления.СистемыНО Цикл
		Компоновщик.ЗаписатьНачалоЭлемента("СистемаНО");
		СистемаНО = Лев(СистемаНО, 20);
		Компоновщик.ЗаписатьТекст(СистемаНО);
		Компоновщик.ЗаписатьКонецЭлемента(); // СистемаНО
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // СистемыНО
	
КонецПроцедуры

Функция СписокПараметровМакета()
	
	ПараметрыМакета = Новый ТаблицаЗначений;
	ПараметрыМакета.Колонки.Добавить("ИмяПараметра", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ПараметрыМакета.Колонки.Добавить("ПозицияНачала", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
	ПараметрыМакета.Колонки.Добавить("ПозицияКонца", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
	ПараметрыМакета.Колонки.Добавить("ЗначениеПараметра");
	
	Возврат ПараметрыМакета;
	
КонецФункции

Функция ПодобратьТекстыМакетов(КредитныеПродукты, ЭтоЮридическоеЛицо, ДатаСогласия)
	
	СписокБанков = ОбщегоНазначения.ВыгрузитьКолонку(КредитныеПродукты, "Банк", Истина);
	
	ИмяХарактеристики = ?(ЭтоЮридическоеЛицо,
		Перечисления.ХарактеристикиСервисаЗаявкиНаКредит.СогласиеНаОбработкуДанныхЮЛ,
		Перечисления.ХарактеристикиСервисаЗаявкиНаКредит.СогласиеНаОбработкуДанныхФЛ);

	// Для выгрузки текстов согласий по ранее отправленным заявкам, которые сейчас уже в режиме только просмотр,
	// и банки которых могут быть сейчас уже неактивны, указываем,
	// что необходимо возвращать характеристики вне зависимости от активности банков и их услуг.
	ХарактеристикиСервиса = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит,
		ИмяХарактеристики,
		СписокБанков,
		Истина);

	Для каждого КредитныйПродукт Из КредитныеПродукты Цикл
		
		ХарактеристикиБанка = ХарактеристикиСервиса.НайтиСтроки(Новый Структура("Банк", КредитныйПродукт.Банк));
		
		Для каждого ХарактеристикаБанка Из ХарактеристикиБанка Цикл
			
			УсловияКредитования = УсловияКредитованияXDTO(ХарактеристикаБанка.Значение);
			Если УсловияКредитования = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		
			Для каждого Согласие Из УсловияКредитования.СогласиеНаОбработкуДанных Цикл
				
				Если Согласие.ДатаНачала > ДатаСогласия
				 ИЛИ Согласие.ДатаОкончания < ДатаСогласия Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрНайти(Согласие.ТекстМакета, "<HTML") = 0 И СтрНайти(Согласие.ТекстМакета, "<html") = 0 Тогда
					// Если возникает ошибка, то далее возьмем макет по-умолчанию.
					ИмяСобытия = НСтр("ru = 'Подобрать тексты макетов'", ОбщегоНазначения.КодОсновногоЯзыка());
					ЗаписьЖурналаРегистрации(
						ЗаявкиНаКредитКлиентСервер.СобытиеЖурналаРегистрации(ИмяСобытия),
						УровеньЖурналаРегистрации.Ошибка,
						,
						КредитныйПродукт.Банк,
						НСтр("ru = 'Текст макета не является корректным html-текстом: не содержит тега html'"));
					Продолжить;
					
				КонецЕсли;
				
				Если Согласие.Свойства().Получить("ИдентификаторКредитногоПродукта") = Неопределено
					ИЛИ НЕ ЗначениеЗаполнено(Согласие.ИдентификаторКредитногоПродукта) Тогда
					Если НЕ ПустаяСтрока(КредитныйПродукт.ТекстМакета) Тогда
						Продолжить; // Пропускаем общее согласие, если уже было найдено специальное.
					КонецЕсли;
				ИначеЕсли Согласие.ИдентификаторКредитногоПродукта <> КредитныйПродукт.ИдентификаторКредитногоПродукта Тогда
					Продолжить; // Пропускаем согласие, если оно не относится к текущему кредитному продукту.
				КонецЕсли;
				
				КредитныйПродукт.ТекстМакета = Согласие.ТекстМакета;
				КредитныйПродукт.ПараметрыМакета = РазметкаТекста(КредитныйПродукт.ТекстМакета);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
		
	// остальные заполняем макетом по-умолчанию
	ТекстМакета = "";
	ПараметрыМакета = Неопределено;
	Для Каждого КредитныйПродукт Из КредитныеПродукты Цикл
		Если Не ПустаяСтрока(КредитныйПродукт.ТекстМакета) Тогда
			Продолжить;
		КонецЕсли;
			
		Если ПустаяСтрока(ТекстМакета) Тогда
			ИмяХарактеристики = ?(ЭтоЮридическоеЛицо, "СогласиеНаОбработкуДанныхЮЛ", "СогласиеНаОбработкуДанныхФЛ");
			ТекстМакета = Документы.ЗаявкаНаКредит.ПолучитьМакет(ИмяХарактеристики).ПолучитьТекст();
			ПараметрыМакета = РазметкаТекста(ТекстМакета);
		КонецЕсли;
		КредитныйПродукт.ТекстМакета = ТекстМакета;
		КредитныйПродукт.ПараметрыМакета = ПараметрыМакета;

	КонецЦикла;
	
	Возврат ТекстМакета;
	
КонецФункции

// Анализирует, какие параметры есть в переданном тексте.
//
// Параметры:
//  ТекстМакета  - HTML-текст - текст, содержащий параметры в фигурных скобках. Для использования "{" в тексте, а не в
//                              параметре нужно ее указать два раза.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. СписокПараметровМакета()
//
Функция РазметкаТекста(ТекстМакета)
	
	ПараметрыМакета = СписокПараметровМакета();

	ПозицияПараметра = СтрНайти(ТекстМакета, "{");
	Пока ПозицияПараметра <> 0 Цикл
		
		Если Сред(ТекстМакета, ПозицияПараметра + 1, 1) = "{" Тогда
			// это не параметр, а экранированный символ
			ПозицияПараметра = ПозицияПараметра + 1;

		Иначе
			
			ПараметрМакета = ПараметрыМакета.Добавить();
			ПараметрМакета.ПозицияНачала = ПозицияПараметра;
			ПараметрМакета.ПозицияКонца  = СтрНайти(ТекстМакета, "}", , ПозицияПараметра);
			Если ПараметрМакета.ПозицияКонца = 0 Тогда // ошибочный формат текста макета
				
				ПараметрыМакета.Удалить(ПараметрМакета);
				ПозицияПараметра = СтрДлина(ТекстМакета);

			Иначе

				ПараметрМакета.ИмяПараметра = Сред(ТекстМакета,
					ПараметрМакета.ПозицияНачала + 1,
					ПараметрМакета.ПозицияКонца - ПараметрМакета.ПозицияНачала - 1);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПозицияПараметра = ПозицияПараметра + 1;
		ПозицияПараметра = СтрНайти(ТекстМакета, "{", , ПозицияПараметра);
	
	КонецЦикла;
	
	Возврат ПараметрыМакета;
	
КонецФункции

Процедура ВывестиУзел_ЗаявкаНаКредит_Учредители(Компоновщик, ПараметрыПредставления)

	ОтправительЮЛ = ПараметрыПредставления.ОтправительЮЛ;
	РуководительЕдинственныйУчредитель = 
		(ОтправительЮЛ.СоставУчредителей = Перечисления.СоставУчредителейЮридическогоЛица.РуководительЕдинственныйУчредитель);
	
	Если ОтправительЮЛ.Учредители.Количество() = 0 И НЕ РуководительЕдинственныйУчредитель Тогда
		// В состав учредителей могут входит другие юридические лица.
		// Сейчас не поддерживается передача данных о них.
		Возврат;
	КонецЕсли;
	
	Компоновщик.ЗаписатьНачалоЭлемента("Учредители");
	ВывестиАтрибут(Компоновщик, "РуководительЕдинственныйУчредитель", ?(РуководительЕдинственныйУчредитель, "1", "0"));
	
	Для каждого СтрокаУчредителя Из ОтправительЮЛ.Учредители Цикл

		СведенияФЛ = НовыеСведенияФЛ();
		// Заполняем структуру сведений о физлице для выгрузки в xml.
		ЗаполнитьЗначенияСвойств(СведенияФЛ.ФИО, СтрокаУчредителя);
		СведенияФЛ.ДатаРождения = СтрокаУчредителя.ДатаРождения;
		СведенияФЛ.ИНН          = СтрокаУчредителя.ИНН;
		// Документ, удостоверяющий личность.
		СведенияФЛ.УдостоверениеЛичности.КодВидаДокумента = СтрокаУчредителя.КодВидаДокумента;
		СведенияФЛ.УдостоверениеЛичности.СерияДокумента   = СтрокаУчредителя.Серия;
		СведенияФЛ.УдостоверениеЛичности.НомерДокумента   = СтрокаУчредителя.Номер;
		СведенияФЛ.УдостоверениеЛичности.КемВыдан         = СтрокаУчредителя.КемВыдан;
		СведенияФЛ.УдостоверениеЛичности.ДатаВыдачи       = СтрокаУчредителя.ДатаВыдачи;
		СведенияФЛ.УдостоверениеЛичности.КодПодразделения = СтрокаУчредителя.КодПодразделения;
		// Адрес
		СведенияФЛ.СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(СтрокаУчредителя.ЗначениеJSONАдрес);
		// Место рождения
		СведенияФЛ.МестоРождения = СтрокаУчредителя.МестоРождения;
		
		Телефоны = Новый Массив;
		Если ЗначениеЗаполнено(СтрокаУчредителя.ТелефонРабочий) Тогда
			Телефоны.Добавить(СтрокаУчредителя.ТелефонРабочий);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаУчредителя.ТелефонДомашний) Тогда
			Телефоны.Добавить(СтрокаУчредителя.ТелефонДомашний);
		КонецЕсли;
		
		// Телефон
		Если Телефоны.Количество() > 0 Тогда
			СведенияФЛ.Телефон = Телефоны[0];
		КонецЕсли;
		
		// Доп. телефон
		Если Телефоны.Количество() > 1 Тогда
			СведенияФЛ.ДопТелефон = Телефоны[1];
		КонецЕсли;
		
		// Выгружаем в xml.
		Компоновщик.ЗаписатьНачалоЭлемента("Учредитель");
		
		// Доля в УК
		ВывестиАтрибут(Компоновщик, "ДоляУК", СтрокаУчредителя.ДоляУК, "Ч,5,2");
		
		ВывестиУниверсальныйУзел_СведенияОФЛТип(Компоновщик, СведенияФЛ, "ФЛ");

		Компоновщик.ЗаписатьКонецЭлемента(); // Учредитель
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Учредители

КонецПроцедуры

#КонецОбласти

#Область ФормированиеАкцепта

Процедура ВывестиУзел_Акцепт_Документ(Компоновщик, ПараметрыПредставления)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(Компоновщик, "ПредметОбмена",     	ПараметрыПредставления.ИдентификаторЗаявки, "Т,255");
	ВывестиАтрибут(Компоновщик, "ДатаПредметаОбмена",   ПараметрыПредставления.ДатаЗаявки, "Д");
	ВывестиНеобязательныйАтрибут(Компоновщик, "РегистрационныйНомер", ПараметрыПредставления.РегистрационныйНомер, "Т,30");
	ВывестиАтрибут(Компоновщик, "ДатаДок",              ТекущаяДатаСеанса(), "Д");
	
	ВывестиУзел_Акцепт_Организация(Компоновщик, ПараметрыПредставления);
	ВывестиУзел_Акцепт_Банк(Компоновщик, ПараметрыПредставления);
	ВывестиУзел_Акцепт_Продукт(Компоновщик, ПараметрыПредставления);
		
	Компоновщик.ЗаписатьКонецЭлемента(); // Документ
	
КонецПроцедуры

Процедура ВывестиУзел_Акцепт_Организация(Компоновщик, ПараметрыПредставления)
		
	Организация = ПараметрыПредставления.Организация;
	
	Компоновщик.ЗаписатьНачалоЭлемента("Организация");
		
	ВывестиАтрибут(Компоновщик, "Наим", Организация.Наименование, "Т,1000");
	ВывестиАтрибут(Компоновщик, "ИНН",  Организация.ИНН, "Т,12");
	ВывестиНеобязательныйАтрибут(Компоновщик, "КПП",  Организация.КПП, "Т,9");
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Организация
	
КонецПроцедуры

Процедура ВывестиУзел_Акцепт_Банк(Компоновщик, ПараметрыПредставления)
		
	Банк = ПараметрыПредставления.Банк;
	
	Компоновщик.ЗаписатьНачалоЭлемента("Банк");
	
	ВывестиАтрибут(Компоновщик, "ИНН",  Банк.ИНН, "Т,10");
	ВывестиАтрибут(Компоновщик, "Наим", Банк.Наименование, "Т,250");
		
	Компоновщик.ЗаписатьКонецЭлемента(); // Банк
	
КонецПроцедуры

Процедура ВывестиУзел_Акцепт_Продукт(Компоновщик, ПараметрыПредставления)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Продукт");
		
	ВывестиАтрибут(Компоновщик, "СуммаКредита", ПараметрыПредставления.СуммаКредита, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "Срок",  ПараметрыПредставления.СрокКредита, "Ч,4");
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Продукт
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеСтруктурыПредставлений

Процедура ВывестиУниверсальныйУзел_ФИОТип(Компоновщик, ФИО, ИмяУзла = "ФИО")
	
	Компоновщик.ЗаписатьНачалоЭлемента(ИмяУзла);
	
	ВывестиАтрибут(Компоновщик, "Фамилия", ФИО.Фамилия);
	ВывестиАтрибут(Компоновщик, "Имя", ФИО.Имя);
	ВывестиНеобязательныйАтрибут(Компоновщик, "Отчество", ФИО.Отчество);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ИмяУзла
	
КонецПроцедуры

Процедура ВывестиУниверсальныйУзел_СведенияОФЛТип(Компоновщик, СведенияФЛ, ИмяУзла)
	
	Компоновщик.ЗаписатьНачалоЭлемента(ИмяУзла);
	
	ВывестиНеобязательныйАтрибут(Компоновщик, "ИННФЛ",        СведенияФЛ.ИНН,          "Т,12");
	ВывестиНеобязательныйАтрибут(Компоновщик, "СНИЛС",        СведенияФЛ.СНИЛС,        "Т,14");

	ВывестиНеобязательныйАтрибут(Компоновщик, "Пол",          СведенияФЛ.Пол,          "Т,1");
	ВывестиАтрибут(Компоновщик, "ДатаРождения", СведенияФЛ.ДатаРождения, "Д");
	
	ВывестиНеобязательныйАтрибут(Компоновщик, "Гражданство",   СведенияФЛ.Гражданство,   "Т,3");
	ВывестиНеобязательныйАтрибут(Компоновщик, "МестоРождения", СведенияФЛ.МестоРождения, "Т,255");
	
	ВывестиНеобязательныйАтрибут(Компоновщик, "СемПолож", СведенияФЛ.СемейноеПоложение, "Т,1");
	
	ВывестиНеобязательныйАтрибут(Компоновщик, "Телефон", СведенияФЛ.Телефон,       "Т,20");
	ВывестиНеобязательныйАтрибут(Компоновщик, "ДопТелефон", СведенияФЛ.ДопТелефон, "Т,20");
	ВывестиНеобязательныйАтрибут(Компоновщик, "ЭлПочта", СведенияФЛ.ЭлПочта,       "Т,255");
	
	ВывестиУниверсальныйУзел_ФИОТип(Компоновщик, СведенияФЛ.ФИО);
	
	Компоновщик.ЗаписатьНачалоЭлемента("УдЛичнФЛ");
	
	УдостоверениеЛичности = СведенияФЛ.УдостоверениеЛичности;
	
	ВывестиАтрибут(Компоновщик, "КодВидДок", УдостоверениеЛичности.КодВидаДокумента,    "Т,2");
	ВывестиНеобязательныйАтрибут(Компоновщик, "СерДок",    УдостоверениеЛичности.СерияДокумента,      "Т,14");
	ВывестиАтрибут(Компоновщик, "НомДок",    УдостоверениеЛичности.НомерДокумента,      "Т,14");
	ВывестиАтрибут(Компоновщик, "ВыдДок",    УдостоверениеЛичности.КемВыдан,            "Т,255");
	ВывестиАтрибут(Компоновщик, "ДатаДок",   УдостоверениеЛичности.ДатаВыдачи,          "Д");
	
	ВывестиНеобязательныйАтрибут(Компоновщик, "КодПодр", УдостоверениеЛичности.КодПодразделения, "Т,255");
	
	Компоновщик.ЗаписатьКонецЭлемента(); // УдЛичнФЛ
	
	ВывестиУниверсальныйУзел_АдресТип(Компоновщик, СведенияФЛ.СведенияОбАдресе); 
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ИмяУзла
	
КонецПроцедуры

Процедура ВывестиУниверсальныйУзел_АдресТип(Компоновщик, СведенияОбАдресе, ИмяУзла = "СведенияОбАдресе")
	
	Компоновщик.ЗаписатьНачалоЭлемента(ИмяУзла);
	
	ВывестиАтрибут(Компоновщик, "Представление", СведенияОбАдресе.Представление, "Т,1000");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Индекс", СведенияОбАдресе.Индекс, "Т,6");
	ВывестиАтрибут(Компоновщик, "КодРегион", ?(СведенияОбАдресе.Свойство("КодРегиона"), СведенияОбАдресе.КодРегиона, ""), "Т,2");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Район", СведенияОбАдресе.Район, "Т,50");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Город", СведенияОбАдресе.Город, "Т,50");
	ВывестиНеобязательныйАтрибут(Компоновщик, "НаселПункт", СведенияОбАдресе.НаселенныйПункт, "Т,50");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Улица", СведенияОбАдресе.Улица, "Т,50");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Дом", СведенияОбАдресе.Здание.Номер, "Т,20");
	
	Если СведенияОбАдресе.Корпуса.Количество() > 0 Тогда
		ВывестиНеобязательныйАтрибут(Компоновщик, "Корпус", СведенияОбАдресе.Корпуса[0].Номер, "Т,20");
	КонецЕсли;
	
	Если СведенияОбАдресе.Помещения.Количество() > 0 Тогда
		ВывестиНеобязательныйАтрибут(Компоновщик, "Кварт", СведенияОбАдресе.Помещения[0].Номер, "Т,20");
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ИмяУзла
	
КонецПроцедуры

// Возвращает пустую структуру сведений о физическом лице, которая используется при выгрузке в XML.
//
Функция НовыеСведенияФЛ()

	Результат = Новый Структура;
	
	Результат.Вставить("ИНН",               "");
	Результат.Вставить("СНИЛС",             "");
	Результат.Вставить("Пол",               ""); // "1" - мужской, "2" - женский.
	Результат.Вставить("ДатаРождения",      '0001-01-01');
	Результат.Вставить("СведенияОбАдресе",   Новый Структура); // Результат функции РаботаСАдресами.СведенияОбАдресе().
	Результат.Вставить("Гражданство",       ""); // Цифровой 3-значный код страны по классификатору ОКСМ.
	Результат.Вставить("МестоРождения",     "");
	Результат.Вставить("СемейноеПоложение", ""); // "1" - Холост/Не замужем, "2" - В разводе, "3" - Женат/Замужем, "4" - Вдовец/Вдова, "5" - Гражданский брак.

	Результат.Вставить("Телефон", "");
	Результат.Вставить("ДопТелефон", "");
	Результат.Вставить("ЭлПочта", "");
	
	Результат.Вставить("ФИО", Новый Структура("Фамилия, Имя, Отчество", "", "", ""));
	
	УдостоверениеЛичности = Новый Структура;
	УдостоверениеЛичности.Вставить("КодВидаДокумента",    "");
	УдостоверениеЛичности.Вставить("СерияДокумента",      "");
	УдостоверениеЛичности.Вставить("НомерДокумента",      "");
	УдостоверениеЛичности.Вставить("КемВыдан",            "");
	УдостоверениеЛичности.Вставить("ДатаВыдачи",          '0001-01-01');
	УдостоверениеЛичности.Вставить("КодПодразделения",    "");
	
	Результат.Вставить("УдостоверениеЛичности", УдостоверениеЛичности);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КомпоновщикXML

Функция НовыйКомпоновщикXML(ИмяФайла, Кодировка = "windows-1251")
	
	КомпоновщикXML = Новый ЗаписьXML();
	КомпоновщикXML.ОткрытьФайл(ИмяФайла, Кодировка);
	КомпоновщикXML.ЗаписатьОбъявлениеXML();
	
	Возврат КомпоновщикXML;
	
КонецФункции
 
Процедура ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ОписаниеТипаАтрибута = СтрРазделить(ТипАтрибута, ",");
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьАтрибут(ИмяАтрибута, ПредставлениеЗначения);
	
КонецПроцедуры

Процедура ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Функция ДвоичныеДанныеКомпоновщикаXML(КомпоновщикXML, ИмяФайла)
	
	КомпоновщикXML.Закрыть();
	КомпоновщикXML = Неопределено;
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

Процедура ВывестиТекст(КомпоновщикXML, Значение)
	
	Текст = Значение;
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Текст = Формат(Значение, "ДФ=dd.MM.yyyy");
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Текст = Формат(Значение, "ЧРД=; ЧРГ=; ЧГ=");
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		Текст = Формат(Значение, "БЛ=0; БИ=1");
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьТекст(Текст);
	
КонецПроцедуры

#КонецОбласти

#Область СостояниеЗаявок

Процедура ЗапуститьУниверсальныйОбменСБанкамиПоСервисуВФоне(Параметры, АдресРезультата) Экспорт
	
	// Скачивание данных с сервера обмена с банками в рег.задании выполняется под полными правами,
	// поэтому если вызываем его интерактивно, то самостоятельно включаем привилегированный режим.
	УстановитьПривилегированныйРежим(Истина);

	УниверсальныйОбменСБанками.ЗапуститьУниверсальныйОбменСБанкамиПоСервису(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит);
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает строку данных транзакции указанного типа с наибольшей датой, но не ранее указанной даты.
//
Функция НайтиТранзакцию(ТаблицаДанныхТранзакций, ТипТранзакции, НеРанееДаты = '0001-01-01')

	Если НЕ ЗначениеЗаполнено(ТаблицаДанныхТранзакций) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Отбор = Новый Структура("ТипТранзакции", ТипТранзакции);
	НайденныеСтроки    = ТаблицаДанныхТранзакций.НайтиСтроки(Отбор);
	МаксДатаТранспорта = '0001-01-01';
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
	
		Если НайденнаяСтрока.ДатаТранспорта < НеРанееДаты Тогда
			// Не учитываем транзакции, которые были получены ранее указанной даты.
			Продолжить;
		КонецЕсли;
	
		Если НайденнаяСтрока.ДатаТранспорта < МаксДатаТранспорта Тогда
			Продолжить;
		КонецЕсли;
		
		МаксДатаТранспорта = НайденнаяСтрока.ДатаТранспорта;
		Результат          = НайденнаяСтрока;
		
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВыгрузкаXML

// Универсальным образом формирует имя файла, добавляемого в отправляемый от заемщика контейнер.
//
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит - назначение отправляемой информации.
//  ТипСодержимого - ПеречислениеСсылка.ТипыСодержимогоФайловОбменаСБанками - формат (расширение файла) информации.
//  СведенияОЗаявке - Структура - см. СведенияОЗаявке() или СведенияОбАкцепте() .
//  КлючУникальности - Строка, Массив - для вставки произвольного текста в середину названия файла.
//
// Возвращаемое значение:
//   Строка      - имя файла для переданного типа содержимого.
//
Функция ИмяФайлаДляКонтейнера(ТипДокумента, ТипСодержимого, СведенияОЗаявке, КлючУникальности = "") Экспорт
	
	СоставнойКлюч = (ТипЗнч(КлючУникальности) = Тип("Массив"));
	
	ЧастиИмениФайла = Новый Массив;
	ЧастиИмениФайла.Добавить("BANK");
	
	Если ТипДокумента = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.АнкетаЗаемщика Тогда
		
		ЧастиИмениФайла.Добавить("LOANAPP");
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.СогласиеНаОбработкуДанных Тогда
		
		ЧастиИмениФайла.Добавить("CONSENT");
		Расширение = ".xml";
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.ПланСчетов Тогда
		
		ЧастиИмениФайла.Добавить("COA");
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.ОтчетЗаемщика Тогда
		
		Если СоставнойКлюч Тогда
			// При выгрузке расшифровки бухгалтерской отчетности ключ всегда будет составным.
			Если КлючУникальности[0] = "ОборотноСальдоваяВедомость" Тогда
			    ЧастиИмениФайла.Добавить("OSV");
			ИначеЕсли КлючУникальности[0] = "АнализСчета" Тогда
				ЧастиИмениФайла.Добавить("ANS");
			ИначеЕсли СтрНачинаетсяС(КлючУникальности[0], "Операции") Тогда
				ЧастиИмениФайла.Добавить("TRN");
			КонецЕсли;
			КлючУникальности.Удалить(0);
			
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.АкцептЗаемщика Тогда
		
		ЧастиИмениФайла.Добавить("ACCEPT");
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Невозможно получить имя файла для контейнера: неизвестный тип документа обмена.'");
	КонецЕсли;
	
	Если СоставнойКлюч Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЧастиИмениФайла, КлючУникальности);
	ИначеЕсли Не ПустаяСтрока(КлючУникальности) Тогда
		ЧастиИмениФайла.Добавить(КлючУникальности);
	КонецЕсли;
	
	ЧастиИмениФайла.Добавить(СведенияОЗаявке.ДанныеЗаемщика.ИдентификаторЗаемщика);
	ЧастиИмениФайла.Добавить(Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")); // дата выгрузки
	Если ТипДокумента <> Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.АкцептЗаемщика Тогда
		ЧастиИмениФайла.Добавить(Строка(Новый УникальныйИдентификатор())); // для гарантированной уникальности файла
	КонецЕсли;	
	
	ИмяФайла = СтрСоединить(ЧастиИмениФайла, "_") + "." + ОбщегоНазначения.ИмяЗначенияПеречисления(ТипСодержимого);
	
	Возврат ИмяФайла;
	
КонецФункции

// Возвращает пустую таблицу для подготовки данных учредителей.
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. переменную Результат.
//
Функция НовыеДанныеУчредителей() Экспорт

	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ОписаниеТиповДата   = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("НомерСтроки",  ОбщегоНазначения.ОписаниеТипаЧисло(5));
	Результат.Колонки.Добавить("Учредитель",   Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	Результат.Колонки.Добавить("Фамилия",       ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("Имя",           ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("Отчество",      ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("ДатаРождения",  ОписаниеТиповДата);
	Результат.Колонки.Добавить("МестоРождения", ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("ИНН",           ОписаниеТиповСтрока);
	
	// Документ, удостоверяющий личность, показывается на форме в виде представления.
	// Отдельные поля нужны для проверки заполнения.
	Результат.Колонки.Добавить("ПредставлениеДокумента", ОписаниеТиповСтрока); 
	Результат.Колонки.Добавить("ВидДокумента",     Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовФизическихЛиц"));
	Результат.Колонки.Добавить("КодВидаДокумента", ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("Серия",            ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("Номер",            ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("ДатаВыдачи",       ОписаниеТиповДата);
	Результат.Колонки.Добавить("КемВыдан",         ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("КодПодразделения", ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("Страна",           ОписаниеТиповСтрока);

	// Адрес по прописке.
	Результат.Колонки.Добавить("Адрес",             ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("ЗначениеJSONАдрес", ОписаниеТиповСтрока);
	
	// Контактная информация
	Результат.Колонки.Добавить("ТелефонРабочий",  ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("ТелефонДомашний", ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("EMail",           ОписаниеТиповСтрока);
	
	// Доля в уставном капитале
	Результат.Колонки.Добавить("ДоляУК", ОбщегоНазначения.ОписаниеТипаЧисло(5, 2));
	
	// Комбинированное представление личных данных
	Результат.Колонки.Добавить("ПредставлениеЛичныхДанных", ОписаниеТиповСтрока);
	
	Возврат Результат;

КонецФункции

// Возвращает структуру с пустыми значениями для параметра ПараметрыПредставления функции ЭлектронноеПредставлениеСообщения().
//
// Возвращаемое значение:
//	Структура - Содержит ключи, которые используются при выгрузке заявки на кредит в xml-файл.
//
Функция НовыеСведенияЗаявкиНаКредит() Экспорт
	
	Сведения = Новый Структура;
	
	Сведения.Вставить("Кодировка", "windows-1251");
	
	Сведения.Вставить("ИдентификаторФайла", "");
	Сведения.Вставить("ВерсияПрограммы",    РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	Сведения.Вставить("ИдентификаторЗаявки",             "");
	Сведения.Вставить("ДатаЗаявки",                      '0001-01-01');
	Сведения.Вставить("СуммаКредита",                    0);
	Сведения.Вставить("СрокКредита",                     0);
	Сведения.Вставить("ЦельКредита",                     ""); // 1 - Пополнение оборотных средств, 2 - Инвестиции в ОС
	Сведения.Вставить("ИдентификаторКредитногоПродукта", "");
	
	Сведения.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	Сведения.Вставить("ОКВЭД", "");
	Сведения.Вставить("ОКОПФ", "");
	Сведения.Вставить("ДатаРегистрации",    '0001-01-01');
	Сведения.Вставить("ДатаФактНачалаДеят", '0001-01-01');
	Сведения.Вставить("ДатаНачалаУчета",    '0001-01-01');
	Сведения.Вставить("ДатаОтчетности",     '0001-01-01');
	
	// Сведения об банке - получателе заявки.
	Банк = Новый Структура;
	Банк.Вставить("ИНН",          "");
	Банк.Вставить("Наименование", "");
	Сведения.Вставить("Банк", Банк);
	
	// Сведения об отправителе - юридическом лице.
	ОтправительЮЛ = Новый Структура;
	
	ОтправительЮЛ.Вставить("Наименование",    "");
	ОтправительЮЛ.Вставить("СокрНаименование","");
	ОтправительЮЛ.Вставить("ИНН",             "");
	ОтправительЮЛ.Вставить("КПП",             "");
	ОтправительЮЛ.Вставить("СведенияОбАдресе", Новый Структура); // Результат функции РаботаСАдресами.СведенияОбАдресе().
	ОтправительЮЛ.Вставить("ОГРН",            "");
	ОтправительЮЛ.Вставить("Нерезидент",      "");  // "0" - резидент, "1" - нерезидент.
	
	ОтправительЮЛ.Вставить("ПолноеНаименованиеДоРеорганизации", "");
	ОтправительЮЛ.Вставить("СокращенноеНаименованиеДоРеорганизации", "");
	
	// Физические лица - учредители юридического лица
	ОтправительЮЛ.Вставить("СоставУчредителей", Перечисления.СоставУчредителейЮридическогоЛица.ПустаяСсылка());
	ОтправительЮЛ.Вставить("Учредители",        НовыеДанныеУчредителей());
	
	Сведения.Вставить("ОтправительЮЛ", ОтправительЮЛ);
	
	// Сведения об отправителе - индивидуальном предпринимателе.
	ОтправительИП = Новый Структура;
	
	ОтправительИП.Вставить("ОГРН",            "");
	
	Сведения.Вставить("ОтправительИП", ОтправительИП);
	
	// Сведения о руководителе юридического лица / индивидуальном предпринимателе.
	Сведения.Вставить("Руководитель",  НовыеСведенияФЛ());
	
	// Сведения о контактном лице.
	КонтактноеЛицо = Новый Структура;
	
	КонтактноеЛицо.Вставить("Должность", "");
	КонтактноеЛицо.Вставить("Телефон",   "");
	КонтактноеЛицо.Вставить("ЭлПочта",   "");
	КонтактноеЛицо.Вставить("ФИО", Новый Структура("Фамилия, Имя, Отчество", "", "", ""));
	
	Сведения.Вставить("КонтактноеЛицо", КонтактноеЛицо);
	
	Сведения.Вставить("СистемыНО", Новый Массив); // "ОСНО", "УСНД", "УСНДМР", "ЕНВД", "ПСНО", "НПД"
	
	Сведения.Вставить("ДополнительныеПоказатели", Новый Массив); // Строка таблицы значений с колонками:
	                                                             // Банк, Идентификатор, ДанныеОтсутствуют, Значение
	                                                             // См. Документ.ЗаявкаНаКредит.ДополнительныеПоказателиБанков()
	
	Возврат Сведения;
	
КонецФункции

// Формирует xml-файл сообщения для банка по заявке на кредит
//
// Параметры:
//  ТипТранзакции - ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит - определяет, какой файл нужно сформировать
//  ПараметрыПредставления - Структура - контекст выгружаемых данных, состав свойств зависит от типа транзакции.
//		см. НовыеСведенияЗаявкиНаКредит().
// 
// Возвращаемое значение:
//   - ДвоичныеДанные - двоичные данные XML-файла, содержащего сообщение для банка
//
Функция ЭлектронноеПредставлениеСообщения(ТипТранзакции, ПараметрыПредставления) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	Компоновщик = НовыйКомпоновщикXML(ИмяВременногоФайла, ПараметрыПредставления.Кодировка);
	
	Компоновщик.ЗаписатьНачалоЭлемента("Файл");
	
	ВывестиАтрибут(Компоновщик, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ВывестиАтрибут(Компоновщик, "ИдФайл",    ПараметрыПредставления.ИдентификаторФайла);
	ВывестиАтрибут(Компоновщик, "ВерсПрог",  ПараметрыПредставления.ВерсияПрограммы);
	
	Если ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ЗаявкаНаКредит Тогда
		ВывестиАтрибут(Компоновщик, "ВерсФорм",  "1.01.06");
		ВывестиУзел_ЗаявкаНаКредит_Документ(Компоновщик, ПараметрыПредставления);
	Иначе
		ВывестиАтрибут(Компоновщик, "ВерсФорм",  "1.01.02");
		ВывестиУзел_Акцепт_Документ(Компоновщик, ПараметрыПредставления);
	КонецЕсли;	
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Файл
	
	Возврат ДвоичныеДанныеКомпоновщикаXML(Компоновщик, ИмяВременногоФайла);
	
КонецФункции

#КонецОбласти

#Область СогласиеНаОбработкуДанных

// Подготавливает внутри фонового задания текст согласия на обработку персональных данных.
//
// Параметры:
//	ПараметрыЗаполнения - Структура - Содержит ключи:
//		* ПараметрыСогласия - Структура - см. ПараметрыСогласия() или ПараметрыСогласияУчредителей().
//		* Банки - Массив - Содержит элементы типа СправочникСсылка.БанкиУниверсальногоОбмена.
//	АдресХранилища - Строка - Адрес временного хранилища, в которое поместить результат выполнения функции.
//
Процедура ЗаполнитьТекстСогласияВФоне(ПараметрыЗаполнения, АдресХранилища) Экспорт
	
	Если ТипЗнч(ПараметрыЗаполнения.ОбъектыСогласия[0]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		РеквизитыОбъектов = Новый ТаблицаЗначений;
		РеквизитыОбъектов.Колонки.Добавить("Учредитель");
		РеквизитыОбъектов.Колонки.Добавить("ТекстМакета");
		РеквизитыОбъектов.Колонки.Добавить("ПараметрыМакета");
		
		ИмяМакета = ?(ПараметрыЗаполнения.ПараметрыСогласия.БолееОдногоБанка,
						"СогласиеУчредителяБанкам", "СогласиеУчредителяБанку");
		ТекстМакета = Документы.ЗаявкаНаКредит.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
		
		Объект = РеквизитыОбъектов.Добавить();
		Объект.Учредитель      = ПараметрыЗаполнения.ПараметрыСогласия.Учредитель;
		Объект.ТекстМакета     = ТекстМакета;
		Объект.ПараметрыМакета = РазметкаТекста(ТекстМакета);
		
		ИмяРеквизитаПолногоНаименования = "ПредставлениеФЛ";
		
	Иначе
		
		РеквизитыОбъектов = ПодготовитьИнформациюОБанкахДляСогласийПоКредитнымПродуктам(
			ПараметрыЗаполнения.ОбъектыСогласия, ПараметрыЗаполнения.ПараметрыСогласия);
			
		ИмяРеквизитаПолногоНаименования = "ПолноеНаименованиеБанка";
		
	КонецЕсли;
	
	Результат = ТекстСогласия(ПараметрыЗаполнения.ПараметрыСогласия, РеквизитыОбъектов, ИмяРеквизитаПолногоНаименования);
	
	ПоместитьВоВременноеХранилище(Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9)), АдресХранилища);
	
КонецПроцедуры

// Согласие на обработку персональных данных, которое дает заемщик банку.
// Все возможные параметры заемщика, доступные для использования в макете.
//
// Параметры:
//  ЭтоЮридическоеЛицо    - Булево - если Ложь, то нужны параметры индивидуального предпринимателя; иначе юридического лица.
//
// Возвращаемое значение:
//   Структура   - набор доступных параметров макета.
//
Функция ПараметрыСогласия(ЭтоЮридическоеЛицо) Экспорт
	
	Результат = Новый Структура;
	// Определяют заполнение остальных параметров.
	Результат.Вставить("Организация",        Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("ДатаСогласия",       '00010101');
	Результат.Вставить("ЭтоЮридическоеЛицо", ЭтоЮридическоеЛицо);
		
	// Общие для всех вариантов.
	Результат.Вставить("ИНН",              "");
	Результат.Вставить("ЮридическийАдрес", "");
	Результат.Вставить("Город",            "");
	
	// Для индивидуального предпринимателя - данные самого ИП, для юридического лица - данные руководителя.
	Результат.Вставить("ПредставлениеФЛ",          ""); // Полное ФИО
	Результат.Вставить("ПолФЛ",                    Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	Результат.Вставить("ДатаРожденияФЛ",           '00010101');
	Результат.Вставить("СтраховойНомерПФРФЛ",      ""); // СНИЛС
	Результат.Вставить("ПредставлениеДокументаФЛ", ""); // Документ, серия, номер, когда и где выдан
	Результат.Вставить("МестоРожденияФЛ",          ""); // Место рождения в том виде, как оно должно быть выведено в тексте согласия.
	Результат.Вставить("СемейноеПоложениеФЛ", "");
	
	Если ЭтоЮридическоеЛицо Тогда
		
		// Информация о самой организации.
		Результат.Вставить("ПолноеНаименование",                     "");
		Результат.Вставить("СокращенноеНаименование",                "");
		Результат.Вставить("ПолноеНаименованиеДоРеорганизации",      "");
		Результат.Вставить("СокращенноеНаименованиеДоРеорганизации", "");
		Результат.Вставить("ДолжностьРуководителяПредставление",     "");
		Результат.Вставить("ОГРН",                                   "");

		// Информация о руководителе организации.
		Результат.Вставить("ПредставлениеФЛРодительныйПадеж", ""); // Заполняется вызывающей процедурой
		Результат.Вставить("ИННФЛ",                           "");
		Результат.Вставить("АдресПоПропискеФизическиеЛицаФЛ", ""); // Регистрация по месту жительства
		Результат.Вставить("EMailФизическиеЛицаФЛ",           "");
		Результат.Вставить("ТелефонРабочийФизическиеЛицаФЛ",  ""); // Основной телефон
		Результат.Вставить("ТелефонДомашнийФизическиеЛицаФЛ", ""); // Дополнительный телефон
		
	Иначе
		
		// Информация о самом ИП.
		Результат.Вставить("Email",                     "");
		Результат.Вставить("Телефоны",                  ""); // Основной телефон
		Результат.Вставить("ТелефонЮридическогоАдреса", ""); // Дополнительный телефон
		
		Результат.Вставить("СтранаФЛ",            "");
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Согласие на обработку персональных данных, которое дают учредители заемщика своему юр.лицу.
// Все возможные параметры учредителей заемщика, доступные для использования в макете.
//
// Возвращаемое значение:
//   Структура   - набор доступных параметров макета.
//
Функция ПараметрыСогласияУчредителей() Экспорт
	
	Результат = Новый Структура;
	// Определяют заполнение остальных параметров.
	Результат.Вставить("Организация",  Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("ДатаСогласия", '00010101');
	Результат.Вставить("Город",         "");
	
	// Кто предоставляет согласие.
	Результат.Вставить("Учредитель",             Справочники.ФизическиеЛица.ПустаяСсылка());
	Результат.Вставить("ПредставлениеФЛ",        ""); // Полное ФИО
	Результат.Вставить("Страна",                 "");
	Результат.Вставить("ДатаРожденияФЛ",         '00010101');
	Результат.Вставить("МестоРождения",          ""); // Место рождения в том виде, как оно должно быть выведено в тексте согласия
	Результат.Вставить("АдресПоПрописке",        ""); // Регистрация по месту жительства
	Результат.Вставить("ПредставлениеДокумента", ""); // Документ, серия, номер, когда и где выдан
	Результат.Вставить("ИНН",                    "");
	Результат.Вставить("ТелефонРабочий",         ""); // Основной телефон
	Результат.Вставить("ТелефонДомашний",        ""); // Дополнительный телефон
	Результат.Вставить("EMail",                  "");
	
	// Кому предназначено согласие.
	Результат.Вставить("ПолноеНаименование", "");
	Результат.Вставить("ОГРН",               "");
	Результат.Вставить("ЮридическийАдрес",   "");
	Результат.Вставить("БанкиРеквизиты",     "");
	Результат.Вставить("БолееОдногоБанка",   Ложь); // признак, что банков-получателей согласия несколько

	Возврат Результат;
	
КонецФункции

// Получает из специального сервиса информацию о банках-получателях согласия на обработку персональных данных.
//
// Параметры:
//  Банки         - ОпределяемыйТип.БанкиУниверсальногоОбмена, Массив - о чем собирается информация.
//
// Возвращаемое значение:
//   ТаблицаЗначений - информация о кредиторах.
//
Функция ПодготовитьИнформациюОБанкахДляСогласий(Банки) Экспорт
	
	ЭтоСписок = (ТипЗнч(Банки) <> Тип("СправочникСсылка.БанкиУниверсальногоОбмена"));

	РеквизитыБанков = УниверсальныйОбменСБанками.РеквизитыБанков(
		?(ЭтоСписок, Банки, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Банки)),
		"Наименование, НаименованиеПолное, ИНН, ОГРН, Адрес");
	РеквизитыБанков.Колонки.НаименованиеПолное.Имя = "ПолноеНаименованиеБанка";
	РеквизитыБанков.Колонки.ИНН.Имя                = "ИННБанка";
	РеквизитыБанков.Колонки.ОГРН.Имя               = "ОГРНБанка";
	РеквизитыБанков.Колонки.Адрес.Имя              = "ЮридическийАдресБанка";
	
	РеквизитыБанков.Колонки.Добавить("ТекстМакета", Новый ОписаниеТипов("Строка"));
	РеквизитыБанков.Колонки.Добавить("ПараметрыМакета", Новый ОписаниеТипов("ТаблицаЗначений"));

	Для каждого РеквизитыБанка Из РеквизитыБанков Цикл

		РеквизитыБанка.ЮридическийАдресБанка =
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(РеквизитыБанка.ЮридическийАдресБанка);
	
	КонецЦикла;
	
	Возврат РеквизитыБанков;
	
КонецФункции

// Получает из специального сервиса информацию о банках-получателях согласия на обработку персональных данных.
//
// Параметры:
//  КредитныеПродукты         - Строка таблицы значений, см. Документ.ЗаявкаНаКредит.СведенияОБанках(), Массив - о чем собирается информация.
//  ПараметрыСогласияЗаемщика - Структура - см. ПараметрыСогласия() . Передается, когда требуются макеты согласия заемщика.
//
// Возвращаемое значение:
//   ТаблицаЗначений - информация о кредиторах.
//
Функция ПодготовитьИнформациюОБанкахДляСогласийПоКредитнымПродуктам(КредитныеПродукты, ПараметрыСогласияЗаемщика = Неопределено) Экспорт
	
	Банки = ОбщегоНазначения.ВыгрузитьКолонку(КредитныеПродукты, "Банк", Истина);
	
	РеквизитыБанков = УниверсальныйОбменСБанками.РеквизитыБанков(Банки, "Наименование, НаименованиеПолное, ИНН, КПП, ОГРН, Адрес, Логотип");
	Для каждого РеквизитыБанка Из РеквизитыБанков Цикл
		РеквизитыБанка.Адрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(РеквизитыБанка.Адрес);
	КонецЦикла;
	
	СогласияПоКредитнымПродуктам = Новый ТаблицаЗначений;
	СогласияПоКредитнымПродуктам.Колонки.Добавить("Банк", Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена"));
	СогласияПоКредитнымПродуктам.Колонки.Добавить("ИдентификаторКредитногоПродукта", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СогласияПоКредитнымПродуктам.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СогласияПоКредитнымПродуктам.Колонки.Добавить("ПолноеНаименованиеБанка", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СогласияПоКредитнымПродуктам.Колонки.Добавить("ИННБанка", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СогласияПоКредитнымПродуктам.Колонки.Добавить("КППБанка", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СогласияПоКредитнымПродуктам.Колонки.Добавить("ОГРНБанка", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СогласияПоКредитнымПродуктам.Колонки.Добавить("ЮридическийАдресБанка", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СогласияПоКредитнымПродуктам.Колонки.Добавить("ТекстМакета", Новый ОписаниеТипов("Строка"));
	СогласияПоКредитнымПродуктам.Колонки.Добавить("ПараметрыМакета", Новый ОписаниеТипов("ТаблицаЗначений"));
	СогласияПоКредитнымПродуктам.Колонки.Добавить("Логотип", Новый ОписаниеТипов("ДвоичныеДанные"));
	
	Для каждого КредитныйПродукт Из КредитныеПродукты Цикл
		НоваяСтрока = СогласияПоКредитнымПродуктам.Добавить();
		НоваяСтрока.Банк = КредитныйПродукт.Банк;
		НоваяСтрока.ИдентификаторКредитногоПродукта = КредитныйПродукт.ИдентификаторКредитногоПродукта;
		
		РеквизитыБанка = РеквизитыБанков.Найти(НоваяСтрока.Банк, "Банк");
		Если РеквизитыБанка <> Неопределено Тогда
			НоваяСтрока.Наименование            = РеквизитыБанка.Наименование;
			НоваяСтрока.ПолноеНаименованиеБанка = РеквизитыБанка.НаименованиеПолное;
			НоваяСтрока.ИННБанка                = РеквизитыБанка.ИНН;
			НоваяСтрока.КППБанка                = РеквизитыБанка.КПП;
			НоваяСтрока.ОГРНБанка               = РеквизитыБанка.ОГРН;
			НоваяСтрока.ЮридическийАдресБанка   = РеквизитыБанка.Адрес;
			НоваяСтрока.Логотип                 = РеквизитыБанка.Логотип;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыСогласияЗаемщика <> Неопределено Тогда
		ПодобратьТекстыМакетов(СогласияПоКредитнымПродуктам, ПараметрыСогласияЗаемщика.ЭтоЮридическоеЛицо, ПараметрыСогласияЗаемщика.ДатаСогласия);
	КонецЕсли;

	Возврат СогласияПоКредитнымПродуктам;
	
КонецФункции

// Формирует текст согласия на обработку персональных данных.
//
// Параметры:
//  ПараметрыСогласия - Структура - см. ПараметрыСогласия()
//  РеквизитыОбъектов - ТаблицаЗначений - см. ПодготовитьИнформациюОБанкахДляСогласий()
//  ОбъединитьТексты - Булево - если Ложь, то возвращается массив текстов согласий; если Истина - один сводный текст.
//
// Возвращаемое значение:
//   Строка, ТаблицаЗначений - текст для веб-страницы или набор текстов по каждому банку. Колонки таблицы значений:
//   * Банк - СправочникСсылка.БанкиУниверсальногоОбмена - Банк
//   * ИдентификаторКредитногоПродукта - Строка - Идентификатор кредитного продукта
//   * Текст - Строка - Текст согласия
//
Функция ТекстСогласия(ПараметрыСогласия, РеквизитыОбъектов, ИмяРеквизитаПолногоНаименования, ОбъединитьТексты = Истина) Экспорт
	
	Если РеквизитыОбъектов.Количество() = 0 Тогда
		Возврат ?(ОбъединитьТексты, "", Новый Массив);
	КонецЕсли;
	
	// Заполним автозаполняемые параметры.
	ПараметрыСогласия.Вставить("ДатаДокумента", Формат(ПараметрыСогласия.ДатаСогласия, "ДЛФ=DD"));
	Если ПараметрыСогласия.Свойство("ДатаРожденияФЛ") Тогда
		ПараметрыСогласия.ДатаРожденияФЛ = Формат(ПараметрыСогласия.ДатаРожденияФЛ, "ДЛФ=DD");
	КонецЕсли;

	ПараметрыСогласия.Вставить("НаименованиеДоРеорганизации", "");
	Если ПараметрыСогласия.Свойство("ПолноеНаименованиеДоРеорганизации")
		И ПараметрыСогласия.Свойство("СокращенноеНаименованиеДоРеорганизации") Тогда
		Если ЗначениеЗаполнено(ПараметрыСогласия.ПолноеНаименованиеДоРеорганизации)
			ИЛИ ЗначениеЗаполнено(ПараметрыСогласия.СокращенноеНаименованиеДоРеорганизации) Тогда

			ПараметрыСогласия.НаименованиеДоРеорганизации = СтрШаблон(
				НСтр("ru = ',</B> сведения о реорганизации: <B>%1 (%2)'"),
				ПараметрыСогласия.ПолноеНаименованиеДоРеорганизации,
				ПараметрыСогласия.СокращенноеНаименованиеДоРеорганизации);
		КонецЕсли;
	КонецЕсли;
	
	Ключ = "Банк";
	Если РеквизитыОбъектов.Колонки.Найти("Учредитель") <> Неопределено Тогда
		Ключ = "Учредитель";
	КонецЕсли;

	// Заполняем параметры в макетах.
	ТекстыСогласий = Новый ТаблицаЗначений;
	ТекстыСогласий.Колонки.Добавить("Банк", Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена"));
	ТекстыСогласий.Колонки.Добавить("ИдентификаторКредитногоПродукта", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТекстыСогласий.Колонки.Добавить("Текст", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТекстыСогласий.Индексы.Добавить("Банк, ИдентификаторКредитногоПродукта");
	
	Для каждого ИнформацияОбОбъекте Из РеквизитыОбъектов Цикл
	
		ТекстыРезультата = Новый Массив;
		ПозицияКурсора = 1;
		Для каждого ПараметрМакета Из ИнформацияОбОбъекте.ПараметрыМакета Цикл
			
			ЗначениеПараметра = Неопределено;
			Если ПараметрыСогласия.Свойство(ПараметрМакета.ИмяПараметра, ЗначениеПараметра)
			   И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			   
				ПараметрМакета.ЗначениеПараметра = ЗначениеПараметра;

			ИначеЕсли РеквизитыОбъектов.Колонки.Найти(ПараметрМакета.ИмяПараметра) <> Неопределено Тогда

				ПараметрМакета.ЗначениеПараметра = ИнформацияОбОбъекте[ПараметрМакета.ИмяПараметра];

			ИначеЕсли ПараметрМакета.ИмяПараметра = "НаименованиеДоРеорганизации" Тогда // необязательные параметры
				
				ПараметрМакета.ЗначениеПараметра = "";
				
			Иначе // обязательный параметр

				ПараметрМакета.ЗначениеПараметра = "_______";

			КонецЕсли;
			
			ТекстыРезультата.Добавить(Сред(ИнформацияОбОбъекте.ТекстМакета, ПозицияКурсора, ПараметрМакета.ПозицияНачала - ПозицияКурсора));
			ТекстыРезультата.Добавить("<B>");
			ТекстыРезультата.Добавить(ПараметрМакета.ЗначениеПараметра);
			ТекстыРезультата.Добавить("</B>");
			ПозицияКурсора = ПараметрМакета.ПозицияКонца + 1;
		
		КонецЦикла; 
		Если ПозицияКурсора <= СтрДлина(ИнформацияОбОбъекте.ТекстМакета) Тогда
			ТекстыРезультата.Добавить(Сред(ИнформацияОбОбъекте.ТекстМакета, ПозицияКурсора));
		КонецЕсли;
		
		НоваяСтрока = ТекстыСогласий.Добавить();
		Если РеквизитыОбъектов.Колонки.Найти("Банк") <> Неопределено Тогда
			НоваяСтрока.Банк = ИнформацияОбОбъекте.Банк;
		КонецЕсли;
		Если РеквизитыОбъектов.Колонки.Найти("ИдентификаторКредитногоПродукта") <> Неопределено Тогда
			НоваяСтрока.ИдентификаторКредитногоПродукта = ИнформацияОбОбъекте.ИдентификаторКредитногоПродукта;
		КонецЕсли;
		НоваяСтрока.Текст = СтрСоединить(ТекстыРезультата);
	
	КонецЦикла;
	
	// Объединяем согласия нескольких объектов в один html-текст.
	Если ТекстыСогласий.Количество() = 1 Тогда
		
		Если ОбъединитьТексты Тогда
			Для каждого СтрокаТаблицы Из ТекстыСогласий Цикл
				Возврат СтрокаТаблицы.Текст;
			КонецЦикла;
		Иначе
			Возврат ТекстыСогласий;
		КонецЕсли;
		
	Иначе
		
		Если ОбъединитьТексты Тогда
			
			МассивТекстовСогласий = Новый Массив;
			Для каждого СтрокаТаблицы Из ТекстыСогласий Цикл
				МассивТекстовСогласий.Добавить(СтрокаТаблицы.Текст);
			КонецЦикла;
			
			АнализируемыйТекст = НРег(МассивТекстовСогласий[0]);
			ПозицияКурсора = СтрНайти(АнализируемыйТекст, "<body");
			ПозицияКурсора = СтрНайти(АнализируемыйТекст, ">", НаправлениеПоиска.СНачала, ПозицияКурсора);
			ТекстДоТела = Лев(МассивТекстовСогласий[0], ПозицияКурсора);
			ПозицияКурсора = СтрНайти(АнализируемыйТекст, "</body>", НаправлениеПоиска.СКонца);
			ТекстПослеТела = Сред(МассивТекстовСогласий[0], ПозицияКурсора);
			
			// Оставляем только тела html-документов.
			РазделительнаяЛиния = "<P align=center ALIGN=""center""><FONT size=14><EM><U>%1</U></EM></FONT></P>
			|<P align=center ALIGN=""center"">";
			Для ИндексСогласия = 0 По МассивТекстовСогласий.ВГраница() Цикл
				// Добавляем разделительные линии между согласиями для разных кредиторов.
				// Текущая позиция линии в списке фрагментов текста сдвигается пропорционально числу элементов.
				ИндексРазделительнойЛинии = ИндексСогласия * 2;
				АнализируемыйТекст = НРег(МассивТекстовСогласий[ИндексРазделительнойЛинии]);
				ПозицияКурсора = СтрНайти(АнализируемыйТекст, "<body");
				ПозицияКурсора = СтрНайти(АнализируемыйТекст, ">", НаправлениеПоиска.СНачала, ПозицияКурсора);
				МассивТекстовСогласий[ИндексРазделительнойЛинии] = Сред(МассивТекстовСогласий[ИндексРазделительнойЛинии],
					ПозицияКурсора + 1,
					СтрНайти(АнализируемыйТекст, "</body>", НаправлениеПоиска.СКонца) - ПозицияКурсора - 1);
					
				МассивТекстовСогласий.Вставить(ИндексРазделительнойЛинии,
					СтрШаблон(РазделительнаяЛиния, РеквизитыОбъектов[ИндексСогласия][ИмяРеквизитаПолногоНаименования]));
				
			КонецЦикла;

			МассивТекстовСогласий.Вставить(0, ТекстДоТела);
			МассивТекстовСогласий.Добавить(ТекстПослеТела);
			ТекстыРезультата = СтрСоединить(МассивТекстовСогласий);
			
		Иначе
			
			ТекстыРезультата = ТекстыСогласий;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ТекстыРезультата;

КонецФункции

#КонецОбласти
